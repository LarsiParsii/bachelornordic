
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 7d 00 20 05 58 01 00 01 4a 02 00 d9 57 01 00     .}. .X...J...W..
  10:	d9 57 01 00 d9 57 01 00 d9 57 01 00 00 00 00 00     .W...W...W......
	...
  2c:	4d 50 01 00 d9 57 01 00 00 00 00 00 bd 4f 01 00     MP...W.......O..
  3c:	d9 57 01 00                                         .W..

00000040 <_irq_vector_table>:
  40:	bd 51 01 00 39 67 02 00 bd 51 01 00 bd 51 01 00     .Q..9g...Q...Q..
  50:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  60:	e7 66 02 00 bd 51 01 00 bd 51 01 00 1f 67 02 00     .f...Q...Q...g..
  70:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  80:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  90:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  a0:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  b0:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  c0:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  d0:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  e0:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..
  f0:	bd 51 01 00 bd 51 01 00 bd 51 01 00 bd 51 01 00     .Q...Q...Q...Q..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x16>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x3a>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x58>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf4>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <CONFIG_BT_HCI_TX_STACK_SIZE+0x7c>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <CONFIG_BT_HCI_TX_STACK_SIZE+0xda>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <CONFIG_BT_HCI_TX_STACK_SIZE+0x13a>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <__z_interrupt_stack_SIZEOF+0x5a>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <__z_interrupt_stack_SIZEOF+0x30>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <__z_interrupt_stack_SIZEOF>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <__z_interrupt_stack_SIZEOF+0xa>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <__z_interrupt_stack_SIZEOF+0x88>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <__z_interrupt_stack_SIZEOF+0x9c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     93a:	e712      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295
     94c:	f04f 30ff 	movne.w	r0, #4294967295
     950:	f000 b80c 	b.w	96c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f00b ff6e 	bl	c83c <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <__gedf2>:
     970:	f04f 3cff 	mov.w	ip, #4294967295
     974:	e006      	b.n	984 <__cmpdf2+0x4>
     976:	bf00      	nop

00000978 <__ledf2>:
     978:	f04f 0c01 	mov.w	ip, #1
     97c:	e002      	b.n	984 <__cmpdf2+0x4>
     97e:	bf00      	nop

00000980 <__cmpdf2>:
     980:	f04f 0c01 	mov.w	ip, #1
     984:	f84d cd04 	str.w	ip, [sp, #-4]!
     988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     98c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     994:	bf18      	it	ne
     996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     99a:	d01b      	beq.n	9d4 <__cmpdf2+0x54>
     99c:	b001      	add	sp, #4
     99e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     9a2:	bf0c      	ite	eq
     9a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     9a8:	ea91 0f03 	teqne	r1, r3
     9ac:	bf02      	ittt	eq
     9ae:	ea90 0f02 	teqeq	r0, r2
     9b2:	2000      	moveq	r0, #0
     9b4:	4770      	bxeq	lr
     9b6:	f110 0f00 	cmn.w	r0, #0
     9ba:	ea91 0f03 	teq	r1, r3
     9be:	bf58      	it	pl
     9c0:	4299      	cmppl	r1, r3
     9c2:	bf08      	it	eq
     9c4:	4290      	cmpeq	r0, r2
     9c6:	bf2c      	ite	cs
     9c8:	17d8      	asrcs	r0, r3, #31
     9ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     9ce:	f040 0001 	orr.w	r0, r0, #1
     9d2:	4770      	bx	lr
     9d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9dc:	d102      	bne.n	9e4 <__cmpdf2+0x64>
     9de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9e2:	d107      	bne.n	9f4 <__cmpdf2+0x74>
     9e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9ec:	d1d6      	bne.n	99c <__cmpdf2+0x1c>
     9ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9f2:	d0d3      	beq.n	99c <__cmpdf2+0x1c>
     9f4:	f85d 0b04 	ldr.w	r0, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_cdrcmple>:
     9fc:	4684      	mov	ip, r0
     9fe:	4610      	mov	r0, r2
     a00:	4662      	mov	r2, ip
     a02:	468c      	mov	ip, r1
     a04:	4619      	mov	r1, r3
     a06:	4663      	mov	r3, ip
     a08:	e000      	b.n	a0c <__aeabi_cdcmpeq>
     a0a:	bf00      	nop

00000a0c <__aeabi_cdcmpeq>:
     a0c:	b501      	push	{r0, lr}
     a0e:	f7ff ffb7 	bl	980 <__cmpdf2>
     a12:	2800      	cmp	r0, #0
     a14:	bf48      	it	mi
     a16:	f110 0f00 	cmnmi.w	r0, #0
     a1a:	bd01      	pop	{r0, pc}

00000a1c <__aeabi_dcmpeq>:
     a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a20:	f7ff fff4 	bl	a0c <__aeabi_cdcmpeq>
     a24:	bf0c      	ite	eq
     a26:	2001      	moveq	r0, #1
     a28:	2000      	movne	r0, #0
     a2a:	f85d fb08 	ldr.w	pc, [sp], #8
     a2e:	bf00      	nop

00000a30 <__aeabi_dcmplt>:
     a30:	f84d ed08 	str.w	lr, [sp, #-8]!
     a34:	f7ff ffea 	bl	a0c <__aeabi_cdcmpeq>
     a38:	bf34      	ite	cc
     a3a:	2001      	movcc	r0, #1
     a3c:	2000      	movcs	r0, #0
     a3e:	f85d fb08 	ldr.w	pc, [sp], #8
     a42:	bf00      	nop

00000a44 <__aeabi_dcmple>:
     a44:	f84d ed08 	str.w	lr, [sp, #-8]!
     a48:	f7ff ffe0 	bl	a0c <__aeabi_cdcmpeq>
     a4c:	bf94      	ite	ls
     a4e:	2001      	movls	r0, #1
     a50:	2000      	movhi	r0, #0
     a52:	f85d fb08 	ldr.w	pc, [sp], #8
     a56:	bf00      	nop

00000a58 <__aeabi_dcmpge>:
     a58:	f84d ed08 	str.w	lr, [sp, #-8]!
     a5c:	f7ff ffce 	bl	9fc <__aeabi_cdrcmple>
     a60:	bf94      	ite	ls
     a62:	2001      	movls	r0, #1
     a64:	2000      	movhi	r0, #0
     a66:	f85d fb08 	ldr.w	pc, [sp], #8
     a6a:	bf00      	nop

00000a6c <__aeabi_dcmpgt>:
     a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a70:	f7ff ffc4 	bl	9fc <__aeabi_cdrcmple>
     a74:	bf34      	ite	cc
     a76:	2001      	movcc	r0, #1
     a78:	2000      	movcs	r0, #0
     a7a:	f85d fb08 	ldr.w	pc, [sp], #8
     a7e:	bf00      	nop

00000a80 <ocrypto_bigint_add256>:
     a80:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     a84:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     a88:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     a8c:	185b      	adds	r3, r3, r1
     a8e:	eb54 040c 	adcs.w	r4, r4, ip
     a92:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     a96:	414d      	adcs	r5, r1
     a98:	eb56 060c 	adcs.w	r6, r6, ip
     a9c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     aa0:	414f      	adcs	r7, r1
     aa2:	eb58 080c 	adcs.w	r8, r8, ip
     aa6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     aaa:	eb59 0901 	adcs.w	r9, r9, r1
     aae:	eb5a 0a0c 	adcs.w	sl, sl, ip
     ab2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     ab6:	4180      	sbcs	r0, r0
     ab8:	3001      	adds	r0, #1
     aba:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     abe:	4770      	bx	lr

00000ac0 <ocrypto_bigint_sub256>:
     ac0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     ac4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     ac8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     acc:	1a5b      	subs	r3, r3, r1
     ace:	eb74 040c 	sbcs.w	r4, r4, ip
     ad2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ad6:	418d      	sbcs	r5, r1
     ad8:	eb76 060c 	sbcs.w	r6, r6, ip
     adc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ae0:	418f      	sbcs	r7, r1
     ae2:	eb78 080c 	sbcs.w	r8, r8, ip
     ae6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     aea:	eb79 0901 	sbcs.w	r9, r9, r1
     aee:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     af2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     af6:	4180      	sbcs	r0, r0
     af8:	4240      	negs	r0, r0
     afa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     afe:	4770      	bx	lr

00000b00 <ocrypto_bigint_cadd256>:
     b00:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b04:	4252      	negs	r2, r2
     b06:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b0a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b0e:	4017      	ands	r7, r2
     b10:	19db      	adds	r3, r3, r7
     b12:	ea18 0802 	ands.w	r8, r8, r2
     b16:	eb54 0408 	adcs.w	r4, r4, r8
     b1a:	ea19 0902 	ands.w	r9, r9, r2
     b1e:	eb55 0509 	adcs.w	r5, r5, r9
     b22:	ea1a 0a02 	ands.w	sl, sl, r2
     b26:	eb56 060a 	adcs.w	r6, r6, sl
     b2a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     b2c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b30:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b34:	4017      	ands	r7, r2
     b36:	417b      	adcs	r3, r7
     b38:	ea18 0802 	ands.w	r8, r8, r2
     b3c:	eb54 0408 	adcs.w	r4, r4, r8
     b40:	ea19 0902 	ands.w	r9, r9, r2
     b44:	eb55 0509 	adcs.w	r5, r5, r9
     b48:	ea1a 0a02 	ands.w	sl, sl, r2
     b4c:	eb56 060a 	adcs.w	r6, r6, sl
     b50:	c078      	stmia	r0!, {r3, r4, r5, r6}
     b52:	4180      	sbcs	r0, r0
     b54:	3001      	adds	r0, #1
     b56:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b5a:	4770      	bx	lr

00000b5c <ocrypto_bigint_csub256>:
     b5c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b60:	4252      	negs	r2, r2
     b62:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b66:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b6a:	4017      	ands	r7, r2
     b6c:	1bdb      	subs	r3, r3, r7
     b6e:	ea18 0802 	ands.w	r8, r8, r2
     b72:	eb74 0408 	sbcs.w	r4, r4, r8
     b76:	ea19 0902 	ands.w	r9, r9, r2
     b7a:	eb75 0509 	sbcs.w	r5, r5, r9
     b7e:	ea1a 0a02 	ands.w	sl, sl, r2
     b82:	eb76 060a 	sbcs.w	r6, r6, sl
     b86:	c078      	stmia	r0!, {r3, r4, r5, r6}
     b88:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b8c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b90:	4017      	ands	r7, r2
     b92:	41bb      	sbcs	r3, r7
     b94:	ea18 0802 	ands.w	r8, r8, r2
     b98:	eb74 0408 	sbcs.w	r4, r4, r8
     b9c:	ea19 0902 	ands.w	r9, r9, r2
     ba0:	eb75 0509 	sbcs.w	r5, r5, r9
     ba4:	ea1a 0a02 	ands.w	sl, sl, r2
     ba8:	eb76 060a 	sbcs.w	r6, r6, sl
     bac:	c078      	stmia	r0!, {r3, r4, r5, r6}
     bae:	4180      	sbcs	r0, r0
     bb0:	4240      	negs	r0, r0
     bb2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     bb6:	4770      	bx	lr

00000bb8 <ocrypto_bigint_cswap256>:
     bb8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     bbc:	4252      	negs	r2, r2
     bbe:	f04f 0804 	mov.w	r8, #4

00000bc2 <cswap256_loop>:
     bc2:	e890 0030 	ldmia.w	r0, {r4, r5}
     bc6:	e891 00c0 	ldmia.w	r1, {r6, r7}
     bca:	1ba3      	subs	r3, r4, r6
     bcc:	4013      	ands	r3, r2
     bce:	1ae4      	subs	r4, r4, r3
     bd0:	18f6      	adds	r6, r6, r3
     bd2:	1beb      	subs	r3, r5, r7
     bd4:	4013      	ands	r3, r2
     bd6:	1aed      	subs	r5, r5, r3
     bd8:	18ff      	adds	r7, r7, r3
     bda:	c030      	stmia	r0!, {r4, r5}
     bdc:	c1c0      	stmia	r1!, {r6, r7}
     bde:	f1b8 0801 	subs.w	r8, r8, #1
     be2:	d1ee      	bne.n	bc2 <cswap256_loop>
     be4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     be8:	4770      	bx	lr
     bea:	bf00      	nop

00000bec <ocrypto_mul256_noframe>:
     bec:	b500      	push	{lr}
     bee:	ec92 0a08 	vldmia	r2, {s0-s7}
     bf2:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     bf6:	ee07 1a10 	vmov	s14, r1
     bfa:	ec53 2a10 	vmov	r2, r3, s0, s1
     bfe:	ec56 4a11 	vmov	r4, r6, s2, s3
     c02:	fba7 5102 	umull	r5, r1, r7, r2
     c06:	fba8 0b02 	umull	r0, fp, r8, r2
     c0a:	fbe7 1063 	umaal	r1, r0, r7, r3
     c0e:	fbe9 b062 	umaal	fp, r0, r9, r2
     c12:	ec41 5a14 	vmov	s8, s9, r5, r1
     c16:	fba8 5103 	umull	r5, r1, r8, r3
     c1a:	fbea 0162 	umaal	r0, r1, sl, r2
     c1e:	fbe7 b564 	umaal	fp, r5, r7, r4
     c22:	fbe7 0566 	umaal	r0, r5, r7, r6
     c26:	fbe8 1566 	umaal	r1, r5, r8, r6
     c2a:	ee05 ba10 	vmov	s10, fp
     c2e:	fba9 b603 	umull	fp, r6, r9, r3
     c32:	fbea 1663 	umaal	r1, r6, sl, r3
     c36:	fbec 5663 	umaal	r5, r6, ip, r3
     c3a:	fbe8 0b64 	umaal	r0, fp, r8, r4
     c3e:	fbe9 1b64 	umaal	r1, fp, r9, r4
     c42:	fbea 5b64 	umaal	r5, fp, sl, r4
     c46:	fbec 6b64 	umaal	r6, fp, ip, r4
     c4a:	ee05 0a90 	vmov	s11, r0
     c4e:	fbac 3002 	umull	r3, r0, ip, r2
     c52:	ee12 4a10 	vmov	r4, s4
     c56:	fbee 5062 	umaal	r5, r0, lr, r2
     c5a:	fbe9 6064 	umaal	r6, r0, r9, r4
     c5e:	fbea b064 	umaal	fp, r0, sl, r4
     c62:	fbe7 3164 	umaal	r3, r1, r7, r4
     c66:	fbe8 5164 	umaal	r5, r1, r8, r4
     c6a:	ee12 4a90 	vmov	r4, s5
     c6e:	fbe8 6164 	umaal	r6, r1, r8, r4
     c72:	fbe9 b164 	umaal	fp, r1, r9, r4
     c76:	fbea 0164 	umaal	r0, r1, sl, r4
     c7a:	ee06 3a10 	vmov	s12, r3
     c7e:	fba7 3204 	umull	r3, r2, r7, r4
     c82:	ee13 4a10 	vmov	r4, s6
     c86:	fbe7 6264 	umaal	r6, r2, r7, r4
     c8a:	fbe8 b264 	umaal	fp, r2, r8, r4
     c8e:	fbe9 0264 	umaal	r0, r2, r9, r4
     c92:	fbea 1264 	umaal	r1, r2, sl, r4
     c96:	ee11 4a90 	vmov	r4, s3
     c9a:	fbe9 5364 	umaal	r5, r3, r9, r4
     c9e:	fbea 6364 	umaal	r6, r3, sl, r4
     ca2:	ee13 4a90 	vmov	r4, s7
     ca6:	fbe7 b364 	umaal	fp, r3, r7, r4
     caa:	fbe8 0364 	umaal	r0, r3, r8, r4
     cae:	fbe9 1364 	umaal	r1, r3, r9, r4
     cb2:	fbea 2364 	umaal	r2, r3, sl, r4
     cb6:	ee06 5a90 	vmov	s13, r5
     cba:	ee17 9a10 	vmov	r9, s14
     cbe:	e899 0600 	ldmia.w	r9, {r9, sl}
     cc2:	ee10 8a10 	vmov	r8, s0
     cc6:	fba9 5408 	umull	r5, r4, r9, r8
     cca:	fbea b468 	umaal	fp, r4, sl, r8
     cce:	ee12 8a10 	vmov	r8, s4
     cd2:	fbec 0468 	umaal	r0, r4, ip, r8
     cd6:	fbee 1468 	umaal	r1, r4, lr, r8
     cda:	fbe9 2468 	umaal	r2, r4, r9, r8
     cde:	fbea 3468 	umaal	r3, r4, sl, r8
     ce2:	ee10 8a90 	vmov	r8, s1
     ce6:	fbee 6568 	umaal	r6, r5, lr, r8
     cea:	fbe9 b568 	umaal	fp, r5, r9, r8
     cee:	fbea 0568 	umaal	r0, r5, sl, r8
     cf2:	ee12 8a90 	vmov	r8, s5
     cf6:	fbec 1568 	umaal	r1, r5, ip, r8
     cfa:	fbee 2568 	umaal	r2, r5, lr, r8
     cfe:	fbe9 3568 	umaal	r3, r5, r9, r8
     d02:	fbea 4568 	umaal	r4, r5, sl, r8
     d06:	ee07 6a10 	vmov	s14, r6
     d0a:	ee11 8a10 	vmov	r8, s2
     d0e:	fbae 7608 	umull	r7, r6, lr, r8
     d12:	fbe9 0668 	umaal	r0, r6, r9, r8
     d16:	fbea 1668 	umaal	r1, r6, sl, r8
     d1a:	ee13 8a10 	vmov	r8, s6
     d1e:	fbec 2668 	umaal	r2, r6, ip, r8
     d22:	fbee 3668 	umaal	r3, r6, lr, r8
     d26:	fbe9 4668 	umaal	r4, r6, r9, r8
     d2a:	fbea 5668 	umaal	r5, r6, sl, r8
     d2e:	ee11 8a90 	vmov	r8, s3
     d32:	fbec b768 	umaal	fp, r7, ip, r8
     d36:	fbee 0768 	umaal	r0, r7, lr, r8
     d3a:	fbe9 1768 	umaal	r1, r7, r9, r8
     d3e:	fbea 2768 	umaal	r2, r7, sl, r8
     d42:	ee13 8a90 	vmov	r8, s7
     d46:	fbec 3768 	umaal	r3, r7, ip, r8
     d4a:	fbee 4768 	umaal	r4, r7, lr, r8
     d4e:	fbe9 5768 	umaal	r5, r7, r9, r8
     d52:	fbea 6768 	umaal	r6, r7, sl, r8
     d56:	bd00      	pop	{pc}

00000d58 <ocrypto_bigint_mul256>:
     d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d5c:	ee07 0a90 	vmov	s15, r0
     d60:	f7ff ff44 	bl	bec <ocrypto_mul256_noframe>
     d64:	ee17 8a90 	vmov	r8, s15
     d68:	ee07 ba90 	vmov	s15, fp
     d6c:	eca8 4a08 	vstmia	r8!, {s8-s15}
     d70:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000d78 <ocrypto_sqr256_noframe>:
     d78:	b500      	push	{lr}
     d7a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     d7e:	fba3 5203 	umull	r5, r2, r3, r3
     d82:	fba3 0104 	umull	r0, r1, r3, r4
     d86:	fbe3 2064 	umaal	r2, r0, r3, r4
     d8a:	fbe3 1067 	umaal	r1, r0, r3, r7
     d8e:	ec42 5a14 	vmov	s8, s9, r5, r2
     d92:	fba3 5207 	umull	r5, r2, r3, r7
     d96:	fbe3 0268 	umaal	r0, r2, r3, r8
     d9a:	fbe4 1564 	umaal	r1, r5, r4, r4
     d9e:	fbe3 0568 	umaal	r0, r5, r3, r8
     da2:	fbe3 2569 	umaal	r2, r5, r3, r9
     da6:	fba4 b607 	umull	fp, r6, r4, r7
     daa:	fbe3 2669 	umaal	r2, r6, r3, r9
     dae:	fbe3 566a 	umaal	r5, r6, r3, sl
     db2:	fbe4 0b67 	umaal	r0, fp, r4, r7
     db6:	fbe4 2b68 	umaal	r2, fp, r4, r8
     dba:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     dbe:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     dc2:	ec40 1a15 	vmov	s10, s11, r1, r0
     dc6:	fba4 1008 	umull	r1, r0, r4, r8
     dca:	fbe4 5069 	umaal	r5, r0, r4, r9
     dce:	fbe3 606c 	umaal	r6, r0, r3, ip
     dd2:	fbe3 b06e 	umaal	fp, r0, r3, lr
     dd6:	fbe7 2167 	umaal	r2, r1, r7, r7
     dda:	fbe4 5169 	umaal	r5, r1, r4, r9
     dde:	fbe4 616a 	umaal	r6, r1, r4, sl
     de2:	fbe3 b16e 	umaal	fp, r1, r3, lr
     de6:	fbe4 016e 	umaal	r0, r1, r4, lr
     dea:	ee06 2a10 	vmov	s12, r2
     dee:	fba7 3208 	umull	r3, r2, r7, r8
     df2:	fbe4 626a 	umaal	r6, r2, r4, sl
     df6:	fbe4 b26c 	umaal	fp, r2, r4, ip
     dfa:	fbe4 026e 	umaal	r0, r2, r4, lr
     dfe:	fbe7 126e 	umaal	r1, r2, r7, lr
     e02:	fbe7 5368 	umaal	r5, r3, r7, r8
     e06:	fbe7 6369 	umaal	r6, r3, r7, r9
     e0a:	fbe4 b36c 	umaal	fp, r3, r4, ip
     e0e:	fbe7 036c 	umaal	r0, r3, r7, ip
     e12:	fbe7 136e 	umaal	r1, r3, r7, lr
     e16:	fbe8 236e 	umaal	r2, r3, r8, lr
     e1a:	ee06 5a90 	vmov	s13, r5
     e1e:	fba7 5409 	umull	r5, r4, r7, r9
     e22:	fbe7 b46a 	umaal	fp, r4, r7, sl
     e26:	fbe7 046c 	umaal	r0, r4, r7, ip
     e2a:	fbe8 146c 	umaal	r1, r4, r8, ip
     e2e:	fbe8 246e 	umaal	r2, r4, r8, lr
     e32:	fbe9 346e 	umaal	r3, r4, r9, lr
     e36:	fbe8 6568 	umaal	r6, r5, r8, r8
     e3a:	fbe7 b56a 	umaal	fp, r5, r7, sl
     e3e:	fbe8 056a 	umaal	r0, r5, r8, sl
     e42:	fbe8 156c 	umaal	r1, r5, r8, ip
     e46:	fbe9 256c 	umaal	r2, r5, r9, ip
     e4a:	fbe9 356e 	umaal	r3, r5, r9, lr
     e4e:	fbea 456e 	umaal	r4, r5, sl, lr
     e52:	ee07 6a10 	vmov	s14, r6
     e56:	fba8 7609 	umull	r7, r6, r8, r9
     e5a:	fbe8 066a 	umaal	r0, r6, r8, sl
     e5e:	fbe9 166a 	umaal	r1, r6, r9, sl
     e62:	fbe9 266c 	umaal	r2, r6, r9, ip
     e66:	fbea 366c 	umaal	r3, r6, sl, ip
     e6a:	fbea 466e 	umaal	r4, r6, sl, lr
     e6e:	fbec 566e 	umaal	r5, r6, ip, lr
     e72:	fbe8 b769 	umaal	fp, r7, r8, r9
     e76:	fbe9 0769 	umaal	r0, r7, r9, r9
     e7a:	fbe9 176a 	umaal	r1, r7, r9, sl
     e7e:	fbea 276a 	umaal	r2, r7, sl, sl
     e82:	fbea 376c 	umaal	r3, r7, sl, ip
     e86:	fbec 476c 	umaal	r4, r7, ip, ip
     e8a:	fbec 576e 	umaal	r5, r7, ip, lr
     e8e:	fbee 676e 	umaal	r6, r7, lr, lr
     e92:	bd00      	pop	{pc}

00000e94 <ocrypto_bigint_sqr256>:
     e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e98:	ee07 0a90 	vmov	s15, r0
     e9c:	f7ff ff6c 	bl	d78 <ocrypto_sqr256_noframe>
     ea0:	ee17 8a90 	vmov	r8, s15
     ea4:	ee07 ba90 	vmov	s15, fp
     ea8:	eca8 4a08 	vstmia	r8!, {s8-s15}
     eac:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000eb4 <ocrypto_constant_time_equal>:
     eb4:	b430      	push	{r4, r5}
     eb6:	f04f 0300 	mov.w	r3, #0

00000eba <constant_time_equal_loop>:
     eba:	f810 4b01 	ldrb.w	r4, [r0], #1
     ebe:	f811 5b01 	ldrb.w	r5, [r1], #1
     ec2:	3a01      	subs	r2, #1
     ec4:	ea84 0405 	eor.w	r4, r4, r5
     ec8:	ea43 0304 	orr.w	r3, r3, r4
     ecc:	d1f5      	bne.n	eba <constant_time_equal_loop>
     ece:	f1a3 0301 	sub.w	r3, r3, #1
     ed2:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     ed6:	bc30      	pop	{r4, r5}
     ed8:	4770      	bx	lr
     eda:	bf00      	nop

00000edc <ocrypto_constant_time_is_zero>:
     edc:	f04f 0300 	mov.w	r3, #0

00000ee0 <constant_time_is_zero_loop>:
     ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
     ee4:	3901      	subs	r1, #1
     ee6:	ea43 0302 	orr.w	r3, r3, r2
     eea:	d1f9      	bne.n	ee0 <constant_time_is_zero_loop>
     eec:	f1a3 0301 	sub.w	r3, r3, #1
     ef0:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     ef4:	4770      	bx	lr
     ef6:	bf00      	nop

00000ef8 <ocrypto_constant_time_xor>:
     ef8:	b430      	push	{r4, r5}

00000efa <constant_time_xor_loop>:
     efa:	f811 4b01 	ldrb.w	r4, [r1], #1
     efe:	f812 5b01 	ldrb.w	r5, [r2], #1
     f02:	406c      	eors	r4, r5
     f04:	f800 4b01 	strb.w	r4, [r0], #1
     f08:	3b01      	subs	r3, #1
     f0a:	d1f6      	bne.n	efa <constant_time_xor_loop>
     f0c:	bc30      	pop	{r4, r5}
     f0e:	4770      	bx	lr

00000f10 <ocrypto_mod_p256_add>:
     f10:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f14:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     f18:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f1c:	185b      	adds	r3, r3, r1
     f1e:	eb54 040c 	adcs.w	r4, r4, ip
     f22:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f26:	414d      	adcs	r5, r1
     f28:	eb56 060c 	adcs.w	r6, r6, ip
     f2c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f30:	414f      	adcs	r7, r1
     f32:	eb58 080c 	adcs.w	r8, r8, ip
     f36:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f3a:	eb59 0901 	adcs.w	r9, r9, r1
     f3e:	eb5a 0a0c 	adcs.w	sl, sl, ip
     f42:	4189      	sbcs	r1, r1
     f44:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     f48:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     f4c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     f50:	f176 0600 	sbcs.w	r6, r6, #0
     f54:	f177 0700 	sbcs.w	r7, r7, #0
     f58:	f178 0800 	sbcs.w	r8, r8, #0
     f5c:	f179 0901 	sbcs.w	r9, r9, #1
     f60:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     f64:	f151 0100 	adcs.w	r1, r1, #0
     f68:	185b      	adds	r3, r3, r1
     f6a:	414c      	adcs	r4, r1
     f6c:	414d      	adcs	r5, r1
     f6e:	f156 0600 	adcs.w	r6, r6, #0
     f72:	f157 0700 	adcs.w	r7, r7, #0
     f76:	f158 0800 	adcs.w	r8, r8, #0
     f7a:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     f7e:	eb5a 0a01 	adcs.w	sl, sl, r1
     f82:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     f86:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f8a:	4770      	bx	lr

00000f8c <ocrypto_mod_p256_sub>:
     f8c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f90:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     f94:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f98:	1a5b      	subs	r3, r3, r1
     f9a:	eb74 040c 	sbcs.w	r4, r4, ip
     f9e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fa2:	418d      	sbcs	r5, r1
     fa4:	eb76 060c 	sbcs.w	r6, r6, ip
     fa8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fac:	418f      	sbcs	r7, r1
     fae:	eb78 080c 	sbcs.w	r8, r8, ip
     fb2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fb6:	eb79 0901 	sbcs.w	r9, r9, r1
     fba:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     fbe:	4189      	sbcs	r1, r1
     fc0:	185b      	adds	r3, r3, r1
     fc2:	414c      	adcs	r4, r1
     fc4:	414d      	adcs	r5, r1
     fc6:	f156 0600 	adcs.w	r6, r6, #0
     fca:	f157 0700 	adcs.w	r7, r7, #0
     fce:	f158 0800 	adcs.w	r8, r8, #0
     fd2:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     fd6:	eb5a 0a01 	adcs.w	sl, sl, r1
     fda:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     fde:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     fe2:	4770      	bx	lr

00000fe4 <mul_reduce>:
     fe4:	eb18 0804 	adds.w	r8, r8, r4
     fe8:	eb59 0905 	adcs.w	r9, r9, r5
     fec:	eb5a 0a06 	adcs.w	sl, sl, r6
     ff0:	eb5b 0b07 	adcs.w	fp, fp, r7
     ff4:	f05f 0c00 	movs.w	ip, #0
     ff8:	f14c 0c00 	adc.w	ip, ip, #0
     ffc:	eb18 0805 	adds.w	r8, r8, r5
    1000:	eb59 0906 	adcs.w	r9, r9, r6
    1004:	eb5a 0a07 	adcs.w	sl, sl, r7
    1008:	eb5b 0b07 	adcs.w	fp, fp, r7
    100c:	eb50 000c 	adcs.w	r0, r0, ip
    1010:	f05f 0c00 	movs.w	ip, #0
    1014:	eb51 010c 	adcs.w	r1, r1, ip
    1018:	eb52 020c 	adcs.w	r2, r2, ip
    101c:	4163      	adcs	r3, r4
    101e:	f14c 0c00 	adc.w	ip, ip, #0
    1022:	ebb8 0807 	subs.w	r8, r8, r7
    1026:	f179 0900 	sbcs.w	r9, r9, #0
    102a:	f17a 0a00 	sbcs.w	sl, sl, #0
    102e:	eb7b 0b04 	sbcs.w	fp, fp, r4
    1032:	41a8      	sbcs	r0, r5
    1034:	41b1      	sbcs	r1, r6
    1036:	41a2      	sbcs	r2, r4
    1038:	41b3      	sbcs	r3, r6
    103a:	f16c 0c00 	sbc.w	ip, ip, #0
    103e:	ebbb 0b05 	subs.w	fp, fp, r5
    1042:	41b0      	sbcs	r0, r6
    1044:	41b9      	sbcs	r1, r7
    1046:	41aa      	sbcs	r2, r5
    1048:	41bb      	sbcs	r3, r7
    104a:	f16c 0c00 	sbc.w	ip, ip, #0
    104e:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    1052:	ebb8 0804 	subs.w	r8, r8, r4
    1056:	eb79 0904 	sbcs.w	r9, r9, r4
    105a:	eb7a 0a04 	sbcs.w	sl, sl, r4
    105e:	f17b 0b00 	sbcs.w	fp, fp, #0
    1062:	f170 0000 	sbcs.w	r0, r0, #0
    1066:	f171 0100 	sbcs.w	r1, r1, #0
    106a:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    106e:	41a3      	sbcs	r3, r4
    1070:	f16c 0c00 	sbc.w	ip, ip, #0
    1074:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1078:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    107c:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    1080:	f15b 0b00 	adcs.w	fp, fp, #0
    1084:	f150 0400 	adcs.w	r4, r0, #0
    1088:	f151 0500 	adcs.w	r5, r1, #0
    108c:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    1090:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    1094:	f14c 0c00 	adc.w	ip, ip, #0
    1098:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    109c:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    10a0:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    10a4:	f15b 0300 	adcs.w	r3, fp, #0
    10a8:	f154 0400 	adcs.w	r4, r4, #0
    10ac:	f155 0500 	adcs.w	r5, r5, #0
    10b0:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    10b4:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    10b8:	4770      	bx	lr
    10ba:	bf00      	nop

000010bc <ocrypto_mod_p256_mul>:
    10bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10c0:	ee07 0a90 	vmov	s15, r0
    10c4:	f7ff fd92 	bl	bec <ocrypto_mul256_noframe>
    10c8:	ec59 8a16 	vmov	r8, r9, s12, s13
    10cc:	ee17 aa10 	vmov	sl, s14
    10d0:	f7ff ff88 	bl	fe4 <mul_reduce>
    10d4:	ec59 8a14 	vmov	r8, r9, s8, s9
    10d8:	ec5b aa15 	vmov	sl, fp, s10, s11
    10dc:	f7ff ff82 	bl	fe4 <mul_reduce>
    10e0:	ee17 8a90 	vmov	r8, s15
    10e4:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    10e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000010ec <ocrypto_mod_p256_sqr>:
    10ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10f0:	ee07 0a90 	vmov	s15, r0
    10f4:	f7ff fe40 	bl	d78 <ocrypto_sqr256_noframe>
    10f8:	ec59 8a16 	vmov	r8, r9, s12, s13
    10fc:	ee17 aa10 	vmov	sl, s14
    1100:	f7ff ff70 	bl	fe4 <mul_reduce>
    1104:	ec59 8a14 	vmov	r8, r9, s8, s9
    1108:	ec5b aa15 	vmov	sl, fp, s10, s11
    110c:	f7ff ff6a 	bl	fe4 <mul_reduce>
    1110:	ee17 8a90 	vmov	r8, s15
    1114:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000111c <__aeabi_dcmpun>:
    111c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1124:	d102      	bne.n	112c <__aeabi_dcmpun+0x10>
    1126:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    112a:	d10a      	bne.n	1142 <__aeabi_dcmpun+0x26>
    112c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1130:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1134:	d102      	bne.n	113c <__aeabi_dcmpun+0x20>
    1136:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    113a:	d102      	bne.n	1142 <__aeabi_dcmpun+0x26>
    113c:	f04f 0000 	mov.w	r0, #0
    1140:	4770      	bx	lr
    1142:	f04f 0001 	mov.w	r0, #1
    1146:	4770      	bx	lr

00001148 <__aeabi_d2iz>:
    1148:	ea4f 0241 	mov.w	r2, r1, lsl #1
    114c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1150:	d215      	bcs.n	117e <__aeabi_d2iz+0x36>
    1152:	d511      	bpl.n	1178 <__aeabi_d2iz+0x30>
    1154:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1158:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    115c:	d912      	bls.n	1184 <__aeabi_d2iz+0x3c>
    115e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1166:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    116a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    116e:	fa23 f002 	lsr.w	r0, r3, r2
    1172:	bf18      	it	ne
    1174:	4240      	negne	r0, r0
    1176:	4770      	bx	lr
    1178:	f04f 0000 	mov.w	r0, #0
    117c:	4770      	bx	lr
    117e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1182:	d105      	bne.n	1190 <__aeabi_d2iz+0x48>
    1184:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    1188:	bf08      	it	eq
    118a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    118e:	4770      	bx	lr
    1190:	f04f 0000 	mov.w	r0, #0
    1194:	4770      	bx	lr
    1196:	bf00      	nop
    1198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    119a:	4c14      	ldr	r4, [pc, #80]	; (11ec <__aeabi_d2iz+0xa4>)
    119c:	7a20      	ldrb	r0, [r4, #8]
    119e:	f88d 0001 	strb.w	r0, [sp, #1]
    11a2:	79e0      	ldrb	r0, [r4, #7]
    11a4:	f88d 0000 	strb.w	r0, [sp]
    11a8:	79a0      	ldrb	r0, [r4, #6]
    11aa:	f8ad 0004 	strh.w	r0, [sp, #4]
    11ae:	7960      	ldrb	r0, [r4, #5]
    11b0:	f8ad 0002 	strh.w	r0, [sp, #2]
    11b4:	4668      	mov	r0, sp
    11b6:	f006 f84d 	bl	7254 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    11ba:	b108      	cbz	r0, 11c0 <__aeabi_d2iz+0x78>
    11bc:	21a7      	movs	r1, #167	; 0xa7
    11be:	e010      	b.n	11e2 <__aeabi_d2iz+0x9a>
    11c0:	68e0      	ldr	r0, [r4, #12]
    11c2:	9002      	str	r0, [sp, #8]
    11c4:	a802      	add	r0, sp, #8
    11c6:	f006 f85b 	bl	7280 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    11ca:	b108      	cbz	r0, 11d0 <__aeabi_d2iz+0x88>
    11cc:	21ab      	movs	r1, #171	; 0xab
    11ce:	e008      	b.n	11e2 <__aeabi_d2iz+0x9a>
    11d0:	4807      	ldr	r0, [pc, #28]	; (11f0 <__aeabi_d2iz+0xa8>)
    11d2:	6800      	ldr	r0, [r0, #0]
    11d4:	9003      	str	r0, [sp, #12]
    11d6:	a803      	add	r0, sp, #12
    11d8:	f00e ffa9 	bl	1012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    11dc:	2800      	cmp	r0, #0
    11de:	d003      	beq.n	11e8 <__aeabi_d2iz+0xa0>
    11e0:	21af      	movs	r1, #175	; 0xaf
    11e2:	2003      	movs	r0, #3
    11e4:	f000 f8dc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11e8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    11ea:	0000      	.short	0x0000
    11ec:	20000e00 	.word	0x20000e00
    11f0:	000014a8 	.word	0x000014a8

000011f4 <sdc_build_revision_get>:
    11f4:	b510      	push	{r4, lr}
    11f6:	b128      	cbz	r0, 1204 <sdc_build_revision_get+0x10>
    11f8:	2214      	movs	r2, #20
    11fa:	4904      	ldr	r1, [pc, #16]	; (120c <sdc_build_revision_get+0x18>)
    11fc:	f00f fdd8 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1200:	2000      	movs	r0, #0
    1202:	bd10      	pop	{r4, pc}
    1204:	f06f 0015 	mvn.w	r0, #21
    1208:	bd10      	pop	{r4, pc}
    120a:	0000      	.short	0x0000
    120c:	000014cc 	.word	0x000014cc

00001210 <sdc_cfg_set>:
    1210:	b570      	push	{r4, r5, r6, lr}
    1212:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1216:	bbb8      	cbnz	r0, 1288 <sdc_cfg_set+0x78>
    1218:	4c1e      	ldr	r4, [pc, #120]	; (1294 <sdc_cfg_set+0x84>)
    121a:	7860      	ldrb	r0, [r4, #1]
    121c:	b108      	cbz	r0, 1222 <sdc_cfg_set+0x12>
    121e:	1198      	asrs	r0, r3, #6
    1220:	bd70      	pop	{r4, r5, r6, pc}
    1222:	b301      	cbz	r1, 1266 <sdc_cfg_set+0x56>
    1224:	f06f 0515 	mvn.w	r5, #21
    1228:	b1aa      	cbz	r2, 1256 <sdc_cfg_set+0x46>
    122a:	481b      	ldr	r0, [pc, #108]	; (1298 <sdc_cfg_set+0x88>)
    122c:	1e89      	subs	r1, r1, #2
    122e:	2906      	cmp	r1, #6
    1230:	d22b      	bcs.n	128a <sdc_cfg_set+0x7a>
    1232:	e8df f001 	tbb	[pc, r1]
    1236:	0603      	.short	0x0603
    1238:	1c2a1916 	.word	0x1c2a1916
    123c:	7811      	ldrb	r1, [r2, #0]
    123e:	7041      	strb	r1, [r0, #1]
    1240:	e017      	b.n	1272 <sdc_cfg_set+0x62>
    1242:	7891      	ldrb	r1, [r2, #2]
    1244:	b139      	cbz	r1, 1256 <sdc_cfg_set+0x46>
    1246:	78d1      	ldrb	r1, [r2, #3]
    1248:	b129      	cbz	r1, 1256 <sdc_cfg_set+0x46>
    124a:	7811      	ldrb	r1, [r2, #0]
    124c:	291b      	cmp	r1, #27
    124e:	d302      	bcc.n	1256 <sdc_cfg_set+0x46>
    1250:	7851      	ldrb	r1, [r2, #1]
    1252:	291b      	cmp	r1, #27
    1254:	d201      	bcs.n	125a <sdc_cfg_set+0x4a>
    1256:	4628      	mov	r0, r5
    1258:	bd70      	pop	{r4, r5, r6, pc}
    125a:	6811      	ldr	r1, [r2, #0]
    125c:	f8c0 1005 	str.w	r1, [r0, #5]
    1260:	e007      	b.n	1272 <sdc_cfg_set+0x62>
    1262:	6811      	ldr	r1, [r2, #0]
    1264:	60c1      	str	r1, [r0, #12]
    1266:	e004      	b.n	1272 <sdc_cfg_set+0x62>
    1268:	7811      	ldrb	r1, [r2, #0]
    126a:	7081      	strb	r1, [r0, #2]
    126c:	e001      	b.n	1272 <sdc_cfg_set+0x62>
    126e:	8811      	ldrh	r1, [r2, #0]
    1270:	8241      	strh	r1, [r0, #18]
    1272:	2201      	movs	r2, #1
    1274:	4908      	ldr	r1, [pc, #32]	; (1298 <sdc_cfg_set+0x88>)
    1276:	2000      	movs	r0, #0
    1278:	f00b fc38 	bl	caec <strlen+0x10>
    127c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    1280:	db05      	blt.n	128e <sdc_cfg_set+0x7e>
    1282:	f06f 000b 	mvn.w	r0, #11
    1286:	bd70      	pop	{r4, r5, r6, pc}
    1288:	e7ff      	b.n	128a <sdc_cfg_set+0x7a>
    128a:	4618      	mov	r0, r3
    128c:	e7fb      	b.n	1286 <sdc_cfg_set+0x76>
    128e:	2101      	movs	r1, #1
    1290:	70a1      	strb	r1, [r4, #2]
    1292:	e7f8      	b.n	1286 <sdc_cfg_set+0x76>
    1294:	20000028 	.word	0x20000028
    1298:	20000e00 	.word	0x20000e00

0000129c <sdc_disable>:
    129c:	b510      	push	{r4, lr}
    129e:	4c07      	ldr	r4, [pc, #28]	; (12bc <sdc_disable+0x20>)
    12a0:	7860      	ldrb	r0, [r4, #1]
    12a2:	b120      	cbz	r0, 12ae <sdc_disable+0x12>
    12a4:	f006 faca 	bl	783c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    12a8:	7820      	ldrb	r0, [r4, #0]
    12aa:	f00b f9e7 	bl	c67c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    12ae:	f000 fd87 	bl	1dc0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    12b2:	f000 fe5f 	bl	1f74 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    12b6:	2000      	movs	r0, #0
    12b8:	7060      	strb	r0, [r4, #1]
    12ba:	bd10      	pop	{r4, pc}
    12bc:	20000028 	.word	0x20000028

000012c0 <sdc_enable>:
    12c0:	b570      	push	{r4, r5, r6, lr}
    12c2:	460c      	mov	r4, r1
    12c4:	0005      	movs	r5, r0
    12c6:	d002      	beq.n	12ce <sdc_enable+0xe>
    12c8:	b10c      	cbz	r4, 12ce <sdc_enable+0xe>
    12ca:	0760      	lsls	r0, r4, #29
    12cc:	d002      	beq.n	12d4 <sdc_enable+0x14>
    12ce:	f06f 0015 	mvn.w	r0, #21
    12d2:	bd70      	pop	{r4, r5, r6, pc}
    12d4:	f000 f920 	bl	1518 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    12d8:	b1a8      	cbz	r0, 1306 <sdc_enable+0x46>
    12da:	4628      	mov	r0, r5
    12dc:	f00b f994 	bl	c608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    12e0:	4d0a      	ldr	r5, [pc, #40]	; (130c <sdc_enable+0x4c>)
    12e2:	2200      	movs	r2, #0
    12e4:	490a      	ldr	r1, [pc, #40]	; (1310 <sdc_enable+0x50>)
    12e6:	7028      	strb	r0, [r5, #0]
    12e8:	4620      	mov	r0, r4
    12ea:	f00b fbff 	bl	caec <strlen+0x10>
    12ee:	f00f fb38 	bl	10962 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    12f2:	2100      	movs	r1, #0
    12f4:	7828      	ldrb	r0, [r5, #0]
    12f6:	f006 fa8b 	bl	7810 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    12fa:	f7ff ff4d 	bl	1198 <__aeabi_d2iz+0x50>
    12fe:	2001      	movs	r0, #1
    1300:	7068      	strb	r0, [r5, #1]
    1302:	2000      	movs	r0, #0
    1304:	bd70      	pop	{r4, r5, r6, pc}
    1306:	f04f 30ff 	mov.w	r0, #4294967295
    130a:	bd70      	pop	{r4, r5, r6, pc}
    130c:	20000028 	.word	0x20000028
    1310:	20000e00 	.word	0x20000e00

00001314 <sdc_init>:
    1314:	b530      	push	{r4, r5, lr}
    1316:	b089      	sub	sp, #36	; 0x24
    1318:	0004      	movs	r4, r0
    131a:	d00c      	beq.n	1336 <sdc_init+0x22>
    131c:	f00b f91a 	bl	c554 <mpsl_is_initialized>
    1320:	f04f 35ff 	mov.w	r5, #4294967295
    1324:	b120      	cbz	r0, 1330 <sdc_init+0x1c>
    1326:	f00a ffad 	bl	c284 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    132a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    132e:	d905      	bls.n	133c <sdc_init+0x28>
    1330:	4628      	mov	r0, r5
    1332:	b009      	add	sp, #36	; 0x24
    1334:	bd30      	pop	{r4, r5, pc}
    1336:	f06f 0015 	mvn.w	r0, #21
    133a:	e7fa      	b.n	1332 <sdc_init+0x1e>
    133c:	4d13      	ldr	r5, [pc, #76]	; (138c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4>)
    133e:	4814      	ldr	r0, [pc, #80]	; (1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>)
    1340:	606c      	str	r4, [r5, #4]
    1342:	f000 fa0b 	bl	175c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    1346:	2000      	movs	r0, #0
    1348:	7068      	strb	r0, [r5, #1]
    134a:	70a8      	strb	r0, [r5, #2]
    134c:	4601      	mov	r1, r0
    134e:	2220      	movs	r2, #32
    1350:	4668      	mov	r0, sp
    1352:	f00f fda7 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1356:	2220      	movs	r2, #32
    1358:	490e      	ldr	r1, [pc, #56]	; (1394 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc>)
    135a:	4668      	mov	r0, sp
    135c:	f00f fd28 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1360:	2220      	movs	r2, #32
    1362:	4669      	mov	r1, sp
    1364:	480c      	ldr	r0, [pc, #48]	; (1398 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x10>)
    1366:	f00f fd23 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    136a:	f3ef 8410 	mrs	r4, PRIMASK
    136e:	b672      	cpsid	i
    1370:	f000 fd34 	bl	1ddc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    1374:	4809      	ldr	r0, [pc, #36]	; (139c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x14>)
    1376:	f000 fe09 	bl	1f8c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    137a:	b118      	cbz	r0, 1384 <sdc_init+0x70>
    137c:	21c5      	movs	r1, #197	; 0xc5
    137e:	2003      	movs	r0, #3
    1380:	f000 f80e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1384:	b904      	cbnz	r4, 1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>
    1386:	b662      	cpsie	i
    1388:	2000      	movs	r0, #0
    138a:	e7d2      	b.n	1332 <sdc_init+0x1e>
    138c:	20000028 	.word	0x20000028
    1390:	00001199 	.word	0x00001199
    1394:	000014ac 	.word	0x000014ac
    1398:	20000e00 	.word	0x20000e00
    139c:	00001545 	.word	0x00001545

000013a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    13a0:	b50e      	push	{r1, r2, r3, lr}
    13a2:	b672      	cpsid	i
    13a4:	4a15      	ldr	r2, [pc, #84]	; (13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    13a6:	6855      	ldr	r5, [r2, #4]
    13a8:	b1dd      	cbz	r5, 13e2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    13aa:	2200      	movs	r2, #0
    13ac:	4603      	mov	r3, r0
    13ae:	466e      	mov	r6, sp
    13b0:	240a      	movs	r4, #10
    13b2:	e003      	b.n	13bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    13b4:	fbb0 f0f4 	udiv	r0, r0, r4
    13b8:	1c52      	adds	r2, r2, #1
    13ba:	b2d2      	uxtb	r2, r2
    13bc:	2800      	cmp	r0, #0
    13be:	d1f9      	bne.n	13b4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    13c0:	54b0      	strb	r0, [r6, r2]
    13c2:	e00a      	b.n	13da <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    13c4:	b2d8      	uxtb	r0, r3
    13c6:	fbb0 f7f4 	udiv	r7, r0, r4
    13ca:	fbb3 f3f4 	udiv	r3, r3, r4
    13ce:	fb04 0017 	mls	r0, r4, r7, r0
    13d2:	1e52      	subs	r2, r2, #1
    13d4:	b2d2      	uxtb	r2, r2
    13d6:	3030      	adds	r0, #48	; 0x30
    13d8:	54b0      	strb	r0, [r6, r2]
    13da:	2a00      	cmp	r2, #0
    13dc:	d1f2      	bne.n	13c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    13de:	4630      	mov	r0, r6
    13e0:	47a8      	blx	r5
    13e2:	f3bf 8f4f 	dsb	sy
    13e6:	4806      	ldr	r0, [pc, #24]	; (1400 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    13e8:	6801      	ldr	r1, [r0, #0]
    13ea:	4a06      	ldr	r2, [pc, #24]	; (1404 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    13ec:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    13f0:	4311      	orrs	r1, r2
    13f2:	6001      	str	r1, [r0, #0]
    13f4:	f3bf 8f4f 	dsb	sy
    13f8:	bf00      	nop
    13fa:	e7fd      	b.n	13f8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    13fc:	20000028 	.word	0x20000028
    1400:	e000ed0c 	.word	0xe000ed0c
    1404:	05fa0004 	.word	0x05fa0004

00001408 <sdc_support_adv>:
    1408:	4806      	ldr	r0, [pc, #24]	; (1424 <sdc_support_adv+0x1c>)
    140a:	b510      	push	{r4, lr}
    140c:	7881      	ldrb	r1, [r0, #2]
    140e:	7840      	ldrb	r0, [r0, #1]
    1410:	4301      	orrs	r1, r0
    1412:	d002      	beq.n	141a <sdc_support_adv+0x12>
    1414:	f04f 30ff 	mov.w	r0, #4294967295
    1418:	bd10      	pop	{r4, pc}
    141a:	f006 fa1f 	bl	785c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    141e:	2000      	movs	r0, #0
    1420:	bd10      	pop	{r4, pc}
    1422:	0000      	.short	0x0000
    1424:	20000028 	.word	0x20000028

00001428 <sdc_support_dle_peripheral>:
    1428:	4806      	ldr	r0, [pc, #24]	; (1444 <sdc_support_dle_peripheral+0x1c>)
    142a:	b510      	push	{r4, lr}
    142c:	7881      	ldrb	r1, [r0, #2]
    142e:	7840      	ldrb	r0, [r0, #1]
    1430:	4301      	orrs	r1, r0
    1432:	d002      	beq.n	143a <sdc_support_dle_peripheral+0x12>
    1434:	f04f 30ff 	mov.w	r0, #4294967295
    1438:	bd10      	pop	{r4, pc}
    143a:	f005 ff6d 	bl	7318 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    143e:	2000      	movs	r0, #0
    1440:	bd10      	pop	{r4, pc}
    1442:	0000      	.short	0x0000
    1444:	20000028 	.word	0x20000028

00001448 <sdc_support_le_2m_phy>:
    1448:	4806      	ldr	r0, [pc, #24]	; (1464 <sdc_support_le_2m_phy+0x1c>)
    144a:	b510      	push	{r4, lr}
    144c:	7881      	ldrb	r1, [r0, #2]
    144e:	7840      	ldrb	r0, [r0, #1]
    1450:	4301      	orrs	r1, r0
    1452:	d002      	beq.n	145a <sdc_support_le_2m_phy+0x12>
    1454:	f04f 30ff 	mov.w	r0, #4294967295
    1458:	bd10      	pop	{r4, pc}
    145a:	f00f f807 	bl	1046c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    145e:	2000      	movs	r0, #0
    1460:	bd10      	pop	{r4, pc}
    1462:	0000      	.short	0x0000
    1464:	20000028 	.word	0x20000028

00001468 <sdc_support_peripheral>:
    1468:	4806      	ldr	r0, [pc, #24]	; (1484 <sdc_support_peripheral+0x1c>)
    146a:	b510      	push	{r4, lr}
    146c:	7881      	ldrb	r1, [r0, #2]
    146e:	7840      	ldrb	r0, [r0, #1]
    1470:	4301      	orrs	r1, r0
    1472:	d002      	beq.n	147a <sdc_support_peripheral+0x12>
    1474:	f04f 30ff 	mov.w	r0, #4294967295
    1478:	bd10      	pop	{r4, pc}
    147a:	f006 fa01 	bl	7880 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    147e:	2000      	movs	r0, #0
    1480:	bd10      	pop	{r4, pc}
    1482:	0000      	.short	0x0000
    1484:	20000028 	.word	0x20000028

00001488 <sdc_support_phy_update_peripheral>:
    1488:	4806      	ldr	r0, [pc, #24]	; (14a4 <sdc_support_phy_update_peripheral+0x1c>)
    148a:	b510      	push	{r4, lr}
    148c:	7881      	ldrb	r1, [r0, #2]
    148e:	7840      	ldrb	r0, [r0, #1]
    1490:	4301      	orrs	r1, r0
    1492:	d002      	beq.n	149a <sdc_support_phy_update_peripheral+0x12>
    1494:	f04f 30ff 	mov.w	r0, #4294967295
    1498:	bd10      	pop	{r4, pc}
    149a:	f00e fff7 	bl	1048c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    149e:	2000      	movs	r0, #0
    14a0:	bd10      	pop	{r4, pc}
    14a2:	0000      	.short	0x0000
    14a4:	20000028 	.word	0x20000028
    14a8:	00000001 	.word	0x00000001
    14ac:	00010100 	.word	0x00010100
    14b0:	031b1b00 	.word	0x031b1b00
    14b4:	00000002 	.word	0x00000002
    14b8:	00001d4c 	.word	0x00001d4c
    14bc:	001f0000 	.word	0x001f0000
	...
    14cc:	2f2d0cd8 	.word	0x2f2d0cd8
    14d0:	5ce2ae36 	.word	0x5ce2ae36
    14d4:	4c802680 	.word	0x4c802680
    14d8:	53164d3f 	.word	0x53164d3f
    14dc:	73c79650 	.word	0x73c79650

000014e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    14e0:	4a05      	ldr	r2, [pc, #20]	; (14f8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    14e2:	b510      	push	{r4, lr}
    14e4:	6852      	ldr	r2, [r2, #4]
    14e6:	b112      	cbz	r2, 14ee <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    14e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    14ec:	4710      	bx	r2
    14ee:	2192      	movs	r1, #146	; 0x92
    14f0:	2004      	movs	r0, #4
    14f2:	f7ff ff55 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f6:	0000      	.short	0x0000
    14f8:	20000e20 	.word	0x20000e20

000014fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    14fc:	4a05      	ldr	r2, [pc, #20]	; (1514 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    14fe:	b510      	push	{r4, lr}
    1500:	6892      	ldr	r2, [r2, #8]
    1502:	b112      	cbz	r2, 150a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    1504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1508:	4710      	bx	r2
    150a:	2198      	movs	r1, #152	; 0x98
    150c:	2004      	movs	r0, #4
    150e:	f7ff ff47 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1512:	0000      	.short	0x0000
    1514:	20000e20 	.word	0x20000e20

00001518 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    1518:	4805      	ldr	r0, [pc, #20]	; (1530 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    151a:	6801      	ldr	r1, [r0, #0]
    151c:	b129      	cbz	r1, 152a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    151e:	6841      	ldr	r1, [r0, #4]
    1520:	b119      	cbz	r1, 152a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1522:	6880      	ldr	r0, [r0, #8]
    1524:	b108      	cbz	r0, 152a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1526:	2001      	movs	r0, #1
    1528:	4770      	bx	lr
    152a:	2000      	movs	r0, #0
    152c:	4770      	bx	lr
    152e:	0000      	.short	0x0000
    1530:	20000e20 	.word	0x20000e20

00001534 <sdc_rand_source_register>:
    1534:	4902      	ldr	r1, [pc, #8]	; (1540 <sdc_rand_source_register+0xc>)
    1536:	c80d      	ldmia	r0, {r0, r2, r3}
    1538:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    153c:	2000      	movs	r0, #0
    153e:	4770      	bx	lr
    1540:	20000e20 	.word	0x20000e20

00001544 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    1544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1546:	4c12      	ldr	r4, [pc, #72]	; (1590 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    1548:	2600      	movs	r6, #0
    154a:	6825      	ldr	r5, [r4, #0]
    154c:	e011      	b.n	1572 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    154e:	9800      	ldr	r0, [sp, #0]
    1550:	2802      	cmp	r0, #2
    1552:	d002      	beq.n	155a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    1554:	2803      	cmp	r0, #3
    1556:	d10c      	bne.n	1572 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    1558:	e006      	b.n	1568 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    155a:	6820      	ldr	r0, [r4, #0]
    155c:	b110      	cbz	r0, 1564 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    155e:	2000      	movs	r0, #0
    1560:	6026      	str	r6, [r4, #0]
    1562:	e005      	b.n	1570 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    1564:	2128      	movs	r1, #40	; 0x28
    1566:	e00c      	b.n	1582 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    1568:	6820      	ldr	r0, [r4, #0]
    156a:	b168      	cbz	r0, 1588 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    156c:	2001      	movs	r0, #1
    156e:	6026      	str	r6, [r4, #0]
    1570:	47a8      	blx	r5
    1572:	4668      	mov	r0, sp
    1574:	f000 fcd0 	bl	1f18 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    1578:	2800      	cmp	r0, #0
    157a:	d0e8      	beq.n	154e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    157c:	2805      	cmp	r0, #5
    157e:	d005      	beq.n	158c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    1580:	2135      	movs	r1, #53	; 0x35
    1582:	2004      	movs	r0, #4
    1584:	f7ff ff0c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1588:	212d      	movs	r1, #45	; 0x2d
    158a:	e7fa      	b.n	1582 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    158e:	0000      	.short	0x0000
    1590:	20000030 	.word	0x20000030

00001594 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    1594:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1598:	4e25      	ldr	r6, [pc, #148]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    159a:	4605      	mov	r5, r0
    159c:	1d00      	adds	r0, r0, #4
    159e:	f106 0744 	add.w	r7, r6, #68	; 0x44
    15a2:	6030      	str	r0, [r6, #0]
    15a4:	7838      	ldrb	r0, [r7, #0]
    15a6:	b158      	cbz	r0, 15c0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    15a8:	78ba      	ldrb	r2, [r7, #2]
    15aa:	463c      	mov	r4, r7
    15ac:	1c79      	adds	r1, r7, #1
    15ae:	4628      	mov	r0, r5
    15b0:	1c92      	adds	r2, r2, #2
    15b2:	f00f fbfd 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    15b6:	2000      	movs	r0, #0
    15b8:	7020      	strb	r0, [r4, #0]
    15ba:	2004      	movs	r0, #4
    15bc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    15c0:	481b      	ldr	r0, [pc, #108]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    15c2:	f001 fe7f 	bl	32c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    15c6:	4604      	mov	r4, r0
    15c8:	2802      	cmp	r0, #2
    15ca:	d004      	beq.n	15d6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
    15cc:	2c04      	cmp	r4, #4
    15ce:	d007      	beq.n	15e0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
    15d0:	2c08      	cmp	r4, #8
    15d2:	d027      	beq.n	1624 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    15d4:	e02a      	b.n	162c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    15d6:	4916      	ldr	r1, [pc, #88]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    15d8:	4628      	mov	r0, r5
    15da:	f00b fb0a 	bl	cbf2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    15de:	e025      	b.n	162c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    15e0:	7830      	ldrb	r0, [r6, #0]
    15e2:	2808      	cmp	r0, #8
    15e4:	d104      	bne.n	15f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
    15e6:	2105      	movs	r1, #5
    15e8:	203e      	movs	r0, #62	; 0x3e
    15ea:	f00b fad4 	bl	cb96 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    15ee:	b160      	cbz	r0, 160a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x76>
    15f0:	490f      	ldr	r1, [pc, #60]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    15f2:	4628      	mov	r0, r5
    15f4:	f00b fb62 	bl	ccbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    15f8:	2800      	cmp	r0, #0
    15fa:	d0d3      	beq.n	15a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    15fc:	78a9      	ldrb	r1, [r5, #2]
    15fe:	7828      	ldrb	r0, [r5, #0]
    1600:	f00b fac9 	bl	cb96 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    1604:	2800      	cmp	r0, #0
    1606:	d0cd      	beq.n	15a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1608:	e010      	b.n	162c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    160a:	88b0      	ldrh	r0, [r6, #4]
    160c:	f8ad 0000 	strh.w	r0, [sp]
    1610:	a901      	add	r1, sp, #4
    1612:	4668      	mov	r0, sp
    1614:	f00b fe3d 	bl	d292 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    1618:	2800      	cmp	r0, #0
    161a:	d0c3      	beq.n	15a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    161c:	21a7      	movs	r1, #167	; 0xa7
    161e:	2008      	movs	r0, #8
    1620:	f7ff febe 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1624:	4902      	ldr	r1, [pc, #8]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    1626:	4628      	mov	r0, r5
    1628:	f00b fb11 	bl	cc4e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    162c:	4620      	mov	r0, r4
    162e:	e7c5      	b.n	15bc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    1630:	20000e2c 	.word	0x20000e2c
    1634:	b570      	push	{r4, r5, r6, lr}
    1636:	780a      	ldrb	r2, [r1, #0]
    1638:	7082      	strb	r2, [r0, #2]
    163a:	b33a      	cbz	r2, 168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
    163c:	2a01      	cmp	r2, #1
    163e:	d825      	bhi.n	168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
    1640:	2313      	movs	r3, #19
    1642:	7003      	strb	r3, [r0, #0]
    1644:	2300      	movs	r3, #0
    1646:	e00a      	b.n	165e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
    1648:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    164c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    1650:	78a6      	ldrb	r6, [r4, #2]
    1652:	70ee      	strb	r6, [r5, #3]
    1654:	8864      	ldrh	r4, [r4, #2]
    1656:	0a24      	lsrs	r4, r4, #8
    1658:	1c5b      	adds	r3, r3, #1
    165a:	712c      	strb	r4, [r5, #4]
    165c:	b2db      	uxtb	r3, r3
    165e:	4293      	cmp	r3, r2
    1660:	d3f2      	bcc.n	1648 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
    1662:	2300      	movs	r3, #0
    1664:	e00b      	b.n	167e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xea>
    1666:	bf00      	nop
    1668:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    166c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    1670:	792e      	ldrb	r6, [r5, #4]
    1672:	7166      	strb	r6, [r4, #5]
    1674:	88ad      	ldrh	r5, [r5, #4]
    1676:	0a2d      	lsrs	r5, r5, #8
    1678:	1c5b      	adds	r3, r3, #1
    167a:	71a5      	strb	r5, [r4, #6]
    167c:	b2db      	uxtb	r3, r3
    167e:	4293      	cmp	r3, r2
    1680:	d3f2      	bcc.n	1668 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
    1682:	2101      	movs	r1, #1
    1684:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    1688:	b2c0      	uxtb	r0, r0
    168a:	bd70      	pop	{r4, r5, r6, pc}
    168c:	2000      	movs	r0, #0
    168e:	bd70      	pop	{r4, r5, r6, pc}

00001690 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    1690:	2840      	cmp	r0, #64	; 0x40
    1692:	d203      	bcs.n	169c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    1694:	1e40      	subs	r0, r0, #1
    1696:	b2c1      	uxtb	r1, r0
    1698:	4805      	ldr	r0, [pc, #20]	; (16b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    169a:	e005      	b.n	16a8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    169c:	28ff      	cmp	r0, #255	; 0xff
    169e:	d005      	beq.n	16ac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    16a0:	3840      	subs	r0, #64	; 0x40
    16a2:	b2c1      	uxtb	r1, r0
    16a4:	4802      	ldr	r0, [pc, #8]	; (16b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    16a6:	3008      	adds	r0, #8
    16a8:	f00b bcea 	b.w	d080 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    16ac:	2001      	movs	r0, #1
    16ae:	4770      	bx	lr
    16b0:	2000003c 	.word	0x2000003c

000016b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    16b4:	1e40      	subs	r0, r0, #1
    16b6:	b2c1      	uxtb	r1, r0
    16b8:	4801      	ldr	r0, [pc, #4]	; (16c0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    16ba:	f00b bce1 	b.w	d080 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    16be:	0000      	.short	0x0000
    16c0:	2000004c 	.word	0x2000004c

000016c4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    16c4:	b510      	push	{r4, lr}
    16c6:	4a07      	ldr	r2, [pc, #28]	; (16e4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    16c8:	6801      	ldr	r1, [r0, #0]
    16ca:	4b06      	ldr	r3, [pc, #24]	; (16e4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    16cc:	6191      	str	r1, [r2, #24]
    16ce:	6840      	ldr	r0, [r0, #4]
    16d0:	61d0      	str	r0, [r2, #28]
    16d2:	681c      	ldr	r4, [r3, #0]
    16d4:	3218      	adds	r2, #24
    16d6:	43a1      	bics	r1, r4
    16d8:	6011      	str	r1, [r2, #0]
    16da:	6859      	ldr	r1, [r3, #4]
    16dc:	4388      	bics	r0, r1
    16de:	6050      	str	r0, [r2, #4]
    16e0:	bd10      	pop	{r4, pc}
    16e2:	0000      	.short	0x0000
    16e4:	20000034 	.word	0x20000034

000016e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    16e8:	4a06      	ldr	r2, [pc, #24]	; (1704 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    16ea:	6801      	ldr	r1, [r0, #0]
    16ec:	6091      	str	r1, [r2, #8]
    16ee:	6840      	ldr	r0, [r0, #4]
    16f0:	60d0      	str	r0, [r2, #12]
    16f2:	3208      	adds	r2, #8
    16f4:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
    16f8:	6011      	str	r1, [r2, #0]
    16fa:	4903      	ldr	r1, [pc, #12]	; (1708 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
    16fc:	4308      	orrs	r0, r1
    16fe:	6050      	str	r0, [r2, #4]
    1700:	4770      	bx	lr
    1702:	0000      	.short	0x0000
    1704:	20000034 	.word	0x20000034
    1708:	024007f8 	.word	0x024007f8

0000170c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    170c:	4902      	ldr	r1, [pc, #8]	; (1718 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    170e:	6802      	ldr	r2, [r0, #0]
    1710:	610a      	str	r2, [r1, #16]
    1712:	6840      	ldr	r0, [r0, #4]
    1714:	6148      	str	r0, [r1, #20]
    1716:	4770      	bx	lr
    1718:	20000034 	.word	0x20000034

0000171c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    171c:	4807      	ldr	r0, [pc, #28]	; (173c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    171e:	f04f 31ff 	mov.w	r1, #4294967295
    1722:	2200      	movs	r2, #0
    1724:	6001      	str	r1, [r0, #0]
    1726:	0cc9      	lsrs	r1, r1, #19
    1728:	6041      	str	r1, [r0, #4]
    172a:	f100 0108 	add.w	r1, r0, #8
    172e:	201f      	movs	r0, #31
    1730:	600a      	str	r2, [r1, #0]
    1732:	604a      	str	r2, [r1, #4]
    1734:	3108      	adds	r1, #8
    1736:	e9c1 0200 	strd	r0, r2, [r1]
    173a:	4770      	bx	lr
    173c:	2000003c 	.word	0x2000003c

00001740 <sdc_hci_cmd_cb_reset>:
    1740:	b510      	push	{r4, lr}
    1742:	f7ff ffeb 	bl	171c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    1746:	f00e fe0a 	bl	1035e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    174a:	4604      	mov	r4, r0
    174c:	4802      	ldr	r0, [pc, #8]	; (1758 <sdc_hci_cmd_cb_reset+0x18>)
    174e:	6800      	ldr	r0, [r0, #0]
    1750:	b100      	cbz	r0, 1754 <sdc_hci_cmd_cb_reset+0x14>
    1752:	4780      	blx	r0
    1754:	4620      	mov	r0, r4
    1756:	bd10      	pop	{r4, pc}
    1758:	20000054 	.word	0x20000054

0000175c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    175c:	4901      	ldr	r1, [pc, #4]	; (1764 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    175e:	6008      	str	r0, [r1, #0]
    1760:	4770      	bx	lr
    1762:	0000      	.short	0x0000
    1764:	20000054 	.word	0x20000054

00001768 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    1768:	2102      	movs	r1, #2
    176a:	8001      	strh	r1, [r0, #0]
    176c:	8041      	strh	r1, [r0, #2]
    176e:	2100      	movs	r1, #0
    1770:	7101      	strb	r1, [r0, #4]
    1772:	21d8      	movs	r1, #216	; 0xd8
    1774:	7141      	strb	r1, [r0, #5]
    1776:	f642 510c 	movw	r1, #11532	; 0x2d0c
    177a:	80c1      	strh	r1, [r0, #6]
    177c:	4901      	ldr	r1, [pc, #4]	; (1784 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    177e:	6081      	str	r1, [r0, #8]
    1780:	2000      	movs	r0, #0
    1782:	4770      	bx	lr
    1784:	e2ae362f 	.word	0xe2ae362f

00001788 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    1788:	b510      	push	{r4, lr}
    178a:	2802      	cmp	r0, #2
    178c:	d304      	bcc.n	1798 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    178e:	f240 2103 	movw	r1, #515	; 0x203
    1792:	2017      	movs	r0, #23
    1794:	f7ff fe04 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1798:	4901      	ldr	r1, [pc, #4]	; (17a0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    179a:	5c08      	ldrb	r0, [r1, r0]
    179c:	bd10      	pop	{r4, pc}
    179e:	0000      	.short	0x0000
    17a0:	20000f74 	.word	0x20000f74

000017a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    17a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17a6:	0005      	movs	r5, r0
    17a8:	9500      	str	r5, [sp, #0]
    17aa:	d00d      	beq.n	17c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    17ac:	2600      	movs	r6, #0
    17ae:	7808      	ldrb	r0, [r1, #0]
    17b0:	7849      	ldrb	r1, [r1, #1]
    17b2:	4604      	mov	r4, r0
    17b4:	42a1      	cmp	r1, r4
    17b6:	d900      	bls.n	17ba <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    17b8:	460c      	mov	r4, r1
    17ba:	07aa      	lsls	r2, r5, #30
    17bc:	d006      	beq.n	17cc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    17be:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    17c2:	2017      	movs	r0, #23
    17c4:	f7ff fdec 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17c8:	2601      	movs	r6, #1
    17ca:	e7f0      	b.n	17ae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    17cc:	4f12      	ldr	r7, [pc, #72]	; (1818 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    17ce:	7038      	strb	r0, [r7, #0]
    17d0:	7079      	strb	r1, [r7, #1]
    17d2:	4631      	mov	r1, r6
    17d4:	4668      	mov	r0, sp
    17d6:	f000 f8d3 	bl	1980 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    17da:	2100      	movs	r1, #0
    17dc:	460b      	mov	r3, r1
    17de:	9800      	ldr	r0, [sp, #0]
    17e0:	1cc0      	adds	r0, r0, #3
    17e2:	f020 0003 	bic.w	r0, r0, #3
    17e6:	9000      	str	r0, [sp, #0]
    17e8:	b966      	cbnz	r6, 1804 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    17ea:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    17ee:	60d0      	str	r0, [r2, #12]
    17f0:	2000      	movs	r0, #0
    17f2:	e005      	b.n	1800 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    17f4:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    17f8:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    17fc:	1c40      	adds	r0, r0, #1
    17fe:	b2c0      	uxtb	r0, r0
    1800:	42a0      	cmp	r0, r4
    1802:	d3f7      	bcc.n	17f4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    1804:	9800      	ldr	r0, [sp, #0]
    1806:	1c49      	adds	r1, r1, #1
    1808:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    180c:	b2c9      	uxtb	r1, r1
    180e:	9000      	str	r0, [sp, #0]
    1810:	2902      	cmp	r1, #2
    1812:	d3e4      	bcc.n	17de <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    1814:	1b40      	subs	r0, r0, r5
    1816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1818:	20000f74 	.word	0x20000f74

0000181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    181c:	b570      	push	{r4, r5, r6, lr}
    181e:	4604      	mov	r4, r0
    1820:	7985      	ldrb	r5, [r0, #6]
    1822:	f000 f8e9 	bl	19f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    1826:	4a0c      	ldr	r2, [pc, #48]	; (1858 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    1828:	79e1      	ldrb	r1, [r4, #7]
    182a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    182e:	e00e      	b.n	184e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    1830:	68d3      	ldr	r3, [r2, #12]
    1832:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1836:	b143      	cbz	r3, 184a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    1838:	1c48      	adds	r0, r1, #1
    183a:	71e0      	strb	r0, [r4, #7]
    183c:	80a1      	strh	r1, [r4, #4]
    183e:	68d0      	ldr	r0, [r2, #12]
    1840:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    1844:	6020      	str	r0, [r4, #0]
    1846:	2000      	movs	r0, #0
    1848:	bd70      	pop	{r4, r5, r6, pc}
    184a:	1c49      	adds	r1, r1, #1
    184c:	b2c9      	uxtb	r1, r1
    184e:	4281      	cmp	r1, r0
    1850:	d3ee      	bcc.n	1830 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    1852:	71e1      	strb	r1, [r4, #7]
    1854:	2005      	movs	r0, #5
    1856:	bd70      	pop	{r4, r5, r6, pc}
    1858:	20000f74 	.word	0x20000f74

0000185c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    185c:	b4f0      	push	{r4, r5, r6, r7}
    185e:	b121      	cbz	r1, 186a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    1860:	2901      	cmp	r1, #1
    1862:	d002      	beq.n	186a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    1864:	bcf0      	pop	{r4, r5, r6, r7}
    1866:	2000      	movs	r0, #0
    1868:	4770      	bx	lr
    186a:	4a0f      	ldr	r2, [pc, #60]	; (18a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    186c:	2500      	movs	r5, #0
    186e:	462b      	mov	r3, r5
    1870:	f64f 74ff 	movw	r4, #65535	; 0xffff
    1874:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    1878:	5c57      	ldrb	r7, [r2, r1]
    187a:	e00a      	b.n	1892 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    187c:	195a      	adds	r2, r3, r5
    187e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    1882:	b292      	uxth	r2, r2
    1884:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    1888:	f1bc 0f00 	cmp.w	ip, #0
    188c:	d004      	beq.n	1898 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    188e:	1c5b      	adds	r3, r3, #1
    1890:	b29b      	uxth	r3, r3
    1892:	429f      	cmp	r7, r3
    1894:	d8f2      	bhi.n	187c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    1896:	4622      	mov	r2, r4
    1898:	8002      	strh	r2, [r0, #0]
    189a:	4610      	mov	r0, r2
    189c:	42a2      	cmp	r2, r4
    189e:	d0e1      	beq.n	1864 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    18a0:	bcf0      	pop	{r4, r5, r6, r7}
    18a2:	f000 b835 	b.w	1910 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    18a6:	0000      	.short	0x0000
    18a8:	20000f74 	.word	0x20000f74

000018ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    18ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18b0:	4606      	mov	r6, r0
    18b2:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    18b6:	460c      	mov	r4, r1
    18b8:	f243 0702 	movw	r7, #12290	; 0x3002
    18bc:	38ff      	subs	r0, #255	; 0xff
    18be:	d020      	beq.n	1902 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    18c0:	2c02      	cmp	r4, #2
    18c2:	d302      	bcc.n	18ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    18c4:	2007      	movs	r0, #7
    18c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18ca:	4630      	mov	r0, r6
    18cc:	f000 f848 	bl	1960 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    18d0:	0005      	movs	r5, r0
    18d2:	d016      	beq.n	1902 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    18d4:	480c      	ldr	r0, [pc, #48]	; (1908 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    18d6:	4629      	mov	r1, r5
    18d8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    18dc:	4630      	mov	r0, r6
    18de:	4790      	blx	r2
    18e0:	480a      	ldr	r0, [pc, #40]	; (190c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    18e2:	2100      	movs	r1, #0
    18e4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    18e8:	68f8      	ldr	r0, [r7, #12]
    18ea:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    18ee:	4620      	mov	r0, r4
    18f0:	f000 f878 	bl	19e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    18f4:	4602      	mov	r2, r0
    18f6:	4629      	mov	r1, r5
    18f8:	6878      	ldr	r0, [r7, #4]
    18fa:	f00b ff58 	bl	d7ae <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    18fe:	2000      	movs	r0, #0
    1900:	e7e1      	b.n	18c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    1902:	4638      	mov	r0, r7
    1904:	e7df      	b.n	18c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    1906:	0000      	.short	0x0000
    1908:	00001a10 	.word	0x00001a10
    190c:	20000f74 	.word	0x20000f74
    1910:	b570      	push	{r4, r5, r6, lr}
    1912:	460e      	mov	r6, r1
    1914:	4605      	mov	r5, r0
    1916:	f00b ff84 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    191a:	b158      	cbz	r0, 1934 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    191c:	480f      	ldr	r0, [pc, #60]	; (195c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    191e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    1922:	68e0      	ldr	r0, [r4, #12]
    1924:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    1928:	b138      	cbz	r0, 193a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    192a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    192e:	2017      	movs	r0, #23
    1930:	f7ff fd36 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1934:	f240 1189 	movw	r1, #393	; 0x189
    1938:	e7f9      	b.n	192e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    193a:	6860      	ldr	r0, [r4, #4]
    193c:	2800      	cmp	r0, #0
    193e:	d00b      	beq.n	1958 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    1940:	4630      	mov	r0, r6
    1942:	f000 f84f 	bl	19e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    1946:	4601      	mov	r1, r0
    1948:	6860      	ldr	r0, [r4, #4]
    194a:	f00b fed8 	bl	d6fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    194e:	2800      	cmp	r0, #0
    1950:	d002      	beq.n	1958 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    1952:	68e1      	ldr	r1, [r4, #12]
    1954:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    1958:	bd70      	pop	{r4, r5, r6, pc}
    195a:	0000      	.short	0x0000
    195c:	20000f74 	.word	0x20000f74
    1960:	b570      	push	{r4, r5, r6, lr}
    1962:	460c      	mov	r4, r1
    1964:	4605      	mov	r5, r0
    1966:	f00b ff5c 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    196a:	2800      	cmp	r0, #0
    196c:	d005      	beq.n	197a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    196e:	4803      	ldr	r0, [pc, #12]	; (197c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    1970:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1974:	68c0      	ldr	r0, [r0, #12]
    1976:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    197a:	bd70      	pop	{r4, r5, r6, pc}
    197c:	20000f74 	.word	0x20000f74
    1980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1984:	4e16      	ldr	r6, [pc, #88]	; (19e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    1986:	4688      	mov	r8, r1
    1988:	4605      	mov	r5, r0
    198a:	2400      	movs	r4, #0
    198c:	6828      	ldr	r0, [r5, #0]
    198e:	1cc0      	adds	r0, r0, #3
    1990:	f020 0003 	bic.w	r0, r0, #3
    1994:	6028      	str	r0, [r5, #0]
    1996:	4620      	mov	r0, r4
    1998:	f000 f824 	bl	19e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    199c:	5d31      	ldrb	r1, [r6, r4]
    199e:	4348      	muls	r0, r1
    19a0:	f1b8 0f00 	cmp.w	r8, #0
    19a4:	d001      	beq.n	19aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    19a6:	2200      	movs	r2, #0
    19a8:	e000      	b.n	19ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    19aa:	682a      	ldr	r2, [r5, #0]
    19ac:	4601      	mov	r1, r0
    19ae:	9200      	str	r2, [sp, #0]
    19b0:	b132      	cbz	r2, 19c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    19b2:	2700      	movs	r7, #0
    19b4:	ea4f 000d 	mov.w	r0, sp
    19b8:	f00b fed2 	bl	d760 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    19bc:	b11f      	cbz	r7, 19c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    19be:	e006      	b.n	19ce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    19c0:	2701      	movs	r7, #1
    19c2:	2000      	movs	r0, #0
    19c4:	e7f8      	b.n	19b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    19c6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    19ca:	9a00      	ldr	r2, [sp, #0]
    19cc:	604a      	str	r2, [r1, #4]
    19ce:	6829      	ldr	r1, [r5, #0]
    19d0:	1c64      	adds	r4, r4, #1
    19d2:	4408      	add	r0, r1
    19d4:	b2e4      	uxtb	r4, r4
    19d6:	6028      	str	r0, [r5, #0]
    19d8:	2c02      	cmp	r4, #2
    19da:	d3d7      	bcc.n	198c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    19dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19e0:	20000f74 	.word	0x20000f74
    19e4:	4903      	ldr	r1, [pc, #12]	; (19f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    19e6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    19ea:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    19ee:	1cc0      	adds	r0, r0, #3
    19f0:	4008      	ands	r0, r1
    19f2:	4770      	bx	lr
    19f4:	00001a0c 	.word	0x00001a0c
    19f8:	4903      	ldr	r1, [pc, #12]	; (1a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    19fa:	7808      	ldrb	r0, [r1, #0]
    19fc:	7849      	ldrb	r1, [r1, #1]
    19fe:	4288      	cmp	r0, r1
    1a00:	d200      	bcs.n	1a04 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    1a02:	4608      	mov	r0, r1
    1a04:	4770      	bx	lr
    1a06:	0000      	.short	0x0000
    1a08:	20000f74 	.word	0x20000f74
    1a0c:	011802f8 	.word	0x011802f8
    1a10:	0000f501 	.word	0x0000f501
    1a14:	0000eaab 	.word	0x0000eaab

00001a18 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1a18:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a1c:	4c24      	ldr	r4, [pc, #144]	; (1ab0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1a1e:	4606      	mov	r6, r0
    1a20:	b081      	sub	sp, #4
    1a22:	6820      	ldr	r0, [r4, #0]
    1a24:	469a      	mov	sl, r3
    1a26:	4693      	mov	fp, r2
    1a28:	b158      	cbz	r0, 1a42 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    1a2a:	7a01      	ldrb	r1, [r0, #8]
    1a2c:	42b1      	cmp	r1, r6
    1a2e:	d903      	bls.n	1a38 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1a30:	6840      	ldr	r0, [r0, #4]
    1a32:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1a36:	b140      	cbz	r0, 1a4a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1a38:	f243 0002 	movw	r0, #12290	; 0x3002
    1a3c:	b005      	add	sp, #20
    1a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a42:	21a5      	movs	r1, #165	; 0xa5
    1a44:	2018      	movs	r0, #24
    1a46:	f7ff fcab 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a4a:	4619      	mov	r1, r3
    1a4c:	9802      	ldr	r0, [sp, #8]
    1a4e:	f00b ff0b 	bl	d868 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    1a52:	4680      	mov	r8, r0
    1a54:	4658      	mov	r0, fp
    1a56:	990e      	ldr	r1, [sp, #56]	; 0x38
    1a58:	f00b fefc 	bl	d854 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    1a5c:	4605      	mov	r5, r0
    1a5e:	eb08 0005 	add.w	r0, r8, r5
    1a62:	1d00      	adds	r0, r0, #4
    1a64:	b287      	uxth	r7, r0
    1a66:	6820      	ldr	r0, [r4, #0]
    1a68:	46a1      	mov	r9, r4
    1a6a:	4639      	mov	r1, r7
    1a6c:	6800      	ldr	r0, [r0, #0]
    1a6e:	f00b fe46 	bl	d6fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    1a72:	0004      	movs	r4, r0
    1a74:	d01a      	beq.n	1aac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    1a76:	8067      	strh	r7, [r4, #2]
    1a78:	8025      	strh	r5, [r4, #0]
    1a7a:	4629      	mov	r1, r5
    1a7c:	1d20      	adds	r0, r4, #4
    1a7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1a80:	4607      	mov	r7, r0
    1a82:	465a      	mov	r2, fp
    1a84:	2309      	movs	r3, #9
    1a86:	9500      	str	r5, [sp, #0]
    1a88:	f00b fdb3 	bl	d5f2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1a8c:	8820      	ldrh	r0, [r4, #0]
    1a8e:	4641      	mov	r1, r8
    1a90:	4438      	add	r0, r7
    1a92:	230a      	movs	r3, #10
    1a94:	9a02      	ldr	r2, [sp, #8]
    1a96:	f8cd a000 	str.w	sl, [sp]
    1a9a:	f00b fdaa 	bl	d5f2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1a9e:	f8d9 0000 	ldr.w	r0, [r9]
    1aa2:	6840      	ldr	r0, [r0, #4]
    1aa4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1aa8:	2000      	movs	r0, #0
    1aaa:	e7c7      	b.n	1a3c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1aac:	2004      	movs	r0, #4
    1aae:	e7c5      	b.n	1a3c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1ab0:	20000058 	.word	0x20000058

00001ab4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	4c14      	ldr	r4, [pc, #80]	; (1b08 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1ab8:	6823      	ldr	r3, [r4, #0]
    1aba:	b18b      	cbz	r3, 1ae0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1abc:	7a19      	ldrb	r1, [r3, #8]
    1abe:	4281      	cmp	r1, r0
    1ac0:	d912      	bls.n	1ae8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1ac2:	685a      	ldr	r2, [r3, #4]
    1ac4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1ac8:	b171      	cbz	r1, 1ae8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1aca:	2500      	movs	r5, #0
    1acc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1ad0:	884a      	ldrh	r2, [r1, #2]
    1ad2:	6818      	ldr	r0, [r3, #0]
    1ad4:	f00b fe6b 	bl	d7ae <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1ad8:	6821      	ldr	r1, [r4, #0]
    1ada:	2000      	movs	r0, #0
    1adc:	7a0a      	ldrb	r2, [r1, #8]
    1ade:	e00c      	b.n	1afa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1ae0:	21c6      	movs	r1, #198	; 0xc6
    1ae2:	2018      	movs	r0, #24
    1ae4:	f7ff fc5c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ae8:	f243 0002 	movw	r0, #12290	; 0x3002
    1aec:	bd70      	pop	{r4, r5, r6, pc}
    1aee:	684b      	ldr	r3, [r1, #4]
    1af0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1af4:	b933      	cbnz	r3, 1b04 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1af6:	1c40      	adds	r0, r0, #1
    1af8:	b2c0      	uxtb	r0, r0
    1afa:	4282      	cmp	r2, r0
    1afc:	d8f7      	bhi.n	1aee <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1afe:	6808      	ldr	r0, [r1, #0]
    1b00:	f00b fe4a 	bl	d798 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1b04:	2000      	movs	r0, #0
    1b06:	bd70      	pop	{r4, r5, r6, pc}
    1b08:	20000058 	.word	0x20000058

00001b0c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b10:	460d      	mov	r5, r1
    1b12:	0004      	movs	r4, r0
    1b14:	4690      	mov	r8, r2
    1b16:	f04f 0600 	mov.w	r6, #0
    1b1a:	d006      	beq.n	1b2a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1b1c:	2700      	movs	r7, #0
    1b1e:	07a0      	lsls	r0, r4, #30
    1b20:	d005      	beq.n	1b2e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1b22:	2186      	movs	r1, #134	; 0x86
    1b24:	2018      	movs	r0, #24
    1b26:	f7ff fc3b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b2a:	2701      	movs	r7, #1
    1b2c:	e7f7      	b.n	1b1e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1b2e:	b1cd      	cbz	r5, 1b64 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1b30:	4611      	mov	r1, r2
    1b32:	2000      	movs	r0, #0
    1b34:	f00b fe14 	bl	d760 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1b38:	300c      	adds	r0, #12
    1b3a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    1b3e:	b98f      	cbnz	r7, 1b64 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1b40:	4f0a      	ldr	r7, [pc, #40]	; (1b6c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    1b42:	f104 000c 	add.w	r0, r4, #12
    1b46:	00aa      	lsls	r2, r5, #2
    1b48:	603c      	str	r4, [r7, #0]
    1b4a:	7225      	strb	r5, [r4, #8]
    1b4c:	6060      	str	r0, [r4, #4]
    1b4e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1b52:	6020      	str	r0, [r4, #0]
    1b54:	2100      	movs	r1, #0
    1b56:	6860      	ldr	r0, [r4, #4]
    1b58:	f00f f9a4 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1b5c:	4641      	mov	r1, r8
    1b5e:	6838      	ldr	r0, [r7, #0]
    1b60:	f00b fdfe 	bl	d760 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1b64:	4630      	mov	r0, r6
    1b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b6a:	0000      	.short	0x0000
    1b6c:	20000058 	.word	0x20000058

00001b70 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    1b70:	b570      	push	{r4, r5, r6, lr}
    1b72:	4d08      	ldr	r5, [pc, #32]	; (1b94 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1b74:	6828      	ldr	r0, [r5, #0]
    1b76:	2800      	cmp	r0, #0
    1b78:	d00a      	beq.n	1b90 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1b7a:	2400      	movs	r4, #0
    1b7c:	e004      	b.n	1b88 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    1b7e:	4620      	mov	r0, r4
    1b80:	f7ff ff98 	bl	1ab4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1b84:	1c64      	adds	r4, r4, #1
    1b86:	b2e4      	uxtb	r4, r4
    1b88:	6828      	ldr	r0, [r5, #0]
    1b8a:	7a00      	ldrb	r0, [r0, #8]
    1b8c:	42a0      	cmp	r0, r4
    1b8e:	d8f6      	bhi.n	1b7e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    1b90:	bd70      	pop	{r4, r5, r6, pc}
    1b92:	0000      	.short	0x0000
    1b94:	20000058 	.word	0x20000058

00001b98 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1b98:	4909      	ldr	r1, [pc, #36]	; (1bc0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1b9a:	b510      	push	{r4, lr}
    1b9c:	4602      	mov	r2, r0
    1b9e:	6809      	ldr	r1, [r1, #0]
    1ba0:	2000      	movs	r0, #0
    1ba2:	b149      	cbz	r1, 1bb8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1ba4:	7a0b      	ldrb	r3, [r1, #8]
    1ba6:	4293      	cmp	r3, r2
    1ba8:	d905      	bls.n	1bb6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1baa:	6849      	ldr	r1, [r1, #4]
    1bac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1bb0:	2900      	cmp	r1, #0
    1bb2:	d000      	beq.n	1bb6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1bb4:	1d08      	adds	r0, r1, #4
    1bb6:	bd10      	pop	{r4, pc}
    1bb8:	21ec      	movs	r1, #236	; 0xec
    1bba:	2018      	movs	r0, #24
    1bbc:	f7ff fbf0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1bc0:	20000058 	.word	0x20000058

00001bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1bc4:	490a      	ldr	r1, [pc, #40]	; (1bf0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1bc6:	b510      	push	{r4, lr}
    1bc8:	4602      	mov	r2, r0
    1bca:	6809      	ldr	r1, [r1, #0]
    1bcc:	2000      	movs	r0, #0
    1bce:	b159      	cbz	r1, 1be8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1bd0:	7a0b      	ldrb	r3, [r1, #8]
    1bd2:	4293      	cmp	r3, r2
    1bd4:	d907      	bls.n	1be6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1bd6:	6849      	ldr	r1, [r1, #4]
    1bd8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1bdc:	2900      	cmp	r1, #0
    1bde:	d002      	beq.n	1be6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1be0:	f831 0b04 	ldrh.w	r0, [r1], #4
    1be4:	4408      	add	r0, r1
    1be6:	bd10      	pop	{r4, pc}
    1be8:	21fa      	movs	r1, #250	; 0xfa
    1bea:	2018      	movs	r0, #24
    1bec:	f7ff fbd8 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1bf0:	20000058 	.word	0x20000058
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	4b1e      	ldr	r3, [pc, #120]	; (1c70 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1bf8:	6845      	ldr	r5, [r0, #4]
    1bfa:	4604      	mov	r4, r0
    1bfc:	2200      	movs	r2, #0
    1bfe:	b1a1      	cbz	r1, 1c2a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    1c00:	2001      	movs	r0, #1
    1c02:	7060      	strb	r0, [r4, #1]
    1c04:	8858      	ldrh	r0, [r3, #2]
    1c06:	0881      	lsrs	r1, r0, #2
    1c08:	f05f 0000 	movs.w	r0, #0
    1c0c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1c10:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1c14:	831a      	strh	r2, [r3, #24]
    1c16:	8419      	strh	r1, [r3, #32]
    1c18:	fb00 5301 	mla	r3, r0, r1, r5
    1c1c:	6073      	str	r3, [r6, #4]
    1c1e:	1823      	adds	r3, r4, r0
    1c20:	1c40      	adds	r0, r0, #1
    1c22:	751a      	strb	r2, [r3, #20]
    1c24:	2804      	cmp	r0, #4
    1c26:	d3f1      	bcc.n	1c0c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1c28:	bd70      	pop	{r4, r5, r6, pc}
    1c2a:	7062      	strb	r2, [r4, #1]
    1c2c:	f05f 0000 	movs.w	r0, #0
    1c30:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    1c34:	830a      	strh	r2, [r1, #24]
    1c36:	840a      	strh	r2, [r1, #32]
    1c38:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1c3c:	604a      	str	r2, [r1, #4]
    1c3e:	1821      	adds	r1, r4, r0
    1c40:	1c40      	adds	r0, r0, #1
    1c42:	750a      	strb	r2, [r1, #20]
    1c44:	2804      	cmp	r0, #4
    1c46:	d3f3      	bcc.n	1c30 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1c48:	8858      	ldrh	r0, [r3, #2]
    1c4a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    1c4e:	d201      	bcs.n	1c54 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    1c50:	0846      	lsrs	r6, r0, #1
    1c52:	e000      	b.n	1c56 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    1c54:	26ff      	movs	r6, #255	; 0xff
    1c56:	f00b fe7b 	bl	d950 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1c5a:	6065      	str	r5, [r4, #4]
    1c5c:	8420      	strh	r0, [r4, #32]
    1c5e:	1829      	adds	r1, r5, r0
    1c60:	60a1      	str	r1, [r4, #8]
    1c62:	8466      	strh	r6, [r4, #34]	; 0x22
    1c64:	60e5      	str	r5, [r4, #12]
    1c66:	84a0      	strh	r0, [r4, #36]	; 0x24
    1c68:	6121      	str	r1, [r4, #16]
    1c6a:	84e6      	strh	r6, [r4, #38]	; 0x26
    1c6c:	bd70      	pop	{r4, r5, r6, pc}
    1c6e:	0000      	.short	0x0000
    1c70:	2000005c 	.word	0x2000005c

00001c74 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c78:	b158      	cbz	r0, 1c92 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1c7a:	2500      	movs	r5, #0
    1c7c:	4411      	add	r1, r2
    1c7e:	4e24      	ldr	r6, [pc, #144]	; (1d10 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    1c80:	b2cc      	uxtb	r4, r1
    1c82:	2700      	movs	r7, #0
    1c84:	7034      	strb	r4, [r6, #0]
    1c86:	0781      	lsls	r1, r0, #30
    1c88:	d005      	beq.n	1c96 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1c8a:	214e      	movs	r1, #78	; 0x4e
    1c8c:	2009      	movs	r0, #9
    1c8e:	f7ff fb87 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c92:	2501      	movs	r5, #1
    1c94:	e7f2      	b.n	1c7c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1c96:	2b1f      	cmp	r3, #31
    1c98:	d804      	bhi.n	1ca4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1c9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1c9e:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    1ca2:	e009      	b.n	1cb8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1ca4:	0059      	lsls	r1, r3, #1
    1ca6:	2bff      	cmp	r3, #255	; 0xff
    1ca8:	d90c      	bls.n	1cc4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1caa:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1cae:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1cb2:	d200      	bcs.n	1cb6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1cb4:	4611      	mov	r1, r2
    1cb6:	b289      	uxth	r1, r1
    1cb8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1cbc:	1cc9      	adds	r1, r1, #3
    1cbe:	4011      	ands	r1, r2
    1cc0:	b135      	cbz	r5, 1cd0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    1cc2:	e007      	b.n	1cd4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1cc4:	227c      	movs	r2, #124	; 0x7c
    1cc6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1cca:	d3f4      	bcc.n	1cb6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1ccc:	217c      	movs	r1, #124	; 0x7c
    1cce:	e7f2      	b.n	1cb6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1cd0:	6070      	str	r0, [r6, #4]
    1cd2:	8071      	strh	r1, [r6, #2]
    1cd4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1cd8:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1cdc:	2200      	movs	r2, #0
    1cde:	6876      	ldr	r6, [r6, #4]
    1ce0:	f04f 0c01 	mov.w	ip, #1
    1ce4:	e00d      	b.n	1d02 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1ce6:	b94d      	cbnz	r5, 1cfc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1ce8:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1cec:	eb00 0e03 	add.w	lr, r0, r3
    1cf0:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1cf4:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1cf8:	f8c7 e004 	str.w	lr, [r7, #4]
    1cfc:	1c52      	adds	r2, r2, #1
    1cfe:	440b      	add	r3, r1
    1d00:	b2d2      	uxtb	r2, r2
    1d02:	42a2      	cmp	r2, r4
    1d04:	d3ef      	bcc.n	1ce6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1d06:	1ddb      	adds	r3, r3, #7
    1d08:	f023 0007 	bic.w	r0, r3, #7
    1d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d10:	2000005c 	.word	0x2000005c

00001d14 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1d14:	b570      	push	{r4, r5, r6, lr}
    1d16:	4a10      	ldr	r2, [pc, #64]	; (1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1d18:	2000      	movs	r0, #0
    1d1a:	6851      	ldr	r1, [r2, #4]
    1d1c:	7812      	ldrb	r2, [r2, #0]
    1d1e:	e014      	b.n	1d4a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1d20:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1d24:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1d28:	b16b      	cbz	r3, 1d46 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1d2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1d2e:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    1d32:	d00c      	beq.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d34:	2500      	movs	r5, #0
    1d36:	70a5      	strb	r5, [r4, #2]
    1d38:	2101      	movs	r1, #1
    1d3a:	4620      	mov	r0, r4
    1d3c:	f7ff ff5a 	bl	1bf4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    1d40:	7025      	strb	r5, [r4, #0]
    1d42:	4620      	mov	r0, r4
    1d44:	bd70      	pop	{r4, r5, r6, pc}
    1d46:	1c40      	adds	r0, r0, #1
    1d48:	b2c0      	uxtb	r0, r0
    1d4a:	4290      	cmp	r0, r2
    1d4c:	d3e8      	bcc.n	1d20 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    1d4e:	21a9      	movs	r1, #169	; 0xa9
    1d50:	2009      	movs	r0, #9
    1d52:	f7ff fb25 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d56:	0000      	.short	0x0000
    1d58:	2000005c 	.word	0x2000005c

00001d5c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1d5c:	4804      	ldr	r0, [pc, #16]	; (1d70 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    1d5e:	b510      	push	{r4, lr}
    1d60:	8840      	ldrh	r0, [r0, #2]
    1d62:	0884      	lsrs	r4, r0, #2
    1d64:	f00b fdf4 	bl	d950 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1d68:	4284      	cmp	r4, r0
    1d6a:	d300      	bcc.n	1d6e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1d6c:	4620      	mov	r0, r4
    1d6e:	bd10      	pop	{r4, pc}
    1d70:	2000005c 	.word	0x2000005c
    1d74:	b530      	push	{r4, r5, lr}
    1d76:	490d      	ldr	r1, [pc, #52]	; (1dac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1d78:	2001      	movs	r0, #1
    1d7a:	6048      	str	r0, [r1, #4]
    1d7c:	1e82      	subs	r2, r0, #2
    1d7e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1d82:	490b      	ldr	r1, [pc, #44]	; (1db0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1d84:	6088      	str	r0, [r1, #8]
    1d86:	2300      	movs	r3, #0
    1d88:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1d8c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1d90:	4c08      	ldr	r4, [pc, #32]	; (1db4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    1d92:	6023      	str	r3, [r4, #0]
    1d94:	1d25      	adds	r5, r4, #4
    1d96:	6028      	str	r0, [r5, #0]
    1d98:	6088      	str	r0, [r1, #8]
    1d9a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1d9e:	6023      	str	r3, [r4, #0]
    1da0:	6028      	str	r0, [r5, #0]
    1da2:	4906      	ldr	r1, [pc, #24]	; (1dbc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1da4:	4804      	ldr	r0, [pc, #16]	; (1db8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1da6:	6008      	str	r0, [r1, #0]
    1da8:	bd30      	pop	{r4, r5, pc}
    1daa:	0000      	.short	0x0000
    1dac:	4000e000 	.word	0x4000e000
    1db0:	4000f000 	.word	0x4000f000
    1db4:	4000f500 	.word	0x4000f500
    1db8:	3ff60000 	.word	0x3ff60000
    1dbc:	4001f508 	.word	0x4001f508

00001dc0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1dc0:	b510      	push	{r4, lr}
    1dc2:	f7ff ffd7 	bl	1d74 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1dc6:	f00b fe9a 	bl	dafe <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1dca:	4903      	ldr	r1, [pc, #12]	; (1dd8 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1dcc:	4801      	ldr	r0, [pc, #4]	; (1dd4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1dce:	6008      	str	r0, [r1, #0]
    1dd0:	bd10      	pop	{r4, pc}
    1dd2:	0000      	.short	0x0000
    1dd4:	3ff60000 	.word	0x3ff60000
    1dd8:	4001f508 	.word	0x4001f508

00001ddc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1ddc:	b510      	push	{r4, lr}
    1dde:	f7ff ffc9 	bl	1d74 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1de2:	f00b fe8c 	bl	dafe <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1de6:	f000 f887 	bl	1ef8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1dea:	4905      	ldr	r1, [pc, #20]	; (1e00 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1dec:	4803      	ldr	r0, [pc, #12]	; (1dfc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1dee:	6008      	str	r0, [r1, #0]
    1df0:	f000 f8b8 	bl	1f64 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1df8:	f000 b8dc 	b.w	1fb4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1dfc:	3ff60000 	.word	0x3ff60000
    1e00:	4001f508 	.word	0x4001f508
    1e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e08:	4682      	mov	sl, r0
    1e0a:	4838      	ldr	r0, [pc, #224]	; (1eec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1e0c:	f00e feee 	bl	10bec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1e10:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1eec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    1e14:	b128      	cbz	r0, 1e22 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1e16:	2601      	movs	r6, #1
    1e18:	f10b 0001 	add.w	r0, fp, #1
    1e1c:	21ff      	movs	r1, #255	; 0xff
    1e1e:	7001      	strb	r1, [r0, #0]
    1e20:	e000      	b.n	1e24 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    1e22:	2600      	movs	r6, #0
    1e24:	f44f 7580 	mov.w	r5, #256	; 0x100
    1e28:	4c31      	ldr	r4, [pc, #196]	; (1ef0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    1e2a:	f04f 0800 	mov.w	r8, #0
    1e2e:	1d2f      	adds	r7, r5, #4
    1e30:	2101      	movs	r1, #1
    1e32:	6061      	str	r1, [r4, #4]
    1e34:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1e38:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1e3c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1e40:	6021      	str	r1, [r4, #0]
    1e42:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1ef4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    1e46:	e01c      	b.n	1e82 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1e48:	f8d9 0000 	ldr.w	r0, [r9]
    1e4c:	06c0      	lsls	r0, r0, #27
    1e4e:	d518      	bpl.n	1e82 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1e50:	200e      	movs	r0, #14
    1e52:	f00b fe63 	bl	db1c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1e56:	f3ef 8010 	mrs	r0, PRIMASK
    1e5a:	9000      	str	r0, [sp, #0]
    1e5c:	b672      	cpsid	i
    1e5e:	2103      	movs	r1, #3
    1e60:	4620      	mov	r0, r4
    1e62:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1e66:	4629      	mov	r1, r5
    1e68:	f00b fe65 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1e6c:	b930      	cbnz	r0, 1e7c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1e6e:	4639      	mov	r1, r7
    1e70:	4620      	mov	r0, r4
    1e72:	f00b fe60 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1e76:	b908      	cbnz	r0, 1e7c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1e78:	f00e ff4f 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1e7c:	9800      	ldr	r0, [sp, #0]
    1e7e:	b900      	cbnz	r0, 1e82 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1e80:	b662      	cpsie	i
    1e82:	4629      	mov	r1, r5
    1e84:	4620      	mov	r0, r4
    1e86:	f00b fe56 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1e8a:	b928      	cbnz	r0, 1e98 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1e8c:	4639      	mov	r1, r7
    1e8e:	4620      	mov	r0, r4
    1e90:	f00b fe51 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1e94:	2800      	cmp	r0, #0
    1e96:	d0d7      	beq.n	1e48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1e98:	4639      	mov	r1, r7
    1e9a:	4620      	mov	r0, r4
    1e9c:	f00b fe4b 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1ea0:	2800      	cmp	r0, #0
    1ea2:	d1c5      	bne.n	1e30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1ea4:	bb06      	cbnz	r6, 1ee8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1ea6:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1eaa:	f88d 1000 	strb.w	r1, [sp]
    1eae:	9900      	ldr	r1, [sp, #0]
    1eb0:	9100      	str	r1, [sp, #0]
    1eb2:	f89d 1000 	ldrb.w	r1, [sp]
    1eb6:	b109      	cbz	r1, 1ebc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1eb8:	2501      	movs	r5, #1
    1eba:	e000      	b.n	1ebe <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1ebc:	2500      	movs	r5, #0
    1ebe:	f10b 0001 	add.w	r0, fp, #1
    1ec2:	f880 8000 	strb.w	r8, [r0]
    1ec6:	2003      	movs	r0, #3
    1ec8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1ecc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1ed0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1ed4:	200e      	movs	r0, #14
    1ed6:	f00b fe21 	bl	db1c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1eda:	4804      	ldr	r0, [pc, #16]	; (1eec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1edc:	f00e fe9d 	bl	10c1a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1ee0:	b115      	cbz	r5, 1ee8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1ee2:	2011      	movs	r0, #17
    1ee4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ee8:	2000      	movs	r0, #0
    1eea:	e7fb      	b.n	1ee4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1eec:	2000035c 	.word	0x2000035c
    1ef0:	4000e000 	.word	0x4000e000
    1ef4:	e000ed10 	.word	0xe000ed10

00001ef8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1ef8:	b510      	push	{r4, lr}
    1efa:	4806      	ldr	r0, [pc, #24]	; (1f14 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1efc:	f00e fe89 	bl	10c12 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1f00:	b118      	cbz	r0, 1f0a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1f02:	2127      	movs	r1, #39	; 0x27
    1f04:	201d      	movs	r0, #29
    1f06:	f7ff fa4b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f0a:	4802      	ldr	r0, [pc, #8]	; (1f14 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1f0c:	2100      	movs	r1, #0
    1f0e:	7041      	strb	r1, [r0, #1]
    1f10:	bd10      	pop	{r4, pc}
    1f12:	0000      	.short	0x0000
    1f14:	2000035c 	.word	0x2000035c

00001f18 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	4911      	ldr	r1, [pc, #68]	; (1f60 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1f1c:	680a      	ldr	r2, [r1, #0]
    1f1e:	b1ea      	cbz	r2, 1f5c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1f20:	2300      	movs	r3, #0
    1f22:	461d      	mov	r5, r3
    1f24:	2401      	movs	r4, #1
    1f26:	684a      	ldr	r2, [r1, #4]
    1f28:	1c52      	adds	r2, r2, #1
    1f2a:	604a      	str	r2, [r1, #4]
    1f2c:	2a09      	cmp	r2, #9
    1f2e:	d300      	bcc.n	1f32 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1f30:	604d      	str	r5, [r1, #4]
    1f32:	790e      	ldrb	r6, [r1, #4]
    1f34:	fa04 f206 	lsl.w	r2, r4, r6
    1f38:	680e      	ldr	r6, [r1, #0]
    1f3a:	4216      	tst	r6, r2
    1f3c:	d00b      	beq.n	1f56 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1f3e:	f3ef 8310 	mrs	r3, PRIMASK
    1f42:	b672      	cpsid	i
    1f44:	680c      	ldr	r4, [r1, #0]
    1f46:	4394      	bics	r4, r2
    1f48:	600c      	str	r4, [r1, #0]
    1f4a:	b903      	cbnz	r3, 1f4e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1f4c:	b662      	cpsie	i
    1f4e:	6849      	ldr	r1, [r1, #4]
    1f50:	6001      	str	r1, [r0, #0]
    1f52:	2000      	movs	r0, #0
    1f54:	bd70      	pop	{r4, r5, r6, pc}
    1f56:	1c5b      	adds	r3, r3, #1
    1f58:	2b09      	cmp	r3, #9
    1f5a:	d3e4      	bcc.n	1f26 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1f5c:	2005      	movs	r0, #5
    1f5e:	bd70      	pop	{r4, r5, r6, pc}
    1f60:	20000064 	.word	0x20000064

00001f64 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1f64:	4802      	ldr	r0, [pc, #8]	; (1f70 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1f66:	2100      	movs	r1, #0
    1f68:	6001      	str	r1, [r0, #0]
    1f6a:	6041      	str	r1, [r0, #4]
    1f6c:	4770      	bx	lr
    1f6e:	0000      	.short	0x0000
    1f70:	20000064 	.word	0x20000064

00001f74 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1f74:	b510      	push	{r4, lr}
    1f76:	4c04      	ldr	r4, [pc, #16]	; (1f88 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1f78:	7820      	ldrb	r0, [r4, #0]
    1f7a:	28ff      	cmp	r0, #255	; 0xff
    1f7c:	d003      	beq.n	1f86 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    1f7e:	f00a fb7d 	bl	c67c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1f82:	20ff      	movs	r0, #255	; 0xff
    1f84:	7020      	strb	r0, [r4, #0]
    1f86:	bd10      	pop	{r4, pc}
    1f88:	20000000 	.word	0x20000000

00001f8c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1f8c:	b510      	push	{r4, lr}
    1f8e:	4c08      	ldr	r4, [pc, #32]	; (1fb0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1f90:	7861      	ldrb	r1, [r4, #1]
    1f92:	b109      	cbz	r1, 1f98 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1f94:	200f      	movs	r0, #15
    1f96:	bd10      	pop	{r4, pc}
    1f98:	f00a fb36 	bl	c608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1f9c:	7020      	strb	r0, [r4, #0]
    1f9e:	28ff      	cmp	r0, #255	; 0xff
    1fa0:	d001      	beq.n	1fa6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    1fa2:	2000      	movs	r0, #0
    1fa4:	bd10      	pop	{r4, pc}
    1fa6:	2173      	movs	r1, #115	; 0x73
    1fa8:	201f      	movs	r0, #31
    1faa:	f7ff f9f9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1fae:	0000      	.short	0x0000
    1fb0:	20000000 	.word	0x20000000

00001fb4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1fb4:	4901      	ldr	r1, [pc, #4]	; (1fbc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1fb6:	2000      	movs	r0, #0
    1fb8:	7048      	strb	r0, [r1, #1]
    1fba:	4770      	bx	lr
    1fbc:	20000000 	.word	0x20000000

00001fc0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1fc0:	4806      	ldr	r0, [pc, #24]	; (1fdc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    1fc2:	4a07      	ldr	r2, [pc, #28]	; (1fe0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1fc4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1fc6:	8852      	ldrh	r2, [r2, #2]
    1fc8:	4291      	cmp	r1, r2
    1fca:	d104      	bne.n	1fd6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1fcc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1fd0:	b108      	cbz	r0, 1fd6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1fd2:	2000      	movs	r0, #0
    1fd4:	4770      	bx	lr
    1fd6:	2001      	movs	r0, #1
    1fd8:	4770      	bx	lr
    1fda:	0000      	.short	0x0000
    1fdc:	20001498 	.word	0x20001498
    1fe0:	20000348 	.word	0x20000348

00001fe4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1fe4:	4901      	ldr	r1, [pc, #4]	; (1fec <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1fe6:	8048      	strh	r0, [r1, #2]
    1fe8:	4770      	bx	lr
    1fea:	0000      	.short	0x0000
    1fec:	20000348 	.word	0x20000348

00001ff0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1ff0:	4808      	ldr	r0, [pc, #32]	; (2014 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1ff2:	4a09      	ldr	r2, [pc, #36]	; (2018 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1ff4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1ff6:	8852      	ldrh	r2, [r2, #2]
    1ff8:	4291      	cmp	r1, r2
    1ffa:	d109      	bne.n	2010 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1ffc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2000:	8481      	strh	r1, [r0, #36]	; 0x24
    2002:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    2006:	b119      	cbz	r1, 2010 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    2008:	2100      	movs	r1, #0
    200a:	7001      	strb	r1, [r0, #0]
    200c:	2001      	movs	r0, #1
    200e:	4770      	bx	lr
    2010:	2000      	movs	r0, #0
    2012:	4770      	bx	lr
    2014:	20001498 	.word	0x20001498
    2018:	20000348 	.word	0x20000348

0000201c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    201c:	4807      	ldr	r0, [pc, #28]	; (203c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    201e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    2022:	2901      	cmp	r1, #1
    2024:	d007      	beq.n	2036 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    2026:	2101      	movs	r1, #1
    2028:	7001      	strb	r1, [r0, #0]
    202a:	4805      	ldr	r0, [pc, #20]	; (2040 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    202c:	4903      	ldr	r1, [pc, #12]	; (203c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    202e:	8800      	ldrh	r0, [r0, #0]
    2030:	8488      	strh	r0, [r1, #36]	; 0x24
    2032:	2001      	movs	r0, #1
    2034:	4770      	bx	lr
    2036:	2000      	movs	r0, #0
    2038:	4770      	bx	lr
    203a:	0000      	.short	0x0000
    203c:	20001498 	.word	0x20001498
    2040:	20000348 	.word	0x20000348

00002044 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    2044:	4906      	ldr	r1, [pc, #24]	; (2060 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    2046:	4b07      	ldr	r3, [pc, #28]	; (2064 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    2048:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    204a:	885b      	ldrh	r3, [r3, #2]
    204c:	429a      	cmp	r2, r3
    204e:	d105      	bne.n	205c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    2050:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    2054:	b112      	cbz	r2, 205c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    2056:	6001      	str	r1, [r0, #0]
    2058:	2001      	movs	r0, #1
    205a:	4770      	bx	lr
    205c:	2000      	movs	r0, #0
    205e:	4770      	bx	lr
    2060:	20001498 	.word	0x20001498
    2064:	20000348 	.word	0x20000348

00002068 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    2068:	4909      	ldr	r1, [pc, #36]	; (2090 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    206a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    206c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    2070:	3bff      	subs	r3, #255	; 0xff
    2072:	d002      	beq.n	207a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    2074:	2100      	movs	r1, #0
    2076:	6001      	str	r1, [r0, #0]
    2078:	e007      	b.n	208a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    207a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    207e:	4904      	ldr	r1, [pc, #16]	; (2090 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    2080:	2a01      	cmp	r2, #1
    2082:	d002      	beq.n	208a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    2084:	6001      	str	r1, [r0, #0]
    2086:	2001      	movs	r0, #1
    2088:	4770      	bx	lr
    208a:	2000      	movs	r0, #0
    208c:	4770      	bx	lr
    208e:	0000      	.short	0x0000
    2090:	20001498 	.word	0x20001498

00002094 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    2094:	4901      	ldr	r1, [pc, #4]	; (209c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    2096:	8008      	strh	r0, [r1, #0]
    2098:	4770      	bx	lr
    209a:	0000      	.short	0x0000
    209c:	20000348 	.word	0x20000348

000020a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    20a0:	4905      	ldr	r1, [pc, #20]	; (20b8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    20a2:	2000      	movs	r0, #0
    20a4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    20a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    20ac:	8488      	strh	r0, [r1, #36]	; 0x24
    20ae:	4903      	ldr	r1, [pc, #12]	; (20bc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    20b0:	8008      	strh	r0, [r1, #0]
    20b2:	8048      	strh	r0, [r1, #2]
    20b4:	4770      	bx	lr
    20b6:	0000      	.short	0x0000
    20b8:	20001498 	.word	0x20001498
    20bc:	20000348 	.word	0x20000348
    20c0:	4905      	ldr	r1, [pc, #20]	; (20d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    20c2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    20c4:	4282      	cmp	r2, r0
    20c6:	d105      	bne.n	20d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    20c8:	2000      	movs	r0, #0
    20ca:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    20ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
    20d2:	8488      	strh	r0, [r1, #36]	; 0x24
    20d4:	4770      	bx	lr
    20d6:	0000      	.short	0x0000
    20d8:	20001498 	.word	0x20001498

000020dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    20dc:	4a0a      	ldr	r2, [pc, #40]	; (2108 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    20de:	b110      	cbz	r0, 20e6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    20e0:	2801      	cmp	r0, #1
    20e2:	d007      	beq.n	20f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    20e4:	e00e      	b.n	2104 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    20e6:	7850      	ldrb	r0, [r2, #1]
    20e8:	b160      	cbz	r0, 2104 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    20ea:	f8d2 0002 	ldr.w	r0, [r2, #2]
    20ee:	6008      	str	r0, [r1, #0]
    20f0:	88d0      	ldrh	r0, [r2, #6]
    20f2:	e004      	b.n	20fe <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    20f4:	7810      	ldrb	r0, [r2, #0]
    20f6:	b128      	cbz	r0, 2104 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    20f8:	6890      	ldr	r0, [r2, #8]
    20fa:	6008      	str	r0, [r1, #0]
    20fc:	8990      	ldrh	r0, [r2, #12]
    20fe:	8088      	strh	r0, [r1, #4]
    2100:	2001      	movs	r0, #1
    2102:	4770      	bx	lr
    2104:	2000      	movs	r0, #0
    2106:	4770      	bx	lr
    2108:	2000035e 	.word	0x2000035e

0000210c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    210c:	4a08      	ldr	r2, [pc, #32]	; (2130 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    210e:	2301      	movs	r3, #1
    2110:	b138      	cbz	r0, 2122 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    2112:	2801      	cmp	r0, #1
    2114:	d104      	bne.n	2120 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    2116:	7013      	strb	r3, [r2, #0]
    2118:	6808      	ldr	r0, [r1, #0]
    211a:	6090      	str	r0, [r2, #8]
    211c:	8888      	ldrh	r0, [r1, #4]
    211e:	8190      	strh	r0, [r2, #12]
    2120:	4770      	bx	lr
    2122:	7053      	strb	r3, [r2, #1]
    2124:	6808      	ldr	r0, [r1, #0]
    2126:	f8c2 0002 	str.w	r0, [r2, #2]
    212a:	8888      	ldrh	r0, [r1, #4]
    212c:	80d0      	strh	r0, [r2, #6]
    212e:	4770      	bx	lr
    2130:	2000035e 	.word	0x2000035e

00002134 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    2134:	4906      	ldr	r1, [pc, #24]	; (2150 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    2136:	b110      	cbz	r0, 213e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    2138:	2801      	cmp	r0, #1
    213a:	d002      	beq.n	2142 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    213c:	e005      	b.n	214a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    213e:	7848      	ldrb	r0, [r1, #1]
    2140:	e000      	b.n	2144 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    2142:	7808      	ldrb	r0, [r1, #0]
    2144:	b108      	cbz	r0, 214a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    2146:	2001      	movs	r0, #1
    2148:	4770      	bx	lr
    214a:	2000      	movs	r0, #0
    214c:	4770      	bx	lr
    214e:	0000      	.short	0x0000
    2150:	2000035e 	.word	0x2000035e

00002154 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    2154:	4901      	ldr	r1, [pc, #4]	; (215c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    2156:	7708      	strb	r0, [r1, #28]
    2158:	4770      	bx	lr
    215a:	0000      	.short	0x0000
    215c:	20000dda 	.word	0x20000dda

00002160 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    2160:	4801      	ldr	r0, [pc, #4]	; (2168 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    2162:	7880      	ldrb	r0, [r0, #2]
    2164:	4770      	bx	lr
    2166:	0000      	.short	0x0000
    2168:	2000006c 	.word	0x2000006c

0000216c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    216c:	4801      	ldr	r0, [pc, #4]	; (2174 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    216e:	78c0      	ldrb	r0, [r0, #3]
    2170:	4770      	bx	lr
    2172:	0000      	.short	0x0000
    2174:	2000006c 	.word	0x2000006c

00002178 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    2178:	b570      	push	{r4, r5, r6, lr}
    217a:	460c      	mov	r4, r1
    217c:	4605      	mov	r5, r0
    217e:	f000 f91f 	bl	23c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    2182:	b118      	cbz	r0, 218c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    2184:	21d0      	movs	r1, #208	; 0xd0
    2186:	2027      	movs	r0, #39	; 0x27
    2188:	f7ff f90a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    218c:	4803      	ldr	r0, [pc, #12]	; (219c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    218e:	2101      	movs	r1, #1
    2190:	f00c f8fb 	bl	e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2194:	4802      	ldr	r0, [pc, #8]	; (21a0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    2196:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    219a:	bd70      	pop	{r4, r5, r6, pc}
    219c:	20000db8 	.word	0x20000db8
    21a0:	2000006c 	.word	0x2000006c

000021a4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    21a4:	4901      	ldr	r1, [pc, #4]	; (21ac <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    21a6:	2001      	movs	r0, #1
    21a8:	7148      	strb	r0, [r1, #5]
    21aa:	4770      	bx	lr
    21ac:	2000006c 	.word	0x2000006c

000021b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    21b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b4:	4d5b      	ldr	r5, [pc, #364]	; (2324 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>)
    21b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    21b8:	782e      	ldrb	r6, [r5, #0]
    21ba:	2e00      	cmp	r6, #0
    21bc:	d16b      	bne.n	2296 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    21be:	2a00      	cmp	r2, #0
    21c0:	d069      	beq.n	2296 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    21c2:	2b00      	cmp	r3, #0
    21c4:	d067      	beq.n	2296 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    21c6:	2c00      	cmp	r4, #0
    21c8:	d065      	beq.n	2296 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    21ca:	f105 0614 	add.w	r6, r5, #20
    21ce:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    21d2:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    21d6:	2700      	movs	r7, #0
    21d8:	716f      	strb	r7, [r5, #5]
    21da:	712f      	strb	r7, [r5, #4]
    21dc:	70af      	strb	r7, [r5, #2]
    21de:	706f      	strb	r7, [r5, #1]
    21e0:	70ef      	strb	r7, [r5, #3]
    21e2:	81af      	strh	r7, [r5, #12]
    21e4:	81ef      	strh	r7, [r5, #14]
    21e6:	f000 f93d 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    21ea:	4606      	mov	r6, r0
    21ec:	f000 f934 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    21f0:	4604      	mov	r4, r0
    21f2:	f005 ffa7 	bl	8144 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    21f6:	f005 fcff 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    21fa:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    21fe:	f006 f825 	bl	824c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    2202:	69e0      	ldr	r0, [r4, #28]
    2204:	f006 f908 	bl	8418 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    2208:	6960      	ldr	r0, [r4, #20]
    220a:	f006 f8fb 	bl	8404 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    220e:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    2212:	f006 f931 	bl	8478 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2216:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    221a:	6840      	ldr	r0, [r0, #4]
    221c:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    2220:	b108      	cbz	r0, 2226 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    2222:	f005 ff0f 	bl	8044 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    2226:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    222a:	2001      	movs	r0, #1
    222c:	f005 fe4e 	bl	7ecc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    2230:	2800      	cmp	r0, #0
    2232:	d070      	beq.n	2316 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x166>
    2234:	483c      	ldr	r0, [pc, #240]	; (2328 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>)
    2236:	f005 feb5 	bl	7fa4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    223a:	8820      	ldrh	r0, [r4, #0]
    223c:	f7ff fcc2 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2240:	6368      	str	r0, [r5, #52]	; 0x34
    2242:	8820      	ldrh	r0, [r4, #0]
    2244:	f7ff fca8 	bl	1b98 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2248:	f106 0288 	add.w	r2, r6, #136	; 0x88
    224c:	63a8      	str	r0, [r5, #56]	; 0x38
    224e:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    2252:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 232c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    2256:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    225a:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    225e:	f8c9 2019 	str.w	r2, [r9, #25]
    2262:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    2266:	f8c9 101d 	str.w	r1, [r9, #29]
    226a:	f000 f933 	bl	24d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf8>
    226e:	4601      	mov	r1, r0
    2270:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    2272:	46ba      	mov	sl, r7
    2274:	f00b fde6 	bl	de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    2278:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    227a:	4281      	cmp	r1, r0
    227c:	d200      	bcs.n	2280 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    227e:	4608      	mov	r0, r1
    2280:	71a8      	strb	r0, [r5, #6]
    2282:	46a8      	mov	r8, r5
    2284:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2288:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    228a:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    228e:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    2290:	2908      	cmp	r1, #8
    2292:	d104      	bne.n	229e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    2294:	e002      	b.n	229c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    2296:	f240 1145 	movw	r1, #325	; 0x145
    229a:	e040      	b.n	231e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    229c:	2104      	movs	r1, #4
    229e:	f00b fdd1 	bl	de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    22a2:	b90f      	cbnz	r7, 22a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    22a4:	1d00      	adds	r0, r0, #4
    22a6:	b280      	uxth	r0, r0
    22a8:	4285      	cmp	r5, r0
    22aa:	d200      	bcs.n	22ae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    22ac:	4628      	mov	r0, r5
    22ae:	b2c5      	uxtb	r5, r0
    22b0:	f888 5007 	strb.w	r5, [r8, #7]
    22b4:	f888 5008 	strb.w	r5, [r8, #8]
    22b8:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    22bc:	46d0      	mov	r8, sl
    22be:	b190      	cbz	r0, 22e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    22c0:	2701      	movs	r7, #1
    22c2:	f889 7018 	strb.w	r7, [r9, #24]
    22c6:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    22ca:	e9c9 1204 	strd	r1, r2, [r9, #16]
    22ce:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    22d2:	f00b fcbc 	bl	dc4e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    22d6:	4603      	mov	r3, r0
    22d8:	462a      	mov	r2, r5
    22da:	4914      	ldr	r1, [pc, #80]	; (232c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    22dc:	4638      	mov	r0, r7
    22de:	f8cd 8000 	str.w	r8, [sp]
    22e2:	f005 fbf5 	bl	7ad0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    22e6:	2001      	movs	r0, #1
    22e8:	f000 fb54 	bl	2994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    22ec:	4810      	ldr	r0, [pc, #64]	; (2330 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    22ee:	6800      	ldr	r0, [r0, #0]
    22f0:	2803      	cmp	r0, #3
    22f2:	d012      	beq.n	231a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    22f4:	280b      	cmp	r0, #11
    22f6:	d010      	beq.n	231a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    22f8:	480c      	ldr	r0, [pc, #48]	; (232c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    22fa:	220e      	movs	r2, #14
    22fc:	2100      	movs	r1, #0
    22fe:	304a      	adds	r0, #74	; 0x4a
    2300:	f00e fdd0 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2304:	4809      	ldr	r0, [pc, #36]	; (232c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    2306:	8ab1      	ldrh	r1, [r6, #20]
    2308:	304a      	adds	r0, #74	; 0x4a
    230a:	8041      	strh	r1, [r0, #2]
    230c:	8821      	ldrh	r1, [r4, #0]
    230e:	8001      	strh	r1, [r0, #0]
    2310:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    2314:	7101      	strb	r1, [r0, #4]
    2316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    231a:	f240 2102 	movw	r1, #514	; 0x202
    231e:	2027      	movs	r0, #39	; 0x27
    2320:	f7ff f83e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2324:	2000006c 	.word	0x2000006c
    2328:	00002b98 	.word	0x00002b98
    232c:	20000d90 	.word	0x20000d90
    2330:	40001550 	.word	0x40001550

00002334 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    2334:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2338:	4688      	mov	r8, r1
    233a:	4607      	mov	r7, r0
    233c:	f000 f892 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2340:	4c1a      	ldr	r4, [pc, #104]	; (23ac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    2342:	4605      	mov	r5, r0
    2344:	07b8      	lsls	r0, r7, #30
    2346:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2348:	784e      	ldrb	r6, [r1, #1]
    234a:	d516      	bpl.n	237a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    234c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    234e:	b330      	cbz	r0, 239e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    2350:	8962      	ldrh	r2, [r4, #10]
    2352:	1cd2      	adds	r2, r2, #3
    2354:	f00e fd2c 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2358:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    235a:	6260      	str	r0, [r4, #36]	; 0x24
    235c:	4669      	mov	r1, sp
    235e:	aa01      	add	r2, sp, #4
    2360:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2362:	f00b f8c3 	bl	d4ec <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    2366:	9800      	ldr	r0, [sp, #0]
    2368:	f00b f876 	bl	d458 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    236c:	f8c8 0000 	str.w	r0, [r8]
    2370:	4631      	mov	r1, r6
    2372:	2201      	movs	r2, #1
    2374:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2376:	f00b f826 	bl	d3c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    237a:	07f8      	lsls	r0, r7, #31
    237c:	d00d      	beq.n	239a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    237e:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    2382:	3518      	adds	r5, #24
    2384:	1c40      	adds	r0, r0, #1
    2386:	f141 0100 	adc.w	r1, r1, #0
    238a:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    238e:	f815 0918 	ldrb.w	r0, [r5], #-24
    2392:	2801      	cmp	r0, #1
    2394:	d008      	beq.n	23a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    2396:	2001      	movs	r0, #1
    2398:	7628      	strb	r0, [r5, #24]
    239a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    239e:	f240 4166 	movw	r1, #1126	; 0x466
    23a2:	2027      	movs	r0, #39	; 0x27
    23a4:	f7fe fffc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    23a8:	2000      	movs	r0, #0
    23aa:	e7f5      	b.n	2398 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    23ac:	2000006c 	.word	0x2000006c

000023b0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    23b0:	4802      	ldr	r0, [pc, #8]	; (23bc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    23b2:	89c0      	ldrh	r0, [r0, #14]
    23b4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    23b8:	4770      	bx	lr
    23ba:	0000      	.short	0x0000
    23bc:	2000006c 	.word	0x2000006c

000023c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    23c0:	4804      	ldr	r0, [pc, #16]	; (23d4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    23c2:	7800      	ldrb	r0, [r0, #0]
    23c4:	b108      	cbz	r0, 23ca <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    23c6:	200c      	movs	r0, #12
    23c8:	4770      	bx	lr
    23ca:	4903      	ldr	r1, [pc, #12]	; (23d8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    23cc:	2000      	movs	r0, #0
    23ce:	7708      	strb	r0, [r1, #28]
    23d0:	4770      	bx	lr
    23d2:	0000      	.short	0x0000
    23d4:	2000006c 	.word	0x2000006c
    23d8:	20000dda 	.word	0x20000dda

000023dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    23dc:	480c      	ldr	r0, [pc, #48]	; (2410 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    23de:	b510      	push	{r4, lr}
    23e0:	7801      	ldrb	r1, [r0, #0]
    23e2:	b149      	cbz	r1, 23f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    23e4:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    23e8:	7800      	ldrb	r0, [r0, #0]
    23ea:	2802      	cmp	r0, #2
    23ec:	d008      	beq.n	2400 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    23ee:	f240 211e 	movw	r1, #542	; 0x21e
    23f2:	2027      	movs	r0, #39	; 0x27
    23f4:	f7fe ffd4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    23f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    23fc:	f000 b9d8 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    2400:	6848      	ldr	r0, [r1, #4]
    2402:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    240a:	f005 bdd3 	b.w	7fb4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    240e:	0000      	.short	0x0000
    2410:	2000006c 	.word	0x2000006c
    2414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2416:	2600      	movs	r6, #0
    2418:	4605      	mov	r5, r0
    241a:	704e      	strb	r6, [r1, #1]
    241c:	201d      	movs	r0, #29
    241e:	4f09      	ldr	r7, [pc, #36]	; (2444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    2420:	460c      	mov	r4, r1
    2422:	7008      	strb	r0, [r1, #0]
    2424:	722e      	strb	r6, [r5, #8]
    2426:	220e      	movs	r2, #14
    2428:	4639      	mov	r1, r7
    242a:	1d20      	adds	r0, r4, #4
    242c:	f00e fcc0 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2430:	7a28      	ldrb	r0, [r5, #8]
    2432:	f88d 0000 	strb.w	r0, [sp]
    2436:	9800      	ldr	r0, [sp, #0]
    2438:	9000      	str	r0, [sp, #0]
    243a:	f89d 0000 	ldrb.w	r0, [sp]
    243e:	2800      	cmp	r0, #0
    2440:	d1f0      	bne.n	2424 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    2442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2444:	20000de8 	.word	0x20000de8
    2448:	4a02      	ldr	r2, [pc, #8]	; (2454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>)
    244a:	8993      	ldrh	r3, [r2, #12]
    244c:	4303      	orrs	r3, r0
    244e:	8193      	strh	r3, [r2, #12]
    2450:	6952      	ldr	r2, [r2, #20]
    2452:	4710      	bx	r2
    2454:	2000006c 	.word	0x2000006c
    2458:	4801      	ldr	r0, [pc, #4]	; (2460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>)
    245a:	6840      	ldr	r0, [r0, #4]
    245c:	4770      	bx	lr
    245e:	0000      	.short	0x0000
    2460:	200000a8 	.word	0x200000a8
    2464:	4801      	ldr	r0, [pc, #4]	; (246c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    2466:	6840      	ldr	r0, [r0, #4]
    2468:	3080      	adds	r0, #128	; 0x80
    246a:	4770      	bx	lr
    246c:	200000a8 	.word	0x200000a8
    2470:	4a01      	ldr	r2, [pc, #4]	; (2478 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    2472:	2100      	movs	r1, #0
    2474:	6952      	ldr	r2, [r2, #20]
    2476:	4710      	bx	r2
    2478:	2000006c 	.word	0x2000006c
    247c:	b570      	push	{r4, r5, r6, lr}
    247e:	4605      	mov	r5, r0
    2480:	2901      	cmp	r1, #1
    2482:	d818      	bhi.n	24b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    2484:	4c12      	ldr	r4, [pc, #72]	; (24d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>)
    2486:	69a1      	ldr	r1, [r4, #24]
    2488:	4788      	blx	r1
    248a:	b1a0      	cbz	r0, 24b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    248c:	7920      	ldrb	r0, [r4, #4]
    248e:	b990      	cbnz	r0, 24b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    2490:	b9e5      	cbnz	r5, 24cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    2492:	f104 0010 	add.w	r0, r4, #16
    2496:	7801      	ldrb	r1, [r0, #0]
    2498:	06c8      	lsls	r0, r1, #27
    249a:	d405      	bmi.n	24a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    249c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    249e:	7800      	ldrb	r0, [r0, #0]
    24a0:	06c0      	lsls	r0, r0, #27
    24a2:	d401      	bmi.n	24a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    24a4:	2001      	movs	r0, #1
    24a6:	e000      	b.n	24aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xce>
    24a8:	2000      	movs	r0, #0
    24aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    24ac:	b92a      	cbnz	r2, 24ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    24ae:	8962      	ldrh	r2, [r4, #10]
    24b0:	b11a      	cbz	r2, 24ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    24b2:	06c9      	lsls	r1, r1, #27
    24b4:	d401      	bmi.n	24ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    24b6:	2001      	movs	r0, #1
    24b8:	bd70      	pop	{r4, r5, r6, pc}
    24ba:	89a1      	ldrh	r1, [r4, #12]
    24bc:	078a      	lsls	r2, r1, #30
    24be:	d503      	bpl.n	24c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    24c0:	6a22      	ldr	r2, [r4, #32]
    24c2:	78d2      	ldrb	r2, [r2, #3]
    24c4:	2a02      	cmp	r2, #2
    24c6:	d001      	beq.n	24cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    24c8:	4308      	orrs	r0, r1
    24ca:	d1f4      	bne.n	24b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    24cc:	2000      	movs	r0, #0
    24ce:	bd70      	pop	{r4, r5, r6, pc}
    24d0:	2000006c 	.word	0x2000006c
    24d4:	b510      	push	{r4, lr}
    24d6:	f7ff ffbf 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    24da:	4604      	mov	r4, r0
    24dc:	f7ff ffc2 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    24e0:	4602      	mov	r2, r0
    24e2:	7f41      	ldrb	r1, [r0, #29]
    24e4:	4816      	ldr	r0, [pc, #88]	; (2540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>)
    24e6:	2925      	cmp	r1, #37	; 0x25
    24e8:	d010      	beq.n	250c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    24ea:	2926      	cmp	r1, #38	; 0x26
    24ec:	d00e      	beq.n	250c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    24ee:	7f92      	ldrb	r2, [r2, #30]
    24f0:	2a25      	cmp	r2, #37	; 0x25
    24f2:	d00b      	beq.n	250c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    24f4:	2920      	cmp	r1, #32
    24f6:	d00d      	beq.n	2514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    24f8:	2921      	cmp	r1, #33	; 0x21
    24fa:	d00b      	beq.n	2514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    24fc:	2a23      	cmp	r2, #35	; 0x23
    24fe:	d00f      	beq.n	2520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    2500:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2504:	2804      	cmp	r0, #4
    2506:	d100      	bne.n	250a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    2508:	2008      	movs	r0, #8
    250a:	bd10      	pop	{r4, pc}
    250c:	6840      	ldr	r0, [r0, #4]
    250e:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    2512:	e00e      	b.n	2532 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x156>
    2514:	2a23      	cmp	r2, #35	; 0x23
    2516:	d003      	beq.n	2520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    2518:	6840      	ldr	r0, [r0, #4]
    251a:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    251e:	e005      	b.n	252c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    2520:	6841      	ldr	r1, [r0, #4]
    2522:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    2526:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    252a:	4008      	ands	r0, r1
    252c:	f00b fb85 	bl	dc3a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    2530:	4601      	mov	r1, r0
    2532:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    253a:	f00b bb96 	b.w	dc6a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    253e:	0000      	.short	0x0000
    2540:	200000a8 	.word	0x200000a8
    2544:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2548:	468b      	mov	fp, r1
    254a:	4681      	mov	r9, r0
    254c:	f7ff ff8a 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2550:	2600      	movs	r6, #0
    2552:	4c66      	ldr	r4, [pc, #408]	; (26ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    2554:	4607      	mov	r7, r0
    2556:	f88d 6008 	strb.w	r6, [sp, #8]
    255a:	9603      	str	r6, [sp, #12]
    255c:	9601      	str	r6, [sp, #4]
    255e:	7820      	ldrb	r0, [r4, #0]
    2560:	4635      	mov	r5, r6
    2562:	2802      	cmp	r0, #2
    2564:	d004      	beq.n	2570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    2566:	f240 41ea 	movw	r1, #1258	; 0x4ea
    256a:	2027      	movs	r0, #39	; 0x27
    256c:	f7fe ff18 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2570:	7ba0      	ldrb	r0, [r4, #14]
    2572:	0640      	lsls	r0, r0, #25
    2574:	d406      	bmi.n	2584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    2576:	2040      	movs	r0, #64	; 0x40
    2578:	f7ff ff7a 	bl	2470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    257c:	89e0      	ldrh	r0, [r4, #14]
    257e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    2582:	81e0      	strh	r0, [r4, #14]
    2584:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    2588:	f1b9 0f00 	cmp.w	r9, #0
    258c:	d03a      	beq.n	2604 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    258e:	b180      	cbz	r0, 25b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    2590:	f005 fb6c 	bl	7c6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    2594:	f005 fb46 	bl	7c24 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    2598:	b958      	cbnz	r0, 25b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    259a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    259c:	7841      	ldrb	r1, [r0, #1]
    259e:	b141      	cbz	r1, 25b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    25a0:	7800      	ldrb	r0, [r0, #0]
    25a2:	7e39      	ldrb	r1, [r7, #24]
    25a4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    25a8:	4288      	cmp	r0, r1
    25aa:	d102      	bne.n	25b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    25ac:	2001      	movs	r0, #1
    25ae:	7060      	strb	r0, [r4, #1]
    25b0:	e097      	b.n	26e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    25b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    25b4:	7841      	ldrb	r1, [r0, #1]
    25b6:	8161      	strh	r1, [r4, #10]
    25b8:	b121      	cbz	r1, 25c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e8>
    25ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    25bc:	f00b f86c 	bl	d698 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    25c0:	62a0      	str	r0, [r4, #40]	; 0x28
    25c2:	e000      	b.n	25c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    25c4:	62a5      	str	r5, [r4, #40]	; 0x28
    25c6:	89e0      	ldrh	r0, [r4, #14]
    25c8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    25cc:	81e0      	strh	r0, [r4, #14]
    25ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    25d0:	7df9      	ldrb	r1, [r7, #23]
    25d2:	7800      	ldrb	r0, [r0, #0]
    25d4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    25d8:	4288      	cmp	r0, r1
    25da:	d007      	beq.n	25ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    25dc:	a803      	add	r0, sp, #12
    25de:	f000 f98b 	bl	28f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    25e2:	89e0      	ldrh	r0, [r4, #14]
    25e4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    25e8:	81e0      	strh	r0, [r4, #14]
    25ea:	e000      	b.n	25ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x212>
    25ec:	2601      	movs	r6, #1
    25ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    25f0:	7e39      	ldrb	r1, [r7, #24]
    25f2:	7800      	ldrb	r0, [r0, #0]
    25f4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    25f8:	4288      	cmp	r0, r1
    25fa:	d10d      	bne.n	2618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    25fc:	a802      	add	r0, sp, #8
    25fe:	f000 f931 	bl	2864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x488>
    2602:	e009      	b.n	2618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    2604:	b108      	cbz	r0, 260a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22e>
    2606:	f005 fb2b 	bl	7c60 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    260a:	78a0      	ldrb	r0, [r4, #2]
    260c:	1c40      	adds	r0, r0, #1
    260e:	70a0      	strb	r0, [r4, #2]
    2610:	89e0      	ldrh	r0, [r4, #14]
    2612:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    2616:	81e0      	strh	r0, [r4, #14]
    2618:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 26ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>
    261c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    2620:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    2624:	b190      	cbz	r0, 264c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    2626:	f7ff ff17 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    262a:	4931      	ldr	r1, [pc, #196]	; (26f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    262c:	760d      	strb	r5, [r1, #24]
    262e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    2632:	e9c1 2304 	strd	r2, r3, [r1, #16]
    2636:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    263a:	f00b fb08 	bl	dc4e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    263e:	4603      	mov	r3, r0
    2640:	22fb      	movs	r2, #251	; 0xfb
    2642:	492b      	ldr	r1, [pc, #172]	; (26f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    2644:	4628      	mov	r0, r5
    2646:	9500      	str	r5, [sp, #0]
    2648:	f005 fa42 	bl	7ad0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    264c:	f04f 0800 	mov.w	r8, #0
    2650:	f1bb 0f00 	cmp.w	fp, #0
    2654:	d104      	bne.n	2660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    2656:	78a1      	ldrb	r1, [r4, #2]
    2658:	2001      	movs	r0, #1
    265a:	f7ff ff0f 	bl	247c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    265e:	b120      	cbz	r0, 266a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    2660:	f005 febc 	bl	83dc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    2664:	f04f 0801 	mov.w	r8, #1
    2668:	e002      	b.n	2670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x294>
    266a:	2000      	movs	r0, #0
    266c:	f000 f9d0 	bl	2a10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>
    2670:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2674:	b118      	cbz	r0, 267e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    2676:	a901      	add	r1, sp, #4
    2678:	2002      	movs	r0, #2
    267a:	f7ff fe5b 	bl	2334 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    267e:	481c      	ldr	r0, [pc, #112]	; (26f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    2680:	8aba      	ldrh	r2, [r7, #20]
    2682:	304a      	adds	r0, #74	; 0x4a
    2684:	b13e      	cbz	r6, 2696 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    2686:	b91a      	cbnz	r2, 2690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    2688:	88c2      	ldrh	r2, [r0, #6]
    268a:	b90a      	cbnz	r2, 2690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    268c:	8902      	ldrh	r2, [r0, #8]
    268e:	b112      	cbz	r2, 2696 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    2690:	8942      	ldrh	r2, [r0, #10]
    2692:	1c52      	adds	r2, r2, #1
    2694:	8142      	strh	r2, [r0, #10]
    2696:	f1b9 0f00 	cmp.w	r9, #0
    269a:	d008      	beq.n	26ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    269c:	88c1      	ldrh	r1, [r0, #6]
    269e:	1c49      	adds	r1, r1, #1
    26a0:	80c1      	strh	r1, [r0, #6]
    26a2:	4812      	ldr	r0, [pc, #72]	; (26ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    26a4:	70a5      	strb	r5, [r4, #2]
    26a6:	303c      	adds	r0, #60	; 0x3c
    26a8:	f001 f960 	bl	396c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    26ac:	e002      	b.n	26b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    26ae:	8901      	ldrh	r1, [r0, #8]
    26b0:	1c49      	adds	r1, r1, #1
    26b2:	8101      	strh	r1, [r0, #8]
    26b4:	9803      	ldr	r0, [sp, #12]
    26b6:	b140      	cbz	r0, 26ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ee>
    26b8:	f00a fece 	bl	d458 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    26bc:	f8da 1004 	ldr.w	r1, [sl, #4]
    26c0:	1c40      	adds	r0, r0, #1
    26c2:	7205      	strb	r5, [r0, #8]
    26c4:	220e      	movs	r2, #14
    26c6:	f00b fede 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    26ca:	9801      	ldr	r0, [sp, #4]
    26cc:	b130      	cbz	r0, 26dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x300>
    26ce:	f8da 1004 	ldr.w	r1, [sl, #4]
    26d2:	7205      	strb	r5, [r0, #8]
    26d4:	222a      	movs	r2, #42	; 0x2a
    26d6:	9801      	ldr	r0, [sp, #4]
    26d8:	f00b fed5 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    26dc:	f1b8 0f00 	cmp.w	r8, #0
    26e0:	d001      	beq.n	26e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x30a>
    26e2:	f000 f865 	bl	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    26e6:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    26ea:	0000      	.short	0x0000
    26ec:	2000006c 	.word	0x2000006c
    26f0:	20000d90 	.word	0x20000d90
    26f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    26f8:	4688      	mov	r8, r1
    26fa:	4681      	mov	r9, r0
    26fc:	f7ff feb2 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2700:	4d29      	ldr	r5, [pc, #164]	; (27a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    2702:	4604      	mov	r4, r0
    2704:	7828      	ldrb	r0, [r5, #0]
    2706:	2801      	cmp	r0, #1
    2708:	d004      	beq.n	2714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    270a:	f240 4175 	movw	r1, #1141	; 0x475
    270e:	2027      	movs	r0, #39	; 0x27
    2710:	f7fe fe46 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2714:	7c20      	ldrb	r0, [r4, #16]
    2716:	2700      	movs	r7, #0
    2718:	2601      	movs	r6, #1
    271a:	b128      	cbz	r0, 2728 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    271c:	7427      	strb	r7, [r4, #16]
    271e:	2100      	movs	r1, #0
    2720:	2004      	movs	r0, #4
    2722:	f7ff fe91 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2726:	74a6      	strb	r6, [r4, #18]
    2728:	6a29      	ldr	r1, [r5, #32]
    272a:	7808      	ldrb	r0, [r1, #0]
    272c:	43c0      	mvns	r0, r0
    272e:	0780      	lsls	r0, r0, #30
    2730:	d109      	bne.n	2746 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    2732:	7da0      	ldrb	r0, [r4, #22]
    2734:	bb88      	cbnz	r0, 279a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    2736:	2002      	movs	r0, #2
    2738:	f7ff fe86 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    273c:	6a28      	ldr	r0, [r5, #32]
    273e:	7800      	ldrb	r0, [r0, #0]
    2740:	43c0      	mvns	r0, r0
    2742:	0780      	lsls	r0, r0, #30
    2744:	d029      	beq.n	279a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    2746:	6a28      	ldr	r0, [r5, #32]
    2748:	7840      	ldrb	r0, [r0, #1]
    274a:	b110      	cbz	r0, 2752 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    274c:	2002      	movs	r0, #2
    274e:	75a0      	strb	r0, [r4, #22]
    2750:	e000      	b.n	2754 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    2752:	75a6      	strb	r6, [r4, #22]
    2754:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    2758:	b198      	cbz	r0, 2782 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    275a:	f7ff fe7d 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    275e:	4913      	ldr	r1, [pc, #76]	; (27ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    2760:	7a2d      	ldrb	r5, [r5, #8]
    2762:	760e      	strb	r6, [r1, #24]
    2764:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    2768:	e9c1 2304 	strd	r2, r3, [r1, #16]
    276c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    2770:	f00b fa6d 	bl	dc4e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    2774:	4603      	mov	r3, r0
    2776:	462a      	mov	r2, r5
    2778:	490c      	ldr	r1, [pc, #48]	; (27ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    277a:	4630      	mov	r0, r6
    277c:	9700      	str	r7, [sp, #0]
    277e:	f005 f9a7 	bl	7ad0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2782:	ea38 0009 	bics.w	r0, r8, r9
    2786:	d004      	beq.n	2792 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    2788:	2100      	movs	r1, #0
    278a:	4608      	mov	r0, r1
    278c:	f7ff fe76 	bl	247c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    2790:	b128      	cbz	r0, 279e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    2792:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2796:	f000 b80b 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    279a:	2003      	movs	r0, #3
    279c:	e7d7      	b.n	274e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    279e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    27a2:	2000      	movs	r0, #0
    27a4:	f000 b8f6 	b.w	2994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    27a8:	2000006c 	.word	0x2000006c
    27ac:	20000d90 	.word	0x20000d90
    27b0:	b510      	push	{r4, lr}
    27b2:	f005 fb01 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    27b6:	f005 fa1f 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    27ba:	4c0d      	ldr	r4, [pc, #52]	; (27f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    27bc:	89e0      	ldrh	r0, [r4, #14]
    27be:	f7ff fe57 	bl	2470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    27c2:	480c      	ldr	r0, [pc, #48]	; (27f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    27c4:	7f00      	ldrb	r0, [r0, #28]
    27c6:	b158      	cbz	r0, 27e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    27c8:	490a      	ldr	r1, [pc, #40]	; (27f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    27ca:	220e      	movs	r2, #14
    27cc:	f101 000e 	add.w	r0, r1, #14
    27d0:	f00e faee 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    27d4:	4807      	ldr	r0, [pc, #28]	; (27f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    27d6:	2224      	movs	r2, #36	; 0x24
    27d8:	4907      	ldr	r1, [pc, #28]	; (27f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    27da:	301d      	adds	r0, #29
    27dc:	f00b fe67 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    27e0:	69e2      	ldr	r2, [r4, #28]
    27e2:	7921      	ldrb	r1, [r4, #4]
    27e4:	7860      	ldrb	r0, [r4, #1]
    27e6:	4790      	blx	r2
    27e8:	2000      	movs	r0, #0
    27ea:	7020      	strb	r0, [r4, #0]
    27ec:	bd10      	pop	{r4, pc}
    27ee:	0000      	.short	0x0000
    27f0:	2000006c 	.word	0x2000006c
    27f4:	20000dda 	.word	0x20000dda
    27f8:	00002415 	.word	0x00002415
    27fc:	4808      	ldr	r0, [pc, #32]	; (2820 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    27fe:	b510      	push	{r4, lr}
    2800:	7800      	ldrb	r0, [r0, #0]
    2802:	2802      	cmp	r0, #2
    2804:	d004      	beq.n	2810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x434>
    2806:	f240 214d 	movw	r1, #589	; 0x24d
    280a:	2027      	movs	r0, #39	; 0x27
    280c:	f7fe fdc8 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2810:	4904      	ldr	r1, [pc, #16]	; (2824 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    2812:	2001      	movs	r0, #1
    2814:	7308      	strb	r0, [r1, #12]
    2816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    281a:	f7ff bfc9 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    281e:	0000      	.short	0x0000
    2820:	2000006c 	.word	0x2000006c
    2824:	20000dda 	.word	0x20000dda
    2828:	b430      	push	{r4, r5}
    282a:	4604      	mov	r4, r0
    282c:	480c      	ldr	r0, [pc, #48]	; (2860 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x484>)
    282e:	7a00      	ldrb	r0, [r0, #8]
    2830:	b10b      	cbz	r3, 2836 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45a>
    2832:	1d00      	adds	r0, r0, #4
    2834:	b2c0      	uxtb	r0, r0
    2836:	b93a      	cbnz	r2, 2848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46c>
    2838:	28ff      	cmp	r0, #255	; 0xff
    283a:	d105      	bne.n	2848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46c>
    283c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    2840:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    2844:	429a      	cmp	r2, r3
    2846:	d009      	beq.n	285c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    2848:	b121      	cbz	r1, 2854 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    284a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    284e:	bc30      	pop	{r4, r5}
    2850:	f005 bde8 	b.w	8424 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2854:	20ff      	movs	r0, #255	; 0xff
    2856:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    285a:	e7f8      	b.n	284e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x472>
    285c:	bc30      	pop	{r4, r5}
    285e:	4770      	bx	lr
    2860:	2000006c 	.word	0x2000006c
    2864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2868:	4607      	mov	r7, r0
    286a:	f7ff fdfb 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    286e:	4c21      	ldr	r4, [pc, #132]	; (28f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>)
    2870:	4605      	mov	r5, r0
    2872:	2601      	movs	r6, #1
    2874:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2876:	7808      	ldrb	r0, [r1, #0]
    2878:	f000 0003 	and.w	r0, r0, #3
    287c:	2801      	cmp	r0, #1
    287e:	d00c      	beq.n	289a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    2880:	2802      	cmp	r0, #2
    2882:	d00a      	beq.n	289a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    2884:	2803      	cmp	r0, #3
    2886:	d11b      	bne.n	28c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    2888:	742e      	strb	r6, [r5, #16]
    288a:	89e0      	ldrh	r0, [r4, #14]
    288c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    2890:	81e0      	strh	r0, [r4, #14]
    2892:	2001      	movs	r0, #1
    2894:	f7ff fdd8 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2898:	e012      	b.n	28c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    289a:	7848      	ldrb	r0, [r1, #1]
    289c:	b180      	cbz	r0, 28c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    289e:	89e1      	ldrh	r1, [r4, #14]
    28a0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    28a4:	81e1      	strh	r1, [r4, #14]
    28a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    28a8:	2900      	cmp	r1, #0
    28aa:	d018      	beq.n	28de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    28ac:	28fb      	cmp	r0, #251	; 0xfb
    28ae:	d818      	bhi.n	28e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    28b0:	7960      	ldrb	r0, [r4, #5]
    28b2:	b120      	cbz	r0, 28be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e2>
    28b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28b8:	2020      	movs	r0, #32
    28ba:	f7ff bdd9 	b.w	2470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    28be:	703e      	strb	r6, [r7, #0]
    28c0:	7e28      	ldrb	r0, [r5, #24]
    28c2:	2801      	cmp	r0, #1
    28c4:	d012      	beq.n	28ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    28c6:	762e      	strb	r6, [r5, #24]
    28c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28ca:	7840      	ldrb	r0, [r0, #1]
    28cc:	2800      	cmp	r0, #0
    28ce:	d006      	beq.n	28de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    28d0:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    28d4:	1c40      	adds	r0, r0, #1
    28d6:	f141 0100 	adc.w	r1, r1, #0
    28da:	e9c5 0100 	strd	r0, r1, [r5]
    28de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28e2:	7920      	ldrb	r0, [r4, #4]
    28e4:	f040 0010 	orr.w	r0, r0, #16
    28e8:	7120      	strb	r0, [r4, #4]
    28ea:	e7f8      	b.n	28de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    28ec:	2000      	movs	r0, #0
    28ee:	7628      	strb	r0, [r5, #24]
    28f0:	e7ea      	b.n	28c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ec>
    28f2:	0000      	.short	0x0000
    28f4:	2000006c 	.word	0x2000006c
    28f8:	b570      	push	{r4, r5, r6, lr}
    28fa:	4605      	mov	r5, r0
    28fc:	f7ff fdb2 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2900:	4604      	mov	r4, r0
    2902:	7d80      	ldrb	r0, [r0, #22]
    2904:	2800      	cmp	r0, #0
    2906:	d02d      	beq.n	2964 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x588>
    2908:	2802      	cmp	r0, #2
    290a:	d10c      	bne.n	2926 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    290c:	481b      	ldr	r0, [pc, #108]	; (297c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a0>)
    290e:	4629      	mov	r1, r5
    2910:	6b40      	ldr	r0, [r0, #52]	; 0x34
    2912:	f00a fd30 	bl	d376 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2916:	b330      	cbz	r0, 2966 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    2918:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    291c:	1c40      	adds	r0, r0, #1
    291e:	f141 0100 	adc.w	r1, r1, #0
    2922:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2926:	2500      	movs	r5, #0
    2928:	75a5      	strb	r5, [r4, #22]
    292a:	7ca0      	ldrb	r0, [r4, #18]
    292c:	b120      	cbz	r0, 2938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55c>
    292e:	74a5      	strb	r5, [r4, #18]
    2930:	2100      	movs	r1, #0
    2932:	2010      	movs	r0, #16
    2934:	f7ff fd88 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2938:	7c60      	ldrb	r0, [r4, #17]
    293a:	b170      	cbz	r0, 295a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57e>
    293c:	7465      	strb	r5, [r4, #17]
    293e:	f7ff fb57 	bl	1ff0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    2942:	b198      	cbz	r0, 296c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    2944:	2100      	movs	r1, #0
    2946:	2008      	movs	r0, #8
    2948:	f7ff fd7e 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    294c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2950:	1c40      	adds	r0, r0, #1
    2952:	f141 0100 	adc.w	r1, r1, #0
    2956:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    295a:	7de0      	ldrb	r0, [r4, #23]
    295c:	2801      	cmp	r0, #1
    295e:	d00a      	beq.n	2976 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59a>
    2960:	2001      	movs	r0, #1
    2962:	75e0      	strb	r0, [r4, #23]
    2964:	bd70      	pop	{r4, r5, r6, pc}
    2966:	f240 31e3 	movw	r1, #995	; 0x3e3
    296a:	e001      	b.n	2970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>
    296c:	f240 31fa 	movw	r1, #1018	; 0x3fa
    2970:	2027      	movs	r0, #39	; 0x27
    2972:	f7fe fd15 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2976:	75e5      	strb	r5, [r4, #23]
    2978:	bd70      	pop	{r4, r5, r6, pc}
    297a:	0000      	.short	0x0000
    297c:	2000006c 	.word	0x2000006c
    2980:	4803      	ldr	r0, [pc, #12]	; (2990 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>)
    2982:	7800      	ldrb	r0, [r0, #0]
    2984:	2800      	cmp	r0, #0
    2986:	d001      	beq.n	298c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    2988:	f7ff bf12 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    298c:	4770      	bx	lr
    298e:	0000      	.short	0x0000
    2990:	2000006c 	.word	0x2000006c
    2994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2998:	4606      	mov	r6, r0
    299a:	f7ff fd5d 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    299e:	4680      	mov	r8, r0
    29a0:	f7ff fd60 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    29a4:	4c18      	ldr	r4, [pc, #96]	; (2a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>)
    29a6:	4605      	mov	r5, r0
    29a8:	4632      	mov	r2, r6
    29aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    29ac:	6260      	str	r0, [r4, #36]	; 0x24
    29ae:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    29b2:	2101      	movs	r1, #1
    29b4:	4640      	mov	r0, r8
    29b6:	f7ff ff37 	bl	2828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    29ba:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    29be:	2700      	movs	r7, #0
    29c0:	b170      	cbz	r0, 29e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x604>
    29c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    29c4:	f005 fc64 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    29c8:	4810      	ldr	r0, [pc, #64]	; (2a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>)
    29ca:	2101      	movs	r1, #1
    29cc:	7601      	strb	r1, [r0, #24]
    29ce:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    29d2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    29d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    29d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    29da:	f005 f8cb 	bl	7b74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    29de:	e004      	b.n	29ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60e>
    29e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    29e2:	f005 fc55 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    29e6:	f005 f907 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    29ea:	b916      	cbnz	r6, 29f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x616>
    29ec:	4638      	mov	r0, r7
    29ee:	f005 fb05 	bl	7ffc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    29f2:	2100      	movs	r1, #0
    29f4:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    29f8:	4608      	mov	r0, r1
    29fa:	f005 fcd1 	bl	83a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    29fe:	2002      	movs	r0, #2
    2a00:	7020      	strb	r0, [r4, #0]
    2a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a06:	0000      	.short	0x0000
    2a08:	2000006c 	.word	0x2000006c
    2a0c:	20000d90 	.word	0x20000d90
    2a10:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2a14:	4604      	mov	r4, r0
    2a16:	f7ff fd25 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2a1a:	4605      	mov	r5, r0
    2a1c:	f7ff fd1c 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    2a20:	2700      	movs	r7, #0
    2a22:	f88d 7000 	strb.w	r7, [sp]
    2a26:	4606      	mov	r6, r0
    2a28:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b4>
    2a2c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2a30:	4622      	mov	r2, r4
    2a32:	4639      	mov	r1, r7
    2a34:	f7ff fef8 	bl	2828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    2a38:	7da8      	ldrb	r0, [r5, #22]
    2a3a:	f04f 0801 	mov.w	r8, #1
    2a3e:	f1a9 0420 	sub.w	r4, r9, #32
    2a42:	b140      	cbz	r0, 2a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67a>
    2a44:	2801      	cmp	r0, #1
    2a46:	d020      	beq.n	2a8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ae>
    2a48:	2802      	cmp	r0, #2
    2a4a:	d02f      	beq.n	2aac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    2a4c:	2803      	cmp	r0, #3
    2a4e:	d03b      	beq.n	2ac8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    2a50:	f240 21ff 	movw	r1, #767	; 0x2ff
    2a54:	e057      	b.n	2b06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    2a56:	79a0      	ldrb	r0, [r4, #6]
    2a58:	2150      	movs	r1, #80	; 0x50
    2a5a:	f8ad 0004 	strh.w	r0, [sp, #4]
    2a5e:	5388      	strh	r0, [r1, r6]
    2a60:	4648      	mov	r0, r9
    2a62:	f7ff faef 	bl	2044 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2a66:	b130      	cbz	r0, 2a76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    2a68:	2080      	movs	r0, #128	; 0x80
    2a6a:	6a21      	ldr	r1, [r4, #32]
    2a6c:	f7ff fcec 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2a70:	f885 8011 	strb.w	r8, [r5, #17]
    2a74:	e02c      	b.n	2ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2a76:	466a      	mov	r2, sp
    2a78:	a901      	add	r1, sp, #4
    2a7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2a7c:	f00b f8ff 	bl	dc7e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    2a80:	6220      	str	r0, [r4, #32]
    2a82:	b110      	cbz	r0, 2a8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ae>
    2a84:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    2a88:	b111      	cbz	r1, 2a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>
    2a8a:	4842      	ldr	r0, [pc, #264]	; (2b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>)
    2a8c:	6220      	str	r0, [r4, #32]
    2a8e:	e01f      	b.n	2ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2a90:	f89d 1000 	ldrb.w	r1, [sp]
    2a94:	b921      	cbnz	r1, 2aa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    2a96:	8007      	strh	r7, [r0, #0]
    2a98:	7087      	strb	r7, [r0, #2]
    2a9a:	2101      	movs	r1, #1
    2a9c:	f00b fc75 	bl	e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2aa0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2aa4:	6a20      	ldr	r0, [r4, #32]
    2aa6:	f00b fbf8 	bl	e29a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    2aaa:	e011      	b.n	2ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2aac:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    2ab0:	f8ad 0004 	strh.w	r0, [sp, #4]
    2ab4:	466a      	mov	r2, sp
    2ab6:	a901      	add	r1, sp, #4
    2ab8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2aba:	f00b f8e0 	bl	dc7e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    2abe:	6220      	str	r0, [r4, #32]
    2ac0:	b930      	cbnz	r0, 2ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2ac2:	f240 21e9 	movw	r1, #745	; 0x2e9
    2ac6:	e01e      	b.n	2b06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    2ac8:	4648      	mov	r0, r9
    2aca:	f7ff fabb 	bl	2044 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2ace:	b1c0      	cbz	r0, 2b02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    2ad0:	6a20      	ldr	r0, [r4, #32]
    2ad2:	2308      	movs	r3, #8
    2ad4:	7801      	ldrb	r1, [r0, #0]
    2ad6:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    2ada:	7001      	strb	r1, [r0, #0]
    2adc:	7dea      	ldrb	r2, [r5, #23]
    2ade:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2ae2:	4311      	orrs	r1, r2
    2ae4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2ae8:	7001      	strb	r1, [r0, #0]
    2aea:	7e2a      	ldrb	r2, [r5, #24]
    2aec:	2304      	movs	r3, #4
    2aee:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2af2:	4311      	orrs	r1, r2
    2af4:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2af8:	7001      	strb	r1, [r0, #0]
    2afa:	43c9      	mvns	r1, r1
    2afc:	0789      	lsls	r1, r1, #30
    2afe:	d005      	beq.n	2b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    2b00:	e007      	b.n	2b12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    2b02:	f240 21f2 	movw	r1, #754	; 0x2f2
    2b06:	2027      	movs	r0, #39	; 0x27
    2b08:	f7fe fc4a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b0c:	78c0      	ldrb	r0, [r0, #3]
    2b0e:	2802      	cmp	r0, #2
    2b10:	d00f      	beq.n	2b32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x756>
    2b12:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2b14:	f00a fd2d 	bl	d572 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2b18:	b108      	cbz	r0, 2b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    2b1a:	2101      	movs	r1, #1
    2b1c:	e00a      	b.n	2b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    2b1e:	6a20      	ldr	r0, [r4, #32]
    2b20:	7800      	ldrb	r0, [r0, #0]
    2b22:	43c0      	mvns	r0, r0
    2b24:	0780      	lsls	r0, r0, #30
    2b26:	d004      	beq.n	2b32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x756>
    2b28:	f7ff fa4a 	bl	1fc0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    2b2c:	f080 0101 	eor.w	r1, r0, #1
    2b30:	e000      	b.n	2b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    2b32:	2100      	movs	r1, #0
    2b34:	6a20      	ldr	r0, [r4, #32]
    2b36:	7802      	ldrb	r2, [r0, #0]
    2b38:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2b3c:	7001      	strb	r1, [r0, #0]
    2b3e:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2b42:	b181      	cbz	r1, 2b66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    2b44:	7841      	ldrb	r1, [r0, #1]
    2b46:	b171      	cbz	r1, 2b66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    2b48:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2b4a:	f005 fba1 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2b4e:	4811      	ldr	r0, [pc, #68]	; (2b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>)
    2b50:	3828      	subs	r0, #40	; 0x28
    2b52:	7607      	strb	r7, [r0, #24]
    2b54:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2b58:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2b5c:	6a21      	ldr	r1, [r4, #32]
    2b5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2b60:	f005 f808 	bl	7b74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2b64:	e003      	b.n	2b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x792>
    2b66:	f005 fb93 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2b6a:	f005 f845 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2b6e:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2b72:	2101      	movs	r1, #1
    2b74:	2000      	movs	r0, #0
    2b76:	f005 fc13 	bl	83a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2b7a:	f884 8003 	strb.w	r8, [r4, #3]
    2b7e:	6a21      	ldr	r1, [r4, #32]
    2b80:	880a      	ldrh	r2, [r1, #0]
    2b82:	8222      	strh	r2, [r4, #16]
    2b84:	7889      	ldrb	r1, [r1, #2]
    2b86:	74a1      	strb	r1, [r4, #18]
    2b88:	f884 8000 	strb.w	r8, [r4]
    2b8c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2b90:	2000008c 	.word	0x2000008c
    2b94:	20000db8 	.word	0x20000db8
    2b98:	000027fd 	.word	0x000027fd
    2b9c:	00002545 	.word	0x00002545
    2ba0:	000026f5 	.word	0x000026f5
    2ba4:	00002981 	.word	0x00002981

00002ba8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2ba8:	4800      	ldr	r0, [pc, #0]	; (2bac <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2baa:	4770      	bx	lr
    2bac:	20001691 	.word	0x20001691

00002bb0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2bb0:	4904      	ldr	r1, [pc, #16]	; (2bc4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2bb2:	788a      	ldrb	r2, [r1, #2]
    2bb4:	4282      	cmp	r2, r0
    2bb6:	d903      	bls.n	2bc0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2bb8:	4408      	add	r0, r1
    2bba:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2bbe:	4770      	bx	lr
    2bc0:	2000      	movs	r0, #0
    2bc2:	4770      	bx	lr
    2bc4:	200014be 	.word	0x200014be

00002bc8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2bc8:	4904      	ldr	r1, [pc, #16]	; (2bdc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2bca:	788a      	ldrb	r2, [r1, #2]
    2bcc:	4282      	cmp	r2, r0
    2bce:	d903      	bls.n	2bd8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2bd0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2bd4:	3083      	adds	r0, #131	; 0x83
    2bd6:	4770      	bx	lr
    2bd8:	2000      	movs	r0, #0
    2bda:	4770      	bx	lr
    2bdc:	200014be 	.word	0x200014be

00002be0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2be0:	4a05      	ldr	r2, [pc, #20]	; (2bf8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2be2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2be6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2bea:	6802      	ldr	r2, [r0, #0]
    2bec:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    2bf0:	8880      	ldrh	r0, [r0, #4]
    2bf2:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2bf6:	4770      	bx	lr
    2bf8:	200014be 	.word	0x200014be

00002bfc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2bfc:	4904      	ldr	r1, [pc, #16]	; (2c10 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2bfe:	788a      	ldrb	r2, [r1, #2]
    2c00:	4282      	cmp	r2, r0
    2c02:	d903      	bls.n	2c0c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2c04:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2c08:	1cc0      	adds	r0, r0, #3
    2c0a:	4770      	bx	lr
    2c0c:	2000      	movs	r0, #0
    2c0e:	4770      	bx	lr
    2c10:	200014be 	.word	0x200014be

00002c14 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2c14:	b510      	push	{r4, lr}
    2c16:	f240 12d3 	movw	r2, #467	; 0x1d3
    2c1a:	2100      	movs	r1, #0
    2c1c:	4808      	ldr	r0, [pc, #32]	; (2c40 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    2c1e:	f00e f941 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c22:	2208      	movs	r2, #8
    2c24:	21ff      	movs	r1, #255	; 0xff
    2c26:	4807      	ldr	r0, [pc, #28]	; (2c44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2c28:	f00e f93c 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c2c:	4805      	ldr	r0, [pc, #20]	; (2c44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2c2e:	2100      	movs	r1, #0
    2c30:	1f00      	subs	r0, r0, #4
    2c32:	7001      	strb	r1, [r0, #0]
    2c34:	7041      	strb	r1, [r0, #1]
    2c36:	f44f 7161 	mov.w	r1, #900	; 0x384
    2c3a:	8041      	strh	r1, [r0, #2]
    2c3c:	bd10      	pop	{r4, pc}
    2c3e:	0000      	.short	0x0000
    2c40:	200014be 	.word	0x200014be
    2c44:	20000350 	.word	0x20000350

00002c48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2c48:	4b0b      	ldr	r3, [pc, #44]	; (2c78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2c4a:	b510      	push	{r4, lr}
    2c4c:	789c      	ldrb	r4, [r3, #2]
    2c4e:	4284      	cmp	r4, r0
    2c50:	d90f      	bls.n	2c72 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2c52:	4418      	add	r0, r3
    2c54:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2c58:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2c5c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2c60:	700b      	strb	r3, [r1, #0]
    2c62:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    2c66:	6011      	str	r1, [r2, #0]
    2c68:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    2c6c:	8090      	strh	r0, [r2, #4]
    2c6e:	2001      	movs	r0, #1
    2c70:	bd10      	pop	{r4, pc}
    2c72:	2000      	movs	r0, #0
    2c74:	bd10      	pop	{r4, pc}
    2c76:	0000      	.short	0x0000
    2c78:	200014be 	.word	0x200014be

00002c7c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    2c7c:	4907      	ldr	r1, [pc, #28]	; (2c9c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    2c7e:	788a      	ldrb	r2, [r1, #2]
    2c80:	4282      	cmp	r2, r0
    2c82:	d909      	bls.n	2c98 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2c84:	4408      	add	r0, r1
    2c86:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2c8a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2c8e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2c92:	f000 0001 	and.w	r0, r0, #1
    2c96:	4770      	bx	lr
    2c98:	2000      	movs	r0, #0
    2c9a:	4770      	bx	lr
    2c9c:	200014be 	.word	0x200014be

00002ca0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2ca0:	4801      	ldr	r0, [pc, #4]	; (2ca8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2ca2:	8840      	ldrh	r0, [r0, #2]
    2ca4:	4770      	bx	lr
    2ca6:	0000      	.short	0x0000
    2ca8:	2000034c 	.word	0x2000034c

00002cac <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2cac:	4905      	ldr	r1, [pc, #20]	; (2cc4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2cae:	788a      	ldrb	r2, [r1, #2]
    2cb0:	4282      	cmp	r2, r0
    2cb2:	d903      	bls.n	2cbc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2cb4:	4408      	add	r0, r1
    2cb6:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    2cba:	b108      	cbz	r0, 2cc0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2cbc:	2000      	movs	r0, #0
    2cbe:	4770      	bx	lr
    2cc0:	2001      	movs	r0, #1
    2cc2:	4770      	bx	lr
    2cc4:	200014be 	.word	0x200014be

00002cc8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    2cc8:	b570      	push	{r4, r5, r6, lr}
    2cca:	460d      	mov	r5, r1
    2ccc:	4606      	mov	r6, r0
    2cce:	f000 f8c1 	bl	2e54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    2cd2:	4c10      	ldr	r4, [pc, #64]	; (2d14 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    2cd4:	2810      	cmp	r0, #16
    2cd6:	d007      	beq.n	2ce8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2cd8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2cdc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    2ce0:	07c9      	lsls	r1, r1, #31
    2ce2:	d001      	beq.n	2ce8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2ce4:	2001      	movs	r0, #1
    2ce6:	bd70      	pop	{r4, r5, r6, pc}
    2ce8:	7861      	ldrb	r1, [r4, #1]
    2cea:	2908      	cmp	r1, #8
    2cec:	d210      	bcs.n	2d10 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    2cee:	2810      	cmp	r0, #16
    2cf0:	d008      	beq.n	2d04 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    2cf2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2cf6:	2101      	movs	r1, #1
    2cf8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2cfc:	7860      	ldrb	r0, [r4, #1]
    2cfe:	1c40      	adds	r0, r0, #1
    2d00:	7060      	strb	r0, [r4, #1]
    2d02:	e7ef      	b.n	2ce4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    2d04:	2201      	movs	r2, #1
    2d06:	4629      	mov	r1, r5
    2d08:	4630      	mov	r0, r6
    2d0a:	f000 f887 	bl	2e1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2d0e:	e7f5      	b.n	2cfc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    2d10:	2000      	movs	r0, #0
    2d12:	bd70      	pop	{r4, r5, r6, pc}
    2d14:	200014be 	.word	0x200014be

00002d18 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2d18:	b570      	push	{r4, r5, r6, lr}
    2d1a:	4d0b      	ldr	r5, [pc, #44]	; (2d48 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2d1c:	7828      	ldrb	r0, [r5, #0]
    2d1e:	1e40      	subs	r0, r0, #1
    2d20:	b244      	sxtb	r4, r0
    2d22:	e00a      	b.n	2d3a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    2d24:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2d28:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2d2c:	07c0      	lsls	r0, r0, #31
    2d2e:	d002      	beq.n	2d36 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    2d30:	b2e0      	uxtb	r0, r4
    2d32:	f000 f8ed 	bl	2f10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    2d36:	1e64      	subs	r4, r4, #1
    2d38:	b264      	sxtb	r4, r4
    2d3a:	2c00      	cmp	r4, #0
    2d3c:	daf2      	bge.n	2d24 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    2d3e:	4903      	ldr	r1, [pc, #12]	; (2d4c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    2d40:	2000      	movs	r0, #0
    2d42:	7048      	strb	r0, [r1, #1]
    2d44:	bd70      	pop	{r4, r5, r6, pc}
    2d46:	0000      	.short	0x0000
    2d48:	200014be 	.word	0x200014be
    2d4c:	2000034c 	.word	0x2000034c

00002d50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    2d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d54:	2400      	movs	r4, #0
    2d56:	4625      	mov	r5, r4
    2d58:	4e18      	ldr	r6, [pc, #96]	; (2dbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2d5a:	e029      	b.n	2db0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2d5c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    2d60:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    2d64:	07c0      	lsls	r0, r0, #31
    2d66:	d021      	beq.n	2dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2d68:	4628      	mov	r0, r5
    2d6a:	f000 f843 	bl	2df4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2d6e:	4603      	mov	r3, r0
    2d70:	f7ff ff44 	bl	2bfc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2d74:	4601      	mov	r1, r0
    2d76:	2000      	movs	r0, #0
    2d78:	2b10      	cmp	r3, #16
    2d7a:	d009      	beq.n	2d90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    2d7c:	18f2      	adds	r2, r6, r3
    2d7e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    2d82:	f1bc 0f01 	cmp.w	ip, #1
    2d86:	d002      	beq.n	2d8e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    2d88:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    2d8c:	b102      	cbz	r2, 2d90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    2d8e:	2001      	movs	r0, #1
    2d90:	1e40      	subs	r0, r0, #1
    2d92:	4201      	tst	r1, r0
    2d94:	d10a      	bne.n	2dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2d96:	480a      	ldr	r0, [pc, #40]	; (2dc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    2d98:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    2d9c:	5503      	strb	r3, [r0, r4]
    2d9e:	4620      	mov	r0, r4
    2da0:	1c64      	adds	r4, r4, #1
    2da2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    2da6:	b2e4      	uxtb	r4, r4
    2da8:	f005 fc20 	bl	85ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    2dac:	1c6d      	adds	r5, r5, #1
    2dae:	b2ed      	uxtb	r5, r5
    2db0:	7830      	ldrb	r0, [r6, #0]
    2db2:	42a8      	cmp	r0, r5
    2db4:	d8d2      	bhi.n	2d5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    2db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dba:	0000      	.short	0x0000
    2dbc:	200014be 	.word	0x200014be
    2dc0:	20000350 	.word	0x20000350
    2dc4:	4602      	mov	r2, r0
    2dc6:	4809      	ldr	r0, [pc, #36]	; (2dec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    2dc8:	b510      	push	{r4, lr}
    2dca:	7800      	ldrb	r0, [r0, #0]
    2dcc:	460b      	mov	r3, r1
    2dce:	b158      	cbz	r0, 2de8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2dd0:	4807      	ldr	r0, [pc, #28]	; (2df0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2dd2:	7881      	ldrb	r1, [r0, #2]
    2dd4:	b141      	cbz	r1, 2de8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2dd6:	b10b      	cbz	r3, 2ddc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2dd8:	1cc0      	adds	r0, r0, #3
    2dda:	e001      	b.n	2de0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2ddc:	4804      	ldr	r0, [pc, #16]	; (2df0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2dde:	3083      	adds	r0, #131	; 0x83
    2de0:	f004 fdd0 	bl	7984 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2de4:	2001      	movs	r0, #1
    2de6:	bd10      	pop	{r4, pc}
    2de8:	2000      	movs	r0, #0
    2dea:	bd10      	pop	{r4, pc}
    2dec:	2000034c 	.word	0x2000034c
    2df0:	200014be 	.word	0x200014be
    2df4:	4908      	ldr	r1, [pc, #32]	; (2e18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    2df6:	b510      	push	{r4, lr}
    2df8:	4603      	mov	r3, r0
    2dfa:	2000      	movs	r0, #0
    2dfc:	788a      	ldrb	r2, [r1, #2]
    2dfe:	e006      	b.n	2e0e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    2e00:	180c      	adds	r4, r1, r0
    2e02:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    2e06:	429c      	cmp	r4, r3
    2e08:	d004      	beq.n	2e14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2e0a:	1c40      	adds	r0, r0, #1
    2e0c:	b2c0      	uxtb	r0, r0
    2e0e:	4282      	cmp	r2, r0
    2e10:	d8f6      	bhi.n	2e00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    2e12:	2010      	movs	r0, #16
    2e14:	bd10      	pop	{r4, pc}
    2e16:	0000      	.short	0x0000
    2e18:	200014be 	.word	0x200014be
    2e1c:	b570      	push	{r4, r5, r6, lr}
    2e1e:	4b0c      	ldr	r3, [pc, #48]	; (2e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    2e20:	4604      	mov	r4, r0
    2e22:	7818      	ldrb	r0, [r3, #0]
    2e24:	1c45      	adds	r5, r0, #1
    2e26:	701d      	strb	r5, [r3, #0]
    2e28:	2810      	cmp	r0, #16
    2e2a:	d303      	bcc.n	2e34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2e2c:	2146      	movs	r1, #70	; 0x46
    2e2e:	2028      	movs	r0, #40	; 0x28
    2e30:	f7fe fab6 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2e34:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2e38:	680d      	ldr	r5, [r1, #0]
    2e3a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    2e3e:	8889      	ldrh	r1, [r1, #4]
    2e40:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    2e44:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2e48:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2e4c:	bd70      	pop	{r4, r5, r6, pc}
    2e4e:	0000      	.short	0x0000
    2e50:	200014be 	.word	0x200014be
    2e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e56:	4c1a      	ldr	r4, [pc, #104]	; (2ec0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2e58:	4603      	mov	r3, r0
    2e5a:	2000      	movs	r0, #0
    2e5c:	7825      	ldrb	r5, [r4, #0]
    2e5e:	e02a      	b.n	2eb6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    2e60:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2e64:	780f      	ldrb	r7, [r1, #0]
    2e66:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2e6a:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    2e6e:	ea87 070c 	eor.w	r7, r7, ip
    2e72:	405e      	eors	r6, r3
    2e74:	443e      	add	r6, r7
    2e76:	784f      	ldrb	r7, [r1, #1]
    2e78:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2e7c:	ea87 070c 	eor.w	r7, r7, ip
    2e80:	443e      	add	r6, r7
    2e82:	788f      	ldrb	r7, [r1, #2]
    2e84:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2e88:	ea87 070c 	eor.w	r7, r7, ip
    2e8c:	443e      	add	r6, r7
    2e8e:	78cf      	ldrb	r7, [r1, #3]
    2e90:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2e94:	ea87 070c 	eor.w	r7, r7, ip
    2e98:	443e      	add	r6, r7
    2e9a:	790f      	ldrb	r7, [r1, #4]
    2e9c:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    2ea0:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    2ea4:	ea87 070c 	eor.w	r7, r7, ip
    2ea8:	443e      	add	r6, r7
    2eaa:	794f      	ldrb	r7, [r1, #5]
    2eac:	4057      	eors	r7, r2
    2eae:	42f7      	cmn	r7, r6
    2eb0:	d004      	beq.n	2ebc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    2eb2:	1c40      	adds	r0, r0, #1
    2eb4:	b2c0      	uxtb	r0, r0
    2eb6:	4285      	cmp	r5, r0
    2eb8:	d8d2      	bhi.n	2e60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    2eba:	2010      	movs	r0, #16
    2ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ebe:	0000      	.short	0x0000
    2ec0:	200014be 	.word	0x200014be
    2ec4:	b570      	push	{r4, r5, r6, lr}
    2ec6:	4605      	mov	r5, r0
    2ec8:	f7ff ff94 	bl	2df4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2ecc:	2810      	cmp	r0, #16
    2ece:	d11c      	bne.n	2f0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2ed0:	4c0e      	ldr	r4, [pc, #56]	; (2f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    2ed2:	7820      	ldrb	r0, [r4, #0]
    2ed4:	1e40      	subs	r0, r0, #1
    2ed6:	b2c0      	uxtb	r0, r0
    2ed8:	7020      	strb	r0, [r4, #0]
    2eda:	42a8      	cmp	r0, r5
    2edc:	d015      	beq.n	2f0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2ede:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2ee2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    2ee6:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2eea:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    2eee:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    2ef2:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    2ef6:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2efa:	7820      	ldrb	r0, [r4, #0]
    2efc:	f7ff ff7a 	bl	2df4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2f00:	2810      	cmp	r0, #16
    2f02:	d002      	beq.n	2f0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2f04:	4420      	add	r0, r4
    2f06:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2f0a:	bd70      	pop	{r4, r5, r6, pc}
    2f0c:	200014be 	.word	0x200014be
    2f10:	4905      	ldr	r1, [pc, #20]	; (2f28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    2f12:	784a      	ldrb	r2, [r1, #1]
    2f14:	1e52      	subs	r2, r2, #1
    2f16:	704a      	strb	r2, [r1, #1]
    2f18:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2f1c:	2200      	movs	r2, #0
    2f1e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    2f22:	f7ff bfcf 	b.w	2ec4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    2f26:	0000      	.short	0x0000
    2f28:	200014be 	.word	0x200014be

00002f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f30:	4604      	mov	r4, r0
    2f32:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2f36:	f04f 0901 	mov.w	r9, #1
    2f3a:	b171      	cbz	r1, 2f5a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2f3c:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2f40:	1e7e      	subs	r6, r7, #1
    2f42:	2901      	cmp	r1, #1
    2f44:	d025      	beq.n	2f92 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x66>
    2f46:	2902      	cmp	r1, #2
    2f48:	d04a      	beq.n	2fe0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb4>
    2f4a:	2903      	cmp	r1, #3
    2f4c:	d11f      	bne.n	2f8e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2f4e:	4639      	mov	r1, r7
    2f50:	4630      	mov	r0, r6
    2f52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f56:	f00b b8c5 	b.w	e0e4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2f5a:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2f5e:	2100      	movs	r1, #0
    2f60:	f00d ffa0 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2f64:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2f68:	4822      	ldr	r0, [pc, #136]	; (2ff4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>)
    2f6a:	66e8      	str	r0, [r5, #108]	; 0x6c
    2f6c:	2007      	movs	r0, #7
    2f6e:	6728      	str	r0, [r5, #112]	; 0x70
    2f70:	f814 0fec 	ldrb.w	r0, [r4, #236]!
    2f74:	f020 0004 	bic.w	r0, r0, #4
    2f78:	7020      	strb	r0, [r4, #0]
    2f7a:	20fe      	movs	r0, #254	; 0xfe
    2f7c:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2f80:	207f      	movs	r0, #127	; 0x7f
    2f82:	7668      	strb	r0, [r5, #25]
    2f84:	481c      	ldr	r0, [pc, #112]	; (2ff8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>)
    2f86:	60a8      	str	r0, [r5, #8]
    2f88:	2000      	movs	r0, #0
    2f8a:	e9c5 0000 	strd	r0, r0, [r5]
    2f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f92:	f04f 0800 	mov.w	r8, #0
    2f96:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2f9a:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2f9e:	6921      	ldr	r1, [r4, #16]
    2fa0:	4816      	ldr	r0, [pc, #88]	; (2ffc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2fa2:	460a      	mov	r2, r1
    2fa4:	4408      	add	r0, r1
    2fa6:	fbb0 f0f1 	udiv	r0, r0, r1
    2faa:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2fae:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2fb2:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    2fb6:	8b63      	ldrh	r3, [r4, #26]
    2fb8:	4628      	mov	r0, r5
    2fba:	f000 f821 	bl	3000 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    2fbe:	4639      	mov	r1, r7
    2fc0:	4630      	mov	r0, r6
    2fc2:	f00b f88f 	bl	e0e4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2fc6:	f00d fe84 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    2fca:	b118      	cbz	r0, 2fd4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa8>
    2fcc:	6960      	ldr	r0, [r4, #20]
    2fce:	f000 fb53 	bl	3678 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    2fd2:	b110      	cbz	r0, 2fda <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xae>
    2fd4:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    2fd8:	e7d9      	b.n	2f8e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2fda:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    2fde:	e7d6      	b.n	2f8e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2fe0:	6901      	ldr	r1, [r0, #16]
    2fe2:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    2fe6:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    2fea:	4628      	mov	r0, r5
    2fec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ff0:	f000 b806 	b.w	3000 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    2ff4:	3404492f 	.word	0x3404492f
    2ff8:	fffce000 	.word	0xfffce000
    2ffc:	01c9c37f 	.word	0x01c9c37f
    3000:	b510      	push	{r4, lr}
    3002:	2400      	movs	r4, #0
    3004:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    3008:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    300c:	434c      	muls	r4, r1
    300e:	fbb4 f4f2 	udiv	r4, r4, r2
    3012:	f820 4910 	strh.w	r4, [r0], #-16
    3016:	f240 2471 	movw	r4, #625	; 0x271
    301a:	4363      	muls	r3, r4
    301c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    3020:	1e5b      	subs	r3, r3, #1
    3022:	fbb3 f3f2 	udiv	r3, r3, r2
    3026:	81c3      	strh	r3, [r0, #14]
    3028:	4b09      	ldr	r3, [pc, #36]	; (3050 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    302a:	fbb3 f3f2 	udiv	r3, r3, r2
    302e:	1c5b      	adds	r3, r3, #1
    3030:	8283      	strh	r3, [r0, #20]
    3032:	8903      	ldrh	r3, [r0, #8]
    3034:	4363      	muls	r3, r4
    3036:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    303a:	1e5b      	subs	r3, r3, #1
    303c:	fbb3 f3f2 	udiv	r3, r3, r2
    3040:	6043      	str	r3, [r0, #4]
    3042:	6803      	ldr	r3, [r0, #0]
    3044:	434b      	muls	r3, r1
    3046:	fbb3 f1f2 	udiv	r1, r3, r2
    304a:	6001      	str	r1, [r0, #0]
    304c:	bd10      	pop	{r4, pc}
    304e:	0000      	.short	0x0000
    3050:	02625a00 	.word	0x02625a00

00003054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    3054:	4902      	ldr	r1, [pc, #8]	; (3060 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    3056:	f991 1000 	ldrsb.w	r1, [r1]
    305a:	f00a bff4 	b.w	e046 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    305e:	0000      	.short	0x0000
    3060:	2000036c 	.word	0x2000036c

00003064 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    3064:	b508      	push	{r3, lr}
    3066:	207f      	movs	r0, #127	; 0x7f
    3068:	f88d 0000 	strb.w	r0, [sp]
    306c:	4668      	mov	r0, sp
    306e:	f005 f9bd 	bl	83ec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    3072:	b140      	cbz	r0, 3086 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    3074:	4805      	ldr	r0, [pc, #20]	; (308c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    3076:	7840      	ldrb	r0, [r0, #1]
    3078:	4240      	negs	r0, r0
    307a:	b241      	sxtb	r1, r0
    307c:	f99d 0000 	ldrsb.w	r0, [sp]
    3080:	f00a ffe1 	bl	e046 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    3084:	bd08      	pop	{r3, pc}
    3086:	f99d 0000 	ldrsb.w	r0, [sp]
    308a:	bd08      	pop	{r3, pc}
    308c:	2000036c 	.word	0x2000036c
    3090:	b570      	push	{r4, r5, r6, lr}
    3092:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    3096:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    309a:	2401      	movs	r4, #1
    309c:	fb03 2101 	mla	r1, r3, r1, r2
    30a0:	2225      	movs	r2, #37	; 0x25
    30a2:	fbb1 f3f2 	udiv	r3, r1, r2
    30a6:	fb02 1113 	mls	r1, r2, r3, r1
    30aa:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    30ae:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    30b2:	f001 0307 	and.w	r3, r1, #7
    30b6:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    30ba:	fa04 f303 	lsl.w	r3, r4, r3
    30be:	421a      	tst	r2, r3
    30c0:	d004      	beq.n	30cc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x68>
    30c2:	bf00      	nop
    30c4:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    30c8:	2000      	movs	r0, #0
    30ca:	bd70      	pop	{r4, r5, r6, pc}
    30cc:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    30d0:	fbb1 f3f2 	udiv	r3, r1, r2
    30d4:	fb02 1113 	mls	r1, r2, r3, r1
    30d8:	1c49      	adds	r1, r1, #1
    30da:	b2c9      	uxtb	r1, r1
    30dc:	2300      	movs	r3, #0
    30de:	18c5      	adds	r5, r0, r3
    30e0:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    30e4:	428a      	cmp	r2, r1
    30e6:	d312      	bcc.n	310e <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xaa>
    30e8:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    30ec:	2200      	movs	r2, #0
    30ee:	bf00      	nop
    30f0:	fa04 f602 	lsl.w	r6, r4, r2
    30f4:	4235      	tst	r5, r6
    30f6:	d001      	beq.n	30fc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x98>
    30f8:	1e49      	subs	r1, r1, #1
    30fa:	b2c9      	uxtb	r1, r1
    30fc:	b121      	cbz	r1, 3108 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xa4>
    30fe:	1c52      	adds	r2, r2, #1
    3100:	b2d2      	uxtb	r2, r2
    3102:	2a08      	cmp	r2, #8
    3104:	d3f4      	bcc.n	30f0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x8c>
    3106:	e004      	b.n	3112 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xae>
    3108:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    310c:	e7da      	b.n	30c4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x60>
    310e:	1a89      	subs	r1, r1, r2
    3110:	b2c9      	uxtb	r1, r1
    3112:	1c5b      	adds	r3, r3, #1
    3114:	b2db      	uxtb	r3, r3
    3116:	2b05      	cmp	r3, #5
    3118:	d3e1      	bcc.n	30de <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x7a>
    311a:	201f      	movs	r0, #31
    311c:	bd70      	pop	{r4, r5, r6, pc}
    311e:	0000      	movs	r0, r0
    3120:	b570      	push	{r4, r5, r6, lr}
    3122:	1c49      	adds	r1, r1, #1
    3124:	2300      	movs	r3, #0
    3126:	b2c9      	uxtb	r1, r1
    3128:	2401      	movs	r4, #1
    312a:	18c5      	adds	r5, r0, r3
    312c:	79aa      	ldrb	r2, [r5, #6]
    312e:	428a      	cmp	r2, r1
    3130:	d312      	bcc.n	3158 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf4>
    3132:	f895 5001 	ldrb.w	r5, [r5, #1]
    3136:	2200      	movs	r2, #0
    3138:	fa04 f602 	lsl.w	r6, r4, r2
    313c:	4235      	tst	r5, r6
    313e:	d001      	beq.n	3144 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xe0>
    3140:	1e49      	subs	r1, r1, #1
    3142:	b2c9      	uxtb	r1, r1
    3144:	b121      	cbz	r1, 3150 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xec>
    3146:	1c52      	adds	r2, r2, #1
    3148:	b2d2      	uxtb	r2, r2
    314a:	2a08      	cmp	r2, #8
    314c:	d3f4      	bcc.n	3138 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xd4>
    314e:	e005      	b.n	315c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf8>
    3150:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    3154:	b2c0      	uxtb	r0, r0
    3156:	bd70      	pop	{r4, r5, r6, pc}
    3158:	1a89      	subs	r1, r1, r2
    315a:	b2c9      	uxtb	r1, r1
    315c:	1c5b      	adds	r3, r3, #1
    315e:	b2db      	uxtb	r3, r3
    3160:	2b05      	cmp	r3, #5
    3162:	d3e2      	bcc.n	312a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xc6>
    3164:	219d      	movs	r1, #157	; 0x9d
    3166:	2046      	movs	r0, #70	; 0x46
    3168:	f7fe f91a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000316c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    316c:	7841      	ldrb	r1, [r0, #1]
    316e:	b141      	cbz	r1, 3182 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    3170:	78c0      	ldrb	r0, [r0, #3]
    3172:	282b      	cmp	r0, #43	; 0x2b
    3174:	d203      	bcs.n	317e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    3176:	4a04      	ldr	r2, [pc, #16]	; (3188 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    3178:	5c10      	ldrb	r0, [r2, r0]
    317a:	4288      	cmp	r0, r1
    317c:	d101      	bne.n	3182 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    317e:	2001      	movs	r0, #1
    3180:	4770      	bx	lr
    3182:	2000      	movs	r0, #0
    3184:	4770      	bx	lr
    3186:	0000      	.short	0x0000
    3188:	00010fee 	.word	0x00010fee

0000318c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    318c:	b510      	push	{r4, lr}
    318e:	2201      	movs	r2, #1
    3190:	70c1      	strb	r1, [r0, #3]
    3192:	292b      	cmp	r1, #43	; 0x2b
    3194:	d202      	bcs.n	319c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    3196:	4a06      	ldr	r2, [pc, #24]	; (31b0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    3198:	5c52      	ldrb	r2, [r2, r1]
    319a:	e006      	b.n	31aa <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    319c:	29ff      	cmp	r1, #255	; 0xff
    319e:	d004      	beq.n	31aa <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    31a0:	f240 4175 	movw	r1, #1141	; 0x475
    31a4:	202a      	movs	r0, #42	; 0x2a
    31a6:	f7fe f8fb 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31aa:	7042      	strb	r2, [r0, #1]
    31ac:	bd10      	pop	{r4, pc}
    31ae:	0000      	.short	0x0000
    31b0:	00010fee 	.word	0x00010fee

000031b4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    31b4:	4904      	ldr	r1, [pc, #16]	; (31c8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    31b6:	7c89      	ldrb	r1, [r1, #18]
    31b8:	0749      	lsls	r1, r1, #29
    31ba:	d400      	bmi.n	31be <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    31bc:	b108      	cbz	r0, 31c2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    31be:	2000      	movs	r0, #0
    31c0:	4770      	bx	lr
    31c2:	2001      	movs	r0, #1
    31c4:	4770      	bx	lr
    31c6:	0000      	.short	0x0000
    31c8:	20000f88 	.word	0x20000f88

000031cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    31cc:	4803      	ldr	r0, [pc, #12]	; (31dc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    31ce:	7c80      	ldrb	r0, [r0, #18]
    31d0:	0780      	lsls	r0, r0, #30
    31d2:	d401      	bmi.n	31d8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    31d4:	2001      	movs	r0, #1
    31d6:	4770      	bx	lr
    31d8:	2000      	movs	r0, #0
    31da:	4770      	bx	lr
    31dc:	20000f88 	.word	0x20000f88

000031e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    31e0:	4803      	ldr	r0, [pc, #12]	; (31f0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    31e2:	7c80      	ldrb	r0, [r0, #18]
    31e4:	07c0      	lsls	r0, r0, #31
    31e6:	d001      	beq.n	31ec <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    31e8:	2000      	movs	r0, #0
    31ea:	4770      	bx	lr
    31ec:	2001      	movs	r0, #1
    31ee:	4770      	bx	lr
    31f0:	20000f88 	.word	0x20000f88
    31f4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    31f8:	4688      	mov	r8, r1
    31fa:	4699      	mov	r9, r3
    31fc:	4615      	mov	r5, r2
    31fe:	4604      	mov	r4, r0
    3200:	4669      	mov	r1, sp
    3202:	f00a fd7f 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3206:	bbe0      	cbnz	r0, 3282 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    3208:	9e01      	ldr	r6, [sp, #4]
    320a:	2700      	movs	r7, #0
    320c:	3680      	adds	r6, #128	; 0x80
    320e:	b17d      	cbz	r5, 3230 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    3210:	4620      	mov	r0, r4
    3212:	f7fe fcd7 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3216:	0004      	movs	r4, r0
    3218:	d00e      	beq.n	3238 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    321a:	4629      	mov	r1, r5
    321c:	f00a f97b 	bl	d516 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    3220:	b118      	cbz	r0, 322a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    3222:	491b      	ldr	r1, [pc, #108]	; (3290 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    3224:	8849      	ldrh	r1, [r1, #2]
    3226:	42a9      	cmp	r1, r5
    3228:	d208      	bcs.n	323c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    322a:	2000      	movs	r0, #0
    322c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3230:	2001      	movs	r0, #1
    3232:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    3236:	e024      	b.n	3282 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    3238:	2167      	movs	r1, #103	; 0x67
    323a:	e025      	b.n	3288 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    323c:	4601      	mov	r1, r0
    323e:	aa02      	add	r2, sp, #8
    3240:	4620      	mov	r0, r4
    3242:	f00a f961 	bl	d508 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    3246:	9802      	ldr	r0, [sp, #8]
    3248:	8007      	strh	r7, [r0, #0]
    324a:	7087      	strb	r7, [r0, #2]
    324c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    3250:	b109      	cbz	r1, 3256 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    3252:	f04f 0802 	mov.w	r8, #2
    3256:	4641      	mov	r1, r8
    3258:	f00b f897 	bl	e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    325c:	9802      	ldr	r0, [sp, #8]
    325e:	462a      	mov	r2, r5
    3260:	4649      	mov	r1, r9
    3262:	1cc0      	adds	r0, r0, #3
    3264:	f00d fda4 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3268:	4620      	mov	r0, r4
    326a:	4629      	mov	r1, r5
    326c:	f00a f90a 	bl	d484 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    3270:	b148      	cbz	r0, 3286 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    3272:	4668      	mov	r0, sp
    3274:	f00b f8e4 	bl	e440 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    3278:	9801      	ldr	r0, [sp, #4]
    327a:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    327e:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    3282:	2001      	movs	r0, #1
    3284:	e7d2      	b.n	322c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    3286:	217c      	movs	r1, #124	; 0x7c
    3288:	202b      	movs	r0, #43	; 0x2b
    328a:	f7fe f889 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    328e:	0000      	.short	0x0000
    3290:	20000f88 	.word	0x20000f88

00003294 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    3294:	4809      	ldr	r0, [pc, #36]	; (32bc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    3296:	b082      	sub	sp, #8
    3298:	7a00      	ldrb	r0, [r0, #8]
    329a:	f88d 0000 	strb.w	r0, [sp]
    329e:	9800      	ldr	r0, [sp, #0]
    32a0:	9000      	str	r0, [sp, #0]
    32a2:	f89d 0000 	ldrb.w	r0, [sp]
    32a6:	2800      	cmp	r0, #0
    32a8:	d105      	bne.n	32b6 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    32aa:	2202      	movs	r2, #2
    32ac:	4904      	ldr	r1, [pc, #16]	; (32c0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    32ae:	4803      	ldr	r0, [pc, #12]	; (32bc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    32b0:	b002      	add	sp, #8
    32b2:	f00b b8e8 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    32b6:	b002      	add	sp, #8
    32b8:	4770      	bx	lr
    32ba:	0000      	.short	0x0000
    32bc:	20000fa0 	.word	0x20000fa0
    32c0:	0000e4cd 	.word	0x0000e4cd

000032c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    32c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32c8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 3464 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a0>
    32cc:	f8df a198 	ldr.w	sl, [pc, #408]	; 3468 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    32d0:	4683      	mov	fp, r0
    32d2:	f04f 0901 	mov.w	r9, #1
    32d6:	2600      	movs	r6, #0
    32d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    32dc:	7a00      	ldrb	r0, [r0, #8]
    32de:	f88d 0000 	strb.w	r0, [sp]
    32e2:	9800      	ldr	r0, [sp, #0]
    32e4:	9000      	str	r0, [sp, #0]
    32e6:	f89d 1000 	ldrb.w	r1, [sp]
    32ea:	292a      	cmp	r1, #42	; 0x2a
    32ec:	d106      	bne.n	32fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    32ee:	f89a 1013 	ldrb.w	r1, [sl, #19]
    32f2:	b119      	cbz	r1, 32fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    32f4:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    32f8:	2800      	cmp	r0, #0
    32fa:	d07d      	beq.n	33f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    32fc:	2700      	movs	r7, #0
    32fe:	f88d 6000 	strb.w	r6, [sp]
    3302:	4668      	mov	r0, sp
    3304:	f000 f912 	bl	352c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>
    3308:	f89d 1000 	ldrb.w	r1, [sp]
    330c:	2900      	cmp	r1, #0
    330e:	d1f8      	bne.n	3302 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    3310:	2800      	cmp	r0, #0
    3312:	d071      	beq.n	33f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    3314:	4604      	mov	r4, r0
    3316:	7a00      	ldrb	r0, [r0, #8]
    3318:	f88d 0000 	strb.w	r0, [sp]
    331c:	9800      	ldr	r0, [sp, #0]
    331e:	9000      	str	r0, [sp, #0]
    3320:	f89d 5000 	ldrb.w	r5, [sp]
    3324:	1ea8      	subs	r0, r5, #2
    3326:	2830      	cmp	r0, #48	; 0x30
    3328:	d267      	bcs.n	33fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    332a:	e8df f000 	tbb	[pc, r0]
    332e:	2718      	.short	0x2718
    3330:	85852185 	.word	0x85852185
    3334:	6f696f27 	.word	0x6f696f27
    3338:	6f2d6f6f 	.word	0x6f2d6f6f
    333c:	85852185 	.word	0x85852185
    3340:	85216f6f 	.word	0x85216f6f
    3344:	6f858585 	.word	0x6f858585
    3348:	6f858545 	.word	0x6f858545
    334c:	856f6f21 	.word	0x856f6f21
    3350:	8585216f 	.word	0x8585216f
    3354:	8575554f 	.word	0x8575554f
    3358:	85858585 	.word	0x85858585
    335c:	4f85      	.short	0x4f85
    335e:	6862      	ldr	r2, [r4, #4]
    3360:	b912      	cbnz	r2, 3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3362:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    3366:	e064      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3368:	4659      	mov	r1, fp
    336a:	4620      	mov	r0, r4
    336c:	4790      	blx	r2
    336e:	e03c      	b.n	33ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    3370:	6862      	ldr	r2, [r4, #4]
    3372:	2a00      	cmp	r2, #0
    3374:	d1f8      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3376:	f240 11bb 	movw	r1, #443	; 0x1bb
    337a:	e05a      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    337c:	6862      	ldr	r2, [r4, #4]
    337e:	2a00      	cmp	r2, #0
    3380:	d1f2      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3382:	f240 214b 	movw	r1, #587	; 0x24b
    3386:	e054      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3388:	6860      	ldr	r0, [r4, #4]
    338a:	465d      	mov	r5, fp
    338c:	b180      	cbz	r0, 33b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xec>
    338e:	8804      	ldrh	r4, [r0, #0]
    3390:	4620      	mov	r0, r4
    3392:	f7fe fc17 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3396:	b168      	cbz	r0, 33b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    3398:	706e      	strb	r6, [r5, #1]
    339a:	220d      	movs	r2, #13
    339c:	702a      	strb	r2, [r5, #0]
    339e:	80ec      	strh	r4, [r5, #6]
    33a0:	f8a5 9008 	strh.w	r9, [r5, #8]
    33a4:	4631      	mov	r1, r6
    33a6:	f885 9004 	strb.w	r9, [r5, #4]
    33aa:	f00a f94b 	bl	d644 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    33ae:	e057      	b.n	3460 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    33b0:	21ce      	movs	r1, #206	; 0xce
    33b2:	e03e      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33b4:	21ae      	movs	r1, #174	; 0xae
    33b6:	e03c      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33b8:	6862      	ldr	r2, [r4, #4]
    33ba:	b122      	cbz	r2, 33c6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x102>
    33bc:	4659      	mov	r1, fp
    33be:	4620      	mov	r0, r4
    33c0:	4790      	blx	r2
    33c2:	2701      	movs	r7, #1
    33c4:	e011      	b.n	33ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    33c6:	f240 2163 	movw	r1, #611	; 0x263
    33ca:	e032      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33cc:	6862      	ldr	r2, [r4, #4]
    33ce:	2a00      	cmp	r2, #0
    33d0:	d1ca      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    33d2:	f240 216f 	movw	r1, #623	; 0x26f
    33d6:	e02c      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33d8:	f88b 6001 	strb.w	r6, [fp, #1]
    33dc:	2116      	movs	r1, #22
    33de:	f88b 1000 	strb.w	r1, [fp]
    33e2:	f8d4 1009 	ldr.w	r1, [r4, #9]
    33e6:	f8cb 1004 	str.w	r1, [fp, #4]
    33ea:	7226      	strb	r6, [r4, #8]
    33ec:	2d21      	cmp	r5, #33	; 0x21
    33ee:	d026      	beq.n	343e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17a>
    33f0:	2d14      	cmp	r5, #20
    33f2:	d027      	beq.n	3444 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    33f4:	2d22      	cmp	r5, #34	; 0x22
    33f6:	e001      	b.n	33fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    33f8:	e017      	b.n	342a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    33fa:	e01d      	b.n	3438 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    33fc:	d029      	beq.n	3452 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    33fe:	e02d      	b.n	345c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    3400:	6862      	ldr	r2, [r4, #4]
    3402:	2a00      	cmp	r2, #0
    3404:	d1b0      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3406:	f240 2181 	movw	r1, #641	; 0x281
    340a:	e012      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    340c:	6862      	ldr	r2, [r4, #4]
    340e:	2a00      	cmp	r2, #0
    3410:	d1aa      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3412:	f240 2196 	movw	r1, #662	; 0x296
    3416:	e00c      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3418:	4814      	ldr	r0, [pc, #80]	; (346c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a8>)
    341a:	6802      	ldr	r2, [r0, #0]
    341c:	b122      	cbz	r2, 3428 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    341e:	6860      	ldr	r0, [r4, #4]
    3420:	b128      	cbz	r0, 342e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3422:	8800      	ldrh	r0, [r0, #0]
    3424:	4659      	mov	r1, fp
    3426:	4790      	blx	r2
    3428:	2002      	movs	r0, #2
    342a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    342e:	f240 219f 	movw	r1, #671	; 0x29f
    3432:	2010      	movs	r0, #16
    3434:	f7fd ffb4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3438:	f240 21bd 	movw	r1, #701	; 0x2bd
    343c:	e7f9      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    343e:	f7ff fec5 	bl	31cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    3442:	e008      	b.n	3456 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    3444:	f89b 000e 	ldrb.w	r0, [fp, #14]
    3448:	f000 0001 	and.w	r0, r0, #1
    344c:	f7ff feb2 	bl	31b4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    3450:	e001      	b.n	3456 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    3452:	f7ff fec5 	bl	31e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    3456:	2800      	cmp	r0, #0
    3458:	f47f af3e 	bne.w	32d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    345c:	2f00      	cmp	r7, #0
    345e:	d1fb      	bne.n	3458 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x194>
    3460:	2004      	movs	r0, #4
    3462:	e7e2      	b.n	342a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    3464:	20000fb4 	.word	0x20000fb4
    3468:	20000f88 	.word	0x20000f88
    346c:	200000b0 	.word	0x200000b0

00003470 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    3470:	4901      	ldr	r1, [pc, #4]	; (3478 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    3472:	7008      	strb	r0, [r1, #0]
    3474:	f000 b8b0 	b.w	35d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    3478:	2000036e 	.word	0x2000036e

0000347c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    347c:	4902      	ldr	r1, [pc, #8]	; (3488 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    347e:	4801      	ldr	r0, [pc, #4]	; (3484 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    3480:	6008      	str	r0, [r1, #0]
    3482:	4770      	bx	lr
    3484:	0000348d 	.word	0x0000348d
    3488:	200000b0 	.word	0x200000b0
    348c:	b538      	push	{r3, r4, r5, lr}
    348e:	000d      	movs	r5, r1
    3490:	d014      	beq.n	34bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    3492:	80a8      	strh	r0, [r5, #4]
    3494:	2100      	movs	r1, #0
    3496:	7269      	strb	r1, [r5, #9]
    3498:	f7fe fb7e 	bl	1b98 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    349c:	4604      	mov	r4, r0
    349e:	f00a f815 	bl	d4cc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    34a2:	b168      	cbz	r0, 34c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x44>
    34a4:	4601      	mov	r1, r0
    34a6:	466a      	mov	r2, sp
    34a8:	4620      	mov	r0, r4
    34aa:	f00a f82d 	bl	d508 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    34ae:	80e8      	strh	r0, [r5, #6]
    34b0:	b148      	cbz	r0, 34c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4a>
    34b2:	28fb      	cmp	r0, #251	; 0xfb
    34b4:	d90a      	bls.n	34cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x50>
    34b6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    34ba:	e032      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34bc:	21fc      	movs	r1, #252	; 0xfc
    34be:	e030      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34c0:	f240 1105 	movw	r1, #261	; 0x105
    34c4:	e02d      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34c6:	f44f 7185 	mov.w	r1, #266	; 0x10a
    34ca:	e02a      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34cc:	9800      	ldr	r0, [sp, #0]
    34ce:	f00a ff08 	bl	e2e2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    34d2:	2801      	cmp	r0, #1
    34d4:	d004      	beq.n	34e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    34d6:	2802      	cmp	r0, #2
    34d8:	d002      	beq.n	34e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    34da:	f44f 718e 	mov.w	r1, #284	; 0x11c
    34de:	e020      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34e0:	7228      	strb	r0, [r5, #8]
    34e2:	6828      	ldr	r0, [r5, #0]
    34e4:	b1a8      	cbz	r0, 3512 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    34e6:	9900      	ldr	r1, [sp, #0]
    34e8:	88ea      	ldrh	r2, [r5, #6]
    34ea:	1cc9      	adds	r1, r1, #3
    34ec:	f00d fc60 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    34f0:	4620      	mov	r0, r4
    34f2:	f009 ffb3 	bl	d45c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    34f6:	b178      	cbz	r0, 3518 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>
    34f8:	4620      	mov	r0, r4
    34fa:	2100      	movs	r1, #0
    34fc:	f00a f8a2 	bl	d644 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    3500:	b168      	cbz	r0, 351e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa2>
    3502:	4809      	ldr	r0, [pc, #36]	; (3528 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xac>)
    3504:	7cc1      	ldrb	r1, [r0, #19]
    3506:	2900      	cmp	r1, #0
    3508:	d002      	beq.n	3510 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x94>
    350a:	8a81      	ldrh	r1, [r0, #20]
    350c:	1e49      	subs	r1, r1, #1
    350e:	8281      	strh	r1, [r0, #20]
    3510:	bd38      	pop	{r3, r4, r5, pc}
    3512:	f240 1123 	movw	r1, #291	; 0x123
    3516:	e004      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3518:	f44f 7194 	mov.w	r1, #296	; 0x128
    351c:	e001      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    351e:	f240 112d 	movw	r1, #301	; 0x12d
    3522:	2010      	movs	r0, #16
    3524:	f7fd ff3c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3528:	20000f88 	.word	0x20000f88
    352c:	b538      	push	{r3, r4, r5, lr}
    352e:	4602      	mov	r2, r0
    3530:	4b11      	ldr	r3, [pc, #68]	; (3578 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>)
    3532:	2000      	movs	r0, #0
    3534:	7010      	strb	r0, [r2, #0]
    3536:	6858      	ldr	r0, [r3, #4]
    3538:	7a01      	ldrb	r1, [r0, #8]
    353a:	f88d 1000 	strb.w	r1, [sp]
    353e:	9900      	ldr	r1, [sp, #0]
    3540:	9100      	str	r1, [sp, #0]
    3542:	f89d 5000 	ldrb.w	r5, [sp]
    3546:	2401      	movs	r4, #1
    3548:	2d01      	cmp	r5, #1
    354a:	d006      	beq.n	355a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xde>
    354c:	f3ef 8110 	mrs	r1, PRIMASK
    3550:	b672      	cpsid	i
    3552:	6805      	ldr	r5, [r0, #0]
    3554:	605d      	str	r5, [r3, #4]
    3556:	b111      	cbz	r1, 355e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe2>
    3558:	e002      	b.n	3560 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe4>
    355a:	2000      	movs	r0, #0
    355c:	bd38      	pop	{r3, r4, r5, pc}
    355e:	b662      	cpsie	i
    3560:	7a01      	ldrb	r1, [r0, #8]
    3562:	f88d 1000 	strb.w	r1, [sp]
    3566:	9900      	ldr	r1, [sp, #0]
    3568:	9100      	str	r1, [sp, #0]
    356a:	f89d 3000 	ldrb.w	r3, [sp]
    356e:	2b00      	cmp	r3, #0
    3570:	d1f4      	bne.n	355c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe0>
    3572:	7014      	strb	r4, [r2, #0]
    3574:	bd38      	pop	{r3, r4, r5, pc}
    3576:	0000      	.short	0x0000
    3578:	20000fb4 	.word	0x20000fb4
    357c:	b538      	push	{r3, r4, r5, lr}
    357e:	b1d0      	cbz	r0, 35b6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13a>
    3580:	6041      	str	r1, [r0, #4]
    3582:	f100 0108 	add.w	r1, r0, #8
    3586:	700a      	strb	r2, [r1, #0]
    3588:	f3ef 8310 	mrs	r3, PRIMASK
    358c:	b672      	cpsid	i
    358e:	4c10      	ldr	r4, [pc, #64]	; (35d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x154>)
    3590:	6004      	str	r4, [r0, #0]
    3592:	1f21      	subs	r1, r4, #4
    3594:	684a      	ldr	r2, [r1, #4]
    3596:	b14a      	cbz	r2, 35ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    3598:	7a12      	ldrb	r2, [r2, #8]
    359a:	f88d 2000 	strb.w	r2, [sp]
    359e:	9a00      	ldr	r2, [sp, #0]
    35a0:	9200      	str	r2, [sp, #0]
    35a2:	f89d 5000 	ldrb.w	r5, [sp]
    35a6:	2d01      	cmp	r5, #1
    35a8:	d100      	bne.n	35ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    35aa:	600c      	str	r4, [r1, #0]
    35ac:	680a      	ldr	r2, [r1, #0]
    35ae:	6010      	str	r0, [r2, #0]
    35b0:	6008      	str	r0, [r1, #0]
    35b2:	b12b      	cbz	r3, 35c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    35b4:	e005      	b.n	35c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x146>
    35b6:	f240 21e2 	movw	r1, #738	; 0x2e2
    35ba:	2010      	movs	r0, #16
    35bc:	f7fd fef0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    35c0:	b662      	cpsie	i
    35c2:	4804      	ldr	r0, [pc, #16]	; (35d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    35c4:	7800      	ldrb	r0, [r0, #0]
    35c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    35ca:	f009 b83b 	b.w	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    35ce:	0000      	.short	0x0000
    35d0:	20000fb8 	.word	0x20000fb8
    35d4:	2000036e 	.word	0x2000036e
    35d8:	4808      	ldr	r0, [pc, #32]	; (35fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    35da:	b510      	push	{r4, lr}
    35dc:	2100      	movs	r1, #0
    35de:	6141      	str	r1, [r0, #20]
    35e0:	6181      	str	r1, [r0, #24]
    35e2:	61c1      	str	r1, [r0, #28]
    35e4:	6201      	str	r1, [r0, #32]
    35e6:	2212      	movs	r2, #18
    35e8:	f00d fc5c 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    35ec:	4803      	ldr	r0, [pc, #12]	; (35fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    35ee:	3014      	adds	r0, #20
    35f0:	2101      	movs	r1, #1
    35f2:	7301      	strb	r1, [r0, #12]
    35f4:	1d01      	adds	r1, r0, #4
    35f6:	6041      	str	r1, [r0, #4]
    35f8:	6001      	str	r1, [r0, #0]
    35fa:	bd10      	pop	{r4, pc}
    35fc:	20000fa0 	.word	0x20000fa0

00003600 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    3600:	b4f0      	push	{r4, r5, r6, r7}
    3602:	8150      	strh	r0, [r2, #10]
    3604:	890c      	ldrh	r4, [r1, #8]
    3606:	4613      	mov	r3, r2
    3608:	8194      	strh	r4, [r2, #12]
    360a:	898a      	ldrh	r2, [r1, #12]
    360c:	81da      	strh	r2, [r3, #14]
    360e:	8948      	ldrh	r0, [r1, #10]
    3610:	8218      	strh	r0, [r3, #16]
    3612:	89cd      	ldrh	r5, [r1, #14]
    3614:	825d      	strh	r5, [r3, #18]
    3616:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    3618:	42ae      	cmp	r6, r5
    361a:	d108      	bne.n	362e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    361c:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    361e:	4285      	cmp	r5, r0
    3620:	d105      	bne.n	362e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    3622:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    3624:	4295      	cmp	r5, r2
    3626:	d102      	bne.n	362e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    3628:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    362a:	42a2      	cmp	r2, r4
    362c:	d001      	beq.n	3632 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    362e:	2201      	movs	r2, #1
    3630:	e000      	b.n	3634 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    3632:	2200      	movs	r2, #0
    3634:	751a      	strb	r2, [r3, #20]
    3636:	8548      	strh	r0, [r1, #42]	; 0x2a
    3638:	8a58      	ldrh	r0, [r3, #18]
    363a:	85c8      	strh	r0, [r1, #46]	; 0x2e
    363c:	8998      	ldrh	r0, [r3, #12]
    363e:	8588      	strh	r0, [r1, #44]	; 0x2c
    3640:	89d8      	ldrh	r0, [r3, #14]
    3642:	8608      	strh	r0, [r1, #48]	; 0x30
    3644:	bcf0      	pop	{r4, r5, r6, r7}
    3646:	2214      	movs	r2, #20
    3648:	4901      	ldr	r1, [pc, #4]	; (3650 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    364a:	4618      	mov	r0, r3
    364c:	f00a bf2f 	b.w	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3650:	0000e68b 	.word	0x0000e68b

00003654 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    3654:	8150      	strh	r0, [r2, #10]
    3656:	8a88      	ldrh	r0, [r1, #20]
    3658:	8190      	strh	r0, [r2, #12]
    365a:	8ac8      	ldrh	r0, [r1, #22]
    365c:	81d0      	strh	r0, [r2, #14]
    365e:	8b08      	ldrh	r0, [r1, #24]
    3660:	8210      	strh	r0, [r2, #16]
    3662:	8b48      	ldrh	r0, [r1, #26]
    3664:	4613      	mov	r3, r2
    3666:	8250      	strh	r0, [r2, #18]
    3668:	2221      	movs	r2, #33	; 0x21
    366a:	4902      	ldr	r1, [pc, #8]	; (3674 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    366c:	4618      	mov	r0, r3
    366e:	f00a bf0a 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3672:	0000      	.short	0x0000
    3674:	0000e6c1 	.word	0x0000e6c1

00003678 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    3678:	b5f0      	push	{r4, r5, r6, r7, lr}
    367a:	f06f 021f 	mvn.w	r2, #31
    367e:	0c01      	lsrs	r1, r0, #16
    3680:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    3684:	251f      	movs	r5, #31
    3686:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    368a:	3854      	subs	r0, #84	; 0x54
    368c:	d00d      	beq.n	36aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    368e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    3692:	3855      	subs	r0, #85	; 0x55
    3694:	d009      	beq.n	36aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3696:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    369a:	38aa      	subs	r0, #170	; 0xaa
    369c:	d005      	beq.n	36aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    369e:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    36a2:	38aa      	subs	r0, #170	; 0xaa
    36a4:	d001      	beq.n	36aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    36a6:	2001      	movs	r0, #1
    36a8:	e000      	b.n	36ac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    36aa:	2000      	movs	r0, #0
    36ac:	2200      	movs	r2, #0
    36ae:	4613      	mov	r3, r2
    36b0:	ea4f 0402 	mov.w	r4, r2
    36b4:	ea82 0701 	eor.w	r7, r2, r1
    36b8:	43ff      	mvns	r7, r7
    36ba:	431f      	orrs	r7, r3
    36bc:	1c7f      	adds	r7, r7, #1
    36be:	d00f      	beq.n	36e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    36c0:	f006 0701 	and.w	r7, r6, #1
    36c4:	0852      	lsrs	r2, r2, #1
    36c6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    36ca:	f005 0701 	and.w	r7, r5, #1
    36ce:	085b      	lsrs	r3, r3, #1
    36d0:	0876      	lsrs	r6, r6, #1
    36d2:	086d      	lsrs	r5, r5, #1
    36d4:	1c64      	adds	r4, r4, #1
    36d6:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    36da:	2c16      	cmp	r4, #22
    36dc:	d3ea      	bcc.n	36b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    36de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36e0:	2000      	movs	r0, #0
    36e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    36e4:	b510      	push	{r4, lr}
    36e6:	4804      	ldr	r0, [pc, #16]	; (36f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    36e8:	f00b f84e 	bl	e788 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    36ec:	4802      	ldr	r0, [pc, #8]	; (36f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    36ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36f2:	3008      	adds	r0, #8
    36f4:	f00b b848 	b.w	e788 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    36f8:	200000b4 	.word	0x200000b4

000036fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    36fc:	4801      	ldr	r0, [pc, #4]	; (3704 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    36fe:	f000 b809 	b.w	3714 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3702:	0000      	.short	0x0000
    3704:	200000b4 	.word	0x200000b4

00003708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    3708:	4801      	ldr	r0, [pc, #4]	; (3710 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    370a:	f000 b803 	b.w	3714 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    370e:	0000      	.short	0x0000
    3710:	200000bc 	.word	0x200000bc
    3714:	b510      	push	{r4, lr}
    3716:	e9d0 2100 	ldrd	r2, r1, [r0]
    371a:	4b09      	ldr	r3, [pc, #36]	; (3740 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    371c:	4c09      	ldr	r4, [pc, #36]	; (3744 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    371e:	4353      	muls	r3, r2
    3720:	4354      	muls	r4, r2
    3722:	4051      	eors	r1, r2
    3724:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    3728:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    372c:	ea4f 41f1 	mov.w	r1, r1, ror #19
    3730:	e9c0 2100 	strd	r2, r1, [r0]
    3734:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    3738:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    373c:	4618      	mov	r0, r3
    373e:	bd10      	pop	{r4, pc}
    3740:	c6ef3760 	.word	0xc6ef3760
    3744:	9e3779bb 	.word	0x9e3779bb

00003748 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    3748:	b510      	push	{r4, lr}
    374a:	6840      	ldr	r0, [r0, #4]
    374c:	2200      	movs	r2, #0
    374e:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    3752:	3080      	adds	r0, #128	; 0x80
    3754:	1d09      	adds	r1, r1, #4
    3756:	07db      	lsls	r3, r3, #31
    3758:	d001      	beq.n	375e <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    375a:	2001      	movs	r0, #1
    375c:	bd10      	pop	{r4, pc}
    375e:	790c      	ldrb	r4, [r1, #4]
    3760:	680b      	ldr	r3, [r1, #0]
    3762:	4909      	ldr	r1, [pc, #36]	; (3788 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    3764:	400b      	ands	r3, r1
    3766:	f004 0107 	and.w	r1, r4, #7
    376a:	66c3      	str	r3, [r0, #108]	; 0x6c
    376c:	6701      	str	r1, [r0, #112]	; 0x70
    376e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    3772:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
    3776:	1c49      	adds	r1, r1, #1
    3778:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    377c:	68c1      	ldr	r1, [r0, #12]
    377e:	f041 0101 	orr.w	r1, r1, #1
    3782:	60c1      	str	r1, [r0, #12]
    3784:	2000      	movs	r0, #0
    3786:	bd10      	pop	{r4, pc}
    3788:	3704492f 	.word	0x3704492f

0000378c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    378c:	b510      	push	{r4, lr}
    378e:	1d04      	adds	r4, r0, #4
    3790:	f004 f8c8 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3794:	4a03      	ldr	r2, [pc, #12]	; (37a4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    3796:	f001 0107 	and.w	r1, r1, #7
    379a:	4010      	ands	r0, r2
    379c:	6020      	str	r0, [r4, #0]
    379e:	6061      	str	r1, [r4, #4]
    37a0:	bd10      	pop	{r4, pc}
    37a2:	0000      	.short	0x0000
    37a4:	3704492f 	.word	0x3704492f

000037a8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    37a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    37ac:	7803      	ldrb	r3, [r0, #0]
    37ae:	6840      	ldr	r0, [r0, #4]
    37b0:	1d0f      	adds	r7, r1, #4
    37b2:	f100 0580 	add.w	r5, r0, #128	; 0x80
    37b6:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    37ba:	4606      	mov	r6, r0
    37bc:	f04f 0800 	mov.w	r8, #0
    37c0:	7f6a      	ldrb	r2, [r5, #29]
    37c2:	2107      	movs	r1, #7
    37c4:	4628      	mov	r0, r5
    37c6:	f00a fac7 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    37ca:	b1b0      	cbz	r0, 37fa <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x52>
    37cc:	6838      	ldr	r0, [r7, #0]
    37ce:	4a15      	ldr	r2, [pc, #84]	; (3824 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7c>)
    37d0:	7939      	ldrb	r1, [r7, #4]
    37d2:	4010      	ands	r0, r2
    37d4:	f001 0107 	and.w	r1, r1, #7
    37d8:	66e8      	str	r0, [r5, #108]	; 0x6c
    37da:	6729      	str	r1, [r5, #112]	; 0x70
    37dc:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    37e0:	f885 801d 	strb.w	r8, [r5, #29]
    37e4:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    37e8:	4640      	mov	r0, r8
    37ea:	f88d 1000 	strb.w	r1, [sp]
    37ee:	9900      	ldr	r1, [sp, #0]
    37f0:	9100      	str	r1, [sp, #0]
    37f2:	f89d 1000 	ldrb.w	r1, [sp]
    37f6:	b991      	cbnz	r1, 381e <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x76>
    37f8:	e002      	b.n	3800 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    37fa:	2001      	movs	r0, #1
    37fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3800:	8831      	ldrh	r1, [r6, #0]
    3802:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    3806:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    380a:	6839      	ldr	r1, [r7, #0]
    380c:	66e1      	str	r1, [r4, #108]	; 0x6c
    380e:	6879      	ldr	r1, [r7, #4]
    3810:	6721      	str	r1, [r4, #112]	; 0x70
    3812:	2208      	movs	r2, #8
    3814:	4904      	ldr	r1, [pc, #16]	; (3828 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x80>)
    3816:	f104 0060 	add.w	r0, r4, #96	; 0x60
    381a:	f00a fe34 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    381e:	2000      	movs	r0, #0
    3820:	e7ec      	b.n	37fc <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x54>
    3822:	0000      	.short	0x0000
    3824:	3704492f 	.word	0x3704492f
    3828:	0000e8f5 	.word	0x0000e8f5

0000382c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    382c:	b570      	push	{r4, r5, r6, lr}
    382e:	1d0d      	adds	r5, r1, #4
    3830:	6844      	ldr	r4, [r0, #4]
    3832:	f004 f877 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3836:	4a06      	ldr	r2, [pc, #24]	; (3850 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    3838:	4010      	ands	r0, r2
    383a:	f001 0207 	and.w	r2, r1, #7
    383e:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    3842:	4001      	ands	r1, r0
    3844:	f361 0007 	bfi	r0, r1, #0, #8
    3848:	6028      	str	r0, [r5, #0]
    384a:	606a      	str	r2, [r5, #4]
    384c:	bd70      	pop	{r4, r5, r6, pc}
    384e:	0000      	.short	0x0000
    3850:	3704492f 	.word	0x3704492f

00003854 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    3854:	6841      	ldr	r1, [r0, #4]
    3856:	b082      	sub	sp, #8
    3858:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    385c:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    3860:	f88d 2000 	strb.w	r2, [sp]
    3864:	9a00      	ldr	r2, [sp, #0]
    3866:	9200      	str	r2, [sp, #0]
    3868:	f89d 2000 	ldrb.w	r2, [sp]
    386c:	2a00      	cmp	r2, #0
    386e:	d10b      	bne.n	3888 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    3870:	8809      	ldrh	r1, [r1, #0]
    3872:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    3876:	211a      	movs	r1, #26
    3878:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    387c:	2208      	movs	r2, #8
    387e:	4903      	ldr	r1, [pc, #12]	; (388c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    3880:	3060      	adds	r0, #96	; 0x60
    3882:	b002      	add	sp, #8
    3884:	f00a bdff 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3888:	b002      	add	sp, #8
    388a:	4770      	bx	lr
    388c:	0000e8f5 	.word	0x0000e8f5

00003890 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    3890:	b570      	push	{r4, r5, r6, lr}
    3892:	6844      	ldr	r4, [r0, #4]
    3894:	460d      	mov	r5, r1
    3896:	7803      	ldrb	r3, [r0, #0]
    3898:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    389c:	3480      	adds	r4, #128	; 0x80
    389e:	2600      	movs	r6, #0
    38a0:	2108      	movs	r1, #8
    38a2:	4620      	mov	r0, r4
    38a4:	f00a fa58 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    38a8:	b920      	cbnz	r0, 38b4 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    38aa:	7b20      	ldrb	r0, [r4, #12]
    38ac:	0780      	lsls	r0, r0, #30
    38ae:	d501      	bpl.n	38b4 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    38b0:	2001      	movs	r0, #1
    38b2:	bd70      	pop	{r4, r5, r6, pc}
    38b4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    38b8:	0780      	lsls	r0, r0, #30
    38ba:	d419      	bmi.n	38f0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    38bc:	4628      	mov	r0, r5
    38be:	f00a fd7e 	bl	e3be <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    38c2:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    38c6:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    38ca:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    38ce:	8868      	ldrh	r0, [r5, #2]
    38d0:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    38d4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    38d8:	f040 0002 	orr.w	r0, r0, #2
    38dc:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    38e0:	07c0      	lsls	r0, r0, #31
    38e2:	d009      	beq.n	38f8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    38e4:	2203      	movs	r2, #3
    38e6:	4911      	ldr	r1, [pc, #68]	; (392c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    38e8:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    38ec:	f00a fddf 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    38f0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    38f4:	07c0      	lsls	r0, r0, #31
    38f6:	d110      	bne.n	391a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    38f8:	68e0      	ldr	r0, [r4, #12]
    38fa:	0781      	lsls	r1, r0, #30
    38fc:	d503      	bpl.n	3906 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    38fe:	214f      	movs	r1, #79	; 0x4f
    3900:	2040      	movs	r0, #64	; 0x40
    3902:	f7fd fd4d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3906:	f040 0002 	orr.w	r0, r0, #2
    390a:	60e0      	str	r0, [r4, #12]
    390c:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    3910:	1c40      	adds	r0, r0, #1
    3912:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    3916:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    391a:	7f60      	ldrb	r0, [r4, #29]
    391c:	2801      	cmp	r0, #1
    391e:	d102      	bne.n	3926 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    3920:	7766      	strb	r6, [r4, #29]
    3922:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    3926:	2000      	movs	r0, #0
    3928:	bd70      	pop	{r4, r5, r6, pc}
    392a:	0000      	.short	0x0000
    392c:	0000e923 	.word	0x0000e923

00003930 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    3930:	4907      	ldr	r1, [pc, #28]	; (3950 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    3932:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3936:	1300      	asrs	r0, r0, #12
    3938:	7809      	ldrb	r1, [r1, #0]
    393a:	b240      	sxtb	r0, r0
    393c:	4249      	negs	r1, r1
    393e:	b249      	sxtb	r1, r1
    3940:	4408      	add	r0, r1
    3942:	f300 0007 	ssat	r0, #8, r0
    3946:	2800      	cmp	r0, #0
    3948:	dc00      	bgt.n	394c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    394a:	2000      	movs	r0, #0
    394c:	b2c0      	uxtb	r0, r0
    394e:	4770      	bx	lr
    3950:	200000c4 	.word	0x200000c4

00003954 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    3954:	4a04      	ldr	r2, [pc, #16]	; (3968 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    3956:	6892      	ldr	r2, [r2, #8]
    3958:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    395c:	434b      	muls	r3, r1
    395e:	4342      	muls	r2, r0
    3960:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3964:	4770      	bx	lr
    3966:	0000      	.short	0x0000
    3968:	200000c4 	.word	0x200000c4

0000396c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    396e:	6844      	ldr	r4, [r0, #4]
    3970:	4606      	mov	r6, r0
    3972:	f104 0580 	add.w	r5, r4, #128	; 0x80
    3976:	f000 f87f 	bl	3a78 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    397a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    397e:	2901      	cmp	r1, #1
    3980:	d11a      	bne.n	39b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3982:	2800      	cmp	r0, #0
    3984:	d018      	beq.n	39b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3986:	6870      	ldr	r0, [r6, #4]
    3988:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    398c:	f88d 1000 	strb.w	r1, [sp]
    3990:	9900      	ldr	r1, [sp, #0]
    3992:	9100      	str	r1, [sp, #0]
    3994:	f89d 1000 	ldrb.w	r1, [sp]
    3998:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    399c:	2900      	cmp	r1, #0
    399e:	d10b      	bne.n	39b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    39a0:	8821      	ldrh	r1, [r4, #0]
    39a2:	8141      	strh	r1, [r0, #10]
    39a4:	7e69      	ldrb	r1, [r5, #25]
    39a6:	7301      	strb	r1, [r0, #12]
    39a8:	7ea9      	ldrb	r1, [r5, #26]
    39aa:	7341      	strb	r1, [r0, #13]
    39ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    39b0:	221f      	movs	r2, #31
    39b2:	4902      	ldr	r1, [pc, #8]	; (39bc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    39b4:	f00a bd67 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    39b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39ba:	0000      	.short	0x0000
    39bc:	0000e9c5 	.word	0x0000e9c5
    39c0:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    39c4:	4a0d      	ldr	r2, [pc, #52]	; (39fc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    39c6:	b510      	push	{r4, lr}
    39c8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    39cc:	1309      	asrs	r1, r1, #12
    39ce:	1300      	asrs	r0, r0, #12
    39d0:	b24b      	sxtb	r3, r1
    39d2:	f992 4000 	ldrsb.w	r4, [r2]
    39d6:	4240      	negs	r0, r0
    39d8:	2100      	movs	r1, #0
    39da:	b240      	sxtb	r0, r0
    39dc:	42a3      	cmp	r3, r4
    39de:	da02      	bge.n	39e6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    39e0:	f992 1002 	ldrsb.w	r1, [r2, #2]
    39e4:	e005      	b.n	39f2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    39e6:	f992 4001 	ldrsb.w	r4, [r2, #1]
    39ea:	42a3      	cmp	r3, r4
    39ec:	dd04      	ble.n	39f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    39ee:	f992 1003 	ldrsb.w	r1, [r2, #3]
    39f2:	4408      	add	r0, r1
    39f4:	f300 0107 	ssat	r1, #8, r0
    39f8:	4608      	mov	r0, r1
    39fa:	bd10      	pop	{r4, pc}
    39fc:	200000c4 	.word	0x200000c4
    3a00:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3a04:	2200      	movs	r2, #0
    3a06:	704a      	strb	r2, [r1, #1]
    3a08:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3a0c:	700a      	strb	r2, [r1, #0]
    3a0e:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3a12:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3a16:	f00b fff0 	bl	f9fa <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3a1a:	4606      	mov	r6, r0
    3a1c:	68a0      	ldr	r0, [r4, #8]
    3a1e:	f7ff ffcf 	bl	39c0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3a22:	0007      	movs	r7, r0
    3a24:	d021      	beq.n	3a6a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3a26:	4620      	mov	r0, r4
    3a28:	f00a ffd4 	bl	e9d4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d01c      	beq.n	3a6a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3a30:	8828      	ldrh	r0, [r5, #0]
    3a32:	4669      	mov	r1, sp
    3a34:	f00a f966 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3a38:	b118      	cbz	r0, 3a42 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    3a3a:	2189      	movs	r1, #137	; 0x89
    3a3c:	207a      	movs	r0, #122	; 0x7a
    3a3e:	f7fd fcaf 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a42:	1c76      	adds	r6, r6, #1
    3a44:	b2f1      	uxtb	r1, r6
    3a46:	2302      	movs	r3, #2
    3a48:	463a      	mov	r2, r7
    3a4a:	4668      	mov	r0, sp
    3a4c:	f00b fff4 	bl	fa38 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    3a50:	2800      	cmp	r0, #0
    3a52:	d10a      	bne.n	3a6a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3a54:	4806      	ldr	r0, [pc, #24]	; (3a70 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    3a56:	4907      	ldr	r1, [pc, #28]	; (3a74 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    3a58:	7900      	ldrb	r0, [r0, #4]
    3a5a:	fba0 6501 	umull	r6, r5, r0, r1
    3a5e:	f007 fbe3 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3a62:	1980      	adds	r0, r0, r6
    3a64:	4169      	adcs	r1, r5
    3a66:	e9c4 0100 	strd	r0, r1, [r4]
    3a6a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3a6e:	0000      	.short	0x0000
    3a70:	200000c4 	.word	0x200000c4
    3a74:	000f4240 	.word	0x000f4240
    3a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a7c:	4607      	mov	r7, r0
    3a7e:	f7ff faf1 	bl	3064 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3a82:	687c      	ldr	r4, [r7, #4]
    3a84:	4605      	mov	r5, r0
    3a86:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    3a8a:	3480      	adds	r4, #128	; 0x80
    3a8c:	287f      	cmp	r0, #127	; 0x7f
    3a8e:	d03c      	beq.n	3b0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x72>
    3a90:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3a94:	687e      	ldr	r6, [r7, #4]
    3a96:	76a0      	strb	r0, [r4, #26]
    3a98:	4629      	mov	r1, r5
    3a9a:	68a0      	ldr	r0, [r4, #8]
    3a9c:	f7ff ff5a 	bl	3954 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3aa0:	60a0      	str	r0, [r4, #8]
    3aa2:	481b      	ldr	r0, [pc, #108]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3aa4:	7940      	ldrb	r0, [r0, #5]
    3aa6:	b190      	cbz	r0, 3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3aa8:	6878      	ldr	r0, [r7, #4]
    3aaa:	f100 0880 	add.w	r8, r0, #128	; 0x80
    3aae:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    3ab2:	f7ff ff85 	bl	39c0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3ab6:	b150      	cbz	r0, 3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3ab8:	4640      	mov	r0, r8
    3aba:	f00a ff8b 	bl	e9d4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3abe:	b130      	cbz	r0, 3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3ac0:	6878      	ldr	r0, [r7, #4]
    3ac2:	2231      	movs	r2, #49	; 0x31
    3ac4:	4913      	ldr	r1, [pc, #76]	; (3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
    3ac6:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    3aca:	f00a fcf0 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3ace:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3ad2:	2100      	movs	r1, #0
    3ad4:	1a28      	subs	r0, r5, r0
    3ad6:	d500      	bpl.n	3ada <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42>
    3ad8:	4240      	negs	r0, r0
    3ada:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    3ade:	4282      	cmp	r2, r0
    3ae0:	dc10      	bgt.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3ae2:	2aff      	cmp	r2, #255	; 0xff
    3ae4:	d00e      	beq.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3ae6:	7f20      	ldrb	r0, [r4, #28]
    3ae8:	1c40      	adds	r0, r0, #1
    3aea:	b2c0      	uxtb	r0, r0
    3aec:	7720      	strb	r0, [r4, #28]
    3aee:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3af2:	4290      	cmp	r0, r2
    3af4:	d802      	bhi.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    3af6:	7ee0      	ldrb	r0, [r4, #27]
    3af8:	287f      	cmp	r0, #127	; 0x7f
    3afa:	d103      	bne.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3afc:	2000      	movs	r0, #0
    3afe:	76e5      	strb	r5, [r4, #27]
    3b00:	7720      	strb	r0, [r4, #28]
    3b02:	2101      	movs	r1, #1
    3b04:	4608      	mov	r0, r1
    3b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b0a:	2000      	movs	r0, #0
    3b0c:	e7fb      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
    3b0e:	0000      	.short	0x0000
    3b10:	200000c4 	.word	0x200000c4
    3b14:	00003a01 	.word	0x00003a01

00003b18 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3b18:	b570      	push	{r4, r5, r6, lr}
    3b1a:	4604      	mov	r4, r0
    3b1c:	7c00      	ldrb	r0, [r0, #16]
    3b1e:	b300      	cbz	r0, 3b62 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3b20:	2802      	cmp	r0, #2
    3b22:	d01e      	beq.n	3b62 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3b24:	f05f 0001 	movs.w	r0, #1
    3b28:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3b2c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    3b30:	460d      	mov	r5, r1
    3b32:	b1c0      	cbz	r0, 3b66 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3b34:	7de0      	ldrb	r0, [r4, #23]
    3b36:	b1f0      	cbz	r0, 3b76 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3b38:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3b3c:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    3b40:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3b44:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3b48:	7c20      	ldrb	r0, [r4, #16]
    3b4a:	f00a ff6c 	bl	ea26 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    3b4e:	7620      	strb	r0, [r4, #24]
    3b50:	2008      	movs	r0, #8
    3b52:	7660      	strb	r0, [r4, #25]
    3b54:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3b58:	4629      	mov	r1, r5
    3b5a:	f00a ff50 	bl	e9fe <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    3b5e:	b9a8      	cbnz	r0, 3b8c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    3b60:	e00e      	b.n	3b80 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    3b62:	2000      	movs	r0, #0
    3b64:	e7e0      	b.n	3b28 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3b66:	2000      	movs	r0, #0
    3b68:	f7fe fab8 	bl	20dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3b6c:	2800      	cmp	r0, #0
    3b6e:	d1eb      	bne.n	3b48 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    3b70:	f240 41b9 	movw	r1, #1209	; 0x4b9
    3b74:	e001      	b.n	3b7a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3b76:	f240 41bd 	movw	r1, #1213	; 0x4bd
    3b7a:	202d      	movs	r0, #45	; 0x2d
    3b7c:	f7fd fc10 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b80:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3b84:	4629      	mov	r1, r5
    3b86:	f00a ff43 	bl	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    3b8a:	b100      	cbz	r0, 3b8e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3b8c:	2001      	movs	r0, #1
    3b8e:	76a0      	strb	r0, [r4, #26]
    3b90:	7e20      	ldrb	r0, [r4, #24]
    3b92:	b130      	cbz	r0, 3ba2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3b94:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3b98:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3b9c:	f00a f87e 	bl	dc9c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3ba0:	7660      	strb	r0, [r4, #25]
    3ba2:	f7ff f87d 	bl	2ca0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3ba6:	490c      	ldr	r1, [pc, #48]	; (3bd8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3ba8:	fba0 2301 	umull	r2, r3, r0, r1
    3bac:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3bb0:	f00b f8be 	bl	ed30 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    3bb4:	2100      	movs	r1, #0
    3bb6:	4620      	mov	r0, r4
    3bb8:	f00b f873 	bl	eca2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    3bbc:	2000      	movs	r0, #0
    3bbe:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3bc2:	78a0      	ldrb	r0, [r4, #2]
    3bc4:	0740      	lsls	r0, r0, #29
    3bc6:	d505      	bpl.n	3bd4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3bc8:	4620      	mov	r0, r4
    3bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3bce:	2100      	movs	r1, #0
    3bd0:	f000 bdd0 	b.w	4774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66c>
    3bd4:	bd70      	pop	{r4, r5, r6, pc}
    3bd6:	0000      	.short	0x0000
    3bd8:	000f4240 	.word	0x000f4240

00003bdc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3bdc:	b530      	push	{r4, r5, lr}
    3bde:	460c      	mov	r4, r1
    3be0:	b08d      	sub	sp, #52	; 0x34
    3be2:	4605      	mov	r5, r0
    3be4:	4601      	mov	r1, r0
    3be6:	2224      	movs	r2, #36	; 0x24
    3be8:	a802      	add	r0, sp, #8
    3bea:	f00d f8e1 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3bee:	a80b      	add	r0, sp, #44	; 0x2c
    3bf0:	f00b f8fb 	bl	edea <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3bf4:	7aa0      	ldrb	r0, [r4, #10]
    3bf6:	f88d 0018 	strb.w	r0, [sp, #24]
    3bfa:	7820      	ldrb	r0, [r4, #0]
    3bfc:	f88d 0008 	strb.w	r0, [sp, #8]
    3c00:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3c04:	f8ad 0000 	strh.w	r0, [sp]
    3c08:	f89d 0000 	ldrb.w	r0, [sp]
    3c0c:	f000 0101 	and.w	r1, r0, #1
    3c10:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3c14:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3c18:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3c1c:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3c20:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3c24:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3c28:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3c2c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3c30:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3c34:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3c38:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3c3c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3c40:	f8ad 000a 	strh.w	r0, [sp, #10]
    3c44:	7d20      	ldrb	r0, [r4, #20]
    3c46:	2801      	cmp	r0, #1
    3c48:	d006      	beq.n	3c58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3c4a:	2802      	cmp	r0, #2
    3c4c:	d004      	beq.n	3c58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3c4e:	f240 21ea 	movw	r1, #746	; 0x2ea
    3c52:	2006      	movs	r0, #6
    3c54:	f7fd fba4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c58:	f88d 000c 	strb.w	r0, [sp, #12]
    3c5c:	7a61      	ldrb	r1, [r4, #9]
    3c5e:	a80b      	add	r0, sp, #44	; 0x2c
    3c60:	f00b f8aa 	bl	edb8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3c64:	7d20      	ldrb	r0, [r4, #20]
    3c66:	2101      	movs	r1, #1
    3c68:	2802      	cmp	r0, #2
    3c6a:	d102      	bne.n	3c72 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3c6c:	7d60      	ldrb	r0, [r4, #21]
    3c6e:	1c40      	adds	r0, r0, #1
    3c70:	b2c1      	uxtb	r1, r0
    3c72:	7ea0      	ldrb	r0, [r4, #26]
    3c74:	1c40      	adds	r0, r0, #1
    3c76:	b2c2      	uxtb	r2, r0
    3c78:	a80b      	add	r0, sp, #44	; 0x2c
    3c7a:	f00b f864 	bl	ed46 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    3c7e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3c82:	0700      	lsls	r0, r0, #28
    3c84:	d501      	bpl.n	3c8a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3c86:	2000      	movs	r0, #0
    3c88:	e020      	b.n	3ccc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3c8a:	a80b      	add	r0, sp, #44	; 0x2c
    3c8c:	f00b f86d 	bl	ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3c90:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3c94:	2228      	movs	r2, #40	; 0x28
    3c96:	f000 fe11 	bl	48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3c9a:	f240 2171 	movw	r1, #625	; 0x271
    3c9e:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    3ca2:	fbb0 f0f1 	udiv	r0, r0, r1
    3ca6:	4348      	muls	r0, r1
    3ca8:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3cac:	f240 2371 	movw	r3, #625	; 0x271
    3cb0:	0a0a      	lsrs	r2, r1, #8
    3cb2:	f240 2171 	movw	r1, #625	; 0x271
    3cb6:	434a      	muls	r2, r1
    3cb8:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3cbc:	0a09      	lsrs	r1, r1, #8
    3cbe:	4359      	muls	r1, r3
    3cc0:	4290      	cmp	r0, r2
    3cc2:	d801      	bhi.n	3cc8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    3cc4:	9204      	str	r2, [sp, #16]
    3cc6:	e004      	b.n	3cd2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3cc8:	4288      	cmp	r0, r1
    3cca:	d801      	bhi.n	3cd0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3ccc:	9004      	str	r0, [sp, #16]
    3cce:	e000      	b.n	3cd2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3cd0:	9104      	str	r1, [sp, #16]
    3cd2:	7ca0      	ldrb	r0, [r4, #18]
    3cd4:	f88d 0017 	strb.w	r0, [sp, #23]
    3cd8:	7e20      	ldrb	r0, [r4, #24]
    3cda:	2801      	cmp	r0, #1
    3cdc:	d000      	beq.n	3ce0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    3cde:	2000      	movs	r0, #0
    3ce0:	f88d 0014 	strb.w	r0, [sp, #20]
    3ce4:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3ce6:	f009 fe41 	bl	d96c <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3cea:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3cec:	f009 fee6 	bl	dabc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    3cf0:	2224      	movs	r2, #36	; 0x24
    3cf2:	a902      	add	r1, sp, #8
    3cf4:	4628      	mov	r0, r5
    3cf6:	f00d f85b 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3cfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3cfc:	62a8      	str	r0, [r5, #40]	; 0x28
    3cfe:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    3d02:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3d04:	7ae0      	ldrb	r0, [r4, #11]
    3d06:	b168      	cbz	r0, 3d24 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3d08:	2802      	cmp	r0, #2
    3d0a:	d00b      	beq.n	3d24 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3d0c:	f05f 0001 	movs.w	r0, #1
    3d10:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3d14:	68e0      	ldr	r0, [r4, #12]
    3d16:	65a8      	str	r0, [r5, #88]	; 0x58
    3d18:	8a20      	ldrh	r0, [r4, #16]
    3d1a:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    3d1e:	b00d      	add	sp, #52	; 0x34
    3d20:	2000      	movs	r0, #0
    3d22:	bd30      	pop	{r4, r5, pc}
    3d24:	2000      	movs	r0, #0
    3d26:	e7f3      	b.n	3d10 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003d28 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3d28:	4a0a      	ldr	r2, [pc, #40]	; (3d54 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3d2a:	b510      	push	{r4, lr}
    3d2c:	2100      	movs	r1, #0
    3d2e:	7011      	strb	r1, [r2, #0]
    3d30:	4c09      	ldr	r4, [pc, #36]	; (3d58 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    3d32:	6060      	str	r0, [r4, #4]
    3d34:	f000 f822 	bl	3d7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3d38:	b110      	cbz	r0, 3d40 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3d3a:	f240 312d 	movw	r1, #813	; 0x32d
    3d3e:	e004      	b.n	3d4a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3d40:	68a0      	ldr	r0, [r4, #8]
    3d42:	2800      	cmp	r0, #0
    3d44:	d104      	bne.n	3d50 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3d46:	f44f 714c 	mov.w	r1, #816	; 0x330
    3d4a:	202d      	movs	r0, #45	; 0x2d
    3d4c:	f7fd fb28 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d50:	bd10      	pop	{r4, pc}
    3d52:	0000      	.short	0x0000
    3d54:	20000fc4 	.word	0x20000fc4
    3d58:	200000d0 	.word	0x200000d0

00003d5c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3d5c:	4902      	ldr	r1, [pc, #8]	; (3d68 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    3d5e:	4801      	ldr	r0, [pc, #4]	; (3d64 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3d60:	6088      	str	r0, [r1, #8]
    3d62:	4770      	bx	lr
    3d64:	000048a4 	.word	0x000048a4
    3d68:	200000d0 	.word	0x200000d0

00003d6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3d6c:	4902      	ldr	r1, [pc, #8]	; (3d78 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    3d6e:	6008      	str	r0, [r1, #0]
    3d70:	6889      	ldr	r1, [r1, #8]
    3d72:	6809      	ldr	r1, [r1, #0]
    3d74:	4708      	bx	r1
    3d76:	0000      	.short	0x0000
    3d78:	200000d0 	.word	0x200000d0

00003d7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3d7c:	4808      	ldr	r0, [pc, #32]	; (3da0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d7e:	b510      	push	{r4, lr}
    3d80:	7800      	ldrb	r0, [r0, #0]
    3d82:	b110      	cbz	r0, 3d8a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3d84:	240c      	movs	r4, #12
    3d86:	4620      	mov	r0, r4
    3d88:	bd10      	pop	{r4, pc}
    3d8a:	2400      	movs	r4, #0
    3d8c:	2218      	movs	r2, #24
    3d8e:	4621      	mov	r1, r4
    3d90:	4803      	ldr	r0, [pc, #12]	; (3da0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d92:	f00d f887 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d96:	f003 ffe7 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3d9a:	f003 fe0b 	bl	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3d9e:	e7f2      	b.n	3d86 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    3da0:	20000fc4 	.word	0x20000fc4

00003da4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3da4:	4904      	ldr	r1, [pc, #16]	; (3db8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3da6:	b510      	push	{r4, lr}
    3da8:	7809      	ldrb	r1, [r1, #0]
    3daa:	2901      	cmp	r1, #1
    3dac:	d101      	bne.n	3db2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    3dae:	f000 fbb5 	bl	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3db2:	2000      	movs	r0, #0
    3db4:	bd10      	pop	{r4, pc}
    3db6:	0000      	.short	0x0000
    3db8:	20000fc4 	.word	0x20000fc4

00003dbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    3dbc:	4902      	ldr	r1, [pc, #8]	; (3dc8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    3dbe:	4801      	ldr	r0, [pc, #4]	; (3dc4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    3dc0:	6008      	str	r0, [r1, #0]
    3dc2:	4770      	bx	lr
    3dc4:	00004649 	.word	0x00004649
    3dc8:	200000dc 	.word	0x200000dc

00003dcc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3dcc:	b510      	push	{r4, lr}
    3dce:	4604      	mov	r4, r0
    3dd0:	7880      	ldrb	r0, [r0, #2]
    3dd2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3dd6:	b158      	cbz	r0, 3df0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3dd8:	233c      	movs	r3, #60	; 0x3c
    3dda:	22ff      	movs	r2, #255	; 0xff
    3ddc:	4620      	mov	r0, r4
    3dde:	69e1      	ldr	r1, [r4, #28]
    3de0:	f000 fbc2 	bl	4568 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    3de4:	2211      	movs	r2, #17
    3de6:	4904      	ldr	r1, [pc, #16]	; (3df8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3de8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3dec:	f00a fb4b 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3df0:	2001      	movs	r0, #1
    3df2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3df6:	bd10      	pop	{r4, pc}
    3df8:	0000ec3b 	.word	0x0000ec3b
    3dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e00:	000f      	movs	r7, r1
    3e02:	4604      	mov	r4, r0
    3e04:	d023      	beq.n	3e4e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3e06:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3e0a:	4605      	mov	r5, r0
    3e0c:	f00a ffd6 	bl	edbc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3e10:	b9b0      	cbnz	r0, 3e40 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    3e12:	78a0      	ldrb	r0, [r4, #2]
    3e14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3e18:	b350      	cbz	r0, 3e70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3e1a:	4628      	mov	r0, r5
    3e1c:	f00a ffa5 	bl	ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3e20:	4606      	mov	r6, r0
    3e22:	4628      	mov	r0, r5
    3e24:	f00a ffca 	bl	edbc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3e28:	1a30      	subs	r0, r6, r0
    3e2a:	b2c0      	uxtb	r0, r0
    3e2c:	f00b f81b 	bl	ee66 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3e30:	4601      	mov	r1, r0
    3e32:	4835      	ldr	r0, [pc, #212]	; (3f08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3e34:	6842      	ldr	r2, [r0, #4]
    3e36:	4411      	add	r1, r2
    3e38:	6041      	str	r1, [r0, #4]
    3e3a:	4628      	mov	r0, r5
    3e3c:	f00a ffdc 	bl	edf8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3e40:	4628      	mov	r0, r5
    3e42:	f00a ff9e 	bl	ed82 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3e46:	4601      	mov	r1, r0
    3e48:	4620      	mov	r0, r4
    3e4a:	f00a ff66 	bl	ed1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    3e4e:	4d2f      	ldr	r5, [pc, #188]	; (3f0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    3e50:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3e54:	2100      	movs	r1, #0
    3e56:	6868      	ldr	r0, [r5, #4]
    3e58:	8001      	strh	r1, [r0, #0]
    3e5a:	f00a fec4 	bl	ebe6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e5e:	8860      	ldrh	r0, [r4, #2]
    3e60:	2813      	cmp	r0, #19
    3e62:	d013      	beq.n	3e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3e64:	dc09      	bgt.n	3e7a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3e66:	2810      	cmp	r0, #16
    3e68:	d036      	beq.n	3ed8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3e6a:	2812      	cmp	r0, #18
    3e6c:	d109      	bne.n	3e82 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    3e6e:	e031      	b.n	3ed4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    3e70:	4620      	mov	r0, r4
    3e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e76:	f000 bb51 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3e7a:	2815      	cmp	r0, #21
    3e7c:	d00f      	beq.n	3e9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e7e:	281d      	cmp	r0, #29
    3e80:	d00d      	beq.n	3e9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e82:	f240 6172 	movw	r1, #1650	; 0x672
    3e86:	202d      	movs	r0, #45	; 0x2d
    3e88:	f7fd fa8a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e8c:	2100      	movs	r1, #0
    3e8e:	6868      	ldr	r0, [r5, #4]
    3e90:	f00a f980 	bl	e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e94:	2101      	movs	r1, #1
    3e96:	6868      	ldr	r0, [r5, #4]
    3e98:	f00a fea5 	bl	ebe6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e9c:	e020      	b.n	3ee0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3e9e:	2101      	movs	r1, #1
    3ea0:	6868      	ldr	r0, [r5, #4]
    3ea2:	f00a f977 	bl	e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3ea6:	2101      	movs	r1, #1
    3ea8:	6868      	ldr	r0, [r5, #4]
    3eaa:	f00a fe9c 	bl	ebe6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3eae:	b136      	cbz	r6, 3ebe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    3eb0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3eb4:	6868      	ldr	r0, [r5, #4]
    3eb6:	f00a f988 	bl	e1ca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3eba:	2101      	movs	r1, #1
    3ebc:	e006      	b.n	3ecc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    3ebe:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3ec2:	6868      	ldr	r0, [r5, #4]
    3ec4:	f00a f981 	bl	e1ca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3ec8:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3ecc:	6868      	ldr	r0, [r5, #4]
    3ece:	f00a f982 	bl	e1d6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3ed2:	e005      	b.n	3ee0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3ed4:	2106      	movs	r1, #6
    3ed6:	e000      	b.n	3eda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3ed8:	2102      	movs	r1, #2
    3eda:	6868      	ldr	r0, [r5, #4]
    3edc:	f00a f95a 	bl	e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3ee0:	4620      	mov	r0, r4
    3ee2:	f000 fcbd 	bl	4860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x758>
    3ee6:	8860      	ldrh	r0, [r4, #2]
    3ee8:	281d      	cmp	r0, #29
    3eea:	d007      	beq.n	3efc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3eec:	2815      	cmp	r0, #21
    3eee:	d005      	beq.n	3efc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3ef0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3ef4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3ef6:	6868      	ldr	r0, [r5, #4]
    3ef8:	f00a f93c 	bl	e174 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3efc:	4639      	mov	r1, r7
    3efe:	4620      	mov	r0, r4
    3f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f04:	f000 b9f6 	b.w	42f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    3f08:	20000fc4 	.word	0x20000fc4
    3f0c:	200000d0 	.word	0x200000d0
    3f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f14:	4d2f      	ldr	r5, [pc, #188]	; (3fd4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3f16:	4680      	mov	r8, r0
    3f18:	7828      	ldrb	r0, [r5, #0]
    3f1a:	2802      	cmp	r0, #2
    3f1c:	d005      	beq.n	3f2a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3f1e:	7828      	ldrb	r0, [r5, #0]
    3f20:	2803      	cmp	r0, #3
    3f22:	d002      	beq.n	3f2a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3f24:	f640 512d 	movw	r1, #3373	; 0xd2d
    3f28:	e02b      	b.n	3f82 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3f2a:	4c2b      	ldr	r4, [pc, #172]	; (3fd8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3f2c:	6826      	ldr	r6, [r4, #0]
    3f2e:	7b30      	ldrb	r0, [r6, #12]
    3f30:	b118      	cbz	r0, 3f3a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    3f32:	f7ff f897 	bl	3064 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3f36:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3f3a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3f3e:	2700      	movs	r7, #0
    3f40:	f1b8 0f00 	cmp.w	r8, #0
    3f44:	f89c 0000 	ldrb.w	r0, [ip]
    3f48:	f000 060f 	and.w	r6, r0, #15
    3f4c:	d027      	beq.n	3f9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f4e:	6821      	ldr	r1, [r4, #0]
    3f50:	09c0      	lsrs	r0, r0, #7
    3f52:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3f56:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3f5a:	f10c 0109 	add.w	r1, ip, #9
    3f5e:	f009 fe05 	bl	db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3f62:	b1e0      	cbz	r0, 3f9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f64:	4639      	mov	r1, r7
    3f66:	6860      	ldr	r0, [r4, #4]
    3f68:	f00a f8f4 	bl	e154 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3f6c:	b1b8      	cbz	r0, 3f9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f6e:	782a      	ldrb	r2, [r5, #0]
    3f70:	6820      	ldr	r0, [r4, #0]
    3f72:	4631      	mov	r1, r6
    3f74:	2a02      	cmp	r2, #2
    3f76:	d007      	beq.n	3f88 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f78:	782a      	ldrb	r2, [r5, #0]
    3f7a:	2a03      	cmp	r2, #3
    3f7c:	d004      	beq.n	3f88 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f7e:	f640 5106 	movw	r1, #3334	; 0xd06
    3f82:	202d      	movs	r0, #45	; 0x2d
    3f84:	f7fd fa0c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f88:	68a2      	ldr	r2, [r4, #8]
    3f8a:	782b      	ldrb	r3, [r5, #0]
    3f8c:	6952      	ldr	r2, [r2, #20]
    3f8e:	f06f 0607 	mvn.w	r6, #7
    3f92:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3f96:	58d2      	ldr	r2, [r2, r3]
    3f98:	4790      	blx	r2
    3f9a:	4606      	mov	r6, r0
    3f9c:	e000      	b.n	3fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    3f9e:	2601      	movs	r6, #1
    3fa0:	7ba8      	ldrb	r0, [r5, #14]
    3fa2:	b118      	cbz	r0, 3fac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3fa4:	f003 fee0 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3fa8:	f003 fd04 	bl	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3fac:	2e00      	cmp	r6, #0
    3fae:	d00f      	beq.n	3fd0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    3fb0:	6820      	ldr	r0, [r4, #0]
    3fb2:	f00a ff6e 	bl	ee92 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3fb6:	b130      	cbz	r0, 3fc6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    3fb8:	f003 fefe 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3fbc:	68a0      	ldr	r0, [r4, #8]
    3fbe:	6880      	ldr	r0, [r0, #8]
    3fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3fc4:	4700      	bx	r0
    3fc6:	6820      	ldr	r0, [r4, #0]
    3fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3fcc:	f000 baa6 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fd4:	20000fc4 	.word	0x20000fc4
    3fd8:	200000d0 	.word	0x200000d0
    3fdc:	b510      	push	{r4, lr}
    3fde:	2903      	cmp	r1, #3
    3fe0:	d002      	beq.n	3fe8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    3fe2:	2905      	cmp	r1, #5
    3fe4:	d10a      	bne.n	3ffc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3fe6:	e002      	b.n	3fee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    3fe8:	f000 fb92 	bl	4710 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x608>
    3fec:	e003      	b.n	3ff6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    3fee:	4904      	ldr	r1, [pc, #16]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3ff0:	6809      	ldr	r1, [r1, #0]
    3ff2:	b109      	cbz	r1, 3ff8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3ff4:	4788      	blx	r1
    3ff6:	b108      	cbz	r0, 3ffc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3ff8:	2000      	movs	r0, #0
    3ffa:	bd10      	pop	{r4, pc}
    3ffc:	2001      	movs	r0, #1
    3ffe:	bd10      	pop	{r4, pc}
    4000:	200000dc 	.word	0x200000dc
    4004:	4a09      	ldr	r2, [pc, #36]	; (402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>)
    4006:	0003      	movs	r3, r0
    4008:	6810      	ldr	r0, [r2, #0]
    400a:	d001      	beq.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400c:	f000 ba86 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    4010:	2900      	cmp	r1, #0
    4012:	d009      	beq.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4014:	6891      	ldr	r1, [r2, #8]
    4016:	4a06      	ldr	r2, [pc, #24]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    4018:	6909      	ldr	r1, [r1, #16]
    401a:	7812      	ldrb	r2, [r2, #0]
    401c:	f06f 030f 	mvn.w	r3, #15
    4020:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4024:	5889      	ldr	r1, [r1, r2]
    4026:	4708      	bx	r1
    4028:	4770      	bx	lr
    402a:	0000      	.short	0x0000
    402c:	200000d0 	.word	0x200000d0
    4030:	20000fc4 	.word	0x20000fc4
    4034:	b570      	push	{r4, r5, r6, lr}
    4036:	4604      	mov	r4, r0
    4038:	8840      	ldrh	r0, [r0, #2]
    403a:	2810      	cmp	r0, #16
    403c:	d019      	beq.n	4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
    403e:	4d10      	ldr	r5, [pc, #64]	; (4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>)
    4040:	7ba8      	ldrb	r0, [r5, #14]
    4042:	b120      	cbz	r0, 404e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e>
    4044:	f003 fcd6 	bl	79f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4048:	2040      	movs	r0, #64	; 0x40
    404a:	f003 fe9b 	bl	7d84 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    404e:	480d      	ldr	r0, [pc, #52]	; (4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>)
    4050:	6840      	ldr	r0, [r0, #4]
    4052:	f004 f91d 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4056:	78a0      	ldrb	r0, [r4, #2]
    4058:	0740      	lsls	r0, r0, #29
    405a:	d404      	bmi.n	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>
    405c:	2100      	movs	r1, #0
    405e:	7922      	ldrb	r2, [r4, #4]
    4060:	4608      	mov	r0, r1
    4062:	f004 f99d 	bl	83a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4066:	2000      	movs	r0, #0
    4068:	f003 ffc8 	bl	7ffc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    406c:	2002      	movs	r0, #2
    406e:	7028      	strb	r0, [r5, #0]
    4070:	bd70      	pop	{r4, r5, r6, pc}
    4072:	4620      	mov	r0, r4
    4074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4078:	2101      	movs	r1, #1
    407a:	f7ff bebf 	b.w	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    407e:	0000      	.short	0x0000
    4080:	20000fc4 	.word	0x20000fc4
    4084:	200000d0 	.word	0x200000d0
    4088:	b510      	push	{r4, lr}
    408a:	4c12      	ldr	r4, [pc, #72]	; (40d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd4>)
    408c:	6820      	ldr	r0, [r4, #0]
    408e:	f000 f825 	bl	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    4092:	6820      	ldr	r0, [r4, #0]
    4094:	f00a fefd 	bl	ee92 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    4098:	2800      	cmp	r0, #0
    409a:	6820      	ldr	r0, [r4, #0]
    409c:	d00b      	beq.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
    409e:	490e      	ldr	r1, [pc, #56]	; (40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>)
    40a0:	780a      	ldrb	r2, [r1, #0]
    40a2:	2a02      	cmp	r2, #2
    40a4:	d00b      	beq.n	40be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbe>
    40a6:	780a      	ldrb	r2, [r1, #0]
    40a8:	2a03      	cmp	r2, #3
    40aa:	d008      	beq.n	40be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbe>
    40ac:	f640 4137 	movw	r1, #3127	; 0xc37
    40b0:	202d      	movs	r0, #45	; 0x2d
    40b2:	f7fd f975 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40ba:	f000 ba2f 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    40be:	68a2      	ldr	r2, [r4, #8]
    40c0:	7809      	ldrb	r1, [r1, #0]
    40c2:	68d2      	ldr	r2, [r2, #12]
    40c4:	f06f 0307 	mvn.w	r3, #7
    40c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    40cc:	5851      	ldr	r1, [r2, r1]
    40ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40d2:	4708      	bx	r1
    40d4:	200000d0 	.word	0x200000d0
    40d8:	20000fc4 	.word	0x20000fc4
    40dc:	b510      	push	{r4, lr}
    40de:	7b01      	ldrb	r1, [r0, #12]
    40e0:	b121      	cbz	r1, 40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
    40e2:	4604      	mov	r4, r0
    40e4:	f7fe ffbe 	bl	3064 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    40e8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    40ec:	4805      	ldr	r0, [pc, #20]	; (4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>)
    40ee:	7b80      	ldrb	r0, [r0, #14]
    40f0:	2800      	cmp	r0, #0
    40f2:	d005      	beq.n	4100 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x100>
    40f4:	f003 fe38 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    40f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40fc:	f003 bc5a 	b.w	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4100:	bd10      	pop	{r4, pc}
    4102:	0000      	.short	0x0000
    4104:	20000fc4 	.word	0x20000fc4

00004108 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    4108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    410c:	4d5d      	ldr	r5, [pc, #372]	; (4284 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    410e:	4604      	mov	r4, r0
    4110:	b086      	sub	sp, #24
    4112:	7828      	ldrb	r0, [r5, #0]
    4114:	2800      	cmp	r0, #0
    4116:	d14e      	bne.n	41b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    4118:	7820      	ldrb	r0, [r4, #0]
    411a:	28ff      	cmp	r0, #255	; 0xff
    411c:	d04b      	beq.n	41b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    411e:	f04f 0800 	mov.w	r8, #0
    4122:	f8a5 800c 	strh.w	r8, [r5, #12]
    4126:	f8c5 8004 	str.w	r8, [r5, #4]
    412a:	f885 8001 	strb.w	r8, [r5, #1]
    412e:	f885 8002 	strb.w	r8, [r5, #2]
    4132:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    4136:	4b54      	ldr	r3, [pc, #336]	; (4288 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    4138:	4e54      	ldr	r6, [pc, #336]	; (428c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    413a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    413c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    4140:	68b0      	ldr	r0, [r6, #8]
    4142:	6840      	ldr	r0, [r0, #4]
    4144:	9003      	str	r0, [sp, #12]
    4146:	4668      	mov	r0, sp
    4148:	f003 ff2c 	bl	7fa4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    414c:	f003 fffa 	bl	8144 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4150:	f004 fa7c 	bl	864c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    4154:	f003 fe08 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4158:	f003 fc2c 	bl	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    415c:	484c      	ldr	r0, [pc, #304]	; (4290 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    415e:	f004 f951 	bl	8404 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4162:	484c      	ldr	r0, [pc, #304]	; (4294 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    4164:	f004 f958 	bl	8418 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4168:	f104 0028 	add.w	r0, r4, #40	; 0x28
    416c:	4607      	mov	r7, r0
    416e:	f00a fe43 	bl	edf8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    4172:	4638      	mov	r0, r7
    4174:	f00a fe05 	bl	ed82 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    4178:	4601      	mov	r1, r0
    417a:	4620      	mov	r0, r4
    417c:	f00a fdcd 	bl	ed1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    4180:	f994 000e 	ldrsb.w	r0, [r4, #14]
    4184:	f004 f862 	bl	824c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4188:	7921      	ldrb	r1, [r4, #4]
    418a:	2000      	movs	r0, #0
    418c:	f003 fe9e 	bl	7ecc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4190:	2101      	movs	r1, #1
    4192:	60a8      	str	r0, [r5, #8]
    4194:	b198      	cbz	r0, 41be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    4196:	f104 0138 	add.w	r1, r4, #56	; 0x38
    419a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    419c:	f009 fc55 	bl	da4a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    41a0:	4607      	mov	r7, r0
    41a2:	f104 0140 	add.w	r1, r4, #64	; 0x40
    41a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    41a8:	f009 fc52 	bl	da50 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    41ac:	b14f      	cbz	r7, 41c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    41ae:	f894 1020 	ldrb.w	r1, [r4, #32]
    41b2:	b951      	cbnz	r1, 41ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    41b4:	e005      	b.n	41c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    41b6:	200c      	movs	r0, #12
    41b8:	b006      	add	sp, #24
    41ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41be:	7029      	strb	r1, [r5, #0]
    41c0:	e05e      	b.n	4280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    41c2:	b120      	cbz	r0, 41ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    41c4:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    41c8:	b108      	cbz	r0, 41ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    41ca:	2701      	movs	r7, #1
    41cc:	e000      	b.n	41d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    41ce:	2700      	movs	r7, #0
    41d0:	7ea0      	ldrb	r0, [r4, #26]
    41d2:	b920      	cbnz	r0, 41de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    41d4:	7e20      	ldrb	r0, [r4, #24]
    41d6:	b910      	cbnz	r0, 41de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    41d8:	78a0      	ldrb	r0, [r4, #2]
    41da:	0740      	lsls	r0, r0, #29
    41dc:	d523      	bpl.n	4226 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    41de:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    41e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    41e6:	4050      	eors	r0, r2
    41e8:	ea70 0101 	orns	r1, r0, r1
    41ec:	d006      	beq.n	41fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    41ee:	f007 f81b 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    41f2:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    41f6:	1a80      	subs	r0, r0, r2
    41f8:	4199      	sbcs	r1, r3
    41fa:	d200      	bcs.n	41fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    41fc:	b19f      	cbz	r7, 4226 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    41fe:	f7fe fd4f 	bl	2ca0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4202:	4925      	ldr	r1, [pc, #148]	; (4298 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    4204:	fba0 2301 	umull	r2, r3, r0, r1
    4208:	f104 0048 	add.w	r0, r4, #72	; 0x48
    420c:	f00a fd90 	bl	ed30 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    4210:	2101      	movs	r1, #1
    4212:	4620      	mov	r0, r4
    4214:	f00a fd45 	bl	eca2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    4218:	78a0      	ldrb	r0, [r4, #2]
    421a:	0740      	lsls	r0, r0, #29
    421c:	d503      	bpl.n	4226 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    421e:	2101      	movs	r1, #1
    4220:	4620      	mov	r0, r4
    4222:	f000 faa7 	bl	4774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66c>
    4226:	f7fe fd93 	bl	2d50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    422a:	6870      	ldr	r0, [r6, #4]
    422c:	1cc0      	adds	r0, r0, #3
    422e:	f009 fd28 	bl	dc82 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    4232:	73a8      	strb	r0, [r5, #14]
    4234:	78a0      	ldrb	r0, [r4, #2]
    4236:	07c0      	lsls	r0, r0, #31
    4238:	d022      	beq.n	4280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    423a:	f8cd 8010 	str.w	r8, [sp, #16]
    423e:	20ff      	movs	r0, #255	; 0xff
    4240:	f8cd 8014 	str.w	r8, [sp, #20]
    4244:	73e8      	strb	r0, [r5, #15]
    4246:	69e6      	ldr	r6, [r4, #28]
    4248:	f106 070a 	add.w	r7, r6, #10
    424c:	e013      	b.n	4276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    424e:	9c04      	ldr	r4, [sp, #16]
    4250:	42b4      	cmp	r4, r6
    4252:	d010      	beq.n	4276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    4254:	7a72      	ldrb	r2, [r6, #9]
    4256:	7a60      	ldrb	r0, [r4, #9]
    4258:	463b      	mov	r3, r7
    425a:	f104 010a 	add.w	r1, r4, #10
    425e:	f009 fc85 	bl	db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4262:	b140      	cbz	r0, 4276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    4264:	78a0      	ldrb	r0, [r4, #2]
    4266:	73e8      	strb	r0, [r5, #15]
    4268:	f8d4 0003 	ldr.w	r0, [r4, #3]
    426c:	6128      	str	r0, [r5, #16]
    426e:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    4272:	82a8      	strh	r0, [r5, #20]
    4274:	e004      	b.n	4280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    4276:	a804      	add	r0, sp, #16
    4278:	f7fd fad0 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    427c:	2800      	cmp	r0, #0
    427e:	d0e6      	beq.n	424e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    4280:	2000      	movs	r0, #0
    4282:	e799      	b.n	41b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    4284:	20000fc4 	.word	0x20000fc4
    4288:	00004884 	.word	0x00004884
    428c:	200000d0 	.word	0x200000d0
    4290:	8e89bed6 	.word	0x8e89bed6
    4294:	00555555 	.word	0x00555555
    4298:	000f4240 	.word	0x000f4240
    429c:	b510      	push	{r4, lr}
    429e:	4604      	mov	r4, r0
    42a0:	f7ff ff32 	bl	4108 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    42a4:	2800      	cmp	r0, #0
    42a6:	d108      	bne.n	42ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    42a8:	4804      	ldr	r0, [pc, #16]	; (42bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    42aa:	7800      	ldrb	r0, [r0, #0]
    42ac:	2801      	cmp	r0, #1
    42ae:	d003      	beq.n	42b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    42b0:	2100      	movs	r1, #0
    42b2:	4620      	mov	r0, r4
    42b4:	f7ff fda2 	bl	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    42b8:	2000      	movs	r0, #0
    42ba:	bd10      	pop	{r4, pc}
    42bc:	20000fc4 	.word	0x20000fc4
    42c0:	480a      	ldr	r0, [pc, #40]	; (42ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    42c2:	b510      	push	{r4, lr}
    42c4:	490a      	ldr	r1, [pc, #40]	; (42f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    42c6:	6804      	ldr	r4, [r0, #0]
    42c8:	7808      	ldrb	r0, [r1, #0]
    42ca:	2800      	cmp	r0, #0
    42cc:	d00d      	beq.n	42ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    42ce:	7808      	ldrb	r0, [r1, #0]
    42d0:	2802      	cmp	r0, #2
    42d2:	d002      	beq.n	42da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    42d4:	7808      	ldrb	r0, [r1, #0]
    42d6:	2803      	cmp	r0, #3
    42d8:	d102      	bne.n	42e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    42da:	4620      	mov	r0, r4
    42dc:	f7ff fefe 	bl	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    42e0:	4620      	mov	r0, r4
    42e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42e6:	f000 b919 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    42ea:	bd10      	pop	{r4, pc}
    42ec:	200000d0 	.word	0x200000d0
    42f0:	20000fc4 	.word	0x20000fc4
    42f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42f8:	4604      	mov	r4, r0
    42fa:	4829      	ldr	r0, [pc, #164]	; (43a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    42fc:	460d      	mov	r5, r1
    42fe:	6840      	ldr	r0, [r0, #4]
    4300:	f003 ffc6 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4304:	4e27      	ldr	r6, [pc, #156]	; (43a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>)
    4306:	2004      	movs	r0, #4
    4308:	7030      	strb	r0, [r6, #0]
    430a:	b355      	cbz	r5, 4362 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    430c:	8860      	ldrh	r0, [r4, #2]
    430e:	2810      	cmp	r0, #16
    4310:	d023      	beq.n	435a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    4312:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4316:	4680      	mov	r8, r0
    4318:	68b5      	ldr	r5, [r6, #8]
    431a:	f00a fd26 	bl	ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    431e:	4607      	mov	r7, r0
    4320:	4640      	mov	r0, r8
    4322:	f00a fd4b 	bl	edbc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    4326:	1a38      	subs	r0, r7, r0
    4328:	1e40      	subs	r0, r0, #1
    432a:	b2c0      	uxtb	r0, r0
    432c:	8861      	ldrh	r1, [r4, #2]
    432e:	2228      	movs	r2, #40	; 0x28
    4330:	f000 fae4 	bl	48fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    4334:	4405      	add	r5, r0
    4336:	78a0      	ldrb	r0, [r4, #2]
    4338:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    433c:	b130      	cbz	r0, 434c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    433e:	6870      	ldr	r0, [r6, #4]
    4340:	4405      	add	r5, r0
    4342:	f00a fd94 	bl	ee6e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    4346:	4428      	add	r0, r5
    4348:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    434c:	7922      	ldrb	r2, [r4, #4]
    434e:	4629      	mov	r1, r5
    4350:	2000      	movs	r0, #0
    4352:	f003 ffb3 	bl	82bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    4356:	b920      	cbnz	r0, 4362 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    4358:	e00c      	b.n	4374 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26c>
    435a:	7921      	ldrb	r1, [r4, #4]
    435c:	2000      	movs	r0, #0
    435e:	f003 fd7b 	bl	7e58 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    4362:	8860      	ldrh	r0, [r4, #2]
    4364:	2813      	cmp	r0, #19
    4366:	d011      	beq.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    4368:	dc07      	bgt.n	437a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    436a:	2810      	cmp	r0, #16
    436c:	d015      	beq.n	439a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x292>
    436e:	2812      	cmp	r0, #18
    4370:	d107      	bne.n	4382 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    4372:	e00b      	b.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    4374:	f640 51a8 	movw	r1, #3496	; 0xda8
    4378:	e005      	b.n	4386 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27e>
    437a:	2815      	cmp	r0, #21
    437c:	d006      	beq.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    437e:	281d      	cmp	r0, #29
    4380:	d004      	beq.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    4382:	f640 51bc 	movw	r1, #3516	; 0xdbc
    4386:	202d      	movs	r0, #45	; 0x2d
    4388:	f7fd f80a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    438c:	7922      	ldrb	r2, [r4, #4]
    438e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4392:	2101      	movs	r1, #1
    4394:	2000      	movs	r0, #0
    4396:	f004 b803 	b.w	83a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    439e:	0000      	.short	0x0000
    43a0:	200000d0 	.word	0x200000d0
    43a4:	20000fc4 	.word	0x20000fc4
    43a8:	b538      	push	{r3, r4, r5, lr}
    43aa:	4604      	mov	r4, r0
    43ac:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    43b0:	460b      	mov	r3, r1
    43b2:	f88d 0000 	strb.w	r0, [sp]
    43b6:	9800      	ldr	r0, [sp, #0]
    43b8:	9000      	str	r0, [sp, #0]
    43ba:	f89d 0000 	ldrb.w	r0, [sp]
    43be:	2800      	cmp	r0, #0
    43c0:	d13a      	bne.n	4438 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    43c2:	7820      	ldrb	r0, [r4, #0]
    43c4:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    43c8:	2bff      	cmp	r3, #255	; 0xff
    43ca:	d010      	beq.n	43ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e6>
    43cc:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    43d0:	1e51      	subs	r1, r2, #1
    43d2:	4618      	mov	r0, r3
    43d4:	f7fe fc38 	bl	2c48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    43d8:	b130      	cbz	r0, 43e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e0>
    43da:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    43de:	f040 0002 	orr.w	r0, r0, #2
    43e2:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    43e6:	e011      	b.n	440c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    43e8:	f241 0108 	movw	r1, #4104	; 0x1008
    43ec:	e021      	b.n	4432 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    43ee:	4813      	ldr	r0, [pc, #76]	; (443c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    43f0:	6840      	ldr	r0, [r0, #4]
    43f2:	7801      	ldrb	r1, [r0, #0]
    43f4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    43f8:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    43fc:	f8d0 1003 	ldr.w	r1, [r0, #3]
    4400:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    4404:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    4408:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    440c:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    4410:	287f      	cmp	r0, #127	; 0x7f
    4412:	d00c      	beq.n	442e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    4414:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    4418:	207f      	movs	r0, #127	; 0x7f
    441a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    441e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    4422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4426:	2220      	movs	r2, #32
    4428:	4905      	ldr	r1, [pc, #20]	; (4440 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>)
    442a:	f00a b82c 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    442e:	f640 616c 	movw	r1, #3692	; 0xe6c
    4432:	202d      	movs	r0, #45	; 0x2d
    4434:	f7fc ffb4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4438:	bd38      	pop	{r3, r4, r5, pc}
    443a:	0000      	.short	0x0000
    443c:	200000d0 	.word	0x200000d0
    4440:	0000ec8b 	.word	0x0000ec8b
    4444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4448:	4690      	mov	r8, r2
    444a:	460e      	mov	r6, r1
    444c:	4604      	mov	r4, r0
    444e:	2903      	cmp	r1, #3
    4450:	d004      	beq.n	445c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    4452:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    4456:	b108      	cbz	r0, 445c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    4458:	2001      	movs	r0, #1
    445a:	e000      	b.n	445e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x356>
    445c:	2000      	movs	r0, #0
    445e:	4681      	mov	r9, r0
    4460:	f003 fc9c 	bl	7d9c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    4464:	4605      	mov	r5, r0
    4466:	2e03      	cmp	r6, #3
    4468:	d003      	beq.n	4472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36a>
    446a:	2701      	movs	r7, #1
    446c:	2e05      	cmp	r6, #5
    446e:	d005      	beq.n	447c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x374>
    4470:	e008      	b.n	4484 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37c>
    4472:	78a0      	ldrb	r0, [r4, #2]
    4474:	2702      	movs	r7, #2
    4476:	f3c0 0040 	ubfx	r0, r0, #1, #1
    447a:	e001      	b.n	4480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    447c:	78a0      	ldrb	r0, [r4, #2]
    447e:	07c0      	lsls	r0, r0, #31
    4480:	2800      	cmp	r0, #0
    4482:	d042      	beq.n	450a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x402>
    4484:	f1b9 0f00 	cmp.w	r9, #0
    4488:	d13e      	bne.n	4508 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    448a:	4822      	ldr	r0, [pc, #136]	; (4514 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>)
    448c:	7b80      	ldrb	r0, [r0, #14]
    448e:	b140      	cbz	r0, 44a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39a>
    4490:	f009 fbfa 	bl	dc88 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    4494:	f888 0000 	strb.w	r0, [r8]
    4498:	28ff      	cmp	r0, #255	; 0xff
    449a:	d002      	beq.n	44a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39a>
    449c:	f7fe fbee 	bl	2c7c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    44a0:	4305      	orrs	r5, r0
    44a2:	4e1d      	ldr	r6, [pc, #116]	; (4518 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>)
    44a4:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    44a8:	f104 0358 	add.w	r3, r4, #88	; 0x58
    44ac:	6871      	ldr	r1, [r6, #4]
    44ae:	f811 0b03 	ldrb.w	r0, [r1], #3
    44b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    44b6:	f009 fb59 	bl	db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    44ba:	f898 1000 	ldrb.w	r1, [r8]
    44be:	29ff      	cmp	r1, #255	; 0xff
    44c0:	d004      	beq.n	44cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    44c2:	b990      	cbnz	r0, 44ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    44c4:	7e60      	ldrb	r0, [r4, #25]
    44c6:	4288      	cmp	r0, r1
    44c8:	d00f      	beq.n	44ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    44ca:	e008      	b.n	44de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    44cc:	b138      	cbz	r0, 44de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    44ce:	6871      	ldr	r1, [r6, #4]
    44d0:	f811 0b03 	ldrb.w	r0, [r1], #3
    44d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    44d8:	f00a fb8e 	bl	ebf8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    44dc:	b128      	cbz	r0, 44ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    44de:	2000      	movs	r0, #0
    44e0:	78a1      	ldrb	r1, [r4, #2]
    44e2:	0749      	lsls	r1, r1, #29
    44e4:	d503      	bpl.n	44ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e6>
    44e6:	b990      	cbnz	r0, 450e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    44e8:	e00e      	b.n	4508 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    44ea:	2001      	movs	r0, #1
    44ec:	e7f8      	b.n	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    44ee:	b975      	cbnz	r5, 450e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    44f0:	7be0      	ldrb	r0, [r4, #15]
    44f2:	b108      	cbz	r0, 44f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    44f4:	42b8      	cmp	r0, r7
    44f6:	d107      	bne.n	4508 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    44f8:	6871      	ldr	r1, [r6, #4]
    44fa:	f811 0b03 	ldrb.w	r0, [r1], #3
    44fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4502:	f00a fb79 	bl	ebf8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    4506:	b110      	cbz	r0, 450e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    4508:	2000      	movs	r0, #0
    450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    450e:	2001      	movs	r0, #1
    4510:	e7fb      	b.n	450a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x402>
    4512:	0000      	.short	0x0000
    4514:	20000fc4 	.word	0x20000fc4
    4518:	200000d0 	.word	0x200000d0
    451c:	b570      	push	{r4, r5, r6, lr}
    451e:	4604      	mov	r4, r0
    4520:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    4522:	4d10      	ldr	r5, [pc, #64]	; (4564 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>)
    4524:	1c40      	adds	r0, r0, #1
    4526:	8620      	strh	r0, [r4, #48]	; 0x30
    4528:	7ba8      	ldrb	r0, [r5, #14]
    452a:	2600      	movs	r6, #0
    452c:	b120      	cbz	r0, 4538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    452e:	f003 fc1b 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4532:	f003 fa3f 	bl	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4536:	73ae      	strb	r6, [r5, #14]
    4538:	702e      	strb	r6, [r5, #0]
    453a:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    453e:	b108      	cbz	r0, 4544 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    4540:	2101      	movs	r1, #1
    4542:	e00a      	b.n	455a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x452>
    4544:	7b60      	ldrb	r0, [r4, #13]
    4546:	b138      	cbz	r0, 4558 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    4548:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    454a:	4288      	cmp	r0, r1
    454c:	d804      	bhi.n	4558 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    454e:	2101      	movs	r1, #1
    4550:	4620      	mov	r0, r4
    4552:	f00a fcb0 	bl	eeb6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4556:	bd70      	pop	{r4, r5, r6, pc}
    4558:	2100      	movs	r1, #0
    455a:	4620      	mov	r0, r4
    455c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4560:	f00a bca9 	b.w	eeb6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4564:	20000fc4 	.word	0x20000fc4
    4568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    456c:	4604      	mov	r4, r0
    456e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    4572:	8808      	ldrh	r0, [r1, #0]
    4574:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    4578:	20ff      	movs	r0, #255	; 0xff
    457a:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    457e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4582:	4616      	mov	r6, r2
    4584:	460d      	mov	r5, r1
    4586:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    458a:	2b00      	cmp	r3, #0
    458c:	d14b      	bne.n	4626 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    458e:	6928      	ldr	r0, [r5, #16]
    4590:	f009 fbc9 	bl	dd26 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4594:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    4598:	8b28      	ldrh	r0, [r5, #24]
    459a:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    459e:	8b68      	ldrh	r0, [r5, #26]
    45a0:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    45a4:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    45a8:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    45ac:	7e20      	ldrb	r0, [r4, #24]
    45ae:	f104 0151 	add.w	r1, r4, #81	; 0x51
    45b2:	460f      	mov	r7, r1
    45b4:	2500      	movs	r5, #0
    45b6:	b120      	cbz	r0, 45c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    45b8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    45bc:	f00a fa28 	bl	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    45c0:	b940      	cbnz	r0, 45d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    45c2:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    45c6:	b170      	cbz	r0, 45e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4de>
    45c8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    45cc:	4639      	mov	r1, r7
    45ce:	f00a fa16 	bl	e9fe <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    45d2:	b140      	cbz	r0, 45e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4de>
    45d4:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    45d8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    45dc:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    45e0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    45e4:	e003      	b.n	45ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e6>
    45e6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    45ea:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    45ee:	4815      	ldr	r0, [pc, #84]	; (4644 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x53c>)
    45f0:	2eff      	cmp	r6, #255	; 0xff
    45f2:	6840      	ldr	r0, [r0, #4]
    45f4:	7801      	ldrb	r1, [r0, #0]
    45f6:	f3c1 1180 	ubfx	r1, r1, #6, #1
    45fa:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    45fe:	f850 1f03 	ldr.w	r1, [r0, #3]!
    4602:	d017      	beq.n	4634 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    4604:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    4608:	8880      	ldrh	r0, [r0, #4]
    460a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    460e:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    4612:	1e51      	subs	r1, r2, #1
    4614:	4630      	mov	r0, r6
    4616:	f7fe fb17 	bl	2c48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    461a:	b130      	cbz	r0, 462a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x522>
    461c:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    4620:	f040 0002 	orr.w	r0, r0, #2
    4624:	7020      	strb	r0, [r4, #0]
    4626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    462a:	f640 418b 	movw	r1, #3211	; 0xc8b
    462e:	202d      	movs	r0, #45	; 0x2d
    4630:	f7fc feb6 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4634:	f844 1f7a 	str.w	r1, [r4, #122]!
    4638:	8880      	ldrh	r0, [r0, #4]
    463a:	80a0      	strh	r0, [r4, #4]
    463c:	60e5      	str	r5, [r4, #12]
    463e:	8225      	strh	r5, [r4, #16]
    4640:	e7f1      	b.n	4626 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    4642:	0000      	.short	0x0000
    4644:	200000d0 	.word	0x200000d0
    4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    464a:	4604      	mov	r4, r0
    464c:	20ff      	movs	r0, #255	; 0xff
    464e:	f88d 0000 	strb.w	r0, [sp]
    4652:	2601      	movs	r6, #1
    4654:	466a      	mov	r2, sp
    4656:	2105      	movs	r1, #5
    4658:	4620      	mov	r0, r4
    465a:	f7ff fef3 	bl	4444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    465e:	b160      	cbz	r0, 467a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x572>
    4660:	4d28      	ldr	r5, [pc, #160]	; (4704 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    4662:	4f27      	ldr	r7, [pc, #156]	; (4700 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    4664:	6869      	ldr	r1, [r5, #4]
    4666:	7bfa      	ldrb	r2, [r7, #15]
    4668:	f107 0310 	add.w	r3, r7, #16
    466c:	f811 0b03 	ldrb.w	r0, [r1], #3
    4670:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4674:	f009 fa7a 	bl	db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4678:	b110      	cbz	r0, 4680 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    467a:	2600      	movs	r6, #0
    467c:	4630      	mov	r0, r6
    467e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4680:	686a      	ldr	r2, [r5, #4]
    4682:	69e0      	ldr	r0, [r4, #28]
    4684:	7812      	ldrb	r2, [r2, #0]
    4686:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    468a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    468e:	4011      	ands	r1, r2
    4690:	7001      	strb	r1, [r0, #0]
    4692:	2201      	movs	r2, #1
    4694:	4620      	mov	r0, r4
    4696:	69e1      	ldr	r1, [r4, #28]
    4698:	f000 f89a 	bl	47d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c8>
    469c:	2300      	movs	r3, #0
    469e:	f89d 2000 	ldrb.w	r2, [sp]
    46a2:	4620      	mov	r0, r4
    46a4:	69e1      	ldr	r1, [r4, #28]
    46a6:	f7ff ff5f 	bl	4568 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    46aa:	2211      	movs	r2, #17
    46ac:	4916      	ldr	r1, [pc, #88]	; (4708 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>)
    46ae:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    46b2:	f009 fee8 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    46b6:	69e0      	ldr	r0, [r4, #28]
    46b8:	2205      	movs	r2, #5
    46ba:	8801      	ldrh	r1, [r0, #0]
    46bc:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    46c0:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    46c4:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    46c8:	4910      	ldr	r1, [pc, #64]	; (470c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x604>)
    46ca:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    46ce:	f009 feda 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    46d2:	2100      	movs	r1, #0
    46d4:	69e0      	ldr	r0, [r4, #28]
    46d6:	7039      	strb	r1, [r7, #0]
    46d8:	460a      	mov	r2, r1
    46da:	4621      	mov	r1, r4
    46dc:	f000 fa86 	bl	4bec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    46e0:	6868      	ldr	r0, [r5, #4]
    46e2:	69e1      	ldr	r1, [r4, #28]
    46e4:	f8d0 2003 	ldr.w	r2, [r0, #3]
    46e8:	f841 2f03 	str.w	r2, [r1, #3]!
    46ec:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    46f0:	808a      	strh	r2, [r1, #4]
    46f2:	7800      	ldrb	r0, [r0, #0]
    46f4:	69e1      	ldr	r1, [r4, #28]
    46f6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    46fa:	7088      	strb	r0, [r1, #2]
    46fc:	e7be      	b.n	467c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    46fe:	0000      	.short	0x0000
    4700:	20000fc4 	.word	0x20000fc4
    4704:	200000d0 	.word	0x200000d0
    4708:	0000ec3b 	.word	0x0000ec3b
    470c:	0000ec2b 	.word	0x0000ec2b
    4710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4712:	4604      	mov	r4, r0
    4714:	20ff      	movs	r0, #255	; 0xff
    4716:	f88d 0000 	strb.w	r0, [sp]
    471a:	2501      	movs	r5, #1
    471c:	466a      	mov	r2, sp
    471e:	2103      	movs	r1, #3
    4720:	4620      	mov	r0, r4
    4722:	f7ff fe8f 	bl	4444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    4726:	b1e8      	cbz	r0, 4764 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    4728:	7b20      	ldrb	r0, [r4, #12]
    472a:	b120      	cbz	r0, 4736 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62e>
    472c:	f89d 1000 	ldrb.w	r1, [sp]
    4730:	4620      	mov	r0, r4
    4732:	f7ff fe39 	bl	43a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    4736:	4e0d      	ldr	r6, [pc, #52]	; (476c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x664>)
    4738:	2100      	movs	r1, #0
    473a:	6870      	ldr	r0, [r6, #4]
    473c:	8001      	strh	r1, [r0, #0]
    473e:	2104      	movs	r1, #4
    4740:	f009 fd28 	bl	e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4744:	4620      	mov	r0, r4
    4746:	f000 f88b 	bl	4860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x758>
    474a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    474e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4750:	6870      	ldr	r0, [r6, #4]
    4752:	f009 fd56 	bl	e202 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    4756:	4906      	ldr	r1, [pc, #24]	; (4770 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x668>)
    4758:	2005      	movs	r0, #5
    475a:	7008      	strb	r0, [r1, #0]
    475c:	6870      	ldr	r0, [r6, #4]
    475e:	f003 fd97 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4762:	e000      	b.n	4766 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65e>
    4764:	2500      	movs	r5, #0
    4766:	4628      	mov	r0, r5
    4768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    476a:	0000      	.short	0x0000
    476c:	200000d0 	.word	0x200000d0
    4770:	20000fc4 	.word	0x20000fc4
    4774:	b570      	push	{r4, r5, r6, lr}
    4776:	4604      	mov	r4, r0
    4778:	460e      	mov	r6, r1
    477a:	7e40      	ldrb	r0, [r0, #25]
    477c:	f7fe fa3e 	bl	2bfc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    4780:	0005      	movs	r5, r0
    4782:	d019      	beq.n	47b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>
    4784:	2110      	movs	r1, #16
    4786:	f009 fc4f 	bl	e028 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    478a:	2800      	cmp	r0, #0
    478c:	d114      	bne.n	47b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>
    478e:	2001      	movs	r0, #1
    4790:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    4794:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    4798:	4632      	mov	r2, r6
    479a:	460c      	mov	r4, r1
    479c:	4628      	mov	r0, r5
    479e:	f009 fa15 	bl	dbcc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    47a2:	4621      	mov	r1, r4
    47a4:	4c05      	ldr	r4, [pc, #20]	; (47bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    47a6:	6860      	ldr	r0, [r4, #4]
    47a8:	f009 fd0f 	bl	e1ca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    47ac:	6860      	ldr	r0, [r4, #4]
    47ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47b2:	2101      	movs	r1, #1
    47b4:	f009 bd0f 	b.w	e1d6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    47b8:	bd70      	pop	{r4, r5, r6, pc}
    47ba:	0000      	.short	0x0000
    47bc:	200000d0 	.word	0x200000d0
    47c0:	4802      	ldr	r0, [pc, #8]	; (47cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>)
    47c2:	2101      	movs	r1, #1
    47c4:	6800      	ldr	r0, [r0, #0]
    47c6:	f7ff bb19 	b.w	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    47ca:	0000      	.short	0x0000
    47cc:	200000d0 	.word	0x200000d0
    47d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47d4:	4e21      	ldr	r6, [pc, #132]	; (485c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x754>)
    47d6:	4680      	mov	r8, r0
    47d8:	460c      	mov	r4, r1
    47da:	6870      	ldr	r0, [r6, #4]
    47dc:	4615      	mov	r5, r2
    47de:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    47e2:	6161      	str	r1, [r4, #20]
    47e4:	6841      	ldr	r1, [r0, #4]
    47e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    47ea:	61e1      	str	r1, [r4, #28]
    47ec:	8940      	ldrh	r0, [r0, #10]
    47ee:	f009 fa96 	bl	dd1e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    47f2:	4607      	mov	r7, r0
    47f4:	6120      	str	r0, [r4, #16]
    47f6:	6870      	ldr	r0, [r6, #4]
    47f8:	4639      	mov	r1, r7
    47fa:	7d80      	ldrb	r0, [r0, #22]
    47fc:	f009 fc0b 	bl	e016 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4800:	84a0      	strh	r0, [r4, #36]	; 0x24
    4802:	6870      	ldr	r0, [r6, #4]
    4804:	4639      	mov	r1, r7
    4806:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    480a:	f009 fc00 	bl	e00e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    480e:	6220      	str	r0, [r4, #32]
    4810:	6870      	ldr	r0, [r6, #4]
    4812:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4816:	8321      	strh	r1, [r4, #24]
    4818:	8841      	ldrh	r1, [r0, #2]
    481a:	8361      	strh	r1, [r4, #26]
    481c:	6841      	ldr	r1, [r0, #4]
    481e:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    4822:	7a01      	ldrb	r1, [r0, #8]
    4824:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4828:	7a41      	ldrb	r1, [r0, #9]
    482a:	f001 011f 	and.w	r1, r1, #31
    482e:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    4832:	7a40      	ldrb	r0, [r0, #9]
    4834:	0940      	lsrs	r0, r0, #5
    4836:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    483a:	f104 0062 	add.w	r0, r4, #98	; 0x62
    483e:	7205      	strb	r5, [r0, #8]
    4840:	7245      	strb	r5, [r0, #9]
    4842:	21ff      	movs	r1, #255	; 0xff
    4844:	7281      	strb	r1, [r0, #10]
    4846:	2100      	movs	r1, #0
    4848:	3836      	subs	r0, #54	; 0x36
    484a:	f009 fecb 	bl	e5e4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    484e:	f898 000e 	ldrb.w	r0, [r8, #14]
    4852:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    4856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    485a:	0000      	.short	0x0000
    485c:	200000d0 	.word	0x200000d0
    4860:	b570      	push	{r4, r5, r6, lr}
    4862:	4d07      	ldr	r5, [pc, #28]	; (4880 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x778>)
    4864:	4604      	mov	r4, r0
    4866:	f100 0151 	add.w	r1, r0, #81	; 0x51
    486a:	6868      	ldr	r0, [r5, #4]
    486c:	f009 fcba 	bl	e1e4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    4870:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    4874:	6868      	ldr	r0, [r5, #4]
    4876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    487a:	f009 bcb9 	b.w	e1f0 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    487e:	0000      	.short	0x0000
    4880:	200000d0 	.word	0x200000d0
    4884:	00004089 	.word	0x00004089
    4888:	00003f11 	.word	0x00003f11
    488c:	00004005 	.word	0x00004005
    4890:	00000000 	.word	0x00000000
    4894:	00003fdd 	.word	0x00003fdd
    4898:	00004035 	.word	0x00004035
    489c:	0000ec1f 	.word	0x0000ec1f
    48a0:	0000ec25 	.word	0x0000ec25
    48a4:	0000429d 	.word	0x0000429d
    48a8:	000042c1 	.word	0x000042c1
    48ac:	000047c1 	.word	0x000047c1
    48b0:	000048a0 	.word	0x000048a0
    48b4:	00004898 	.word	0x00004898
    48b8:	00004894 	.word	0x00004894

000048bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    48bc:	b510      	push	{r4, lr}
    48be:	1e42      	subs	r2, r0, #1
    48c0:	2a02      	cmp	r2, #2
    48c2:	d901      	bls.n	48c8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    48c4:	21ca      	movs	r1, #202	; 0xca
    48c6:	e009      	b.n	48dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    48c8:	1e40      	subs	r0, r0, #1
    48ca:	2910      	cmp	r1, #16
    48cc:	d009      	beq.n	48e2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    48ce:	2912      	cmp	r1, #18
    48d0:	d00c      	beq.n	48ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    48d2:	2913      	cmp	r1, #19
    48d4:	d00a      	beq.n	48ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    48d6:	2915      	cmp	r1, #21
    48d8:	d005      	beq.n	48e6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    48da:	21d8      	movs	r1, #216	; 0xd8
    48dc:	202f      	movs	r0, #47	; 0x2f
    48de:	f7fc fd5f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48e2:	4905      	ldr	r1, [pc, #20]	; (48f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48e4:	e004      	b.n	48f0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48e6:	4904      	ldr	r1, [pc, #16]	; (48f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48e8:	1d89      	adds	r1, r1, #6
    48ea:	e001      	b.n	48f0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48ec:	4902      	ldr	r1, [pc, #8]	; (48f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48ee:	1f89      	subs	r1, r1, #6
    48f0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    48f4:	bd10      	pop	{r4, pc}
    48f6:	0000      	.short	0x0000
    48f8:	0000ee86 	.word	0x0000ee86

000048fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    48fc:	1e42      	subs	r2, r0, #1
    48fe:	b510      	push	{r4, lr}
    4900:	b2d2      	uxtb	r2, r2
    4902:	2a01      	cmp	r2, #1
    4904:	d903      	bls.n	490e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4906:	291d      	cmp	r1, #29
    4908:	d001      	beq.n	490e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    490a:	21ee      	movs	r1, #238	; 0xee
    490c:	e00d      	b.n	492a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    490e:	2913      	cmp	r1, #19
    4910:	d013      	beq.n	493a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    4912:	dc04      	bgt.n	491e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4914:	2910      	cmp	r1, #16
    4916:	d00b      	beq.n	4930 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4918:	2912      	cmp	r1, #18
    491a:	d104      	bne.n	4926 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    491c:	e00d      	b.n	493a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    491e:	2915      	cmp	r1, #21
    4920:	d008      	beq.n	4934 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    4922:	291d      	cmp	r1, #29
    4924:	d00e      	beq.n	4944 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4926:	f44f 7181 	mov.w	r1, #258	; 0x102
    492a:	202f      	movs	r0, #47	; 0x2f
    492c:	f7fc fd38 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4930:	4807      	ldr	r0, [pc, #28]	; (4950 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4932:	e004      	b.n	493e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4934:	4806      	ldr	r0, [pc, #24]	; (4950 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4936:	3008      	adds	r0, #8
    4938:	e001      	b.n	493e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    493a:	4805      	ldr	r0, [pc, #20]	; (4950 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    493c:	1d00      	adds	r0, r0, #4
    493e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    4942:	bd10      	pop	{r4, pc}
    4944:	f240 315a 	movw	r1, #858	; 0x35a
    4948:	fb10 f001 	smulbb	r0, r0, r1
    494c:	bd10      	pop	{r4, pc}
    494e:	0000      	.short	0x0000
    4950:	0000ee74 	.word	0x0000ee74

00004954 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    4954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4958:	4604      	mov	r4, r0
    495a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    495e:	4616      	mov	r6, r2
    4960:	460f      	mov	r7, r1
    4962:	2800      	cmp	r0, #0
    4964:	d15e      	bne.n	4a24 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4966:	4621      	mov	r1, r4
    4968:	484d      	ldr	r0, [pc, #308]	; (4aa0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    496a:	f006 fa4d 	bl	ae08 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    496e:	4605      	mov	r5, r0
    4970:	2820      	cmp	r0, #32
    4972:	d057      	beq.n	4a24 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4974:	2250      	movs	r2, #80	; 0x50
    4976:	2100      	movs	r1, #0
    4978:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    497c:	f00c fa92 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4980:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    4984:	2501      	movs	r5, #1
    4986:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    498a:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    498e:	b137      	cbz	r7, 499e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    4990:	f7fe feba 	bl	3708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4994:	f000 0007 	and.w	r0, r0, #7
    4998:	1c40      	adds	r0, r0, #1
    499a:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    499e:	4620      	mov	r0, r4
    49a0:	f00a fc26 	bl	f1f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    49a4:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    49a8:	2002      	movs	r0, #2
    49aa:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    49ae:	46a8      	mov	r8, r5
    49b0:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    49b4:	2500      	movs	r5, #0
    49b6:	f804 5fe8 	strb.w	r5, [r4, #232]!
    49ba:	f007 fbb1 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    49be:	4607      	mov	r7, r0
    49c0:	f00c f86c 	bl	10a9c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    49c4:	8921      	ldrh	r1, [r4, #8]
    49c6:	3ce8      	subs	r4, #232	; 0xe8
    49c8:	4288      	cmp	r0, r1
    49ca:	d800      	bhi.n	49ce <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    49cc:	4608      	mov	r0, r1
    49ce:	4438      	add	r0, r7
    49d0:	30cc      	adds	r0, #204	; 0xcc
    49d2:	b287      	uxth	r7, r0
    49d4:	4620      	mov	r0, r4
    49d6:	f00a f8ce 	bl	eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    49da:	b330      	cbz	r0, 4a2a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    49dc:	f00b ff64 	bl	108a8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    49e0:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    49e4:	b281      	uxth	r1, r0
    49e6:	4630      	mov	r0, r6
    49e8:	f007 fcba 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    49ec:	4430      	add	r0, r6
    49ee:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    49f2:	3490      	adds	r4, #144	; 0x90
    49f4:	f006 fc18 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    49f8:	19c0      	adds	r0, r0, r7
    49fa:	4169      	adcs	r1, r5
    49fc:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    4a00:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4a04:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4a08:	2001      	movs	r0, #1
    4a0a:	f00a fa2c 	bl	ee66 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    4a0e:	f500 7088 	add.w	r0, r0, #272	; 0x110
    4a12:	1a30      	subs	r0, r6, r0
    4a14:	6460      	str	r0, [r4, #68]	; 0x44
    4a16:	f04f 30ff 	mov.w	r0, #4294967295
    4a1a:	0841      	lsrs	r1, r0, #1
    4a1c:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    4a20:	3c90      	subs	r4, #144	; 0x90
    4a22:	e025      	b.n	4a70 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4a24:	200c      	movs	r0, #12
    4a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a2a:	2100      	movs	r1, #0
    4a2c:	4620      	mov	r0, r4
    4a2e:	f00a fb31 	bl	f094 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    4a32:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4aa4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4a36:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4a3a:	2000      	movs	r0, #0
    4a3c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a40:	b149      	cbz	r1, 4a56 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a42:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4a44:	b139      	cbz	r1, 4a56 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a46:	f7fe fe5f 	bl	3708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4a4a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a4e:	fbb0 f2f1 	udiv	r2, r0, r1
    4a52:	fb01 0012 	mls	r0, r1, r2, r0
    4a56:	4407      	add	r7, r0
    4a58:	f006 fbe6 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4a5c:	19c0      	adds	r0, r0, r7
    4a5e:	4169      	adcs	r1, r5
    4a60:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    4a64:	b19e      	cbz	r6, 4a8e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    4a66:	1980      	adds	r0, r0, r6
    4a68:	eb51 0105 	adcs.w	r1, r1, r5
    4a6c:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    4a70:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4a74:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    4a78:	f00a fbb8 	bl	f1ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    4a7c:	b158      	cbz	r0, 4a96 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    4a7e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    4a82:	2100      	movs	r1, #0
    4a84:	4620      	mov	r0, r4
    4a86:	f00a f8a6 	bl	ebd6 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    4a8a:	2000      	movs	r0, #0
    4a8c:	e7cb      	b.n	4a26 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    4a8e:	f04f 30ff 	mov.w	r0, #4294967295
    4a92:	0841      	lsrs	r1, r0, #1
    4a94:	e7ea      	b.n	4a6c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    4a96:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
    4a9a:	2030      	movs	r0, #48	; 0x30
    4a9c:	f7fc fc80 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aa0:	0000f369 	.word	0x0000f369
    4aa4:	200000e0 	.word	0x200000e0

00004aa8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    4aa8:	4901      	ldr	r1, [pc, #4]	; (4ab0 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    4aaa:	8088      	strh	r0, [r1, #4]
    4aac:	4770      	bx	lr
    4aae:	0000      	.short	0x0000
    4ab0:	200000e0 	.word	0x200000e0

00004ab4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4ab4:	4805      	ldr	r0, [pc, #20]	; (4acc <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4ab6:	2100      	movs	r1, #0
    4ab8:	7001      	strb	r1, [r0, #0]
    4aba:	2201      	movs	r2, #1
    4abc:	7082      	strb	r2, [r0, #2]
    4abe:	7041      	strb	r1, [r0, #1]
    4ac0:	f242 7110 	movw	r1, #10000	; 0x2710
    4ac4:	8081      	strh	r1, [r0, #4]
    4ac6:	f000 b803 	b.w	4ad0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4aca:	0000      	.short	0x0000
    4acc:	200000e0 	.word	0x200000e0

00004ad0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4ad0:	b51c      	push	{r2, r3, r4, lr}
    4ad2:	4909      	ldr	r1, [pc, #36]	; (4af8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
    4ad8:	e9cd 0100 	strd	r0, r1, [sp]
    4adc:	e002      	b.n	4ae4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    4ade:	9800      	ldr	r0, [sp, #0]
    4ae0:	f00a f9fd 	bl	eede <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4ae4:	4668      	mov	r0, sp
    4ae6:	f7fc fe99 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4aea:	2800      	cmp	r0, #0
    4aec:	d0f7      	beq.n	4ade <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    4aee:	f000 f8a9 	bl	4c44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    4af2:	2000      	movs	r0, #0
    4af4:	bd1c      	pop	{r2, r3, r4, pc}
    4af6:	0000      	.short	0x0000
    4af8:	000053a4 	.word	0x000053a4

00004afc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4afc:	4901      	ldr	r1, [pc, #4]	; (4b04 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    4afe:	7008      	strb	r0, [r1, #0]
    4b00:	4770      	bx	lr
    4b02:	0000      	.short	0x0000
    4b04:	200000e0 	.word	0x200000e0

00004b08 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4b08:	4908      	ldr	r1, [pc, #32]	; (4b2c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b0e:	fbb1 f1f2 	udiv	r1, r1, r2
    4b12:	b510      	push	{r4, lr}
    4b14:	f501 7125 	add.w	r1, r1, #660	; 0x294
    4b18:	f009 fd7d 	bl	e616 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4b1c:	f640 0148 	movw	r1, #2120	; 0x848
    4b20:	4288      	cmp	r0, r1
    4b22:	d300      	bcc.n	4b26 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4b24:	4608      	mov	r0, r1
    4b26:	b280      	uxth	r0, r0
    4b28:	bd10      	pop	{r4, pc}
    4b2a:	0000      	.short	0x0000
    4b2c:	0001527d 	.word	0x0001527d

00004b30 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    4b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b34:	4c0f      	ldr	r4, [pc, #60]	; (4b74 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x44>)
    4b36:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    4b3a:	f003 fac3 	bl	80c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4b3e:	4605      	mov	r5, r0
    4b40:	4602      	mov	r2, r0
    4b42:	4639      	mov	r1, r7
    4b44:	4630      	mov	r0, r6
    4b46:	f009 f8f4 	bl	dd32 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    4b4a:	4606      	mov	r6, r0
    4b4c:	68a0      	ldr	r0, [r4, #8]
    4b4e:	4286      	cmp	r6, r0
    4b50:	d005      	beq.n	4b5e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2e>
    4b52:	6921      	ldr	r1, [r4, #16]
    4b54:	1a30      	subs	r0, r6, r0
    4b56:	4408      	add	r0, r1
    4b58:	6120      	str	r0, [r4, #16]
    4b5a:	f006 fa97 	bl	b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4b5e:	60a6      	str	r6, [r4, #8]
    4b60:	42b5      	cmp	r5, r6
    4b62:	d801      	bhi.n	4b68 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x38>
    4b64:	7860      	ldrb	r0, [r4, #1]
    4b66:	b110      	cbz	r0, 4b6e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    4b68:	2000      	movs	r0, #0
    4b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b6e:	2001      	movs	r0, #1
    4b70:	e7fb      	b.n	4b6a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    4b72:	0000      	.short	0x0000
    4b74:	200000e0 	.word	0x200000e0

00004b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    4b78:	b510      	push	{r4, lr}
    4b7a:	4604      	mov	r4, r0
    4b7c:	2906      	cmp	r1, #6
    4b7e:	d22e      	bcs.n	4bde <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    4b80:	e8df f001 	tbb	[pc, r1]
    4b84:	14031105 	.word	0x14031105
    4b88:	2815      	.short	0x2815
    4b8a:	2100      	movs	r1, #0
    4b8c:	e006      	b.n	4b9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4b8e:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4b92:	b110      	cbz	r0, 4b9a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    4b94:	4620      	mov	r0, r4
    4b96:	f00a fabc 	bl	f112 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    4b9a:	2101      	movs	r1, #1
    4b9c:	4620      	mov	r0, r4
    4b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ba2:	f000 b8f7 	b.w	4d94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    4ba6:	2003      	movs	r0, #3
    4ba8:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4bac:	bd10      	pop	{r4, pc}
    4bae:	f003 fa8f 	bl	80d0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    4bb2:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    4bb6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4bba:	f003 fb4d 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4bbe:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4bc2:	1a09      	subs	r1, r1, r0
    4bc4:	4808      	ldr	r0, [pc, #32]	; (4be8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    4bc6:	6882      	ldr	r2, [r0, #8]
    4bc8:	440a      	add	r2, r1
    4bca:	6082      	str	r2, [r0, #8]
    4bcc:	68c2      	ldr	r2, [r0, #12]
    4bce:	4411      	add	r1, r2
    4bd0:	60c1      	str	r1, [r0, #12]
    4bd2:	bd10      	pop	{r4, pc}
    4bd4:	4620      	mov	r0, r4
    4bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bda:	f00a ba85 	b.w	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4bde:	f44f 61e8 	mov.w	r1, #1856	; 0x740
    4be2:	2030      	movs	r0, #48	; 0x30
    4be4:	f7fc fbdc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4be8:	200000e0 	.word	0x200000e0

00004bec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4bec:	b570      	push	{r4, r5, r6, lr}
    4bee:	460c      	mov	r4, r1
    4bf0:	4605      	mov	r5, r0
    4bf2:	b112      	cbz	r2, 4bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    4bf4:	f240 716a 	movw	r1, #1898	; 0x76a
    4bf8:	e010      	b.n	4c1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    4bfa:	f003 fa63 	bl	80c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4bfe:	4601      	mov	r1, r0
    4c00:	2200      	movs	r2, #0
    4c02:	4620      	mov	r0, r4
    4c04:	f00a fb64 	bl	f2d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    4c08:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4c0c:	462a      	mov	r2, r5
    4c0e:	4905      	ldr	r1, [pc, #20]	; (4c24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    4c10:	f005 ffb0 	bl	ab74 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4c14:	2800      	cmp	r0, #0
    4c16:	d104      	bne.n	4c22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    4c18:	f240 7153 	movw	r1, #1875	; 0x753
    4c1c:	2030      	movs	r0, #48	; 0x30
    4c1e:	f7fc fbbf 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c22:	bd70      	pop	{r4, r5, r6, pc}
    4c24:	0000f40b 	.word	0x0000f40b
    4c28:	b510      	push	{r4, lr}
    4c2a:	280c      	cmp	r0, #12
    4c2c:	d304      	bcc.n	4c38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    4c2e:	f240 318b 	movw	r1, #907	; 0x38b
    4c32:	2006      	movs	r0, #6
    4c34:	f7fc fbb4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c38:	4901      	ldr	r1, [pc, #4]	; (4c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    4c3a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4c3e:	bd10      	pop	{r4, pc}
    4c40:	000053c0 	.word	0x000053c0
    4c44:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4c48:	4d15      	ldr	r5, [pc, #84]	; (4ca0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    4c4a:	2001      	movs	r0, #1
    4c4c:	7068      	strb	r0, [r5, #1]
    4c4e:	2400      	movs	r4, #0
    4c50:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4c54:	e00b      	b.n	4c6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    4c56:	2100      	movs	r1, #0
    4c58:	f008 fdd9 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4c5c:	0007      	movs	r7, r0
    4c5e:	d009      	beq.n	4c74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    4c60:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    4c64:	f005 ffb8 	bl	abd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4c68:	4638      	mov	r0, r7
    4c6a:	f00a fb24 	bl	f2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    4c6e:	9400      	str	r4, [sp, #0]
    4c70:	9401      	str	r4, [sp, #4]
    4c72:	e00d      	b.n	4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4c74:	f44f 7190 	mov.w	r1, #288	; 0x120
    4c78:	2030      	movs	r0, #48	; 0x30
    4c7a:	f7fc fb91 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c7e:	9800      	ldr	r0, [sp, #0]
    4c80:	b130      	cbz	r0, 4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4c82:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    4c86:	b119      	cbz	r1, 4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4c88:	8800      	ldrh	r0, [r0, #0]
    4c8a:	42b0      	cmp	r0, r6
    4c8c:	d1e3      	bne.n	4c56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    4c8e:	e004      	b.n	4c9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    4c90:	4668      	mov	r0, sp
    4c92:	f7fc fdc3 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4c96:	2800      	cmp	r0, #0
    4c98:	d0f1      	beq.n	4c7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    4c9a:	706c      	strb	r4, [r5, #1]
    4c9c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4ca0:	200000e0 	.word	0x200000e0
    4ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ca8:	4604      	mov	r4, r0
    4caa:	4839      	ldr	r0, [pc, #228]	; (4d90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    4cac:	461e      	mov	r6, r3
    4cae:	4690      	mov	r8, r2
    4cb0:	7880      	ldrb	r0, [r0, #2]
    4cb2:	4689      	mov	r9, r1
    4cb4:	2500      	movs	r5, #0
    4cb6:	2800      	cmp	r0, #0
    4cb8:	d063      	beq.n	4d82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4cba:	f007 fb07 	bl	c2cc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4cbe:	b3e0      	cbz	r0, 4d3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    4cc0:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4cc4:	2802      	cmp	r0, #2
    4cc6:	d35c      	bcc.n	4d82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4cc8:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ccc:	2802      	cmp	r0, #2
    4cce:	d058      	beq.n	4d82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4cd0:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4cd4:	bb88      	cbnz	r0, 4d3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    4cd6:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4cda:	f7ff ffa5 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4cde:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    4ce2:	b281      	uxth	r1, r0
    4ce4:	8031      	strh	r1, [r6, #0]
    4ce6:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cea:	2700      	movs	r7, #0
    4cec:	2801      	cmp	r0, #1
    4cee:	d00d      	beq.n	4d0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    4cf0:	6920      	ldr	r0, [r4, #16]
    4cf2:	f007 fb35 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4cf6:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4cfa:	4442      	add	r2, r8
    4cfc:	eba2 0109 	sub.w	r1, r2, r9
    4d00:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d04:	1a82      	subs	r2, r0, r2
    4d06:	fb01 7502 	mla	r5, r1, r2, r7
    4d0a:	e035      	b.n	4d78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    4d0c:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4d10:	2803      	cmp	r0, #3
    4d12:	d039      	beq.n	4d88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    4d14:	2101      	movs	r1, #1
    4d16:	2000      	movs	r0, #0
    4d18:	f009 f8d6 	bl	dec8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4d1c:	6a21      	ldr	r1, [r4, #32]
    4d1e:	1847      	adds	r7, r0, r1
    4d20:	8831      	ldrh	r1, [r6, #0]
    4d22:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d26:	f007 fb1b 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d2a:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    4d2e:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4d32:	1a82      	subs	r2, r0, r2
    4d34:	fb01 5502 	mla	r5, r1, r2, r5
    4d38:	e000      	b.n	4d3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    4d3a:	e022      	b.n	4d82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4d3c:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4d40:	8831      	ldrh	r1, [r6, #0]
    4d42:	4638      	mov	r0, r7
    4d44:	f007 fb0c 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d48:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4d4c:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4d50:	1a41      	subs	r1, r0, r1
    4d52:	440d      	add	r5, r1
    4d54:	8831      	ldrh	r1, [r6, #0]
    4d56:	6920      	ldr	r0, [r4, #16]
    4d58:	f007 fb02 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d5c:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4d60:	4442      	add	r2, r8
    4d62:	eba2 0109 	sub.w	r1, r2, r9
    4d66:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4d6a:	1a89      	subs	r1, r1, r2
    4d6c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d70:	1a82      	subs	r2, r0, r2
    4d72:	1e49      	subs	r1, r1, #1
    4d74:	fb01 5502 	mla	r5, r1, r2, r5
    4d78:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4d7c:	2001      	movs	r0, #1
    4d7e:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    4d82:	4628      	mov	r0, r5
    4d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d88:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d8c:	e7c6      	b.n	4d1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    4d8e:	0000      	.short	0x0000
    4d90:	200000e0 	.word	0x200000e0
    4d94:	b538      	push	{r3, r4, r5, lr}
    4d96:	2500      	movs	r5, #0
    4d98:	4604      	mov	r4, r0
    4d9a:	2901      	cmp	r1, #1
    4d9c:	d102      	bne.n	4da4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    4d9e:	4810      	ldr	r0, [pc, #64]	; (4de0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    4da0:	7840      	ldrb	r0, [r0, #1]
    4da2:	b170      	cbz	r0, 4dc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    4da4:	2004      	movs	r0, #4
    4da6:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4daa:	bf00      	nop
    4dac:	f00a f9aa 	bl	f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    4db0:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    4db4:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4db8:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4dbc:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    4dc0:	bd38      	pop	{r3, r4, r5, pc}
    4dc2:	9500      	str	r5, [sp, #0]
    4dc4:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4dc8:	2301      	movs	r3, #1
    4dca:	2200      	movs	r2, #0
    4dcc:	4620      	mov	r0, r4
    4dce:	f000 f809 	bl	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    4dd2:	2800      	cmp	r0, #0
    4dd4:	d0ea      	beq.n	4dac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    4dd6:	f240 61b5 	movw	r1, #1717	; 0x6b5
    4dda:	2030      	movs	r0, #48	; 0x30
    4ddc:	f7fc fae0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4de0:	200000e0 	.word	0x200000e0
    4de4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4de8:	b08b      	sub	sp, #44	; 0x2c
    4dea:	4604      	mov	r4, r0
    4dec:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4df0:	4699      	mov	r9, r3
    4df2:	460f      	mov	r7, r1
    4df4:	9307      	str	r3, [sp, #28]
    4df6:	9005      	str	r0, [sp, #20]
    4df8:	f00b fd56 	bl	108a8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4dfc:	4605      	mov	r5, r0
    4dfe:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4e02:	f7ff ff11 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4e06:	4428      	add	r0, r5
    4e08:	f8ad 0004 	strh.w	r0, [sp, #4]
    4e0c:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4e10:	280d      	cmp	r0, #13
    4e12:	d004      	beq.n	4e1e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    4e14:	2000      	movs	r0, #0
    4e16:	9008      	str	r0, [sp, #32]
    4e18:	980d      	ldr	r0, [sp, #52]	; 0x34
    4e1a:	b110      	cbz	r0, 4e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    4e1c:	e02e      	b.n	4e7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e1e:	2001      	movs	r0, #1
    4e20:	e7f9      	b.n	4e16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    4e22:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4e26:	2803      	cmp	r0, #3
    4e28:	d128      	bne.n	4e7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e2a:	9808      	ldr	r0, [sp, #32]
    4e2c:	b330      	cbz	r0, 4e7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e2e:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4e32:	42b8      	cmp	r0, r7
    4e34:	d122      	bne.n	4e7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e36:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4e3a:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4e3e:	6920      	ldr	r0, [r4, #16]
    4e40:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4e44:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4e48:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4e4c:	4408      	add	r0, r1
    4e4e:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4e52:	4620      	mov	r0, r4
    4e54:	f000 fac0 	bl	53d8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4e58:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4e5c:	6220      	str	r0, [r4, #32]
    4e5e:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4e62:	84a0      	strh	r0, [r4, #36]	; 0x24
    4e64:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    4e68:	6120      	str	r0, [r4, #16]
    4e6a:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4e6e:	8320      	strh	r0, [r4, #24]
    4e70:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4e74:	8360      	strh	r0, [r4, #26]
    4e76:	2002      	movs	r0, #2
    4e78:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4e7c:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4e80:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4e84:	1a38      	subs	r0, r7, r0
    4e86:	fa0f fa80 	sxth.w	sl, r0
    4e8a:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    4e8e:	1a38      	subs	r0, r7, r0
    4e90:	fa0f f880 	sxth.w	r8, r0
    4e94:	f1b8 0f00 	cmp.w	r8, #0
    4e98:	da08      	bge.n	4eac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    4e9a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4e9e:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    4ea2:	46d0      	mov	r8, sl
    4ea4:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4ea8:	2001      	movs	r0, #1
    4eaa:	9007      	str	r0, [sp, #28]
    4eac:	ab01      	add	r3, sp, #4
    4eae:	4652      	mov	r2, sl
    4eb0:	4641      	mov	r1, r8
    4eb2:	4620      	mov	r0, r4
    4eb4:	f7ff fef6 	bl	4ca4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    4eb8:	9004      	str	r0, [sp, #16]
    4eba:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ebe:	f8df b334 	ldr.w	fp, [pc, #820]	; 51f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    4ec2:	b140      	cbz	r0, 4ed6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    4ec4:	2801      	cmp	r0, #1
    4ec6:	d07d      	beq.n	4fc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    4ec8:	2802      	cmp	r0, #2
    4eca:	d051      	beq.n	4f70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    4ecc:	2803      	cmp	r0, #3
    4ece:	d07a      	beq.n	4fc6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    4ed0:	f240 5143 	movw	r1, #1347	; 0x543
    4ed4:	e18a      	b.n	51ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    4ed6:	2101      	movs	r1, #1
    4ed8:	2000      	movs	r0, #0
    4eda:	f008 fff5 	bl	dec8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4ede:	4606      	mov	r6, r0
    4ee0:	6a20      	ldr	r0, [r4, #32]
    4ee2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4ee6:	4430      	add	r0, r6
    4ee8:	f007 fa3a 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4eec:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4ef0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4ef4:	6920      	ldr	r0, [r4, #16]
    4ef6:	f007 fa33 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4efa:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4efe:	a907      	add	r1, sp, #28
    4f00:	a806      	add	r0, sp, #24
    4f02:	f003 f847 	bl	7f94 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4f06:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4f0e:	f006 f99d 	bl	b24c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4f12:	4682      	mov	sl, r0
    4f14:	4620      	mov	r0, r4
    4f16:	f00a f8e7 	bl	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4f1a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4f1e:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4f22:	f003 f9c5 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f26:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f2a:	4401      	add	r1, r0
    4f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f30:	fbb1 f0f0 	udiv	r0, r1, r0
    4f34:	6a21      	ldr	r1, [r4, #32]
    4f36:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4f3a:	4431      	add	r1, r6
    4f3c:	1a08      	subs	r0, r1, r0
    4f3e:	1a81      	subs	r1, r0, r2
    4f40:	4441      	add	r1, r8
    4f42:	3920      	subs	r1, #32
    4f44:	eba1 060a 	sub.w	r6, r1, sl
    4f48:	0050      	lsls	r0, r2, #1
    4f4a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4f4c:	3060      	adds	r0, #96	; 0x60
    4f4e:	4401      	add	r1, r0
    4f50:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4f54:	f00a f938 	bl	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    4f58:	3022      	adds	r0, #34	; 0x22
    4f5a:	f8cb 0014 	str.w	r0, [fp, #20]
    4f5e:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4f62:	1a30      	subs	r0, r6, r0
    4f64:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    4f68:	d258      	bcs.n	501c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    4f6a:	f240 41dc 	movw	r1, #1244	; 0x4dc
    4f6e:	e13d      	b.n	51ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    4f70:	6a21      	ldr	r1, [r4, #32]
    4f72:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4f76:	4408      	add	r0, r1
    4f78:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f7c:	f007 f9f0 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f80:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4f84:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f88:	6920      	ldr	r0, [r4, #16]
    4f8a:	f007 f9e9 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f8e:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4f92:	4620      	mov	r0, r4
    4f94:	f00a f8a8 	bl	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4f98:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4f9c:	bb10      	cbnz	r0, 4fe4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    4f9e:	f1b9 0f00 	cmp.w	r9, #0
    4fa2:	d01f      	beq.n	4fe4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    4fa4:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    4fa8:	4640      	mov	r0, r8
    4faa:	f003 f981 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4fae:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4fb2:	4401      	add	r1, r0
    4fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4fb8:	fbb1 f0f0 	udiv	r0, r1, r0
    4fbc:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4fc0:	4408      	add	r0, r1
    4fc2:	e001      	b.n	4fc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    4fc4:	e02b      	b.n	501e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    4fc6:	e047      	b.n	5058 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    4fc8:	6a22      	ldr	r2, [r4, #32]
    4fca:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    4fce:	4411      	add	r1, r2
    4fd0:	1a0e      	subs	r6, r1, r0
    4fd2:	4640      	mov	r0, r8
    4fd4:	f003 f940 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4fd8:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4fdc:	1a08      	subs	r0, r1, r0
    4fde:	4406      	add	r6, r0
    4fe0:	3e20      	subs	r6, #32
    4fe2:	e006      	b.n	4ff2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    4fe4:	6a21      	ldr	r1, [r4, #32]
    4fe6:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4fea:	4408      	add	r0, r1
    4fec:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4ff0:	1a46      	subs	r6, r0, r1
    4ff2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4ff6:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    4ffa:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    4ffe:	fb01 0002 	mla	r0, r1, r2, r0
    5002:	0040      	lsls	r0, r0, #1
    5004:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5006:	3060      	adds	r0, #96	; 0x60
    5008:	4401      	add	r1, r0
    500a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    500e:	f00a f8db 	bl	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    5012:	f8cb 0014 	str.w	r0, [fp, #20]
    5016:	2001      	movs	r0, #1
    5018:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    501c:	e061      	b.n	50e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    501e:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    5022:	6920      	ldr	r0, [r4, #16]
    5024:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5028:	1a86      	subs	r6, r0, r2
    502a:	eb01 000a 	add.w	r0, r1, sl
    502e:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    5032:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    5036:	1a40      	subs	r0, r0, r1
    5038:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    503c:	1e40      	subs	r0, r0, #1
    503e:	fb0c 3101 	mla	r1, ip, r1, r3
    5042:	fb00 1002 	mla	r0, r0, r2, r1
    5046:	0040      	lsls	r0, r0, #1
    5048:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    504a:	3060      	adds	r0, #96	; 0x60
    504c:	4401      	add	r1, r0
    504e:	fb06 f608 	mul.w	r6, r6, r8
    5052:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5056:	e040      	b.n	50da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    5058:	6920      	ldr	r0, [r4, #16]
    505a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    505e:	fb00 f008 	mul.w	r0, r0, r8
    5062:	fb08 0611 	mls	r6, r8, r1, r0
    5066:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    506a:	2825      	cmp	r0, #37	; 0x25
    506c:	d003      	beq.n	5076 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    506e:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    5072:	2825      	cmp	r0, #37	; 0x25
    5074:	d109      	bne.n	508a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    5076:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    507a:	1a38      	subs	r0, r7, r0
    507c:	b200      	sxth	r0, r0
    507e:	2800      	cmp	r0, #0
    5080:	db03      	blt.n	508a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    5082:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    5086:	b100      	cbz	r0, 508a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    5088:	9005      	str	r0, [sp, #20]
    508a:	9807      	ldr	r0, [sp, #28]
    508c:	b1d8      	cbz	r0, 50c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    508e:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    5092:	b9c0      	cbnz	r0, 50c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    5094:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    5098:	2800      	cmp	r0, #0
    509a:	d07d      	beq.n	5198 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    509c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50a0:	f003 f906 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    50a4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    50a8:	4401      	add	r1, r0
    50aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    50ae:	fbb1 f0f0 	udiv	r0, r1, r0
    50b2:	1a36      	subs	r6, r6, r0
    50b4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50b8:	f003 f8ce 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    50bc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    50c0:	1a08      	subs	r0, r1, r0
    50c2:	4406      	add	r6, r0
    50c4:	3e20      	subs	r6, #32
    50c6:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    50ca:	eb01 000a 	add.w	r0, r1, sl
    50ce:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    50d2:	4348      	muls	r0, r1
    50d4:	0041      	lsls	r1, r0, #1
    50d6:	3160      	adds	r1, #96	; 0x60
    50d8:	9805      	ldr	r0, [sp, #20]
    50da:	f00a f875 	bl	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    50de:	f8cb 0014 	str.w	r0, [fp, #20]
    50e2:	9804      	ldr	r0, [sp, #16]
    50e4:	f8db 2014 	ldr.w	r2, [fp, #20]
    50e8:	1a31      	subs	r1, r6, r0
    50ea:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    50ee:	6920      	ldr	r0, [r4, #16]
    50f0:	1b80      	subs	r0, r0, r6
    50f2:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    50f6:	f8cb 0018 	str.w	r0, [fp, #24]
    50fa:	4282      	cmp	r2, r0
    50fc:	d800      	bhi.n	5100 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    50fe:	4610      	mov	r0, r2
    5100:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    5104:	2600      	movs	r6, #0
    5106:	702e      	strb	r6, [r5, #0]
    5108:	2064      	movs	r0, #100	; 0x64
    510a:	8128      	strh	r0, [r5, #8]
    510c:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    5110:	1851      	adds	r1, r2, r1
    5112:	4170      	adcs	r0, r6
    5114:	e9c5 1004 	strd	r1, r0, [r5, #16]
    5118:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    511c:	f009 fa4c 	bl	e5b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    5120:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    5124:	4408      	add	r0, r1
    5126:	6068      	str	r0, [r5, #4]
    5128:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    512c:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    5130:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    5134:	72ae      	strb	r6, [r5, #10]
    5136:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    513a:	1bc0      	subs	r0, r0, r7
    513c:	b200      	sxth	r0, r0
    513e:	2800      	cmp	r0, #0
    5140:	dd01      	ble.n	5146 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    5142:	2002      	movs	r0, #2
    5144:	72a8      	strb	r0, [r5, #10]
    5146:	9808      	ldr	r0, [sp, #32]
    5148:	b338      	cbz	r0, 519a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    514a:	f1b9 0f00 	cmp.w	r9, #0
    514e:	d01c      	beq.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5150:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    5154:	b3f1      	cbz	r1, 51d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5e8>
    5156:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    515a:	bf00      	nop
    515c:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    5160:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    5164:	1c40      	adds	r0, r0, #1
    5166:	4342      	muls	r2, r0
    5168:	428a      	cmp	r2, r1
    516a:	d20e      	bcs.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    516c:	7aa8      	ldrb	r0, [r5, #10]
    516e:	b160      	cbz	r0, 518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5170:	72ae      	strb	r6, [r5, #10]
    5172:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5176:	1c40      	adds	r0, r0, #1
    5178:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    517c:	f7fe fabe 	bl	36fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    5180:	f000 0007 	and.w	r0, r0, #7
    5184:	1c40      	adds	r0, r0, #1
    5186:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    518a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    518e:	4629      	mov	r1, r5
    5190:	f00a f82c 	bl	f1ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    5194:	b340      	cbz	r0, 51e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    5196:	e001      	b.n	519c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    5198:	e009      	b.n	51ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    519a:	e00b      	b.n	51b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    519c:	980d      	ldr	r0, [sp, #52]	; 0x34
    519e:	f080 0001 	eor.w	r0, r0, #1
    51a2:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    51a6:	2000      	movs	r0, #0
    51a8:	b00f      	add	sp, #60	; 0x3c
    51aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51ae:	f240 512e 	movw	r1, #1326	; 0x52e
    51b2:	e01b      	b.n	51ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    51b4:	f1b9 0f00 	cmp.w	r9, #0
    51b8:	d1ca      	bne.n	5150 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    51ba:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    51be:	2800      	cmp	r0, #0
    51c0:	d0e3      	beq.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    51c2:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    51c6:	6920      	ldr	r0, [r4, #16]
    51c8:	1a41      	subs	r1, r0, r1
    51ca:	4628      	mov	r0, r5
    51cc:	f008 fe8e 	bl	deec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    51d0:	0400      	lsls	r0, r0, #16
    51d2:	e000      	b.n	51d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ea>
    51d4:	e006      	b.n	51e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    51d6:	0c00      	lsrs	r0, r0, #16
    51d8:	d0d7      	beq.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    51da:	9918      	ldr	r1, [sp, #96]	; 0x60
    51dc:	b101      	cbz	r1, 51e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    51de:	8008      	strh	r0, [r1, #0]
    51e0:	2001      	movs	r0, #1
    51e2:	e7e1      	b.n	51a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5bc>
    51e4:	2000      	movs	r0, #0
    51e6:	e7b9      	b.n	515c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    51e8:	f240 518c 	movw	r1, #1420	; 0x58c
    51ec:	2030      	movs	r0, #48	; 0x30
    51ee:	f7fc f8d7 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51f2:	0000      	.short	0x0000
    51f4:	200000e0 	.word	0x200000e0
    51f8:	b570      	push	{r4, r5, r6, lr}
    51fa:	4604      	mov	r4, r0
    51fc:	f00b fc4e 	bl	10a9c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    5200:	2864      	cmp	r0, #100	; 0x64
    5202:	d901      	bls.n	5208 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>
    5204:	4605      	mov	r5, r0
    5206:	e000      	b.n	520a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61e>
    5208:	2564      	movs	r5, #100	; 0x64
    520a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    520e:	2128      	movs	r1, #40	; 0x28
    5210:	f009 fef8 	bl	f004 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    5214:	4428      	add	r0, r5
    5216:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    521a:	f500 7010 	add.w	r0, r0, #576	; 0x240
    521e:	180e      	adds	r6, r1, r0
    5220:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5224:	2128      	movs	r1, #40	; 0x28
    5226:	f009 feed 	bl	f004 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    522a:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    522e:	4620      	mov	r0, r4
    5230:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5232:	f009 f960 	bl	e4f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5236:	4605      	mov	r5, r0
    5238:	4632      	mov	r2, r6
    523a:	4620      	mov	r0, r4
    523c:	6921      	ldr	r1, [r4, #16]
    523e:	f009 f95a 	bl	e4f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5242:	4909      	ldr	r1, [pc, #36]	; (5268 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    5244:	4285      	cmp	r5, r0
    5246:	60c8      	str	r0, [r1, #12]
    5248:	d200      	bcs.n	524c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x660>
    524a:	4628      	mov	r0, r5
    524c:	6088      	str	r0, [r1, #8]
    524e:	780a      	ldrb	r2, [r1, #0]
    5250:	b902      	cbnz	r2, 5254 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    5252:	60c8      	str	r0, [r1, #12]
    5254:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    5258:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    525c:	6108      	str	r0, [r1, #16]
    525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5262:	f005 bf13 	b.w	b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5266:	0000      	.short	0x0000
    5268:	200000e0 	.word	0x200000e0
    526c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    526e:	4604      	mov	r4, r0
    5270:	f005 ffda 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5274:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    5278:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    527c:	1ac0      	subs	r0, r0, r3
    527e:	eb61 0102 	sbc.w	r1, r1, r2
    5282:	2200      	movs	r2, #0
    5284:	4613      	mov	r3, r2
    5286:	1a12      	subs	r2, r2, r0
    5288:	418b      	sbcs	r3, r1
    528a:	db02      	blt.n	5292 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a6>
    528c:	f240 6109 	movw	r1, #1545	; 0x609
    5290:	e04d      	b.n	532e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    5292:	1c42      	adds	r2, r0, #1
    5294:	f171 0100 	sbcs.w	r1, r1, #0
    5298:	db02      	blt.n	52a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b4>
    529a:	f240 610a 	movw	r1, #1546	; 0x60a
    529e:	e046      	b.n	532e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    52a0:	6922      	ldr	r2, [r4, #16]
    52a2:	2100      	movs	r1, #0
    52a4:	b10a      	cbz	r2, 52aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6be>
    52a6:	fbb0 f1f2 	udiv	r1, r0, r2
    52aa:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    52ae:	280d      	cmp	r0, #13
    52b0:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    52b4:	d01b      	beq.n	52ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x702>
    52b6:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    52ba:	1853      	adds	r3, r2, r1
    52bc:	1ac3      	subs	r3, r0, r3
    52be:	b21b      	sxth	r3, r3
    52c0:	2b00      	cmp	r3, #0
    52c2:	db01      	blt.n	52c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6dc>
    52c4:	1c40      	adds	r0, r0, #1
    52c6:	e001      	b.n	52cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e0>
    52c8:	1c49      	adds	r1, r1, #1
    52ca:	1850      	adds	r0, r2, r1
    52cc:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    52d0:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    52d4:	f88d 0000 	strb.w	r0, [sp]
    52d8:	9800      	ldr	r0, [sp, #0]
    52da:	9000      	str	r0, [sp, #0]
    52dc:	f89d 0000 	ldrb.w	r0, [sp]
    52e0:	b940      	cbnz	r0, 52f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    52e2:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    52e6:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    52ea:	4288      	cmp	r0, r1
    52ec:	d102      	bne.n	52f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    52ee:	1c40      	adds	r0, r0, #1
    52f0:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    52f4:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    52f8:	1c40      	adds	r0, r0, #1
    52fa:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    52fe:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    5302:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    5306:	1a40      	subs	r0, r0, r1
    5308:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    530c:	1e40      	subs	r0, r0, #1
    530e:	4408      	add	r0, r1
    5310:	b285      	uxth	r5, r0
    5312:	e026      	b.n	5362 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    5314:	a801      	add	r0, sp, #4
    5316:	2300      	movs	r3, #0
    5318:	9000      	str	r0, [sp, #0]
    531a:	461a      	mov	r2, r3
    531c:	4620      	mov	r0, r4
    531e:	f7ff fd61 	bl	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    5322:	2800      	cmp	r0, #0
    5324:	d03a      	beq.n	539c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b0>
    5326:	2801      	cmp	r0, #1
    5328:	d004      	beq.n	5334 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x748>
    532a:	f240 6149 	movw	r1, #1609	; 0x649
    532e:	2030      	movs	r0, #48	; 0x30
    5330:	f7fc f836 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5334:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5338:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    533c:	1a42      	subs	r2, r0, r1
    533e:	b212      	sxth	r2, r2
    5340:	2a00      	cmp	r2, #0
    5342:	da09      	bge.n	5358 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    5344:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5348:	4402      	add	r2, r0
    534a:	1aaa      	subs	r2, r5, r2
    534c:	b212      	sxth	r2, r2
    534e:	2a00      	cmp	r2, #0
    5350:	da02      	bge.n	5358 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    5352:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    5356:	e004      	b.n	5362 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    5358:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    535c:	4408      	add	r0, r1
    535e:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5362:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    5366:	1a68      	subs	r0, r5, r1
    5368:	b200      	sxth	r0, r0
    536a:	2800      	cmp	r0, #0
    536c:	dad2      	bge.n	5314 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x728>
    536e:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    5372:	b188      	cbz	r0, 5398 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ac>
    5374:	f05f 0008 	movs.w	r0, #8
    5378:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    537c:	220b      	movs	r2, #11
    537e:	4908      	ldr	r1, [pc, #32]	; (53a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>)
    5380:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    5384:	f009 f87f 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5388:	4620      	mov	r0, r4
    538a:	f00a f8bf 	bl	f50c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    538e:	4620      	mov	r0, r4
    5390:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    5394:	f009 bf8f 	b.w	f2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    5398:	203e      	movs	r0, #62	; 0x3e
    539a:	e7ed      	b.n	5378 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78c>
    539c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    539e:	0000      	.short	0x0000
    53a0:	0000e7c5 	.word	0x0000e7c5
    53a4:	00000000 	.word	0x00000000
    53a8:	00010000 	.word	0x00010000
    53ac:	00000000 	.word	0x00000000
    53b0:	00010000 	.word	0x00010000
    53b4:	00000000 	.word	0x00000000
    53b8:	00001e14 	.word	0x00001e14
    53bc:	00001130 	.word	0x00001130
    53c0:	00fa01f4 	.word	0x00fa01f4
    53c4:	00640096 	.word	0x00640096
    53c8:	0032004b 	.word	0x0032004b
    53cc:	0014001e 	.word	0x0014001e
    53d0:	0005000a 	.word	0x0005000a
    53d4:	00010002 	.word	0x00010002

000053d8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    53d8:	b510      	push	{r4, lr}
    53da:	4604      	mov	r4, r0
    53dc:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    53e0:	6921      	ldr	r1, [r4, #16]
    53e2:	4288      	cmp	r0, r1
    53e4:	d109      	bne.n	53fa <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    53e6:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    53ea:	8b22      	ldrh	r2, [r4, #24]
    53ec:	4291      	cmp	r1, r2
    53ee:	d104      	bne.n	53fa <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    53f0:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    53f4:	8b62      	ldrh	r2, [r4, #26]
    53f6:	4291      	cmp	r1, r2
    53f8:	d014      	beq.n	5424 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    53fa:	8821      	ldrh	r1, [r4, #0]
    53fc:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    5400:	f008 fc91 	bl	dd26 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5404:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    5408:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    540c:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    5410:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    5414:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    5418:	2209      	movs	r2, #9
    541a:	4907      	ldr	r1, [pc, #28]	; (5438 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    541c:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    5420:	f009 f845 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5424:	2102      	movs	r1, #2
    5426:	4620      	mov	r0, r4
    5428:	f7fd fd80 	bl	2f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    542c:	2000      	movs	r0, #0
    542e:	f804 0f9e 	strb.w	r0, [r4, #158]!
    5432:	2003      	movs	r0, #3
    5434:	70e0      	strb	r0, [r4, #3]
    5436:	bd10      	pop	{r4, pc}
    5438:	0000e809 	.word	0x0000e809

0000543c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    543c:	4806      	ldr	r0, [pc, #24]	; (5458 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    543e:	4905      	ldr	r1, [pc, #20]	; (5454 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    5440:	6501      	str	r1, [r0, #80]	; 0x50
    5442:	4906      	ldr	r1, [pc, #24]	; (545c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    5444:	6541      	str	r1, [r0, #84]	; 0x54
    5446:	4807      	ldr	r0, [pc, #28]	; (5464 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    5448:	4905      	ldr	r1, [pc, #20]	; (5460 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    544a:	6501      	str	r1, [r0, #80]	; 0x50
    544c:	4906      	ldr	r1, [pc, #24]	; (5468 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    544e:	6541      	str	r1, [r0, #84]	; 0x54
    5450:	4770      	bx	lr
    5452:	0000      	.short	0x0000
    5454:	000067bd 	.word	0x000067bd
    5458:	20000114 	.word	0x20000114
    545c:	000068a1 	.word	0x000068a1
    5460:	0000f72d 	.word	0x0000f72d
    5464:	200001c0 	.word	0x200001c0
    5468:	0000f757 	.word	0x0000f757

0000546c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    546c:	481e      	ldr	r0, [pc, #120]	; (54e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    546e:	491d      	ldr	r1, [pc, #116]	; (54e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    5470:	6081      	str	r1, [r0, #8]
    5472:	491e      	ldr	r1, [pc, #120]	; (54ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    5474:	6041      	str	r1, [r0, #4]
    5476:	491e      	ldr	r1, [pc, #120]	; (54f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    5478:	6001      	str	r1, [r0, #0]
    547a:	491e      	ldr	r1, [pc, #120]	; (54f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    547c:	6281      	str	r1, [r0, #40]	; 0x28
    547e:	491e      	ldr	r1, [pc, #120]	; (54f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    5480:	62c1      	str	r1, [r0, #44]	; 0x2c
    5482:	491e      	ldr	r1, [pc, #120]	; (54fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    5484:	60c1      	str	r1, [r0, #12]
    5486:	491e      	ldr	r1, [pc, #120]	; (5500 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    5488:	6181      	str	r1, [r0, #24]
    548a:	491e      	ldr	r1, [pc, #120]	; (5504 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    548c:	6301      	str	r1, [r0, #48]	; 0x30
    548e:	491e      	ldr	r1, [pc, #120]	; (5508 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    5490:	6201      	str	r1, [r0, #32]
    5492:	491e      	ldr	r1, [pc, #120]	; (550c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    5494:	64c1      	str	r1, [r0, #76]	; 0x4c
    5496:	491e      	ldr	r1, [pc, #120]	; (5510 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    5498:	6481      	str	r1, [r0, #72]	; 0x48
    549a:	491e      	ldr	r1, [pc, #120]	; (5514 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    549c:	6441      	str	r1, [r0, #68]	; 0x44
    549e:	491e      	ldr	r1, [pc, #120]	; (5518 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    54a0:	6341      	str	r1, [r0, #52]	; 0x34
    54a2:	491e      	ldr	r1, [pc, #120]	; (551c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    54a4:	61c1      	str	r1, [r0, #28]
    54a6:	491e      	ldr	r1, [pc, #120]	; (5520 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    54a8:	6241      	str	r1, [r0, #36]	; 0x24
    54aa:	481f      	ldr	r0, [pc, #124]	; (5528 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    54ac:	491d      	ldr	r1, [pc, #116]	; (5524 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    54ae:	6081      	str	r1, [r0, #8]
    54b0:	491e      	ldr	r1, [pc, #120]	; (552c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    54b2:	61c1      	str	r1, [r0, #28]
    54b4:	491e      	ldr	r1, [pc, #120]	; (5530 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    54b6:	6241      	str	r1, [r0, #36]	; 0x24
    54b8:	491e      	ldr	r1, [pc, #120]	; (5534 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    54ba:	62c1      	str	r1, [r0, #44]	; 0x2c
    54bc:	491e      	ldr	r1, [pc, #120]	; (5538 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    54be:	6101      	str	r1, [r0, #16]
    54c0:	491e      	ldr	r1, [pc, #120]	; (553c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    54c2:	6141      	str	r1, [r0, #20]
    54c4:	491e      	ldr	r1, [pc, #120]	; (5540 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    54c6:	6441      	str	r1, [r0, #68]	; 0x44
    54c8:	491e      	ldr	r1, [pc, #120]	; (5544 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    54ca:	6341      	str	r1, [r0, #52]	; 0x34
    54cc:	491e      	ldr	r1, [pc, #120]	; (5548 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    54ce:	6181      	str	r1, [r0, #24]
    54d0:	491e      	ldr	r1, [pc, #120]	; (554c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    54d2:	6301      	str	r1, [r0, #48]	; 0x30
    54d4:	491e      	ldr	r1, [pc, #120]	; (5550 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    54d6:	6481      	str	r1, [r0, #72]	; 0x48
    54d8:	491e      	ldr	r1, [pc, #120]	; (5554 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    54da:	64c1      	str	r1, [r0, #76]	; 0x4c
    54dc:	491e      	ldr	r1, [pc, #120]	; (5558 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    54de:	6381      	str	r1, [r0, #56]	; 0x38
    54e0:	4770      	bx	lr
    54e2:	0000      	.short	0x0000
    54e4:	00006be1 	.word	0x00006be1
    54e8:	20000114 	.word	0x20000114
    54ec:	000065ad 	.word	0x000065ad
    54f0:	00006619 	.word	0x00006619
    54f4:	0000f5ef 	.word	0x0000f5ef
    54f8:	0000f639 	.word	0x0000f639
    54fc:	000066d9 	.word	0x000066d9
    5500:	0000f651 	.word	0x0000f651
    5504:	00006ca5 	.word	0x00006ca5
    5508:	00006775 	.word	0x00006775
    550c:	0000f5c1 	.word	0x0000f5c1
    5510:	0000f59b 	.word	0x0000f59b
    5514:	00006b59 	.word	0x00006b59
    5518:	00006b8d 	.word	0x00006b8d
    551c:	00006c19 	.word	0x00006c19
    5520:	00006781 	.word	0x00006781
    5524:	0000f8a1 	.word	0x0000f8a1
    5528:	200001c0 	.word	0x200001c0
    552c:	00006d81 	.word	0x00006d81
    5530:	0000f729 	.word	0x0000f729
    5534:	0000f7c1 	.word	0x0000f7c1
    5538:	0000f703 	.word	0x0000f703
    553c:	0000f883 	.word	0x0000f883
    5540:	0000f831 	.word	0x0000f831
    5544:	0000f861 	.word	0x0000f861
    5548:	00006d0d 	.word	0x00006d0d
    554c:	0000f8c3 	.word	0x0000f8c3
    5550:	0000f787 	.word	0x0000f787
    5554:	0000f7b1 	.word	0x0000f7b1
    5558:	0000f87f 	.word	0x0000f87f

0000555c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    555c:	4806      	ldr	r0, [pc, #24]	; (5578 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    555e:	4905      	ldr	r1, [pc, #20]	; (5574 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    5560:	6581      	str	r1, [r0, #88]	; 0x58
    5562:	4906      	ldr	r1, [pc, #24]	; (557c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    5564:	6601      	str	r1, [r0, #96]	; 0x60
    5566:	4807      	ldr	r0, [pc, #28]	; (5584 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    5568:	4905      	ldr	r1, [pc, #20]	; (5580 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    556a:	6581      	str	r1, [r0, #88]	; 0x58
    556c:	4906      	ldr	r1, [pc, #24]	; (5588 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    556e:	65c1      	str	r1, [r0, #92]	; 0x5c
    5570:	4770      	bx	lr
    5572:	0000      	.short	0x0000
    5574:	00006921 	.word	0x00006921
    5578:	20000114 	.word	0x20000114
    557c:	00006a05 	.word	0x00006a05
    5580:	0000f7e7 	.word	0x0000f7e7
    5584:	200001c0 	.word	0x200001c0
    5588:	0000f811 	.word	0x0000f811

0000558c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    558e:	4c7c      	ldr	r4, [pc, #496]	; (5780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    5590:	2101      	movs	r1, #1
    5592:	f1a4 0610 	sub.w	r6, r4, #16
    5596:	7021      	strb	r1, [r4, #0]
    5598:	2500      	movs	r5, #0
    559a:	6060      	str	r0, [r4, #4]
    559c:	8075      	strh	r5, [r6, #2]
    559e:	7075      	strb	r5, [r6, #1]
    55a0:	7035      	strb	r5, [r6, #0]
    55a2:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    55a6:	8800      	ldrh	r0, [r0, #0]
    55a8:	f7fc fb0c 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    55ac:	b180      	cbz	r0, 55d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    55ae:	6860      	ldr	r0, [r4, #4]
    55b0:	8800      	ldrh	r0, [r0, #0]
    55b2:	f7fc fd6f 	bl	2094 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    55b6:	6860      	ldr	r0, [r4, #4]
    55b8:	8800      	ldrh	r0, [r0, #0]
    55ba:	f7fc fd13 	bl	1fe4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    55be:	6860      	ldr	r0, [r4, #4]
    55c0:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    55c4:	b1c9      	cbz	r1, 55fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    55c6:	3080      	adds	r0, #128	; 0x80
    55c8:	f009 ffaf 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    55cc:	b118      	cbz	r0, 55d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    55ce:	e014      	b.n	55fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    55d0:	f640 5159 	movw	r1, #3417	; 0xd59
    55d4:	e06c      	b.n	56b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    55d6:	6860      	ldr	r0, [r4, #4]
    55d8:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    55dc:	f88d 1000 	strb.w	r1, [sp]
    55e0:	9900      	ldr	r1, [sp, #0]
    55e2:	9100      	str	r1, [sp, #0]
    55e4:	f89d 1000 	ldrb.w	r1, [sp]
    55e8:	b139      	cbz	r1, 55fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    55ea:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    55ee:	2301      	movs	r3, #1
    55f0:	4619      	mov	r1, r3
    55f2:	3080      	adds	r0, #128	; 0x80
    55f4:	f008 fbb0 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    55f8:	b180      	cbz	r0, 561c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    55fa:	6860      	ldr	r0, [r4, #4]
    55fc:	3080      	adds	r0, #128	; 0x80
    55fe:	f009 ff94 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5602:	b128      	cbz	r0, 5610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    5604:	6860      	ldr	r0, [r4, #4]
    5606:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    560a:	bf00      	nop
    560c:	f000 fbb4 	bl	5d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>
    5610:	6860      	ldr	r0, [r4, #4]
    5612:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    5616:	b189      	cbz	r1, 563c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    5618:	80b5      	strh	r5, [r6, #4]
    561a:	e01e      	b.n	565a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    561c:	6860      	ldr	r0, [r4, #4]
    561e:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    5622:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5626:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    562a:	2100      	movs	r1, #0
    562c:	2002      	movs	r0, #2
    562e:	f000 fe63 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5632:	6860      	ldr	r0, [r4, #4]
    5634:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    5638:	2002      	movs	r0, #2
    563a:	e7e7      	b.n	560c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    563c:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    5640:	f88d 1000 	strb.w	r1, [sp]
    5644:	9900      	ldr	r1, [sp, #0]
    5646:	9100      	str	r1, [sp, #0]
    5648:	f89d 1000 	ldrb.w	r1, [sp]
    564c:	b919      	cbnz	r1, 5656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    564e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    5650:	8b02      	ldrh	r2, [r0, #24]
    5652:	4291      	cmp	r1, r2
    5654:	d800      	bhi.n	5658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    5656:	8b01      	ldrh	r1, [r0, #24]
    5658:	80b1      	strh	r1, [r6, #4]
    565a:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    565e:	1e49      	subs	r1, r1, #1
    5660:	b28f      	uxth	r7, r1
    5662:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    5666:	4439      	add	r1, r7
    5668:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    566c:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    5670:	4439      	add	r1, r7
    5672:	8001      	strh	r1, [r0, #0]
    5674:	f001 fbb2 	bl	6ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    5678:	b120      	cbz	r0, 5684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    567a:	6860      	ldr	r0, [r4, #4]
    567c:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    5680:	4439      	add	r1, r7
    5682:	6001      	str	r1, [r0, #0]
    5684:	6861      	ldr	r1, [r4, #4]
    5686:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    568a:	2801      	cmp	r0, #1
    568c:	d802      	bhi.n	5694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    568e:	1c40      	adds	r0, r0, #1
    5690:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    5694:	b10f      	cbz	r7, 569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    5696:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    569a:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    569e:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    56a2:	f101 0080 	add.w	r0, r1, #128	; 0x80
    56a6:	f008 fcfb 	bl	e0a0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    56aa:	b120      	cbz	r0, 56b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    56ac:	f44f 615a 	mov.w	r1, #3488	; 0xda0
    56b0:	2031      	movs	r0, #49	; 0x31
    56b2:	f7fb fe75 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56b6:	6860      	ldr	r0, [r4, #4]
    56b8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    56bc:	290a      	cmp	r1, #10
    56be:	d001      	beq.n	56c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    56c0:	290b      	cmp	r1, #11
    56c2:	d119      	bne.n	56f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    56c4:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    56c8:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    56cc:	1ad2      	subs	r2, r2, r3
    56ce:	b212      	sxth	r2, r2
    56d0:	2a00      	cmp	r2, #0
    56d2:	db11      	blt.n	56f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    56d4:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    56d8:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    56dc:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    56e0:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    56e4:	2103      	movs	r1, #3
    56e6:	f7fd fc21 	bl	2f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    56ea:	6860      	ldr	r0, [r4, #4]
    56ec:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    56f0:	21ff      	movs	r1, #255	; 0xff
    56f2:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    56f6:	e026      	b.n	5746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    56f8:	2925      	cmp	r1, #37	; 0x25
    56fa:	d111      	bne.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    56fc:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5700:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5704:	1a89      	subs	r1, r1, r2
    5706:	b209      	sxth	r1, r1
    5708:	2900      	cmp	r1, #0
    570a:	db09      	blt.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    570c:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5710:	f000 feac 	bl	646c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    5714:	2800      	cmp	r0, #0
    5716:	6860      	ldr	r0, [r4, #4]
    5718:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    571c:	d029      	beq.n	5772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    571e:	e012      	b.n	5746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5720:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5724:	2925      	cmp	r1, #37	; 0x25
    5726:	d001      	beq.n	572c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    5728:	2927      	cmp	r1, #39	; 0x27
    572a:	d10c      	bne.n	5746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    572c:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5730:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5734:	1a89      	subs	r1, r1, r2
    5736:	b209      	sxth	r1, r1
    5738:	2900      	cmp	r1, #0
    573a:	db04      	blt.n	5746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    573c:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5740:	f000 fe94 	bl	646c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    5744:	b1a8      	cbz	r0, 5772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    5746:	480f      	ldr	r0, [pc, #60]	; (5784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    5748:	9000      	str	r0, [sp, #0]
    574a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    574e:	4b0e      	ldr	r3, [pc, #56]	; (5788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    5750:	4a0e      	ldr	r2, [pc, #56]	; (578c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    5752:	f7fc fd2d 	bl	21b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    5756:	6860      	ldr	r0, [r4, #4]
    5758:	2301      	movs	r3, #1
    575a:	2105      	movs	r1, #5
    575c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5760:	3080      	adds	r0, #128	; 0x80
    5762:	f008 faf9 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5766:	2800      	cmp	r0, #0
    5768:	d009      	beq.n	577e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    576a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    576e:	f7fc bd19 	b.w	21a4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    5772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5776:	2100      	movs	r1, #0
    5778:	4608      	mov	r0, r1
    577a:	f000 bbc9 	b.w	5f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5780:	2000010c 	.word	0x2000010c
    5784:	00005f11 	.word	0x00005f11
    5788:	00005a4d 	.word	0x00005a4d
    578c:	000063b9 	.word	0x000063b9
    5790:	4804      	ldr	r0, [pc, #16]	; (57a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    5792:	2100      	movs	r1, #0
    5794:	6840      	ldr	r0, [r0, #4]
    5796:	f820 1fd8 	strh.w	r1, [r0, #216]!
    579a:	7881      	ldrb	r1, [r0, #2]
    579c:	1c49      	adds	r1, r1, #1
    579e:	7081      	strb	r1, [r0, #2]
    57a0:	4770      	bx	lr
    57a2:	0000      	.short	0x0000
    57a4:	2000010c 	.word	0x2000010c
    57a8:	4807      	ldr	r0, [pc, #28]	; (57c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    57aa:	b510      	push	{r4, lr}
    57ac:	6841      	ldr	r1, [r0, #4]
    57ae:	f811 0fda 	ldrb.w	r0, [r1, #218]!
    57b2:	1e40      	subs	r0, r0, #1
    57b4:	b240      	sxtb	r0, r0
    57b6:	7008      	strb	r0, [r1, #0]
    57b8:	2800      	cmp	r0, #0
    57ba:	da04      	bge.n	57c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    57bc:	f240 2101 	movw	r1, #513	; 0x201
    57c0:	2031      	movs	r0, #49	; 0x31
    57c2:	f7fb fded 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57c6:	bd10      	pop	{r4, pc}
    57c8:	2000010c 	.word	0x2000010c
    57cc:	491d      	ldr	r1, [pc, #116]	; (5844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    57ce:	b508      	push	{r3, lr}
    57d0:	6849      	ldr	r1, [r1, #4]
    57d2:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    57d6:	b1c0      	cbz	r0, 580a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    57d8:	2a11      	cmp	r2, #17
    57da:	d006      	beq.n	57ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    57dc:	2a15      	cmp	r2, #21
    57de:	d007      	beq.n	57f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    57e0:	2a16      	cmp	r2, #22
    57e2:	d009      	beq.n	57f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    57e4:	2a1c      	cmp	r2, #28
    57e6:	d128      	bne.n	583a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    57e8:	e009      	b.n	57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    57ea:	2101      	movs	r1, #1
    57ec:	200b      	movs	r0, #11
    57ee:	e008      	b.n	5802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    57f0:	4814      	ldr	r0, [pc, #80]	; (5844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    57f2:	f009 ff3e 	bl	f672 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x166>
    57f6:	e006      	b.n	5806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    57f8:	f000 fd9c 	bl	6334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda8>
    57fc:	e003      	b.n	5806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    57fe:	2101      	movs	r1, #1
    5800:	2006      	movs	r0, #6
    5802:	f000 fd79 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5806:	2001      	movs	r0, #1
    5808:	bd08      	pop	{r3, pc}
    580a:	2a22      	cmp	r2, #34	; 0x22
    580c:	d004      	beq.n	5818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    580e:	2a2f      	cmp	r2, #47	; 0x2f
    5810:	d113      	bne.n	583a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    5812:	2101      	movs	r1, #1
    5814:	2011      	movs	r0, #17
    5816:	e7f4      	b.n	5802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5818:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    581c:	2802      	cmp	r0, #2
    581e:	d00e      	beq.n	583e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    5820:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5824:	2801      	cmp	r0, #1
    5826:	d108      	bne.n	583a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    5828:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    582c:	f88d 0000 	strb.w	r0, [sp]
    5830:	9800      	ldr	r0, [sp, #0]
    5832:	9000      	str	r0, [sp, #0]
    5834:	f89d 0000 	ldrb.w	r0, [sp]
    5838:	b108      	cbz	r0, 583e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    583a:	2000      	movs	r0, #0
    583c:	bd08      	pop	{r3, pc}
    583e:	2101      	movs	r1, #1
    5840:	2017      	movs	r0, #23
    5842:	e7de      	b.n	5802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5844:	2000010c 	.word	0x2000010c
    5848:	b538      	push	{r3, r4, r5, lr}
    584a:	2800      	cmp	r0, #0
    584c:	d176      	bne.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    584e:	4c3c      	ldr	r4, [pc, #240]	; (5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>)
    5850:	6860      	ldr	r0, [r4, #4]
    5852:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    5856:	07ca      	lsls	r2, r1, #31
    5858:	d002      	beq.n	5860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    585a:	2101      	movs	r1, #1
    585c:	2009      	movs	r0, #9
    585e:	e069      	b.n	5934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5860:	078a      	lsls	r2, r1, #30
    5862:	d50a      	bpl.n	587a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    5864:	2101      	movs	r1, #1
    5866:	200c      	movs	r0, #12
    5868:	f000 fd46 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    586c:	6860      	ldr	r0, [r4, #4]
    586e:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    5872:	f041 0101 	orr.w	r1, r1, #1
    5876:	7001      	strb	r1, [r0, #0]
    5878:	e05e      	b.n	5938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>
    587a:	074a      	lsls	r2, r1, #29
    587c:	d502      	bpl.n	5884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    587e:	2101      	movs	r1, #1
    5880:	2013      	movs	r0, #19
    5882:	e057      	b.n	5934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5884:	070a      	lsls	r2, r1, #28
    5886:	d506      	bpl.n	5896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    5888:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    588c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5890:	2101      	movs	r1, #1
    5892:	2007      	movs	r0, #7
    5894:	e04e      	b.n	5934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5896:	f011 0f30 	tst.w	r1, #48	; 0x30
    589a:	d047      	beq.n	592c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    589c:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    58a0:	f88d 1000 	strb.w	r1, [sp]
    58a4:	9900      	ldr	r1, [sp, #0]
    58a6:	9100      	str	r1, [sp, #0]
    58a8:	f89d 1000 	ldrb.w	r1, [sp]
    58ac:	bbd9      	cbnz	r1, 5926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    58ae:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    58b2:	2500      	movs	r5, #0
    58b4:	f88d 1000 	strb.w	r1, [sp]
    58b8:	9900      	ldr	r1, [sp, #0]
    58ba:	9100      	str	r1, [sp, #0]
    58bc:	f89d 1000 	ldrb.w	r1, [sp]
    58c0:	b1c1      	cbz	r1, 58f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    58c2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    58c6:	2925      	cmp	r1, #37	; 0x25
    58c8:	d02e      	beq.n	5928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    58ca:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    58ce:	2925      	cmp	r1, #37	; 0x25
    58d0:	d02a      	beq.n	5928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    58d2:	2300      	movs	r3, #0
    58d4:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    58d8:	f500 7199 	add.w	r1, r0, #306	; 0x132
    58dc:	f008 fdfd 	bl	e4da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    58e0:	6860      	ldr	r0, [r4, #4]
    58e2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    58e6:	f021 0120 	bic.w	r1, r1, #32
    58ea:	f041 0110 	orr.w	r1, r1, #16
    58ee:	6001      	str	r1, [r0, #0]
    58f0:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    58f4:	6860      	ldr	r0, [r4, #4]
    58f6:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    58fa:	06c9      	lsls	r1, r1, #27
    58fc:	d51e      	bpl.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    58fe:	f008 fe07 	bl	e510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5902:	2105      	movs	r1, #5
    5904:	6860      	ldr	r0, [r4, #4]
    5906:	f7ff f937 	bl	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    590a:	f000 f925 	bl	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    590e:	6861      	ldr	r1, [r4, #4]
    5910:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5914:	8bc2      	ldrh	r2, [r0, #30]
    5916:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    591a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    591c:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5920:	2101      	movs	r1, #1
    5922:	2015      	movs	r0, #21
    5924:	e006      	b.n	5934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5926:	e009      	b.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    5928:	2301      	movs	r3, #1
    592a:	e7d3      	b.n	58d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    592c:	0648      	lsls	r0, r1, #25
    592e:	d505      	bpl.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    5930:	2101      	movs	r1, #1
    5932:	2024      	movs	r0, #36	; 0x24
    5934:	f000 fce0 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5938:	2001      	movs	r0, #1
    593a:	bd38      	pop	{r3, r4, r5, pc}
    593c:	2000      	movs	r0, #0
    593e:	bd38      	pop	{r3, r4, r5, pc}
    5940:	2000010c 	.word	0x2000010c
    5944:	b570      	push	{r4, r5, r6, lr}
    5946:	460d      	mov	r5, r1
    5948:	4606      	mov	r6, r0
    594a:	f008 fd04 	bl	e356 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    594e:	4604      	mov	r4, r0
    5950:	4630      	mov	r0, r6
    5952:	f008 fd02 	bl	e35a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    5956:	4629      	mov	r1, r5
    5958:	f000 f81e 	bl	5998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    595c:	b1b8      	cbz	r0, 598e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    595e:	4620      	mov	r0, r4
    5960:	f008 faa4 	bl	deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5964:	0001      	movs	r1, r0
    5966:	d00d      	beq.n	5984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    5968:	480a      	ldr	r0, [pc, #40]	; (5994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x408>)
    596a:	6840      	ldr	r0, [r0, #4]
    596c:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5970:	428a      	cmp	r2, r1
    5972:	d007      	beq.n	5984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    5974:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    5978:	2901      	cmp	r1, #1
    597a:	d005      	beq.n	5988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    597c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    5980:	4220      	tst	r0, r4
    5982:	d004      	beq.n	598e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    5984:	2001      	movs	r0, #1
    5986:	bd70      	pop	{r4, r5, r6, pc}
    5988:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    598c:	e7f8      	b.n	5980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    598e:	2000      	movs	r0, #0
    5990:	bd70      	pop	{r4, r5, r6, pc}
    5992:	0000      	.short	0x0000
    5994:	2000010c 	.word	0x2000010c
    5998:	b570      	push	{r4, r5, r6, lr}
    599a:	460d      	mov	r5, r1
    599c:	4604      	mov	r4, r0
    599e:	f008 fa85 	bl	deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    59a2:	b350      	cbz	r0, 59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59a4:	4916      	ldr	r1, [pc, #88]	; (5a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>)
    59a6:	6849      	ldr	r1, [r1, #4]
    59a8:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    59ac:	4282      	cmp	r2, r0
    59ae:	d024      	beq.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59b0:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    59b4:	2b01      	cmp	r3, #1
    59b6:	d005      	beq.n	59c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    59b8:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    59bc:	4223      	tst	r3, r4
    59be:	d013      	beq.n	59e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    59c0:	b11d      	cbz	r5, 59ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    59c2:	e01a      	b.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59c4:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    59c8:	e7f8      	b.n	59bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    59ca:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    59ce:	4221      	tst	r1, r4
    59d0:	d113      	bne.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59d2:	b15a      	cbz	r2, 59ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    59d4:	2a04      	cmp	r2, #4
    59d6:	d00e      	beq.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    59d8:	2804      	cmp	r0, #4
    59da:	d00c      	beq.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    59dc:	2a08      	cmp	r2, #8
    59de:	d00a      	beq.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    59e0:	2808      	cmp	r0, #8
    59e2:	d008      	beq.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    59e4:	4282      	cmp	r2, r0
    59e6:	d908      	bls.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59e8:	2000      	movs	r0, #0
    59ea:	bd70      	pop	{r4, r5, r6, pc}
    59ec:	f240 11a3 	movw	r1, #419	; 0x1a3
    59f0:	2006      	movs	r0, #6
    59f2:	f7fb fcd5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59f6:	4282      	cmp	r2, r0
    59f8:	d3f6      	bcc.n	59e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    59fa:	2001      	movs	r0, #1
    59fc:	bd70      	pop	{r4, r5, r6, pc}
    59fe:	0000      	.short	0x0000
    5a00:	2000010c 	.word	0x2000010c
    5a04:	b510      	push	{r4, lr}
    5a06:	4c10      	ldr	r4, [pc, #64]	; (5a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>)
    5a08:	2301      	movs	r3, #1
    5a0a:	2100      	movs	r1, #0
    5a0c:	6860      	ldr	r0, [r4, #4]
    5a0e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5a12:	3080      	adds	r0, #128	; 0x80
    5a14:	f008 f9a0 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a18:	b140      	cbz	r0, 5a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a0>
    5a1a:	6860      	ldr	r0, [r4, #4]
    5a1c:	2301      	movs	r3, #1
    5a1e:	2104      	movs	r1, #4
    5a20:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a24:	3080      	adds	r0, #128	; 0x80
    5a26:	f008 f997 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a2a:	b108      	cbz	r0, 5a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>
    5a2c:	2000      	movs	r0, #0
    5a2e:	bd10      	pop	{r4, pc}
    5a30:	6860      	ldr	r0, [r4, #4]
    5a32:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5a36:	2800      	cmp	r0, #0
    5a38:	d0f9      	beq.n	5a2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    5a3a:	2100      	movs	r1, #0
    5a3c:	2012      	movs	r0, #18
    5a3e:	f000 fc5b 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5a42:	2001      	movs	r0, #1
    5a44:	bd10      	pop	{r4, pc}
    5a46:	0000      	.short	0x0000
    5a48:	2000010c 	.word	0x2000010c
    5a4c:	490d      	ldr	r1, [pc, #52]	; (5a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f8>)
    5a4e:	4602      	mov	r2, r0
    5a50:	7848      	ldrb	r0, [r1, #1]
    5a52:	b9a0      	cbnz	r0, 5a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5a54:	f101 0010 	add.w	r0, r1, #16
    5a58:	6840      	ldr	r0, [r0, #4]
    5a5a:	b142      	cbz	r2, 5a6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    5a5c:	7889      	ldrb	r1, [r1, #2]
    5a5e:	0709      	lsls	r1, r1, #28
    5a60:	d503      	bpl.n	5a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4de>
    5a62:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5a66:	2807      	cmp	r0, #7
    5a68:	d009      	beq.n	5a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5a6a:	2001      	movs	r0, #1
    5a6c:	4770      	bx	lr
    5a6e:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    5a72:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a74:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5a76:	428a      	cmp	r2, r1
    5a78:	d801      	bhi.n	5a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5a7a:	f7ff b859 	b.w	4b30 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    5a7e:	2000      	movs	r0, #0
    5a80:	4770      	bx	lr
    5a82:	0000      	.short	0x0000
    5a84:	200000fc 	.word	0x200000fc
    5a88:	b538      	push	{r3, r4, r5, lr}
    5a8a:	4c32      	ldr	r4, [pc, #200]	; (5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c8>)
    5a8c:	4605      	mov	r5, r0
    5a8e:	6860      	ldr	r0, [r4, #4]
    5a90:	3080      	adds	r0, #128	; 0x80
    5a92:	f009 fd4a 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5a96:	2800      	cmp	r0, #0
    5a98:	d15b      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5a9a:	2d00      	cmp	r5, #0
    5a9c:	d159      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5a9e:	6860      	ldr	r0, [r4, #4]
    5aa0:	2301      	movs	r3, #1
    5aa2:	4619      	mov	r1, r3
    5aa4:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5aa8:	3080      	adds	r0, #128	; 0x80
    5aaa:	f008 f955 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5aae:	2800      	cmp	r0, #0
    5ab0:	d14f      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5ab2:	6860      	ldr	r0, [r4, #4]
    5ab4:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5ab8:	f88d 1000 	strb.w	r1, [sp]
    5abc:	9900      	ldr	r1, [sp, #0]
    5abe:	9100      	str	r1, [sp, #0]
    5ac0:	f89d 2000 	ldrb.w	r2, [sp]
    5ac4:	2100      	movs	r1, #0
    5ac6:	b142      	cbz	r2, 5ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x54e>
    5ac8:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5acc:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5ad0:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5ad4:	2100      	movs	r1, #0
    5ad6:	2002      	movs	r0, #2
    5ad8:	e030      	b.n	5b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    5ada:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ade:	2301      	movs	r3, #1
    5ae0:	2104      	movs	r1, #4
    5ae2:	3080      	adds	r0, #128	; 0x80
    5ae4:	f008 f938 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ae8:	4605      	mov	r5, r0
    5aea:	f7ff fead 	bl	5848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    5aee:	2800      	cmp	r0, #0
    5af0:	d12f      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5af2:	4628      	mov	r0, r5
    5af4:	f7ff fe6a 	bl	57cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    5af8:	2800      	cmp	r0, #0
    5afa:	d12a      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5afc:	f7ff ff82 	bl	5a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x478>
    5b00:	2800      	cmp	r0, #0
    5b02:	d126      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b04:	6860      	ldr	r0, [r4, #4]
    5b06:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5b0a:	2909      	cmp	r1, #9
    5b0c:	d01a      	beq.n	5b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b0e:	2d00      	cmp	r5, #0
    5b10:	d11f      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b12:	f000 fb1d 	bl	6150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    5b16:	2800      	cmp	r0, #0
    5b18:	d11b      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b1a:	6860      	ldr	r0, [r4, #4]
    5b1c:	2301      	movs	r3, #1
    5b1e:	2100      	movs	r1, #0
    5b20:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5b24:	3080      	adds	r0, #128	; 0x80
    5b26:	f008 f917 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b2a:	2800      	cmp	r0, #0
    5b2c:	d011      	beq.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b2e:	6860      	ldr	r0, [r4, #4]
    5b30:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5b34:	2800      	cmp	r0, #0
    5b36:	d00c      	beq.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b38:	2100      	movs	r1, #0
    5b3a:	20ff      	movs	r0, #255	; 0xff
    5b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b40:	f000 bbda 	b.w	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5b44:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    5b48:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5b4c:	2100      	movs	r1, #0
    5b4e:	2007      	movs	r0, #7
    5b50:	e7f4      	b.n	5b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    5b52:	bd38      	pop	{r3, r4, r5, pc}
    5b54:	2000010c 	.word	0x2000010c
    5b58:	4808      	ldr	r0, [pc, #32]	; (5b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f0>)
    5b5a:	6843      	ldr	r3, [r0, #4]
    5b5c:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5b60:	2801      	cmp	r0, #1
    5b62:	d006      	beq.n	5b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e6>
    5b64:	f503 72b1 	add.w	r2, r3, #354	; 0x162
    5b68:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5b6c:	8818      	ldrh	r0, [r3, #0]
    5b6e:	f7fd bd47 	b.w	3600 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5b72:	2002      	movs	r0, #2
    5b74:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5b78:	4770      	bx	lr
    5b7a:	0000      	.short	0x0000
    5b7c:	2000010c 	.word	0x2000010c
    5b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b82:	4d2b      	ldr	r5, [pc, #172]	; (5c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5b84:	0006      	movs	r6, r0
    5b86:	f105 0410 	add.w	r4, r5, #16
    5b8a:	d133      	bne.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5b8c:	f000 f8aa 	bl	5ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    5b90:	f000 f852 	bl	5c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    5b94:	0006      	movs	r6, r0
    5b96:	d12d      	bne.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5b98:	8869      	ldrh	r1, [r5, #2]
    5b9a:	0748      	lsls	r0, r1, #29
    5b9c:	d506      	bpl.n	5bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    5b9e:	6860      	ldr	r0, [r4, #4]
    5ba0:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5ba4:	2806      	cmp	r0, #6
    5ba6:	d101      	bne.n	5bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    5ba8:	2001      	movs	r0, #1
    5baa:	7028      	strb	r0, [r5, #0]
    5bac:	0788      	lsls	r0, r1, #30
    5bae:	d516      	bpl.n	5bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5bb0:	68a8      	ldr	r0, [r5, #8]
    5bb2:	78c0      	ldrb	r0, [r0, #3]
    5bb4:	282b      	cmp	r0, #43	; 0x2b
    5bb6:	d207      	bcs.n	5bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    5bb8:	491e      	ldr	r1, [pc, #120]	; (5c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    5bba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5bbe:	b119      	cbz	r1, 5bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    5bc0:	481b      	ldr	r0, [pc, #108]	; (5c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5bc2:	3010      	adds	r0, #16
    5bc4:	4788      	blx	r1
    5bc6:	e00a      	b.n	5bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5bc8:	28ff      	cmp	r0, #255	; 0xff
    5bca:	d004      	beq.n	5bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    5bcc:	f640 1102 	movw	r1, #2306	; 0x902
    5bd0:	2031      	movs	r0, #49	; 0x31
    5bd2:	f7fb fbe5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bd6:	4816      	ldr	r0, [pc, #88]	; (5c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5bd8:	3010      	adds	r0, #16
    5bda:	f009 fd89 	bl	f6f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    5bde:	78a8      	ldrb	r0, [r5, #2]
    5be0:	06c0      	lsls	r0, r0, #27
    5be2:	d507      	bpl.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5be4:	6860      	ldr	r0, [r4, #4]
    5be6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5bea:	290a      	cmp	r1, #10
    5bec:	d102      	bne.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5bee:	210b      	movs	r1, #11
    5bf0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5bf4:	7868      	ldrb	r0, [r5, #1]
    5bf6:	0700      	lsls	r0, r0, #28
    5bf8:	d518      	bpl.n	5c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5bfa:	6860      	ldr	r0, [r4, #4]
    5bfc:	2301      	movs	r3, #1
    5bfe:	2105      	movs	r1, #5
    5c00:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c04:	3080      	adds	r0, #128	; 0x80
    5c06:	f008 f8a7 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c0a:	b108      	cbz	r0, 5c10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x684>
    5c0c:	2608      	movs	r6, #8
    5c0e:	e00d      	b.n	5c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5c10:	2500      	movs	r5, #0
    5c12:	4669      	mov	r1, sp
    5c14:	2003      	movs	r0, #3
    5c16:	9500      	str	r5, [sp, #0]
    5c18:	f7fc fb8c 	bl	2334 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5c1c:	9800      	ldr	r0, [sp, #0]
    5c1e:	b128      	cbz	r0, 5c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5c20:	7205      	strb	r5, [r0, #8]
    5c22:	222a      	movs	r2, #42	; 0x2a
    5c24:	6861      	ldr	r1, [r4, #4]
    5c26:	9800      	ldr	r0, [sp, #0]
    5c28:	f008 fc2d 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5c2c:	4630      	mov	r0, r6
    5c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c30:	200000fc 	.word	0x200000fc
    5c34:	200001c0 	.word	0x200001c0
    5c38:	b570      	push	{r4, r5, r6, lr}
    5c3a:	4d28      	ldr	r5, [pc, #160]	; (5cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5c3c:	2000      	movs	r0, #0
    5c3e:	78a9      	ldrb	r1, [r5, #2]
    5c40:	07c9      	lsls	r1, r1, #31
    5c42:	d017      	beq.n	5c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>
    5c44:	68e8      	ldr	r0, [r5, #12]
    5c46:	f105 0410 	add.w	r4, r5, #16
    5c4a:	2301      	movs	r3, #1
    5c4c:	78c6      	ldrb	r6, [r0, #3]
    5c4e:	6860      	ldr	r0, [r4, #4]
    5c50:	2105      	movs	r1, #5
    5c52:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c56:	3080      	adds	r0, #128	; 0x80
    5c58:	f008 f87e 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c5c:	b158      	cbz	r0, 5c76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ea>
    5c5e:	1eb6      	subs	r6, r6, #2
    5c60:	2e0a      	cmp	r6, #10
    5c62:	d206      	bcs.n	5c72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    5c64:	e8df f006 	tbb	[pc, r6]
    5c68:	05050707 	.word	0x05050707
    5c6c:	05050707 	.word	0x05050707
    5c70:	0707      	.short	0x0707
    5c72:	2008      	movs	r0, #8
    5c74:	bd70      	pop	{r4, r5, r6, pc}
    5c76:	68e8      	ldr	r0, [r5, #12]
    5c78:	f7fd fa78 	bl	316c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5c7c:	b338      	cbz	r0, 5cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5c7e:	68e8      	ldr	r0, [r5, #12]
    5c80:	78c5      	ldrb	r5, [r0, #3]
    5c82:	b11d      	cbz	r5, 5c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    5c84:	2d01      	cmp	r5, #1
    5c86:	d001      	beq.n	5c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    5c88:	2d16      	cmp	r5, #22
    5c8a:	d113      	bne.n	5cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5c8c:	6860      	ldr	r0, [r4, #4]
    5c8e:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5c92:	f008 f8b9 	bl	de08 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5c96:	b168      	cbz	r0, 5cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5c98:	6861      	ldr	r1, [r4, #4]
    5c9a:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    5c9e:	2820      	cmp	r0, #32
    5ca0:	d008      	beq.n	5cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5ca2:	2821      	cmp	r0, #33	; 0x21
    5ca4:	d003      	beq.n	5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    5ca6:	2d16      	cmp	r5, #22
    5ca8:	d00f      	beq.n	5cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    5caa:	2002      	movs	r0, #2
    5cac:	bd70      	pop	{r4, r5, r6, pc}
    5cae:	202e      	movs	r0, #46	; 0x2e
    5cb0:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5cb4:	2d2b      	cmp	r5, #43	; 0x2b
    5cb6:	d20a      	bcs.n	5cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5cb8:	4809      	ldr	r0, [pc, #36]	; (5ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    5cba:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5cbe:	b131      	cbz	r1, 5cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cc4:	4805      	ldr	r0, [pc, #20]	; (5cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5cc6:	3010      	adds	r0, #16
    5cc8:	4708      	bx	r1
    5cca:	2020      	movs	r0, #32
    5ccc:	bd70      	pop	{r4, r5, r6, pc}
    5cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cd2:	4802      	ldr	r0, [pc, #8]	; (5cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5cd4:	3010      	adds	r0, #16
    5cd6:	f000 bd59 	b.w	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    5cda:	0000      	.short	0x0000
    5cdc:	200000fc 	.word	0x200000fc
    5ce0:	20000114 	.word	0x20000114
    5ce4:	b570      	push	{r4, r5, r6, lr}
    5ce6:	4e23      	ldr	r6, [pc, #140]	; (5d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>)
    5ce8:	78b0      	ldrb	r0, [r6, #2]
    5cea:	0700      	lsls	r0, r0, #28
    5cec:	d540      	bpl.n	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5cee:	f106 0410 	add.w	r4, r6, #16
    5cf2:	6860      	ldr	r0, [r4, #4]
    5cf4:	3080      	adds	r0, #128	; 0x80
    5cf6:	f009 fc18 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5cfa:	b148      	cbz	r0, 5d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    5cfc:	6860      	ldr	r0, [r4, #4]
    5cfe:	21fe      	movs	r1, #254	; 0xfe
    5d00:	2500      	movs	r5, #0
    5d02:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5d06:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5d0a:	291a      	cmp	r1, #26
    5d0c:	d10c      	bne.n	5d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79c>
    5d0e:	e004      	b.n	5d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78e>
    5d10:	f640 110e 	movw	r1, #2318	; 0x90e
    5d14:	2031      	movs	r0, #49	; 0x31
    5d16:	f7fb fb43 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d1a:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5d1e:	f7ff fd43 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    5d22:	6860      	ldr	r0, [r4, #4]
    5d24:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5d28:	6860      	ldr	r0, [r4, #4]
    5d2a:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5d2e:	2920      	cmp	r1, #32
    5d30:	d002      	beq.n	5d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    5d32:	2931      	cmp	r1, #49	; 0x31
    5d34:	d113      	bne.n	5d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5d36:	e00b      	b.n	5d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c4>
    5d38:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5d3c:	f008 f864 	bl	de08 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5d40:	b108      	cbz	r0, 5d46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ba>
    5d42:	202e      	movs	r0, #46	; 0x2e
    5d44:	e000      	b.n	5d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    5d46:	2021      	movs	r0, #33	; 0x21
    5d48:	6861      	ldr	r1, [r4, #4]
    5d4a:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5d4e:	e006      	b.n	5d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5d50:	2101      	movs	r1, #1
    5d52:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5d56:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5d5a:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5d5e:	6860      	ldr	r0, [r4, #4]
    5d60:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5d64:	2907      	cmp	r1, #7
    5d66:	d103      	bne.n	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5d68:	2102      	movs	r1, #2
    5d6a:	7031      	strb	r1, [r6, #0]
    5d6c:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5d70:	bd70      	pop	{r4, r5, r6, pc}
    5d72:	0000      	.short	0x0000
    5d74:	200000fc 	.word	0x200000fc
    5d78:	b538      	push	{r3, r4, r5, lr}
    5d7a:	4605      	mov	r5, r0
    5d7c:	4668      	mov	r0, sp
    5d7e:	f7fc f973 	bl	2068 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5d82:	b308      	cbz	r0, 5dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    5d84:	2222      	movs	r2, #34	; 0x22
    5d86:	2100      	movs	r1, #0
    5d88:	9800      	ldr	r0, [sp, #0]
    5d8a:	f00b f88b 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d8e:	2103      	movs	r1, #3
    5d90:	9800      	ldr	r0, [sp, #0]
    5d92:	f008 fafa 	bl	e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5d96:	9800      	ldr	r0, [sp, #0]
    5d98:	7801      	ldrb	r1, [r0, #0]
    5d9a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5d9e:	7001      	strb	r1, [r0, #0]
    5da0:	4629      	mov	r1, r5
    5da2:	f7fd f9f3 	bl	318c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5da6:	4c59      	ldr	r4, [pc, #356]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5da8:	2d11      	cmp	r5, #17
    5daa:	d02d      	beq.n	5e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87c>
    5dac:	dc0f      	bgt.n	5dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    5dae:	f1a5 0502 	sub.w	r5, r5, #2
    5db2:	2d0d      	cmp	r5, #13
    5db4:	d21f      	bcs.n	5df6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5db6:	e8df f005 	tbb	[pc, r5]
    5dba:	1e21      	.short	0x1e21
    5dbc:	219e9e51 	.word	0x219e9e51
    5dc0:	9e1e5e1e 	.word	0x9e1e5e1e
    5dc4:	008c343a 	.word	0x008c343a
    5dc8:	f640 31b5 	movw	r1, #2997	; 0xbb5
    5dcc:	e099      	b.n	5f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5dce:	2d17      	cmp	r5, #23
    5dd0:	d070      	beq.n	5eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    5dd2:	dc08      	bgt.n	5de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    5dd4:	f1a5 0512 	sub.w	r5, r5, #18
    5dd8:	2d05      	cmp	r5, #5
    5dda:	d20c      	bcs.n	5df6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5ddc:	e8df f005 	tbb	[pc, r5]
    5de0:	50508b8b 	.word	0x50508b8b
    5de4:	0033      	.short	0x0033
    5de6:	2d23      	cmp	r5, #35	; 0x23
    5de8:	d077      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5dea:	2d24      	cmp	r5, #36	; 0x24
    5dec:	d075      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5dee:	2d25      	cmp	r5, #37	; 0x25
    5df0:	d073      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5df2:	2dff      	cmp	r5, #255	; 0xff
    5df4:	d077      	beq.n	5ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    5df6:	f640 4161 	movw	r1, #3169	; 0xc61
    5dfa:	e082      	b.n	5f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5dfc:	6860      	ldr	r0, [r4, #4]
    5dfe:	9900      	ldr	r1, [sp, #0]
    5e00:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    5e04:	7108      	strb	r0, [r1, #4]
    5e06:	e076      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e08:	6860      	ldr	r0, [r4, #4]
    5e0a:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5e0e:	9800      	ldr	r0, [sp, #0]
    5e10:	f008 faa7 	bl	e362 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    5e14:	6860      	ldr	r0, [r4, #4]
    5e16:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5e1a:	9800      	ldr	r0, [sp, #0]
    5e1c:	f008 faa5 	bl	e36a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    5e20:	e069      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e22:	6861      	ldr	r1, [r4, #4]
    5e24:	9800      	ldr	r0, [sp, #0]
    5e26:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5e2a:	7101      	strb	r1, [r0, #4]
    5e2c:	e063      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e2e:	9800      	ldr	r0, [sp, #0]
    5e30:	210c      	movs	r1, #12
    5e32:	7101      	strb	r1, [r0, #4]
    5e34:	2159      	movs	r1, #89	; 0x59
    5e36:	7141      	strb	r1, [r0, #5]
    5e38:	2100      	movs	r1, #0
    5e3a:	7181      	strb	r1, [r0, #6]
    5e3c:	214b      	movs	r1, #75	; 0x4b
    5e3e:	71c1      	strb	r1, [r0, #7]
    5e40:	2112      	movs	r1, #18
    5e42:	7201      	strb	r1, [r0, #8]
    5e44:	e057      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e46:	9800      	ldr	r0, [sp, #0]
    5e48:	f8d4 1004 	ldr.w	r1, [r4, #4]
    5e4c:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5e50:	7101      	strb	r1, [r0, #4]
    5e52:	6861      	ldr	r1, [r4, #4]
    5e54:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5e58:	7141      	strb	r1, [r0, #5]
    5e5a:	e04c      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e5c:	6861      	ldr	r1, [r4, #4]
    5e5e:	9800      	ldr	r0, [sp, #0]
    5e60:	f501 7110 	add.w	r1, r1, #576	; 0x240
    5e64:	f008 fa38 	bl	e2d8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    5e68:	6861      	ldr	r1, [r4, #4]
    5e6a:	9800      	ldr	r0, [sp, #0]
    5e6c:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    5e70:	f008 fa2f 	bl	e2d2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    5e74:	e03f      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e76:	4825      	ldr	r0, [pc, #148]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5e78:	9900      	ldr	r1, [sp, #0]
    5e7a:	f7fd fcd7 	bl	382c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5e7e:	e03a      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e80:	6860      	ldr	r0, [r4, #4]
    5e82:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5e86:	9800      	ldr	r0, [sp, #0]
    5e88:	f008 fa87 	bl	e39a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5e8c:	6860      	ldr	r0, [r4, #4]
    5e8e:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    5e92:	9800      	ldr	r0, [sp, #0]
    5e94:	f008 fa85 	bl	e3a2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5e98:	6860      	ldr	r0, [r4, #4]
    5e9a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5e9e:	9800      	ldr	r0, [sp, #0]
    5ea0:	f008 fa83 	bl	e3aa <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5ea4:	6860      	ldr	r0, [r4, #4]
    5ea6:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5eaa:	9800      	ldr	r0, [sp, #0]
    5eac:	f008 fa81 	bl	e3b2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5eb0:	e021      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5eb2:	e7ff      	b.n	5eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    5eb4:	6861      	ldr	r1, [r4, #4]
    5eb6:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5eba:	2801      	cmp	r0, #1
    5ebc:	9800      	ldr	r0, [sp, #0]
    5ebe:	d0c5      	beq.n	5e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c0>
    5ec0:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    5ec4:	7101      	strb	r1, [r0, #4]
    5ec6:	6861      	ldr	r1, [r4, #4]
    5ec8:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5ecc:	e7c4      	b.n	5e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8cc>
    5ece:	e004      	b.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5ed0:	e009      	b.n	5ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    5ed2:	9800      	ldr	r0, [sp, #0]
    5ed4:	f7fd fc5a 	bl	378c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5ed8:	e00d      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5eda:	4a0c      	ldr	r2, [pc, #48]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5edc:	4628      	mov	r0, r5
    5ede:	9900      	ldr	r1, [sp, #0]
    5ee0:	f009 fd43 	bl	f96a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    5ee4:	e007      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5ee6:	6860      	ldr	r0, [r4, #4]
    5ee8:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5eec:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    5ef0:	9800      	ldr	r0, [sp, #0]
    5ef2:	f008 fa3c 	bl	e36e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5ef6:	f7fc f891 	bl	201c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5efa:	2800      	cmp	r0, #0
    5efc:	d104      	bne.n	5f08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97c>
    5efe:	f640 4165 	movw	r1, #3173	; 0xc65
    5f02:	2031      	movs	r0, #49	; 0x31
    5f04:	f7fb fa4c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f08:	bd38      	pop	{r3, r4, r5, pc}
    5f0a:	0000      	.short	0x0000
    5f0c:	2000010c 	.word	0x2000010c
    5f10:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5f14:	4e8c      	ldr	r6, [pc, #560]	; (6148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>)
    5f16:	468a      	mov	sl, r1
    5f18:	6870      	ldr	r0, [r6, #4]
    5f1a:	8800      	ldrh	r0, [r0, #0]
    5f1c:	f7fb fe52 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f20:	0007      	movs	r7, r0
    5f22:	d00c      	beq.n	5f3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    5f24:	f1a6 0510 	sub.w	r5, r6, #16
    5f28:	f04f 0400 	mov.w	r4, #0
    5f2c:	8868      	ldrh	r0, [r5, #2]
    5f2e:	05c0      	lsls	r0, r0, #23
    5f30:	d50a      	bpl.n	5f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9bc>
    5f32:	6870      	ldr	r0, [r6, #4]
    5f34:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5f38:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5f3c:	e009      	b.n	5f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c6>
    5f3e:	f640 7145 	movw	r1, #3909	; 0xf45
    5f42:	2031      	movs	r0, #49	; 0x31
    5f44:	f7fb fa2c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f48:	6871      	ldr	r1, [r6, #4]
    5f4a:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    5f4e:	1c40      	adds	r0, r0, #1
    5f50:	8008      	strh	r0, [r1, #0]
    5f52:	f000 ff43 	bl	6ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    5f56:	f04f 0901 	mov.w	r9, #1
    5f5a:	b340      	cbz	r0, 5fae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5f5c:	8868      	ldrh	r0, [r5, #2]
    5f5e:	0500      	lsls	r0, r0, #20
    5f60:	d506      	bpl.n	5f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    5f62:	6870      	ldr	r0, [r6, #4]
    5f64:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    5f68:	b111      	cbz	r1, 5f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    5f6a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5f6e:	e01e      	b.n	5fae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5f70:	6870      	ldr	r0, [r6, #4]
    5f72:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    5f76:	1c49      	adds	r1, r1, #1
    5f78:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    5f7c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    5f80:	428a      	cmp	r2, r1
    5f82:	d301      	bcc.n	5f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    5f84:	1a53      	subs	r3, r2, r1
    5f86:	e000      	b.n	5f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fe>
    5f88:	2300      	movs	r3, #0
    5f8a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    5f8e:	f10c 0c05 	add.w	ip, ip, #5
    5f92:	4563      	cmp	r3, ip
    5f94:	d801      	bhi.n	5f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5f96:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    5f9a:	4291      	cmp	r1, r2
    5f9c:	d307      	bcc.n	5fae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5f9e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5fa2:	220f      	movs	r2, #15
    5fa4:	4969      	ldr	r1, [pc, #420]	; (614c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    5fa6:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    5faa:	f008 fa80 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5fae:	8868      	ldrh	r0, [r5, #2]
    5fb0:	f04f 0b02 	mov.w	fp, #2
    5fb4:	f410 7f40 	tst.w	r0, #768	; 0x300
    5fb8:	d00e      	beq.n	5fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    5fba:	6870      	ldr	r0, [r6, #4]
    5fbc:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fc0:	b111      	cbz	r1, 5fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa3c>
    5fc2:	2903      	cmp	r1, #3
    5fc4:	d108      	bne.n	5fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    5fc6:	e002      	b.n	5fce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa42>
    5fc8:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5fcc:	e001      	b.n	5fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa46>
    5fce:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fd2:	2101      	movs	r1, #1
    5fd4:	f7fe fdd0 	bl	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5fd8:	6870      	ldr	r0, [r6, #4]
    5fda:	46b0      	mov	r8, r6
    5fdc:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fe0:	2901      	cmp	r1, #1
    5fe2:	d104      	bne.n	5fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    5fe4:	8869      	ldrh	r1, [r5, #2]
    5fe6:	0549      	lsls	r1, r1, #21
    5fe8:	d501      	bpl.n	5fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    5fea:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fee:	9900      	ldr	r1, [sp, #0]
    5ff0:	2900      	cmp	r1, #0
    5ff2:	d179      	bne.n	60e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    5ff4:	78a9      	ldrb	r1, [r5, #2]
    5ff6:	0649      	lsls	r1, r1, #25
    5ff8:	d502      	bpl.n	6000 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa74>
    5ffa:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5ffe:	e004      	b.n	600a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    6000:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    6004:	1c49      	adds	r1, r1, #1
    6006:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    600a:	4650      	mov	r0, sl
    600c:	f7ff fdb8 	bl	5b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    6010:	ea40 000a 	orr.w	r0, r0, sl
    6014:	4682      	mov	sl, r0
    6016:	f7ff fd37 	bl	5a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>
    601a:	f8d8 6004 	ldr.w	r6, [r8, #4]
    601e:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    6022:	1c40      	adds	r0, r0, #1
    6024:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    6028:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    602c:	b128      	cbz	r0, 603a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaae>
    602e:	f7fc f9bf 	bl	23b0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    6032:	b1b0      	cbz	r0, 6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    6034:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6038:	e013      	b.n	6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    603a:	f7fc f897 	bl	216c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    603e:	b108      	cbz	r0, 6044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    6040:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6044:	f7fc f88c 	bl	2160 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    6048:	b158      	cbz	r0, 6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    604a:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    604e:	1c40      	adds	r0, r0, #1
    6050:	b2c0      	uxtb	r0, r0
    6052:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    6056:	2802      	cmp	r0, #2
    6058:	d903      	bls.n	6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    605a:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    605e:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    6062:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6066:	4646      	mov	r6, r8
    6068:	2301      	movs	r3, #1
    606a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    606e:	2100      	movs	r1, #0
    6070:	3080      	adds	r0, #128	; 0x80
    6072:	f007 fe71 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6076:	b920      	cbnz	r0, 6082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf6>
    6078:	6870      	ldr	r0, [r6, #4]
    607a:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    607e:	280b      	cmp	r0, #11
    6080:	d15f      	bne.n	6142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    6082:	6870      	ldr	r0, [r6, #4]
    6084:	2301      	movs	r3, #1
    6086:	2100      	movs	r1, #0
    6088:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    608c:	3080      	adds	r0, #128	; 0x80
    608e:	f007 fe63 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6092:	b350      	cbz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    6094:	6870      	ldr	r0, [r6, #4]
    6096:	2301      	movs	r3, #1
    6098:	2100      	movs	r1, #0
    609a:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    609e:	3080      	adds	r0, #128	; 0x80
    60a0:	f007 fe5a 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60a4:	b308      	cbz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    60a6:	6870      	ldr	r0, [r6, #4]
    60a8:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    60ac:	2902      	cmp	r1, #2
    60ae:	d148      	bne.n	6142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    60b0:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    60b4:	b9c8      	cbnz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    60b6:	4638      	mov	r0, r7
    60b8:	f007 f955 	bl	d366 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    60bc:	b1a8      	cbz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    60be:	6870      	ldr	r0, [r6, #4]
    60c0:	3080      	adds	r0, #128	; 0x80
    60c2:	f009 fa32 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    60c6:	b980      	cbnz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    60c8:	6871      	ldr	r1, [r6, #4]
    60ca:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    60ce:	2801      	cmp	r0, #1
    60d0:	d937      	bls.n	6142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    60d2:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    60d6:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    60da:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    60de:	1e93      	subs	r3, r2, #2
    60e0:	4298      	cmp	r0, r3
    60e2:	db03      	blt.n	60ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    60e4:	2001      	movs	r0, #1
    60e6:	e004      	b.n	60f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    60e8:	e01c      	b.n	6124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    60ea:	e02a      	b.n	6142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    60ec:	1a10      	subs	r0, r2, r0
    60ee:	1e40      	subs	r0, r0, #1
    60f0:	b280      	uxth	r0, r0
    60f2:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    60f6:	88aa      	ldrh	r2, [r5, #4]
    60f8:	4293      	cmp	r3, r2
    60fa:	d301      	bcc.n	6100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    60fc:	2201      	movs	r2, #1
    60fe:	e002      	b.n	6106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    6100:	1ad2      	subs	r2, r2, r3
    6102:	1c52      	adds	r2, r2, #1
    6104:	b292      	uxth	r2, r2
    6106:	4290      	cmp	r0, r2
    6108:	d900      	bls.n	610c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    610a:	4610      	mov	r0, r2
    610c:	2801      	cmp	r0, #1
    610e:	d101      	bne.n	6114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    6110:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    6114:	6871      	ldr	r1, [r6, #4]
    6116:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    611a:	4410      	add	r0, r2
    611c:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    6120:	f000 ff28 	bl	6f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e8>
    6124:	78a8      	ldrb	r0, [r5, #2]
    6126:	4652      	mov	r2, sl
    6128:	f3c0 1180 	ubfx	r1, r0, #6, #1
    612c:	9800      	ldr	r0, [sp, #0]
    612e:	f000 fe69 	bl	6e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1878>
    6132:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6136:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    613a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    613e:	f7fb bf57 	b.w	1ff0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6142:	2001      	movs	r0, #1
    6144:	6871      	ldr	r1, [r6, #4]
    6146:	e7e3      	b.n	6110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    6148:	2000010c 	.word	0x2000010c
    614c:	0000e911 	.word	0x0000e911
    6150:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6152:	4c68      	ldr	r4, [pc, #416]	; (62f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    6154:	2301      	movs	r3, #1
    6156:	2100      	movs	r1, #0
    6158:	6860      	ldr	r0, [r4, #4]
    615a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    615e:	3080      	adds	r0, #128	; 0x80
    6160:	f007 fdfa 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6164:	2800      	cmp	r0, #0
    6166:	d07a      	beq.n	625e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd2>
    6168:	6860      	ldr	r0, [r4, #4]
    616a:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    616e:	2500      	movs	r5, #0
    6170:	b139      	cbz	r1, 6182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    6172:	2100      	movs	r1, #0
    6174:	200e      	movs	r0, #14
    6176:	f000 f8bf 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    617a:	6860      	ldr	r0, [r4, #4]
    617c:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    6180:	e0b5      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    6182:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    6186:	b119      	cbz	r1, 6190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    6188:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    618c:	0789      	lsls	r1, r1, #30
    618e:	d016      	beq.n	61be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    6190:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6194:	f88d 1004 	strb.w	r1, [sp, #4]
    6198:	9901      	ldr	r1, [sp, #4]
    619a:	9101      	str	r1, [sp, #4]
    619c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61a0:	b141      	cbz	r1, 61b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    61a2:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    61a6:	f88d 1000 	strb.w	r1, [sp]
    61aa:	9900      	ldr	r1, [sp, #0]
    61ac:	9100      	str	r1, [sp, #0]
    61ae:	f89d 1000 	ldrb.w	r1, [sp]
    61b2:	b189      	cbz	r1, 61d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    61b4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    61b8:	2901      	cmp	r1, #1
    61ba:	d030      	beq.n	621e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc92>
    61bc:	e040      	b.n	6240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    61be:	2100      	movs	r1, #0
    61c0:	200c      	movs	r0, #12
    61c2:	f000 f899 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    61c6:	6860      	ldr	r0, [r4, #4]
    61c8:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    61cc:	f041 0101 	orr.w	r1, r1, #1
    61d0:	7001      	strb	r1, [r0, #0]
    61d2:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    61d6:	e08a      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    61d8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    61dc:	2925      	cmp	r1, #37	; 0x25
    61de:	d01c      	beq.n	621a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    61e0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    61e4:	2925      	cmp	r1, #37	; 0x25
    61e6:	d018      	beq.n	621a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    61e8:	f05f 0300 	movs.w	r3, #0
    61ec:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    61f0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    61f4:	f008 f971 	bl	e4da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    61f8:	6860      	ldr	r0, [r4, #4]
    61fa:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    61fe:	2100      	movs	r1, #0
    6200:	2014      	movs	r0, #20
    6202:	f000 f879 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6206:	6861      	ldr	r1, [r4, #4]
    6208:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    620c:	8bc2      	ldrh	r2, [r0, #30]
    620e:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    6212:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6214:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    6218:	e069      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    621a:	2301      	movs	r3, #1
    621c:	e7e6      	b.n	61ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    621e:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6222:	f88d 1000 	strb.w	r1, [sp]
    6226:	9900      	ldr	r1, [sp, #0]
    6228:	9100      	str	r1, [sp, #0]
    622a:	f89d 1000 	ldrb.w	r1, [sp]
    622e:	b939      	cbnz	r1, 6240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    6230:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6234:	2301      	movs	r3, #1
    6236:	210b      	movs	r1, #11
    6238:	3080      	adds	r0, #128	; 0x80
    623a:	f007 fd8d 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    623e:	b178      	cbz	r0, 6260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    6240:	6860      	ldr	r0, [r4, #4]
    6242:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    6246:	f88d 1000 	strb.w	r1, [sp]
    624a:	9900      	ldr	r1, [sp, #0]
    624c:	9100      	str	r1, [sp, #0]
    624e:	f89d 1000 	ldrb.w	r1, [sp]
    6252:	b3b9      	cbz	r1, 62c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    6254:	2100      	movs	r1, #0
    6256:	2023      	movs	r0, #35	; 0x23
    6258:	f000 f84e 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    625c:	e047      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    625e:	e030      	b.n	62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    6260:	6860      	ldr	r0, [r4, #4]
    6262:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6266:	f009 f968 	bl	f53a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    626a:	4605      	mov	r5, r0
    626c:	6860      	ldr	r0, [r4, #4]
    626e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6272:	f009 f962 	bl	f53a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6276:	4606      	mov	r6, r0
    6278:	6860      	ldr	r0, [r4, #4]
    627a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    627e:	4628      	mov	r0, r5
    6280:	f009 f966 	bl	f550 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6284:	b150      	cbz	r0, 629c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    6286:	6860      	ldr	r0, [r4, #4]
    6288:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    628c:	4630      	mov	r0, r6
    628e:	f009 f95f 	bl	f550 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6292:	b118      	cbz	r0, 629c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    6294:	2000      	movs	r0, #0
    6296:	f000 f941 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    629a:	e011      	b.n	62c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    629c:	6860      	ldr	r0, [r4, #4]
    629e:	2301      	movs	r3, #1
    62a0:	2103      	movs	r1, #3
    62a2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62a6:	3080      	adds	r0, #128	; 0x80
    62a8:	f007 fd56 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62ac:	b940      	cbnz	r0, 62c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    62ae:	6860      	ldr	r0, [r4, #4]
    62b0:	2301      	movs	r3, #1
    62b2:	2102      	movs	r1, #2
    62b4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62b8:	3080      	adds	r0, #128	; 0x80
    62ba:	f007 fd4d 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62be:	b110      	cbz	r0, 62c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    62c0:	2000      	movs	r0, #0
    62c2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62c4:	e002      	b.n	62cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    62c6:	2100      	movs	r1, #0
    62c8:	2016      	movs	r0, #22
    62ca:	e7c5      	b.n	6258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xccc>
    62cc:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    62d0:	f88d 0000 	strb.w	r0, [sp]
    62d4:	9800      	ldr	r0, [sp, #0]
    62d6:	9000      	str	r0, [sp, #0]
    62d8:	f89d 0000 	ldrb.w	r0, [sp]
    62dc:	2800      	cmp	r0, #0
    62de:	d0f0      	beq.n	62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    62e0:	2100      	movs	r1, #0
    62e2:	2025      	movs	r0, #37	; 0x25
    62e4:	f000 f808 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    62e8:	6860      	ldr	r0, [r4, #4]
    62ea:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    62ee:	2001      	movs	r0, #1
    62f0:	e7e7      	b.n	62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    62f2:	0000      	.short	0x0000
    62f4:	2000010c 	.word	0x2000010c
    62f8:	b570      	push	{r4, r5, r6, lr}
    62fa:	4c0d      	ldr	r4, [pc, #52]	; (6330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda4>)
    62fc:	4606      	mov	r6, r0
    62fe:	460d      	mov	r5, r1
    6300:	6860      	ldr	r0, [r4, #4]
    6302:	3080      	adds	r0, #128	; 0x80
    6304:	f009 f911 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6308:	b120      	cbz	r0, 6314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    630a:	f640 416a 	movw	r1, #3178	; 0xc6a
    630e:	2031      	movs	r0, #49	; 0x31
    6310:	f7fb f846 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6314:	6862      	ldr	r2, [r4, #4]
    6316:	2000      	movs	r0, #0
    6318:	2d01      	cmp	r5, #1
    631a:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    631e:	d004      	beq.n	632a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9e>
    6320:	f822 0fd2 	strh.w	r0, [r2, #210]!
    6324:	2001      	movs	r0, #1
    6326:	7110      	strb	r0, [r2, #4]
    6328:	bd70      	pop	{r4, r5, r6, pc}
    632a:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    632e:	bd70      	pop	{r4, r5, r6, pc}
    6330:	2000010c 	.word	0x2000010c
    6334:	b538      	push	{r3, r4, r5, lr}
    6336:	4c1f      	ldr	r4, [pc, #124]	; (63b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>)
    6338:	2500      	movs	r5, #0
    633a:	6860      	ldr	r0, [r4, #4]
    633c:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    6340:	2901      	cmp	r1, #1
    6342:	d00c      	beq.n	635e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd2>
    6344:	2902      	cmp	r1, #2
    6346:	d133      	bne.n	63b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    6348:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    634c:	2900      	cmp	r1, #0
    634e:	f04f 0106 	mov.w	r1, #6
    6352:	d01a      	beq.n	638a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfe>
    6354:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6358:	2101      	movs	r1, #1
    635a:	2002      	movs	r0, #2
    635c:	e023      	b.n	63a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    635e:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    6362:	f88d 1000 	strb.w	r1, [sp]
    6366:	9900      	ldr	r1, [sp, #0]
    6368:	9100      	str	r1, [sp, #0]
    636a:	f89d 1000 	ldrb.w	r1, [sp]
    636e:	2900      	cmp	r1, #0
    6370:	d11e      	bne.n	63b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    6372:	f500 7384 	add.w	r3, r0, #264	; 0x108
    6376:	f500 710e 	add.w	r1, r0, #568	; 0x238
    637a:	2200      	movs	r2, #0
    637c:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    6380:	f007 fca2 	bl	dcc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    6384:	2101      	movs	r1, #1
    6386:	2005      	movs	r0, #5
    6388:	e00d      	b.n	63a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    638a:	2003      	movs	r0, #3
    638c:	f000 fcb4 	bl	6cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    6390:	6860      	ldr	r0, [r4, #4]
    6392:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    6396:	0880      	lsrs	r0, r0, #2
    6398:	f010 0f01 	tst.w	r0, #1
    639c:	d001      	beq.n	63a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    639e:	2011      	movs	r0, #17
    63a0:	e000      	b.n	63a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    63a2:	200d      	movs	r0, #13
    63a4:	2101      	movs	r1, #1
    63a6:	f7ff ffa7 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    63aa:	6860      	ldr	r0, [r4, #4]
    63ac:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    63b0:	bd38      	pop	{r3, r4, r5, pc}
    63b2:	0000      	.short	0x0000
    63b4:	2000010c 	.word	0x2000010c
    63b8:	b570      	push	{r4, r5, r6, lr}
    63ba:	4b2b      	ldr	r3, [pc, #172]	; (6468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xedc>)
    63bc:	4602      	mov	r2, r0
    63be:	8858      	ldrh	r0, [r3, #2]
    63c0:	4310      	orrs	r0, r2
    63c2:	8058      	strh	r0, [r3, #2]
    63c4:	f103 0010 	add.w	r0, r3, #16
    63c8:	2a40      	cmp	r2, #64	; 0x40
    63ca:	6840      	ldr	r0, [r0, #4]
    63cc:	d00d      	beq.n	63ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    63ce:	0796      	lsls	r6, r2, #30
    63d0:	f04f 0500 	mov.w	r5, #0
    63d4:	f04f 0401 	mov.w	r4, #1
    63d8:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    63dc:	d50c      	bpl.n	63f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    63de:	b14e      	cbz	r6, 63f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>
    63e0:	f640 61b2 	movw	r1, #3762	; 0xeb2
    63e4:	2031      	movs	r0, #49	; 0x31
    63e6:	f7fa ffdb 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63ee:	2104      	movs	r1, #4
    63f0:	f7fe bbc2 	b.w	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    63f4:	6099      	str	r1, [r3, #8]
    63f6:	e01c      	b.n	6432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    63f8:	b1c6      	cbz	r6, 642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    63fa:	60d9      	str	r1, [r3, #12]
    63fc:	78c9      	ldrb	r1, [r1, #3]
    63fe:	2906      	cmp	r1, #6
    6400:	d002      	beq.n	6408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    6402:	290b      	cmp	r1, #11
    6404:	d112      	bne.n	642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6406:	e009      	b.n	641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>
    6408:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    640c:	2918      	cmp	r1, #24
    640e:	d10d      	bne.n	642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6410:	2100      	movs	r1, #0
    6412:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    6416:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    641a:	e007      	b.n	642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    641c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6420:	2912      	cmp	r1, #18
    6422:	d103      	bne.n	642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6424:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    6428:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    642c:	0791      	lsls	r1, r2, #30
    642e:	d516      	bpl.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    6430:	6899      	ldr	r1, [r3, #8]
    6432:	78c9      	ldrb	r1, [r1, #3]
    6434:	2905      	cmp	r1, #5
    6436:	d002      	beq.n	643e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    6438:	290b      	cmp	r1, #11
    643a:	d110      	bne.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    643c:	e009      	b.n	6452 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec6>
    643e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6442:	2916      	cmp	r1, #22
    6444:	d10b      	bne.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    6446:	2100      	movs	r1, #0
    6448:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    644c:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    6450:	e005      	b.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    6452:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6456:	2911      	cmp	r1, #17
    6458:	d101      	bne.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    645a:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    645e:	0690      	lsls	r0, r2, #26
    6460:	d501      	bpl.n	6466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    6462:	2008      	movs	r0, #8
    6464:	7058      	strb	r0, [r3, #1]
    6466:	bd70      	pop	{r4, r5, r6, pc}
    6468:	200000fc 	.word	0x200000fc
    646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6470:	4c29      	ldr	r4, [pc, #164]	; (6518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    6472:	2501      	movs	r5, #1
    6474:	6863      	ldr	r3, [r4, #4]
    6476:	f893 12ce 	ldrb.w	r1, [r3, #718]	; 0x2ce
    647a:	b109      	cbz	r1, 6480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    647c:	2701      	movs	r7, #1
    647e:	e000      	b.n	6482 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef6>
    6480:	2700      	movs	r7, #0
    6482:	f893 02cf 	ldrb.w	r0, [r3, #719]	; 0x2cf
    6486:	b108      	cbz	r0, 648c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    6488:	2601      	movs	r6, #1
    648a:	e000      	b.n	648e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    648c:	2600      	movs	r6, #0
    648e:	b90f      	cbnz	r7, 6494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    6490:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    6494:	b90e      	cbnz	r6, 649a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    6496:	f893 006b 	ldrb.w	r0, [r3, #107]	; 0x6b
    649a:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    649e:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
    64a2:	f103 0262 	add.w	r2, r3, #98	; 0x62
    64a6:	20ff      	movs	r0, #255	; 0xff
    64a8:	7290      	strb	r0, [r2, #10]
    64aa:	4618      	mov	r0, r3
    64ac:	f009 fb1f 	bl	faee <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    64b0:	6860      	ldr	r0, [r4, #4]
    64b2:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    64b6:	2801      	cmp	r0, #1
    64b8:	d001      	beq.n	64be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    64ba:	b907      	cbnz	r7, 64be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    64bc:	b116      	cbz	r6, 64c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    64be:	2000      	movs	r0, #0
    64c0:	f000 f82c 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    64c4:	6860      	ldr	r0, [r4, #4]
    64c6:	302c      	adds	r0, #44	; 0x2c
    64c8:	f008 f876 	bl	e5b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    64cc:	4606      	mov	r6, r0
    64ce:	6860      	ldr	r0, [r4, #4]
    64d0:	f008 f81e 	bl	e510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    64d4:	b130      	cbz	r0, 64e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf58>
    64d6:	6861      	ldr	r1, [r4, #4]
    64d8:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    64dc:	f831 0b2c 	ldrh.w	r0, [r1], #44
    64e0:	f7fd f88e 	bl	3600 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    64e4:	2105      	movs	r1, #5
    64e6:	6860      	ldr	r0, [r4, #4]
    64e8:	f7fe fb46 	bl	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    64ec:	6860      	ldr	r0, [r4, #4]
    64ee:	302c      	adds	r0, #44	; 0x2c
    64f0:	f008 f862 	bl	e5b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    64f4:	4604      	mov	r4, r0
    64f6:	42a6      	cmp	r6, r4
    64f8:	d20a      	bcs.n	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    64fa:	f003 fdf5 	bl	a0e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    64fe:	4601      	mov	r1, r0
    6500:	1ba0      	subs	r0, r4, r6
    6502:	2865      	cmp	r0, #101	; 0x65
    6504:	d200      	bcs.n	6508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>
    6506:	2065      	movs	r0, #101	; 0x65
    6508:	f003 fd10 	bl	9f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    650c:	b100      	cbz	r0, 6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    650e:	2500      	movs	r5, #0
    6510:	4628      	mov	r0, r5
    6512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6516:	0000      	.short	0x0000
    6518:	2000010c 	.word	0x2000010c
    651c:	b510      	push	{r4, lr}
    651e:	4c10      	ldr	r4, [pc, #64]	; (6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>)
    6520:	6861      	ldr	r1, [r4, #4]
    6522:	880a      	ldrh	r2, [r1, #0]
    6524:	f8a1 21a6 	strh.w	r2, [r1, #422]	; 0x1a6
    6528:	f881 01a4 	strb.w	r0, [r1, #420]	; 0x1a4
    652c:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    6530:	f009 f803 	bl	f53a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6534:	6861      	ldr	r1, [r4, #4]
    6536:	f881 01a8 	strb.w	r0, [r1, #424]	; 0x1a8
    653a:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    653e:	f008 fffc 	bl	f53a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6542:	6863      	ldr	r3, [r4, #4]
    6544:	2215      	movs	r2, #21
    6546:	4907      	ldr	r1, [pc, #28]	; (6564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    6548:	f883 01a9 	strb.w	r0, [r3, #425]	; 0x1a9
    654c:	f503 70cd 	add.w	r0, r3, #410	; 0x19a
    6550:	f007 ffad 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    6554:	6861      	ldr	r1, [r4, #4]
    6556:	2000      	movs	r0, #0
    6558:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
    655c:	bd10      	pop	{r4, pc}
    655e:	0000      	.short	0x0000
    6560:	2000010c 	.word	0x2000010c
    6564:	000108dd 	.word	0x000108dd
    6568:	b570      	push	{r4, r5, r6, lr}
    656a:	4d0f      	ldr	r5, [pc, #60]	; (65a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    656c:	686c      	ldr	r4, [r5, #4]
    656e:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    6572:	2921      	cmp	r1, #33	; 0x21
    6574:	d002      	beq.n	657c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    6576:	292e      	cmp	r1, #46	; 0x2e
    6578:	d003      	beq.n	6582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    657a:	e011      	b.n	65a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    657c:	f7ff ffce 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6580:	e008      	b.n	6594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    6582:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    6586:	f104 0080 	add.w	r0, r4, #128	; 0x80
    658a:	2301      	movs	r3, #1
    658c:	210b      	movs	r1, #11
    658e:	f007 fbe3 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6592:	b138      	cbz	r0, 65a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    6594:	6869      	ldr	r1, [r5, #4]
    6596:	2000      	movs	r0, #0
    6598:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    659c:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    65a0:	2000      	movs	r0, #0
    65a2:	bd70      	pop	{r4, r5, r6, pc}
    65a4:	202a      	movs	r0, #42	; 0x2a
    65a6:	e7e9      	b.n	657c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    65a8:	2000010c 	.word	0x2000010c
    65ac:	b570      	push	{r4, r5, r6, lr}
    65ae:	4604      	mov	r4, r0
    65b0:	6840      	ldr	r0, [r0, #4]
    65b2:	2301      	movs	r3, #1
    65b4:	2100      	movs	r1, #0
    65b6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    65ba:	3080      	adds	r0, #128	; 0x80
    65bc:	f007 fbcc 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65c0:	b1b8      	cbz	r0, 65f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    65c2:	4d13      	ldr	r5, [pc, #76]	; (6610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    65c4:	68e8      	ldr	r0, [r5, #12]
    65c6:	f007 fe32 	bl	e22e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    65ca:	6861      	ldr	r1, [r4, #4]
    65cc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    65d0:	6861      	ldr	r1, [r4, #4]
    65d2:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    65d6:	f008 ffc9 	bl	f56c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    65da:	b160      	cbz	r0, 65f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    65dc:	6861      	ldr	r1, [r4, #4]
    65de:	2028      	movs	r0, #40	; 0x28
    65e0:	220b      	movs	r2, #11
    65e2:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    65e6:	6860      	ldr	r0, [r4, #4]
    65e8:	490a      	ldr	r1, [pc, #40]	; (6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1088>)
    65ea:	30b4      	adds	r0, #180	; 0xb4
    65ec:	f007 ff4b 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    65f0:	e00b      	b.n	660a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    65f2:	2001      	movs	r0, #1
    65f4:	bd70      	pop	{r4, r5, r6, pc}
    65f6:	6861      	ldr	r1, [r4, #4]
    65f8:	68e8      	ldr	r0, [r5, #12]
    65fa:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    65fe:	f007 fe11 	bl	e224 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    6602:	6861      	ldr	r1, [r4, #4]
    6604:	200a      	movs	r0, #10
    6606:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    660a:	2000      	movs	r0, #0
    660c:	bd70      	pop	{r4, r5, r6, pc}
    660e:	0000      	.short	0x0000
    6610:	200000fc 	.word	0x200000fc
    6614:	0000e7c5 	.word	0x0000e7c5
    6618:	b570      	push	{r4, r5, r6, lr}
    661a:	4604      	mov	r4, r0
    661c:	6840      	ldr	r0, [r0, #4]
    661e:	2301      	movs	r3, #1
    6620:	2100      	movs	r1, #0
    6622:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6626:	3080      	adds	r0, #128	; 0x80
    6628:	f007 fb96 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    662c:	b1e0      	cbz	r0, 6668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    662e:	4d28      	ldr	r5, [pc, #160]	; (66d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1144>)
    6630:	2100      	movs	r1, #0
    6632:	68e8      	ldr	r0, [r5, #12]
    6634:	f007 fdfe 	bl	e234 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    6638:	b1c0      	cbz	r0, 666c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e0>
    663a:	68e8      	ldr	r0, [r5, #12]
    663c:	6861      	ldr	r1, [r4, #4]
    663e:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    6642:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6646:	6861      	ldr	r1, [r4, #4]
    6648:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    664c:	f008 ff8e 	bl	f56c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6650:	b188      	cbz	r0, 6676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ea>
    6652:	6861      	ldr	r1, [r4, #4]
    6654:	2028      	movs	r0, #40	; 0x28
    6656:	220b      	movs	r2, #11
    6658:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    665c:	6860      	ldr	r0, [r4, #4]
    665e:	491d      	ldr	r1, [pc, #116]	; (66d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>)
    6660:	30b4      	adds	r0, #180	; 0xb4
    6662:	f007 ff10 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6666:	e030      	b.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113e>
    6668:	2001      	movs	r0, #1
    666a:	bd70      	pop	{r4, r5, r6, pc}
    666c:	4620      	mov	r0, r4
    666e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6672:	f000 b88b 	b.w	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6676:	68e8      	ldr	r0, [r5, #12]
    6678:	f007 fe06 	bl	e288 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    667c:	f007 fb4f 	bl	dd1e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6680:	4606      	mov	r6, r0
    6682:	6860      	ldr	r0, [r4, #4]
    6684:	4631      	mov	r1, r6
    6686:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    668a:	68e8      	ldr	r0, [r5, #12]
    668c:	7900      	ldrb	r0, [r0, #4]
    668e:	f007 fcc2 	bl	e016 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6692:	6861      	ldr	r1, [r4, #4]
    6694:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    6698:	68e8      	ldr	r0, [r5, #12]
    669a:	4631      	mov	r1, r6
    669c:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    66a0:	f007 fcb5 	bl	e00e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    66a4:	6861      	ldr	r1, [r4, #4]
    66a6:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    66aa:	68e8      	ldr	r0, [r5, #12]
    66ac:	f007 fdef 	bl	e28e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    66b0:	6861      	ldr	r1, [r4, #4]
    66b2:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    66b6:	68e8      	ldr	r0, [r5, #12]
    66b8:	f007 fdec 	bl	e294 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    66bc:	6861      	ldr	r1, [r4, #4]
    66be:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    66c2:	6861      	ldr	r1, [r4, #4]
    66c4:	200d      	movs	r0, #13
    66c6:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    66ca:	2000      	movs	r0, #0
    66cc:	bd70      	pop	{r4, r5, r6, pc}
    66ce:	0000      	.short	0x0000
    66d0:	200000fc 	.word	0x200000fc
    66d4:	0000e7c5 	.word	0x0000e7c5
    66d8:	b570      	push	{r4, r5, r6, lr}
    66da:	4604      	mov	r4, r0
    66dc:	6840      	ldr	r0, [r0, #4]
    66de:	2301      	movs	r3, #1
    66e0:	2100      	movs	r1, #0
    66e2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    66e6:	3080      	adds	r0, #128	; 0x80
    66e8:	f007 fb36 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66ec:	b970      	cbnz	r0, 670c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    66ee:	6860      	ldr	r0, [r4, #4]
    66f0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    66f4:	2a13      	cmp	r2, #19
    66f6:	d009      	beq.n	670c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    66f8:	2301      	movs	r3, #1
    66fa:	2105      	movs	r1, #5
    66fc:	3080      	adds	r0, #128	; 0x80
    66fe:	f007 fb2b 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6702:	b108      	cbz	r0, 6708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>
    6704:	2008      	movs	r0, #8
    6706:	bd70      	pop	{r4, r5, r6, pc}
    6708:	2001      	movs	r0, #1
    670a:	bd70      	pop	{r4, r5, r6, pc}
    670c:	6860      	ldr	r0, [r4, #4]
    670e:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    6712:	b908      	cbnz	r0, 6718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118c>
    6714:	f7ff f83c 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6718:	4d14      	ldr	r5, [pc, #80]	; (676c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e0>)
    671a:	6861      	ldr	r1, [r4, #4]
    671c:	f501 710e 	add.w	r1, r1, #568	; 0x238
    6720:	68e8      	ldr	r0, [r5, #12]
    6722:	f007 fdd0 	bl	e2c6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    6726:	6861      	ldr	r1, [r4, #4]
    6728:	68e8      	ldr	r0, [r5, #12]
    672a:	f501 718c 	add.w	r1, r1, #280	; 0x118
    672e:	f007 fdc1 	bl	e2b4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    6732:	6860      	ldr	r0, [r4, #4]
    6734:	8801      	ldrh	r1, [r0, #0]
    6736:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    673a:	6861      	ldr	r1, [r4, #4]
    673c:	68e8      	ldr	r0, [r5, #12]
    673e:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    6742:	f007 fdbb 	bl	e2bc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    6746:	6861      	ldr	r1, [r4, #4]
    6748:	68e8      	ldr	r0, [r5, #12]
    674a:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    674e:	f007 fdae 	bl	e2ae <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    6752:	6860      	ldr	r0, [r4, #4]
    6754:	220a      	movs	r2, #10
    6756:	4906      	ldr	r1, [pc, #24]	; (6770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>)
    6758:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    675c:	f007 fe93 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6760:	6861      	ldr	r1, [r4, #4]
    6762:	2015      	movs	r0, #21
    6764:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6768:	2000      	movs	r0, #0
    676a:	bd70      	pop	{r4, r5, r6, pc}
    676c:	200000fc 	.word	0x200000fc
    6770:	0000e87b 	.word	0x0000e87b
    6774:	4901      	ldr	r1, [pc, #4]	; (677c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f0>)
    6776:	68c9      	ldr	r1, [r1, #12]
    6778:	f7fc bfe6 	b.w	3748 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    677c:	200000fc 	.word	0x200000fc
    6780:	4901      	ldr	r1, [pc, #4]	; (6788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fc>)
    6782:	68c9      	ldr	r1, [r1, #12]
    6784:	f7fd b810 	b.w	37a8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    6788:	200000fc 	.word	0x200000fc
    678c:	b510      	push	{r4, lr}
    678e:	6842      	ldr	r2, [r0, #4]
    6790:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    6794:	070b      	lsls	r3, r1, #28
    6796:	d501      	bpl.n	679c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    6798:	2001      	movs	r0, #1
    679a:	bd10      	pop	{r4, pc}
    679c:	f041 0108 	orr.w	r1, r1, #8
    67a0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    67a4:	4904      	ldr	r1, [pc, #16]	; (67b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122c>)
    67a6:	6840      	ldr	r0, [r0, #4]
    67a8:	68c9      	ldr	r1, [r1, #12]
    67aa:	78c9      	ldrb	r1, [r1, #3]
    67ac:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    67b0:	f7fe ffee 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    67b4:	2000      	movs	r0, #0
    67b6:	bd10      	pop	{r4, pc}
    67b8:	200000fc 	.word	0x200000fc
    67bc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67c0:	4605      	mov	r5, r0
    67c2:	6840      	ldr	r0, [r0, #4]
    67c4:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    67c8:	f010 0f30 	tst.w	r0, #48	; 0x30
    67cc:	d002      	beq.n	67d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1248>
    67ce:	2001      	movs	r0, #1
    67d0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    67d4:	4c31      	ldr	r4, [pc, #196]	; (689c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    67d6:	68e0      	ldr	r0, [r4, #12]
    67d8:	f007 fd8f 	bl	e2fa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    67dc:	b330      	cbz	r0, 682c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a0>
    67de:	68e0      	ldr	r0, [r4, #12]
    67e0:	f007 fd85 	bl	e2ee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    67e4:	4680      	mov	r8, r0
    67e6:	68e0      	ldr	r0, [r4, #12]
    67e8:	f007 fd85 	bl	e2f6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    67ec:	4607      	mov	r7, r0
    67ee:	68e0      	ldr	r0, [r4, #12]
    67f0:	f007 fd7b 	bl	e2ea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    67f4:	4606      	mov	r6, r0
    67f6:	68e0      	ldr	r0, [r4, #12]
    67f8:	f007 fd7b 	bl	e2f2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    67fc:	4601      	mov	r1, r0
    67fe:	f8cd 8000 	str.w	r8, [sp]
    6802:	6868      	ldr	r0, [r5, #4]
    6804:	463b      	mov	r3, r7
    6806:	4632      	mov	r2, r6
    6808:	302c      	adds	r0, #44	; 0x2c
    680a:	f007 ff0f 	bl	e62c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    680e:	78a0      	ldrb	r0, [r4, #2]
    6810:	0781      	lsls	r1, r0, #30
    6812:	f04f 0001 	mov.w	r0, #1
    6816:	d503      	bpl.n	6820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    6818:	68a1      	ldr	r1, [r4, #8]
    681a:	78c9      	ldrb	r1, [r1, #3]
    681c:	2914      	cmp	r1, #20
    681e:	d00a      	beq.n	6836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    6820:	6869      	ldr	r1, [r5, #4]
    6822:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    6826:	291d      	cmp	r1, #29
    6828:	d005      	beq.n	6836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    682a:	e007      	b.n	683c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b0>
    682c:	4628      	mov	r0, r5
    682e:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6832:	f7ff bfab 	b.w	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6836:	6869      	ldr	r1, [r5, #4]
    6838:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    683c:	6868      	ldr	r0, [r5, #4]
    683e:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    6842:	2901      	cmp	r1, #1
    6844:	d011      	beq.n	686a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    6846:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    684a:	f88d 1004 	strb.w	r1, [sp, #4]
    684e:	9901      	ldr	r1, [sp, #4]
    6850:	9101      	str	r1, [sp, #4]
    6852:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6856:	b941      	cbnz	r1, 686a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    6858:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    685c:	f88d 1000 	strb.w	r1, [sp]
    6860:	9900      	ldr	r1, [sp, #0]
    6862:	9100      	str	r1, [sp, #0]
    6864:	f89d 1000 	ldrb.w	r1, [sp]
    6868:	b141      	cbz	r1, 687c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>
    686a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    686e:	f041 0110 	orr.w	r1, r1, #16
    6872:	6001      	str	r1, [r0, #0]
    6874:	f7fe ff8c 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6878:	2000      	movs	r0, #0
    687a:	e7a9      	b.n	67d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1244>
    687c:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    6880:	f041 0120 	orr.w	r1, r1, #32
    6884:	6001      	str	r1, [r0, #0]
    6886:	4805      	ldr	r0, [pc, #20]	; (689c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    6888:	3010      	adds	r0, #16
    688a:	6843      	ldr	r3, [r0, #4]
    688c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    6890:	8818      	ldrh	r0, [r3, #0]
    6892:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    6896:	f7fc fedd 	bl	3654 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    689a:	e7eb      	b.n	6874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    689c:	200000fc 	.word	0x200000fc
    68a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    68a4:	4604      	mov	r4, r0
    68a6:	6840      	ldr	r0, [r0, #4]
    68a8:	2301      	movs	r3, #1
    68aa:	210a      	movs	r1, #10
    68ac:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    68b0:	3080      	adds	r0, #128	; 0x80
    68b2:	f007 fa51 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68b6:	b370      	cbz	r0, 6916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138a>
    68b8:	4d18      	ldr	r5, [pc, #96]	; (691c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>)
    68ba:	68e8      	ldr	r0, [r5, #12]
    68bc:	f007 fd1d 	bl	e2fa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    68c0:	b1e8      	cbz	r0, 68fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    68c2:	68e8      	ldr	r0, [r5, #12]
    68c4:	f007 fd13 	bl	e2ee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    68c8:	4607      	mov	r7, r0
    68ca:	68e8      	ldr	r0, [r5, #12]
    68cc:	f007 fd13 	bl	e2f6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    68d0:	4680      	mov	r8, r0
    68d2:	68e8      	ldr	r0, [r5, #12]
    68d4:	f007 fd09 	bl	e2ea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    68d8:	4606      	mov	r6, r0
    68da:	68e8      	ldr	r0, [r5, #12]
    68dc:	f007 fd09 	bl	e2f2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    68e0:	4601      	mov	r1, r0
    68e2:	9700      	str	r7, [sp, #0]
    68e4:	6860      	ldr	r0, [r4, #4]
    68e6:	4643      	mov	r3, r8
    68e8:	4632      	mov	r2, r6
    68ea:	302c      	adds	r0, #44	; 0x2c
    68ec:	f007 fe9e 	bl	e62c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    68f0:	6860      	ldr	r0, [r4, #4]
    68f2:	f007 fe0d 	bl	e510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    68f6:	2105      	movs	r1, #5
    68f8:	6860      	ldr	r0, [r4, #4]
    68fa:	f7fe f93d 	bl	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    68fe:	6861      	ldr	r1, [r4, #4]
    6900:	2000      	movs	r0, #0
    6902:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    6906:	6861      	ldr	r1, [r4, #4]
    6908:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    690c:	f7ff f924 	bl	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    6910:	2000      	movs	r0, #0
    6912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6916:	e7ff      	b.n	6918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    6918:	2001      	movs	r0, #1
    691a:	e7fa      	b.n	6912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1386>
    691c:	200000fc 	.word	0x200000fc
    6920:	b538      	push	{r3, r4, r5, lr}
    6922:	4604      	mov	r4, r0
    6924:	6840      	ldr	r0, [r0, #4]
    6926:	2301      	movs	r3, #1
    6928:	210b      	movs	r1, #11
    692a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    692e:	3080      	adds	r0, #128	; 0x80
    6930:	f007 fa12 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6934:	bb60      	cbnz	r0, 6990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    6936:	6860      	ldr	r0, [r4, #4]
    6938:	2301      	movs	r3, #1
    693a:	2100      	movs	r1, #0
    693c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6940:	3080      	adds	r0, #128	; 0x80
    6942:	f007 fa09 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6946:	b308      	cbz	r0, 698c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    6948:	6860      	ldr	r0, [r4, #4]
    694a:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    694e:	2825      	cmp	r0, #37	; 0x25
    6950:	d01e      	beq.n	6990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    6952:	4d2a      	ldr	r5, [pc, #168]	; (69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    6954:	68e8      	ldr	r0, [r5, #12]
    6956:	f007 fce2 	bl	e31e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    695a:	b1d8      	cbz	r0, 6994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1408>
    695c:	68e8      	ldr	r0, [r5, #12]
    695e:	6862      	ldr	r2, [r4, #4]
    6960:	7941      	ldrb	r1, [r0, #5]
    6962:	f001 0107 	and.w	r1, r1, #7
    6966:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    696a:	7900      	ldrb	r0, [r0, #4]
    696c:	f000 0107 	and.w	r1, r0, #7
    6970:	6860      	ldr	r0, [r4, #4]
    6972:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    6976:	6860      	ldr	r0, [r4, #4]
    6978:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
    697c:	f88d 2000 	strb.w	r2, [sp]
    6980:	9a00      	ldr	r2, [sp, #0]
    6982:	9200      	str	r2, [sp, #0]
    6984:	f89d 2000 	ldrb.w	r2, [sp]
    6988:	bb7a      	cbnz	r2, 69ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    698a:	e008      	b.n	699e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1412>
    698c:	2001      	movs	r0, #1
    698e:	bd38      	pop	{r3, r4, r5, pc}
    6990:	2020      	movs	r0, #32
    6992:	bd38      	pop	{r3, r4, r5, pc}
    6994:	4620      	mov	r0, r4
    6996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    699a:	f7ff bef7 	b.w	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    699e:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
    69a2:	2a01      	cmp	r2, #1
    69a4:	d021      	beq.n	69ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    69a6:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    69aa:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    69ae:	7855      	ldrb	r5, [r2, #1]
    69b0:	428d      	cmp	r5, r1
    69b2:	d106      	bne.n	69c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    69b4:	7811      	ldrb	r1, [r2, #0]
    69b6:	4299      	cmp	r1, r3
    69b8:	d103      	bne.n	69c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    69ba:	2102      	movs	r1, #2
    69bc:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    69c0:	e013      	b.n	69ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    69c2:	480e      	ldr	r0, [pc, #56]	; (69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    69c4:	3010      	adds	r0, #16
    69c6:	6841      	ldr	r1, [r0, #4]
    69c8:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    69cc:	880a      	ldrh	r2, [r1, #0]
    69ce:	f820 2b02 	strh.w	r2, [r0], #2
    69d2:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    69d6:	f800 2b01 	strb.w	r2, [r0], #1
    69da:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    69de:	f800 190d 	strb.w	r1, [r0], #-13
    69e2:	2222      	movs	r2, #34	; 0x22
    69e4:	4906      	ldr	r1, [pc, #24]	; (6a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1474>)
    69e6:	f007 fd4e 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69ea:	6861      	ldr	r1, [r4, #4]
    69ec:	2022      	movs	r0, #34	; 0x22
    69ee:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    69f2:	f7fe fecd 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    69f6:	2000      	movs	r0, #0
    69f8:	bd38      	pop	{r3, r4, r5, pc}
    69fa:	0000      	.short	0x0000
    69fc:	200000fc 	.word	0x200000fc
    6a00:	00010907 	.word	0x00010907
    6a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a08:	6845      	ldr	r5, [r0, #4]
    6a0a:	4604      	mov	r4, r0
    6a0c:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    6a10:	2821      	cmp	r0, #33	; 0x21
    6a12:	d008      	beq.n	6a26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149a>
    6a14:	f05f 0600 	movs.w	r6, #0
    6a18:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6a1c:	2823      	cmp	r0, #35	; 0x23
    6a1e:	d004      	beq.n	6a2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    6a20:	b38e      	cbz	r6, 6a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fa>
    6a22:	359d      	adds	r5, #157	; 0x9d
    6a24:	e002      	b.n	6a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    6a26:	2601      	movs	r6, #1
    6a28:	e7f6      	b.n	6a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148c>
    6a2a:	359e      	adds	r5, #158	; 0x9e
    6a2c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    6a30:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6a34:	f007 fc7f 	bl	e336 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6a38:	2700      	movs	r7, #0
    6a3a:	b340      	cbz	r0, 6a8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6a3c:	4631      	mov	r1, r6
    6a3e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6a42:	f7fe ff7f 	bl	5944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    6a46:	b310      	cbz	r0, 6a8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6a48:	466a      	mov	r2, sp
    6a4a:	4646      	mov	r6, r8
    6a4c:	6860      	ldr	r0, [r4, #4]
    6a4e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6a52:	f007 fa96 	bl	df82 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    6a56:	b3c0      	cbz	r0, 6aca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153e>
    6a58:	68f0      	ldr	r0, [r6, #12]
    6a5a:	f007 fc6a 	bl	e332 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6a5e:	6861      	ldr	r1, [r4, #4]
    6a60:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6a64:	6861      	ldr	r1, [r4, #4]
    6a66:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6a6a:	f008 fd7f 	bl	f56c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6a6e:	b368      	cbz	r0, 6acc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>
    6a70:	6861      	ldr	r1, [r4, #4]
    6a72:	2028      	movs	r0, #40	; 0x28
    6a74:	220b      	movs	r2, #11
    6a76:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6a7a:	6860      	ldr	r0, [r4, #4]
    6a7c:	4935      	ldr	r1, [pc, #212]	; (6b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6a7e:	30b4      	adds	r0, #180	; 0xb4
    6a80:	f007 fd01 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6a84:	e058      	b.n	6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6a86:	e7ff      	b.n	6a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fc>
    6a88:	2002      	movs	r0, #2
    6a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6a8e:	6860      	ldr	r0, [r4, #4]
    6a90:	f04f 0900 	mov.w	r9, #0
    6a94:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6a98:	2901      	cmp	r1, #1
    6a9a:	d018      	beq.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    6a9c:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6aa0:	b30e      	cbz	r6, 6ae6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155a>
    6aa2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6aa6:	6861      	ldr	r1, [r4, #4]
    6aa8:	2201      	movs	r2, #1
    6aaa:	78c0      	ldrb	r0, [r0, #3]
    6aac:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    6ab0:	4082      	lsls	r2, r0
    6ab2:	6861      	ldr	r1, [r4, #4]
    6ab4:	f3c2 6000 	ubfx	r0, r2, #24, #1
    6ab8:	b168      	cbz	r0, 6ad6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    6aba:	2009      	movs	r0, #9
    6abc:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6ac0:	6860      	ldr	r0, [r4, #4]
    6ac2:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    6ac6:	b9a8      	cbnz	r0, 6af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1568>
    6ac8:	e008      	b.n	6adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1550>
    6aca:	e015      	b.n	6af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    6acc:	e028      	b.n	6b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1594>
    6ace:	201e      	movs	r0, #30
    6ad0:	f7ff fd24 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6ad4:	e7e4      	b.n	6aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1514>
    6ad6:	f240 4183 	movw	r1, #1155	; 0x483
    6ada:	e001      	b.n	6ae0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    6adc:	f240 418b 	movw	r1, #1163	; 0x48b
    6ae0:	2031      	movs	r0, #49	; 0x31
    6ae2:	f7fa fc5d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ae6:	702f      	strb	r7, [r5, #0]
    6ae8:	f7fe fe5e 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6aec:	4620      	mov	r0, r4
    6aee:	f7ff fe4d 	bl	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6af2:	4681      	mov	r9, r0
    6af4:	4648      	mov	r0, r9
    6af6:	e7c8      	b.n	6a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6af8:	6860      	ldr	r0, [r4, #4]
    6afa:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6afe:	2901      	cmp	r1, #1
    6b00:	d009      	beq.n	6b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158a>
    6b02:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6b06:	6860      	ldr	r0, [r4, #4]
    6b08:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6b0c:	42a9      	cmp	r1, r5
    6b0e:	d113      	bne.n	6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b10:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6b14:	e010      	b.n	6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b16:	2000      	movs	r0, #0
    6b18:	f7ff fd00 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6b1c:	702f      	strb	r7, [r5, #0]
    6b1e:	e7f2      	b.n	6b06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157a>
    6b20:	6861      	ldr	r1, [r4, #4]
    6b22:	f89d 0000 	ldrb.w	r0, [sp]
    6b26:	f881 02ce 	strb.w	r0, [r1, #718]	; 0x2ce
    6b2a:	6861      	ldr	r1, [r4, #4]
    6b2c:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6b30:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6b34:	2025      	movs	r0, #37	; 0x25
    6b36:	7028      	strb	r0, [r5, #0]
    6b38:	6860      	ldr	r0, [r4, #4]
    6b3a:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6b3e:	42a9      	cmp	r1, r5
    6b40:	d102      	bne.n	6b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    6b42:	f7fe fe31 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6b46:	e001      	b.n	6b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    6b48:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6b4c:	2000      	movs	r0, #0
    6b4e:	e79c      	b.n	6a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6b50:	200000fc 	.word	0x200000fc
    6b54:	0000e7c5 	.word	0x0000e7c5
    6b58:	b570      	push	{r4, r5, r6, lr}
    6b5a:	4604      	mov	r4, r0
    6b5c:	6840      	ldr	r0, [r0, #4]
    6b5e:	4d0a      	ldr	r5, [pc, #40]	; (6b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6b60:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    6b64:	f041 0104 	orr.w	r1, r1, #4
    6b68:	7001      	strb	r1, [r0, #0]
    6b6a:	68e8      	ldr	r0, [r5, #12]
    6b6c:	f007 fbf7 	bl	e35e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6b70:	4606      	mov	r6, r0
    6b72:	68e8      	ldr	r0, [r5, #12]
    6b74:	f007 fbf7 	bl	e366 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6b78:	4601      	mov	r1, r0
    6b7a:	4622      	mov	r2, r4
    6b7c:	4630      	mov	r0, r6
    6b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b82:	f000 b895 	b.w	6cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    6b86:	0000      	.short	0x0000
    6b88:	200000fc 	.word	0x200000fc
    6b8c:	4602      	mov	r2, r0
    6b8e:	4813      	ldr	r0, [pc, #76]	; (6bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    6b90:	68c0      	ldr	r0, [r0, #12]
    6b92:	7901      	ldrb	r1, [r0, #4]
    6b94:	4811      	ldr	r0, [pc, #68]	; (6bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    6b96:	3010      	adds	r0, #16
    6b98:	6843      	ldr	r3, [r0, #4]
    6b9a:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    6b9e:	2821      	cmp	r0, #33	; 0x21
    6ba0:	d010      	beq.n	6bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    6ba2:	282e      	cmp	r0, #46	; 0x2e
    6ba4:	d00e      	beq.n	6bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    6ba6:	2828      	cmp	r0, #40	; 0x28
    6ba8:	d00e      	beq.n	6bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163c>
    6baa:	2804      	cmp	r0, #4
    6bac:	d00e      	beq.n	6bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1640>
    6bae:	280f      	cmp	r0, #15
    6bb0:	d00e      	beq.n	6bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    6bb2:	281d      	cmp	r0, #29
    6bb4:	d00e      	beq.n	6bd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1648>
    6bb6:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    6bba:	2823      	cmp	r0, #35	; 0x23
    6bbc:	d00c      	beq.n	6bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164c>
    6bbe:	20fe      	movs	r0, #254	; 0xfe
    6bc0:	f000 b876 	b.w	6cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    6bc4:	2016      	movs	r0, #22
    6bc6:	e7fb      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bc8:	2023      	movs	r0, #35	; 0x23
    6bca:	e7f9      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bcc:	200e      	movs	r0, #14
    6bce:	e7f7      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bd0:	2012      	movs	r0, #18
    6bd2:	e7f5      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bd4:	2014      	movs	r0, #20
    6bd6:	e7f3      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bd8:	2017      	movs	r0, #23
    6bda:	e7f1      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bdc:	200000fc 	.word	0x200000fc
    6be0:	b510      	push	{r4, lr}
    6be2:	4604      	mov	r4, r0
    6be4:	6840      	ldr	r0, [r0, #4]
    6be6:	2301      	movs	r3, #1
    6be8:	4619      	mov	r1, r3
    6bea:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6bee:	3080      	adds	r0, #128	; 0x80
    6bf0:	f007 f8b2 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6bf4:	b108      	cbz	r0, 6bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166e>
    6bf6:	2000      	movs	r0, #0
    6bf8:	bd10      	pop	{r4, pc}
    6bfa:	4806      	ldr	r0, [pc, #24]	; (6c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6bfc:	68c0      	ldr	r0, [r0, #12]
    6bfe:	f007 fbdc 	bl	e3ba <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6c02:	6861      	ldr	r1, [r4, #4]
    6c04:	f881 00a0 	strb.w	r0, [r1, #160]	; 0xa0
    6c08:	6861      	ldr	r1, [r4, #4]
    6c0a:	2006      	movs	r0, #6
    6c0c:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    6c10:	e7f1      	b.n	6bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    6c12:	0000      	.short	0x0000
    6c14:	200000fc 	.word	0x200000fc
    6c18:	b570      	push	{r4, r5, r6, lr}
    6c1a:	4604      	mov	r4, r0
    6c1c:	481f      	ldr	r0, [pc, #124]	; (6c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>)
    6c1e:	2500      	movs	r5, #0
    6c20:	68c0      	ldr	r0, [r0, #12]
    6c22:	7903      	ldrb	r3, [r0, #4]
    6c24:	6860      	ldr	r0, [r4, #4]
    6c26:	2b16      	cmp	r3, #22
    6c28:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6c2c:	d013      	beq.n	6c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    6c2e:	dc06      	bgt.n	6c3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    6c30:	2b0e      	cmp	r3, #14
    6c32:	d009      	beq.n	6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6c34:	2b12      	cmp	r3, #18
    6c36:	d007      	beq.n	6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6c38:	2b14      	cmp	r3, #20
    6c3a:	d12c      	bne.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c3c:	e004      	b.n	6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6c3e:	2b17      	cmp	r3, #23
    6c40:	d002      	beq.n	6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6c42:	2b23      	cmp	r3, #35	; 0x23
    6c44:	d127      	bne.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c46:	e01f      	b.n	6c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6c48:	4622      	mov	r2, r4
    6c4a:	2101      	movs	r1, #1
    6c4c:	4618      	mov	r0, r3
    6c4e:	f008 fe3a 	bl	f8c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6c52:	4605      	mov	r5, r0
    6c54:	e01f      	b.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c56:	2821      	cmp	r0, #33	; 0x21
    6c58:	d001      	beq.n	6c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    6c5a:	282e      	cmp	r0, #46	; 0x2e
    6c5c:	d11b      	bne.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c5e:	4620      	mov	r0, r4
    6c60:	f008 fc90 	bl	f584 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    6c64:	6860      	ldr	r0, [r4, #4]
    6c66:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6c6a:	2922      	cmp	r1, #34	; 0x22
    6c6c:	d013      	beq.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c6e:	2108      	movs	r1, #8
    6c70:	30ec      	adds	r0, #236	; 0xec
    6c72:	f008 fc3b 	bl	f4ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    6c76:	6860      	ldr	r0, [r4, #4]
    6c78:	210b      	movs	r1, #11
    6c7a:	30ec      	adds	r0, #236	; 0xec
    6c7c:	f008 fc36 	bl	f4ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    6c80:	201a      	movs	r0, #26
    6c82:	f7ff fc4b 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6c86:	e006      	b.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c88:	2828      	cmp	r0, #40	; 0x28
    6c8a:	d104      	bne.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c8c:	4804      	ldr	r0, [pc, #16]	; (6ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>)
    6c8e:	6801      	ldr	r1, [r0, #0]
    6c90:	b109      	cbz	r1, 6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c92:	4620      	mov	r0, r4
    6c94:	4788      	blx	r1
    6c96:	4628      	mov	r0, r5
    6c98:	bd70      	pop	{r4, r5, r6, pc}
    6c9a:	0000      	.short	0x0000
    6c9c:	200000fc 	.word	0x200000fc
    6ca0:	20000270 	.word	0x20000270
    6ca4:	4901      	ldr	r1, [pc, #4]	; (6cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1720>)
    6ca6:	68c9      	ldr	r1, [r1, #12]
    6ca8:	f7fc bdf2 	b.w	3890 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6cac:	200000fc 	.word	0x200000fc
    6cb0:	4603      	mov	r3, r0
    6cb2:	2000      	movs	r0, #0
    6cb4:	2b17      	cmp	r3, #23
    6cb6:	d017      	beq.n	6ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6cb8:	dc0a      	bgt.n	6cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    6cba:	2b0e      	cmp	r3, #14
    6cbc:	d014      	beq.n	6ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6cbe:	2b12      	cmp	r3, #18
    6cc0:	d012      	beq.n	6ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6cc2:	2b14      	cmp	r3, #20
    6cc4:	d010      	beq.n	6ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6cc6:	2b16      	cmp	r3, #22
    6cc8:	d112      	bne.n	6cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6cca:	4608      	mov	r0, r1
    6ccc:	f7ff bc4c 	b.w	6568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    6cd0:	2b23      	cmp	r3, #35	; 0x23
    6cd2:	d003      	beq.n	6cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6cd4:	2b24      	cmp	r3, #36	; 0x24
    6cd6:	d001      	beq.n	6cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6cd8:	2b25      	cmp	r3, #37	; 0x25
    6cda:	d109      	bne.n	6cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6cdc:	4a05      	ldr	r2, [pc, #20]	; (6cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>)
    6cde:	6812      	ldr	r2, [r2, #0]
    6ce0:	2a00      	cmp	r2, #0
    6ce2:	d005      	beq.n	6cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6ce4:	4618      	mov	r0, r3
    6ce6:	4710      	bx	r2
    6ce8:	2100      	movs	r1, #0
    6cea:	4618      	mov	r0, r3
    6cec:	f008 bdeb 	b.w	f8c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6cf0:	4770      	bx	lr
    6cf2:	0000      	.short	0x0000
    6cf4:	2000026c 	.word	0x2000026c
    6cf8:	4a03      	ldr	r2, [pc, #12]	; (6d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177c>)
    6cfa:	6852      	ldr	r2, [r2, #4]
    6cfc:	f882 0123 	strb.w	r0, [r2, #291]	; 0x123
    6d00:	f882 1122 	strb.w	r1, [r2, #290]	; 0x122
    6d04:	4770      	bx	lr
    6d06:	0000      	.short	0x0000
    6d08:	2000010c 	.word	0x2000010c
    6d0c:	b570      	push	{r4, r5, r6, lr}
    6d0e:	4604      	mov	r4, r0
    6d10:	6840      	ldr	r0, [r0, #4]
    6d12:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6d16:	291c      	cmp	r1, #28
    6d18:	d004      	beq.n	6d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    6d1a:	f640 014e 	movw	r1, #2126	; 0x84e
    6d1e:	2031      	movs	r0, #49	; 0x31
    6d20:	f7fa fb3e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d24:	2500      	movs	r5, #0
    6d26:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6d2a:	6860      	ldr	r0, [r4, #4]
    6d2c:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6d30:	b161      	cbz	r1, 6d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    6d32:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    6d36:	6860      	ldr	r0, [r4, #4]
    6d38:	220d      	movs	r2, #13
    6d3a:	8801      	ldrh	r1, [r0, #0]
    6d3c:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d40:	6860      	ldr	r0, [r4, #4]
    6d42:	490d      	ldr	r1, [pc, #52]	; (6d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ec>)
    6d44:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d48:	6860      	ldr	r0, [r4, #4]
    6d4a:	e00c      	b.n	6d66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17da>
    6d4c:	8801      	ldrh	r1, [r0, #0]
    6d4e:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d52:	6860      	ldr	r0, [r4, #4]
    6d54:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d58:	6861      	ldr	r1, [r4, #4]
    6d5a:	2001      	movs	r0, #1
    6d5c:	220c      	movs	r2, #12
    6d5e:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    6d62:	4906      	ldr	r1, [pc, #24]	; (6d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f0>)
    6d64:	6860      	ldr	r0, [r4, #4]
    6d66:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6d6a:	f007 fb8c 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6d6e:	6860      	ldr	r0, [r4, #4]
    6d70:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    6d74:	bd70      	pop	{r4, r5, r6, pc}
    6d76:	0000      	.short	0x0000
    6d78:	0000e865 	.word	0x0000e865
    6d7c:	0000e847 	.word	0x0000e847
    6d80:	4915      	ldr	r1, [pc, #84]	; (6dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>)
    6d82:	b510      	push	{r4, lr}
    6d84:	6889      	ldr	r1, [r1, #8]
    6d86:	790a      	ldrb	r2, [r1, #4]
    6d88:	6841      	ldr	r1, [r0, #4]
    6d8a:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6d8e:	2b09      	cmp	r3, #9
    6d90:	d10a      	bne.n	6da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    6d92:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    6d96:	4293      	cmp	r3, r2
    6d98:	d106      	bne.n	6da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    6d9a:	2200      	movs	r2, #0
    6d9c:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6da0:	6840      	ldr	r0, [r0, #4]
    6da2:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    6da6:	bd10      	pop	{r4, pc}
    6da8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6dac:	071c      	lsls	r4, r3, #28
    6dae:	d507      	bpl.n	6dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    6db0:	f023 0008 	bic.w	r0, r3, #8
    6db4:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dbc:	f7fe bcf4 	b.w	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6dc0:	2aff      	cmp	r2, #255	; 0xff
    6dc2:	d004      	beq.n	6dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1842>
    6dc4:	f240 71ea 	movw	r1, #2026	; 0x7ea
    6dc8:	2031      	movs	r0, #49	; 0x31
    6dca:	f7fa fae9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dd2:	f008 bc8d 	b.w	f6f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    6dd6:	0000      	.short	0x0000
    6dd8:	200000fc 	.word	0x200000fc
    6ddc:	4808      	ldr	r0, [pc, #32]	; (6e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1874>)
    6dde:	b510      	push	{r4, lr}
    6de0:	6840      	ldr	r0, [r0, #4]
    6de2:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6de6:	b941      	cbnz	r1, 6dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186e>
    6de8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6dec:	2301      	movs	r3, #1
    6dee:	2106      	movs	r1, #6
    6df0:	3080      	adds	r0, #128	; 0x80
    6df2:	f006 ffb1 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6df6:	2800      	cmp	r0, #0
    6df8:	d000      	beq.n	6dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    6dfa:	2001      	movs	r0, #1
    6dfc:	bd10      	pop	{r4, pc}
    6dfe:	0000      	.short	0x0000
    6e00:	2000010c 	.word	0x2000010c
    6e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e06:	4c59      	ldr	r4, [pc, #356]	; (6f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6e08:	4606      	mov	r6, r0
    6e0a:	4615      	mov	r5, r2
    6e0c:	6860      	ldr	r0, [r4, #4]
    6e0e:	2200      	movs	r2, #0
    6e10:	b111      	cbz	r1, 6e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    6e12:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6e16:	e006      	b.n	6e26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189a>
    6e18:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6e1c:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    6e20:	4411      	add	r1, r2
    6e22:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    6e26:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6e2a:	f88d 1000 	strb.w	r1, [sp]
    6e2e:	9900      	ldr	r1, [sp, #0]
    6e30:	9100      	str	r1, [sp, #0]
    6e32:	f89d 1000 	ldrb.w	r1, [sp]
    6e36:	b939      	cbnz	r1, 6e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    6e38:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6e3c:	2301      	movs	r3, #1
    6e3e:	4619      	mov	r1, r3
    6e40:	3080      	adds	r0, #128	; 0x80
    6e42:	f006 ff89 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e46:	b130      	cbz	r0, 6e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    6e48:	6860      	ldr	r0, [r4, #4]
    6e4a:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    6e4e:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    6e52:	4411      	add	r1, r2
    6e54:	8001      	strh	r1, [r0, #0]
    6e56:	6860      	ldr	r0, [r4, #4]
    6e58:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    6e5c:	b132      	cbz	r2, 6e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e0>
    6e5e:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6e62:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6e66:	4419      	add	r1, r3
    6e68:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6e6c:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    6e70:	2b00      	cmp	r3, #0
    6e72:	dd06      	ble.n	6e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f6>
    6e74:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6e78:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6e7c:	4439      	add	r1, r7
    6e7e:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    6e82:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6e86:	bb09      	cbnz	r1, 6ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    6e88:	b9be      	cbnz	r6, 6eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192e>
    6e8a:	4938      	ldr	r1, [pc, #224]	; (6f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6e8c:	3910      	subs	r1, #16
    6e8e:	7809      	ldrb	r1, [r1, #0]
    6e90:	2902      	cmp	r1, #2
    6e92:	d006      	beq.n	6ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    6e94:	2901      	cmp	r1, #1
    6e96:	d00a      	beq.n	6eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1922>
    6e98:	b1f5      	cbz	r5, 6ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    6e9a:	06e9      	lsls	r1, r5, #27
    6e9c:	d50b      	bpl.n	6eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192a>
    6e9e:	211e      	movs	r1, #30
    6ea0:	e042      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6ea2:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6ea6:	2906      	cmp	r1, #6
    6ea8:	d03e      	beq.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6eaa:	2116      	movs	r1, #22
    6eac:	e03c      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6eae:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    6eb2:	b959      	cbnz	r1, 6ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    6eb4:	e054      	b.n	6f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6eb6:	0729      	lsls	r1, r5, #28
    6eb8:	d501      	bpl.n	6ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1932>
    6eba:	213d      	movs	r1, #61	; 0x3d
    6ebc:	e034      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6ebe:	06a9      	lsls	r1, r5, #26
    6ec0:	d501      	bpl.n	6ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x193a>
    6ec2:	2123      	movs	r1, #35	; 0x23
    6ec4:	e030      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6ec6:	07a9      	lsls	r1, r5, #30
    6ec8:	d001      	beq.n	6ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    6eca:	212a      	movs	r1, #42	; 0x2a
    6ecc:	e02c      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6ece:	f640 615e 	movw	r1, #3678	; 0xe5e
    6ed2:	2031      	movs	r0, #49	; 0x31
    6ed4:	f7fa fa64 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ed8:	b12a      	cbz	r2, 6ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    6eda:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6ede:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6ee2:	4291      	cmp	r1, r2
    6ee4:	d216      	bcs.n	6f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	dd05      	ble.n	6ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196a>
    6eea:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6eee:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6ef2:	4291      	cmp	r1, r2
    6ef4:	d20e      	bcs.n	6f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    6ef6:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6efa:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6efe:	428a      	cmp	r2, r1
    6f00:	d30a      	bcc.n	6f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f02:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6f06:	f88d 2000 	strb.w	r2, [sp]
    6f0a:	9a00      	ldr	r2, [sp, #0]
    6f0c:	9200      	str	r2, [sp, #0]
    6f0e:	f89d 2000 	ldrb.w	r2, [sp]
    6f12:	b10a      	cbz	r2, 6f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f14:	2122      	movs	r1, #34	; 0x22
    6f16:	e007      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f18:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6f1c:	b172      	cbz	r2, 6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f1e:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6f22:	428a      	cmp	r2, r1
    6f24:	d31c      	bcc.n	6f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6f26:	2108      	movs	r1, #8
    6f28:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6f2c:	f88d 2000 	strb.w	r2, [sp]
    6f30:	9a00      	ldr	r2, [sp, #0]
    6f32:	9200      	str	r2, [sp, #0]
    6f34:	f89d 2000 	ldrb.w	r2, [sp]
    6f38:	b96a      	cbnz	r2, 6f56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    6f3a:	e005      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>
    6f3c:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6f40:	2906      	cmp	r1, #6
    6f42:	d30d      	bcc.n	6f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6f44:	213e      	movs	r1, #62	; 0x3e
    6f46:	e7ef      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f48:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6f4c:	220b      	movs	r2, #11
    6f4e:	4908      	ldr	r1, [pc, #32]	; (6f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>)
    6f50:	30b4      	adds	r0, #180	; 0xb4
    6f52:	f007 fa98 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6f56:	6860      	ldr	r0, [r4, #4]
    6f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f5c:	f008 bad6 	b.w	f50c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    6f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f64:	2100      	movs	r1, #0
    6f66:	f7fd be07 	b.w	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6f6a:	0000      	.short	0x0000
    6f6c:	2000010c 	.word	0x2000010c
    6f70:	0000e7c5 	.word	0x0000e7c5
    6f74:	b570      	push	{r4, r5, r6, lr}
    6f76:	4d2e      	ldr	r5, [pc, #184]	; (7030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa4>)
    6f78:	6868      	ldr	r0, [r5, #4]
    6f7a:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6f7e:	b151      	cbz	r1, 6f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    6f80:	2901      	cmp	r1, #1
    6f82:	d008      	beq.n	6f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    6f84:	2902      	cmp	r1, #2
    6f86:	d009      	beq.n	6f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    6f88:	2903      	cmp	r1, #3
    6f8a:	d007      	beq.n	6f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    6f8c:	f640 41d7 	movw	r1, #3287	; 0xcd7
    6f90:	2031      	movs	r0, #49	; 0x31
    6f92:	f7fa fa05 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f96:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6f9a:	e037      	b.n	700c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a80>
    6f9c:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    6fa0:	2907      	cmp	r1, #7
    6fa2:	d036      	beq.n	7012 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a86>
    6fa4:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6fa8:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6fac:	2400      	movs	r4, #0
    6fae:	1c93      	adds	r3, r2, #2
    6fb0:	4299      	cmp	r1, r3
    6fb2:	d306      	bcc.n	6fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a36>
    6fb4:	1a89      	subs	r1, r1, r2
    6fb6:	1e89      	subs	r1, r1, #2
    6fb8:	040c      	lsls	r4, r1, #16
    6fba:	0c24      	lsrs	r4, r4, #16
    6fbc:	d001      	beq.n	6fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a36>
    6fbe:	1e64      	subs	r4, r4, #1
    6fc0:	b2a4      	uxth	r4, r4
    6fc2:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    6fc6:	b139      	cbz	r1, 6fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>
    6fc8:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6fcc:	2301      	movs	r3, #1
    6fce:	2109      	movs	r1, #9
    6fd0:	3080      	adds	r0, #128	; 0x80
    6fd2:	f006 fec1 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6fd6:	b340      	cbz	r0, 702a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
    6fd8:	f7ff ff00 	bl	6ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    6fdc:	b178      	cbz	r0, 6ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a72>
    6fde:	686a      	ldr	r2, [r5, #4]
    6fe0:	2000      	movs	r0, #0
    6fe2:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    6fe6:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    6fea:	1c93      	adds	r3, r2, #2
    6fec:	4299      	cmp	r1, r3
    6fee:	d303      	bcc.n	6ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>
    6ff0:	1a88      	subs	r0, r1, r2
    6ff2:	1e80      	subs	r0, r0, #2
    6ff4:	d000      	beq.n	6ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>
    6ff6:	1e40      	subs	r0, r0, #1
    6ff8:	42a0      	cmp	r0, r4
    6ffa:	d200      	bcs.n	6ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a72>
    6ffc:	b284      	uxth	r4, r0
    6ffe:	b10c      	cbz	r4, 7004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    7000:	1e64      	subs	r4, r4, #1
    7002:	b2a4      	uxth	r4, r4
    7004:	6868      	ldr	r0, [r5, #4]
    7006:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    700a:	4421      	add	r1, r4
    700c:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    7010:	bd70      	pop	{r4, r5, r6, pc}
    7012:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    7016:	2903      	cmp	r1, #3
    7018:	d3bd      	bcc.n	6f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    701a:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    701e:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    7020:	4411      	add	r1, r2
    7022:	1c49      	adds	r1, r1, #1
    7024:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    7028:	bd70      	pop	{r4, r5, r6, pc}
    702a:	2400      	movs	r4, #0
    702c:	e7ea      	b.n	7004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    702e:	0000      	.short	0x0000
    7030:	2000010c 	.word	0x2000010c

00007034 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    7034:	b570      	push	{r4, r5, r6, lr}
    7036:	6844      	ldr	r4, [r0, #4]
    7038:	220d      	movs	r2, #13
    703a:	f504 7598 	add.w	r5, r4, #304	; 0x130
    703e:	2100      	movs	r1, #0
    7040:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    7044:	f009 ff2e 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7048:	f44f 70a3 	mov.w	r0, #326	; 0x146
    704c:	2100      	movs	r1, #0
    704e:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    7052:	5501      	strb	r1, [r0, r4]
    7054:	f8a5 1017 	strh.w	r1, [r5, #23]
    7058:	7669      	strb	r1, [r5, #25]
    705a:	4608      	mov	r0, r1
    705c:	f05f 017f 	movs.w	r1, #127	; 0x7f
    7060:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    7064:	1c40      	adds	r0, r0, #1
    7066:	b2c0      	uxtb	r0, r0
    7068:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    706c:	2802      	cmp	r0, #2
    706e:	d3f7      	bcc.n	7060 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    7070:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    7074:	4620      	mov	r0, r4
    7076:	f008 fd14 	bl	faa2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    707a:	2000      	movs	r0, #0
    707c:	21ff      	movs	r1, #255	; 0xff
    707e:	1822      	adds	r2, r4, r0
    7080:	1c40      	adds	r0, r0, #1
    7082:	b2c0      	uxtb	r0, r0
    7084:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    7088:	2802      	cmp	r0, #2
    708a:	d3f8      	bcc.n	707e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    708c:	bd70      	pop	{r4, r5, r6, pc}
	...

00007090 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    7090:	4903      	ldr	r1, [pc, #12]	; (70a0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    7092:	884a      	ldrh	r2, [r1, #2]
    7094:	8002      	strh	r2, [r0, #0]
    7096:	7809      	ldrb	r1, [r1, #0]
    7098:	7081      	strb	r1, [r0, #2]
    709a:	2000      	movs	r0, #0
    709c:	4770      	bx	lr
    709e:	0000      	.short	0x0000
    70a0:	20000f88 	.word	0x20000f88

000070a4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    70a4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    70a6:	460c      	mov	r4, r1
    70a8:	4605      	mov	r5, r0
    70aa:	8800      	ldrh	r0, [r0, #0]
    70ac:	4669      	mov	r1, sp
    70ae:	f006 fe29 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    70b2:	2200      	movs	r2, #0
    70b4:	b128      	cbz	r0, 70c2 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    70b6:	f8c4 2002 	str.w	r2, [r4, #2]
    70ba:	71a2      	strb	r2, [r4, #6]
    70bc:	8022      	strh	r2, [r4, #0]
    70be:	2002      	movs	r0, #2
    70c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70c2:	9901      	ldr	r1, [sp, #4]
    70c4:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    70c8:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    70cc:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    70d0:	f8c4 0002 	str.w	r0, [r4, #2]
    70d4:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    70d8:	71a0      	strb	r0, [r4, #6]
    70da:	8828      	ldrh	r0, [r5, #0]
    70dc:	8020      	strh	r0, [r4, #0]
    70de:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    70e2:	f88d 0008 	strb.w	r0, [sp, #8]
    70e6:	9802      	ldr	r0, [sp, #8]
    70e8:	9002      	str	r0, [sp, #8]
    70ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    70ee:	2800      	cmp	r0, #0
    70f0:	d1ea      	bne.n	70c8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    70f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000070f4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    70f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    70f6:	460d      	mov	r5, r1
    70f8:	4606      	mov	r6, r0
    70fa:	8800      	ldrh	r0, [r0, #0]
    70fc:	4669      	mov	r1, sp
    70fe:	f006 fe01 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7102:	2800      	cmp	r0, #0
    7104:	d11a      	bne.n	713c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    7106:	f8dd 4004 	ldr.w	r4, [sp, #4]
    710a:	2700      	movs	r7, #0
    710c:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7110:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    7114:	f009 f9d1 	bl	104ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    7118:	70a8      	strb	r0, [r5, #2]
    711a:	7860      	ldrb	r0, [r4, #1]
    711c:	f009 f9cd 	bl	104ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    7120:	70e8      	strb	r0, [r5, #3]
    7122:	78a0      	ldrb	r0, [r4, #2]
    7124:	f88d 0008 	strb.w	r0, [sp, #8]
    7128:	9802      	ldr	r0, [sp, #8]
    712a:	9002      	str	r0, [sp, #8]
    712c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7130:	3c6a      	subs	r4, #106	; 0x6a
    7132:	2800      	cmp	r0, #0
    7134:	d1ea      	bne.n	710c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    7136:	8830      	ldrh	r0, [r6, #0]
    7138:	8028      	strh	r0, [r5, #0]
    713a:	2000      	movs	r0, #0
    713c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007140 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7140:	4903      	ldr	r1, [pc, #12]	; (7150 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    7142:	888a      	ldrh	r2, [r1, #4]
    7144:	8002      	strh	r2, [r0, #0]
    7146:	88c9      	ldrh	r1, [r1, #6]
    7148:	8041      	strh	r1, [r0, #2]
    714a:	2000      	movs	r0, #0
    714c:	4770      	bx	lr
    714e:	0000      	.short	0x0000
    7150:	2000027c 	.word	0x2000027c

00007154 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7154:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7156:	2400      	movs	r4, #0
    7158:	a902      	add	r1, sp, #8
    715a:	f88d 4004 	strb.w	r4, [sp, #4]
    715e:	f88d 4008 	strb.w	r4, [sp, #8]
    7162:	9100      	str	r1, [sp, #0]
    7164:	7882      	ldrb	r2, [r0, #2]
    7166:	7841      	ldrb	r1, [r0, #1]
    7168:	7800      	ldrb	r0, [r0, #0]
    716a:	ab01      	add	r3, sp, #4
    716c:	f009 fb19 	bl	107a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    7170:	2800      	cmp	r0, #0
    7172:	d112      	bne.n	719a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7174:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7178:	f009 fa53 	bl	10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    717c:	b170      	cbz	r0, 719c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    717e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7182:	f009 fa4e 	bl	10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    7186:	b148      	cbz	r0, 719c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7188:	4805      	ldr	r0, [pc, #20]	; (71a0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    718a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    718e:	7381      	strb	r1, [r0, #14]
    7190:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7194:	73c1      	strb	r1, [r0, #15]
    7196:	8204      	strh	r4, [r0, #16]
    7198:	2000      	movs	r0, #0
    719a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    719c:	2011      	movs	r0, #17
    719e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    71a0:	20000f88 	.word	0x20000f88

000071a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    71a4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    71a8:	460f      	mov	r7, r1
    71aa:	4605      	mov	r5, r0
    71ac:	7806      	ldrb	r6, [r0, #0]
    71ae:	f009 f9eb 	bl	10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    71b2:	2800      	cmp	r0, #0
    71b4:	d10a      	bne.n	71cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    71b6:	4628      	mov	r0, r5
    71b8:	f009 f9c0 	bl	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    71bc:	2800      	cmp	r0, #0
    71be:	d105      	bne.n	71cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    71c0:	2001      	movs	r0, #1
    71c2:	f7fa fae1 	bl	1788 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    71c6:	4286      	cmp	r6, r0
    71c8:	d302      	bcc.n	71d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    71ca:	2007      	movs	r0, #7
    71cc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    71d0:	2101      	movs	r1, #1
    71d2:	4630      	mov	r0, r6
    71d4:	f006 fb1b 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    71d8:	0004      	movs	r4, r0
    71da:	d004      	beq.n	71e6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    71dc:	f007 fea8 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    71e0:	b168      	cbz	r0, 71fe <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    71e2:	200c      	movs	r0, #12
    71e4:	e7f2      	b.n	71cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    71e6:	2101      	movs	r1, #1
    71e8:	4630      	mov	r0, r6
    71ea:	f006 fb06 	bl	d7fa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    71ee:	0004      	movs	r4, r0
    71f0:	d013      	beq.n	721a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    71f2:	4817      	ldr	r0, [pc, #92]	; (7250 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    71f4:	f990 1000 	ldrsb.w	r1, [r0]
    71f8:	4620      	mov	r0, r4
    71fa:	f007 fc5b 	bl	eab4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    71fe:	4620      	mov	r0, r4
    7200:	f007 fcc3 	bl	eb8a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    7204:	7038      	strb	r0, [r7, #0]
    7206:	74e8      	strb	r0, [r5, #19]
    7208:	4629      	mov	r1, r5
    720a:	4620      	mov	r0, r4
    720c:	f7fc fce6 	bl	3bdc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    7210:	4606      	mov	r6, r0
    7212:	7e68      	ldrb	r0, [r5, #25]
    7214:	b1d0      	cbz	r0, 724c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    7216:	b12e      	cbz	r6, 7224 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    7218:	e018      	b.n	724c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    721a:	f241 31e8 	movw	r1, #5096	; 0x13e8
    721e:	2039      	movs	r0, #57	; 0x39
    7220:	f7fa f8be 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7224:	2200      	movs	r2, #0
    7226:	4668      	mov	r0, sp
    7228:	6b61      	ldr	r1, [r4, #52]	; 0x34
    722a:	f006 fba2 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    722e:	2200      	movs	r2, #0
    7230:	2101      	movs	r1, #1
    7232:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7234:	f006 fc17 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    7238:	2204      	movs	r2, #4
    723a:	4668      	mov	r0, sp
    723c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    723e:	f006 fb98 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    7242:	2200      	movs	r2, #0
    7244:	4611      	mov	r1, r2
    7246:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7248:	f006 fc0d 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    724c:	4630      	mov	r0, r6
    724e:	e7bd      	b.n	71cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    7250:	20000274 	.word	0x20000274

00007254 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7254:	7801      	ldrb	r1, [r0, #0]
    7256:	b171      	cbz	r1, 7276 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7258:	7841      	ldrb	r1, [r0, #1]
    725a:	b161      	cbz	r1, 7276 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    725c:	8841      	ldrh	r1, [r0, #2]
    725e:	291b      	cmp	r1, #27
    7260:	d309      	bcc.n	7276 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7262:	8881      	ldrh	r1, [r0, #4]
    7264:	291b      	cmp	r1, #27
    7266:	d306      	bcc.n	7276 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7268:	4904      	ldr	r1, [pc, #16]	; (727c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    726a:	6802      	ldr	r2, [r0, #0]
    726c:	600a      	str	r2, [r1, #0]
    726e:	8880      	ldrh	r0, [r0, #4]
    7270:	8088      	strh	r0, [r1, #4]
    7272:	2000      	movs	r0, #0
    7274:	4770      	bx	lr
    7276:	2012      	movs	r0, #18
    7278:	4770      	bx	lr
    727a:	0000      	.short	0x0000
    727c:	20000f88 	.word	0x20000f88

00007280 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7280:	6800      	ldr	r0, [r0, #0]
    7282:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7286:	4288      	cmp	r0, r1
    7288:	d303      	bcc.n	7292 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    728a:	4903      	ldr	r1, [pc, #12]	; (7298 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    728c:	6088      	str	r0, [r1, #8]
    728e:	2000      	movs	r0, #0
    7290:	4770      	bx	lr
    7292:	2012      	movs	r0, #18
    7294:	4770      	bx	lr
    7296:	0000      	.short	0x0000
    7298:	20000f88 	.word	0x20000f88

0000729c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    729c:	4a03      	ldr	r2, [pc, #12]	; (72ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    729e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    72a2:	6001      	str	r1, [r0, #0]
    72a4:	6042      	str	r2, [r0, #4]
    72a6:	2000      	movs	r0, #0
    72a8:	4770      	bx	lr
    72aa:	0000      	.short	0x0000
    72ac:	000077e8 	.word	0x000077e8

000072b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    72b0:	b50e      	push	{r1, r2, r3, lr}
    72b2:	8800      	ldrh	r0, [r0, #0]
    72b4:	4669      	mov	r1, sp
    72b6:	f006 fd25 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    72ba:	b960      	cbnz	r0, 72d6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    72bc:	9801      	ldr	r0, [sp, #4]
    72be:	f009 fa2c 	bl	1071a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    72c2:	b140      	cbz	r0, 72d6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    72c4:	9801      	ldr	r0, [sp, #4]
    72c6:	4601      	mov	r1, r0
    72c8:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    72cc:	3080      	adds	r0, #128	; 0x80
    72ce:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    72d2:	b962      	cbnz	r2, 72ee <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    72d4:	e001      	b.n	72da <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    72d6:	2002      	movs	r0, #2
    72d8:	bd0e      	pop	{r1, r2, r3, pc}
    72da:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    72de:	f88d 2008 	strb.w	r2, [sp, #8]
    72e2:	9a02      	ldr	r2, [sp, #8]
    72e4:	9202      	str	r2, [sp, #8]
    72e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    72ea:	2201      	movs	r2, #1
    72ec:	b10b      	cbz	r3, 72f2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    72ee:	203a      	movs	r0, #58	; 0x3a
    72f0:	bd0e      	pop	{r1, r2, r3, pc}
    72f2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    72f6:	079b      	lsls	r3, r3, #30
    72f8:	d006      	beq.n	7308 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    72fa:	2203      	movs	r2, #3
    72fc:	4905      	ldr	r1, [pc, #20]	; (7314 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    72fe:	305e      	adds	r0, #94	; 0x5e
    7300:	f007 f8d5 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7304:	2000      	movs	r0, #0
    7306:	bd0e      	pop	{r1, r2, r3, pc}
    7308:	700a      	strb	r2, [r1, #0]
    730a:	4668      	mov	r0, sp
    730c:	f007 f898 	bl	e440 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    7310:	e7f8      	b.n	7304 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7312:	0000      	.short	0x0000
    7314:	0000e923 	.word	0x0000e923

00007318 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    7318:	b510      	push	{r4, lr}
    731a:	2005      	movs	r0, #5
    731c:	f000 faf6 	bl	790c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7320:	f7fe f88c 	bl	543c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    7324:	4902      	ldr	r1, [pc, #8]	; (7330 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    7326:	4801      	ldr	r0, [pc, #4]	; (732c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    7328:	6048      	str	r0, [r1, #4]
    732a:	bd10      	pop	{r4, pc}
    732c:	00007361 	.word	0x00007361
    7330:	20000274 	.word	0x20000274
    7334:	b51c      	push	{r2, r3, r4, lr}
    7336:	4909      	ldr	r1, [pc, #36]	; (735c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    7338:	e9d1 0100 	ldrd	r0, r1, [r1]
    733c:	e9cd 0100 	strd	r0, r1, [sp]
    7340:	e005      	b.n	734e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    7342:	9800      	ldr	r0, [sp, #0]
    7344:	f007 fdf4 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7348:	b108      	cbz	r0, 734e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    734a:	2001      	movs	r0, #1
    734c:	bd1c      	pop	{r2, r3, r4, pc}
    734e:	4668      	mov	r0, sp
    7350:	f7fa fa64 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7354:	2800      	cmp	r0, #0
    7356:	d0f4      	beq.n	7342 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    7358:	2000      	movs	r0, #0
    735a:	bd1c      	pop	{r2, r3, r4, pc}
    735c:	000077e8 	.word	0x000077e8
    7360:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    7364:	4613      	mov	r3, r2
    7366:	4a33      	ldr	r2, [pc, #204]	; (7434 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    7368:	460f      	mov	r7, r1
    736a:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    736e:	8814      	ldrh	r4, [r2, #0]
    7370:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    7374:	428c      	cmp	r4, r1
    7376:	d200      	bcs.n	737a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    7378:	4621      	mov	r1, r4
    737a:	4688      	mov	r8, r1
    737c:	8891      	ldrh	r1, [r2, #4]
    737e:	42b1      	cmp	r1, r6
    7380:	d200      	bcs.n	7384 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    7382:	460e      	mov	r6, r1
    7384:	8851      	ldrh	r1, [r2, #2]
    7386:	f640 0448 	movw	r4, #2120	; 0x848
    738a:	42a1      	cmp	r1, r4
    738c:	d300      	bcc.n	7390 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    738e:	4621      	mov	r1, r4
    7390:	88d5      	ldrh	r5, [r2, #6]
    7392:	42a5      	cmp	r5, r4
    7394:	d300      	bcc.n	7398 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    7396:	4625      	mov	r5, r4
    7398:	42a1      	cmp	r1, r4
    739a:	d200      	bcs.n	739e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    739c:	460c      	mov	r4, r1
    739e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    73a2:	2e1b      	cmp	r6, #27
    73a4:	d001      	beq.n	73aa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    73a6:	4295      	cmp	r5, r2
    73a8:	d104      	bne.n	73b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    73aa:	f1b8 0f1b 	cmp.w	r8, #27
    73ae:	d03e      	beq.n	742e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    73b0:	4294      	cmp	r4, r2
    73b2:	d03c      	beq.n	742e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    73b4:	466a      	mov	r2, sp
    73b6:	4619      	mov	r1, r3
    73b8:	f009 f956 	bl	10668 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    73bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    73c0:	4641      	mov	r1, r8
    73c2:	4540      	cmp	r0, r8
    73c4:	d900      	bls.n	73c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    73c6:	4608      	mov	r0, r1
    73c8:	80f8      	strh	r0, [r7, #6]
    73ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    73ce:	42a1      	cmp	r1, r4
    73d0:	d800      	bhi.n	73d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    73d2:	460c      	mov	r4, r1
    73d4:	813c      	strh	r4, [r7, #8]
    73d6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    73da:	42b1      	cmp	r1, r6
    73dc:	d800      	bhi.n	73e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    73de:	460e      	mov	r6, r1
    73e0:	807e      	strh	r6, [r7, #2]
    73e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    73e6:	42a9      	cmp	r1, r5
    73e8:	d800      	bhi.n	73ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    73ea:	460d      	mov	r5, r1
    73ec:	80bd      	strh	r5, [r7, #4]
    73ee:	21ff      	movs	r1, #255	; 0xff
    73f0:	7039      	strb	r1, [r7, #0]
    73f2:	381b      	subs	r0, #27
    73f4:	28e0      	cmp	r0, #224	; 0xe0
    73f6:	d902      	bls.n	73fe <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    73f8:	f640 516e 	movw	r1, #3438	; 0xd6e
    73fc:	e014      	b.n	7428 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    73fe:	3e1b      	subs	r6, #27
    7400:	2ee0      	cmp	r6, #224	; 0xe0
    7402:	d902      	bls.n	740a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    7404:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7408:	e00e      	b.n	7428 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    740a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    740e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    7412:	4284      	cmp	r4, r0
    7414:	d902      	bls.n	741c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    7416:	f640 5172 	movw	r1, #3442	; 0xd72
    741a:	e005      	b.n	7428 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    741c:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7420:	4285      	cmp	r5, r0
    7422:	d904      	bls.n	742e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    7424:	f640 5174 	movw	r1, #3444	; 0xd74
    7428:	2039      	movs	r0, #57	; 0x39
    742a:	f7f9 ffb9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    742e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    7432:	0000      	.short	0x0000
    7434:	2000027c 	.word	0x2000027c
    7438:	b510      	push	{r4, lr}
    743a:	480d      	ldr	r0, [pc, #52]	; (7470 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    743c:	2100      	movs	r1, #0
    743e:	4b0d      	ldr	r3, [pc, #52]	; (7474 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    7440:	74c1      	strb	r1, [r0, #19]
    7442:	8281      	strh	r1, [r0, #20]
    7444:	221b      	movs	r2, #27
    7446:	801a      	strh	r2, [r3, #0]
    7448:	f44f 74a4 	mov.w	r4, #328	; 0x148
    744c:	805c      	strh	r4, [r3, #2]
    744e:	809a      	strh	r2, [r3, #4]
    7450:	80dc      	strh	r4, [r3, #6]
    7452:	7381      	strb	r1, [r0, #14]
    7454:	73c1      	strb	r1, [r0, #15]
    7456:	2303      	movs	r3, #3
    7458:	7003      	strb	r3, [r0, #0]
    745a:	2302      	movs	r3, #2
    745c:	7043      	strb	r3, [r0, #1]
    745e:	8042      	strh	r2, [r0, #2]
    7460:	8082      	strh	r2, [r0, #4]
    7462:	f640 62a6 	movw	r2, #3750	; 0xea6
    7466:	6082      	str	r2, [r0, #8]
    7468:	7481      	strb	r1, [r0, #18]
    746a:	7301      	strb	r1, [r0, #12]
    746c:	bd10      	pop	{r4, pc}
    746e:	0000      	.short	0x0000
    7470:	20000f88 	.word	0x20000f88
    7474:	2000027c 	.word	0x2000027c
    7478:	b510      	push	{r4, lr}
    747a:	2101      	movs	r1, #1
    747c:	2000      	movs	r0, #0
    747e:	f006 f9c6 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7482:	0004      	movs	r4, r0
    7484:	d10a      	bne.n	749c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    7486:	2101      	movs	r1, #1
    7488:	f006 f9b7 	bl	d7fa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    748c:	0004      	movs	r4, r0
    748e:	d007      	beq.n	74a0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    7490:	4806      	ldr	r0, [pc, #24]	; (74ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    7492:	f990 1000 	ldrsb.w	r1, [r0]
    7496:	4620      	mov	r0, r4
    7498:	f007 fb0c 	bl	eab4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    749c:	4620      	mov	r0, r4
    749e:	bd10      	pop	{r4, pc}
    74a0:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    74a4:	2039      	movs	r0, #57	; 0x39
    74a6:	f7f9 ff7b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74aa:	0000      	.short	0x0000
    74ac:	20000274 	.word	0x20000274

000074b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    74b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    74b4:	b087      	sub	sp, #28
    74b6:	460c      	mov	r4, r1
    74b8:	4680      	mov	r8, r0
    74ba:	4605      	mov	r5, r0
    74bc:	f007 fb68 	bl	eb90 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    74c0:	b198      	cbz	r0, 74ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    74c2:	4628      	mov	r0, r5
    74c4:	f007 fb57 	bl	eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    74c8:	b130      	cbz	r0, 74d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    74ca:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    74ce:	2012      	movs	r0, #18
    74d0:	2900      	cmp	r1, #0
    74d2:	d00b      	beq.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    74d4:	2980      	cmp	r1, #128	; 0x80
    74d6:	d809      	bhi.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    74d8:	4628      	mov	r0, r5
    74da:	f007 fb3d 	bl	eb58 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    74de:	b140      	cbz	r0, 74f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    74e0:	4640      	mov	r0, r8
    74e2:	f007 faa8 	bl	ea36 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    74e6:	b130      	cbz	r0, 74f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    74e8:	e009      	b.n	74fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    74ea:	2042      	movs	r0, #66	; 0x42
    74ec:	b007      	add	sp, #28
    74ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    74f2:	200c      	movs	r0, #12
    74f4:	e7fa      	b.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    74f6:	4640      	mov	r0, r8
    74f8:	f007 fb37 	bl	eb6a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    74fc:	b3c8      	cbz	r0, 7572 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    74fe:	4640      	mov	r0, r8
    7500:	f007 fd16 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7504:	2800      	cmp	r0, #0
    7506:	d1f4      	bne.n	74f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    7508:	4640      	mov	r0, r8
    750a:	f007 faaf 	bl	ea6c <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    750e:	2800      	cmp	r0, #0
    7510:	d1ef      	bne.n	74f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    7512:	4640      	mov	r0, r8
    7514:	f7fc fb00 	bl	3b18 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    7518:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    751c:	f242 7110 	movw	r1, #10000	; 0x2710
    7520:	fb00 f901 	mul.w	r9, r0, r1
    7524:	78e1      	ldrb	r1, [r4, #3]
    7526:	4640      	mov	r0, r8
    7528:	f007 fb0d 	bl	eb46 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    752c:	4640      	mov	r0, r8
    752e:	f007 fb1e 	bl	eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    7532:	b308      	cbz	r0, 7578 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    7534:	2100      	movs	r1, #0
    7536:	a801      	add	r0, sp, #4
    7538:	f7fa f990 	bl	185c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    753c:	0004      	movs	r4, r0
    753e:	d07b      	beq.n	7638 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    7540:	2100      	movs	r1, #0
    7542:	f7fb fcf3 	bl	2f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7546:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    754a:	8020      	strh	r0, [r4, #0]
    754c:	4621      	mov	r1, r4
    754e:	4640      	mov	r0, r8
    7550:	f007 fb35 	bl	ebbe <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    7554:	f000 f9e6 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7558:	0940      	lsrs	r0, r0, #5
    755a:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    755e:	07c0      	lsls	r0, r0, #31
    7560:	4d41      	ldr	r5, [pc, #260]	; (7668 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    7562:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7566:	d011      	beq.n	758c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    7568:	8869      	ldrh	r1, [r5, #2]
    756a:	88aa      	ldrh	r2, [r5, #4]
    756c:	84c1      	strh	r1, [r0, #38]	; 0x26
    756e:	8502      	strh	r2, [r0, #40]	; 0x28
    7570:	e00f      	b.n	7592 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    7572:	e7ff      	b.n	7574 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    7574:	2012      	movs	r0, #18
    7576:	e7b9      	b.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7578:	464a      	mov	r2, r9
    757a:	2100      	movs	r1, #0
    757c:	4640      	mov	r0, r8
    757e:	f7fd f9e9 	bl	4954 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7582:	2800      	cmp	r0, #0
    7584:	d0b2      	beq.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7586:	f241 6122 	movw	r1, #5666	; 0x1622
    758a:	e05f      	b.n	764c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    758c:	221b      	movs	r2, #27
    758e:	84c2      	strh	r2, [r0, #38]	; 0x26
    7590:	8502      	strh	r2, [r0, #40]	; 0x28
    7592:	f000 f9c7 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7596:	0788      	lsls	r0, r1, #30
    7598:	f04f 0601 	mov.w	r6, #1
    759c:	d505      	bpl.n	75aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    759e:	f88d 6008 	strb.w	r6, [sp, #8]
    75a2:	a802      	add	r0, sp, #8
    75a4:	9403      	str	r4, [sp, #12]
    75a6:	f7ff fd45 	bl	7034 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    75aa:	68a8      	ldr	r0, [r5, #8]
    75ac:	62e0      	str	r0, [r4, #44]	; 0x2c
    75ae:	f641 574c 	movw	r7, #7500	; 0x1d4c
    75b2:	4640      	mov	r0, r8
    75b4:	f007 fae3 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    75b8:	b910      	cbnz	r0, 75c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    75ba:	4640      	mov	r0, r8
    75bc:	f007 fafd 	bl	ebba <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    75c0:	6127      	str	r7, [r4, #16]
    75c2:	8821      	ldrh	r1, [r4, #0]
    75c4:	f8ad 1008 	strh.w	r1, [sp, #8]
    75c8:	7ba9      	ldrb	r1, [r5, #14]
    75ca:	f88d 100a 	strb.w	r1, [sp, #10]
    75ce:	7be9      	ldrb	r1, [r5, #15]
    75d0:	f88d 100b 	strb.w	r1, [sp, #11]
    75d4:	8a29      	ldrh	r1, [r5, #16]
    75d6:	f8ad 100c 	strh.w	r1, [sp, #12]
    75da:	a905      	add	r1, sp, #20
    75dc:	9100      	str	r1, [sp, #0]
    75de:	4630      	mov	r0, r6
    75e0:	ab04      	add	r3, sp, #16
    75e2:	aa02      	add	r2, sp, #8
    75e4:	4621      	mov	r1, r4
    75e6:	f009 f875 	bl	106d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    75ea:	b140      	cbz	r0, 75fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    75ec:	2100      	movs	r1, #0
    75ee:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    75f2:	f7fa f95b 	bl	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    75f6:	b1f0      	cbz	r0, 7636 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    75f8:	f241 617c 	movw	r1, #5756	; 0x167c
    75fc:	e026      	b.n	764c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    75fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7602:	f88d 0018 	strb.w	r0, [sp, #24]
    7606:	f89d 0014 	ldrb.w	r0, [sp, #20]
    760a:	f88d 0019 	strb.w	r0, [sp, #25]
    760e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    7612:	f8ad 001a 	strh.w	r0, [sp, #26]
    7616:	a906      	add	r1, sp, #24
    7618:	4620      	mov	r0, r4
    761a:	f006 fc43 	bl	dea4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    761e:	7868      	ldrb	r0, [r5, #1]
    7620:	9000      	str	r0, [sp, #0]
    7622:	782b      	ldrb	r3, [r5, #0]
    7624:	88aa      	ldrh	r2, [r5, #4]
    7626:	8869      	ldrh	r1, [r5, #2]
    7628:	8820      	ldrh	r0, [r4, #0]
    762a:	f7fa f9f5 	bl	1a18 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    762e:	b128      	cbz	r0, 763c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    7630:	f241 6187 	movw	r1, #5767	; 0x1687
    7634:	e00a      	b.n	764c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    7636:	e7ff      	b.n	7638 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    7638:	2009      	movs	r0, #9
    763a:	e757      	b.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    763c:	464a      	mov	r2, r9
    763e:	4621      	mov	r1, r4
    7640:	4640      	mov	r0, r8
    7642:	f7fd f987 	bl	4954 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7646:	b120      	cbz	r0, 7652 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    7648:	f241 6189 	movw	r1, #5769	; 0x1689
    764c:	2039      	movs	r0, #57	; 0x39
    764e:	f7f9 fea7 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7652:	4806      	ldr	r0, [pc, #24]	; (766c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    7654:	6843      	ldr	r3, [r0, #4]
    7656:	b123      	cbz	r3, 7662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    7658:	2200      	movs	r2, #0
    765a:	f504 7199 	add.w	r1, r4, #306	; 0x132
    765e:	4620      	mov	r0, r4
    7660:	4798      	blx	r3
    7662:	2000      	movs	r0, #0
    7664:	e742      	b.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7666:	0000      	.short	0x0000
    7668:	20000f88 	.word	0x20000f88
    766c:	20000274 	.word	0x20000274
    7670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7674:	b088      	sub	sp, #32
    7676:	4604      	mov	r4, r0
    7678:	8800      	ldrh	r0, [r0, #0]
    767a:	a906      	add	r1, sp, #24
    767c:	f006 fb42 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7680:	2800      	cmp	r0, #0
    7682:	d147      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7684:	9807      	ldr	r0, [sp, #28]
    7686:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    768a:	f88d 1008 	strb.w	r1, [sp, #8]
    768e:	9902      	ldr	r1, [sp, #8]
    7690:	9102      	str	r1, [sp, #8]
    7692:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7696:	3080      	adds	r0, #128	; 0x80
    7698:	b101      	cbz	r1, 769c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    769a:	2101      	movs	r1, #1
    769c:	f88d 100c 	strb.w	r1, [sp, #12]
    76a0:	7b01      	ldrb	r1, [r0, #12]
    76a2:	f04f 0800 	mov.w	r8, #0
    76a6:	0689      	lsls	r1, r1, #26
    76a8:	d502      	bpl.n	76b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    76aa:	f89d 100c 	ldrb.w	r1, [sp, #12]
    76ae:	b149      	cbz	r1, 76c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    76b0:	f05f 0100 	movs.w	r1, #0
    76b4:	f88d 1004 	strb.w	r1, [sp, #4]
    76b8:	2105      	movs	r1, #5
    76ba:	306c      	adds	r0, #108	; 0x6c
    76bc:	f008 fa61 	bl	fb82 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    76c0:	b110      	cbz	r0, 76c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    76c2:	e004      	b.n	76ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    76c4:	2101      	movs	r1, #1
    76c6:	e7f5      	b.n	76b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    76c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    76cc:	b308      	cbz	r0, 7712 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    76ce:	8921      	ldrh	r1, [r4, #8]
    76d0:	88e0      	ldrh	r0, [r4, #6]
    76d2:	f008 ffbb 	bl	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    76d6:	2800      	cmp	r0, #0
    76d8:	d11c      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    76da:	88a1      	ldrh	r1, [r4, #4]
    76dc:	8860      	ldrh	r0, [r4, #2]
    76de:	f008 ffb5 	bl	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    76e2:	2800      	cmp	r0, #0
    76e4:	d116      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    76e6:	8921      	ldrh	r1, [r4, #8]
    76e8:	88e0      	ldrh	r0, [r4, #6]
    76ea:	f008 ffa5 	bl	10638 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    76ee:	2800      	cmp	r0, #0
    76f0:	d110      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    76f2:	88a1      	ldrh	r1, [r4, #4]
    76f4:	8860      	ldrh	r0, [r4, #2]
    76f6:	f008 ff9f 	bl	10638 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    76fa:	0006      	movs	r6, r0
    76fc:	d10a      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    76fe:	9807      	ldr	r0, [sp, #28]
    7700:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7704:	27ff      	movs	r7, #255	; 0xff
    7706:	706f      	strb	r7, [r5, #1]
    7708:	f89d 100c 	ldrb.w	r1, [sp, #12]
    770c:	b129      	cbz	r1, 771a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    770e:	263a      	movs	r6, #58	; 0x3a
    7710:	e02e      	b.n	7770 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    7712:	201a      	movs	r0, #26
    7714:	b008      	add	sp, #32
    7716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    771a:	4641      	mov	r1, r8
    771c:	aa03      	add	r2, sp, #12
    771e:	f008 ffa3 	bl	10668 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    7722:	8861      	ldrh	r1, [r4, #2]
    7724:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7728:	4281      	cmp	r1, r0
    772a:	d200      	bcs.n	772e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    772c:	4608      	mov	r0, r1
    772e:	80e8      	strh	r0, [r5, #6]
    7730:	88a1      	ldrh	r1, [r4, #4]
    7732:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7736:	4281      	cmp	r1, r0
    7738:	d200      	bcs.n	773c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    773a:	4608      	mov	r0, r1
    773c:	8128      	strh	r0, [r5, #8]
    773e:	88e2      	ldrh	r2, [r4, #6]
    7740:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7744:	428a      	cmp	r2, r1
    7746:	d200      	bcs.n	774a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    7748:	4611      	mov	r1, r2
    774a:	8069      	strh	r1, [r5, #2]
    774c:	8922      	ldrh	r2, [r4, #8]
    774e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7752:	428a      	cmp	r2, r1
    7754:	d200      	bcs.n	7758 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    7756:	4611      	mov	r1, r2
    7758:	f640 0248 	movw	r2, #2120	; 0x848
    775c:	80a9      	strh	r1, [r5, #4]
    775e:	4291      	cmp	r1, r2
    7760:	d300      	bcc.n	7764 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    7762:	4611      	mov	r1, r2
    7764:	80a9      	strh	r1, [r5, #4]
    7766:	4290      	cmp	r0, r2
    7768:	d200      	bcs.n	776c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    776a:	4602      	mov	r2, r0
    776c:	812a      	strh	r2, [r5, #8]
    776e:	702f      	strb	r7, [r5, #0]
    7770:	f885 8001 	strb.w	r8, [r5, #1]
    7774:	4630      	mov	r0, r6
    7776:	e7cd      	b.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7778:	b51c      	push	{r2, r3, r4, lr}
    777a:	490c      	ldr	r1, [pc, #48]	; (77ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    777c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7780:	e9cd 0100 	strd	r0, r1, [sp]
    7784:	e00a      	b.n	779c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7786:	9c00      	ldr	r4, [sp, #0]
    7788:	4620      	mov	r0, r4
    778a:	f007 fbd1 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    778e:	b128      	cbz	r0, 779c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7790:	4620      	mov	r0, r4
    7792:	f007 fa23 	bl	ebdc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    7796:	b108      	cbz	r0, 779c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7798:	2001      	movs	r0, #1
    779a:	bd1c      	pop	{r2, r3, r4, pc}
    779c:	4668      	mov	r0, sp
    779e:	f7fa f83d 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    77a2:	2800      	cmp	r0, #0
    77a4:	d0ef      	beq.n	7786 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    77a6:	2000      	movs	r0, #0
    77a8:	bd1c      	pop	{r2, r3, r4, pc}
    77aa:	0000      	.short	0x0000
    77ac:	000077e8 	.word	0x000077e8
    77b0:	b510      	push	{r4, lr}
    77b2:	4604      	mov	r4, r0
    77b4:	88c1      	ldrh	r1, [r0, #6]
    77b6:	8880      	ldrh	r0, [r0, #4]
    77b8:	f008 ff48 	bl	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    77bc:	2800      	cmp	r0, #0
    77be:	d10f      	bne.n	77e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    77c0:	8861      	ldrh	r1, [r4, #2]
    77c2:	8820      	ldrh	r0, [r4, #0]
    77c4:	f008 ff42 	bl	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    77c8:	2800      	cmp	r0, #0
    77ca:	d109      	bne.n	77e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    77cc:	4805      	ldr	r0, [pc, #20]	; (77e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    77ce:	88a1      	ldrh	r1, [r4, #4]
    77d0:	8081      	strh	r1, [r0, #4]
    77d2:	8821      	ldrh	r1, [r4, #0]
    77d4:	8001      	strh	r1, [r0, #0]
    77d6:	88e1      	ldrh	r1, [r4, #6]
    77d8:	80c1      	strh	r1, [r0, #6]
    77da:	8861      	ldrh	r1, [r4, #2]
    77dc:	8041      	strh	r1, [r0, #2]
    77de:	2000      	movs	r0, #0
    77e0:	bd10      	pop	{r4, pc}
    77e2:	0000      	.short	0x0000
    77e4:	2000027c 	.word	0x2000027c
    77e8:	00000000 	.word	0x00000000
    77ec:	00010000 	.word	0x00010000
    77f0:	00000000 	.word	0x00000000
    77f4:	00010000 	.word	0x00010000
    77f8:	0c124b0c 	.word	0x0c124b0c
    77fc:	124b0059 	.word	0x124b0059
    7800:	00000000 	.word	0x00000000
    7804:	00010000 	.word	0x00010000
    7808:	00000000 	.word	0x00000000
    780c:	00010000 	.word	0x00010000

00007810 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7810:	b510      	push	{r4, lr}
    7812:	f7fb fe2d 	bl	3470 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7816:	4c05      	ldr	r4, [pc, #20]	; (782c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7818:	6860      	ldr	r0, [r4, #4]
    781a:	f009 f81e 	bl	1085a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    781e:	f008 fdc3 	bl	103a8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    7822:	f7fb ff5f 	bl	36e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7826:	2001      	movs	r0, #1
    7828:	7020      	strb	r0, [r4, #0]
    782a:	bd10      	pop	{r4, pc}
    782c:	20000284 	.word	0x20000284

00007830 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    7830:	4801      	ldr	r0, [pc, #4]	; (7838 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    7832:	7800      	ldrb	r0, [r0, #0]
    7834:	4770      	bx	lr
    7836:	0000      	.short	0x0000
    7838:	20000284 	.word	0x20000284

0000783c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    783c:	b510      	push	{r4, lr}
    783e:	4c06      	ldr	r4, [pc, #24]	; (7858 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    7840:	68a0      	ldr	r0, [r4, #8]
    7842:	f009 f80a 	bl	1085a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    7846:	68e0      	ldr	r0, [r4, #12]
    7848:	f009 f807 	bl	1085a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    784c:	f008 fe11 	bl	10472 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    7850:	2000      	movs	r0, #0
    7852:	7020      	strb	r0, [r4, #0]
    7854:	bd10      	pop	{r4, pc}
    7856:	0000      	.short	0x0000
    7858:	20000284 	.word	0x20000284

0000785c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    785c:	b510      	push	{r4, lr}
    785e:	4905      	ldr	r1, [pc, #20]	; (7874 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    7860:	4805      	ldr	r0, [pc, #20]	; (7878 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7862:	f008 ffed 	bl	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    7866:	4804      	ldr	r0, [pc, #16]	; (7878 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    786c:	4903      	ldr	r1, [pc, #12]	; (787c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    786e:	1d00      	adds	r0, r0, #4
    7870:	f008 bfe6 	b.w	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    7874:	20000294 	.word	0x20000294
    7878:	20000288 	.word	0x20000288
    787c:	2000029c 	.word	0x2000029c

00007880 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    7880:	b510      	push	{r4, lr}
    7882:	4908      	ldr	r1, [pc, #32]	; (78a4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    7884:	4808      	ldr	r0, [pc, #32]	; (78a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7886:	f008 ffdb 	bl	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    788a:	4807      	ldr	r0, [pc, #28]	; (78a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    788c:	4907      	ldr	r1, [pc, #28]	; (78ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    788e:	1d00      	adds	r0, r0, #4
    7890:	f008 ffd6 	bl	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    7894:	4804      	ldr	r0, [pc, #16]	; (78a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    789a:	4905      	ldr	r1, [pc, #20]	; (78b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    789c:	3008      	adds	r0, #8
    789e:	f008 bfcf 	b.w	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    78a2:	0000      	.short	0x0000
    78a4:	200002ac 	.word	0x200002ac
    78a8:	20000288 	.word	0x20000288
    78ac:	200002b4 	.word	0x200002b4
    78b0:	200002a4 	.word	0x200002a4

000078b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    78b4:	4801      	ldr	r0, [pc, #4]	; (78bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    78b6:	7840      	ldrb	r0, [r0, #1]
    78b8:	4770      	bx	lr
    78ba:	0000      	.short	0x0000
    78bc:	20000284 	.word	0x20000284
    78c0:	b510      	push	{r4, lr}
    78c2:	f7fc fa4b 	bl	3d5c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    78c6:	f7fd f8f5 	bl	4ab4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    78ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78ce:	4801      	ldr	r0, [pc, #4]	; (78d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    78d0:	f7fc ba2a 	b.w	3d28 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    78d4:	200016a1 	.word	0x200016a1
    78d8:	490a      	ldr	r1, [pc, #40]	; (7904 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    78da:	b510      	push	{r4, lr}
    78dc:	2001      	movs	r0, #1
    78de:	7048      	strb	r0, [r1, #1]
    78e0:	f7fc fa6c 	bl	3dbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    78e4:	f7fd fdc2 	bl	546c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    78e8:	f006 f93e 	bl	db68 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    78ec:	4906      	ldr	r1, [pc, #24]	; (7908 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    78ee:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    78f2:	f7fa fc41 	bl	2178 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    78f6:	2000      	movs	r0, #0
    78f8:	f005 ff66 	bl	d7c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    78fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7900:	f7fb bdbc 	b.w	347c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7904:	20000284 	.word	0x20000284
    7908:	200017a3 	.word	0x200017a3

0000790c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    790c:	4a04      	ldr	r2, [pc, #16]	; (7920 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    790e:	08c1      	lsrs	r1, r0, #3
    7910:	f000 0307 	and.w	r3, r0, #7
    7914:	2001      	movs	r0, #1
    7916:	4098      	lsls	r0, r3
    7918:	5c53      	ldrb	r3, [r2, r1]
    791a:	4303      	orrs	r3, r0
    791c:	5453      	strb	r3, [r2, r1]
    791e:	4770      	bx	lr
    7920:	20000020 	.word	0x20000020

00007924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7924:	4901      	ldr	r1, [pc, #4]	; (792c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7926:	e9d1 0100 	ldrd	r0, r1, [r1]
    792a:	4770      	bx	lr
    792c:	20000020 	.word	0x20000020

00007930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7930:	4806      	ldr	r0, [pc, #24]	; (794c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7932:	8801      	ldrh	r1, [r0, #0]
    7934:	7900      	ldrb	r0, [r0, #4]
    7936:	0602      	lsls	r2, r0, #24
    7938:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    793c:	f000 0001 	and.w	r0, r0, #1
    7940:	1800      	adds	r0, r0, r0
    7942:	b2c0      	uxtb	r0, r0
    7944:	f040 0001 	orr.w	r0, r0, #1
    7948:	4770      	bx	lr
    794a:	0000      	.short	0x0000
    794c:	20000020 	.word	0x20000020

00007950 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7950:	b510      	push	{r4, lr}
    7952:	f004 fc97 	bl	c284 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7956:	2200      	movs	r2, #0
    7958:	4b08      	ldr	r3, [pc, #32]	; (797c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    795a:	4611      	mov	r1, r2
    795c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7960:	4284      	cmp	r4, r0
    7962:	d303      	bcc.n	796c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7964:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7968:	7882      	ldrb	r2, [r0, #2]
    796a:	e003      	b.n	7974 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    796c:	1c49      	adds	r1, r1, #1
    796e:	b2c9      	uxtb	r1, r1
    7970:	290c      	cmp	r1, #12
    7972:	d3f3      	bcc.n	795c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7974:	4802      	ldr	r0, [pc, #8]	; (7980 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7976:	7002      	strb	r2, [r0, #0]
    7978:	bd10      	pop	{r4, pc}
    797a:	0000      	.short	0x0000
    797c:	000108ac 	.word	0x000108ac
    7980:	2000036f 	.word	0x2000036f

00007984 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7984:	b570      	push	{r4, r5, r6, lr}
    7986:	4605      	mov	r5, r0
    7988:	4616      	mov	r6, r2
    798a:	460c      	mov	r4, r1
    798c:	2002      	movs	r0, #2
    798e:	f000 f9b7 	bl	7d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7992:	4906      	ldr	r1, [pc, #24]	; (79ac <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7994:	2001      	movs	r0, #1
    7996:	1ef6      	subs	r6, r6, #3
    7998:	7008      	strb	r0, [r1, #0]
    799a:	4805      	ldr	r0, [pc, #20]	; (79b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    799c:	6006      	str	r6, [r0, #0]
    799e:	4804      	ldr	r0, [pc, #16]	; (79b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    79a0:	3808      	subs	r0, #8
    79a2:	6005      	str	r5, [r0, #0]
    79a4:	1f00      	subs	r0, r0, #4
    79a6:	6004      	str	r4, [r0, #0]
    79a8:	bd70      	pop	{r4, r5, r6, pc}
    79aa:	0000      	.short	0x0000
    79ac:	20000370 	.word	0x20000370
    79b0:	4000f510 	.word	0x4000f510

000079b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    79b4:	b510      	push	{r4, lr}
    79b6:	4c0c      	ldr	r4, [pc, #48]	; (79e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    79b8:	7820      	ldrb	r0, [r4, #0]
    79ba:	b180      	cbz	r0, 79de <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    79bc:	490b      	ldr	r1, [pc, #44]	; (79ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    79be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    79c2:	6008      	str	r0, [r1, #0]
    79c4:	f000 f86a 	bl	7a9c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    79c8:	2100      	movs	r1, #0
    79ca:	b120      	cbz	r0, 79d6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    79cc:	2001      	movs	r0, #1
    79ce:	7060      	strb	r0, [r4, #1]
    79d0:	4807      	ldr	r0, [pc, #28]	; (79f0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    79d2:	6800      	ldr	r0, [r0, #0]
    79d4:	e001      	b.n	79da <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    79d6:	7061      	strb	r1, [r4, #1]
    79d8:	2010      	movs	r0, #16
    79da:	70a0      	strb	r0, [r4, #2]
    79dc:	7021      	strb	r1, [r4, #0]
    79de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79e2:	2000      	movs	r0, #0
    79e4:	f000 b98c 	b.w	7d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    79e8:	20000370 	.word	0x20000370
    79ec:	4001f508 	.word	0x4001f508
    79f0:	4000f400 	.word	0x4000f400

000079f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    79f4:	b510      	push	{r4, lr}
    79f6:	2002      	movs	r0, #2
    79f8:	f000 f982 	bl	7d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    79fc:	4904      	ldr	r1, [pc, #16]	; (7a10 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    79fe:	2001      	movs	r0, #1
    7a00:	7008      	strb	r0, [r1, #0]
    7a02:	f000 f859 	bl	7ab8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7a06:	4903      	ldr	r1, [pc, #12]	; (7a14 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7a08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7a0c:	6008      	str	r0, [r1, #0]
    7a0e:	bd10      	pop	{r4, pc}
    7a10:	20000370 	.word	0x20000370
    7a14:	4001f504 	.word	0x4001f504

00007a18 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7a18:	4803      	ldr	r0, [pc, #12]	; (7a28 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7a1a:	2100      	movs	r1, #0
    7a1c:	7001      	strb	r1, [r0, #0]
    7a1e:	7041      	strb	r1, [r0, #1]
    7a20:	2110      	movs	r1, #16
    7a22:	7081      	strb	r1, [r0, #2]
    7a24:	4770      	bx	lr
    7a26:	0000      	.short	0x0000
    7a28:	20000370 	.word	0x20000370

00007a2c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7a2c:	4807      	ldr	r0, [pc, #28]	; (7a4c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7a2e:	b510      	push	{r4, lr}
    7a30:	7801      	ldrb	r1, [r0, #0]
    7a32:	b141      	cbz	r1, 7a46 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7a34:	f000 f832 	bl	7a9c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7a38:	b118      	cbz	r0, 7a42 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7a3a:	4805      	ldr	r0, [pc, #20]	; (7a50 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7a3c:	6800      	ldr	r0, [r0, #0]
    7a3e:	b2c0      	uxtb	r0, r0
    7a40:	bd10      	pop	{r4, pc}
    7a42:	2010      	movs	r0, #16
    7a44:	bd10      	pop	{r4, pc}
    7a46:	7880      	ldrb	r0, [r0, #2]
    7a48:	bd10      	pop	{r4, pc}
    7a4a:	0000      	.short	0x0000
    7a4c:	20000370 	.word	0x20000370
    7a50:	4000f400 	.word	0x4000f400

00007a54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7a54:	4808      	ldr	r0, [pc, #32]	; (7a78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7a56:	b510      	push	{r4, lr}
    7a58:	7801      	ldrb	r1, [r0, #0]
    7a5a:	b159      	cbz	r1, 7a74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7a5c:	4807      	ldr	r0, [pc, #28]	; (7a7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7a5e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7a62:	b128      	cbz	r0, 7a70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7a64:	f000 f80c 	bl	7a80 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7a68:	2800      	cmp	r0, #0
    7a6a:	d000      	beq.n	7a6e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7a6c:	2001      	movs	r0, #1
    7a6e:	bd10      	pop	{r4, pc}
    7a70:	2002      	movs	r0, #2
    7a72:	bd10      	pop	{r4, pc}
    7a74:	7840      	ldrb	r0, [r0, #1]
    7a76:	bd10      	pop	{r4, pc}
    7a78:	20000370 	.word	0x20000370
    7a7c:	4000f000 	.word	0x4000f000
    7a80:	4805      	ldr	r0, [pc, #20]	; (7a98 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7a82:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7a86:	b111      	cbz	r1, 7a8e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7a88:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7a8c:	b108      	cbz	r0, 7a92 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7a8e:	2000      	movs	r0, #0
    7a90:	4770      	bx	lr
    7a92:	2001      	movs	r0, #1
    7a94:	4770      	bx	lr
    7a96:	0000      	.short	0x0000
    7a98:	4000f000 	.word	0x4000f000
    7a9c:	4805      	ldr	r0, [pc, #20]	; (7ab4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7a9e:	b510      	push	{r4, lr}
    7aa0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7aa4:	b120      	cbz	r0, 7ab0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7aa6:	f7ff ffeb 	bl	7a80 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7aaa:	b108      	cbz	r0, 7ab0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7aac:	2001      	movs	r0, #1
    7aae:	bd10      	pop	{r4, pc}
    7ab0:	2000      	movs	r0, #0
    7ab2:	bd10      	pop	{r4, pc}
    7ab4:	4000f000 	.word	0x4000f000
    7ab8:	4804      	ldr	r0, [pc, #16]	; (7acc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7aba:	2100      	movs	r1, #0
    7abc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7ac0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7ac4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7ac8:	4770      	bx	lr
    7aca:	0000      	.short	0x0000
    7acc:	4000f000 	.word	0x4000f000

00007ad0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ad4:	4604      	mov	r4, r0
    7ad6:	461e      	mov	r6, r3
    7ad8:	4690      	mov	r8, r2
    7ada:	460f      	mov	r7, r1
    7adc:	2001      	movs	r0, #1
    7ade:	f000 f90f 	bl	7d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7ae2:	4d1e      	ldr	r5, [pc, #120]	; (7b5c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7ae4:	481e      	ldr	r0, [pc, #120]	; (7b60 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7ae6:	f004 0103 	and.w	r1, r4, #3
    7aea:	712e      	strb	r6, [r5, #4]
    7aec:	6800      	ldr	r0, [r0, #0]
    7aee:	0432      	lsls	r2, r6, #16
    7af0:	f361 0007 	bfi	r0, r1, #0, #8
    7af4:	f366 200f 	bfi	r0, r6, #8, #8
    7af8:	0c00      	lsrs	r0, r0, #16
    7afa:	4e1a      	ldr	r6, [pc, #104]	; (7b64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7afc:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7b00:	4308      	orrs	r0, r1
    7b02:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7b06:	4818      	ldr	r0, [pc, #96]	; (7b68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7b08:	6007      	str	r7, [r0, #0]
    7b0a:	f009 f8c6 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7b0e:	b938      	cbnz	r0, 7b20 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7b10:	4815      	ldr	r0, [pc, #84]	; (7b68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7b12:	3010      	adds	r0, #16
    7b14:	6801      	ldr	r1, [r0, #0]
    7b16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7b1a:	ea41 0108 	orr.w	r1, r1, r8
    7b1e:	6001      	str	r1, [r0, #0]
    7b20:	f000 f8e4 	bl	7cec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7b24:	b10c      	cbz	r4, 7b2a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7b26:	2c04      	cmp	r4, #4
    7b28:	d107      	bne.n	7b3a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7b2a:	4811      	ldr	r0, [pc, #68]	; (7b70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7b2c:	490d      	ldr	r1, [pc, #52]	; (7b64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7b2e:	4a0f      	ldr	r2, [pc, #60]	; (7b6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7b30:	1d09      	adds	r1, r1, #4
    7b32:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7b36:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7b3a:	2001      	movs	r0, #1
    7b3c:	7068      	strb	r0, [r5, #1]
    7b3e:	70ec      	strb	r4, [r5, #3]
    7b40:	b11c      	cbz	r4, 7b4a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7b42:	2c01      	cmp	r4, #1
    7b44:	d001      	beq.n	7b4a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7b46:	2c02      	cmp	r4, #2
    7b48:	d106      	bne.n	7b58 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7b4a:	7028      	strb	r0, [r5, #0]
    7b4c:	2100      	movs	r1, #0
    7b4e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7b52:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7b56:	6030      	str	r0, [r6, #0]
    7b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b5c:	20000373 	.word	0x20000373
    7b60:	00007cfc 	.word	0x00007cfc
    7b64:	4000f000 	.word	0x4000f000
    7b68:	4000f508 	.word	0x4000f508
    7b6c:	4000f100 	.word	0x4000f100
    7b70:	4001f088 	.word	0x4001f088

00007b74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7b74:	b570      	push	{r4, r5, r6, lr}
    7b76:	4a1c      	ldr	r2, [pc, #112]	; (7be8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7b78:	7853      	ldrb	r3, [r2, #1]
    7b7a:	b1a3      	cbz	r3, 7ba6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7b7c:	4b1b      	ldr	r3, [pc, #108]	; (7bec <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7b7e:	6019      	str	r1, [r3, #0]
    7b80:	1d19      	adds	r1, r3, #4
    7b82:	6008      	str	r0, [r1, #0]
    7b84:	2501      	movs	r5, #1
    7b86:	7095      	strb	r5, [r2, #2]
    7b88:	4610      	mov	r0, r2
    7b8a:	78d6      	ldrb	r6, [r2, #3]
    7b8c:	4b18      	ldr	r3, [pc, #96]	; (7bf0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7b8e:	7800      	ldrb	r0, [r0, #0]
    7b90:	4c18      	ldr	r4, [pc, #96]	; (7bf4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7b92:	2100      	movs	r1, #0
    7b94:	b156      	cbz	r6, 7bac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7b96:	2e04      	cmp	r6, #4
    7b98:	d01b      	beq.n	7bd2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7b9a:	b308      	cbz	r0, 7be0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7b9c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ba0:	0668      	lsls	r0, r5, #25
    7ba2:	6018      	str	r0, [r3, #0]
    7ba4:	bd70      	pop	{r4, r5, r6, pc}
    7ba6:	f240 11bd 	movw	r1, #445	; 0x1bd
    7baa:	e01a      	b.n	7be2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7bac:	b178      	cbz	r0, 7bce <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7bae:	4620      	mov	r0, r4
    7bb0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7bb4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7bb8:	601e      	str	r6, [r3, #0]
    7bba:	1271      	asrs	r1, r6, #9
    7bbc:	f008 feee 	bl	1099c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d0ef      	beq.n	7ba4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7bc4:	6065      	str	r5, [r4, #4]
    7bc6:	480a      	ldr	r0, [pc, #40]	; (7bf0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7bc8:	1d00      	adds	r0, r0, #4
    7bca:	6006      	str	r6, [r0, #0]
    7bcc:	bd70      	pop	{r4, r5, r6, pc}
    7bce:	21b3      	movs	r1, #179	; 0xb3
    7bd0:	e007      	b.n	7be2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7bd2:	7015      	strb	r5, [r2, #0]
    7bd4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7bd8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7bdc:	6025      	str	r5, [r4, #0]
    7bde:	bd70      	pop	{r4, r5, r6, pc}
    7be0:	21c6      	movs	r1, #198	; 0xc6
    7be2:	203c      	movs	r0, #60	; 0x3c
    7be4:	f7f9 fbdc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7be8:	20000373 	.word	0x20000373
    7bec:	4000f50c 	.word	0x4000f50c
    7bf0:	4001f504 	.word	0x4001f504
    7bf4:	4000f000 	.word	0x4000f000

00007bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7bf8:	b570      	push	{r4, r5, r6, lr}
    7bfa:	4d05      	ldr	r5, [pc, #20]	; (7c10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7bfc:	2400      	movs	r4, #0
    7bfe:	7828      	ldrb	r0, [r5, #0]
    7c00:	b110      	cbz	r0, 7c08 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7c02:	f000 f873 	bl	7cec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7c06:	702c      	strb	r4, [r5, #0]
    7c08:	706c      	strb	r4, [r5, #1]
    7c0a:	70ac      	strb	r4, [r5, #2]
    7c0c:	bd70      	pop	{r4, r5, r6, pc}
    7c0e:	0000      	.short	0x0000
    7c10:	20000373 	.word	0x20000373

00007c14 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7c14:	4802      	ldr	r0, [pc, #8]	; (7c20 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7c16:	2100      	movs	r1, #0
    7c18:	7001      	strb	r1, [r0, #0]
    7c1a:	7041      	strb	r1, [r0, #1]
    7c1c:	7081      	strb	r1, [r0, #2]
    7c1e:	4770      	bx	lr
    7c20:	20000373 	.word	0x20000373

00007c24 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7c24:	480b      	ldr	r0, [pc, #44]	; (7c54 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7c26:	b510      	push	{r4, lr}
    7c28:	7800      	ldrb	r0, [r0, #0]
    7c2a:	b158      	cbz	r0, 7c44 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7c2c:	f44f 7182 	mov.w	r1, #260	; 0x104
    7c30:	4809      	ldr	r0, [pc, #36]	; (7c58 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7c32:	f008 feb3 	bl	1099c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7c36:	b140      	cbz	r0, 7c4a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7c38:	4808      	ldr	r0, [pc, #32]	; (7c5c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7c3a:	6800      	ldr	r0, [r0, #0]
    7c3c:	2800      	cmp	r0, #0
    7c3e:	d000      	beq.n	7c42 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7c40:	2001      	movs	r0, #1
    7c42:	bd10      	pop	{r4, pc}
    7c44:	f240 2123 	movw	r1, #547	; 0x223
    7c48:	e001      	b.n	7c4e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7c4a:	f44f 7109 	mov.w	r1, #548	; 0x224
    7c4e:	203c      	movs	r0, #60	; 0x3c
    7c50:	f7f9 fba6 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c54:	20000373 	.word	0x20000373
    7c58:	4000f000 	.word	0x4000f000
    7c5c:	4000f400 	.word	0x4000f400

00007c60 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7c60:	4801      	ldr	r0, [pc, #4]	; (7c68 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7c62:	2101      	movs	r1, #1
    7c64:	6081      	str	r1, [r0, #8]
    7c66:	4770      	bx	lr
    7c68:	4000f000 	.word	0x4000f000

00007c6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c70:	481b      	ldr	r0, [pc, #108]	; (7ce0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7c72:	7800      	ldrb	r0, [r0, #0]
    7c74:	b1d8      	cbz	r0, 7cae <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7c76:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7ce4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7c7a:	f44f 7682 	mov.w	r6, #260	; 0x104
    7c7e:	4631      	mov	r1, r6
    7c80:	4640      	mov	r0, r8
    7c82:	f008 fe8b 	bl	1099c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7c86:	2800      	cmp	r0, #0
    7c88:	d128      	bne.n	7cdc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7c8a:	2002      	movs	r0, #2
    7c8c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7c90:	4c15      	ldr	r4, [pc, #84]	; (7ce8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7c92:	6820      	ldr	r0, [r4, #0]
    7c94:	43c0      	mvns	r0, r0
    7c96:	f340 1500 	sbfx	r5, r0, #4, #1
    7c9a:	6820      	ldr	r0, [r4, #0]
    7c9c:	f040 0010 	orr.w	r0, r0, #16
    7ca0:	6020      	str	r0, [r4, #0]
    7ca2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7ca6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7caa:	1c6d      	adds	r5, r5, #1
    7cac:	e008      	b.n	7cc0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7cae:	f240 212f 	movw	r1, #559	; 0x22f
    7cb2:	203c      	movs	r0, #60	; 0x3c
    7cb4:	f7f9 fb74 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cb8:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7cbc:	f009 f82d 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7cc0:	4631      	mov	r1, r6
    7cc2:	4640      	mov	r0, r8
    7cc4:	f008 fe6a 	bl	1099c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7cc8:	2800      	cmp	r0, #0
    7cca:	d0f5      	beq.n	7cb8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7ccc:	b91d      	cbnz	r5, 7cd6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7cce:	6820      	ldr	r0, [r4, #0]
    7cd0:	f020 0010 	bic.w	r0, r0, #16
    7cd4:	6020      	str	r0, [r4, #0]
    7cd6:	2002      	movs	r0, #2
    7cd8:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ce0:	20000373 	.word	0x20000373
    7ce4:	4000f000 	.word	0x4000f000
    7ce8:	e000ed10 	.word	0xe000ed10
    7cec:	4902      	ldr	r1, [pc, #8]	; (7cf8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7cee:	4801      	ldr	r0, [pc, #4]	; (7cf4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7cf0:	6008      	str	r0, [r1, #0]
    7cf2:	4770      	bx	lr
    7cf4:	02020000 	.word	0x02020000
    7cf8:	4001f508 	.word	0x4001f508
    7cfc:	00010000 	.word	0x00010000

00007d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7d00:	b510      	push	{r4, lr}
    7d02:	4604      	mov	r4, r0
    7d04:	f000 f820 	bl	7d48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7d08:	2c00      	cmp	r4, #0
    7d0a:	d00e      	beq.n	7d2a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7d0c:	4a0b      	ldr	r2, [pc, #44]	; (7d3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7d0e:	480b      	ldr	r0, [pc, #44]	; (7d3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7d10:	490b      	ldr	r1, [pc, #44]	; (7d40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7d12:	3214      	adds	r2, #20
    7d14:	2c01      	cmp	r4, #1
    7d16:	d005      	beq.n	7d24 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7d18:	2c02      	cmp	r4, #2
    7d1a:	d007      	beq.n	7d2c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7d1c:	2182      	movs	r1, #130	; 0x82
    7d1e:	203d      	movs	r0, #61	; 0x3d
    7d20:	f7f9 fb3e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d24:	2302      	movs	r3, #2
    7d26:	6003      	str	r3, [r0, #0]
    7d28:	6011      	str	r1, [r2, #0]
    7d2a:	bd10      	pop	{r4, pc}
    7d2c:	2303      	movs	r3, #3
    7d2e:	6003      	str	r3, [r0, #0]
    7d30:	6011      	str	r1, [r2, #0]
    7d32:	4904      	ldr	r1, [pc, #16]	; (7d44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7d34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7d38:	6008      	str	r0, [r1, #0]
    7d3a:	bd10      	pop	{r4, pc}
    7d3c:	4000f500 	.word	0x4000f500
    7d40:	200018a5 	.word	0x200018a5
    7d44:	4001f504 	.word	0x4001f504
    7d48:	4805      	ldr	r0, [pc, #20]	; (7d60 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7d4a:	b510      	push	{r4, lr}
    7d4c:	2100      	movs	r1, #0
    7d4e:	6001      	str	r1, [r0, #0]
    7d50:	6001      	str	r1, [r0, #0]
    7d52:	f7ff ff51 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7d56:	4903      	ldr	r1, [pc, #12]	; (7d64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7d58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7d5c:	6008      	str	r0, [r1, #0]
    7d5e:	bd10      	pop	{r4, pc}
    7d60:	4000f500 	.word	0x4000f500
    7d64:	4001f508 	.word	0x4001f508

00007d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7d68:	4805      	ldr	r0, [pc, #20]	; (7d80 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7d6a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7d6e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7d72:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7d76:	2100      	movs	r1, #0
    7d78:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7d7c:	4770      	bx	lr
    7d7e:	0000      	.short	0x0000
    7d80:	40001000 	.word	0x40001000

00007d84 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7d84:	4904      	ldr	r1, [pc, #16]	; (7d98 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7d86:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7d8a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7d8e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7d92:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7d96:	4770      	bx	lr
    7d98:	40001000 	.word	0x40001000

00007d9c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    7d9c:	4801      	ldr	r0, [pc, #4]	; (7da4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    7d9e:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    7da2:	4770      	bx	lr
    7da4:	20000fec 	.word	0x20000fec

00007da8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7da8:	4902      	ldr	r1, [pc, #8]	; (7db4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7daa:	5c08      	ldrb	r0, [r1, r0]
    7dac:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7db0:	4770      	bx	lr
    7db2:	0000      	.short	0x0000
    7db4:	00008afe 	.word	0x00008afe

00007db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dba:	4c24      	ldr	r4, [pc, #144]	; (7e4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7dbc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7dc0:	f010 0f10 	tst.w	r0, #16
    7dc4:	d001      	beq.n	7dca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7dc6:	2701      	movs	r7, #1
    7dc8:	e000      	b.n	7dcc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7dca:	2700      	movs	r7, #0
    7dcc:	2010      	movs	r0, #16
    7dce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7dd2:	2002      	movs	r0, #2
    7dd4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7dd8:	481d      	ldr	r0, [pc, #116]	; (7e50 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7dda:	2500      	movs	r5, #0
    7ddc:	491d      	ldr	r1, [pc, #116]	; (7e54 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7dde:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7de2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7de6:	6008      	str	r0, [r1, #0]
    7de8:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7dec:	f44f 7688 	mov.w	r6, #272	; 0x110
    7df0:	f010 0fff 	tst.w	r0, #255	; 0xff
    7df4:	d019      	beq.n	7e2a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7df6:	20ff      	movs	r0, #255	; 0xff
    7df8:	f88d 0000 	strb.w	r0, [sp]
    7dfc:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7e00:	2001      	movs	r0, #1
    7e02:	6120      	str	r0, [r4, #16]
    7e04:	e005      	b.n	7e12 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7e06:	bf00      	nop
    7e08:	f89d 0000 	ldrb.w	r0, [sp]
    7e0c:	1e40      	subs	r0, r0, #1
    7e0e:	f88d 0000 	strb.w	r0, [sp]
    7e12:	f89d 0000 	ldrb.w	r0, [sp]
    7e16:	b128      	cbz	r0, 7e24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7e18:	4631      	mov	r1, r6
    7e1a:	4620      	mov	r0, r4
    7e1c:	f008 fded 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7e20:	2800      	cmp	r0, #0
    7e22:	d0f1      	beq.n	7e08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7e24:	f89d 0000 	ldrb.w	r0, [sp]
    7e28:	b158      	cbz	r0, 7e42 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7e2a:	f000 fc57 	bl	86dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7e2e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7e32:	f000 fde5 	bl	8a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7e36:	2f00      	cmp	r7, #0
    7e38:	d002      	beq.n	7e40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7e3a:	2010      	movs	r0, #16
    7e3c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e42:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7e46:	203e      	movs	r0, #62	; 0x3e
    7e48:	f7f9 faaa 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e4c:	40001000 	.word	0x40001000
    7e50:	20000fec 	.word	0x20000fec
    7e54:	4001f508 	.word	0x4001f508

00007e58 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e5c:	4d18      	ldr	r5, [pc, #96]	; (7ec0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7e5e:	4607      	mov	r7, r0
    7e60:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7e64:	07c2      	lsls	r2, r0, #31
    7e66:	d00f      	beq.n	7e88 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7e68:	4c16      	ldr	r4, [pc, #88]	; (7ec4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7e6a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7e6e:	f042 0201 	orr.w	r2, r2, #1
    7e72:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7e76:	f040 0002 	orr.w	r0, r0, #2
    7e7a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7e7e:	2601      	movs	r6, #1
    7e80:	b13f      	cbz	r7, 7e92 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7e82:	2f01      	cmp	r7, #1
    7e84:	d00b      	beq.n	7e9e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7e86:	e010      	b.n	7eaa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7e88:	f240 7185 	movw	r1, #1925	; 0x785
    7e8c:	203e      	movs	r0, #62	; 0x3e
    7e8e:	f7f9 fa87 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e92:	4608      	mov	r0, r1
    7e94:	f000 fe0e 	bl	8ab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7e98:	726e      	strb	r6, [r5, #9]
    7e9a:	6026      	str	r6, [r4, #0]
    7e9c:	e005      	b.n	7eaa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7e9e:	4608      	mov	r0, r1
    7ea0:	f000 fdee 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7ea4:	2002      	movs	r0, #2
    7ea6:	7268      	strb	r0, [r5, #9]
    7ea8:	6066      	str	r6, [r4, #4]
    7eaa:	4807      	ldr	r0, [pc, #28]	; (7ec8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7eac:	64c6      	str	r6, [r0, #76]	; 0x4c
    7eae:	4806      	ldr	r0, [pc, #24]	; (7ec8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7eb0:	300c      	adds	r0, #12
    7eb2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7eb6:	4638      	mov	r0, r7
    7eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ebc:	f000 bd72 	b.w	89a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7ec0:	20000fec 	.word	0x20000fec
    7ec4:	40001000 	.word	0x40001000
    7ec8:	40008000 	.word	0x40008000

00007ecc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ed0:	4c2c      	ldr	r4, [pc, #176]	; (7f84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7ed2:	0006      	movs	r6, r0
    7ed4:	4d2c      	ldr	r5, [pc, #176]	; (7f88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7ed6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7eda:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7f8c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7ede:	f040 0002 	orr.w	r0, r0, #2
    7ee2:	4689      	mov	r9, r1
    7ee4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7ee8:	f04f 0700 	mov.w	r7, #0
    7eec:	d002      	beq.n	7ef4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7eee:	2e01      	cmp	r6, #1
    7ef0:	d020      	beq.n	7f34 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7ef2:	e036      	b.n	7f62 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7ef4:	4608      	mov	r0, r1
    7ef6:	f000 fddd 	bl	8ab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7efa:	2001      	movs	r0, #1
    7efc:	7260      	strb	r0, [r4, #9]
    7efe:	79e0      	ldrb	r0, [r4, #7]
    7f00:	2801      	cmp	r0, #1
    7f02:	d105      	bne.n	7f10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7f04:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7f08:	f040 0008 	orr.w	r0, r0, #8
    7f0c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7f10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7f12:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7f16:	62a0      	str	r0, [r4, #40]	; 0x28
    7f18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7f1c:	f8c8 0000 	str.w	r0, [r8]
    7f20:	491b      	ldr	r1, [pc, #108]	; (7f90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7f22:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7f26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7f2a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7f2e:	fbb0 f7f1 	udiv	r7, r0, r1
    7f32:	e016      	b.n	7f62 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7f34:	4608      	mov	r0, r1
    7f36:	f000 fda3 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7f3a:	2002      	movs	r0, #2
    7f3c:	7260      	strb	r0, [r4, #9]
    7f3e:	79e0      	ldrb	r0, [r4, #7]
    7f40:	2801      	cmp	r0, #1
    7f42:	d105      	bne.n	7f50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7f44:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7f48:	f040 0004 	orr.w	r0, r0, #4
    7f4c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7f50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7f52:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7f56:	62a0      	str	r0, [r4, #40]	; 0x28
    7f58:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7f5c:	f8c8 0000 	str.w	r0, [r8]
    7f60:	2729      	movs	r7, #41	; 0x29
    7f62:	f000 fc27 	bl	87b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7f66:	f008 fd90 	bl	10a8a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7f6a:	b120      	cbz	r0, 7f76 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7f6c:	f7ff ff24 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f70:	2000      	movs	r0, #0
    7f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f76:	2100      	movs	r1, #0
    7f78:	4630      	mov	r0, r6
    7f7a:	f000 fd13 	bl	89a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7f7e:	4638      	mov	r0, r7
    7f80:	e7f7      	b.n	7f72 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7f82:	0000      	.short	0x0000
    7f84:	20000fec 	.word	0x20000fec
    7f88:	40001000 	.word	0x40001000
    7f8c:	4001f504 	.word	0x4001f504
    7f90:	00008af8 	.word	0x00008af8

00007f94 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    7f94:	4a02      	ldr	r2, [pc, #8]	; (7fa0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    7f96:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7f98:	6003      	str	r3, [r0, #0]
    7f9a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    7f9c:	6008      	str	r0, [r1, #0]
    7f9e:	4770      	bx	lr
    7fa0:	20000fec 	.word	0x20000fec

00007fa4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7fa4:	b510      	push	{r4, lr}
    7fa6:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7fa8:	4901      	ldr	r1, [pc, #4]	; (7fb0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7faa:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7fae:	bd10      	pop	{r4, pc}
    7fb0:	20000fdc 	.word	0x20000fdc

00007fb4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    7fb4:	490f      	ldr	r1, [pc, #60]	; (7ff4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    7fb6:	b510      	push	{r4, lr}
    7fb8:	69ca      	ldr	r2, [r1, #28]
    7fba:	4282      	cmp	r2, r0
    7fbc:	d302      	bcc.n	7fc4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    7fbe:	f640 113a 	movw	r1, #2362	; 0x93a
    7fc2:	e00b      	b.n	7fdc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    7fc4:	2201      	movs	r2, #1
    7fc6:	730a      	strb	r2, [r1, #12]
    7fc8:	6108      	str	r0, [r1, #16]
    7fca:	490b      	ldr	r1, [pc, #44]	; (7ff8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7fcc:	644a      	str	r2, [r1, #68]	; 0x44
    7fce:	1d0a      	adds	r2, r1, #4
    7fd0:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    7fd4:	4283      	cmp	r3, r0
    7fd6:	d304      	bcc.n	7fe2 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    7fd8:	f640 1143 	movw	r1, #2371	; 0x943
    7fdc:	203e      	movs	r0, #62	; 0x3e
    7fde:	f7f9 f9df 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fe2:	2300      	movs	r3, #0
    7fe4:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    7fe8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ff0:	f000 bcac 	b.w	894c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    7ff4:	20000fec 	.word	0x20000fec
    7ff8:	40008000 	.word	0x40008000

00007ffc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7ffc:	b570      	push	{r4, r5, r6, lr}
    7ffe:	4c0f      	ldr	r4, [pc, #60]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    8000:	4603      	mov	r3, r0
    8002:	2002      	movs	r0, #2
    8004:	7320      	strb	r0, [r4, #12]
    8006:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    800a:	2096      	movs	r0, #150	; 0x96
    800c:	f894 1020 	ldrb.w	r1, [r4, #32]
    8010:	7d22      	ldrb	r2, [r4, #20]
    8012:	2d01      	cmp	r5, #1
    8014:	d00e      	beq.n	8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    8016:	f000 fdab 	bl	8b70 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    801a:	6120      	str	r0, [r4, #16]
    801c:	4808      	ldr	r0, [pc, #32]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    801e:	2100      	movs	r1, #0
    8020:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    8024:	6921      	ldr	r1, [r4, #16]
    8026:	69e0      	ldr	r0, [r4, #28]
    8028:	4408      	add	r0, r1
    802a:	4905      	ldr	r1, [pc, #20]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    802c:	1d09      	adds	r1, r1, #4
    802e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8032:	bd70      	pop	{r4, r5, r6, pc}
    8034:	f000 fdba 	bl	8bac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    8038:	e7ef      	b.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    803a:	0000      	.short	0x0000
    803c:	20000fec 	.word	0x20000fec
    8040:	40008000 	.word	0x40008000

00008044 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    8044:	b510      	push	{r4, lr}
    8046:	f008 fe44 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    804a:	2800      	cmp	r0, #0
    804c:	d006      	beq.n	805c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    804e:	4804      	ldr	r0, [pc, #16]	; (8060 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    8050:	6801      	ldr	r1, [r0, #0]
    8052:	f021 0101 	bic.w	r1, r1, #1
    8056:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    805a:	6001      	str	r1, [r0, #0]
    805c:	bd10      	pop	{r4, pc}
    805e:	0000      	.short	0x0000
    8060:	40001774 	.word	0x40001774

00008064 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    8064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8068:	2238      	movs	r2, #56	; 0x38
    806a:	2100      	movs	r1, #0
    806c:	4813      	ldr	r0, [pc, #76]	; (80bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    806e:	f008 ff19 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8072:	f000 fcc5 	bl	8a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8076:	f008 fde5 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    807a:	4d11      	ldr	r5, [pc, #68]	; (80c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    807c:	4e10      	ldr	r6, [pc, #64]	; (80c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    807e:	2400      	movs	r4, #0
    8080:	4f0f      	ldr	r7, [pc, #60]	; (80c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8082:	3508      	adds	r5, #8
    8084:	3610      	adds	r6, #16
    8086:	b928      	cbnz	r0, 8094 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8088:	f008 fdf3 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    808c:	b910      	cbnz	r0, 8094 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    808e:	f008 fdfa 	bl	10c86 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8092:	b108      	cbz	r0, 8098 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    8094:	2224      	movs	r2, #36	; 0x24
    8096:	e006      	b.n	80a6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8098:	f008 fe35 	bl	10d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    809c:	b910      	cbnz	r0, 80a4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    809e:	f008 fe28 	bl	10cf2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    80a2:	b140      	cbz	r0, 80b6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    80a4:	2240      	movs	r2, #64	; 0x40
    80a6:	21ff      	movs	r1, #255	; 0xff
    80a8:	4638      	mov	r0, r7
    80aa:	f008 fefb 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80ae:	602c      	str	r4, [r5, #0]
    80b0:	6034      	str	r4, [r6, #0]
    80b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80b6:	2238      	movs	r2, #56	; 0x38
    80b8:	e7f5      	b.n	80a6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    80ba:	0000      	.short	0x0000
    80bc:	20000fec 	.word	0x20000fec
    80c0:	40000e00 	.word	0x40000e00

000080c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    80c4:	4801      	ldr	r0, [pc, #4]	; (80cc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    80c6:	69c0      	ldr	r0, [r0, #28]
    80c8:	4770      	bx	lr
    80ca:	0000      	.short	0x0000
    80cc:	20000fec 	.word	0x20000fec

000080d0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    80d0:	4801      	ldr	r0, [pc, #4]	; (80d8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    80d2:	6980      	ldr	r0, [r0, #24]
    80d4:	4770      	bx	lr
    80d6:	0000      	.short	0x0000
    80d8:	20000fec 	.word	0x20000fec

000080dc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    80dc:	b510      	push	{r4, lr}
    80de:	f000 fc43 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    80e2:	f7ff fe69 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    80e6:	f004 fb69 	bl	c7bc <mpsl_fem_disable>
    80ea:	b130      	cbz	r0, 80fa <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    80ec:	1c40      	adds	r0, r0, #1
    80ee:	d004      	beq.n	80fa <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    80f0:	f240 516d 	movw	r1, #1389	; 0x56d
    80f4:	203e      	movs	r0, #62	; 0x3e
    80f6:	f7f9 f953 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80fa:	480f      	ldr	r0, [pc, #60]	; (8138 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    80fc:	4a0f      	ldr	r2, [pc, #60]	; (813c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    80fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8100:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    8104:	6011      	str	r1, [r2, #0]
    8106:	2400      	movs	r4, #0
    8108:	6284      	str	r4, [r0, #40]	; 0x28
    810a:	7304      	strb	r4, [r0, #12]
    810c:	61c4      	str	r4, [r0, #28]
    810e:	6184      	str	r4, [r0, #24]
    8110:	f000 fc2a 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    8114:	480a      	ldr	r0, [pc, #40]	; (8140 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    8116:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    811a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    811e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    8122:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    8126:	2001      	movs	r0, #1
    8128:	f008 fc56 	bl	109d8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    812c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8130:	2001      	movs	r0, #1
    8132:	f008 bc44 	b.w	109be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8136:	0000      	.short	0x0000
    8138:	20000fec 	.word	0x20000fec
    813c:	4001f508 	.word	0x4001f508
    8140:	40008000 	.word	0x40008000

00008144 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    8144:	b570      	push	{r4, r5, r6, lr}
    8146:	2001      	movs	r0, #1
    8148:	f008 fc46 	bl	109d8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    814c:	4c37      	ldr	r4, [pc, #220]	; (822c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    814e:	2000      	movs	r0, #0
    8150:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    8154:	2001      	movs	r0, #1
    8156:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    815a:	f008 fdaa 	bl	10cb2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    815e:	4d34      	ldr	r5, [pc, #208]	; (8230 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8160:	b118      	cbz	r0, 816a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    8162:	6828      	ldr	r0, [r5, #0]
    8164:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    8168:	6028      	str	r0, [r5, #0]
    816a:	f008 fd96 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    816e:	b128      	cbz	r0, 817c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    8170:	6828      	ldr	r0, [r5, #0]
    8172:	4930      	ldr	r1, [pc, #192]	; (8234 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    8174:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    8178:	4308      	orrs	r0, r1
    817a:	6028      	str	r0, [r5, #0]
    817c:	f008 fda9 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8180:	b138      	cbz	r0, 8192 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    8182:	482b      	ldr	r0, [pc, #172]	; (8230 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8184:	1d00      	adds	r0, r0, #4
    8186:	6801      	ldr	r1, [r0, #0]
    8188:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    818c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8190:	6001      	str	r1, [r0, #0]
    8192:	4927      	ldr	r1, [pc, #156]	; (8230 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8194:	4828      	ldr	r0, [pc, #160]	; (8238 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    8196:	313c      	adds	r1, #60	; 0x3c
    8198:	6008      	str	r0, [r1, #0]
    819a:	f004 fb49 	bl	c830 <mpsl_fem_device_config_254_apply_get>
    819e:	b140      	cbz	r0, 81b2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    81a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    81a4:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    81a8:	1c41      	adds	r1, r0, #1
    81aa:	d002      	beq.n	81b2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    81ac:	4920      	ldr	r1, [pc, #128]	; (8230 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81ae:	3110      	adds	r1, #16
    81b0:	6008      	str	r0, [r1, #0]
    81b2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    81b6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    81b8:	1c41      	adds	r1, r0, #1
    81ba:	d004      	beq.n	81c6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    81bc:	491f      	ldr	r1, [pc, #124]	; (823c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    81be:	680a      	ldr	r2, [r1, #0]
    81c0:	f360 4217 	bfi	r2, r0, #16, #8
    81c4:	600a      	str	r2, [r1, #0]
    81c6:	f240 1103 	movw	r1, #259	; 0x103
    81ca:	f240 605b 	movw	r0, #1627	; 0x65b
    81ce:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    81d2:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    81d6:	2001      	movs	r0, #1
    81d8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    81dc:	f000 f842 	bl	8264 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    81e0:	f240 2001 	movw	r0, #513	; 0x201
    81e4:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    81e8:	2002      	movs	r0, #2
    81ea:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    81ee:	4914      	ldr	r1, [pc, #80]	; (8240 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    81f0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    81f4:	6008      	str	r0, [r1, #0]
    81f6:	4913      	ldr	r1, [pc, #76]	; (8244 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    81f8:	2000      	movs	r0, #0
    81fa:	4d13      	ldr	r5, [pc, #76]	; (8248 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    81fc:	8608      	strh	r0, [r1, #48]	; 0x30
    81fe:	3110      	adds	r1, #16
    8200:	61c8      	str	r0, [r1, #28]
    8202:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    8206:	7028      	strb	r0, [r5, #0]
    8208:	2001      	movs	r0, #1
    820a:	f008 fbd8 	bl	109be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    820e:	2010      	movs	r0, #16
    8210:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8214:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8218:	2002      	movs	r0, #2
    821a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    821e:	6868      	ldr	r0, [r5, #4]
    8220:	2800      	cmp	r0, #0
    8222:	d002      	beq.n	822a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    8224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8228:	4700      	bx	r0
    822a:	bd70      	pop	{r4, r5, r6, pc}
    822c:	40001000 	.word	0x40001000
    8230:	4000173c 	.word	0x4000173c
    8234:	80000096 	.word	0x80000096
    8238:	8900002c 	.word	0x8900002c
    823c:	4000158c 	.word	0x4000158c
    8240:	4001f504 	.word	0x4001f504
    8244:	20000fdc 	.word	0x20000fdc
    8248:	200002bc 	.word	0x200002bc

0000824c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    824c:	4901      	ldr	r1, [pc, #4]	; (8254 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    824e:	7548      	strb	r0, [r1, #21]
    8250:	4770      	bx	lr
    8252:	0000      	.short	0x0000
    8254:	20000fec 	.word	0x20000fec

00008258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    8258:	4901      	ldr	r1, [pc, #4]	; (8260 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    825a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    825e:	4770      	bx	lr
    8260:	00008b4c 	.word	0x00008b4c

00008264 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    8264:	4908      	ldr	r1, [pc, #32]	; (8288 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    8266:	b510      	push	{r4, lr}
    8268:	7508      	strb	r0, [r1, #20]
    826a:	4908      	ldr	r1, [pc, #32]	; (828c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    826c:	2801      	cmp	r0, #1
    826e:	d006      	beq.n	827e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    8270:	2802      	cmp	r0, #2
    8272:	d006      	beq.n	8282 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    8274:	f640 5186 	movw	r1, #3462	; 0xd86
    8278:	203e      	movs	r0, #62	; 0x3e
    827a:	f7f9 f891 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    827e:	2003      	movs	r0, #3
    8280:	e000      	b.n	8284 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    8282:	2004      	movs	r0, #4
    8284:	6008      	str	r0, [r1, #0]
    8286:	bd10      	pop	{r4, pc}
    8288:	20000fec 	.word	0x20000fec
    828c:	40001510 	.word	0x40001510

00008290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8290:	4905      	ldr	r1, [pc, #20]	; (82a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8292:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    8296:	4805      	ldr	r0, [pc, #20]	; (82ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    8298:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    829c:	f041 0101 	orr.w	r1, r1, #1
    82a0:	7001      	strb	r1, [r0, #0]
    82a2:	f000 ba4d 	b.w	8740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    82a6:	0000      	.short	0x0000
    82a8:	40001000 	.word	0x40001000
    82ac:	20000fec 	.word	0x20000fec

000082b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    82b0:	4901      	ldr	r1, [pc, #4]	; (82b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    82b2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    82b6:	4770      	bx	lr
    82b8:	00008b58 	.word	0x00008b58

000082bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    82bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82c0:	4e30      	ldr	r6, [pc, #192]	; (8384 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    82c2:	4c31      	ldr	r4, [pc, #196]	; (8388 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    82c4:	4688      	mov	r8, r1
    82c6:	0007      	movs	r7, r0
    82c8:	4615      	mov	r5, r2
    82ca:	f04f 0901 	mov.w	r9, #1
    82ce:	d006      	beq.n	82de <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    82d0:	2f01      	cmp	r7, #1
    82d2:	d012      	beq.n	82fa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    82d4:	f640 012d 	movw	r1, #2093	; 0x82d
    82d8:	203e      	movs	r0, #62	; 0x3e
    82da:	f7f9 f861 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82de:	4610      	mov	r0, r2
    82e0:	f000 fbe8 	bl	8ab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    82e4:	4829      	ldr	r0, [pc, #164]	; (838c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    82e6:	f884 9009 	strb.w	r9, [r4, #9]
    82ea:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    82ee:	4640      	mov	r0, r8
    82f0:	f000 fb8e 	bl	8a10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    82f4:	4605      	mov	r5, r0
    82f6:	4630      	mov	r0, r6
    82f8:	e00c      	b.n	8314 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    82fa:	4610      	mov	r0, r2
    82fc:	f000 fbc0 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8300:	2002      	movs	r0, #2
    8302:	7260      	strb	r0, [r4, #9]
    8304:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8308:	4640      	mov	r0, r8
    830a:	f000 fb81 	bl	8a10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    830e:	4605      	mov	r5, r0
    8310:	481c      	ldr	r0, [pc, #112]	; (8384 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8312:	1d00      	adds	r0, r0, #4
    8314:	f000 fb3a 	bl	898c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    8318:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8390 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    831c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8320:	f8df a074 	ldr.w	sl, [pc, #116]	; 8398 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8324:	481b      	ldr	r0, [pc, #108]	; (8394 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    8326:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    832a:	2010      	movs	r0, #16
    832c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8330:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8332:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    8336:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    833a:	62a0      	str	r0, [r4, #40]	; 0x28
    833c:	4817      	ldr	r0, [pc, #92]	; (839c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    833e:	6006      	str	r6, [r0, #0]
    8340:	f000 fa38 	bl	87b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    8344:	4641      	mov	r1, r8
    8346:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    834a:	4811      	ldr	r0, [pc, #68]	; (8390 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    834c:	300c      	adds	r0, #12
    834e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8352:	42a8      	cmp	r0, r5
    8354:	d310      	bcc.n	8378 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    8356:	2000      	movs	r0, #0
    8358:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    835c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    8360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8362:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    8366:	62a0      	str	r0, [r4, #40]	; 0x28
    8368:	480c      	ldr	r0, [pc, #48]	; (839c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    836a:	1d00      	adds	r0, r0, #4
    836c:	6006      	str	r6, [r0, #0]
    836e:	f7ff fd23 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8372:	2000      	movs	r0, #0
    8374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8378:	4629      	mov	r1, r5
    837a:	4638      	mov	r0, r7
    837c:	f000 fb12 	bl	89a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    8380:	2001      	movs	r0, #1
    8382:	e7f7      	b.n	8374 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    8384:	40001000 	.word	0x40001000
    8388:	20000fec 	.word	0x20000fec
    838c:	00008af8 	.word	0x00008af8
    8390:	40008000 	.word	0x40008000
    8394:	40008140 	.word	0x40008140
    8398:	4001f098 	.word	0x4001f098
    839c:	4001f504 	.word	0x4001f504

000083a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    83a0:	4b0d      	ldr	r3, [pc, #52]	; (83d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    83a2:	b510      	push	{r4, lr}
    83a4:	71d8      	strb	r0, [r3, #7]
    83a6:	729a      	strb	r2, [r3, #10]
    83a8:	b151      	cbz	r1, 83c0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    83aa:	2002      	movs	r0, #2
    83ac:	7218      	strb	r0, [r3, #8]
    83ae:	2801      	cmp	r0, #1
    83b0:	d008      	beq.n	83c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    83b2:	2802      	cmp	r0, #2
    83b4:	d00f      	beq.n	83d6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    83b6:	f640 2163 	movw	r1, #2659	; 0xa63
    83ba:	203e      	movs	r0, #62	; 0x3e
    83bc:	f7f8 fff0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83c0:	2001      	movs	r0, #1
    83c2:	e7f3      	b.n	83ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    83c4:	7a58      	ldrb	r0, [r3, #9]
    83c6:	2802      	cmp	r0, #2
    83c8:	d105      	bne.n	83d6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    83ca:	f000 f97d 	bl	86c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    83ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83d2:	f000 bab1 	b.w	8938 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    83d6:	bd10      	pop	{r4, pc}
    83d8:	20000fec 	.word	0x20000fec

000083dc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    83dc:	4902      	ldr	r1, [pc, #8]	; (83e8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    83de:	2000      	movs	r0, #0
    83e0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    83e4:	4770      	bx	lr
    83e6:	0000      	.short	0x0000
    83e8:	40008000 	.word	0x40008000

000083ec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    83ec:	4904      	ldr	r1, [pc, #16]	; (8400 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    83ee:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    83f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    83f6:	4249      	negs	r1, r1
    83f8:	7001      	strb	r1, [r0, #0]
    83fa:	2001      	movs	r0, #1
    83fc:	4770      	bx	lr
    83fe:	0000      	.short	0x0000
    8400:	40001000 	.word	0x40001000

00008404 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8404:	4903      	ldr	r1, [pc, #12]	; (8414 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8406:	0e02      	lsrs	r2, r0, #24
    8408:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    840c:	0200      	lsls	r0, r0, #8
    840e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8412:	4770      	bx	lr
    8414:	40001000 	.word	0x40001000

00008418 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8418:	4901      	ldr	r1, [pc, #4]	; (8420 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    841a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    841e:	4770      	bx	lr
    8420:	40001000 	.word	0x40001000

00008424 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8424:	b510      	push	{r4, lr}
    8426:	2200      	movs	r2, #0
    8428:	2901      	cmp	r1, #1
    842a:	d006      	beq.n	843a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    842c:	2902      	cmp	r1, #2
    842e:	d002      	beq.n	8436 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    8430:	f240 21d9 	movw	r1, #729	; 0x2d9
    8434:	e014      	b.n	8460 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    8436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    843a:	490b      	ldr	r1, [pc, #44]	; (8468 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    843c:	430a      	orrs	r2, r1
    843e:	490b      	ldr	r1, [pc, #44]	; (846c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8440:	600a      	str	r2, [r1, #0]
    8442:	490b      	ldr	r1, [pc, #44]	; (8470 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    8444:	4308      	orrs	r0, r1
    8446:	4909      	ldr	r1, [pc, #36]	; (846c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8448:	1d09      	adds	r1, r1, #4
    844a:	6008      	str	r0, [r1, #0]
    844c:	4809      	ldr	r0, [pc, #36]	; (8474 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    844e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8452:	b2c0      	uxtb	r0, r0
    8454:	2803      	cmp	r0, #3
    8456:	d001      	beq.n	845c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    8458:	280b      	cmp	r0, #11
    845a:	d104      	bne.n	8466 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    845c:	f240 21f1 	movw	r1, #753	; 0x2f1
    8460:	203e      	movs	r0, #62	; 0x3e
    8462:	f7f8 ff9d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8466:	bd10      	pop	{r4, pc}
    8468:	00100108 	.word	0x00100108
    846c:	40001514 	.word	0x40001514
    8470:	02030000 	.word	0x02030000
    8474:	40001000 	.word	0x40001000

00008478 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    8478:	4901      	ldr	r1, [pc, #4]	; (8480 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    847a:	7588      	strb	r0, [r1, #22]
    847c:	4770      	bx	lr
    847e:	0000      	.short	0x0000
    8480:	20000fec 	.word	0x20000fec

00008484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8488:	4853      	ldr	r0, [pc, #332]	; (85d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    848a:	f04f 0a01 	mov.w	sl, #1
    848e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8492:	4851      	ldr	r0, [pc, #324]	; (85d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8494:	300c      	adds	r0, #12
    8496:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    849a:	f008 faf4 	bl	10a86 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    849e:	4c4f      	ldr	r4, [pc, #316]	; (85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    84a0:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    84a4:	f000 f91a 	bl	86dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    84a8:	494d      	ldr	r1, [pc, #308]	; (85e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    84aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84ac:	6008      	str	r0, [r1, #0]
    84ae:	f8df 8134 	ldr.w	r8, [pc, #308]	; 85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    84b2:	2000      	movs	r0, #0
    84b4:	62a0      	str	r0, [r4, #40]	; 0x28
    84b6:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    84ba:	f240 131d 	movw	r3, #285	; 0x11d
    84be:	439a      	bics	r2, r3
    84c0:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    84c4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    84c8:	f000 f988 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    84cc:	4605      	mov	r5, r0
    84ce:	4842      	ldr	r0, [pc, #264]	; (85d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    84d0:	3008      	adds	r0, #8
    84d2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    84d6:	4e40      	ldr	r6, [pc, #256]	; (85d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    84d8:	61e0      	str	r0, [r4, #28]
    84da:	1d36      	adds	r6, r6, #4
    84dc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    84e0:	61a0      	str	r0, [r4, #24]
    84e2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    84e6:	7d21      	ldrb	r1, [r4, #20]
    84e8:	f884 1020 	strb.w	r1, [r4, #32]
    84ec:	7a61      	ldrb	r1, [r4, #9]
    84ee:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    84f2:	46a1      	mov	r9, r4
    84f4:	2400      	movs	r4, #0
    84f6:	4639      	mov	r1, r7
    84f8:	4628      	mov	r0, r5
    84fa:	f000 f9e3 	bl	88c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    84fe:	b910      	cbnz	r0, 8506 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8500:	f8c8 a010 	str.w	sl, [r8, #16]
    8504:	2401      	movs	r4, #1
    8506:	4f35      	ldr	r7, [pc, #212]	; (85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8508:	07e8      	lsls	r0, r5, #31
    850a:	f1a7 0710 	sub.w	r7, r7, #16
    850e:	d002      	beq.n	8516 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8510:	6838      	ldr	r0, [r7, #0]
    8512:	4780      	blx	r0
    8514:	e034      	b.n	8580 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8516:	07a8      	lsls	r0, r5, #30
    8518:	d529      	bpl.n	856e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    851a:	0768      	lsls	r0, r5, #29
    851c:	d421      	bmi.n	8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    851e:	f008 fbd8 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8522:	b9f0      	cbnz	r0, 8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8524:	f008 fbc5 	bl	10cb2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8528:	b9d8      	cbnz	r0, 8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    852a:	482f      	ldr	r0, [pc, #188]	; (85e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    852c:	6800      	ldr	r0, [r0, #0]
    852e:	f3c0 5242 	ubfx	r2, r0, #21, #3
    8532:	f3c0 6100 	ubfx	r1, r0, #24, #1
    8536:	f000 0c0f 	and.w	ip, r0, #15
    853a:	f3c0 1303 	ubfx	r3, r0, #4, #4
    853e:	f3c0 2803 	ubfx	r8, r0, #8, #4
    8542:	b171      	cbz	r1, 8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8544:	f1bc 0f00 	cmp.w	ip, #0
    8548:	d003      	beq.n	8552 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    854a:	b113      	cbz	r3, 8552 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    854c:	f1b8 0f00 	cmp.w	r8, #0
    8550:	d107      	bne.n	8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8552:	f3c0 4004 	ubfx	r0, r0, #16, #5
    8556:	2801      	cmp	r0, #1
    8558:	d103      	bne.n	8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    855a:	2a03      	cmp	r2, #3
    855c:	d201      	bcs.n	8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    855e:	f045 0504 	orr.w	r5, r5, #4
    8562:	f345 0080 	sbfx	r0, r5, #2, #1
    8566:	4621      	mov	r1, r4
    8568:	1c40      	adds	r0, r0, #1
    856a:	687a      	ldr	r2, [r7, #4]
    856c:	e007      	b.n	857e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    856e:	f015 0f28 	tst.w	r5, #40	; 0x28
    8572:	d005      	beq.n	8580 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8574:	f345 1140 	sbfx	r1, r5, #5, #1
    8578:	68ba      	ldr	r2, [r7, #8]
    857a:	4620      	mov	r0, r4
    857c:	1c49      	adds	r1, r1, #1
    857e:	4790      	blx	r2
    8580:	06e8      	lsls	r0, r5, #27
    8582:	d501      	bpl.n	8588 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    8584:	68f8      	ldr	r0, [r7, #12]
    8586:	4780      	blx	r0
    8588:	f899 1009 	ldrb.w	r1, [r9, #9]
    858c:	4648      	mov	r0, r9
    858e:	2902      	cmp	r1, #2
    8590:	d120      	bne.n	85d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8592:	7b01      	ldrb	r1, [r0, #12]
    8594:	2900      	cmp	r1, #0
    8596:	d01d      	beq.n	85d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8598:	2902      	cmp	r1, #2
    859a:	d004      	beq.n	85a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    859c:	2901      	cmp	r1, #1
    859e:	d009      	beq.n	85b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    85a0:	f640 4166 	movw	r1, #3174	; 0xc66
    85a4:	e00d      	b.n	85c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    85a6:	69c1      	ldr	r1, [r0, #28]
    85a8:	f8d9 0010 	ldr.w	r0, [r9, #16]
    85ac:	4408      	add	r0, r1
    85ae:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    85b2:	e00b      	b.n	85cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    85b4:	6901      	ldr	r1, [r0, #16]
    85b6:	f8d9 001c 	ldr.w	r0, [r9, #28]
    85ba:	4281      	cmp	r1, r0
    85bc:	d804      	bhi.n	85c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    85be:	f640 4167 	movw	r1, #3175	; 0xc67
    85c2:	203e      	movs	r0, #62	; 0x3e
    85c4:	f7f8 feec 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85c8:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    85cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85d0:	f000 b9bc 	b.w	894c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    85d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85d8:	40008000 	.word	0x40008000
    85dc:	20000fec 	.word	0x20000fec
    85e0:	4001f508 	.word	0x4001f508
    85e4:	40001000 	.word	0x40001000
    85e8:	40001450 	.word	0x40001450

000085ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    85ec:	b570      	push	{r4, r5, r6, lr}
    85ee:	4b16      	ldr	r3, [pc, #88]	; (8648 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    85f0:	888c      	ldrh	r4, [r1, #4]
    85f2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    85f6:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    85fa:	780c      	ldrb	r4, [r1, #0]
    85fc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8600:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8604:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    8608:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    860c:	2401      	movs	r4, #1
    860e:	4084      	lsls	r4, r0
    8610:	b2c9      	uxtb	r1, r1
    8612:	b2e5      	uxtb	r5, r4
    8614:	4329      	orrs	r1, r5
    8616:	b132      	cbz	r2, 8626 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    8618:	2a01      	cmp	r2, #1
    861a:	d00a      	beq.n	8632 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    861c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    8620:	203e      	movs	r0, #62	; 0x3e
    8622:	f7f8 febd 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8626:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    862a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    862e:	43a0      	bics	r0, r4
    8630:	e004      	b.n	863c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    8632:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    8636:	f3c0 2007 	ubfx	r0, r0, #8, #8
    863a:	4328      	orrs	r0, r5
    863c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8640:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    8644:	bd70      	pop	{r4, r5, r6, pc}
    8646:	0000      	.short	0x0000
    8648:	40001000 	.word	0x40001000

0000864c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    864c:	4901      	ldr	r1, [pc, #4]	; (8654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    864e:	2001      	movs	r0, #1
    8650:	7008      	strb	r0, [r1, #0]
    8652:	4770      	bx	lr
    8654:	200002bc 	.word	0x200002bc
    8658:	480b      	ldr	r0, [pc, #44]	; (8688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    865a:	7d81      	ldrb	r1, [r0, #22]
    865c:	480b      	ldr	r0, [pc, #44]	; (868c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    865e:	5c40      	ldrb	r0, [r0, r1]
    8660:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8664:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    8668:	d204      	bcs.n	8674 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    866a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    866e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8672:	e001      	b.n	8678 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    8674:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    8678:	4a05      	ldr	r2, [pc, #20]	; (8690 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    867a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    867e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    8682:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    8686:	4770      	bx	lr
    8688:	20000fec 	.word	0x20000fec
    868c:	00008afe 	.word	0x00008afe
    8690:	40001000 	.word	0x40001000
    8694:	b508      	push	{r3, lr}
    8696:	490b      	ldr	r1, [pc, #44]	; (86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    8698:	466b      	mov	r3, sp
    869a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    869e:	7d89      	ldrb	r1, [r1, #22]
    86a0:	f000 fad0 	bl	8c44 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    86a4:	f99d 0000 	ldrsb.w	r0, [sp]
    86a8:	f000 faa0 	bl	8bec <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    86ac:	f10d 0001 	add.w	r0, sp, #1
    86b0:	f004 f8a8 	bl	c804 <mpsl_fem_pa_gain_set>
    86b4:	2800      	cmp	r0, #0
    86b6:	d004      	beq.n	86c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    86b8:	f240 6115 	movw	r1, #1557	; 0x615
    86bc:	203e      	movs	r0, #62	; 0x3e
    86be:	f7f8 fe6f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86c2:	bd08      	pop	{r3, pc}
    86c4:	20000fec 	.word	0x20000fec
    86c8:	4803      	ldr	r0, [pc, #12]	; (86d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    86ca:	7a01      	ldrb	r1, [r0, #8]
    86cc:	2901      	cmp	r1, #1
    86ce:	d102      	bne.n	86d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    86d0:	7a80      	ldrb	r0, [r0, #10]
    86d2:	f7ff bfdf 	b.w	8694 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    86d6:	4770      	bx	lr
    86d8:	20000fec 	.word	0x20000fec
    86dc:	480d      	ldr	r0, [pc, #52]	; (8714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    86de:	b510      	push	{r4, lr}
    86e0:	7a40      	ldrb	r0, [r0, #9]
    86e2:	2801      	cmp	r0, #1
    86e4:	d00c      	beq.n	8700 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    86e6:	2802      	cmp	r0, #2
    86e8:	d113      	bne.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    86ea:	f004 f86d 	bl	c7c8 <mpsl_fem_lna_configuration_clear>
    86ee:	2800      	cmp	r0, #0
    86f0:	d00f      	beq.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    86f2:	1c40      	adds	r0, r0, #1
    86f4:	d00d      	beq.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    86f6:	f640 01c1 	movw	r1, #2241	; 0x8c1
    86fa:	203e      	movs	r0, #62	; 0x3e
    86fc:	f7f8 fe50 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8700:	f004 f874 	bl	c7ec <mpsl_fem_pa_configuration_clear>
    8704:	2800      	cmp	r0, #0
    8706:	d004      	beq.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8708:	1c40      	adds	r0, r0, #1
    870a:	d002      	beq.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    870c:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8710:	e7f3      	b.n	86fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8712:	bd10      	pop	{r4, pc}
    8714:	20000fec 	.word	0x20000fec
    8718:	4808      	ldr	r0, [pc, #32]	; (873c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    871a:	2100      	movs	r1, #0
    871c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8720:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8724:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8728:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    872c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8730:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8734:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8738:	4770      	bx	lr
    873a:	0000      	.short	0x0000
    873c:	40001000 	.word	0x40001000
    8740:	4818      	ldr	r0, [pc, #96]	; (87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    8742:	b510      	push	{r4, lr}
    8744:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    8748:	07c1      	lsls	r1, r0, #31
    874a:	d029      	beq.n	87a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    874c:	0781      	lsls	r1, r0, #30
    874e:	d514      	bpl.n	877a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    8750:	4815      	ldr	r0, [pc, #84]	; (87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8752:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8756:	f041 0101 	orr.w	r1, r1, #1
    875a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    875e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8762:	b2c0      	uxtb	r0, r0
    8764:	280b      	cmp	r0, #11
    8766:	d005      	beq.n	8774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    8768:	280a      	cmp	r0, #10
    876a:	d003      	beq.n	8774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    876c:	2803      	cmp	r0, #3
    876e:	d001      	beq.n	8774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    8770:	2802      	cmp	r0, #2
    8772:	d115      	bne.n	87a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    8774:	f240 613e 	movw	r1, #1598	; 0x63e
    8778:	e00f      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    877a:	0740      	lsls	r0, r0, #29
    877c:	d510      	bpl.n	87a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    877e:	480a      	ldr	r0, [pc, #40]	; (87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8780:	490a      	ldr	r1, [pc, #40]	; (87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    8782:	3008      	adds	r0, #8
    8784:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8788:	f44f 71a0 	mov.w	r1, #320	; 0x140
    878c:	4808      	ldr	r0, [pc, #32]	; (87b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    878e:	f008 f939 	bl	10a04 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8792:	2800      	cmp	r0, #0
    8794:	d004      	beq.n	87a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    8796:	f240 6146 	movw	r1, #1606	; 0x646
    879a:	203e      	movs	r0, #62	; 0x3e
    879c:	f7f8 fe00 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87a0:	bd10      	pop	{r4, pc}
    87a2:	0000      	.short	0x0000
    87a4:	20000fec 	.word	0x20000fec
    87a8:	40001000 	.word	0x40001000
    87ac:	4001f098 	.word	0x4001f098
    87b0:	40008000 	.word	0x40008000
    87b4:	4808      	ldr	r0, [pc, #32]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    87b6:	4601      	mov	r1, r0
    87b8:	79c2      	ldrb	r2, [r0, #7]
    87ba:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    87be:	b112      	cbz	r2, 87c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    87c0:	2a01      	cmp	r2, #1
    87c2:	d003      	beq.n	87cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    87c4:	e006      	b.n	87d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    87c6:	f041 0102 	orr.w	r1, r1, #2
    87ca:	e001      	b.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    87cc:	f041 0104 	orr.w	r1, r1, #4
    87d0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    87d4:	f7ff bfb4 	b.w	8740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    87d8:	20000fec 	.word	0x20000fec
    87dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87e0:	4d34      	ldr	r5, [pc, #208]	; (88b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    87e2:	2400      	movs	r4, #0
    87e4:	7b28      	ldrb	r0, [r5, #12]
    87e6:	b138      	cbz	r0, 87f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    87e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    87ec:	4832      	ldr	r0, [pc, #200]	; (88b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    87ee:	f008 f909 	bl	10a04 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    87f2:	b108      	cbz	r0, 87f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    87f4:	2601      	movs	r6, #1
    87f6:	e000      	b.n	87fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    87f8:	2600      	movs	r6, #0
    87fa:	7a68      	ldrb	r0, [r5, #9]
    87fc:	4f2f      	ldr	r7, [pc, #188]	; (88bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    87fe:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8802:	2801      	cmp	r0, #1
    8804:	d002      	beq.n	880c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    8806:	2802      	cmp	r0, #2
    8808:	d006      	beq.n	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    880a:	e016      	b.n	883a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    880c:	4638      	mov	r0, r7
    880e:	f008 f8f4 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8812:	b190      	cbz	r0, 883a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8814:	2408      	movs	r4, #8
    8816:	e010      	b.n	883a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8818:	4638      	mov	r0, r7
    881a:	f008 f8ee 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    881e:	b100      	cbz	r0, 8822 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    8820:	2402      	movs	r4, #2
    8822:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    8826:	43c0      	mvns	r0, r0
    8828:	f340 0000 	sbfx	r0, r0, #0, #1
    882c:	1c40      	adds	r0, r0, #1
    882e:	d101      	bne.n	8834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    8830:	f044 0404 	orr.w	r4, r4, #4
    8834:	b10e      	cbz	r6, 883a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8836:	f044 0401 	orr.w	r4, r4, #1
    883a:	f014 0f0b 	tst.w	r4, #11
    883e:	d107      	bne.n	8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    8840:	f44f 7188 	mov.w	r1, #272	; 0x110
    8844:	4638      	mov	r0, r7
    8846:	f008 f8d8 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    884a:	b108      	cbz	r0, 8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    884c:	f044 0410 	orr.w	r4, r4, #16
    8850:	481b      	ldr	r0, [pc, #108]	; (88c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    8852:	7800      	ldrb	r0, [r0, #0]
    8854:	b1f8      	cbz	r0, 8896 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    8856:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    885a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    885e:	d007      	beq.n	8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    8860:	f44f 718a 	mov.w	r1, #276	; 0x114
    8864:	4638      	mov	r0, r7
    8866:	f008 f8c8 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    886a:	b108      	cbz	r0, 8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    886c:	2001      	movs	r0, #1
    886e:	e000      	b.n	8872 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    8870:	2000      	movs	r0, #0
    8872:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    8876:	b13e      	cbz	r6, 8888 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    8878:	f44f 718c 	mov.w	r1, #280	; 0x118
    887c:	4638      	mov	r0, r7
    887e:	f008 f8bc 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8882:	b108      	cbz	r0, 8888 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    8884:	2001      	movs	r0, #1
    8886:	e000      	b.n	888a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    8888:	2000      	movs	r0, #0
    888a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    888e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    8892:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    8896:	f7ff ff3f 	bl	8718 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    889a:	06e0      	lsls	r0, r4, #27
    889c:	d506      	bpl.n	88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    889e:	0720      	lsls	r0, r4, #28
    88a0:	d404      	bmi.n	88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88a2:	7a68      	ldrb	r0, [r5, #9]
    88a4:	2801      	cmp	r0, #1
    88a6:	d101      	bne.n	88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88a8:	f044 0420 	orr.w	r4, r4, #32
    88ac:	4620      	mov	r0, r4
    88ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88b2:	0000      	.short	0x0000
    88b4:	20000fec 	.word	0x20000fec
    88b8:	40008000 	.word	0x40008000
    88bc:	40001000 	.word	0x40001000
    88c0:	200002bc 	.word	0x200002bc
    88c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88c8:	4c1a      	ldr	r4, [pc, #104]	; (8934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    88ca:	460d      	mov	r5, r1
    88cc:	7a21      	ldrb	r1, [r4, #8]
    88ce:	b129      	cbz	r1, 88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    88d0:	f010 0f11 	tst.w	r0, #17
    88d4:	d007      	beq.n	88e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    88d6:	f7ff fa6f 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    88da:	e024      	b.n	8926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    88dc:	f000 f890 	bl	8a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    88e0:	2000      	movs	r0, #0
    88e2:	7320      	strb	r0, [r4, #12]
    88e4:	e01f      	b.n	8926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    88e6:	2901      	cmp	r1, #1
    88e8:	d001      	beq.n	88ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    88ea:	2601      	movs	r6, #1
    88ec:	e000      	b.n	88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    88ee:	2600      	movs	r6, #0
    88f0:	79e0      	ldrb	r0, [r4, #7]
    88f2:	2801      	cmp	r0, #1
    88f4:	d00e      	beq.n	8914 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    88f6:	2700      	movs	r7, #0
    88f8:	f000 f882 	bl	8a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    88fc:	2196      	movs	r1, #150	; 0x96
    88fe:	4630      	mov	r0, r6
    8900:	f000 f894 	bl	8a2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8904:	4601      	mov	r1, r0
    8906:	b14f      	cbz	r7, 891c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    8908:	353b      	adds	r5, #59	; 0x3b
    890a:	428d      	cmp	r5, r1
    890c:	d904      	bls.n	8918 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    890e:	2000      	movs	r0, #0
    8910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8914:	2701      	movs	r7, #1
    8916:	e7ef      	b.n	88f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    8918:	2001      	movs	r0, #1
    891a:	71e0      	strb	r0, [r4, #7]
    891c:	7aa2      	ldrb	r2, [r4, #10]
    891e:	4630      	mov	r0, r6
    8920:	f7ff fccc 	bl	82bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8924:	b108      	cbz	r0, 892a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    8926:	2001      	movs	r0, #1
    8928:	e7f2      	b.n	8910 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    892a:	f640 21c4 	movw	r1, #2756	; 0xac4
    892e:	203e      	movs	r0, #62	; 0x3e
    8930:	f7f8 fd36 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8934:	20000fec 	.word	0x20000fec
    8938:	4803      	ldr	r0, [pc, #12]	; (8948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    893a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    893e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8942:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8946:	4770      	bx	lr
    8948:	40001000 	.word	0x40001000
    894c:	4804      	ldr	r0, [pc, #16]	; (8960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    894e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8950:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8954:	6281      	str	r1, [r0, #40]	; 0x28
    8956:	4903      	ldr	r1, [pc, #12]	; (8964 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    8958:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    895c:	6008      	str	r0, [r1, #0]
    895e:	4770      	bx	lr
    8960:	20000fec 	.word	0x20000fec
    8964:	4001f504 	.word	0x4001f504
    8968:	4a07      	ldr	r2, [pc, #28]	; (8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    896a:	2000      	movs	r0, #0
    896c:	3208      	adds	r2, #8
    896e:	4906      	ldr	r1, [pc, #24]	; (8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    8970:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8974:	1d0a      	adds	r2, r1, #4
    8976:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    897a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    897e:	4902      	ldr	r1, [pc, #8]	; (8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    8980:	310c      	adds	r1, #12
    8982:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8986:	4770      	bx	lr
    8988:	40008000 	.word	0x40008000
    898c:	4903      	ldr	r1, [pc, #12]	; (899c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    898e:	79c9      	ldrb	r1, [r1, #7]
    8990:	2900      	cmp	r1, #0
    8992:	d102      	bne.n	899a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    8994:	4902      	ldr	r1, [pc, #8]	; (89a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    8996:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    899a:	4770      	bx	lr
    899c:	20000fec 	.word	0x20000fec
    89a0:	4001f098 	.word	0x4001f098
    89a4:	b510      	push	{r4, lr}
    89a6:	4a14      	ldr	r2, [pc, #80]	; (89f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89a8:	b120      	cbz	r0, 89b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    89aa:	2801      	cmp	r0, #1
    89ac:	d011      	beq.n	89d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    89ae:	f240 7169 	movw	r1, #1897	; 0x769
    89b2:	e01c      	b.n	89ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    89b4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    89b8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    89bc:	490f      	ldr	r1, [pc, #60]	; (89fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    89be:	480e      	ldr	r0, [pc, #56]	; (89f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89c0:	f003 ff1a 	bl	c7f8 <mpsl_fem_pa_configuration_set>
    89c4:	2800      	cmp	r0, #0
    89c6:	d015      	beq.n	89f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89c8:	1c40      	adds	r0, r0, #1
    89ca:	d013      	beq.n	89f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89cc:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    89d0:	e00d      	b.n	89ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    89d2:	f101 0029 	add.w	r0, r1, #41	; 0x29
    89d6:	e9c2 1002 	strd	r1, r0, [r2, #8]
    89da:	4908      	ldr	r1, [pc, #32]	; (89fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    89dc:	4806      	ldr	r0, [pc, #24]	; (89f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89de:	f003 fef9 	bl	c7d4 <mpsl_fem_lna_configuration_set>
    89e2:	2800      	cmp	r0, #0
    89e4:	d006      	beq.n	89f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89e6:	1c40      	adds	r0, r0, #1
    89e8:	d004      	beq.n	89f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89ea:	f240 7165 	movw	r1, #1893	; 0x765
    89ee:	203e      	movs	r0, #62	; 0x3e
    89f0:	f7f8 fcd6 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89f4:	bd10      	pop	{r4, pc}
    89f6:	0000      	.short	0x0000
    89f8:	200002c4 	.word	0x200002c4
    89fc:	00008b28 	.word	0x00008b28
    8a00:	4802      	ldr	r0, [pc, #8]	; (8a0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8a02:	2100      	movs	r1, #0
    8a04:	71c1      	strb	r1, [r0, #7]
    8a06:	7201      	strb	r1, [r0, #8]
    8a08:	7241      	strb	r1, [r0, #9]
    8a0a:	4770      	bx	lr
    8a0c:	20000fec 	.word	0x20000fec
    8a10:	4a05      	ldr	r2, [pc, #20]	; (8a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8a12:	79d2      	ldrb	r2, [r2, #7]
    8a14:	2a01      	cmp	r2, #1
    8a16:	d006      	beq.n	8a26 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    8a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a1c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8a20:	fbb1 f1f2 	udiv	r1, r1, r2
    8a24:	1a40      	subs	r0, r0, r1
    8a26:	4770      	bx	lr
    8a28:	20000fec 	.word	0x20000fec
    8a2c:	b570      	push	{r4, r5, r6, lr}
    8a2e:	4c13      	ldr	r4, [pc, #76]	; (8a7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    8a30:	4603      	mov	r3, r0
    8a32:	460d      	mov	r5, r1
    8a34:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8a38:	2000      	movs	r0, #0
    8a3a:	b15a      	cbz	r2, 8a54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    8a3c:	4621      	mov	r1, r4
    8a3e:	f891 1020 	ldrb.w	r1, [r1, #32]
    8a42:	b163      	cbz	r3, 8a5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    8a44:	2b01      	cmp	r3, #1
    8a46:	d111      	bne.n	8a6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    8a48:	2a01      	cmp	r2, #1
    8a4a:	4628      	mov	r0, r5
    8a4c:	d012      	beq.n	8a74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    8a4e:	f007 ffde 	bl	10a0e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8a52:	e009      	b.n	8a68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8a54:	f640 016e 	movw	r1, #2158	; 0x86e
    8a58:	203e      	movs	r0, #62	; 0x3e
    8a5a:	f7f8 fca1 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a5e:	2a01      	cmp	r2, #1
    8a60:	4628      	mov	r0, r5
    8a62:	d004      	beq.n	8a6e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    8a64:	f007 ffe1 	bl	10a2a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8a68:	69e1      	ldr	r1, [r4, #28]
    8a6a:	4408      	add	r0, r1
    8a6c:	bd70      	pop	{r4, r5, r6, pc}
    8a6e:	f000 f8d1 	bl	8c14 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8a72:	e7f9      	b.n	8a68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8a74:	f000 f8c0 	bl	8bf8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8a78:	e7f6      	b.n	8a68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8a7a:	0000      	.short	0x0000
    8a7c:	20000fec 	.word	0x20000fec
    8a80:	b510      	push	{r4, lr}
    8a82:	f7ff fbef 	bl	8264 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8a86:	f7ff fde7 	bl	8658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8a8a:	f7ff fe1d 	bl	86c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8a8e:	f7ff ff53 	bl	8938 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8a92:	f008 f91e 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8a96:	2800      	cmp	r0, #0
    8a98:	d108      	bne.n	8aac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8a9a:	f008 f90a 	bl	10cb2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8a9e:	2800      	cmp	r0, #0
    8aa0:	d104      	bne.n	8aac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8aa2:	4803      	ldr	r0, [pc, #12]	; (8ab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8aa4:	6801      	ldr	r1, [r0, #0]
    8aa6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8aaa:	6001      	str	r1, [r0, #0]
    8aac:	bd10      	pop	{r4, pc}
    8aae:	0000      	.short	0x0000
    8ab0:	40001568 	.word	0x40001568
    8ab4:	b510      	push	{r4, lr}
    8ab6:	4604      	mov	r4, r0
    8ab8:	f7ff fbd4 	bl	8264 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8abc:	f7ff fdcc 	bl	8658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8ac0:	4620      	mov	r0, r4
    8ac2:	f7ff fde7 	bl	8694 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8ac6:	f008 f904 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8aca:	2800      	cmp	r0, #0
    8acc:	d00d      	beq.n	8aea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8ace:	4a09      	ldr	r2, [pc, #36]	; (8af4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8ad0:	6811      	ldr	r1, [r2, #0]
    8ad2:	0650      	lsls	r0, r2, #25
    8ad4:	2c02      	cmp	r4, #2
    8ad6:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8ada:	d007      	beq.n	8aec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8adc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8ae0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8ae4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8ae8:	6010      	str	r0, [r2, #0]
    8aea:	bd10      	pop	{r4, pc}
    8aec:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8af0:	e7f6      	b.n	8ae0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8af2:	0000      	.short	0x0000
    8af4:	40001588 	.word	0x40001588
    8af8:	a62c0000 	.word	0xa62c0000
    8afc:	0604a1e0 	.word	0x0604a1e0
    8b00:	0e0c0a08 	.word	0x0e0c0a08
    8b04:	16141210 	.word	0x16141210
    8b08:	201e1c18 	.word	0x201e1c18
    8b0c:	28262422 	.word	0x28262422
    8b10:	302e2c2a 	.word	0x302e2c2a
    8b14:	38363432 	.word	0x38363432
    8b18:	403e3c3a 	.word	0x403e3c3a
    8b1c:	48464442 	.word	0x48464442
    8b20:	024e4c4a 	.word	0x024e4c4a
    8b24:	0000501a 	.word	0x0000501a
    8b28:	00000001 	.word	0x00000001
    8b2c:	40001110 	.word	0x40001110
	...
    8b44:	00001e14 	.word	0x00001e14
    8b48:	00001130 	.word	0x00001130
    8b4c:	00000000 	.word	0x00000000
    8b50:	00000028 	.word	0x00000028
    8b54:	00000018 	.word	0x00000018
    8b58:	00000000 	.word	0x00000000
    8b5c:	00001e14 	.word	0x00001e14
    8b60:	00001130 	.word	0x00001130
    8b64:	00000000 	.word	0x00000000
    8b68:	00001770 	.word	0x00001770
    8b6c:	00000fa0 	.word	0x00000fa0

00008b70 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8b70:	b570      	push	{r4, r5, r6, lr}
    8b72:	4605      	mov	r5, r0
    8b74:	4614      	mov	r4, r2
    8b76:	4608      	mov	r0, r1
    8b78:	f7ff fb9a 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8b7c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8b80:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8b84:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8b88:	4807      	ldr	r0, [pc, #28]	; (8ba8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8b8a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8b8e:	4408      	add	r0, r1
    8b90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8b94:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8b98:	fbb0 f5f1 	udiv	r5, r0, r1
    8b9c:	4620      	mov	r0, r4
    8b9e:	f7ff fb5b 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8ba2:	4428      	add	r0, r5
    8ba4:	1d40      	adds	r0, r0, #5
    8ba6:	bd70      	pop	{r4, r5, r6, pc}
    8ba8:	00008c38 	.word	0x00008c38

00008bac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8bac:	b570      	push	{r4, r5, r6, lr}
    8bae:	4d0e      	ldr	r5, [pc, #56]	; (8be8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8bb0:	461c      	mov	r4, r3
    8bb2:	3d08      	subs	r5, #8
    8bb4:	4b0c      	ldr	r3, [pc, #48]	; (8be8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8bb6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8bba:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bc2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8bc6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8bca:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8bce:	4418      	add	r0, r3
    8bd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8bd4:	fbb0 f5f1 	udiv	r5, r0, r1
    8bd8:	4610      	mov	r0, r2
    8bda:	f7ff fb3d 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8bde:	4428      	add	r0, r5
    8be0:	4420      	add	r0, r4
    8be2:	1d40      	adds	r0, r0, #5
    8be4:	bd70      	pop	{r4, r5, r6, pc}
    8be6:	0000      	.short	0x0000
    8be8:	00008c38 	.word	0x00008c38

00008bec <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8bec:	4901      	ldr	r1, [pc, #4]	; (8bf4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8bee:	b2c0      	uxtb	r0, r0
    8bf0:	6008      	str	r0, [r1, #0]
    8bf2:	4770      	bx	lr
    8bf4:	4000150c 	.word	0x4000150c

00008bf8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8bf8:	4a05      	ldr	r2, [pc, #20]	; (8c10 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8bfa:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8bfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c02:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8c06:	fbb1 f1f2 	udiv	r1, r1, r2
    8c0a:	4408      	add	r0, r1
    8c0c:	1e80      	subs	r0, r0, #2
    8c0e:	4770      	bx	lr
    8c10:	00008c30 	.word	0x00008c30

00008c14 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8c14:	4a05      	ldr	r2, [pc, #20]	; (8c2c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8c16:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c1e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8c22:	fbb1 f1f2 	udiv	r1, r1, r2
    8c26:	4408      	add	r0, r1
    8c28:	4770      	bx	lr
    8c2a:	0000      	.short	0x0000
    8c2c:	00008c30 	.word	0x00008c30
    8c30:	05dc0000 	.word	0x05dc0000
    8c34:	000003e8 	.word	0x000003e8
    8c38:	00000000 	.word	0x00000000
    8c3c:	00001e14 	.word	0x00001e14
    8c40:	00001130 	.word	0x00001130

00008c44 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c48:	461e      	mov	r6, r3
    8c4a:	4617      	mov	r7, r2
    8c4c:	460c      	mov	r4, r1
    8c4e:	4605      	mov	r5, r0
    8c50:	f000 f856 	bl	8d00 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8c54:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8cfc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8c58:	4680      	mov	r8, r0
    8c5a:	f899 0000 	ldrb.w	r0, [r9]
    8c5e:	42a8      	cmp	r0, r5
    8c60:	d110      	bne.n	8c84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c62:	f899 1001 	ldrb.w	r1, [r9, #1]
    8c66:	4648      	mov	r0, r9
    8c68:	42a1      	cmp	r1, r4
    8c6a:	d10b      	bne.n	8c84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c6c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8c70:	42b9      	cmp	r1, r7
    8c72:	d107      	bne.n	8c84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c74:	78c2      	ldrb	r2, [r0, #3]
    8c76:	4542      	cmp	r2, r8
    8c78:	d104      	bne.n	8c84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c7a:	8881      	ldrh	r1, [r0, #4]
    8c7c:	8031      	strh	r1, [r6, #0]
    8c7e:	7980      	ldrb	r0, [r0, #6]
    8c80:	70b0      	strb	r0, [r6, #2]
    8c82:	e037      	b.n	8cf4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8c84:	463a      	mov	r2, r7
    8c86:	4621      	mov	r1, r4
    8c88:	2d01      	cmp	r5, #1
    8c8a:	d009      	beq.n	8ca0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8c8c:	2d02      	cmp	r5, #2
    8c8e:	d009      	beq.n	8ca4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8c90:	2d04      	cmp	r5, #4
    8c92:	d009      	beq.n	8ca8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8c94:	2d08      	cmp	r5, #8
    8c96:	d009      	beq.n	8cac <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8c98:	f240 4162 	movw	r1, #1122	; 0x462
    8c9c:	2006      	movs	r0, #6
    8c9e:	e00c      	b.n	8cba <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8ca0:	2000      	movs	r0, #0
    8ca2:	e004      	b.n	8cae <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8ca4:	2001      	movs	r0, #1
    8ca6:	e002      	b.n	8cae <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8ca8:	2003      	movs	r0, #3
    8caa:	e000      	b.n	8cae <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cac:	2002      	movs	r0, #2
    8cae:	466b      	mov	r3, sp
    8cb0:	f000 f89e 	bl	8df0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8cb4:	b118      	cbz	r0, 8cbe <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8cb6:	213d      	movs	r1, #61	; 0x3d
    8cb8:	2075      	movs	r0, #117	; 0x75
    8cba:	f7f8 fb71 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cbe:	4620      	mov	r0, r4
    8cc0:	f7ff f872 	bl	7da8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8cc4:	4602      	mov	r2, r0
    8cc6:	2300      	movs	r3, #0
    8cc8:	4631      	mov	r1, r6
    8cca:	f99d 0000 	ldrsb.w	r0, [sp]
    8cce:	f003 fda5 	bl	c81c <mpsl_fem_tx_power_split>
    8cd2:	4601      	mov	r1, r0
    8cd4:	f889 1007 	strb.w	r1, [r9, #7]
    8cd8:	8831      	ldrh	r1, [r6, #0]
    8cda:	f8a9 1004 	strh.w	r1, [r9, #4]
    8cde:	78b1      	ldrb	r1, [r6, #2]
    8ce0:	f889 1006 	strb.w	r1, [r9, #6]
    8ce4:	f889 5000 	strb.w	r5, [r9]
    8ce8:	f889 4001 	strb.w	r4, [r9, #1]
    8cec:	f889 7002 	strb.w	r7, [r9, #2]
    8cf0:	f889 8003 	strb.w	r8, [r9, #3]
    8cf4:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8cfc:	20000378 	.word	0x20000378

00008d00 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8d00:	4801      	ldr	r0, [pc, #4]	; (8d08 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8d02:	7800      	ldrb	r0, [r0, #0]
    8d04:	4770      	bx	lr
    8d06:	0000      	.short	0x0000
    8d08:	200002dc 	.word	0x200002dc

00008d0c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8d0c:	b570      	push	{r4, r5, r6, lr}
    8d0e:	4c17      	ldr	r4, [pc, #92]	; (8d6c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8d10:	7860      	ldrb	r0, [r4, #1]
    8d12:	2800      	cmp	r0, #0
    8d14:	d123      	bne.n	8d5e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8d16:	2001      	movs	r0, #1
    8d18:	7060      	strb	r0, [r4, #1]
    8d1a:	f007 ffb4 	bl	10c86 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8d1e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8d22:	b928      	cbnz	r0, 8d30 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d24:	f007 ffe5 	bl	10cf2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8d28:	b910      	cbnz	r0, 8d30 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d2a:	f007 ffec 	bl	10d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8d2e:	b120      	cbz	r0, 8d3a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8d30:	480f      	ldr	r0, [pc, #60]	; (8d70 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d32:	6060      	str	r0, [r4, #4]
    8d34:	70a5      	strb	r5, [r4, #2]
    8d36:	2008      	movs	r0, #8
    8d38:	e010      	b.n	8d5c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8d3a:	f007 ff79 	bl	10c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8d3e:	b940      	cbnz	r0, 8d52 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d40:	f007 ff80 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8d44:	b928      	cbnz	r0, 8d52 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d46:	f007 ff94 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8d4a:	b910      	cbnz	r0, 8d52 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d4c:	f007 ffa5 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8d50:	b130      	cbz	r0, 8d60 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8d52:	4807      	ldr	r0, [pc, #28]	; (8d70 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d54:	3031      	adds	r0, #49	; 0x31
    8d56:	6060      	str	r0, [r4, #4]
    8d58:	70a5      	strb	r5, [r4, #2]
    8d5a:	2004      	movs	r0, #4
    8d5c:	70e0      	strb	r0, [r4, #3]
    8d5e:	bd70      	pop	{r4, r5, r6, pc}
    8d60:	f240 113f 	movw	r1, #319	; 0x13f
    8d64:	2074      	movs	r0, #116	; 0x74
    8d66:	f003 fb99 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d6a:	0000      	.short	0x0000
    8d6c:	200002dc 	.word	0x200002dc
    8d70:	00011027 	.word	0x00011027

00008d74 <mpsl_tx_power_radio_supported_power_adjust>:
    8d74:	4a06      	ldr	r2, [pc, #24]	; (8d90 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8d76:	b500      	push	{lr}
    8d78:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8d7c:	4290      	cmp	r0, r2
    8d7e:	db01      	blt.n	8d84 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8d80:	4610      	mov	r0, r2
    8d82:	bd00      	pop	{pc}
    8d84:	f000 f808 	bl	8d98 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8d88:	4902      	ldr	r1, [pc, #8]	; (8d94 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8d8a:	5608      	ldrsb	r0, [r1, r0]
    8d8c:	bd00      	pop	{pc}
    8d8e:	0000      	.short	0x0000
    8d90:	200002dc 	.word	0x200002dc
    8d94:	00011019 	.word	0x00011019

00008d98 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8d98:	4602      	mov	r2, r0
    8d9a:	4813      	ldr	r0, [pc, #76]	; (8de8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8d9c:	b510      	push	{r4, lr}
    8d9e:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8da2:	429a      	cmp	r2, r3
    8da4:	db01      	blt.n	8daa <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8da6:	200d      	movs	r0, #13
    8da8:	bd10      	pop	{r4, pc}
    8daa:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8dae:	429a      	cmp	r2, r3
    8db0:	dc01      	bgt.n	8db6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8db2:	2000      	movs	r0, #0
    8db4:	bd10      	pop	{r4, pc}
    8db6:	b101      	cbz	r1, 8dba <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8db8:	2101      	movs	r1, #1
    8dba:	1ad4      	subs	r4, r2, r3
    8dbc:	6843      	ldr	r3, [r0, #4]
    8dbe:	5d18      	ldrb	r0, [r3, r4]
    8dc0:	4c0a      	ldr	r4, [pc, #40]	; (8dec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8dc2:	5624      	ldrsb	r4, [r4, r0]
    8dc4:	4294      	cmp	r4, r2
    8dc6:	d0f5      	beq.n	8db4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8dc8:	4c08      	ldr	r4, [pc, #32]	; (8dec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8dca:	4408      	add	r0, r1
    8dcc:	343f      	adds	r4, #63	; 0x3f
    8dce:	b2c0      	uxtb	r0, r0
    8dd0:	b2d2      	uxtb	r2, r2
    8dd2:	42a3      	cmp	r3, r4
    8dd4:	d1ee      	bne.n	8db4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8dd6:	2900      	cmp	r1, #0
    8dd8:	d0ec      	beq.n	8db4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8dda:	2a01      	cmp	r2, #1
    8ddc:	d001      	beq.n	8de2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8dde:	2a02      	cmp	r2, #2
    8de0:	d1e8      	bne.n	8db4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8de2:	1c40      	adds	r0, r0, #1
    8de4:	b2c0      	uxtb	r0, r0
    8de6:	bd10      	pop	{r4, pc}
    8de8:	200002dc 	.word	0x200002dc
    8dec:	00011019 	.word	0x00011019

00008df0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8df4:	461c      	mov	r4, r3
    8df6:	4690      	mov	r8, r2
    8df8:	460d      	mov	r5, r1
    8dfa:	4606      	mov	r6, r0
    8dfc:	f06f 0715 	mvn.w	r7, #21
    8e00:	2804      	cmp	r0, #4
    8e02:	d804      	bhi.n	8e0e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e04:	b11c      	cbz	r4, 8e0e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e06:	f007 fe1b 	bl	10a40 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8e0a:	42a8      	cmp	r0, r5
    8e0c:	d802      	bhi.n	8e14 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8e0e:	4638      	mov	r0, r7
    8e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e14:	4805      	ldr	r0, [pc, #20]	; (8e2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8e16:	4642      	mov	r2, r8
    8e18:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8e1c:	b118      	cbz	r0, 8e26 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e1e:	5740      	ldrsb	r0, [r0, r5]
    8e20:	4282      	cmp	r2, r0
    8e22:	dd00      	ble.n	8e26 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e24:	4602      	mov	r2, r0
    8e26:	7022      	strb	r2, [r4, #0]
    8e28:	2000      	movs	r0, #0
    8e2a:	e7f1      	b.n	8e10 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8e2c:	20001024 	.word	0x20001024

00008e30 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8e30:	4801      	ldr	r0, [pc, #4]	; (8e38 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8e32:	7800      	ldrb	r0, [r0, #0]
    8e34:	4770      	bx	lr
    8e36:	0000      	.short	0x0000
    8e38:	200002e4 	.word	0x200002e4

00008e3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8e3c:	4905      	ldr	r1, [pc, #20]	; (8e54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8e3e:	780a      	ldrb	r2, [r1, #0]
    8e40:	4290      	cmp	r0, r2
    8e42:	d301      	bcc.n	8e48 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8e44:	2000      	movs	r0, #0
    8e46:	4770      	bx	lr
    8e48:	6849      	ldr	r1, [r1, #4]
    8e4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8e4e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8e52:	4770      	bx	lr
    8e54:	200002e4 	.word	0x200002e4

00008e58 <MPSL_IRQ_RADIO_Handler>:
    8e58:	490e      	ldr	r1, [pc, #56]	; (8e94 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8e5a:	b510      	push	{r4, lr}
    8e5c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8e60:	2820      	cmp	r0, #32
    8e62:	d012      	beq.n	8e8a <MPSL_IRQ_RADIO_Handler+0x32>
    8e64:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8e68:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8e6c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8e70:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8e74:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8e78:	6840      	ldr	r0, [r0, #4]
    8e7a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8e7e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e86:	2104      	movs	r1, #4
    8e88:	4710      	bx	r2
    8e8a:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8e8e:	2070      	movs	r0, #112	; 0x70
    8e90:	f003 fb04 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e94:	20001438 	.word	0x20001438
    8e98:	b570      	push	{r4, r5, r6, lr}
    8e9a:	4605      	mov	r5, r0
    8e9c:	2a20      	cmp	r2, #32
    8e9e:	d028      	beq.n	8ef2 <MPSL_IRQ_RADIO_Handler+0x9a>
    8ea0:	4819      	ldr	r0, [pc, #100]	; (8f08 <MPSL_IRQ_RADIO_Handler+0xb0>)
    8ea2:	4c1a      	ldr	r4, [pc, #104]	; (8f0c <MPSL_IRQ_RADIO_Handler+0xb4>)
    8ea4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8ea8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8eac:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8eb0:	4423      	add	r3, r4
    8eb2:	2920      	cmp	r1, #32
    8eb4:	d022      	beq.n	8efc <MPSL_IRQ_RADIO_Handler+0xa4>
    8eb6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8eba:	7840      	ldrb	r0, [r0, #1]
    8ebc:	784c      	ldrb	r4, [r1, #1]
    8ebe:	7048      	strb	r0, [r1, #1]
    8ec0:	4620      	mov	r0, r4
    8ec2:	4601      	mov	r1, r0
    8ec4:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8ec8:	4291      	cmp	r1, r2
    8eca:	7005      	strb	r5, [r0, #0]
    8ecc:	7840      	ldrb	r0, [r0, #1]
    8ece:	d1f8      	bne.n	8ec2 <MPSL_IRQ_RADIO_Handler+0x6a>
    8ed0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8ed4:	2a20      	cmp	r2, #32
    8ed6:	bf1a      	itte	ne
    8ed8:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8edc:	7054      	strbne	r4, [r2, #1]
    8ede:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8ee2:	2220      	movs	r2, #32
    8ee4:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8ee8:	f88c 2001 	strb.w	r2, [ip, #1]
    8eec:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8ef0:	bd70      	pop	{r4, r5, r6, pc}
    8ef2:	f44f 7126 	mov.w	r1, #664	; 0x298
    8ef6:	2070      	movs	r0, #112	; 0x70
    8ef8:	f003 fad0 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8efc:	f893 4020 	ldrb.w	r4, [r3, #32]
    8f00:	7840      	ldrb	r0, [r0, #1]
    8f02:	f883 0020 	strb.w	r0, [r3, #32]
    8f06:	e7db      	b.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x68>
    8f08:	200013b8 	.word	0x200013b8
    8f0c:	20001438 	.word	0x20001438
    8f10:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f14:	b08d      	sub	sp, #52	; 0x34
    8f16:	4615      	mov	r5, r2
    8f18:	460c      	mov	r4, r1
    8f1a:	f002 f9e9 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8f1e:	4428      	add	r0, r5
    8f20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8f24:	9008      	str	r0, [sp, #32]
    8f26:	6821      	ldr	r1, [r4, #0]
    8f28:	1a08      	subs	r0, r1, r0
    8f2a:	0200      	lsls	r0, r0, #8
    8f2c:	17c1      	asrs	r1, r0, #31
    8f2e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8f32:	1200      	asrs	r0, r0, #8
    8f34:	2800      	cmp	r0, #0
    8f36:	f300 80f0 	bgt.w	911a <MPSL_IRQ_RADIO_Handler+0x2c2>
    8f3a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8f3e:	48cd      	ldr	r0, [pc, #820]	; (9274 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8f40:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8f44:	4408      	add	r0, r1
    8f46:	9009      	str	r0, [sp, #36]	; 0x24
    8f48:	f890 5020 	ldrb.w	r5, [r0, #32]
    8f4c:	2020      	movs	r0, #32
    8f4e:	4eca      	ldr	r6, [pc, #808]	; (9278 <MPSL_IRQ_RADIO_Handler+0x420>)
    8f50:	f10d 0a18 	add.w	sl, sp, #24
    8f54:	f10d 091c 	add.w	r9, sp, #28
    8f58:	f88d 0018 	strb.w	r0, [sp, #24]
    8f5c:	2d20      	cmp	r5, #32
    8f5e:	bf1c      	itt	ne
    8f60:	48c6      	ldrne	r0, [pc, #792]	; (927c <MPSL_IRQ_RADIO_Handler+0x424>)
    8f62:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8f66:	d038      	beq.n	8fda <MPSL_IRQ_RADIO_Handler+0x182>
    8f68:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8f6c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8f70:	f100 0108 	add.w	r1, r0, #8
    8f74:	68c0      	ldr	r0, [r0, #12]
    8f76:	6827      	ldr	r7, [r4, #0]
    8f78:	1a38      	subs	r0, r7, r0
    8f7a:	0200      	lsls	r0, r0, #8
    8f7c:	17c2      	asrs	r2, r0, #31
    8f7e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f82:	1200      	asrs	r0, r0, #8
    8f84:	d429      	bmi.n	8fda <MPSL_IRQ_RADIO_Handler+0x182>
    8f86:	89e0      	ldrh	r0, [r4, #14]
    8f88:	b300      	cbz	r0, 8fcc <MPSL_IRQ_RADIO_Handler+0x174>
    8f8a:	89c8      	ldrh	r0, [r1, #14]
    8f8c:	b9f0      	cbnz	r0, 8fcc <MPSL_IRQ_RADIO_Handler+0x174>
    8f8e:	6808      	ldr	r0, [r1, #0]
    8f90:	9003      	str	r0, [sp, #12]
    8f92:	f003 f8c5 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f96:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f9a:	bf08      	it	eq
    8f9c:	200d      	moveq	r0, #13
    8f9e:	d00b      	beq.n	8fb8 <MPSL_IRQ_RADIO_Handler+0x160>
    8fa0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8fa4:	3856      	subs	r0, #86	; 0x56
    8fa6:	bf08      	it	eq
    8fa8:	201c      	moveq	r0, #28
    8faa:	d005      	beq.n	8fb8 <MPSL_IRQ_RADIO_Handler+0x160>
    8fac:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8fb0:	389f      	subs	r0, #159	; 0x9f
    8fb2:	bf14      	ite	ne
    8fb4:	2000      	movne	r0, #0
    8fb6:	2032      	moveq	r0, #50	; 0x32
    8fb8:	1c41      	adds	r1, r0, #1
    8fba:	9803      	ldr	r0, [sp, #12]
    8fbc:	1a38      	subs	r0, r7, r0
    8fbe:	0200      	lsls	r0, r0, #8
    8fc0:	17c2      	asrs	r2, r0, #31
    8fc2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8fc6:	1200      	asrs	r0, r0, #8
    8fc8:	4288      	cmp	r0, r1
    8fca:	db06      	blt.n	8fda <MPSL_IRQ_RADIO_Handler+0x182>
    8fcc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8fd0:	f88a 5000 	strb.w	r5, [sl]
    8fd4:	7845      	ldrb	r5, [r0, #1]
    8fd6:	2d20      	cmp	r5, #32
    8fd8:	d1c6      	bne.n	8f68 <MPSL_IRQ_RADIO_Handler+0x110>
    8fda:	f89a 0000 	ldrb.w	r0, [sl]
    8fde:	f889 0000 	strb.w	r0, [r9]
    8fe2:	2d20      	cmp	r5, #32
    8fe4:	bf1c      	itt	ne
    8fe6:	48a5      	ldrne	r0, [pc, #660]	; (927c <MPSL_IRQ_RADIO_Handler+0x424>)
    8fe8:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8fec:	f000 813e 	beq.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    8ff0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8ff4:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8ff8:	6861      	ldr	r1, [r4, #4]
    8ffa:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8ffe:	f107 0008 	add.w	r0, r7, #8
    9002:	eba8 0101 	sub.w	r1, r8, r1
    9006:	0209      	lsls	r1, r1, #8
    9008:	17ca      	asrs	r2, r1, #31
    900a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    900e:	1209      	asrs	r1, r1, #8
    9010:	d427      	bmi.n	9062 <MPSL_IRQ_RADIO_Handler+0x20a>
    9012:	89c0      	ldrh	r0, [r0, #14]
    9014:	2800      	cmp	r0, #0
    9016:	f000 8129 	beq.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    901a:	89e0      	ldrh	r0, [r4, #14]
    901c:	2800      	cmp	r0, #0
    901e:	f040 8125 	bne.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    9022:	f8d4 a000 	ldr.w	sl, [r4]
    9026:	f003 f87b 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    902a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    902e:	bf08      	it	eq
    9030:	200d      	moveq	r0, #13
    9032:	d00b      	beq.n	904c <MPSL_IRQ_RADIO_Handler+0x1f4>
    9034:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9038:	3856      	subs	r0, #86	; 0x56
    903a:	bf08      	it	eq
    903c:	201c      	moveq	r0, #28
    903e:	d005      	beq.n	904c <MPSL_IRQ_RADIO_Handler+0x1f4>
    9040:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9044:	389f      	subs	r0, #159	; 0x9f
    9046:	bf14      	ite	ne
    9048:	2000      	movne	r0, #0
    904a:	2032      	moveq	r0, #50	; 0x32
    904c:	1c41      	adds	r1, r0, #1
    904e:	eba8 000a 	sub.w	r0, r8, sl
    9052:	0200      	lsls	r0, r0, #8
    9054:	17c2      	asrs	r2, r0, #31
    9056:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    905a:	1200      	asrs	r0, r0, #8
    905c:	4288      	cmp	r0, r1
    905e:	f280 8105 	bge.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    9062:	f889 5000 	strb.w	r5, [r9]
    9066:	7e38      	ldrb	r0, [r7, #24]
    9068:	7c21      	ldrb	r1, [r4, #16]
    906a:	4288      	cmp	r0, r1
    906c:	d906      	bls.n	907c <MPSL_IRQ_RADIO_Handler+0x224>
    906e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9072:	7845      	ldrb	r5, [r0, #1]
    9074:	2d20      	cmp	r5, #32
    9076:	d1bb      	bne.n	8ff0 <MPSL_IRQ_RADIO_Handler+0x198>
    9078:	f000 b8f8 	b.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    907c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    9080:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9084:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9088:	8ac1      	ldrh	r1, [r0, #22]
    908a:	68c5      	ldr	r5, [r0, #12]
    908c:	bbe1      	cbnz	r1, 9108 <MPSL_IRQ_RADIO_Handler+0x2b0>
    908e:	89e1      	ldrh	r1, [r4, #14]
    9090:	b3d1      	cbz	r1, 9108 <MPSL_IRQ_RADIO_Handler+0x2b0>
    9092:	6887      	ldr	r7, [r0, #8]
    9094:	f003 f844 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9098:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    909c:	bf08      	it	eq
    909e:	200d      	moveq	r0, #13
    90a0:	d00b      	beq.n	90ba <MPSL_IRQ_RADIO_Handler+0x262>
    90a2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90a6:	3856      	subs	r0, #86	; 0x56
    90a8:	bf08      	it	eq
    90aa:	201c      	moveq	r0, #28
    90ac:	d005      	beq.n	90ba <MPSL_IRQ_RADIO_Handler+0x262>
    90ae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90b2:	389f      	subs	r0, #159	; 0x9f
    90b4:	bf14      	ite	ne
    90b6:	2000      	movne	r0, #0
    90b8:	2032      	moveq	r0, #50	; 0x32
    90ba:	1c41      	adds	r1, r0, #1
    90bc:	1be8      	subs	r0, r5, r7
    90be:	0200      	lsls	r0, r0, #8
    90c0:	17c2      	asrs	r2, r0, #31
    90c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90c6:	1200      	asrs	r0, r0, #8
    90c8:	4288      	cmp	r0, r1
    90ca:	da1d      	bge.n	9108 <MPSL_IRQ_RADIO_Handler+0x2b0>
    90cc:	f003 f828 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90d0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90d4:	bf08      	it	eq
    90d6:	200d      	moveq	r0, #13
    90d8:	d00b      	beq.n	90f2 <MPSL_IRQ_RADIO_Handler+0x29a>
    90da:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90de:	3856      	subs	r0, #86	; 0x56
    90e0:	bf08      	it	eq
    90e2:	201c      	moveq	r0, #28
    90e4:	d005      	beq.n	90f2 <MPSL_IRQ_RADIO_Handler+0x29a>
    90e6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90ea:	389f      	subs	r0, #159	; 0x9f
    90ec:	bf14      	ite	ne
    90ee:	2000      	movne	r0, #0
    90f0:	2032      	moveq	r0, #50	; 0x32
    90f2:	f89d 101c 	ldrb.w	r1, [sp, #28]
    90f6:	1c40      	adds	r0, r0, #1
    90f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    90fc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9100:	6889      	ldr	r1, [r1, #8]
    9102:	4408      	add	r0, r1
    9104:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    9108:	9808      	ldr	r0, [sp, #32]
    910a:	1a28      	subs	r0, r5, r0
    910c:	0200      	lsls	r0, r0, #8
    910e:	17c1      	asrs	r1, r0, #31
    9110:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9114:	1200      	asrs	r0, r0, #8
    9116:	2800      	cmp	r0, #0
    9118:	dd03      	ble.n	9122 <MPSL_IRQ_RADIO_Handler+0x2ca>
    911a:	b011      	add	sp, #68	; 0x44
    911c:	2000      	movs	r0, #0
    911e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9122:	6820      	ldr	r0, [r4, #0]
    9124:	42a8      	cmp	r0, r5
    9126:	d902      	bls.n	912e <MPSL_IRQ_RADIO_Handler+0x2d6>
    9128:	68a1      	ldr	r1, [r4, #8]
    912a:	1c49      	adds	r1, r1, #1
    912c:	60a1      	str	r1, [r4, #8]
    912e:	6861      	ldr	r1, [r4, #4]
    9130:	f10d 0a18 	add.w	sl, sp, #24
    9134:	1a08      	subs	r0, r1, r0
    9136:	4428      	add	r0, r5
    9138:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    913c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9140:	e9c4 1000 	strd	r1, r0, [r4]
    9144:	9810      	ldr	r0, [sp, #64]	; 0x40
    9146:	900b      	str	r0, [sp, #44]	; 0x2c
    9148:	9809      	ldr	r0, [sp, #36]	; 0x24
    914a:	f10d 081c 	add.w	r8, sp, #28
    914e:	f890 5020 	ldrb.w	r5, [r0, #32]
    9152:	2020      	movs	r0, #32
    9154:	f88d 0018 	strb.w	r0, [sp, #24]
    9158:	2d20      	cmp	r5, #32
    915a:	d03c      	beq.n	91d6 <MPSL_IRQ_RADIO_Handler+0x37e>
    915c:	4947      	ldr	r1, [pc, #284]	; (927c <MPSL_IRQ_RADIO_Handler+0x424>)
    915e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9160:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    9164:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9168:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    916c:	f100 0108 	add.w	r1, r0, #8
    9170:	68c0      	ldr	r0, [r0, #12]
    9172:	6827      	ldr	r7, [r4, #0]
    9174:	1a38      	subs	r0, r7, r0
    9176:	0200      	lsls	r0, r0, #8
    9178:	17c2      	asrs	r2, r0, #31
    917a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    917e:	1200      	asrs	r0, r0, #8
    9180:	d429      	bmi.n	91d6 <MPSL_IRQ_RADIO_Handler+0x37e>
    9182:	89e0      	ldrh	r0, [r4, #14]
    9184:	b300      	cbz	r0, 91c8 <MPSL_IRQ_RADIO_Handler+0x370>
    9186:	89c8      	ldrh	r0, [r1, #14]
    9188:	b9f0      	cbnz	r0, 91c8 <MPSL_IRQ_RADIO_Handler+0x370>
    918a:	f8d1 9000 	ldr.w	r9, [r1]
    918e:	f002 ffc7 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9192:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9196:	bf08      	it	eq
    9198:	200d      	moveq	r0, #13
    919a:	d00b      	beq.n	91b4 <MPSL_IRQ_RADIO_Handler+0x35c>
    919c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91a0:	3856      	subs	r0, #86	; 0x56
    91a2:	bf08      	it	eq
    91a4:	201c      	moveq	r0, #28
    91a6:	d005      	beq.n	91b4 <MPSL_IRQ_RADIO_Handler+0x35c>
    91a8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91ac:	389f      	subs	r0, #159	; 0x9f
    91ae:	bf14      	ite	ne
    91b0:	2000      	movne	r0, #0
    91b2:	2032      	moveq	r0, #50	; 0x32
    91b4:	1c41      	adds	r1, r0, #1
    91b6:	eba7 0009 	sub.w	r0, r7, r9
    91ba:	0200      	lsls	r0, r0, #8
    91bc:	17c2      	asrs	r2, r0, #31
    91be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91c2:	1200      	asrs	r0, r0, #8
    91c4:	4288      	cmp	r0, r1
    91c6:	db06      	blt.n	91d6 <MPSL_IRQ_RADIO_Handler+0x37e>
    91c8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    91cc:	f88a 5000 	strb.w	r5, [sl]
    91d0:	7845      	ldrb	r5, [r0, #1]
    91d2:	2d20      	cmp	r5, #32
    91d4:	d1c6      	bne.n	9164 <MPSL_IRQ_RADIO_Handler+0x30c>
    91d6:	f89a 0000 	ldrb.w	r0, [sl]
    91da:	f888 0000 	strb.w	r0, [r8]
    91de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    91e0:	2d20      	cmp	r5, #32
    91e2:	bf1c      	itt	ne
    91e4:	4925      	ldrne	r1, [pc, #148]	; (927c <MPSL_IRQ_RADIO_Handler+0x424>)
    91e6:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    91ea:	d03f      	beq.n	926c <MPSL_IRQ_RADIO_Handler+0x414>
    91ec:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    91f0:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    91f4:	6860      	ldr	r0, [r4, #4]
    91f6:	f8d7 9008 	ldr.w	r9, [r7, #8]
    91fa:	f107 0108 	add.w	r1, r7, #8
    91fe:	eba9 0000 	sub.w	r0, r9, r0
    9202:	0200      	lsls	r0, r0, #8
    9204:	17c2      	asrs	r2, r0, #31
    9206:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    920a:	1200      	asrs	r0, r0, #8
    920c:	d422      	bmi.n	9254 <MPSL_IRQ_RADIO_Handler+0x3fc>
    920e:	89c8      	ldrh	r0, [r1, #14]
    9210:	b360      	cbz	r0, 926c <MPSL_IRQ_RADIO_Handler+0x414>
    9212:	89e0      	ldrh	r0, [r4, #14]
    9214:	bb50      	cbnz	r0, 926c <MPSL_IRQ_RADIO_Handler+0x414>
    9216:	f8d4 a000 	ldr.w	sl, [r4]
    921a:	f002 ff81 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    921e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9222:	bf08      	it	eq
    9224:	200d      	moveq	r0, #13
    9226:	d00b      	beq.n	9240 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9228:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    922c:	3856      	subs	r0, #86	; 0x56
    922e:	bf08      	it	eq
    9230:	201c      	moveq	r0, #28
    9232:	d005      	beq.n	9240 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9234:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9238:	389f      	subs	r0, #159	; 0x9f
    923a:	bf14      	ite	ne
    923c:	2000      	movne	r0, #0
    923e:	2032      	moveq	r0, #50	; 0x32
    9240:	1c41      	adds	r1, r0, #1
    9242:	eba9 000a 	sub.w	r0, r9, sl
    9246:	0200      	lsls	r0, r0, #8
    9248:	17c2      	asrs	r2, r0, #31
    924a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    924e:	1200      	asrs	r0, r0, #8
    9250:	4288      	cmp	r0, r1
    9252:	da0b      	bge.n	926c <MPSL_IRQ_RADIO_Handler+0x414>
    9254:	f888 5000 	strb.w	r5, [r8]
    9258:	7e38      	ldrb	r0, [r7, #24]
    925a:	7c21      	ldrb	r1, [r4, #16]
    925c:	4288      	cmp	r0, r1
    925e:	f67f af0d 	bls.w	907c <MPSL_IRQ_RADIO_Handler+0x224>
    9262:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9266:	7845      	ldrb	r5, [r0, #1]
    9268:	2d20      	cmp	r5, #32
    926a:	d1bf      	bne.n	91ec <MPSL_IRQ_RADIO_Handler+0x394>
    926c:	b011      	add	sp, #68	; 0x44
    926e:	2001      	movs	r0, #1
    9270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9274:	20001438 	.word	0x20001438
    9278:	20001038 	.word	0x20001038
    927c:	200013b8 	.word	0x200013b8
    9280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9284:	460f      	mov	r7, r1
    9286:	4606      	mov	r6, r0
    9288:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    928c:	494b      	ldr	r1, [pc, #300]	; (93bc <MPSL_IRQ_RADIO_Handler+0x564>)
    928e:	4699      	mov	r9, r3
    9290:	4408      	add	r0, r1
    9292:	4692      	mov	sl, r2
    9294:	f890 4020 	ldrb.w	r4, [r0, #32]
    9298:	2020      	movs	r0, #32
    929a:	7010      	strb	r0, [r2, #0]
    929c:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    92a0:	2c20      	cmp	r4, #32
    92a2:	bf1c      	itt	ne
    92a4:	4846      	ldrne	r0, [pc, #280]	; (93c0 <MPSL_IRQ_RADIO_Handler+0x568>)
    92a6:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    92aa:	d038      	beq.n	931e <MPSL_IRQ_RADIO_Handler+0x4c6>
    92ac:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    92b0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    92b4:	f100 0108 	add.w	r1, r0, #8
    92b8:	68c0      	ldr	r0, [r0, #12]
    92ba:	6835      	ldr	r5, [r6, #0]
    92bc:	1a28      	subs	r0, r5, r0
    92be:	0200      	lsls	r0, r0, #8
    92c0:	17c2      	asrs	r2, r0, #31
    92c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    92c6:	1200      	asrs	r0, r0, #8
    92c8:	d429      	bmi.n	931e <MPSL_IRQ_RADIO_Handler+0x4c6>
    92ca:	89f0      	ldrh	r0, [r6, #14]
    92cc:	b300      	cbz	r0, 9310 <MPSL_IRQ_RADIO_Handler+0x4b8>
    92ce:	89c8      	ldrh	r0, [r1, #14]
    92d0:	b9f0      	cbnz	r0, 9310 <MPSL_IRQ_RADIO_Handler+0x4b8>
    92d2:	6808      	ldr	r0, [r1, #0]
    92d4:	9000      	str	r0, [sp, #0]
    92d6:	f002 ff23 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92da:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92de:	bf08      	it	eq
    92e0:	200d      	moveq	r0, #13
    92e2:	d00b      	beq.n	92fc <MPSL_IRQ_RADIO_Handler+0x4a4>
    92e4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    92e8:	3856      	subs	r0, #86	; 0x56
    92ea:	bf08      	it	eq
    92ec:	201c      	moveq	r0, #28
    92ee:	d005      	beq.n	92fc <MPSL_IRQ_RADIO_Handler+0x4a4>
    92f0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    92f4:	389f      	subs	r0, #159	; 0x9f
    92f6:	bf14      	ite	ne
    92f8:	2000      	movne	r0, #0
    92fa:	2032      	moveq	r0, #50	; 0x32
    92fc:	1c41      	adds	r1, r0, #1
    92fe:	9800      	ldr	r0, [sp, #0]
    9300:	1a28      	subs	r0, r5, r0
    9302:	0200      	lsls	r0, r0, #8
    9304:	17c2      	asrs	r2, r0, #31
    9306:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    930a:	1200      	asrs	r0, r0, #8
    930c:	4288      	cmp	r0, r1
    930e:	db06      	blt.n	931e <MPSL_IRQ_RADIO_Handler+0x4c6>
    9310:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9314:	f88a 4000 	strb.w	r4, [sl]
    9318:	7844      	ldrb	r4, [r0, #1]
    931a:	2c20      	cmp	r4, #32
    931c:	d1c6      	bne.n	92ac <MPSL_IRQ_RADIO_Handler+0x454>
    931e:	f89a 0000 	ldrb.w	r0, [sl]
    9322:	f889 0000 	strb.w	r0, [r9]
    9326:	2c20      	cmp	r4, #32
    9328:	bf1c      	itt	ne
    932a:	4825      	ldrne	r0, [pc, #148]	; (93c0 <MPSL_IRQ_RADIO_Handler+0x568>)
    932c:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    9330:	d040      	beq.n	93b4 <MPSL_IRQ_RADIO_Handler+0x55c>
    9332:	bf00      	nop
    9334:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9338:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    933c:	6870      	ldr	r0, [r6, #4]
    933e:	68bd      	ldr	r5, [r7, #8]
    9340:	f107 0108 	add.w	r1, r7, #8
    9344:	1a28      	subs	r0, r5, r0
    9346:	0200      	lsls	r0, r0, #8
    9348:	17c2      	asrs	r2, r0, #31
    934a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    934e:	1200      	asrs	r0, r0, #8
    9350:	d422      	bmi.n	9398 <MPSL_IRQ_RADIO_Handler+0x540>
    9352:	89c8      	ldrh	r0, [r1, #14]
    9354:	b370      	cbz	r0, 93b4 <MPSL_IRQ_RADIO_Handler+0x55c>
    9356:	89f0      	ldrh	r0, [r6, #14]
    9358:	bb60      	cbnz	r0, 93b4 <MPSL_IRQ_RADIO_Handler+0x55c>
    935a:	f8d6 b000 	ldr.w	fp, [r6]
    935e:	f002 fedf 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9362:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9366:	bf08      	it	eq
    9368:	200d      	moveq	r0, #13
    936a:	d00b      	beq.n	9384 <MPSL_IRQ_RADIO_Handler+0x52c>
    936c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9370:	3856      	subs	r0, #86	; 0x56
    9372:	bf08      	it	eq
    9374:	201c      	moveq	r0, #28
    9376:	d005      	beq.n	9384 <MPSL_IRQ_RADIO_Handler+0x52c>
    9378:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    937c:	389f      	subs	r0, #159	; 0x9f
    937e:	bf14      	ite	ne
    9380:	2000      	movne	r0, #0
    9382:	2032      	moveq	r0, #50	; 0x32
    9384:	1c41      	adds	r1, r0, #1
    9386:	eba5 000b 	sub.w	r0, r5, fp
    938a:	0200      	lsls	r0, r0, #8
    938c:	17c2      	asrs	r2, r0, #31
    938e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9392:	1200      	asrs	r0, r0, #8
    9394:	4288      	cmp	r0, r1
    9396:	da0d      	bge.n	93b4 <MPSL_IRQ_RADIO_Handler+0x55c>
    9398:	f889 4000 	strb.w	r4, [r9]
    939c:	7e38      	ldrb	r0, [r7, #24]
    939e:	7c31      	ldrb	r1, [r6, #16]
    93a0:	4288      	cmp	r0, r1
    93a2:	d802      	bhi.n	93aa <MPSL_IRQ_RADIO_Handler+0x552>
    93a4:	2000      	movs	r0, #0
    93a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93aa:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    93ae:	7844      	ldrb	r4, [r0, #1]
    93b0:	2c20      	cmp	r4, #32
    93b2:	d1bf      	bne.n	9334 <MPSL_IRQ_RADIO_Handler+0x4dc>
    93b4:	2001      	movs	r0, #1
    93b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93ba:	0000      	.short	0x0000
    93bc:	20001438 	.word	0x20001438
    93c0:	200013b8 	.word	0x200013b8
    93c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93c8:	b098      	sub	sp, #96	; 0x60
    93ca:	4615      	mov	r5, r2
    93cc:	f002 fa52 	bl	b874 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    93d0:	4604      	mov	r4, r0
    93d2:	f002 fccd 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    93d6:	4606      	mov	r6, r0
    93d8:	9819      	ldr	r0, [sp, #100]	; 0x64
    93da:	2801      	cmp	r0, #1
    93dc:	bf18      	it	ne
    93de:	2802      	cmpne	r0, #2
    93e0:	d005      	beq.n	93ee <MPSL_IRQ_RADIO_Handler+0x596>
    93e2:	f640 1192 	movw	r1, #2450	; 0x992
    93e6:	f04f 0070 	mov.w	r0, #112	; 0x70
    93ea:	f003 f857 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93ee:	49f9      	ldr	r1, [pc, #996]	; (97d4 <MPSL_IRQ_RADIO_Handler+0x97c>)
    93f0:	2001      	movs	r0, #1
    93f2:	6008      	str	r0, [r1, #0]
    93f4:	49f8      	ldr	r1, [pc, #992]	; (97d8 <MPSL_IRQ_RADIO_Handler+0x980>)
    93f6:	6889      	ldr	r1, [r1, #8]
    93f8:	6008      	str	r0, [r1, #0]
    93fa:	2000      	movs	r0, #0
    93fc:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9400:	900a      	str	r0, [sp, #40]	; 0x28
    9402:	1e40      	subs	r0, r0, #1
    9404:	900b      	str	r0, [sp, #44]	; 0x2c
    9406:	49f5      	ldr	r1, [pc, #980]	; (97dc <MPSL_IRQ_RADIO_Handler+0x984>)
    9408:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    940c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9410:	f101 0008 	add.w	r0, r1, #8
    9414:	6989      	ldr	r1, [r1, #24]
    9416:	e890 100d 	ldmia.w	r0, {r0, r2, r3, ip}
    941a:	af0c      	add	r7, sp, #48	; 0x30
    941c:	9110      	str	r1, [sp, #64]	; 0x40
    941e:	e887 100d 	stmia.w	r7, {r0, r2, r3, ip}
    9422:	f007 fb44 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9426:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    942a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    942e:	4602      	mov	r2, r0
    9430:	4441      	add	r1, r8
    9432:	1c49      	adds	r1, r1, #1
    9434:	4bea      	ldr	r3, [pc, #936]	; (97e0 <MPSL_IRQ_RADIO_Handler+0x988>)
    9436:	4408      	add	r0, r1
    9438:	429a      	cmp	r2, r3
    943a:	d854      	bhi.n	94e6 <MPSL_IRQ_RADIO_Handler+0x68e>
    943c:	4de9      	ldr	r5, [pc, #932]	; (97e4 <MPSL_IRQ_RADIO_Handler+0x98c>)
    943e:	42a9      	cmp	r1, r5
    9440:	dc58      	bgt.n	94f4 <MPSL_IRQ_RADIO_Handler+0x69c>
    9442:	426a      	negs	r2, r5
    9444:	4291      	cmp	r1, r2
    9446:	db5d      	blt.n	9504 <MPSL_IRQ_RADIO_Handler+0x6ac>
    9448:	1c59      	adds	r1, r3, #1
    944a:	4281      	cmp	r1, r0
    944c:	bfdc      	itt	le
    944e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9452:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9456:	dd05      	ble.n	9464 <MPSL_IRQ_RADIO_Handler+0x60c>
    9458:	2800      	cmp	r0, #0
    945a:	bfbc      	itt	lt
    945c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9460:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9464:	9014      	str	r0, [sp, #80]	; 0x50
    9466:	48e0      	ldr	r0, [pc, #896]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9468:	f1b8 0f00 	cmp.w	r8, #0
    946c:	8b80      	ldrh	r0, [r0, #28]
    946e:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    9472:	bf14      	ite	ne
    9474:	f04f 0a01 	movne.w	sl, #1
    9478:	f04f 0a00 	moveq.w	sl, #0
    947c:	f002 ff96 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9480:	9016      	str	r0, [sp, #88]	; 0x58
    9482:	f1ba 0f00 	cmp.w	sl, #0
    9486:	d008      	beq.n	949a <MPSL_IRQ_RADIO_Handler+0x642>
    9488:	48d7      	ldr	r0, [pc, #860]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    948a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    948c:	f1b0 3fff 	cmp.w	r0, #4294967295
    9490:	bf02      	ittt	eq
    9492:	9816      	ldreq	r0, [sp, #88]	; 0x58
    9494:	2800      	cmpeq	r0, #0
    9496:	2701      	moveq	r7, #1
    9498:	d001      	beq.n	949e <MPSL_IRQ_RADIO_Handler+0x646>
    949a:	f04f 0700 	mov.w	r7, #0
    949e:	f002 fe3f 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94a2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94a6:	bf08      	it	eq
    94a8:	200d      	moveq	r0, #13
    94aa:	d00b      	beq.n	94c4 <MPSL_IRQ_RADIO_Handler+0x66c>
    94ac:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94b0:	3856      	subs	r0, #86	; 0x56
    94b2:	bf08      	it	eq
    94b4:	201c      	moveq	r0, #28
    94b6:	d005      	beq.n	94c4 <MPSL_IRQ_RADIO_Handler+0x66c>
    94b8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94bc:	389f      	subs	r0, #159	; 0x9f
    94be:	bf14      	ite	ne
    94c0:	2000      	movne	r0, #0
    94c2:	2032      	moveq	r0, #50	; 0x32
    94c4:	f04f 0900 	mov.w	r9, #0
    94c8:	46cb      	mov	fp, r9
    94ca:	9013      	str	r0, [sp, #76]	; 0x4c
    94cc:	4546      	cmp	r6, r8
    94ce:	d936      	bls.n	953e <MPSL_IRQ_RADIO_Handler+0x6e6>
    94d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    94d2:	f8df 930c 	ldr.w	r9, [pc, #780]	; 97e0 <MPSL_IRQ_RADIO_Handler+0x988>
    94d6:	ea6f 0c06 	mvn.w	ip, r6
    94da:	4669      	mov	r1, sp
    94dc:	aa17      	add	r2, sp, #92	; 0x5c
    94de:	eb03 000c 	add.w	r0, r3, ip
    94e2:	454b      	cmp	r3, r9
    94e4:	d904      	bls.n	94f0 <MPSL_IRQ_RADIO_Handler+0x698>
    94e6:	f240 519e 	movw	r1, #1438	; 0x59e
    94ea:	2070      	movs	r0, #112	; 0x70
    94ec:	f002 ffd6 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94f0:	45ac      	cmp	ip, r5
    94f2:	dd04      	ble.n	94fe <MPSL_IRQ_RADIO_Handler+0x6a6>
    94f4:	f240 519f 	movw	r1, #1439	; 0x59f
    94f8:	2070      	movs	r0, #112	; 0x70
    94fa:	f002 ffcf 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94fe:	4bbb      	ldr	r3, [pc, #748]	; (97ec <MPSL_IRQ_RADIO_Handler+0x994>)
    9500:	459c      	cmp	ip, r3
    9502:	da04      	bge.n	950e <MPSL_IRQ_RADIO_Handler+0x6b6>
    9504:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9508:	2070      	movs	r0, #112	; 0x70
    950a:	f002 ffc7 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    950e:	4bb8      	ldr	r3, [pc, #736]	; (97f0 <MPSL_IRQ_RADIO_Handler+0x998>)
    9510:	4283      	cmp	r3, r0
    9512:	bfdc      	itt	le
    9514:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9518:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    951c:	dd05      	ble.n	952a <MPSL_IRQ_RADIO_Handler+0x6d2>
    951e:	2800      	cmp	r0, #0
    9520:	bfbc      	itt	lt
    9522:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9526:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    952a:	f001 fefd 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    952e:	9800      	ldr	r0, [sp, #0]
    9530:	990c      	ldr	r1, [sp, #48]	; 0x30
    9532:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9536:	9000      	str	r0, [sp, #0]
    9538:	1a08      	subs	r0, r1, r0
    953a:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    953e:	2f00      	cmp	r7, #0
    9540:	bf18      	it	ne
    9542:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    9546:	d105      	bne.n	9554 <MPSL_IRQ_RADIO_Handler+0x6fc>
    9548:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    954c:	2800      	cmp	r0, #0
    954e:	bf18      	it	ne
    9550:	f04f 0b02 	movne.w	fp, #2
    9554:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9558:	d008      	beq.n	956c <MPSL_IRQ_RADIO_Handler+0x714>
    955a:	980c      	ldr	r0, [sp, #48]	; 0x30
    955c:	1b00      	subs	r0, r0, r4
    955e:	0200      	lsls	r0, r0, #8
    9560:	17c1      	asrs	r1, r0, #31
    9562:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9566:	1200      	asrs	r0, r0, #8
    9568:	2801      	cmp	r0, #1
    956a:	da02      	bge.n	9572 <MPSL_IRQ_RADIO_Handler+0x71a>
    956c:	2003      	movs	r0, #3
    956e:	9d18      	ldr	r5, [sp, #96]	; 0x60
    9570:	e00d      	b.n	958e <MPSL_IRQ_RADIO_Handler+0x736>
    9572:	b157      	cbz	r7, 958a <MPSL_IRQ_RADIO_Handler+0x732>
    9574:	489c      	ldr	r0, [pc, #624]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9576:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    957a:	b130      	cbz	r0, 958a <MPSL_IRQ_RADIO_Handler+0x732>
    957c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9580:	f110 0b00 	adds.w	fp, r0, #0
    9584:	bf18      	it	ne
    9586:	f04f 0b02 	movne.w	fp, #2
    958a:	4625      	mov	r5, r4
    958c:	2000      	movs	r0, #0
    958e:	4483      	add	fp, r0
    9590:	980c      	ldr	r0, [sp, #48]	; 0x30
    9592:	eba0 0009 	sub.w	r0, r0, r9
    9596:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    959a:	1e48      	subs	r0, r1, #1
    959c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    95a0:	1b42      	subs	r2, r0, r5
    95a2:	0212      	lsls	r2, r2, #8
    95a4:	17d3      	asrs	r3, r2, #31
    95a6:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    95aa:	1212      	asrs	r2, r2, #8
    95ac:	455a      	cmp	r2, fp
    95ae:	db04      	blt.n	95ba <MPSL_IRQ_RADIO_Handler+0x762>
    95b0:	f1b9 0f00 	cmp.w	r9, #0
    95b4:	bf18      	it	ne
    95b6:	910c      	strne	r1, [sp, #48]	; 0x30
    95b8:	e02d      	b.n	9616 <MPSL_IRQ_RADIO_Handler+0x7be>
    95ba:	f1b9 0f00 	cmp.w	r9, #0
    95be:	d005      	beq.n	95cc <MPSL_IRQ_RADIO_Handler+0x774>
    95c0:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    95c4:	b920      	cbnz	r0, 95d0 <MPSL_IRQ_RADIO_Handler+0x778>
    95c6:	f002 fbc9 	bl	bd5c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    95ca:	b108      	cbz	r0, 95d0 <MPSL_IRQ_RADIO_Handler+0x778>
    95cc:	b9af      	cbnz	r7, 95fa <MPSL_IRQ_RADIO_Handler+0x7a2>
    95ce:	e00c      	b.n	95ea <MPSL_IRQ_RADIO_Handler+0x792>
    95d0:	b92f      	cbnz	r7, 95de <MPSL_IRQ_RADIO_Handler+0x786>
    95d2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    95d6:	2800      	cmp	r0, #0
    95d8:	bf18      	it	ne
    95da:	f1ab 0b02 	subne.w	fp, fp, #2
    95de:	f04f 0900 	mov.w	r9, #0
    95e2:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    95e6:	464e      	mov	r6, r9
    95e8:	e007      	b.n	95fa <MPSL_IRQ_RADIO_Handler+0x7a2>
    95ea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    95ee:	b120      	cbz	r0, 95fa <MPSL_IRQ_RADIO_Handler+0x7a2>
    95f0:	2000      	movs	r0, #0
    95f2:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    95f6:	f1ab 0b02 	sub.w	fp, fp, #2
    95fa:	980c      	ldr	r0, [sp, #48]	; 0x30
    95fc:	eba0 0109 	sub.w	r1, r0, r9
    9600:	1e48      	subs	r0, r1, #1
    9602:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9606:	1b42      	subs	r2, r0, r5
    9608:	0212      	lsls	r2, r2, #8
    960a:	17d3      	asrs	r3, r2, #31
    960c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9610:	1212      	asrs	r2, r2, #8
    9612:	455a      	cmp	r2, fp
    9614:	db7e      	blt.n	9714 <MPSL_IRQ_RADIO_Handler+0x8bc>
    9616:	4a74      	ldr	r2, [pc, #464]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9618:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    961a:	1a89      	subs	r1, r1, r2
    961c:	0209      	lsls	r1, r1, #8
    961e:	17cb      	asrs	r3, r1, #31
    9620:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    9624:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9626:	1209      	asrs	r1, r1, #8
    9628:	b93b      	cbnz	r3, 963a <MPSL_IRQ_RADIO_Handler+0x7e2>
    962a:	f1b2 3fff 	cmp.w	r2, #4294967295
    962e:	bf1c      	itt	ne
    9630:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    9632:	4291      	cmpne	r1, r2
    9634:	bfb8      	it	lt
    9636:	2100      	movlt	r1, #0
    9638:	db00      	blt.n	963c <MPSL_IRQ_RADIO_Handler+0x7e4>
    963a:	2101      	movs	r1, #1
    963c:	ea3a 0101 	bics.w	r1, sl, r1
    9640:	d168      	bne.n	9714 <MPSL_IRQ_RADIO_Handler+0x8bc>
    9642:	9919      	ldr	r1, [sp, #100]	; 0x64
    9644:	4605      	mov	r5, r0
    9646:	f04f 0900 	mov.w	r9, #0
    964a:	9105      	str	r1, [sp, #20]
    964c:	f001 ffd6 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9650:	1a28      	subs	r0, r5, r0
    9652:	0200      	lsls	r0, r0, #8
    9654:	17c1      	asrs	r1, r0, #31
    9656:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    965a:	ea4f 2b20 	mov.w	fp, r0, asr #8
    965e:	f002 fd5f 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9662:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9666:	bf08      	it	eq
    9668:	200d      	moveq	r0, #13
    966a:	d00b      	beq.n	9684 <MPSL_IRQ_RADIO_Handler+0x82c>
    966c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9670:	3856      	subs	r0, #86	; 0x56
    9672:	bf08      	it	eq
    9674:	201c      	moveq	r0, #28
    9676:	d005      	beq.n	9684 <MPSL_IRQ_RADIO_Handler+0x82c>
    9678:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    967c:	389f      	subs	r0, #159	; 0x9f
    967e:	bf14      	ite	ne
    9680:	2000      	movne	r0, #0
    9682:	2032      	moveq	r0, #50	; 0x32
    9684:	300b      	adds	r0, #11
    9686:	4558      	cmp	r0, fp
    9688:	dd1f      	ble.n	96ca <MPSL_IRQ_RADIO_Handler+0x872>
    968a:	9805      	ldr	r0, [sp, #20]
    968c:	2801      	cmp	r0, #1
    968e:	d001      	beq.n	9694 <MPSL_IRQ_RADIO_Handler+0x83c>
    9690:	b147      	cbz	r7, 96a4 <MPSL_IRQ_RADIO_Handler+0x84c>
    9692:	e012      	b.n	96ba <MPSL_IRQ_RADIO_Handler+0x862>
    9694:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9698:	d11c      	bne.n	96d4 <MPSL_IRQ_RADIO_Handler+0x87c>
    969a:	f640 1113 	movw	r1, #2323	; 0x913
    969e:	2070      	movs	r0, #112	; 0x70
    96a0:	f002 fefc 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96a4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    96a8:	d007      	beq.n	96ba <MPSL_IRQ_RADIO_Handler+0x862>
    96aa:	1b60      	subs	r0, r4, r5
    96ac:	0200      	lsls	r0, r0, #8
    96ae:	17c1      	asrs	r1, r0, #31
    96b0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    96b4:	1200      	asrs	r0, r0, #8
    96b6:	2804      	cmp	r0, #4
    96b8:	dd04      	ble.n	96c4 <MPSL_IRQ_RADIO_Handler+0x86c>
    96ba:	462c      	mov	r4, r5
    96bc:	4620      	mov	r0, r4
    96be:	f001 ffc3 	bl	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    96c2:	e007      	b.n	96d4 <MPSL_IRQ_RADIO_Handler+0x87c>
    96c4:	2800      	cmp	r0, #0
    96c6:	dc62      	bgt.n	978e <MPSL_IRQ_RADIO_Handler+0x936>
    96c8:	e004      	b.n	96d4 <MPSL_IRQ_RADIO_Handler+0x87c>
    96ca:	462c      	mov	r4, r5
    96cc:	4620      	mov	r0, r4
    96ce:	f001 ffbb 	bl	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    96d2:	46d1      	mov	r9, sl
    96d4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    96d8:	d054      	beq.n	9784 <MPSL_IRQ_RADIO_Handler+0x92c>
    96da:	980c      	ldr	r0, [sp, #48]	; 0x30
    96dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    96de:	1b00      	subs	r0, r0, r4
    96e0:	1b12      	subs	r2, r2, r4
    96e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    96e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    96ea:	2801      	cmp	r0, #1
    96ec:	d34f      	bcc.n	978e <MPSL_IRQ_RADIO_Handler+0x936>
    96ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    96f2:	bf98      	it	ls
    96f4:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    96f8:	d849      	bhi.n	978e <MPSL_IRQ_RADIO_Handler+0x936>
    96fa:	4620      	mov	r0, r4
    96fc:	f007 f9d7 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9700:	9914      	ldr	r1, [sp, #80]	; 0x50
    9702:	4a38      	ldr	r2, [pc, #224]	; (97e4 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9704:	1a0d      	subs	r5, r1, r0
    9706:	f04f 0b00 	mov.w	fp, #0
    970a:	1aaa      	subs	r2, r5, r2
    970c:	f17b 0200 	sbcs.w	r2, fp, #0
    9710:	d318      	bcc.n	9744 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9712:	e000      	b.n	9716 <MPSL_IRQ_RADIO_Handler+0x8be>
    9714:	e03b      	b.n	978e <MPSL_IRQ_RADIO_Handler+0x936>
    9716:	4b33      	ldr	r3, [pc, #204]	; (97e4 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9718:	1a42      	subs	r2, r0, r1
    971a:	1ad3      	subs	r3, r2, r3
    971c:	f17b 0300 	sbcs.w	r3, fp, #0
    9720:	d310      	bcc.n	9744 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9722:	4b2f      	ldr	r3, [pc, #188]	; (97e0 <MPSL_IRQ_RADIO_Handler+0x988>)
    9724:	42ab      	cmp	r3, r5
    9726:	bf3e      	ittt	cc
    9728:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    972c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    9730:	1845      	addcc	r5, r0, r1
    9732:	d307      	bcc.n	9744 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9734:	4293      	cmp	r3, r2
    9736:	d22e      	bcs.n	9796 <MPSL_IRQ_RADIO_Handler+0x93e>
    9738:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    973c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    9740:	4408      	add	r0, r1
    9742:	4245      	negs	r5, r0
    9744:	4f28      	ldr	r7, [pc, #160]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9746:	7fb8      	ldrb	r0, [r7, #30]
    9748:	b350      	cbz	r0, 97a0 <MPSL_IRQ_RADIO_Handler+0x948>
    974a:	9819      	ldr	r0, [sp, #100]	; 0x64
    974c:	2801      	cmp	r0, #1
    974e:	d005      	beq.n	975c <MPSL_IRQ_RADIO_Handler+0x904>
    9750:	2002      	movs	r0, #2
    9752:	f002 f9c9 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9756:	2001      	movs	r0, #1
    9758:	f002 f9c6 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    975c:	45b0      	cmp	r8, r6
    975e:	d22b      	bcs.n	97b8 <MPSL_IRQ_RADIO_Handler+0x960>
    9760:	eba5 0106 	sub.w	r1, r5, r6
    9764:	f04f 0002 	mov.w	r0, #2
    9768:	f002 f908 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    976c:	b388      	cbz	r0, 97d2 <MPSL_IRQ_RADIO_Handler+0x97a>
    976e:	f1b8 0f00 	cmp.w	r8, #0
    9772:	bf1c      	itt	ne
    9774:	eba5 0108 	subne.w	r1, r5, r8
    9778:	2001      	movne	r0, #1
    977a:	d043      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x9ac>
    977c:	f002 f8fe 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9780:	b338      	cbz	r0, 97d2 <MPSL_IRQ_RADIO_Handler+0x97a>
    9782:	e03f      	b.n	9804 <MPSL_IRQ_RADIO_Handler+0x9ac>
    9784:	f640 2131 	movw	r1, #2609	; 0xa31
    9788:	2070      	movs	r0, #112	; 0x70
    978a:	f002 fe87 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    978e:	b01b      	add	sp, #108	; 0x6c
    9790:	2000      	movs	r0, #0
    9792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9796:	f640 3105 	movw	r1, #2821	; 0xb05
    979a:	2070      	movs	r0, #112	; 0x70
    979c:	f002 fe7e 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97a0:	45b0      	cmp	r8, r6
    97a2:	bf34      	ite	cc
    97a4:	4630      	movcc	r0, r6
    97a6:	4640      	movcs	r0, r8
    97a8:	301e      	adds	r0, #30
    97aa:	42a8      	cmp	r0, r5
    97ac:	dbcd      	blt.n	974a <MPSL_IRQ_RADIO_Handler+0x8f2>
    97ae:	f640 2145 	movw	r1, #2629	; 0xa45
    97b2:	2070      	movs	r0, #112	; 0x70
    97b4:	f002 fe72 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97b8:	d91c      	bls.n	97f4 <MPSL_IRQ_RADIO_Handler+0x99c>
    97ba:	eba5 0108 	sub.w	r1, r5, r8
    97be:	2001      	movs	r0, #1
    97c0:	f002 f8dc 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    97c4:	b128      	cbz	r0, 97d2 <MPSL_IRQ_RADIO_Handler+0x97a>
    97c6:	2e00      	cmp	r6, #0
    97c8:	bf1c      	itt	ne
    97ca:	1ba9      	subne	r1, r5, r6
    97cc:	2002      	movne	r0, #2
    97ce:	d019      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x9ac>
    97d0:	e7d4      	b.n	977c <MPSL_IRQ_RADIO_Handler+0x924>
    97d2:	e042      	b.n	985a <MPSL_IRQ_RADIO_Handler+0xa02>
    97d4:	40000508 	.word	0x40000508
    97d8:	200002ec 	.word	0x200002ec
    97dc:	20001038 	.word	0x20001038
    97e0:	1e847fff 	.word	0x1e847fff
    97e4:	0f424000 	.word	0x0f424000
    97e8:	20001438 	.word	0x20001438
    97ec:	f0bdc000 	.word	0xf0bdc000
    97f0:	1e848000 	.word	0x1e848000
    97f4:	ea56 0008 	orrs.w	r0, r6, r8
    97f8:	d004      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x9ac>
    97fa:	f640 1176 	movw	r1, #2422	; 0x976
    97fe:	2070      	movs	r0, #112	; 0x70
    9800:	f002 fe4c 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9804:	4629      	mov	r1, r5
    9806:	2000      	movs	r0, #0
    9808:	f002 f8b8 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    980c:	b328      	cbz	r0, 985a <MPSL_IRQ_RADIO_Handler+0xa02>
    980e:	2601      	movs	r6, #1
    9810:	f1ba 0f00 	cmp.w	sl, #0
    9814:	bf04      	itt	eq
    9816:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    981a:	2800      	cmpeq	r0, #0
    981c:	d002      	beq.n	9824 <MPSL_IRQ_RADIO_Handler+0x9cc>
    981e:	f1b9 0f00 	cmp.w	r9, #0
    9822:	d024      	beq.n	986e <MPSL_IRQ_RADIO_Handler+0xa16>
    9824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9826:	f1b0 3fff 	cmp.w	r0, #4294967295
    982a:	d004      	beq.n	9836 <MPSL_IRQ_RADIO_Handler+0x9de>
    982c:	f002 fc7e 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9830:	f04f 30ff 	mov.w	r0, #4294967295
    9834:	62f8      	str	r0, [r7, #44]	; 0x2c
    9836:	f1b9 0f00 	cmp.w	r9, #0
    983a:	d01c      	beq.n	9876 <MPSL_IRQ_RADIO_Handler+0xa1e>
    983c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    983e:	1a20      	subs	r0, r4, r0
    9840:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9844:	2005      	movs	r0, #5
    9846:	f002 f899 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    984a:	b360      	cbz	r0, 98a6 <MPSL_IRQ_RADIO_Handler+0xa4e>
    984c:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9850:	2800      	cmp	r0, #0
    9852:	bf08      	it	eq
    9854:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    9858:	e015      	b.n	9886 <MPSL_IRQ_RADIO_Handler+0xa2e>
    985a:	2002      	movs	r0, #2
    985c:	f002 f944 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9860:	2001      	movs	r0, #1
    9862:	f002 f941 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9866:	b01b      	add	sp, #108	; 0x6c
    9868:	2000      	movs	r0, #0
    986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    986e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9870:	f1b0 3fff 	cmp.w	r0, #4294967295
    9874:	d012      	beq.n	989c <MPSL_IRQ_RADIO_Handler+0xa44>
    9876:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    987a:	b120      	cbz	r0, 9886 <MPSL_IRQ_RADIO_Handler+0xa2e>
    987c:	2005      	movs	r0, #5
    987e:	f002 f933 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9882:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    9886:	eba5 0008 	sub.w	r0, r5, r8
    988a:	f1a0 0119 	sub.w	r1, r0, #25
    988e:	2900      	cmp	r1, #0
    9890:	dc0e      	bgt.n	98b0 <MPSL_IRQ_RADIO_Handler+0xa58>
    9892:	f640 216e 	movw	r1, #2670	; 0xa6e
    9896:	2070      	movs	r0, #112	; 0x70
    9898:	f002 fe00 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    989c:	f002 fc62 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    98a0:	f001 feac 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    98a4:	e7c6      	b.n	9834 <MPSL_IRQ_RADIO_Handler+0x9dc>
    98a6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    98aa:	2070      	movs	r0, #112	; 0x70
    98ac:	f002 fdf6 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98b0:	2003      	movs	r0, #3
    98b2:	f002 f863 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    98b6:	b1b8      	cbz	r0, 98e8 <MPSL_IRQ_RADIO_Handler+0xa90>
    98b8:	480e      	ldr	r0, [pc, #56]	; (98f4 <MPSL_IRQ_RADIO_Handler+0xa9c>)
    98ba:	6880      	ldr	r0, [r0, #8]
    98bc:	f8c0 b000 	str.w	fp, [r0]
    98c0:	480d      	ldr	r0, [pc, #52]	; (98f8 <MPSL_IRQ_RADIO_Handler+0xaa0>)
    98c2:	f8c0 b000 	str.w	fp, [r0]
    98c6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    98ca:	e898 107f 	ldmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, ip}
    98ce:	6038      	str	r0, [r7, #0]
    98d0:	6079      	str	r1, [r7, #4]
    98d2:	60ba      	str	r2, [r7, #8]
    98d4:	60fb      	str	r3, [r7, #12]
    98d6:	613c      	str	r4, [r7, #16]
    98d8:	617d      	str	r5, [r7, #20]
    98da:	61be      	str	r6, [r7, #24]
    98dc:	f8c7 c01c 	str.w	ip, [r7, #28]
    98e0:	b01b      	add	sp, #108	; 0x6c
    98e2:	2001      	movs	r0, #1
    98e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98e8:	f640 2176 	movw	r1, #2678	; 0xa76
    98ec:	2070      	movs	r0, #112	; 0x70
    98ee:	f002 fdd5 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98f2:	0000      	.short	0x0000
    98f4:	200002ec 	.word	0x200002ec
    98f8:	40000508 	.word	0x40000508
    98fc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9900:	460d      	mov	r5, r1
    9902:	4614      	mov	r4, r2
    9904:	4606      	mov	r6, r0
    9906:	f04f 0a00 	mov.w	sl, #0
    990a:	892a      	ldrh	r2, [r5, #8]
    990c:	6841      	ldr	r1, [r0, #4]
    990e:	4650      	mov	r0, sl
    9910:	f362 401f 	bfi	r0, r2, #16, #16
    9914:	7aaa      	ldrb	r2, [r5, #10]
    9916:	46d1      	mov	r9, sl
    9918:	f362 0907 	bfi	r9, r2, #0, #8
    991c:	7aea      	ldrb	r2, [r5, #11]
    991e:	b083      	sub	sp, #12
    9920:	f362 290f 	bfi	r9, r2, #8, #8
    9924:	782a      	ldrb	r2, [r5, #0]
    9926:	f8c4 a000 	str.w	sl, [r4]
    992a:	f362 4917 	bfi	r9, r2, #16, #8
    992e:	f8c4 a004 	str.w	sl, [r4, #4]
    9932:	f8c4 9010 	str.w	r9, [r4, #16]
    9936:	e9c4 1002 	strd	r1, r0, [r4, #8]
    993a:	4f9d      	ldr	r7, [pc, #628]	; (9bb0 <MPSL_IRQ_RADIO_Handler+0xd58>)
    993c:	6870      	ldr	r0, [r6, #4]
    993e:	fba0 8907 	umull	r8, r9, r0, r7
    9942:	6830      	ldr	r0, [r6, #0]
    9944:	f007 f8b3 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9948:	eb10 0108 	adds.w	r1, r0, r8
    994c:	eb4a 0209 	adc.w	r2, sl, r9
    9950:	7828      	ldrb	r0, [r5, #0]
    9952:	ea4f 0967 	mov.w	r9, r7, asr #1
    9956:	f1c9 0b00 	rsb	fp, r9, #0
    995a:	b170      	cbz	r0, 997a <MPSL_IRQ_RADIO_Handler+0xb22>
    995c:	89e0      	ldrh	r0, [r4, #14]
    995e:	f894 8011 	ldrb.w	r8, [r4, #17]
    9962:	43c0      	mvns	r0, r0
    9964:	f8d5 a004 	ldr.w	sl, [r5, #4]
    9968:	f104 020c 	add.w	r2, r4, #12
    996c:	4548      	cmp	r0, r9
    996e:	dd7c      	ble.n	9a6a <MPSL_IRQ_RADIO_Handler+0xc12>
    9970:	f240 519f 	movw	r1, #1439	; 0x59f
    9974:	2070      	movs	r0, #112	; 0x70
    9976:	f002 fd91 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    997a:	f8df c238 	ldr.w	ip, [pc, #568]	; 9bb4 <MPSL_IRQ_RADIO_Handler+0xd5c>
    997e:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    9982:	eb11 0a0c 	adds.w	sl, r1, ip
    9986:	f142 0c00 	adc.w	ip, r2, #0
    998a:	ebb0 0a0a 	subs.w	sl, r0, sl
    998e:	eb73 0c0c 	sbcs.w	ip, r3, ip
    9992:	d272      	bcs.n	9a7a <MPSL_IRQ_RADIO_Handler+0xc22>
    9994:	1a41      	subs	r1, r0, r1
    9996:	eb73 0102 	sbcs.w	r1, r3, r2
    999a:	d36e      	bcc.n	9a7a <MPSL_IRQ_RADIO_Handler+0xc22>
    999c:	ebb0 0608 	subs.w	r6, r0, r8
    99a0:	42b7      	cmp	r7, r6
    99a2:	d82b      	bhi.n	99fc <MPSL_IRQ_RADIO_Handler+0xba4>
    99a4:	89e0      	ldrh	r0, [r4, #14]
    99a6:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    99aa:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    99ae:	43c1      	mvns	r1, r0
    99b0:	4a81      	ldr	r2, [pc, #516]	; (9bb8 <MPSL_IRQ_RADIO_Handler+0xd60>)
    99b2:	eb08 0001 	add.w	r0, r8, r1
    99b6:	4542      	cmp	r2, r8
    99b8:	d32b      	bcc.n	9a12 <MPSL_IRQ_RADIO_Handler+0xbba>
    99ba:	4549      	cmp	r1, r9
    99bc:	dcd8      	bgt.n	9970 <MPSL_IRQ_RADIO_Handler+0xb18>
    99be:	4559      	cmp	r1, fp
    99c0:	db66      	blt.n	9a90 <MPSL_IRQ_RADIO_Handler+0xc38>
    99c2:	4287      	cmp	r7, r0
    99c4:	bfdc      	itt	le
    99c6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    99ca:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    99ce:	dd05      	ble.n	99dc <MPSL_IRQ_RADIO_Handler+0xb84>
    99d0:	2800      	cmp	r0, #0
    99d2:	bfbc      	itt	lt
    99d4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    99d8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    99dc:	466a      	mov	r2, sp
    99de:	a901      	add	r1, sp, #4
    99e0:	f001 fca2 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    99e4:	89e0      	ldrh	r0, [r4, #14]
    99e6:	f89d 1000 	ldrb.w	r1, [sp]
    99ea:	1a30      	subs	r0, r6, r0
    99ec:	1a40      	subs	r0, r0, r1
    99ee:	1e40      	subs	r0, r0, #1
    99f0:	42b8      	cmp	r0, r7
    99f2:	d302      	bcc.n	99fa <MPSL_IRQ_RADIO_Handler+0xba2>
    99f4:	68a0      	ldr	r0, [r4, #8]
    99f6:	1c40      	adds	r0, r0, #1
    99f8:	60a0      	str	r0, [r4, #8]
    99fa:	4646      	mov	r6, r8
    99fc:	89e0      	ldrh	r0, [r4, #14]
    99fe:	4b6e      	ldr	r3, [pc, #440]	; (9bb8 <MPSL_IRQ_RADIO_Handler+0xd60>)
    9a00:	43c1      	mvns	r1, r0
    9a02:	686d      	ldr	r5, [r5, #4]
    9a04:	f894 8011 	ldrb.w	r8, [r4, #17]
    9a08:	1870      	adds	r0, r6, r1
    9a0a:	f104 020c 	add.w	r2, r4, #12
    9a0e:	429e      	cmp	r6, r3
    9a10:	d904      	bls.n	9a1c <MPSL_IRQ_RADIO_Handler+0xbc4>
    9a12:	f240 519e 	movw	r1, #1438	; 0x59e
    9a16:	2070      	movs	r0, #112	; 0x70
    9a18:	f002 fd40 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a1c:	4549      	cmp	r1, r9
    9a1e:	dca7      	bgt.n	9970 <MPSL_IRQ_RADIO_Handler+0xb18>
    9a20:	4559      	cmp	r1, fp
    9a22:	db35      	blt.n	9a90 <MPSL_IRQ_RADIO_Handler+0xc38>
    9a24:	4287      	cmp	r7, r0
    9a26:	bfdc      	itt	le
    9a28:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9a2c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9a30:	dd05      	ble.n	9a3e <MPSL_IRQ_RADIO_Handler+0xbe6>
    9a32:	2800      	cmp	r0, #0
    9a34:	bfbc      	itt	lt
    9a36:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9a3a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9a3e:	4621      	mov	r1, r4
    9a40:	f001 fc72 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9a44:	6820      	ldr	r0, [r4, #0]
    9a46:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9a4a:	1970      	adds	r0, r6, r5
    9a4c:	1c40      	adds	r0, r0, #1
    9a4e:	6021      	str	r1, [r4, #0]
    9a50:	f1b8 0f00 	cmp.w	r8, #0
    9a54:	bf08      	it	eq
    9a56:	307a      	addeq	r0, #122	; 0x7a
    9a58:	d004      	beq.n	9a64 <MPSL_IRQ_RADIO_Handler+0xc0c>
    9a5a:	f1b8 0f01 	cmp.w	r8, #1
    9a5e:	bf08      	it	eq
    9a60:	3048      	addeq	r0, #72	; 0x48
    9a62:	d13a      	bne.n	9ada <MPSL_IRQ_RADIO_Handler+0xc82>
    9a64:	f001 fc44 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9a68:	e001      	b.n	9a6e <MPSL_IRQ_RADIO_Handler+0xc16>
    9a6a:	e00e      	b.n	9a8a <MPSL_IRQ_RADIO_Handler+0xc32>
    9a6c:	e005      	b.n	9a7a <MPSL_IRQ_RADIO_Handler+0xc22>
    9a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9a72:	6060      	str	r0, [r4, #4]
    9a74:	b007      	add	sp, #28
    9a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a7a:	6830      	ldr	r0, [r6, #0]
    9a7c:	1e40      	subs	r0, r0, #1
    9a7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9a82:	6020      	str	r0, [r4, #0]
    9a84:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9a88:	e7f3      	b.n	9a72 <MPSL_IRQ_RADIO_Handler+0xc1a>
    9a8a:	4601      	mov	r1, r0
    9a8c:	4558      	cmp	r0, fp
    9a8e:	da04      	bge.n	9a9a <MPSL_IRQ_RADIO_Handler+0xc42>
    9a90:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9a94:	2070      	movs	r0, #112	; 0x70
    9a96:	f002 fd01 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a9a:	4287      	cmp	r7, r0
    9a9c:	bfdc      	itt	le
    9a9e:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    9aa2:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    9aa6:	dd05      	ble.n	9ab4 <MPSL_IRQ_RADIO_Handler+0xc5c>
    9aa8:	2800      	cmp	r0, #0
    9aaa:	bfbc      	itt	lt
    9aac:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9ab0:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    9ab4:	4621      	mov	r1, r4
    9ab6:	f001 fc37 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9aba:	6820      	ldr	r0, [r4, #0]
    9abc:	f1b8 0f00 	cmp.w	r8, #0
    9ac0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9ac4:	f10a 0001 	add.w	r0, sl, #1
    9ac8:	6021      	str	r1, [r4, #0]
    9aca:	bf08      	it	eq
    9acc:	307a      	addeq	r0, #122	; 0x7a
    9ace:	d009      	beq.n	9ae4 <MPSL_IRQ_RADIO_Handler+0xc8c>
    9ad0:	f1b8 0f01 	cmp.w	r8, #1
    9ad4:	bf08      	it	eq
    9ad6:	3048      	addeq	r0, #72	; 0x48
    9ad8:	d004      	beq.n	9ae4 <MPSL_IRQ_RADIO_Handler+0xc8c>
    9ada:	f240 6139 	movw	r1, #1593	; 0x639
    9ade:	2070      	movs	r0, #112	; 0x70
    9ae0:	f002 fcdc 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ae4:	f001 fc04 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9ae8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9aec:	6061      	str	r1, [r4, #4]
    9aee:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    9af2:	aa01      	add	r2, sp, #4
    9af4:	4669      	mov	r1, sp
    9af6:	4648      	mov	r0, r9
    9af8:	6837      	ldr	r7, [r6, #0]
    9afa:	f001 fc15 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9afe:	f002 f937 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9b02:	f001 fbf5 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9b06:	4680      	mov	r8, r0
    9b08:	482c      	ldr	r0, [pc, #176]	; (9bbc <MPSL_IRQ_RADIO_Handler+0xd64>)
    9b0a:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9b0e:	2920      	cmp	r1, #32
    9b10:	d02a      	beq.n	9b68 <MPSL_IRQ_RADIO_Handler+0xd10>
    9b12:	68c0      	ldr	r0, [r0, #12]
    9b14:	1d40      	adds	r0, r0, #5
    9b16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b1a:	bf00      	nop
    9b1c:	e9d4 2100 	ldrd	r2, r1, [r4]
    9b20:	1a89      	subs	r1, r1, r2
    9b22:	4401      	add	r1, r0
    9b24:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9b28:	e9c4 0100 	strd	r0, r1, [r4]
    9b2c:	6831      	ldr	r1, [r6, #0]
    9b2e:	4281      	cmp	r1, r0
    9b30:	d902      	bls.n	9b38 <MPSL_IRQ_RADIO_Handler+0xce0>
    9b32:	68a0      	ldr	r0, [r4, #8]
    9b34:	1c40      	adds	r0, r0, #1
    9b36:	60a0      	str	r0, [r4, #8]
    9b38:	6832      	ldr	r2, [r6, #0]
    9b3a:	6928      	ldr	r0, [r5, #16]
    9b3c:	4621      	mov	r1, r4
    9b3e:	9b06      	ldr	r3, [sp, #24]
    9b40:	f7ff f9e6 	bl	8f10 <MPSL_IRQ_RADIO_Handler+0xb8>
    9b44:	2800      	cmp	r0, #0
    9b46:	bf1c      	itt	ne
    9b48:	b007      	addne	sp, #28
    9b4a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b4e:	e9d4 1000 	ldrd	r1, r0, [r4]
    9b52:	1a40      	subs	r0, r0, r1
    9b54:	6831      	ldr	r1, [r6, #0]
    9b56:	6021      	str	r1, [r4, #0]
    9b58:	6831      	ldr	r1, [r6, #0]
    9b5a:	4408      	add	r0, r1
    9b5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b60:	6060      	str	r0, [r4, #4]
    9b62:	b007      	add	sp, #28
    9b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b68:	3709      	adds	r7, #9
    9b6a:	f1b9 0f00 	cmp.w	r9, #0
    9b6e:	d016      	beq.n	9b9e <MPSL_IRQ_RADIO_Handler+0xd46>
    9b70:	f002 fc1c 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9b74:	b998      	cbnz	r0, 9b9e <MPSL_IRQ_RADIO_Handler+0xd46>
    9b76:	f002 fad3 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9b7a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9b7e:	bf08      	it	eq
    9b80:	200d      	moveq	r0, #13
    9b82:	d00b      	beq.n	9b9c <MPSL_IRQ_RADIO_Handler+0xd44>
    9b84:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9b88:	3856      	subs	r0, #86	; 0x56
    9b8a:	bf08      	it	eq
    9b8c:	201c      	moveq	r0, #28
    9b8e:	d005      	beq.n	9b9c <MPSL_IRQ_RADIO_Handler+0xd44>
    9b90:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9b94:	389f      	subs	r0, #159	; 0x9f
    9b96:	bf14      	ite	ne
    9b98:	2000      	movne	r0, #0
    9b9a:	2032      	moveq	r0, #50	; 0x32
    9b9c:	4407      	add	r7, r0
    9b9e:	9800      	ldr	r0, [sp, #0]
    9ba0:	4580      	cmp	r8, r0
    9ba2:	bf84      	itt	hi
    9ba4:	eba8 0000 	subhi.w	r0, r8, r0
    9ba8:	4407      	addhi	r7, r0
    9baa:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9bae:	e7b5      	b.n	9b1c <MPSL_IRQ_RADIO_Handler+0xcc4>
    9bb0:	1e848000 	.word	0x1e848000
    9bb4:	0f424000 	.word	0x0f424000
    9bb8:	1e847fff 	.word	0x1e847fff
    9bbc:	20001438 	.word	0x20001438
    9bc0:	b570      	push	{r4, r5, r6, lr}
    9bc2:	4d1e      	ldr	r5, [pc, #120]	; (9c3c <MPSL_IRQ_RADIO_Handler+0xde4>)
    9bc4:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9bc8:	2820      	cmp	r0, #32
    9bca:	bf18      	it	ne
    9bcc:	bd70      	popne	{r4, r5, r6, pc}
    9bce:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9bd2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9bd6:	4428      	add	r0, r5
    9bd8:	f890 4020 	ldrb.w	r4, [r0, #32]
    9bdc:	2c20      	cmp	r4, #32
    9bde:	d027      	beq.n	9c30 <MPSL_IRQ_RADIO_Handler+0xdd8>
    9be0:	4b17      	ldr	r3, [pc, #92]	; (9c40 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9be2:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9be6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9bea:	7849      	ldrb	r1, [r1, #1]
    9bec:	f880 1020 	strb.w	r1, [r0, #32]
    9bf0:	20ff      	movs	r0, #255	; 0xff
    9bf2:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9bf6:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9bfa:	4621      	mov	r1, r4
    9bfc:	2002      	movs	r0, #2
    9bfe:	f000 f891 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    9c02:	2000      	movs	r0, #0
    9c04:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9c08:	77a8      	strb	r0, [r5, #30]
    9c0a:	490e      	ldr	r1, [pc, #56]	; (9c44 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9c0c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9c10:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9c14:	7e00      	ldrb	r0, [r0, #24]
    9c16:	2800      	cmp	r0, #0
    9c18:	bf08      	it	eq
    9c1a:	f002 fda9 	bleq	c770 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9c1e:	2000      	movs	r0, #0
    9c20:	4909      	ldr	r1, [pc, #36]	; (9c48 <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9c22:	6849      	ldr	r1, [r1, #4]
    9c24:	2900      	cmp	r1, #0
    9c26:	bf08      	it	eq
    9c28:	bd70      	popeq	{r4, r5, r6, pc}
    9c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c2e:	4708      	bx	r1
    9c30:	f240 3132 	movw	r1, #818	; 0x332
    9c34:	2070      	movs	r0, #112	; 0x70
    9c36:	f002 fc31 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c3a:	0000      	.short	0x0000
    9c3c:	20001438 	.word	0x20001438
    9c40:	200013b8 	.word	0x200013b8
    9c44:	20001038 	.word	0x20001038
    9c48:	200002ec 	.word	0x200002ec
    9c4c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c50:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9d14 <MPSL_IRQ_RADIO_Handler+0xebc>
    9c54:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9c58:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9c5c:	4440      	add	r0, r8
    9c5e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9c62:	2c20      	cmp	r4, #32
    9c64:	bf08      	it	eq
    9c66:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9c6a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9d18 <MPSL_IRQ_RADIO_Handler+0xec0>
    9c6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9d1c <MPSL_IRQ_RADIO_Handler+0xec4>
    9c72:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9c76:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9c7a:	2607      	movs	r6, #7
    9c7c:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9c80:	2801      	cmp	r0, #1
    9c82:	d00e      	beq.n	9ca2 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9c84:	2804      	cmp	r0, #4
    9c86:	bf08      	it	eq
    9c88:	2602      	moveq	r6, #2
    9c8a:	d00a      	beq.n	9ca2 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9c8c:	2805      	cmp	r0, #5
    9c8e:	bf0c      	ite	eq
    9c90:	2603      	moveq	r6, #3
    9c92:	2806      	cmpne	r0, #6
    9c94:	d005      	beq.n	9ca2 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9c96:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9c9a:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c9e:	f002 fbfd 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ca2:	f1bb 0f00 	cmp.w	fp, #0
    9ca6:	bf18      	it	ne
    9ca8:	f3af 8000 	nopne.w
    9cac:	f3ef 8010 	mrs	r0, PRIMASK
    9cb0:	b672      	cpsid	i
    9cb2:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9cb6:	784a      	ldrb	r2, [r1, #1]
    9cb8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9cbc:	4441      	add	r1, r8
    9cbe:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9cc2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9cc6:	42a2      	cmp	r2, r4
    9cc8:	bf04      	itt	eq
    9cca:	2220      	moveq	r2, #32
    9ccc:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9cd0:	b1c0      	cbz	r0, 9d04 <MPSL_IRQ_RADIO_Handler+0xeac>
    9cd2:	462a      	mov	r2, r5
    9cd4:	4621      	mov	r1, r4
    9cd6:	2001      	movs	r0, #1
    9cd8:	f000 f824 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    9cdc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9ce0:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9ce4:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9ce8:	6840      	ldr	r0, [r0, #4]
    9cea:	4631      	mov	r1, r6
    9cec:	4790      	blx	r2
    9cee:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9cf2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9cf6:	4440      	add	r0, r8
    9cf8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9cfc:	2c20      	cmp	r4, #32
    9cfe:	d1ba      	bne.n	9c76 <MPSL_IRQ_RADIO_Handler+0xe1e>
    9d00:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d04:	4806      	ldr	r0, [pc, #24]	; (9d20 <MPSL_IRQ_RADIO_Handler+0xec8>)
    9d06:	2800      	cmp	r0, #0
    9d08:	bf18      	it	ne
    9d0a:	f3af 8000 	nopne.w
    9d0e:	b662      	cpsie	i
    9d10:	e7df      	b.n	9cd2 <MPSL_IRQ_RADIO_Handler+0xe7a>
    9d12:	0000      	.short	0x0000
    9d14:	20001438 	.word	0x20001438
    9d18:	00000000 	.word	0x00000000
    9d1c:	200013b8 	.word	0x200013b8
    9d20:	00000000 	.word	0x00000000
    9d24:	f8df c058 	ldr.w	ip, [pc, #88]	; 9d80 <MPSL_IRQ_RADIO_Handler+0xf28>
    9d28:	b510      	push	{r4, lr}
    9d2a:	2300      	movs	r3, #0
    9d2c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9d30:	2807      	cmp	r0, #7
    9d32:	d21f      	bcs.n	9d74 <MPSL_IRQ_RADIO_Handler+0xf1c>
    9d34:	e8df f000 	tbb	[pc, r0]
    9d38:	05050505 	.word	0x05050505
    9d3c:	00040404 	.word	0x00040404
    9d40:	2301      	movs	r3, #1
    9d42:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9d46:	2b00      	cmp	r3, #0
    9d48:	bf08      	it	eq
    9d4a:	bd10      	popeq	{r4, pc}
    9d4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9d50:	480c      	ldr	r0, [pc, #48]	; (9d84 <MPSL_IRQ_RADIO_Handler+0xf2c>)
    9d52:	4402      	add	r2, r0
    9d54:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9d58:	2820      	cmp	r0, #32
    9d5a:	bf0e      	itee	eq
    9d5c:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9d60:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9d64:	7041      	strbne	r1, [r0, #1]
    9d66:	2020      	movs	r0, #32
    9d68:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9d6c:	7058      	strb	r0, [r3, #1]
    9d6e:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9d72:	bd10      	pop	{r4, pc}
    9d74:	f240 216e 	movw	r1, #622	; 0x26e
    9d78:	2070      	movs	r0, #112	; 0x70
    9d7a:	f002 fb8f 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d7e:	0000      	.short	0x0000
    9d80:	200013b8 	.word	0x200013b8
    9d84:	20001438 	.word	0x20001438
    9d88:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9d8c:	460f      	mov	r7, r1
    9d8e:	4680      	mov	r8, r0
    9d90:	f8df a160 	ldr.w	sl, [pc, #352]	; 9ef4 <MPSL_IRQ_RADIO_Handler+0x109c>
    9d94:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9d98:	4450      	add	r0, sl
    9d9a:	f1b8 0f01 	cmp.w	r8, #1
    9d9e:	f890 4020 	ldrb.w	r4, [r0, #32]
    9da2:	4625      	mov	r5, r4
    9da4:	bf18      	it	ne
    9da6:	f1b8 0f02 	cmpne.w	r8, #2
    9daa:	d005      	beq.n	9db8 <MPSL_IRQ_RADIO_Handler+0xf60>
    9dac:	f640 21ac 	movw	r1, #2732	; 0xaac
    9db0:	f04f 0070 	mov.w	r0, #112	; 0x70
    9db4:	f002 fb72 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9db8:	f04f 0b00 	mov.w	fp, #0
    9dbc:	2d20      	cmp	r5, #32
    9dbe:	d042      	beq.n	9e46 <MPSL_IRQ_RADIO_Handler+0xfee>
    9dc0:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9dc4:	2600      	movs	r6, #0
    9dc6:	2800      	cmp	r0, #0
    9dc8:	bf08      	it	eq
    9dca:	2602      	moveq	r6, #2
    9dcc:	f001 fc16 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9dd0:	f8df c124 	ldr.w	ip, [pc, #292]	; 9ef8 <MPSL_IRQ_RADIO_Handler+0x10a0>
    9dd4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9dd8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9ddc:	688a      	ldr	r2, [r1, #8]
    9dde:	68c9      	ldr	r1, [r1, #12]
    9de0:	1a12      	subs	r2, r2, r0
    9de2:	1a09      	subs	r1, r1, r0
    9de4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9de8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9dec:	4296      	cmp	r6, r2
    9dee:	bf99      	ittee	ls
    9df0:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9df4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9df8:	4a40      	ldrhi	r2, [pc, #256]	; (9efc <MPSL_IRQ_RADIO_Handler+0x10a4>)
    9dfa:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9dfe:	d920      	bls.n	9e42 <MPSL_IRQ_RADIO_Handler+0xfea>
    9e00:	4622      	mov	r2, r4
    9e02:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9e06:	784c      	ldrb	r4, [r1, #1]
    9e08:	2c20      	cmp	r4, #32
    9e0a:	d012      	beq.n	9e32 <MPSL_IRQ_RADIO_Handler+0xfda>
    9e0c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9e10:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9e14:	688b      	ldr	r3, [r1, #8]
    9e16:	68c9      	ldr	r1, [r1, #12]
    9e18:	1a1b      	subs	r3, r3, r0
    9e1a:	1a09      	subs	r1, r1, r0
    9e1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9e20:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9e24:	429e      	cmp	r6, r3
    9e26:	bf9c      	itt	ls
    9e28:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9e2c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9e30:	d8e6      	bhi.n	9e00 <MPSL_IRQ_RADIO_Handler+0xfa8>
    9e32:	2a20      	cmp	r2, #32
    9e34:	d005      	beq.n	9e42 <MPSL_IRQ_RADIO_Handler+0xfea>
    9e36:	463b      	mov	r3, r7
    9e38:	2120      	movs	r1, #32
    9e3a:	2004      	movs	r0, #4
    9e3c:	f7ff f82c 	bl	8e98 <MPSL_IRQ_RADIO_Handler+0x40>
    9e40:	4604      	mov	r4, r0
    9e42:	42ac      	cmp	r4, r5
    9e44:	d116      	bne.n	9e74 <MPSL_IRQ_RADIO_Handler+0x101c>
    9e46:	482e      	ldr	r0, [pc, #184]	; (9f00 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9e48:	2800      	cmp	r0, #0
    9e4a:	bf18      	it	ne
    9e4c:	f3af 8000 	nopne.w
    9e50:	f001 fbd4 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9e54:	4603      	mov	r3, r0
    9e56:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9e5a:	2820      	cmp	r0, #32
    9e5c:	d00d      	beq.n	9e7a <MPSL_IRQ_RADIO_Handler+0x1022>
    9e5e:	f8da 0008 	ldr.w	r0, [sl, #8]
    9e62:	1c99      	adds	r1, r3, #2
    9e64:	1a08      	subs	r0, r1, r0
    9e66:	0200      	lsls	r0, r0, #8
    9e68:	17c1      	asrs	r1, r0, #31
    9e6a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9e6e:	1200      	asrs	r0, r0, #8
    9e70:	2800      	cmp	r0, #0
    9e72:	dd02      	ble.n	9e7a <MPSL_IRQ_RADIO_Handler+0x1022>
    9e74:	2000      	movs	r0, #0
    9e76:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e7a:	2d20      	cmp	r5, #32
    9e7c:	d014      	beq.n	9ea8 <MPSL_IRQ_RADIO_Handler+0x1050>
    9e7e:	462a      	mov	r2, r5
    9e80:	4641      	mov	r1, r8
    9e82:	4618      	mov	r0, r3
    9e84:	f7ff fa9e 	bl	93c4 <MPSL_IRQ_RADIO_Handler+0x56c>
    9e88:	2800      	cmp	r0, #0
    9e8a:	bf1e      	ittt	ne
    9e8c:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9e90:	2002      	movne	r0, #2
    9e92:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e96:	463b      	mov	r3, r7
    9e98:	462a      	mov	r2, r5
    9e9a:	2120      	movs	r1, #32
    9e9c:	2004      	movs	r0, #4
    9e9e:	f7fe fffb 	bl	8e98 <MPSL_IRQ_RADIO_Handler+0x40>
    9ea2:	2000      	movs	r0, #0
    9ea4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ea8:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9eac:	f1b0 3fff 	cmp.w	r0, #4294967295
    9eb0:	d005      	beq.n	9ebe <MPSL_IRQ_RADIO_Handler+0x1066>
    9eb2:	f002 f93b 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9eb6:	f04f 30ff 	mov.w	r0, #4294967295
    9eba:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9ebe:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9ec2:	b120      	cbz	r0, 9ece <MPSL_IRQ_RADIO_Handler+0x1076>
    9ec4:	2005      	movs	r0, #5
    9ec6:	f001 fe0f 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9eca:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9ece:	2004      	movs	r0, #4
    9ed0:	f001 fe0a 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ed4:	f001 fe78 	bl	bbc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9ed8:	2020      	movs	r0, #32
    9eda:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9ede:	4809      	ldr	r0, [pc, #36]	; (9f04 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9ee0:	6880      	ldr	r0, [r0, #8]
    9ee2:	f8c0 b000 	str.w	fp, [r0]
    9ee6:	4808      	ldr	r0, [pc, #32]	; (9f08 <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9ee8:	f8c0 b000 	str.w	fp, [r0]
    9eec:	2001      	movs	r0, #1
    9eee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ef2:	0000      	.short	0x0000
    9ef4:	20001438 	.word	0x20001438
    9ef8:	20001038 	.word	0x20001038
    9efc:	200013b8 	.word	0x200013b8
    9f00:	00000000 	.word	0x00000000
    9f04:	200002ec 	.word	0x200002ec
    9f08:	40000508 	.word	0x40000508

00009f0c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9f0c:	4906      	ldr	r1, [pc, #24]	; (9f28 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9f0e:	b510      	push	{r4, lr}
    9f10:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9f14:	2a20      	cmp	r2, #32
    9f16:	bf1c      	itt	ne
    9f18:	7788      	strbne	r0, [r1, #30]
    9f1a:	bd10      	popne	{r4, pc}
    9f1c:	f240 319a 	movw	r1, #922	; 0x39a
    9f20:	2070      	movs	r0, #112	; 0x70
    9f22:	f002 fabb 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f26:	0000      	.short	0x0000
    9f28:	20001438 	.word	0x20001438

00009f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f30:	4e69      	ldr	r6, [pc, #420]	; (a0d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9f32:	4607      	mov	r7, r0
    9f34:	b08d      	sub	sp, #52	; 0x34
    9f36:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9f3a:	4688      	mov	r8, r1
    9f3c:	2820      	cmp	r0, #32
    9f3e:	d055      	beq.n	9fec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9f40:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9f44:	f106 0408 	add.w	r4, r6, #8
    9f48:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9f4c:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9f50:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9f54:	2020      	movs	r0, #32
    9f56:	f88d 0020 	strb.w	r0, [sp, #32]
    9f5a:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9f5e:	aa0a      	add	r2, sp, #40	; 0x28
    9f60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9f64:	4430      	add	r0, r6
    9f66:	a909      	add	r1, sp, #36	; 0x24
    9f68:	f890 5020 	ldrb.w	r5, [r0, #32]
    9f6c:	68f0      	ldr	r0, [r6, #12]
    9f6e:	9002      	str	r0, [sp, #8]
    9f70:	6830      	ldr	r0, [r6, #0]
    9f72:	4438      	add	r0, r7
    9f74:	f001 f9d8 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9f78:	f8da 000c 	ldr.w	r0, [sl, #12]
    9f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
    9f7e:	2f65      	cmp	r7, #101	; 0x65
    9f80:	4408      	add	r0, r1
    9f82:	d338      	bcc.n	9ff6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9f84:	4a55      	ldr	r2, [pc, #340]	; (a0dc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    9f86:	2100      	movs	r1, #0
    9f88:	1bd2      	subs	r2, r2, r7
    9f8a:	eb71 0201 	sbcs.w	r2, r1, r1
    9f8e:	d332      	bcc.n	9ff6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9f90:	6822      	ldr	r2, [r4, #0]
    9f92:	1a82      	subs	r2, r0, r2
    9f94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9f98:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9f9c:	d82b      	bhi.n	9ff6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9f9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9fa2:	6060      	str	r0, [r4, #4]
    9fa4:	4630      	mov	r0, r6
    9fa6:	f884 8010 	strb.w	r8, [r4, #16]
    9faa:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    9fae:	f10d 0a20 	add.w	sl, sp, #32
    9fb2:	2d20      	cmp	r5, #32
    9fb4:	bf1c      	itt	ne
    9fb6:	494a      	ldrne	r1, [pc, #296]	; (a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9fb8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9fbc:	d050      	beq.n	a060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9fbe:	bf00      	nop
    9fc0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9fc4:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9fc8:	6861      	ldr	r1, [r4, #4]
    9fca:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9fce:	f108 0008 	add.w	r0, r8, #8
    9fd2:	1a71      	subs	r1, r6, r1
    9fd4:	0209      	lsls	r1, r1, #8
    9fd6:	17ca      	asrs	r2, r1, #31
    9fd8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9fdc:	1209      	asrs	r1, r1, #8
    9fde:	d42d      	bmi.n	a03c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9fe0:	89c0      	ldrh	r0, [r0, #14]
    9fe2:	2800      	cmp	r0, #0
    9fe4:	d03c      	beq.n	a060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9fe6:	89e0      	ldrh	r0, [r4, #14]
    9fe8:	b148      	cbz	r0, 9ffe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9fea:	e039      	b.n	a060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9fec:	f640 3173 	movw	r1, #2931	; 0xb73
    9ff0:	2070      	movs	r0, #112	; 0x70
    9ff2:	f002 fa53 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ff6:	b00d      	add	sp, #52	; 0x34
    9ff8:	2001      	movs	r0, #1
    9ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ffe:	6820      	ldr	r0, [r4, #0]
    a000:	900c      	str	r0, [sp, #48]	; 0x30
    a002:	f002 f88d 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a006:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a00a:	bf08      	it	eq
    a00c:	200d      	moveq	r0, #13
    a00e:	d00b      	beq.n	a028 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a010:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a014:	3856      	subs	r0, #86	; 0x56
    a016:	bf08      	it	eq
    a018:	201c      	moveq	r0, #28
    a01a:	d005      	beq.n	a028 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a01c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a020:	389f      	subs	r0, #159	; 0x9f
    a022:	bf14      	ite	ne
    a024:	2000      	movne	r0, #0
    a026:	2032      	moveq	r0, #50	; 0x32
    a028:	1c41      	adds	r1, r0, #1
    a02a:	980c      	ldr	r0, [sp, #48]	; 0x30
    a02c:	1a30      	subs	r0, r6, r0
    a02e:	0200      	lsls	r0, r0, #8
    a030:	17c2      	asrs	r2, r0, #31
    a032:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    a036:	1200      	asrs	r0, r0, #8
    a038:	4288      	cmp	r0, r1
    a03a:	da11      	bge.n	a060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a03c:	f88a 5000 	strb.w	r5, [sl]
    a040:	f898 1018 	ldrb.w	r1, [r8, #24]
    a044:	7c20      	ldrb	r0, [r4, #16]
    a046:	4281      	cmp	r1, r0
    a048:	d805      	bhi.n	a056 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    a04a:	9802      	ldr	r0, [sp, #8]
    a04c:	6060      	str	r0, [r4, #4]
    a04e:	b00d      	add	sp, #52	; 0x34
    a050:	2002      	movs	r0, #2
    a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a056:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    a05a:	7845      	ldrb	r5, [r0, #1]
    a05c:	2d20      	cmp	r5, #32
    a05e:	d1af      	bne.n	9fc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    a060:	2005      	movs	r0, #5
    a062:	f001 fd41 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a066:	4c1c      	ldr	r4, [pc, #112]	; (a0d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a068:	f04f 30ff 	mov.w	r0, #4294967295
    a06c:	6060      	str	r0, [r4, #4]
    a06e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    a072:	f89d 2020 	ldrb.w	r2, [sp, #32]
    a076:	2120      	movs	r1, #32
    a078:	2a20      	cmp	r2, #32
    a07a:	d003      	beq.n	a084 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    a07c:	2005      	movs	r0, #5
    a07e:	f7fe ff0b 	bl	8e98 <MPSL_IRQ_RADIO_Handler+0x40>
    a082:	e004      	b.n	a08e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    a084:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a088:	4420      	add	r0, r4
    a08a:	f890 0020 	ldrb.w	r0, [r0, #32]
    a08e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    a092:	4913      	ldr	r1, [pc, #76]	; (a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a094:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    a098:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    a09c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a0a0:	7048      	strb	r0, [r1, #1]
    a0a2:	6820      	ldr	r0, [r4, #0]
    a0a4:	4438      	add	r0, r7
    a0a6:	6020      	str	r0, [r4, #0]
    a0a8:	20ff      	movs	r0, #255	; 0xff
    a0aa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    a0ae:	7e60      	ldrb	r0, [r4, #25]
    a0b0:	2801      	cmp	r0, #1
    a0b2:	d105      	bne.n	a0c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    a0b4:	68e0      	ldr	r0, [r4, #12]
    a0b6:	1e40      	subs	r0, r0, #1
    a0b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a0bc:	f001 fb78 	bl	b7b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a0c0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a0c4:	2820      	cmp	r0, #32
    a0c6:	d003      	beq.n	a0d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    a0c8:	4806      	ldr	r0, [pc, #24]	; (a0e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    a0ca:	7840      	ldrb	r0, [r0, #1]
    a0cc:	f002 faba 	bl	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a0d0:	b00d      	add	sp, #52	; 0x34
    a0d2:	2000      	movs	r0, #0
    a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0d8:	20001438 	.word	0x20001438
    a0dc:	0f424000 	.word	0x0f424000
    a0e0:	200013b8 	.word	0x200013b8
    a0e4:	200002ec 	.word	0x200002ec

0000a0e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a0e8:	4806      	ldr	r0, [pc, #24]	; (a104 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a0ea:	b510      	push	{r4, lr}
    a0ec:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a0f0:	2920      	cmp	r1, #32
    a0f2:	bf1c      	itt	ne
    a0f4:	7e00      	ldrbne	r0, [r0, #24]
    a0f6:	bd10      	popne	{r4, pc}
    a0f8:	f640 316d 	movw	r1, #2925	; 0xb6d
    a0fc:	2070      	movs	r0, #112	; 0x70
    a0fe:	f002 f9cd 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a102:	0000      	.short	0x0000
    a104:	20001438 	.word	0x20001438

0000a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a10a:	4d6f      	ldr	r5, [pc, #444]	; (a2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a10c:	2601      	movs	r6, #1
    a10e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a112:	4a6e      	ldr	r2, [pc, #440]	; (a2cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a114:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a116:	2808      	cmp	r0, #8
    a118:	d272      	bcs.n	a200 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a11a:	e8df f000 	tbb	[pc, r0]
    a11e:	7704      	.short	0x7704
    a120:	44cfb19f 	.word	0x44cfb19f
    a124:	bbb6      	.short	0xbbb6
    a126:	f1b1 3fff 	cmp.w	r1, #4294967295
    a12a:	d104      	bne.n	a136 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a12c:	f002 f81a 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a130:	f001 fa64 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a134:	62e0      	str	r0, [r4, #44]	; 0x2c
    a136:	8ae0      	ldrh	r0, [r4, #22]
    a138:	b110      	cbz	r0, a140 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a13a:	f002 f937 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a13e:	b180      	cbz	r0, a162 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a140:	f7ff fd3e 	bl	9bc0 <MPSL_IRQ_RADIO_Handler+0xd68>
    a144:	20ff      	movs	r0, #255	; 0xff
    a146:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a14a:	6861      	ldr	r1, [r4, #4]
    a14c:	f1b1 3fff 	cmp.w	r1, #4294967295
    a150:	d003      	beq.n	a15a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a152:	2005      	movs	r0, #5
    a154:	f001 fc12 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a158:	b140      	cbz	r0, a16c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a15a:	7e60      	ldrb	r0, [r4, #25]
    a15c:	2801      	cmp	r0, #1
    a15e:	d110      	bne.n	a182 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a160:	e009      	b.n	a176 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a162:	f640 0169 	movw	r1, #2153	; 0x869
    a166:	2070      	movs	r0, #112	; 0x70
    a168:	f002 f998 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a16c:	f640 016e 	movw	r1, #2158	; 0x86e
    a170:	2070      	movs	r0, #112	; 0x70
    a172:	f002 f993 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a176:	68e0      	ldr	r0, [r4, #12]
    a178:	1e40      	subs	r0, r0, #1
    a17a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a17e:	f001 fb17 	bl	b7b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a182:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a186:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a18a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a18e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a192:	6840      	ldr	r0, [r0, #4]
    a194:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a198:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a19c:	b001      	add	sp, #4
    a19e:	2101      	movs	r1, #1
    a1a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1a4:	4710      	bx	r2
    a1a6:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a1aa:	b158      	cbz	r0, a1c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a1ac:	f1b1 3fff 	cmp.w	r1, #4294967295
    a1b0:	d104      	bne.n	a1bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a1b2:	f001 ffd7 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a1b6:	f001 fa21 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a1ba:	62e0      	str	r0, [r4, #44]	; 0x2c
    a1bc:	2000      	movs	r0, #0
    a1be:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1c4:	f7ff fcfc 	bl	9bc0 <MPSL_IRQ_RADIO_Handler+0xd68>
    a1c8:	f04f 30ff 	mov.w	r0, #4294967295
    a1cc:	6060      	str	r0, [r4, #4]
    a1ce:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a1d2:	f88d 0000 	strb.w	r0, [sp]
    a1d6:	f89d 0000 	ldrb.w	r0, [sp]
    a1da:	b190      	cbz	r0, a202 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a1dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a1e0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a1e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a1e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a1ec:	6840      	ldr	r0, [r0, #4]
    a1ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a1f2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a1f6:	b001      	add	sp, #4
    a1f8:	2106      	movs	r1, #6
    a1fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1fe:	4710      	bx	r2
    a200:	e05c      	b.n	a2bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a202:	f640 0185 	movw	r1, #2181	; 0x885
    a206:	2070      	movs	r0, #112	; 0x70
    a208:	f002 f948 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a20c:	f7ff fcd8 	bl	9bc0 <MPSL_IRQ_RADIO_Handler+0xd68>
    a210:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a214:	f002 f8ca 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a218:	b120      	cbz	r0, a224 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a21a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a21c:	f1b0 3fff 	cmp.w	r0, #4294967295
    a220:	d005      	beq.n	a22e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a222:	e009      	b.n	a238 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a224:	f640 0193 	movw	r1, #2195	; 0x893
    a228:	2070      	movs	r0, #112	; 0x70
    a22a:	f002 f937 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a22e:	f001 ff99 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a232:	f001 f9e3 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a236:	62e0      	str	r0, [r4, #44]	; 0x2c
    a238:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a23c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a240:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a244:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a248:	6840      	ldr	r0, [r0, #4]
    a24a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a24e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a252:	b001      	add	sp, #4
    a254:	2100      	movs	r1, #0
    a256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a25a:	4710      	bx	r2
    a25c:	f001 fd6a 	bl	bd34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a260:	8ae0      	ldrh	r0, [r4, #22]
    a262:	b110      	cbz	r0, a26a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a264:	f002 f8a2 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a268:	b128      	cbz	r0, a276 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a26a:	f001 fd77 	bl	bd5c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a26e:	2800      	cmp	r0, #0
    a270:	bf18      	it	ne
    a272:	7766      	strbne	r6, [r4, #29]
    a274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a276:	f640 019d 	movw	r1, #2205	; 0x89d
    a27a:	2070      	movs	r0, #112	; 0x70
    a27c:	f002 f90e 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a280:	4813      	ldr	r0, [pc, #76]	; (a2d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a282:	6006      	str	r6, [r0, #0]
    a284:	6890      	ldr	r0, [r2, #8]
    a286:	6006      	str	r6, [r0, #0]
    a288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a28a:	7810      	ldrb	r0, [r2, #0]
    a28c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a290:	f002 b9d8 	b.w	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a294:	f7ff fc94 	bl	9bc0 <MPSL_IRQ_RADIO_Handler+0xd68>
    a298:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a29c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a2a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a2a4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a2a8:	6840      	ldr	r0, [r0, #4]
    a2aa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a2ae:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a2b2:	b001      	add	sp, #4
    a2b4:	2105      	movs	r1, #5
    a2b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a2ba:	4710      	bx	r2
    a2bc:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a2c0:	2070      	movs	r0, #112	; 0x70
    a2c2:	f002 f8eb 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2c6:	0000      	.short	0x0000
    a2c8:	20001038 	.word	0x20001038
    a2cc:	200002ec 	.word	0x200002ec
    a2d0:	40000508 	.word	0x40000508

0000a2d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a2d4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2d8:	4682      	mov	sl, r0
    a2da:	48ed      	ldr	r0, [pc, #948]	; (a690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3bc>)
    a2dc:	b08d      	sub	sp, #52	; 0x34
    a2de:	6800      	ldr	r0, [r0, #0]
    a2e0:	4dec      	ldr	r5, [pc, #944]	; (a694 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>)
    a2e2:	05c0      	lsls	r0, r0, #23
    a2e4:	0dc0      	lsrs	r0, r0, #23
    a2e6:	d00e      	beq.n	a306 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a2e8:	3810      	subs	r0, #16
    a2ea:	b240      	sxtb	r0, r0
    a2ec:	2800      	cmp	r0, #0
    a2ee:	bfb8      	it	lt
    a2f0:	f000 000f 	andlt.w	r0, r0, #15
    a2f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a2f8:	bfac      	ite	ge
    a2fa:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a2fe:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a302:	0940      	lsrs	r0, r0, #5
    a304:	d00d      	beq.n	a322 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a306:	980e      	ldr	r0, [sp, #56]	; 0x38
    a308:	f04f 0b00 	mov.w	fp, #0
    a30c:	7800      	ldrb	r0, [r0, #0]
    a30e:	2800      	cmp	r0, #0
    a310:	bf18      	it	ne
    a312:	2801      	cmpne	r0, #1
    a314:	d018      	beq.n	a348 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a316:	f240 713b 	movw	r1, #1851	; 0x73b
    a31a:	f04f 0070 	mov.w	r0, #112	; 0x70
    a31e:	f002 f8bd 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a322:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a326:	f04f 0b01 	mov.w	fp, #1
    a32a:	2820      	cmp	r0, #32
    a32c:	d007      	beq.n	a33e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a32e:	980e      	ldr	r0, [sp, #56]	; 0x38
    a330:	7800      	ldrb	r0, [r0, #0]
    a332:	b148      	cbz	r0, a348 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a334:	f240 7137 	movw	r1, #1847	; 0x737
    a338:	2070      	movs	r0, #112	; 0x70
    a33a:	f002 f8af 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a33e:	f240 7134 	movw	r1, #1844	; 0x734
    a342:	2070      	movs	r0, #112	; 0x70
    a344:	f002 f8aa 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a348:	4cd3      	ldr	r4, [pc, #844]	; (a698 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a34a:	b124      	cbz	r4, a356 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a34c:	2100      	movs	r1, #0
    a34e:	f240 703e 	movw	r0, #1854	; 0x73e
    a352:	f3af 8000 	nop.w
    a356:	2000      	movs	r0, #0
    a358:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    a35c:	49cf      	ldr	r1, [pc, #828]	; (a69c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a35e:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a362:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a366:	f04f 0901 	mov.w	r9, #1
    a36a:	9000      	str	r0, [sp, #0]
    a36c:	b124      	cbz	r4, a378 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a36e:	2100      	movs	r1, #0
    a370:	f240 7049 	movw	r0, #1865	; 0x749
    a374:	f3af 8000 	nop.w
    a378:	f1b9 0f00 	cmp.w	r9, #0
    a37c:	d00a      	beq.n	a394 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a37e:	bf00      	nop
    a380:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a384:	f04f 0800 	mov.w	r8, #0
    a388:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a38c:	f1bb 0f00 	cmp.w	fp, #0
    a390:	d007      	beq.n	a3a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a392:	e038      	b.n	a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a394:	48c2      	ldr	r0, [pc, #776]	; (a6a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a396:	2800      	cmp	r0, #0
    a398:	bf18      	it	ne
    a39a:	f3af 8000 	nopne.w
    a39e:	b662      	cpsie	i
    a3a0:	e7ee      	b.n	a380 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a3a2:	4637      	mov	r7, r6
    a3a4:	2001      	movs	r0, #1
    a3a6:	ea20 0607 	bic.w	r6, r0, r7
    a3aa:	48be      	ldr	r0, [pc, #760]	; (a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a3ac:	2240      	movs	r2, #64	; 0x40
    a3ae:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a3b2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a3b6:	f006 fcfb 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a3ba:	b124      	cbz	r4, a3c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a3bc:	2100      	movs	r1, #0
    a3be:	f240 505e 	movw	r0, #1374	; 0x55e
    a3c2:	f3af 8000 	nop.w
    a3c6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a3ca:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a3ce:	4429      	add	r1, r5
    a3d0:	4428      	add	r0, r5
    a3d2:	8c0a      	ldrh	r2, [r1, #32]
    a3d4:	8402      	strh	r2, [r0, #32]
    a3d6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a3da:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a3de:	b124      	cbz	r4, a3ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a3e0:	2100      	movs	r1, #0
    a3e2:	f240 5062 	movw	r0, #1378	; 0x562
    a3e6:	f3af 8000 	nop.w
    a3ea:	b124      	cbz	r4, a3f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a3ec:	2100      	movs	r1, #0
    a3ee:	f240 7053 	movw	r0, #1875	; 0x753
    a3f2:	f3af 8000 	nop.w
    a3f6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a3fa:	f88d 0018 	strb.w	r0, [sp, #24]
    a3fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a402:	2800      	cmp	r0, #0
    a404:	d1b2      	bne.n	a36c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a406:	b124      	cbz	r4, a412 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a408:	2100      	movs	r1, #0
    a40a:	f240 705d 	movw	r0, #1885	; 0x75d
    a40e:	f3af 8000 	nop.w
    a412:	a806      	add	r0, sp, #24
    a414:	f001 f8f8 	bl	b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a41c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    a420:	4633      	mov	r3, r6
    a422:	aa01      	add	r2, sp, #4
    a424:	a808      	add	r0, sp, #32
    a426:	990e      	ldr	r1, [sp, #56]	; 0x38
    a428:	f7ff fa68 	bl	98fc <MPSL_IRQ_RADIO_Handler+0xaa4>
    a42c:	b124      	cbz	r4, a438 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a42e:	2100      	movs	r1, #0
    a430:	f240 7064 	movw	r0, #1892	; 0x764
    a434:	f3af 8000 	nop.w
    a438:	4a9a      	ldr	r2, [pc, #616]	; (a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a43a:	9908      	ldr	r1, [sp, #32]
    a43c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a440:	a801      	add	r0, sp, #4
    a442:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a446:	2a01      	cmp	r2, #1
    a448:	bf18      	it	ne
    a44a:	2a02      	cmpne	r2, #2
    a44c:	d138      	bne.n	a4c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a44e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    a452:	9a01      	ldr	r2, [sp, #4]
    a454:	9b02      	ldr	r3, [sp, #8]
    a456:	eba2 0201 	sub.w	r2, r2, r1
    a45a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a45e:	eba3 0101 	sub.w	r1, r3, r1
    a462:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a466:	2a02      	cmp	r2, #2
    a468:	d360      	bcc.n	a52c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a46a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a46e:	bf98      	it	ls
    a470:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a474:	d85a      	bhi.n	a52c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a476:	f04f 0801 	mov.w	r8, #1
    a47a:	ab07      	add	r3, sp, #28
    a47c:	aa06      	add	r2, sp, #24
    a47e:	4631      	mov	r1, r6
    a480:	f7fe fefe 	bl	9280 <MPSL_IRQ_RADIO_Handler+0x428>
    a484:	2800      	cmp	r0, #0
    a486:	d059      	beq.n	a53c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    a488:	f89d 1018 	ldrb.w	r1, [sp, #24]
    a48c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    a490:	4633      	mov	r3, r6
    a492:	428a      	cmp	r2, r1
    a494:	d056      	beq.n	a544 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a496:	2005      	movs	r0, #5
    a498:	f7fe fcfe 	bl	8e98 <MPSL_IRQ_RADIO_Handler+0x40>
    a49c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a4a0:	7048      	strb	r0, [r1, #1]
    a4a2:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a4a6:	2820      	cmp	r0, #32
    a4a8:	bf1c      	itt	ne
    a4aa:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a4ae:	f880 a001 	strbne.w	sl, [r0, #1]
    a4b2:	d053      	beq.n	a55c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x288>
    a4b4:	4632      	mov	r2, r6
    a4b6:	4651      	mov	r1, sl
    a4b8:	f05f 0003 	movs.w	r0, #3
    a4bc:	f7ff fc32 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    a4c0:	b124      	cbz	r4, a4cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a4c2:	2100      	movs	r1, #0
    a4c4:	f240 7069 	movw	r0, #1897	; 0x769
    a4c8:	f3af 8000 	nop.w
    a4cc:	4876      	ldr	r0, [pc, #472]	; (a6a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a4ce:	2800      	cmp	r0, #0
    a4d0:	bf18      	it	ne
    a4d2:	f3af 8000 	nopne.w
    a4d6:	f3ef 8910 	mrs	r9, PRIMASK
    a4da:	b672      	cpsid	i
    a4dc:	b124      	cbz	r4, a4e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a4de:	2100      	movs	r1, #0
    a4e0:	f240 706f 	movw	r0, #1903	; 0x76f
    a4e4:	f3af 8000 	nop.w
    a4e8:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a4ec:	f88d 0018 	strb.w	r0, [sp, #24]
    a4f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a4f4:	2800      	cmp	r0, #0
    a4f6:	f47f af39 	bne.w	a36c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a4fa:	b124      	cbz	r4, a506 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a4fc:	2100      	movs	r1, #0
    a4fe:	f240 7077 	movw	r0, #1911	; 0x777
    a502:	f3af 8000 	nop.w
    a506:	e89d 108f 	ldmia.w	sp, {r0, r1, r2, r3, r7, ip}
    a50a:	f100 0008 	add.w	r0, r0, #8
    a50e:	f1b8 0f00 	cmp.w	r8, #0
    a512:	e880 108e 	stmia.w	r0, {r1, r2, r3, r7, ip}
    a516:	d051      	beq.n	a5bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>
    a518:	b124      	cbz	r4, a524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x250>
    a51a:	2100      	movs	r1, #0
    a51c:	f240 7084 	movw	r0, #1924	; 0x784
    a520:	f3af 8000 	nop.w
    a524:	f1bb 0f00 	cmp.w	fp, #0
    a528:	d139      	bne.n	a59e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a52a:	e01f      	b.n	a56c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    a52c:	4632      	mov	r2, r6
    a52e:	4651      	mov	r1, sl
    a530:	2004      	movs	r0, #4
    a532:	f7ff fbf7 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    a536:	f04f 0801 	mov.w	r8, #1
    a53a:	e7c1      	b.n	a4c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a53c:	4632      	mov	r2, r6
    a53e:	4651      	mov	r1, sl
    a540:	2004      	movs	r0, #4
    a542:	e7bb      	b.n	a4bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a544:	2920      	cmp	r1, #32
    a546:	bf19      	ittee	ne
    a548:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a54c:	7840      	ldrbne	r0, [r0, #1]
    a54e:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a552:	4428      	addeq	r0, r5
    a554:	bf08      	it	eq
    a556:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a55a:	e79f      	b.n	a49c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a55c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a560:	4429      	add	r1, r5
    a562:	f881 a020 	strb.w	sl, [r1, #32]
    a566:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    a56a:	e7a3      	b.n	a4b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a56c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a56e:	f010 0fff 	tst.w	r0, #255	; 0xff
    a572:	d014      	beq.n	a59e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a574:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a578:	2820      	cmp	r0, #32
    a57a:	d110      	bne.n	a59e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a57c:	b124      	cbz	r4, a588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    a57e:	2100      	movs	r1, #0
    a580:	f240 7089 	movw	r0, #1929	; 0x789
    a584:	f3af 8000 	nop.w
    a588:	4631      	mov	r1, r6
    a58a:	2002      	movs	r0, #2
    a58c:	f7ff fbfc 	bl	9d88 <MPSL_IRQ_RADIO_Handler+0xf30>
    a590:	900a      	str	r0, [sp, #40]	; 0x28
    a592:	b920      	cbnz	r0, a59e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a594:	980e      	ldr	r0, [sp, #56]	; 0x38
    a596:	7800      	ldrb	r0, [r0, #0]
    a598:	b1e8      	cbz	r0, a5d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x302>
    a59a:	2801      	cmp	r0, #1
    a59c:	d02a      	beq.n	a5f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    a59e:	b124      	cbz	r4, a5aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d6>
    a5a0:	2100      	movs	r1, #0
    a5a2:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a5a6:	f3af 8000 	nop.w
    a5aa:	20ff      	movs	r0, #255	; 0xff
    a5ac:	f1bb 0f00 	cmp.w	fp, #0
    a5b0:	bf18      	it	ne
    a5b2:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a5b6:	d026      	beq.n	a606 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x332>
    a5b8:	f04f 0801 	mov.w	r8, #1
    a5bc:	b124      	cbz	r4, a5c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    a5be:	2100      	movs	r1, #0
    a5c0:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a5c4:	f3af 8000 	nop.w
    a5c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    a5ca:	4e38      	ldr	r6, [pc, #224]	; (a6ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a5cc:	2802      	cmp	r0, #2
    a5ce:	d023      	beq.n	a618 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x344>
    a5d0:	2801      	cmp	r0, #1
    a5d2:	d029      	beq.n	a628 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    a5d4:	e02d      	b.n	a632 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a5d6:	b124      	cbz	r4, a5e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    a5d8:	2100      	movs	r1, #0
    a5da:	f240 7091 	movw	r0, #1937	; 0x791
    a5de:	f3af 8000 	nop.w
    a5e2:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a5e6:	4651      	mov	r1, sl
    a5e8:	2004      	movs	r0, #4
    a5ea:	f7ff fb9b 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    a5ee:	f04f 0801 	mov.w	r8, #1
    a5f2:	e7e3      	b.n	a5bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>
    a5f4:	2c00      	cmp	r4, #0
    a5f6:	f43f aeb9 	beq.w	a36c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a5fa:	2100      	movs	r1, #0
    a5fc:	f240 709c 	movw	r0, #1948	; 0x79c
    a600:	f3af 8000 	nop.w
    a604:	e6b2      	b.n	a36c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a606:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a60a:	2101      	movs	r1, #1
    a60c:	4391      	bics	r1, r2
    a60e:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a612:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a616:	e7cf      	b.n	a5b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>
    a618:	68a8      	ldr	r0, [r5, #8]
    a61a:	9908      	ldr	r1, [sp, #32]
    a61c:	1a40      	subs	r0, r0, r1
    a61e:	f006 fa46 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a622:	6871      	ldr	r1, [r6, #4]
    a624:	b921      	cbnz	r1, a630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a626:	e004      	b.n	a632 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a628:	6871      	ldr	r1, [r6, #4]
    a62a:	f04f 30ff 	mov.w	r0, #4294967295
    a62e:	b101      	cbz	r1, a632 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a630:	4788      	blx	r1
    a632:	f1b9 0f00 	cmp.w	r9, #0
    a636:	d024      	beq.n	a682 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a638:	b124      	cbz	r4, a644 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    a63a:	2100      	movs	r1, #0
    a63c:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a640:	f3af 8000 	nop.w
    a644:	f1b8 0f00 	cmp.w	r8, #0
    a648:	d011      	beq.n	a66e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    a64a:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a64e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a652:	4428      	add	r0, r5
    a654:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a658:	2820      	cmp	r0, #32
    a65a:	d008      	beq.n	a66e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    a65c:	b124      	cbz	r4, a668 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>
    a65e:	2100      	movs	r1, #0
    a660:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a664:	f3af 8000 	nop.w
    a668:	7870      	ldrb	r0, [r6, #1]
    a66a:	f001 ffeb 	bl	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a66e:	b124      	cbz	r4, a67a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    a670:	2100      	movs	r1, #0
    a672:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a676:	f3af 8000 	nop.w
    a67a:	b00f      	add	sp, #60	; 0x3c
    a67c:	4640      	mov	r0, r8
    a67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a682:	4807      	ldr	r0, [pc, #28]	; (a6a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a684:	2800      	cmp	r0, #0
    a686:	bf18      	it	ne
    a688:	f3af 8000 	nopne.w
    a68c:	b662      	cpsie	i
    a68e:	e7d3      	b.n	a638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a690:	e000ed04 	.word	0xe000ed04
    a694:	20001438 	.word	0x20001438
    a698:	00000000 	.word	0x00000000
    a69c:	20001038 	.word	0x20001038
    a6a0:	00000000 	.word	0x00000000
    a6a4:	200013b8 	.word	0x200013b8
    a6a8:	00000000 	.word	0x00000000
    a6ac:	200002ec 	.word	0x200002ec

0000a6b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6b4:	4606      	mov	r6, r0
    a6b6:	7800      	ldrb	r0, [r0, #0]
    a6b8:	b08d      	sub	sp, #52	; 0x34
    a6ba:	b118      	cbz	r0, a6c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a6bc:	b00d      	add	sp, #52	; 0x34
    a6be:	2000      	movs	r0, #0
    a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6c4:	488c      	ldr	r0, [pc, #560]	; (a8f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a6c6:	6800      	ldr	r0, [r0, #0]
    a6c8:	05c0      	lsls	r0, r0, #23
    a6ca:	0dc0      	lsrs	r0, r0, #23
    a6cc:	d00e      	beq.n	a6ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a6ce:	3810      	subs	r0, #16
    a6d0:	b240      	sxtb	r0, r0
    a6d2:	2800      	cmp	r0, #0
    a6d4:	bfb8      	it	lt
    a6d6:	f000 000f 	andlt.w	r0, r0, #15
    a6da:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a6de:	bfac      	ite	ge
    a6e0:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a6e4:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a6e8:	0940      	lsrs	r0, r0, #5
    a6ea:	d0e7      	beq.n	a6bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a6ec:	4d83      	ldr	r5, [pc, #524]	; (a8fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a6ee:	4c84      	ldr	r4, [pc, #528]	; (a900 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a6f0:	f04f 0b01 	mov.w	fp, #1
    a6f4:	2700      	movs	r7, #0
    a6f6:	b125      	cbz	r5, a702 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a6f8:	2100      	movs	r1, #0
    a6fa:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a6fe:	f3af 8000 	nop.w
    a702:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a706:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a70a:	f04f 0900 	mov.w	r9, #0
    a70e:	b125      	cbz	r5, a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a710:	2100      	movs	r1, #0
    a712:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a716:	f3af 8000 	nop.w
    a71a:	487a      	ldr	r0, [pc, #488]	; (a904 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a71c:	ea2b 080a 	bic.w	r8, fp, sl
    a720:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a724:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a728:	2240      	movs	r2, #64	; 0x40
    a72a:	f006 fb41 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a72e:	b125      	cbz	r5, a73a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a730:	2100      	movs	r1, #0
    a732:	f240 505e 	movw	r0, #1374	; 0x55e
    a736:	f3af 8000 	nop.w
    a73a:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a73e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a742:	4421      	add	r1, r4
    a744:	4420      	add	r0, r4
    a746:	8c0a      	ldrh	r2, [r1, #32]
    a748:	8402      	strh	r2, [r0, #32]
    a74a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a74e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a752:	b125      	cbz	r5, a75e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a754:	2100      	movs	r1, #0
    a756:	f240 5062 	movw	r0, #1378	; 0x562
    a75a:	f3af 8000 	nop.w
    a75e:	b125      	cbz	r5, a76a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a760:	2100      	movs	r1, #0
    a762:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a766:	f3af 8000 	nop.w
    a76a:	a808      	add	r0, sp, #32
    a76c:	f000 ff4c 	bl	b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a770:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a778:	4643      	mov	r3, r8
    a77a:	466a      	mov	r2, sp
    a77c:	4631      	mov	r1, r6
    a77e:	a80a      	add	r0, sp, #40	; 0x28
    a780:	f7ff f8bc 	bl	98fc <MPSL_IRQ_RADIO_Handler+0xaa4>
    a784:	b125      	cbz	r5, a790 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a786:	2100      	movs	r1, #0
    a788:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a78c:	f3af 8000 	nop.w
    a790:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a794:	2820      	cmp	r0, #32
    a796:	d01a      	beq.n	a7ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a798:	68e0      	ldr	r0, [r4, #12]
    a79a:	9900      	ldr	r1, [sp, #0]
    a79c:	1a09      	subs	r1, r1, r0
    a79e:	0209      	lsls	r1, r1, #8
    a7a0:	17ca      	asrs	r2, r1, #31
    a7a2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a7a6:	1209      	asrs	r1, r1, #8
    a7a8:	d511      	bpl.n	a7ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a7aa:	9900      	ldr	r1, [sp, #0]
    a7ac:	4281      	cmp	r1, r0
    a7ae:	d902      	bls.n	a7b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a7b0:	9902      	ldr	r1, [sp, #8]
    a7b2:	1c49      	adds	r1, r1, #1
    a7b4:	9102      	str	r1, [sp, #8]
    a7b6:	e9dd 2100 	ldrd	r2, r1, [sp]
    a7ba:	1a89      	subs	r1, r1, r2
    a7bc:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a7c0:	4408      	add	r0, r1
    a7c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7c6:	e9cd 2000 	strd	r2, r0, [sp]
    a7ca:	f04f 0901 	mov.w	r9, #1
    a7ce:	b125      	cbz	r5, a7da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a7d0:	2100      	movs	r1, #0
    a7d2:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a7d6:	f3af 8000 	nop.w
    a7da:	9900      	ldr	r1, [sp, #0]
    a7dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    a7de:	9a01      	ldr	r2, [sp, #4]
    a7e0:	1a09      	subs	r1, r1, r0
    a7e2:	1a10      	subs	r0, r2, r0
    a7e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a7e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7ec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a7f0:	bf98      	it	ls
    a7f2:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a7f6:	d809      	bhi.n	a80c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a7f8:	4643      	mov	r3, r8
    a7fa:	4669      	mov	r1, sp
    a7fc:	4842      	ldr	r0, [pc, #264]	; (a908 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a7fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a800:	f7fe fb86 	bl	8f10 <MPSL_IRQ_RADIO_Handler+0xb8>
    a804:	ea59 0000 	orrs.w	r0, r9, r0
    a808:	d129      	bne.n	a85e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a80a:	e042      	b.n	a892 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a80c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a80e:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a812:	9002      	str	r0, [sp, #8]
    a814:	aa09      	add	r2, sp, #36	; 0x24
    a816:	a907      	add	r1, sp, #28
    a818:	4650      	mov	r0, sl
    a81a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a81e:	f000 fd83 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a822:	f001 faa5 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a826:	f000 fd63 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a82a:	4681      	mov	r9, r0
    a82c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a830:	2820      	cmp	r0, #32
    a832:	d03b      	beq.n	a8ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a834:	68e0      	ldr	r0, [r4, #12]
    a836:	1d40      	adds	r0, r0, #5
    a838:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a83c:	9900      	ldr	r1, [sp, #0]
    a83e:	4281      	cmp	r1, r0
    a840:	d902      	bls.n	a848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a842:	9902      	ldr	r1, [sp, #8]
    a844:	1c49      	adds	r1, r1, #1
    a846:	9102      	str	r1, [sp, #8]
    a848:	e9dd 2100 	ldrd	r2, r1, [sp]
    a84c:	1a89      	subs	r1, r1, r2
    a84e:	9000      	str	r0, [sp, #0]
    a850:	4408      	add	r0, r1
    a852:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a856:	9001      	str	r0, [sp, #4]
    a858:	201f      	movs	r0, #31
    a85a:	f88d 000c 	strb.w	r0, [sp, #12]
    a85e:	9800      	ldr	r0, [sp, #0]
    a860:	f006 f925 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a864:	1c41      	adds	r1, r0, #1
    a866:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a86a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a86e:	4410      	add	r0, r2
    a870:	4408      	add	r0, r1
    a872:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a876:	b125      	cbz	r5, a882 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a878:	2100      	movs	r1, #0
    a87a:	f240 601a 	movw	r0, #1562	; 0x61a
    a87e:	f3af 8000 	nop.w
    a882:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a886:	4a21      	ldr	r2, [pc, #132]	; (a90c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a888:	9b02      	ldr	r3, [sp, #8]
    a88a:	fbe3 1002 	umlal	r1, r0, r3, r2
    a88e:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a892:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a896:	f88d 0014 	strb.w	r0, [sp, #20]
    a89a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a89e:	2800      	cmp	r0, #0
    a8a0:	f47f af29 	bne.w	a6f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a8a4:	b00d      	add	sp, #52	; 0x34
    a8a6:	2001      	movs	r0, #1
    a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8ac:	f108 0809 	add.w	r8, r8, #9
    a8b0:	f1ba 0f00 	cmp.w	sl, #0
    a8b4:	d016      	beq.n	a8e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a8b6:	f001 fd79 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a8ba:	b998      	cbnz	r0, a8e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a8bc:	f001 fc30 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a8c0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a8c4:	bf08      	it	eq
    a8c6:	200d      	moveq	r0, #13
    a8c8:	d00b      	beq.n	a8e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a8ca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a8ce:	3856      	subs	r0, #86	; 0x56
    a8d0:	bf08      	it	eq
    a8d2:	201c      	moveq	r0, #28
    a8d4:	d005      	beq.n	a8e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a8d6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a8da:	389f      	subs	r0, #159	; 0x9f
    a8dc:	bf14      	ite	ne
    a8de:	4638      	movne	r0, r7
    a8e0:	2032      	moveq	r0, #50	; 0x32
    a8e2:	4480      	add	r8, r0
    a8e4:	9807      	ldr	r0, [sp, #28]
    a8e6:	4581      	cmp	r9, r0
    a8e8:	bf84      	itt	hi
    a8ea:	eba9 0000 	subhi.w	r0, r9, r0
    a8ee:	4480      	addhi	r8, r0
    a8f0:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a8f4:	e7a2      	b.n	a83c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a8f6:	0000      	.short	0x0000
    a8f8:	e000ed04 	.word	0xe000ed04
    a8fc:	00000000 	.word	0x00000000
    a900:	20001438 	.word	0x20001438
    a904:	200013b8 	.word	0x200013b8
    a908:	0f424000 	.word	0x0f424000
    a90c:	1e848000 	.word	0x1e848000

0000a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a910:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a914:	4d92      	ldr	r5, [pc, #584]	; (ab60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a916:	b08c      	sub	sp, #48	; 0x30
    a918:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a91c:	2000      	movs	r0, #0
    a91e:	9008      	str	r0, [sp, #32]
    a920:	9006      	str	r0, [sp, #24]
    a922:	2001      	movs	r0, #1
    a924:	4c8f      	ldr	r4, [pc, #572]	; (ab64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a926:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a92a:	f04f 0800 	mov.w	r8, #0
    a92e:	4607      	mov	r7, r0
    a930:	9007      	str	r0, [sp, #28]
    a932:	b124      	cbz	r4, a93e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a934:	2100      	movs	r1, #0
    a936:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a93a:	f3af 8000 	nop.w
    a93e:	9807      	ldr	r0, [sp, #28]
    a940:	2800      	cmp	r0, #0
    a942:	d03c      	beq.n	a9be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a944:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a948:	b124      	cbz	r4, a954 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a94a:	2100      	movs	r1, #0
    a94c:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a950:	f3af 8000 	nop.w
    a954:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a958:	2240      	movs	r2, #64	; 0x40
    a95a:	ea27 060a 	bic.w	r6, r7, sl
    a95e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a962:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a966:	4683      	mov	fp, r0
    a968:	f006 fa22 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a96c:	b124      	cbz	r4, a978 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a96e:	2100      	movs	r1, #0
    a970:	f240 505e 	movw	r0, #1374	; 0x55e
    a974:	f3af 8000 	nop.w
    a978:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a97c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a980:	4428      	add	r0, r5
    a982:	4429      	add	r1, r5
    a984:	9000      	str	r0, [sp, #0]
    a986:	8c0a      	ldrh	r2, [r1, #32]
    a988:	8402      	strh	r2, [r0, #32]
    a98a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a98e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a992:	b124      	cbz	r4, a99e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a994:	2100      	movs	r1, #0
    a996:	f240 5062 	movw	r0, #1378	; 0x562
    a99a:	f3af 8000 	nop.w
    a99e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a9a2:	f88d 0008 	strb.w	r0, [sp, #8]
    a9a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9aa:	b178      	cbz	r0, a9cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a9ac:	2c00      	cmp	r4, #0
    a9ae:	bf1c      	itt	ne
    a9b0:	2100      	movne	r1, #0
    a9b2:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    a9b6:	d0bc      	beq.n	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9b8:	f3af 8000 	nop.w
    a9bc:	e7b9      	b.n	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9be:	486a      	ldr	r0, [pc, #424]	; (ab68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a9c0:	2800      	cmp	r0, #0
    a9c2:	bf18      	it	ne
    a9c4:	f3af 8000 	nopne.w
    a9c8:	b662      	cpsie	i
    a9ca:	e7bb      	b.n	a944 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a9cc:	b124      	cbz	r4, a9d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a9ce:	2100      	movs	r1, #0
    a9d0:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a9d4:	f3af 8000 	nop.w
    a9d8:	980c      	ldr	r0, [sp, #48]	; 0x30
    a9da:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a9de:	2803      	cmp	r0, #3
    a9e0:	d17e      	bne.n	aae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a9e2:	9a00      	ldr	r2, [sp, #0]
    a9e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9e6:	f892 0020 	ldrb.w	r0, [r2, #32]
    a9ea:	4288      	cmp	r0, r1
    a9ec:	bf14      	ite	ne
    a9ee:	f04f 0a00 	movne.w	sl, #0
    a9f2:	f04f 0a01 	moveq.w	sl, #1
    a9f6:	f102 0c20 	add.w	ip, r2, #32
    a9fa:	4683      	mov	fp, r0
    a9fc:	2220      	movs	r2, #32
    a9fe:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    aa02:	e003      	b.n	aa0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    aa04:	4602      	mov	r2, r0
    aa06:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    aa0a:	7840      	ldrb	r0, [r0, #1]
    aa0c:	4288      	cmp	r0, r1
    aa0e:	d002      	beq.n	aa16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    aa10:	2820      	cmp	r0, #32
    aa12:	d00a      	beq.n	aa2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aa14:	e7f6      	b.n	aa04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    aa16:	2820      	cmp	r0, #32
    aa18:	d007      	beq.n	aa2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aa1a:	4583      	cmp	fp, r0
    aa1c:	d107      	bne.n	aa2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    aa1e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    aa22:	7840      	ldrb	r0, [r0, #1]
    aa24:	f88c 0000 	strb.w	r0, [ip]
    aa28:	e007      	b.n	aa3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    aa2a:	4640      	mov	r0, r8
    aa2c:	e00c      	b.n	aa48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    aa2e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    aa32:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    aa36:	7840      	ldrb	r0, [r0, #1]
    aa38:	7048      	strb	r0, [r1, #1]
    aa3a:	b124      	cbz	r4, aa46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    aa3c:	2100      	movs	r1, #0
    aa3e:	f240 40c9 	movw	r0, #1225	; 0x4c9
    aa42:	f3af 8000 	nop.w
    aa46:	4638      	mov	r0, r7
    aa48:	46c3      	mov	fp, r8
    aa4a:	ea10 0f0a 	tst.w	r0, sl
    aa4e:	bf18      	it	ne
    aa50:	46bb      	movne	fp, r7
    aa52:	2800      	cmp	r0, #0
    aa54:	d04e      	beq.n	aaf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa56:	b124      	cbz	r4, aa62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    aa58:	2100      	movs	r1, #0
    aa5a:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    aa5e:	f3af 8000 	nop.w
    aa62:	4632      	mov	r2, r6
    aa64:	2001      	movs	r0, #1
    aa66:	990c      	ldr	r1, [sp, #48]	; 0x30
    aa68:	f7ff f95c 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    aa6c:	b124      	cbz	r4, aa78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    aa6e:	2100      	movs	r1, #0
    aa70:	f640 0001 	movw	r0, #2049	; 0x801
    aa74:	f3af 8000 	nop.w
    aa78:	483c      	ldr	r0, [pc, #240]	; (ab6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    aa7a:	2800      	cmp	r0, #0
    aa7c:	bf18      	it	ne
    aa7e:	f3af 8000 	nopne.w
    aa82:	f3ef 8010 	mrs	r0, PRIMASK
    aa86:	b672      	cpsid	i
    aa88:	9007      	str	r0, [sp, #28]
    aa8a:	b124      	cbz	r4, aa96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    aa8c:	2100      	movs	r1, #0
    aa8e:	f640 0006 	movw	r0, #2054	; 0x806
    aa92:	f3af 8000 	nop.w
    aa96:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    aa9a:	f88d 0008 	strb.w	r0, [sp, #8]
    aa9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aaa2:	b138      	cbz	r0, aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    aaa4:	2c00      	cmp	r4, #0
    aaa6:	bf1c      	itt	ne
    aaa8:	2100      	movne	r1, #0
    aaaa:	f640 000a 	movwne	r0, #2058	; 0x80a
    aaae:	f43f af40 	beq.w	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aab2:	e781      	b.n	a9b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aab4:	f1bb 0f00 	cmp.w	fp, #0
    aab8:	d009      	beq.n	aace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aaba:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aabe:	2820      	cmp	r0, #32
    aac0:	d105      	bne.n	aace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aac2:	4631      	mov	r1, r6
    aac4:	2002      	movs	r0, #2
    aac6:	f7ff f95f 	bl	9d88 <MPSL_IRQ_RADIO_Handler+0xf30>
    aaca:	9006      	str	r0, [sp, #24]
    aacc:	b1f8      	cbz	r0, ab0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aace:	b124      	cbz	r4, aada <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aad0:	2100      	movs	r1, #0
    aad2:	f640 001e 	movw	r0, #2078	; 0x81e
    aad6:	f3af 8000 	nop.w
    aada:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aade:	e000      	b.n	aae2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aae0:	e008      	b.n	aaf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aae2:	ea27 0000 	bic.w	r0, r7, r0
    aae6:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aaea:	20ff      	movs	r0, #255	; 0xff
    aaec:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aaf0:	2001      	movs	r0, #1
    aaf2:	9008      	str	r0, [sp, #32]
    aaf4:	b124      	cbz	r4, ab00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aaf6:	2100      	movs	r1, #0
    aaf8:	f640 0027 	movw	r0, #2087	; 0x827
    aafc:	f3af 8000 	nop.w
    ab00:	9806      	ldr	r0, [sp, #24]
    ab02:	4e1b      	ldr	r6, [pc, #108]	; (ab70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    ab04:	2802      	cmp	r0, #2
    ab06:	d009      	beq.n	ab1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    ab08:	2801      	cmp	r0, #1
    ab0a:	d010      	beq.n	ab2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    ab0c:	e014      	b.n	ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab0e:	b19c      	cbz	r4, ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab10:	2100      	movs	r1, #0
    ab12:	f640 0019 	movw	r0, #2073	; 0x819
    ab16:	f3af 8000 	nop.w
    ab1a:	e7ec      	b.n	aaf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ab1c:	f000 fd6e 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ab20:	68a9      	ldr	r1, [r5, #8]
    ab22:	1a08      	subs	r0, r1, r0
    ab24:	f005 ffc3 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ab28:	6871      	ldr	r1, [r6, #4]
    ab2a:	b921      	cbnz	r1, ab36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    ab2c:	e004      	b.n	ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab2e:	6871      	ldr	r1, [r6, #4]
    ab30:	f04f 30ff 	mov.w	r0, #4294967295
    ab34:	b101      	cbz	r1, ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab36:	4788      	blx	r1
    ab38:	9807      	ldr	r0, [sp, #28]
    ab3a:	b148      	cbz	r0, ab50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    ab3c:	b124      	cbz	r4, ab48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    ab3e:	2100      	movs	r1, #0
    ab40:	f640 003c 	movw	r0, #2108	; 0x83c
    ab44:	f3af 8000 	nop.w
    ab48:	9808      	ldr	r0, [sp, #32]
    ab4a:	b00d      	add	sp, #52	; 0x34
    ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab50:	4805      	ldr	r0, [pc, #20]	; (ab68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    ab52:	2800      	cmp	r0, #0
    ab54:	bf18      	it	ne
    ab56:	f3af 8000 	nopne.w
    ab5a:	b662      	cpsie	i
    ab5c:	e7ee      	b.n	ab3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    ab5e:	0000      	.short	0x0000
    ab60:	20001438 	.word	0x20001438
	...
    ab70:	200002ec 	.word	0x200002ec

0000ab74 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    ab74:	2820      	cmp	r0, #32
    ab76:	bf24      	itt	cs
    ab78:	2000      	movcs	r0, #0
    ab7a:	4770      	bxcs	lr
    ab7c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ab80:	4b03      	ldr	r3, [pc, #12]	; (ab90 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    ab82:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    ab86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ab8a:	6042      	str	r2, [r0, #4]
    ab8c:	2001      	movs	r0, #1
    ab8e:	4770      	bx	lr
    ab90:	20001038 	.word	0x20001038

0000ab94 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ab94:	b510      	push	{r4, lr}
    ab96:	2820      	cmp	r0, #32
    ab98:	d211      	bcs.n	abbe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ab9a:	490e      	ldr	r1, [pc, #56]	; (abd4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ab9c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aba0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    aba4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    aba8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    abac:	b13b      	cbz	r3, abbe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    abae:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    abb2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    abb6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    abba:	2a01      	cmp	r2, #1
    abbc:	d001      	beq.n	abc2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    abbe:	2000      	movs	r0, #0
    abc0:	bd10      	pop	{r4, pc}
    abc2:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    abc6:	4601      	mov	r1, r0
    abc8:	2000      	movs	r0, #0
    abca:	f7ff f8ab 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    abce:	2001      	movs	r0, #1
    abd0:	bd10      	pop	{r4, pc}
    abd2:	0000      	.short	0x0000
    abd4:	20001438 	.word	0x20001438

0000abd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    abd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abdc:	4e86      	ldr	r6, [pc, #536]	; (adf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    abde:	4680      	mov	r8, r0
    abe0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    abe4:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    abe8:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    abec:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    abf0:	2800      	cmp	r0, #0
    abf2:	d071      	beq.n	acd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    abf4:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    abf8:	4d80      	ldr	r5, [pc, #512]	; (adfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    abfa:	b125      	cbz	r5, ac06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    abfc:	2100      	movs	r1, #0
    abfe:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ac02:	f3af 8000 	nop.w
    ac06:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ac0a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac0e:	2801      	cmp	r0, #1
    ac10:	d018      	beq.n	ac44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ac12:	b2c0      	uxtb	r0, r0
    ac14:	2804      	cmp	r0, #4
    ac16:	bf1c      	itt	ne
    ac18:	2805      	cmpne	r0, #5
    ac1a:	2806      	cmpne	r0, #6
    ac1c:	d061      	beq.n	ace2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ac1e:	b12d      	cbz	r5, ac2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ac20:	f04f 0100 	mov.w	r1, #0
    ac24:	f640 30c5 	movw	r0, #3013	; 0xbc5
    ac28:	f3af 8000 	nop.w
    ac2c:	f006 f875 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ac30:	b125      	cbz	r5, ac3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ac32:	2100      	movs	r1, #0
    ac34:	f640 30c9 	movw	r0, #3017	; 0xbc9
    ac38:	f3af 8000 	nop.w
    ac3c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac40:	2801      	cmp	r0, #1
    ac42:	d1e6      	bne.n	ac12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ac44:	2401      	movs	r4, #1
    ac46:	b125      	cbz	r5, ac52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ac48:	2100      	movs	r1, #0
    ac4a:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    ac4e:	f3af 8000 	nop.w
    ac52:	2c00      	cmp	r4, #0
    ac54:	d04b      	beq.n	acee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ac56:	2000      	movs	r0, #0
    ac58:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ac5c:	b125      	cbz	r5, ac68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ac5e:	2100      	movs	r1, #0
    ac60:	f640 30d5 	movw	r0, #3029	; 0xbd5
    ac64:	f3af 8000 	nop.w
    ac68:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    ac6c:	2001      	movs	r0, #1
    ac6e:	ea20 090b 	bic.w	r9, r0, fp
    ac72:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ac76:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ac7a:	2240      	movs	r2, #64	; 0x40
    ac7c:	f006 f898 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ac80:	b125      	cbz	r5, ac8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    ac82:	2100      	movs	r1, #0
    ac84:	f240 505e 	movw	r0, #1374	; 0x55e
    ac88:	f3af 8000 	nop.w
    ac8c:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    ac90:	eb00 0a06 	add.w	sl, r0, r6
    ac94:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    ac98:	4430      	add	r0, r6
    ac9a:	8c01      	ldrh	r1, [r0, #32]
    ac9c:	f8aa 1020 	strh.w	r1, [sl, #32]
    aca0:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    aca4:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    aca8:	b125      	cbz	r5, acb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    acaa:	2100      	movs	r1, #0
    acac:	f240 5062 	movw	r0, #1378	; 0x562
    acb0:	f3af 8000 	nop.w
    acb4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    acb8:	f88d 0000 	strb.w	r0, [sp]
    acbc:	f89d 0000 	ldrb.w	r0, [sp]
    acc0:	b1e0      	cbz	r0, acfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    acc2:	2d00      	cmp	r5, #0
    acc4:	bf1c      	itt	ne
    acc6:	2100      	movne	r1, #0
    acc8:	f640 30db 	movwne	r0, #3035	; 0xbdb
    accc:	d0bb      	beq.n	ac46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acce:	bf00      	nop
    acd0:	f3af 8000 	nop.w
    acd4:	e7b7      	b.n	ac46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acd6:	e7ff      	b.n	acd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    acd8:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    acdc:	2070      	movs	r0, #112	; 0x70
    acde:	f001 fbdd 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ace2:	464a      	mov	r2, r9
    ace4:	4641      	mov	r1, r8
    ace6:	2001      	movs	r0, #1
    ace8:	f7ff f81c 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    acec:	e7a0      	b.n	ac30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    acee:	4844      	ldr	r0, [pc, #272]	; (ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    acf0:	2800      	cmp	r0, #0
    acf2:	bf18      	it	ne
    acf4:	f3af 8000 	nopne.w
    acf8:	b662      	cpsie	i
    acfa:	e7ac      	b.n	ac56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    acfc:	b125      	cbz	r5, ad08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    acfe:	2100      	movs	r1, #0
    ad00:	f640 30df 	movw	r0, #3039	; 0xbdf
    ad04:	f3af 8000 	nop.w
    ad08:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ad0c:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ad10:	4640      	mov	r0, r8
    ad12:	461c      	mov	r4, r3
    ad14:	f04f 0b20 	mov.w	fp, #32
    ad18:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ad1c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ad20:	e004      	b.n	ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ad22:	46a3      	mov	fp, r4
    ad24:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ad28:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ad2c:	4284      	cmp	r4, r0
    ad2e:	d002      	beq.n	ad36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ad30:	2c20      	cmp	r4, #32
    ad32:	d02b      	beq.n	ad8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ad34:	e7f5      	b.n	ad22 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ad36:	2c20      	cmp	r4, #32
    ad38:	d028      	beq.n	ad8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ad3a:	42a3      	cmp	r3, r4
    ad3c:	d104      	bne.n	ad48 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    ad3e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    ad42:	7840      	ldrb	r0, [r0, #1]
    ad44:	7008      	strb	r0, [r1, #0]
    ad46:	e005      	b.n	ad54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    ad48:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    ad4c:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    ad50:	7840      	ldrb	r0, [r0, #1]
    ad52:	7048      	strb	r0, [r1, #1]
    ad54:	f1ba 0f00 	cmp.w	sl, #0
    ad58:	d011      	beq.n	ad7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ad5a:	b125      	cbz	r5, ad66 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    ad5c:	2100      	movs	r1, #0
    ad5e:	f240 40c1 	movw	r0, #1217	; 0x4c1
    ad62:	f3af 8000 	nop.w
    ad66:	f89a 0000 	ldrb.w	r0, [sl]
    ad6a:	42a0      	cmp	r0, r4
    ad6c:	d107      	bne.n	ad7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ad6e:	b125      	cbz	r5, ad7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    ad70:	2100      	movs	r1, #0
    ad72:	f240 40c4 	movw	r0, #1220	; 0x4c4
    ad76:	f3af 8000 	nop.w
    ad7a:	f88a b000 	strb.w	fp, [sl]
    ad7e:	b15d      	cbz	r5, ad98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ad80:	2100      	movs	r1, #0
    ad82:	f240 40c9 	movw	r0, #1225	; 0x4c9
    ad86:	f3af 8000 	nop.w
    ad8a:	e000      	b.n	ad8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    ad8c:	b125      	cbz	r5, ad98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ad8e:	2100      	movs	r1, #0
    ad90:	f640 30e3 	movw	r0, #3043	; 0xbe3
    ad94:	f3af 8000 	nop.w
    ad98:	481a      	ldr	r0, [pc, #104]	; (ae04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    ad9a:	2800      	cmp	r0, #0
    ad9c:	bf18      	it	ne
    ad9e:	f3af 8000 	nopne.w
    ada2:	f3ef 8410 	mrs	r4, PRIMASK
    ada6:	b672      	cpsid	i
    ada8:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    adac:	f88d 0000 	strb.w	r0, [sp]
    adb0:	f89d 0000 	ldrb.w	r0, [sp]
    adb4:	b138      	cbz	r0, adc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    adb6:	2d00      	cmp	r5, #0
    adb8:	bf1c      	itt	ne
    adba:	2100      	movne	r1, #0
    adbc:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    adc0:	f43f af41 	beq.w	ac46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    adc4:	e784      	b.n	acd0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    adc6:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    adca:	20ff      	movs	r0, #255	; 0xff
    adcc:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    add0:	b154      	cbz	r4, ade8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    add2:	2d00      	cmp	r5, #0
    add4:	bf08      	it	eq
    add6:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adda:	2100      	movs	r1, #0
    addc:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ade0:	f3af 8000 	nop.w
    ade4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ade8:	4805      	ldr	r0, [pc, #20]	; (ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    adea:	2800      	cmp	r0, #0
    adec:	bf18      	it	ne
    adee:	f3af 8000 	nopne.w
    adf2:	b662      	cpsie	i
    adf4:	e7ed      	b.n	add2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    adf6:	0000      	.short	0x0000
    adf8:	20001438 	.word	0x20001438
	...

0000ae08 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ae08:	b570      	push	{r4, r5, r6, lr}
    ae0a:	460d      	mov	r5, r1
    ae0c:	4606      	mov	r6, r0
    ae0e:	f001 fabb 	bl	c388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ae12:	480f      	ldr	r0, [pc, #60]	; (ae50 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ae14:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ae18:	2400      	movs	r4, #0
    ae1a:	3880      	subs	r0, #128	; 0x80
    ae1c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ae20:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ae24:	b129      	cbz	r1, ae32 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ae26:	1c61      	adds	r1, r4, #1
    ae28:	b2cc      	uxtb	r4, r1
    ae2a:	2c20      	cmp	r4, #32
    ae2c:	d3f8      	bcc.n	ae20 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ae2e:	2020      	movs	r0, #32
    ae30:	bd70      	pop	{r4, r5, r6, pc}
    ae32:	4808      	ldr	r0, [pc, #32]	; (ae54 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ae34:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ae38:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    ae3c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ae40:	4621      	mov	r1, r4
    ae42:	6045      	str	r5, [r0, #4]
    ae44:	2001      	movs	r0, #1
    ae46:	f7fe ff6d 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    ae4a:	4620      	mov	r0, r4
    ae4c:	bd70      	pop	{r4, r5, r6, pc}
    ae4e:	0000      	.short	0x0000
    ae50:	20001438 	.word	0x20001438
    ae54:	20001038 	.word	0x20001038

0000ae58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae5c:	b083      	sub	sp, #12
    ae5e:	f000 fbcd 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ae62:	4605      	mov	r5, r0
    ae64:	f000 feb0 	bl	bbc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ae68:	4c84      	ldr	r4, [pc, #528]	; (b07c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    ae6a:	6860      	ldr	r0, [r4, #4]
    ae6c:	f1b0 3fff 	cmp.w	r0, #4294967295
    ae70:	bf1c      	itt	ne
    ae72:	f04f 30ff 	movne.w	r0, #4294967295
    ae76:	6060      	strne	r0, [r4, #4]
    ae78:	7fa0      	ldrb	r0, [r4, #30]
    ae7a:	f8df 9204 	ldr.w	r9, [pc, #516]	; b080 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    ae7e:	b990      	cbnz	r0, aea6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    ae80:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    ae84:	1a40      	subs	r0, r0, r1
    ae86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae8a:	f44f 710c 	mov.w	r1, #560	; 0x230
    ae8e:	f001 fa67 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ae92:	68e1      	ldr	r1, [r4, #12]
    ae94:	4408      	add	r0, r1
    ae96:	1a28      	subs	r0, r5, r0
    ae98:	0200      	lsls	r0, r0, #8
    ae9a:	17c1      	asrs	r1, r0, #31
    ae9c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    aea0:	1200      	asrs	r0, r0, #8
    aea2:	0fc0      	lsrs	r0, r0, #31
    aea4:	d012      	beq.n	aecc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    aea6:	7e60      	ldrb	r0, [r4, #25]
    aea8:	b320      	cbz	r0, aef4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    aeaa:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    aeae:	f88d 0000 	strb.w	r0, [sp]
    aeb2:	f89d 0000 	ldrb.w	r0, [sp]
    aeb6:	b1e8      	cbz	r0, aef4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    aeb8:	f000 fce2 	bl	b880 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    aebc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    aec0:	b1f0      	cbz	r0, af00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    aec2:	f240 31f5 	movw	r1, #1013	; 0x3f5
    aec6:	2070      	movs	r0, #112	; 0x70
    aec8:	f001 fae8 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aecc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    aed0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    aed4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    aed8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    aedc:	6840      	ldr	r0, [r0, #4]
    aede:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    aee2:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    aee6:	2108      	movs	r1, #8
    aee8:	4790      	blx	r2
    aeea:	f240 31dd 	movw	r1, #989	; 0x3dd
    aeee:	2070      	movs	r0, #112	; 0x70
    aef0:	f001 fad4 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aef4:	1ce8      	adds	r0, r5, #3
    aef6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aefa:	f000 fba5 	bl	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    aefe:	e7dd      	b.n	aebc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    af00:	2001      	movs	r0, #1
    af02:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    af06:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    af0a:	2820      	cmp	r0, #32
    af0c:	d021      	beq.n	af52 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    af0e:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    af12:	2020      	movs	r0, #32
    af14:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    af18:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    af1c:	2000      	movs	r0, #0
    af1e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    af22:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    af26:	6020      	str	r0, [r4, #0]
    af28:	f000 ff28 	bl	bd7c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    af2c:	7720      	strb	r0, [r4, #28]
    af2e:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    af32:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    af36:	1907      	adds	r7, r0, r4
    af38:	f897 0020 	ldrb.w	r0, [r7, #32]
    af3c:	2820      	cmp	r0, #32
    af3e:	d058      	beq.n	aff2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    af44:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    af48:	f899 001a 	ldrb.w	r0, [r9, #26]
    af4c:	2801      	cmp	r0, #1
    af4e:	d005      	beq.n	af5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    af50:	e04f      	b.n	aff2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af52:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    af56:	2070      	movs	r0, #112	; 0x70
    af58:	f001 faa0 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af5c:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    af60:	aa01      	add	r2, sp, #4
    af62:	4669      	mov	r1, sp
    af64:	4658      	mov	r0, fp
    af66:	f000 f9df 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    af6a:	f000 ff01 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    af6e:	f000 f9bf 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    af72:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    af76:	2820      	cmp	r0, #32
    af78:	d004      	beq.n	af84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    af7a:	68e0      	ldr	r0, [r4, #12]
    af7c:	1d40      	adds	r0, r0, #5
    af7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af82:	e01d      	b.n	afc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    af84:	f105 0a09 	add.w	sl, r5, #9
    af88:	f1bb 0f00 	cmp.w	fp, #0
    af8c:	d016      	beq.n	afbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    af8e:	f001 fa0d 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    af92:	b998      	cbnz	r0, afbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    af94:	f001 f8c4 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    af98:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    af9c:	bf08      	it	eq
    af9e:	200d      	moveq	r0, #13
    afa0:	d00b      	beq.n	afba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    afa2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    afa6:	3856      	subs	r0, #86	; 0x56
    afa8:	bf08      	it	eq
    afaa:	201c      	moveq	r0, #28
    afac:	d005      	beq.n	afba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    afae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    afb2:	389f      	subs	r0, #159	; 0x9f
    afb4:	bf14      	ite	ne
    afb6:	2000      	movne	r0, #0
    afb8:	2032      	moveq	r0, #50	; 0x32
    afba:	4482      	add	sl, r0
    afbc:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    afc0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    afc4:	1a81      	subs	r1, r0, r2
    afc6:	0209      	lsls	r1, r1, #8
    afc8:	17cb      	asrs	r3, r1, #31
    afca:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    afce:	1209      	asrs	r1, r1, #8
    afd0:	2900      	cmp	r1, #0
    afd2:	dc0e      	bgt.n	aff2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    afd4:	f109 0308 	add.w	r3, r9, #8
    afd8:	4282      	cmp	r2, r0
    afda:	d202      	bcs.n	afe2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    afdc:	6899      	ldr	r1, [r3, #8]
    afde:	1e49      	subs	r1, r1, #1
    afe0:	6099      	str	r1, [r3, #8]
    afe2:	e9d3 2100 	ldrd	r2, r1, [r3]
    afe6:	1a89      	subs	r1, r1, r2
    afe8:	6018      	str	r0, [r3, #0]
    afea:	4408      	add	r0, r1
    afec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aff0:	6058      	str	r0, [r3, #4]
    aff2:	4631      	mov	r1, r6
    aff4:	2001      	movs	r0, #1
    aff6:	f7fe fec7 	bl	9d88 <MPSL_IRQ_RADIO_Handler+0xf30>
    affa:	ea5f 0900 	movs.w	r9, r0
    affe:	d0f8      	beq.n	aff2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b000:	4820      	ldr	r0, [pc, #128]	; (b084 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    b002:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    b006:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b00a:	2802      	cmp	r0, #2
    b00c:	d104      	bne.n	b018 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    b00e:	4632      	mov	r2, r6
    b010:	4641      	mov	r1, r8
    b012:	2006      	movs	r0, #6
    b014:	f7fe fe86 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    b018:	20ff      	movs	r0, #255	; 0xff
    b01a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b01e:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    b022:	4e19      	ldr	r6, [pc, #100]	; (b088 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    b024:	2820      	cmp	r0, #32
    b026:	bf1c      	itt	ne
    b028:	7870      	ldrbne	r0, [r6, #1]
    b02a:	f001 fb0b 	blne	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b02e:	7f20      	ldrb	r0, [r4, #28]
    b030:	b120      	cbz	r0, b03c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    b032:	f000 fe7f 	bl	bd34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b036:	2000      	movs	r0, #0
    b038:	7720      	strb	r0, [r4, #28]
    b03a:	7760      	strb	r0, [r4, #29]
    b03c:	f1b9 0f02 	cmp.w	r9, #2
    b040:	d011      	beq.n	b066 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    b042:	f1b9 0f01 	cmp.w	r9, #1
    b046:	bf1c      	itt	ne
    b048:	b003      	addne	sp, #12
    b04a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b04e:	f04f 30ff 	mov.w	r0, #4294967295
    b052:	6871      	ldr	r1, [r6, #4]
    b054:	2900      	cmp	r1, #0
    b056:	bf04      	itt	eq
    b058:	b003      	addeq	sp, #12
    b05a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b05e:	b003      	add	sp, #12
    b060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b064:	4708      	bx	r1
    b066:	68a0      	ldr	r0, [r4, #8]
    b068:	1b40      	subs	r0, r0, r5
    b06a:	f005 fd20 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b06e:	6871      	ldr	r1, [r6, #4]
    b070:	2900      	cmp	r1, #0
    b072:	d1f4      	bne.n	b05e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    b074:	b003      	add	sp, #12
    b076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b07a:	0000      	.short	0x0000
    b07c:	20001438 	.word	0x20001438
    b080:	20001038 	.word	0x20001038
    b084:	200013b8 	.word	0x200013b8
    b088:	200002ec 	.word	0x200002ec

0000b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b08c:	b570      	push	{r4, r5, r6, lr}
    b08e:	4c42      	ldr	r4, [pc, #264]	; (b198 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b090:	4605      	mov	r5, r0
    b092:	b082      	sub	sp, #8
    b094:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b098:	2820      	cmp	r0, #32
    b09a:	d008      	beq.n	b0ae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b09c:	6860      	ldr	r0, [r4, #4]
    b09e:	f1b0 3fff 	cmp.w	r0, #4294967295
    b0a2:	d009      	beq.n	b0b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b0a4:	f640 21e4 	movw	r1, #2788	; 0xae4
    b0a8:	2070      	movs	r0, #112	; 0x70
    b0aa:	f001 f9f7 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0ae:	f640 21e3 	movw	r1, #2787	; 0xae3
    b0b2:	2070      	movs	r0, #112	; 0x70
    b0b4:	f001 f9f2 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0b8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b0bc:	4937      	ldr	r1, [pc, #220]	; (b19c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b0be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b0c2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    b0c6:	68b0      	ldr	r0, [r6, #8]
    b0c8:	f005 fcf1 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b0cc:	4602      	mov	r2, r0
    b0ce:	8af0      	ldrh	r0, [r6, #22]
    b0d0:	7d31      	ldrb	r1, [r6, #20]
    b0d2:	4b33      	ldr	r3, [pc, #204]	; (b1a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b0d4:	4408      	add	r0, r1
    b0d6:	1c40      	adds	r0, r0, #1
    b0d8:	1811      	adds	r1, r2, r0
    b0da:	429a      	cmp	r2, r3
    b0dc:	d817      	bhi.n	b10e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b0de:	4a31      	ldr	r2, [pc, #196]	; (b1a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b0e0:	4290      	cmp	r0, r2
    b0e2:	dc1b      	bgt.n	b11c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b0e4:	f1c2 0c00 	rsb	ip, r2, #0
    b0e8:	4560      	cmp	r0, ip
    b0ea:	db1e      	blt.n	b12a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b0ec:	0056      	lsls	r6, r2, #1
    b0ee:	428e      	cmp	r6, r1
    b0f0:	bfdc      	itt	le
    b0f2:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b0f6:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b0fa:	dd05      	ble.n	b108 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b0fc:	2900      	cmp	r1, #0
    b0fe:	bfbc      	itt	lt
    b100:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b104:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b108:	1948      	adds	r0, r1, r5
    b10a:	4299      	cmp	r1, r3
    b10c:	d904      	bls.n	b118 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b10e:	f240 519e 	movw	r1, #1438	; 0x59e
    b112:	2070      	movs	r0, #112	; 0x70
    b114:	f001 f9c2 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b118:	4295      	cmp	r5, r2
    b11a:	dd04      	ble.n	b126 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b11c:	f240 519f 	movw	r1, #1439	; 0x59f
    b120:	2070      	movs	r0, #112	; 0x70
    b122:	f001 f9bb 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b126:	4565      	cmp	r5, ip
    b128:	da04      	bge.n	b134 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b12a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b12e:	2070      	movs	r0, #112	; 0x70
    b130:	f001 f9b4 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b134:	4286      	cmp	r6, r0
    b136:	bfdc      	itt	le
    b138:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b13c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b140:	dd05      	ble.n	b14e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b142:	2800      	cmp	r0, #0
    b144:	bfbc      	itt	lt
    b146:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b14a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b14e:	aa01      	add	r2, sp, #4
    b150:	4669      	mov	r1, sp
    b152:	f000 f8e9 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b156:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b15a:	280f      	cmp	r0, #15
    b15c:	bf8c      	ite	hi
    b15e:	2001      	movhi	r0, #1
    b160:	2000      	movls	r0, #0
    b162:	9900      	ldr	r1, [sp, #0]
    b164:	4408      	add	r0, r1
    b166:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b16a:	6061      	str	r1, [r4, #4]
    b16c:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b170:	f88d 0000 	strb.w	r0, [sp]
    b174:	f89d 0000 	ldrb.w	r0, [sp]
    b178:	2800      	cmp	r0, #0
    b17a:	bf04      	itt	eq
    b17c:	b002      	addeq	sp, #8
    b17e:	bd70      	popeq	{r4, r5, r6, pc}
    b180:	2005      	movs	r0, #5
    b182:	f000 fbfb 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b186:	2800      	cmp	r0, #0
    b188:	bf1c      	itt	ne
    b18a:	b002      	addne	sp, #8
    b18c:	bd70      	popne	{r4, r5, r6, pc}
    b18e:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b192:	2070      	movs	r0, #112	; 0x70
    b194:	f001 f982 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b198:	20001438 	.word	0x20001438
    b19c:	20001038 	.word	0x20001038
    b1a0:	1e847fff 	.word	0x1e847fff
    b1a4:	0f424000 	.word	0x0f424000

0000b1a8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b1a8:	b570      	push	{r4, r5, r6, lr}
    b1aa:	4c1c      	ldr	r4, [pc, #112]	; (b21c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b1ac:	2120      	movs	r1, #32
    b1ae:	f884 1020 	strb.w	r1, [r4, #32]
    b1b2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b1b6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b1ba:	2000      	movs	r0, #0
    b1bc:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b1c0:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b1c4:	1e42      	subs	r2, r0, #1
    b1c6:	e9c4 0200 	strd	r0, r2, [r4]
    b1ca:	77a0      	strb	r0, [r4, #30]
    b1cc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b1d0:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b1d4:	7720      	strb	r0, [r4, #28]
    b1d6:	7760      	strb	r0, [r4, #29]
    b1d8:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b1dc:	62e2      	str	r2, [r4, #44]	; 0x2c
    b1de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b1e2:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b1e6:	2210      	movs	r2, #16
    b1e8:	7088      	strb	r0, [r1, #2]
    b1ea:	f801 0f04 	strb.w	r0, [r1, #4]!
    b1ee:	1e52      	subs	r2, r2, #1
    b1f0:	d1fa      	bne.n	b1e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b1f2:	f000 fdcd 	bl	bd90 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b1f6:	4d0a      	ldr	r5, [pc, #40]	; (b220 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b1f8:	2601      	movs	r6, #1
    b1fa:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b1fe:	20ff      	movs	r0, #255	; 0xff
    b200:	7028      	strb	r0, [r5, #0]
    b202:	4808      	ldr	r0, [pc, #32]	; (b224 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b204:	f001 fa00 	bl	c608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b208:	7068      	strb	r0, [r5, #1]
    b20a:	f001 fa6b 	bl	c6e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b20e:	60a8      	str	r0, [r5, #8]
    b210:	f000 fd48 	bl	bca4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b214:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b218:	bd70      	pop	{r4, r5, r6, pc}
    b21a:	0000      	.short	0x0000
    b21c:	20001438 	.word	0x20001438
    b220:	200002ec 	.word	0x200002ec
    b224:	00009c4d 	.word	0x00009c4d

0000b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b228:	b500      	push	{lr}
    b22a:	b083      	sub	sp, #12
    b22c:	4668      	mov	r0, sp
    b22e:	f000 f9eb 	bl	b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b232:	9800      	ldr	r0, [sp, #0]
    b234:	f005 fc3b 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b238:	9a01      	ldr	r2, [sp, #4]
    b23a:	4b03      	ldr	r3, [pc, #12]	; (b248 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b23c:	2100      	movs	r1, #0
    b23e:	fbe2 0103 	umlal	r0, r1, r2, r3
    b242:	b003      	add	sp, #12
    b244:	bd00      	pop	{pc}
    b246:	0000      	.short	0x0000
    b248:	1e848000 	.word	0x1e848000

0000b24c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b24c:	b570      	push	{r4, r5, r6, lr}
    b24e:	4606      	mov	r6, r0
    b250:	b082      	sub	sp, #8
    b252:	461d      	mov	r5, r3
    b254:	4610      	mov	r0, r2
    b256:	f005 fc2a 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b25a:	4604      	mov	r4, r0
    b25c:	4668      	mov	r0, sp
    b25e:	f000 f9d3 	bl	b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b262:	4920      	ldr	r1, [pc, #128]	; (b2e4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    b264:	9801      	ldr	r0, [sp, #4]
    b266:	fba0 0201 	umull	r0, r2, r0, r1
    b26a:	1a30      	subs	r0, r6, r0
    b26c:	bf44      	itt	mi
    b26e:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    b272:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    b276:	d504      	bpl.n	b282 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    b278:	f640 410b 	movw	r1, #3083	; 0xc0b
    b27c:	2070      	movs	r0, #112	; 0x70
    b27e:	f001 f90d 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b282:	4288      	cmp	r0, r1
    b284:	db04      	blt.n	b290 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    b286:	f640 410c 	movw	r1, #3084	; 0xc0c
    b28a:	2070      	movs	r0, #112	; 0x70
    b28c:	f001 f906 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b290:	4a15      	ldr	r2, [pc, #84]	; (b2e8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    b292:	1a21      	subs	r1, r4, r0
    b294:	2300      	movs	r3, #0
    b296:	1a8a      	subs	r2, r1, r2
    b298:	f173 0200 	sbcs.w	r2, r3, #0
    b29c:	d318      	bcc.n	b2d0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b29e:	f8df c048 	ldr.w	ip, [pc, #72]	; b2e8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    b2a2:	1b02      	subs	r2, r0, r4
    b2a4:	ebb2 0c0c 	subs.w	ip, r2, ip
    b2a8:	f173 0300 	sbcs.w	r3, r3, #0
    b2ac:	d310      	bcc.n	b2d0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b2ae:	4b0f      	ldr	r3, [pc, #60]	; (b2ec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    b2b0:	428b      	cmp	r3, r1
    b2b2:	bf3e      	ittt	cc
    b2b4:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    b2b8:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b2bc:	1901      	addcc	r1, r0, r4
    b2be:	d307      	bcc.n	b2d0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b2c0:	4293      	cmp	r3, r2
    b2c2:	d20a      	bcs.n	b2da <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    b2c4:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    b2c8:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    b2cc:	4408      	add	r0, r1
    b2ce:	4241      	negs	r1, r0
    b2d0:	f101 000f 	add.w	r0, r1, #15
    b2d4:	b002      	add	sp, #8
    b2d6:	1a28      	subs	r0, r5, r0
    b2d8:	bd70      	pop	{r4, r5, r6, pc}
    b2da:	f640 3105 	movw	r1, #2821	; 0xb05
    b2de:	2070      	movs	r0, #112	; 0x70
    b2e0:	f001 f8dc 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2e4:	1e848000 	.word	0x1e848000
    b2e8:	0f424000 	.word	0x0f424000
    b2ec:	1e847fff 	.word	0x1e847fff

0000b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b2f0:	0b41      	lsrs	r1, r0, #13
    b2f2:	f248 6237 	movw	r2, #34359	; 0x8637
    b2f6:	4351      	muls	r1, r2
    b2f8:	0c0a      	lsrs	r2, r1, #16
    b2fa:	4b09      	ldr	r3, [pc, #36]	; (b320 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b2fc:	0251      	lsls	r1, r2, #9
    b2fe:	fb02 0203 	mla	r2, r2, r3, r0
    b302:	4808      	ldr	r0, [pc, #32]	; (b324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b304:	4350      	muls	r0, r2
    b306:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b30a:	306e      	adds	r0, #110	; 0x6e
    b30c:	0d40      	lsrs	r0, r0, #21
    b30e:	425b      	negs	r3, r3
    b310:	fb10 f303 	smulbb	r3, r0, r3
    b314:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b318:	bf88      	it	hi
    b31a:	1c49      	addhi	r1, r1, #1
    b31c:	4408      	add	r0, r1
    b31e:	4770      	bx	lr
    b320:	ffffc2f7 	.word	0xffffc2f7
    b324:	00010c6f 	.word	0x00010c6f

0000b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b328:	0b43      	lsrs	r3, r0, #13
    b32a:	f248 6c37 	movw	ip, #34359	; 0x8637
    b32e:	fb03 f30c 	mul.w	r3, r3, ip
    b332:	b430      	push	{r4, r5}
    b334:	0c1b      	lsrs	r3, r3, #16
    b336:	f8df c044 	ldr.w	ip, [pc, #68]	; b37c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b33a:	025c      	lsls	r4, r3, #9
    b33c:	fb03 030c 	mla	r3, r3, ip, r0
    b340:	480f      	ldr	r0, [pc, #60]	; (b380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b342:	4358      	muls	r0, r3
    b344:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b348:	eb04 000c 	add.w	r0, r4, ip
    b34c:	f643 5409 	movw	r4, #15625	; 0x3d09
    b350:	fb1c f404 	smulbb	r4, ip, r4
    b354:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b358:	f643 5508 	movw	r5, #15624	; 0x3d08
    b35c:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b360:	442c      	add	r4, r5
    b362:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b366:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b36a:	bf84      	itt	hi
    b36c:	f04f 0c00 	movhi.w	ip, #0
    b370:	1c40      	addhi	r0, r0, #1
    b372:	6008      	str	r0, [r1, #0]
    b374:	f882 c000 	strb.w	ip, [r2]
    b378:	bc30      	pop	{r4, r5}
    b37a:	4770      	bx	lr
    b37c:	ffffc2f7 	.word	0xffffc2f7
    b380:	00010c6f 	.word	0x00010c6f

0000b384 <MPSL_IRQ_RTC0_Handler>:
    b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b388:	4d3b      	ldr	r5, [pc, #236]	; (b478 <MPSL_IRQ_RTC0_Handler+0xf4>)
    b38a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b38e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b47c <MPSL_IRQ_RTC0_Handler+0xf8>
    b392:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b396:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b39a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b39e:	f04f 0400 	mov.w	r4, #0
    b3a2:	d019      	beq.n	b3d8 <MPSL_IRQ_RTC0_Handler+0x54>
    b3a4:	4836      	ldr	r0, [pc, #216]	; (b480 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b3a6:	6800      	ldr	r0, [r0, #0]
    b3a8:	b1b0      	cbz	r0, b3d8 <MPSL_IRQ_RTC0_Handler+0x54>
    b3aa:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b3ae:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b3b2:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b3b6:	f8d8 1000 	ldr.w	r1, [r8]
    b3ba:	1a40      	subs	r0, r0, r1
    b3bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b3c0:	2802      	cmp	r0, #2
    b3c2:	d302      	bcc.n	b3ca <MPSL_IRQ_RTC0_Handler+0x46>
    b3c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b3c8:	d906      	bls.n	b3d8 <MPSL_IRQ_RTC0_Handler+0x54>
    b3ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b3ce:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b3d2:	2004      	movs	r0, #4
    b3d4:	f7fe fe98 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3d8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b3dc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b3e0:	d01a      	beq.n	b418 <MPSL_IRQ_RTC0_Handler+0x94>
    b3e2:	4828      	ldr	r0, [pc, #160]	; (b484 <MPSL_IRQ_RTC0_Handler+0x100>)
    b3e4:	6800      	ldr	r0, [r0, #0]
    b3e6:	b1b8      	cbz	r0, b418 <MPSL_IRQ_RTC0_Handler+0x94>
    b3e8:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b3ec:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b3f0:	4825      	ldr	r0, [pc, #148]	; (b488 <MPSL_IRQ_RTC0_Handler+0x104>)
    b3f2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b3f6:	f8d8 1000 	ldr.w	r1, [r8]
    b3fa:	1a40      	subs	r0, r0, r1
    b3fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b400:	2802      	cmp	r0, #2
    b402:	d302      	bcc.n	b40a <MPSL_IRQ_RTC0_Handler+0x86>
    b404:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b408:	d906      	bls.n	b418 <MPSL_IRQ_RTC0_Handler+0x94>
    b40a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b40e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b412:	2005      	movs	r0, #5
    b414:	f7fe fe78 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b418:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b41c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b420:	d01a      	beq.n	b458 <MPSL_IRQ_RTC0_Handler+0xd4>
    b422:	481a      	ldr	r0, [pc, #104]	; (b48c <MPSL_IRQ_RTC0_Handler+0x108>)
    b424:	6800      	ldr	r0, [r0, #0]
    b426:	b1b8      	cbz	r0, b458 <MPSL_IRQ_RTC0_Handler+0xd4>
    b428:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b42c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b430:	4817      	ldr	r0, [pc, #92]	; (b490 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b432:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b436:	f8d8 1000 	ldr.w	r1, [r8]
    b43a:	1a40      	subs	r0, r0, r1
    b43c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b440:	2802      	cmp	r0, #2
    b442:	d302      	bcc.n	b44a <MPSL_IRQ_RTC0_Handler+0xc6>
    b444:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b448:	d906      	bls.n	b458 <MPSL_IRQ_RTC0_Handler+0xd4>
    b44a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b44e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b452:	2006      	movs	r0, #6
    b454:	f7fe fe58 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b458:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b45c:	2800      	cmp	r0, #0
    b45e:	bf08      	it	eq
    b460:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b464:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b468:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b46c:	4809      	ldr	r0, [pc, #36]	; (b494 <MPSL_IRQ_RTC0_Handler+0x110>)
    b46e:	68c1      	ldr	r1, [r0, #12]
    b470:	1c49      	adds	r1, r1, #1
    b472:	60c1      	str	r1, [r0, #12]
    b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b478:	4000b000 	.word	0x4000b000
    b47c:	4000b504 	.word	0x4000b504
    b480:	4000b140 	.word	0x4000b140
    b484:	4000b144 	.word	0x4000b144
    b488:	4000b004 	.word	0x4000b004
    b48c:	4000b148 	.word	0x4000b148
    b490:	4000b008 	.word	0x4000b008
    b494:	200002f8 	.word	0x200002f8

0000b498 <MPSL_IRQ_TIMER0_Handler>:
    b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b49c:	4d38      	ldr	r5, [pc, #224]	; (b580 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b49e:	7828      	ldrb	r0, [r5, #0]
    b4a0:	2804      	cmp	r0, #4
    b4a2:	d068      	beq.n	b576 <MPSL_IRQ_TIMER0_Handler+0xde>
    b4a4:	1ca8      	adds	r0, r5, #2
    b4a6:	2201      	movs	r2, #1
    b4a8:	7801      	ldrb	r1, [r0, #0]
    b4aa:	b159      	cbz	r1, b4c4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b4ac:	2901      	cmp	r1, #1
    b4ae:	bf08      	it	eq
    b4b0:	706a      	strbeq	r2, [r5, #1]
    b4b2:	d002      	beq.n	b4ba <MPSL_IRQ_TIMER0_Handler+0x22>
    b4b4:	7869      	ldrb	r1, [r5, #1]
    b4b6:	2900      	cmp	r1, #0
    b4b8:	d058      	beq.n	b56c <MPSL_IRQ_TIMER0_Handler+0xd4>
    b4ba:	2102      	movs	r1, #2
    b4bc:	7001      	strb	r1, [r0, #0]
    b4be:	7840      	ldrb	r0, [r0, #1]
    b4c0:	f000 fb12 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4c4:	4c2f      	ldr	r4, [pc, #188]	; (b584 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b4c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4ca:	f04f 0800 	mov.w	r8, #0
    b4ce:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b4d2:	f44f 7780 	mov.w	r7, #256	; 0x100
    b4d6:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b4da:	d00a      	beq.n	b4f2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b4dc:	482a      	ldr	r0, [pc, #168]	; (b588 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b4de:	6800      	ldr	r0, [r0, #0]
    b4e0:	b138      	cbz	r0, b4f2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b4e2:	2003      	movs	r0, #3
    b4e4:	f000 fb00 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4e8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b4ec:	2003      	movs	r0, #3
    b4ee:	f7fe fe0b 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b4f2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4f6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b4fa:	d00a      	beq.n	b512 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b4fc:	4823      	ldr	r0, [pc, #140]	; (b58c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b4fe:	6800      	ldr	r0, [r0, #0]
    b500:	b138      	cbz	r0, b512 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b502:	2002      	movs	r0, #2
    b504:	f000 faf0 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b508:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b50c:	2002      	movs	r0, #2
    b50e:	f7fe fdfb 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b512:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b516:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b51a:	d00a      	beq.n	b532 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b51c:	481c      	ldr	r0, [pc, #112]	; (b590 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b51e:	6800      	ldr	r0, [r0, #0]
    b520:	b138      	cbz	r0, b532 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b522:	2001      	movs	r0, #1
    b524:	f000 fae0 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b528:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b52c:	2001      	movs	r0, #1
    b52e:	f7fe fdeb 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b532:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b536:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b53a:	bf08      	it	eq
    b53c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b540:	4814      	ldr	r0, [pc, #80]	; (b594 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b542:	6800      	ldr	r0, [r0, #0]
    b544:	2800      	cmp	r0, #0
    b546:	bf08      	it	eq
    b548:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b54c:	2000      	movs	r0, #0
    b54e:	f000 facb 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b552:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b556:	2004      	movs	r0, #4
    b558:	7028      	strb	r0, [r5, #0]
    b55a:	f8c5 8004 	str.w	r8, [r5, #4]
    b55e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b566:	2000      	movs	r0, #0
    b568:	f7fe bdce 	b.w	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b56c:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b570:	206c      	movs	r0, #108	; 0x6c
    b572:	f000 ff93 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b57a:	2007      	movs	r0, #7
    b57c:	f7fe bdc4 	b.w	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b580:	200002f8 	.word	0x200002f8
    b584:	40008000 	.word	0x40008000
    b588:	4000814c 	.word	0x4000814c
    b58c:	40008148 	.word	0x40008148
    b590:	40008144 	.word	0x40008144
    b594:	40008140 	.word	0x40008140
    b598:	2201      	movs	r2, #1
    b59a:	0211      	lsls	r1, r2, #8
    b59c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b5a0:	2000      	movs	r0, #0
    b5a2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b5a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b5aa:	f3bf 8f4f 	dsb	sy
    b5ae:	f3bf 8f6f 	isb	sy
    b5b2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b5b6:	490e      	ldr	r1, [pc, #56]	; (b5f0 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b5b8:	f841 2f04 	str.w	r2, [r1, #4]!
    b5bc:	1e43      	subs	r3, r0, #1
    b5be:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b5c2:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b5c6:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b5ca:	4b0a      	ldr	r3, [pc, #40]	; (b5f4 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b5cc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b5d0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b5d4:	1d1b      	adds	r3, r3, #4
    b5d6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b5da:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b5de:	1d1b      	adds	r3, r3, #4
    b5e0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b5e4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b5e8:	60ca      	str	r2, [r1, #12]
    b5ea:	4903      	ldr	r1, [pc, #12]	; (b5f8 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b5ec:	7048      	strb	r0, [r1, #1]
    b5ee:	4770      	bx	lr
    b5f0:	40008000 	.word	0x40008000
    b5f4:	40008004 	.word	0x40008004
    b5f8:	200002f8 	.word	0x200002f8

0000b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b5fc:	4801      	ldr	r0, [pc, #4]	; (b604 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b5fe:	6800      	ldr	r0, [r0, #0]
    b600:	4770      	bx	lr
    b602:	0000      	.short	0x0000
    b604:	4000b504 	.word	0x4000b504

0000b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b608:	b430      	push	{r4, r5}
    b60a:	f3ef 8c10 	mrs	ip, PRIMASK
    b60e:	b672      	cpsid	i
    b610:	2500      	movs	r5, #0
    b612:	4b0b      	ldr	r3, [pc, #44]	; (b640 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b614:	4a0b      	ldr	r2, [pc, #44]	; (b644 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b616:	bf00      	nop
    b618:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b61c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b620:	b12c      	cbz	r4, b62e <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b622:	68d1      	ldr	r1, [r2, #12]
    b624:	1c49      	adds	r1, r1, #1
    b626:	60d1      	str	r1, [r2, #12]
    b628:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b62c:	e7f4      	b.n	b618 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b62e:	68d2      	ldr	r2, [r2, #12]
    b630:	f1bc 0f00 	cmp.w	ip, #0
    b634:	d100      	bne.n	b638 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b636:	b662      	cpsie	i
    b638:	e9c0 1200 	strd	r1, r2, [r0]
    b63c:	bc30      	pop	{r4, r5}
    b63e:	4770      	bx	lr
    b640:	4000b000 	.word	0x4000b000
    b644:	200002f8 	.word	0x200002f8

0000b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b64c:	f8df 8134 	ldr.w	r8, [pc, #308]	; b784 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b650:	4605      	mov	r5, r0
    b652:	f1a8 0602 	sub.w	r6, r8, #2
    b656:	f898 3000 	ldrb.w	r3, [r8]
    b65a:	68b0      	ldr	r0, [r6, #8]
    b65c:	2b01      	cmp	r3, #1
    b65e:	bf04      	itt	eq
    b660:	42a8      	cmpeq	r0, r5
    b662:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b666:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b66a:	4a47      	ldr	r2, [pc, #284]	; (b788 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b66c:	6011      	str	r1, [r2, #0]
    b66e:	4948      	ldr	r1, [pc, #288]	; (b790 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b670:	4a46      	ldr	r2, [pc, #280]	; (b78c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b672:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b676:	f101 0c04 	add.w	ip, r1, #4
    b67a:	f04f 0400 	mov.w	r4, #0
    b67e:	2b00      	cmp	r3, #0
    b680:	d055      	beq.n	b72e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b682:	4a44      	ldr	r2, [pc, #272]	; (b794 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b684:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b688:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b68c:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b690:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b694:	2701      	movs	r7, #1
    b696:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b69a:	2a00      	cmp	r2, #0
    b69c:	bf01      	itttt	eq
    b69e:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b6a2:	2a00      	cmpeq	r2, #0
    b6a4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b6a8:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b6ac:	f04f 0a10 	mov.w	sl, #16
    b6b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b6b4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b6b8:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b6bc:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b6c0:	4a35      	ldr	r2, [pc, #212]	; (b798 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b6c2:	f8d2 c000 	ldr.w	ip, [r2]
    b6c6:	eba5 0c0c 	sub.w	ip, r5, ip
    b6ca:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b6ce:	f1bc 0f02 	cmp.w	ip, #2
    b6d2:	d337      	bcc.n	b744 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b6d4:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b6d8:	d834      	bhi.n	b744 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b6da:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b6de:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b6e2:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b6e6:	b12b      	cbz	r3, b6f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b6e8:	6811      	ldr	r1, [r2, #0]
    b6ea:	1a41      	subs	r1, r0, r1
    b6ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b6f0:	2902      	cmp	r1, #2
    b6f2:	d3f9      	bcc.n	b6e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b6f4:	6077      	str	r7, [r6, #4]
    b6f6:	7034      	strb	r4, [r6, #0]
    b6f8:	f7ff ff4e 	bl	b598 <MPSL_IRQ_TIMER0_Handler+0x100>
    b6fc:	4827      	ldr	r0, [pc, #156]	; (b79c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b6fe:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b702:	f364 0101 	bfi	r1, r4, #0, #2
    b706:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b70a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b70e:	2102      	movs	r1, #2
    b710:	f361 0201 	bfi	r2, r1, #0, #2
    b714:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b718:	fa9a f1aa 	rbit	r1, sl
    b71c:	fab1 f181 	clz	r1, r1
    b720:	2909      	cmp	r1, #9
    b722:	d917      	bls.n	b754 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b724:	f240 3155 	movw	r1, #853	; 0x355
    b728:	a01d      	add	r0, pc, #116	; (adr r0, b7a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b72a:	f000 fe8b 	bl	c444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b72e:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b732:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b736:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b73a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b73e:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b742:	e7a5      	b.n	b690 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b744:	2000      	movs	r0, #0
    b746:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b74a:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b74e:	206c      	movs	r0, #108	; 0x6c
    b750:	f000 fea4 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b754:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b758:	60c7      	str	r7, [r0, #12]
    b75a:	6871      	ldr	r1, [r6, #4]
    b75c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b760:	f44f 7080 	mov.w	r0, #256	; 0x100
    b764:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b768:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b76c:	490f      	ldr	r1, [pc, #60]	; (b7ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b76e:	05c0      	lsls	r0, r0, #23
    b770:	6008      	str	r0, [r1, #0]
    b772:	2004      	movs	r0, #4
    b774:	60b5      	str	r5, [r6, #8]
    b776:	f888 0001 	strb.w	r0, [r8, #1]
    b77a:	f888 7000 	strb.w	r7, [r8]
    b77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b782:	0000      	.short	0x0000
    b784:	200002fa 	.word	0x200002fa
    b788:	4001f508 	.word	0x4001f508
    b78c:	fffbfffd 	.word	0xfffbfffd
    b790:	4000b000 	.word	0x4000b000
    b794:	fffafffd 	.word	0xfffafffd
    b798:	4000b504 	.word	0x4000b504
    b79c:	40008000 	.word	0x40008000
    b7a0:	5f66726e 	.word	0x5f66726e
    b7a4:	656d6974 	.word	0x656d6974
    b7a8:	00682e72 	.word	0x00682e72
    b7ac:	4001f504 	.word	0x4001f504

0000b7b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b7b0:	b570      	push	{r4, r5, r6, lr}
    b7b2:	4c2a      	ldr	r4, [pc, #168]	; (b85c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b7b4:	68a1      	ldr	r1, [r4, #8]
    b7b6:	4281      	cmp	r1, r0
    b7b8:	bf14      	ite	ne
    b7ba:	2201      	movne	r2, #1
    b7bc:	2200      	moveq	r2, #0
    b7be:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b860 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b7c2:	f89c 5000 	ldrb.w	r5, [ip]
    b7c6:	2d02      	cmp	r5, #2
    b7c8:	d002      	beq.n	b7d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b7ca:	2a00      	cmp	r2, #0
    b7cc:	d034      	beq.n	b838 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b7ce:	e002      	b.n	b7d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b7d0:	2a00      	cmp	r2, #0
    b7d2:	bf08      	it	eq
    b7d4:	bd70      	popeq	{r4, r5, r6, pc}
    b7d6:	7862      	ldrb	r2, [r4, #1]
    b7d8:	b39a      	cbz	r2, b842 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b7da:	4b22      	ldr	r3, [pc, #136]	; (b864 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b7dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b7e0:	601a      	str	r2, [r3, #0]
    b7e2:	4b21      	ldr	r3, [pc, #132]	; (b868 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b7e4:	1392      	asrs	r2, r2, #14
    b7e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b7ea:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b7ee:	2200      	movs	r2, #0
    b7f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b7f4:	4a1d      	ldr	r2, [pc, #116]	; (b86c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b7f6:	6816      	ldr	r6, [r2, #0]
    b7f8:	1b86      	subs	r6, r0, r6
    b7fa:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b7fe:	2e02      	cmp	r6, #2
    b800:	d324      	bcc.n	b84c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b802:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b806:	d821      	bhi.n	b84c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b808:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b80c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b810:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b814:	b12d      	cbz	r5, b822 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b816:	6813      	ldr	r3, [r2, #0]
    b818:	1acb      	subs	r3, r1, r3
    b81a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b81e:	2b02      	cmp	r3, #2
    b820:	d3f9      	bcc.n	b816 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b822:	4b13      	ldr	r3, [pc, #76]	; (b870 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b824:	2102      	movs	r1, #2
    b826:	074a      	lsls	r2, r1, #29
    b828:	601a      	str	r2, [r3, #0]
    b82a:	60a0      	str	r0, [r4, #8]
    b82c:	2004      	movs	r0, #4
    b82e:	f88c 0001 	strb.w	r0, [ip, #1]
    b832:	f88c 1000 	strb.w	r1, [ip]
    b836:	bd70      	pop	{r4, r5, r6, pc}
    b838:	f240 21aa 	movw	r1, #682	; 0x2aa
    b83c:	206c      	movs	r0, #108	; 0x6c
    b83e:	f000 fe2d 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b842:	f240 21ae 	movw	r1, #686	; 0x2ae
    b846:	206c      	movs	r0, #108	; 0x6c
    b848:	f000 fe28 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b84c:	2000      	movs	r0, #0
    b84e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b852:	f240 21ba 	movw	r1, #698	; 0x2ba
    b856:	206c      	movs	r0, #108	; 0x6c
    b858:	f000 fe20 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b85c:	200002f8 	.word	0x200002f8
    b860:	200002fa 	.word	0x200002fa
    b864:	4001f508 	.word	0x4001f508
    b868:	4000b000 	.word	0x4000b000
    b86c:	4000b504 	.word	0x4000b504
    b870:	4001f504 	.word	0x4001f504

0000b874 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b874:	4801      	ldr	r0, [pc, #4]	; (b87c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b876:	6880      	ldr	r0, [r0, #8]
    b878:	4770      	bx	lr
    b87a:	0000      	.short	0x0000
    b87c:	200002f8 	.word	0x200002f8

0000b880 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b884:	4836      	ldr	r0, [pc, #216]	; (b960 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b886:	4a35      	ldr	r2, [pc, #212]	; (b95c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b888:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b88c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b964 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b890:	1d03      	adds	r3, r0, #4
    b892:	2100      	movs	r1, #0
    b894:	f89c 4000 	ldrb.w	r4, [ip]
    b898:	b184      	cbz	r4, b8bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b89a:	4a33      	ldr	r2, [pc, #204]	; (b968 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b89c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b8a0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b8a4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b8a8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b8ac:	2301      	movs	r3, #1
    b8ae:	2a00      	cmp	r2, #0
    b8b0:	bf04      	itt	eq
    b8b2:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b8b6:	2800      	cmpeq	r0, #0
    b8b8:	d111      	bne.n	b8de <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b8ba:	e00a      	b.n	b8d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b8bc:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b8c0:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b8c4:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b8c8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b8cc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b8d0:	e7ea      	b.n	b8a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b8d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b8d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b8da:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b8de:	2c02      	cmp	r4, #2
    b8e0:	d004      	beq.n	b8ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b8e2:	f240 21c6 	movw	r1, #710	; 0x2c6
    b8e6:	206c      	movs	r0, #108	; 0x6c
    b8e8:	f000 fdd8 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8ec:	4e1f      	ldr	r6, [pc, #124]	; (b96c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b8ee:	6830      	ldr	r0, [r6, #0]
    b8f0:	4c1f      	ldr	r4, [pc, #124]	; (b970 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b8f2:	1cc0      	adds	r0, r0, #3
    b8f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b8f8:	68a2      	ldr	r2, [r4, #8]
    b8fa:	4d1e      	ldr	r5, [pc, #120]	; (b974 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b8fc:	4290      	cmp	r0, r2
    b8fe:	d00b      	beq.n	b918 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b900:	6837      	ldr	r7, [r6, #0]
    b902:	1bd7      	subs	r7, r2, r7
    b904:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b908:	2f04      	cmp	r7, #4
    b90a:	d305      	bcc.n	b918 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b90c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b910:	d802      	bhi.n	b918 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b912:	f7ff fe99 	bl	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b916:	e01b      	b.n	b950 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b918:	6830      	ldr	r0, [r6, #0]
    b91a:	1a10      	subs	r0, r2, r0
    b91c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b920:	2802      	cmp	r0, #2
    b922:	d313      	bcc.n	b94c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b924:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b928:	d810      	bhi.n	b94c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b92a:	4a13      	ldr	r2, [pc, #76]	; (b978 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b92c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b930:	6010      	str	r0, [r2, #0]
    b932:	6063      	str	r3, [r4, #4]
    b934:	7021      	strb	r1, [r4, #0]
    b936:	606b      	str	r3, [r5, #4]
    b938:	60eb      	str	r3, [r5, #12]
    b93a:	0040      	lsls	r0, r0, #1
    b93c:	1f11      	subs	r1, r2, #4
    b93e:	6008      	str	r0, [r1, #0]
    b940:	2004      	movs	r0, #4
    b942:	f88c 0001 	strb.w	r0, [ip, #1]
    b946:	f88c 3000 	strb.w	r3, [ip]
    b94a:	e001      	b.n	b950 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b94c:	6063      	str	r3, [r4, #4]
    b94e:	7021      	strb	r1, [r4, #0]
    b950:	6860      	ldr	r0, [r4, #4]
    b952:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b95a:	0000      	.short	0x0000
    b95c:	fffbfffd 	.word	0xfffbfffd
    b960:	4000b000 	.word	0x4000b000
    b964:	200002fa 	.word	0x200002fa
    b968:	fffafffd 	.word	0xfffafffd
    b96c:	4000b504 	.word	0x4000b504
    b970:	200002f8 	.word	0x200002f8
    b974:	40008000 	.word	0x40008000
    b978:	4001f508 	.word	0x4001f508

0000b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b980:	4a54      	ldr	r2, [pc, #336]	; (bad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    b982:	2500      	movs	r5, #0
    b984:	2401      	movs	r4, #1
    b986:	f892 c000 	ldrb.w	ip, [r2]
    b98a:	7853      	ldrb	r3, [r2, #1]
    b98c:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b990:	2807      	cmp	r0, #7
    b992:	d27d      	bcs.n	ba90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b994:	e8df f000 	tbb	[pc, r0]
    b998:	04040404 	.word	0x04040404
    b99c:	00585858 	.word	0x00585858
    b9a0:	4a4d      	ldr	r2, [pc, #308]	; (bad8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    b9a2:	6897      	ldr	r7, [r2, #8]
    b9a4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    b9a8:	bf04      	itt	eq
    b9aa:	7852      	ldrbeq	r2, [r2, #1]
    b9ac:	2a00      	cmpeq	r2, #0
    b9ae:	d003      	beq.n	b9b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    b9b0:	f1bc 0f02 	cmp.w	ip, #2
    b9b4:	d005      	beq.n	b9c2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    b9b6:	e026      	b.n	ba06 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    b9b8:	f240 3156 	movw	r1, #854	; 0x356
    b9bc:	206c      	movs	r0, #108	; 0x6c
    b9be:	f000 fd6d 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9c2:	1f1a      	subs	r2, r3, #4
    b9c4:	b2d2      	uxtb	r2, r2
    b9c6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b9ca:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b9ce:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b9d2:	2200      	movs	r2, #0
    b9d4:	f1bc 0f01 	cmp.w	ip, #1
    b9d8:	d003      	beq.n	b9e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b9da:	f1bc 0f02 	cmp.w	ip, #2
    b9de:	d008      	beq.n	b9f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b9e0:	e00e      	b.n	ba00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b9e2:	2b04      	cmp	r3, #4
    b9e4:	bf24      	itt	cs
    b9e6:	6837      	ldrcs	r7, [r6, #0]
    b9e8:	2f00      	cmpcs	r7, #0
    b9ea:	bf08      	it	eq
    b9ec:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b9f0:	e006      	b.n	ba00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b9f2:	2b04      	cmp	r3, #4
    b9f4:	bf24      	itt	cs
    b9f6:	6837      	ldrcs	r7, [r6, #0]
    b9f8:	2f00      	cmpcs	r7, #0
    b9fa:	bf08      	it	eq
    b9fc:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    ba00:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    ba04:	d1e5      	bne.n	b9d2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    ba06:	f8df c0d4 	ldr.w	ip, [pc, #212]	; badc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    ba0a:	f100 0210 	add.w	r2, r0, #16
    ba0e:	fa04 f202 	lsl.w	r2, r4, r2
    ba12:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    ba16:	f04f 0340 	mov.w	r3, #64	; 0x40
    ba1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ba1e:	b2db      	uxtb	r3, r3
    ba20:	4463      	add	r3, ip
    ba22:	601c      	str	r4, [r3, #0]
    ba24:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    ba28:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    ba2c:	eba1 0303 	sub.w	r3, r1, r3
    ba30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ba34:	2b03      	cmp	r3, #3
    ba36:	bf26      	itte	cs
    ba38:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    ba3c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    ba40:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    ba44:	d237      	bcs.n	bab6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    ba46:	e03c      	b.n	bac2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    ba48:	f1bc 0f00 	cmp.w	ip, #0
    ba4c:	d006      	beq.n	ba5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    ba4e:	4283      	cmp	r3, r0
    ba50:	d104      	bne.n	ba5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    ba52:	f240 3176 	movw	r1, #886	; 0x376
    ba56:	206c      	movs	r0, #108	; 0x6c
    ba58:	f000 fd20 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba5c:	1f02      	subs	r2, r0, #4
    ba5e:	b2d3      	uxtb	r3, r2
    ba60:	2b03      	cmp	r3, #3
    ba62:	d304      	bcc.n	ba6e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    ba64:	f240 11d1 	movw	r1, #465	; 0x1d1
    ba68:	206c      	movs	r0, #108	; 0x6c
    ba6a:	f000 fd17 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba6e:	f8df c070 	ldr.w	ip, [pc, #112]	; bae0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    ba72:	f103 0210 	add.w	r2, r3, #16
    ba76:	fa04 f202 	lsl.w	r2, r4, r2
    ba7a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    ba7e:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    ba82:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    ba86:	f84c 5003 	str.w	r5, [ip, r3]
    ba8a:	4b16      	ldr	r3, [pc, #88]	; (bae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    ba8c:	681b      	ldr	r3, [r3, #0]
    ba8e:	e000      	b.n	ba92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    ba90:	e01a      	b.n	bac8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    ba92:	1f00      	subs	r0, r0, #4
    ba94:	1acb      	subs	r3, r1, r3
    ba96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ba9a:	b2c0      	uxtb	r0, r0
    ba9c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    baa0:	2b02      	cmp	r3, #2
    baa2:	d30b      	bcc.n	babc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    baa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    baa8:	d808      	bhi.n	babc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    baaa:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    baae:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    bab2:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    bab6:	2001      	movs	r0, #1
    bab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    babc:	2100      	movs	r1, #0
    babe:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bac2:	2000      	movs	r0, #0
    bac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bac8:	f240 317a 	movw	r1, #890	; 0x37a
    bacc:	206c      	movs	r0, #108	; 0x6c
    bace:	f000 fce5 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bad2:	0000      	.short	0x0000
    bad4:	200002fa 	.word	0x200002fa
    bad8:	200002f8 	.word	0x200002f8
    badc:	40008000 	.word	0x40008000
    bae0:	4000b000 	.word	0x4000b000
    bae4:	4000b504 	.word	0x4000b504

0000bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    baec:	2601      	movs	r6, #1
    baee:	2700      	movs	r7, #0
    baf0:	f44f 78a0 	mov.w	r8, #320	; 0x140
    baf4:	2807      	cmp	r0, #7
    baf6:	d251      	bcs.n	bb9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    baf8:	e8df f000 	tbb	[pc, r0]
    bafc:	04040404 	.word	0x04040404
    bb00:	00191919 	.word	0x00191919
    bb04:	f100 0110 	add.w	r1, r0, #16
    bb08:	fa06 f201 	lsl.w	r2, r6, r1
    bb0c:	4926      	ldr	r1, [pc, #152]	; (bba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bb0e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bb12:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bb16:	2200      	movs	r2, #0
    bb18:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bb1c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    bb20:	508f      	str	r7, [r1, r2]
    bb22:	4922      	ldr	r1, [pc, #136]	; (bbac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bb24:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bb28:	9000      	str	r0, [sp, #0]
    bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bb2e:	4d20      	ldr	r5, [pc, #128]	; (bbb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bb30:	1f01      	subs	r1, r0, #4
    bb32:	b2cc      	uxtb	r4, r1
    bb34:	7829      	ldrb	r1, [r5, #0]
    bb36:	b179      	cbz	r1, bb58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bb38:	786a      	ldrb	r2, [r5, #1]
    bb3a:	4282      	cmp	r2, r0
    bb3c:	d10c      	bne.n	bb58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bb3e:	4a1d      	ldr	r2, [pc, #116]	; (bbb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bb40:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bb44:	6010      	str	r0, [r2, #0]
    bb46:	2901      	cmp	r1, #1
    bb48:	bf08      	it	eq
    bb4a:	f7ff fd25 	bleq	b598 <MPSL_IRQ_TIMER0_Handler+0x100>
    bb4e:	702f      	strb	r7, [r5, #0]
    bb50:	4919      	ldr	r1, [pc, #100]	; (bbb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    bb52:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    bb56:	6088      	str	r0, [r1, #8]
    bb58:	4918      	ldr	r1, [pc, #96]	; (bbbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    bb5a:	f104 0010 	add.w	r0, r4, #16
    bb5e:	fa06 f000 	lsl.w	r0, r6, r0
    bb62:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bb66:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bb6a:	00a0      	lsls	r0, r4, #2
    bb6c:	4408      	add	r0, r1
    bb6e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bb72:	4a13      	ldr	r2, [pc, #76]	; (bbc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    bb74:	6812      	ldr	r2, [r2, #0]
    bb76:	1a80      	subs	r0, r0, r2
    bb78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb7c:	2802      	cmp	r0, #2
    bb7e:	d307      	bcc.n	bb90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    bb80:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    bb84:	2000      	movs	r0, #0
    bb86:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bb8a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    bb8e:	500f      	str	r7, [r1, r0]
    bb90:	480c      	ldr	r0, [pc, #48]	; (bbc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    bb92:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bb96:	9000      	str	r0, [sp, #0]
    bb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bb9c:	f240 31fe 	movw	r1, #1022	; 0x3fe
    bba0:	206c      	movs	r0, #108	; 0x6c
    bba2:	f000 fc7b 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bba6:	0000      	.short	0x0000
    bba8:	40008000 	.word	0x40008000
    bbac:	40008140 	.word	0x40008140
    bbb0:	200002fa 	.word	0x200002fa
    bbb4:	4001f508 	.word	0x4001f508
    bbb8:	200002f8 	.word	0x200002f8
    bbbc:	4000b000 	.word	0x4000b000
    bbc0:	4000b504 	.word	0x4000b504
    bbc4:	4000b140 	.word	0x4000b140

0000bbc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bbc8:	4825      	ldr	r0, [pc, #148]	; (bc60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    bbca:	4a24      	ldr	r2, [pc, #144]	; (bc5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    bbcc:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bbd0:	4924      	ldr	r1, [pc, #144]	; (bc64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    bbd2:	1d03      	adds	r3, r0, #4
    bbd4:	f891 c000 	ldrb.w	ip, [r1]
    bbd8:	2100      	movs	r1, #0
    bbda:	f1bc 0f00 	cmp.w	ip, #0
    bbde:	d010      	beq.n	bc02 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bbe0:	4a21      	ldr	r2, [pc, #132]	; (bc68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    bbe2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bbe6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bbea:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bbee:	bf00      	nop
    bbf0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bbf4:	2a00      	cmp	r2, #0
    bbf6:	bf04      	itt	eq
    bbf8:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bbfc:	2800      	cmpeq	r0, #0
    bbfe:	d111      	bne.n	bc24 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bc00:	e00a      	b.n	bc18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bc02:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc06:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc0a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bc0e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bc12:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc16:	e7eb      	b.n	bbf0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    bc18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bc20:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bc24:	4811      	ldr	r0, [pc, #68]	; (bc6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    bc26:	f04f 32ff 	mov.w	r2, #4294967295
    bc2a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bc2e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc32:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bc36:	f100 0204 	add.w	r2, r0, #4
    bc3a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bc3e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc42:	f102 0204 	add.w	r2, r2, #4
    bc46:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bc4a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bc4e:	f102 0204 	add.w	r2, r2, #4
    bc52:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bc56:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bc5a:	4770      	bx	lr
    bc5c:	fffbfffd 	.word	0xfffbfffd
    bc60:	4000b000 	.word	0x4000b000
    bc64:	200002fa 	.word	0x200002fa
    bc68:	fffafffd 	.word	0xfffafffd
    bc6c:	40008000 	.word	0x40008000

0000bc70 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bc70:	b510      	push	{r4, lr}
    bc72:	2807      	cmp	r0, #7
    bc74:	d20d      	bcs.n	bc92 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bc76:	e8df f000 	tbb	[pc, r0]
    bc7a:	0404      	.short	0x0404
    bc7c:	06060404 	.word	0x06060404
    bc80:	0006      	.short	0x0006
    bc82:	4906      	ldr	r1, [pc, #24]	; (bc9c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bc84:	e002      	b.n	bc8c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bc86:	1f00      	subs	r0, r0, #4
    bc88:	4905      	ldr	r1, [pc, #20]	; (bca0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bc8a:	b2c0      	uxtb	r0, r0
    bc8c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bc90:	bd10      	pop	{r4, pc}
    bc92:	f240 319e 	movw	r1, #926	; 0x39e
    bc96:	206c      	movs	r0, #108	; 0x6c
    bc98:	f000 fc00 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc9c:	40008140 	.word	0x40008140
    bca0:	4000b140 	.word	0x4000b140

0000bca4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bca4:	b570      	push	{r4, r5, r6, lr}
    bca6:	481f      	ldr	r0, [pc, #124]	; (bd24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bca8:	2400      	movs	r4, #0
    bcaa:	2104      	movs	r1, #4
    bcac:	7004      	strb	r4, [r0, #0]
    bcae:	1e80      	subs	r0, r0, #2
    bcb0:	7001      	strb	r1, [r0, #0]
    bcb2:	0589      	lsls	r1, r1, #22
    bcb4:	60c4      	str	r4, [r0, #12]
    bcb6:	6081      	str	r1, [r0, #8]
    bcb8:	f7ff fc6e 	bl	b598 <MPSL_IRQ_TIMER0_Handler+0x100>
    bcbc:	2501      	movs	r5, #1
    bcbe:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bcc2:	02eb      	lsls	r3, r5, #11
    bcc4:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bcc8:	f3bf 8f4f 	dsb	sy
    bccc:	f3bf 8f6f 	isb	sy
    bcd0:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bcd4:	4814      	ldr	r0, [pc, #80]	; (bd28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bcd6:	6045      	str	r5, [r0, #4]
    bcd8:	6085      	str	r5, [r0, #8]
    bcda:	4914      	ldr	r1, [pc, #80]	; (bd2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bcdc:	680a      	ldr	r2, [r1, #0]
    bcde:	2a00      	cmp	r2, #0
    bce0:	d1fc      	bne.n	bcdc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bce2:	1e51      	subs	r1, r2, #1
    bce4:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bce8:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bcec:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bcf0:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bcf4:	490e      	ldr	r1, [pc, #56]	; (bd30 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bcf6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bcfa:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bcfe:	1d09      	adds	r1, r1, #4
    bd00:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bd04:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bd08:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bd0c:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bd10:	6005      	str	r5, [r0, #0]
    bd12:	f44f 7182 	mov.w	r1, #260	; 0x104
    bd16:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bd1a:	2102      	movs	r1, #2
    bd1c:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bd20:	bd70      	pop	{r4, r5, r6, pc}
    bd22:	0000      	.short	0x0000
    bd24:	200002fa 	.word	0x200002fa
    bd28:	4000b000 	.word	0x4000b000
    bd2c:	4000b504 	.word	0x4000b504
    bd30:	4000b004 	.word	0x4000b004

0000bd34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bd34:	4808      	ldr	r0, [pc, #32]	; (bd58 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bd36:	f990 0000 	ldrsb.w	r0, [r0]
    bd3a:	2800      	cmp	r0, #0
    bd3c:	bfb8      	it	lt
    bd3e:	4770      	bxlt	lr
    bd40:	f000 011f 	and.w	r1, r0, #31
    bd44:	2201      	movs	r2, #1
    bd46:	fa02 f101 	lsl.w	r1, r2, r1
    bd4a:	0940      	lsrs	r0, r0, #5
    bd4c:	0080      	lsls	r0, r0, #2
    bd4e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd52:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bd56:	4770      	bx	lr
    bd58:	20000380 	.word	0x20000380

0000bd5c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bd5c:	4803      	ldr	r0, [pc, #12]	; (bd6c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bd5e:	7800      	ldrb	r0, [r0, #0]
    bd60:	2803      	cmp	r0, #3
    bd62:	bf0c      	ite	eq
    bd64:	2001      	moveq	r0, #1
    bd66:	2000      	movne	r0, #0
    bd68:	4770      	bx	lr
    bd6a:	0000      	.short	0x0000
    bd6c:	20000358 	.word	0x20000358

0000bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bd70:	4801      	ldr	r0, [pc, #4]	; (bd78 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bd72:	8840      	ldrh	r0, [r0, #2]
    bd74:	4770      	bx	lr
    bd76:	0000      	.short	0x0000
    bd78:	20000358 	.word	0x20000358

0000bd7c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bd7c:	4803      	ldr	r0, [pc, #12]	; (bd8c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bd7e:	7800      	ldrb	r0, [r0, #0]
    bd80:	2802      	cmp	r0, #2
    bd82:	bf16      	itet	ne
    bd84:	2803      	cmpne	r0, #3
    bd86:	2001      	moveq	r0, #1
    bd88:	2000      	movne	r0, #0
    bd8a:	4770      	bx	lr
    bd8c:	20000358 	.word	0x20000358

0000bd90 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bd90:	4802      	ldr	r0, [pc, #8]	; (bd9c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bd92:	2100      	movs	r1, #0
    bd94:	7001      	strb	r1, [r0, #0]
    bd96:	8041      	strh	r1, [r0, #2]
    bd98:	4770      	bx	lr
    bd9a:	0000      	.short	0x0000
    bd9c:	20000358 	.word	0x20000358

0000bda0 <MPSL_IRQ_CLOCK_Handler>:
    bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bda4:	4c16      	ldr	r4, [pc, #88]	; (be00 <MPSL_IRQ_CLOCK_Handler+0x60>)
    bda6:	7a60      	ldrb	r0, [r4, #9]
    bda8:	2800      	cmp	r0, #0
    bdaa:	d027      	beq.n	bdfc <MPSL_IRQ_CLOCK_Handler+0x5c>
    bdac:	f44f 7180 	mov.w	r1, #256	; 0x100
    bdb0:	058d      	lsls	r5, r1, #22
    bdb2:	4628      	mov	r0, r5
    bdb4:	f004 fea6 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdb8:	4680      	mov	r8, r0
    bdba:	f44f 7182 	mov.w	r1, #260	; 0x104
    bdbe:	4628      	mov	r0, r5
    bdc0:	f004 fea0 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdc4:	2600      	movs	r6, #0
    bdc6:	4607      	mov	r7, r0
    bdc8:	f1b8 0f00 	cmp.w	r8, #0
    bdcc:	d009      	beq.n	bde2 <MPSL_IRQ_CLOCK_Handler+0x42>
    bdce:	2001      	movs	r0, #1
    bdd0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bdd4:	7920      	ldrb	r0, [r4, #4]
    bdd6:	b120      	cbz	r0, bde2 <MPSL_IRQ_CLOCK_Handler+0x42>
    bdd8:	7126      	strb	r6, [r4, #4]
    bdda:	69e0      	ldr	r0, [r4, #28]
    bddc:	b108      	cbz	r0, bde2 <MPSL_IRQ_CLOCK_Handler+0x42>
    bdde:	4780      	blx	r0
    bde0:	61e6      	str	r6, [r4, #28]
    bde2:	b137      	cbz	r7, bdf2 <MPSL_IRQ_CLOCK_Handler+0x52>
    bde4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bde8:	2002      	movs	r0, #2
    bdea:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bdee:	f000 fa75 	bl	c2dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bdf2:	4640      	mov	r0, r8
    bdf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bdf8:	f000 b858 	b.w	beac <MPSL_IRQ_CLOCK_Handler+0x10c>
    bdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be00:	20000308 	.word	0x20000308
    be04:	b510      	push	{r4, lr}
    be06:	f004 ff27 	bl	10c58 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    be0a:	b930      	cbnz	r0, be1a <MPSL_IRQ_CLOCK_Handler+0x7a>
    be0c:	f004 ff45 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be10:	b918      	cbnz	r0, be1a <MPSL_IRQ_CLOCK_Handler+0x7a>
    be12:	f004 ff78 	bl	10d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    be16:	2800      	cmp	r0, #0
    be18:	d002      	beq.n	be20 <MPSL_IRQ_CLOCK_Handler+0x80>
    be1a:	4902      	ldr	r1, [pc, #8]	; (be24 <MPSL_IRQ_CLOCK_Handler+0x84>)
    be1c:	2002      	movs	r0, #2
    be1e:	6008      	str	r0, [r1, #0]
    be20:	bd10      	pop	{r4, pc}
    be22:	0000      	.short	0x0000
    be24:	40000c34 	.word	0x40000c34
    be28:	b570      	push	{r4, r5, r6, lr}
    be2a:	f000 f99b 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    be2e:	f000 fabd 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    be32:	4c09      	ldr	r4, [pc, #36]	; (be58 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    be34:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be38:	b130      	cbz	r0, be48 <MPSL_IRQ_CLOCK_Handler+0xa8>
    be3a:	f7ff ffe3 	bl	be04 <MPSL_IRQ_CLOCK_Handler+0x64>
    be3e:	2001      	movs	r0, #1
    be40:	6128      	str	r0, [r5, #16]
    be42:	2004      	movs	r0, #4
    be44:	72a0      	strb	r0, [r4, #10]
    be46:	e004      	b.n	be52 <MPSL_IRQ_CLOCK_Handler+0xb2>
    be48:	2003      	movs	r0, #3
    be4a:	72a0      	strb	r0, [r4, #10]
    be4c:	2001      	movs	r0, #1
    be4e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    be52:	2000      	movs	r0, #0
    be54:	71e0      	strb	r0, [r4, #7]
    be56:	bd70      	pop	{r4, r5, r6, pc}
    be58:	20000308 	.word	0x20000308
    be5c:	b570      	push	{r4, r5, r6, lr}
    be5e:	4c12      	ldr	r4, [pc, #72]	; (bea8 <MPSL_IRQ_CLOCK_Handler+0x108>)
    be60:	79a0      	ldrb	r0, [r4, #6]
    be62:	b1e0      	cbz	r0, be9e <MPSL_IRQ_CLOCK_Handler+0xfe>
    be64:	79e1      	ldrb	r1, [r4, #7]
    be66:	1e40      	subs	r0, r0, #1
    be68:	4281      	cmp	r1, r0
    be6a:	da18      	bge.n	be9e <MPSL_IRQ_CLOCK_Handler+0xfe>
    be6c:	f000 fa9e 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    be70:	4605      	mov	r5, r0
    be72:	f000 fb87 	bl	c584 <mpsl_temperature_get>
    be76:	79a1      	ldrb	r1, [r4, #6]
    be78:	2901      	cmp	r1, #1
    be7a:	d902      	bls.n	be82 <MPSL_IRQ_CLOCK_Handler+0xe2>
    be7c:	79e1      	ldrb	r1, [r4, #7]
    be7e:	1c49      	adds	r1, r1, #1
    be80:	71e1      	strb	r1, [r4, #7]
    be82:	b10d      	cbz	r5, be88 <MPSL_IRQ_CLOCK_Handler+0xe8>
    be84:	6961      	ldr	r1, [r4, #20]
    be86:	e000      	b.n	be8a <MPSL_IRQ_CLOCK_Handler+0xea>
    be88:	6921      	ldr	r1, [r4, #16]
    be8a:	1a41      	subs	r1, r0, r1
    be8c:	2902      	cmp	r1, #2
    be8e:	da02      	bge.n	be96 <MPSL_IRQ_CLOCK_Handler+0xf6>
    be90:	f111 0f02 	cmn.w	r1, #2
    be94:	dc07      	bgt.n	bea6 <MPSL_IRQ_CLOCK_Handler+0x106>
    be96:	b10d      	cbz	r5, be9c <MPSL_IRQ_CLOCK_Handler+0xfc>
    be98:	6160      	str	r0, [r4, #20]
    be9a:	e000      	b.n	be9e <MPSL_IRQ_CLOCK_Handler+0xfe>
    be9c:	6120      	str	r0, [r4, #16]
    be9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bea2:	f7ff bfc1 	b.w	be28 <MPSL_IRQ_CLOCK_Handler+0x88>
    bea6:	bd70      	pop	{r4, r5, r6, pc}
    bea8:	20000308 	.word	0x20000308
    beac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    beb0:	4606      	mov	r6, r0
    beb2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    beb6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    beba:	4628      	mov	r0, r5
    bebc:	f004 fe22 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bec0:	4680      	mov	r8, r0
    bec2:	f44f 7188 	mov.w	r1, #272	; 0x110
    bec6:	4628      	mov	r0, r5
    bec8:	f004 fe1c 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    becc:	4c27      	ldr	r4, [pc, #156]	; (bf6c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bece:	4682      	mov	sl, r0
    bed0:	7827      	ldrb	r7, [r4, #0]
    bed2:	f104 0008 	add.w	r0, r4, #8
    bed6:	f004 fe89 	bl	10bec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    beda:	b110      	cbz	r0, bee2 <MPSL_IRQ_CLOCK_Handler+0x142>
    bedc:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bee0:	e016      	b.n	bf10 <MPSL_IRQ_CLOCK_Handler+0x170>
    bee2:	f04f 0901 	mov.w	r9, #1
    bee6:	b146      	cbz	r6, befa <MPSL_IRQ_CLOCK_Handler+0x15a>
    bee8:	7aa0      	ldrb	r0, [r4, #10]
    beea:	2803      	cmp	r0, #3
    beec:	d105      	bne.n	befa <MPSL_IRQ_CLOCK_Handler+0x15a>
    beee:	2004      	movs	r0, #4
    bef0:	72a0      	strb	r0, [r4, #10]
    bef2:	f7ff ff87 	bl	be04 <MPSL_IRQ_CLOCK_Handler+0x64>
    bef6:	f8c5 9010 	str.w	r9, [r5, #16]
    befa:	2600      	movs	r6, #0
    befc:	f1b8 0f00 	cmp.w	r8, #0
    bf00:	d018      	beq.n	bf34 <MPSL_IRQ_CLOCK_Handler+0x194>
    bf02:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bf06:	7aa0      	ldrb	r0, [r4, #10]
    bf08:	2804      	cmp	r0, #4
    bf0a:	d004      	beq.n	bf16 <MPSL_IRQ_CLOCK_Handler+0x176>
    bf0c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    bf10:	206d      	movs	r0, #109	; 0x6d
    bf12:	f000 fac3 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf16:	f004 fe9f 	bl	10c58 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bf1a:	b928      	cbnz	r0, bf28 <MPSL_IRQ_CLOCK_Handler+0x188>
    bf1c:	f004 febd 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf20:	b910      	cbnz	r0, bf28 <MPSL_IRQ_CLOCK_Handler+0x188>
    bf22:	f004 fef0 	bl	10d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bf26:	b108      	cbz	r0, bf2c <MPSL_IRQ_CLOCK_Handler+0x18c>
    bf28:	4811      	ldr	r0, [pc, #68]	; (bf70 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    bf2a:	6006      	str	r6, [r0, #0]
    bf2c:	2002      	movs	r0, #2
    bf2e:	72a0      	strb	r0, [r4, #10]
    bf30:	f000 f8fc 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bf34:	f1ba 0f00 	cmp.w	sl, #0
    bf38:	d008      	beq.n	bf4c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    bf3a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bf3e:	7aa0      	ldrb	r0, [r4, #10]
    bf40:	2802      	cmp	r0, #2
    bf42:	d101      	bne.n	bf48 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    bf44:	f7ff ff8a 	bl	be5c <MPSL_IRQ_CLOCK_Handler+0xbc>
    bf48:	f8c5 9014 	str.w	r9, [r5, #20]
    bf4c:	b13f      	cbz	r7, bf5e <MPSL_IRQ_CLOCK_Handler+0x1be>
    bf4e:	7026      	strb	r6, [r4, #0]
    bf50:	7aa0      	ldrb	r0, [r4, #10]
    bf52:	2802      	cmp	r0, #2
    bf54:	d101      	bne.n	bf5a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    bf56:	f7ff ff67 	bl	be28 <MPSL_IRQ_CLOCK_Handler+0x88>
    bf5a:	f000 f8e7 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bf5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf62:	4802      	ldr	r0, [pc, #8]	; (bf6c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bf64:	3008      	adds	r0, #8
    bf66:	f004 be58 	b.w	10c1a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bf6a:	0000      	.short	0x0000
    bf6c:	20000308 	.word	0x20000308
    bf70:	40000c34 	.word	0x40000c34
    bf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf78:	4c49      	ldr	r4, [pc, #292]	; (c0a0 <MPSL_IRQ_CLOCK_Handler+0x300>)
    bf7a:	2700      	movs	r7, #0
    bf7c:	4606      	mov	r6, r0
    bf7e:	61a7      	str	r7, [r4, #24]
    bf80:	7842      	ldrb	r2, [r0, #1]
    bf82:	7881      	ldrb	r1, [r0, #2]
    bf84:	7800      	ldrb	r0, [r0, #0]
    bf86:	72e0      	strb	r0, [r4, #11]
    bf88:	7162      	strb	r2, [r4, #5]
    bf8a:	71a1      	strb	r1, [r4, #6]
    bf8c:	71e7      	strb	r7, [r4, #7]
    bf8e:	f04f 0801 	mov.w	r8, #1
    bf92:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bf96:	2805      	cmp	r0, #5
    bf98:	d225      	bcs.n	bfe6 <MPSL_IRQ_CLOCK_Handler+0x246>
    bf9a:	e8df f000 	tbb	[pc, r0]
    bf9e:	0310      	.short	0x0310
    bfa0:	00222006 	.word	0x00222006
    bfa4:	f8c4 8018 	str.w	r8, [r4, #24]
    bfa8:	e009      	b.n	bfbe <MPSL_IRQ_CLOCK_Handler+0x21e>
    bfaa:	f000 f8db 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bfae:	2101      	movs	r1, #1
    bfb0:	4628      	mov	r0, r5
    bfb2:	f004 fdac 	bl	10b0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bfb6:	2800      	cmp	r0, #0
    bfb8:	d0f9      	beq.n	bfae <MPSL_IRQ_CLOCK_Handler+0x20e>
    bfba:	2002      	movs	r0, #2
    bfbc:	61a0      	str	r0, [r4, #24]
    bfbe:	f004 fdd2 	bl	10b66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    bfc2:	b1c0      	cbz	r0, bff6 <MPSL_IRQ_CLOCK_Handler+0x256>
    bfc4:	f000 fa0c 	bl	c3e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bfc8:	7e21      	ldrb	r1, [r4, #24]
    bfca:	f001 0103 	and.w	r1, r1, #3
    bfce:	4288      	cmp	r0, r1
    bfd0:	d111      	bne.n	bff6 <MPSL_IRQ_CLOCK_Handler+0x256>
    bfd2:	79b0      	ldrb	r0, [r6, #6]
    bfd4:	b160      	cbz	r0, bff0 <MPSL_IRQ_CLOCK_Handler+0x250>
    bfd6:	2002      	movs	r0, #2
    bfd8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bfdc:	e044      	b.n	c068 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bfde:	4831      	ldr	r0, [pc, #196]	; (c0a4 <MPSL_IRQ_CLOCK_Handler+0x304>)
    bfe0:	e7ec      	b.n	bfbc <MPSL_IRQ_CLOCK_Handler+0x21c>
    bfe2:	4831      	ldr	r0, [pc, #196]	; (c0a8 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bfe4:	e7ea      	b.n	bfbc <MPSL_IRQ_CLOCK_Handler+0x21c>
    bfe6:	f240 313d 	movw	r1, #829	; 0x33d
    bfea:	206d      	movs	r0, #109	; 0x6d
    bfec:	f000 fa56 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bff0:	f000 f9ca 	bl	c388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bff4:	e038      	b.n	c068 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bff6:	f8c5 800c 	str.w	r8, [r5, #12]
    bffa:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bffe:	69a0      	ldr	r0, [r4, #24]
    c000:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c004:	f004 fe14 	bl	10c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c008:	b940      	cbnz	r0, c01c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c00a:	f004 fe1b 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c00e:	b928      	cbnz	r0, c01c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c010:	f004 fe2f 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c014:	b910      	cbnz	r0, c01c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c016:	f004 fe40 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c01a:	b138      	cbz	r0, c02c <MPSL_IRQ_CLOCK_Handler+0x28c>
    c01c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c020:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c024:	4921      	ldr	r1, [pc, #132]	; (c0ac <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c026:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c02a:	6008      	str	r0, [r1, #0]
    c02c:	f004 fe00 	bl	10c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c030:	b940      	cbnz	r0, c044 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c032:	f004 fe07 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c036:	b928      	cbnz	r0, c044 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c038:	f004 fe1b 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c03c:	b910      	cbnz	r0, c044 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c03e:	f004 fe2c 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c042:	b118      	cbz	r0, c04c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c044:	4919      	ldr	r1, [pc, #100]	; (c0ac <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c046:	3110      	adds	r1, #16
    c048:	f8c1 8000 	str.w	r8, [r1]
    c04c:	f8c5 8008 	str.w	r8, [r5, #8]
    c050:	2002      	movs	r0, #2
    c052:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c056:	79b0      	ldrb	r0, [r6, #6]
    c058:	b930      	cbnz	r0, c068 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c05a:	f000 f829 	bl	c0b0 <MPSL_IRQ_CLOCK_Handler+0x310>
    c05e:	2002      	movs	r0, #2
    c060:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c064:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c068:	79a0      	ldrb	r0, [r4, #6]
    c06a:	b170      	cbz	r0, c08a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c06c:	7830      	ldrb	r0, [r6, #0]
    c06e:	b960      	cbnz	r0, c08a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c070:	f000 f99c 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c074:	4606      	mov	r6, r0
    c076:	f000 fa85 	bl	c584 <mpsl_temperature_get>
    c07a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c07e:	b116      	cbz	r6, c086 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c080:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c084:	e001      	b.n	c08a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c086:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c08a:	2101      	movs	r1, #1
    c08c:	4628      	mov	r0, r5
    c08e:	f004 fd3e 	bl	10b0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c092:	b108      	cbz	r0, c098 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c094:	f000 f984 	bl	c3a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c098:	72a7      	strb	r7, [r4, #10]
    c09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c09e:	0000      	.short	0x0000
    c0a0:	20000308 	.word	0x20000308
    c0a4:	00020001 	.word	0x00020001
    c0a8:	00030001 	.word	0x00030001
    c0ac:	4000053c 	.word	0x4000053c
    c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0b4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c0b8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c0bc:	f010 0f02 	tst.w	r0, #2
    c0c0:	d011      	beq.n	c0e6 <MPSL_IRQ_CLOCK_Handler+0x346>
    c0c2:	4c16      	ldr	r4, [pc, #88]	; (c11c <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c0c4:	6820      	ldr	r0, [r4, #0]
    c0c6:	43c0      	mvns	r0, r0
    c0c8:	f340 1600 	sbfx	r6, r0, #4, #1
    c0cc:	6820      	ldr	r0, [r4, #0]
    c0ce:	f040 0010 	orr.w	r0, r0, #16
    c0d2:	6020      	str	r0, [r4, #0]
    c0d4:	f44f 7782 	mov.w	r7, #260	; 0x104
    c0d8:	4639      	mov	r1, r7
    c0da:	4628      	mov	r0, r5
    c0dc:	1c76      	adds	r6, r6, #1
    c0de:	f004 fd11 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c0e2:	b128      	cbz	r0, c0f0 <MPSL_IRQ_CLOCK_Handler+0x350>
    c0e4:	e00a      	b.n	c0fc <MPSL_IRQ_CLOCK_Handler+0x35c>
    c0e6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c0ea:	206d      	movs	r0, #109	; 0x6d
    c0ec:	f000 f9d6 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0f0:	f004 fe15 	bl	10d1e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c0f4:	e002      	b.n	c0fc <MPSL_IRQ_CLOCK_Handler+0x35c>
    c0f6:	bf00      	nop
    c0f8:	f004 fe0f 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c0fc:	4639      	mov	r1, r7
    c0fe:	4628      	mov	r0, r5
    c100:	f004 fd00 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c104:	2800      	cmp	r0, #0
    c106:	d0f7      	beq.n	c0f8 <MPSL_IRQ_CLOCK_Handler+0x358>
    c108:	f000 f93e 	bl	c388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c10c:	2e00      	cmp	r6, #0
    c10e:	d103      	bne.n	c118 <MPSL_IRQ_CLOCK_Handler+0x378>
    c110:	6820      	ldr	r0, [r4, #0]
    c112:	f020 0010 	bic.w	r0, r0, #16
    c116:	6020      	str	r0, [r4, #0]
    c118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c11c:	e000ed10 	.word	0xe000ed10

0000c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c120:	4801      	ldr	r0, [pc, #4]	; (c128 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c122:	89c0      	ldrh	r0, [r0, #14]
    c124:	4770      	bx	lr
    c126:	0000      	.short	0x0000
    c128:	20000308 	.word	0x20000308

0000c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c12c:	b510      	push	{r4, lr}
    c12e:	f3ef 8410 	mrs	r4, PRIMASK
    c132:	b672      	cpsid	i
    c134:	480a      	ldr	r0, [pc, #40]	; (c160 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c136:	7841      	ldrb	r1, [r0, #1]
    c138:	b129      	cbz	r1, c146 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c13a:	7841      	ldrb	r1, [r0, #1]
    c13c:	1e49      	subs	r1, r1, #1
    c13e:	7041      	strb	r1, [r0, #1]
    c140:	7841      	ldrb	r1, [r0, #1]
    c142:	b129      	cbz	r1, c150 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c144:	e008      	b.n	c158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c146:	f240 1119 	movw	r1, #281	; 0x119
    c14a:	206d      	movs	r0, #109	; 0x6d
    c14c:	f000 f9a6 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c150:	7880      	ldrb	r0, [r0, #2]
    c152:	b908      	cbnz	r0, c158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c154:	f000 f938 	bl	c3c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c158:	2c00      	cmp	r4, #0
    c15a:	d100      	bne.n	c15e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c15c:	b662      	cpsie	i
    c15e:	bd10      	pop	{r4, pc}
    c160:	20000308 	.word	0x20000308

0000c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c164:	b510      	push	{r4, lr}
    c166:	f3ef 8410 	mrs	r4, PRIMASK
    c16a:	b672      	cpsid	i
    c16c:	4806      	ldr	r0, [pc, #24]	; (c188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c16e:	7841      	ldrb	r1, [r0, #1]
    c170:	1c49      	adds	r1, r1, #1
    c172:	7041      	strb	r1, [r0, #1]
    c174:	7840      	ldrb	r0, [r0, #1]
    c176:	2801      	cmp	r0, #1
    c178:	d101      	bne.n	c17e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c17a:	f004 fcdf 	bl	10b3c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c17e:	2c00      	cmp	r4, #0
    c180:	d100      	bne.n	c184 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c182:	b662      	cpsie	i
    c184:	bd10      	pop	{r4, pc}
    c186:	0000      	.short	0x0000
    c188:	20000308 	.word	0x20000308

0000c18c <mpsl_clock_hfclk_release>:
    c18c:	4805      	ldr	r0, [pc, #20]	; (c1a4 <mpsl_clock_hfclk_release+0x18>)
    c18e:	b510      	push	{r4, lr}
    c190:	78c1      	ldrb	r1, [r0, #3]
    c192:	b121      	cbz	r1, c19e <mpsl_clock_hfclk_release+0x12>
    c194:	2100      	movs	r1, #0
    c196:	7101      	strb	r1, [r0, #4]
    c198:	70c1      	strb	r1, [r0, #3]
    c19a:	f7ff ffc7 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c19e:	2000      	movs	r0, #0
    c1a0:	bd10      	pop	{r4, pc}
    c1a2:	0000      	.short	0x0000
    c1a4:	20000308 	.word	0x20000308

0000c1a8 <mpsl_clock_hfclk_request>:
    c1a8:	b570      	push	{r4, r5, r6, lr}
    c1aa:	4c0c      	ldr	r4, [pc, #48]	; (c1dc <mpsl_clock_hfclk_request+0x34>)
    c1ac:	78e1      	ldrb	r1, [r4, #3]
    c1ae:	b961      	cbnz	r1, c1ca <mpsl_clock_hfclk_request+0x22>
    c1b0:	2501      	movs	r5, #1
    c1b2:	70e5      	strb	r5, [r4, #3]
    c1b4:	61e0      	str	r0, [r4, #28]
    c1b6:	f7ff ffd5 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c1ba:	f000 f8f7 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c1be:	b130      	cbz	r0, c1ce <mpsl_clock_hfclk_request+0x26>
    c1c0:	69e0      	ldr	r0, [r4, #28]
    c1c2:	b110      	cbz	r0, c1ca <mpsl_clock_hfclk_request+0x22>
    c1c4:	4780      	blx	r0
    c1c6:	2000      	movs	r0, #0
    c1c8:	61e0      	str	r0, [r4, #28]
    c1ca:	2000      	movs	r0, #0
    c1cc:	bd70      	pop	{r4, r5, r6, pc}
    c1ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c1d2:	7125      	strb	r5, [r4, #4]
    c1d4:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c1d8:	e7f7      	b.n	c1ca <mpsl_clock_hfclk_request+0x22>
    c1da:	0000      	.short	0x0000
    c1dc:	20000308 	.word	0x20000308

0000c1e0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1e4:	0005      	movs	r5, r0
    c1e6:	f06f 0015 	mvn.w	r0, #21
    c1ea:	d03f      	beq.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1ec:	7829      	ldrb	r1, [r5, #0]
    c1ee:	2904      	cmp	r1, #4
    c1f0:	d83c      	bhi.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1f2:	2900      	cmp	r1, #0
    c1f4:	7869      	ldrb	r1, [r5, #1]
    c1f6:	d03b      	beq.n	c270 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c1f8:	2900      	cmp	r1, #0
    c1fa:	d137      	bne.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1fc:	78a9      	ldrb	r1, [r5, #2]
    c1fe:	2900      	cmp	r1, #0
    c200:	d134      	bne.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c202:	2000      	movs	r0, #0
    c204:	f004 fc6d 	bl	10ae2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c208:	2000      	movs	r0, #0
    c20a:	f004 fc5d 	bl	10ac8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c20e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c212:	f04f 31ff 	mov.w	r1, #4294967295
    c216:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c21a:	2600      	movs	r6, #0
    c21c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c220:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c224:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c228:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c22c:	4c14      	ldr	r4, [pc, #80]	; (c280 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c22e:	7066      	strb	r6, [r4, #1]
    c230:	88a8      	ldrh	r0, [r5, #4]
    c232:	81a0      	strh	r0, [r4, #12]
    c234:	f004 fc79 	bl	10b2a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c238:	2701      	movs	r7, #1
    c23a:	b108      	cbz	r0, c240 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c23c:	70e7      	strb	r7, [r4, #3]
    c23e:	7067      	strb	r7, [r4, #1]
    c240:	2101      	movs	r1, #1
    c242:	4640      	mov	r0, r8
    c244:	f004 fc63 	bl	10b0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c248:	b108      	cbz	r0, c24e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c24a:	f000 f8a9 	bl	c3a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c24e:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c252:	81e0      	strh	r0, [r4, #14]
    c254:	4628      	mov	r0, r5
    c256:	f7ff fe8d 	bl	bf74 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c25a:	7267      	strb	r7, [r4, #9]
    c25c:	2000      	movs	r0, #0
    c25e:	f004 fc33 	bl	10ac8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c262:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c266:	4630      	mov	r0, r6
    c268:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c270:	2900      	cmp	r1, #0
    c272:	d0fb      	beq.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c274:	2920      	cmp	r1, #32
    c276:	d8f9      	bhi.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c278:	78a9      	ldrb	r1, [r5, #2]
    c27a:	2921      	cmp	r1, #33	; 0x21
    c27c:	d9c1      	bls.n	c202 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c27e:	e7f5      	b.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c280:	20000308 	.word	0x20000308

0000c284 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c284:	4801      	ldr	r0, [pc, #4]	; (c28c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c286:	8980      	ldrh	r0, [r0, #12]
    c288:	4770      	bx	lr
    c28a:	0000      	.short	0x0000
    c28c:	20000308 	.word	0x20000308

0000c290 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    c290:	b510      	push	{r4, lr}
    c292:	480d      	ldr	r0, [pc, #52]	; (c2c8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c294:	f004 fcaa 	bl	10bec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c298:	490b      	ldr	r1, [pc, #44]	; (c2c8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c29a:	3908      	subs	r1, #8
    c29c:	b148      	cbz	r0, c2b2 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    c29e:	2001      	movs	r0, #1
    c2a0:	7008      	strb	r0, [r1, #0]
    c2a2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c2a6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2ae:	f7ff bf59 	b.w	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c2b2:	7a88      	ldrb	r0, [r1, #10]
    c2b4:	2802      	cmp	r0, #2
    c2b6:	d101      	bne.n	c2bc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    c2b8:	f7ff fdb6 	bl	be28 <MPSL_IRQ_CLOCK_Handler+0x88>
    c2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2c0:	4801      	ldr	r0, [pc, #4]	; (c2c8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c2c2:	f004 bcaa 	b.w	10c1a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c2c6:	0000      	.short	0x0000
    c2c8:	20000310 	.word	0x20000310

0000c2cc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c2cc:	4802      	ldr	r0, [pc, #8]	; (c2d8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c2ce:	7a80      	ldrb	r0, [r0, #10]
    c2d0:	2800      	cmp	r0, #0
    c2d2:	d000      	beq.n	c2d6 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c2d4:	2001      	movs	r0, #1
    c2d6:	4770      	bx	lr
    c2d8:	20000308 	.word	0x20000308

0000c2dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2de:	4d1f      	ldr	r5, [pc, #124]	; (c35c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c2e0:	7ae8      	ldrb	r0, [r5, #11]
    c2e2:	2800      	cmp	r0, #0
    c2e4:	d10f      	bne.n	c306 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2e6:	7e28      	ldrb	r0, [r5, #24]
    c2e8:	f000 0003 	and.w	r0, r0, #3
    c2ec:	f004 fc2b 	bl	10b46 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c2f0:	2800      	cmp	r0, #0
    c2f2:	d008      	beq.n	c306 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2f4:	f3ef 8110 	mrs	r1, PRIMASK
    c2f8:	b672      	cpsid	i
    c2fa:	f7ff ffe7 	bl	c2cc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c2fe:	b118      	cbz	r0, c308 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c300:	2900      	cmp	r1, #0
    c302:	d100      	bne.n	c306 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c304:	b662      	cpsie	i
    c306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c308:	2601      	movs	r6, #1
    c30a:	72ae      	strb	r6, [r5, #10]
    c30c:	b901      	cbnz	r1, c310 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c30e:	b662      	cpsie	i
    c310:	2018      	movs	r0, #24
    c312:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c316:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c31a:	61a6      	str	r6, [r4, #24]
    c31c:	f44f 7020 	mov.w	r0, #640	; 0x280
    c320:	f8ad 0000 	strh.w	r0, [sp]
    c324:	f8bd 0000 	ldrh.w	r0, [sp]
    c328:	1e41      	subs	r1, r0, #1
    c32a:	f8ad 1000 	strh.w	r1, [sp]
    c32e:	d2f9      	bcs.n	c324 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c330:	2700      	movs	r7, #0
    c332:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c336:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c33a:	4808      	ldr	r0, [pc, #32]	; (c35c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c33c:	3008      	adds	r0, #8
    c33e:	f004 fc68 	bl	10c12 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c342:	702f      	strb	r7, [r5, #0]
    c344:	f7ff fd70 	bl	be28 <MPSL_IRQ_CLOCK_Handler+0x88>
    c348:	6166      	str	r6, [r4, #20]
    c34a:	7968      	ldrb	r0, [r5, #5]
    c34c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c350:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c354:	2018      	movs	r0, #24
    c356:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c35c:	20000308 	.word	0x20000308

0000c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c360:	4602      	mov	r2, r0
    c362:	b510      	push	{r4, lr}
    c364:	2000      	movs	r0, #0
    c366:	2900      	cmp	r1, #0
    c368:	d00a      	beq.n	c380 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c36a:	2a00      	cmp	r2, #0
    c36c:	d008      	beq.n	c380 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c36e:	fba2 0101 	umull	r0, r1, r2, r1
    c372:	1e40      	subs	r0, r0, #1
    c374:	4a03      	ldr	r2, [pc, #12]	; (c384 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c376:	f141 31ff 	adc.w	r1, r1, #4294967295
    c37a:	f004 fcd2 	bl	10d22 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c37e:	1c40      	adds	r0, r0, #1
    c380:	bd10      	pop	{r4, pc}
    c382:	0000      	.short	0x0000
    c384:	000f4240 	.word	0x000f4240

0000c388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c388:	b510      	push	{r4, lr}
    c38a:	4c04      	ldr	r4, [pc, #16]	; (c39c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c38c:	7e20      	ldrb	r0, [r4, #24]
    c38e:	f000 0003 	and.w	r0, r0, #3
    c392:	f004 fbd8 	bl	10b46 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c396:	2800      	cmp	r0, #0
    c398:	d0f8      	beq.n	c38c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c39a:	bd10      	pop	{r4, pc}
    c39c:	20000308 	.word	0x20000308

0000c3a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c3a0:	4901      	ldr	r1, [pc, #4]	; (c3a8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c3a2:	2001      	movs	r0, #1
    c3a4:	7008      	strb	r0, [r1, #0]
    c3a6:	4770      	bx	lr
    c3a8:	20000381 	.word	0x20000381

0000c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c3ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3b0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c3b4:	b918      	cbnz	r0, c3be <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c3b6:	4803      	ldr	r0, [pc, #12]	; (c3c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c3b8:	7800      	ldrb	r0, [r0, #0]
    c3ba:	2800      	cmp	r0, #0
    c3bc:	d000      	beq.n	c3c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c3be:	2001      	movs	r0, #1
    c3c0:	4770      	bx	lr
    c3c2:	0000      	.short	0x0000
    c3c4:	20000381 	.word	0x20000381

0000c3c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c3c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3cc:	2101      	movs	r1, #1
    c3ce:	6041      	str	r1, [r0, #4]
    c3d0:	2100      	movs	r1, #0
    c3d2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c3d6:	4801      	ldr	r0, [pc, #4]	; (c3dc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c3d8:	7001      	strb	r1, [r0, #0]
    c3da:	4770      	bx	lr
    c3dc:	20000381 	.word	0x20000381

0000c3e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c3e0:	4802      	ldr	r0, [pc, #8]	; (c3ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c3e2:	6800      	ldr	r0, [r0, #0]
    c3e4:	f000 0003 	and.w	r0, r0, #3
    c3e8:	4770      	bx	lr
    c3ea:	0000      	.short	0x0000
    c3ec:	4000041c 	.word	0x4000041c
    c3f0:	b510      	push	{r4, lr}
    c3f2:	b131      	cbz	r1, c402 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c3f4:	2901      	cmp	r1, #1
    c3f6:	d007      	beq.n	c408 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c3f8:	f240 3102 	movw	r1, #770	; 0x302
    c3fc:	a005      	add	r0, pc, #20	; (adr r0, c414 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c3fe:	f000 f821 	bl	c444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c402:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c406:	e001      	b.n	c40c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c408:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c40c:	f000 0001 	and.w	r0, r0, #1
    c410:	bd10      	pop	{r4, pc}
    c412:	0000      	.short	0x0000
    c414:	5f66726e 	.word	0x5f66726e
    c418:	636f6c63 	.word	0x636f6c63
    c41c:	00682e6b 	.word	0x00682e6b
    c420:	f3bf 8f4f 	dsb	sy
    c424:	4805      	ldr	r0, [pc, #20]	; (c43c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c426:	6801      	ldr	r1, [r0, #0]
    c428:	4a05      	ldr	r2, [pc, #20]	; (c440 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c42a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c42e:	4311      	orrs	r1, r2
    c430:	6001      	str	r1, [r0, #0]
    c432:	f3bf 8f4f 	dsb	sy
    c436:	bf00      	nop
    c438:	e7fd      	b.n	c436 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c43a:	0000      	.short	0x0000
    c43c:	e000ed0c 	.word	0xe000ed0c
    c440:	05fa0004 	.word	0x05fa0004

0000c444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c444:	b672      	cpsid	i
    c446:	4a03      	ldr	r2, [pc, #12]	; (c454 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c448:	6852      	ldr	r2, [r2, #4]
    c44a:	b102      	cbz	r2, c44e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c44c:	4790      	blx	r2
    c44e:	f7ff ffe7 	bl	c420 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c452:	0000      	.short	0x0000
    c454:	20000328 	.word	0x20000328
    c458:	4806      	ldr	r0, [pc, #24]	; (c474 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c45a:	b510      	push	{r4, lr}
    c45c:	2100      	movs	r1, #0
    c45e:	6001      	str	r1, [r0, #0]
    c460:	2101      	movs	r1, #1
    c462:	6001      	str	r1, [r0, #0]
    c464:	4608      	mov	r0, r1
    c466:	f004 fb95 	bl	10b94 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c46e:	2001      	movs	r0, #1
    c470:	f004 bb83 	b.w	10b7a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c474:	40001ffc 	.word	0x40001ffc
    c478:	4807      	ldr	r0, [pc, #28]	; (c498 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c47a:	b510      	push	{r4, lr}
    c47c:	2101      	movs	r1, #1
    c47e:	6041      	str	r1, [r0, #4]
    c480:	1e89      	subs	r1, r1, #2
    c482:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c486:	200c      	movs	r0, #12
    c488:	f004 fb84 	bl	10b94 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c490:	200c      	movs	r0, #12
    c492:	f004 bb72 	b.w	10b7a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c496:	0000      	.short	0x0000
    c498:	4000c000 	.word	0x4000c000

0000c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c49c:	b50e      	push	{r1, r2, r3, lr}
    c49e:	b672      	cpsid	i
    c4a0:	4a0f      	ldr	r2, [pc, #60]	; (c4e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c4a2:	6855      	ldr	r5, [r2, #4]
    c4a4:	b1d5      	cbz	r5, c4dc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c4a6:	2200      	movs	r2, #0
    c4a8:	4603      	mov	r3, r0
    c4aa:	466e      	mov	r6, sp
    c4ac:	240a      	movs	r4, #10
    c4ae:	e003      	b.n	c4b8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c4b0:	fbb0 f0f4 	udiv	r0, r0, r4
    c4b4:	1c52      	adds	r2, r2, #1
    c4b6:	b2d2      	uxtb	r2, r2
    c4b8:	2800      	cmp	r0, #0
    c4ba:	d1f9      	bne.n	c4b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c4bc:	54b0      	strb	r0, [r6, r2]
    c4be:	e009      	b.n	c4d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c4c0:	fbb3 f0f4 	udiv	r0, r3, r4
    c4c4:	fb04 3010 	mls	r0, r4, r0, r3
    c4c8:	fbb3 f3f4 	udiv	r3, r3, r4
    c4cc:	1e52      	subs	r2, r2, #1
    c4ce:	b2d2      	uxtb	r2, r2
    c4d0:	3030      	adds	r0, #48	; 0x30
    c4d2:	54b0      	strb	r0, [r6, r2]
    c4d4:	2a00      	cmp	r2, #0
    c4d6:	d1f3      	bne.n	c4c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c4d8:	4630      	mov	r0, r6
    c4da:	47a8      	blx	r5
    c4dc:	f7ff ffa0 	bl	c420 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c4e0:	20000328 	.word	0x20000328

0000c4e4 <mpsl_init>:
    c4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4e8:	4c18      	ldr	r4, [pc, #96]	; (c54c <mpsl_init+0x68>)
    c4ea:	4606      	mov	r6, r0
    c4ec:	4617      	mov	r7, r2
    c4ee:	7860      	ldrb	r0, [r4, #1]
    c4f0:	460d      	mov	r5, r1
    c4f2:	b118      	cbz	r0, c4fc <mpsl_init+0x18>
    c4f4:	f04f 30ff 	mov.w	r0, #4294967295
    c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4fc:	f7fc fc06 	bl	8d0c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c500:	b906      	cbnz	r6, c504 <mpsl_init+0x20>
    c502:	4e13      	ldr	r6, [pc, #76]	; (c550 <mpsl_init+0x6c>)
    c504:	6067      	str	r7, [r4, #4]
    c506:	7025      	strb	r5, [r4, #0]
    c508:	f7ff ffa6 	bl	c458 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c50c:	f7ff ffb4 	bl	c478 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c510:	4630      	mov	r0, r6
    c512:	f7ff fe65 	bl	c1e0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c516:	0006      	movs	r6, r0
    c518:	d1ee      	bne.n	c4f8 <mpsl_init+0x14>
    c51a:	f7fe fe45 	bl	b1a8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c51e:	f7ff fedd 	bl	c2dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c522:	f004 faa0 	bl	10a66 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c526:	4628      	mov	r0, r5
    c528:	f004 fb27 	bl	10b7a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c52c:	2001      	movs	r0, #1
    c52e:	2d00      	cmp	r5, #0
    c530:	db09      	blt.n	c546 <mpsl_init+0x62>
    c532:	f005 011f 	and.w	r1, r5, #31
    c536:	fa00 f101 	lsl.w	r1, r0, r1
    c53a:	096a      	lsrs	r2, r5, #5
    c53c:	0092      	lsls	r2, r2, #2
    c53e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c542:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c546:	7060      	strb	r0, [r4, #1]
    c548:	4630      	mov	r0, r6
    c54a:	e7d5      	b.n	c4f8 <mpsl_init+0x14>
    c54c:	20000328 	.word	0x20000328
    c550:	00010bb6 	.word	0x00010bb6

0000c554 <mpsl_is_initialized>:
    c554:	4801      	ldr	r0, [pc, #4]	; (c55c <mpsl_is_initialized+0x8>)
    c556:	7840      	ldrb	r0, [r0, #1]
    c558:	4770      	bx	lr
    c55a:	0000      	.short	0x0000
    c55c:	20000328 	.word	0x20000328

0000c560 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c560:	4807      	ldr	r0, [pc, #28]	; (c580 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c562:	f990 0000 	ldrsb.w	r0, [r0]
    c566:	2800      	cmp	r0, #0
    c568:	db09      	blt.n	c57e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c56a:	f000 021f 	and.w	r2, r0, #31
    c56e:	2101      	movs	r1, #1
    c570:	4091      	lsls	r1, r2
    c572:	0940      	lsrs	r0, r0, #5
    c574:	0080      	lsls	r0, r0, #2
    c576:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c57a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c57e:	4770      	bx	lr
    c580:	20000328 	.word	0x20000328

0000c584 <mpsl_temperature_get>:
    c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c588:	2601      	movs	r6, #1
    c58a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c58e:	0331      	lsls	r1, r6, #12
    c590:	f04f 0800 	mov.w	r8, #0
    c594:	4640      	mov	r0, r8
    c596:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c59a:	f3bf 8f4f 	dsb	sy
    c59e:	f3bf 8f6f 	isb	sy
    c5a2:	4c16      	ldr	r4, [pc, #88]	; (c5fc <mpsl_temperature_get+0x78>)
    c5a4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c5a8:	200c      	movs	r0, #12
    c5aa:	f004 fb12 	bl	10bd2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c5ae:	4d14      	ldr	r5, [pc, #80]	; (c600 <mpsl_temperature_get+0x7c>)
    c5b0:	6828      	ldr	r0, [r5, #0]
    c5b2:	43c0      	mvns	r0, r0
    c5b4:	f340 1700 	sbfx	r7, r0, #4, #1
    c5b8:	6828      	ldr	r0, [r5, #0]
    c5ba:	f040 0010 	orr.w	r0, r0, #16
    c5be:	6028      	str	r0, [r5, #0]
    c5c0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c5c4:	6026      	str	r6, [r4, #0]
    c5c6:	1c7f      	adds	r7, r7, #1
    c5c8:	e002      	b.n	c5d0 <mpsl_temperature_get+0x4c>
    c5ca:	bf00      	nop
    c5cc:	f004 fba5 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c5d0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c5d4:	2800      	cmp	r0, #0
    c5d6:	d0f9      	beq.n	c5cc <mpsl_temperature_get+0x48>
    c5d8:	b91f      	cbnz	r7, c5e2 <mpsl_temperature_get+0x5e>
    c5da:	6828      	ldr	r0, [r5, #0]
    c5dc:	f020 0010 	bic.w	r0, r0, #16
    c5e0:	6028      	str	r0, [r5, #0]
    c5e2:	4808      	ldr	r0, [pc, #32]	; (c604 <mpsl_temperature_get+0x80>)
    c5e4:	6805      	ldr	r5, [r0, #0]
    c5e6:	6066      	str	r6, [r4, #4]
    c5e8:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c5ec:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c5f0:	200c      	movs	r0, #12
    c5f2:	f004 faee 	bl	10bd2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c5f6:	4628      	mov	r0, r5
    c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5fc:	4000c000 	.word	0x4000c000
    c600:	e000ed10 	.word	0xe000ed10
    c604:	4000c508 	.word	0x4000c508

0000c608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c608:	b510      	push	{r4, lr}
    c60a:	4602      	mov	r2, r0
    c60c:	2005      	movs	r0, #5
    c60e:	490c      	ldr	r1, [pc, #48]	; (c640 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c610:	e004      	b.n	c61c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c612:	bf00      	nop
    c614:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c618:	791b      	ldrb	r3, [r3, #4]
    c61a:	b133      	cbz	r3, c62a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c61c:	1e40      	subs	r0, r0, #1
    c61e:	b2c0      	uxtb	r0, r0
    c620:	d2f8      	bcs.n	c614 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c622:	2148      	movs	r1, #72	; 0x48
    c624:	2069      	movs	r0, #105	; 0x69
    c626:	f7ff ff39 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c62a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c62e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c632:	2200      	movs	r2, #0
    c634:	714a      	strb	r2, [r1, #5]
    c636:	718a      	strb	r2, [r1, #6]
    c638:	2201      	movs	r2, #1
    c63a:	710a      	strb	r2, [r1, #4]
    c63c:	bd10      	pop	{r4, pc}
    c63e:	0000      	.short	0x0000
    c640:	20001470 	.word	0x20001470

0000c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c644:	b510      	push	{r4, lr}
    c646:	2805      	cmp	r0, #5
    c648:	d301      	bcc.n	c64e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c64a:	2158      	movs	r1, #88	; 0x58
    c64c:	e006      	b.n	c65c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c64e:	490a      	ldr	r1, [pc, #40]	; (c678 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c650:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c654:	7901      	ldrb	r1, [r0, #4]
    c656:	2901      	cmp	r1, #1
    c658:	d003      	beq.n	c662 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c65a:	2159      	movs	r1, #89	; 0x59
    c65c:	2069      	movs	r0, #105	; 0x69
    c65e:	f7ff ff1d 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c662:	7941      	ldrb	r1, [r0, #5]
    c664:	7982      	ldrb	r2, [r0, #6]
    c666:	1c49      	adds	r1, r1, #1
    c668:	b2c9      	uxtb	r1, r1
    c66a:	428a      	cmp	r2, r1
    c66c:	d000      	beq.n	c670 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c66e:	7141      	strb	r1, [r0, #5]
    c670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c674:	f7ff bf74 	b.w	c560 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c678:	20001470 	.word	0x20001470

0000c67c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c67c:	b510      	push	{r4, lr}
    c67e:	2805      	cmp	r0, #5
    c680:	d303      	bcc.n	c68a <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c682:	214f      	movs	r1, #79	; 0x4f
    c684:	2069      	movs	r0, #105	; 0x69
    c686:	f7ff ff09 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c68a:	4a03      	ldr	r2, [pc, #12]	; (c698 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c68c:	2100      	movs	r1, #0
    c68e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c692:	7101      	strb	r1, [r0, #4]
    c694:	bd10      	pop	{r4, pc}
    c696:	0000      	.short	0x0000
    c698:	20001470 	.word	0x20001470

0000c69c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c69c:	b570      	push	{r4, r5, r6, lr}
    c69e:	2505      	movs	r5, #5
    c6a0:	4e0e      	ldr	r6, [pc, #56]	; (c6dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c6a2:	4c0f      	ldr	r4, [pc, #60]	; (c6e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c6a4:	e016      	b.n	c6d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c6a6:	7821      	ldrb	r1, [r4, #0]
    c6a8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c6ac:	7902      	ldrb	r2, [r0, #4]
    c6ae:	2a01      	cmp	r2, #1
    c6b0:	d108      	bne.n	c6c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c6b2:	7942      	ldrb	r2, [r0, #5]
    c6b4:	7983      	ldrb	r3, [r0, #6]
    c6b6:	429a      	cmp	r2, r3
    c6b8:	d004      	beq.n	c6c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c6ba:	7942      	ldrb	r2, [r0, #5]
    c6bc:	7182      	strb	r2, [r0, #6]
    c6be:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c6c2:	4780      	blx	r0
    c6c4:	7820      	ldrb	r0, [r4, #0]
    c6c6:	1c40      	adds	r0, r0, #1
    c6c8:	b2c0      	uxtb	r0, r0
    c6ca:	7020      	strb	r0, [r4, #0]
    c6cc:	2805      	cmp	r0, #5
    c6ce:	d301      	bcc.n	c6d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c6d0:	2000      	movs	r0, #0
    c6d2:	7020      	strb	r0, [r4, #0]
    c6d4:	1e6d      	subs	r5, r5, #1
    c6d6:	b2ed      	uxtb	r5, r5
    c6d8:	d2e5      	bcs.n	c6a6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c6da:	bd70      	pop	{r4, r5, r6, pc}
    c6dc:	20001470 	.word	0x20001470
    c6e0:	20000382 	.word	0x20000382

0000c6e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c6e4:	b500      	push	{lr}
    c6e6:	f004 faa3 	bl	10c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c6ea:	b940      	cbnz	r0, c6fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6ec:	f004 faaa 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c6f0:	b928      	cbnz	r0, c6fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6f2:	f004 fabe 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c6f6:	b910      	cbnz	r0, c6fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6f8:	f004 facf 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c6fc:	b108      	cbz	r0, c702 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c6fe:	4802      	ldr	r0, [pc, #8]	; (c708 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c700:	bd00      	pop	{pc}
    c702:	4802      	ldr	r0, [pc, #8]	; (c70c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c704:	bd00      	pop	{pc}
    c706:	0000      	.short	0x0000
    c708:	4000050c 	.word	0x4000050c
    c70c:	4001e700 	.word	0x4001e700
    c710:	b510      	push	{r4, lr}
    c712:	f004 fac2 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c716:	b330      	cbz	r0, c766 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c718:	f3ef 8010 	mrs	r0, PRIMASK
    c71c:	b1c8      	cbz	r0, c752 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c71e:	2100      	movs	r1, #0
    c720:	b672      	cpsid	i
    c722:	4812      	ldr	r0, [pc, #72]	; (c76c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c724:	6802      	ldr	r2, [r0, #0]
    c726:	6803      	ldr	r3, [r0, #0]
    c728:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c72c:	f043 0310 	orr.w	r3, r3, #16
    c730:	6003      	str	r3, [r0, #0]
    c732:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c736:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c73a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c73e:	431c      	orrs	r4, r3
    c740:	d000      	beq.n	c744 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c742:	bf40      	sev
    c744:	bf20      	wfe
    c746:	bf00      	nop
    c748:	bf00      	nop
    c74a:	bf00      	nop
    c74c:	bf00      	nop
    c74e:	b112      	cbz	r2, c756 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c750:	e005      	b.n	c75e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c752:	2101      	movs	r1, #1
    c754:	e7e4      	b.n	c720 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c756:	6802      	ldr	r2, [r0, #0]
    c758:	f022 0210 	bic.w	r2, r2, #16
    c75c:	6002      	str	r2, [r0, #0]
    c75e:	2900      	cmp	r1, #0
    c760:	d000      	beq.n	c764 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c762:	b662      	cpsie	i
    c764:	bd10      	pop	{r4, pc}
    c766:	bf20      	wfe
    c768:	bd10      	pop	{r4, pc}
    c76a:	0000      	.short	0x0000
    c76c:	e000ed10 	.word	0xe000ed10

0000c770 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c770:	4901      	ldr	r1, [pc, #4]	; (c778 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c772:	2001      	movs	r0, #1
    c774:	7088      	strb	r0, [r1, #2]
    c776:	4770      	bx	lr
    c778:	20000330 	.word	0x20000330

0000c77c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c77c:	00010f7d 00010fb5 00010f9f 00010f8d     }...............
    c78c:	00010f99 00010f87 00010f7b 00010f79     ........{...y...
    c79c:	00010fb1 00010fa5 00010f93 00010f81     ................
    c7ac:	00010f73 00010f6b 00010f6f 00010f65     s...k...o...e...

0000c7bc <mpsl_fem_disable>:
    c7bc:	4801      	ldr	r0, [pc, #4]	; (c7c4 <mpsl_fem_disable+0x8>)
    c7be:	6800      	ldr	r0, [r0, #0]
    c7c0:	6800      	ldr	r0, [r0, #0]
    c7c2:	4700      	bx	r0
    c7c4:	20000344 	.word	0x20000344

0000c7c8 <mpsl_fem_lna_configuration_clear>:
    c7c8:	4801      	ldr	r0, [pc, #4]	; (c7d0 <mpsl_fem_lna_configuration_clear+0x8>)
    c7ca:	6800      	ldr	r0, [r0, #0]
    c7cc:	6940      	ldr	r0, [r0, #20]
    c7ce:	4700      	bx	r0
    c7d0:	20000344 	.word	0x20000344

0000c7d4 <mpsl_fem_lna_configuration_set>:
    c7d4:	4a01      	ldr	r2, [pc, #4]	; (c7dc <mpsl_fem_lna_configuration_set+0x8>)
    c7d6:	6812      	ldr	r2, [r2, #0]
    c7d8:	68d2      	ldr	r2, [r2, #12]
    c7da:	4710      	bx	r2
    c7dc:	20000344 	.word	0x20000344

0000c7e0 <mpsl_fem_lna_is_configured>:
    c7e0:	4901      	ldr	r1, [pc, #4]	; (c7e8 <mpsl_fem_lna_is_configured+0x8>)
    c7e2:	6809      	ldr	r1, [r1, #0]
    c7e4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c7e6:	4708      	bx	r1
    c7e8:	20000344 	.word	0x20000344

0000c7ec <mpsl_fem_pa_configuration_clear>:
    c7ec:	4801      	ldr	r0, [pc, #4]	; (c7f4 <mpsl_fem_pa_configuration_clear+0x8>)
    c7ee:	6800      	ldr	r0, [r0, #0]
    c7f0:	6900      	ldr	r0, [r0, #16]
    c7f2:	4700      	bx	r0
    c7f4:	20000344 	.word	0x20000344

0000c7f8 <mpsl_fem_pa_configuration_set>:
    c7f8:	4a01      	ldr	r2, [pc, #4]	; (c800 <mpsl_fem_pa_configuration_set+0x8>)
    c7fa:	6812      	ldr	r2, [r2, #0]
    c7fc:	6892      	ldr	r2, [r2, #8]
    c7fe:	4710      	bx	r2
    c800:	20000344 	.word	0x20000344

0000c804 <mpsl_fem_pa_gain_set>:
    c804:	4901      	ldr	r1, [pc, #4]	; (c80c <mpsl_fem_pa_gain_set+0x8>)
    c806:	6809      	ldr	r1, [r1, #0]
    c808:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c80a:	4708      	bx	r1
    c80c:	20000344 	.word	0x20000344

0000c810 <mpsl_fem_pa_is_configured>:
    c810:	4901      	ldr	r1, [pc, #4]	; (c818 <mpsl_fem_pa_is_configured+0x8>)
    c812:	6809      	ldr	r1, [r1, #0]
    c814:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c816:	4708      	bx	r1
    c818:	20000344 	.word	0x20000344

0000c81c <mpsl_fem_tx_power_split>:
    c81c:	b430      	push	{r4, r5}
    c81e:	4c03      	ldr	r4, [pc, #12]	; (c82c <mpsl_fem_tx_power_split+0x10>)
    c820:	6824      	ldr	r4, [r4, #0]
    c822:	6864      	ldr	r4, [r4, #4]
    c824:	46a4      	mov	ip, r4
    c826:	bc30      	pop	{r4, r5}
    c828:	4760      	bx	ip
    c82a:	0000      	.short	0x0000
    c82c:	20000344 	.word	0x20000344

0000c830 <mpsl_fem_device_config_254_apply_get>:
    c830:	4801      	ldr	r0, [pc, #4]	; (c838 <mpsl_fem_device_config_254_apply_get+0x8>)
    c832:	7800      	ldrb	r0, [r0, #0]
    c834:	4770      	bx	lr
    c836:	0000      	.short	0x0000
    c838:	20000383 	.word	0x20000383

0000c83c <__udivmoddi4>:
    c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c840:	4686      	mov	lr, r0
    c842:	468c      	mov	ip, r1
    c844:	4608      	mov	r0, r1
    c846:	9e08      	ldr	r6, [sp, #32]
    c848:	4615      	mov	r5, r2
    c84a:	4674      	mov	r4, lr
    c84c:	4619      	mov	r1, r3
    c84e:	2b00      	cmp	r3, #0
    c850:	f040 80c2 	bne.w	c9d8 <__udivmoddi4+0x19c>
    c854:	4285      	cmp	r5, r0
    c856:	fab2 f282 	clz	r2, r2
    c85a:	d945      	bls.n	c8e8 <__udivmoddi4+0xac>
    c85c:	b14a      	cbz	r2, c872 <__udivmoddi4+0x36>
    c85e:	f1c2 0320 	rsb	r3, r2, #32
    c862:	fa00 fc02 	lsl.w	ip, r0, r2
    c866:	fa2e f303 	lsr.w	r3, lr, r3
    c86a:	4095      	lsls	r5, r2
    c86c:	ea43 0c0c 	orr.w	ip, r3, ip
    c870:	4094      	lsls	r4, r2
    c872:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c876:	b2a8      	uxth	r0, r5
    c878:	fbbc f8fe 	udiv	r8, ip, lr
    c87c:	0c23      	lsrs	r3, r4, #16
    c87e:	fb0e cc18 	mls	ip, lr, r8, ip
    c882:	fb08 f900 	mul.w	r9, r8, r0
    c886:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c88a:	4599      	cmp	r9, r3
    c88c:	d928      	bls.n	c8e0 <__udivmoddi4+0xa4>
    c88e:	18eb      	adds	r3, r5, r3
    c890:	f108 37ff 	add.w	r7, r8, #4294967295
    c894:	d204      	bcs.n	c8a0 <__udivmoddi4+0x64>
    c896:	4599      	cmp	r9, r3
    c898:	d902      	bls.n	c8a0 <__udivmoddi4+0x64>
    c89a:	f1a8 0702 	sub.w	r7, r8, #2
    c89e:	442b      	add	r3, r5
    c8a0:	eba3 0309 	sub.w	r3, r3, r9
    c8a4:	b2a4      	uxth	r4, r4
    c8a6:	fbb3 fcfe 	udiv	ip, r3, lr
    c8aa:	fb0e 331c 	mls	r3, lr, ip, r3
    c8ae:	fb0c f000 	mul.w	r0, ip, r0
    c8b2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c8b6:	42a0      	cmp	r0, r4
    c8b8:	d914      	bls.n	c8e4 <__udivmoddi4+0xa8>
    c8ba:	192c      	adds	r4, r5, r4
    c8bc:	f10c 33ff 	add.w	r3, ip, #4294967295
    c8c0:	d204      	bcs.n	c8cc <__udivmoddi4+0x90>
    c8c2:	42a0      	cmp	r0, r4
    c8c4:	d902      	bls.n	c8cc <__udivmoddi4+0x90>
    c8c6:	f1ac 0302 	sub.w	r3, ip, #2
    c8ca:	442c      	add	r4, r5
    c8cc:	1a24      	subs	r4, r4, r0
    c8ce:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c8d2:	b11e      	cbz	r6, c8dc <__udivmoddi4+0xa0>
    c8d4:	40d4      	lsrs	r4, r2
    c8d6:	2300      	movs	r3, #0
    c8d8:	6034      	str	r4, [r6, #0]
    c8da:	6073      	str	r3, [r6, #4]
    c8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c8e0:	4647      	mov	r7, r8
    c8e2:	e7dd      	b.n	c8a0 <__udivmoddi4+0x64>
    c8e4:	4663      	mov	r3, ip
    c8e6:	e7f1      	b.n	c8cc <__udivmoddi4+0x90>
    c8e8:	bb92      	cbnz	r2, c950 <__udivmoddi4+0x114>
    c8ea:	1b43      	subs	r3, r0, r5
    c8ec:	2101      	movs	r1, #1
    c8ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c8f2:	b2af      	uxth	r7, r5
    c8f4:	fbb3 fcfe 	udiv	ip, r3, lr
    c8f8:	0c20      	lsrs	r0, r4, #16
    c8fa:	fb0e 331c 	mls	r3, lr, ip, r3
    c8fe:	fb0c f807 	mul.w	r8, ip, r7
    c902:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c906:	4598      	cmp	r8, r3
    c908:	d962      	bls.n	c9d0 <__udivmoddi4+0x194>
    c90a:	18eb      	adds	r3, r5, r3
    c90c:	f10c 30ff 	add.w	r0, ip, #4294967295
    c910:	d204      	bcs.n	c91c <__udivmoddi4+0xe0>
    c912:	4598      	cmp	r8, r3
    c914:	d902      	bls.n	c91c <__udivmoddi4+0xe0>
    c916:	f1ac 0002 	sub.w	r0, ip, #2
    c91a:	442b      	add	r3, r5
    c91c:	eba3 0308 	sub.w	r3, r3, r8
    c920:	b2a4      	uxth	r4, r4
    c922:	fbb3 fcfe 	udiv	ip, r3, lr
    c926:	fb0e 331c 	mls	r3, lr, ip, r3
    c92a:	fb0c f707 	mul.w	r7, ip, r7
    c92e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c932:	42a7      	cmp	r7, r4
    c934:	d94e      	bls.n	c9d4 <__udivmoddi4+0x198>
    c936:	192c      	adds	r4, r5, r4
    c938:	f10c 33ff 	add.w	r3, ip, #4294967295
    c93c:	d204      	bcs.n	c948 <__udivmoddi4+0x10c>
    c93e:	42a7      	cmp	r7, r4
    c940:	d902      	bls.n	c948 <__udivmoddi4+0x10c>
    c942:	f1ac 0302 	sub.w	r3, ip, #2
    c946:	442c      	add	r4, r5
    c948:	1be4      	subs	r4, r4, r7
    c94a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c94e:	e7c0      	b.n	c8d2 <__udivmoddi4+0x96>
    c950:	f1c2 0320 	rsb	r3, r2, #32
    c954:	fa20 f103 	lsr.w	r1, r0, r3
    c958:	4095      	lsls	r5, r2
    c95a:	4090      	lsls	r0, r2
    c95c:	fa2e f303 	lsr.w	r3, lr, r3
    c960:	4303      	orrs	r3, r0
    c962:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c966:	b2af      	uxth	r7, r5
    c968:	fbb1 fcfe 	udiv	ip, r1, lr
    c96c:	fb0e 101c 	mls	r0, lr, ip, r1
    c970:	0c19      	lsrs	r1, r3, #16
    c972:	fb0c f807 	mul.w	r8, ip, r7
    c976:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c97a:	4588      	cmp	r8, r1
    c97c:	fa04 f402 	lsl.w	r4, r4, r2
    c980:	d922      	bls.n	c9c8 <__udivmoddi4+0x18c>
    c982:	1869      	adds	r1, r5, r1
    c984:	f10c 30ff 	add.w	r0, ip, #4294967295
    c988:	d204      	bcs.n	c994 <__udivmoddi4+0x158>
    c98a:	4588      	cmp	r8, r1
    c98c:	d902      	bls.n	c994 <__udivmoddi4+0x158>
    c98e:	f1ac 0002 	sub.w	r0, ip, #2
    c992:	4429      	add	r1, r5
    c994:	eba1 0108 	sub.w	r1, r1, r8
    c998:	b29b      	uxth	r3, r3
    c99a:	fbb1 fcfe 	udiv	ip, r1, lr
    c99e:	fb0e 111c 	mls	r1, lr, ip, r1
    c9a2:	fb0c f707 	mul.w	r7, ip, r7
    c9a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c9aa:	429f      	cmp	r7, r3
    c9ac:	d90e      	bls.n	c9cc <__udivmoddi4+0x190>
    c9ae:	18eb      	adds	r3, r5, r3
    c9b0:	f10c 31ff 	add.w	r1, ip, #4294967295
    c9b4:	d204      	bcs.n	c9c0 <__udivmoddi4+0x184>
    c9b6:	429f      	cmp	r7, r3
    c9b8:	d902      	bls.n	c9c0 <__udivmoddi4+0x184>
    c9ba:	f1ac 0102 	sub.w	r1, ip, #2
    c9be:	442b      	add	r3, r5
    c9c0:	1bdb      	subs	r3, r3, r7
    c9c2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c9c6:	e792      	b.n	c8ee <__udivmoddi4+0xb2>
    c9c8:	4660      	mov	r0, ip
    c9ca:	e7e3      	b.n	c994 <__udivmoddi4+0x158>
    c9cc:	4661      	mov	r1, ip
    c9ce:	e7f7      	b.n	c9c0 <__udivmoddi4+0x184>
    c9d0:	4660      	mov	r0, ip
    c9d2:	e7a3      	b.n	c91c <__udivmoddi4+0xe0>
    c9d4:	4663      	mov	r3, ip
    c9d6:	e7b7      	b.n	c948 <__udivmoddi4+0x10c>
    c9d8:	4283      	cmp	r3, r0
    c9da:	d906      	bls.n	c9ea <__udivmoddi4+0x1ae>
    c9dc:	b916      	cbnz	r6, c9e4 <__udivmoddi4+0x1a8>
    c9de:	2100      	movs	r1, #0
    c9e0:	4608      	mov	r0, r1
    c9e2:	e77b      	b.n	c8dc <__udivmoddi4+0xa0>
    c9e4:	e9c6 e000 	strd	lr, r0, [r6]
    c9e8:	e7f9      	b.n	c9de <__udivmoddi4+0x1a2>
    c9ea:	fab3 f783 	clz	r7, r3
    c9ee:	b98f      	cbnz	r7, ca14 <__udivmoddi4+0x1d8>
    c9f0:	4283      	cmp	r3, r0
    c9f2:	d301      	bcc.n	c9f8 <__udivmoddi4+0x1bc>
    c9f4:	4572      	cmp	r2, lr
    c9f6:	d808      	bhi.n	ca0a <__udivmoddi4+0x1ce>
    c9f8:	ebbe 0402 	subs.w	r4, lr, r2
    c9fc:	eb60 0303 	sbc.w	r3, r0, r3
    ca00:	2001      	movs	r0, #1
    ca02:	469c      	mov	ip, r3
    ca04:	b91e      	cbnz	r6, ca0e <__udivmoddi4+0x1d2>
    ca06:	2100      	movs	r1, #0
    ca08:	e768      	b.n	c8dc <__udivmoddi4+0xa0>
    ca0a:	4638      	mov	r0, r7
    ca0c:	e7fa      	b.n	ca04 <__udivmoddi4+0x1c8>
    ca0e:	e9c6 4c00 	strd	r4, ip, [r6]
    ca12:	e7f8      	b.n	ca06 <__udivmoddi4+0x1ca>
    ca14:	f1c7 0c20 	rsb	ip, r7, #32
    ca18:	40bb      	lsls	r3, r7
    ca1a:	fa22 f40c 	lsr.w	r4, r2, ip
    ca1e:	431c      	orrs	r4, r3
    ca20:	fa2e f10c 	lsr.w	r1, lr, ip
    ca24:	fa20 f30c 	lsr.w	r3, r0, ip
    ca28:	40b8      	lsls	r0, r7
    ca2a:	4301      	orrs	r1, r0
    ca2c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    ca30:	fa0e f507 	lsl.w	r5, lr, r7
    ca34:	fbb3 f8f9 	udiv	r8, r3, r9
    ca38:	fa1f fe84 	uxth.w	lr, r4
    ca3c:	fb09 3018 	mls	r0, r9, r8, r3
    ca40:	0c0b      	lsrs	r3, r1, #16
    ca42:	fb08 fa0e 	mul.w	sl, r8, lr
    ca46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    ca4a:	459a      	cmp	sl, r3
    ca4c:	fa02 f207 	lsl.w	r2, r2, r7
    ca50:	d940      	bls.n	cad4 <__udivmoddi4+0x298>
    ca52:	18e3      	adds	r3, r4, r3
    ca54:	f108 30ff 	add.w	r0, r8, #4294967295
    ca58:	d204      	bcs.n	ca64 <__udivmoddi4+0x228>
    ca5a:	459a      	cmp	sl, r3
    ca5c:	d902      	bls.n	ca64 <__udivmoddi4+0x228>
    ca5e:	f1a8 0002 	sub.w	r0, r8, #2
    ca62:	4423      	add	r3, r4
    ca64:	eba3 030a 	sub.w	r3, r3, sl
    ca68:	b289      	uxth	r1, r1
    ca6a:	fbb3 f8f9 	udiv	r8, r3, r9
    ca6e:	fb09 3318 	mls	r3, r9, r8, r3
    ca72:	fb08 fe0e 	mul.w	lr, r8, lr
    ca76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ca7a:	458e      	cmp	lr, r1
    ca7c:	d92c      	bls.n	cad8 <__udivmoddi4+0x29c>
    ca7e:	1861      	adds	r1, r4, r1
    ca80:	f108 33ff 	add.w	r3, r8, #4294967295
    ca84:	d204      	bcs.n	ca90 <__udivmoddi4+0x254>
    ca86:	458e      	cmp	lr, r1
    ca88:	d902      	bls.n	ca90 <__udivmoddi4+0x254>
    ca8a:	f1a8 0302 	sub.w	r3, r8, #2
    ca8e:	4421      	add	r1, r4
    ca90:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ca94:	fba0 9802 	umull	r9, r8, r0, r2
    ca98:	eba1 010e 	sub.w	r1, r1, lr
    ca9c:	4541      	cmp	r1, r8
    ca9e:	46ce      	mov	lr, r9
    caa0:	4643      	mov	r3, r8
    caa2:	d302      	bcc.n	caaa <__udivmoddi4+0x26e>
    caa4:	d106      	bne.n	cab4 <__udivmoddi4+0x278>
    caa6:	454d      	cmp	r5, r9
    caa8:	d204      	bcs.n	cab4 <__udivmoddi4+0x278>
    caaa:	ebb9 0e02 	subs.w	lr, r9, r2
    caae:	eb68 0304 	sbc.w	r3, r8, r4
    cab2:	3801      	subs	r0, #1
    cab4:	2e00      	cmp	r6, #0
    cab6:	d0a6      	beq.n	ca06 <__udivmoddi4+0x1ca>
    cab8:	ebb5 020e 	subs.w	r2, r5, lr
    cabc:	eb61 0103 	sbc.w	r1, r1, r3
    cac0:	fa01 fc0c 	lsl.w	ip, r1, ip
    cac4:	fa22 f307 	lsr.w	r3, r2, r7
    cac8:	ea4c 0303 	orr.w	r3, ip, r3
    cacc:	40f9      	lsrs	r1, r7
    cace:	e9c6 3100 	strd	r3, r1, [r6]
    cad2:	e798      	b.n	ca06 <__udivmoddi4+0x1ca>
    cad4:	4640      	mov	r0, r8
    cad6:	e7c5      	b.n	ca64 <__udivmoddi4+0x228>
    cad8:	4643      	mov	r3, r8
    cada:	e7d9      	b.n	ca90 <__udivmoddi4+0x254>

0000cadc <strlen>:
    cadc:	4603      	mov	r3, r0
    cade:	f813 2b01 	ldrb.w	r2, [r3], #1
    cae2:	2a00      	cmp	r2, #0
    cae4:	d1fb      	bne.n	cade <strlen+0x2>
    cae6:	1a18      	subs	r0, r3, r0
    cae8:	3801      	subs	r0, #1
    caea:	4770      	bx	lr
    caec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caf0:	460c      	mov	r4, r1
    caf2:	4681      	mov	r9, r0
    caf4:	7849      	ldrb	r1, [r1, #1]
    caf6:	f100 0003 	add.w	r0, r0, #3
    cafa:	f88d 1000 	strb.w	r1, [sp]
    cafe:	f020 0003 	bic.w	r0, r0, #3
    cb02:	78a1      	ldrb	r1, [r4, #2]
    cb04:	0015      	movs	r5, r2
    cb06:	4606      	mov	r6, r0
    cb08:	f88d 1001 	strb.w	r1, [sp, #1]
    cb0c:	d000      	beq.n	cb10 <strlen+0x34>
    cb0e:	2000      	movs	r0, #0
    cb10:	4669      	mov	r1, sp
    cb12:	f7f4 fe47 	bl	17a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cb16:	eb06 0a00 	add.w	sl, r6, r0
    cb1a:	7820      	ldrb	r0, [r4, #0]
    cb1c:	7861      	ldrb	r1, [r4, #1]
    cb1e:	2700      	movs	r7, #0
    cb20:	4408      	add	r0, r1
    cb22:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    cb26:	463e      	mov	r6, r7
    cb28:	e008      	b.n	cb3c <strlen+0x60>
    cb2a:	7a23      	ldrb	r3, [r4, #8]
    cb2c:	79e2      	ldrb	r2, [r4, #7]
    cb2e:	79a1      	ldrb	r1, [r4, #6]
    cb30:	7960      	ldrb	r0, [r4, #5]
    cb32:	f000 fe80 	bl	d836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cb36:	1c76      	adds	r6, r6, #1
    cb38:	4407      	add	r7, r0
    cb3a:	b2f6      	uxtb	r6, r6
    cb3c:	4546      	cmp	r6, r8
    cb3e:	d3f4      	bcc.n	cb2a <strlen+0x4e>
    cb40:	f10a 0003 	add.w	r0, sl, #3
    cb44:	f020 0003 	bic.w	r0, r0, #3
    cb48:	4606      	mov	r6, r0
    cb4a:	b105      	cbz	r5, cb4e <strlen+0x72>
    cb4c:	2000      	movs	r0, #0
    cb4e:	463a      	mov	r2, r7
    cb50:	4641      	mov	r1, r8
    cb52:	f7f4 ffdb 	bl	1b0c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cb56:	4430      	add	r0, r6
    cb58:	78a1      	ldrb	r1, [r4, #2]
    cb5a:	462e      	mov	r6, r5
    cb5c:	b159      	cbz	r1, cb76 <strlen+0x9a>
    cb5e:	1cc0      	adds	r0, r0, #3
    cb60:	f020 0003 	bic.w	r0, r0, #3
    cb64:	8a63      	ldrh	r3, [r4, #18]
    cb66:	78e2      	ldrb	r2, [r4, #3]
    cb68:	4605      	mov	r5, r0
    cb6a:	b2c9      	uxtb	r1, r1
    cb6c:	b106      	cbz	r6, cb70 <strlen+0x94>
    cb6e:	2000      	movs	r0, #0
    cb70:	f7f5 f880 	bl	1c74 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cb74:	4428      	add	r0, r5
    cb76:	1dc0      	adds	r0, r0, #7
    cb78:	f020 0007 	bic.w	r0, r0, #7
    cb7c:	eba0 0009 	sub.w	r0, r0, r9
    cb80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cb84 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cb84:	b50e      	push	{r1, r2, r3, lr}
    cb86:	4601      	mov	r1, r0
    cb88:	4668      	mov	r0, sp
    cb8a:	f000 f818 	bl	cbbe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cb8e:	4668      	mov	r0, sp
    cb90:	f001 fc62 	bl	e458 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cb94:	bd0e      	pop	{r1, r2, r3, pc}
    cb96:	b570      	push	{r4, r5, r6, lr}
    cb98:	460c      	mov	r4, r1
    cb9a:	4605      	mov	r5, r0
    cb9c:	f7f4 fd78 	bl	1690 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cba0:	2800      	cmp	r0, #0
    cba2:	d002      	beq.n	cbaa <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    cba4:	2d3e      	cmp	r5, #62	; 0x3e
    cba6:	d001      	beq.n	cbac <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    cba8:	2001      	movs	r0, #1
    cbaa:	bd70      	pop	{r4, r5, r6, pc}
    cbac:	2c12      	cmp	r4, #18
    cbae:	d004      	beq.n	cbba <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    cbb0:	4620      	mov	r0, r4
    cbb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cbb6:	f7f4 bd7d 	b.w	16b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbba:	2000      	movs	r0, #0
    cbbc:	bd70      	pop	{r4, r5, r6, pc}

0000cbbe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cbbe:	880a      	ldrh	r2, [r1, #0]
    cbc0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cbc4:	8082      	strh	r2, [r0, #4]
    cbc6:	884a      	ldrh	r2, [r1, #2]
    cbc8:	80c2      	strh	r2, [r0, #6]
    cbca:	784a      	ldrb	r2, [r1, #1]
    cbcc:	0993      	lsrs	r3, r2, #6
    cbce:	2200      	movs	r2, #0
    cbd0:	7242      	strb	r2, [r0, #9]
    cbd2:	784b      	ldrb	r3, [r1, #1]
    cbd4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cbd8:	b11b      	cbz	r3, cbe2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cbda:	2b01      	cmp	r3, #1
    cbdc:	d005      	beq.n	cbea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cbde:	2b02      	cmp	r3, #2
    cbe0:	d005      	beq.n	cbee <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cbe2:	7202      	strb	r2, [r0, #8]
    cbe4:	1d09      	adds	r1, r1, #4
    cbe6:	6001      	str	r1, [r0, #0]
    cbe8:	4770      	bx	lr
    cbea:	2201      	movs	r2, #1
    cbec:	e7f9      	b.n	cbe2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cbee:	2202      	movs	r2, #2
    cbf0:	e7f7      	b.n	cbe2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000cbf2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cbf2:	b510      	push	{r4, lr}
    cbf4:	460c      	mov	r4, r1
    cbf6:	7909      	ldrb	r1, [r1, #4]
    cbf8:	7001      	strb	r1, [r0, #0]
    cbfa:	7841      	ldrb	r1, [r0, #1]
    cbfc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cc00:	7041      	strb	r1, [r0, #1]
    cc02:	88a2      	ldrh	r2, [r4, #4]
    cc04:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cc08:	4311      	orrs	r1, r2
    cc0a:	7041      	strb	r1, [r0, #1]
    cc0c:	79a2      	ldrb	r2, [r4, #6]
    cc0e:	7082      	strb	r2, [r0, #2]
    cc10:	88e2      	ldrh	r2, [r4, #6]
    cc12:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    cc16:	0a12      	lsrs	r2, r2, #8
    cc18:	70c2      	strb	r2, [r0, #3]
    cc1a:	7041      	strb	r1, [r0, #1]
    cc1c:	7a22      	ldrb	r2, [r4, #8]
    cc1e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cc22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    cc26:	7041      	strb	r1, [r0, #1]
    cc28:	7a62      	ldrb	r2, [r4, #9]
    cc2a:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    cc2e:	7041      	strb	r1, [r0, #1]
    cc30:	6821      	ldr	r1, [r4, #0]
    cc32:	1d02      	adds	r2, r0, #4
    cc34:	4291      	cmp	r1, r2
    cc36:	d006      	beq.n	cc46 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    cc38:	88e2      	ldrh	r2, [r4, #6]
    cc3a:	2afb      	cmp	r2, #251	; 0xfb
    cc3c:	d300      	bcc.n	cc40 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    cc3e:	22fb      	movs	r2, #251	; 0xfb
    cc40:	1d00      	adds	r0, r0, #4
    cc42:	f004 f8b5 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc46:	79a0      	ldrb	r0, [r4, #6]
    cc48:	1d00      	adds	r0, r0, #4
    cc4a:	b2c0      	uxtb	r0, r0
    cc4c:	bd10      	pop	{r4, pc}

0000cc4e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cc4e:	b430      	push	{r4, r5}
    cc50:	790a      	ldrb	r2, [r1, #4]
    cc52:	7002      	strb	r2, [r0, #0]
    cc54:	7842      	ldrb	r2, [r0, #1]
    cc56:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cc5a:	7042      	strb	r2, [r0, #1]
    cc5c:	888b      	ldrh	r3, [r1, #4]
    cc5e:	f3c3 2303 	ubfx	r3, r3, #8, #4
    cc62:	431a      	orrs	r2, r3
    cc64:	7042      	strb	r2, [r0, #1]
    cc66:	798b      	ldrb	r3, [r1, #6]
    cc68:	7083      	strb	r3, [r0, #2]
    cc6a:	78c3      	ldrb	r3, [r0, #3]
    cc6c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cc70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cc74:	70c3      	strb	r3, [r0, #3]
    cc76:	88cc      	ldrh	r4, [r1, #6]
    cc78:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cc7c:	4323      	orrs	r3, r4
    cc7e:	70c3      	strb	r3, [r0, #3]
    cc80:	7042      	strb	r2, [r0, #1]
    cc82:	7a0c      	ldrb	r4, [r1, #8]
    cc84:	f004 0403 	and.w	r4, r4, #3
    cc88:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cc8c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cc90:	7042      	strb	r2, [r0, #1]
    cc92:	7a4c      	ldrb	r4, [r1, #9]
    cc94:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    cc98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cc9c:	7042      	strb	r2, [r0, #1]
    cc9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cca2:	70c2      	strb	r2, [r0, #3]
    cca4:	680b      	ldr	r3, [r1, #0]
    cca6:	1d02      	adds	r2, r0, #4
    cca8:	4293      	cmp	r3, r2
    ccaa:	d005      	beq.n	ccb8 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ccac:	88ca      	ldrh	r2, [r1, #6]
    ccae:	bc30      	pop	{r4, r5}
    ccb0:	4619      	mov	r1, r3
    ccb2:	1d00      	adds	r0, r0, #4
    ccb4:	f004 b87c 	b.w	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ccb8:	bc30      	pop	{r4, r5}
    ccba:	4770      	bx	lr

0000ccbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ccbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccc0:	460d      	mov	r5, r1
    ccc2:	4604      	mov	r4, r0
    ccc4:	780f      	ldrb	r7, [r1, #0]
    ccc6:	2000      	movs	r0, #0
    ccc8:	220c      	movs	r2, #12
    ccca:	2305      	movs	r3, #5
    cccc:	263e      	movs	r6, #62	; 0x3e
    ccce:	21ff      	movs	r1, #255	; 0xff
    ccd0:	2f1e      	cmp	r7, #30
    ccd2:	d27d      	bcs.n	cdd0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    ccd4:	e8df f007 	tbb	[pc, r7]
    ccd8:	28260fce 	.word	0x28260fce
    ccdc:	645349ce 	.word	0x645349ce
    cce0:	a0959380 	.word	0xa0959380
    cce4:	ced0c6ab 	.word	0xced0c6ab
    cce8:	b62ecece 	.word	0xb62ecece
    ccec:	f4f1d9b9 	.word	0xf4f1d9b9
    ccf0:	ebecedee 	.word	0xebecedee
    ccf4:	e9ea      	.short	0xe9ea
    ccf6:	7022      	strb	r2, [r4, #0]
    ccf8:	7928      	ldrb	r0, [r5, #4]
    ccfa:	70a0      	strb	r0, [r4, #2]
    ccfc:	7968      	ldrb	r0, [r5, #5]
    ccfe:	70e0      	strb	r0, [r4, #3]
    cd00:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd04:	0a00      	lsrs	r0, r0, #8
    cd06:	7120      	strb	r0, [r4, #4]
    cd08:	79e8      	ldrb	r0, [r5, #7]
    cd0a:	7160      	strb	r0, [r4, #5]
    cd0c:	7a28      	ldrb	r0, [r5, #8]
    cd0e:	71a0      	strb	r0, [r4, #6]
    cd10:	8928      	ldrh	r0, [r5, #8]
    cd12:	0a00      	lsrs	r0, r0, #8
    cd14:	71e0      	strb	r0, [r4, #7]
    cd16:	7aa8      	ldrb	r0, [r5, #10]
    cd18:	7220      	strb	r0, [r4, #8]
    cd1a:	8968      	ldrh	r0, [r5, #10]
    cd1c:	0a00      	lsrs	r0, r0, #8
    cd1e:	7260      	strb	r0, [r4, #9]
    cd20:	2008      	movs	r0, #8
    cd22:	e0a5      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd24:	2010      	movs	r0, #16
    cd26:	e000      	b.n	cd2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6e>
    cd28:	201a      	movs	r0, #26
    cd2a:	7020      	strb	r0, [r4, #0]
    cd2c:	7928      	ldrb	r0, [r5, #4]
    cd2e:	70a0      	strb	r0, [r4, #2]
    cd30:	2001      	movs	r0, #1
    cd32:	e09d      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd34:	2029      	movs	r0, #41	; 0x29
    cd36:	f7f4 fcbd 	bl	16b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cd3a:	b148      	cbz	r0, cd50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x94>
    cd3c:	7026      	strb	r6, [r4, #0]
    cd3e:	2029      	movs	r0, #41	; 0x29
    cd40:	70a0      	strb	r0, [r4, #2]
    cd42:	2221      	movs	r2, #33	; 0x21
    cd44:	1d29      	adds	r1, r5, #4
    cd46:	1ce0      	adds	r0, r4, #3
    cd48:	f004 f832 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd4c:	2022      	movs	r0, #34	; 0x22
    cd4e:	e08f      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd50:	200a      	movs	r0, #10
    cd52:	f7f4 fcaf 	bl	16b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cd56:	2800      	cmp	r0, #0
    cd58:	4629      	mov	r1, r5
    cd5a:	4620      	mov	r0, r4
    cd5c:	d002      	beq.n	cd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    cd5e:	f000 f95b 	bl	d018 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cd62:	e083      	b.n	ce6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    cd64:	f000 f92f 	bl	cfc6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cd68:	e080      	b.n	ce6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    cd6a:	7026      	strb	r6, [r4, #0]
    cd6c:	2014      	movs	r0, #20
    cd6e:	70a0      	strb	r0, [r4, #2]
    cd70:	7928      	ldrb	r0, [r5, #4]
    cd72:	70e0      	strb	r0, [r4, #3]
    cd74:	88a8      	ldrh	r0, [r5, #4]
    cd76:	0a00      	lsrs	r0, r0, #8
    cd78:	7120      	strb	r0, [r4, #4]
    cd7a:	79a8      	ldrb	r0, [r5, #6]
    cd7c:	e0bf      	b.n	cefe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    cd7e:	223e      	movs	r2, #62	; 0x3e
    cd80:	7022      	strb	r2, [r4, #0]
    cd82:	2204      	movs	r2, #4
    cd84:	70a2      	strb	r2, [r4, #2]
    cd86:	6868      	ldr	r0, [r5, #4]
    cd88:	f8c4 0003 	str.w	r0, [r4, #3]
    cd8c:	68a8      	ldr	r0, [r5, #8]
    cd8e:	f8c4 0007 	str.w	r0, [r4, #7]
    cd92:	89a8      	ldrh	r0, [r5, #12]
    cd94:	f8a4 000b 	strh.w	r0, [r4, #11]
    cd98:	7ba8      	ldrb	r0, [r5, #14]
    cd9a:	7360      	strb	r0, [r4, #13]
    cd9c:	200c      	movs	r0, #12
    cd9e:	e067      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cda0:	7026      	strb	r6, [r4, #0]
    cda2:	2003      	movs	r0, #3
    cda4:	70a0      	strb	r0, [r4, #2]
    cda6:	7928      	ldrb	r0, [r5, #4]
    cda8:	70e0      	strb	r0, [r4, #3]
    cdaa:	79a8      	ldrb	r0, [r5, #6]
    cdac:	7120      	strb	r0, [r4, #4]
    cdae:	88e8      	ldrh	r0, [r5, #6]
    cdb0:	0a00      	lsrs	r0, r0, #8
    cdb2:	7160      	strb	r0, [r4, #5]
    cdb4:	7a28      	ldrb	r0, [r5, #8]
    cdb6:	71a0      	strb	r0, [r4, #6]
    cdb8:	8928      	ldrh	r0, [r5, #8]
    cdba:	0a00      	lsrs	r0, r0, #8
    cdbc:	71e0      	strb	r0, [r4, #7]
    cdbe:	7aa8      	ldrb	r0, [r5, #10]
    cdc0:	7220      	strb	r0, [r4, #8]
    cdc2:	8968      	ldrh	r0, [r5, #10]
    cdc4:	0a00      	lsrs	r0, r0, #8
    cdc6:	7260      	strb	r0, [r4, #9]
    cdc8:	7b28      	ldrb	r0, [r5, #12]
    cdca:	72a0      	strb	r0, [r4, #10]
    cdcc:	89a8      	ldrh	r0, [r5, #12]
    cdce:	e000      	b.n	cdd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x116>
    cdd0:	e050      	b.n	ce74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    cdd2:	0a00      	lsrs	r0, r0, #8
    cdd4:	72e0      	strb	r0, [r4, #11]
    cdd6:	e0cf      	b.n	cf78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    cdd8:	7026      	strb	r6, [r4, #0]
    cdda:	70a3      	strb	r3, [r4, #2]
    cddc:	7928      	ldrb	r0, [r5, #4]
    cdde:	70e0      	strb	r0, [r4, #3]
    cde0:	88a8      	ldrh	r0, [r5, #4]
    cde2:	0a00      	lsrs	r0, r0, #8
    cde4:	7120      	strb	r0, [r4, #4]
    cde6:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cdea:	f8c4 0005 	str.w	r0, [r4, #5]
    cdee:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cdf2:	f8c4 0009 	str.w	r0, [r4, #9]
    cdf6:	89e8      	ldrh	r0, [r5, #14]
    cdf8:	f8a4 000d 	strh.w	r0, [r4, #13]
    cdfc:	e0e1      	b.n	cfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    cdfe:	2011      	movs	r0, #17
    ce00:	e03b      	b.n	ce7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1be>
    ce02:	7023      	strb	r3, [r4, #0]
    ce04:	7928      	ldrb	r0, [r5, #4]
    ce06:	70a0      	strb	r0, [r4, #2]
    ce08:	7968      	ldrb	r0, [r5, #5]
    ce0a:	70e0      	strb	r0, [r4, #3]
    ce0c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ce10:	0a00      	lsrs	r0, r0, #8
    ce12:	7120      	strb	r0, [r4, #4]
    ce14:	79e8      	ldrb	r0, [r5, #7]
    ce16:	e072      	b.n	cefe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    ce18:	2008      	movs	r0, #8
    ce1a:	7020      	strb	r0, [r4, #0]
    ce1c:	7928      	ldrb	r0, [r5, #4]
    ce1e:	70a0      	strb	r0, [r4, #2]
    ce20:	79a8      	ldrb	r0, [r5, #6]
    ce22:	70e0      	strb	r0, [r4, #3]
    ce24:	88e8      	ldrh	r0, [r5, #6]
    ce26:	0a00      	lsrs	r0, r0, #8
    ce28:	7120      	strb	r0, [r4, #4]
    ce2a:	7a28      	ldrb	r0, [r5, #8]
    ce2c:	e067      	b.n	cefe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    ce2e:	2030      	movs	r0, #48	; 0x30
    ce30:	7020      	strb	r0, [r4, #0]
    ce32:	7928      	ldrb	r0, [r5, #4]
    ce34:	70a0      	strb	r0, [r4, #2]
    ce36:	79a8      	ldrb	r0, [r5, #6]
    ce38:	70e0      	strb	r0, [r4, #3]
    ce3a:	88e8      	ldrh	r0, [r5, #6]
    ce3c:	0a00      	lsrs	r0, r0, #8
    ce3e:	7120      	strb	r0, [r4, #4]
    ce40:	2003      	movs	r0, #3
    ce42:	e015      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ce44:	7026      	strb	r6, [r4, #0]
    ce46:	2007      	movs	r0, #7
    ce48:	e05e      	b.n	cf08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    ce4a:	7026      	strb	r6, [r4, #0]
    ce4c:	70a2      	strb	r2, [r4, #2]
    ce4e:	7928      	ldrb	r0, [r5, #4]
    ce50:	70e0      	strb	r0, [r4, #3]
    ce52:	79a8      	ldrb	r0, [r5, #6]
    ce54:	7120      	strb	r0, [r4, #4]
    ce56:	88e8      	ldrh	r0, [r5, #6]
    ce58:	0a00      	lsrs	r0, r0, #8
    ce5a:	7160      	strb	r0, [r4, #5]
    ce5c:	7a28      	ldrb	r0, [r5, #8]
    ce5e:	71a0      	strb	r0, [r4, #6]
    ce60:	7a68      	ldrb	r0, [r5, #9]
    ce62:	e01f      	b.n	cea4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    ce64:	1d29      	adds	r1, r5, #4
    ce66:	4620      	mov	r0, r4
    ce68:	f7f4 fbe4 	bl	1634 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    ce6c:	2800      	cmp	r0, #0
    ce6e:	d001      	beq.n	ce74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    ce70:	7060      	strb	r0, [r4, #1]
    ce72:	1c80      	adds	r0, r0, #2
    ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce78:	2057      	movs	r0, #87	; 0x57
    ce7a:	7020      	strb	r0, [r4, #0]
    ce7c:	7928      	ldrb	r0, [r5, #4]
    ce7e:	70a0      	strb	r0, [r4, #2]
    ce80:	88a8      	ldrh	r0, [r5, #4]
    ce82:	0a00      	lsrs	r0, r0, #8
    ce84:	70e0      	strb	r0, [r4, #3]
    ce86:	2002      	movs	r0, #2
    ce88:	e7f2      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ce8a:	7026      	strb	r6, [r4, #0]
    ce8c:	2012      	movs	r0, #18
    ce8e:	70a0      	strb	r0, [r4, #2]
    ce90:	7928      	ldrb	r0, [r5, #4]
    ce92:	70e0      	strb	r0, [r4, #3]
    ce94:	7968      	ldrb	r0, [r5, #5]
    ce96:	7120      	strb	r0, [r4, #4]
    ce98:	79a8      	ldrb	r0, [r5, #6]
    ce9a:	7160      	strb	r0, [r4, #5]
    ce9c:	88e8      	ldrh	r0, [r5, #6]
    ce9e:	0a00      	lsrs	r0, r0, #8
    cea0:	71a0      	strb	r0, [r4, #6]
    cea2:	7a28      	ldrb	r0, [r5, #8]
    cea4:	71e0      	strb	r0, [r4, #7]
    cea6:	2006      	movs	r0, #6
    cea8:	e7e2      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ceaa:	e075      	b.n	cf98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    ceac:	e048      	b.n	cf40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    ceae:	e029      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    ceb0:	e054      	b.n	cf5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    ceb2:	e063      	b.n	cf7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    ceb4:	e01b      	b.n	ceee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    ceb6:	e003      	b.n	cec0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    ceb8:	e7ff      	b.n	ceba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1fe>
    ceba:	7026      	strb	r6, [r4, #0]
    cebc:	2020      	movs	r0, #32
    cebe:	e041      	b.n	cf44 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cec0:	7026      	strb	r6, [r4, #0]
    cec2:	2021      	movs	r0, #33	; 0x21
    cec4:	70a0      	strb	r0, [r4, #2]
    cec6:	7928      	ldrb	r0, [r5, #4]
    cec8:	70e0      	strb	r0, [r4, #3]
    ceca:	7968      	ldrb	r0, [r5, #5]
    cecc:	7120      	strb	r0, [r4, #4]
    cece:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ced2:	0a00      	lsrs	r0, r0, #8
    ced4:	7160      	strb	r0, [r4, #5]
    ced6:	79e8      	ldrb	r0, [r5, #7]
    ced8:	71a0      	strb	r0, [r4, #6]
    ceda:	7a28      	ldrb	r0, [r5, #8]
    cedc:	71e0      	strb	r0, [r4, #7]
    cede:	7a68      	ldrb	r0, [r5, #9]
    cee0:	7220      	strb	r0, [r4, #8]
    cee2:	7aa8      	ldrb	r0, [r5, #10]
    cee4:	7260      	strb	r0, [r4, #9]
    cee6:	7ae8      	ldrb	r0, [r5, #11]
    cee8:	72a0      	strb	r0, [r4, #10]
    ceea:	2009      	movs	r0, #9
    ceec:	e7c0      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ceee:	7021      	strb	r1, [r4, #0]
    cef0:	20a1      	movs	r0, #161	; 0xa1
    cef2:	70a0      	strb	r0, [r4, #2]
    cef4:	7928      	ldrb	r0, [r5, #4]
    cef6:	70e0      	strb	r0, [r4, #3]
    cef8:	7968      	ldrb	r0, [r5, #5]
    cefa:	7120      	strb	r0, [r4, #4]
    cefc:	2000      	movs	r0, #0
    cefe:	7160      	strb	r0, [r4, #5]
    cf00:	2004      	movs	r0, #4
    cf02:	e7b5      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf04:	7021      	strb	r1, [r4, #0]
    cf06:	20a2      	movs	r0, #162	; 0xa2
    cf08:	70a0      	strb	r0, [r4, #2]
    cf0a:	7928      	ldrb	r0, [r5, #4]
    cf0c:	70e0      	strb	r0, [r4, #3]
    cf0e:	88a8      	ldrh	r0, [r5, #4]
    cf10:	0a00      	lsrs	r0, r0, #8
    cf12:	7120      	strb	r0, [r4, #4]
    cf14:	79a8      	ldrb	r0, [r5, #6]
    cf16:	7160      	strb	r0, [r4, #5]
    cf18:	88e8      	ldrh	r0, [r5, #6]
    cf1a:	0a00      	lsrs	r0, r0, #8
    cf1c:	71a0      	strb	r0, [r4, #6]
    cf1e:	7a28      	ldrb	r0, [r5, #8]
    cf20:	71e0      	strb	r0, [r4, #7]
    cf22:	8928      	ldrh	r0, [r5, #8]
    cf24:	0a00      	lsrs	r0, r0, #8
    cf26:	7220      	strb	r0, [r4, #8]
    cf28:	7aa8      	ldrb	r0, [r5, #10]
    cf2a:	7260      	strb	r0, [r4, #9]
    cf2c:	8968      	ldrh	r0, [r5, #10]
    cf2e:	0a00      	lsrs	r0, r0, #8
    cf30:	72a0      	strb	r0, [r4, #10]
    cf32:	7b28      	ldrb	r0, [r5, #12]
    cf34:	72e0      	strb	r0, [r4, #11]
    cf36:	89a8      	ldrh	r0, [r5, #12]
    cf38:	0a00      	lsrs	r0, r0, #8
    cf3a:	7320      	strb	r0, [r4, #12]
    cf3c:	200b      	movs	r0, #11
    cf3e:	e797      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf40:	7021      	strb	r1, [r4, #0]
    cf42:	20a3      	movs	r0, #163	; 0xa3
    cf44:	70a0      	strb	r0, [r4, #2]
    cf46:	7928      	ldrb	r0, [r5, #4]
    cf48:	70e0      	strb	r0, [r4, #3]
    cf4a:	88a8      	ldrh	r0, [r5, #4]
    cf4c:	0a00      	lsrs	r0, r0, #8
    cf4e:	7120      	strb	r0, [r4, #4]
    cf50:	79a8      	ldrb	r0, [r5, #6]
    cf52:	7160      	strb	r0, [r4, #5]
    cf54:	79e8      	ldrb	r0, [r5, #7]
    cf56:	71a0      	strb	r0, [r4, #6]
    cf58:	2005      	movs	r0, #5
    cf5a:	e789      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf5c:	7026      	strb	r6, [r4, #0]
    cf5e:	2013      	movs	r0, #19
    cf60:	70a0      	strb	r0, [r4, #2]
    cf62:	7928      	ldrb	r0, [r5, #4]
    cf64:	70e0      	strb	r0, [r4, #3]
    cf66:	7968      	ldrb	r0, [r5, #5]
    cf68:	7120      	strb	r0, [r4, #4]
    cf6a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cf6e:	f8c4 0005 	str.w	r0, [r4, #5]
    cf72:	8968      	ldrh	r0, [r5, #10]
    cf74:	f8a4 0009 	strh.w	r0, [r4, #9]
    cf78:	200a      	movs	r0, #10
    cf7a:	e779      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf7c:	7021      	strb	r1, [r4, #0]
    cf7e:	20a4      	movs	r0, #164	; 0xa4
    cf80:	70a0      	strb	r0, [r4, #2]
    cf82:	7928      	ldrb	r0, [r5, #4]
    cf84:	70e0      	strb	r0, [r4, #3]
    cf86:	88a8      	ldrh	r0, [r5, #4]
    cf88:	0a00      	lsrs	r0, r0, #8
    cf8a:	7120      	strb	r0, [r4, #4]
    cf8c:	79a8      	ldrb	r0, [r5, #6]
    cf8e:	7160      	strb	r0, [r4, #5]
    cf90:	79e8      	ldrb	r0, [r5, #7]
    cf92:	71a0      	strb	r0, [r4, #6]
    cf94:	2007      	movs	r0, #7
    cf96:	e76b      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf98:	7021      	strb	r1, [r4, #0]
    cf9a:	2080      	movs	r0, #128	; 0x80
    cf9c:	70a0      	strb	r0, [r4, #2]
    cf9e:	88a9      	ldrh	r1, [r5, #4]
    cfa0:	f8a4 1003 	strh.w	r1, [r4, #3]
    cfa4:	88e9      	ldrh	r1, [r5, #6]
    cfa6:	f8a4 1005 	strh.w	r1, [r4, #5]
    cfaa:	7a29      	ldrb	r1, [r5, #8]
    cfac:	71e1      	strb	r1, [r4, #7]
    cfae:	8969      	ldrh	r1, [r5, #10]
    cfb0:	8121      	strh	r1, [r4, #8]
    cfb2:	89a9      	ldrh	r1, [r5, #12]
    cfb4:	8161      	strh	r1, [r4, #10]
    cfb6:	89e9      	ldrh	r1, [r5, #14]
    cfb8:	81a1      	strh	r1, [r4, #12]
    cfba:	7c29      	ldrb	r1, [r5, #16]
    cfbc:	f001 0101 	and.w	r1, r1, #1
    cfc0:	73a1      	strb	r1, [r4, #14]
    cfc2:	200d      	movs	r0, #13
    cfc4:	e754      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>

0000cfc6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    cfc6:	223e      	movs	r2, #62	; 0x3e
    cfc8:	7002      	strb	r2, [r0, #0]
    cfca:	2201      	movs	r2, #1
    cfcc:	7082      	strb	r2, [r0, #2]
    cfce:	790a      	ldrb	r2, [r1, #4]
    cfd0:	70c2      	strb	r2, [r0, #3]
    cfd2:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cfd6:	7102      	strb	r2, [r0, #4]
    cfd8:	880a      	ldrh	r2, [r1, #0]
    cfda:	0a12      	lsrs	r2, r2, #8
    cfdc:	7142      	strb	r2, [r0, #5]
    cfde:	788a      	ldrb	r2, [r1, #2]
    cfe0:	7182      	strb	r2, [r0, #6]
    cfe2:	78ca      	ldrb	r2, [r1, #3]
    cfe4:	71c2      	strb	r2, [r0, #7]
    cfe6:	684a      	ldr	r2, [r1, #4]
    cfe8:	6082      	str	r2, [r0, #8]
    cfea:	890a      	ldrh	r2, [r1, #8]
    cfec:	8182      	strh	r2, [r0, #12]
    cfee:	7d8a      	ldrb	r2, [r1, #22]
    cff0:	7382      	strb	r2, [r0, #14]
    cff2:	8aca      	ldrh	r2, [r1, #22]
    cff4:	0a12      	lsrs	r2, r2, #8
    cff6:	73c2      	strb	r2, [r0, #15]
    cff8:	7e0a      	ldrb	r2, [r1, #24]
    cffa:	7402      	strb	r2, [r0, #16]
    cffc:	8b0a      	ldrh	r2, [r1, #24]
    cffe:	0a12      	lsrs	r2, r2, #8
    d000:	7442      	strb	r2, [r0, #17]
    d002:	7e8a      	ldrb	r2, [r1, #26]
    d004:	7482      	strb	r2, [r0, #18]
    d006:	8b4a      	ldrh	r2, [r1, #26]
    d008:	0a12      	lsrs	r2, r2, #8
    d00a:	74c2      	strb	r2, [r0, #19]
    d00c:	7f09      	ldrb	r1, [r1, #28]
    d00e:	7501      	strb	r1, [r0, #20]
    d010:	2113      	movs	r1, #19
    d012:	7041      	strb	r1, [r0, #1]
    d014:	4608      	mov	r0, r1
    d016:	4770      	bx	lr
    d018:	223e      	movs	r2, #62	; 0x3e
    d01a:	7002      	strb	r2, [r0, #0]
    d01c:	220a      	movs	r2, #10
    d01e:	7082      	strb	r2, [r0, #2]
    d020:	790a      	ldrb	r2, [r1, #4]
    d022:	70c2      	strb	r2, [r0, #3]
    d024:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d028:	7102      	strb	r2, [r0, #4]
    d02a:	880a      	ldrh	r2, [r1, #0]
    d02c:	0a12      	lsrs	r2, r2, #8
    d02e:	7142      	strb	r2, [r0, #5]
    d030:	788a      	ldrb	r2, [r1, #2]
    d032:	7182      	strb	r2, [r0, #6]
    d034:	78ca      	ldrb	r2, [r1, #3]
    d036:	71c2      	strb	r2, [r0, #7]
    d038:	684a      	ldr	r2, [r1, #4]
    d03a:	6082      	str	r2, [r0, #8]
    d03c:	890a      	ldrh	r2, [r1, #8]
    d03e:	8182      	strh	r2, [r0, #12]
    d040:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d044:	f8c0 200e 	str.w	r2, [r0, #14]
    d048:	89ca      	ldrh	r2, [r1, #14]
    d04a:	8242      	strh	r2, [r0, #18]
    d04c:	690a      	ldr	r2, [r1, #16]
    d04e:	6142      	str	r2, [r0, #20]
    d050:	8a8a      	ldrh	r2, [r1, #20]
    d052:	8302      	strh	r2, [r0, #24]
    d054:	7d8a      	ldrb	r2, [r1, #22]
    d056:	7682      	strb	r2, [r0, #26]
    d058:	8aca      	ldrh	r2, [r1, #22]
    d05a:	0a12      	lsrs	r2, r2, #8
    d05c:	76c2      	strb	r2, [r0, #27]
    d05e:	7e0a      	ldrb	r2, [r1, #24]
    d060:	7702      	strb	r2, [r0, #28]
    d062:	8b0a      	ldrh	r2, [r1, #24]
    d064:	0a12      	lsrs	r2, r2, #8
    d066:	7742      	strb	r2, [r0, #29]
    d068:	7e8a      	ldrb	r2, [r1, #26]
    d06a:	7782      	strb	r2, [r0, #30]
    d06c:	8b4a      	ldrh	r2, [r1, #26]
    d06e:	0a12      	lsrs	r2, r2, #8
    d070:	77c2      	strb	r2, [r0, #31]
    d072:	7f09      	ldrb	r1, [r1, #28]
    d074:	f880 1020 	strb.w	r1, [r0, #32]
    d078:	211f      	movs	r1, #31
    d07a:	7041      	strb	r1, [r0, #1]
    d07c:	4608      	mov	r0, r1
    d07e:	4770      	bx	lr
    d080:	094a      	lsrs	r2, r1, #5
    d082:	f001 011f 	and.w	r1, r1, #31
    d086:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d08a:	40c8      	lsrs	r0, r1
    d08c:	f000 0001 	and.w	r0, r0, #1
    d090:	4770      	bx	lr

0000d092 <sdc_hci_data_put>:
    d092:	b510      	push	{r4, lr}
    d094:	f06f 0415 	mvn.w	r4, #21
    d098:	b120      	cbz	r0, d0a4 <sdc_hci_data_put+0x12>
    d09a:	f7ff fd73 	bl	cb84 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d09e:	b108      	cbz	r0, d0a4 <sdc_hci_data_put+0x12>
    d0a0:	2000      	movs	r0, #0
    d0a2:	bd10      	pop	{r4, pc}
    d0a4:	4620      	mov	r0, r4
    d0a6:	bd10      	pop	{r4, pc}

0000d0a8 <sdc_hci_get>:
    d0a8:	b510      	push	{r4, lr}
    d0aa:	460c      	mov	r4, r1
    d0ac:	b130      	cbz	r0, d0bc <sdc_hci_get+0x14>
    d0ae:	b12c      	cbz	r4, d0bc <sdc_hci_get+0x14>
    d0b0:	f7f4 fa70 	bl	1594 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d0b4:	b128      	cbz	r0, d0c2 <sdc_hci_get+0x1a>
    d0b6:	7020      	strb	r0, [r4, #0]
    d0b8:	2000      	movs	r0, #0
    d0ba:	bd10      	pop	{r4, pc}
    d0bc:	f06f 0015 	mvn.w	r0, #21
    d0c0:	bd10      	pop	{r4, pc}
    d0c2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d0c6:	bd10      	pop	{r4, pc}

0000d0c8 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d0c8:	f003 b910 	b.w	102ec <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d0cc <sdc_hci_cmd_cb_read_transmit_power_level>:
    d0cc:	f003 b92b 	b.w	10326 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d0d0 <sdc_hci_cmd_cb_set_event_mask>:
    d0d0:	b510      	push	{r4, lr}
    d0d2:	f7f4 fb09 	bl	16e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d0d6:	2000      	movs	r0, #0
    d0d8:	bd10      	pop	{r4, pc}

0000d0da <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d0da:	b510      	push	{r4, lr}
    d0dc:	f7f4 fb16 	bl	170c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d0e0:	2000      	movs	r0, #0
    d0e2:	bd10      	pop	{r4, pc}

0000d0e4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d0e4:	f003 b940 	b.w	10368 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d0e8 <sdc_hci_cmd_vs_conn_event_extend>:
    d0e8:	b508      	push	{r3, lr}
    d0ea:	7800      	ldrb	r0, [r0, #0]
    d0ec:	f88d 0000 	strb.w	r0, [sp]
    d0f0:	4668      	mov	r0, sp
    d0f2:	f003 f81c 	bl	1012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d0f6:	bd08      	pop	{r3, pc}

0000d0f8 <sdc_hci_cmd_vs_conn_update>:
    d0f8:	2001      	movs	r0, #1
    d0fa:	4770      	bx	lr

0000d0fc <sdc_hci_cmd_vs_event_length_set>:
    d0fc:	f7fa b8c0 	b.w	7280 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d100 <sdc_hci_cmd_vs_llpm_mode_set>:
    d100:	2001      	movs	r0, #1
    d102:	4770      	bx	lr

0000d104 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d104:	7881      	ldrb	r1, [r0, #2]
    d106:	8800      	ldrh	r0, [r0, #0]
    d108:	f002 bfc1 	b.w	1008e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d10c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d10c:	7800      	ldrb	r0, [r0, #0]
    d10e:	b100      	cbz	r0, d112 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d110:	2001      	movs	r0, #1
    d112:	f002 bfb7 	b.w	10084 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d116 <sdc_hci_cmd_vs_set_adv_randomness>:
    d116:	f002 bfe4 	b.w	100e2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d11a <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d11a:	b510      	push	{r4, lr}
    d11c:	4604      	mov	r4, r0
    d11e:	f7ff fa31 	bl	c584 <mpsl_temperature_get>
    d122:	17c1      	asrs	r1, r0, #31
    d124:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d128:	1080      	asrs	r0, r0, #2
    d12a:	287f      	cmp	r0, #127	; 0x7f
    d12c:	dd01      	ble.n	d132 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d12e:	207f      	movs	r0, #127	; 0x7f
    d130:	e004      	b.n	d13c <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d132:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d136:	4288      	cmp	r0, r1
    d138:	da00      	bge.n	d13c <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d13a:	4608      	mov	r0, r1
    d13c:	7020      	strb	r0, [r4, #0]
    d13e:	2000      	movs	r0, #0
    d140:	bd10      	pop	{r4, pc}

0000d142 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d142:	b570      	push	{r4, r5, r6, lr}
    d144:	4605      	mov	r5, r0
    d146:	2210      	movs	r2, #16
    d148:	2100      	movs	r1, #0
    d14a:	f003 feab 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d14e:	2210      	movs	r2, #16
    d150:	2100      	movs	r1, #0
    d152:	f105 0010 	add.w	r0, r5, #16
    d156:	f003 fea5 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d15a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d15e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d162:	1c40      	adds	r0, r0, #1
    d164:	d10b      	bne.n	d17e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d166:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d16a:	1c40      	adds	r0, r0, #1
    d16c:	d107      	bne.n	d17e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d16e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d172:	1c40      	adds	r0, r0, #1
    d174:	d103      	bne.n	d17e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d176:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d17a:	1c40      	adds	r0, r0, #1
    d17c:	d00b      	beq.n	d196 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d17e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d182:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d186:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d18a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d18e:	612a      	str	r2, [r5, #16]
    d190:	6168      	str	r0, [r5, #20]
    d192:	61a9      	str	r1, [r5, #24]
    d194:	61eb      	str	r3, [r5, #28]
    d196:	2000      	movs	r0, #0
    d198:	f7f4 ffcc 	bl	2134 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d19c:	b918      	cbnz	r0, d1a6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d19e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d1a2:	07c0      	lsls	r0, r0, #31
    d1a4:	d118      	bne.n	d1d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1a6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d1aa:	1c40      	adds	r0, r0, #1
    d1ac:	d10b      	bne.n	d1c6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1ae:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d1b2:	1c40      	adds	r0, r0, #1
    d1b4:	d107      	bne.n	d1c6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1b6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d1ba:	1c40      	adds	r0, r0, #1
    d1bc:	d103      	bne.n	d1c6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1be:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d1c2:	1c40      	adds	r0, r0, #1
    d1c4:	d008      	beq.n	d1d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1c6:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d1ca:	6861      	ldr	r1, [r4, #4]
    d1cc:	68a2      	ldr	r2, [r4, #8]
    d1ce:	68e3      	ldr	r3, [r4, #12]
    d1d0:	6028      	str	r0, [r5, #0]
    d1d2:	6069      	str	r1, [r5, #4]
    d1d4:	60aa      	str	r2, [r5, #8]
    d1d6:	60eb      	str	r3, [r5, #12]
    d1d8:	2000      	movs	r0, #0
    d1da:	bd70      	pop	{r4, r5, r6, pc}

0000d1dc <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d1dc:	b538      	push	{r3, r4, r5, lr}
    d1de:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d1e2:	4604      	mov	r4, r0
    d1e4:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d1e8:	1c40      	adds	r0, r0, #1
    d1ea:	d105      	bne.n	d1f8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d1ec:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d1f0:	43c0      	mvns	r0, r0
    d1f2:	0400      	lsls	r0, r0, #16
    d1f4:	0c00      	lsrs	r0, r0, #16
    d1f6:	d03e      	beq.n	d276 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d1f8:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d1fc:	07c0      	lsls	r0, r0, #31
    d1fe:	d03a      	beq.n	d276 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d200:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d204:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d208:	f8ad 1000 	strh.w	r1, [sp]
    d20c:	f8c4 0001 	str.w	r0, [r4, #1]
    d210:	f8bd 0000 	ldrh.w	r0, [sp]
    d214:	f8a4 0005 	strh.w	r0, [r4, #5]
    d218:	79a0      	ldrb	r0, [r4, #6]
    d21a:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d21e:	71a0      	strb	r0, [r4, #6]
    d220:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d224:	1c40      	adds	r0, r0, #1
    d226:	d00f      	beq.n	d248 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d228:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d22c:	1c40      	adds	r0, r0, #1
    d22e:	d00b      	beq.n	d248 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d230:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d234:	1c40      	adds	r0, r0, #1
    d236:	d007      	beq.n	d248 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d238:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d23c:	1c40      	adds	r0, r0, #1
    d23e:	d003      	beq.n	d248 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d240:	2000      	movs	r0, #0
    d242:	f7f4 ff77 	bl	2134 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d246:	b140      	cbz	r0, d25a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d248:	2210      	movs	r2, #16
    d24a:	2100      	movs	r1, #0
    d24c:	1de0      	adds	r0, r4, #7
    d24e:	f003 fe29 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d252:	2001      	movs	r0, #1
    d254:	7020      	strb	r0, [r4, #0]
    d256:	2000      	movs	r0, #0
    d258:	bd38      	pop	{r3, r4, r5, pc}
    d25a:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d25e:	6869      	ldr	r1, [r5, #4]
    d260:	68a8      	ldr	r0, [r5, #8]
    d262:	68eb      	ldr	r3, [r5, #12]
    d264:	f8c4 2007 	str.w	r2, [r4, #7]
    d268:	f8c4 100b 	str.w	r1, [r4, #11]
    d26c:	f8c4 000f 	str.w	r0, [r4, #15]
    d270:	f8c4 3013 	str.w	r3, [r4, #19]
    d274:	e7ed      	b.n	d252 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d276:	2000      	movs	r0, #0
    d278:	e7ec      	b.n	d254 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d27a <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d27a:	f002 bf47 	b.w	1010c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d27e <sdc_hci_cmd_ip_read_bd_addr>:
    d27e:	f003 b846 	b.w	1030e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d282 <sdc_hci_cmd_ip_read_local_version_information>:
    d282:	f7fa b80b 	b.w	729c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d286 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d286:	f002 bcda 	b.w	fc3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d28a <sdc_hci_cmd_le_clear_filter_accept_list>:
    d28a:	f002 bcef 	b.w	fc6c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d28e <sdc_hci_cmd_le_encrypt>:
    d28e:	f002 bcf7 	b.w	fc80 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d292 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d292:	8802      	ldrh	r2, [r0, #0]
    d294:	800a      	strh	r2, [r1, #0]
    d296:	f002 bcfc 	b.w	fc92 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d29a <sdc_hci_cmd_le_long_term_key_request_reply>:
    d29a:	8802      	ldrh	r2, [r0, #0]
    d29c:	800a      	strh	r2, [r1, #0]
    d29e:	f002 bd11 	b.w	fcc4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d2a2 <sdc_hci_cmd_le_rand>:
    d2a2:	f002 bd39 	b.w	fd18 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d2a6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d2a6:	f002 bd3d 	b.w	fd24 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d2aa <sdc_hci_cmd_le_read_buffer_size>:
    d2aa:	f7f9 bef1 	b.w	7090 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d2ae <sdc_hci_cmd_le_read_channel_map>:
    d2ae:	f7f9 bef9 	b.w	70a4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d2b2 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d2b2:	f002 bd77 	b.w	fda4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d2b6 <sdc_hci_cmd_le_read_max_data_length>:
    d2b6:	f002 bd40 	b.w	fd3a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d2ba <sdc_hci_cmd_le_read_phy>:
    d2ba:	f7f9 bf1b 	b.w	70f4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d2be <sdc_hci_cmd_le_read_remote_features>:
    d2be:	f002 bd45 	b.w	fd4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d2c2 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d2c2:	f7f9 bf3d 	b.w	7140 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d2c6 <sdc_hci_cmd_le_read_transmit_power>:
    d2c6:	f002 bd5d 	b.w	fd84 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d2ca <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d2ca:	f002 bd6f 	b.w	fdac <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d2ce <sdc_hci_cmd_le_set_adv_data>:
    d2ce:	f002 bd82 	b.w	fdd6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d2d2 <sdc_hci_cmd_le_set_adv_enable>:
    d2d2:	f002 bd95 	b.w	fe00 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d2d6 <sdc_hci_cmd_le_set_adv_params>:
    d2d6:	f002 bdc6 	b.w	fe66 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d2da <sdc_hci_cmd_le_set_data_length>:
    d2da:	f002 be59 	b.w	ff90 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d2de <sdc_hci_cmd_le_set_data_related_address_changes>:
    d2de:	f002 be77 	b.w	ffd0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d2e2 <sdc_hci_cmd_le_set_default_phy>:
    d2e2:	f7f9 bf37 	b.w	7154 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d2e6 <sdc_hci_cmd_le_set_event_mask>:
    d2e6:	b510      	push	{r4, lr}
    d2e8:	f7f4 f9ec 	bl	16c4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d2ec:	2000      	movs	r0, #0
    d2ee:	bd10      	pop	{r4, pc}

0000d2f0 <sdc_hci_cmd_le_set_phy>:
    d2f0:	f002 be7b 	b.w	ffea <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d2f4 <sdc_hci_cmd_le_set_random_address>:
    d2f4:	f002 be92 	b.w	1001c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d2f8 <sdc_hci_cmd_le_set_scan_response_data>:
    d2f8:	f002 be9e 	b.w	10038 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d2fc <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d2fc:	f002 beb1 	b.w	10062 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d300 <sdc_hci_cmd_lc_disconnect>:
    d300:	f002 bc4f 	b.w	fba2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d304 <sdc_hci_cmd_lc_read_remote_version_information>:
    d304:	f7f9 bfd4 	b.w	72b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d308:	b570      	push	{r4, r5, r6, lr}
    d30a:	880b      	ldrh	r3, [r1, #0]
    d30c:	7cc4      	ldrb	r4, [r0, #19]
    d30e:	f100 0518 	add.w	r5, r0, #24
    d312:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d316:	8802      	ldrh	r2, [r0, #0]
    d318:	4435      	add	r5, r6
    d31a:	1d64      	adds	r4, r4, #5
    d31c:	882d      	ldrh	r5, [r5, #0]
    d31e:	4422      	add	r2, r4
    d320:	b292      	uxth	r2, r2
    d322:	4425      	add	r5, r4
    d324:	1e54      	subs	r4, r2, #1
    d326:	442c      	add	r4, r5
    d328:	fb94 f4f2 	sdiv	r4, r4, r2
    d32c:	fb02 6204 	mla	r2, r2, r4, r6
    d330:	8840      	ldrh	r0, [r0, #2]
    d332:	b292      	uxth	r2, r2
    d334:	4290      	cmp	r0, r2
    d336:	d903      	bls.n	d340 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d338:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d33c:	4310      	orrs	r0, r2
    d33e:	e002      	b.n	d346 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d340:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d344:	4398      	bics	r0, r3
    d346:	8008      	strh	r0, [r1, #0]
    d348:	bd70      	pop	{r4, r5, r6, pc}
    d34a:	0442      	lsls	r2, r0, #17
    d34c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d350:	d107      	bne.n	d362 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d352:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d356:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d35a:	4288      	cmp	r0, r1
    d35c:	d001      	beq.n	d362 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d35e:	2001      	movs	r0, #1
    d360:	4770      	bx	lr
    d362:	2000      	movs	r0, #0
    d364:	4770      	bx	lr

0000d366 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d366:	8881      	ldrh	r1, [r0, #4]
    d368:	88c0      	ldrh	r0, [r0, #6]
    d36a:	4288      	cmp	r0, r1
    d36c:	d101      	bne.n	d372 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d36e:	2001      	movs	r0, #1
    d370:	4770      	bx	lr
    d372:	2000      	movs	r0, #0
    d374:	4770      	bx	lr

0000d376 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d37a:	460f      	mov	r7, r1
    d37c:	4604      	mov	r4, r0
    d37e:	f100 0118 	add.w	r1, r0, #24
    d382:	8880      	ldrh	r0, [r0, #4]
    d384:	2600      	movs	r6, #0
    d386:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d38a:	1845      	adds	r5, r0, r1
    d38c:	603e      	str	r6, [r7, #0]
    d38e:	89e0      	ldrh	r0, [r4, #14]
    d390:	2800      	cmp	r0, #0
    d392:	d016      	beq.n	d3c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d394:	8961      	ldrh	r1, [r4, #10]
    d396:	4408      	add	r0, r1
    d398:	b280      	uxth	r0, r0
    d39a:	8160      	strh	r0, [r4, #10]
    d39c:	8829      	ldrh	r1, [r5, #0]
    d39e:	4288      	cmp	r0, r1
    d3a0:	d905      	bls.n	d3ae <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d3a2:	f240 1151 	movw	r1, #337	; 0x151
    d3a6:	f04f 0014 	mov.w	r0, #20
    d3aa:	f7f3 fff9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3ae:	d106      	bne.n	d3be <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d3b0:	f104 0104 	add.w	r1, r4, #4
    d3b4:	4620      	mov	r0, r4
    d3b6:	f7ff ffa7 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3ba:	8166      	strh	r6, [r4, #10]
    d3bc:	603d      	str	r5, [r7, #0]
    d3be:	81e6      	strh	r6, [r4, #14]
    d3c0:	2001      	movs	r0, #1
    d3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d3c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3ca:	4604      	mov	r4, r0
    d3cc:	f100 0318 	add.w	r3, r0, #24
    d3d0:	88c0      	ldrh	r0, [r0, #6]
    d3d2:	460e      	mov	r6, r1
    d3d4:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d3d8:	8a20      	ldrh	r0, [r4, #16]
    d3da:	19d9      	adds	r1, r3, r7
    d3dc:	b108      	cbz	r0, d3e2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d3de:	42b0      	cmp	r0, r6
    d3e0:	d202      	bcs.n	d3e8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d3e2:	2000      	movs	r0, #0
    d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3e8:	89a0      	ldrh	r0, [r4, #12]
    d3ea:	2500      	movs	r5, #0
    d3ec:	b140      	cbz	r0, d400 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d3ee:	f8b1 c000 	ldrh.w	ip, [r1]
    d3f2:	4560      	cmp	r0, ip
    d3f4:	d006      	beq.n	d404 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d3f6:	f44f 7101 	mov.w	r1, #516	; 0x204
    d3fa:	2014      	movs	r0, #20
    d3fc:	f7f3 ffd0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d400:	800d      	strh	r5, [r1, #0]
    d402:	e00e      	b.n	d422 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d404:	f894 c013 	ldrb.w	ip, [r4, #19]
    d408:	4418      	add	r0, r3
    d40a:	f10c 0c05 	add.w	ip, ip, #5
    d40e:	44bc      	add	ip, r7
    d410:	4460      	add	r0, ip
    d412:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d416:	f820 cc03 	strh.w	ip, [r0, #-3]
    d41a:	f894 c016 	ldrb.w	ip, [r4, #22]
    d41e:	f800 cc01 	strb.w	ip, [r0, #-1]
    d422:	89a0      	ldrh	r0, [r4, #12]
    d424:	4430      	add	r0, r6
    d426:	81a0      	strh	r0, [r4, #12]
    d428:	8808      	ldrh	r0, [r1, #0]
    d42a:	4430      	add	r0, r6
    d42c:	8008      	strh	r0, [r1, #0]
    d42e:	b12a      	cbz	r2, d43c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d430:	1da1      	adds	r1, r4, #6
    d432:	4620      	mov	r0, r4
    d434:	f7ff ff68 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d438:	81a5      	strh	r5, [r4, #12]
    d43a:	e00a      	b.n	d452 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d43c:	7ce0      	ldrb	r0, [r4, #19]
    d43e:	89a1      	ldrh	r1, [r4, #12]
    d440:	1d40      	adds	r0, r0, #5
    d442:	4438      	add	r0, r7
    d444:	4419      	add	r1, r3
    d446:	4408      	add	r0, r1
    d448:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d44c:	82a1      	strh	r1, [r4, #20]
    d44e:	7880      	ldrb	r0, [r0, #2]
    d450:	75a0      	strb	r0, [r4, #22]
    d452:	8225      	strh	r5, [r4, #16]
    d454:	2001      	movs	r0, #1
    d456:	e7c5      	b.n	d3e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d458 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d458:	1c80      	adds	r0, r0, #2
    d45a:	4770      	bx	lr

0000d45c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d45c:	b510      	push	{r4, lr}
    d45e:	4604      	mov	r4, r0
    d460:	88c0      	ldrh	r0, [r0, #6]
    d462:	88a1      	ldrh	r1, [r4, #4]
    d464:	4281      	cmp	r1, r0
    d466:	d003      	beq.n	d470 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d468:	8960      	ldrh	r0, [r4, #10]
    d46a:	b908      	cbnz	r0, d470 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d46c:	89e0      	ldrh	r0, [r4, #14]
    d46e:	b108      	cbz	r0, d474 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d470:	2000      	movs	r0, #0
    d472:	bd10      	pop	{r4, pc}
    d474:	1d21      	adds	r1, r4, #4
    d476:	4620      	mov	r0, r4
    d478:	f7ff ff46 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d47c:	2000      	movs	r0, #0
    d47e:	81e0      	strh	r0, [r4, #14]
    d480:	2001      	movs	r0, #1
    d482:	bd10      	pop	{r4, pc}

0000d484 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d484:	b510      	push	{r4, lr}
    d486:	4604      	mov	r4, r0
    d488:	f100 0218 	add.w	r2, r0, #24
    d48c:	88c0      	ldrh	r0, [r0, #6]
    d48e:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d492:	4402      	add	r2, r0
    d494:	8820      	ldrh	r0, [r4, #0]
    d496:	2845      	cmp	r0, #69	; 0x45
    d498:	d200      	bcs.n	d49c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d49a:	2045      	movs	r0, #69	; 0x45
    d49c:	4288      	cmp	r0, r1
    d49e:	d204      	bcs.n	d4aa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d4a0:	f44f 7182 	mov.w	r1, #260	; 0x104
    d4a4:	2014      	movs	r0, #20
    d4a6:	f7f3 ff7b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4aa:	7ca0      	ldrb	r0, [r4, #18]
    d4ac:	2800      	cmp	r0, #0
    d4ae:	d003      	beq.n	d4b8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d4b0:	8810      	ldrh	r0, [r2, #0]
    d4b2:	4288      	cmp	r0, r1
    d4b4:	d201      	bcs.n	d4ba <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d4b6:	2000      	movs	r0, #0
    d4b8:	bd10      	pop	{r4, pc}
    d4ba:	8011      	strh	r1, [r2, #0]
    d4bc:	1da1      	adds	r1, r4, #6
    d4be:	4620      	mov	r0, r4
    d4c0:	f7ff ff22 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4c4:	2000      	movs	r0, #0
    d4c6:	74a0      	strb	r0, [r4, #18]
    d4c8:	2001      	movs	r0, #1
    d4ca:	bd10      	pop	{r4, pc}

0000d4cc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d4cc:	b510      	push	{r4, lr}
    d4ce:	88c4      	ldrh	r4, [r0, #6]
    d4d0:	8883      	ldrh	r3, [r0, #4]
    d4d2:	4601      	mov	r1, r0
    d4d4:	f100 0218 	add.w	r2, r0, #24
    d4d8:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d4dc:	4410      	add	r0, r2
    d4de:	42a3      	cmp	r3, r4
    d4e0:	d002      	beq.n	d4e8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d4e2:	8949      	ldrh	r1, [r1, #10]
    d4e4:	2900      	cmp	r1, #0
    d4e6:	d000      	beq.n	d4ea <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d4e8:	2000      	movs	r0, #0
    d4ea:	bd10      	pop	{r4, pc}

0000d4ec <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d4ec:	8803      	ldrh	r3, [r0, #0]
    d4ee:	2b45      	cmp	r3, #69	; 0x45
    d4f0:	d200      	bcs.n	d4f4 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d4f2:	2345      	movs	r3, #69	; 0x45
    d4f4:	8013      	strh	r3, [r2, #0]
    d4f6:	88c2      	ldrh	r2, [r0, #6]
    d4f8:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d4fc:	f100 0218 	add.w	r2, r0, #24
    d500:	441a      	add	r2, r3
    d502:	600a      	str	r2, [r1, #0]
    d504:	8980      	ldrh	r0, [r0, #12]
    d506:	4770      	bx	lr

0000d508 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d508:	7cc0      	ldrb	r0, [r0, #19]
    d50a:	1d40      	adds	r0, r0, #5
    d50c:	4408      	add	r0, r1
    d50e:	1ec0      	subs	r0, r0, #3
    d510:	6010      	str	r0, [r2, #0]
    d512:	8808      	ldrh	r0, [r1, #0]
    d514:	4770      	bx	lr

0000d516 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d51a:	460e      	mov	r6, r1
    d51c:	88c1      	ldrh	r1, [r0, #6]
    d51e:	8902      	ldrh	r2, [r0, #8]
    d520:	4604      	mov	r4, r0
    d522:	f100 0818 	add.w	r8, r0, #24
    d526:	8800      	ldrh	r0, [r0, #0]
    d528:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d52c:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d530:	2845      	cmp	r0, #69	; 0x45
    d532:	d200      	bcs.n	d536 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d534:	2045      	movs	r0, #69	; 0x45
    d536:	42b0      	cmp	r0, r6
    d538:	d203      	bcs.n	d542 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d53a:	21c6      	movs	r1, #198	; 0xc6
    d53c:	2014      	movs	r0, #20
    d53e:	f7f3 ff2f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d542:	4610      	mov	r0, r2
    d544:	f7ff ff01 	bl	d34a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d548:	b110      	cbz	r0, d550 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d54a:	2000      	movs	r0, #0
    d54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d550:	42af      	cmp	r7, r5
    d552:	d908      	bls.n	d566 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d554:	7ce1      	ldrb	r1, [r4, #19]
    d556:	1b78      	subs	r0, r7, r5
    d558:	1a40      	subs	r0, r0, r1
    d55a:	1f40      	subs	r0, r0, #5
    d55c:	4286      	cmp	r6, r0
    d55e:	dd02      	ble.n	d566 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d560:	2000      	movs	r0, #0
    d562:	74a0      	strb	r0, [r4, #18]
    d564:	e7f1      	b.n	d54a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d566:	eb08 0005 	add.w	r0, r8, r5
    d56a:	2101      	movs	r1, #1
    d56c:	8006      	strh	r6, [r0, #0]
    d56e:	74a1      	strb	r1, [r4, #18]
    d570:	e7ec      	b.n	d54c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d572 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d572:	b538      	push	{r3, r4, r5, lr}
    d574:	88c4      	ldrh	r4, [r0, #6]
    d576:	8881      	ldrh	r1, [r0, #4]
    d578:	f100 0218 	add.w	r2, r0, #24
    d57c:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d580:	441a      	add	r2, r3
    d582:	42a1      	cmp	r1, r4
    d584:	d010      	beq.n	d5a8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d586:	8943      	ldrh	r3, [r0, #10]
    d588:	89c5      	ldrh	r5, [r0, #14]
    d58a:	8812      	ldrh	r2, [r2, #0]
    d58c:	442b      	add	r3, r5
    d58e:	4293      	cmp	r3, r2
    d590:	d308      	bcc.n	d5a4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d592:	f8ad 1000 	strh.w	r1, [sp]
    d596:	4669      	mov	r1, sp
    d598:	f7ff feb6 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d59c:	f8bd 0000 	ldrh.w	r0, [sp]
    d5a0:	42a0      	cmp	r0, r4
    d5a2:	d001      	beq.n	d5a8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d5a4:	2001      	movs	r0, #1
    d5a6:	bd38      	pop	{r3, r4, r5, pc}
    d5a8:	2000      	movs	r0, #0
    d5aa:	bd38      	pop	{r3, r4, r5, pc}

0000d5ac <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d5ac:	b570      	push	{r4, r5, r6, lr}
    d5ae:	88c6      	ldrh	r6, [r0, #6]
    d5b0:	8885      	ldrh	r5, [r0, #4]
    d5b2:	4603      	mov	r3, r0
    d5b4:	f100 0418 	add.w	r4, r0, #24
    d5b8:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d5bc:	4420      	add	r0, r4
    d5be:	42b5      	cmp	r5, r6
    d5c0:	d102      	bne.n	d5c8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d5c2:	2000      	movs	r0, #0
    d5c4:	81d8      	strh	r0, [r3, #14]
    d5c6:	bd70      	pop	{r4, r5, r6, pc}
    d5c8:	8804      	ldrh	r4, [r0, #0]
    d5ca:	895d      	ldrh	r5, [r3, #10]
    d5cc:	7cde      	ldrb	r6, [r3, #19]
    d5ce:	1b64      	subs	r4, r4, r5
    d5d0:	4435      	add	r5, r6
    d5d2:	4428      	add	r0, r5
    d5d4:	880d      	ldrh	r5, [r1, #0]
    d5d6:	b2a4      	uxth	r4, r4
    d5d8:	1c80      	adds	r0, r0, #2
    d5da:	42a5      	cmp	r5, r4
    d5dc:	d900      	bls.n	d5e0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d5de:	800c      	strh	r4, [r1, #0]
    d5e0:	895c      	ldrh	r4, [r3, #10]
    d5e2:	b124      	cbz	r4, d5ee <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d5e4:	2400      	movs	r4, #0
    d5e6:	7014      	strb	r4, [r2, #0]
    d5e8:	8809      	ldrh	r1, [r1, #0]
    d5ea:	81d9      	strh	r1, [r3, #14]
    d5ec:	bd70      	pop	{r4, r5, r6, pc}
    d5ee:	2401      	movs	r4, #1
    d5f0:	e7f9      	b.n	d5e6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d5f2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5f6:	461d      	mov	r5, r3
    d5f8:	4616      	mov	r6, r2
    d5fa:	9f06      	ldr	r7, [sp, #24]
    d5fc:	460b      	mov	r3, r1
    d5fe:	4604      	mov	r4, r0
    d600:	463a      	mov	r2, r7
    d602:	4629      	mov	r1, r5
    d604:	4630      	mov	r0, r6
    d606:	f000 f839 	bl	d67c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d60a:	4283      	cmp	r3, r0
    d60c:	d201      	bcs.n	d612 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d60e:	219e      	movs	r1, #158	; 0x9e
    d610:	e012      	b.n	d638 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d612:	07a0      	lsls	r0, r4, #30
    d614:	d001      	beq.n	d61a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d616:	219f      	movs	r1, #159	; 0x9f
    d618:	e00e      	b.n	d638 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d61a:	2218      	movs	r2, #24
    d61c:	2100      	movs	r1, #0
    d61e:	4620      	mov	r0, r4
    d620:	f003 fc40 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d624:	19a8      	adds	r0, r5, r6
    d626:	1d40      	adds	r0, r0, #5
    d628:	4378      	muls	r0, r7
    d62a:	b280      	uxth	r0, r0
    d62c:	74e5      	strb	r5, [r4, #19]
    d62e:	8060      	strh	r0, [r4, #2]
    d630:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d634:	d903      	bls.n	d63e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d636:	21a4      	movs	r1, #164	; 0xa4
    d638:	2014      	movs	r0, #20
    d63a:	f7f3 feb1 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d63e:	8026      	strh	r6, [r4, #0]
    d640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d644 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d644:	b570      	push	{r4, r5, r6, lr}
    d646:	460b      	mov	r3, r1
    d648:	4604      	mov	r4, r0
    d64a:	f100 0118 	add.w	r1, r0, #24
    d64e:	8902      	ldrh	r2, [r0, #8]
    d650:	8880      	ldrh	r0, [r0, #4]
    d652:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d656:	440d      	add	r5, r1
    d658:	4282      	cmp	r2, r0
    d65a:	d101      	bne.n	d660 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d65c:	2000      	movs	r0, #0
    d65e:	bd70      	pop	{r4, r5, r6, pc}
    d660:	b123      	cbz	r3, d66c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d662:	7ce2      	ldrb	r2, [r4, #19]
    d664:	1ca9      	adds	r1, r5, #2
    d666:	4618      	mov	r0, r3
    d668:	f003 fba2 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d66c:	882d      	ldrh	r5, [r5, #0]
    d66e:	f104 0108 	add.w	r1, r4, #8
    d672:	4620      	mov	r0, r4
    d674:	f7ff fe48 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d678:	4628      	mov	r0, r5
    d67a:	bd70      	pop	{r4, r5, r6, pc}

0000d67c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d67c:	4401      	add	r1, r0
    d67e:	1d49      	adds	r1, r1, #5
    d680:	4351      	muls	r1, r2
    d682:	b28a      	uxth	r2, r1
    d684:	2100      	movs	r1, #0
    d686:	2845      	cmp	r0, #69	; 0x45
    d688:	d202      	bcs.n	d690 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d68a:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d68e:	b281      	uxth	r1, r0
    d690:	3218      	adds	r2, #24
    d692:	1850      	adds	r0, r2, r1
    d694:	b280      	uxth	r0, r0
    d696:	4770      	bx	lr

0000d698 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d69c:	4688      	mov	r8, r1
    d69e:	88c1      	ldrh	r1, [r0, #6]
    d6a0:	4604      	mov	r4, r0
    d6a2:	8900      	ldrh	r0, [r0, #8]
    d6a4:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d6a8:	f104 0518 	add.w	r5, r4, #24
    d6ac:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d6b0:	eb05 0906 	add.w	r9, r5, r6
    d6b4:	f7ff fe49 	bl	d34a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d6b8:	2200      	movs	r2, #0
    d6ba:	b998      	cbnz	r0, d6e4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d6bc:	8820      	ldrh	r0, [r4, #0]
    d6be:	2845      	cmp	r0, #69	; 0x45
    d6c0:	d200      	bcs.n	d6c4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d6c2:	2045      	movs	r0, #69	; 0x45
    d6c4:	42b7      	cmp	r7, r6
    d6c6:	d906      	bls.n	d6d6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d6c8:	7ce3      	ldrb	r3, [r4, #19]
    d6ca:	1bb9      	subs	r1, r7, r6
    d6cc:	1ac9      	subs	r1, r1, r3
    d6ce:	1f49      	subs	r1, r1, #5
    d6d0:	4281      	cmp	r1, r0
    d6d2:	da00      	bge.n	d6d6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d6d4:	4608      	mov	r0, r1
    d6d6:	89a1      	ldrh	r1, [r4, #12]
    d6d8:	b111      	cbz	r1, d6e0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d6da:	f8b9 3000 	ldrh.w	r3, [r9]
    d6de:	1ac0      	subs	r0, r0, r3
    d6e0:	4540      	cmp	r0, r8
    d6e2:	da03      	bge.n	d6ec <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d6e4:	8222      	strh	r2, [r4, #16]
    d6e6:	2000      	movs	r0, #0
    d6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d6ec:	7ce0      	ldrb	r0, [r4, #19]
    d6ee:	4429      	add	r1, r5
    d6f0:	1d40      	adds	r0, r0, #5
    d6f2:	4430      	add	r0, r6
    d6f4:	4408      	add	r0, r1
    d6f6:	f8a4 8010 	strh.w	r8, [r4, #16]
    d6fa:	1ec0      	subs	r0, r0, #3
    d6fc:	e7f4      	b.n	d6e8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d6fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d6fe:	b570      	push	{r4, r5, r6, lr}
    d700:	2300      	movs	r3, #0
    d702:	f1a1 0208 	sub.w	r2, r1, #8
    d706:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d70a:	42a2      	cmp	r2, r4
    d70c:	d304      	bcc.n	d718 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d70e:	f240 11cd 	movw	r1, #461	; 0x1cd
    d712:	2015      	movs	r0, #21
    d714:	f7f3 fe44 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d718:	6802      	ldr	r2, [r0, #0]
    d71a:	b90a      	cbnz	r2, d720 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d71c:	e01e      	b.n	d75c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d71e:	4610      	mov	r0, r2
    d720:	6802      	ldr	r2, [r0, #0]
    d722:	8893      	ldrh	r3, [r2, #4]
    d724:	428b      	cmp	r3, r1
    d726:	d002      	beq.n	d72e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d728:	6813      	ldr	r3, [r2, #0]
    d72a:	2b00      	cmp	r3, #0
    d72c:	d1f7      	bne.n	d71e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d72e:	8894      	ldrh	r4, [r2, #4]
    d730:	4613      	mov	r3, r2
    d732:	428c      	cmp	r4, r1
    d734:	d101      	bne.n	d73a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d736:	6811      	ldr	r1, [r2, #0]
    d738:	e00d      	b.n	d756 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d73a:	f101 0508 	add.w	r5, r1, #8
    d73e:	b2ae      	uxth	r6, r5
    d740:	2500      	movs	r5, #0
    d742:	42b4      	cmp	r4, r6
    d744:	d309      	bcc.n	d75a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d746:	1a64      	subs	r4, r4, r1
    d748:	4411      	add	r1, r2
    d74a:	600d      	str	r5, [r1, #0]
    d74c:	808c      	strh	r4, [r1, #4]
    d74e:	6802      	ldr	r2, [r0, #0]
    d750:	6812      	ldr	r2, [r2, #0]
    d752:	6002      	str	r2, [r0, #0]
    d754:	600a      	str	r2, [r1, #0]
    d756:	6001      	str	r1, [r0, #0]
    d758:	e000      	b.n	d75c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d75a:	2300      	movs	r3, #0
    d75c:	4618      	mov	r0, r3
    d75e:	bd70      	pop	{r4, r5, r6, pc}

0000d760 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d760:	b510      	push	{r4, lr}
    d762:	000c      	movs	r4, r1
    d764:	d004      	beq.n	d770 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d766:	2c08      	cmp	r4, #8
    d768:	d207      	bcs.n	d77a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d76a:	f240 1195 	movw	r1, #405	; 0x195
    d76e:	e00a      	b.n	d786 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d770:	b108      	cbz	r0, d776 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d772:	2100      	movs	r1, #0
    d774:	6001      	str	r1, [r0, #0]
    d776:	2000      	movs	r0, #0
    d778:	bd10      	pop	{r4, pc}
    d77a:	b158      	cbz	r0, d794 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d77c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d780:	d304      	bcc.n	d78c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d782:	f240 11a7 	movw	r1, #423	; 0x1a7
    d786:	2015      	movs	r0, #21
    d788:	f7f3 fe0a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d78c:	b2a1      	uxth	r1, r4
    d78e:	6800      	ldr	r0, [r0, #0]
    d790:	f000 f814 	bl	d7bc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d794:	1d20      	adds	r0, r4, #4
    d796:	bd10      	pop	{r4, pc}

0000d798 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d798:	2100      	movs	r1, #0
    d79a:	6802      	ldr	r2, [r0, #0]
    d79c:	e003      	b.n	d7a6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d79e:	8893      	ldrh	r3, [r2, #4]
    d7a0:	6812      	ldr	r2, [r2, #0]
    d7a2:	4419      	add	r1, r3
    d7a4:	b289      	uxth	r1, r1
    d7a6:	2a00      	cmp	r2, #0
    d7a8:	d1f9      	bne.n	d79e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d7aa:	f000 b807 	b.w	d7bc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d7ae <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d7ae:	2300      	movs	r3, #0
    d7b0:	600b      	str	r3, [r1, #0]
    d7b2:	808a      	strh	r2, [r1, #4]
    d7b4:	6802      	ldr	r2, [r0, #0]
    d7b6:	600a      	str	r2, [r1, #0]
    d7b8:	6001      	str	r1, [r0, #0]
    d7ba:	4770      	bx	lr
    d7bc:	2300      	movs	r3, #0
    d7be:	6043      	str	r3, [r0, #4]
    d7c0:	1d02      	adds	r2, r0, #4
    d7c2:	8101      	strh	r1, [r0, #8]
    d7c4:	6002      	str	r2, [r0, #0]
    d7c6:	4770      	bx	lr

0000d7c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d7c8:	b51c      	push	{r2, r3, r4, lr}
    d7ca:	4604      	mov	r4, r0
    d7cc:	2000      	movs	r0, #0
    d7ce:	9001      	str	r0, [sp, #4]
    d7d0:	9000      	str	r0, [sp, #0]
    d7d2:	f88d 4006 	strb.w	r4, [sp, #6]
    d7d6:	e00a      	b.n	d7ee <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d7d8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d7dc:	4621      	mov	r1, r4
    d7de:	f7f4 f865 	bl	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d7e2:	b120      	cbz	r0, d7ee <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d7e4:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d7e8:	2017      	movs	r0, #23
    d7ea:	f7f3 fdd9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7ee:	4668      	mov	r0, sp
    d7f0:	f7f4 f814 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d7f4:	2800      	cmp	r0, #0
    d7f6:	d0ef      	beq.n	d7d8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d7f8:	bd1c      	pop	{r2, r3, r4, pc}

0000d7fa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d7fa:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d7fe:	3aff      	subs	r2, #255	; 0xff
    d800:	d001      	beq.n	d806 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d802:	2902      	cmp	r1, #2
    d804:	d301      	bcc.n	d80a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d806:	2000      	movs	r0, #0
    d808:	4770      	bx	lr
    d80a:	f7f4 b881 	b.w	1910 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d80e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d812:	3aff      	subs	r2, #255	; 0xff
    d814:	d001      	beq.n	d81a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d816:	2902      	cmp	r1, #2
    d818:	d301      	bcc.n	d81e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d81a:	2000      	movs	r0, #0
    d81c:	4770      	bx	lr
    d81e:	f7f4 b89f 	b.w	1960 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d822:	b510      	push	{r4, lr}
    d824:	4604      	mov	r4, r0
    d826:	f7f4 f8e7 	bl	19f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d82a:	42a0      	cmp	r0, r4
    d82c:	d901      	bls.n	d832 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    d82e:	2001      	movs	r0, #1
    d830:	bd10      	pop	{r4, pc}
    d832:	2000      	movs	r0, #0
    d834:	bd10      	pop	{r4, pc}

0000d836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d836:	b570      	push	{r4, r5, r6, lr}
    d838:	460e      	mov	r6, r1
    d83a:	461d      	mov	r5, r3
    d83c:	4611      	mov	r1, r2
    d83e:	f000 f813 	bl	d868 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d842:	4604      	mov	r4, r0
    d844:	4629      	mov	r1, r5
    d846:	4630      	mov	r0, r6
    d848:	f000 f804 	bl	d854 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d84c:	4420      	add	r0, r4
    d84e:	1d00      	adds	r0, r0, #4
    d850:	b280      	uxth	r0, r0
    d852:	bd70      	pop	{r4, r5, r6, pc}
    d854:	b510      	push	{r4, lr}
    d856:	460a      	mov	r2, r1
    d858:	2109      	movs	r1, #9
    d85a:	f7ff ff0f 	bl	d67c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d85e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d862:	1cc0      	adds	r0, r0, #3
    d864:	4008      	ands	r0, r1
    d866:	bd10      	pop	{r4, pc}
    d868:	b510      	push	{r4, lr}
    d86a:	460a      	mov	r2, r1
    d86c:	210a      	movs	r1, #10
    d86e:	f7ff ff05 	bl	d67c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d872:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d876:	1cc0      	adds	r0, r0, #3
    d878:	4008      	ands	r0, r1
    d87a:	bd10      	pop	{r4, pc}
    d87c:	b109      	cbz	r1, d882 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d87e:	2100      	movs	r1, #0
    d880:	e000      	b.n	d884 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d882:	2102      	movs	r1, #2
    d884:	1843      	adds	r3, r0, r1
    d886:	7d1a      	ldrb	r2, [r3, #20]
    d888:	2a02      	cmp	r2, #2
    d88a:	d008      	beq.n	d89e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d88c:	7d5b      	ldrb	r3, [r3, #21]
    d88e:	2b02      	cmp	r3, #2
    d890:	d009      	beq.n	d8a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d892:	2a03      	cmp	r2, #3
    d894:	d003      	beq.n	d89e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d896:	2b03      	cmp	r3, #3
    d898:	d005      	beq.n	d8a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d89a:	2000      	movs	r0, #0
    d89c:	4770      	bx	lr
    d89e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d8a2:	8b00      	ldrh	r0, [r0, #24]
    d8a4:	4770      	bx	lr
    d8a6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d8aa:	8b40      	ldrh	r0, [r0, #26]
    d8ac:	4770      	bx	lr
    d8ae:	b109      	cbz	r1, d8b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d8b0:	2100      	movs	r1, #0
    d8b2:	e000      	b.n	d8b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d8b4:	2102      	movs	r1, #2
    d8b6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d8ba:	8b01      	ldrh	r1, [r0, #24]
    d8bc:	b911      	cbnz	r1, d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d8be:	8b40      	ldrh	r0, [r0, #26]
    d8c0:	2800      	cmp	r0, #0
    d8c2:	d000      	beq.n	d8c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d8c4:	2001      	movs	r0, #1
    d8c6:	4770      	bx	lr
    d8c8:	b538      	push	{r3, r4, r5, lr}
    d8ca:	7883      	ldrb	r3, [r0, #2]
    d8cc:	f88d 3000 	strb.w	r3, [sp]
    d8d0:	9b00      	ldr	r3, [sp, #0]
    d8d2:	9300      	str	r3, [sp, #0]
    d8d4:	f89d 3000 	ldrb.w	r3, [sp]
    d8d8:	b95b      	cbnz	r3, d8f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d8da:	2400      	movs	r4, #0
    d8dc:	b10a      	cbz	r2, d8e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d8de:	2300      	movs	r3, #0
    d8e0:	e000      	b.n	d8e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d8e2:	2302      	movs	r3, #2
    d8e4:	18c2      	adds	r2, r0, r3
    d8e6:	7d15      	ldrb	r5, [r2, #20]
    d8e8:	2d02      	cmp	r5, #2
    d8ea:	d004      	beq.n	d8f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d8ec:	7d52      	ldrb	r2, [r2, #21]
    d8ee:	2a02      	cmp	r2, #2
    d8f0:	d004      	beq.n	d8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d8f2:	2000      	movs	r0, #0
    d8f4:	bd38      	pop	{r3, r4, r5, pc}
    d8f6:	461a      	mov	r2, r3
    d8f8:	1c5b      	adds	r3, r3, #1
    d8fa:	e000      	b.n	d8fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d8fc:	1c5a      	adds	r2, r3, #1
    d8fe:	b179      	cbz	r1, d920 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d900:	18c5      	adds	r5, r0, r3
    d902:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d906:	752c      	strb	r4, [r5, #20]
    d908:	831c      	strh	r4, [r3, #24]
    d90a:	2303      	movs	r3, #3
    d90c:	1884      	adds	r4, r0, r2
    d90e:	7523      	strb	r3, [r4, #20]
    d910:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d914:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d918:	685b      	ldr	r3, [r3, #4]
    d91a:	600b      	str	r3, [r1, #0]
    d91c:	8b00      	ldrh	r0, [r0, #24]
    d91e:	8088      	strh	r0, [r1, #4]
    d920:	2001      	movs	r0, #1
    d922:	bd38      	pop	{r3, r4, r5, pc}
    d924:	b510      	push	{r4, lr}
    d926:	b109      	cbz	r1, d92c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d928:	2100      	movs	r1, #0
    d92a:	e000      	b.n	d92e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d92c:	2102      	movs	r1, #2
    d92e:	1843      	adds	r3, r0, r1
    d930:	7d1c      	ldrb	r4, [r3, #20]
    d932:	4294      	cmp	r4, r2
    d934:	d103      	bne.n	d93e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d936:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d93a:	8b00      	ldrh	r0, [r0, #24]
    d93c:	bd10      	pop	{r4, pc}
    d93e:	7d5b      	ldrb	r3, [r3, #21]
    d940:	4293      	cmp	r3, r2
    d942:	d103      	bne.n	d94c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d944:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d948:	8b40      	ldrh	r0, [r0, #26]
    d94a:	bd10      	pop	{r4, pc}
    d94c:	2000      	movs	r0, #0
    d94e:	bd10      	pop	{r4, pc}
    d950:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d954:	d201      	bcs.n	d95a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d956:	0841      	lsrs	r1, r0, #1
    d958:	e000      	b.n	d95c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d95a:	21ff      	movs	r1, #255	; 0xff
    d95c:	1a40      	subs	r0, r0, r1
    d95e:	f240 6172 	movw	r1, #1650	; 0x672
    d962:	4288      	cmp	r0, r1
    d964:	db00      	blt.n	d968 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d966:	4608      	mov	r0, r1
    d968:	b280      	uxth	r0, r0
    d96a:	4770      	bx	lr

0000d96c <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d96c:	2101      	movs	r1, #1
    d96e:	f7ff bf85 	b.w	d87c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d976:	4606      	mov	r6, r0
    d978:	f342 0780 	sbfx	r7, r2, #2, #1
    d97c:	7848      	ldrb	r0, [r1, #1]
    d97e:	460c      	mov	r4, r1
    d980:	f022 0504 	bic.w	r5, r2, #4
    d984:	1c7f      	adds	r7, r7, #1
    d986:	b100      	cbz	r0, d98a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d988:	b90d      	cbnz	r5, d98e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d98a:	4328      	orrs	r0, r5
    d98c:	d104      	bne.n	d998 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d98e:	b145      	cbz	r5, d9a2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d990:	2100      	movs	r1, #0
    d992:	4620      	mov	r0, r4
    d994:	f7f4 f92e 	bl	1bf4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d998:	20ff      	movs	r0, #255	; 0xff
    d99a:	70a0      	strb	r0, [r4, #2]
    d99c:	b11f      	cbz	r7, d9a6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d99e:	2000      	movs	r0, #0
    d9a0:	e002      	b.n	d9a8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d9a2:	2101      	movs	r1, #1
    d9a4:	e7f5      	b.n	d992 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d9a6:	2002      	movs	r0, #2
    d9a8:	1821      	adds	r1, r4, r0
    d9aa:	7d09      	ldrb	r1, [r1, #20]
    d9ac:	2903      	cmp	r1, #3
    d9ae:	d102      	bne.n	d9b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d9b0:	2d02      	cmp	r5, #2
    d9b2:	d000      	beq.n	d9b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d9b4:	1c40      	adds	r0, r0, #1
    d9b6:	1822      	adds	r2, r4, r0
    d9b8:	2101      	movs	r1, #1
    d9ba:	7511      	strb	r1, [r2, #20]
    d9bc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d9c0:	2200      	movs	r2, #0
    d9c2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d9c6:	830a      	strh	r2, [r1, #24]
    d9c8:	6840      	ldr	r0, [r0, #4]
    d9ca:	70a2      	strb	r2, [r4, #2]
    d9cc:	4631      	mov	r1, r6
    d9ce:	f362 010f 	bfi	r1, r2, #0, #16
    d9d2:	e9c6 0100 	strd	r0, r1, [r6]
    d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d9da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9de:	461e      	mov	r6, r3
    d9e0:	4613      	mov	r3, r2
    d9e2:	4604      	mov	r4, r0
    d9e4:	b109      	cbz	r1, d9ea <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d9e6:	2000      	movs	r0, #0
    d9e8:	e000      	b.n	d9ec <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d9ea:	2002      	movs	r0, #2
    d9ec:	21ff      	movs	r1, #255	; 0xff
    d9ee:	70a1      	strb	r1, [r4, #2]
    d9f0:	1821      	adds	r1, r4, r0
    d9f2:	7d0a      	ldrb	r2, [r1, #20]
    d9f4:	2a01      	cmp	r2, #1
    d9f6:	d003      	beq.n	da00 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d9f8:	7d49      	ldrb	r1, [r1, #21]
    d9fa:	2901      	cmp	r1, #1
    d9fc:	d10c      	bne.n	da18 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d9fe:	1c40      	adds	r0, r0, #1
    da00:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    da04:	2700      	movs	r7, #0
    da06:	8b29      	ldrh	r1, [r5, #24]
    da08:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    da0c:	198a      	adds	r2, r1, r6
    da0e:	4562      	cmp	r2, ip
    da10:	d905      	bls.n	da1e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    da12:	4420      	add	r0, r4
    da14:	832f      	strh	r7, [r5, #24]
    da16:	7507      	strb	r7, [r0, #20]
    da18:	2000      	movs	r0, #0
    da1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da1e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    da22:	4632      	mov	r2, r6
    da24:	6840      	ldr	r0, [r0, #4]
    da26:	4408      	add	r0, r1
    da28:	4619      	mov	r1, r3
    da2a:	f003 f9c1 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da2e:	8b28      	ldrh	r0, [r5, #24]
    da30:	4430      	add	r0, r6
    da32:	8328      	strh	r0, [r5, #24]
    da34:	70a7      	strb	r7, [r4, #2]
    da36:	2001      	movs	r0, #1
    da38:	e7ef      	b.n	da1a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000da3a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    da3a:	b510      	push	{r4, lr}
    da3c:	2101      	movs	r1, #1
    da3e:	f7ff ff36 	bl	d8ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    da42:	2800      	cmp	r0, #0
    da44:	d000      	beq.n	da48 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    da46:	2001      	movs	r0, #1
    da48:	bd10      	pop	{r4, pc}

0000da4a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    da4a:	2201      	movs	r2, #1
    da4c:	f7ff bf3c 	b.w	d8c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000da50 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    da50:	2200      	movs	r2, #0
    da52:	f7ff bf39 	b.w	d8c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000da56 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    da56:	b510      	push	{r4, lr}
    da58:	2100      	movs	r1, #0
    da5a:	f7ff ff28 	bl	d8ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    da5e:	2800      	cmp	r0, #0
    da60:	d000      	beq.n	da64 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    da62:	2001      	movs	r0, #1
    da64:	bd10      	pop	{r4, pc}

0000da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    da66:	b570      	push	{r4, r5, r6, lr}
    da68:	b109      	cbz	r1, da6e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    da6a:	2300      	movs	r3, #0
    da6c:	e000      	b.n	da70 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    da6e:	2302      	movs	r3, #2
    da70:	21ff      	movs	r1, #255	; 0xff
    da72:	7081      	strb	r1, [r0, #2]
    da74:	18c1      	adds	r1, r0, r3
    da76:	2402      	movs	r4, #2
    da78:	7d0d      	ldrb	r5, [r1, #20]
    da7a:	2d01      	cmp	r5, #1
    da7c:	d007      	beq.n	da8e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    da7e:	7d4d      	ldrb	r5, [r1, #21]
    da80:	2d01      	cmp	r5, #1
    da82:	d009      	beq.n	da98 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    da84:	f44f 718b 	mov.w	r1, #278	; 0x116
    da88:	2009      	movs	r0, #9
    da8a:	f7f3 fc89 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da92:	831a      	strh	r2, [r3, #24]
    da94:	750c      	strb	r4, [r1, #20]
    da96:	e003      	b.n	daa0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    da98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da9c:	835a      	strh	r2, [r3, #26]
    da9e:	754c      	strb	r4, [r1, #21]
    daa0:	2100      	movs	r1, #0
    daa2:	7081      	strb	r1, [r0, #2]
    daa4:	bd70      	pop	{r4, r5, r6, pc}

0000daa6 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    daa6:	2101      	movs	r1, #1
    daa8:	7001      	strb	r1, [r0, #0]
    daaa:	4770      	bx	lr

0000daac <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    daac:	2201      	movs	r2, #1
    daae:	4611      	mov	r1, r2
    dab0:	f7ff bf38 	b.w	d924 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dab4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    dab4:	2201      	movs	r2, #1
    dab6:	2100      	movs	r1, #0
    dab8:	f7ff bf34 	b.w	d924 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dabc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    dabc:	2100      	movs	r1, #0
    dabe:	f7ff bedd 	b.w	d87c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dac2:	2800      	cmp	r0, #0
    dac4:	db09      	blt.n	dada <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    dac6:	f000 021f 	and.w	r2, r0, #31
    daca:	2101      	movs	r1, #1
    dacc:	4091      	lsls	r1, r2
    dace:	0940      	lsrs	r0, r0, #5
    dad0:	0080      	lsls	r0, r0, #2
    dad2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dad6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dada:	4770      	bx	lr
    dadc:	2800      	cmp	r0, #0
    dade:	db0d      	blt.n	dafc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    dae0:	f000 021f 	and.w	r2, r0, #31
    dae4:	2101      	movs	r1, #1
    dae6:	4091      	lsls	r1, r2
    dae8:	0940      	lsrs	r0, r0, #5
    daea:	0080      	lsls	r0, r0, #2
    daec:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    daf0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    daf4:	f3bf 8f4f 	dsb	sy
    daf8:	f3bf 8f6f 	isb	sy
    dafc:	4770      	bx	lr
    dafe:	b510      	push	{r4, lr}
    db00:	200e      	movs	r0, #14
    db02:	f7ff ffeb 	bl	dadc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    db06:	200e      	movs	r0, #14
    db08:	f7ff ffdb 	bl	dac2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    db0c:	200f      	movs	r0, #15
    db0e:	f7ff ffe5 	bl	dadc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    db12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db16:	200f      	movs	r0, #15
    db18:	f7ff bfd3 	b.w	dac2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    db1c:	2800      	cmp	r0, #0
    db1e:	db09      	blt.n	db34 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    db20:	f000 021f 	and.w	r2, r0, #31
    db24:	2101      	movs	r1, #1
    db26:	4091      	lsls	r1, r2
    db28:	0940      	lsrs	r0, r0, #5
    db2a:	0080      	lsls	r0, r0, #2
    db2c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    db30:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    db34:	4770      	bx	lr
    db36:	5840      	ldr	r0, [r0, r1]
    db38:	2800      	cmp	r0, #0
    db3a:	d000      	beq.n	db3e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    db3c:	2001      	movs	r0, #1
    db3e:	4770      	bx	lr

0000db40 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    db40:	b510      	push	{r4, lr}
    db42:	4604      	mov	r4, r0
    db44:	4620      	mov	r0, r4
    db46:	f7f4 f95d 	bl	1e04 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    db4a:	2811      	cmp	r0, #17
    db4c:	d0fa      	beq.n	db44 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    db4e:	bd10      	pop	{r4, pc}

0000db50 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    db50:	b510      	push	{r4, lr}
    db52:	f7ff fff5 	bl	db40 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    db56:	2800      	cmp	r0, #0
    db58:	d003      	beq.n	db62 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    db5a:	21a0      	movs	r1, #160	; 0xa0
    db5c:	201d      	movs	r0, #29
    db5e:	f7f3 fc1f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db62:	bd10      	pop	{r4, pc}

0000db64 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    db64:	f7f4 baac 	b.w	20c0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000db68 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    db68:	f7f4 ba9a 	b.w	20a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    db6c:	b510      	push	{r4, lr}
    db6e:	4050      	eors	r0, r2
    db70:	780a      	ldrb	r2, [r1, #0]
    db72:	781c      	ldrb	r4, [r3, #0]
    db74:	4062      	eors	r2, r4
    db76:	4410      	add	r0, r2
    db78:	784a      	ldrb	r2, [r1, #1]
    db7a:	785c      	ldrb	r4, [r3, #1]
    db7c:	4062      	eors	r2, r4
    db7e:	4410      	add	r0, r2
    db80:	788a      	ldrb	r2, [r1, #2]
    db82:	789c      	ldrb	r4, [r3, #2]
    db84:	4062      	eors	r2, r4
    db86:	4410      	add	r0, r2
    db88:	78ca      	ldrb	r2, [r1, #3]
    db8a:	78dc      	ldrb	r4, [r3, #3]
    db8c:	4062      	eors	r2, r4
    db8e:	4410      	add	r0, r2
    db90:	790a      	ldrb	r2, [r1, #4]
    db92:	791c      	ldrb	r4, [r3, #4]
    db94:	7949      	ldrb	r1, [r1, #5]
    db96:	4062      	eors	r2, r4
    db98:	4410      	add	r0, r2
    db9a:	795a      	ldrb	r2, [r3, #5]
    db9c:	4051      	eors	r1, r2
    db9e:	42c1      	cmn	r1, r0
    dba0:	d101      	bne.n	dba6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    dba2:	2001      	movs	r0, #1
    dba4:	bd10      	pop	{r4, pc}
    dba6:	2000      	movs	r0, #0
    dba8:	bd10      	pop	{r4, pc}

0000dbaa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dbaa:	b510      	push	{r4, lr}
    dbac:	2900      	cmp	r1, #0
    dbae:	4604      	mov	r4, r0
    dbb0:	f04f 0106 	mov.w	r1, #6
    dbb4:	d002      	beq.n	dbbc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dbb6:	f7f3 fc93 	bl	14e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dbba:	e001      	b.n	dbc0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dbbc:	f7f3 fc9e 	bl	14fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dbc0:	7960      	ldrb	r0, [r4, #5]
    dbc2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dbc6:	7160      	strb	r0, [r4, #5]
    dbc8:	bd10      	pop	{r4, pc}

0000dbca <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dbca:	4770      	bx	lr

0000dbcc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dbcc:	b530      	push	{r4, r5, lr}
    dbce:	460c      	mov	r4, r1
    dbd0:	4605      	mov	r5, r0
    dbd2:	b08d      	sub	sp, #52	; 0x34
    dbd4:	f04f 0103 	mov.w	r1, #3
    dbd8:	f104 0003 	add.w	r0, r4, #3
    dbdc:	b112      	cbz	r2, dbe4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dbde:	f7f3 fc7f 	bl	14e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dbe2:	e001      	b.n	dbe8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dbe4:	f7f3 fc8a 	bl	14fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dbe8:	7960      	ldrb	r0, [r4, #5]
    dbea:	220d      	movs	r2, #13
    dbec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dbf0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dbf4:	7160      	strb	r0, [r4, #5]
    dbf6:	2100      	movs	r1, #0
    dbf8:	a804      	add	r0, sp, #16
    dbfa:	f003 f953 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dbfe:	78e0      	ldrb	r0, [r4, #3]
    dc00:	f88d 001f 	strb.w	r0, [sp, #31]
    dc04:	7920      	ldrb	r0, [r4, #4]
    dc06:	f88d 001e 	strb.w	r0, [sp, #30]
    dc0a:	7960      	ldrb	r0, [r4, #5]
    dc0c:	f88d 001d 	strb.w	r0, [sp, #29]
    dc10:	2210      	movs	r2, #16
    dc12:	4629      	mov	r1, r5
    dc14:	4668      	mov	r0, sp
    dc16:	f003 f8cb 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc1a:	4668      	mov	r0, sp
    dc1c:	f7ff ff98 	bl	db50 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dc20:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dc24:	7020      	strb	r0, [r4, #0]
    dc26:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dc2a:	7060      	strb	r0, [r4, #1]
    dc2c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dc30:	70a0      	strb	r0, [r4, #2]
    dc32:	b00d      	add	sp, #52	; 0x34
    dc34:	bd30      	pop	{r4, r5, pc}

0000dc36 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    dc36:	f7f4 bdbb 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    dc3a:	07c1      	lsls	r1, r0, #31
    dc3c:	d001      	beq.n	dc42 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    dc3e:	2001      	movs	r0, #1
    dc40:	4770      	bx	lr
    dc42:	0780      	lsls	r0, r0, #30
    dc44:	d501      	bpl.n	dc4a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    dc46:	2002      	movs	r0, #2
    dc48:	4770      	bx	lr
    dc4a:	2000      	movs	r0, #0
    dc4c:	4770      	bx	lr
    dc4e:	b510      	push	{r4, lr}
    dc50:	2801      	cmp	r0, #1
    dc52:	d008      	beq.n	dc66 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    dc54:	2802      	cmp	r0, #2
    dc56:	d004      	beq.n	dc62 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    dc58:	f240 4122 	movw	r1, #1058	; 0x422
    dc5c:	2006      	movs	r0, #6
    dc5e:	f7f3 fb9f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc62:	2001      	movs	r0, #1
    dc64:	bd10      	pop	{r4, pc}
    dc66:	2000      	movs	r0, #0
    dc68:	bd10      	pop	{r4, pc}
    dc6a:	2900      	cmp	r1, #0
    dc6c:	d004      	beq.n	dc78 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    dc6e:	2801      	cmp	r0, #1
    dc70:	d003      	beq.n	dc7a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dc72:	2901      	cmp	r1, #1
    dc74:	d001      	beq.n	dc7a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dc76:	2002      	movs	r0, #2
    dc78:	4770      	bx	lr
    dc7a:	2001      	movs	r0, #1
    dc7c:	4770      	bx	lr
    dc7e:	f7ff bc95 	b.w	d5ac <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dc82 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dc82:	2101      	movs	r1, #1
    dc84:	f7f5 b89e 	b.w	2dc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000dc88 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dc88:	b510      	push	{r4, lr}
    dc8a:	f002 fe75 	bl	10978 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dc8e:	b118      	cbz	r0, dc98 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc94:	f7f9 beca 	b.w	7a2c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dc98:	20ff      	movs	r0, #255	; 0xff
    dc9a:	bd10      	pop	{r4, pc}

0000dc9c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dc9c:	b510      	push	{r4, lr}
    dc9e:	f7f5 f8d9 	bl	2e54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dca2:	2810      	cmp	r0, #16
    dca4:	d003      	beq.n	dcae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dca6:	f7f5 f8a5 	bl	2df4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    dcaa:	2810      	cmp	r0, #16
    dcac:	d100      	bne.n	dcb0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    dcae:	2008      	movs	r0, #8
    dcb0:	bd10      	pop	{r4, pc}

0000dcb2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    dcb2:	b510      	push	{r4, lr}
    dcb4:	f7f5 f8ce 	bl	2e54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dcb8:	2810      	cmp	r0, #16
    dcba:	d003      	beq.n	dcc4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    dcbc:	f7f5 f928 	bl	2f10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    dcc0:	2001      	movs	r0, #1
    dcc2:	bd10      	pop	{r4, pc}
    dcc4:	2000      	movs	r0, #0
    dcc6:	bd10      	pop	{r4, pc}

0000dcc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dcc8:	b570      	push	{r4, r5, r6, lr}
    dcca:	460e      	mov	r6, r1
    dccc:	b08c      	sub	sp, #48	; 0x30
    dcce:	4614      	mov	r4, r2
    dcd0:	4601      	mov	r1, r0
    dcd2:	461d      	mov	r5, r3
    dcd4:	2210      	movs	r2, #16
    dcd6:	4668      	mov	r0, sp
    dcd8:	f000 f938 	bl	df4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dcdc:	2210      	movs	r2, #16
    dcde:	4631      	mov	r1, r6
    dce0:	a804      	add	r0, sp, #16
    dce2:	f000 f933 	bl	df4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dce6:	4668      	mov	r0, sp
    dce8:	f7ff ff32 	bl	db50 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dcec:	a908      	add	r1, sp, #32
    dcee:	f04f 0210 	mov.w	r2, #16
    dcf2:	4628      	mov	r0, r5
    dcf4:	b11c      	cbz	r4, dcfe <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dcf6:	f000 f929 	bl	df4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dcfa:	b00c      	add	sp, #48	; 0x30
    dcfc:	bd70      	pop	{r4, r5, r6, pc}
    dcfe:	f003 f857 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd02:	e7fa      	b.n	dcfa <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    dd04:	b510      	push	{r4, lr}
    dd06:	460c      	mov	r4, r1
    dd08:	2100      	movs	r1, #0
    dd0a:	f7ff fd80 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dd0e:	6060      	str	r0, [r4, #4]
    dd10:	b118      	cbz	r0, dd1a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dd12:	2001      	movs	r0, #1
    dd14:	7020      	strb	r0, [r4, #0]
    dd16:	2000      	movs	r0, #0
    dd18:	bd10      	pop	{r4, pc}
    dd1a:	2002      	movs	r0, #2
    dd1c:	bd10      	pop	{r4, pc}

0000dd1e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dd1e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd22:	4348      	muls	r0, r1
    dd24:	4770      	bx	lr

0000dd26 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    dd26:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd2a:	fbb0 f0f1 	udiv	r0, r0, r1
    dd2e:	b280      	uxth	r0, r0
    dd30:	4770      	bx	lr

0000dd32 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    dd32:	b570      	push	{r4, r5, r6, lr}
    dd34:	4604      	mov	r4, r0
    dd36:	4290      	cmp	r0, r2
    dd38:	d20b      	bcs.n	dd52 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    dd3a:	1b10      	subs	r0, r2, r4
    dd3c:	2865      	cmp	r0, #101	; 0x65
    dd3e:	d200      	bcs.n	dd42 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    dd40:	2065      	movs	r0, #101	; 0x65
    dd42:	1825      	adds	r5, r4, r0
    dd44:	428d      	cmp	r5, r1
    dd46:	d803      	bhi.n	dd50 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    dd48:	2103      	movs	r1, #3
    dd4a:	f7fc f8ef 	bl	9f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    dd4e:	b108      	cbz	r0, dd54 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    dd50:	4620      	mov	r0, r4
    dd52:	bd70      	pop	{r4, r5, r6, pc}
    dd54:	4628      	mov	r0, r5
    dd56:	bd70      	pop	{r4, r5, r6, pc}

0000dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dd58:	b510      	push	{r4, lr}
    dd5a:	f1a2 0310 	sub.w	r3, r2, #16
    dd5e:	290d      	cmp	r1, #13
    dd60:	d24d      	bcs.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd62:	e8df f001 	tbb	[pc, r1]
    dd66:	0907      	.short	0x0907
    dd68:	1d1a150e 	.word	0x1d1a150e
    dd6c:	4e2c2921 	.word	0x4e2c2921
    dd70:	0048362f 	.word	0x0048362f
    dd74:	b3f2      	cbz	r2, ddf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    dd76:	e042      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd78:	2a06      	cmp	r2, #6
    dd7a:	d03e      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd7c:	2a07      	cmp	r2, #7
    dd7e:	d03c      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd80:	e03d      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd82:	2a0b      	cmp	r2, #11
    dd84:	d039      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd86:	2a0c      	cmp	r2, #12
    dd88:	d037      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd8a:	2a0a      	cmp	r2, #10
    dd8c:	d035      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd8e:	e036      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd90:	2a0d      	cmp	r2, #13
    dd92:	d032      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd94:	2a0e      	cmp	r2, #14
    dd96:	d030      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd98:	e031      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd9a:	2b0c      	cmp	r3, #12
    dd9c:	d92d      	bls.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd9e:	e02e      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dda0:	3a11      	subs	r2, #17
    dda2:	2a0b      	cmp	r2, #11
    dda4:	d929      	bls.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dda6:	e02a      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dda8:	2b03      	cmp	r3, #3
    ddaa:	d926      	bls.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    ddb0:	b1f8      	cbz	r0, ddf2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    ddb2:	2a1c      	cmp	r2, #28
    ddb4:	d921      	bls.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddb6:	e022      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddb8:	2a04      	cmp	r2, #4
    ddba:	d01e      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddbc:	e01f      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddbe:	2a01      	cmp	r2, #1
    ddc0:	d01b      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddc2:	e01c      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddc4:	2a1d      	cmp	r2, #29
    ddc6:	d018      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddc8:	2a1e      	cmp	r2, #30
    ddca:	d016      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddcc:	2a1f      	cmp	r2, #31
    ddce:	d014      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddd0:	e015      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddd2:	2a20      	cmp	r2, #32
    ddd4:	d011      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddd6:	2a21      	cmp	r2, #33	; 0x21
    ddd8:	d00f      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddda:	2a22      	cmp	r2, #34	; 0x22
    dddc:	d00d      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddde:	2a23      	cmp	r2, #35	; 0x23
    dde0:	d00b      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dde2:	2a24      	cmp	r2, #36	; 0x24
    dde4:	d009      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dde6:	2a25      	cmp	r2, #37	; 0x25
    dde8:	d007      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddea:	2a26      	cmp	r2, #38	; 0x26
    ddec:	d005      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddee:	2a2e      	cmp	r2, #46	; 0x2e
    ddf0:	d003      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddf2:	e004      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddf4:	e001      	b.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddf6:	2a28      	cmp	r2, #40	; 0x28
    ddf8:	d101      	bne.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddfa:	2001      	movs	r0, #1
    ddfc:	bd10      	pop	{r4, pc}
    ddfe:	2000      	movs	r0, #0
    de00:	bd10      	pop	{r4, pc}
    de02:	2a0f      	cmp	r2, #15
    de04:	d1fb      	bne.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de06:	e7f8      	b.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000de08 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    de08:	280b      	cmp	r0, #11
    de0a:	d019      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de0c:	280c      	cmp	r0, #12
    de0e:	d017      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de10:	280a      	cmp	r0, #10
    de12:	d015      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de14:	280d      	cmp	r0, #13
    de16:	d013      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de18:	280e      	cmp	r0, #14
    de1a:	d011      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de1c:	2820      	cmp	r0, #32
    de1e:	d00f      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de20:	2821      	cmp	r0, #33	; 0x21
    de22:	d00d      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de24:	2822      	cmp	r0, #34	; 0x22
    de26:	d00b      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de28:	2823      	cmp	r0, #35	; 0x23
    de2a:	d009      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de2c:	2824      	cmp	r0, #36	; 0x24
    de2e:	d007      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de30:	2825      	cmp	r0, #37	; 0x25
    de32:	d005      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de34:	2826      	cmp	r0, #38	; 0x26
    de36:	d003      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de38:	282e      	cmp	r0, #46	; 0x2e
    de3a:	d001      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de3c:	2000      	movs	r0, #0
    de3e:	4770      	bx	lr
    de40:	2001      	movs	r0, #1
    de42:	4770      	bx	lr

0000de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    de44:	f011 0f0c 	tst.w	r1, #12
    de48:	d018      	beq.n	de7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    de4a:	074a      	lsls	r2, r1, #29
    de4c:	f44f 7116 	mov.w	r1, #600	; 0x258
    de50:	2a00      	cmp	r2, #0
    de52:	da02      	bge.n	de5a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    de54:	f04f 0210 	mov.w	r2, #16
    de58:	e001      	b.n	de5e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    de5a:	f04f 0240 	mov.w	r2, #64	; 0x40
    de5e:	da01      	bge.n	de64 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    de60:	f04f 0196 	mov.w	r1, #150	; 0x96
    de64:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    de68:	eba0 0301 	sub.w	r3, r0, r1
    de6c:	4288      	cmp	r0, r1
    de6e:	d903      	bls.n	de78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de70:	fb93 f0f2 	sdiv	r0, r3, r2
    de74:	b280      	uxth	r0, r0
    de76:	4770      	bx	lr
    de78:	2000      	movs	r0, #0
    de7a:	4770      	bx	lr
    de7c:	2902      	cmp	r1, #2
    de7e:	d008      	beq.n	de92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    de80:	2870      	cmp	r0, #112	; 0x70
    de82:	d9f9      	bls.n	de78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de84:	3870      	subs	r0, #112	; 0x70
    de86:	17c1      	asrs	r1, r0, #31
    de88:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    de8c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    de90:	4770      	bx	lr
    de92:	283c      	cmp	r0, #60	; 0x3c
    de94:	d9f0      	bls.n	de78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de96:	383c      	subs	r0, #60	; 0x3c
    de98:	17c1      	asrs	r1, r0, #31
    de9a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    de9e:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dea2:	4770      	bx	lr

0000dea4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dea4:	6809      	ldr	r1, [r1, #0]
    dea6:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    deaa:	4770      	bx	lr

0000deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    deac:	07c1      	lsls	r1, r0, #31
    deae:	d001      	beq.n	deb4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    deb0:	2001      	movs	r0, #1
    deb2:	4770      	bx	lr
    deb4:	0781      	lsls	r1, r0, #30
    deb6:	d501      	bpl.n	debc <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    deb8:	2002      	movs	r0, #2
    deba:	4770      	bx	lr
    debc:	0740      	lsls	r0, r0, #29
    debe:	d501      	bpl.n	dec4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    dec0:	2008      	movs	r0, #8
    dec2:	4770      	bx	lr
    dec4:	2000      	movs	r0, #0
    dec6:	4770      	bx	lr

0000dec8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dec8:	b510      	push	{r4, lr}
    deca:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dece:	2901      	cmp	r1, #1
    ded0:	d006      	beq.n	dee0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ded2:	2902      	cmp	r1, #2
    ded4:	d005      	beq.n	dee2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ded6:	f240 31a1 	movw	r1, #929	; 0x3a1
    deda:	2029      	movs	r0, #41	; 0x29
    dedc:	f7f3 fa60 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dee0:	b108      	cbz	r0, dee6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dee2:	4610      	mov	r0, r2
    dee4:	bd10      	pop	{r4, pc}
    dee6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    deea:	bd10      	pop	{r4, pc}

0000deec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    def0:	4607      	mov	r7, r0
    def2:	460e      	mov	r6, r1
    def4:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    def8:	f7fc fbda 	bl	a6b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    defc:	b198      	cbz	r0, df26 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    defe:	b31e      	cbz	r6, df48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    df04:	1b40      	subs	r0, r0, r5
    df06:	2300      	movs	r3, #0
    df08:	eb61 0104 	sbc.w	r1, r1, r4
    df0c:	461a      	mov	r2, r3
    df0e:	1a1b      	subs	r3, r3, r0
    df10:	418a      	sbcs	r2, r1
    df12:	da19      	bge.n	df48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df14:	1c42      	adds	r2, r0, #1
    df16:	f171 0100 	sbcs.w	r1, r1, #0
    df1a:	db07      	blt.n	df2c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    df1c:	f240 211b 	movw	r1, #539	; 0x21b
    df20:	2029      	movs	r0, #41	; 0x29
    df22:	f7f3 fa3d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df26:	f240 2111 	movw	r1, #529	; 0x211
    df2a:	e7f9      	b.n	df20 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    df2c:	4430      	add	r0, r6
    df2e:	1e40      	subs	r0, r0, #1
    df30:	fbb0 f1f6 	udiv	r1, r0, r6
    df34:	fb01 f006 	mul.w	r0, r1, r6
    df38:	1828      	adds	r0, r5, r0
    df3a:	f144 0400 	adc.w	r4, r4, #0
    df3e:	e9c7 0404 	strd	r0, r4, [r7, #16]
    df42:	4608      	mov	r0, r1
    df44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df48:	2000      	movs	r0, #0
    df4a:	e7fb      	b.n	df44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000df4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    df4c:	b530      	push	{r4, r5, lr}
    df4e:	4613      	mov	r3, r2
    df50:	e006      	b.n	df60 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    df52:	18cc      	adds	r4, r1, r3
    df54:	1ad5      	subs	r5, r2, r3
    df56:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    df5a:	1e5b      	subs	r3, r3, #1
    df5c:	5544      	strb	r4, [r0, r5]
    df5e:	b2db      	uxtb	r3, r3
    df60:	2b00      	cmp	r3, #0
    df62:	d1f6      	bne.n	df52 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    df64:	bd30      	pop	{r4, r5, pc}

0000df66 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    df66:	2300      	movs	r3, #0
    df68:	6403      	str	r3, [r0, #64]	; 0x40
    df6a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    df6e:	f240 2371 	movw	r3, #625	; 0x271
    df72:	435a      	muls	r2, r3
    df74:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    df78:	1e52      	subs	r2, r2, #1
    df7a:	fbb2 f1f1 	udiv	r1, r2, r1
    df7e:	6441      	str	r1, [r0, #68]	; 0x44
    df80:	4770      	bx	lr

0000df82 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    df82:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    df86:	4607      	mov	r7, r0
    df88:	4690      	mov	r8, r2
    df8a:	468b      	mov	fp, r1
    df8c:	2601      	movs	r6, #1
    df8e:	4608      	mov	r0, r1
    df90:	f000 f9e1 	bl	e356 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    df94:	4682      	mov	sl, r0
    df96:	4658      	mov	r0, fp
    df98:	f000 f9df 	bl	e35a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    df9c:	4681      	mov	r9, r0
    df9e:	f7ff ff85 	bl	deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dfa2:	4604      	mov	r4, r0
    dfa4:	4650      	mov	r0, sl
    dfa6:	f7ff ff81 	bl	deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dfaa:	4605      	mov	r5, r0
    dfac:	ea54 0005 	orrs.w	r0, r4, r5
    dfb0:	d100      	bne.n	dfb4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    dfb2:	2600      	movs	r6, #0
    dfb4:	f7f9 fcbc 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    dfb8:	ea10 0f09 	tst.w	r0, r9
    dfbc:	d100      	bne.n	dfc0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    dfbe:	2400      	movs	r4, #0
    dfc0:	f7f9 fcb6 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    dfc4:	ea10 0f0a 	tst.w	r0, sl
    dfc8:	d100      	bne.n	dfcc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    dfca:	2500      	movs	r5, #0
    dfcc:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    dfd0:	42a0      	cmp	r0, r4
    dfd2:	d100      	bne.n	dfd6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    dfd4:	2400      	movs	r4, #0
    dfd6:	f888 4000 	strb.w	r4, [r8]
    dfda:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    dfde:	42a8      	cmp	r0, r5
    dfe0:	d100      	bne.n	dfe4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    dfe2:	2500      	movs	r5, #0
    dfe4:	f888 5001 	strb.w	r5, [r8, #1]
    dfe8:	b974      	cbnz	r4, e008 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dfea:	b96d      	cbnz	r5, e008 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dfec:	4658      	mov	r0, fp
    dfee:	f000 f9a0 	bl	e332 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    dff2:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    dff6:	1a40      	subs	r0, r0, r1
    dff8:	b200      	sxth	r0, r0
    dffa:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dffe:	4288      	cmp	r0, r1
    e000:	dc01      	bgt.n	e006 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e002:	2800      	cmp	r0, #0
    e004:	dc00      	bgt.n	e008 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e006:	2600      	movs	r6, #0
    e008:	4630      	mov	r0, r6
    e00a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e00e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e00e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e012:	4348      	muls	r0, r1
    e014:	4770      	bx	lr

0000e016 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e016:	f240 2171 	movw	r1, #625	; 0x271
    e01a:	fb10 f001 	smulbb	r0, r0, r1
    e01e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e022:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e026:	4770      	bx	lr

0000e028 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e028:	b510      	push	{r4, lr}
    e02a:	2300      	movs	r3, #0
    e02c:	461a      	mov	r2, r3
    e02e:	e003      	b.n	e038 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e030:	5c84      	ldrb	r4, [r0, r2]
    e032:	4323      	orrs	r3, r4
    e034:	1c52      	adds	r2, r2, #1
    e036:	b2d2      	uxtb	r2, r2
    e038:	428a      	cmp	r2, r1
    e03a:	d3f9      	bcc.n	e030 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e03c:	b10b      	cbz	r3, e042 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e03e:	2000      	movs	r0, #0
    e040:	bd10      	pop	{r4, pc}
    e042:	2001      	movs	r0, #1
    e044:	bd10      	pop	{r4, pc}
    e046:	4401      	add	r1, r0
    e048:	2914      	cmp	r1, #20
    e04a:	dd01      	ble.n	e050 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    e04c:	2014      	movs	r0, #20
    e04e:	4770      	bx	lr
    e050:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e054:	4281      	cmp	r1, r0
    e056:	dbfa      	blt.n	e04e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x26>
    e058:	b248      	sxtb	r0, r1
    e05a:	4770      	bx	lr

0000e05c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e05c:	b570      	push	{r4, r5, r6, lr}
    e05e:	4605      	mov	r5, r0
    e060:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e064:	b286      	uxth	r6, r0
    e066:	4610      	mov	r0, r2
    e068:	7aec      	ldrb	r4, [r5, #11]
    e06a:	4631      	mov	r1, r6
    e06c:	f000 f863 	bl	e136 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e070:	4070      	eors	r0, r6
    e072:	2125      	movs	r1, #37	; 0x25
    e074:	fbb0 f2f1 	udiv	r2, r0, r1
    e078:	fb01 0112 	mls	r1, r1, r2, r0
    e07c:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e080:	f001 0307 	and.w	r3, r1, #7
    e084:	7852      	ldrb	r2, [r2, #1]
    e086:	2601      	movs	r6, #1
    e088:	409e      	lsls	r6, r3
    e08a:	4232      	tst	r2, r6
    e08c:	d001      	beq.n	e092 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e08e:	4608      	mov	r0, r1
    e090:	bd70      	pop	{r4, r5, r6, pc}
    e092:	4344      	muls	r4, r0
    e094:	0c21      	lsrs	r1, r4, #16
    e096:	4628      	mov	r0, r5
    e098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e09c:	f7f5 b840 	b.w	3120 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xbc>

0000e0a0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e0a0:	b510      	push	{r4, lr}
    e0a2:	4604      	mov	r4, r0
    e0a4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e0a8:	b108      	cbz	r0, e0ae <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e0aa:	2825      	cmp	r0, #37	; 0x25
    e0ac:	d901      	bls.n	e0b2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e0ae:	2012      	movs	r0, #18
    e0b0:	bd10      	pop	{r4, pc}
    e0b2:	b132      	cbz	r2, e0c2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e0b4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e0b8:	b128      	cbz	r0, e0c6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e0ba:	2801      	cmp	r0, #1
    e0bc:	d009      	beq.n	e0d2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e0be:	201f      	movs	r0, #31
    e0c0:	bd10      	pop	{r4, pc}
    e0c2:	2000      	movs	r0, #0
    e0c4:	bd10      	pop	{r4, pc}
    e0c6:	4620      	mov	r0, r4
    e0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0cc:	4611      	mov	r1, r2
    e0ce:	f7f4 bfdf 	b.w	3090 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x2c>
    e0d2:	8aa2      	ldrh	r2, [r4, #20]
    e0d4:	6949      	ldr	r1, [r1, #20]
    e0d6:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e0da:	f7ff ffbf 	bl	e05c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e0de:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e0e2:	e7ee      	b.n	e0c2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e0e4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e0e4:	b570      	push	{r4, r5, r6, lr}
    e0e6:	4604      	mov	r4, r0
    e0e8:	1c40      	adds	r0, r0, #1
    e0ea:	4288      	cmp	r0, r1
    e0ec:	d004      	beq.n	e0f8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e0ee:	6808      	ldr	r0, [r1, #0]
    e0f0:	f8c4 0001 	str.w	r0, [r4, #1]
    e0f4:	7908      	ldrb	r0, [r1, #4]
    e0f6:	7160      	strb	r0, [r4, #5]
    e0f8:	7960      	ldrb	r0, [r4, #5]
    e0fa:	f000 001f 	and.w	r0, r0, #31
    e0fe:	7160      	strb	r0, [r4, #5]
    e100:	2000      	movs	r0, #0
    e102:	72e0      	strb	r0, [r4, #11]
    e104:	4605      	mov	r5, r0
    e106:	1966      	adds	r6, r4, r5
    e108:	7870      	ldrb	r0, [r6, #1]
    e10a:	f000 fb4a 	bl	e7a2 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e10e:	71b0      	strb	r0, [r6, #6]
    e110:	7ae1      	ldrb	r1, [r4, #11]
    e112:	1c6d      	adds	r5, r5, #1
    e114:	4408      	add	r0, r1
    e116:	b2ed      	uxtb	r5, r5
    e118:	72e0      	strb	r0, [r4, #11]
    e11a:	2d05      	cmp	r5, #5
    e11c:	d3f3      	bcc.n	e106 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e11e:	bd70      	pop	{r4, r5, r6, pc}
    e120:	b2c1      	uxtb	r1, r0
    e122:	fa91 f1a1 	rbit	r1, r1
    e126:	0a00      	lsrs	r0, r0, #8
    e128:	0e09      	lsrs	r1, r1, #24
    e12a:	fa90 f0a0 	rbit	r0, r0
    e12e:	0e00      	lsrs	r0, r0, #24
    e130:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e134:	4770      	bx	lr
    e136:	b570      	push	{r4, r5, r6, lr}
    e138:	460d      	mov	r5, r1
    e13a:	4048      	eors	r0, r1
    e13c:	2400      	movs	r4, #0
    e13e:	f7ff ffef 	bl	e120 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e142:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e146:	1c64      	adds	r4, r4, #1
    e148:	4428      	add	r0, r5
    e14a:	b2e4      	uxtb	r4, r4
    e14c:	b280      	uxth	r0, r0
    e14e:	2c03      	cmp	r4, #3
    e150:	d3f5      	bcc.n	e13e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e152:	bd70      	pop	{r4, r5, r6, pc}

0000e154 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e154:	7802      	ldrb	r2, [r0, #0]
    e156:	f002 020f 	and.w	r2, r2, #15
    e15a:	2a03      	cmp	r2, #3
    e15c:	d003      	beq.n	e166 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    e15e:	2a05      	cmp	r2, #5
    e160:	d104      	bne.n	e16c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    e162:	f000 b92e 	b.w	e3c2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    e166:	7840      	ldrb	r0, [r0, #1]
    e168:	280c      	cmp	r0, #12
    e16a:	d001      	beq.n	e170 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    e16c:	2000      	movs	r0, #0
    e16e:	4770      	bx	lr
    e170:	2001      	movs	r0, #1
    e172:	4770      	bx	lr

0000e174 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e174:	b570      	push	{r4, r5, r6, lr}
    e176:	4614      	mov	r4, r2
    e178:	4605      	mov	r5, r0
    e17a:	2a1f      	cmp	r2, #31
    e17c:	d903      	bls.n	e186 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e17e:	21ee      	movs	r1, #238	; 0xee
    e180:	202a      	movs	r0, #42	; 0x2a
    e182:	f7f3 f90d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e186:	f105 0009 	add.w	r0, r5, #9
    e18a:	f002 fe11 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e18e:	1da4      	adds	r4, r4, #6
    e190:	706c      	strb	r4, [r5, #1]
    e192:	bd70      	pop	{r4, r5, r6, pc}

0000e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e194:	b510      	push	{r4, lr}
    e196:	7802      	ldrb	r2, [r0, #0]
    e198:	f001 030f 	and.w	r3, r1, #15
    e19c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e1a0:	431a      	orrs	r2, r3
    e1a2:	7002      	strb	r2, [r0, #0]
    e1a4:	2907      	cmp	r1, #7
    e1a6:	d20c      	bcs.n	e1c2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e1a8:	e8df f001 	tbb	[pc, r1]
    e1ac:	06040604 	.word	0x06040604
    e1b0:	00040804 	.word	0x00040804
    e1b4:	2106      	movs	r1, #6
    e1b6:	e002      	b.n	e1be <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e1b8:	210c      	movs	r1, #12
    e1ba:	e000      	b.n	e1be <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e1bc:	2122      	movs	r1, #34	; 0x22
    e1be:	7041      	strb	r1, [r0, #1]
    e1c0:	bd10      	pop	{r4, pc}
    e1c2:	21a8      	movs	r1, #168	; 0xa8
    e1c4:	202a      	movs	r0, #42	; 0x2a
    e1c6:	f7f3 f8eb 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e1ca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e1ca:	680a      	ldr	r2, [r1, #0]
    e1cc:	f840 2f09 	str.w	r2, [r0, #9]!
    e1d0:	8889      	ldrh	r1, [r1, #4]
    e1d2:	8081      	strh	r1, [r0, #4]
    e1d4:	4770      	bx	lr

0000e1d6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e1d6:	7802      	ldrb	r2, [r0, #0]
    e1d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e1dc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e1e0:	7002      	strb	r2, [r0, #0]
    e1e2:	4770      	bx	lr

0000e1e4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e1e4:	680a      	ldr	r2, [r1, #0]
    e1e6:	f840 2f03 	str.w	r2, [r0, #3]!
    e1ea:	8889      	ldrh	r1, [r1, #4]
    e1ec:	8081      	strh	r1, [r0, #4]
    e1ee:	4770      	bx	lr

0000e1f0 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e1f0:	7802      	ldrb	r2, [r0, #0]
    e1f2:	2340      	movs	r3, #64	; 0x40
    e1f4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e1f8:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e1fc:	430a      	orrs	r2, r1
    e1fe:	7002      	strb	r2, [r0, #0]
    e200:	4770      	bx	lr

0000e202 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e202:	b570      	push	{r4, r5, r6, lr}
    e204:	4614      	mov	r4, r2
    e206:	4605      	mov	r5, r0
    e208:	2a1f      	cmp	r2, #31
    e20a:	d904      	bls.n	e216 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e20c:	f44f 7188 	mov.w	r1, #272	; 0x110
    e210:	202a      	movs	r0, #42	; 0x2a
    e212:	f7f3 f8c5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e216:	f105 0009 	add.w	r0, r5, #9
    e21a:	f002 fdc9 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e21e:	1da4      	adds	r4, r4, #6
    e220:	706c      	strb	r4, [r5, #1]
    e222:	bd70      	pop	{r4, r5, r6, pc}

0000e224 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e224:	6842      	ldr	r2, [r0, #4]
    e226:	600a      	str	r2, [r1, #0]
    e228:	7a00      	ldrb	r0, [r0, #8]
    e22a:	7108      	strb	r0, [r1, #4]
    e22c:	4770      	bx	lr

0000e22e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e22e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e232:	4770      	bx	lr

0000e234 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e234:	b570      	push	{r4, r5, r6, lr}
    e236:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e23a:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e23e:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e242:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e246:	88c0      	ldrh	r0, [r0, #6]
    e248:	b131      	cbz	r1, e258 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e24a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e24e:	d903      	bls.n	e258 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e250:	f640 5107 	movw	r1, #3335	; 0xd07
    e254:	428a      	cmp	r2, r1
    e256:	d90b      	bls.n	e270 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e258:	1f91      	subs	r1, r2, #6
    e25a:	f640 467a 	movw	r6, #3194	; 0xc7a
    e25e:	42b1      	cmp	r1, r6
    e260:	d810      	bhi.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e262:	b17b      	cbz	r3, e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e264:	2b08      	cmp	r3, #8
    e266:	d80d      	bhi.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e268:	4293      	cmp	r3, r2
    e26a:	d20b      	bcs.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e26c:	4295      	cmp	r5, r2
    e26e:	d809      	bhi.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e270:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e274:	d206      	bcs.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e276:	f640 4176 	movw	r1, #3190	; 0xc76
    e27a:	380a      	subs	r0, #10
    e27c:	4288      	cmp	r0, r1
    e27e:	d801      	bhi.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e280:	2001      	movs	r0, #1
    e282:	bd70      	pop	{r4, r5, r6, pc}
    e284:	2000      	movs	r0, #0
    e286:	bd70      	pop	{r4, r5, r6, pc}

0000e288 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e288:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e28c:	4770      	bx	lr

0000e28e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e28e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e292:	4770      	bx	lr

0000e294 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e294:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e298:	4770      	bx	lr

0000e29a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e29a:	b510      	push	{r4, lr}
    e29c:	29fb      	cmp	r1, #251	; 0xfb
    e29e:	d904      	bls.n	e2aa <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e2a0:	f240 61a9 	movw	r1, #1705	; 0x6a9
    e2a4:	202a      	movs	r0, #42	; 0x2a
    e2a6:	f7f3 f87b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2aa:	7041      	strb	r1, [r0, #1]
    e2ac:	bd10      	pop	{r4, pc}

0000e2ae <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e2ae:	8980      	ldrh	r0, [r0, #12]
    e2b0:	8008      	strh	r0, [r1, #0]
    e2b2:	4770      	bx	lr

0000e2b4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e2b4:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e2b8:	6008      	str	r0, [r1, #0]
    e2ba:	4770      	bx	lr

0000e2bc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e2bc:	6842      	ldr	r2, [r0, #4]
    e2be:	600a      	str	r2, [r1, #0]
    e2c0:	6880      	ldr	r0, [r0, #8]
    e2c2:	6048      	str	r0, [r1, #4]
    e2c4:	4770      	bx	lr

0000e2c6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e2c6:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e2ca:	600a      	str	r2, [r1, #0]
    e2cc:	6840      	ldr	r0, [r0, #4]
    e2ce:	6048      	str	r0, [r1, #4]
    e2d0:	4770      	bx	lr

0000e2d2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e2d2:	6809      	ldr	r1, [r1, #0]
    e2d4:	60c1      	str	r1, [r0, #12]
    e2d6:	4770      	bx	lr

0000e2d8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e2d8:	680a      	ldr	r2, [r1, #0]
    e2da:	6042      	str	r2, [r0, #4]
    e2dc:	6849      	ldr	r1, [r1, #4]
    e2de:	6081      	str	r1, [r0, #8]
    e2e0:	4770      	bx	lr

0000e2e2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e2e2:	7800      	ldrb	r0, [r0, #0]
    e2e4:	f000 0003 	and.w	r0, r0, #3
    e2e8:	4770      	bx	lr

0000e2ea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e2ea:	8880      	ldrh	r0, [r0, #4]
    e2ec:	4770      	bx	lr

0000e2ee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e2ee:	88c0      	ldrh	r0, [r0, #6]
    e2f0:	4770      	bx	lr

0000e2f2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e2f2:	8900      	ldrh	r0, [r0, #8]
    e2f4:	4770      	bx	lr

0000e2f6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e2f6:	8940      	ldrh	r0, [r0, #10]
    e2f8:	4770      	bx	lr

0000e2fa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e2fa:	8901      	ldrh	r1, [r0, #8]
    e2fc:	291b      	cmp	r1, #27
    e2fe:	d30c      	bcc.n	e31a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e300:	8941      	ldrh	r1, [r0, #10]
    e302:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e306:	4291      	cmp	r1, r2
    e308:	d307      	bcc.n	e31a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e30a:	8881      	ldrh	r1, [r0, #4]
    e30c:	291b      	cmp	r1, #27
    e30e:	d304      	bcc.n	e31a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e310:	88c0      	ldrh	r0, [r0, #6]
    e312:	4290      	cmp	r0, r2
    e314:	d301      	bcc.n	e31a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e316:	2001      	movs	r0, #1
    e318:	4770      	bx	lr
    e31a:	2000      	movs	r0, #0
    e31c:	4770      	bx	lr

0000e31e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e31e:	7901      	ldrb	r1, [r0, #4]
    e320:	0749      	lsls	r1, r1, #29
    e322:	d004      	beq.n	e32e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e324:	7940      	ldrb	r0, [r0, #5]
    e326:	0740      	lsls	r0, r0, #29
    e328:	d001      	beq.n	e32e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e32a:	2001      	movs	r0, #1
    e32c:	4770      	bx	lr
    e32e:	2000      	movs	r0, #0
    e330:	4770      	bx	lr

0000e332 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e332:	88c0      	ldrh	r0, [r0, #6]
    e334:	4770      	bx	lr

0000e336 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e336:	7901      	ldrb	r1, [r0, #4]
    e338:	7940      	ldrb	r0, [r0, #5]
    e33a:	f001 0107 	and.w	r1, r1, #7
    e33e:	1e4a      	subs	r2, r1, #1
    e340:	f000 0007 	and.w	r0, r0, #7
    e344:	4011      	ands	r1, r2
    e346:	1e42      	subs	r2, r0, #1
    e348:	4010      	ands	r0, r2
    e34a:	4301      	orrs	r1, r0
    e34c:	d001      	beq.n	e352 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e34e:	2000      	movs	r0, #0
    e350:	4770      	bx	lr
    e352:	2001      	movs	r0, #1
    e354:	4770      	bx	lr

0000e356 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e356:	7900      	ldrb	r0, [r0, #4]
    e358:	4770      	bx	lr

0000e35a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e35a:	7940      	ldrb	r0, [r0, #5]
    e35c:	4770      	bx	lr

0000e35e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e35e:	7900      	ldrb	r0, [r0, #4]
    e360:	4770      	bx	lr

0000e362 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e362:	7101      	strb	r1, [r0, #4]
    e364:	4770      	bx	lr

0000e366 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e366:	7940      	ldrb	r0, [r0, #5]
    e368:	4770      	bx	lr

0000e36a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e36a:	7141      	strb	r1, [r0, #5]
    e36c:	4770      	bx	lr

0000e36e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e36e:	b510      	push	{r4, lr}
    e370:	2a1b      	cmp	r2, #27
    e372:	d904      	bls.n	e37e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e374:	f240 417f 	movw	r1, #1151	; 0x47f
    e378:	202a      	movs	r0, #42	; 0x2a
    e37a:	f7f3 f811 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e37e:	7042      	strb	r2, [r0, #1]
    e380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e384:	1cc0      	adds	r0, r0, #3
    e386:	f002 bd13 	b.w	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e38a:	7802      	ldrb	r2, [r0, #0]
    e38c:	f001 0103 	and.w	r1, r1, #3
    e390:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e394:	430a      	orrs	r2, r1
    e396:	7002      	strb	r2, [r0, #0]
    e398:	4770      	bx	lr

0000e39a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e39a:	7101      	strb	r1, [r0, #4]
    e39c:	0a09      	lsrs	r1, r1, #8
    e39e:	7141      	strb	r1, [r0, #5]
    e3a0:	4770      	bx	lr

0000e3a2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e3a2:	7181      	strb	r1, [r0, #6]
    e3a4:	0a09      	lsrs	r1, r1, #8
    e3a6:	71c1      	strb	r1, [r0, #7]
    e3a8:	4770      	bx	lr

0000e3aa <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e3aa:	7201      	strb	r1, [r0, #8]
    e3ac:	0a09      	lsrs	r1, r1, #8
    e3ae:	7241      	strb	r1, [r0, #9]
    e3b0:	4770      	bx	lr

0000e3b2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e3b2:	7281      	strb	r1, [r0, #10]
    e3b4:	0a09      	lsrs	r1, r1, #8
    e3b6:	72c1      	strb	r1, [r0, #11]
    e3b8:	4770      	bx	lr

0000e3ba <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e3ba:	7900      	ldrb	r0, [r0, #4]
    e3bc:	4770      	bx	lr

0000e3be <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e3be:	7900      	ldrb	r0, [r0, #4]
    e3c0:	4770      	bx	lr
    e3c2:	b570      	push	{r4, r5, r6, lr}
    e3c4:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e3c8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e3cc:	f012 0fff 	tst.w	r2, #255	; 0xff
    e3d0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e3d4:	d108      	bne.n	e3e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e3d6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e3da:	b92c      	cbnz	r4, e3e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e3dc:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e3e0:	b914      	cbnz	r4, e3e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e3e2:	0e12      	lsrs	r2, r2, #24
    e3e4:	d100      	bne.n	e3e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e3e6:	b34b      	cbz	r3, e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e3e8:	7846      	ldrb	r6, [r0, #1]
    e3ea:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e3ee:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e3f2:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e3f6:	7d83      	ldrb	r3, [r0, #22]
    e3f8:	2e22      	cmp	r6, #34	; 0x22
    e3fa:	d11f      	bne.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e3fc:	b131      	cbz	r1, e40c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e3fe:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e402:	d903      	bls.n	e40c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e404:	f640 5107 	movw	r1, #3335	; 0xd07
    e408:	428a      	cmp	r2, r1
    e40a:	d90b      	bls.n	e424 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e40c:	1f91      	subs	r1, r2, #6
    e40e:	f640 467a 	movw	r6, #3194	; 0xc7a
    e412:	42b1      	cmp	r1, r6
    e414:	d812      	bhi.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e416:	b18b      	cbz	r3, e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e418:	2b08      	cmp	r3, #8
    e41a:	d80f      	bhi.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e41c:	4293      	cmp	r3, r2
    e41e:	d20d      	bcs.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e420:	4295      	cmp	r5, r2
    e422:	d80b      	bhi.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e424:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e428:	d208      	bcs.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e42a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e42e:	f640 4176 	movw	r1, #3190	; 0xc76
    e432:	380a      	subs	r0, #10
    e434:	4288      	cmp	r0, r1
    e436:	d801      	bhi.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e438:	2001      	movs	r0, #1
    e43a:	bd70      	pop	{r4, r5, r6, pc}
    e43c:	2000      	movs	r0, #0
    e43e:	bd70      	pop	{r4, r5, r6, pc}

0000e440 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e440:	6841      	ldr	r1, [r0, #4]
    e442:	2200      	movs	r2, #0
    e444:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e448:	2b00      	cmp	r3, #0
    e44a:	d004      	beq.n	e456 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e44c:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e450:	6840      	ldr	r0, [r0, #4]
    e452:	f000 bd70 	b.w	ef36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e456:	4770      	bx	lr

0000e458 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e458:	b510      	push	{r4, lr}
    e45a:	7a01      	ldrb	r1, [r0, #8]
    e45c:	b119      	cbz	r1, e466 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e45e:	2901      	cmp	r1, #1
    e460:	d006      	beq.n	e470 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e462:	2000      	movs	r0, #0
    e464:	bd10      	pop	{r4, pc}
    e466:	88c2      	ldrh	r2, [r0, #6]
    e468:	6803      	ldr	r3, [r0, #0]
    e46a:	8880      	ldrh	r0, [r0, #4]
    e46c:	2102      	movs	r1, #2
    e46e:	e003      	b.n	e478 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e470:	88c2      	ldrh	r2, [r0, #6]
    e472:	6803      	ldr	r3, [r0, #0]
    e474:	8880      	ldrh	r0, [r0, #4]
    e476:	2101      	movs	r1, #1
    e478:	f7f4 febc 	bl	31f4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e47c:	b908      	cbnz	r0, e482 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e47e:	f7f4 ff09 	bl	3294 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e482:	2001      	movs	r0, #1
    e484:	bd10      	pop	{r4, pc}

0000e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e486:	b508      	push	{r3, lr}
    e488:	7a03      	ldrb	r3, [r0, #8]
    e48a:	f88d 3000 	strb.w	r3, [sp]
    e48e:	9b00      	ldr	r3, [sp, #0]
    e490:	9300      	str	r3, [sp, #0]
    e492:	f89d 3000 	ldrb.w	r3, [sp]
    e496:	b123      	cbz	r3, e4a2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e498:	f240 3117 	movw	r1, #791	; 0x317
    e49c:	2010      	movs	r0, #16
    e49e:	f7f2 ff7f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e4a6:	f7f5 b869 	b.w	357c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>

0000e4aa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e4aa:	f7f5 b895 	b.w	35d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>

0000e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e4ae:	7a03      	ldrb	r3, [r0, #8]
    e4b0:	b082      	sub	sp, #8
    e4b2:	f88d 3000 	strb.w	r3, [sp]
    e4b6:	9b00      	ldr	r3, [sp, #0]
    e4b8:	9300      	str	r3, [sp, #0]
    e4ba:	f89d 3000 	ldrb.w	r3, [sp]
    e4be:	2b00      	cmp	r3, #0
    e4c0:	d102      	bne.n	e4c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e4c2:	b002      	add	sp, #8
    e4c4:	f7f5 b85a 	b.w	357c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    e4c8:	b002      	add	sp, #8
    e4ca:	4770      	bx	lr
    e4cc:	2000      	movs	r0, #0
    e4ce:	7048      	strb	r0, [r1, #1]
    e4d0:	2003      	movs	r0, #3
    e4d2:	7008      	strb	r0, [r1, #0]
    e4d4:	2001      	movs	r0, #1
    e4d6:	7108      	strb	r0, [r1, #4]
    e4d8:	4770      	bx	lr

0000e4da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e4da:	b510      	push	{r4, lr}
    e4dc:	888c      	ldrh	r4, [r1, #4]
    e4de:	890a      	ldrh	r2, [r1, #8]
    e4e0:	884b      	ldrh	r3, [r1, #2]
    e4e2:	88c9      	ldrh	r1, [r1, #6]
    e4e4:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e4e8:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e4ec:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e4f0:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e4f4:	bd10      	pop	{r4, pc}

0000e4f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e4f6:	b570      	push	{r4, r5, r6, lr}
    e4f8:	4615      	mov	r5, r2
    e4fa:	460c      	mov	r4, r1
    e4fc:	f000 f91a 	bl	e734 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e500:	3096      	adds	r0, #150	; 0x96
    e502:	4428      	add	r0, r5
    e504:	42a0      	cmp	r0, r4
    e506:	d801      	bhi.n	e50c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e508:	1a20      	subs	r0, r4, r0
    e50a:	bd70      	pop	{r4, r5, r6, pc}
    e50c:	2000      	movs	r0, #0
    e50e:	bd70      	pop	{r4, r5, r6, pc}

0000e510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e514:	4604      	mov	r4, r0
    e516:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e518:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e51a:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e51e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e522:	4285      	cmp	r5, r0
    e524:	d300      	bcc.n	e528 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e526:	4605      	mov	r5, r0
    e528:	4620      	mov	r0, r4
    e52a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e52e:	f000 f89c 	bl	e66a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e532:	4601      	mov	r1, r0
    e534:	86e5      	strh	r5, [r4, #54]	; 0x36
    e536:	8761      	strh	r1, [r4, #58]	; 0x3a
    e538:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e53a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e53e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e540:	4680      	mov	r8, r0
    e542:	42aa      	cmp	r2, r5
    e544:	d200      	bcs.n	e548 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e546:	462a      	mov	r2, r5
    e548:	428b      	cmp	r3, r1
    e54a:	d200      	bcs.n	e54e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e54c:	460b      	mov	r3, r1
    e54e:	8202      	strh	r2, [r0, #16]
    e550:	f8a8 3012 	strh.w	r3, [r8, #18]
    e554:	42bd      	cmp	r5, r7
    e556:	d101      	bne.n	e55c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e558:	42b1      	cmp	r1, r6
    e55a:	d001      	beq.n	e560 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e55c:	2001      	movs	r0, #1
    e55e:	e000      	b.n	e562 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e560:	2000      	movs	r0, #0
    e562:	4681      	mov	r9, r0
    e564:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e568:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e56c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e56e:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e570:	4285      	cmp	r5, r0
    e572:	d300      	bcc.n	e576 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e574:	4605      	mov	r5, r0
    e576:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e57a:	4620      	mov	r0, r4
    e57c:	f000 f87d 	bl	e67a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e580:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e584:	2902      	cmp	r1, #2
    e586:	d108      	bne.n	e59a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e588:	42af      	cmp	r7, r5
    e58a:	d200      	bcs.n	e58e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e58c:	463d      	mov	r5, r7
    e58e:	4286      	cmp	r6, r0
    e590:	d200      	bcs.n	e594 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e592:	4630      	mov	r0, r6
    e594:	2100      	movs	r1, #0
    e596:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e59a:	f8a8 5008 	strh.w	r5, [r8, #8]
    e59e:	f8a8 000c 	strh.w	r0, [r8, #12]
    e5a2:	42bd      	cmp	r5, r7
    e5a4:	d101      	bne.n	e5aa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e5a6:	42b0      	cmp	r0, r6
    e5a8:	d001      	beq.n	e5ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e5aa:	2001      	movs	r0, #1
    e5ac:	e000      	b.n	e5b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e5ae:	2000      	movs	r0, #0
    e5b0:	ea40 0009 	orr.w	r0, r0, r9
    e5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e5b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e5b8:	6840      	ldr	r0, [r0, #4]
    e5ba:	4770      	bx	lr

0000e5bc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5c0:	4616      	mov	r6, r2
    e5c2:	460f      	mov	r7, r1
    e5c4:	4604      	mov	r4, r0
    e5c6:	f000 f8b5 	bl	e734 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e5ca:	4605      	mov	r5, r0
    e5cc:	463a      	mov	r2, r7
    e5ce:	6921      	ldr	r1, [r4, #16]
    e5d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e5d2:	f000 f845 	bl	e660 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e5d6:	19a9      	adds	r1, r5, r6
    e5d8:	4281      	cmp	r1, r0
    e5da:	d300      	bcc.n	e5de <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e5dc:	4608      	mov	r0, r1
    e5de:	6320      	str	r0, [r4, #48]	; 0x30
    e5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e5e4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e5e4:	221b      	movs	r2, #27
    e5e6:	8402      	strh	r2, [r0, #32]
    e5e8:	8382      	strh	r2, [r0, #28]
    e5ea:	82c2      	strh	r2, [r0, #22]
    e5ec:	8282      	strh	r2, [r0, #20]
    e5ee:	8142      	strh	r2, [r0, #10]
    e5f0:	8202      	strh	r2, [r0, #16]
    e5f2:	8102      	strh	r2, [r0, #8]
    e5f4:	8542      	strh	r2, [r0, #42]	; 0x2a
    e5f6:	8582      	strh	r2, [r0, #44]	; 0x2c
    e5f8:	8482      	strh	r2, [r0, #36]	; 0x24
    e5fa:	2900      	cmp	r1, #0
    e5fc:	d10a      	bne.n	e614 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e5fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e602:	8441      	strh	r1, [r0, #34]	; 0x22
    e604:	83c1      	strh	r1, [r0, #30]
    e606:	8341      	strh	r1, [r0, #26]
    e608:	8301      	strh	r1, [r0, #24]
    e60a:	81c1      	strh	r1, [r0, #14]
    e60c:	8241      	strh	r1, [r0, #18]
    e60e:	8181      	strh	r1, [r0, #12]
    e610:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e612:	8601      	strh	r1, [r0, #48]	; 0x30
    e614:	4770      	bx	lr

0000e616 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e616:	6800      	ldr	r0, [r0, #0]
    e618:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e61c:	4290      	cmp	r0, r2
    e61e:	d903      	bls.n	e628 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e620:	1a40      	subs	r0, r0, r1
    e622:	389c      	subs	r0, #156	; 0x9c
    e624:	0840      	lsrs	r0, r0, #1
    e626:	4770      	bx	lr
    e628:	2000      	movs	r0, #0
    e62a:	4770      	bx	lr

0000e62c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e62c:	b510      	push	{r4, lr}
    e62e:	9c02      	ldr	r4, [sp, #8]
    e630:	8281      	strh	r1, [r0, #20]
    e632:	82c2      	strh	r2, [r0, #22]
    e634:	8303      	strh	r3, [r0, #24]
    e636:	8344      	strh	r4, [r0, #26]
    e638:	bd10      	pop	{r4, pc}
    e63a:	1d00      	adds	r0, r0, #4
    e63c:	b510      	push	{r4, lr}
    e63e:	b280      	uxth	r0, r0
    e640:	2901      	cmp	r1, #1
    e642:	d006      	beq.n	e652 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e644:	2902      	cmp	r1, #2
    e646:	d007      	beq.n	e658 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e648:	f240 2126 	movw	r1, #550	; 0x226
    e64c:	2006      	movs	r0, #6
    e64e:	f7f2 fea7 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e652:	00c0      	lsls	r0, r0, #3
    e654:	3050      	adds	r0, #80	; 0x50
    e656:	e001      	b.n	e65c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e658:	0080      	lsls	r0, r0, #2
    e65a:	302c      	adds	r0, #44	; 0x2c
    e65c:	b280      	uxth	r0, r0
    e65e:	bd10      	pop	{r4, pc}
    e660:	4288      	cmp	r0, r1
    e662:	d300      	bcc.n	e666 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e664:	4608      	mov	r0, r1
    e666:	1a80      	subs	r0, r0, r2
    e668:	4770      	bx	lr
    e66a:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e66e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e672:	4281      	cmp	r1, r0
    e674:	d200      	bcs.n	e678 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e676:	4608      	mov	r0, r1
    e678:	4770      	bx	lr
    e67a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e67e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e682:	4281      	cmp	r1, r0
    e684:	d200      	bcs.n	e688 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e686:	4608      	mov	r0, r1
    e688:	4770      	bx	lr
    e68a:	b538      	push	{r3, r4, r5, lr}
    e68c:	2200      	movs	r2, #0
    e68e:	f1a0 0318 	sub.w	r3, r0, #24
    e692:	2413      	movs	r4, #19
    e694:	7202      	strb	r2, [r0, #8]
    e696:	704a      	strb	r2, [r1, #1]
    e698:	700c      	strb	r4, [r1, #0]
    e69a:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e69e:	604d      	str	r5, [r1, #4]
    e6a0:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e6a4:	608d      	str	r5, [r1, #8]
    e6a6:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e6aa:	60cd      	str	r5, [r1, #12]
    e6ac:	7a05      	ldrb	r5, [r0, #8]
    e6ae:	f88d 5000 	strb.w	r5, [sp]
    e6b2:	9d00      	ldr	r5, [sp, #0]
    e6b4:	9500      	str	r5, [sp, #0]
    e6b6:	f89d 5000 	ldrb.w	r5, [sp]
    e6ba:	2d00      	cmp	r5, #0
    e6bc:	d1ea      	bne.n	e694 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e6be:	bd38      	pop	{r3, r4, r5, pc}
    e6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6c2:	b087      	sub	sp, #28
    e6c4:	460d      	mov	r5, r1
    e6c6:	4604      	mov	r4, r0
    e6c8:	f7f4 fd80 	bl	31cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e6cc:	2600      	movs	r6, #0
    e6ce:	b328      	cbz	r0, e71c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e6d0:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    e6d4:	7226      	strb	r6, [r4, #8]
    e6d6:	8807      	ldrh	r7, [r0, #0]
    e6d8:	a903      	add	r1, sp, #12
    e6da:	4638      	mov	r0, r7
    e6dc:	f001 fcf3 	bl	100c6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e6e0:	b108      	cbz	r0, e6e6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e6e2:	21fd      	movs	r1, #253	; 0xfd
    e6e4:	e017      	b.n	e716 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e6e6:	f8ad 7000 	strh.w	r7, [sp]
    e6ea:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e6ee:	f8ad 0002 	strh.w	r0, [sp, #2]
    e6f2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e6f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    e6fa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e6fe:	f8ad 0006 	strh.w	r0, [sp, #6]
    e702:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e706:	f8ad 0008 	strh.w	r0, [sp, #8]
    e70a:	4668      	mov	r0, sp
    e70c:	f001 fd17 	bl	1013e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e710:	b120      	cbz	r0, e71c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e712:	f44f 7183 	mov.w	r1, #262	; 0x106
    e716:	202c      	movs	r0, #44	; 0x2c
    e718:	f7f2 fe42 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e71c:	201b      	movs	r0, #27
    e71e:	7028      	strb	r0, [r5, #0]
    e720:	706e      	strb	r6, [r5, #1]
    e722:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e726:	6068      	str	r0, [r5, #4]
    e728:	6860      	ldr	r0, [r4, #4]
    e72a:	60a8      	str	r0, [r5, #8]
    e72c:	8920      	ldrh	r0, [r4, #8]
    e72e:	81a8      	strh	r0, [r5, #12]
    e730:	b007      	add	sp, #28
    e732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e734:	2196      	movs	r1, #150	; 0x96
    e736:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e73a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e73e:	f000 b800 	b.w	e742 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e746:	460d      	mov	r5, r1
    e748:	4606      	mov	r6, r0
    e74a:	4698      	mov	r8, r3
    e74c:	4617      	mov	r7, r2
    e74e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e750:	4611      	mov	r1, r2
    e752:	f7ff ff72 	bl	e63a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e756:	4604      	mov	r4, r0
    e758:	4639      	mov	r1, r7
    e75a:	4630      	mov	r0, r6
    e75c:	f7ff ff8d 	bl	e67a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e760:	42a0      	cmp	r0, r4
    e762:	d200      	bcs.n	e766 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e764:	4604      	mov	r4, r0
    e766:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e768:	4641      	mov	r1, r8
    e76a:	f7ff ff66 	bl	e63a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e76e:	4607      	mov	r7, r0
    e770:	4641      	mov	r1, r8
    e772:	4630      	mov	r0, r6
    e774:	f7ff ff79 	bl	e66a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e778:	42b8      	cmp	r0, r7
    e77a:	d300      	bcc.n	e77e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e77c:	4638      	mov	r0, r7
    e77e:	4420      	add	r0, r4
    e780:	4428      	add	r0, r5
    e782:	1d80      	adds	r0, r0, #6
    e784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e788:	b510      	push	{r4, lr}
    e78a:	4604      	mov	r4, r0
    e78c:	2108      	movs	r1, #8
    e78e:	4620      	mov	r0, r4
    e790:	f7f2 feb4 	bl	14fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e794:	6820      	ldr	r0, [r4, #0]
    e796:	2800      	cmp	r0, #0
    e798:	d102      	bne.n	e7a0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x174>
    e79a:	6860      	ldr	r0, [r4, #4]
    e79c:	2800      	cmp	r0, #0
    e79e:	d0f5      	beq.n	e78c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x160>
    e7a0:	bd10      	pop	{r4, pc}

0000e7a2 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e7a2:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e7a6:	2255      	movs	r2, #85	; 0x55
    e7a8:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e7ac:	4408      	add	r0, r1
    e7ae:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e7b2:	2233      	movs	r2, #51	; 0x33
    e7b4:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e7b8:	4408      	add	r0, r1
    e7ba:	f000 010f 	and.w	r1, r0, #15
    e7be:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e7c2:	4770      	bx	lr

0000e7c4 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e7c4:	b510      	push	{r4, lr}
    e7c6:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e7ca:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e7ce:	2000      	movs	r0, #0
    e7d0:	7048      	strb	r0, [r1, #1]
    e7d2:	230a      	movs	r3, #10
    e7d4:	700b      	strb	r3, [r1, #0]
    e7d6:	7108      	strb	r0, [r1, #4]
    e7d8:	f8a1 4005 	strh.w	r4, [r1, #5]
    e7dc:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e7e0:	71c8      	strb	r0, [r1, #7]
    e7e2:	4620      	mov	r0, r4
    e7e4:	f7f3 f9d8 	bl	1b98 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e7e8:	f7fe fdbd 	bl	d366 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e7ec:	b140      	cbz	r0, e800 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e7ee:	4620      	mov	r0, r4
    e7f0:	f7ff f9b8 	bl	db64 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e7f4:	4620      	mov	r0, r4
    e7f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7fa:	2100      	movs	r1, #0
    e7fc:	f7f3 b856 	b.w	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e800:	2160      	movs	r1, #96	; 0x60
    e802:	2063      	movs	r0, #99	; 0x63
    e804:	f7f2 fdcc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e808 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e808:	b538      	push	{r3, r4, r5, lr}
    e80a:	2200      	movs	r2, #0
    e80c:	704a      	strb	r2, [r1, #1]
    e80e:	2307      	movs	r3, #7
    e810:	700b      	strb	r3, [r1, #0]
    e812:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e816:	f5a0 73df 	sub.w	r3, r0, #446	; 0x1be
    e81a:	7202      	strb	r2, [r0, #8]
    e81c:	84da      	strh	r2, [r3, #38]	; 0x26
    e81e:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e822:	604d      	str	r5, [r1, #4]
    e824:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e828:	608d      	str	r5, [r1, #8]
    e82a:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e82e:	818d      	strh	r5, [r1, #12]
    e830:	710a      	strb	r2, [r1, #4]
    e832:	7a05      	ldrb	r5, [r0, #8]
    e834:	f88d 5000 	strb.w	r5, [sp]
    e838:	9d00      	ldr	r5, [sp, #0]
    e83a:	9500      	str	r5, [sp, #0]
    e83c:	f89d 5000 	ldrb.w	r5, [sp]
    e840:	2d00      	cmp	r5, #0
    e842:	d1ea      	bne.n	e81a <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e844:	bd38      	pop	{r3, r4, r5, pc}

0000e846 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e846:	2200      	movs	r2, #0
    e848:	704a      	strb	r2, [r1, #1]
    e84a:	220b      	movs	r2, #11
    e84c:	700a      	strb	r2, [r1, #0]
    e84e:	f100 020a 	add.w	r2, r0, #10
    e852:	7a83      	ldrb	r3, [r0, #10]
    e854:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e858:	710b      	strb	r3, [r1, #4]
    e85a:	8800      	ldrh	r0, [r0, #0]
    e85c:	80c8      	strh	r0, [r1, #6]
    e85e:	7910      	ldrb	r0, [r2, #4]
    e860:	7208      	strb	r0, [r1, #8]
    e862:	4770      	bx	lr

0000e864 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e864:	2200      	movs	r2, #0
    e866:	704a      	strb	r2, [r1, #1]
    e868:	220c      	movs	r2, #12
    e86a:	700a      	strb	r2, [r1, #0]
    e86c:	7a82      	ldrb	r2, [r0, #10]
    e86e:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e872:	710a      	strb	r2, [r1, #4]
    e874:	8800      	ldrh	r0, [r0, #0]
    e876:	80c8      	strh	r0, [r1, #6]
    e878:	4770      	bx	lr

0000e87a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e87a:	2200      	movs	r2, #0
    e87c:	704a      	strb	r2, [r1, #1]
    e87e:	2208      	movs	r2, #8
    e880:	700a      	strb	r2, [r1, #0]
    e882:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e886:	8812      	ldrh	r2, [r2, #0]
    e888:	808a      	strh	r2, [r1, #4]
    e88a:	68c2      	ldr	r2, [r0, #12]
    e88c:	f8c1 2006 	str.w	r2, [r1, #6]
    e890:	6902      	ldr	r2, [r0, #16]
    e892:	f8c1 200a 	str.w	r2, [r1, #10]
    e896:	8a80      	ldrh	r0, [r0, #20]
    e898:	81c8      	strh	r0, [r1, #14]
    e89a:	4770      	bx	lr

0000e89c <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e89c:	b510      	push	{r4, lr}
    e89e:	6844      	ldr	r4, [r0, #4]
    e8a0:	7803      	ldrb	r3, [r0, #0]
    e8a2:	2100      	movs	r1, #0
    e8a4:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e8a8:	3480      	adds	r4, #128	; 0x80
    e8aa:	4620      	mov	r0, r4
    e8ac:	f7ff fa54 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8b0:	b110      	cbz	r0, e8b8 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e8b2:	2004      	movs	r0, #4
    e8b4:	7760      	strb	r0, [r4, #29]
    e8b6:	bd10      	pop	{r4, pc}
    e8b8:	21aa      	movs	r1, #170	; 0xaa
    e8ba:	201c      	movs	r0, #28
    e8bc:	f7f2 fd70 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e8c0 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e8c0:	b510      	push	{r4, lr}
    e8c2:	6841      	ldr	r1, [r0, #4]
    e8c4:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e8c8:	07d2      	lsls	r2, r2, #31
    e8ca:	d00b      	beq.n	e8e4 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e8cc:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e8d0:	1e52      	subs	r2, r2, #1
    e8d2:	b252      	sxtb	r2, r2
    e8d4:	700a      	strb	r2, [r1, #0]
    e8d6:	6840      	ldr	r0, [r0, #4]
    e8d8:	2a00      	cmp	r2, #0
    e8da:	da05      	bge.n	e8e8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e8dc:	21b9      	movs	r1, #185	; 0xb9
    e8de:	201c      	movs	r0, #28
    e8e0:	f7f2 fd5e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8e4:	21b7      	movs	r1, #183	; 0xb7
    e8e6:	e7fa      	b.n	e8de <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e8e8:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e8ec:	f021 0101 	bic.w	r1, r1, #1
    e8f0:	6001      	str	r1, [r0, #0]
    e8f2:	bd10      	pop	{r4, pc}
    e8f4:	2200      	movs	r2, #0
    e8f6:	704a      	strb	r2, [r1, #1]
    e8f8:	2206      	movs	r2, #6
    e8fa:	700a      	strb	r2, [r1, #0]
    e8fc:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e900:	604a      	str	r2, [r1, #4]
    e902:	6842      	ldr	r2, [r0, #4]
    e904:	608a      	str	r2, [r1, #8]
    e906:	8902      	ldrh	r2, [r0, #8]
    e908:	818a      	strh	r2, [r1, #12]
    e90a:	7a80      	ldrb	r0, [r0, #10]
    e90c:	7388      	strb	r0, [r1, #14]
    e90e:	4770      	bx	lr

0000e910 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e910:	2200      	movs	r2, #0
    e912:	704a      	strb	r2, [r1, #1]
    e914:	220e      	movs	r2, #14
    e916:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e91a:	700a      	strb	r2, [r1, #0]
    e91c:	8800      	ldrh	r0, [r0, #0]
    e91e:	8088      	strh	r0, [r1, #4]
    e920:	4770      	bx	lr

0000e922 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e922:	b538      	push	{r3, r4, r5, lr}
    e924:	2400      	movs	r4, #0
    e926:	704c      	strb	r4, [r1, #1]
    e928:	2501      	movs	r5, #1
    e92a:	700d      	strb	r5, [r1, #0]
    e92c:	f1a0 025e 	sub.w	r2, r0, #94	; 0x5e
    e930:	f1a0 03de 	sub.w	r3, r0, #222	; 0xde
    e934:	710c      	strb	r4, [r1, #4]
    e936:	7204      	strb	r4, [r0, #8]
    e938:	881d      	ldrh	r5, [r3, #0]
    e93a:	f8a1 5005 	strh.w	r5, [r1, #5]
    e93e:	f892 5067 	ldrb.w	r5, [r2, #103]	; 0x67
    e942:	71cd      	strb	r5, [r1, #7]
    e944:	f8b2 5068 	ldrh.w	r5, [r2, #104]	; 0x68
    e948:	810d      	strh	r5, [r1, #8]
    e94a:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e94e:	814d      	strh	r5, [r1, #10]
    e950:	7a05      	ldrb	r5, [r0, #8]
    e952:	f88d 5000 	strb.w	r5, [sp]
    e956:	9d00      	ldr	r5, [sp, #0]
    e958:	9500      	str	r5, [sp, #0]
    e95a:	f89d 5000 	ldrb.w	r5, [sp]
    e95e:	2d00      	cmp	r5, #0
    e960:	d1e9      	bne.n	e936 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e962:	bd38      	pop	{r3, r4, r5, pc}

0000e964 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e964:	b570      	push	{r4, r5, r6, lr}
    e966:	7803      	ldrb	r3, [r0, #0]
    e968:	6840      	ldr	r0, [r0, #4]
    e96a:	2500      	movs	r5, #0
    e96c:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e970:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    e974:	f500 7098 	add.w	r0, r0, #304	; 0x130
    e978:	0789      	lsls	r1, r1, #30
    e97a:	d40e      	bmi.n	e99a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    e97c:	7f62      	ldrb	r2, [r4, #29]
    e97e:	2100      	movs	r1, #0
    e980:	4620      	mov	r0, r4
    e982:	f7ff f9e9 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e986:	b130      	cbz	r0, e996 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    e988:	2001      	movs	r0, #1
    e98a:	7760      	strb	r0, [r4, #29]
    e98c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e990:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    e994:	bd70      	pop	{r4, r5, r6, pc}
    e996:	216e      	movs	r1, #110	; 0x6e
    e998:	e00b      	b.n	e9b2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    e99a:	7b21      	ldrb	r1, [r4, #12]
    e99c:	0789      	lsls	r1, r1, #30
    e99e:	d50f      	bpl.n	e9c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    e9a0:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    e9a4:	1e49      	subs	r1, r1, #1
    e9a6:	b249      	sxtb	r1, r1
    e9a8:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    e9ac:	2900      	cmp	r1, #0
    e9ae:	da03      	bge.n	e9b8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    e9b0:	2180      	movs	r1, #128	; 0x80
    e9b2:	2040      	movs	r0, #64	; 0x40
    e9b4:	f7f2 fcf4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9b8:	68e1      	ldr	r1, [r4, #12]
    e9ba:	f021 0102 	bic.w	r1, r1, #2
    e9be:	60e1      	str	r1, [r4, #12]
    e9c0:	7485      	strb	r5, [r0, #18]
    e9c2:	bd70      	pop	{r4, r5, r6, pc}
    e9c4:	2200      	movs	r2, #0
    e9c6:	704a      	strb	r2, [r1, #1]
    e9c8:	2219      	movs	r2, #25
    e9ca:	700a      	strb	r2, [r1, #0]
    e9cc:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e9d0:	6048      	str	r0, [r1, #4]
    e9d2:	4770      	bx	lr
    e9d4:	b510      	push	{r4, lr}
    e9d6:	4604      	mov	r4, r0
    e9d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e9dc:	e9d4 1000 	ldrd	r1, r0, [r4]
    e9e0:	4050      	eors	r0, r2
    e9e2:	ea70 0101 	orns	r1, r0, r1
    e9e6:	d008      	beq.n	e9fa <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e9e8:	f7fc fc1e 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e9ec:	e9d4 2300 	ldrd	r2, r3, [r4]
    e9f0:	1a80      	subs	r0, r0, r2
    e9f2:	4199      	sbcs	r1, r3
    e9f4:	d301      	bcc.n	e9fa <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e9f6:	2001      	movs	r0, #1
    e9f8:	bd10      	pop	{r4, pc}
    e9fa:	2000      	movs	r0, #0
    e9fc:	bd10      	pop	{r4, pc}
    e9fe:	2801      	cmp	r0, #1
    ea00:	d102      	bne.n	ea08 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa4>
    ea02:	7948      	ldrb	r0, [r1, #5]
    ea04:	0980      	lsrs	r0, r0, #6
    ea06:	d001      	beq.n	ea0c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa8>
    ea08:	2000      	movs	r0, #0
    ea0a:	4770      	bx	lr
    ea0c:	2001      	movs	r0, #1
    ea0e:	4770      	bx	lr
    ea10:	2801      	cmp	r0, #1
    ea12:	d106      	bne.n	ea22 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    ea14:	7948      	ldrb	r0, [r1, #5]
    ea16:	2101      	movs	r1, #1
    ea18:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ea1c:	d101      	bne.n	ea22 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    ea1e:	2001      	movs	r0, #1
    ea20:	4770      	bx	lr
    ea22:	2000      	movs	r0, #0
    ea24:	4770      	bx	lr
    ea26:	2802      	cmp	r0, #2
    ea28:	d003      	beq.n	ea32 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    ea2a:	2803      	cmp	r0, #3
    ea2c:	d001      	beq.n	ea32 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    ea2e:	2000      	movs	r0, #0
    ea30:	4770      	bx	lr
    ea32:	2001      	movs	r0, #1
    ea34:	4770      	bx	lr

0000ea36 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    ea36:	b510      	push	{r4, lr}
    ea38:	4604      	mov	r4, r0
    ea3a:	7c00      	ldrb	r0, [r0, #16]
    ea3c:	f7ff fff3 	bl	ea26 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    ea40:	b148      	cbz	r0, ea56 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ea42:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    ea46:	f104 0158 	add.w	r1, r4, #88	; 0x58
    ea4a:	f7ff f927 	bl	dc9c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ea4e:	2808      	cmp	r0, #8
    ea50:	d001      	beq.n	ea56 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ea52:	2001      	movs	r0, #1
    ea54:	bd10      	pop	{r4, pc}
    ea56:	7c20      	ldrb	r0, [r4, #16]
    ea58:	b118      	cbz	r0, ea62 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ea5a:	2802      	cmp	r0, #2
    ea5c:	d001      	beq.n	ea62 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ea5e:	7de0      	ldrb	r0, [r4, #23]
    ea60:	bd10      	pop	{r4, pc}
    ea62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea66:	2000      	movs	r0, #0
    ea68:	f7f3 bb64 	b.w	2134 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000ea6c <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    ea6c:	b508      	push	{r3, lr}
    ea6e:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    ea72:	f88d 1000 	strb.w	r1, [sp]
    ea76:	9900      	ldr	r1, [sp, #0]
    ea78:	9100      	str	r1, [sp, #0]
    ea7a:	f89d 1000 	ldrb.w	r1, [sp]
    ea7e:	b941      	cbnz	r1, ea92 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    ea80:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    ea84:	f88d 1000 	strb.w	r1, [sp]
    ea88:	9900      	ldr	r1, [sp, #0]
    ea8a:	9100      	str	r1, [sp, #0]
    ea8c:	f89d 1000 	ldrb.w	r1, [sp]
    ea90:	b109      	cbz	r1, ea96 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    ea92:	2001      	movs	r0, #1
    ea94:	bd08      	pop	{r3, pc}
    ea96:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    ea9a:	f88d 0000 	strb.w	r0, [sp]
    ea9e:	9800      	ldr	r0, [sp, #0]
    eaa0:	9000      	str	r0, [sp, #0]
    eaa2:	f89d 0000 	ldrb.w	r0, [sp]
    eaa6:	2000      	movs	r0, #0
    eaa8:	bd08      	pop	{r3, pc}

0000eaaa <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    eaaa:	20ff      	movs	r0, #255	; 0xff
    eaac:	7008      	strb	r0, [r1, #0]
    eaae:	6b48      	ldr	r0, [r1, #52]	; 0x34
    eab0:	f7fe bff9 	b.w	daa6 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000eab4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    eab4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eab6:	460d      	mov	r5, r1
    eab8:	4604      	mov	r4, r0
    eaba:	f44f 728c 	mov.w	r2, #280	; 0x118
    eabe:	2100      	movs	r1, #0
    eac0:	f002 f9f0 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eac4:	20ff      	movs	r0, #255	; 0xff
    eac6:	7020      	strb	r0, [r4, #0]
    eac8:	207f      	movs	r0, #127	; 0x7f
    eaca:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    eace:	2013      	movs	r0, #19
    ead0:	8060      	strh	r0, [r4, #2]
    ead2:	f242 7010 	movw	r0, #10000	; 0x2710
    ead6:	8460      	strh	r0, [r4, #34]	; 0x22
    ead8:	f7f3 f91c 	bl	1d14 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    eadc:	4601      	mov	r1, r0
    eade:	6360      	str	r0, [r4, #52]	; 0x34
    eae0:	2200      	movs	r2, #0
    eae2:	4668      	mov	r0, sp
    eae4:	f7fe ff45 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eae8:	2200      	movs	r2, #0
    eaea:	2101      	movs	r1, #1
    eaec:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eaee:	f7fe ffba 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eaf2:	2204      	movs	r2, #4
    eaf4:	4668      	mov	r0, sp
    eaf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    eaf8:	f7fe ff3b 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eafc:	2200      	movs	r2, #0
    eafe:	4611      	mov	r1, r2
    eb00:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb02:	f7fe ffb0 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb06:	73a5      	strb	r5, [r4, #14]
    eb08:	f104 0028 	add.w	r0, r4, #40	; 0x28
    eb0c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    eb10:	f000 b96b 	b.w	edea <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000eb14 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    eb14:	7880      	ldrb	r0, [r0, #2]
    eb16:	f3c0 0080 	ubfx	r0, r0, #2, #1
    eb1a:	b108      	cbz	r0, eb20 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    eb1c:	2000      	movs	r0, #0
    eb1e:	4770      	bx	lr
    eb20:	201f      	movs	r0, #31
    eb22:	4770      	bx	lr

0000eb24 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    eb24:	f7f5 bcfa 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>

0000eb28 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    eb28:	6880      	ldr	r0, [r0, #8]
    eb2a:	4770      	bx	lr

0000eb2c <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    eb2c:	2001      	movs	r0, #1
    eb2e:	4770      	bx	lr

0000eb30 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    eb30:	b510      	push	{r4, lr}
    eb32:	4604      	mov	r4, r0
    eb34:	3028      	adds	r0, #40	; 0x28
    eb36:	f000 f918 	bl	ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    eb3a:	8861      	ldrh	r1, [r4, #2]
    eb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb40:	2228      	movs	r2, #40	; 0x28
    eb42:	f7f5 bebb 	b.w	48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000eb46 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    eb46:	2200      	movs	r2, #0
    eb48:	8602      	strh	r2, [r0, #48]	; 0x30
    eb4a:	8843      	ldrh	r3, [r0, #2]
    eb4c:	2b1d      	cmp	r3, #29
    eb4e:	d001      	beq.n	eb54 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    eb50:	7341      	strb	r1, [r0, #13]
    eb52:	4770      	bx	lr
    eb54:	7342      	strb	r2, [r0, #13]
    eb56:	4770      	bx	lr

0000eb58 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    eb58:	b510      	push	{r4, lr}
    eb5a:	2400      	movs	r4, #0
    eb5c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    eb5e:	f7fe ff7a 	bl	da56 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    eb62:	4384      	bics	r4, r0
    eb64:	f084 0001 	eor.w	r0, r4, #1
    eb68:	bd10      	pop	{r4, pc}

0000eb6a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    eb6a:	2000      	movs	r0, #0
    eb6c:	4770      	bx	lr

0000eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    eb6e:	7880      	ldrb	r0, [r0, #2]
    eb70:	f000 0001 	and.w	r0, r0, #1
    eb74:	4770      	bx	lr

0000eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    eb76:	7880      	ldrb	r0, [r0, #2]
    eb78:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    eb7c:	4770      	bx	lr

0000eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    eb7e:	2001      	movs	r0, #1
    eb80:	4770      	bx	lr

0000eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    eb82:	7880      	ldrb	r0, [r0, #2]
    eb84:	f3c0 0040 	ubfx	r0, r0, #1, #1
    eb88:	4770      	bx	lr

0000eb8a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    eb8a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    eb8e:	4770      	bx	lr

0000eb90 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    eb90:	7800      	ldrb	r0, [r0, #0]
    eb92:	28ff      	cmp	r0, #255	; 0xff
    eb94:	d001      	beq.n	eb9a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    eb96:	2001      	movs	r0, #1
    eb98:	4770      	bx	lr
    eb9a:	2000      	movs	r0, #0
    eb9c:	4770      	bx	lr

0000eb9e <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    eb9e:	f800 1f20 	strb.w	r1, [r0, #32]!
    eba2:	7042      	strb	r2, [r0, #1]
    eba4:	4770      	bx	lr

0000eba6 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    eba6:	680a      	ldr	r2, [r1, #0]
    eba8:	f840 2f11 	str.w	r2, [r0, #17]!
    ebac:	8889      	ldrh	r1, [r1, #4]
    ebae:	8081      	strh	r1, [r0, #4]
    ebb0:	2101      	movs	r1, #1
    ebb2:	7181      	strb	r1, [r0, #6]
    ebb4:	4770      	bx	lr

0000ebb6 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ebb6:	7b00      	ldrb	r0, [r0, #12]
    ebb8:	4770      	bx	lr

0000ebba <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ebba:	2001      	movs	r0, #1
    ebbc:	4770      	bx	lr

0000ebbe <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ebbe:	61c1      	str	r1, [r0, #28]
    ebc0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ebc4:	724a      	strb	r2, [r1, #9]
    ebc6:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ebca:	f8c1 200a 	str.w	r2, [r1, #10]
    ebce:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ebd2:	81c8      	strh	r0, [r1, #14]
    ebd4:	4770      	bx	lr

0000ebd6 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ebd6:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ebda:	4770      	bx	lr

0000ebdc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ebdc:	7bc0      	ldrb	r0, [r0, #15]
    ebde:	2800      	cmp	r0, #0
    ebe0:	d000      	beq.n	ebe4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ebe2:	2001      	movs	r0, #1
    ebe4:	4770      	bx	lr
    ebe6:	7802      	ldrb	r2, [r0, #0]
    ebe8:	2320      	movs	r3, #32
    ebea:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ebee:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ebf2:	430a      	orrs	r2, r1
    ebf4:	7002      	strb	r2, [r0, #0]
    ebf6:	4770      	bx	lr
    ebf8:	b510      	push	{r4, lr}
    ebfa:	f7ff f84f 	bl	dc9c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ebfe:	4604      	mov	r4, r0
    ec00:	f7f4 f854 	bl	2cac <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    ec04:	b138      	cbz	r0, ec16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    ec06:	4620      	mov	r0, r4
    ec08:	f7f3 fff8 	bl	2bfc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    ec0c:	b118      	cbz	r0, ec16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    ec0e:	2110      	movs	r1, #16
    ec10:	f7ff fa0a 	bl	e028 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    ec14:	b108      	cbz	r0, ec1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    ec16:	2000      	movs	r0, #0
    ec18:	bd10      	pop	{r4, pc}
    ec1a:	2001      	movs	r0, #1
    ec1c:	bd10      	pop	{r4, pc}
    ec1e:	2101      	movs	r1, #1
    ec20:	f7f5 b8ec 	b.w	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ec24:	2101      	movs	r1, #1
    ec26:	f7f5 b8e9 	b.w	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ec2a:	2200      	movs	r2, #0
    ec2c:	704a      	strb	r2, [r1, #1]
    ec2e:	2205      	movs	r2, #5
    ec30:	700a      	strb	r2, [r1, #0]
    ec32:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ec36:	6048      	str	r0, [r1, #4]
    ec38:	4770      	bx	lr
    ec3a:	b510      	push	{r4, lr}
    ec3c:	460c      	mov	r4, r1
    ec3e:	2100      	movs	r1, #0
    ec40:	7061      	strb	r1, [r4, #1]
    ec42:	2112      	movs	r1, #18
    ec44:	7021      	strb	r1, [r4, #0]
    ec46:	f100 0109 	add.w	r1, r0, #9
    ec4a:	2221      	movs	r2, #33	; 0x21
    ec4c:	1d20      	adds	r0, r4, #4
    ec4e:	f002 f8af 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec52:	2001      	movs	r0, #1
    ec54:	71e0      	strb	r0, [r4, #7]
    ec56:	7920      	ldrb	r0, [r4, #4]
    ec58:	2800      	cmp	r0, #0
    ec5a:	d015      	beq.n	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ec5c:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ec60:	2100      	movs	r1, #0
    ec62:	4620      	mov	r0, r4
    ec64:	f7fe fdd3 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec68:	2800      	cmp	r0, #0
    ec6a:	d00d      	beq.n	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ec6c:	8800      	ldrh	r0, [r0, #0]
    ec6e:	f7fe ff79 	bl	db64 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ec72:	2100      	movs	r1, #0
    ec74:	4620      	mov	r0, r4
    ec76:	f7f2 fe19 	bl	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ec7a:	2800      	cmp	r0, #0
    ec7c:	d004      	beq.n	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ec7e:	f44f 7114 	mov.w	r1, #592	; 0x250
    ec82:	202d      	movs	r0, #45	; 0x2d
    ec84:	f7f2 fb8c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec88:	bd10      	pop	{r4, pc}
    ec8a:	2200      	movs	r2, #0
    ec8c:	704a      	strb	r2, [r1, #1]
    ec8e:	221a      	movs	r2, #26
    ec90:	700a      	strb	r2, [r1, #0]
    ec92:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ec96:	604a      	str	r2, [r1, #4]
    ec98:	6842      	ldr	r2, [r0, #4]
    ec9a:	608a      	str	r2, [r1, #8]
    ec9c:	7a00      	ldrb	r0, [r0, #8]
    ec9e:	7308      	strb	r0, [r1, #12]
    eca0:	4770      	bx	lr
    eca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eca6:	4604      	mov	r4, r0
    eca8:	460f      	mov	r7, r1
    ecaa:	7e40      	ldrb	r0, [r0, #25]
    ecac:	f7f3 ff8c 	bl	2bc8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ecb0:	4606      	mov	r6, r0
    ecb2:	7e20      	ldrb	r0, [r4, #24]
    ecb4:	f104 0551 	add.w	r5, r4, #81	; 0x51
    ecb8:	b120      	cbz	r0, ecc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    ecba:	b11e      	cbz	r6, ecc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    ecbc:	7e60      	ldrb	r0, [r4, #25]
    ecbe:	f7f3 ff77 	bl	2bb0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ecc2:	b1a0      	cbz	r0, ecee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x112>
    ecc4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    ecc8:	2800      	cmp	r0, #0
    ecca:	d024      	beq.n	ed16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    eccc:	7ea0      	ldrb	r0, [r4, #26]
    ecce:	2800      	cmp	r0, #0
    ecd0:	d021      	beq.n	ed16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    ecd2:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    ecd6:	4629      	mov	r1, r5
    ecd8:	f7ff fe9a 	bl	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    ecdc:	b1a8      	cbz	r0, ed0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    ecde:	f7f3 ff63 	bl	2ba8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ece2:	463a      	mov	r2, r7
    ece4:	4629      	mov	r1, r5
    ece6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ecea:	f7fe bf6f 	b.w	dbcc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ecee:	2001      	movs	r0, #1
    ecf0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ecf4:	463a      	mov	r2, r7
    ecf6:	4629      	mov	r1, r5
    ecf8:	4630      	mov	r0, r6
    ecfa:	f7fe ff67 	bl	dbcc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ecfe:	7e61      	ldrb	r1, [r4, #25]
    ed00:	4628      	mov	r0, r5
    ed02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed06:	f7f3 bf6b 	b.w	2be0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ed0a:	4639      	mov	r1, r7
    ed0c:	4628      	mov	r0, r5
    ed0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed12:	f7fe bf4a 	b.w	dbaa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ed16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed1a:	b510      	push	{r4, lr}
    ed1c:	4604      	mov	r4, r0
    ed1e:	4608      	mov	r0, r1
    ed20:	f7f9 fbaa 	bl	8478 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    ed24:	7921      	ldrb	r1, [r4, #4]
    ed26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed2a:	2025      	movs	r0, #37	; 0x25
    ed2c:	f7f9 bb7a 	b.w	8424 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    ed30:	b570      	push	{r4, r5, r6, lr}
    ed32:	4614      	mov	r4, r2
    ed34:	461d      	mov	r5, r3
    ed36:	4606      	mov	r6, r0
    ed38:	f7fc fa76 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ed3c:	1900      	adds	r0, r0, r4
    ed3e:	4169      	adcs	r1, r5
    ed40:	e9c6 0100 	strd	r0, r1, [r6]
    ed44:	bd70      	pop	{r4, r5, r6, pc}

0000ed46 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ed46:	b570      	push	{r4, r5, r6, lr}
    ed48:	7001      	strb	r1, [r0, #0]
    ed4a:	7042      	strb	r2, [r0, #1]
    ed4c:	4614      	mov	r4, r2
    ed4e:	460d      	mov	r5, r1
    ed50:	7880      	ldrb	r0, [r0, #2]
    ed52:	f000 f87f 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ed56:	fb10 f005 	smulbb	r0, r0, r5
    ed5a:	4360      	muls	r0, r4
    ed5c:	28ff      	cmp	r0, #255	; 0xff
    ed5e:	d303      	bcc.n	ed68 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ed60:	215c      	movs	r1, #92	; 0x5c
    ed62:	202e      	movs	r0, #46	; 0x2e
    ed64:	f7f2 fb1c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed68:	bd70      	pop	{r4, r5, r6, pc}

0000ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ed6a:	b510      	push	{r4, lr}
    ed6c:	4604      	mov	r4, r0
    ed6e:	7880      	ldrb	r0, [r0, #2]
    ed70:	f000 f870 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ed74:	7861      	ldrb	r1, [r4, #1]
    ed76:	7822      	ldrb	r2, [r4, #0]
    ed78:	fb11 f102 	smulbb	r1, r1, r2
    ed7c:	4348      	muls	r0, r1
    ed7e:	b2c0      	uxtb	r0, r0
    ed80:	bd10      	pop	{r4, pc}

0000ed82 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ed82:	b510      	push	{r4, lr}
    ed84:	4604      	mov	r4, r0
    ed86:	f000 f84d 	bl	ee24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ed8a:	7961      	ldrb	r1, [r4, #5]
    ed8c:	1c49      	adds	r1, r1, #1
    ed8e:	b2c9      	uxtb	r1, r1
    ed90:	7161      	strb	r1, [r4, #5]
    ed92:	7862      	ldrb	r2, [r4, #1]
    ed94:	4291      	cmp	r1, r2
    ed96:	d10b      	bne.n	edb0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ed98:	2200      	movs	r2, #0
    ed9a:	7162      	strb	r2, [r4, #5]
    ed9c:	78e1      	ldrb	r1, [r4, #3]
    ed9e:	4301      	orrs	r1, r0
    eda0:	70e1      	strb	r1, [r4, #3]
    eda2:	78a3      	ldrb	r3, [r4, #2]
    eda4:	4299      	cmp	r1, r3
    eda6:	d103      	bne.n	edb0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    eda8:	70e2      	strb	r2, [r4, #3]
    edaa:	7921      	ldrb	r1, [r4, #4]
    edac:	1c49      	adds	r1, r1, #1
    edae:	7121      	strb	r1, [r4, #4]
    edb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edb4:	f000 b825 	b.w	ee02 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000edb8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    edb8:	7081      	strb	r1, [r0, #2]
    edba:	4770      	bx	lr

0000edbc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    edbc:	b570      	push	{r4, r5, r6, lr}
    edbe:	4604      	mov	r4, r0
    edc0:	7880      	ldrb	r0, [r0, #2]
    edc2:	f000 f847 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edc6:	7861      	ldrb	r1, [r4, #1]
    edc8:	fb11 f500 	smulbb	r5, r1, r0
    edcc:	78e0      	ldrb	r0, [r4, #3]
    edce:	f000 f841 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edd2:	7861      	ldrb	r1, [r4, #1]
    edd4:	7962      	ldrb	r2, [r4, #5]
    edd6:	fb10 2001 	smlabb	r0, r0, r1, r2
    edda:	7821      	ldrb	r1, [r4, #0]
    eddc:	7922      	ldrb	r2, [r4, #4]
    edde:	1a89      	subs	r1, r1, r2
    ede0:	fb11 f105 	smulbb	r1, r1, r5
    ede4:	1a08      	subs	r0, r1, r0
    ede6:	b2c0      	uxtb	r0, r0
    ede8:	bd70      	pop	{r4, r5, r6, pc}

0000edea <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    edea:	2100      	movs	r1, #0
    edec:	6001      	str	r1, [r0, #0]
    edee:	8081      	strh	r1, [r0, #4]
    edf0:	2101      	movs	r1, #1
    edf2:	7041      	strb	r1, [r0, #1]
    edf4:	7001      	strb	r1, [r0, #0]
    edf6:	4770      	bx	lr

0000edf8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    edf8:	2100      	movs	r1, #0
    edfa:	70c1      	strb	r1, [r0, #3]
    edfc:	7141      	strb	r1, [r0, #5]
    edfe:	7101      	strb	r1, [r0, #4]
    ee00:	4770      	bx	lr
    ee02:	b510      	push	{r4, lr}
    ee04:	2801      	cmp	r0, #1
    ee06:	d007      	beq.n	ee18 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ee08:	2802      	cmp	r0, #2
    ee0a:	d007      	beq.n	ee1c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ee0c:	2804      	cmp	r0, #4
    ee0e:	d007      	beq.n	ee20 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ee10:	2139      	movs	r1, #57	; 0x39
    ee12:	202e      	movs	r0, #46	; 0x2e
    ee14:	f7f2 fac4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee18:	2025      	movs	r0, #37	; 0x25
    ee1a:	bd10      	pop	{r4, pc}
    ee1c:	2026      	movs	r0, #38	; 0x26
    ee1e:	bd10      	pop	{r4, pc}
    ee20:	2027      	movs	r0, #39	; 0x27
    ee22:	bd10      	pop	{r4, pc}
    ee24:	4601      	mov	r1, r0
    ee26:	2000      	movs	r0, #0
    ee28:	788a      	ldrb	r2, [r1, #2]
    ee2a:	07d3      	lsls	r3, r2, #31
    ee2c:	d002      	beq.n	ee34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    ee2e:	78cb      	ldrb	r3, [r1, #3]
    ee30:	07db      	lsls	r3, r3, #31
    ee32:	d006      	beq.n	ee42 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ee34:	0793      	lsls	r3, r2, #30
    ee36:	d506      	bpl.n	ee46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ee38:	78cb      	ldrb	r3, [r1, #3]
    ee3a:	079b      	lsls	r3, r3, #30
    ee3c:	d403      	bmi.n	ee46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ee3e:	2002      	movs	r0, #2
    ee40:	4770      	bx	lr
    ee42:	2001      	movs	r0, #1
    ee44:	4770      	bx	lr
    ee46:	0752      	lsls	r2, r2, #29
    ee48:	d5fc      	bpl.n	ee44 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ee4a:	78c9      	ldrb	r1, [r1, #3]
    ee4c:	0749      	lsls	r1, r1, #29
    ee4e:	d4f9      	bmi.n	ee44 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ee50:	2004      	movs	r0, #4
    ee52:	4770      	bx	lr
    ee54:	f3c0 0180 	ubfx	r1, r0, #2, #1
    ee58:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ee5c:	4411      	add	r1, r2
    ee5e:	f000 0001 	and.w	r0, r0, #1
    ee62:	4408      	add	r0, r1
    ee64:	4770      	bx	lr

0000ee66 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    ee66:	f240 315a 	movw	r1, #858	; 0x35a
    ee6a:	4348      	muls	r0, r1
    ee6c:	4770      	bx	lr

0000ee6e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    ee6e:	f240 20ef 	movw	r0, #751	; 0x2ef
    ee72:	4770      	bx	lr
    ee74:	041c020e 	.word	0x041c020e
    ee78:	0c600630 	.word	0x0c600630
    ee7c:	06b4035a 	.word	0x06b4035a
    ee80:	0bf505c5 	.word	0x0bf505c5
    ee84:	01a31225 	.word	0x01a31225
    ee88:	05bf03b1 	.word	0x05bf03b1
    ee8c:	064902ef 	.word	0x064902ef
    ee90:	09a3      	.short	0x09a3

0000ee92 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ee92:	b510      	push	{r4, lr}
    ee94:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ee98:	b109      	cbz	r1, ee9e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ee9a:	2000      	movs	r0, #0
    ee9c:	bd10      	pop	{r4, pc}
    ee9e:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    eea2:	b131      	cbz	r1, eeb2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    eea4:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    eea8:	428a      	cmp	r2, r1
    eeaa:	d902      	bls.n	eeb2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    eeac:	f7f4 ff8e 	bl	3dcc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eeb0:	e7f3      	b.n	ee9a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    eeb2:	2001      	movs	r0, #1
    eeb4:	bd10      	pop	{r4, pc}

0000eeb6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    eeb6:	b510      	push	{r4, lr}
    eeb8:	b131      	cbz	r1, eec8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    eeba:	2901      	cmp	r1, #1
    eebc:	d008      	beq.n	eed0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    eebe:	f240 717a 	movw	r1, #1914	; 0x77a
    eec2:	2030      	movs	r0, #48	; 0x30
    eec4:	f7f2 fa6c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eecc:	f000 b9b7 	b.w	f23e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    eed0:	2100      	movs	r1, #0
    eed2:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    eed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eeda:	f000 b913 	b.w	f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000eede <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    eede:	b510      	push	{r4, lr}
    eee0:	4604      	mov	r4, r0
    eee2:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    eee6:	2800      	cmp	r0, #0
    eee8:	d019      	beq.n	ef1e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    eeea:	2001      	movs	r0, #1
    eeec:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    eef0:	4601      	mov	r1, r0
    eef2:	4620      	mov	r0, r4
    eef4:	f7ff fe6f 	bl	ebd6 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    eef8:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    eefc:	b170      	cbz	r0, ef1c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    eefe:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ef02:	f7fb fd05 	bl	a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ef06:	7820      	ldrb	r0, [r4, #0]
    ef08:	f7fb fe66 	bl	abd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ef0c:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ef10:	f7fb fe40 	bl	ab94 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ef14:	b120      	cbz	r0, ef20 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ef16:	2000      	movs	r0, #0
    ef18:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    ef1c:	2000      	movs	r0, #0
    ef1e:	bd10      	pop	{r4, pc}
    ef20:	f240 2105 	movw	r1, #517	; 0x205
    ef24:	2030      	movs	r0, #48	; 0x30
    ef26:	f7f2 fa3b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef2a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ef2a:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ef2e:	4770      	bx	lr

0000ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ef30:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ef34:	4770      	bx	lr

0000ef36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ef36:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef38:	4604      	mov	r4, r0
    ef3a:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    ef3e:	2800      	cmp	r0, #0
    ef40:	d15f      	bne.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef42:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ef46:	2803      	cmp	r0, #3
    ef48:	d15b      	bne.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef4a:	f7fc f96d 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ef4e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    ef52:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    ef56:	1ac0      	subs	r0, r0, r3
    ef58:	eb61 0102 	sbc.w	r1, r1, r2
    ef5c:	2300      	movs	r3, #0
    ef5e:	461a      	mov	r2, r3
    ef60:	1a1b      	subs	r3, r3, r0
    ef62:	418a      	sbcs	r2, r1
    ef64:	da4d      	bge.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef66:	1c42      	adds	r2, r0, #1
    ef68:	f171 0100 	sbcs.w	r1, r1, #0
    ef6c:	db02      	blt.n	ef74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    ef6e:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
    ef72:	e036      	b.n	efe2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    ef74:	6921      	ldr	r1, [r4, #16]
    ef76:	b111      	cbz	r1, ef7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    ef78:	fbb0 f0f1 	udiv	r0, r0, r1
    ef7c:	e000      	b.n	ef80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    ef7e:	2000      	movs	r0, #0
    ef80:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    ef84:	1c40      	adds	r0, r0, #1
    ef86:	4408      	add	r0, r1
    ef88:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    ef8c:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ef90:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    ef94:	1a08      	subs	r0, r1, r0
    ef96:	b200      	sxth	r0, r0
    ef98:	2800      	cmp	r0, #0
    ef9a:	dd32      	ble.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef9c:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    efa0:	f7fb fcb6 	bl	a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    efa4:	2800      	cmp	r0, #0
    efa6:	d02c      	beq.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efa8:	20ff      	movs	r0, #255	; 0xff
    efaa:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    efae:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    efb2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    efb6:	ae01      	add	r6, sp, #4
    efb8:	1a40      	subs	r0, r0, r1
    efba:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    efbe:	1e40      	subs	r0, r0, #1
    efc0:	4408      	add	r0, r1
    efc2:	b285      	uxth	r5, r0
    efc4:	e017      	b.n	eff6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    efc6:	9600      	str	r6, [sp, #0]
    efc8:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    efcc:	2300      	movs	r3, #0
    efce:	2201      	movs	r2, #1
    efd0:	4620      	mov	r0, r4
    efd2:	f7f5 ff07 	bl	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    efd6:	2800      	cmp	r0, #0
    efd8:	d013      	beq.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efda:	2801      	cmp	r0, #1
    efdc:	d004      	beq.n	efe8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    efde:	f240 51f9 	movw	r1, #1529	; 0x5f9
    efe2:	2030      	movs	r0, #48	; 0x30
    efe4:	f7f2 f9dc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efe8:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    efec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    eff0:	4408      	add	r0, r1
    eff2:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    eff6:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    effa:	1a28      	subs	r0, r5, r0
    effc:	b200      	sxth	r0, r0
    effe:	2800      	cmp	r0, #0
    f000:	dae1      	bge.n	efc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f002:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f004:	2000      	movs	r0, #0
    f006:	4770      	bx	lr
    f008:	b570      	push	{r4, r5, r6, lr}
    f00a:	4604      	mov	r4, r0
    f00c:	f000 f8f0 	bl	f1f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    f010:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f014:	2000      	movs	r0, #0
    f016:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    f01a:	4601      	mov	r1, r0
    f01c:	2501      	movs	r5, #1
    f01e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    f022:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    f026:	4606      	mov	r6, r0
    f028:	f7fe ff60 	bl	deec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f02c:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f030:	1c40      	adds	r0, r0, #1
    f032:	280a      	cmp	r0, #10
    f034:	d201      	bcs.n	f03a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    f036:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    f03a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f03e:	b138      	cbz	r0, f050 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f040:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f044:	1c40      	adds	r0, r0, #1
    f046:	280a      	cmp	r0, #10
    f048:	d302      	bcc.n	f050 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f04a:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    f04e:	e002      	b.n	f056 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    f050:	2002      	movs	r0, #2
    f052:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    f056:	4620      	mov	r0, r4
    f058:	f000 f822 	bl	f0a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    f05c:	b120      	cbz	r0, f068 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    f05e:	4620      	mov	r0, r4
    f060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f064:	f000 b80d 	b.w	f082 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    f068:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f06c:	4631      	mov	r1, r6
    f06e:	f000 f8bd 	bl	f1ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f072:	2800      	cmp	r0, #0
    f074:	d104      	bne.n	f080 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    f076:	f240 618e 	movw	r1, #1678	; 0x68e
    f07a:	2030      	movs	r0, #48	; 0x30
    f07c:	f7f2 f990 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f080:	bd70      	pop	{r4, r5, r6, pc}
    f082:	b510      	push	{r4, lr}
    f084:	4604      	mov	r4, r0
    f086:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f08a:	f7fb fd83 	bl	ab94 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f08e:	2000      	movs	r0, #0
    f090:	7620      	strb	r0, [r4, #24]
    f092:	bd10      	pop	{r4, pc}
    f094:	b510      	push	{r4, lr}
    f096:	f7ff fd4b 	bl	eb30 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f09a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    f09e:	bd10      	pop	{r4, pc}
    f0a0:	b570      	push	{r4, r5, r6, lr}
    f0a2:	4605      	mov	r5, r0
    f0a4:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    f0a8:	b108      	cbz	r0, f0ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    f0aa:	2001      	movs	r0, #1
    f0ac:	bd70      	pop	{r4, r5, r6, pc}
    f0ae:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    f0b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f0b6:	4050      	eors	r0, r2
    f0b8:	ea70 0101 	orns	r1, r0, r1
    f0bc:	d012      	beq.n	f0e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    f0be:	2400      	movs	r4, #0
    f0c0:	4621      	mov	r1, r4
    f0c2:	4628      	mov	r0, r5
    f0c4:	f7ff ffe6 	bl	f094 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    f0c8:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    f0cc:	1840      	adds	r0, r0, r1
    f0ce:	4154      	adcs	r4, r2
    f0d0:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f0d4:	3df8      	subs	r5, #248	; 0xf8
    f0d6:	1a10      	subs	r0, r2, r0
    f0d8:	41a1      	sbcs	r1, r4
    f0da:	d503      	bpl.n	f0e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    f0dc:	4628      	mov	r0, r5
    f0de:	f7f4 fe75 	bl	3dcc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f0e2:	e7e2      	b.n	f0aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    f0e4:	2000      	movs	r0, #0
    f0e6:	bd70      	pop	{r4, r5, r6, pc}
    f0e8:	b510      	push	{r4, lr}
    f0ea:	4604      	mov	r4, r0
    f0ec:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    f0f0:	f000 f9ef 	bl	f4d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    f0f4:	4602      	mov	r2, r0
    f0f6:	4620      	mov	r0, r4
    f0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0fc:	f240 111b 	movw	r1, #283	; 0x11b
    f100:	f7ff ba5c 	b.w	e5bc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f104:	b510      	push	{r4, lr}
    f106:	f7f8 ffe9 	bl	80dc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f10e:	f7fb bea3 	b.w	ae58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f116:	4604      	mov	r4, r0
    f118:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    f11c:	2800      	cmp	r0, #0
    f11e:	d051      	beq.n	f1c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    f120:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f124:	2803      	cmp	r0, #3
    f126:	d14d      	bne.n	f1c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    f128:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    f12c:	f001 fbbc 	bl	108a8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f130:	4605      	mov	r5, r0
    f132:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f136:	f7f5 fd77 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f13a:	4428      	add	r0, r5
    f13c:	b286      	uxth	r6, r0
    f13e:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f142:	f7f5 fd71 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f146:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f14a:	fa1f f880 	uxth.w	r8, r0
    f14e:	4648      	mov	r0, r9
    f150:	f7f9 f882 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f154:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    f158:	1a0d      	subs	r5, r1, r0
    f15a:	4648      	mov	r0, r9
    f15c:	f7f9 f8a8 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f160:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f164:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f168:	fbb0 f0fa 	udiv	r0, r0, sl
    f16c:	1a2d      	subs	r5, r5, r0
    f16e:	4648      	mov	r0, r9
    f170:	f7f9 f872 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f174:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    f178:	1a0f      	subs	r7, r1, r0
    f17a:	4648      	mov	r0, r9
    f17c:	f7f9 f898 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f180:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f184:	4401      	add	r1, r0
    f186:	fbb1 f0fa 	udiv	r0, r1, sl
    f18a:	1a39      	subs	r1, r7, r0
    f18c:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f190:	4370      	muls	r0, r6
    f192:	fbb0 f2f8 	udiv	r2, r0, r8
    f196:	2029      	movs	r0, #41	; 0x29
    f198:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f19c:	3260      	adds	r2, #96	; 0x60
    f19e:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f1a2:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f1a6:	42a9      	cmp	r1, r5
    f1a8:	d801      	bhi.n	f1ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    f1aa:	4285      	cmp	r5, r0
    f1ac:	d901      	bls.n	f1b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    f1ae:	f7fd f86f 	bl	c290 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f1b2:	4631      	mov	r1, r6
    f1b4:	6920      	ldr	r0, [r4, #16]
    f1b6:	f7fd f8d3 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f1ba:	2100      	movs	r1, #0
    f1bc:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f1c0:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1c8:	b570      	push	{r4, r5, r6, lr}
    f1ca:	460c      	mov	r4, r1
    f1cc:	4605      	mov	r5, r0
    f1ce:	f7f9 f86f 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1d2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f1d6:	4408      	add	r0, r1
    f1d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f1dc:	fbb0 f6f1 	udiv	r6, r0, r1
    f1e0:	4628      	mov	r0, r5
    f1e2:	f7f9 f839 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f1e6:	4430      	add	r0, r6
    f1e8:	4420      	add	r0, r4
    f1ea:	bd70      	pop	{r4, r5, r6, pc}
    f1ec:	f7fb b872 	b.w	a2d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f1f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f1f2:	4604      	mov	r4, r0
    f1f4:	f7ff fcc3 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f1f8:	b1f8      	cbz	r0, f23a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    f1fa:	4620      	mov	r0, r4
    f1fc:	f7ff fcb7 	bl	eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f200:	b918      	cbnz	r0, f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    f202:	4620      	mov	r0, r4
    f204:	f7ff fcbd 	bl	eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f208:	b140      	cbz	r0, f21c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    f20a:	2455      	movs	r4, #85	; 0x55
    f20c:	4668      	mov	r0, sp
    f20e:	f7fd faff 	bl	c810 <mpsl_fem_pa_is_configured>
    f212:	f89d 0000 	ldrb.w	r0, [sp]
    f216:	b118      	cbz	r0, f220 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    f218:	2501      	movs	r5, #1
    f21a:	e002      	b.n	f222 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    f21c:	2450      	movs	r4, #80	; 0x50
    f21e:	e7f5      	b.n	f20c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f220:	2500      	movs	r5, #0
    f222:	a801      	add	r0, sp, #4
    f224:	f7fd fadc 	bl	c7e0 <mpsl_fem_lna_is_configured>
    f228:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f22c:	b100      	cbz	r0, f230 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    f22e:	2001      	movs	r0, #1
    f230:	4305      	orrs	r5, r0
    f232:	d000      	beq.n	f236 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    f234:	340a      	adds	r4, #10
    f236:	4620      	mov	r0, r4
    f238:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f23a:	2061      	movs	r0, #97	; 0x61
    f23c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f23e:	b570      	push	{r4, r5, r6, lr}
    f240:	4604      	mov	r4, r0
    f242:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f244:	2500      	movs	r5, #0
    f246:	b130      	cbz	r0, f256 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f248:	f7f4 fa58 	bl	36fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f24c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f24e:	fbb0 f2f1 	udiv	r2, r0, r1
    f252:	fb01 0512 	mls	r5, r1, r2, r0
    f256:	4620      	mov	r0, r4
    f258:	f7ff fc66 	bl	eb28 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f25c:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    f260:	4428      	add	r0, r5
    f262:	34e8      	adds	r4, #232	; 0xe8
    f264:	2500      	movs	r5, #0
    f266:	1882      	adds	r2, r0, r2
    f268:	eb45 0001 	adc.w	r0, r5, r1
    f26c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f270:	f804 5b0b 	strb.w	r5, [r4], #11
    f274:	2001      	movs	r0, #1
    f276:	f804 0901 	strb.w	r0, [r4], #-1
    f27a:	2002      	movs	r0, #2
    f27c:	f804 09f2 	strb.w	r0, [r4], #-242
    f280:	4620      	mov	r0, r4
    f282:	f7ff ffb5 	bl	f1f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    f286:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f28a:	4620      	mov	r0, r4
    f28c:	f7ff ff08 	bl	f0a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    f290:	b930      	cbnz	r0, f2a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    f292:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f296:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    f29a:	f7ff ffa7 	bl	f1ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f29e:	b128      	cbz	r0, f2ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    f2a0:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    f2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f2a8:	f7ff bf2c 	b.w	f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    f2ac:	f240 61d4 	movw	r1, #1748	; 0x6d4
    f2b0:	2030      	movs	r0, #48	; 0x30
    f2b2:	f7f2 f875 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2b6:	b510      	push	{r4, lr}
    f2b8:	4604      	mov	r4, r0
    f2ba:	2000      	movs	r0, #0
    f2bc:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f2c0:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f2c4:	f7fb fc66 	bl	ab94 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f2c8:	2020      	movs	r0, #32
    f2ca:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f2ce:	bd10      	pop	{r4, pc}
    f2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f2d4:	4604      	mov	r4, r0
    f2d6:	2500      	movs	r5, #0
    f2d8:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    f2dc:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    f2e0:	4689      	mov	r9, r1
    f2e2:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f2e6:	f04f 0801 	mov.w	r8, #1
    f2ea:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    f2ee:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    f2f2:	4641      	mov	r1, r8
    f2f4:	34c8      	adds	r4, #200	; 0xc8
    f2f6:	f7f3 fe19 	bl	2f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f2fa:	6860      	ldr	r0, [r4, #4]
    f2fc:	f8c0 6290 	str.w	r6, [r0, #656]	; 0x290
    f300:	f8c0 7294 	str.w	r7, [r0, #660]	; 0x294
    f304:	6861      	ldr	r1, [r4, #4]
    f306:	7820      	ldrb	r0, [r4, #0]
    f308:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    f30c:	6861      	ldr	r1, [r4, #4]
    f30e:	f8c1 92a8 	str.w	r9, [r1, #680]	; 0x2a8
    f312:	6860      	ldr	r0, [r4, #4]
    f314:	e9c0 67a6 	strd	r6, r7, [r0, #664]	; 0x298
    f318:	6864      	ldr	r4, [r4, #4]
    f31a:	f884 525c 	strb.w	r5, [r4, #604]	; 0x25c
    f31e:	2300      	movs	r3, #0
    f320:	f8a4 52a0 	strh.w	r5, [r4, #672]	; 0x2a0
    f324:	461a      	mov	r2, r3
    f326:	4619      	mov	r1, r3
    f328:	4620      	mov	r0, r4
    f32a:	9500      	str	r5, [sp, #0]
    f32c:	f7f5 fd5a 	bl	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f330:	b120      	cbz	r0, f33c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    f332:	f240 2119 	movw	r1, #537	; 0x219
    f336:	2030      	movs	r0, #48	; 0x30
    f338:	f7f2 f832 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f33c:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f340:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f344:	f884 825c 	strb.w	r8, [r4, #604]	; 0x25c
    f348:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f34c:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f350:	3494      	adds	r4, #148	; 0x94
    f352:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f356:	8820      	ldrh	r0, [r4, #0]
    f358:	1e40      	subs	r0, r0, #1
    f35a:	8020      	strh	r0, [r4, #0]
    f35c:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f360:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f364:	f7ff bece 	b.w	f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    f368:	b570      	push	{r4, r5, r6, lr}
    f36a:	b140      	cbz	r0, f37e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    f36c:	2909      	cmp	r1, #9
    f36e:	d249      	bcs.n	f404 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    f370:	e8df f001 	tbb	[pc, r1]
    f374:	3c3c1507 	.word	0x3c3c1507
    f378:	402a4838 	.word	0x402a4838
    f37c:	0044      	.short	0x0044
    f37e:	21cb      	movs	r1, #203	; 0xcb
    f380:	e03d      	b.n	f3fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f382:	4604      	mov	r4, r0
    f384:	f7f4 fcf2 	bl	3d6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f388:	b110      	cbz	r0, f390 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    f38a:	f240 2175 	movw	r1, #629	; 0x275
    f38e:	e036      	b.n	f3fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f390:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f398:	38ff      	subs	r0, #255	; 0xff
    f39a:	f7fb be77 	b.w	b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f39e:	4605      	mov	r5, r0
    f3a0:	f7ff fbe9 	bl	eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f3a4:	b9b0      	cbnz	r0, f3d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    f3a6:	2100      	movs	r1, #0
    f3a8:	4628      	mov	r0, r5
    f3aa:	f7ff fe73 	bl	f094 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    f3ae:	4604      	mov	r4, r0
    f3b0:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f3b4:	42a0      	cmp	r0, r4
    f3b6:	d20b      	bcs.n	f3d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    f3b8:	1a20      	subs	r0, r4, r0
    f3ba:	2103      	movs	r1, #3
    f3bc:	f7fa fdb6 	bl	9f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f3c0:	b130      	cbz	r0, f3d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    f3c2:	4628      	mov	r0, r5
    f3c4:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f3c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3cc:	f7ff bbaa 	b.w	eb24 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f3d0:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f3d4:	4628      	mov	r0, r5
    f3d6:	f7f4 fce5 	bl	3da4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f3da:	2800      	cmp	r0, #0
    f3dc:	d014      	beq.n	f408 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    f3de:	f240 21a9 	movw	r1, #681	; 0x2a9
    f3e2:	e00c      	b.n	f3fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3e8:	f7f9 b84c 	b.w	8484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f3ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3f0:	f7ff be0a 	b.w	f008 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3f8:	f7ff be43 	b.w	f082 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    f3fc:	21eb      	movs	r1, #235	; 0xeb
    f3fe:	2030      	movs	r0, #48	; 0x30
    f400:	f7f1 ffce 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f404:	21ef      	movs	r1, #239	; 0xef
    f406:	e7fa      	b.n	f3fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f408:	bd70      	pop	{r4, r5, r6, pc}
    f40a:	b510      	push	{r4, lr}
    f40c:	0004      	movs	r4, r0
    f40e:	d008      	beq.n	f422 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    f410:	2909      	cmp	r1, #9
    f412:	d25c      	bcs.n	f4ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    f414:	e8df f001 	tbb	[pc, r1]
    f418:	40403807 	.word	0x40403807
    f41c:	4c455b3c 	.word	0x4c455b3c
    f420:	0057      	.short	0x0057
    f422:	2197      	movs	r1, #151	; 0x97
    f424:	e050      	b.n	f4c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f426:	2100      	movs	r1, #0
    f428:	f8c4 12ac 	str.w	r1, [r4, #684]	; 0x2ac
    f42c:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f430:	4620      	mov	r0, r4
    f432:	b189      	cbz	r1, f458 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    f434:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f438:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f43c:	428a      	cmp	r2, r1
    f43e:	d106      	bne.n	f44e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    f440:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f444:	1a51      	subs	r1, r2, r1
    f446:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f44a:	4611      	mov	r1, r2
    f44c:	e00d      	b.n	f46a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f44e:	1a51      	subs	r1, r2, r1
    f450:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f454:	b291      	uxth	r1, r2
    f456:	e008      	b.n	f46a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f458:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f45c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f460:	1a89      	subs	r1, r1, r2
    f462:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f466:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f46a:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f46e:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f472:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f476:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f47a:	f7f6 f887 	bl	558c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f47e:	4620      	mov	r0, r4
    f480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f484:	f7f5 beb8 	b.w	51f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    f488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f48c:	f000 b83c 	b.w	f508 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f494:	f7f8 bff6 	b.w	8484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f498:	4620      	mov	r0, r4
    f49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f49e:	f7f5 bee5 	b.w	526c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x680>
    f4a2:	2001      	movs	r0, #1
    f4a4:	f7fa fd32 	bl	9f0c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4ac:	f7fe bbc3 	b.w	dc36 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f4b0:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f4b4:	2804      	cmp	r0, #4
    f4b6:	d001      	beq.n	f4bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    f4b8:	21b9      	movs	r1, #185	; 0xb9
    f4ba:	e005      	b.n	f4c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f4bc:	4620      	mov	r0, r4
    f4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4c2:	f7ff bef8 	b.w	f2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f4c6:	21bf      	movs	r1, #191	; 0xbf
    f4c8:	2030      	movs	r0, #48	; 0x30
    f4ca:	f7f1 ff69 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4ce:	21c3      	movs	r1, #195	; 0xc3
    f4d0:	e7fa      	b.n	f4c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f4d2:	b510      	push	{r4, lr}
    f4d4:	f7f8 feec 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f4d8:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f4dc:	4408      	add	r0, r1
    f4de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f4e2:	fbb0 f0f1 	udiv	r0, r0, r1
    f4e6:	f200 1079 	addw	r0, r0, #377	; 0x179
    f4ea:	bd10      	pop	{r4, pc}
    f4ec:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f4f0:	f001 0307 	and.w	r3, r1, #7
    f4f4:	7802      	ldrb	r2, [r0, #0]
    f4f6:	2101      	movs	r1, #1
    f4f8:	4099      	lsls	r1, r3
    f4fa:	438a      	bics	r2, r1
    f4fc:	7002      	strb	r2, [r0, #0]
    f4fe:	4770      	bx	lr

0000f500 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f500:	f7f2 bad8 	b.w	1ab4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f504 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f504:	2000      	movs	r0, #0
    f506:	4770      	bx	lr

0000f508 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f508:	f7f2 bf68 	b.w	23dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f50c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f50c:	2100      	movs	r1, #0
    f50e:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f512:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f516:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f51a:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f51e:	b109      	cbz	r1, f524 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f520:	2102      	movs	r1, #2
    f522:	e000      	b.n	f526 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f524:	2103      	movs	r1, #3
    f526:	f7f5 bb27 	b.w	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f52a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f52e:	28fe      	cmp	r0, #254	; 0xfe
    f530:	d001      	beq.n	f536 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f532:	2001      	movs	r0, #1
    f534:	4770      	bx	lr
    f536:	2000      	movs	r0, #0
    f538:	4770      	bx	lr
    f53a:	b510      	push	{r4, lr}
    f53c:	2801      	cmp	r0, #1
    f53e:	d006      	beq.n	f54e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f540:	2802      	cmp	r0, #2
    f542:	d004      	beq.n	f54e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f544:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    f548:	2006      	movs	r0, #6
    f54a:	f7f1 ff29 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f54e:	bd10      	pop	{r4, pc}
    f550:	2801      	cmp	r0, #1
    f552:	d002      	beq.n	f55a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f554:	2802      	cmp	r0, #2
    f556:	d105      	bne.n	f564 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f558:	e002      	b.n	f560 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f55a:	2901      	cmp	r1, #1
    f55c:	d004      	beq.n	f568 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f55e:	e001      	b.n	f564 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f560:	2902      	cmp	r1, #2
    f562:	d001      	beq.n	f568 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f564:	2000      	movs	r0, #0
    f566:	4770      	bx	lr
    f568:	2001      	movs	r0, #1
    f56a:	4770      	bx	lr
    f56c:	1a40      	subs	r0, r0, r1
    f56e:	b200      	sxth	r0, r0
    f570:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f574:	4288      	cmp	r0, r1
    f576:	dc01      	bgt.n	f57c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f578:	2800      	cmp	r0, #0
    f57a:	dc01      	bgt.n	f580 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f57c:	2001      	movs	r0, #1
    f57e:	4770      	bx	lr
    f580:	2000      	movs	r0, #0
    f582:	4770      	bx	lr
    f584:	6842      	ldr	r2, [r0, #4]
    f586:	2100      	movs	r1, #0
    f588:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f58c:	6842      	ldr	r2, [r0, #4]
    f58e:	f882 10d6 	strb.w	r1, [r2, #214]	; 0xd6
    f592:	6840      	ldr	r0, [r0, #4]
    f594:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    f598:	4770      	bx	lr
    f59a:	b510      	push	{r4, lr}
    f59c:	4604      	mov	r4, r0
    f59e:	6840      	ldr	r0, [r0, #4]
    f5a0:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    f5a4:	0740      	lsls	r0, r0, #29
    f5a6:	d501      	bpl.n	f5ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa0>
    f5a8:	2001      	movs	r0, #1
    f5aa:	bd10      	pop	{r4, pc}
    f5ac:	f7f6 f8f0 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f5b0:	6860      	ldr	r0, [r4, #4]
    f5b2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f5b6:	f041 0104 	orr.w	r1, r1, #4
    f5ba:	6001      	str	r1, [r0, #0]
    f5bc:	2000      	movs	r0, #0
    f5be:	bd10      	pop	{r4, pc}
    f5c0:	b510      	push	{r4, lr}
    f5c2:	4604      	mov	r4, r0
    f5c4:	6840      	ldr	r0, [r0, #4]
    f5c6:	2301      	movs	r3, #1
    f5c8:	2109      	movs	r1, #9
    f5ca:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f5ce:	3080      	adds	r0, #128	; 0x80
    f5d0:	f7fe fbc2 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f5d4:	2800      	cmp	r0, #0
    f5d6:	d009      	beq.n	f5ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe0>
    f5d8:	6861      	ldr	r1, [r4, #4]
    f5da:	2000      	movs	r0, #0
    f5dc:	f881 00ca 	strb.w	r0, [r1, #202]	; 0xca
    f5e0:	6861      	ldr	r1, [r4, #4]
    f5e2:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    f5e6:	6861      	ldr	r1, [r4, #4]
    f5e8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f5ec:	bd10      	pop	{r4, pc}
    f5ee:	b510      	push	{r4, lr}
    f5f0:	4604      	mov	r4, r0
    f5f2:	6840      	ldr	r0, [r0, #4]
    f5f4:	2301      	movs	r3, #1
    f5f6:	2100      	movs	r1, #0
    f5f8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    f5fc:	3080      	adds	r0, #128	; 0x80
    f5fe:	f7fe fbab 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f602:	2800      	cmp	r0, #0
    f604:	6860      	ldr	r0, [r4, #4]
    f606:	d00b      	beq.n	f620 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x114>
    f608:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    f60c:	2800      	cmp	r0, #0
    f60e:	d006      	beq.n	f61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x112>
    f610:	f7f6 f8be 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f614:	6861      	ldr	r1, [r4, #4]
    f616:	2011      	movs	r0, #17
    f618:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f61c:	2000      	movs	r0, #0
    f61e:	bd10      	pop	{r4, pc}
    f620:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    f624:	2301      	movs	r3, #1
    f626:	2105      	movs	r1, #5
    f628:	3080      	adds	r0, #128	; 0x80
    f62a:	f7fe fb95 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f62e:	b108      	cbz	r0, f634 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x128>
    f630:	2008      	movs	r0, #8
    f632:	bd10      	pop	{r4, pc}
    f634:	2001      	movs	r0, #1
    f636:	bd10      	pop	{r4, pc}
    f638:	6840      	ldr	r0, [r0, #4]
    f63a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f63e:	2912      	cmp	r1, #18
    f640:	d001      	beq.n	f646 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x13a>
    f642:	2002      	movs	r0, #2
    f644:	4770      	bx	lr
    f646:	2113      	movs	r1, #19
    f648:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f64c:	2000      	movs	r0, #0
    f64e:	4770      	bx	lr
    f650:	b510      	push	{r4, lr}
    f652:	4604      	mov	r4, r0
    f654:	6840      	ldr	r0, [r0, #4]
    f656:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    f65a:	2818      	cmp	r0, #24
    f65c:	d001      	beq.n	f662 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x156>
    f65e:	2002      	movs	r0, #2
    f660:	bd10      	pop	{r4, pc}
    f662:	f7f6 f8a1 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f666:	6861      	ldr	r1, [r4, #4]
    f668:	201c      	movs	r0, #28
    f66a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f66e:	2000      	movs	r0, #0
    f670:	bd10      	pop	{r4, pc}
    f672:	b510      	push	{r4, lr}
    f674:	6843      	ldr	r3, [r0, #4]
    f676:	4604      	mov	r4, r0
    f678:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f67c:	2808      	cmp	r0, #8
    f67e:	d20d      	bcs.n	f69c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x190>
    f680:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f684:	f1c0 0008 	rsb	r0, r0, #8
    f688:	b2c1      	uxtb	r1, r0
    f68a:	1898      	adds	r0, r3, r2
    f68c:	f7f1 ff28 	bl	14e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f690:	6861      	ldr	r1, [r4, #4]
    f692:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f696:	4410      	add	r0, r2
    f698:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f69c:	6862      	ldr	r2, [r4, #4]
    f69e:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f6a2:	3908      	subs	r1, #8
    f6a4:	2904      	cmp	r1, #4
    f6a6:	d20d      	bcs.n	f6c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b8>
    f6a8:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f6ac:	f1c1 0104 	rsb	r1, r1, #4
    f6b0:	b2c9      	uxtb	r1, r1
    f6b2:	4410      	add	r0, r2
    f6b4:	f7f1 ff14 	bl	14e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f6b8:	6861      	ldr	r1, [r4, #4]
    f6ba:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f6be:	4410      	add	r0, r2
    f6c0:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f6c4:	6860      	ldr	r0, [r4, #4]
    f6c6:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f6ca:	290c      	cmp	r1, #12
    f6cc:	d30f      	bcc.n	f6ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e2>
    f6ce:	d005      	beq.n	f6dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d0>
    f6d0:	f640 1176 	movw	r1, #2422	; 0x976
    f6d4:	f04f 0031 	mov.w	r0, #49	; 0x31
    f6d8:	f7f1 fe62 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6dc:	2100      	movs	r1, #0
    f6de:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f6e2:	2101      	movs	r1, #1
    f6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6e8:	2004      	movs	r0, #4
    f6ea:	f7f6 be05 	b.w	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    f6ee:	bd10      	pop	{r4, pc}
    f6f0:	6842      	ldr	r2, [r0, #4]
    f6f2:	2131      	movs	r1, #49	; 0x31
    f6f4:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f6f8:	6840      	ldr	r0, [r0, #4]
    f6fa:	2100      	movs	r1, #0
    f6fc:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f700:	4770      	bx	lr
    f702:	b510      	push	{r4, lr}
    f704:	6841      	ldr	r1, [r0, #4]
    f706:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f70a:	2a15      	cmp	r2, #21
    f70c:	d004      	beq.n	f718 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x20c>
    f70e:	f640 011b 	movw	r1, #2075	; 0x81b
    f712:	2031      	movs	r0, #49	; 0x31
    f714:	f7f1 fe44 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f718:	2201      	movs	r2, #1
    f71a:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f71e:	6840      	ldr	r0, [r0, #4]
    f720:	2116      	movs	r1, #22
    f722:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f726:	bd10      	pop	{r4, pc}
    f728:	f7ff b8ca 	b.w	e8c0 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f72c:	b510      	push	{r4, lr}
    f72e:	4604      	mov	r4, r0
    f730:	6840      	ldr	r0, [r0, #4]
    f732:	2301      	movs	r3, #1
    f734:	2100      	movs	r1, #0
    f736:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f73a:	3080      	adds	r0, #128	; 0x80
    f73c:	f7fe fb0c 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f740:	b120      	cbz	r0, f74c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x240>
    f742:	6861      	ldr	r1, [r4, #4]
    f744:	201d      	movs	r0, #29
    f746:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f74a:	bd10      	pop	{r4, pc}
    f74c:	f640 017e 	movw	r1, #2174	; 0x87e
    f750:	2031      	movs	r0, #49	; 0x31
    f752:	f7f1 fe25 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f756:	b510      	push	{r4, lr}
    f758:	6841      	ldr	r1, [r0, #4]
    f75a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    f75e:	06c2      	lsls	r2, r0, #27
    f760:	d402      	bmi.n	f768 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x25c>
    f762:	f640 0185 	movw	r1, #2181	; 0x885
    f766:	e003      	b.n	f770 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x264>
    f768:	0682      	lsls	r2, r0, #26
    f76a:	d504      	bpl.n	f776 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x26a>
    f76c:	f640 0186 	movw	r1, #2182	; 0x886
    f770:	2031      	movs	r0, #49	; 0x31
    f772:	f7f1 fe15 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f776:	f020 0010 	bic.w	r0, r0, #16
    f77a:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    f77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f782:	f7f6 b811 	b.w	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f786:	b510      	push	{r4, lr}
    f788:	4604      	mov	r4, r0
    f78a:	6840      	ldr	r0, [r0, #4]
    f78c:	2301      	movs	r3, #1
    f78e:	2100      	movs	r1, #0
    f790:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f794:	3080      	adds	r0, #128	; 0x80
    f796:	f7fe fadf 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f79a:	b120      	cbz	r0, f7a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x29a>
    f79c:	6861      	ldr	r1, [r4, #4]
    f79e:	200f      	movs	r0, #15
    f7a0:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f7a4:	bd10      	pop	{r4, pc}
    f7a6:	f640 0171 	movw	r1, #2161	; 0x871
    f7aa:	2031      	movs	r0, #49	; 0x31
    f7ac:	f7f1 fdf8 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7b0:	6840      	ldr	r0, [r0, #4]
    f7b2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f7b6:	f021 0104 	bic.w	r1, r1, #4
    f7ba:	6001      	str	r1, [r0, #0]
    f7bc:	f7f5 bff4 	b.w	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f7c0:	b510      	push	{r4, lr}
    f7c2:	6841      	ldr	r1, [r0, #4]
    f7c4:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f7c8:	2a11      	cmp	r2, #17
    f7ca:	d004      	beq.n	f7d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ca>
    f7cc:	f640 0113 	movw	r1, #2067	; 0x813
    f7d0:	2031      	movs	r0, #49	; 0x31
    f7d2:	f7f1 fde5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7d6:	2201      	movs	r2, #1
    f7d8:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f7dc:	6840      	ldr	r0, [r0, #4]
    f7de:	2112      	movs	r1, #18
    f7e0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f7e4:	bd10      	pop	{r4, pc}
    f7e6:	b510      	push	{r4, lr}
    f7e8:	4604      	mov	r4, r0
    f7ea:	6840      	ldr	r0, [r0, #4]
    f7ec:	2301      	movs	r3, #1
    f7ee:	2100      	movs	r1, #0
    f7f0:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f7f4:	3080      	adds	r0, #128	; 0x80
    f7f6:	f7fe faaf 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f7fa:	b120      	cbz	r0, f806 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2fa>
    f7fc:	6861      	ldr	r1, [r4, #4]
    f7fe:	2020      	movs	r0, #32
    f800:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f804:	bd10      	pop	{r4, pc}
    f806:	f44f 6109 	mov.w	r1, #2192	; 0x890
    f80a:	2031      	movs	r0, #49	; 0x31
    f80c:	f7f1 fdc8 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f810:	b510      	push	{r4, lr}
    f812:	6841      	ldr	r1, [r0, #4]
    f814:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f818:	2822      	cmp	r0, #34	; 0x22
    f81a:	d005      	beq.n	f828 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f81c:	b120      	cbz	r0, f828 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f81e:	f640 0197 	movw	r1, #2199	; 0x897
    f822:	2031      	movs	r0, #49	; 0x31
    f824:	f7f1 fdbc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f828:	2023      	movs	r0, #35	; 0x23
    f82a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f82e:	bd10      	pop	{r4, pc}
    f830:	b510      	push	{r4, lr}
    f832:	6840      	ldr	r0, [r0, #4]
    f834:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f838:	292f      	cmp	r1, #47	; 0x2f
    f83a:	d006      	beq.n	f84a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f83c:	2916      	cmp	r1, #22
    f83e:	d00b      	beq.n	f858 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x34c>
    f840:	f640 013d 	movw	r1, #2109	; 0x83d
    f844:	2031      	movs	r0, #49	; 0x31
    f846:	f7f1 fdab 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f84a:	2100      	movs	r1, #0
    f84c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f854:	f7f5 bfa8 	b.w	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f858:	211a      	movs	r1, #26
    f85a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f85e:	bd10      	pop	{r4, pc}
    f860:	b510      	push	{r4, lr}
    f862:	6840      	ldr	r0, [r0, #4]
    f864:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f868:	2916      	cmp	r1, #22
    f86a:	d004      	beq.n	f876 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36a>
    f86c:	f640 0128 	movw	r1, #2088	; 0x828
    f870:	2031      	movs	r0, #49	; 0x31
    f872:	f7f1 fd95 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f876:	211a      	movs	r1, #26
    f878:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f87c:	bd10      	pop	{r4, pc}
    f87e:	f7ff b80d 	b.w	e89c <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f882:	b510      	push	{r4, lr}
    f884:	6840      	ldr	r0, [r0, #4]
    f886:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f88a:	2916      	cmp	r1, #22
    f88c:	d004      	beq.n	f898 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    f88e:	f640 0122 	movw	r1, #2082	; 0x822
    f892:	2031      	movs	r0, #49	; 0x31
    f894:	f7f1 fd84 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f898:	2118      	movs	r1, #24
    f89a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f89e:	bd10      	pop	{r4, pc}
    f8a0:	b510      	push	{r4, lr}
    f8a2:	4604      	mov	r4, r0
    f8a4:	6840      	ldr	r0, [r0, #4]
    f8a6:	2301      	movs	r3, #1
    f8a8:	4619      	mov	r1, r3
    f8aa:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    f8ae:	3080      	adds	r0, #128	; 0x80
    f8b0:	f7fe fa52 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f8b4:	2800      	cmp	r0, #0
    f8b6:	d103      	bne.n	f8c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3b4>
    f8b8:	6861      	ldr	r1, [r4, #4]
    f8ba:	2007      	movs	r0, #7
    f8bc:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    f8c0:	bd10      	pop	{r4, pc}
    f8c2:	f7ff b84f 	b.w	e964 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f8c6:	b570      	push	{r4, r5, r6, lr}
    f8c8:	4614      	mov	r4, r2
    f8ca:	460e      	mov	r6, r1
    f8cc:	6861      	ldr	r1, [r4, #4]
    f8ce:	4602      	mov	r2, r0
    f8d0:	2500      	movs	r5, #0
    f8d2:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    f8d6:	2a0e      	cmp	r2, #14
    f8d8:	d00a      	beq.n	f8f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3e4>
    f8da:	2a12      	cmp	r2, #18
    f8dc:	d011      	beq.n	f902 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f6>
    f8de:	2a14      	cmp	r2, #20
    f8e0:	d016      	beq.n	f910 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x404>
    f8e2:	2a17      	cmp	r2, #23
    f8e4:	d022      	beq.n	f92c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x420>
    f8e6:	f240 4115 	movw	r1, #1045	; 0x415
    f8ea:	2031      	movs	r0, #49	; 0x31
    f8ec:	f7f1 fd58 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8f0:	2804      	cmp	r0, #4
    f8f2:	d12f      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f8f4:	4620      	mov	r0, r4
    f8f6:	f7ff fe45 	bl	f584 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f8fa:	4620      	mov	r0, r4
    f8fc:	f7f3 ffaa 	bl	3854 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    f900:	e028      	b.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f902:	280f      	cmp	r0, #15
    f904:	d126      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f906:	4620      	mov	r0, r4
    f908:	f7ff fe5a 	bl	f5c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xb4>
    f90c:	4605      	mov	r5, r0
    f90e:	e021      	b.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f910:	281d      	cmp	r0, #29
    f912:	d11f      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f914:	4620      	mov	r0, r4
    f916:	f7ff fe35 	bl	f584 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f91a:	b126      	cbz	r6, f926 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x41a>
    f91c:	6860      	ldr	r0, [r4, #4]
    f91e:	2105      	movs	r1, #5
    f920:	30ec      	adds	r0, #236	; 0xec
    f922:	f7ff fde3 	bl	f4ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    f926:	f7f6 f917 	bl	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    f92a:	e013      	b.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f92c:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f930:	2823      	cmp	r0, #35	; 0x23
    f932:	d10f      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f934:	2600      	movs	r6, #0
    f936:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    f93a:	f7f5 ff35 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f93e:	6860      	ldr	r0, [r4, #4]
    f940:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    f944:	2801      	cmp	r0, #1
    f946:	d102      	bne.n	f94e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x442>
    f948:	2000      	movs	r0, #0
    f94a:	f7f6 fde7 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    f94e:	6860      	ldr	r0, [r4, #4]
    f950:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    f954:	4628      	mov	r0, r5
    f956:	bd70      	pop	{r4, r5, r6, pc}
    f958:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f95c:	f001 0107 	and.w	r1, r1, #7
    f960:	7800      	ldrb	r0, [r0, #0]
    f962:	40c8      	lsrs	r0, r1
    f964:	f000 0001 	and.w	r0, r0, #1
    f968:	4770      	bx	lr

0000f96a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f96e:	6856      	ldr	r6, [r2, #4]
    f970:	460c      	mov	r4, r1
    f972:	f506 7598 	add.w	r5, r6, #304	; 0x130
    f976:	f106 0780 	add.w	r7, r6, #128	; 0x80
    f97a:	2823      	cmp	r0, #35	; 0x23
    f97c:	d008      	beq.n	f990 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f97e:	2824      	cmp	r0, #36	; 0x24
    f980:	d014      	beq.n	f9ac <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f982:	2825      	cmp	r0, #37	; 0x25
    f984:	d02a      	beq.n	f9dc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f986:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f98a:	2078      	movs	r0, #120	; 0x78
    f98c:	f7f1 fd08 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f990:	7de8      	ldrb	r0, [r5, #23]
    f992:	f000 f8d4 	bl	fb3e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f996:	7de9      	ldrb	r1, [r5, #23]
    f998:	7121      	strb	r1, [r4, #4]
    f99a:	7e29      	ldrb	r1, [r5, #24]
    f99c:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f9a0:	7161      	strb	r1, [r4, #5]
    f9a2:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f9a6:	71a0      	strb	r0, [r4, #6]
    f9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9ac:	7d28      	ldrb	r0, [r5, #20]
    f9ae:	f000 f8c6 	bl	fb3e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f9b2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f9b6:	7f78      	ldrb	r0, [r7, #29]
    f9b8:	366f      	adds	r6, #111	; 0x6f
    f9ba:	2828      	cmp	r0, #40	; 0x28
    f9bc:	d00c      	beq.n	f9d8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f9be:	68b8      	ldr	r0, [r7, #8]
    f9c0:	f7f3 ffb6 	bl	3930 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f9c4:	7831      	ldrb	r1, [r6, #0]
    f9c6:	7121      	strb	r1, [r4, #4]
    f9c8:	7d69      	ldrb	r1, [r5, #21]
    f9ca:	7161      	strb	r1, [r4, #5]
    f9cc:	7871      	ldrb	r1, [r6, #1]
    f9ce:	71a1      	strb	r1, [r4, #6]
    f9d0:	71e0      	strb	r0, [r4, #7]
    f9d2:	2000      	movs	r0, #0
    f9d4:	75a8      	strb	r0, [r5, #22]
    f9d6:	e7e7      	b.n	f9a8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f9d8:	20ff      	movs	r0, #255	; 0xff
    f9da:	e7f3      	b.n	f9c4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f9dc:	7d28      	ldrb	r0, [r5, #20]
    f9de:	f000 f8ae 	bl	fb3e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f9e2:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f9e6:	7d29      	ldrb	r1, [r5, #20]
    f9e8:	7121      	strb	r1, [r4, #4]
    f9ea:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f9ee:	7161      	strb	r1, [r4, #5]
    f9f0:	7d69      	ldrb	r1, [r5, #21]
    f9f2:	71a1      	strb	r1, [r4, #6]
    f9f4:	7840      	ldrb	r0, [r0, #1]
    f9f6:	71e0      	strb	r0, [r4, #7]
    f9f8:	e7d6      	b.n	f9a8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f9fa <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f9fa:	b510      	push	{r4, lr}
    f9fc:	2801      	cmp	r0, #1
    f9fe:	d006      	beq.n	fa0e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    fa00:	2802      	cmp	r0, #2
    fa02:	d006      	beq.n	fa12 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    fa04:	f240 2162 	movw	r1, #610	; 0x262
    fa08:	2078      	movs	r0, #120	; 0x78
    fa0a:	f7f1 fcc9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa0e:	2000      	movs	r0, #0
    fa10:	bd10      	pop	{r4, pc}
    fa12:	2001      	movs	r0, #1
    fa14:	bd10      	pop	{r4, pc}

0000fa16 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    fa16:	207f      	movs	r0, #127	; 0x7f
    fa18:	f000 b8ab 	b.w	fb72 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000fa1c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    fa1c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fa20:	f000 b8a7 	b.w	fb72 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000fa24 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    fa24:	b510      	push	{r4, lr}
    fa26:	4604      	mov	r4, r0
    fa28:	f7f7 ff7c 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fa2c:	1e64      	subs	r4, r4, #1
    fa2e:	b2e2      	uxtb	r2, r4
    fa30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa34:	f000 b869 	b.w	fb0a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000fa38 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    fa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa3c:	4607      	mov	r7, r0
    fa3e:	461e      	mov	r6, r3
    fa40:	4690      	mov	r8, r2
    fa42:	460c      	mov	r4, r1
    fa44:	4608      	mov	r0, r1
    fa46:	f7ff ffed 	bl	fa24 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    fa4a:	b1e8      	cbz	r0, fa88 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    fa4c:	687d      	ldr	r5, [r7, #4]
    fa4e:	2121      	movs	r1, #33	; 0x21
    fa50:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    fa54:	3580      	adds	r5, #128	; 0x80
    fa56:	f7ff ff7f 	bl	f958 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44c>
    fa5a:	b1b8      	cbz	r0, fa8c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    fa5c:	1e64      	subs	r4, r4, #1
    fa5e:	6f29      	ldr	r1, [r5, #112]	; 0x70
    fa60:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    fa62:	b2e2      	uxtb	r2, r4
    fa64:	f000 f851 	bl	fb0a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    fa68:	b180      	cbz	r0, fa8c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    fa6a:	6878      	ldr	r0, [r7, #4]
    fa6c:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    fa70:	f88d 1000 	strb.w	r1, [sp]
    fa74:	9900      	ldr	r1, [sp, #0]
    fa76:	9100      	str	r1, [sp, #0]
    fa78:	f89d 1000 	ldrb.w	r1, [sp]
    fa7c:	f200 1047 	addw	r0, r0, #327	; 0x147
    fa80:	b131      	cbz	r1, fa90 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    fa82:	203a      	movs	r0, #58	; 0x3a
    fa84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fa88:	2011      	movs	r0, #17
    fa8a:	e7fb      	b.n	fa84 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    fa8c:	201a      	movs	r0, #26
    fa8e:	e7f9      	b.n	fa84 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    fa90:	1c81      	adds	r1, r0, #2
    fa92:	700e      	strb	r6, [r1, #0]
    fa94:	2101      	movs	r1, #1
    fa96:	40a1      	lsls	r1, r4
    fa98:	7001      	strb	r1, [r0, #0]
    fa9a:	f880 8001 	strb.w	r8, [r0, #1]
    fa9e:	2000      	movs	r0, #0
    faa0:	e7f0      	b.n	fa84 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000faa2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    faa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    faa6:	460d      	mov	r5, r1
    faa8:	4606      	mov	r6, r0
    faaa:	f7ff ffb4 	bl	fa16 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    faae:	4607      	mov	r7, r0
    fab0:	f7ff ffb4 	bl	fa1c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    fab4:	2400      	movs	r4, #0
    fab6:	4285      	cmp	r5, r0
    fab8:	d100      	bne.n	fabc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    faba:	2401      	movs	r4, #1
    fabc:	42bd      	cmp	r5, r7
    fabe:	d101      	bne.n	fac4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    fac0:	f044 0402 	orr.w	r4, r4, #2
    fac4:	f000 f834 	bl	fb30 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    fac8:	2200      	movs	r2, #0
    faca:	4601      	mov	r1, r0
    facc:	2301      	movs	r3, #1
    face:	fa03 f002 	lsl.w	r0, r3, r2
    fad2:	4208      	tst	r0, r1
    fad4:	d005      	beq.n	fae2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    fad6:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    fada:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    fade:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    fae2:	1c52      	adds	r2, r2, #1
    fae4:	b2d2      	uxtb	r2, r2
    fae6:	2a02      	cmp	r2, #2
    fae8:	d3f1      	bcc.n	face <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    faea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000faee <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    faee:	b510      	push	{r4, lr}
    faf0:	4604      	mov	r4, r0
    faf2:	4608      	mov	r0, r1
    faf4:	f7ff ff81 	bl	f9fa <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    faf8:	2802      	cmp	r0, #2
    fafa:	d205      	bcs.n	fb08 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    fafc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    fb00:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    fb04:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    fb08:	bd10      	pop	{r4, pc}
    fb0a:	b510      	push	{r4, lr}
    fb0c:	4614      	mov	r4, r2
    fb0e:	4602      	mov	r2, r0
    fb10:	2000      	movs	r0, #0
    fb12:	4603      	mov	r3, r0
    fb14:	2c02      	cmp	r4, #2
    fb16:	d205      	bcs.n	fb24 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    fb18:	4610      	mov	r0, r2
    fb1a:	f000 f821 	bl	fb60 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    fb1e:	2101      	movs	r1, #1
    fb20:	40a1      	lsls	r1, r4
    fb22:	b2cb      	uxtb	r3, r1
    fb24:	4203      	tst	r3, r0
    fb26:	d001      	beq.n	fb2c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    fb28:	2001      	movs	r0, #1
    fb2a:	bd10      	pop	{r4, pc}
    fb2c:	2000      	movs	r0, #0
    fb2e:	bd10      	pop	{r4, pc}
    fb30:	b510      	push	{r4, lr}
    fb32:	f7f7 fef7 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb3a:	f000 b811 	b.w	fb60 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    fb3e:	4601      	mov	r1, r0
    fb40:	b510      	push	{r4, lr}
    fb42:	2000      	movs	r0, #0
    fb44:	2301      	movs	r3, #1
    fb46:	fa03 f200 	lsl.w	r2, r3, r0
    fb4a:	420a      	tst	r2, r1
    fb4c:	d107      	bne.n	fb5e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    fb4e:	1c40      	adds	r0, r0, #1
    fb50:	b2c0      	uxtb	r0, r0
    fb52:	2802      	cmp	r0, #2
    fb54:	d3f7      	bcc.n	fb46 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    fb56:	213c      	movs	r1, #60	; 0x3c
    fb58:	2078      	movs	r0, #120	; 0x78
    fb5a:	f7f1 fc21 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb5e:	bd10      	pop	{r4, pc}
    fb60:	0a00      	lsrs	r0, r0, #8
    fb62:	2201      	movs	r2, #1
    fb64:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    fb68:	07c0      	lsls	r0, r0, #31
    fb6a:	d000      	beq.n	fb6e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    fb6c:	2203      	movs	r2, #3
    fb6e:	4610      	mov	r0, r2
    fb70:	4770      	bx	lr
    fb72:	b508      	push	{r3, lr}
    fb74:	2301      	movs	r3, #1
    fb76:	f640 1288 	movw	r2, #2440	; 0x988
    fb7a:	4669      	mov	r1, sp
    fb7c:	f7fc fe4e 	bl	c81c <mpsl_fem_tx_power_split>
    fb80:	bd08      	pop	{r3, pc}
    fb82:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fb86:	f001 0107 	and.w	r1, r1, #7
    fb8a:	7800      	ldrb	r0, [r0, #0]
    fb8c:	40c8      	lsrs	r0, r1
    fb8e:	f000 0001 	and.w	r0, r0, #1
    fb92:	4770      	bx	lr
    fb94:	b118      	cbz	r0, fb9e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fb96:	2802      	cmp	r0, #2
    fb98:	d001      	beq.n	fb9e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fb9a:	2001      	movs	r0, #1
    fb9c:	4770      	bx	lr
    fb9e:	2000      	movs	r0, #0
    fba0:	4770      	bx	lr

0000fba2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fba2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fba4:	7881      	ldrb	r1, [r0, #2]
    fba6:	2500      	movs	r5, #0
    fba8:	4604      	mov	r4, r0
    fbaa:	291a      	cmp	r1, #26
    fbac:	d024      	beq.n	fbf8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fbae:	dc0e      	bgt.n	fbce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    fbb0:	2916      	cmp	r1, #22
    fbb2:	d22b      	bcs.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fbb4:	e8df f001 	tbb	[pc, r1]
    fbb8:	2a2a2a2a 	.word	0x2a2a2a2a
    fbbc:	2a2a202a 	.word	0x2a2a202a
    fbc0:	2a2a2a2a 	.word	0x2a2a2a2a
    fbc4:	2a2a2a2a 	.word	0x2a2a2a2a
    fbc8:	202a2a2a 	.word	0x202a2a2a
    fbcc:	2020      	.short	0x2020
    fbce:	292a      	cmp	r1, #42	; 0x2a
    fbd0:	d01c      	beq.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fbd2:	dc0b      	bgt.n	fbec <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fbd4:	f1a1 011e 	sub.w	r1, r1, #30
    fbd8:	290c      	cmp	r1, #12
    fbda:	d217      	bcs.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fbdc:	e8df f001 	tbb	[pc, r1]
    fbe0:	16161616 	.word	0x16161616
    fbe4:	16161616 	.word	0x16161616
    fbe8:	0c161616 	.word	0x0c161616
    fbec:	393a      	subs	r1, #58	; 0x3a
    fbee:	2902      	cmp	r1, #2
    fbf0:	d20c      	bcs.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fbf2:	e8df f001 	tbb	[pc, r1]
    fbf6:	010b      	.short	0x010b
    fbf8:	8820      	ldrh	r0, [r4, #0]
    fbfa:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fbfe:	d205      	bcs.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc00:	4669      	mov	r1, sp
    fc02:	f7fe f87f 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc06:	b118      	cbz	r0, fc10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fc08:	2002      	movs	r0, #2
    fc0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc0c:	2012      	movs	r0, #18
    fc0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc10:	9901      	ldr	r1, [sp, #4]
    fc12:	4668      	mov	r0, sp
    fc14:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    fc18:	f88d 2008 	strb.w	r2, [sp, #8]
    fc1c:	9a02      	ldr	r2, [sp, #8]
    fc1e:	9202      	str	r2, [sp, #8]
    fc20:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fc24:	f501 7198 	add.w	r1, r1, #304	; 0x130
    fc28:	b10a      	cbz	r2, fc2e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    fc2a:	200c      	movs	r0, #12
    fc2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc2e:	78a2      	ldrb	r2, [r4, #2]
    fc30:	704a      	strb	r2, [r1, #1]
    fc32:	22ff      	movs	r2, #255	; 0xff
    fc34:	700a      	strb	r2, [r1, #0]
    fc36:	f7fe fc03 	bl	e440 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fc3a:	4628      	mov	r0, r5
    fc3c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fc3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fc3e:	b510      	push	{r4, lr}
    fc40:	4604      	mov	r4, r0
    fc42:	f7f7 fd99 	bl	7778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fc46:	b108      	cbz	r0, fc4c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fc48:	200c      	movs	r0, #12
    fc4a:	bd10      	pop	{r4, pc}
    fc4c:	7820      	ldrb	r0, [r4, #0]
    fc4e:	b118      	cbz	r0, fc58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fc50:	2801      	cmp	r0, #1
    fc52:	d001      	beq.n	fc58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fc54:	2012      	movs	r0, #18
    fc56:	bd10      	pop	{r4, pc}
    fc58:	f7ff ff9c 	bl	fb94 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fc5c:	1c61      	adds	r1, r4, #1
    fc5e:	f7f3 f833 	bl	2cc8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fc62:	b108      	cbz	r0, fc68 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fc64:	2000      	movs	r0, #0
    fc66:	bd10      	pop	{r4, pc}
    fc68:	2007      	movs	r0, #7
    fc6a:	bd10      	pop	{r4, pc}

0000fc6c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fc6c:	b510      	push	{r4, lr}
    fc6e:	f7f7 fd83 	bl	7778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fc72:	b108      	cbz	r0, fc78 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fc74:	200c      	movs	r0, #12
    fc76:	bd10      	pop	{r4, pc}
    fc78:	f7f3 f84e 	bl	2d18 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fc7c:	2000      	movs	r0, #0
    fc7e:	bd10      	pop	{r4, pc}

0000fc80 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fc80:	b510      	push	{r4, lr}
    fc82:	460b      	mov	r3, r1
    fc84:	2201      	movs	r2, #1
    fc86:	f100 0110 	add.w	r1, r0, #16
    fc8a:	f7fe f81d 	bl	dcc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fc8e:	2000      	movs	r0, #0
    fc90:	bd10      	pop	{r4, pc}

0000fc92 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fc92:	b510      	push	{r4, lr}
    fc94:	8800      	ldrh	r0, [r0, #0]
    fc96:	2100      	movs	r1, #0
    fc98:	f7fd fdb9 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc9c:	b118      	cbz	r0, fca6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fc9e:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fca2:	b111      	cbz	r1, fcaa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fca4:	e007      	b.n	fcb6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fca6:	2002      	movs	r0, #2
    fca8:	bd10      	pop	{r4, pc}
    fcaa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fcae:	2915      	cmp	r1, #21
    fcb0:	d003      	beq.n	fcba <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fcb2:	2916      	cmp	r1, #22
    fcb4:	d001      	beq.n	fcba <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fcb6:	200c      	movs	r0, #12
    fcb8:	bd10      	pop	{r4, pc}
    fcba:	2102      	movs	r1, #2
    fcbc:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fcc0:	2000      	movs	r0, #0
    fcc2:	bd10      	pop	{r4, pc}

0000fcc4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcc6:	4605      	mov	r5, r0
    fcc8:	8800      	ldrh	r0, [r0, #0]
    fcca:	2100      	movs	r1, #0
    fccc:	f7fd fd9f 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fcd0:	0004      	movs	r4, r0
    fcd2:	d003      	beq.n	fcdc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fcd4:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    fcd8:	b110      	cbz	r0, fce0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fcda:	e011      	b.n	fd00 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fcdc:	2002      	movs	r0, #2
    fcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fce0:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fce4:	2815      	cmp	r0, #21
    fce6:	d001      	beq.n	fcec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fce8:	2816      	cmp	r0, #22
    fcea:	d109      	bne.n	fd00 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fcec:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    fcf0:	f88d 0000 	strb.w	r0, [sp]
    fcf4:	9800      	ldr	r0, [sp, #0]
    fcf6:	9000      	str	r0, [sp, #0]
    fcf8:	f89d 0000 	ldrb.w	r0, [sp]
    fcfc:	2601      	movs	r6, #1
    fcfe:	b108      	cbz	r0, fd04 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fd00:	200c      	movs	r0, #12
    fd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd04:	2210      	movs	r2, #16
    fd06:	1ca9      	adds	r1, r5, #2
    fd08:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fd0c:	f001 f850 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fd10:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    fd14:	2000      	movs	r0, #0
    fd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fd18 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fd18:	b510      	push	{r4, lr}
    fd1a:	2108      	movs	r1, #8
    fd1c:	f7f1 fbee 	bl	14fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fd20:	2000      	movs	r0, #0
    fd22:	bd10      	pop	{r4, pc}

0000fd24 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fd24:	b510      	push	{r4, lr}
    fd26:	4604      	mov	r4, r0
    fd28:	f7f7 fba6 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fd2c:	f7fe ff2d 	bl	eb8a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fd30:	f7f3 f990 	bl	3054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fd34:	7020      	strb	r0, [r4, #0]
    fd36:	2000      	movs	r0, #0
    fd38:	bd10      	pop	{r4, pc}

0000fd3a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fd3a:	21fb      	movs	r1, #251	; 0xfb
    fd3c:	8001      	strh	r1, [r0, #0]
    fd3e:	f640 0248 	movw	r2, #2120	; 0x848
    fd42:	8042      	strh	r2, [r0, #2]
    fd44:	8081      	strh	r1, [r0, #4]
    fd46:	80c2      	strh	r2, [r0, #6]
    fd48:	2000      	movs	r0, #0
    fd4a:	4770      	bx	lr

0000fd4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fd4c:	b51c      	push	{r2, r3, r4, lr}
    fd4e:	8800      	ldrh	r0, [r0, #0]
    fd50:	4669      	mov	r1, sp
    fd52:	f7fd ffd7 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fd56:	2800      	cmp	r0, #0
    fd58:	d10d      	bne.n	fd76 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fd5a:	f89d 0000 	ldrb.w	r0, [sp]
    fd5e:	9c01      	ldr	r4, [sp, #4]
    fd60:	2801      	cmp	r0, #1
    fd62:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fd66:	d103      	bne.n	fd70 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fd68:	9801      	ldr	r0, [sp, #4]
    fd6a:	f000 fcd6 	bl	1071a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fd6e:	b118      	cbz	r0, fd78 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fd70:	7ce0      	ldrb	r0, [r4, #19]
    fd72:	b118      	cbz	r0, fd7c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fd74:	203a      	movs	r0, #58	; 0x3a
    fd76:	bd1c      	pop	{r2, r3, r4, pc}
    fd78:	2002      	movs	r0, #2
    fd7a:	bd1c      	pop	{r2, r3, r4, pc}
    fd7c:	2001      	movs	r0, #1
    fd7e:	74e0      	strb	r0, [r4, #19]
    fd80:	2000      	movs	r0, #0
    fd82:	bd1c      	pop	{r2, r3, r4, pc}

0000fd84 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fd84:	b510      	push	{r4, lr}
    fd86:	4604      	mov	r4, r0
    fd88:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fd8c:	f000 fd01 	bl	10792 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fd90:	f7f3 f960 	bl	3054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fd94:	7020      	strb	r0, [r4, #0]
    fd96:	f000 fcbd 	bl	10714 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fd9a:	f7f3 f95b 	bl	3054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fd9e:	7060      	strb	r0, [r4, #1]
    fda0:	2000      	movs	r0, #0
    fda2:	bd10      	pop	{r4, pc}

0000fda4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fda4:	2108      	movs	r1, #8
    fda6:	7001      	strb	r1, [r0, #0]
    fda8:	2000      	movs	r0, #0
    fdaa:	4770      	bx	lr

0000fdac <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fdac:	b510      	push	{r4, lr}
    fdae:	4604      	mov	r4, r0
    fdb0:	f7f7 fce2 	bl	7778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fdb4:	b108      	cbz	r0, fdba <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fdb6:	200c      	movs	r0, #12
    fdb8:	bd10      	pop	{r4, pc}
    fdba:	7820      	ldrb	r0, [r4, #0]
    fdbc:	b108      	cbz	r0, fdc2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fdbe:	2801      	cmp	r0, #1
    fdc0:	d107      	bne.n	fdd2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fdc2:	f7ff fee7 	bl	fb94 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fdc6:	1c61      	adds	r1, r4, #1
    fdc8:	f7fd ff73 	bl	dcb2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fdcc:	b108      	cbz	r0, fdd2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fdce:	2000      	movs	r0, #0
    fdd0:	bd10      	pop	{r4, pc}
    fdd2:	2012      	movs	r0, #18
    fdd4:	bd10      	pop	{r4, pc}

0000fdd6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fdd6:	b51c      	push	{r2, r3, r4, lr}
    fdd8:	4604      	mov	r4, r0
    fdda:	f7f7 fb4d 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fdde:	2000      	movs	r0, #0
    fde0:	f88d 0002 	strb.w	r0, [sp, #2]
    fde4:	2103      	movs	r1, #3
    fde6:	f88d 1001 	strb.w	r1, [sp, #1]
    fdea:	f814 1b01 	ldrb.w	r1, [r4], #1
    fdee:	f88d 1003 	strb.w	r1, [sp, #3]
    fdf2:	f88d 0000 	strb.w	r0, [sp]
    fdf6:	4668      	mov	r0, sp
    fdf8:	9401      	str	r4, [sp, #4]
    fdfa:	f000 f9a2 	bl	10142 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fdfe:	bd1c      	pop	{r2, r3, r4, pc}

0000fe00 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fe00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fe02:	4605      	mov	r5, r0
    fe04:	f7f7 fb38 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fe08:	4606      	mov	r6, r0
    fe0a:	7828      	ldrb	r0, [r5, #0]
    fe0c:	2400      	movs	r4, #0
    fe0e:	b160      	cbz	r0, fe2a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fe10:	f88d 4000 	strb.w	r4, [sp]
    fe14:	2001      	movs	r0, #1
    fe16:	f10d 0101 	add.w	r1, sp, #1
    fe1a:	f7f2 f95f 	bl	20dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fe1e:	b120      	cbz	r0, fe2a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fe20:	4668      	mov	r0, sp
    fe22:	f000 f897 	bl	ff54 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fe26:	2800      	cmp	r0, #0
    fe28:	d112      	bne.n	fe50 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fe2a:	f88d 400c 	strb.w	r4, [sp, #12]
    fe2e:	4630      	mov	r0, r6
    fe30:	f7fe fea1 	bl	eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fe34:	b118      	cbz	r0, fe3e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fe36:	2080      	movs	r0, #128	; 0x80
    fe38:	f8ad 000d 	strh.w	r0, [sp, #13]
    fe3c:	e001      	b.n	fe42 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fe3e:	f8ad 400d 	strh.w	r4, [sp, #13]
    fe42:	f88d 400f 	strb.w	r4, [sp, #15]
    fe46:	7828      	ldrb	r0, [r5, #0]
    fe48:	2801      	cmp	r0, #1
    fe4a:	d003      	beq.n	fe54 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fe4c:	b138      	cbz	r0, fe5e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fe4e:	2012      	movs	r0, #18
    fe50:	b004      	add	sp, #16
    fe52:	bd70      	pop	{r4, r5, r6, pc}
    fe54:	a903      	add	r1, sp, #12
    fe56:	4630      	mov	r0, r6
    fe58:	f7f7 fb2a 	bl	74b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fe5c:	e7f8      	b.n	fe50 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fe5e:	4630      	mov	r0, r6
    fe60:	f000 fc71 	bl	10746 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fe64:	e7f4      	b.n	fe50 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fe66 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fe66:	b530      	push	{r4, r5, lr}
    fe68:	b08b      	sub	sp, #44	; 0x2c
    fe6a:	4604      	mov	r4, r0
    fe6c:	f7f7 fb04 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fe70:	4602      	mov	r2, r0
    fe72:	7920      	ldrb	r0, [r4, #4]
    fe74:	2804      	cmp	r0, #4
    fe76:	d803      	bhi.n	fe80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fe78:	8860      	ldrh	r0, [r4, #2]
    fe7a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fe7e:	d902      	bls.n	fe86 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fe80:	2012      	movs	r0, #18
    fe82:	b00b      	add	sp, #44	; 0x2c
    fe84:	bd30      	pop	{r4, r5, pc}
    fe86:	2500      	movs	r5, #0
    fe88:	f88d 5004 	strb.w	r5, [sp, #4]
    fe8c:	7921      	ldrb	r1, [r4, #4]
    fe8e:	9500      	str	r5, [sp, #0]
    fe90:	f89d 0000 	ldrb.w	r0, [sp]
    fe94:	2905      	cmp	r1, #5
    fe96:	f040 0010 	orr.w	r0, r0, #16
    fe9a:	f88d 0000 	strb.w	r0, [sp]
    fe9e:	d254      	bcs.n	ff4a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fea0:	e8df f001 	tbb	[pc, r1]
    fea4:	11050803 	.word	0x11050803
    fea8:	000b      	.short	0x000b
    feaa:	f040 0001 	orr.w	r0, r0, #1
    feae:	f040 0002 	orr.w	r0, r0, #2
    feb2:	e006      	b.n	fec2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    feb4:	f040 0009 	orr.w	r0, r0, #9
    feb8:	e001      	b.n	febe <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    feba:	f040 0001 	orr.w	r0, r0, #1
    febe:	f040 0004 	orr.w	r0, r0, #4
    fec2:	f88d 0000 	strb.w	r0, [sp]
    fec6:	f8bd 0000 	ldrh.w	r0, [sp]
    feca:	9000      	str	r0, [sp, #0]
    fecc:	f8bd 0000 	ldrh.w	r0, [sp]
    fed0:	f8ad 0005 	strh.w	r0, [sp, #5]
    fed4:	8821      	ldrh	r1, [r4, #0]
    fed6:	f8dd 0006 	ldr.w	r0, [sp, #6]
    feda:	f361 201f 	bfi	r0, r1, #8, #24
    fede:	f8cd 0006 	str.w	r0, [sp, #6]
    fee2:	8861      	ldrh	r1, [r4, #2]
    fee4:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fee8:	f361 201f 	bfi	r0, r1, #8, #24
    feec:	f8cd 0009 	str.w	r0, [sp, #9]
    fef0:	7b60      	ldrb	r0, [r4, #13]
    fef2:	f88d 000d 	strb.w	r0, [sp, #13]
    fef6:	7960      	ldrb	r0, [r4, #5]
    fef8:	f88d 000e 	strb.w	r0, [sp, #14]
    fefc:	79a0      	ldrb	r0, [r4, #6]
    fefe:	f88d 000f 	strb.w	r0, [sp, #15]
    ff02:	f8d4 0007 	ldr.w	r0, [r4, #7]
    ff06:	9004      	str	r0, [sp, #16]
    ff08:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    ff0c:	f8ad 0014 	strh.w	r0, [sp, #20]
    ff10:	7ba0      	ldrb	r0, [r4, #14]
    ff12:	f88d 0016 	strb.w	r0, [sp, #22]
    ff16:	207f      	movs	r0, #127	; 0x7f
    ff18:	f88d 0017 	strb.w	r0, [sp, #23]
    ff1c:	2001      	movs	r0, #1
    ff1e:	f88d 0018 	strb.w	r0, [sp, #24]
    ff22:	f88d 5019 	strb.w	r5, [sp, #25]
    ff26:	f88d 001a 	strb.w	r0, [sp, #26]
    ff2a:	f88d 501b 	strb.w	r5, [sp, #27]
    ff2e:	4610      	mov	r0, r2
    ff30:	f7fe fe41 	bl	ebb6 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    ff34:	f88d 001c 	strb.w	r0, [sp, #28]
    ff38:	f88d 501d 	strb.w	r5, [sp, #29]
    ff3c:	f88d 501e 	strb.w	r5, [sp, #30]
    ff40:	a909      	add	r1, sp, #36	; 0x24
    ff42:	a801      	add	r0, sp, #4
    ff44:	f7f7 f92e 	bl	71a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    ff48:	e79b      	b.n	fe82 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    ff4a:	f241 215b 	movw	r1, #4699	; 0x125b
    ff4e:	2039      	movs	r0, #57	; 0x39
    ff50:	f7f1 fa26 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ff54 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    ff54:	b570      	push	{r4, r5, r6, lr}
    ff56:	4604      	mov	r4, r0
    ff58:	7800      	ldrb	r0, [r0, #0]
    ff5a:	2101      	movs	r1, #1
    ff5c:	f7fd fc57 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff60:	0005      	movs	r5, r0
    ff62:	d007      	beq.n	ff74 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    ff64:	f7fe ffe4 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff68:	b160      	cbz	r0, ff84 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ff6a:	4628      	mov	r0, r5
    ff6c:	f7fe fe09 	bl	eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ff70:	b110      	cbz	r0, ff78 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    ff72:	e005      	b.n	ff80 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    ff74:	2042      	movs	r0, #66	; 0x42
    ff76:	bd70      	pop	{r4, r5, r6, pc}
    ff78:	4628      	mov	r0, r5
    ff7a:	f7fe fdf8 	bl	eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ff7e:	b108      	cbz	r0, ff84 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ff80:	200c      	movs	r0, #12
    ff82:	bd70      	pop	{r4, r5, r6, pc}
    ff84:	1c61      	adds	r1, r4, #1
    ff86:	4628      	mov	r0, r5
    ff88:	f7fe fe0d 	bl	eba6 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    ff8c:	2000      	movs	r0, #0
    ff8e:	bd70      	pop	{r4, r5, r6, pc}

0000ff90 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ff90:	b50e      	push	{r1, r2, r3, lr}
    ff92:	8882      	ldrh	r2, [r0, #4]
    ff94:	f244 2390 	movw	r3, #17040	; 0x4290
    ff98:	429a      	cmp	r2, r3
    ff9a:	d901      	bls.n	ffa0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    ff9c:	2012      	movs	r0, #18
    ff9e:	bd0e      	pop	{r1, r2, r3, pc}
    ffa0:	f640 0348 	movw	r3, #2120	; 0x848
    ffa4:	429a      	cmp	r2, r3
    ffa6:	d300      	bcc.n	ffaa <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ffa8:	461a      	mov	r2, r3
    ffaa:	8803      	ldrh	r3, [r0, #0]
    ffac:	f8ad 3000 	strh.w	r3, [sp]
    ffb0:	8843      	ldrh	r3, [r0, #2]
    ffb2:	f8ad 3002 	strh.w	r3, [sp, #2]
    ffb6:	f8ad 2004 	strh.w	r2, [sp, #4]
    ffba:	8843      	ldrh	r3, [r0, #2]
    ffbc:	f8ad 3006 	strh.w	r3, [sp, #6]
    ffc0:	f8ad 2008 	strh.w	r2, [sp, #8]
    ffc4:	8800      	ldrh	r0, [r0, #0]
    ffc6:	8008      	strh	r0, [r1, #0]
    ffc8:	4668      	mov	r0, sp
    ffca:	f7f7 fb51 	bl	7670 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    ffce:	bd0e      	pop	{r1, r2, r3, pc}

0000ffd0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    ffd0:	b510      	push	{r4, lr}
    ffd2:	4604      	mov	r4, r0
    ffd4:	f7f7 fa50 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    ffd8:	7861      	ldrb	r1, [r4, #1]
    ffda:	f3c1 0240 	ubfx	r2, r1, #1, #1
    ffde:	f001 0101 	and.w	r1, r1, #1
    ffe2:	f7fe fddc 	bl	eb9e <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    ffe6:	2000      	movs	r0, #0
    ffe8:	bd10      	pop	{r4, pc}

0000ffea <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    ffea:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ffec:	4604      	mov	r4, r0
    ffee:	f10d 0007 	add.w	r0, sp, #7
    fff2:	9000      	str	r0, [sp, #0]
    fff4:	7922      	ldrb	r2, [r4, #4]
    fff6:	78e1      	ldrb	r1, [r4, #3]
    fff8:	78a0      	ldrb	r0, [r4, #2]
    fffa:	f10d 0306 	add.w	r3, sp, #6
    fffe:	f000 fbd0 	bl	107a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   10002:	2800      	cmp	r0, #0
   10004:	d109      	bne.n	1001a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   10006:	8820      	ldrh	r0, [r4, #0]
   10008:	f8ad 0004 	strh.w	r0, [sp, #4]
   1000c:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10010:	f8ad 0008 	strh.w	r0, [sp, #8]
   10014:	a801      	add	r0, sp, #4
   10016:	f000 f94f 	bl	102b8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   1001a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001001c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   1001c:	b510      	push	{r4, lr}
   1001e:	4604      	mov	r4, r0
   10020:	2001      	movs	r0, #1
   10022:	f000 fa55 	bl	104d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10026:	b128      	cbz	r0, 10034 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10028:	4621      	mov	r1, r4
   1002a:	2001      	movs	r0, #1
   1002c:	f7f2 f86e 	bl	210c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10030:	2000      	movs	r0, #0
   10032:	bd10      	pop	{r4, pc}
   10034:	200c      	movs	r0, #12
   10036:	bd10      	pop	{r4, pc}

00010038 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10038:	b51c      	push	{r2, r3, r4, lr}
   1003a:	4604      	mov	r4, r0
   1003c:	f7f7 fa1c 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   10040:	2000      	movs	r0, #0
   10042:	f88d 0000 	strb.w	r0, [sp]
   10046:	f88d 0002 	strb.w	r0, [sp, #2]
   1004a:	2003      	movs	r0, #3
   1004c:	f88d 0001 	strb.w	r0, [sp, #1]
   10050:	f814 0b01 	ldrb.w	r0, [r4], #1
   10054:	f88d 0003 	strb.w	r0, [sp, #3]
   10058:	4668      	mov	r0, sp
   1005a:	9401      	str	r4, [sp, #4]
   1005c:	f000 f8da 	bl	10214 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10060:	bd1c      	pop	{r2, r3, r4, pc}

00010062 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10062:	b51c      	push	{r2, r3, r4, lr}
   10064:	8801      	ldrh	r1, [r0, #0]
   10066:	f8ad 1000 	strh.w	r1, [sp]
   1006a:	8841      	ldrh	r1, [r0, #2]
   1006c:	f8ad 1002 	strh.w	r1, [sp, #2]
   10070:	8801      	ldrh	r1, [r0, #0]
   10072:	f8ad 1004 	strh.w	r1, [sp, #4]
   10076:	8840      	ldrh	r0, [r0, #2]
   10078:	f8ad 0006 	strh.w	r0, [sp, #6]
   1007c:	4668      	mov	r0, sp
   1007e:	f7f7 fb97 	bl	77b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
   10082:	bd1c      	pop	{r2, r3, r4, pc}

00010084 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10084:	b510      	push	{r4, lr}
   10086:	f7f2 f865 	bl	2154 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1008a:	2000      	movs	r0, #0
   1008c:	bd10      	pop	{r4, pc}

0001008e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   1008e:	b510      	push	{r4, lr}
   10090:	460c      	mov	r4, r1
   10092:	2100      	movs	r1, #0
   10094:	f7fd fbbb 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10098:	b118      	cbz	r0, 100a2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   1009a:	2c02      	cmp	r4, #2
   1009c:	d903      	bls.n	100a6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   1009e:	2012      	movs	r0, #18
   100a0:	bd10      	pop	{r4, pc}
   100a2:	2002      	movs	r0, #2
   100a4:	bd10      	pop	{r4, pc}
   100a6:	f014 0101 	ands.w	r1, r4, #1
   100aa:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
   100ae:	f3c4 0240 	ubfx	r2, r4, #1, #1
   100b2:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
   100b6:	d004      	beq.n	100c2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   100b8:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
   100bc:	b109      	cbz	r1, 100c2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   100be:	f7fe ff3a 	bl	ef36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   100c2:	2000      	movs	r0, #0
   100c4:	bd10      	pop	{r4, pc}

000100c6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   100c6:	b51c      	push	{r2, r3, r4, lr}
   100c8:	460c      	mov	r4, r1
   100ca:	4669      	mov	r1, sp
   100cc:	f7fd fe1a 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100d0:	2800      	cmp	r0, #0
   100d2:	d105      	bne.n	100e0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   100d4:	2100      	movs	r1, #0
   100d6:	4622      	mov	r2, r4
   100d8:	9801      	ldr	r0, [sp, #4]
   100da:	f000 fac5 	bl	10668 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   100de:	2000      	movs	r0, #0
   100e0:	bd1c      	pop	{r2, r3, r4, pc}

000100e2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
   100e2:	b510      	push	{r4, lr}
   100e4:	4604      	mov	r4, r0
   100e6:	7800      	ldrb	r0, [r0, #0]
   100e8:	28ff      	cmp	r0, #255	; 0xff
   100ea:	d009      	beq.n	10100 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
   100ec:	2101      	movs	r1, #1
   100ee:	f7fd fb8e 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   100f2:	b118      	cbz	r0, 100fc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
   100f4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   100f8:	8441      	strh	r1, [r0, #34]	; 0x22
   100fa:	e005      	b.n	10108 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
   100fc:	2042      	movs	r0, #66	; 0x42
   100fe:	bd10      	pop	{r4, pc}
   10100:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10104:	f7f4 fcd0 	bl	4aa8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
   10108:	2000      	movs	r0, #0
   1010a:	bd10      	pop	{r4, pc}

0001010c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1010c:	b510      	push	{r4, lr}
   1010e:	4604      	mov	r4, r0
   10110:	f7f7 fb8e 	bl	7830 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   10114:	b118      	cbz	r0, 1011e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   10116:	2000      	movs	r0, #0
   10118:	f000 f9da 	bl	104d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   1011c:	b128      	cbz	r0, 1012a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   1011e:	4621      	mov	r1, r4
   10120:	2000      	movs	r0, #0
   10122:	f7f1 fff3 	bl	210c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10126:	2000      	movs	r0, #0
   10128:	bd10      	pop	{r4, pc}
   1012a:	200c      	movs	r0, #12
   1012c:	bd10      	pop	{r4, pc}

0001012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1012e:	b510      	push	{r4, lr}
   10130:	7800      	ldrb	r0, [r0, #0]
   10132:	b100      	cbz	r0, 10136 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10134:	2001      	movs	r0, #1
   10136:	f7f4 fce1 	bl	4afc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1013a:	2000      	movs	r0, #0
   1013c:	bd10      	pop	{r4, pc}

0001013e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1013e:	f7f7 ba97 	b.w	7670 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

00010142 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10142:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10146:	4606      	mov	r6, r0
   10148:	7845      	ldrb	r5, [r0, #1]
   1014a:	7800      	ldrb	r0, [r0, #0]
   1014c:	2101      	movs	r1, #1
   1014e:	f7fd fb5e 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10152:	0004      	movs	r4, r0
   10154:	d01e      	beq.n	10194 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10156:	f7fe fcdd 	bl	eb14 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   1015a:	78f1      	ldrb	r1, [r6, #3]
   1015c:	4281      	cmp	r1, r0
   1015e:	d800      	bhi.n	10162 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10160:	4608      	mov	r0, r1
   10162:	4607      	mov	r7, r0
   10164:	2d04      	cmp	r5, #4
   10166:	d018      	beq.n	1019a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10168:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1016a:	f7fd fc9f 	bl	daac <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1016e:	4438      	add	r0, r7
   10170:	b281      	uxth	r1, r0
   10172:	4620      	mov	r0, r4
   10174:	2201      	movs	r2, #1
   10176:	f000 f9bd 	bl	104f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1017a:	2800      	cmp	r0, #0
   1017c:	d10b      	bne.n	10196 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1017e:	2d03      	cmp	r5, #3
   10180:	d000      	beq.n	10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10182:	b1df      	cbz	r7, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10184:	4620      	mov	r0, r4
   10186:	f7fe fcfa 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1018a:	7871      	ldrb	r1, [r6, #1]
   1018c:	2903      	cmp	r1, #3
   1018e:	d010      	beq.n	101b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10190:	b9a0      	cbnz	r0, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10192:	e004      	b.n	1019e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10194:	2042      	movs	r0, #66	; 0x42
   10196:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1019a:	b97f      	cbnz	r7, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1019c:	e7f2      	b.n	10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1019e:	2904      	cmp	r1, #4
   101a0:	d107      	bne.n	101b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   101a2:	4620      	mov	r0, r4
   101a4:	f7fe fec4 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   101a8:	b140      	cbz	r0, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   101aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
   101ac:	f7fd fc45 	bl	da3a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   101b0:	b120      	cbz	r0, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   101b2:	2d01      	cmp	r5, #1
   101b4:	d004      	beq.n	101c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   101b6:	2d03      	cmp	r5, #3
   101b8:	d002      	beq.n	101c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   101ba:	e00e      	b.n	101da <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   101bc:	2012      	movs	r0, #18
   101be:	e7ea      	b.n	10196 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   101c0:	4620      	mov	r0, r4
   101c2:	f7fe fcdc 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   101c6:	b108      	cbz	r0, 101cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   101c8:	2200      	movs	r2, #0
   101ca:	e002      	b.n	101d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   101cc:	2d01      	cmp	r5, #1
   101ce:	d013      	beq.n	101f8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   101d0:	2201      	movs	r2, #1
   101d2:	4668      	mov	r0, sp
   101d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   101d6:	f7fd fbcc 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   101da:	2d04      	cmp	r5, #4
   101dc:	d018      	beq.n	10210 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   101de:	6872      	ldr	r2, [r6, #4]
   101e0:	463b      	mov	r3, r7
   101e2:	2101      	movs	r1, #1
   101e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
   101e6:	f7fd fbf8 	bl	d9da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   101ea:	b138      	cbz	r0, 101fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   101ec:	7870      	ldrb	r0, [r6, #1]
   101ee:	2802      	cmp	r0, #2
   101f0:	d006      	beq.n	10200 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   101f2:	2803      	cmp	r0, #3
   101f4:	d004      	beq.n	10200 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   101f6:	e00b      	b.n	10210 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   101f8:	2202      	movs	r2, #2
   101fa:	e7ea      	b.n	101d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   101fc:	2007      	movs	r0, #7
   101fe:	e7ca      	b.n	10196 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10200:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10202:	f7fd fc53 	bl	daac <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10206:	4602      	mov	r2, r0
   10208:	2101      	movs	r1, #1
   1020a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1020c:	f7fd fc2b 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10210:	2000      	movs	r0, #0
   10212:	e7c0      	b.n	10196 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010214 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10214:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10218:	4607      	mov	r7, r0
   1021a:	7845      	ldrb	r5, [r0, #1]
   1021c:	78c6      	ldrb	r6, [r0, #3]
   1021e:	7800      	ldrb	r0, [r0, #0]
   10220:	2101      	movs	r1, #1
   10222:	f7fd faf4 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10226:	0004      	movs	r4, r0
   10228:	d003      	beq.n	10232 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   1022a:	f7fe fcaa 	bl	eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1022e:	b118      	cbz	r0, 10238 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10230:	e003      	b.n	1023a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10232:	2042      	movs	r0, #66	; 0x42
   10234:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10238:	2600      	movs	r6, #0
   1023a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1023c:	f7fd fc3a 	bl	dab4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10240:	4430      	add	r0, r6
   10242:	b281      	uxth	r1, r0
   10244:	4688      	mov	r8, r1
   10246:	4620      	mov	r0, r4
   10248:	2201      	movs	r2, #1
   1024a:	f000 f953 	bl	104f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1024e:	2800      	cmp	r0, #0
   10250:	d1f0      	bne.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10252:	2d04      	cmp	r5, #4
   10254:	d008      	beq.n	10268 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10256:	2d03      	cmp	r5, #3
   10258:	d00a      	beq.n	10270 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   1025a:	b12e      	cbz	r6, 10268 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1025c:	4620      	mov	r0, r4
   1025e:	f7fe fe67 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10262:	b118      	cbz	r0, 1026c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10264:	200c      	movs	r0, #12
   10266:	e7e5      	b.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10268:	2012      	movs	r0, #18
   1026a:	e7e3      	b.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1026c:	2d01      	cmp	r5, #1
   1026e:	d10c      	bne.n	1028a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10270:	4620      	mov	r0, r4
   10272:	f7fe fc84 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10276:	b108      	cbz	r0, 1027c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10278:	2204      	movs	r2, #4
   1027a:	e002      	b.n	10282 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1027c:	2d01      	cmp	r5, #1
   1027e:	d010      	beq.n	102a2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10280:	2205      	movs	r2, #5
   10282:	4668      	mov	r0, sp
   10284:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10286:	f7fd fb74 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1028a:	687a      	ldr	r2, [r7, #4]
   1028c:	4633      	mov	r3, r6
   1028e:	2100      	movs	r1, #0
   10290:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10292:	f7fd fba2 	bl	d9da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10296:	b130      	cbz	r0, 102a6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10298:	2d02      	cmp	r5, #2
   1029a:	d006      	beq.n	102aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1029c:	2d03      	cmp	r5, #3
   1029e:	d004      	beq.n	102aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   102a0:	e008      	b.n	102b4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   102a2:	2206      	movs	r2, #6
   102a4:	e7ed      	b.n	10282 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   102a6:	2007      	movs	r0, #7
   102a8:	e7c4      	b.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   102aa:	4642      	mov	r2, r8
   102ac:	2100      	movs	r1, #0
   102ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
   102b0:	f7fd fbd9 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   102b4:	2000      	movs	r0, #0
   102b6:	e7bd      	b.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

000102b8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   102b8:	b510      	push	{r4, lr}
   102ba:	4604      	mov	r4, r0
   102bc:	8880      	ldrh	r0, [r0, #4]
   102be:	b128      	cbz	r0, 102cc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102c0:	2801      	cmp	r0, #1
   102c2:	d003      	beq.n	102cc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102c4:	2802      	cmp	r0, #2
   102c6:	d001      	beq.n	102cc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102c8:	2012      	movs	r0, #18
   102ca:	bd10      	pop	{r4, pc}
   102cc:	78e0      	ldrb	r0, [r4, #3]
   102ce:	f000 f9a8 	bl	10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   102d2:	b148      	cbz	r0, 102e8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   102d4:	78a0      	ldrb	r0, [r4, #2]
   102d6:	f000 f9a4 	bl	10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   102da:	b128      	cbz	r0, 102e8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   102dc:	4620      	mov	r0, r4
   102de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102e2:	2101      	movs	r1, #1
   102e4:	f000 b862 	b.w	103ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   102e8:	2011      	movs	r0, #17
   102ea:	bd10      	pop	{r4, pc}

000102ec <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   102ec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   102ee:	460c      	mov	r4, r1
   102f0:	4605      	mov	r5, r0
   102f2:	8800      	ldrh	r0, [r0, #0]
   102f4:	4669      	mov	r1, sp
   102f6:	f7fd fd05 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   102fa:	2800      	cmp	r0, #0
   102fc:	d106      	bne.n	1030c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   102fe:	9801      	ldr	r0, [sp, #4]
   10300:	8829      	ldrh	r1, [r5, #0]
   10302:	8021      	strh	r1, [r4, #0]
   10304:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   10308:	8060      	strh	r0, [r4, #2]
   1030a:	2000      	movs	r0, #0
   1030c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001030e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   1030e:	b510      	push	{r4, lr}
   10310:	4604      	mov	r4, r0
   10312:	4601      	mov	r1, r0
   10314:	2000      	movs	r0, #0
   10316:	f7f1 fee1 	bl	20dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1031a:	b910      	cbnz	r0, 10322 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   1031c:	2000      	movs	r0, #0
   1031e:	6020      	str	r0, [r4, #0]
   10320:	80a0      	strh	r0, [r4, #4]
   10322:	2000      	movs	r0, #0
   10324:	bd10      	pop	{r4, pc}

00010326 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10326:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10328:	460c      	mov	r4, r1
   1032a:	4605      	mov	r5, r0
   1032c:	8800      	ldrh	r0, [r0, #0]
   1032e:	4669      	mov	r1, sp
   10330:	f7fd fce8 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10334:	b108      	cbz	r0, 1033a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10336:	2002      	movs	r0, #2
   10338:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1033a:	78a8      	ldrb	r0, [r5, #2]
   1033c:	b158      	cbz	r0, 10356 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   1033e:	f000 f9e9 	bl	10714 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   10342:	70a0      	strb	r0, [r4, #2]
   10344:	8828      	ldrh	r0, [r5, #0]
   10346:	8020      	strh	r0, [r4, #0]
   10348:	f994 0002 	ldrsb.w	r0, [r4, #2]
   1034c:	f7f2 fe82 	bl	3054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10350:	70a0      	strb	r0, [r4, #2]
   10352:	2000      	movs	r0, #0
   10354:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10356:	9801      	ldr	r0, [sp, #4]
   10358:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1035c:	e7f1      	b.n	10342 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001035e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1035e:	b510      	push	{r4, lr}
   10360:	f7f7 fa6c 	bl	783c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10364:	2000      	movs	r0, #0
   10366:	bd10      	pop	{r4, pc}

00010368 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10368:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1036c:	4604      	mov	r4, r0
   1036e:	8840      	ldrh	r0, [r0, #2]
   10370:	460d      	mov	r5, r1
   10372:	b1b8      	cbz	r0, 103a4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10374:	8820      	ldrh	r0, [r4, #0]
   10376:	4669      	mov	r1, sp
   10378:	f7fd fcc4 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1037c:	2800      	cmp	r0, #0
   1037e:	d10f      	bne.n	103a0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10380:	8820      	ldrh	r0, [r4, #0]
   10382:	8028      	strh	r0, [r5, #0]
   10384:	9e01      	ldr	r6, [sp, #4]
   10386:	f106 0510 	add.w	r5, r6, #16
   1038a:	3680      	adds	r6, #128	; 0x80
   1038c:	682f      	ldr	r7, [r5, #0]
   1038e:	8862      	ldrh	r2, [r4, #2]
   10390:	4639      	mov	r1, r7
   10392:	4630      	mov	r0, r6
   10394:	f7fd fde7 	bl	df66 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10398:	6828      	ldr	r0, [r5, #0]
   1039a:	42b8      	cmp	r0, r7
   1039c:	d1f6      	bne.n	1038c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1039e:	2000      	movs	r0, #0
   103a0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   103a4:	2012      	movs	r0, #18
   103a6:	e7fb      	b.n	103a0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

000103a8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   103a8:	f000 b863 	b.w	10472 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000103ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   103ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103b0:	b086      	sub	sp, #24
   103b2:	4689      	mov	r9, r1
   103b4:	4607      	mov	r7, r0
   103b6:	8800      	ldrh	r0, [r0, #0]
   103b8:	a901      	add	r1, sp, #4
   103ba:	f7fd fca3 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   103be:	2800      	cmp	r0, #0
   103c0:	d136      	bne.n	10430 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   103c2:	9802      	ldr	r0, [sp, #8]
   103c4:	4601      	mov	r1, r0
   103c6:	4688      	mov	r8, r1
   103c8:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   103cc:	f500 7498 	add.w	r4, r0, #304	; 0x130
   103d0:	f88d 1000 	strb.w	r1, [sp]
   103d4:	9900      	ldr	r1, [sp, #0]
   103d6:	9100      	str	r1, [sp, #0]
   103d8:	f89d 1000 	ldrb.w	r1, [sp]
   103dc:	3080      	adds	r0, #128	; 0x80
   103de:	b109      	cbz	r1, 103e4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   103e0:	2601      	movs	r6, #1
   103e2:	e000      	b.n	103e6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   103e4:	2600      	movs	r6, #0
   103e6:	7f81      	ldrb	r1, [r0, #30]
   103e8:	2922      	cmp	r1, #34	; 0x22
   103ea:	d100      	bne.n	103ee <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   103ec:	b13e      	cbz	r6, 103fe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   103ee:	2500      	movs	r5, #0
   103f0:	306c      	adds	r0, #108	; 0x6c
   103f2:	2108      	movs	r1, #8
   103f4:	4682      	mov	sl, r0
   103f6:	f7ff fbc4 	bl	fb82 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   103fa:	b110      	cbz	r0, 10402 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   103fc:	e007      	b.n	1040e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   103fe:	2501      	movs	r5, #1
   10400:	e7f6      	b.n	103f0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10402:	210b      	movs	r1, #11
   10404:	4650      	mov	r0, sl
   10406:	f7ff fbbc 	bl	fb82 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   1040a:	b900      	cbnz	r0, 1040e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1040c:	b17d      	cbz	r5, 1042e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   1040e:	a804      	add	r0, sp, #16
   10410:	9000      	str	r0, [sp, #0]
   10412:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10416:	ab03      	add	r3, sp, #12
   10418:	463a      	mov	r2, r7
   1041a:	4641      	mov	r1, r8
   1041c:	f000 f95a 	bl	106d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   10420:	0005      	movs	r5, r0
   10422:	d105      	bne.n	10430 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10424:	340c      	adds	r4, #12
   10426:	20ff      	movs	r0, #255	; 0xff
   10428:	7060      	strb	r0, [r4, #1]
   1042a:	b936      	cbnz	r6, 1043a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1042c:	e003      	b.n	10436 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1042e:	201a      	movs	r0, #26
   10430:	b006      	add	sp, #24
   10432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10436:	7820      	ldrb	r0, [r4, #0]
   10438:	b108      	cbz	r0, 1043e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   1043a:	253a      	movs	r5, #58	; 0x3a
   1043c:	e012      	b.n	10464 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1043e:	f884 9000 	strb.w	r9, [r4]
   10442:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10446:	70a0      	strb	r0, [r4, #2]
   10448:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1044c:	70e1      	strb	r1, [r4, #3]
   1044e:	f88d 0000 	strb.w	r0, [sp]
   10452:	f88d 1001 	strb.w	r1, [sp, #1]
   10456:	88b8      	ldrh	r0, [r7, #4]
   10458:	f8ad 0002 	strh.w	r0, [sp, #2]
   1045c:	4669      	mov	r1, sp
   1045e:	4640      	mov	r0, r8
   10460:	f7fd fd20 	bl	dea4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10464:	2000      	movs	r0, #0
   10466:	7060      	strb	r0, [r4, #1]
   10468:	4628      	mov	r0, r5
   1046a:	e7e1      	b.n	10430 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0001046c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   1046c:	2008      	movs	r0, #8
   1046e:	f7f7 ba4d 	b.w	790c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010472 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10472:	b510      	push	{r4, lr}
   10474:	f7fd fba9 	bl	dbca <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   10478:	f7f2 fbcc 	bl	2c14 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   1047c:	f7f7 fa68 	bl	7950 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   10480:	f7fe f813 	bl	e4aa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   10484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10488:	f7f6 bfd6 	b.w	7438 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

0001048c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   1048c:	f7f5 b866 	b.w	555c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10490:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10494:	4288      	cmp	r0, r1
   10496:	d303      	bcc.n	104a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   10498:	f640 0148 	movw	r1, #2120	; 0x848
   1049c:	4288      	cmp	r0, r1
   1049e:	d300      	bcc.n	104a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   104a0:	4608      	mov	r0, r1
   104a2:	b280      	uxth	r0, r0
   104a4:	4770      	bx	lr
   104a6:	07c1      	lsls	r1, r0, #31
   104a8:	d001      	beq.n	104ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   104aa:	2001      	movs	r0, #1
   104ac:	4770      	bx	lr
   104ae:	0780      	lsls	r0, r0, #30
   104b0:	d501      	bpl.n	104b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   104b2:	2002      	movs	r0, #2
   104b4:	4770      	bx	lr
   104b6:	2000      	movs	r0, #0
   104b8:	4770      	bx	lr
   104ba:	b510      	push	{r4, lr}
   104bc:	2801      	cmp	r0, #1
   104be:	d006      	beq.n	104ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   104c0:	2802      	cmp	r0, #2
   104c2:	d004      	beq.n	104ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   104c4:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   104c8:	2006      	movs	r0, #6
   104ca:	f7f0 ff69 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104ce:	bd10      	pop	{r4, pc}
   104d0:	b510      	push	{r4, lr}
   104d2:	f7f6 ff2f 	bl	7334 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   104d6:	b158      	cbz	r0, 104f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   104d8:	f7f6 ffce 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   104dc:	4604      	mov	r4, r0
   104de:	f7fe fb50 	bl	eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   104e2:	b918      	cbnz	r0, 104ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   104e4:	4620      	mov	r0, r4
   104e6:	f7fe fb42 	bl	eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   104ea:	b108      	cbz	r0, 104f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   104ec:	2000      	movs	r0, #0
   104ee:	bd10      	pop	{r4, pc}
   104f0:	2001      	movs	r0, #1
   104f2:	bd10      	pop	{r4, pc}
   104f4:	b570      	push	{r4, r5, r6, lr}
   104f6:	460c      	mov	r4, r1
   104f8:	4605      	mov	r5, r0
   104fa:	b112      	cbz	r2, 10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   104fc:	291f      	cmp	r1, #31
   104fe:	d80c      	bhi.n	1051a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10500:	e016      	b.n	10530 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   10502:	f7f1 fc2b 	bl	1d5c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10506:	42a0      	cmp	r0, r4
   10508:	d201      	bcs.n	1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   1050a:	2007      	movs	r0, #7
   1050c:	bd70      	pop	{r4, r5, r6, pc}
   1050e:	4628      	mov	r0, r5
   10510:	f7fe fb35 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10514:	b118      	cbz	r0, 1051e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10516:	2c1f      	cmp	r4, #31
   10518:	d901      	bls.n	1051e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1051a:	2012      	movs	r0, #18
   1051c:	bd70      	pop	{r4, r5, r6, pc}
   1051e:	4628      	mov	r0, r5
   10520:	f7fe fb36 	bl	eb90 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10524:	b130      	cbz	r0, 10534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   10526:	4621      	mov	r1, r4
   10528:	4628      	mov	r0, r5
   1052a:	f7fe faff 	bl	eb2c <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1052e:	b118      	cbz	r0, 10538 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   10530:	2000      	movs	r0, #0
   10532:	bd70      	pop	{r4, r5, r6, pc}
   10534:	2042      	movs	r0, #66	; 0x42
   10536:	bd70      	pop	{r4, r5, r6, pc}
   10538:	2045      	movs	r0, #69	; 0x45
   1053a:	bd70      	pop	{r4, r5, r6, pc}
   1053c:	b510      	push	{r4, lr}
   1053e:	4604      	mov	r4, r0
   10540:	7840      	ldrb	r0, [r0, #1]
   10542:	06c1      	lsls	r1, r0, #27
   10544:	d51c      	bpl.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10546:	07c0      	lsls	r0, r0, #31
   10548:	d00b      	beq.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1054a:	f7f7 f9b3 	bl	78b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1054e:	b1b8      	cbz	r0, 10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10550:	7860      	ldrb	r0, [r4, #1]
   10552:	06c1      	lsls	r1, r0, #27
   10554:	d405      	bmi.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10556:	0700      	lsls	r0, r0, #28
   10558:	d503      	bpl.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1055a:	7d20      	ldrb	r0, [r4, #20]
   1055c:	2802      	cmp	r0, #2
   1055e:	d10f      	bne.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10560:	e010      	b.n	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10562:	7d20      	ldrb	r0, [r4, #20]
   10564:	2802      	cmp	r0, #2
   10566:	d001      	beq.n	1056c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   10568:	7ea0      	ldrb	r0, [r4, #26]
   1056a:	b948      	cbnz	r0, 10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1056c:	7860      	ldrb	r0, [r4, #1]
   1056e:	0700      	lsls	r0, r0, #28
   10570:	d408      	bmi.n	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10572:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1057a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1057e:	d201      	bcs.n	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10580:	2011      	movs	r0, #17
   10582:	bd10      	pop	{r4, pc}
   10584:	2000      	movs	r0, #0
   10586:	bd10      	pop	{r4, pc}
   10588:	b538      	push	{r3, r4, r5, lr}
   1058a:	4604      	mov	r4, r0
   1058c:	7800      	ldrb	r0, [r0, #0]
   1058e:	28ef      	cmp	r0, #239	; 0xef
   10590:	d843      	bhi.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10592:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10596:	f8ad 0000 	strh.w	r0, [sp]
   1059a:	9800      	ldr	r0, [sp, #0]
   1059c:	f000 f918 	bl	107d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   105a0:	b3a0      	cbz	r0, 1060c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   105a2:	7861      	ldrb	r1, [r4, #1]
   105a4:	0708      	lsls	r0, r1, #28
   105a6:	d40b      	bmi.n	105c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   105a8:	f8d4 0002 	ldr.w	r0, [r4, #2]
   105ac:	f8d4 3005 	ldr.w	r3, [r4, #5]
   105b0:	0a02      	lsrs	r2, r0, #8
   105b2:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   105b6:	d830      	bhi.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105b8:	2220      	movs	r2, #32
   105ba:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   105be:	d82c      	bhi.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105c0:	7a60      	ldrb	r0, [r4, #9]
   105c2:	b318      	cbz	r0, 1060c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   105c4:	2807      	cmp	r0, #7
   105c6:	d828      	bhi.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105c8:	7aa0      	ldrb	r0, [r4, #10]
   105ca:	b128      	cbz	r0, 105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   105cc:	2801      	cmp	r0, #1
   105ce:	d003      	beq.n	105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   105d0:	2802      	cmp	r0, #2
   105d2:	d001      	beq.n	105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   105d4:	2803      	cmp	r0, #3
   105d6:	d120      	bne.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105d8:	074a      	lsls	r2, r1, #29
   105da:	d403      	bmi.n	105e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   105dc:	2802      	cmp	r0, #2
   105de:	d001      	beq.n	105e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   105e0:	2803      	cmp	r0, #3
   105e2:	d105      	bne.n	105f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   105e4:	7ae0      	ldrb	r0, [r4, #11]
   105e6:	b108      	cbz	r0, 105ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   105e8:	2801      	cmp	r0, #1
   105ea:	d116      	bne.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105ec:	0748      	lsls	r0, r1, #29
   105ee:	d407      	bmi.n	10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   105f0:	7ca0      	ldrb	r0, [r4, #18]
   105f2:	b128      	cbz	r0, 10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   105f4:	2801      	cmp	r0, #1
   105f6:	d003      	beq.n	10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   105f8:	2802      	cmp	r0, #2
   105fa:	d001      	beq.n	10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   105fc:	2803      	cmp	r0, #3
   105fe:	d10c      	bne.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10600:	06c8      	lsls	r0, r1, #27
   10602:	7d20      	ldrb	r0, [r4, #20]
   10604:	d503      	bpl.n	1060e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   10606:	2801      	cmp	r0, #1
   10608:	d107      	bne.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1060a:	e002      	b.n	10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   1060c:	e005      	b.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1060e:	2802      	cmp	r0, #2
   10610:	d003      	beq.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10612:	7e20      	ldrb	r0, [r4, #24]
   10614:	b118      	cbz	r0, 1061e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10616:	2801      	cmp	r0, #1
   10618:	d001      	beq.n	1061e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1061a:	2012      	movs	r0, #18
   1061c:	bd38      	pop	{r3, r4, r5, pc}
   1061e:	2000      	movs	r0, #0
   10620:	bd38      	pop	{r3, r4, r5, pc}
   10622:	b510      	push	{r4, lr}
   10624:	0004      	movs	r4, r0
   10626:	d005      	beq.n	10634 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10628:	f7f7 f982 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1062c:	4384      	bics	r4, r0
   1062e:	d001      	beq.n	10634 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10630:	2000      	movs	r0, #0
   10632:	bd10      	pop	{r4, pc}
   10634:	2001      	movs	r0, #1
   10636:	bd10      	pop	{r4, pc}
   10638:	28fb      	cmp	r0, #251	; 0xfb
   1063a:	d803      	bhi.n	10644 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   1063c:	f640 0048 	movw	r0, #2120	; 0x848
   10640:	4281      	cmp	r1, r0
   10642:	d901      	bls.n	10648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   10644:	2011      	movs	r0, #17
   10646:	4770      	bx	lr
   10648:	2000      	movs	r0, #0
   1064a:	4770      	bx	lr
   1064c:	381b      	subs	r0, #27
   1064e:	28e1      	cmp	r0, #225	; 0xe1
   10650:	d206      	bcs.n	10660 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10652:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10656:	d303      	bcc.n	10660 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10658:	f244 2090 	movw	r0, #17040	; 0x4290
   1065c:	4281      	cmp	r1, r0
   1065e:	d901      	bls.n	10664 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10660:	2012      	movs	r0, #18
   10662:	4770      	bx	lr
   10664:	2000      	movs	r0, #0
   10666:	4770      	bx	lr
   10668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1066c:	4606      	mov	r6, r0
   1066e:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10672:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   10676:	4615      	mov	r5, r2
   10678:	302c      	adds	r0, #44	; 0x2c
   1067a:	f7f4 fa45 	bl	4b08 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   1067e:	4680      	mov	r8, r0
   10680:	2102      	movs	r1, #2
   10682:	f7fd fbdf 	bl	de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10686:	4287      	cmp	r7, r0
   10688:	d200      	bcs.n	1068c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   1068a:	4638      	mov	r0, r7
   1068c:	4607      	mov	r7, r0
   1068e:	2102      	movs	r1, #2
   10690:	4640      	mov	r0, r8
   10692:	f7fd fbd7 	bl	de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10696:	4284      	cmp	r4, r0
   10698:	d200      	bcs.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   1069a:	4620      	mov	r0, r4
   1069c:	8831      	ldrh	r1, [r6, #0]
   1069e:	8029      	strh	r1, [r5, #0]
   106a0:	2f1b      	cmp	r7, #27
   106a2:	d913      	bls.n	106cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   106a4:	2ffb      	cmp	r7, #251	; 0xfb
   106a6:	d300      	bcc.n	106aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   106a8:	27fb      	movs	r7, #251	; 0xfb
   106aa:	806f      	strh	r7, [r5, #2]
   106ac:	281b      	cmp	r0, #27
   106ae:	d90f      	bls.n	106d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   106b0:	28fb      	cmp	r0, #251	; 0xfb
   106b2:	d300      	bcc.n	106b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   106b4:	20fb      	movs	r0, #251	; 0xfb
   106b6:	80e8      	strh	r0, [r5, #6]
   106b8:	4640      	mov	r0, r8
   106ba:	f7ff fee9 	bl	10490 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   106be:	80a8      	strh	r0, [r5, #4]
   106c0:	4640      	mov	r0, r8
   106c2:	f7ff fee5 	bl	10490 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   106c6:	8128      	strh	r0, [r5, #8]
   106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106cc:	271b      	movs	r7, #27
   106ce:	e7ec      	b.n	106aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   106d0:	201b      	movs	r0, #27
   106d2:	e7f0      	b.n	106b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   106d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106d8:	7890      	ldrb	r0, [r2, #2]
   106da:	9e06      	ldr	r6, [sp, #24]
   106dc:	461d      	mov	r5, r3
   106de:	4614      	mov	r4, r2
   106e0:	b908      	cbnz	r0, 106e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   106e2:	f7f7 f925 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   106e6:	78e4      	ldrb	r4, [r4, #3]
   106e8:	4607      	mov	r7, r0
   106ea:	b914      	cbnz	r4, 106f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   106ec:	f7f7 f920 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   106f0:	4604      	mov	r4, r0
   106f2:	b16f      	cbz	r7, 10710 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   106f4:	b164      	cbz	r4, 10710 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   106f6:	4638      	mov	r0, r7
   106f8:	f7ff fed5 	bl	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   106fc:	4620      	mov	r0, r4
   106fe:	f7ff fed2 	bl	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10702:	b12f      	cbz	r7, 10710 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10704:	b124      	cbz	r4, 10710 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10706:	702f      	strb	r7, [r5, #0]
   10708:	7034      	strb	r4, [r6, #0]
   1070a:	2000      	movs	r0, #0
   1070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10710:	2009      	movs	r0, #9
   10712:	e7fb      	b.n	1070c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10714:	207f      	movs	r0, #127	; 0x7f
   10716:	f000 b83c 	b.w	10792 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   1071a:	b508      	push	{r3, lr}
   1071c:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   10720:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   10724:	f88d 0000 	strb.w	r0, [sp]
   10728:	9800      	ldr	r0, [sp, #0]
   1072a:	9000      	str	r0, [sp, #0]
   1072c:	f89d 0000 	ldrb.w	r0, [sp]
   10730:	b100      	cbz	r0, 10734 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   10732:	2001      	movs	r0, #1
   10734:	1e40      	subs	r0, r0, #1
   10736:	4208      	tst	r0, r1
   10738:	d003      	beq.n	10742 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1073a:	2904      	cmp	r1, #4
   1073c:	d001      	beq.n	10742 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1073e:	2001      	movs	r0, #1
   10740:	bd08      	pop	{r3, pc}
   10742:	2000      	movs	r0, #0
   10744:	bd08      	pop	{r3, pc}
   10746:	b570      	push	{r4, r5, r6, lr}
   10748:	4605      	mov	r5, r0
   1074a:	f7fe fa21 	bl	eb90 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1074e:	b170      	cbz	r0, 1076e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   10750:	4628      	mov	r0, r5
   10752:	f7fe fbed 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10756:	2800      	cmp	r0, #0
   10758:	d008      	beq.n	1076c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   1075a:	4628      	mov	r0, r5
   1075c:	f7fe fbe5 	bl	ef2a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10760:	4604      	mov	r4, r0
   10762:	4628      	mov	r0, r5
   10764:	f7fe fbbb 	bl	eede <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   10768:	b118      	cbz	r0, 10772 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   1076a:	200c      	movs	r0, #12
   1076c:	bd70      	pop	{r4, r5, r6, pc}
   1076e:	2042      	movs	r0, #66	; 0x42
   10770:	bd70      	pop	{r4, r5, r6, pc}
   10772:	b164      	cbz	r4, 1078e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10774:	8820      	ldrh	r0, [r4, #0]
   10776:	f7fd f9f5 	bl	db64 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1077a:	8820      	ldrh	r0, [r4, #0]
   1077c:	2100      	movs	r1, #0
   1077e:	f7f1 f895 	bl	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10782:	b120      	cbz	r0, 1078e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10784:	f241 61ac 	movw	r1, #5804	; 0x16ac
   10788:	2039      	movs	r0, #57	; 0x39
   1078a:	f7f0 fe09 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1078e:	2000      	movs	r0, #0
   10790:	bd70      	pop	{r4, r5, r6, pc}
   10792:	b508      	push	{r3, lr}
   10794:	f640 1288 	movw	r2, #2440	; 0x988
   10798:	2300      	movs	r3, #0
   1079a:	4669      	mov	r1, sp
   1079c:	f7fc f83e 	bl	c81c <mpsl_fem_tx_power_split>
   107a0:	bd08      	pop	{r3, pc}
   107a2:	b530      	push	{r4, r5, lr}
   107a4:	f340 0400 	sbfx	r4, r0, #0, #1
   107a8:	f340 0040 	sbfx	r0, r0, #1, #1
   107ac:	1c40      	adds	r0, r0, #1
   107ae:	9d03      	ldr	r5, [sp, #12]
   107b0:	1c64      	adds	r4, r4, #1
   107b2:	d000      	beq.n	107b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
   107b4:	b119      	cbz	r1, 107be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   107b6:	b100      	cbz	r0, 107ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
   107b8:	b10a      	cbz	r2, 107be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   107ba:	b91c      	cbnz	r4, 107c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   107bc:	e001      	b.n	107c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   107be:	2011      	movs	r0, #17
   107c0:	bd30      	pop	{r4, r5, pc}
   107c2:	2100      	movs	r1, #0
   107c4:	7019      	strb	r1, [r3, #0]
   107c6:	b900      	cbnz	r0, 107ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   107c8:	2200      	movs	r2, #0
   107ca:	702a      	strb	r2, [r5, #0]
   107cc:	2000      	movs	r0, #0
   107ce:	bd30      	pop	{r4, r5, pc}
   107d0:	b2c0      	uxtb	r0, r0
   107d2:	06c1      	lsls	r1, r0, #27
   107d4:	d40c      	bmi.n	107f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   107d6:	0681      	lsls	r1, r0, #26
   107d8:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   107dc:	d503      	bpl.n	107e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
   107de:	b9d1      	cbnz	r1, 10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107e0:	0781      	lsls	r1, r0, #30
   107e2:	d418      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107e4:	e001      	b.n	107ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
   107e6:	2900      	cmp	r1, #0
   107e8:	d1fa      	bne.n	107e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
   107ea:	0700      	lsls	r0, r0, #28
   107ec:	d413      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107ee:	e010      	b.n	10812 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   107f0:	0641      	lsls	r1, r0, #25
   107f2:	d410      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107f4:	0681      	lsls	r1, r0, #26
   107f6:	d40e      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107f8:	07c1      	lsls	r1, r0, #31
   107fa:	ea4f 7180 	mov.w	r1, r0, lsl #30
   107fe:	d004      	beq.n	1080a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10800:	2900      	cmp	r1, #0
   10802:	db02      	blt.n	1080a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10804:	0740      	lsls	r0, r0, #29
   10806:	d404      	bmi.n	10812 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   10808:	e005      	b.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1080a:	0701      	lsls	r1, r0, #28
   1080c:	d403      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1080e:	0740      	lsls	r0, r0, #29
   10810:	d401      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10812:	2001      	movs	r0, #1
   10814:	4770      	bx	lr
   10816:	2000      	movs	r0, #0
   10818:	4770      	bx	lr
   1081a:	b510      	push	{r4, lr}
   1081c:	f7f4 f958 	bl	4ad0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10820:	b108      	cbz	r0, 10826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   10822:	21fd      	movs	r1, #253	; 0xfd
   10824:	e004      	b.n	10830 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
   10826:	f7f3 faa9 	bl	3d7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1082a:	b120      	cbz	r0, 10836 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   1082c:	f44f 7181 	mov.w	r1, #258	; 0x102
   10830:	2001      	movs	r0, #1
   10832:	f7f0 fdb5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1083a:	2001      	movs	r0, #1
   1083c:	f7fc bfc4 	b.w	d7c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10840:	6802      	ldr	r2, [r0, #0]
   10842:	b912      	cbnz	r2, 1084a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   10844:	6001      	str	r1, [r0, #0]
   10846:	4770      	bx	lr
   10848:	4602      	mov	r2, r0
   1084a:	6850      	ldr	r0, [r2, #4]
   1084c:	b108      	cbz	r0, 10852 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   1084e:	428a      	cmp	r2, r1
   10850:	d1fa      	bne.n	10848 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   10852:	428a      	cmp	r2, r1
   10854:	d0f7      	beq.n	10846 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10856:	6051      	str	r1, [r2, #4]
   10858:	4770      	bx	lr
   1085a:	b510      	push	{r4, lr}
   1085c:	4604      	mov	r4, r0
   1085e:	e002      	b.n	10866 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
   10860:	6820      	ldr	r0, [r4, #0]
   10862:	4780      	blx	r0
   10864:	6864      	ldr	r4, [r4, #4]
   10866:	2c00      	cmp	r4, #0
   10868:	d1fa      	bne.n	10860 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
   1086a:	bd10      	pop	{r4, pc}
   1086c:	b510      	push	{r4, lr}
   1086e:	2000      	movs	r0, #0
   10870:	f7fc ffaa 	bl	d7c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10874:	f7f1 f97c 	bl	1b70 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10878:	f7f1 fc12 	bl	20a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1087c:	f7f1 fda0 	bl	23c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10880:	2800      	cmp	r0, #0
   10882:	d003      	beq.n	1088c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   10884:	21df      	movs	r1, #223	; 0xdf
   10886:	2001      	movs	r0, #1
   10888:	f7f0 fd8a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1088c:	bd10      	pop	{r4, pc}
   1088e:	b510      	push	{r4, lr}
   10890:	f7ff ffc3 	bl	1081a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   10894:	f7fe fe36 	bl	f504 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10898:	2800      	cmp	r0, #0
   1089a:	d004      	beq.n	108a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
   1089c:	f240 1117 	movw	r1, #279	; 0x117
   108a0:	2001      	movs	r0, #1
   108a2:	f7f0 fd7d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108a6:	bd10      	pop	{r4, pc}

000108a8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   108a8:	f7fb bcec 	b.w	c284 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   108ac:	000b0001 	.word	0x000b0001
   108b0:	000a0002 	.word	0x000a0002
   108b4:	00090005 	.word	0x00090005
   108b8:	0008000a 	.word	0x0008000a
   108bc:	00070014 	.word	0x00070014
   108c0:	0006001e 	.word	0x0006001e
   108c4:	00050032 	.word	0x00050032
   108c8:	0004004b 	.word	0x0004004b
   108cc:	00030064 	.word	0x00030064
   108d0:	00020096 	.word	0x00020096
   108d4:	000100fa 	.word	0x000100fa
   108d8:	000001f4 	.word	0x000001f4

000108dc <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   108dc:	b518      	push	{r3, r4, lr}
   108de:	2200      	movs	r2, #0
   108e0:	704a      	strb	r2, [r1, #1]
   108e2:	2314      	movs	r3, #20
   108e4:	700b      	strb	r3, [r1, #0]
   108e6:	7202      	strb	r2, [r0, #8]
   108e8:	f8d0 400a 	ldr.w	r4, [r0, #10]
   108ec:	604c      	str	r4, [r1, #4]
   108ee:	89c3      	ldrh	r3, [r0, #14]
   108f0:	810b      	strh	r3, [r1, #8]
   108f2:	7a03      	ldrb	r3, [r0, #8]
   108f4:	f88d 3000 	strb.w	r3, [sp]
   108f8:	9b00      	ldr	r3, [sp, #0]
   108fa:	9300      	str	r3, [sp, #0]
   108fc:	f89d 3000 	ldrb.w	r3, [sp]
   10900:	2b00      	cmp	r3, #0
   10902:	d1f0      	bne.n	108e6 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   10904:	bd18      	pop	{r3, r4, pc}

00010906 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   10906:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10908:	460d      	mov	r5, r1
   1090a:	4604      	mov	r4, r0
   1090c:	f7f2 fc68 	bl	31e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   10910:	2600      	movs	r6, #0
   10912:	b1f8      	cbz	r0, 10954 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   10914:	f5a4 70c6 	sub.w	r0, r4, #396	; 0x18c
   10918:	7226      	strb	r6, [r4, #8]
   1091a:	8800      	ldrh	r0, [r0, #0]
   1091c:	f8ad 0000 	strh.w	r0, [sp]
   10920:	a902      	add	r1, sp, #8
   10922:	f7fd f9ef 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10926:	b108      	cbz	r0, 1092c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   10928:	2124      	movs	r1, #36	; 0x24
   1092a:	e010      	b.n	1094e <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   1092c:	9803      	ldr	r0, [sp, #12]
   1092e:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   10932:	f88d 1002 	strb.w	r1, [sp, #2]
   10936:	7841      	ldrb	r1, [r0, #1]
   10938:	f88d 1003 	strb.w	r1, [sp, #3]
   1093c:	8840      	ldrh	r0, [r0, #2]
   1093e:	f8ad 0004 	strh.w	r0, [sp, #4]
   10942:	2102      	movs	r1, #2
   10944:	4668      	mov	r0, sp
   10946:	f7ff fd31 	bl	103ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1094a:	b118      	cbz	r0, 10954 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   1094c:	213a      	movs	r1, #58	; 0x3a
   1094e:	207e      	movs	r0, #126	; 0x7e
   10950:	f7f0 fd26 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10954:	201c      	movs	r0, #28
   10956:	7028      	strb	r0, [r5, #0]
   10958:	706e      	strb	r6, [r5, #1]
   1095a:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1095e:	6068      	str	r0, [r5, #4]
   10960:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

00010962 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10962:	b510      	push	{r4, lr}
   10964:	f7f7 fb7e 	bl	8064 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10968:	f000 f81d 	bl	109a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1096c:	f7f7 f854 	bl	7a18 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10974:	f7f7 b94e 	b.w	7c14 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010978 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10978:	b510      	push	{r4, lr}
   1097a:	24c8      	movs	r4, #200	; 0xc8
   1097c:	1e64      	subs	r4, r4, #1
   1097e:	b2e4      	uxtb	r4, r4
   10980:	f7f7 f868 	bl	7a54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10984:	2802      	cmp	r0, #2
   10986:	d003      	beq.n	10990 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10988:	2801      	cmp	r0, #1
   1098a:	d000      	beq.n	1098e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   1098c:	2000      	movs	r0, #0
   1098e:	bd10      	pop	{r4, pc}
   10990:	2c00      	cmp	r4, #0
   10992:	d1f3      	bne.n	1097c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10994:	21ca      	movs	r1, #202	; 0xca
   10996:	203b      	movs	r0, #59	; 0x3b
   10998:	f7f0 fd02 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1099c:	5840      	ldr	r0, [r0, r1]
   1099e:	2800      	cmp	r0, #0
   109a0:	d000      	beq.n	109a4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   109a2:	2001      	movs	r0, #1
   109a4:	4770      	bx	lr

000109a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   109a6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   109aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   109ae:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   109b2:	f3bf 8f4f 	dsb	sy
   109b6:	f3bf 8f6f 	isb	sy
   109ba:	f7f7 b9c5 	b.w	7d48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   109be:	2800      	cmp	r0, #0
   109c0:	db09      	blt.n	109d6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   109c2:	f000 021f 	and.w	r2, r0, #31
   109c6:	2101      	movs	r1, #1
   109c8:	4091      	lsls	r1, r2
   109ca:	0940      	lsrs	r0, r0, #5
   109cc:	0080      	lsls	r0, r0, #2
   109ce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109d2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   109d6:	4770      	bx	lr
   109d8:	2800      	cmp	r0, #0
   109da:	db0d      	blt.n	109f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   109dc:	f000 021f 	and.w	r2, r0, #31
   109e0:	2101      	movs	r1, #1
   109e2:	4091      	lsls	r1, r2
   109e4:	0940      	lsrs	r0, r0, #5
   109e6:	0080      	lsls	r0, r0, #2
   109e8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109ec:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   109f0:	f3bf 8f4f 	dsb	sy
   109f4:	f3bf 8f6f 	isb	sy
   109f8:	4770      	bx	lr
   109fa:	5840      	ldr	r0, [r0, r1]
   109fc:	2800      	cmp	r0, #0
   109fe:	d000      	beq.n	10a02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10a00:	2001      	movs	r0, #1
   10a02:	4770      	bx	lr
   10a04:	5840      	ldr	r0, [r0, r1]
   10a06:	2800      	cmp	r0, #0
   10a08:	d000      	beq.n	10a0c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10a0a:	2001      	movs	r0, #1
   10a0c:	4770      	bx	lr

00010a0e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10a0e:	b510      	push	{r4, lr}
   10a10:	4604      	mov	r4, r0
   10a12:	4608      	mov	r0, r1
   10a14:	f7f7 fc4c 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10a1c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10a20:	fbb0 f0f1 	udiv	r0, r0, r1
   10a24:	1a20      	subs	r0, r4, r0
   10a26:	1e80      	subs	r0, r0, #2
   10a28:	bd10      	pop	{r4, pc}

00010a2a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10a2a:	b510      	push	{r4, lr}
   10a2c:	4604      	mov	r4, r0
   10a2e:	4608      	mov	r0, r1
   10a30:	f7f7 fc3e 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10a38:	fbb0 f0f1 	udiv	r0, r0, r1
   10a3c:	1a20      	subs	r0, r4, r0
   10a3e:	bd10      	pop	{r4, pc}
   10a40:	2804      	cmp	r0, #4
   10a42:	d202      	bcs.n	10a4a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10a44:	f04f 0028 	mov.w	r0, #40	; 0x28
   10a48:	4770      	bx	lr
   10a4a:	d102      	bne.n	10a52 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10a4c:	f04f 0010 	mov.w	r0, #16
   10a50:	4770      	bx	lr
   10a52:	f04f 0000 	mov.w	r0, #0
   10a56:	4770      	bx	lr
   10a58:	2100      	movs	r1, #0
   10a5a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10a5e:	f800 1f24 	strb.w	r1, [r0, #36]!
   10a62:	7041      	strb	r1, [r0, #1]
   10a64:	4770      	bx	lr

00010a66 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10a66:	b570      	push	{r4, r5, r6, lr}
   10a68:	f7f8 f9e2 	bl	8e30 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10a6c:	4605      	mov	r5, r0
   10a6e:	2400      	movs	r4, #0
   10a70:	e006      	b.n	10a80 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10a72:	4620      	mov	r0, r4
   10a74:	f7f8 f9e2 	bl	8e3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10a78:	f7ff ffee 	bl	10a58 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10a7c:	1c64      	adds	r4, r4, #1
   10a7e:	b2e4      	uxtb	r4, r4
   10a80:	42ac      	cmp	r4, r5
   10a82:	d3f6      	bcc.n	10a72 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10a84:	bd70      	pop	{r4, r5, r6, pc}

00010a86 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10a86:	f7fa bdb9 	b.w	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010a8a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10a8a:	b510      	push	{r4, lr}
   10a8c:	2000      	movs	r0, #0
   10a8e:	f7fb f8ef 	bl	bc70 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10a92:	6800      	ldr	r0, [r0, #0]
   10a94:	2800      	cmp	r0, #0
   10a96:	bf18      	it	ne
   10a98:	2001      	movne	r0, #1
   10a9a:	bd10      	pop	{r4, pc}

00010a9c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10a9c:	b510      	push	{r4, lr}
   10a9e:	f7fb f967 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   10aa2:	f7fa fc25 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10aa6:	f000 f802 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10aaa:	b280      	uxth	r0, r0
   10aac:	bd10      	pop	{r4, pc}

00010aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10aae:	0a41      	lsrs	r1, r0, #9
   10ab0:	f643 5209 	movw	r2, #15625	; 0x3d09
   10ab4:	4351      	muls	r1, r2
   10ab6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10aba:	fb10 f002 	smulbb	r0, r0, r2
   10abe:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10ac2:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10ac6:	4770      	bx	lr
   10ac8:	2800      	cmp	r0, #0
   10aca:	db09      	blt.n	10ae0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10acc:	f000 021f 	and.w	r2, r0, #31
   10ad0:	2101      	movs	r1, #1
   10ad2:	4091      	lsls	r1, r2
   10ad4:	0940      	lsrs	r0, r0, #5
   10ad6:	0080      	lsls	r0, r0, #2
   10ad8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10adc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10ae0:	4770      	bx	lr
   10ae2:	2800      	cmp	r0, #0
   10ae4:	db0d      	blt.n	10b02 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10ae6:	f000 021f 	and.w	r2, r0, #31
   10aea:	2101      	movs	r1, #1
   10aec:	4091      	lsls	r1, r2
   10aee:	0940      	lsrs	r0, r0, #5
   10af0:	0080      	lsls	r0, r0, #2
   10af2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10af6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10afa:	f3bf 8f4f 	dsb	sy
   10afe:	f3bf 8f6f 	isb	sy
   10b02:	4770      	bx	lr
   10b04:	5840      	ldr	r0, [r0, r1]
   10b06:	2800      	cmp	r0, #0
   10b08:	d000      	beq.n	10b0c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10b0a:	2001      	movs	r0, #1
   10b0c:	4770      	bx	lr
   10b0e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10b12:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10b16:	f002 0201 	and.w	r2, r2, #1
   10b1a:	03c0      	lsls	r0, r0, #15
   10b1c:	d503      	bpl.n	10b26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10b1e:	428a      	cmp	r2, r1
   10b20:	d101      	bne.n	10b26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10b22:	2001      	movs	r0, #1
   10b24:	4770      	bx	lr
   10b26:	2000      	movs	r0, #0
   10b28:	4770      	bx	lr

00010b2a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10b2a:	b510      	push	{r4, lr}
   10b2c:	2101      	movs	r1, #1
   10b2e:	0788      	lsls	r0, r1, #30
   10b30:	f7fb fc5e 	bl	c3f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10b34:	2800      	cmp	r0, #0
   10b36:	d000      	beq.n	10b3a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10b38:	2001      	movs	r0, #1
   10b3a:	bd10      	pop	{r4, pc}

00010b3c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10b3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10b40:	2101      	movs	r1, #1
   10b42:	6001      	str	r1, [r0, #0]
   10b44:	4770      	bx	lr

00010b46 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10b4a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10b4e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10b52:	f002 0203 	and.w	r2, r2, #3
   10b56:	03c9      	lsls	r1, r1, #15
   10b58:	d503      	bpl.n	10b62 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10b5a:	4282      	cmp	r2, r0
   10b5c:	d101      	bne.n	10b62 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10b5e:	2001      	movs	r0, #1
   10b60:	4770      	bx	lr
   10b62:	2000      	movs	r0, #0
   10b64:	4770      	bx	lr

00010b66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10b66:	b510      	push	{r4, lr}
   10b68:	2100      	movs	r1, #0
   10b6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10b6e:	f7fb fc3f 	bl	c3f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10b72:	2800      	cmp	r0, #0
   10b74:	d000      	beq.n	10b78 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10b76:	2001      	movs	r0, #1
   10b78:	bd10      	pop	{r4, pc}
   10b7a:	2800      	cmp	r0, #0
   10b7c:	db09      	blt.n	10b92 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10b7e:	f000 021f 	and.w	r2, r0, #31
   10b82:	2101      	movs	r1, #1
   10b84:	4091      	lsls	r1, r2
   10b86:	0940      	lsrs	r0, r0, #5
   10b88:	0080      	lsls	r0, r0, #2
   10b8a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b8e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10b92:	4770      	bx	lr
   10b94:	2800      	cmp	r0, #0
   10b96:	db0d      	blt.n	10bb4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10b98:	f000 021f 	and.w	r2, r0, #31
   10b9c:	2101      	movs	r1, #1
   10b9e:	4091      	lsls	r1, r2
   10ba0:	0940      	lsrs	r0, r0, #5
   10ba2:	0080      	lsls	r0, r0, #2
   10ba4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10ba8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10bac:	f3bf 8f4f 	dsb	sy
   10bb0:	f3bf 8f6f 	isb	sy
   10bb4:	4770      	bx	lr
   10bb6:	1000      	.short	0x1000
   10bb8:	00fa0002 	.word	0x00fa0002
   10bbc:	f18c0000 	.word	0xf18c0000
   10bc0:	4134cc9e 	.word	0x4134cc9e
   10bc4:	f70ea7d7 	.word	0xf70ea7d7
   10bc8:	2bbb1459 	.word	0x2bbb1459
   10bcc:	bb7f67d7 	.word	0xbb7f67d7
   10bd0:	ebbe      	.short	0xebbe
   10bd2:	2800      	cmp	r0, #0
   10bd4:	db09      	blt.n	10bea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10bd6:	f000 021f 	and.w	r2, r0, #31
   10bda:	2101      	movs	r1, #1
   10bdc:	4091      	lsls	r1, r2
   10bde:	0940      	lsrs	r0, r0, #5
   10be0:	0080      	lsls	r0, r0, #2
   10be2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10be6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10bea:	4770      	bx	lr

00010bec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10bec:	f3ef 8110 	mrs	r1, PRIMASK
   10bf0:	b672      	cpsid	i
   10bf2:	7802      	ldrb	r2, [r0, #0]
   10bf4:	2a01      	cmp	r2, #1
   10bf6:	d001      	beq.n	10bfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10bf8:	2201      	movs	r2, #1
   10bfa:	e000      	b.n	10bfe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10bfc:	2200      	movs	r2, #0
   10bfe:	2301      	movs	r3, #1
   10c00:	7003      	strb	r3, [r0, #0]
   10c02:	b901      	cbnz	r1, 10c06 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10c04:	b662      	cpsie	i
   10c06:	b10a      	cbz	r2, 10c0c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10c08:	2000      	movs	r0, #0
   10c0a:	4770      	bx	lr
   10c0c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10c10:	4770      	bx	lr

00010c12 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10c12:	2100      	movs	r1, #0
   10c14:	7001      	strb	r1, [r0, #0]
   10c16:	4608      	mov	r0, r1
   10c18:	4770      	bx	lr

00010c1a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10c1a:	f3ef 8110 	mrs	r1, PRIMASK
   10c1e:	b672      	cpsid	i
   10c20:	2200      	movs	r2, #0
   10c22:	7002      	strb	r2, [r0, #0]
   10c24:	b901      	cbnz	r1, 10c28 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10c26:	b662      	cpsie	i
   10c28:	2000      	movs	r0, #0
   10c2a:	4770      	bx	lr

00010c2c <mpsl_low_priority_process>:
   10c2c:	f7fb bd36 	b.w	c69c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10c30:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c34:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10c38:	280f      	cmp	r0, #15
   10c3a:	d001      	beq.n	10c40 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10c3c:	2000      	movs	r0, #0
   10c3e:	4770      	bx	lr
   10c40:	2001      	movs	r0, #1
   10c42:	4770      	bx	lr

00010c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10c44:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c48:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10c4c:	280a      	cmp	r0, #10
   10c4e:	d001      	beq.n	10c54 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10c50:	2000      	movs	r0, #0
   10c52:	4770      	bx	lr
   10c54:	2001      	movs	r0, #1
   10c56:	4770      	bx	lr

00010c58 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10c58:	b500      	push	{lr}
   10c5a:	f7ff fff3 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10c5e:	b120      	cbz	r0, 10c6a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10c60:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c64:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10c68:	b108      	cbz	r0, 10c6e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10c6a:	2000      	movs	r0, #0
   10c6c:	bd00      	pop	{pc}
   10c6e:	2001      	movs	r0, #1
   10c70:	bd00      	pop	{pc}

00010c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10c72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c76:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10c7a:	280e      	cmp	r0, #14
   10c7c:	d001      	beq.n	10c82 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10c7e:	2000      	movs	r0, #0
   10c80:	4770      	bx	lr
   10c82:	2001      	movs	r0, #1
   10c84:	4770      	bx	lr

00010c86 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10c86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c8a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10c8e:	2810      	cmp	r0, #16
   10c90:	d001      	beq.n	10c96 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10c92:	2000      	movs	r0, #0
   10c94:	4770      	bx	lr
   10c96:	2001      	movs	r0, #1
   10c98:	4770      	bx	lr

00010c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10c9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c9e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10ca2:	2806      	cmp	r0, #6
   10ca4:	d003      	beq.n	10cae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10ca6:	1c40      	adds	r0, r0, #1
   10ca8:	d001      	beq.n	10cae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10caa:	2000      	movs	r0, #0
   10cac:	4770      	bx	lr
   10cae:	2001      	movs	r0, #1
   10cb0:	4770      	bx	lr

00010cb2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10cb2:	b500      	push	{lr}
   10cb4:	f7ff fff1 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10cb8:	b148      	cbz	r0, 10cce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10cba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cbe:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10cc2:	2806      	cmp	r0, #6
   10cc4:	d303      	bcc.n	10cce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10cc6:	1c40      	adds	r0, r0, #1
   10cc8:	d001      	beq.n	10cce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10cca:	2001      	movs	r0, #1
   10ccc:	bd00      	pop	{pc}
   10cce:	2000      	movs	r0, #0
   10cd0:	bd00      	pop	{pc}

00010cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10cd2:	b500      	push	{lr}
   10cd4:	f7ff ffe1 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10cd8:	b138      	cbz	r0, 10cea <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10cda:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cde:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10ce2:	2806      	cmp	r0, #6
   10ce4:	d303      	bcc.n	10cee <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10ce6:	1c40      	adds	r0, r0, #1
   10ce8:	d001      	beq.n	10cee <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10cea:	2000      	movs	r0, #0
   10cec:	bd00      	pop	{pc}
   10cee:	2001      	movs	r0, #1
   10cf0:	bd00      	pop	{pc}

00010cf2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10cf2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cf6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10cfa:	280d      	cmp	r0, #13
   10cfc:	d001      	beq.n	10d02 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10cfe:	2000      	movs	r0, #0
   10d00:	4770      	bx	lr
   10d02:	2001      	movs	r0, #1
   10d04:	4770      	bx	lr

00010d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10d06:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d0a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d0e:	2808      	cmp	r0, #8
   10d10:	d001      	beq.n	10d16 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10d12:	2000      	movs	r0, #0
   10d14:	4770      	bx	lr
   10d16:	2001      	movs	r0, #1
   10d18:	4770      	bx	lr

00010d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10d1a:	f7fb bcf9 	b.w	c710 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010d1e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10d1e:	f7fb bcf7 	b.w	c710 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010d22 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d26:	428a      	cmp	r2, r1
   10d28:	d803      	bhi.n	10d32 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10d2a:	2179      	movs	r1, #121	; 0x79
   10d2c:	2096      	movs	r0, #150	; 0x96
   10d2e:	f7fb fbb5 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10d32:	fab2 f382 	clz	r3, r2
   10d36:	b13b      	cbz	r3, 10d48 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10d38:	4099      	lsls	r1, r3
   10d3a:	f1c3 0420 	rsb	r4, r3, #32
   10d3e:	fa20 f404 	lsr.w	r4, r0, r4
   10d42:	4321      	orrs	r1, r4
   10d44:	4098      	lsls	r0, r3
   10d46:	409a      	lsls	r2, r3
   10d48:	0c14      	lsrs	r4, r2, #16
   10d4a:	0c07      	lsrs	r7, r0, #16
   10d4c:	b286      	uxth	r6, r0
   10d4e:	fbb1 f0f4 	udiv	r0, r1, r4
   10d52:	fbb1 f3f4 	udiv	r3, r1, r4
   10d56:	fb04 1c10 	mls	ip, r4, r0, r1
   10d5a:	b295      	uxth	r5, r2
   10d5c:	fb03 f005 	mul.w	r0, r3, r5
   10d60:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   10d64:	4560      	cmp	r0, ip
   10d66:	d907      	bls.n	10d78 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10d68:	eba0 000c 	sub.w	r0, r0, ip
   10d6c:	4290      	cmp	r0, r2
   10d6e:	d901      	bls.n	10d74 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   10d70:	2002      	movs	r0, #2
   10d72:	e000      	b.n	10d76 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   10d74:	2001      	movs	r0, #1
   10d76:	1a1b      	subs	r3, r3, r0
   10d78:	0409      	lsls	r1, r1, #16
   10d7a:	0418      	lsls	r0, r3, #16
   10d7c:	19c9      	adds	r1, r1, r7
   10d7e:	fba3 3702 	umull	r3, r7, r3, r2
   10d82:	1acf      	subs	r7, r1, r3
   10d84:	fbb7 f1f4 	udiv	r1, r7, r4
   10d88:	fbb7 f3f4 	udiv	r3, r7, r4
   10d8c:	fb04 7413 	mls	r4, r4, r3, r7
   10d90:	fb01 f305 	mul.w	r3, r1, r5
   10d94:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10d98:	42a3      	cmp	r3, r4
   10d9a:	d906      	bls.n	10daa <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10d9c:	1b1b      	subs	r3, r3, r4
   10d9e:	4293      	cmp	r3, r2
   10da0:	d901      	bls.n	10da6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   10da2:	2202      	movs	r2, #2
   10da4:	e000      	b.n	10da8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10da6:	2201      	movs	r2, #1
   10da8:	1a89      	subs	r1, r1, r2
   10daa:	4308      	orrs	r0, r1
   10dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10db0:	b4f0      	push	{r4, r5, r6, r7}
   10db2:	ea80 0c01 	eor.w	ip, r0, r1
   10db6:	4603      	mov	r3, r0
   10db8:	f01c 0f03 	tst.w	ip, #3
   10dbc:	d13c      	bne.n	10e38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10dbe:	f013 0f03 	tst.w	r3, #3
   10dc2:	d00b      	beq.n	10ddc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10dc4:	2a00      	cmp	r2, #0
   10dc6:	bf04      	itt	eq
   10dc8:	bcf0      	popeq	{r4, r5, r6, r7}
   10dca:	4770      	bxeq	lr
   10dcc:	f811 cb01 	ldrb.w	ip, [r1], #1
   10dd0:	f803 cb01 	strb.w	ip, [r3], #1
   10dd4:	1e52      	subs	r2, r2, #1
   10dd6:	f013 0f03 	tst.w	r3, #3
   10dda:	d1f3      	bne.n	10dc4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10ddc:	2a03      	cmp	r2, #3
   10dde:	d94f      	bls.n	10e80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10de0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10de4:	d24c      	bcs.n	10e80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10de6:	f1c2 0c00 	rsb	ip, r2, #0
   10dea:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10dee:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10df2:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10df6:	f1cc 0c00 	rsb	ip, ip, #0
   10dfa:	f1bc 0f00 	cmp.w	ip, #0
   10dfe:	dd1b      	ble.n	10e38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e00:	1f0d      	subs	r5, r1, #4
   10e02:	1f1c      	subs	r4, r3, #4
   10e04:	f01c 0f01 	tst.w	ip, #1
   10e08:	d003      	beq.n	10e12 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10e0a:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10e0e:	f844 6f04 	str.w	r6, [r4, #4]!
   10e12:	ea5f 066c 	movs.w	r6, ip, asr #1
   10e16:	d007      	beq.n	10e28 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10e18:	686f      	ldr	r7, [r5, #4]
   10e1a:	6067      	str	r7, [r4, #4]
   10e1c:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10e20:	f844 7f08 	str.w	r7, [r4, #8]!
   10e24:	1e76      	subs	r6, r6, #1
   10e26:	d1f7      	bne.n	10e18 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10e28:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10e2c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10e30:	f1cc 0c00 	rsb	ip, ip, #0
   10e34:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10e38:	2a00      	cmp	r2, #0
   10e3a:	bf04      	itt	eq
   10e3c:	bcf0      	popeq	{r4, r5, r6, r7}
   10e3e:	4770      	bxeq	lr
   10e40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10e44:	d226      	bcs.n	10e94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10e46:	2a00      	cmp	r2, #0
   10e48:	bfdc      	itt	le
   10e4a:	bcf0      	pople	{r4, r5, r6, r7}
   10e4c:	4770      	bxle	lr
   10e4e:	1e49      	subs	r1, r1, #1
   10e50:	1e5b      	subs	r3, r3, #1
   10e52:	f012 0f01 	tst.w	r2, #1
   10e56:	d003      	beq.n	10e60 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10e58:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10e5c:	f803 cf01 	strb.w	ip, [r3, #1]!
   10e60:	1052      	asrs	r2, r2, #1
   10e62:	bf04      	itt	eq
   10e64:	bcf0      	popeq	{r4, r5, r6, r7}
   10e66:	4770      	bxeq	lr
   10e68:	f891 c001 	ldrb.w	ip, [r1, #1]
   10e6c:	f883 c001 	strb.w	ip, [r3, #1]
   10e70:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10e74:	f803 cf02 	strb.w	ip, [r3, #2]!
   10e78:	1e52      	subs	r2, r2, #1
   10e7a:	d1f5      	bne.n	10e68 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10e7c:	bcf0      	pop	{r4, r5, r6, r7}
   10e7e:	4770      	bx	lr
   10e80:	2a04      	cmp	r2, #4
   10e82:	d3d9      	bcc.n	10e38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e84:	f851 cb04 	ldr.w	ip, [r1], #4
   10e88:	1f12      	subs	r2, r2, #4
   10e8a:	f843 cb04 	str.w	ip, [r3], #4
   10e8e:	2a04      	cmp	r2, #4
   10e90:	d2f8      	bcs.n	10e84 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10e92:	e7d1      	b.n	10e38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e94:	f811 cb01 	ldrb.w	ip, [r1], #1
   10e98:	f803 cb01 	strb.w	ip, [r3], #1
   10e9c:	1e52      	subs	r2, r2, #1
   10e9e:	d1f9      	bne.n	10e94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10ea0:	bcf0      	pop	{r4, r5, r6, r7}
   10ea2:	4770      	bx	lr

00010ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10ea4:	b470      	push	{r4, r5, r6}
   10ea6:	4603      	mov	r3, r0
   10ea8:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10eac:	f010 0f03 	tst.w	r0, #3
   10eb0:	d009      	beq.n	10ec6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10eb2:	2a00      	cmp	r2, #0
   10eb4:	bf04      	itt	eq
   10eb6:	bc70      	popeq	{r4, r5, r6}
   10eb8:	4770      	bxeq	lr
   10eba:	f803 cb01 	strb.w	ip, [r3], #1
   10ebe:	1e52      	subs	r2, r2, #1
   10ec0:	f013 0f03 	tst.w	r3, #3
   10ec4:	d1f5      	bne.n	10eb2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10ec6:	b2c9      	uxtb	r1, r1
   10ec8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10ecc:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10ed0:	2a03      	cmp	r2, #3
   10ed2:	d939      	bls.n	10f48 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10ed4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10ed8:	d236      	bcs.n	10f48 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10eda:	4251      	negs	r1, r2
   10edc:	17cc      	asrs	r4, r1, #31
   10ede:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10ee2:	1089      	asrs	r1, r1, #2
   10ee4:	424e      	negs	r6, r1
   10ee6:	2e00      	cmp	r6, #0
   10ee8:	dd11      	ble.n	10f0e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10eea:	1f19      	subs	r1, r3, #4
   10eec:	f016 0f01 	tst.w	r6, #1
   10ef0:	bf18      	it	ne
   10ef2:	f841 5f04 	strne.w	r5, [r1, #4]!
   10ef6:	1074      	asrs	r4, r6, #1
   10ef8:	d004      	beq.n	10f04 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10efa:	604d      	str	r5, [r1, #4]
   10efc:	f841 5f08 	str.w	r5, [r1, #8]!
   10f00:	1e64      	subs	r4, r4, #1
   10f02:	d1fa      	bne.n	10efa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10f04:	4271      	negs	r1, r6
   10f06:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10f0a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10f0e:	2a00      	cmp	r2, #0
   10f10:	bf04      	itt	eq
   10f12:	bc70      	popeq	{r4, r5, r6}
   10f14:	4770      	bxeq	lr
   10f16:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10f1a:	d21d      	bcs.n	10f58 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10f1c:	2a00      	cmp	r2, #0
   10f1e:	bfdc      	itt	le
   10f20:	bc70      	pople	{r4, r5, r6}
   10f22:	4770      	bxle	lr
   10f24:	1e59      	subs	r1, r3, #1
   10f26:	f012 0f01 	tst.w	r2, #1
   10f2a:	bf18      	it	ne
   10f2c:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10f30:	1052      	asrs	r2, r2, #1
   10f32:	bf04      	itt	eq
   10f34:	bc70      	popeq	{r4, r5, r6}
   10f36:	4770      	bxeq	lr
   10f38:	f881 c001 	strb.w	ip, [r1, #1]
   10f3c:	f801 cf02 	strb.w	ip, [r1, #2]!
   10f40:	1e52      	subs	r2, r2, #1
   10f42:	d1f9      	bne.n	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10f44:	bc70      	pop	{r4, r5, r6}
   10f46:	4770      	bx	lr
   10f48:	2a04      	cmp	r2, #4
   10f4a:	d3e0      	bcc.n	10f0e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10f4c:	1f12      	subs	r2, r2, #4
   10f4e:	f843 5b04 	str.w	r5, [r3], #4
   10f52:	2a04      	cmp	r2, #4
   10f54:	d2fa      	bcs.n	10f4c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10f56:	e7da      	b.n	10f0e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10f58:	f803 cb01 	strb.w	ip, [r3], #1
   10f5c:	1e52      	subs	r2, r2, #1
   10f5e:	d1fb      	bne.n	10f58 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10f60:	bc70      	pop	{r4, r5, r6}
   10f62:	4770      	bx	lr
   10f64:	f04f 30ff 	mov.w	r0, #4294967295
   10f68:	4770      	bx	lr
   10f6a:	2000      	movs	r0, #0
   10f6c:	4770      	bx	lr
   10f6e:	2000      	movs	r0, #0
   10f70:	4770      	bx	lr
   10f72:	f04f 30ff 	mov.w	r0, #4294967295
   10f76:	4770      	bx	lr
   10f78:	4770      	bx	lr
   10f7a:	4770      	bx	lr
   10f7c:	2000      	movs	r0, #0
   10f7e:	4770      	bx	lr
   10f80:	2100      	movs	r1, #0
   10f82:	7001      	strb	r1, [r0, #0]
   10f84:	4770      	bx	lr
   10f86:	f04f 30ff 	mov.w	r0, #4294967295
   10f8a:	4770      	bx	lr
   10f8c:	f04f 30ff 	mov.w	r0, #4294967295
   10f90:	4770      	bx	lr
   10f92:	2100      	movs	r1, #0
   10f94:	7001      	strb	r1, [r0, #0]
   10f96:	4770      	bx	lr
   10f98:	f04f 30ff 	mov.w	r0, #4294967295
   10f9c:	4770      	bx	lr
   10f9e:	f04f 30ff 	mov.w	r0, #4294967295
   10fa2:	4770      	bx	lr
   10fa4:	7800      	ldrb	r0, [r0, #0]
   10fa6:	2800      	cmp	r0, #0
   10fa8:	d001      	beq.n	10fae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10faa:	f06f 0015 	mvn.w	r0, #21
   10fae:	4770      	bx	lr
   10fb0:	2000      	movs	r0, #0
   10fb2:	4770      	bx	lr
   10fb4:	2200      	movs	r2, #0
   10fb6:	f000 b802 	b.w	10fbe <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010fba <mpsl_fem_init>:
   10fba:	f7f7 bea7 	b.w	8d0c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010fbe <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10fbe:	b570      	push	{r4, r5, r6, lr}
   10fc0:	4614      	mov	r4, r2
   10fc2:	460d      	mov	r5, r1
   10fc4:	1b00      	subs	r0, r0, r4
   10fc6:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10fca:	4288      	cmp	r0, r1
   10fcc:	da01      	bge.n	10fd2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10fce:	4608      	mov	r0, r1
   10fd0:	e002      	b.n	10fd8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10fd2:	287f      	cmp	r0, #127	; 0x7f
   10fd4:	dd00      	ble.n	10fd8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10fd6:	207f      	movs	r0, #127	; 0x7f
   10fd8:	4619      	mov	r1, r3
   10fda:	b240      	sxtb	r0, r0
   10fdc:	f7f7 feca 	bl	8d74 <mpsl_tx_power_radio_supported_power_adjust>
   10fe0:	7028      	strb	r0, [r5, #0]
   10fe2:	706c      	strb	r4, [r5, #1]
   10fe4:	2100      	movs	r1, #0
   10fe6:	4420      	add	r0, r4
   10fe8:	70a9      	strb	r1, [r5, #2]
   10fea:	b240      	sxtb	r0, r0
   10fec:	bd70      	pop	{r4, r5, r6, pc}
   10fee:	080c      	.short	0x080c
   10ff0:	010d1702 	.word	0x010d1702
   10ff4:	09090201 	.word	0x09090201
   10ff8:	02060101 	.word	0x02060101
   10ffc:	03181809 	.word	0x03181809
   11000:	09090101 	.word	0x09090101
   11004:	03050303 	.word	0x03050303
   11008:	02230102 	.word	0x02230102
   1100c:	10092402 	.word	0x10092402
   11010:	05050404 	.word	0x05050404
   11014:	0b040b0b 	.word	0x0b040b0b
   11018:	2b          	.byte	0x2b
   11019:	d8          	.byte	0xd8
   1101a:	f0ec      	.short	0xf0ec
   1101c:	00fcf8f4 	.word	0x00fcf8f4
   11020:	05040302 	.word	0x05040302
   11024:	00080706 	.word	0x00080706
	...
   11038:	01000000 	.word	0x01000000
   1103c:	02010101 	.word	0x02010101
   11040:	03020202 	.word	0x03020202
   11044:	04030303 	.word	0x04030303
   11048:	05040404 	.word	0x05040404
   1104c:	06050505 	.word	0x06050505
   11050:	09080706 	.word	0x09080706
   11054:	0d0c0b0a 	.word	0x0d0c0b0a
	...
   1106c:	01010101 	.word	0x01010101
   11070:	02020202 	.word	0x02020202
   11074:	03030303 	.word	0x03030303
   11078:	04040404 	.word	0x04040404
   1107c:	05050505 	.word	0x05050505
   11080:	08060606 	.word	0x08060606
   11084:	00000009 	.word	0x00000009

00011088 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1108c:	b09f      	sub	sp, #124	; 0x7c
   1108e:	4682      	mov	sl, r0
   11090:	9103      	str	r1, [sp, #12]
   11092:	4616      	mov	r6, r2
   11094:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11096:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11098:	7830      	ldrb	r0, [r6, #0]
   1109a:	b910      	cbnz	r0, 110a2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1109c:	4628      	mov	r0, r5
   1109e:	f000 bd85 	b.w	11bac <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
   110a2:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   110a4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   110a6:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   110a8:	d006      	beq.n	110b8 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   110aa:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   110ac:	47d0      	blx	sl
   110ae:	2800      	cmp	r0, #0
   110b0:	f2c0 857c 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   110b4:	3501      	adds	r5, #1
		if (bps == NULL) {
   110b6:	e21b      	b.n	114f0 <z_cbvprintf_impl+0x468>
		} state = {
   110b8:	2218      	movs	r2, #24
   110ba:	2100      	movs	r1, #0
   110bc:	a810      	add	r0, sp, #64	; 0x40
   110be:	f016 f98b 	bl	273d8 <memset>
	if (*sp == '%') {
   110c2:	7873      	ldrb	r3, [r6, #1]
   110c4:	2b25      	cmp	r3, #37	; 0x25
   110c6:	f000 80ba 	beq.w	1123e <z_cbvprintf_impl+0x1b6>
   110ca:	2300      	movs	r3, #0
   110cc:	1c71      	adds	r1, r6, #1
   110ce:	4698      	mov	r8, r3
   110d0:	469e      	mov	lr, r3
   110d2:	469c      	mov	ip, r3
   110d4:	4618      	mov	r0, r3
   110d6:	460f      	mov	r7, r1
		switch (*sp) {
   110d8:	f811 2b01 	ldrb.w	r2, [r1], #1
   110dc:	2a2b      	cmp	r2, #43	; 0x2b
   110de:	f000 80dd 	beq.w	1129c <z_cbvprintf_impl+0x214>
   110e2:	f200 80d4 	bhi.w	1128e <z_cbvprintf_impl+0x206>
   110e6:	2a20      	cmp	r2, #32
   110e8:	f000 80db 	beq.w	112a2 <z_cbvprintf_impl+0x21a>
   110ec:	2a23      	cmp	r2, #35	; 0x23
   110ee:	f000 80db 	beq.w	112a8 <z_cbvprintf_impl+0x220>
   110f2:	b12b      	cbz	r3, 11100 <z_cbvprintf_impl+0x78>
   110f4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   110f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   110fc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11100:	f1b8 0f00 	cmp.w	r8, #0
   11104:	d005      	beq.n	11112 <z_cbvprintf_impl+0x8a>
   11106:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1110a:	f043 0320 	orr.w	r3, r3, #32
   1110e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11112:	f1be 0f00 	cmp.w	lr, #0
   11116:	d005      	beq.n	11124 <z_cbvprintf_impl+0x9c>
   11118:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1111c:	f043 0310 	orr.w	r3, r3, #16
   11120:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11124:	f1bc 0f00 	cmp.w	ip, #0
   11128:	d005      	beq.n	11136 <z_cbvprintf_impl+0xae>
   1112a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1112e:	f043 0308 	orr.w	r3, r3, #8
   11132:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11136:	b128      	cbz	r0, 11144 <z_cbvprintf_impl+0xbc>
   11138:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1113c:	f043 0304 	orr.w	r3, r3, #4
   11140:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   11144:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11148:	f003 0144 	and.w	r1, r3, #68	; 0x44
   1114c:	2944      	cmp	r1, #68	; 0x44
   1114e:	d103      	bne.n	11158 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
   11150:	f36f 1386 	bfc	r3, #6, #1
   11154:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   11158:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1115c:	970e      	str	r7, [sp, #56]	; 0x38
   1115e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
   11162:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   11164:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   11168:	f040 80a3 	bne.w	112b2 <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
   1116c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11170:	f043 0301 	orr.w	r3, r3, #1
   11174:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   11178:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
   1117a:	781a      	ldrb	r2, [r3, #0]
   1117c:	2a2e      	cmp	r2, #46	; 0x2e
   1117e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11182:	bf0c      	ite	eq
   11184:	2101      	moveq	r1, #1
   11186:	2100      	movne	r1, #0
   11188:	f361 0241 	bfi	r2, r1, #1, #1
   1118c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   11190:	d10c      	bne.n	111ac <z_cbvprintf_impl+0x124>
	++sp;
   11192:	1c5a      	adds	r2, r3, #1
   11194:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
   11196:	785a      	ldrb	r2, [r3, #1]
   11198:	2a2a      	cmp	r2, #42	; 0x2a
   1119a:	f040 809a 	bne.w	112d2 <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
   1119e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   111a2:	f042 0204 	orr.w	r2, r2, #4
   111a6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   111aa:	3302      	adds	r3, #2
	switch (*sp) {
   111ac:	781a      	ldrb	r2, [r3, #0]
   111ae:	2a6c      	cmp	r2, #108	; 0x6c
   111b0:	f000 80bb 	beq.w	1132a <z_cbvprintf_impl+0x2a2>
   111b4:	f200 809d 	bhi.w	112f2 <z_cbvprintf_impl+0x26a>
   111b8:	2a68      	cmp	r2, #104	; 0x68
   111ba:	f000 80a3 	beq.w	11304 <z_cbvprintf_impl+0x27c>
   111be:	2a6a      	cmp	r2, #106	; 0x6a
   111c0:	f000 80bc 	beq.w	1133c <z_cbvprintf_impl+0x2b4>
   111c4:	2a4c      	cmp	r2, #76	; 0x4c
   111c6:	f000 80c1 	beq.w	1134c <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
   111ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   111ce:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
   111d0:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   111d2:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   111d6:	f200 8101 	bhi.w	113dc <z_cbvprintf_impl+0x354>
   111da:	2a6d      	cmp	r2, #109	; 0x6d
   111dc:	f200 80c3 	bhi.w	11366 <z_cbvprintf_impl+0x2de>
   111e0:	2a69      	cmp	r2, #105	; 0x69
   111e2:	f200 80fb 	bhi.w	113dc <z_cbvprintf_impl+0x354>
   111e6:	2a57      	cmp	r2, #87	; 0x57
   111e8:	f200 80da 	bhi.w	113a0 <z_cbvprintf_impl+0x318>
   111ec:	2a41      	cmp	r2, #65	; 0x41
   111ee:	d004      	beq.n	111fa <z_cbvprintf_impl+0x172>
   111f0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   111f4:	2b02      	cmp	r3, #2
   111f6:	f200 80f1 	bhi.w	113dc <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
   111fa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   111fe:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   11202:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   11204:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   11208:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   1120c:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   1120e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
   11212:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   11216:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   11218:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   1121c:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   1121e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   11222:	b2cb      	uxtb	r3, r1
   11224:	f100 8119 	bmi.w	1145a <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
   11228:	f003 0278 	and.w	r2, r3, #120	; 0x78
   1122c:	2a18      	cmp	r2, #24
   1122e:	f040 8103 	bne.w	11438 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
   11232:	f36f 03c6 	bfc	r3, #3, #4
   11236:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   1123a:	2300      	movs	r3, #0
   1123c:	e0f2      	b.n	11424 <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
   1123e:	1cb2      	adds	r2, r6, #2
   11240:	9206      	str	r2, [sp, #24]
   11242:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   11246:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1124a:	07d9      	lsls	r1, r3, #31
   1124c:	f140 8107 	bpl.w	1145e <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
   11250:	f854 2b04 	ldr.w	r2, [r4], #4
   11254:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   11256:	2a00      	cmp	r2, #0
   11258:	da08      	bge.n	1126c <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
   1125a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   1125e:	f042 0204 	orr.w	r2, r2, #4
   11262:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   11266:	9a04      	ldr	r2, [sp, #16]
   11268:	4252      	negs	r2, r2
		int width = -1;
   1126a:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   1126c:	075a      	lsls	r2, r3, #29
   1126e:	f140 80fe 	bpl.w	1146e <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
   11272:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   11276:	2f00      	cmp	r7, #0
   11278:	f280 80fd 	bge.w	11476 <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
   1127c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11280:	f36f 0341 	bfc	r3, #1, #1
   11284:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   11288:	f04f 37ff 	mov.w	r7, #4294967295
   1128c:	e0f3      	b.n	11476 <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
   1128e:	2a2d      	cmp	r2, #45	; 0x2d
   11290:	d00d      	beq.n	112ae <z_cbvprintf_impl+0x226>
   11292:	2a30      	cmp	r2, #48	; 0x30
   11294:	f47f af2d 	bne.w	110f2 <z_cbvprintf_impl+0x6a>
   11298:	2301      	movs	r3, #1
	} while (loop);
   1129a:	e71c      	b.n	110d6 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   1129c:	f04f 0c01 	mov.w	ip, #1
   112a0:	e719      	b.n	110d6 <z_cbvprintf_impl+0x4e>
   112a2:	f04f 0e01 	mov.w	lr, #1
   112a6:	e716      	b.n	110d6 <z_cbvprintf_impl+0x4e>
   112a8:	f04f 0801 	mov.w	r8, #1
   112ac:	e713      	b.n	110d6 <z_cbvprintf_impl+0x4e>
   112ae:	2001      	movs	r0, #1
   112b0:	e711      	b.n	110d6 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
   112b2:	a80e      	add	r0, sp, #56	; 0x38
   112b4:	f002 fbaa 	bl	13a0c <extract_decimal>
	if (sp != wp) {
   112b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   112ba:	42bb      	cmp	r3, r7
   112bc:	f43f af5d 	beq.w	1117a <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
   112c0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   112c4:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   112c6:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   112c8:	f360 0241 	bfi	r2, r0, #1, #1
   112cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   112d0:	e753      	b.n	1117a <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
   112d2:	a80e      	add	r0, sp, #56	; 0x38
   112d4:	f002 fb9a 	bl	13a0c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   112d8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   112dc:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   112de:	f3c3 0240 	ubfx	r2, r3, #1, #1
   112e2:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   112e6:	f362 0341 	bfi	r3, r2, #1, #1
   112ea:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   112ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   112f0:	e75c      	b.n	111ac <z_cbvprintf_impl+0x124>
	switch (*sp) {
   112f2:	2a74      	cmp	r2, #116	; 0x74
   112f4:	d026      	beq.n	11344 <z_cbvprintf_impl+0x2bc>
   112f6:	2a7a      	cmp	r2, #122	; 0x7a
   112f8:	f47f af67 	bne.w	111ca <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
   112fc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11300:	2106      	movs	r1, #6
   11302:	e00c      	b.n	1131e <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
   11304:	785a      	ldrb	r2, [r3, #1]
   11306:	2a68      	cmp	r2, #104	; 0x68
   11308:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1130c:	d106      	bne.n	1131c <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
   1130e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11310:	f361 02c6 	bfi	r2, r1, #3, #4
   11314:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   11318:	3302      	adds	r3, #2
   1131a:	e756      	b.n	111ca <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
   1131c:	2102      	movs	r1, #2
   1131e:	f361 02c6 	bfi	r2, r1, #3, #4
   11322:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   11326:	3301      	adds	r3, #1
   11328:	e74f      	b.n	111ca <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
   1132a:	785a      	ldrb	r2, [r3, #1]
   1132c:	2a6c      	cmp	r2, #108	; 0x6c
   1132e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11332:	d101      	bne.n	11338 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
   11334:	2104      	movs	r1, #4
   11336:	e7eb      	b.n	11310 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
   11338:	2103      	movs	r1, #3
   1133a:	e7f0      	b.n	1131e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
   1133c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11340:	2105      	movs	r1, #5
   11342:	e7ec      	b.n	1131e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
   11344:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11348:	2107      	movs	r1, #7
   1134a:	e7e8      	b.n	1131e <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
   1134c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   11350:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   11354:	f022 0202 	bic.w	r2, r2, #2
   11358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1135c:	f042 0202 	orr.w	r2, r2, #2
   11360:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   11364:	e7df      	b.n	11326 <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
   11366:	3a6e      	subs	r2, #110	; 0x6e
   11368:	b2d3      	uxtb	r3, r2
   1136a:	2201      	movs	r2, #1
   1136c:	409a      	lsls	r2, r3
   1136e:	f240 4382 	movw	r3, #1154	; 0x482
   11372:	421a      	tst	r2, r3
   11374:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11378:	d137      	bne.n	113ea <z_cbvprintf_impl+0x362>
   1137a:	f012 0f24 	tst.w	r2, #36	; 0x24
   1137e:	d15f      	bne.n	11440 <z_cbvprintf_impl+0x3b8>
   11380:	07d1      	lsls	r1, r2, #31
   11382:	d52b      	bpl.n	113dc <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
   11384:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   11388:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1138c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   11390:	2103      	movs	r1, #3
   11392:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11396:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   11398:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1139c:	4143      	adcs	r3, r0
   1139e:	e041      	b.n	11424 <z_cbvprintf_impl+0x39c>
	switch (conv->specifier) {
   113a0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   113a4:	b2c9      	uxtb	r1, r1
   113a6:	2001      	movs	r0, #1
   113a8:	fa00 f101 	lsl.w	r1, r0, r1
   113ac:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   113b0:	f47f af23 	bne.w	111fa <z_cbvprintf_impl+0x172>
   113b4:	f640 0301 	movw	r3, #2049	; 0x801
   113b8:	4219      	tst	r1, r3
   113ba:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   113be:	d11a      	bne.n	113f6 <z_cbvprintf_impl+0x36e>
   113c0:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   113c4:	d00a      	beq.n	113dc <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
   113c6:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   113ca:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   113ce:	f003 0378 	and.w	r3, r3, #120	; 0x78
   113d2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   113d4:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   113d8:	f47f af2f 	bne.w	1123a <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
   113dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   113e0:	f043 0301 	orr.w	r3, r3, #1
   113e4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   113e8:	e727      	b.n	1123a <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
   113ea:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   113ee:	2102      	movs	r1, #2
   113f0:	f361 0202 	bfi	r2, r1, #0, #3
   113f4:	e7eb      	b.n	113ce <z_cbvprintf_impl+0x346>
   113f6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   113fa:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   113fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11400:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11404:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11406:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   1140a:	bf02      	ittt	eq
   1140c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   11410:	f041 0101 	orreq.w	r1, r1, #1
   11414:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   11418:	2a63      	cmp	r2, #99	; 0x63
   1141a:	f47f af0e 	bne.w	1123a <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1141e:	3b00      	subs	r3, #0
   11420:	bf18      	it	ne
   11422:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   11424:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   11428:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1142c:	430b      	orrs	r3, r1
   1142e:	f363 0241 	bfi	r2, r3, #1, #1
   11432:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   11436:	e706      	b.n	11246 <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
   11438:	f013 0f38 	tst.w	r3, #56	; 0x38
   1143c:	d1ce      	bne.n	113dc <z_cbvprintf_impl+0x354>
   1143e:	e6fc      	b.n	1123a <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
   11440:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   11444:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   11446:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1144a:	f361 0202 	bfi	r2, r1, #0, #3
   1144e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   11452:	bf14      	ite	ne
   11454:	2301      	movne	r3, #1
   11456:	2300      	moveq	r3, #0
   11458:	e7e4      	b.n	11424 <z_cbvprintf_impl+0x39c>
			unsupported = true;
   1145a:	2301      	movs	r3, #1
   1145c:	e7e2      	b.n	11424 <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
   1145e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   11462:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11464:	bfb4      	ite	lt
   11466:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
   11468:	f04f 32ff 	movge.w	r2, #4294967295
   1146c:	e6fd      	b.n	1126a <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
   1146e:	079f      	lsls	r7, r3, #30
   11470:	f57f af0a 	bpl.w	11288 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
   11474:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   11476:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11478:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   1147c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   11480:	f003 0207 	and.w	r2, r3, #7
   11484:	2a04      	cmp	r2, #4
   11486:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1148a:	d107      	bne.n	1149c <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
   1148c:	0790      	lsls	r0, r2, #30
   1148e:	d405      	bmi.n	1149c <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
   11490:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   11494:	2900      	cmp	r1, #0
   11496:	bfac      	ite	ge
   11498:	2706      	movge	r7, #6
   1149a:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   1149c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   114a0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   114a2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   114a6:	d133      	bne.n	11510 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
   114a8:	1ed3      	subs	r3, r2, #3
   114aa:	2b04      	cmp	r3, #4
   114ac:	d804      	bhi.n	114b8 <z_cbvprintf_impl+0x430>
   114ae:	e8df f003 	tbb	[pc, r3]
   114b2:	4621      	.short	0x4621
   114b4:	2146      	.short	0x2146
   114b6:	21          	.byte	0x21
   114b7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   114b8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   114ba:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
   114bc:	ea4f 71e3 	mov.w	r1, r3, asr #31
   114c0:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   114c4:	d11c      	bne.n	11500 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
   114c6:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   114ca:	17d9      	asrs	r1, r3, #31
   114cc:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   114d0:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   114d2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   114d6:	9307      	str	r3, [sp, #28]
   114d8:	0799      	lsls	r1, r3, #30
   114da:	d050      	beq.n	1157e <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
   114dc:	9b06      	ldr	r3, [sp, #24]
   114de:	9903      	ldr	r1, [sp, #12]
   114e0:	4632      	mov	r2, r6
   114e2:	4650      	mov	r0, sl
   114e4:	f012 fd5b 	bl	23f9e <outs>
   114e8:	2800      	cmp	r0, #0
   114ea:	f2c0 835f 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   114ee:	4405      	add	r5, r0
			continue;
   114f0:	9e06      	ldr	r6, [sp, #24]
   114f2:	e5d1      	b.n	11098 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   114f4:	f854 3b04 	ldr.w	r3, [r4], #4
   114f8:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
   114fa:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   114fe:	e7e8      	b.n	114d2 <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
   11500:	2a02      	cmp	r2, #2
   11502:	d1e5      	bne.n	114d0 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
   11504:	b219      	sxth	r1, r3
   11506:	f343 33c0 	sbfx	r3, r3, #15, #1
   1150a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
   1150e:	e7df      	b.n	114d0 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11510:	2b02      	cmp	r3, #2
   11512:	d124      	bne.n	1155e <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
   11514:	1ed3      	subs	r3, r2, #3
   11516:	2b04      	cmp	r3, #4
   11518:	d804      	bhi.n	11524 <z_cbvprintf_impl+0x49c>
   1151a:	e8df f003 	tbb	[pc, r3]
   1151e:	1018      	.short	0x1018
   11520:	1810      	.short	0x1810
   11522:	18          	.byte	0x18
   11523:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   11524:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
   11526:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1152a:	f04f 0100 	mov.w	r1, #0
   1152e:	d014      	beq.n	1155a <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
   11530:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
   11532:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   11536:	d1cc      	bne.n	114d2 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
   11538:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   1153a:	9310      	str	r3, [sp, #64]	; 0x40
   1153c:	e7c9      	b.n	114d2 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
   1153e:	3407      	adds	r4, #7
   11540:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   11544:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   11548:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1154c:	e7c1      	b.n	114d2 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
   1154e:	f854 3b04 	ldr.w	r3, [r4], #4
   11552:	9310      	str	r3, [sp, #64]	; 0x40
   11554:	2300      	movs	r3, #0
   11556:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   11558:	e7bb      	b.n	114d2 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
   1155a:	b2db      	uxtb	r3, r3
   1155c:	e7cd      	b.n	114fa <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
   1155e:	2b04      	cmp	r3, #4
   11560:	d108      	bne.n	11574 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   11562:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   11564:	f024 0407 	bic.w	r4, r4, #7
   11568:	e9d4 0100 	ldrd	r0, r1, [r4]
   1156c:	3408      	adds	r4, #8
   1156e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11572:	e7ae      	b.n	114d2 <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11574:	2b03      	cmp	r3, #3
   11576:	d1ac      	bne.n	114d2 <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
   11578:	f854 3b04 	ldr.w	r3, [r4], #4
   1157c:	e7dd      	b.n	1153a <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
   1157e:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   11582:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   11586:	d8b3      	bhi.n	114f0 <z_cbvprintf_impl+0x468>
   11588:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   1158c:	d849      	bhi.n	11622 <z_cbvprintf_impl+0x59a>
   1158e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   11592:	f000 8091 	beq.w	116b8 <z_cbvprintf_impl+0x630>
   11596:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   1159a:	d9a9      	bls.n	114f0 <z_cbvprintf_impl+0x468>
   1159c:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   115a0:	d003      	beq.n	115aa <z_cbvprintf_impl+0x522>
   115a2:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   115a6:	2a02      	cmp	r2, #2
   115a8:	d8a2      	bhi.n	114f0 <z_cbvprintf_impl+0x468>
	} u = {
   115aa:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   115ae:	2a00      	cmp	r2, #0
   115b0:	f2c0 8136 	blt.w	11820 <z_cbvprintf_impl+0x798>
	} else if (conv->flag_plus) {
   115b4:	9b07      	ldr	r3, [sp, #28]
   115b6:	071e      	lsls	r6, r3, #28
   115b8:	f100 8135 	bmi.w	11826 <z_cbvprintf_impl+0x79e>
	} else if (conv->flag_space) {
   115bc:	f3c3 1900 	ubfx	r9, r3, #4, #1
   115c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   115c4:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   115c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   115cc:	2800      	cmp	r0, #0
   115ce:	f040 812d 	bne.w	1182c <z_cbvprintf_impl+0x7a4>
   115d2:	ea51 0602 	orrs.w	r6, r1, r2
   115d6:	bf14      	ite	ne
   115d8:	2601      	movne	r6, #1
   115da:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   115dc:	02d2      	lsls	r2, r2, #11
   115de:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   115e2:	02c9      	lsls	r1, r1, #11
		c = 'f';
   115e4:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   115e8:	ea40 0e01 	orr.w	lr, r0, r1
   115ec:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   115f0:	bf08      	it	eq
   115f2:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   115f6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   115fa:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   115fe:	f000 819c 	beq.w	1193a <z_cbvprintf_impl+0x8b2>
		if (is_subnormal) {
   11602:	2e00      	cmp	r6, #0
   11604:	f040 8149 	bne.w	1189a <z_cbvprintf_impl+0x812>
		fract |= BIT_63;
   11608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1160a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   1160e:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   11612:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   11614:	2000      	movs	r0, #0
   11616:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   1161a:	4606      	mov	r6, r0
		fract *= 5U;
   1161c:	f04f 0c05 	mov.w	ip, #5
   11620:	e155      	b.n	118ce <z_cbvprintf_impl+0x846>
		switch (conv->specifier) {
   11622:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
   11626:	2920      	cmp	r1, #32
   11628:	f63f af62 	bhi.w	114f0 <z_cbvprintf_impl+0x468>
   1162c:	a001      	add	r0, pc, #4	; (adr r0, 11634 <z_cbvprintf_impl+0x5ac>)
   1162e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   11632:	bf00      	nop
   11634:	000117bf 	.word	0x000117bf
   11638:	000114f1 	.word	0x000114f1
   1163c:	000114f1 	.word	0x000114f1
   11640:	000114f1 	.word	0x000114f1
   11644:	000114f1 	.word	0x000114f1
   11648:	000114f1 	.word	0x000114f1
   1164c:	000114f1 	.word	0x000114f1
   11650:	000114f1 	.word	0x000114f1
   11654:	000114f1 	.word	0x000114f1
   11658:	000115ab 	.word	0x000115ab
   1165c:	000114f1 	.word	0x000114f1
   11660:	00011743 	.word	0x00011743
   11664:	00011757 	.word	0x00011757
   11668:	000115ab 	.word	0x000115ab
   1166c:	000115ab 	.word	0x000115ab
   11670:	000115ab 	.word	0x000115ab
   11674:	000114f1 	.word	0x000114f1
   11678:	00011757 	.word	0x00011757
   1167c:	000114f1 	.word	0x000114f1
   11680:	000114f1 	.word	0x000114f1
   11684:	000114f1 	.word	0x000114f1
   11688:	000114f1 	.word	0x000114f1
   1168c:	000117f9 	.word	0x000117f9
   11690:	000117bf 	.word	0x000117bf
   11694:	000117c5 	.word	0x000117c5
   11698:	000114f1 	.word	0x000114f1
   1169c:	000114f1 	.word	0x000114f1
   116a0:	000116bf 	.word	0x000116bf
   116a4:	000114f1 	.word	0x000114f1
   116a8:	000117bf 	.word	0x000117bf
   116ac:	000114f1 	.word	0x000114f1
   116b0:	000114f1 	.word	0x000114f1
   116b4:	000117bf 	.word	0x000117bf
			OUTC('%');
   116b8:	9903      	ldr	r1, [sp, #12]
   116ba:	4658      	mov	r0, fp
   116bc:	e4f6      	b.n	110ac <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   116be:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   116c0:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   116c2:	db3a      	blt.n	1173a <z_cbvprintf_impl+0x6b2>
				len = strnlen(bps, precision);
   116c4:	4639      	mov	r1, r7
   116c6:	4630      	mov	r0, r6
   116c8:	f015 ffb8 	bl	2763c <strnlen>
			bpe = bps + len;
   116cc:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   116ce:	2e00      	cmp	r6, #0
   116d0:	f43f af0e 	beq.w	114f0 <z_cbvprintf_impl+0x468>
		char sign = 0;
   116d4:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   116d8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   116dc:	f013 0210 	ands.w	r2, r3, #16
   116e0:	9205      	str	r2, [sp, #20]
   116e2:	f000 8258 	beq.w	11b96 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
   116e6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   116e8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   116ec:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   116f0:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   116f2:	bf18      	it	ne
   116f4:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   116f6:	f8cd 801c 	str.w	r8, [sp, #28]
   116fa:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   116fc:	bf18      	it	ne
   116fe:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   11700:	9b04      	ldr	r3, [sp, #16]
   11702:	2b00      	cmp	r3, #0
   11704:	f340 8262 	ble.w	11bcc <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
   11708:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   1170c:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
   1170e:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
   11710:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   11712:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   11716:	f100 8259 	bmi.w	11bcc <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
   1171a:	0651      	lsls	r1, r2, #25
   1171c:	f140 8249 	bpl.w	11bb2 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
   11720:	f1b9 0f00 	cmp.w	r9, #0
   11724:	d007      	beq.n	11736 <z_cbvprintf_impl+0x6ae>
						OUTC(sign);
   11726:	9903      	ldr	r1, [sp, #12]
   11728:	4648      	mov	r0, r9
   1172a:	47d0      	blx	sl
   1172c:	2800      	cmp	r0, #0
   1172e:	f2c0 823d 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   11732:	3501      	adds	r5, #1
						sign = 0;
   11734:	46d9      	mov	r9, fp
					pad = '0';
   11736:	2230      	movs	r2, #48	; 0x30
   11738:	e23c      	b.n	11bb4 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
   1173a:	4630      	mov	r0, r6
   1173c:	f7fb f9ce 	bl	cadc <strlen>
   11740:	e7c4      	b.n	116cc <z_cbvprintf_impl+0x644>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11742:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11744:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
   11748:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
   1174c:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   11750:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   11752:	2001      	movs	r0, #1
   11754:	e7c0      	b.n	116d8 <z_cbvprintf_impl+0x650>
			if (conv->flag_plus) {
   11756:	9b07      	ldr	r3, [sp, #28]
   11758:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
   1175a:	bf58      	it	pl
   1175c:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
   11760:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   11764:	bf54      	ite	pl
   11766:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
   1176a:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
   1176e:	2b00      	cmp	r3, #0
   11770:	da06      	bge.n	11780 <z_cbvprintf_impl+0x6f8>
				value->uint = (uint_value_type)-sint;
   11772:	4252      	negs	r2, r2
   11774:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11778:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
   1177c:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   11780:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   11784:	9300      	str	r3, [sp, #0]
   11786:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1178a:	ab17      	add	r3, sp, #92	; 0x5c
   1178c:	aa12      	add	r2, sp, #72	; 0x48
   1178e:	f002 f953 	bl	13a38 <encode_uint>
   11792:	4606      	mov	r6, r0
			if (precision >= 0) {
   11794:	2f00      	cmp	r7, #0
   11796:	db0c      	blt.n	117b2 <z_cbvprintf_impl+0x72a>
				conv->flag_zero = false;
   11798:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   1179c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   117a0:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   117a2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   117a6:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   117a8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   117ac:	d901      	bls.n	117b2 <z_cbvprintf_impl+0x72a>
					conv->pad0_value = precision - (int)len;
   117ae:	1afb      	subs	r3, r7, r3
   117b0:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   117b2:	2e00      	cmp	r6, #0
   117b4:	f43f ae9c 	beq.w	114f0 <z_cbvprintf_impl+0x468>
   117b8:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   117bc:	e05b      	b.n	11876 <z_cbvprintf_impl+0x7ee>
		switch (conv->specifier) {
   117be:	f04f 0900 	mov.w	r9, #0
   117c2:	e7dd      	b.n	11780 <z_cbvprintf_impl+0x6f8>
			if (value->ptr != NULL) {
   117c4:	9810      	ldr	r0, [sp, #64]	; 0x40
   117c6:	2800      	cmp	r0, #0
   117c8:	f000 81e0 	beq.w	11b8c <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   117cc:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   117d0:	9300      	str	r3, [sp, #0]
   117d2:	aa12      	add	r2, sp, #72	; 0x48
   117d4:	ab17      	add	r3, sp, #92	; 0x5c
   117d6:	2100      	movs	r1, #0
   117d8:	f002 f92e 	bl	13a38 <encode_uint>
				conv->altform_0c = true;
   117dc:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   117e0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   117e4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   117e8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   117ec:	4606      	mov	r6, r0
				conv->altform_0c = true;
   117ee:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
   117f2:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
   117f6:	e7cd      	b.n	11794 <z_cbvprintf_impl+0x70c>
				store_count(conv, value->ptr, count);
   117f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   117fa:	2a07      	cmp	r2, #7
   117fc:	f63f ae78 	bhi.w	114f0 <z_cbvprintf_impl+0x468>
   11800:	e8df f002 	tbb	[pc, r2]
   11804:	0c06040c 	.word	0x0c06040c
   11808:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   1180c:	701d      	strb	r5, [r3, #0]
		break;
   1180e:	e66f      	b.n	114f0 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
   11810:	801d      	strh	r5, [r3, #0]
		break;
   11812:	e66d      	b.n	114f0 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
   11814:	17ea      	asrs	r2, r5, #31
   11816:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   1181a:	e669      	b.n	114f0 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1181c:	601d      	str	r5, [r3, #0]
		break;
   1181e:	e667      	b.n	114f0 <z_cbvprintf_impl+0x468>
		*sign = '-';
   11820:	f04f 092d 	mov.w	r9, #45	; 0x2d
   11824:	e6ce      	b.n	115c4 <z_cbvprintf_impl+0x53c>
		*sign = '+';
   11826:	f04f 092b 	mov.w	r9, #43	; 0x2b
   1182a:	e6cb      	b.n	115c4 <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1182c:	f240 76ff 	movw	r6, #2047	; 0x7ff
   11830:	42b0      	cmp	r0, r6
   11832:	d12f      	bne.n	11894 <z_cbvprintf_impl+0x80c>
			if (isupper((unsigned char)c)) {
   11834:	f10b 0301 	add.w	r3, fp, #1
   11838:	489f      	ldr	r0, [pc, #636]	; (11ab8 <z_cbvprintf_impl+0xa30>)
   1183a:	b2db      	uxtb	r3, r3
		if (fract == 0) {
   1183c:	430a      	orrs	r2, r1
   1183e:	5cc3      	ldrb	r3, [r0, r3]
   11840:	f003 0303 	and.w	r3, r3, #3
   11844:	d11e      	bne.n	11884 <z_cbvprintf_impl+0x7fc>
			if (isupper((unsigned char)c)) {
   11846:	2b01      	cmp	r3, #1
   11848:	bf0b      	itete	eq
   1184a:	2349      	moveq	r3, #73	; 0x49
   1184c:	2369      	movne	r3, #105	; 0x69
   1184e:	214e      	moveq	r1, #78	; 0x4e
   11850:	216e      	movne	r1, #110	; 0x6e
   11852:	bf0c      	ite	eq
   11854:	2246      	moveq	r2, #70	; 0x46
   11856:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
   11858:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   1185c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   11860:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   11864:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   11868:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   1186c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   11870:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   11874:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   11876:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   11878:	f1b9 0f00 	cmp.w	r9, #0
   1187c:	f43f af2c 	beq.w	116d8 <z_cbvprintf_impl+0x650>
			nj_len += 1U;
   11880:	3001      	adds	r0, #1
   11882:	e729      	b.n	116d8 <z_cbvprintf_impl+0x650>
			if (isupper((unsigned char)c)) {
   11884:	2b01      	cmp	r3, #1
   11886:	bf15      	itete	ne
   11888:	236e      	movne	r3, #110	; 0x6e
   1188a:	234e      	moveq	r3, #78	; 0x4e
   1188c:	2161      	movne	r1, #97	; 0x61
   1188e:	2141      	moveq	r1, #65	; 0x41
   11890:	461a      	mov	r2, r3
   11892:	e7e1      	b.n	11858 <z_cbvprintf_impl+0x7d0>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11894:	2600      	movs	r6, #0
   11896:	e6a1      	b.n	115dc <z_cbvprintf_impl+0x554>
				expo--;
   11898:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1189a:	1849      	adds	r1, r1, r1
   1189c:	4152      	adcs	r2, r2
   1189e:	2a00      	cmp	r2, #0
   118a0:	dafa      	bge.n	11898 <z_cbvprintf_impl+0x810>
   118a2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   118a6:	e6af      	b.n	11608 <z_cbvprintf_impl+0x580>
			fract >>= 1;
   118a8:	0849      	lsrs	r1, r1, #1
   118aa:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   118ae:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   118b0:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   118b4:	4640      	mov	r0, r8
			expo++;
   118b6:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   118ba:	d2f5      	bcs.n	118a8 <z_cbvprintf_impl+0x820>
		fract *= 5U;
   118bc:	fb0c fe02 	mul.w	lr, ip, r2
   118c0:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
   118c4:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
   118c8:	4472      	add	r2, lr
		decexp--;
   118ca:	3e01      	subs	r6, #1
   118cc:	2001      	movs	r0, #1
	while (expo < -2) {
   118ce:	f118 0f02 	cmn.w	r8, #2
   118d2:	dbe9      	blt.n	118a8 <z_cbvprintf_impl+0x820>
   118d4:	b108      	cbz	r0, 118da <z_cbvprintf_impl+0x852>
   118d6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
   118da:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
   118de:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   118e2:	dc2d      	bgt.n	11940 <z_cbvprintf_impl+0x8b8>
	fract >>= (4 - expo);
   118e4:	f1c8 0004 	rsb	r0, r8, #4
   118e8:	f1a0 0c20 	sub.w	ip, r0, #32
   118ec:	f108 081c 	add.w	r8, r8, #28
   118f0:	40c2      	lsrs	r2, r0
   118f2:	fa01 f808 	lsl.w	r8, r1, r8
   118f6:	fa21 fc0c 	lsr.w	ip, r1, ip
   118fa:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
   118fc:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   11900:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
   11904:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   11906:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
   1190a:	d13a      	bne.n	11982 <z_cbvprintf_impl+0x8fa>
		if (decexp < (-4 + 1) || decexp > precision) {
   1190c:	1cf0      	adds	r0, r6, #3
   1190e:	db01      	blt.n	11914 <z_cbvprintf_impl+0x88c>
   11910:	42b7      	cmp	r7, r6
   11912:	da2b      	bge.n	1196c <z_cbvprintf_impl+0x8e4>
			c += 'e' - 'g';  /* e or E */
   11914:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   11918:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   1191a:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   1191e:	dd7d      	ble.n	11a1c <z_cbvprintf_impl+0x994>
		if (!conv->flag_hash && (precision > 0)) {
   11920:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   11924:	0683      	lsls	r3, r0, #26
				precision--;
   11926:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   1192a:	d477      	bmi.n	11a1c <z_cbvprintf_impl+0x994>
   1192c:	1e3b      	subs	r3, r7, #0
   1192e:	bf18      	it	ne
   11930:	2301      	movne	r3, #1
	bool prune_zero = false;
   11932:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   11934:	f107 0801 	add.w	r8, r7, #1
   11938:	e02d      	b.n	11996 <z_cbvprintf_impl+0x90e>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1193a:	f04f 0800 	mov.w	r8, #0
   1193e:	e669      	b.n	11614 <z_cbvprintf_impl+0x58c>
		fract += 2;
   11940:	3202      	adds	r2, #2
   11942:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   11946:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
   11948:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   1194c:	f012 faf8 	bl	23f40 <_ldiv5>
		expo--;
   11950:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
   11954:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
   11958:	3601      	adds	r6, #1
			fract <<= 1;
   1195a:	1892      	adds	r2, r2, r2
   1195c:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   1195e:	2900      	cmp	r1, #0
			expo--;
   11960:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
   11964:	daf9      	bge.n	1195a <z_cbvprintf_impl+0x8d2>
   11966:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   1196a:	e7b6      	b.n	118da <z_cbvprintf_impl+0x852>
		if (!conv->flag_hash && (precision > 0)) {
   1196c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11970:	0698      	lsls	r0, r3, #26
			precision -= decexp;
   11972:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   11976:	d44f      	bmi.n	11a18 <z_cbvprintf_impl+0x990>
   11978:	1e3b      	subs	r3, r7, #0
   1197a:	bf18      	it	ne
   1197c:	2301      	movne	r3, #1
	bool prune_zero = false;
   1197e:	9305      	str	r3, [sp, #20]
   11980:	e004      	b.n	1198c <z_cbvprintf_impl+0x904>
   11982:	2300      	movs	r3, #0
	if (c == 'f') {
   11984:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   11988:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   1198a:	d1d3      	bne.n	11934 <z_cbvprintf_impl+0x8ac>
		if (decimals < 0) {
   1198c:	eb17 0806 	adds.w	r8, r7, r6
   11990:	f04f 0b66 	mov.w	fp, #102	; 0x66
   11994:	d444      	bmi.n	11a20 <z_cbvprintf_impl+0x998>
	if (decimals > 16) {
   11996:	f1b8 0f10 	cmp.w	r8, #16
   1199a:	bfa8      	it	ge
   1199c:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
   119a0:	ed9f 7b43 	vldr	d7, [pc, #268]	; 11ab0 <z_cbvprintf_impl+0xa28>
   119a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   119a8:	2010      	movs	r0, #16
   119aa:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
   119ac:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   119b0:	f1b8 0f00 	cmp.w	r8, #0
   119b4:	d137      	bne.n	11a26 <z_cbvprintf_impl+0x99e>
	fract += round;
   119b6:	1812      	adds	r2, r2, r0
   119b8:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   119bc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   119c0:	d241      	bcs.n	11a46 <z_cbvprintf_impl+0x9be>
	fract += round;
   119c2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   119c6:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   119c8:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   119cc:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   119d0:	f040 80bb 	bne.w	11b4a <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
   119d4:	2e00      	cmp	r6, #0
   119d6:	dc41      	bgt.n	11a5c <z_cbvprintf_impl+0x9d4>
			*buf++ = '0';
   119d8:	2130      	movs	r1, #48	; 0x30
   119da:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   119de:	2a00      	cmp	r2, #0
   119e0:	d16c      	bne.n	11abc <z_cbvprintf_impl+0xa34>
   119e2:	2f00      	cmp	r7, #0
   119e4:	f340 81b5 	ble.w	11d52 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
   119e8:	222e      	movs	r2, #46	; 0x2e
   119ea:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   119ee:	b186      	cbz	r6, 11a12 <z_cbvprintf_impl+0x98a>
			conv->pad0_value = -decexp;
   119f0:	4272      	negs	r2, r6
   119f2:	42ba      	cmp	r2, r7
   119f4:	bfa8      	it	ge
   119f6:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   119f8:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   119fc:	9213      	str	r2, [sp, #76]	; 0x4c
   119fe:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
   11a00:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   11a04:	bfd4      	ite	le
   11a06:	2200      	movle	r2, #0
   11a08:	2201      	movgt	r2, #1
   11a0a:	f362 1145 	bfi	r1, r2, #5, #1
   11a0e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   11a12:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   11a16:	e039      	b.n	11a8c <z_cbvprintf_impl+0xa04>
	bool prune_zero = false;
   11a18:	2300      	movs	r3, #0
   11a1a:	e7b0      	b.n	1197e <z_cbvprintf_impl+0x8f6>
   11a1c:	2300      	movs	r3, #0
   11a1e:	e788      	b.n	11932 <z_cbvprintf_impl+0x8aa>
			decimals = 0;
   11a20:	f04f 0800 	mov.w	r8, #0
   11a24:	e7bc      	b.n	119a0 <z_cbvprintf_impl+0x918>
	*v >>= 1;
   11a26:	0840      	lsrs	r0, r0, #1
   11a28:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   11a2c:	085b      	lsrs	r3, r3, #1
   11a2e:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   11a32:	a80e      	add	r0, sp, #56	; 0x38
   11a34:	e9cd 2108 	strd	r2, r1, [sp, #32]
   11a38:	f108 38ff 	add.w	r8, r8, #4294967295
   11a3c:	f012 fa80 	bl	23f40 <_ldiv5>
   11a40:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
   11a44:	e7b2      	b.n	119ac <z_cbvprintf_impl+0x924>
	*v >>= 1;
   11a46:	0852      	lsrs	r2, r2, #1
   11a48:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   11a4c:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   11a4e:	0849      	lsrs	r1, r1, #1
   11a50:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   11a54:	3601      	adds	r6, #1
	_ldiv5(v);
   11a56:	f012 fa73 	bl	23f40 <_ldiv5>
		decexp++;
   11a5a:	e7b4      	b.n	119c6 <z_cbvprintf_impl+0x93e>
	char *buf = bps;
   11a5c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   11a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11a62:	2900      	cmp	r1, #0
   11a64:	dd09      	ble.n	11a7a <z_cbvprintf_impl+0x9f2>
				*buf++ = _get_digit(&fract, &digit_count);
   11a66:	a90b      	add	r1, sp, #44	; 0x2c
   11a68:	a80c      	add	r0, sp, #48	; 0x30
   11a6a:	9207      	str	r2, [sp, #28]
   11a6c:	f012 fa80 	bl	23f70 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   11a70:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   11a72:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   11a76:	9a07      	ldr	r2, [sp, #28]
   11a78:	d1f2      	bne.n	11a60 <z_cbvprintf_impl+0x9d8>
			conv->pad0_value = decexp;
   11a7a:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   11a7c:	b99a      	cbnz	r2, 11aa6 <z_cbvprintf_impl+0xa1e>
   11a7e:	2f00      	cmp	r7, #0
   11a80:	f340 8165 	ble.w	11d4e <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
   11a84:	212e      	movs	r1, #46	; 0x2e
   11a86:	f808 1b01 	strb.w	r1, [r8], #1
   11a8a:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   11a8c:	2f00      	cmp	r7, #0
   11a8e:	dd1e      	ble.n	11ace <z_cbvprintf_impl+0xa46>
   11a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11a92:	2a00      	cmp	r2, #0
   11a94:	dd1b      	ble.n	11ace <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
   11a96:	a90b      	add	r1, sp, #44	; 0x2c
   11a98:	a80c      	add	r0, sp, #48	; 0x30
   11a9a:	f012 fa69 	bl	23f70 <_get_digit>
		precision--;
   11a9e:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   11aa0:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   11aa4:	e7f2      	b.n	11a8c <z_cbvprintf_impl+0xa04>
			*buf++ = '.';
   11aa6:	222e      	movs	r2, #46	; 0x2e
   11aa8:	f808 2b01 	strb.w	r2, [r8], #1
   11aac:	e7ed      	b.n	11a8a <z_cbvprintf_impl+0xa02>
   11aae:	bf00      	nop
   11ab0:	00000000 	.word	0x00000000
   11ab4:	08000000 	.word	0x08000000
   11ab8:	0002aa88 	.word	0x0002aa88
   11abc:	222e      	movs	r2, #46	; 0x2e
   11abe:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   11ac2:	2e00      	cmp	r6, #0
   11ac4:	d0a5      	beq.n	11a12 <z_cbvprintf_impl+0x98a>
   11ac6:	2f00      	cmp	r7, #0
   11ac8:	dc92      	bgt.n	119f0 <z_cbvprintf_impl+0x968>
			*buf++ = '.';
   11aca:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   11ace:	9b05      	ldr	r3, [sp, #20]
   11ad0:	2b00      	cmp	r3, #0
   11ad2:	d14e      	bne.n	11b72 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
   11ad4:	9714      	str	r7, [sp, #80]	; 0x50
   11ad6:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   11ad8:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   11adc:	2a45      	cmp	r2, #69	; 0x45
   11ade:	d123      	bne.n	11b28 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
   11ae0:	2e00      	cmp	r6, #0
			decexp = -decexp;
   11ae2:	bfba      	itte	lt
   11ae4:	4276      	neglt	r6, r6
			*buf++ = '-';
   11ae6:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   11ae8:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   11aea:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   11aec:	bfc8      	it	gt
   11aee:	2164      	movgt	r1, #100	; 0x64
   11af0:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
   11af2:	bfd1      	iteee	le
   11af4:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   11af6:	fbb6 f3f1 	udivgt	r3, r6, r1
   11afa:	1cfa      	addgt	r2, r7, #3
   11afc:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
   11b00:	bfc8      	it	gt
   11b02:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   11b06:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   11b0a:	bfc8      	it	gt
   11b0c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   11b0e:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   11b12:	fbb6 f3f1 	udiv	r3, r6, r1
   11b16:	4617      	mov	r7, r2
   11b18:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   11b1c:	fb01 6313 	mls	r3, r1, r3, r6
   11b20:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   11b22:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   11b26:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   11b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	dc2c      	bgt.n	11b88 <z_cbvprintf_impl+0xb00>
   11b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11b30:	2b00      	cmp	r3, #0
   11b32:	bfd4      	ite	le
   11b34:	2300      	movle	r3, #0
   11b36:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   11b38:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   11b3c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   11b40:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   11b42:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   11b46:	703b      	strb	r3, [r7, #0]
	return bps;
   11b48:	e694      	b.n	11874 <z_cbvprintf_impl+0x7ec>
		*buf = _get_digit(&fract, &digit_count);
   11b4a:	a90b      	add	r1, sp, #44	; 0x2c
   11b4c:	a80c      	add	r0, sp, #48	; 0x30
   11b4e:	9207      	str	r2, [sp, #28]
   11b50:	f012 fa0e 	bl	23f70 <_get_digit>
		if (*buf++ != '0') {
   11b54:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
   11b56:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
   11b5a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11b5c:	bf18      	it	ne
   11b5e:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   11b62:	b912      	cbnz	r2, 11b6a <z_cbvprintf_impl+0xae2>
   11b64:	2f00      	cmp	r7, #0
   11b66:	f340 80f4 	ble.w	11d52 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
   11b6a:	222e      	movs	r2, #46	; 0x2e
   11b6c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   11b70:	e74f      	b.n	11a12 <z_cbvprintf_impl+0x98a>
		while (*--buf == '0') {
   11b72:	4647      	mov	r7, r8
   11b74:	f108 38ff 	add.w	r8, r8, #4294967295
   11b78:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   11b7c:	2a30      	cmp	r2, #48	; 0x30
   11b7e:	d0f8      	beq.n	11b72 <z_cbvprintf_impl+0xaea>
   11b80:	2a2e      	cmp	r2, #46	; 0x2e
   11b82:	bf08      	it	eq
   11b84:	4647      	moveq	r7, r8
   11b86:	e7a7      	b.n	11ad8 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
   11b88:	2301      	movs	r3, #1
   11b8a:	e7d5      	b.n	11b38 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
   11b8c:	4f72      	ldr	r7, [pc, #456]	; (11d58 <z_cbvprintf_impl+0xcd0>)
		char sign = 0;
   11b8e:	4681      	mov	r9, r0
			bps = "(nil)";
   11b90:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   11b92:	2005      	movs	r0, #5
   11b94:	e5a0      	b.n	116d8 <z_cbvprintf_impl+0x650>
		} else if (conv->altform_0) {
   11b96:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11b98:	bf48      	it	mi
   11b9a:	3001      	addmi	r0, #1
   11b9c:	e5a4      	b.n	116e8 <z_cbvprintf_impl+0x660>
					OUTC(pad);
   11b9e:	4610      	mov	r0, r2
   11ba0:	9209      	str	r2, [sp, #36]	; 0x24
   11ba2:	9903      	ldr	r1, [sp, #12]
   11ba4:	47d0      	blx	sl
   11ba6:	2800      	cmp	r0, #0
   11ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11baa:	da05      	bge.n	11bb8 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
   11bac:	b01f      	add	sp, #124	; 0x7c
   11bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11bb2:	2220      	movs	r2, #32
					pad = '0';
   11bb4:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   11bb8:	4659      	mov	r1, fp
   11bba:	2900      	cmp	r1, #0
   11bbc:	f10b 3bff 	add.w	fp, fp, #4294967295
   11bc0:	dced      	bgt.n	11b9e <z_cbvprintf_impl+0xb16>
   11bc2:	9b04      	ldr	r3, [sp, #16]
   11bc4:	f8cd b010 	str.w	fp, [sp, #16]
   11bc8:	442b      	add	r3, r5
   11bca:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   11bcc:	f1b9 0f00 	cmp.w	r9, #0
   11bd0:	d005      	beq.n	11bde <z_cbvprintf_impl+0xb56>
			OUTC(sign);
   11bd2:	9903      	ldr	r1, [sp, #12]
   11bd4:	4648      	mov	r0, r9
   11bd6:	47d0      	blx	sl
   11bd8:	2800      	cmp	r0, #0
   11bda:	dbe7      	blt.n	11bac <z_cbvprintf_impl+0xb24>
   11bdc:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   11bde:	9b08      	ldr	r3, [sp, #32]
   11be0:	2b00      	cmp	r3, #0
   11be2:	d079      	beq.n	11cd8 <z_cbvprintf_impl+0xc50>
			if (conv->specifier_a) {
   11be4:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   11be8:	2b00      	cmp	r3, #0
   11bea:	db29      	blt.n	11c40 <z_cbvprintf_impl+0xbb8>
				while (isdigit((unsigned char)*cp)) {
   11bec:	f8df 916c 	ldr.w	r9, [pc, #364]	; 11d5c <z_cbvprintf_impl+0xcd4>
			if (conv->specifier_a) {
   11bf0:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
   11bf2:	7818      	ldrb	r0, [r3, #0]
   11bf4:	f819 2000 	ldrb.w	r2, [r9, r0]
   11bf8:	0752      	lsls	r2, r2, #29
   11bfa:	469b      	mov	fp, r3
   11bfc:	f103 0301 	add.w	r3, r3, #1
   11c00:	d43f      	bmi.n	11c82 <z_cbvprintf_impl+0xbfa>
				if (!conv->pad_postdp) {
   11c02:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   11c06:	1bae      	subs	r6, r5, r6
   11c08:	0698      	lsls	r0, r3, #26
   11c0a:	445e      	add	r6, fp
   11c0c:	d407      	bmi.n	11c1e <z_cbvprintf_impl+0xb96>
					while (pad_len-- > 0) {
   11c0e:	4642      	mov	r2, r8
   11c10:	2a00      	cmp	r2, #0
   11c12:	f108 38ff 	add.w	r8, r8, #4294967295
   11c16:	dc3b      	bgt.n	11c90 <z_cbvprintf_impl+0xc08>
   11c18:	9b07      	ldr	r3, [sp, #28]
   11c1a:	4433      	add	r3, r6
   11c1c:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   11c1e:	f89b 0000 	ldrb.w	r0, [fp]
   11c22:	282e      	cmp	r0, #46	; 0x2e
   11c24:	d10a      	bne.n	11c3c <z_cbvprintf_impl+0xbb4>
					OUTC(*cp++);
   11c26:	9903      	ldr	r1, [sp, #12]
   11c28:	47d0      	blx	sl
						OUTC('0');
   11c2a:	2800      	cmp	r0, #0
   11c2c:	dbbe      	blt.n	11bac <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
   11c2e:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   11c32:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   11c36:	dc31      	bgt.n	11c9c <z_cbvprintf_impl+0xc14>
					OUTC(*cp++);
   11c38:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
   11c3c:	465d      	mov	r5, fp
   11c3e:	e038      	b.n	11cb2 <z_cbvprintf_impl+0xc2a>
   11c40:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   11c42:	f899 0000 	ldrb.w	r0, [r9]
   11c46:	2870      	cmp	r0, #112	; 0x70
   11c48:	46c8      	mov	r8, r9
   11c4a:	f109 0901 	add.w	r9, r9, #1
   11c4e:	d113      	bne.n	11c78 <z_cbvprintf_impl+0xbf0>
   11c50:	1bae      	subs	r6, r5, r6
   11c52:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11c54:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   11c56:	4435      	add	r5, r6
   11c58:	1bab      	subs	r3, r5, r6
   11c5a:	2b00      	cmp	r3, #0
   11c5c:	dc34      	bgt.n	11cc8 <z_cbvprintf_impl+0xc40>
			OUTS(cp, bpe);
   11c5e:	9903      	ldr	r1, [sp, #12]
   11c60:	463b      	mov	r3, r7
   11c62:	4642      	mov	r2, r8
   11c64:	4650      	mov	r0, sl
   11c66:	f012 f99a 	bl	23f9e <outs>
   11c6a:	2800      	cmp	r0, #0
   11c6c:	db9e      	blt.n	11bac <z_cbvprintf_impl+0xb24>
   11c6e:	4430      	add	r0, r6
   11c70:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   11c72:	4605      	mov	r5, r0
   11c74:	4406      	add	r6, r0
   11c76:	e065      	b.n	11d44 <z_cbvprintf_impl+0xcbc>
					OUTC(*cp++);
   11c78:	9903      	ldr	r1, [sp, #12]
   11c7a:	47d0      	blx	sl
   11c7c:	2800      	cmp	r0, #0
   11c7e:	dae0      	bge.n	11c42 <z_cbvprintf_impl+0xbba>
   11c80:	e794      	b.n	11bac <z_cbvprintf_impl+0xb24>
   11c82:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
   11c84:	9903      	ldr	r1, [sp, #12]
   11c86:	47d0      	blx	sl
   11c88:	2800      	cmp	r0, #0
   11c8a:	9b05      	ldr	r3, [sp, #20]
   11c8c:	dab1      	bge.n	11bf2 <z_cbvprintf_impl+0xb6a>
   11c8e:	e78d      	b.n	11bac <z_cbvprintf_impl+0xb24>
						OUTC('0');
   11c90:	9903      	ldr	r1, [sp, #12]
   11c92:	2030      	movs	r0, #48	; 0x30
   11c94:	47d0      	blx	sl
   11c96:	2800      	cmp	r0, #0
   11c98:	dab9      	bge.n	11c0e <z_cbvprintf_impl+0xb86>
   11c9a:	e787      	b.n	11bac <z_cbvprintf_impl+0xb24>
						OUTC('0');
   11c9c:	9903      	ldr	r1, [sp, #12]
   11c9e:	2030      	movs	r0, #48	; 0x30
   11ca0:	47d0      	blx	sl
   11ca2:	f108 38ff 	add.w	r8, r8, #4294967295
   11ca6:	e7c0      	b.n	11c2a <z_cbvprintf_impl+0xba2>
					OUTC(*cp++);
   11ca8:	9903      	ldr	r1, [sp, #12]
   11caa:	47d0      	blx	sl
   11cac:	2800      	cmp	r0, #0
   11cae:	f6ff af7d 	blt.w	11bac <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
   11cb2:	7828      	ldrb	r0, [r5, #0]
   11cb4:	f819 3000 	ldrb.w	r3, [r9, r0]
   11cb8:	0759      	lsls	r1, r3, #29
   11cba:	46a8      	mov	r8, r5
   11cbc:	f105 0501 	add.w	r5, r5, #1
   11cc0:	d4f2      	bmi.n	11ca8 <z_cbvprintf_impl+0xc20>
   11cc2:	eba6 060b 	sub.w	r6, r6, fp
   11cc6:	e7c4      	b.n	11c52 <z_cbvprintf_impl+0xbca>
				OUTC('0');
   11cc8:	9903      	ldr	r1, [sp, #12]
   11cca:	2030      	movs	r0, #48	; 0x30
   11ccc:	47d0      	blx	sl
   11cce:	2800      	cmp	r0, #0
   11cd0:	f6ff af6c 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   11cd4:	3601      	adds	r6, #1
   11cd6:	e7bf      	b.n	11c58 <z_cbvprintf_impl+0xbd0>
			if (conv->altform_0c | conv->altform_0) {
   11cd8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   11cdc:	06da      	lsls	r2, r3, #27
   11cde:	d401      	bmi.n	11ce4 <z_cbvprintf_impl+0xc5c>
   11ce0:	071b      	lsls	r3, r3, #28
   11ce2:	d506      	bpl.n	11cf2 <z_cbvprintf_impl+0xc6a>
				OUTC('0');
   11ce4:	9903      	ldr	r1, [sp, #12]
   11ce6:	2030      	movs	r0, #48	; 0x30
   11ce8:	47d0      	blx	sl
   11cea:	2800      	cmp	r0, #0
   11cec:	f6ff af5e 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   11cf0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11cf2:	9b05      	ldr	r3, [sp, #20]
   11cf4:	b13b      	cbz	r3, 11d06 <z_cbvprintf_impl+0xc7e>
				OUTC(conv->specifier);
   11cf6:	9903      	ldr	r1, [sp, #12]
   11cf8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   11cfc:	47d0      	blx	sl
   11cfe:	2800      	cmp	r0, #0
   11d00:	f6ff af54 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   11d04:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11d06:	44a8      	add	r8, r5
   11d08:	e006      	b.n	11d18 <z_cbvprintf_impl+0xc90>
				OUTC('0');
   11d0a:	9903      	ldr	r1, [sp, #12]
   11d0c:	2030      	movs	r0, #48	; 0x30
   11d0e:	47d0      	blx	sl
   11d10:	2800      	cmp	r0, #0
   11d12:	f6ff af4b 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   11d16:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11d18:	eba8 0305 	sub.w	r3, r8, r5
   11d1c:	2b00      	cmp	r3, #0
   11d1e:	dcf4      	bgt.n	11d0a <z_cbvprintf_impl+0xc82>
			OUTS(bps, bpe);
   11d20:	9903      	ldr	r1, [sp, #12]
   11d22:	463b      	mov	r3, r7
   11d24:	4632      	mov	r2, r6
   11d26:	4650      	mov	r0, sl
   11d28:	f012 f939 	bl	23f9e <outs>
   11d2c:	2800      	cmp	r0, #0
   11d2e:	f6ff af3d 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   11d32:	4428      	add	r0, r5
   11d34:	e79c      	b.n	11c70 <z_cbvprintf_impl+0xbe8>
			OUTC(' ');
   11d36:	9903      	ldr	r1, [sp, #12]
   11d38:	2020      	movs	r0, #32
   11d3a:	47d0      	blx	sl
   11d3c:	2800      	cmp	r0, #0
   11d3e:	f6ff af35 	blt.w	11bac <z_cbvprintf_impl+0xb24>
   11d42:	3501      	adds	r5, #1
		while (width > 0) {
   11d44:	1b73      	subs	r3, r6, r5
   11d46:	2b00      	cmp	r3, #0
   11d48:	dcf5      	bgt.n	11d36 <z_cbvprintf_impl+0xcae>
   11d4a:	f7ff bbd1 	b.w	114f0 <z_cbvprintf_impl+0x468>
			decexp = 0;
   11d4e:	4616      	mov	r6, r2
   11d50:	e6bd      	b.n	11ace <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
   11d52:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   11d56:	e6ba      	b.n	11ace <z_cbvprintf_impl+0xa46>
   11d58:	00028fc9 	.word	0x00028fc9
   11d5c:	0002aa89 	.word	0x0002aa89

00011d60 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   11d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d64:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   11d68:	ed9f 8b49 	vldr	d8, [pc, #292]	; 11e90 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11d6c:	4e4a      	ldr	r6, [pc, #296]	; (11e98 <work_queue_main+0x138>)
{
   11d6e:	b084      	sub	sp, #16
   11d70:	4604      	mov	r4, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   11d72:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d76:	f3ef 8711 	mrs	r7, BASEPRI
   11d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   11d7e:	f3bf 8f6f 	isb	sy
   11d82:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   11d86:	b98d      	cbnz	r5, 11dac <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   11d88:	2102      	movs	r1, #2
   11d8a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   11d8e:	f014 fef2 	bl	26b76 <flag_test_and_clear>
   11d92:	2800      	cmp	r0, #0
   11d94:	d143      	bne.n	11e1e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   11d96:	2300      	movs	r3, #0
   11d98:	ed8d 8b00 	vstr	d8, [sp]
   11d9c:	9302      	str	r3, [sp, #8]
   11d9e:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   11da2:	4639      	mov	r1, r7
   11da4:	483d      	ldr	r0, [pc, #244]	; (11e9c <work_queue_main+0x13c>)
   11da6:	f00c ff3f 	bl	1ec28 <z_sched_wait>
			continue;
   11daa:	e7e2      	b.n	11d72 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11dac:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   11db0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   11db2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11db6:	4295      	cmp	r5, r2
	list->tail = node;
   11db8:	bf08      	it	eq
   11dba:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   11dbe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   11dc2:	f043 0302 	orr.w	r3, r3, #2
   11dc6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   11dca:	68eb      	ldr	r3, [r5, #12]
   11dcc:	f023 0304 	bic.w	r3, r3, #4
   11dd0:	f043 0301 	orr.w	r3, r3, #1
   11dd4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   11dd6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11dd8:	f387 8811 	msr	BASEPRI, r7
   11ddc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   11de0:	4628      	mov	r0, r5
   11de2:	4798      	blx	r3
	__asm__ volatile(
   11de4:	f04f 0340 	mov.w	r3, #64	; 0x40
   11de8:	f3ef 8911 	mrs	r9, BASEPRI
   11dec:	f383 8812 	msr	BASEPRI_MAX, r3
   11df0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   11df4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11df6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   11df8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11dfc:	d419      	bmi.n	11e32 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   11dfe:	60ea      	str	r2, [r5, #12]
   11e00:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   11e04:	f023 0302 	bic.w	r3, r3, #2
   11e08:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
   11e0c:	f389 8811 	msr	BASEPRI, r9
   11e10:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   11e14:	05db      	lsls	r3, r3, #23
   11e16:	d4ac      	bmi.n	11d72 <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
   11e18:	f00c fe04 	bl	1ea24 <z_impl_k_yield>
}
   11e1c:	e7a9      	b.n	11d72 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   11e1e:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   11e22:	2200      	movs	r2, #0
   11e24:	2101      	movs	r1, #1
   11e26:	4628      	mov	r0, r5
   11e28:	f015 f8a0 	bl	26f6c <z_sched_wake>
   11e2c:	2800      	cmp	r0, #0
   11e2e:	d1f8      	bne.n	11e22 <work_queue_main+0xc2>
   11e30:	e7b1      	b.n	11d96 <work_queue_main+0x36>
	return list->head;
   11e32:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   11e34:	f023 0303 	bic.w	r3, r3, #3
   11e38:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   11e3a:	2800      	cmp	r0, #0
   11e3c:	d0e0      	beq.n	11e00 <work_queue_main+0xa0>
	return node->next;
   11e3e:	2700      	movs	r7, #0
   11e40:	f8d0 8000 	ldr.w	r8, [r0]
	parent->next = child;
   11e44:	46ba      	mov	sl, r7
   11e46:	2800      	cmp	r0, #0
   11e48:	d0da      	beq.n	11e00 <work_queue_main+0xa0>
		if (wc->work == work) {
   11e4a:	6842      	ldr	r2, [r0, #4]
   11e4c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   11e4e:	4601      	mov	r1, r0
		if (wc->work == work) {
   11e50:	d10b      	bne.n	11e6a <work_queue_main+0x10a>
	return node->next;
   11e52:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   11e54:	b997      	cbnz	r7, 11e7c <work_queue_main+0x11c>
   11e56:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   11e58:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   11e5a:	4282      	cmp	r2, r0
   11e5c:	d100      	bne.n	11e60 <work_queue_main+0x100>
	list->tail = node;
   11e5e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   11e60:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   11e64:	f00c fa16 	bl	1e294 <z_impl_k_sem_give>
}
   11e68:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   11e6a:	f1b8 0f00 	cmp.w	r8, #0
   11e6e:	d00b      	beq.n	11e88 <work_queue_main+0x128>
	return node->next;
   11e70:	f8d8 2000 	ldr.w	r2, [r8]
   11e74:	4640      	mov	r0, r8
   11e76:	460f      	mov	r7, r1
   11e78:	4690      	mov	r8, r2
   11e7a:	e7e4      	b.n	11e46 <work_queue_main+0xe6>
	parent->next = child;
   11e7c:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   11e7e:	6872      	ldr	r2, [r6, #4]
   11e80:	4282      	cmp	r2, r0
	list->tail = node;
   11e82:	bf08      	it	eq
   11e84:	6077      	streq	r7, [r6, #4]
}
   11e86:	e7eb      	b.n	11e60 <work_queue_main+0x100>
   11e88:	4642      	mov	r2, r8
   11e8a:	e7f3      	b.n	11e74 <work_queue_main+0x114>
   11e8c:	f3af 8000 	nop.w
   11e90:	ffffffff 	.word	0xffffffff
   11e94:	ffffffff 	.word	0xffffffff
   11e98:	20003998 	.word	0x20003998
   11e9c:	20004a50 	.word	0x20004a50

00011ea0 <_dtoa_r>:
   11ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea4:	6a47      	ldr	r7, [r0, #36]	; 0x24
   11ea6:	b097      	sub	sp, #92	; 0x5c
   11ea8:	ed8d 0b00 	vstr	d0, [sp]
   11eac:	ec55 4b10 	vmov	r4, r5, d0
   11eb0:	9e20      	ldr	r6, [sp, #128]	; 0x80
   11eb2:	9108      	str	r1, [sp, #32]
   11eb4:	4683      	mov	fp, r0
   11eb6:	920c      	str	r2, [sp, #48]	; 0x30
   11eb8:	9312      	str	r3, [sp, #72]	; 0x48
   11eba:	b97f      	cbnz	r7, 11edc <_dtoa_r+0x3c>
   11ebc:	2010      	movs	r0, #16
   11ebe:	f00d fce5 	bl	1f88c <malloc>
   11ec2:	4602      	mov	r2, r0
   11ec4:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   11ec8:	b920      	cbnz	r0, 11ed4 <_dtoa_r+0x34>
   11eca:	4ba7      	ldr	r3, [pc, #668]	; (12168 <_dtoa_r+0x2c8>)
   11ecc:	21ea      	movs	r1, #234	; 0xea
   11ece:	48a7      	ldr	r0, [pc, #668]	; (1216c <_dtoa_r+0x2cc>)
   11ed0:	f00e fc22 	bl	20718 <__assert_func>
   11ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
   11ed8:	6007      	str	r7, [r0, #0]
   11eda:	60c7      	str	r7, [r0, #12]
   11edc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   11ee0:	6819      	ldr	r1, [r3, #0]
   11ee2:	b159      	cbz	r1, 11efc <_dtoa_r+0x5c>
   11ee4:	685a      	ldr	r2, [r3, #4]
   11ee6:	604a      	str	r2, [r1, #4]
   11ee8:	2301      	movs	r3, #1
   11eea:	4093      	lsls	r3, r2
   11eec:	608b      	str	r3, [r1, #8]
   11eee:	4658      	mov	r0, fp
   11ef0:	f00e f938 	bl	20164 <_Bfree>
   11ef4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   11ef8:	2200      	movs	r2, #0
   11efa:	601a      	str	r2, [r3, #0]
   11efc:	1e2b      	subs	r3, r5, #0
   11efe:	bfb9      	ittee	lt
   11f00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   11f04:	9301      	strlt	r3, [sp, #4]
   11f06:	2300      	movge	r3, #0
   11f08:	6033      	strge	r3, [r6, #0]
   11f0a:	9f01      	ldr	r7, [sp, #4]
   11f0c:	4b98      	ldr	r3, [pc, #608]	; (12170 <_dtoa_r+0x2d0>)
   11f0e:	bfbc      	itt	lt
   11f10:	2201      	movlt	r2, #1
   11f12:	6032      	strlt	r2, [r6, #0]
   11f14:	43bb      	bics	r3, r7
   11f16:	d119      	bne.n	11f4c <_dtoa_r+0xac>
   11f18:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11f1a:	f242 730f 	movw	r3, #9999	; 0x270f
   11f1e:	6013      	str	r3, [r2, #0]
   11f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
   11f24:	4323      	orrs	r3, r4
   11f26:	f000 85dd 	beq.w	12ae4 <_dtoa_r+0xc44>
   11f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11f2c:	b953      	cbnz	r3, 11f44 <_dtoa_r+0xa4>
   11f2e:	4b91      	ldr	r3, [pc, #580]	; (12174 <_dtoa_r+0x2d4>)
   11f30:	e021      	b.n	11f76 <_dtoa_r+0xd6>
   11f32:	4b91      	ldr	r3, [pc, #580]	; (12178 <_dtoa_r+0x2d8>)
   11f34:	9303      	str	r3, [sp, #12]
   11f36:	3308      	adds	r3, #8
   11f38:	9a21      	ldr	r2, [sp, #132]	; 0x84
   11f3a:	6013      	str	r3, [r2, #0]
   11f3c:	9803      	ldr	r0, [sp, #12]
   11f3e:	b017      	add	sp, #92	; 0x5c
   11f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f44:	4b8b      	ldr	r3, [pc, #556]	; (12174 <_dtoa_r+0x2d4>)
   11f46:	9303      	str	r3, [sp, #12]
   11f48:	3303      	adds	r3, #3
   11f4a:	e7f5      	b.n	11f38 <_dtoa_r+0x98>
   11f4c:	ed9d 7b00 	vldr	d7, [sp]
   11f50:	2200      	movs	r2, #0
   11f52:	ec51 0b17 	vmov	r0, r1, d7
   11f56:	2300      	movs	r3, #0
   11f58:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   11f5c:	f7ee fd5e 	bl	a1c <__aeabi_dcmpeq>
   11f60:	4680      	mov	r8, r0
   11f62:	b150      	cbz	r0, 11f7a <_dtoa_r+0xda>
   11f64:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11f66:	2301      	movs	r3, #1
   11f68:	6013      	str	r3, [r2, #0]
   11f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11f6c:	b113      	cbz	r3, 11f74 <_dtoa_r+0xd4>
   11f6e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   11f70:	4b82      	ldr	r3, [pc, #520]	; (1217c <_dtoa_r+0x2dc>)
   11f72:	6013      	str	r3, [r2, #0]
   11f74:	4b82      	ldr	r3, [pc, #520]	; (12180 <_dtoa_r+0x2e0>)
   11f76:	9303      	str	r3, [sp, #12]
   11f78:	e7e0      	b.n	11f3c <_dtoa_r+0x9c>
   11f7a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   11f7e:	aa14      	add	r2, sp, #80	; 0x50
   11f80:	a915      	add	r1, sp, #84	; 0x54
   11f82:	4658      	mov	r0, fp
   11f84:	f00e fb70 	bl	20668 <__d2b>
   11f88:	f3c7 560a 	ubfx	r6, r7, #20, #11
   11f8c:	9002      	str	r0, [sp, #8]
   11f8e:	2e00      	cmp	r6, #0
   11f90:	d078      	beq.n	12084 <_dtoa_r+0x1e4>
   11f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11f94:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   11f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
   11f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11fa0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   11fa4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   11fa8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   11fac:	4619      	mov	r1, r3
   11fae:	2200      	movs	r2, #0
   11fb0:	4b74      	ldr	r3, [pc, #464]	; (12184 <_dtoa_r+0x2e4>)
   11fb2:	f7ee f8f9 	bl	1a8 <__aeabi_dsub>
   11fb6:	a366      	add	r3, pc, #408	; (adr r3, 12150 <_dtoa_r+0x2b0>)
   11fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fbc:	f7ee faac 	bl	518 <__aeabi_dmul>
   11fc0:	a365      	add	r3, pc, #404	; (adr r3, 12158 <_dtoa_r+0x2b8>)
   11fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fc6:	f7ee f8f1 	bl	1ac <__adddf3>
   11fca:	4604      	mov	r4, r0
   11fcc:	4630      	mov	r0, r6
   11fce:	460d      	mov	r5, r1
   11fd0:	f7ee fa38 	bl	444 <__aeabi_i2d>
   11fd4:	a362      	add	r3, pc, #392	; (adr r3, 12160 <_dtoa_r+0x2c0>)
   11fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fda:	f7ee fa9d 	bl	518 <__aeabi_dmul>
   11fde:	4602      	mov	r2, r0
   11fe0:	460b      	mov	r3, r1
   11fe2:	4620      	mov	r0, r4
   11fe4:	4629      	mov	r1, r5
   11fe6:	f7ee f8e1 	bl	1ac <__adddf3>
   11fea:	4604      	mov	r4, r0
   11fec:	460d      	mov	r5, r1
   11fee:	f7ef f8ab 	bl	1148 <__aeabi_d2iz>
   11ff2:	2200      	movs	r2, #0
   11ff4:	4607      	mov	r7, r0
   11ff6:	2300      	movs	r3, #0
   11ff8:	4620      	mov	r0, r4
   11ffa:	4629      	mov	r1, r5
   11ffc:	f7ee fd18 	bl	a30 <__aeabi_dcmplt>
   12000:	b140      	cbz	r0, 12014 <_dtoa_r+0x174>
   12002:	4638      	mov	r0, r7
   12004:	f7ee fa1e 	bl	444 <__aeabi_i2d>
   12008:	4622      	mov	r2, r4
   1200a:	462b      	mov	r3, r5
   1200c:	f7ee fd06 	bl	a1c <__aeabi_dcmpeq>
   12010:	b900      	cbnz	r0, 12014 <_dtoa_r+0x174>
   12012:	3f01      	subs	r7, #1
   12014:	2f16      	cmp	r7, #22
   12016:	d852      	bhi.n	120be <_dtoa_r+0x21e>
   12018:	4b5b      	ldr	r3, [pc, #364]	; (12188 <_dtoa_r+0x2e8>)
   1201a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1201e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12022:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12026:	f7ee fd03 	bl	a30 <__aeabi_dcmplt>
   1202a:	2800      	cmp	r0, #0
   1202c:	d049      	beq.n	120c2 <_dtoa_r+0x222>
   1202e:	3f01      	subs	r7, #1
   12030:	2300      	movs	r3, #0
   12032:	9311      	str	r3, [sp, #68]	; 0x44
   12034:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12036:	1b9b      	subs	r3, r3, r6
   12038:	1e5a      	subs	r2, r3, #1
   1203a:	bf45      	ittet	mi
   1203c:	f1c3 0301 	rsbmi	r3, r3, #1
   12040:	9306      	strmi	r3, [sp, #24]
   12042:	2300      	movpl	r3, #0
   12044:	2300      	movmi	r3, #0
   12046:	9207      	str	r2, [sp, #28]
   12048:	bf54      	ite	pl
   1204a:	9306      	strpl	r3, [sp, #24]
   1204c:	9307      	strmi	r3, [sp, #28]
   1204e:	2f00      	cmp	r7, #0
   12050:	db39      	blt.n	120c6 <_dtoa_r+0x226>
   12052:	9b07      	ldr	r3, [sp, #28]
   12054:	9710      	str	r7, [sp, #64]	; 0x40
   12056:	443b      	add	r3, r7
   12058:	9307      	str	r3, [sp, #28]
   1205a:	2300      	movs	r3, #0
   1205c:	9309      	str	r3, [sp, #36]	; 0x24
   1205e:	9b08      	ldr	r3, [sp, #32]
   12060:	2b09      	cmp	r3, #9
   12062:	d866      	bhi.n	12132 <_dtoa_r+0x292>
   12064:	2b05      	cmp	r3, #5
   12066:	bfc4      	itt	gt
   12068:	3b04      	subgt	r3, #4
   1206a:	9308      	strgt	r3, [sp, #32]
   1206c:	9b08      	ldr	r3, [sp, #32]
   1206e:	f1a3 0302 	sub.w	r3, r3, #2
   12072:	bfcc      	ite	gt
   12074:	2400      	movgt	r4, #0
   12076:	2401      	movle	r4, #1
   12078:	2b03      	cmp	r3, #3
   1207a:	d865      	bhi.n	12148 <_dtoa_r+0x2a8>
   1207c:	e8df f003 	tbb	[pc, r3]
   12080:	5736382b 	.word	0x5736382b
   12084:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
   12088:	441e      	add	r6, r3
   1208a:	f206 4332 	addw	r3, r6, #1074	; 0x432
   1208e:	2b20      	cmp	r3, #32
   12090:	bfc1      	itttt	gt
   12092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   12096:	409f      	lslgt	r7, r3
   12098:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
   1209c:	fa24 f303 	lsrgt.w	r3, r4, r3
   120a0:	bfd6      	itet	le
   120a2:	f1c3 0320 	rsble	r3, r3, #32
   120a6:	ea47 0003 	orrgt.w	r0, r7, r3
   120aa:	fa04 f003 	lslle.w	r0, r4, r3
   120ae:	f7ee f9b9 	bl	424 <__aeabi_ui2d>
   120b2:	2201      	movs	r2, #1
   120b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
   120b8:	3e01      	subs	r6, #1
   120ba:	9213      	str	r2, [sp, #76]	; 0x4c
   120bc:	e776      	b.n	11fac <_dtoa_r+0x10c>
   120be:	2301      	movs	r3, #1
   120c0:	e7b7      	b.n	12032 <_dtoa_r+0x192>
   120c2:	9011      	str	r0, [sp, #68]	; 0x44
   120c4:	e7b6      	b.n	12034 <_dtoa_r+0x194>
   120c6:	9b06      	ldr	r3, [sp, #24]
   120c8:	1bdb      	subs	r3, r3, r7
   120ca:	9306      	str	r3, [sp, #24]
   120cc:	427b      	negs	r3, r7
   120ce:	9309      	str	r3, [sp, #36]	; 0x24
   120d0:	2300      	movs	r3, #0
   120d2:	9310      	str	r3, [sp, #64]	; 0x40
   120d4:	e7c3      	b.n	1205e <_dtoa_r+0x1be>
   120d6:	2300      	movs	r3, #0
   120d8:	930d      	str	r3, [sp, #52]	; 0x34
   120da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120dc:	2b00      	cmp	r3, #0
   120de:	dc57      	bgt.n	12190 <_dtoa_r+0x2f0>
   120e0:	2301      	movs	r3, #1
   120e2:	9304      	str	r3, [sp, #16]
   120e4:	4699      	mov	r9, r3
   120e6:	461a      	mov	r2, r3
   120e8:	920c      	str	r2, [sp, #48]	; 0x30
   120ea:	e00c      	b.n	12106 <_dtoa_r+0x266>
   120ec:	2301      	movs	r3, #1
   120ee:	e7f3      	b.n	120d8 <_dtoa_r+0x238>
   120f0:	2300      	movs	r3, #0
   120f2:	930d      	str	r3, [sp, #52]	; 0x34
   120f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120f6:	18fb      	adds	r3, r7, r3
   120f8:	f103 0901 	add.w	r9, r3, #1
   120fc:	9304      	str	r3, [sp, #16]
   120fe:	464b      	mov	r3, r9
   12100:	2b01      	cmp	r3, #1
   12102:	bfb8      	it	lt
   12104:	2301      	movlt	r3, #1
   12106:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
   1210a:	2100      	movs	r1, #0
   1210c:	2204      	movs	r2, #4
   1210e:	f102 0514 	add.w	r5, r2, #20
   12112:	429d      	cmp	r5, r3
   12114:	d940      	bls.n	12198 <_dtoa_r+0x2f8>
   12116:	6041      	str	r1, [r0, #4]
   12118:	4658      	mov	r0, fp
   1211a:	f00d ffe3 	bl	200e4 <_Balloc>
   1211e:	9003      	str	r0, [sp, #12]
   12120:	2800      	cmp	r0, #0
   12122:	d13c      	bne.n	1219e <_dtoa_r+0x2fe>
   12124:	4b19      	ldr	r3, [pc, #100]	; (1218c <_dtoa_r+0x2ec>)
   12126:	4602      	mov	r2, r0
   12128:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1212c:	e6cf      	b.n	11ece <_dtoa_r+0x2e>
   1212e:	2301      	movs	r3, #1
   12130:	e7df      	b.n	120f2 <_dtoa_r+0x252>
   12132:	2401      	movs	r4, #1
   12134:	2300      	movs	r3, #0
   12136:	9308      	str	r3, [sp, #32]
   12138:	940d      	str	r4, [sp, #52]	; 0x34
   1213a:	f04f 33ff 	mov.w	r3, #4294967295
   1213e:	9304      	str	r3, [sp, #16]
   12140:	4699      	mov	r9, r3
   12142:	2200      	movs	r2, #0
   12144:	2312      	movs	r3, #18
   12146:	e7cf      	b.n	120e8 <_dtoa_r+0x248>
   12148:	2301      	movs	r3, #1
   1214a:	930d      	str	r3, [sp, #52]	; 0x34
   1214c:	e7f5      	b.n	1213a <_dtoa_r+0x29a>
   1214e:	bf00      	nop
   12150:	636f4361 	.word	0x636f4361
   12154:	3fd287a7 	.word	0x3fd287a7
   12158:	8b60c8b3 	.word	0x8b60c8b3
   1215c:	3fc68a28 	.word	0x3fc68a28
   12160:	509f79fb 	.word	0x509f79fb
   12164:	3fd34413 	.word	0x3fd34413
   12168:	0002abc4 	.word	0x0002abc4
   1216c:	0002abdb 	.word	0x0002abdb
   12170:	7ff00000 	.word	0x7ff00000
   12174:	0002abc0 	.word	0x0002abc0
   12178:	0002abb7 	.word	0x0002abb7
   1217c:	00029adc 	.word	0x00029adc
   12180:	00029adb 	.word	0x00029adb
   12184:	3ff80000 	.word	0x3ff80000
   12188:	00028170 	.word	0x00028170
   1218c:	0002ac4f 	.word	0x0002ac4f
   12190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12192:	9304      	str	r3, [sp, #16]
   12194:	4699      	mov	r9, r3
   12196:	e7b6      	b.n	12106 <_dtoa_r+0x266>
   12198:	3101      	adds	r1, #1
   1219a:	0052      	lsls	r2, r2, #1
   1219c:	e7b7      	b.n	1210e <_dtoa_r+0x26e>
   1219e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   121a2:	9a03      	ldr	r2, [sp, #12]
   121a4:	601a      	str	r2, [r3, #0]
   121a6:	f1b9 0f0e 	cmp.w	r9, #14
   121aa:	d86f      	bhi.n	1228c <_dtoa_r+0x3ec>
   121ac:	2c00      	cmp	r4, #0
   121ae:	d06d      	beq.n	1228c <_dtoa_r+0x3ec>
   121b0:	2f00      	cmp	r7, #0
   121b2:	dd36      	ble.n	12222 <_dtoa_r+0x382>
   121b4:	4ba1      	ldr	r3, [pc, #644]	; (1243c <_dtoa_r+0x59c>)
   121b6:	f007 020f 	and.w	r2, r7, #15
   121ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   121be:	ed93 7b00 	vldr	d7, [r3]
   121c2:	05f8      	lsls	r0, r7, #23
   121c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   121c8:	ea4f 1427 	mov.w	r4, r7, asr #4
   121cc:	d517      	bpl.n	121fe <_dtoa_r+0x35e>
   121ce:	4b9c      	ldr	r3, [pc, #624]	; (12440 <_dtoa_r+0x5a0>)
   121d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   121d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   121d8:	f7ee fac8 	bl	76c <__aeabi_ddiv>
   121dc:	e9cd 0100 	strd	r0, r1, [sp]
   121e0:	f004 040f 	and.w	r4, r4, #15
   121e4:	f04f 0803 	mov.w	r8, #3
   121e8:	4d95      	ldr	r5, [pc, #596]	; (12440 <_dtoa_r+0x5a0>)
   121ea:	b95c      	cbnz	r4, 12204 <_dtoa_r+0x364>
   121ec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   121f0:	e9dd 0100 	ldrd	r0, r1, [sp]
   121f4:	f7ee faba 	bl	76c <__aeabi_ddiv>
   121f8:	e9cd 0100 	strd	r0, r1, [sp]
   121fc:	e02b      	b.n	12256 <_dtoa_r+0x3b6>
   121fe:	f04f 0802 	mov.w	r8, #2
   12202:	e7f1      	b.n	121e8 <_dtoa_r+0x348>
   12204:	07e1      	lsls	r1, r4, #31
   12206:	d509      	bpl.n	1221c <_dtoa_r+0x37c>
   12208:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1220c:	e9d5 2300 	ldrd	r2, r3, [r5]
   12210:	f7ee f982 	bl	518 <__aeabi_dmul>
   12214:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   12218:	f108 0801 	add.w	r8, r8, #1
   1221c:	1064      	asrs	r4, r4, #1
   1221e:	3508      	adds	r5, #8
   12220:	e7e3      	b.n	121ea <_dtoa_r+0x34a>
   12222:	f000 8107 	beq.w	12434 <_dtoa_r+0x594>
   12226:	427c      	negs	r4, r7
   12228:	4b84      	ldr	r3, [pc, #528]	; (1243c <_dtoa_r+0x59c>)
   1222a:	4d85      	ldr	r5, [pc, #532]	; (12440 <_dtoa_r+0x5a0>)
   1222c:	f004 020f 	and.w	r2, r4, #15
   12230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12234:	e9d3 2300 	ldrd	r2, r3, [r3]
   12238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1223c:	f7ee f96c 	bl	518 <__aeabi_dmul>
   12240:	e9cd 0100 	strd	r0, r1, [sp]
   12244:	1124      	asrs	r4, r4, #4
   12246:	2300      	movs	r3, #0
   12248:	f04f 0802 	mov.w	r8, #2
   1224c:	2c00      	cmp	r4, #0
   1224e:	f040 80e5 	bne.w	1241c <_dtoa_r+0x57c>
   12252:	2b00      	cmp	r3, #0
   12254:	d1d0      	bne.n	121f8 <_dtoa_r+0x358>
   12256:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12258:	e9dd 4500 	ldrd	r4, r5, [sp]
   1225c:	2b00      	cmp	r3, #0
   1225e:	f000 814c 	beq.w	124fa <_dtoa_r+0x65a>
   12262:	4b78      	ldr	r3, [pc, #480]	; (12444 <_dtoa_r+0x5a4>)
   12264:	2200      	movs	r2, #0
   12266:	4620      	mov	r0, r4
   12268:	4629      	mov	r1, r5
   1226a:	f7ee fbe1 	bl	a30 <__aeabi_dcmplt>
   1226e:	2800      	cmp	r0, #0
   12270:	f000 8143 	beq.w	124fa <_dtoa_r+0x65a>
   12274:	f1b9 0f00 	cmp.w	r9, #0
   12278:	f000 813f 	beq.w	124fa <_dtoa_r+0x65a>
   1227c:	9b04      	ldr	r3, [sp, #16]
   1227e:	2b00      	cmp	r3, #0
   12280:	f300 80e4 	bgt.w	1244c <_dtoa_r+0x5ac>
   12284:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   12288:	e9cd 3400 	strd	r3, r4, [sp]
   1228c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1228e:	2b00      	cmp	r3, #0
   12290:	db02      	blt.n	12298 <_dtoa_r+0x3f8>
   12292:	2f0e      	cmp	r7, #14
   12294:	f340 8242 	ble.w	1271c <_dtoa_r+0x87c>
   12298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1229a:	2a00      	cmp	r2, #0
   1229c:	f040 8267 	bne.w	1276e <_dtoa_r+0x8ce>
   122a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   122a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   122a6:	2500      	movs	r5, #0
   122a8:	f1b8 0f00 	cmp.w	r8, #0
   122ac:	d00d      	beq.n	122ca <_dtoa_r+0x42a>
   122ae:	9b07      	ldr	r3, [sp, #28]
   122b0:	2b00      	cmp	r3, #0
   122b2:	dd0a      	ble.n	122ca <_dtoa_r+0x42a>
   122b4:	4543      	cmp	r3, r8
   122b6:	9a06      	ldr	r2, [sp, #24]
   122b8:	bfa8      	it	ge
   122ba:	4643      	movge	r3, r8
   122bc:	1ad2      	subs	r2, r2, r3
   122be:	9206      	str	r2, [sp, #24]
   122c0:	9a07      	ldr	r2, [sp, #28]
   122c2:	eba8 0803 	sub.w	r8, r8, r3
   122c6:	1ad3      	subs	r3, r2, r3
   122c8:	9307      	str	r3, [sp, #28]
   122ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122cc:	b30b      	cbz	r3, 12312 <_dtoa_r+0x472>
   122ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122d0:	2b00      	cmp	r3, #0
   122d2:	f000 82a6 	beq.w	12822 <_dtoa_r+0x982>
   122d6:	2c00      	cmp	r4, #0
   122d8:	f000 82a1 	beq.w	1281e <_dtoa_r+0x97e>
   122dc:	4629      	mov	r1, r5
   122de:	4622      	mov	r2, r4
   122e0:	4658      	mov	r0, fp
   122e2:	f00e f867 	bl	203b4 <__pow5mult>
   122e6:	9a02      	ldr	r2, [sp, #8]
   122e8:	4601      	mov	r1, r0
   122ea:	4605      	mov	r5, r0
   122ec:	4658      	mov	r0, fp
   122ee:	f00d ffb7 	bl	20260 <__multiply>
   122f2:	9902      	ldr	r1, [sp, #8]
   122f4:	4606      	mov	r6, r0
   122f6:	4658      	mov	r0, fp
   122f8:	f00d ff34 	bl	20164 <_Bfree>
   122fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122fe:	1b1b      	subs	r3, r3, r4
   12300:	9309      	str	r3, [sp, #36]	; 0x24
   12302:	f000 8291 	beq.w	12828 <_dtoa_r+0x988>
   12306:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12308:	4631      	mov	r1, r6
   1230a:	4658      	mov	r0, fp
   1230c:	f00e f852 	bl	203b4 <__pow5mult>
   12310:	9002      	str	r0, [sp, #8]
   12312:	2101      	movs	r1, #1
   12314:	4658      	mov	r0, fp
   12316:	f00d ff8d 	bl	20234 <__i2b>
   1231a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1231c:	4604      	mov	r4, r0
   1231e:	2b00      	cmp	r3, #0
   12320:	f000 8284 	beq.w	1282c <_dtoa_r+0x98c>
   12324:	461a      	mov	r2, r3
   12326:	4601      	mov	r1, r0
   12328:	4658      	mov	r0, fp
   1232a:	f00e f843 	bl	203b4 <__pow5mult>
   1232e:	9b08      	ldr	r3, [sp, #32]
   12330:	2b01      	cmp	r3, #1
   12332:	4604      	mov	r4, r0
   12334:	dc03      	bgt.n	1233e <_dtoa_r+0x49e>
   12336:	9b00      	ldr	r3, [sp, #0]
   12338:	2b00      	cmp	r3, #0
   1233a:	f000 827c 	beq.w	12836 <_dtoa_r+0x996>
   1233e:	2600      	movs	r6, #0
   12340:	6923      	ldr	r3, [r4, #16]
   12342:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   12346:	6918      	ldr	r0, [r3, #16]
   12348:	f015 fa0c 	bl	27764 <__hi0bits>
   1234c:	9610      	str	r6, [sp, #64]	; 0x40
   1234e:	f1c0 0020 	rsb	r0, r0, #32
   12352:	9b07      	ldr	r3, [sp, #28]
   12354:	4418      	add	r0, r3
   12356:	f010 001f 	ands.w	r0, r0, #31
   1235a:	f000 8291 	beq.w	12880 <_dtoa_r+0x9e0>
   1235e:	f1c0 0320 	rsb	r3, r0, #32
   12362:	2b04      	cmp	r3, #4
   12364:	f340 8281 	ble.w	1286a <_dtoa_r+0x9ca>
   12368:	9b06      	ldr	r3, [sp, #24]
   1236a:	f1c0 001c 	rsb	r0, r0, #28
   1236e:	4403      	add	r3, r0
   12370:	9306      	str	r3, [sp, #24]
   12372:	9b07      	ldr	r3, [sp, #28]
   12374:	4403      	add	r3, r0
   12376:	4480      	add	r8, r0
   12378:	9307      	str	r3, [sp, #28]
   1237a:	9b06      	ldr	r3, [sp, #24]
   1237c:	2b00      	cmp	r3, #0
   1237e:	dd05      	ble.n	1238c <_dtoa_r+0x4ec>
   12380:	9902      	ldr	r1, [sp, #8]
   12382:	461a      	mov	r2, r3
   12384:	4658      	mov	r0, fp
   12386:	f00e f86f 	bl	20468 <__lshift>
   1238a:	9002      	str	r0, [sp, #8]
   1238c:	9b07      	ldr	r3, [sp, #28]
   1238e:	2b00      	cmp	r3, #0
   12390:	dd05      	ble.n	1239e <_dtoa_r+0x4fe>
   12392:	4621      	mov	r1, r4
   12394:	461a      	mov	r2, r3
   12396:	4658      	mov	r0, fp
   12398:	f00e f866 	bl	20468 <__lshift>
   1239c:	4604      	mov	r4, r0
   1239e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   123a0:	2b00      	cmp	r3, #0
   123a2:	f000 8276 	beq.w	12892 <_dtoa_r+0x9f2>
   123a6:	9802      	ldr	r0, [sp, #8]
   123a8:	4621      	mov	r1, r4
   123aa:	f015 fa2a 	bl	27802 <__mcmp>
   123ae:	2800      	cmp	r0, #0
   123b0:	f280 826f 	bge.w	12892 <_dtoa_r+0x9f2>
   123b4:	2300      	movs	r3, #0
   123b6:	9902      	ldr	r1, [sp, #8]
   123b8:	220a      	movs	r2, #10
   123ba:	4658      	mov	r0, fp
   123bc:	f00d fef4 	bl	201a8 <__multadd>
   123c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   123c2:	9002      	str	r0, [sp, #8]
   123c4:	1e7e      	subs	r6, r7, #1
   123c6:	2b00      	cmp	r3, #0
   123c8:	f000 825c 	beq.w	12884 <_dtoa_r+0x9e4>
   123cc:	2300      	movs	r3, #0
   123ce:	4629      	mov	r1, r5
   123d0:	220a      	movs	r2, #10
   123d2:	4658      	mov	r0, fp
   123d4:	f00d fee8 	bl	201a8 <__multadd>
   123d8:	9b04      	ldr	r3, [sp, #16]
   123da:	2b00      	cmp	r3, #0
   123dc:	4605      	mov	r5, r0
   123de:	dc03      	bgt.n	123e8 <_dtoa_r+0x548>
   123e0:	9b08      	ldr	r3, [sp, #32]
   123e2:	2b02      	cmp	r3, #2
   123e4:	f300 825e 	bgt.w	128a4 <_dtoa_r+0xa04>
   123e8:	f1b8 0f00 	cmp.w	r8, #0
   123ec:	dd05      	ble.n	123fa <_dtoa_r+0x55a>
   123ee:	4629      	mov	r1, r5
   123f0:	4642      	mov	r2, r8
   123f2:	4658      	mov	r0, fp
   123f4:	f00e f838 	bl	20468 <__lshift>
   123f8:	4605      	mov	r5, r0
   123fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   123fc:	2b00      	cmp	r3, #0
   123fe:	f000 82d0 	beq.w	129a2 <_dtoa_r+0xb02>
   12402:	6869      	ldr	r1, [r5, #4]
   12404:	4658      	mov	r0, fp
   12406:	f00d fe6d 	bl	200e4 <_Balloc>
   1240a:	4607      	mov	r7, r0
   1240c:	2800      	cmp	r0, #0
   1240e:	f040 827f 	bne.w	12910 <_dtoa_r+0xa70>
   12412:	4b0d      	ldr	r3, [pc, #52]	; (12448 <_dtoa_r+0x5a8>)
   12414:	4602      	mov	r2, r0
   12416:	f240 21ea 	movw	r1, #746	; 0x2ea
   1241a:	e558      	b.n	11ece <_dtoa_r+0x2e>
   1241c:	07e2      	lsls	r2, r4, #31
   1241e:	d506      	bpl.n	1242e <_dtoa_r+0x58e>
   12420:	e9d5 2300 	ldrd	r2, r3, [r5]
   12424:	f7ee f878 	bl	518 <__aeabi_dmul>
   12428:	f108 0801 	add.w	r8, r8, #1
   1242c:	2301      	movs	r3, #1
   1242e:	1064      	asrs	r4, r4, #1
   12430:	3508      	adds	r5, #8
   12432:	e70b      	b.n	1224c <_dtoa_r+0x3ac>
   12434:	f04f 0802 	mov.w	r8, #2
   12438:	e70d      	b.n	12256 <_dtoa_r+0x3b6>
   1243a:	bf00      	nop
   1243c:	00028170 	.word	0x00028170
   12440:	00028148 	.word	0x00028148
   12444:	3ff00000 	.word	0x3ff00000
   12448:	0002ac4f 	.word	0x0002ac4f
   1244c:	4620      	mov	r0, r4
   1244e:	4bad      	ldr	r3, [pc, #692]	; (12704 <_dtoa_r+0x864>)
   12450:	2200      	movs	r2, #0
   12452:	4629      	mov	r1, r5
   12454:	f7ee f860 	bl	518 <__aeabi_dmul>
   12458:	e9cd 0100 	strd	r0, r1, [sp]
   1245c:	9c04      	ldr	r4, [sp, #16]
   1245e:	1e7e      	subs	r6, r7, #1
   12460:	f108 0801 	add.w	r8, r8, #1
   12464:	4640      	mov	r0, r8
   12466:	f7ed ffed 	bl	444 <__aeabi_i2d>
   1246a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1246e:	f7ee f853 	bl	518 <__aeabi_dmul>
   12472:	4ba5      	ldr	r3, [pc, #660]	; (12708 <_dtoa_r+0x868>)
   12474:	2200      	movs	r2, #0
   12476:	f7ed fe99 	bl	1ac <__adddf3>
   1247a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   1247e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   12482:	930f      	str	r3, [sp, #60]	; 0x3c
   12484:	2c00      	cmp	r4, #0
   12486:	d13b      	bne.n	12500 <_dtoa_r+0x660>
   12488:	e9dd 0100 	ldrd	r0, r1, [sp]
   1248c:	4b9f      	ldr	r3, [pc, #636]	; (1270c <_dtoa_r+0x86c>)
   1248e:	2200      	movs	r2, #0
   12490:	f7ed fe8a 	bl	1a8 <__aeabi_dsub>
   12494:	4602      	mov	r2, r0
   12496:	460b      	mov	r3, r1
   12498:	e9cd 2300 	strd	r2, r3, [sp]
   1249c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   124a0:	f7ee fae4 	bl	a6c <__aeabi_dcmpgt>
   124a4:	2800      	cmp	r0, #0
   124a6:	f040 8157 	bne.w	12758 <_dtoa_r+0x8b8>
   124aa:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
   124ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   124b2:	e9dd 0100 	ldrd	r0, r1, [sp]
   124b6:	f7ee fabb 	bl	a30 <__aeabi_dcmplt>
   124ba:	2800      	cmp	r0, #0
   124bc:	f43f aee2 	beq.w	12284 <_dtoa_r+0x3e4>
   124c0:	2400      	movs	r4, #0
   124c2:	4625      	mov	r5, r4
   124c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   124c6:	f8dd a00c 	ldr.w	sl, [sp, #12]
   124ca:	43de      	mvns	r6, r3
   124cc:	f04f 0800 	mov.w	r8, #0
   124d0:	4621      	mov	r1, r4
   124d2:	4658      	mov	r0, fp
   124d4:	f00d fe46 	bl	20164 <_Bfree>
   124d8:	2d00      	cmp	r5, #0
   124da:	f000 80a9 	beq.w	12630 <_dtoa_r+0x790>
   124de:	f1b8 0f00 	cmp.w	r8, #0
   124e2:	d005      	beq.n	124f0 <_dtoa_r+0x650>
   124e4:	45a8      	cmp	r8, r5
   124e6:	d003      	beq.n	124f0 <_dtoa_r+0x650>
   124e8:	4641      	mov	r1, r8
   124ea:	4658      	mov	r0, fp
   124ec:	f00d fe3a 	bl	20164 <_Bfree>
   124f0:	4629      	mov	r1, r5
   124f2:	4658      	mov	r0, fp
   124f4:	f00d fe36 	bl	20164 <_Bfree>
   124f8:	e09a      	b.n	12630 <_dtoa_r+0x790>
   124fa:	463e      	mov	r6, r7
   124fc:	464c      	mov	r4, r9
   124fe:	e7b1      	b.n	12464 <_dtoa_r+0x5c4>
   12500:	4b83      	ldr	r3, [pc, #524]	; (12710 <_dtoa_r+0x870>)
   12502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   12506:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   1250a:	9b03      	ldr	r3, [sp, #12]
   1250c:	441c      	add	r4, r3
   1250e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12510:	2b00      	cmp	r3, #0
   12512:	d04a      	beq.n	125aa <_dtoa_r+0x70a>
   12514:	4602      	mov	r2, r0
   12516:	460b      	mov	r3, r1
   12518:	2000      	movs	r0, #0
   1251a:	497e      	ldr	r1, [pc, #504]	; (12714 <_dtoa_r+0x874>)
   1251c:	f7ee f926 	bl	76c <__aeabi_ddiv>
   12520:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   12524:	f7ed fe40 	bl	1a8 <__aeabi_dsub>
   12528:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1252c:	f8dd a00c 	ldr.w	sl, [sp, #12]
   12530:	e9dd 0100 	ldrd	r0, r1, [sp]
   12534:	f7ee fe08 	bl	1148 <__aeabi_d2iz>
   12538:	4605      	mov	r5, r0
   1253a:	f7ed ff83 	bl	444 <__aeabi_i2d>
   1253e:	4602      	mov	r2, r0
   12540:	460b      	mov	r3, r1
   12542:	e9dd 0100 	ldrd	r0, r1, [sp]
   12546:	f7ed fe2f 	bl	1a8 <__aeabi_dsub>
   1254a:	3530      	adds	r5, #48	; 0x30
   1254c:	e9cd 0100 	strd	r0, r1, [sp]
   12550:	4602      	mov	r2, r0
   12552:	460b      	mov	r3, r1
   12554:	f80a 5b01 	strb.w	r5, [sl], #1
   12558:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1255c:	f7ee fa86 	bl	a6c <__aeabi_dcmpgt>
   12560:	2800      	cmp	r0, #0
   12562:	d165      	bne.n	12630 <_dtoa_r+0x790>
   12564:	e9dd 2300 	ldrd	r2, r3, [sp]
   12568:	496b      	ldr	r1, [pc, #428]	; (12718 <_dtoa_r+0x878>)
   1256a:	2000      	movs	r0, #0
   1256c:	f7ed fe1c 	bl	1a8 <__aeabi_dsub>
   12570:	4602      	mov	r2, r0
   12572:	460b      	mov	r3, r1
   12574:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   12578:	f7ee fa78 	bl	a6c <__aeabi_dcmpgt>
   1257c:	2800      	cmp	r0, #0
   1257e:	f040 810d 	bne.w	1279c <_dtoa_r+0x8fc>
   12582:	45a2      	cmp	sl, r4
   12584:	f000 80ea 	beq.w	1275c <_dtoa_r+0x8bc>
   12588:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1258c:	4b5d      	ldr	r3, [pc, #372]	; (12704 <_dtoa_r+0x864>)
   1258e:	2200      	movs	r2, #0
   12590:	f7ed ffc2 	bl	518 <__aeabi_dmul>
   12594:	4b5b      	ldr	r3, [pc, #364]	; (12704 <_dtoa_r+0x864>)
   12596:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1259a:	2200      	movs	r2, #0
   1259c:	e9dd 0100 	ldrd	r0, r1, [sp]
   125a0:	f7ed ffba 	bl	518 <__aeabi_dmul>
   125a4:	e9cd 0100 	strd	r0, r1, [sp]
   125a8:	e7c2      	b.n	12530 <_dtoa_r+0x690>
   125aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   125ae:	f7ed ffb3 	bl	518 <__aeabi_dmul>
   125b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   125b6:	f8dd a00c 	ldr.w	sl, [sp, #12]
   125ba:	46a0      	mov	r8, r4
   125bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   125c0:	f7ee fdc2 	bl	1148 <__aeabi_d2iz>
   125c4:	4605      	mov	r5, r0
   125c6:	f7ed ff3d 	bl	444 <__aeabi_i2d>
   125ca:	4602      	mov	r2, r0
   125cc:	460b      	mov	r3, r1
   125ce:	e9dd 0100 	ldrd	r0, r1, [sp]
   125d2:	f7ed fde9 	bl	1a8 <__aeabi_dsub>
   125d6:	3530      	adds	r5, #48	; 0x30
   125d8:	f80a 5b01 	strb.w	r5, [sl], #1
   125dc:	4602      	mov	r2, r0
   125de:	460b      	mov	r3, r1
   125e0:	45a2      	cmp	sl, r4
   125e2:	e9cd 2300 	strd	r2, r3, [sp]
   125e6:	f04f 0200 	mov.w	r2, #0
   125ea:	d123      	bne.n	12634 <_dtoa_r+0x794>
   125ec:	4b49      	ldr	r3, [pc, #292]	; (12714 <_dtoa_r+0x874>)
   125ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   125f2:	f7ed fddb 	bl	1ac <__adddf3>
   125f6:	4602      	mov	r2, r0
   125f8:	460b      	mov	r3, r1
   125fa:	e9dd 0100 	ldrd	r0, r1, [sp]
   125fe:	f7ee fa35 	bl	a6c <__aeabi_dcmpgt>
   12602:	2800      	cmp	r0, #0
   12604:	f040 80ca 	bne.w	1279c <_dtoa_r+0x8fc>
   12608:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1260c:	4941      	ldr	r1, [pc, #260]	; (12714 <_dtoa_r+0x874>)
   1260e:	2000      	movs	r0, #0
   12610:	f7ed fdca 	bl	1a8 <__aeabi_dsub>
   12614:	4602      	mov	r2, r0
   12616:	460b      	mov	r3, r1
   12618:	e9dd 0100 	ldrd	r0, r1, [sp]
   1261c:	f7ee fa08 	bl	a30 <__aeabi_dcmplt>
   12620:	b170      	cbz	r0, 12640 <_dtoa_r+0x7a0>
   12622:	46c2      	mov	sl, r8
   12624:	f108 38ff 	add.w	r8, r8, #4294967295
   12628:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   1262c:	2b30      	cmp	r3, #48	; 0x30
   1262e:	d0f8      	beq.n	12622 <_dtoa_r+0x782>
   12630:	4637      	mov	r7, r6
   12632:	e055      	b.n	126e0 <_dtoa_r+0x840>
   12634:	4b33      	ldr	r3, [pc, #204]	; (12704 <_dtoa_r+0x864>)
   12636:	f7ed ff6f 	bl	518 <__aeabi_dmul>
   1263a:	e9cd 0100 	strd	r0, r1, [sp]
   1263e:	e7bd      	b.n	125bc <_dtoa_r+0x71c>
   12640:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   12644:	e9cd 3400 	strd	r3, r4, [sp]
   12648:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1264a:	2b00      	cmp	r3, #0
   1264c:	f6ff ae28 	blt.w	122a0 <_dtoa_r+0x400>
   12650:	2f0e      	cmp	r7, #14
   12652:	f73f ae25 	bgt.w	122a0 <_dtoa_r+0x400>
   12656:	4b2e      	ldr	r3, [pc, #184]	; (12710 <_dtoa_r+0x870>)
   12658:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1265c:	ed93 7b00 	vldr	d7, [r3]
   12660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12662:	2b00      	cmp	r3, #0
   12664:	ed8d 7b04 	vstr	d7, [sp, #16]
   12668:	da02      	bge.n	12670 <_dtoa_r+0x7d0>
   1266a:	f1b9 0f00 	cmp.w	r9, #0
   1266e:	d064      	beq.n	1273a <_dtoa_r+0x89a>
   12670:	e9dd 4500 	ldrd	r4, r5, [sp]
   12674:	f8dd a00c 	ldr.w	sl, [sp, #12]
   12678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1267c:	4620      	mov	r0, r4
   1267e:	4629      	mov	r1, r5
   12680:	f7ee f874 	bl	76c <__aeabi_ddiv>
   12684:	f7ee fd60 	bl	1148 <__aeabi_d2iz>
   12688:	4606      	mov	r6, r0
   1268a:	f7ed fedb 	bl	444 <__aeabi_i2d>
   1268e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   12692:	f7ed ff41 	bl	518 <__aeabi_dmul>
   12696:	4602      	mov	r2, r0
   12698:	460b      	mov	r3, r1
   1269a:	4620      	mov	r0, r4
   1269c:	4629      	mov	r1, r5
   1269e:	f106 0430 	add.w	r4, r6, #48	; 0x30
   126a2:	f7ed fd81 	bl	1a8 <__aeabi_dsub>
   126a6:	f80a 4b01 	strb.w	r4, [sl], #1
   126aa:	9c03      	ldr	r4, [sp, #12]
   126ac:	ebaa 0404 	sub.w	r4, sl, r4
   126b0:	45a1      	cmp	r9, r4
   126b2:	4602      	mov	r2, r0
   126b4:	460b      	mov	r3, r1
   126b6:	f040 8082 	bne.w	127be <_dtoa_r+0x91e>
   126ba:	f7ed fd77 	bl	1ac <__adddf3>
   126be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   126c2:	4604      	mov	r4, r0
   126c4:	460d      	mov	r5, r1
   126c6:	f7ee f9d1 	bl	a6c <__aeabi_dcmpgt>
   126ca:	2800      	cmp	r0, #0
   126cc:	d165      	bne.n	1279a <_dtoa_r+0x8fa>
   126ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   126d2:	4620      	mov	r0, r4
   126d4:	4629      	mov	r1, r5
   126d6:	f7ee f9a1 	bl	a1c <__aeabi_dcmpeq>
   126da:	b108      	cbz	r0, 126e0 <_dtoa_r+0x840>
   126dc:	07f3      	lsls	r3, r6, #31
   126de:	d45c      	bmi.n	1279a <_dtoa_r+0x8fa>
   126e0:	9902      	ldr	r1, [sp, #8]
   126e2:	4658      	mov	r0, fp
   126e4:	f00d fd3e 	bl	20164 <_Bfree>
   126e8:	2300      	movs	r3, #0
   126ea:	f88a 3000 	strb.w	r3, [sl]
   126ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   126f0:	3701      	adds	r7, #1
   126f2:	601f      	str	r7, [r3, #0]
   126f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   126f6:	2b00      	cmp	r3, #0
   126f8:	f43f ac20 	beq.w	11f3c <_dtoa_r+0x9c>
   126fc:	f8c3 a000 	str.w	sl, [r3]
   12700:	e41c      	b.n	11f3c <_dtoa_r+0x9c>
   12702:	bf00      	nop
   12704:	40240000 	.word	0x40240000
   12708:	401c0000 	.word	0x401c0000
   1270c:	40140000 	.word	0x40140000
   12710:	00028170 	.word	0x00028170
   12714:	3fe00000 	.word	0x3fe00000
   12718:	3ff00000 	.word	0x3ff00000
   1271c:	4ba2      	ldr	r3, [pc, #648]	; (129a8 <_dtoa_r+0xb08>)
   1271e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   12722:	ed93 7b00 	vldr	d7, [r3]
   12726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12728:	2b00      	cmp	r3, #0
   1272a:	ed8d 7b04 	vstr	d7, [sp, #16]
   1272e:	da9f      	bge.n	12670 <_dtoa_r+0x7d0>
   12730:	f1b9 0f00 	cmp.w	r9, #0
   12734:	dc9c      	bgt.n	12670 <_dtoa_r+0x7d0>
   12736:	f47f aec3 	bne.w	124c0 <_dtoa_r+0x620>
   1273a:	4b9c      	ldr	r3, [pc, #624]	; (129ac <_dtoa_r+0xb0c>)
   1273c:	2200      	movs	r2, #0
   1273e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   12742:	f7ed fee9 	bl	518 <__aeabi_dmul>
   12746:	e9dd 2300 	ldrd	r2, r3, [sp]
   1274a:	f7ee f985 	bl	a58 <__aeabi_dcmpge>
   1274e:	4604      	mov	r4, r0
   12750:	2800      	cmp	r0, #0
   12752:	f47f aeb5 	bne.w	124c0 <_dtoa_r+0x620>
   12756:	463e      	mov	r6, r7
   12758:	4625      	mov	r5, r4
   1275a:	e0b4      	b.n	128c6 <_dtoa_r+0xa26>
   1275c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   12760:	e9cd 3400 	strd	r3, r4, [sp]
   12764:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12766:	2b00      	cmp	r3, #0
   12768:	db01      	blt.n	1276e <_dtoa_r+0x8ce>
   1276a:	2f0e      	cmp	r7, #14
   1276c:	ddd6      	ble.n	1271c <_dtoa_r+0x87c>
   1276e:	9a08      	ldr	r2, [sp, #32]
   12770:	2a01      	cmp	r2, #1
   12772:	dc36      	bgt.n	127e2 <_dtoa_r+0x942>
   12774:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12776:	b382      	cbz	r2, 127da <_dtoa_r+0x93a>
   12778:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1277c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1277e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   12782:	9a06      	ldr	r2, [sp, #24]
   12784:	441a      	add	r2, r3
   12786:	9206      	str	r2, [sp, #24]
   12788:	9a07      	ldr	r2, [sp, #28]
   1278a:	2101      	movs	r1, #1
   1278c:	441a      	add	r2, r3
   1278e:	4658      	mov	r0, fp
   12790:	9207      	str	r2, [sp, #28]
   12792:	f00d fd4f 	bl	20234 <__i2b>
   12796:	4605      	mov	r5, r0
   12798:	e586      	b.n	122a8 <_dtoa_r+0x408>
   1279a:	463e      	mov	r6, r7
   1279c:	4653      	mov	r3, sl
   1279e:	469a      	mov	sl, r3
   127a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   127a4:	2a39      	cmp	r2, #57	; 0x39
   127a6:	d106      	bne.n	127b6 <_dtoa_r+0x916>
   127a8:	9a03      	ldr	r2, [sp, #12]
   127aa:	429a      	cmp	r2, r3
   127ac:	d1f7      	bne.n	1279e <_dtoa_r+0x8fe>
   127ae:	9903      	ldr	r1, [sp, #12]
   127b0:	2230      	movs	r2, #48	; 0x30
   127b2:	3601      	adds	r6, #1
   127b4:	700a      	strb	r2, [r1, #0]
   127b6:	781a      	ldrb	r2, [r3, #0]
   127b8:	3201      	adds	r2, #1
   127ba:	701a      	strb	r2, [r3, #0]
   127bc:	e738      	b.n	12630 <_dtoa_r+0x790>
   127be:	4b7c      	ldr	r3, [pc, #496]	; (129b0 <_dtoa_r+0xb10>)
   127c0:	2200      	movs	r2, #0
   127c2:	f7ed fea9 	bl	518 <__aeabi_dmul>
   127c6:	2200      	movs	r2, #0
   127c8:	2300      	movs	r3, #0
   127ca:	4604      	mov	r4, r0
   127cc:	460d      	mov	r5, r1
   127ce:	f7ee f925 	bl	a1c <__aeabi_dcmpeq>
   127d2:	2800      	cmp	r0, #0
   127d4:	f43f af50 	beq.w	12678 <_dtoa_r+0x7d8>
   127d8:	e782      	b.n	126e0 <_dtoa_r+0x840>
   127da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   127dc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   127e0:	e7cc      	b.n	1277c <_dtoa_r+0x8dc>
   127e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127e4:	f109 34ff 	add.w	r4, r9, #4294967295
   127e8:	42a3      	cmp	r3, r4
   127ea:	db08      	blt.n	127fe <_dtoa_r+0x95e>
   127ec:	f1b9 0f00 	cmp.w	r9, #0
   127f0:	eba3 0404 	sub.w	r4, r3, r4
   127f4:	db0e      	blt.n	12814 <_dtoa_r+0x974>
   127f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   127fa:	464b      	mov	r3, r9
   127fc:	e7c1      	b.n	12782 <_dtoa_r+0x8e2>
   127fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12800:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12802:	9409      	str	r4, [sp, #36]	; 0x24
   12804:	1ae3      	subs	r3, r4, r3
   12806:	441a      	add	r2, r3
   12808:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1280c:	9210      	str	r2, [sp, #64]	; 0x40
   1280e:	464b      	mov	r3, r9
   12810:	2400      	movs	r4, #0
   12812:	e7b6      	b.n	12782 <_dtoa_r+0x8e2>
   12814:	9b06      	ldr	r3, [sp, #24]
   12816:	eba3 0809 	sub.w	r8, r3, r9
   1281a:	2300      	movs	r3, #0
   1281c:	e7b1      	b.n	12782 <_dtoa_r+0x8e2>
   1281e:	9e02      	ldr	r6, [sp, #8]
   12820:	e571      	b.n	12306 <_dtoa_r+0x466>
   12822:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12824:	9902      	ldr	r1, [sp, #8]
   12826:	e570      	b.n	1230a <_dtoa_r+0x46a>
   12828:	9602      	str	r6, [sp, #8]
   1282a:	e572      	b.n	12312 <_dtoa_r+0x472>
   1282c:	9b08      	ldr	r3, [sp, #32]
   1282e:	2b01      	cmp	r3, #1
   12830:	dc17      	bgt.n	12862 <_dtoa_r+0x9c2>
   12832:	9b00      	ldr	r3, [sp, #0]
   12834:	b9ab      	cbnz	r3, 12862 <_dtoa_r+0x9c2>
   12836:	9b01      	ldr	r3, [sp, #4]
   12838:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1283c:	b99b      	cbnz	r3, 12866 <_dtoa_r+0x9c6>
   1283e:	9b01      	ldr	r3, [sp, #4]
   12840:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   12844:	0d36      	lsrs	r6, r6, #20
   12846:	0536      	lsls	r6, r6, #20
   12848:	b136      	cbz	r6, 12858 <_dtoa_r+0x9b8>
   1284a:	9b06      	ldr	r3, [sp, #24]
   1284c:	3301      	adds	r3, #1
   1284e:	9306      	str	r3, [sp, #24]
   12850:	9b07      	ldr	r3, [sp, #28]
   12852:	3301      	adds	r3, #1
   12854:	9307      	str	r3, [sp, #28]
   12856:	2601      	movs	r6, #1
   12858:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1285a:	2b00      	cmp	r3, #0
   1285c:	f47f ad70 	bne.w	12340 <_dtoa_r+0x4a0>
   12860:	9610      	str	r6, [sp, #64]	; 0x40
   12862:	2001      	movs	r0, #1
   12864:	e575      	b.n	12352 <_dtoa_r+0x4b2>
   12866:	2600      	movs	r6, #0
   12868:	e7f6      	b.n	12858 <_dtoa_r+0x9b8>
   1286a:	f43f ad86 	beq.w	1237a <_dtoa_r+0x4da>
   1286e:	9a06      	ldr	r2, [sp, #24]
   12870:	331c      	adds	r3, #28
   12872:	441a      	add	r2, r3
   12874:	9206      	str	r2, [sp, #24]
   12876:	9a07      	ldr	r2, [sp, #28]
   12878:	441a      	add	r2, r3
   1287a:	4498      	add	r8, r3
   1287c:	9207      	str	r2, [sp, #28]
   1287e:	e57c      	b.n	1237a <_dtoa_r+0x4da>
   12880:	4603      	mov	r3, r0
   12882:	e7f4      	b.n	1286e <_dtoa_r+0x9ce>
   12884:	9b04      	ldr	r3, [sp, #16]
   12886:	2b00      	cmp	r3, #0
   12888:	dc2b      	bgt.n	128e2 <_dtoa_r+0xa42>
   1288a:	9b08      	ldr	r3, [sp, #32]
   1288c:	2b02      	cmp	r3, #2
   1288e:	dc09      	bgt.n	128a4 <_dtoa_r+0xa04>
   12890:	e027      	b.n	128e2 <_dtoa_r+0xa42>
   12892:	f1b9 0f00 	cmp.w	r9, #0
   12896:	dc1d      	bgt.n	128d4 <_dtoa_r+0xa34>
   12898:	9b08      	ldr	r3, [sp, #32]
   1289a:	2b02      	cmp	r3, #2
   1289c:	dd1a      	ble.n	128d4 <_dtoa_r+0xa34>
   1289e:	f8cd 9010 	str.w	r9, [sp, #16]
   128a2:	463e      	mov	r6, r7
   128a4:	9b04      	ldr	r3, [sp, #16]
   128a6:	2b00      	cmp	r3, #0
   128a8:	f47f ae0c 	bne.w	124c4 <_dtoa_r+0x624>
   128ac:	4621      	mov	r1, r4
   128ae:	2205      	movs	r2, #5
   128b0:	4658      	mov	r0, fp
   128b2:	f00d fc79 	bl	201a8 <__multadd>
   128b6:	4601      	mov	r1, r0
   128b8:	4604      	mov	r4, r0
   128ba:	9802      	ldr	r0, [sp, #8]
   128bc:	f014 ffa1 	bl	27802 <__mcmp>
   128c0:	2800      	cmp	r0, #0
   128c2:	f77f adff 	ble.w	124c4 <_dtoa_r+0x624>
   128c6:	f8dd a00c 	ldr.w	sl, [sp, #12]
   128ca:	2331      	movs	r3, #49	; 0x31
   128cc:	f80a 3b01 	strb.w	r3, [sl], #1
   128d0:	3601      	adds	r6, #1
   128d2:	e5fb      	b.n	124cc <_dtoa_r+0x62c>
   128d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   128d6:	f8cd 9010 	str.w	r9, [sp, #16]
   128da:	463e      	mov	r6, r7
   128dc:	2b00      	cmp	r3, #0
   128de:	f47f ad83 	bne.w	123e8 <_dtoa_r+0x548>
   128e2:	9f03      	ldr	r7, [sp, #12]
   128e4:	9802      	ldr	r0, [sp, #8]
   128e6:	4621      	mov	r1, r4
   128e8:	f014 feb4 	bl	27654 <quorem>
   128ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
   128f0:	f807 9b01 	strb.w	r9, [r7], #1
   128f4:	9b03      	ldr	r3, [sp, #12]
   128f6:	9a04      	ldr	r2, [sp, #16]
   128f8:	1afb      	subs	r3, r7, r3
   128fa:	429a      	cmp	r2, r3
   128fc:	f340 80cb 	ble.w	12a96 <_dtoa_r+0xbf6>
   12900:	9902      	ldr	r1, [sp, #8]
   12902:	2300      	movs	r3, #0
   12904:	220a      	movs	r2, #10
   12906:	4658      	mov	r0, fp
   12908:	f00d fc4e 	bl	201a8 <__multadd>
   1290c:	9002      	str	r0, [sp, #8]
   1290e:	e7e9      	b.n	128e4 <_dtoa_r+0xa44>
   12910:	692a      	ldr	r2, [r5, #16]
   12912:	3202      	adds	r2, #2
   12914:	0092      	lsls	r2, r2, #2
   12916:	f105 010c 	add.w	r1, r5, #12
   1291a:	300c      	adds	r0, #12
   1291c:	f014 fd4e 	bl	273bc <memcpy>
   12920:	2201      	movs	r2, #1
   12922:	4639      	mov	r1, r7
   12924:	4658      	mov	r0, fp
   12926:	f00d fd9f 	bl	20468 <__lshift>
   1292a:	9b03      	ldr	r3, [sp, #12]
   1292c:	f103 0a01 	add.w	sl, r3, #1
   12930:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   12934:	4413      	add	r3, r2
   12936:	9307      	str	r3, [sp, #28]
   12938:	9b00      	ldr	r3, [sp, #0]
   1293a:	f003 0301 	and.w	r3, r3, #1
   1293e:	46a8      	mov	r8, r5
   12940:	9309      	str	r3, [sp, #36]	; 0x24
   12942:	4605      	mov	r5, r0
   12944:	f10a 33ff 	add.w	r3, sl, #4294967295
   12948:	4621      	mov	r1, r4
   1294a:	9802      	ldr	r0, [sp, #8]
   1294c:	9304      	str	r3, [sp, #16]
   1294e:	f014 fe81 	bl	27654 <quorem>
   12952:	4641      	mov	r1, r8
   12954:	9006      	str	r0, [sp, #24]
   12956:	f100 0930 	add.w	r9, r0, #48	; 0x30
   1295a:	9802      	ldr	r0, [sp, #8]
   1295c:	f014 ff51 	bl	27802 <__mcmp>
   12960:	462a      	mov	r2, r5
   12962:	4621      	mov	r1, r4
   12964:	4607      	mov	r7, r0
   12966:	4658      	mov	r0, fp
   12968:	f00d fdea 	bl	20540 <__mdiff>
   1296c:	68c2      	ldr	r2, [r0, #12]
   1296e:	4601      	mov	r1, r0
   12970:	b302      	cbz	r2, 129b4 <_dtoa_r+0xb14>
   12972:	4658      	mov	r0, fp
   12974:	f00d fbf6 	bl	20164 <_Bfree>
   12978:	2f00      	cmp	r7, #0
   1297a:	da3a      	bge.n	129f2 <_dtoa_r+0xb52>
   1297c:	9902      	ldr	r1, [sp, #8]
   1297e:	2201      	movs	r2, #1
   12980:	4658      	mov	r0, fp
   12982:	f00d fd71 	bl	20468 <__lshift>
   12986:	4621      	mov	r1, r4
   12988:	9002      	str	r0, [sp, #8]
   1298a:	f014 ff3a 	bl	27802 <__mcmp>
   1298e:	2800      	cmp	r0, #0
   12990:	dc03      	bgt.n	1299a <_dtoa_r+0xafa>
   12992:	d129      	bne.n	129e8 <_dtoa_r+0xb48>
   12994:	f019 0f01 	tst.w	r9, #1
   12998:	d026      	beq.n	129e8 <_dtoa_r+0xb48>
   1299a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   1299e:	d11d      	bne.n	129dc <_dtoa_r+0xb3c>
   129a0:	e032      	b.n	12a08 <_dtoa_r+0xb68>
   129a2:	4628      	mov	r0, r5
   129a4:	e7c1      	b.n	1292a <_dtoa_r+0xa8a>
   129a6:	bf00      	nop
   129a8:	00028170 	.word	0x00028170
   129ac:	40140000 	.word	0x40140000
   129b0:	40240000 	.word	0x40240000
   129b4:	900a      	str	r0, [sp, #40]	; 0x28
   129b6:	9802      	ldr	r0, [sp, #8]
   129b8:	f014 ff23 	bl	27802 <__mcmp>
   129bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   129be:	900c      	str	r0, [sp, #48]	; 0x30
   129c0:	4658      	mov	r0, fp
   129c2:	f00d fbcf 	bl	20164 <_Bfree>
   129c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   129c8:	bb5a      	cbnz	r2, 12a22 <_dtoa_r+0xb82>
   129ca:	9b08      	ldr	r3, [sp, #32]
   129cc:	b953      	cbnz	r3, 129e4 <_dtoa_r+0xb44>
   129ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   129d0:	b943      	cbnz	r3, 129e4 <_dtoa_r+0xb44>
   129d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   129d6:	d017      	beq.n	12a08 <_dtoa_r+0xb68>
   129d8:	2f00      	cmp	r7, #0
   129da:	dd05      	ble.n	129e8 <_dtoa_r+0xb48>
   129dc:	9b06      	ldr	r3, [sp, #24]
   129de:	f103 0931 	add.w	r9, r3, #49	; 0x31
   129e2:	e001      	b.n	129e8 <_dtoa_r+0xb48>
   129e4:	2f00      	cmp	r7, #0
   129e6:	da2a      	bge.n	12a3e <_dtoa_r+0xb9e>
   129e8:	f8dd a010 	ldr.w	sl, [sp, #16]
   129ec:	f80a 9b01 	strb.w	r9, [sl], #1
   129f0:	e56e      	b.n	124d0 <_dtoa_r+0x630>
   129f2:	9b08      	ldr	r3, [sp, #32]
   129f4:	433b      	orrs	r3, r7
   129f6:	d104      	bne.n	12a02 <_dtoa_r+0xb62>
   129f8:	9b00      	ldr	r3, [sp, #0]
   129fa:	f003 0301 	and.w	r3, r3, #1
   129fe:	2b00      	cmp	r3, #0
   12a00:	d0bc      	beq.n	1297c <_dtoa_r+0xadc>
   12a02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   12a06:	d136      	bne.n	12a76 <_dtoa_r+0xbd6>
   12a08:	9f04      	ldr	r7, [sp, #16]
   12a0a:	2339      	movs	r3, #57	; 0x39
   12a0c:	f807 3b01 	strb.w	r3, [r7], #1
   12a10:	46ba      	mov	sl, r7
   12a12:	3f01      	subs	r7, #1
   12a14:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   12a18:	2b39      	cmp	r3, #57	; 0x39
   12a1a:	d05b      	beq.n	12ad4 <_dtoa_r+0xc34>
   12a1c:	3301      	adds	r3, #1
   12a1e:	703b      	strb	r3, [r7, #0]
   12a20:	e556      	b.n	124d0 <_dtoa_r+0x630>
   12a22:	2f00      	cmp	r7, #0
   12a24:	db06      	blt.n	12a34 <_dtoa_r+0xb94>
   12a26:	9b08      	ldr	r3, [sp, #32]
   12a28:	433b      	orrs	r3, r7
   12a2a:	d106      	bne.n	12a3a <_dtoa_r+0xb9a>
   12a2c:	9b00      	ldr	r3, [sp, #0]
   12a2e:	f003 0301 	and.w	r3, r3, #1
   12a32:	b913      	cbnz	r3, 12a3a <_dtoa_r+0xb9a>
   12a34:	2a00      	cmp	r2, #0
   12a36:	dca1      	bgt.n	1297c <_dtoa_r+0xadc>
   12a38:	e7d6      	b.n	129e8 <_dtoa_r+0xb48>
   12a3a:	2a00      	cmp	r2, #0
   12a3c:	dce1      	bgt.n	12a02 <_dtoa_r+0xb62>
   12a3e:	9b07      	ldr	r3, [sp, #28]
   12a40:	f80a 9c01 	strb.w	r9, [sl, #-1]
   12a44:	4553      	cmp	r3, sl
   12a46:	4657      	mov	r7, sl
   12a48:	d02f      	beq.n	12aaa <_dtoa_r+0xc0a>
   12a4a:	9902      	ldr	r1, [sp, #8]
   12a4c:	2300      	movs	r3, #0
   12a4e:	220a      	movs	r2, #10
   12a50:	4658      	mov	r0, fp
   12a52:	f00d fba9 	bl	201a8 <__multadd>
   12a56:	45a8      	cmp	r8, r5
   12a58:	9002      	str	r0, [sp, #8]
   12a5a:	f04f 0300 	mov.w	r3, #0
   12a5e:	f04f 020a 	mov.w	r2, #10
   12a62:	4641      	mov	r1, r8
   12a64:	4658      	mov	r0, fp
   12a66:	d10b      	bne.n	12a80 <_dtoa_r+0xbe0>
   12a68:	f00d fb9e 	bl	201a8 <__multadd>
   12a6c:	4680      	mov	r8, r0
   12a6e:	4605      	mov	r5, r0
   12a70:	f10a 0a01 	add.w	sl, sl, #1
   12a74:	e766      	b.n	12944 <_dtoa_r+0xaa4>
   12a76:	f8dd a010 	ldr.w	sl, [sp, #16]
   12a7a:	f109 0901 	add.w	r9, r9, #1
   12a7e:	e7b5      	b.n	129ec <_dtoa_r+0xb4c>
   12a80:	f00d fb92 	bl	201a8 <__multadd>
   12a84:	4629      	mov	r1, r5
   12a86:	4680      	mov	r8, r0
   12a88:	2300      	movs	r3, #0
   12a8a:	220a      	movs	r2, #10
   12a8c:	4658      	mov	r0, fp
   12a8e:	f00d fb8b 	bl	201a8 <__multadd>
   12a92:	4605      	mov	r5, r0
   12a94:	e7ec      	b.n	12a70 <_dtoa_r+0xbd0>
   12a96:	9b04      	ldr	r3, [sp, #16]
   12a98:	2b00      	cmp	r3, #0
   12a9a:	bfc8      	it	gt
   12a9c:	461f      	movgt	r7, r3
   12a9e:	9b03      	ldr	r3, [sp, #12]
   12aa0:	bfd8      	it	le
   12aa2:	2701      	movle	r7, #1
   12aa4:	441f      	add	r7, r3
   12aa6:	f04f 0800 	mov.w	r8, #0
   12aaa:	9902      	ldr	r1, [sp, #8]
   12aac:	2201      	movs	r2, #1
   12aae:	4658      	mov	r0, fp
   12ab0:	f00d fcda 	bl	20468 <__lshift>
   12ab4:	4621      	mov	r1, r4
   12ab6:	9002      	str	r0, [sp, #8]
   12ab8:	f014 fea3 	bl	27802 <__mcmp>
   12abc:	2800      	cmp	r0, #0
   12abe:	dca7      	bgt.n	12a10 <_dtoa_r+0xb70>
   12ac0:	d102      	bne.n	12ac8 <_dtoa_r+0xc28>
   12ac2:	f019 0f01 	tst.w	r9, #1
   12ac6:	d1a3      	bne.n	12a10 <_dtoa_r+0xb70>
   12ac8:	46ba      	mov	sl, r7
   12aca:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   12ace:	2b30      	cmp	r3, #48	; 0x30
   12ad0:	d0fa      	beq.n	12ac8 <_dtoa_r+0xc28>
   12ad2:	e4fd      	b.n	124d0 <_dtoa_r+0x630>
   12ad4:	9b03      	ldr	r3, [sp, #12]
   12ad6:	42bb      	cmp	r3, r7
   12ad8:	d19a      	bne.n	12a10 <_dtoa_r+0xb70>
   12ada:	9a03      	ldr	r2, [sp, #12]
   12adc:	2331      	movs	r3, #49	; 0x31
   12ade:	3601      	adds	r6, #1
   12ae0:	7013      	strb	r3, [r2, #0]
   12ae2:	e4f5      	b.n	124d0 <_dtoa_r+0x630>
   12ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   12ae6:	2b00      	cmp	r3, #0
   12ae8:	f47f aa23 	bne.w	11f32 <_dtoa_r+0x92>
   12aec:	4b01      	ldr	r3, [pc, #4]	; (12af4 <_dtoa_r+0xc54>)
   12aee:	f7ff ba42 	b.w	11f76 <_dtoa_r+0xd6>
   12af2:	bf00      	nop
   12af4:	0002abb7 	.word	0x0002abb7

00012af8 <main>:
		k_sleep(K_MSEC(NOTIFY_INTERVAL));
	}
}

void main(void)
{
   12af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12afc:	b086      	sub	sp, #24
	LOG_ERR("Error log level enabled\n");
   12afe:	466d      	mov	r5, sp
{
   12b00:	af00      	add	r7, sp, #0
	LOG_ERR("Error log level enabled\n");
   12b02:	4b36      	ldr	r3, [pc, #216]	; (12bdc <main+0xe4>)
   12b04:	617b      	str	r3, [r7, #20]
   12b06:	2402      	movs	r4, #2
   12b08:	613c      	str	r4, [r7, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   12b0a:	4835      	ldr	r0, [pc, #212]	; (12be0 <main+0xe8>)
   12b0c:	2300      	movs	r3, #0
   12b0e:	f107 0210 	add.w	r2, r7, #16
   12b12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12b16:	f001 fa83 	bl	14020 <z_impl_z_log_msg_static_create>
	LOG_WRN("Warning log level enabled\n");
   12b1a:	4b32      	ldr	r3, [pc, #200]	; (12be4 <main+0xec>)
   12b1c:	e9c7 4304 	strd	r4, r3, [r7, #16]
   12b20:	482f      	ldr	r0, [pc, #188]	; (12be0 <main+0xe8>)
   12b22:	2300      	movs	r3, #0
   12b24:	f107 0210 	add.w	r2, r7, #16
   12b28:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12b2c:	f001 fa78 	bl	14020 <z_impl_z_log_msg_static_create>
	LOG_INF("Info log level enabled\n");
   12b30:	4b2d      	ldr	r3, [pc, #180]	; (12be8 <main+0xf0>)
   12b32:	e9c7 4304 	strd	r4, r3, [r7, #16]
   12b36:	482a      	ldr	r0, [pc, #168]	; (12be0 <main+0xe8>)
   12b38:	f107 0210 	add.w	r2, r7, #16
   12b3c:	2300      	movs	r3, #0
   12b3e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12b42:	f001 fa6d 	bl	14020 <z_impl_z_log_msg_static_create>
	LOG_DBG("Debug log level enabled\n\n");
   12b46:	b088      	sub	sp, #32
   12b48:	466a      	mov	r2, sp
   12b4a:	4b28      	ldr	r3, [pc, #160]	; (12bec <main+0xf4>)
   12b4c:	6153      	str	r3, [r2, #20]
   12b4e:	2603      	movs	r6, #3
   12b50:	4b27      	ldr	r3, [pc, #156]	; (12bf0 <main+0xf8>)
   12b52:	6193      	str	r3, [r2, #24]
   12b54:	f842 6f10 	str.w	r6, [r2, #16]!
   12b58:	4821      	ldr	r0, [pc, #132]	; (12be0 <main+0xe8>)
   12b5a:	2300      	movs	r3, #0
   12b5c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
   12b60:	f001 fa5e 	bl	14020 <z_impl_z_log_msg_static_create>
   12b64:	46ad      	mov	sp, r5

	int blink_status = 0;
	int err;

	LOG_INF("Starting MOB unit application \n");
   12b66:	4b23      	ldr	r3, [pc, #140]	; (12bf4 <main+0xfc>)
   12b68:	e9c7 4304 	strd	r4, r3, [r7, #16]
   12b6c:	481c      	ldr	r0, [pc, #112]	; (12be0 <main+0xe8>)
   12b6e:	2300      	movs	r3, #0
   12b70:	f107 0210 	add.w	r2, r7, #16
   12b74:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12b78:	f001 fa52 	bl	14020 <z_impl_z_log_msg_static_create>

	err = dk_leds_init();
   12b7c:	f009 fa66 	bl	1c04c <dk_leds_init>
	if (err)
   12b80:	b188      	cbz	r0, 12ba6 <main+0xae>
	{
		LOG_ERR("LEDs init failed (err %d)\n", err);
   12b82:	b088      	sub	sp, #32
   12b84:	466a      	mov	r2, sp
   12b86:	4b1c      	ldr	r3, [pc, #112]	; (12bf8 <main+0x100>)
   12b88:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12b8c:	f842 6f10 	str.w	r6, [r2, #16]!
   12b90:	4813      	ldr	r0, [pc, #76]	; (12be0 <main+0xe8>)
   12b92:	2300      	movs	r3, #0
   12b94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12b98:	f001 fa42 	bl	14020 <z_impl_z_log_msg_static_create>
	for (;;)
	{
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   12b9c:	3718      	adds	r7, #24
   12b9e:	46ad      	mov	sp, r5
   12ba0:	46bd      	mov	sp, r7
   12ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = gss_init(&app_callbacks);
   12ba6:	4815      	ldr	r0, [pc, #84]	; (12bfc <main+0x104>)
   12ba8:	f000 f950 	bl	12e4c <gss_init>
	if (err)
   12bac:	4604      	mov	r4, r0
   12bae:	b128      	cbz	r0, 12bbc <main+0xc4>
		LOG_ERR("Failed to init GSS (err:%d)\n", err);
   12bb0:	b088      	sub	sp, #32
   12bb2:	466a      	mov	r2, sp
   12bb4:	4b12      	ldr	r3, [pc, #72]	; (12c00 <main+0x108>)
   12bb6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12bba:	e7e7      	b.n	12b8c <main+0x94>
	ble_init(&connection_callbacks);
   12bbc:	4811      	ldr	r0, [pc, #68]	; (12c04 <main+0x10c>)
   12bbe:	f000 f9bb 	bl	12f38 <ble_init>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   12bc2:	3401      	adds	r4, #1
   12bc4:	f004 0101 	and.w	r1, r4, #1
   12bc8:	2000      	movs	r0, #0
   12bca:	f009 fa69 	bl	1c0a0 <dk_set_led>
	return z_impl_k_sleep(timeout);
   12bce:	2100      	movs	r1, #0
   12bd0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12bd4:	f00b ffa8 	bl	1eb28 <z_impl_k_sleep>
	for (;;)
   12bd8:	e7f3      	b.n	12bc2 <main+0xca>
   12bda:	bf00      	nop
   12bdc:	00028c20 	.word	0x00028c20
   12be0:	0002802c 	.word	0x0002802c
   12be4:	00028c39 	.word	0x00028c39
   12be8:	00028c54 	.word	0x00028c54
   12bec:	00028c6c 	.word	0x00028c6c
   12bf0:	00028ce2 	.word	0x00028ce2
   12bf4:	00028c8a 	.word	0x00028c8a
   12bf8:	00028caa 	.word	0x00028caa
   12bfc:	200004e0 	.word	0x200004e0
   12c00:	00028cc5 	.word	0x00028cc5
   12c04:	200004e8 	.word	0x200004e8

00012c08 <gss_ccc_gps_changed>:
}

static void gss_ccc_gps_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	indicate_enabled_gps = (value == BT_GATT_CCC_INDICATE);
   12c08:	1e8b      	subs	r3, r1, #2
   12c0a:	4259      	negs	r1, r3
   12c0c:	4159      	adcs	r1, r3
   12c0e:	4b01      	ldr	r3, [pc, #4]	; (12c14 <gss_ccc_gps_changed+0xc>)
   12c10:	7019      	strb	r1, [r3, #0]
}
   12c12:	4770      	bx	lr
   12c14:	20004495 	.word	0x20004495

00012c18 <gss_ccc_mob_changed>:
static void gss_ccc_mob_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	indicate_enabled_mob = (value == BT_GATT_CCC_INDICATE);
   12c18:	1e8b      	subs	r3, r1, #2
   12c1a:	4259      	negs	r1, r3
   12c1c:	4159      	adcs	r1, r3
   12c1e:	4b01      	ldr	r3, [pc, #4]	; (12c24 <gss_ccc_mob_changed+0xc>)
   12c20:	7019      	strb	r1, [r3, #0]
}
   12c22:	4770      	bx	lr
   12c24:	20004494 	.word	0x20004494

00012c28 <read_gps_data>:
{
   12c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12c2c:	b08a      	sub	sp, #40	; 0x28
	if (attr->user_data != NULL)
   12c2e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   12c32:	af04      	add	r7, sp, #16
   12c34:	4606      	mov	r6, r0
   12c36:	460d      	mov	r5, r1
   12c38:	4690      	mov	r8, r2
   12c3a:	4699      	mov	r9, r3
	if (attr->user_data != NULL)
   12c3c:	f1ba 0f00 	cmp.w	sl, #0
   12c40:	d104      	bne.n	12c4c <read_gps_data+0x24>
		return 0;
   12c42:	2000      	movs	r0, #0
}
   12c44:	3718      	adds	r7, #24
   12c46:	46bd      	mov	sp, r7
   12c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
   12c4c:	466c      	mov	r4, sp
   12c4e:	b08a      	sub	sp, #40	; 0x28
   12c50:	8a0b      	ldrh	r3, [r1, #16]
   12c52:	aa04      	add	r2, sp, #16
   12c54:	4915      	ldr	r1, [pc, #84]	; (12cac <read_gps_data+0x84>)
   12c56:	6151      	str	r1, [r2, #20]
   12c58:	4915      	ldr	r1, [pc, #84]	; (12cb0 <read_gps_data+0x88>)
   12c5a:	6210      	str	r0, [r2, #32]
   12c5c:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12c60:	2305      	movs	r3, #5
   12c62:	f842 3f10 	str.w	r3, [r2, #16]!
   12c66:	2300      	movs	r3, #0
   12c68:	4812      	ldr	r0, [pc, #72]	; (12cb4 <read_gps_data+0x8c>)
   12c6a:	f44f 5124 	mov.w	r1, #10496	; 0x2900
   12c6e:	f001 f9d7 	bl	14020 <z_impl_z_log_msg_static_create>
	if (gss_cb.gps_cb)
   12c72:	4b11      	ldr	r3, [pc, #68]	; (12cb8 <read_gps_data+0x90>)
   12c74:	681b      	ldr	r3, [r3, #0]
   12c76:	46a5      	mov	sp, r4
   12c78:	2b00      	cmp	r3, #0
   12c7a:	d0e2      	beq.n	12c42 <read_gps_data+0x1a>
		gps_data = gss_cb.gps_cb();
   12c7c:	4638      	mov	r0, r7
   12c7e:	463c      	mov	r4, r7
   12c80:	4798      	blx	r3
   12c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12c84:	f8df c034 	ldr.w	ip, [pc, #52]	; 12cbc <read_gps_data+0x94>
   12c88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12c8c:	e894 0003 	ldmia.w	r4, {r0, r1}
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   12c90:	2318      	movs	r3, #24
		gps_data = gss_cb.gps_cb();
   12c92:	e88c 0003 	stmia.w	ip, {r0, r1}
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   12c96:	e9cd a301 	strd	sl, r3, [sp, #4]
   12c9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   12c9c:	9300      	str	r3, [sp, #0]
   12c9e:	4642      	mov	r2, r8
   12ca0:	464b      	mov	r3, r9
   12ca2:	4629      	mov	r1, r5
   12ca4:	4630      	mov	r0, r6
   12ca6:	f013 f890 	bl	25dca <bt_gatt_attr_read>
   12caa:	e7cb      	b.n	12c44 <read_gps_data+0x1c>
   12cac:	00028d02 	.word	0x00028d02
   12cb0:	00028dac 	.word	0x00028dac
   12cb4:	0002800c 	.word	0x0002800c
   12cb8:	20003010 	.word	0x20003010
   12cbc:	20001a78 	.word	0x20001a78

00012cc0 <indicate_ended_gps_cb>:
{
   12cc0:	b580      	push	{r7, lr}
   12cc2:	af00      	add	r7, sp, #0
	LOG_DBG("GPS indication ended.\n");
   12cc4:	b088      	sub	sp, #32
   12cc6:	466a      	mov	r2, sp
   12cc8:	4b07      	ldr	r3, [pc, #28]	; (12ce8 <indicate_ended_gps_cb+0x28>)
   12cca:	6153      	str	r3, [r2, #20]
   12ccc:	4b07      	ldr	r3, [pc, #28]	; (12cec <indicate_ended_gps_cb+0x2c>)
   12cce:	6193      	str	r3, [r2, #24]
   12cd0:	2303      	movs	r3, #3
   12cd2:	f842 3f10 	str.w	r3, [r2, #16]!
   12cd6:	4806      	ldr	r0, [pc, #24]	; (12cf0 <indicate_ended_gps_cb+0x30>)
   12cd8:	2300      	movs	r3, #0
   12cda:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
   12cde:	f001 f99f 	bl	14020 <z_impl_z_log_msg_static_create>
}
   12ce2:	46bd      	mov	sp, r7
   12ce4:	bd80      	pop	{r7, pc}
   12ce6:	bf00      	nop
   12ce8:	00028d2b 	.word	0x00028d2b
   12cec:	00028e16 	.word	0x00028e16
   12cf0:	0002800c 	.word	0x0002800c

00012cf4 <indicate_started_gps_cb>:
{
   12cf4:	b580      	push	{r7, lr}
	LOG_DBG("GPS indication started %s\n", err != 0U ? "fail" : "success");
   12cf6:	490d      	ldr	r1, [pc, #52]	; (12d2c <indicate_started_gps_cb+0x38>)
   12cf8:	4b0d      	ldr	r3, [pc, #52]	; (12d30 <indicate_started_gps_cb+0x3c>)
{
   12cfa:	af00      	add	r7, sp, #0
	LOG_DBG("GPS indication started %s\n", err != 0U ? "fail" : "success");
   12cfc:	b08a      	sub	sp, #40	; 0x28
   12cfe:	2a00      	cmp	r2, #0
   12d00:	bf18      	it	ne
   12d02:	460b      	movne	r3, r1
   12d04:	466a      	mov	r2, sp
   12d06:	490b      	ldr	r1, [pc, #44]	; (12d34 <indicate_started_gps_cb+0x40>)
   12d08:	6151      	str	r1, [r2, #20]
   12d0a:	490b      	ldr	r1, [pc, #44]	; (12d38 <indicate_started_gps_cb+0x44>)
   12d0c:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12d10:	f240 3301 	movw	r3, #769	; 0x301
   12d14:	8413      	strh	r3, [r2, #32]
   12d16:	4b09      	ldr	r3, [pc, #36]	; (12d3c <indicate_started_gps_cb+0x48>)
   12d18:	f842 3f10 	str.w	r3, [r2, #16]!
   12d1c:	4808      	ldr	r0, [pc, #32]	; (12d40 <indicate_started_gps_cb+0x4c>)
   12d1e:	2300      	movs	r3, #0
   12d20:	f44f 5114 	mov.w	r1, #9472	; 0x2500
   12d24:	f001 f97c 	bl	14020 <z_impl_z_log_msg_static_create>
}
   12d28:	46bd      	mov	sp, r7
   12d2a:	bd80      	pop	{r7, pc}
   12d2c:	00028d46 	.word	0x00028d46
   12d30:	00028d4b 	.word	0x00028d4b
   12d34:	00028d53 	.word	0x00028d53
   12d38:	00028dfe 	.word	0x00028dfe
   12d3c:	01000004 	.word	0x01000004
   12d40:	0002800c 	.word	0x0002800c

00012d44 <indicate_ended_mob_cb>:
{
   12d44:	b580      	push	{r7, lr}
   12d46:	af00      	add	r7, sp, #0
	LOG_DBG("MOB indication ended.\n");
   12d48:	b088      	sub	sp, #32
   12d4a:	466a      	mov	r2, sp
   12d4c:	4b07      	ldr	r3, [pc, #28]	; (12d6c <indicate_ended_mob_cb+0x28>)
   12d4e:	6153      	str	r3, [r2, #20]
   12d50:	4b07      	ldr	r3, [pc, #28]	; (12d70 <indicate_ended_mob_cb+0x2c>)
   12d52:	6193      	str	r3, [r2, #24]
   12d54:	2303      	movs	r3, #3
   12d56:	f842 3f10 	str.w	r3, [r2, #16]!
   12d5a:	4806      	ldr	r0, [pc, #24]	; (12d74 <indicate_ended_mob_cb+0x30>)
   12d5c:	2300      	movs	r3, #0
   12d5e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
   12d62:	f001 f95d 	bl	14020 <z_impl_z_log_msg_static_create>
}
   12d66:	46bd      	mov	sp, r7
   12d68:	bd80      	pop	{r7, pc}
   12d6a:	bf00      	nop
   12d6c:	00028d72 	.word	0x00028d72
   12d70:	00028de8 	.word	0x00028de8
   12d74:	0002800c 	.word	0x0002800c

00012d78 <indicate_started_mob_cb>:
{
   12d78:	b580      	push	{r7, lr}
	LOG_DBG("MOB indication started %s\n", err != 0U ? "fail" : "success");
   12d7a:	490d      	ldr	r1, [pc, #52]	; (12db0 <indicate_started_mob_cb+0x38>)
   12d7c:	4b0d      	ldr	r3, [pc, #52]	; (12db4 <indicate_started_mob_cb+0x3c>)
{
   12d7e:	af00      	add	r7, sp, #0
	LOG_DBG("MOB indication started %s\n", err != 0U ? "fail" : "success");
   12d80:	b08a      	sub	sp, #40	; 0x28
   12d82:	2a00      	cmp	r2, #0
   12d84:	bf18      	it	ne
   12d86:	460b      	movne	r3, r1
   12d88:	466a      	mov	r2, sp
   12d8a:	490b      	ldr	r1, [pc, #44]	; (12db8 <indicate_started_mob_cb+0x40>)
   12d8c:	6151      	str	r1, [r2, #20]
   12d8e:	490b      	ldr	r1, [pc, #44]	; (12dbc <indicate_started_mob_cb+0x44>)
   12d90:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12d94:	f240 3301 	movw	r3, #769	; 0x301
   12d98:	8413      	strh	r3, [r2, #32]
   12d9a:	4b09      	ldr	r3, [pc, #36]	; (12dc0 <indicate_started_mob_cb+0x48>)
   12d9c:	f842 3f10 	str.w	r3, [r2, #16]!
   12da0:	4808      	ldr	r0, [pc, #32]	; (12dc4 <indicate_started_mob_cb+0x4c>)
   12da2:	2300      	movs	r3, #0
   12da4:	f44f 5114 	mov.w	r1, #9472	; 0x2500
   12da8:	f001 f93a 	bl	14020 <z_impl_z_log_msg_static_create>
}
   12dac:	46bd      	mov	sp, r7
   12dae:	bd80      	pop	{r7, pc}
   12db0:	00028d46 	.word	0x00028d46
   12db4:	00028d4b 	.word	0x00028d4b
   12db8:	00028d8d 	.word	0x00028d8d
   12dbc:	00028dd0 	.word	0x00028dd0
   12dc0:	01000004 	.word	0x01000004
   12dc4:	0002800c 	.word	0x0002800c

00012dc8 <read_mob_event_status>:
{
   12dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12dcc:	b084      	sub	sp, #16
	if (attr->user_data != NULL)
   12dce:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   12dd2:	af04      	add	r7, sp, #16
   12dd4:	4605      	mov	r5, r0
   12dd6:	460c      	mov	r4, r1
   12dd8:	4616      	mov	r6, r2
   12dda:	4698      	mov	r8, r3
	if (attr->user_data != NULL)
   12ddc:	f1b9 0f00 	cmp.w	r9, #0
   12de0:	d103      	bne.n	12dea <read_mob_event_status+0x22>
		return 0;
   12de2:	2000      	movs	r0, #0
}
   12de4:	46bd      	mov	sp, r7
   12de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
   12dea:	46ea      	mov	sl, sp
   12dec:	b08a      	sub	sp, #40	; 0x28
   12dee:	8a0b      	ldrh	r3, [r1, #16]
   12df0:	aa04      	add	r2, sp, #16
   12df2:	4911      	ldr	r1, [pc, #68]	; (12e38 <read_mob_event_status+0x70>)
   12df4:	6151      	str	r1, [r2, #20]
   12df6:	4911      	ldr	r1, [pc, #68]	; (12e3c <read_mob_event_status+0x74>)
   12df8:	6210      	str	r0, [r2, #32]
   12dfa:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12dfe:	2305      	movs	r3, #5
   12e00:	f842 3f10 	str.w	r3, [r2, #16]!
   12e04:	2300      	movs	r3, #0
   12e06:	480e      	ldr	r0, [pc, #56]	; (12e40 <read_mob_event_status+0x78>)
   12e08:	f44f 5124 	mov.w	r1, #10496	; 0x2900
   12e0c:	f001 f908 	bl	14020 <z_impl_z_log_msg_static_create>
	if (gss_cb.mob_cb)
   12e10:	4b0c      	ldr	r3, [pc, #48]	; (12e44 <read_mob_event_status+0x7c>)
   12e12:	685b      	ldr	r3, [r3, #4]
   12e14:	46d5      	mov	sp, sl
   12e16:	2b00      	cmp	r3, #0
   12e18:	d0e3      	beq.n	12de2 <read_mob_event_status+0x1a>
		mob_status = gss_cb.mob_cb();
   12e1a:	4798      	blx	r3
   12e1c:	4b0a      	ldr	r3, [pc, #40]	; (12e48 <read_mob_event_status+0x80>)
   12e1e:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   12e20:	2301      	movs	r3, #1
   12e22:	e9cd 9301 	strd	r9, r3, [sp, #4]
   12e26:	8c3b      	ldrh	r3, [r7, #32]
   12e28:	9300      	str	r3, [sp, #0]
   12e2a:	4632      	mov	r2, r6
   12e2c:	4643      	mov	r3, r8
   12e2e:	4621      	mov	r1, r4
   12e30:	4628      	mov	r0, r5
   12e32:	f012 ffca 	bl	25dca <bt_gatt_attr_read>
   12e36:	e7d5      	b.n	12de4 <read_mob_event_status+0x1c>
   12e38:	00028d02 	.word	0x00028d02
   12e3c:	00028dba 	.word	0x00028dba
   12e40:	0002800c 	.word	0x0002800c
   12e44:	20003010 	.word	0x20003010
   12e48:	20004496 	.word	0x20004496

00012e4c <gss_init>:
	if (callbacks)
   12e4c:	b120      	cbz	r0, 12e58 <gss_init+0xc>
		gss_cb.gps_cb = callbacks->gps_cb;
   12e4e:	4b03      	ldr	r3, [pc, #12]	; (12e5c <gss_init+0x10>)
   12e50:	6802      	ldr	r2, [r0, #0]
   12e52:	601a      	str	r2, [r3, #0]
		gss_cb.mob_cb = callbacks->mob_cb;
   12e54:	6842      	ldr	r2, [r0, #4]
   12e56:	605a      	str	r2, [r3, #4]
}
   12e58:	2000      	movs	r0, #0
   12e5a:	4770      	bx	lr
   12e5c:	20003010 	.word	0x20003010

00012e60 <gss_send_gps_indicate>:

/* INDICATIONS */
int gss_send_gps_indicate(gps_data_s gps_data)
{
   12e60:	b084      	sub	sp, #16
   12e62:	b570      	push	{r4, r5, r6, lr}
   12e64:	b086      	sub	sp, #24
   12e66:	ac0a      	add	r4, sp, #40	; 0x28
   12e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!indicate_enabled_gps) {
   12e6c:	4b13      	ldr	r3, [pc, #76]	; (12ebc <gss_send_gps_indicate+0x5c>)
   12e6e:	781b      	ldrb	r3, [r3, #0]
   12e70:	b303      	cbz	r3, 12eb4 <gss_send_gps_indicate+0x54>
		return -EACCES;
	}
	ind_params_gps.uuid = BT_UUID_GSS_GPS;
   12e72:	4b13      	ldr	r3, [pc, #76]	; (12ec0 <gss_send_gps_indicate+0x60>)
   12e74:	aa01      	add	r2, sp, #4
   12e76:	f103 0610 	add.w	r6, r3, #16
   12e7a:	4615      	mov	r5, r2
   12e7c:	6818      	ldr	r0, [r3, #0]
   12e7e:	6859      	ldr	r1, [r3, #4]
   12e80:	4614      	mov	r4, r2
   12e82:	c403      	stmia	r4!, {r0, r1}
   12e84:	3308      	adds	r3, #8
   12e86:	42b3      	cmp	r3, r6
   12e88:	4622      	mov	r2, r4
   12e8a:	d1f7      	bne.n	12e7c <gss_send_gps_indicate+0x1c>
   12e8c:	490d      	ldr	r1, [pc, #52]	; (12ec4 <gss_send_gps_indicate+0x64>)
   12e8e:	781b      	ldrb	r3, [r3, #0]
   12e90:	7023      	strb	r3, [r4, #0]
	ind_params_gps.func = indicate_started_gps_cb; //A remote device has ACKed at its host layer (ATT ACK)
   12e92:	4b0d      	ldr	r3, [pc, #52]	; (12ec8 <gss_send_gps_indicate+0x68>)
   12e94:	608b      	str	r3, [r1, #8]
	ind_params_gps.destroy = indicate_ended_gps_cb;
   12e96:	4b0d      	ldr	r3, [pc, #52]	; (12ecc <gss_send_gps_indicate+0x6c>)
   12e98:	60cb      	str	r3, [r1, #12]
	ind_params_gps.data = &gps_data;
   12e9a:	ab0a      	add	r3, sp, #40	; 0x28
   12e9c:	610b      	str	r3, [r1, #16]
	ind_params_gps.len = sizeof(gps_data);
	return bt_gatt_indicate(NULL, &ind_params_gps);
   12e9e:	2000      	movs	r0, #0
	ind_params_gps.len = sizeof(gps_data);
   12ea0:	2318      	movs	r3, #24
	ind_params_gps.uuid = BT_UUID_GSS_GPS;
   12ea2:	600d      	str	r5, [r1, #0]
	ind_params_gps.len = sizeof(gps_data);
   12ea4:	828b      	strh	r3, [r1, #20]
	return bt_gatt_indicate(NULL, &ind_params_gps);
   12ea6:	f007 fc85 	bl	1a7b4 <bt_gatt_indicate>
}
   12eaa:	b006      	add	sp, #24
   12eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12eb0:	b004      	add	sp, #16
   12eb2:	4770      	bx	lr
		return -EACCES;
   12eb4:	f06f 000c 	mvn.w	r0, #12
   12eb8:	e7f7      	b.n	12eaa <gss_send_gps_indicate+0x4a>
   12eba:	bf00      	nop
   12ebc:	20004495 	.word	0x20004495
   12ec0:	00028110 	.word	0x00028110
   12ec4:	20002ff8 	.word	0x20002ff8
   12ec8:	00012cf5 	.word	0x00012cf5
   12ecc:	00012cc1 	.word	0x00012cc1

00012ed0 <gss_send_mob_indicate>:

int gss_send_mob_indicate(bool mob_status)
{
   12ed0:	b570      	push	{r4, r5, r6, lr}
	if (!indicate_enabled_mob)
   12ed2:	4b14      	ldr	r3, [pc, #80]	; (12f24 <gss_send_mob_indicate+0x54>)
{
   12ed4:	b088      	sub	sp, #32
	if (!indicate_enabled_mob)
   12ed6:	781b      	ldrb	r3, [r3, #0]
{
   12ed8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!indicate_enabled_mob)
   12edc:	b1f3      	cbz	r3, 12f1c <gss_send_mob_indicate+0x4c>
	{
		return -EACCES;
	}
	ind_params_mob.uuid = BT_UUID_GSS_MOB;
   12ede:	4b12      	ldr	r3, [pc, #72]	; (12f28 <gss_send_mob_indicate+0x58>)
   12ee0:	aa03      	add	r2, sp, #12
   12ee2:	f103 0610 	add.w	r6, r3, #16
   12ee6:	4615      	mov	r5, r2
   12ee8:	6818      	ldr	r0, [r3, #0]
   12eea:	6859      	ldr	r1, [r3, #4]
   12eec:	4614      	mov	r4, r2
   12eee:	c403      	stmia	r4!, {r0, r1}
   12ef0:	3308      	adds	r3, #8
   12ef2:	42b3      	cmp	r3, r6
   12ef4:	4622      	mov	r2, r4
   12ef6:	d1f7      	bne.n	12ee8 <gss_send_mob_indicate+0x18>
   12ef8:	490c      	ldr	r1, [pc, #48]	; (12f2c <gss_send_mob_indicate+0x5c>)
   12efa:	781b      	ldrb	r3, [r3, #0]
   12efc:	7023      	strb	r3, [r4, #0]
	ind_params_mob.func = indicate_started_mob_cb; // A remote device has ACKed at its host layer (ATT ACK)
   12efe:	4b0c      	ldr	r3, [pc, #48]	; (12f30 <gss_send_mob_indicate+0x60>)
   12f00:	608b      	str	r3, [r1, #8]
	ind_params_mob.destroy = indicate_ended_mob_cb;
   12f02:	4b0c      	ldr	r3, [pc, #48]	; (12f34 <gss_send_mob_indicate+0x64>)
   12f04:	60cb      	str	r3, [r1, #12]
	ind_params_mob.data = &mob_status;
   12f06:	f10d 0307 	add.w	r3, sp, #7
   12f0a:	610b      	str	r3, [r1, #16]
	ind_params_mob.len = sizeof(mob_status);
	return bt_gatt_indicate(NULL, &ind_params_mob);
   12f0c:	2000      	movs	r0, #0
	ind_params_mob.len = sizeof(mob_status);
   12f0e:	2301      	movs	r3, #1
	ind_params_mob.uuid = BT_UUID_GSS_MOB;
   12f10:	600d      	str	r5, [r1, #0]
	ind_params_mob.len = sizeof(mob_status);
   12f12:	828b      	strh	r3, [r1, #20]
	return bt_gatt_indicate(NULL, &ind_params_mob);
   12f14:	f007 fc4e 	bl	1a7b4 <bt_gatt_indicate>
}
   12f18:	b008      	add	sp, #32
   12f1a:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   12f1c:	f06f 000c 	mvn.w	r0, #12
   12f20:	e7fa      	b.n	12f18 <gss_send_mob_indicate+0x48>
   12f22:	bf00      	nop
   12f24:	20004494 	.word	0x20004494
   12f28:	00028121 	.word	0x00028121
   12f2c:	20002fe0 	.word	0x20002fe0
   12f30:	00012d79 	.word	0x00012d79
   12f34:	00012d45 	.word	0x00012d45

00012f38 <ble_init>:
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_GSS_VAL),
	BT_DATA(BT_DATA_NAME_COMPLETE, CONFIG_BT_DEVICE_NAME, sizeof(CONFIG_BT_DEVICE_NAME) - 1),
};

int ble_init(struct bt_conn_cb *connection_cb)
{
   12f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f3a:	b089      	sub	sp, #36	; 0x24
   12f3c:	4605      	mov	r5, r0
   12f3e:	af02      	add	r7, sp, #8
	int err;
	err = bt_enable(NULL);
   12f40:	2000      	movs	r0, #0
   12f42:	f004 fa83 	bl	1744c <bt_enable>
	if (err)
   12f46:	4604      	mov	r4, r0
   12f48:	b198      	cbz	r0, 12f72 <ble_init+0x3a>
	{
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
   12f4a:	466d      	mov	r5, sp
   12f4c:	b088      	sub	sp, #32
   12f4e:	aa02      	add	r2, sp, #8
   12f50:	4b22      	ldr	r3, [pc, #136]	; (12fdc <ble_init+0xa4>)
   12f52:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12f56:	2303      	movs	r3, #3
   12f58:	f842 3f10 	str.w	r3, [r2, #16]!
   12f5c:	4820      	ldr	r0, [pc, #128]	; (12fe0 <ble_init+0xa8>)
   12f5e:	2300      	movs	r3, #0
   12f60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12f64:	f001 f85c 	bl	14020 <z_impl_z_log_msg_static_create>
   12f68:	46ad      	mov	sp, r5
		return err;
	}

	LOG_INF("Advertising successfully started\n");
	return 0;
}
   12f6a:	4620      	mov	r0, r4
   12f6c:	371c      	adds	r7, #28
   12f6e:	46bd      	mov	sp, r7
   12f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_conn_cb_register(connection_cb);
   12f72:	4628      	mov	r0, r5
   12f74:	f005 fc6e 	bl	18854 <bt_conn_cb_register>
	LOG_INF("Bluetooth initialized\n");
   12f78:	466e      	mov	r6, sp
   12f7a:	4b1a      	ldr	r3, [pc, #104]	; (12fe4 <ble_init+0xac>)
   12f7c:	617b      	str	r3, [r7, #20]
   12f7e:	2502      	movs	r5, #2
   12f80:	613d      	str	r5, [r7, #16]
   12f82:	4817      	ldr	r0, [pc, #92]	; (12fe0 <ble_init+0xa8>)
   12f84:	4623      	mov	r3, r4
   12f86:	f107 0210 	add.w	r2, r7, #16
   12f8a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12f8e:	f001 f847 	bl	14020 <z_impl_z_log_msg_static_create>
	err = bt_le_adv_start(adv_param, ad, ARRAY_SIZE(ad),
   12f92:	4b15      	ldr	r3, [pc, #84]	; (12fe8 <ble_init+0xb0>)
   12f94:	4915      	ldr	r1, [pc, #84]	; (12fec <ble_init+0xb4>)
   12f96:	4816      	ldr	r0, [pc, #88]	; (12ff0 <ble_init+0xb8>)
   12f98:	9500      	str	r5, [sp, #0]
   12f9a:	2203      	movs	r2, #3
   12f9c:	f004 ff3e 	bl	17e1c <bt_le_adv_start>
	if (err)
   12fa0:	4604      	mov	r4, r0
   12fa2:	b178      	cbz	r0, 12fc4 <ble_init+0x8c>
		LOG_ERR("Advertising failed to start (err %d)\n", err);
   12fa4:	b088      	sub	sp, #32
   12fa6:	aa02      	add	r2, sp, #8
   12fa8:	4b12      	ldr	r3, [pc, #72]	; (12ff4 <ble_init+0xbc>)
   12faa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12fae:	2303      	movs	r3, #3
   12fb0:	f842 3f10 	str.w	r3, [r2, #16]!
   12fb4:	480a      	ldr	r0, [pc, #40]	; (12fe0 <ble_init+0xa8>)
   12fb6:	2300      	movs	r3, #0
   12fb8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12fbc:	f001 f830 	bl	14020 <z_impl_z_log_msg_static_create>
   12fc0:	46b5      	mov	sp, r6
		return err;
   12fc2:	e7d2      	b.n	12f6a <ble_init+0x32>
	LOG_INF("Advertising successfully started\n");
   12fc4:	4b0c      	ldr	r3, [pc, #48]	; (12ff8 <ble_init+0xc0>)
   12fc6:	e9c7 5304 	strd	r5, r3, [r7, #16]
   12fca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12fce:	4603      	mov	r3, r0
   12fd0:	f107 0210 	add.w	r2, r7, #16
   12fd4:	4802      	ldr	r0, [pc, #8]	; (12fe0 <ble_init+0xa8>)
   12fd6:	f001 f823 	bl	14020 <z_impl_z_log_msg_static_create>
	return 0;
   12fda:	e7c6      	b.n	12f6a <ble_init+0x32>
   12fdc:	00028e30 	.word	0x00028e30
   12fe0:	00027ff4 	.word	0x00027ff4
   12fe4:	00028e50 	.word	0x00028e50
   12fe8:	000282c4 	.word	0x000282c4
   12fec:	000282d4 	.word	0x000282d4
   12ff0:	2000053c 	.word	0x2000053c
   12ff4:	00028e67 	.word	0x00028e67
   12ff8:	00028e8d 	.word	0x00028e8d

00012ffc <on_connected>:

/* BLUETOOTH CONNECTION CALLBACKS */

void on_connected(struct bt_conn *conn, uint8_t err)
{
   12ffc:	b508      	push	{r3, lr}
	if (err)
   12ffe:	b121      	cbz	r1, 1300a <on_connected+0xe>
	}

	printk("Connected\n");

	dk_set_led_on(CON_STATUS_LED);
}
   13000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
   13004:	4805      	ldr	r0, [pc, #20]	; (1301c <on_connected+0x20>)
   13006:	f010 bcc9 	b.w	2399c <printk>
	printk("Connected\n");
   1300a:	4805      	ldr	r0, [pc, #20]	; (13020 <on_connected+0x24>)
   1300c:	f010 fcc6 	bl	2399c <printk>
}
   13010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_on(CON_STATUS_LED);
   13014:	2001      	movs	r0, #1
   13016:	f013 baff 	b.w	26618 <dk_set_led_on>
   1301a:	bf00      	nop
   1301c:	00028eaf 	.word	0x00028eaf
   13020:	00028ecb 	.word	0x00028ecb

00013024 <on_disconnected>:

void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
   13024:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   13026:	4804      	ldr	r0, [pc, #16]	; (13038 <on_disconnected+0x14>)
   13028:	f010 fcb8 	bl	2399c <printk>

	dk_set_led_off(CON_STATUS_LED);
   1302c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
   13030:	2001      	movs	r0, #1
   13032:	f013 baf4 	b.w	2661e <dk_set_led_off>
   13036:	bf00      	nop
   13038:	00028ed6 	.word	0x00028ed6

0001303c <getGPSData>:
#include "gps.h"

// Dummy function that returns a gps data struct
gps_data_s getGPSData(void) {
   1303c:	b570      	push	{r4, r5, r6, lr}
	gps_data_s gps_data = {
   1303e:	4d05      	ldr	r5, [pc, #20]	; (13054 <getGPSData+0x18>)
gps_data_s getGPSData(void) {
   13040:	4606      	mov	r6, r0
	gps_data_s gps_data = {
   13042:	4604      	mov	r4, r0
   13044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13048:	e895 0003 	ldmia.w	r5, {r0, r1}
   1304c:	e884 0003 	stmia.w	r4, {r0, r1}
		.latitude = 0.987654321,
		.altitude = 123.456,
		.accuracy = 0.123
	};
	return gps_data;
   13050:	4630      	mov	r0, r6
   13052:	bd70      	pop	{r4, r5, r6, pc}
   13054:	000280c0 	.word	0x000280c0

00013058 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   13058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1305c:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1305e:	0784      	lsls	r4, r0, #30
{
   13060:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   13062:	f002 0304 	and.w	r3, r2, #4
   13066:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   13068:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   1306c:	f103 0301 	add.w	r3, r3, #1
   13070:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   13074:	9203      	str	r2, [sp, #12]
   13076:	4605      	mov	r5, r0
   13078:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1307a:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   1307c:	f040 81be 	bne.w	133fc <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   13080:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   13082:	b130      	cbz	r0, 13092 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   13084:	2907      	cmp	r1, #7
   13086:	d809      	bhi.n	1309c <cbvprintf_package+0x44>
		return -ENOSPC;
   13088:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   1308c:	b011      	add	sp, #68	; 0x44
   1308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   13092:	f001 0607 	and.w	r6, r1, #7
   13096:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   13098:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   1309c:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   1309e:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   130a2:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   130a4:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   130a8:	f04f 33ff 	mov.w	r3, #4294967295
   130ac:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   130ae:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   130b2:	464f      	mov	r7, r9
	bool parsing = false;
   130b4:	46cb      	mov	fp, r9
	size = sizeof(char *);
   130b6:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   130b8:	b10d      	cbz	r5, 130be <cbvprintf_package+0x66>
				*(const char **)buf = s;
   130ba:	9800      	ldr	r0, [sp, #0]
   130bc:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   130be:	9805      	ldr	r0, [sp, #20]
   130c0:	2800      	cmp	r0, #0
   130c2:	f300 80eb 	bgt.w	1329c <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   130c6:	489a      	ldr	r0, [pc, #616]	; (13330 <cbvprintf_package+0x2d8>)
   130c8:	9a00      	ldr	r2, [sp, #0]
   130ca:	4282      	cmp	r2, r0
   130cc:	d303      	bcc.n	130d6 <cbvprintf_package+0x7e>
   130ce:	4899      	ldr	r0, [pc, #612]	; (13334 <cbvprintf_package+0x2dc>)
   130d0:	4282      	cmp	r2, r0
   130d2:	f0c0 80e3 	bcc.w	1329c <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   130d6:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   130d8:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   130dc:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   130de:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   130e2:	f100 8106 	bmi.w	132f2 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   130e6:	2f0f      	cmp	r7, #15
   130e8:	f200 80b4 	bhi.w	13254 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   130ec:	2d00      	cmp	r5, #0
   130ee:	f000 8108 	beq.w	13302 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   130f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   130f6:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   130fa:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   130fc:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   13100:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   13104:	9804      	ldr	r0, [sp, #16]
   13106:	3001      	adds	r0, #1
   13108:	9004      	str	r0, [sp, #16]
   1310a:	e0ea      	b.n	132e2 <cbvprintf_package+0x28a>
			switch (*fmt) {
   1310c:	287a      	cmp	r0, #122	; 0x7a
   1310e:	d860      	bhi.n	131d2 <cbvprintf_package+0x17a>
   13110:	284b      	cmp	r0, #75	; 0x4b
   13112:	d80e      	bhi.n	13132 <cbvprintf_package+0xda>
   13114:	2847      	cmp	r0, #71	; 0x47
   13116:	d85c      	bhi.n	131d2 <cbvprintf_package+0x17a>
   13118:	2829      	cmp	r0, #41	; 0x29
   1311a:	d82f      	bhi.n	1317c <cbvprintf_package+0x124>
   1311c:	2825      	cmp	r0, #37	; 0x25
   1311e:	d055      	beq.n	131cc <cbvprintf_package+0x174>
   13120:	d857      	bhi.n	131d2 <cbvprintf_package+0x17a>
   13122:	2820      	cmp	r0, #32
   13124:	d07d      	beq.n	13222 <cbvprintf_package+0x1ca>
   13126:	3823      	subs	r0, #35	; 0x23
   13128:	f1d0 0b00 	rsbs	fp, r0, #0
   1312c:	eb4b 0b00 	adc.w	fp, fp, r0
   13130:	e077      	b.n	13222 <cbvprintf_package+0x1ca>
   13132:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   13136:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   1313a:	d84a      	bhi.n	131d2 <cbvprintf_package+0x17a>
   1313c:	e8df f00c 	tbb	[pc, ip]
   13140:	49494971 	.word	0x49494971
   13144:	49494949 	.word	0x49494949
   13148:	49494949 	.word	0x49494949
   1314c:	4949494c 	.word	0x4949494c
   13150:	49494949 	.word	0x49494949
   13154:	4c495a49 	.word	0x4c495a49
   13158:	5a5a5a4c 	.word	0x5a5a5a4c
   1315c:	496e4c71 	.word	0x496e4c71
   13160:	4c184971 	.word	0x4c184971
   13164:	83494918 	.word	0x83494918
   13168:	49494c80 	.word	0x49494c80
   1316c:	494c      	.short	0x494c
   1316e:	80          	.byte	0x80
   1316f:	00          	.byte	0x00
   13170:	2000      	movs	r0, #0
   13172:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   13176:	f04f 0a04 	mov.w	sl, #4
   1317a:	e039      	b.n	131f0 <cbvprintf_package+0x198>
			switch (*fmt) {
   1317c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   13180:	fa5f fc8c 	uxtb.w	ip, ip
   13184:	2201      	movs	r2, #1
   13186:	fa02 fc0c 	lsl.w	ip, r2, ip
   1318a:	ea1c 0f0e 	tst.w	ip, lr
   1318e:	d148      	bne.n	13222 <cbvprintf_package+0x1ca>
   13190:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   13194:	d12e      	bne.n	131f4 <cbvprintf_package+0x19c>
   13196:	ea1c 0b02 	ands.w	fp, ip, r2
   1319a:	d042      	beq.n	13222 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   1319c:	3c01      	subs	r4, #1
   1319e:	4454      	add	r4, sl
   131a0:	f1ca 0c00 	rsb	ip, sl, #0
   131a4:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   131a8:	2d00      	cmp	r5, #0
   131aa:	d061      	beq.n	13270 <cbvprintf_package+0x218>
   131ac:	eba3 0c05 	sub.w	ip, r3, r5
   131b0:	44a4      	add	ip, r4
   131b2:	4566      	cmp	r6, ip
   131b4:	f4ff af68 	bcc.w	13088 <cbvprintf_package+0x30>
		if (is_str_arg) {
   131b8:	2800      	cmp	r0, #0
   131ba:	d168      	bne.n	1328e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   131bc:	2b04      	cmp	r3, #4
   131be:	d147      	bne.n	13250 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   131c0:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   131c4:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   131c6:	3404      	adds	r4, #4
   131c8:	2304      	movs	r3, #4
   131ca:	e02a      	b.n	13222 <cbvprintf_package+0x1ca>
				arg_idx--;
   131cc:	9a01      	ldr	r2, [sp, #4]
   131ce:	3a01      	subs	r2, #1
   131d0:	9201      	str	r2, [sp, #4]
				parsing = false;
   131d2:	f04f 0b00 	mov.w	fp, #0
				continue;
   131d6:	e024      	b.n	13222 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   131d8:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   131dc:	286c      	cmp	r0, #108	; 0x6c
   131de:	d134      	bne.n	1324a <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   131e0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   131e4:	2000      	movs	r0, #0
   131e6:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   131e8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   131ea:	d1c4      	bne.n	13176 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   131ec:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   131f0:	4653      	mov	r3, sl
   131f2:	e7d3      	b.n	1319c <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   131f4:	f108 0807 	add.w	r8, r8, #7
   131f8:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   131fc:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   131fe:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   13202:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   13206:	b135      	cbz	r5, 13216 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   13208:	9806      	ldr	r0, [sp, #24]
   1320a:	4420      	add	r0, r4
   1320c:	42b0      	cmp	r0, r6
   1320e:	f63f af3b 	bhi.w	13088 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   13212:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   13216:	3408      	adds	r4, #8
				parsing = false;
   13218:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   1321c:	f04f 0a08 	mov.w	sl, #8
   13220:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   13222:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   13226:	2800      	cmp	r0, #0
   13228:	d078      	beq.n	1331c <cbvprintf_package+0x2c4>
			if (!parsing) {
   1322a:	f1bb 0f00 	cmp.w	fp, #0
   1322e:	f47f af6d 	bne.w	1310c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   13232:	2825      	cmp	r0, #37	; 0x25
   13234:	d1f5      	bne.n	13222 <cbvprintf_package+0x1ca>
					arg_idx++;
   13236:	9b01      	ldr	r3, [sp, #4]
   13238:	3301      	adds	r3, #1
   1323a:	9301      	str	r3, [sp, #4]
					parsing = true;
   1323c:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   13240:	f04f 0a04 	mov.w	sl, #4
   13244:	e7ec      	b.n	13220 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   13246:	4658      	mov	r0, fp
   13248:	e793      	b.n	13172 <cbvprintf_package+0x11a>
   1324a:	2000      	movs	r0, #0
				parsing = false;
   1324c:	4683      	mov	fp, r0
   1324e:	e7a5      	b.n	1319c <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   13250:	2b08      	cmp	r3, #8
   13252:	d002      	beq.n	1325a <cbvprintf_package+0x202>
					return -EINVAL;
   13254:	f06f 0015 	mvn.w	r0, #21
   13258:	e718      	b.n	1308c <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   1325a:	f108 0807 	add.w	r8, r8, #7
   1325e:	f028 0807 	bic.w	r8, r8, #7
   13262:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
   13266:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   1326a:	3408      	adds	r4, #8
   1326c:	2308      	movs	r3, #8
   1326e:	e7d8      	b.n	13222 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   13270:	b968      	cbnz	r0, 1328e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   13272:	2b04      	cmp	r3, #4
   13274:	d102      	bne.n	1327c <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   13276:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   1327a:	e7a4      	b.n	131c6 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   1327c:	2b08      	cmp	r3, #8
   1327e:	d1e9      	bne.n	13254 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   13280:	f108 0807 	add.w	r8, r8, #7
   13284:	f028 0807 	bic.w	r8, r8, #7
   13288:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   1328c:	e7ed      	b.n	1326a <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1328e:	9805      	ldr	r0, [sp, #20]
   13290:	3801      	subs	r0, #1
   13292:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   13294:	f858 0b04 	ldr.w	r0, [r8], #4
   13298:	9000      	str	r0, [sp, #0]
   1329a:	e70d      	b.n	130b8 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   1329c:	9a03      	ldr	r2, [sp, #12]
   1329e:	0790      	lsls	r0, r2, #30
   132a0:	d520      	bpl.n	132e4 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   132a2:	eba4 0e05 	sub.w	lr, r4, r5
   132a6:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   132aa:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   132ae:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   132b2:	d2cf      	bcs.n	13254 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   132b4:	2f0f      	cmp	r7, #15
   132b6:	d8cd      	bhi.n	13254 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   132b8:	b1f5      	cbz	r5, 132f8 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   132ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
   132be:	eb0d 0e02 	add.w	lr, sp, r2
   132c2:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   132c4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   132c6:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   132ca:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   132ce:	f1bc 0f00 	cmp.w	ip, #0
   132d2:	f43f af17 	beq.w	13104 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   132d6:	f060 007f 	orn	r0, r0, #127	; 0x7f
   132da:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   132de:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   132e2:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   132e4:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   132e8:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   132ea:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   132ec:	f64f 7eda 	movw	lr, #65498	; 0xffda
   132f0:	e797      	b.n	13222 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   132f2:	f04f 0c00 	mov.w	ip, #0
   132f6:	e7da      	b.n	132ae <cbvprintf_package+0x256>
				} else if (is_ro) {
   132f8:	f1bc 0f00 	cmp.w	ip, #0
   132fc:	d001      	beq.n	13302 <cbvprintf_package+0x2aa>
					len += 1;
   132fe:	3601      	adds	r6, #1
   13300:	e7ef      	b.n	132e2 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   13302:	9a02      	ldr	r2, [sp, #8]
					len += 2;
   13304:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   13306:	2a00      	cmp	r2, #0
   13308:	d1eb      	bne.n	132e2 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   1330a:	9800      	ldr	r0, [sp, #0]
   1330c:	e9cd 3106 	strd	r3, r1, [sp, #24]
   13310:	f7f9 fbe4 	bl	cadc <strlen>
   13314:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   13318:	4406      	add	r6, r0
   1331a:	e7e2      	b.n	132e2 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   1331c:	1b63      	subs	r3, r4, r5
   1331e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   13322:	d297      	bcs.n	13254 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   13324:	b945      	cbnz	r5, 13338 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   13326:	f1a6 0408 	sub.w	r4, r6, #8
   1332a:	18e0      	adds	r0, r4, r3
   1332c:	e6ae      	b.n	1308c <cbvprintf_package+0x34>
   1332e:	bf00      	nop
   13330:	00027bc8 	.word	0x00027bc8
   13334:	0002ad28 	.word	0x0002ad28
	if (rws_pos_en) {
   13338:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   1333a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   1333c:	089b      	lsrs	r3, r3, #2
   1333e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   13340:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   13344:	b1c2      	cbz	r2, 13378 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   13346:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   13348:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   1334c:	f1b9 0f00 	cmp.w	r9, #0
   13350:	d005      	beq.n	1335e <cbvprintf_package+0x306>
   13352:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   13354:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   13356:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   1335a:	4297      	cmp	r7, r2
   1335c:	d10e      	bne.n	1337c <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   1335e:	f1c5 0301 	rsb	r3, r5, #1
   13362:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   13366:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   1336a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   1336c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   13370:	4557      	cmp	r7, sl
   13372:	d112      	bne.n	1339a <cbvprintf_package+0x342>
	return BUF_OFFSET;
   13374:	1b60      	subs	r0, r4, r5
   13376:	e689      	b.n	1308c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   13378:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1337a:	e7e5      	b.n	13348 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   1337c:	f810 3b01 	ldrb.w	r3, [r0], #1
   13380:	0619      	lsls	r1, r3, #24
   13382:	d508      	bpl.n	13396 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   13384:	eb04 0e0c 	add.w	lr, r4, ip
   13388:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1338a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   1338e:	f4ff ae7b 	bcc.w	13088 <cbvprintf_package+0x30>
			*buf++ = pos;
   13392:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   13396:	3201      	adds	r2, #1
   13398:	e7df      	b.n	1335a <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1339a:	f1b9 0f00 	cmp.w	r9, #0
   1339e:	d003      	beq.n	133a8 <cbvprintf_package+0x350>
   133a0:	f998 2000 	ldrsb.w	r2, [r8]
   133a4:	2a00      	cmp	r2, #0
   133a6:	db17      	blt.n	133d8 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   133a8:	9b02      	ldr	r3, [sp, #8]
   133aa:	b1d3      	cbz	r3, 133e2 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   133ac:	f81a 200b 	ldrb.w	r2, [sl, fp]
   133b0:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   133b4:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   133b6:	9b01      	ldr	r3, [sp, #4]
   133b8:	1898      	adds	r0, r3, r2
   133ba:	4420      	add	r0, r4
   133bc:	4286      	cmp	r6, r0
   133be:	f4ff ae63 	bcc.w	13088 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   133c2:	f898 0000 	ldrb.w	r0, [r8]
   133c6:	f804 0b01 	strb.w	r0, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   133ca:	9900      	ldr	r1, [sp, #0]
   133cc:	9203      	str	r2, [sp, #12]
   133ce:	4620      	mov	r0, r4
   133d0:	f013 fff4 	bl	273bc <memcpy>
		buf += size;
   133d4:	9a03      	ldr	r2, [sp, #12]
   133d6:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   133d8:	f10a 0a01 	add.w	sl, sl, #1
   133dc:	f108 0801 	add.w	r8, r8, #1
   133e0:	e7c6      	b.n	13370 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   133e2:	f898 2000 	ldrb.w	r2, [r8]
   133e6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   133ea:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   133ec:	9b02      	ldr	r3, [sp, #8]
   133ee:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   133f2:	9800      	ldr	r0, [sp, #0]
   133f4:	f7f9 fb72 	bl	cadc <strlen>
   133f8:	1c42      	adds	r2, r0, #1
   133fa:	e7dc      	b.n	133b6 <cbvprintf_package+0x35e>
		return -EFAULT;
   133fc:	f06f 000d 	mvn.w	r0, #13
   13400:	e644      	b.n	1308c <cbvprintf_package+0x34>
   13402:	bf00      	nop

00013404 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   13404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13408:	b095      	sub	sp, #84	; 0x54
   1340a:	af00      	add	r7, sp, #0
   1340c:	4604      	mov	r4, r0
   1340e:	61bb      	str	r3, [r7, #24]
   13410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13412:	627a      	str	r2, [r7, #36]	; 0x24
   13414:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13418:	60fb      	str	r3, [r7, #12]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   1341a:	4688      	mov	r8, r1
   1341c:	b949      	cbnz	r1, 13432 <cbprintf_package_convert+0x2e>
	buf += ros_nbr;
   1341e:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   13420:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
   13422:	7880      	ldrb	r0, [r0, #2]
   13424:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13428:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   1342a:	4545      	cmp	r5, r8
   1342c:	d819      	bhi.n	13462 <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
   1342e:	eba0 0804 	sub.w	r8, r0, r4

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   13432:	f894 b002 	ldrb.w	fp, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   13436:	78e3      	ldrb	r3, [r4, #3]
   13438:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
   1343a:	f1bb 0f00 	cmp.w	fp, #0
   1343e:	d002      	beq.n	13446 <cbprintf_package_convert+0x42>
   13440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13442:	07d8      	lsls	r0, r3, #31
   13444:	d416      	bmi.n	13474 <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
   13446:	697b      	ldr	r3, [r7, #20]
   13448:	bb53      	cbnz	r3, 134a0 <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   1344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1344c:	b11b      	cbz	r3, 13456 <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
   1344e:	69ba      	ldr	r2, [r7, #24]
   13450:	4641      	mov	r1, r8
   13452:	4620      	mov	r0, r4
   13454:	4798      	blx	r3
		}

		return in_len;
   13456:	4645      	mov	r5, r8

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   13458:	4628      	mov	r0, r5
   1345a:	3754      	adds	r7, #84	; 0x54
   1345c:	46bd      	mov	sp, r7
   1345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   13462:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
   13464:	4630      	mov	r0, r6
   13466:	f7f9 fb39 	bl	cadc <strlen>
   1346a:	3001      	adds	r0, #1
   1346c:	4430      	add	r0, r6
	for (int i = 0; i < s_nbr; i++) {
   1346e:	f108 0801 	add.w	r8, r8, #1
   13472:	e7da      	b.n	1342a <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
   13474:	7823      	ldrb	r3, [r4, #0]
	args_size = in_desc->len * sizeof(int);
   13476:	623b      	str	r3, [r7, #32]
   13478:	009b      	lsls	r3, r3, #2
   1347a:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
   1347c:	6a3b      	ldr	r3, [r7, #32]
   1347e:	6862      	ldr	r2, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   13480:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
   13482:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
	if (cb == NULL) {
   13486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13488:	2b00      	cmp	r3, #0
   1348a:	f040 80fe 	bne.w	1368a <cbprintf_package_convert+0x286>
		out_len = (int)in_len;
   1348e:	4645      	mov	r5, r8
		if (ro_cpy) {
   13490:	eb0b 090a 	add.w	r9, fp, sl
   13494:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
   13496:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
   13498:	45c1      	cmp	r9, r8
   1349a:	d151      	bne.n	13540 <cbprintf_package_convert+0x13c>
   1349c:	44da      	add	sl, fp
   1349e:	e013      	b.n	134c8 <cbprintf_package_convert+0xc4>
	rw_cpy = rws_nbr > 0 &&
   134a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   134a2:	0799      	lsls	r1, r3, #30
   134a4:	d5d1      	bpl.n	1344a <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
   134a6:	7823      	ldrb	r3, [r4, #0]
   134a8:	623b      	str	r3, [r7, #32]
   134aa:	469a      	mov	sl, r3
   134ac:	009b      	lsls	r3, r3, #2
   134ae:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   134b0:	6863      	ldr	r3, [r4, #4]
   134b2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   134b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   134b6:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   134ba:	2b00      	cmp	r3, #0
   134bc:	d17a      	bne.n	135b4 <cbprintf_package_convert+0x1b0>
		out_len = (int)in_len;
   134be:	4645      	mov	r5, r8
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   134c0:	f1bb 0f00 	cmp.w	fp, #0
   134c4:	d14f      	bne.n	13566 <cbprintf_package_convert+0x162>
	size_t strl_cnt = 0;
   134c6:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
   134c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   134ca:	f013 0f05 	tst.w	r3, #5
   134ce:	697b      	ldr	r3, [r7, #20]
   134d0:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   134d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   134d6:	f003 0302 	and.w	r3, r3, #2
   134da:	bf0c      	ite	eq
   134dc:	f04f 0b02 	moveq.w	fp, #2
   134e0:	f04f 0b01 	movne.w	fp, #1
   134e4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < rws_nbr; i++) {
   134e6:	45ca      	cmp	sl, r9
   134e8:	d0b6      	beq.n	13458 <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
   134ea:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   134ee:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   134f2:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   134f6:	4bab      	ldr	r3, [pc, #684]	; (137a4 <cbprintf_package_convert+0x3a0>)
   134f8:	4598      	cmp	r8, r3
   134fa:	d302      	bcc.n	13502 <cbprintf_package_convert+0xfe>
   134fc:	4baa      	ldr	r3, [pc, #680]	; (137a8 <cbprintf_package_convert+0x3a4>)
   134fe:	4598      	cmp	r8, r3
   13500:	d338      	bcc.n	13574 <cbprintf_package_convert+0x170>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   13502:	68fb      	ldr	r3, [r7, #12]
   13504:	2b00      	cmp	r3, #0
   13506:	d042      	beq.n	1358e <cbprintf_package_convert+0x18a>
   13508:	69f8      	ldr	r0, [r7, #28]
   1350a:	f010 fa0b 	bl	23924 <is_ptr>
   1350e:	2800      	cmp	r0, #0
   13510:	d03d      	beq.n	1358e <cbprintf_package_convert+0x18a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   13512:	46e8      	mov	r8, sp
   13514:	b08a      	sub	sp, #40	; 0x28
   13516:	466a      	mov	r2, sp
   13518:	4ba4      	ldr	r3, [pc, #656]	; (137ac <cbprintf_package_convert+0x3a8>)
   1351a:	6153      	str	r3, [r2, #20]
   1351c:	69fb      	ldr	r3, [r7, #28]
   1351e:	e9c2 3106 	strd	r3, r1, [r2, #24]
   13522:	f44f 7300 	mov.w	r3, #512	; 0x200
   13526:	8413      	strh	r3, [r2, #32]
   13528:	4ba1      	ldr	r3, [pc, #644]	; (137b0 <cbprintf_package_convert+0x3ac>)
   1352a:	f842 3f10 	str.w	r3, [r2, #16]!
   1352e:	48a1      	ldr	r0, [pc, #644]	; (137b4 <cbprintf_package_convert+0x3b0>)
   13530:	2300      	movs	r3, #0
   13532:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   13536:	f000 fd73 	bl	14020 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   1353a:	3d02      	subs	r5, #2
   1353c:	46c5      	mov	sp, r8
				continue;
   1353e:	e7d2      	b.n	134e6 <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   13540:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
   13544:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   13548:	f7f9 fac8 	bl	cadc <strlen>
				if (strl && strl_cnt < strl_len) {
   1354c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   1354e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   13550:	b13b      	cbz	r3, 13562 <cbprintf_package_convert+0x15e>
   13552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13556:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   13558:	bf3e      	ittt	cc
   1355a:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
   1355c:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
   13560:	3601      	addcc	r6, #1
				out_len += len;
   13562:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   13564:	e798      	b.n	13498 <cbprintf_package_convert+0x94>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   13566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13568:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
   1356c:	bf1c      	itt	ne
   1356e:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   13570:	44da      	addne	sl, fp
   13572:	e7a9      	b.n	134c8 <cbprintf_package_convert+0xc4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   13574:	68fb      	ldr	r3, [r7, #12]
   13576:	b123      	cbz	r3, 13582 <cbprintf_package_convert+0x17e>
   13578:	69f8      	ldr	r0, [r7, #28]
   1357a:	f010 f9d3 	bl	23924 <is_ptr>
   1357e:	2800      	cmp	r0, #0
   13580:	d1c7      	bne.n	13512 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   13582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13584:	07da      	lsls	r2, r3, #31
   13586:	d405      	bmi.n	13594 <cbprintf_package_convert+0x190>
					out_len -= drop_ro_str_pos ? 2 : 1;
   13588:	eba5 050b 	sub.w	r5, r5, fp
   1358c:	e7ab      	b.n	134e6 <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13590:	2b00      	cmp	r3, #0
   13592:	d0a8      	beq.n	134e6 <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   13594:	4640      	mov	r0, r8
   13596:	f7f9 faa1 	bl	cadc <strlen>
				if (strl && strl_cnt < strl_len) {
   1359a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1359c:	b143      	cbz	r3, 135b0 <cbprintf_package_convert+0x1ac>
   1359e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   135a2:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   135a4:	bf3f      	itttt	cc
   135a6:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   135a8:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   135aa:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   135ae:	3601      	addcc	r6, #1
				out_len += (len - 1);
   135b0:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   135b2:	e798      	b.n	134e6 <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   135b4:	f1bb 0f00 	cmp.w	fp, #0
   135b8:	d06d      	beq.n	13696 <cbprintf_package_convert+0x292>
   135ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   135bc:	f013 0604 	ands.w	r6, r3, #4
   135c0:	d06c      	beq.n	1369c <cbprintf_package_convert+0x298>
		keep_cnt = ros_nbr;
   135c2:	46d9      	mov	r9, fp
		scpy_cnt = 0;
   135c4:	2600      	movs	r6, #0
		dst = keep_str_pos;
   135c6:	f107 0040 	add.w	r0, r7, #64	; 0x40
   135ca:	465a      	mov	r2, fp
   135cc:	4651      	mov	r1, sl
   135ce:	f013 fef5 	bl	273bc <memcpy>
	str_pos += ros_nbr;
   135d2:	697b      	ldr	r3, [r7, #20]
   135d4:	005b      	lsls	r3, r3, #1
   135d6:	607b      	str	r3, [r7, #4]
   135d8:	697b      	ldr	r3, [r7, #20]
   135da:	44da      	add	sl, fp
	for (int i = 0; i < rws_nbr; i++) {
   135dc:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   135e0:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   135e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   135e4:	f003 0302 	and.w	r3, r3, #2
   135e8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < rws_nbr; i++) {
   135ea:	68bb      	ldr	r3, [r7, #8]
   135ec:	4553      	cmp	r3, sl
   135ee:	d157      	bne.n	136a0 <cbprintf_package_convert+0x29c>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   135f0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   135f2:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   135f4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   135f6:	0789      	lsls	r1, r1, #30
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   135f8:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   135fc:	bf54      	ite	pl
   135fe:	ea4f 0159 	movpl.w	r1, r9, lsr #1
   13602:	2100      	movmi	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13604:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   13606:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13608:	f100 809a 	bmi.w	13740 <cbprintf_package_convert+0x33c>
   1360c:	f010 0f04 	tst.w	r0, #4
   13610:	bf14      	ite	ne
   13612:	4648      	movne	r0, r9
   13614:	2000      	moveq	r0, #0
   13616:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   13618:	7062      	strb	r2, [r4, #1]
   1361a:	70a0      	strb	r0, [r4, #2]
   1361c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   1361e:	69ba      	ldr	r2, [r7, #24]
   13620:	6939      	ldr	r1, [r7, #16]
   13622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13624:	4620      	mov	r0, r4
   13626:	4798      	blx	r3
	if (rv < 0) {
   13628:	1e05      	subs	r5, r0, #0
   1362a:	f6ff af15 	blt.w	13458 <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
   1362e:	6a3b      	ldr	r3, [r7, #32]
   13630:	7023      	strb	r3, [r4, #0]
   13632:	69fb      	ldr	r3, [r7, #28]
   13634:	7063      	strb	r3, [r4, #1]
   13636:	697b      	ldr	r3, [r7, #20]
   13638:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1363a:	4649      	mov	r1, r9
   1363c:	69ba      	ldr	r2, [r7, #24]
   1363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   13640:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   13644:	f107 0040 	add.w	r0, r7, #64	; 0x40
   13648:	4798      	blx	r3
	if (rv < 0) {
   1364a:	f1b0 0900 	subs.w	r9, r0, #0
   1364e:	f2c0 80a4 	blt.w	1379a <cbprintf_package_convert+0x396>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   13652:	693b      	ldr	r3, [r7, #16]
	rv = cb(str_pos, strs_len, ctx);
   13654:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   13656:	eba8 010b 	sub.w	r1, r8, fp
   1365a:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   1365c:	687b      	ldr	r3, [r7, #4]
   1365e:	4650      	mov	r0, sl
   13660:	1ac9      	subs	r1, r1, r3
   13662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13664:	4798      	blx	r3
	if (rv < 0) {
   13666:	2800      	cmp	r0, #0
   13668:	f2c0 8099 	blt.w	1379e <cbprintf_package_convert+0x39a>
	out_len += rv;
   1366c:	44a9      	add	r9, r5
	out_len += rv;
   1366e:	eb09 0500 	add.w	r5, r9, r0
	for (int i = 0; i < scpy_cnt; i++) {
   13672:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   13676:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   1367a:	45b3      	cmp	fp, r6
   1367c:	db62      	blt.n	13744 <cbprintf_package_convert+0x340>
	(void)cb(NULL, 0, ctx);
   1367e:	2100      	movs	r1, #0
   13680:	69ba      	ldr	r2, [r7, #24]
   13682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13684:	4608      	mov	r0, r1
   13686:	4798      	blx	r3
	return out_len;
   13688:	e6e6      	b.n	13458 <cbprintf_package_convert+0x54>
	if (cb == NULL) {
   1368a:	465e      	mov	r6, fp
   1368c:	f04f 0900 	mov.w	r9, #0
   13690:	f107 0030 	add.w	r0, r7, #48	; 0x30
   13694:	e799      	b.n	135ca <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
   13696:	465e      	mov	r6, fp
		keep_cnt = 0;
   13698:	46d9      	mov	r9, fp
   1369a:	e79a      	b.n	135d2 <cbprintf_package_convert+0x1ce>
   1369c:	46b1      	mov	r9, r6
   1369e:	e798      	b.n	135d2 <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
   136a0:	f81a 1b02 	ldrb.w	r1, [sl], #2
   136a4:	4b3f      	ldr	r3, [pc, #252]	; (137a4 <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
   136a6:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   136aa:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   136ae:	4298      	cmp	r0, r3
   136b0:	d302      	bcc.n	136b8 <cbprintf_package_convert+0x2b4>
   136b2:	4b3d      	ldr	r3, [pc, #244]	; (137a8 <cbprintf_package_convert+0x3a4>)
   136b4:	4298      	cmp	r0, r3
   136b6:	d31d      	bcc.n	136f4 <cbprintf_package_convert+0x2f0>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   136b8:	68fb      	ldr	r3, [r7, #12]
   136ba:	b123      	cbz	r3, 136c6 <cbprintf_package_convert+0x2c2>
   136bc:	69f8      	ldr	r0, [r7, #28]
   136be:	f010 f931 	bl	23924 <is_ptr>
   136c2:	2800      	cmp	r0, #0
   136c4:	d191      	bne.n	135ea <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   136c6:	683b      	ldr	r3, [r7, #0]
   136c8:	b9fb      	cbnz	r3, 1370a <cbprintf_package_convert+0x306>
				keep_str_pos[keep_cnt++] = arg_idx;
   136ca:	f109 0328 	add.w	r3, r9, #40	; 0x28
   136ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
   136d2:	f109 0001 	add.w	r0, r9, #1
   136d6:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
   136da:	f107 0350 	add.w	r3, r7, #80	; 0x50
   136de:	fa53 f080 	uxtab	r0, r3, r0
   136e2:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
   136e6:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   136ea:	fa5f f989 	uxtb.w	r9, r9
   136ee:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   136f2:	e77a      	b.n	135ea <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   136f4:	68fb      	ldr	r3, [r7, #12]
   136f6:	b12b      	cbz	r3, 13704 <cbprintf_package_convert+0x300>
   136f8:	69f8      	ldr	r0, [r7, #28]
   136fa:	f010 f913 	bl	23924 <is_ptr>
   136fe:	2800      	cmp	r0, #0
   13700:	f47f af73 	bne.w	135ea <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   13704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13706:	07db      	lsls	r3, r3, #31
   13708:	d509      	bpl.n	1371e <cbprintf_package_convert+0x31a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   1370a:	f106 0328 	add.w	r3, r6, #40	; 0x28
   1370e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13712:	1c71      	adds	r1, r6, #1
   13714:	189e      	adds	r6, r3, r2
   13716:	f806 5c20 	strb.w	r5, [r6, #-32]
   1371a:	b2ce      	uxtb	r6, r1
   1371c:	e765      	b.n	135ea <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1371e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13720:	0758      	lsls	r0, r3, #29
   13722:	f57f af62 	bpl.w	135ea <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   13726:	f109 0328 	add.w	r3, r9, #40	; 0x28
   1372a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1372e:	f109 0101 	add.w	r1, r9, #1
   13732:	eb03 0902 	add.w	r9, r3, r2
   13736:	f809 5c10 	strb.w	r5, [r9, #-16]
   1373a:	fa5f f981 	uxtb.w	r9, r1
   1373e:	e754      	b.n	135ea <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   13740:	2000      	movs	r0, #0
   13742:	e768      	b.n	13616 <cbprintf_package_convert+0x212>
		uint8_t loc = cpy_str_pos[i];
   13744:	f81b 300a 	ldrb.w	r3, [fp, sl]
   13748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   1374c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   13750:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   13752:	b1fb      	cbz	r3, 13794 <cbprintf_package_convert+0x390>
   13754:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   13758:	69ba      	ldr	r2, [r7, #24]
   1375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1375c:	2101      	movs	r1, #1
   1375e:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   13762:	4798      	blx	r3
		if (rv < 0) {
   13764:	2800      	cmp	r0, #0
   13766:	db1a      	blt.n	1379e <cbprintf_package_convert+0x39a>
		out_len += rv;
   13768:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   1376a:	f1b8 0f00 	cmp.w	r8, #0
   1376e:	d106      	bne.n	1377e <cbprintf_package_convert+0x37a>
   13770:	4648      	mov	r0, r9
   13772:	f7f9 f9b3 	bl	cadc <strlen>
   13776:	f100 0801 	add.w	r8, r0, #1
   1377a:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   1377e:	69ba      	ldr	r2, [r7, #24]
   13780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13782:	4641      	mov	r1, r8
   13784:	4648      	mov	r0, r9
   13786:	4798      	blx	r3
		if (rv < 0) {
   13788:	2800      	cmp	r0, #0
   1378a:	db08      	blt.n	1379e <cbprintf_package_convert+0x39a>
		out_len += rv;
   1378c:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   1378e:	f10b 0b01 	add.w	fp, fp, #1
   13792:	e772      	b.n	1367a <cbprintf_package_convert+0x276>
		uint16_t str_len = strl ? strl[i] : 0;
   13794:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   13798:	e7de      	b.n	13758 <cbprintf_package_convert+0x354>
   1379a:	464d      	mov	r5, r9
   1379c:	e65c      	b.n	13458 <cbprintf_package_convert+0x54>
   1379e:	4605      	mov	r5, r0
   137a0:	e65a      	b.n	13458 <cbprintf_package_convert+0x54>
   137a2:	bf00      	nop
   137a4:	00027bc8 	.word	0x00027bc8
   137a8:	0002ad28 	.word	0x0002ad28
   137ac:	00028f10 	.word	0x00028f10
   137b0:	01000004 	.word	0x01000004
   137b4:	00027fe4 	.word	0x00027fe4

000137b8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   137b8:	4b01      	ldr	r3, [pc, #4]	; (137c0 <__printk_hook_install+0x8>)
   137ba:	6018      	str	r0, [r3, #0]
}
   137bc:	4770      	bx	lr
   137be:	bf00      	nop
   137c0:	20000550 	.word	0x20000550

000137c4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   137c4:	b530      	push	{r4, r5, lr}
   137c6:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   137c8:	2500      	movs	r5, #0
   137ca:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   137ce:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   137d0:	9500      	str	r5, [sp, #0]
   137d2:	a903      	add	r1, sp, #12
   137d4:	4805      	ldr	r0, [pc, #20]	; (137ec <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   137d6:	9505      	str	r5, [sp, #20]
   137d8:	f7fd fc56 	bl	11088 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   137dc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   137e0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   137e2:	bfb8      	it	lt
   137e4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   137e6:	b007      	add	sp, #28
   137e8:	bd30      	pop	{r4, r5, pc}
   137ea:	bf00      	nop
   137ec:	00023973 	.word	0x00023973

000137f0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   137f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   137f4:	8b05      	ldrh	r5, [r0, #24]
{
   137f6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   137f8:	0728      	lsls	r0, r5, #28
{
   137fa:	4690      	mov	r8, r2
	if (processing) {
   137fc:	d411      	bmi.n	13822 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   137fe:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13800:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   13804:	f040 80cd 	bne.w	139a2 <process_event+0x1b2>
			evt = process_recheck(mgr);
   13808:	4620      	mov	r0, r4
   1380a:	f010 fab0 	bl	23d6e <process_recheck>
		}

		if (evt == EVT_NOP) {
   1380e:	b178      	cbz	r0, 13830 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   13810:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13812:	8b21      	ldrh	r1, [r4, #24]
   13814:	2804      	cmp	r0, #4
   13816:	d811      	bhi.n	1383c <process_event+0x4c>
   13818:	e8df f000 	tbb	[pc, r0]
   1381c:	856d10c3 	.word	0x856d10c3
   13820:	95          	.byte	0x95
   13821:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   13822:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   13824:	bf0c      	ite	eq
   13826:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1382a:	f045 0520 	orrne.w	r5, r5, #32
   1382e:	8325      	strh	r5, [r4, #24]
   13830:	f388 8811 	msr	BASEPRI, r8
   13834:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   13838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1383c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   13840:	45aa      	cmp	sl, r5
   13842:	f000 80a6 	beq.w	13992 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   13846:	2700      	movs	r7, #0
   13848:	46b9      	mov	r9, r7
   1384a:	463e      	mov	r6, r7
   1384c:	68a3      	ldr	r3, [r4, #8]
   1384e:	2b00      	cmp	r3, #0
   13850:	f000 80bd 	beq.w	139ce <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13854:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   13858:	8321      	strh	r1, [r4, #24]
   1385a:	f388 8811 	msr	BASEPRI, r8
   1385e:	f3bf 8f6f 	isb	sy
	return list->head;
   13862:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13864:	2900      	cmp	r1, #0
   13866:	f000 80bb 	beq.w	139e0 <process_event+0x1f0>
	return node->next;
   1386a:	680d      	ldr	r5, [r1, #0]
   1386c:	2900      	cmp	r1, #0
   1386e:	f000 80b7 	beq.w	139e0 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   13872:	f8d1 8004 	ldr.w	r8, [r1, #4]
   13876:	4633      	mov	r3, r6
   13878:	4652      	mov	r2, sl
   1387a:	4620      	mov	r0, r4
   1387c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1387e:	2d00      	cmp	r5, #0
   13880:	d076      	beq.n	13970 <process_event+0x180>
   13882:	682b      	ldr	r3, [r5, #0]
   13884:	4629      	mov	r1, r5
   13886:	461d      	mov	r5, r3
   13888:	e7f0      	b.n	1386c <process_event+0x7c>
   1388a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1388e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   13890:	2a01      	cmp	r2, #1
   13892:	d81b      	bhi.n	138cc <process_event+0xdc>
	list->head = NULL;
   13894:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13896:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   1389a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1389c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1389e:	b289      	uxth	r1, r1
	list->tail = NULL;
   138a0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   138a4:	d109      	bne.n	138ba <process_event+0xca>
   138a6:	463b      	mov	r3, r7
   138a8:	e003      	b.n	138b2 <process_event+0xc2>
				mgr->refs += 1U;
   138aa:	8b62      	ldrh	r2, [r4, #26]
   138ac:	3201      	adds	r2, #1
   138ae:	8362      	strh	r2, [r4, #26]
	return node->next;
   138b0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   138b2:	2b00      	cmp	r3, #0
   138b4:	d1f9      	bne.n	138aa <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   138b6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   138ba:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   138bc:	4620      	mov	r0, r4
   138be:	f010 fa56 	bl	23d6e <process_recheck>
   138c2:	2800      	cmp	r0, #0
   138c4:	d07b      	beq.n	139be <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   138c6:	f041 0120 	orr.w	r1, r1, #32
   138ca:	e077      	b.n	139bc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   138cc:	2b04      	cmp	r3, #4
   138ce:	d10a      	bne.n	138e6 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   138d0:	f021 0107 	bic.w	r1, r1, #7
   138d4:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   138d6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   138d8:	4620      	mov	r0, r4
   138da:	f010 fa48 	bl	23d6e <process_recheck>
   138de:	b110      	cbz	r0, 138e6 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   138e0:	f041 0120 	orr.w	r1, r1, #32
   138e4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   138e6:	8b21      	ldrh	r1, [r4, #24]
   138e8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   138ec:	45aa      	cmp	sl, r5
   138ee:	d050      	beq.n	13992 <process_event+0x1a2>
   138f0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   138f2:	46b9      	mov	r9, r7
   138f4:	e7aa      	b.n	1384c <process_event+0x5c>
			transit = mgr->transitions->start;
   138f6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   138f8:	f021 0107 	bic.w	r1, r1, #7
   138fc:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   13900:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   13902:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   13906:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   13908:	d12d      	bne.n	13966 <process_event+0x176>
		    || (transit != NULL)) {
   1390a:	f1b9 0f00 	cmp.w	r9, #0
   1390e:	d040      	beq.n	13992 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13910:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   13914:	8321      	strh	r1, [r4, #24]
   13916:	f388 8811 	msr	BASEPRI, r8
   1391a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   1391e:	493a      	ldr	r1, [pc, #232]	; (13a08 <process_event+0x218>)
   13920:	4620      	mov	r0, r4
   13922:	47c8      	blx	r9
   13924:	e029      	b.n	1397a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13926:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   1392a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1392c:	f041 0104 	orr.w	r1, r1, #4
   13930:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   13932:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   13934:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   13938:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1393a:	d0e6      	beq.n	1390a <process_event+0x11a>
   1393c:	2700      	movs	r7, #0
		res = 0;
   1393e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13940:	f04f 0a04 	mov.w	sl, #4
   13944:	e782      	b.n	1384c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13946:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   1394a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1394c:	f041 0105 	orr.w	r1, r1, #5
   13950:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   13952:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   13954:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   13958:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1395a:	d0d6      	beq.n	1390a <process_event+0x11a>
   1395c:	2700      	movs	r7, #0
		res = 0;
   1395e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13960:	f04f 0a05 	mov.w	sl, #5
   13964:	e772      	b.n	1384c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   13966:	2700      	movs	r7, #0
		res = 0;
   13968:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1396a:	f04f 0a06 	mov.w	sl, #6
   1396e:	e76d      	b.n	1384c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13970:	462b      	mov	r3, r5
   13972:	e787      	b.n	13884 <process_event+0x94>
			if (transit != NULL) {
   13974:	f1b9 0f00 	cmp.w	r9, #0
   13978:	d1d1      	bne.n	1391e <process_event+0x12e>
	__asm__ volatile(
   1397a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1397e:	f3ef 8811 	mrs	r8, BASEPRI
   13982:	f383 8812 	msr	BASEPRI_MAX, r3
   13986:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1398a:	8b23      	ldrh	r3, [r4, #24]
   1398c:	f023 0308 	bic.w	r3, r3, #8
   13990:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13992:	8b25      	ldrh	r5, [r4, #24]
   13994:	06ea      	lsls	r2, r5, #27
   13996:	d52e      	bpl.n	139f6 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13998:	f025 0310 	bic.w	r3, r5, #16
   1399c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1399e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   139a2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   139a4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   139a6:	2e00      	cmp	r6, #0
   139a8:	f6bf af6f 	bge.w	1388a <process_event+0x9a>
	list->head = NULL;
   139ac:	2300      	movs	r3, #0
		*clients = mgr->clients;
   139ae:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   139b0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   139b4:	f021 0107 	bic.w	r1, r1, #7
   139b8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   139bc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   139be:	8b21      	ldrh	r1, [r4, #24]
   139c0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   139c4:	45aa      	cmp	sl, r5
   139c6:	f04f 0900 	mov.w	r9, #0
   139ca:	f47f af3f 	bne.w	1384c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   139ce:	2f00      	cmp	r7, #0
   139d0:	d09b      	beq.n	1390a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   139d2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   139d6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   139d8:	f388 8811 	msr	BASEPRI, r8
   139dc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   139e0:	2f00      	cmp	r7, #0
   139e2:	d0c7      	beq.n	13974 <process_event+0x184>
	return node->next;
   139e4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   139e6:	4639      	mov	r1, r7
   139e8:	4633      	mov	r3, r6
   139ea:	4652      	mov	r2, sl
   139ec:	4620      	mov	r0, r4
   139ee:	f010 f9ea 	bl	23dc6 <notify_one>
	list->head = node;
   139f2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   139f4:	e7f4      	b.n	139e0 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   139f6:	06ab      	lsls	r3, r5, #26
   139f8:	f57f af1a 	bpl.w	13830 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   139fc:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13a00:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   13a02:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   13a06:	e6ff      	b.n	13808 <process_event+0x18>
   13a08:	00023df3 	.word	0x00023df3

00013a0c <extract_decimal>:
{
   13a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
   13a0e:	4e09      	ldr	r6, [pc, #36]	; (13a34 <extract_decimal+0x28>)
   13a10:	6801      	ldr	r1, [r0, #0]
{
   13a12:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   13a14:	270a      	movs	r7, #10
	size_t val = 0;
   13a16:	2000      	movs	r0, #0
   13a18:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
   13a1a:	3101      	adds	r1, #1
   13a1c:	781c      	ldrb	r4, [r3, #0]
   13a1e:	5d35      	ldrb	r5, [r6, r4]
   13a20:	076d      	lsls	r5, r5, #29
   13a22:	d401      	bmi.n	13a28 <extract_decimal+0x1c>
	*str = sp;
   13a24:	6013      	str	r3, [r2, #0]
}
   13a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   13a28:	fb07 4300 	mla	r3, r7, r0, r4
   13a2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   13a30:	e7f2      	b.n	13a18 <extract_decimal+0xc>
   13a32:	bf00      	nop
   13a34:	0002aa89 	.word	0x0002aa89

00013a38 <encode_uint>:
{
   13a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a3c:	4615      	mov	r5, r2
   13a3e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   13a40:	78d3      	ldrb	r3, [r2, #3]
   13a42:	4a22      	ldr	r2, [pc, #136]	; (13acc <encode_uint+0x94>)
   13a44:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
   13a48:	2b6f      	cmp	r3, #111	; 0x6f
{
   13a4a:	4680      	mov	r8, r0
   13a4c:	460f      	mov	r7, r1
   13a4e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   13a52:	d029      	beq.n	13aa8 <encode_uint+0x70>
   13a54:	d824      	bhi.n	13aa0 <encode_uint+0x68>
		return 10;
   13a56:	2b58      	cmp	r3, #88	; 0x58
   13a58:	bf0c      	ite	eq
   13a5a:	2610      	moveq	r6, #16
   13a5c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   13a5e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   13a62:	4632      	mov	r2, r6
   13a64:	2300      	movs	r3, #0
   13a66:	4640      	mov	r0, r8
   13a68:	4639      	mov	r1, r7
   13a6a:	f7ec ff67 	bl	93c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13a6e:	2a09      	cmp	r2, #9
   13a70:	b2d4      	uxtb	r4, r2
   13a72:	d81e      	bhi.n	13ab2 <encode_uint+0x7a>
   13a74:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   13a76:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13a78:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   13a7a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13a7e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   13a82:	d301      	bcc.n	13a88 <encode_uint+0x50>
   13a84:	45d1      	cmp	r9, sl
   13a86:	d811      	bhi.n	13aac <encode_uint+0x74>
	if (conv->flag_hash) {
   13a88:	782b      	ldrb	r3, [r5, #0]
   13a8a:	069b      	lsls	r3, r3, #26
   13a8c:	d505      	bpl.n	13a9a <encode_uint+0x62>
		if (radix == 8) {
   13a8e:	2e08      	cmp	r6, #8
   13a90:	d115      	bne.n	13abe <encode_uint+0x86>
			conv->altform_0 = true;
   13a92:	78ab      	ldrb	r3, [r5, #2]
   13a94:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   13a98:	70ab      	strb	r3, [r5, #2]
}
   13a9a:	4648      	mov	r0, r9
   13a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   13aa0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   13aa4:	2b70      	cmp	r3, #112	; 0x70
   13aa6:	e7d7      	b.n	13a58 <encode_uint+0x20>
	switch (specifier) {
   13aa8:	2608      	movs	r6, #8
   13aaa:	e7d8      	b.n	13a5e <encode_uint+0x26>
		value /= radix;
   13aac:	4680      	mov	r8, r0
   13aae:	460f      	mov	r7, r1
   13ab0:	e7d7      	b.n	13a62 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13ab2:	f1bb 0f01 	cmp.w	fp, #1
   13ab6:	bf0c      	ite	eq
   13ab8:	3437      	addeq	r4, #55	; 0x37
   13aba:	3457      	addne	r4, #87	; 0x57
   13abc:	e7db      	b.n	13a76 <encode_uint+0x3e>
		} else if (radix == 16) {
   13abe:	2e10      	cmp	r6, #16
   13ac0:	d1eb      	bne.n	13a9a <encode_uint+0x62>
			conv->altform_0c = true;
   13ac2:	78ab      	ldrb	r3, [r5, #2]
   13ac4:	f043 0310 	orr.w	r3, r3, #16
   13ac8:	e7e6      	b.n	13a98 <encode_uint+0x60>
   13aca:	bf00      	nop
   13acc:	0002aa89 	.word	0x0002aa89

00013ad0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13ad0:	b508      	push	{r3, lr}
	__asm__ volatile(
   13ad2:	f04f 0240 	mov.w	r2, #64	; 0x40
   13ad6:	f3ef 8311 	mrs	r3, BASEPRI
   13ada:	f382 8812 	msr	BASEPRI_MAX, r2
   13ade:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   13ae2:	f002 f881 	bl	15be8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   13ae6:	4803      	ldr	r0, [pc, #12]	; (13af4 <sys_reboot+0x24>)
   13ae8:	f00f ff58 	bl	2399c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   13aec:	f001 f8f8 	bl	14ce0 <arch_cpu_idle>
   13af0:	e7fc      	b.n	13aec <sys_reboot+0x1c>
   13af2:	bf00      	nop
   13af4:	00028fca 	.word	0x00028fca

00013af8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13af8:	f009 bb16 	b.w	1d128 <SystemInit>

00013afc <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   13afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b00:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13b5c <activate_foreach_backend+0x60>
{
   13b04:	4604      	mov	r4, r0
	while (mask_cpy) {
   13b06:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   13b08:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   13b0c:	b914      	cbnz	r4, 13b14 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   13b0e:	4638      	mov	r0, r7
   13b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   13b14:	fa94 f5a4 	rbit	r5, r4
   13b18:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   13b1c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b20:	012e      	lsls	r6, r5, #4
   13b22:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   13b26:	ea6f 0a03 	mvn.w	sl, r3
   13b2a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b2e:	7b2b      	ldrb	r3, [r5, #12]
   13b30:	2b00      	cmp	r3, #0
   13b32:	d0eb      	beq.n	13b0c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   13b34:	f858 3006 	ldr.w	r3, [r8, r6]
   13b38:	691b      	ldr	r3, [r3, #16]
   13b3a:	b94b      	cbnz	r3, 13b50 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   13b3c:	4446      	add	r6, r8
			log_backend_enable(backend,
   13b3e:	2204      	movs	r2, #4
   13b40:	6873      	ldr	r3, [r6, #4]
   13b42:	4628      	mov	r0, r5
   13b44:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   13b46:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   13b4a:	f000 fa55 	bl	13ff8 <log_backend_enable>
   13b4e:	e7dd      	b.n	13b0c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   13b50:	4628      	mov	r0, r5
   13b52:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b54:	2800      	cmp	r0, #0
   13b56:	d1d9      	bne.n	13b0c <activate_foreach_backend+0x10>
   13b58:	e7f0      	b.n	13b3c <activate_foreach_backend+0x40>
   13b5a:	bf00      	nop
   13b5c:	00028074 	.word	0x00028074

00013b60 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   13b60:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13b62:	4910      	ldr	r1, [pc, #64]	; (13ba4 <enable_logger+0x44>)
   13b64:	4810      	ldr	r0, [pc, #64]	; (13ba8 <enable_logger+0x48>)
{
   13b66:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   13b68:	2200      	movs	r2, #0
   13b6a:	f013 fa90 	bl	2708e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13b6e:	4d0f      	ldr	r5, [pc, #60]	; (13bac <enable_logger+0x4c>)
   13b70:	490f      	ldr	r1, [pc, #60]	; (13bb0 <enable_logger+0x50>)
   13b72:	2200      	movs	r2, #0
   13b74:	2300      	movs	r3, #0
   13b76:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13b7a:	2400      	movs	r4, #0
   13b7c:	230e      	movs	r3, #14
   13b7e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   13b82:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13b86:	4b0b      	ldr	r3, [pc, #44]	; (13bb4 <enable_logger+0x54>)
   13b88:	9400      	str	r4, [sp, #0]
   13b8a:	f44f 7240 	mov.w	r2, #768	; 0x300
   13b8e:	4628      	mov	r0, r5
   13b90:	f00a f9f2 	bl	1df78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13b94:	4908      	ldr	r1, [pc, #32]	; (13bb8 <enable_logger+0x58>)
   13b96:	4628      	mov	r0, r5
   13b98:	f012 ff2d 	bl	269f6 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   13b9c:	4620      	mov	r0, r4
   13b9e:	b009      	add	sp, #36	; 0x24
   13ba0:	bd30      	pop	{r4, r5, pc}
   13ba2:	bf00      	nop
   13ba4:	00013bbd 	.word	0x00013bbd
   13ba8:	20001f60 	.word	0x20001f60
   13bac:	20001a90 	.word	0x20001a90
   13bb0:	20004f00 	.word	0x20004f00
   13bb4:	00013ea5 	.word	0x00013ea5
   13bb8:	00028ff3 	.word	0x00028ff3

00013bbc <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   13bbc:	4801      	ldr	r0, [pc, #4]	; (13bc4 <log_process_thread_timer_expiry_fn+0x8>)
   13bbe:	f00a bb69 	b.w	1e294 <z_impl_k_sem_give>
   13bc2:	bf00      	nop
   13bc4:	20000c3c 	.word	0x20000c3c

00013bc8 <z_log_init>:
{
   13bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13bcc:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   13bce:	481f      	ldr	r0, [pc, #124]	; (13c4c <z_log_init+0x84>)
{
   13bd0:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   13bd2:	f010 fc18 	bl	24406 <atomic_inc>
   13bd6:	4606      	mov	r6, r0
   13bd8:	2800      	cmp	r0, #0
   13bda:	d030      	beq.n	13c3e <z_log_init+0x76>
	uint32_t mask = 0;
   13bdc:	2500      	movs	r5, #0
}
   13bde:	4628      	mov	r0, r5
   13be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   13be4:	7b23      	ldrb	r3, [r4, #12]
   13be6:	b173      	cbz	r3, 13c06 <z_log_init+0x3e>
	if (backend->api->init) {
   13be8:	6823      	ldr	r3, [r4, #0]
   13bea:	68db      	ldr	r3, [r3, #12]
   13bec:	b10b      	cbz	r3, 13bf2 <z_log_init+0x2a>
		backend->api->init(backend);
   13bee:	4620      	mov	r0, r4
   13bf0:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   13bf2:	6823      	ldr	r3, [r4, #0]
   13bf4:	691b      	ldr	r3, [r3, #16]
   13bf6:	b9d3      	cbnz	r3, 13c2e <z_log_init+0x66>
				log_backend_enable(backend,
   13bf8:	6863      	ldr	r3, [r4, #4]
   13bfa:	2204      	movs	r2, #4
   13bfc:	6819      	ldr	r1, [r3, #0]
   13bfe:	4620      	mov	r0, r4
   13c00:	f000 f9fa 	bl	13ff8 <log_backend_enable>
			i++;
   13c04:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c06:	3410      	adds	r4, #16
   13c08:	454c      	cmp	r4, r9
   13c0a:	d3eb      	bcc.n	13be4 <z_log_init+0x1c>
	if (blocking) {
   13c0c:	f1b8 0f00 	cmp.w	r8, #0
   13c10:	d0e5      	beq.n	13bde <z_log_init+0x16>
		while (mask) {
   13c12:	2d00      	cmp	r5, #0
   13c14:	d0e2      	beq.n	13bdc <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   13c16:	4628      	mov	r0, r5
   13c18:	f7ff ff70 	bl	13afc <activate_foreach_backend>
   13c1c:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13c1e:	2f00      	cmp	r7, #0
   13c20:	d0f7      	beq.n	13c12 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   13c22:	2100      	movs	r1, #0
   13c24:	f44f 70a4 	mov.w	r0, #328	; 0x148
   13c28:	f00a ff7e 	bl	1eb28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13c2c:	e7f1      	b.n	13c12 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   13c2e:	4620      	mov	r0, r4
   13c30:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13c32:	2800      	cmp	r0, #0
   13c34:	d0e0      	beq.n	13bf8 <z_log_init+0x30>
				mask |= BIT(i);
   13c36:	fa0a f306 	lsl.w	r3, sl, r6
   13c3a:	431d      	orrs	r5, r3
   13c3c:	e7e2      	b.n	13c04 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c3e:	4c04      	ldr	r4, [pc, #16]	; (13c50 <z_log_init+0x88>)
   13c40:	f8df 9010 	ldr.w	r9, [pc, #16]	; 13c54 <z_log_init+0x8c>
	uint32_t mask = 0;
   13c44:	4605      	mov	r5, r0
				mask |= BIT(i);
   13c46:	f04f 0a01 	mov.w	sl, #1
   13c4a:	e7dd      	b.n	13c08 <z_log_init+0x40>
   13c4c:	20003028 	.word	0x20003028
   13c50:	00028074 	.word	0x00028074
   13c54:	00028094 	.word	0x00028094

00013c58 <log_format_func_t_get>:
}
   13c58:	4b01      	ldr	r3, [pc, #4]	; (13c60 <log_format_func_t_get+0x8>)
   13c5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13c5e:	4770      	bx	lr
   13c60:	00028300 	.word	0x00028300

00013c64 <log_set_timestamp_func>:
{
   13c64:	b508      	push	{r3, lr}
   13c66:	4603      	mov	r3, r0
   13c68:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   13c6a:	b12b      	cbz	r3, 13c78 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   13c6c:	4a04      	ldr	r2, [pc, #16]	; (13c80 <log_set_timestamp_func+0x1c>)
   13c6e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   13c70:	f000 fc4a 	bl	14508 <log_output_timestamp_freq_set>
	return 0;
   13c74:	2000      	movs	r0, #0
}
   13c76:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13c78:	f06f 0015 	mvn.w	r0, #21
   13c7c:	e7fb      	b.n	13c76 <log_set_timestamp_func+0x12>
   13c7e:	bf00      	nop
   13c80:	20000554 	.word	0x20000554

00013c84 <z_log_notify_backend_enabled>:
{
   13c84:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13c86:	4c04      	ldr	r4, [pc, #16]	; (13c98 <z_log_notify_backend_enabled+0x14>)
   13c88:	7823      	ldrb	r3, [r4, #0]
   13c8a:	b913      	cbnz	r3, 13c92 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   13c8c:	4803      	ldr	r0, [pc, #12]	; (13c9c <z_log_notify_backend_enabled+0x18>)
   13c8e:	f00a fb01 	bl	1e294 <z_impl_k_sem_give>
	backend_attached = true;
   13c92:	2301      	movs	r3, #1
   13c94:	7023      	strb	r3, [r4, #0]
}
   13c96:	bd10      	pop	{r4, pc}
   13c98:	20004497 	.word	0x20004497
   13c9c:	20000c3c 	.word	0x20000c3c

00013ca0 <z_log_dropped>:
{
   13ca0:	b510      	push	{r4, lr}
   13ca2:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   13ca4:	4808      	ldr	r0, [pc, #32]	; (13cc8 <z_log_dropped+0x28>)
   13ca6:	f010 fbae 	bl	24406 <atomic_inc>
	if (buffered) {
   13caa:	b15c      	cbz	r4, 13cc4 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13cac:	f3bf 8f5b 	dmb	ish
   13cb0:	4b06      	ldr	r3, [pc, #24]	; (13ccc <z_log_dropped+0x2c>)
   13cb2:	e853 1f00 	ldrex	r1, [r3]
   13cb6:	3901      	subs	r1, #1
   13cb8:	e843 1200 	strex	r2, r1, [r3]
   13cbc:	2a00      	cmp	r2, #0
   13cbe:	d1f8      	bne.n	13cb2 <z_log_dropped+0x12>
   13cc0:	f3bf 8f5b 	dmb	ish
}
   13cc4:	bd10      	pop	{r4, pc}
   13cc6:	bf00      	nop
   13cc8:	20003020 	.word	0x20003020
   13ccc:	20003024 	.word	0x20003024

00013cd0 <z_log_dropped_read_and_clear>:
}
   13cd0:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13cd2:	4b06      	ldr	r3, [pc, #24]	; (13cec <z_log_dropped_read_and_clear+0x1c>)
   13cd4:	f3bf 8f5b 	dmb	ish
   13cd8:	4601      	mov	r1, r0
   13cda:	e853 0f00 	ldrex	r0, [r3]
   13cde:	e843 1200 	strex	r2, r1, [r3]
   13ce2:	2a00      	cmp	r2, #0
   13ce4:	d1f9      	bne.n	13cda <z_log_dropped_read_and_clear+0xa>
   13ce6:	f3bf 8f5b 	dmb	ish
   13cea:	4770      	bx	lr
   13cec:	20003020 	.word	0x20003020

00013cf0 <dropped_notify>:
{
   13cf0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13cf2:	f7ff ffed 	bl	13cd0 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13cf6:	4c08      	ldr	r4, [pc, #32]	; (13d18 <dropped_notify+0x28>)
   13cf8:	4e08      	ldr	r6, [pc, #32]	; (13d1c <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   13cfa:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13cfc:	42b4      	cmp	r4, r6
   13cfe:	d300      	bcc.n	13d02 <dropped_notify+0x12>
}
   13d00:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13d02:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13d04:	795b      	ldrb	r3, [r3, #5]
   13d06:	b12b      	cbz	r3, 13d14 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   13d08:	6823      	ldr	r3, [r4, #0]
   13d0a:	685b      	ldr	r3, [r3, #4]
   13d0c:	b113      	cbz	r3, 13d14 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   13d0e:	4629      	mov	r1, r5
   13d10:	4620      	mov	r0, r4
   13d12:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d14:	3410      	adds	r4, #16
   13d16:	e7f1      	b.n	13cfc <dropped_notify+0xc>
   13d18:	00028074 	.word	0x00028074
   13d1c:	00028094 	.word	0x00028094

00013d20 <z_log_msg_init>:
{
   13d20:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13d22:	4c04      	ldr	r4, [pc, #16]	; (13d34 <z_log_msg_init+0x14>)
   13d24:	4904      	ldr	r1, [pc, #16]	; (13d38 <z_log_msg_init+0x18>)
   13d26:	4620      	mov	r0, r4
   13d28:	f010 fa0a 	bl	24140 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13d2c:	4b03      	ldr	r3, [pc, #12]	; (13d3c <z_log_msg_init+0x1c>)
   13d2e:	601c      	str	r4, [r3, #0]
}
   13d30:	bd10      	pop	{r4, pc}
   13d32:	bf00      	nop
   13d34:	20000af0 	.word	0x20000af0
   13d38:	000282ec 	.word	0x000282ec
   13d3c:	20003018 	.word	0x20003018

00013d40 <log_core_init>:
{
   13d40:	b508      	push	{r3, lr}
	panic_mode = false;
   13d42:	4a07      	ldr	r2, [pc, #28]	; (13d60 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   13d44:	4807      	ldr	r0, [pc, #28]	; (13d64 <log_core_init+0x24>)
	panic_mode = false;
   13d46:	2300      	movs	r3, #0
   13d48:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13d4a:	4a07      	ldr	r2, [pc, #28]	; (13d68 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
   13d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
   13d50:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13d52:	f7ff ff87 	bl	13c64 <log_set_timestamp_func>
}
   13d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   13d5a:	f7ff bfe1 	b.w	13d20 <z_log_msg_init>
   13d5e:	bf00      	nop
   13d60:	20004498 	.word	0x20004498
   13d64:	00024403 	.word	0x00024403
   13d68:	20003020 	.word	0x20003020

00013d6c <z_log_msg_alloc>:
{
   13d6c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   13d6e:	2200      	movs	r2, #0
   13d70:	4801      	ldr	r0, [pc, #4]	; (13d78 <z_log_msg_alloc+0xc>)
   13d72:	2300      	movs	r3, #0
   13d74:	f010 ba05 	b.w	24182 <mpsc_pbuf_alloc>
   13d78:	20000af0 	.word	0x20000af0

00013d7c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13d7c:	4801      	ldr	r0, [pc, #4]	; (13d84 <z_log_msg_local_claim+0x8>)
   13d7e:	f010 ba9e 	b.w	242be <mpsc_pbuf_claim>
   13d82:	bf00      	nop
   13d84:	20000af0 	.word	0x20000af0

00013d88 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   13d88:	4b02      	ldr	r3, [pc, #8]	; (13d94 <z_log_msg_free+0xc>)
{
   13d8a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   13d8c:	6818      	ldr	r0, [r3, #0]
   13d8e:	f010 bae6 	b.w	2435e <mpsc_pbuf_free>
   13d92:	bf00      	nop
   13d94:	20003018 	.word	0x20003018

00013d98 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   13d98:	4801      	ldr	r0, [pc, #4]	; (13da0 <z_log_msg_pending+0x8>)
   13d9a:	f010 bb14 	b.w	243c6 <mpsc_pbuf_is_pending>
   13d9e:	bf00      	nop
   13da0:	20000af0 	.word	0x20000af0

00013da4 <z_impl_log_process>:
{
   13da4:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   13da6:	4b28      	ldr	r3, [pc, #160]	; (13e48 <z_impl_log_process+0xa4>)
   13da8:	7818      	ldrb	r0, [r3, #0]
   13daa:	2800      	cmp	r0, #0
   13dac:	d04b      	beq.n	13e46 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   13dae:	f7ff ffe5 	bl	13d7c <z_log_msg_local_claim>
	if (msg) {
   13db2:	4605      	mov	r5, r0
   13db4:	b190      	cbz	r0, 13ddc <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13db6:	f3bf 8f5b 	dmb	ish
   13dba:	4b24      	ldr	r3, [pc, #144]	; (13e4c <z_impl_log_process+0xa8>)
   13dbc:	e853 1f00 	ldrex	r1, [r3]
   13dc0:	3901      	subs	r1, #1
   13dc2:	e843 1200 	strex	r2, r1, [r3]
   13dc6:	2a00      	cmp	r2, #0
   13dc8:	d1f8      	bne.n	13dbc <z_impl_log_process+0x18>
   13dca:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13dce:	4c20      	ldr	r4, [pc, #128]	; (13e50 <z_impl_log_process+0xac>)
   13dd0:	4e20      	ldr	r6, [pc, #128]	; (13e54 <z_impl_log_process+0xb0>)
   13dd2:	42b4      	cmp	r4, r6
   13dd4:	d32d      	bcc.n	13e32 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   13dd6:	4628      	mov	r0, r5
   13dd8:	f7ff ffd6 	bl	13d88 <z_log_msg_free>
	return dropped_cnt > 0;
   13ddc:	4b1e      	ldr	r3, [pc, #120]	; (13e58 <z_impl_log_process+0xb4>)
   13dde:	4c1f      	ldr	r4, [pc, #124]	; (13e5c <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   13de0:	681b      	ldr	r3, [r3, #0]
   13de2:	2b00      	cmp	r3, #0
   13de4:	dd19      	ble.n	13e1a <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   13de6:	f013 f92a 	bl	2703e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13dee:	fba0 0302 	umull	r0, r3, r0, r2
   13df2:	fb02 3101 	mla	r1, r2, r1, r3
   13df6:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13df8:	e9d4 2000 	ldrd	r2, r0, [r4]
   13dfc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   13e00:	1a9b      	subs	r3, r3, r2
   13e02:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   13e06:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13e0a:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   13e0e:	4293      	cmp	r3, r2
   13e10:	f171 0100 	sbcs.w	r1, r1, #0
   13e14:	d301      	bcc.n	13e1a <z_impl_log_process+0x76>
				dropped_notify();
   13e16:	f7ff ff6b 	bl	13cf0 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13e1a:	e9d4 3200 	ldrd	r3, r2, [r4]
   13e1e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13e22:	f142 0200 	adc.w	r2, r2, #0
   13e26:	e9c4 3200 	strd	r3, r2, [r4]
}
   13e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   13e2e:	f7ff bfb3 	b.w	13d98 <z_log_msg_pending>
	return backend->cb->active;
   13e32:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   13e34:	795b      	ldrb	r3, [r3, #5]
   13e36:	b123      	cbz	r3, 13e42 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   13e38:	6823      	ldr	r3, [r4, #0]
   13e3a:	4629      	mov	r1, r5
   13e3c:	681b      	ldr	r3, [r3, #0]
   13e3e:	4620      	mov	r0, r4
   13e40:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e42:	3410      	adds	r4, #16
   13e44:	e7c5      	b.n	13dd2 <z_impl_log_process+0x2e>
}
   13e46:	bd70      	pop	{r4, r5, r6, pc}
   13e48:	20004497 	.word	0x20004497
   13e4c:	20003024 	.word	0x20003024
   13e50:	00028074 	.word	0x00028074
   13e54:	00028094 	.word	0x00028094
   13e58:	20003020 	.word	0x20003020
   13e5c:	20001f58 	.word	0x20001f58

00013e60 <z_impl_log_panic>:
{
   13e60:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   13e62:	4d0d      	ldr	r5, [pc, #52]	; (13e98 <z_impl_log_panic+0x38>)
   13e64:	7829      	ldrb	r1, [r5, #0]
   13e66:	b961      	cbnz	r1, 13e82 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   13e68:	2001      	movs	r0, #1
   13e6a:	f7ff fead 	bl	13bc8 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e6e:	4c0b      	ldr	r4, [pc, #44]	; (13e9c <z_impl_log_panic+0x3c>)
   13e70:	4e0b      	ldr	r6, [pc, #44]	; (13ea0 <z_impl_log_panic+0x40>)
   13e72:	42b4      	cmp	r4, r6
   13e74:	d306      	bcc.n	13e84 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13e76:	f7ff ff95 	bl	13da4 <z_impl_log_process>
		while (log_process() == true) {
   13e7a:	2800      	cmp	r0, #0
   13e7c:	d1fb      	bne.n	13e76 <z_impl_log_panic+0x16>
	panic_mode = true;
   13e7e:	2301      	movs	r3, #1
   13e80:	702b      	strb	r3, [r5, #0]
}
   13e82:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   13e84:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13e86:	795b      	ldrb	r3, [r3, #5]
   13e88:	b11b      	cbz	r3, 13e92 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   13e8a:	6823      	ldr	r3, [r4, #0]
   13e8c:	4620      	mov	r0, r4
   13e8e:	689b      	ldr	r3, [r3, #8]
   13e90:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e92:	3410      	adds	r4, #16
   13e94:	e7ed      	b.n	13e72 <z_impl_log_panic+0x12>
   13e96:	bf00      	nop
   13e98:	20004498 	.word	0x20004498
   13e9c:	00028074 	.word	0x00028074
   13ea0:	00028094 	.word	0x00028094

00013ea4 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   13ea4:	2100      	movs	r1, #0
{
   13ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   13eaa:	4608      	mov	r0, r1
   13eac:	f7ff fe8c 	bl	13bc8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13eb0:	4604      	mov	r4, r0
   13eb2:	b348      	cbz	r0, 13f08 <log_process_thread_func+0x64>
   13eb4:	f240 6867 	movw	r8, #1639	; 0x667
   13eb8:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13ebc:	f00a fe4e 	bl	1eb5c <z_impl_z_current_get>
	proc_tid = process_tid;
   13ec0:	4b1a      	ldr	r3, [pc, #104]	; (13f2c <log_process_thread_func+0x88>)
   13ec2:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13ec4:	b130      	cbz	r0, 13ed4 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13ec6:	4b1a      	ldr	r3, [pc, #104]	; (13f30 <log_process_thread_func+0x8c>)
	    process_tid &&
   13ec8:	681b      	ldr	r3, [r3, #0]
   13eca:	2b09      	cmp	r3, #9
   13ecc:	dd02      	ble.n	13ed4 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   13ece:	4819      	ldr	r0, [pc, #100]	; (13f34 <log_process_thread_func+0x90>)
   13ed0:	f00a f9e0 	bl	1e294 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13ed4:	4f18      	ldr	r7, [pc, #96]	; (13f38 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   13ed6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 13f34 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13eda:	2500      	movs	r5, #0
		if (activate_mask) {
   13edc:	b144      	cbz	r4, 13ef0 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   13ede:	4620      	mov	r0, r4
   13ee0:	f7ff fe0c 	bl	13afc <activate_foreach_backend>
			if (!activate_mask) {
   13ee4:	4604      	mov	r4, r0
   13ee6:	b918      	cbnz	r0, 13ef0 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   13ee8:	f04f 38ff 	mov.w	r8, #4294967295
   13eec:	f04f 39ff 	mov.w	r9, #4294967295
   13ef0:	f7ff ff58 	bl	13da4 <z_impl_log_process>
		if (log_process() == false) {
   13ef4:	4606      	mov	r6, r0
   13ef6:	b928      	cbnz	r0, 13f04 <log_process_thread_func+0x60>
			if (processed_any) {
   13ef8:	b9b5      	cbnz	r5, 13f28 <log_process_thread_func+0x84>
   13efa:	4642      	mov	r2, r8
   13efc:	464b      	mov	r3, r9
   13efe:	4650      	mov	r0, sl
   13f00:	f00a f9ee 	bl	1e2e0 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13f04:	4635      	mov	r5, r6
   13f06:	e7e9      	b.n	13edc <log_process_thread_func+0x38>
   13f08:	f04f 38ff 	mov.w	r8, #4294967295
   13f0c:	f04f 39ff 	mov.w	r9, #4294967295
   13f10:	e7d4      	b.n	13ebc <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13f12:	682b      	ldr	r3, [r5, #0]
   13f14:	699b      	ldr	r3, [r3, #24]
   13f16:	b11b      	cbz	r3, 13f20 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   13f18:	2200      	movs	r2, #0
   13f1a:	4611      	mov	r1, r2
   13f1c:	4628      	mov	r0, r5
   13f1e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13f20:	3510      	adds	r5, #16
   13f22:	42bd      	cmp	r5, r7
   13f24:	d3f5      	bcc.n	13f12 <log_process_thread_func+0x6e>
   13f26:	e7e8      	b.n	13efa <log_process_thread_func+0x56>
   13f28:	4d04      	ldr	r5, [pc, #16]	; (13f3c <log_process_thread_func+0x98>)
   13f2a:	e7fa      	b.n	13f22 <log_process_thread_func+0x7e>
   13f2c:	2000301c 	.word	0x2000301c
   13f30:	20003024 	.word	0x20003024
   13f34:	20000c3c 	.word	0x20000c3c
   13f38:	00028094 	.word	0x00028094
   13f3c:	00028074 	.word	0x00028074

00013f40 <z_log_msg_post_finalize>:
{
   13f40:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   13f42:	4818      	ldr	r0, [pc, #96]	; (13fa4 <z_log_msg_post_finalize+0x64>)
   13f44:	f010 fa5f 	bl	24406 <atomic_inc>
	if (panic_mode) {
   13f48:	4b17      	ldr	r3, [pc, #92]	; (13fa8 <z_log_msg_post_finalize+0x68>)
   13f4a:	781b      	ldrb	r3, [r3, #0]
   13f4c:	b17b      	cbz	r3, 13f6e <z_log_msg_post_finalize+0x2e>
   13f4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13f52:	f3ef 8411 	mrs	r4, BASEPRI
   13f56:	f383 8812 	msr	BASEPRI_MAX, r3
   13f5a:	f3bf 8f6f 	isb	sy
   13f5e:	f7ff ff21 	bl	13da4 <z_impl_log_process>
	__asm__ volatile(
   13f62:	f384 8811 	msr	BASEPRI, r4
   13f66:	f3bf 8f6f 	isb	sy
}
   13f6a:	b002      	add	sp, #8
   13f6c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   13f6e:	4b0f      	ldr	r3, [pc, #60]	; (13fac <z_log_msg_post_finalize+0x6c>)
   13f70:	681b      	ldr	r3, [r3, #0]
   13f72:	2b00      	cmp	r3, #0
   13f74:	d0f9      	beq.n	13f6a <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   13f76:	b950      	cbnz	r0, 13f8e <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   13f78:	2200      	movs	r2, #0
   13f7a:	2300      	movs	r3, #0
   13f7c:	e9cd 2300 	strd	r2, r3, [sp]
   13f80:	480b      	ldr	r0, [pc, #44]	; (13fb0 <z_log_msg_post_finalize+0x70>)
   13f82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13f86:	2300      	movs	r3, #0
   13f88:	f00b f824 	bl	1efd4 <z_impl_k_timer_start>
   13f8c:	e7ed      	b.n	13f6a <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13f8e:	280a      	cmp	r0, #10
   13f90:	d1eb      	bne.n	13f6a <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   13f92:	4807      	ldr	r0, [pc, #28]	; (13fb0 <z_log_msg_post_finalize+0x70>)
   13f94:	f013 f887 	bl	270a6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13f98:	4806      	ldr	r0, [pc, #24]	; (13fb4 <z_log_msg_post_finalize+0x74>)
}
   13f9a:	b002      	add	sp, #8
   13f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13fa0:	f00a b978 	b.w	1e294 <z_impl_k_sem_give>
   13fa4:	20003024 	.word	0x20003024
   13fa8:	20004498 	.word	0x20004498
   13fac:	2000301c 	.word	0x2000301c
   13fb0:	20001f60 	.word	0x20001f60
   13fb4:	20000c3c 	.word	0x20000c3c

00013fb8 <z_log_msg_commit>:
{
   13fb8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   13fba:	4b06      	ldr	r3, [pc, #24]	; (13fd4 <z_log_msg_commit+0x1c>)
   13fbc:	681b      	ldr	r3, [r3, #0]
{
   13fbe:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13fc0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   13fc2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   13fc4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   13fc6:	4804      	ldr	r0, [pc, #16]	; (13fd8 <z_log_msg_commit+0x20>)
   13fc8:	f010 f959 	bl	2427e <mpsc_pbuf_commit>
}
   13fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   13fd0:	f7ff bfb6 	b.w	13f40 <z_log_msg_post_finalize>
   13fd4:	20000554 	.word	0x20000554
   13fd8:	20000af0 	.word	0x20000af0

00013fdc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   13fdc:	4a04      	ldr	r2, [pc, #16]	; (13ff0 <log_source_name_get+0x14>)
   13fde:	4b05      	ldr	r3, [pc, #20]	; (13ff4 <log_source_name_get+0x18>)
   13fe0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13fe2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   13fe6:	bf34      	ite	cc
   13fe8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   13fec:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   13fee:	4770      	bx	lr
   13ff0:	00027f74 	.word	0x00027f74
   13ff4:	00028074 	.word	0x00028074

00013ff8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13ff8:	4b08      	ldr	r3, [pc, #32]	; (1401c <log_backend_enable+0x24>)
   13ffa:	1ac3      	subs	r3, r0, r3
{
   13ffc:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   13ffe:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   14000:	6844      	ldr	r4, [r0, #4]
   14002:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   14004:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   14006:	6843      	ldr	r3, [r0, #4]
   14008:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   1400a:	6843      	ldr	r3, [r0, #4]
   1400c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1400e:	6843      	ldr	r3, [r0, #4]
   14010:	2201      	movs	r2, #1
   14012:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   14014:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
   14018:	f7ff be34 	b.w	13c84 <z_log_notify_backend_enabled>
   1401c:	00028074 	.word	0x00028074

00014020 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   14020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14024:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   14026:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   1402a:	f3c1 2649 	ubfx	r6, r1, #9, #10
   1402e:	9005      	str	r0, [sp, #20]
   14030:	460d      	mov	r5, r1
   14032:	4690      	mov	r8, r2
   14034:	4699      	mov	r9, r3
   14036:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   14038:	2e00      	cmp	r6, #0
   1403a:	d03c      	beq.n	140b6 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   1403c:	f04f 0b04 	mov.w	fp, #4
   14040:	af09      	add	r7, sp, #36	; 0x24
   14042:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   14046:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   14048:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   1404a:	ab0b      	add	r3, sp, #44	; 0x2c
   1404c:	f8cd b008 	str.w	fp, [sp, #8]
   14050:	9701      	str	r7, [sp, #4]
   14052:	f8cd a000 	str.w	sl, [sp]
   14056:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   14058:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   1405c:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1405e:	9607      	str	r6, [sp, #28]
   14060:	f7ff f9d0 	bl	13404 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   14064:	f3c0 0309 	ubfx	r3, r0, #0, #10
   14068:	1918      	adds	r0, r3, r4
   1406a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1406e:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   14070:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14072:	f363 2552 	bfi	r5, r3, #9, #10
   14076:	9306      	str	r3, [sp, #24]
   14078:	f7ff fe78 	bl	13d6c <z_log_msg_alloc>
		if (msg) {
   1407c:	4604      	mov	r4, r0
   1407e:	b178      	cbz	r0, 140a0 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   14080:	9b06      	ldr	r3, [sp, #24]
   14082:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   14084:	3010      	adds	r0, #16
   14086:	2200      	movs	r2, #0
   14088:	900b      	str	r0, [sp, #44]	; 0x2c
   1408a:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1408c:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   14090:	4a0c      	ldr	r2, [pc, #48]	; (140c4 <z_impl_z_log_msg_static_create+0xa4>)
   14092:	9907      	ldr	r1, [sp, #28]
   14094:	f8cd a000 	str.w	sl, [sp]
   14098:	ab0b      	add	r3, sp, #44	; 0x2c
   1409a:	4640      	mov	r0, r8
   1409c:	f7ff f9b2 	bl	13404 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   140a0:	f366 2552 	bfi	r5, r6, #9, #10
   140a4:	9905      	ldr	r1, [sp, #20]
   140a6:	464b      	mov	r3, r9
   140a8:	462a      	mov	r2, r5
   140aa:	4620      	mov	r0, r4
}
   140ac:	b00f      	add	sp, #60	; 0x3c
   140ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   140b2:	f010 b9de 	b.w	24472 <z_log_msg_finalize>
   140b6:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   140ba:	0880      	lsrs	r0, r0, #2
   140bc:	f7ff fe56 	bl	13d6c <z_log_msg_alloc>
   140c0:	4604      	mov	r4, r0
   140c2:	e7ed      	b.n	140a0 <z_impl_z_log_msg_static_create+0x80>
   140c4:	00024447 	.word	0x00024447

000140c8 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   140c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140cc:	b087      	sub	sp, #28
   140ce:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   140d2:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   140d6:	4604      	mov	r4, r0
   140d8:	460f      	mov	r7, r1
   140da:	4693      	mov	fp, r2
   140dc:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   140de:	b3b6      	cbz	r6, 1414e <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   140e0:	2110      	movs	r1, #16
   140e2:	f8cd 9000 	str.w	r9, [sp]
   140e6:	4633      	mov	r3, r6
   140e8:	4652      	mov	r2, sl
   140ea:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   140ec:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   140f0:	f7fe ffb2 	bl	13058 <cbvprintf_package>
   140f4:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   140f6:	4b17      	ldr	r3, [pc, #92]	; (14154 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   140f8:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   140fa:	f004 0407 	and.w	r4, r4, #7
   140fe:	f00b 0b07 	and.w	fp, fp, #7
   14102:	00e4      	lsls	r4, r4, #3
   14104:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   14108:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   1410c:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   14110:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   14112:	4408      	add	r0, r1
	struct log_msg_desc desc =
   14114:	4b10      	ldr	r3, [pc, #64]	; (14158 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   14116:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1411a:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1411e:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   14120:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   14122:	f7ff fe23 	bl	13d6c <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   14126:	4605      	mov	r5, r0
   14128:	b140      	cbz	r0, 1413c <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1412a:	b13e      	cbz	r6, 1413c <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   1412c:	9903      	ldr	r1, [sp, #12]
   1412e:	f8cd 9000 	str.w	r9, [sp]
   14132:	4633      	mov	r3, r6
   14134:	4652      	mov	r2, sl
   14136:	3010      	adds	r0, #16
   14138:	f7fe ff8e 	bl	13058 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   1413c:	4643      	mov	r3, r8
   1413e:	4622      	mov	r2, r4
   14140:	4639      	mov	r1, r7
   14142:	4628      	mov	r0, r5
	}
}
   14144:	b007      	add	sp, #28
   14146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1414a:	f010 b992 	b.w	24472 <z_log_msg_finalize>
		plen = 0;
   1414e:	4631      	mov	r1, r6
   14150:	e7d1      	b.n	140f6 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   14152:	bf00      	nop
   14154:	0007fe00 	.word	0x0007fe00
   14158:	7ff80000 	.word	0x7ff80000

0001415c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1415c:	b40e      	push	{r1, r2, r3}
   1415e:	b503      	push	{r0, r1, lr}
   14160:	ab03      	add	r3, sp, #12
   14162:	4601      	mov	r1, r0
   14164:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   14168:	4804      	ldr	r0, [pc, #16]	; (1417c <print_formatted+0x20>)
	va_start(args, fmt);
   1416a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1416c:	f010 f9a8 	bl	244c0 <cbvprintf>
	va_end(args);

	return length;
}
   14170:	b002      	add	sp, #8
   14172:	f85d eb04 	ldr.w	lr, [sp], #4
   14176:	b003      	add	sp, #12
   14178:	4770      	bx	lr
   1417a:	bf00      	nop
   1417c:	000244e9 	.word	0x000244e9

00014180 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   14180:	06ca      	lsls	r2, r1, #27
   14182:	d405      	bmi.n	14190 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   14184:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   14186:	bf4c      	ite	mi
   14188:	4902      	ldrmi	r1, [pc, #8]	; (14194 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   1418a:	4903      	ldrpl	r1, [pc, #12]	; (14198 <newline_print+0x18>)
   1418c:	f7ff bfe6 	b.w	1415c <print_formatted>
	}
}
   14190:	4770      	bx	lr
   14192:	bf00      	nop
   14194:	00028c88 	.word	0x00028c88
   14198:	00029008 	.word	0x00029008

0001419c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a0:	b08b      	sub	sp, #44	; 0x2c
   141a2:	469a      	mov	sl, r3
   141a4:	e9dd 7315 	ldrd	r7, r3, [sp, #84]	; 0x54
   141a8:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   141ac:	9306      	str	r3, [sp, #24]
   141ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   141b0:	9e18      	ldr	r6, [sp, #96]	; 0x60
   141b2:	9208      	str	r2, [sp, #32]
   141b4:	4604      	mov	r4, r0
   141b6:	460d      	mov	r5, r1
   141b8:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   141ba:	f1bb 0f00 	cmp.w	fp, #0
   141be:	f000 8085 	beq.w	142cc <log_output_process+0x130>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   141c2:	f006 0301 	and.w	r3, r6, #1
   141c6:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   141c8:	f006 0308 	and.w	r3, r6, #8
   141cc:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   141ce:	f010 f938 	bl	24442 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   141d2:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   141d6:	4602      	mov	r2, r0
   141d8:	2800      	cmp	r0, #0
   141da:	d047      	beq.n	1426c <log_output_process+0xd0>
		length += print_formatted(output, "%s ", tag);
   141dc:	4984      	ldr	r1, [pc, #528]	; (143f0 <log_output_process+0x254>)
   141de:	4620      	mov	r0, r4
   141e0:	f7ff ffbc 	bl	1415c <print_formatted>
   141e4:	4680      	mov	r8, r0
	if (stamp) {
   141e6:	f1b9 0f00 	cmp.w	r9, #0
   141ea:	d008      	beq.n	141fe <log_output_process+0x62>
	if (!format) {
   141ec:	f016 0f44 	tst.w	r6, #68	; 0x44
   141f0:	d13e      	bne.n	14270 <log_output_process+0xd4>
		length = print_formatted(output, "[%08lu] ", timestamp);
   141f2:	4980      	ldr	r1, [pc, #512]	; (143f4 <log_output_process+0x258>)
   141f4:	462a      	mov	r2, r5
   141f6:	4620      	mov	r0, r4
   141f8:	f7ff ffb0 	bl	1415c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   141fc:	4480      	add	r8, r0
	if (color) {
   141fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14200:	b153      	cbz	r3, 14218 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
   14202:	4b7d      	ldr	r3, [pc, #500]	; (143f8 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
   14204:	497d      	ldr	r1, [pc, #500]	; (143fc <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   14206:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   1420a:	4b7d      	ldr	r3, [pc, #500]	; (14400 <log_output_process+0x264>)
   1420c:	4620      	mov	r0, r4
   1420e:	2a00      	cmp	r2, #0
   14210:	bf08      	it	eq
   14212:	461a      	moveq	r2, r3
   14214:	f7ff ffa2 	bl	1415c <print_formatted>
	if (level_on) {
   14218:	9b07      	ldr	r3, [sp, #28]
   1421a:	2b00      	cmp	r3, #0
   1421c:	d054      	beq.n	142c8 <log_output_process+0x12c>
		total += print_formatted(output, "<%s> ", severity[level]);
   1421e:	4b79      	ldr	r3, [pc, #484]	; (14404 <log_output_process+0x268>)
   14220:	4979      	ldr	r1, [pc, #484]	; (14408 <log_output_process+0x26c>)
   14222:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   14226:	4620      	mov	r0, r4
   14228:	f7ff ff98 	bl	1415c <print_formatted>
   1422c:	4605      	mov	r5, r0
	if (domain) {
   1422e:	9b08      	ldr	r3, [sp, #32]
   14230:	b12b      	cbz	r3, 1423e <log_output_process+0xa2>
		total += print_formatted(output, "%s/", domain);
   14232:	4976      	ldr	r1, [pc, #472]	; (1440c <log_output_process+0x270>)
   14234:	461a      	mov	r2, r3
   14236:	4620      	mov	r0, r4
   14238:	f7ff ff90 	bl	1415c <print_formatted>
   1423c:	4405      	add	r5, r0
	if (source) {
   1423e:	f1ba 0f00 	cmp.w	sl, #0
   14242:	d005      	beq.n	14250 <log_output_process+0xb4>
		total += print_formatted(output,
   14244:	4972      	ldr	r1, [pc, #456]	; (14410 <log_output_process+0x274>)
   14246:	4652      	mov	r2, sl
   14248:	4620      	mov	r0, r4
   1424a:	f7ff ff87 	bl	1415c <print_formatted>
   1424e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   14250:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   14252:	2f00      	cmp	r7, #0
   14254:	d148      	bne.n	142e8 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   14256:	9b05      	ldr	r3, [sp, #20]
   14258:	2b00      	cmp	r3, #0
   1425a:	d14e      	bne.n	142fa <log_output_process+0x15e>
	if (color) {
   1425c:	07f3      	lsls	r3, r6, #31
   1425e:	f100 80c0 	bmi.w	143e2 <log_output_process+0x246>
	newline_print(output, flags);
   14262:	4631      	mov	r1, r6
   14264:	4620      	mov	r0, r4
   14266:	f7ff ff8b 	bl	14180 <newline_print>
}
   1426a:	e0b4      	b.n	143d6 <log_output_process+0x23a>
	uint32_t length = 0U;
   1426c:	4680      	mov	r8, r0
   1426e:	e7ba      	b.n	141e6 <log_output_process+0x4a>
	} else if (freq != 0U) {
   14270:	4b68      	ldr	r3, [pc, #416]	; (14414 <log_output_process+0x278>)
   14272:	6818      	ldr	r0, [r3, #0]
   14274:	2800      	cmp	r0, #0
   14276:	d0c1      	beq.n	141fc <log_output_process+0x60>
		timestamp /= timestamp_div;
   14278:	4b67      	ldr	r3, [pc, #412]	; (14418 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   1427a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1427e:	681b      	ldr	r3, [r3, #0]
   14280:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   14284:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   14288:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   1428c:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   14290:	fb09 f505 	mul.w	r5, r9, r5
		mins = seconds / 60U;
   14294:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   14298:	fbb3 f2f1 	udiv	r2, r3, r1
   1429c:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   142a0:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   142a4:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   142a8:	fb00 551e 	mls	r5, r0, lr, r5
				length = print_formatted(output,
   142ac:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   142b0:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
   142b4:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   142b6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   142ba:	4958      	ldr	r1, [pc, #352]	; (1441c <log_output_process+0x280>)
   142bc:	e9cd e501 	strd	lr, r5, [sp, #4]
   142c0:	4620      	mov	r0, r4
   142c2:	f7ff ff4b 	bl	1415c <print_formatted>
   142c6:	e799      	b.n	141fc <log_output_process+0x60>
	int total = 0;
   142c8:	9d07      	ldr	r5, [sp, #28]
   142ca:	e7b0      	b.n	1422e <log_output_process+0x92>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   142cc:	f1ba 0f01 	cmp.w	sl, #1
   142d0:	d106      	bne.n	142e0 <log_output_process+0x144>
	if (package) {
   142d2:	2f00      	cmp	r7, #0
   142d4:	d165      	bne.n	143a2 <log_output_process+0x206>
	if (data_len) {
   142d6:	9b05      	ldr	r3, [sp, #20]
   142d8:	2b00      	cmp	r3, #0
   142da:	d07c      	beq.n	143d6 <log_output_process+0x23a>
		prefix_offset = 0;
   142dc:	2500      	movs	r5, #0
   142de:	e00c      	b.n	142fa <log_output_process+0x15e>
	if (package) {
   142e0:	2f00      	cmp	r7, #0
   142e2:	d0f8      	beq.n	142d6 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   142e4:	484e      	ldr	r0, [pc, #312]	; (14420 <log_output_process+0x284>)
   142e6:	e05d      	b.n	143a4 <log_output_process+0x208>
		cb = out_func;
   142e8:	484e      	ldr	r0, [pc, #312]	; (14424 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   142ea:	494f      	ldr	r1, [pc, #316]	; (14428 <log_output_process+0x28c>)
   142ec:	463b      	mov	r3, r7
   142ee:	4622      	mov	r2, r4
   142f0:	f00f fae7 	bl	238c2 <cbpprintf_external>
	if (data_len) {
   142f4:	9b05      	ldr	r3, [sp, #20]
   142f6:	2b00      	cmp	r3, #0
   142f8:	d069      	beq.n	143ce <log_output_process+0x232>
		print_formatted(output, " ");
   142fa:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1443c <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
   142fe:	f8df 9140 	ldr.w	r9, [pc, #320]	; 14440 <log_output_process+0x2a4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   14302:	9f05      	ldr	r7, [sp, #20]
	newline_print(output, flags);
   14304:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   14306:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   14308:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1430a:	bf28      	it	cs
   1430c:	2710      	movcs	r7, #16
	newline_print(output, flags);
   1430e:	f7ff ff37 	bl	14180 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   14312:	f04f 0a00 	mov.w	sl, #0
   14316:	4555      	cmp	r5, sl
   14318:	dc46      	bgt.n	143a8 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
   1431a:	9b06      	ldr	r3, [sp, #24]
   1431c:	4649      	mov	r1, r9
   1431e:	781a      	ldrb	r2, [r3, #0]
   14320:	4620      	mov	r0, r4
   14322:	f7ff ff1b 	bl	1415c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14326:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   1432a:	f01a 0f07 	tst.w	sl, #7
   1432e:	d103      	bne.n	14338 <log_output_process+0x19c>
			print_formatted(output, " ");
   14330:	4641      	mov	r1, r8
   14332:	4620      	mov	r0, r4
   14334:	f7ff ff12 	bl	1415c <print_formatted>
		if (i < length) {
   14338:	4557      	cmp	r7, sl
   1433a:	d93c      	bls.n	143b6 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
   1433c:	9b06      	ldr	r3, [sp, #24]
   1433e:	4649      	mov	r1, r9
   14340:	f813 200a 	ldrb.w	r2, [r3, sl]
   14344:	4620      	mov	r0, r4
   14346:	f7ff ff09 	bl	1415c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1434a:	f10a 0a01 	add.w	sl, sl, #1
   1434e:	f1ba 0f10 	cmp.w	sl, #16
   14352:	d1ea      	bne.n	1432a <log_output_process+0x18e>
	print_formatted(output, "|");
   14354:	4935      	ldr	r1, [pc, #212]	; (1442c <log_output_process+0x290>)
   14356:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14358:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   1435c:	f7ff fefe 	bl	1415c <print_formatted>
		if (i < length) {
   14360:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   14362:	9b06      	ldr	r3, [sp, #24]
   14364:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   14366:	4b32      	ldr	r3, [pc, #200]	; (14430 <log_output_process+0x294>)
   14368:	5c99      	ldrb	r1, [r3, r2]
   1436a:	f011 0f97 	tst.w	r1, #151	; 0x97
   1436e:	bf08      	it	eq
   14370:	222e      	moveq	r2, #46	; 0x2e
   14372:	4930      	ldr	r1, [pc, #192]	; (14434 <log_output_process+0x298>)
   14374:	4620      	mov	r0, r4
   14376:	f7ff fef1 	bl	1415c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1437a:	f10a 0a01 	add.w	sl, sl, #1
   1437e:	f1ba 0f10 	cmp.w	sl, #16
   14382:	d01d      	beq.n	143c0 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
   14384:	f01a 0f07 	tst.w	sl, #7
   14388:	d103      	bne.n	14392 <log_output_process+0x1f6>
			print_formatted(output, " ");
   1438a:	4641      	mov	r1, r8
   1438c:	4620      	mov	r0, r4
   1438e:	f7ff fee5 	bl	1415c <print_formatted>
		if (i < length) {
   14392:	4557      	cmp	r7, sl
   14394:	4652      	mov	r2, sl
   14396:	d8e4      	bhi.n	14362 <log_output_process+0x1c6>
			print_formatted(output, " ");
   14398:	4641      	mov	r1, r8
   1439a:	4620      	mov	r0, r4
   1439c:	f7ff fede 	bl	1415c <print_formatted>
   143a0:	e7eb      	b.n	1437a <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   143a2:	4820      	ldr	r0, [pc, #128]	; (14424 <log_output_process+0x288>)
		prefix_offset = 0;
   143a4:	465d      	mov	r5, fp
   143a6:	e7a0      	b.n	142ea <log_output_process+0x14e>
		print_formatted(output, " ");
   143a8:	4641      	mov	r1, r8
   143aa:	4620      	mov	r0, r4
   143ac:	f7ff fed6 	bl	1415c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   143b0:	f10a 0a01 	add.w	sl, sl, #1
   143b4:	e7af      	b.n	14316 <log_output_process+0x17a>
			print_formatted(output, "   ");
   143b6:	4920      	ldr	r1, [pc, #128]	; (14438 <log_output_process+0x29c>)
   143b8:	4620      	mov	r0, r4
   143ba:	f7ff fecf 	bl	1415c <print_formatted>
   143be:	e7c4      	b.n	1434a <log_output_process+0x1ae>
		data += length;
   143c0:	9b06      	ldr	r3, [sp, #24]
   143c2:	443b      	add	r3, r7
   143c4:	9306      	str	r3, [sp, #24]
	} while (len);
   143c6:	9b05      	ldr	r3, [sp, #20]
   143c8:	1bdb      	subs	r3, r3, r7
   143ca:	9305      	str	r3, [sp, #20]
   143cc:	d199      	bne.n	14302 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   143ce:	f1bb 0f00 	cmp.w	fp, #0
   143d2:	f47f af43 	bne.w	1425c <log_output_process+0xc0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   143d6:	4620      	mov	r0, r4
}
   143d8:	b00b      	add	sp, #44	; 0x2c
   143da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   143de:	f010 b876 	b.w	244ce <log_output_flush>
		print_formatted(output, "%s", log_color);
   143e2:	4a07      	ldr	r2, [pc, #28]	; (14400 <log_output_process+0x264>)
   143e4:	4905      	ldr	r1, [pc, #20]	; (143fc <log_output_process+0x260>)
   143e6:	4620      	mov	r0, r4
   143e8:	f7ff feb8 	bl	1415c <print_formatted>
}
   143ec:	e739      	b.n	14262 <log_output_process+0xc6>
   143ee:	bf00      	nop
   143f0:	00029010 	.word	0x00029010
   143f4:	00029014 	.word	0x00029014
   143f8:	00028310 	.word	0x00028310
   143fc:	000298b6 	.word	0x000298b6
   14400:	0002900b 	.word	0x0002900b
   14404:	00028324 	.word	0x00028324
   14408:	00029039 	.word	0x00029039
   1440c:	0002903f 	.word	0x0002903f
   14410:	00029043 	.word	0x00029043
   14414:	20003030 	.word	0x20003030
   14418:	2000302c 	.word	0x2000302c
   1441c:	0002901d 	.word	0x0002901d
   14420:	0002451f 	.word	0x0002451f
   14424:	000244e9 	.word	0x000244e9
   14428:	000244c1 	.word	0x000244c1
   1442c:	00029052 	.word	0x00029052
   14430:	0002aa89 	.word	0x0002aa89
   14434:	00029054 	.word	0x00029054
   14438:	0002904e 	.word	0x0002904e
   1443c:	00029050 	.word	0x00029050
   14440:	00029048 	.word	0x00029048

00014444 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   14444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   14448:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   1444a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   1444c:	688e      	ldr	r6, [r1, #8]
   1444e:	b086      	sub	sp, #24
   14450:	4605      	mov	r5, r0
   14452:	460c      	mov	r4, r1
   14454:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   14456:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1445a:	b15b      	cbz	r3, 14474 <log_output_msg_process+0x30>
   1445c:	4a13      	ldr	r2, [pc, #76]	; (144ac <log_output_msg_process+0x68>)
   1445e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   14460:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14464:	2900      	cmp	r1, #0
   14466:	db1f      	blt.n	144a8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   14468:	7820      	ldrb	r0, [r4, #0]
   1446a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1446e:	f7ff fdb5 	bl	13fdc <log_source_name_get>
   14472:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   14474:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   14476:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   14478:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   1447c:	9700      	str	r7, [sp, #0]
   1447e:	f3c2 2249 	ubfx	r2, r2, #9, #10
   14482:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   14484:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   14488:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   1448c:	bf08      	it	eq
   1448e:	2100      	moveq	r1, #0
   14490:	e9cd 0803 	strd	r0, r8, [sp, #12]
   14494:	e9cd 1401 	strd	r1, r4, [sp, #4]
   14498:	2200      	movs	r2, #0
   1449a:	4631      	mov	r1, r6
   1449c:	4628      	mov	r0, r5
   1449e:	f7ff fe7d 	bl	1419c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   144a2:	b006      	add	sp, #24
   144a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   144a8:	2300      	movs	r3, #0
   144aa:	e7e3      	b.n	14474 <log_output_msg_process+0x30>
   144ac:	00027f74 	.word	0x00027f74

000144b0 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   144b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   144b2:	f242 730f 	movw	r3, #9999	; 0x270f
   144b6:	428b      	cmp	r3, r1
   144b8:	bf28      	it	cs
   144ba:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   144bc:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   144be:	4a0f      	ldr	r2, [pc, #60]	; (144fc <log_output_dropped_process+0x4c>)
{
   144c0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   144c2:	2105      	movs	r1, #5
   144c4:	4668      	mov	r0, sp
   144c6:	f00f fa76 	bl	239b6 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   144ca:	6863      	ldr	r3, [r4, #4]
   144cc:	490c      	ldr	r1, [pc, #48]	; (14500 <log_output_dropped_process+0x50>)
   144ce:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   144d0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   144d2:	220b      	movs	r2, #11
   144d4:	4628      	mov	r0, r5
   144d6:	f00f ffe6 	bl	244a6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   144da:	6863      	ldr	r3, [r4, #4]
   144dc:	4632      	mov	r2, r6
   144de:	4669      	mov	r1, sp
   144e0:	4628      	mov	r0, r5
   144e2:	685b      	ldr	r3, [r3, #4]
   144e4:	f00f ffdf 	bl	244a6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   144e8:	6863      	ldr	r3, [r4, #4]
   144ea:	4906      	ldr	r1, [pc, #24]	; (14504 <log_output_dropped_process+0x54>)
   144ec:	685b      	ldr	r3, [r3, #4]
   144ee:	221b      	movs	r2, #27
   144f0:	4628      	mov	r0, r5
   144f2:	f00f ffd8 	bl	244a6 <buffer_write>
		     output->control_block->ctx);
}
   144f6:	b002      	add	sp, #8
   144f8:	bd70      	pop	{r4, r5, r6, pc}
   144fa:	bf00      	nop
   144fc:	0002a93c 	.word	0x0002a93c
   14500:	00029073 	.word	0x00029073
   14504:	00029057 	.word	0x00029057

00014508 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14508:	4a07      	ldr	r2, [pc, #28]	; (14528 <log_output_timestamp_freq_set+0x20>)
   1450a:	2100      	movs	r1, #0
   1450c:	2301      	movs	r3, #1
   1450e:	4290      	cmp	r0, r2
   14510:	d806      	bhi.n	14520 <log_output_timestamp_freq_set+0x18>
   14512:	4a06      	ldr	r2, [pc, #24]	; (1452c <log_output_timestamp_freq_set+0x24>)
   14514:	b901      	cbnz	r1, 14518 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   14516:	2301      	movs	r3, #1
   14518:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1451a:	4b05      	ldr	r3, [pc, #20]	; (14530 <log_output_timestamp_freq_set+0x28>)
   1451c:	6018      	str	r0, [r3, #0]
}
   1451e:	4770      	bx	lr
		frequency /= 2U;
   14520:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   14522:	005b      	lsls	r3, r3, #1
   14524:	2101      	movs	r1, #1
   14526:	e7f2      	b.n	1450e <log_output_timestamp_freq_set+0x6>
   14528:	000f4240 	.word	0x000f4240
   1452c:	2000302c 	.word	0x2000302c
   14530:	20003030 	.word	0x20003030

00014534 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   14534:	4b01      	ldr	r3, [pc, #4]	; (1453c <log_backend_rtt_init+0x8>)
   14536:	2201      	movs	r2, #1
   14538:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   1453a:	4770      	bx	lr
   1453c:	20004499 	.word	0x20004499

00014540 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14540:	4b01      	ldr	r3, [pc, #4]	; (14548 <format_set+0x8>)
	return 0;
}
   14542:	2000      	movs	r0, #0
	log_format_current = log_type;
   14544:	6019      	str	r1, [r3, #0]
}
   14546:	4770      	bx	lr
   14548:	20003048 	.word	0x20003048

0001454c <panic>:
	panic_mode = true;
   1454c:	4b02      	ldr	r3, [pc, #8]	; (14558 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1454e:	4803      	ldr	r0, [pc, #12]	; (1455c <panic+0x10>)
   14550:	2201      	movs	r2, #1
   14552:	701a      	strb	r2, [r3, #0]
   14554:	f00f bfbb 	b.w	244ce <log_output_flush>
   14558:	2000449a 	.word	0x2000449a
   1455c:	00028354 	.word	0x00028354

00014560 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   14560:	4801      	ldr	r0, [pc, #4]	; (14568 <dropped+0x8>)
   14562:	f7ff bfa5 	b.w	144b0 <log_output_dropped_process>
   14566:	bf00      	nop
   14568:	00028354 	.word	0x00028354

0001456c <process>:
{
   1456c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1456e:	4b06      	ldr	r3, [pc, #24]	; (14588 <process+0x1c>)
   14570:	6818      	ldr	r0, [r3, #0]
{
   14572:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14574:	f7ff fb70 	bl	13c58 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   14578:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1457a:	4603      	mov	r3, r0
}
   1457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   14580:	4802      	ldr	r0, [pc, #8]	; (1458c <process+0x20>)
   14582:	220f      	movs	r2, #15
   14584:	4718      	bx	r3
   14586:	bf00      	nop
   14588:	20003048 	.word	0x20003048
   1458c:	00028354 	.word	0x00028354

00014590 <on_failed_write>:
	if (retry_cnt == 0) {
   14590:	b910      	cbnz	r0, 14598 <on_failed_write+0x8>
		host_present = false;
   14592:	4b07      	ldr	r3, [pc, #28]	; (145b0 <on_failed_write+0x20>)
   14594:	7018      	strb	r0, [r3, #0]
}
   14596:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14598:	4b06      	ldr	r3, [pc, #24]	; (145b4 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   1459a:	781b      	ldrb	r3, [r3, #0]
   1459c:	b11b      	cbz	r3, 145a6 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   1459e:	f241 3088 	movw	r0, #5000	; 0x1388
   145a2:	f012 bd4e 	b.w	27042 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   145a6:	20a4      	movs	r0, #164	; 0xa4
   145a8:	2100      	movs	r1, #0
   145aa:	f00a babd 	b.w	1eb28 <z_impl_k_sleep>
   145ae:	bf00      	nop
   145b0:	20004499 	.word	0x20004499
   145b4:	2000449a 	.word	0x2000449a

000145b8 <data_out_block_mode>:
{
   145b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   145bc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 14638 <data_out_block_mode+0x80>
   145c0:	4f1c      	ldr	r7, [pc, #112]	; (14634 <data_out_block_mode+0x7c>)
{
   145c2:	4680      	mov	r8, r0
   145c4:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   145c6:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   145c8:	f899 5000 	ldrb.w	r5, [r9]
   145cc:	b995      	cbnz	r5, 145f4 <data_out_block_mode+0x3c>
			RTT_LOCK();
   145ce:	f009 fad1 	bl	1db74 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   145d2:	4628      	mov	r0, r5
   145d4:	4632      	mov	r2, r6
   145d6:	4641      	mov	r1, r8
   145d8:	f009 fa7a 	bl	1dad0 <SEGGER_RTT_WriteSkipNoLock>
   145dc:	4605      	mov	r5, r0
			RTT_UNLOCK();
   145de:	f009 fad3 	bl	1db88 <zephyr_rtt_mutex_unlock>
		if (ret) {
   145e2:	b1e5      	cbz	r5, 1461e <data_out_block_mode+0x66>
	host_present = true;
   145e4:	2301      	movs	r3, #1
   145e6:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   145e8:	f899 3000 	ldrb.w	r3, [r9]
   145ec:	b973      	cbnz	r3, 1460c <data_out_block_mode+0x54>
}
   145ee:	4630      	mov	r0, r6
   145f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   145f4:	4632      	mov	r2, r6
   145f6:	4641      	mov	r1, r8
   145f8:	2000      	movs	r0, #0
   145fa:	f009 fa69 	bl	1dad0 <SEGGER_RTT_WriteSkipNoLock>
   145fe:	4605      	mov	r5, r0
   14600:	e7ef      	b.n	145e2 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   14602:	4620      	mov	r0, r4
   14604:	f7ff ffc4 	bl	14590 <on_failed_write>
   14608:	1e65      	subs	r5, r4, #1
   1460a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   1460c:	2000      	movs	r0, #0
   1460e:	f009 faa7 	bl	1db60 <SEGGER_RTT_HasDataUp>
   14612:	2800      	cmp	r0, #0
   14614:	d0eb      	beq.n	145ee <data_out_block_mode+0x36>
   14616:	783b      	ldrb	r3, [r7, #0]
   14618:	2b00      	cmp	r3, #0
   1461a:	d1f2      	bne.n	14602 <data_out_block_mode+0x4a>
   1461c:	e7e7      	b.n	145ee <data_out_block_mode+0x36>
		} else if (host_present) {
   1461e:	783b      	ldrb	r3, [r7, #0]
   14620:	2b00      	cmp	r3, #0
   14622:	d0e4      	beq.n	145ee <data_out_block_mode+0x36>
			retry_cnt--;
   14624:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   14626:	4620      	mov	r0, r4
   14628:	f7ff ffb2 	bl	14590 <on_failed_write>
	} while ((ret == 0) && host_present);
   1462c:	783b      	ldrb	r3, [r7, #0]
   1462e:	2b00      	cmp	r3, #0
   14630:	d1ca      	bne.n	145c8 <data_out_block_mode+0x10>
   14632:	e7dc      	b.n	145ee <data_out_block_mode+0x36>
   14634:	20004499 	.word	0x20004499
   14638:	2000449a 	.word	0x2000449a

0001463c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   1463c:	4b01      	ldr	r3, [pc, #4]	; (14644 <format_set+0x8>)
	return 0;
}
   1463e:	2000      	movs	r0, #0
	log_format_current = log_type;
   14640:	6019      	str	r1, [r3, #0]
}
   14642:	4770      	bx	lr
   14644:	20003060 	.word	0x20003060

00014648 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   14648:	4b02      	ldr	r3, [pc, #8]	; (14654 <panic+0xc>)
	log_output_flush(output);
   1464a:	4803      	ldr	r0, [pc, #12]	; (14658 <panic+0x10>)
   1464c:	2201      	movs	r2, #1
   1464e:	701a      	strb	r2, [r3, #0]
   14650:	f00f bf3d 	b.w	244ce <log_output_flush>
   14654:	200044ac 	.word	0x200044ac
   14658:	00028380 	.word	0x00028380

0001465c <dropped>:
	log_output_dropped_process(output, cnt);
   1465c:	4801      	ldr	r0, [pc, #4]	; (14664 <dropped+0x8>)
   1465e:	f7ff bf27 	b.w	144b0 <log_output_dropped_process>
   14662:	bf00      	nop
   14664:	00028380 	.word	0x00028380

00014668 <process>:
{
   14668:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1466a:	4b06      	ldr	r3, [pc, #24]	; (14684 <process+0x1c>)
   1466c:	6818      	ldr	r0, [r3, #0]
{
   1466e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14670:	f7ff faf2 	bl	13c58 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   14674:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14676:	4603      	mov	r3, r0
}
   14678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   1467c:	4802      	ldr	r0, [pc, #8]	; (14688 <process+0x20>)
   1467e:	220f      	movs	r2, #15
   14680:	4718      	bx	r3
   14682:	bf00      	nop
   14684:	20003060 	.word	0x20003060
   14688:	00028380 	.word	0x00028380

0001468c <char_out>:
{
   1468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1468e:	4f07      	ldr	r7, [pc, #28]	; (146ac <char_out+0x20>)
   14690:	460d      	mov	r5, r1
   14692:	4604      	mov	r4, r0
   14694:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   14696:	42b4      	cmp	r4, r6
   14698:	d101      	bne.n	1469e <char_out+0x12>
}
   1469a:	4628      	mov	r0, r5
   1469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1469e:	f814 1b01 	ldrb.w	r1, [r4], #1
   146a2:	68bb      	ldr	r3, [r7, #8]
   146a4:	4801      	ldr	r0, [pc, #4]	; (146ac <char_out+0x20>)
   146a6:	685b      	ldr	r3, [r3, #4]
   146a8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   146aa:	e7f4      	b.n	14696 <char_out+0xa>
   146ac:	00027d38 	.word	0x00027d38

000146b0 <dis_set>:
);

#if defined(CONFIG_BT_DIS_SETTINGS)
static int dis_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *store)
{
   146b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   146b4:	b083      	sub	sp, #12
   146b6:	af00      	add	r7, sp, #0
	ssize_t len;
	int nlen;
	const char *next;

	nlen = settings_name_next(name, &next);
   146b8:	1d39      	adds	r1, r7, #4
{
   146ba:	4606      	mov	r6, r0
   146bc:	4614      	mov	r4, r2
   146be:	461d      	mov	r5, r3
	nlen = settings_name_next(name, &next);
   146c0:	f00f ff56 	bl	24570 <settings_name_next>
	if (!strncmp(name, "manuf", nlen)) {
   146c4:	4935      	ldr	r1, [pc, #212]	; (1479c <dis_set+0xec>)
   146c6:	4602      	mov	r2, r0
	nlen = settings_name_next(name, &next);
   146c8:	4680      	mov	r8, r0
	if (!strncmp(name, "manuf", nlen)) {
   146ca:	4630      	mov	r0, r6
   146cc:	f012 ffa4 	bl	27618 <strncmp>
   146d0:	4681      	mov	r9, r0
   146d2:	b9d8      	cbnz	r0, 1470c <dis_set+0x5c>
		len = read_cb(store, &dis_manuf, sizeof(dis_manuf) - 1);
   146d4:	4e32      	ldr	r6, [pc, #200]	; (147a0 <dis_set+0xf0>)
   146d6:	2214      	movs	r2, #20
   146d8:	4631      	mov	r1, r6
   146da:	4628      	mov	r0, r5
   146dc:	47a0      	blx	r4
		if (len < 0) {
   146de:	2800      	cmp	r0, #0
   146e0:	da3a      	bge.n	14758 <dis_set+0xa8>
			LOG_ERR("Failed to read manufacturer from storage"
   146e2:	466d      	mov	r5, sp
   146e4:	b088      	sub	sp, #32
   146e6:	466a      	mov	r2, sp
   146e8:	4b2e      	ldr	r3, [pc, #184]	; (147a4 <dis_set+0xf4>)
		return 0;
	}
	if (!strncmp(name, "model", nlen)) {
		len = read_cb(store, &dis_model, sizeof(dis_model) - 1);
		if (len < 0) {
			LOG_ERR("Failed to read model from storage"
   146ea:	e9c2 3005 	strd	r3, r0, [r2, #20]
   146ee:	2303      	movs	r3, #3
   146f0:	f842 3f10 	str.w	r3, [r2, #16]!
   146f4:	464b      	mov	r3, r9
   146f6:	482c      	ldr	r0, [pc, #176]	; (147a8 <dis_set+0xf8>)
   146f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   146fc:	f7ff fc90 	bl	14020 <z_impl_z_log_msg_static_create>
   14700:	46ad      	mov	sp, r5
		}
		return 0;
	}
#endif
	return 0;
}
   14702:	2000      	movs	r0, #0
   14704:	370c      	adds	r7, #12
   14706:	46bd      	mov	sp, r7
   14708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!strncmp(name, "model", nlen)) {
   1470c:	4927      	ldr	r1, [pc, #156]	; (147ac <dis_set+0xfc>)
   1470e:	4642      	mov	r2, r8
   14710:	4630      	mov	r0, r6
   14712:	f012 ff81 	bl	27618 <strncmp>
   14716:	4681      	mov	r9, r0
   14718:	b958      	cbnz	r0, 14732 <dis_set+0x82>
		len = read_cb(store, &dis_model, sizeof(dis_model) - 1);
   1471a:	4e25      	ldr	r6, [pc, #148]	; (147b0 <dis_set+0x100>)
   1471c:	2214      	movs	r2, #20
   1471e:	4631      	mov	r1, r6
   14720:	4628      	mov	r0, r5
   14722:	47a0      	blx	r4
		if (len < 0) {
   14724:	2800      	cmp	r0, #0
   14726:	da17      	bge.n	14758 <dis_set+0xa8>
			LOG_ERR("Failed to read model from storage"
   14728:	466d      	mov	r5, sp
   1472a:	b088      	sub	sp, #32
   1472c:	466a      	mov	r2, sp
   1472e:	4b21      	ldr	r3, [pc, #132]	; (147b4 <dis_set+0x104>)
   14730:	e7db      	b.n	146ea <dis_set+0x3a>
	if (!strncmp(name, "serial", nlen)) {
   14732:	4921      	ldr	r1, [pc, #132]	; (147b8 <dis_set+0x108>)
   14734:	4642      	mov	r2, r8
   14736:	4630      	mov	r0, r6
   14738:	f012 ff6e 	bl	27618 <strncmp>
   1473c:	4681      	mov	r9, r0
   1473e:	b970      	cbnz	r0, 1475e <dis_set+0xae>
		len = read_cb(store, &dis_serial_number,
   14740:	4e1e      	ldr	r6, [pc, #120]	; (147bc <dis_set+0x10c>)
   14742:	2214      	movs	r2, #20
   14744:	4631      	mov	r1, r6
   14746:	4628      	mov	r0, r5
   14748:	47a0      	blx	r4
		if (len < 0) {
   1474a:	2800      	cmp	r0, #0
   1474c:	da04      	bge.n	14758 <dis_set+0xa8>
			LOG_ERR("Failed to read serial number from storage"
   1474e:	466d      	mov	r5, sp
   14750:	b088      	sub	sp, #32
   14752:	466a      	mov	r2, sp
   14754:	4b1a      	ldr	r3, [pc, #104]	; (147c0 <dis_set+0x110>)
   14756:	e7c8      	b.n	146ea <dis_set+0x3a>
			dis_serial_number[len] = '\0';
   14758:	f806 9000 	strb.w	r9, [r6, r0]
			LOG_DBG("Serial number set to %s", dis_serial_number);
   1475c:	e7d1      	b.n	14702 <dis_set+0x52>
	if (!strncmp(name, "sw", nlen)) {
   1475e:	4630      	mov	r0, r6
   14760:	4918      	ldr	r1, [pc, #96]	; (147c4 <dis_set+0x114>)
   14762:	4642      	mov	r2, r8
   14764:	f012 ff58 	bl	27618 <strncmp>
   14768:	4606      	mov	r6, r0
   1476a:	2800      	cmp	r0, #0
   1476c:	d1c9      	bne.n	14702 <dis_set+0x52>
		len = read_cb(store, &dis_sw_rev, sizeof(dis_sw_rev) - 1);
   1476e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 147cc <dis_set+0x11c>
   14772:	2214      	movs	r2, #20
   14774:	4641      	mov	r1, r8
   14776:	4628      	mov	r0, r5
   14778:	47a0      	blx	r4
		if (len < 0) {
   1477a:	2800      	cmp	r0, #0
   1477c:	da0a      	bge.n	14794 <dis_set+0xe4>
			LOG_ERR("Failed to read software revision from storage"
   1477e:	466d      	mov	r5, sp
   14780:	b088      	sub	sp, #32
   14782:	466a      	mov	r2, sp
   14784:	4b10      	ldr	r3, [pc, #64]	; (147c8 <dis_set+0x118>)
   14786:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1478a:	2303      	movs	r3, #3
   1478c:	f842 3f10 	str.w	r3, [r2, #16]!
   14790:	4633      	mov	r3, r6
   14792:	e7b0      	b.n	146f6 <dis_set+0x46>
			dis_sw_rev[len] = '\0';
   14794:	f808 6000 	strb.w	r6, [r8, r0]
			LOG_DBG("Software revision set to %s", dis_sw_rev);
   14798:	e7b3      	b.n	14702 <dis_set+0x52>
   1479a:	bf00      	nop
   1479c:	000290c9 	.word	0x000290c9
   147a0:	20000ab4 	.word	0x20000ab4
   147a4:	000290cf 	.word	0x000290cf
   147a8:	00027f9c 	.word	0x00027f9c
   147ac:	00029102 	.word	0x00029102
   147b0:	20000ac9 	.word	0x20000ac9
   147b4:	00029108 	.word	0x00029108
   147b8:	00029134 	.word	0x00029134
   147bc:	20000a9f 	.word	0x20000a9f
   147c0:	0002913b 	.word	0x0002913b
   147c4:	0002916f 	.word	0x0002916f
   147c8:	00029172 	.word	0x00029172
   147cc:	20000a8a 	.word	0x20000a8a

000147d0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   147d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   147d4:	4605      	mov	r5, r0
	__asm__ volatile(
   147d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   147da:	f3ef 8611 	mrs	r6, BASEPRI
   147de:	f383 8812 	msr	BASEPRI_MAX, r3
   147e2:	f3bf 8f6f 	isb	sy
	return list->head;
   147e6:	4b0e      	ldr	r3, [pc, #56]	; (14820 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   147e8:	4f0e      	ldr	r7, [pc, #56]	; (14824 <pm_state_notify+0x54>)
   147ea:	681c      	ldr	r4, [r3, #0]
   147ec:	f8df 8038 	ldr.w	r8, [pc, #56]	; 14828 <pm_state_notify+0x58>
   147f0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   147f4:	b92c      	cbnz	r4, 14802 <pm_state_notify+0x32>
	__asm__ volatile(
   147f6:	f386 8811 	msr	BASEPRI, r6
   147fa:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   147fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   14802:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   14806:	2d00      	cmp	r5, #0
   14808:	bf18      	it	ne
   1480a:	4613      	movne	r3, r2
		if (callback) {
   1480c:	b12b      	cbz	r3, 1481a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1480e:	f898 2014 	ldrb.w	r2, [r8, #20]
   14812:	fb09 f202 	mul.w	r2, r9, r2
   14816:	5cb8      	ldrb	r0, [r7, r2]
   14818:	4798      	blx	r3
	return node->next;
   1481a:	6824      	ldr	r4, [r4, #0]
   1481c:	e7ea      	b.n	147f4 <pm_state_notify+0x24>
   1481e:	bf00      	nop
   14820:	2000307c 	.word	0x2000307c
   14824:	20003070 	.word	0x20003070
   14828:	20003968 	.word	0x20003968

0001482c <pm_system_resume>:

void pm_system_resume(void)
{
   1482c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1482e:	4b19      	ldr	r3, [pc, #100]	; (14894 <pm_system_resume+0x68>)
   14830:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14832:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14836:	f004 031f 	and.w	r3, r4, #31
   1483a:	2201      	movs	r2, #1
   1483c:	409a      	lsls	r2, r3
   1483e:	4b16      	ldr	r3, [pc, #88]	; (14898 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14840:	0961      	lsrs	r1, r4, #5
   14842:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14846:	43d0      	mvns	r0, r2
   14848:	e853 1f00 	ldrex	r1, [r3]
   1484c:	ea01 0500 	and.w	r5, r1, r0
   14850:	e843 5600 	strex	r6, r5, [r3]
   14854:	2e00      	cmp	r6, #0
   14856:	d1f7      	bne.n	14848 <pm_system_resume+0x1c>
   14858:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1485c:	420a      	tst	r2, r1
   1485e:	d013      	beq.n	14888 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   14860:	4b0e      	ldr	r3, [pc, #56]	; (1489c <pm_system_resume+0x70>)
   14862:	4d0f      	ldr	r5, [pc, #60]	; (148a0 <pm_system_resume+0x74>)
   14864:	b18b      	cbz	r3, 1488a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14866:	230c      	movs	r3, #12
   14868:	4363      	muls	r3, r4
   1486a:	18ea      	adds	r2, r5, r3
   1486c:	5ce8      	ldrb	r0, [r5, r3]
   1486e:	7851      	ldrb	r1, [r2, #1]
   14870:	f010 f910 	bl	24a94 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   14874:	2000      	movs	r0, #0
   14876:	f7ff ffab 	bl	147d0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1487a:	230c      	movs	r3, #12
   1487c:	435c      	muls	r4, r3
   1487e:	192a      	adds	r2, r5, r4
   14880:	2300      	movs	r3, #0
   14882:	512b      	str	r3, [r5, r4]
   14884:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   14888:	bd70      	pop	{r4, r5, r6, pc}
   1488a:	f383 8811 	msr	BASEPRI, r3
   1488e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   14892:	e7ef      	b.n	14874 <pm_system_resume+0x48>
   14894:	20003968 	.word	0x20003968
   14898:	20003084 	.word	0x20003084
   1489c:	00024a95 	.word	0x00024a95
   148a0:	20003070 	.word	0x20003070

000148a4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   148a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   148a8:	4b35      	ldr	r3, [pc, #212]	; (14980 <pm_system_suspend+0xdc>)
{
   148aa:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   148ac:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   148ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   148b2:	f3ef 8811 	mrs	r8, BASEPRI
   148b6:	f383 8812 	msr	BASEPRI_MAX, r3
   148ba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   148be:	240c      	movs	r4, #12
   148c0:	4b30      	ldr	r3, [pc, #192]	; (14984 <pm_system_suspend+0xe0>)
   148c2:	4e31      	ldr	r6, [pc, #196]	; (14988 <pm_system_suspend+0xe4>)
   148c4:	436c      	muls	r4, r5
   148c6:	191a      	adds	r2, r3, r4
   148c8:	5d19      	ldrb	r1, [r3, r4]
   148ca:	2900      	cmp	r1, #0
   148cc:	d04c      	beq.n	14968 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   148ce:	ca07      	ldmia	r2, {r0, r1, r2}
   148d0:	eb06 0c04 	add.w	ip, r6, r4
   148d4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   148d8:	2200      	movs	r2, #0
   148da:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   148dc:	f388 8811 	msr	BASEPRI, r8
   148e0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   148e4:	230c      	movs	r3, #12
   148e6:	436b      	muls	r3, r5
   148e8:	18f2      	adds	r2, r6, r3
   148ea:	5cf0      	ldrb	r0, [r6, r3]
   148ec:	2800      	cmp	r0, #0
   148ee:	d039      	beq.n	14964 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   148f0:	1c7b      	adds	r3, r7, #1
   148f2:	d010      	beq.n	14916 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   148f4:	f8d2 c008 	ldr.w	ip, [r2, #8]
   148f8:	4c24      	ldr	r4, [pc, #144]	; (1498c <pm_system_suspend+0xe8>)
   148fa:	4a25      	ldr	r2, [pc, #148]	; (14990 <pm_system_suspend+0xec>)
   148fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   14900:	2100      	movs	r1, #0
   14902:	fbec 4100 	umlal	r4, r1, ip, r0
   14906:	2300      	movs	r3, #0
   14908:	4620      	mov	r0, r4
   1490a:	f7ec f817 	bl	93c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1490e:	2101      	movs	r1, #1
   14910:	1a38      	subs	r0, r7, r0
   14912:	f012 fb74 	bl	26ffe <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14916:	f00a f849 	bl	1e9ac <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1491a:	2001      	movs	r0, #1
   1491c:	f7ff ff58 	bl	147d0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14920:	f3bf 8f5b 	dmb	ish
   14924:	4b1b      	ldr	r3, [pc, #108]	; (14994 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14926:	096a      	lsrs	r2, r5, #5
   14928:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1492c:	f005 011f 	and.w	r1, r5, #31
   14930:	2201      	movs	r2, #1
   14932:	408a      	lsls	r2, r1
   14934:	e853 0f00 	ldrex	r0, [r3]
   14938:	4310      	orrs	r0, r2
   1493a:	e843 0100 	strex	r1, r0, [r3]
   1493e:	2900      	cmp	r1, #0
   14940:	d1f8      	bne.n	14934 <pm_system_suspend+0x90>
   14942:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   14946:	4b14      	ldr	r3, [pc, #80]	; (14998 <pm_system_suspend+0xf4>)
   14948:	b13b      	cbz	r3, 1495a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   1494a:	230c      	movs	r3, #12
   1494c:	fb03 f005 	mul.w	r0, r3, r5
   14950:	1833      	adds	r3, r6, r0
   14952:	5c30      	ldrb	r0, [r6, r0]
   14954:	7859      	ldrb	r1, [r3, #1]
   14956:	f010 f891 	bl	24a7c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1495a:	f7ff ff67 	bl	1482c <pm_system_resume>
	k_sched_unlock();
   1495e:	f00a f839 	bl	1e9d4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   14962:	2001      	movs	r0, #1
}
   14964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   14968:	4601      	mov	r1, r0
   1496a:	4628      	mov	r0, r5
   1496c:	f000 f816 	bl	1499c <pm_policy_next_state>
		if (info != NULL) {
   14970:	2800      	cmp	r0, #0
   14972:	d0b3      	beq.n	148dc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   14974:	c807      	ldmia	r0, {r0, r1, r2}
   14976:	4434      	add	r4, r6
   14978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1497c:	e7ae      	b.n	148dc <pm_system_suspend+0x38>
   1497e:	bf00      	nop
   14980:	20003968 	.word	0x20003968
   14984:	20003064 	.word	0x20003064
   14988:	20003070 	.word	0x20003070
   1498c:	000f423f 	.word	0x000f423f
   14990:	000f4240 	.word	0x000f4240
   14994:	20003084 	.word	0x20003084
   14998:	00024a7d 	.word	0x00024a7d

0001499c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1499c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a0:	b085      	sub	sp, #20
   149a2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   149a4:	a903      	add	r1, sp, #12
   149a6:	f000 f843 	bl	14a30 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   149aa:	4b1e      	ldr	r3, [pc, #120]	; (14a24 <pm_policy_next_state+0x88>)
   149ac:	9d03      	ldr	r5, [sp, #12]
   149ae:	f8d3 a000 	ldr.w	sl, [r3]
   149b2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 14a2c <pm_policy_next_state+0x90>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   149b6:	1e43      	subs	r3, r0, #1
   149b8:	b21b      	sxth	r3, r3
   149ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   149be:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   149c0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   149c4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   149c8:	f04f 0b00 	mov.w	fp, #0
   149cc:	b924      	cbnz	r4, 149d8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   149ce:	46a1      	mov	r9, r4
}
   149d0:	4648      	mov	r0, r9
   149d2:	b005      	add	sp, #20
   149d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149d8:	6868      	ldr	r0, [r5, #4]
   149da:	4a13      	ldr	r2, [pc, #76]	; (14a28 <pm_policy_next_state+0x8c>)
   149dc:	46c4      	mov	ip, r8
   149de:	4659      	mov	r1, fp
   149e0:	fbe0 c107 	umlal	ip, r1, r0, r7
   149e4:	2300      	movs	r3, #0
   149e6:	4660      	mov	r0, ip
   149e8:	f7eb ffa8 	bl	93c <__aeabi_uldivmod>
   149ec:	9001      	str	r0, [sp, #4]
   149ee:	68a8      	ldr	r0, [r5, #8]
   149f0:	4a0d      	ldr	r2, [pc, #52]	; (14a28 <pm_policy_next_state+0x8c>)
   149f2:	46c4      	mov	ip, r8
   149f4:	4659      	mov	r1, fp
   149f6:	fbe0 c107 	umlal	ip, r1, r0, r7
   149fa:	2300      	movs	r3, #0
   149fc:	4660      	mov	r0, ip
   149fe:	f7eb ff9d 	bl	93c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14a02:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   14a06:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14a08:	d001      	beq.n	14a0e <pm_policy_next_state+0x72>
   14a0a:	4582      	cmp	sl, r0
   14a0c:	d905      	bls.n	14a1a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   14a0e:	1c73      	adds	r3, r6, #1
   14a10:	d0de      	beq.n	149d0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   14a12:	9b01      	ldr	r3, [sp, #4]
   14a14:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   14a16:	42b0      	cmp	r0, r6
   14a18:	d9da      	bls.n	149d0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14a1a:	3c01      	subs	r4, #1
   14a1c:	b2a4      	uxth	r4, r4
   14a1e:	3d0c      	subs	r5, #12
   14a20:	e7d4      	b.n	149cc <pm_policy_next_state+0x30>
   14a22:	bf00      	nop
   14a24:	20000578 	.word	0x20000578
   14a28:	000f4240 	.word	0x000f4240
   14a2c:	000f423f 	.word	0x000f423f

00014a30 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14a30:	b908      	cbnz	r0, 14a36 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14a32:	4b02      	ldr	r3, [pc, #8]	; (14a3c <pm_state_cpu_get_all+0xc>)
   14a34:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14a36:	2000      	movs	r0, #0
   14a38:	4770      	bx	lr
   14a3a:	bf00      	nop
   14a3c:	00028444 	.word	0x00028444

00014a40 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14a40:	4904      	ldr	r1, [pc, #16]	; (14a54 <sub_bytes+0x14>)
   14a42:	1e43      	subs	r3, r0, #1
   14a44:	300f      	adds	r0, #15
   14a46:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14a4a:	5c8a      	ldrb	r2, [r1, r2]
   14a4c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   14a4e:	4283      	cmp	r3, r0
   14a50:	d1f9      	bne.n	14a46 <sub_bytes+0x6>
	}
}
   14a52:	4770      	bx	lr
   14a54:	000291c4 	.word	0x000291c4

00014a58 <tc_aes128_set_encrypt_key>:
{
   14a58:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   14a5a:	4e26      	ldr	r6, [pc, #152]	; (14af4 <tc_aes128_set_encrypt_key+0x9c>)
{
   14a5c:	4607      	mov	r7, r0
   14a5e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14a60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   14a62:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14a64:	ad01      	add	r5, sp, #4
   14a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14a68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14a6c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14a70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14a74:	4638      	mov	r0, r7
   14a76:	2f00      	cmp	r7, #0
   14a78:	d038      	beq.n	14aec <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   14a7a:	2c00      	cmp	r4, #0
   14a7c:	d038      	beq.n	14af0 <tc_aes128_set_encrypt_key+0x98>
   14a7e:	1f38      	subs	r0, r7, #4
   14a80:	4621      	mov	r1, r4
   14a82:	4602      	mov	r2, r0
   14a84:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14a86:	784b      	ldrb	r3, [r1, #1]
   14a88:	780d      	ldrb	r5, [r1, #0]
   14a8a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14a8c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14a90:	78cd      	ldrb	r5, [r1, #3]
   14a92:	432b      	orrs	r3, r5
   14a94:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14a96:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14a98:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14a9c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14a9e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14aa2:	d1f0      	bne.n	14a86 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14aa4:	4c14      	ldr	r4, [pc, #80]	; (14af8 <tc_aes128_set_encrypt_key+0xa0>)
   14aa6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14aa8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   14aaa:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14aac:	d116      	bne.n	14adc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14aae:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14ab2:	5ca5      	ldrb	r5, [r4, r2]
   14ab4:	0e1a      	lsrs	r2, r3, #24
   14ab6:	5ca2      	ldrb	r2, [r4, r2]
   14ab8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14abc:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14ac0:	b2db      	uxtb	r3, r3
   14ac2:	5d65      	ldrb	r5, [r4, r5]
   14ac4:	5ce3      	ldrb	r3, [r4, r3]
   14ac6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   14aca:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   14ace:	f021 0303 	bic.w	r3, r1, #3
   14ad2:	3330      	adds	r3, #48	; 0x30
   14ad4:	446b      	add	r3, sp
   14ad6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   14ada:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   14adc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14ae0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14ae2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14ae4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14ae6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14ae8:	d1de      	bne.n	14aa8 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   14aea:	2001      	movs	r0, #1
}
   14aec:	b00d      	add	sp, #52	; 0x34
   14aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14af0:	4620      	mov	r0, r4
   14af2:	e7fb      	b.n	14aec <tc_aes128_set_encrypt_key+0x94>
   14af4:	000280d8 	.word	0x000280d8
   14af8:	000291c4 	.word	0x000291c4

00014afc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   14afc:	4801      	ldr	r0, [pc, #4]	; (14b04 <nrf_cc3xx_platform_abort_init+0x8>)
   14afe:	f00c ba33 	b.w	20f68 <nrf_cc3xx_platform_set_abort>
   14b02:	bf00      	nop
   14b04:	00028444 	.word	0x00028444

00014b08 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14b08:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   14b0a:	4604      	mov	r4, r0
   14b0c:	b918      	cbnz	r0, 14b16 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   14b0e:	4b0f      	ldr	r3, [pc, #60]	; (14b4c <mutex_free_platform+0x44>)
   14b10:	480f      	ldr	r0, [pc, #60]	; (14b50 <mutex_free_platform+0x48>)
   14b12:	685b      	ldr	r3, [r3, #4]
   14b14:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14b16:	6861      	ldr	r1, [r4, #4]
   14b18:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   14b1c:	d00f      	beq.n	14b3e <mutex_free_platform+0x36>
   14b1e:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   14b22:	d00c      	beq.n	14b3e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14b24:	4d0b      	ldr	r5, [pc, #44]	; (14b54 <mutex_free_platform+0x4c>)
   14b26:	42a9      	cmp	r1, r5
   14b28:	d009      	beq.n	14b3e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   14b2a:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   14b2e:	d007      	beq.n	14b40 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   14b30:	4809      	ldr	r0, [pc, #36]	; (14b58 <mutex_free_platform+0x50>)
   14b32:	4621      	mov	r1, r4
   14b34:	f011 ff30 	bl	26998 <k_mem_slab_free>
        mutex->mutex = NULL;
   14b38:	2300      	movs	r3, #0
   14b3a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   14b3c:	6065      	str	r5, [r4, #4]
}
   14b3e:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   14b40:	6820      	ldr	r0, [r4, #0]
   14b42:	2214      	movs	r2, #20
   14b44:	f012 fc48 	bl	273d8 <memset>
   14b48:	e7f8      	b.n	14b3c <mutex_free_platform+0x34>
   14b4a:	bf00      	nop
   14b4c:	2000090c 	.word	0x2000090c
   14b50:	000292c4 	.word	0x000292c4
   14b54:	a95c5f2c 	.word	0xa95c5f2c
   14b58:	20003588 	.word	0x20003588

00014b5c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14b5c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14b5e:	b320      	cbz	r0, 14baa <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   14b60:	6843      	ldr	r3, [r0, #4]
   14b62:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14b66:	d110      	bne.n	14b8a <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14b68:	2201      	movs	r2, #1
   14b6a:	6803      	ldr	r3, [r0, #0]
   14b6c:	f3bf 8f5b 	dmb	ish
   14b70:	e853 1f00 	ldrex	r1, [r3]
   14b74:	2900      	cmp	r1, #0
   14b76:	d103      	bne.n	14b80 <mutex_lock_platform+0x24>
   14b78:	e843 2000 	strex	r0, r2, [r3]
   14b7c:	2800      	cmp	r0, #0
   14b7e:	d1f7      	bne.n	14b70 <mutex_lock_platform+0x14>
   14b80:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14b84:	d10d      	bne.n	14ba2 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   14b86:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   14b88:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14b8a:	4a09      	ldr	r2, [pc, #36]	; (14bb0 <mutex_lock_platform+0x54>)
   14b8c:	4293      	cmp	r3, r2
   14b8e:	d00a      	beq.n	14ba6 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14b90:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14b92:	f04f 32ff 	mov.w	r2, #4294967295
   14b96:	f04f 33ff 	mov.w	r3, #4294967295
   14b9a:	f009 fa91 	bl	1e0c0 <z_impl_k_mutex_lock>
        if (ret == 0) {
   14b9e:	2800      	cmp	r0, #0
   14ba0:	d0f1      	beq.n	14b86 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14ba2:	4804      	ldr	r0, [pc, #16]	; (14bb4 <mutex_lock_platform+0x58>)
   14ba4:	e7f0      	b.n	14b88 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14ba6:	4804      	ldr	r0, [pc, #16]	; (14bb8 <mutex_lock_platform+0x5c>)
   14ba8:	e7ee      	b.n	14b88 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14baa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14bae:	e7eb      	b.n	14b88 <mutex_lock_platform+0x2c>
   14bb0:	a95c5f2c 	.word	0xa95c5f2c
   14bb4:	ffff8fe9 	.word	0xffff8fe9
   14bb8:	ffff8fea 	.word	0xffff8fea

00014bbc <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14bbc:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14bbe:	b1d8      	cbz	r0, 14bf8 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14bc0:	6843      	ldr	r3, [r0, #4]
   14bc2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14bc6:	d110      	bne.n	14bea <mutex_unlock_platform+0x2e>
   14bc8:	2200      	movs	r2, #0
   14bca:	6803      	ldr	r3, [r0, #0]
   14bcc:	f3bf 8f5b 	dmb	ish
   14bd0:	e853 1f00 	ldrex	r1, [r3]
   14bd4:	2901      	cmp	r1, #1
   14bd6:	d103      	bne.n	14be0 <mutex_unlock_platform+0x24>
   14bd8:	e843 2000 	strex	r0, r2, [r3]
   14bdc:	2800      	cmp	r0, #0
   14bde:	d1f7      	bne.n	14bd0 <mutex_unlock_platform+0x14>
   14be0:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14be4:	d10b      	bne.n	14bfe <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14be6:	2000      	movs	r0, #0
    }
}
   14be8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14bea:	4a07      	ldr	r2, [pc, #28]	; (14c08 <mutex_unlock_platform+0x4c>)
   14bec:	4293      	cmp	r3, r2
   14bee:	d008      	beq.n	14c02 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14bf0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14bf2:	f009 fadf 	bl	1e1b4 <z_impl_k_mutex_unlock>
   14bf6:	e7f6      	b.n	14be6 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14bf8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14bfc:	e7f4      	b.n	14be8 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14bfe:	4803      	ldr	r0, [pc, #12]	; (14c0c <mutex_unlock_platform+0x50>)
   14c00:	e7f2      	b.n	14be8 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14c02:	4803      	ldr	r0, [pc, #12]	; (14c10 <mutex_unlock_platform+0x54>)
   14c04:	e7f0      	b.n	14be8 <mutex_unlock_platform+0x2c>
   14c06:	bf00      	nop
   14c08:	a95c5f2c 	.word	0xa95c5f2c
   14c0c:	ffff8fe9 	.word	0xffff8fe9
   14c10:	ffff8fea 	.word	0xffff8fea

00014c14 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14c14:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14c16:	4604      	mov	r4, r0
   14c18:	b918      	cbnz	r0, 14c22 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   14c1a:	4b1d      	ldr	r3, [pc, #116]	; (14c90 <mutex_init_platform+0x7c>)
   14c1c:	481d      	ldr	r0, [pc, #116]	; (14c94 <mutex_init_platform+0x80>)
   14c1e:	685b      	ldr	r3, [r3, #4]
   14c20:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14c22:	6863      	ldr	r3, [r4, #4]
   14c24:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14c28:	d02f      	beq.n	14c8a <mutex_init_platform+0x76>
   14c2a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   14c2e:	d02c      	beq.n	14c8a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   14c30:	4a19      	ldr	r2, [pc, #100]	; (14c98 <mutex_init_platform+0x84>)
   14c32:	4293      	cmp	r3, r2
   14c34:	d119      	bne.n	14c6a <mutex_init_platform+0x56>
   14c36:	6823      	ldr	r3, [r4, #0]
   14c38:	bb03      	cbnz	r3, 14c7c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14c3a:	4818      	ldr	r0, [pc, #96]	; (14c9c <mutex_init_platform+0x88>)
   14c3c:	f04f 32ff 	mov.w	r2, #4294967295
   14c40:	f04f 33ff 	mov.w	r3, #4294967295
   14c44:	4621      	mov	r1, r4
   14c46:	f009 f937 	bl	1deb8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14c4a:	b908      	cbnz	r0, 14c50 <mutex_init_platform+0x3c>
   14c4c:	6823      	ldr	r3, [r4, #0]
   14c4e:	b91b      	cbnz	r3, 14c58 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   14c50:	4b0f      	ldr	r3, [pc, #60]	; (14c90 <mutex_init_platform+0x7c>)
   14c52:	4813      	ldr	r0, [pc, #76]	; (14ca0 <mutex_init_platform+0x8c>)
   14c54:	685b      	ldr	r3, [r3, #4]
   14c56:	4798      	blx	r3
   14c58:	6820      	ldr	r0, [r4, #0]
   14c5a:	2214      	movs	r2, #20
   14c5c:	2100      	movs	r1, #0
   14c5e:	f012 fbbb 	bl	273d8 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   14c62:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   14c66:	6063      	str	r3, [r4, #4]
   14c68:	e008      	b.n	14c7c <mutex_init_platform+0x68>
    switch(flags){
   14c6a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14c6e:	d80d      	bhi.n	14c8c <mutex_init_platform+0x78>
   14c70:	2b3a      	cmp	r3, #58	; 0x3a
   14c72:	d003      	beq.n	14c7c <mutex_init_platform+0x68>
   14c74:	f640 62ba 	movw	r2, #3770	; 0xeba
   14c78:	4293      	cmp	r3, r2
   14c7a:	d1de      	bne.n	14c3a <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   14c7c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14c7e:	f011 fed0 	bl	26a22 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14c82:	6863      	ldr	r3, [r4, #4]
   14c84:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   14c88:	6063      	str	r3, [r4, #4]
}
   14c8a:	bd10      	pop	{r4, pc}
    switch(flags){
   14c8c:	4a05      	ldr	r2, [pc, #20]	; (14ca4 <mutex_init_platform+0x90>)
   14c8e:	e7f3      	b.n	14c78 <mutex_init_platform+0x64>
   14c90:	2000090c 	.word	0x2000090c
   14c94:	000292c4 	.word	0x000292c4
   14c98:	a95c5f2c 	.word	0xa95c5f2c
   14c9c:	20003588 	.word	0x20003588
   14ca0:	000292ea 	.word	0x000292ea
   14ca4:	3a00003a 	.word	0x3a00003a

00014ca8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14ca8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14caa:	4906      	ldr	r1, [pc, #24]	; (14cc4 <nrf_cc3xx_platform_mutex_init+0x1c>)
   14cac:	4806      	ldr	r0, [pc, #24]	; (14cc8 <nrf_cc3xx_platform_mutex_init+0x20>)
   14cae:	2340      	movs	r3, #64	; 0x40
   14cb0:	2214      	movs	r2, #20
   14cb2:	f011 fe63 	bl	2697c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   14cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14cba:	4904      	ldr	r1, [pc, #16]	; (14ccc <nrf_cc3xx_platform_mutex_init+0x24>)
   14cbc:	4804      	ldr	r0, [pc, #16]	; (14cd0 <nrf_cc3xx_platform_mutex_init+0x28>)
   14cbe:	f00c ba1b 	b.w	210f8 <nrf_cc3xx_platform_set_mutexes>
   14cc2:	bf00      	nop
   14cc4:	20003088 	.word	0x20003088
   14cc8:	20003588 	.word	0x20003588
   14ccc:	0002844c 	.word	0x0002844c
   14cd0:	00028460 	.word	0x00028460

00014cd4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14cd4:	4901      	ldr	r1, [pc, #4]	; (14cdc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14cd6:	2210      	movs	r2, #16
	str	r2, [r1]
   14cd8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14cda:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14cdc:	e000ed10 	.word	0xe000ed10

00014ce0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14ce0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14ce2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14ce4:	f380 8811 	msr	BASEPRI, r0
	isb
   14ce8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14cec:	f3bf 8f4f 	dsb	sy
   14cf0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14cf2:	b662      	cpsie	i
	isb
   14cf4:	f3bf 8f6f 	isb	sy

	bx	lr
   14cf8:	4770      	bx	lr
   14cfa:	bf00      	nop

00014cfc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14cfc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14cfe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14d00:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14d04:	f3bf 8f4f 	dsb	sy
   14d08:	bf20      	wfe

	msr	BASEPRI, r0
   14d0a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14d0e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14d10:	4770      	bx	lr
   14d12:	bf00      	nop

00014d14 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d18:	4680      	mov	r8, r0
   14d1a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   14d1c:	460c      	mov	r4, r1
   14d1e:	2900      	cmp	r1, #0
   14d20:	f000 8093 	beq.w	14e4a <z_arm_fatal_error+0x136>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14d24:	46e9      	mov	r9, sp
   14d26:	b08a      	sub	sp, #40	; 0x28
   14d28:	e9d1 1200 	ldrd	r1, r2, [r1]
   14d2c:	68a3      	ldr	r3, [r4, #8]
   14d2e:	466d      	mov	r5, sp
   14d30:	4849      	ldr	r0, [pc, #292]	; (14e58 <z_arm_fatal_error+0x144>)
   14d32:	462e      	mov	r6, r5
   14d34:	f04f 0a05 	mov.w	sl, #5
   14d38:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14d3c:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14d40:	f846 af10 	str.w	sl, [r6, #16]!
   14d44:	4845      	ldr	r0, [pc, #276]	; (14e5c <z_arm_fatal_error+0x148>)
   14d46:	4632      	mov	r2, r6
   14d48:	2300      	movs	r3, #0
   14d4a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14d4e:	f7ff f967 	bl	14020 <z_impl_z_log_msg_static_create>
   14d52:	46cd      	mov	sp, r9
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14d54:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   14d58:	6963      	ldr	r3, [r4, #20]
   14d5a:	46ad      	mov	sp, r5
   14d5c:	4840      	ldr	r0, [pc, #256]	; (14e60 <z_arm_fatal_error+0x14c>)
   14d5e:	f8c5 a010 	str.w	sl, [r5, #16]
   14d62:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14d66:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14d6a:	483c      	ldr	r0, [pc, #240]	; (14e5c <z_arm_fatal_error+0x148>)
   14d6c:	4632      	mov	r2, r6
   14d6e:	2300      	movs	r3, #0
   14d70:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14d74:	f7ff f954 	bl	14020 <z_impl_z_log_msg_static_create>
   14d78:	46cd      	mov	sp, r9
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14d7a:	b088      	sub	sp, #32
   14d7c:	69e3      	ldr	r3, [r4, #28]
   14d7e:	466a      	mov	r2, sp
   14d80:	4938      	ldr	r1, [pc, #224]	; (14e64 <z_arm_fatal_error+0x150>)
   14d82:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14d86:	2303      	movs	r3, #3
   14d88:	f842 3f10 	str.w	r3, [r2, #16]!
   14d8c:	4833      	ldr	r0, [pc, #204]	; (14e5c <z_arm_fatal_error+0x148>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14d8e:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 14e70 <z_arm_fatal_error+0x15c>
   14d92:	2300      	movs	r3, #0
   14d94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d98:	f7ff f942 	bl	14020 <z_impl_z_log_msg_static_create>
   14d9c:	4626      	mov	r6, r4
   14d9e:	46cd      	mov	sp, r9
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   14da0:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14da2:	f04f 0a0a 	mov.w	sl, #10
   14da6:	edd6 7a08 	vldr	s15, [r6, #32]
   14daa:	eebc 7ae7 	vcvt.u32.f32	s14, s15
   14dae:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   14db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14db6:	46e9      	mov	r9, sp
   14db8:	ee17 1a90 	vmov	r1, s15
   14dbc:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   14dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14dc4:	b08e      	sub	sp, #56	; 0x38
   14dc6:	ee17 3a90 	vmov	r3, s15
   14dca:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   14dce:	466a      	mov	r2, sp
   14dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14dd4:	1c68      	adds	r0, r5, #1
   14dd6:	e9c2 0108 	strd	r0, r1, [r2, #32]
   14dda:	1ca9      	adds	r1, r5, #2
   14ddc:	e9c2 130a 	strd	r1, r3, [r2, #40]	; 0x28
   14de0:	1ceb      	adds	r3, r5, #3
   14de2:	e9c2 b505 	strd	fp, r5, [r2, #20]
   14de6:	ed82 7a07 	vstr	s14, [r2, #28]
   14dea:	6313      	str	r3, [r2, #48]	; 0x30
   14dec:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
   14df0:	f842 af10 	str.w	sl, [r2, #16]!
   14df4:	4819      	ldr	r0, [pc, #100]	; (14e5c <z_arm_fatal_error+0x148>)
   14df6:	2300      	movs	r3, #0
   14df8:	f245 0140 	movw	r1, #20544	; 0x5040
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   14dfc:	3504      	adds	r5, #4
   14dfe:	f7ff f90f 	bl	14020 <z_impl_z_log_msg_static_create>
   14e02:	2d10      	cmp	r5, #16
   14e04:	46cd      	mov	sp, r9
   14e06:	f106 0610 	add.w	r6, r6, #16
   14e0a:	d1cc      	bne.n	14da6 <z_arm_fatal_error+0x92>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   14e0c:	b088      	sub	sp, #32
   14e0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14e10:	466a      	mov	r2, sp
   14e12:	4915      	ldr	r1, [pc, #84]	; (14e68 <z_arm_fatal_error+0x154>)
   14e14:	2503      	movs	r5, #3
   14e16:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14e1a:	f842 5f10 	str.w	r5, [r2, #16]!
   14e1e:	480f      	ldr	r0, [pc, #60]	; (14e5c <z_arm_fatal_error+0x148>)
   14e20:	2300      	movs	r3, #0
   14e22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e26:	f7ff f8fb 	bl	14020 <z_impl_z_log_msg_static_create>
   14e2a:	46cd      	mov	sp, r9
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14e2c:	b088      	sub	sp, #32
   14e2e:	69a3      	ldr	r3, [r4, #24]
   14e30:	466a      	mov	r2, sp
   14e32:	490e      	ldr	r1, [pc, #56]	; (14e6c <z_arm_fatal_error+0x158>)
   14e34:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14e38:	f842 5f10 	str.w	r5, [r2, #16]!
   14e3c:	4807      	ldr	r0, [pc, #28]	; (14e5c <z_arm_fatal_error+0x148>)
   14e3e:	2300      	movs	r3, #0
   14e40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e44:	f7ff f8ec 	bl	14020 <z_impl_z_log_msg_static_create>
   14e48:	46cd      	mov	sp, r9
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14e4a:	4621      	mov	r1, r4
   14e4c:	4640      	mov	r0, r8
   14e4e:	f008 fea1 	bl	1db94 <z_fatal_error>
}
   14e52:	46bd      	mov	sp, r7
   14e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e58:	00029317 	.word	0x00029317
   14e5c:	0002804c 	.word	0x0002804c
   14e60:	00029346 	.word	0x00029346
   14e64:	00029375 	.word	0x00029375
   14e68:	000293c7 	.word	0x000293c7
   14e6c:	000293d6 	.word	0x000293d6
   14e70:	00029384 	.word	0x00029384

00014e74 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14e74:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14e76:	2800      	cmp	r0, #0
   14e78:	db07      	blt.n	14e8a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14e7a:	4a04      	ldr	r2, [pc, #16]	; (14e8c <arch_irq_enable+0x18>)
   14e7c:	0941      	lsrs	r1, r0, #5
   14e7e:	2301      	movs	r3, #1
   14e80:	f000 001f 	and.w	r0, r0, #31
   14e84:	4083      	lsls	r3, r0
   14e86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14e8a:	4770      	bx	lr
   14e8c:	e000e100 	.word	0xe000e100

00014e90 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14e90:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14e92:	2800      	cmp	r0, #0
   14e94:	db0c      	blt.n	14eb0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14e96:	0943      	lsrs	r3, r0, #5
   14e98:	4906      	ldr	r1, [pc, #24]	; (14eb4 <arch_irq_disable+0x24>)
   14e9a:	f000 001f 	and.w	r0, r0, #31
   14e9e:	3320      	adds	r3, #32
   14ea0:	2201      	movs	r2, #1
   14ea2:	4082      	lsls	r2, r0
   14ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14eac:	f3bf 8f6f 	isb	sy
}
   14eb0:	4770      	bx	lr
   14eb2:	bf00      	nop
   14eb4:	e000e100 	.word	0xe000e100

00014eb8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14eb8:	4b05      	ldr	r3, [pc, #20]	; (14ed0 <arch_irq_is_enabled+0x18>)
   14eba:	0942      	lsrs	r2, r0, #5
   14ebc:	f000 001f 	and.w	r0, r0, #31
   14ec0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14ec4:	2301      	movs	r3, #1
   14ec6:	fa03 f000 	lsl.w	r0, r3, r0
}
   14eca:	4010      	ands	r0, r2
   14ecc:	4770      	bx	lr
   14ece:	bf00      	nop
   14ed0:	e000e100 	.word	0xe000e100

00014ed4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14ed4:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14ed6:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   14ed8:	bf54      	ite	pl
   14eda:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14edc:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14ede:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ee0:	bfac      	ite	ge
   14ee2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ee6:	4a07      	ldrlt	r2, [pc, #28]	; (14f04 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ee8:	ea4f 1341 	mov.w	r3, r1, lsl #5
   14eec:	bfac      	ite	ge
   14eee:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ef2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ef6:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ef8:	bfb4      	ite	lt
   14efa:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14efc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   14f00:	4770      	bx	lr
   14f02:	bf00      	nop
   14f04:	e000ed14 	.word	0xe000ed14

00014f08 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14f08:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14f0a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14f0c:	4b04      	ldr	r3, [pc, #16]	; (14f20 <_arch_isr_direct_pm+0x18>)
   14f0e:	69da      	ldr	r2, [r3, #28]
   14f10:	b11a      	cbz	r2, 14f1a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14f12:	2200      	movs	r2, #0
   14f14:	61da      	str	r2, [r3, #28]
		z_pm_save_idle_exit();
   14f16:	f011 fd75 	bl	26a04 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14f1a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14f1c:	bd08      	pop	{r3, pc}
   14f1e:	bf00      	nop
   14f20:	20003968 	.word	0x20003968

00014f24 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14f24:	bf30      	wfi
    b z_SysNmiOnReset
   14f26:	f7ff bffd 	b.w	14f24 <z_SysNmiOnReset>
   14f2a:	bf00      	nop

00014f2c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14f2c:	4a14      	ldr	r2, [pc, #80]	; (14f80 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14f2e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14f30:	4b14      	ldr	r3, [pc, #80]	; (14f84 <z_arm_prep_c+0x58>)
   14f32:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14f36:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14f38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14f3c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14f40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14f44:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   14f4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14f50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   14f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   14f58:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   14f5c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   14f60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14f64:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   14f68:	2300      	movs	r3, #0
   14f6a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14f6e:	f008 fecb 	bl	1dd08 <z_bss_zero>
	z_data_copy();
   14f72:	f009 fe6b 	bl	1ec4c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14f76:	f000 fc39 	bl	157ec <z_arm_interrupt_init>
	z_cstart();
   14f7a:	f008 ff09 	bl	1dd90 <z_cstart>
   14f7e:	bf00      	nop
   14f80:	00000000 	.word	0x00000000
   14f84:	e000ed00 	.word	0xe000ed00

00014f88 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14f88:	4a09      	ldr	r2, [pc, #36]	; (14fb0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14f8a:	490a      	ldr	r1, [pc, #40]	; (14fb4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14f8c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14f8e:	6809      	ldr	r1, [r1, #0]
   14f90:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14f92:	4909      	ldr	r1, [pc, #36]	; (14fb8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14f94:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14f96:	684b      	ldr	r3, [r1, #4]
   14f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14f9c:	604b      	str	r3, [r1, #4]
   14f9e:	2300      	movs	r3, #0
   14fa0:	f383 8811 	msr	BASEPRI, r3
   14fa4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14fa8:	6893      	ldr	r3, [r2, #8]
}
   14faa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14fac:	4770      	bx	lr
   14fae:	bf00      	nop
   14fb0:	20003968 	.word	0x20003968
   14fb4:	000288f8 	.word	0x000288f8
   14fb8:	e000ed00 	.word	0xe000ed00

00014fbc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14fbc:	4921      	ldr	r1, [pc, #132]	; (15044 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14fbe:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   14fc0:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14fc4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14fc8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14fca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14fce:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   14fd2:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   14fd6:	d103      	bne.n	14fe0 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   14fd8:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   14fdc:	ec80 8a10 	vstmia	r0, {s16-s31}

00014fe0 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14fe0:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14fe2:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14fe6:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14fea:	4f17      	ldr	r7, [pc, #92]	; (15048 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14fec:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14ff0:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   14ff2:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14ff4:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   14ff6:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14ffa:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14ffc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14ffe:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15000:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   15004:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   15008:	d003      	beq.n	15012 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   1500a:	2300      	movs	r3, #0
    vmsr fpscr, r3
   1500c:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   15010:	e003      	b.n	1501a <in_fp_endif>

00015012 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   15012:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   15016:	ec90 8a10 	vldmia	r0, {s16-s31}

0001501a <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1501a:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   1501e:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   15022:	f383 8814 	msr	CONTROL, r3
    isb
   15026:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1502a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1502c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1502e:	f000 fc79 	bl	15924 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   15032:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   15036:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1503a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1503e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   15042:	4770      	bx	lr
    ldr r1, =_kernel
   15044:	20003968 	.word	0x20003968
    ldr v4, =_SCS_ICSR
   15048:	e000ed04 	.word	0xe000ed04

0001504c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1504c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   15050:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   15052:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   15056:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1505a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1505c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   15060:	2902      	cmp	r1, #2
    beq _oops
   15062:	d0ff      	beq.n	15064 <_oops>

00015064 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   15064:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   15066:	f00f fcc3 	bl	249f0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1506a:	bd01      	pop	{r0, pc}

0001506c <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   1506c:	7b01      	ldrb	r1, [r0, #12]
   1506e:	0789      	lsls	r1, r1, #30
   15070:	d505      	bpl.n	1507e <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
   15072:	6e81      	ldr	r1, [r0, #104]	; 0x68
   15074:	3140      	adds	r1, #64	; 0x40
   15076:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
   15078:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
   1507a:	3940      	subs	r1, #64	; 0x40
   1507c:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1507e:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15082:	9b00      	ldr	r3, [sp, #0]
   15084:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   15088:	490f      	ldr	r1, [pc, #60]	; (150c8 <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
   1508a:	9b01      	ldr	r3, [sp, #4]
   1508c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15090:	9b02      	ldr	r3, [sp, #8]
   15092:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   15096:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1509a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1509e:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   150a2:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   150a6:	2300      	movs	r3, #0
   150a8:	6783      	str	r3, [r0, #120]	; 0x78
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   150aa:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   150ac:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   150b0:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   150b4:	f64f 5308 	movw	r3, #64776	; 0xfd08
   150b8:	bf08      	it	eq
   150ba:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
   150be:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   150c0:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   150c4:	4770      	bx	lr
   150c6:	bf00      	nop
   150c8:	000239d1 	.word	0x000239d1

000150cc <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   150cc:	7b03      	ldrb	r3, [r0, #12]
   150ce:	f013 0f02 	tst.w	r3, #2
   150d2:	4b19      	ldr	r3, [pc, #100]	; (15138 <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
   150d4:	d103      	bne.n	150de <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
   150d6:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   150da:	06d2      	lsls	r2, r2, #27
   150dc:	d417      	bmi.n	1510e <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
   150de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   150e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   150e4:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   150e6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   150ea:	0719      	lsls	r1, r3, #28
   150ec:	d409      	bmi.n	15102 <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   150ee:	f043 0308 	orr.w	r3, r3, #8
   150f2:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start +=
   150f6:	6e83      	ldr	r3, [r0, #104]	; 0x68
   150f8:	3340      	adds	r3, #64	; 0x40
   150fa:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size -=
   150fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   150fe:	3b40      	subs	r3, #64	; 0x40
   15100:	66c3      	str	r3, [r0, #108]	; 0x6c

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
   15102:	7b03      	ldrb	r3, [r0, #12]
   15104:	f043 0302 	orr.w	r3, r3, #2
   15108:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
   1510a:	2080      	movs	r0, #128	; 0x80
   1510c:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
   1510e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   15110:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   15114:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   15116:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1511a:	071a      	lsls	r2, r3, #28
   1511c:	d401      	bmi.n	15122 <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
   1511e:	2040      	movs	r0, #64	; 0x40
}
   15120:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   15122:	f023 0308 	bic.w	r3, r3, #8
   15126:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start -=
   1512a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1512c:	3b40      	subs	r3, #64	; 0x40
   1512e:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size +=
   15130:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   15132:	3340      	adds	r3, #64	; 0x40
   15134:	66c3      	str	r3, [r0, #108]	; 0x6c
   15136:	e7f2      	b.n	1511e <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
   15138:	e000ef00 	.word	0xe000ef00

0001513c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1513c:	4a0c      	ldr	r2, [pc, #48]	; (15170 <z_check_thread_stack_fail+0x34>)
{
   1513e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   15140:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   15142:	b1a0      	cbz	r0, 1516e <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
   15144:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15148:	6e80      	ldr	r0, [r0, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   1514a:	f012 0f08 	tst.w	r2, #8
   1514e:	bf0c      	ite	eq
   15150:	2240      	moveq	r2, #64	; 0x40
   15152:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15154:	f113 0f16 	cmn.w	r3, #22
   15158:	d004      	beq.n	15164 <z_check_thread_stack_fail+0x28>
   1515a:	1a82      	subs	r2, r0, r2
   1515c:	429a      	cmp	r2, r3
   1515e:	d805      	bhi.n	1516c <z_check_thread_stack_fail+0x30>
   15160:	4283      	cmp	r3, r0
   15162:	d203      	bcs.n	1516c <z_check_thread_stack_fail+0x30>
		return 0;
   15164:	4281      	cmp	r1, r0
   15166:	bf28      	it	cs
   15168:	2000      	movcs	r0, #0
   1516a:	4770      	bx	lr
   1516c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   1516e:	4770      	bx	lr
   15170:	20003968 	.word	0x20003968

00015174 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15174:	b508      	push	{r3, lr}
   15176:	4614      	mov	r4, r2
   15178:	460d      	mov	r5, r1
   1517a:	2200      	movs	r2, #0
   1517c:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15180:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   15184:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   15188:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
   1518c:	f3bf 8f6f 	isb	sy
   15190:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   15194:	4a08      	ldr	r2, [pc, #32]	; (151b8 <arch_switch_to_main_thread+0x44>)
   15196:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   15198:	f000 fbc4 	bl	15924 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1519c:	4620      	mov	r0, r4
   1519e:	f385 8809 	msr	PSP, r5
   151a2:	2100      	movs	r1, #0
   151a4:	b663      	cpsie	if
   151a6:	f381 8811 	msr	BASEPRI, r1
   151aa:	f3bf 8f6f 	isb	sy
   151ae:	2200      	movs	r2, #0
   151b0:	2300      	movs	r3, #0
   151b2:	f00e fc0d 	bl	239d0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   151b6:	bf00      	nop
   151b8:	20003968 	.word	0x20003968

000151bc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   151bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   151be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   151c0:	4a0b      	ldr	r2, [pc, #44]	; (151f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   151c2:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   151c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   151c6:	bf1e      	ittt	ne
	movne	r1, #0
   151c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   151ca:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   151cc:	f011 fc1a 	blne	26a04 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   151d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   151d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   151d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   151da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   151de:	4905      	ldr	r1, [pc, #20]	; (151f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   151e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   151e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   151e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   151e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   151ea:	4903      	ldr	r1, [pc, #12]	; (151f8 <_isr_wrapper+0x3c>)
	bx r1
   151ec:	4708      	bx	r1
   151ee:	0000      	.short	0x0000
	ldr r2, =_kernel
   151f0:	20003968 	.word	0x20003968
	ldr r1, =_sw_isr_table
   151f4:	00027d50 	.word	0x00027d50
	ldr r1, =z_arm_int_exit
   151f8:	000151fd 	.word	0x000151fd

000151fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   151fc:	4b04      	ldr	r3, [pc, #16]	; (15210 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   151fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15200:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   15202:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15204:	d003      	beq.n	1520e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15206:	4903      	ldr	r1, [pc, #12]	; (15214 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1520c:	600a      	str	r2, [r1, #0]

0001520e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1520e:	4770      	bx	lr
	ldr r3, =_kernel
   15210:	20003968 	.word	0x20003968
	ldr r1, =_SCS_ICSR
   15214:	e000ed04 	.word	0xe000ed04

00015218 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1521c:	b086      	sub	sp, #24
   1521e:	4606      	mov	r6, r0
   15220:	af00      	add	r7, sp, #0
   15222:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   15224:	4b3e      	ldr	r3, [pc, #248]	; (15320 <bus_fault.constprop.0+0x108>)
   15226:	617b      	str	r3, [r7, #20]
   15228:	2402      	movs	r4, #2
   1522a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1522e:	483d      	ldr	r0, [pc, #244]	; (15324 <bus_fault.constprop.0+0x10c>)
   15230:	613c      	str	r4, [r7, #16]
   15232:	f107 0210 	add.w	r2, r7, #16
   15236:	f00f fbea 	bl	24a0e <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1523a:	4b3b      	ldr	r3, [pc, #236]	; (15328 <bus_fault.constprop.0+0x110>)
   1523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1523e:	04d9      	lsls	r1, r3, #19
   15240:	d509      	bpl.n	15256 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   15242:	4b3a      	ldr	r3, [pc, #232]	; (1532c <bus_fault.constprop.0+0x114>)
   15244:	4837      	ldr	r0, [pc, #220]	; (15324 <bus_fault.constprop.0+0x10c>)
   15246:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1524a:	f107 0210 	add.w	r2, r7, #16
   1524e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15252:	f00f fbdc 	bl	24a0e <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15256:	4b34      	ldr	r3, [pc, #208]	; (15328 <bus_fault.constprop.0+0x110>)
   15258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1525a:	051a      	lsls	r2, r3, #20
   1525c:	d50a      	bpl.n	15274 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1525e:	4b34      	ldr	r3, [pc, #208]	; (15330 <bus_fault.constprop.0+0x118>)
   15260:	617b      	str	r3, [r7, #20]
   15262:	2302      	movs	r3, #2
   15264:	482f      	ldr	r0, [pc, #188]	; (15324 <bus_fault.constprop.0+0x10c>)
   15266:	613b      	str	r3, [r7, #16]
   15268:	f107 0210 	add.w	r2, r7, #16
   1526c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15270:	f00f fbcd 	bl	24a0e <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15274:	4c2c      	ldr	r4, [pc, #176]	; (15328 <bus_fault.constprop.0+0x110>)
   15276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15278:	059b      	lsls	r3, r3, #22
   1527a:	d522      	bpl.n	152c2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   1527c:	46e8      	mov	r8, sp
   1527e:	4b2d      	ldr	r3, [pc, #180]	; (15334 <bus_fault.constprop.0+0x11c>)
   15280:	617b      	str	r3, [r7, #20]
   15282:	2302      	movs	r3, #2
   15284:	4827      	ldr	r0, [pc, #156]	; (15324 <bus_fault.constprop.0+0x10c>)
   15286:	613b      	str	r3, [r7, #16]
   15288:	f107 0210 	add.w	r2, r7, #16
   1528c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15290:	f00f fbbd 	bl	24a0e <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   15294:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15296:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   15298:	0410      	lsls	r0, r2, #16
   1529a:	d512      	bpl.n	152c2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1529c:	b088      	sub	sp, #32
   1529e:	466a      	mov	r2, sp
   152a0:	4925      	ldr	r1, [pc, #148]	; (15338 <bus_fault.constprop.0+0x120>)
   152a2:	4820      	ldr	r0, [pc, #128]	; (15324 <bus_fault.constprop.0+0x10c>)
   152a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   152a8:	2303      	movs	r3, #3
   152aa:	f842 3f10 	str.w	r3, [r2, #16]!
   152ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   152b2:	f00f fbac 	bl	24a0e <z_log_msg_static_create.constprop.0>
   152b6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   152b8:	b11e      	cbz	r6, 152c2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   152ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   152bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   152c0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   152c2:	4b19      	ldr	r3, [pc, #100]	; (15328 <bus_fault.constprop.0+0x110>)
   152c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   152c6:	0559      	lsls	r1, r3, #21
   152c8:	d50a      	bpl.n	152e0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   152ca:	4b1c      	ldr	r3, [pc, #112]	; (1533c <bus_fault.constprop.0+0x124>)
   152cc:	617b      	str	r3, [r7, #20]
   152ce:	2302      	movs	r3, #2
   152d0:	4814      	ldr	r0, [pc, #80]	; (15324 <bus_fault.constprop.0+0x10c>)
   152d2:	613b      	str	r3, [r7, #16]
   152d4:	f107 0210 	add.w	r2, r7, #16
   152d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   152dc:	f00f fb97 	bl	24a0e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   152e0:	4b11      	ldr	r3, [pc, #68]	; (15328 <bus_fault.constprop.0+0x110>)
   152e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   152e4:	05d2      	lsls	r2, r2, #23
   152e6:	d515      	bpl.n	15314 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   152e8:	4b15      	ldr	r3, [pc, #84]	; (15340 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   152ea:	617b      	str	r3, [r7, #20]
   152ec:	2302      	movs	r3, #2
   152ee:	480d      	ldr	r0, [pc, #52]	; (15324 <bus_fault.constprop.0+0x10c>)
   152f0:	613b      	str	r3, [r7, #16]
   152f2:	f107 0210 	add.w	r2, r7, #16
   152f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   152fa:	f00f fb88 	bl	24a0e <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   152fe:	4a0a      	ldr	r2, [pc, #40]	; (15328 <bus_fault.constprop.0+0x110>)
   15300:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   15302:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15304:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   15308:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1530a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1530c:	7028      	strb	r0, [r5, #0]
}
   1530e:	46bd      	mov	sp, r7
   15310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15316:	049b      	lsls	r3, r3, #18
   15318:	d5f1      	bpl.n	152fe <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1531a:	4b0a      	ldr	r3, [pc, #40]	; (15344 <bus_fault.constprop.0+0x12c>)
   1531c:	e7e5      	b.n	152ea <bus_fault.constprop.0+0xd2>
   1531e:	bf00      	nop
   15320:	00029404 	.word	0x00029404
   15324:	0002804c 	.word	0x0002804c
   15328:	e000ed00 	.word	0xe000ed00
   1532c:	0002941a 	.word	0x0002941a
   15330:	0002942b 	.word	0x0002942b
   15334:	0002943e 	.word	0x0002943e
   15338:	00029457 	.word	0x00029457
   1533c:	0002946c 	.word	0x0002946c
   15340:	00029487 	.word	0x00029487
   15344:	0002949f 	.word	0x0002949f

00015348 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   15348:	b510      	push	{r4, lr}
   1534a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1534c:	4b33      	ldr	r3, [pc, #204]	; (1541c <usage_fault.constprop.0+0xd4>)
   1534e:	4834      	ldr	r0, [pc, #208]	; (15420 <usage_fault.constprop.0+0xd8>)
   15350:	9305      	str	r3, [sp, #20]
   15352:	2402      	movs	r4, #2
   15354:	aa04      	add	r2, sp, #16
   15356:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1535a:	9404      	str	r4, [sp, #16]
   1535c:	f00f fb57 	bl	24a0e <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15360:	4b30      	ldr	r3, [pc, #192]	; (15424 <usage_fault.constprop.0+0xdc>)
   15362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15364:	019b      	lsls	r3, r3, #6
   15366:	d508      	bpl.n	1537a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   15368:	4b2f      	ldr	r3, [pc, #188]	; (15428 <usage_fault.constprop.0+0xe0>)
   1536a:	482d      	ldr	r0, [pc, #180]	; (15420 <usage_fault.constprop.0+0xd8>)
   1536c:	aa04      	add	r2, sp, #16
   1536e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15372:	e9cd 4304 	strd	r4, r3, [sp, #16]
   15376:	f00f fb4a 	bl	24a0e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1537a:	4b2a      	ldr	r3, [pc, #168]	; (15424 <usage_fault.constprop.0+0xdc>)
   1537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1537e:	01dc      	lsls	r4, r3, #7
   15380:	d509      	bpl.n	15396 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   15382:	4b2a      	ldr	r3, [pc, #168]	; (1542c <usage_fault.constprop.0+0xe4>)
   15384:	9305      	str	r3, [sp, #20]
   15386:	4826      	ldr	r0, [pc, #152]	; (15420 <usage_fault.constprop.0+0xd8>)
   15388:	2302      	movs	r3, #2
   1538a:	aa04      	add	r2, sp, #16
   1538c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15390:	9304      	str	r3, [sp, #16]
   15392:	f00f fb3c 	bl	24a0e <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15396:	4b23      	ldr	r3, [pc, #140]	; (15424 <usage_fault.constprop.0+0xdc>)
   15398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1539a:	0318      	lsls	r0, r3, #12
   1539c:	d509      	bpl.n	153b2 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   1539e:	4b24      	ldr	r3, [pc, #144]	; (15430 <usage_fault.constprop.0+0xe8>)
   153a0:	9305      	str	r3, [sp, #20]
   153a2:	481f      	ldr	r0, [pc, #124]	; (15420 <usage_fault.constprop.0+0xd8>)
   153a4:	2302      	movs	r3, #2
   153a6:	aa04      	add	r2, sp, #16
   153a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   153ac:	9304      	str	r3, [sp, #16]
   153ae:	f00f fb2e 	bl	24a0e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   153b2:	4b1c      	ldr	r3, [pc, #112]	; (15424 <usage_fault.constprop.0+0xdc>)
   153b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   153b6:	0359      	lsls	r1, r3, #13
   153b8:	d509      	bpl.n	153ce <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   153ba:	4b1e      	ldr	r3, [pc, #120]	; (15434 <usage_fault.constprop.0+0xec>)
   153bc:	9305      	str	r3, [sp, #20]
   153be:	4818      	ldr	r0, [pc, #96]	; (15420 <usage_fault.constprop.0+0xd8>)
   153c0:	2302      	movs	r3, #2
   153c2:	aa04      	add	r2, sp, #16
   153c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   153c8:	9304      	str	r3, [sp, #16]
   153ca:	f00f fb20 	bl	24a0e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   153ce:	4b15      	ldr	r3, [pc, #84]	; (15424 <usage_fault.constprop.0+0xdc>)
   153d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   153d2:	039a      	lsls	r2, r3, #14
   153d4:	d509      	bpl.n	153ea <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   153d6:	4b18      	ldr	r3, [pc, #96]	; (15438 <usage_fault.constprop.0+0xf0>)
   153d8:	9305      	str	r3, [sp, #20]
   153da:	4811      	ldr	r0, [pc, #68]	; (15420 <usage_fault.constprop.0+0xd8>)
   153dc:	2302      	movs	r3, #2
   153de:	aa04      	add	r2, sp, #16
   153e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   153e4:	9304      	str	r3, [sp, #16]
   153e6:	f00f fb12 	bl	24a0e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   153ea:	4b0e      	ldr	r3, [pc, #56]	; (15424 <usage_fault.constprop.0+0xdc>)
   153ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   153ee:	03db      	lsls	r3, r3, #15
   153f0:	d509      	bpl.n	15406 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   153f2:	4b12      	ldr	r3, [pc, #72]	; (1543c <usage_fault.constprop.0+0xf4>)
   153f4:	9305      	str	r3, [sp, #20]
   153f6:	480a      	ldr	r0, [pc, #40]	; (15420 <usage_fault.constprop.0+0xd8>)
   153f8:	2302      	movs	r3, #2
   153fa:	aa04      	add	r2, sp, #16
   153fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15400:	9304      	str	r3, [sp, #16]
   15402:	f00f fb04 	bl	24a0e <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15406:	4a07      	ldr	r2, [pc, #28]	; (15424 <usage_fault.constprop.0+0xdc>)
   15408:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1540a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1540e:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   15412:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15414:	6293      	str	r3, [r2, #40]	; 0x28
}
   15416:	b006      	add	sp, #24
   15418:	bd10      	pop	{r4, pc}
   1541a:	bf00      	nop
   1541c:	000294ce 	.word	0x000294ce
   15420:	0002804c 	.word	0x0002804c
   15424:	e000ed00 	.word	0xe000ed00
   15428:	000294e6 	.word	0x000294e6
   1542c:	000294f9 	.word	0x000294f9
   15430:	00029513 	.word	0x00029513
   15434:	00029531 	.word	0x00029531
   15438:	00029556 	.word	0x00029556
   1543c:	00029570 	.word	0x00029570

00015440 <mem_manage_fault>:
{
   15440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15444:	b086      	sub	sp, #24
   15446:	4680      	mov	r8, r0
   15448:	af00      	add	r7, sp, #0
   1544a:	460c      	mov	r4, r1
   1544c:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1544e:	4b4f      	ldr	r3, [pc, #316]	; (1558c <mem_manage_fault+0x14c>)
   15450:	617b      	str	r3, [r7, #20]
   15452:	2602      	movs	r6, #2
   15454:	484e      	ldr	r0, [pc, #312]	; (15590 <mem_manage_fault+0x150>)
   15456:	613e      	str	r6, [r7, #16]
   15458:	f107 0210 	add.w	r2, r7, #16
   1545c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15460:	f00f fad5 	bl	24a0e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15464:	4b4b      	ldr	r3, [pc, #300]	; (15594 <mem_manage_fault+0x154>)
   15466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15468:	06db      	lsls	r3, r3, #27
   1546a:	d509      	bpl.n	15480 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1546c:	4b4a      	ldr	r3, [pc, #296]	; (15598 <mem_manage_fault+0x158>)
   1546e:	4848      	ldr	r0, [pc, #288]	; (15590 <mem_manage_fault+0x150>)
   15470:	e9c7 6304 	strd	r6, r3, [r7, #16]
   15474:	f107 0210 	add.w	r2, r7, #16
   15478:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1547c:	f00f fac7 	bl	24a0e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   15480:	4b44      	ldr	r3, [pc, #272]	; (15594 <mem_manage_fault+0x154>)
   15482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15484:	0718      	lsls	r0, r3, #28
   15486:	d50a      	bpl.n	1549e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
   15488:	4b44      	ldr	r3, [pc, #272]	; (1559c <mem_manage_fault+0x15c>)
   1548a:	617b      	str	r3, [r7, #20]
   1548c:	2302      	movs	r3, #2
   1548e:	4840      	ldr	r0, [pc, #256]	; (15590 <mem_manage_fault+0x150>)
   15490:	613b      	str	r3, [r7, #16]
   15492:	f107 0210 	add.w	r2, r7, #16
   15496:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1549a:	f00f fab8 	bl	24a0e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1549e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 15594 <mem_manage_fault+0x154>
   154a2:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   154a6:	0799      	lsls	r1, r3, #30
   154a8:	d439      	bmi.n	1551e <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
   154aa:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   154ae:	4b39      	ldr	r3, [pc, #228]	; (15594 <mem_manage_fault+0x154>)
   154b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   154b2:	07db      	lsls	r3, r3, #31
   154b4:	d50a      	bpl.n	154cc <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
   154b6:	4b3a      	ldr	r3, [pc, #232]	; (155a0 <mem_manage_fault+0x160>)
   154b8:	617b      	str	r3, [r7, #20]
   154ba:	2302      	movs	r3, #2
   154bc:	4834      	ldr	r0, [pc, #208]	; (15590 <mem_manage_fault+0x150>)
   154be:	613b      	str	r3, [r7, #16]
   154c0:	f107 0210 	add.w	r2, r7, #16
   154c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154c8:	f00f faa1 	bl	24a0e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   154cc:	4b31      	ldr	r3, [pc, #196]	; (15594 <mem_manage_fault+0x154>)
   154ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   154d0:	069c      	lsls	r4, r3, #26
   154d2:	d50a      	bpl.n	154ea <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
   154d4:	4b33      	ldr	r3, [pc, #204]	; (155a4 <mem_manage_fault+0x164>)
   154d6:	617b      	str	r3, [r7, #20]
   154d8:	2302      	movs	r3, #2
   154da:	482d      	ldr	r0, [pc, #180]	; (15590 <mem_manage_fault+0x150>)
   154dc:	613b      	str	r3, [r7, #16]
   154de:	f107 0210 	add.w	r2, r7, #16
   154e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154e6:	f00f fa92 	bl	24a0e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   154ea:	4c2a      	ldr	r4, [pc, #168]	; (15594 <mem_manage_fault+0x154>)
   154ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   154ee:	06d8      	lsls	r0, r3, #27
   154f0:	d43e      	bmi.n	15570 <mem_manage_fault+0x130>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   154f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   154f4:	0799      	lsls	r1, r3, #30
   154f6:	d43b      	bmi.n	15570 <mem_manage_fault+0x130>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   154f8:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   154fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   154fc:	4a25      	ldr	r2, [pc, #148]	; (15594 <mem_manage_fault+0x154>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   154fe:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   15500:	bf42      	ittt	mi
   15502:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
   15504:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
   15508:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1550a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1550c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   15510:	6293      	str	r3, [r2, #40]	; 0x28
}
   15512:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   15514:	2300      	movs	r3, #0
   15516:	702b      	strb	r3, [r5, #0]
}
   15518:	46bd      	mov	sp, r7
   1551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   1551e:	46e9      	mov	r9, sp
   15520:	4b21      	ldr	r3, [pc, #132]	; (155a8 <mem_manage_fault+0x168>)
   15522:	617b      	str	r3, [r7, #20]
   15524:	2302      	movs	r3, #2
   15526:	613b      	str	r3, [r7, #16]
   15528:	f107 0210 	add.w	r2, r7, #16
   1552c:	4818      	ldr	r0, [pc, #96]	; (15590 <mem_manage_fault+0x150>)
   1552e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15532:	f00f fa6c 	bl	24a0e <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   15536:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1553a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   1553e:	061a      	lsls	r2, r3, #24
   15540:	d5b3      	bpl.n	154aa <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15542:	b088      	sub	sp, #32
   15544:	466a      	mov	r2, sp
   15546:	4b19      	ldr	r3, [pc, #100]	; (155ac <mem_manage_fault+0x16c>)
   15548:	4811      	ldr	r0, [pc, #68]	; (15590 <mem_manage_fault+0x150>)
   1554a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1554e:	2303      	movs	r3, #3
   15550:	f842 3f10 	str.w	r3, [r2, #16]!
   15554:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15558:	f00f fa59 	bl	24a0e <z_log_msg_static_create.constprop.0>
   1555c:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   1555e:	2c00      	cmp	r4, #0
   15560:	d0a5      	beq.n	154ae <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15562:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   15566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1556a:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
   1556e:	e79e      	b.n	154ae <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   15570:	6863      	ldr	r3, [r4, #4]
   15572:	051a      	lsls	r2, r3, #20
   15574:	d5c0      	bpl.n	154f8 <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   15576:	4641      	mov	r1, r8
   15578:	4630      	mov	r0, r6
   1557a:	f7ff fddf 	bl	1513c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1557e:	2800      	cmp	r0, #0
   15580:	d0ba      	beq.n	154f8 <mem_manage_fault+0xb8>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   15582:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   15586:	2002      	movs	r0, #2
   15588:	e7b7      	b.n	154fa <mem_manage_fault+0xba>
   1558a:	bf00      	nop
   1558c:	0002959b 	.word	0x0002959b
   15590:	0002804c 	.word	0x0002804c
   15594:	e000ed00 	.word	0xe000ed00
   15598:	000295b1 	.word	0x000295b1
   1559c:	0002942b 	.word	0x0002942b
   155a0:	00029612 	.word	0x00029612
   155a4:	0002949f 	.word	0x0002949f
   155a8:	000295e4 	.word	0x000295e4
   155ac:	000295fc 	.word	0x000295fc

000155b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   155b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   155b4:	4b77      	ldr	r3, [pc, #476]	; (15794 <z_arm_fault+0x1e4>)
{
   155b6:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   155b8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   155bc:	af00      	add	r7, sp, #0
   155be:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   155c0:	f3c8 0408 	ubfx	r4, r8, #0, #9
   155c4:	2600      	movs	r6, #0
   155c6:	f386 8811 	msr	BASEPRI, r6
   155ca:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   155ce:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   155d2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   155d6:	d10e      	bne.n	155f6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   155d8:	f002 030c 	and.w	r3, r2, #12
   155dc:	2b08      	cmp	r3, #8
   155de:	d119      	bne.n	15614 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   155e0:	4b6d      	ldr	r3, [pc, #436]	; (15798 <z_arm_fault+0x1e8>)
   155e2:	61fb      	str	r3, [r7, #28]
   155e4:	2302      	movs	r3, #2
   155e6:	486d      	ldr	r0, [pc, #436]	; (1579c <z_arm_fault+0x1ec>)
   155e8:	61bb      	str	r3, [r7, #24]
   155ea:	f107 0218 	add.w	r2, r7, #24
   155ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   155f2:	f00f fa0c 	bl	24a0e <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
   155f6:	2600      	movs	r6, #0
		return NULL;
   155f8:	4635      	mov	r5, r6
	*recoverable = false;
   155fa:	2300      	movs	r3, #0
   155fc:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   155fe:	1ee3      	subs	r3, r4, #3
   15600:	2b09      	cmp	r3, #9
   15602:	f200 80a6 	bhi.w	15752 <z_arm_fault+0x1a2>
   15606:	e8df f003 	tbb	[pc, r3]
   1560a:	990a      	.short	0x990a
   1560c:	a4a4959c 	.word	0xa4a4959c
   15610:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15614:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   15616:	bf4c      	ite	mi
   15618:	460d      	movmi	r5, r1
			*nested_exc = true;
   1561a:	2601      	movpl	r6, #1
   1561c:	e7ed      	b.n	155fa <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   1561e:	46e9      	mov	r9, sp
   15620:	4b5f      	ldr	r3, [pc, #380]	; (157a0 <z_arm_fault+0x1f0>)
   15622:	61fb      	str	r3, [r7, #28]
   15624:	f04f 0802 	mov.w	r8, #2
   15628:	f107 0218 	add.w	r2, r7, #24
   1562c:	485b      	ldr	r0, [pc, #364]	; (1579c <z_arm_fault+0x1ec>)
   1562e:	f8c7 8018 	str.w	r8, [r7, #24]
   15632:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15636:	f00f f9ea 	bl	24a0e <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1563a:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1563c:	4c55      	ldr	r4, [pc, #340]	; (15794 <z_arm_fault+0x1e4>)
	*recoverable = false;
   1563e:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15642:	079a      	lsls	r2, r3, #30
   15644:	d50b      	bpl.n	1565e <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
   15646:	4b57      	ldr	r3, [pc, #348]	; (157a4 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
   15648:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   1564c:	4853      	ldr	r0, [pc, #332]	; (1579c <z_arm_fault+0x1ec>)
   1564e:	f107 0218 	add.w	r2, r7, #24
   15652:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15656:	f00f f9da 	bl	24a0e <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1565a:	2400      	movs	r4, #0
   1565c:	e041      	b.n	156e2 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1565e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15660:	2b00      	cmp	r3, #0
   15662:	da01      	bge.n	15668 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
   15664:	4b50      	ldr	r3, [pc, #320]	; (157a8 <z_arm_fault+0x1f8>)
   15666:	e7ef      	b.n	15648 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1566a:	005b      	lsls	r3, r3, #1
   1566c:	d5f5      	bpl.n	1565a <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   1566e:	4b4f      	ldr	r3, [pc, #316]	; (157ac <z_arm_fault+0x1fc>)
   15670:	484a      	ldr	r0, [pc, #296]	; (1579c <z_arm_fault+0x1ec>)
   15672:	e9c7 8306 	strd	r8, r3, [r7, #24]
   15676:	f107 0218 	add.w	r2, r7, #24
   1567a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1567e:	f00f f9c6 	bl	24a0e <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15682:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   15684:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1568a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1568c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15690:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15694:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   15696:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1569a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1569e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   156a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   156a4:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   156a8:	f64d 7302 	movw	r3, #57090	; 0xdf02
   156ac:	429a      	cmp	r2, r3
   156ae:	d008      	beq.n	156c2 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   156b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   156b2:	b2db      	uxtb	r3, r3
   156b4:	b38b      	cbz	r3, 1571a <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   156b6:	1dfa      	adds	r2, r7, #7
   156b8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   156ba:	4628      	mov	r0, r5
   156bc:	f7ff fec0 	bl	15440 <mem_manage_fault>
   156c0:	e03a      	b.n	15738 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   156c2:	b088      	sub	sp, #32
   156c4:	682b      	ldr	r3, [r5, #0]
   156c6:	466a      	mov	r2, sp
   156c8:	4939      	ldr	r1, [pc, #228]	; (157b0 <z_arm_fault+0x200>)
   156ca:	4834      	ldr	r0, [pc, #208]	; (1579c <z_arm_fault+0x1ec>)
   156cc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   156d0:	2303      	movs	r3, #3
   156d2:	f842 3f10 	str.w	r3, [r2, #16]!
   156d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   156da:	f00f f998 	bl	24a0e <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   156de:	682c      	ldr	r4, [r5, #0]
   156e0:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   156e2:	79fb      	ldrb	r3, [r7, #7]
   156e4:	b9ab      	cbnz	r3, 15712 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   156e6:	2268      	movs	r2, #104	; 0x68
   156e8:	4629      	mov	r1, r5
   156ea:	f107 0008 	add.w	r0, r7, #8
   156ee:	f011 fe65 	bl	273bc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   156f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   156f4:	2e00      	cmp	r6, #0
   156f6:	d047      	beq.n	15788 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   156f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   156fc:	b922      	cbnz	r2, 15708 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   156fe:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15702:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15706:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   15708:	f107 0108 	add.w	r1, r7, #8
   1570c:	4620      	mov	r0, r4
   1570e:	f7ff fb01 	bl	14d14 <z_arm_fatal_error>
}
   15712:	3774      	adds	r7, #116	; 0x74
   15714:	46bd      	mov	sp, r7
   15716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1571a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1571c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   15720:	d004      	beq.n	1572c <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
   15722:	1df9      	adds	r1, r7, #7
   15724:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   15726:	f7ff fd77 	bl	15218 <bus_fault.constprop.0>
   1572a:	e005      	b.n	15738 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1572c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1572e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15732:	d392      	bcc.n	1565a <z_arm_fault+0xaa>
			reason = usage_fault(esf);
   15734:	f7ff fe08 	bl	15348 <usage_fault.constprop.0>
   15738:	4604      	mov	r4, r0
   1573a:	e7d2      	b.n	156e2 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   1573c:	1dfa      	adds	r2, r7, #7
   1573e:	2100      	movs	r1, #0
   15740:	e7bb      	b.n	156ba <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   15742:	1df9      	adds	r1, r7, #7
   15744:	2000      	movs	r0, #0
   15746:	e7ee      	b.n	15726 <z_arm_fault+0x176>
	PR_FAULT_INFO(
   15748:	4b1a      	ldr	r3, [pc, #104]	; (157b4 <z_arm_fault+0x204>)
   1574a:	61fb      	str	r3, [r7, #28]
   1574c:	2302      	movs	r3, #2
   1574e:	61bb      	str	r3, [r7, #24]
   15750:	e77c      	b.n	1564c <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   15752:	4a19      	ldr	r2, [pc, #100]	; (157b8 <z_arm_fault+0x208>)
   15754:	4b19      	ldr	r3, [pc, #100]	; (157bc <z_arm_fault+0x20c>)
   15756:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1575a:	46e8      	mov	r8, sp
   1575c:	b08a      	sub	sp, #40	; 0x28
   1575e:	bf18      	it	ne
   15760:	4613      	movne	r3, r2
   15762:	466a      	mov	r2, sp
   15764:	4916      	ldr	r1, [pc, #88]	; (157c0 <z_arm_fault+0x210>)
   15766:	480d      	ldr	r0, [pc, #52]	; (1579c <z_arm_fault+0x1ec>)
   15768:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1576c:	f44f 7300 	mov.w	r3, #512	; 0x200
   15770:	8413      	strh	r3, [r2, #32]
   15772:	3c10      	subs	r4, #16
   15774:	4b13      	ldr	r3, [pc, #76]	; (157c4 <z_arm_fault+0x214>)
   15776:	61d4      	str	r4, [r2, #28]
   15778:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1577c:	f842 3f10 	str.w	r3, [r2, #16]!
   15780:	f00f f945 	bl	24a0e <z_log_msg_static_create.constprop.0>
   15784:	46c5      	mov	sp, r8
}
   15786:	e768      	b.n	1565a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15788:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1578c:	f023 0301 	bic.w	r3, r3, #1
   15790:	e7b9      	b.n	15706 <z_arm_fault+0x156>
   15792:	bf00      	nop
   15794:	e000ed00 	.word	0xe000ed00
   15798:	0002965f 	.word	0x0002965f
   1579c:	0002804c 	.word	0x0002804c
   157a0:	0002968a 	.word	0x0002968a
   157a4:	000296a1 	.word	0x000296a1
   157a8:	000296c2 	.word	0x000296c2
   157ac:	000296d0 	.word	0x000296d0
   157b0:	000296ef 	.word	0x000296ef
   157b4:	0002970b 	.word	0x0002970b
   157b8:	00029646 	.word	0x00029646
   157bc:	00029631 	.word	0x00029631
   157c0:	0002972f 	.word	0x0002972f
   157c4:	01000004 	.word	0x01000004

000157c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   157c8:	4a02      	ldr	r2, [pc, #8]	; (157d4 <z_arm_fault_init+0xc>)
   157ca:	6953      	ldr	r3, [r2, #20]
   157cc:	f043 0310 	orr.w	r3, r3, #16
   157d0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   157d2:	4770      	bx	lr
   157d4:	e000ed00 	.word	0xe000ed00

000157d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   157d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   157dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   157e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   157e2:	4672      	mov	r2, lr
	bl z_arm_fault
   157e4:	f7ff fee4 	bl	155b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   157e8:	bd01      	pop	{r0, pc}
   157ea:	bf00      	nop

000157ec <z_arm_interrupt_init>:
   157ec:	4804      	ldr	r0, [pc, #16]	; (15800 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   157ee:	2300      	movs	r3, #0
   157f0:	2140      	movs	r1, #64	; 0x40
   157f2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   157f4:	3301      	adds	r3, #1
   157f6:	2b30      	cmp	r3, #48	; 0x30
   157f8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   157fc:	d1f9      	bne.n	157f2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   157fe:	4770      	bx	lr
   15800:	e000e100 	.word	0xe000e100

00015804 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15804:	2000      	movs	r0, #0
    msr CONTROL, r0
   15806:	f380 8814 	msr	CONTROL, r0
    isb
   1580a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1580e:	f7fe f973 	bl	13af8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15812:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15814:	490d      	ldr	r1, [pc, #52]	; (1584c <__start+0x48>)
    str r0, [r1]
   15816:	6008      	str	r0, [r1, #0]
    dsb
   15818:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1581c:	480c      	ldr	r0, [pc, #48]	; (15850 <__start+0x4c>)
    msr msp, r0
   1581e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15822:	f000 f82b 	bl	1587c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15826:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15828:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1582c:	4809      	ldr	r0, [pc, #36]	; (15854 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1582e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15832:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15834:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15838:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1583c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1583e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15840:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15844:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15848:	f7ff fb70 	bl	14f2c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1584c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15850:	20007d80 	.word	0x20007d80
    ldr r0, =z_interrupt_stacks
   15854:	20006b80 	.word	0x20006b80

00015858 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15858:	4907      	ldr	r1, [pc, #28]	; (15878 <z_arm_clear_arm_mpu_config+0x20>)
   1585a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1585e:	2300      	movs	r3, #0
	int num_regions =
   15860:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   15864:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   15866:	4293      	cmp	r3, r2
   15868:	db00      	blt.n	1586c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1586a:	4770      	bx	lr
  MPU->RNR = rnr;
   1586c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   15870:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   15874:	3301      	adds	r3, #1
   15876:	e7f6      	b.n	15866 <z_arm_clear_arm_mpu_config+0xe>
   15878:	e000ed00 	.word	0xe000ed00

0001587c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1587c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1587e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15880:	2300      	movs	r3, #0
   15882:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15886:	f7ff ffe7 	bl	15858 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1588a:	4b14      	ldr	r3, [pc, #80]	; (158dc <z_arm_init_arch_hw_at_boot+0x60>)
   1588c:	f04f 32ff 	mov.w	r2, #4294967295
   15890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   15894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   15898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1589c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   158a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   158a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   158a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   158ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   158b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   158b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   158b8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   158bc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   158c0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   158c4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   158c8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   158cc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   158d0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   158d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   158d6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   158da:	bd08      	pop	{r3, pc}
   158dc:	e000e100 	.word	0xe000e100

000158e0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   158e0:	4b08      	ldr	r3, [pc, #32]	; (15904 <z_impl_k_thread_abort+0x24>)
   158e2:	689b      	ldr	r3, [r3, #8]
   158e4:	4283      	cmp	r3, r0
   158e6:	d10b      	bne.n	15900 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   158e8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   158ec:	b143      	cbz	r3, 15900 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   158ee:	4b06      	ldr	r3, [pc, #24]	; (15908 <z_impl_k_thread_abort+0x28>)
   158f0:	685a      	ldr	r2, [r3, #4]
   158f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   158f6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   158f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   158fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   158fe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15900:	f009 b932 	b.w	1eb68 <z_thread_abort>
   15904:	20003968 	.word	0x20003968
   15908:	e000ed00 	.word	0xe000ed00

0001590c <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1590c:	4b02      	ldr	r3, [pc, #8]	; (15918 <z_arm_configure_static_mpu_regions+0xc>)
   1590e:	4a03      	ldr	r2, [pc, #12]	; (1591c <z_arm_configure_static_mpu_regions+0x10>)
   15910:	4803      	ldr	r0, [pc, #12]	; (15920 <z_arm_configure_static_mpu_regions+0x14>)
   15912:	2101      	movs	r1, #1
   15914:	f000 b898 	b.w	15a48 <arm_core_mpu_configure_static_mpu_regions>
   15918:	20040000 	.word	0x20040000
   1591c:	20000000 	.word	0x20000000
   15920:	00028470 	.word	0x00028470

00015924 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   15924:	b510      	push	{r4, lr}
   15926:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   15928:	f7ff fbd0 	bl	150cc <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1592c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   1592e:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15930:	4805      	ldr	r0, [pc, #20]	; (15948 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
   15932:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
   15934:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15938:	4b04      	ldr	r3, [pc, #16]	; (1594c <z_arm_configure_dynamic_mpu_regions+0x28>)
   1593a:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   1593c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15940:	2101      	movs	r1, #1
   15942:	f000 b88b 	b.w	15a5c <arm_core_mpu_configure_dynamic_mpu_regions>
   15946:	bf00      	nop
   15948:	200035a4 	.word	0x200035a4
   1594c:	150b0000 	.word	0x150b0000

00015950 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15954:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 15a18 <mpu_configure_regions+0xc8>
   15958:	469c      	mov	ip, r3
   1595a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   1595c:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   1595e:	2300      	movs	r3, #0
   15960:	428b      	cmp	r3, r1
   15962:	da1a      	bge.n	1599a <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   15964:	6844      	ldr	r4, [r0, #4]
   15966:	2c00      	cmp	r4, #0
   15968:	d04d      	beq.n	15a06 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1596a:	f1bc 0f00 	cmp.w	ip, #0
   1596e:	d01d      	beq.n	159ac <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15970:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15972:	4234      	tst	r4, r6
   15974:	d015      	beq.n	159a2 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15976:	466c      	mov	r4, sp
   15978:	b088      	sub	sp, #32
   1597a:	466a      	mov	r2, sp
   1597c:	4923      	ldr	r1, [pc, #140]	; (15a0c <mpu_configure_regions+0xbc>)
   1597e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15982:	2303      	movs	r3, #3
   15984:	f842 3f10 	str.w	r3, [r2, #16]!
   15988:	4821      	ldr	r0, [pc, #132]	; (15a10 <mpu_configure_regions+0xc0>)
   1598a:	2300      	movs	r3, #0
   1598c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15990:	f7fe fb46 	bl	14020 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   15994:	f06f 0515 	mvn.w	r5, #21
   15998:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1599a:	4628      	mov	r0, r5
   1599c:	46bd      	mov	sp, r7
   1599e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   159a2:	2c1f      	cmp	r4, #31
   159a4:	d9e7      	bls.n	15976 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   159a6:	6802      	ldr	r2, [r0, #0]
		&&
   159a8:	4216      	tst	r6, r2
   159aa:	d1e4      	bne.n	15976 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   159ac:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   159ae:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   159b0:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   159b2:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   159b6:	d914      	bls.n	159e2 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   159b8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   159bc:	d813      	bhi.n	159e6 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   159be:	3c01      	subs	r4, #1
   159c0:	fab4 f484 	clz	r4, r4
   159c4:	f1c4 041f 	rsb	r4, r4, #31
   159c8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   159ca:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   159ce:	ea46 0604 	orr.w	r6, r6, r4
   159d2:	d90a      	bls.n	159ea <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   159d4:	466c      	mov	r4, sp
   159d6:	b088      	sub	sp, #32
   159d8:	466a      	mov	r2, sp
   159da:	4b0e      	ldr	r3, [pc, #56]	; (15a14 <mpu_configure_regions+0xc4>)
   159dc:	e9c2 3505 	strd	r3, r5, [r2, #20]
   159e0:	e7cf      	b.n	15982 <mpu_configure_regions+0x32>
		return REGION_32B;
   159e2:	2408      	movs	r4, #8
   159e4:	e7f1      	b.n	159ca <mpu_configure_regions+0x7a>
		return REGION_4G;
   159e6:	243e      	movs	r4, #62	; 0x3e
   159e8:	e7ef      	b.n	159ca <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   159ea:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   159ee:	432a      	orrs	r2, r5
   159f0:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   159f4:	f046 0601 	orr.w	r6, r6, #1
   159f8:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   159fc:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   15a00:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15a02:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   15a06:	3301      	adds	r3, #1
   15a08:	300c      	adds	r0, #12
   15a0a:	e7a9      	b.n	15960 <mpu_configure_regions+0x10>
   15a0c:	00029746 	.word	0x00029746
   15a10:	0002803c 	.word	0x0002803c
   15a14:	00029769 	.word	0x00029769
   15a18:	e000ed00 	.word	0xe000ed00

00015a1c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15a1c:	4b04      	ldr	r3, [pc, #16]	; (15a30 <arm_core_mpu_enable+0x14>)
   15a1e:	2205      	movs	r2, #5
   15a20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15a24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15a28:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15a2c:	4770      	bx	lr
   15a2e:	bf00      	nop
   15a30:	e000ed00 	.word	0xe000ed00

00015a34 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15a34:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15a38:	4b02      	ldr	r3, [pc, #8]	; (15a44 <arm_core_mpu_disable+0x10>)
   15a3a:	2200      	movs	r2, #0
   15a3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15a40:	4770      	bx	lr
   15a42:	bf00      	nop
   15a44:	e000ed00 	.word	0xe000ed00

00015a48 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15a48:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15a4a:	4c03      	ldr	r4, [pc, #12]	; (15a58 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15a4c:	2301      	movs	r3, #1
   15a4e:	7822      	ldrb	r2, [r4, #0]
   15a50:	f7ff ff7e 	bl	15950 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15a54:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   15a56:	bd10      	pop	{r4, pc}
   15a58:	200044ad 	.word	0x200044ad

00015a5c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   15a5c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15a5e:	4a09      	ldr	r2, [pc, #36]	; (15a84 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   15a60:	2300      	movs	r3, #0
   15a62:	7812      	ldrb	r2, [r2, #0]
   15a64:	f7ff ff74 	bl	15950 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15a68:	f110 0f16 	cmn.w	r0, #22
   15a6c:	d003      	beq.n	15a76 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   15a6e:	4b06      	ldr	r3, [pc, #24]	; (15a88 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   15a70:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15a72:	2807      	cmp	r0, #7
   15a74:	dd00      	ble.n	15a78 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15a76:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   15a78:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   15a7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   15a80:	3001      	adds	r0, #1
   15a82:	e7f6      	b.n	15a72 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   15a84:	200044ad 	.word	0x200044ad
   15a88:	e000ed00 	.word	0xe000ed00

00015a8c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15a8c:	4914      	ldr	r1, [pc, #80]	; (15ae0 <z_arm_mpu_init+0x54>)
   15a8e:	6808      	ldr	r0, [r1, #0]
   15a90:	2808      	cmp	r0, #8
{
   15a92:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15a94:	d821      	bhi.n	15ada <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15a96:	f7ff ffcd 	bl	15a34 <arm_core_mpu_disable>
   15a9a:	4c12      	ldr	r4, [pc, #72]	; (15ae4 <z_arm_mpu_init+0x58>)
   15a9c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15a9e:	2200      	movs	r2, #0
   15aa0:	4290      	cmp	r0, r2
   15aa2:	f101 010c 	add.w	r1, r1, #12
   15aa6:	d105      	bne.n	15ab4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   15aa8:	4b0f      	ldr	r3, [pc, #60]	; (15ae8 <z_arm_mpu_init+0x5c>)
   15aaa:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   15aac:	f7ff ffb6 	bl	15a1c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   15ab0:	2000      	movs	r0, #0
}
   15ab2:	bd10      	pop	{r4, pc}
   15ab4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15ab8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   15abc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15ac0:	4313      	orrs	r3, r2
   15ac2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15ac6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15ace:	f043 0301 	orr.w	r3, r3, #1
   15ad2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15ad6:	3201      	adds	r2, #1
   15ad8:	e7e2      	b.n	15aa0 <z_arm_mpu_init+0x14>
		return -1;
   15ada:	f04f 30ff 	mov.w	r0, #4294967295
   15ade:	e7e8      	b.n	15ab2 <z_arm_mpu_init+0x26>
   15ae0:	0002847c 	.word	0x0002847c
   15ae4:	e000ed00 	.word	0xe000ed00
   15ae8:	200044ad 	.word	0x200044ad

00015aec <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   15aec:	4b01      	ldr	r3, [pc, #4]	; (15af4 <__stdout_hook_install+0x8>)
   15aee:	6018      	str	r0, [r3, #0]
}
   15af0:	4770      	bx	lr
   15af2:	bf00      	nop
   15af4:	200005a0 	.word	0x200005a0

00015af8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   15af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
   15afa:	4f08      	ldr	r7, [pc, #32]	; (15b1c <z_impl_zephyr_read_stdin+0x24>)
{
   15afc:	4606      	mov	r6, r0
   15afe:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
   15b00:	2400      	movs	r4, #0
   15b02:	42ac      	cmp	r4, r5
   15b04:	da08      	bge.n	15b18 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   15b06:	683b      	ldr	r3, [r7, #0]
   15b08:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   15b0a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   15b0c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   15b0e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   15b12:	d001      	beq.n	15b18 <z_impl_zephyr_read_stdin+0x20>
   15b14:	280d      	cmp	r0, #13
   15b16:	d1f4      	bne.n	15b02 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   15b18:	4620      	mov	r0, r4
   15b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b1c:	2000059c 	.word	0x2000059c

00015b20 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   15b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b22:	4f0a      	ldr	r7, [pc, #40]	; (15b4c <z_impl_zephyr_write_stdout+0x2c>)
   15b24:	460d      	mov	r5, r1
   15b26:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   15b28:	f1c0 0401 	rsb	r4, r0, #1
   15b2c:	19a3      	adds	r3, r4, r6
   15b2e:	429d      	cmp	r5, r3
   15b30:	dc01      	bgt.n	15b36 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   15b32:	4628      	mov	r0, r5
   15b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   15b36:	7873      	ldrb	r3, [r6, #1]
   15b38:	2b0a      	cmp	r3, #10
   15b3a:	d102      	bne.n	15b42 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   15b3c:	683b      	ldr	r3, [r7, #0]
   15b3e:	200d      	movs	r0, #13
   15b40:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   15b42:	683b      	ldr	r3, [r7, #0]
   15b44:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   15b48:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   15b4a:	e7ef      	b.n	15b2c <z_impl_zephyr_write_stdout+0xc>
   15b4c:	200005a0 	.word	0x200005a0

00015b50 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   15b50:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15b52:	4802      	ldr	r0, [pc, #8]	; (15b5c <_exit+0xc>)
   15b54:	2105      	movs	r1, #5
   15b56:	f7ff ffe3 	bl	15b20 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   15b5a:	e7fe      	b.n	15b5a <_exit+0xa>
   15b5c:	0002978f 	.word	0x0002978f

00015b60 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   15b60:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   15b62:	4c07      	ldr	r4, [pc, #28]	; (15b80 <_sbrk+0x20>)
   15b64:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   15b66:	18c2      	adds	r2, r0, r3
   15b68:	4806      	ldr	r0, [pc, #24]	; (15b84 <_sbrk+0x24>)
   15b6a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   15b6e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   15b72:	428a      	cmp	r2, r1
		heap_sz += count;
   15b74:	bf3a      	itte	cc
   15b76:	6022      	strcc	r2, [r4, #0]
	ptr = ((char *)HEAP_BASE) + heap_sz;
   15b78:	18c0      	addcc	r0, r0, r3

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   15b7a:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
   15b7e:	bd10      	pop	{r4, pc}
   15b80:	200035b0 	.word	0x200035b0
   15b84:	20008e90 	.word	0x20008e90

00015b88 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   15b88:	b510      	push	{r4, lr}
	__asm__ volatile(
   15b8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15b8e:	f3ef 8011 	mrs	r0, BASEPRI
   15b92:	f383 8812 	msr	BASEPRI_MAX, r3
   15b96:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15b9a:	4a11      	ldr	r2, [pc, #68]	; (15be0 <nordicsemi_nrf52_init+0x58>)
   15b9c:	2301      	movs	r3, #1
   15b9e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   15ba6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   15baa:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   15bae:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   15bb2:	2c08      	cmp	r4, #8
   15bb4:	d108      	bne.n	15bc8 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   15bb6:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   15bba:	2905      	cmp	r1, #5
   15bbc:	d804      	bhi.n	15bc8 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   15bbe:	4c09      	ldr	r4, [pc, #36]	; (15be4 <nordicsemi_nrf52_init+0x5c>)
   15bc0:	5c61      	ldrb	r1, [r4, r1]
   15bc2:	b109      	cbz	r1, 15bc8 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   15bc4:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   15bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15bcc:	2201      	movs	r2, #1
   15bce:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   15bd2:	f380 8811 	msr	BASEPRI, r0
   15bd6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15bda:	2000      	movs	r0, #0
   15bdc:	bd10      	pop	{r4, pc}
   15bde:	bf00      	nop
   15be0:	4001e000 	.word	0x4001e000
   15be4:	000297a4 	.word	0x000297a4

00015be8 <sys_arch_reboot>:
    *p_gpregret = val;
   15be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15bec:	b2c0      	uxtb	r0, r0
   15bee:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   15bf2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15bf6:	4905      	ldr	r1, [pc, #20]	; (15c0c <sys_arch_reboot+0x24>)
   15bf8:	4b05      	ldr	r3, [pc, #20]	; (15c10 <sys_arch_reboot+0x28>)
   15bfa:	68ca      	ldr	r2, [r1, #12]
   15bfc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15c00:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15c02:	60cb      	str	r3, [r1, #12]
   15c04:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15c08:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15c0a:	e7fd      	b.n	15c08 <sys_arch_reboot+0x20>
   15c0c:	e000ed00 	.word	0xe000ed00
   15c10:	05fa0004 	.word	0x05fa0004

00015c14 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15c14:	b120      	cbz	r0, 15c20 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   15c16:	4b03      	ldr	r3, [pc, #12]	; (15c24 <arch_busy_wait+0x10>)
   15c18:	0180      	lsls	r0, r0, #6
   15c1a:	f043 0301 	orr.w	r3, r3, #1
   15c1e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15c20:	4770      	bx	lr
   15c22:	bf00      	nop
   15c24:	00028140 	.word	0x00028140

00015c28 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15c28:	4b0e      	ldr	r3, [pc, #56]	; (15c64 <bt_hex+0x3c>)
   15c2a:	2940      	cmp	r1, #64	; 0x40
{
   15c2c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   15c2e:	bf28      	it	cs
   15c30:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   15c32:	4c0d      	ldr	r4, [pc, #52]	; (15c68 <bt_hex+0x40>)
   15c34:	1846      	adds	r6, r0, r1
   15c36:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15c38:	42b0      	cmp	r0, r6
   15c3a:	f103 0302 	add.w	r3, r3, #2
   15c3e:	d104      	bne.n	15c4a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15c40:	2300      	movs	r3, #0
   15c42:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15c46:	4807      	ldr	r0, [pc, #28]	; (15c64 <bt_hex+0x3c>)
   15c48:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   15c4a:	7802      	ldrb	r2, [r0, #0]
   15c4c:	0912      	lsrs	r2, r2, #4
   15c4e:	5ca2      	ldrb	r2, [r4, r2]
   15c50:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15c54:	f810 2b01 	ldrb.w	r2, [r0], #1
   15c58:	f002 020f 	and.w	r2, r2, #15
   15c5c:	5ca2      	ldrb	r2, [r4, r2]
   15c5e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   15c62:	e7e9      	b.n	15c38 <bt_hex+0x10>
   15c64:	200044cc 	.word	0x200044cc
   15c68:	0002980d 	.word	0x0002980d

00015c6c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   15c6c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   15c6e:	7803      	ldrb	r3, [r0, #0]
   15c70:	b08b      	sub	sp, #44	; 0x2c
   15c72:	4604      	mov	r4, r0
   15c74:	ad07      	add	r5, sp, #28
   15c76:	2b03      	cmp	r3, #3
   15c78:	d821      	bhi.n	15cbe <bt_addr_le_str+0x52>
   15c7a:	e8df f003 	tbb	[pc, r3]
   15c7e:	1a02      	.short	0x1a02
   15c80:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   15c82:	4912      	ldr	r1, [pc, #72]	; (15ccc <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   15c84:	4628      	mov	r0, r5
   15c86:	f011 fcbf 	bl	27608 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15c8a:	9505      	str	r5, [sp, #20]
   15c8c:	7863      	ldrb	r3, [r4, #1]
   15c8e:	9304      	str	r3, [sp, #16]
   15c90:	78a3      	ldrb	r3, [r4, #2]
   15c92:	9303      	str	r3, [sp, #12]
   15c94:	78e3      	ldrb	r3, [r4, #3]
   15c96:	9302      	str	r3, [sp, #8]
   15c98:	7923      	ldrb	r3, [r4, #4]
   15c9a:	9301      	str	r3, [sp, #4]
   15c9c:	7963      	ldrb	r3, [r4, #5]
   15c9e:	9300      	str	r3, [sp, #0]
   15ca0:	79a3      	ldrb	r3, [r4, #6]
   15ca2:	4a0b      	ldr	r2, [pc, #44]	; (15cd0 <bt_addr_le_str+0x64>)
   15ca4:	480b      	ldr	r0, [pc, #44]	; (15cd4 <bt_addr_le_str+0x68>)
   15ca6:	211e      	movs	r1, #30
   15ca8:	f00d fe85 	bl	239b6 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15cac:	4809      	ldr	r0, [pc, #36]	; (15cd4 <bt_addr_le_str+0x68>)
   15cae:	b00b      	add	sp, #44	; 0x2c
   15cb0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15cb2:	4909      	ldr	r1, [pc, #36]	; (15cd8 <bt_addr_le_str+0x6c>)
   15cb4:	e7e6      	b.n	15c84 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   15cb6:	4909      	ldr	r1, [pc, #36]	; (15cdc <bt_addr_le_str+0x70>)
   15cb8:	e7e4      	b.n	15c84 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   15cba:	4909      	ldr	r1, [pc, #36]	; (15ce0 <bt_addr_le_str+0x74>)
   15cbc:	e7e2      	b.n	15c84 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   15cbe:	4a09      	ldr	r2, [pc, #36]	; (15ce4 <bt_addr_le_str+0x78>)
   15cc0:	210a      	movs	r1, #10
   15cc2:	4628      	mov	r0, r5
   15cc4:	f00d fe77 	bl	239b6 <snprintk>
		break;
   15cc8:	e7df      	b.n	15c8a <bt_addr_le_str+0x1e>
   15cca:	bf00      	nop
   15ccc:	000297c8 	.word	0x000297c8
   15cd0:	000297ea 	.word	0x000297ea
   15cd4:	200044ae 	.word	0x200044ae
   15cd8:	000297cf 	.word	0x000297cf
   15cdc:	000297d6 	.word	0x000297d6
   15ce0:	000297e0 	.word	0x000297e0
   15ce4:	0002a3f0 	.word	0x0002a3f0

00015ce8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   15ce8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   15cea:	4d0a      	ldr	r5, [pc, #40]	; (15d14 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15cec:	4b0a      	ldr	r3, [pc, #40]	; (15d18 <long_wq_init+0x30>)
{
   15cee:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15cf0:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15cf2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15cf4:	9302      	str	r3, [sp, #8]
   15cf6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15cf8:	f010 ffed 	bl	26cd6 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15cfc:	ab02      	add	r3, sp, #8
   15cfe:	9300      	str	r3, [sp, #0]
   15d00:	4628      	mov	r0, r5
   15d02:	4906      	ldr	r1, [pc, #24]	; (15d1c <long_wq_init+0x34>)
   15d04:	230a      	movs	r3, #10
   15d06:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   15d0a:	f008 fba9 	bl	1e460 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15d0e:	4620      	mov	r0, r4
   15d10:	b005      	add	sp, #20
   15d12:	bd30      	pop	{r4, r5, pc}
   15d14:	20001f98 	.word	0x20001f98
   15d18:	0002981e 	.word	0x0002981e
   15d1c:	20005280 	.word	0x20005280

00015d20 <bt_long_wq_schedule>:
{
   15d20:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15d22:	4801      	ldr	r0, [pc, #4]	; (15d28 <bt_long_wq_schedule+0x8>)
   15d24:	f008 bbd4 	b.w	1e4d0 <k_work_schedule_for_queue>
   15d28:	20001f98 	.word	0x20001f98

00015d2c <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   15d2c:	7803      	ldrb	r3, [r0, #0]
   15d2e:	2b01      	cmp	r3, #1
{
   15d30:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   15d32:	d013      	beq.n	15d5c <uuid_to_uuid128+0x30>
   15d34:	2b02      	cmp	r3, #2
   15d36:	d027      	beq.n	15d88 <uuid_to_uuid128+0x5c>
   15d38:	b97b      	cbnz	r3, 15d5a <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15d3a:	4b19      	ldr	r3, [pc, #100]	; (15da0 <uuid_to_uuid128+0x74>)
   15d3c:	460a      	mov	r2, r1
   15d3e:	f103 0410 	add.w	r4, r3, #16
   15d42:	f853 5b04 	ldr.w	r5, [r3], #4
   15d46:	f842 5b04 	str.w	r5, [r2], #4
   15d4a:	42a3      	cmp	r3, r4
   15d4c:	d1f9      	bne.n	15d42 <uuid_to_uuid128+0x16>
   15d4e:	781b      	ldrb	r3, [r3, #0]
   15d50:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15d52:	8843      	ldrh	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   15d54:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   15d56:	0a1b      	lsrs	r3, r3, #8
   15d58:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15d5a:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   15d5c:	4b10      	ldr	r3, [pc, #64]	; (15da0 <uuid_to_uuid128+0x74>)
   15d5e:	460a      	mov	r2, r1
   15d60:	f103 0410 	add.w	r4, r3, #16
   15d64:	f853 5b04 	ldr.w	r5, [r3], #4
   15d68:	f842 5b04 	str.w	r5, [r2], #4
   15d6c:	42a3      	cmp	r3, r4
   15d6e:	d1f9      	bne.n	15d64 <uuid_to_uuid128+0x38>
   15d70:	781b      	ldrb	r3, [r3, #0]
   15d72:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15d74:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   15d76:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   15d78:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   15d7c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15d7e:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   15d80:	0a1b      	lsrs	r3, r3, #8
   15d82:	738a      	strb	r2, [r1, #14]
   15d84:	740b      	strb	r3, [r1, #16]
}
   15d86:	e7e8      	b.n	15d5a <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15d88:	f100 0310 	add.w	r3, r0, #16
   15d8c:	f850 2b04 	ldr.w	r2, [r0], #4
   15d90:	f841 2b04 	str.w	r2, [r1], #4
   15d94:	4298      	cmp	r0, r3
   15d96:	d1f9      	bne.n	15d8c <uuid_to_uuid128+0x60>
   15d98:	7803      	ldrb	r3, [r0, #0]
   15d9a:	700b      	strb	r3, [r1, #0]
   15d9c:	e7dd      	b.n	15d5a <uuid_to_uuid128+0x2e>
   15d9e:	bf00      	nop
   15da0:	00029827 	.word	0x00029827

00015da4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15da4:	b538      	push	{r3, r4, r5, lr}
   15da6:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   15da8:	4805      	ldr	r0, [pc, #20]	; (15dc0 <bt_buf_get_rx+0x1c>)
   15daa:	f010 f999 	bl	260e0 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15dae:	4604      	mov	r4, r0
   15db0:	b120      	cbz	r0, 15dbc <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   15db2:	2100      	movs	r1, #0
   15db4:	300c      	adds	r0, #12
   15db6:	f010 f99a 	bl	260ee <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15dba:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15dbc:	4620      	mov	r0, r4
   15dbe:	bd38      	pop	{r3, r4, r5, pc}
   15dc0:	20000d34 	.word	0x20000d34

00015dc4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15dc4:	b510      	push	{r4, lr}
   15dc6:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15dc8:	490a      	ldr	r1, [pc, #40]	; (15df4 <bt_buf_get_cmd_complete+0x30>)
{
   15dca:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   15dcc:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
   15dd0:	b920      	cbnz	r0, 15ddc <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15dd6:	2001      	movs	r0, #1
   15dd8:	f7ff bfe4 	b.w	15da4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   15ddc:	f010 f9ba 	bl	26154 <net_buf_ref>
   15de0:	2301      	movs	r3, #1
		buf->len = 0U;
   15de2:	2100      	movs	r1, #0
   15de4:	7603      	strb	r3, [r0, #24]
   15de6:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15de8:	4604      	mov	r4, r0
   15dea:	300c      	adds	r0, #12
   15dec:	f010 f97f 	bl	260ee <net_buf_simple_reserve>
}
   15df0:	4620      	mov	r0, r4
   15df2:	bd10      	pop	{r4, pc}
   15df4:	20000388 	.word	0x20000388

00015df8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15df8:	b570      	push	{r4, r5, r6, lr}
   15dfa:	4604      	mov	r4, r0
	switch (evt) {
   15dfc:	2c0f      	cmp	r4, #15
{
   15dfe:	460d      	mov	r5, r1
   15e00:	4610      	mov	r0, r2
   15e02:	4619      	mov	r1, r3
	switch (evt) {
   15e04:	d805      	bhi.n	15e12 <bt_buf_get_evt+0x1a>
   15e06:	2c0d      	cmp	r4, #13
   15e08:	d90d      	bls.n	15e26 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15e0e:	f7ff bfd9 	b.w	15dc4 <bt_buf_get_cmd_complete>
	switch (evt) {
   15e12:	2c13      	cmp	r4, #19
   15e14:	d107      	bne.n	15e26 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   15e16:	480c      	ldr	r0, [pc, #48]	; (15e48 <bt_buf_get_evt+0x50>)
   15e18:	f010 f962 	bl	260e0 <net_buf_alloc_fixed>
			if (buf) {
   15e1c:	4604      	mov	r4, r0
   15e1e:	b938      	cbnz	r0, 15e30 <bt_buf_get_evt+0x38>
{
   15e20:	2400      	movs	r4, #0
}
   15e22:	4620      	mov	r0, r4
   15e24:	bd70      	pop	{r4, r5, r6, pc}
   15e26:	4602      	mov	r2, r0
   15e28:	460b      	mov	r3, r1
		if (discardable) {
   15e2a:	b145      	cbz	r5, 15e3e <bt_buf_get_evt+0x46>
   15e2c:	4807      	ldr	r0, [pc, #28]	; (15e4c <bt_buf_get_evt+0x54>)
   15e2e:	e7f3      	b.n	15e18 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15e30:	2100      	movs	r1, #0
   15e32:	300c      	adds	r0, #12
   15e34:	f010 f95b 	bl	260ee <net_buf_simple_reserve>
   15e38:	2301      	movs	r3, #1
   15e3a:	7623      	strb	r3, [r4, #24]
}
   15e3c:	e7f1      	b.n	15e22 <bt_buf_get_evt+0x2a>
}
   15e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15e42:	2001      	movs	r0, #1
   15e44:	f7ff bfae 	b.w	15da4 <bt_buf_get_rx>
   15e48:	20000d60 	.word	0x20000d60
   15e4c:	20000cb0 	.word	0x20000cb0

00015e50 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   15e50:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15e52:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15e54:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
   15e58:	781b      	ldrb	r3, [r3, #0]
   15e5a:	b963      	cbnz	r3, 15e76 <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   15e5c:	4620      	mov	r0, r4
   15e5e:	f002 fb53 	bl	18508 <bt_conn_lookup_handle>
	if (!conn) {
   15e62:	4605      	mov	r5, r0
   15e64:	b940      	cbnz	r0, 15e78 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   15e66:	4b08      	ldr	r3, [pc, #32]	; (15e88 <hci_disconn_complete_prio+0x38>)
   15e68:	881a      	ldrh	r2, [r3, #0]
   15e6a:	b922      	cbnz	r2, 15e76 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15e6c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15e70:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15e74:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   15e76:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15e78:	2101      	movs	r1, #1
   15e7a:	f002 fb4d 	bl	18518 <bt_conn_set_state>
	bt_conn_unref(conn);
   15e7e:	4628      	mov	r0, r5
}
   15e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15e84:	f00f b8c9 	b.w	2501a <bt_conn_unref>
   15e88:	20004484 	.word	0x20004484

00015e8c <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15e8c:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15e8e:	4c08      	ldr	r4, [pc, #32]	; (15eb0 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15e90:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15e92:	2205      	movs	r2, #5
   15e94:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   15e98:	f002 fd4a 	bl	18930 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
   15e9c:	b938      	cbnz	r0, 15eae <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15e9e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   15ea2:	4904      	ldr	r1, [pc, #16]	; (15eb4 <find_pending_connect.part.0+0x28>)

		return conn;
	}

	return NULL;
}
   15ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15ea8:	2204      	movs	r2, #4
   15eaa:	f002 bd41 	b.w	18930 <bt_conn_lookup_state_le>
}
   15eae:	bd10      	pop	{r4, pc}
   15eb0:	20000388 	.word	0x20000388
   15eb4:	000297ae 	.word	0x000297ae

00015eb8 <hci_data_buf_overflow>:
{
   15eb8:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15eba:	68c3      	ldr	r3, [r0, #12]
{
   15ebc:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15ebe:	b088      	sub	sp, #32
   15ec0:	781b      	ldrb	r3, [r3, #0]
   15ec2:	466a      	mov	r2, sp
   15ec4:	4906      	ldr	r1, [pc, #24]	; (15ee0 <hci_data_buf_overflow+0x28>)
   15ec6:	4807      	ldr	r0, [pc, #28]	; (15ee4 <hci_data_buf_overflow+0x2c>)
   15ec8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15ecc:	2303      	movs	r3, #3
   15ece:	f842 3f10 	str.w	r3, [r2, #16]!
   15ed2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15ed6:	f00e fe6d 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   15eda:	46bd      	mov	sp, r7
   15edc:	bd80      	pop	{r7, pc}
   15ede:	bf00      	nop
   15ee0:	00029838 	.word	0x00029838
   15ee4:	00027fac 	.word	0x00027fac

00015ee8 <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   15ee8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		LOG_ERR("Unable to allocate buffer");
   15eea:	4b06      	ldr	r3, [pc, #24]	; (15f04 <le_conn_param_neg_reply.part.0+0x1c>)
   15eec:	9305      	str	r3, [sp, #20]
   15eee:	4806      	ldr	r0, [pc, #24]	; (15f08 <le_conn_param_neg_reply.part.0+0x20>)
   15ef0:	2302      	movs	r3, #2
   15ef2:	aa04      	add	r2, sp, #16
   15ef4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15ef8:	9304      	str	r3, [sp, #16]
   15efa:	f00e fe5b 	bl	24bb4 <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
   15efe:	b007      	add	sp, #28
   15f00:	f85d fb04 	ldr.w	pc, [sp], #4
   15f04:	00029860 	.word	0x00029860
   15f08:	00027fac 	.word	0x00027fac

00015f0c <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   15f0c:	b598      	push	{r3, r4, r7, lr}
   15f0e:	4601      	mov	r1, r0
   15f10:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15f12:	480d      	ldr	r0, [pc, #52]	; (15f48 <rx_queue_put+0x3c>)
   15f14:	f010 f8ef 	bl	260f6 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15f18:	490c      	ldr	r1, [pc, #48]	; (15f4c <rx_queue_put+0x40>)
   15f1a:	480d      	ldr	r0, [pc, #52]	; (15f50 <rx_queue_put+0x44>)
   15f1c:	f010 feca 	bl	26cb4 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   15f20:	2800      	cmp	r0, #0
   15f22:	da0e      	bge.n	15f42 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   15f24:	466c      	mov	r4, sp
   15f26:	b088      	sub	sp, #32
   15f28:	466a      	mov	r2, sp
   15f2a:	4b0a      	ldr	r3, [pc, #40]	; (15f54 <rx_queue_put+0x48>)
   15f2c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15f30:	2303      	movs	r3, #3
   15f32:	f842 3f10 	str.w	r3, [r2, #16]!
   15f36:	4808      	ldr	r0, [pc, #32]	; (15f58 <rx_queue_put+0x4c>)
   15f38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15f3c:	f00e fe3a 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   15f40:	46a5      	mov	sp, r4
	}
}
   15f42:	46bd      	mov	sp, r7
   15f44:	bd98      	pop	{r3, r4, r7, pc}
   15f46:	bf00      	nop
   15f48:	200004bc 	.word	0x200004bc
   15f4c:	200005e0 	.word	0x200005e0
   15f50:	20002148 	.word	0x20002148
   15f54:	0002987a 	.word	0x0002987a
   15f58:	00027fac 	.word	0x00027fac

00015f5c <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15f5c:	b5b0      	push	{r4, r5, r7, lr}
   15f5e:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15f60:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15f62:	af00      	add	r7, sp, #0
   15f64:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15f66:	4629      	mov	r1, r5
   15f68:	68d8      	ldr	r0, [r3, #12]
   15f6a:	f7ff fe5d 	bl	15c28 <bt_hex>
   15f6e:	b08a      	sub	sp, #40	; 0x28
   15f70:	466a      	mov	r2, sp
   15f72:	4b09      	ldr	r3, [pc, #36]	; (15f98 <handle_event.part.0+0x3c>)
   15f74:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15f78:	f240 4302 	movw	r3, #1026	; 0x402
   15f7c:	8493      	strh	r3, [r2, #36]	; 0x24
   15f7e:	4b07      	ldr	r3, [pc, #28]	; (15f9c <handle_event.part.0+0x40>)
   15f80:	e9c2 5007 	strd	r5, r0, [r2, #28]
   15f84:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   15f88:	f842 3f10 	str.w	r3, [r2, #16]!
   15f8c:	4804      	ldr	r0, [pc, #16]	; (15fa0 <handle_event.part.0+0x44>)
   15f8e:	f00e fe11 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   15f92:	46bd      	mov	sp, r7
   15f94:	bdb0      	pop	{r4, r5, r7, pc}
   15f96:	bf00      	nop
   15f98:	00029897 	.word	0x00029897
   15f9c:	01000005 	.word	0x01000005
   15fa0:	00027fac 	.word	0x00027fac

00015fa4 <hci_hardware_error>:
{
   15fa4:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15fa6:	2101      	movs	r1, #1
   15fa8:	af00      	add	r7, sp, #0
   15faa:	300c      	adds	r0, #12
   15fac:	f010 f91f 	bl	261ee <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15fb0:	b088      	sub	sp, #32
   15fb2:	7803      	ldrb	r3, [r0, #0]
   15fb4:	466a      	mov	r2, sp
   15fb6:	4906      	ldr	r1, [pc, #24]	; (15fd0 <hci_hardware_error+0x2c>)
   15fb8:	4806      	ldr	r0, [pc, #24]	; (15fd4 <hci_hardware_error+0x30>)
   15fba:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15fbe:	2303      	movs	r3, #3
   15fc0:	f842 3f10 	str.w	r3, [r2, #16]!
   15fc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15fc8:	f00e fdf4 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   15fcc:	46bd      	mov	sp, r7
   15fce:	bd80      	pop	{r7, pc}
   15fd0:	000298b9 	.word	0x000298b9
   15fd4:	00027fac 	.word	0x00027fac

00015fd8 <le_data_len_change>:
{
   15fd8:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15fda:	68c3      	ldr	r3, [r0, #12]
   15fdc:	881c      	ldrh	r4, [r3, #0]
{
   15fde:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15fe0:	4620      	mov	r0, r4
   15fe2:	f002 fa91 	bl	18508 <bt_conn_lookup_handle>
	if (!conn) {
   15fe6:	b980      	cbnz	r0, 1600a <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15fe8:	466d      	mov	r5, sp
   15fea:	b088      	sub	sp, #32
   15fec:	466a      	mov	r2, sp
   15fee:	4b08      	ldr	r3, [pc, #32]	; (16010 <le_data_len_change+0x38>)
   15ff0:	4808      	ldr	r0, [pc, #32]	; (16014 <le_data_len_change+0x3c>)
   15ff2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15ff6:	2303      	movs	r3, #3
   15ff8:	f842 3f10 	str.w	r3, [r2, #16]!
   15ffc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16000:	f00e fdd8 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16004:	46ad      	mov	sp, r5
}
   16006:	46bd      	mov	sp, r7
   16008:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1600a:	f00f f806 	bl	2501a <bt_conn_unref>
   1600e:	e7fa      	b.n	16006 <le_data_len_change+0x2e>
   16010:	000298db 	.word	0x000298db
   16014:	00027fac 	.word	0x00027fac

00016018 <le_phy_update_complete>:
{
   16018:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1601a:	68c3      	ldr	r3, [r0, #12]
   1601c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   16020:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16022:	4620      	mov	r0, r4
   16024:	f002 fa70 	bl	18508 <bt_conn_lookup_handle>
	if (!conn) {
   16028:	b980      	cbnz	r0, 1604c <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1602a:	466d      	mov	r5, sp
   1602c:	b088      	sub	sp, #32
   1602e:	466a      	mov	r2, sp
   16030:	4b08      	ldr	r3, [pc, #32]	; (16054 <le_phy_update_complete+0x3c>)
   16032:	4809      	ldr	r0, [pc, #36]	; (16058 <le_phy_update_complete+0x40>)
   16034:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16038:	2303      	movs	r3, #3
   1603a:	f842 3f10 	str.w	r3, [r2, #16]!
   1603e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16042:	f00e fdb7 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16046:	46ad      	mov	sp, r5
}
   16048:	46bd      	mov	sp, r7
   1604a:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1604c:	f00e ffe5 	bl	2501a <bt_conn_unref>
   16050:	e7fa      	b.n	16048 <le_phy_update_complete+0x30>
   16052:	bf00      	nop
   16054:	000298db 	.word	0x000298db
   16058:	00027fac 	.word	0x00027fac

0001605c <hci_disconn_complete>:
{
   1605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16060:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   16062:	782e      	ldrb	r6, [r5, #0]
{
   16064:	af00      	add	r7, sp, #0
	if (evt->status) {
   16066:	b9ae      	cbnz	r6, 16094 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16068:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1606c:	4640      	mov	r0, r8
   1606e:	f002 fa4b 	bl	18508 <bt_conn_lookup_handle>
	if (!conn) {
   16072:	4604      	mov	r4, r0
   16074:	b988      	cbnz	r0, 1609a <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16076:	466c      	mov	r4, sp
   16078:	b088      	sub	sp, #32
   1607a:	466a      	mov	r2, sp
   1607c:	4b0b      	ldr	r3, [pc, #44]	; (160ac <hci_disconn_complete+0x50>)
   1607e:	480c      	ldr	r0, [pc, #48]	; (160b0 <hci_disconn_complete+0x54>)
   16080:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16084:	2303      	movs	r3, #3
   16086:	f842 3f10 	str.w	r3, [r2, #16]!
   1608a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1608e:	f00e fd91 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16092:	46a5      	mov	sp, r4
}
   16094:	46bd      	mov	sp, r7
   16096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   1609a:	78eb      	ldrb	r3, [r5, #3]
   1609c:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1609e:	4631      	mov	r1, r6
   160a0:	f002 fa3a 	bl	18518 <bt_conn_set_state>
		bt_conn_unref(conn);
   160a4:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   160a6:	f00e ffb8 	bl	2501a <bt_conn_unref>
   160aa:	e7f3      	b.n	16094 <hci_disconn_complete+0x38>
   160ac:	000298ff 	.word	0x000298ff
   160b0:	00027fac 	.word	0x00027fac

000160b4 <handle_event>:
{
   160b4:	b5b0      	push	{r4, r5, r7, lr}
   160b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   160ba:	af00      	add	r7, sp, #0
   160bc:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   160be:	4293      	cmp	r3, r2
   160c0:	d103      	bne.n	160ca <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   160c2:	4620      	mov	r0, r4
   160c4:	f7ff ff4a 	bl	15f5c <handle_event.part.0>
}
   160c8:	e018      	b.n	160fc <handle_event+0x48>
		if (handler->event != event) {
   160ca:	4610      	mov	r0, r2
   160cc:	f810 5b08 	ldrb.w	r5, [r0], #8
   160d0:	42a5      	cmp	r5, r4
   160d2:	d119      	bne.n	16108 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   160d4:	8a0b      	ldrh	r3, [r1, #16]
   160d6:	7850      	ldrb	r0, [r2, #1]
   160d8:	4298      	cmp	r0, r3
   160da:	d911      	bls.n	16100 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   160dc:	466d      	mov	r5, sp
   160de:	b088      	sub	sp, #32
   160e0:	466a      	mov	r2, sp
   160e2:	490a      	ldr	r1, [pc, #40]	; (1610c <handle_event+0x58>)
   160e4:	61d4      	str	r4, [r2, #28]
   160e6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   160ea:	2304      	movs	r3, #4
   160ec:	f842 3f10 	str.w	r3, [r2, #16]!
   160f0:	4807      	ldr	r0, [pc, #28]	; (16110 <handle_event+0x5c>)
   160f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   160f6:	f00e fd5d 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   160fa:	46ad      	mov	sp, r5
}
   160fc:	46bd      	mov	sp, r7
   160fe:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   16100:	6853      	ldr	r3, [r2, #4]
   16102:	4608      	mov	r0, r1
   16104:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   16106:	e7f9      	b.n	160fc <handle_event+0x48>
   16108:	4602      	mov	r2, r0
   1610a:	e7d8      	b.n	160be <handle_event+0xa>
   1610c:	00029925 	.word	0x00029925
   16110:	00027fac 	.word	0x00027fac

00016114 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   16114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   16116:	4855      	ldr	r0, [pc, #340]	; (1626c <rx_work_handler+0x158>)
{
   16118:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1611a:	f010 f802 	bl	26122 <net_buf_slist_get>
	if (!buf) {
   1611e:	4604      	mov	r4, r0
   16120:	2800      	cmp	r0, #0
   16122:	d06a      	beq.n	161fa <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16124:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   16126:	2b01      	cmp	r3, #1
   16128:	d069      	beq.n	161fe <rx_work_handler+0xea>
   1612a:	2b03      	cmp	r3, #3
   1612c:	f040 8099 	bne.w	16262 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16130:	8a03      	ldrh	r3, [r0, #16]
   16132:	2b03      	cmp	r3, #3
   16134:	d80c      	bhi.n	16150 <rx_work_handler+0x3c>
   16136:	4a4e      	ldr	r2, [pc, #312]	; (16270 <rx_work_handler+0x15c>)
   16138:	494e      	ldr	r1, [pc, #312]	; (16274 <rx_work_handler+0x160>)
   1613a:	484f      	ldr	r0, [pc, #316]	; (16278 <rx_work_handler+0x164>)
   1613c:	f240 13ed 	movw	r3, #493	; 0x1ed
   16140:	f00d ff44 	bl	23fcc <assert_print>
   16144:	4040      	eors	r0, r0
   16146:	f380 8811 	msr	BASEPRI, r0
   1614a:	f04f 0003 	mov.w	r0, #3
   1614e:	df02      	svc	2
   16150:	2104      	movs	r1, #4
   16152:	f104 000c 	add.w	r0, r4, #12
   16156:	f010 f84a 	bl	261ee <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1615a:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   1615c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1615e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16160:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   16162:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   16166:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   16168:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1616a:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   1616c:	d010      	beq.n	16190 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1616e:	466d      	mov	r5, sp
   16170:	b088      	sub	sp, #32
   16172:	466a      	mov	r2, sp
   16174:	4841      	ldr	r0, [pc, #260]	; (1627c <rx_work_handler+0x168>)
   16176:	61d3      	str	r3, [r2, #28]
   16178:	2304      	movs	r3, #4
   1617a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1617e:	f842 3f10 	str.w	r3, [r2, #16]!
   16182:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16186:	483e      	ldr	r0, [pc, #248]	; (16280 <rx_work_handler+0x16c>)
   16188:	f00e fd14 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   1618c:	46ad      	mov	sp, r5
   1618e:	e064      	b.n	1625a <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16190:	f002 f9ba 	bl	18508 <bt_conn_lookup_handle>
	if (!conn) {
   16194:	4605      	mov	r5, r0
   16196:	b960      	cbnz	r0, 161b2 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   16198:	466d      	mov	r5, sp
   1619a:	b088      	sub	sp, #32
   1619c:	8b63      	ldrh	r3, [r4, #26]
   1619e:	466a      	mov	r2, sp
   161a0:	4938      	ldr	r1, [pc, #224]	; (16284 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   161a2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   161a6:	2303      	movs	r3, #3
   161a8:	f842 3f10 	str.w	r3, [r2, #16]!
   161ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   161b0:	e7e9      	b.n	16186 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   161b2:	f002 faa7 	bl	18704 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   161b6:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   161b8:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   161ba:	4621      	mov	r1, r4
   161bc:	4628      	mov	r0, r5
   161be:	f002 f85d 	bl	1827c <bt_conn_recv>
	bt_conn_unref(conn);
   161c2:	4628      	mov	r0, r5
   161c4:	f00e ff29 	bl	2501a <bt_conn_unref>
	return list->head;
   161c8:	4b2f      	ldr	r3, [pc, #188]	; (16288 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   161ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   161ce:	b1a3      	cbz	r3, 161fa <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   161d0:	492e      	ldr	r1, [pc, #184]	; (1628c <rx_work_handler+0x178>)
   161d2:	482f      	ldr	r0, [pc, #188]	; (16290 <rx_work_handler+0x17c>)
   161d4:	f010 fd6e 	bl	26cb4 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   161d8:	2800      	cmp	r0, #0
   161da:	da0e      	bge.n	161fa <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   161dc:	466c      	mov	r4, sp
   161de:	b088      	sub	sp, #32
   161e0:	466a      	mov	r2, sp
   161e2:	4b2c      	ldr	r3, [pc, #176]	; (16294 <rx_work_handler+0x180>)
   161e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   161e8:	2303      	movs	r3, #3
   161ea:	f842 3f10 	str.w	r3, [r2, #16]!
   161ee:	4824      	ldr	r0, [pc, #144]	; (16280 <rx_work_handler+0x16c>)
   161f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   161f4:	f00e fcde 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   161f8:	46a5      	mov	sp, r4
		}
	}
}
   161fa:	46bd      	mov	sp, r7
   161fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   161fe:	8a03      	ldrh	r3, [r0, #16]
   16200:	2b01      	cmp	r3, #1
   16202:	d80c      	bhi.n	1621e <rx_work_handler+0x10a>
   16204:	4a1a      	ldr	r2, [pc, #104]	; (16270 <rx_work_handler+0x15c>)
   16206:	491b      	ldr	r1, [pc, #108]	; (16274 <rx_work_handler+0x160>)
   16208:	481b      	ldr	r0, [pc, #108]	; (16278 <rx_work_handler+0x164>)
   1620a:	f640 136d 	movw	r3, #2413	; 0x96d
   1620e:	f00d fedd 	bl	23fcc <assert_print>
   16212:	4040      	eors	r0, r0
   16214:	f380 8811 	msr	BASEPRI, r0
   16218:	f04f 0003 	mov.w	r0, #3
   1621c:	df02      	svc	2
   1621e:	2102      	movs	r1, #2
   16220:	f104 000c 	add.w	r0, r4, #12
   16224:	f00f ffe3 	bl	261ee <net_buf_simple_pull_mem>
   16228:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1622a:	7800      	ldrb	r0, [r0, #0]
   1622c:	f00e fc94 	bl	24b58 <bt_hci_evt_get_flags>
   16230:	0783      	lsls	r3, r0, #30
   16232:	d40c      	bmi.n	1624e <rx_work_handler+0x13a>
   16234:	4a0e      	ldr	r2, [pc, #56]	; (16270 <rx_work_handler+0x15c>)
   16236:	4918      	ldr	r1, [pc, #96]	; (16298 <rx_work_handler+0x184>)
   16238:	480f      	ldr	r0, [pc, #60]	; (16278 <rx_work_handler+0x164>)
   1623a:	f640 1371 	movw	r3, #2417	; 0x971
   1623e:	f00d fec5 	bl	23fcc <assert_print>
   16242:	4040      	eors	r0, r0
   16244:	f380 8811 	msr	BASEPRI, r0
   16248:	f04f 0003 	mov.w	r0, #3
   1624c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1624e:	4a13      	ldr	r2, [pc, #76]	; (1629c <rx_work_handler+0x188>)
   16250:	7828      	ldrb	r0, [r5, #0]
   16252:	2304      	movs	r3, #4
   16254:	4621      	mov	r1, r4
   16256:	f7ff ff2d 	bl	160b4 <handle_event>
		net_buf_unref(buf);
   1625a:	4620      	mov	r0, r4
   1625c:	f004 fdf4 	bl	1ae48 <net_buf_unref>
		break;
   16260:	e7b2      	b.n	161c8 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16262:	466d      	mov	r5, sp
   16264:	b088      	sub	sp, #32
   16266:	466a      	mov	r2, sp
   16268:	490d      	ldr	r1, [pc, #52]	; (162a0 <rx_work_handler+0x18c>)
   1626a:	e79a      	b.n	161a2 <rx_work_handler+0x8e>
   1626c:	200004bc 	.word	0x200004bc
   16270:	00029947 	.word	0x00029947
   16274:	0002997b 	.word	0x0002997b
   16278:	00029994 	.word	0x00029994
   1627c:	000299b1 	.word	0x000299b1
   16280:	00027fac 	.word	0x00027fac
   16284:	000299d5 	.word	0x000299d5
   16288:	20000388 	.word	0x20000388
   1628c:	200005e0 	.word	0x200005e0
   16290:	20002148 	.word	0x20002148
   16294:	0002987a 	.word	0x0002987a
   16298:	000299f7 	.word	0x000299f7
   1629c:	000284f4 	.word	0x000284f4
   162a0:	00029a25 	.word	0x00029a25

000162a4 <hci_le_meta_event>:
{
   162a4:	b510      	push	{r4, lr}
   162a6:	2101      	movs	r1, #1
   162a8:	4604      	mov	r4, r0
   162aa:	300c      	adds	r0, #12
   162ac:	f00f ff9f 	bl	261ee <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   162b0:	4621      	mov	r1, r4
   162b2:	4a03      	ldr	r2, [pc, #12]	; (162c0 <hci_le_meta_event+0x1c>)
   162b4:	7800      	ldrb	r0, [r0, #0]
}
   162b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   162ba:	2307      	movs	r3, #7
   162bc:	f7ff befa 	b.w	160b4 <handle_event>
   162c0:	00028514 	.word	0x00028514

000162c4 <le_remote_feat_complete>:
{
   162c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   162c6:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   162c8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   162cc:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   162ce:	4630      	mov	r0, r6
   162d0:	f002 f91a 	bl	18508 <bt_conn_lookup_handle>
	if (!conn) {
   162d4:	4604      	mov	r4, r0
   162d6:	b980      	cbnz	r0, 162fa <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   162d8:	466c      	mov	r4, sp
   162da:	b088      	sub	sp, #32
   162dc:	466a      	mov	r2, sp
   162de:	4b10      	ldr	r3, [pc, #64]	; (16320 <le_remote_feat_complete+0x5c>)
   162e0:	4810      	ldr	r0, [pc, #64]	; (16324 <le_remote_feat_complete+0x60>)
   162e2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   162e6:	2303      	movs	r3, #3
   162e8:	f842 3f10 	str.w	r3, [r2, #16]!
   162ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   162f0:	f00e fc60 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   162f4:	46a5      	mov	sp, r4
}
   162f6:	46bd      	mov	sp, r7
   162f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   162fa:	782b      	ldrb	r3, [r5, #0]
   162fc:	b93b      	cbnz	r3, 1630e <le_remote_feat_complete+0x4a>
   162fe:	f8d5 3003 	ldr.w	r3, [r5, #3]
   16302:	f8c0 30ad 	str.w	r3, [r0, #173]	; 0xad
   16306:	f8d5 3007 	ldr.w	r3, [r5, #7]
   1630a:	f8c0 30b1 	str.w	r3, [r0, #177]	; 0xb1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1630e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16312:	1d20      	adds	r0, r4, #4
   16314:	f00e fc33 	bl	24b7e <atomic_or>
	bt_conn_unref(conn);
   16318:	4620      	mov	r0, r4
   1631a:	f00e fe7e 	bl	2501a <bt_conn_unref>
   1631e:	e7ea      	b.n	162f6 <le_remote_feat_complete+0x32>
   16320:	000298db 	.word	0x000298db
   16324:	00027fac 	.word	0x00027fac

00016328 <hci_cmd_done>:
{
   16328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1632c:	4606      	mov	r6, r0
   1632e:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16330:	7a90      	ldrb	r0, [r2, #10]
   16332:	4d43      	ldr	r5, [pc, #268]	; (16440 <hci_cmd_done+0x118>)
{
   16334:	4688      	mov	r8, r1
   16336:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16338:	f004 fcc4 	bl	1acc4 <net_buf_pool_get>
   1633c:	4285      	cmp	r5, r0
   1633e:	d018      	beq.n	16372 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   16340:	7aa4      	ldrb	r4, [r4, #10]
   16342:	4620      	mov	r0, r4
   16344:	f004 fcbe 	bl	1acc4 <net_buf_pool_get>
   16348:	46e8      	mov	r8, sp
   1634a:	b08a      	sub	sp, #40	; 0x28
   1634c:	466a      	mov	r2, sp
   1634e:	4b3d      	ldr	r3, [pc, #244]	; (16444 <hci_cmd_done+0x11c>)
   16350:	6255      	str	r5, [r2, #36]	; 0x24
   16352:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16356:	2306      	movs	r3, #6
   16358:	e9c2 4007 	strd	r4, r0, [r2, #28]
   1635c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   16360:	f842 3f10 	str.w	r3, [r2, #16]!
   16364:	4838      	ldr	r0, [pc, #224]	; (16448 <hci_cmd_done+0x120>)
   16366:	f00e fc25 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   1636a:	46c5      	mov	sp, r8
}
   1636c:	46bd      	mov	sp, r7
   1636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   16372:	4620      	mov	r0, r4
   16374:	f004 fcae 	bl	1acd4 <net_buf_id>
   16378:	4d34      	ldr	r5, [pc, #208]	; (1644c <hci_cmd_done+0x124>)
   1637a:	f04f 090c 	mov.w	r9, #12
   1637e:	fb09 5000 	mla	r0, r9, r0, r5
   16382:	8843      	ldrh	r3, [r0, #2]
   16384:	42b3      	cmp	r3, r6
   16386:	d016      	beq.n	163b6 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   16388:	4620      	mov	r0, r4
   1638a:	f004 fca3 	bl	1acd4 <net_buf_id>
   1638e:	fb09 5000 	mla	r0, r9, r0, r5
   16392:	466c      	mov	r4, sp
   16394:	b088      	sub	sp, #32
   16396:	8843      	ldrh	r3, [r0, #2]
   16398:	466a      	mov	r2, sp
   1639a:	492d      	ldr	r1, [pc, #180]	; (16450 <hci_cmd_done+0x128>)
   1639c:	61d3      	str	r3, [r2, #28]
   1639e:	2304      	movs	r3, #4
   163a0:	e9c2 1605 	strd	r1, r6, [r2, #20]
   163a4:	4828      	ldr	r0, [pc, #160]	; (16448 <hci_cmd_done+0x120>)
   163a6:	f842 3f10 	str.w	r3, [r2, #16]!
   163aa:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   163ae:	f00e fc01 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   163b2:	46a5      	mov	sp, r4
		return;
   163b4:	e7da      	b.n	1636c <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   163b6:	4e27      	ldr	r6, [pc, #156]	; (16454 <hci_cmd_done+0x12c>)
   163b8:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   163bc:	b120      	cbz	r0, 163c8 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   163be:	f004 fd43 	bl	1ae48 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   163c2:	2300      	movs	r3, #0
   163c4:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   163c8:	4620      	mov	r0, r4
   163ca:	f004 fc83 	bl	1acd4 <net_buf_id>
   163ce:	260c      	movs	r6, #12
   163d0:	fb06 5000 	mla	r0, r6, r0, r5
   163d4:	6843      	ldr	r3, [r0, #4]
   163d6:	b1ab      	cbz	r3, 16404 <hci_cmd_done+0xdc>
   163d8:	f1b8 0f00 	cmp.w	r8, #0
   163dc:	d112      	bne.n	16404 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   163de:	4620      	mov	r0, r4
   163e0:	f004 fc78 	bl	1acd4 <net_buf_id>
   163e4:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   163e8:	2101      	movs	r1, #1
   163ea:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   163ec:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   163f0:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   163f2:	f003 061f 	and.w	r6, r3, #31
   163f6:	40b1      	lsls	r1, r6
	if (val) {
   163f8:	095b      	lsrs	r3, r3, #5
   163fa:	b1da      	cbz	r2, 16434 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   163fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16400:	f00e fbbd 	bl	24b7e <atomic_or>
	if (cmd(buf)->sync) {
   16404:	4620      	mov	r0, r4
   16406:	f004 fc65 	bl	1acd4 <net_buf_id>
   1640a:	260c      	movs	r6, #12
   1640c:	fb06 5000 	mla	r0, r6, r0, r5
   16410:	6883      	ldr	r3, [r0, #8]
   16412:	2b00      	cmp	r3, #0
   16414:	d0aa      	beq.n	1636c <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   16416:	4620      	mov	r0, r4
   16418:	f004 fc5c 	bl	1acd4 <net_buf_id>
   1641c:	4370      	muls	r0, r6
   1641e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   16422:	4620      	mov	r0, r4
   16424:	f004 fc56 	bl	1acd4 <net_buf_id>
   16428:	fb06 5500 	mla	r5, r6, r0, r5
   1642c:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   1642e:	f007 ff31 	bl	1e294 <z_impl_k_sem_give>
}
   16432:	e79b      	b.n	1636c <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16434:	43c9      	mvns	r1, r1
   16436:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1643a:	f00e fbbe 	bl	24bba <atomic_and.isra.0>
   1643e:	e7e1      	b.n	16404 <hci_cmd_done+0xdc>
   16440:	20000d08 	.word	0x20000d08
   16444:	00029a39 	.word	0x00029a39
   16448:	00027fac 	.word	0x00027fac
   1644c:	200035b4 	.word	0x200035b4
   16450:	00029a6e 	.word	0x00029a6e
   16454:	20000388 	.word	0x20000388

00016458 <hci_cmd_status>:
{
   16458:	b538      	push	{r3, r4, r5, lr}
   1645a:	2104      	movs	r1, #4
   1645c:	4604      	mov	r4, r0
   1645e:	300c      	adds	r0, #12
   16460:	f00f fec5 	bl	261ee <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16464:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16466:	7801      	ldrb	r1, [r0, #0]
   16468:	8840      	ldrh	r0, [r0, #2]
   1646a:	4622      	mov	r2, r4
   1646c:	f7ff ff5c 	bl	16328 <hci_cmd_done>
	if (ncmd) {
   16470:	b125      	cbz	r5, 1647c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   16472:	4803      	ldr	r0, [pc, #12]	; (16480 <hci_cmd_status+0x28>)
}
   16474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16478:	f007 bf0c 	b.w	1e294 <z_impl_k_sem_give>
   1647c:	bd38      	pop	{r3, r4, r5, pc}
   1647e:	bf00      	nop
   16480:	200004a0 	.word	0x200004a0

00016484 <hci_cmd_complete>:
{
   16484:	b538      	push	{r3, r4, r5, lr}
   16486:	2103      	movs	r1, #3
   16488:	4604      	mov	r4, r0
   1648a:	300c      	adds	r0, #12
   1648c:	f00f feaf 	bl	261ee <net_buf_simple_pull_mem>
	status = buf->data[0];
   16490:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   16492:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16494:	7819      	ldrb	r1, [r3, #0]
   16496:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1649a:	4622      	mov	r2, r4
   1649c:	f7ff ff44 	bl	16328 <hci_cmd_done>
	if (ncmd) {
   164a0:	b125      	cbz	r5, 164ac <hci_cmd_complete+0x28>
   164a2:	4803      	ldr	r0, [pc, #12]	; (164b0 <hci_cmd_complete+0x2c>)
}
   164a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   164a8:	f007 bef4 	b.w	1e294 <z_impl_k_sem_give>
   164ac:	bd38      	pop	{r3, r4, r5, pc}
   164ae:	bf00      	nop
   164b0:	200004a0 	.word	0x200004a0

000164b4 <hci_num_completed_packets>:
{
   164b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164b8:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   164ba:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   164bc:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   164c0:	f8df a104 	ldr.w	sl, [pc, #260]	; 165c8 <hci_num_completed_packets+0x114>
{
   164c4:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   164c6:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   164c8:	f898 3000 	ldrb.w	r3, [r8]
   164cc:	429d      	cmp	r5, r3
   164ce:	db03      	blt.n	164d8 <hci_num_completed_packets+0x24>
}
   164d0:	371c      	adds	r7, #28
   164d2:	46bd      	mov	sp, r7
   164d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   164d8:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   164dc:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   164e0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   164e4:	4658      	mov	r0, fp
   164e6:	f002 f80f 	bl	18508 <bt_conn_lookup_handle>
		if (!conn) {
   164ea:	4604      	mov	r4, r0
   164ec:	b1d8      	cbz	r0, 16526 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   164ee:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   164f2:	2e00      	cmp	r6, #0
   164f4:	d039      	beq.n	1656a <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   164f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   164fa:	f3ef 8211 	mrs	r2, BASEPRI
   164fe:	f383 8812 	msr	BASEPRI_MAX, r3
   16502:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16506:	69e3      	ldr	r3, [r4, #28]
   16508:	b1f3      	cbz	r3, 16548 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   1650a:	3b01      	subs	r3, #1
   1650c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1650e:	f382 8811 	msr	BASEPRI, r2
   16512:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16516:	4620      	mov	r0, r4
   16518:	f001 fe7a 	bl	18210 <bt_conn_get_pkts>
   1651c:	3e01      	subs	r6, #1
   1651e:	f007 feb9 	bl	1e294 <z_impl_k_sem_give>
   16522:	b2b6      	uxth	r6, r6
   16524:	e7e5      	b.n	164f2 <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   16526:	466c      	mov	r4, sp
   16528:	b088      	sub	sp, #32
   1652a:	466a      	mov	r2, sp
   1652c:	4b24      	ldr	r3, [pc, #144]	; (165c0 <hci_num_completed_packets+0x10c>)
   1652e:	4825      	ldr	r0, [pc, #148]	; (165c4 <hci_num_completed_packets+0x110>)
   16530:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   16534:	2303      	movs	r3, #3
   16536:	f842 3f10 	str.w	r3, [r2, #16]!
   1653a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1653e:	f00e fb39 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16542:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   16544:	3501      	adds	r5, #1
   16546:	e7bf      	b.n	164c8 <hci_num_completed_packets+0x14>
   16548:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1654a:	b993      	cbnz	r3, 16572 <hci_num_completed_packets+0xbe>
   1654c:	f382 8811 	msr	BASEPRI, r2
   16550:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   16554:	2302      	movs	r3, #2
   16556:	481b      	ldr	r0, [pc, #108]	; (165c4 <hci_num_completed_packets+0x110>)
   16558:	f8c7 a014 	str.w	sl, [r7, #20]
   1655c:	613b      	str	r3, [r7, #16]
   1655e:	f107 0210 	add.w	r2, r7, #16
   16562:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16566:	f00e fb25 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1656a:	4620      	mov	r0, r4
   1656c:	f00e fd55 	bl	2501a <bt_conn_unref>
   16570:	e7e8      	b.n	16544 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16572:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   16574:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16576:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16578:	428b      	cmp	r3, r1
	list->tail = node;
   1657a:	bf08      	it	eq
   1657c:	61a0      	streq	r0, [r4, #24]
   1657e:	f382 8811 	msr	BASEPRI, r2
   16582:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16586:	f04f 0240 	mov.w	r2, #64	; 0x40
   1658a:	f3ef 8111 	mrs	r1, BASEPRI
   1658e:	f382 8812 	msr	BASEPRI_MAX, r2
   16592:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16596:	68da      	ldr	r2, [r3, #12]
   16598:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   1659a:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   1659e:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   165a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   165a4:	b94a      	cbnz	r2, 165ba <hci_num_completed_packets+0x106>
	list->head = node;
   165a6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   165aa:	f381 8811 	msr	BASEPRI, r1
   165ae:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   165b2:	4658      	mov	r0, fp
   165b4:	f007 ff4e 	bl	1e454 <k_work_submit>
   165b8:	e7ad      	b.n	16516 <hci_num_completed_packets+0x62>
	parent->next = child;
   165ba:	6013      	str	r3, [r2, #0]
	list->tail = node;
   165bc:	6263      	str	r3, [r4, #36]	; 0x24
}
   165be:	e7f4      	b.n	165aa <hci_num_completed_packets+0xf6>
   165c0:	00029aa1 	.word	0x00029aa1
   165c4:	00027fac 	.word	0x00027fac
   165c8:	00029abd 	.word	0x00029abd

000165cc <le_conn_update_complete>:
{
   165cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   165ce:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   165d0:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   165d2:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   165d6:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   165d8:	4630      	mov	r0, r6
   165da:	f001 ff95 	bl	18508 <bt_conn_lookup_handle>
	if (!conn) {
   165de:	4604      	mov	r4, r0
   165e0:	b988      	cbnz	r0, 16606 <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   165e2:	466c      	mov	r4, sp
   165e4:	b088      	sub	sp, #32
   165e6:	466a      	mov	r2, sp
   165e8:	4b2d      	ldr	r3, [pc, #180]	; (166a0 <le_conn_update_complete+0xd4>)
   165ea:	482e      	ldr	r0, [pc, #184]	; (166a4 <le_conn_update_complete+0xd8>)
   165ec:	e9c2 3605 	strd	r3, r6, [r2, #20]
   165f0:	2303      	movs	r3, #3
   165f2:	f842 3f10 	str.w	r3, [r2, #16]!
   165f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   165fa:	f00e fadb 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   165fe:	46a5      	mov	sp, r4
}
   16600:	370c      	adds	r7, #12
   16602:	46bd      	mov	sp, r7
   16604:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16606:	782b      	ldrb	r3, [r5, #0]
   16608:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   1660a:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1660e:	d117      	bne.n	16640 <le_conn_update_complete+0x74>
   16610:	78c3      	ldrb	r3, [r0, #3]
   16612:	2b01      	cmp	r3, #1
   16614:	d128      	bne.n	16668 <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16616:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1661a:	4630      	mov	r0, r6
   1661c:	f00e faaf 	bl	24b7e <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16620:	0542      	lsls	r2, r0, #21
   16622:	d40d      	bmi.n	16640 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   16624:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   16628:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   1662a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1662e:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   16630:	4639      	mov	r1, r7
   16632:	4620      	mov	r0, r4
   16634:	f002 fc7a 	bl	18f2c <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   16638:	4620      	mov	r0, r4
   1663a:	f00e fcee 	bl	2501a <bt_conn_unref>
   1663e:	e7df      	b.n	16600 <le_conn_update_complete+0x34>
		if (!evt->status) {
   16640:	782b      	ldrb	r3, [r5, #0]
   16642:	b98b      	cbnz	r3, 16668 <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   16644:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   16648:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   1664c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   16650:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16654:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   16658:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1665c:	f46f 7180 	mvn.w	r1, #256	; 0x100
   16660:	4630      	mov	r0, r6
   16662:	f00e faaa 	bl	24bba <atomic_and.isra.0>
}
   16666:	e017      	b.n	16698 <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16668:	f3bf 8f5b 	dmb	ish
   1666c:	6863      	ldr	r3, [r4, #4]
   1666e:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   16672:	05db      	lsls	r3, r3, #23
   16674:	d5f2      	bpl.n	1665c <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   16676:	782b      	ldrb	r3, [r5, #0]
   16678:	2b20      	cmp	r3, #32
   1667a:	d1ef      	bne.n	1665c <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   1667c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   16680:	2b00      	cmp	r3, #0
   16682:	d0eb      	beq.n	1665c <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   16684:	3b01      	subs	r3, #1
   16686:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1668a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1668e:	2300      	movs	r3, #0
   16690:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16694:	f007 ff46 	bl	1e524 <k_work_schedule>
		notify_le_param_updated(conn);
   16698:	4620      	mov	r0, r4
   1669a:	f002 f855 	bl	18748 <notify_le_param_updated>
   1669e:	e7cb      	b.n	16638 <le_conn_update_complete+0x6c>
   166a0:	000298db 	.word	0x000298db
   166a4:	00027fac 	.word	0x00027fac

000166a8 <bt_hci_cmd_state_set_init>:
{
   166a8:	b510      	push	{r4, lr}
	state->bit = bit;
   166aa:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   166ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
   166b2:	720b      	strb	r3, [r1, #8]
{
   166b4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   166b6:	f004 fb0d 	bl	1acd4 <net_buf_id>
   166ba:	4b03      	ldr	r3, [pc, #12]	; (166c8 <bt_hci_cmd_state_set_init+0x20>)
   166bc:	220c      	movs	r2, #12
   166be:	fb02 3300 	mla	r3, r2, r0, r3
   166c2:	605c      	str	r4, [r3, #4]
}
   166c4:	bd10      	pop	{r4, pc}
   166c6:	bf00      	nop
   166c8:	200035b4 	.word	0x200035b4

000166cc <bt_hci_cmd_create>:
{
   166cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   166d0:	f04f 32ff 	mov.w	r2, #4294967295
   166d4:	f04f 33ff 	mov.w	r3, #4294967295
   166d8:	4606      	mov	r6, r0
   166da:	4817      	ldr	r0, [pc, #92]	; (16738 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   166dc:	4d17      	ldr	r5, [pc, #92]	; (1673c <bt_hci_cmd_create+0x70>)
{
   166de:	460f      	mov	r7, r1
   166e0:	f00f fcfe 	bl	260e0 <net_buf_alloc_fixed>
   166e4:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   166e6:	f100 0a0c 	add.w	sl, r0, #12
   166ea:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   166ec:	f04f 0800 	mov.w	r8, #0
   166f0:	4650      	mov	r0, sl
   166f2:	f00f fcfc 	bl	260ee <net_buf_simple_reserve>
   166f6:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   166fa:	4620      	mov	r0, r4
   166fc:	f004 faea 	bl	1acd4 <net_buf_id>
   16700:	f04f 090c 	mov.w	r9, #12
   16704:	fb09 5000 	mla	r0, r9, r0, r5
   16708:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1670a:	4620      	mov	r0, r4
   1670c:	f004 fae2 	bl	1acd4 <net_buf_id>
   16710:	fb09 5000 	mla	r0, r9, r0, r5
   16714:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   16718:	4620      	mov	r0, r4
   1671a:	f004 fadb 	bl	1acd4 <net_buf_id>
   1671e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   16722:	2103      	movs	r1, #3
   16724:	f8c5 8004 	str.w	r8, [r5, #4]
   16728:	4650      	mov	r0, sl
   1672a:	f00f fd39 	bl	261a0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1672e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   16730:	7087      	strb	r7, [r0, #2]
}
   16732:	4620      	mov	r0, r4
   16734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16738:	20000d08 	.word	0x20000d08
   1673c:	200035b4 	.word	0x200035b4

00016740 <bt_hci_cmd_send_sync>:
{
   16740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16744:	b087      	sub	sp, #28
   16746:	4680      	mov	r8, r0
   16748:	af00      	add	r7, sp, #0
   1674a:	4615      	mov	r5, r2
	if (!buf) {
   1674c:	460c      	mov	r4, r1
   1674e:	b921      	cbnz	r1, 1675a <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   16750:	f7ff ffbc 	bl	166cc <bt_hci_cmd_create>
		if (!buf) {
   16754:	4604      	mov	r4, r0
   16756:	2800      	cmp	r0, #0
   16758:	d05a      	beq.n	16810 <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1675a:	2201      	movs	r2, #1
   1675c:	2100      	movs	r1, #0
   1675e:	4638      	mov	r0, r7
   16760:	f010 f9f9 	bl	26b56 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16764:	4620      	mov	r0, r4
   16766:	f004 fab5 	bl	1acd4 <net_buf_id>
   1676a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 16834 <bt_hci_cmd_send_sync+0xf4>
   1676e:	230c      	movs	r3, #12
   16770:	fb03 9000 	mla	r0, r3, r0, r9
   16774:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16776:	4620      	mov	r0, r4
   16778:	f00f fcec 	bl	26154 <net_buf_ref>
   1677c:	4601      	mov	r1, r0
   1677e:	4826      	ldr	r0, [pc, #152]	; (16818 <bt_hci_cmd_send_sync+0xd8>)
   16780:	f00f fce6 	bl	26150 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16784:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16788:	2300      	movs	r3, #0
   1678a:	4638      	mov	r0, r7
   1678c:	f007 fda8 	bl	1e2e0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16790:	4606      	mov	r6, r0
   16792:	b180      	cbz	r0, 167b6 <bt_hci_cmd_send_sync+0x76>
   16794:	4a21      	ldr	r2, [pc, #132]	; (1681c <bt_hci_cmd_send_sync+0xdc>)
   16796:	4922      	ldr	r1, [pc, #136]	; (16820 <bt_hci_cmd_send_sync+0xe0>)
   16798:	4822      	ldr	r0, [pc, #136]	; (16824 <bt_hci_cmd_send_sync+0xe4>)
   1679a:	f240 1349 	movw	r3, #329	; 0x149
   1679e:	f00d fc15 	bl	23fcc <assert_print>
   167a2:	4821      	ldr	r0, [pc, #132]	; (16828 <bt_hci_cmd_send_sync+0xe8>)
   167a4:	4631      	mov	r1, r6
   167a6:	f00d fc11 	bl	23fcc <assert_print>
   167aa:	4040      	eors	r0, r0
   167ac:	f380 8811 	msr	BASEPRI, r0
   167b0:	f04f 0003 	mov.w	r0, #3
   167b4:	df02      	svc	2
	status = cmd(buf)->status;
   167b6:	4620      	mov	r0, r4
   167b8:	f004 fa8c 	bl	1acd4 <net_buf_id>
   167bc:	230c      	movs	r3, #12
   167be:	4358      	muls	r0, r3
   167c0:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   167c4:	b1e6      	cbz	r6, 16800 <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   167c6:	466d      	mov	r5, sp
   167c8:	b088      	sub	sp, #32
   167ca:	466a      	mov	r2, sp
   167cc:	4b17      	ldr	r3, [pc, #92]	; (1682c <bt_hci_cmd_send_sync+0xec>)
   167ce:	61d6      	str	r6, [r2, #28]
   167d0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   167d4:	2304      	movs	r3, #4
   167d6:	f842 3f10 	str.w	r3, [r2, #16]!
   167da:	4815      	ldr	r0, [pc, #84]	; (16830 <bt_hci_cmd_send_sync+0xf0>)
   167dc:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   167e0:	f00e f9e8 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   167e4:	4620      	mov	r0, r4
   167e6:	46ad      	mov	sp, r5
   167e8:	f004 fb2e 	bl	1ae48 <net_buf_unref>
			return -ECONNREFUSED;
   167ec:	2e09      	cmp	r6, #9
   167ee:	bf14      	ite	ne
   167f0:	f06f 0004 	mvnne.w	r0, #4
   167f4:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   167f8:	371c      	adds	r7, #28
   167fa:	46bd      	mov	sp, r7
   167fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   16800:	b115      	cbz	r5, 16808 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   16802:	602c      	str	r4, [r5, #0]
	return 0;
   16804:	2000      	movs	r0, #0
   16806:	e7f7      	b.n	167f8 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   16808:	4620      	mov	r0, r4
   1680a:	f004 fb1d 	bl	1ae48 <net_buf_unref>
   1680e:	e7f9      	b.n	16804 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   16810:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16814:	e7f0      	b.n	167f8 <bt_hci_cmd_send_sync+0xb8>
   16816:	bf00      	nop
   16818:	200004c4 	.word	0x200004c4
   1681c:	00029947 	.word	0x00029947
   16820:	00029ad4 	.word	0x00029ad4
   16824:	00029994 	.word	0x00029994
   16828:	00029add 	.word	0x00029add
   1682c:	00029afd 	.word	0x00029afd
   16830:	00027fac 	.word	0x00027fac
   16834:	200035b4 	.word	0x200035b4

00016838 <hci_le_read_max_data_len>:
{
   16838:	b570      	push	{r4, r5, r6, lr}
   1683a:	b088      	sub	sp, #32
   1683c:	4606      	mov	r6, r0
   1683e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16840:	aa01      	add	r2, sp, #4
   16842:	2100      	movs	r1, #0
   16844:	f242 002f 	movw	r0, #8239	; 0x202f
   16848:	f7ff ff7a 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   1684c:	4604      	mov	r4, r0
   1684e:	b160      	cbz	r0, 1686a <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   16850:	4b0b      	ldr	r3, [pc, #44]	; (16880 <hci_le_read_max_data_len+0x48>)
   16852:	9307      	str	r3, [sp, #28]
   16854:	480b      	ldr	r0, [pc, #44]	; (16884 <hci_le_read_max_data_len+0x4c>)
   16856:	2302      	movs	r3, #2
   16858:	aa06      	add	r2, sp, #24
   1685a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1685e:	9306      	str	r3, [sp, #24]
   16860:	f00e f9a8 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   16864:	4620      	mov	r0, r4
   16866:	b008      	add	sp, #32
   16868:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1686a:	9801      	ldr	r0, [sp, #4]
   1686c:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1686e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16872:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16874:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16878:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1687a:	f004 fae5 	bl	1ae48 <net_buf_unref>
	return 0;
   1687e:	e7f1      	b.n	16864 <hci_le_read_max_data_len+0x2c>
   16880:	00029b19 	.word	0x00029b19
   16884:	00027fac 	.word	0x00027fac

00016888 <bt_hci_le_rand>:
{
   16888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1688a:	4b14      	ldr	r3, [pc, #80]	; (168dc <bt_hci_le_rand+0x54>)
   1688c:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   16890:	2b00      	cmp	r3, #0
{
   16892:	4605      	mov	r5, r0
   16894:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16896:	da1d      	bge.n	168d4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   16898:	b914      	cbnz	r4, 168a0 <bt_hci_le_rand+0x18>
	return 0;
   1689a:	4620      	mov	r0, r4
}
   1689c:	b003      	add	sp, #12
   1689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   168a0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   168a2:	aa01      	add	r2, sp, #4
   168a4:	f04f 0100 	mov.w	r1, #0
   168a8:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   168ac:	4626      	mov	r6, r4
   168ae:	bf28      	it	cs
   168b0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   168b2:	f7ff ff45 	bl	16740 <bt_hci_cmd_send_sync>
		if (err) {
   168b6:	2800      	cmp	r0, #0
   168b8:	d1f0      	bne.n	1689c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   168ba:	9f01      	ldr	r7, [sp, #4]
   168bc:	68f9      	ldr	r1, [r7, #12]
   168be:	4632      	mov	r2, r6
   168c0:	3101      	adds	r1, #1
   168c2:	4628      	mov	r0, r5
   168c4:	f010 fd7a 	bl	273bc <memcpy>
		net_buf_unref(rsp);
   168c8:	4638      	mov	r0, r7
   168ca:	f004 fabd 	bl	1ae48 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   168ce:	4435      	add	r5, r6
		len -= count;
   168d0:	1ba4      	subs	r4, r4, r6
   168d2:	e7e1      	b.n	16898 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   168d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   168d8:	e7e0      	b.n	1689c <bt_hci_le_rand+0x14>
   168da:	bf00      	nop
   168dc:	20000388 	.word	0x20000388

000168e0 <bt_hci_le_enh_conn_complete>:
{
   168e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168e4:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   168e6:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   168ea:	4aad      	ldr	r2, [pc, #692]	; (16ba0 <bt_hci_le_enh_conn_complete+0x2c0>)
	if (evt->status) {
   168ec:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   168ee:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   168f0:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   168f4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   168f8:	b29b      	uxth	r3, r3
   168fa:	4299      	cmp	r1, r3
   168fc:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   16900:	bf08      	it	eq
   16902:	8016      	strheq	r6, [r2, #0]
{
   16904:	af02      	add	r7, sp, #8
   16906:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16908:	fa1f f889 	uxth.w	r8, r9
			return true;
   1690c:	bf08      	it	eq
   1690e:	2601      	moveq	r6, #1
	if (evt->status) {
   16910:	b3a4      	cbz	r4, 1697c <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16912:	2c3c      	cmp	r4, #60	; 0x3c
   16914:	d122      	bne.n	1695c <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16916:	f001 f947 	bl	17ba8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1691a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1691e:	3010      	adds	r0, #16
   16920:	f00e f94b 	bl	24bba <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16924:	2000      	movs	r0, #0
   16926:	f7ff fab1 	bl	15e8c <find_pending_connect.part.0>
		if (!conn) {
   1692a:	4605      	mov	r5, r0
   1692c:	b970      	cbnz	r0, 1694c <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   1692e:	4b9d      	ldr	r3, [pc, #628]	; (16ba4 <bt_hci_le_enh_conn_complete+0x2c4>)
   16930:	627b      	str	r3, [r7, #36]	; 0x24
   16932:	2302      	movs	r3, #2
   16934:	489c      	ldr	r0, [pc, #624]	; (16ba8 <bt_hci_le_enh_conn_complete+0x2c8>)
   16936:	623b      	str	r3, [r7, #32]
   16938:	f107 0220 	add.w	r2, r7, #32
   1693c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16940:	f00e f938 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   16944:	372c      	adds	r7, #44	; 0x2c
   16946:	46bd      	mov	sp, r7
   16948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1694c:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1694e:	2100      	movs	r1, #0
   16950:	f001 fde2 	bl	18518 <bt_conn_set_state>
		bt_conn_unref(conn);
   16954:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   16956:	f00e fb60 	bl	2501a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1695a:	e7f3      	b.n	16944 <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1695c:	466d      	mov	r5, sp
   1695e:	b088      	sub	sp, #32
   16960:	aa02      	add	r2, sp, #8
   16962:	4b92      	ldr	r3, [pc, #584]	; (16bac <bt_hci_le_enh_conn_complete+0x2cc>)
   16964:	4890      	ldr	r0, [pc, #576]	; (16ba8 <bt_hci_le_enh_conn_complete+0x2c8>)
   16966:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1696a:	2303      	movs	r3, #3
   1696c:	f842 3f10 	str.w	r3, [r2, #16]!
   16970:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16974:	f00e f91e 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16978:	46ad      	mov	sp, r5
		return;
   1697a:	e7e3      	b.n	16944 <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1697c:	7903      	ldrb	r3, [r0, #4]
   1697e:	3b02      	subs	r3, #2
   16980:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   16982:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   16986:	d82c      	bhi.n	169e2 <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   16988:	4651      	mov	r1, sl
   1698a:	f107 0010 	add.w	r0, r7, #16
   1698e:	f00e f90a 	bl	24ba6 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   16992:	7c3b      	ldrb	r3, [r7, #16]
   16994:	3b02      	subs	r3, #2
   16996:	743b      	strb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   16998:	f105 0111 	add.w	r1, r5, #17
   1699c:	f107 0009 	add.w	r0, r7, #9
   169a0:	f00e f8fc 	bl	24b9c <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   169a4:	2301      	movs	r3, #1
   169a6:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   169a8:	78eb      	ldrb	r3, [r5, #3]
   169aa:	2b01      	cmp	r3, #1
   169ac:	d02e      	beq.n	16a0c <bt_hci_le_enh_conn_complete+0x12c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   169ae:	4650      	mov	r0, sl
   169b0:	f7ff f95c 	bl	15c6c <bt_addr_le_str>
   169b4:	466c      	mov	r4, sp
   169b6:	b088      	sub	sp, #32
   169b8:	aa02      	add	r2, sp, #8
   169ba:	4b7d      	ldr	r3, [pc, #500]	; (16bb0 <bt_hci_le_enh_conn_complete+0x2d0>)
   169bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   169c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   169c4:	8393      	strh	r3, [r2, #28]
   169c6:	4b7b      	ldr	r3, [pc, #492]	; (16bb4 <bt_hci_le_enh_conn_complete+0x2d4>)
   169c8:	f842 3f10 	str.w	r3, [r2, #16]!
   169cc:	4876      	ldr	r0, [pc, #472]	; (16ba8 <bt_hci_le_enh_conn_complete+0x2c8>)
   169ce:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   169d2:	f00e f8ef 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   169d6:	211f      	movs	r1, #31
   169d8:	46a5      	mov	sp, r4
   169da:	4640      	mov	r0, r8
   169dc:	f00e f8f9 	bl	24bd2 <bt_hci_disconnect>
		return;
   169e0:	e7b0      	b.n	16944 <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   169e2:	78c3      	ldrb	r3, [r0, #3]
   169e4:	2b01      	cmp	r3, #1
   169e6:	bf04      	itt	eq
   169e8:	4b73      	ldreq	r3, [pc, #460]	; (16bb8 <bt_hci_le_enh_conn_complete+0x2d8>)
   169ea:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   169ee:	4651      	mov	r1, sl
   169f0:	4620      	mov	r0, r4
   169f2:	f00e f9a9 	bl	24d48 <bt_lookup_id_addr>
   169f6:	4601      	mov	r1, r0
   169f8:	f107 0010 	add.w	r0, r7, #16
   169fc:	f00e f8d3 	bl	24ba6 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   16a00:	4651      	mov	r1, sl
   16a02:	f107 0008 	add.w	r0, r7, #8
   16a06:	f00e f8ce 	bl	24ba6 <bt_addr_le_copy>
   16a0a:	e7cd      	b.n	169a8 <bt_hci_le_enh_conn_complete+0xc8>
   16a0c:	f107 0010 	add.w	r0, r7, #16
   16a10:	f7ff fa3c 	bl	15e8c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16a14:	78eb      	ldrb	r3, [r5, #3]
   16a16:	2b01      	cmp	r3, #1
   16a18:	4604      	mov	r4, r0
   16a1a:	d10a      	bne.n	16a32 <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16a1c:	f001 f8c4 	bl	17ba8 <bt_le_adv_lookup_legacy>
   16a20:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16a24:	4683      	mov	fp, r0
   16a26:	3010      	adds	r0, #16
   16a28:	f00e f8c7 	bl	24bba <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   16a2c:	4658      	mov	r0, fp
   16a2e:	f00e faa3 	bl	24f78 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   16a32:	2c00      	cmp	r4, #0
   16a34:	d0bb      	beq.n	169ae <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   16a36:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16a38:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
   16a3c:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16a40:	f00e f8b1 	bl	24ba6 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16a44:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   16a48:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16a4c:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16a50:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16a54:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   16a58:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   16a5c:	78eb      	ldrb	r3, [r5, #3]
   16a5e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   16a60:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16a62:	2b01      	cmp	r3, #1
	conn->err = 0U;
   16a64:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16a66:	d116      	bne.n	16a96 <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   16a68:	f107 0108 	add.w	r1, r7, #8
   16a6c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   16a70:	f00e f899 	bl	24ba6 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16a74:	f001 f898 	bl	17ba8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   16a78:	7a21      	ldrb	r1, [r4, #8]
   16a7a:	4a4f      	ldr	r2, [pc, #316]	; (16bb8 <bt_hci_le_enh_conn_complete+0x2d8>)
   16a7c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   16a80:	4411      	add	r1, r2
   16a82:	f104 0096 	add.w	r0, r4, #150	; 0x96
   16a86:	f00e f88e 	bl	24ba6 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16a8a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   16a8e:	065d      	lsls	r5, r3, #25
   16a90:	d501      	bpl.n	16a96 <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   16a92:	f001 fa4f 	bl	17f34 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16a96:	2107      	movs	r1, #7
   16a98:	4620      	mov	r0, r4
   16a9a:	f001 fd3d 	bl	18518 <bt_conn_set_state>
	if (is_disconnected) {
   16a9e:	b11e      	cbz	r6, 16aa8 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16aa0:	2101      	movs	r1, #1
   16aa2:	4620      	mov	r0, r4
   16aa4:	f001 fd38 	bl	18518 <bt_conn_set_state>
	bt_conn_connected(conn);
   16aa8:	4620      	mov	r0, r4
   16aaa:	f00e faf4 	bl	25096 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16aae:	7aa3      	ldrb	r3, [r4, #10]
   16ab0:	2b07      	cmp	r3, #7
   16ab2:	d170      	bne.n	16b96 <bt_hci_le_enh_conn_complete+0x2b6>
   16ab4:	f3bf 8f5b 	dmb	ish
   16ab8:	6863      	ldr	r3, [r4, #4]
   16aba:	4d3f      	ldr	r5, [pc, #252]	; (16bb8 <bt_hci_le_enh_conn_complete+0x2d8>)
   16abc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16ac0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   16ac4:	d129      	bne.n	16b1a <bt_hci_le_enh_conn_complete+0x23a>
   16ac6:	78e3      	ldrb	r3, [r4, #3]
   16ac8:	b11b      	cbz	r3, 16ad2 <bt_hci_le_enh_conn_complete+0x1f2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16aca:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   16ace:	0718      	lsls	r0, r3, #28
   16ad0:	d523      	bpl.n	16b1a <bt_hci_le_enh_conn_complete+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16ad2:	2102      	movs	r1, #2
   16ad4:	f242 0016 	movw	r0, #8214	; 0x2016
   16ad8:	f7ff fdf8 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   16adc:	4606      	mov	r6, r0
   16ade:	2800      	cmp	r0, #0
   16ae0:	d05b      	beq.n	16b9a <bt_hci_le_enh_conn_complete+0x2ba>
   16ae2:	2102      	movs	r1, #2
   16ae4:	300c      	adds	r0, #12
   16ae6:	f00f fb5b 	bl	261a0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16aea:	8823      	ldrh	r3, [r4, #0]
   16aec:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   16aee:	2200      	movs	r2, #0
   16af0:	4631      	mov	r1, r6
   16af2:	f242 0016 	movw	r0, #8214	; 0x2016
   16af6:	f7ff fe23 	bl	16740 <bt_hci_cmd_send_sync>
		if (err) {
   16afa:	b170      	cbz	r0, 16b1a <bt_hci_le_enh_conn_complete+0x23a>
			LOG_ERR("Failed read remote features (%d)", err);
   16afc:	466e      	mov	r6, sp
   16afe:	b088      	sub	sp, #32
   16b00:	aa02      	add	r2, sp, #8
   16b02:	4b2e      	ldr	r3, [pc, #184]	; (16bbc <bt_hci_le_enh_conn_complete+0x2dc>)
   16b04:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16b08:	2303      	movs	r3, #3
   16b0a:	f842 3f10 	str.w	r3, [r2, #16]!
   16b0e:	4826      	ldr	r0, [pc, #152]	; (16ba8 <bt_hci_le_enh_conn_complete+0x2c8>)
   16b10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16b14:	f00e f84e 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16b18:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16b1a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   16b1e:	07d9      	lsls	r1, r3, #31
   16b20:	d516      	bpl.n	16b50 <bt_hci_le_enh_conn_complete+0x270>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16b22:	2100      	movs	r1, #0
   16b24:	2302      	movs	r3, #2
   16b26:	9100      	str	r1, [sp, #0]
   16b28:	461a      	mov	r2, r3
   16b2a:	4620      	mov	r0, r4
   16b2c:	f00e f88a 	bl	24c44 <bt_le_set_phy>
		if (err) {
   16b30:	b170      	cbz	r0, 16b50 <bt_hci_le_enh_conn_complete+0x270>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   16b32:	466e      	mov	r6, sp
   16b34:	b088      	sub	sp, #32
   16b36:	aa02      	add	r2, sp, #8
   16b38:	4b21      	ldr	r3, [pc, #132]	; (16bc0 <bt_hci_le_enh_conn_complete+0x2e0>)
   16b3a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16b3e:	2303      	movs	r3, #3
   16b40:	f842 3f10 	str.w	r3, [r2, #16]!
   16b44:	4818      	ldr	r0, [pc, #96]	; (16ba8 <bt_hci_le_enh_conn_complete+0x2c8>)
   16b46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16b4a:	f00e f833 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16b4e:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16b50:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   16b54:	069a      	lsls	r2, r3, #26
   16b56:	d51e      	bpl.n	16b96 <bt_hci_le_enh_conn_complete+0x2b6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16b58:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   16b5c:	689b      	ldr	r3, [r3, #8]
   16b5e:	079b      	lsls	r3, r3, #30
   16b60:	d519      	bpl.n	16b96 <bt_hci_le_enh_conn_complete+0x2b6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16b62:	1db9      	adds	r1, r7, #6
   16b64:	1d38      	adds	r0, r7, #4
   16b66:	f7ff fe67 	bl	16838 <hci_le_read_max_data_len>
			if (!err) {
   16b6a:	b9a0      	cbnz	r0, 16b96 <bt_hci_le_enh_conn_complete+0x2b6>
				err = bt_le_set_data_len(conn,
   16b6c:	88fa      	ldrh	r2, [r7, #6]
   16b6e:	88b9      	ldrh	r1, [r7, #4]
   16b70:	4620      	mov	r0, r4
   16b72:	f00e f849 	bl	24c08 <bt_le_set_data_len>
				if (err) {
   16b76:	b170      	cbz	r0, 16b96 <bt_hci_le_enh_conn_complete+0x2b6>
					LOG_ERR("Failed to set data len (%d)", err);
   16b78:	466d      	mov	r5, sp
   16b7a:	b088      	sub	sp, #32
   16b7c:	aa02      	add	r2, sp, #8
   16b7e:	4b11      	ldr	r3, [pc, #68]	; (16bc4 <bt_hci_le_enh_conn_complete+0x2e4>)
   16b80:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16b84:	2303      	movs	r3, #3
   16b86:	f842 3f10 	str.w	r3, [r2, #16]!
   16b8a:	4807      	ldr	r0, [pc, #28]	; (16ba8 <bt_hci_le_enh_conn_complete+0x2c8>)
   16b8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16b90:	f00e f810 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16b94:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   16b96:	4620      	mov	r0, r4
   16b98:	e6dd      	b.n	16956 <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   16b9a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16b9e:	e7ad      	b.n	16afc <bt_hci_le_enh_conn_complete+0x21c>
   16ba0:	20004484 	.word	0x20004484
   16ba4:	00029b39 	.word	0x00029b39
   16ba8:	00027fac 	.word	0x00027fac
   16bac:	00029b5a 	.word	0x00029b5a
   16bb0:	00029b73 	.word	0x00029b73
   16bb4:	01000003 	.word	0x01000003
   16bb8:	20000388 	.word	0x20000388
   16bbc:	00029b8f 	.word	0x00029b8f
   16bc0:	00029bb0 	.word	0x00029bb0
   16bc4:	00029bc7 	.word	0x00029bc7

00016bc8 <le_legacy_conn_complete>:
{
   16bc8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16bca:	68c1      	ldr	r1, [r0, #12]
{
   16bcc:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   16bce:	780b      	ldrb	r3, [r1, #0]
   16bd0:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   16bd4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16bd8:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   16bdc:	78cb      	ldrb	r3, [r1, #3]
   16bde:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   16be2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16be6:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   16bea:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   16bee:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   16bf2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   16bf6:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   16bfa:	7c4b      	ldrb	r3, [r1, #17]
   16bfc:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   16c00:	a801      	add	r0, sp, #4
   16c02:	3104      	adds	r1, #4
   16c04:	f00d ffcf 	bl	24ba6 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   16c08:	4907      	ldr	r1, [pc, #28]	; (16c28 <le_legacy_conn_complete+0x60>)
   16c0a:	f10d 000b 	add.w	r0, sp, #11
   16c0e:	f00d ffc5 	bl	24b9c <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   16c12:	f10d 0011 	add.w	r0, sp, #17
   16c16:	f00d ffc1 	bl	24b9c <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   16c1a:	4668      	mov	r0, sp
   16c1c:	f7ff fe60 	bl	168e0 <bt_hci_le_enh_conn_complete>
}
   16c20:	b009      	add	sp, #36	; 0x24
   16c22:	f85d fb04 	ldr.w	pc, [sp], #4
   16c26:	bf00      	nop
   16c28:	000297c2 	.word	0x000297c2

00016c2c <bt_send>:
	return bt_dev.drv->send(buf);
   16c2c:	4b02      	ldr	r3, [pc, #8]	; (16c38 <bt_send+0xc>)
   16c2e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   16c32:	695b      	ldr	r3, [r3, #20]
   16c34:	4718      	bx	r3
   16c36:	bf00      	nop
   16c38:	20000388 	.word	0x20000388

00016c3c <bt_hci_cmd_send>:
{
   16c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c3e:	4605      	mov	r5, r0
   16c40:	af00      	add	r7, sp, #0
	if (!buf) {
   16c42:	460c      	mov	r4, r1
   16c44:	b919      	cbnz	r1, 16c4e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   16c46:	f7ff fd41 	bl	166cc <bt_hci_cmd_create>
		if (!buf) {
   16c4a:	4604      	mov	r4, r0
   16c4c:	b318      	cbz	r0, 16c96 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16c4e:	f640 4335 	movw	r3, #3125	; 0xc35
   16c52:	429d      	cmp	r5, r3
   16c54:	d119      	bne.n	16c8a <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   16c56:	4620      	mov	r0, r4
   16c58:	f7ff ffe8 	bl	16c2c <bt_send>
		if (err) {
   16c5c:	4605      	mov	r5, r0
   16c5e:	b188      	cbz	r0, 16c84 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   16c60:	466e      	mov	r6, sp
   16c62:	b088      	sub	sp, #32
   16c64:	466a      	mov	r2, sp
   16c66:	4b0d      	ldr	r3, [pc, #52]	; (16c9c <bt_hci_cmd_send+0x60>)
   16c68:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16c6c:	2303      	movs	r3, #3
   16c6e:	480c      	ldr	r0, [pc, #48]	; (16ca0 <bt_hci_cmd_send+0x64>)
   16c70:	f842 3f10 	str.w	r3, [r2, #16]!
   16c74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16c78:	f00d ff9c 	bl	24bb4 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   16c7c:	4620      	mov	r0, r4
   16c7e:	46b5      	mov	sp, r6
   16c80:	f004 f8e2 	bl	1ae48 <net_buf_unref>
}
   16c84:	4628      	mov	r0, r5
   16c86:	46bd      	mov	sp, r7
   16c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16c8a:	4806      	ldr	r0, [pc, #24]	; (16ca4 <bt_hci_cmd_send+0x68>)
   16c8c:	4621      	mov	r1, r4
   16c8e:	f00f fa5f 	bl	26150 <net_buf_put>
	return 0;
   16c92:	2500      	movs	r5, #0
   16c94:	e7f6      	b.n	16c84 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   16c96:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16c9a:	e7f3      	b.n	16c84 <bt_hci_cmd_send+0x48>
   16c9c:	00029be3 	.word	0x00029be3
   16ca0:	00027fac 	.word	0x00027fac
   16ca4:	200004c4 	.word	0x200004c4

00016ca8 <le_conn_param_req>:
{
   16ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16caa:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16cac:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16cae:	78d9      	ldrb	r1, [r3, #3]
   16cb0:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16cb2:	881e      	ldrh	r6, [r3, #0]
{
   16cb4:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16cb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16cba:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16cbc:	7959      	ldrb	r1, [r3, #5]
   16cbe:	791a      	ldrb	r2, [r3, #4]
   16cc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16cc4:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16cc6:	799a      	ldrb	r2, [r3, #6]
   16cc8:	79d9      	ldrb	r1, [r3, #7]
   16cca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16cce:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16cd0:	7a1a      	ldrb	r2, [r3, #8]
   16cd2:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16cd4:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16cd6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16cda:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16cdc:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   16cde:	f001 fc13 	bl	18508 <bt_conn_lookup_handle>
	if (!conn) {
   16ce2:	4605      	mov	r5, r0
   16ce4:	b9a8      	cbnz	r0, 16d12 <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16ce6:	466d      	mov	r5, sp
   16ce8:	b088      	sub	sp, #32
   16cea:	466a      	mov	r2, sp
   16cec:	4b1e      	ldr	r3, [pc, #120]	; (16d68 <le_conn_param_req+0xc0>)
   16cee:	481f      	ldr	r0, [pc, #124]	; (16d6c <le_conn_param_req+0xc4>)
   16cf0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16cf4:	2303      	movs	r3, #3
   16cf6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16cfa:	f842 3f10 	str.w	r3, [r2, #16]!
   16cfe:	f00d ff59 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16d02:	2102      	movs	r1, #2
   16d04:	46ad      	mov	sp, r5
   16d06:	4620      	mov	r0, r4
   16d08:	f00d ffe8 	bl	24cdc <le_conn_param_neg_reply>
}
   16d0c:	370c      	adds	r7, #12
   16d0e:	46bd      	mov	sp, r7
   16d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   16d12:	4639      	mov	r1, r7
   16d14:	f001 fd64 	bl	187e0 <le_param_req>
   16d18:	b938      	cbnz	r0, 16d2a <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16d1a:	211e      	movs	r1, #30
   16d1c:	4620      	mov	r0, r4
   16d1e:	f00d ffdd 	bl	24cdc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16d22:	4628      	mov	r0, r5
   16d24:	f00e f979 	bl	2501a <bt_conn_unref>
   16d28:	e7f0      	b.n	16d0c <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16d2a:	210e      	movs	r1, #14
   16d2c:	f242 0020 	movw	r0, #8224	; 0x2020
   16d30:	f7ff fccc 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   16d34:	4604      	mov	r4, r0
   16d36:	2800      	cmp	r0, #0
   16d38:	d0f3      	beq.n	16d22 <le_conn_param_req+0x7a>
   16d3a:	210e      	movs	r1, #14
   16d3c:	300c      	adds	r0, #12
   16d3e:	f00f fa2f 	bl	261a0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   16d42:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   16d44:	8006      	strh	r6, [r0, #0]
   16d46:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16d4a:	883b      	ldrh	r3, [r7, #0]
   16d4c:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16d4e:	887b      	ldrh	r3, [r7, #2]
   16d50:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16d52:	88bb      	ldrh	r3, [r7, #4]
   16d54:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16d56:	88fb      	ldrh	r3, [r7, #6]
   16d58:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16d5a:	4621      	mov	r1, r4
   16d5c:	f242 0020 	movw	r0, #8224	; 0x2020
   16d60:	f7ff ff6c 	bl	16c3c <bt_hci_cmd_send>
   16d64:	e7dd      	b.n	16d22 <le_conn_param_req+0x7a>
   16d66:	bf00      	nop
   16d68:	000298db 	.word	0x000298db
   16d6c:	00027fac 	.word	0x00027fac

00016d70 <hci_tx_thread>:
{
   16d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16d74:	f8df 8158 	ldr.w	r8, [pc, #344]	; 16ed0 <hci_tx_thread+0x160>
		BT_ASSERT(err == 0);
   16d78:	f8df 9180 	ldr.w	r9, [pc, #384]	; 16efc <hci_tx_thread+0x18c>
{
   16d7c:	b087      	sub	sp, #28
   16d7e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   16d80:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16d84:	4851      	ldr	r0, [pc, #324]	; (16ecc <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16d86:	f36f 3394 	bfc	r3, #14, #7
   16d8a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16d8e:	f001 fb79 	bl	18484 <bt_conn_prepare_events>
   16d92:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   16d94:	484e      	ldr	r0, [pc, #312]	; (16ed0 <hci_tx_thread+0x160>)
   16d96:	f04f 32ff 	mov.w	r2, #4294967295
   16d9a:	f04f 33ff 	mov.w	r3, #4294967295
   16d9e:	4629      	mov	r1, r5
   16da0:	f008 f964 	bl	1f06c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16da4:	b160      	cbz	r0, 16dc0 <hci_tx_thread+0x50>
   16da6:	494b      	ldr	r1, [pc, #300]	; (16ed4 <hci_tx_thread+0x164>)
   16da8:	484b      	ldr	r0, [pc, #300]	; (16ed8 <hci_tx_thread+0x168>)
   16daa:	f640 13e6 	movw	r3, #2534	; 0x9e6
   16dae:	464a      	mov	r2, r9
   16db0:	f00d f90c 	bl	23fcc <assert_print>
   16db4:	4040      	eors	r0, r0
   16db6:	f380 8811 	msr	BASEPRI, r0
   16dba:	f04f 0003 	mov.w	r0, #3
   16dbe:	df02      	svc	2
{
   16dc0:	4e43      	ldr	r6, [pc, #268]	; (16ed0 <hci_tx_thread+0x160>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16dc2:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   16dc6:	b915      	cbnz	r5, 16dce <hci_tx_thread+0x5e>
	z_impl_k_yield();
   16dc8:	f007 fe2c 	bl	1ea24 <z_impl_k_yield>
	while (1) {
   16dcc:	e7d8      	b.n	16d80 <hci_tx_thread+0x10>
		switch (ev->state) {
   16dce:	68f3      	ldr	r3, [r6, #12]
   16dd0:	f3c3 3386 	ubfx	r3, r3, #14, #7
   16dd4:	2b01      	cmp	r3, #1
   16dd6:	d960      	bls.n	16e9a <hci_tx_thread+0x12a>
   16dd8:	2b04      	cmp	r3, #4
   16dda:	d168      	bne.n	16eae <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16ddc:	7b33      	ldrb	r3, [r6, #12]
   16dde:	2b00      	cmp	r3, #0
   16de0:	d15e      	bne.n	16ea0 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   16de2:	483e      	ldr	r0, [pc, #248]	; (16edc <hci_tx_thread+0x16c>)
   16de4:	2200      	movs	r2, #0
   16de6:	2300      	movs	r3, #0
   16de8:	f00f f97f 	bl	260ea <net_buf_get>
	BT_ASSERT(buf);
   16dec:	4604      	mov	r4, r0
   16dee:	b960      	cbnz	r0, 16e0a <hci_tx_thread+0x9a>
   16df0:	493b      	ldr	r1, [pc, #236]	; (16ee0 <hci_tx_thread+0x170>)
   16df2:	4839      	ldr	r0, [pc, #228]	; (16ed8 <hci_tx_thread+0x168>)
   16df4:	f44f 6318 	mov.w	r3, #2432	; 0x980
   16df8:	464a      	mov	r2, r9
   16dfa:	f00d f8e7 	bl	23fcc <assert_print>
   16dfe:	4040      	eors	r0, r0
   16e00:	f380 8811 	msr	BASEPRI, r0
   16e04:	f04f 0003 	mov.w	r0, #3
   16e08:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   16e0a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 16f00 <hci_tx_thread+0x190>
	return z_impl_k_sem_take(sem, timeout);
   16e0e:	4835      	ldr	r0, [pc, #212]	; (16ee4 <hci_tx_thread+0x174>)
   16e10:	f04f 33ff 	mov.w	r3, #4294967295
   16e14:	f04f 32ff 	mov.w	r2, #4294967295
   16e18:	f007 fa62 	bl	1e2e0 <z_impl_k_sem_take>
   16e1c:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
   16e20:	b18b      	cbz	r3, 16e46 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   16e22:	4b31      	ldr	r3, [pc, #196]	; (16ee8 <hci_tx_thread+0x178>)
   16e24:	617b      	str	r3, [r7, #20]
   16e26:	2302      	movs	r3, #2
   16e28:	613b      	str	r3, [r7, #16]
   16e2a:	4830      	ldr	r0, [pc, #192]	; (16eec <hci_tx_thread+0x17c>)
   16e2c:	f107 0210 	add.w	r2, r7, #16
   16e30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16e34:	f00d febe 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   16e38:	f8db 0130 	ldr.w	r0, [fp, #304]	; 0x130
   16e3c:	f004 f804 	bl	1ae48 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16e40:	2300      	movs	r3, #0
   16e42:	f8cb 3130 	str.w	r3, [fp, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   16e46:	4620      	mov	r0, r4
   16e48:	f00f f984 	bl	26154 <net_buf_ref>
   16e4c:	f8cb 0130 	str.w	r0, [fp, #304]	; 0x130
	err = bt_send(buf);
   16e50:	4620      	mov	r0, r4
   16e52:	f7ff feeb 	bl	16c2c <bt_send>
	if (err) {
   16e56:	b300      	cbz	r0, 16e9a <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   16e58:	46eb      	mov	fp, sp
   16e5a:	b088      	sub	sp, #32
   16e5c:	466a      	mov	r2, sp
   16e5e:	4b24      	ldr	r3, [pc, #144]	; (16ef0 <hci_tx_thread+0x180>)
   16e60:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16e64:	2303      	movs	r3, #3
   16e66:	f842 3f10 	str.w	r3, [r2, #16]!
   16e6a:	4820      	ldr	r0, [pc, #128]	; (16eec <hci_tx_thread+0x17c>)
   16e6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16e70:	f00d fea0 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16e74:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   16e76:	481b      	ldr	r0, [pc, #108]	; (16ee4 <hci_tx_thread+0x174>)
   16e78:	f007 fa0c 	bl	1e294 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16e7c:	4620      	mov	r0, r4
   16e7e:	f003 ff29 	bl	1acd4 <net_buf_id>
   16e82:	4b1c      	ldr	r3, [pc, #112]	; (16ef4 <hci_tx_thread+0x184>)
   16e84:	220c      	movs	r2, #12
   16e86:	fb02 3000 	mla	r0, r2, r0, r3
   16e8a:	211f      	movs	r1, #31
   16e8c:	8840      	ldrh	r0, [r0, #2]
   16e8e:	4622      	mov	r2, r4
   16e90:	f7ff fa4a 	bl	16328 <hci_cmd_done>
		net_buf_unref(buf);
   16e94:	4620      	mov	r0, r4
   16e96:	f003 ffd7 	bl	1ae48 <net_buf_unref>
	for (; count; ev++, count--) {
   16e9a:	3614      	adds	r6, #20
   16e9c:	3d01      	subs	r5, #1
   16e9e:	e792      	b.n	16dc6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16ea0:	2b01      	cmp	r3, #1
   16ea2:	d1fa      	bne.n	16e9a <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   16ea4:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   16ea6:	3838      	subs	r0, #56	; 0x38
   16ea8:	f001 fe70 	bl	18b8c <bt_conn_process_tx>
   16eac:	e7f5      	b.n	16e9a <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16eae:	466c      	mov	r4, sp
   16eb0:	b088      	sub	sp, #32
   16eb2:	466a      	mov	r2, sp
   16eb4:	4910      	ldr	r1, [pc, #64]	; (16ef8 <hci_tx_thread+0x188>)
   16eb6:	480d      	ldr	r0, [pc, #52]	; (16eec <hci_tx_thread+0x17c>)
		switch (ev->state) {
   16eb8:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16ebc:	f842 af10 	str.w	sl, [r2, #16]!
   16ec0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16ec4:	f00d fe76 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16ec8:	46a5      	mov	sp, r4
   16eca:	e7e6      	b.n	16e9a <hci_tx_thread+0x12a>
   16ecc:	200005b8 	.word	0x200005b8
   16ed0:	200005a4 	.word	0x200005a4
   16ed4:	00029ad4 	.word	0x00029ad4
   16ed8:	00029994 	.word	0x00029994
   16edc:	200004c4 	.word	0x200004c4
   16ee0:	0002a62e 	.word	0x0002a62e
   16ee4:	200004a0 	.word	0x200004a0
   16ee8:	00029c05 	.word	0x00029c05
   16eec:	00027fac 	.word	0x00027fac
   16ef0:	00029be3 	.word	0x00029be3
   16ef4:	200035b4 	.word	0x200035b4
   16ef8:	00029c20 	.word	0x00029c20
   16efc:	00029947 	.word	0x00029947
   16f00:	20000388 	.word	0x20000388

00016f04 <hci_event_prio>:
{
   16f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f08:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   16f0a:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   16f0e:	4630      	mov	r0, r6
   16f10:	f00f f97d 	bl	2620e <net_buf_simple_headroom>
	state->len = buf->len;
   16f14:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16f18:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16f1c:	4605      	mov	r5, r0
   16f1e:	d80c      	bhi.n	16f3a <hci_event_prio+0x36>
   16f20:	4a1c      	ldr	r2, [pc, #112]	; (16f94 <hci_event_prio+0x90>)
   16f22:	491d      	ldr	r1, [pc, #116]	; (16f98 <hci_event_prio+0x94>)
   16f24:	481d      	ldr	r0, [pc, #116]	; (16f9c <hci_event_prio+0x98>)
   16f26:	f640 537b 	movw	r3, #3451	; 0xd7b
   16f2a:	f00d f84f 	bl	23fcc <assert_print>
   16f2e:	4040      	eors	r0, r0
   16f30:	f380 8811 	msr	BASEPRI, r0
   16f34:	f04f 0003 	mov.w	r0, #3
   16f38:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   16f3a:	4630      	mov	r0, r6
   16f3c:	2102      	movs	r1, #2
   16f3e:	f00f f956 	bl	261ee <net_buf_simple_pull_mem>
   16f42:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16f44:	7800      	ldrb	r0, [r0, #0]
   16f46:	f00d fe07 	bl	24b58 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16f4a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16f4c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16f4e:	d40c      	bmi.n	16f6a <hci_event_prio+0x66>
   16f50:	4a10      	ldr	r2, [pc, #64]	; (16f94 <hci_event_prio+0x90>)
   16f52:	4913      	ldr	r1, [pc, #76]	; (16fa0 <hci_event_prio+0x9c>)
   16f54:	4811      	ldr	r0, [pc, #68]	; (16f9c <hci_event_prio+0x98>)
   16f56:	f640 537f 	movw	r3, #3455	; 0xd7f
   16f5a:	f00d f837 	bl	23fcc <assert_print>
   16f5e:	4040      	eors	r0, r0
   16f60:	f380 8811 	msr	BASEPRI, r0
   16f64:	f04f 0003 	mov.w	r0, #3
   16f68:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16f6a:	2305      	movs	r3, #5
   16f6c:	4a0d      	ldr	r2, [pc, #52]	; (16fa4 <hci_event_prio+0xa0>)
   16f6e:	7838      	ldrb	r0, [r7, #0]
   16f70:	4621      	mov	r1, r4
   16f72:	f7ff f89f 	bl	160b4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16f76:	07b3      	lsls	r3, r6, #30
   16f78:	d507      	bpl.n	16f8a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   16f7a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   16f7c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   16f80:	fa13 f585 	uxtah	r5, r3, r5
   16f84:	60e5      	str	r5, [r4, #12]
}
   16f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16f8a:	4620      	mov	r0, r4
}
   16f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16f90:	f003 bf5a 	b.w	1ae48 <net_buf_unref>
   16f94:	00029947 	.word	0x00029947
   16f98:	0002997b 	.word	0x0002997b
   16f9c:	00029994 	.word	0x00029994
   16fa0:	00029c41 	.word	0x00029c41
   16fa4:	000284cc 	.word	0x000284cc

00016fa8 <bt_recv>:
{
   16fa8:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16faa:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   16fac:	2b01      	cmp	r3, #1
{
   16fae:	af00      	add	r7, sp, #0
   16fb0:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   16fb2:	d006      	beq.n	16fc2 <bt_recv+0x1a>
   16fb4:	2b03      	cmp	r3, #3
   16fb6:	d112      	bne.n	16fde <bt_recv+0x36>
			rx_queue_put(buf);
   16fb8:	f7fe ffa8 	bl	15f0c <rx_queue_put>
		return 0;
   16fbc:	2000      	movs	r0, #0
}
   16fbe:	46bd      	mov	sp, r7
   16fc0:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16fc2:	68c3      	ldr	r3, [r0, #12]
   16fc4:	7818      	ldrb	r0, [r3, #0]
   16fc6:	f00d fdc7 	bl	24b58 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16fca:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16fcc:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16fce:	d502      	bpl.n	16fd6 <bt_recv+0x2e>
			hci_event_prio(buf);
   16fd0:	4620      	mov	r0, r4
   16fd2:	f7ff ff97 	bl	16f04 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16fd6:	07ab      	lsls	r3, r5, #30
   16fd8:	d5f0      	bpl.n	16fbc <bt_recv+0x14>
			rx_queue_put(buf);
   16fda:	4620      	mov	r0, r4
   16fdc:	e7ec      	b.n	16fb8 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16fde:	466d      	mov	r5, sp
   16fe0:	b088      	sub	sp, #32
   16fe2:	466a      	mov	r2, sp
   16fe4:	4908      	ldr	r1, [pc, #32]	; (17008 <bt_recv+0x60>)
   16fe6:	4809      	ldr	r0, [pc, #36]	; (1700c <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   16fe8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16fec:	2303      	movs	r3, #3
   16fee:	f842 3f10 	str.w	r3, [r2, #16]!
   16ff2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16ff6:	f00d fddd 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16ffa:	4620      	mov	r0, r4
   16ffc:	46ad      	mov	sp, r5
   16ffe:	f003 ff23 	bl	1ae48 <net_buf_unref>
		return -EINVAL;
   17002:	f06f 0015 	mvn.w	r0, #21
   17006:	e7da      	b.n	16fbe <bt_recv+0x16>
   17008:	00029c5a 	.word	0x00029c5a
   1700c:	00027fac 	.word	0x00027fac

00017010 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   17010:	4a08      	ldr	r2, [pc, #32]	; (17034 <bt_hci_driver_register+0x24>)
{
   17012:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   17014:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   17018:	b930      	cbnz	r0, 17028 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1701a:	68d9      	ldr	r1, [r3, #12]
   1701c:	b139      	cbz	r1, 1702e <bt_hci_driver_register+0x1e>
   1701e:	6959      	ldr	r1, [r3, #20]
   17020:	b129      	cbz	r1, 1702e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   17022:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   17026:	4770      	bx	lr
		return -EALREADY;
   17028:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1702c:	4770      	bx	lr
		return -EINVAL;
   1702e:	f06f 0015 	mvn.w	r0, #21
}
   17032:	4770      	bx	lr
   17034:	20000388 	.word	0x20000388

00017038 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17038:	4801      	ldr	r0, [pc, #4]	; (17040 <bt_finalize_init+0x8>)
   1703a:	2104      	movs	r1, #4
   1703c:	f00d bd9f 	b.w	24b7e <atomic_or>
   17040:	20000454 	.word	0x20000454

00017044 <bt_init>:
{
   17044:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   17046:	4dbe      	ldr	r5, [pc, #760]	; (17340 <bt_init+0x2fc>)
   17048:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   1704c:	6899      	ldr	r1, [r3, #8]
   1704e:	f011 0101 	ands.w	r1, r1, #1
{
   17052:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   17054:	d121      	bne.n	1709a <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   17056:	aa02      	add	r2, sp, #8
   17058:	f640 4003 	movw	r0, #3075	; 0xc03
   1705c:	f7ff fb70 	bl	16740 <bt_hci_cmd_send_sync>
		if (err) {
   17060:	4604      	mov	r4, r0
   17062:	2800      	cmp	r0, #0
   17064:	d172      	bne.n	1714c <bt_init+0x108>
		hci_reset_complete(rsp);
   17066:	9802      	ldr	r0, [sp, #8]
	uint8_t status = buf->data[0];
   17068:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   1706a:	781b      	ldrb	r3, [r3, #0]
   1706c:	b99b      	cbnz	r3, 17096 <bt_init+0x52>
   1706e:	f3bf 8f5b 	dmb	ish
   17072:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   17076:	f3bf 8f5b 	dmb	ish
   1707a:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1707e:	f003 0309 	and.w	r3, r3, #9
   17082:	f3bf 8f5b 	dmb	ish
   17086:	e852 1f00 	ldrex	r1, [r2]
   1708a:	e842 3400 	strex	r4, r3, [r2]
   1708e:	2c00      	cmp	r4, #0
   17090:	d1f9      	bne.n	17086 <bt_init+0x42>
   17092:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   17096:	f003 fed7 	bl	1ae48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1709a:	aa02      	add	r2, sp, #8
   1709c:	2100      	movs	r1, #0
   1709e:	f241 0003 	movw	r0, #4099	; 0x1003
   170a2:	f7ff fb4d 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   170a6:	4604      	mov	r4, r0
   170a8:	2800      	cmp	r0, #0
   170aa:	d14f      	bne.n	1714c <bt_init+0x108>
	read_local_features_complete(rsp);
   170ac:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   170ae:	4ea5      	ldr	r6, [pc, #660]	; (17344 <bt_init+0x300>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   170b0:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   170b2:	f8d2 0001 	ldr.w	r0, [r2, #1]
   170b6:	f8d2 1005 	ldr.w	r1, [r2, #5]
   170ba:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   170bc:	4618      	mov	r0, r3
   170be:	f003 fec3 	bl	1ae48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   170c2:	4621      	mov	r1, r4
   170c4:	aa02      	add	r2, sp, #8
   170c6:	f241 0001 	movw	r0, #4097	; 0x1001
   170ca:	f7ff fb39 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   170ce:	4604      	mov	r4, r0
   170d0:	2800      	cmp	r0, #0
   170d2:	d13b      	bne.n	1714c <bt_init+0x108>
	read_local_ver_complete(rsp);
   170d4:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   170d6:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   170d8:	785a      	ldrb	r2, [r3, #1]
   170da:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   170de:	885a      	ldrh	r2, [r3, #2]
   170e0:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   170e4:	791a      	ldrb	r2, [r3, #4]
   170e6:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   170ea:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   170ee:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   170f2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   170f6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   170fa:	f003 fea5 	bl	1ae48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   170fe:	4621      	mov	r1, r4
   17100:	aa02      	add	r2, sp, #8
   17102:	f241 0002 	movw	r0, #4098	; 0x1002
   17106:	f7ff fb1b 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   1710a:	4604      	mov	r4, r0
   1710c:	b9f0      	cbnz	r0, 1714c <bt_init+0x108>
	read_supported_commands_complete(rsp);
   1710e:	9f02      	ldr	r7, [sp, #8]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   17110:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   17112:	1c53      	adds	r3, r2, #1
   17114:	3241      	adds	r2, #65	; 0x41
   17116:	6818      	ldr	r0, [r3, #0]
   17118:	6859      	ldr	r1, [r3, #4]
   1711a:	4634      	mov	r4, r6
   1711c:	c403      	stmia	r4!, {r0, r1}
   1711e:	3308      	adds	r3, #8
   17120:	4293      	cmp	r3, r2
   17122:	4626      	mov	r6, r4
   17124:	d1f7      	bne.n	17116 <bt_init+0xd2>
	net_buf_unref(rsp);
   17126:	4638      	mov	r0, r7
   17128:	f003 fe8e 	bl	1ae48 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1712c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   17130:	065e      	lsls	r6, r3, #25
   17132:	d40e      	bmi.n	17152 <bt_init+0x10e>
		LOG_ERR("Non-LE capable controller detected!");
   17134:	4b84      	ldr	r3, [pc, #528]	; (17348 <bt_init+0x304>)
   17136:	9307      	str	r3, [sp, #28]
   17138:	4884      	ldr	r0, [pc, #528]	; (1734c <bt_init+0x308>)
   1713a:	2302      	movs	r3, #2
   1713c:	aa06      	add	r2, sp, #24
   1713e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   17142:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   17146:	9306      	str	r3, [sp, #24]
   17148:	f00d fd34 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   1714c:	4620      	mov	r0, r4
   1714e:	b009      	add	sp, #36	; 0x24
   17150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   17152:	aa02      	add	r2, sp, #8
   17154:	2100      	movs	r1, #0
   17156:	f242 0003 	movw	r0, #8195	; 0x2003
   1715a:	f7ff faf1 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   1715e:	4604      	mov	r4, r0
   17160:	2800      	cmp	r0, #0
   17162:	d1f3      	bne.n	1714c <bt_init+0x108>
	read_le_features_complete(rsp);
   17164:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   17166:	4e7a      	ldr	r6, [pc, #488]	; (17350 <bt_init+0x30c>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   17168:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1716a:	f8d2 0001 	ldr.w	r0, [r2, #1]
   1716e:	f8d2 1005 	ldr.w	r1, [r2, #5]
   17172:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   17174:	4618      	mov	r0, r3
   17176:	f003 fe67 	bl	1ae48 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1717a:	4621      	mov	r1, r4
   1717c:	aa02      	add	r2, sp, #8
   1717e:	f242 0002 	movw	r0, #8194	; 0x2002
   17182:	f7ff fadd 	bl	16740 <bt_hci_cmd_send_sync>
		if (err) {
   17186:	4604      	mov	r4, r0
   17188:	2800      	cmp	r0, #0
   1718a:	d1df      	bne.n	1714c <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
   1718c:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1718e:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   17190:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17194:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   17198:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1719a:	b129      	cbz	r1, 171a8 <bt_init+0x164>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1719c:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1719e:	4611      	mov	r1, r2
   171a0:	f106 0028 	add.w	r0, r6, #40	; 0x28
   171a4:	f00f fcd7 	bl	26b56 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   171a8:	4620      	mov	r0, r4
   171aa:	f003 fe4d 	bl	1ae48 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   171ae:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   171b2:	f016 0620 	ands.w	r6, r6, #32
   171b6:	d118      	bne.n	171ea <bt_init+0x1a6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   171b8:	2102      	movs	r1, #2
   171ba:	f640 406d 	movw	r0, #3181	; 0xc6d
   171be:	f7ff fa85 	bl	166cc <bt_hci_cmd_create>
		if (!buf) {
   171c2:	4604      	mov	r4, r0
   171c4:	2800      	cmp	r0, #0
   171c6:	f000 80a9 	beq.w	1731c <bt_init+0x2d8>
	return net_buf_simple_add(&buf->b, len);
   171ca:	2102      	movs	r1, #2
   171cc:	300c      	adds	r0, #12
   171ce:	f00e ffe7 	bl	261a0 <net_buf_simple_add>
		cp_le->le = 0x01;
   171d2:	2301      	movs	r3, #1
   171d4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   171d6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   171d8:	4621      	mov	r1, r4
   171da:	4632      	mov	r2, r6
   171dc:	f640 406d 	movw	r0, #3181	; 0xc6d
   171e0:	f7ff faae 	bl	16740 <bt_hci_cmd_send_sync>
		if (err) {
   171e4:	4604      	mov	r4, r0
   171e6:	2800      	cmp	r0, #0
   171e8:	d1b0      	bne.n	1714c <bt_init+0x108>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   171ea:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   171ee:	071c      	lsls	r4, r3, #28
   171f0:	d512      	bpl.n	17218 <bt_init+0x1d4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   171f2:	aa02      	add	r2, sp, #8
   171f4:	2100      	movs	r1, #0
   171f6:	f242 001c 	movw	r0, #8220	; 0x201c
   171fa:	f7ff faa1 	bl	16740 <bt_hci_cmd_send_sync>
		if (err) {
   171fe:	4604      	mov	r4, r0
   17200:	2800      	cmp	r0, #0
   17202:	d1a3      	bne.n	1714c <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   17204:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   17206:	68c3      	ldr	r3, [r0, #12]
   17208:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1720c:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   17210:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   17214:	f003 fe18 	bl	1ae48 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   17218:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1721c:	0698      	lsls	r0, r3, #26
   1721e:	d523      	bpl.n	17268 <bt_init+0x224>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17220:	a901      	add	r1, sp, #4
   17222:	f10d 0002 	add.w	r0, sp, #2
   17226:	f7ff fb07 	bl	16838 <hci_le_read_max_data_len>
		if (err) {
   1722a:	4604      	mov	r4, r0
   1722c:	2800      	cmp	r0, #0
   1722e:	d18d      	bne.n	1714c <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   17230:	2104      	movs	r1, #4
   17232:	f242 0024 	movw	r0, #8228	; 0x2024
   17236:	f7ff fa49 	bl	166cc <bt_hci_cmd_create>
		if (!buf) {
   1723a:	4606      	mov	r6, r0
   1723c:	2800      	cmp	r0, #0
   1723e:	d06d      	beq.n	1731c <bt_init+0x2d8>
   17240:	2104      	movs	r1, #4
   17242:	300c      	adds	r0, #12
   17244:	f00e ffac 	bl	261a0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   17248:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1724c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1724e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17252:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   17254:	4622      	mov	r2, r4
   17256:	4631      	mov	r1, r6
   17258:	f242 0024 	movw	r0, #8228	; 0x2024
   1725c:	f7ff fa70 	bl	16740 <bt_hci_cmd_send_sync>
		if (err) {
   17260:	4604      	mov	r4, r0
   17262:	2800      	cmp	r0, #0
   17264:	f47f af72 	bne.w	1714c <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   17268:	2108      	movs	r1, #8
   1726a:	f242 0001 	movw	r0, #8193	; 0x2001
   1726e:	f7ff fa2d 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   17272:	4604      	mov	r4, r0
   17274:	2800      	cmp	r0, #0
   17276:	d051      	beq.n	1731c <bt_init+0x2d8>
   17278:	2108      	movs	r1, #8
   1727a:	300c      	adds	r0, #12
   1727c:	f00e ff90 	bl	261a0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   17280:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   17284:	f012 0f02 	tst.w	r2, #2
   17288:	bf14      	ite	ne
   1728a:	232f      	movne	r3, #47	; 0x2f
   1728c:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1728e:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   17290:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   17294:	bf48      	it	mi
   17296:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1729a:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1729e:	bf18      	it	ne
   172a0:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   172a4:	2200      	movs	r2, #0
   172a6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   172a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   172ac:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   172ae:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   172b0:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   172b2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   172b4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   172b6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   172b8:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   172ba:	4621      	mov	r1, r4
   172bc:	f242 0001 	movw	r0, #8193	; 0x2001
   172c0:	f7ff fa3e 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   172c4:	4604      	mov	r4, r0
   172c6:	2800      	cmp	r0, #0
   172c8:	f47f af40 	bne.w	1714c <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   172cc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   172d0:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   172d4:	069a      	lsls	r2, r3, #26
   172d6:	d424      	bmi.n	17322 <bt_init+0x2de>
	if (bt_dev.le.acl_mtu) {
   172d8:	b9c9      	cbnz	r1, 1730e <bt_init+0x2ca>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   172da:	aa02      	add	r2, sp, #8
   172dc:	f241 0005 	movw	r0, #4101	; 0x1005
   172e0:	f7ff fa2e 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   172e4:	4604      	mov	r4, r0
   172e6:	2800      	cmp	r0, #0
   172e8:	f47f af30 	bne.w	1714c <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   172ec:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   172f0:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
   172f2:	b94b      	cbnz	r3, 17308 <bt_init+0x2c4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   172f4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   172f6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   172fa:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   172fe:	889a      	ldrh	r2, [r3, #4]
   17300:	4814      	ldr	r0, [pc, #80]	; (17354 <bt_init+0x310>)
   17302:	4611      	mov	r1, r2
   17304:	f00f fc27 	bl	26b56 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   17308:	4620      	mov	r0, r4
   1730a:	f003 fd9d 	bl	1ae48 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1730e:	2108      	movs	r1, #8
   17310:	f640 4001 	movw	r0, #3073	; 0xc01
   17314:	f7ff f9da 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   17318:	4604      	mov	r4, r0
   1731a:	b9f8      	cbnz	r0, 1735c <bt_init+0x318>
		return -ENOBUFS;
   1731c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17320:	e714      	b.n	1714c <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   17322:	2900      	cmp	r1, #0
   17324:	d1f3      	bne.n	1730e <bt_init+0x2ca>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   17326:	4b0c      	ldr	r3, [pc, #48]	; (17358 <bt_init+0x314>)
   17328:	9307      	str	r3, [sp, #28]
   1732a:	4808      	ldr	r0, [pc, #32]	; (1734c <bt_init+0x308>)
   1732c:	2302      	movs	r3, #2
   1732e:	aa06      	add	r2, sp, #24
   17330:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17334:	9306      	str	r3, [sp, #24]
		return -EIO;
   17336:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
   1733a:	f00d fc3b 	bl	24bb4 <z_log_msg_static_create.constprop.0>
	if (err) {
   1733e:	e705      	b.n	1714c <bt_init+0x108>
   17340:	20000388 	.word	0x20000388
   17344:	200003f8 	.word	0x200003f8
   17348:	00029c6e 	.word	0x00029c6e
   1734c:	00027fac 	.word	0x00027fac
   17350:	20000458 	.word	0x20000458
   17354:	20000488 	.word	0x20000488
   17358:	00029c92 	.word	0x00029c92
   1735c:	2108      	movs	r1, #8
   1735e:	300c      	adds	r0, #12
   17360:	f00e ff1e 	bl	261a0 <net_buf_simple_add>
	dst[0] = val;
   17364:	2310      	movs	r3, #16
   17366:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   17368:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   1736a:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   1736c:	7043      	strb	r3, [r0, #1]
   1736e:	2602      	movs	r6, #2
   17370:	2320      	movs	r3, #32
	dst[0] = val;
   17372:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   17374:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   17376:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   17378:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1737a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1737c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1737e:	4621      	mov	r1, r4
   17380:	f640 4001 	movw	r0, #3073	; 0xc01
   17384:	f7ff f9dc 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   17388:	4604      	mov	r4, r0
   1738a:	2800      	cmp	r0, #0
   1738c:	f47f aede 	bne.w	1714c <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   17390:	4601      	mov	r1, r0
   17392:	aa01      	add	r2, sp, #4
   17394:	f64f 4001 	movw	r0, #64513	; 0xfc01
   17398:	f7ff f9d2 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   1739c:	4604      	mov	r4, r0
   1739e:	b1b8      	cbz	r0, 173d0 <bt_init+0x38c>
		LOG_WRN("Vendor HCI extensions not available");
   173a0:	4b20      	ldr	r3, [pc, #128]	; (17424 <bt_init+0x3e0>)
			LOG_WRN("Failed to read supported vendor features");
   173a2:	4821      	ldr	r0, [pc, #132]	; (17428 <bt_init+0x3e4>)
   173a4:	aa06      	add	r2, sp, #24
   173a6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   173aa:	e9cd 6306 	strd	r6, r3, [sp, #24]
   173ae:	f00d fc01 	bl	24bb4 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   173b2:	f000 fae1 	bl	17978 <bt_id_init>
	if (err) {
   173b6:	4604      	mov	r4, r0
   173b8:	2800      	cmp	r0, #0
   173ba:	f47f aec7 	bne.w	1714c <bt_init+0x108>
		err = bt_conn_init();
   173be:	f001 fc55 	bl	18c6c <bt_conn_init>
		if (err) {
   173c2:	4604      	mov	r4, r0
   173c4:	2800      	cmp	r0, #0
   173c6:	f47f aec1 	bne.w	1714c <bt_init+0x108>
	bt_finalize_init();
   173ca:	f7ff fe35 	bl	17038 <bt_finalize_init>
	return 0;
   173ce:	e6bd      	b.n	1714c <bt_init+0x108>
	net_buf_unref(rsp);
   173d0:	9801      	ldr	r0, [sp, #4]
   173d2:	f003 fd39 	bl	1ae48 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   173d6:	4621      	mov	r1, r4
   173d8:	aa01      	add	r2, sp, #4
   173da:	f64f 4002 	movw	r0, #64514	; 0xfc02
   173de:	f7ff f9af 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   173e2:	4604      	mov	r4, r0
   173e4:	b108      	cbz	r0, 173ea <bt_init+0x3a6>
		LOG_WRN("Failed to read supported vendor commands");
   173e6:	4b11      	ldr	r3, [pc, #68]	; (1742c <bt_init+0x3e8>)
   173e8:	e7db      	b.n	173a2 <bt_init+0x35e>
	rp.cmds = (void *)rsp->data;
   173ea:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   173ec:	68c3      	ldr	r3, [r0, #12]
   173ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   173f2:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   173f6:	f003 fd27 	bl	1ae48 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   173fa:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   173fe:	075b      	lsls	r3, r3, #29
   17400:	d5d7      	bpl.n	173b2 <bt_init+0x36e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17402:	aa01      	add	r2, sp, #4
   17404:	4621      	mov	r1, r4
   17406:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1740a:	f7ff f999 	bl	16740 <bt_hci_cmd_send_sync>
		if (err) {
   1740e:	b108      	cbz	r0, 17414 <bt_init+0x3d0>
			LOG_WRN("Failed to read supported vendor features");
   17410:	4b07      	ldr	r3, [pc, #28]	; (17430 <bt_init+0x3ec>)
   17412:	e7c6      	b.n	173a2 <bt_init+0x35e>
		rp.feat = (void *)rsp->data;
   17414:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17416:	68c3      	ldr	r3, [r0, #12]
   17418:	785b      	ldrb	r3, [r3, #1]
   1741a:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   1741e:	f003 fd13 	bl	1ae48 <net_buf_unref>
   17422:	e7c6      	b.n	173b2 <bt_init+0x36e>
   17424:	00029cb5 	.word	0x00029cb5
   17428:	00027fac 	.word	0x00027fac
   1742c:	00029cd9 	.word	0x00029cd9
   17430:	00029d02 	.word	0x00029d02

00017434 <init_work>:
{
   17434:	b510      	push	{r4, lr}
	err = bt_init();
   17436:	f7ff fe05 	bl	17044 <bt_init>
	if (ready_cb) {
   1743a:	4b03      	ldr	r3, [pc, #12]	; (17448 <init_work+0x14>)
   1743c:	681b      	ldr	r3, [r3, #0]
   1743e:	b113      	cbz	r3, 17446 <init_work+0x12>
}
   17440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   17444:	4718      	bx	r3
}
   17446:	bd10      	pop	{r4, pc}
   17448:	200035cc 	.word	0x200035cc

0001744c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1744c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1744e:	4d3c      	ldr	r5, [pc, #240]	; (17540 <bt_enable+0xf4>)
{
   17450:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   17452:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   17456:	af08      	add	r7, sp, #32
   17458:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1745a:	b983      	cbnz	r3, 1747e <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   1745c:	4b39      	ldr	r3, [pc, #228]	; (17544 <bt_enable+0xf8>)
   1745e:	617b      	str	r3, [r7, #20]
   17460:	2302      	movs	r3, #2
   17462:	4839      	ldr	r0, [pc, #228]	; (17548 <bt_enable+0xfc>)
   17464:	613b      	str	r3, [r7, #16]
   17466:	f107 0210 	add.w	r2, r7, #16
   1746a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1746e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   17472:	f00d fb9f 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   17476:	4620      	mov	r0, r4
   17478:	371c      	adds	r7, #28
   1747a:	46bd      	mov	sp, r7
   1747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1747e:	f06f 0102 	mvn.w	r1, #2
   17482:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   17486:	f00d fb98 	bl	24bba <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1748a:	2101      	movs	r1, #1
   1748c:	f00d fb77 	bl	24b7e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17490:	ea10 0401 	ands.w	r4, r0, r1
   17494:	d150      	bne.n	17538 <bt_enable+0xec>
	ready_cb = cb;
   17496:	4b2d      	ldr	r3, [pc, #180]	; (1754c <bt_enable+0x100>)
   17498:	601e      	str	r6, [r3, #0]
   1749a:	460a      	mov	r2, r1
   1749c:	f505 708c 	add.w	r0, r5, #280	; 0x118
   174a0:	f00f fb59 	bl	26b56 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   174a4:	f505 709e 	add.w	r0, r5, #316	; 0x13c
   174a8:	f00f fb34 	bl	26b14 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   174ac:	2200      	movs	r2, #0
   174ae:	2300      	movs	r3, #0
   174b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   174b4:	f06f 0308 	mvn.w	r3, #8
   174b8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   174bc:	e9cd 4400 	strd	r4, r4, [sp]
   174c0:	4b23      	ldr	r3, [pc, #140]	; (17550 <bt_enable+0x104>)
   174c2:	4924      	ldr	r1, [pc, #144]	; (17554 <bt_enable+0x108>)
   174c4:	9404      	str	r4, [sp, #16]
   174c6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   174ca:	4823      	ldr	r0, [pc, #140]	; (17558 <bt_enable+0x10c>)
   174cc:	f006 fd54 	bl	1df78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   174d0:	4922      	ldr	r1, [pc, #136]	; (1755c <bt_enable+0x110>)
   174d2:	4821      	ldr	r0, [pc, #132]	; (17558 <bt_enable+0x10c>)
   174d4:	f00f fa8f 	bl	269f6 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   174d8:	4821      	ldr	r0, [pc, #132]	; (17560 <bt_enable+0x114>)
   174da:	f00f fbfc 	bl	26cd6 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   174de:	4921      	ldr	r1, [pc, #132]	; (17564 <bt_enable+0x118>)
   174e0:	481f      	ldr	r0, [pc, #124]	; (17560 <bt_enable+0x114>)
   174e2:	9400      	str	r4, [sp, #0]
   174e4:	f06f 0307 	mvn.w	r3, #7
   174e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   174ec:	f006 ffb8 	bl	1e460 <k_work_queue_start>
   174f0:	491d      	ldr	r1, [pc, #116]	; (17568 <bt_enable+0x11c>)
   174f2:	481b      	ldr	r0, [pc, #108]	; (17560 <bt_enable+0x114>)
   174f4:	f00f fa7f 	bl	269f6 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   174f8:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   174fc:	68db      	ldr	r3, [r3, #12]
   174fe:	4798      	blx	r3
	if (err) {
   17500:	4604      	mov	r4, r0
   17502:	b178      	cbz	r0, 17524 <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
   17504:	466d      	mov	r5, sp
   17506:	462a      	mov	r2, r5
   17508:	b088      	sub	sp, #32
   1750a:	4b18      	ldr	r3, [pc, #96]	; (1756c <bt_enable+0x120>)
   1750c:	e9c5 3005 	strd	r3, r0, [r5, #20]
   17510:	2303      	movs	r3, #3
   17512:	f842 3f10 	str.w	r3, [r2, #16]!
   17516:	480c      	ldr	r0, [pc, #48]	; (17548 <bt_enable+0xfc>)
   17518:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1751c:	f00d fb4a 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   17520:	46ad      	mov	sp, r5
		return err;
   17522:	e7a8      	b.n	17476 <bt_enable+0x2a>
	if (!cb) {
   17524:	b91e      	cbnz	r6, 1752e <bt_enable+0xe2>
		return bt_init();
   17526:	f7ff fd8d 	bl	17044 <bt_init>
   1752a:	4604      	mov	r4, r0
   1752c:	e7a3      	b.n	17476 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   1752e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   17532:	f006 ff8f 	bl	1e454 <k_work_submit>
	return 0;
   17536:	e79e      	b.n	17476 <bt_enable+0x2a>
		return -EALREADY;
   17538:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1753c:	e79b      	b.n	17476 <bt_enable+0x2a>
   1753e:	bf00      	nop
   17540:	20000388 	.word	0x20000388
   17544:	00029d2b 	.word	0x00029d2b
   17548:	00027fac 	.word	0x00027fac
   1754c:	200035cc 	.word	0x200035cc
   17550:	00016d71 	.word	0x00016d71
   17554:	20005800 	.word	0x20005800
   17558:	20002080 	.word	0x20002080
   1755c:	00029d44 	.word	0x00029d44
   17560:	20002148 	.word	0x20002148
   17564:	20005e80 	.word	0x20005e80
   17568:	00029d4a 	.word	0x00029d4a
   1756c:	00029d50 	.word	0x00029d50

00017570 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17570:	4b04      	ldr	r3, [pc, #16]	; (17584 <bt_is_ready+0x14>)
   17572:	f3bf 8f5b 	dmb	ish
   17576:	6818      	ldr	r0, [r3, #0]
   17578:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1757c:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17580:	4770      	bx	lr
   17582:	bf00      	nop
   17584:	20000454 	.word	0x20000454

00017588 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   17588:	4800      	ldr	r0, [pc, #0]	; (1758c <bt_get_name+0x4>)
   1758a:	4770      	bx	lr
   1758c:	00028ef0 	.word	0x00028ef0

00017590 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   17590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   17592:	4f0a      	ldr	r7, [pc, #40]	; (175bc <id_find+0x2c>)
{
   17594:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   17596:	2500      	movs	r5, #0
   17598:	79fb      	ldrb	r3, [r7, #7]
   1759a:	b2ec      	uxtb	r4, r5
   1759c:	42a3      	cmp	r3, r4
   1759e:	d802      	bhi.n	175a6 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   175a0:	f06f 0001 	mvn.w	r0, #1
   175a4:	e009      	b.n	175ba <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   175a6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   175aa:	4439      	add	r1, r7
   175ac:	4630      	mov	r0, r6
   175ae:	f00d fbb4 	bl	24d1a <bt_addr_le_eq>
   175b2:	3501      	adds	r5, #1
   175b4:	2800      	cmp	r0, #0
   175b6:	d0ef      	beq.n	17598 <id_find+0x8>
   175b8:	4620      	mov	r0, r4
}
   175ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   175bc:	20000388 	.word	0x20000388

000175c0 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   175c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   175c2:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   175c4:	460d      	mov	r5, r1
   175c6:	b171      	cbz	r1, 175e6 <id_create.constprop.0+0x26>
   175c8:	4912      	ldr	r1, [pc, #72]	; (17614 <id_create.constprop.0+0x54>)
   175ca:	4628      	mov	r0, r5
   175cc:	f00d fba5 	bl	24d1a <bt_addr_le_eq>
   175d0:	b948      	cbnz	r0, 175e6 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   175d2:	4811      	ldr	r0, [pc, #68]	; (17618 <id_create.constprop.0+0x58>)
   175d4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   175d8:	4629      	mov	r1, r5
   175da:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   175dc:	f00d fbaa 	bl	24d34 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   175e0:	2000      	movs	r0, #0
}
   175e2:	b003      	add	sp, #12
   175e4:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   175e6:	4668      	mov	r0, sp
   175e8:	f00d faa8 	bl	24b3c <bt_addr_le_create_static>
			if (err) {
   175ec:	2800      	cmp	r0, #0
   175ee:	d1f8      	bne.n	175e2 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   175f0:	4668      	mov	r0, sp
   175f2:	f7ff ffcd 	bl	17590 <id_find>
   175f6:	2800      	cmp	r0, #0
   175f8:	daf5      	bge.n	175e6 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   175fa:	4b07      	ldr	r3, [pc, #28]	; (17618 <id_create.constprop.0+0x58>)
   175fc:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   17600:	4418      	add	r0, r3
   17602:	4669      	mov	r1, sp
   17604:	f00d fb96 	bl	24d34 <bt_addr_le_copy>
		if (addr) {
   17608:	2d00      	cmp	r5, #0
   1760a:	d0e9      	beq.n	175e0 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1760c:	4601      	mov	r1, r0
   1760e:	4628      	mov	r0, r5
   17610:	e7e4      	b.n	175dc <id_create.constprop.0+0x1c>
   17612:	bf00      	nop
   17614:	000297b5 	.word	0x000297b5
   17618:	20000388 	.word	0x20000388

0001761c <set_random_address>:
{
   1761c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1761e:	4912      	ldr	r1, [pc, #72]	; (17668 <set_random_address+0x4c>)
   17620:	2206      	movs	r2, #6
   17622:	4605      	mov	r5, r0
   17624:	f00f feba 	bl	2739c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17628:	b1c8      	cbz	r0, 1765e <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1762a:	2106      	movs	r1, #6
   1762c:	f242 0005 	movw	r0, #8197	; 0x2005
   17630:	f7ff f84c 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   17634:	4604      	mov	r4, r0
   17636:	b1a0      	cbz	r0, 17662 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17638:	2206      	movs	r2, #6
   1763a:	4629      	mov	r1, r5
   1763c:	300c      	adds	r0, #12
   1763e:	f00e fdb5 	bl	261ac <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17642:	2200      	movs	r2, #0
   17644:	4621      	mov	r1, r4
   17646:	f242 0005 	movw	r0, #8197	; 0x2005
   1764a:	f7ff f879 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   1764e:	b938      	cbnz	r0, 17660 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   17650:	4805      	ldr	r0, [pc, #20]	; (17668 <set_random_address+0x4c>)
   17652:	4629      	mov	r1, r5
   17654:	f00d fb69 	bl	24d2a <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17658:	2301      	movs	r3, #1
   1765a:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   1765e:	2000      	movs	r0, #0
}
   17660:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   17662:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17666:	e7fb      	b.n	17660 <set_random_address+0x44>
   17668:	200003e9 	.word	0x200003e9

0001766c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1766c:	b570      	push	{r4, r5, r6, lr}
   1766e:	460d      	mov	r5, r1
   17670:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17672:	4604      	mov	r4, r0
   17674:	b920      	cbnz	r0, 17680 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   17676:	b31d      	cbz	r5, 176c0 <bt_id_create+0x54>
			return -EINVAL;
   17678:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   1767c:	b006      	add	sp, #24
   1767e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17680:	4921      	ldr	r1, [pc, #132]	; (17708 <bt_id_create+0x9c>)
   17682:	f00d fb4a 	bl	24d1a <bt_addr_le_eq>
   17686:	2800      	cmp	r0, #0
   17688:	d1f5      	bne.n	17676 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1768a:	7823      	ldrb	r3, [r4, #0]
   1768c:	2b01      	cmp	r3, #1
   1768e:	d104      	bne.n	1769a <bt_id_create+0x2e>
   17690:	79a3      	ldrb	r3, [r4, #6]
   17692:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17696:	2bc0      	cmp	r3, #192	; 0xc0
   17698:	d00a      	beq.n	176b0 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   1769a:	4b1c      	ldr	r3, [pc, #112]	; (1770c <bt_id_create+0xa0>)
   1769c:	9305      	str	r3, [sp, #20]
   1769e:	481c      	ldr	r0, [pc, #112]	; (17710 <bt_id_create+0xa4>)
   176a0:	2302      	movs	r3, #2
   176a2:	aa04      	add	r2, sp, #16
   176a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   176a8:	9304      	str	r3, [sp, #16]
   176aa:	f00d fb4a 	bl	24d42 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   176ae:	e7e3      	b.n	17678 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   176b0:	4620      	mov	r0, r4
   176b2:	f7ff ff6d 	bl	17590 <id_find>
   176b6:	2800      	cmp	r0, #0
   176b8:	dbdd      	blt.n	17676 <bt_id_create+0xa>
			return -EALREADY;
   176ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   176be:	e7dd      	b.n	1767c <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   176c0:	4d14      	ldr	r5, [pc, #80]	; (17714 <bt_id_create+0xa8>)
   176c2:	79eb      	ldrb	r3, [r5, #7]
   176c4:	2b01      	cmp	r3, #1
   176c6:	d01c      	beq.n	17702 <bt_id_create+0x96>
   176c8:	f3bf 8f5b 	dmb	ish
   176cc:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   176d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   176d4:	07db      	lsls	r3, r3, #31
   176d6:	d50b      	bpl.n	176f0 <bt_id_create+0x84>
	new_id = bt_dev.id_count;
   176d8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   176da:	4621      	mov	r1, r4
   176dc:	4630      	mov	r0, r6
   176de:	f7ff ff6f 	bl	175c0 <id_create.constprop.0>
	if (err) {
   176e2:	2800      	cmp	r0, #0
   176e4:	d1ca      	bne.n	1767c <bt_id_create+0x10>
		bt_dev.id_count++;
   176e6:	79eb      	ldrb	r3, [r5, #7]
   176e8:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   176ea:	4630      	mov	r0, r6
		bt_dev.id_count++;
   176ec:	71eb      	strb	r3, [r5, #7]
	return new_id;
   176ee:	e7c5      	b.n	1767c <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   176f0:	2c00      	cmp	r4, #0
   176f2:	d0c1      	beq.n	17678 <bt_id_create+0xc>
   176f4:	4904      	ldr	r1, [pc, #16]	; (17708 <bt_id_create+0x9c>)
   176f6:	4620      	mov	r0, r4
   176f8:	f00d fb0f 	bl	24d1a <bt_addr_le_eq>
   176fc:	2800      	cmp	r0, #0
   176fe:	d0eb      	beq.n	176d8 <bt_id_create+0x6c>
   17700:	e7ba      	b.n	17678 <bt_id_create+0xc>
		return -ENOMEM;
   17702:	f06f 000b 	mvn.w	r0, #11
   17706:	e7b9      	b.n	1767c <bt_id_create+0x10>
   17708:	000297b5 	.word	0x000297b5
   1770c:	00029d78 	.word	0x00029d78
   17710:	00027fb4 	.word	0x00027fb4
   17714:	20000388 	.word	0x20000388

00017718 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17718:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1771a:	4604      	mov	r4, r0
{
   1771c:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   1771e:	b960      	cbnz	r0, 1773a <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   17720:	4b1a      	ldr	r3, [pc, #104]	; (1778c <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   17722:	9307      	str	r3, [sp, #28]
   17724:	481a      	ldr	r0, [pc, #104]	; (17790 <bt_id_read_public_addr+0x78>)
   17726:	2302      	movs	r3, #2
   17728:	aa06      	add	r2, sp, #24
   1772a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1772e:	9306      	str	r3, [sp, #24]
   17730:	f00d fb07 	bl	24d42 <z_log_msg_static_create.constprop.0>
		return 0U;
   17734:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   17736:	b008      	add	sp, #32
   17738:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1773a:	aa01      	add	r2, sp, #4
   1773c:	2100      	movs	r1, #0
   1773e:	f241 0009 	movw	r0, #4105	; 0x1009
   17742:	f7fe fffd 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   17746:	4606      	mov	r6, r0
   17748:	b108      	cbz	r0, 1774e <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   1774a:	4b12      	ldr	r3, [pc, #72]	; (17794 <bt_id_read_public_addr+0x7c>)
   1774c:	e7e9      	b.n	17722 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   1774e:	9b01      	ldr	r3, [sp, #4]
   17750:	4911      	ldr	r1, [pc, #68]	; (17798 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17752:	68dd      	ldr	r5, [r3, #12]
   17754:	3501      	adds	r5, #1
   17756:	2206      	movs	r2, #6
   17758:	4628      	mov	r0, r5
   1775a:	f00f fe1f 	bl	2739c <memcmp>
   1775e:	b918      	cbnz	r0, 17768 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   17760:	9801      	ldr	r0, [sp, #4]
   17762:	f003 fb71 	bl	1ae48 <net_buf_unref>
		return 0U;
   17766:	e7e5      	b.n	17734 <bt_id_read_public_addr+0x1c>
   17768:	490c      	ldr	r1, [pc, #48]	; (1779c <bt_id_read_public_addr+0x84>)
   1776a:	2206      	movs	r2, #6
   1776c:	4628      	mov	r0, r5
   1776e:	f00f fe15 	bl	2739c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17772:	2800      	cmp	r0, #0
   17774:	d0f4      	beq.n	17760 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   17776:	4629      	mov	r1, r5
   17778:	1c60      	adds	r0, r4, #1
   1777a:	f00d fad6 	bl	24d2a <bt_addr_copy>
	net_buf_unref(rsp);
   1777e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17780:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   17782:	f003 fb61 	bl	1ae48 <net_buf_unref>
	return 1U;
   17786:	2001      	movs	r0, #1
   17788:	e7d5      	b.n	17736 <bt_id_read_public_addr+0x1e>
   1778a:	bf00      	nop
   1778c:	00029da6 	.word	0x00029da6
   17790:	00027fb4 	.word	0x00027fb4
   17794:	00029dbf 	.word	0x00029dbf
   17798:	000297c2 	.word	0x000297c2
   1779c:	000297bc 	.word	0x000297bc

000177a0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   177a0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   177a2:	4668      	mov	r0, sp
   177a4:	f7ff ffb8 	bl	17718 <bt_id_read_public_addr>
   177a8:	4b04      	ldr	r3, [pc, #16]	; (177bc <bt_setup_public_id_addr+0x1c>)
   177aa:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   177ac:	b118      	cbz	r0, 177b6 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   177ae:	4669      	mov	r1, sp
   177b0:	2000      	movs	r0, #0
   177b2:	f7ff ff05 	bl	175c0 <id_create.constprop.0>
}
   177b6:	b003      	add	sp, #12
   177b8:	f85d fb04 	ldr.w	pc, [sp], #4
   177bc:	20000388 	.word	0x20000388

000177c0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   177c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   177c2:	4b24      	ldr	r3, [pc, #144]	; (17854 <bt_read_static_addr+0x94>)
   177c4:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   177c8:	07db      	lsls	r3, r3, #31
{
   177ca:	b089      	sub	sp, #36	; 0x24
   177cc:	4605      	mov	r5, r0
   177ce:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   177d0:	d40d      	bmi.n	177ee <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   177d2:	4b21      	ldr	r3, [pc, #132]	; (17858 <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   177d4:	9307      	str	r3, [sp, #28]
   177d6:	4821      	ldr	r0, [pc, #132]	; (1785c <bt_read_static_addr+0x9c>)
   177d8:	2302      	movs	r3, #2
   177da:	aa06      	add	r2, sp, #24
   177dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   177e0:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   177e2:	9306      	str	r3, [sp, #24]
   177e4:	f00d faad 	bl	24d42 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   177e8:	4620      	mov	r0, r4
   177ea:	b009      	add	sp, #36	; 0x24
   177ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   177ee:	aa01      	add	r2, sp, #4
   177f0:	2100      	movs	r1, #0
   177f2:	f64f 4009 	movw	r0, #64521	; 0xfc09
   177f6:	f7fe ffa3 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   177fa:	4603      	mov	r3, r0
   177fc:	b108      	cbz	r0, 17802 <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   177fe:	4b18      	ldr	r3, [pc, #96]	; (17860 <bt_read_static_addr+0xa0>)
   17800:	e7e8      	b.n	177d4 <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   17802:	9801      	ldr	r0, [sp, #4]
   17804:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   17806:	7854      	ldrb	r4, [r2, #1]
   17808:	42b4      	cmp	r4, r6
   1780a:	bf28      	it	cs
   1780c:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   1780e:	3202      	adds	r2, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   17810:	2716      	movs	r7, #22
	for (i = 0; i < cnt; i++) {
   17812:	429c      	cmp	r4, r3
   17814:	dc0e      	bgt.n	17834 <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   17816:	f003 fb17 	bl	1ae48 <net_buf_unref>
	if (!cnt) {
   1781a:	2c00      	cmp	r4, #0
   1781c:	d1e4      	bne.n	177e8 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   1781e:	4b11      	ldr	r3, [pc, #68]	; (17864 <bt_read_static_addr+0xa4>)
   17820:	9307      	str	r3, [sp, #28]
   17822:	480e      	ldr	r0, [pc, #56]	; (1785c <bt_read_static_addr+0x9c>)
   17824:	2302      	movs	r3, #2
   17826:	aa06      	add	r2, sp, #24
   17828:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1782c:	9306      	str	r3, [sp, #24]
   1782e:	f00d fa88 	bl	24d42 <z_log_msg_static_create.constprop.0>
   17832:	e7d9      	b.n	177e8 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17834:	4611      	mov	r1, r2
   17836:	fb07 5603 	mla	r6, r7, r3, r5
   1783a:	f102 0c14 	add.w	ip, r2, #20
   1783e:	f851 eb04 	ldr.w	lr, [r1], #4
   17842:	f846 eb04 	str.w	lr, [r6], #4
   17846:	4561      	cmp	r1, ip
   17848:	d1f9      	bne.n	1783e <bt_read_static_addr+0x7e>
   1784a:	8809      	ldrh	r1, [r1, #0]
   1784c:	8031      	strh	r1, [r6, #0]
	for (i = 0; i < cnt; i++) {
   1784e:	3301      	adds	r3, #1
   17850:	3216      	adds	r2, #22
   17852:	e7de      	b.n	17812 <bt_read_static_addr+0x52>
   17854:	20000388 	.word	0x20000388
   17858:	00029ddd 	.word	0x00029ddd
   1785c:	00027fb4 	.word	0x00027fb4
   17860:	00029e09 	.word	0x00029e09
   17864:	00029e29 	.word	0x00029e29

00017868 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   17868:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1786a:	4d15      	ldr	r5, [pc, #84]	; (178c0 <bt_setup_random_id_addr+0x58>)
   1786c:	79ec      	ldrb	r4, [r5, #7]
{
   1786e:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   17870:	b92c      	cbnz	r4, 1787e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   17872:	2101      	movs	r1, #1
   17874:	a802      	add	r0, sp, #8
   17876:	f7ff ffa3 	bl	177c0 <bt_read_static_addr>
   1787a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1787c:	b9c0      	cbnz	r0, 178b0 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1787e:	2100      	movs	r1, #0
   17880:	4608      	mov	r0, r1
}
   17882:	b008      	add	sp, #32
   17884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   17888:	f7ff bef0 	b.w	1766c <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1788c:	ab02      	add	r3, sp, #8
   1788e:	fb06 3102 	mla	r1, r6, r2, r3
   17892:	f10d 0001 	add.w	r0, sp, #1
   17896:	f00d fa48 	bl	24d2a <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1789a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1789c:	4669      	mov	r1, sp
   1789e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   178a0:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   178a4:	f7ff fe8c 	bl	175c0 <id_create.constprop.0>
				if (err) {
   178a8:	3401      	adds	r4, #1
   178aa:	b110      	cbz	r0, 178b2 <bt_setup_random_id_addr+0x4a>
}
   178ac:	b008      	add	sp, #32
   178ae:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   178b0:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   178b2:	79eb      	ldrb	r3, [r5, #7]
   178b4:	b2e2      	uxtb	r2, r4
   178b6:	4293      	cmp	r3, r2
   178b8:	d8e8      	bhi.n	1788c <bt_setup_random_id_addr+0x24>
			return 0;
   178ba:	2000      	movs	r0, #0
   178bc:	e7f6      	b.n	178ac <bt_setup_random_id_addr+0x44>
   178be:	bf00      	nop
   178c0:	20000388 	.word	0x20000388

000178c4 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   178c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178c8:	4690      	mov	r8, r2
   178ca:	460e      	mov	r6, r1
   178cc:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   178ce:	4602      	mov	r2, r0
   178d0:	2800      	cmp	r0, #0
   178d2:	d04b      	beq.n	1796c <bt_id_set_adv_own_addr+0xa8>
   178d4:	2b00      	cmp	r3, #0
   178d6:	d049      	beq.n	1796c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   178d8:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   178da:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   178dc:	d531      	bpl.n	17942 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   178de:	4f25      	ldr	r7, [pc, #148]	; (17974 <bt_id_set_adv_own_addr+0xb0>)
   178e0:	f1b8 0f00 	cmp.w	r8, #0
   178e4:	d013      	beq.n	1790e <bt_id_set_adv_own_addr+0x4a>
   178e6:	0688      	lsls	r0, r1, #26
   178e8:	d40a      	bmi.n	17900 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   178ea:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   178ee:	5cfb      	ldrb	r3, [r7, r3]
   178f0:	2b01      	cmp	r3, #1
   178f2:	d015      	beq.n	17920 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   178f4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   178f6:	06b2      	lsls	r2, r6, #26
   178f8:	d50f      	bpl.n	1791a <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   178fa:	f043 0302 	orr.w	r3, r3, #2
   178fe:	e00b      	b.n	17918 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17900:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   17904:	0659      	lsls	r1, r3, #25
   17906:	d4f0      	bmi.n	178ea <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   17908:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1790c:	e006      	b.n	1791c <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1790e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17912:	5cfb      	ldrb	r3, [r7, r3]
   17914:	2b01      	cmp	r3, #1
   17916:	d003      	beq.n	17920 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   17918:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1791a:	2000      	movs	r0, #0
}
   1791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17920:	2107      	movs	r1, #7
   17922:	fb01 7104 	mla	r1, r1, r4, r7
   17926:	3101      	adds	r1, #1
   17928:	4610      	mov	r0, r2
   1792a:	f00d fa12 	bl	24d52 <bt_id_set_adv_random_addr>
				if (err) {
   1792e:	2800      	cmp	r0, #0
   17930:	d1f4      	bne.n	1791c <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   17932:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17936:	5d3b      	ldrb	r3, [r7, r4]
   17938:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1793a:	f1b8 0f00 	cmp.w	r8, #0
   1793e:	d0ec      	beq.n	1791a <bt_id_set_adv_own_addr+0x56>
   17940:	e7d9      	b.n	178f6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   17942:	074b      	lsls	r3, r1, #29
   17944:	d50e      	bpl.n	17964 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17946:	4e0b      	ldr	r6, [pc, #44]	; (17974 <bt_id_set_adv_own_addr+0xb0>)
   17948:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   1794c:	5df3      	ldrb	r3, [r6, r7]
   1794e:	2b01      	cmp	r3, #1
   17950:	d1e2      	bne.n	17918 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17952:	2107      	movs	r1, #7
   17954:	fb11 3104 	smlabb	r1, r1, r4, r3
   17958:	4431      	add	r1, r6
   1795a:	f00d f9fa 	bl	24d52 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1795e:	5df3      	ldrb	r3, [r6, r7]
   17960:	702b      	strb	r3, [r5, #0]
		if (err) {
   17962:	e7db      	b.n	1791c <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   17964:	f00d f9fd 	bl	24d62 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   17968:	2301      	movs	r3, #1
   1796a:	e7f9      	b.n	17960 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   1796c:	f06f 0015 	mvn.w	r0, #21
   17970:	e7d4      	b.n	1791c <bt_id_set_adv_own_addr+0x58>
   17972:	bf00      	nop
   17974:	20000388 	.word	0x20000388

00017978 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   17978:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1797a:	4d13      	ldr	r5, [pc, #76]	; (179c8 <bt_id_init+0x50>)
   1797c:	79eb      	ldrb	r3, [r5, #7]
{
   1797e:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   17980:	b11b      	cbz	r3, 1798a <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   17982:	2400      	movs	r4, #0
}
   17984:	4620      	mov	r0, r4
   17986:	b007      	add	sp, #28
   17988:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   1798a:	f7ff ff09 	bl	177a0 <bt_setup_public_id_addr>
		if (err) {
   1798e:	4604      	mov	r4, r0
   17990:	b150      	cbz	r0, 179a8 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   17992:	4b0e      	ldr	r3, [pc, #56]	; (179cc <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   17994:	9305      	str	r3, [sp, #20]
   17996:	480e      	ldr	r0, [pc, #56]	; (179d0 <bt_id_init+0x58>)
   17998:	2302      	movs	r3, #2
   1799a:	aa04      	add	r2, sp, #16
   1799c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   179a0:	9304      	str	r3, [sp, #16]
   179a2:	f00d f9ce 	bl	24d42 <z_log_msg_static_create.constprop.0>
			return err;
   179a6:	e7ed      	b.n	17984 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   179a8:	79eb      	ldrb	r3, [r5, #7]
   179aa:	2b00      	cmp	r3, #0
   179ac:	d1e9      	bne.n	17982 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   179ae:	f7ff ff5b 	bl	17868 <bt_setup_random_id_addr>
		if (err) {
   179b2:	4604      	mov	r4, r0
   179b4:	2800      	cmp	r0, #0
   179b6:	d1ec      	bne.n	17992 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   179b8:	1c68      	adds	r0, r5, #1
   179ba:	f7ff fe2f 	bl	1761c <set_random_address>
		if (err) {
   179be:	4604      	mov	r4, r0
   179c0:	2800      	cmp	r0, #0
   179c2:	d0df      	beq.n	17984 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   179c4:	4b03      	ldr	r3, [pc, #12]	; (179d4 <bt_id_init+0x5c>)
   179c6:	e7e5      	b.n	17994 <bt_id_init+0x1c>
   179c8:	20000388 	.word	0x20000388
   179cc:	00029e52 	.word	0x00029e52
   179d0:	00027fb4 	.word	0x00027fb4
   179d4:	00029e71 	.word	0x00029e71

000179d8 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   179d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179dc:	b089      	sub	sp, #36	; 0x24
   179de:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   179e0:	2120      	movs	r1, #32
{
   179e2:	9000      	str	r0, [sp, #0]
   179e4:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   179e6:	f7fe fe71 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   179ea:	4605      	mov	r5, r0
   179ec:	2800      	cmp	r0, #0
   179ee:	d05b      	beq.n	17aa8 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   179f0:	2120      	movs	r1, #32
   179f2:	300c      	adds	r0, #12
   179f4:	f00e fbd4 	bl	261a0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   179f8:	2220      	movs	r2, #32
   179fa:	2100      	movs	r1, #0
   179fc:	4681      	mov	r9, r0
   179fe:	f00f fceb 	bl	273d8 <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   17a02:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   17a06:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   17a0a:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   17a0c:	f8d4 8000 	ldr.w	r8, [r4]
   17a10:	2300      	movs	r3, #0
   17a12:	6862      	ldr	r2, [r4, #4]
   17a14:	4293      	cmp	r3, r2
   17a16:	d30c      	bcc.n	17a32 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   17a18:	3408      	adds	r4, #8
   17a1a:	45a2      	cmp	sl, r4
   17a1c:	d1f6      	bne.n	17a0c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17a1e:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   17a20:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17a24:	2200      	movs	r2, #0
   17a26:	4629      	mov	r1, r5
}
   17a28:	b009      	add	sp, #36	; 0x24
   17a2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17a2e:	f7fe be87 	b.w	16740 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   17a32:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   17a36:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   17a3a:	1cb0      	adds	r0, r6, #2
   17a3c:	1811      	adds	r1, r2, r0
   17a3e:	291f      	cmp	r1, #31
   17a40:	d91b      	bls.n	17a7a <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17a42:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   17a46:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17a4a:	d101      	bne.n	17a50 <hci_set_ad+0x78>
   17a4c:	2a00      	cmp	r2, #0
   17a4e:	dc12      	bgt.n	17a76 <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   17a50:	4b17      	ldr	r3, [pc, #92]	; (17ab0 <hci_set_ad+0xd8>)
   17a52:	9307      	str	r3, [sp, #28]
   17a54:	2302      	movs	r3, #2
   17a56:	9306      	str	r3, [sp, #24]
   17a58:	4816      	ldr	r0, [pc, #88]	; (17ab4 <hci_set_ad+0xdc>)
   17a5a:	2300      	movs	r3, #0
   17a5c:	aa06      	add	r2, sp, #24
   17a5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17a62:	f7fc fadd 	bl	14020 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   17a66:	4628      	mov	r0, r5
   17a68:	f003 f9ee 	bl	1ae48 <net_buf_unref>
					return -EINVAL;
   17a6c:	f06f 0015 	mvn.w	r0, #21
}
   17a70:	b009      	add	sp, #36	; 0x24
   17a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   17a76:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   17a7a:	b2d7      	uxtb	r7, r2
   17a7c:	1c79      	adds	r1, r7, #1
   17a7e:	f80b 1006 	strb.w	r1, [fp, r6]
   17a82:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   17a84:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17a86:	fa5b f080 	uxtab	r0, fp, r0
   17a8a:	f80b c001 	strb.w	ip, [fp, r1]
   17a8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   17a92:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   17a94:	3702      	adds	r7, #2
   17a96:	f00f fc91 	bl	273bc <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   17a9a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   17a9c:	4437      	add	r7, r6
   17a9e:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   17aa0:	3301      	adds	r3, #1
   17aa2:	f108 0808 	add.w	r8, r8, #8
   17aa6:	e7b4      	b.n	17a12 <hci_set_ad+0x3a>
		return -ENOBUFS;
   17aa8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17aac:	e7e0      	b.n	17a70 <hci_set_ad+0x98>
   17aae:	bf00      	nop
   17ab0:	00029e94 	.word	0x00029e94
   17ab4:	00027f84 	.word	0x00027f84

00017ab8 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17ab8:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   17aba:	4605      	mov	r5, r0
   17abc:	4b16      	ldr	r3, [pc, #88]	; (17b18 <le_adv_start_add_conn+0x60>)
   17abe:	f815 2b09 	ldrb.w	r2, [r5], #9
   17ac2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   17ac6:	4604      	mov	r4, r0
   17ac8:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   17aca:	2207      	movs	r2, #7
   17acc:	4913      	ldr	r1, [pc, #76]	; (17b1c <le_adv_start_add_conn+0x64>)
   17ace:	4628      	mov	r0, r5
   17ad0:	f00f fc64 	bl	2739c <memcmp>
   17ad4:	4603      	mov	r3, r0
   17ad6:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17ad8:	b96b      	cbnz	r3, 17af6 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   17ada:	4911      	ldr	r1, [pc, #68]	; (17b20 <le_adv_start_add_conn+0x68>)
   17adc:	f000 fec2 	bl	18864 <bt_conn_add_le>
		if (!conn) {
   17ae0:	4604      	mov	r4, r0
   17ae2:	b910      	cbnz	r0, 17aea <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   17ae4:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   17ae8:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   17aea:	2104      	movs	r1, #4
   17aec:	f000 fd14 	bl	18518 <bt_conn_set_state>
		*out_conn = conn;
   17af0:	6034      	str	r4, [r6, #0]
		return 0;
   17af2:	2000      	movs	r0, #0
   17af4:	e7f8      	b.n	17ae8 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   17af6:	4629      	mov	r1, r5
   17af8:	f000 feea 	bl	188d0 <bt_conn_exists_le>
   17afc:	b940      	cbnz	r0, 17b10 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   17afe:	7820      	ldrb	r0, [r4, #0]
   17b00:	4629      	mov	r1, r5
   17b02:	f000 feaf 	bl	18864 <bt_conn_add_le>
	if (!conn) {
   17b06:	4604      	mov	r4, r0
   17b08:	2800      	cmp	r0, #0
   17b0a:	d0eb      	beq.n	17ae4 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   17b0c:	2105      	movs	r1, #5
   17b0e:	e7ed      	b.n	17aec <le_adv_start_add_conn+0x34>
		return -EINVAL;
   17b10:	f06f 0015 	mvn.w	r0, #21
   17b14:	e7e8      	b.n	17ae8 <le_adv_start_add_conn+0x30>
   17b16:	bf00      	nop
   17b18:	20000388 	.word	0x20000388
   17b1c:	000297b5 	.word	0x000297b5
   17b20:	000297ae 	.word	0x000297ae

00017b24 <valid_adv_param>:
{
   17b24:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   17b26:	6843      	ldr	r3, [r0, #4]
{
   17b28:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   17b2a:	0558      	lsls	r0, r3, #21
   17b2c:	d501      	bpl.n	17b32 <valid_adv_param+0xe>
		return false;
   17b2e:	2000      	movs	r0, #0
}
   17b30:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17b32:	6922      	ldr	r2, [r4, #16]
   17b34:	b10a      	cbz	r2, 17b3a <valid_adv_param+0x16>
   17b36:	07d9      	lsls	r1, r3, #31
   17b38:	d5f9      	bpl.n	17b2e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   17b3a:	4d19      	ldr	r5, [pc, #100]	; (17ba0 <valid_adv_param+0x7c>)
   17b3c:	7820      	ldrb	r0, [r4, #0]
   17b3e:	79eb      	ldrb	r3, [r5, #7]
   17b40:	4283      	cmp	r3, r0
   17b42:	d9f4      	bls.n	17b2e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   17b44:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17b48:	4916      	ldr	r1, [pc, #88]	; (17ba4 <valid_adv_param+0x80>)
   17b4a:	2207      	movs	r2, #7
   17b4c:	4428      	add	r0, r5
   17b4e:	f00f fc25 	bl	2739c <memcmp>
	if (param->id >= bt_dev.id_count ||
   17b52:	2800      	cmp	r0, #0
   17b54:	d0eb      	beq.n	17b2e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17b56:	6860      	ldr	r0, [r4, #4]
   17b58:	07c2      	lsls	r2, r0, #31
   17b5a:	d406      	bmi.n	17b6a <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   17b5c:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   17b60:	2b08      	cmp	r3, #8
   17b62:	d802      	bhi.n	17b6a <valid_adv_param+0x46>
   17b64:	68a3      	ldr	r3, [r4, #8]
   17b66:	2b9f      	cmp	r3, #159	; 0x9f
   17b68:	d9e1      	bls.n	17b2e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   17b6a:	f010 0f30 	tst.w	r0, #48	; 0x30
   17b6e:	d002      	beq.n	17b76 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   17b70:	6923      	ldr	r3, [r4, #16]
   17b72:	2b00      	cmp	r3, #0
   17b74:	d0db      	beq.n	17b2e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   17b76:	06c3      	lsls	r3, r0, #27
   17b78:	d401      	bmi.n	17b7e <valid_adv_param+0x5a>
   17b7a:	6923      	ldr	r3, [r4, #16]
   17b7c:	b943      	cbnz	r3, 17b90 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   17b7e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   17b82:	429a      	cmp	r2, r3
   17b84:	d8d3      	bhi.n	17b2e <valid_adv_param+0xa>
   17b86:	2a1f      	cmp	r2, #31
   17b88:	d9d1      	bls.n	17b2e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   17b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17b8e:	d8ce      	bhi.n	17b2e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   17b90:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   17b94:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   17b98:	bf18      	it	ne
   17b9a:	2001      	movne	r0, #1
   17b9c:	e7c8      	b.n	17b30 <valid_adv_param+0xc>
   17b9e:	bf00      	nop
   17ba0:	20000388 	.word	0x20000388
   17ba4:	000297b5 	.word	0x000297b5

00017ba8 <bt_le_adv_lookup_legacy>:
}
   17ba8:	4800      	ldr	r0, [pc, #0]	; (17bac <bt_le_adv_lookup_legacy+0x4>)
   17baa:	4770      	bx	lr
   17bac:	200003a0 	.word	0x200003a0

00017bb0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   17bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bb4:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   17bb6:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   17bba:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   17bbc:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   17bbe:	ebba 0403 	subs.w	r4, sl, r3
{
   17bc2:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17bc4:	4890      	ldr	r0, [pc, #576]	; (17e08 <bt_le_adv_start_legacy+0x258>)
	struct bt_conn *conn = NULL;
   17bc6:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   17bc8:	bf18      	it	ne
   17bca:	2401      	movne	r4, #1
   17bcc:	f00d f8f3 	bl	24db6 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17bd0:	0747      	lsls	r7, r0, #29
{
   17bd2:	460d      	mov	r5, r1
   17bd4:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17bd6:	f140 810d 	bpl.w	17df4 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   17bda:	4608      	mov	r0, r1
   17bdc:	f7ff ffa2 	bl	17b24 <valid_adv_param>
   17be0:	b928      	cbnz	r0, 17bee <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   17be2:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   17be6:	4620      	mov	r0, r4
   17be8:	b013      	add	sp, #76	; 0x4c
   17bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   17bee:	4628      	mov	r0, r5
   17bf0:	f00d f8ce 	bl	24d90 <bt_id_adv_random_addr_check>
   17bf4:	4681      	mov	r9, r0
   17bf6:	2800      	cmp	r0, #0
   17bf8:	d0f3      	beq.n	17be2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17bfa:	f106 0810 	add.w	r8, r6, #16
   17bfe:	4640      	mov	r0, r8
   17c00:	f00d f8d9 	bl	24db6 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17c04:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   17c08:	0600      	lsls	r0, r0, #24
   17c0a:	f100 80f6 	bmi.w	17dfa <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   17c0e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   17c12:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   17c16:	68ab      	ldr	r3, [r5, #8]
   17c18:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17c1c:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17c1e:	68eb      	ldr	r3, [r5, #12]
   17c20:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   17c24:	f00d f8b8 	bl	24d98 <get_adv_channel_map>
	if (adv->id != param->id) {
   17c28:	7832      	ldrb	r2, [r6, #0]
   17c2a:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17c2c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   17c30:	429a      	cmp	r2, r3
   17c32:	d004      	beq.n	17c3e <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17c34:	4874      	ldr	r0, [pc, #464]	; (17e08 <bt_le_adv_start_legacy+0x258>)
   17c36:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   17c3a:	f00d f8c2 	bl	24dc2 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   17c3e:	4a73      	ldr	r2, [pc, #460]	; (17e0c <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   17c40:	782b      	ldrb	r3, [r5, #0]
   17c42:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   17c44:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   17c48:	6869      	ldr	r1, [r5, #4]
   17c4a:	4622      	mov	r2, r4
   17c4c:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   17c50:	4630      	mov	r0, r6
   17c52:	f7ff fe37 	bl	178c4 <bt_id_set_adv_own_addr>
	if (err) {
   17c56:	4604      	mov	r4, r0
   17c58:	2800      	cmp	r0, #0
   17c5a:	d1c4      	bne.n	17be6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   17c5c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   17c60:	f1ba 0f00 	cmp.w	sl, #0
   17c64:	d013      	beq.n	17c8e <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   17c66:	6929      	ldr	r1, [r5, #16]
   17c68:	f00d f8ba 	bl	24de0 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   17c6c:	4628      	mov	r0, r5
   17c6e:	f00d f94e 	bl	24f0e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17c72:	686b      	ldr	r3, [r5, #4]
   17c74:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   17c76:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17c78:	d416      	bmi.n	17ca8 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   17c7a:	059b      	lsls	r3, r3, #22
   17c7c:	d403      	bmi.n	17c86 <bt_le_adv_start_legacy+0xd6>
   17c7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17c80:	b90b      	cbnz	r3, 17c86 <bt_le_adv_start_legacy+0xd6>
   17c82:	2f02      	cmp	r7, #2
   17c84:	d159      	bne.n	17d3a <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   17c86:	2302      	movs	r3, #2
   17c88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17c8c:	e019      	b.n	17cc2 <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   17c8e:	4960      	ldr	r1, [pc, #384]	; (17e10 <bt_le_adv_start_legacy+0x260>)
   17c90:	f00d f8a6 	bl	24de0 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   17c94:	4628      	mov	r0, r5
   17c96:	f00d f93a 	bl	24f0e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17c9a:	686b      	ldr	r3, [r5, #4]
   17c9c:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   17c9e:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17ca0:	d5eb      	bpl.n	17c7a <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   17ca2:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   17ca6:	e00c      	b.n	17cc2 <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   17ca8:	f013 0f10 	tst.w	r3, #16
   17cac:	bf0c      	ite	eq
   17cae:	2301      	moveq	r3, #1
   17cb0:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   17cb2:	6929      	ldr	r1, [r5, #16]
   17cb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17cb8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   17cbc:	f00d f890 	bl	24de0 <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   17cc0:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   17cc2:	210f      	movs	r1, #15
   17cc4:	f242 0006 	movw	r0, #8198	; 0x2006
   17cc8:	f7fe fd00 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   17ccc:	4604      	mov	r4, r0
   17cce:	2800      	cmp	r0, #0
   17cd0:	f000 8096 	beq.w	17e00 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17cd4:	220f      	movs	r2, #15
   17cd6:	a908      	add	r1, sp, #32
   17cd8:	300c      	adds	r0, #12
   17cda:	f00e fa67 	bl	261ac <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   17cde:	4621      	mov	r1, r4
   17ce0:	2200      	movs	r2, #0
   17ce2:	f242 0006 	movw	r0, #8198	; 0x2006
   17ce6:	f7fe fd2b 	bl	16740 <bt_hci_cmd_send_sync>
	if (err) {
   17cea:	4604      	mov	r4, r0
   17cec:	2800      	cmp	r0, #0
   17cee:	f47f af7a 	bne.w	17be6 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   17cf2:	f1ba 0f00 	cmp.w	sl, #0
   17cf6:	d026      	beq.n	17d46 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17cf8:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17cfa:	07dc      	lsls	r4, r3, #31
   17cfc:	d431      	bmi.n	17d62 <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17cfe:	2101      	movs	r1, #1
   17d00:	4630      	mov	r0, r6
   17d02:	f00d f914 	bl	24f2e <bt_le_adv_set_enable_legacy>
	if (err) {
   17d06:	4604      	mov	r4, r0
   17d08:	2800      	cmp	r0, #0
   17d0a:	d06b      	beq.n	17de4 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   17d0c:	4b41      	ldr	r3, [pc, #260]	; (17e14 <bt_le_adv_start_legacy+0x264>)
   17d0e:	9311      	str	r3, [sp, #68]	; 0x44
   17d10:	2302      	movs	r3, #2
   17d12:	9310      	str	r3, [sp, #64]	; 0x40
   17d14:	4840      	ldr	r0, [pc, #256]	; (17e18 <bt_le_adv_start_legacy+0x268>)
   17d16:	2300      	movs	r3, #0
   17d18:	aa10      	add	r2, sp, #64	; 0x40
   17d1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17d1e:	f7fc f97f 	bl	14020 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17d22:	9d07      	ldr	r5, [sp, #28]
   17d24:	2d00      	cmp	r5, #0
   17d26:	f43f af5e 	beq.w	17be6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17d2a:	4628      	mov	r0, r5
   17d2c:	2100      	movs	r1, #0
   17d2e:	f000 fbf3 	bl	18518 <bt_conn_set_state>
			bt_conn_unref(conn);
   17d32:	4628      	mov	r0, r5
   17d34:	f00d f971 	bl	2501a <bt_conn_unref>
   17d38:	e755      	b.n	17be6 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   17d3a:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   17d3c:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   17d40:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17d44:	e7bd      	b.n	17cc2 <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17d46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17d48:	9300      	str	r3, [sp, #0]
   17d4a:	e9cd 9701 	strd	r9, r7, [sp, #4]
   17d4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17d50:	9a05      	ldr	r2, [sp, #20]
   17d52:	4659      	mov	r1, fp
   17d54:	4630      	mov	r0, r6
   17d56:	f00d f863 	bl	24e20 <le_adv_update.constprop.0>
		if (err) {
   17d5a:	4604      	mov	r4, r0
   17d5c:	2800      	cmp	r0, #0
   17d5e:	d0cb      	beq.n	17cf8 <bt_le_adv_start_legacy+0x148>
   17d60:	e741      	b.n	17be6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   17d62:	a907      	add	r1, sp, #28
   17d64:	4630      	mov	r0, r6
   17d66:	f7ff fea7 	bl	17ab8 <le_adv_start_add_conn>
		if (err) {
   17d6a:	4604      	mov	r4, r0
   17d6c:	2800      	cmp	r0, #0
   17d6e:	d0c6      	beq.n	17cfe <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   17d70:	f110 0f0c 	cmn.w	r0, #12
   17d74:	f47f af37 	bne.w	17be6 <bt_le_adv_start_legacy+0x36>
   17d78:	f1ba 0f00 	cmp.w	sl, #0
   17d7c:	f47f af33 	bne.w	17be6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   17d80:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   17d82:	0798      	lsls	r0, r3, #30
   17d84:	f53f af2f 	bmi.w	17be6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17d88:	686c      	ldr	r4, [r5, #4]
   17d8a:	f084 0402 	eor.w	r4, r4, #2
   17d8e:	f3c4 0440 	ubfx	r4, r4, #1, #1
   17d92:	f004 0201 	and.w	r2, r4, #1
   17d96:	210e      	movs	r1, #14
   17d98:	4640      	mov	r0, r8
   17d9a:	f00d f828 	bl	24dee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   17d9e:	1e7b      	subs	r3, r7, #1
   17da0:	425a      	negs	r2, r3
   17da2:	415a      	adcs	r2, r3
   17da4:	2108      	movs	r1, #8
   17da6:	4640      	mov	r0, r8
   17da8:	f00d f821 	bl	24dee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   17dac:	1eb9      	subs	r1, r7, #2
   17dae:	424a      	negs	r2, r1
   17db0:	414a      	adcs	r2, r1
   17db2:	4640      	mov	r0, r8
   17db4:	2109      	movs	r1, #9
   17db6:	f00d f81a 	bl	24dee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   17dba:	686a      	ldr	r2, [r5, #4]
   17dbc:	210a      	movs	r1, #10
   17dbe:	f002 0201 	and.w	r2, r2, #1
   17dc2:	4640      	mov	r0, r8
   17dc4:	f00d f813 	bl	24dee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   17dc8:	464a      	mov	r2, r9
   17dca:	210b      	movs	r1, #11
   17dcc:	4640      	mov	r0, r8
   17dce:	f00d f80e 	bl	24dee <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   17dd2:	686a      	ldr	r2, [r5, #4]
   17dd4:	210d      	movs	r1, #13
   17dd6:	f3c2 0280 	ubfx	r2, r2, #2, #1
   17dda:	4640      	mov	r0, r8
   17ddc:	f00d f807 	bl	24dee <atomic_set_bit_to>
	return 0;
   17de0:	2400      	movs	r4, #0
   17de2:	e700      	b.n	17be6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17de4:	9807      	ldr	r0, [sp, #28]
   17de6:	b108      	cbz	r0, 17dec <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   17de8:	f00d f917 	bl	2501a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17dec:	f1ba 0f00 	cmp.w	sl, #0
   17df0:	d1cf      	bne.n	17d92 <bt_le_adv_start_legacy+0x1e2>
   17df2:	e7c9      	b.n	17d88 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   17df4:	f06f 040a 	mvn.w	r4, #10
   17df8:	e6f5      	b.n	17be6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   17dfa:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17dfe:	e6f2      	b.n	17be6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   17e00:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17e04:	e6ef      	b.n	17be6 <bt_le_adv_start_legacy+0x36>
   17e06:	bf00      	nop
   17e08:	20000454 	.word	0x20000454
   17e0c:	20000388 	.word	0x20000388
   17e10:	000297b5 	.word	0x000297b5
   17e14:	00029ead 	.word	0x00029ead
   17e18:	00027f84 	.word	0x00027f84

00017e1c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   17e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17e1e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17e20:	9a06      	ldr	r2, [sp, #24]
{
   17e22:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17e24:	e9cd 3200 	strd	r3, r2, [sp]
   17e28:	462b      	mov	r3, r5
   17e2a:	460a      	mov	r2, r1
   17e2c:	4601      	mov	r1, r0
   17e2e:	4811      	ldr	r0, [pc, #68]	; (17e74 <bt_le_adv_start+0x58>)
   17e30:	f7ff febe 	bl	17bb0 <bt_le_adv_start_legacy>
   17e34:	4621      	mov	r1, r4
   17e36:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   17e38:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   17e3a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   17e3e:	429d      	cmp	r5, r3
   17e40:	d102      	bne.n	17e48 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   17e42:	4630      	mov	r0, r6
   17e44:	b002      	add	sp, #8
   17e46:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   17e48:	880a      	ldrh	r2, [r1, #0]
   17e4a:	4282      	cmp	r2, r0
   17e4c:	d104      	bne.n	17e58 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   17e4e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   17e50:	b112      	cbz	r2, 17e58 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   17e52:	7812      	ldrb	r2, [r2, #0]
   17e54:	07d2      	lsls	r2, r2, #31
   17e56:	d402      	bmi.n	17e5e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   17e58:	3301      	adds	r3, #1
   17e5a:	3108      	adds	r1, #8
   17e5c:	e7ef      	b.n	17e3e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   17e5e:	4906      	ldr	r1, [pc, #24]	; (17e78 <bt_le_adv_start+0x5c>)
   17e60:	4806      	ldr	r0, [pc, #24]	; (17e7c <bt_le_adv_start+0x60>)
   17e62:	f00e ff3e 	bl	26ce2 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   17e66:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   17e6a:	2300      	movs	r3, #0
   17e6c:	4803      	ldr	r0, [pc, #12]	; (17e7c <bt_le_adv_start+0x60>)
   17e6e:	f006 fb8d 	bl	1e58c <k_work_reschedule>
   17e72:	e7e6      	b.n	17e42 <bt_le_adv_start+0x26>
   17e74:	200003a0 	.word	0x200003a0
   17e78:	00017f05 	.word	0x00017f05
   17e7c:	200003b8 	.word	0x200003b8

00017e80 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   17e80:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   17e82:	481a      	ldr	r0, [pc, #104]	; (17eec <bt_le_adv_stop+0x6c>)
   17e84:	f00d f878 	bl	24f78 <bt_le_lim_adv_cancel_timeout>
   17e88:	4819      	ldr	r0, [pc, #100]	; (17ef0 <bt_le_adv_stop+0x70>)
   17e8a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   17e8e:	f00c ff98 	bl	24dc2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17e92:	4817      	ldr	r0, [pc, #92]	; (17ef0 <bt_le_adv_stop+0x70>)
   17e94:	f00c ff8f 	bl	24db6 <atomic_get>
   17e98:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17e9a:	061a      	lsls	r2, r3, #24
   17e9c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   17ea0:	d523      	bpl.n	17eea <bt_le_adv_stop+0x6a>
   17ea2:	4813      	ldr	r0, [pc, #76]	; (17ef0 <bt_le_adv_stop+0x70>)
   17ea4:	f00c ff87 	bl	24db6 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17ea8:	0543      	lsls	r3, r0, #21
   17eaa:	d514      	bpl.n	17ed6 <bt_le_adv_stop+0x56>
   17eac:	4911      	ldr	r1, [pc, #68]	; (17ef4 <bt_le_adv_stop+0x74>)
   17eae:	4812      	ldr	r0, [pc, #72]	; (17ef8 <bt_le_adv_stop+0x78>)
   17eb0:	2207      	movs	r2, #7
   17eb2:	f00f fa73 	bl	2739c <memcmp>
   17eb6:	4b11      	ldr	r3, [pc, #68]	; (17efc <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17eb8:	b998      	cbnz	r0, 17ee2 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   17eba:	4911      	ldr	r1, [pc, #68]	; (17f00 <bt_le_adv_stop+0x80>)
   17ebc:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   17ebe:	7e18      	ldrb	r0, [r3, #24]
   17ec0:	f000 fd36 	bl	18930 <bt_conn_lookup_state_le>
   17ec4:	4604      	mov	r4, r0
	if (conn) {
   17ec6:	b130      	cbz	r0, 17ed6 <bt_le_adv_stop+0x56>
		conn->err = status;
   17ec8:	2100      	movs	r1, #0
   17eca:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17ecc:	f000 fb24 	bl	18518 <bt_conn_set_state>
		bt_conn_unref(conn);
   17ed0:	4620      	mov	r0, r4
   17ed2:	f00d f8a2 	bl	2501a <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   17ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   17eda:	4804      	ldr	r0, [pc, #16]	; (17eec <bt_le_adv_stop+0x6c>)
   17edc:	2100      	movs	r1, #0
   17ede:	f00d b826 	b.w	24f2e <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   17ee2:	2205      	movs	r2, #5
   17ee4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   17ee8:	e7e9      	b.n	17ebe <bt_le_adv_stop+0x3e>
}
   17eea:	bd10      	pop	{r4, pc}
   17eec:	200003a0 	.word	0x200003a0
   17ef0:	200003b0 	.word	0x200003b0
   17ef4:	000297b5 	.word	0x000297b5
   17ef8:	200003a9 	.word	0x200003a9
   17efc:	20000388 	.word	0x20000388
   17f00:	000297ae 	.word	0x000297ae

00017f04 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   17f04:	b580      	push	{r7, lr}
   17f06:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   17f08:	f7ff ffba 	bl	17e80 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   17f0c:	b088      	sub	sp, #32
   17f0e:	466a      	mov	r2, sp
   17f10:	4b06      	ldr	r3, [pc, #24]	; (17f2c <adv_timeout+0x28>)
   17f12:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17f16:	2303      	movs	r3, #3
   17f18:	f842 3f10 	str.w	r3, [r2, #16]!
   17f1c:	4804      	ldr	r0, [pc, #16]	; (17f30 <adv_timeout+0x2c>)
   17f1e:	2300      	movs	r3, #0
   17f20:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17f24:	f7fc f87c 	bl	14020 <z_impl_z_log_msg_static_create>
}
   17f28:	46bd      	mov	sp, r7
   17f2a:	bd80      	pop	{r7, pc}
   17f2c:	00029ec8 	.word	0x00029ec8
   17f30:	00027f84 	.word	0x00027f84

00017f34 <bt_le_adv_resume>:
{
   17f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17f36:	4c20      	ldr	r4, [pc, #128]	; (17fb8 <bt_le_adv_resume+0x84>)
   17f38:	4620      	mov	r0, r4
   17f3a:	f00c ff3c 	bl	24db6 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   17f3e:	0440      	lsls	r0, r0, #17
   17f40:	d538      	bpl.n	17fb4 <bt_le_adv_resume+0x80>
   17f42:	4620      	mov	r0, r4
   17f44:	f00c ff37 	bl	24db6 <atomic_get>
   17f48:	0601      	lsls	r1, r0, #24
   17f4a:	d433      	bmi.n	17fb4 <bt_le_adv_resume+0x80>
   17f4c:	4620      	mov	r0, r4
   17f4e:	f00c ff32 	bl	24db6 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17f52:	0542      	lsls	r2, r0, #21
   17f54:	d52e      	bpl.n	17fb4 <bt_le_adv_resume+0x80>
	err = le_adv_start_add_conn(adv, &conn);
   17f56:	a901      	add	r1, sp, #4
   17f58:	f1a4 0010 	sub.w	r0, r4, #16
   17f5c:	f7ff fdac 	bl	17ab8 <le_adv_start_add_conn>
	if (err) {
   17f60:	4605      	mov	r5, r0
   17f62:	bb38      	cbnz	r0, 17fb4 <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17f64:	2101      	movs	r1, #1
   17f66:	f1a4 0010 	sub.w	r0, r4, #16
   17f6a:	f00c ffe0 	bl	24f2e <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   17f6e:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   17f70:	b928      	cbnz	r0, 17f7e <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   17f72:	4630      	mov	r0, r6
}
   17f74:	b002      	add	sp, #8
   17f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   17f7a:	f00d b84e 	b.w	2501a <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17f7e:	4629      	mov	r1, r5
   17f80:	4630      	mov	r0, r6
   17f82:	f000 fac9 	bl	18518 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17f86:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   17f8a:	4620      	mov	r0, r4
   17f8c:	f00c ff19 	bl	24dc2 <atomic_and>
   17f90:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   17f92:	4630      	mov	r0, r6
   17f94:	f00d f841 	bl	2501a <bt_conn_unref>
	if (persist_paused) {
   17f98:	046b      	lsls	r3, r5, #17
   17f9a:	d50b      	bpl.n	17fb4 <bt_le_adv_resume+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17f9c:	f3bf 8f5b 	dmb	ish
   17fa0:	e854 3f00 	ldrex	r3, [r4]
   17fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   17fa8:	e844 3200 	strex	r2, r3, [r4]
   17fac:	2a00      	cmp	r2, #0
   17fae:	d1f7      	bne.n	17fa0 <bt_le_adv_resume+0x6c>
   17fb0:	f3bf 8f5b 	dmb	ish
}
   17fb4:	b002      	add	sp, #8
   17fb6:	bd70      	pop	{r4, r5, r6, pc}
   17fb8:	200003b0 	.word	0x200003b0

00017fbc <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   17fbc:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17fbe:	4b0b      	ldr	r3, [pc, #44]	; (17fec <notify_connected+0x30>)
   17fc0:	681d      	ldr	r5, [r3, #0]
{
   17fc2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17fc4:	b925      	cbnz	r5, 17fd0 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17fc6:	4d0a      	ldr	r5, [pc, #40]	; (17ff0 <notify_connected+0x34>)
   17fc8:	4e0a      	ldr	r6, [pc, #40]	; (17ff4 <notify_connected+0x38>)
   17fca:	42b5      	cmp	r5, r6
   17fcc:	d307      	bcc.n	17fde <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   17fce:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   17fd0:	682b      	ldr	r3, [r5, #0]
   17fd2:	b113      	cbz	r3, 17fda <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   17fd4:	7a61      	ldrb	r1, [r4, #9]
   17fd6:	4620      	mov	r0, r4
   17fd8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17fda:	692d      	ldr	r5, [r5, #16]
   17fdc:	e7f2      	b.n	17fc4 <notify_connected+0x8>
		if (cb->connected) {
   17fde:	682b      	ldr	r3, [r5, #0]
   17fe0:	b113      	cbz	r3, 17fe8 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   17fe2:	7a61      	ldrb	r1, [r4, #9]
   17fe4:	4620      	mov	r0, r4
   17fe6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17fe8:	3514      	adds	r5, #20
   17fea:	e7ee      	b.n	17fca <notify_connected+0xe>
   17fec:	20003600 	.word	0x20003600
   17ff0:	00027f54 	.word	0x00027f54
   17ff4:	00027f54 	.word	0x00027f54

00017ff8 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   17ff8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
   17ffa:	4b07      	ldr	r3, [pc, #28]	; (18018 <bt_conn_create_pdu_timeout.part.0+0x20>)
   17ffc:	9305      	str	r3, [sp, #20]
   17ffe:	4807      	ldr	r0, [pc, #28]	; (1801c <bt_conn_create_pdu_timeout.part.0+0x24>)
   18000:	2302      	movs	r3, #2
   18002:	aa04      	add	r2, sp, #16
   18004:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18008:	9304      	str	r3, [sp, #16]
   1800a:	f00c ffb8 	bl	24f7e <z_log_msg_static_create.constprop.0>
}
   1800e:	2000      	movs	r0, #0
   18010:	b007      	add	sp, #28
   18012:	f85d fb04 	ldr.w	pc, [sp], #4
   18016:	bf00      	nop
   18018:	00029eee 	.word	0x00029eee
   1801c:	00027f94 	.word	0x00027f94

00018020 <tx_notify>:
{
   18020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   18024:	4f15      	ldr	r7, [pc, #84]	; (1807c <tx_notify+0x5c>)
{
   18026:	4604      	mov	r4, r0
	tx->cb = NULL;
   18028:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   1802c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18030:	f3ef 8311 	mrs	r3, BASEPRI
   18034:	f382 8812 	msr	BASEPRI_MAX, r2
   18038:	f3bf 8f6f 	isb	sy
	return list->head;
   1803c:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1803e:	b929      	cbnz	r1, 1804c <tx_notify+0x2c>
	__asm__ volatile(
   18040:	f383 8811 	msr	BASEPRI, r3
   18044:	f3bf 8f6f 	isb	sy
}
   18048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1804c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1804e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   18050:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18052:	4281      	cmp	r1, r0
	list->tail = node;
   18054:	bf08      	it	eq
   18056:	6262      	streq	r2, [r4, #36]	; 0x24
   18058:	f383 8811 	msr	BASEPRI, r3
   1805c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   18060:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   18064:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   18068:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1806c:	4638      	mov	r0, r7
   1806e:	f00e fd5d 	bl	26b2c <k_queue_append>
		cb(conn, user_data, 0);
   18072:	2200      	movs	r2, #0
   18074:	4631      	mov	r1, r6
   18076:	4620      	mov	r0, r4
   18078:	47a8      	blx	r5
	while (1) {
   1807a:	e7d7      	b.n	1802c <tx_notify+0xc>
   1807c:	20000c6c 	.word	0x20000c6c

00018080 <conn_tx_destroy>:
{
   18080:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   18082:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   18086:	2200      	movs	r2, #0
	tx->user_data = NULL;
   18088:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   1808c:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   1808e:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   18090:	4805      	ldr	r0, [pc, #20]	; (180a8 <conn_tx_destroy+0x28>)
   18092:	f00e fd4b 	bl	26b2c <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   18096:	4631      	mov	r1, r6
   18098:	4620      	mov	r0, r4
   1809a:	462b      	mov	r3, r5
   1809c:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   180a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   180a4:	4718      	bx	r3
   180a6:	bf00      	nop
   180a8:	20000c6c 	.word	0x20000c6c

000180ac <send_frag>:
{
   180ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   180b0:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   180b2:	698d      	ldr	r5, [r1, #24]
{
   180b4:	af00      	add	r7, sp, #0
   180b6:	460e      	mov	r6, r1
   180b8:	4692      	mov	sl, r2
   180ba:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   180bc:	f04f 33ff 	mov.w	r3, #4294967295
   180c0:	4850      	ldr	r0, [pc, #320]	; (18204 <send_frag+0x158>)
   180c2:	f04f 32ff 	mov.w	r2, #4294967295
   180c6:	f006 f90b 	bl	1e2e0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   180ca:	7aa3      	ldrb	r3, [r4, #10]
   180cc:	2b07      	cmp	r3, #7
   180ce:	f040 808c 	bne.w	181ea <send_frag+0x13e>
	__asm__ volatile(
   180d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   180d6:	f3ef 8211 	mrs	r2, BASEPRI
   180da:	f383 8812 	msr	BASEPRI_MAX, r3
   180de:	f3bf 8f6f 	isb	sy
	if (tx) {
   180e2:	2d00      	cmp	r5, #0
   180e4:	d058      	beq.n	18198 <send_frag+0xec>
	parent->next = child;
   180e6:	2300      	movs	r3, #0
   180e8:	602b      	str	r3, [r5, #0]
	return list->tail;
   180ea:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   180ec:	2b00      	cmp	r3, #0
   180ee:	d150      	bne.n	18192 <send_frag+0xe6>
	list->head = node;
   180f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   180f4:	f382 8811 	msr	BASEPRI, r2
   180f8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   180fc:	2104      	movs	r1, #4
   180fe:	f106 000c 	add.w	r0, r6, #12
   18102:	f00e f864 	bl	261ce <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   18106:	8823      	ldrh	r3, [r4, #0]
   18108:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   1810c:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   18110:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18114:	8a33      	ldrh	r3, [r6, #16]
   18116:	3b04      	subs	r3, #4
   18118:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1811a:	2302      	movs	r3, #2
   1811c:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   1811e:	4630      	mov	r0, r6
   18120:	f7fe fd84 	bl	16c2c <bt_send>
	if (err) {
   18124:	2800      	cmp	r0, #0
   18126:	d06a      	beq.n	181fe <send_frag+0x152>
		LOG_ERR("Unable to send to driver (err %d)", err);
   18128:	46ea      	mov	sl, sp
   1812a:	b088      	sub	sp, #32
   1812c:	466a      	mov	r2, sp
   1812e:	4b36      	ldr	r3, [pc, #216]	; (18208 <send_frag+0x15c>)
   18130:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18134:	2303      	movs	r3, #3
   18136:	f842 3f10 	str.w	r3, [r2, #16]!
   1813a:	4834      	ldr	r0, [pc, #208]	; (1820c <send_frag+0x160>)
   1813c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18140:	f00c ff1d 	bl	24f7e <z_log_msg_static_create.constprop.0>
   18144:	46d5      	mov	sp, sl
	__asm__ volatile(
   18146:	f04f 0340 	mov.w	r3, #64	; 0x40
   1814a:	f3ef 8111 	mrs	r1, BASEPRI
   1814e:	f383 8812 	msr	BASEPRI_MAX, r3
   18152:	f3bf 8f6f 	isb	sy
		if (tx) {
   18156:	2d00      	cmp	r5, #0
   18158:	d034      	beq.n	181c4 <send_frag+0x118>
	return list->head;
   1815a:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1815c:	2200      	movs	r2, #0
   1815e:	b153      	cbz	r3, 18176 <send_frag+0xca>
   18160:	429d      	cmp	r5, r3
   18162:	d12c      	bne.n	181be <send_frag+0x112>
	return node->next;
   18164:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   18166:	bb22      	cbnz	r2, 181b2 <send_frag+0x106>
   18168:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1816a:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1816c:	4295      	cmp	r5, r2
   1816e:	d100      	bne.n	18172 <send_frag+0xc6>
	list->tail = node;
   18170:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   18172:	2300      	movs	r3, #0
   18174:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   18176:	f381 8811 	msr	BASEPRI, r1
   1817a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1817e:	4821      	ldr	r0, [pc, #132]	; (18204 <send_frag+0x158>)
   18180:	f006 f888 	bl	1e294 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   18184:	2300      	movs	r3, #0
   18186:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   18188:	4629      	mov	r1, r5
   1818a:	4620      	mov	r0, r4
   1818c:	f7ff ff78 	bl	18080 <conn_tx_destroy>
   18190:	e024      	b.n	181dc <send_frag+0x130>
   18192:	601d      	str	r5, [r3, #0]
	list->tail = node;
   18194:	61a5      	str	r5, [r4, #24]
}
   18196:	e7ad      	b.n	180f4 <send_frag+0x48>
	return list->tail;
   18198:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1819a:	b133      	cbz	r3, 181aa <send_frag+0xfe>
			pending_no_cb = &tail_tx->pending_no_cb;
   1819c:	f103 080c 	add.w	r8, r3, #12
   181a0:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   181a2:	3301      	adds	r3, #1
   181a4:	f8c8 3000 	str.w	r3, [r8]
   181a8:	e7a4      	b.n	180f4 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   181aa:	69e3      	ldr	r3, [r4, #28]
   181ac:	f104 081c 	add.w	r8, r4, #28
   181b0:	e7f7      	b.n	181a2 <send_frag+0xf6>
	parent->next = child;
   181b2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   181b4:	69a3      	ldr	r3, [r4, #24]
   181b6:	429d      	cmp	r5, r3
	list->tail = node;
   181b8:	bf08      	it	eq
   181ba:	61a2      	streq	r2, [r4, #24]
}
   181bc:	e7d9      	b.n	18172 <send_frag+0xc6>
	return node->next;
   181be:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   181c0:	681b      	ldr	r3, [r3, #0]
   181c2:	e7cc      	b.n	1815e <send_frag+0xb2>
			(*pending_no_cb)--;
   181c4:	f8d8 3000 	ldr.w	r3, [r8]
   181c8:	3b01      	subs	r3, #1
   181ca:	f8c8 3000 	str.w	r3, [r8]
   181ce:	f381 8811 	msr	BASEPRI, r1
   181d2:	f3bf 8f6f 	isb	sy
   181d6:	480b      	ldr	r0, [pc, #44]	; (18204 <send_frag+0x158>)
   181d8:	f006 f85c 	bl	1e294 <z_impl_k_sem_give>
	if (always_consume) {
   181dc:	f1b9 0f00 	cmp.w	r9, #0
   181e0:	d109      	bne.n	181f6 <send_frag+0x14a>
	return false;
   181e2:	2000      	movs	r0, #0
}
   181e4:	46bd      	mov	sp, r7
   181e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   181ea:	4806      	ldr	r0, [pc, #24]	; (18204 <send_frag+0x158>)
   181ec:	f006 f852 	bl	1e294 <z_impl_k_sem_give>
	if (tx) {
   181f0:	2d00      	cmp	r5, #0
   181f2:	d1c7      	bne.n	18184 <send_frag+0xd8>
   181f4:	e7f2      	b.n	181dc <send_frag+0x130>
		net_buf_unref(buf);
   181f6:	4630      	mov	r0, r6
   181f8:	f002 fe26 	bl	1ae48 <net_buf_unref>
   181fc:	e7f1      	b.n	181e2 <send_frag+0x136>
	return true;
   181fe:	2001      	movs	r0, #1
   18200:	e7f0      	b.n	181e4 <send_frag+0x138>
   18202:	bf00      	nop
   18204:	20000488 	.word	0x20000488
   18208:	00029be3 	.word	0x00029be3
   1820c:	00027f94 	.word	0x00027f94

00018210 <bt_conn_get_pkts>:
}
   18210:	4800      	ldr	r0, [pc, #0]	; (18214 <bt_conn_get_pkts+0x4>)
   18212:	4770      	bx	lr
   18214:	20000488 	.word	0x20000488

00018218 <bt_conn_new>:
{
   18218:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1821a:	2200      	movs	r2, #0
   1821c:	4604      	mov	r4, r0
   1821e:	428a      	cmp	r2, r1
   18220:	d102      	bne.n	18228 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18222:	2400      	movs	r4, #0
}
   18224:	4620      	mov	r0, r4
   18226:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18228:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   1822c:	2001      	movs	r0, #1
   1822e:	f3bf 8f5b 	dmb	ish
   18232:	e853 5f00 	ldrex	r5, [r3]
   18236:	2d00      	cmp	r5, #0
   18238:	d104      	bne.n	18244 <bt_conn_new+0x2c>
   1823a:	e843 0c00 	strex	ip, r0, [r3]
   1823e:	f1bc 0f00 	cmp.w	ip, #0
   18242:	d1f6      	bne.n	18232 <bt_conn_new+0x1a>
   18244:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18248:	d002      	beq.n	18250 <bt_conn_new+0x38>
   1824a:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1824c:	4402      	add	r2, r0
   1824e:	e7e6      	b.n	1821e <bt_conn_new+0x6>
	if (!conn) {
   18250:	2c00      	cmp	r4, #0
   18252:	d0e6      	beq.n	18222 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   18254:	22bc      	movs	r2, #188	; 0xbc
   18256:	2100      	movs	r1, #0
   18258:	4620      	mov	r0, r4
   1825a:	f00f f8bd 	bl	273d8 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1825e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18262:	4904      	ldr	r1, [pc, #16]	; (18274 <bt_conn_new+0x5c>)
   18264:	f00e fd3d 	bl	26ce2 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   18268:	4903      	ldr	r1, [pc, #12]	; (18278 <bt_conn_new+0x60>)
   1826a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1826e:	f00e fcf4 	bl	26c5a <k_work_init>
	return conn;
   18272:	e7d7      	b.n	18224 <bt_conn_new+0xc>
   18274:	000189e1 	.word	0x000189e1
   18278:	00024f85 	.word	0x00024f85

0001827c <bt_conn_recv>:
{
   1827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18280:	b086      	sub	sp, #24
   18282:	4616      	mov	r6, r2
   18284:	af00      	add	r7, sp, #0
   18286:	4604      	mov	r4, r0
   18288:	460d      	mov	r5, r1
	tx_notify(conn);
   1828a:	f7ff fec9 	bl	18020 <tx_notify>
	switch (flags) {
   1828e:	2e01      	cmp	r6, #1
   18290:	d030      	beq.n	182f4 <bt_conn_recv+0x78>
   18292:	2e02      	cmp	r6, #2
   18294:	d16a      	bne.n	1836c <bt_conn_recv+0xf0>
		if (conn->rx) {
   18296:	6923      	ldr	r3, [r4, #16]
   18298:	b163      	cbz	r3, 182b4 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   1829a:	4b40      	ldr	r3, [pc, #256]	; (1839c <bt_conn_recv+0x120>)
   1829c:	4840      	ldr	r0, [pc, #256]	; (183a0 <bt_conn_recv+0x124>)
   1829e:	e9c7 6304 	strd	r6, r3, [r7, #16]
   182a2:	f107 0210 	add.w	r2, r7, #16
   182a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   182aa:	f00c fe68 	bl	24f7e <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   182ae:	4620      	mov	r0, r4
   182b0:	f00c fe6b 	bl	24f8a <bt_conn_reset_rx_state>
		conn->rx = buf;
   182b4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   182b6:	6921      	ldr	r1, [r4, #16]
   182b8:	8a08      	ldrh	r0, [r1, #16]
   182ba:	2801      	cmp	r0, #1
   182bc:	d930      	bls.n	18320 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   182be:	68cb      	ldr	r3, [r1, #12]
   182c0:	881b      	ldrh	r3, [r3, #0]
   182c2:	3304      	adds	r3, #4
   182c4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   182c6:	4298      	cmp	r0, r3
   182c8:	d32a      	bcc.n	18320 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   182ca:	d95f      	bls.n	1838c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   182cc:	466d      	mov	r5, sp
   182ce:	b088      	sub	sp, #32
   182d0:	466a      	mov	r2, sp
   182d2:	4934      	ldr	r1, [pc, #208]	; (183a4 <bt_conn_recv+0x128>)
   182d4:	61d3      	str	r3, [r2, #28]
   182d6:	2304      	movs	r3, #4
   182d8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   182dc:	f842 3f10 	str.w	r3, [r2, #16]!
   182e0:	482f      	ldr	r0, [pc, #188]	; (183a0 <bt_conn_recv+0x124>)
   182e2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   182e6:	f00c fe4a 	bl	24f7e <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   182ea:	4620      	mov	r0, r4
   182ec:	46ad      	mov	sp, r5
   182ee:	f00c fe4c 	bl	24f8a <bt_conn_reset_rx_state>
		return;
   182f2:	e015      	b.n	18320 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   182f4:	6920      	ldr	r0, [r4, #16]
   182f6:	b970      	cbnz	r0, 18316 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   182f8:	4b2b      	ldr	r3, [pc, #172]	; (183a8 <bt_conn_recv+0x12c>)
   182fa:	617b      	str	r3, [r7, #20]
   182fc:	2302      	movs	r3, #2
   182fe:	4828      	ldr	r0, [pc, #160]	; (183a0 <bt_conn_recv+0x124>)
   18300:	613b      	str	r3, [r7, #16]
   18302:	f107 0210 	add.w	r2, r7, #16
   18306:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1830a:	f00c fe38 	bl	24f7e <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1830e:	4620      	mov	r0, r4
   18310:	f00c fe3b 	bl	24f8a <bt_conn_reset_rx_state>
   18314:	e001      	b.n	1831a <bt_conn_recv+0x9e>
		if (!buf->len) {
   18316:	8a2e      	ldrh	r6, [r5, #16]
   18318:	b936      	cbnz	r6, 18328 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1831a:	4628      	mov	r0, r5
   1831c:	f002 fd94 	bl	1ae48 <net_buf_unref>
}
   18320:	3718      	adds	r7, #24
   18322:	46bd      	mov	sp, r7
   18324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18328:	300c      	adds	r0, #12
   1832a:	f00d ff74 	bl	26216 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1832e:	4286      	cmp	r6, r0
   18330:	d912      	bls.n	18358 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   18332:	4b1e      	ldr	r3, [pc, #120]	; (183ac <bt_conn_recv+0x130>)
   18334:	617b      	str	r3, [r7, #20]
   18336:	2302      	movs	r3, #2
   18338:	613b      	str	r3, [r7, #16]
   1833a:	4819      	ldr	r0, [pc, #100]	; (183a0 <bt_conn_recv+0x124>)
   1833c:	f107 0210 	add.w	r2, r7, #16
   18340:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18344:	f00c fe1b 	bl	24f7e <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   18348:	2200      	movs	r2, #0
   1834a:	6921      	ldr	r1, [r4, #16]
   1834c:	4620      	mov	r0, r4
   1834e:	f000 fdaf 	bl	18eb0 <bt_l2cap_recv>
			conn->rx = NULL;
   18352:	2300      	movs	r3, #0
   18354:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   18356:	e7e0      	b.n	1831a <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18358:	6920      	ldr	r0, [r4, #16]
   1835a:	8a2a      	ldrh	r2, [r5, #16]
   1835c:	68e9      	ldr	r1, [r5, #12]
   1835e:	300c      	adds	r0, #12
   18360:	f00d ff24 	bl	261ac <net_buf_simple_add_mem>
		net_buf_unref(buf);
   18364:	4628      	mov	r0, r5
   18366:	f002 fd6f 	bl	1ae48 <net_buf_unref>
		break;
   1836a:	e7a4      	b.n	182b6 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1836c:	46e8      	mov	r8, sp
   1836e:	b088      	sub	sp, #32
   18370:	466a      	mov	r2, sp
   18372:	4b0f      	ldr	r3, [pc, #60]	; (183b0 <bt_conn_recv+0x134>)
   18374:	480a      	ldr	r0, [pc, #40]	; (183a0 <bt_conn_recv+0x124>)
	switch (flags) {
   18376:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1837a:	2303      	movs	r3, #3
   1837c:	f842 3f10 	str.w	r3, [r2, #16]!
   18380:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18384:	f00c fdfb 	bl	24f7e <z_log_msg_static_create.constprop.0>
   18388:	46c5      	mov	sp, r8
   1838a:	e7c0      	b.n	1830e <bt_conn_recv+0x92>
	conn->rx = NULL;
   1838c:	2300      	movs	r3, #0
   1838e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   18390:	2201      	movs	r2, #1
   18392:	4620      	mov	r0, r4
   18394:	f000 fd8c 	bl	18eb0 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   18398:	e7c2      	b.n	18320 <bt_conn_recv+0xa4>
   1839a:	bf00      	nop
   1839c:	00029f17 	.word	0x00029f17
   183a0:	00027f94 	.word	0x00027f94
   183a4:	00029f97 	.word	0x00029f97
   183a8:	00029f34 	.word	0x00029f34
   183ac:	00029f52 	.word	0x00029f52
   183b0:	00029f79 	.word	0x00029f79

000183b4 <bt_conn_send_cb>:
{
   183b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183b8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   183ba:	7a83      	ldrb	r3, [r0, #10]
   183bc:	2b07      	cmp	r3, #7
{
   183be:	b086      	sub	sp, #24
   183c0:	4605      	mov	r5, r0
   183c2:	460f      	mov	r7, r1
   183c4:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   183c6:	d00c      	beq.n	183e2 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   183c8:	4b28      	ldr	r3, [pc, #160]	; (1846c <bt_conn_send_cb+0xb8>)
   183ca:	9305      	str	r3, [sp, #20]
   183cc:	4828      	ldr	r0, [pc, #160]	; (18470 <bt_conn_send_cb+0xbc>)
   183ce:	2302      	movs	r3, #2
   183d0:	aa04      	add	r2, sp, #16
   183d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   183d6:	9304      	str	r3, [sp, #16]
   183d8:	f00c fdd1 	bl	24f7e <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   183dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   183e0:	e01d      	b.n	1841e <bt_conn_send_cb+0x6a>
	if (cb) {
   183e2:	2a00      	cmp	r2, #0
   183e4:	d040      	beq.n	18468 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   183e6:	f006 fbb9 	bl	1eb5c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   183ea:	4b22      	ldr	r3, [pc, #136]	; (18474 <bt_conn_send_cb+0xc0>)
   183ec:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   183ee:	4822      	ldr	r0, [pc, #136]	; (18478 <bt_conn_send_cb+0xc4>)
   183f0:	bf07      	ittee	eq
   183f2:	2200      	moveq	r2, #0
   183f4:	2300      	moveq	r3, #0
   183f6:	f04f 32ff 	movne.w	r2, #4294967295
   183fa:	f04f 33ff 	movne.w	r3, #4294967295
   183fe:	f005 ff15 	bl	1e22c <z_impl_k_queue_get>
   18402:	4604      	mov	r4, r0
		if (!tx) {
   18404:	b970      	cbnz	r0, 18424 <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   18406:	4b1d      	ldr	r3, [pc, #116]	; (1847c <bt_conn_send_cb+0xc8>)
   18408:	4819      	ldr	r0, [pc, #100]	; (18470 <bt_conn_send_cb+0xbc>)
   1840a:	9305      	str	r3, [sp, #20]
   1840c:	aa04      	add	r2, sp, #16
   1840e:	2302      	movs	r3, #2
   18410:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18414:	9304      	str	r3, [sp, #16]
   18416:	f00c fdb2 	bl	24f7e <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   1841a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1841e:	b006      	add	sp, #24
   18420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   18424:	7aab      	ldrb	r3, [r5, #10]
   18426:	2b07      	cmp	r3, #7
   18428:	d012      	beq.n	18450 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   1842a:	4b15      	ldr	r3, [pc, #84]	; (18480 <bt_conn_send_cb+0xcc>)
   1842c:	9305      	str	r3, [sp, #20]
   1842e:	4810      	ldr	r0, [pc, #64]	; (18470 <bt_conn_send_cb+0xbc>)
   18430:	2302      	movs	r3, #2
   18432:	aa04      	add	r2, sp, #16
   18434:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18438:	9304      	str	r3, [sp, #16]
   1843a:	f00c fda0 	bl	24f7e <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   1843e:	2300      	movs	r3, #0
	tx->user_data = NULL;
   18440:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   18444:	480c      	ldr	r0, [pc, #48]	; (18478 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   18446:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   18448:	4621      	mov	r1, r4
   1844a:	f00e fb6f 	bl	26b2c <k_queue_append>
}
   1844e:	e7c5      	b.n	183dc <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   18450:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   18454:	2300      	movs	r3, #0
   18456:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   18458:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   1845c:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   1845e:	4639      	mov	r1, r7
   18460:	f00d fe76 	bl	26150 <net_buf_put>
	return 0;
   18464:	2000      	movs	r0, #0
   18466:	e7da      	b.n	1841e <bt_conn_send_cb+0x6a>
   18468:	4614      	mov	r4, r2
   1846a:	e7f5      	b.n	18458 <bt_conn_send_cb+0xa4>
   1846c:	00029fb2 	.word	0x00029fb2
   18470:	00027f94 	.word	0x00027f94
   18474:	20002ef0 	.word	0x20002ef0
   18478:	20000c6c 	.word	0x20000c6c
   1847c:	00029fc1 	.word	0x00029fc1
   18480:	00029fdf 	.word	0x00029fdf

00018484 <bt_conn_prepare_events>:
{
   18484:	b570      	push	{r4, r5, r6, lr}
   18486:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   18488:	481c      	ldr	r0, [pc, #112]	; (184fc <bt_conn_prepare_events+0x78>)
   1848a:	f00e ff77 	bl	2737c <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1848e:	4b1b      	ldr	r3, [pc, #108]	; (184fc <bt_conn_prepare_events+0x78>)
   18490:	2200      	movs	r2, #0
   18492:	4620      	mov	r0, r4
   18494:	2101      	movs	r1, #1
   18496:	f00e ff54 	bl	27342 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1849a:	f3bf 8f5b 	dmb	ish
   1849e:	4a18      	ldr	r2, [pc, #96]	; (18500 <bt_conn_prepare_events+0x7c>)
   184a0:	6813      	ldr	r3, [r2, #0]
   184a2:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   184a6:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   184aa:	b90b      	cbnz	r3, 184b0 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   184ac:	2001      	movs	r0, #1
}
   184ae:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   184b0:	f1a2 03bc 	sub.w	r3, r2, #188	; 0xbc
   184b4:	f812 2cb2 	ldrb.w	r2, [r2, #-178]
   184b8:	b992      	cbnz	r2, 184e0 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   184ba:	f3bf 8f5b 	dmb	ish
   184be:	1d1a      	adds	r2, r3, #4
   184c0:	e852 1f00 	ldrex	r1, [r2]
   184c4:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   184c8:	e842 5600 	strex	r6, r5, [r2]
   184cc:	2e00      	cmp	r6, #0
   184ce:	d1f7      	bne.n	184c0 <bt_conn_prepare_events+0x3c>
   184d0:	f3bf 8f5b 	dmb	ish
   184d4:	064a      	lsls	r2, r1, #25
   184d6:	d503      	bpl.n	184e0 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   184d8:	4618      	mov	r0, r3
   184da:	f00c fd5f 	bl	24f9c <conn_cleanup>
		return -ENOTCONN;
   184de:	e7e5      	b.n	184ac <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   184e0:	7a9b      	ldrb	r3, [r3, #10]
   184e2:	2b07      	cmp	r3, #7
   184e4:	d1e2      	bne.n	184ac <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   184e6:	4b07      	ldr	r3, [pc, #28]	; (18504 <bt_conn_prepare_events+0x80>)
   184e8:	2200      	movs	r2, #0
   184ea:	2104      	movs	r1, #4
   184ec:	f00e ff29 	bl	27342 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   184f0:	2301      	movs	r3, #1
   184f2:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   184f6:	2002      	movs	r0, #2
	return ev_count;
   184f8:	e7d9      	b.n	184ae <bt_conn_prepare_events+0x2a>
   184fa:	bf00      	nop
   184fc:	200005f0 	.word	0x200005f0
   18500:	200022ec 	.word	0x200022ec
   18504:	20002268 	.word	0x20002268

00018508 <bt_conn_lookup_handle>:
{
   18508:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1850a:	2101      	movs	r1, #1
   1850c:	4801      	ldr	r0, [pc, #4]	; (18514 <bt_conn_lookup_handle+0xc>)
   1850e:	f00c bda0 	b.w	25052 <conn_lookup_handle>
   18512:	bf00      	nop
   18514:	20002230 	.word	0x20002230

00018518 <bt_conn_set_state>:
{
   18518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   1851a:	7a86      	ldrb	r6, [r0, #10]
   1851c:	428e      	cmp	r6, r1
{
   1851e:	af00      	add	r7, sp, #0
   18520:	4604      	mov	r4, r0
   18522:	460d      	mov	r5, r1
	if (conn->state == state) {
   18524:	d118      	bne.n	18558 <bt_conn_set_state+0x40>
	switch (state) {
   18526:	2e08      	cmp	r6, #8
   18528:	bf96      	itet	ls
   1852a:	4b6d      	ldrls	r3, [pc, #436]	; (186e0 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   1852c:	4b6d      	ldrhi	r3, [pc, #436]	; (186e4 <bt_conn_set_state+0x1cc>)
   1852e:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   18532:	466c      	mov	r4, sp
   18534:	b088      	sub	sp, #32
   18536:	466a      	mov	r2, sp
   18538:	496b      	ldr	r1, [pc, #428]	; (186e8 <bt_conn_set_state+0x1d0>)
   1853a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1853e:	f44f 7300 	mov.w	r3, #512	; 0x200
   18542:	8393      	strh	r3, [r2, #28]
   18544:	4b69      	ldr	r3, [pc, #420]	; (186ec <bt_conn_set_state+0x1d4>)
   18546:	f842 3f10 	str.w	r3, [r2, #16]!
   1854a:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   1854e:	4868      	ldr	r0, [pc, #416]	; (186f0 <bt_conn_set_state+0x1d8>)
   18550:	f00c fd15 	bl	24f7e <z_log_msg_static_create.constprop.0>
   18554:	46a5      	mov	sp, r4
   18556:	e043      	b.n	185e0 <bt_conn_set_state+0xc8>
	conn->state = state;
   18558:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1855a:	b926      	cbnz	r6, 18566 <bt_conn_set_state+0x4e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1855c:	7883      	ldrb	r3, [r0, #2]
   1855e:	2b08      	cmp	r3, #8
   18560:	d001      	beq.n	18566 <bt_conn_set_state+0x4e>
			bt_conn_ref(conn);
   18562:	f00c fd3e 	bl	24fe2 <bt_conn_ref>
	switch (conn->state) {
   18566:	7aa3      	ldrb	r3, [r4, #10]
   18568:	2b08      	cmp	r3, #8
   1856a:	f200 80b3 	bhi.w	186d4 <bt_conn_set_state+0x1bc>
   1856e:	e8df f003 	tbb	[pc, r3]
   18572:	0539      	.short	0x0539
   18574:	37373737 	.word	0x37373737
   18578:	1c37      	.short	0x1c37
   1857a:	37          	.byte	0x37
   1857b:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   1857c:	4d5d      	ldr	r5, [pc, #372]	; (186f4 <bt_conn_set_state+0x1dc>)
		tx->pending_no_cb = 0U;
   1857e:	2600      	movs	r6, #0
	__asm__ volatile(
   18580:	f04f 0240 	mov.w	r2, #64	; 0x40
   18584:	f3ef 8311 	mrs	r3, BASEPRI
   18588:	f382 8812 	msr	BASEPRI_MAX, r2
   1858c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   18590:	69e2      	ldr	r2, [r4, #28]
   18592:	2a00      	cmp	r2, #0
   18594:	d07a      	beq.n	1868c <bt_conn_set_state+0x174>
			conn->pending_no_cb--;
   18596:	3a01      	subs	r2, #1
   18598:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1859a:	f383 8811 	msr	BASEPRI, r3
   1859e:	f3bf 8f6f 	isb	sy
   185a2:	4628      	mov	r0, r5
   185a4:	f005 fe76 	bl	1e294 <z_impl_k_sem_give>
}
   185a8:	e7ea      	b.n	18580 <bt_conn_set_state+0x68>
		if (conn->type == BT_CONN_TYPE_SCO) {
   185aa:	78a3      	ldrb	r3, [r4, #2]
   185ac:	2b04      	cmp	r3, #4
   185ae:	d017      	beq.n	185e0 <bt_conn_set_state+0xc8>
	z_impl_k_queue_init(queue);
   185b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   185b4:	f00e faae 	bl	26b14 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   185b8:	484f      	ldr	r0, [pc, #316]	; (186f8 <bt_conn_set_state+0x1e0>)
   185ba:	2100      	movs	r1, #0
   185bc:	f006 fdb2 	bl	1f124 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   185c0:	2300      	movs	r3, #0
	list->tail = NULL;
   185c2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   185c6:	78e3      	ldrb	r3, [r4, #3]
   185c8:	2b01      	cmp	r3, #1
   185ca:	d109      	bne.n	185e0 <bt_conn_set_state+0xc8>
			conn->le.conn_param_retry_countdown =
   185cc:	2303      	movs	r3, #3
   185ce:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   185d2:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   185d6:	2300      	movs	r3, #0
   185d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   185dc:	f005 ffa2 	bl	1e524 <k_work_schedule>
}
   185e0:	46bd      	mov	sp, r7
   185e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   185e4:	78a3      	ldrb	r3, [r4, #2]
   185e6:	2b04      	cmp	r3, #4
   185e8:	d103      	bne.n	185f2 <bt_conn_set_state+0xda>
			bt_conn_unref(conn);
   185ea:	4620      	mov	r0, r4
   185ec:	f00c fd15 	bl	2501a <bt_conn_unref>
			break;
   185f0:	e7f6      	b.n	185e0 <bt_conn_set_state+0xc8>
		switch (old_state) {
   185f2:	2e08      	cmp	r6, #8
   185f4:	d8f4      	bhi.n	185e0 <bt_conn_set_state+0xc8>
   185f6:	a301      	add	r3, pc, #4	; (adr r3, 185fc <bt_conn_set_state+0xe4>)
   185f8:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   185fc:	00018675 	.word	0x00018675
   18600:	00018621 	.word	0x00018621
   18604:	00018667 	.word	0x00018667
   18608:	000185eb 	.word	0x000185eb
   1860c:	000185eb 	.word	0x000185eb
   18610:	00018667 	.word	0x00018667
   18614:	00018667 	.word	0x00018667
   18618:	000185e1 	.word	0x000185e1
   1861c:	00018675 	.word	0x00018675
			tx_notify(conn);
   18620:	4620      	mov	r0, r4
   18622:	f7ff fcfd 	bl	18020 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18626:	78a3      	ldrb	r3, [r4, #2]
   18628:	2b01      	cmp	r3, #1
   1862a:	d10a      	bne.n	18642 <bt_conn_set_state+0x12a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1862c:	f104 0558 	add.w	r5, r4, #88	; 0x58
   18630:	4628      	mov	r0, r5
   18632:	f00e fb62 	bl	26cfa <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18636:	f010 0f0c 	tst.w	r0, #12
   1863a:	d002      	beq.n	18642 <bt_conn_set_state+0x12a>
				k_work_cancel_delayable(&conn->deferred_work);
   1863c:	4628      	mov	r0, r5
   1863e:	f00e fb5e 	bl	26cfe <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18642:	f3bf 8f5b 	dmb	ish
   18646:	3404      	adds	r4, #4
   18648:	e854 3f00 	ldrex	r3, [r4]
   1864c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18650:	e844 3200 	strex	r2, r3, [r4]
   18654:	2a00      	cmp	r2, #0
   18656:	d1f7      	bne.n	18648 <bt_conn_set_state+0x130>
   18658:	f3bf 8f5b 	dmb	ish
   1865c:	2100      	movs	r1, #0
   1865e:	4826      	ldr	r0, [pc, #152]	; (186f8 <bt_conn_set_state+0x1e0>)
   18660:	f006 fd60 	bl	1f124 <z_impl_k_poll_signal_raise>
   18664:	e7bc      	b.n	185e0 <bt_conn_set_state+0xc8>
			if (conn->err) {
   18666:	7a63      	ldrb	r3, [r4, #9]
   18668:	2b00      	cmp	r3, #0
   1866a:	d0be      	beq.n	185ea <bt_conn_set_state+0xd2>
				notify_connected(conn);
   1866c:	4620      	mov	r0, r4
   1866e:	f7ff fca5 	bl	17fbc <notify_connected>
   18672:	e7ba      	b.n	185ea <bt_conn_set_state+0xd2>
			LOG_WRN("Invalid (%u) old state", state);
   18674:	466c      	mov	r4, sp
   18676:	b088      	sub	sp, #32
   18678:	466a      	mov	r2, sp
   1867a:	4b20      	ldr	r3, [pc, #128]	; (186fc <bt_conn_set_state+0x1e4>)
		LOG_WRN("no valid (%u) state was set", state);
   1867c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18680:	2303      	movs	r3, #3
   18682:	f842 3f10 	str.w	r3, [r2, #16]!
   18686:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1868a:	e760      	b.n	1854e <bt_conn_set_state+0x36>
	return list->head;
   1868c:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1868e:	b921      	cbnz	r1, 1869a <bt_conn_set_state+0x182>
   18690:	f383 8811 	msr	BASEPRI, r3
   18694:	f3bf 8f6f 	isb	sy
		if (!node) {
   18698:	e7a2      	b.n	185e0 <bt_conn_set_state+0xc8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1869a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1869c:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   1869e:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   186a0:	4281      	cmp	r1, r0
	list->tail = node;
   186a2:	bf08      	it	eq
   186a4:	61a2      	streq	r2, [r4, #24]
   186a6:	f383 8811 	msr	BASEPRI, r3
   186aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   186ae:	f04f 0240 	mov.w	r2, #64	; 0x40
   186b2:	f3ef 8311 	mrs	r3, BASEPRI
   186b6:	f382 8812 	msr	BASEPRI_MAX, r2
   186ba:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   186be:	68ca      	ldr	r2, [r1, #12]
   186c0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   186c2:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   186c4:	f383 8811 	msr	BASEPRI, r3
   186c8:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   186cc:	4620      	mov	r0, r4
   186ce:	f7ff fcd7 	bl	18080 <conn_tx_destroy>
   186d2:	e766      	b.n	185a2 <bt_conn_set_state+0x8a>
		LOG_WRN("no valid (%u) state was set", state);
   186d4:	466c      	mov	r4, sp
   186d6:	b088      	sub	sp, #32
   186d8:	466a      	mov	r2, sp
   186da:	4b09      	ldr	r3, [pc, #36]	; (18700 <bt_conn_set_state+0x1e8>)
   186dc:	e7ce      	b.n	1867c <bt_conn_set_state+0x164>
   186de:	bf00      	nop
   186e0:	0002855c 	.word	0x0002855c
   186e4:	0002a005 	.word	0x0002a005
   186e8:	0002a00f 	.word	0x0002a00f
   186ec:	01000003 	.word	0x01000003
   186f0:	00027f94 	.word	0x00027f94
   186f4:	20000488 	.word	0x20000488
   186f8:	200005f0 	.word	0x200005f0
   186fc:	0002a020 	.word	0x0002a020
   18700:	0002a037 	.word	0x0002a037

00018704 <bt_conn_index>:
		index = conn - acl_conns;
   18704:	4b03      	ldr	r3, [pc, #12]	; (18714 <bt_conn_index+0x10>)
   18706:	1ac0      	subs	r0, r0, r3
   18708:	4b03      	ldr	r3, [pc, #12]	; (18718 <bt_conn_index+0x14>)
   1870a:	1180      	asrs	r0, r0, #6
   1870c:	4358      	muls	r0, r3
}
   1870e:	b2c0      	uxtb	r0, r0
   18710:	4770      	bx	lr
   18712:	bf00      	nop
   18714:	20002230 	.word	0x20002230
   18718:	aaaaaaab 	.word	0xaaaaaaab

0001871c <bt_conn_create_pdu_timeout>:
{
   1871c:	b538      	push	{r3, r4, r5, lr}
   1871e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   18720:	4908      	ldr	r1, [pc, #32]	; (18744 <bt_conn_create_pdu_timeout+0x28>)
   18722:	2800      	cmp	r0, #0
   18724:	bf08      	it	eq
   18726:	4608      	moveq	r0, r1
   18728:	f00d fcda 	bl	260e0 <net_buf_alloc_fixed>
	if (!buf) {
   1872c:	4604      	mov	r4, r0
   1872e:	b918      	cbnz	r0, 18738 <bt_conn_create_pdu_timeout+0x1c>
}
   18730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18734:	f7ff bc60 	b.w	17ff8 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   18738:	1d29      	adds	r1, r5, #4
   1873a:	300c      	adds	r0, #12
   1873c:	f00d fcd7 	bl	260ee <net_buf_simple_reserve>
   18740:	4620      	mov	r0, r4
   18742:	bd38      	pop	{r3, r4, r5, pc}
   18744:	20000c84 	.word	0x20000c84

00018748 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   18748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1874a:	f3bf 8f5b 	dmb	ish
   1874e:	6842      	ldr	r2, [r0, #4]
   18750:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18754:	0592      	lsls	r2, r2, #22
{
   18756:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18758:	f100 0304 	add.w	r3, r0, #4
   1875c:	d519      	bpl.n	18792 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   1875e:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18762:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   18766:	4291      	cmp	r1, r2
   18768:	d813      	bhi.n	18792 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   1876a:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   1876e:	4291      	cmp	r1, r2
   18770:	d30f      	bcc.n	18792 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   18772:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   18776:	4291      	cmp	r1, r2
   18778:	d10b      	bne.n	18792 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1877a:	f3bf 8f5b 	dmb	ish
   1877e:	e853 1f00 	ldrex	r1, [r3]
   18782:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   18786:	e843 1200 	strex	r2, r1, [r3]
   1878a:	2a00      	cmp	r2, #0
   1878c:	d1f7      	bne.n	1877e <notify_le_param_updated+0x36>
   1878e:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18792:	4b10      	ldr	r3, [pc, #64]	; (187d4 <notify_le_param_updated+0x8c>)
   18794:	681d      	ldr	r5, [r3, #0]
   18796:	b925      	cbnz	r5, 187a2 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18798:	4d0f      	ldr	r5, [pc, #60]	; (187d8 <notify_le_param_updated+0x90>)
   1879a:	4f10      	ldr	r7, [pc, #64]	; (187dc <notify_le_param_updated+0x94>)
   1879c:	42bd      	cmp	r5, r7
   1879e:	d30c      	bcc.n	187ba <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   187a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   187a2:	68ee      	ldr	r6, [r5, #12]
   187a4:	b13e      	cbz	r6, 187b6 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   187a6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   187aa:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   187ae:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   187b2:	4620      	mov	r0, r4
   187b4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   187b6:	692d      	ldr	r5, [r5, #16]
   187b8:	e7ed      	b.n	18796 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   187ba:	68ee      	ldr	r6, [r5, #12]
   187bc:	b13e      	cbz	r6, 187ce <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   187be:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   187c2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   187c6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   187ca:	4620      	mov	r0, r4
   187cc:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   187ce:	3514      	adds	r5, #20
   187d0:	e7e4      	b.n	1879c <notify_le_param_updated+0x54>
   187d2:	bf00      	nop
   187d4:	20003600 	.word	0x20003600
   187d8:	00027f54 	.word	0x00027f54
   187dc:	00027f54 	.word	0x00027f54

000187e0 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   187e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187e4:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   187e6:	4608      	mov	r0, r1
{
   187e8:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   187ea:	f00c fa56 	bl	24c9a <bt_le_conn_params_valid>
   187ee:	4605      	mov	r5, r0
   187f0:	b918      	cbnz	r0, 187fa <le_param_req+0x1a>
		return false;
   187f2:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   187f4:	4628      	mov	r0, r5
   187f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   187fa:	4b13      	ldr	r3, [pc, #76]	; (18848 <le_param_req+0x68>)
   187fc:	681e      	ldr	r6, [r3, #0]
   187fe:	b946      	cbnz	r6, 18812 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18800:	4e12      	ldr	r6, [pc, #72]	; (1884c <le_param_req+0x6c>)
   18802:	f8df 804c 	ldr.w	r8, [pc, #76]	; 18850 <le_param_req+0x70>
   18806:	4546      	cmp	r6, r8
   18808:	d2f4      	bcs.n	187f4 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1880a:	68b3      	ldr	r3, [r6, #8]
   1880c:	b983      	cbnz	r3, 18830 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1880e:	3614      	adds	r6, #20
   18810:	e7f9      	b.n	18806 <le_param_req+0x26>
		if (!cb->le_param_req) {
   18812:	68b3      	ldr	r3, [r6, #8]
   18814:	b90b      	cbnz	r3, 1881a <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   18816:	6936      	ldr	r6, [r6, #16]
   18818:	e7f1      	b.n	187fe <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1881a:	4621      	mov	r1, r4
   1881c:	4638      	mov	r0, r7
   1881e:	4798      	blx	r3
   18820:	2800      	cmp	r0, #0
   18822:	d0e6      	beq.n	187f2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18824:	4620      	mov	r0, r4
   18826:	f00c fa38 	bl	24c9a <bt_le_conn_params_valid>
   1882a:	2800      	cmp	r0, #0
   1882c:	d1f3      	bne.n	18816 <le_param_req+0x36>
   1882e:	e7e0      	b.n	187f2 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   18830:	4621      	mov	r1, r4
   18832:	4638      	mov	r0, r7
   18834:	4798      	blx	r3
   18836:	2800      	cmp	r0, #0
   18838:	d0db      	beq.n	187f2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1883a:	4620      	mov	r0, r4
   1883c:	f00c fa2d 	bl	24c9a <bt_le_conn_params_valid>
   18840:	2800      	cmp	r0, #0
   18842:	d1e4      	bne.n	1880e <le_param_req+0x2e>
   18844:	e7d5      	b.n	187f2 <le_param_req+0x12>
   18846:	bf00      	nop
   18848:	20003600 	.word	0x20003600
   1884c:	00027f54 	.word	0x00027f54
   18850:	00027f54 	.word	0x00027f54

00018854 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   18854:	4b02      	ldr	r3, [pc, #8]	; (18860 <bt_conn_cb_register+0xc>)
   18856:	681a      	ldr	r2, [r3, #0]
   18858:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1885a:	6018      	str	r0, [r3, #0]
}
   1885c:	4770      	bx	lr
   1885e:	bf00      	nop
   18860:	20003600 	.word	0x20003600

00018864 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   18864:	b538      	push	{r3, r4, r5, lr}
   18866:	4605      	mov	r5, r0
   18868:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1886a:	480a      	ldr	r0, [pc, #40]	; (18894 <bt_conn_add_le+0x30>)
   1886c:	2101      	movs	r1, #1
   1886e:	f7ff fcd3 	bl	18218 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   18872:	b170      	cbz	r0, 18892 <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   18874:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18876:	6823      	ldr	r3, [r4, #0]
   18878:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   1887c:	88a3      	ldrh	r3, [r4, #4]
   1887e:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   18882:	79a3      	ldrb	r3, [r4, #6]
   18884:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18888:	2301      	movs	r3, #1
   1888a:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1888c:	4b02      	ldr	r3, [pc, #8]	; (18898 <bt_conn_add_le+0x34>)
   1888e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18892:	bd38      	pop	{r3, r4, r5, pc}
   18894:	20002230 	.word	0x20002230
   18898:	00280018 	.word	0x00280018

0001889c <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1889c:	b570      	push	{r4, r5, r6, lr}
   1889e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   188a0:	480a      	ldr	r0, [pc, #40]	; (188cc <bt_conn_lookup_addr_le+0x30>)
{
   188a2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   188a4:	f00c fb9d 	bl	24fe2 <bt_conn_ref>
   188a8:	4604      	mov	r4, r0

		if (!conn) {
   188aa:	b120      	cbz	r0, 188b6 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   188ac:	7883      	ldrb	r3, [r0, #2]
   188ae:	2b01      	cmp	r3, #1
   188b0:	d004      	beq.n	188bc <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   188b2:	f00c fbb2 	bl	2501a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   188b6:	2400      	movs	r4, #0
}
   188b8:	4620      	mov	r0, r4
   188ba:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   188bc:	4632      	mov	r2, r6
   188be:	4629      	mov	r1, r5
   188c0:	f00c fbf4 	bl	250ac <bt_conn_is_peer_addr_le>
   188c4:	2800      	cmp	r0, #0
   188c6:	d1f7      	bne.n	188b8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   188c8:	4620      	mov	r0, r4
   188ca:	e7f2      	b.n	188b2 <bt_conn_lookup_addr_le+0x16>
   188cc:	20002230 	.word	0x20002230

000188d0 <bt_conn_exists_le>:
{
   188d0:	b5b0      	push	{r4, r5, r7, lr}
   188d2:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   188d4:	f7ff ffe2 	bl	1889c <bt_conn_lookup_addr_le>
	if (conn) {
   188d8:	4604      	mov	r4, r0
   188da:	b1e0      	cbz	r0, 18916 <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   188dc:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   188de:	2b08      	cmp	r3, #8
   188e0:	bf96      	itet	ls
   188e2:	4a0e      	ldrls	r2, [pc, #56]	; (1891c <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   188e4:	4b0e      	ldrhi	r3, [pc, #56]	; (18920 <bt_conn_exists_le+0x50>)
   188e6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   188ea:	466d      	mov	r5, sp
   188ec:	b088      	sub	sp, #32
   188ee:	466a      	mov	r2, sp
   188f0:	490c      	ldr	r1, [pc, #48]	; (18924 <bt_conn_exists_le+0x54>)
   188f2:	480d      	ldr	r0, [pc, #52]	; (18928 <bt_conn_exists_le+0x58>)
   188f4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   188f8:	f44f 7300 	mov.w	r3, #512	; 0x200
   188fc:	8393      	strh	r3, [r2, #28]
   188fe:	4b0b      	ldr	r3, [pc, #44]	; (1892c <bt_conn_exists_le+0x5c>)
   18900:	f842 3f10 	str.w	r3, [r2, #16]!
   18904:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   18908:	f00c fb39 	bl	24f7e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1890c:	4620      	mov	r0, r4
   1890e:	46ad      	mov	sp, r5
   18910:	f00c fb83 	bl	2501a <bt_conn_unref>
		return true;
   18914:	2001      	movs	r0, #1
}
   18916:	46bd      	mov	sp, r7
   18918:	bdb0      	pop	{r4, r5, r7, pc}
   1891a:	bf00      	nop
   1891c:	0002855c 	.word	0x0002855c
   18920:	0002a005 	.word	0x0002a005
   18924:	0002a053 	.word	0x0002a053
   18928:	00027f94 	.word	0x00027f94
   1892c:	01000003 	.word	0x01000003

00018930 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   18930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18932:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18934:	480e      	ldr	r0, [pc, #56]	; (18970 <bt_conn_lookup_state_le+0x40>)
{
   18936:	460e      	mov	r6, r1
   18938:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1893a:	f00c fb52 	bl	24fe2 <bt_conn_ref>

		if (!conn) {
   1893e:	4604      	mov	r4, r0
   18940:	b120      	cbz	r0, 1894c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18942:	7883      	ldrb	r3, [r0, #2]
   18944:	2b01      	cmp	r3, #1
   18946:	d003      	beq.n	18950 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   18948:	f00c fb67 	bl	2501a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1894c:	2400      	movs	r4, #0
   1894e:	e00d      	b.n	1896c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   18950:	b136      	cbz	r6, 18960 <bt_conn_lookup_state_le+0x30>
   18952:	4632      	mov	r2, r6
   18954:	4629      	mov	r1, r5
   18956:	f00c fba9 	bl	250ac <bt_conn_is_peer_addr_le>
   1895a:	b908      	cbnz	r0, 18960 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1895c:	4620      	mov	r0, r4
   1895e:	e7f3      	b.n	18948 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   18960:	7aa3      	ldrb	r3, [r4, #10]
   18962:	42bb      	cmp	r3, r7
   18964:	d1fa      	bne.n	1895c <bt_conn_lookup_state_le+0x2c>
   18966:	7a23      	ldrb	r3, [r4, #8]
   18968:	42ab      	cmp	r3, r5
   1896a:	d1f7      	bne.n	1895c <bt_conn_lookup_state_le+0x2c>
}
   1896c:	4620      	mov	r0, r4
   1896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18970:	20002230 	.word	0x20002230

00018974 <send_conn_le_param_update>:
{
   18974:	b538      	push	{r3, r4, r5, lr}
   18976:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   18978:	4608      	mov	r0, r1
{
   1897a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1897c:	f00c f98d 	bl	24c9a <bt_le_conn_params_valid>
   18980:	b348      	cbz	r0, 189d6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18982:	4b16      	ldr	r3, [pc, #88]	; (189dc <send_conn_le_param_update+0x68>)
   18984:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   18988:	0799      	lsls	r1, r3, #30
   1898a:	d407      	bmi.n	1899c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1898c:	78e3      	ldrb	r3, [r4, #3]
   1898e:	b183      	cbz	r3, 189b2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   18990:	4629      	mov	r1, r5
   18992:	4620      	mov	r0, r4
}
   18994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18998:	f000 bac8 	b.w	18f2c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1899c:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   189a0:	079a      	lsls	r2, r3, #30
   189a2:	d5f3      	bpl.n	1898c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   189a4:	f3bf 8f5b 	dmb	ish
   189a8:	6863      	ldr	r3, [r4, #4]
   189aa:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   189ae:	055b      	lsls	r3, r3, #21
   189b0:	d4ec      	bmi.n	1898c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   189b2:	4629      	mov	r1, r5
   189b4:	4620      	mov	r0, r4
   189b6:	f00c fb99 	bl	250ec <bt_conn_le_conn_update>
		if (rc == 0) {
   189ba:	b958      	cbnz	r0, 189d4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   189bc:	882b      	ldrh	r3, [r5, #0]
   189be:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   189c2:	886b      	ldrh	r3, [r5, #2]
   189c4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   189c8:	88ab      	ldrh	r3, [r5, #4]
   189ca:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   189ce:	88eb      	ldrh	r3, [r5, #6]
   189d0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   189d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   189d6:	f06f 0015 	mvn.w	r0, #21
   189da:	e7fb      	b.n	189d4 <send_conn_le_param_update+0x60>
   189dc:	20000388 	.word	0x20000388

000189e0 <deferred_work>:
{
   189e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189e4:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   189e6:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   189ea:	af00      	add	r7, sp, #0
   189ec:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   189ee:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   189f2:	bb0b      	cbnz	r3, 18a38 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   189f4:	4630      	mov	r0, r6
   189f6:	f00c fbd6 	bl	251a6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   189fa:	4b3f      	ldr	r3, [pc, #252]	; (18af8 <deferred_work+0x118>)
   189fc:	681d      	ldr	r5, [r3, #0]
   189fe:	b95d      	cbnz	r5, 18a18 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a00:	4d3e      	ldr	r5, [pc, #248]	; (18afc <deferred_work+0x11c>)
   18a02:	f8df 810c 	ldr.w	r8, [pc, #268]	; 18b10 <deferred_work+0x130>
   18a06:	4545      	cmp	r5, r8
   18a08:	d30e      	bcc.n	18a28 <deferred_work+0x48>
		bt_conn_unref(conn);
   18a0a:	4630      	mov	r0, r6
   18a0c:	f00c fb05 	bl	2501a <bt_conn_unref>
}
   18a10:	3708      	adds	r7, #8
   18a12:	46bd      	mov	sp, r7
   18a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   18a18:	686b      	ldr	r3, [r5, #4]
   18a1a:	b11b      	cbz	r3, 18a24 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   18a1c:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   18a20:	4630      	mov	r0, r6
   18a22:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18a24:	692d      	ldr	r5, [r5, #16]
   18a26:	e7ea      	b.n	189fe <deferred_work+0x1e>
		if (cb->disconnected) {
   18a28:	686b      	ldr	r3, [r5, #4]
   18a2a:	b11b      	cbz	r3, 18a34 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   18a2c:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   18a30:	4630      	mov	r0, r6
   18a32:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a34:	3514      	adds	r5, #20
   18a36:	e7e6      	b.n	18a06 <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   18a38:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   18a3c:	2b01      	cmp	r3, #1
   18a3e:	d1e7      	bne.n	18a10 <deferred_work+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18a40:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   18a44:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   18a48:	e855 3f00 	ldrex	r3, [r5]
   18a4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   18a50:	e845 2100 	strex	r1, r2, [r5]
   18a54:	2900      	cmp	r1, #0
   18a56:	d1f7      	bne.n	18a48 <deferred_work+0x68>
   18a58:	f3bf 8f5b 	dmb	ish
   18a5c:	0599      	lsls	r1, r3, #22
   18a5e:	d531      	bpl.n	18ac4 <deferred_work+0xe4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18a60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18a62:	603b      	str	r3, [r7, #0]
   18a64:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18a66:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   18a68:	4639      	mov	r1, r7
   18a6a:	4630      	mov	r0, r6
   18a6c:	f7ff ff82 	bl	18974 <send_conn_le_param_update>
		if (!err) {
   18a70:	b9c0      	cbnz	r0, 18aa4 <deferred_work+0xc4>
   18a72:	f3bf 8f5b 	dmb	ish
   18a76:	e855 3f00 	ldrex	r3, [r5]
   18a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   18a7e:	e845 3200 	strex	r2, r3, [r5]
   18a82:	2a00      	cmp	r2, #0
   18a84:	d1f7      	bne.n	18a76 <deferred_work+0x96>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18a86:	f3bf 8f5b 	dmb	ish
   18a8a:	f3bf 8f5b 	dmb	ish
   18a8e:	e855 3f00 	ldrex	r3, [r5]
   18a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18a96:	e845 3200 	strex	r2, r3, [r5]
   18a9a:	2a00      	cmp	r2, #0
   18a9c:	d1f7      	bne.n	18a8e <deferred_work+0xae>
   18a9e:	f3bf 8f5b 	dmb	ish
   18aa2:	e7b5      	b.n	18a10 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   18aa4:	466c      	mov	r4, sp
   18aa6:	b088      	sub	sp, #32
   18aa8:	466a      	mov	r2, sp
   18aaa:	4b15      	ldr	r3, [pc, #84]	; (18b00 <deferred_work+0x120>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   18aac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18ab0:	2303      	movs	r3, #3
   18ab2:	f842 3f10 	str.w	r3, [r2, #16]!
   18ab6:	4813      	ldr	r0, [pc, #76]	; (18b04 <deferred_work+0x124>)
   18ab8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18abc:	f00c fa5f 	bl	24f7e <z_log_msg_static_create.constprop.0>
   18ac0:	46a5      	mov	sp, r4
   18ac2:	e7e2      	b.n	18a8a <deferred_work+0xaa>
		param = BT_LE_CONN_PARAM(
   18ac4:	4a10      	ldr	r2, [pc, #64]	; (18b08 <deferred_work+0x128>)
   18ac6:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   18aca:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   18ace:	4639      	mov	r1, r7
   18ad0:	4630      	mov	r0, r6
   18ad2:	f7ff ff4f 	bl	18974 <send_conn_le_param_update>
		if (!err) {
   18ad6:	b950      	cbnz	r0, 18aee <deferred_work+0x10e>
   18ad8:	f3bf 8f5b 	dmb	ish
   18adc:	e855 3f00 	ldrex	r3, [r5]
   18ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18ae4:	e845 3200 	strex	r2, r3, [r5]
   18ae8:	2a00      	cmp	r2, #0
   18aea:	d0cc      	beq.n	18a86 <deferred_work+0xa6>
   18aec:	e7f6      	b.n	18adc <deferred_work+0xfc>
			LOG_WRN("Send auto LE param update failed (err %d)",
   18aee:	466c      	mov	r4, sp
   18af0:	b088      	sub	sp, #32
   18af2:	466a      	mov	r2, sp
   18af4:	4b05      	ldr	r3, [pc, #20]	; (18b0c <deferred_work+0x12c>)
   18af6:	e7d9      	b.n	18aac <deferred_work+0xcc>
   18af8:	20003600 	.word	0x20003600
   18afc:	00027f54 	.word	0x00027f54
   18b00:	0002a076 	.word	0x0002a076
   18b04:	00027f94 	.word	0x00027f94
   18b08:	00280018 	.word	0x00280018
   18b0c:	0002a09b 	.word	0x0002a09b
   18b10:	00027f54 	.word	0x00027f54

00018b14 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   18b14:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   18b16:	4801      	ldr	r0, [pc, #4]	; (18b1c <bt_conn_create_frag_timeout+0x8>)
   18b18:	f7ff be00 	b.w	1871c <bt_conn_create_pdu_timeout>
   18b1c:	20000cdc 	.word	0x20000cdc

00018b20 <create_frag>:
{
   18b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b24:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   18b26:	f04f 33ff 	mov.w	r3, #4294967295
   18b2a:	f04f 32ff 	mov.w	r2, #4294967295
   18b2e:	2000      	movs	r0, #0
{
   18b30:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   18b32:	f7ff ffef 	bl	18b14 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   18b36:	7ab3      	ldrb	r3, [r6, #10]
   18b38:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   18b3a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18b3c:	f04f 0600 	mov.w	r6, #0
   18b40:	d005      	beq.n	18b4e <create_frag+0x2e>
		net_buf_unref(frag);
   18b42:	f002 f981 	bl	1ae48 <net_buf_unref>
		return NULL;
   18b46:	4635      	mov	r5, r6
}
   18b48:	4628      	mov	r0, r5
   18b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   18b4e:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   18b50:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   18b54:	4e0c      	ldr	r6, [pc, #48]	; (18b88 <create_frag+0x68>)
   18b56:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18b58:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   18b5c:	f00d fb5b 	bl	26216 <net_buf_simple_tailroom>
   18b60:	4580      	cmp	r8, r0
   18b62:	d20c      	bcs.n	18b7e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   18b64:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18b68:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   18b6c:	4632      	mov	r2, r6
   18b6e:	4638      	mov	r0, r7
   18b70:	f00d fb1c 	bl	261ac <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18b74:	4631      	mov	r1, r6
   18b76:	4620      	mov	r0, r4
   18b78:	f00d fb31 	bl	261de <net_buf_simple_pull>
   18b7c:	e7e4      	b.n	18b48 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   18b7e:	4638      	mov	r0, r7
   18b80:	f00d fb49 	bl	26216 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18b84:	b286      	uxth	r6, r0
   18b86:	e7ef      	b.n	18b68 <create_frag+0x48>
   18b88:	20000388 	.word	0x20000388

00018b8c <bt_conn_process_tx>:
{
   18b8c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18b8e:	7a83      	ldrb	r3, [r0, #10]
{
   18b90:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   18b92:	b993      	cbnz	r3, 18bba <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18b94:	f3bf 8f5b 	dmb	ish
   18b98:	1d03      	adds	r3, r0, #4
   18b9a:	e853 2f00 	ldrex	r2, [r3]
   18b9e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   18ba2:	e843 1500 	strex	r5, r1, [r3]
   18ba6:	2d00      	cmp	r5, #0
   18ba8:	d1f7      	bne.n	18b9a <bt_conn_process_tx+0xe>
   18baa:	f3bf 8f5b 	dmb	ish
   18bae:	0653      	lsls	r3, r2, #25
   18bb0:	d503      	bpl.n	18bba <bt_conn_process_tx+0x2e>
}
   18bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   18bb6:	f00c b9f1 	b.w	24f9c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18bba:	2200      	movs	r2, #0
   18bbc:	2300      	movs	r3, #0
   18bbe:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18bc2:	f00d fa92 	bl	260ea <net_buf_get>
	BT_ASSERT(buf);
   18bc6:	4605      	mov	r5, r0
   18bc8:	b960      	cbnz	r0, 18be4 <bt_conn_process_tx+0x58>
   18bca:	4a24      	ldr	r2, [pc, #144]	; (18c5c <bt_conn_process_tx+0xd0>)
   18bcc:	4924      	ldr	r1, [pc, #144]	; (18c60 <bt_conn_process_tx+0xd4>)
   18bce:	4825      	ldr	r0, [pc, #148]	; (18c64 <bt_conn_process_tx+0xd8>)
   18bd0:	f240 331a 	movw	r3, #794	; 0x31a
   18bd4:	f00b f9fa 	bl	23fcc <assert_print>
   18bd8:	4040      	eors	r0, r0
   18bda:	f380 8811 	msr	BASEPRI, r0
   18bde:	f04f 0003 	mov.w	r0, #3
   18be2:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   18be4:	4e20      	ldr	r6, [pc, #128]	; (18c68 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
   18be6:	8a2a      	ldrh	r2, [r5, #16]
   18be8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   18bec:	429a      	cmp	r2, r3
   18bee:	d807      	bhi.n	18c00 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   18bf0:	2300      	movs	r3, #0
   18bf2:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   18bf4:	4629      	mov	r1, r5
   18bf6:	4620      	mov	r0, r4
   18bf8:	f7ff fa58 	bl	180ac <send_frag>
	if (!send_buf(conn, buf)) {
   18bfc:	b968      	cbnz	r0, 18c1a <bt_conn_process_tx+0x8e>
   18bfe:	e005      	b.n	18c0c <bt_conn_process_tx+0x80>
	frag = create_frag(conn, buf);
   18c00:	4629      	mov	r1, r5
   18c02:	4620      	mov	r0, r4
   18c04:	f7ff ff8c 	bl	18b20 <create_frag>
	if (!frag) {
   18c08:	4601      	mov	r1, r0
   18c0a:	b938      	cbnz	r0, 18c1c <bt_conn_process_tx+0x90>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   18c0c:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   18c0e:	2300      	movs	r3, #0
   18c10:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   18c12:	4628      	mov	r0, r5
   18c14:	f002 f918 	bl	1ae48 <net_buf_unref>
		if (tx) {
   18c18:	b9ce      	cbnz	r6, 18c4e <bt_conn_process_tx+0xc2>
}
   18c1a:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   18c1c:	2301      	movs	r3, #1
   18c1e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18c20:	4620      	mov	r0, r4
   18c22:	f7ff fa43 	bl	180ac <send_frag>
   18c26:	2800      	cmp	r0, #0
   18c28:	d0f0      	beq.n	18c0c <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   18c2a:	8a2a      	ldrh	r2, [r5, #16]
   18c2c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   18c30:	429a      	cmp	r2, r3
   18c32:	d802      	bhi.n	18c3a <bt_conn_process_tx+0xae>
	return send_frag(conn, buf, FRAG_END, false);
   18c34:	2300      	movs	r3, #0
   18c36:	2203      	movs	r2, #3
   18c38:	e7dc      	b.n	18bf4 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   18c3a:	4629      	mov	r1, r5
   18c3c:	4620      	mov	r0, r4
   18c3e:	f7ff ff6f 	bl	18b20 <create_frag>
		if (!frag) {
   18c42:	4601      	mov	r1, r0
   18c44:	2800      	cmp	r0, #0
   18c46:	d0e1      	beq.n	18c0c <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18c48:	2301      	movs	r3, #1
   18c4a:	461a      	mov	r2, r3
   18c4c:	e7e8      	b.n	18c20 <bt_conn_process_tx+0x94>
			conn_tx_destroy(conn, tx);
   18c4e:	4631      	mov	r1, r6
   18c50:	4620      	mov	r0, r4
}
   18c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   18c56:	f7ff ba13 	b.w	18080 <conn_tx_destroy>
   18c5a:	bf00      	nop
   18c5c:	0002a0c5 	.word	0x0002a0c5
   18c60:	0002a62e 	.word	0x0002a62e
   18c64:	00029994 	.word	0x00029994
   18c68:	20000388 	.word	0x20000388

00018c6c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   18c6c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   18c6e:	480c      	ldr	r0, [pc, #48]	; (18ca0 <bt_conn_init+0x34>)
   18c70:	f00d ff50 	bl	26b14 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   18c74:	490b      	ldr	r1, [pc, #44]	; (18ca4 <bt_conn_init+0x38>)
   18c76:	480a      	ldr	r0, [pc, #40]	; (18ca0 <bt_conn_init+0x34>)
   18c78:	f00d ff58 	bl	26b2c <k_queue_append>
   18c7c:	490a      	ldr	r1, [pc, #40]	; (18ca8 <bt_conn_init+0x3c>)
   18c7e:	4808      	ldr	r0, [pc, #32]	; (18ca0 <bt_conn_init+0x34>)
   18c80:	f00d ff54 	bl	26b2c <k_queue_append>
   18c84:	4909      	ldr	r1, [pc, #36]	; (18cac <bt_conn_init+0x40>)
   18c86:	4806      	ldr	r0, [pc, #24]	; (18ca0 <bt_conn_init+0x34>)
   18c88:	f00d ff50 	bl	26b2c <k_queue_append>
	}

	bt_att_init();
   18c8c:	f001 f8a8 	bl	19de0 <bt_att_init>

	err = bt_smp_init();
   18c90:	f00d fa23 	bl	260da <bt_smp_init>
	if (err) {
   18c94:	4604      	mov	r4, r0
   18c96:	b908      	cbnz	r0, 18c9c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   18c98:	f00c fac3 	bl	25222 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   18c9c:	4620      	mov	r0, r4
   18c9e:	bd10      	pop	{r4, pc}
   18ca0:	20000c6c 	.word	0x20000c6c
   18ca4:	200035d0 	.word	0x200035d0
   18ca8:	200035e0 	.word	0x200035e0
   18cac:	200035f0 	.word	0x200035f0

00018cb0 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18cb0:	b580      	push	{r7, lr}
   18cb2:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   18cb4:	b088      	sub	sp, #32
   18cb6:	466a      	mov	r2, sp
   18cb8:	4b06      	ldr	r3, [pc, #24]	; (18cd4 <l2cap_create_le_sig_pdu.part.0+0x24>)
   18cba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18cbe:	2303      	movs	r3, #3
   18cc0:	f842 3f10 	str.w	r3, [r2, #16]!
   18cc4:	4804      	ldr	r0, [pc, #16]	; (18cd8 <l2cap_create_le_sig_pdu.part.0+0x28>)
   18cc6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18cca:	f00c fa38 	bl	2513e <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   18cce:	2000      	movs	r0, #0
   18cd0:	46bd      	mov	sp, r7
   18cd2:	bd80      	pop	{r7, pc}
   18cd4:	0002a16e 	.word	0x0002a16e
   18cd8:	00027fbc 	.word	0x00027fbc

00018cdc <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18cdc:	b580      	push	{r7, lr}
   18cde:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   18ce0:	b088      	sub	sp, #32
   18ce2:	466a      	mov	r2, sp
   18ce4:	4b07      	ldr	r3, [pc, #28]	; (18d04 <l2cap_accept.part.0+0x28>)
   18ce6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18cea:	2303      	movs	r3, #3
   18cec:	f842 3f10 	str.w	r3, [r2, #16]!
   18cf0:	4805      	ldr	r0, [pc, #20]	; (18d08 <l2cap_accept.part.0+0x2c>)
   18cf2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18cf6:	f00c fa22 	bl	2513e <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   18cfa:	f06f 000b 	mvn.w	r0, #11
   18cfe:	46bd      	mov	sp, r7
   18d00:	bd80      	pop	{r7, pc}
   18d02:	bf00      	nop
   18d04:	0002a196 	.word	0x0002a196
   18d08:	00027fbc 	.word	0x00027fbc

00018d0c <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   18d0c:	4b04      	ldr	r3, [pc, #16]	; (18d20 <l2cap_accept+0x14>)
   18d0e:	681a      	ldr	r2, [r3, #0]
   18d10:	b10a      	cbz	r2, 18d16 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   18d12:	f7ff bfe3 	b.w	18cdc <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   18d16:	4803      	ldr	r0, [pc, #12]	; (18d24 <l2cap_accept+0x18>)
   18d18:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   18d1a:	600b      	str	r3, [r1, #0]
}
   18d1c:	4610      	mov	r0, r2
   18d1e:	4770      	bx	lr
   18d20:	20003604 	.word	0x20003604
   18d24:	000285a0 	.word	0x000285a0

00018d28 <bt_l2cap_connected>:
{
   18d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18d2a:	4d24      	ldr	r5, [pc, #144]	; (18dbc <bt_l2cap_connected+0x94>)
   18d2c:	4f24      	ldr	r7, [pc, #144]	; (18dc0 <bt_l2cap_connected+0x98>)
{
   18d2e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18d30:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18d32:	42bd      	cmp	r5, r7
   18d34:	d301      	bcc.n	18d3a <bt_l2cap_connected+0x12>
}
   18d36:	b003      	add	sp, #12
   18d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   18d3a:	686b      	ldr	r3, [r5, #4]
   18d3c:	a901      	add	r1, sp, #4
   18d3e:	4620      	mov	r0, r4
   18d40:	4798      	blx	r3
   18d42:	2800      	cmp	r0, #0
   18d44:	db34      	blt.n	18db0 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   18d46:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   18d48:	882a      	ldrh	r2, [r5, #0]
   18d4a:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   18d4c:	849a      	strh	r2, [r3, #36]	; 0x24
   18d4e:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18d52:	68a8      	ldr	r0, [r5, #8]
   18d54:	f3bf 8f5b 	dmb	ish
   18d58:	e852 1f00 	ldrex	r1, [r2]
   18d5c:	e842 6c00 	strex	ip, r6, [r2]
   18d60:	f1bc 0f00 	cmp.w	ip, #0
   18d64:	d1f8      	bne.n	18d58 <bt_l2cap_connected+0x30>
   18d66:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   18d6a:	609e      	str	r6, [r3, #8]
	return list->tail;
   18d6c:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   18d6e:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   18d72:	b9f9      	cbnz	r1, 18db4 <bt_l2cap_connected+0x8c>
	list->head = node;
   18d74:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   18d78:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   18d7a:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   18d7c:	9801      	ldr	r0, [sp, #4]
   18d7e:	6843      	ldr	r3, [r0, #4]
   18d80:	681b      	ldr	r3, [r3, #0]
   18d82:	b103      	cbz	r3, 18d86 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   18d84:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18d86:	9b01      	ldr	r3, [sp, #4]
   18d88:	f3bf 8f5b 	dmb	ish
   18d8c:	3310      	adds	r3, #16
   18d8e:	e853 1f00 	ldrex	r1, [r3]
   18d92:	f041 0101 	orr.w	r1, r1, #1
   18d96:	e843 1200 	strex	r2, r1, [r3]
   18d9a:	2a00      	cmp	r2, #0
   18d9c:	d1f7      	bne.n	18d8e <bt_l2cap_connected+0x66>
   18d9e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18da2:	9801      	ldr	r0, [sp, #4]
   18da4:	6843      	ldr	r3, [r0, #4]
   18da6:	69db      	ldr	r3, [r3, #28]
   18da8:	b113      	cbz	r3, 18db0 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   18daa:	f100 0110 	add.w	r1, r0, #16
   18dae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18db0:	350c      	adds	r5, #12
   18db2:	e7be      	b.n	18d32 <bt_l2cap_connected+0xa>
	parent->next = child;
   18db4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   18db6:	6562      	str	r2, [r4, #84]	; 0x54
}
   18db8:	e7de      	b.n	18d78 <bt_l2cap_connected+0x50>
   18dba:	bf00      	nop
   18dbc:	00027f30 	.word	0x00027f30
   18dc0:	00027f54 	.word	0x00027f54

00018dc4 <l2cap_recv>:
{
   18dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18dc6:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   18dc8:	8a0b      	ldrh	r3, [r1, #16]
   18dca:	2b03      	cmp	r3, #3
{
   18dcc:	af02      	add	r7, sp, #8
   18dce:	4606      	mov	r6, r0
   18dd0:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18dd2:	d80b      	bhi.n	18dec <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   18dd4:	4b30      	ldr	r3, [pc, #192]	; (18e98 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   18dd6:	617b      	str	r3, [r7, #20]
   18dd8:	2302      	movs	r3, #2
   18dda:	4830      	ldr	r0, [pc, #192]	; (18e9c <l2cap_recv+0xd8>)
   18ddc:	613b      	str	r3, [r7, #16]
   18dde:	f107 0210 	add.w	r2, r7, #16
   18de2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18de6:	f00c f9aa 	bl	2513e <z_log_msg_static_create.constprop.0>
		return 0;
   18dea:	e019      	b.n	18e20 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   18dec:	2104      	movs	r1, #4
   18dee:	f105 000c 	add.w	r0, r5, #12
   18df2:	f00d f9fc 	bl	261ee <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18df6:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   18df8:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   18dfa:	4299      	cmp	r1, r3
   18dfc:	4604      	mov	r4, r0
   18dfe:	d013      	beq.n	18e28 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18e00:	466c      	mov	r4, sp
   18e02:	b088      	sub	sp, #32
   18e04:	aa02      	add	r2, sp, #8
   18e06:	4826      	ldr	r0, [pc, #152]	; (18ea0 <l2cap_recv+0xdc>)
   18e08:	61d3      	str	r3, [r2, #28]
   18e0a:	2304      	movs	r3, #4
   18e0c:	e9c2 0105 	strd	r0, r1, [r2, #20]
   18e10:	f842 3f10 	str.w	r3, [r2, #16]!
   18e14:	4821      	ldr	r0, [pc, #132]	; (18e9c <l2cap_recv+0xd8>)
   18e16:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18e1a:	f00c f990 	bl	2513e <z_log_msg_static_create.constprop.0>
   18e1e:	46a5      	mov	sp, r4
}
   18e20:	2000      	movs	r0, #0
   18e22:	371c      	adds	r7, #28
   18e24:	46bd      	mov	sp, r7
   18e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   18e28:	7843      	ldrb	r3, [r0, #1]
   18e2a:	b90b      	cbnz	r3, 18e30 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   18e2c:	4b1d      	ldr	r3, [pc, #116]	; (18ea4 <l2cap_recv+0xe0>)
   18e2e:	e7d2      	b.n	18dd6 <l2cap_recv+0x12>
	switch (hdr->code) {
   18e30:	7803      	ldrb	r3, [r0, #0]
   18e32:	2b01      	cmp	r3, #1
   18e34:	d0f4      	beq.n	18e20 <l2cap_recv+0x5c>
   18e36:	2b13      	cmp	r3, #19
   18e38:	d103      	bne.n	18e42 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   18e3a:	2901      	cmp	r1, #1
   18e3c:	d8f0      	bhi.n	18e20 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   18e3e:	4b1a      	ldr	r3, [pc, #104]	; (18ea8 <l2cap_recv+0xe4>)
   18e40:	e7c9      	b.n	18dd6 <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   18e42:	466d      	mov	r5, sp
   18e44:	b088      	sub	sp, #32
   18e46:	aa02      	add	r2, sp, #8
   18e48:	4918      	ldr	r1, [pc, #96]	; (18eac <l2cap_recv+0xe8>)
   18e4a:	4814      	ldr	r0, [pc, #80]	; (18e9c <l2cap_recv+0xd8>)
	switch (hdr->code) {
   18e4c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   18e50:	2303      	movs	r3, #3
   18e52:	f842 3f10 	str.w	r3, [r2, #16]!
   18e56:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18e5a:	f00c f970 	bl	2513e <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18e5e:	2202      	movs	r2, #2
   18e60:	7861      	ldrb	r1, [r4, #1]
   18e62:	46ad      	mov	sp, r5
   18e64:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   18e66:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18e68:	f00c f96c 	bl	25144 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18e6c:	4604      	mov	r4, r0
   18e6e:	2800      	cmp	r0, #0
   18e70:	d0d6      	beq.n	18e20 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   18e72:	2102      	movs	r1, #2
   18e74:	300c      	adds	r0, #12
   18e76:	f00d f993 	bl	261a0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18e7a:	2300      	movs	r3, #0
   18e7c:	7003      	strb	r3, [r0, #0]
   18e7e:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18e80:	4622      	mov	r2, r4
   18e82:	9300      	str	r3, [sp, #0]
   18e84:	2105      	movs	r1, #5
   18e86:	4628      	mov	r0, r5
   18e88:	f00c f9a8 	bl	251dc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18e8c:	2800      	cmp	r0, #0
   18e8e:	d0c7      	beq.n	18e20 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   18e90:	4620      	mov	r0, r4
   18e92:	f001 ffd9 	bl	1ae48 <net_buf_unref>
   18e96:	e7c3      	b.n	18e20 <l2cap_recv+0x5c>
   18e98:	0002a1bd 	.word	0x0002a1bd
   18e9c:	00027fbc 	.word	0x00027fbc
   18ea0:	0002a1db 	.word	0x0002a1db
   18ea4:	0002a1fc 	.word	0x0002a1fc
   18ea8:	0002a21d 	.word	0x0002a21d
   18eac:	0002a239 	.word	0x0002a239

00018eb0 <bt_l2cap_recv>:
{
   18eb0:	b5b0      	push	{r4, r5, r7, lr}
   18eb2:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   18eb4:	8a0b      	ldrh	r3, [r1, #16]
   18eb6:	2b03      	cmp	r3, #3
{
   18eb8:	af00      	add	r7, sp, #0
   18eba:	4605      	mov	r5, r0
   18ebc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18ebe:	d810      	bhi.n	18ee2 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   18ec0:	4b17      	ldr	r3, [pc, #92]	; (18f20 <bt_l2cap_recv+0x70>)
   18ec2:	617b      	str	r3, [r7, #20]
   18ec4:	2302      	movs	r3, #2
   18ec6:	4817      	ldr	r0, [pc, #92]	; (18f24 <bt_l2cap_recv+0x74>)
   18ec8:	613b      	str	r3, [r7, #16]
   18eca:	f107 0210 	add.w	r2, r7, #16
   18ece:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18ed2:	f00c f934 	bl	2513e <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   18ed6:	4620      	mov	r0, r4
   18ed8:	f001 ffb6 	bl	1ae48 <net_buf_unref>
}
   18edc:	3718      	adds	r7, #24
   18ede:	46bd      	mov	sp, r7
   18ee0:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   18ee2:	2104      	movs	r1, #4
   18ee4:	f104 000c 	add.w	r0, r4, #12
   18ee8:	f00d f981 	bl	261ee <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18eec:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18eee:	4628      	mov	r0, r5
   18ef0:	f00c f98d 	bl	2520e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18ef4:	b978      	cbnz	r0, 18f16 <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   18ef6:	466d      	mov	r5, sp
   18ef8:	b088      	sub	sp, #32
   18efa:	466a      	mov	r2, sp
   18efc:	4b0a      	ldr	r3, [pc, #40]	; (18f28 <bt_l2cap_recv+0x78>)
   18efe:	4809      	ldr	r0, [pc, #36]	; (18f24 <bt_l2cap_recv+0x74>)
   18f00:	e9c2 3105 	strd	r3, r1, [r2, #20]
   18f04:	2303      	movs	r3, #3
   18f06:	f842 3f10 	str.w	r3, [r2, #16]!
   18f0a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18f0e:	f00c f916 	bl	2513e <z_log_msg_static_create.constprop.0>
   18f12:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   18f14:	e7df      	b.n	18ed6 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   18f16:	6843      	ldr	r3, [r0, #4]
   18f18:	4621      	mov	r1, r4
   18f1a:	695b      	ldr	r3, [r3, #20]
   18f1c:	4798      	blx	r3
   18f1e:	e7da      	b.n	18ed6 <bt_l2cap_recv+0x26>
   18f20:	0002a261 	.word	0x0002a261
   18f24:	00027fbc 	.word	0x00027fbc
   18f28:	0002a27e 	.word	0x0002a27e

00018f2c <bt_l2cap_update_conn_param>:
{
   18f2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   18f2e:	4b17      	ldr	r3, [pc, #92]	; (18f8c <bt_l2cap_update_conn_param+0x60>)
{
   18f30:	460e      	mov	r6, r1
	ident++;
   18f32:	7819      	ldrb	r1, [r3, #0]
   18f34:	3101      	adds	r1, #1
   18f36:	b2c9      	uxtb	r1, r1
   18f38:	2901      	cmp	r1, #1
   18f3a:	bf38      	it	cc
   18f3c:	2101      	movcc	r1, #1
{
   18f3e:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18f40:	2208      	movs	r2, #8
   18f42:	2012      	movs	r0, #18
	ident++;
   18f44:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18f46:	f00c f8fd 	bl	25144 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18f4a:	4604      	mov	r4, r0
   18f4c:	b1d0      	cbz	r0, 18f84 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   18f4e:	2108      	movs	r1, #8
   18f50:	300c      	adds	r0, #12
   18f52:	f00d f925 	bl	261a0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18f56:	8833      	ldrh	r3, [r6, #0]
   18f58:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18f5a:	8873      	ldrh	r3, [r6, #2]
   18f5c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18f5e:	88b3      	ldrh	r3, [r6, #4]
   18f60:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18f62:	88f3      	ldrh	r3, [r6, #6]
   18f64:	80c3      	strh	r3, [r0, #6]
   18f66:	2300      	movs	r3, #0
   18f68:	4628      	mov	r0, r5
   18f6a:	9300      	str	r3, [sp, #0]
   18f6c:	4622      	mov	r2, r4
   18f6e:	2105      	movs	r1, #5
   18f70:	f00c f934 	bl	251dc <bt_l2cap_send_cb>
	if (err) {
   18f74:	4605      	mov	r5, r0
   18f76:	b110      	cbz	r0, 18f7e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   18f78:	4620      	mov	r0, r4
   18f7a:	f001 ff65 	bl	1ae48 <net_buf_unref>
}
   18f7e:	4628      	mov	r0, r5
   18f80:	b002      	add	sp, #8
   18f82:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18f84:	f06f 050b 	mvn.w	r5, #11
   18f88:	e7f9      	b.n	18f7e <bt_l2cap_update_conn_param+0x52>
   18f8a:	bf00      	nop
   18f8c:	2000454d 	.word	0x2000454d

00018f90 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   18f90:	2823      	cmp	r0, #35	; 0x23
   18f92:	d81f      	bhi.n	18fd4 <att_op_get_type+0x44>
   18f94:	281a      	cmp	r0, #26
   18f96:	d804      	bhi.n	18fa2 <att_op_get_type+0x12>
   18f98:	1e43      	subs	r3, r0, #1
   18f9a:	2b18      	cmp	r3, #24
   18f9c:	d90e      	bls.n	18fbc <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   18f9e:	2006      	movs	r0, #6
   18fa0:	4770      	bx	lr
	switch (op) {
   18fa2:	f1a0 031b 	sub.w	r3, r0, #27
   18fa6:	2b08      	cmp	r3, #8
   18fa8:	d81e      	bhi.n	18fe8 <att_op_get_type+0x58>
   18faa:	e8df f003 	tbb	[pc, r3]
   18fae:	1d05      	.short	0x1d05
   18fb0:	191d231b 	.word	0x191d231b
   18fb4:	1d25      	.short	0x1d25
   18fb6:	05          	.byte	0x05
   18fb7:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   18fb8:	2003      	movs	r0, #3
   18fba:	4770      	bx	lr
	switch (op) {
   18fbc:	4a0f      	ldr	r2, [pc, #60]	; (18ffc <att_op_get_type+0x6c>)
   18fbe:	2301      	movs	r3, #1
   18fc0:	4083      	lsls	r3, r0
   18fc2:	401a      	ands	r2, r3
   18fc4:	b9c2      	cbnz	r2, 18ff8 <att_op_get_type+0x68>
   18fc6:	4a0e      	ldr	r2, [pc, #56]	; (19000 <att_op_get_type+0x70>)
   18fc8:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   18fca:	2a00      	cmp	r2, #0
   18fcc:	bf14      	ite	ne
   18fce:	2001      	movne	r0, #1
   18fd0:	2006      	moveq	r0, #6
   18fd2:	4770      	bx	lr
	switch (op) {
   18fd4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   18fd8:	2b52      	cmp	r3, #82	; 0x52
   18fda:	d105      	bne.n	18fe8 <att_op_get_type+0x58>
		return ATT_COMMAND;
   18fdc:	2000      	movs	r0, #0
}
   18fde:	4770      	bx	lr
		return ATT_REQUEST;
   18fe0:	2001      	movs	r0, #1
   18fe2:	4770      	bx	lr
		return ATT_INDICATION;
   18fe4:	2005      	movs	r0, #5
   18fe6:	4770      	bx	lr
		return ATT_COMMAND;
   18fe8:	f010 0f40 	tst.w	r0, #64	; 0x40
   18fec:	bf0c      	ite	eq
   18fee:	2006      	moveq	r0, #6
   18ff0:	2000      	movne	r0, #0
   18ff2:	4770      	bx	lr
	switch (op) {
   18ff4:	2004      	movs	r0, #4
   18ff6:	4770      	bx	lr
		return ATT_RESPONSE;
   18ff8:	2002      	movs	r0, #2
   18ffa:	4770      	bx	lr
   18ffc:	028aaaaa 	.word	0x028aaaaa
   19000:	01455554 	.word	0x01455554

00019004 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   19004:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   19006:	3804      	subs	r0, #4
   19008:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1900a:	a901      	add	r1, sp, #4
   1900c:	4802      	ldr	r0, [pc, #8]	; (19018 <bt_att_released+0x14>)
   1900e:	f00d fcc3 	bl	26998 <k_mem_slab_free>
}
   19012:	b003      	add	sp, #12
   19014:	f85d fb04 	ldr.w	pc, [sp], #4
   19018:	20000b50 	.word	0x20000b50

0001901c <tx_meta_data_free>:
{
   1901c:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   1901e:	2100      	movs	r1, #0
   19020:	4604      	mov	r4, r0
   19022:	2214      	movs	r2, #20
   19024:	f00e f9d8 	bl	273d8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   19028:	4621      	mov	r1, r4
   1902a:	4802      	ldr	r0, [pc, #8]	; (19034 <tx_meta_data_free+0x18>)
}
   1902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   19030:	f00d bd7c 	b.w	26b2c <k_queue_append>
   19034:	20000c54 	.word	0x20000c54

00019038 <find_type_cb>:
{
   19038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1903c:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1903e:	f8d2 a000 	ldr.w	sl, [r2]
{
   19042:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   19044:	f8da 3004 	ldr.w	r3, [sl, #4]
   19048:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1904a:	2500      	movs	r5, #0
   1904c:	f642 0301 	movw	r3, #10241	; 0x2801
{
   19050:	4680      	mov	r8, r0
   19052:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19054:	6800      	ldr	r0, [r0, #0]
   19056:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1905a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1905c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   19060:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19062:	f00b fd1d 	bl	24aa0 <bt_uuid_cmp>
   19066:	2800      	cmp	r0, #0
   19068:	d070      	beq.n	1914c <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1906a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1906e:	f8d8 0000 	ldr.w	r0, [r8]
   19072:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19076:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19078:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1907c:	f00b fd10 	bl	24aa0 <bt_uuid_cmp>
   19080:	b138      	cbz	r0, 19092 <find_type_cb+0x5a>
		if (data->group &&
   19082:	68a3      	ldr	r3, [r4, #8]
   19084:	b11b      	cbz	r3, 1908e <find_type_cb+0x56>
   19086:	885a      	ldrh	r2, [r3, #2]
   19088:	42b2      	cmp	r2, r6
   1908a:	d200      	bcs.n	1908e <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1908c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1908e:	2001      	movs	r0, #1
   19090:	e009      	b.n	190a6 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   19092:	6861      	ldr	r1, [r4, #4]
   19094:	4608      	mov	r0, r1
   19096:	f00c f8cf 	bl	25238 <net_buf_frags_len>
   1909a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1909e:	1a1b      	subs	r3, r3, r0
   190a0:	2b03      	cmp	r3, #3
   190a2:	d804      	bhi.n	190ae <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   190a4:	2000      	movs	r0, #0
}
   190a6:	3744      	adds	r7, #68	; 0x44
   190a8:	46bd      	mov	sp, r7
   190aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   190ae:	4608      	mov	r0, r1
   190b0:	f00d f854 	bl	2615c <net_buf_frag_last>
   190b4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   190b6:	6860      	ldr	r0, [r4, #4]
   190b8:	f00c f8be 	bl	25238 <net_buf_frags_len>
   190bc:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   190c0:	f105 090c 	add.w	r9, r5, #12
   190c4:	ebab 0b00 	sub.w	fp, fp, r0
   190c8:	4648      	mov	r0, r9
   190ca:	f00d f8a4 	bl	26216 <net_buf_simple_tailroom>
   190ce:	4558      	cmp	r0, fp
   190d0:	d93f      	bls.n	19152 <find_type_cb+0x11a>
   190d2:	6860      	ldr	r0, [r4, #4]
   190d4:	f00c f8b0 	bl	25238 <net_buf_frags_len>
   190d8:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   190dc:	1a18      	subs	r0, r3, r0
	if (!len) {
   190de:	b970      	cbnz	r0, 190fe <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   190e0:	6863      	ldr	r3, [r4, #4]
   190e2:	7a98      	ldrb	r0, [r3, #10]
   190e4:	f001 fdee 	bl	1acc4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   190e8:	2200      	movs	r2, #0
   190ea:	2300      	movs	r3, #0
   190ec:	f00c fff8 	bl	260e0 <net_buf_alloc_fixed>
		if (!frag) {
   190f0:	4605      	mov	r5, r0
   190f2:	2800      	cmp	r0, #0
   190f4:	d0d6      	beq.n	190a4 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   190f6:	4601      	mov	r1, r0
   190f8:	6860      	ldr	r0, [r4, #4]
   190fa:	f00d f840 	bl	2617e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   190fe:	2300      	movs	r3, #0
   19100:	9300      	str	r3, [sp, #0]
   19102:	f8d8 a004 	ldr.w	sl, [r8, #4]
   19106:	6878      	ldr	r0, [r7, #4]
   19108:	4641      	mov	r1, r8
   1910a:	2310      	movs	r3, #16
   1910c:	f107 0208 	add.w	r2, r7, #8
   19110:	47d0      	blx	sl
	if (read < 0) {
   19112:	f1b0 0800 	subs.w	r8, r0, #0
   19116:	db19      	blt.n	1914c <find_type_cb+0x114>
	if (read != data->value_len) {
   19118:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1911a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1911c:	4542      	cmp	r2, r8
   1911e:	d03f      	beq.n	191a0 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19120:	4601      	mov	r1, r0
   19122:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   19126:	f00b fce9 	bl	24afc <bt_uuid_create>
   1912a:	b9b0      	cbnz	r0, 1915a <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1912c:	466d      	mov	r5, sp
   1912e:	b088      	sub	sp, #32
   19130:	7c23      	ldrb	r3, [r4, #16]
   19132:	aa02      	add	r2, sp, #8
   19134:	491d      	ldr	r1, [pc, #116]	; (191ac <find_type_cb+0x174>)
   19136:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   1913a:	2303      	movs	r3, #3
   1913c:	f842 3f10 	str.w	r3, [r2, #16]!
   19140:	481b      	ldr	r0, [pc, #108]	; (191b0 <find_type_cb+0x178>)
   19142:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19146:	f00c f969 	bl	2541c <z_log_msg_static_create.constprop.0>
   1914a:	46ad      	mov	sp, r5
	data->group = NULL;
   1914c:	2300      	movs	r3, #0
   1914e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   19150:	e79d      	b.n	1908e <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   19152:	4648      	mov	r0, r9
   19154:	f00d f85f 	bl	26216 <net_buf_simple_tailroom>
   19158:	e7c1      	b.n	190de <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1915a:	fa5f f288 	uxtb.w	r2, r8
   1915e:	f107 0108 	add.w	r1, r7, #8
   19162:	f107 0018 	add.w	r0, r7, #24
   19166:	f00b fcc9 	bl	24afc <bt_uuid_create>
   1916a:	b930      	cbnz	r0, 1917a <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   1916c:	466d      	mov	r5, sp
   1916e:	b088      	sub	sp, #32
   19170:	aa02      	add	r2, sp, #8
   19172:	4b10      	ldr	r3, [pc, #64]	; (191b4 <find_type_cb+0x17c>)
   19174:	e9c2 3805 	strd	r3, r8, [r2, #20]
   19178:	e7df      	b.n	1913a <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1917a:	f107 0118 	add.w	r1, r7, #24
   1917e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   19182:	f00b fc8d 	bl	24aa0 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   19186:	2800      	cmp	r0, #0
   19188:	d1e0      	bne.n	1914c <find_type_cb+0x114>
	data->err = 0x00;
   1918a:	2300      	movs	r3, #0
   1918c:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1918e:	2104      	movs	r1, #4
   19190:	f105 000c 	add.w	r0, r5, #12
   19194:	f00d f804 	bl	261a0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   19198:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1919a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1919c:	68a3      	ldr	r3, [r4, #8]
   1919e:	e775      	b.n	1908c <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   191a0:	f107 0108 	add.w	r1, r7, #8
   191a4:	f00e f8fa 	bl	2739c <memcmp>
   191a8:	e7ed      	b.n	19186 <find_type_cb+0x14e>
   191aa:	bf00      	nop
   191ac:	0002a2ba 	.word	0x0002a2ba
   191b0:	00027f8c 	.word	0x00027f8c
   191b4:	0002a2d9 	.word	0x0002a2d9

000191b8 <chan_send>:
{
   191b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   191bc:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   191be:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   191c2:	68cb      	ldr	r3, [r1, #12]
{
   191c4:	b089      	sub	sp, #36	; 0x24
   191c6:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   191c8:	3090      	adds	r0, #144	; 0x90
   191ca:	2102      	movs	r1, #2
   191cc:	f00c f84e 	bl	2526c <atomic_test_bit>
   191d0:	2800      	cmp	r0, #0
   191d2:	d043      	beq.n	1925c <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   191d4:	781b      	ldrb	r3, [r3, #0]
   191d6:	2bd2      	cmp	r3, #210	; 0xd2
   191d8:	d11a      	bne.n	19210 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   191da:	6833      	ldr	r3, [r6, #0]
   191dc:	4621      	mov	r1, r4
   191de:	6818      	ldr	r0, [r3, #0]
   191e0:	f00c ff78 	bl	260d4 <bt_smp_sign>
		if (err) {
   191e4:	4605      	mov	r5, r0
   191e6:	b198      	cbz	r0, 19210 <chan_send+0x58>
			LOG_ERR("Error signing data");
   191e8:	4b1e      	ldr	r3, [pc, #120]	; (19264 <chan_send+0xac>)
   191ea:	481f      	ldr	r0, [pc, #124]	; (19268 <chan_send+0xb0>)
   191ec:	9307      	str	r3, [sp, #28]
   191ee:	aa06      	add	r2, sp, #24
   191f0:	2302      	movs	r3, #2
   191f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   191f6:	9306      	str	r3, [sp, #24]
   191f8:	f00c f910 	bl	2541c <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   191fc:	69a0      	ldr	r0, [r4, #24]
   191fe:	f7ff ff0d 	bl	1901c <tx_meta_data_free>
			net_buf_unref(buf);
   19202:	4620      	mov	r0, r4
   19204:	f001 fe20 	bl	1ae48 <net_buf_unref>
}
   19208:	4628      	mov	r0, r5
   1920a:	b009      	add	sp, #36	; 0x24
   1920c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   19210:	f104 000c 	add.w	r0, r4, #12
   19214:	f00c fffb 	bl	2620e <net_buf_simple_headroom>
	state->len = buf->len;
   19218:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   1921c:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19220:	6833      	ldr	r3, [r6, #0]
   19222:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   19224:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19226:	4607      	mov	r7, r0
   19228:	7818      	ldrb	r0, [r3, #0]
   1922a:	f7ff feb1 	bl	18f90 <att_op_get_type>
	switch (op_type) {
   1922e:	2805      	cmp	r0, #5
   19230:	bf96      	itet	ls
   19232:	4b0e      	ldrls	r3, [pc, #56]	; (1926c <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   19234:	4b0e      	ldrhi	r3, [pc, #56]	; (19270 <chan_send+0xb8>)
   19236:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1923a:	f8cd 9000 	str.w	r9, [sp]
   1923e:	4628      	mov	r0, r5
   19240:	4622      	mov	r2, r4
   19242:	2104      	movs	r1, #4
   19244:	f00b ffca 	bl	251dc <bt_l2cap_send_cb>
	if (err) {
   19248:	4605      	mov	r5, r0
   1924a:	2800      	cmp	r0, #0
   1924c:	d0dc      	beq.n	19208 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1924e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   19250:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   19254:	fa13 f787 	uxtah	r7, r3, r7
   19258:	60e7      	str	r7, [r4, #12]
}
   1925a:	e7d5      	b.n	19208 <chan_send+0x50>
		return -EINVAL;
   1925c:	f06f 0515 	mvn.w	r5, #21
   19260:	e7d2      	b.n	19208 <chan_send+0x50>
   19262:	bf00      	nop
   19264:	0002a2f8 	.word	0x0002a2f8
   19268:	00027f8c 	.word	0x00027f8c
   1926c:	000285c8 	.word	0x000285c8
   19270:	00025811 	.word	0x00025811

00019274 <att_get>:
{
   19274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   19276:	7a83      	ldrb	r3, [r0, #10]
   19278:	2b07      	cmp	r3, #7
   1927a:	d00d      	beq.n	19298 <att_get+0x24>
		LOG_WRN("Not connected");
   1927c:	4b0e      	ldr	r3, [pc, #56]	; (192b8 <att_get+0x44>)
   1927e:	9305      	str	r3, [sp, #20]
   19280:	2302      	movs	r3, #2
   19282:	9304      	str	r3, [sp, #16]
   19284:	aa04      	add	r2, sp, #16
   19286:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   1928a:	480c      	ldr	r0, [pc, #48]	; (192bc <att_get+0x48>)
   1928c:	f00c f8c6 	bl	2541c <z_log_msg_static_create.constprop.0>
		return NULL;
   19290:	2000      	movs	r0, #0
}
   19292:	b007      	add	sp, #28
   19294:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19298:	2104      	movs	r1, #4
   1929a:	f00b ffb8 	bl	2520e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1929e:	b938      	cbnz	r0, 192b0 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   192a0:	4b07      	ldr	r3, [pc, #28]	; (192c0 <att_get+0x4c>)
   192a2:	9305      	str	r3, [sp, #20]
   192a4:	2302      	movs	r3, #2
   192a6:	9304      	str	r3, [sp, #16]
   192a8:	aa04      	add	r2, sp, #16
   192aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   192ae:	e7ec      	b.n	1928a <att_get+0x16>
	return att_chan->att;
   192b0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   192b4:	e7ed      	b.n	19292 <att_get+0x1e>
   192b6:	bf00      	nop
   192b8:	0002a30b 	.word	0x0002a30b
   192bc:	00027f8c 	.word	0x00027f8c
   192c0:	0002a319 	.word	0x0002a319

000192c4 <bt_att_connected>:
{
   192c4:	b510      	push	{r4, lr}
   192c6:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   192ca:	4604      	mov	r4, r0
   192cc:	f3bf 8f5b 	dmb	ish
   192d0:	e853 1f00 	ldrex	r1, [r3]
   192d4:	f041 0104 	orr.w	r1, r1, #4
   192d8:	e843 1200 	strex	r2, r1, [r3]
   192dc:	2a00      	cmp	r2, #0
   192de:	d1f7      	bne.n	192d0 <bt_att_connected+0xc>
   192e0:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   192e4:	2317      	movs	r3, #23
   192e6:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   192e8:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   192ea:	1f20      	subs	r0, r4, #4
   192ec:	f00c f803 	bl	252f6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   192f0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   192f4:	4903      	ldr	r1, [pc, #12]	; (19304 <bt_att_connected+0x40>)
   192f6:	f00d fcf4 	bl	26ce2 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   192fa:	6820      	ldr	r0, [r4, #0]
}
   192fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   19300:	f001 bc72 	b.w	1abe8 <bt_gatt_connected>
   19304:	00019fe9 	.word	0x00019fe9

00019308 <read_group_cb>:
{
   19308:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1930c:	4605      	mov	r5, r0
   1930e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19310:	f04f 0800 	mov.w	r8, #0
   19314:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19318:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1931a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1931c:	f88d 8008 	strb.w	r8, [sp, #8]
   19320:	a902      	add	r1, sp, #8
{
   19322:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19324:	f8ad 300a 	strh.w	r3, [sp, #10]
   19328:	f00b fbba 	bl	24aa0 <bt_uuid_cmp>
   1932c:	b1a0      	cbz	r0, 19358 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1932e:	f642 0301 	movw	r3, #10241	; 0x2801
   19332:	6828      	ldr	r0, [r5, #0]
   19334:	f88d 800c 	strb.w	r8, [sp, #12]
   19338:	a903      	add	r1, sp, #12
   1933a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1933e:	f00b fbaf 	bl	24aa0 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19342:	b148      	cbz	r0, 19358 <read_group_cb+0x50>
		if (data->group &&
   19344:	6923      	ldr	r3, [r4, #16]
   19346:	b11b      	cbz	r3, 19350 <read_group_cb+0x48>
   19348:	885a      	ldrh	r2, [r3, #2]
   1934a:	42b2      	cmp	r2, r6
   1934c:	d200      	bcs.n	19350 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1934e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19350:	2001      	movs	r0, #1
}
   19352:	b004      	add	sp, #16
   19354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19358:	6861      	ldr	r1, [r4, #4]
   1935a:	6828      	ldr	r0, [r5, #0]
   1935c:	f00b fba0 	bl	24aa0 <bt_uuid_cmp>
   19360:	b110      	cbz	r0, 19368 <read_group_cb+0x60>
		data->group = NULL;
   19362:	2300      	movs	r3, #0
   19364:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   19366:	e7f3      	b.n	19350 <read_group_cb+0x48>
	if (data->rsp->len &&
   19368:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1936a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1936c:	781a      	ldrb	r2, [r3, #0]
   1936e:	b132      	cbz	r2, 1937e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19370:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   19372:	8a01      	ldrh	r1, [r0, #16]
   19374:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   19376:	4293      	cmp	r3, r2
   19378:	da01      	bge.n	1937e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1937a:	2000      	movs	r0, #0
   1937c:	e7e9      	b.n	19352 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1937e:	2104      	movs	r1, #4
   19380:	300c      	adds	r0, #12
   19382:	f00c ff0d 	bl	261a0 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   19386:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19388:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1938a:	6923      	ldr	r3, [r4, #16]
   1938c:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1938e:	4b08      	ldr	r3, [pc, #32]	; (193b0 <read_group_cb+0xa8>)
   19390:	9300      	str	r3, [sp, #0]
   19392:	9401      	str	r4, [sp, #4]
   19394:	68a2      	ldr	r2, [r4, #8]
   19396:	2300      	movs	r3, #0
   19398:	4629      	mov	r1, r5
   1939a:	4638      	mov	r0, r7
   1939c:	f00c f882 	bl	254a4 <att_chan_read>
	if (read < 0) {
   193a0:	2800      	cmp	r0, #0
   193a2:	dbea      	blt.n	1937a <read_group_cb+0x72>
	if (!data->group) {
   193a4:	6920      	ldr	r0, [r4, #16]
   193a6:	3800      	subs	r0, #0
   193a8:	bf18      	it	ne
   193aa:	2001      	movne	r0, #1
   193ac:	e7d1      	b.n	19352 <read_group_cb+0x4a>
   193ae:	bf00      	nop
   193b0:	0002535d 	.word	0x0002535d

000193b4 <read_type_cb>:
{
   193b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   193b8:	6817      	ldr	r7, [r2, #0]
{
   193ba:	4605      	mov	r5, r0
   193bc:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   193be:	6800      	ldr	r0, [r0, #0]
   193c0:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   193c2:	687e      	ldr	r6, [r7, #4]
{
   193c4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   193c6:	f00b fb6b 	bl	24aa0 <bt_uuid_cmp>
   193ca:	4681      	mov	r9, r0
   193cc:	2800      	cmp	r0, #0
   193ce:	d13c      	bne.n	1944a <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   193d0:	4630      	mov	r0, r6
   193d2:	2295      	movs	r2, #149	; 0x95
   193d4:	4629      	mov	r1, r5
   193d6:	f00c fd63 	bl	25ea0 <bt_gatt_check_perm>
   193da:	4606      	mov	r6, r0
   193dc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   193de:	b140      	cbz	r0, 193f2 <read_type_cb+0x3e>
		if (data->rsp->len) {
   193e0:	68e3      	ldr	r3, [r4, #12]
   193e2:	781b      	ldrb	r3, [r3, #0]
   193e4:	b10b      	cbz	r3, 193ea <read_type_cb+0x36>
			data->err = 0x00;
   193e6:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   193ea:	2000      	movs	r0, #0
}
   193ec:	b003      	add	sp, #12
   193ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   193f2:	68a0      	ldr	r0, [r4, #8]
   193f4:	f00c feb2 	bl	2615c <net_buf_frag_last>
   193f8:	2102      	movs	r1, #2
   193fa:	300c      	adds	r0, #12
   193fc:	f00c fed0 	bl	261a0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19400:	4b13      	ldr	r3, [pc, #76]	; (19450 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19402:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   19404:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19408:	9300      	str	r3, [sp, #0]
   1940a:	9401      	str	r4, [sp, #4]
   1940c:	68a2      	ldr	r2, [r4, #8]
   1940e:	4633      	mov	r3, r6
   19410:	4629      	mov	r1, r5
   19412:	4638      	mov	r0, r7
   19414:	f00c f846 	bl	254a4 <att_chan_read>
	if (read < 0) {
   19418:	2800      	cmp	r0, #0
   1941a:	da07      	bge.n	1942c <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1941c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   19420:	bf26      	itte	cs
   19422:	4240      	negcs	r0, r0
   19424:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   19426:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   19428:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1942a:	e7de      	b.n	193ea <read_type_cb+0x36>
	if (!data->item) {
   1942c:	6923      	ldr	r3, [r4, #16]
   1942e:	2b00      	cmp	r3, #0
   19430:	d0db      	beq.n	193ea <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19432:	68a0      	ldr	r0, [r4, #8]
   19434:	f00b ff00 	bl	25238 <net_buf_frags_len>
   19438:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1943a:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1943c:	68e3      	ldr	r3, [r4, #12]
   1943e:	781b      	ldrb	r3, [r3, #0]
   19440:	4298      	cmp	r0, r3
   19442:	bf94      	ite	ls
   19444:	2000      	movls	r0, #0
   19446:	2001      	movhi	r0, #1
   19448:	e7d0      	b.n	193ec <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1944a:	2001      	movs	r0, #1
   1944c:	e7ce      	b.n	193ec <read_type_cb+0x38>
   1944e:	bf00      	nop
   19450:	00025249 	.word	0x00025249

00019454 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   19454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19458:	b082      	sub	sp, #8
   1945a:	af00      	add	r7, sp, #0
   1945c:	4604      	mov	r4, r0
   1945e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   19460:	483d      	ldr	r0, [pc, #244]	; (19558 <bt_att_accept+0x104>)
   19462:	2200      	movs	r2, #0
   19464:	2300      	movs	r3, #0
   19466:	4639      	mov	r1, r7
   19468:	f004 fd26 	bl	1deb8 <k_mem_slab_alloc>
   1946c:	4605      	mov	r5, r0
   1946e:	b1a8      	cbz	r0, 1949c <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   19470:	466d      	mov	r5, sp
   19472:	b088      	sub	sp, #32
   19474:	466a      	mov	r2, sp
   19476:	4b39      	ldr	r3, [pc, #228]	; (1955c <bt_att_accept+0x108>)
   19478:	4839      	ldr	r0, [pc, #228]	; (19560 <bt_att_accept+0x10c>)
   1947a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1947e:	2303      	movs	r3, #3
   19480:	f842 3f10 	str.w	r3, [r2, #16]!
   19484:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19488:	f00b ffc8 	bl	2541c <z_log_msg_static_create.constprop.0>
   1948c:	46ad      	mov	sp, r5
		return -ENOMEM;
   1948e:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   19492:	4628      	mov	r0, r5
   19494:	3708      	adds	r7, #8
   19496:	46bd      	mov	sp, r7
   19498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1949c:	f005 fb5e 	bl	1eb5c <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   194a0:	4b30      	ldr	r3, [pc, #192]	; (19564 <bt_att_accept+0x110>)
	(void)memset(att, 0, sizeof(*att));
   194a2:	f8d7 8000 	ldr.w	r8, [r7]
	att_handle_rsp_thread = k_current_get();
   194a6:	6018      	str	r0, [r3, #0]
   194a8:	4629      	mov	r1, r5
   194aa:	2228      	movs	r2, #40	; 0x28
   194ac:	f108 0004 	add.w	r0, r8, #4
   194b0:	f00d ff92 	bl	273d8 <memset>
	att->conn = conn;
   194b4:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   194b8:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   194ba:	482b      	ldr	r0, [pc, #172]	; (19568 <bt_att_accept+0x114>)
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   194bc:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   194be:	e9c4 5501 	strd	r5, r5, [r4, #4]
   194c2:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   194c6:	2200      	movs	r2, #0
   194c8:	2300      	movs	r3, #0
   194ca:	1d39      	adds	r1, r7, #4
   194cc:	f004 fcf4 	bl	1deb8 <k_mem_slab_alloc>
   194d0:	4605      	mov	r5, r0
   194d2:	b180      	cbz	r0, 194f6 <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   194d4:	6823      	ldr	r3, [r4, #0]
   194d6:	466c      	mov	r4, sp
   194d8:	b088      	sub	sp, #32
   194da:	466a      	mov	r2, sp
   194dc:	4923      	ldr	r1, [pc, #140]	; (1956c <bt_att_accept+0x118>)
   194de:	4820      	ldr	r0, [pc, #128]	; (19560 <bt_att_accept+0x10c>)
   194e0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   194e4:	2303      	movs	r3, #3
   194e6:	f842 3f10 	str.w	r3, [r2, #16]!
   194ea:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   194ee:	f00b ff95 	bl	2541c <z_log_msg_static_create.constprop.0>
   194f2:	46a5      	mov	sp, r4
	if (!chan) {
   194f4:	e7cb      	b.n	1948e <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   194f6:	687b      	ldr	r3, [r7, #4]
   194f8:	4601      	mov	r1, r0
   194fa:	22e8      	movs	r2, #232	; 0xe8
   194fc:	4618      	mov	r0, r3
   194fe:	f00d ff6b 	bl	273d8 <memset>
	chan->chan.chan.ops = &ops;
   19502:	4a1b      	ldr	r2, [pc, #108]	; (19570 <bt_att_accept+0x11c>)
   19504:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   19506:	3098      	adds	r0, #152	; 0x98
   19508:	f00d fb04 	bl	26b14 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1950c:	687b      	ldr	r3, [r7, #4]
   1950e:	f3bf 8f5b 	dmb	ish
   19512:	3390      	adds	r3, #144	; 0x90
   19514:	e853 2f00 	ldrex	r2, [r3]
   19518:	e843 5100 	strex	r1, r5, [r3]
   1951c:	2900      	cmp	r1, #0
   1951e:	d1f9      	bne.n	19514 <bt_att_accept+0xc0>
   19520:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19524:	687b      	ldr	r3, [r7, #4]
   19526:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   19528:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1952a:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1952e:	b91b      	cbnz	r3, 19538 <bt_att_accept+0xe4>
   19530:	f104 000c 	add.w	r0, r4, #12
   19534:	f00d faee 	bl	26b14 <z_impl_k_queue_init>
	return list->head;
   19538:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   1953a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   1953e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   19540:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   19544:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   19546:	b902      	cbnz	r2, 1954a <bt_att_accept+0xf6>
	list->tail = node;
   19548:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1954a:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1954c:	2b00      	cmp	r3, #0
   1954e:	d09e      	beq.n	1948e <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   19550:	3304      	adds	r3, #4
   19552:	6033      	str	r3, [r6, #0]
	return 0;
   19554:	e79d      	b.n	19492 <bt_att_accept+0x3e>
   19556:	bf00      	nop
   19558:	20000b34 	.word	0x20000b34
   1955c:	0002a334 	.word	0x0002a334
   19560:	00027f8c 	.word	0x00027f8c
   19564:	200036cc 	.word	0x200036cc
   19568:	20000b50 	.word	0x20000b50
   1956c:	0002a359 	.word	0x0002a359
   19570:	20000600 	.word	0x20000600

00019574 <bt_att_chan_create_pdu>:
{
   19574:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   19578:	b086      	sub	sp, #24
   1957a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1957c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1957e:	1c53      	adds	r3, r2, #1
   19580:	428b      	cmp	r3, r1
{
   19582:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19584:	d915      	bls.n	195b2 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   19586:	466c      	mov	r4, sp
   19588:	b088      	sub	sp, #32
   1958a:	466a      	mov	r2, sp
   1958c:	4829      	ldr	r0, [pc, #164]	; (19634 <bt_att_chan_create_pdu+0xc0>)
   1958e:	61d3      	str	r3, [r2, #28]
   19590:	2304      	movs	r3, #4
   19592:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19596:	f842 3f10 	str.w	r3, [r2, #16]!
   1959a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1959e:	4826      	ldr	r0, [pc, #152]	; (19638 <bt_att_chan_create_pdu+0xc4>)
   195a0:	f00b ff3c 	bl	2541c <z_log_msg_static_create.constprop.0>
   195a4:	46a5      	mov	sp, r4
		return NULL;
   195a6:	2400      	movs	r4, #0
}
   195a8:	4620      	mov	r0, r4
   195aa:	3718      	adds	r7, #24
   195ac:	46bd      	mov	sp, r7
   195ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   195b2:	4628      	mov	r0, r5
   195b4:	f7ff fcec 	bl	18f90 <att_op_get_type>
   195b8:	2802      	cmp	r0, #2
   195ba:	d019      	beq.n	195f0 <bt_att_chan_create_pdu+0x7c>
   195bc:	2804      	cmp	r0, #4
   195be:	d017      	beq.n	195f0 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   195c0:	f04f 38ff 	mov.w	r8, #4294967295
   195c4:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   195c8:	2100      	movs	r1, #0
   195ca:	4642      	mov	r2, r8
   195cc:	464b      	mov	r3, r9
   195ce:	4608      	mov	r0, r1
   195d0:	f00b fe01 	bl	251d6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   195d4:	4604      	mov	r4, r0
   195d6:	b980      	cbnz	r0, 195fa <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   195d8:	466c      	mov	r4, sp
   195da:	b088      	sub	sp, #32
   195dc:	466a      	mov	r2, sp
   195de:	4b17      	ldr	r3, [pc, #92]	; (1963c <bt_att_chan_create_pdu+0xc8>)
   195e0:	e9c2 3505 	strd	r3, r5, [r2, #20]
   195e4:	2303      	movs	r3, #3
   195e6:	f842 3f10 	str.w	r3, [r2, #16]!
   195ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   195ee:	e7d6      	b.n	1959e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   195f0:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   195f4:	f04f 0900 	mov.w	r9, #0
   195f8:	e7e6      	b.n	195c8 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   195fa:	4811      	ldr	r0, [pc, #68]	; (19640 <bt_att_chan_create_pdu+0xcc>)
   195fc:	4642      	mov	r2, r8
   195fe:	464b      	mov	r3, r9
   19600:	f004 fe14 	bl	1e22c <z_impl_k_queue_get>
	if (!data) {
   19604:	b970      	cbnz	r0, 19624 <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   19606:	4b0f      	ldr	r3, [pc, #60]	; (19644 <bt_att_chan_create_pdu+0xd0>)
   19608:	617b      	str	r3, [r7, #20]
   1960a:	2302      	movs	r3, #2
   1960c:	480a      	ldr	r0, [pc, #40]	; (19638 <bt_att_chan_create_pdu+0xc4>)
   1960e:	613b      	str	r3, [r7, #16]
   19610:	f107 0210 	add.w	r2, r7, #16
   19614:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19618:	f00b ff00 	bl	2541c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1961c:	4620      	mov	r0, r4
   1961e:	f001 fc13 	bl	1ae48 <net_buf_unref>
		return NULL;
   19622:	e7c0      	b.n	195a6 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   19624:	61a0      	str	r0, [r4, #24]
   19626:	2101      	movs	r1, #1
   19628:	f104 000c 	add.w	r0, r4, #12
   1962c:	f00c fdb8 	bl	261a0 <net_buf_simple_add>
	hdr->code = op;
   19630:	7005      	strb	r5, [r0, #0]
	return buf;
   19632:	e7b9      	b.n	195a8 <bt_att_chan_create_pdu+0x34>
   19634:	0002a37e 	.word	0x0002a37e
   19638:	00027f8c 	.word	0x00027f8c
   1963c:	0002a16e 	.word	0x0002a16e
   19640:	20000c54 	.word	0x20000c54
   19644:	0002a3a3 	.word	0x0002a3a3

00019648 <bt_att_recv>:
{
   19648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1964c:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1964e:	8a0b      	ldrh	r3, [r1, #16]
{
   19650:	af00      	add	r7, sp, #0
   19652:	4682      	mov	sl, r0
   19654:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19656:	b97b      	cbnz	r3, 19678 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   19658:	4b4c      	ldr	r3, [pc, #304]	; (1978c <bt_att_recv+0x144>)
   1965a:	617b      	str	r3, [r7, #20]
   1965c:	2302      	movs	r3, #2
   1965e:	613b      	str	r3, [r7, #16]
   19660:	f107 0210 	add.w	r2, r7, #16
   19664:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   19668:	4849      	ldr	r0, [pc, #292]	; (19790 <bt_att_recv+0x148>)
   1966a:	f00b fed7 	bl	2541c <z_log_msg_static_create.constprop.0>
}
   1966e:	2000      	movs	r0, #0
   19670:	371c      	adds	r7, #28
   19672:	46bd      	mov	sp, r7
   19674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19678:	2101      	movs	r1, #1
   1967a:	f104 000c 	add.w	r0, r4, #12
   1967e:	f00c fdb6 	bl	261ee <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   19682:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   19686:	4605      	mov	r5, r0
   19688:	2b00      	cmp	r3, #0
   1968a:	d0f0      	beq.n	1966e <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1968c:	7801      	ldrb	r1, [r0, #0]
   1968e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 197a4 <bt_att_recv+0x15c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   19692:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19696:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   19698:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1969c:	4288      	cmp	r0, r1
   1969e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   196a2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   196a6:	d114      	bne.n	196d2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   196a8:	f892 9002 	ldrb.w	r9, [r2, #2]
   196ac:	f1b9 0f01 	cmp.w	r9, #1
   196b0:	d131      	bne.n	19716 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   196b2:	2100      	movs	r1, #0
   196b4:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   196b8:	f00b ff9a 	bl	255f0 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   196bc:	2800      	cmp	r0, #0
   196be:	d035      	beq.n	1972c <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   196c0:	4b34      	ldr	r3, [pc, #208]	; (19794 <bt_att_recv+0x14c>)
   196c2:	617b      	str	r3, [r7, #20]
   196c4:	2302      	movs	r3, #2
   196c6:	613b      	str	r3, [r7, #16]
   196c8:	f107 0210 	add.w	r2, r7, #16
   196cc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   196d0:	e7ca      	b.n	19668 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   196d2:	3301      	adds	r3, #1
   196d4:	2b0e      	cmp	r3, #14
   196d6:	d1df      	bne.n	19698 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   196d8:	466c      	mov	r4, sp
   196da:	b088      	sub	sp, #32
   196dc:	466a      	mov	r2, sp
   196de:	4b2e      	ldr	r3, [pc, #184]	; (19798 <bt_att_recv+0x150>)
   196e0:	482b      	ldr	r0, [pc, #172]	; (19790 <bt_att_recv+0x148>)
   196e2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   196e6:	2303      	movs	r3, #3
   196e8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   196ec:	f842 3f10 	str.w	r3, [r2, #16]!
   196f0:	f00b fe94 	bl	2541c <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   196f4:	7829      	ldrb	r1, [r5, #0]
   196f6:	46a5      	mov	sp, r4
   196f8:	4608      	mov	r0, r1
   196fa:	f7ff fc49 	bl	18f90 <att_op_get_type>
   196fe:	2800      	cmp	r0, #0
   19700:	d0b5      	beq.n	1966e <bt_att_recv+0x26>
   19702:	2805      	cmp	r0, #5
   19704:	d0b3      	beq.n	1966e <bt_att_recv+0x26>
	if (!req) {
   19706:	2900      	cmp	r1, #0
   19708:	d0b1      	beq.n	1966e <bt_att_recv+0x26>
   1970a:	2306      	movs	r3, #6
   1970c:	2200      	movs	r2, #0
   1970e:	4630      	mov	r0, r6
   19710:	f00c f8ec 	bl	258ec <send_err_rsp.part.0>
   19714:	e7ab      	b.n	1966e <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   19716:	f1b9 0f05 	cmp.w	r9, #5
   1971a:	d107      	bne.n	1972c <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   1971c:	2101      	movs	r1, #1
   1971e:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   19722:	f00b ff65 	bl	255f0 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   19726:	b108      	cbz	r0, 1972c <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   19728:	4b1c      	ldr	r3, [pc, #112]	; (1979c <bt_att_recv+0x154>)
   1972a:	e7ca      	b.n	196c2 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   1972c:	44d8      	add	r8, fp
   1972e:	8a23      	ldrh	r3, [r4, #16]
   19730:	f898 2001 	ldrb.w	r2, [r8, #1]
   19734:	429a      	cmp	r2, r3
   19736:	d916      	bls.n	19766 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19738:	46e9      	mov	r9, sp
   1973a:	b088      	sub	sp, #32
   1973c:	7829      	ldrb	r1, [r5, #0]
   1973e:	466a      	mov	r2, sp
   19740:	4817      	ldr	r0, [pc, #92]	; (197a0 <bt_att_recv+0x158>)
   19742:	61d1      	str	r1, [r2, #28]
   19744:	2404      	movs	r4, #4
   19746:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1974a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1974e:	f842 4f10 	str.w	r4, [r2, #16]!
   19752:	480f      	ldr	r0, [pc, #60]	; (19790 <bt_att_recv+0x148>)
   19754:	f00b fe62 	bl	2541c <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   19758:	f898 3002 	ldrb.w	r3, [r8, #2]
   1975c:	2b01      	cmp	r3, #1
   1975e:	46cd      	mov	sp, r9
   19760:	d185      	bne.n	1966e <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   19762:	4623      	mov	r3, r4
   19764:	e00c      	b.n	19780 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   19766:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1976a:	4621      	mov	r1, r4
   1976c:	4630      	mov	r0, r6
   1976e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   19770:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   19774:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   19776:	f47f af7a 	bne.w	1966e <bt_att_recv+0x26>
   1977a:	2800      	cmp	r0, #0
   1977c:	f43f af77 	beq.w	1966e <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   19780:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   19782:	2900      	cmp	r1, #0
   19784:	f43f af73 	beq.w	1966e <bt_att_recv+0x26>
   19788:	e7c0      	b.n	1970c <bt_att_recv+0xc4>
   1978a:	bf00      	nop
   1978c:	0002a3c2 	.word	0x0002a3c2
   19790:	00027f8c 	.word	0x00027f8c
   19794:	0002a3f7 	.word	0x0002a3f7
   19798:	0002a3dd 	.word	0x0002a3dd
   1979c:	0002a413 	.word	0x0002a413
   197a0:	0002a432 	.word	0x0002a432
   197a4:	000285e0 	.word	0x000285e0

000197a8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   197a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   197aa:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   197ac:	6803      	ldr	r3, [r0, #0]
   197ae:	460d      	mov	r5, r1
   197b0:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   197b2:	b087      	sub	sp, #28
   197b4:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   197b6:	bf18      	it	ne
   197b8:	2101      	movne	r1, #1
   197ba:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   197bc:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   197be:	f00c fc1c 	bl	25ffa <bt_gatt_change_aware>
   197c2:	b948      	cbnz	r0, 197d8 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   197c4:	2105      	movs	r1, #5
   197c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   197ca:	f00b ff11 	bl	255f0 <atomic_test_and_set_bit>
   197ce:	2800      	cmp	r0, #0
   197d0:	d048      	beq.n	19864 <att_write_rsp.constprop.0+0xbc>
			return 0;
   197d2:	2000      	movs	r0, #0
}
   197d4:	b007      	add	sp, #28
   197d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   197d8:	2e00      	cmp	r6, #0
   197da:	d045      	beq.n	19868 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   197dc:	2218      	movs	r2, #24
   197de:	2100      	movs	r1, #0
   197e0:	4668      	mov	r0, sp
   197e2:	f00d fdf9 	bl	273d8 <memset>
	if (rsp) {
   197e6:	bb67      	cbnz	r7, 19842 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   197e8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   197ea:	4a20      	ldr	r2, [pc, #128]	; (1986c <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   197ec:	681b      	ldr	r3, [r3, #0]
   197ee:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   197f0:	2300      	movs	r3, #0
   197f2:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   197f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   197f8:	9303      	str	r3, [sp, #12]
	data.len = len;
   197fa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   197fe:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19802:	2301      	movs	r3, #1
   19804:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19808:	4631      	mov	r1, r6
   1980a:	466b      	mov	r3, sp
   1980c:	4630      	mov	r0, r6
	data.req = req;
   1980e:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19812:	f00b fd65 	bl	252e0 <bt_gatt_foreach_attr>
	if (data.err) {
   19816:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1981a:	b1e3      	cbz	r3, 19856 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1981c:	2f00      	cmp	r7, #0
   1981e:	d0d8      	beq.n	197d2 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19820:	9b01      	ldr	r3, [sp, #4]
   19822:	6998      	ldr	r0, [r3, #24]
   19824:	f7ff fbfa 	bl	1901c <tx_meta_data_free>
			net_buf_unref(data.buf);
   19828:	9801      	ldr	r0, [sp, #4]
   1982a:	f001 fb0d 	bl	1ae48 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1982e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   19832:	2d00      	cmp	r5, #0
   19834:	d0cd      	beq.n	197d2 <att_write_rsp.constprop.0+0x2a>
   19836:	4632      	mov	r2, r6
   19838:	4629      	mov	r1, r5
   1983a:	4620      	mov	r0, r4
   1983c:	f00c f856 	bl	258ec <send_err_rsp.part.0>
   19840:	e7c7      	b.n	197d2 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   19842:	2200      	movs	r2, #0
   19844:	4639      	mov	r1, r7
   19846:	4620      	mov	r0, r4
   19848:	f7ff fe94 	bl	19574 <bt_att_chan_create_pdu>
   1984c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1984e:	2800      	cmp	r0, #0
   19850:	d1ca      	bne.n	197e8 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   19852:	200e      	movs	r0, #14
   19854:	e7be      	b.n	197d4 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   19856:	9901      	ldr	r1, [sp, #4]
   19858:	2900      	cmp	r1, #0
   1985a:	d0ba      	beq.n	197d2 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1985c:	4620      	mov	r0, r4
   1985e:	f00b fe13 	bl	25488 <bt_att_chan_send_rsp>
   19862:	e7b6      	b.n	197d2 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19864:	2012      	movs	r0, #18
   19866:	e7b5      	b.n	197d4 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19868:	2001      	movs	r0, #1
   1986a:	e7b3      	b.n	197d4 <att_write_rsp.constprop.0+0x2c>
   1986c:	0002527f 	.word	0x0002527f

00019870 <bt_att_create_pdu>:
{
   19870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19872:	af00      	add	r7, sp, #0
   19874:	460e      	mov	r6, r1
   19876:	4615      	mov	r5, r2
	att = att_get(conn);
   19878:	f7ff fcfc 	bl	19274 <att_get>
	if (!att) {
   1987c:	b1e0      	cbz	r0, 198b8 <bt_att_create_pdu+0x48>
	return list->head;
   1987e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19880:	4618      	mov	r0, r3
   19882:	b11b      	cbz	r3, 1988c <bt_att_create_pdu+0x1c>
	return node->next;
   19884:	f850 39e0 	ldr.w	r3, [r0], #-224
   19888:	b103      	cbz	r3, 1988c <bt_att_create_pdu+0x1c>
   1988a:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1988c:	1c6c      	adds	r4, r5, #1
   1988e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19890:	b118      	cbz	r0, 1989a <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19892:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   19894:	42a1      	cmp	r1, r4
   19896:	d21a      	bcs.n	198ce <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19898:	b983      	cbnz	r3, 198bc <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1989a:	466d      	mov	r5, sp
   1989c:	b088      	sub	sp, #32
   1989e:	466a      	mov	r2, sp
   198a0:	4b0f      	ldr	r3, [pc, #60]	; (198e0 <bt_att_create_pdu+0x70>)
   198a2:	4810      	ldr	r0, [pc, #64]	; (198e4 <bt_att_create_pdu+0x74>)
   198a4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   198a8:	2303      	movs	r3, #3
   198aa:	f842 3f10 	str.w	r3, [r2, #16]!
   198ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   198b2:	f00b fdb3 	bl	2541c <z_log_msg_static_create.constprop.0>
   198b6:	46ad      	mov	sp, r5
		return NULL;
   198b8:	2000      	movs	r0, #0
   198ba:	e00c      	b.n	198d6 <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   198bc:	4618      	mov	r0, r3
   198be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   198c2:	b153      	cbz	r3, 198da <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   198c4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   198c6:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   198c8:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   198cc:	d8f6      	bhi.n	198bc <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   198ce:	462a      	mov	r2, r5
   198d0:	4631      	mov	r1, r6
   198d2:	f7ff fe4f 	bl	19574 <bt_att_chan_create_pdu>
}
   198d6:	46bd      	mov	sp, r7
   198d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   198da:	4614      	mov	r4, r2
   198dc:	e7d9      	b.n	19892 <bt_att_create_pdu+0x22>
   198de:	bf00      	nop
   198e0:	0002a451 	.word	0x0002a451
   198e4:	00027f8c 	.word	0x00027f8c

000198e8 <att_read_group_req>:
{
   198e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   198ec:	8a0e      	ldrh	r6, [r1, #16]
   198ee:	3e04      	subs	r6, #4
   198f0:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   198f2:	2e02      	cmp	r6, #2
{
   198f4:	4604      	mov	r4, r0
   198f6:	b08c      	sub	sp, #48	; 0x30
   198f8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   198fa:	d001      	beq.n	19900 <att_read_group_req+0x18>
   198fc:	2e10      	cmp	r6, #16
   198fe:	d16a      	bne.n	199d6 <att_read_group_req+0xee>
   19900:	2104      	movs	r1, #4
   19902:	300c      	adds	r0, #12
   19904:	f00c fc73 	bl	261ee <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19908:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1990c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1990e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19910:	1d01      	adds	r1, r0, #4
   19912:	4632      	mov	r2, r6
   19914:	4640      	mov	r0, r8
   19916:	f00b f8f1 	bl	24afc <bt_uuid_create>
   1991a:	2800      	cmp	r0, #0
   1991c:	d05d      	beq.n	199da <att_read_group_req+0xf2>
	if (!start || !end) {
   1991e:	2d00      	cmp	r5, #0
   19920:	d03a      	beq.n	19998 <att_read_group_req+0xb0>
   19922:	2600      	movs	r6, #0
   19924:	2f00      	cmp	r7, #0
   19926:	d036      	beq.n	19996 <att_read_group_req+0xae>
	if (start > end) {
   19928:	42bd      	cmp	r5, r7
   1992a:	d835      	bhi.n	19998 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1992c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19930:	a901      	add	r1, sp, #4
   19932:	4640      	mov	r0, r8
   19934:	f88d 6004 	strb.w	r6, [sp, #4]
   19938:	f8ad 3006 	strh.w	r3, [sp, #6]
   1993c:	f00b f8b0 	bl	24aa0 <bt_uuid_cmp>
   19940:	bb70      	cbnz	r0, 199a0 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   19942:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   19944:	2214      	movs	r2, #20
   19946:	2100      	movs	r1, #0
   19948:	a807      	add	r0, sp, #28
   1994a:	f00d fd45 	bl	273d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1994e:	2201      	movs	r2, #1
   19950:	2111      	movs	r1, #17
   19952:	4630      	mov	r0, r6
   19954:	f7ff ff8c 	bl	19870 <bt_att_create_pdu>
   19958:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1995a:	2800      	cmp	r0, #0
   1995c:	d03d      	beq.n	199da <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1995e:	2101      	movs	r1, #1
   19960:	300c      	adds	r0, #12
	data.uuid = uuid;
   19962:	e9cd 4807 	strd	r4, r8, [sp, #28]
   19966:	f00c fc1b 	bl	261a0 <net_buf_simple_add>
	data.rsp->len = 0U;
   1996a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1996c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1996e:	4a1c      	ldr	r2, [pc, #112]	; (199e0 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   19970:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19972:	4639      	mov	r1, r7
	data.group = NULL;
   19974:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19976:	4628      	mov	r0, r5
   19978:	ab07      	add	r3, sp, #28
   1997a:	f00b fcb1 	bl	252e0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1997e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19980:	781b      	ldrb	r3, [r3, #0]
   19982:	bb1b      	cbnz	r3, 199cc <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19984:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19986:	6998      	ldr	r0, [r3, #24]
   19988:	f7ff fb48 	bl	1901c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1998c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1998e:	f001 fa5b 	bl	1ae48 <net_buf_unref>
	if (!req) {
   19992:	230a      	movs	r3, #10
   19994:	e001      	b.n	1999a <att_read_group_req+0xb2>
			*err = 0U;
   19996:	463d      	mov	r5, r7
	if (!req) {
   19998:	2301      	movs	r3, #1
   1999a:	462a      	mov	r2, r5
   1999c:	2110      	movs	r1, #16
   1999e:	e00e      	b.n	199be <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   199a0:	f642 0301 	movw	r3, #10241	; 0x2801
   199a4:	a907      	add	r1, sp, #28
   199a6:	4640      	mov	r0, r8
   199a8:	f88d 601c 	strb.w	r6, [sp, #28]
   199ac:	f8ad 301e 	strh.w	r3, [sp, #30]
   199b0:	f00b f876 	bl	24aa0 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   199b4:	2800      	cmp	r0, #0
   199b6:	d0c4      	beq.n	19942 <att_read_group_req+0x5a>
	if (!req) {
   199b8:	2310      	movs	r3, #16
   199ba:	462a      	mov	r2, r5
   199bc:	4619      	mov	r1, r3
   199be:	4620      	mov	r0, r4
   199c0:	f00b ff94 	bl	258ec <send_err_rsp.part.0>
		return 0;
   199c4:	2000      	movs	r0, #0
}
   199c6:	b00c      	add	sp, #48	; 0x30
   199c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   199cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   199ce:	4620      	mov	r0, r4
   199d0:	f00b fd5a 	bl	25488 <bt_att_chan_send_rsp>
	return 0;
   199d4:	e7f6      	b.n	199c4 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   199d6:	2004      	movs	r0, #4
   199d8:	e7f5      	b.n	199c6 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   199da:	200e      	movs	r0, #14
   199dc:	e7f3      	b.n	199c6 <att_read_group_req+0xde>
   199de:	bf00      	nop
   199e0:	00019309 	.word	0x00019309

000199e4 <att_read_mult_vl_req>:
{
   199e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   199e8:	6846      	ldr	r6, [r0, #4]
{
   199ea:	b085      	sub	sp, #20
   199ec:	4604      	mov	r4, r0
   199ee:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   199f0:	4630      	mov	r0, r6
   199f2:	2101      	movs	r1, #1
   199f4:	f00c fb01 	bl	25ffa <bt_gatt_change_aware>
   199f8:	b950      	cbnz	r0, 19a10 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   199fa:	2105      	movs	r1, #5
   199fc:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19a00:	f00b fdf6 	bl	255f0 <atomic_test_and_set_bit>
   19a04:	2800      	cmp	r0, #0
   19a06:	d13b      	bne.n	19a80 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19a08:	2012      	movs	r0, #18
}
   19a0a:	b005      	add	sp, #20
   19a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19a10:	2210      	movs	r2, #16
   19a12:	2100      	movs	r1, #0
   19a14:	4668      	mov	r0, sp
   19a16:	f00d fcdf 	bl	273d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   19a1a:	2200      	movs	r2, #0
   19a1c:	2121      	movs	r1, #33	; 0x21
   19a1e:	4630      	mov	r0, r6
   19a20:	f7ff ff26 	bl	19870 <bt_att_create_pdu>
   19a24:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19a26:	b368      	cbz	r0, 19a84 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19a28:	f8df 905c 	ldr.w	r9, [pc, #92]	; 19a88 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   19a2c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   19a2e:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19a32:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19a36:	8a2b      	ldrh	r3, [r5, #16]
   19a38:	2b01      	cmp	r3, #1
   19a3a:	d804      	bhi.n	19a46 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   19a3c:	9902      	ldr	r1, [sp, #8]
   19a3e:	4620      	mov	r0, r4
   19a40:	f00b fd22 	bl	25488 <bt_att_chan_send_rsp>
	return 0;
   19a44:	e01c      	b.n	19a80 <att_read_mult_vl_req+0x9c>
   19a46:	4638      	mov	r0, r7
   19a48:	f00c fbd9 	bl	261fe <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19a4c:	466b      	mov	r3, sp
   19a4e:	464a      	mov	r2, r9
   19a50:	4601      	mov	r1, r0
   19a52:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19a54:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19a58:	f00b fc42 	bl	252e0 <bt_gatt_foreach_attr>
		if (data.err) {
   19a5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19a60:	2b00      	cmp	r3, #0
   19a62:	d0e8      	beq.n	19a36 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19a64:	9b02      	ldr	r3, [sp, #8]
   19a66:	6998      	ldr	r0, [r3, #24]
   19a68:	f7ff fad8 	bl	1901c <tx_meta_data_free>
			net_buf_unref(data.buf);
   19a6c:	9802      	ldr	r0, [sp, #8]
   19a6e:	f001 f9eb 	bl	1ae48 <net_buf_unref>
	if (!req) {
   19a72:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19a76:	4632      	mov	r2, r6
   19a78:	2120      	movs	r1, #32
   19a7a:	4620      	mov	r0, r4
   19a7c:	f00b ff36 	bl	258ec <send_err_rsp.part.0>
			return 0;
   19a80:	2000      	movs	r0, #0
   19a82:	e7c2      	b.n	19a0a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   19a84:	200e      	movs	r0, #14
   19a86:	e7c0      	b.n	19a0a <att_read_mult_vl_req+0x26>
   19a88:	00025661 	.word	0x00025661

00019a8c <att_read_mult_req>:
{
   19a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19a90:	6846      	ldr	r6, [r0, #4]
{
   19a92:	b085      	sub	sp, #20
   19a94:	4604      	mov	r4, r0
   19a96:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19a98:	4630      	mov	r0, r6
   19a9a:	2101      	movs	r1, #1
   19a9c:	f00c faad 	bl	25ffa <bt_gatt_change_aware>
   19aa0:	b950      	cbnz	r0, 19ab8 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19aa2:	2105      	movs	r1, #5
   19aa4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19aa8:	f00b fda2 	bl	255f0 <atomic_test_and_set_bit>
   19aac:	2800      	cmp	r0, #0
   19aae:	d13b      	bne.n	19b28 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19ab0:	2012      	movs	r0, #18
}
   19ab2:	b005      	add	sp, #20
   19ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19ab8:	2210      	movs	r2, #16
   19aba:	2100      	movs	r1, #0
   19abc:	4668      	mov	r0, sp
   19abe:	f00d fc8b 	bl	273d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19ac2:	2200      	movs	r2, #0
   19ac4:	210f      	movs	r1, #15
   19ac6:	4630      	mov	r0, r6
   19ac8:	f7ff fed2 	bl	19870 <bt_att_create_pdu>
   19acc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19ace:	b368      	cbz	r0, 19b2c <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19ad0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 19b30 <att_read_mult_req+0xa4>
	data.chan = chan;
   19ad4:	9400      	str	r4, [sp, #0]
   19ad6:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19ada:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19ade:	8a2b      	ldrh	r3, [r5, #16]
   19ae0:	2b01      	cmp	r3, #1
   19ae2:	d804      	bhi.n	19aee <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   19ae4:	9902      	ldr	r1, [sp, #8]
   19ae6:	4620      	mov	r0, r4
   19ae8:	f00b fcce 	bl	25488 <bt_att_chan_send_rsp>
	return 0;
   19aec:	e01c      	b.n	19b28 <att_read_mult_req+0x9c>
   19aee:	4638      	mov	r0, r7
   19af0:	f00c fb85 	bl	261fe <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19af4:	466b      	mov	r3, sp
   19af6:	464a      	mov	r2, r9
   19af8:	4601      	mov	r1, r0
   19afa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19afc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19b00:	f00b fbee 	bl	252e0 <bt_gatt_foreach_attr>
		if (data.err) {
   19b04:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19b08:	2b00      	cmp	r3, #0
   19b0a:	d0e8      	beq.n	19ade <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19b0c:	9b02      	ldr	r3, [sp, #8]
   19b0e:	6998      	ldr	r0, [r3, #24]
   19b10:	f7ff fa84 	bl	1901c <tx_meta_data_free>
			net_buf_unref(data.buf);
   19b14:	9802      	ldr	r0, [sp, #8]
   19b16:	f001 f997 	bl	1ae48 <net_buf_unref>
	if (!req) {
   19b1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19b1e:	4632      	mov	r2, r6
   19b20:	210e      	movs	r1, #14
   19b22:	4620      	mov	r0, r4
   19b24:	f00b fee2 	bl	258ec <send_err_rsp.part.0>
			return 0;
   19b28:	2000      	movs	r0, #0
   19b2a:	e7c2      	b.n	19ab2 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   19b2c:	200e      	movs	r0, #14
   19b2e:	e7c0      	b.n	19ab2 <att_read_mult_req+0x26>
   19b30:	0002561b 	.word	0x0002561b

00019b34 <att_read_rsp>:
{
   19b34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19b38:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   19b3c:	4604      	mov	r4, r0
   19b3e:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19b40:	4640      	mov	r0, r8
   19b42:	2101      	movs	r1, #1
{
   19b44:	4617      	mov	r7, r2
   19b46:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19b48:	f00c fa57 	bl	25ffa <bt_gatt_change_aware>
   19b4c:	b948      	cbnz	r0, 19b62 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19b4e:	2105      	movs	r1, #5
   19b50:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19b54:	f00b fd4c 	bl	255f0 <atomic_test_and_set_bit>
   19b58:	bb78      	cbnz	r0, 19bba <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19b5a:	2012      	movs	r0, #18
}
   19b5c:	b004      	add	sp, #16
   19b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   19b62:	b38d      	cbz	r5, 19bc8 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   19b64:	2210      	movs	r2, #16
   19b66:	2100      	movs	r1, #0
   19b68:	4668      	mov	r0, sp
   19b6a:	f00d fc35 	bl	273d8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   19b6e:	2200      	movs	r2, #0
   19b70:	4639      	mov	r1, r7
   19b72:	4640      	mov	r0, r8
   19b74:	f7ff fe7c 	bl	19870 <bt_att_create_pdu>
   19b78:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19b7a:	b338      	cbz	r0, 19bcc <att_read_rsp+0x98>
	data.offset = offset;
   19b7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19b80:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19b84:	2301      	movs	r3, #1
   19b86:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19b8a:	4a11      	ldr	r2, [pc, #68]	; (19bd0 <att_read_rsp+0x9c>)
	data.chan = chan;
   19b8c:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19b8e:	466b      	mov	r3, sp
   19b90:	4629      	mov	r1, r5
   19b92:	4628      	mov	r0, r5
   19b94:	f00b fba4 	bl	252e0 <bt_gatt_foreach_attr>
	if (data.err) {
   19b98:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19b9c:	b17b      	cbz	r3, 19bbe <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19b9e:	9b02      	ldr	r3, [sp, #8]
   19ba0:	6998      	ldr	r0, [r3, #24]
   19ba2:	f7ff fa3b 	bl	1901c <tx_meta_data_free>
		net_buf_unref(data.buf);
   19ba6:	9802      	ldr	r0, [sp, #8]
   19ba8:	f001 f94e 	bl	1ae48 <net_buf_unref>
	if (!req) {
   19bac:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19bb0:	462a      	mov	r2, r5
   19bb2:	4631      	mov	r1, r6
   19bb4:	4620      	mov	r0, r4
   19bb6:	f00b fe99 	bl	258ec <send_err_rsp.part.0>
			return 0;
   19bba:	2000      	movs	r0, #0
   19bbc:	e7ce      	b.n	19b5c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   19bbe:	9902      	ldr	r1, [sp, #8]
   19bc0:	4620      	mov	r0, r4
   19bc2:	f00b fc61 	bl	25488 <bt_att_chan_send_rsp>
	return 0;
   19bc6:	e7f8      	b.n	19bba <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   19bc8:	2001      	movs	r0, #1
   19bca:	e7c7      	b.n	19b5c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   19bcc:	200e      	movs	r0, #14
   19bce:	e7c5      	b.n	19b5c <att_read_rsp+0x28>
   19bd0:	0002561b 	.word	0x0002561b

00019bd4 <att_read_type_req>:
{
   19bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19bd8:	8a0d      	ldrh	r5, [r1, #16]
   19bda:	3d04      	subs	r5, #4
   19bdc:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   19bde:	2d02      	cmp	r5, #2
{
   19be0:	4604      	mov	r4, r0
   19be2:	b08c      	sub	sp, #48	; 0x30
   19be4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19be6:	d001      	beq.n	19bec <att_read_type_req+0x18>
   19be8:	2d10      	cmp	r5, #16
   19bea:	d150      	bne.n	19c8e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   19bec:	2104      	movs	r1, #4
   19bee:	300c      	adds	r0, #12
   19bf0:	f00c fafd 	bl	261ee <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19bf4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19bf8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19bfa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19bfc:	1d01      	adds	r1, r0, #4
   19bfe:	462a      	mov	r2, r5
   19c00:	4640      	mov	r0, r8
   19c02:	f00a ff7b 	bl	24afc <bt_uuid_create>
   19c06:	b188      	cbz	r0, 19c2c <att_read_type_req+0x58>
	if (!start || !end) {
   19c08:	b19e      	cbz	r6, 19c32 <att_read_type_req+0x5e>
   19c0a:	b18f      	cbz	r7, 19c30 <att_read_type_req+0x5c>
	if (start > end) {
   19c0c:	42b7      	cmp	r7, r6
   19c0e:	d310      	bcc.n	19c32 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   19c10:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   19c12:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   19c14:	2100      	movs	r1, #0
   19c16:	eb0d 0002 	add.w	r0, sp, r2
   19c1a:	f00d fbdd 	bl	273d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   19c1e:	2201      	movs	r2, #1
   19c20:	2109      	movs	r1, #9
   19c22:	4628      	mov	r0, r5
   19c24:	f7ff fe24 	bl	19870 <bt_att_create_pdu>
   19c28:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   19c2a:	b960      	cbnz	r0, 19c46 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   19c2c:	200e      	movs	r0, #14
   19c2e:	e007      	b.n	19c40 <att_read_type_req+0x6c>
			*err = 0U;
   19c30:	463e      	mov	r6, r7
	if (!req) {
   19c32:	2301      	movs	r3, #1
   19c34:	4632      	mov	r2, r6
   19c36:	2108      	movs	r1, #8
   19c38:	4620      	mov	r0, r4
   19c3a:	f00b fe57 	bl	258ec <send_err_rsp.part.0>
		return 0;
   19c3e:	2000      	movs	r0, #0
}
   19c40:	b00c      	add	sp, #48	; 0x30
   19c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   19c46:	2101      	movs	r1, #1
   19c48:	300c      	adds	r0, #12
	data.uuid = uuid;
   19c4a:	e9cd 4806 	strd	r4, r8, [sp, #24]
   19c4e:	f00c faa7 	bl	261a0 <net_buf_simple_add>
	data.rsp->len = 0U;
   19c52:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19c54:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   19c56:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19c58:	230a      	movs	r3, #10
   19c5a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19c5e:	4a0d      	ldr	r2, [pc, #52]	; (19c94 <att_read_type_req+0xc0>)
   19c60:	ab06      	add	r3, sp, #24
   19c62:	4639      	mov	r1, r7
   19c64:	4630      	mov	r0, r6
   19c66:	f00b fb3b 	bl	252e0 <bt_gatt_foreach_attr>
	if (data.err) {
   19c6a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19c6e:	b14b      	cbz	r3, 19c84 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19c70:	9b08      	ldr	r3, [sp, #32]
   19c72:	6998      	ldr	r0, [r3, #24]
   19c74:	f7ff f9d2 	bl	1901c <tx_meta_data_free>
		net_buf_unref(data.buf);
   19c78:	9808      	ldr	r0, [sp, #32]
   19c7a:	f001 f8e5 	bl	1ae48 <net_buf_unref>
	if (!req) {
   19c7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19c82:	e7d7      	b.n	19c34 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   19c84:	9908      	ldr	r1, [sp, #32]
   19c86:	4620      	mov	r0, r4
   19c88:	f00b fbfe 	bl	25488 <bt_att_chan_send_rsp>
	return 0;
   19c8c:	e7d7      	b.n	19c3e <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   19c8e:	2004      	movs	r0, #4
   19c90:	e7d6      	b.n	19c40 <att_read_type_req+0x6c>
   19c92:	bf00      	nop
   19c94:	000193b5 	.word	0x000193b5

00019c98 <att_find_type_req>:
{
   19c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c9c:	460f      	mov	r7, r1
   19c9e:	b086      	sub	sp, #24
   19ca0:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   19ca2:	2106      	movs	r1, #6
   19ca4:	f107 000c 	add.w	r0, r7, #12
   19ca8:	f00c faa1 	bl	261ee <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   19cac:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19cae:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   19cb2:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   19cb4:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   19cb8:	b1c5      	cbz	r5, 19cec <att_find_type_req+0x54>
   19cba:	2300      	movs	r3, #0
   19cbc:	f1b8 0f00 	cmp.w	r8, #0
   19cc0:	d013      	beq.n	19cea <att_find_type_req+0x52>
	if (start > end) {
   19cc2:	4545      	cmp	r5, r8
   19cc4:	d812      	bhi.n	19cec <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19cc6:	f88d 3000 	strb.w	r3, [sp]
   19cca:	f88d 3004 	strb.w	r3, [sp, #4]
   19cce:	a901      	add	r1, sp, #4
   19cd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19cd4:	4668      	mov	r0, sp
   19cd6:	f8ad 2002 	strh.w	r2, [sp, #2]
   19cda:	f8ad 3006 	strh.w	r3, [sp, #6]
   19cde:	f00a fedf 	bl	24aa0 <bt_uuid_cmp>
   19ce2:	4606      	mov	r6, r0
   19ce4:	b160      	cbz	r0, 19d00 <att_find_type_req+0x68>
	if (!req) {
   19ce6:	230a      	movs	r3, #10
   19ce8:	e001      	b.n	19cee <att_find_type_req+0x56>
			*err = 0U;
   19cea:	4645      	mov	r5, r8
	if (!req) {
   19cec:	2301      	movs	r3, #1
   19cee:	462a      	mov	r2, r5
   19cf0:	2106      	movs	r1, #6
   19cf2:	4620      	mov	r0, r4
   19cf4:	f00b fdfa 	bl	258ec <send_err_rsp.part.0>
		return 0;
   19cf8:	2000      	movs	r0, #0
}
   19cfa:	b006      	add	sp, #24
   19cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   19d00:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19d04:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   19d06:	4601      	mov	r1, r0
   19d08:	2214      	movs	r2, #20
   19d0a:	a801      	add	r0, sp, #4
   19d0c:	f00d fb64 	bl	273d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   19d10:	4632      	mov	r2, r6
   19d12:	2107      	movs	r1, #7
   19d14:	4650      	mov	r0, sl
   19d16:	f7ff fdab 	bl	19870 <bt_att_create_pdu>
   19d1a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19d1c:	b1f8      	cbz	r0, 19d5e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19d1e:	230a      	movs	r3, #10
   19d20:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19d24:	4a0f      	ldr	r2, [pc, #60]	; (19d64 <att_find_type_req+0xcc>)
	data.chan = chan;
   19d26:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19d28:	ab01      	add	r3, sp, #4
   19d2a:	4641      	mov	r1, r8
   19d2c:	4628      	mov	r0, r5
	data.value = value;
   19d2e:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   19d32:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19d36:	f00b fad3 	bl	252e0 <bt_gatt_foreach_attr>
	if (data.err) {
   19d3a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19d3e:	b14b      	cbz	r3, 19d54 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19d40:	9b02      	ldr	r3, [sp, #8]
   19d42:	6998      	ldr	r0, [r3, #24]
   19d44:	f7ff f96a 	bl	1901c <tx_meta_data_free>
		net_buf_unref(data.buf);
   19d48:	9802      	ldr	r0, [sp, #8]
   19d4a:	f001 f87d 	bl	1ae48 <net_buf_unref>
	if (!req) {
   19d4e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19d52:	e7cc      	b.n	19cee <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   19d54:	9902      	ldr	r1, [sp, #8]
   19d56:	4620      	mov	r0, r4
   19d58:	f00b fb96 	bl	25488 <bt_att_chan_send_rsp>
	return 0;
   19d5c:	e7cc      	b.n	19cf8 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   19d5e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19d60:	e7cb      	b.n	19cfa <att_find_type_req+0x62>
   19d62:	bf00      	nop
   19d64:	00019039 	.word	0x00019039

00019d68 <att_find_info_req>:
{
   19d68:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   19d6a:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   19d6c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19d6e:	885e      	ldrh	r6, [r3, #2]
{
   19d70:	b085      	sub	sp, #20
   19d72:	4604      	mov	r4, r0
	if (!start || !end) {
   19d74:	b195      	cbz	r5, 19d9c <att_find_info_req+0x34>
   19d76:	b186      	cbz	r6, 19d9a <att_find_info_req+0x32>
	if (start > end) {
   19d78:	42b5      	cmp	r5, r6
   19d7a:	d80f      	bhi.n	19d9c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   19d7c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   19d7e:	2210      	movs	r2, #16
   19d80:	2100      	movs	r1, #0
   19d82:	4668      	mov	r0, sp
   19d84:	f00d fb28 	bl	273d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19d88:	2200      	movs	r2, #0
   19d8a:	2105      	movs	r1, #5
   19d8c:	4638      	mov	r0, r7
   19d8e:	f7ff fd6f 	bl	19870 <bt_att_create_pdu>
   19d92:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19d94:	b958      	cbnz	r0, 19dae <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19d96:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19d98:	e007      	b.n	19daa <att_find_info_req+0x42>
			*err = 0U;
   19d9a:	4635      	mov	r5, r6
	if (!req) {
   19d9c:	2301      	movs	r3, #1
   19d9e:	462a      	mov	r2, r5
   19da0:	2104      	movs	r1, #4
   19da2:	4620      	mov	r0, r4
   19da4:	f00b fda2 	bl	258ec <send_err_rsp.part.0>
		return 0;
   19da8:	2000      	movs	r0, #0
}
   19daa:	b005      	add	sp, #20
   19dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19dae:	466b      	mov	r3, sp
   19db0:	4a0a      	ldr	r2, [pc, #40]	; (19ddc <att_find_info_req+0x74>)
	data.chan = chan;
   19db2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19db4:	4631      	mov	r1, r6
   19db6:	4628      	mov	r0, r5
   19db8:	f00b fa92 	bl	252e0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   19dbc:	9b02      	ldr	r3, [sp, #8]
   19dbe:	b943      	cbnz	r3, 19dd2 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19dc0:	9b01      	ldr	r3, [sp, #4]
   19dc2:	6998      	ldr	r0, [r3, #24]
   19dc4:	f7ff f92a 	bl	1901c <tx_meta_data_free>
		net_buf_unref(data.buf);
   19dc8:	9801      	ldr	r0, [sp, #4]
   19dca:	f001 f83d 	bl	1ae48 <net_buf_unref>
	if (!req) {
   19dce:	230a      	movs	r3, #10
   19dd0:	e7e5      	b.n	19d9e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   19dd2:	9901      	ldr	r1, [sp, #4]
   19dd4:	4620      	mov	r0, r4
   19dd6:	f00b fb57 	bl	25488 <bt_att_chan_send_rsp>
	return 0;
   19dda:	e7e5      	b.n	19da8 <att_find_info_req+0x40>
   19ddc:	0002537d 	.word	0x0002537d

00019de0 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   19de0:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   19de2:	4c0b      	ldr	r4, [pc, #44]	; (19e10 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   19de4:	4d0b      	ldr	r5, [pc, #44]	; (19e14 <bt_att_init+0x34>)
   19de6:	4620      	mov	r0, r4
   19de8:	f00c fe94 	bl	26b14 <z_impl_k_queue_init>
   19dec:	4629      	mov	r1, r5
   19dee:	4620      	mov	r0, r4
   19df0:	f00c fe9c 	bl	26b2c <k_queue_append>
   19df4:	f105 0114 	add.w	r1, r5, #20
   19df8:	4620      	mov	r0, r4
   19dfa:	f00c fe97 	bl	26b2c <k_queue_append>
   19dfe:	f105 0128 	add.w	r1, r5, #40	; 0x28
   19e02:	4620      	mov	r0, r4
   19e04:	f00c fe92 	bl	26b2c <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   19e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   19e0c:	f000 bad8 	b.w	1a3c0 <bt_gatt_init>
   19e10:	20000c54 	.word	0x20000c54
   19e14:	20003690 	.word	0x20003690

00019e18 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   19e1a:	2300      	movs	r3, #0
{
   19e1c:	4605      	mov	r5, r0
   19e1e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   19e20:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   19e22:	f004 fe9b 	bl	1eb5c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   19e26:	4b0c      	ldr	r3, [pc, #48]	; (19e58 <bt_att_req_alloc+0x40>)
   19e28:	681b      	ldr	r3, [r3, #0]
   19e2a:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   19e2c:	bf04      	itt	eq
   19e2e:	2500      	moveq	r5, #0
   19e30:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19e32:	a901      	add	r1, sp, #4
   19e34:	4809      	ldr	r0, [pc, #36]	; (19e5c <bt_att_req_alloc+0x44>)
   19e36:	462a      	mov	r2, r5
   19e38:	4623      	mov	r3, r4
   19e3a:	f004 f83d 	bl	1deb8 <k_mem_slab_alloc>
   19e3e:	4601      	mov	r1, r0
   19e40:	b940      	cbnz	r0, 19e54 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19e42:	9b01      	ldr	r3, [sp, #4]
   19e44:	2210      	movs	r2, #16
   19e46:	4618      	mov	r0, r3
   19e48:	f00d fac6 	bl	273d8 <memset>
   19e4c:	4603      	mov	r3, r0

	return req;
}
   19e4e:	4618      	mov	r0, r3
   19e50:	b003      	add	sp, #12
   19e52:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19e54:	2300      	movs	r3, #0
   19e56:	e7fa      	b.n	19e4e <bt_att_req_alloc+0x36>
   19e58:	200036cc 	.word	0x200036cc
   19e5c:	20000b6c 	.word	0x20000b6c

00019e60 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19e60:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   19e62:	6883      	ldr	r3, [r0, #8]
{
   19e64:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   19e66:	b14b      	cbz	r3, 19e7c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   19e68:	6998      	ldr	r0, [r3, #24]
   19e6a:	f7ff f8d7 	bl	1901c <tx_meta_data_free>
		net_buf_unref(req->buf);
   19e6e:	9b01      	ldr	r3, [sp, #4]
   19e70:	6898      	ldr	r0, [r3, #8]
   19e72:	f000 ffe9 	bl	1ae48 <net_buf_unref>
		req->buf = NULL;
   19e76:	9b01      	ldr	r3, [sp, #4]
   19e78:	2200      	movs	r2, #0
   19e7a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   19e7c:	4803      	ldr	r0, [pc, #12]	; (19e8c <bt_att_req_free+0x2c>)
   19e7e:	a901      	add	r1, sp, #4
   19e80:	f00c fd8a 	bl	26998 <k_mem_slab_free>
}
   19e84:	b003      	add	sp, #12
   19e86:	f85d fb04 	ldr.w	pc, [sp], #4
   19e8a:	bf00      	nop
   19e8c:	20000b6c 	.word	0x20000b6c

00019e90 <att_handle_rsp>:
{
   19e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e94:	4604      	mov	r4, r0
   19e96:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   19e98:	30b0      	adds	r0, #176	; 0xb0
{
   19e9a:	460e      	mov	r6, r1
   19e9c:	4617      	mov	r7, r2
   19e9e:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   19ea0:	f00c ff2d 	bl	26cfe <k_work_cancel_delayable>
	if (!chan->req) {
   19ea4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   19ea8:	b980      	cbnz	r0, 19ecc <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   19eaa:	4b1a      	ldr	r3, [pc, #104]	; (19f14 <att_handle_rsp+0x84>)
   19eac:	9307      	str	r3, [sp, #28]
   19eae:	481a      	ldr	r0, [pc, #104]	; (19f18 <att_handle_rsp+0x88>)
   19eb0:	2302      	movs	r3, #2
   19eb2:	aa06      	add	r2, sp, #24
   19eb4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19eb8:	9306      	str	r3, [sp, #24]
   19eba:	f00b faaf 	bl	2541c <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   19ebe:	6820      	ldr	r0, [r4, #0]
   19ec0:	f00b fc3a 	bl	25738 <att_req_send_process>
}
   19ec4:	2000      	movs	r0, #0
   19ec6:	b008      	add	sp, #32
   19ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   19ecc:	4b13      	ldr	r3, [pc, #76]	; (19f1c <att_handle_rsp+0x8c>)
   19ece:	4298      	cmp	r0, r3
   19ed0:	f04f 0800 	mov.w	r8, #0
   19ed4:	d102      	bne.n	19edc <att_handle_rsp+0x4c>
		chan->req = NULL;
   19ed6:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   19eda:	e7f0      	b.n	19ebe <att_handle_rsp+0x2e>
	func = chan->req->func;
   19edc:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   19ee0:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   19ee4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   19ee8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   19eec:	f7ff ffb8 	bl	19e60 <bt_att_req_free>
	att_req_send_process(chan->att);
   19ef0:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   19ef2:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   19ef6:	f00b fc1f 	bl	25738 <att_req_send_process>
	if (func) {
   19efa:	f1b9 0f00 	cmp.w	r9, #0
   19efe:	d0e1      	beq.n	19ec4 <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   19f00:	6820      	ldr	r0, [r4, #0]
   19f02:	f8cd a000 	str.w	sl, [sp]
   19f06:	6800      	ldr	r0, [r0, #0]
   19f08:	463b      	mov	r3, r7
   19f0a:	4632      	mov	r2, r6
   19f0c:	4629      	mov	r1, r5
   19f0e:	47c8      	blx	r9
   19f10:	e7d8      	b.n	19ec4 <att_handle_rsp+0x34>
   19f12:	bf00      	nop
   19f14:	0002a46c 	.word	0x0002a46c
   19f18:	00027f8c 	.word	0x00027f8c
   19f1c:	200036d0 	.word	0x200036d0

00019f20 <bt_att_disconnected>:
{
   19f20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   19f24:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   19f28:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19f2a:	2e00      	cmp	r6, #0
   19f2c:	d056      	beq.n	19fdc <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19f2e:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   19f32:	f106 0024 	add.w	r0, r6, #36	; 0x24
   19f36:	f00b fb40 	bl	255ba <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19f3a:	1f27      	subs	r7, r4, #4
   19f3c:	f104 0894 	add.w	r8, r4, #148	; 0x94
   19f40:	2200      	movs	r2, #0
   19f42:	2300      	movs	r3, #0
   19f44:	4640      	mov	r0, r8
   19f46:	f00c f8d0 	bl	260ea <net_buf_get>
   19f4a:	4605      	mov	r5, r0
   19f4c:	bb28      	cbnz	r0, 19f9a <bt_att_disconnected+0x7a>
	if (chan->req) {
   19f4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   19f52:	b12b      	cbz	r3, 19f60 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19f54:	4602      	mov	r2, r0
   19f56:	4601      	mov	r1, r0
   19f58:	230e      	movs	r3, #14
   19f5a:	4638      	mov	r0, r7
   19f5c:	f7ff ff98 	bl	19e90 <att_handle_rsp>
	chan->att = NULL;
   19f60:	2300      	movs	r3, #0
   19f62:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   19f66:	6a73      	ldr	r3, [r6, #36]	; 0x24
   19f68:	2b00      	cmp	r3, #0
   19f6a:	d137      	bne.n	19fdc <bt_att_disconnected+0xbc>
	att_reset(att);
   19f6c:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19f6e:	9803      	ldr	r0, [sp, #12]
   19f70:	2200      	movs	r2, #0
   19f72:	2300      	movs	r3, #0
   19f74:	300c      	adds	r0, #12
   19f76:	f00c f8b8 	bl	260ea <net_buf_get>
   19f7a:	4605      	mov	r5, r0
   19f7c:	b9a0      	cbnz	r0, 19fa8 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   19f7e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   19f80:	6845      	ldr	r5, [r0, #4]
   19f82:	b9c5      	cbnz	r5, 19fb6 <bt_att_disconnected+0x96>
	att->conn = NULL;
   19f84:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   19f86:	a903      	add	r1, sp, #12
   19f88:	4816      	ldr	r0, [pc, #88]	; (19fe4 <bt_att_disconnected+0xc4>)
   19f8a:	f00c fd05 	bl	26998 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   19f8e:	6820      	ldr	r0, [r4, #0]
}
   19f90:	b004      	add	sp, #16
   19f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   19f96:	f000 be4b 	b.w	1ac30 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19f9a:	69a8      	ldr	r0, [r5, #24]
   19f9c:	f7ff f83e 	bl	1901c <tx_meta_data_free>
		net_buf_unref(buf);
   19fa0:	4628      	mov	r0, r5
   19fa2:	f000 ff51 	bl	1ae48 <net_buf_unref>
   19fa6:	e7cb      	b.n	19f40 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19fa8:	69a8      	ldr	r0, [r5, #24]
   19faa:	f7ff f837 	bl	1901c <tx_meta_data_free>
		net_buf_unref(buf);
   19fae:	4628      	mov	r0, r5
   19fb0:	f000 ff4a 	bl	1ae48 <net_buf_unref>
   19fb4:	e7db      	b.n	19f6e <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19fb6:	6882      	ldr	r2, [r0, #8]
	return node->next;
   19fb8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   19fba:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19fbc:	4295      	cmp	r5, r2
	list->tail = node;
   19fbe:	bf08      	it	eq
   19fc0:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   19fc2:	686e      	ldr	r6, [r5, #4]
   19fc4:	b136      	cbz	r6, 19fd4 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   19fc6:	68eb      	ldr	r3, [r5, #12]
   19fc8:	9300      	str	r3, [sp, #0]
   19fca:	2300      	movs	r3, #0
   19fcc:	6800      	ldr	r0, [r0, #0]
   19fce:	461a      	mov	r2, r3
   19fd0:	210e      	movs	r1, #14
   19fd2:	47b0      	blx	r6
		bt_att_req_free(req);
   19fd4:	4628      	mov	r0, r5
   19fd6:	f7ff ff43 	bl	19e60 <bt_att_req_free>
   19fda:	e7d0      	b.n	19f7e <bt_att_disconnected+0x5e>
}
   19fdc:	b004      	add	sp, #16
   19fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19fe2:	bf00      	nop
   19fe4:	20000b34 	.word	0x20000b34

00019fe8 <att_timeout>:
{
   19fe8:	b510      	push	{r4, lr}
   19fea:	4604      	mov	r4, r0
   19fec:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   19fee:	4b08      	ldr	r3, [pc, #32]	; (1a010 <att_timeout+0x28>)
   19ff0:	9305      	str	r3, [sp, #20]
   19ff2:	4808      	ldr	r0, [pc, #32]	; (1a014 <att_timeout+0x2c>)
   19ff4:	2302      	movs	r3, #2
   19ff6:	aa04      	add	r2, sp, #16
   19ff8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19ffc:	9304      	str	r3, [sp, #16]
   19ffe:	f00b fa0d 	bl	2541c <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1a002:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   1a006:	b006      	add	sp, #24
   1a008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1a00c:	f7ff bf88 	b.w	19f20 <bt_att_disconnected>
   1a010:	0002a483 	.word	0x0002a483
   1a014:	00027f8c 	.word	0x00027f8c

0001a018 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1a018:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1a01a:	b930      	cbnz	r0, 1a02a <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a01c:	4907      	ldr	r1, [pc, #28]	; (1a03c <find_cf_cfg+0x24>)
   1a01e:	4808      	ldr	r0, [pc, #32]	; (1a040 <find_cf_cfg+0x28>)
   1a020:	f00b fdeb 	bl	25bfa <bt_addr_le_eq>
   1a024:	b138      	cbz	r0, 1a036 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a026:	4807      	ldr	r0, [pc, #28]	; (1a044 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   1a028:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a02a:	4a05      	ldr	r2, [pc, #20]	; (1a040 <find_cf_cfg+0x28>)
   1a02c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   1a030:	f00b f83c 	bl	250ac <bt_conn_is_peer_addr_le>
   1a034:	e7f6      	b.n	1a024 <find_cf_cfg+0xc>
	return NULL;
   1a036:	2000      	movs	r0, #0
   1a038:	e7f6      	b.n	1a028 <find_cf_cfg+0x10>
   1a03a:	bf00      	nop
   1a03c:	000297b5 	.word	0x000297b5
   1a040:	200036f9 	.word	0x200036f9
   1a044:	200036f8 	.word	0x200036f8

0001a048 <find_sc_cfg>:
{
   1a048:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1a04a:	4c06      	ldr	r4, [pc, #24]	; (1a064 <find_sc_cfg+0x1c>)
   1a04c:	7823      	ldrb	r3, [r4, #0]
   1a04e:	4283      	cmp	r3, r0
   1a050:	d103      	bne.n	1a05a <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1a052:	1c60      	adds	r0, r4, #1
   1a054:	f00b fdd1 	bl	25bfa <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1a058:	b908      	cbnz	r0, 1a05e <find_sc_cfg+0x16>
	return NULL;
   1a05a:	2000      	movs	r0, #0
}
   1a05c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1a05e:	4620      	mov	r0, r4
   1a060:	e7fc      	b.n	1a05c <find_sc_cfg+0x14>
   1a062:	bf00      	nop
   1a064:	20004486 	.word	0x20004486

0001a068 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1a068:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1a06a:	1c4a      	adds	r2, r1, #1
{
   1a06c:	460c      	mov	r4, r1
		if (conn) {
   1a06e:	b138      	cbz	r0, 1a080 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1a070:	7809      	ldrb	r1, [r1, #0]
   1a072:	f00b f81b 	bl	250ac <bt_conn_is_peer_addr_le>
   1a076:	b108      	cbz	r0, 1a07c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1a078:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   1a07a:	bd10      	pop	{r4, pc}
	return NULL;
   1a07c:	2000      	movs	r0, #0
   1a07e:	e7fc      	b.n	1a07a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a080:	4902      	ldr	r1, [pc, #8]	; (1a08c <find_ccc_cfg+0x24>)
   1a082:	4610      	mov	r0, r2
   1a084:	f00b fdb9 	bl	25bfa <bt_addr_le_eq>
   1a088:	e7f5      	b.n	1a076 <find_ccc_cfg+0xe>
   1a08a:	bf00      	nop
   1a08c:	000297b5 	.word	0x000297b5

0001a090 <read_ppcp>:
{
   1a090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1a092:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1a094:	4a07      	ldr	r2, [pc, #28]	; (1a0b4 <read_ppcp+0x24>)
{
   1a096:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1a098:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   1a09c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1a0a0:	2308      	movs	r3, #8
   1a0a2:	9300      	str	r3, [sp, #0]
   1a0a4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1a0a8:	446b      	add	r3, sp
   1a0aa:	f00b fdba 	bl	25c22 <bt_gatt_attr_read.constprop.0>
}
   1a0ae:	b005      	add	sp, #20
   1a0b0:	f85d fb04 	ldr.w	pc, [sp], #4
   1a0b4:	00280018 	.word	0x00280018

0001a0b8 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1a0b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a0bc:	b087      	sub	sp, #28
   1a0be:	461e      	mov	r6, r3
   1a0c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a0c4:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1a0c8:	4681      	mov	r9, r0
   1a0ca:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1a0cc:	2b00      	cmp	r3, #0
   1a0ce:	d14b      	bne.n	1a168 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1a0d0:	1e73      	subs	r3, r6, #1
   1a0d2:	2b01      	cmp	r3, #1
   1a0d4:	d84b      	bhi.n	1a16e <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1a0d6:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1a0d8:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1a0da:	7815      	ldrb	r5, [r2, #0]
   1a0dc:	bf18      	it	ne
   1a0de:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1a0e0:	f7ff ffc2 	bl	1a068 <find_ccc_cfg>
	if (!cfg) {
   1a0e4:	4604      	mov	r4, r0
   1a0e6:	b9f0      	cbnz	r0, 1a126 <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1a0e8:	b91d      	cbnz	r5, 1a0f2 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1a0ea:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1a0ec:	b007      	add	sp, #28
   1a0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a0f2:	4641      	mov	r1, r8
   1a0f4:	f7ff ffb8 	bl	1a068 <find_ccc_cfg>
		if (!cfg) {
   1a0f8:	4604      	mov	r4, r0
   1a0fa:	b960      	cbnz	r0, 1a116 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   1a0fc:	4b1d      	ldr	r3, [pc, #116]	; (1a174 <bt_gatt_attr_write_ccc+0xbc>)
   1a0fe:	481e      	ldr	r0, [pc, #120]	; (1a178 <bt_gatt_attr_write_ccc+0xc0>)
   1a100:	9305      	str	r3, [sp, #20]
   1a102:	aa04      	add	r2, sp, #16
   1a104:	2302      	movs	r3, #2
   1a106:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a10a:	9304      	str	r3, [sp, #16]
   1a10c:	f00b fe11 	bl	25d32 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a110:	f06f 0010 	mvn.w	r0, #16
   1a114:	e7ea      	b.n	1a0ec <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a116:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1a11a:	3001      	adds	r0, #1
   1a11c:	f00b fd75 	bl	25c0a <bt_addr_le_copy>
		cfg->id = conn->id;
   1a120:	f899 3008 	ldrb.w	r3, [r9, #8]
   1a124:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1a126:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1a12a:	b98b      	cbnz	r3, 1a150 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   1a12c:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1a12e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1a132:	42ab      	cmp	r3, r5
   1a134:	d003      	beq.n	1a13e <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   1a136:	4641      	mov	r1, r8
   1a138:	4638      	mov	r0, r7
   1a13a:	f00b fce8 	bl	25b0e <gatt_ccc_changed>
	if (!value) {
   1a13e:	2d00      	cmp	r5, #0
   1a140:	d1d3      	bne.n	1a0ea <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a142:	490e      	ldr	r1, [pc, #56]	; (1a17c <bt_gatt_attr_write_ccc+0xc4>)
   1a144:	1c60      	adds	r0, r4, #1
   1a146:	f00b fd60 	bl	25c0a <bt_addr_le_copy>
	cfg->id = 0U;
   1a14a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1a14c:	8125      	strh	r5, [r4, #8]
}
   1a14e:	e7cc      	b.n	1a0ea <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a150:	462a      	mov	r2, r5
   1a152:	4639      	mov	r1, r7
   1a154:	4648      	mov	r0, r9
   1a156:	4798      	blx	r3
		if (write < 0) {
   1a158:	2800      	cmp	r0, #0
   1a15a:	dbc7      	blt.n	1a0ec <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1a15c:	3801      	subs	r0, #1
   1a15e:	2801      	cmp	r0, #1
   1a160:	d9e4      	bls.n	1a12c <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a162:	f06f 000d 	mvn.w	r0, #13
   1a166:	e7c1      	b.n	1a0ec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a168:	f06f 0006 	mvn.w	r0, #6
   1a16c:	e7be      	b.n	1a0ec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a16e:	f06f 000c 	mvn.w	r0, #12
   1a172:	e7bb      	b.n	1a0ec <bt_gatt_attr_write_ccc+0x34>
   1a174:	0002a496 	.word	0x0002a496
   1a178:	00027fa4 	.word	0x00027fa4
   1a17c:	000297b5 	.word	0x000297b5

0001a180 <clear_cf_cfg>:
{
   1a180:	4602      	mov	r2, r0
   1a182:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a184:	4908      	ldr	r1, [pc, #32]	; (1a1a8 <clear_cf_cfg+0x28>)
   1a186:	3001      	adds	r0, #1
   1a188:	f00b fd3f 	bl	25c0a <bt_addr_le_copy>
   1a18c:	2300      	movs	r3, #0
   1a18e:	7213      	strb	r3, [r2, #8]
   1a190:	320c      	adds	r2, #12
   1a192:	f3bf 8f5b 	dmb	ish
   1a196:	e852 1f00 	ldrex	r1, [r2]
   1a19a:	e842 3000 	strex	r0, r3, [r2]
   1a19e:	2800      	cmp	r0, #0
   1a1a0:	d1f9      	bne.n	1a196 <clear_cf_cfg+0x16>
   1a1a2:	f3bf 8f5b 	dmb	ish
}
   1a1a6:	bd08      	pop	{r3, pc}
   1a1a8:	000297b5 	.word	0x000297b5

0001a1ac <sc_save>:
{
   1a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1b0:	b086      	sub	sp, #24
   1a1b2:	4680      	mov	r8, r0
   1a1b4:	460f      	mov	r7, r1
   1a1b6:	4616      	mov	r6, r2
   1a1b8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a1ba:	f7ff ff45 	bl	1a048 <find_sc_cfg>
	if (!cfg) {
   1a1be:	4604      	mov	r4, r0
   1a1c0:	b9b0      	cbnz	r0, 1a1f0 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a1c2:	4912      	ldr	r1, [pc, #72]	; (1a20c <sc_save+0x60>)
   1a1c4:	f7ff ff40 	bl	1a048 <find_sc_cfg>
		if (!cfg) {
   1a1c8:	4604      	mov	r4, r0
   1a1ca:	b960      	cbnz	r0, 1a1e6 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   1a1cc:	4b10      	ldr	r3, [pc, #64]	; (1a210 <sc_save+0x64>)
   1a1ce:	9305      	str	r3, [sp, #20]
   1a1d0:	4810      	ldr	r0, [pc, #64]	; (1a214 <sc_save+0x68>)
   1a1d2:	2302      	movs	r3, #2
   1a1d4:	aa04      	add	r2, sp, #16
   1a1d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a1da:	9304      	str	r3, [sp, #16]
   1a1dc:	f00b fda9 	bl	25d32 <z_log_msg_static_create.constprop.0>
}
   1a1e0:	b006      	add	sp, #24
   1a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a1e6:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a1ea:	4639      	mov	r1, r7
   1a1ec:	f00b fd0d 	bl	25c0a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a1f0:	8922      	ldrh	r2, [r4, #8]
   1a1f2:	8963      	ldrh	r3, [r4, #10]
   1a1f4:	b91a      	cbnz	r2, 1a1fe <sc_save+0x52>
   1a1f6:	b92b      	cbnz	r3, 1a204 <sc_save+0x58>
		cfg->data.start = start;
   1a1f8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a1fa:	8165      	strh	r5, [r4, #10]
   1a1fc:	e7f0      	b.n	1a1e0 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   1a1fe:	4296      	cmp	r6, r2
		*start = new_start;
   1a200:	bf38      	it	cc
   1a202:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1a204:	429d      	cmp	r5, r3
   1a206:	d9eb      	bls.n	1a1e0 <sc_save+0x34>
   1a208:	e7f7      	b.n	1a1fa <sc_save+0x4e>
   1a20a:	bf00      	nop
   1a20c:	000297b5 	.word	0x000297b5
   1a210:	0002a4b0 	.word	0x0002a4b0
   1a214:	00027fa4 	.word	0x00027fa4

0001a218 <cf_write>:
{
   1a218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a21c:	b086      	sub	sp, #24
   1a21e:	461f      	mov	r7, r3
   1a220:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1a224:	2b01      	cmp	r3, #1
{
   1a226:	4606      	mov	r6, r0
   1a228:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1a22a:	d83c      	bhi.n	1a2a6 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1a22c:	443b      	add	r3, r7
   1a22e:	2b01      	cmp	r3, #1
   1a230:	463d      	mov	r5, r7
   1a232:	dc3b      	bgt.n	1a2ac <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1a234:	f7ff fef0 	bl	1a018 <find_cf_cfg>
	if (!cfg) {
   1a238:	4604      	mov	r4, r0
   1a23a:	b998      	cbnz	r0, 1a264 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1a23c:	f7ff feec 	bl	1a018 <find_cf_cfg>
	if (!cfg) {
   1a240:	4604      	mov	r4, r0
   1a242:	b978      	cbnz	r0, 1a264 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1a244:	4b1c      	ldr	r3, [pc, #112]	; (1a2b8 <cf_write+0xa0>)
   1a246:	9305      	str	r3, [sp, #20]
   1a248:	481c      	ldr	r0, [pc, #112]	; (1a2bc <cf_write+0xa4>)
   1a24a:	2302      	movs	r3, #2
   1a24c:	aa04      	add	r2, sp, #16
   1a24e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a252:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1a256:	9304      	str	r3, [sp, #16]
   1a258:	f00b fd6b 	bl	25d32 <z_log_msg_static_create.constprop.0>
}
   1a25c:	4628      	mov	r0, r5
   1a25e:	b006      	add	sp, #24
   1a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a264:	b197      	cbz	r7, 1a28c <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a266:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1a268:	f898 2000 	ldrb.w	r2, [r8]
   1a26c:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a26e:	fa21 f003 	lsr.w	r0, r1, r3
   1a272:	07c7      	lsls	r7, r0, #31
   1a274:	d503      	bpl.n	1a27e <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1a276:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a27a:	07c0      	lsls	r0, r0, #31
   1a27c:	d519      	bpl.n	1a2b2 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a27e:	3301      	adds	r3, #1
   1a280:	2b03      	cmp	r3, #3
   1a282:	d1f4      	bne.n	1a26e <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1a284:	f002 0207 	and.w	r2, r2, #7
   1a288:	4311      	orrs	r1, r2
   1a28a:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a28c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a290:	1c60      	adds	r0, r4, #1
   1a292:	f00b fcba 	bl	25c0a <bt_addr_le_copy>
	cfg->id = conn->id;
   1a296:	4620      	mov	r0, r4
   1a298:	7a33      	ldrb	r3, [r6, #8]
   1a29a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a29e:	2100      	movs	r1, #0
   1a2a0:	f00b fd6b 	bl	25d7a <atomic_set_bit>
	return len;
   1a2a4:	e7da      	b.n	1a25c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a2a6:	f06f 0506 	mvn.w	r5, #6
   1a2aa:	e7d7      	b.n	1a25c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a2ac:	f06f 050c 	mvn.w	r5, #12
   1a2b0:	e7d4      	b.n	1a25c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a2b2:	f06f 0512 	mvn.w	r5, #18
   1a2b6:	e7d1      	b.n	1a25c <cf_write+0x44>
   1a2b8:	0002a4cf 	.word	0x0002a4cf
   1a2bc:	00027fa4 	.word	0x00027fa4

0001a2c0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a2c4:	4b23      	ldr	r3, [pc, #140]	; (1a354 <disconnected_cb+0x94>)
{
   1a2c6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a2c8:	6882      	ldr	r2, [r0, #8]
   1a2ca:	429a      	cmp	r2, r3
{
   1a2cc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a2ce:	d102      	bne.n	1a2d6 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1a2d0:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1a2d2:	8963      	ldrh	r3, [r4, #10]
   1a2d4:	bb33      	cbnz	r3, 1a324 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1a2d6:	2001      	movs	r0, #1
   1a2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1a2dc:	f00a fe9d 	bl	2501a <bt_conn_unref>
		if (ccc->cfg_changed) {
   1a2e0:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1a2e2:	2100      	movs	r1, #0
   1a2e4:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1a2e6:	2b00      	cmp	r3, #0
   1a2e8:	d0f5      	beq.n	1a2d6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1a2ea:	4638      	mov	r0, r7
   1a2ec:	4798      	blx	r3
   1a2ee:	e7f2      	b.n	1a2d6 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a2f0:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1a2f4:	7a28      	ldrb	r0, [r5, #8]
   1a2f6:	4641      	mov	r1, r8
   1a2f8:	f00a fd0d 	bl	24d16 <bt_addr_le_is_bonded>
   1a2fc:	b968      	cbnz	r0, 1a31a <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1a2fe:	4b16      	ldr	r3, [pc, #88]	; (1a358 <disconnected_cb+0x98>)
   1a300:	429c      	cmp	r4, r3
   1a302:	d102      	bne.n	1a30a <disconnected_cb+0x4a>
					sc_clear(conn);
   1a304:	4628      	mov	r0, r5
   1a306:	f00b fd17 	bl	25d38 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a30a:	4914      	ldr	r1, [pc, #80]	; (1a35c <disconnected_cb+0x9c>)
   1a30c:	4630      	mov	r0, r6
   1a30e:	f00b fc7c 	bl	25c0a <bt_addr_le_copy>
	cfg->id = 0U;
   1a312:	2300      	movs	r3, #0
   1a314:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1a316:	8123      	strh	r3, [r4, #8]
}
   1a318:	e7e2      	b.n	1a2e0 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a31a:	4641      	mov	r1, r8
   1a31c:	4630      	mov	r0, r6
   1a31e:	f00b fc74 	bl	25c0a <bt_addr_le_copy>
   1a322:	e7dd      	b.n	1a2e0 <disconnected_cb+0x20>
		if (!cfg->value) {
   1a324:	8923      	ldrh	r3, [r4, #8]
   1a326:	2b00      	cmp	r3, #0
   1a328:	d0da      	beq.n	1a2e0 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a32a:	4626      	mov	r6, r4
   1a32c:	4628      	mov	r0, r5
   1a32e:	f816 1b01 	ldrb.w	r1, [r6], #1
   1a332:	4632      	mov	r2, r6
   1a334:	f00a feba 	bl	250ac <bt_conn_is_peer_addr_le>
   1a338:	2800      	cmp	r0, #0
   1a33a:	d1d9      	bne.n	1a2f0 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a33c:	7820      	ldrb	r0, [r4, #0]
   1a33e:	4631      	mov	r1, r6
   1a340:	f7fe faac 	bl	1889c <bt_conn_lookup_addr_le>
			if (tmp) {
   1a344:	2800      	cmp	r0, #0
   1a346:	d0cb      	beq.n	1a2e0 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1a348:	7a83      	ldrb	r3, [r0, #10]
   1a34a:	2b07      	cmp	r3, #7
   1a34c:	d1c6      	bne.n	1a2dc <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1a34e:	f00a fe64 	bl	2501a <bt_conn_unref>
	if (!value_used) {
   1a352:	e7c0      	b.n	1a2d6 <disconnected_cb+0x16>
   1a354:	0001a0b9 	.word	0x0001a0b9
   1a358:	20000640 	.word	0x20000640
   1a35c:	000297b5 	.word	0x000297b5

0001a360 <sc_indicate_rsp>:
{
   1a360:	b510      	push	{r4, lr}
   1a362:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a364:	4815      	ldr	r0, [pc, #84]	; (1a3bc <sc_indicate_rsp+0x5c>)
   1a366:	f3bf 8f5b 	dmb	ish
   1a36a:	e850 3f00 	ldrex	r3, [r0]
   1a36e:	f023 0302 	bic.w	r3, r3, #2
   1a372:	e840 3200 	strex	r2, r3, [r0]
   1a376:	2a00      	cmp	r2, #0
   1a378:	d1f7      	bne.n	1a36a <sc_indicate_rsp+0xa>
   1a37a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a37e:	f3bf 8f5b 	dmb	ish
   1a382:	6803      	ldr	r3, [r0, #0]
   1a384:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a388:	07da      	lsls	r2, r3, #31
   1a38a:	d504      	bpl.n	1a396 <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a38c:	2200      	movs	r2, #0
   1a38e:	2300      	movs	r3, #0
   1a390:	3830      	subs	r0, #48	; 0x30
   1a392:	f004 f8fb 	bl	1e58c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1a396:	4620      	mov	r0, r4
   1a398:	f00b fb88 	bl	25aac <bt_att_fixed_chan_only>
   1a39c:	b160      	cbz	r0, 1a3b8 <sc_indicate_rsp+0x58>
		cfg = find_cf_cfg(conn);
   1a39e:	4620      	mov	r0, r4
   1a3a0:	f7ff fe3a 	bl	1a018 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a3a4:	b140      	cbz	r0, 1a3b8 <sc_indicate_rsp+0x58>
   1a3a6:	7a03      	ldrb	r3, [r0, #8]
   1a3a8:	07db      	lsls	r3, r3, #31
   1a3aa:	d505      	bpl.n	1a3b8 <sc_indicate_rsp+0x58>
}
   1a3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a3b0:	2100      	movs	r1, #0
   1a3b2:	300c      	adds	r0, #12
   1a3b4:	f00b bce1 	b.w	25d7a <atomic_set_bit>
}
   1a3b8:	bd10      	pop	{r4, pc}
   1a3ba:	bf00      	nop
   1a3bc:	200023a8 	.word	0x200023a8

0001a3c0 <bt_gatt_init>:
{
   1a3c0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a3c2:	4b20      	ldr	r3, [pc, #128]	; (1a444 <bt_gatt_init+0x84>)
   1a3c4:	f3bf 8f5b 	dmb	ish
   1a3c8:	2201      	movs	r2, #1
   1a3ca:	e853 1f00 	ldrex	r1, [r3]
   1a3ce:	2900      	cmp	r1, #0
   1a3d0:	d103      	bne.n	1a3da <bt_gatt_init+0x1a>
   1a3d2:	e843 2000 	strex	r0, r2, [r3]
   1a3d6:	2800      	cmp	r0, #0
   1a3d8:	d1f7      	bne.n	1a3ca <bt_gatt_init+0xa>
   1a3da:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1a3de:	d130      	bne.n	1a442 <bt_gatt_init+0x82>
   1a3e0:	f3bf 8f5b 	dmb	ish
   1a3e4:	4b18      	ldr	r3, [pc, #96]	; (1a448 <bt_gatt_init+0x88>)
   1a3e6:	e853 1f00 	ldrex	r1, [r3]
   1a3ea:	2900      	cmp	r1, #0
   1a3ec:	d103      	bne.n	1a3f6 <bt_gatt_init+0x36>
   1a3ee:	e843 2000 	strex	r0, r2, [r3]
   1a3f2:	2800      	cmp	r0, #0
   1a3f4:	d1f7      	bne.n	1a3e6 <bt_gatt_init+0x26>
   1a3f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1a3fa:	d108      	bne.n	1a40e <bt_gatt_init+0x4e>
   1a3fc:	4913      	ldr	r1, [pc, #76]	; (1a44c <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a3fe:	4a14      	ldr	r2, [pc, #80]	; (1a450 <bt_gatt_init+0x90>)
   1a400:	880b      	ldrh	r3, [r1, #0]
   1a402:	4c14      	ldr	r4, [pc, #80]	; (1a454 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1a404:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a406:	42a2      	cmp	r2, r4
   1a408:	d315      	bcc.n	1a436 <bt_gatt_init+0x76>
   1a40a:	b100      	cbz	r0, 1a40e <bt_gatt_init+0x4e>
   1a40c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1a40e:	4b12      	ldr	r3, [pc, #72]	; (1a458 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1a410:	4912      	ldr	r1, [pc, #72]	; (1a45c <bt_gatt_init+0x9c>)
   1a412:	4813      	ldr	r0, [pc, #76]	; (1a460 <bt_gatt_init+0xa0>)
   1a414:	2200      	movs	r2, #0
	list->tail = NULL;
   1a416:	e9c3 2200 	strd	r2, r2, [r3]
   1a41a:	f00c fc62 	bl	26ce2 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1a41e:	4810      	ldr	r0, [pc, #64]	; (1a460 <bt_gatt_init+0xa0>)
   1a420:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a424:	2300      	movs	r3, #0
   1a426:	f7fb fc7b 	bl	15d20 <bt_long_wq_schedule>
}
   1a42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1a42e:	490d      	ldr	r1, [pc, #52]	; (1a464 <bt_gatt_init+0xa4>)
   1a430:	480d      	ldr	r0, [pc, #52]	; (1a468 <bt_gatt_init+0xa8>)
   1a432:	f00c bc56 	b.w	26ce2 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1a436:	6850      	ldr	r0, [r2, #4]
   1a438:	4403      	add	r3, r0
   1a43a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a43c:	3208      	adds	r2, #8
   1a43e:	2001      	movs	r0, #1
   1a440:	e7e1      	b.n	1a406 <bt_gatt_init+0x46>
}
   1a442:	bd10      	pop	{r4, pc}
   1a444:	2000370c 	.word	0x2000370c
   1a448:	20003708 	.word	0x20003708
   1a44c:	20004492 	.word	0x20004492
   1a450:	00027f54 	.word	0x00027f54
   1a454:	00027f74 	.word	0x00027f74
   1a458:	20003710 	.word	0x20003710
   1a45c:	00025e9d 	.word	0x00025e9d
   1a460:	20002300 	.word	0x20002300
   1a464:	0001a8a9 	.word	0x0001a8a9
   1a468:	20002378 	.word	0x20002378

0001a46c <bt_gatt_attr_get_handle>:
{
   1a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1a470:	4603      	mov	r3, r0
   1a472:	b148      	cbz	r0, 1a488 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1a474:	8a00      	ldrh	r0, [r0, #16]
   1a476:	b938      	cbnz	r0, 1a488 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a478:	4912      	ldr	r1, [pc, #72]	; (1a4c4 <bt_gatt_attr_get_handle+0x58>)
   1a47a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1a4c8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1a47e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a480:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a484:	4571      	cmp	r1, lr
   1a486:	d301      	bcc.n	1a48c <bt_gatt_attr_get_handle+0x20>
}
   1a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a48c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1a490:	42bb      	cmp	r3, r7
   1a492:	d304      	bcc.n	1a49e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a494:	fb0c 7206 	mla	r2, ip, r6, r7
   1a498:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1a49a:	4293      	cmp	r3, r2
   1a49c:	d90e      	bls.n	1a4bc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1a49e:	4434      	add	r4, r6
   1a4a0:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a4a2:	3108      	adds	r1, #8
   1a4a4:	4614      	mov	r4, r2
   1a4a6:	e7ed      	b.n	1a484 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1a4a8:	fb0c 7805 	mla	r8, ip, r5, r7
   1a4ac:	4543      	cmp	r3, r8
   1a4ae:	d007      	beq.n	1a4c0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1a4b0:	3501      	adds	r5, #1
   1a4b2:	1962      	adds	r2, r4, r5
   1a4b4:	42b5      	cmp	r5, r6
   1a4b6:	b292      	uxth	r2, r2
   1a4b8:	d1f6      	bne.n	1a4a8 <bt_gatt_attr_get_handle+0x3c>
   1a4ba:	e7f2      	b.n	1a4a2 <bt_gatt_attr_get_handle+0x36>
   1a4bc:	2500      	movs	r5, #0
   1a4be:	e7f8      	b.n	1a4b2 <bt_gatt_attr_get_handle+0x46>
   1a4c0:	4610      	mov	r0, r2
   1a4c2:	e7e1      	b.n	1a488 <bt_gatt_attr_get_handle+0x1c>
   1a4c4:	00027f54 	.word	0x00027f54
   1a4c8:	00027f74 	.word	0x00027f74

0001a4cc <bt_gatt_foreach_attr_type>:
{
   1a4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4d0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1a4d4:	9100      	str	r1, [sp, #0]
   1a4d6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1a4d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a4dc:	2d00      	cmp	r5, #0
   1a4de:	bf08      	it	eq
   1a4e0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1a4e2:	4b24      	ldr	r3, [pc, #144]	; (1a574 <bt_gatt_foreach_attr_type+0xa8>)
   1a4e4:	881b      	ldrh	r3, [r3, #0]
   1a4e6:	4283      	cmp	r3, r0
{
   1a4e8:	4607      	mov	r7, r0
   1a4ea:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1a4ec:	d23c      	bcs.n	1a568 <bt_gatt_foreach_attr_type+0x9c>
}
   1a4ee:	b003      	add	sp, #12
   1a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1a4f4:	6873      	ldr	r3, [r6, #4]
   1a4f6:	4423      	add	r3, r4
   1a4f8:	42bb      	cmp	r3, r7
   1a4fa:	d232      	bcs.n	1a562 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1a4fc:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a4fe:	3608      	adds	r6, #8
   1a500:	4b1d      	ldr	r3, [pc, #116]	; (1a578 <bt_gatt_foreach_attr_type+0xac>)
   1a502:	429e      	cmp	r6, r3
   1a504:	d3f6      	bcc.n	1a4f4 <bt_gatt_foreach_attr_type+0x28>
   1a506:	e7f2      	b.n	1a4ee <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a508:	5889      	ldr	r1, [r1, r2]
   1a50a:	9301      	str	r3, [sp, #4]
   1a50c:	4640      	mov	r0, r8
   1a50e:	f00a fac7 	bl	24aa0 <bt_uuid_cmp>
   1a512:	9b01      	ldr	r3, [sp, #4]
   1a514:	b190      	cbz	r0, 1a53c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a516:	3401      	adds	r4, #1
   1a518:	f10a 0a01 	add.w	sl, sl, #1
   1a51c:	b2a4      	uxth	r4, r4
   1a51e:	6873      	ldr	r3, [r6, #4]
   1a520:	4553      	cmp	r3, sl
   1a522:	d9ec      	bls.n	1a4fe <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1a524:	9b00      	ldr	r3, [sp, #0]
   1a526:	429c      	cmp	r4, r3
   1a528:	d8e1      	bhi.n	1a4ee <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1a52a:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a52c:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1a52e:	d3f2      	bcc.n	1a516 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a530:	fb0b f20a 	mul.w	r2, fp, sl
   1a534:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a536:	f1b8 0f00 	cmp.w	r8, #0
   1a53a:	d1e5      	bne.n	1a508 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1a53c:	f1b9 0f00 	cmp.w	r9, #0
   1a540:	d10b      	bne.n	1a55a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1a542:	3d01      	subs	r5, #1
   1a544:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1a546:	4618      	mov	r0, r3
   1a548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a54c:	4621      	mov	r1, r4
   1a54e:	4798      	blx	r3
	if (!*num_matches) {
   1a550:	2d00      	cmp	r5, #0
   1a552:	d0cc      	beq.n	1a4ee <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a554:	2800      	cmp	r0, #0
   1a556:	d1de      	bne.n	1a516 <bt_gatt_foreach_attr_type+0x4a>
   1a558:	e7c9      	b.n	1a4ee <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1a55a:	68da      	ldr	r2, [r3, #12]
   1a55c:	4591      	cmp	r9, r2
   1a55e:	d1da      	bne.n	1a516 <bt_gatt_foreach_attr_type+0x4a>
   1a560:	e7ef      	b.n	1a542 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a562:	f04f 0a00 	mov.w	sl, #0
   1a566:	e7da      	b.n	1a51e <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a568:	4e04      	ldr	r6, [pc, #16]	; (1a57c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1a56a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a56c:	f04f 0b14 	mov.w	fp, #20
   1a570:	e7c6      	b.n	1a500 <bt_gatt_foreach_attr_type+0x34>
   1a572:	bf00      	nop
   1a574:	20004492 	.word	0x20004492
   1a578:	00027f74 	.word	0x00027f74
   1a57c:	00027f54 	.word	0x00027f54

0001a580 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   1a580:	b510      	push	{r4, lr}
   1a582:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1a584:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a586:	aa22      	add	r2, sp, #136	; 0x88
   1a588:	4669      	mov	r1, sp
   1a58a:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1a58c:	e9cd 3300 	strd	r3, r3, [sp]
   1a590:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a594:	f00a f95e 	bl	24854 <tc_cmac_setup>
   1a598:	b958      	cbnz	r0, 1a5b2 <db_hash_gen.constprop.0+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1a59a:	4b1a      	ldr	r3, [pc, #104]	; (1a604 <db_hash_gen.constprop.0+0x84>)
		LOG_ERR("Unable to calculate hash");
   1a59c:	9309      	str	r3, [sp, #36]	; 0x24
   1a59e:	481a      	ldr	r0, [pc, #104]	; (1a608 <db_hash_gen.constprop.0+0x88>)
   1a5a0:	2302      	movs	r3, #2
   1a5a2:	aa08      	add	r2, sp, #32
   1a5a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a5a8:	9308      	str	r3, [sp, #32]
   1a5aa:	f00b fbc2 	bl	25d32 <z_log_msg_static_create.constprop.0>
}
   1a5ae:	b04e      	add	sp, #312	; 0x138
   1a5b0:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a5b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a5b6:	2001      	movs	r0, #1
   1a5b8:	4a14      	ldr	r2, [pc, #80]	; (1a60c <db_hash_gen.constprop.0+0x8c>)
   1a5ba:	ab0a      	add	r3, sp, #40	; 0x28
   1a5bc:	f00b fc63 	bl	25e86 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a5c0:	4813      	ldr	r0, [pc, #76]	; (1a610 <db_hash_gen.constprop.0+0x90>)
   1a5c2:	a90a      	add	r1, sp, #40	; 0x28
   1a5c4:	f00a f9db 	bl	2497e <tc_cmac_final>
   1a5c8:	b908      	cbnz	r0, 1a5ce <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   1a5ca:	4b12      	ldr	r3, [pc, #72]	; (1a614 <db_hash_gen.constprop.0+0x94>)
   1a5cc:	e7e6      	b.n	1a59c <db_hash_gen.constprop.0+0x1c>
   1a5ce:	4b10      	ldr	r3, [pc, #64]	; (1a610 <db_hash_gen.constprop.0+0x90>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a5d0:	2208      	movs	r2, #8
   1a5d2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1a5d6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a5d8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1a5dc:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1a5e0:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1a5e2:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1a5e4:	d1f7      	bne.n	1a5d6 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a5e6:	f3bf 8f5b 	dmb	ish
   1a5ea:	4b0b      	ldr	r3, [pc, #44]	; (1a618 <db_hash_gen.constprop.0+0x98>)
   1a5ec:	e853 1f00 	ldrex	r1, [r3]
   1a5f0:	f041 0104 	orr.w	r1, r1, #4
   1a5f4:	e843 1200 	strex	r2, r1, [r3]
   1a5f8:	2a00      	cmp	r2, #0
   1a5fa:	d1f7      	bne.n	1a5ec <db_hash_gen.constprop.0+0x6c>
   1a5fc:	f3bf 8f5b 	dmb	ish
   1a600:	e7d5      	b.n	1a5ae <db_hash_gen.constprop.0+0x2e>
   1a602:	bf00      	nop
   1a604:	0002a4fb 	.word	0x0002a4fb
   1a608:	00027fa4 	.word	0x00027fa4
   1a60c:	00025b55 	.word	0x00025b55
   1a610:	200022f0 	.word	0x200022f0
   1a614:	0002a514 	.word	0x0002a514
   1a618:	200023a8 	.word	0x200023a8

0001a61c <db_hash_read>:
{
   1a61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a620:	4918      	ldr	r1, [pc, #96]	; (1a684 <db_hash_read+0x68>)
{
   1a622:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1a626:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a628:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1a62c:	461e      	mov	r6, r3
   1a62e:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a630:	f00c fb79 	bl	26d26 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a634:	f3bf 8f5b 	dmb	ish
   1a638:	4b13      	ldr	r3, [pc, #76]	; (1a688 <db_hash_read+0x6c>)
   1a63a:	681b      	ldr	r3, [r3, #0]
   1a63c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a640:	0759      	lsls	r1, r3, #29
   1a642:	d401      	bmi.n	1a648 <db_hash_read+0x2c>
		db_hash_gen(true);
   1a644:	f7ff ff9c 	bl	1a580 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   1a648:	4620      	mov	r0, r4
   1a64a:	f7ff fce5 	bl	1a018 <find_cf_cfg>
	if (cfg &&
   1a64e:	4604      	mov	r4, r0
   1a650:	b170      	cbz	r0, 1a670 <db_hash_read+0x54>
   1a652:	7a03      	ldrb	r3, [r0, #8]
   1a654:	07da      	lsls	r2, r3, #31
   1a656:	d50b      	bpl.n	1a670 <db_hash_read+0x54>
   1a658:	f3bf 8f5b 	dmb	ish
   1a65c:	68e3      	ldr	r3, [r4, #12]
   1a65e:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   1a662:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1a664:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   1a668:	d402      	bmi.n	1a670 <db_hash_read+0x54>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1a66a:	2101      	movs	r1, #1
   1a66c:	f00b fb85 	bl	25d7a <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a670:	2310      	movs	r3, #16
   1a672:	9306      	str	r3, [sp, #24]
   1a674:	463a      	mov	r2, r7
   1a676:	4631      	mov	r1, r6
   1a678:	4628      	mov	r0, r5
   1a67a:	4b04      	ldr	r3, [pc, #16]	; (1a68c <db_hash_read+0x70>)
}
   1a67c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a680:	f00b bacf 	b.w	25c22 <bt_gatt_attr_read.constprop.0>
   1a684:	20002330 	.word	0x20002330
   1a688:	200023a8 	.word	0x200023a8
   1a68c:	200022f0 	.word	0x200022f0

0001a690 <bt_gatt_attr_next>:
{
   1a690:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1a692:	2300      	movs	r3, #0
   1a694:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1a696:	f7ff fee9 	bl	1a46c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1a69a:	1c41      	adds	r1, r0, #1
   1a69c:	b289      	uxth	r1, r1
   1a69e:	4608      	mov	r0, r1
   1a6a0:	4a03      	ldr	r2, [pc, #12]	; (1a6b0 <bt_gatt_attr_next+0x20>)
   1a6a2:	ab01      	add	r3, sp, #4
   1a6a4:	f00b fbef 	bl	25e86 <bt_gatt_foreach_attr>
}
   1a6a8:	9801      	ldr	r0, [sp, #4]
   1a6aa:	b003      	add	sp, #12
   1a6ac:	f85d fb04 	ldr.w	pc, [sp], #4
   1a6b0:	00025b09 	.word	0x00025b09

0001a6b4 <gatt_indicate>:
{
   1a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a6b8:	4615      	mov	r5, r2
   1a6ba:	b086      	sub	sp, #24
   1a6bc:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a6be:	2294      	movs	r2, #148	; 0x94
   1a6c0:	6869      	ldr	r1, [r5, #4]
{
   1a6c2:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a6c4:	f00b fbec 	bl	25ea0 <bt_gatt_check_perm>
   1a6c8:	4680      	mov	r8, r0
   1a6ca:	b178      	cbz	r0, 1a6ec <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   1a6cc:	4b34      	ldr	r3, [pc, #208]	; (1a7a0 <gatt_indicate+0xec>)
   1a6ce:	9305      	str	r3, [sp, #20]
   1a6d0:	4834      	ldr	r0, [pc, #208]	; (1a7a4 <gatt_indicate+0xf0>)
   1a6d2:	2302      	movs	r3, #2
   1a6d4:	aa04      	add	r2, sp, #16
   1a6d6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1a6da:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1a6de:	9304      	str	r3, [sp, #16]
   1a6e0:	f00b fb27 	bl	25d32 <z_log_msg_static_create.constprop.0>
}
   1a6e4:	4628      	mov	r0, r5
   1a6e6:	b006      	add	sp, #24
   1a6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1a6ec:	6869      	ldr	r1, [r5, #4]
   1a6ee:	2202      	movs	r2, #2
   1a6f0:	4630      	mov	r0, r6
   1a6f2:	f00b fbfe 	bl	25ef2 <bt_gatt_is_subscribed>
   1a6f6:	b960      	cbnz	r0, 1a712 <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   1a6f8:	4b2b      	ldr	r3, [pc, #172]	; (1a7a8 <gatt_indicate+0xf4>)
   1a6fa:	9305      	str	r3, [sp, #20]
   1a6fc:	4829      	ldr	r0, [pc, #164]	; (1a7a4 <gatt_indicate+0xf0>)
   1a6fe:	2302      	movs	r3, #2
   1a700:	aa04      	add	r2, sp, #16
   1a702:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a706:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1a708:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1a70c:	f00b fb11 	bl	25d32 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a710:	e7e8      	b.n	1a6e4 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a712:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1a716:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1a718:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a71a:	f7ff fb7d 	bl	19e18 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1a71e:	3702      	adds	r7, #2
	if (!req) {
   1a720:	4604      	mov	r4, r0
   1a722:	b1b0      	cbz	r0, 1a752 <gatt_indicate+0x9e>
	req->func = func;
   1a724:	4b21      	ldr	r3, [pc, #132]	; (1a7ac <gatt_indicate+0xf8>)
   1a726:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1a728:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1a72a:	463a      	mov	r2, r7
   1a72c:	211d      	movs	r1, #29
   1a72e:	4630      	mov	r0, r6
   1a730:	f7ff f89e 	bl	19870 <bt_att_create_pdu>
	if (!buf) {
   1a734:	4607      	mov	r7, r0
   1a736:	b978      	cbnz	r0, 1a758 <gatt_indicate+0xa4>
		LOG_WRN("No buffer available to send indication");
   1a738:	4b1d      	ldr	r3, [pc, #116]	; (1a7b0 <gatt_indicate+0xfc>)
   1a73a:	481a      	ldr	r0, [pc, #104]	; (1a7a4 <gatt_indicate+0xf0>)
   1a73c:	9305      	str	r3, [sp, #20]
   1a73e:	aa04      	add	r2, sp, #16
   1a740:	2302      	movs	r3, #2
   1a742:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a746:	9304      	str	r3, [sp, #16]
   1a748:	f00b faf3 	bl	25d32 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1a74c:	4620      	mov	r0, r4
   1a74e:	f7ff fb87 	bl	19e60 <bt_att_req_free>
		return -ENOMEM;
   1a752:	f06f 050b 	mvn.w	r5, #11
   1a756:	e7c5      	b.n	1a6e4 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1a758:	2301      	movs	r3, #1
   1a75a:	4642      	mov	r2, r8
   1a75c:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1a75e:	f107 0a0c 	add.w	sl, r7, #12
   1a762:	f00b f9ca 	bl	25afa <bt_att_set_tx_meta_data>
   1a766:	2102      	movs	r1, #2
   1a768:	4650      	mov	r0, sl
   1a76a:	f00b fd19 	bl	261a0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1a76e:	4680      	mov	r8, r0
   1a770:	4650      	mov	r0, sl
   1a772:	f828 9b02 	strh.w	r9, [r8], #2
   1a776:	8aa9      	ldrh	r1, [r5, #20]
   1a778:	f00b fd12 	bl	261a0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a77c:	8aaa      	ldrh	r2, [r5, #20]
   1a77e:	6929      	ldr	r1, [r5, #16]
   1a780:	4640      	mov	r0, r8
   1a782:	f00c fe1b 	bl	273bc <memcpy>
	req->buf = buf;
   1a786:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1a788:	4621      	mov	r1, r4
   1a78a:	4630      	mov	r0, r6
   1a78c:	f00b f979 	bl	25a82 <bt_att_req_send>
	if (err) {
   1a790:	4605      	mov	r5, r0
   1a792:	2800      	cmp	r0, #0
   1a794:	d0a6      	beq.n	1a6e4 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1a796:	4620      	mov	r0, r4
   1a798:	f7ff fb62 	bl	19e60 <bt_att_req_free>
   1a79c:	e7a2      	b.n	1a6e4 <gatt_indicate+0x30>
   1a79e:	bf00      	nop
   1a7a0:	0002a52d 	.word	0x0002a52d
   1a7a4:	00027fa4 	.word	0x00027fa4
   1a7a8:	0002a543 	.word	0x0002a543
   1a7ac:	00025b23 	.word	0x00025b23
   1a7b0:	0002a56e 	.word	0x0002a56e

0001a7b4 <bt_gatt_indicate>:
{
   1a7b4:	b530      	push	{r4, r5, lr}
   1a7b6:	4b39      	ldr	r3, [pc, #228]	; (1a89c <bt_gatt_indicate+0xe8>)
   1a7b8:	f3bf 8f5b 	dmb	ish
   1a7bc:	681b      	ldr	r3, [r3, #0]
   1a7be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a7c2:	075a      	lsls	r2, r3, #29
{
   1a7c4:	b08b      	sub	sp, #44	; 0x2c
   1a7c6:	4604      	mov	r4, r0
   1a7c8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a7ca:	d561      	bpl.n	1a890 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a7cc:	b110      	cbz	r0, 1a7d4 <bt_gatt_indicate+0x20>
   1a7ce:	7a83      	ldrb	r3, [r0, #10]
   1a7d0:	2b07      	cmp	r3, #7
   1a7d2:	d160      	bne.n	1a896 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   1a7d4:	6868      	ldr	r0, [r5, #4]
   1a7d6:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a7d8:	f7ff fe48 	bl	1a46c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1a7dc:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a7de:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a7e2:	b33a      	cbz	r2, 1a834 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a7e4:	a905      	add	r1, sp, #20
   1a7e6:	9102      	str	r1, [sp, #8]
   1a7e8:	492d      	ldr	r1, [pc, #180]	; (1a8a0 <bt_gatt_indicate+0xec>)
   1a7ea:	9101      	str	r1, [sp, #4]
   1a7ec:	2101      	movs	r1, #1
	found->attr = NULL;
   1a7ee:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a7f0:	9100      	str	r1, [sp, #0]
   1a7f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a7f6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a7f8:	f7ff fe68 	bl	1a4cc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a7fc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a7fe:	b91b      	cbnz	r3, 1a808 <bt_gatt_indicate+0x54>
			return -ENOENT;
   1a800:	f06f 0001 	mvn.w	r0, #1
}
   1a804:	b00b      	add	sp, #44	; 0x2c
   1a806:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1a808:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a80a:	9b05      	ldr	r3, [sp, #20]
   1a80c:	6818      	ldr	r0, [r3, #0]
   1a80e:	2300      	movs	r3, #0
   1a810:	f88d 3010 	strb.w	r3, [sp, #16]
   1a814:	a904      	add	r1, sp, #16
   1a816:	f642 0303 	movw	r3, #10243	; 0x2803
   1a81a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a81e:	f00a f93f 	bl	24aa0 <bt_uuid_cmp>
   1a822:	b970      	cbnz	r0, 1a842 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a824:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1a826:	68c3      	ldr	r3, [r0, #12]
   1a828:	799b      	ldrb	r3, [r3, #6]
   1a82a:	069b      	lsls	r3, r3, #26
   1a82c:	d405      	bmi.n	1a83a <bt_gatt_indicate+0x86>
			return -EINVAL;
   1a82e:	f06f 0015 	mvn.w	r0, #21
   1a832:	e7e7      	b.n	1a804 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   1a834:	2800      	cmp	r0, #0
   1a836:	d1e8      	bne.n	1a80a <bt_gatt_indicate+0x56>
   1a838:	e7e2      	b.n	1a800 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a83a:	f00b fadd 	bl	25df8 <bt_gatt_attr_value_handle>
   1a83e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1a842:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1a846:	b13c      	cbz	r4, 1a858 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   1a848:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1a84a:	4601      	mov	r1, r0
		params->_ref = 1;
   1a84c:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1a84e:	462a      	mov	r2, r5
   1a850:	4620      	mov	r0, r4
   1a852:	f7ff ff2f 	bl	1a6b4 <gatt_indicate>
   1a856:	e7d5      	b.n	1a804 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   1a858:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a85c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1a85e:	2302      	movs	r3, #2
   1a860:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a864:	f642 1302 	movw	r3, #10498	; 0x2902
   1a868:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a86c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1a86e:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a870:	9302      	str	r3, [sp, #8]
   1a872:	4b0c      	ldr	r3, [pc, #48]	; (1a8a4 <bt_gatt_indicate+0xf0>)
   1a874:	9301      	str	r3, [sp, #4]
   1a876:	2301      	movs	r3, #1
   1a878:	9300      	str	r3, [sp, #0]
   1a87a:	aa04      	add	r2, sp, #16
   1a87c:	4623      	mov	r3, r4
   1a87e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1a882:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a884:	f88d 4010 	strb.w	r4, [sp, #16]
   1a888:	f7ff fe20 	bl	1a4cc <bt_gatt_foreach_attr_type>
	return data.err;
   1a88c:	9807      	ldr	r0, [sp, #28]
   1a88e:	e7b9      	b.n	1a804 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   1a890:	f06f 000a 	mvn.w	r0, #10
   1a894:	e7b6      	b.n	1a804 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   1a896:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a89a:	e7b3      	b.n	1a804 <bt_gatt_indicate+0x50>
   1a89c:	20000454 	.word	0x20000454
   1a8a0:	00025b49 	.word	0x00025b49
   1a8a4:	0001aad1 	.word	0x0001aad1

0001a8a8 <sc_process>:
{
   1a8a8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1a8aa:	f850 2c08 	ldr.w	r2, [r0, #-8]
   1a8ae:	9201      	str	r2, [sp, #4]
{
   1a8b0:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1a8b2:	f1a0 0120 	sub.w	r1, r0, #32
   1a8b6:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a8ba:	f3bf 8f5b 	dmb	ish
   1a8be:	e854 2f00 	ldrex	r2, [r4]
   1a8c2:	f022 0201 	bic.w	r2, r2, #1
   1a8c6:	e844 2000 	strex	r0, r2, [r4]
   1a8ca:	2800      	cmp	r0, #0
   1a8cc:	d1f7      	bne.n	1a8be <sc_process+0x16>
   1a8ce:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a8d2:	4a0d      	ldr	r2, [pc, #52]	; (1a908 <sc_process+0x60>)
   1a8d4:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1a8d8:	4a0c      	ldr	r2, [pc, #48]	; (1a90c <sc_process+0x64>)
   1a8da:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1a8de:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   1a8e0:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1a8e2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1a8e6:	2204      	movs	r2, #4
	sc->start = 0U;
   1a8e8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1a8ec:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   1a8f0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a8f4:	f7ff ff5e 	bl	1a7b4 <bt_gatt_indicate>
   1a8f8:	b918      	cbnz	r0, 1a902 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1a8fa:	2101      	movs	r1, #1
   1a8fc:	4620      	mov	r0, r4
   1a8fe:	f00b fa3c 	bl	25d7a <atomic_set_bit>
}
   1a902:	b002      	add	sp, #8
   1a904:	bd10      	pop	{r4, pc}
   1a906:	bf00      	nop
   1a908:	00028678 	.word	0x00028678
   1a90c:	0001a361 	.word	0x0001a361

0001a910 <update_ccc>:
{
   1a910:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a912:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   1a914:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a916:	4b31      	ldr	r3, [pc, #196]	; (1a9dc <update_ccc+0xcc>)
   1a918:	6882      	ldr	r2, [r0, #8]
   1a91a:	429a      	cmp	r2, r3
{
   1a91c:	af00      	add	r7, sp, #0
   1a91e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a920:	d11e      	bne.n	1a960 <update_ccc+0x50>
	ccc = attr->user_data;
   1a922:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1a924:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a926:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1a928:	b1d3      	cbz	r3, 1a960 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a92a:	7831      	ldrb	r1, [r6, #0]
   1a92c:	4628      	mov	r0, r5
   1a92e:	f00a fbbd 	bl	250ac <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a932:	b1a8      	cbz	r0, 1a960 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a934:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a938:	4621      	mov	r1, r4
   1a93a:	4628      	mov	r0, r5
   1a93c:	f00b fab0 	bl	25ea0 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a940:	2803      	cmp	r0, #3
   1a942:	d111      	bne.n	1a968 <update_ccc+0x58>
				LOG_WRN("CCC %p not writable", attr);
   1a944:	466d      	mov	r5, sp
   1a946:	b088      	sub	sp, #32
   1a948:	466a      	mov	r2, sp
   1a94a:	4b25      	ldr	r3, [pc, #148]	; (1a9e0 <update_ccc+0xd0>)
   1a94c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a950:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a954:	f842 0f10 	str.w	r0, [r2, #16]!
   1a958:	4822      	ldr	r0, [pc, #136]	; (1a9e4 <update_ccc+0xd4>)
   1a95a:	f00b f9ea 	bl	25d32 <z_log_msg_static_create.constprop.0>
   1a95e:	46ad      	mov	sp, r5
}
   1a960:	2001      	movs	r0, #1
   1a962:	3724      	adds	r7, #36	; 0x24
   1a964:	46bd      	mov	sp, r7
   1a966:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   1a968:	4631      	mov	r1, r6
   1a96a:	4620      	mov	r0, r4
   1a96c:	f00b f8cf 	bl	25b0e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a970:	4b1d      	ldr	r3, [pc, #116]	; (1a9e8 <update_ccc+0xd8>)
   1a972:	429e      	cmp	r6, r3
   1a974:	d1f4      	bne.n	1a960 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a976:	7a28      	ldrb	r0, [r5, #8]
   1a978:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1a97c:	f7ff fb64 	bl	1a048 <find_sc_cfg>
	if (!cfg) {
   1a980:	2800      	cmp	r0, #0
   1a982:	d0ed      	beq.n	1a960 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   1a984:	8902      	ldrh	r2, [r0, #8]
   1a986:	8943      	ldrh	r3, [r0, #10]
   1a988:	ea52 0103 	orrs.w	r1, r2, r3
   1a98c:	d0e8      	beq.n	1a960 <update_ccc+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a98e:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a990:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1a992:	4628      	mov	r0, r5
   1a994:	f7fd feb6 	bl	18704 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a998:	4914      	ldr	r1, [pc, #80]	; (1a9ec <update_ccc+0xdc>)
   1a99a:	4a15      	ldr	r2, [pc, #84]	; (1a9f0 <update_ccc+0xe0>)
   1a99c:	2318      	movs	r3, #24
   1a99e:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a9a2:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a9a4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a9a6:	4a13      	ldr	r2, [pc, #76]	; (1a9f4 <update_ccc+0xe4>)
   1a9a8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1a9aa:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a9ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1a9b0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1a9b2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a9b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1a9b8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a9ba:	4628      	mov	r0, r5
   1a9bc:	f7ff fefa 	bl	1a7b4 <bt_gatt_indicate>
   1a9c0:	2800      	cmp	r0, #0
   1a9c2:	d0cd      	beq.n	1a960 <update_ccc+0x50>
		LOG_ERR("SC restore indication failed");
   1a9c4:	4b0c      	ldr	r3, [pc, #48]	; (1a9f8 <update_ccc+0xe8>)
   1a9c6:	61fb      	str	r3, [r7, #28]
   1a9c8:	2302      	movs	r3, #2
   1a9ca:	4806      	ldr	r0, [pc, #24]	; (1a9e4 <update_ccc+0xd4>)
   1a9cc:	61bb      	str	r3, [r7, #24]
   1a9ce:	f107 0218 	add.w	r2, r7, #24
   1a9d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a9d6:	f00b f9ac 	bl	25d32 <z_log_msg_static_create.constprop.0>
   1a9da:	e7c1      	b.n	1a960 <update_ccc+0x50>
   1a9dc:	0001a0b9 	.word	0x0001a0b9
   1a9e0:	0002a595 	.word	0x0002a595
   1a9e4:	00027fa4 	.word	0x00027fa4
   1a9e8:	20000640 	.word	0x20000640
   1a9ec:	200036e0 	.word	0x200036e0
   1a9f0:	00028678 	.word	0x00028678
   1a9f4:	00025d97 	.word	0x00025d97
   1a9f8:	0002a5a9 	.word	0x0002a5a9

0001a9fc <gatt_notify>:
{
   1a9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aa00:	4614      	mov	r4, r2
   1aa02:	b087      	sub	sp, #28
   1aa04:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1aa06:	2294      	movs	r2, #148	; 0x94
   1aa08:	6861      	ldr	r1, [r4, #4]
{
   1aa0a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1aa0c:	f00b fa48 	bl	25ea0 <bt_gatt_check_perm>
   1aa10:	b170      	cbz	r0, 1aa30 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1aa12:	4b2b      	ldr	r3, [pc, #172]	; (1aac0 <gatt_notify+0xc4>)
   1aa14:	482b      	ldr	r0, [pc, #172]	; (1aac4 <gatt_notify+0xc8>)
   1aa16:	9305      	str	r3, [sp, #20]
   1aa18:	aa04      	add	r2, sp, #16
   1aa1a:	2302      	movs	r3, #2
   1aa1c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1aa20:	9304      	str	r3, [sp, #16]
   1aa22:	f00b f986 	bl	25d32 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1aa26:	f04f 30ff 	mov.w	r0, #4294967295
}
   1aa2a:	b007      	add	sp, #28
   1aa2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1aa30:	6861      	ldr	r1, [r4, #4]
   1aa32:	2201      	movs	r2, #1
   1aa34:	4630      	mov	r0, r6
   1aa36:	f00b fa5c 	bl	25ef2 <bt_gatt_is_subscribed>
   1aa3a:	b960      	cbnz	r0, 1aa56 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1aa3c:	4b22      	ldr	r3, [pc, #136]	; (1aac8 <gatt_notify+0xcc>)
   1aa3e:	4821      	ldr	r0, [pc, #132]	; (1aac4 <gatt_notify+0xc8>)
   1aa40:	9305      	str	r3, [sp, #20]
   1aa42:	aa04      	add	r2, sp, #16
   1aa44:	2302      	movs	r3, #2
   1aa46:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1aa4a:	9304      	str	r3, [sp, #16]
   1aa4c:	f00b f971 	bl	25d32 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1aa50:	f06f 0015 	mvn.w	r0, #21
   1aa54:	e7e9      	b.n	1aa2a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1aa56:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1aa58:	211b      	movs	r1, #27
   1aa5a:	3202      	adds	r2, #2
   1aa5c:	4630      	mov	r0, r6
   1aa5e:	f7fe ff07 	bl	19870 <bt_att_create_pdu>
	if (!buf) {
   1aa62:	4605      	mov	r5, r0
   1aa64:	b960      	cbnz	r0, 1aa80 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   1aa66:	4b19      	ldr	r3, [pc, #100]	; (1aacc <gatt_notify+0xd0>)
   1aa68:	4816      	ldr	r0, [pc, #88]	; (1aac4 <gatt_notify+0xc8>)
   1aa6a:	9305      	str	r3, [sp, #20]
   1aa6c:	aa04      	add	r2, sp, #16
   1aa6e:	2302      	movs	r3, #2
   1aa70:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1aa74:	9304      	str	r3, [sp, #16]
   1aa76:	f00b f95c 	bl	25d32 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1aa7a:	f06f 000b 	mvn.w	r0, #11
   1aa7e:	e7d4      	b.n	1aa2a <gatt_notify+0x2e>
   1aa80:	f100 090c 	add.w	r9, r0, #12
   1aa84:	2102      	movs	r1, #2
   1aa86:	4648      	mov	r0, r9
   1aa88:	f00b fb8a 	bl	261a0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1aa8c:	4607      	mov	r7, r0
   1aa8e:	4648      	mov	r0, r9
   1aa90:	f827 8b02 	strh.w	r8, [r7], #2
   1aa94:	89a1      	ldrh	r1, [r4, #12]
   1aa96:	f00b fb83 	bl	261a0 <net_buf_simple_add>
   1aa9a:	89a2      	ldrh	r2, [r4, #12]
   1aa9c:	68a1      	ldr	r1, [r4, #8]
   1aa9e:	4638      	mov	r0, r7
   1aaa0:	f00c fc8c 	bl	273bc <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1aaa4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1aaa8:	4628      	mov	r0, r5
   1aaaa:	2301      	movs	r3, #1
   1aaac:	f00b f825 	bl	25afa <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1aab0:	4629      	mov	r1, r5
   1aab2:	4630      	mov	r0, r6
}
   1aab4:	b007      	add	sp, #28
   1aab6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1aaba:	f00a bfa4 	b.w	25a06 <bt_att_send>
   1aabe:	bf00      	nop
   1aac0:	0002a52d 	.word	0x0002a52d
   1aac4:	00027fa4 	.word	0x00027fa4
   1aac8:	0002a543 	.word	0x0002a543
   1aacc:	0002a5c6 	.word	0x0002a5c6

0001aad0 <notify_cb>:
{
   1aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aad2:	4b3f      	ldr	r3, [pc, #252]	; (1abd0 <notify_cb+0x100>)
{
   1aad4:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aad6:	6882      	ldr	r2, [r0, #8]
   1aad8:	429a      	cmp	r2, r3
{
   1aada:	b087      	sub	sp, #28
   1aadc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aade:	d003      	beq.n	1aae8 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   1aae0:	2701      	movs	r7, #1
}
   1aae2:	4638      	mov	r0, r7
   1aae4:	b007      	add	sp, #28
   1aae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1aae8:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1aaea:	4b3a      	ldr	r3, [pc, #232]	; (1abd4 <notify_cb+0x104>)
   1aaec:	429e      	cmp	r6, r3
   1aaee:	d056      	beq.n	1ab9e <notify_cb+0xce>
		if (cfg->value != data->type) {
   1aaf0:	8932      	ldrh	r2, [r6, #8]
   1aaf2:	89ab      	ldrh	r3, [r5, #12]
   1aaf4:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1aaf6:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1aafa:	d1f1      	bne.n	1aae0 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1aafc:	7830      	ldrb	r0, [r6, #0]
   1aafe:	f7fd fecd 	bl	1889c <bt_conn_lookup_addr_le>
		if (!conn) {
   1ab02:	4604      	mov	r4, r0
   1ab04:	2800      	cmp	r0, #0
   1ab06:	d0eb      	beq.n	1aae0 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   1ab08:	7a83      	ldrb	r3, [r0, #10]
   1ab0a:	2b07      	cmp	r3, #7
   1ab0c:	d005      	beq.n	1ab1a <notify_cb+0x4a>
			bt_conn_unref(conn);
   1ab0e:	f00a fa84 	bl	2501a <bt_conn_unref>
			continue;
   1ab12:	e7e5      	b.n	1aae0 <notify_cb+0x10>
			bt_conn_unref(conn);
   1ab14:	f00a fa81 	bl	2501a <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ab18:	e7ea      	b.n	1aaf0 <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1ab1a:	6973      	ldr	r3, [r6, #20]
   1ab1c:	b123      	cbz	r3, 1ab28 <notify_cb+0x58>
   1ab1e:	4639      	mov	r1, r7
   1ab20:	4798      	blx	r3
   1ab22:	b908      	cbnz	r0, 1ab28 <notify_cb+0x58>
			bt_conn_unref(conn);
   1ab24:	4620      	mov	r0, r4
   1ab26:	e7f2      	b.n	1ab0e <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ab28:	4639      	mov	r1, r7
   1ab2a:	2294      	movs	r2, #148	; 0x94
   1ab2c:	4620      	mov	r0, r4
   1ab2e:	f00b f9b7 	bl	25ea0 <bt_gatt_check_perm>
   1ab32:	4607      	mov	r7, r0
   1ab34:	b150      	cbz	r0, 1ab4c <notify_cb+0x7c>
			LOG_WRN("Link is not encrypted");
   1ab36:	4b28      	ldr	r3, [pc, #160]	; (1abd8 <notify_cb+0x108>)
   1ab38:	9305      	str	r3, [sp, #20]
   1ab3a:	4828      	ldr	r0, [pc, #160]	; (1abdc <notify_cb+0x10c>)
   1ab3c:	2302      	movs	r3, #2
   1ab3e:	aa04      	add	r2, sp, #16
   1ab40:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ab44:	9304      	str	r3, [sp, #16]
   1ab46:	f00b f8f4 	bl	25d32 <z_log_msg_static_create.constprop.0>
   1ab4a:	e7eb      	b.n	1ab24 <notify_cb+0x54>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1ab4c:	89ab      	ldrh	r3, [r5, #12]
   1ab4e:	2b02      	cmp	r3, #2
   1ab50:	d114      	bne.n	1ab7c <notify_cb+0xac>
   1ab52:	8933      	ldrh	r3, [r6, #8]
   1ab54:	079a      	lsls	r2, r3, #30
   1ab56:	d405      	bmi.n	1ab64 <notify_cb+0x94>
		bt_conn_unref(conn);
   1ab58:	4620      	mov	r0, r4
   1ab5a:	f00a fa5e 	bl	2501a <bt_conn_unref>
		data->err = 0;
   1ab5e:	2300      	movs	r3, #0
   1ab60:	60ab      	str	r3, [r5, #8]
   1ab62:	e7bd      	b.n	1aae0 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1ab64:	692a      	ldr	r2, [r5, #16]
   1ab66:	88a9      	ldrh	r1, [r5, #4]
   1ab68:	4620      	mov	r0, r4
   1ab6a:	f7ff fda3 	bl	1a6b4 <gatt_indicate>
			if (err == 0) {
   1ab6e:	4606      	mov	r6, r0
   1ab70:	b978      	cbnz	r0, 1ab92 <notify_cb+0xc2>
				data->ind_params->_ref++;
   1ab72:	692a      	ldr	r2, [r5, #16]
   1ab74:	7d93      	ldrb	r3, [r2, #22]
   1ab76:	3301      	adds	r3, #1
   1ab78:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1ab7a:	e7ed      	b.n	1ab58 <notify_cb+0x88>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1ab7c:	2b01      	cmp	r3, #1
   1ab7e:	d1eb      	bne.n	1ab58 <notify_cb+0x88>
   1ab80:	8933      	ldrh	r3, [r6, #8]
   1ab82:	07db      	lsls	r3, r3, #31
   1ab84:	d5e8      	bpl.n	1ab58 <notify_cb+0x88>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1ab86:	692a      	ldr	r2, [r5, #16]
   1ab88:	88a9      	ldrh	r1, [r5, #4]
   1ab8a:	4620      	mov	r0, r4
   1ab8c:	f7ff ff36 	bl	1a9fc <gatt_notify>
   1ab90:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1ab92:	4620      	mov	r0, r4
   1ab94:	f00a fa41 	bl	2501a <bt_conn_unref>
		if (err < 0) {
   1ab98:	2e00      	cmp	r6, #0
   1ab9a:	dba2      	blt.n	1aae2 <notify_cb+0x12>
   1ab9c:	e7df      	b.n	1ab5e <notify_cb+0x8e>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ab9e:	4c10      	ldr	r4, [pc, #64]	; (1abe0 <notify_cb+0x110>)
   1aba0:	4910      	ldr	r1, [pc, #64]	; (1abe4 <notify_cb+0x114>)
   1aba2:	4620      	mov	r0, r4
   1aba4:	f00b f829 	bl	25bfa <bt_addr_le_eq>
   1aba8:	2800      	cmp	r0, #0
   1abaa:	d1a1      	bne.n	1aaf0 <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1abac:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1abb0:	2207      	movs	r2, #7
   1abb2:	4621      	mov	r1, r4
   1abb4:	f7fd febc 	bl	18930 <bt_conn_lookup_state_le>
			if (!conn) {
   1abb8:	2800      	cmp	r0, #0
   1abba:	d1ab      	bne.n	1ab14 <notify_cb+0x44>
				sc = (struct sc_data *)data->ind_params->data;
   1abbc:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1abbe:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1abc2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1abc4:	4621      	mov	r1, r4
   1abc6:	8853      	ldrh	r3, [r2, #2]
   1abc8:	8812      	ldrh	r2, [r2, #0]
   1abca:	f7ff faef 	bl	1a1ac <sc_save>
				continue;
   1abce:	e78f      	b.n	1aaf0 <notify_cb+0x20>
   1abd0:	0001a0b9 	.word	0x0001a0b9
   1abd4:	20000640 	.word	0x20000640
   1abd8:	0002a52d 	.word	0x0002a52d
   1abdc:	00027fa4 	.word	0x00027fa4
   1abe0:	20004487 	.word	0x20004487
   1abe4:	000297b5 	.word	0x000297b5

0001abe8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1abe8:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1abea:	4a06      	ldr	r2, [pc, #24]	; (1ac04 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1abec:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1abee:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1abf0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1abf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1abf6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1abfa:	f00b f944 	bl	25e86 <bt_gatt_foreach_attr>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1abfe:	b003      	add	sp, #12
   1ac00:	f85d fb04 	ldr.w	pc, [sp], #4
   1ac04:	0001a911 	.word	0x0001a911

0001ac08 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1ac0a:	4b08      	ldr	r3, [pc, #32]	; (1ac2c <bt_gatt_att_max_mtu_changed+0x24>)
   1ac0c:	681c      	ldr	r4, [r3, #0]
   1ac0e:	4605      	mov	r5, r0
   1ac10:	460e      	mov	r6, r1
   1ac12:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ac14:	b14c      	cbz	r4, 1ac2a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1ac16:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ac1a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1ac1c:	b11b      	cbz	r3, 1ac26 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1ac1e:	463a      	mov	r2, r7
   1ac20:	4631      	mov	r1, r6
   1ac22:	4628      	mov	r0, r5
   1ac24:	4798      	blx	r3
	return node->next;
   1ac26:	6864      	ldr	r4, [r4, #4]
   1ac28:	e7f4      	b.n	1ac14 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1ac2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ac2c:	20003710 	.word	0x20003710

0001ac30 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1ac30:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ac32:	4603      	mov	r3, r0
   1ac34:	4a0f      	ldr	r2, [pc, #60]	; (1ac74 <bt_gatt_disconnected+0x44>)
{
   1ac36:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ac38:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ac3c:	2001      	movs	r0, #1
   1ac3e:	f00b f922 	bl	25e86 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1ac42:	4620      	mov	r0, r4
   1ac44:	f7ff f9e8 	bl	1a018 <find_cf_cfg>
	if (!cfg) {
   1ac48:	4605      	mov	r5, r0
   1ac4a:	b188      	cbz	r0, 1ac70 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ac4c:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1ac50:	7a20      	ldrb	r0, [r4, #8]
   1ac52:	4631      	mov	r1, r6
   1ac54:	f00a f85f 	bl	24d16 <bt_addr_le_is_bonded>
   1ac58:	b920      	cbnz	r0, 1ac64 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1ac5a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1ac5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1ac60:	f7ff ba8e 	b.w	1a180 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ac64:	4631      	mov	r1, r6
   1ac66:	1c68      	adds	r0, r5, #1
}
   1ac68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ac6c:	f00a bfcd 	b.w	25c0a <bt_addr_le_copy>
}
   1ac70:	bd70      	pop	{r4, r5, r6, pc}
   1ac72:	bf00      	nop
   1ac74:	0001a2c1 	.word	0x0001a2c1

0001ac78 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1ac78:	b580      	push	{r7, lr}
   1ac7a:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1ac7c:	b088      	sub	sp, #32
   1ac7e:	466a      	mov	r2, sp
   1ac80:	4b07      	ldr	r3, [pc, #28]	; (1aca0 <bt_smp_accept.part.0+0x28>)
   1ac82:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ac86:	2303      	movs	r3, #3
   1ac88:	f842 3f10 	str.w	r3, [r2, #16]!
   1ac8c:	4805      	ldr	r0, [pc, #20]	; (1aca4 <bt_smp_accept.part.0+0x2c>)
   1ac8e:	2300      	movs	r3, #0
   1ac90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ac94:	f7f9 f9c4 	bl	14020 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   1ac98:	f06f 000b 	mvn.w	r0, #11
   1ac9c:	46bd      	mov	sp, r7
   1ac9e:	bd80      	pop	{r7, pc}
   1aca0:	0002a5fe 	.word	0x0002a5fe
   1aca4:	00027fdc 	.word	0x00027fdc

0001aca8 <bt_smp_accept>:
		if (smp->chan.conn) {
   1aca8:	4b04      	ldr	r3, [pc, #16]	; (1acbc <bt_smp_accept+0x14>)
   1acaa:	681a      	ldr	r2, [r3, #0]
   1acac:	b10a      	cbz	r2, 1acb2 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1acae:	f7ff bfe3 	b.w	1ac78 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   1acb2:	4803      	ldr	r0, [pc, #12]	; (1acc0 <bt_smp_accept+0x18>)
   1acb4:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   1acb6:	600b      	str	r3, [r1, #0]
}
   1acb8:	4610      	mov	r0, r2
   1acba:	4770      	bx	lr
   1acbc:	20003718 	.word	0x20003718
   1acc0:	0002877c 	.word	0x0002877c

0001acc4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1acc4:	4b02      	ldr	r3, [pc, #8]	; (1acd0 <net_buf_pool_get+0xc>)
   1acc6:	222c      	movs	r2, #44	; 0x2c
   1acc8:	fb02 3000 	mla	r0, r2, r0, r3
   1accc:	4770      	bx	lr
   1acce:	bf00      	nop
   1acd0:	20000c84 	.word	0x20000c84

0001acd4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1acd4:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1acd6:	4b06      	ldr	r3, [pc, #24]	; (1acf0 <net_buf_id+0x1c>)
   1acd8:	212c      	movs	r1, #44	; 0x2c
   1acda:	fb01 3302 	mla	r3, r1, r2, r3
   1acde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ace0:	7f1b      	ldrb	r3, [r3, #28]
   1ace2:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ace4:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ace6:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1acea:	fbb0 f0f3 	udiv	r0, r0, r3
   1acee:	4770      	bx	lr
   1acf0:	20000c84 	.word	0x20000c84

0001acf4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1acf4:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1acf6:	4b0a      	ldr	r3, [pc, #40]	; (1ad20 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1acf8:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1acfa:	242c      	movs	r4, #44	; 0x2c
   1acfc:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1ad00:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ad04:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ad06:	681a      	ldr	r2, [r3, #0]
   1ad08:	4294      	cmp	r4, r2
   1ad0a:	bf94      	ite	ls
   1ad0c:	600c      	strls	r4, [r1, #0]
   1ad0e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ad10:	e9d3 5400 	ldrd	r5, r4, [r3]
   1ad14:	f7ff ffde 	bl	1acd4 <net_buf_id>
}
   1ad18:	fb05 4000 	mla	r0, r5, r0, r4
   1ad1c:	bd38      	pop	{r3, r4, r5, pc}
   1ad1e:	bf00      	nop
   1ad20:	20000c84 	.word	0x20000c84

0001ad24 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ad24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad28:	4605      	mov	r5, r0
   1ad2a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ad2c:	4610      	mov	r0, r2
   1ad2e:	4619      	mov	r1, r3
{
   1ad30:	4691      	mov	r9, r2
   1ad32:	4698      	mov	r8, r3
   1ad34:	4617      	mov	r7, r2
   1ad36:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ad38:	f00c f987 	bl	2704a <sys_clock_timeout_end_calc>
   1ad3c:	4682      	mov	sl, r0
   1ad3e:	468b      	mov	fp, r1
	__asm__ volatile(
   1ad40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad44:	f3ef 8111 	mrs	r1, BASEPRI
   1ad48:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad4c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ad50:	8b6b      	ldrh	r3, [r5, #26]
   1ad52:	2b00      	cmp	r3, #0
   1ad54:	d058      	beq.n	1ae08 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ad56:	8b2a      	ldrh	r2, [r5, #24]
   1ad58:	429a      	cmp	r2, r3
   1ad5a:	d93c      	bls.n	1add6 <net_buf_alloc_len+0xb2>
   1ad5c:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1ad5e:	2200      	movs	r2, #0
   1ad60:	2300      	movs	r3, #0
   1ad62:	4628      	mov	r0, r5
   1ad64:	f003 fa62 	bl	1e22c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ad68:	9900      	ldr	r1, [sp, #0]
   1ad6a:	4604      	mov	r4, r0
   1ad6c:	2800      	cmp	r0, #0
   1ad6e:	d032      	beq.n	1add6 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   1ad70:	f381 8811 	msr	BASEPRI, r1
   1ad74:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ad78:	9b01      	ldr	r3, [sp, #4]
   1ad7a:	2b00      	cmp	r3, #0
   1ad7c:	d055      	beq.n	1ae2a <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ad7e:	ea58 0309 	orrs.w	r3, r8, r9
   1ad82:	d00f      	beq.n	1ada4 <net_buf_alloc_len+0x80>
   1ad84:	f1b8 3fff 	cmp.w	r8, #4294967295
   1ad88:	bf08      	it	eq
   1ad8a:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1ad8e:	d009      	beq.n	1ada4 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1ad90:	f004 f89c 	bl	1eecc <sys_clock_tick_get>
   1ad94:	ebba 0700 	subs.w	r7, sl, r0
   1ad98:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   1ad9c:	2e00      	cmp	r6, #0
   1ad9e:	bfbc      	itt	lt
   1ada0:	2700      	movlt	r7, #0
   1ada2:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ada4:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ada6:	4d26      	ldr	r5, [pc, #152]	; (1ae40 <net_buf_alloc_len+0x11c>)
   1ada8:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1adac:	fb08 5303 	mla	r3, r8, r3, r5
   1adb0:	463a      	mov	r2, r7
   1adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1adb4:	681b      	ldr	r3, [r3, #0]
   1adb6:	a901      	add	r1, sp, #4
   1adb8:	f8d3 9000 	ldr.w	r9, [r3]
   1adbc:	4620      	mov	r0, r4
   1adbe:	4633      	mov	r3, r6
   1adc0:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1adc2:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1adc4:	2800      	cmp	r0, #0
   1adc6:	d131      	bne.n	1ae2c <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   1adc8:	7aa0      	ldrb	r0, [r4, #10]
   1adca:	4621      	mov	r1, r4
   1adcc:	fb00 5008 	mla	r0, r0, r8, r5
   1add0:	f00b feb7 	bl	26b42 <k_queue_prepend>
}
   1add4:	e024      	b.n	1ae20 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1add6:	8b68      	ldrh	r0, [r5, #26]
   1add8:	1e43      	subs	r3, r0, #1
   1adda:	836b      	strh	r3, [r5, #26]
   1addc:	f381 8811 	msr	BASEPRI, r1
   1ade0:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ade4:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ade6:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ade8:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1adea:	331b      	adds	r3, #27
   1adec:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1adf0:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1adf2:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1adf6:	4b12      	ldr	r3, [pc, #72]	; (1ae40 <net_buf_alloc_len+0x11c>)
   1adf8:	4a12      	ldr	r2, [pc, #72]	; (1ae44 <net_buf_alloc_len+0x120>)
   1adfa:	1aeb      	subs	r3, r5, r3
   1adfc:	109b      	asrs	r3, r3, #2
   1adfe:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1ae00:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1ae02:	7f2b      	ldrb	r3, [r5, #28]
   1ae04:	72e3      	strb	r3, [r4, #11]
		goto success;
   1ae06:	e7b7      	b.n	1ad78 <net_buf_alloc_len+0x54>
   1ae08:	f381 8811 	msr	BASEPRI, r1
   1ae0c:	f3bf 8f6f 	isb	sy
   1ae10:	464a      	mov	r2, r9
   1ae12:	4643      	mov	r3, r8
   1ae14:	4628      	mov	r0, r5
   1ae16:	f003 fa09 	bl	1e22c <z_impl_k_queue_get>
	if (!buf) {
   1ae1a:	4604      	mov	r4, r0
   1ae1c:	2800      	cmp	r0, #0
   1ae1e:	d1ab      	bne.n	1ad78 <net_buf_alloc_len+0x54>
		return NULL;
   1ae20:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ae22:	4620      	mov	r0, r4
   1ae24:	b003      	add	sp, #12
   1ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1ae2a:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   1ae2c:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ae2e:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ae30:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1ae32:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1ae34:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1ae36:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1ae38:	6963      	ldr	r3, [r4, #20]
   1ae3a:	8262      	strh	r2, [r4, #18]
   1ae3c:	60e3      	str	r3, [r4, #12]
	return buf;
   1ae3e:	e7f0      	b.n	1ae22 <net_buf_alloc_len+0xfe>
   1ae40:	20000c84 	.word	0x20000c84
   1ae44:	ba2e8ba3 	.word	0xba2e8ba3

0001ae48 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae4c:	4d16      	ldr	r5, [pc, #88]	; (1aea8 <net_buf_unref+0x60>)
   1ae4e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ae50:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1ae52:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1ae54:	b90c      	cbnz	r4, 1ae5a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1ae56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1ae5a:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1ae5c:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   1ae60:	3b01      	subs	r3, #1
   1ae62:	b2db      	uxtb	r3, r3
   1ae64:	7223      	strb	r3, [r4, #8]
   1ae66:	2b00      	cmp	r3, #0
   1ae68:	d1f5      	bne.n	1ae56 <net_buf_unref+0xe>
		if (buf->__buf) {
   1ae6a:	6961      	ldr	r1, [r4, #20]
   1ae6c:	b159      	cbz	r1, 1ae86 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ae6e:	7a63      	ldrb	r3, [r4, #9]
   1ae70:	07db      	lsls	r3, r3, #31
   1ae72:	d407      	bmi.n	1ae84 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ae74:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1ae76:	fb07 5303 	mla	r3, r7, r3, r5
   1ae7a:	4620      	mov	r0, r4
   1ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ae7e:	681b      	ldr	r3, [r3, #0]
   1ae80:	689b      	ldr	r3, [r3, #8]
   1ae82:	4798      	blx	r3
			buf->__buf = NULL;
   1ae84:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   1ae86:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1ae88:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   1ae8a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1ae8e:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   1ae90:	6a1b      	ldr	r3, [r3, #32]
   1ae92:	b11b      	cbz	r3, 1ae9c <net_buf_unref+0x54>
			pool->destroy(buf);
   1ae94:	4620      	mov	r0, r4
   1ae96:	4798      	blx	r3
{
   1ae98:	4644      	mov	r4, r8
   1ae9a:	e7db      	b.n	1ae54 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1ae9c:	4621      	mov	r1, r4
   1ae9e:	fb00 5007 	mla	r0, r0, r7, r5
   1aea2:	f00b fe4e 	bl	26b42 <k_queue_prepend>
}
   1aea6:	e7f7      	b.n	1ae98 <net_buf_unref+0x50>
   1aea8:	20000c84 	.word	0x20000c84

0001aeac <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1aeac:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1aeae:	4804      	ldr	r0, [pc, #16]	; (1aec0 <xoshiro128_initialize+0x14>)
   1aeb0:	f00b fccc 	bl	2684c <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1aeb4:	2800      	cmp	r0, #0
}
   1aeb6:	bf0c      	ite	eq
   1aeb8:	f06f 0012 	mvneq.w	r0, #18
   1aebc:	2000      	movne	r0, #0
   1aebe:	bd08      	pop	{r3, pc}
   1aec0:	00027d08 	.word	0x00027d08

0001aec4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1aec4:	4b08      	ldr	r3, [pc, #32]	; (1aee8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1aec6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1aec8:	1ac3      	subs	r3, r0, r3
{
   1aeca:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1aecc:	4907      	ldr	r1, [pc, #28]	; (1aeec <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1aece:	109b      	asrs	r3, r3, #2
{
   1aed0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1aed2:	4359      	muls	r1, r3
   1aed4:	4806      	ldr	r0, [pc, #24]	; (1aef0 <onoff_stop+0x2c>)
   1aed6:	2240      	movs	r2, #64	; 0x40
   1aed8:	f00b f9c1 	bl	2625e <stop>
	notify(mgr, res);
   1aedc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1aede:	4601      	mov	r1, r0
	notify(mgr, res);
   1aee0:	4620      	mov	r0, r4
}
   1aee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1aee6:	4718      	bx	r3
   1aee8:	200037b8 	.word	0x200037b8
   1aeec:	b6db6db7 	.word	0xb6db6db7
   1aef0:	00027c90 	.word	0x00027c90

0001aef4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1aef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1aef6:	4c0c      	ldr	r4, [pc, #48]	; (1af28 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1aef8:	4a0c      	ldr	r2, [pc, #48]	; (1af2c <onoff_start+0x38>)
   1aefa:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1aefc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1aefe:	9300      	str	r3, [sp, #0]
{
   1af00:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1af02:	460b      	mov	r3, r1
   1af04:	490a      	ldr	r1, [pc, #40]	; (1af30 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1af06:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1af08:	4361      	muls	r1, r4
{
   1af0a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1af0c:	4809      	ldr	r0, [pc, #36]	; (1af34 <onoff_start+0x40>)
   1af0e:	f00b f9d2 	bl	262b6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1af12:	1e01      	subs	r1, r0, #0
   1af14:	da05      	bge.n	1af22 <onoff_start+0x2e>
		notify(mgr, err);
   1af16:	4630      	mov	r0, r6
   1af18:	462b      	mov	r3, r5
	}
}
   1af1a:	b002      	add	sp, #8
   1af1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1af20:	4718      	bx	r3
}
   1af22:	b002      	add	sp, #8
   1af24:	bd70      	pop	{r4, r5, r6, pc}
   1af26:	bf00      	nop
   1af28:	200037b8 	.word	0x200037b8
   1af2c:	00026321 	.word	0x00026321
   1af30:	b6db6db7 	.word	0xb6db6db7
   1af34:	00027c90 	.word	0x00027c90

0001af38 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1af38:	2200      	movs	r2, #0
{
   1af3a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1af3c:	2101      	movs	r1, #1
{
   1af3e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1af40:	4610      	mov	r0, r2
   1af42:	f7f9 ffc7 	bl	14ed4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1af46:	480f      	ldr	r0, [pc, #60]	; (1af84 <clk_init+0x4c>)
   1af48:	f002 f8cc 	bl	1d0e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1af4c:	4b0e      	ldr	r3, [pc, #56]	; (1af88 <clk_init+0x50>)
   1af4e:	4298      	cmp	r0, r3
   1af50:	d115      	bne.n	1af7e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1af52:	f00b fc0a 	bl	2676a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1af56:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1af58:	490c      	ldr	r1, [pc, #48]	; (1af8c <clk_init+0x54>)
   1af5a:	4630      	mov	r0, r6
   1af5c:	f008 ff58 	bl	23e10 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1af60:	2800      	cmp	r0, #0
   1af62:	db0b      	blt.n	1af7c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1af64:	2501      	movs	r5, #1
   1af66:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1af68:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1af6a:	4908      	ldr	r1, [pc, #32]	; (1af8c <clk_init+0x54>)
   1af6c:	f104 001c 	add.w	r0, r4, #28
   1af70:	f008 ff4e 	bl	23e10 <onoff_manager_init>
		if (err < 0) {
   1af74:	2800      	cmp	r0, #0
   1af76:	db01      	blt.n	1af7c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1af78:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1af7a:	2000      	movs	r0, #0
}
   1af7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1af7e:	f06f 0004 	mvn.w	r0, #4
   1af82:	e7fb      	b.n	1af7c <clk_init+0x44>
   1af84:	0001afc5 	.word	0x0001afc5
   1af88:	0bad0000 	.word	0x0bad0000
   1af8c:	000287b0 	.word	0x000287b0

0001af90 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1af90:	b570      	push	{r4, r5, r6, lr}
   1af92:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1af94:	230c      	movs	r3, #12
   1af96:	4809      	ldr	r0, [pc, #36]	; (1afbc <clkstarted_handle.constprop.0+0x2c>)
   1af98:	434b      	muls	r3, r1
   1af9a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1af9c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1afa0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1afa2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1afa4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1afa6:	4418      	add	r0, r3
   1afa8:	f00b f946 	bl	26238 <set_on_state>
	if (callback) {
   1afac:	b12d      	cbz	r5, 1afba <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1afae:	4632      	mov	r2, r6
   1afb0:	462b      	mov	r3, r5
   1afb2:	4803      	ldr	r0, [pc, #12]	; (1afc0 <clkstarted_handle.constprop.0+0x30>)
}
   1afb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1afb8:	4718      	bx	r3
}
   1afba:	bd70      	pop	{r4, r5, r6, pc}
   1afbc:	200037b8 	.word	0x200037b8
   1afc0:	00027c90 	.word	0x00027c90

0001afc4 <clock_event_handler>:
	switch (event) {
   1afc4:	b110      	cbz	r0, 1afcc <clock_event_handler+0x8>
   1afc6:	2801      	cmp	r0, #1
   1afc8:	d004      	beq.n	1afd4 <clock_event_handler+0x10>
   1afca:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1afcc:	4b03      	ldr	r3, [pc, #12]	; (1afdc <clock_event_handler+0x18>)
   1afce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1afd0:	075b      	lsls	r3, r3, #29
   1afd2:	d101      	bne.n	1afd8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1afd4:	f7ff bfdc 	b.w	1af90 <clkstarted_handle.constprop.0>
}
   1afd8:	4770      	bx	lr
   1afda:	bf00      	nop
   1afdc:	200037b8 	.word	0x200037b8

0001afe0 <generic_hfclk_start>:
{
   1afe0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1afe2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1afe6:	f3ef 8111 	mrs	r1, BASEPRI
   1afea:	f383 8812 	msr	BASEPRI_MAX, r3
   1afee:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1aff2:	4a12      	ldr	r2, [pc, #72]	; (1b03c <generic_hfclk_start+0x5c>)
   1aff4:	6813      	ldr	r3, [r2, #0]
   1aff6:	f043 0002 	orr.w	r0, r3, #2
   1affa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1affc:	07da      	lsls	r2, r3, #31
   1affe:	d408      	bmi.n	1b012 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1b000:	f381 8811 	msr	BASEPRI, r1
   1b004:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1b008:	2001      	movs	r0, #1
}
   1b00a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b00e:	f002 b859 	b.w	1d0c4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1b012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b016:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1b01a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1b01e:	07d3      	lsls	r3, r2, #31
   1b020:	d5ee      	bpl.n	1b000 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1b022:	4807      	ldr	r0, [pc, #28]	; (1b040 <generic_hfclk_start+0x60>)
   1b024:	f00b f908 	bl	26238 <set_on_state>
   1b028:	f381 8811 	msr	BASEPRI, r1
   1b02c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1b030:	2000      	movs	r0, #0
}
   1b032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1b036:	f7ff bfab 	b.w	1af90 <clkstarted_handle.constprop.0>
   1b03a:	bf00      	nop
   1b03c:	20003808 	.word	0x20003808
   1b040:	200037f8 	.word	0x200037f8

0001b044 <api_blocking_start>:
{
   1b044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b046:	2200      	movs	r2, #0
   1b048:	2301      	movs	r3, #1
   1b04a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b04e:	ab04      	add	r3, sp, #16
   1b050:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b054:	4a09      	ldr	r2, [pc, #36]	; (1b07c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b056:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b05a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b05c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b060:	f00b f957 	bl	26312 <api_start>
	if (err < 0) {
   1b064:	2800      	cmp	r0, #0
   1b066:	db05      	blt.n	1b074 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1b068:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1b06c:	2300      	movs	r3, #0
   1b06e:	4668      	mov	r0, sp
   1b070:	f003 f936 	bl	1e2e0 <z_impl_k_sem_take>
}
   1b074:	b007      	add	sp, #28
   1b076:	f85d fb04 	ldr.w	pc, [sp], #4
   1b07a:	bf00      	nop
   1b07c:	00026341 	.word	0x00026341

0001b080 <generic_hfclk_stop>:
{
   1b080:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b082:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b086:	f3ef 8411 	mrs	r4, BASEPRI
   1b08a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b08e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1b092:	4a07      	ldr	r2, [pc, #28]	; (1b0b0 <generic_hfclk_stop+0x30>)
   1b094:	6813      	ldr	r3, [r2, #0]
   1b096:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1b09a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1b09c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1b09e:	d402      	bmi.n	1b0a6 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1b0a0:	2001      	movs	r0, #1
   1b0a2:	f00b fb5d 	bl	26760 <nrfx_clock_stop>
	__asm__ volatile(
   1b0a6:	f384 8811 	msr	BASEPRI, r4
   1b0aa:	f3bf 8f6f 	isb	sy
}
   1b0ae:	bd10      	pop	{r4, pc}
   1b0b0:	20003808 	.word	0x20003808

0001b0b4 <z_nrf_clock_control_lf_on>:
{
   1b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b0b8:	4938      	ldr	r1, [pc, #224]	; (1b19c <z_nrf_clock_control_lf_on+0xe8>)
   1b0ba:	f3bf 8f5b 	dmb	ish
   1b0be:	4607      	mov	r7, r0
   1b0c0:	2201      	movs	r2, #1
   1b0c2:	e851 3f00 	ldrex	r3, [r1]
   1b0c6:	e841 2000 	strex	r0, r2, [r1]
   1b0ca:	2800      	cmp	r0, #0
   1b0cc:	d1f9      	bne.n	1b0c2 <z_nrf_clock_control_lf_on+0xe>
   1b0ce:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1b0d2:	b933      	cbnz	r3, 1b0e2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1b0d4:	4932      	ldr	r1, [pc, #200]	; (1b1a0 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   1b0d6:	4833      	ldr	r0, [pc, #204]	; (1b1a4 <z_nrf_clock_control_lf_on+0xf0>)
   1b0d8:	604b      	str	r3, [r1, #4]
   1b0da:	60cb      	str	r3, [r1, #12]
   1b0dc:	608a      	str	r2, [r1, #8]
   1b0de:	f008 feaa 	bl	23e36 <onoff_request>
	switch (start_mode) {
   1b0e2:	1e7b      	subs	r3, r7, #1
   1b0e4:	2b01      	cmp	r3, #1
   1b0e6:	d82b      	bhi.n	1b140 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1b0e8:	2f01      	cmp	r7, #1
   1b0ea:	d107      	bne.n	1b0fc <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1b0ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b0f0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1b0f4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1b0f8:	2b01      	cmp	r3, #1
   1b0fa:	d021      	beq.n	1b140 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b0fc:	f00b fc75 	bl	269ea <k_is_in_isr>
   1b100:	4605      	mov	r5, r0
   1b102:	b9f8      	cbnz	r0, 1b144 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   1b104:	4b28      	ldr	r3, [pc, #160]	; (1b1a8 <z_nrf_clock_control_lf_on+0xf4>)
   1b106:	781b      	ldrb	r3, [r3, #0]
   1b108:	b1e3      	cbz	r3, 1b144 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   1b10a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b10e:	2202      	movs	r2, #2
   1b110:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1b114:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b116:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1b1ac <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1b11a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1b11e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1b122:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1b126:	03d2      	lsls	r2, r2, #15
   1b128:	d516      	bpl.n	1b158 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1b12a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1b12e:	2b01      	cmp	r3, #1
   1b130:	d001      	beq.n	1b136 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1b132:	2f01      	cmp	r7, #1
   1b134:	d110      	bne.n	1b158 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   1b136:	b35d      	cbz	r5, 1b190 <z_nrf_clock_control_lf_on+0xdc>
   1b138:	f386 8811 	msr	BASEPRI, r6
   1b13c:	f3bf 8f6f 	isb	sy
}
   1b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b144:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b148:	f3ef 8611 	mrs	r6, BASEPRI
   1b14c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b150:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b154:	2501      	movs	r5, #1
   1b156:	e7de      	b.n	1b116 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1b158:	b1ad      	cbz	r5, 1b186 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1b15a:	4630      	mov	r0, r6
   1b15c:	f7f9 fdce 	bl	14cfc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1b160:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1b164:	2b00      	cmp	r3, #0
   1b166:	d1da      	bne.n	1b11e <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1b168:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1b16c:	2a00      	cmp	r2, #0
   1b16e:	d0d6      	beq.n	1b11e <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b170:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1b174:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1b178:	2301      	movs	r3, #1
   1b17a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1b17e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b182:	60a3      	str	r3, [r4, #8]
}
   1b184:	e7cb      	b.n	1b11e <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   1b186:	2100      	movs	r1, #0
   1b188:	2021      	movs	r0, #33	; 0x21
   1b18a:	f003 fccd 	bl	1eb28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b18e:	e7e7      	b.n	1b160 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   1b190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b194:	2202      	movs	r2, #2
   1b196:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b19a:	e7d1      	b.n	1b140 <z_nrf_clock_control_lf_on+0x8c>
   1b19c:	200037b4 	.word	0x200037b4
   1b1a0:	200037a4 	.word	0x200037a4
   1b1a4:	200037d4 	.word	0x200037d4
   1b1a8:	20004a4f 	.word	0x20004a4f
   1b1ac:	e000e100 	.word	0xe000e100

0001b1b0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1b1b0:	b508      	push	{r3, lr}
   1b1b2:	4807      	ldr	r0, [pc, #28]	; (1b1d0 <uart_console_init+0x20>)
   1b1b4:	f00b fb4a 	bl	2684c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1b1b8:	b138      	cbz	r0, 1b1ca <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1b1ba:	4806      	ldr	r0, [pc, #24]	; (1b1d4 <uart_console_init+0x24>)
   1b1bc:	f7fa fc96 	bl	15aec <__stdout_hook_install>
	__printk_hook_install(console_out);
   1b1c0:	4804      	ldr	r0, [pc, #16]	; (1b1d4 <uart_console_init+0x24>)
   1b1c2:	f7f8 faf9 	bl	137b8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1b1c6:	2000      	movs	r0, #0
}
   1b1c8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1b1ca:	f06f 0012 	mvn.w	r0, #18
   1b1ce:	e7fb      	b.n	1b1c8 <uart_console_init+0x18>
   1b1d0:	00027d38 	.word	0x00027d38
   1b1d4:	0001b1d9 	.word	0x0001b1d9

0001b1d8 <console_out>:
	if ('\n' == c) {
   1b1d8:	280a      	cmp	r0, #10
{
   1b1da:	b538      	push	{r3, r4, r5, lr}
   1b1dc:	4d07      	ldr	r5, [pc, #28]	; (1b1fc <console_out+0x24>)
   1b1de:	4604      	mov	r4, r0
	if ('\n' == c) {
   1b1e0:	d104      	bne.n	1b1ec <console_out+0x14>
   1b1e2:	68ab      	ldr	r3, [r5, #8]
   1b1e4:	210d      	movs	r1, #13
   1b1e6:	685b      	ldr	r3, [r3, #4]
   1b1e8:	4628      	mov	r0, r5
   1b1ea:	4798      	blx	r3
   1b1ec:	68ab      	ldr	r3, [r5, #8]
   1b1ee:	4803      	ldr	r0, [pc, #12]	; (1b1fc <console_out+0x24>)
   1b1f0:	685b      	ldr	r3, [r3, #4]
   1b1f2:	b2e1      	uxtb	r1, r4
   1b1f4:	4798      	blx	r3
}
   1b1f6:	4620      	mov	r0, r4
   1b1f8:	bd38      	pop	{r3, r4, r5, pc}
   1b1fa:	bf00      	nop
   1b1fc:	00027d38 	.word	0x00027d38

0001b200 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1b200:	b530      	push	{r4, r5, lr}
	return port->config;
   1b202:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b204:	7b05      	ldrb	r5, [r0, #12]
   1b206:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1b20a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1b20e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b210:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1b214:	d105      	bne.n	1b222 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1b216:	4620      	mov	r0, r4
   1b218:	f002 fafa 	bl	1d810 <nrfx_gpiote_trigger_disable>

		return 0;
   1b21c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1b21e:	b005      	add	sp, #20
   1b220:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b222:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b224:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b228:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b22c:	d114      	bne.n	1b258 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1b22e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b232:	bf0c      	ite	eq
   1b234:	2304      	moveq	r3, #4
   1b236:	2305      	movne	r3, #5
   1b238:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b23c:	2300      	movs	r3, #0
   1b23e:	4619      	mov	r1, r3
   1b240:	aa02      	add	r2, sp, #8
   1b242:	4620      	mov	r0, r4
   1b244:	f002 f922 	bl	1d48c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b248:	4b1f      	ldr	r3, [pc, #124]	; (1b2c8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1b24a:	4298      	cmp	r0, r3
   1b24c:	d139      	bne.n	1b2c2 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1b24e:	2101      	movs	r1, #1
   1b250:	4620      	mov	r0, r4
   1b252:	f002 fa95 	bl	1d780 <nrfx_gpiote_trigger_enable>
	return 0;
   1b256:	e7e1      	b.n	1b21c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b258:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1b25c:	d026      	beq.n	1b2ac <gpio_nrfx_pin_interrupt_configure+0xac>
   1b25e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1b262:	bf14      	ite	ne
   1b264:	2301      	movne	r3, #1
   1b266:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b268:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1b26c:	6883      	ldr	r3, [r0, #8]
   1b26e:	40cb      	lsrs	r3, r1
   1b270:	07d9      	lsls	r1, r3, #31
   1b272:	d4e3      	bmi.n	1b23c <gpio_nrfx_pin_interrupt_configure+0x3c>
   1b274:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1b278:	d1e0      	bne.n	1b23c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1b27a:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   1b27c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1b27e:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   1b282:	4a12      	ldr	r2, [pc, #72]	; (1b2cc <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b284:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1b288:	bf18      	it	ne
   1b28a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1b292:	07db      	lsls	r3, r3, #31
   1b294:	d4d2      	bmi.n	1b23c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b296:	f10d 0507 	add.w	r5, sp, #7
   1b29a:	4629      	mov	r1, r5
   1b29c:	4620      	mov	r0, r4
   1b29e:	f002 fa1b 	bl	1d6d8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1b2a2:	4b0b      	ldr	r3, [pc, #44]	; (1b2d0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1b2a4:	4298      	cmp	r0, r3
   1b2a6:	d003      	beq.n	1b2b0 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1b2a8:	9503      	str	r5, [sp, #12]
   1b2aa:	e7c7      	b.n	1b23c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b2ac:	2303      	movs	r3, #3
   1b2ae:	e7db      	b.n	1b268 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1b2b0:	4628      	mov	r0, r5
   1b2b2:	f002 fa5f 	bl	1d774 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1b2b6:	4b04      	ldr	r3, [pc, #16]	; (1b2c8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1b2b8:	4298      	cmp	r0, r3
   1b2ba:	d0f5      	beq.n	1b2a8 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   1b2bc:	f06f 000b 	mvn.w	r0, #11
   1b2c0:	e7ad      	b.n	1b21e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1b2c2:	f06f 0015 	mvn.w	r0, #21
   1b2c6:	e7aa      	b.n	1b21e <gpio_nrfx_pin_interrupt_configure+0x1e>
   1b2c8:	0bad0000 	.word	0x0bad0000
   1b2cc:	50000300 	.word	0x50000300
   1b2d0:	0bad0004 	.word	0x0bad0004

0001b2d4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1b2d4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1b2d6:	f002 fa3d 	bl	1d754 <nrfx_gpiote_is_init>
   1b2da:	4604      	mov	r4, r0
   1b2dc:	b968      	cbnz	r0, 1b2fa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1b2de:	f002 fa11 	bl	1d704 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1b2e2:	4b08      	ldr	r3, [pc, #32]	; (1b304 <gpio_nrfx_init+0x30>)
   1b2e4:	4298      	cmp	r0, r3
   1b2e6:	d10a      	bne.n	1b2fe <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1b2e8:	4807      	ldr	r0, [pc, #28]	; (1b308 <gpio_nrfx_init+0x34>)
   1b2ea:	4621      	mov	r1, r4
   1b2ec:	f002 f9ee 	bl	1d6cc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1b2f0:	4622      	mov	r2, r4
   1b2f2:	2105      	movs	r1, #5
   1b2f4:	2006      	movs	r0, #6
   1b2f6:	f7f9 fded 	bl	14ed4 <z_arm_irq_priority_set>
		return 0;
   1b2fa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1b2fc:	bd10      	pop	{r4, pc}
		return -EIO;
   1b2fe:	f06f 0004 	mvn.w	r0, #4
   1b302:	e7fb      	b.n	1b2fc <gpio_nrfx_init+0x28>
   1b304:	0bad0000 	.word	0x0bad0000
   1b308:	0001b30d 	.word	0x0001b30d

0001b30c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b30c:	0942      	lsrs	r2, r0, #5
{
   1b30e:	b570      	push	{r4, r5, r6, lr}
   1b310:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b312:	d002      	beq.n	1b31a <nrfx_gpio_handler+0xe>
   1b314:	2a01      	cmp	r2, #1
   1b316:	d017      	beq.n	1b348 <nrfx_gpio_handler+0x3c>
}
   1b318:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b31a:	4e0d      	ldr	r6, [pc, #52]	; (1b350 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1b31c:	6932      	ldr	r2, [r6, #16]
   1b31e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b320:	2900      	cmp	r1, #0
   1b322:	d0f9      	beq.n	1b318 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1b324:	f003 031f 	and.w	r3, r3, #31
   1b328:	2501      	movs	r5, #1
   1b32a:	680c      	ldr	r4, [r1, #0]
   1b32c:	409d      	lsls	r5, r3
   1b32e:	2900      	cmp	r1, #0
   1b330:	d0f2      	beq.n	1b318 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1b332:	688a      	ldr	r2, [r1, #8]
   1b334:	402a      	ands	r2, r5
   1b336:	d002      	beq.n	1b33e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1b338:	684b      	ldr	r3, [r1, #4]
   1b33a:	4630      	mov	r0, r6
   1b33c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b33e:	b12c      	cbz	r4, 1b34c <nrfx_gpio_handler+0x40>
   1b340:	6823      	ldr	r3, [r4, #0]
   1b342:	4621      	mov	r1, r4
   1b344:	461c      	mov	r4, r3
   1b346:	e7f2      	b.n	1b32e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b348:	4e02      	ldr	r6, [pc, #8]	; (1b354 <nrfx_gpio_handler+0x48>)
   1b34a:	e7e7      	b.n	1b31c <nrfx_gpio_handler+0x10>
   1b34c:	4623      	mov	r3, r4
   1b34e:	e7f8      	b.n	1b342 <nrfx_gpio_handler+0x36>
   1b350:	00027cc0 	.word	0x00027cc0
   1b354:	00027ca8 	.word	0x00027ca8

0001b358 <gpio_nrfx_pin_configure>:
{
   1b358:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1b35c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b35e:	7b3b      	ldrb	r3, [r7, #12]
   1b360:	f001 051f 	and.w	r5, r1, #31
   1b364:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1b368:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b36a:	4628      	mov	r0, r5
   1b36c:	f10d 0103 	add.w	r1, sp, #3
{
   1b370:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b372:	f002 f9b1 	bl	1d6d8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b376:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b37a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b37c:	d10b      	bne.n	1b396 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1b37e:	4628      	mov	r0, r5
   1b380:	f002 fa6e 	bl	1d860 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1b384:	4b3d      	ldr	r3, [pc, #244]	; (1b47c <gpio_nrfx_pin_configure+0x124>)
   1b386:	4598      	cmp	r8, r3
   1b388:	d103      	bne.n	1b392 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1b38a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b38e:	f002 f9eb 	bl	1d768 <nrfx_gpiote_channel_free>
		return 0;
   1b392:	2000      	movs	r0, #0
   1b394:	e00c      	b.n	1b3b0 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b396:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b398:	4619      	mov	r1, r3
   1b39a:	aa02      	add	r2, sp, #8
   1b39c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b39e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b3a2:	f002 f873 	bl	1d48c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b3a6:	4b35      	ldr	r3, [pc, #212]	; (1b47c <gpio_nrfx_pin_configure+0x124>)
   1b3a8:	4298      	cmp	r0, r3
   1b3aa:	d004      	beq.n	1b3b6 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1b3ac:	f06f 0015 	mvn.w	r0, #21
}
   1b3b0:	b004      	add	sp, #16
   1b3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1b3b6:	4580      	cmp	r8, r0
   1b3b8:	d103      	bne.n	1b3c2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1b3ba:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b3be:	f002 f9d3 	bl	1d768 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1b3c2:	03a3      	lsls	r3, r4, #14
   1b3c4:	d54b      	bpl.n	1b45e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b3c6:	f240 3306 	movw	r3, #774	; 0x306
   1b3ca:	4023      	ands	r3, r4
   1b3cc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1b3d0:	d019      	beq.n	1b406 <gpio_nrfx_pin_configure+0xae>
   1b3d2:	d80c      	bhi.n	1b3ee <gpio_nrfx_pin_configure+0x96>
   1b3d4:	2b06      	cmp	r3, #6
   1b3d6:	d017      	beq.n	1b408 <gpio_nrfx_pin_configure+0xb0>
   1b3d8:	d804      	bhi.n	1b3e4 <gpio_nrfx_pin_configure+0x8c>
   1b3da:	b1ab      	cbz	r3, 1b408 <gpio_nrfx_pin_configure+0xb0>
   1b3dc:	2b02      	cmp	r3, #2
   1b3de:	d1e5      	bne.n	1b3ac <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1b3e0:	2304      	movs	r3, #4
   1b3e2:	e011      	b.n	1b408 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b3e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1b3e8:	d1e0      	bne.n	1b3ac <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1b3ea:	2301      	movs	r3, #1
   1b3ec:	e00c      	b.n	1b408 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b3ee:	f240 2202 	movw	r2, #514	; 0x202
   1b3f2:	4293      	cmp	r3, r2
   1b3f4:	d027      	beq.n	1b446 <gpio_nrfx_pin_configure+0xee>
   1b3f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1b3fa:	d026      	beq.n	1b44a <gpio_nrfx_pin_configure+0xf2>
   1b3fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1b400:	d1d4      	bne.n	1b3ac <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1b402:	2302      	movs	r3, #2
   1b404:	e000      	b.n	1b408 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1b406:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1b408:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1b40c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1b410:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1b414:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1b416:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1b41a:	bf54      	ite	pl
   1b41c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1b420:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b422:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1b424:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b428:	d511      	bpl.n	1b44e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1b42a:	687a      	ldr	r2, [r7, #4]
   1b42c:	2301      	movs	r3, #1
   1b42e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1b430:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1b434:	2200      	movs	r2, #0
   1b436:	a901      	add	r1, sp, #4
   1b438:	4628      	mov	r0, r5
   1b43a:	f002 f8d5 	bl	1d5e8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b43e:	4b0f      	ldr	r3, [pc, #60]	; (1b47c <gpio_nrfx_pin_configure+0x124>)
   1b440:	4298      	cmp	r0, r3
   1b442:	d0a6      	beq.n	1b392 <gpio_nrfx_pin_configure+0x3a>
   1b444:	e7b2      	b.n	1b3ac <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1b446:	2305      	movs	r3, #5
   1b448:	e7de      	b.n	1b408 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b44a:	2303      	movs	r3, #3
   1b44c:	e7dc      	b.n	1b408 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1b44e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1b450:	bf41      	itttt	mi
   1b452:	2301      	movmi	r3, #1
   1b454:	687a      	ldrmi	r2, [r7, #4]
   1b456:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1b458:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1b45c:	e7ea      	b.n	1b434 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   1b45e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b460:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1b464:	bf54      	ite	pl
   1b466:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1b46a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b46c:	461a      	mov	r2, r3
   1b46e:	a901      	add	r1, sp, #4
   1b470:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1b472:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b476:	f002 f809 	bl	1d48c <nrfx_gpiote_input_configure>
   1b47a:	e7e0      	b.n	1b43e <gpio_nrfx_pin_configure+0xe6>
   1b47c:	0bad0000 	.word	0x0bad0000

0001b480 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1b480:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1b482:	794b      	ldrb	r3, [r1, #5]
   1b484:	2b01      	cmp	r3, #1
   1b486:	d026      	beq.n	1b4d6 <uarte_nrfx_configure+0x56>
   1b488:	2b03      	cmp	r3, #3
   1b48a:	d121      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1b48c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1b48e:	798b      	ldrb	r3, [r1, #6]
   1b490:	2b03      	cmp	r3, #3
   1b492:	d11d      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1b494:	79ce      	ldrb	r6, [r1, #7]
   1b496:	b10e      	cbz	r6, 1b49c <uarte_nrfx_configure+0x1c>
   1b498:	2e01      	cmp	r6, #1
   1b49a:	d119      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1b49c:	790a      	ldrb	r2, [r1, #4]
   1b49e:	b112      	cbz	r2, 1b4a6 <uarte_nrfx_configure+0x26>
   1b4a0:	2a02      	cmp	r2, #2
   1b4a2:	d115      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1b4a4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1b4a6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1b4a8:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1b4aa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1b4ae:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1b4b0:	d067      	beq.n	1b582 <uarte_nrfx_configure+0x102>
   1b4b2:	d82d      	bhi.n	1b510 <uarte_nrfx_configure+0x90>
   1b4b4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1b4b8:	d066      	beq.n	1b588 <uarte_nrfx_configure+0x108>
   1b4ba:	d816      	bhi.n	1b4ea <uarte_nrfx_configure+0x6a>
   1b4bc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1b4c0:	d064      	beq.n	1b58c <uarte_nrfx_configure+0x10c>
   1b4c2:	d80a      	bhi.n	1b4da <uarte_nrfx_configure+0x5a>
   1b4c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1b4c8:	d063      	beq.n	1b592 <uarte_nrfx_configure+0x112>
   1b4ca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1b4ce:	d063      	beq.n	1b598 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1b4d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b4d4:	e054      	b.n	1b580 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1b4d6:	2500      	movs	r5, #0
   1b4d8:	e7d9      	b.n	1b48e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1b4da:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1b4de:	d05e      	beq.n	1b59e <uarte_nrfx_configure+0x11e>
   1b4e0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1b4e4:	d1f4      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1b4e6:	4b38      	ldr	r3, [pc, #224]	; (1b5c8 <uarte_nrfx_configure+0x148>)
   1b4e8:	e03c      	b.n	1b564 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b4ea:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1b4ee:	d059      	beq.n	1b5a4 <uarte_nrfx_configure+0x124>
   1b4f0:	d807      	bhi.n	1b502 <uarte_nrfx_configure+0x82>
   1b4f2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1b4f6:	d057      	beq.n	1b5a8 <uarte_nrfx_configure+0x128>
   1b4f8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1b4fc:	d1e8      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1b4fe:	4b33      	ldr	r3, [pc, #204]	; (1b5cc <uarte_nrfx_configure+0x14c>)
   1b500:	e030      	b.n	1b564 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b502:	f647 2412 	movw	r4, #31250	; 0x7a12
   1b506:	42a3      	cmp	r3, r4
   1b508:	d1e2      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1b50a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1b50e:	e029      	b.n	1b564 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b510:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1b514:	d04a      	beq.n	1b5ac <uarte_nrfx_configure+0x12c>
   1b516:	d813      	bhi.n	1b540 <uarte_nrfx_configure+0xc0>
   1b518:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1b51c:	d049      	beq.n	1b5b2 <uarte_nrfx_configure+0x132>
   1b51e:	d809      	bhi.n	1b534 <uarte_nrfx_configure+0xb4>
   1b520:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1b524:	42a3      	cmp	r3, r4
   1b526:	d046      	beq.n	1b5b6 <uarte_nrfx_configure+0x136>
   1b528:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1b52c:	d1d0      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1b52e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1b532:	e017      	b.n	1b564 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b534:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1b538:	d1ca      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1b53a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1b53e:	e011      	b.n	1b564 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b540:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1b544:	d03a      	beq.n	1b5bc <uarte_nrfx_configure+0x13c>
   1b546:	d808      	bhi.n	1b55a <uarte_nrfx_configure+0xda>
   1b548:	4c21      	ldr	r4, [pc, #132]	; (1b5d0 <uarte_nrfx_configure+0x150>)
   1b54a:	42a3      	cmp	r3, r4
   1b54c:	d039      	beq.n	1b5c2 <uarte_nrfx_configure+0x142>
   1b54e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1b552:	d1bd      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1b554:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1b558:	e004      	b.n	1b564 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b55a:	4c1e      	ldr	r4, [pc, #120]	; (1b5d4 <uarte_nrfx_configure+0x154>)
   1b55c:	42a3      	cmp	r3, r4
   1b55e:	d1b7      	bne.n	1b4d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1b560:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1b564:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1b566:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1b56a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1b56c:	4335      	orrs	r5, r6
   1b56e:	681b      	ldr	r3, [r3, #0]
   1b570:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b572:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1b576:	c903      	ldmia	r1, {r0, r1}
   1b578:	1d23      	adds	r3, r4, #4
   1b57a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1b57e:	2000      	movs	r0, #0
}
   1b580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1b582:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1b586:	e7ed      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1b588:	4b13      	ldr	r3, [pc, #76]	; (1b5d8 <uarte_nrfx_configure+0x158>)
   1b58a:	e7eb      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1b58c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1b590:	e7e8      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1b592:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1b596:	e7e5      	b.n	1b564 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b598:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1b59c:	e7e2      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1b59e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1b5a2:	e7df      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1b5a4:	4b0d      	ldr	r3, [pc, #52]	; (1b5dc <uarte_nrfx_configure+0x15c>)
   1b5a6:	e7dd      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1b5a8:	4b0d      	ldr	r3, [pc, #52]	; (1b5e0 <uarte_nrfx_configure+0x160>)
   1b5aa:	e7db      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1b5ac:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1b5b0:	e7d8      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1b5b2:	4b0c      	ldr	r3, [pc, #48]	; (1b5e4 <uarte_nrfx_configure+0x164>)
   1b5b4:	e7d6      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1b5b6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1b5ba:	e7d3      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1b5bc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b5c0:	e7d0      	b.n	1b564 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1b5c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b5c6:	e7cd      	b.n	1b564 <uarte_nrfx_configure+0xe4>
   1b5c8:	0013b000 	.word	0x0013b000
   1b5cc:	004ea000 	.word	0x004ea000
   1b5d0:	0003d090 	.word	0x0003d090
   1b5d4:	000f4240 	.word	0x000f4240
   1b5d8:	00275000 	.word	0x00275000
   1b5dc:	0075c000 	.word	0x0075c000
   1b5e0:	003af000 	.word	0x003af000
   1b5e4:	013a9000 	.word	0x013a9000

0001b5e8 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1b5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1b5ec:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1b5ee:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1b5f0:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b5f2:	2100      	movs	r1, #0
   1b5f4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1b5f8:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1b5fa:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
   1b5fe:	b087      	sub	sp, #28
   1b600:	4680      	mov	r8, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1b602:	466a      	mov	r2, sp
   1b604:	4648      	mov	r0, r9
   1b606:	f00a ffcc 	bl	265a2 <pinctrl_lookup_state>
	if (ret < 0) {
   1b60a:	1e05      	subs	r5, r0, #0
   1b60c:	db25      	blt.n	1b65a <uarte_instance_init.constprop.0+0x72>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1b60e:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1b610:	f8d9 2000 	ldr.w	r2, [r9]
   1b614:	7919      	ldrb	r1, [r3, #4]
   1b616:	6818      	ldr	r0, [r3, #0]
   1b618:	f000 fc2a 	bl	1be70 <pinctrl_configure_pins>
	if (err < 0) {
   1b61c:	1e05      	subs	r5, r0, #0
   1b61e:	db1c      	blt.n	1b65a <uarte_instance_init.constprop.0+0x72>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1b620:	1d31      	adds	r1, r6, #4
   1b622:	4640      	mov	r0, r8
   1b624:	f7ff ff2c 	bl	1b480 <uarte_nrfx_configure>
	if (err) {
   1b628:	4605      	mov	r5, r0
   1b62a:	b9b0      	cbnz	r0, 1b65a <uarte_instance_init.constprop.0+0x72>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1b62c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1b62e:	0799      	lsls	r1, r3, #30
   1b630:	d52b      	bpl.n	1b68a <uarte_instance_init.constprop.0+0xa2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1b632:	f106 0018 	add.w	r0, r6, #24
   1b636:	f002 fa15 	bl	1da64 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1b63a:	4b28      	ldr	r3, [pc, #160]	; (1b6dc <uarte_instance_init.constprop.0+0xf4>)
   1b63c:	4298      	cmp	r0, r3
   1b63e:	d010      	beq.n	1b662 <uarte_instance_init.constprop.0+0x7a>
		LOG_ERR("Failed to allocate PPI Channel");
   1b640:	4b27      	ldr	r3, [pc, #156]	; (1b6e0 <uarte_instance_init.constprop.0+0xf8>)
   1b642:	9305      	str	r3, [sp, #20]
   1b644:	2302      	movs	r3, #2
   1b646:	9304      	str	r3, [sp, #16]
   1b648:	4826      	ldr	r0, [pc, #152]	; (1b6e4 <uarte_instance_init.constprop.0+0xfc>)
   1b64a:	462b      	mov	r3, r5
   1b64c:	aa04      	add	r2, sp, #16
   1b64e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   1b652:	f06f 0504 	mvn.w	r5, #4
   1b656:	f7f8 fce3 	bl	14020 <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1b65a:	4628      	mov	r0, r5
   1b65c:	b007      	add	sp, #28
   1b65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1b662:	7e33      	ldrb	r3, [r6, #24]
   1b664:	00db      	lsls	r3, r3, #3
   1b666:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b66a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1b66e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1b672:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1b676:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1b67a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1b67e:	7e32      	ldrb	r2, [r6, #24]
   1b680:	2301      	movs	r3, #1
   1b682:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1b684:	4a18      	ldr	r2, [pc, #96]	; (1b6e8 <uarte_instance_init.constprop.0+0x100>)
   1b686:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b68a:	2308      	movs	r3, #8
   1b68c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1b690:	7a3b      	ldrb	r3, [r7, #8]
   1b692:	b953      	cbnz	r3, 1b6aa <uarte_instance_init.constprop.0+0xc2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b694:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1b698:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b69c:	6973      	ldr	r3, [r6, #20]
   1b69e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b6a2:	2301      	movs	r3, #1
   1b6a4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b6a8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1b6aa:	687b      	ldr	r3, [r7, #4]
   1b6ac:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1b6ae:	bf5c      	itt	pl
   1b6b0:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1b6b4:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b6b8:	687b      	ldr	r3, [r7, #4]
   1b6ba:	06db      	lsls	r3, r3, #27
   1b6bc:	bf44      	itt	mi
   1b6be:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1b6c2:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b6c6:	6933      	ldr	r3, [r6, #16]
   1b6c8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b6cc:	2300      	movs	r3, #0
   1b6ce:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b6d2:	2301      	movs	r3, #1
   1b6d4:	60a3      	str	r3, [r4, #8]
   1b6d6:	60e3      	str	r3, [r4, #12]
	return 0;
   1b6d8:	e7bf      	b.n	1b65a <uarte_instance_init.constprop.0+0x72>
   1b6da:	bf00      	nop
   1b6dc:	0bad0000 	.word	0x0bad0000
   1b6e0:	0002a677 	.word	0x0002a677
   1b6e4:	0002806c 	.word	0x0002806c
   1b6e8:	4001f000 	.word	0x4001f000

0001b6ec <uarte_nrfx_poll_out>:
{
   1b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6ee:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1b6f0:	6907      	ldr	r7, [r0, #16]
{
   1b6f2:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b6f4:	f00b f979 	bl	269ea <k_is_in_isr>
   1b6f8:	b9b0      	cbnz	r0, 1b728 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1b6fa:	4b2e      	ldr	r3, [pc, #184]	; (1b7b4 <uarte_nrfx_poll_out+0xc8>)
   1b6fc:	781b      	ldrb	r3, [r3, #0]
   1b6fe:	b19b      	cbz	r3, 1b728 <uarte_nrfx_poll_out+0x3c>
{
   1b700:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1b702:	6860      	ldr	r0, [r4, #4]
   1b704:	f00a fe97 	bl	26436 <is_tx_ready.isra.0>
   1b708:	bb00      	cbnz	r0, 1b74c <uarte_nrfx_poll_out+0x60>
   1b70a:	2001      	movs	r0, #1
   1b70c:	f00b f83c 	bl	26788 <nrfx_busy_wait>
   1b710:	3e01      	subs	r6, #1
   1b712:	d1f6      	bne.n	1b702 <uarte_nrfx_poll_out+0x16>
   1b714:	2100      	movs	r1, #0
   1b716:	2021      	movs	r0, #33	; 0x21
   1b718:	f003 fa06 	bl	1eb28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b71c:	e7f0      	b.n	1b700 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1b71e:	f386 8811 	msr	BASEPRI, r6
   1b722:	f3bf 8f6f 	isb	sy
}
   1b726:	e7f5      	b.n	1b714 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1b728:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b72c:	f3ef 8611 	mrs	r6, BASEPRI
   1b730:	f383 8812 	msr	BASEPRI_MAX, r3
   1b734:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1b738:	6860      	ldr	r0, [r4, #4]
   1b73a:	4631      	mov	r1, r6
   1b73c:	f00a fe7b 	bl	26436 <is_tx_ready.isra.0>
   1b740:	b990      	cbnz	r0, 1b768 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1b742:	f386 8811 	msr	BASEPRI, r6
   1b746:	f3bf 8f6f 	isb	sy
}
   1b74a:	e7ed      	b.n	1b728 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1b74c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b750:	f3ef 8611 	mrs	r6, BASEPRI
   1b754:	f383 8812 	msr	BASEPRI_MAX, r3
   1b758:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1b75c:	6860      	ldr	r0, [r4, #4]
   1b75e:	4631      	mov	r1, r6
   1b760:	f00a fe69 	bl	26436 <is_tx_ready.isra.0>
   1b764:	2800      	cmp	r0, #0
   1b766:	d0da      	beq.n	1b71e <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1b768:	693b      	ldr	r3, [r7, #16]
   1b76a:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1b76c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b76e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1b770:	6813      	ldr	r3, [r2, #0]
   1b772:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b776:	2001      	movs	r0, #1
   1b778:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b77c:	2000      	movs	r0, #0
   1b77e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1b782:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1b786:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b78a:	6852      	ldr	r2, [r2, #4]
   1b78c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1b790:	06d2      	lsls	r2, r2, #27
   1b792:	d508      	bpl.n	1b7a6 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   1b794:	6862      	ldr	r2, [r4, #4]
   1b796:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b798:	2008      	movs	r0, #8
   1b79a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1b79e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1b7a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b7a6:	2201      	movs	r2, #1
   1b7a8:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1b7aa:	f381 8811 	msr	BASEPRI, r1
   1b7ae:	f3bf 8f6f 	isb	sy
}
   1b7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7b4:	20004a4f 	.word	0x20004a4f

0001b7b8 <random_byte_get>:
	__asm__ volatile(
   1b7b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7bc:	f3ef 8211 	mrs	r2, BASEPRI
   1b7c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7c4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b7c8:	4b09      	ldr	r3, [pc, #36]	; (1b7f0 <random_byte_get+0x38>)
   1b7ca:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1b7ce:	b161      	cbz	r1, 1b7ea <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b7d0:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1b7d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b7d6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1b7da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1b7de:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1b7e0:	f382 8811 	msr	BASEPRI, r2
   1b7e4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1b7e8:	4770      	bx	lr
	int retval = -EAGAIN;
   1b7ea:	f06f 000a 	mvn.w	r0, #10
   1b7ee:	e7f7      	b.n	1b7e0 <random_byte_get+0x28>
   1b7f0:	4000d000 	.word	0x4000d000

0001b7f4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1b7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7f6:	4603      	mov	r3, r0
   1b7f8:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1b7fa:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1b7fc:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1b800:	f04f 0540 	mov.w	r5, #64	; 0x40
   1b804:	f3ef 8211 	mrs	r2, BASEPRI
   1b808:	f385 8812 	msr	BASEPRI_MAX, r5
   1b80c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1b810:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1b812:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1b816:	1be4      	subs	r4, r4, r7
   1b818:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1b81c:	42a0      	cmp	r0, r4
		len = available;
   1b81e:	bf88      	it	hi
   1b820:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1b822:	183e      	adds	r6, r7, r0
   1b824:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1b828:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1b82a:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1b82c:	f382 8811 	msr	BASEPRI, r2
   1b830:	f3bf 8f6f 	isb	sy
   1b834:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1b836:	428a      	cmp	r2, r1
   1b838:	d117      	bne.n	1b86a <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1b83a:	4577      	cmp	r7, lr
   1b83c:	d10d      	bne.n	1b85a <rng_pool_get+0x66>
	__asm__ volatile(
   1b83e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1b842:	f3ef 8211 	mrs	r2, BASEPRI
   1b846:	f381 8812 	msr	BASEPRI_MAX, r1
   1b84a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1b84e:	7819      	ldrb	r1, [r3, #0]
   1b850:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1b852:	f382 8811 	msr	BASEPRI, r2
   1b856:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1b85a:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1b85c:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1b85e:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b860:	bf22      	ittt	cs
   1b862:	4b06      	ldrcs	r3, [pc, #24]	; (1b87c <rng_pool_get+0x88>)
   1b864:	2201      	movcs	r2, #1
   1b866:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1b868:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1b86a:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1b86c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1b86e:	7976      	ldrb	r6, [r6, #5]
   1b870:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1b874:	ea05 050c 	and.w	r5, r5, ip
   1b878:	e7dd      	b.n	1b836 <rng_pool_get+0x42>
   1b87a:	bf00      	nop
   1b87c:	4000d000 	.word	0x4000d000

0001b880 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b880:	43db      	mvns	r3, r3
{
   1b882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b886:	f013 0501 	ands.w	r5, r3, #1
{
   1b88a:	460e      	mov	r6, r1
   1b88c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b88e:	d004      	beq.n	1b89a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1b890:	4823      	ldr	r0, [pc, #140]	; (1b920 <entropy_nrf5_get_entropy_isr+0xa0>)
   1b892:	f7ff ffaf 	bl	1b7f4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1b896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1b89a:	b3a2      	cbz	r2, 1b906 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1b89c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8a0:	f3ef 8811 	mrs	r8, BASEPRI
   1b8a4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8a8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1b8ac:	200d      	movs	r0, #13
   1b8ae:	f7f9 fb03 	bl	14eb8 <arch_irq_is_enabled>
   1b8b2:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1b8b4:	200d      	movs	r0, #13
   1b8b6:	f7f9 faeb 	bl	14e90 <arch_irq_disable>
	__asm__ volatile(
   1b8ba:	f388 8811 	msr	BASEPRI, r8
   1b8be:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b8c2:	f8df a060 	ldr.w	sl, [pc, #96]	; 1b924 <entropy_nrf5_get_entropy_isr+0xa4>
   1b8c6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1b928 <entropy_nrf5_get_entropy_isr+0xa8>
   1b8ca:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1b8ce:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1b8d2:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b8d6:	2301      	movs	r3, #1
   1b8d8:	f8ca 3000 	str.w	r3, [sl]
   1b8dc:	4625      	mov	r5, r4
   1b8de:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b8e2:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1b8e6:	b183      	cbz	r3, 1b90a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1b8e8:	f7ff ff66 	bl	1b7b8 <random_byte_get>
			if (byte < 0) {
   1b8ec:	1e03      	subs	r3, r0, #0
   1b8ee:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1b8f2:	dbf6      	blt.n	1b8e2 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1b8f4:	3d01      	subs	r5, #1
   1b8f6:	b2ad      	uxth	r5, r5
   1b8f8:	5573      	strb	r3, [r6, r5]
		} while (len);
   1b8fa:	2d00      	cmp	r5, #0
   1b8fc:	d1f1      	bne.n	1b8e2 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1b8fe:	b117      	cbz	r7, 1b906 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1b900:	200d      	movs	r0, #13
   1b902:	f7f9 fab7 	bl	14e74 <arch_irq_enable>
	return cnt;
   1b906:	4620      	mov	r0, r4
   1b908:	e7c5      	b.n	1b896 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   1b90a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b90e:	f3ef 8011 	mrs	r0, BASEPRI
   1b912:	f383 8812 	msr	BASEPRI_MAX, r3
   1b916:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1b91a:	f7f9 f9ef 	bl	14cfc <arch_cpu_atomic_idle>
}
   1b91e:	e7e0      	b.n	1b8e2 <entropy_nrf5_get_entropy_isr+0x62>
   1b920:	20003854 	.word	0x20003854
   1b924:	4000d000 	.word	0x4000d000
   1b928:	e000e100 	.word	0xe000e100

0001b92c <entropy_nrf5_get_entropy>:
{
   1b92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   1b930:	4f12      	ldr	r7, [pc, #72]	; (1b97c <entropy_nrf5_get_entropy+0x50>)
   1b932:	460d      	mov	r5, r1
   1b934:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b936:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1b93a:	b914      	cbnz	r4, 1b942 <entropy_nrf5_get_entropy+0x16>
}
   1b93c:	4620      	mov	r0, r4
   1b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b942:	f04f 33ff 	mov.w	r3, #4294967295
   1b946:	f04f 32ff 	mov.w	r2, #4294967295
   1b94a:	4638      	mov	r0, r7
   1b94c:	f002 fcc8 	bl	1e2e0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b950:	4622      	mov	r2, r4
   1b952:	4629      	mov	r1, r5
   1b954:	4640      	mov	r0, r8
   1b956:	f7ff ff4d 	bl	1b7f4 <rng_pool_get>
   1b95a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1b95c:	4638      	mov	r0, r7
   1b95e:	f002 fc99 	bl	1e294 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1b962:	b93e      	cbnz	r6, 1b974 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1b964:	f04f 32ff 	mov.w	r2, #4294967295
   1b968:	f04f 33ff 	mov.w	r3, #4294967295
   1b96c:	4804      	ldr	r0, [pc, #16]	; (1b980 <entropy_nrf5_get_entropy+0x54>)
   1b96e:	f002 fcb7 	bl	1e2e0 <z_impl_k_sem_take>
	while (len) {
   1b972:	e7e6      	b.n	1b942 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   1b974:	1ba4      	subs	r4, r4, r6
   1b976:	b2a4      	uxth	r4, r4
		buf += bytes;
   1b978:	4435      	add	r5, r6
   1b97a:	e7de      	b.n	1b93a <entropy_nrf5_get_entropy+0xe>
   1b97c:	20003824 	.word	0x20003824
   1b980:	2000383c 	.word	0x2000383c

0001b984 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1b984:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b986:	4c19      	ldr	r4, [pc, #100]	; (1b9ec <entropy_nrf5_init+0x68>)
   1b988:	2201      	movs	r2, #1
   1b98a:	4611      	mov	r1, r2
   1b98c:	4620      	mov	r0, r4
   1b98e:	f00b f8e2 	bl	26b56 <z_impl_k_sem_init>
   1b992:	2201      	movs	r2, #1
   1b994:	2100      	movs	r1, #0
   1b996:	f104 0018 	add.w	r0, r4, #24
   1b99a:	f00b f8dc 	bl	26b56 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1b99e:	f240 4307 	movw	r3, #1031	; 0x407
   1b9a2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1b9a6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b9aa:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1b9ac:	230c      	movs	r3, #12
   1b9ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1b9b2:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1b9b4:	4b0e      	ldr	r3, [pc, #56]	; (1b9f0 <entropy_nrf5_init+0x6c>)
   1b9b6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1b9ba:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1b9be:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b9c2:	f022 0201 	bic.w	r2, r2, #1
   1b9c6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1b9ca:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b9cc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1b9d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1b9d4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1b9d8:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b9da:	6019      	str	r1, [r3, #0]
   1b9dc:	200d      	movs	r0, #13
   1b9de:	f7f9 fa79 	bl	14ed4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1b9e2:	200d      	movs	r0, #13
   1b9e4:	f7f9 fa46 	bl	14e74 <arch_irq_enable>

	return 0;
}
   1b9e8:	4628      	mov	r0, r5
   1b9ea:	bd38      	pop	{r3, r4, r5, pc}
   1b9ec:	20003824 	.word	0x20003824
   1b9f0:	4000d000 	.word	0x4000d000

0001b9f4 <isr>:
{
   1b9f4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1b9f6:	f7ff fedf 	bl	1b7b8 <random_byte_get>
	if (byte < 0) {
   1b9fa:	2800      	cmp	r0, #0
   1b9fc:	db20      	blt.n	1ba40 <isr+0x4c>
	uint8_t last  = rngp->last;
   1b9fe:	4b17      	ldr	r3, [pc, #92]	; (1ba5c <isr+0x68>)
   1ba00:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ba04:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ba08:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ba0c:	1b14      	subs	r4, r2, r4
   1ba0e:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ba12:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ba14:	d10d      	bne.n	1ba32 <isr+0x3e>
	uint8_t last  = rngp->last;
   1ba16:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ba1a:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ba1e:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ba22:	1b14      	subs	r4, r2, r4
   1ba24:	ea31 0404 	bics.w	r4, r1, r4
   1ba28:	d10b      	bne.n	1ba42 <isr+0x4e>
   1ba2a:	4b0d      	ldr	r3, [pc, #52]	; (1ba60 <isr+0x6c>)
   1ba2c:	2201      	movs	r2, #1
   1ba2e:	605a      	str	r2, [r3, #4]
}
   1ba30:	e00e      	b.n	1ba50 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ba32:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1ba34:	3201      	adds	r2, #1
   1ba36:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1ba38:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ba3c:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1ba40:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ba42:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1ba44:	3201      	adds	r2, #1
   1ba46:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1ba48:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ba4c:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ba50:	4804      	ldr	r0, [pc, #16]	; (1ba64 <isr+0x70>)
}
   1ba52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba56:	f002 bc1d 	b.w	1e294 <z_impl_k_sem_give>
   1ba5a:	bf00      	nop
   1ba5c:	20003824 	.word	0x20003824
   1ba60:	4000d000 	.word	0x4000d000
   1ba64:	2000383c 	.word	0x2000383c

0001ba68 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1ba68:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1ba6a:	2301      	movs	r3, #1
   1ba6c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ba6e:	4a0e      	ldr	r2, [pc, #56]	; (1baa8 <compare_int_lock+0x40>)
   1ba70:	f3bf 8f5b 	dmb	ish
   1ba74:	43dc      	mvns	r4, r3
   1ba76:	e852 1f00 	ldrex	r1, [r2]
   1ba7a:	ea01 0504 	and.w	r5, r1, r4
   1ba7e:	e842 5600 	strex	r6, r5, [r2]
   1ba82:	2e00      	cmp	r6, #0
   1ba84:	d1f7      	bne.n	1ba76 <compare_int_lock+0xe>
   1ba86:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ba8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ba8e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ba90:	4806      	ldr	r0, [pc, #24]	; (1baac <compare_int_lock+0x44>)
   1ba92:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1ba96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ba9a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1ba9e:	420b      	tst	r3, r1
}
   1baa0:	bf14      	ite	ne
   1baa2:	2001      	movne	r0, #1
   1baa4:	2000      	moveq	r0, #0
   1baa6:	bd70      	pop	{r4, r5, r6, pc}
   1baa8:	2000387c 	.word	0x2000387c
   1baac:	40011000 	.word	0x40011000

0001bab0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1bab0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1bab2:	490e      	ldr	r1, [pc, #56]	; (1baec <sys_clock_timeout_handler+0x3c>)
   1bab4:	e9d1 3400 	ldrd	r3, r4, [r1]
   1bab8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1baba:	18c3      	adds	r3, r0, r3
   1babc:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1bac0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1bac4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1bac8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1bacc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1bad0:	d209      	bcs.n	1bae6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1bad2:	4b07      	ldr	r3, [pc, #28]	; (1baf0 <sys_clock_timeout_handler+0x40>)
   1bad4:	681b      	ldr	r3, [r3, #0]
   1bad6:	0a1a      	lsrs	r2, r3, #8
   1bad8:	061b      	lsls	r3, r3, #24
   1bada:	199c      	adds	r4, r3, r6
   1badc:	4b05      	ldr	r3, [pc, #20]	; (1baf4 <sys_clock_timeout_handler+0x44>)
   1bade:	f142 0500 	adc.w	r5, r2, #0
   1bae2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1bae6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1bae8:	f003 b996 	b.w	1ee18 <sys_clock_announce>
   1baec:	200023c0 	.word	0x200023c0
   1baf0:	20003880 	.word	0x20003880
   1baf4:	200023c8 	.word	0x200023c8

0001baf8 <compare_int_unlock>:
	if (key) {
   1baf8:	b311      	cbz	r1, 1bb40 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bafa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1bafe:	2301      	movs	r3, #1
   1bb00:	4a10      	ldr	r2, [pc, #64]	; (1bb44 <compare_int_unlock+0x4c>)
   1bb02:	4083      	lsls	r3, r0
   1bb04:	e852 cf00 	ldrex	ip, [r2]
   1bb08:	ea4c 0c03 	orr.w	ip, ip, r3
   1bb0c:	e842 c100 	strex	r1, ip, [r2]
   1bb10:	2900      	cmp	r1, #0
   1bb12:	d1f7      	bne.n	1bb04 <compare_int_unlock+0xc>
   1bb14:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1bb18:	4a0b      	ldr	r2, [pc, #44]	; (1bb48 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bb1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bb1e:	4083      	lsls	r3, r0
   1bb20:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bb24:	4b09      	ldr	r3, [pc, #36]	; (1bb4c <compare_int_unlock+0x54>)
   1bb26:	f3bf 8f5b 	dmb	ish
   1bb2a:	681b      	ldr	r3, [r3, #0]
   1bb2c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1bb30:	40c3      	lsrs	r3, r0
   1bb32:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bb34:	bf42      	ittt	mi
   1bb36:	4b06      	ldrmi	r3, [pc, #24]	; (1bb50 <compare_int_unlock+0x58>)
   1bb38:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1bb3c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1bb40:	4770      	bx	lr
   1bb42:	bf00      	nop
   1bb44:	2000387c 	.word	0x2000387c
   1bb48:	40011000 	.word	0x40011000
   1bb4c:	20003878 	.word	0x20003878
   1bb50:	e000e100 	.word	0xe000e100

0001bb54 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1bb54:	4b0d      	ldr	r3, [pc, #52]	; (1bb8c <z_nrf_rtc_timer_read+0x38>)
   1bb56:	6818      	ldr	r0, [r3, #0]
   1bb58:	0a01      	lsrs	r1, r0, #8
   1bb5a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1bb5c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1bb60:	4b0b      	ldr	r3, [pc, #44]	; (1bb90 <z_nrf_rtc_timer_read+0x3c>)
   1bb62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1bb66:	1818      	adds	r0, r3, r0
   1bb68:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1bb6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1bb70:	d20a      	bcs.n	1bb88 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1bb72:	4b08      	ldr	r3, [pc, #32]	; (1bb94 <z_nrf_rtc_timer_read+0x40>)
   1bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bb78:	4290      	cmp	r0, r2
   1bb7a:	eb71 0303 	sbcs.w	r3, r1, r3
   1bb7e:	d203      	bcs.n	1bb88 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1bb80:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1bb84:	f141 0100 	adc.w	r1, r1, #0
}
   1bb88:	4770      	bx	lr
   1bb8a:	bf00      	nop
   1bb8c:	20003880 	.word	0x20003880
   1bb90:	40011000 	.word	0x40011000
   1bb94:	200023c8 	.word	0x200023c8

0001bb98 <compare_set>:
{
   1bb98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb9c:	4616      	mov	r6, r2
   1bb9e:	461f      	mov	r7, r3
   1bba0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1bba2:	f7ff ff61 	bl	1ba68 <compare_int_lock>
   1bba6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1bba8:	f7ff ffd4 	bl	1bb54 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1bbac:	42b0      	cmp	r0, r6
   1bbae:	eb71 0307 	sbcs.w	r3, r1, r7
   1bbb2:	d251      	bcs.n	1bc58 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1bbb4:	4b3a      	ldr	r3, [pc, #232]	; (1bca0 <compare_set+0x108>)
   1bbb6:	1a30      	subs	r0, r6, r0
   1bbb8:	eb67 0101 	sbc.w	r1, r7, r1
   1bbbc:	4298      	cmp	r0, r3
   1bbbe:	f171 0100 	sbcs.w	r1, r1, #0
   1bbc2:	d26a      	bcs.n	1bc9a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   1bbc4:	4b37      	ldr	r3, [pc, #220]	; (1bca4 <compare_set+0x10c>)
   1bbc6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1bbca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1bbce:	429f      	cmp	r7, r3
   1bbd0:	bf08      	it	eq
   1bbd2:	4296      	cmpeq	r6, r2
   1bbd4:	d04e      	beq.n	1bc74 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1bbd6:	4934      	ldr	r1, [pc, #208]	; (1bca8 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bbd8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1bbdc:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bbe0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1bbe4:	00ad      	lsls	r5, r5, #2
   1bbe6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1bbea:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bbec:	b2ad      	uxth	r5, r5
   1bbee:	f00a fcc8 	bl	26582 <event_clear>
	return absolute_time & COUNTER_MAX;
   1bbf2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1bbf6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1bbfa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1bbfe:	4a2b      	ldr	r2, [pc, #172]	; (1bcac <compare_set+0x114>)
   1bc00:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bc02:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   1bc06:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1bc08:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   1bc0c:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1bc0e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   1bc12:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   1bc16:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1bc1a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1bc1e:	f06f 0002 	mvn.w	r0, #2
   1bc22:	eba0 0008 	sub.w	r0, r0, r8
   1bc26:	4460      	add	r0, ip
   1bc28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1bc2c:	4290      	cmp	r0, r2
   1bc2e:	d921      	bls.n	1bc74 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bc30:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1bc32:	b160      	cbz	r0, 1bc4e <compare_set+0xb6>
     return p_reg->COUNTER;
   1bc34:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1bc38:	eba8 000b 	sub.w	r0, r8, fp
   1bc3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1bc40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1bc44:	d916      	bls.n	1bc74 <compare_set+0xdc>
					event_clear(chan);
   1bc46:	4620      	mov	r0, r4
   1bc48:	f00a fc9b 	bl	26582 <event_clear>
   1bc4c:	4a17      	ldr	r2, [pc, #92]	; (1bcac <compare_set+0x114>)
			cc_val = now + cc_inc;
   1bc4e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   1bc52:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1bc56:	e7d9      	b.n	1bc0c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1bc58:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bc5a:	4a15      	ldr	r2, [pc, #84]	; (1bcb0 <compare_set+0x118>)
   1bc5c:	f3bf 8f5b 	dmb	ish
   1bc60:	40a3      	lsls	r3, r4
   1bc62:	e852 0f00 	ldrex	r0, [r2]
   1bc66:	4318      	orrs	r0, r3
   1bc68:	e842 0100 	strex	r1, r0, [r2]
   1bc6c:	2900      	cmp	r1, #0
   1bc6e:	d1f8      	bne.n	1bc62 <compare_set+0xca>
   1bc70:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1bc74:	490b      	ldr	r1, [pc, #44]	; (1bca4 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   1bc76:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1bc78:	0123      	lsls	r3, r4, #4
   1bc7a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1bc7e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   1bc82:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1bc84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bc86:	6053      	str	r3, [r2, #4]
	return ret;
   1bc88:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   1bc8a:	4620      	mov	r0, r4
   1bc8c:	9900      	ldr	r1, [sp, #0]
   1bc8e:	f7ff ff33 	bl	1baf8 <compare_int_unlock>
}
   1bc92:	4628      	mov	r0, r5
   1bc94:	b003      	add	sp, #12
   1bc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1bc9a:	f06f 0515 	mvn.w	r5, #21
   1bc9e:	e7f4      	b.n	1bc8a <compare_set+0xf2>
   1bca0:	00800001 	.word	0x00800001
   1bca4:	200023b0 	.word	0x200023b0
   1bca8:	40011000 	.word	0x40011000
   1bcac:	007ffffd 	.word	0x007ffffd
   1bcb0:	20003878 	.word	0x20003878

0001bcb4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1bcb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1bcb6:	4b19      	ldr	r3, [pc, #100]	; (1bd1c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1bcb8:	4d19      	ldr	r5, [pc, #100]	; (1bd20 <sys_clock_driver_init+0x6c>)
   1bcba:	2400      	movs	r4, #0
   1bcbc:	f04f 30ff 	mov.w	r0, #4294967295
   1bcc0:	f04f 31ff 	mov.w	r1, #4294967295
   1bcc4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1bcc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1bccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bcd0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bcd4:	4b13      	ldr	r3, [pc, #76]	; (1bd24 <sys_clock_driver_init+0x70>)
   1bcd6:	2602      	movs	r6, #2
   1bcd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1bcdc:	2101      	movs	r1, #1
   1bcde:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1bce2:	2011      	movs	r0, #17
   1bce4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1bce8:	4622      	mov	r2, r4
   1bcea:	f7f9 f8f3 	bl	14ed4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1bcee:	2011      	movs	r0, #17
   1bcf0:	f7f9 f8c0 	bl	14e74 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1bcf4:	4a0c      	ldr	r2, [pc, #48]	; (1bd28 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1bcf6:	2301      	movs	r3, #1
   1bcf8:	60ab      	str	r3, [r5, #8]
   1bcfa:	602b      	str	r3, [r5, #0]
   1bcfc:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1bcfe:	4b0b      	ldr	r3, [pc, #44]	; (1bd2c <sys_clock_driver_init+0x78>)
   1bd00:	4a0b      	ldr	r2, [pc, #44]	; (1bd30 <sys_clock_driver_init+0x7c>)
   1bd02:	9300      	str	r3, [sp, #0]
   1bd04:	9401      	str	r4, [sp, #4]
   1bd06:	2300      	movs	r3, #0
   1bd08:	4620      	mov	r0, r4
   1bd0a:	f7ff ff45 	bl	1bb98 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1bd0e:	4630      	mov	r0, r6
   1bd10:	f7ff f9d0 	bl	1b0b4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1bd14:	4620      	mov	r0, r4
   1bd16:	b002      	add	sp, #8
   1bd18:	bd70      	pop	{r4, r5, r6, pc}
   1bd1a:	bf00      	nop
   1bd1c:	200023b0 	.word	0x200023b0
   1bd20:	40011000 	.word	0x40011000
   1bd24:	e000e100 	.word	0xe000e100
   1bd28:	2000387c 	.word	0x2000387c
   1bd2c:	0001bab1 	.word	0x0001bab1
   1bd30:	007fffff 	.word	0x007fffff

0001bd34 <rtc_nrf_isr>:
{
   1bd34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1bd38:	4c2b      	ldr	r4, [pc, #172]	; (1bde8 <rtc_nrf_isr+0xb4>)
   1bd3a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1bd3e:	0799      	lsls	r1, r3, #30
   1bd40:	d50b      	bpl.n	1bd5a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bd42:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1bd46:	b143      	cbz	r3, 1bd5a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1bd48:	4a28      	ldr	r2, [pc, #160]	; (1bdec <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bd4a:	2300      	movs	r3, #0
   1bd4c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1bd50:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1bd54:	6813      	ldr	r3, [r2, #0]
   1bd56:	3301      	adds	r3, #1
   1bd58:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1bd5a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1bd5e:	03da      	lsls	r2, r3, #15
   1bd60:	d523      	bpl.n	1bdaa <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd62:	f3bf 8f5b 	dmb	ish
   1bd66:	4b22      	ldr	r3, [pc, #136]	; (1bdf0 <rtc_nrf_isr+0xbc>)
   1bd68:	e853 2f00 	ldrex	r2, [r3]
   1bd6c:	f022 0101 	bic.w	r1, r2, #1
   1bd70:	e843 1000 	strex	r0, r1, [r3]
   1bd74:	2800      	cmp	r0, #0
   1bd76:	d1f7      	bne.n	1bd68 <rtc_nrf_isr+0x34>
   1bd78:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1bd7c:	07d3      	lsls	r3, r2, #31
   1bd7e:	d402      	bmi.n	1bd86 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bd80:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1bd84:	b18b      	cbz	r3, 1bdaa <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bd86:	2500      	movs	r5, #0
   1bd88:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1bd8c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1bd90:	f7ff fee0 	bl	1bb54 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1bd94:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bd98:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1bd9a:	4b16      	ldr	r3, [pc, #88]	; (1bdf4 <rtc_nrf_isr+0xc0>)
   1bd9c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1bda0:	42b0      	cmp	r0, r6
   1bda2:	41b9      	sbcs	r1, r7
   1bda4:	d204      	bcs.n	1bdb0 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1bda6:	f382 8810 	msr	PRIMASK, r2
}
   1bdaa:	b003      	add	sp, #12
   1bdac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1bdb0:	f04f 38ff 	mov.w	r8, #4294967295
   1bdb4:	f04f 39ff 	mov.w	r9, #4294967295
   1bdb8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1bdbc:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1bdc0:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   1bdc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bdc6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bdca:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1bdce:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1bdd2:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1bdd6:	2900      	cmp	r1, #0
   1bdd8:	d0e7      	beq.n	1bdaa <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1bdda:	9000      	str	r0, [sp, #0]
   1bddc:	4632      	mov	r2, r6
   1bdde:	463b      	mov	r3, r7
   1bde0:	4628      	mov	r0, r5
   1bde2:	4788      	blx	r1
   1bde4:	e7e1      	b.n	1bdaa <rtc_nrf_isr+0x76>
   1bde6:	bf00      	nop
   1bde8:	40011000 	.word	0x40011000
   1bdec:	20003880 	.word	0x20003880
   1bdf0:	20003878 	.word	0x20003878
   1bdf4:	200023b0 	.word	0x200023b0

0001bdf8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1bdf8:	1c43      	adds	r3, r0, #1
{
   1bdfa:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1bdfc:	d022      	beq.n	1be44 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1bdfe:	2801      	cmp	r0, #1
   1be00:	dd22      	ble.n	1be48 <sys_clock_set_timeout+0x50>
   1be02:	4a12      	ldr	r2, [pc, #72]	; (1be4c <sys_clock_set_timeout+0x54>)
   1be04:	4b12      	ldr	r3, [pc, #72]	; (1be50 <sys_clock_set_timeout+0x58>)
   1be06:	4290      	cmp	r0, r2
   1be08:	bfd4      	ite	le
   1be0a:	4604      	movle	r4, r0
   1be0c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1be0e:	f7ff fea1 	bl	1bb54 <z_nrf_rtc_timer_read>
   1be12:	4b10      	ldr	r3, [pc, #64]	; (1be54 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1be14:	490e      	ldr	r1, [pc, #56]	; (1be50 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1be16:	e9d3 2300 	ldrd	r2, r3, [r3]
   1be1a:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1be1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1be20:	bf28      	it	cs
   1be22:	2400      	movcs	r4, #0
	cyc += unannounced;
   1be24:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1be26:	428c      	cmp	r4, r1
   1be28:	bf28      	it	cs
   1be2a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1be2c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1be2e:	490a      	ldr	r1, [pc, #40]	; (1be58 <sys_clock_set_timeout+0x60>)
   1be30:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1be32:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1be36:	9001      	str	r0, [sp, #4]
   1be38:	f143 0300 	adc.w	r3, r3, #0
   1be3c:	f7ff feac 	bl	1bb98 <compare_set>
}
   1be40:	b002      	add	sp, #8
   1be42:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1be44:	4c02      	ldr	r4, [pc, #8]	; (1be50 <sys_clock_set_timeout+0x58>)
   1be46:	e7e2      	b.n	1be0e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1be48:	2401      	movs	r4, #1
   1be4a:	e7e0      	b.n	1be0e <sys_clock_set_timeout+0x16>
   1be4c:	007ffffe 	.word	0x007ffffe
   1be50:	007fffff 	.word	0x007fffff
   1be54:	200023c0 	.word	0x200023c0
   1be58:	0001bab1 	.word	0x0001bab1

0001be5c <sys_clock_elapsed>:
{
   1be5c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1be5e:	f7ff fe79 	bl	1bb54 <z_nrf_rtc_timer_read>
   1be62:	4b02      	ldr	r3, [pc, #8]	; (1be6c <sys_clock_elapsed+0x10>)
   1be64:	681b      	ldr	r3, [r3, #0]
}
   1be66:	1ac0      	subs	r0, r0, r3
   1be68:	bd08      	pop	{r3, pc}
   1be6a:	bf00      	nop
   1be6c:	200023c0 	.word	0x200023c0

0001be70 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   1be74:	4e5a      	ldr	r6, [pc, #360]	; (1bfe0 <pinctrl_configure_pins+0x170>)
   1be76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1be7a:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1be7c:	4281      	cmp	r1, r0
   1be7e:	d102      	bne.n	1be86 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1be80:	2000      	movs	r0, #0
}
   1be82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1be86:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1be88:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1be8c:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   1be90:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1be92:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   1be96:	bf08      	it	eq
   1be98:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1be9c:	2c22      	cmp	r4, #34	; 0x22
   1be9e:	f200 809b 	bhi.w	1bfd8 <pinctrl_configure_pins+0x168>
   1bea2:	e8df f004 	tbb	[pc, r4]
   1bea6:	2412      	.short	0x2412
   1bea8:	402c4429 	.word	0x402c4429
   1beac:	99999944 	.word	0x99999944
   1beb0:	99704799 	.word	0x99704799
   1beb4:	99999999 	.word	0x99999999
   1beb8:	99999999 	.word	0x99999999
   1bebc:	817e7b73 	.word	0x817e7b73
   1bec0:	84999999 	.word	0x84999999
   1bec4:	93908d8a 	.word	0x93908d8a
   1bec8:	96          	.byte	0x96
   1bec9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   1beca:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   1bece:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   1bed2:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   1bed6:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
   1beda:	bf14      	ite	ne
   1bedc:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   1bee0:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1bee2:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
   1bee6:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
   1beea:	2401      	movs	r4, #1
   1beec:	e002      	b.n	1bef4 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   1beee:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1bef2:	2400      	movs	r4, #0
   1bef4:	46a6      	mov	lr, r4
   1bef6:	e024      	b.n	1bf42 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   1bef8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1befc:	e7e7      	b.n	1bece <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1befe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1bf02:	2400      	movs	r4, #0
    return pin_number >> 5;
   1bf04:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   1bf08:	f1be 0f01 	cmp.w	lr, #1
   1bf0c:	bf14      	ite	ne
   1bf0e:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   1bf12:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   1bf14:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1bf18:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1bf1c:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   1bf20:	f04f 0e01 	mov.w	lr, #1
   1bf24:	e00d      	b.n	1bf42 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1bf26:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1bf2a:	2401      	movs	r4, #1
   1bf2c:	e7ea      	b.n	1bf04 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1bf2e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1bf32:	e7de      	b.n	1bef2 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1bf34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1bf38:	2d00      	cmp	r5, #0
   1bf3a:	d1da      	bne.n	1bef2 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1bf3c:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1bf3e:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
   1bf40:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1bf42:	f850 cb04 	ldr.w	ip, [r0], #4
   1bf46:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1bf4a:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1bf4e:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1bf52:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   1bf56:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1bf5a:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1bf5e:	bf1c      	itt	ne
   1bf60:	2401      	movne	r4, #1
   1bf62:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1bf66:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
   1bf6a:	2b01      	cmp	r3, #1
   1bf6c:	bf0c      	ite	eq
   1bf6e:	4633      	moveq	r3, r6
   1bf70:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1bf74:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
   1bf78:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1bf7c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1bf80:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1bf84:	e77a      	b.n	1be7c <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1bf86:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1bf8a:	e7d5      	b.n	1bf38 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1bf8c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1bf90:	6804      	ldr	r4, [r0, #0]
   1bf92:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   1bf96:	2c00      	cmp	r4, #0
   1bf98:	d0c7      	beq.n	1bf2a <pinctrl_configure_pins+0xba>
   1bf9a:	e798      	b.n	1bece <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1bf9c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1bfa0:	e7f6      	b.n	1bf90 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1bfa2:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1bfa6:	e7f3      	b.n	1bf90 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1bfa8:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1bfac:	e7f0      	b.n	1bf90 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1bfae:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1bfb2:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1bfb4:	f04f 0e00 	mov.w	lr, #0
   1bfb8:	e7c3      	b.n	1bf42 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1bfba:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   1bfbe:	e786      	b.n	1bece <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1bfc0:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   1bfc4:	e7f5      	b.n	1bfb2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1bfc6:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   1bfca:	e7f2      	b.n	1bfb2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1bfcc:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   1bfd0:	e7ef      	b.n	1bfb2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1bfd2:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   1bfd6:	e7ec      	b.n	1bfb2 <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
   1bfd8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1bfdc:	e751      	b.n	1be82 <pinctrl_configure_pins+0x12>
   1bfde:	bf00      	nop
   1bfe0:	50000300 	.word	0x50000300

0001bfe4 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1bfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfe8:	4e15      	ldr	r6, [pc, #84]	; (1c040 <dk_set_leds_state.part.0+0x5c>)
   1bfea:	b086      	sub	sp, #24
   1bfec:	4607      	mov	r7, r0
   1bfee:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1bff0:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1bff2:	fa27 f205 	lsr.w	r2, r7, r5
   1bff6:	f012 0201 	ands.w	r2, r2, #1
   1bffa:	d117      	bne.n	1c02c <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1bffc:	fa28 f305 	lsr.w	r3, r8, r5
   1c000:	07db      	lsls	r3, r3, #31
   1c002:	d515      	bpl.n	1c030 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1c004:	7931      	ldrb	r1, [r6, #4]
   1c006:	6830      	ldr	r0, [r6, #0]
   1c008:	f00a faf3 	bl	265f2 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1c00c:	4604      	mov	r4, r0
   1c00e:	b178      	cbz	r0, 1c030 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1c010:	4b0c      	ldr	r3, [pc, #48]	; (1c044 <dk_set_leds_state.part.0+0x60>)
   1c012:	9305      	str	r3, [sp, #20]
   1c014:	480c      	ldr	r0, [pc, #48]	; (1c048 <dk_set_leds_state.part.0+0x64>)
   1c016:	2302      	movs	r3, #2
   1c018:	aa04      	add	r2, sp, #16
   1c01a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c01e:	9304      	str	r3, [sp, #16]
   1c020:	f00a faf7 	bl	26612 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1c024:	4620      	mov	r0, r4
   1c026:	b006      	add	sp, #24
   1c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1c02c:	2201      	movs	r2, #1
   1c02e:	e7e9      	b.n	1c004 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1c030:	3501      	adds	r5, #1
   1c032:	2d04      	cmp	r5, #4
   1c034:	f106 0608 	add.w	r6, r6, #8
   1c038:	d1db      	bne.n	1bff2 <dk_set_leds_state.part.0+0xe>
	return 0;
   1c03a:	2400      	movs	r4, #0
   1c03c:	e7f2      	b.n	1c024 <dk_set_leds_state.part.0+0x40>
   1c03e:	bf00      	nop
   1c040:	000288c0 	.word	0x000288c0
   1c044:	0002a6f1 	.word	0x0002a6f1
   1c048:	00027ffc 	.word	0x00027ffc

0001c04c <dk_leds_init>:
{
   1c04c:	b570      	push	{r4, r5, r6, lr}
   1c04e:	4e11      	ldr	r6, [pc, #68]	; (1c094 <dk_leds_init+0x48>)
   1c050:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1c052:	2500      	movs	r5, #0
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1c054:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1c058:	4630      	mov	r0, r6
   1c05a:	f00a fab5 	bl	265c8 <gpio_pin_configure_dt>
		if (err) {
   1c05e:	4604      	mov	r4, r0
   1c060:	b950      	cbnz	r0, 1c078 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1c062:	3501      	adds	r5, #1
   1c064:	2d04      	cmp	r5, #4
   1c066:	f106 0608 	add.w	r6, r6, #8
   1c06a:	d1f3      	bne.n	1c054 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1c06c:	210f      	movs	r1, #15
}
   1c06e:	b006      	add	sp, #24
   1c070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c074:	f7ff bfb6 	b.w	1bfe4 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1c078:	4b07      	ldr	r3, [pc, #28]	; (1c098 <dk_leds_init+0x4c>)
   1c07a:	9305      	str	r3, [sp, #20]
   1c07c:	4807      	ldr	r0, [pc, #28]	; (1c09c <dk_leds_init+0x50>)
   1c07e:	2302      	movs	r3, #2
   1c080:	aa04      	add	r2, sp, #16
   1c082:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c086:	9304      	str	r3, [sp, #16]
   1c088:	f00a fac3 	bl	26612 <z_log_msg_static_create.constprop.0>
}
   1c08c:	4620      	mov	r0, r4
   1c08e:	b006      	add	sp, #24
   1c090:	bd70      	pop	{r4, r5, r6, pc}
   1c092:	bf00      	nop
   1c094:	000288c0 	.word	0x000288c0
   1c098:	0002a707 	.word	0x0002a707
   1c09c:	00027ffc 	.word	0x00027ffc

0001c0a0 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1c0a0:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1c0a2:	2803      	cmp	r0, #3
{
   1c0a4:	b086      	sub	sp, #24
   1c0a6:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1c0a8:	d90e      	bls.n	1c0c8 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1c0aa:	4b12      	ldr	r3, [pc, #72]	; (1c0f4 <dk_set_led+0x54>)
   1c0ac:	9305      	str	r3, [sp, #20]
   1c0ae:	4812      	ldr	r0, [pc, #72]	; (1c0f8 <dk_set_led+0x58>)
   1c0b0:	2302      	movs	r3, #2
   1c0b2:	aa04      	add	r2, sp, #16
   1c0b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   1c0b8:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1c0bc:	9304      	str	r3, [sp, #16]
   1c0be:	f00a faa8 	bl	26612 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1c0c2:	4620      	mov	r0, r4
   1c0c4:	b006      	add	sp, #24
   1c0c6:	bd10      	pop	{r4, pc}
   1c0c8:	4b0c      	ldr	r3, [pc, #48]	; (1c0fc <dk_set_led+0x5c>)
   1c0ca:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1c0ce:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1c0d2:	7909      	ldrb	r1, [r1, #4]
   1c0d4:	f00a fa8d 	bl	265f2 <gpio_pin_set>
	if (err) {
   1c0d8:	4604      	mov	r4, r0
   1c0da:	2800      	cmp	r0, #0
   1c0dc:	d0f1      	beq.n	1c0c2 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1c0de:	4b08      	ldr	r3, [pc, #32]	; (1c100 <dk_set_led+0x60>)
   1c0e0:	9305      	str	r3, [sp, #20]
   1c0e2:	4805      	ldr	r0, [pc, #20]	; (1c0f8 <dk_set_led+0x58>)
   1c0e4:	2302      	movs	r3, #2
   1c0e6:	aa04      	add	r2, sp, #16
   1c0e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c0ec:	9304      	str	r3, [sp, #16]
   1c0ee:	f00a fa90 	bl	26612 <z_log_msg_static_create.constprop.0>
   1c0f2:	e7e6      	b.n	1c0c2 <dk_set_led+0x22>
   1c0f4:	0002a721 	.word	0x0002a721
   1c0f8:	00027ffc 	.word	0x00027ffc
   1c0fc:	000288c0 	.word	0x000288c0
   1c100:	0002a6f1 	.word	0x0002a6f1

0001c104 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1c104:	4602      	mov	r2, r0
   1c106:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1c108:	4801      	ldr	r0, [pc, #4]	; (1c110 <multithreading_lock_acquire+0xc>)
   1c10a:	f001 bfd9 	b.w	1e0c0 <z_impl_k_mutex_lock>
   1c10e:	bf00      	nop
   1c110:	20000bd8 	.word	0x20000bd8

0001c114 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1c114:	4801      	ldr	r0, [pc, #4]	; (1c11c <multithreading_lock_release+0x8>)
   1c116:	f002 b84d 	b.w	1e1b4 <z_impl_k_mutex_unlock>
   1c11a:	bf00      	nop
   1c11c:	20000bd8 	.word	0x20000bd8

0001c120 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1c120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1c122:	f7f7 fe9d 	bl	13e60 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1c126:	4b07      	ldr	r3, [pc, #28]	; (1c144 <k_sys_fatal_error_handler+0x24>)
   1c128:	9305      	str	r3, [sp, #20]
   1c12a:	2302      	movs	r3, #2
   1c12c:	9304      	str	r3, [sp, #16]
   1c12e:	4806      	ldr	r0, [pc, #24]	; (1c148 <k_sys_fatal_error_handler+0x28>)
   1c130:	2300      	movs	r3, #0
   1c132:	aa04      	add	r2, sp, #16
   1c134:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c138:	f7f7 ff72 	bl	14020 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1c13c:	2000      	movs	r0, #0
   1c13e:	f7f9 fd53 	bl	15be8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1c142:	bf00      	nop
   1c144:	0002a750 	.word	0x0002a750
   1c148:	00028004 	.word	0x00028004

0001c14c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1c14c:	b598      	push	{r3, r4, r7, lr}
   1c14e:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1c150:	466c      	mov	r4, sp
   1c152:	b08a      	sub	sp, #40	; 0x28
   1c154:	466a      	mov	r2, sp
   1c156:	4b0c      	ldr	r3, [pc, #48]	; (1c188 <sdc_assertion_handler+0x3c>)
   1c158:	61d1      	str	r1, [r2, #28]
   1c15a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c15e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c162:	8413      	strh	r3, [r2, #32]
   1c164:	4b09      	ldr	r3, [pc, #36]	; (1c18c <sdc_assertion_handler+0x40>)
   1c166:	f842 3f10 	str.w	r3, [r2, #16]!
   1c16a:	4809      	ldr	r0, [pc, #36]	; (1c190 <sdc_assertion_handler+0x44>)
   1c16c:	2300      	movs	r3, #0
   1c16e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c172:	f7f7 ff55 	bl	14020 <z_impl_z_log_msg_static_create>
   1c176:	46a5      	mov	sp, r4
	k_oops();
   1c178:	4040      	eors	r0, r0
   1c17a:	f380 8811 	msr	BASEPRI, r0
   1c17e:	f04f 0003 	mov.w	r0, #3
   1c182:	df02      	svc	2
}
   1c184:	46bd      	mov	sp, r7
   1c186:	bd98      	pop	{r3, r4, r7, pc}
   1c188:	0002a76d 	.word	0x0002a76d
   1c18c:	01000004 	.word	0x01000004
   1c190:	00027fd4 	.word	0x00027fd4

0001c194 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   1c194:	b538      	push	{r3, r4, r5, lr}
   1c196:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1c198:	4807      	ldr	r0, [pc, #28]	; (1c1b8 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1c19a:	6883      	ldr	r3, [r0, #8]
   1c19c:	685d      	ldr	r5, [r3, #4]
   1c19e:	460a      	mov	r2, r1
   1c1a0:	b135      	cbz	r5, 1c1b0 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1c1a2:	2300      	movs	r3, #0
   1c1a4:	4621      	mov	r1, r4
   1c1a6:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   1c1a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1c1ac:	b2c0      	uxtb	r0, r0
   1c1ae:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1c1b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c1b4:	e7f8      	b.n	1c1a8 <rand_prio_low_vector_get+0x14>
   1c1b6:	bf00      	nop
   1c1b8:	00027cd8 	.word	0x00027cd8

0001c1bc <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1c1bc:	4901      	ldr	r1, [pc, #4]	; (1c1c4 <receive_signal_raise+0x8>)
   1c1be:	4802      	ldr	r0, [pc, #8]	; (1c1c8 <receive_signal_raise+0xc>)
   1c1c0:	f00a bd78 	b.w	26cb4 <k_work_submit_to_queue>
   1c1c4:	20003884 	.word	0x20003884
   1c1c8:	20002c78 	.word	0x20002c78

0001c1cc <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1c1cc:	b410      	push	{r4}
   1c1ce:	4603      	mov	r3, r0
   1c1d0:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1c1d2:	4804      	ldr	r0, [pc, #16]	; (1c1e4 <rand_prio_low_vector_get_blocking+0x18>)
   1c1d4:	6881      	ldr	r1, [r0, #8]
   1c1d6:	680c      	ldr	r4, [r1, #0]
   1c1d8:	4619      	mov	r1, r3
   1c1da:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1c1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c1e0:	4718      	bx	r3
   1c1e2:	bf00      	nop
   1c1e4:	00027cd8 	.word	0x00027cd8

0001c1e8 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1c1e8:	b5b0      	push	{r4, r5, r7, lr}
   1c1ea:	b082      	sub	sp, #8
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1c1ec:	4835      	ldr	r0, [pc, #212]	; (1c2c4 <hci_driver_init+0xdc>)
{
   1c1ee:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1c1f0:	f7fa ff0e 	bl	17010 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1c1f4:	4834      	ldr	r0, [pc, #208]	; (1c2c8 <hci_driver_init+0xe0>)
   1c1f6:	f7e5 f88d 	bl	1314 <sdc_init>
		err = sdc_support_adv();
   1c1fa:	f7e5 f905 	bl	1408 <sdc_support_adv>
		if (err) {
   1c1fe:	b120      	cbz	r0, 1c20a <hci_driver_init+0x22>
			return -ENOTSUP;
   1c200:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1c204:	3708      	adds	r7, #8
   1c206:	46bd      	mov	sp, r7
   1c208:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1c20a:	f7e5 f92d 	bl	1468 <sdc_support_peripheral>
		if (err) {
   1c20e:	2800      	cmp	r0, #0
   1c210:	d1f6      	bne.n	1c200 <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1c212:	f7e5 f909 	bl	1428 <sdc_support_dle_peripheral>
			if (err) {
   1c216:	2800      	cmp	r0, #0
   1c218:	d1f2      	bne.n	1c200 <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1c21a:	f7e5 f915 	bl	1448 <sdc_support_le_2m_phy>
		if (err) {
   1c21e:	2800      	cmp	r0, #0
   1c220:	d1ee      	bne.n	1c200 <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1c222:	f7e5 f931 	bl	1488 <sdc_support_phy_update_peripheral>
			if (err) {
   1c226:	4604      	mov	r4, r0
   1c228:	2800      	cmp	r0, #0
   1c22a:	d1e9      	bne.n	1c200 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1c22c:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c22e:	1d3a      	adds	r2, r7, #4
   1c230:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1c232:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c234:	f7e4 ffec 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   1c238:	2800      	cmp	r0, #0
   1c23a:	dbe3      	blt.n	1c204 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1c23c:	4b23      	ldr	r3, [pc, #140]	; (1c2cc <hci_driver_init+0xe4>)
   1c23e:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c240:	1d3a      	adds	r2, r7, #4
   1c242:	2103      	movs	r1, #3
   1c244:	4620      	mov	r0, r4
   1c246:	f7e4 ffe3 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   1c24a:	2800      	cmp	r0, #0
   1c24c:	dbda      	blt.n	1c204 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   1c24e:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c252:	1d3a      	adds	r2, r7, #4
   1c254:	2104      	movs	r1, #4
   1c256:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1c258:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c25a:	f7e4 ffd9 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   1c25e:	2800      	cmp	r0, #0
   1c260:	dbd0      	blt.n	1c204 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c262:	1d3a      	adds	r2, r7, #4
   1c264:	2105      	movs	r1, #5
   1c266:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1c268:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c26a:	f7e4 ffd1 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   1c26e:	2800      	cmp	r0, #0
   1c270:	dbc8      	blt.n	1c204 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1c272:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c274:	1d3a      	adds	r2, r7, #4
   1c276:	2107      	movs	r1, #7
   1c278:	4620      	mov	r0, r4
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1c27a:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1c27c:	f7e4 ffc8 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   1c280:	2800      	cmp	r0, #0
   1c282:	dbbf      	blt.n	1c204 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1c284:	f240 73dd 	movw	r3, #2013	; 0x7dd
   1c288:	4298      	cmp	r0, r3
   1c28a:	dd19      	ble.n	1c2c0 <hci_driver_init+0xd8>
		LOG_ERR("Allocated memory too low: %u < %u",
   1c28c:	466c      	mov	r4, sp
   1c28e:	b088      	sub	sp, #32
   1c290:	466a      	mov	r2, sp
   1c292:	490f      	ldr	r1, [pc, #60]	; (1c2d0 <hci_driver_init+0xe8>)
   1c294:	61d0      	str	r0, [r2, #28]
   1c296:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c29a:	2304      	movs	r3, #4
   1c29c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2a0:	480c      	ldr	r0, [pc, #48]	; (1c2d4 <hci_driver_init+0xec>)
   1c2a2:	2300      	movs	r3, #0
   1c2a4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c2a8:	f7f7 feba 	bl	14020 <z_impl_z_log_msg_static_create>
   1c2ac:	46a5      	mov	sp, r4
		k_panic();
   1c2ae:	4040      	eors	r0, r0
   1c2b0:	f380 8811 	msr	BASEPRI, r0
   1c2b4:	f04f 0004 	mov.w	r0, #4
   1c2b8:	df02      	svc	2
		return -ENOMEM;
   1c2ba:	f06f 000b 	mvn.w	r0, #11
   1c2be:	e7a1      	b.n	1c204 <hci_driver_init+0x1c>
	return 0;
   1c2c0:	2000      	movs	r0, #0
	if (err) {
   1c2c2:	e79f      	b.n	1c204 <hci_driver_init+0x1c>
   1c2c4:	000288e0 	.word	0x000288e0
   1c2c8:	0001c14d 	.word	0x0001c14d
   1c2cc:	02031b1b 	.word	0x02031b1b
   1c2d0:	0002a792 	.word	0x0002a792
   1c2d4:	00027fd4 	.word	0x00027fd4

0001c2d8 <hci_driver_open>:
{
   1c2d8:	b590      	push	{r4, r7, lr}
   1c2da:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1c2dc:	492f      	ldr	r1, [pc, #188]	; (1c39c <hci_driver_open+0xc4>)
   1c2de:	4830      	ldr	r0, [pc, #192]	; (1c3a0 <hci_driver_open+0xc8>)
{
   1c2e0:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1c2e2:	f00a fcba 	bl	26c5a <k_work_init>
		hci_ecdh_init();
   1c2e6:	f000 fdf3 	bl	1ced0 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1c2ea:	1d38      	adds	r0, r7, #4
   1c2ec:	f7e4 ff82 	bl	11f4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1c2f0:	466c      	mov	r4, sp
   1c2f2:	b088      	sub	sp, #32
   1c2f4:	466a      	mov	r2, sp
   1c2f6:	4b2b      	ldr	r3, [pc, #172]	; (1c3a4 <hci_driver_open+0xcc>)
   1c2f8:	6153      	str	r3, [r2, #20]
   1c2fa:	4b2b      	ldr	r3, [pc, #172]	; (1c3a8 <hci_driver_open+0xd0>)
   1c2fc:	6193      	str	r3, [r2, #24]
   1c2fe:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c302:	8393      	strh	r3, [r2, #28]
   1c304:	4b29      	ldr	r3, [pc, #164]	; (1c3ac <hci_driver_open+0xd4>)
   1c306:	f842 3f10 	str.w	r3, [r2, #16]!
   1c30a:	4929      	ldr	r1, [pc, #164]	; (1c3b0 <hci_driver_open+0xd8>)
   1c30c:	4829      	ldr	r0, [pc, #164]	; (1c3b4 <hci_driver_open+0xdc>)
   1c30e:	1d3b      	adds	r3, r7, #4
   1c310:	f7f7 fe86 	bl	14020 <z_impl_z_log_msg_static_create>
   1c314:	46a5      	mov	sp, r4
   1c316:	4828      	ldr	r0, [pc, #160]	; (1c3b8 <hci_driver_open+0xe0>)
   1c318:	f00a fa98 	bl	2684c <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1c31c:	4603      	mov	r3, r0
   1c31e:	b980      	cbnz	r0, 1c342 <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1c320:	4a26      	ldr	r2, [pc, #152]	; (1c3bc <hci_driver_open+0xe4>)
   1c322:	62fa      	str	r2, [r7, #44]	; 0x2c
   1c324:	2202      	movs	r2, #2
   1c326:	62ba      	str	r2, [r7, #40]	; 0x28
   1c328:	4822      	ldr	r0, [pc, #136]	; (1c3b4 <hci_driver_open+0xdc>)
   1c32a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c32e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1c332:	f06f 0412 	mvn.w	r4, #18
   1c336:	f7f7 fe73 	bl	14020 <z_impl_z_log_msg_static_create>
}
   1c33a:	4620      	mov	r0, r4
   1c33c:	3734      	adds	r7, #52	; 0x34
   1c33e:	46bd      	mov	sp, r7
   1c340:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1c342:	4a1f      	ldr	r2, [pc, #124]	; (1c3c0 <hci_driver_open+0xe8>)
   1c344:	ca07      	ldmia	r2, {r0, r1, r2}
   1c346:	f107 0318 	add.w	r3, r7, #24
   1c34a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1c34e:	4618      	mov	r0, r3
   1c350:	f7e5 f8f0 	bl	1534 <sdc_rand_source_register>
	if (err) {
   1c354:	b188      	cbz	r0, 1c37a <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1c356:	b088      	sub	sp, #32
   1c358:	466a      	mov	r2, sp
   1c35a:	4b1a      	ldr	r3, [pc, #104]	; (1c3c4 <hci_driver_open+0xec>)
   1c35c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c360:	2303      	movs	r3, #3
   1c362:	f842 3f10 	str.w	r3, [r2, #16]!
   1c366:	4813      	ldr	r0, [pc, #76]	; (1c3b4 <hci_driver_open+0xdc>)
   1c368:	2300      	movs	r3, #0
   1c36a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c36e:	f7f7 fe57 	bl	14020 <z_impl_z_log_msg_static_create>
   1c372:	46a5      	mov	sp, r4
		return -EINVAL;
   1c374:	f06f 0415 	mvn.w	r4, #21
   1c378:	e7df      	b.n	1c33a <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1c37a:	f04f 30ff 	mov.w	r0, #4294967295
   1c37e:	f04f 31ff 	mov.w	r1, #4294967295
   1c382:	f7ff febf 	bl	1c104 <multithreading_lock_acquire>
	if (err) {
   1c386:	4604      	mov	r4, r0
   1c388:	2800      	cmp	r0, #0
   1c38a:	d1d6      	bne.n	1c33a <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1c38c:	490e      	ldr	r1, [pc, #56]	; (1c3c8 <hci_driver_open+0xf0>)
   1c38e:	480f      	ldr	r0, [pc, #60]	; (1c3cc <hci_driver_open+0xf4>)
   1c390:	f7e4 ff96 	bl	12c0 <sdc_enable>
	if (err) {
   1c394:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1c396:	f7ff febd 	bl	1c114 <multithreading_lock_release>
	return 0;
   1c39a:	e7ce      	b.n	1c33a <hci_driver_open+0x62>
   1c39c:	000266b9 	.word	0x000266b9
   1c3a0:	20003884 	.word	0x20003884
   1c3a4:	000298b6 	.word	0x000298b6
   1c3a8:	0002a7b4 	.word	0x0002a7b4
   1c3ac:	01000003 	.word	0x01000003
   1c3b0:	00a01cc0 	.word	0x00a01cc0
   1c3b4:	00027fd4 	.word	0x00027fd4
   1c3b8:	00027cd8 	.word	0x00027cd8
   1c3bc:	0002a7db 	.word	0x0002a7db
   1c3c0:	00028104 	.word	0x00028104
   1c3c4:	0002a7fb 	.word	0x0002a7fb
   1c3c8:	200023d0 	.word	0x200023d0
   1c3cc:	0001c1bd 	.word	0x0001c1bd

0001c3d0 <hci_driver_receive_process>:
{
   1c3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3d2:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c3d4:	f04f 30ff 	mov.w	r0, #4294967295
{
   1c3d8:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c3da:	f04f 31ff 	mov.w	r1, #4294967295
   1c3de:	f7ff fe91 	bl	1c104 <multithreading_lock_acquire>
	if (!errcode) {
   1c3e2:	bb40      	cbnz	r0, 1c436 <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1c3e4:	4d33      	ldr	r5, [pc, #204]	; (1c4b4 <hci_driver_receive_process+0xe4>)
   1c3e6:	1df9      	adds	r1, r7, #7
   1c3e8:	4628      	mov	r0, r5
   1c3ea:	f000 fc3f 	bl	1cc6c <hci_internal_msg_get>
   1c3ee:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1c3f0:	f7ff fe90 	bl	1c114 <multithreading_lock_release>
	if (errcode) {
   1c3f4:	b9fc      	cbnz	r4, 1c436 <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1c3f6:	79fe      	ldrb	r6, [r7, #7]
   1c3f8:	2e04      	cmp	r6, #4
   1c3fa:	d133      	bne.n	1c464 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1c3fc:	7828      	ldrb	r0, [r5, #0]
   1c3fe:	283e      	cmp	r0, #62	; 0x3e
   1c400:	d01c      	beq.n	1c43c <hci_driver_receive_process+0x6c>
   1c402:	28ff      	cmp	r0, #255	; 0xff
   1c404:	d021      	beq.n	1c44a <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1c406:	f04f 32ff 	mov.w	r2, #4294967295
   1c40a:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1c40e:	4621      	mov	r1, r4
   1c410:	f7f9 fcf2 	bl	15df8 <bt_buf_get_evt>
	if (!evt_buf) {
   1c414:	4606      	mov	r6, r0
   1c416:	b9d8      	cbnz	r0, 1c450 <hci_driver_receive_process+0x80>
		if (discardable) {
   1c418:	b95c      	cbnz	r4, 1c432 <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1c41a:	4b27      	ldr	r3, [pc, #156]	; (1c4b8 <hci_driver_receive_process+0xe8>)
   1c41c:	61fb      	str	r3, [r7, #28]
   1c41e:	2302      	movs	r3, #2
   1c420:	61bb      	str	r3, [r7, #24]
   1c422:	4826      	ldr	r0, [pc, #152]	; (1c4bc <hci_driver_receive_process+0xec>)
   1c424:	4623      	mov	r3, r4
   1c426:	f107 0218 	add.w	r2, r7, #24
   1c42a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c42e:	f7f7 fdf7 	bl	14020 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1c432:	f7ff fec3 	bl	1c1bc <receive_signal_raise>
}
   1c436:	3724      	adds	r7, #36	; 0x24
   1c438:	46bd      	mov	sp, r7
   1c43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1c43c:	78ab      	ldrb	r3, [r5, #2]
   1c43e:	2b02      	cmp	r3, #2
		switch (subevent) {
   1c440:	d1e1      	bne.n	1c406 <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1c442:	2200      	movs	r2, #0
   1c444:	2300      	movs	r3, #0
			return true;
   1c446:	2401      	movs	r4, #1
   1c448:	e7e1      	b.n	1c40e <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1c44a:	78ab      	ldrb	r3, [r5, #2]
   1c44c:	2b80      	cmp	r3, #128	; 0x80
   1c44e:	e7f7      	b.n	1c440 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1c450:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c452:	4918      	ldr	r1, [pc, #96]	; (1c4b4 <hci_driver_receive_process+0xe4>)
   1c454:	3202      	adds	r2, #2
   1c456:	300c      	adds	r0, #12
   1c458:	f009 fea8 	bl	261ac <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1c45c:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1c45e:	f7fa fda3 	bl	16fa8 <bt_recv>
   1c462:	e7e6      	b.n	1c432 <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1c464:	2e02      	cmp	r6, #2
   1c466:	d114      	bne.n	1c492 <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1c468:	f04f 32ff 	mov.w	r2, #4294967295
   1c46c:	f04f 33ff 	mov.w	r3, #4294967295
   1c470:	2003      	movs	r0, #3
   1c472:	f7f9 fc97 	bl	15da4 <bt_buf_get_rx>
	if (!data_buf) {
   1c476:	4604      	mov	r4, r0
   1c478:	b918      	cbnz	r0, 1c482 <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1c47a:	4b11      	ldr	r3, [pc, #68]	; (1c4c0 <hci_driver_receive_process+0xf0>)
   1c47c:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1c480:	e7cf      	b.n	1c422 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1c482:	886a      	ldrh	r2, [r5, #2]
   1c484:	4629      	mov	r1, r5
   1c486:	3204      	adds	r2, #4
   1c488:	300c      	adds	r0, #12
   1c48a:	f009 fe8f 	bl	261ac <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1c48e:	4620      	mov	r0, r4
   1c490:	e7e5      	b.n	1c45e <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1c492:	466d      	mov	r5, sp
   1c494:	b088      	sub	sp, #32
   1c496:	466a      	mov	r2, sp
   1c498:	4b0a      	ldr	r3, [pc, #40]	; (1c4c4 <hci_driver_receive_process+0xf4>)
   1c49a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1c49e:	2303      	movs	r3, #3
   1c4a0:	f842 3f10 	str.w	r3, [r2, #16]!
   1c4a4:	4805      	ldr	r0, [pc, #20]	; (1c4bc <hci_driver_receive_process+0xec>)
   1c4a6:	4623      	mov	r3, r4
   1c4a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c4ac:	f7f7 fdb8 	bl	14020 <z_impl_z_log_msg_static_create>
   1c4b0:	46ad      	mov	sp, r5
   1c4b2:	e7be      	b.n	1c432 <hci_driver_receive_process+0x62>
   1c4b4:	20004552 	.word	0x20004552
   1c4b8:	0002a81f 	.word	0x0002a81f
   1c4bc:	00027fd4 	.word	0x00027fd4
   1c4c0:	0002a839 	.word	0x0002a839
   1c4c4:	0002a852 	.word	0x0002a852

0001c4c8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1c4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1c4ca:	4dac      	ldr	r5, [pc, #688]	; (1c77c <hci_internal_cmd_put+0x2b4>)
   1c4cc:	782b      	ldrb	r3, [r5, #0]
{
   1c4ce:	4604      	mov	r4, r0
	if (cmd_complete_or_status.occurred) {
   1c4d0:	2b00      	cmp	r3, #0
   1c4d2:	f040 83c6 	bne.w	1cc62 <hci_internal_cmd_put+0x79a>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1c4d6:	2304      	movs	r3, #4
   1c4d8:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1c4dc:	4ba8      	ldr	r3, [pc, #672]	; (1c780 <hci_internal_cmd_put+0x2b8>)
   1c4de:	8806      	ldrh	r6, [r0, #0]
   1c4e0:	681f      	ldr	r7, [r3, #0]
   1c4e2:	b1b7      	cbz	r7, 1c512 <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   1c4e4:	f10d 0306 	add.w	r3, sp, #6
   1c4e8:	f10d 0207 	add.w	r2, sp, #7
   1c4ec:	1c69      	adds	r1, r5, #1
   1c4ee:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1c4f0:	2801      	cmp	r0, #1
   1c4f2:	d00e      	beq.n	1c512 <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   1c4f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1c4f8:	2b00      	cmp	r3, #0
   1c4fa:	f040 828d 	bne.w	1ca18 <hci_internal_cmd_put+0x550>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1c4fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1c502:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1c504:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1c506:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1c508:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
   1c50a:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
   1c50c:	80ae      	strh	r6, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1c50e:	71a8      	strb	r0, [r5, #6]
}
   1c510:	e28b      	b.n	1ca2a <hci_internal_cmd_put+0x562>
		switch (BT_OGF(opcode)) {
   1c512:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1c516:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1c51a:	d20f      	bcs.n	1c53c <hci_internal_cmd_put+0x74>
   1c51c:	2b00      	cmp	r3, #0
   1c51e:	d057      	beq.n	1c5d0 <hci_internal_cmd_put+0x108>
   1c520:	3b01      	subs	r3, #1
   1c522:	2b07      	cmp	r3, #7
   1c524:	f200 8384 	bhi.w	1cc30 <hci_internal_cmd_put+0x768>
   1c528:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c52c:	0382000d 	.word	0x0382000d
   1c530:	0082003e 	.word	0x0082003e
   1c534:	03820382 	.word	0x03820382
   1c538:	01040382 	.word	0x01040382
   1c53c:	2b3f      	cmp	r3, #63	; 0x3f
   1c53e:	f000 82b8 	beq.w	1cab2 <hci_internal_cmd_put+0x5ea>
	switch (opcode)	{
   1c542:	2001      	movs	r0, #1
   1c544:	e310      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
	return ((uint16_t)src[1] << 8) | src[0];
   1c546:	4620      	mov	r0, r4
	switch (opcode)	{
   1c548:	f240 4206 	movw	r2, #1030	; 0x406
   1c54c:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1c550:	4293      	cmp	r3, r2
   1c552:	d00f      	beq.n	1c574 <hci_internal_cmd_put+0xac>
   1c554:	f240 421d 	movw	r2, #1053	; 0x41d
   1c558:	4293      	cmp	r3, r2
   1c55a:	d022      	beq.n	1c5a2 <hci_internal_cmd_put+0xda>
   1c55c:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1c55e:	f240 4306 	movw	r3, #1030	; 0x406
   1c562:	429e      	cmp	r6, r3
   1c564:	f000 8258 	beq.w	1ca18 <hci_internal_cmd_put+0x550>
   1c568:	f240 431d 	movw	r3, #1053	; 0x41d
   1c56c:	429e      	cmp	r6, r3
   1c56e:	f000 8253 	beq.w	1ca18 <hci_internal_cmd_put+0x550>
   1c572:	e042      	b.n	1c5fa <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1c574:	f7f0 fec4 	bl	d300 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1c578:	f242 0332 	movw	r3, #8242	; 0x2032
   1c57c:	429e      	cmp	r6, r3
   1c57e:	f240 8351 	bls.w	1cc24 <hci_internal_cmd_put+0x75c>
   1c582:	f242 0385 	movw	r3, #8325	; 0x2085
   1c586:	429e      	cmp	r6, r3
   1c588:	d837      	bhi.n	1c5fa <hci_internal_cmd_put+0x132>
   1c58a:	f242 036c 	movw	r3, #8300	; 0x206c
   1c58e:	429e      	cmp	r6, r3
   1c590:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1c594:	f200 8350 	bhi.w	1cc38 <hci_internal_cmd_put+0x770>
   1c598:	3b03      	subs	r3, #3
   1c59a:	b29b      	uxth	r3, r3
   1c59c:	2b01      	cmp	r3, #1
   1c59e:	d82c      	bhi.n	1c5fa <hci_internal_cmd_put+0x132>
   1c5a0:	e23a      	b.n	1ca18 <hci_internal_cmd_put+0x550>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1c5a2:	f7f0 feaf 	bl	d304 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1c5a6:	e7e7      	b.n	1c578 <hci_internal_cmd_put+0xb0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1c5a8:	4620      	mov	r0, r4
	switch (opcode)	{
   1c5aa:	f640 4263 	movw	r2, #3171	; 0xc63
   1c5ae:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1c5b2:	4293      	cmp	r3, r2
   1c5b4:	d030      	beq.n	1c618 <hci_internal_cmd_put+0x150>
   1c5b6:	dc0d      	bgt.n	1c5d4 <hci_internal_cmd_put+0x10c>
   1c5b8:	f640 4203 	movw	r2, #3075	; 0xc03
   1c5bc:	4293      	cmp	r3, r2
   1c5be:	d01f      	beq.n	1c600 <hci_internal_cmd_put+0x138>
   1c5c0:	f640 422d 	movw	r2, #3117	; 0xc2d
   1c5c4:	4293      	cmp	r3, r2
   1c5c6:	d01e      	beq.n	1c606 <hci_internal_cmd_put+0x13e>
   1c5c8:	f640 4201 	movw	r2, #3073	; 0xc01
   1c5cc:	4293      	cmp	r3, r2
   1c5ce:	d012      	beq.n	1c5f6 <hci_internal_cmd_put+0x12e>
	switch (hci_opcode) {
   1c5d0:	2001      	movs	r0, #1
   1c5d2:	e221      	b.n	1ca18 <hci_internal_cmd_put+0x550>
	switch (opcode)	{
   1c5d4:	f640 427b 	movw	r2, #3195	; 0xc7b
   1c5d8:	4293      	cmp	r3, r2
   1c5da:	d020      	beq.n	1c61e <hci_internal_cmd_put+0x156>
   1c5dc:	f640 427c 	movw	r2, #3196	; 0xc7c
   1c5e0:	4293      	cmp	r3, r2
   1c5e2:	d1f5      	bne.n	1c5d0 <hci_internal_cmd_put+0x108>
		*param_length_out +=
   1c5e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1c5e8:	4966      	ldr	r1, [pc, #408]	; (1c784 <hci_internal_cmd_put+0x2bc>)
		*param_length_out +=
   1c5ea:	3302      	adds	r3, #2
   1c5ec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1c5f0:	f7f0 fd78 	bl	d0e4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1c5f4:	e001      	b.n	1c5fa <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1c5f6:	f7f0 fd6b 	bl	d0d0 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1c5fa:	2801      	cmp	r0, #1
   1c5fc:	d0e8      	beq.n	1c5d0 <hci_internal_cmd_put+0x108>
   1c5fe:	e77e      	b.n	1c4fe <hci_internal_cmd_put+0x36>
		return sdc_hci_cmd_cb_reset();
   1c600:	f7e5 f89e 	bl	1740 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1c604:	e7f9      	b.n	1c5fa <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1c606:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1c60a:	495e      	ldr	r1, [pc, #376]	; (1c784 <hci_internal_cmd_put+0x2bc>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1c60c:	3303      	adds	r3, #3
   1c60e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1c612:	f7f0 fd5b 	bl	d0cc <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1c616:	e7f0      	b.n	1c5fa <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1c618:	f7f0 fd5f 	bl	d0da <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1c61c:	e7ed      	b.n	1c5fa <hci_internal_cmd_put+0x132>
		*param_length_out +=
   1c61e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1c622:	4958      	ldr	r1, [pc, #352]	; (1c784 <hci_internal_cmd_put+0x2bc>)
		*param_length_out +=
   1c624:	3304      	adds	r3, #4
   1c626:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1c62a:	f7f0 fd4d 	bl	d0c8 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1c62e:	e7e4      	b.n	1c5fa <hci_internal_cmd_put+0x132>
	switch (opcode)	{
   1c630:	8823      	ldrh	r3, [r4, #0]
   1c632:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1c636:	3b01      	subs	r3, #1
   1c638:	2b08      	cmp	r3, #8
   1c63a:	d8c9      	bhi.n	1c5d0 <hci_internal_cmd_put+0x108>
   1c63c:	a201      	add	r2, pc, #4	; (adr r2, 1c644 <hci_internal_cmd_put+0x17c>)
   1c63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c642:	bf00      	nop
   1c644:	0001c669 	.word	0x0001c669
   1c648:	0001c67b 	.word	0x0001c67b
   1c64c:	0001c703 	.word	0x0001c703
   1c650:	0001c5d1 	.word	0x0001c5d1
   1c654:	0001c5d1 	.word	0x0001c5d1
   1c658:	0001c5d1 	.word	0x0001c5d1
   1c65c:	0001c5d1 	.word	0x0001c5d1
   1c660:	0001c5d1 	.word	0x0001c5d1
   1c664:	0001c723 	.word	0x0001c723
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1c668:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1c66c:	4845      	ldr	r0, [pc, #276]	; (1c784 <hci_internal_cmd_put+0x2bc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1c66e:	3308      	adds	r3, #8
   1c670:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1c674:	f7f0 fe05 	bl	d282 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1c678:	e7bf      	b.n	1c5fa <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1c67a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1c67e:	4841      	ldr	r0, [pc, #260]	; (1c784 <hci_internal_cmd_put+0x2bc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1c680:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1c682:	2230      	movs	r2, #48	; 0x30
   1c684:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1c686:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1c68a:	f00a fea5 	bl	273d8 <memset>
	cmds->hci_disconnect = 1;
   1c68e:	2320      	movs	r3, #32
   1c690:	71eb      	strb	r3, [r5, #7]
	cmds->hci_read_remote_version_information = 1;
   1c692:	2380      	movs	r3, #128	; 0x80
   1c694:	726b      	strb	r3, [r5, #9]
	cmds->hci_set_event_mask = 1;
   1c696:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1c69a:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_transmit_power_level = 1;
   1c69c:	2304      	movs	r3, #4
   1c69e:	746b      	strb	r3, [r5, #17]
	cmds->hci_read_local_version_information = 1;
   1c6a0:	2328      	movs	r3, #40	; 0x28
   1c6a2:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
   1c6a4:	2302      	movs	r3, #2
   1c6a6:	75ab      	strb	r3, [r5, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1c6a8:	2304      	movs	r3, #4
   1c6aa:	776b      	strb	r3, [r5, #29]
	cmds->hci_le_set_event_mask = 1;
   1c6ac:	f06f 0308 	mvn.w	r3, #8
   1c6b0:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1c6b4:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   1c6b8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1c6bc:	f06f 030c 	mvn.w	r3, #12
   1c6c0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1c6c4:	237e      	movs	r3, #126	; 0x7e
   1c6c6:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1c6ca:	2330      	movs	r3, #48	; 0x30
   1c6cc:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1c6d0:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1c6d4:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1c6d8:	2307      	movs	r3, #7
   1c6da:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1c6de:	f06f 0307 	mvn.w	r3, #7
   1c6e2:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1c6e6:	2301      	movs	r3, #1
   1c6e8:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1c6ec:	2380      	movs	r3, #128	; 0x80
   1c6ee:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1c6f2:	2304      	movs	r3, #4
   1c6f4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1c6f8:	2340      	movs	r3, #64	; 0x40
   1c6fa:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
   1c6fe:	2000      	movs	r0, #0
   1c700:	e6fd      	b.n	1c4fe <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1c702:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c706:	3308      	adds	r3, #8
   1c708:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1c70c:	4b1d      	ldr	r3, [pc, #116]	; (1c784 <hci_internal_cmd_put+0x2bc>)
   1c70e:	2200      	movs	r2, #0
   1c710:	601a      	str	r2, [r3, #0]
   1c712:	605a      	str	r2, [r3, #4]
	features->bdedr_not_supported = 1;
   1c714:	7aeb      	ldrb	r3, [r5, #11]
   1c716:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1c71a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1c71e:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
   1c720:	e7ed      	b.n	1c6fe <hci_internal_cmd_put+0x236>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1c722:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1c726:	4817      	ldr	r0, [pc, #92]	; (1c784 <hci_internal_cmd_put+0x2bc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1c728:	3306      	adds	r3, #6
   1c72a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1c72e:	f7f0 fda6 	bl	d27e <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1c732:	e762      	b.n	1c5fa <hci_internal_cmd_put+0x132>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1c734:	4620      	mov	r0, r4
	switch (opcode)	{
   1c736:	f242 014b 	movw	r1, #8267	; 0x204b
   1c73a:	f830 3b03 	ldrh.w	r3, [r0], #3
   1c73e:	b21a      	sxth	r2, r3
   1c740:	428a      	cmp	r2, r1
   1c742:	f300 80c1 	bgt.w	1c8c8 <hci_internal_cmd_put+0x400>
   1c746:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1c74a:	f242 0232 	movw	r2, #8242	; 0x2032
   1c74e:	dc1d      	bgt.n	1c78c <hci_internal_cmd_put+0x2c4>
	switch (hci_opcode) {
   1c750:	4296      	cmp	r6, r2
   1c752:	f43f af3d 	beq.w	1c5d0 <hci_internal_cmd_put+0x108>
   1c756:	f200 827e 	bhi.w	1cc56 <hci_internal_cmd_put+0x78e>
   1c75a:	f242 0326 	movw	r3, #8230	; 0x2026
   1c75e:	429e      	cmp	r6, r3
   1c760:	f63f af36 	bhi.w	1c5d0 <hci_internal_cmd_put+0x108>
   1c764:	2001      	movs	r0, #1
   1c766:	f242 030c 	movw	r3, #8204	; 0x200c
   1c76a:	429e      	cmp	r6, r3
   1c76c:	f67f aef7 	bls.w	1c55e <hci_internal_cmd_put+0x96>
   1c770:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1c774:	3b0d      	subs	r3, #13
   1c776:	4a04      	ldr	r2, [pc, #16]	; (1c788 <hci_internal_cmd_put+0x2c0>)
   1c778:	b29b      	uxth	r3, r3
   1c77a:	e260      	b.n	1cc3e <hci_internal_cmd_put+0x776>
   1c77c:	20004598 	.word	0x20004598
   1c780:	20003894 	.word	0x20003894
   1c784:	2000459f 	.word	0x2000459f
   1c788:	03001241 	.word	0x03001241
	switch (opcode)	{
   1c78c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1c790:	3b01      	subs	r3, #1
   1c792:	2b4a      	cmp	r3, #74	; 0x4a
   1c794:	d8dc      	bhi.n	1c750 <hci_internal_cmd_put+0x288>
   1c796:	a101      	add	r1, pc, #4	; (adr r1, 1c79c <hci_internal_cmd_put+0x2d4>)
   1c798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1c79c:	0001c8e3 	.word	0x0001c8e3
   1c7a0:	0001c8f3 	.word	0x0001c8f3
   1c7a4:	0001c905 	.word	0x0001c905
   1c7a8:	0001c751 	.word	0x0001c751
   1c7ac:	0001c949 	.word	0x0001c949
   1c7b0:	0001c94f 	.word	0x0001c94f
   1c7b4:	0001c955 	.word	0x0001c955
   1c7b8:	0001c967 	.word	0x0001c967
   1c7bc:	0001c96d 	.word	0x0001c96d
   1c7c0:	0001c973 	.word	0x0001c973
   1c7c4:	0001c751 	.word	0x0001c751
   1c7c8:	0001c751 	.word	0x0001c751
   1c7cc:	0001c751 	.word	0x0001c751
   1c7d0:	0001c751 	.word	0x0001c751
   1c7d4:	0001c97f 	.word	0x0001c97f
   1c7d8:	0001c991 	.word	0x0001c991
   1c7dc:	0001c997 	.word	0x0001c997
   1c7e0:	0001c99d 	.word	0x0001c99d
   1c7e4:	0001c751 	.word	0x0001c751
   1c7e8:	0001c751 	.word	0x0001c751
   1c7ec:	0001c9a3 	.word	0x0001c9a3
   1c7f0:	0001c9b5 	.word	0x0001c9b5
   1c7f4:	0001c9bb 	.word	0x0001c9bb
   1c7f8:	0001c9cd 	.word	0x0001c9cd
   1c7fc:	0001c751 	.word	0x0001c751
   1c800:	0001c9df 	.word	0x0001c9df
   1c804:	0001c9f1 	.word	0x0001c9f1
   1c808:	0001ca03 	.word	0x0001ca03
   1c80c:	0001c751 	.word	0x0001c751
   1c810:	0001c751 	.word	0x0001c751
   1c814:	0001c751 	.word	0x0001c751
   1c818:	0001c751 	.word	0x0001c751
   1c81c:	0001c751 	.word	0x0001c751
   1c820:	0001ca35 	.word	0x0001ca35
   1c824:	0001ca47 	.word	0x0001ca47
   1c828:	0001ca59 	.word	0x0001ca59
   1c82c:	0001ca5f 	.word	0x0001ca5f
   1c830:	0001ca65 	.word	0x0001ca65
   1c834:	0001c751 	.word	0x0001c751
   1c838:	0001c751 	.word	0x0001c751
   1c83c:	0001c751 	.word	0x0001c751
   1c840:	0001c751 	.word	0x0001c751
   1c844:	0001c751 	.word	0x0001c751
   1c848:	0001c751 	.word	0x0001c751
   1c84c:	0001c751 	.word	0x0001c751
   1c850:	0001c751 	.word	0x0001c751
   1c854:	0001ca71 	.word	0x0001ca71
   1c858:	0001ca83 	.word	0x0001ca83
   1c85c:	0001ca95 	.word	0x0001ca95
   1c860:	0001ca9b 	.word	0x0001ca9b
   1c864:	0001c751 	.word	0x0001c751
   1c868:	0001c751 	.word	0x0001c751
   1c86c:	0001c751 	.word	0x0001c751
   1c870:	0001c751 	.word	0x0001c751
   1c874:	0001c751 	.word	0x0001c751
   1c878:	0001c751 	.word	0x0001c751
   1c87c:	0001c751 	.word	0x0001c751
   1c880:	0001c751 	.word	0x0001c751
   1c884:	0001c751 	.word	0x0001c751
   1c888:	0001c751 	.word	0x0001c751
   1c88c:	0001c751 	.word	0x0001c751
   1c890:	0001c751 	.word	0x0001c751
   1c894:	0001c751 	.word	0x0001c751
   1c898:	0001c751 	.word	0x0001c751
   1c89c:	0001c751 	.word	0x0001c751
   1c8a0:	0001c751 	.word	0x0001c751
   1c8a4:	0001c751 	.word	0x0001c751
   1c8a8:	0001c751 	.word	0x0001c751
   1c8ac:	0001c751 	.word	0x0001c751
   1c8b0:	0001c751 	.word	0x0001c751
   1c8b4:	0001c751 	.word	0x0001c751
   1c8b8:	0001c751 	.word	0x0001c751
   1c8bc:	0001c751 	.word	0x0001c751
   1c8c0:	0001c751 	.word	0x0001c751
   1c8c4:	0001caa1 	.word	0x0001caa1
   1c8c8:	f242 035e 	movw	r3, #8286	; 0x205e
   1c8cc:	429a      	cmp	r2, r3
   1c8ce:	f000 80cc 	beq.w	1ca6a <hci_internal_cmd_put+0x5a2>
   1c8d2:	f242 037c 	movw	r3, #8316	; 0x207c
   1c8d6:	429a      	cmp	r2, r3
   1c8d8:	d04e      	beq.n	1c978 <hci_internal_cmd_put+0x4b0>
	switch (hci_opcode) {
   1c8da:	f242 0332 	movw	r3, #8242	; 0x2032
   1c8de:	429e      	cmp	r6, r3
   1c8e0:	e737      	b.n	1c752 <hci_internal_cmd_put+0x28a>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1c8e2:	f7f0 fd00 	bl	d2e6 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1c8e6:	f242 0332 	movw	r3, #8242	; 0x2032
   1c8ea:	429e      	cmp	r6, r3
   1c8ec:	f47f ae44 	bne.w	1c578 <hci_internal_cmd_put+0xb0>
   1c8f0:	e092      	b.n	1ca18 <hci_internal_cmd_put+0x550>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1c8f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1c8f6:	48cf      	ldr	r0, [pc, #828]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1c8f8:	3303      	adds	r3, #3
   1c8fa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1c8fe:	f7f0 fcd4 	bl	d2aa <sdc_hci_cmd_le_read_buffer_size>
   1c902:	e7f0      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1c904:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c908:	3308      	adds	r3, #8
   1c90a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1c90e:	4bc9      	ldr	r3, [pc, #804]	; (1cc34 <hci_internal_cmd_put+0x76c>)
   1c910:	2200      	movs	r2, #0
   1c912:	601a      	str	r2, [r3, #0]
   1c914:	605a      	str	r2, [r3, #4]
	features->params.le_encryption = 1;
   1c916:	79eb      	ldrb	r3, [r5, #7]
   1c918:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1c91c:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1c920:	71eb      	strb	r3, [r5, #7]
	features->params.le_2m_phy = 1;
   1c922:	7a2b      	ldrb	r3, [r5, #8]
   1c924:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1c928:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1c92c:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
   1c92e:	f242 0332 	movw	r3, #8242	; 0x2032
   1c932:	429e      	cmp	r6, r3
   1c934:	d06f      	beq.n	1ca16 <hci_internal_cmd_put+0x54e>
   1c936:	f200 8188 	bhi.w	1cc4a <hci_internal_cmd_put+0x782>
   1c93a:	f242 0326 	movw	r3, #8230	; 0x2026
   1c93e:	429e      	cmp	r6, r3
   1c940:	f63f aedd 	bhi.w	1c6fe <hci_internal_cmd_put+0x236>
		return 0;
   1c944:	2000      	movs	r0, #0
   1c946:	e70e      	b.n	1c766 <hci_internal_cmd_put+0x29e>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1c948:	f7f0 fcd4 	bl	d2f4 <sdc_hci_cmd_le_set_random_address>
   1c94c:	e7cb      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1c94e:	f7f0 fcc2 	bl	d2d6 <sdc_hci_cmd_le_set_adv_params>
   1c952:	e7c8      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1c954:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1c958:	48b6      	ldr	r0, [pc, #728]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1c95a:	3301      	adds	r3, #1
   1c95c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1c960:	f7f0 fca1 	bl	d2a6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1c964:	e7bf      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1c966:	f7f0 fcb2 	bl	d2ce <sdc_hci_cmd_le_set_adv_data>
   1c96a:	e7bc      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1c96c:	f7f0 fcc4 	bl	d2f8 <sdc_hci_cmd_le_set_scan_response_data>
   1c970:	e7b9      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1c972:	f7f0 fcae 	bl	d2d2 <sdc_hci_cmd_le_set_adv_enable>
   1c976:	e7b6      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1c978:	f7f0 fcb1 	bl	d2de <sdc_hci_cmd_le_set_data_related_address_changes>
   1c97c:	e7b3      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1c97e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1c982:	48ac      	ldr	r0, [pc, #688]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1c984:	3301      	adds	r3, #1
   1c986:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1c98a:	f7f0 fc92 	bl	d2b2 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1c98e:	e7aa      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1c990:	f7f0 fc7b 	bl	d28a <sdc_hci_cmd_le_clear_filter_accept_list>
   1c994:	e7a7      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1c996:	f7f0 fc76 	bl	d286 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1c99a:	e7a4      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1c99c:	f7f0 fc95 	bl	d2ca <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1c9a0:	e7a1      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1c9a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1c9a6:	49a3      	ldr	r1, [pc, #652]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1c9a8:	3307      	adds	r3, #7
   1c9aa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1c9ae:	f7f0 fc7e 	bl	d2ae <sdc_hci_cmd_le_read_channel_map>
   1c9b2:	e798      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1c9b4:	f7f0 fc83 	bl	d2be <sdc_hci_cmd_le_read_remote_features>
   1c9b8:	e795      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1c9ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1c9be:	499d      	ldr	r1, [pc, #628]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1c9c0:	3310      	adds	r3, #16
   1c9c2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1c9c6:	f7f0 fc62 	bl	d28e <sdc_hci_cmd_le_encrypt>
   1c9ca:	e78c      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1c9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1c9d0:	4898      	ldr	r0, [pc, #608]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1c9d2:	3308      	adds	r3, #8
   1c9d4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1c9d8:	f7f0 fc63 	bl	d2a2 <sdc_hci_cmd_le_rand>
   1c9dc:	e783      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1c9de:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1c9e2:	4994      	ldr	r1, [pc, #592]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1c9e4:	3302      	adds	r3, #2
   1c9e6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1c9ea:	f7f0 fc56 	bl	d29a <sdc_hci_cmd_le_long_term_key_request_reply>
   1c9ee:	e77a      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1c9f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1c9f4:	498f      	ldr	r1, [pc, #572]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1c9f6:	3302      	adds	r3, #2
   1c9f8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1c9fc:	f7f0 fc49 	bl	d292 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1ca00:	e771      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1ca02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ca06:	3308      	adds	r3, #8
   1ca08:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1ca0c:	238f      	movs	r3, #143	; 0x8f
   1ca0e:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
   1ca10:	23c0      	movs	r3, #192	; 0xc0
   1ca12:	72eb      	strb	r3, [r5, #11]
   1ca14:	e78b      	b.n	1c92e <hci_internal_cmd_put+0x466>
		return 0;
   1ca16:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ca18:	230f      	movs	r3, #15
   1ca1a:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ca1c:	2304      	movs	r3, #4
   1ca1e:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
   1ca20:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1ca22:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
   1ca24:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
   1ca26:	f8a5 6005 	strh.w	r6, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1ca2a:	2301      	movs	r3, #1
   1ca2c:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   1ca2e:	2000      	movs	r0, #0
}
   1ca30:	b003      	add	sp, #12
   1ca32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1ca34:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1ca38:	497e      	ldr	r1, [pc, #504]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1ca3a:	3302      	adds	r3, #2
   1ca3c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1ca40:	f7f0 fc4b 	bl	d2da <sdc_hci_cmd_le_set_data_length>
   1ca44:	e74f      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1ca46:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1ca4a:	487a      	ldr	r0, [pc, #488]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1ca4c:	3304      	adds	r3, #4
   1ca4e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1ca52:	f7f0 fc36 	bl	d2c2 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1ca56:	e746      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1ca58:	f7f0 fc50 	bl	d2fc <sdc_hci_cmd_le_write_suggested_default_data_length>
   1ca5c:	e743      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_read_local_p256_public_key();
   1ca5e:	f000 fa67 	bl	1cf30 <hci_cmd_le_read_local_p256_public_key>
   1ca62:	e740      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1ca64:	f009 fe34 	bl	266d0 <hci_cmd_le_generate_dhkey>
   1ca68:	e73d      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1ca6a:	f009 fe34 	bl	266d6 <hci_cmd_le_generate_dhkey_v2>
   1ca6e:	e73a      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1ca70:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1ca74:	486f      	ldr	r0, [pc, #444]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1ca76:	3308      	adds	r3, #8
   1ca78:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1ca7c:	f7f0 fc1b 	bl	d2b6 <sdc_hci_cmd_le_read_max_data_length>
   1ca80:	e731      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1ca82:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ca86:	496b      	ldr	r1, [pc, #428]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1ca88:	3304      	adds	r3, #4
   1ca8a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ca8e:	f7f0 fc14 	bl	d2ba <sdc_hci_cmd_le_read_phy>
   1ca92:	e728      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1ca94:	f7f0 fc25 	bl	d2e2 <sdc_hci_cmd_le_set_default_phy>
   1ca98:	e725      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1ca9a:	f7f0 fc29 	bl	d2f0 <sdc_hci_cmd_le_set_phy>
   1ca9e:	e722      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1caa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1caa4:	4863      	ldr	r0, [pc, #396]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1caa6:	3302      	adds	r3, #2
   1caa8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1caac:	f7f0 fc0b 	bl	d2c6 <sdc_hci_cmd_le_read_transmit_power>
   1cab0:	e719      	b.n	1c8e6 <hci_internal_cmd_put+0x41e>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1cab2:	4620      	mov	r0, r4
	switch (opcode)	{
   1cab4:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1cab8:	f830 3b03 	ldrh.w	r3, [r0], #3
   1cabc:	4293      	cmp	r3, r2
   1cabe:	d823      	bhi.n	1cb08 <hci_internal_cmd_put+0x640>
   1cac0:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1cac4:	f67f ad3d 	bls.w	1c542 <hci_internal_cmd_put+0x7a>
   1cac8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1cacc:	3b01      	subs	r3, #1
   1cace:	2b0a      	cmp	r3, #10
   1cad0:	f63f ad37 	bhi.w	1c542 <hci_internal_cmd_put+0x7a>
   1cad4:	a201      	add	r2, pc, #4	; (adr r2, 1cadc <hci_internal_cmd_put+0x614>)
   1cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cada:	bf00      	nop
   1cadc:	0001cb59 	.word	0x0001cb59
   1cae0:	0001cb75 	.word	0x0001cb75
   1cae4:	0001c543 	.word	0x0001c543
   1cae8:	0001c543 	.word	0x0001c543
   1caec:	0001c543 	.word	0x0001c543
   1caf0:	0001cbc5 	.word	0x0001cbc5
   1caf4:	0001c543 	.word	0x0001c543
   1caf8:	0001c543 	.word	0x0001c543
   1cafc:	0001cba1 	.word	0x0001cba1
   1cb00:	0001cbb3 	.word	0x0001cbb3
   1cb04:	0001cbcb 	.word	0x0001cbcb
   1cb08:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1cb0c:	b292      	uxth	r2, r2
   1cb0e:	2a0c      	cmp	r2, #12
   1cb10:	f63f ad17 	bhi.w	1c542 <hci_internal_cmd_put+0x7a>
   1cb14:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1cb18:	2b0c      	cmp	r3, #12
   1cb1a:	f63f ad12 	bhi.w	1c542 <hci_internal_cmd_put+0x7a>
   1cb1e:	a201      	add	r2, pc, #4	; (adr r2, 1cb24 <hci_internal_cmd_put+0x65c>)
   1cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cb24:	0001cbdd 	.word	0x0001cbdd
   1cb28:	0001cbfb 	.word	0x0001cbfb
   1cb2c:	0001cc01 	.word	0x0001cc01
   1cb30:	0001cc07 	.word	0x0001cc07
   1cb34:	0001cc0d 	.word	0x0001cc0d
   1cb38:	0001cc13 	.word	0x0001cc13
   1cb3c:	0001c543 	.word	0x0001c543
   1cb40:	0001c543 	.word	0x0001c543
   1cb44:	0001c543 	.word	0x0001c543
   1cb48:	0001cc19 	.word	0x0001cc19
   1cb4c:	0001c543 	.word	0x0001c543
   1cb50:	0001c543 	.word	0x0001c543
   1cb54:	0001cc1f 	.word	0x0001cc1f
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1cb58:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1cb5c:	4835      	ldr	r0, [pc, #212]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1cb5e:	330c      	adds	r3, #12
   1cb60:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1cb64:	f7e4 fe00 	bl	1768 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1cb68:	f026 0308 	bic.w	r3, r6, #8
   1cb6c:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1cb70:	4293      	cmp	r3, r2
   1cb72:	e4fc      	b.n	1c56e <hci_internal_cmd_put+0xa6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1cb74:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cb78:	3340      	adds	r3, #64	; 0x40
   1cb7a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1cb7e:	4b2d      	ldr	r3, [pc, #180]	; (1cc34 <hci_internal_cmd_put+0x76c>)
   1cb80:	2200      	movs	r2, #0
   1cb82:	801a      	strh	r2, [r3, #0]
	cmds->read_version_info = 1;
   1cb84:	79eb      	ldrb	r3, [r5, #7]
   1cb86:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1cb8a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1cb8e:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
   1cb90:	7a2b      	ldrb	r3, [r5, #8]
   1cb92:	f023 0307 	bic.w	r3, r3, #7
   1cb96:	f043 0307 	orr.w	r3, r3, #7
   1cb9a:	722b      	strb	r3, [r5, #8]
		return 0;
   1cb9c:	2000      	movs	r0, #0
   1cb9e:	e7e3      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1cba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1cba4:	4823      	ldr	r0, [pc, #140]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1cba6:	3317      	adds	r3, #23
   1cba8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1cbac:	f7f0 fb16 	bl	d1dc <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1cbb0:	e7da      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		*param_length_out +=
   1cbb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1cbb6:	481f      	ldr	r0, [pc, #124]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1cbb8:	3320      	adds	r3, #32
   1cbba:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1cbbe:	f7f0 fac0 	bl	d142 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1cbc2:	e7d1      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1cbc4:	f7f0 fb59 	bl	d27a <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1cbc8:	e7ce      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1cbca:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1cbce:	4819      	ldr	r0, [pc, #100]	; (1cc34 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1cbd0:	3301      	adds	r3, #1
   1cbd2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1cbd6:	f7f0 faa0 	bl	d11a <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1cbda:	e7c5      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1cbdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cbe0:	3340      	adds	r3, #64	; 0x40
   1cbe2:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1cbe6:	4b13      	ldr	r3, [pc, #76]	; (1cc34 <hci_internal_cmd_put+0x76c>)
   1cbe8:	2200      	movs	r2, #0
   1cbea:	801a      	strh	r2, [r3, #0]
	cmds->read_supported_vs_commands = 1;
   1cbec:	79eb      	ldrb	r3, [r5, #7]
   1cbee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1cbf2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1cbf6:	71eb      	strb	r3, [r5, #7]
	switch (hci_opcode) {
   1cbf8:	e7d0      	b.n	1cb9c <hci_internal_cmd_put+0x6d4>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1cbfa:	f7f0 fa81 	bl	d100 <sdc_hci_cmd_vs_llpm_mode_set>
   1cbfe:	e7b3      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1cc00:	f7f0 fa7a 	bl	d0f8 <sdc_hci_cmd_vs_conn_update>
   1cc04:	e7b0      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1cc06:	f7f0 fa6f 	bl	d0e8 <sdc_hci_cmd_vs_conn_event_extend>
   1cc0a:	e7ad      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1cc0c:	f7f0 fa7e 	bl	d10c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1cc10:	e7aa      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1cc12:	f7f0 fa73 	bl	d0fc <sdc_hci_cmd_vs_event_length_set>
   1cc16:	e7a7      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1cc18:	f7f0 fa74 	bl	d104 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1cc1c:	e7a4      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1cc1e:	f7f0 fa7a 	bl	d116 <sdc_hci_cmd_vs_set_adv_randomness>
   1cc22:	e7a1      	b.n	1cb68 <hci_internal_cmd_put+0x6a0>
	switch (hci_opcode) {
   1cc24:	f242 0326 	movw	r3, #8230	; 0x2026
   1cc28:	429e      	cmp	r6, r3
   1cc2a:	f67f ad9c 	bls.w	1c766 <hci_internal_cmd_put+0x29e>
   1cc2e:	e4e4      	b.n	1c5fa <hci_internal_cmd_put+0x132>
		switch (BT_OGF(opcode)) {
   1cc30:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1cc32:	e4e2      	b.n	1c5fa <hci_internal_cmd_put+0x132>
   1cc34:	2000459f 	.word	0x2000459f
	switch (hci_opcode) {
   1cc38:	3b2d      	subs	r3, #45	; 0x2d
   1cc3a:	4a0b      	ldr	r2, [pc, #44]	; (1cc68 <hci_internal_cmd_put+0x7a0>)
   1cc3c:	b29b      	uxth	r3, r3
   1cc3e:	fa22 f303 	lsr.w	r3, r2, r3
   1cc42:	07db      	lsls	r3, r3, #31
   1cc44:	f57f acd9 	bpl.w	1c5fa <hci_internal_cmd_put+0x132>
   1cc48:	e6e6      	b.n	1ca18 <hci_internal_cmd_put+0x550>
   1cc4a:	f242 0385 	movw	r3, #8325	; 0x2085
   1cc4e:	429e      	cmp	r6, r3
   1cc50:	d905      	bls.n	1cc5e <hci_internal_cmd_put+0x796>
		return 0;
   1cc52:	2000      	movs	r0, #0
   1cc54:	e4d1      	b.n	1c5fa <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   1cc56:	f242 0385 	movw	r3, #8325	; 0x2085
   1cc5a:	2001      	movs	r0, #1
   1cc5c:	e493      	b.n	1c586 <hci_internal_cmd_put+0xbe>
		return 0;
   1cc5e:	2000      	movs	r0, #0
   1cc60:	e493      	b.n	1c58a <hci_internal_cmd_put+0xc2>
		return -NRF_EPERM;
   1cc62:	f04f 30ff 	mov.w	r0, #4294967295
   1cc66:	e6e3      	b.n	1ca30 <hci_internal_cmd_put+0x568>
   1cc68:	01000401 	.word	0x01000401

0001cc6c <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1cc6c:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1cc6e:	4c09      	ldr	r4, [pc, #36]	; (1cc94 <hci_internal_msg_get+0x28>)
   1cc70:	7823      	ldrb	r3, [r4, #0]
{
   1cc72:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1cc74:	b91b      	cbnz	r3, 1cc7e <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1cc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1cc7a:	f7f0 ba15 	b.w	d0a8 <sdc_hci_get>
		memcpy(msg_out,
   1cc7e:	78a2      	ldrb	r2, [r4, #2]
   1cc80:	1c61      	adds	r1, r4, #1
   1cc82:	3202      	adds	r2, #2
   1cc84:	f00a fb9a 	bl	273bc <memcpy>
		cmd_complete_or_status.occurred = false;
   1cc88:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1cc8a:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1cc8c:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1cc8e:	702b      	strb	r3, [r5, #0]
}
   1cc90:	bd38      	pop	{r3, r4, r5, pc}
   1cc92:	bf00      	nop
   1cc94:	20004598 	.word	0x20004598

0001cc98 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1cc98:	b570      	push	{r4, r5, r6, lr}
   1cc9a:	4605      	mov	r5, r0
   1cc9c:	460e      	mov	r6, r1
   1cc9e:	4c08      	ldr	r4, [pc, #32]	; (1ccc0 <bt_rand+0x28>)
   1cca0:	4620      	mov	r0, r4
   1cca2:	f009 fdd3 	bl	2684c <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1cca6:	b138      	cbz	r0, 1ccb8 <bt_rand+0x20>
   1cca8:	68a3      	ldr	r3, [r4, #8]
   1ccaa:	b2b2      	uxth	r2, r6
   1ccac:	4629      	mov	r1, r5
   1ccae:	4620      	mov	r0, r4
   1ccb0:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1ccb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ccb6:	4718      	bx	r3
   1ccb8:	f06f 0012 	mvn.w	r0, #18
   1ccbc:	bd70      	pop	{r4, r5, r6, pc}
   1ccbe:	bf00      	nop
   1ccc0:	00027cd8 	.word	0x00027cd8

0001ccc4 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1ccc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ccc6:	4b24      	ldr	r3, [pc, #144]	; (1cd58 <ecdh_p256_common_secret+0x94>)
   1ccc8:	4924      	ldr	r1, [pc, #144]	; (1cd5c <ecdh_p256_common_secret+0x98>)
   1ccca:	f103 0220 	add.w	r2, r3, #32
   1ccce:	2800      	cmp	r0, #0
   1ccd0:	bf08      	it	eq
   1ccd2:	4619      	moveq	r1, r3
{
   1ccd4:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ccd6:	4610      	mov	r0, r2
   1ccd8:	f002 fa86 	bl	1f1e8 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1ccdc:	4604      	mov	r4, r0
   1ccde:	b180      	cbz	r0, 1cd02 <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1cce0:	466d      	mov	r5, sp
   1cce2:	b088      	sub	sp, #32
   1cce4:	466a      	mov	r2, sp
   1cce6:	4b1e      	ldr	r3, [pc, #120]	; (1cd60 <ecdh_p256_common_secret+0x9c>)
   1cce8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ccec:	2303      	movs	r3, #3
   1ccee:	f842 3f10 	str.w	r3, [r2, #16]!
   1ccf2:	481c      	ldr	r0, [pc, #112]	; (1cd64 <ecdh_p256_common_secret+0xa0>)
   1ccf4:	2300      	movs	r3, #0
   1ccf6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ccfa:	f7f7 f991 	bl	14020 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1ccfe:	2412      	movs	r4, #18
   1cd00:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1cd02:	f04f 32ff 	mov.w	r2, #4294967295
   1cd06:	f04f 33ff 	mov.w	r3, #4294967295
   1cd0a:	2001      	movs	r0, #1
   1cd0c:	f7f9 f84a 	bl	15da4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1cd10:	f100 060c 	add.w	r6, r0, #12
   1cd14:	2102      	movs	r1, #2
   1cd16:	4605      	mov	r5, r0
   1cd18:	4630      	mov	r0, r6
   1cd1a:	f009 fa41 	bl	261a0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1cd1e:	233e      	movs	r3, #62	; 0x3e
   1cd20:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1cd22:	2322      	movs	r3, #34	; 0x22
   1cd24:	7043      	strb	r3, [r0, #1]
   1cd26:	2101      	movs	r1, #1
   1cd28:	4630      	mov	r0, r6
   1cd2a:	f009 fa39 	bl	261a0 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1cd2e:	2309      	movs	r3, #9
   1cd30:	7003      	strb	r3, [r0, #0]
   1cd32:	2121      	movs	r1, #33	; 0x21
   1cd34:	4630      	mov	r0, r6
   1cd36:	f009 fa33 	bl	261a0 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1cd3a:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1cd3e:	b134      	cbz	r4, 1cd4e <ecdh_p256_common_secret+0x8a>
__ssp_bos_icheck3(memset, void *, int)
   1cd40:	2220      	movs	r2, #32
   1cd42:	21ff      	movs	r1, #255	; 0xff
   1cd44:	f00a fb48 	bl	273d8 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1cd48:	4628      	mov	r0, r5
   1cd4a:	46bd      	mov	sp, r7
   1cd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1cd4e:	4906      	ldr	r1, [pc, #24]	; (1cd68 <ecdh_p256_common_secret+0xa4>)
   1cd50:	f009 fcb4 	bl	266bc <sys_memcpy_swap.constprop.0>
   1cd54:	e7f8      	b.n	1cd48 <ecdh_p256_common_secret+0x84>
   1cd56:	bf00      	nop
   1cd58:	200045df 	.word	0x200045df
   1cd5c:	0002a8ff 	.word	0x0002a8ff
   1cd60:	0002a8c1 	.word	0x0002a8c1
   1cd64:	00027fcc 	.word	0x00027fcc
   1cd68:	200045ff 	.word	0x200045ff

0001cd6c <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cd6e:	4c42      	ldr	r4, [pc, #264]	; (1ce78 <ecdh_cmd_process+0x10c>)
   1cd70:	f3bf 8f5b 	dmb	ish
   1cd74:	6823      	ldr	r3, [r4, #0]
   1cd76:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1cd7a:	2b02      	cmp	r3, #2
{
   1cd7c:	b087      	sub	sp, #28
   1cd7e:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1cd80:	d05a      	beq.n	1ce38 <ecdh_cmd_process+0xcc>
   1cd82:	2b04      	cmp	r3, #4
   1cd84:	d05d      	beq.n	1ce42 <ecdh_cmd_process+0xd6>
   1cd86:	2b01      	cmp	r3, #1
   1cd88:	d15d      	bne.n	1ce46 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1cd8a:	4c3c      	ldr	r4, [pc, #240]	; (1ce7c <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1cd8c:	4e3c      	ldr	r6, [pc, #240]	; (1ce80 <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1cd8e:	2120      	movs	r1, #32
   1cd90:	4620      	mov	r0, r4
   1cd92:	f7ff ff81 	bl	1cc98 <bt_rand>
		if (err) {
   1cd96:	2800      	cmp	r0, #0
   1cd98:	d143      	bne.n	1ce22 <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1cd9a:	2220      	movs	r2, #32
   1cd9c:	4631      	mov	r1, r6
   1cd9e:	4620      	mov	r0, r4
   1cda0:	f00a fafc 	bl	2739c <memcmp>
   1cda4:	2800      	cmp	r0, #0
   1cda6:	d0f2      	beq.n	1cd8e <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1cda8:	4836      	ldr	r0, [pc, #216]	; (1ce84 <ecdh_cmd_process+0x118>)
   1cdaa:	4621      	mov	r1, r4
   1cdac:	f002 fa08 	bl	1f1c0 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1cdb0:	4605      	mov	r5, r0
   1cdb2:	2800      	cmp	r0, #0
   1cdb4:	d1eb      	bne.n	1cd8e <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1cdb6:	f04f 32ff 	mov.w	r2, #4294967295
   1cdba:	f04f 33ff 	mov.w	r3, #4294967295
   1cdbe:	2001      	movs	r0, #1
   1cdc0:	f7f8 fff0 	bl	15da4 <bt_buf_get_rx>
   1cdc4:	f100 060c 	add.w	r6, r0, #12
   1cdc8:	2102      	movs	r1, #2
   1cdca:	4604      	mov	r4, r0
   1cdcc:	4630      	mov	r0, r6
   1cdce:	f009 f9e7 	bl	261a0 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1cdd2:	233e      	movs	r3, #62	; 0x3e
   1cdd4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1cdd6:	2342      	movs	r3, #66	; 0x42
   1cdd8:	7043      	strb	r3, [r0, #1]
   1cdda:	2101      	movs	r1, #1
   1cddc:	4630      	mov	r0, r6
   1cdde:	f009 f9df 	bl	261a0 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1cde2:	2308      	movs	r3, #8
   1cde4:	7003      	strb	r3, [r0, #0]
   1cde6:	2141      	movs	r1, #65	; 0x41
   1cde8:	4630      	mov	r0, r6
   1cdea:	f009 f9d9 	bl	261a0 <net_buf_simple_add>
   1cdee:	4606      	mov	r6, r0
	evt->status = status;
   1cdf0:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1cdf4:	b1bd      	cbz	r5, 1ce26 <ecdh_cmd_process+0xba>
   1cdf6:	2240      	movs	r2, #64	; 0x40
   1cdf8:	2100      	movs	r1, #0
   1cdfa:	f00a faed 	bl	273d8 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cdfe:	f3bf 8f5b 	dmb	ish
   1ce02:	2300      	movs	r3, #0
   1ce04:	e857 2f00 	ldrex	r2, [r7]
   1ce08:	e847 3100 	strex	r1, r3, [r7]
   1ce0c:	2900      	cmp	r1, #0
   1ce0e:	d1f9      	bne.n	1ce04 <ecdh_cmd_process+0x98>
   1ce10:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1ce14:	b36c      	cbz	r4, 1ce72 <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1ce16:	4620      	mov	r0, r4
	}
}
   1ce18:	b007      	add	sp, #28
   1ce1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1ce1e:	f7fa b8c3 	b.w	16fa8 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1ce22:	251f      	movs	r5, #31
   1ce24:	e7c7      	b.n	1cdb6 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1ce26:	4917      	ldr	r1, [pc, #92]	; (1ce84 <ecdh_cmd_process+0x118>)
   1ce28:	f009 fc48 	bl	266bc <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1ce2c:	3120      	adds	r1, #32
   1ce2e:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1ce32:	f009 fc43 	bl	266bc <sys_memcpy_swap.constprop.0>
		break;
   1ce36:	e7e2      	b.n	1cdfe <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1ce38:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1ce3a:	f7ff ff43 	bl	1ccc4 <ecdh_p256_common_secret>
   1ce3e:	4604      	mov	r4, r0
		break;
   1ce40:	e7dd      	b.n	1cdfe <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1ce42:	2001      	movs	r0, #1
   1ce44:	e7f9      	b.n	1ce3a <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1ce46:	4b10      	ldr	r3, [pc, #64]	; (1ce88 <ecdh_cmd_process+0x11c>)
   1ce48:	9305      	str	r3, [sp, #20]
   1ce4a:	2302      	movs	r3, #2
   1ce4c:	9304      	str	r3, [sp, #16]
   1ce4e:	2300      	movs	r3, #0
   1ce50:	480e      	ldr	r0, [pc, #56]	; (1ce8c <ecdh_cmd_process+0x120>)
   1ce52:	aa04      	add	r2, sp, #16
   1ce54:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ce58:	f7f7 f8e2 	bl	14020 <z_impl_z_log_msg_static_create>
   1ce5c:	f3bf 8f5b 	dmb	ish
   1ce60:	2300      	movs	r3, #0
   1ce62:	e854 2f00 	ldrex	r2, [r4]
   1ce66:	e844 3100 	strex	r1, r3, [r4]
   1ce6a:	2900      	cmp	r1, #0
   1ce6c:	d1f9      	bne.n	1ce62 <ecdh_cmd_process+0xf6>
   1ce6e:	f3bf 8f5b 	dmb	ish
}
   1ce72:	b007      	add	sp, #28
   1ce74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ce76:	bf00      	nop
   1ce78:	200038a8 	.word	0x200038a8
   1ce7c:	200045df 	.word	0x200045df
   1ce80:	0002a8ff 	.word	0x0002a8ff
   1ce84:	200045ff 	.word	0x200045ff
   1ce88:	0002a8e2 	.word	0x0002a8e2
   1ce8c:	00027fcc 	.word	0x00027fcc

0001ce90 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1ce90:	b510      	push	{r4, lr}
   1ce92:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1ce94:	2210      	movs	r2, #16
   1ce96:	2100      	movs	r1, #0
   1ce98:	a801      	add	r0, sp, #4
   1ce9a:	f00a fa9d 	bl	273d8 <memset>
   1ce9e:	4c0b      	ldr	r4, [pc, #44]	; (1cecc <ecdh_thread+0x3c>)
   1cea0:	9405      	str	r4, [sp, #20]
   1cea2:	2301      	movs	r3, #1
   1cea4:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1cea8:	f04f 32ff 	mov.w	r2, #4294967295
   1ceac:	f04f 33ff 	mov.w	r3, #4294967295
   1ceb0:	2101      	movs	r1, #1
   1ceb2:	a801      	add	r0, sp, #4
   1ceb4:	f002 f8da 	bl	1f06c <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1ceb8:	4620      	mov	r0, r4
   1ceba:	f00a fa64 	bl	27386 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1cebe:	9b04      	ldr	r3, [sp, #16]
   1cec0:	f36f 3394 	bfc	r3, #14, #7
   1cec4:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1cec6:	f7ff ff51 	bl	1cd6c <ecdh_cmd_process>
	while (true) {
   1ceca:	e7ed      	b.n	1cea8 <ecdh_thread+0x18>
   1cecc:	20003898 	.word	0x20003898

0001ced0 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1ced0:	b510      	push	{r4, lr}
   1ced2:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1ced4:	480e      	ldr	r0, [pc, #56]	; (1cf10 <hci_ecdh_init+0x40>)
   1ced6:	f00a fa51 	bl	2737c <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ceda:	4c0e      	ldr	r4, [pc, #56]	; (1cf14 <hci_ecdh_init+0x44>)
   1cedc:	490e      	ldr	r1, [pc, #56]	; (1cf18 <hci_ecdh_init+0x48>)
   1cede:	2200      	movs	r2, #0
   1cee0:	2300      	movs	r3, #0
   1cee2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1cee6:	2300      	movs	r3, #0
   1cee8:	220a      	movs	r2, #10
   1ceea:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1ceee:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1cef2:	9300      	str	r3, [sp, #0]
   1cef4:	f44f 7262 	mov.w	r2, #904	; 0x388
   1cef8:	4b08      	ldr	r3, [pc, #32]	; (1cf1c <hci_ecdh_init+0x4c>)
   1cefa:	4620      	mov	r0, r4
   1cefc:	f001 f83c 	bl	1df78 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1cf00:	4907      	ldr	r1, [pc, #28]	; (1cf20 <hci_ecdh_init+0x50>)
   1cf02:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1cf04:	b008      	add	sp, #32
   1cf06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf0a:	f009 bd74 	b.w	269f6 <z_impl_k_thread_name_set>
   1cf0e:	bf00      	nop
   1cf10:	20003898 	.word	0x20003898
   1cf14:	20002bb0 	.word	0x20002bb0
   1cf18:	20006300 	.word	0x20006300
   1cf1c:	0001ce91 	.word	0x0001ce91
   1cf20:	0002a8f2 	.word	0x0002a8f2

0001cf24 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1cf24:	4801      	ldr	r0, [pc, #4]	; (1cf2c <hci_ecdh_uninit+0x8>)
   1cf26:	f7f8 bcdb 	b.w	158e0 <z_impl_k_thread_abort>
   1cf2a:	bf00      	nop
   1cf2c:	20002bb0 	.word	0x20002bb0

0001cf30 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1cf30:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1cf32:	4b0b      	ldr	r3, [pc, #44]	; (1cf60 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1cf34:	f3bf 8f5b 	dmb	ish
   1cf38:	2201      	movs	r2, #1
   1cf3a:	e853 1f00 	ldrex	r1, [r3]
   1cf3e:	2900      	cmp	r1, #0
   1cf40:	d103      	bne.n	1cf4a <hci_cmd_le_read_local_p256_public_key+0x1a>
   1cf42:	e843 2000 	strex	r0, r2, [r3]
   1cf46:	2800      	cmp	r0, #0
   1cf48:	d1f7      	bne.n	1cf3a <hci_cmd_le_read_local_p256_public_key+0xa>
   1cf4a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1cf4e:	d105      	bne.n	1cf5c <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1cf50:	4804      	ldr	r0, [pc, #16]	; (1cf64 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1cf52:	2100      	movs	r1, #0
   1cf54:	f002 f8e6 	bl	1f124 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1cf58:	2000      	movs	r0, #0
}
   1cf5a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1cf5c:	200c      	movs	r0, #12
   1cf5e:	e7fc      	b.n	1cf5a <hci_cmd_le_read_local_p256_public_key+0x2a>
   1cf60:	200038a8 	.word	0x200038a8
   1cf64:	20003898 	.word	0x20003898

0001cf68 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1cf68:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1cf6a:	2900      	cmp	r1, #0
   1cf6c:	4b11      	ldr	r3, [pc, #68]	; (1cfb4 <cmd_le_generate_dhkey+0x4c>)
   1cf6e:	f3bf 8f5b 	dmb	ish
{
   1cf72:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1cf74:	bf0c      	ite	eq
   1cf76:	2202      	moveq	r2, #2
   1cf78:	2204      	movne	r2, #4
   1cf7a:	e853 1f00 	ldrex	r1, [r3]
   1cf7e:	2900      	cmp	r1, #0
   1cf80:	d103      	bne.n	1cf8a <cmd_le_generate_dhkey+0x22>
   1cf82:	e843 2000 	strex	r0, r2, [r3]
   1cf86:	2800      	cmp	r0, #0
   1cf88:	d1f7      	bne.n	1cf7a <cmd_le_generate_dhkey+0x12>
   1cf8a:	f3bf 8f5b 	dmb	ish
   1cf8e:	d10e      	bne.n	1cfae <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1cf90:	4621      	mov	r1, r4
   1cf92:	4809      	ldr	r0, [pc, #36]	; (1cfb8 <cmd_le_generate_dhkey+0x50>)
   1cf94:	f009 fb92 	bl	266bc <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1cf98:	4808      	ldr	r0, [pc, #32]	; (1cfbc <cmd_le_generate_dhkey+0x54>)
   1cf9a:	f104 0120 	add.w	r1, r4, #32
   1cf9e:	f009 fb8d 	bl	266bc <sys_memcpy_swap.constprop.0>
   1cfa2:	4807      	ldr	r0, [pc, #28]	; (1cfc0 <cmd_le_generate_dhkey+0x58>)
   1cfa4:	2100      	movs	r1, #0
   1cfa6:	f002 f8bd 	bl	1f124 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1cfaa:	2000      	movs	r0, #0
}
   1cfac:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1cfae:	200c      	movs	r0, #12
   1cfb0:	e7fc      	b.n	1cfac <cmd_le_generate_dhkey+0x44>
   1cfb2:	bf00      	nop
   1cfb4:	200038a8 	.word	0x200038a8
   1cfb8:	200045ff 	.word	0x200045ff
   1cfbc:	2000461f 	.word	0x2000461f
   1cfc0:	20003898 	.word	0x20003898

0001cfc4 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1cfc4:	4901      	ldr	r1, [pc, #4]	; (1cfcc <mpsl_low_prio_irq_handler+0x8>)
   1cfc6:	4802      	ldr	r0, [pc, #8]	; (1cfd0 <mpsl_low_prio_irq_handler+0xc>)
   1cfc8:	f009 be74 	b.w	26cb4 <k_work_submit_to_queue>
   1cfcc:	200038ac 	.word	0x200038ac
   1cfd0:	20002c78 	.word	0x20002c78

0001cfd4 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   1cfd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1cfd6:	2332      	movs	r3, #50	; 0x32
   1cfd8:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1cfdc:	4a10      	ldr	r2, [pc, #64]	; (1d020 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1cfde:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1cfe0:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1cfe2:	2119      	movs	r1, #25
   1cfe4:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1cfe6:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1cfea:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1cfee:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1cff2:	f7ef fa77 	bl	c4e4 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1cff6:	4604      	mov	r4, r0
   1cff8:	b970      	cbnz	r0, 1d018 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1cffa:	4601      	mov	r1, r0
   1cffc:	462a      	mov	r2, r5
   1cffe:	2008      	movs	r0, #8
   1d000:	f7f7 ff68 	bl	14ed4 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1d004:	462a      	mov	r2, r5
   1d006:	4621      	mov	r1, r4
   1d008:	200b      	movs	r0, #11
   1d00a:	f7f7 ff63 	bl	14ed4 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1d00e:	462a      	mov	r2, r5
   1d010:	4621      	mov	r1, r4
   1d012:	4628      	mov	r0, r5
   1d014:	f7f7 ff5e 	bl	14ed4 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1d018:	4620      	mov	r0, r4
   1d01a:	b003      	add	sp, #12
   1d01c:	bd30      	pop	{r4, r5, pc}
   1d01e:	bf00      	nop
   1d020:	0001d025 	.word	0x0001d025

0001d024 <m_assert_handler>:
{
   1d024:	b598      	push	{r3, r4, r7, lr}
   1d026:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1d028:	466c      	mov	r4, sp
   1d02a:	b08a      	sub	sp, #40	; 0x28
   1d02c:	466a      	mov	r2, sp
   1d02e:	4b0c      	ldr	r3, [pc, #48]	; (1d060 <m_assert_handler+0x3c>)
   1d030:	61d1      	str	r1, [r2, #28]
   1d032:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d036:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d03a:	8413      	strh	r3, [r2, #32]
   1d03c:	4b09      	ldr	r3, [pc, #36]	; (1d064 <m_assert_handler+0x40>)
   1d03e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d042:	4809      	ldr	r0, [pc, #36]	; (1d068 <m_assert_handler+0x44>)
   1d044:	2300      	movs	r3, #0
   1d046:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d04a:	f7f6 ffe9 	bl	14020 <z_impl_z_log_msg_static_create>
   1d04e:	46a5      	mov	sp, r4
	k_oops();
   1d050:	4040      	eors	r0, r0
   1d052:	f380 8811 	msr	BASEPRI, r0
   1d056:	f04f 0003 	mov.w	r0, #3
   1d05a:	df02      	svc	2
}
   1d05c:	46bd      	mov	sp, r7
   1d05e:	bd98      	pop	{r3, r4, r7, pc}
   1d060:	0002a92b 	.word	0x0002a92b
   1d064:	01000004 	.word	0x01000004
   1d068:	00028034 	.word	0x00028034

0001d06c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1d06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1d06e:	4d0d      	ldr	r5, [pc, #52]	; (1d0a4 <mpsl_low_prio_init+0x38>)
   1d070:	490d      	ldr	r1, [pc, #52]	; (1d0a8 <mpsl_low_prio_init+0x3c>)
   1d072:	2400      	movs	r4, #0
   1d074:	9400      	str	r4, [sp, #0]
   1d076:	f06f 0309 	mvn.w	r3, #9
   1d07a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d07e:	4628      	mov	r0, r5
   1d080:	f001 f9ee 	bl	1e460 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1d084:	4909      	ldr	r1, [pc, #36]	; (1d0ac <mpsl_low_prio_init+0x40>)
   1d086:	4628      	mov	r0, r5
   1d088:	f009 fcb5 	bl	269f6 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1d08c:	4908      	ldr	r1, [pc, #32]	; (1d0b0 <mpsl_low_prio_init+0x44>)
   1d08e:	4809      	ldr	r0, [pc, #36]	; (1d0b4 <mpsl_low_prio_init+0x48>)
   1d090:	f009 fde3 	bl	26c5a <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1d094:	4622      	mov	r2, r4
   1d096:	2104      	movs	r1, #4
   1d098:	2019      	movs	r0, #25
   1d09a:	f7f7 ff1b 	bl	14ed4 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1d09e:	4620      	mov	r0, r4
   1d0a0:	b003      	add	sp, #12
   1d0a2:	bd30      	pop	{r4, r5, pc}
   1d0a4:	20002c78 	.word	0x20002c78
   1d0a8:	20006700 	.word	0x20006700
   1d0ac:	0002a93f 	.word	0x0002a93f
   1d0b0:	00026705 	.word	0x00026705
   1d0b4:	200038ac 	.word	0x200038ac

0001d0b8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1d0b8:	4b01      	ldr	r3, [pc, #4]	; (1d0c0 <mpsl_hfclk_callback+0x8>)
   1d0ba:	2000      	movs	r0, #0
   1d0bc:	681b      	ldr	r3, [r3, #0]
   1d0be:	4718      	bx	r3
   1d0c0:	200038bc 	.word	0x200038bc

0001d0c4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1d0c4:	b120      	cbz	r0, 1d0d0 <nrfx_clock_start+0xc>
   1d0c6:	2801      	cmp	r0, #1
   1d0c8:	d106      	bne.n	1d0d8 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1d0ca:	4804      	ldr	r0, [pc, #16]	; (1d0dc <nrfx_clock_start+0x18>)
   1d0cc:	f7ef b86c 	b.w	c1a8 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1d0d0:	4b03      	ldr	r3, [pc, #12]	; (1d0e0 <nrfx_clock_start+0x1c>)
   1d0d2:	2001      	movs	r0, #1
   1d0d4:	681b      	ldr	r3, [r3, #0]
   1d0d6:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1d0d8:	4770      	bx	lr
   1d0da:	bf00      	nop
   1d0dc:	0001d0b9 	.word	0x0001d0b9
   1d0e0:	200038bc 	.word	0x200038bc

0001d0e4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1d0e4:	4b01      	ldr	r3, [pc, #4]	; (1d0ec <nrfx_clock_init+0x8>)
   1d0e6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1d0e8:	4801      	ldr	r0, [pc, #4]	; (1d0f0 <nrfx_clock_init+0xc>)
   1d0ea:	4770      	bx	lr
   1d0ec:	200038bc 	.word	0x200038bc
   1d0f0:	0bad0000 	.word	0x0bad0000

0001d0f4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d0f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1d0f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1d0fc:	2a08      	cmp	r2, #8
   1d0fe:	d106      	bne.n	1d10e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d100:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1d104:	2b05      	cmp	r3, #5
   1d106:	d802      	bhi.n	1d10e <nrf52_errata_103+0x1a>
   1d108:	4a02      	ldr	r2, [pc, #8]	; (1d114 <nrf52_errata_103+0x20>)
   1d10a:	5cd0      	ldrb	r0, [r2, r3]
   1d10c:	4770      	bx	lr
                        return false;
   1d10e:	2000      	movs	r0, #0
}
   1d110:	4770      	bx	lr
   1d112:	bf00      	nop
   1d114:	0002a959 	.word	0x0002a959

0001d118 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1d118:	4a02      	ldr	r2, [pc, #8]	; (1d124 <nvmc_wait+0xc>)
   1d11a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1d11e:	2b00      	cmp	r3, #0
   1d120:	d0fb      	beq.n	1d11a <nvmc_wait+0x2>
}
   1d122:	4770      	bx	lr
   1d124:	4001e000 	.word	0x4001e000

0001d128 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1d128:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d12a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1d12e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1d132:	2a08      	cmp	r2, #8
   1d134:	d14e      	bne.n	1d1d4 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1d136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d13a:	2100      	movs	r1, #0
   1d13c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1d140:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1d144:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1d148:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   1d14c:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   1d150:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1d154:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   1d158:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1d15c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   1d160:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1d164:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1d168:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1d16c:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   1d170:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1d174:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1d178:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1d17c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   1d180:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1d184:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1d188:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1d18c:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   1d190:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1d194:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1d198:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1d19c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   1d1a0:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1d1a4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   1d1a8:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1d1ac:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   1d1b0:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1d1b4:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   1d1b8:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1d1bc:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   1d1c0:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1d1c4:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1d1c8:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1d1cc:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1d1d0:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1d1d4:	f7ff ff8e 	bl	1d0f4 <nrf52_errata_103>
   1d1d8:	b118      	cbz	r0, 1d1e2 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1d1da:	4b43      	ldr	r3, [pc, #268]	; (1d2e8 <SystemInit+0x1c0>)
   1d1dc:	4a43      	ldr	r2, [pc, #268]	; (1d2ec <SystemInit+0x1c4>)
   1d1de:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1d1e2:	f7ff ff87 	bl	1d0f4 <nrf52_errata_103>
   1d1e6:	b118      	cbz	r0, 1d1f0 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1d1e8:	4b41      	ldr	r3, [pc, #260]	; (1d2f0 <SystemInit+0x1c8>)
   1d1ea:	22fb      	movs	r2, #251	; 0xfb
   1d1ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1d1f0:	f7ff ff80 	bl	1d0f4 <nrf52_errata_103>
   1d1f4:	b170      	cbz	r0, 1d214 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1d1f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1d1fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d1fe:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1d202:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1d206:	f022 020f 	bic.w	r2, r2, #15
   1d20a:	f003 030f 	and.w	r3, r3, #15
   1d20e:	4313      	orrs	r3, r2
   1d210:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1d214:	f7ff ff6e 	bl	1d0f4 <nrf52_errata_103>
   1d218:	b120      	cbz	r0, 1d224 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1d21a:	4b36      	ldr	r3, [pc, #216]	; (1d2f4 <SystemInit+0x1cc>)
   1d21c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d220:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1d228:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1d22c:	2b08      	cmp	r3, #8
   1d22e:	d109      	bne.n	1d244 <SystemInit+0x11c>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1d230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d234:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1d238:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1d23a:	bf44      	itt	mi
   1d23c:	f06f 0201 	mvnmi.w	r2, #1
   1d240:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1d244:	4a2c      	ldr	r2, [pc, #176]	; (1d2f8 <SystemInit+0x1d0>)
   1d246:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1d24a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1d24e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1d252:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d256:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d25a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1d25e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1d262:	2a08      	cmp	r2, #8
   1d264:	d10e      	bne.n	1d284 <SystemInit+0x15c>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d266:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1d26a:	2b05      	cmp	r3, #5
   1d26c:	d802      	bhi.n	1d274 <SystemInit+0x14c>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1d26e:	4a23      	ldr	r2, [pc, #140]	; (1d2fc <SystemInit+0x1d4>)
   1d270:	5cd3      	ldrb	r3, [r2, r3]
   1d272:	b13b      	cbz	r3, 1d284 <SystemInit+0x15c>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1d274:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1d278:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1d27c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d280:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1d284:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1d288:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1d28c:	2a00      	cmp	r2, #0
   1d28e:	db03      	blt.n	1d298 <SystemInit+0x170>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1d290:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1d294:	2b00      	cmp	r3, #0
   1d296:	da22      	bge.n	1d2de <SystemInit+0x1b6>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1d298:	4919      	ldr	r1, [pc, #100]	; (1d300 <SystemInit+0x1d8>)
   1d29a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1d29c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1d2a0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1d2a4:	2412      	movs	r4, #18
    nvmc_wait();
   1d2a6:	f7ff ff37 	bl	1d118 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1d2aa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1d2ae:	f7ff ff33 	bl	1d118 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1d2b2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1d2b6:	f7ff ff2f 	bl	1d118 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1d2ba:	2300      	movs	r3, #0
   1d2bc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1d2c0:	f7ff ff2a 	bl	1d118 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1d2c4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1d2c8:	490b      	ldr	r1, [pc, #44]	; (1d2f8 <SystemInit+0x1d0>)
   1d2ca:	4b0e      	ldr	r3, [pc, #56]	; (1d304 <SystemInit+0x1dc>)
   1d2cc:	68ca      	ldr	r2, [r1, #12]
   1d2ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1d2d2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1d2d4:	60cb      	str	r3, [r1, #12]
   1d2d6:	f3bf 8f4f 	dsb	sy
    __NOP();
   1d2da:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1d2dc:	e7fd      	b.n	1d2da <SystemInit+0x1b2>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1d2de:	4b0a      	ldr	r3, [pc, #40]	; (1d308 <SystemInit+0x1e0>)
   1d2e0:	4a0a      	ldr	r2, [pc, #40]	; (1d30c <SystemInit+0x1e4>)
   1d2e2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1d2e4:	bd10      	pop	{r4, pc}
   1d2e6:	bf00      	nop
   1d2e8:	40005000 	.word	0x40005000
   1d2ec:	00038148 	.word	0x00038148
   1d2f0:	4000f000 	.word	0x4000f000
   1d2f4:	40029000 	.word	0x40029000
   1d2f8:	e000ed00 	.word	0xe000ed00
   1d2fc:	0002a953 	.word	0x0002a953
   1d300:	4001e000 	.word	0x4001e000
   1d304:	05fa0004 	.word	0x05fa0004
   1d308:	200006a8 	.word	0x200006a8
   1d30c:	03d09000 	.word	0x03d09000

0001d310 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1d310:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1d312:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1d314:	6802      	ldr	r2, [r0, #0]
   1d316:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1d31a:	fab2 f382 	clz	r3, r2
   1d31e:	f1c3 031f 	rsb	r3, r3, #31
   1d322:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1d324:	fa05 f403 	lsl.w	r4, r5, r3
   1d328:	ea22 0404 	bic.w	r4, r2, r4
   1d32c:	e850 6f00 	ldrex	r6, [r0]
   1d330:	4296      	cmp	r6, r2
   1d332:	d104      	bne.n	1d33e <nrfx_flag32_alloc+0x2e>
   1d334:	e840 4c00 	strex	ip, r4, [r0]
   1d338:	f1bc 0f00 	cmp.w	ip, #0
   1d33c:	d1f6      	bne.n	1d32c <nrfx_flag32_alloc+0x1c>
   1d33e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1d342:	d1e7      	bne.n	1d314 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1d344:	4801      	ldr	r0, [pc, #4]	; (1d34c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1d346:	700b      	strb	r3, [r1, #0]
}
   1d348:	bd70      	pop	{r4, r5, r6, pc}
   1d34a:	bf00      	nop
   1d34c:	0bad0000 	.word	0x0bad0000

0001d350 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1d350:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1d352:	6803      	ldr	r3, [r0, #0]
   1d354:	40cb      	lsrs	r3, r1
   1d356:	07db      	lsls	r3, r3, #31
   1d358:	d414      	bmi.n	1d384 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1d35a:	2301      	movs	r3, #1
   1d35c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1d35e:	6802      	ldr	r2, [r0, #0]
   1d360:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1d364:	ea43 0102 	orr.w	r1, r3, r2
   1d368:	e850 4f00 	ldrex	r4, [r0]
   1d36c:	4294      	cmp	r4, r2
   1d36e:	d104      	bne.n	1d37a <nrfx_flag32_free+0x2a>
   1d370:	e840 1c00 	strex	ip, r1, [r0]
   1d374:	f1bc 0f00 	cmp.w	ip, #0
   1d378:	d1f6      	bne.n	1d368 <nrfx_flag32_free+0x18>
   1d37a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1d37e:	d1ee      	bne.n	1d35e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1d380:	4801      	ldr	r0, [pc, #4]	; (1d388 <nrfx_flag32_free+0x38>)
}
   1d382:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d384:	4801      	ldr	r0, [pc, #4]	; (1d38c <nrfx_flag32_free+0x3c>)
   1d386:	e7fc      	b.n	1d382 <nrfx_flag32_free+0x32>
   1d388:	0bad0000 	.word	0x0bad0000
   1d38c:	0bad0004 	.word	0x0bad0004

0001d390 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1d390:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1d392:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1d396:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1d398:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1d39a:	6002      	str	r2, [r0, #0]
}
   1d39c:	4802      	ldr	r0, [pc, #8]	; (1d3a8 <nrf_gpio_pin_port_decode+0x18>)
   1d39e:	bf18      	it	ne
   1d3a0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1d3a4:	4770      	bx	lr
   1d3a6:	bf00      	nop
   1d3a8:	50000300 	.word	0x50000300

0001d3ac <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1d3ac:	4b03      	ldr	r3, [pc, #12]	; (1d3bc <pin_in_use_by_te+0x10>)
   1d3ae:	3008      	adds	r0, #8
   1d3b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1d3b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1d3b8:	4770      	bx	lr
   1d3ba:	bf00      	nop
   1d3bc:	200006ac 	.word	0x200006ac

0001d3c0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1d3c0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1d3c2:	f100 0308 	add.w	r3, r0, #8
   1d3c6:	4c0c      	ldr	r4, [pc, #48]	; (1d3f8 <call_handler+0x38>)
   1d3c8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1d3cc:	05da      	lsls	r2, r3, #23
{
   1d3ce:	4605      	mov	r5, r0
   1d3d0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1d3d2:	d507      	bpl.n	1d3e4 <call_handler+0x24>
   1d3d4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1d3d8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1d3dc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1d3e0:	6852      	ldr	r2, [r2, #4]
   1d3e2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1d3e4:	68a3      	ldr	r3, [r4, #8]
   1d3e6:	b12b      	cbz	r3, 1d3f4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1d3e8:	68e2      	ldr	r2, [r4, #12]
   1d3ea:	4631      	mov	r1, r6
   1d3ec:	4628      	mov	r0, r5
    }
}
   1d3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1d3f2:	4718      	bx	r3
}
   1d3f4:	bd70      	pop	{r4, r5, r6, pc}
   1d3f6:	bf00      	nop
   1d3f8:	200006ac 	.word	0x200006ac

0001d3fc <release_handler>:
{
   1d3fc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1d3fe:	4a13      	ldr	r2, [pc, #76]	; (1d44c <release_handler+0x50>)
   1d400:	3008      	adds	r0, #8
   1d402:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1d406:	05d9      	lsls	r1, r3, #23
   1d408:	d51c      	bpl.n	1d444 <release_handler+0x48>
   1d40a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1d40e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1d412:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1d416:	f102 040e 	add.w	r4, r2, #14
   1d41a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1d41c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1d420:	f413 7f80 	tst.w	r3, #256	; 0x100
   1d424:	d003      	beq.n	1d42e <release_handler+0x32>
   1d426:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1d42a:	4299      	cmp	r1, r3
   1d42c:	d00a      	beq.n	1d444 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1d42e:	3001      	adds	r0, #1
   1d430:	2830      	cmp	r0, #48	; 0x30
   1d432:	d1f3      	bne.n	1d41c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1d434:	2300      	movs	r3, #0
   1d436:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1d43a:	4805      	ldr	r0, [pc, #20]	; (1d450 <release_handler+0x54>)
}
   1d43c:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1d440:	f7ff bf86 	b.w	1d350 <nrfx_flag32_free>
}
   1d444:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d448:	4770      	bx	lr
   1d44a:	bf00      	nop
   1d44c:	200006ac 	.word	0x200006ac
   1d450:	20000720 	.word	0x20000720

0001d454 <pin_handler_trigger_uninit>:
{
   1d454:	b538      	push	{r3, r4, r5, lr}
   1d456:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1d458:	f7ff ffa8 	bl	1d3ac <pin_in_use_by_te>
   1d45c:	4c09      	ldr	r4, [pc, #36]	; (1d484 <pin_handler_trigger_uninit+0x30>)
   1d45e:	f102 0508 	add.w	r5, r2, #8
   1d462:	b140      	cbz	r0, 1d476 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d464:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1d468:	4907      	ldr	r1, [pc, #28]	; (1d488 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1d46a:	0b5b      	lsrs	r3, r3, #13
   1d46c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1d470:	2000      	movs	r0, #0
   1d472:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1d476:	4610      	mov	r0, r2
   1d478:	f7ff ffc0 	bl	1d3fc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1d47c:	2300      	movs	r3, #0
   1d47e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1d482:	bd38      	pop	{r3, r4, r5, pc}
   1d484:	200006ac 	.word	0x200006ac
   1d488:	40006000 	.word	0x40006000

0001d48c <nrfx_gpiote_input_configure>:
{
   1d48c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1d490:	4604      	mov	r4, r0
   1d492:	4616      	mov	r6, r2
   1d494:	461d      	mov	r5, r3
    if (p_input_config)
   1d496:	b301      	cbz	r1, 1d4da <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1d498:	4f4e      	ldr	r7, [pc, #312]	; (1d5d4 <nrfx_gpiote_input_configure+0x148>)
   1d49a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1d49e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1d4a2:	079b      	lsls	r3, r3, #30
   1d4a4:	d502      	bpl.n	1d4ac <nrfx_gpiote_input_configure+0x20>
   1d4a6:	f7ff ff81 	bl	1d3ac <pin_in_use_by_te>
   1d4aa:	bb10      	cbnz	r0, 1d4f2 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1d4ac:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1d4ae:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1d4b2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1d4b6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1d4ba:	f10d 020f 	add.w	r2, sp, #15
   1d4be:	460b      	mov	r3, r1
   1d4c0:	4620      	mov	r0, r4
   1d4c2:	f10d 010e 	add.w	r1, sp, #14
   1d4c6:	f009 f961 	bl	2678c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1d4ca:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1d4ce:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1d4d2:	f043 0301 	orr.w	r3, r3, #1
   1d4d6:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   1d4da:	b346      	cbz	r6, 1d52e <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1d4dc:	4b3d      	ldr	r3, [pc, #244]	; (1d5d4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1d4de:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1d4e2:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1d4e4:	f104 0708 	add.w	r7, r4, #8
   1d4e8:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   1d4ec:	0788      	lsls	r0, r1, #30
   1d4ee:	d502      	bpl.n	1d4f6 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   1d4f0:	b1aa      	cbz	r2, 1d51e <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   1d4f2:	4839      	ldr	r0, [pc, #228]	; (1d5d8 <nrfx_gpiote_input_configure+0x14c>)
   1d4f4:	e01d      	b.n	1d532 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1d4f6:	f021 0120 	bic.w	r1, r1, #32
   1d4fa:	04c9      	lsls	r1, r1, #19
   1d4fc:	0cc9      	lsrs	r1, r1, #19
   1d4fe:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   1d502:	b162      	cbz	r2, 1d51e <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   1d504:	f1bc 0f03 	cmp.w	ip, #3
   1d508:	d8f3      	bhi.n	1d4f2 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1d50a:	6872      	ldr	r2, [r6, #4]
   1d50c:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1d50e:	f1bc 0f00 	cmp.w	ip, #0
   1d512:	d111      	bne.n	1d538 <nrfx_gpiote_input_configure+0xac>
   1d514:	4a31      	ldr	r2, [pc, #196]	; (1d5dc <nrfx_gpiote_input_configure+0x150>)
   1d516:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   1d51a:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1d51e:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   1d522:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1d526:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   1d52a:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   1d52e:	bb45      	cbnz	r5, 1d582 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   1d530:	482b      	ldr	r0, [pc, #172]	; (1d5e0 <nrfx_gpiote_input_configure+0x154>)
}
   1d532:	b004      	add	sp, #16
   1d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1d538:	00b2      	lsls	r2, r6, #2
   1d53a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d53e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1d542:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   1d546:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1d54a:	f020 0003 	bic.w	r0, r0, #3
   1d54e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d552:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1d556:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1d55a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1d55e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d562:	0220      	lsls	r0, r4, #8
   1d564:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1d568:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1d56c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d570:	ea40 000e 	orr.w	r0, r0, lr
   1d574:	f041 0120 	orr.w	r1, r1, #32
   1d578:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   1d57c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1d580:	e7cd      	b.n	1d51e <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1d582:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1d586:	4620      	mov	r0, r4
   1d588:	f7ff ff38 	bl	1d3fc <release_handler>
    if (!handler)
   1d58c:	2e00      	cmp	r6, #0
   1d58e:	d0cf      	beq.n	1d530 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1d590:	4d10      	ldr	r5, [pc, #64]	; (1d5d4 <nrfx_gpiote_input_configure+0x148>)
   1d592:	e9d5 2300 	ldrd	r2, r3, [r5]
   1d596:	4296      	cmp	r6, r2
   1d598:	d101      	bne.n	1d59e <nrfx_gpiote_input_configure+0x112>
   1d59a:	429f      	cmp	r7, r3
   1d59c:	d018      	beq.n	1d5d0 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1d59e:	4811      	ldr	r0, [pc, #68]	; (1d5e4 <nrfx_gpiote_input_configure+0x158>)
   1d5a0:	f10d 010f 	add.w	r1, sp, #15
   1d5a4:	f7ff feb4 	bl	1d310 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1d5a8:	4b0d      	ldr	r3, [pc, #52]	; (1d5e0 <nrfx_gpiote_input_configure+0x154>)
   1d5aa:	4298      	cmp	r0, r3
   1d5ac:	d1c1      	bne.n	1d532 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1d5ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1d5b2:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1d5b6:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1d5ba:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1d5bc:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1d5be:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1d5c2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1d5c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1d5ca:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1d5ce:	e7af      	b.n	1d530 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1d5d0:	2200      	movs	r2, #0
   1d5d2:	e7ee      	b.n	1d5b2 <nrfx_gpiote_input_configure+0x126>
   1d5d4:	200006ac 	.word	0x200006ac
   1d5d8:	0bad0004 	.word	0x0bad0004
   1d5dc:	40006000 	.word	0x40006000
   1d5e0:	0bad0000 	.word	0x0bad0000
   1d5e4:	20000720 	.word	0x20000720

0001d5e8 <nrfx_gpiote_output_configure>:
{
   1d5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5ea:	4604      	mov	r4, r0
   1d5ec:	b085      	sub	sp, #20
   1d5ee:	4615      	mov	r5, r2
    if (p_config)
   1d5f0:	b319      	cbz	r1, 1d63a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1d5f2:	4e33      	ldr	r6, [pc, #204]	; (1d6c0 <nrfx_gpiote_output_configure+0xd8>)
   1d5f4:	f100 0708 	add.w	r7, r0, #8
   1d5f8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1d5fc:	0793      	lsls	r3, r2, #30
   1d5fe:	d403      	bmi.n	1d608 <nrfx_gpiote_output_configure+0x20>
   1d600:	f7ff fed4 	bl	1d3ac <pin_in_use_by_te>
   1d604:	2800      	cmp	r0, #0
   1d606:	d158      	bne.n	1d6ba <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1d608:	f012 0f1c 	tst.w	r2, #28
   1d60c:	d002      	beq.n	1d614 <nrfx_gpiote_output_configure+0x2c>
   1d60e:	784b      	ldrb	r3, [r1, #1]
   1d610:	2b01      	cmp	r3, #1
   1d612:	d052      	beq.n	1d6ba <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1d614:	2301      	movs	r3, #1
   1d616:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1d61a:	2300      	movs	r3, #0
   1d61c:	e9cd 1300 	strd	r1, r3, [sp]
   1d620:	1c4a      	adds	r2, r1, #1
   1d622:	1c8b      	adds	r3, r1, #2
   1d624:	4620      	mov	r0, r4
   1d626:	f10d 010f 	add.w	r1, sp, #15
   1d62a:	f009 f8af 	bl	2678c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1d62e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1d632:	f043 0303 	orr.w	r3, r3, #3
   1d636:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1d63a:	b915      	cbnz	r5, 1d642 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1d63c:	4821      	ldr	r0, [pc, #132]	; (1d6c4 <nrfx_gpiote_output_configure+0xdc>)
}
   1d63e:	b005      	add	sp, #20
   1d640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1d642:	4e1f      	ldr	r6, [pc, #124]	; (1d6c0 <nrfx_gpiote_output_configure+0xd8>)
   1d644:	f104 0708 	add.w	r7, r4, #8
   1d648:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1d64c:	0783      	lsls	r3, r0, #30
   1d64e:	d534      	bpl.n	1d6ba <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1d650:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1d654:	4661      	mov	r1, ip
   1d656:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1d658:	f020 0020 	bic.w	r0, r0, #32
   1d65c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1d660:	04c0      	lsls	r0, r0, #19
   1d662:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1d666:	0cc0      	lsrs	r0, r0, #19
   1d668:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1d66c:	2300      	movs	r3, #0
   1d66e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1d672:	786a      	ldrb	r2, [r5, #1]
   1d674:	2a00      	cmp	r2, #0
   1d676:	d0e1      	beq.n	1d63c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1d678:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1d67c:	78ad      	ldrb	r5, [r5, #2]
   1d67e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1d682:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1d686:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d68a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1d68e:	0223      	lsls	r3, r4, #8
   1d690:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1d694:	0412      	lsls	r2, r2, #16
   1d696:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d69a:	ea43 030e 	orr.w	r3, r3, lr
   1d69e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1d6a0:	052a      	lsls	r2, r5, #20
   1d6a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1d6a6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d6aa:	4313      	orrs	r3, r2
   1d6ac:	f040 0020 	orr.w	r0, r0, #32
   1d6b0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1d6b4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1d6b8:	e7c0      	b.n	1d63c <nrfx_gpiote_output_configure+0x54>
{
   1d6ba:	4803      	ldr	r0, [pc, #12]	; (1d6c8 <nrfx_gpiote_output_configure+0xe0>)
   1d6bc:	e7bf      	b.n	1d63e <nrfx_gpiote_output_configure+0x56>
   1d6be:	bf00      	nop
   1d6c0:	200006ac 	.word	0x200006ac
   1d6c4:	0bad0000 	.word	0x0bad0000
   1d6c8:	0bad0004 	.word	0x0bad0004

0001d6cc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1d6cc:	4b01      	ldr	r3, [pc, #4]	; (1d6d4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1d6ce:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1d6d2:	4770      	bx	lr
   1d6d4:	200006ac 	.word	0x200006ac

0001d6d8 <nrfx_gpiote_channel_get>:
{
   1d6d8:	b508      	push	{r3, lr}
   1d6da:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1d6dc:	f7ff fe66 	bl	1d3ac <pin_in_use_by_te>
   1d6e0:	b138      	cbz	r0, 1d6f2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d6e2:	4b05      	ldr	r3, [pc, #20]	; (1d6f8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1d6e4:	4805      	ldr	r0, [pc, #20]	; (1d6fc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d6e6:	3208      	adds	r2, #8
   1d6e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1d6ec:	0b5b      	lsrs	r3, r3, #13
   1d6ee:	700b      	strb	r3, [r1, #0]
}
   1d6f0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d6f2:	4803      	ldr	r0, [pc, #12]	; (1d700 <nrfx_gpiote_channel_get+0x28>)
   1d6f4:	e7fc      	b.n	1d6f0 <nrfx_gpiote_channel_get+0x18>
   1d6f6:	bf00      	nop
   1d6f8:	200006ac 	.word	0x200006ac
   1d6fc:	0bad0000 	.word	0x0bad0000
   1d700:	0bad0004 	.word	0x0bad0004

0001d704 <nrfx_gpiote_init>:
{
   1d704:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d706:	4c0f      	ldr	r4, [pc, #60]	; (1d744 <nrfx_gpiote_init+0x40>)
   1d708:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1d70c:	b9bd      	cbnz	r5, 1d73e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1d70e:	2260      	movs	r2, #96	; 0x60
   1d710:	4629      	mov	r1, r5
   1d712:	f104 0010 	add.w	r0, r4, #16
   1d716:	f009 fe5f 	bl	273d8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1d71a:	2006      	movs	r0, #6
   1d71c:	f7f7 fbaa 	bl	14e74 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d720:	4b09      	ldr	r3, [pc, #36]	; (1d748 <nrfx_gpiote_init+0x44>)
    return err_code;
   1d722:	480a      	ldr	r0, [pc, #40]	; (1d74c <nrfx_gpiote_init+0x48>)
   1d724:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1d728:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1d72c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d730:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d734:	2301      	movs	r3, #1
   1d736:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1d73a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1d73c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1d73e:	4804      	ldr	r0, [pc, #16]	; (1d750 <nrfx_gpiote_init+0x4c>)
   1d740:	e7fc      	b.n	1d73c <nrfx_gpiote_init+0x38>
   1d742:	bf00      	nop
   1d744:	200006ac 	.word	0x200006ac
   1d748:	40006000 	.word	0x40006000
   1d74c:	0bad0000 	.word	0x0bad0000
   1d750:	0bad0005 	.word	0x0bad0005

0001d754 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1d754:	4b03      	ldr	r3, [pc, #12]	; (1d764 <nrfx_gpiote_is_init+0x10>)
   1d756:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1d75a:	3800      	subs	r0, #0
   1d75c:	bf18      	it	ne
   1d75e:	2001      	movne	r0, #1
   1d760:	4770      	bx	lr
   1d762:	bf00      	nop
   1d764:	200006ac 	.word	0x200006ac

0001d768 <nrfx_gpiote_channel_free>:
{
   1d768:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1d76a:	4801      	ldr	r0, [pc, #4]	; (1d770 <nrfx_gpiote_channel_free+0x8>)
   1d76c:	f7ff bdf0 	b.w	1d350 <nrfx_flag32_free>
   1d770:	2000071c 	.word	0x2000071c

0001d774 <nrfx_gpiote_channel_alloc>:
{
   1d774:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1d776:	4801      	ldr	r0, [pc, #4]	; (1d77c <nrfx_gpiote_channel_alloc+0x8>)
   1d778:	f7ff bdca 	b.w	1d310 <nrfx_flag32_alloc>
   1d77c:	2000071c 	.word	0x2000071c

0001d780 <nrfx_gpiote_trigger_enable>:
{
   1d780:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d782:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d784:	f7ff fe12 	bl	1d3ac <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1d788:	f104 0208 	add.w	r2, r4, #8
   1d78c:	4b1e      	ldr	r3, [pc, #120]	; (1d808 <nrfx_gpiote_trigger_enable+0x88>)
   1d78e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d792:	b1e8      	cbz	r0, 1d7d0 <nrfx_gpiote_trigger_enable+0x50>
   1d794:	f013 0502 	ands.w	r5, r3, #2
   1d798:	d11a      	bne.n	1d7d0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d79a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1d79c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1d79e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1d7a2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1d7a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d7aa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d7ae:	6005      	str	r5, [r0, #0]
   1d7b0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d7b2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1d7b6:	f040 0001 	orr.w	r0, r0, #1
   1d7ba:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1d7be:	b129      	cbz	r1, 1d7cc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1d7c0:	2201      	movs	r2, #1
   1d7c2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1d7c6:	4a11      	ldr	r2, [pc, #68]	; (1d80c <nrfx_gpiote_trigger_enable+0x8c>)
   1d7c8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d7cc:	b003      	add	sp, #12
   1d7ce:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d7d0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1d7d4:	2b04      	cmp	r3, #4
   1d7d6:	d012      	beq.n	1d7fe <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1d7d8:	2b05      	cmp	r3, #5
   1d7da:	d012      	beq.n	1d802 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d7dc:	a801      	add	r0, sp, #4
   1d7de:	9401      	str	r4, [sp, #4]
   1d7e0:	f7ff fdd6 	bl	1d390 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1d7e4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1d7e6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1d7ea:	40d9      	lsrs	r1, r3
   1d7ec:	f001 0101 	and.w	r1, r1, #1
   1d7f0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1d7f2:	4620      	mov	r0, r4
}
   1d7f4:	b003      	add	sp, #12
   1d7f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1d7fa:	f009 b810 	b.w	2681e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1d7fe:	2103      	movs	r1, #3
   1d800:	e7f7      	b.n	1d7f2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1d802:	2102      	movs	r1, #2
   1d804:	e7f5      	b.n	1d7f2 <nrfx_gpiote_trigger_enable+0x72>
   1d806:	bf00      	nop
   1d808:	200006ac 	.word	0x200006ac
   1d80c:	40006000 	.word	0x40006000

0001d810 <nrfx_gpiote_trigger_disable>:
{
   1d810:	b508      	push	{r3, lr}
   1d812:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d814:	f7ff fdca 	bl	1d3ac <pin_in_use_by_te>
   1d818:	b1c0      	cbz	r0, 1d84c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1d81a:	f102 0108 	add.w	r1, r2, #8
   1d81e:	4b0e      	ldr	r3, [pc, #56]	; (1d858 <nrfx_gpiote_trigger_disable+0x48>)
   1d820:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d824:	0799      	lsls	r1, r3, #30
   1d826:	d411      	bmi.n	1d84c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d828:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1d82a:	2201      	movs	r2, #1
   1d82c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1d82e:	009b      	lsls	r3, r3, #2
   1d830:	490a      	ldr	r1, [pc, #40]	; (1d85c <nrfx_gpiote_trigger_disable+0x4c>)
   1d832:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d836:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d83a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1d83e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d842:	f022 0203 	bic.w	r2, r2, #3
   1d846:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1d84a:	bd08      	pop	{r3, pc}
   1d84c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d850:	2100      	movs	r1, #0
   1d852:	4610      	mov	r0, r2
   1d854:	f008 bfe3 	b.w	2681e <nrf_gpio_cfg_sense_set>
   1d858:	200006ac 	.word	0x200006ac
   1d85c:	40006000 	.word	0x40006000

0001d860 <nrfx_gpiote_pin_uninit>:
{
   1d860:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1d862:	4b0e      	ldr	r3, [pc, #56]	; (1d89c <nrfx_gpiote_pin_uninit+0x3c>)
   1d864:	f100 0208 	add.w	r2, r0, #8
{
   1d868:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1d86a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1d86e:	07db      	lsls	r3, r3, #31
   1d870:	d511      	bpl.n	1d896 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1d872:	f7ff ffcd 	bl	1d810 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1d876:	4620      	mov	r0, r4
   1d878:	f7ff fdec 	bl	1d454 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d87c:	a801      	add	r0, sp, #4
   1d87e:	9401      	str	r4, [sp, #4]
   1d880:	f7ff fd86 	bl	1d390 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1d884:	9b01      	ldr	r3, [sp, #4]
   1d886:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d88a:	2202      	movs	r2, #2
   1d88c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1d890:	4803      	ldr	r0, [pc, #12]	; (1d8a0 <nrfx_gpiote_pin_uninit+0x40>)
}
   1d892:	b002      	add	sp, #8
   1d894:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d896:	4803      	ldr	r0, [pc, #12]	; (1d8a4 <nrfx_gpiote_pin_uninit+0x44>)
   1d898:	e7fb      	b.n	1d892 <nrfx_gpiote_pin_uninit+0x32>
   1d89a:	bf00      	nop
   1d89c:	200006ac 	.word	0x200006ac
   1d8a0:	0bad0000 	.word	0x0bad0000
   1d8a4:	0bad0004 	.word	0x0bad0004

0001d8a8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8ac:	4b68      	ldr	r3, [pc, #416]	; (1da50 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   1d8ae:	4869      	ldr	r0, [pc, #420]	; (1da54 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d8b0:	4969      	ldr	r1, [pc, #420]	; (1da58 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   1d8b2:	2600      	movs	r6, #0
{
   1d8b4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1d8b6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d8b8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8ba:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1d8bc:	b135      	cbz	r5, 1d8cc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1d8be:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1d8c2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d8c4:	bf1e      	ittt	ne
   1d8c6:	601c      	strne	r4, [r3, #0]
   1d8c8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1d8ca:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d8cc:	3304      	adds	r3, #4
   1d8ce:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1d8d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d8d4:	d1f1      	bne.n	1d8ba <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8d6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1da54 <nrfx_gpiote_irq_handler+0x1ac>
   1d8da:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1d8de:	2b00      	cmp	r3, #0
   1d8e0:	f000 8099 	beq.w	1da16 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   1d8e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1d8e8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1d8ec:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1d8ee:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1d8f2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1d8f6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1d8f8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d8fc:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1d900:	f10d 0a10 	add.w	sl, sp, #16
   1d904:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1d908:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1d90a:	f04f 0b01 	mov.w	fp, #1
   1d90e:	e049      	b.n	1d9a4 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   1d910:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d912:	4a52      	ldr	r2, [pc, #328]	; (1da5c <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1d914:	fa94 f4a4 	rbit	r4, r4
   1d918:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1d91c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1d91e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d920:	f104 0308 	add.w	r3, r4, #8
   1d924:	9403      	str	r4, [sp, #12]
   1d926:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1d92a:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1d92e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1d932:	fa0b f202 	lsl.w	r2, fp, r2
   1d936:	ea23 0302 	bic.w	r3, r3, r2
   1d93a:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d93e:	a803      	add	r0, sp, #12
   1d940:	f7ff fd26 	bl	1d390 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d944:	9b03      	ldr	r3, [sp, #12]
   1d946:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d94a:	08b9      	lsrs	r1, r7, #2
   1d94c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1d950:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1d954:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d956:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1d958:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1d95c:	d52c      	bpl.n	1d9b8 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   1d95e:	4620      	mov	r0, r4
   1d960:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d962:	b2dd      	uxtb	r5, r3
   1d964:	f7ff fd2c 	bl	1d3c0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d968:	a803      	add	r0, sp, #12
   1d96a:	9403      	str	r4, [sp, #12]
   1d96c:	f7ff fd10 	bl	1d390 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d970:	9b03      	ldr	r3, [sp, #12]
   1d972:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d976:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1d97a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1d97e:	429d      	cmp	r5, r3
   1d980:	d107      	bne.n	1d992 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d982:	2100      	movs	r1, #0
   1d984:	4620      	mov	r0, r4
   1d986:	f008 ff4a 	bl	2681e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1d98a:	4629      	mov	r1, r5
   1d98c:	4620      	mov	r0, r4
   1d98e:	f008 ff46 	bl	2681e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d992:	a803      	add	r0, sp, #12
   1d994:	9403      	str	r4, [sp, #12]
   1d996:	f7ff fcfb 	bl	1d390 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1d99a:	9b03      	ldr	r3, [sp, #12]
   1d99c:	fa0b f303 	lsl.w	r3, fp, r3
   1d9a0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1d9a4:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1d9a8:	2c00      	cmp	r4, #0
   1d9aa:	d1b1      	bne.n	1d910 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d9ac:	f1b8 0f00 	cmp.w	r8, #0
   1d9b0:	d11d      	bne.n	1d9ee <nrfx_gpiote_irq_handler+0x146>
   1d9b2:	f04f 0801 	mov.w	r8, #1
   1d9b6:	e7a5      	b.n	1d904 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1d9b8:	2b02      	cmp	r3, #2
   1d9ba:	d10c      	bne.n	1d9d6 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d9bc:	2103      	movs	r1, #3
   1d9be:	4620      	mov	r0, r4
   1d9c0:	f008 ff2d 	bl	2681e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d9c4:	f005 0305 	and.w	r3, r5, #5
   1d9c8:	2b01      	cmp	r3, #1
   1d9ca:	d1e2      	bne.n	1d992 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1d9cc:	4639      	mov	r1, r7
   1d9ce:	4620      	mov	r0, r4
   1d9d0:	f7ff fcf6 	bl	1d3c0 <call_handler>
   1d9d4:	e7dd      	b.n	1d992 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d9d6:	2102      	movs	r1, #2
   1d9d8:	4620      	mov	r0, r4
   1d9da:	9301      	str	r3, [sp, #4]
   1d9dc:	f008 ff1f 	bl	2681e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d9e0:	2d03      	cmp	r5, #3
   1d9e2:	d0f3      	beq.n	1d9cc <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1d9e4:	9b01      	ldr	r3, [sp, #4]
   1d9e6:	2b03      	cmp	r3, #3
   1d9e8:	d1d3      	bne.n	1d992 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1d9ea:	2d02      	cmp	r5, #2
   1d9ec:	e7ed      	b.n	1d9ca <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1d9ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d9f2:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1d9f6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1d9fa:	4919      	ldr	r1, [pc, #100]	; (1da60 <nrfx_gpiote_irq_handler+0x1b8>)
   1d9fc:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1da00:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1da02:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1da06:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1da0a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1da0c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1da0e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1da12:	f47f af73 	bne.w	1d8fc <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1da16:	2401      	movs	r4, #1
    while (mask)
   1da18:	b916      	cbnz	r6, 1da20 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1da1a:	b007      	add	sp, #28
   1da1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1da20:	fa96 f3a6 	rbit	r3, r6
   1da24:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1da28:	fa04 f203 	lsl.w	r2, r4, r3
   1da2c:	009b      	lsls	r3, r3, #2
   1da2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1da32:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1da36:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1da3a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1da3e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1da42:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1da46:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1da4a:	f7ff fcb9 	bl	1d3c0 <call_handler>
   1da4e:	e7e3      	b.n	1da18 <nrfx_gpiote_irq_handler+0x170>
   1da50:	40006100 	.word	0x40006100
   1da54:	40006000 	.word	0x40006000
   1da58:	40006120 	.word	0x40006120
   1da5c:	200006ac 	.word	0x200006ac
   1da60:	50000300 	.word	0x50000300

0001da64 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1da64:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1da66:	4801      	ldr	r0, [pc, #4]	; (1da6c <nrfx_ppi_channel_alloc+0x8>)
   1da68:	f7ff bc52 	b.w	1d310 <nrfx_flag32_alloc>
   1da6c:	20000728 	.word	0x20000728

0001da70 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1da70:	4b11      	ldr	r3, [pc, #68]	; (1dab8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1da72:	4912      	ldr	r1, [pc, #72]	; (1dabc <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1da74:	2203      	movs	r2, #3
   1da76:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1da78:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1da7a:	4a11      	ldr	r2, [pc, #68]	; (1dac0 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1da7c:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1da7e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1da80:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1da84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1da86:	2200      	movs	r2, #0
   1da88:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1da8a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1da8c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1da8e:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1da90:	490c      	ldr	r1, [pc, #48]	; (1dac4 <_DoInit+0x54>)
   1da92:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1da94:	2110      	movs	r1, #16
   1da96:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1da98:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1da9a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1da9c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1da9e:	4a0a      	ldr	r2, [pc, #40]	; (1dac8 <_DoInit+0x58>)
   1daa0:	6812      	ldr	r2, [r2, #0]
   1daa2:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1daa6:	4a09      	ldr	r2, [pc, #36]	; (1dacc <_DoInit+0x5c>)
   1daa8:	6810      	ldr	r0, [r2, #0]
   1daaa:	8892      	ldrh	r2, [r2, #4]
   1daac:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1daae:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
   1dab0:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
   1dab2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1dab4:	4770      	bx	lr
   1dab6:	bf00      	nop
   1dab8:	200038c0 	.word	0x200038c0
   1dabc:	0002a974 	.word	0x0002a974
   1dac0:	2000464f 	.word	0x2000464f
   1dac4:	2000463f 	.word	0x2000463f
   1dac8:	0002a97d 	.word	0x0002a97d
   1dacc:	0002a981 	.word	0x0002a981

0001dad0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1dad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1dad4:	4f21      	ldr	r7, [pc, #132]	; (1db5c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1dad6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1dada:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1dadc:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1dae0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1dae2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1dae4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1dae6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1dae8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1daea:	d831      	bhi.n	1db50 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1daec:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1daf0:	ebaa 0905 	sub.w	r9, sl, r5
   1daf4:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1daf8:	4294      	cmp	r4, r2
   1dafa:	d811      	bhi.n	1db20 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1dafc:	2318      	movs	r3, #24
   1dafe:	fb06 3303 	mla	r3, r6, r3, r3
   1db02:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1db04:	4622      	mov	r2, r4
   1db06:	6858      	ldr	r0, [r3, #4]
   1db08:	4641      	mov	r1, r8
   1db0a:	4428      	add	r0, r5
   1db0c:	f009 fc56 	bl	273bc <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1db10:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1db12:	2318      	movs	r3, #24
   1db14:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1db18:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1db1a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1db1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1db20:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1db22:	429c      	cmp	r4, r3
   1db24:	d818      	bhi.n	1db58 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1db26:	fb00 bb0b 	mla	fp, r0, fp, fp
   1db2a:	44bb      	add	fp, r7
   1db2c:	464a      	mov	r2, r9
   1db2e:	f8db 0004 	ldr.w	r0, [fp, #4]
   1db32:	442c      	add	r4, r5
   1db34:	4428      	add	r0, r5
   1db36:	f009 fc41 	bl	273bc <memcpy>
      if (NumBytes) {
   1db3a:	ebb4 040a 	subs.w	r4, r4, sl
   1db3e:	d0e8      	beq.n	1db12 <SEGGER_RTT_WriteSkipNoLock+0x42>
   1db40:	f8db 0004 	ldr.w	r0, [fp, #4]
   1db44:	4622      	mov	r2, r4
   1db46:	eb08 0109 	add.w	r1, r8, r9
   1db4a:	f009 fc37 	bl	273bc <memcpy>
      return 1;
   1db4e:	e7e0      	b.n	1db12 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1db50:	3b01      	subs	r3, #1
   1db52:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1db54:	42a3      	cmp	r3, r4
   1db56:	d2d1      	bcs.n	1dafc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1db58:	2000      	movs	r0, #0
   1db5a:	e7df      	b.n	1db1c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1db5c:	200038c0 	.word	0x200038c0

0001db60 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1db60:	4b03      	ldr	r3, [pc, #12]	; (1db70 <SEGGER_RTT_HasDataUp+0x10>)
   1db62:	2218      	movs	r2, #24
   1db64:	fb02 3300 	mla	r3, r2, r0, r3
   1db68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1db6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1db6c:	1a80      	subs	r0, r0, r2
   1db6e:	4770      	bx	lr
   1db70:	200038c0 	.word	0x200038c0

0001db74 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1db74:	4803      	ldr	r0, [pc, #12]	; (1db84 <zephyr_rtt_mutex_lock+0x10>)
   1db76:	f04f 32ff 	mov.w	r2, #4294967295
   1db7a:	f04f 33ff 	mov.w	r3, #4294967295
   1db7e:	f000 ba9f 	b.w	1e0c0 <z_impl_k_mutex_lock>
   1db82:	bf00      	nop
   1db84:	20000c14 	.word	0x20000c14

0001db88 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1db88:	4801      	ldr	r0, [pc, #4]	; (1db90 <zephyr_rtt_mutex_unlock+0x8>)
   1db8a:	f000 bb13 	b.w	1e1b4 <z_impl_k_mutex_unlock>
   1db8e:	bf00      	nop
   1db90:	20000c14 	.word	0x20000c14

0001db94 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1db94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1db98:	b086      	sub	sp, #24
   1db9a:	4605      	mov	r5, r0
   1db9c:	af00      	add	r7, sp, #0
   1db9e:	460e      	mov	r6, r1
   1dba0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dba4:	f3ef 8811 	mrs	r8, BASEPRI
   1dba8:	f383 8812 	msr	BASEPRI_MAX, r3
   1dbac:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1dbb0:	f000 ffd4 	bl	1eb5c <z_impl_z_current_get>
   1dbb4:	2d04      	cmp	r5, #4
   1dbb6:	bf96      	itet	ls
   1dbb8:	4b2c      	ldrls	r3, [pc, #176]	; (1dc6c <z_fatal_error+0xd8>)
   1dbba:	4b2d      	ldrhi	r3, [pc, #180]	; (1dc70 <z_fatal_error+0xdc>)
   1dbbc:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1dbc0:	46e9      	mov	r9, sp
   1dbc2:	b08a      	sub	sp, #40	; 0x28
   1dbc4:	4604      	mov	r4, r0
   1dbc6:	466a      	mov	r2, sp
   1dbc8:	492a      	ldr	r1, [pc, #168]	; (1dc74 <z_fatal_error+0xe0>)
   1dbca:	61d3      	str	r3, [r2, #28]
   1dbcc:	f240 3301 	movw	r3, #769	; 0x301
   1dbd0:	8493      	strh	r3, [r2, #36]	; 0x24
   1dbd2:	f04f 0a00 	mov.w	sl, #0
   1dbd6:	4b28      	ldr	r3, [pc, #160]	; (1dc78 <z_fatal_error+0xe4>)
   1dbd8:	f8c2 a020 	str.w	sl, [r2, #32]
   1dbdc:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1dbe0:	f842 3f10 	str.w	r3, [r2, #16]!
   1dbe4:	4825      	ldr	r0, [pc, #148]	; (1dc7c <z_fatal_error+0xe8>)
   1dbe6:	4653      	mov	r3, sl
   1dbe8:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1dbec:	f7f6 fa18 	bl	14020 <z_impl_z_log_msg_static_create>
   1dbf0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1dbf2:	b17e      	cbz	r6, 1dc14 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1dbf4:	69f3      	ldr	r3, [r6, #28]
   1dbf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1dbfa:	b15b      	cbz	r3, 1dc14 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   1dbfc:	4b20      	ldr	r3, [pc, #128]	; (1dc80 <z_fatal_error+0xec>)
   1dbfe:	617b      	str	r3, [r7, #20]
   1dc00:	2302      	movs	r3, #2
   1dc02:	613b      	str	r3, [r7, #16]
   1dc04:	481d      	ldr	r0, [pc, #116]	; (1dc7c <z_fatal_error+0xe8>)
   1dc06:	4653      	mov	r3, sl
   1dc08:	f107 0210 	add.w	r2, r7, #16
   1dc0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dc10:	f7f6 fa06 	bl	14020 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1dc14:	b12c      	cbz	r4, 1dc22 <z_fatal_error+0x8e>
   1dc16:	4620      	mov	r0, r4
   1dc18:	f008 fef0 	bl	269fc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1dc1c:	b108      	cbz	r0, 1dc22 <z_fatal_error+0x8e>
   1dc1e:	7803      	ldrb	r3, [r0, #0]
   1dc20:	b903      	cbnz	r3, 1dc24 <z_fatal_error+0x90>
		thread_name = "unknown";
   1dc22:	4818      	ldr	r0, [pc, #96]	; (1dc84 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1dc24:	46e9      	mov	r9, sp
   1dc26:	b08a      	sub	sp, #40	; 0x28
   1dc28:	466a      	mov	r2, sp
   1dc2a:	4b17      	ldr	r3, [pc, #92]	; (1dc88 <z_fatal_error+0xf4>)
   1dc2c:	61d0      	str	r0, [r2, #28]
   1dc2e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1dc32:	f240 3301 	movw	r3, #769	; 0x301
   1dc36:	8413      	strh	r3, [r2, #32]
   1dc38:	4b14      	ldr	r3, [pc, #80]	; (1dc8c <z_fatal_error+0xf8>)
   1dc3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc3e:	2300      	movs	r3, #0
   1dc40:	480e      	ldr	r0, [pc, #56]	; (1dc7c <z_fatal_error+0xe8>)
   1dc42:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1dc46:	f7f6 f9eb 	bl	14020 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1dc4a:	4631      	mov	r1, r6
   1dc4c:	46cd      	mov	sp, r9
   1dc4e:	4628      	mov	r0, r5
   1dc50:	f7fe fa66 	bl	1c120 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1dc54:	f388 8811 	msr	BASEPRI, r8
   1dc58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1dc5c:	4620      	mov	r0, r4
   1dc5e:	f7f7 fe3f 	bl	158e0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1dc62:	3718      	adds	r7, #24
   1dc64:	46bd      	mov	sp, r7
   1dc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dc6a:	bf00      	nop
   1dc6c:	000288fc 	.word	0x000288fc
   1dc70:	0002a988 	.word	0x0002a988
   1dc74:	0002a99e 	.word	0x0002a99e
   1dc78:	01000005 	.word	0x01000005
   1dc7c:	0002804c 	.word	0x0002804c
   1dc80:	0002a9c6 	.word	0x0002a9c6
   1dc84:	0002a996 	.word	0x0002a996
   1dc88:	0002a9e7 	.word	0x0002a9e7
   1dc8c:	01000004 	.word	0x01000004

0001dc90 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dc90:	4b0f      	ldr	r3, [pc, #60]	; (1dcd0 <z_sys_init_run_level+0x40>)
{
   1dc92:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dc94:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1dc98:	3001      	adds	r0, #1
   1dc9a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1dc9e:	42a6      	cmp	r6, r4
   1dca0:	d800      	bhi.n	1dca4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1dca2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1dca4:	e9d4 3500 	ldrd	r3, r5, [r4]
   1dca8:	4628      	mov	r0, r5
   1dcaa:	4798      	blx	r3
		if (dev != NULL) {
   1dcac:	b16d      	cbz	r5, 1dcca <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1dcae:	b138      	cbz	r0, 1dcc0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1dcb0:	2800      	cmp	r0, #0
   1dcb2:	bfb8      	it	lt
   1dcb4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1dcb6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1dcb8:	28ff      	cmp	r0, #255	; 0xff
   1dcba:	bfa8      	it	ge
   1dcbc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1dcbe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1dcc0:	68ea      	ldr	r2, [r5, #12]
   1dcc2:	7853      	ldrb	r3, [r2, #1]
   1dcc4:	f043 0301 	orr.w	r3, r3, #1
   1dcc8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dcca:	3408      	adds	r4, #8
   1dccc:	e7e7      	b.n	1dc9e <z_sys_init_run_level+0xe>
   1dcce:	bf00      	nop
   1dcd0:	00028910 	.word	0x00028910

0001dcd4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1dcd4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1dcd6:	4b0a      	ldr	r3, [pc, #40]	; (1dd00 <bg_thread_main+0x2c>)
   1dcd8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1dcda:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1dcdc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1dcde:	f7ff ffd7 	bl	1dc90 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1dce2:	f001 fa67 	bl	1f1b4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1dce6:	2004      	movs	r0, #4
   1dce8:	f7ff ffd2 	bl	1dc90 <z_sys_init_run_level>

	z_init_static_threads();
   1dcec:	f000 f970 	bl	1dfd0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1dcf0:	f7f4 ff02 	bl	12af8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1dcf4:	4a03      	ldr	r2, [pc, #12]	; (1dd04 <bg_thread_main+0x30>)
   1dcf6:	7b13      	ldrb	r3, [r2, #12]
   1dcf8:	f023 0301 	bic.w	r3, r3, #1
   1dcfc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1dcfe:	bd08      	pop	{r3, pc}
   1dd00:	20004a4f 	.word	0x20004a4f
   1dd04:	20002e28 	.word	0x20002e28

0001dd08 <z_bss_zero>:
{
   1dd08:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1dd0a:	4803      	ldr	r0, [pc, #12]	; (1dd18 <z_bss_zero+0x10>)
   1dd0c:	4a03      	ldr	r2, [pc, #12]	; (1dd1c <z_bss_zero+0x14>)
   1dd0e:	2100      	movs	r1, #0
   1dd10:	1a12      	subs	r2, r2, r0
   1dd12:	f008 fda6 	bl	26862 <z_early_memset>
}
   1dd16:	bd08      	pop	{r3, pc}
   1dd18:	20000d90 	.word	0x20000d90
   1dd1c:	20004a50 	.word	0x20004a50

0001dd20 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1dd20:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1dd22:	4e16      	ldr	r6, [pc, #88]	; (1dd7c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1dd24:	4d16      	ldr	r5, [pc, #88]	; (1dd80 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1dd26:	4917      	ldr	r1, [pc, #92]	; (1dd84 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
   1dd28:	23c8      	movs	r3, #200	; 0xc8
{
   1dd2a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   1dd2c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1dd30:	2201      	movs	r2, #1
   1dd32:	2300      	movs	r3, #0
   1dd34:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dd38:	220f      	movs	r2, #15
   1dd3a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1dd3e:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1dd40:	231c      	movs	r3, #28
   1dd42:	fb03 5500 	mla	r5, r3, r0, r5
{
   1dd46:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1dd48:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1dd4c:	fb00 1104 	mla	r1, r0, r4, r1
   1dd50:	4b0d      	ldr	r3, [pc, #52]	; (1dd88 <z_init_cpu+0x68>)
   1dd52:	9500      	str	r5, [sp, #0]
   1dd54:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1dd58:	4630      	mov	r0, r6
   1dd5a:	f000 f8db 	bl	1df14 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1dd5e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1dd60:	4a0a      	ldr	r2, [pc, #40]	; (1dd8c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1dd62:	60ee      	str	r6, [r5, #12]
   1dd64:	f023 0304 	bic.w	r3, r3, #4
   1dd68:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1dd6a:	f44f 6308 	mov.w	r3, #2176	; 0x880
   1dd6e:	fb04 3303 	mla	r3, r4, r3, r3
   1dd72:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1dd74:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1dd76:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1dd78:	b006      	add	sp, #24
   1dd7a:	bd70      	pop	{r4, r5, r6, pc}
   1dd7c:	20002d60 	.word	0x20002d60
   1dd80:	20003968 	.word	0x20003968
   1dd84:	20007400 	.word	0x20007400
   1dd88:	0001e089 	.word	0x0001e089
   1dd8c:	20006b80 	.word	0x20006b80

0001dd90 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1dd90:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1dd92:	2000      	movs	r0, #0
{
   1dd94:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1dd96:	f7ff ff7b 	bl	1dc90 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1dd9a:	4b2e      	ldr	r3, [pc, #184]	; (1de54 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1dd9c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1dda0:	4d2d      	ldr	r5, [pc, #180]	; (1de58 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1dda2:	4e2e      	ldr	r6, [pc, #184]	; (1de5c <z_cstart+0xcc>)
   1dda4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1dda6:	4f2e      	ldr	r7, [pc, #184]	; (1de60 <z_cstart+0xd0>)
   1dda8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1ddac:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ddae:	23e0      	movs	r3, #224	; 0xe0
   1ddb0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ddb4:	2400      	movs	r4, #0
   1ddb6:	2320      	movs	r3, #32
   1ddb8:	77eb      	strb	r3, [r5, #31]
   1ddba:	762c      	strb	r4, [r5, #24]
   1ddbc:	766c      	strb	r4, [r5, #25]
   1ddbe:	76ac      	strb	r4, [r5, #26]
   1ddc0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ddc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ddc6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ddca:	626b      	str	r3, [r5, #36]	; 0x24
   1ddcc:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ddd0:	f7f7 fcfa 	bl	157c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ddd4:	f7f6 ff7e 	bl	14cd4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ddd8:	f04f 33ff 	mov.w	r3, #4294967295
   1dddc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ddde:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1dde0:	f7f7 fe54 	bl	15a8c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1dde4:	f7f7 fd92 	bl	1590c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1dde8:	f7f5 ffaa 	bl	13d40 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ddec:	f240 1301 	movw	r3, #257	; 0x101
   1ddf0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1ddf4:	ab06      	add	r3, sp, #24
   1ddf6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1ddf8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1ddfc:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1ddfe:	f008 fd24 	bl	2684a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1de02:	2001      	movs	r0, #1
   1de04:	f7ff ff44 	bl	1dc90 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1de08:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1de0a:	4d16      	ldr	r5, [pc, #88]	; (1de64 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1de0c:	f7ff ff40 	bl	1dc90 <z_sys_init_run_level>
	z_sched_init();
   1de10:	f000 fdfc 	bl	1ea0c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1de14:	4b14      	ldr	r3, [pc, #80]	; (1de68 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   1de16:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1de18:	9305      	str	r3, [sp, #20]
   1de1a:	2301      	movs	r3, #1
   1de1c:	4913      	ldr	r1, [pc, #76]	; (1de6c <z_cstart+0xdc>)
   1de1e:	9400      	str	r4, [sp, #0]
   1de20:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1de24:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1de28:	463b      	mov	r3, r7
   1de2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1de2e:	4628      	mov	r0, r5
   1de30:	f000 f870 	bl	1df14 <z_setup_new_thread>
   1de34:	7b6a      	ldrb	r2, [r5, #13]
   1de36:	4606      	mov	r6, r0
   1de38:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1de3c:	4628      	mov	r0, r5
   1de3e:	736a      	strb	r2, [r5, #13]
   1de40:	f009 f807 	bl	26e52 <z_ready_thread>
	z_init_cpu(0);
   1de44:	4620      	mov	r0, r4
   1de46:	f7ff ff6b 	bl	1dd20 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1de4a:	463a      	mov	r2, r7
   1de4c:	4631      	mov	r1, r6
   1de4e:	4628      	mov	r0, r5
   1de50:	f7f7 f990 	bl	15174 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1de54:	20007400 	.word	0x20007400
   1de58:	e000ed00 	.word	0xe000ed00
   1de5c:	20003968 	.word	0x20003968
   1de60:	0001dcd5 	.word	0x0001dcd5
   1de64:	20002e28 	.word	0x20002e28
   1de68:	0002aa49 	.word	0x0002aa49
   1de6c:	20007580 	.word	0x20007580

0001de70 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1de70:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1de72:	4c06      	ldr	r4, [pc, #24]	; (1de8c <statics_init+0x1c>)
   1de74:	4d06      	ldr	r5, [pc, #24]	; (1de90 <statics_init+0x20>)
   1de76:	42ac      	cmp	r4, r5
   1de78:	d301      	bcc.n	1de7e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1de7a:	2000      	movs	r0, #0
   1de7c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1de7e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1de82:	4620      	mov	r0, r4
   1de84:	f008 fcf1 	bl	2686a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1de88:	3414      	adds	r4, #20
   1de8a:	e7f4      	b.n	1de76 <statics_init+0x6>
   1de8c:	20000b88 	.word	0x20000b88
   1de90:	20000b88 	.word	0x20000b88

0001de94 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1de94:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1de96:	4c06      	ldr	r4, [pc, #24]	; (1deb0 <init_mem_slab_module+0x1c>)
   1de98:	4d06      	ldr	r5, [pc, #24]	; (1deb4 <init_mem_slab_module+0x20>)
	int rc = 0;
   1de9a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1de9c:	42ac      	cmp	r4, r5
   1de9e:	d300      	bcc.n	1dea2 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1dea0:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1dea2:	4620      	mov	r0, r4
   1dea4:	f008 fd54 	bl	26950 <create_free_list>
		if (rc < 0) {
   1dea8:	2800      	cmp	r0, #0
   1deaa:	dbf9      	blt.n	1dea0 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1deac:	341c      	adds	r4, #28
   1deae:	e7f5      	b.n	1de9c <init_mem_slab_module+0x8>
   1deb0:	20000b34 	.word	0x20000b34
   1deb4:	20000b88 	.word	0x20000b88

0001deb8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1deb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1deba:	460c      	mov	r4, r1
	__asm__ volatile(
   1debc:	f04f 0540 	mov.w	r5, #64	; 0x40
   1dec0:	f3ef 8111 	mrs	r1, BASEPRI
   1dec4:	f385 8812 	msr	BASEPRI_MAX, r5
   1dec8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1decc:	6945      	ldr	r5, [r0, #20]
   1dece:	b15d      	cbz	r5, 1dee8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1ded0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ded2:	682b      	ldr	r3, [r5, #0]
   1ded4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ded6:	6983      	ldr	r3, [r0, #24]
   1ded8:	3301      	adds	r3, #1
   1deda:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1dedc:	2000      	movs	r0, #0
	__asm__ volatile(
   1dede:	f381 8811 	msr	BASEPRI, r1
   1dee2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1dee6:	e011      	b.n	1df0c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1dee8:	ea52 0603 	orrs.w	r6, r2, r3
   1deec:	d103      	bne.n	1def6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1deee:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1def0:	f06f 000b 	mvn.w	r0, #11
   1def4:	e7f3      	b.n	1dede <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1def6:	e9cd 2300 	strd	r2, r3, [sp]
   1defa:	4602      	mov	r2, r0
   1defc:	3008      	adds	r0, #8
   1defe:	f000 fc8f 	bl	1e820 <z_pend_curr>
		if (result == 0) {
   1df02:	b918      	cbnz	r0, 1df0c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1df04:	4b02      	ldr	r3, [pc, #8]	; (1df10 <k_mem_slab_alloc+0x58>)
   1df06:	689b      	ldr	r3, [r3, #8]
   1df08:	695b      	ldr	r3, [r3, #20]
   1df0a:	6023      	str	r3, [r4, #0]
}
   1df0c:	b002      	add	sp, #8
   1df0e:	bd70      	pop	{r4, r5, r6, pc}
   1df10:	20003968 	.word	0x20003968

0001df14 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1df14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1df18:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1df1a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1df1c:	2604      	movs	r6, #4
   1df1e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1df20:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1df22:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1df24:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1df28:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1df2a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1df2c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1df30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1df32:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1df34:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1df38:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1df3a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1df3e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1df42:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1df44:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1df46:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1df48:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1df4c:	9202      	str	r2, [sp, #8]
   1df4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1df50:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1df52:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1df54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1df56:	9200      	str	r2, [sp, #0]
   1df58:	4642      	mov	r2, r8
{
   1df5a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1df5c:	f7f7 f886 	bl	1506c <arch_new_thread>
	if (!_current) {
   1df60:	4b04      	ldr	r3, [pc, #16]	; (1df74 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1df62:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1df64:	689b      	ldr	r3, [r3, #8]
   1df66:	b103      	cbz	r3, 1df6a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1df68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1df6a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1df6c:	4640      	mov	r0, r8
   1df6e:	b004      	add	sp, #16
   1df70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1df74:	20003968 	.word	0x20003968

0001df78 <z_impl_k_thread_create>:
{
   1df78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df7a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1df7c:	2500      	movs	r5, #0
   1df7e:	9505      	str	r5, [sp, #20]
   1df80:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1df82:	9504      	str	r5, [sp, #16]
   1df84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1df86:	9503      	str	r5, [sp, #12]
   1df88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1df8a:	9502      	str	r5, [sp, #8]
{
   1df8c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1df90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1df92:	9501      	str	r5, [sp, #4]
   1df94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1df96:	9500      	str	r5, [sp, #0]
{
   1df98:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1df9a:	f7ff ffbb 	bl	1df14 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1df9e:	f1b6 3fff 	cmp.w	r6, #4294967295
   1dfa2:	bf08      	it	eq
   1dfa4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1dfa8:	d005      	beq.n	1dfb6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1dfaa:	ea56 0307 	orrs.w	r3, r6, r7
   1dfae:	d105      	bne.n	1dfbc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1dfb0:	4620      	mov	r0, r4
   1dfb2:	f000 fcab 	bl	1e90c <z_sched_start>
}
   1dfb6:	4620      	mov	r0, r4
   1dfb8:	b007      	add	sp, #28
   1dfba:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1dfbc:	4903      	ldr	r1, [pc, #12]	; (1dfcc <z_impl_k_thread_create+0x54>)
   1dfbe:	463a      	mov	r2, r7
   1dfc0:	4633      	mov	r3, r6
   1dfc2:	f104 0018 	add.w	r0, r4, #24
   1dfc6:	f000 fea9 	bl	1ed1c <z_add_timeout>
   1dfca:	e7f4      	b.n	1dfb6 <z_impl_k_thread_create+0x3e>
   1dfcc:	00026dbf 	.word	0x00026dbf

0001dfd0 <z_init_static_threads>:
{
   1dfd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dfd4:	4c29      	ldr	r4, [pc, #164]	; (1e07c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1dfd6:	4d2a      	ldr	r5, [pc, #168]	; (1e080 <z_init_static_threads+0xb0>)
{
   1dfd8:	b087      	sub	sp, #28
   1dfda:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1dfdc:	42ae      	cmp	r6, r5
   1dfde:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1dfe2:	d30f      	bcc.n	1e004 <z_init_static_threads+0x34>
	k_sched_lock();
   1dfe4:	f000 fce2 	bl	1e9ac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1dfe8:	4c24      	ldr	r4, [pc, #144]	; (1e07c <z_init_static_threads+0xac>)
   1dfea:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1e084 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
   1dfee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1dff2:	f240 37e7 	movw	r7, #999	; 0x3e7
   1dff6:	42ac      	cmp	r4, r5
   1dff8:	d320      	bcc.n	1e03c <z_init_static_threads+0x6c>
}
   1dffa:	b007      	add	sp, #28
   1dffc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1e000:	f000 bce8 	b.w	1e9d4 <k_sched_unlock>
		z_setup_new_thread(
   1e004:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1e008:	9305      	str	r3, [sp, #20]
   1e00a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1e00e:	9304      	str	r3, [sp, #16]
   1e010:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1e014:	9303      	str	r3, [sp, #12]
   1e016:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1e01a:	9302      	str	r3, [sp, #8]
   1e01c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1e020:	9301      	str	r3, [sp, #4]
   1e022:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1e026:	9300      	str	r3, [sp, #0]
   1e028:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1e02c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1e030:	f7ff ff70 	bl	1df14 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1e034:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1e038:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1e03a:	e7ce      	b.n	1dfda <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1e03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e03e:	1c5a      	adds	r2, r3, #1
   1e040:	d00d      	beq.n	1e05e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1e042:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e046:	2100      	movs	r1, #0
   1e048:	4638      	mov	r0, r7
   1e04a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e04e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1e052:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e056:	d104      	bne.n	1e062 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1e058:	4640      	mov	r0, r8
   1e05a:	f000 fc57 	bl	1e90c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e05e:	3430      	adds	r4, #48	; 0x30
   1e060:	e7c9      	b.n	1dff6 <z_init_static_threads+0x26>
   1e062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e066:	2300      	movs	r3, #0
   1e068:	f7e2 fc68 	bl	93c <__aeabi_uldivmod>
   1e06c:	4602      	mov	r2, r0
   1e06e:	460b      	mov	r3, r1
   1e070:	f108 0018 	add.w	r0, r8, #24
   1e074:	4649      	mov	r1, r9
   1e076:	f000 fe51 	bl	1ed1c <z_add_timeout>
   1e07a:	e7f0      	b.n	1e05e <z_init_static_threads+0x8e>
   1e07c:	00027ed0 	.word	0x00027ed0
   1e080:	00027f00 	.word	0x00027f00
   1e084:	00026dbf 	.word	0x00026dbf

0001e088 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1e088:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1e08a:	4c0b      	ldr	r4, [pc, #44]	; (1e0b8 <idle+0x30>)
	return !z_sys_post_kernel;
   1e08c:	4d0b      	ldr	r5, [pc, #44]	; (1e0bc <idle+0x34>)
	__asm__ volatile(
   1e08e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e092:	f3ef 8311 	mrs	r3, BASEPRI
   1e096:	f382 8812 	msr	BASEPRI_MAX, r2
   1e09a:	f3bf 8f6f 	isb	sy
   1e09e:	f008 ff9e 	bl	26fde <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1e0a2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1e0a4:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1e0a6:	b913      	cbnz	r3, 1e0ae <idle+0x26>
	arch_cpu_idle();
   1e0a8:	f7f6 fe1a 	bl	14ce0 <arch_cpu_idle>
}
   1e0ac:	e7ef      	b.n	1e08e <idle+0x6>
   1e0ae:	f7f6 fbf9 	bl	148a4 <pm_system_suspend>
   1e0b2:	2800      	cmp	r0, #0
   1e0b4:	d1eb      	bne.n	1e08e <idle+0x6>
   1e0b6:	e7f7      	b.n	1e0a8 <idle+0x20>
   1e0b8:	20003968 	.word	0x20003968
   1e0bc:	20004a4f 	.word	0x20004a4f

0001e0c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1e0c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e0c4:	4604      	mov	r4, r0
   1e0c6:	4617      	mov	r7, r2
   1e0c8:	461e      	mov	r6, r3
   1e0ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e0ce:	f3ef 8811 	mrs	r8, BASEPRI
   1e0d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e0d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1e0da:	68c3      	ldr	r3, [r0, #12]
   1e0dc:	4a33      	ldr	r2, [pc, #204]	; (1e1ac <z_impl_k_mutex_lock+0xec>)
   1e0de:	b17b      	cbz	r3, 1e100 <z_impl_k_mutex_lock+0x40>
   1e0e0:	6880      	ldr	r0, [r0, #8]
   1e0e2:	6891      	ldr	r1, [r2, #8]
   1e0e4:	4288      	cmp	r0, r1
   1e0e6:	d019      	beq.n	1e11c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1e0e8:	ea57 0306 	orrs.w	r3, r7, r6
   1e0ec:	d118      	bne.n	1e120 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1e0ee:	f388 8811 	msr	BASEPRI, r8
   1e0f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1e0f6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1e0fa:	b002      	add	sp, #8
   1e0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1e100:	6891      	ldr	r1, [r2, #8]
   1e102:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1e106:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1e108:	3301      	adds	r3, #1
   1e10a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1e10c:	6893      	ldr	r3, [r2, #8]
   1e10e:	60a3      	str	r3, [r4, #8]
   1e110:	f388 8811 	msr	BASEPRI, r8
   1e114:	f3bf 8f6f 	isb	sy
		return 0;
   1e118:	2000      	movs	r0, #0
   1e11a:	e7ee      	b.n	1e0fa <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1e11c:	6921      	ldr	r1, [r4, #16]
   1e11e:	e7f2      	b.n	1e106 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1e120:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1e124:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1e128:	4299      	cmp	r1, r3
   1e12a:	bfa8      	it	ge
   1e12c:	4619      	movge	r1, r3
   1e12e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1e132:	4291      	cmp	r1, r2
   1e134:	bfb8      	it	lt
   1e136:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1e138:	428b      	cmp	r3, r1
   1e13a:	dd2e      	ble.n	1e19a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1e13c:	f008 fc69 	bl	26a12 <adjust_owner_prio.isra.0>
   1e140:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1e142:	e9cd 7600 	strd	r7, r6, [sp]
   1e146:	481a      	ldr	r0, [pc, #104]	; (1e1b0 <z_impl_k_mutex_lock+0xf0>)
   1e148:	4622      	mov	r2, r4
   1e14a:	4641      	mov	r1, r8
   1e14c:	f000 fb68 	bl	1e820 <z_pend_curr>
	if (got_mutex == 0) {
   1e150:	2800      	cmp	r0, #0
   1e152:	d0e1      	beq.n	1e118 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1e154:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e158:	f3ef 8611 	mrs	r6, BASEPRI
   1e15c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e160:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1e164:	68a0      	ldr	r0, [r4, #8]
   1e166:	b1d0      	cbz	r0, 1e19e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1e168:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1e16a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e16c:	429c      	cmp	r4, r3
   1e16e:	d00a      	beq.n	1e186 <z_impl_k_mutex_lock+0xc6>
   1e170:	b14b      	cbz	r3, 1e186 <z_impl_k_mutex_lock+0xc6>
   1e172:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e176:	4299      	cmp	r1, r3
   1e178:	bfa8      	it	ge
   1e17a:	4619      	movge	r1, r3
   1e17c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1e180:	4299      	cmp	r1, r3
   1e182:	bfb8      	it	lt
   1e184:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e186:	f008 fc44 	bl	26a12 <adjust_owner_prio.isra.0>
   1e18a:	b140      	cbz	r0, 1e19e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1e18c:	4808      	ldr	r0, [pc, #32]	; (1e1b0 <z_impl_k_mutex_lock+0xf0>)
   1e18e:	4631      	mov	r1, r6
   1e190:	f000 fbaa 	bl	1e8e8 <z_reschedule>
	return -EAGAIN;
   1e194:	f06f 000a 	mvn.w	r0, #10
   1e198:	e7af      	b.n	1e0fa <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1e19a:	2500      	movs	r5, #0
   1e19c:	e7d1      	b.n	1e142 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1e19e:	2d00      	cmp	r5, #0
   1e1a0:	d1f4      	bne.n	1e18c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1e1a2:	f386 8811 	msr	BASEPRI, r6
   1e1a6:	f3bf 8f6f 	isb	sy
   1e1aa:	e7f3      	b.n	1e194 <z_impl_k_mutex_lock+0xd4>
   1e1ac:	20003968 	.word	0x20003968
   1e1b0:	20004a50 	.word	0x20004a50

0001e1b4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1e1b4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1e1b6:	6883      	ldr	r3, [r0, #8]
{
   1e1b8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1e1ba:	b36b      	cbz	r3, 1e218 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1e1bc:	4a19      	ldr	r2, [pc, #100]	; (1e224 <z_impl_k_mutex_unlock+0x70>)
   1e1be:	6892      	ldr	r2, [r2, #8]
   1e1c0:	4293      	cmp	r3, r2
   1e1c2:	d12c      	bne.n	1e21e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1e1c4:	68c3      	ldr	r3, [r0, #12]
   1e1c6:	2b01      	cmp	r3, #1
   1e1c8:	d903      	bls.n	1e1d2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1e1ca:	3b01      	subs	r3, #1
   1e1cc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1e1ce:	2000      	movs	r0, #0
}
   1e1d0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e1d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1d6:	f3ef 8511 	mrs	r5, BASEPRI
   1e1da:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1e1e2:	6901      	ldr	r1, [r0, #16]
   1e1e4:	6880      	ldr	r0, [r0, #8]
   1e1e6:	f008 fc14 	bl	26a12 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1e1ea:	4620      	mov	r0, r4
   1e1ec:	f008 fe68 	bl	26ec0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1e1f0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1e1f2:	b158      	cbz	r0, 1e20c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1e1f4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1e1f8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e1fa:	2200      	movs	r2, #0
   1e1fc:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1e1fe:	f008 fe28 	bl	26e52 <z_ready_thread>
		z_reschedule(&lock, key);
   1e202:	4809      	ldr	r0, [pc, #36]	; (1e228 <z_impl_k_mutex_unlock+0x74>)
   1e204:	4629      	mov	r1, r5
   1e206:	f000 fb6f 	bl	1e8e8 <z_reschedule>
   1e20a:	e7e0      	b.n	1e1ce <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1e20c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1e20e:	f385 8811 	msr	BASEPRI, r5
   1e212:	f3bf 8f6f 	isb	sy
   1e216:	e7da      	b.n	1e1ce <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1e218:	f06f 0015 	mvn.w	r0, #21
   1e21c:	e7d8      	b.n	1e1d0 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1e21e:	f04f 30ff 	mov.w	r0, #4294967295
   1e222:	e7d5      	b.n	1e1d0 <z_impl_k_mutex_unlock+0x1c>
   1e224:	20003968 	.word	0x20003968
   1e228:	20004a50 	.word	0x20004a50

0001e22c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1e22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e22e:	4611      	mov	r1, r2
	__asm__ volatile(
   1e230:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e234:	f3ef 8511 	mrs	r5, BASEPRI
   1e238:	f382 8812 	msr	BASEPRI_MAX, r2
   1e23c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1e240:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e242:	b19c      	cbz	r4, 1e26c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e244:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e246:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e248:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e24c:	4294      	cmp	r4, r2
	list->head = node;
   1e24e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1e250:	bf08      	it	eq
   1e252:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e254:	2101      	movs	r1, #1
   1e256:	4620      	mov	r0, r4
   1e258:	f008 fc50 	bl	26afc <z_queue_node_peek>
   1e25c:	4604      	mov	r4, r0
	__asm__ volatile(
   1e25e:	f385 8811 	msr	BASEPRI, r5
   1e262:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1e266:	4620      	mov	r0, r4
   1e268:	b003      	add	sp, #12
   1e26a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e26c:	ea51 0203 	orrs.w	r2, r1, r3
   1e270:	d0f5      	beq.n	1e25e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e272:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1e276:	e9cd 1300 	strd	r1, r3, [sp]
   1e27a:	4610      	mov	r0, r2
   1e27c:	4629      	mov	r1, r5
   1e27e:	f000 facf 	bl	1e820 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1e282:	2800      	cmp	r0, #0
   1e284:	d1ef      	bne.n	1e266 <z_impl_k_queue_get+0x3a>
   1e286:	4b02      	ldr	r3, [pc, #8]	; (1e290 <z_impl_k_queue_get+0x64>)
   1e288:	689b      	ldr	r3, [r3, #8]
   1e28a:	695c      	ldr	r4, [r3, #20]
   1e28c:	e7eb      	b.n	1e266 <z_impl_k_queue_get+0x3a>
   1e28e:	bf00      	nop
   1e290:	20003968 	.word	0x20003968

0001e294 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1e294:	b538      	push	{r3, r4, r5, lr}
   1e296:	4604      	mov	r4, r0
	__asm__ volatile(
   1e298:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e29c:	f3ef 8511 	mrs	r5, BASEPRI
   1e2a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e2a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1e2a8:	f008 fe0a 	bl	26ec0 <z_unpend_first_thread>

	if (thread != NULL) {
   1e2ac:	b148      	cbz	r0, 1e2c2 <z_impl_k_sem_give+0x2e>
   1e2ae:	2200      	movs	r2, #0
   1e2b0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1e2b2:	f008 fdce 	bl	26e52 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1e2b6:	4629      	mov	r1, r5
   1e2b8:	4808      	ldr	r0, [pc, #32]	; (1e2dc <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1e2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1e2be:	f000 bb13 	b.w	1e8e8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1e2c2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1e2c6:	429a      	cmp	r2, r3
   1e2c8:	bf18      	it	ne
   1e2ca:	3301      	addne	r3, #1
   1e2cc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1e2ce:	2102      	movs	r1, #2
   1e2d0:	f104 0010 	add.w	r0, r4, #16
   1e2d4:	f009 f844 	bl	27360 <z_handle_obj_poll_events>
}
   1e2d8:	e7ed      	b.n	1e2b6 <z_impl_k_sem_give+0x22>
   1e2da:	bf00      	nop
   1e2dc:	20004a50 	.word	0x20004a50

0001e2e0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1e2e0:	b513      	push	{r0, r1, r4, lr}
   1e2e2:	f04f 0440 	mov.w	r4, #64	; 0x40
   1e2e6:	f3ef 8111 	mrs	r1, BASEPRI
   1e2ea:	f384 8812 	msr	BASEPRI_MAX, r4
   1e2ee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1e2f2:	6884      	ldr	r4, [r0, #8]
   1e2f4:	b144      	cbz	r4, 1e308 <z_impl_k_sem_take+0x28>
		sem->count--;
   1e2f6:	3c01      	subs	r4, #1
   1e2f8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1e2fa:	f381 8811 	msr	BASEPRI, r1
   1e2fe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1e302:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1e304:	b002      	add	sp, #8
   1e306:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e308:	ea52 0403 	orrs.w	r4, r2, r3
   1e30c:	d106      	bne.n	1e31c <z_impl_k_sem_take+0x3c>
   1e30e:	f381 8811 	msr	BASEPRI, r1
   1e312:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1e316:	f06f 000f 	mvn.w	r0, #15
   1e31a:	e7f3      	b.n	1e304 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1e31c:	e9cd 2300 	strd	r2, r3, [sp]
   1e320:	4602      	mov	r2, r0
   1e322:	4802      	ldr	r0, [pc, #8]	; (1e32c <z_impl_k_sem_take+0x4c>)
   1e324:	f000 fa7c 	bl	1e820 <z_pend_curr>
	return ret;
   1e328:	e7ec      	b.n	1e304 <z_impl_k_sem_take+0x24>
   1e32a:	bf00      	nop
   1e32c:	20004a50 	.word	0x20004a50

0001e330 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1e330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1e332:	4b09      	ldr	r3, [pc, #36]	; (1e358 <k_sys_work_q_init+0x28>)
   1e334:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1e336:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1e338:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1e33a:	9300      	str	r3, [sp, #0]
   1e33c:	4907      	ldr	r1, [pc, #28]	; (1e35c <k_sys_work_q_init+0x2c>)
   1e33e:	4808      	ldr	r0, [pc, #32]	; (1e360 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1e340:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1e344:	f04f 33ff 	mov.w	r3, #4294967295
   1e348:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1e34c:	f000 f888 	bl	1e460 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1e350:	4620      	mov	r0, r4
   1e352:	b004      	add	sp, #16
   1e354:	bd10      	pop	{r4, pc}
   1e356:	bf00      	nop
   1e358:	0002aa51 	.word	0x0002aa51
   1e35c:	20007e00 	.word	0x20007e00
   1e360:	20002ef0 	.word	0x20002ef0

0001e364 <cancel_sync_locked>:
{
   1e364:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1e366:	68c3      	ldr	r3, [r0, #12]
   1e368:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1e36c:	079b      	lsls	r3, r3, #30
{
   1e36e:	4605      	mov	r5, r0
   1e370:	460c      	mov	r4, r1
	if (ret) {
   1e372:	d50d      	bpl.n	1e390 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e374:	2201      	movs	r2, #1
   1e376:	2100      	movs	r1, #0
   1e378:	f104 0008 	add.w	r0, r4, #8
   1e37c:	f008 fbeb 	bl	26b56 <z_impl_k_sem_init>
	parent->next = child;
   1e380:	2300      	movs	r3, #0
   1e382:	6023      	str	r3, [r4, #0]
	return list->tail;
   1e384:	4b05      	ldr	r3, [pc, #20]	; (1e39c <cancel_sync_locked+0x38>)
	canceler->work = work;
   1e386:	6065      	str	r5, [r4, #4]
   1e388:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1e38a:	b91a      	cbnz	r2, 1e394 <cancel_sync_locked+0x30>
	list->head = node;
   1e38c:	e9c3 4400 	strd	r4, r4, [r3]
}
   1e390:	4630      	mov	r0, r6
   1e392:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1e394:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1e396:	605c      	str	r4, [r3, #4]
}
   1e398:	e7fa      	b.n	1e390 <cancel_sync_locked+0x2c>
   1e39a:	bf00      	nop
   1e39c:	20003998 	.word	0x20003998

0001e3a0 <submit_to_queue_locked>:
{
   1e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1e3a2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e3a4:	079a      	lsls	r2, r3, #30
{
   1e3a6:	4604      	mov	r4, r0
   1e3a8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e3aa:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1e3ae:	d42c      	bmi.n	1e40a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1e3b0:	075b      	lsls	r3, r3, #29
   1e3b2:	d41a      	bmi.n	1e3ea <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1e3b4:	680b      	ldr	r3, [r1, #0]
   1e3b6:	b90b      	cbnz	r3, 1e3bc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1e3b8:	6883      	ldr	r3, [r0, #8]
   1e3ba:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1e3bc:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1e3be:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1e3c0:	bf44      	itt	mi
   1e3c2:	68a3      	ldrmi	r3, [r4, #8]
   1e3c4:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1e3c6:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1e3c8:	bf4c      	ite	mi
   1e3ca:	2602      	movmi	r6, #2
		ret = 1;
   1e3cc:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1e3ce:	2d00      	cmp	r5, #0
   1e3d0:	d03a      	beq.n	1e448 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1e3d2:	4b1f      	ldr	r3, [pc, #124]	; (1e450 <submit_to_queue_locked+0xb0>)
   1e3d4:	689b      	ldr	r3, [r3, #8]
   1e3d6:	42ab      	cmp	r3, r5
   1e3d8:	d00a      	beq.n	1e3f0 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1e3da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1e3de:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1e3e0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1e3e4:	d414      	bmi.n	1e410 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1e3e6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1e3ea:	2300      	movs	r3, #0
   1e3ec:	603b      	str	r3, [r7, #0]
	return ret;
   1e3ee:	e025      	b.n	1e43c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1e3f0:	f008 fafb 	bl	269ea <k_is_in_isr>
   1e3f4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   1e3f8:	2800      	cmp	r0, #0
   1e3fa:	d1f0      	bne.n	1e3de <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1e3fc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1e3fe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1e402:	d5f0      	bpl.n	1e3e6 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1e404:	b152      	cbz	r2, 1e41c <submit_to_queue_locked+0x7c>
   1e406:	075b      	lsls	r3, r3, #29
   1e408:	d408      	bmi.n	1e41c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1e40a:	f06f 060f 	mvn.w	r6, #15
   1e40e:	e7ec      	b.n	1e3ea <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1e410:	2a00      	cmp	r2, #0
   1e412:	d1fa      	bne.n	1e40a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1e414:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1e418:	2b00      	cmp	r3, #0
   1e41a:	d1f6      	bne.n	1e40a <submit_to_queue_locked+0x6a>
	parent->next = child;
   1e41c:	2300      	movs	r3, #0
   1e41e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1e420:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   1e424:	b963      	cbnz	r3, 1e440 <submit_to_queue_locked+0xa0>
	list->head = node;
   1e426:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   1e42a:	4628      	mov	r0, r5
   1e42c:	f008 fbbc 	bl	26ba8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1e430:	68e3      	ldr	r3, [r4, #12]
   1e432:	f043 0304 	orr.w	r3, r3, #4
   1e436:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1e438:	683b      	ldr	r3, [r7, #0]
   1e43a:	60a3      	str	r3, [r4, #8]
}
   1e43c:	4630      	mov	r0, r6
   1e43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1e440:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e442:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   1e446:	e7f0      	b.n	1e42a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1e448:	f06f 0615 	mvn.w	r6, #21
   1e44c:	e7cd      	b.n	1e3ea <submit_to_queue_locked+0x4a>
   1e44e:	bf00      	nop
   1e450:	20003968 	.word	0x20003968

0001e454 <k_work_submit>:
{
   1e454:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1e456:	4801      	ldr	r0, [pc, #4]	; (1e45c <k_work_submit+0x8>)
   1e458:	f008 bc2c 	b.w	26cb4 <k_work_submit_to_queue>
   1e45c:	20002ef0 	.word	0x20002ef0

0001e460 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1e460:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e462:	b089      	sub	sp, #36	; 0x24
   1e464:	4604      	mov	r4, r0
	list->head = NULL;
   1e466:	2000      	movs	r0, #0
	list->tail = NULL;
   1e468:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   1e46c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e46e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   1e472:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   1e476:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1e47a:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1e47e:	b31d      	cbz	r5, 1e4c8 <k_work_queue_start+0x68>
   1e480:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1e482:	2800      	cmp	r0, #0
   1e484:	f240 1001 	movw	r0, #257	; 0x101
   1e488:	bf08      	it	eq
   1e48a:	2001      	moveq	r0, #1
	*flagp = flags;
   1e48c:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e490:	2000      	movs	r0, #0
   1e492:	f04f 36ff 	mov.w	r6, #4294967295
   1e496:	f04f 37ff 	mov.w	r7, #4294967295
   1e49a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1e49e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1e4a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1e4a6:	4b09      	ldr	r3, [pc, #36]	; (1e4cc <k_work_queue_start+0x6c>)
   1e4a8:	9400      	str	r4, [sp, #0]
   1e4aa:	4620      	mov	r0, r4
   1e4ac:	f7ff fd64 	bl	1df78 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1e4b0:	b125      	cbz	r5, 1e4bc <k_work_queue_start+0x5c>
   1e4b2:	6829      	ldr	r1, [r5, #0]
   1e4b4:	b111      	cbz	r1, 1e4bc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1e4b6:	4620      	mov	r0, r4
   1e4b8:	f008 fa9d 	bl	269f6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1e4bc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1e4be:	b009      	add	sp, #36	; 0x24
   1e4c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e4c4:	f008 ba9c 	b.w	26a00 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1e4c8:	2001      	movs	r0, #1
   1e4ca:	e7df      	b.n	1e48c <k_work_queue_start+0x2c>
   1e4cc:	00011d61 	.word	0x00011d61

0001e4d0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1e4d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e4d2:	9001      	str	r0, [sp, #4]
   1e4d4:	4608      	mov	r0, r1
	__asm__ volatile(
   1e4d6:	f04f 0140 	mov.w	r1, #64	; 0x40
   1e4da:	f3ef 8411 	mrs	r4, BASEPRI
   1e4de:	f381 8812 	msr	BASEPRI_MAX, r1
   1e4e2:	f3bf 8f6f 	isb	sy
	return *flagp;
   1e4e6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1e4e8:	f011 0f0e 	tst.w	r1, #14
   1e4ec:	d116      	bne.n	1e51c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e4ee:	ea53 0502 	orrs.w	r5, r3, r2
   1e4f2:	d108      	bne.n	1e506 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1e4f4:	a901      	add	r1, sp, #4
   1e4f6:	f7ff ff53 	bl	1e3a0 <submit_to_queue_locked>
	__asm__ volatile(
   1e4fa:	f384 8811 	msr	BASEPRI, r4
   1e4fe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1e502:	b003      	add	sp, #12
   1e504:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1e506:	f041 0108 	orr.w	r1, r1, #8
   1e50a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1e50c:	9901      	ldr	r1, [sp, #4]
   1e50e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1e510:	3010      	adds	r0, #16
   1e512:	4903      	ldr	r1, [pc, #12]	; (1e520 <k_work_schedule_for_queue+0x50>)
   1e514:	f000 fc02 	bl	1ed1c <z_add_timeout>
	return ret;
   1e518:	2001      	movs	r0, #1
   1e51a:	e7ee      	b.n	1e4fa <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1e51c:	2000      	movs	r0, #0
   1e51e:	e7ec      	b.n	1e4fa <k_work_schedule_for_queue+0x2a>
   1e520:	00026c1d 	.word	0x00026c1d

0001e524 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1e524:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1e526:	4801      	ldr	r0, [pc, #4]	; (1e52c <k_work_schedule+0x8>)
   1e528:	f7ff bfd2 	b.w	1e4d0 <k_work_schedule_for_queue>
   1e52c:	20002ef0 	.word	0x20002ef0

0001e530 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1e530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e532:	460c      	mov	r4, r1
   1e534:	9001      	str	r0, [sp, #4]
   1e536:	4616      	mov	r6, r2
   1e538:	461d      	mov	r5, r3
	__asm__ volatile(
   1e53a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e53e:	f3ef 8711 	mrs	r7, BASEPRI
   1e542:	f383 8812 	msr	BASEPRI_MAX, r3
   1e546:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1e54a:	4608      	mov	r0, r1
   1e54c:	f008 fb1e 	bl	26b8c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e550:	ea55 0306 	orrs.w	r3, r5, r6
   1e554:	d109      	bne.n	1e56a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1e556:	a901      	add	r1, sp, #4
   1e558:	4620      	mov	r0, r4
   1e55a:	f7ff ff21 	bl	1e3a0 <submit_to_queue_locked>
	__asm__ volatile(
   1e55e:	f387 8811 	msr	BASEPRI, r7
   1e562:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1e566:	b003      	add	sp, #12
   1e568:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1e56a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1e56c:	4906      	ldr	r1, [pc, #24]	; (1e588 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1e56e:	f043 0308 	orr.w	r3, r3, #8
   1e572:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1e574:	9b01      	ldr	r3, [sp, #4]
   1e576:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1e578:	f104 0010 	add.w	r0, r4, #16
   1e57c:	4632      	mov	r2, r6
   1e57e:	462b      	mov	r3, r5
   1e580:	f000 fbcc 	bl	1ed1c <z_add_timeout>
	return ret;
   1e584:	2001      	movs	r0, #1
   1e586:	e7ea      	b.n	1e55e <k_work_reschedule_for_queue+0x2e>
   1e588:	00026c1d 	.word	0x00026c1d

0001e58c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1e58c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1e58e:	4801      	ldr	r0, [pc, #4]	; (1e594 <k_work_reschedule+0x8>)
   1e590:	f7ff bfce 	b.w	1e530 <k_work_reschedule_for_queue>
   1e594:	20002ef0 	.word	0x20002ef0

0001e598 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1e598:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1e59a:	4d07      	ldr	r5, [pc, #28]	; (1e5b8 <z_reset_time_slice+0x20>)
   1e59c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1e59e:	b154      	cbz	r4, 1e5b6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1e5a0:	f7fd fc5c 	bl	1be5c <sys_clock_elapsed>
   1e5a4:	4b05      	ldr	r3, [pc, #20]	; (1e5bc <z_reset_time_slice+0x24>)
   1e5a6:	4404      	add	r4, r0
   1e5a8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1e5aa:	6828      	ldr	r0, [r5, #0]
   1e5ac:	2100      	movs	r1, #0
	}
}
   1e5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1e5b2:	f008 bd24 	b.w	26ffe <z_set_timeout_expiry>
}
   1e5b6:	bd38      	pop	{r3, r4, r5, pc}
   1e5b8:	200039a8 	.word	0x200039a8
   1e5bc:	20003968 	.word	0x20003968

0001e5c0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1e5c0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1e5c2:	4d0d      	ldr	r5, [pc, #52]	; (1e5f8 <update_cache+0x38>)
   1e5c4:	462b      	mov	r3, r5
   1e5c6:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e5ca:	429c      	cmp	r4, r3
   1e5cc:	d000      	beq.n	1e5d0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1e5ce:	b904      	cbnz	r4, 1e5d2 <update_cache+0x12>
   1e5d0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1e5d2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1e5d4:	b938      	cbnz	r0, 1e5e6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1e5d6:	7b5a      	ldrb	r2, [r3, #13]
   1e5d8:	06d2      	lsls	r2, r2, #27
   1e5da:	d104      	bne.n	1e5e6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1e5dc:	69a2      	ldr	r2, [r4, #24]
   1e5de:	b912      	cbnz	r2, 1e5e6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1e5e0:	89da      	ldrh	r2, [r3, #14]
   1e5e2:	2a7f      	cmp	r2, #127	; 0x7f
   1e5e4:	d805      	bhi.n	1e5f2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1e5e6:	429c      	cmp	r4, r3
   1e5e8:	d002      	beq.n	1e5f0 <update_cache+0x30>
			z_reset_time_slice(thread);
   1e5ea:	4620      	mov	r0, r4
   1e5ec:	f7ff ffd4 	bl	1e598 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1e5f0:	4623      	mov	r3, r4
   1e5f2:	622b      	str	r3, [r5, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1e5f4:	bd38      	pop	{r3, r4, r5, pc}
   1e5f6:	bf00      	nop
   1e5f8:	20003968 	.word	0x20003968

0001e5fc <move_thread_to_end_of_prio_q>:
{
   1e5fc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1e5fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1e602:	7b43      	ldrb	r3, [r0, #13]
   1e604:	2a00      	cmp	r2, #0
{
   1e606:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1e608:	da04      	bge.n	1e614 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e60e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1e610:	f008 fbba 	bl	26d88 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1e614:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1e616:	4a15      	ldr	r2, [pc, #84]	; (1e66c <move_thread_to_end_of_prio_q+0x70>)
   1e618:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e61c:	4610      	mov	r0, r2
   1e61e:	734b      	strb	r3, [r1, #13]
   1e620:	f850 3f24 	ldr.w	r3, [r0, #36]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1e624:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e626:	4283      	cmp	r3, r0
   1e628:	bf08      	it	eq
   1e62a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e62c:	b923      	cbnz	r3, 1e638 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1e62e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1e632:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1e634:	6291      	str	r1, [r2, #40]	; 0x28
}
   1e636:	e00c      	b.n	1e652 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1e638:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1e63c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1e640:	42b5      	cmp	r5, r6
   1e642:	d00e      	beq.n	1e662 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e644:	42ae      	cmp	r6, r5
   1e646:	dd0c      	ble.n	1e662 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1e648:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1e64a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1e64e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1e650:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1e652:	6890      	ldr	r0, [r2, #8]
   1e654:	1a43      	subs	r3, r0, r1
   1e656:	4258      	negs	r0, r3
}
   1e658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1e65c:	4158      	adcs	r0, r3
   1e65e:	f7ff bfaf 	b.w	1e5c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1e662:	429c      	cmp	r4, r3
   1e664:	d0e3      	beq.n	1e62e <move_thread_to_end_of_prio_q+0x32>
   1e666:	681b      	ldr	r3, [r3, #0]
   1e668:	e7e0      	b.n	1e62c <move_thread_to_end_of_prio_q+0x30>
   1e66a:	bf00      	nop
   1e66c:	20003968 	.word	0x20003968

0001e670 <ready_thread>:
{
   1e670:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1e672:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1e676:	7b42      	ldrb	r2, [r0, #13]
   1e678:	2b00      	cmp	r3, #0
   1e67a:	db29      	blt.n	1e6d0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e67c:	06d3      	lsls	r3, r2, #27
   1e67e:	d127      	bne.n	1e6d0 <ready_thread+0x60>
	return node->next != NULL;
   1e680:	6983      	ldr	r3, [r0, #24]
   1e682:	bb2b      	cbnz	r3, 1e6d0 <ready_thread+0x60>
	return list->head == list;
   1e684:	4913      	ldr	r1, [pc, #76]	; (1e6d4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1e686:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1e68a:	7342      	strb	r2, [r0, #13]
   1e68c:	460a      	mov	r2, r1
   1e68e:	f852 4f24 	ldr.w	r4, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e692:	4294      	cmp	r4, r2
   1e694:	bf18      	it	ne
   1e696:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1e698:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e69a:	b923      	cbnz	r3, 1e6a6 <ready_thread+0x36>
	node->prev = tail;
   1e69c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1e6a0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1e6a2:	6288      	str	r0, [r1, #40]	; 0x28
}
   1e6a4:	e00c      	b.n	1e6c0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1e6a6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1e6aa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1e6ae:	42b5      	cmp	r5, r6
   1e6b0:	d00a      	beq.n	1e6c8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e6b2:	42ae      	cmp	r6, r5
   1e6b4:	dd08      	ble.n	1e6c8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1e6b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e6b8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1e6bc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1e6be:	6058      	str	r0, [r3, #4]
}
   1e6c0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1e6c2:	2000      	movs	r0, #0
   1e6c4:	f7ff bf7c 	b.w	1e5c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1e6c8:	42a3      	cmp	r3, r4
   1e6ca:	d0e7      	beq.n	1e69c <ready_thread+0x2c>
   1e6cc:	681b      	ldr	r3, [r3, #0]
   1e6ce:	e7e4      	b.n	1e69a <ready_thread+0x2a>
}
   1e6d0:	bc70      	pop	{r4, r5, r6}
   1e6d2:	4770      	bx	lr
   1e6d4:	20003968 	.word	0x20003968

0001e6d8 <unready_thread>:
{
   1e6d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1e6da:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1e6de:	7b43      	ldrb	r3, [r0, #13]
   1e6e0:	2a00      	cmp	r2, #0
{
   1e6e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1e6e4:	da04      	bge.n	1e6f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e6ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e6ec:	f008 fb4c 	bl	26d88 <sys_dlist_remove>
	update_cache(thread == _current);
   1e6f0:	4b04      	ldr	r3, [pc, #16]	; (1e704 <unready_thread+0x2c>)
   1e6f2:	6898      	ldr	r0, [r3, #8]
   1e6f4:	1a43      	subs	r3, r0, r1
   1e6f6:	4258      	negs	r0, r3
   1e6f8:	4158      	adcs	r0, r3
}
   1e6fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1e6fe:	f7ff bf5f 	b.w	1e5c0 <update_cache>
   1e702:	bf00      	nop
   1e704:	20003968 	.word	0x20003968

0001e708 <pend_locked>:
{
   1e708:	b570      	push	{r4, r5, r6, lr}
   1e70a:	4615      	mov	r5, r2
   1e70c:	461c      	mov	r4, r3
   1e70e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1e710:	f008 fb77 	bl	26e02 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e714:	f1b4 3fff 	cmp.w	r4, #4294967295
   1e718:	bf08      	it	eq
   1e71a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1e71e:	d008      	beq.n	1e732 <pend_locked+0x2a>
   1e720:	462a      	mov	r2, r5
   1e722:	4623      	mov	r3, r4
   1e724:	f106 0018 	add.w	r0, r6, #24
   1e728:	4902      	ldr	r1, [pc, #8]	; (1e734 <pend_locked+0x2c>)
}
   1e72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e72e:	f000 baf5 	b.w	1ed1c <z_add_timeout>
   1e732:	bd70      	pop	{r4, r5, r6, pc}
   1e734:	00026dbf 	.word	0x00026dbf

0001e738 <k_sched_time_slice_set>:
{
   1e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e73a:	4604      	mov	r4, r0
   1e73c:	460d      	mov	r5, r1
	__asm__ volatile(
   1e73e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e742:	f3ef 8711 	mrs	r7, BASEPRI
   1e746:	f383 8812 	msr	BASEPRI_MAX, r3
   1e74a:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1e74e:	2600      	movs	r6, #0
   1e750:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1e754:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e758:	4631      	mov	r1, r6
   1e75a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e75e:	2300      	movs	r3, #0
   1e760:	fbe4 010c 	umlal	r0, r1, r4, ip
   1e764:	f7e2 f8ea 	bl	93c <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1e768:	42b4      	cmp	r4, r6
   1e76a:	dd02      	ble.n	1e772 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   1e76c:	2802      	cmp	r0, #2
   1e76e:	bfb8      	it	lt
   1e770:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1e772:	4a07      	ldr	r2, [pc, #28]	; (1e790 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   1e774:	4b07      	ldr	r3, [pc, #28]	; (1e794 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1e776:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1e778:	4a07      	ldr	r2, [pc, #28]	; (1e798 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1e77a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1e77c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1e77e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   1e780:	f7ff ff0a 	bl	1e598 <z_reset_time_slice>
	__asm__ volatile(
   1e784:	f387 8811 	msr	BASEPRI, r7
   1e788:	f3bf 8f6f 	isb	sy
}
   1e78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e78e:	bf00      	nop
   1e790:	200039a8 	.word	0x200039a8
   1e794:	20003968 	.word	0x20003968
   1e798:	200039a4 	.word	0x200039a4

0001e79c <z_time_slice>:
{
   1e79c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e79e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e7a2:	f3ef 8511 	mrs	r5, BASEPRI
   1e7a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1e7aa:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1e7ae:	4b17      	ldr	r3, [pc, #92]	; (1e80c <z_time_slice+0x70>)
   1e7b0:	4a17      	ldr	r2, [pc, #92]	; (1e810 <z_time_slice+0x74>)
   1e7b2:	689c      	ldr	r4, [r3, #8]
   1e7b4:	6811      	ldr	r1, [r2, #0]
   1e7b6:	428c      	cmp	r4, r1
   1e7b8:	d107      	bne.n	1e7ca <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1e7ba:	4620      	mov	r0, r4
   1e7bc:	f7ff feec 	bl	1e598 <z_reset_time_slice>
	__asm__ volatile(
   1e7c0:	f385 8811 	msr	BASEPRI, r5
   1e7c4:	f3bf 8f6f 	isb	sy
}
   1e7c8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1e7ca:	2100      	movs	r1, #0
   1e7cc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1e7ce:	4a11      	ldr	r2, [pc, #68]	; (1e814 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1e7d0:	6812      	ldr	r2, [r2, #0]
   1e7d2:	b1c2      	cbz	r2, 1e806 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1e7d4:	89e2      	ldrh	r2, [r4, #14]
   1e7d6:	2a7f      	cmp	r2, #127	; 0x7f
   1e7d8:	d815      	bhi.n	1e806 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1e7da:	7b62      	ldrb	r2, [r4, #13]
   1e7dc:	06d2      	lsls	r2, r2, #27
   1e7de:	d112      	bne.n	1e806 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1e7e0:	4a0d      	ldr	r2, [pc, #52]	; (1e818 <z_time_slice+0x7c>)
   1e7e2:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1e7e6:	6812      	ldr	r2, [r2, #0]
   1e7e8:	4291      	cmp	r1, r2
   1e7ea:	db0c      	blt.n	1e806 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1e7ec:	4a0b      	ldr	r2, [pc, #44]	; (1e81c <z_time_slice+0x80>)
   1e7ee:	4294      	cmp	r4, r2
   1e7f0:	d009      	beq.n	1e806 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1e7f2:	691a      	ldr	r2, [r3, #16]
   1e7f4:	4282      	cmp	r2, r0
   1e7f6:	dc03      	bgt.n	1e800 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1e7f8:	4620      	mov	r0, r4
   1e7fa:	f7ff feff 	bl	1e5fc <move_thread_to_end_of_prio_q>
   1e7fe:	e7dc      	b.n	1e7ba <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1e800:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1e802:	611a      	str	r2, [r3, #16]
   1e804:	e7dc      	b.n	1e7c0 <z_time_slice+0x24>
   1e806:	2200      	movs	r2, #0
   1e808:	e7fb      	b.n	1e802 <z_time_slice+0x66>
   1e80a:	bf00      	nop
   1e80c:	20003968 	.word	0x20003968
   1e810:	200039a0 	.word	0x200039a0
   1e814:	200039a8 	.word	0x200039a8
   1e818:	200039a4 	.word	0x200039a4
   1e81c:	20002d60 	.word	0x20002d60

0001e820 <z_pend_curr>:
{
   1e820:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1e822:	480c      	ldr	r0, [pc, #48]	; (1e854 <z_pend_curr+0x34>)
   1e824:	4d0c      	ldr	r5, [pc, #48]	; (1e858 <z_pend_curr+0x38>)
   1e826:	6886      	ldr	r6, [r0, #8]
   1e828:	602e      	str	r6, [r5, #0]
{
   1e82a:	460c      	mov	r4, r1
   1e82c:	4611      	mov	r1, r2
   1e82e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1e832:	f04f 0640 	mov.w	r6, #64	; 0x40
   1e836:	f3ef 8511 	mrs	r5, BASEPRI
   1e83a:	f386 8812 	msr	BASEPRI_MAX, r6
   1e83e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1e842:	6880      	ldr	r0, [r0, #8]
   1e844:	f7ff ff60 	bl	1e708 <pend_locked>
	ret = arch_swap(key);
   1e848:	4620      	mov	r0, r4
}
   1e84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e84e:	f7f6 bb9b 	b.w	14f88 <arch_swap>
   1e852:	bf00      	nop
   1e854:	20003968 	.word	0x20003968
   1e858:	200039a0 	.word	0x200039a0

0001e85c <z_set_prio>:
{
   1e85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e85e:	4604      	mov	r4, r0
   1e860:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e864:	f3ef 8611 	mrs	r6, BASEPRI
   1e868:	f383 8812 	msr	BASEPRI_MAX, r3
   1e86c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1e870:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e872:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1e874:	b249      	sxtb	r1, r1
   1e876:	d119      	bne.n	1e8ac <z_set_prio+0x50>
	return node->next != NULL;
   1e878:	6985      	ldr	r5, [r0, #24]
   1e87a:	b9bd      	cbnz	r5, 1e8ac <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e87c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e880:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e882:	f008 fa81 	bl	26d88 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1e886:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1e888:	4a16      	ldr	r2, [pc, #88]	; (1e8e4 <z_set_prio+0x88>)
				thread->base.prio = prio;
   1e88a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1e88c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e890:	7343      	strb	r3, [r0, #13]
   1e892:	4613      	mov	r3, r2
   1e894:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e898:	4298      	cmp	r0, r3
   1e89a:	bf18      	it	ne
   1e89c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1e89e:	6a90      	ldr	r0, [r2, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e8a0:	b95d      	cbnz	r5, 1e8ba <z_set_prio+0x5e>
	node->prev = tail;
   1e8a2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1e8a6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1e8a8:	6294      	str	r4, [r2, #40]	; 0x28
}
   1e8aa:	e011      	b.n	1e8d0 <z_set_prio+0x74>
			thread->base.prio = prio;
   1e8ac:	73a1      	strb	r1, [r4, #14]
   1e8ae:	2000      	movs	r0, #0
	__asm__ volatile(
   1e8b0:	f386 8811 	msr	BASEPRI, r6
   1e8b4:	f3bf 8f6f 	isb	sy
}
   1e8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1e8ba:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1e8be:	42b9      	cmp	r1, r7
   1e8c0:	d00b      	beq.n	1e8da <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e8c2:	428f      	cmp	r7, r1
   1e8c4:	dd09      	ble.n	1e8da <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1e8c6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1e8c8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1e8cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e8ce:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1e8d0:	2001      	movs	r0, #1
   1e8d2:	f7ff fe75 	bl	1e5c0 <update_cache>
   1e8d6:	2001      	movs	r0, #1
   1e8d8:	e7ea      	b.n	1e8b0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1e8da:	42a8      	cmp	r0, r5
   1e8dc:	d0e1      	beq.n	1e8a2 <z_set_prio+0x46>
   1e8de:	682d      	ldr	r5, [r5, #0]
   1e8e0:	e7de      	b.n	1e8a0 <z_set_prio+0x44>
   1e8e2:	bf00      	nop
   1e8e4:	20003968 	.word	0x20003968

0001e8e8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e8e8:	b949      	cbnz	r1, 1e8fe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e8ea:	f3ef 8005 	mrs	r0, IPSR
   1e8ee:	b930      	cbnz	r0, 1e8fe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1e8f0:	4b05      	ldr	r3, [pc, #20]	; (1e908 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1e8f2:	6a1a      	ldr	r2, [r3, #32]
   1e8f4:	689b      	ldr	r3, [r3, #8]
   1e8f6:	429a      	cmp	r2, r3
   1e8f8:	d001      	beq.n	1e8fe <z_reschedule+0x16>
   1e8fa:	f7f6 bb45 	b.w	14f88 <arch_swap>
   1e8fe:	f381 8811 	msr	BASEPRI, r1
   1e902:	f3bf 8f6f 	isb	sy
}
   1e906:	4770      	bx	lr
   1e908:	20003968 	.word	0x20003968

0001e90c <z_sched_start>:
{
   1e90c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e90e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e912:	f3ef 8411 	mrs	r4, BASEPRI
   1e916:	f382 8812 	msr	BASEPRI_MAX, r2
   1e91a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1e91e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1e920:	0751      	lsls	r1, r2, #29
   1e922:	d404      	bmi.n	1e92e <z_sched_start+0x22>
	__asm__ volatile(
   1e924:	f384 8811 	msr	BASEPRI, r4
   1e928:	f3bf 8f6f 	isb	sy
}
   1e92c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e92e:	f022 0204 	bic.w	r2, r2, #4
   1e932:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1e934:	f7ff fe9c 	bl	1e670 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1e938:	4621      	mov	r1, r4
   1e93a:	4802      	ldr	r0, [pc, #8]	; (1e944 <z_sched_start+0x38>)
}
   1e93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1e940:	f7ff bfd2 	b.w	1e8e8 <z_reschedule>
   1e944:	20004a50 	.word	0x20004a50

0001e948 <z_impl_k_thread_suspend>:
{
   1e948:	b570      	push	{r4, r5, r6, lr}
   1e94a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1e94c:	3018      	adds	r0, #24
   1e94e:	f008 fb30 	bl	26fb2 <z_abort_timeout>
	__asm__ volatile(
   1e952:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e956:	f3ef 8611 	mrs	r6, BASEPRI
   1e95a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e95e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1e962:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1e966:	7b63      	ldrb	r3, [r4, #13]
   1e968:	2a00      	cmp	r2, #0
   1e96a:	da05      	bge.n	1e978 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e970:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e972:	4620      	mov	r0, r4
   1e974:	f008 fa08 	bl	26d88 <sys_dlist_remove>
		update_cache(thread == _current);
   1e978:	4d0b      	ldr	r5, [pc, #44]	; (1e9a8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e97a:	7b63      	ldrb	r3, [r4, #13]
   1e97c:	68a8      	ldr	r0, [r5, #8]
   1e97e:	f043 0310 	orr.w	r3, r3, #16
   1e982:	7363      	strb	r3, [r4, #13]
   1e984:	1b03      	subs	r3, r0, r4
   1e986:	4258      	negs	r0, r3
   1e988:	4158      	adcs	r0, r3
   1e98a:	f7ff fe19 	bl	1e5c0 <update_cache>
	__asm__ volatile(
   1e98e:	f386 8811 	msr	BASEPRI, r6
   1e992:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1e996:	68ab      	ldr	r3, [r5, #8]
   1e998:	42a3      	cmp	r3, r4
   1e99a:	d103      	bne.n	1e9a4 <z_impl_k_thread_suspend+0x5c>
}
   1e99c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1e9a0:	f008 baca 	b.w	26f38 <z_reschedule_unlocked>
}
   1e9a4:	bd70      	pop	{r4, r5, r6, pc}
   1e9a6:	bf00      	nop
   1e9a8:	20003968 	.word	0x20003968

0001e9ac <k_sched_lock>:
	__asm__ volatile(
   1e9ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e9b0:	f3ef 8111 	mrs	r1, BASEPRI
   1e9b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9b8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1e9bc:	4b04      	ldr	r3, [pc, #16]	; (1e9d0 <k_sched_lock+0x24>)
   1e9be:	689a      	ldr	r2, [r3, #8]
   1e9c0:	7bd3      	ldrb	r3, [r2, #15]
   1e9c2:	3b01      	subs	r3, #1
   1e9c4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1e9c6:	f381 8811 	msr	BASEPRI, r1
   1e9ca:	f3bf 8f6f 	isb	sy
}
   1e9ce:	4770      	bx	lr
   1e9d0:	20003968 	.word	0x20003968

0001e9d4 <k_sched_unlock>:
{
   1e9d4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e9d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e9da:	f3ef 8411 	mrs	r4, BASEPRI
   1e9de:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9e2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1e9e6:	4b08      	ldr	r3, [pc, #32]	; (1ea08 <k_sched_unlock+0x34>)
   1e9e8:	689a      	ldr	r2, [r3, #8]
   1e9ea:	7bd3      	ldrb	r3, [r2, #15]
   1e9ec:	3301      	adds	r3, #1
   1e9ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1e9f0:	2000      	movs	r0, #0
   1e9f2:	f7ff fde5 	bl	1e5c0 <update_cache>
	__asm__ volatile(
   1e9f6:	f384 8811 	msr	BASEPRI, r4
   1e9fa:	f3bf 8f6f 	isb	sy
}
   1e9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1ea02:	f008 ba99 	b.w	26f38 <z_reschedule_unlocked>
   1ea06:	bf00      	nop
   1ea08:	20003968 	.word	0x20003968

0001ea0c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1ea0c:	4b04      	ldr	r3, [pc, #16]	; (1ea20 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ea0e:	2100      	movs	r1, #0
   1ea10:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   1ea14:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   1ea18:	4608      	mov	r0, r1
   1ea1a:	f7ff be8d 	b.w	1e738 <k_sched_time_slice_set>
   1ea1e:	bf00      	nop
   1ea20:	20003968 	.word	0x20003968

0001ea24 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1ea26:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea2a:	f3ef 8511 	mrs	r5, BASEPRI
   1ea2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea32:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1ea36:	4919      	ldr	r1, [pc, #100]	; (1ea9c <z_impl_k_yield+0x78>)
   1ea38:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ea3a:	7b43      	ldrb	r3, [r0, #13]
   1ea3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ea40:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ea42:	f008 f9a1 	bl	26d88 <sys_dlist_remove>
	}
	queue_thread(_current);
   1ea46:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1ea48:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1ea4a:	4608      	mov	r0, r1
   1ea4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ea50:	735a      	strb	r2, [r3, #13]
   1ea52:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
   1ea56:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ea58:	4282      	cmp	r2, r0
   1ea5a:	bf08      	it	eq
   1ea5c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ea5e:	b922      	cbnz	r2, 1ea6a <z_impl_k_yield+0x46>
	node->prev = tail;
   1ea60:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   1ea64:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1ea66:	628b      	str	r3, [r1, #40]	; 0x28
}
   1ea68:	e00c      	b.n	1ea84 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1ea6a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1ea6e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1ea72:	42be      	cmp	r6, r7
   1ea74:	d00e      	beq.n	1ea94 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ea76:	42b7      	cmp	r7, r6
   1ea78:	dd0c      	ble.n	1ea94 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1ea7a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1ea7c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1ea80:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1ea82:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1ea84:	2001      	movs	r0, #1
   1ea86:	f7ff fd9b 	bl	1e5c0 <update_cache>
   1ea8a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1ea8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ea90:	f7f6 ba7a 	b.w	14f88 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1ea94:	42a2      	cmp	r2, r4
   1ea96:	d0e3      	beq.n	1ea60 <z_impl_k_yield+0x3c>
   1ea98:	6812      	ldr	r2, [r2, #0]
   1ea9a:	e7e0      	b.n	1ea5e <z_impl_k_yield+0x3a>
   1ea9c:	20003968 	.word	0x20003968

0001eaa0 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1eaa0:	ea50 0301 	orrs.w	r3, r0, r1
{
   1eaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eaa8:	4605      	mov	r5, r0
   1eaaa:	460e      	mov	r6, r1
	if (ticks == 0) {
   1eaac:	d103      	bne.n	1eab6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1eaae:	f7ff ffb9 	bl	1ea24 <z_impl_k_yield>
		k_yield();
		return 0;
   1eab2:	2000      	movs	r0, #0
   1eab4:	e02c      	b.n	1eb10 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1eab6:	1c83      	adds	r3, r0, #2
   1eab8:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1eabc:	db2a      	blt.n	1eb14 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1eabe:	f008 faba 	bl	27036 <sys_clock_tick_get_32>
   1eac2:	182c      	adds	r4, r5, r0
   1eac4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eac8:	f3ef 8811 	mrs	r8, BASEPRI
   1eacc:	f383 8812 	msr	BASEPRI_MAX, r3
   1ead0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1ead4:	4f11      	ldr	r7, [pc, #68]	; (1eb1c <z_tick_sleep+0x7c>)
   1ead6:	4b12      	ldr	r3, [pc, #72]	; (1eb20 <z_tick_sleep+0x80>)
   1ead8:	68b8      	ldr	r0, [r7, #8]
   1eada:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1eadc:	f7ff fdfc 	bl	1e6d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1eae0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1eae2:	4910      	ldr	r1, [pc, #64]	; (1eb24 <z_tick_sleep+0x84>)
   1eae4:	462a      	mov	r2, r5
   1eae6:	4633      	mov	r3, r6
   1eae8:	3018      	adds	r0, #24
   1eaea:	f000 f917 	bl	1ed1c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1eaee:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1eaf0:	7b53      	ldrb	r3, [r2, #13]
   1eaf2:	f043 0310 	orr.w	r3, r3, #16
   1eaf6:	7353      	strb	r3, [r2, #13]
   1eaf8:	4640      	mov	r0, r8
   1eafa:	f7f6 fa45 	bl	14f88 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1eafe:	f008 fa9a 	bl	27036 <sys_clock_tick_get_32>
   1eb02:	1a20      	subs	r0, r4, r0
   1eb04:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1eb08:	2801      	cmp	r0, #1
   1eb0a:	f173 0300 	sbcs.w	r3, r3, #0
   1eb0e:	dbd0      	blt.n	1eab2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   1eb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1eb14:	f06f 0401 	mvn.w	r4, #1
   1eb18:	1a24      	subs	r4, r4, r0
   1eb1a:	e7d3      	b.n	1eac4 <z_tick_sleep+0x24>
   1eb1c:	20003968 	.word	0x20003968
   1eb20:	200039a0 	.word	0x200039a0
   1eb24:	00026dbf 	.word	0x00026dbf

0001eb28 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1eb28:	f1b1 3fff 	cmp.w	r1, #4294967295
   1eb2c:	bf08      	it	eq
   1eb2e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1eb32:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1eb34:	d106      	bne.n	1eb44 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1eb36:	4b08      	ldr	r3, [pc, #32]	; (1eb58 <z_impl_k_sleep+0x30>)
   1eb38:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1eb3a:	f7ff ff05 	bl	1e948 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1eb3e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1eb42:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1eb44:	f7ff ffac 	bl	1eaa0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1eb48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1eb4c:	fb80 0303 	smull	r0, r3, r0, r3
   1eb50:	0bc0      	lsrs	r0, r0, #15
   1eb52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1eb56:	e7f4      	b.n	1eb42 <z_impl_k_sleep+0x1a>
   1eb58:	20003968 	.word	0x20003968

0001eb5c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1eb5c:	4b01      	ldr	r3, [pc, #4]	; (1eb64 <z_impl_z_current_get+0x8>)
   1eb5e:	6898      	ldr	r0, [r3, #8]
   1eb60:	4770      	bx	lr
   1eb62:	bf00      	nop
   1eb64:	20003968 	.word	0x20003968

0001eb68 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1eb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb6c:	4604      	mov	r4, r0
   1eb6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eb72:	f3ef 8611 	mrs	r6, BASEPRI
   1eb76:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1eb7e:	7b03      	ldrb	r3, [r0, #12]
   1eb80:	07d9      	lsls	r1, r3, #31
   1eb82:	d50b      	bpl.n	1eb9c <z_thread_abort+0x34>
	__asm__ volatile(
   1eb84:	f386 8811 	msr	BASEPRI, r6
   1eb88:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1eb8c:	4040      	eors	r0, r0
   1eb8e:	f380 8811 	msr	BASEPRI, r0
   1eb92:	f04f 0004 	mov.w	r0, #4
   1eb96:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1eb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1eb9c:	7b43      	ldrb	r3, [r0, #13]
   1eb9e:	071a      	lsls	r2, r3, #28
   1eba0:	d504      	bpl.n	1ebac <z_thread_abort+0x44>
   1eba2:	f386 8811 	msr	BASEPRI, r6
   1eba6:	f3bf 8f6f 	isb	sy
   1ebaa:	e7f5      	b.n	1eb98 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ebac:	f023 0220 	bic.w	r2, r3, #32
   1ebb0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1ebb4:	09d2      	lsrs	r2, r2, #7
   1ebb6:	d120      	bne.n	1ebfa <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ebb8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1ebba:	68a3      	ldr	r3, [r4, #8]
   1ebbc:	b113      	cbz	r3, 1ebc4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1ebbe:	4620      	mov	r0, r4
   1ebc0:	f008 f8ea 	bl	26d98 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1ebc4:	f104 0018 	add.w	r0, r4, #24
   1ebc8:	f008 f9f3 	bl	26fb2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ebcc:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1ebd0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1ebd4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ebd6:	42bd      	cmp	r5, r7
   1ebd8:	d000      	beq.n	1ebdc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ebda:	b9b5      	cbnz	r5, 1ec0a <z_thread_abort+0xa2>
		update_cache(1);
   1ebdc:	2001      	movs	r0, #1
   1ebde:	f7ff fcef 	bl	1e5c0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1ebe2:	4b10      	ldr	r3, [pc, #64]	; (1ec24 <z_thread_abort+0xbc>)
   1ebe4:	689b      	ldr	r3, [r3, #8]
   1ebe6:	42a3      	cmp	r3, r4
   1ebe8:	d1db      	bne.n	1eba2 <z_thread_abort+0x3a>
   1ebea:	f3ef 8305 	mrs	r3, IPSR
   1ebee:	2b00      	cmp	r3, #0
   1ebf0:	d1d7      	bne.n	1eba2 <z_thread_abort+0x3a>
   1ebf2:	4630      	mov	r0, r6
   1ebf4:	f7f6 f9c8 	bl	14f88 <arch_swap>
	return ret;
   1ebf8:	e7d3      	b.n	1eba2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ebfa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1ebfe:	f043 0308 	orr.w	r3, r3, #8
   1ec02:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ec04:	f008 f8c0 	bl	26d88 <sys_dlist_remove>
}
   1ec08:	e7d7      	b.n	1ebba <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1ec0a:	4628      	mov	r0, r5
   1ec0c:	f008 f8c4 	bl	26d98 <unpend_thread_no_timeout>
   1ec10:	f105 0018 	add.w	r0, r5, #24
   1ec14:	f008 f9cd 	bl	26fb2 <z_abort_timeout>
   1ec18:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1ec1c:	4628      	mov	r0, r5
   1ec1e:	f7ff fd27 	bl	1e670 <ready_thread>
   1ec22:	e7d7      	b.n	1ebd4 <z_thread_abort+0x6c>
   1ec24:	20003968 	.word	0x20003968

0001ec28 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1ec28:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1ec2a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1ec2e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1ec30:	e9cd 6700 	strd	r6, r7, [sp]
   1ec34:	f7ff fdf4 	bl	1e820 <z_pend_curr>

	if (data != NULL) {
   1ec38:	b11c      	cbz	r4, 1ec42 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1ec3a:	4b03      	ldr	r3, [pc, #12]	; (1ec48 <z_sched_wait+0x20>)
   1ec3c:	689b      	ldr	r3, [r3, #8]
   1ec3e:	695b      	ldr	r3, [r3, #20]
   1ec40:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1ec42:	b002      	add	sp, #8
   1ec44:	bdd0      	pop	{r4, r6, r7, pc}
   1ec46:	bf00      	nop
   1ec48:	20003968 	.word	0x20003968

0001ec4c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1ec4c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1ec4e:	4806      	ldr	r0, [pc, #24]	; (1ec68 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1ec50:	4a06      	ldr	r2, [pc, #24]	; (1ec6c <z_data_copy+0x20>)
   1ec52:	4907      	ldr	r1, [pc, #28]	; (1ec70 <z_data_copy+0x24>)
   1ec54:	1a12      	subs	r2, r2, r0
   1ec56:	f007 fe06 	bl	26866 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ec5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1ec5e:	4a05      	ldr	r2, [pc, #20]	; (1ec74 <z_data_copy+0x28>)
   1ec60:	4905      	ldr	r1, [pc, #20]	; (1ec78 <z_data_copy+0x2c>)
   1ec62:	4806      	ldr	r0, [pc, #24]	; (1ec7c <z_data_copy+0x30>)
   1ec64:	f007 bdff 	b.w	26866 <z_early_memcpy>
   1ec68:	20000000 	.word	0x20000000
   1ec6c:	20000d8c 	.word	0x20000d8c
   1ec70:	0002ad28 	.word	0x0002ad28
   1ec74:	00000000 	.word	0x00000000
   1ec78:	0002ad28 	.word	0x0002ad28
   1ec7c:	20000000 	.word	0x20000000

0001ec80 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1ec80:	4b03      	ldr	r3, [pc, #12]	; (1ec90 <elapsed+0x10>)
   1ec82:	681b      	ldr	r3, [r3, #0]
   1ec84:	b90b      	cbnz	r3, 1ec8a <elapsed+0xa>
   1ec86:	f7fd b8e9 	b.w	1be5c <sys_clock_elapsed>
}
   1ec8a:	2000      	movs	r0, #0
   1ec8c:	4770      	bx	lr
   1ec8e:	bf00      	nop
   1ec90:	200039ac 	.word	0x200039ac

0001ec94 <next_timeout>:

static int32_t next_timeout(void)
{
   1ec94:	b510      	push	{r4, lr}
	return list->head == list;
   1ec96:	4b11      	ldr	r3, [pc, #68]	; (1ecdc <next_timeout+0x48>)
   1ec98:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ec9a:	429c      	cmp	r4, r3
   1ec9c:	d10a      	bne.n	1ecb4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1ec9e:	f7ff ffef 	bl	1ec80 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1eca2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1eca6:	4b0e      	ldr	r3, [pc, #56]	; (1ece0 <next_timeout+0x4c>)
   1eca8:	691b      	ldr	r3, [r3, #16]
   1ecaa:	b113      	cbz	r3, 1ecb2 <next_timeout+0x1e>
   1ecac:	4298      	cmp	r0, r3
   1ecae:	bfa8      	it	ge
   1ecb0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1ecb2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1ecb4:	f7ff ffe4 	bl	1ec80 <elapsed>
	if ((to == NULL) ||
   1ecb8:	2c00      	cmp	r4, #0
   1ecba:	d0f2      	beq.n	1eca2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1ecbc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1ecc0:	1a1b      	subs	r3, r3, r0
   1ecc2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1ecc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1ecca:	f172 0100 	sbcs.w	r1, r2, #0
   1ecce:	dae8      	bge.n	1eca2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1ecd0:	2a00      	cmp	r2, #0
   1ecd2:	bfac      	ite	ge
   1ecd4:	4618      	movge	r0, r3
   1ecd6:	2000      	movlt	r0, #0
   1ecd8:	e7e5      	b.n	1eca6 <next_timeout+0x12>
   1ecda:	bf00      	nop
   1ecdc:	2000072c 	.word	0x2000072c
   1ece0:	20003968 	.word	0x20003968

0001ece4 <remove_timeout>:
{
   1ece4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ece6:	b170      	cbz	r0, 1ed06 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1ece8:	4b0b      	ldr	r3, [pc, #44]	; (1ed18 <remove_timeout+0x34>)
   1ecea:	685b      	ldr	r3, [r3, #4]
   1ecec:	4298      	cmp	r0, r3
   1ecee:	d00a      	beq.n	1ed06 <remove_timeout+0x22>
   1ecf0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1ecf2:	b143      	cbz	r3, 1ed06 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1ecf4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1ecf8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ecfc:	1912      	adds	r2, r2, r4
   1ecfe:	eb41 0105 	adc.w	r1, r1, r5
   1ed02:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1ed06:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1ed0a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ed0c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ed0e:	2300      	movs	r3, #0
	node->prev = NULL;
   1ed10:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ed14:	bd30      	pop	{r4, r5, pc}
   1ed16:	bf00      	nop
   1ed18:	2000072c 	.word	0x2000072c

0001ed1c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ed1c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ed20:	bf08      	it	eq
   1ed22:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1ed26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed28:	4604      	mov	r4, r0
   1ed2a:	461d      	mov	r5, r3
   1ed2c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ed2e:	d061      	beq.n	1edf4 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1ed30:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1ed32:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ed36:	f3ef 8711 	mrs	r7, BASEPRI
   1ed3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed3e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1ed42:	3201      	adds	r2, #1
   1ed44:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1ed48:	da24      	bge.n	1ed94 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1ed4a:	4930      	ldr	r1, [pc, #192]	; (1ee0c <z_add_timeout+0xf0>)
   1ed4c:	e9d1 2000 	ldrd	r2, r0, [r1]
   1ed50:	f06f 0301 	mvn.w	r3, #1
   1ed54:	1a9b      	subs	r3, r3, r2
   1ed56:	f04f 32ff 	mov.w	r2, #4294967295
   1ed5a:	eb62 0000 	sbc.w	r0, r2, r0
   1ed5e:	1b9e      	subs	r6, r3, r6
   1ed60:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1ed64:	2e01      	cmp	r6, #1
   1ed66:	f170 0300 	sbcs.w	r3, r0, #0
   1ed6a:	da01      	bge.n	1ed70 <z_add_timeout+0x54>
   1ed6c:	2601      	movs	r6, #1
   1ed6e:	2000      	movs	r0, #0
   1ed70:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1ed74:	4e26      	ldr	r6, [pc, #152]	; (1ee10 <z_add_timeout+0xf4>)
   1ed76:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1ed7a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ed7c:	45b4      	cmp	ip, r6
   1ed7e:	bf08      	it	eq
   1ed80:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1ed84:	f1bc 0f00 	cmp.w	ip, #0
   1ed88:	d10d      	bne.n	1eda6 <z_add_timeout+0x8a>
	node->prev = tail;
   1ed8a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   1ed8e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1ed90:	6074      	str	r4, [r6, #4]
}
   1ed92:	e01c      	b.n	1edce <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1ed94:	f7ff ff74 	bl	1ec80 <elapsed>
   1ed98:	3601      	adds	r6, #1
   1ed9a:	f145 0500 	adc.w	r5, r5, #0
   1ed9e:	1836      	adds	r6, r6, r0
   1eda0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1eda4:	e7e4      	b.n	1ed70 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1eda6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1edaa:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1edae:	4293      	cmp	r3, r2
   1edb0:	eb71 0e00 	sbcs.w	lr, r1, r0
   1edb4:	da1f      	bge.n	1edf6 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   1edb6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1edb8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1edbc:	eb60 0001 	sbc.w	r0, r0, r1
   1edc0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   1edc4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1edc8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1edca:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   1edce:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1edd0:	42b3      	cmp	r3, r6
   1edd2:	d00b      	beq.n	1edec <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1edd4:	429c      	cmp	r4, r3
   1edd6:	d109      	bne.n	1edec <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1edd8:	f7ff ff5c 	bl	1ec94 <next_timeout>

			if (next_time == 0 ||
   1eddc:	b118      	cbz	r0, 1ede6 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   1edde:	4b0d      	ldr	r3, [pc, #52]	; (1ee14 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   1ede0:	691b      	ldr	r3, [r3, #16]
   1ede2:	4283      	cmp	r3, r0
   1ede4:	d002      	beq.n	1edec <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   1ede6:	2100      	movs	r1, #0
   1ede8:	f7fd f806 	bl	1bdf8 <sys_clock_set_timeout>
	__asm__ volatile(
   1edec:	f387 8811 	msr	BASEPRI, r7
   1edf0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1edf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   1edf6:	1a9b      	subs	r3, r3, r2
   1edf8:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1edfc:	45ac      	cmp	ip, r5
   1edfe:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1ee02:	d0c2      	beq.n	1ed8a <z_add_timeout+0x6e>
   1ee04:	f8dc c000 	ldr.w	ip, [ip]
   1ee08:	e7bc      	b.n	1ed84 <z_add_timeout+0x68>
   1ee0a:	bf00      	nop
   1ee0c:	20002fd8 	.word	0x20002fd8
   1ee10:	2000072c 	.word	0x2000072c
   1ee14:	20003968 	.word	0x20003968

0001ee18 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1ee18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ee1c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1ee1e:	f7ff fcbd 	bl	1e79c <z_time_slice>
	__asm__ volatile(
   1ee22:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ee26:	f3ef 8611 	mrs	r6, BASEPRI
   1ee2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee2e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1ee32:	4f23      	ldr	r7, [pc, #140]	; (1eec0 <sys_clock_announce+0xa8>)
	return list->head == list;
   1ee34:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1eec8 <sys_clock_announce+0xb0>
   1ee38:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1ee3c:	4a21      	ldr	r2, [pc, #132]	; (1eec4 <sys_clock_announce+0xac>)
	announce_remaining = ticks;
   1ee3e:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ee40:	4540      	cmp	r0, r8
		curr_tick += dt;
   1ee42:	e9d2 3e00 	ldrd	r3, lr, [r2]
   1ee46:	ea4f 71e4 	mov.w	r1, r4, asr #31
   1ee4a:	d00b      	beq.n	1ee64 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ee4c:	b150      	cbz	r0, 1ee64 <sys_clock_announce+0x4c>
   1ee4e:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   1ee52:	42ac      	cmp	r4, r5
   1ee54:	eb71 090c 	sbcs.w	r9, r1, ip
   1ee58:	da16      	bge.n	1ee88 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1ee5a:	1b2d      	subs	r5, r5, r4
   1ee5c:	eb6c 0c01 	sbc.w	ip, ip, r1
   1ee60:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1ee64:	18e3      	adds	r3, r4, r3
   1ee66:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   1ee6a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1ee6c:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1ee70:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1ee72:	f7ff ff0f 	bl	1ec94 <next_timeout>
   1ee76:	4621      	mov	r1, r4
   1ee78:	f7fc ffbe 	bl	1bdf8 <sys_clock_set_timeout>
	__asm__ volatile(
   1ee7c:	f386 8811 	msr	BASEPRI, r6
   1ee80:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ee84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1ee88:	18eb      	adds	r3, r5, r3
   1ee8a:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   1ee8e:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1ee92:	2200      	movs	r2, #0
   1ee94:	2300      	movs	r3, #0
   1ee96:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1ee9a:	f7ff ff23 	bl	1ece4 <remove_timeout>
   1ee9e:	f386 8811 	msr	BASEPRI, r6
   1eea2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1eea6:	6883      	ldr	r3, [r0, #8]
   1eea8:	4798      	blx	r3
	__asm__ volatile(
   1eeaa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eeae:	f3ef 8611 	mrs	r6, BASEPRI
   1eeb2:	f383 8812 	msr	BASEPRI_MAX, r3
   1eeb6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1eeba:	683c      	ldr	r4, [r7, #0]
   1eebc:	1b64      	subs	r4, r4, r5
   1eebe:	e7bb      	b.n	1ee38 <sys_clock_announce+0x20>
   1eec0:	200039ac 	.word	0x200039ac
   1eec4:	20002fd8 	.word	0x20002fd8
   1eec8:	2000072c 	.word	0x2000072c

0001eecc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1eecc:	b510      	push	{r4, lr}
   1eece:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eed2:	f3ef 8411 	mrs	r4, BASEPRI
   1eed6:	f383 8812 	msr	BASEPRI_MAX, r3
   1eeda:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1eede:	f7ff fecf 	bl	1ec80 <elapsed>
   1eee2:	4a06      	ldr	r2, [pc, #24]	; (1eefc <sys_clock_tick_get+0x30>)
   1eee4:	4603      	mov	r3, r0
   1eee6:	e9d2 0100 	ldrd	r0, r1, [r2]
   1eeea:	1818      	adds	r0, r3, r0
   1eeec:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   1eef0:	f384 8811 	msr	BASEPRI, r4
   1eef4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1eef8:	bd10      	pop	{r4, pc}
   1eefa:	bf00      	nop
   1eefc:	20002fd8 	.word	0x20002fd8

0001ef00 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1ef00:	b570      	push	{r4, r5, r6, lr}
   1ef02:	4604      	mov	r4, r0
	__asm__ volatile(
   1ef04:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef08:	f3ef 8511 	mrs	r5, BASEPRI
   1ef0c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef10:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1ef14:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1ef18:	3301      	adds	r3, #1
   1ef1a:	f142 0200 	adc.w	r2, r2, #0
   1ef1e:	2b02      	cmp	r3, #2
   1ef20:	f172 0200 	sbcs.w	r2, r2, #0
   1ef24:	d322      	bcc.n	1ef6c <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   1ef26:	f008 f88a 	bl	2703e <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1ef2a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1ef2e:	3001      	adds	r0, #1
   1ef30:	f141 0100 	adc.w	r1, r1, #0
   1ef34:	18c0      	adds	r0, r0, r3
   1ef36:	eb41 0102 	adc.w	r1, r1, r2
   1ef3a:	2801      	cmp	r0, #1
   1ef3c:	f171 0100 	sbcs.w	r1, r1, #0
   1ef40:	db32      	blt.n	1efa8 <z_timer_expiration_handler+0xa8>
   1ef42:	f008 f87c 	bl	2703e <z_impl_k_uptime_ticks>
   1ef46:	3001      	adds	r0, #1
   1ef48:	f141 0300 	adc.w	r3, r1, #0
   1ef4c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   1ef50:	1880      	adds	r0, r0, r2
   1ef52:	f06f 0201 	mvn.w	r2, #1
   1ef56:	eb43 0301 	adc.w	r3, r3, r1
   1ef5a:	1a12      	subs	r2, r2, r0
   1ef5c:	f04f 31ff 	mov.w	r1, #4294967295
   1ef60:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ef64:	491a      	ldr	r1, [pc, #104]	; (1efd0 <z_timer_expiration_handler+0xd0>)
   1ef66:	4620      	mov	r0, r4
   1ef68:	f7ff fed8 	bl	1ed1c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1ef6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ef6e:	3301      	adds	r3, #1
   1ef70:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1ef72:	6a23      	ldr	r3, [r4, #32]
   1ef74:	b173      	cbz	r3, 1ef94 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   1ef76:	f385 8811 	msr	BASEPRI, r5
   1ef7a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1ef7e:	6a23      	ldr	r3, [r4, #32]
   1ef80:	4620      	mov	r0, r4
   1ef82:	4798      	blx	r3
	__asm__ volatile(
   1ef84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef88:	f3ef 8511 	mrs	r5, BASEPRI
   1ef8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef90:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1ef94:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef98:	42a6      	cmp	r6, r4
   1ef9a:	d000      	beq.n	1ef9e <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1ef9c:	b94e      	cbnz	r6, 1efb2 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   1ef9e:	f385 8811 	msr	BASEPRI, r5
   1efa2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1efa6:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1efa8:	f06f 0201 	mvn.w	r2, #1
   1efac:	f04f 33ff 	mov.w	r3, #4294967295
   1efb0:	e7d8      	b.n	1ef64 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   1efb2:	4630      	mov	r0, r6
   1efb4:	f007 ff5d 	bl	26e72 <z_unpend_thread_no_timeout>
   1efb8:	2300      	movs	r3, #0
   1efba:	67f3      	str	r3, [r6, #124]	; 0x7c
   1efbc:	f385 8811 	msr	BASEPRI, r5
   1efc0:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1efc4:	4630      	mov	r0, r6
}
   1efc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1efca:	f007 bf42 	b.w	26e52 <z_ready_thread>
   1efce:	bf00      	nop
   1efd0:	0001ef01 	.word	0x0001ef01

0001efd4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1efd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1efd8:	f1b3 3fff 	cmp.w	r3, #4294967295
   1efdc:	bf08      	it	eq
   1efde:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1efe2:	4605      	mov	r5, r0
   1efe4:	4614      	mov	r4, r2
   1efe6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   1efea:	4619      	mov	r1, r3
   1efec:	4691      	mov	r9, r2
   1efee:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1eff0:	d037      	beq.n	1f062 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1eff2:	f1b0 3fff 	cmp.w	r0, #4294967295
   1eff6:	bf08      	it	eq
   1eff8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1effc:	4637      	mov	r7, r6
   1effe:	4682      	mov	sl, r0
   1f000:	d011      	beq.n	1f026 <z_impl_k_timer_start+0x52>
   1f002:	ea50 0306 	orrs.w	r3, r0, r6
   1f006:	d00e      	beq.n	1f026 <z_impl_k_timer_start+0x52>
   1f008:	1c72      	adds	r2, r6, #1
   1f00a:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   1f00e:	db0a      	blt.n	1f026 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   1f010:	2e02      	cmp	r6, #2
   1f012:	4684      	mov	ip, r0
   1f014:	f170 0000 	sbcs.w	r0, r0, #0
   1f018:	bfbc      	itt	lt
   1f01a:	2702      	movlt	r7, #2
   1f01c:	f04f 0c00 	movlt.w	ip, #0
   1f020:	3f01      	subs	r7, #1
   1f022:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1f026:	1c63      	adds	r3, r4, #1
   1f028:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1f02c:	db0a      	blt.n	1f044 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1f02e:	2c01      	cmp	r4, #1
   1f030:	f171 0300 	sbcs.w	r3, r1, #0
   1f034:	4622      	mov	r2, r4
   1f036:	bfbc      	itt	lt
   1f038:	2201      	movlt	r2, #1
   1f03a:	2100      	movlt	r1, #0
   1f03c:	f112 39ff 	adds.w	r9, r2, #4294967295
   1f040:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1f044:	4628      	mov	r0, r5
   1f046:	f007 ffb4 	bl	26fb2 <z_abort_timeout>
	timer->period = period;
   1f04a:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   1f04e:	2300      	movs	r3, #0
   1f050:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f052:	464a      	mov	r2, r9
   1f054:	4643      	mov	r3, r8
   1f056:	4628      	mov	r0, r5
   1f058:	4903      	ldr	r1, [pc, #12]	; (1f068 <z_impl_k_timer_start+0x94>)
		     duration);
}
   1f05a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f05e:	f7ff be5d 	b.w	1ed1c <z_add_timeout>
}
   1f062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f066:	bf00      	nop
   1f068:	0001ef01 	.word	0x0001ef01

0001f06c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1f06c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f070:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1f072:	4b29      	ldr	r3, [pc, #164]	; (1f118 <z_impl_k_poll+0xac>)
   1f074:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1f076:	2301      	movs	r3, #1
   1f078:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1f07c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1f080:	ea52 0305 	orrs.w	r3, r2, r5
{
   1f084:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1f086:	bf0c      	ite	eq
   1f088:	2301      	moveq	r3, #1
   1f08a:	2300      	movne	r3, #0
   1f08c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1f090:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1f092:	f008 f856 	bl	27142 <register_events>
   1f096:	4681      	mov	r9, r0
	__asm__ volatile(
   1f098:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f09c:	f3ef 8a11 	mrs	sl, BASEPRI
   1f0a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0a4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1f0a8:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1f0ac:	b964      	cbnz	r4, 1f0c8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1f0ae:	4601      	mov	r1, r0
   1f0b0:	4652      	mov	r2, sl
   1f0b2:	4640      	mov	r0, r8
   1f0b4:	f008 f916 	bl	272e4 <clear_event_registrations>
	__asm__ volatile(
   1f0b8:	f38a 8811 	msr	BASEPRI, sl
   1f0bc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1f0c0:	4620      	mov	r0, r4
   1f0c2:	b002      	add	sp, #8
   1f0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1f0c8:	2300      	movs	r3, #0
   1f0ca:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f0ce:	ea56 0305 	orrs.w	r3, r6, r5
   1f0d2:	d106      	bne.n	1f0e2 <z_impl_k_poll+0x76>
   1f0d4:	f38a 8811 	msr	BASEPRI, sl
   1f0d8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1f0dc:	f06f 040a 	mvn.w	r4, #10
   1f0e0:	e7ee      	b.n	1f0c0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f0e2:	e9cd 6500 	strd	r6, r5, [sp]
   1f0e6:	4a0d      	ldr	r2, [pc, #52]	; (1f11c <z_impl_k_poll+0xb0>)
   1f0e8:	480d      	ldr	r0, [pc, #52]	; (1f120 <z_impl_k_poll+0xb4>)
   1f0ea:	4651      	mov	r1, sl
   1f0ec:	f7ff fb98 	bl	1e820 <z_pend_curr>
   1f0f0:	4604      	mov	r4, r0
	__asm__ volatile(
   1f0f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f0f6:	f3ef 8511 	mrs	r5, BASEPRI
   1f0fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0fe:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1f102:	462a      	mov	r2, r5
   1f104:	4649      	mov	r1, r9
   1f106:	4640      	mov	r0, r8
   1f108:	f008 f8ec 	bl	272e4 <clear_event_registrations>
	__asm__ volatile(
   1f10c:	f385 8811 	msr	BASEPRI, r5
   1f110:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1f114:	e7d4      	b.n	1f0c0 <z_impl_k_poll+0x54>
   1f116:	bf00      	nop
   1f118:	20003968 	.word	0x20003968
   1f11c:	20000734 	.word	0x20000734
   1f120:	20004a50 	.word	0x20004a50

0001f124 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1f124:	b538      	push	{r3, r4, r5, lr}
   1f126:	4603      	mov	r3, r0
	__asm__ volatile(
   1f128:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f12c:	f3ef 8511 	mrs	r5, BASEPRI
   1f130:	f382 8812 	msr	BASEPRI_MAX, r2
   1f134:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1f138:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1f13a:	2101      	movs	r1, #1
   1f13c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1f13e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1f140:	4283      	cmp	r3, r0
   1f142:	d106      	bne.n	1f152 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1f144:	f385 8811 	msr	BASEPRI, r5
   1f148:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1f14c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1f14e:	4620      	mov	r0, r4
   1f150:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1f152:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f156:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f158:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f15a:	2300      	movs	r3, #0
	node->prev = NULL;
   1f15c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f160:	f008 f866 	bl	27230 <signal_poll_event>
	z_reschedule(&lock, key);
   1f164:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f166:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1f168:	4801      	ldr	r0, [pc, #4]	; (1f170 <z_impl_k_poll_signal_raise+0x4c>)
   1f16a:	f7ff fbbd 	bl	1e8e8 <z_reschedule>
	return rc;
   1f16e:	e7ee      	b.n	1f14e <z_impl_k_poll_signal_raise+0x2a>
   1f170:	20004a50 	.word	0x20004a50

0001f174 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1f174:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f176:	4606      	mov	r6, r0
   1f178:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1f17a:	f007 fc36 	bl	269ea <k_is_in_isr>
   1f17e:	b978      	cbnz	r0, 1f1a0 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1f180:	4b0b      	ldr	r3, [pc, #44]	; (1f1b0 <z_thread_aligned_alloc+0x3c>)
   1f182:	689b      	ldr	r3, [r3, #8]
   1f184:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1f186:	b17c      	cbz	r4, 1f1a8 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1f188:	1d2a      	adds	r2, r5, #4
   1f18a:	d209      	bcs.n	1f1a0 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1f18c:	2000      	movs	r0, #0
   1f18e:	2100      	movs	r1, #0
   1f190:	e9cd 0100 	strd	r0, r1, [sp]
   1f194:	f046 0104 	orr.w	r1, r6, #4
   1f198:	4620      	mov	r0, r4
   1f19a:	f007 fb6f 	bl	2687c <k_heap_aligned_alloc>
	if (mem == NULL) {
   1f19e:	b908      	cbnz	r0, 1f1a4 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1f1a0:	2400      	movs	r4, #0
	}

	return ret;
   1f1a2:	e001      	b.n	1f1a8 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1f1a4:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1f1a6:	1d04      	adds	r4, r0, #4
}
   1f1a8:	4620      	mov	r0, r4
   1f1aa:	b002      	add	sp, #8
   1f1ac:	bd70      	pop	{r4, r5, r6, pc}
   1f1ae:	bf00      	nop
   1f1b0:	20003968 	.word	0x20003968

0001f1b4 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1f1b4:	4801      	ldr	r0, [pc, #4]	; (1f1bc <boot_banner+0x8>)
   1f1b6:	f004 bbf1 	b.w	2399c <printk>
   1f1ba:	bf00      	nop
   1f1bc:	0002aa5a 	.word	0x0002aa5a

0001f1c0 <ocrypto_ecdh_p256_public_key>:
   1f1c0:	b530      	push	{r4, r5, lr}
   1f1c2:	b099      	sub	sp, #100	; 0x64
   1f1c4:	4605      	mov	r5, r0
   1f1c6:	4668      	mov	r0, sp
   1f1c8:	f000 f828 	bl	1f21c <ocrypto_sc_p256_from32bytes>
   1f1cc:	4669      	mov	r1, sp
   1f1ce:	4604      	mov	r4, r0
   1f1d0:	a808      	add	r0, sp, #32
   1f1d2:	f000 fa53 	bl	1f67c <ocrypto_curve_p256_scalarmult_base>
   1f1d6:	a908      	add	r1, sp, #32
   1f1d8:	4304      	orrs	r4, r0
   1f1da:	4628      	mov	r0, r5
   1f1dc:	f000 f98a 	bl	1f4f4 <ocrypto_curve_p256_to64bytes>
   1f1e0:	4620      	mov	r0, r4
   1f1e2:	b019      	add	sp, #100	; 0x64
   1f1e4:	bd30      	pop	{r4, r5, pc}
   1f1e6:	bf00      	nop

0001f1e8 <ocrypto_ecdh_p256_common_secret>:
   1f1e8:	b570      	push	{r4, r5, r6, lr}
   1f1ea:	b098      	sub	sp, #96	; 0x60
   1f1ec:	4605      	mov	r5, r0
   1f1ee:	4668      	mov	r0, sp
   1f1f0:	4616      	mov	r6, r2
   1f1f2:	f000 f813 	bl	1f21c <ocrypto_sc_p256_from32bytes>
   1f1f6:	4631      	mov	r1, r6
   1f1f8:	4604      	mov	r4, r0
   1f1fa:	a808      	add	r0, sp, #32
   1f1fc:	f000 f946 	bl	1f48c <ocrypto_curve_p256_from64bytes>
   1f200:	a908      	add	r1, sp, #32
   1f202:	466a      	mov	r2, sp
   1f204:	4304      	orrs	r4, r0
   1f206:	4608      	mov	r0, r1
   1f208:	f000 f982 	bl	1f510 <ocrypto_curve_p256_scalarmult>
   1f20c:	a908      	add	r1, sp, #32
   1f20e:	4304      	orrs	r4, r0
   1f210:	4628      	mov	r0, r5
   1f212:	f000 f96d 	bl	1f4f0 <ocrypto_curve_p256_to32bytes>
   1f216:	4620      	mov	r0, r4
   1f218:	b018      	add	sp, #96	; 0x60
   1f21a:	bd70      	pop	{r4, r5, r6, pc}

0001f21c <ocrypto_sc_p256_from32bytes>:
   1f21c:	b570      	push	{r4, r5, r6, lr}
   1f21e:	680b      	ldr	r3, [r1, #0]
   1f220:	4e12      	ldr	r6, [pc, #72]	; (1f26c <ocrypto_sc_p256_from32bytes+0x50>)
   1f222:	ba1b      	rev	r3, r3
   1f224:	61c3      	str	r3, [r0, #28]
   1f226:	684b      	ldr	r3, [r1, #4]
   1f228:	ba1b      	rev	r3, r3
   1f22a:	6183      	str	r3, [r0, #24]
   1f22c:	688b      	ldr	r3, [r1, #8]
   1f22e:	ba1b      	rev	r3, r3
   1f230:	6143      	str	r3, [r0, #20]
   1f232:	68cb      	ldr	r3, [r1, #12]
   1f234:	ba1b      	rev	r3, r3
   1f236:	6103      	str	r3, [r0, #16]
   1f238:	690b      	ldr	r3, [r1, #16]
   1f23a:	ba1b      	rev	r3, r3
   1f23c:	60c3      	str	r3, [r0, #12]
   1f23e:	694b      	ldr	r3, [r1, #20]
   1f240:	ba1b      	rev	r3, r3
   1f242:	6083      	str	r3, [r0, #8]
   1f244:	698b      	ldr	r3, [r1, #24]
   1f246:	ba1b      	rev	r3, r3
   1f248:	6043      	str	r3, [r0, #4]
   1f24a:	69cb      	ldr	r3, [r1, #28]
   1f24c:	ba1b      	rev	r3, r3
   1f24e:	4632      	mov	r2, r6
   1f250:	6003      	str	r3, [r0, #0]
   1f252:	4601      	mov	r1, r0
   1f254:	4604      	mov	r4, r0
   1f256:	f7e1 fc33 	bl	ac0 <ocrypto_bigint_sub256>
   1f25a:	4631      	mov	r1, r6
   1f25c:	4605      	mov	r5, r0
   1f25e:	4602      	mov	r2, r0
   1f260:	4620      	mov	r0, r4
   1f262:	f7e1 fc4d 	bl	b00 <ocrypto_bigint_cadd256>
   1f266:	1e68      	subs	r0, r5, #1
   1f268:	bd70      	pop	{r4, r5, r6, pc}
   1f26a:	bf00      	nop
   1f26c:	00028928 	.word	0x00028928

0001f270 <p256_zdblu>:
   1f270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f274:	b088      	sub	sp, #32
   1f276:	460c      	mov	r4, r1
   1f278:	4606      	mov	r6, r0
   1f27a:	f102 0120 	add.w	r1, r2, #32
   1f27e:	4668      	mov	r0, sp
   1f280:	f106 0720 	add.w	r7, r6, #32
   1f284:	4690      	mov	r8, r2
   1f286:	f7e1 ff31 	bl	10ec <ocrypto_mod_p256_sqr>
   1f28a:	466a      	mov	r2, sp
   1f28c:	4669      	mov	r1, sp
   1f28e:	4668      	mov	r0, sp
   1f290:	f7e1 fe3e 	bl	f10 <ocrypto_mod_p256_add>
   1f294:	4669      	mov	r1, sp
   1f296:	4638      	mov	r0, r7
   1f298:	f7e1 ff28 	bl	10ec <ocrypto_mod_p256_sqr>
   1f29c:	463a      	mov	r2, r7
   1f29e:	4639      	mov	r1, r7
   1f2a0:	4638      	mov	r0, r7
   1f2a2:	f104 0520 	add.w	r5, r4, #32
   1f2a6:	f7e1 fe33 	bl	f10 <ocrypto_mod_p256_add>
   1f2aa:	466a      	mov	r2, sp
   1f2ac:	4669      	mov	r1, sp
   1f2ae:	4668      	mov	r0, sp
   1f2b0:	f7e1 fe2e 	bl	f10 <ocrypto_mod_p256_add>
   1f2b4:	4641      	mov	r1, r8
   1f2b6:	4628      	mov	r0, r5
   1f2b8:	f7e1 ff18 	bl	10ec <ocrypto_mod_p256_sqr>
   1f2bc:	466a      	mov	r2, sp
   1f2be:	4641      	mov	r1, r8
   1f2c0:	4630      	mov	r0, r6
   1f2c2:	f7e1 fefb 	bl	10bc <ocrypto_mod_p256_mul>
   1f2c6:	462a      	mov	r2, r5
   1f2c8:	4629      	mov	r1, r5
   1f2ca:	4668      	mov	r0, sp
   1f2cc:	f7e1 fe20 	bl	f10 <ocrypto_mod_p256_add>
   1f2d0:	462a      	mov	r2, r5
   1f2d2:	4669      	mov	r1, sp
   1f2d4:	4668      	mov	r0, sp
   1f2d6:	f7e1 fe1b 	bl	f10 <ocrypto_mod_p256_add>
   1f2da:	4a12      	ldr	r2, [pc, #72]	; (1f324 <p256_zdblu+0xb4>)
   1f2dc:	4669      	mov	r1, sp
   1f2de:	4668      	mov	r0, sp
   1f2e0:	f7e1 fe16 	bl	f10 <ocrypto_mod_p256_add>
   1f2e4:	4669      	mov	r1, sp
   1f2e6:	4620      	mov	r0, r4
   1f2e8:	f7e1 ff00 	bl	10ec <ocrypto_mod_p256_sqr>
   1f2ec:	4632      	mov	r2, r6
   1f2ee:	4621      	mov	r1, r4
   1f2f0:	4620      	mov	r0, r4
   1f2f2:	f7e1 fe4b 	bl	f8c <ocrypto_mod_p256_sub>
   1f2f6:	4632      	mov	r2, r6
   1f2f8:	4621      	mov	r1, r4
   1f2fa:	4620      	mov	r0, r4
   1f2fc:	f7e1 fe46 	bl	f8c <ocrypto_mod_p256_sub>
   1f300:	4622      	mov	r2, r4
   1f302:	4631      	mov	r1, r6
   1f304:	4628      	mov	r0, r5
   1f306:	f7e1 fe41 	bl	f8c <ocrypto_mod_p256_sub>
   1f30a:	466a      	mov	r2, sp
   1f30c:	4629      	mov	r1, r5
   1f30e:	4628      	mov	r0, r5
   1f310:	f7e1 fed4 	bl	10bc <ocrypto_mod_p256_mul>
   1f314:	463a      	mov	r2, r7
   1f316:	4629      	mov	r1, r5
   1f318:	4628      	mov	r0, r5
   1f31a:	f7e1 fe37 	bl	f8c <ocrypto_mod_p256_sub>
   1f31e:	b008      	add	sp, #32
   1f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f324:	000289c8 	.word	0x000289c8

0001f328 <p256_zaddc>:
   1f328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f32a:	b099      	sub	sp, #100	; 0x64
   1f32c:	4604      	mov	r4, r0
   1f32e:	460d      	mov	r5, r1
   1f330:	460a      	mov	r2, r1
   1f332:	4601      	mov	r1, r0
   1f334:	4668      	mov	r0, sp
   1f336:	f7e1 fe29 	bl	f8c <ocrypto_mod_p256_sub>
   1f33a:	4669      	mov	r1, sp
   1f33c:	4668      	mov	r0, sp
   1f33e:	f7e1 fed5 	bl	10ec <ocrypto_mod_p256_sqr>
   1f342:	466a      	mov	r2, sp
   1f344:	4621      	mov	r1, r4
   1f346:	a808      	add	r0, sp, #32
   1f348:	f105 0620 	add.w	r6, r5, #32
   1f34c:	f104 0720 	add.w	r7, r4, #32
   1f350:	f7e1 feb4 	bl	10bc <ocrypto_mod_p256_mul>
   1f354:	466a      	mov	r2, sp
   1f356:	4629      	mov	r1, r5
   1f358:	4668      	mov	r0, sp
   1f35a:	f7e1 feaf 	bl	10bc <ocrypto_mod_p256_mul>
   1f35e:	4632      	mov	r2, r6
   1f360:	4639      	mov	r1, r7
   1f362:	a810      	add	r0, sp, #64	; 0x40
   1f364:	f7e1 fdd4 	bl	f10 <ocrypto_mod_p256_add>
   1f368:	4632      	mov	r2, r6
   1f36a:	4639      	mov	r1, r7
   1f36c:	4630      	mov	r0, r6
   1f36e:	f7e1 fe0d 	bl	f8c <ocrypto_mod_p256_sub>
   1f372:	4631      	mov	r1, r6
   1f374:	4628      	mov	r0, r5
   1f376:	f7e1 feb9 	bl	10ec <ocrypto_mod_p256_sqr>
   1f37a:	466a      	mov	r2, sp
   1f37c:	a908      	add	r1, sp, #32
   1f37e:	4620      	mov	r0, r4
   1f380:	f7e1 fdc6 	bl	f10 <ocrypto_mod_p256_add>
   1f384:	4622      	mov	r2, r4
   1f386:	4629      	mov	r1, r5
   1f388:	4628      	mov	r0, r5
   1f38a:	f7e1 fdff 	bl	f8c <ocrypto_mod_p256_sub>
   1f38e:	466a      	mov	r2, sp
   1f390:	a908      	add	r1, sp, #32
   1f392:	4668      	mov	r0, sp
   1f394:	f7e1 fdfa 	bl	f8c <ocrypto_mod_p256_sub>
   1f398:	466a      	mov	r2, sp
   1f39a:	4639      	mov	r1, r7
   1f39c:	4638      	mov	r0, r7
   1f39e:	f7e1 fe8d 	bl	10bc <ocrypto_mod_p256_mul>
   1f3a2:	462a      	mov	r2, r5
   1f3a4:	a908      	add	r1, sp, #32
   1f3a6:	4668      	mov	r0, sp
   1f3a8:	f7e1 fdf0 	bl	f8c <ocrypto_mod_p256_sub>
   1f3ac:	466a      	mov	r2, sp
   1f3ae:	4631      	mov	r1, r6
   1f3b0:	4630      	mov	r0, r6
   1f3b2:	f7e1 fe83 	bl	10bc <ocrypto_mod_p256_mul>
   1f3b6:	463a      	mov	r2, r7
   1f3b8:	4631      	mov	r1, r6
   1f3ba:	4630      	mov	r0, r6
   1f3bc:	f7e1 fde6 	bl	f8c <ocrypto_mod_p256_sub>
   1f3c0:	a910      	add	r1, sp, #64	; 0x40
   1f3c2:	4668      	mov	r0, sp
   1f3c4:	f7e1 fe92 	bl	10ec <ocrypto_mod_p256_sqr>
   1f3c8:	4622      	mov	r2, r4
   1f3ca:	4669      	mov	r1, sp
   1f3cc:	4620      	mov	r0, r4
   1f3ce:	f7e1 fddd 	bl	f8c <ocrypto_mod_p256_sub>
   1f3d2:	a908      	add	r1, sp, #32
   1f3d4:	4622      	mov	r2, r4
   1f3d6:	4608      	mov	r0, r1
   1f3d8:	f7e1 fdd8 	bl	f8c <ocrypto_mod_p256_sub>
   1f3dc:	a910      	add	r1, sp, #64	; 0x40
   1f3de:	aa08      	add	r2, sp, #32
   1f3e0:	4608      	mov	r0, r1
   1f3e2:	f7e1 fe6b 	bl	10bc <ocrypto_mod_p256_mul>
   1f3e6:	463a      	mov	r2, r7
   1f3e8:	a910      	add	r1, sp, #64	; 0x40
   1f3ea:	4638      	mov	r0, r7
   1f3ec:	f7e1 fdce 	bl	f8c <ocrypto_mod_p256_sub>
   1f3f0:	b019      	add	sp, #100	; 0x64
   1f3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f3f4 <p256_zaddu>:
   1f3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3f8:	b088      	sub	sp, #32
   1f3fa:	460c      	mov	r4, r1
   1f3fc:	4605      	mov	r5, r0
   1f3fe:	4690      	mov	r8, r2
   1f400:	460a      	mov	r2, r1
   1f402:	4601      	mov	r1, r0
   1f404:	4668      	mov	r0, sp
   1f406:	f7e1 fdc1 	bl	f8c <ocrypto_mod_p256_sub>
   1f40a:	4669      	mov	r1, sp
   1f40c:	4668      	mov	r0, sp
   1f40e:	f7e1 fe6d 	bl	10ec <ocrypto_mod_p256_sqr>
   1f412:	466a      	mov	r2, sp
   1f414:	4629      	mov	r1, r5
   1f416:	4628      	mov	r0, r5
   1f418:	f104 0620 	add.w	r6, r4, #32
   1f41c:	f7e1 fe4e 	bl	10bc <ocrypto_mod_p256_mul>
   1f420:	f105 0720 	add.w	r7, r5, #32
   1f424:	466a      	mov	r2, sp
   1f426:	4621      	mov	r1, r4
   1f428:	4668      	mov	r0, sp
   1f42a:	f7e1 fe47 	bl	10bc <ocrypto_mod_p256_mul>
   1f42e:	4632      	mov	r2, r6
   1f430:	4639      	mov	r1, r7
   1f432:	4630      	mov	r0, r6
   1f434:	f7e1 fdaa 	bl	f8c <ocrypto_mod_p256_sub>
   1f438:	4631      	mov	r1, r6
   1f43a:	4620      	mov	r0, r4
   1f43c:	f7e1 fe56 	bl	10ec <ocrypto_mod_p256_sqr>
   1f440:	462a      	mov	r2, r5
   1f442:	4621      	mov	r1, r4
   1f444:	4620      	mov	r0, r4
   1f446:	f7e1 fda1 	bl	f8c <ocrypto_mod_p256_sub>
   1f44a:	466a      	mov	r2, sp
   1f44c:	4621      	mov	r1, r4
   1f44e:	4620      	mov	r0, r4
   1f450:	f7e1 fd9c 	bl	f8c <ocrypto_mod_p256_sub>
   1f454:	466a      	mov	r2, sp
   1f456:	4629      	mov	r1, r5
   1f458:	4640      	mov	r0, r8
   1f45a:	f7e1 fd97 	bl	f8c <ocrypto_mod_p256_sub>
   1f45e:	4642      	mov	r2, r8
   1f460:	4639      	mov	r1, r7
   1f462:	4638      	mov	r0, r7
   1f464:	f7e1 fe2a 	bl	10bc <ocrypto_mod_p256_mul>
   1f468:	4622      	mov	r2, r4
   1f46a:	4629      	mov	r1, r5
   1f46c:	4668      	mov	r0, sp
   1f46e:	f7e1 fd8d 	bl	f8c <ocrypto_mod_p256_sub>
   1f472:	466a      	mov	r2, sp
   1f474:	4631      	mov	r1, r6
   1f476:	4630      	mov	r0, r6
   1f478:	f7e1 fe20 	bl	10bc <ocrypto_mod_p256_mul>
   1f47c:	463a      	mov	r2, r7
   1f47e:	4631      	mov	r1, r6
   1f480:	4630      	mov	r0, r6
   1f482:	f7e1 fd83 	bl	f8c <ocrypto_mod_p256_sub>
   1f486:	b008      	add	sp, #32
   1f488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f48c <ocrypto_curve_p256_from64bytes>:
   1f48c:	b570      	push	{r4, r5, r6, lr}
   1f48e:	f100 0620 	add.w	r6, r0, #32
   1f492:	b090      	sub	sp, #64	; 0x40
   1f494:	460d      	mov	r5, r1
   1f496:	4604      	mov	r4, r0
   1f498:	f000 f914 	bl	1f6c4 <ocrypto_mod_p256_from_bytes>
   1f49c:	f105 0120 	add.w	r1, r5, #32
   1f4a0:	4630      	mov	r0, r6
   1f4a2:	f000 f90f 	bl	1f6c4 <ocrypto_mod_p256_from_bytes>
   1f4a6:	4621      	mov	r1, r4
   1f4a8:	a808      	add	r0, sp, #32
   1f4aa:	f7e1 fe1f 	bl	10ec <ocrypto_mod_p256_sqr>
   1f4ae:	a908      	add	r1, sp, #32
   1f4b0:	4608      	mov	r0, r1
   1f4b2:	4a0d      	ldr	r2, [pc, #52]	; (1f4e8 <ocrypto_curve_p256_from64bytes+0x5c>)
   1f4b4:	f7e1 fd2c 	bl	f10 <ocrypto_mod_p256_add>
   1f4b8:	a908      	add	r1, sp, #32
   1f4ba:	4622      	mov	r2, r4
   1f4bc:	4608      	mov	r0, r1
   1f4be:	f7e1 fdfd 	bl	10bc <ocrypto_mod_p256_mul>
   1f4c2:	a908      	add	r1, sp, #32
   1f4c4:	4a09      	ldr	r2, [pc, #36]	; (1f4ec <ocrypto_curve_p256_from64bytes+0x60>)
   1f4c6:	4608      	mov	r0, r1
   1f4c8:	f7e1 fd22 	bl	f10 <ocrypto_mod_p256_add>
   1f4cc:	4631      	mov	r1, r6
   1f4ce:	4668      	mov	r0, sp
   1f4d0:	f7e1 fe0c 	bl	10ec <ocrypto_mod_p256_sqr>
   1f4d4:	2220      	movs	r2, #32
   1f4d6:	4669      	mov	r1, sp
   1f4d8:	eb0d 0002 	add.w	r0, sp, r2
   1f4dc:	f7e1 fcea 	bl	eb4 <ocrypto_constant_time_equal>
   1f4e0:	3801      	subs	r0, #1
   1f4e2:	b010      	add	sp, #64	; 0x40
   1f4e4:	bd70      	pop	{r4, r5, r6, pc}
   1f4e6:	bf00      	nop
   1f4e8:	000289c8 	.word	0x000289c8
   1f4ec:	000289e8 	.word	0x000289e8

0001f4f0 <ocrypto_curve_p256_to32bytes>:
   1f4f0:	f000 b902 	b.w	1f6f8 <ocrypto_mod_p256_to_bytes>

0001f4f4 <ocrypto_curve_p256_to64bytes>:
   1f4f4:	b538      	push	{r3, r4, r5, lr}
   1f4f6:	4604      	mov	r4, r0
   1f4f8:	460d      	mov	r5, r1
   1f4fa:	f000 f8fd 	bl	1f6f8 <ocrypto_mod_p256_to_bytes>
   1f4fe:	f105 0120 	add.w	r1, r5, #32
   1f502:	f104 0020 	add.w	r0, r4, #32
   1f506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f50a:	f000 b8f5 	b.w	1f6f8 <ocrypto_mod_p256_to_bytes>
   1f50e:	bf00      	nop

0001f510 <ocrypto_curve_p256_scalarmult>:
   1f510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f514:	4613      	mov	r3, r2
   1f516:	b0bb      	sub	sp, #236	; 0xec
   1f518:	4a54      	ldr	r2, [pc, #336]	; (1f66c <ocrypto_curve_p256_scalarmult+0x15c>)
   1f51a:	4688      	mov	r8, r1
   1f51c:	4607      	mov	r7, r0
   1f51e:	4619      	mov	r1, r3
   1f520:	a812      	add	r0, sp, #72	; 0x48
   1f522:	f7e1 facd 	bl	ac0 <ocrypto_bigint_sub256>
   1f526:	4952      	ldr	r1, [pc, #328]	; (1f670 <ocrypto_curve_p256_scalarmult+0x160>)
   1f528:	4602      	mov	r2, r0
   1f52a:	a812      	add	r0, sp, #72	; 0x48
   1f52c:	f7e1 fae8 	bl	b00 <ocrypto_bigint_cadd256>
   1f530:	9d19      	ldr	r5, [sp, #100]	; 0x64
   1f532:	494e      	ldr	r1, [pc, #312]	; (1f66c <ocrypto_curve_p256_scalarmult+0x15c>)
   1f534:	ea00 75d5 	and.w	r5, r0, r5, lsr #31
   1f538:	4606      	mov	r6, r0
   1f53a:	f1c5 0201 	rsb	r2, r5, #1
   1f53e:	a812      	add	r0, sp, #72	; 0x48
   1f540:	f7e1 fade 	bl	b00 <ocrypto_bigint_cadd256>
   1f544:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1f546:	4642      	mov	r2, r8
   1f548:	ea6f 0903 	mvn.w	r9, r3
   1f54c:	a92a      	add	r1, sp, #168	; 0xa8
   1f54e:	a81a      	add	r0, sp, #104	; 0x68
   1f550:	f7ff fe8e 	bl	1f270 <p256_zdblu>
   1f554:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   1f558:	a922      	add	r1, sp, #136	; 0x88
   1f55a:	f1c9 0201 	rsb	r2, r9, #1
   1f55e:	4608      	mov	r0, r1
   1f560:	f000 f892 	bl	1f688 <ocrypto_mod_p256_cneg>
   1f564:	f1c6 0601 	rsb	r6, r6, #1
   1f568:	24fe      	movs	r4, #254	; 0xfe
   1f56a:	aa02      	add	r2, sp, #8
   1f56c:	a91a      	add	r1, sp, #104	; 0x68
   1f56e:	a82a      	add	r0, sp, #168	; 0xa8
   1f570:	f7ff ff40 	bl	1f3f4 <p256_zaddu>
   1f574:	1162      	asrs	r2, r4, #5
   1f576:	ab3a      	add	r3, sp, #232	; 0xe8
   1f578:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1f57c:	f004 011f 	and.w	r1, r4, #31
   1f580:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   1f584:	40cb      	lsrs	r3, r1
   1f586:	464a      	mov	r2, r9
   1f588:	f003 0901 	and.w	r9, r3, #1
   1f58c:	ea89 0202 	eor.w	r2, r9, r2
   1f590:	a92a      	add	r1, sp, #168	; 0xa8
   1f592:	a81a      	add	r0, sp, #104	; 0x68
   1f594:	9201      	str	r2, [sp, #4]
   1f596:	f7e1 fb0f 	bl	bb8 <ocrypto_bigint_cswap256>
   1f59a:	9a01      	ldr	r2, [sp, #4]
   1f59c:	a932      	add	r1, sp, #200	; 0xc8
   1f59e:	a822      	add	r0, sp, #136	; 0x88
   1f5a0:	f7e1 fb0a 	bl	bb8 <ocrypto_bigint_cswap256>
   1f5a4:	3c01      	subs	r4, #1
   1f5a6:	a92a      	add	r1, sp, #168	; 0xa8
   1f5a8:	a81a      	add	r0, sp, #104	; 0x68
   1f5aa:	f7ff febd 	bl	1f328 <p256_zaddc>
   1f5ae:	1c63      	adds	r3, r4, #1
   1f5b0:	d1db      	bne.n	1f56a <ocrypto_curve_p256_scalarmult+0x5a>
   1f5b2:	f1c9 0201 	rsb	r2, r9, #1
   1f5b6:	a922      	add	r1, sp, #136	; 0x88
   1f5b8:	a80a      	add	r0, sp, #40	; 0x28
   1f5ba:	f000 f865 	bl	1f688 <ocrypto_mod_p256_cneg>
   1f5be:	ea85 0509 	eor.w	r5, r5, r9
   1f5c2:	aa02      	add	r2, sp, #8
   1f5c4:	a91a      	add	r1, sp, #104	; 0x68
   1f5c6:	a82a      	add	r0, sp, #168	; 0xa8
   1f5c8:	f7ff ff14 	bl	1f3f4 <p256_zaddu>
   1f5cc:	a92a      	add	r1, sp, #168	; 0xa8
   1f5ce:	462a      	mov	r2, r5
   1f5d0:	a81a      	add	r0, sp, #104	; 0x68
   1f5d2:	f7e1 faf1 	bl	bb8 <ocrypto_bigint_cswap256>
   1f5d6:	462a      	mov	r2, r5
   1f5d8:	a932      	add	r1, sp, #200	; 0xc8
   1f5da:	a822      	add	r0, sp, #136	; 0x88
   1f5dc:	f7e1 faec 	bl	bb8 <ocrypto_bigint_cswap256>
   1f5e0:	a90a      	add	r1, sp, #40	; 0x28
   1f5e2:	aa02      	add	r2, sp, #8
   1f5e4:	4608      	mov	r0, r1
   1f5e6:	f7e1 fd69 	bl	10bc <ocrypto_mod_p256_mul>
   1f5ea:	a90a      	add	r1, sp, #40	; 0x28
   1f5ec:	4608      	mov	r0, r1
   1f5ee:	f000 f89d 	bl	1f72c <ocrypto_mod_p256_inv>
   1f5f2:	a90a      	add	r1, sp, #40	; 0x28
   1f5f4:	f107 0420 	add.w	r4, r7, #32
   1f5f8:	f108 0220 	add.w	r2, r8, #32
   1f5fc:	4608      	mov	r0, r1
   1f5fe:	f7e1 fd5d 	bl	10bc <ocrypto_mod_p256_mul>
   1f602:	a922      	add	r1, sp, #136	; 0x88
   1f604:	aa0a      	add	r2, sp, #40	; 0x28
   1f606:	4620      	mov	r0, r4
   1f608:	f7e1 fd58 	bl	10bc <ocrypto_mod_p256_mul>
   1f60c:	aa0a      	add	r2, sp, #40	; 0x28
   1f60e:	a91a      	add	r1, sp, #104	; 0x68
   1f610:	a802      	add	r0, sp, #8
   1f612:	f7e1 fd53 	bl	10bc <ocrypto_mod_p256_mul>
   1f616:	a902      	add	r1, sp, #8
   1f618:	4608      	mov	r0, r1
   1f61a:	f7e1 fd67 	bl	10ec <ocrypto_mod_p256_sqr>
   1f61e:	aa1a      	add	r2, sp, #104	; 0x68
   1f620:	a902      	add	r1, sp, #8
   1f622:	a80a      	add	r0, sp, #40	; 0x28
   1f624:	f7e1 fd4a 	bl	10bc <ocrypto_mod_p256_mul>
   1f628:	4621      	mov	r1, r4
   1f62a:	a802      	add	r0, sp, #8
   1f62c:	f7e1 fd5e 	bl	10ec <ocrypto_mod_p256_sqr>
   1f630:	aa0a      	add	r2, sp, #40	; 0x28
   1f632:	a902      	add	r1, sp, #8
   1f634:	4610      	mov	r0, r2
   1f636:	f7e1 fca9 	bl	f8c <ocrypto_mod_p256_sub>
   1f63a:	4a0e      	ldr	r2, [pc, #56]	; (1f674 <ocrypto_curve_p256_scalarmult+0x164>)
   1f63c:	a90a      	add	r1, sp, #40	; 0x28
   1f63e:	a802      	add	r0, sp, #8
   1f640:	f7e1 fca4 	bl	f8c <ocrypto_mod_p256_sub>
   1f644:	4620      	mov	r0, r4
   1f646:	2120      	movs	r1, #32
   1f648:	f7e1 fc48 	bl	edc <ocrypto_constant_time_is_zero>
   1f64c:	a90a      	add	r1, sp, #40	; 0x28
   1f64e:	4243      	negs	r3, r0
   1f650:	4602      	mov	r2, r0
   1f652:	a802      	add	r0, sp, #8
   1f654:	431e      	orrs	r6, r3
   1f656:	f7e1 faaf 	bl	bb8 <ocrypto_bigint_cswap256>
   1f65a:	4638      	mov	r0, r7
   1f65c:	4a06      	ldr	r2, [pc, #24]	; (1f678 <ocrypto_curve_p256_scalarmult+0x168>)
   1f65e:	a902      	add	r1, sp, #8
   1f660:	f7e1 fd2c 	bl	10bc <ocrypto_mod_p256_mul>
   1f664:	4630      	mov	r0, r6
   1f666:	b03b      	add	sp, #236	; 0xec
   1f668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f66c:	00028a08 	.word	0x00028a08
   1f670:	00028988 	.word	0x00028988
   1f674:	000289e8 	.word	0x000289e8
   1f678:	000289a8 	.word	0x000289a8

0001f67c <ocrypto_curve_p256_scalarmult_base>:
   1f67c:	460a      	mov	r2, r1
   1f67e:	4901      	ldr	r1, [pc, #4]	; (1f684 <ocrypto_curve_p256_scalarmult_base+0x8>)
   1f680:	f7ff bf46 	b.w	1f510 <ocrypto_curve_p256_scalarmult>
   1f684:	00028948 	.word	0x00028948

0001f688 <ocrypto_mod_p256_cneg>:
   1f688:	b570      	push	{r4, r5, r6, lr}
   1f68a:	b088      	sub	sp, #32
   1f68c:	4604      	mov	r4, r0
   1f68e:	460d      	mov	r5, r1
   1f690:	4616      	mov	r6, r2
   1f692:	2100      	movs	r1, #0
   1f694:	2220      	movs	r2, #32
   1f696:	4668      	mov	r0, sp
   1f698:	f007 fe9e 	bl	273d8 <memset>
   1f69c:	2300      	movs	r3, #0
   1f69e:	4629      	mov	r1, r5
   1f6a0:	2220      	movs	r2, #32
   1f6a2:	4620      	mov	r0, r4
   1f6a4:	9300      	str	r3, [sp, #0]
   1f6a6:	f007 fe89 	bl	273bc <memcpy>
   1f6aa:	462a      	mov	r2, r5
   1f6ac:	4669      	mov	r1, sp
   1f6ae:	4668      	mov	r0, sp
   1f6b0:	f7e1 fc6c 	bl	f8c <ocrypto_mod_p256_sub>
   1f6b4:	4632      	mov	r2, r6
   1f6b6:	4669      	mov	r1, sp
   1f6b8:	4620      	mov	r0, r4
   1f6ba:	f7e1 fa7d 	bl	bb8 <ocrypto_bigint_cswap256>
   1f6be:	b008      	add	sp, #32
   1f6c0:	bd70      	pop	{r4, r5, r6, pc}
   1f6c2:	bf00      	nop

0001f6c4 <ocrypto_mod_p256_from_bytes>:
   1f6c4:	680b      	ldr	r3, [r1, #0]
   1f6c6:	ba1b      	rev	r3, r3
   1f6c8:	61c3      	str	r3, [r0, #28]
   1f6ca:	684b      	ldr	r3, [r1, #4]
   1f6cc:	ba1b      	rev	r3, r3
   1f6ce:	6183      	str	r3, [r0, #24]
   1f6d0:	688b      	ldr	r3, [r1, #8]
   1f6d2:	ba1b      	rev	r3, r3
   1f6d4:	6143      	str	r3, [r0, #20]
   1f6d6:	68cb      	ldr	r3, [r1, #12]
   1f6d8:	ba1b      	rev	r3, r3
   1f6da:	6103      	str	r3, [r0, #16]
   1f6dc:	690b      	ldr	r3, [r1, #16]
   1f6de:	ba1b      	rev	r3, r3
   1f6e0:	60c3      	str	r3, [r0, #12]
   1f6e2:	694b      	ldr	r3, [r1, #20]
   1f6e4:	ba1b      	rev	r3, r3
   1f6e6:	6083      	str	r3, [r0, #8]
   1f6e8:	698b      	ldr	r3, [r1, #24]
   1f6ea:	ba1b      	rev	r3, r3
   1f6ec:	6043      	str	r3, [r0, #4]
   1f6ee:	69cb      	ldr	r3, [r1, #28]
   1f6f0:	ba1b      	rev	r3, r3
   1f6f2:	6003      	str	r3, [r0, #0]
   1f6f4:	4770      	bx	lr
   1f6f6:	bf00      	nop

0001f6f8 <ocrypto_mod_p256_to_bytes>:
   1f6f8:	69cb      	ldr	r3, [r1, #28]
   1f6fa:	ba1b      	rev	r3, r3
   1f6fc:	6003      	str	r3, [r0, #0]
   1f6fe:	698b      	ldr	r3, [r1, #24]
   1f700:	ba1b      	rev	r3, r3
   1f702:	6043      	str	r3, [r0, #4]
   1f704:	694b      	ldr	r3, [r1, #20]
   1f706:	ba1b      	rev	r3, r3
   1f708:	6083      	str	r3, [r0, #8]
   1f70a:	690b      	ldr	r3, [r1, #16]
   1f70c:	ba1b      	rev	r3, r3
   1f70e:	60c3      	str	r3, [r0, #12]
   1f710:	68cb      	ldr	r3, [r1, #12]
   1f712:	ba1b      	rev	r3, r3
   1f714:	6103      	str	r3, [r0, #16]
   1f716:	688b      	ldr	r3, [r1, #8]
   1f718:	ba1b      	rev	r3, r3
   1f71a:	6143      	str	r3, [r0, #20]
   1f71c:	684b      	ldr	r3, [r1, #4]
   1f71e:	ba1b      	rev	r3, r3
   1f720:	6183      	str	r3, [r0, #24]
   1f722:	680b      	ldr	r3, [r1, #0]
   1f724:	ba1b      	rev	r3, r3
   1f726:	61c3      	str	r3, [r0, #28]
   1f728:	4770      	bx	lr
   1f72a:	bf00      	nop

0001f72c <ocrypto_mod_p256_inv>:
   1f72c:	b570      	push	{r4, r5, r6, lr}
   1f72e:	b098      	sub	sp, #96	; 0x60
   1f730:	460d      	mov	r5, r1
   1f732:	4606      	mov	r6, r0
   1f734:	a810      	add	r0, sp, #64	; 0x40
   1f736:	f7e1 fcd9 	bl	10ec <ocrypto_mod_p256_sqr>
   1f73a:	462a      	mov	r2, r5
   1f73c:	a910      	add	r1, sp, #64	; 0x40
   1f73e:	4668      	mov	r0, sp
   1f740:	f7e1 fcbc 	bl	10bc <ocrypto_mod_p256_mul>
   1f744:	4669      	mov	r1, sp
   1f746:	a810      	add	r0, sp, #64	; 0x40
   1f748:	f7e1 fcd0 	bl	10ec <ocrypto_mod_p256_sqr>
   1f74c:	a910      	add	r1, sp, #64	; 0x40
   1f74e:	4608      	mov	r0, r1
   1f750:	f7e1 fccc 	bl	10ec <ocrypto_mod_p256_sqr>
   1f754:	466a      	mov	r2, sp
   1f756:	a910      	add	r1, sp, #64	; 0x40
   1f758:	a808      	add	r0, sp, #32
   1f75a:	f7e1 fcaf 	bl	10bc <ocrypto_mod_p256_mul>
   1f75e:	a908      	add	r1, sp, #32
   1f760:	a810      	add	r0, sp, #64	; 0x40
   1f762:	f7e1 fcc3 	bl	10ec <ocrypto_mod_p256_sqr>
   1f766:	a910      	add	r1, sp, #64	; 0x40
   1f768:	4608      	mov	r0, r1
   1f76a:	f7e1 fcbf 	bl	10ec <ocrypto_mod_p256_sqr>
   1f76e:	a910      	add	r1, sp, #64	; 0x40
   1f770:	4608      	mov	r0, r1
   1f772:	f7e1 fcbb 	bl	10ec <ocrypto_mod_p256_sqr>
   1f776:	a910      	add	r1, sp, #64	; 0x40
   1f778:	4608      	mov	r0, r1
   1f77a:	f7e1 fcb7 	bl	10ec <ocrypto_mod_p256_sqr>
   1f77e:	a910      	add	r1, sp, #64	; 0x40
   1f780:	aa08      	add	r2, sp, #32
   1f782:	4608      	mov	r0, r1
   1f784:	f7e1 fc9a 	bl	10bc <ocrypto_mod_p256_mul>
   1f788:	a910      	add	r1, sp, #64	; 0x40
   1f78a:	4608      	mov	r0, r1
   1f78c:	f7e1 fcae 	bl	10ec <ocrypto_mod_p256_sqr>
   1f790:	a910      	add	r1, sp, #64	; 0x40
   1f792:	4608      	mov	r0, r1
   1f794:	f7e1 fcaa 	bl	10ec <ocrypto_mod_p256_sqr>
   1f798:	a910      	add	r1, sp, #64	; 0x40
   1f79a:	466a      	mov	r2, sp
   1f79c:	a808      	add	r0, sp, #32
   1f79e:	f7e1 fc8d 	bl	10bc <ocrypto_mod_p256_mul>
   1f7a2:	2405      	movs	r4, #5
   1f7a4:	a908      	add	r1, sp, #32
   1f7a6:	a810      	add	r0, sp, #64	; 0x40
   1f7a8:	f7e1 fca0 	bl	10ec <ocrypto_mod_p256_sqr>
   1f7ac:	a910      	add	r1, sp, #64	; 0x40
   1f7ae:	4608      	mov	r0, r1
   1f7b0:	f7e1 fc9c 	bl	10ec <ocrypto_mod_p256_sqr>
   1f7b4:	3c01      	subs	r4, #1
   1f7b6:	a910      	add	r1, sp, #64	; 0x40
   1f7b8:	d1f5      	bne.n	1f7a6 <ocrypto_mod_p256_inv+0x7a>
   1f7ba:	aa08      	add	r2, sp, #32
   1f7bc:	4608      	mov	r0, r1
   1f7be:	f7e1 fc7d 	bl	10bc <ocrypto_mod_p256_mul>
   1f7c2:	2405      	movs	r4, #5
   1f7c4:	a910      	add	r1, sp, #64	; 0x40
   1f7c6:	4608      	mov	r0, r1
   1f7c8:	f7e1 fc90 	bl	10ec <ocrypto_mod_p256_sqr>
   1f7cc:	a910      	add	r1, sp, #64	; 0x40
   1f7ce:	4608      	mov	r0, r1
   1f7d0:	f7e1 fc8c 	bl	10ec <ocrypto_mod_p256_sqr>
   1f7d4:	3c01      	subs	r4, #1
   1f7d6:	d1f5      	bne.n	1f7c4 <ocrypto_mod_p256_inv+0x98>
   1f7d8:	a910      	add	r1, sp, #64	; 0x40
   1f7da:	aa08      	add	r2, sp, #32
   1f7dc:	4608      	mov	r0, r1
   1f7de:	f7e1 fc6d 	bl	10bc <ocrypto_mod_p256_mul>
   1f7e2:	a910      	add	r1, sp, #64	; 0x40
   1f7e4:	a808      	add	r0, sp, #32
   1f7e6:	f7e1 fc81 	bl	10ec <ocrypto_mod_p256_sqr>
   1f7ea:	a908      	add	r1, sp, #32
   1f7ec:	4608      	mov	r0, r1
   1f7ee:	f7e1 fc7d 	bl	10ec <ocrypto_mod_p256_sqr>
   1f7f2:	a908      	add	r1, sp, #32
   1f7f4:	466a      	mov	r2, sp
   1f7f6:	4668      	mov	r0, sp
   1f7f8:	f7e1 fc60 	bl	10bc <ocrypto_mod_p256_mul>
   1f7fc:	2410      	movs	r4, #16
   1f7fe:	4669      	mov	r1, sp
   1f800:	a810      	add	r0, sp, #64	; 0x40
   1f802:	f7e1 fc73 	bl	10ec <ocrypto_mod_p256_sqr>
   1f806:	a910      	add	r1, sp, #64	; 0x40
   1f808:	4608      	mov	r0, r1
   1f80a:	f7e1 fc6f 	bl	10ec <ocrypto_mod_p256_sqr>
   1f80e:	3c01      	subs	r4, #1
   1f810:	a910      	add	r1, sp, #64	; 0x40
   1f812:	d1f5      	bne.n	1f800 <ocrypto_mod_p256_inv+0xd4>
   1f814:	462a      	mov	r2, r5
   1f816:	4608      	mov	r0, r1
   1f818:	f7e1 fc50 	bl	10bc <ocrypto_mod_p256_mul>
   1f81c:	2440      	movs	r4, #64	; 0x40
   1f81e:	a910      	add	r1, sp, #64	; 0x40
   1f820:	4608      	mov	r0, r1
   1f822:	f7e1 fc63 	bl	10ec <ocrypto_mod_p256_sqr>
   1f826:	a910      	add	r1, sp, #64	; 0x40
   1f828:	4608      	mov	r0, r1
   1f82a:	f7e1 fc5f 	bl	10ec <ocrypto_mod_p256_sqr>
   1f82e:	3c01      	subs	r4, #1
   1f830:	d1f5      	bne.n	1f81e <ocrypto_mod_p256_inv+0xf2>
   1f832:	a910      	add	r1, sp, #64	; 0x40
   1f834:	466a      	mov	r2, sp
   1f836:	4608      	mov	r0, r1
   1f838:	f7e1 fc40 	bl	10bc <ocrypto_mod_p256_mul>
   1f83c:	2410      	movs	r4, #16
   1f83e:	a910      	add	r1, sp, #64	; 0x40
   1f840:	4608      	mov	r0, r1
   1f842:	f7e1 fc53 	bl	10ec <ocrypto_mod_p256_sqr>
   1f846:	a910      	add	r1, sp, #64	; 0x40
   1f848:	4608      	mov	r0, r1
   1f84a:	f7e1 fc4f 	bl	10ec <ocrypto_mod_p256_sqr>
   1f84e:	3c01      	subs	r4, #1
   1f850:	d1f5      	bne.n	1f83e <ocrypto_mod_p256_inv+0x112>
   1f852:	a910      	add	r1, sp, #64	; 0x40
   1f854:	466a      	mov	r2, sp
   1f856:	4608      	mov	r0, r1
   1f858:	f7e1 fc30 	bl	10bc <ocrypto_mod_p256_mul>
   1f85c:	2410      	movs	r4, #16
   1f85e:	a910      	add	r1, sp, #64	; 0x40
   1f860:	4608      	mov	r0, r1
   1f862:	f7e1 fc43 	bl	10ec <ocrypto_mod_p256_sqr>
   1f866:	a910      	add	r1, sp, #64	; 0x40
   1f868:	4608      	mov	r0, r1
   1f86a:	f7e1 fc3f 	bl	10ec <ocrypto_mod_p256_sqr>
   1f86e:	3c01      	subs	r4, #1
   1f870:	d1f5      	bne.n	1f85e <ocrypto_mod_p256_inv+0x132>
   1f872:	a910      	add	r1, sp, #64	; 0x40
   1f874:	aa08      	add	r2, sp, #32
   1f876:	4608      	mov	r0, r1
   1f878:	f7e1 fc20 	bl	10bc <ocrypto_mod_p256_mul>
   1f87c:	462a      	mov	r2, r5
   1f87e:	a910      	add	r1, sp, #64	; 0x40
   1f880:	4630      	mov	r0, r6
   1f882:	f7e1 fc1b 	bl	10bc <ocrypto_mod_p256_mul>
   1f886:	b018      	add	sp, #96	; 0x60
   1f888:	bd70      	pop	{r4, r5, r6, pc}
   1f88a:	bf00      	nop

0001f88c <malloc>:
   1f88c:	4b02      	ldr	r3, [pc, #8]	; (1f898 <malloc+0xc>)
   1f88e:	4601      	mov	r1, r0
   1f890:	6818      	ldr	r0, [r3, #0]
   1f892:	f000 b84d 	b.w	1f930 <_malloc_r>
   1f896:	bf00      	nop
   1f898:	2000073c 	.word	0x2000073c

0001f89c <_free_r>:
   1f89c:	b538      	push	{r3, r4, r5, lr}
   1f89e:	4605      	mov	r5, r0
   1f8a0:	2900      	cmp	r1, #0
   1f8a2:	d041      	beq.n	1f928 <_free_r+0x8c>
   1f8a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1f8a8:	1f0c      	subs	r4, r1, #4
   1f8aa:	2b00      	cmp	r3, #0
   1f8ac:	bfb8      	it	lt
   1f8ae:	18e4      	addlt	r4, r4, r3
   1f8b0:	f000 fc0c 	bl	200cc <__malloc_lock>
   1f8b4:	4a1d      	ldr	r2, [pc, #116]	; (1f92c <_free_r+0x90>)
   1f8b6:	6813      	ldr	r3, [r2, #0]
   1f8b8:	b933      	cbnz	r3, 1f8c8 <_free_r+0x2c>
   1f8ba:	6063      	str	r3, [r4, #4]
   1f8bc:	6014      	str	r4, [r2, #0]
   1f8be:	4628      	mov	r0, r5
   1f8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f8c4:	f000 bc08 	b.w	200d8 <__malloc_unlock>
   1f8c8:	42a3      	cmp	r3, r4
   1f8ca:	d908      	bls.n	1f8de <_free_r+0x42>
   1f8cc:	6820      	ldr	r0, [r4, #0]
   1f8ce:	1821      	adds	r1, r4, r0
   1f8d0:	428b      	cmp	r3, r1
   1f8d2:	bf01      	itttt	eq
   1f8d4:	6819      	ldreq	r1, [r3, #0]
   1f8d6:	685b      	ldreq	r3, [r3, #4]
   1f8d8:	1809      	addeq	r1, r1, r0
   1f8da:	6021      	streq	r1, [r4, #0]
   1f8dc:	e7ed      	b.n	1f8ba <_free_r+0x1e>
   1f8de:	461a      	mov	r2, r3
   1f8e0:	685b      	ldr	r3, [r3, #4]
   1f8e2:	b10b      	cbz	r3, 1f8e8 <_free_r+0x4c>
   1f8e4:	42a3      	cmp	r3, r4
   1f8e6:	d9fa      	bls.n	1f8de <_free_r+0x42>
   1f8e8:	6811      	ldr	r1, [r2, #0]
   1f8ea:	1850      	adds	r0, r2, r1
   1f8ec:	42a0      	cmp	r0, r4
   1f8ee:	d10b      	bne.n	1f908 <_free_r+0x6c>
   1f8f0:	6820      	ldr	r0, [r4, #0]
   1f8f2:	4401      	add	r1, r0
   1f8f4:	1850      	adds	r0, r2, r1
   1f8f6:	4283      	cmp	r3, r0
   1f8f8:	6011      	str	r1, [r2, #0]
   1f8fa:	d1e0      	bne.n	1f8be <_free_r+0x22>
   1f8fc:	6818      	ldr	r0, [r3, #0]
   1f8fe:	685b      	ldr	r3, [r3, #4]
   1f900:	6053      	str	r3, [r2, #4]
   1f902:	4408      	add	r0, r1
   1f904:	6010      	str	r0, [r2, #0]
   1f906:	e7da      	b.n	1f8be <_free_r+0x22>
   1f908:	d902      	bls.n	1f910 <_free_r+0x74>
   1f90a:	230c      	movs	r3, #12
   1f90c:	602b      	str	r3, [r5, #0]
   1f90e:	e7d6      	b.n	1f8be <_free_r+0x22>
   1f910:	6820      	ldr	r0, [r4, #0]
   1f912:	1821      	adds	r1, r4, r0
   1f914:	428b      	cmp	r3, r1
   1f916:	bf04      	itt	eq
   1f918:	6819      	ldreq	r1, [r3, #0]
   1f91a:	685b      	ldreq	r3, [r3, #4]
   1f91c:	6063      	str	r3, [r4, #4]
   1f91e:	bf04      	itt	eq
   1f920:	1809      	addeq	r1, r1, r0
   1f922:	6021      	streq	r1, [r4, #0]
   1f924:	6054      	str	r4, [r2, #4]
   1f926:	e7ca      	b.n	1f8be <_free_r+0x22>
   1f928:	bd38      	pop	{r3, r4, r5, pc}
   1f92a:	bf00      	nop
   1f92c:	200039b4 	.word	0x200039b4

0001f930 <_malloc_r>:
   1f930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f932:	1ccd      	adds	r5, r1, #3
   1f934:	f025 0503 	bic.w	r5, r5, #3
   1f938:	3508      	adds	r5, #8
   1f93a:	2d0c      	cmp	r5, #12
   1f93c:	bf38      	it	cc
   1f93e:	250c      	movcc	r5, #12
   1f940:	2d00      	cmp	r5, #0
   1f942:	4606      	mov	r6, r0
   1f944:	db01      	blt.n	1f94a <_malloc_r+0x1a>
   1f946:	42a9      	cmp	r1, r5
   1f948:	d903      	bls.n	1f952 <_malloc_r+0x22>
   1f94a:	230c      	movs	r3, #12
   1f94c:	6033      	str	r3, [r6, #0]
   1f94e:	2000      	movs	r0, #0
   1f950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f952:	f000 fbbb 	bl	200cc <__malloc_lock>
   1f956:	4921      	ldr	r1, [pc, #132]	; (1f9dc <_malloc_r+0xac>)
   1f958:	680a      	ldr	r2, [r1, #0]
   1f95a:	4614      	mov	r4, r2
   1f95c:	b99c      	cbnz	r4, 1f986 <_malloc_r+0x56>
   1f95e:	4f20      	ldr	r7, [pc, #128]	; (1f9e0 <_malloc_r+0xb0>)
   1f960:	683b      	ldr	r3, [r7, #0]
   1f962:	b923      	cbnz	r3, 1f96e <_malloc_r+0x3e>
   1f964:	4621      	mov	r1, r4
   1f966:	4630      	mov	r0, r6
   1f968:	f000 fb9c 	bl	200a4 <_sbrk_r>
   1f96c:	6038      	str	r0, [r7, #0]
   1f96e:	4629      	mov	r1, r5
   1f970:	4630      	mov	r0, r6
   1f972:	f000 fb97 	bl	200a4 <_sbrk_r>
   1f976:	1c43      	adds	r3, r0, #1
   1f978:	d123      	bne.n	1f9c2 <_malloc_r+0x92>
   1f97a:	230c      	movs	r3, #12
   1f97c:	6033      	str	r3, [r6, #0]
   1f97e:	4630      	mov	r0, r6
   1f980:	f000 fbaa 	bl	200d8 <__malloc_unlock>
   1f984:	e7e3      	b.n	1f94e <_malloc_r+0x1e>
   1f986:	6823      	ldr	r3, [r4, #0]
   1f988:	1b5b      	subs	r3, r3, r5
   1f98a:	d417      	bmi.n	1f9bc <_malloc_r+0x8c>
   1f98c:	2b0b      	cmp	r3, #11
   1f98e:	d903      	bls.n	1f998 <_malloc_r+0x68>
   1f990:	6023      	str	r3, [r4, #0]
   1f992:	441c      	add	r4, r3
   1f994:	6025      	str	r5, [r4, #0]
   1f996:	e004      	b.n	1f9a2 <_malloc_r+0x72>
   1f998:	6863      	ldr	r3, [r4, #4]
   1f99a:	42a2      	cmp	r2, r4
   1f99c:	bf0c      	ite	eq
   1f99e:	600b      	streq	r3, [r1, #0]
   1f9a0:	6053      	strne	r3, [r2, #4]
   1f9a2:	4630      	mov	r0, r6
   1f9a4:	f000 fb98 	bl	200d8 <__malloc_unlock>
   1f9a8:	f104 000b 	add.w	r0, r4, #11
   1f9ac:	1d23      	adds	r3, r4, #4
   1f9ae:	f020 0007 	bic.w	r0, r0, #7
   1f9b2:	1ac2      	subs	r2, r0, r3
   1f9b4:	bf1c      	itt	ne
   1f9b6:	1a1b      	subne	r3, r3, r0
   1f9b8:	50a3      	strne	r3, [r4, r2]
   1f9ba:	e7c9      	b.n	1f950 <_malloc_r+0x20>
   1f9bc:	4622      	mov	r2, r4
   1f9be:	6864      	ldr	r4, [r4, #4]
   1f9c0:	e7cc      	b.n	1f95c <_malloc_r+0x2c>
   1f9c2:	1cc4      	adds	r4, r0, #3
   1f9c4:	f024 0403 	bic.w	r4, r4, #3
   1f9c8:	42a0      	cmp	r0, r4
   1f9ca:	d0e3      	beq.n	1f994 <_malloc_r+0x64>
   1f9cc:	1a21      	subs	r1, r4, r0
   1f9ce:	4630      	mov	r0, r6
   1f9d0:	f000 fb68 	bl	200a4 <_sbrk_r>
   1f9d4:	3001      	adds	r0, #1
   1f9d6:	d1dd      	bne.n	1f994 <_malloc_r+0x64>
   1f9d8:	e7cf      	b.n	1f97a <_malloc_r+0x4a>
   1f9da:	bf00      	nop
   1f9dc:	200039b4 	.word	0x200039b4
   1f9e0:	200039b0 	.word	0x200039b0

0001f9e4 <_printf_float>:
   1f9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9e8:	b08d      	sub	sp, #52	; 0x34
   1f9ea:	460c      	mov	r4, r1
   1f9ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1f9f0:	4616      	mov	r6, r2
   1f9f2:	461f      	mov	r7, r3
   1f9f4:	4605      	mov	r5, r0
   1f9f6:	f000 fb65 	bl	200c4 <_localeconv_r>
   1f9fa:	6803      	ldr	r3, [r0, #0]
   1f9fc:	9304      	str	r3, [sp, #16]
   1f9fe:	4618      	mov	r0, r3
   1fa00:	f7ed f86c 	bl	cadc <strlen>
   1fa04:	2300      	movs	r3, #0
   1fa06:	930a      	str	r3, [sp, #40]	; 0x28
   1fa08:	f8d8 3000 	ldr.w	r3, [r8]
   1fa0c:	9005      	str	r0, [sp, #20]
   1fa0e:	3307      	adds	r3, #7
   1fa10:	f023 0307 	bic.w	r3, r3, #7
   1fa14:	f103 0208 	add.w	r2, r3, #8
   1fa18:	f894 a018 	ldrb.w	sl, [r4, #24]
   1fa1c:	f8d4 b000 	ldr.w	fp, [r4]
   1fa20:	f8c8 2000 	str.w	r2, [r8]
   1fa24:	e9d3 8900 	ldrd	r8, r9, [r3]
   1fa28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   1fa2c:	9307      	str	r3, [sp, #28]
   1fa2e:	f8cd 8018 	str.w	r8, [sp, #24]
   1fa32:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   1fa36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fa3a:	4ba0      	ldr	r3, [pc, #640]	; (1fcbc <_printf_float+0x2d8>)
   1fa3c:	f04f 32ff 	mov.w	r2, #4294967295
   1fa40:	f7e1 fb6c 	bl	111c <__aeabi_dcmpun>
   1fa44:	bb70      	cbnz	r0, 1faa4 <_printf_float+0xc0>
   1fa46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fa4a:	4b9c      	ldr	r3, [pc, #624]	; (1fcbc <_printf_float+0x2d8>)
   1fa4c:	f04f 32ff 	mov.w	r2, #4294967295
   1fa50:	f7e0 fff8 	bl	a44 <__aeabi_dcmple>
   1fa54:	bb30      	cbnz	r0, 1faa4 <_printf_float+0xc0>
   1fa56:	2200      	movs	r2, #0
   1fa58:	2300      	movs	r3, #0
   1fa5a:	4640      	mov	r0, r8
   1fa5c:	4649      	mov	r1, r9
   1fa5e:	f7e0 ffe7 	bl	a30 <__aeabi_dcmplt>
   1fa62:	b110      	cbz	r0, 1fa6a <_printf_float+0x86>
   1fa64:	232d      	movs	r3, #45	; 0x2d
   1fa66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1fa6a:	4a95      	ldr	r2, [pc, #596]	; (1fcc0 <_printf_float+0x2dc>)
   1fa6c:	4b95      	ldr	r3, [pc, #596]	; (1fcc4 <_printf_float+0x2e0>)
   1fa6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1fa72:	bf94      	ite	ls
   1fa74:	4690      	movls	r8, r2
   1fa76:	4698      	movhi	r8, r3
   1fa78:	2303      	movs	r3, #3
   1fa7a:	6123      	str	r3, [r4, #16]
   1fa7c:	f02b 0304 	bic.w	r3, fp, #4
   1fa80:	6023      	str	r3, [r4, #0]
   1fa82:	f04f 0900 	mov.w	r9, #0
   1fa86:	9700      	str	r7, [sp, #0]
   1fa88:	4633      	mov	r3, r6
   1fa8a:	aa0b      	add	r2, sp, #44	; 0x2c
   1fa8c:	4621      	mov	r1, r4
   1fa8e:	4628      	mov	r0, r5
   1fa90:	f007 fd4d 	bl	2752e <_printf_common>
   1fa94:	3001      	adds	r0, #1
   1fa96:	f040 8096 	bne.w	1fbc6 <_printf_float+0x1e2>
   1fa9a:	f04f 30ff 	mov.w	r0, #4294967295
   1fa9e:	b00d      	add	sp, #52	; 0x34
   1faa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faa4:	4642      	mov	r2, r8
   1faa6:	464b      	mov	r3, r9
   1faa8:	4640      	mov	r0, r8
   1faaa:	4649      	mov	r1, r9
   1faac:	f7e1 fb36 	bl	111c <__aeabi_dcmpun>
   1fab0:	b140      	cbz	r0, 1fac4 <_printf_float+0xe0>
   1fab2:	464b      	mov	r3, r9
   1fab4:	2b00      	cmp	r3, #0
   1fab6:	bfbc      	itt	lt
   1fab8:	232d      	movlt	r3, #45	; 0x2d
   1faba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1fabe:	4a82      	ldr	r2, [pc, #520]	; (1fcc8 <_printf_float+0x2e4>)
   1fac0:	4b82      	ldr	r3, [pc, #520]	; (1fccc <_printf_float+0x2e8>)
   1fac2:	e7d4      	b.n	1fa6e <_printf_float+0x8a>
   1fac4:	6863      	ldr	r3, [r4, #4]
   1fac6:	1c5a      	adds	r2, r3, #1
   1fac8:	d126      	bne.n	1fb18 <_printf_float+0x134>
   1faca:	2306      	movs	r3, #6
   1facc:	6063      	str	r3, [r4, #4]
   1face:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   1fad2:	2300      	movs	r3, #0
   1fad4:	6022      	str	r2, [r4, #0]
   1fad6:	9303      	str	r3, [sp, #12]
   1fad8:	ab0a      	add	r3, sp, #40	; 0x28
   1fada:	e9cd a301 	strd	sl, r3, [sp, #4]
   1fade:	ab09      	add	r3, sp, #36	; 0x24
   1fae0:	9300      	str	r3, [sp, #0]
   1fae2:	6861      	ldr	r1, [r4, #4]
   1fae4:	ec49 8b10 	vmov	d0, r8, r9
   1fae8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1faec:	4628      	mov	r0, r5
   1faee:	f007 fc7b 	bl	273e8 <__cvt>
   1faf2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   1faf6:	9909      	ldr	r1, [sp, #36]	; 0x24
   1faf8:	4680      	mov	r8, r0
   1fafa:	d115      	bne.n	1fb28 <_printf_float+0x144>
   1fafc:	1ccb      	adds	r3, r1, #3
   1fafe:	db3b      	blt.n	1fb78 <_printf_float+0x194>
   1fb00:	6863      	ldr	r3, [r4, #4]
   1fb02:	4299      	cmp	r1, r3
   1fb04:	dc38      	bgt.n	1fb78 <_printf_float+0x194>
   1fb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fb08:	4299      	cmp	r1, r3
   1fb0a:	db55      	blt.n	1fbb8 <_printf_float+0x1d4>
   1fb0c:	6823      	ldr	r3, [r4, #0]
   1fb0e:	6121      	str	r1, [r4, #16]
   1fb10:	07d8      	lsls	r0, r3, #31
   1fb12:	d545      	bpl.n	1fba0 <_printf_float+0x1bc>
   1fb14:	1c4b      	adds	r3, r1, #1
   1fb16:	e042      	b.n	1fb9e <_printf_float+0x1ba>
   1fb18:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   1fb1c:	2a47      	cmp	r2, #71	; 0x47
   1fb1e:	d1d6      	bne.n	1face <_printf_float+0xea>
   1fb20:	2b00      	cmp	r3, #0
   1fb22:	d1d4      	bne.n	1face <_printf_float+0xea>
   1fb24:	2301      	movs	r3, #1
   1fb26:	e7d1      	b.n	1facc <_printf_float+0xe8>
   1fb28:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1fb2c:	d107      	bne.n	1fb3e <_printf_float+0x15a>
   1fb2e:	1cc8      	adds	r0, r1, #3
   1fb30:	db25      	blt.n	1fb7e <_printf_float+0x19a>
   1fb32:	6863      	ldr	r3, [r4, #4]
   1fb34:	428b      	cmp	r3, r1
   1fb36:	db22      	blt.n	1fb7e <_printf_float+0x19a>
   1fb38:	f04f 0a67 	mov.w	sl, #103	; 0x67
   1fb3c:	e7e3      	b.n	1fb06 <_printf_float+0x122>
   1fb3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1fb42:	d81f      	bhi.n	1fb84 <_printf_float+0x1a0>
   1fb44:	3901      	subs	r1, #1
   1fb46:	4652      	mov	r2, sl
   1fb48:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1fb4c:	9109      	str	r1, [sp, #36]	; 0x24
   1fb4e:	f007 fcb4 	bl	274ba <__exponent>
   1fb52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fb54:	1813      	adds	r3, r2, r0
   1fb56:	2a01      	cmp	r2, #1
   1fb58:	4681      	mov	r9, r0
   1fb5a:	6123      	str	r3, [r4, #16]
   1fb5c:	dc02      	bgt.n	1fb64 <_printf_float+0x180>
   1fb5e:	6822      	ldr	r2, [r4, #0]
   1fb60:	07d2      	lsls	r2, r2, #31
   1fb62:	d501      	bpl.n	1fb68 <_printf_float+0x184>
   1fb64:	3301      	adds	r3, #1
   1fb66:	6123      	str	r3, [r4, #16]
   1fb68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1fb6c:	2b00      	cmp	r3, #0
   1fb6e:	d08a      	beq.n	1fa86 <_printf_float+0xa2>
   1fb70:	232d      	movs	r3, #45	; 0x2d
   1fb72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1fb76:	e786      	b.n	1fa86 <_printf_float+0xa2>
   1fb78:	f04f 0a65 	mov.w	sl, #101	; 0x65
   1fb7c:	e7e2      	b.n	1fb44 <_printf_float+0x160>
   1fb7e:	f04f 0a45 	mov.w	sl, #69	; 0x45
   1fb82:	e7df      	b.n	1fb44 <_printf_float+0x160>
   1fb84:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   1fb88:	d1bd      	bne.n	1fb06 <_printf_float+0x122>
   1fb8a:	2900      	cmp	r1, #0
   1fb8c:	6863      	ldr	r3, [r4, #4]
   1fb8e:	dd0b      	ble.n	1fba8 <_printf_float+0x1c4>
   1fb90:	6121      	str	r1, [r4, #16]
   1fb92:	b913      	cbnz	r3, 1fb9a <_printf_float+0x1b6>
   1fb94:	6822      	ldr	r2, [r4, #0]
   1fb96:	07d0      	lsls	r0, r2, #31
   1fb98:	d502      	bpl.n	1fba0 <_printf_float+0x1bc>
   1fb9a:	3301      	adds	r3, #1
   1fb9c:	440b      	add	r3, r1
   1fb9e:	6123      	str	r3, [r4, #16]
   1fba0:	65a1      	str	r1, [r4, #88]	; 0x58
   1fba2:	f04f 0900 	mov.w	r9, #0
   1fba6:	e7df      	b.n	1fb68 <_printf_float+0x184>
   1fba8:	b913      	cbnz	r3, 1fbb0 <_printf_float+0x1cc>
   1fbaa:	6822      	ldr	r2, [r4, #0]
   1fbac:	07d2      	lsls	r2, r2, #31
   1fbae:	d501      	bpl.n	1fbb4 <_printf_float+0x1d0>
   1fbb0:	3302      	adds	r3, #2
   1fbb2:	e7f4      	b.n	1fb9e <_printf_float+0x1ba>
   1fbb4:	2301      	movs	r3, #1
   1fbb6:	e7f2      	b.n	1fb9e <_printf_float+0x1ba>
   1fbb8:	2900      	cmp	r1, #0
   1fbba:	bfd4      	ite	le
   1fbbc:	f1c1 0202 	rsble	r2, r1, #2
   1fbc0:	2201      	movgt	r2, #1
   1fbc2:	4413      	add	r3, r2
   1fbc4:	e7eb      	b.n	1fb9e <_printf_float+0x1ba>
   1fbc6:	6823      	ldr	r3, [r4, #0]
   1fbc8:	055a      	lsls	r2, r3, #21
   1fbca:	d407      	bmi.n	1fbdc <_printf_float+0x1f8>
   1fbcc:	6923      	ldr	r3, [r4, #16]
   1fbce:	4642      	mov	r2, r8
   1fbd0:	4631      	mov	r1, r6
   1fbd2:	4628      	mov	r0, r5
   1fbd4:	47b8      	blx	r7
   1fbd6:	3001      	adds	r0, #1
   1fbd8:	d12b      	bne.n	1fc32 <_printf_float+0x24e>
   1fbda:	e75e      	b.n	1fa9a <_printf_float+0xb6>
   1fbdc:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1fbe0:	f240 80dc 	bls.w	1fd9c <_printf_float+0x3b8>
   1fbe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1fbe8:	2200      	movs	r2, #0
   1fbea:	2300      	movs	r3, #0
   1fbec:	f7e0 ff16 	bl	a1c <__aeabi_dcmpeq>
   1fbf0:	2800      	cmp	r0, #0
   1fbf2:	d033      	beq.n	1fc5c <_printf_float+0x278>
   1fbf4:	4a36      	ldr	r2, [pc, #216]	; (1fcd0 <_printf_float+0x2ec>)
   1fbf6:	2301      	movs	r3, #1
   1fbf8:	4631      	mov	r1, r6
   1fbfa:	4628      	mov	r0, r5
   1fbfc:	47b8      	blx	r7
   1fbfe:	3001      	adds	r0, #1
   1fc00:	f43f af4b 	beq.w	1fa9a <_printf_float+0xb6>
   1fc04:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	; 0x24
   1fc08:	4543      	cmp	r3, r8
   1fc0a:	db02      	blt.n	1fc12 <_printf_float+0x22e>
   1fc0c:	6823      	ldr	r3, [r4, #0]
   1fc0e:	07d8      	lsls	r0, r3, #31
   1fc10:	d50f      	bpl.n	1fc32 <_printf_float+0x24e>
   1fc12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fc16:	4631      	mov	r1, r6
   1fc18:	4628      	mov	r0, r5
   1fc1a:	47b8      	blx	r7
   1fc1c:	3001      	adds	r0, #1
   1fc1e:	f43f af3c 	beq.w	1fa9a <_printf_float+0xb6>
   1fc22:	f04f 0900 	mov.w	r9, #0
   1fc26:	f108 38ff 	add.w	r8, r8, #4294967295
   1fc2a:	f104 0a1a 	add.w	sl, r4, #26
   1fc2e:	45c8      	cmp	r8, r9
   1fc30:	dc09      	bgt.n	1fc46 <_printf_float+0x262>
   1fc32:	6823      	ldr	r3, [r4, #0]
   1fc34:	079b      	lsls	r3, r3, #30
   1fc36:	f100 8102 	bmi.w	1fe3e <_printf_float+0x45a>
   1fc3a:	68e0      	ldr	r0, [r4, #12]
   1fc3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fc3e:	4298      	cmp	r0, r3
   1fc40:	bfb8      	it	lt
   1fc42:	4618      	movlt	r0, r3
   1fc44:	e72b      	b.n	1fa9e <_printf_float+0xba>
   1fc46:	2301      	movs	r3, #1
   1fc48:	4652      	mov	r2, sl
   1fc4a:	4631      	mov	r1, r6
   1fc4c:	4628      	mov	r0, r5
   1fc4e:	47b8      	blx	r7
   1fc50:	3001      	adds	r0, #1
   1fc52:	f43f af22 	beq.w	1fa9a <_printf_float+0xb6>
   1fc56:	f109 0901 	add.w	r9, r9, #1
   1fc5a:	e7e8      	b.n	1fc2e <_printf_float+0x24a>
   1fc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc5e:	2b00      	cmp	r3, #0
   1fc60:	dc38      	bgt.n	1fcd4 <_printf_float+0x2f0>
   1fc62:	4a1b      	ldr	r2, [pc, #108]	; (1fcd0 <_printf_float+0x2ec>)
   1fc64:	2301      	movs	r3, #1
   1fc66:	4631      	mov	r1, r6
   1fc68:	4628      	mov	r0, r5
   1fc6a:	47b8      	blx	r7
   1fc6c:	3001      	adds	r0, #1
   1fc6e:	f43f af14 	beq.w	1fa9a <_printf_float+0xb6>
   1fc72:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	; 0x24
   1fc76:	ea59 0303 	orrs.w	r3, r9, r3
   1fc7a:	d102      	bne.n	1fc82 <_printf_float+0x29e>
   1fc7c:	6823      	ldr	r3, [r4, #0]
   1fc7e:	07d9      	lsls	r1, r3, #31
   1fc80:	d5d7      	bpl.n	1fc32 <_printf_float+0x24e>
   1fc82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fc86:	4631      	mov	r1, r6
   1fc88:	4628      	mov	r0, r5
   1fc8a:	47b8      	blx	r7
   1fc8c:	3001      	adds	r0, #1
   1fc8e:	f43f af04 	beq.w	1fa9a <_printf_float+0xb6>
   1fc92:	f04f 0a00 	mov.w	sl, #0
   1fc96:	f104 0b1a 	add.w	fp, r4, #26
   1fc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc9c:	425b      	negs	r3, r3
   1fc9e:	4553      	cmp	r3, sl
   1fca0:	dc01      	bgt.n	1fca6 <_printf_float+0x2c2>
   1fca2:	464b      	mov	r3, r9
   1fca4:	e793      	b.n	1fbce <_printf_float+0x1ea>
   1fca6:	2301      	movs	r3, #1
   1fca8:	465a      	mov	r2, fp
   1fcaa:	4631      	mov	r1, r6
   1fcac:	4628      	mov	r0, r5
   1fcae:	47b8      	blx	r7
   1fcb0:	3001      	adds	r0, #1
   1fcb2:	f43f aef2 	beq.w	1fa9a <_printf_float+0xb6>
   1fcb6:	f10a 0a01 	add.w	sl, sl, #1
   1fcba:	e7ee      	b.n	1fc9a <_printf_float+0x2b6>
   1fcbc:	7fefffff 	.word	0x7fefffff
   1fcc0:	0002ab89 	.word	0x0002ab89
   1fcc4:	00029097 	.word	0x00029097
   1fcc8:	0002ab8d 	.word	0x0002ab8d
   1fccc:	0002ab91 	.word	0x0002ab91
   1fcd0:	00029adb 	.word	0x00029adb
   1fcd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1fcd6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1fcda:	4553      	cmp	r3, sl
   1fcdc:	bfa8      	it	ge
   1fcde:	4653      	movge	r3, sl
   1fce0:	2b00      	cmp	r3, #0
   1fce2:	4699      	mov	r9, r3
   1fce4:	dc36      	bgt.n	1fd54 <_printf_float+0x370>
   1fce6:	f04f 0b00 	mov.w	fp, #0
   1fcea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1fcee:	f104 021a 	add.w	r2, r4, #26
   1fcf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1fcf4:	9306      	str	r3, [sp, #24]
   1fcf6:	eba3 0309 	sub.w	r3, r3, r9
   1fcfa:	455b      	cmp	r3, fp
   1fcfc:	dc31      	bgt.n	1fd62 <_printf_float+0x37e>
   1fcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fd00:	459a      	cmp	sl, r3
   1fd02:	dc3a      	bgt.n	1fd7a <_printf_float+0x396>
   1fd04:	6823      	ldr	r3, [r4, #0]
   1fd06:	07da      	lsls	r2, r3, #31
   1fd08:	d437      	bmi.n	1fd7a <_printf_float+0x396>
   1fd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fd0c:	ebaa 0903 	sub.w	r9, sl, r3
   1fd10:	9b06      	ldr	r3, [sp, #24]
   1fd12:	ebaa 0303 	sub.w	r3, sl, r3
   1fd16:	4599      	cmp	r9, r3
   1fd18:	bfa8      	it	ge
   1fd1a:	4699      	movge	r9, r3
   1fd1c:	f1b9 0f00 	cmp.w	r9, #0
   1fd20:	dc33      	bgt.n	1fd8a <_printf_float+0x3a6>
   1fd22:	f04f 0800 	mov.w	r8, #0
   1fd26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1fd2a:	f104 0b1a 	add.w	fp, r4, #26
   1fd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fd30:	ebaa 0303 	sub.w	r3, sl, r3
   1fd34:	eba3 0309 	sub.w	r3, r3, r9
   1fd38:	4543      	cmp	r3, r8
   1fd3a:	f77f af7a 	ble.w	1fc32 <_printf_float+0x24e>
   1fd3e:	2301      	movs	r3, #1
   1fd40:	465a      	mov	r2, fp
   1fd42:	4631      	mov	r1, r6
   1fd44:	4628      	mov	r0, r5
   1fd46:	47b8      	blx	r7
   1fd48:	3001      	adds	r0, #1
   1fd4a:	f43f aea6 	beq.w	1fa9a <_printf_float+0xb6>
   1fd4e:	f108 0801 	add.w	r8, r8, #1
   1fd52:	e7ec      	b.n	1fd2e <_printf_float+0x34a>
   1fd54:	4642      	mov	r2, r8
   1fd56:	4631      	mov	r1, r6
   1fd58:	4628      	mov	r0, r5
   1fd5a:	47b8      	blx	r7
   1fd5c:	3001      	adds	r0, #1
   1fd5e:	d1c2      	bne.n	1fce6 <_printf_float+0x302>
   1fd60:	e69b      	b.n	1fa9a <_printf_float+0xb6>
   1fd62:	2301      	movs	r3, #1
   1fd64:	4631      	mov	r1, r6
   1fd66:	4628      	mov	r0, r5
   1fd68:	9206      	str	r2, [sp, #24]
   1fd6a:	47b8      	blx	r7
   1fd6c:	3001      	adds	r0, #1
   1fd6e:	f43f ae94 	beq.w	1fa9a <_printf_float+0xb6>
   1fd72:	9a06      	ldr	r2, [sp, #24]
   1fd74:	f10b 0b01 	add.w	fp, fp, #1
   1fd78:	e7bb      	b.n	1fcf2 <_printf_float+0x30e>
   1fd7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fd7e:	4631      	mov	r1, r6
   1fd80:	4628      	mov	r0, r5
   1fd82:	47b8      	blx	r7
   1fd84:	3001      	adds	r0, #1
   1fd86:	d1c0      	bne.n	1fd0a <_printf_float+0x326>
   1fd88:	e687      	b.n	1fa9a <_printf_float+0xb6>
   1fd8a:	9a06      	ldr	r2, [sp, #24]
   1fd8c:	464b      	mov	r3, r9
   1fd8e:	4442      	add	r2, r8
   1fd90:	4631      	mov	r1, r6
   1fd92:	4628      	mov	r0, r5
   1fd94:	47b8      	blx	r7
   1fd96:	3001      	adds	r0, #1
   1fd98:	d1c3      	bne.n	1fd22 <_printf_float+0x33e>
   1fd9a:	e67e      	b.n	1fa9a <_printf_float+0xb6>
   1fd9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1fda0:	f1ba 0f01 	cmp.w	sl, #1
   1fda4:	dc01      	bgt.n	1fdaa <_printf_float+0x3c6>
   1fda6:	07db      	lsls	r3, r3, #31
   1fda8:	d536      	bpl.n	1fe18 <_printf_float+0x434>
   1fdaa:	2301      	movs	r3, #1
   1fdac:	4642      	mov	r2, r8
   1fdae:	4631      	mov	r1, r6
   1fdb0:	4628      	mov	r0, r5
   1fdb2:	47b8      	blx	r7
   1fdb4:	3001      	adds	r0, #1
   1fdb6:	f43f ae70 	beq.w	1fa9a <_printf_float+0xb6>
   1fdba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fdbe:	4631      	mov	r1, r6
   1fdc0:	4628      	mov	r0, r5
   1fdc2:	47b8      	blx	r7
   1fdc4:	3001      	adds	r0, #1
   1fdc6:	f43f ae68 	beq.w	1fa9a <_printf_float+0xb6>
   1fdca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1fdce:	2200      	movs	r2, #0
   1fdd0:	2300      	movs	r3, #0
   1fdd2:	f10a 3aff 	add.w	sl, sl, #4294967295
   1fdd6:	f7e0 fe21 	bl	a1c <__aeabi_dcmpeq>
   1fdda:	b9c0      	cbnz	r0, 1fe0e <_printf_float+0x42a>
   1fddc:	4653      	mov	r3, sl
   1fdde:	f108 0201 	add.w	r2, r8, #1
   1fde2:	4631      	mov	r1, r6
   1fde4:	4628      	mov	r0, r5
   1fde6:	47b8      	blx	r7
   1fde8:	3001      	adds	r0, #1
   1fdea:	d10c      	bne.n	1fe06 <_printf_float+0x422>
   1fdec:	e655      	b.n	1fa9a <_printf_float+0xb6>
   1fdee:	2301      	movs	r3, #1
   1fdf0:	465a      	mov	r2, fp
   1fdf2:	4631      	mov	r1, r6
   1fdf4:	4628      	mov	r0, r5
   1fdf6:	47b8      	blx	r7
   1fdf8:	3001      	adds	r0, #1
   1fdfa:	f43f ae4e 	beq.w	1fa9a <_printf_float+0xb6>
   1fdfe:	f108 0801 	add.w	r8, r8, #1
   1fe02:	45d0      	cmp	r8, sl
   1fe04:	dbf3      	blt.n	1fdee <_printf_float+0x40a>
   1fe06:	464b      	mov	r3, r9
   1fe08:	f104 0250 	add.w	r2, r4, #80	; 0x50
   1fe0c:	e6e0      	b.n	1fbd0 <_printf_float+0x1ec>
   1fe0e:	f04f 0800 	mov.w	r8, #0
   1fe12:	f104 0b1a 	add.w	fp, r4, #26
   1fe16:	e7f4      	b.n	1fe02 <_printf_float+0x41e>
   1fe18:	2301      	movs	r3, #1
   1fe1a:	4642      	mov	r2, r8
   1fe1c:	e7e1      	b.n	1fde2 <_printf_float+0x3fe>
   1fe1e:	2301      	movs	r3, #1
   1fe20:	464a      	mov	r2, r9
   1fe22:	4631      	mov	r1, r6
   1fe24:	4628      	mov	r0, r5
   1fe26:	47b8      	blx	r7
   1fe28:	3001      	adds	r0, #1
   1fe2a:	f43f ae36 	beq.w	1fa9a <_printf_float+0xb6>
   1fe2e:	f108 0801 	add.w	r8, r8, #1
   1fe32:	68e3      	ldr	r3, [r4, #12]
   1fe34:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fe36:	1a5b      	subs	r3, r3, r1
   1fe38:	4543      	cmp	r3, r8
   1fe3a:	dcf0      	bgt.n	1fe1e <_printf_float+0x43a>
   1fe3c:	e6fd      	b.n	1fc3a <_printf_float+0x256>
   1fe3e:	f04f 0800 	mov.w	r8, #0
   1fe42:	f104 0919 	add.w	r9, r4, #25
   1fe46:	e7f4      	b.n	1fe32 <_printf_float+0x44e>

0001fe48 <_printf_i>:
   1fe48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1fe4c:	7e0f      	ldrb	r7, [r1, #24]
   1fe4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1fe50:	2f78      	cmp	r7, #120	; 0x78
   1fe52:	4691      	mov	r9, r2
   1fe54:	4680      	mov	r8, r0
   1fe56:	460c      	mov	r4, r1
   1fe58:	469a      	mov	sl, r3
   1fe5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   1fe5e:	d807      	bhi.n	1fe70 <_printf_i+0x28>
   1fe60:	2f62      	cmp	r7, #98	; 0x62
   1fe62:	d80a      	bhi.n	1fe7a <_printf_i+0x32>
   1fe64:	2f00      	cmp	r7, #0
   1fe66:	f000 80e0 	beq.w	2002a <_printf_i+0x1e2>
   1fe6a:	2f58      	cmp	r7, #88	; 0x58
   1fe6c:	f000 80bb 	beq.w	1ffe6 <_printf_i+0x19e>
   1fe70:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1fe74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1fe78:	e03a      	b.n	1fef0 <_printf_i+0xa8>
   1fe7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1fe7e:	2b15      	cmp	r3, #21
   1fe80:	d8f6      	bhi.n	1fe70 <_printf_i+0x28>
   1fe82:	a101      	add	r1, pc, #4	; (adr r1, 1fe88 <_printf_i+0x40>)
   1fe84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1fe88:	0001fee1 	.word	0x0001fee1
   1fe8c:	0001fef5 	.word	0x0001fef5
   1fe90:	0001fe71 	.word	0x0001fe71
   1fe94:	0001fe71 	.word	0x0001fe71
   1fe98:	0001fe71 	.word	0x0001fe71
   1fe9c:	0001fe71 	.word	0x0001fe71
   1fea0:	0001fef5 	.word	0x0001fef5
   1fea4:	0001fe71 	.word	0x0001fe71
   1fea8:	0001fe71 	.word	0x0001fe71
   1feac:	0001fe71 	.word	0x0001fe71
   1feb0:	0001fe71 	.word	0x0001fe71
   1feb4:	00020011 	.word	0x00020011
   1feb8:	0001ff85 	.word	0x0001ff85
   1febc:	0001ffc7 	.word	0x0001ffc7
   1fec0:	0001fe71 	.word	0x0001fe71
   1fec4:	0001fe71 	.word	0x0001fe71
   1fec8:	00020033 	.word	0x00020033
   1fecc:	0001fe71 	.word	0x0001fe71
   1fed0:	0001ff85 	.word	0x0001ff85
   1fed4:	0001fe71 	.word	0x0001fe71
   1fed8:	0001fe71 	.word	0x0001fe71
   1fedc:	0001ffcf 	.word	0x0001ffcf
   1fee0:	682b      	ldr	r3, [r5, #0]
   1fee2:	1d1a      	adds	r2, r3, #4
   1fee4:	681b      	ldr	r3, [r3, #0]
   1fee6:	602a      	str	r2, [r5, #0]
   1fee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1feec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1fef0:	2301      	movs	r3, #1
   1fef2:	e0ab      	b.n	2004c <_printf_i+0x204>
   1fef4:	6823      	ldr	r3, [r4, #0]
   1fef6:	6829      	ldr	r1, [r5, #0]
   1fef8:	061f      	lsls	r7, r3, #24
   1fefa:	f101 0004 	add.w	r0, r1, #4
   1fefe:	6028      	str	r0, [r5, #0]
   1ff00:	d501      	bpl.n	1ff06 <_printf_i+0xbe>
   1ff02:	680d      	ldr	r5, [r1, #0]
   1ff04:	e003      	b.n	1ff0e <_printf_i+0xc6>
   1ff06:	065e      	lsls	r6, r3, #25
   1ff08:	d5fb      	bpl.n	1ff02 <_printf_i+0xba>
   1ff0a:	f9b1 5000 	ldrsh.w	r5, [r1]
   1ff0e:	6861      	ldr	r1, [r4, #4]
   1ff10:	2d00      	cmp	r5, #0
   1ff12:	da7a      	bge.n	2000a <_printf_i+0x1c2>
   1ff14:	202d      	movs	r0, #45	; 0x2d
   1ff16:	2900      	cmp	r1, #0
   1ff18:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   1ff1c:	60a1      	str	r1, [r4, #8]
   1ff1e:	da2d      	bge.n	1ff7c <_printf_i+0x134>
   1ff20:	485e      	ldr	r0, [pc, #376]	; (2009c <_printf_i+0x254>)
   1ff22:	426d      	negs	r5, r5
   1ff24:	230a      	movs	r3, #10
   1ff26:	4616      	mov	r6, r2
   1ff28:	fbb5 f1f3 	udiv	r1, r5, r3
   1ff2c:	fb03 5711 	mls	r7, r3, r1, r5
   1ff30:	5dc7      	ldrb	r7, [r0, r7]
   1ff32:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1ff36:	462f      	mov	r7, r5
   1ff38:	42bb      	cmp	r3, r7
   1ff3a:	460d      	mov	r5, r1
   1ff3c:	d9f4      	bls.n	1ff28 <_printf_i+0xe0>
   1ff3e:	2b08      	cmp	r3, #8
   1ff40:	d10b      	bne.n	1ff5a <_printf_i+0x112>
   1ff42:	6823      	ldr	r3, [r4, #0]
   1ff44:	07df      	lsls	r7, r3, #31
   1ff46:	d508      	bpl.n	1ff5a <_printf_i+0x112>
   1ff48:	6923      	ldr	r3, [r4, #16]
   1ff4a:	6861      	ldr	r1, [r4, #4]
   1ff4c:	4299      	cmp	r1, r3
   1ff4e:	bfde      	ittt	le
   1ff50:	2330      	movle	r3, #48	; 0x30
   1ff52:	f806 3c01 	strble.w	r3, [r6, #-1]
   1ff56:	f106 36ff 	addle.w	r6, r6, #4294967295
   1ff5a:	1b92      	subs	r2, r2, r6
   1ff5c:	6122      	str	r2, [r4, #16]
   1ff5e:	f8cd a000 	str.w	sl, [sp]
   1ff62:	464b      	mov	r3, r9
   1ff64:	aa03      	add	r2, sp, #12
   1ff66:	4621      	mov	r1, r4
   1ff68:	4640      	mov	r0, r8
   1ff6a:	f007 fae0 	bl	2752e <_printf_common>
   1ff6e:	3001      	adds	r0, #1
   1ff70:	d171      	bne.n	20056 <_printf_i+0x20e>
   1ff72:	f04f 30ff 	mov.w	r0, #4294967295
   1ff76:	b004      	add	sp, #16
   1ff78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ff7c:	f023 0304 	bic.w	r3, r3, #4
   1ff80:	6023      	str	r3, [r4, #0]
   1ff82:	e7cd      	b.n	1ff20 <_printf_i+0xd8>
   1ff84:	682b      	ldr	r3, [r5, #0]
   1ff86:	6820      	ldr	r0, [r4, #0]
   1ff88:	1d19      	adds	r1, r3, #4
   1ff8a:	6029      	str	r1, [r5, #0]
   1ff8c:	0605      	lsls	r5, r0, #24
   1ff8e:	d501      	bpl.n	1ff94 <_printf_i+0x14c>
   1ff90:	681d      	ldr	r5, [r3, #0]
   1ff92:	e002      	b.n	1ff9a <_printf_i+0x152>
   1ff94:	0641      	lsls	r1, r0, #25
   1ff96:	d5fb      	bpl.n	1ff90 <_printf_i+0x148>
   1ff98:	881d      	ldrh	r5, [r3, #0]
   1ff9a:	4840      	ldr	r0, [pc, #256]	; (2009c <_printf_i+0x254>)
   1ff9c:	2f6f      	cmp	r7, #111	; 0x6f
   1ff9e:	bf14      	ite	ne
   1ffa0:	230a      	movne	r3, #10
   1ffa2:	2308      	moveq	r3, #8
   1ffa4:	2100      	movs	r1, #0
   1ffa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1ffaa:	6866      	ldr	r6, [r4, #4]
   1ffac:	60a6      	str	r6, [r4, #8]
   1ffae:	2e00      	cmp	r6, #0
   1ffb0:	dbb9      	blt.n	1ff26 <_printf_i+0xde>
   1ffb2:	6821      	ldr	r1, [r4, #0]
   1ffb4:	f021 0104 	bic.w	r1, r1, #4
   1ffb8:	6021      	str	r1, [r4, #0]
   1ffba:	2d00      	cmp	r5, #0
   1ffbc:	d1b3      	bne.n	1ff26 <_printf_i+0xde>
   1ffbe:	2e00      	cmp	r6, #0
   1ffc0:	d1b1      	bne.n	1ff26 <_printf_i+0xde>
   1ffc2:	4616      	mov	r6, r2
   1ffc4:	e7bb      	b.n	1ff3e <_printf_i+0xf6>
   1ffc6:	6823      	ldr	r3, [r4, #0]
   1ffc8:	f043 0320 	orr.w	r3, r3, #32
   1ffcc:	6023      	str	r3, [r4, #0]
   1ffce:	4834      	ldr	r0, [pc, #208]	; (200a0 <_printf_i+0x258>)
   1ffd0:	2778      	movs	r7, #120	; 0x78
   1ffd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1ffd6:	6829      	ldr	r1, [r5, #0]
   1ffd8:	6823      	ldr	r3, [r4, #0]
   1ffda:	1d0e      	adds	r6, r1, #4
   1ffdc:	602e      	str	r6, [r5, #0]
   1ffde:	061e      	lsls	r6, r3, #24
   1ffe0:	d503      	bpl.n	1ffea <_printf_i+0x1a2>
   1ffe2:	680d      	ldr	r5, [r1, #0]
   1ffe4:	e004      	b.n	1fff0 <_printf_i+0x1a8>
   1ffe6:	482d      	ldr	r0, [pc, #180]	; (2009c <_printf_i+0x254>)
   1ffe8:	e7f3      	b.n	1ffd2 <_printf_i+0x18a>
   1ffea:	065d      	lsls	r5, r3, #25
   1ffec:	d5f9      	bpl.n	1ffe2 <_printf_i+0x19a>
   1ffee:	880d      	ldrh	r5, [r1, #0]
   1fff0:	07d9      	lsls	r1, r3, #31
   1fff2:	bf44      	itt	mi
   1fff4:	f043 0320 	orrmi.w	r3, r3, #32
   1fff8:	6023      	strmi	r3, [r4, #0]
   1fffa:	b10d      	cbz	r5, 20000 <_printf_i+0x1b8>
   1fffc:	2310      	movs	r3, #16
   1fffe:	e7d1      	b.n	1ffa4 <_printf_i+0x15c>
   20000:	6823      	ldr	r3, [r4, #0]
   20002:	f023 0320 	bic.w	r3, r3, #32
   20006:	6023      	str	r3, [r4, #0]
   20008:	e7f8      	b.n	1fffc <_printf_i+0x1b4>
   2000a:	4824      	ldr	r0, [pc, #144]	; (2009c <_printf_i+0x254>)
   2000c:	230a      	movs	r3, #10
   2000e:	e7cc      	b.n	1ffaa <_printf_i+0x162>
   20010:	682b      	ldr	r3, [r5, #0]
   20012:	6826      	ldr	r6, [r4, #0]
   20014:	6961      	ldr	r1, [r4, #20]
   20016:	1d18      	adds	r0, r3, #4
   20018:	6028      	str	r0, [r5, #0]
   2001a:	0635      	lsls	r5, r6, #24
   2001c:	681b      	ldr	r3, [r3, #0]
   2001e:	d501      	bpl.n	20024 <_printf_i+0x1dc>
   20020:	6019      	str	r1, [r3, #0]
   20022:	e002      	b.n	2002a <_printf_i+0x1e2>
   20024:	0670      	lsls	r0, r6, #25
   20026:	d5fb      	bpl.n	20020 <_printf_i+0x1d8>
   20028:	8019      	strh	r1, [r3, #0]
   2002a:	2300      	movs	r3, #0
   2002c:	6123      	str	r3, [r4, #16]
   2002e:	4616      	mov	r6, r2
   20030:	e795      	b.n	1ff5e <_printf_i+0x116>
   20032:	682b      	ldr	r3, [r5, #0]
   20034:	1d1a      	adds	r2, r3, #4
   20036:	602a      	str	r2, [r5, #0]
   20038:	681e      	ldr	r6, [r3, #0]
   2003a:	6862      	ldr	r2, [r4, #4]
   2003c:	2100      	movs	r1, #0
   2003e:	4630      	mov	r0, r6
   20040:	f7e0 f85e 	bl	100 <memchr>
   20044:	b108      	cbz	r0, 2004a <_printf_i+0x202>
   20046:	1b80      	subs	r0, r0, r6
   20048:	6060      	str	r0, [r4, #4]
   2004a:	6863      	ldr	r3, [r4, #4]
   2004c:	6123      	str	r3, [r4, #16]
   2004e:	2300      	movs	r3, #0
   20050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   20054:	e783      	b.n	1ff5e <_printf_i+0x116>
   20056:	6923      	ldr	r3, [r4, #16]
   20058:	4632      	mov	r2, r6
   2005a:	4649      	mov	r1, r9
   2005c:	4640      	mov	r0, r8
   2005e:	47d0      	blx	sl
   20060:	3001      	adds	r0, #1
   20062:	d086      	beq.n	1ff72 <_printf_i+0x12a>
   20064:	6823      	ldr	r3, [r4, #0]
   20066:	079b      	lsls	r3, r3, #30
   20068:	d414      	bmi.n	20094 <_printf_i+0x24c>
   2006a:	68e0      	ldr	r0, [r4, #12]
   2006c:	9b03      	ldr	r3, [sp, #12]
   2006e:	4298      	cmp	r0, r3
   20070:	bfb8      	it	lt
   20072:	4618      	movlt	r0, r3
   20074:	e77f      	b.n	1ff76 <_printf_i+0x12e>
   20076:	2301      	movs	r3, #1
   20078:	4632      	mov	r2, r6
   2007a:	4649      	mov	r1, r9
   2007c:	4640      	mov	r0, r8
   2007e:	47d0      	blx	sl
   20080:	3001      	adds	r0, #1
   20082:	f43f af76 	beq.w	1ff72 <_printf_i+0x12a>
   20086:	3501      	adds	r5, #1
   20088:	68e3      	ldr	r3, [r4, #12]
   2008a:	9903      	ldr	r1, [sp, #12]
   2008c:	1a5b      	subs	r3, r3, r1
   2008e:	42ab      	cmp	r3, r5
   20090:	dcf1      	bgt.n	20076 <_printf_i+0x22e>
   20092:	e7ea      	b.n	2006a <_printf_i+0x222>
   20094:	2500      	movs	r5, #0
   20096:	f104 0619 	add.w	r6, r4, #25
   2009a:	e7f5      	b.n	20088 <_printf_i+0x240>
   2009c:	0002ab95 	.word	0x0002ab95
   200a0:	0002aba6 	.word	0x0002aba6

000200a4 <_sbrk_r>:
   200a4:	b538      	push	{r3, r4, r5, lr}
   200a6:	4d06      	ldr	r5, [pc, #24]	; (200c0 <_sbrk_r+0x1c>)
   200a8:	2300      	movs	r3, #0
   200aa:	4604      	mov	r4, r0
   200ac:	4608      	mov	r0, r1
   200ae:	602b      	str	r3, [r5, #0]
   200b0:	f7f5 fd56 	bl	15b60 <_sbrk>
   200b4:	1c43      	adds	r3, r0, #1
   200b6:	d102      	bne.n	200be <_sbrk_r+0x1a>
   200b8:	682b      	ldr	r3, [r5, #0]
   200ba:	b103      	cbz	r3, 200be <_sbrk_r+0x1a>
   200bc:	6023      	str	r3, [r4, #0]
   200be:	bd38      	pop	{r3, r4, r5, pc}
   200c0:	200039b8 	.word	0x200039b8

000200c4 <_localeconv_r>:
   200c4:	4800      	ldr	r0, [pc, #0]	; (200c8 <_localeconv_r+0x4>)
   200c6:	4770      	bx	lr
   200c8:	20000890 	.word	0x20000890

000200cc <__malloc_lock>:
   200cc:	4801      	ldr	r0, [pc, #4]	; (200d4 <__malloc_lock+0x8>)
   200ce:	f004 bccd 	b.w	24a6c <__retarget_lock_acquire_recursive>
   200d2:	bf00      	nop
   200d4:	20000b88 	.word	0x20000b88

000200d8 <__malloc_unlock>:
   200d8:	4801      	ldr	r0, [pc, #4]	; (200e0 <__malloc_unlock+0x8>)
   200da:	f004 bccd 	b.w	24a78 <__retarget_lock_release_recursive>
   200de:	bf00      	nop
   200e0:	20000b88 	.word	0x20000b88

000200e4 <_Balloc>:
   200e4:	b570      	push	{r4, r5, r6, lr}
   200e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   200e8:	4604      	mov	r4, r0
   200ea:	460d      	mov	r5, r1
   200ec:	b976      	cbnz	r6, 2010c <_Balloc+0x28>
   200ee:	2010      	movs	r0, #16
   200f0:	f7ff fbcc 	bl	1f88c <malloc>
   200f4:	4602      	mov	r2, r0
   200f6:	6260      	str	r0, [r4, #36]	; 0x24
   200f8:	b920      	cbnz	r0, 20104 <_Balloc+0x20>
   200fa:	4b18      	ldr	r3, [pc, #96]	; (2015c <_Balloc+0x78>)
   200fc:	4818      	ldr	r0, [pc, #96]	; (20160 <_Balloc+0x7c>)
   200fe:	2166      	movs	r1, #102	; 0x66
   20100:	f000 fb0a 	bl	20718 <__assert_func>
   20104:	e9c0 6601 	strd	r6, r6, [r0, #4]
   20108:	6006      	str	r6, [r0, #0]
   2010a:	60c6      	str	r6, [r0, #12]
   2010c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2010e:	68f3      	ldr	r3, [r6, #12]
   20110:	b183      	cbz	r3, 20134 <_Balloc+0x50>
   20112:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20114:	68db      	ldr	r3, [r3, #12]
   20116:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2011a:	b9b8      	cbnz	r0, 2014c <_Balloc+0x68>
   2011c:	2101      	movs	r1, #1
   2011e:	fa01 f605 	lsl.w	r6, r1, r5
   20122:	1d72      	adds	r2, r6, #5
   20124:	0092      	lsls	r2, r2, #2
   20126:	4620      	mov	r0, r4
   20128:	f007 fb86 	bl	27838 <_calloc_r>
   2012c:	b160      	cbz	r0, 20148 <_Balloc+0x64>
   2012e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   20132:	e00e      	b.n	20152 <_Balloc+0x6e>
   20134:	2221      	movs	r2, #33	; 0x21
   20136:	2104      	movs	r1, #4
   20138:	4620      	mov	r0, r4
   2013a:	f007 fb7d 	bl	27838 <_calloc_r>
   2013e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20140:	60f0      	str	r0, [r6, #12]
   20142:	68db      	ldr	r3, [r3, #12]
   20144:	2b00      	cmp	r3, #0
   20146:	d1e4      	bne.n	20112 <_Balloc+0x2e>
   20148:	2000      	movs	r0, #0
   2014a:	bd70      	pop	{r4, r5, r6, pc}
   2014c:	6802      	ldr	r2, [r0, #0]
   2014e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   20152:	2300      	movs	r3, #0
   20154:	e9c0 3303 	strd	r3, r3, [r0, #12]
   20158:	e7f7      	b.n	2014a <_Balloc+0x66>
   2015a:	bf00      	nop
   2015c:	0002abc4 	.word	0x0002abc4
   20160:	0002ac60 	.word	0x0002ac60

00020164 <_Bfree>:
   20164:	b570      	push	{r4, r5, r6, lr}
   20166:	6a46      	ldr	r6, [r0, #36]	; 0x24
   20168:	4605      	mov	r5, r0
   2016a:	460c      	mov	r4, r1
   2016c:	b976      	cbnz	r6, 2018c <_Bfree+0x28>
   2016e:	2010      	movs	r0, #16
   20170:	f7ff fb8c 	bl	1f88c <malloc>
   20174:	4602      	mov	r2, r0
   20176:	6268      	str	r0, [r5, #36]	; 0x24
   20178:	b920      	cbnz	r0, 20184 <_Bfree+0x20>
   2017a:	4b09      	ldr	r3, [pc, #36]	; (201a0 <_Bfree+0x3c>)
   2017c:	4809      	ldr	r0, [pc, #36]	; (201a4 <_Bfree+0x40>)
   2017e:	218a      	movs	r1, #138	; 0x8a
   20180:	f000 faca 	bl	20718 <__assert_func>
   20184:	e9c0 6601 	strd	r6, r6, [r0, #4]
   20188:	6006      	str	r6, [r0, #0]
   2018a:	60c6      	str	r6, [r0, #12]
   2018c:	b13c      	cbz	r4, 2019e <_Bfree+0x3a>
   2018e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20190:	6862      	ldr	r2, [r4, #4]
   20192:	68db      	ldr	r3, [r3, #12]
   20194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   20198:	6021      	str	r1, [r4, #0]
   2019a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2019e:	bd70      	pop	{r4, r5, r6, pc}
   201a0:	0002abc4 	.word	0x0002abc4
   201a4:	0002ac60 	.word	0x0002ac60

000201a8 <__multadd>:
   201a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201ac:	690d      	ldr	r5, [r1, #16]
   201ae:	4607      	mov	r7, r0
   201b0:	460c      	mov	r4, r1
   201b2:	461e      	mov	r6, r3
   201b4:	f101 0c14 	add.w	ip, r1, #20
   201b8:	2000      	movs	r0, #0
   201ba:	f8dc 3000 	ldr.w	r3, [ip]
   201be:	b299      	uxth	r1, r3
   201c0:	fb02 6101 	mla	r1, r2, r1, r6
   201c4:	0c1e      	lsrs	r6, r3, #16
   201c6:	0c0b      	lsrs	r3, r1, #16
   201c8:	fb02 3306 	mla	r3, r2, r6, r3
   201cc:	b289      	uxth	r1, r1
   201ce:	3001      	adds	r0, #1
   201d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   201d4:	4285      	cmp	r5, r0
   201d6:	f84c 1b04 	str.w	r1, [ip], #4
   201da:	ea4f 4613 	mov.w	r6, r3, lsr #16
   201de:	dcec      	bgt.n	201ba <__multadd+0x12>
   201e0:	b30e      	cbz	r6, 20226 <__multadd+0x7e>
   201e2:	68a3      	ldr	r3, [r4, #8]
   201e4:	42ab      	cmp	r3, r5
   201e6:	dc19      	bgt.n	2021c <__multadd+0x74>
   201e8:	6861      	ldr	r1, [r4, #4]
   201ea:	4638      	mov	r0, r7
   201ec:	3101      	adds	r1, #1
   201ee:	f7ff ff79 	bl	200e4 <_Balloc>
   201f2:	4680      	mov	r8, r0
   201f4:	b928      	cbnz	r0, 20202 <__multadd+0x5a>
   201f6:	4602      	mov	r2, r0
   201f8:	4b0c      	ldr	r3, [pc, #48]	; (2022c <__multadd+0x84>)
   201fa:	480d      	ldr	r0, [pc, #52]	; (20230 <__multadd+0x88>)
   201fc:	21b5      	movs	r1, #181	; 0xb5
   201fe:	f000 fa8b 	bl	20718 <__assert_func>
   20202:	6922      	ldr	r2, [r4, #16]
   20204:	3202      	adds	r2, #2
   20206:	f104 010c 	add.w	r1, r4, #12
   2020a:	0092      	lsls	r2, r2, #2
   2020c:	300c      	adds	r0, #12
   2020e:	f007 f8d5 	bl	273bc <memcpy>
   20212:	4621      	mov	r1, r4
   20214:	4638      	mov	r0, r7
   20216:	f7ff ffa5 	bl	20164 <_Bfree>
   2021a:	4644      	mov	r4, r8
   2021c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   20220:	3501      	adds	r5, #1
   20222:	615e      	str	r6, [r3, #20]
   20224:	6125      	str	r5, [r4, #16]
   20226:	4620      	mov	r0, r4
   20228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2022c:	0002ac4f 	.word	0x0002ac4f
   20230:	0002ac60 	.word	0x0002ac60

00020234 <__i2b>:
   20234:	b510      	push	{r4, lr}
   20236:	460c      	mov	r4, r1
   20238:	2101      	movs	r1, #1
   2023a:	f7ff ff53 	bl	200e4 <_Balloc>
   2023e:	4602      	mov	r2, r0
   20240:	b928      	cbnz	r0, 2024e <__i2b+0x1a>
   20242:	4b05      	ldr	r3, [pc, #20]	; (20258 <__i2b+0x24>)
   20244:	4805      	ldr	r0, [pc, #20]	; (2025c <__i2b+0x28>)
   20246:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2024a:	f000 fa65 	bl	20718 <__assert_func>
   2024e:	2301      	movs	r3, #1
   20250:	6144      	str	r4, [r0, #20]
   20252:	6103      	str	r3, [r0, #16]
   20254:	bd10      	pop	{r4, pc}
   20256:	bf00      	nop
   20258:	0002ac4f 	.word	0x0002ac4f
   2025c:	0002ac60 	.word	0x0002ac60

00020260 <__multiply>:
   20260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20264:	4614      	mov	r4, r2
   20266:	690a      	ldr	r2, [r1, #16]
   20268:	6923      	ldr	r3, [r4, #16]
   2026a:	429a      	cmp	r2, r3
   2026c:	bfa8      	it	ge
   2026e:	4623      	movge	r3, r4
   20270:	460f      	mov	r7, r1
   20272:	bfa4      	itt	ge
   20274:	460c      	movge	r4, r1
   20276:	461f      	movge	r7, r3
   20278:	f8d4 a010 	ldr.w	sl, [r4, #16]
   2027c:	f8d7 9010 	ldr.w	r9, [r7, #16]
   20280:	68a3      	ldr	r3, [r4, #8]
   20282:	6861      	ldr	r1, [r4, #4]
   20284:	eb0a 0609 	add.w	r6, sl, r9
   20288:	42b3      	cmp	r3, r6
   2028a:	b085      	sub	sp, #20
   2028c:	bfb8      	it	lt
   2028e:	3101      	addlt	r1, #1
   20290:	f7ff ff28 	bl	200e4 <_Balloc>
   20294:	b930      	cbnz	r0, 202a4 <__multiply+0x44>
   20296:	4602      	mov	r2, r0
   20298:	4b44      	ldr	r3, [pc, #272]	; (203ac <__multiply+0x14c>)
   2029a:	4845      	ldr	r0, [pc, #276]	; (203b0 <__multiply+0x150>)
   2029c:	f240 115d 	movw	r1, #349	; 0x15d
   202a0:	f000 fa3a 	bl	20718 <__assert_func>
   202a4:	f100 0514 	add.w	r5, r0, #20
   202a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   202ac:	462b      	mov	r3, r5
   202ae:	2200      	movs	r2, #0
   202b0:	4543      	cmp	r3, r8
   202b2:	d321      	bcc.n	202f8 <__multiply+0x98>
   202b4:	f107 0114 	add.w	r1, r7, #20
   202b8:	f104 0214 	add.w	r2, r4, #20
   202bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   202c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   202c4:	9302      	str	r3, [sp, #8]
   202c6:	1b13      	subs	r3, r2, r4
   202c8:	3b15      	subs	r3, #21
   202ca:	f023 0303 	bic.w	r3, r3, #3
   202ce:	3304      	adds	r3, #4
   202d0:	f104 0715 	add.w	r7, r4, #21
   202d4:	42ba      	cmp	r2, r7
   202d6:	bf38      	it	cc
   202d8:	2304      	movcc	r3, #4
   202da:	9301      	str	r3, [sp, #4]
   202dc:	9b02      	ldr	r3, [sp, #8]
   202de:	9103      	str	r1, [sp, #12]
   202e0:	428b      	cmp	r3, r1
   202e2:	d80c      	bhi.n	202fe <__multiply+0x9e>
   202e4:	2e00      	cmp	r6, #0
   202e6:	dd03      	ble.n	202f0 <__multiply+0x90>
   202e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   202ec:	2b00      	cmp	r3, #0
   202ee:	d05b      	beq.n	203a8 <__multiply+0x148>
   202f0:	6106      	str	r6, [r0, #16]
   202f2:	b005      	add	sp, #20
   202f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202f8:	f843 2b04 	str.w	r2, [r3], #4
   202fc:	e7d8      	b.n	202b0 <__multiply+0x50>
   202fe:	f8b1 a000 	ldrh.w	sl, [r1]
   20302:	f1ba 0f00 	cmp.w	sl, #0
   20306:	d024      	beq.n	20352 <__multiply+0xf2>
   20308:	f104 0e14 	add.w	lr, r4, #20
   2030c:	46a9      	mov	r9, r5
   2030e:	f04f 0c00 	mov.w	ip, #0
   20312:	f85e 7b04 	ldr.w	r7, [lr], #4
   20316:	f8d9 3000 	ldr.w	r3, [r9]
   2031a:	fa1f fb87 	uxth.w	fp, r7
   2031e:	b29b      	uxth	r3, r3
   20320:	fb0a 330b 	mla	r3, sl, fp, r3
   20324:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   20328:	f8d9 7000 	ldr.w	r7, [r9]
   2032c:	4463      	add	r3, ip
   2032e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   20332:	fb0a c70b 	mla	r7, sl, fp, ip
   20336:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   2033a:	b29b      	uxth	r3, r3
   2033c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   20340:	4572      	cmp	r2, lr
   20342:	f849 3b04 	str.w	r3, [r9], #4
   20346:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   2034a:	d8e2      	bhi.n	20312 <__multiply+0xb2>
   2034c:	9b01      	ldr	r3, [sp, #4]
   2034e:	f845 c003 	str.w	ip, [r5, r3]
   20352:	9b03      	ldr	r3, [sp, #12]
   20354:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   20358:	3104      	adds	r1, #4
   2035a:	f1b9 0f00 	cmp.w	r9, #0
   2035e:	d021      	beq.n	203a4 <__multiply+0x144>
   20360:	682b      	ldr	r3, [r5, #0]
   20362:	f104 0c14 	add.w	ip, r4, #20
   20366:	46ae      	mov	lr, r5
   20368:	f04f 0a00 	mov.w	sl, #0
   2036c:	f8bc b000 	ldrh.w	fp, [ip]
   20370:	f8be 7002 	ldrh.w	r7, [lr, #2]
   20374:	fb09 770b 	mla	r7, r9, fp, r7
   20378:	4457      	add	r7, sl
   2037a:	b29b      	uxth	r3, r3
   2037c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   20380:	f84e 3b04 	str.w	r3, [lr], #4
   20384:	f85c 3b04 	ldr.w	r3, [ip], #4
   20388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2038c:	f8be 3000 	ldrh.w	r3, [lr]
   20390:	fb09 330a 	mla	r3, r9, sl, r3
   20394:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   20398:	4562      	cmp	r2, ip
   2039a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2039e:	d8e5      	bhi.n	2036c <__multiply+0x10c>
   203a0:	9f01      	ldr	r7, [sp, #4]
   203a2:	51eb      	str	r3, [r5, r7]
   203a4:	3504      	adds	r5, #4
   203a6:	e799      	b.n	202dc <__multiply+0x7c>
   203a8:	3e01      	subs	r6, #1
   203aa:	e79b      	b.n	202e4 <__multiply+0x84>
   203ac:	0002ac4f 	.word	0x0002ac4f
   203b0:	0002ac60 	.word	0x0002ac60

000203b4 <__pow5mult>:
   203b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   203b8:	4615      	mov	r5, r2
   203ba:	f012 0203 	ands.w	r2, r2, #3
   203be:	4607      	mov	r7, r0
   203c0:	460e      	mov	r6, r1
   203c2:	d007      	beq.n	203d4 <__pow5mult+0x20>
   203c4:	4c25      	ldr	r4, [pc, #148]	; (2045c <__pow5mult+0xa8>)
   203c6:	3a01      	subs	r2, #1
   203c8:	2300      	movs	r3, #0
   203ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   203ce:	f7ff feeb 	bl	201a8 <__multadd>
   203d2:	4606      	mov	r6, r0
   203d4:	10ad      	asrs	r5, r5, #2
   203d6:	d03d      	beq.n	20454 <__pow5mult+0xa0>
   203d8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   203da:	b97c      	cbnz	r4, 203fc <__pow5mult+0x48>
   203dc:	2010      	movs	r0, #16
   203de:	f7ff fa55 	bl	1f88c <malloc>
   203e2:	4602      	mov	r2, r0
   203e4:	6278      	str	r0, [r7, #36]	; 0x24
   203e6:	b928      	cbnz	r0, 203f4 <__pow5mult+0x40>
   203e8:	4b1d      	ldr	r3, [pc, #116]	; (20460 <__pow5mult+0xac>)
   203ea:	481e      	ldr	r0, [pc, #120]	; (20464 <__pow5mult+0xb0>)
   203ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   203f0:	f000 f992 	bl	20718 <__assert_func>
   203f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   203f8:	6004      	str	r4, [r0, #0]
   203fa:	60c4      	str	r4, [r0, #12]
   203fc:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   20400:	f8d8 4008 	ldr.w	r4, [r8, #8]
   20404:	b94c      	cbnz	r4, 2041a <__pow5mult+0x66>
   20406:	f240 2171 	movw	r1, #625	; 0x271
   2040a:	4638      	mov	r0, r7
   2040c:	f7ff ff12 	bl	20234 <__i2b>
   20410:	2300      	movs	r3, #0
   20412:	f8c8 0008 	str.w	r0, [r8, #8]
   20416:	4604      	mov	r4, r0
   20418:	6003      	str	r3, [r0, #0]
   2041a:	f04f 0900 	mov.w	r9, #0
   2041e:	07eb      	lsls	r3, r5, #31
   20420:	d50a      	bpl.n	20438 <__pow5mult+0x84>
   20422:	4631      	mov	r1, r6
   20424:	4622      	mov	r2, r4
   20426:	4638      	mov	r0, r7
   20428:	f7ff ff1a 	bl	20260 <__multiply>
   2042c:	4631      	mov	r1, r6
   2042e:	4680      	mov	r8, r0
   20430:	4638      	mov	r0, r7
   20432:	f7ff fe97 	bl	20164 <_Bfree>
   20436:	4646      	mov	r6, r8
   20438:	106d      	asrs	r5, r5, #1
   2043a:	d00b      	beq.n	20454 <__pow5mult+0xa0>
   2043c:	6820      	ldr	r0, [r4, #0]
   2043e:	b938      	cbnz	r0, 20450 <__pow5mult+0x9c>
   20440:	4622      	mov	r2, r4
   20442:	4621      	mov	r1, r4
   20444:	4638      	mov	r0, r7
   20446:	f7ff ff0b 	bl	20260 <__multiply>
   2044a:	6020      	str	r0, [r4, #0]
   2044c:	f8c0 9000 	str.w	r9, [r0]
   20450:	4604      	mov	r4, r0
   20452:	e7e4      	b.n	2041e <__pow5mult+0x6a>
   20454:	4630      	mov	r0, r6
   20456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2045a:	bf00      	nop
   2045c:	00028a2c 	.word	0x00028a2c
   20460:	0002abc4 	.word	0x0002abc4
   20464:	0002ac60 	.word	0x0002ac60

00020468 <__lshift>:
   20468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2046c:	460c      	mov	r4, r1
   2046e:	6849      	ldr	r1, [r1, #4]
   20470:	6923      	ldr	r3, [r4, #16]
   20472:	eb03 1862 	add.w	r8, r3, r2, asr #5
   20476:	68a3      	ldr	r3, [r4, #8]
   20478:	4607      	mov	r7, r0
   2047a:	4691      	mov	r9, r2
   2047c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   20480:	f108 0601 	add.w	r6, r8, #1
   20484:	42b3      	cmp	r3, r6
   20486:	db0b      	blt.n	204a0 <__lshift+0x38>
   20488:	4638      	mov	r0, r7
   2048a:	f7ff fe2b 	bl	200e4 <_Balloc>
   2048e:	4605      	mov	r5, r0
   20490:	b948      	cbnz	r0, 204a6 <__lshift+0x3e>
   20492:	4602      	mov	r2, r0
   20494:	4b28      	ldr	r3, [pc, #160]	; (20538 <__lshift+0xd0>)
   20496:	4829      	ldr	r0, [pc, #164]	; (2053c <__lshift+0xd4>)
   20498:	f240 11d9 	movw	r1, #473	; 0x1d9
   2049c:	f000 f93c 	bl	20718 <__assert_func>
   204a0:	3101      	adds	r1, #1
   204a2:	005b      	lsls	r3, r3, #1
   204a4:	e7ee      	b.n	20484 <__lshift+0x1c>
   204a6:	2300      	movs	r3, #0
   204a8:	f100 0114 	add.w	r1, r0, #20
   204ac:	f100 0210 	add.w	r2, r0, #16
   204b0:	4618      	mov	r0, r3
   204b2:	4553      	cmp	r3, sl
   204b4:	db33      	blt.n	2051e <__lshift+0xb6>
   204b6:	6920      	ldr	r0, [r4, #16]
   204b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   204bc:	f104 0314 	add.w	r3, r4, #20
   204c0:	f019 091f 	ands.w	r9, r9, #31
   204c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   204c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   204cc:	d02b      	beq.n	20526 <__lshift+0xbe>
   204ce:	f1c9 0e20 	rsb	lr, r9, #32
   204d2:	468a      	mov	sl, r1
   204d4:	2200      	movs	r2, #0
   204d6:	6818      	ldr	r0, [r3, #0]
   204d8:	fa00 f009 	lsl.w	r0, r0, r9
   204dc:	4310      	orrs	r0, r2
   204de:	f84a 0b04 	str.w	r0, [sl], #4
   204e2:	f853 2b04 	ldr.w	r2, [r3], #4
   204e6:	459c      	cmp	ip, r3
   204e8:	fa22 f20e 	lsr.w	r2, r2, lr
   204ec:	d8f3      	bhi.n	204d6 <__lshift+0x6e>
   204ee:	ebac 0304 	sub.w	r3, ip, r4
   204f2:	3b15      	subs	r3, #21
   204f4:	f023 0303 	bic.w	r3, r3, #3
   204f8:	3304      	adds	r3, #4
   204fa:	f104 0015 	add.w	r0, r4, #21
   204fe:	4584      	cmp	ip, r0
   20500:	bf38      	it	cc
   20502:	2304      	movcc	r3, #4
   20504:	50ca      	str	r2, [r1, r3]
   20506:	b10a      	cbz	r2, 2050c <__lshift+0xa4>
   20508:	f108 0602 	add.w	r6, r8, #2
   2050c:	3e01      	subs	r6, #1
   2050e:	4638      	mov	r0, r7
   20510:	612e      	str	r6, [r5, #16]
   20512:	4621      	mov	r1, r4
   20514:	f7ff fe26 	bl	20164 <_Bfree>
   20518:	4628      	mov	r0, r5
   2051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2051e:	f842 0f04 	str.w	r0, [r2, #4]!
   20522:	3301      	adds	r3, #1
   20524:	e7c5      	b.n	204b2 <__lshift+0x4a>
   20526:	3904      	subs	r1, #4
   20528:	f853 2b04 	ldr.w	r2, [r3], #4
   2052c:	f841 2f04 	str.w	r2, [r1, #4]!
   20530:	459c      	cmp	ip, r3
   20532:	d8f9      	bhi.n	20528 <__lshift+0xc0>
   20534:	e7ea      	b.n	2050c <__lshift+0xa4>
   20536:	bf00      	nop
   20538:	0002ac4f 	.word	0x0002ac4f
   2053c:	0002ac60 	.word	0x0002ac60

00020540 <__mdiff>:
   20540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20544:	4689      	mov	r9, r1
   20546:	4606      	mov	r6, r0
   20548:	4611      	mov	r1, r2
   2054a:	4648      	mov	r0, r9
   2054c:	4614      	mov	r4, r2
   2054e:	f007 f958 	bl	27802 <__mcmp>
   20552:	1e05      	subs	r5, r0, #0
   20554:	d112      	bne.n	2057c <__mdiff+0x3c>
   20556:	4629      	mov	r1, r5
   20558:	4630      	mov	r0, r6
   2055a:	f7ff fdc3 	bl	200e4 <_Balloc>
   2055e:	4602      	mov	r2, r0
   20560:	b928      	cbnz	r0, 2056e <__mdiff+0x2e>
   20562:	4b3f      	ldr	r3, [pc, #252]	; (20660 <__mdiff+0x120>)
   20564:	f240 2132 	movw	r1, #562	; 0x232
   20568:	483e      	ldr	r0, [pc, #248]	; (20664 <__mdiff+0x124>)
   2056a:	f000 f8d5 	bl	20718 <__assert_func>
   2056e:	2301      	movs	r3, #1
   20570:	e9c0 3504 	strd	r3, r5, [r0, #16]
   20574:	4610      	mov	r0, r2
   20576:	b003      	add	sp, #12
   20578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2057c:	bfbc      	itt	lt
   2057e:	464b      	movlt	r3, r9
   20580:	46a1      	movlt	r9, r4
   20582:	4630      	mov	r0, r6
   20584:	f8d9 1004 	ldr.w	r1, [r9, #4]
   20588:	bfba      	itte	lt
   2058a:	461c      	movlt	r4, r3
   2058c:	2501      	movlt	r5, #1
   2058e:	2500      	movge	r5, #0
   20590:	f7ff fda8 	bl	200e4 <_Balloc>
   20594:	4602      	mov	r2, r0
   20596:	b918      	cbnz	r0, 205a0 <__mdiff+0x60>
   20598:	4b31      	ldr	r3, [pc, #196]	; (20660 <__mdiff+0x120>)
   2059a:	f44f 7110 	mov.w	r1, #576	; 0x240
   2059e:	e7e3      	b.n	20568 <__mdiff+0x28>
   205a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
   205a4:	6926      	ldr	r6, [r4, #16]
   205a6:	60c5      	str	r5, [r0, #12]
   205a8:	f109 0310 	add.w	r3, r9, #16
   205ac:	f109 0514 	add.w	r5, r9, #20
   205b0:	f104 0e14 	add.w	lr, r4, #20
   205b4:	f100 0b14 	add.w	fp, r0, #20
   205b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   205bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   205c0:	9301      	str	r3, [sp, #4]
   205c2:	46d9      	mov	r9, fp
   205c4:	f04f 0c00 	mov.w	ip, #0
   205c8:	9b01      	ldr	r3, [sp, #4]
   205ca:	f85e 0b04 	ldr.w	r0, [lr], #4
   205ce:	f853 af04 	ldr.w	sl, [r3, #4]!
   205d2:	9301      	str	r3, [sp, #4]
   205d4:	fa1f f38a 	uxth.w	r3, sl
   205d8:	4619      	mov	r1, r3
   205da:	b283      	uxth	r3, r0
   205dc:	1acb      	subs	r3, r1, r3
   205de:	0c00      	lsrs	r0, r0, #16
   205e0:	4463      	add	r3, ip
   205e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   205e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
   205ea:	b29b      	uxth	r3, r3
   205ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   205f0:	4576      	cmp	r6, lr
   205f2:	f849 3b04 	str.w	r3, [r9], #4
   205f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
   205fa:	d8e5      	bhi.n	205c8 <__mdiff+0x88>
   205fc:	1b33      	subs	r3, r6, r4
   205fe:	3b15      	subs	r3, #21
   20600:	f023 0303 	bic.w	r3, r3, #3
   20604:	3415      	adds	r4, #21
   20606:	3304      	adds	r3, #4
   20608:	42a6      	cmp	r6, r4
   2060a:	bf38      	it	cc
   2060c:	2304      	movcc	r3, #4
   2060e:	441d      	add	r5, r3
   20610:	445b      	add	r3, fp
   20612:	461e      	mov	r6, r3
   20614:	462c      	mov	r4, r5
   20616:	4544      	cmp	r4, r8
   20618:	d30e      	bcc.n	20638 <__mdiff+0xf8>
   2061a:	f108 0103 	add.w	r1, r8, #3
   2061e:	1b49      	subs	r1, r1, r5
   20620:	f021 0103 	bic.w	r1, r1, #3
   20624:	3d03      	subs	r5, #3
   20626:	45a8      	cmp	r8, r5
   20628:	bf38      	it	cc
   2062a:	2100      	movcc	r1, #0
   2062c:	440b      	add	r3, r1
   2062e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   20632:	b191      	cbz	r1, 2065a <__mdiff+0x11a>
   20634:	6117      	str	r7, [r2, #16]
   20636:	e79d      	b.n	20574 <__mdiff+0x34>
   20638:	f854 1b04 	ldr.w	r1, [r4], #4
   2063c:	46e6      	mov	lr, ip
   2063e:	0c08      	lsrs	r0, r1, #16
   20640:	fa1c fc81 	uxtah	ip, ip, r1
   20644:	4471      	add	r1, lr
   20646:	eb00 402c 	add.w	r0, r0, ip, asr #16
   2064a:	b289      	uxth	r1, r1
   2064c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   20650:	f846 1b04 	str.w	r1, [r6], #4
   20654:	ea4f 4c20 	mov.w	ip, r0, asr #16
   20658:	e7dd      	b.n	20616 <__mdiff+0xd6>
   2065a:	3f01      	subs	r7, #1
   2065c:	e7e7      	b.n	2062e <__mdiff+0xee>
   2065e:	bf00      	nop
   20660:	0002ac4f 	.word	0x0002ac4f
   20664:	0002ac60 	.word	0x0002ac60

00020668 <__d2b>:
   20668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2066c:	460f      	mov	r7, r1
   2066e:	2101      	movs	r1, #1
   20670:	ec59 8b10 	vmov	r8, r9, d0
   20674:	4616      	mov	r6, r2
   20676:	f7ff fd35 	bl	200e4 <_Balloc>
   2067a:	4604      	mov	r4, r0
   2067c:	b930      	cbnz	r0, 2068c <__d2b+0x24>
   2067e:	4602      	mov	r2, r0
   20680:	4b23      	ldr	r3, [pc, #140]	; (20710 <__d2b+0xa8>)
   20682:	4824      	ldr	r0, [pc, #144]	; (20714 <__d2b+0xac>)
   20684:	f240 310a 	movw	r1, #778	; 0x30a
   20688:	f000 f846 	bl	20718 <__assert_func>
   2068c:	f3c9 550a 	ubfx	r5, r9, #20, #11
   20690:	f3c9 0313 	ubfx	r3, r9, #0, #20
   20694:	b10d      	cbz	r5, 2069a <__d2b+0x32>
   20696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2069a:	9301      	str	r3, [sp, #4]
   2069c:	f1b8 0300 	subs.w	r3, r8, #0
   206a0:	d023      	beq.n	206ea <__d2b+0x82>
   206a2:	4668      	mov	r0, sp
   206a4:	9300      	str	r3, [sp, #0]
   206a6:	f007 f87f 	bl	277a8 <__lo0bits>
   206aa:	e9dd 1200 	ldrd	r1, r2, [sp]
   206ae:	b1d0      	cbz	r0, 206e6 <__d2b+0x7e>
   206b0:	f1c0 0320 	rsb	r3, r0, #32
   206b4:	fa02 f303 	lsl.w	r3, r2, r3
   206b8:	430b      	orrs	r3, r1
   206ba:	40c2      	lsrs	r2, r0
   206bc:	6163      	str	r3, [r4, #20]
   206be:	9201      	str	r2, [sp, #4]
   206c0:	9b01      	ldr	r3, [sp, #4]
   206c2:	61a3      	str	r3, [r4, #24]
   206c4:	2b00      	cmp	r3, #0
   206c6:	bf0c      	ite	eq
   206c8:	2201      	moveq	r2, #1
   206ca:	2202      	movne	r2, #2
   206cc:	6122      	str	r2, [r4, #16]
   206ce:	b1a5      	cbz	r5, 206fa <__d2b+0x92>
   206d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   206d4:	4405      	add	r5, r0
   206d6:	603d      	str	r5, [r7, #0]
   206d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   206dc:	6030      	str	r0, [r6, #0]
   206de:	4620      	mov	r0, r4
   206e0:	b003      	add	sp, #12
   206e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   206e6:	6161      	str	r1, [r4, #20]
   206e8:	e7ea      	b.n	206c0 <__d2b+0x58>
   206ea:	a801      	add	r0, sp, #4
   206ec:	f007 f85c 	bl	277a8 <__lo0bits>
   206f0:	9b01      	ldr	r3, [sp, #4]
   206f2:	6163      	str	r3, [r4, #20]
   206f4:	3020      	adds	r0, #32
   206f6:	2201      	movs	r2, #1
   206f8:	e7e8      	b.n	206cc <__d2b+0x64>
   206fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   206fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   20702:	6038      	str	r0, [r7, #0]
   20704:	6918      	ldr	r0, [r3, #16]
   20706:	f007 f82d 	bl	27764 <__hi0bits>
   2070a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2070e:	e7e5      	b.n	206dc <__d2b+0x74>
   20710:	0002ac4f 	.word	0x0002ac4f
   20714:	0002ac60 	.word	0x0002ac60

00020718 <__assert_func>:
   20718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2071a:	4614      	mov	r4, r2
   2071c:	461a      	mov	r2, r3
   2071e:	4b09      	ldr	r3, [pc, #36]	; (20744 <__assert_func+0x2c>)
   20720:	681b      	ldr	r3, [r3, #0]
   20722:	4605      	mov	r5, r0
   20724:	68d8      	ldr	r0, [r3, #12]
   20726:	b954      	cbnz	r4, 2073e <__assert_func+0x26>
   20728:	4b07      	ldr	r3, [pc, #28]	; (20748 <__assert_func+0x30>)
   2072a:	461c      	mov	r4, r3
   2072c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   20730:	9100      	str	r1, [sp, #0]
   20732:	462b      	mov	r3, r5
   20734:	4905      	ldr	r1, [pc, #20]	; (2074c <__assert_func+0x34>)
   20736:	f000 f80d 	bl	20754 <fiprintf>
   2073a:	f007 f8d3 	bl	278e4 <abort>
   2073e:	4b04      	ldr	r3, [pc, #16]	; (20750 <__assert_func+0x38>)
   20740:	e7f4      	b.n	2072c <__assert_func+0x14>
   20742:	bf00      	nop
   20744:	2000073c 	.word	0x2000073c
   20748:	00028c89 	.word	0x00028c89
   2074c:	0002ace2 	.word	0x0002ace2
   20750:	0002acd5 	.word	0x0002acd5

00020754 <fiprintf>:
   20754:	b40e      	push	{r1, r2, r3}
   20756:	b503      	push	{r0, r1, lr}
   20758:	4601      	mov	r1, r0
   2075a:	ab03      	add	r3, sp, #12
   2075c:	4805      	ldr	r0, [pc, #20]	; (20774 <fiprintf+0x20>)
   2075e:	f853 2b04 	ldr.w	r2, [r3], #4
   20762:	6800      	ldr	r0, [r0, #0]
   20764:	9301      	str	r3, [sp, #4]
   20766:	f000 f807 	bl	20778 <_vfiprintf_r>
   2076a:	b002      	add	sp, #8
   2076c:	f85d eb04 	ldr.w	lr, [sp], #4
   20770:	b003      	add	sp, #12
   20772:	4770      	bx	lr
   20774:	2000073c 	.word	0x2000073c

00020778 <_vfiprintf_r>:
   20778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2077c:	460d      	mov	r5, r1
   2077e:	b09d      	sub	sp, #116	; 0x74
   20780:	4614      	mov	r4, r2
   20782:	4698      	mov	r8, r3
   20784:	4606      	mov	r6, r0
   20786:	b118      	cbz	r0, 20790 <_vfiprintf_r+0x18>
   20788:	6983      	ldr	r3, [r0, #24]
   2078a:	b90b      	cbnz	r3, 20790 <_vfiprintf_r+0x18>
   2078c:	f000 fa5c 	bl	20c48 <__sinit>
   20790:	4b87      	ldr	r3, [pc, #540]	; (209b0 <_vfiprintf_r+0x238>)
   20792:	429d      	cmp	r5, r3
   20794:	d11b      	bne.n	207ce <_vfiprintf_r+0x56>
   20796:	6875      	ldr	r5, [r6, #4]
   20798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2079a:	07d9      	lsls	r1, r3, #31
   2079c:	d405      	bmi.n	207aa <_vfiprintf_r+0x32>
   2079e:	89ab      	ldrh	r3, [r5, #12]
   207a0:	059a      	lsls	r2, r3, #22
   207a2:	d402      	bmi.n	207aa <_vfiprintf_r+0x32>
   207a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   207a6:	f004 f961 	bl	24a6c <__retarget_lock_acquire_recursive>
   207aa:	89ab      	ldrh	r3, [r5, #12]
   207ac:	071b      	lsls	r3, r3, #28
   207ae:	d501      	bpl.n	207b4 <_vfiprintf_r+0x3c>
   207b0:	692b      	ldr	r3, [r5, #16]
   207b2:	b9eb      	cbnz	r3, 207f0 <_vfiprintf_r+0x78>
   207b4:	4629      	mov	r1, r5
   207b6:	4630      	mov	r0, r6
   207b8:	f000 f95c 	bl	20a74 <__swsetup_r>
   207bc:	b1c0      	cbz	r0, 207f0 <_vfiprintf_r+0x78>
   207be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   207c0:	07dc      	lsls	r4, r3, #31
   207c2:	d50e      	bpl.n	207e2 <_vfiprintf_r+0x6a>
   207c4:	f04f 30ff 	mov.w	r0, #4294967295
   207c8:	b01d      	add	sp, #116	; 0x74
   207ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207ce:	4b79      	ldr	r3, [pc, #484]	; (209b4 <_vfiprintf_r+0x23c>)
   207d0:	429d      	cmp	r5, r3
   207d2:	d101      	bne.n	207d8 <_vfiprintf_r+0x60>
   207d4:	68b5      	ldr	r5, [r6, #8]
   207d6:	e7df      	b.n	20798 <_vfiprintf_r+0x20>
   207d8:	4b77      	ldr	r3, [pc, #476]	; (209b8 <_vfiprintf_r+0x240>)
   207da:	429d      	cmp	r5, r3
   207dc:	bf08      	it	eq
   207de:	68f5      	ldreq	r5, [r6, #12]
   207e0:	e7da      	b.n	20798 <_vfiprintf_r+0x20>
   207e2:	89ab      	ldrh	r3, [r5, #12]
   207e4:	0598      	lsls	r0, r3, #22
   207e6:	d4ed      	bmi.n	207c4 <_vfiprintf_r+0x4c>
   207e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   207ea:	f004 f945 	bl	24a78 <__retarget_lock_release_recursive>
   207ee:	e7e9      	b.n	207c4 <_vfiprintf_r+0x4c>
   207f0:	2300      	movs	r3, #0
   207f2:	9309      	str	r3, [sp, #36]	; 0x24
   207f4:	2320      	movs	r3, #32
   207f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   207fa:	f8cd 800c 	str.w	r8, [sp, #12]
   207fe:	2330      	movs	r3, #48	; 0x30
   20800:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 209bc <_vfiprintf_r+0x244>
   20804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   20808:	f04f 0901 	mov.w	r9, #1
   2080c:	4623      	mov	r3, r4
   2080e:	469a      	mov	sl, r3
   20810:	f813 2b01 	ldrb.w	r2, [r3], #1
   20814:	b10a      	cbz	r2, 2081a <_vfiprintf_r+0xa2>
   20816:	2a25      	cmp	r2, #37	; 0x25
   20818:	d1f9      	bne.n	2080e <_vfiprintf_r+0x96>
   2081a:	ebba 0b04 	subs.w	fp, sl, r4
   2081e:	d00b      	beq.n	20838 <_vfiprintf_r+0xc0>
   20820:	465b      	mov	r3, fp
   20822:	4622      	mov	r2, r4
   20824:	4629      	mov	r1, r5
   20826:	4630      	mov	r0, r6
   20828:	f007 f83d 	bl	278a6 <__sfputs_r>
   2082c:	3001      	adds	r0, #1
   2082e:	f000 80a6 	beq.w	2097e <_vfiprintf_r+0x206>
   20832:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20834:	445a      	add	r2, fp
   20836:	9209      	str	r2, [sp, #36]	; 0x24
   20838:	f89a 3000 	ldrb.w	r3, [sl]
   2083c:	2b00      	cmp	r3, #0
   2083e:	f000 809e 	beq.w	2097e <_vfiprintf_r+0x206>
   20842:	2300      	movs	r3, #0
   20844:	f04f 32ff 	mov.w	r2, #4294967295
   20848:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2084c:	f10a 0a01 	add.w	sl, sl, #1
   20850:	9304      	str	r3, [sp, #16]
   20852:	9307      	str	r3, [sp, #28]
   20854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   20858:	931a      	str	r3, [sp, #104]	; 0x68
   2085a:	4654      	mov	r4, sl
   2085c:	4857      	ldr	r0, [pc, #348]	; (209bc <_vfiprintf_r+0x244>)
   2085e:	f814 1b01 	ldrb.w	r1, [r4], #1
   20862:	2205      	movs	r2, #5
   20864:	f7df fc4c 	bl	100 <memchr>
   20868:	9b04      	ldr	r3, [sp, #16]
   2086a:	b9d0      	cbnz	r0, 208a2 <_vfiprintf_r+0x12a>
   2086c:	06d9      	lsls	r1, r3, #27
   2086e:	bf44      	itt	mi
   20870:	2220      	movmi	r2, #32
   20872:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   20876:	071a      	lsls	r2, r3, #28
   20878:	bf44      	itt	mi
   2087a:	222b      	movmi	r2, #43	; 0x2b
   2087c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   20880:	f89a 2000 	ldrb.w	r2, [sl]
   20884:	2a2a      	cmp	r2, #42	; 0x2a
   20886:	d014      	beq.n	208b2 <_vfiprintf_r+0x13a>
   20888:	9a07      	ldr	r2, [sp, #28]
   2088a:	4654      	mov	r4, sl
   2088c:	2000      	movs	r0, #0
   2088e:	f04f 0c0a 	mov.w	ip, #10
   20892:	4621      	mov	r1, r4
   20894:	f811 3b01 	ldrb.w	r3, [r1], #1
   20898:	3b30      	subs	r3, #48	; 0x30
   2089a:	2b09      	cmp	r3, #9
   2089c:	d94a      	bls.n	20934 <_vfiprintf_r+0x1bc>
   2089e:	b970      	cbnz	r0, 208be <_vfiprintf_r+0x146>
   208a0:	e014      	b.n	208cc <_vfiprintf_r+0x154>
   208a2:	eba0 0008 	sub.w	r0, r0, r8
   208a6:	fa09 f000 	lsl.w	r0, r9, r0
   208aa:	4318      	orrs	r0, r3
   208ac:	9004      	str	r0, [sp, #16]
   208ae:	46a2      	mov	sl, r4
   208b0:	e7d3      	b.n	2085a <_vfiprintf_r+0xe2>
   208b2:	9a03      	ldr	r2, [sp, #12]
   208b4:	1d11      	adds	r1, r2, #4
   208b6:	6812      	ldr	r2, [r2, #0]
   208b8:	9103      	str	r1, [sp, #12]
   208ba:	2a00      	cmp	r2, #0
   208bc:	db01      	blt.n	208c2 <_vfiprintf_r+0x14a>
   208be:	9207      	str	r2, [sp, #28]
   208c0:	e004      	b.n	208cc <_vfiprintf_r+0x154>
   208c2:	4252      	negs	r2, r2
   208c4:	f043 0302 	orr.w	r3, r3, #2
   208c8:	9207      	str	r2, [sp, #28]
   208ca:	9304      	str	r3, [sp, #16]
   208cc:	7823      	ldrb	r3, [r4, #0]
   208ce:	2b2e      	cmp	r3, #46	; 0x2e
   208d0:	d10a      	bne.n	208e8 <_vfiprintf_r+0x170>
   208d2:	7863      	ldrb	r3, [r4, #1]
   208d4:	2b2a      	cmp	r3, #42	; 0x2a
   208d6:	d132      	bne.n	2093e <_vfiprintf_r+0x1c6>
   208d8:	9b03      	ldr	r3, [sp, #12]
   208da:	1d1a      	adds	r2, r3, #4
   208dc:	681b      	ldr	r3, [r3, #0]
   208de:	9203      	str	r2, [sp, #12]
   208e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   208e4:	3402      	adds	r4, #2
   208e6:	9305      	str	r3, [sp, #20]
   208e8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 209cc <_vfiprintf_r+0x254>
   208ec:	7821      	ldrb	r1, [r4, #0]
   208ee:	2203      	movs	r2, #3
   208f0:	4650      	mov	r0, sl
   208f2:	f7df fc05 	bl	100 <memchr>
   208f6:	b138      	cbz	r0, 20908 <_vfiprintf_r+0x190>
   208f8:	9b04      	ldr	r3, [sp, #16]
   208fa:	eba0 000a 	sub.w	r0, r0, sl
   208fe:	2240      	movs	r2, #64	; 0x40
   20900:	4082      	lsls	r2, r0
   20902:	4313      	orrs	r3, r2
   20904:	3401      	adds	r4, #1
   20906:	9304      	str	r3, [sp, #16]
   20908:	f814 1b01 	ldrb.w	r1, [r4], #1
   2090c:	482c      	ldr	r0, [pc, #176]	; (209c0 <_vfiprintf_r+0x248>)
   2090e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   20912:	2206      	movs	r2, #6
   20914:	f7df fbf4 	bl	100 <memchr>
   20918:	2800      	cmp	r0, #0
   2091a:	d03f      	beq.n	2099c <_vfiprintf_r+0x224>
   2091c:	4b29      	ldr	r3, [pc, #164]	; (209c4 <_vfiprintf_r+0x24c>)
   2091e:	bb1b      	cbnz	r3, 20968 <_vfiprintf_r+0x1f0>
   20920:	9b03      	ldr	r3, [sp, #12]
   20922:	3307      	adds	r3, #7
   20924:	f023 0307 	bic.w	r3, r3, #7
   20928:	3308      	adds	r3, #8
   2092a:	9303      	str	r3, [sp, #12]
   2092c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2092e:	443b      	add	r3, r7
   20930:	9309      	str	r3, [sp, #36]	; 0x24
   20932:	e76b      	b.n	2080c <_vfiprintf_r+0x94>
   20934:	fb0c 3202 	mla	r2, ip, r2, r3
   20938:	460c      	mov	r4, r1
   2093a:	2001      	movs	r0, #1
   2093c:	e7a9      	b.n	20892 <_vfiprintf_r+0x11a>
   2093e:	2300      	movs	r3, #0
   20940:	3401      	adds	r4, #1
   20942:	9305      	str	r3, [sp, #20]
   20944:	4619      	mov	r1, r3
   20946:	f04f 0c0a 	mov.w	ip, #10
   2094a:	4620      	mov	r0, r4
   2094c:	f810 2b01 	ldrb.w	r2, [r0], #1
   20950:	3a30      	subs	r2, #48	; 0x30
   20952:	2a09      	cmp	r2, #9
   20954:	d903      	bls.n	2095e <_vfiprintf_r+0x1e6>
   20956:	2b00      	cmp	r3, #0
   20958:	d0c6      	beq.n	208e8 <_vfiprintf_r+0x170>
   2095a:	9105      	str	r1, [sp, #20]
   2095c:	e7c4      	b.n	208e8 <_vfiprintf_r+0x170>
   2095e:	fb0c 2101 	mla	r1, ip, r1, r2
   20962:	4604      	mov	r4, r0
   20964:	2301      	movs	r3, #1
   20966:	e7f0      	b.n	2094a <_vfiprintf_r+0x1d2>
   20968:	ab03      	add	r3, sp, #12
   2096a:	9300      	str	r3, [sp, #0]
   2096c:	462a      	mov	r2, r5
   2096e:	4b16      	ldr	r3, [pc, #88]	; (209c8 <_vfiprintf_r+0x250>)
   20970:	a904      	add	r1, sp, #16
   20972:	4630      	mov	r0, r6
   20974:	f7ff f836 	bl	1f9e4 <_printf_float>
   20978:	4607      	mov	r7, r0
   2097a:	1c78      	adds	r0, r7, #1
   2097c:	d1d6      	bne.n	2092c <_vfiprintf_r+0x1b4>
   2097e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   20980:	07d9      	lsls	r1, r3, #31
   20982:	d405      	bmi.n	20990 <_vfiprintf_r+0x218>
   20984:	89ab      	ldrh	r3, [r5, #12]
   20986:	059a      	lsls	r2, r3, #22
   20988:	d402      	bmi.n	20990 <_vfiprintf_r+0x218>
   2098a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2098c:	f004 f874 	bl	24a78 <__retarget_lock_release_recursive>
   20990:	89ab      	ldrh	r3, [r5, #12]
   20992:	065b      	lsls	r3, r3, #25
   20994:	f53f af16 	bmi.w	207c4 <_vfiprintf_r+0x4c>
   20998:	9809      	ldr	r0, [sp, #36]	; 0x24
   2099a:	e715      	b.n	207c8 <_vfiprintf_r+0x50>
   2099c:	ab03      	add	r3, sp, #12
   2099e:	9300      	str	r3, [sp, #0]
   209a0:	462a      	mov	r2, r5
   209a2:	4b09      	ldr	r3, [pc, #36]	; (209c8 <_vfiprintf_r+0x250>)
   209a4:	a904      	add	r1, sp, #16
   209a6:	4630      	mov	r0, r6
   209a8:	f7ff fa4e 	bl	1fe48 <_printf_i>
   209ac:	e7e4      	b.n	20978 <_vfiprintf_r+0x200>
   209ae:	bf00      	nop
   209b0:	00028a78 	.word	0x00028a78
   209b4:	00028a58 	.word	0x00028a58
   209b8:	00028a38 	.word	0x00028a38
   209bc:	0002ad17 	.word	0x0002ad17
   209c0:	0002ad21 	.word	0x0002ad21
   209c4:	0001f9e5 	.word	0x0001f9e5
   209c8:	000278a7 	.word	0x000278a7
   209cc:	0002ad1d 	.word	0x0002ad1d

000209d0 <__swbuf_r>:
   209d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209d2:	460e      	mov	r6, r1
   209d4:	4614      	mov	r4, r2
   209d6:	4605      	mov	r5, r0
   209d8:	b118      	cbz	r0, 209e2 <__swbuf_r+0x12>
   209da:	6983      	ldr	r3, [r0, #24]
   209dc:	b90b      	cbnz	r3, 209e2 <__swbuf_r+0x12>
   209de:	f000 f933 	bl	20c48 <__sinit>
   209e2:	4b21      	ldr	r3, [pc, #132]	; (20a68 <__swbuf_r+0x98>)
   209e4:	429c      	cmp	r4, r3
   209e6:	d110      	bne.n	20a0a <__swbuf_r+0x3a>
   209e8:	686c      	ldr	r4, [r5, #4]
   209ea:	69a3      	ldr	r3, [r4, #24]
   209ec:	60a3      	str	r3, [r4, #8]
   209ee:	89a3      	ldrh	r3, [r4, #12]
   209f0:	071a      	lsls	r2, r3, #28
   209f2:	d501      	bpl.n	209f8 <__swbuf_r+0x28>
   209f4:	6923      	ldr	r3, [r4, #16]
   209f6:	b993      	cbnz	r3, 20a1e <__swbuf_r+0x4e>
   209f8:	4621      	mov	r1, r4
   209fa:	4628      	mov	r0, r5
   209fc:	f000 f83a 	bl	20a74 <__swsetup_r>
   20a00:	b168      	cbz	r0, 20a1e <__swbuf_r+0x4e>
   20a02:	f04f 37ff 	mov.w	r7, #4294967295
   20a06:	4638      	mov	r0, r7
   20a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20a0a:	4b18      	ldr	r3, [pc, #96]	; (20a6c <__swbuf_r+0x9c>)
   20a0c:	429c      	cmp	r4, r3
   20a0e:	d101      	bne.n	20a14 <__swbuf_r+0x44>
   20a10:	68ac      	ldr	r4, [r5, #8]
   20a12:	e7ea      	b.n	209ea <__swbuf_r+0x1a>
   20a14:	4b16      	ldr	r3, [pc, #88]	; (20a70 <__swbuf_r+0xa0>)
   20a16:	429c      	cmp	r4, r3
   20a18:	bf08      	it	eq
   20a1a:	68ec      	ldreq	r4, [r5, #12]
   20a1c:	e7e5      	b.n	209ea <__swbuf_r+0x1a>
   20a1e:	6923      	ldr	r3, [r4, #16]
   20a20:	6820      	ldr	r0, [r4, #0]
   20a22:	1ac0      	subs	r0, r0, r3
   20a24:	6963      	ldr	r3, [r4, #20]
   20a26:	b2f6      	uxtb	r6, r6
   20a28:	4283      	cmp	r3, r0
   20a2a:	4637      	mov	r7, r6
   20a2c:	dc05      	bgt.n	20a3a <__swbuf_r+0x6a>
   20a2e:	4621      	mov	r1, r4
   20a30:	4628      	mov	r0, r5
   20a32:	f000 f88b 	bl	20b4c <_fflush_r>
   20a36:	2800      	cmp	r0, #0
   20a38:	d1e3      	bne.n	20a02 <__swbuf_r+0x32>
   20a3a:	68a3      	ldr	r3, [r4, #8]
   20a3c:	3b01      	subs	r3, #1
   20a3e:	60a3      	str	r3, [r4, #8]
   20a40:	6823      	ldr	r3, [r4, #0]
   20a42:	1c5a      	adds	r2, r3, #1
   20a44:	6022      	str	r2, [r4, #0]
   20a46:	701e      	strb	r6, [r3, #0]
   20a48:	6963      	ldr	r3, [r4, #20]
   20a4a:	3001      	adds	r0, #1
   20a4c:	4283      	cmp	r3, r0
   20a4e:	d004      	beq.n	20a5a <__swbuf_r+0x8a>
   20a50:	89a3      	ldrh	r3, [r4, #12]
   20a52:	07db      	lsls	r3, r3, #31
   20a54:	d5d7      	bpl.n	20a06 <__swbuf_r+0x36>
   20a56:	2e0a      	cmp	r6, #10
   20a58:	d1d5      	bne.n	20a06 <__swbuf_r+0x36>
   20a5a:	4621      	mov	r1, r4
   20a5c:	4628      	mov	r0, r5
   20a5e:	f000 f875 	bl	20b4c <_fflush_r>
   20a62:	2800      	cmp	r0, #0
   20a64:	d0cf      	beq.n	20a06 <__swbuf_r+0x36>
   20a66:	e7cc      	b.n	20a02 <__swbuf_r+0x32>
   20a68:	00028a78 	.word	0x00028a78
   20a6c:	00028a58 	.word	0x00028a58
   20a70:	00028a38 	.word	0x00028a38

00020a74 <__swsetup_r>:
   20a74:	4b31      	ldr	r3, [pc, #196]	; (20b3c <__swsetup_r+0xc8>)
   20a76:	b570      	push	{r4, r5, r6, lr}
   20a78:	681d      	ldr	r5, [r3, #0]
   20a7a:	4606      	mov	r6, r0
   20a7c:	460c      	mov	r4, r1
   20a7e:	b125      	cbz	r5, 20a8a <__swsetup_r+0x16>
   20a80:	69ab      	ldr	r3, [r5, #24]
   20a82:	b913      	cbnz	r3, 20a8a <__swsetup_r+0x16>
   20a84:	4628      	mov	r0, r5
   20a86:	f000 f8df 	bl	20c48 <__sinit>
   20a8a:	4b2d      	ldr	r3, [pc, #180]	; (20b40 <__swsetup_r+0xcc>)
   20a8c:	429c      	cmp	r4, r3
   20a8e:	d10e      	bne.n	20aae <__swsetup_r+0x3a>
   20a90:	686c      	ldr	r4, [r5, #4]
   20a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20a96:	071a      	lsls	r2, r3, #28
   20a98:	d42c      	bmi.n	20af4 <__swsetup_r+0x80>
   20a9a:	06dd      	lsls	r5, r3, #27
   20a9c:	d411      	bmi.n	20ac2 <__swsetup_r+0x4e>
   20a9e:	2209      	movs	r2, #9
   20aa0:	6032      	str	r2, [r6, #0]
   20aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20aa6:	81a3      	strh	r3, [r4, #12]
   20aa8:	f04f 30ff 	mov.w	r0, #4294967295
   20aac:	e03d      	b.n	20b2a <__swsetup_r+0xb6>
   20aae:	4b25      	ldr	r3, [pc, #148]	; (20b44 <__swsetup_r+0xd0>)
   20ab0:	429c      	cmp	r4, r3
   20ab2:	d101      	bne.n	20ab8 <__swsetup_r+0x44>
   20ab4:	68ac      	ldr	r4, [r5, #8]
   20ab6:	e7ec      	b.n	20a92 <__swsetup_r+0x1e>
   20ab8:	4b23      	ldr	r3, [pc, #140]	; (20b48 <__swsetup_r+0xd4>)
   20aba:	429c      	cmp	r4, r3
   20abc:	bf08      	it	eq
   20abe:	68ec      	ldreq	r4, [r5, #12]
   20ac0:	e7e7      	b.n	20a92 <__swsetup_r+0x1e>
   20ac2:	0758      	lsls	r0, r3, #29
   20ac4:	d512      	bpl.n	20aec <__swsetup_r+0x78>
   20ac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   20ac8:	b141      	cbz	r1, 20adc <__swsetup_r+0x68>
   20aca:	f104 0344 	add.w	r3, r4, #68	; 0x44
   20ace:	4299      	cmp	r1, r3
   20ad0:	d002      	beq.n	20ad8 <__swsetup_r+0x64>
   20ad2:	4630      	mov	r0, r6
   20ad4:	f7fe fee2 	bl	1f89c <_free_r>
   20ad8:	2300      	movs	r3, #0
   20ada:	6363      	str	r3, [r4, #52]	; 0x34
   20adc:	89a3      	ldrh	r3, [r4, #12]
   20ade:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   20ae2:	81a3      	strh	r3, [r4, #12]
   20ae4:	2300      	movs	r3, #0
   20ae6:	6063      	str	r3, [r4, #4]
   20ae8:	6923      	ldr	r3, [r4, #16]
   20aea:	6023      	str	r3, [r4, #0]
   20aec:	89a3      	ldrh	r3, [r4, #12]
   20aee:	f043 0308 	orr.w	r3, r3, #8
   20af2:	81a3      	strh	r3, [r4, #12]
   20af4:	6923      	ldr	r3, [r4, #16]
   20af6:	b94b      	cbnz	r3, 20b0c <__swsetup_r+0x98>
   20af8:	89a3      	ldrh	r3, [r4, #12]
   20afa:	f403 7320 	and.w	r3, r3, #640	; 0x280
   20afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   20b02:	d003      	beq.n	20b0c <__swsetup_r+0x98>
   20b04:	4621      	mov	r1, r4
   20b06:	4630      	mov	r0, r6
   20b08:	f000 f91c 	bl	20d44 <__smakebuf_r>
   20b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20b10:	f013 0201 	ands.w	r2, r3, #1
   20b14:	d00a      	beq.n	20b2c <__swsetup_r+0xb8>
   20b16:	2200      	movs	r2, #0
   20b18:	60a2      	str	r2, [r4, #8]
   20b1a:	6962      	ldr	r2, [r4, #20]
   20b1c:	4252      	negs	r2, r2
   20b1e:	61a2      	str	r2, [r4, #24]
   20b20:	6922      	ldr	r2, [r4, #16]
   20b22:	b942      	cbnz	r2, 20b36 <__swsetup_r+0xc2>
   20b24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   20b28:	d1bb      	bne.n	20aa2 <__swsetup_r+0x2e>
   20b2a:	bd70      	pop	{r4, r5, r6, pc}
   20b2c:	0799      	lsls	r1, r3, #30
   20b2e:	bf58      	it	pl
   20b30:	6962      	ldrpl	r2, [r4, #20]
   20b32:	60a2      	str	r2, [r4, #8]
   20b34:	e7f4      	b.n	20b20 <__swsetup_r+0xac>
   20b36:	2000      	movs	r0, #0
   20b38:	e7f7      	b.n	20b2a <__swsetup_r+0xb6>
   20b3a:	bf00      	nop
   20b3c:	2000073c 	.word	0x2000073c
   20b40:	00028a78 	.word	0x00028a78
   20b44:	00028a58 	.word	0x00028a58
   20b48:	00028a38 	.word	0x00028a38

00020b4c <_fflush_r>:
   20b4c:	b538      	push	{r3, r4, r5, lr}
   20b4e:	690b      	ldr	r3, [r1, #16]
   20b50:	4605      	mov	r5, r0
   20b52:	460c      	mov	r4, r1
   20b54:	b913      	cbnz	r3, 20b5c <_fflush_r+0x10>
   20b56:	2500      	movs	r5, #0
   20b58:	4628      	mov	r0, r5
   20b5a:	bd38      	pop	{r3, r4, r5, pc}
   20b5c:	b118      	cbz	r0, 20b66 <_fflush_r+0x1a>
   20b5e:	6983      	ldr	r3, [r0, #24]
   20b60:	b90b      	cbnz	r3, 20b66 <_fflush_r+0x1a>
   20b62:	f000 f871 	bl	20c48 <__sinit>
   20b66:	4b14      	ldr	r3, [pc, #80]	; (20bb8 <_fflush_r+0x6c>)
   20b68:	429c      	cmp	r4, r3
   20b6a:	d11b      	bne.n	20ba4 <_fflush_r+0x58>
   20b6c:	686c      	ldr	r4, [r5, #4]
   20b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20b72:	2b00      	cmp	r3, #0
   20b74:	d0ef      	beq.n	20b56 <_fflush_r+0xa>
   20b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
   20b78:	07d0      	lsls	r0, r2, #31
   20b7a:	d404      	bmi.n	20b86 <_fflush_r+0x3a>
   20b7c:	0599      	lsls	r1, r3, #22
   20b7e:	d402      	bmi.n	20b86 <_fflush_r+0x3a>
   20b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20b82:	f003 ff73 	bl	24a6c <__retarget_lock_acquire_recursive>
   20b86:	4628      	mov	r0, r5
   20b88:	4621      	mov	r1, r4
   20b8a:	f006 feb2 	bl	278f2 <__sflush_r>
   20b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20b90:	07da      	lsls	r2, r3, #31
   20b92:	4605      	mov	r5, r0
   20b94:	d4e0      	bmi.n	20b58 <_fflush_r+0xc>
   20b96:	89a3      	ldrh	r3, [r4, #12]
   20b98:	059b      	lsls	r3, r3, #22
   20b9a:	d4dd      	bmi.n	20b58 <_fflush_r+0xc>
   20b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   20b9e:	f003 ff6b 	bl	24a78 <__retarget_lock_release_recursive>
   20ba2:	e7d9      	b.n	20b58 <_fflush_r+0xc>
   20ba4:	4b05      	ldr	r3, [pc, #20]	; (20bbc <_fflush_r+0x70>)
   20ba6:	429c      	cmp	r4, r3
   20ba8:	d101      	bne.n	20bae <_fflush_r+0x62>
   20baa:	68ac      	ldr	r4, [r5, #8]
   20bac:	e7df      	b.n	20b6e <_fflush_r+0x22>
   20bae:	4b04      	ldr	r3, [pc, #16]	; (20bc0 <_fflush_r+0x74>)
   20bb0:	429c      	cmp	r4, r3
   20bb2:	bf08      	it	eq
   20bb4:	68ec      	ldreq	r4, [r5, #12]
   20bb6:	e7da      	b.n	20b6e <_fflush_r+0x22>
   20bb8:	00028a78 	.word	0x00028a78
   20bbc:	00028a58 	.word	0x00028a58
   20bc0:	00028a38 	.word	0x00028a38

00020bc4 <std>:
   20bc4:	2300      	movs	r3, #0
   20bc6:	b510      	push	{r4, lr}
   20bc8:	4604      	mov	r4, r0
   20bca:	e9c0 3300 	strd	r3, r3, [r0]
   20bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
   20bd2:	6083      	str	r3, [r0, #8]
   20bd4:	8181      	strh	r1, [r0, #12]
   20bd6:	6643      	str	r3, [r0, #100]	; 0x64
   20bd8:	81c2      	strh	r2, [r0, #14]
   20bda:	6183      	str	r3, [r0, #24]
   20bdc:	4619      	mov	r1, r3
   20bde:	2208      	movs	r2, #8
   20be0:	305c      	adds	r0, #92	; 0x5c
   20be2:	f006 fbf9 	bl	273d8 <memset>
   20be6:	4b05      	ldr	r3, [pc, #20]	; (20bfc <std+0x38>)
   20be8:	6263      	str	r3, [r4, #36]	; 0x24
   20bea:	4b05      	ldr	r3, [pc, #20]	; (20c00 <std+0x3c>)
   20bec:	62a3      	str	r3, [r4, #40]	; 0x28
   20bee:	4b05      	ldr	r3, [pc, #20]	; (20c04 <std+0x40>)
   20bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
   20bf2:	4b05      	ldr	r3, [pc, #20]	; (20c08 <std+0x44>)
   20bf4:	6224      	str	r4, [r4, #32]
   20bf6:	6323      	str	r3, [r4, #48]	; 0x30
   20bf8:	bd10      	pop	{r4, pc}
   20bfa:	bf00      	nop
   20bfc:	00027b39 	.word	0x00027b39
   20c00:	00027b5b 	.word	0x00027b5b
   20c04:	00027b93 	.word	0x00027b93
   20c08:	00027bb7 	.word	0x00027bb7

00020c0c <_cleanup_r>:
   20c0c:	4901      	ldr	r1, [pc, #4]	; (20c14 <_cleanup_r+0x8>)
   20c0e:	f006 bf0a 	b.w	27a26 <_fwalk_reent>
   20c12:	bf00      	nop
   20c14:	00020b4d 	.word	0x00020b4d

00020c18 <__sfp_lock_acquire>:
   20c18:	4801      	ldr	r0, [pc, #4]	; (20c20 <__sfp_lock_acquire+0x8>)
   20c1a:	f003 bf27 	b.w	24a6c <__retarget_lock_acquire_recursive>
   20c1e:	bf00      	nop
   20c20:	20000b9c 	.word	0x20000b9c

00020c24 <__sfp_lock_release>:
   20c24:	4801      	ldr	r0, [pc, #4]	; (20c2c <__sfp_lock_release+0x8>)
   20c26:	f003 bf27 	b.w	24a78 <__retarget_lock_release_recursive>
   20c2a:	bf00      	nop
   20c2c:	20000b9c 	.word	0x20000b9c

00020c30 <__sinit_lock_acquire>:
   20c30:	4801      	ldr	r0, [pc, #4]	; (20c38 <__sinit_lock_acquire+0x8>)
   20c32:	f003 bf1b 	b.w	24a6c <__retarget_lock_acquire_recursive>
   20c36:	bf00      	nop
   20c38:	20000bb0 	.word	0x20000bb0

00020c3c <__sinit_lock_release>:
   20c3c:	4801      	ldr	r0, [pc, #4]	; (20c44 <__sinit_lock_release+0x8>)
   20c3e:	f003 bf1b 	b.w	24a78 <__retarget_lock_release_recursive>
   20c42:	bf00      	nop
   20c44:	20000bb0 	.word	0x20000bb0

00020c48 <__sinit>:
   20c48:	b510      	push	{r4, lr}
   20c4a:	4604      	mov	r4, r0
   20c4c:	f7ff fff0 	bl	20c30 <__sinit_lock_acquire>
   20c50:	69a3      	ldr	r3, [r4, #24]
   20c52:	b11b      	cbz	r3, 20c5c <__sinit+0x14>
   20c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20c58:	f7ff bff0 	b.w	20c3c <__sinit_lock_release>
   20c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   20c60:	6523      	str	r3, [r4, #80]	; 0x50
   20c62:	4b13      	ldr	r3, [pc, #76]	; (20cb0 <__sinit+0x68>)
   20c64:	4a13      	ldr	r2, [pc, #76]	; (20cb4 <__sinit+0x6c>)
   20c66:	681b      	ldr	r3, [r3, #0]
   20c68:	62a2      	str	r2, [r4, #40]	; 0x28
   20c6a:	42a3      	cmp	r3, r4
   20c6c:	bf04      	itt	eq
   20c6e:	2301      	moveq	r3, #1
   20c70:	61a3      	streq	r3, [r4, #24]
   20c72:	4620      	mov	r0, r4
   20c74:	f000 f820 	bl	20cb8 <__sfp>
   20c78:	6060      	str	r0, [r4, #4]
   20c7a:	4620      	mov	r0, r4
   20c7c:	f000 f81c 	bl	20cb8 <__sfp>
   20c80:	60a0      	str	r0, [r4, #8]
   20c82:	4620      	mov	r0, r4
   20c84:	f000 f818 	bl	20cb8 <__sfp>
   20c88:	2200      	movs	r2, #0
   20c8a:	60e0      	str	r0, [r4, #12]
   20c8c:	2104      	movs	r1, #4
   20c8e:	6860      	ldr	r0, [r4, #4]
   20c90:	f7ff ff98 	bl	20bc4 <std>
   20c94:	68a0      	ldr	r0, [r4, #8]
   20c96:	2201      	movs	r2, #1
   20c98:	2109      	movs	r1, #9
   20c9a:	f7ff ff93 	bl	20bc4 <std>
   20c9e:	68e0      	ldr	r0, [r4, #12]
   20ca0:	2202      	movs	r2, #2
   20ca2:	2112      	movs	r1, #18
   20ca4:	f7ff ff8e 	bl	20bc4 <std>
   20ca8:	2301      	movs	r3, #1
   20caa:	61a3      	str	r3, [r4, #24]
   20cac:	e7d2      	b.n	20c54 <__sinit+0xc>
   20cae:	bf00      	nop
   20cb0:	00028a28 	.word	0x00028a28
   20cb4:	00020c0d 	.word	0x00020c0d

00020cb8 <__sfp>:
   20cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cba:	4607      	mov	r7, r0
   20cbc:	f7ff ffac 	bl	20c18 <__sfp_lock_acquire>
   20cc0:	4b1e      	ldr	r3, [pc, #120]	; (20d3c <__sfp+0x84>)
   20cc2:	681e      	ldr	r6, [r3, #0]
   20cc4:	69b3      	ldr	r3, [r6, #24]
   20cc6:	b913      	cbnz	r3, 20cce <__sfp+0x16>
   20cc8:	4630      	mov	r0, r6
   20cca:	f7ff ffbd 	bl	20c48 <__sinit>
   20cce:	3648      	adds	r6, #72	; 0x48
   20cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   20cd4:	3b01      	subs	r3, #1
   20cd6:	d503      	bpl.n	20ce0 <__sfp+0x28>
   20cd8:	6833      	ldr	r3, [r6, #0]
   20cda:	b30b      	cbz	r3, 20d20 <__sfp+0x68>
   20cdc:	6836      	ldr	r6, [r6, #0]
   20cde:	e7f7      	b.n	20cd0 <__sfp+0x18>
   20ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   20ce4:	b9d5      	cbnz	r5, 20d1c <__sfp+0x64>
   20ce6:	4b16      	ldr	r3, [pc, #88]	; (20d40 <__sfp+0x88>)
   20ce8:	60e3      	str	r3, [r4, #12]
   20cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20cee:	6665      	str	r5, [r4, #100]	; 0x64
   20cf0:	f003 feb2 	bl	24a58 <__retarget_lock_init_recursive>
   20cf4:	f7ff ff96 	bl	20c24 <__sfp_lock_release>
   20cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   20cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
   20d00:	6025      	str	r5, [r4, #0]
   20d02:	61a5      	str	r5, [r4, #24]
   20d04:	2208      	movs	r2, #8
   20d06:	4629      	mov	r1, r5
   20d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   20d0c:	f006 fb64 	bl	273d8 <memset>
   20d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   20d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   20d18:	4620      	mov	r0, r4
   20d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d1c:	3468      	adds	r4, #104	; 0x68
   20d1e:	e7d9      	b.n	20cd4 <__sfp+0x1c>
   20d20:	2104      	movs	r1, #4
   20d22:	4638      	mov	r0, r7
   20d24:	f006 fe69 	bl	279fa <__sfmoreglue>
   20d28:	4604      	mov	r4, r0
   20d2a:	6030      	str	r0, [r6, #0]
   20d2c:	2800      	cmp	r0, #0
   20d2e:	d1d5      	bne.n	20cdc <__sfp+0x24>
   20d30:	f7ff ff78 	bl	20c24 <__sfp_lock_release>
   20d34:	230c      	movs	r3, #12
   20d36:	603b      	str	r3, [r7, #0]
   20d38:	e7ee      	b.n	20d18 <__sfp+0x60>
   20d3a:	bf00      	nop
   20d3c:	00028a28 	.word	0x00028a28
   20d40:	ffff0001 	.word	0xffff0001

00020d44 <__smakebuf_r>:
   20d44:	898b      	ldrh	r3, [r1, #12]
   20d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20d48:	079d      	lsls	r5, r3, #30
   20d4a:	4606      	mov	r6, r0
   20d4c:	460c      	mov	r4, r1
   20d4e:	d507      	bpl.n	20d60 <__smakebuf_r+0x1c>
   20d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
   20d54:	6023      	str	r3, [r4, #0]
   20d56:	6123      	str	r3, [r4, #16]
   20d58:	2301      	movs	r3, #1
   20d5a:	6163      	str	r3, [r4, #20]
   20d5c:	b003      	add	sp, #12
   20d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d60:	ab01      	add	r3, sp, #4
   20d62:	466a      	mov	r2, sp
   20d64:	f006 fe7e 	bl	27a64 <__swhatbuf_r>
   20d68:	9f00      	ldr	r7, [sp, #0]
   20d6a:	4605      	mov	r5, r0
   20d6c:	4639      	mov	r1, r7
   20d6e:	4630      	mov	r0, r6
   20d70:	f7fe fdde 	bl	1f930 <_malloc_r>
   20d74:	b948      	cbnz	r0, 20d8a <__smakebuf_r+0x46>
   20d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20d7a:	059a      	lsls	r2, r3, #22
   20d7c:	d4ee      	bmi.n	20d5c <__smakebuf_r+0x18>
   20d7e:	f023 0303 	bic.w	r3, r3, #3
   20d82:	f043 0302 	orr.w	r3, r3, #2
   20d86:	81a3      	strh	r3, [r4, #12]
   20d88:	e7e2      	b.n	20d50 <__smakebuf_r+0xc>
   20d8a:	4b0d      	ldr	r3, [pc, #52]	; (20dc0 <__smakebuf_r+0x7c>)
   20d8c:	62b3      	str	r3, [r6, #40]	; 0x28
   20d8e:	89a3      	ldrh	r3, [r4, #12]
   20d90:	6020      	str	r0, [r4, #0]
   20d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20d96:	81a3      	strh	r3, [r4, #12]
   20d98:	9b01      	ldr	r3, [sp, #4]
   20d9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
   20d9e:	b15b      	cbz	r3, 20db8 <__smakebuf_r+0x74>
   20da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   20da4:	4630      	mov	r0, r6
   20da6:	f000 f85b 	bl	20e60 <_isatty_r>
   20daa:	b128      	cbz	r0, 20db8 <__smakebuf_r+0x74>
   20dac:	89a3      	ldrh	r3, [r4, #12]
   20dae:	f023 0303 	bic.w	r3, r3, #3
   20db2:	f043 0301 	orr.w	r3, r3, #1
   20db6:	81a3      	strh	r3, [r4, #12]
   20db8:	89a3      	ldrh	r3, [r4, #12]
   20dba:	431d      	orrs	r5, r3
   20dbc:	81a5      	strh	r5, [r4, #12]
   20dbe:	e7cd      	b.n	20d5c <__smakebuf_r+0x18>
   20dc0:	00020c0d 	.word	0x00020c0d

00020dc4 <raise>:
   20dc4:	4b02      	ldr	r3, [pc, #8]	; (20dd0 <raise+0xc>)
   20dc6:	4601      	mov	r1, r0
   20dc8:	6818      	ldr	r0, [r3, #0]
   20dca:	f006 be8b 	b.w	27ae4 <_raise_r>
   20dce:	bf00      	nop
   20dd0:	2000073c 	.word	0x2000073c

00020dd4 <_kill_r>:
   20dd4:	b538      	push	{r3, r4, r5, lr}
   20dd6:	4d07      	ldr	r5, [pc, #28]	; (20df4 <_kill_r+0x20>)
   20dd8:	2300      	movs	r3, #0
   20dda:	4604      	mov	r4, r0
   20ddc:	4608      	mov	r0, r1
   20dde:	4611      	mov	r1, r2
   20de0:	602b      	str	r3, [r5, #0]
   20de2:	f003 fe30 	bl	24a46 <_kill>
   20de6:	1c43      	adds	r3, r0, #1
   20de8:	d102      	bne.n	20df0 <_kill_r+0x1c>
   20dea:	682b      	ldr	r3, [r5, #0]
   20dec:	b103      	cbz	r3, 20df0 <_kill_r+0x1c>
   20dee:	6023      	str	r3, [r4, #0]
   20df0:	bd38      	pop	{r3, r4, r5, pc}
   20df2:	bf00      	nop
   20df4:	200039b8 	.word	0x200039b8

00020df8 <_write_r>:
   20df8:	b538      	push	{r3, r4, r5, lr}
   20dfa:	4d07      	ldr	r5, [pc, #28]	; (20e18 <_write_r+0x20>)
   20dfc:	4604      	mov	r4, r0
   20dfe:	4608      	mov	r0, r1
   20e00:	4611      	mov	r1, r2
   20e02:	2200      	movs	r2, #0
   20e04:	602a      	str	r2, [r5, #0]
   20e06:	461a      	mov	r2, r3
   20e08:	f003 fe0f 	bl	24a2a <_write>
   20e0c:	1c43      	adds	r3, r0, #1
   20e0e:	d102      	bne.n	20e16 <_write_r+0x1e>
   20e10:	682b      	ldr	r3, [r5, #0]
   20e12:	b103      	cbz	r3, 20e16 <_write_r+0x1e>
   20e14:	6023      	str	r3, [r4, #0]
   20e16:	bd38      	pop	{r3, r4, r5, pc}
   20e18:	200039b8 	.word	0x200039b8

00020e1c <_close_r>:
   20e1c:	b538      	push	{r3, r4, r5, lr}
   20e1e:	4d06      	ldr	r5, [pc, #24]	; (20e38 <_close_r+0x1c>)
   20e20:	2300      	movs	r3, #0
   20e22:	4604      	mov	r4, r0
   20e24:	4608      	mov	r0, r1
   20e26:	602b      	str	r3, [r5, #0]
   20e28:	f003 fe03 	bl	24a32 <_close>
   20e2c:	1c43      	adds	r3, r0, #1
   20e2e:	d102      	bne.n	20e36 <_close_r+0x1a>
   20e30:	682b      	ldr	r3, [r5, #0]
   20e32:	b103      	cbz	r3, 20e36 <_close_r+0x1a>
   20e34:	6023      	str	r3, [r4, #0]
   20e36:	bd38      	pop	{r3, r4, r5, pc}
   20e38:	200039b8 	.word	0x200039b8

00020e3c <_fstat_r>:
   20e3c:	b538      	push	{r3, r4, r5, lr}
   20e3e:	4d07      	ldr	r5, [pc, #28]	; (20e5c <_fstat_r+0x20>)
   20e40:	2300      	movs	r3, #0
   20e42:	4604      	mov	r4, r0
   20e44:	4608      	mov	r0, r1
   20e46:	4611      	mov	r1, r2
   20e48:	602b      	str	r3, [r5, #0]
   20e4a:	f003 fe00 	bl	24a4e <_fstat>
   20e4e:	1c43      	adds	r3, r0, #1
   20e50:	d102      	bne.n	20e58 <_fstat_r+0x1c>
   20e52:	682b      	ldr	r3, [r5, #0]
   20e54:	b103      	cbz	r3, 20e58 <_fstat_r+0x1c>
   20e56:	6023      	str	r3, [r4, #0]
   20e58:	bd38      	pop	{r3, r4, r5, pc}
   20e5a:	bf00      	nop
   20e5c:	200039b8 	.word	0x200039b8

00020e60 <_isatty_r>:
   20e60:	b538      	push	{r3, r4, r5, lr}
   20e62:	4d06      	ldr	r5, [pc, #24]	; (20e7c <_isatty_r+0x1c>)
   20e64:	2300      	movs	r3, #0
   20e66:	4604      	mov	r4, r0
   20e68:	4608      	mov	r0, r1
   20e6a:	602b      	str	r3, [r5, #0]
   20e6c:	f003 fde6 	bl	24a3c <_isatty>
   20e70:	1c43      	adds	r3, r0, #1
   20e72:	d102      	bne.n	20e7a <_isatty_r+0x1a>
   20e74:	682b      	ldr	r3, [r5, #0]
   20e76:	b103      	cbz	r3, 20e7a <_isatty_r+0x1a>
   20e78:	6023      	str	r3, [r4, #0]
   20e7a:	bd38      	pop	{r3, r4, r5, pc}
   20e7c:	200039b8 	.word	0x200039b8

00020e80 <_lseek_r>:
   20e80:	b538      	push	{r3, r4, r5, lr}
   20e82:	4d07      	ldr	r5, [pc, #28]	; (20ea0 <_lseek_r+0x20>)
   20e84:	4604      	mov	r4, r0
   20e86:	4608      	mov	r0, r1
   20e88:	4611      	mov	r1, r2
   20e8a:	2200      	movs	r2, #0
   20e8c:	602a      	str	r2, [r5, #0]
   20e8e:	461a      	mov	r2, r3
   20e90:	f003 fdd2 	bl	24a38 <_lseek>
   20e94:	1c43      	adds	r3, r0, #1
   20e96:	d102      	bne.n	20e9e <_lseek_r+0x1e>
   20e98:	682b      	ldr	r3, [r5, #0]
   20e9a:	b103      	cbz	r3, 20e9e <_lseek_r+0x1e>
   20e9c:	6023      	str	r3, [r4, #0]
   20e9e:	bd38      	pop	{r3, r4, r5, pc}
   20ea0:	200039b8 	.word	0x200039b8

00020ea4 <_read_r>:
   20ea4:	b538      	push	{r3, r4, r5, lr}
   20ea6:	4d07      	ldr	r5, [pc, #28]	; (20ec4 <_read_r+0x20>)
   20ea8:	4604      	mov	r4, r0
   20eaa:	4608      	mov	r0, r1
   20eac:	4611      	mov	r1, r2
   20eae:	2200      	movs	r2, #0
   20eb0:	602a      	str	r2, [r5, #0]
   20eb2:	461a      	mov	r2, r3
   20eb4:	f003 fdb5 	bl	24a22 <_read>
   20eb8:	1c43      	adds	r3, r0, #1
   20eba:	d102      	bne.n	20ec2 <_read_r+0x1e>
   20ebc:	682b      	ldr	r3, [r5, #0]
   20ebe:	b103      	cbz	r3, 20ec2 <_read_r+0x1e>
   20ec0:	6023      	str	r3, [r4, #0]
   20ec2:	bd38      	pop	{r3, r4, r5, pc}
   20ec4:	200039b8 	.word	0x200039b8

00020ec8 <nrf_cc3xx_platform_init>:
   20ec8:	b510      	push	{r4, lr}
   20eca:	4c0c      	ldr	r4, [pc, #48]	; (20efc <nrf_cc3xx_platform_init+0x34>)
   20ecc:	6823      	ldr	r3, [r4, #0]
   20ece:	b113      	cbz	r3, 20ed6 <nrf_cc3xx_platform_init+0xe>
   20ed0:	4b0b      	ldr	r3, [pc, #44]	; (20f00 <nrf_cc3xx_platform_init+0x38>)
   20ed2:	681b      	ldr	r3, [r3, #0]
   20ed4:	b92b      	cbnz	r3, 20ee2 <nrf_cc3xx_platform_init+0x1a>
   20ed6:	f000 fea7 	bl	21c28 <CC_LibInit>
   20eda:	b930      	cbnz	r0, 20eea <nrf_cc3xx_platform_init+0x22>
   20edc:	4b08      	ldr	r3, [pc, #32]	; (20f00 <nrf_cc3xx_platform_init+0x38>)
   20ede:	2201      	movs	r2, #1
   20ee0:	601a      	str	r2, [r3, #0]
   20ee2:	2301      	movs	r3, #1
   20ee4:	6023      	str	r3, [r4, #0]
   20ee6:	2000      	movs	r0, #0
   20ee8:	bd10      	pop	{r4, pc}
   20eea:	3801      	subs	r0, #1
   20eec:	2806      	cmp	r0, #6
   20eee:	d901      	bls.n	20ef4 <nrf_cc3xx_platform_init+0x2c>
   20ef0:	4804      	ldr	r0, [pc, #16]	; (20f04 <nrf_cc3xx_platform_init+0x3c>)
   20ef2:	bd10      	pop	{r4, pc}
   20ef4:	4b04      	ldr	r3, [pc, #16]	; (20f08 <nrf_cc3xx_platform_init+0x40>)
   20ef6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   20efa:	bd10      	pop	{r4, pc}
   20efc:	200039bc 	.word	0x200039bc
   20f00:	200039c0 	.word	0x200039c0
   20f04:	ffff8ffe 	.word	0xffff8ffe
   20f08:	00028a98 	.word	0x00028a98

00020f0c <nrf_cc3xx_platform_abort>:
   20f0c:	f3bf 8f4f 	dsb	sy
   20f10:	4905      	ldr	r1, [pc, #20]	; (20f28 <nrf_cc3xx_platform_abort+0x1c>)
   20f12:	4b06      	ldr	r3, [pc, #24]	; (20f2c <nrf_cc3xx_platform_abort+0x20>)
   20f14:	68ca      	ldr	r2, [r1, #12]
   20f16:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20f1a:	4313      	orrs	r3, r2
   20f1c:	60cb      	str	r3, [r1, #12]
   20f1e:	f3bf 8f4f 	dsb	sy
   20f22:	bf00      	nop
   20f24:	e7fd      	b.n	20f22 <nrf_cc3xx_platform_abort+0x16>
   20f26:	bf00      	nop
   20f28:	e000ed00 	.word	0xe000ed00
   20f2c:	05fa0004 	.word	0x05fa0004

00020f30 <CC_PalAbort>:
   20f30:	b410      	push	{r4}
   20f32:	4b0a      	ldr	r3, [pc, #40]	; (20f5c <CC_PalAbort+0x2c>)
   20f34:	490a      	ldr	r1, [pc, #40]	; (20f60 <CC_PalAbort+0x30>)
   20f36:	4c0b      	ldr	r4, [pc, #44]	; (20f64 <CC_PalAbort+0x34>)
   20f38:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   20f3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   20f40:	6849      	ldr	r1, [r1, #4]
   20f42:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   20f46:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   20f4a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   20f4e:	2300      	movs	r3, #0
   20f50:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   20f54:	f85d 4b04 	ldr.w	r4, [sp], #4
   20f58:	4708      	bx	r1
   20f5a:	bf00      	nop
   20f5c:	5002b000 	.word	0x5002b000
   20f60:	2000090c 	.word	0x2000090c
   20f64:	5002a000 	.word	0x5002a000

00020f68 <nrf_cc3xx_platform_set_abort>:
   20f68:	e9d0 1200 	ldrd	r1, r2, [r0]
   20f6c:	4b01      	ldr	r3, [pc, #4]	; (20f74 <nrf_cc3xx_platform_set_abort+0xc>)
   20f6e:	e9c3 1200 	strd	r1, r2, [r3]
   20f72:	4770      	bx	lr
   20f74:	2000090c 	.word	0x2000090c

00020f78 <nrf_cc3xx_platform_ctr_drbg_init>:
   20f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f7c:	4c15      	ldr	r4, [pc, #84]	; (20fd4 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   20f7e:	4e16      	ldr	r6, [pc, #88]	; (20fd8 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   20f80:	2800      	cmp	r0, #0
   20f82:	bf18      	it	ne
   20f84:	4604      	movne	r4, r0
   20f86:	b084      	sub	sp, #16
   20f88:	6823      	ldr	r3, [r4, #0]
   20f8a:	42b3      	cmp	r3, r6
   20f8c:	d01e      	beq.n	20fcc <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   20f8e:	460d      	mov	r5, r1
   20f90:	4620      	mov	r0, r4
   20f92:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   20f96:	4617      	mov	r7, r2
   20f98:	f000 f8ee 	bl	21178 <mbedtls_platform_zeroize>
   20f9c:	1d22      	adds	r2, r4, #4
   20f9e:	4610      	mov	r0, r2
   20fa0:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   20fa4:	9203      	str	r2, [sp, #12]
   20fa6:	f000 fd29 	bl	219fc <cc_mbedtls_entropy_init>
   20faa:	4640      	mov	r0, r8
   20fac:	f8cd 8008 	str.w	r8, [sp, #8]
   20fb0:	f000 fb54 	bl	2165c <cc_mbedtls_ctr_drbg_init>
   20fb4:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
   20fb8:	4908      	ldr	r1, [pc, #32]	; (20fdc <nrf_cc3xx_platform_ctr_drbg_init+0x64>)
   20fba:	9700      	str	r7, [sp, #0]
   20fbc:	462b      	mov	r3, r5
   20fbe:	f000 fb63 	bl	21688 <cc_mbedtls_ctr_drbg_seed>
   20fc2:	b900      	cbnz	r0, 20fc6 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   20fc4:	6026      	str	r6, [r4, #0]
   20fc6:	b004      	add	sp, #16
   20fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20fcc:	2000      	movs	r0, #0
   20fce:	b004      	add	sp, #16
   20fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20fd4:	200039c4 	.word	0x200039c4
   20fd8:	5ac9bca5 	.word	0x5ac9bca5
   20fdc:	00021a85 	.word	0x00021a85

00020fe0 <nrf_cc3xx_platform_ctr_drbg_get>:
   20fe0:	b570      	push	{r4, r5, r6, lr}
   20fe2:	4d0d      	ldr	r5, [pc, #52]	; (21018 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   20fe4:	2800      	cmp	r0, #0
   20fe6:	bf18      	it	ne
   20fe8:	4605      	movne	r5, r0
   20fea:	461e      	mov	r6, r3
   20fec:	6828      	ldr	r0, [r5, #0]
   20fee:	4b0b      	ldr	r3, [pc, #44]	; (2101c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   20ff0:	4298      	cmp	r0, r3
   20ff2:	b082      	sub	sp, #8
   20ff4:	d10d      	bne.n	21012 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   20ff6:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   20ffa:	2500      	movs	r5, #0
   20ffc:	9500      	str	r5, [sp, #0]
   20ffe:	462b      	mov	r3, r5
   21000:	4614      	mov	r4, r2
   21002:	f000 fb8f 	bl	21724 <cc_mbedtls_ctr_drbg_random_with_add>
   21006:	2800      	cmp	r0, #0
   21008:	bf18      	it	ne
   2100a:	462c      	movne	r4, r5
   2100c:	6034      	str	r4, [r6, #0]
   2100e:	b002      	add	sp, #8
   21010:	bd70      	pop	{r4, r5, r6, pc}
   21012:	4803      	ldr	r0, [pc, #12]	; (21020 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   21014:	e7fb      	b.n	2100e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   21016:	bf00      	nop
   21018:	200039c4 	.word	0x200039c4
   2101c:	5ac9bca5 	.word	0x5ac9bca5
   21020:	ffff8fe8 	.word	0xffff8fe8

00021024 <mutex_free>:
   21024:	b510      	push	{r4, lr}
   21026:	4604      	mov	r4, r0
   21028:	b150      	cbz	r0, 21040 <mutex_free+0x1c>
   2102a:	6863      	ldr	r3, [r4, #4]
   2102c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   21030:	d005      	beq.n	2103e <mutex_free+0x1a>
   21032:	4a06      	ldr	r2, [pc, #24]	; (2104c <mutex_free+0x28>)
   21034:	4293      	cmp	r3, r2
   21036:	d002      	beq.n	2103e <mutex_free+0x1a>
   21038:	2300      	movs	r3, #0
   2103a:	6023      	str	r3, [r4, #0]
   2103c:	6062      	str	r2, [r4, #4]
   2103e:	bd10      	pop	{r4, pc}
   21040:	4b03      	ldr	r3, [pc, #12]	; (21050 <mutex_free+0x2c>)
   21042:	4804      	ldr	r0, [pc, #16]	; (21054 <mutex_free+0x30>)
   21044:	685b      	ldr	r3, [r3, #4]
   21046:	4798      	blx	r3
   21048:	e7ef      	b.n	2102a <mutex_free+0x6>
   2104a:	bf00      	nop
   2104c:	a95c5f2c 	.word	0xa95c5f2c
   21050:	2000090c 	.word	0x2000090c
   21054:	00028ab4 	.word	0x00028ab4

00021058 <mutex_lock>:
   21058:	b1c8      	cbz	r0, 2108e <mutex_lock+0x36>
   2105a:	6843      	ldr	r3, [r0, #4]
   2105c:	4a0d      	ldr	r2, [pc, #52]	; (21094 <mutex_lock+0x3c>)
   2105e:	4293      	cmp	r3, r2
   21060:	d013      	beq.n	2108a <mutex_lock+0x32>
   21062:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   21066:	d00e      	beq.n	21086 <mutex_lock+0x2e>
   21068:	2301      	movs	r3, #1
   2106a:	e850 2f00 	ldrex	r2, [r0]
   2106e:	4619      	mov	r1, r3
   21070:	e840 1c00 	strex	ip, r1, [r0]
   21074:	f09c 0f00 	teq	ip, #0
   21078:	d1f7      	bne.n	2106a <mutex_lock+0x12>
   2107a:	2a01      	cmp	r2, #1
   2107c:	d0f5      	beq.n	2106a <mutex_lock+0x12>
   2107e:	f3bf 8f5f 	dmb	sy
   21082:	2000      	movs	r0, #0
   21084:	4770      	bx	lr
   21086:	4804      	ldr	r0, [pc, #16]	; (21098 <mutex_lock+0x40>)
   21088:	4770      	bx	lr
   2108a:	4804      	ldr	r0, [pc, #16]	; (2109c <mutex_lock+0x44>)
   2108c:	4770      	bx	lr
   2108e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   21092:	4770      	bx	lr
   21094:	a95c5f2c 	.word	0xa95c5f2c
   21098:	ffff8fe9 	.word	0xffff8fe9
   2109c:	ffff8fea 	.word	0xffff8fea

000210a0 <mutex_unlock>:
   210a0:	b180      	cbz	r0, 210c4 <mutex_unlock+0x24>
   210a2:	6843      	ldr	r3, [r0, #4]
   210a4:	4a09      	ldr	r2, [pc, #36]	; (210cc <mutex_unlock+0x2c>)
   210a6:	4293      	cmp	r3, r2
   210a8:	d00a      	beq.n	210c0 <mutex_unlock+0x20>
   210aa:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   210ae:	d005      	beq.n	210bc <mutex_unlock+0x1c>
   210b0:	f3bf 8f5f 	dmb	sy
   210b4:	2300      	movs	r3, #0
   210b6:	6003      	str	r3, [r0, #0]
   210b8:	4618      	mov	r0, r3
   210ba:	4770      	bx	lr
   210bc:	4804      	ldr	r0, [pc, #16]	; (210d0 <mutex_unlock+0x30>)
   210be:	4770      	bx	lr
   210c0:	4804      	ldr	r0, [pc, #16]	; (210d4 <mutex_unlock+0x34>)
   210c2:	4770      	bx	lr
   210c4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   210c8:	4770      	bx	lr
   210ca:	bf00      	nop
   210cc:	a95c5f2c 	.word	0xa95c5f2c
   210d0:	ffff8fe9 	.word	0xffff8fe9
   210d4:	ffff8fea 	.word	0xffff8fea

000210d8 <mutex_init>:
   210d8:	b510      	push	{r4, lr}
   210da:	4604      	mov	r4, r0
   210dc:	b120      	cbz	r0, 210e8 <mutex_init+0x10>
   210de:	4b04      	ldr	r3, [pc, #16]	; (210f0 <mutex_init+0x18>)
   210e0:	6063      	str	r3, [r4, #4]
   210e2:	2200      	movs	r2, #0
   210e4:	6022      	str	r2, [r4, #0]
   210e6:	bd10      	pop	{r4, pc}
   210e8:	4802      	ldr	r0, [pc, #8]	; (210f4 <mutex_init+0x1c>)
   210ea:	f7ff ff21 	bl	20f30 <CC_PalAbort>
   210ee:	e7f6      	b.n	210de <mutex_init+0x6>
   210f0:	3a00003a 	.word	0x3a00003a
   210f4:	00028adc 	.word	0x00028adc

000210f8 <nrf_cc3xx_platform_set_mutexes>:
   210f8:	b570      	push	{r4, r5, r6, lr}
   210fa:	e9d0 2300 	ldrd	r2, r3, [r0]
   210fe:	4c15      	ldr	r4, [pc, #84]	; (21154 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   21100:	4d15      	ldr	r5, [pc, #84]	; (21158 <nrf_cc3xx_platform_set_mutexes+0x60>)
   21102:	6063      	str	r3, [r4, #4]
   21104:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   21108:	e9c4 3002 	strd	r3, r0, [r4, #8]
   2110c:	6022      	str	r2, [r4, #0]
   2110e:	4b13      	ldr	r3, [pc, #76]	; (2115c <nrf_cc3xx_platform_set_mutexes+0x64>)
   21110:	6808      	ldr	r0, [r1, #0]
   21112:	6018      	str	r0, [r3, #0]
   21114:	6848      	ldr	r0, [r1, #4]
   21116:	6058      	str	r0, [r3, #4]
   21118:	6888      	ldr	r0, [r1, #8]
   2111a:	6098      	str	r0, [r3, #8]
   2111c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   21120:	60d8      	str	r0, [r3, #12]
   21122:	6119      	str	r1, [r3, #16]
   21124:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   21128:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   2112c:	d010      	beq.n	21150 <nrf_cc3xx_platform_set_mutexes+0x58>
   2112e:	490c      	ldr	r1, [pc, #48]	; (21160 <nrf_cc3xx_platform_set_mutexes+0x68>)
   21130:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   21134:	2300      	movs	r3, #0
   21136:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   2113a:	f505 708a 	add.w	r0, r5, #276	; 0x114
   2113e:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   21142:	4790      	blx	r2
   21144:	6823      	ldr	r3, [r4, #0]
   21146:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   2114a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2114e:	4718      	bx	r3
   21150:	bd70      	pop	{r4, r5, r6, pc}
   21152:	bf00      	nop
   21154:	2000091c 	.word	0x2000091c
   21158:	200039c4 	.word	0x200039c4
   2115c:	2000092c 	.word	0x2000092c
   21160:	a95c5f2c 	.word	0xa95c5f2c

00021164 <mbedtls_zeroize_internal>:
   21164:	b138      	cbz	r0, 21176 <mbedtls_zeroize_internal+0x12>
   21166:	b131      	cbz	r1, 21176 <mbedtls_zeroize_internal+0x12>
   21168:	4401      	add	r1, r0
   2116a:	2200      	movs	r2, #0
   2116c:	4603      	mov	r3, r0
   2116e:	3001      	adds	r0, #1
   21170:	4281      	cmp	r1, r0
   21172:	701a      	strb	r2, [r3, #0]
   21174:	d1fa      	bne.n	2116c <mbedtls_zeroize_internal+0x8>
   21176:	4770      	bx	lr

00021178 <mbedtls_platform_zeroize>:
   21178:	b138      	cbz	r0, 2118a <mbedtls_platform_zeroize+0x12>
   2117a:	b131      	cbz	r1, 2118a <mbedtls_platform_zeroize+0x12>
   2117c:	4401      	add	r1, r0
   2117e:	2200      	movs	r2, #0
   21180:	4603      	mov	r3, r0
   21182:	3001      	adds	r0, #1
   21184:	4288      	cmp	r0, r1
   21186:	701a      	strb	r2, [r3, #0]
   21188:	d1fa      	bne.n	21180 <mbedtls_platform_zeroize+0x8>
   2118a:	4770      	bx	lr

0002118c <block_cipher_df>:
   2118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21190:	ed2d 8b02 	vpush	{d8}
   21194:	b0b7      	sub	sp, #220	; 0xdc
   21196:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   2119a:	9005      	str	r0, [sp, #20]
   2119c:	f200 814e 	bhi.w	2143c <block_cipher_df+0x2b0>
   211a0:	4614      	mov	r4, r2
   211a2:	460d      	mov	r5, r1
   211a4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   211a8:	2100      	movs	r1, #0
   211aa:	48a6      	ldr	r0, [pc, #664]	; (21444 <block_cipher_df+0x2b8>)
   211ac:	f006 f914 	bl	273d8 <memset>
   211b0:	a819      	add	r0, sp, #100	; 0x64
   211b2:	f001 f9d9 	bl	22568 <cc_mbedtls_aes_init>
   211b6:	48a3      	ldr	r0, [pc, #652]	; (21444 <block_cipher_df+0x2b8>)
   211b8:	2300      	movs	r3, #0
   211ba:	8203      	strh	r3, [r0, #16]
   211bc:	ba63      	rev16	r3, r4
   211be:	8243      	strh	r3, [r0, #18]
   211c0:	2320      	movs	r3, #32
   211c2:	4629      	mov	r1, r5
   211c4:	75c3      	strb	r3, [r0, #23]
   211c6:	4605      	mov	r5, r0
   211c8:	4622      	mov	r2, r4
   211ca:	3018      	adds	r0, #24
   211cc:	f006 f8f6 	bl	273bc <memcpy>
   211d0:	192b      	adds	r3, r5, r4
   211d2:	2280      	movs	r2, #128	; 0x80
   211d4:	761a      	strb	r2, [r3, #24]
   211d6:	4b9c      	ldr	r3, [pc, #624]	; (21448 <block_cipher_df+0x2bc>)
   211d8:	930d      	str	r3, [sp, #52]	; 0x34
   211da:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   211de:	930e      	str	r3, [sp, #56]	; 0x38
   211e0:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   211e4:	930f      	str	r3, [sp, #60]	; 0x3c
   211e6:	a90d      	add	r1, sp, #52	; 0x34
   211e8:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   211ec:	a819      	add	r0, sp, #100	; 0x64
   211ee:	9310      	str	r3, [sp, #64]	; 0x40
   211f0:	f001 f9d0 	bl	22594 <cc_mbedtls_aes_setkey_enc>
   211f4:	4605      	mov	r5, r0
   211f6:	2800      	cmp	r0, #0
   211f8:	f040 80fa 	bne.w	213f0 <block_cipher_df+0x264>
   211fc:	f104 0319 	add.w	r3, r4, #25
   21200:	f10d 0820 	add.w	r8, sp, #32
   21204:	9306      	str	r3, [sp, #24]
   21206:	ee08 8a10 	vmov	s16, r8
   2120a:	ab11      	add	r3, sp, #68	; 0x44
   2120c:	9304      	str	r3, [sp, #16]
   2120e:	9307      	str	r3, [sp, #28]
   21210:	ee18 0a10 	vmov	r0, s16
   21214:	2210      	movs	r2, #16
   21216:	2100      	movs	r1, #0
   21218:	f006 f8de 	bl	273d8 <memset>
   2121c:	f8df a22c 	ldr.w	sl, [pc, #556]	; 2144c <block_cipher_df+0x2c0>
   21220:	9b06      	ldr	r3, [sp, #24]
   21222:	9300      	str	r3, [sp, #0]
   21224:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   21228:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   2122c:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   21230:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   21234:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   21238:	f89d 5020 	ldrb.w	r5, [sp, #32]
   2123c:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   21240:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   21244:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   21248:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   2124c:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   21250:	ea8e 0e00 	eor.w	lr, lr, r0
   21254:	ea8c 0c03 	eor.w	ip, ip, r3
   21258:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   2125c:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   21260:	406a      	eors	r2, r5
   21262:	4058      	eors	r0, r3
   21264:	9b00      	ldr	r3, [sp, #0]
   21266:	9202      	str	r2, [sp, #8]
   21268:	f10a 0a10 	add.w	sl, sl, #16
   2126c:	f81a 2c1f 	ldrb.w	r2, [sl, #-31]
   21270:	461d      	mov	r5, r3
   21272:	2b10      	cmp	r3, #16
   21274:	bf94      	ite	ls
   21276:	1add      	subls	r5, r3, r3
   21278:	3d10      	subhi	r5, #16
   2127a:	f81a 3c13 	ldrb.w	r3, [sl, #-19]
   2127e:	9500      	str	r5, [sp, #0]
   21280:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   21284:	f81a 9c1e 	ldrb.w	r9, [sl, #-30]
   21288:	f81a 8c1a 	ldrb.w	r8, [sl, #-26]
   2128c:	407b      	eors	r3, r7
   2128e:	9301      	str	r3, [sp, #4]
   21290:	406a      	eors	r2, r5
   21292:	f81a 3c1b 	ldrb.w	r3, [sl, #-27]
   21296:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   2129a:	4061      	eors	r1, r4
   2129c:	406b      	eors	r3, r5
   2129e:	2400      	movs	r4, #0
   212a0:	9303      	str	r3, [sp, #12]
   212a2:	ea8b 0b06 	eor.w	fp, fp, r6
   212a6:	9b01      	ldr	r3, [sp, #4]
   212a8:	f81a 6c12 	ldrb.w	r6, [sl, #-18]
   212ac:	4627      	mov	r7, r4
   212ae:	f36b 0707 	bfi	r7, fp, #0, #8
   212b2:	4625      	mov	r5, r4
   212b4:	f363 270f 	bfi	r7, r3, #8, #8
   212b8:	f36e 0407 	bfi	r4, lr, #0, #8
   212bc:	46be      	mov	lr, r7
   212be:	462f      	mov	r7, r5
   212c0:	f361 0707 	bfi	r7, r1, #0, #8
   212c4:	9902      	ldr	r1, [sp, #8]
   212c6:	9b03      	ldr	r3, [sp, #12]
   212c8:	f361 0507 	bfi	r5, r1, #0, #8
   212cc:	f362 250f 	bfi	r5, r2, #8, #8
   212d0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   212d4:	f81a 1c1d 	ldrb.w	r1, [sl, #-29]
   212d8:	f36c 240f 	bfi	r4, ip, #8, #8
   212dc:	f363 270f 	bfi	r7, r3, #8, #8
   212e0:	ea82 0909 	eor.w	r9, r2, r9
   212e4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   212e8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   212ec:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   212f0:	ea83 0808 	eor.w	r8, r3, r8
   212f4:	ea8c 0c06 	eor.w	ip, ip, r6
   212f8:	4676      	mov	r6, lr
   212fa:	f368 4717 	bfi	r7, r8, #16, #8
   212fe:	f36c 4617 	bfi	r6, ip, #16, #8
   21302:	f81a 8c11 	ldrb.w	r8, [sl, #-17]
   21306:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   2130a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   2130e:	f81a ec15 	ldrb.w	lr, [sl, #-21]
   21312:	ea8c 0c08 	eor.w	ip, ip, r8
   21316:	404a      	eors	r2, r1
   21318:	f36c 661f 	bfi	r6, ip, #24, #8
   2131c:	f81a 1c19 	ldrb.w	r1, [sl, #-25]
   21320:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   21324:	960b      	str	r6, [sp, #44]	; 0x2c
   21326:	f369 4517 	bfi	r5, r9, #16, #8
   2132a:	f362 651f 	bfi	r5, r2, #24, #8
   2132e:	404b      	eors	r3, r1
   21330:	f360 4417 	bfi	r4, r0, #16, #8
   21334:	9508      	str	r5, [sp, #32]
   21336:	ea8c 050e 	eor.w	r5, ip, lr
   2133a:	f363 671f 	bfi	r7, r3, #24, #8
   2133e:	f365 641f 	bfi	r4, r5, #24, #8
   21342:	ee18 3a10 	vmov	r3, s16
   21346:	ee18 2a10 	vmov	r2, s16
   2134a:	2101      	movs	r1, #1
   2134c:	a819      	add	r0, sp, #100	; 0x64
   2134e:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   21352:	f001 f939 	bl	225c8 <cc_mbedtls_aes_crypt_ecb>
   21356:	2800      	cmp	r0, #0
   21358:	d16c      	bne.n	21434 <block_cipher_df+0x2a8>
   2135a:	9b00      	ldr	r3, [sp, #0]
   2135c:	2b00      	cmp	r3, #0
   2135e:	f47f af61 	bne.w	21224 <block_cipher_df+0x98>
   21362:	9c07      	ldr	r4, [sp, #28]
   21364:	2210      	movs	r2, #16
   21366:	4620      	mov	r0, r4
   21368:	ee18 1a10 	vmov	r1, s16
   2136c:	3410      	adds	r4, #16
   2136e:	9407      	str	r4, [sp, #28]
   21370:	f006 f824 	bl	273bc <memcpy>
   21374:	4a33      	ldr	r2, [pc, #204]	; (21444 <block_cipher_df+0x2b8>)
   21376:	78d3      	ldrb	r3, [r2, #3]
   21378:	3301      	adds	r3, #1
   2137a:	70d3      	strb	r3, [r2, #3]
   2137c:	ab19      	add	r3, sp, #100	; 0x64
   2137e:	429c      	cmp	r4, r3
   21380:	ee18 8a10 	vmov	r8, s16
   21384:	f47f af44 	bne.w	21210 <block_cipher_df+0x84>
   21388:	9904      	ldr	r1, [sp, #16]
   2138a:	2280      	movs	r2, #128	; 0x80
   2138c:	4618      	mov	r0, r3
   2138e:	f001 f901 	bl	22594 <cc_mbedtls_aes_setkey_enc>
   21392:	4605      	mov	r5, r0
   21394:	bb80      	cbnz	r0, 213f8 <block_cipher_df+0x26c>
   21396:	9c05      	ldr	r4, [sp, #20]
   21398:	f104 0620 	add.w	r6, r4, #32
   2139c:	ab15      	add	r3, sp, #84	; 0x54
   2139e:	461a      	mov	r2, r3
   213a0:	2101      	movs	r1, #1
   213a2:	a819      	add	r0, sp, #100	; 0x64
   213a4:	f001 f910 	bl	225c8 <cc_mbedtls_aes_crypt_ecb>
   213a8:	2210      	movs	r2, #16
   213aa:	4605      	mov	r5, r0
   213ac:	bb20      	cbnz	r0, 213f8 <block_cipher_df+0x26c>
   213ae:	4620      	mov	r0, r4
   213b0:	a915      	add	r1, sp, #84	; 0x54
   213b2:	3410      	adds	r4, #16
   213b4:	f006 f802 	bl	273bc <memcpy>
   213b8:	42b4      	cmp	r4, r6
   213ba:	d1ef      	bne.n	2139c <block_cipher_df+0x210>
   213bc:	a819      	add	r0, sp, #100	; 0x64
   213be:	f001 f8e3 	bl	22588 <cc_mbedtls_aes_free>
   213c2:	4820      	ldr	r0, [pc, #128]	; (21444 <block_cipher_df+0x2b8>)
   213c4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   213c8:	f7ff fed6 	bl	21178 <mbedtls_platform_zeroize>
   213cc:	9804      	ldr	r0, [sp, #16]
   213ce:	2120      	movs	r1, #32
   213d0:	f7ff fed2 	bl	21178 <mbedtls_platform_zeroize>
   213d4:	a80d      	add	r0, sp, #52	; 0x34
   213d6:	2110      	movs	r1, #16
   213d8:	f7ff fece 	bl	21178 <mbedtls_platform_zeroize>
   213dc:	4640      	mov	r0, r8
   213de:	2110      	movs	r1, #16
   213e0:	f7ff feca 	bl	21178 <mbedtls_platform_zeroize>
   213e4:	4628      	mov	r0, r5
   213e6:	b037      	add	sp, #220	; 0xdc
   213e8:	ecbd 8b02 	vpop	{d8}
   213ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213f0:	ab11      	add	r3, sp, #68	; 0x44
   213f2:	9304      	str	r3, [sp, #16]
   213f4:	f10d 0820 	add.w	r8, sp, #32
   213f8:	a819      	add	r0, sp, #100	; 0x64
   213fa:	f001 f8c5 	bl	22588 <cc_mbedtls_aes_free>
   213fe:	4811      	ldr	r0, [pc, #68]	; (21444 <block_cipher_df+0x2b8>)
   21400:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   21404:	f7ff feb8 	bl	21178 <mbedtls_platform_zeroize>
   21408:	9804      	ldr	r0, [sp, #16]
   2140a:	2120      	movs	r1, #32
   2140c:	f7ff feb4 	bl	21178 <mbedtls_platform_zeroize>
   21410:	a80d      	add	r0, sp, #52	; 0x34
   21412:	2110      	movs	r1, #16
   21414:	f7ff feb0 	bl	21178 <mbedtls_platform_zeroize>
   21418:	4640      	mov	r0, r8
   2141a:	2110      	movs	r1, #16
   2141c:	f7ff feac 	bl	21178 <mbedtls_platform_zeroize>
   21420:	9805      	ldr	r0, [sp, #20]
   21422:	2120      	movs	r1, #32
   21424:	f7ff fea8 	bl	21178 <mbedtls_platform_zeroize>
   21428:	4628      	mov	r0, r5
   2142a:	b037      	add	sp, #220	; 0xdc
   2142c:	ecbd 8b02 	vpop	{d8}
   21430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21434:	ee18 8a10 	vmov	r8, s16
   21438:	4605      	mov	r5, r0
   2143a:	e7dd      	b.n	213f8 <block_cipher_df+0x26c>
   2143c:	f06f 0537 	mvn.w	r5, #55	; 0x37
   21440:	e7f2      	b.n	21428 <block_cipher_df+0x29c>
   21442:	bf00      	nop
   21444:	20003b94 	.word	0x20003b94
   21448:	03020100 	.word	0x03020100
   2144c:	20003ba4 	.word	0x20003ba4

00021450 <ctr_drbg_update_internal>:
   21450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21454:	b088      	sub	sp, #32
   21456:	4604      	mov	r4, r0
   21458:	460d      	mov	r5, r1
   2145a:	2220      	movs	r2, #32
   2145c:	2100      	movs	r1, #0
   2145e:	4668      	mov	r0, sp
   21460:	f005 ffba 	bl	273d8 <memset>
   21464:	f104 0620 	add.w	r6, r4, #32
   21468:	466f      	mov	r7, sp
   2146a:	7be2      	ldrb	r2, [r4, #15]
   2146c:	3201      	adds	r2, #1
   2146e:	b2d2      	uxtb	r2, r2
   21470:	73e2      	strb	r2, [r4, #15]
   21472:	2a00      	cmp	r2, #0
   21474:	d14d      	bne.n	21512 <ctr_drbg_update_internal+0xc2>
   21476:	7ba2      	ldrb	r2, [r4, #14]
   21478:	3201      	adds	r2, #1
   2147a:	b2d2      	uxtb	r2, r2
   2147c:	73a2      	strb	r2, [r4, #14]
   2147e:	2a00      	cmp	r2, #0
   21480:	d147      	bne.n	21512 <ctr_drbg_update_internal+0xc2>
   21482:	7b63      	ldrb	r3, [r4, #13]
   21484:	3301      	adds	r3, #1
   21486:	b2db      	uxtb	r3, r3
   21488:	7363      	strb	r3, [r4, #13]
   2148a:	2b00      	cmp	r3, #0
   2148c:	d141      	bne.n	21512 <ctr_drbg_update_internal+0xc2>
   2148e:	7b23      	ldrb	r3, [r4, #12]
   21490:	3301      	adds	r3, #1
   21492:	b2db      	uxtb	r3, r3
   21494:	7323      	strb	r3, [r4, #12]
   21496:	2b00      	cmp	r3, #0
   21498:	d13b      	bne.n	21512 <ctr_drbg_update_internal+0xc2>
   2149a:	7ae3      	ldrb	r3, [r4, #11]
   2149c:	3301      	adds	r3, #1
   2149e:	b2db      	uxtb	r3, r3
   214a0:	72e3      	strb	r3, [r4, #11]
   214a2:	2b00      	cmp	r3, #0
   214a4:	d135      	bne.n	21512 <ctr_drbg_update_internal+0xc2>
   214a6:	7aa3      	ldrb	r3, [r4, #10]
   214a8:	3301      	adds	r3, #1
   214aa:	b2db      	uxtb	r3, r3
   214ac:	72a3      	strb	r3, [r4, #10]
   214ae:	2b00      	cmp	r3, #0
   214b0:	d12f      	bne.n	21512 <ctr_drbg_update_internal+0xc2>
   214b2:	7a63      	ldrb	r3, [r4, #9]
   214b4:	3301      	adds	r3, #1
   214b6:	b2db      	uxtb	r3, r3
   214b8:	7263      	strb	r3, [r4, #9]
   214ba:	bb53      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   214bc:	7a23      	ldrb	r3, [r4, #8]
   214be:	3301      	adds	r3, #1
   214c0:	b2db      	uxtb	r3, r3
   214c2:	7223      	strb	r3, [r4, #8]
   214c4:	bb2b      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   214c6:	79e3      	ldrb	r3, [r4, #7]
   214c8:	3301      	adds	r3, #1
   214ca:	b2db      	uxtb	r3, r3
   214cc:	71e3      	strb	r3, [r4, #7]
   214ce:	bb03      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   214d0:	79a3      	ldrb	r3, [r4, #6]
   214d2:	3301      	adds	r3, #1
   214d4:	b2db      	uxtb	r3, r3
   214d6:	71a3      	strb	r3, [r4, #6]
   214d8:	b9db      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   214da:	7963      	ldrb	r3, [r4, #5]
   214dc:	3301      	adds	r3, #1
   214de:	b2db      	uxtb	r3, r3
   214e0:	7163      	strb	r3, [r4, #5]
   214e2:	b9b3      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   214e4:	7923      	ldrb	r3, [r4, #4]
   214e6:	3301      	adds	r3, #1
   214e8:	b2db      	uxtb	r3, r3
   214ea:	7123      	strb	r3, [r4, #4]
   214ec:	b98b      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   214ee:	78e3      	ldrb	r3, [r4, #3]
   214f0:	3301      	adds	r3, #1
   214f2:	b2db      	uxtb	r3, r3
   214f4:	70e3      	strb	r3, [r4, #3]
   214f6:	b963      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   214f8:	78a3      	ldrb	r3, [r4, #2]
   214fa:	3301      	adds	r3, #1
   214fc:	b2db      	uxtb	r3, r3
   214fe:	70a3      	strb	r3, [r4, #2]
   21500:	b93b      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   21502:	7863      	ldrb	r3, [r4, #1]
   21504:	3301      	adds	r3, #1
   21506:	b2db      	uxtb	r3, r3
   21508:	7063      	strb	r3, [r4, #1]
   2150a:	b913      	cbnz	r3, 21512 <ctr_drbg_update_internal+0xc2>
   2150c:	7823      	ldrb	r3, [r4, #0]
   2150e:	3301      	adds	r3, #1
   21510:	7023      	strb	r3, [r4, #0]
   21512:	463b      	mov	r3, r7
   21514:	4622      	mov	r2, r4
   21516:	2101      	movs	r1, #1
   21518:	4630      	mov	r0, r6
   2151a:	f001 f855 	bl	225c8 <cc_mbedtls_aes_crypt_ecb>
   2151e:	4680      	mov	r8, r0
   21520:	bb50      	cbnz	r0, 21578 <ctr_drbg_update_internal+0x128>
   21522:	3710      	adds	r7, #16
   21524:	ab08      	add	r3, sp, #32
   21526:	429f      	cmp	r7, r3
   21528:	d19f      	bne.n	2146a <ctr_drbg_update_internal+0x1a>
   2152a:	9a00      	ldr	r2, [sp, #0]
   2152c:	682b      	ldr	r3, [r5, #0]
   2152e:	9906      	ldr	r1, [sp, #24]
   21530:	4053      	eors	r3, r2
   21532:	9300      	str	r3, [sp, #0]
   21534:	9a01      	ldr	r2, [sp, #4]
   21536:	686b      	ldr	r3, [r5, #4]
   21538:	4053      	eors	r3, r2
   2153a:	9301      	str	r3, [sp, #4]
   2153c:	9a02      	ldr	r2, [sp, #8]
   2153e:	68ab      	ldr	r3, [r5, #8]
   21540:	4053      	eors	r3, r2
   21542:	9302      	str	r3, [sp, #8]
   21544:	9a03      	ldr	r2, [sp, #12]
   21546:	68eb      	ldr	r3, [r5, #12]
   21548:	4053      	eors	r3, r2
   2154a:	9303      	str	r3, [sp, #12]
   2154c:	9a04      	ldr	r2, [sp, #16]
   2154e:	692b      	ldr	r3, [r5, #16]
   21550:	4053      	eors	r3, r2
   21552:	9304      	str	r3, [sp, #16]
   21554:	9a05      	ldr	r2, [sp, #20]
   21556:	696b      	ldr	r3, [r5, #20]
   21558:	4053      	eors	r3, r2
   2155a:	69aa      	ldr	r2, [r5, #24]
   2155c:	9305      	str	r3, [sp, #20]
   2155e:	404a      	eors	r2, r1
   21560:	69eb      	ldr	r3, [r5, #28]
   21562:	9206      	str	r2, [sp, #24]
   21564:	9a07      	ldr	r2, [sp, #28]
   21566:	4630      	mov	r0, r6
   21568:	4053      	eors	r3, r2
   2156a:	4669      	mov	r1, sp
   2156c:	2280      	movs	r2, #128	; 0x80
   2156e:	9307      	str	r3, [sp, #28]
   21570:	f001 f810 	bl	22594 <cc_mbedtls_aes_setkey_enc>
   21574:	4680      	mov	r8, r0
   21576:	b138      	cbz	r0, 21588 <ctr_drbg_update_internal+0x138>
   21578:	4668      	mov	r0, sp
   2157a:	2120      	movs	r1, #32
   2157c:	f7ff fdfc 	bl	21178 <mbedtls_platform_zeroize>
   21580:	4640      	mov	r0, r8
   21582:	b008      	add	sp, #32
   21584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21588:	2210      	movs	r2, #16
   2158a:	eb0d 0102 	add.w	r1, sp, r2
   2158e:	4620      	mov	r0, r4
   21590:	f005 ff14 	bl	273bc <memcpy>
   21594:	e7f0      	b.n	21578 <ctr_drbg_update_internal+0x128>
   21596:	bf00      	nop

00021598 <mbedtls_ctr_drbg_reseed_internal>:
   21598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2159c:	4604      	mov	r4, r0
   2159e:	6980      	ldr	r0, [r0, #24]
   215a0:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   215a4:	d852      	bhi.n	2164c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   215a6:	461d      	mov	r5, r3
   215a8:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   215ac:	42ab      	cmp	r3, r5
   215ae:	d34d      	bcc.n	2164c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   215b0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   215b4:	1a18      	subs	r0, r3, r0
   215b6:	4290      	cmp	r0, r2
   215b8:	4616      	mov	r6, r2
   215ba:	d347      	bcc.n	2164c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   215bc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 21658 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   215c0:	f44f 72c0 	mov.w	r2, #384	; 0x180
   215c4:	460f      	mov	r7, r1
   215c6:	4648      	mov	r0, r9
   215c8:	2100      	movs	r1, #0
   215ca:	f005 ff05 	bl	273d8 <memset>
   215ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   215d2:	69a2      	ldr	r2, [r4, #24]
   215d4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   215d8:	4649      	mov	r1, r9
   215da:	4798      	blx	r3
   215dc:	2800      	cmp	r0, #0
   215de:	d138      	bne.n	21652 <mbedtls_ctr_drbg_reseed_internal+0xba>
   215e0:	f8d4 8018 	ldr.w	r8, [r4, #24]
   215e4:	b13d      	cbz	r5, 215f6 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   215e6:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   215ea:	462a      	mov	r2, r5
   215ec:	eb09 0108 	add.w	r1, r9, r8
   215f0:	4798      	blx	r3
   215f2:	bb70      	cbnz	r0, 21652 <mbedtls_ctr_drbg_reseed_internal+0xba>
   215f4:	44a8      	add	r8, r5
   215f6:	b107      	cbz	r7, 215fa <mbedtls_ctr_drbg_reseed_internal+0x62>
   215f8:	b9c6      	cbnz	r6, 2162c <mbedtls_ctr_drbg_reseed_internal+0x94>
   215fa:	4917      	ldr	r1, [pc, #92]	; (21658 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   215fc:	4642      	mov	r2, r8
   215fe:	4608      	mov	r0, r1
   21600:	f7ff fdc4 	bl	2118c <block_cipher_df>
   21604:	4605      	mov	r5, r0
   21606:	b138      	cbz	r0, 21618 <mbedtls_ctr_drbg_reseed_internal+0x80>
   21608:	4813      	ldr	r0, [pc, #76]	; (21658 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2160a:	f44f 71c0 	mov.w	r1, #384	; 0x180
   2160e:	f7ff fdb3 	bl	21178 <mbedtls_platform_zeroize>
   21612:	4628      	mov	r0, r5
   21614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21618:	490f      	ldr	r1, [pc, #60]	; (21658 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2161a:	4620      	mov	r0, r4
   2161c:	f7ff ff18 	bl	21450 <ctr_drbg_update_internal>
   21620:	4605      	mov	r5, r0
   21622:	2800      	cmp	r0, #0
   21624:	d1f0      	bne.n	21608 <mbedtls_ctr_drbg_reseed_internal+0x70>
   21626:	2301      	movs	r3, #1
   21628:	6123      	str	r3, [r4, #16]
   2162a:	e7ed      	b.n	21608 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2162c:	eb09 0008 	add.w	r0, r9, r8
   21630:	4639      	mov	r1, r7
   21632:	4632      	mov	r2, r6
   21634:	f005 fec2 	bl	273bc <memcpy>
   21638:	4907      	ldr	r1, [pc, #28]	; (21658 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2163a:	44b0      	add	r8, r6
   2163c:	4642      	mov	r2, r8
   2163e:	4608      	mov	r0, r1
   21640:	f7ff fda4 	bl	2118c <block_cipher_df>
   21644:	4605      	mov	r5, r0
   21646:	2800      	cmp	r0, #0
   21648:	d1de      	bne.n	21608 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2164a:	e7e5      	b.n	21618 <mbedtls_ctr_drbg_reseed_internal+0x80>
   2164c:	f06f 0537 	mvn.w	r5, #55	; 0x37
   21650:	e7df      	b.n	21612 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   21652:	f06f 0533 	mvn.w	r5, #51	; 0x33
   21656:	e7dc      	b.n	21612 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   21658:	20003d34 	.word	0x20003d34

0002165c <cc_mbedtls_ctr_drbg_init>:
   2165c:	b510      	push	{r4, lr}
   2165e:	22a4      	movs	r2, #164	; 0xa4
   21660:	4604      	mov	r4, r0
   21662:	2100      	movs	r1, #0
   21664:	f005 feb8 	bl	273d8 <memset>
   21668:	4b06      	ldr	r3, [pc, #24]	; (21684 <cc_mbedtls_ctr_drbg_init+0x28>)
   2166a:	f04f 31ff 	mov.w	r1, #4294967295
   2166e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   21672:	6121      	str	r1, [r4, #16]
   21674:	61e2      	str	r2, [r4, #28]
   21676:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2167a:	681b      	ldr	r3, [r3, #0]
   2167c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21680:	4718      	bx	r3
   21682:	bf00      	nop
   21684:	20000970 	.word	0x20000970

00021688 <cc_mbedtls_ctr_drbg_seed>:
   21688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2168c:	b087      	sub	sp, #28
   2168e:	4605      	mov	r5, r0
   21690:	460f      	mov	r7, r1
   21692:	4616      	mov	r6, r2
   21694:	2100      	movs	r1, #0
   21696:	2210      	movs	r2, #16
   21698:	a802      	add	r0, sp, #8
   2169a:	4699      	mov	r9, r3
   2169c:	f005 fe9c 	bl	273d8 <memset>
   216a0:	4b1e      	ldr	r3, [pc, #120]	; (2171c <cc_mbedtls_ctr_drbg_seed+0x94>)
   216a2:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   216a6:	681b      	ldr	r3, [r3, #0]
   216a8:	4640      	mov	r0, r8
   216aa:	4798      	blx	r3
   216ac:	b120      	cbz	r0, 216b8 <cc_mbedtls_ctr_drbg_seed+0x30>
   216ae:	4604      	mov	r4, r0
   216b0:	4620      	mov	r0, r4
   216b2:	b007      	add	sp, #28
   216b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   216b8:	f105 0020 	add.w	r0, r5, #32
   216bc:	9001      	str	r0, [sp, #4]
   216be:	f000 ff53 	bl	22568 <cc_mbedtls_aes_init>
   216c2:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   216c6:	69ae      	ldr	r6, [r5, #24]
   216c8:	9801      	ldr	r0, [sp, #4]
   216ca:	692b      	ldr	r3, [r5, #16]
   216cc:	b9e6      	cbnz	r6, 21708 <cc_mbedtls_ctr_drbg_seed+0x80>
   216ce:	2220      	movs	r2, #32
   216d0:	2b00      	cmp	r3, #0
   216d2:	61aa      	str	r2, [r5, #24]
   216d4:	db1f      	blt.n	21716 <cc_mbedtls_ctr_drbg_seed+0x8e>
   216d6:	461e      	mov	r6, r3
   216d8:	a902      	add	r1, sp, #8
   216da:	2280      	movs	r2, #128	; 0x80
   216dc:	f000 ff5a 	bl	22594 <cc_mbedtls_aes_setkey_enc>
   216e0:	4604      	mov	r4, r0
   216e2:	b930      	cbnz	r0, 216f2 <cc_mbedtls_ctr_drbg_seed+0x6a>
   216e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   216e6:	4633      	mov	r3, r6
   216e8:	4649      	mov	r1, r9
   216ea:	4628      	mov	r0, r5
   216ec:	f7ff ff54 	bl	21598 <mbedtls_ctr_drbg_reseed_internal>
   216f0:	4604      	mov	r4, r0
   216f2:	4b0b      	ldr	r3, [pc, #44]	; (21720 <cc_mbedtls_ctr_drbg_seed+0x98>)
   216f4:	4640      	mov	r0, r8
   216f6:	681b      	ldr	r3, [r3, #0]
   216f8:	4798      	blx	r3
   216fa:	2800      	cmp	r0, #0
   216fc:	bf18      	it	ne
   216fe:	4604      	movne	r4, r0
   21700:	4620      	mov	r0, r4
   21702:	b007      	add	sp, #28
   21704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21708:	2b00      	cmp	r3, #0
   2170a:	dae4      	bge.n	216d6 <cc_mbedtls_ctr_drbg_seed+0x4e>
   2170c:	2e17      	cmp	r6, #23
   2170e:	d802      	bhi.n	21716 <cc_mbedtls_ctr_drbg_seed+0x8e>
   21710:	3601      	adds	r6, #1
   21712:	0876      	lsrs	r6, r6, #1
   21714:	e7e0      	b.n	216d8 <cc_mbedtls_ctr_drbg_seed+0x50>
   21716:	2600      	movs	r6, #0
   21718:	e7de      	b.n	216d8 <cc_mbedtls_ctr_drbg_seed+0x50>
   2171a:	bf00      	nop
   2171c:	20000974 	.word	0x20000974
   21720:	20000978 	.word	0x20000978

00021724 <cc_mbedtls_ctr_drbg_random_with_add>:
   21724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21728:	b08d      	sub	sp, #52	; 0x34
   2172a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2172e:	9f16      	ldr	r7, [sp, #88]	; 0x58
   21730:	f200 80e3 	bhi.w	218fa <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   21734:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   21738:	f200 80dc 	bhi.w	218f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   2173c:	4604      	mov	r4, r0
   2173e:	4615      	mov	r5, r2
   21740:	460e      	mov	r6, r1
   21742:	2220      	movs	r2, #32
   21744:	2100      	movs	r1, #0
   21746:	a804      	add	r0, sp, #16
   21748:	4699      	mov	r9, r3
   2174a:	f005 fe45 	bl	273d8 <memset>
   2174e:	4b6c      	ldr	r3, [pc, #432]	; (21900 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   21750:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   21754:	681b      	ldr	r3, [r3, #0]
   21756:	4640      	mov	r0, r8
   21758:	4798      	blx	r3
   2175a:	4683      	mov	fp, r0
   2175c:	2800      	cmp	r0, #0
   2175e:	f040 8092 	bne.w	21886 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   21762:	6922      	ldr	r2, [r4, #16]
   21764:	69e3      	ldr	r3, [r4, #28]
   21766:	429a      	cmp	r2, r3
   21768:	f300 8091 	bgt.w	2188e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   2176c:	6963      	ldr	r3, [r4, #20]
   2176e:	2b00      	cmp	r3, #0
   21770:	f040 808d 	bne.w	2188e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   21774:	2f00      	cmp	r7, #0
   21776:	f040 80a9 	bne.w	218cc <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   2177a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 21904 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2177e:	46ea      	mov	sl, sp
   21780:	2d00      	cmp	r5, #0
   21782:	f000 8098 	beq.w	218b6 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   21786:	f104 0720 	add.w	r7, r4, #32
   2178a:	46ea      	mov	sl, sp
   2178c:	e00e      	b.n	217ac <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2178e:	2d10      	cmp	r5, #16
   21790:	46ab      	mov	fp, r5
   21792:	bf28      	it	cs
   21794:	f04f 0b10 	movcs.w	fp, #16
   21798:	4630      	mov	r0, r6
   2179a:	465a      	mov	r2, fp
   2179c:	4651      	mov	r1, sl
   2179e:	f005 fe0d 	bl	273bc <memcpy>
   217a2:	ebb5 050b 	subs.w	r5, r5, fp
   217a6:	445e      	add	r6, fp
   217a8:	f000 8085 	beq.w	218b6 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   217ac:	7be0      	ldrb	r0, [r4, #15]
   217ae:	3001      	adds	r0, #1
   217b0:	b2c0      	uxtb	r0, r0
   217b2:	73e0      	strb	r0, [r4, #15]
   217b4:	2800      	cmp	r0, #0
   217b6:	d14d      	bne.n	21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   217b8:	7ba3      	ldrb	r3, [r4, #14]
   217ba:	3301      	adds	r3, #1
   217bc:	b2db      	uxtb	r3, r3
   217be:	73a3      	strb	r3, [r4, #14]
   217c0:	2b00      	cmp	r3, #0
   217c2:	d147      	bne.n	21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   217c4:	7b63      	ldrb	r3, [r4, #13]
   217c6:	3301      	adds	r3, #1
   217c8:	b2db      	uxtb	r3, r3
   217ca:	7363      	strb	r3, [r4, #13]
   217cc:	2b00      	cmp	r3, #0
   217ce:	d141      	bne.n	21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   217d0:	7b23      	ldrb	r3, [r4, #12]
   217d2:	3301      	adds	r3, #1
   217d4:	b2db      	uxtb	r3, r3
   217d6:	7323      	strb	r3, [r4, #12]
   217d8:	2b00      	cmp	r3, #0
   217da:	d13b      	bne.n	21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   217dc:	7ae3      	ldrb	r3, [r4, #11]
   217de:	3301      	adds	r3, #1
   217e0:	b2db      	uxtb	r3, r3
   217e2:	72e3      	strb	r3, [r4, #11]
   217e4:	2b00      	cmp	r3, #0
   217e6:	d135      	bne.n	21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   217e8:	7aa3      	ldrb	r3, [r4, #10]
   217ea:	3301      	adds	r3, #1
   217ec:	b2db      	uxtb	r3, r3
   217ee:	72a3      	strb	r3, [r4, #10]
   217f0:	2b00      	cmp	r3, #0
   217f2:	d12f      	bne.n	21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   217f4:	7a63      	ldrb	r3, [r4, #9]
   217f6:	3301      	adds	r3, #1
   217f8:	b2db      	uxtb	r3, r3
   217fa:	7263      	strb	r3, [r4, #9]
   217fc:	bb53      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   217fe:	7a23      	ldrb	r3, [r4, #8]
   21800:	3301      	adds	r3, #1
   21802:	b2db      	uxtb	r3, r3
   21804:	7223      	strb	r3, [r4, #8]
   21806:	bb2b      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21808:	79e3      	ldrb	r3, [r4, #7]
   2180a:	3301      	adds	r3, #1
   2180c:	b2db      	uxtb	r3, r3
   2180e:	71e3      	strb	r3, [r4, #7]
   21810:	bb03      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21812:	79a3      	ldrb	r3, [r4, #6]
   21814:	3301      	adds	r3, #1
   21816:	b2db      	uxtb	r3, r3
   21818:	71a3      	strb	r3, [r4, #6]
   2181a:	b9db      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2181c:	7963      	ldrb	r3, [r4, #5]
   2181e:	3301      	adds	r3, #1
   21820:	b2db      	uxtb	r3, r3
   21822:	7163      	strb	r3, [r4, #5]
   21824:	b9b3      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21826:	7923      	ldrb	r3, [r4, #4]
   21828:	3301      	adds	r3, #1
   2182a:	b2db      	uxtb	r3, r3
   2182c:	7123      	strb	r3, [r4, #4]
   2182e:	b98b      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21830:	78e3      	ldrb	r3, [r4, #3]
   21832:	3301      	adds	r3, #1
   21834:	b2db      	uxtb	r3, r3
   21836:	70e3      	strb	r3, [r4, #3]
   21838:	b963      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2183a:	78a3      	ldrb	r3, [r4, #2]
   2183c:	3301      	adds	r3, #1
   2183e:	b2db      	uxtb	r3, r3
   21840:	70a3      	strb	r3, [r4, #2]
   21842:	b93b      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21844:	7863      	ldrb	r3, [r4, #1]
   21846:	3301      	adds	r3, #1
   21848:	b2db      	uxtb	r3, r3
   2184a:	7063      	strb	r3, [r4, #1]
   2184c:	b913      	cbnz	r3, 21854 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2184e:	7823      	ldrb	r3, [r4, #0]
   21850:	3301      	adds	r3, #1
   21852:	7023      	strb	r3, [r4, #0]
   21854:	4653      	mov	r3, sl
   21856:	4622      	mov	r2, r4
   21858:	2101      	movs	r1, #1
   2185a:	4638      	mov	r0, r7
   2185c:	f000 feb4 	bl	225c8 <cc_mbedtls_aes_crypt_ecb>
   21860:	4683      	mov	fp, r0
   21862:	2800      	cmp	r0, #0
   21864:	d093      	beq.n	2178e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   21866:	f8d9 3000 	ldr.w	r3, [r9]
   2186a:	4640      	mov	r0, r8
   2186c:	4798      	blx	r3
   2186e:	2120      	movs	r1, #32
   21870:	4603      	mov	r3, r0
   21872:	a804      	add	r0, sp, #16
   21874:	2b00      	cmp	r3, #0
   21876:	bf18      	it	ne
   21878:	469b      	movne	fp, r3
   2187a:	f7ff fc7d 	bl	21178 <mbedtls_platform_zeroize>
   2187e:	2110      	movs	r1, #16
   21880:	4650      	mov	r0, sl
   21882:	f7ff fc79 	bl	21178 <mbedtls_platform_zeroize>
   21886:	4658      	mov	r0, fp
   21888:	b00d      	add	sp, #52	; 0x34
   2188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2188e:	4649      	mov	r1, r9
   21890:	463a      	mov	r2, r7
   21892:	2300      	movs	r3, #0
   21894:	4620      	mov	r0, r4
   21896:	f7ff fe7f 	bl	21598 <mbedtls_ctr_drbg_reseed_internal>
   2189a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 21904 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2189e:	2800      	cmp	r0, #0
   218a0:	f43f af6d 	beq.w	2177e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   218a4:	f8d9 3000 	ldr.w	r3, [r9]
   218a8:	4640      	mov	r0, r8
   218aa:	4798      	blx	r3
   218ac:	4683      	mov	fp, r0
   218ae:	2800      	cmp	r0, #0
   218b0:	f43f af65 	beq.w	2177e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   218b4:	e7e7      	b.n	21886 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   218b6:	a904      	add	r1, sp, #16
   218b8:	4620      	mov	r0, r4
   218ba:	f7ff fdc9 	bl	21450 <ctr_drbg_update_internal>
   218be:	4683      	mov	fp, r0
   218c0:	2800      	cmp	r0, #0
   218c2:	d1d0      	bne.n	21866 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   218c4:	6923      	ldr	r3, [r4, #16]
   218c6:	3301      	adds	r3, #1
   218c8:	6123      	str	r3, [r4, #16]
   218ca:	e7cc      	b.n	21866 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   218cc:	463a      	mov	r2, r7
   218ce:	4649      	mov	r1, r9
   218d0:	a804      	add	r0, sp, #16
   218d2:	f7ff fc5b 	bl	2118c <block_cipher_df>
   218d6:	4683      	mov	fp, r0
   218d8:	b118      	cbz	r0, 218e2 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   218da:	f8df 9028 	ldr.w	r9, [pc, #40]	; 21904 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   218de:	46ea      	mov	sl, sp
   218e0:	e7c1      	b.n	21866 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   218e2:	a904      	add	r1, sp, #16
   218e4:	4620      	mov	r0, r4
   218e6:	f7ff fdb3 	bl	21450 <ctr_drbg_update_internal>
   218ea:	4683      	mov	fp, r0
   218ec:	2800      	cmp	r0, #0
   218ee:	f43f af44 	beq.w	2177a <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   218f2:	e7f2      	b.n	218da <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   218f4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   218f8:	e7c5      	b.n	21886 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   218fa:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   218fe:	e7c2      	b.n	21886 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   21900:	20000974 	.word	0x20000974
   21904:	20000978 	.word	0x20000978

00021908 <entropy_update>:
   21908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2190c:	2b20      	cmp	r3, #32
   2190e:	b08b      	sub	sp, #44	; 0x2c
   21910:	461d      	mov	r5, r3
   21912:	4606      	mov	r6, r0
   21914:	4688      	mov	r8, r1
   21916:	4691      	mov	r9, r2
   21918:	d826      	bhi.n	21968 <entropy_update+0x60>
   2191a:	b2db      	uxtb	r3, r3
   2191c:	af02      	add	r7, sp, #8
   2191e:	f88d 8004 	strb.w	r8, [sp, #4]
   21922:	46b0      	mov	r8, r6
   21924:	f88d 3005 	strb.w	r3, [sp, #5]
   21928:	f858 1b04 	ldr.w	r1, [r8], #4
   2192c:	b921      	cbnz	r1, 21938 <entropy_update+0x30>
   2192e:	4640      	mov	r0, r8
   21930:	f000 fe8e 	bl	22650 <cc_mbedtls_sha256_starts>
   21934:	4604      	mov	r4, r0
   21936:	b940      	cbnz	r0, 2194a <entropy_update+0x42>
   21938:	2301      	movs	r3, #1
   2193a:	6033      	str	r3, [r6, #0]
   2193c:	2202      	movs	r2, #2
   2193e:	a901      	add	r1, sp, #4
   21940:	4640      	mov	r0, r8
   21942:	f000 fe99 	bl	22678 <cc_mbedtls_sha256_update>
   21946:	4604      	mov	r4, r0
   21948:	b138      	cbz	r0, 2195a <entropy_update+0x52>
   2194a:	4638      	mov	r0, r7
   2194c:	2120      	movs	r1, #32
   2194e:	f7ff fc13 	bl	21178 <mbedtls_platform_zeroize>
   21952:	4620      	mov	r0, r4
   21954:	b00b      	add	sp, #44	; 0x2c
   21956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2195a:	462a      	mov	r2, r5
   2195c:	4649      	mov	r1, r9
   2195e:	4640      	mov	r0, r8
   21960:	f000 fe8a 	bl	22678 <cc_mbedtls_sha256_update>
   21964:	4604      	mov	r4, r0
   21966:	e7f0      	b.n	2194a <entropy_update+0x42>
   21968:	af02      	add	r7, sp, #8
   2196a:	4619      	mov	r1, r3
   2196c:	4610      	mov	r0, r2
   2196e:	2300      	movs	r3, #0
   21970:	463a      	mov	r2, r7
   21972:	f001 f809 	bl	22988 <cc_mbedtls_sha256>
   21976:	4604      	mov	r4, r0
   21978:	2800      	cmp	r0, #0
   2197a:	d1e6      	bne.n	2194a <entropy_update+0x42>
   2197c:	2320      	movs	r3, #32
   2197e:	46b9      	mov	r9, r7
   21980:	461d      	mov	r5, r3
   21982:	e7cc      	b.n	2191e <entropy_update+0x16>

00021984 <entropy_gather_internal.part.0>:
   21984:	b5f0      	push	{r4, r5, r6, r7, lr}
   21986:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   2198a:	b0a7      	sub	sp, #156	; 0x9c
   2198c:	2b00      	cmp	r3, #0
   2198e:	bfd8      	it	le
   21990:	ae02      	addle	r6, sp, #8
   21992:	dd2c      	ble.n	219ee <entropy_gather_internal.part.0+0x6a>
   21994:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   21998:	4605      	mov	r5, r0
   2199a:	2300      	movs	r3, #0
   2199c:	ae02      	add	r6, sp, #8
   2199e:	9301      	str	r3, [sp, #4]
   219a0:	f1a4 0701 	sub.w	r7, r4, #1
   219a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   219a8:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   219ac:	ab01      	add	r3, sp, #4
   219ae:	2290      	movs	r2, #144	; 0x90
   219b0:	4631      	mov	r1, r6
   219b2:	47a0      	blx	r4
   219b4:	fab7 f787 	clz	r7, r7
   219b8:	097f      	lsrs	r7, r7, #5
   219ba:	4604      	mov	r4, r0
   219bc:	b910      	cbnz	r0, 219c4 <entropy_gather_internal.part.0+0x40>
   219be:	9b01      	ldr	r3, [sp, #4]
   219c0:	b93b      	cbnz	r3, 219d2 <entropy_gather_internal.part.0+0x4e>
   219c2:	b1a7      	cbz	r7, 219ee <entropy_gather_internal.part.0+0x6a>
   219c4:	4630      	mov	r0, r6
   219c6:	2190      	movs	r1, #144	; 0x90
   219c8:	f7ff fbd6 	bl	21178 <mbedtls_platform_zeroize>
   219cc:	4620      	mov	r0, r4
   219ce:	b027      	add	sp, #156	; 0x9c
   219d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   219d2:	4601      	mov	r1, r0
   219d4:	4632      	mov	r2, r6
   219d6:	4628      	mov	r0, r5
   219d8:	f7ff ff96 	bl	21908 <entropy_update>
   219dc:	b950      	cbnz	r0, 219f4 <entropy_gather_internal.part.0+0x70>
   219de:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   219e2:	9a01      	ldr	r2, [sp, #4]
   219e4:	4413      	add	r3, r2
   219e6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   219ea:	2f00      	cmp	r7, #0
   219ec:	d1ea      	bne.n	219c4 <entropy_gather_internal.part.0+0x40>
   219ee:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   219f2:	e7e7      	b.n	219c4 <entropy_gather_internal.part.0+0x40>
   219f4:	4604      	mov	r4, r0
   219f6:	4620      	mov	r0, r4
   219f8:	b027      	add	sp, #156	; 0x9c
   219fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000219fc <cc_mbedtls_entropy_init>:
   219fc:	b570      	push	{r4, r5, r6, lr}
   219fe:	2500      	movs	r5, #0
   21a00:	4604      	mov	r4, r0
   21a02:	f504 7688 	add.w	r6, r4, #272	; 0x110
   21a06:	2214      	movs	r2, #20
   21a08:	4629      	mov	r1, r5
   21a0a:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   21a0e:	30fc      	adds	r0, #252	; 0xfc
   21a10:	f005 fce2 	bl	273d8 <memset>
   21a14:	2208      	movs	r2, #8
   21a16:	4629      	mov	r1, r5
   21a18:	4630      	mov	r0, r6
   21a1a:	f005 fcdd 	bl	273d8 <memset>
   21a1e:	4b15      	ldr	r3, [pc, #84]	; (21a74 <cc_mbedtls_entropy_init+0x78>)
   21a20:	4630      	mov	r0, r6
   21a22:	681b      	ldr	r3, [r3, #0]
   21a24:	4798      	blx	r3
   21a26:	4620      	mov	r0, r4
   21a28:	f840 5b04 	str.w	r5, [r0], #4
   21a2c:	f000 fdf6 	bl	2261c <cc_mbedtls_sha256_init>
   21a30:	4b11      	ldr	r3, [pc, #68]	; (21a78 <cc_mbedtls_entropy_init+0x7c>)
   21a32:	4630      	mov	r0, r6
   21a34:	681b      	ldr	r3, [r3, #0]
   21a36:	4798      	blx	r3
   21a38:	b9d8      	cbnz	r0, 21a72 <cc_mbedtls_entropy_init+0x76>
   21a3a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   21a3e:	42ab      	cmp	r3, r5
   21a40:	dc11      	bgt.n	21a66 <cc_mbedtls_entropy_init+0x6a>
   21a42:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   21a46:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   21a4a:	2120      	movs	r1, #32
   21a4c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   21a50:	2101      	movs	r1, #1
   21a52:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   21a56:	3301      	adds	r3, #1
   21a58:	4908      	ldr	r1, [pc, #32]	; (21a7c <cc_mbedtls_entropy_init+0x80>)
   21a5a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   21a5e:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   21a62:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   21a66:	4b06      	ldr	r3, [pc, #24]	; (21a80 <cc_mbedtls_entropy_init+0x84>)
   21a68:	4630      	mov	r0, r6
   21a6a:	681b      	ldr	r3, [r3, #0]
   21a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21a70:	4718      	bx	r3
   21a72:	bd70      	pop	{r4, r5, r6, pc}
   21a74:	20000970 	.word	0x20000970
   21a78:	20000974 	.word	0x20000974
   21a7c:	0002246d 	.word	0x0002246d
   21a80:	20000978 	.word	0x20000978

00021a84 <cc_mbedtls_entropy_func>:
   21a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a88:	2a20      	cmp	r2, #32
   21a8a:	b088      	sub	sp, #32
   21a8c:	d876      	bhi.n	21b7c <cc_mbedtls_entropy_func+0xf8>
   21a8e:	4b3d      	ldr	r3, [pc, #244]	; (21b84 <cc_mbedtls_entropy_func+0x100>)
   21a90:	f500 7988 	add.w	r9, r0, #272	; 0x110
   21a94:	681b      	ldr	r3, [r3, #0]
   21a96:	4604      	mov	r4, r0
   21a98:	4648      	mov	r0, r9
   21a9a:	4617      	mov	r7, r2
   21a9c:	4688      	mov	r8, r1
   21a9e:	4798      	blx	r3
   21aa0:	4605      	mov	r5, r0
   21aa2:	bba0      	cbnz	r0, 21b0e <cc_mbedtls_entropy_func+0x8a>
   21aa4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   21aa8:	f240 1601 	movw	r6, #257	; 0x101
   21aac:	e001      	b.n	21ab2 <cc_mbedtls_entropy_func+0x2e>
   21aae:	3e01      	subs	r6, #1
   21ab0:	d060      	beq.n	21b74 <cc_mbedtls_entropy_func+0xf0>
   21ab2:	4620      	mov	r0, r4
   21ab4:	b37b      	cbz	r3, 21b16 <cc_mbedtls_entropy_func+0x92>
   21ab6:	f7ff ff65 	bl	21984 <entropy_gather_internal.part.0>
   21aba:	4605      	mov	r5, r0
   21abc:	bb68      	cbnz	r0, 21b1a <cc_mbedtls_entropy_func+0x96>
   21abe:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   21ac2:	2b00      	cmp	r3, #0
   21ac4:	ddf3      	ble.n	21aae <cc_mbedtls_entropy_func+0x2a>
   21ac6:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   21aca:	4290      	cmp	r0, r2
   21acc:	d3ef      	bcc.n	21aae <cc_mbedtls_entropy_func+0x2a>
   21ace:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21ad2:	2a01      	cmp	r2, #1
   21ad4:	d1eb      	bne.n	21aae <cc_mbedtls_entropy_func+0x2a>
   21ad6:	281f      	cmp	r0, #31
   21ad8:	d9e9      	bls.n	21aae <cc_mbedtls_entropy_func+0x2a>
   21ada:	466e      	mov	r6, sp
   21adc:	4629      	mov	r1, r5
   21ade:	2220      	movs	r2, #32
   21ae0:	4630      	mov	r0, r6
   21ae2:	f104 0a04 	add.w	sl, r4, #4
   21ae6:	f005 fc77 	bl	273d8 <memset>
   21aea:	4631      	mov	r1, r6
   21aec:	4650      	mov	r0, sl
   21aee:	f000 fded 	bl	226cc <cc_mbedtls_sha256_finish>
   21af2:	4605      	mov	r5, r0
   21af4:	b198      	cbz	r0, 21b1e <cc_mbedtls_entropy_func+0x9a>
   21af6:	2120      	movs	r1, #32
   21af8:	4630      	mov	r0, r6
   21afa:	f7ff fb3d 	bl	21178 <mbedtls_platform_zeroize>
   21afe:	4b22      	ldr	r3, [pc, #136]	; (21b88 <cc_mbedtls_entropy_func+0x104>)
   21b00:	4648      	mov	r0, r9
   21b02:	681b      	ldr	r3, [r3, #0]
   21b04:	4798      	blx	r3
   21b06:	2800      	cmp	r0, #0
   21b08:	bf18      	it	ne
   21b0a:	f06f 051d 	mvnne.w	r5, #29
   21b0e:	4628      	mov	r0, r5
   21b10:	b008      	add	sp, #32
   21b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21b16:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   21b1a:	466e      	mov	r6, sp
   21b1c:	e7eb      	b.n	21af6 <cc_mbedtls_entropy_func+0x72>
   21b1e:	4650      	mov	r0, sl
   21b20:	f000 fd90 	bl	22644 <cc_mbedtls_sha256_free>
   21b24:	4650      	mov	r0, sl
   21b26:	f000 fd79 	bl	2261c <cc_mbedtls_sha256_init>
   21b2a:	4629      	mov	r1, r5
   21b2c:	4650      	mov	r0, sl
   21b2e:	f000 fd8f 	bl	22650 <cc_mbedtls_sha256_starts>
   21b32:	4605      	mov	r5, r0
   21b34:	2800      	cmp	r0, #0
   21b36:	d1de      	bne.n	21af6 <cc_mbedtls_entropy_func+0x72>
   21b38:	4650      	mov	r0, sl
   21b3a:	2220      	movs	r2, #32
   21b3c:	4631      	mov	r1, r6
   21b3e:	f000 fd9b 	bl	22678 <cc_mbedtls_sha256_update>
   21b42:	4605      	mov	r5, r0
   21b44:	2800      	cmp	r0, #0
   21b46:	d1d6      	bne.n	21af6 <cc_mbedtls_entropy_func+0x72>
   21b48:	4603      	mov	r3, r0
   21b4a:	4632      	mov	r2, r6
   21b4c:	2120      	movs	r1, #32
   21b4e:	4630      	mov	r0, r6
   21b50:	f000 ff1a 	bl	22988 <cc_mbedtls_sha256>
   21b54:	4605      	mov	r5, r0
   21b56:	2800      	cmp	r0, #0
   21b58:	d1cd      	bne.n	21af6 <cc_mbedtls_entropy_func+0x72>
   21b5a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   21b5e:	2b00      	cmp	r3, #0
   21b60:	bfc4      	itt	gt
   21b62:	2300      	movgt	r3, #0
   21b64:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   21b68:	463a      	mov	r2, r7
   21b6a:	4640      	mov	r0, r8
   21b6c:	4631      	mov	r1, r6
   21b6e:	f005 fc25 	bl	273bc <memcpy>
   21b72:	e7c0      	b.n	21af6 <cc_mbedtls_entropy_func+0x72>
   21b74:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   21b78:	466e      	mov	r6, sp
   21b7a:	e7bc      	b.n	21af6 <cc_mbedtls_entropy_func+0x72>
   21b7c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   21b80:	e7c5      	b.n	21b0e <cc_mbedtls_entropy_func+0x8a>
   21b82:	bf00      	nop
   21b84:	20000974 	.word	0x20000974
   21b88:	20000978 	.word	0x20000978

00021b8c <RndStartupTest.constprop.0>:
   21b8c:	b530      	push	{r4, r5, lr}
   21b8e:	b08d      	sub	sp, #52	; 0x34
   21b90:	2100      	movs	r1, #0
   21b92:	2228      	movs	r2, #40	; 0x28
   21b94:	a802      	add	r0, sp, #8
   21b96:	9101      	str	r1, [sp, #4]
   21b98:	f005 fc1e 	bl	273d8 <memset>
   21b9c:	a802      	add	r0, sp, #8
   21b9e:	f000 ff1b 	bl	229d8 <RNG_PLAT_SetUserRngParameters>
   21ba2:	4604      	mov	r4, r0
   21ba4:	b110      	cbz	r0, 21bac <RndStartupTest.constprop.0+0x20>
   21ba6:	4620      	mov	r0, r4
   21ba8:	b00d      	add	sp, #52	; 0x34
   21baa:	bd30      	pop	{r4, r5, pc}
   21bac:	4d18      	ldr	r5, [pc, #96]	; (21c10 <RndStartupTest.constprop.0+0x84>)
   21bae:	f04f 31ff 	mov.w	r1, #4294967295
   21bb2:	6828      	ldr	r0, [r5, #0]
   21bb4:	f000 f946 	bl	21e44 <CC_PalMutexLock>
   21bb8:	4604      	mov	r4, r0
   21bba:	b9c0      	cbnz	r0, 21bee <RndStartupTest.constprop.0+0x62>
   21bbc:	2000      	movs	r0, #0
   21bbe:	f000 f971 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   21bc2:	bb00      	cbnz	r0, 21c06 <RndStartupTest.constprop.0+0x7a>
   21bc4:	4a13      	ldr	r2, [pc, #76]	; (21c14 <RndStartupTest.constprop.0+0x88>)
   21bc6:	a902      	add	r1, sp, #8
   21bc8:	a801      	add	r0, sp, #4
   21bca:	f000 fc41 	bl	22450 <LLF_RND_RunTrngStartupTest>
   21bce:	4604      	mov	r4, r0
   21bd0:	2001      	movs	r0, #1
   21bd2:	f000 f967 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   21bd6:	b990      	cbnz	r0, 21bfe <RndStartupTest.constprop.0+0x72>
   21bd8:	6828      	ldr	r0, [r5, #0]
   21bda:	f000 f93b 	bl	21e54 <CC_PalMutexUnlock>
   21bde:	2800      	cmp	r0, #0
   21be0:	d0e1      	beq.n	21ba6 <RndStartupTest.constprop.0+0x1a>
   21be2:	480d      	ldr	r0, [pc, #52]	; (21c18 <RndStartupTest.constprop.0+0x8c>)
   21be4:	f7ff f9a4 	bl	20f30 <CC_PalAbort>
   21be8:	4620      	mov	r0, r4
   21bea:	b00d      	add	sp, #52	; 0x34
   21bec:	bd30      	pop	{r4, r5, pc}
   21bee:	480b      	ldr	r0, [pc, #44]	; (21c1c <RndStartupTest.constprop.0+0x90>)
   21bf0:	f7ff f99e 	bl	20f30 <CC_PalAbort>
   21bf4:	2c01      	cmp	r4, #1
   21bf6:	bf08      	it	eq
   21bf8:	2405      	moveq	r4, #5
   21bfa:	d0ed      	beq.n	21bd8 <RndStartupTest.constprop.0+0x4c>
   21bfc:	e7de      	b.n	21bbc <RndStartupTest.constprop.0+0x30>
   21bfe:	4808      	ldr	r0, [pc, #32]	; (21c20 <RndStartupTest.constprop.0+0x94>)
   21c00:	f7ff f996 	bl	20f30 <CC_PalAbort>
   21c04:	e7e8      	b.n	21bd8 <RndStartupTest.constprop.0+0x4c>
   21c06:	4807      	ldr	r0, [pc, #28]	; (21c24 <RndStartupTest.constprop.0+0x98>)
   21c08:	f7ff f992 	bl	20f30 <CC_PalAbort>
   21c0c:	e7da      	b.n	21bc4 <RndStartupTest.constprop.0+0x38>
   21c0e:	bf00      	nop
   21c10:	2000096c 	.word	0x2000096c
   21c14:	20003f20 	.word	0x20003f20
   21c18:	00028b58 	.word	0x00028b58
   21c1c:	00028b00 	.word	0x00028b00
   21c20:	00028b38 	.word	0x00028b38
   21c24:	00028b18 	.word	0x00028b18

00021c28 <CC_LibInit>:
   21c28:	b530      	push	{r4, r5, lr}
   21c2a:	b083      	sub	sp, #12
   21c2c:	f000 f85c 	bl	21ce8 <CC_HalInit>
   21c30:	b128      	cbz	r0, 21c3e <CC_LibInit+0x16>
   21c32:	f000 f8ab 	bl	21d8c <CC_PalTerminate>
   21c36:	2403      	movs	r4, #3
   21c38:	4620      	mov	r0, r4
   21c3a:	b003      	add	sp, #12
   21c3c:	bd30      	pop	{r4, r5, pc}
   21c3e:	f000 f877 	bl	21d30 <CC_PalInit>
   21c42:	b9d8      	cbnz	r0, 21c7c <CC_LibInit+0x54>
   21c44:	f000 f92e 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   21c48:	b9e0      	cbnz	r0, 21c84 <CC_LibInit+0x5c>
   21c4a:	4c22      	ldr	r4, [pc, #136]	; (21cd4 <CC_LibInit+0xac>)
   21c4c:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   21c50:	0e1b      	lsrs	r3, r3, #24
   21c52:	2bf0      	cmp	r3, #240	; 0xf0
   21c54:	d10a      	bne.n	21c6c <CC_LibInit+0x44>
   21c56:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   21c5a:	4b1f      	ldr	r3, [pc, #124]	; (21cd8 <CC_LibInit+0xb0>)
   21c5c:	429a      	cmp	r2, r3
   21c5e:	d031      	beq.n	21cc4 <CC_LibInit+0x9c>
   21c60:	f000 f844 	bl	21cec <CC_HalTerminate>
   21c64:	2407      	movs	r4, #7
   21c66:	f000 f891 	bl	21d8c <CC_PalTerminate>
   21c6a:	e7e5      	b.n	21c38 <CC_LibInit+0x10>
   21c6c:	f000 f83e 	bl	21cec <CC_HalTerminate>
   21c70:	f000 f88c 	bl	21d8c <CC_PalTerminate>
   21c74:	2406      	movs	r4, #6
   21c76:	4620      	mov	r0, r4
   21c78:	b003      	add	sp, #12
   21c7a:	bd30      	pop	{r4, r5, pc}
   21c7c:	2404      	movs	r4, #4
   21c7e:	4620      	mov	r0, r4
   21c80:	b003      	add	sp, #12
   21c82:	bd30      	pop	{r4, r5, pc}
   21c84:	f000 f832 	bl	21cec <CC_HalTerminate>
   21c88:	f000 f880 	bl	21d8c <CC_PalTerminate>
   21c8c:	f7ff ff7e 	bl	21b8c <RndStartupTest.constprop.0>
   21c90:	4604      	mov	r4, r0
   21c92:	b998      	cbnz	r0, 21cbc <CC_LibInit+0x94>
   21c94:	4d11      	ldr	r5, [pc, #68]	; (21cdc <CC_LibInit+0xb4>)
   21c96:	682b      	ldr	r3, [r5, #0]
   21c98:	2b00      	cmp	r3, #0
   21c9a:	d1cd      	bne.n	21c38 <CC_LibInit+0x10>
   21c9c:	4602      	mov	r2, r0
   21c9e:	4601      	mov	r1, r0
   21ca0:	f7ff f96a 	bl	20f78 <nrf_cc3xx_platform_ctr_drbg_init>
   21ca4:	b950      	cbnz	r0, 21cbc <CC_LibInit+0x94>
   21ca6:	490e      	ldr	r1, [pc, #56]	; (21ce0 <CC_LibInit+0xb8>)
   21ca8:	ab01      	add	r3, sp, #4
   21caa:	2268      	movs	r2, #104	; 0x68
   21cac:	f7ff f998 	bl	20fe0 <nrf_cc3xx_platform_ctr_drbg_get>
   21cb0:	b920      	cbnz	r0, 21cbc <CC_LibInit+0x94>
   21cb2:	4b0c      	ldr	r3, [pc, #48]	; (21ce4 <CC_LibInit+0xbc>)
   21cb4:	602b      	str	r3, [r5, #0]
   21cb6:	4620      	mov	r0, r4
   21cb8:	b003      	add	sp, #12
   21cba:	bd30      	pop	{r4, r5, pc}
   21cbc:	2405      	movs	r4, #5
   21cbe:	4620      	mov	r0, r4
   21cc0:	b003      	add	sp, #12
   21cc2:	bd30      	pop	{r4, r5, pc}
   21cc4:	2001      	movs	r0, #1
   21cc6:	f000 f8ed 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   21cca:	2800      	cmp	r0, #0
   21ccc:	d1da      	bne.n	21c84 <CC_LibInit+0x5c>
   21cce:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   21cd2:	e7db      	b.n	21c8c <CC_LibInit+0x64>
   21cd4:	5002b000 	.word	0x5002b000
   21cd8:	20e00000 	.word	0x20e00000
   21cdc:	20003f1c 	.word	0x20003f1c
   21ce0:	20003eb4 	.word	0x20003eb4
   21ce4:	5a5aea5a 	.word	0x5a5aea5a

00021ce8 <CC_HalInit>:
   21ce8:	2000      	movs	r0, #0
   21cea:	4770      	bx	lr

00021cec <CC_HalTerminate>:
   21cec:	2000      	movs	r0, #0
   21cee:	4770      	bx	lr

00021cf0 <CC_HalClearInterruptBit>:
   21cf0:	0543      	lsls	r3, r0, #21
   21cf2:	d504      	bpl.n	21cfe <CC_HalClearInterruptBit+0xe>
   21cf4:	4b04      	ldr	r3, [pc, #16]	; (21d08 <CC_HalClearInterruptBit+0x18>)
   21cf6:	f04f 32ff 	mov.w	r2, #4294967295
   21cfa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   21cfe:	4b02      	ldr	r3, [pc, #8]	; (21d08 <CC_HalClearInterruptBit+0x18>)
   21d00:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   21d04:	4770      	bx	lr
   21d06:	bf00      	nop
   21d08:	5002b000 	.word	0x5002b000

00021d0c <CC_HalMaskInterrupt>:
   21d0c:	4b01      	ldr	r3, [pc, #4]	; (21d14 <CC_HalMaskInterrupt+0x8>)
   21d0e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   21d12:	4770      	bx	lr
   21d14:	5002b000 	.word	0x5002b000

00021d18 <CC_HalWaitInterrupt>:
   21d18:	b108      	cbz	r0, 21d1e <CC_HalWaitInterrupt+0x6>
   21d1a:	f000 b86b 	b.w	21df4 <CC_PalWaitInterrupt>
   21d1e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   21d22:	4770      	bx	lr

00021d24 <CC_HalWaitInterruptRND>:
   21d24:	b108      	cbz	r0, 21d2a <CC_HalWaitInterruptRND+0x6>
   21d26:	f000 b84f 	b.w	21dc8 <CC_PalWaitInterruptRND>
   21d2a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   21d2e:	4770      	bx	lr

00021d30 <CC_PalInit>:
   21d30:	b510      	push	{r4, lr}
   21d32:	4811      	ldr	r0, [pc, #68]	; (21d78 <CC_PalInit+0x48>)
   21d34:	f000 f872 	bl	21e1c <CC_PalMutexCreate>
   21d38:	b100      	cbz	r0, 21d3c <CC_PalInit+0xc>
   21d3a:	bd10      	pop	{r4, pc}
   21d3c:	480f      	ldr	r0, [pc, #60]	; (21d7c <CC_PalInit+0x4c>)
   21d3e:	f000 f86d 	bl	21e1c <CC_PalMutexCreate>
   21d42:	2800      	cmp	r0, #0
   21d44:	d1f9      	bne.n	21d3a <CC_PalInit+0xa>
   21d46:	4c0e      	ldr	r4, [pc, #56]	; (21d80 <CC_PalInit+0x50>)
   21d48:	4620      	mov	r0, r4
   21d4a:	f000 f867 	bl	21e1c <CC_PalMutexCreate>
   21d4e:	2800      	cmp	r0, #0
   21d50:	d1f3      	bne.n	21d3a <CC_PalInit+0xa>
   21d52:	4b0c      	ldr	r3, [pc, #48]	; (21d84 <CC_PalInit+0x54>)
   21d54:	480c      	ldr	r0, [pc, #48]	; (21d88 <CC_PalInit+0x58>)
   21d56:	601c      	str	r4, [r3, #0]
   21d58:	f000 f860 	bl	21e1c <CC_PalMutexCreate>
   21d5c:	4601      	mov	r1, r0
   21d5e:	2800      	cmp	r0, #0
   21d60:	d1eb      	bne.n	21d3a <CC_PalInit+0xa>
   21d62:	f000 f82d 	bl	21dc0 <CC_PalDmaInit>
   21d66:	4604      	mov	r4, r0
   21d68:	b108      	cbz	r0, 21d6e <CC_PalInit+0x3e>
   21d6a:	4620      	mov	r0, r4
   21d6c:	bd10      	pop	{r4, pc}
   21d6e:	f000 f87b 	bl	21e68 <CC_PalPowerSaveModeInit>
   21d72:	4620      	mov	r0, r4
   21d74:	e7fa      	b.n	21d6c <CC_PalInit+0x3c>
   21d76:	bf00      	nop
   21d78:	20000968 	.word	0x20000968
   21d7c:	2000095c 	.word	0x2000095c
   21d80:	20000964 	.word	0x20000964
   21d84:	2000096c 	.word	0x2000096c
   21d88:	20000960 	.word	0x20000960

00021d8c <CC_PalTerminate>:
   21d8c:	b508      	push	{r3, lr}
   21d8e:	4808      	ldr	r0, [pc, #32]	; (21db0 <CC_PalTerminate+0x24>)
   21d90:	f000 f84e 	bl	21e30 <CC_PalMutexDestroy>
   21d94:	4807      	ldr	r0, [pc, #28]	; (21db4 <CC_PalTerminate+0x28>)
   21d96:	f000 f84b 	bl	21e30 <CC_PalMutexDestroy>
   21d9a:	4807      	ldr	r0, [pc, #28]	; (21db8 <CC_PalTerminate+0x2c>)
   21d9c:	f000 f848 	bl	21e30 <CC_PalMutexDestroy>
   21da0:	4806      	ldr	r0, [pc, #24]	; (21dbc <CC_PalTerminate+0x30>)
   21da2:	f000 f845 	bl	21e30 <CC_PalMutexDestroy>
   21da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21daa:	f000 b80b 	b.w	21dc4 <CC_PalDmaTerminate>
   21dae:	bf00      	nop
   21db0:	20000968 	.word	0x20000968
   21db4:	2000095c 	.word	0x2000095c
   21db8:	20000964 	.word	0x20000964
   21dbc:	20000960 	.word	0x20000960

00021dc0 <CC_PalDmaInit>:
   21dc0:	2000      	movs	r0, #0
   21dc2:	4770      	bx	lr

00021dc4 <CC_PalDmaTerminate>:
   21dc4:	4770      	bx	lr
   21dc6:	bf00      	nop

00021dc8 <CC_PalWaitInterruptRND>:
   21dc8:	b410      	push	{r4}
   21dca:	4c09      	ldr	r4, [pc, #36]	; (21df0 <CC_PalWaitInterruptRND+0x28>)
   21dcc:	4602      	mov	r2, r0
   21dce:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   21dd2:	4213      	tst	r3, r2
   21dd4:	d0fb      	beq.n	21dce <CC_PalWaitInterruptRND+0x6>
   21dd6:	b121      	cbz	r1, 21de2 <CC_PalWaitInterruptRND+0x1a>
   21dd8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   21ddc:	600b      	str	r3, [r1, #0]
   21dde:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   21de2:	4b03      	ldr	r3, [pc, #12]	; (21df0 <CC_PalWaitInterruptRND+0x28>)
   21de4:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   21de8:	2000      	movs	r0, #0
   21dea:	f85d 4b04 	ldr.w	r4, [sp], #4
   21dee:	4770      	bx	lr
   21df0:	5002b000 	.word	0x5002b000

00021df4 <CC_PalWaitInterrupt>:
   21df4:	4a04      	ldr	r2, [pc, #16]	; (21e08 <CC_PalWaitInterrupt+0x14>)
   21df6:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   21dfa:	4218      	tst	r0, r3
   21dfc:	d0fb      	beq.n	21df6 <CC_PalWaitInterrupt+0x2>
   21dfe:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   21e02:	2000      	movs	r0, #0
   21e04:	4770      	bx	lr
   21e06:	bf00      	nop
   21e08:	5002b000 	.word	0x5002b000

00021e0c <CC_PalMemCopyPlat>:
   21e0c:	f005 be50 	b.w	27ab0 <memmove>

00021e10 <CC_PalMemSetPlat>:
   21e10:	f005 bae2 	b.w	273d8 <memset>

00021e14 <CC_PalMemSetZeroPlat>:
   21e14:	460a      	mov	r2, r1
   21e16:	2100      	movs	r1, #0
   21e18:	f005 bade 	b.w	273d8 <memset>

00021e1c <CC_PalMutexCreate>:
   21e1c:	b508      	push	{r3, lr}
   21e1e:	4b03      	ldr	r3, [pc, #12]	; (21e2c <CC_PalMutexCreate+0x10>)
   21e20:	6802      	ldr	r2, [r0, #0]
   21e22:	681b      	ldr	r3, [r3, #0]
   21e24:	6810      	ldr	r0, [r2, #0]
   21e26:	4798      	blx	r3
   21e28:	2000      	movs	r0, #0
   21e2a:	bd08      	pop	{r3, pc}
   21e2c:	2000091c 	.word	0x2000091c

00021e30 <CC_PalMutexDestroy>:
   21e30:	b508      	push	{r3, lr}
   21e32:	4b03      	ldr	r3, [pc, #12]	; (21e40 <CC_PalMutexDestroy+0x10>)
   21e34:	6802      	ldr	r2, [r0, #0]
   21e36:	685b      	ldr	r3, [r3, #4]
   21e38:	6810      	ldr	r0, [r2, #0]
   21e3a:	4798      	blx	r3
   21e3c:	2000      	movs	r0, #0
   21e3e:	bd08      	pop	{r3, pc}
   21e40:	2000091c 	.word	0x2000091c

00021e44 <CC_PalMutexLock>:
   21e44:	4b02      	ldr	r3, [pc, #8]	; (21e50 <CC_PalMutexLock+0xc>)
   21e46:	6802      	ldr	r2, [r0, #0]
   21e48:	689b      	ldr	r3, [r3, #8]
   21e4a:	6810      	ldr	r0, [r2, #0]
   21e4c:	4718      	bx	r3
   21e4e:	bf00      	nop
   21e50:	2000091c 	.word	0x2000091c

00021e54 <CC_PalMutexUnlock>:
   21e54:	b508      	push	{r3, lr}
   21e56:	4b03      	ldr	r3, [pc, #12]	; (21e64 <CC_PalMutexUnlock+0x10>)
   21e58:	6802      	ldr	r2, [r0, #0]
   21e5a:	68db      	ldr	r3, [r3, #12]
   21e5c:	6810      	ldr	r0, [r2, #0]
   21e5e:	4798      	blx	r3
   21e60:	2000      	movs	r0, #0
   21e62:	bd08      	pop	{r3, pc}
   21e64:	2000091c 	.word	0x2000091c

00021e68 <CC_PalPowerSaveModeInit>:
   21e68:	b570      	push	{r4, r5, r6, lr}
   21e6a:	4c09      	ldr	r4, [pc, #36]	; (21e90 <CC_PalPowerSaveModeInit+0x28>)
   21e6c:	4d09      	ldr	r5, [pc, #36]	; (21e94 <CC_PalPowerSaveModeInit+0x2c>)
   21e6e:	6920      	ldr	r0, [r4, #16]
   21e70:	68ab      	ldr	r3, [r5, #8]
   21e72:	4798      	blx	r3
   21e74:	b118      	cbz	r0, 21e7e <CC_PalPowerSaveModeInit+0x16>
   21e76:	4b08      	ldr	r3, [pc, #32]	; (21e98 <CC_PalPowerSaveModeInit+0x30>)
   21e78:	4808      	ldr	r0, [pc, #32]	; (21e9c <CC_PalPowerSaveModeInit+0x34>)
   21e7a:	685b      	ldr	r3, [r3, #4]
   21e7c:	4798      	blx	r3
   21e7e:	4a08      	ldr	r2, [pc, #32]	; (21ea0 <CC_PalPowerSaveModeInit+0x38>)
   21e80:	68eb      	ldr	r3, [r5, #12]
   21e82:	6920      	ldr	r0, [r4, #16]
   21e84:	2100      	movs	r1, #0
   21e86:	6011      	str	r1, [r2, #0]
   21e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21e8c:	4718      	bx	r3
   21e8e:	bf00      	nop
   21e90:	2000092c 	.word	0x2000092c
   21e94:	2000091c 	.word	0x2000091c
   21e98:	2000090c 	.word	0x2000090c
   21e9c:	00028b70 	.word	0x00028b70
   21ea0:	20004140 	.word	0x20004140

00021ea4 <CC_PalPowerSaveModeSelect>:
   21ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ea6:	4d1a      	ldr	r5, [pc, #104]	; (21f10 <CC_PalPowerSaveModeSelect+0x6c>)
   21ea8:	4e1a      	ldr	r6, [pc, #104]	; (21f14 <CC_PalPowerSaveModeSelect+0x70>)
   21eaa:	4604      	mov	r4, r0
   21eac:	68b2      	ldr	r2, [r6, #8]
   21eae:	6928      	ldr	r0, [r5, #16]
   21eb0:	4790      	blx	r2
   21eb2:	b9e8      	cbnz	r0, 21ef0 <CC_PalPowerSaveModeSelect+0x4c>
   21eb4:	4f18      	ldr	r7, [pc, #96]	; (21f18 <CC_PalPowerSaveModeSelect+0x74>)
   21eb6:	683b      	ldr	r3, [r7, #0]
   21eb8:	b14c      	cbz	r4, 21ece <CC_PalPowerSaveModeSelect+0x2a>
   21eba:	b1a3      	cbz	r3, 21ee6 <CC_PalPowerSaveModeSelect+0x42>
   21ebc:	2b01      	cmp	r3, #1
   21ebe:	d019      	beq.n	21ef4 <CC_PalPowerSaveModeSelect+0x50>
   21ec0:	3b01      	subs	r3, #1
   21ec2:	603b      	str	r3, [r7, #0]
   21ec4:	6928      	ldr	r0, [r5, #16]
   21ec6:	68f3      	ldr	r3, [r6, #12]
   21ec8:	4798      	blx	r3
   21eca:	2000      	movs	r0, #0
   21ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ece:	b943      	cbnz	r3, 21ee2 <CC_PalPowerSaveModeSelect+0x3e>
   21ed0:	4a12      	ldr	r2, [pc, #72]	; (21f1c <CC_PalPowerSaveModeSelect+0x78>)
   21ed2:	2101      	movs	r1, #1
   21ed4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   21ed8:	4911      	ldr	r1, [pc, #68]	; (21f20 <CC_PalPowerSaveModeSelect+0x7c>)
   21eda:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   21ede:	2a00      	cmp	r2, #0
   21ee0:	d1fb      	bne.n	21eda <CC_PalPowerSaveModeSelect+0x36>
   21ee2:	3301      	adds	r3, #1
   21ee4:	603b      	str	r3, [r7, #0]
   21ee6:	68f3      	ldr	r3, [r6, #12]
   21ee8:	6928      	ldr	r0, [r5, #16]
   21eea:	4798      	blx	r3
   21eec:	2000      	movs	r0, #0
   21eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ef0:	480c      	ldr	r0, [pc, #48]	; (21f24 <CC_PalPowerSaveModeSelect+0x80>)
   21ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ef4:	4a0a      	ldr	r2, [pc, #40]	; (21f20 <CC_PalPowerSaveModeSelect+0x7c>)
   21ef6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   21efa:	2b00      	cmp	r3, #0
   21efc:	d1fb      	bne.n	21ef6 <CC_PalPowerSaveModeSelect+0x52>
   21efe:	4a07      	ldr	r2, [pc, #28]	; (21f1c <CC_PalPowerSaveModeSelect+0x78>)
   21f00:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   21f04:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   21f08:	f7ff ff00 	bl	21d0c <CC_HalMaskInterrupt>
   21f0c:	683b      	ldr	r3, [r7, #0]
   21f0e:	e7d7      	b.n	21ec0 <CC_PalPowerSaveModeSelect+0x1c>
   21f10:	2000092c 	.word	0x2000092c
   21f14:	2000091c 	.word	0x2000091c
   21f18:	20004140 	.word	0x20004140
   21f1c:	5002a000 	.word	0x5002a000
   21f20:	5002b000 	.word	0x5002b000
   21f24:	ffff8fe9 	.word	0xffff8fe9

00021f28 <mutex_init>:
   21f28:	4b01      	ldr	r3, [pc, #4]	; (21f30 <mutex_init+0x8>)
   21f2a:	681b      	ldr	r3, [r3, #0]
   21f2c:	4718      	bx	r3
   21f2e:	bf00      	nop
   21f30:	2000091c 	.word	0x2000091c

00021f34 <mutex_lock>:
   21f34:	4b01      	ldr	r3, [pc, #4]	; (21f3c <mutex_lock+0x8>)
   21f36:	689b      	ldr	r3, [r3, #8]
   21f38:	4718      	bx	r3
   21f3a:	bf00      	nop
   21f3c:	2000091c 	.word	0x2000091c

00021f40 <mutex_unlock>:
   21f40:	4b01      	ldr	r3, [pc, #4]	; (21f48 <mutex_unlock+0x8>)
   21f42:	68db      	ldr	r3, [r3, #12]
   21f44:	4718      	bx	r3
   21f46:	bf00      	nop
   21f48:	2000091c 	.word	0x2000091c

00021f4c <startTrngHW>:
   21f4c:	2800      	cmp	r0, #0
   21f4e:	f000 8084 	beq.w	2205a <startTrngHW+0x10e>
   21f52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21f56:	460c      	mov	r4, r1
   21f58:	b083      	sub	sp, #12
   21f5a:	2900      	cmp	r1, #0
   21f5c:	d078      	beq.n	22050 <startTrngHW+0x104>
   21f5e:	461d      	mov	r5, r3
   21f60:	2b00      	cmp	r3, #0
   21f62:	d075      	beq.n	22050 <startTrngHW+0x104>
   21f64:	4607      	mov	r7, r0
   21f66:	b11a      	cbz	r2, 21f70 <startTrngHW+0x24>
   21f68:	2201      	movs	r2, #1
   21f6a:	2300      	movs	r3, #0
   21f6c:	602a      	str	r2, [r5, #0]
   21f6e:	6003      	str	r3, [r0, #0]
   21f70:	682b      	ldr	r3, [r5, #0]
   21f72:	2b00      	cmp	r3, #0
   21f74:	d067      	beq.n	22046 <startTrngHW+0xfa>
   21f76:	4629      	mov	r1, r5
   21f78:	4620      	mov	r0, r4
   21f7a:	f000 fdeb 	bl	22b54 <LLF_RND_GetFastestRosc>
   21f7e:	4603      	mov	r3, r0
   21f80:	2800      	cmp	r0, #0
   21f82:	d161      	bne.n	22048 <startTrngHW+0xfc>
   21f84:	6828      	ldr	r0, [r5, #0]
   21f86:	4621      	mov	r1, r4
   21f88:	f000 fdc6 	bl	22b18 <LLF_RND_GetRoscSampleCnt>
   21f8c:	4603      	mov	r3, r0
   21f8e:	2800      	cmp	r0, #0
   21f90:	d15a      	bne.n	22048 <startTrngHW+0xfc>
   21f92:	682a      	ldr	r2, [r5, #0]
   21f94:	2a08      	cmp	r2, #8
   21f96:	d072      	beq.n	2207e <startTrngHW+0x132>
   21f98:	2a04      	cmp	r2, #4
   21f9a:	d073      	beq.n	22084 <startTrngHW+0x138>
   21f9c:	f1a2 0802 	sub.w	r8, r2, #2
   21fa0:	fab8 f888 	clz	r8, r8
   21fa4:	ea4f 1858 	mov.w	r8, r8, lsr #5
   21fa8:	4e38      	ldr	r6, [pc, #224]	; (2208c <startTrngHW+0x140>)
   21faa:	2001      	movs	r0, #1
   21fac:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   21fb0:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   21fb4:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   21fb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   21fba:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   21fbe:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   21fc2:	428a      	cmp	r2, r1
   21fc4:	d1f6      	bne.n	21fb4 <startTrngHW+0x68>
   21fc6:	f04f 0900 	mov.w	r9, #0
   21fca:	9301      	str	r3, [sp, #4]
   21fcc:	f04f 30ff 	mov.w	r0, #4294967295
   21fd0:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   21fd4:	f7ff fe8c 	bl	21cf0 <CC_HalClearInterruptBit>
   21fd8:	f06f 021b 	mvn.w	r2, #27
   21fdc:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   21fe0:	4648      	mov	r0, r9
   21fe2:	f7ff fe93 	bl	21d0c <CC_HalMaskInterrupt>
   21fe6:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   21fea:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   21fee:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   21ff2:	f7ff fe8b 	bl	21d0c <CC_HalMaskInterrupt>
   21ff6:	220a      	movs	r2, #10
   21ff8:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   21ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21ffe:	2b01      	cmp	r3, #1
   22000:	9b01      	ldr	r3, [sp, #4]
   22002:	d02d      	beq.n	22060 <startTrngHW+0x114>
   22004:	6922      	ldr	r2, [r4, #16]
   22006:	4922      	ldr	r1, [pc, #136]	; (22090 <startTrngHW+0x144>)
   22008:	fba1 1202 	umull	r1, r2, r1, r2
   2200c:	0912      	lsrs	r2, r2, #4
   2200e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22010:	fb01 f202 	mul.w	r2, r1, r2
   22014:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   22018:	491c      	ldr	r1, [pc, #112]	; (2208c <startTrngHW+0x140>)
   2201a:	03d2      	lsls	r2, r2, #15
   2201c:	0992      	lsrs	r2, r2, #6
   2201e:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   22022:	2201      	movs	r2, #1
   22024:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   22028:	683a      	ldr	r2, [r7, #0]
   2202a:	6829      	ldr	r1, [r5, #0]
   2202c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   22030:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   22034:	603a      	str	r2, [r7, #0]
   22036:	6829      	ldr	r1, [r5, #0]
   22038:	4618      	mov	r0, r3
   2203a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2203e:	603a      	str	r2, [r7, #0]
   22040:	b003      	add	sp, #12
   22042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22046:	4b13      	ldr	r3, [pc, #76]	; (22094 <startTrngHW+0x148>)
   22048:	4618      	mov	r0, r3
   2204a:	b003      	add	sp, #12
   2204c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22050:	4b11      	ldr	r3, [pc, #68]	; (22098 <startTrngHW+0x14c>)
   22052:	4618      	mov	r0, r3
   22054:	b003      	add	sp, #12
   22056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2205a:	4b0f      	ldr	r3, [pc, #60]	; (22098 <startTrngHW+0x14c>)
   2205c:	4618      	mov	r0, r3
   2205e:	4770      	bx	lr
   22060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22064:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   22068:	3101      	adds	r1, #1
   2206a:	d006      	beq.n	2207a <startTrngHW+0x12e>
   2206c:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   22070:	4907      	ldr	r1, [pc, #28]	; (22090 <startTrngHW+0x144>)
   22072:	fba1 1202 	umull	r1, r2, r1, r2
   22076:	0912      	lsrs	r2, r2, #4
   22078:	e7c9      	b.n	2200e <startTrngHW+0xc2>
   2207a:	2216      	movs	r2, #22
   2207c:	e7c7      	b.n	2200e <startTrngHW+0xc2>
   2207e:	f04f 0803 	mov.w	r8, #3
   22082:	e791      	b.n	21fa8 <startTrngHW+0x5c>
   22084:	f04f 0802 	mov.w	r8, #2
   22088:	e78e      	b.n	21fa8 <startTrngHW+0x5c>
   2208a:	bf00      	nop
   2208c:	5002b000 	.word	0x5002b000
   22090:	aaaaaaab 	.word	0xaaaaaaab
   22094:	00f10c31 	.word	0x00f10c31
   22098:	00f10c35 	.word	0x00f10c35

0002209c <LLF_RND_RepetitionCounterTest.part.0>:
   2209c:	b570      	push	{r4, r5, r6, lr}
   2209e:	00c9      	lsls	r1, r1, #3
   220a0:	2400      	movs	r4, #0
   220a2:	1e4e      	subs	r6, r1, #1
   220a4:	f04f 0c01 	mov.w	ip, #1
   220a8:	4625      	mov	r5, r4
   220aa:	46a6      	mov	lr, r4
   220ac:	e008      	b.n	220c0 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   220ae:	459e      	cmp	lr, r3
   220b0:	d015      	beq.n	220de <LLF_RND_RepetitionCounterTest.part.0+0x42>
   220b2:	2501      	movs	r5, #1
   220b4:	45b4      	cmp	ip, r6
   220b6:	d817      	bhi.n	220e8 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   220b8:	3401      	adds	r4, #1
   220ba:	f10c 0c01 	add.w	ip, ip, #1
   220be:	469e      	mov	lr, r3
   220c0:	0963      	lsrs	r3, r4, #5
   220c2:	f004 011f 	and.w	r1, r4, #31
   220c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   220ca:	291f      	cmp	r1, #31
   220cc:	fa23 f301 	lsr.w	r3, r3, r1
   220d0:	bf18      	it	ne
   220d2:	f003 0301 	andne.w	r3, r3, #1
   220d6:	2c00      	cmp	r4, #0
   220d8:	d1e9      	bne.n	220ae <LLF_RND_RepetitionCounterTest.part.0+0x12>
   220da:	2501      	movs	r5, #1
   220dc:	e7ec      	b.n	220b8 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   220de:	3501      	adds	r5, #1
   220e0:	4295      	cmp	r5, r2
   220e2:	d1e7      	bne.n	220b4 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   220e4:	4801      	ldr	r0, [pc, #4]	; (220ec <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   220e6:	bd70      	pop	{r4, r5, r6, pc}
   220e8:	2000      	movs	r0, #0
   220ea:	bd70      	pop	{r4, r5, r6, pc}
   220ec:	00f10c36 	.word	0x00f10c36

000220f0 <LLF_RND_AdaptiveProportionTest>:
   220f0:	2800      	cmp	r0, #0
   220f2:	d03f      	beq.n	22174 <LLF_RND_AdaptiveProportionTest+0x84>
   220f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220f8:	1e4c      	subs	r4, r1, #1
   220fa:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   220fe:	d228      	bcs.n	22152 <LLF_RND_AdaptiveProportionTest+0x62>
   22100:	b33b      	cbz	r3, 22152 <LLF_RND_AdaptiveProportionTest+0x62>
   22102:	b332      	cbz	r2, 22152 <LLF_RND_AdaptiveProportionTest+0x62>
   22104:	f04f 0e00 	mov.w	lr, #0
   22108:	00cf      	lsls	r7, r1, #3
   2210a:	4676      	mov	r6, lr
   2210c:	4675      	mov	r5, lr
   2210e:	4674      	mov	r4, lr
   22110:	f103 38ff 	add.w	r8, r3, #4294967295
   22114:	0961      	lsrs	r1, r4, #5
   22116:	f004 0c1f 	and.w	ip, r4, #31
   2211a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   2211e:	f1bc 0f1f 	cmp.w	ip, #31
   22122:	fa21 f10c 	lsr.w	r1, r1, ip
   22126:	bf18      	it	ne
   22128:	f001 0101 	andne.w	r1, r1, #1
   2212c:	b1a4      	cbz	r4, 22158 <LLF_RND_AdaptiveProportionTest+0x68>
   2212e:	42ab      	cmp	r3, r5
   22130:	d018      	beq.n	22164 <LLF_RND_AdaptiveProportionTest+0x74>
   22132:	428e      	cmp	r6, r1
   22134:	bf08      	it	eq
   22136:	f10e 0e01 	addeq.w	lr, lr, #1
   2213a:	45a8      	cmp	r8, r5
   2213c:	d015      	beq.n	2216a <LLF_RND_AdaptiveProportionTest+0x7a>
   2213e:	3501      	adds	r5, #1
   22140:	4631      	mov	r1, r6
   22142:	3401      	adds	r4, #1
   22144:	42bc      	cmp	r4, r7
   22146:	d001      	beq.n	2214c <LLF_RND_AdaptiveProportionTest+0x5c>
   22148:	460e      	mov	r6, r1
   2214a:	e7e3      	b.n	22114 <LLF_RND_AdaptiveProportionTest+0x24>
   2214c:	2000      	movs	r0, #0
   2214e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22152:	4809      	ldr	r0, [pc, #36]	; (22178 <LLF_RND_AdaptiveProportionTest+0x88>)
   22154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22158:	f04f 0e01 	mov.w	lr, #1
   2215c:	4674      	mov	r4, lr
   2215e:	4675      	mov	r5, lr
   22160:	460e      	mov	r6, r1
   22162:	e7d7      	b.n	22114 <LLF_RND_AdaptiveProportionTest+0x24>
   22164:	2501      	movs	r5, #1
   22166:	46ae      	mov	lr, r5
   22168:	e7eb      	b.n	22142 <LLF_RND_AdaptiveProportionTest+0x52>
   2216a:	4572      	cmp	r2, lr
   2216c:	d3f1      	bcc.n	22152 <LLF_RND_AdaptiveProportionTest+0x62>
   2216e:	4631      	mov	r1, r6
   22170:	461d      	mov	r5, r3
   22172:	e7e6      	b.n	22142 <LLF_RND_AdaptiveProportionTest+0x52>
   22174:	4800      	ldr	r0, [pc, #0]	; (22178 <LLF_RND_AdaptiveProportionTest+0x88>)
   22176:	4770      	bx	lr
   22178:	00f10c37 	.word	0x00f10c37

0002217c <getTrngSource>:
   2217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22180:	b091      	sub	sp, #68	; 0x44
   22182:	460d      	mov	r5, r1
   22184:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   22188:	4681      	mov	r9, r0
   2218a:	2900      	cmp	r1, #0
   2218c:	d14d      	bne.n	2222a <getTrngSource+0xae>
   2218e:	6928      	ldr	r0, [r5, #16]
   22190:	9006      	str	r0, [sp, #24]
   22192:	981a      	ldr	r0, [sp, #104]	; 0x68
   22194:	601c      	str	r4, [r3, #0]
   22196:	2300      	movs	r3, #0
   22198:	6003      	str	r3, [r0, #0]
   2219a:	2a00      	cmp	r2, #0
   2219c:	f000 8125 	beq.w	223ea <getTrngSource+0x26e>
   221a0:	4b9e      	ldr	r3, [pc, #632]	; (2241c <getTrngSource+0x2a0>)
   221a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   221a4:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   221a8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   221ac:	429a      	cmp	r2, r3
   221ae:	d148      	bne.n	22242 <getTrngSource+0xc6>
   221b0:	290a      	cmp	r1, #10
   221b2:	d146      	bne.n	22242 <getTrngSource+0xc6>
   221b4:	f899 3003 	ldrb.w	r3, [r9, #3]
   221b8:	9308      	str	r3, [sp, #32]
   221ba:	f104 0308 	add.w	r3, r4, #8
   221be:	9a06      	ldr	r2, [sp, #24]
   221c0:	9307      	str	r3, [sp, #28]
   221c2:	4b97      	ldr	r3, [pc, #604]	; (22420 <getTrngSource+0x2a4>)
   221c4:	4c95      	ldr	r4, [pc, #596]	; (2241c <getTrngSource+0x2a0>)
   221c6:	4611      	mov	r1, r2
   221c8:	fba3 1301 	umull	r1, r3, r3, r1
   221cc:	089b      	lsrs	r3, r3, #2
   221ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   221d2:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   221d6:	9303      	str	r3, [sp, #12]
   221d8:	2304      	movs	r3, #4
   221da:	9305      	str	r3, [sp, #20]
   221dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   221de:	9e06      	ldr	r6, [sp, #24]
   221e0:	601e      	str	r6, [r3, #0]
   221e2:	2e00      	cmp	r6, #0
   221e4:	d033      	beq.n	2224e <getTrngSource+0xd2>
   221e6:	f8dd 801c 	ldr.w	r8, [sp, #28]
   221ea:	2700      	movs	r7, #0
   221ec:	f04f 0a01 	mov.w	sl, #1
   221f0:	f000 fcc0 	bl	22b74 <LLF_RND_TurnOffTrng>
   221f4:	2300      	movs	r3, #0
   221f6:	9309      	str	r3, [sp, #36]	; 0x24
   221f8:	f1b9 0f00 	cmp.w	r9, #0
   221fc:	f000 80df 	beq.w	223be <getTrngSource+0x242>
   22200:	2d00      	cmp	r5, #0
   22202:	f000 80dc 	beq.w	223be <getTrngSource+0x242>
   22206:	9b08      	ldr	r3, [sp, #32]
   22208:	b1eb      	cbz	r3, 22246 <getTrngSource+0xca>
   2220a:	a908      	add	r1, sp, #32
   2220c:	4628      	mov	r0, r5
   2220e:	f000 fca1 	bl	22b54 <LLF_RND_GetFastestRosc>
   22212:	2800      	cmp	r0, #0
   22214:	d03e      	beq.n	22294 <getTrngSource+0x118>
   22216:	4b83      	ldr	r3, [pc, #524]	; (22424 <getTrngSource+0x2a8>)
   22218:	4298      	cmp	r0, r3
   2221a:	d118      	bne.n	2224e <getTrngSource+0xd2>
   2221c:	9003      	str	r0, [sp, #12]
   2221e:	f000 fca9 	bl	22b74 <LLF_RND_TurnOffTrng>
   22222:	9803      	ldr	r0, [sp, #12]
   22224:	b011      	add	sp, #68	; 0x44
   22226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2222a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   2222e:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   22232:	3601      	adds	r6, #1
   22234:	bf14      	ite	ne
   22236:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   2223a:	f44f 7004 	moveq.w	r0, #528	; 0x210
   2223e:	9006      	str	r0, [sp, #24]
   22240:	e7a7      	b.n	22192 <getTrngSource+0x16>
   22242:	4879      	ldr	r0, [pc, #484]	; (22428 <getTrngSource+0x2ac>)
   22244:	e7ea      	b.n	2221c <getTrngSource+0xa0>
   22246:	4879      	ldr	r0, [pc, #484]	; (2242c <getTrngSource+0x2b0>)
   22248:	4b76      	ldr	r3, [pc, #472]	; (22424 <getTrngSource+0x2a8>)
   2224a:	4298      	cmp	r0, r3
   2224c:	d0e6      	beq.n	2221c <getTrngSource+0xa0>
   2224e:	9b08      	ldr	r3, [sp, #32]
   22250:	2b08      	cmp	r3, #8
   22252:	f000 80c8 	beq.w	223e6 <getTrngSource+0x26a>
   22256:	005b      	lsls	r3, r3, #1
   22258:	2200      	movs	r2, #0
   2225a:	9308      	str	r3, [sp, #32]
   2225c:	9200      	str	r2, [sp, #0]
   2225e:	ab08      	add	r3, sp, #32
   22260:	4629      	mov	r1, r5
   22262:	4648      	mov	r0, r9
   22264:	f7ff fe72 	bl	21f4c <startTrngHW>
   22268:	4b70      	ldr	r3, [pc, #448]	; (2242c <getTrngSource+0x2b0>)
   2226a:	4298      	cmp	r0, r3
   2226c:	f000 80b7 	beq.w	223de <getTrngSource+0x262>
   22270:	2800      	cmp	r0, #0
   22272:	d1d3      	bne.n	2221c <getTrngSource+0xa0>
   22274:	f8d9 2000 	ldr.w	r2, [r9]
   22278:	0a13      	lsrs	r3, r2, #8
   2227a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   2227e:	4313      	orrs	r3, r2
   22280:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   22284:	f8c9 3000 	str.w	r3, [r9]
   22288:	9b05      	ldr	r3, [sp, #20]
   2228a:	3b01      	subs	r3, #1
   2228c:	9305      	str	r3, [sp, #20]
   2228e:	d1a5      	bne.n	221dc <getTrngSource+0x60>
   22290:	2000      	movs	r0, #0
   22292:	e7c3      	b.n	2221c <getTrngSource+0xa0>
   22294:	9808      	ldr	r0, [sp, #32]
   22296:	4629      	mov	r1, r5
   22298:	f000 fc3e 	bl	22b18 <LLF_RND_GetRoscSampleCnt>
   2229c:	2800      	cmp	r0, #0
   2229e:	d1ba      	bne.n	22216 <getTrngSource+0x9a>
   222a0:	9b08      	ldr	r3, [sp, #32]
   222a2:	2b08      	cmp	r3, #8
   222a4:	f000 8095 	beq.w	223d2 <getTrngSource+0x256>
   222a8:	2b04      	cmp	r3, #4
   222aa:	f000 8095 	beq.w	223d8 <getTrngSource+0x25c>
   222ae:	f1a3 0302 	sub.w	r3, r3, #2
   222b2:	fab3 f383 	clz	r3, r3
   222b6:	095b      	lsrs	r3, r3, #5
   222b8:	9304      	str	r3, [sp, #16]
   222ba:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   222be:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   222c2:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   222c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   222c8:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   222cc:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   222d0:	4293      	cmp	r3, r2
   222d2:	d1f6      	bne.n	222c2 <getTrngSource+0x146>
   222d4:	f04f 0b00 	mov.w	fp, #0
   222d8:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   222dc:	f04f 30ff 	mov.w	r0, #4294967295
   222e0:	f7ff fd06 	bl	21cf0 <CC_HalClearInterruptBit>
   222e4:	f06f 031b 	mvn.w	r3, #27
   222e8:	4658      	mov	r0, fp
   222ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   222ee:	f7ff fd0d 	bl	21d0c <CC_HalMaskInterrupt>
   222f2:	9b04      	ldr	r3, [sp, #16]
   222f4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   222f8:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   222fc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   22300:	f7ff fd04 	bl	21d0c <CC_HalMaskInterrupt>
   22304:	230a      	movs	r3, #10
   22306:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   2230a:	692b      	ldr	r3, [r5, #16]
   2230c:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   22310:	fbab 2303 	umull	r2, r3, fp, r3
   22314:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   22316:	091b      	lsrs	r3, r3, #4
   22318:	fb02 f303 	mul.w	r3, r2, r3
   2231c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   22320:	03db      	lsls	r3, r3, #15
   22322:	099b      	lsrs	r3, r3, #6
   22324:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   22328:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   2232c:	9908      	ldr	r1, [sp, #32]
   2232e:	f8d9 2000 	ldr.w	r2, [r9]
   22332:	020b      	lsls	r3, r1, #8
   22334:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   22338:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   2233c:	4313      	orrs	r3, r2
   2233e:	f8c9 3000 	str.w	r3, [r9]
   22342:	a809      	add	r0, sp, #36	; 0x24
   22344:	f000 fbd8 	bl	22af8 <LLF_RND_WaitRngInterrupt>
   22348:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2234a:	f003 031a 	and.w	r3, r3, #26
   2234e:	4303      	orrs	r3, r0
   22350:	f47f af7d 	bne.w	2224e <getTrngSource+0xd2>
   22354:	fbab 3b06 	umull	r3, fp, fp, r6
   22358:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   2235c:	930a      	str	r3, [sp, #40]	; 0x28
   2235e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   22362:	930b      	str	r3, [sp, #44]	; 0x2c
   22364:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   22368:	930c      	str	r3, [sp, #48]	; 0x30
   2236a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2236e:	930d      	str	r3, [sp, #52]	; 0x34
   22370:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22374:	930e      	str	r3, [sp, #56]	; 0x38
   22376:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2237a:	930f      	str	r3, [sp, #60]	; 0x3c
   2237c:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   22380:	d101      	bne.n	22386 <getTrngSource+0x20a>
   22382:	9b03      	ldr	r3, [sp, #12]
   22384:	b9eb      	cbnz	r3, 223c2 <getTrngSource+0x246>
   22386:	4640      	mov	r0, r8
   22388:	2218      	movs	r2, #24
   2238a:	a90a      	add	r1, sp, #40	; 0x28
   2238c:	3e18      	subs	r6, #24
   2238e:	f108 0818 	add.w	r8, r8, #24
   22392:	f7ff fd3b 	bl	21e0c <CC_PalMemCopyPlat>
   22396:	3701      	adds	r7, #1
   22398:	2e00      	cmp	r6, #0
   2239a:	f47f af29 	bne.w	221f0 <getTrngSource+0x74>
   2239e:	9b06      	ldr	r3, [sp, #24]
   223a0:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   223a4:	d836      	bhi.n	22414 <getTrngSource+0x298>
   223a6:	9e07      	ldr	r6, [sp, #28]
   223a8:	696a      	ldr	r2, [r5, #20]
   223aa:	4619      	mov	r1, r3
   223ac:	4630      	mov	r0, r6
   223ae:	461f      	mov	r7, r3
   223b0:	f7ff fe74 	bl	2209c <LLF_RND_RepetitionCounterTest.part.0>
   223b4:	b320      	cbz	r0, 22400 <getTrngSource+0x284>
   223b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   223b8:	2300      	movs	r3, #0
   223ba:	6013      	str	r3, [r2, #0]
   223bc:	e72b      	b.n	22216 <getTrngSource+0x9a>
   223be:	481c      	ldr	r0, [pc, #112]	; (22430 <getTrngSource+0x2b4>)
   223c0:	e729      	b.n	22216 <getTrngSource+0x9a>
   223c2:	461a      	mov	r2, r3
   223c4:	4640      	mov	r0, r8
   223c6:	a90a      	add	r1, sp, #40	; 0x28
   223c8:	1af6      	subs	r6, r6, r3
   223ca:	4498      	add	r8, r3
   223cc:	f7ff fd1e 	bl	21e0c <CC_PalMemCopyPlat>
   223d0:	e7e1      	b.n	22396 <getTrngSource+0x21a>
   223d2:	2303      	movs	r3, #3
   223d4:	9304      	str	r3, [sp, #16]
   223d6:	e770      	b.n	222ba <getTrngSource+0x13e>
   223d8:	2302      	movs	r3, #2
   223da:	9304      	str	r3, [sp, #16]
   223dc:	e76d      	b.n	222ba <getTrngSource+0x13e>
   223de:	6a2b      	ldr	r3, [r5, #32]
   223e0:	2b00      	cmp	r3, #0
   223e2:	f43f af1b 	beq.w	2221c <getTrngSource+0xa0>
   223e6:	4813      	ldr	r0, [pc, #76]	; (22434 <getTrngSource+0x2b8>)
   223e8:	e718      	b.n	2221c <getTrngSource+0xa0>
   223ea:	9100      	str	r1, [sp, #0]
   223ec:	ab08      	add	r3, sp, #32
   223ee:	2201      	movs	r2, #1
   223f0:	4629      	mov	r1, r5
   223f2:	4648      	mov	r0, r9
   223f4:	f7ff fdaa 	bl	21f4c <startTrngHW>
   223f8:	2800      	cmp	r0, #0
   223fa:	f43f aede 	beq.w	221ba <getTrngSource+0x3e>
   223fe:	e70d      	b.n	2221c <getTrngSource+0xa0>
   22400:	69aa      	ldr	r2, [r5, #24]
   22402:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22406:	4639      	mov	r1, r7
   22408:	4630      	mov	r0, r6
   2240a:	f7ff fe71 	bl	220f0 <LLF_RND_AdaptiveProportionTest>
   2240e:	2800      	cmp	r0, #0
   22410:	d1d1      	bne.n	223b6 <getTrngSource+0x23a>
   22412:	e73d      	b.n	22290 <getTrngSource+0x114>
   22414:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   22416:	601e      	str	r6, [r3, #0]
   22418:	e719      	b.n	2224e <getTrngSource+0xd2>
   2241a:	bf00      	nop
   2241c:	5002b000 	.word	0x5002b000
   22420:	aaaaaaab 	.word	0xaaaaaaab
   22424:	00f10c02 	.word	0x00f10c02
   22428:	00f10c30 	.word	0x00f10c30
   2242c:	00f10c31 	.word	0x00f10c31
   22430:	00f10c35 	.word	0x00f10c35
   22434:	00f10c32 	.word	0x00f10c32

00022438 <LLF_RND_GetTrngSource>:
   22438:	b410      	push	{r4}
   2243a:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   2243e:	9401      	str	r4, [sp, #4]
   22440:	9c03      	ldr	r4, [sp, #12]
   22442:	9402      	str	r4, [sp, #8]
   22444:	2400      	movs	r4, #0
   22446:	9403      	str	r4, [sp, #12]
   22448:	f85d 4b04 	ldr.w	r4, [sp], #4
   2244c:	f7ff be96 	b.w	2217c <getTrngSource>

00022450 <LLF_RND_RunTrngStartupTest>:
   22450:	b510      	push	{r4, lr}
   22452:	b086      	sub	sp, #24
   22454:	ab05      	add	r3, sp, #20
   22456:	2401      	movs	r4, #1
   22458:	e9cd 2401 	strd	r2, r4, [sp, #4]
   2245c:	9300      	str	r3, [sp, #0]
   2245e:	2200      	movs	r2, #0
   22460:	ab04      	add	r3, sp, #16
   22462:	f7ff fe8b 	bl	2217c <getTrngSource>
   22466:	b006      	add	sp, #24
   22468:	bd10      	pop	{r4, pc}
   2246a:	bf00      	nop

0002246c <mbedtls_hardware_poll>:
   2246c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2246e:	b089      	sub	sp, #36	; 0x24
   22470:	9205      	str	r2, [sp, #20]
   22472:	2900      	cmp	r1, #0
   22474:	d064      	beq.n	22540 <mbedtls_hardware_poll+0xd4>
   22476:	461c      	mov	r4, r3
   22478:	2b00      	cmp	r3, #0
   2247a:	d061      	beq.n	22540 <mbedtls_hardware_poll+0xd4>
   2247c:	4615      	mov	r5, r2
   2247e:	2a00      	cmp	r2, #0
   22480:	d05e      	beq.n	22540 <mbedtls_hardware_poll+0xd4>
   22482:	4f31      	ldr	r7, [pc, #196]	; (22548 <mbedtls_hardware_poll+0xdc>)
   22484:	460e      	mov	r6, r1
   22486:	6838      	ldr	r0, [r7, #0]
   22488:	f04f 31ff 	mov.w	r1, #4294967295
   2248c:	f7ff fcda 	bl	21e44 <CC_PalMutexLock>
   22490:	2800      	cmp	r0, #0
   22492:	d14b      	bne.n	2252c <mbedtls_hardware_poll+0xc0>
   22494:	2000      	movs	r0, #0
   22496:	f7ff fd05 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   2249a:	2800      	cmp	r0, #0
   2249c:	d142      	bne.n	22524 <mbedtls_hardware_poll+0xb8>
   2249e:	482b      	ldr	r0, [pc, #172]	; (2254c <mbedtls_hardware_poll+0xe0>)
   224a0:	f000 fa9a 	bl	229d8 <RNG_PLAT_SetUserRngParameters>
   224a4:	b1d8      	cbz	r0, 224de <mbedtls_hardware_poll+0x72>
   224a6:	2001      	movs	r0, #1
   224a8:	f04f 36ff 	mov.w	r6, #4294967295
   224ac:	f7ff fcfa 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   224b0:	2800      	cmp	r0, #0
   224b2:	d133      	bne.n	2251c <mbedtls_hardware_poll+0xb0>
   224b4:	4826      	ldr	r0, [pc, #152]	; (22550 <mbedtls_hardware_poll+0xe4>)
   224b6:	f44f 7108 	mov.w	r1, #544	; 0x220
   224ba:	f7fe fe53 	bl	21164 <mbedtls_zeroize_internal>
   224be:	4825      	ldr	r0, [pc, #148]	; (22554 <mbedtls_hardware_poll+0xe8>)
   224c0:	2104      	movs	r1, #4
   224c2:	f7fe fe4f 	bl	21164 <mbedtls_zeroize_internal>
   224c6:	4821      	ldr	r0, [pc, #132]	; (2254c <mbedtls_hardware_poll+0xe0>)
   224c8:	2128      	movs	r1, #40	; 0x28
   224ca:	f7fe fe4b 	bl	21164 <mbedtls_zeroize_internal>
   224ce:	6838      	ldr	r0, [r7, #0]
   224d0:	f7ff fcc0 	bl	21e54 <CC_PalMutexUnlock>
   224d4:	2800      	cmp	r0, #0
   224d6:	d12d      	bne.n	22534 <mbedtls_hardware_poll+0xc8>
   224d8:	4630      	mov	r0, r6
   224da:	b009      	add	sp, #36	; 0x24
   224dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   224de:	4b1c      	ldr	r3, [pc, #112]	; (22550 <mbedtls_hardware_poll+0xe4>)
   224e0:	9302      	str	r3, [sp, #8]
   224e2:	ab07      	add	r3, sp, #28
   224e4:	9003      	str	r0, [sp, #12]
   224e6:	4602      	mov	r2, r0
   224e8:	9300      	str	r3, [sp, #0]
   224ea:	4918      	ldr	r1, [pc, #96]	; (2254c <mbedtls_hardware_poll+0xe0>)
   224ec:	4819      	ldr	r0, [pc, #100]	; (22554 <mbedtls_hardware_poll+0xe8>)
   224ee:	9401      	str	r4, [sp, #4]
   224f0:	ab05      	add	r3, sp, #20
   224f2:	f7ff ffa1 	bl	22438 <LLF_RND_GetTrngSource>
   224f6:	4603      	mov	r3, r0
   224f8:	2800      	cmp	r0, #0
   224fa:	d1d4      	bne.n	224a6 <mbedtls_hardware_poll+0x3a>
   224fc:	6822      	ldr	r2, [r4, #0]
   224fe:	42aa      	cmp	r2, r5
   22500:	d3d1      	bcc.n	224a6 <mbedtls_hardware_poll+0x3a>
   22502:	9907      	ldr	r1, [sp, #28]
   22504:	4630      	mov	r0, r6
   22506:	3108      	adds	r1, #8
   22508:	462a      	mov	r2, r5
   2250a:	461e      	mov	r6, r3
   2250c:	f7ff fc7e 	bl	21e0c <CC_PalMemCopyPlat>
   22510:	6025      	str	r5, [r4, #0]
   22512:	2001      	movs	r0, #1
   22514:	f7ff fcc6 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   22518:	2800      	cmp	r0, #0
   2251a:	d0cb      	beq.n	224b4 <mbedtls_hardware_poll+0x48>
   2251c:	480e      	ldr	r0, [pc, #56]	; (22558 <mbedtls_hardware_poll+0xec>)
   2251e:	f7fe fd07 	bl	20f30 <CC_PalAbort>
   22522:	e7c7      	b.n	224b4 <mbedtls_hardware_poll+0x48>
   22524:	480d      	ldr	r0, [pc, #52]	; (2255c <mbedtls_hardware_poll+0xf0>)
   22526:	f7fe fd03 	bl	20f30 <CC_PalAbort>
   2252a:	e7b8      	b.n	2249e <mbedtls_hardware_poll+0x32>
   2252c:	480c      	ldr	r0, [pc, #48]	; (22560 <mbedtls_hardware_poll+0xf4>)
   2252e:	f7fe fcff 	bl	20f30 <CC_PalAbort>
   22532:	e7af      	b.n	22494 <mbedtls_hardware_poll+0x28>
   22534:	480b      	ldr	r0, [pc, #44]	; (22564 <mbedtls_hardware_poll+0xf8>)
   22536:	f7fe fcfb 	bl	20f30 <CC_PalAbort>
   2253a:	4630      	mov	r0, r6
   2253c:	b009      	add	sp, #36	; 0x24
   2253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22540:	f04f 36ff 	mov.w	r6, #4294967295
   22544:	e7c8      	b.n	224d8 <mbedtls_hardware_poll+0x6c>
   22546:	bf00      	nop
   22548:	2000096c 	.word	0x2000096c
   2254c:	20004368 	.word	0x20004368
   22550:	20004148 	.word	0x20004148
   22554:	20004144 	.word	0x20004144
   22558:	00028b38 	.word	0x00028b38
   2255c:	00028b18 	.word	0x00028b18
   22560:	00028b00 	.word	0x00028b00
   22564:	00028b90 	.word	0x00028b90

00022568 <cc_mbedtls_aes_init>:
   22568:	b510      	push	{r4, lr}
   2256a:	4604      	mov	r4, r0
   2256c:	b130      	cbz	r0, 2257c <cc_mbedtls_aes_init+0x14>
   2256e:	2200      	movs	r2, #0
   22570:	2301      	movs	r3, #1
   22572:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   22576:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2257a:	bd10      	pop	{r4, pc}
   2257c:	4801      	ldr	r0, [pc, #4]	; (22584 <cc_mbedtls_aes_init+0x1c>)
   2257e:	f7fe fcd7 	bl	20f30 <CC_PalAbort>
   22582:	e7f4      	b.n	2256e <cc_mbedtls_aes_init+0x6>
   22584:	00028ba8 	.word	0x00028ba8

00022588 <cc_mbedtls_aes_free>:
   22588:	b118      	cbz	r0, 22592 <cc_mbedtls_aes_free+0xa>
   2258a:	2274      	movs	r2, #116	; 0x74
   2258c:	2100      	movs	r1, #0
   2258e:	f7ff bc3f 	b.w	21e10 <CC_PalMemSetPlat>
   22592:	4770      	bx	lr

00022594 <cc_mbedtls_aes_setkey_enc>:
   22594:	b190      	cbz	r0, 225bc <cc_mbedtls_aes_setkey_enc+0x28>
   22596:	b1a1      	cbz	r1, 225c2 <cc_mbedtls_aes_setkey_enc+0x2e>
   22598:	b510      	push	{r4, lr}
   2259a:	2a80      	cmp	r2, #128	; 0x80
   2259c:	f04f 0400 	mov.w	r4, #0
   225a0:	6384      	str	r4, [r0, #56]	; 0x38
   225a2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   225a6:	d106      	bne.n	225b6 <cc_mbedtls_aes_setkey_enc+0x22>
   225a8:	2210      	movs	r2, #16
   225aa:	6304      	str	r4, [r0, #48]	; 0x30
   225ac:	4410      	add	r0, r2
   225ae:	f7ff fc2d 	bl	21e0c <CC_PalMemCopyPlat>
   225b2:	4620      	mov	r0, r4
   225b4:	bd10      	pop	{r4, pc}
   225b6:	f06f 001f 	mvn.w	r0, #31
   225ba:	bd10      	pop	{r4, pc}
   225bc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   225c0:	4770      	bx	lr
   225c2:	f06f 001f 	mvn.w	r0, #31
   225c6:	4770      	bx	lr

000225c8 <cc_mbedtls_aes_crypt_ecb>:
   225c8:	b328      	cbz	r0, 22616 <cc_mbedtls_aes_crypt_ecb+0x4e>
   225ca:	b322      	cbz	r2, 22616 <cc_mbedtls_aes_crypt_ecb+0x4e>
   225cc:	b31b      	cbz	r3, 22616 <cc_mbedtls_aes_crypt_ecb+0x4e>
   225ce:	2901      	cmp	r1, #1
   225d0:	d821      	bhi.n	22616 <cc_mbedtls_aes_crypt_ecb+0x4e>
   225d2:	b570      	push	{r4, r5, r6, lr}
   225d4:	4604      	mov	r4, r0
   225d6:	6b81      	ldr	r1, [r0, #56]	; 0x38
   225d8:	b086      	sub	sp, #24
   225da:	d017      	beq.n	2260c <cc_mbedtls_aes_crypt_ecb+0x44>
   225dc:	2901      	cmp	r1, #1
   225de:	d117      	bne.n	22610 <cc_mbedtls_aes_crypt_ecb+0x48>
   225e0:	2510      	movs	r5, #16
   225e2:	2100      	movs	r1, #0
   225e4:	eb0d 0605 	add.w	r6, sp, r5
   225e8:	6361      	str	r1, [r4, #52]	; 0x34
   225ea:	4610      	mov	r0, r2
   225ec:	9500      	str	r5, [sp, #0]
   225ee:	9601      	str	r6, [sp, #4]
   225f0:	aa02      	add	r2, sp, #8
   225f2:	4629      	mov	r1, r5
   225f4:	f000 faca 	bl	22b8c <SetDataBuffersInfo>
   225f8:	b950      	cbnz	r0, 22610 <cc_mbedtls_aes_crypt_ecb+0x48>
   225fa:	462b      	mov	r3, r5
   225fc:	4632      	mov	r2, r6
   225fe:	a902      	add	r1, sp, #8
   22600:	4620      	mov	r0, r4
   22602:	f000 fd4b 	bl	2309c <ProcessAesDrv>
   22606:	b918      	cbnz	r0, 22610 <cc_mbedtls_aes_crypt_ecb+0x48>
   22608:	b006      	add	sp, #24
   2260a:	bd70      	pop	{r4, r5, r6, pc}
   2260c:	2900      	cmp	r1, #0
   2260e:	d0e7      	beq.n	225e0 <cc_mbedtls_aes_crypt_ecb+0x18>
   22610:	f06f 0021 	mvn.w	r0, #33	; 0x21
   22614:	e7f8      	b.n	22608 <cc_mbedtls_aes_crypt_ecb+0x40>
   22616:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2261a:	4770      	bx	lr

0002261c <cc_mbedtls_sha256_init>:
   2261c:	b510      	push	{r4, lr}
   2261e:	4604      	mov	r4, r0
   22620:	b128      	cbz	r0, 2262e <cc_mbedtls_sha256_init+0x12>
   22622:	4620      	mov	r0, r4
   22624:	21f4      	movs	r1, #244	; 0xf4
   22626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2262a:	f7ff bbf3 	b.w	21e14 <CC_PalMemSetZeroPlat>
   2262e:	4804      	ldr	r0, [pc, #16]	; (22640 <cc_mbedtls_sha256_init+0x24>)
   22630:	f7fe fc7e 	bl	20f30 <CC_PalAbort>
   22634:	4620      	mov	r0, r4
   22636:	21f4      	movs	r1, #244	; 0xf4
   22638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2263c:	f7ff bbea 	b.w	21e14 <CC_PalMemSetZeroPlat>
   22640:	00028bbc 	.word	0x00028bbc

00022644 <cc_mbedtls_sha256_free>:
   22644:	b110      	cbz	r0, 2264c <cc_mbedtls_sha256_free+0x8>
   22646:	21f4      	movs	r1, #244	; 0xf4
   22648:	f7fe bd8c 	b.w	21164 <mbedtls_zeroize_internal>
   2264c:	4770      	bx	lr
   2264e:	bf00      	nop

00022650 <cc_mbedtls_sha256_starts>:
   22650:	b508      	push	{r3, lr}
   22652:	b161      	cbz	r1, 2266e <cc_mbedtls_sha256_starts+0x1e>
   22654:	2901      	cmp	r1, #1
   22656:	d107      	bne.n	22668 <cc_mbedtls_sha256_starts+0x18>
   22658:	2102      	movs	r1, #2
   2265a:	f000 f85b 	bl	22714 <mbedtls_sha_starts_internal>
   2265e:	2800      	cmp	r0, #0
   22660:	bf18      	it	ne
   22662:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   22666:	bd08      	pop	{r3, pc}
   22668:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2266c:	bd08      	pop	{r3, pc}
   2266e:	2101      	movs	r1, #1
   22670:	f000 f850 	bl	22714 <mbedtls_sha_starts_internal>
   22674:	e7f3      	b.n	2265e <cc_mbedtls_sha256_starts+0xe>
   22676:	bf00      	nop

00022678 <cc_mbedtls_sha256_update>:
   22678:	b530      	push	{r4, r5, lr}
   2267a:	4605      	mov	r5, r0
   2267c:	1888      	adds	r0, r1, r2
   2267e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   22682:	b0a1      	sub	sp, #132	; 0x84
   22684:	460b      	mov	r3, r1
   22686:	4614      	mov	r4, r2
   22688:	d801      	bhi.n	2268e <cc_mbedtls_sha256_update+0x16>
   2268a:	2a80      	cmp	r2, #128	; 0x80
   2268c:	d90c      	bls.n	226a8 <cc_mbedtls_sha256_update+0x30>
   2268e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22692:	d917      	bls.n	226c4 <cc_mbedtls_sha256_update+0x4c>
   22694:	4622      	mov	r2, r4
   22696:	4619      	mov	r1, r3
   22698:	4628      	mov	r0, r5
   2269a:	f000 f87d 	bl	22798 <mbedtls_sha_update_internal>
   2269e:	4604      	mov	r4, r0
   226a0:	b984      	cbnz	r4, 226c4 <cc_mbedtls_sha256_update+0x4c>
   226a2:	4620      	mov	r0, r4
   226a4:	b021      	add	sp, #132	; 0x84
   226a6:	bd30      	pop	{r4, r5, pc}
   226a8:	4668      	mov	r0, sp
   226aa:	f7ff fbaf 	bl	21e0c <CC_PalMemCopyPlat>
   226ae:	4622      	mov	r2, r4
   226b0:	4669      	mov	r1, sp
   226b2:	4628      	mov	r0, r5
   226b4:	f000 f870 	bl	22798 <mbedtls_sha_update_internal>
   226b8:	2180      	movs	r1, #128	; 0x80
   226ba:	4604      	mov	r4, r0
   226bc:	4668      	mov	r0, sp
   226be:	f7ff fba9 	bl	21e14 <CC_PalMemSetZeroPlat>
   226c2:	e7ed      	b.n	226a0 <cc_mbedtls_sha256_update+0x28>
   226c4:	f06f 0436 	mvn.w	r4, #54	; 0x36
   226c8:	e7eb      	b.n	226a2 <cc_mbedtls_sha256_update+0x2a>
   226ca:	bf00      	nop

000226cc <cc_mbedtls_sha256_finish>:
   226cc:	b570      	push	{r4, r5, r6, lr}
   226ce:	b1e8      	cbz	r0, 2270c <cc_mbedtls_sha256_finish+0x40>
   226d0:	460e      	mov	r6, r1
   226d2:	b1d9      	cbz	r1, 2270c <cc_mbedtls_sha256_finish+0x40>
   226d4:	4604      	mov	r4, r0
   226d6:	f000 f831 	bl	2273c <mbedtls_sha_finish_internal>
   226da:	4605      	mov	r5, r0
   226dc:	b9b0      	cbnz	r0, 2270c <cc_mbedtls_sha256_finish+0x40>
   226de:	6823      	ldr	r3, [r4, #0]
   226e0:	2b01      	cmp	r3, #1
   226e2:	d00b      	beq.n	226fc <cc_mbedtls_sha256_finish+0x30>
   226e4:	2b02      	cmp	r3, #2
   226e6:	d001      	beq.n	226ec <cc_mbedtls_sha256_finish+0x20>
   226e8:	4628      	mov	r0, r5
   226ea:	bd70      	pop	{r4, r5, r6, pc}
   226ec:	221c      	movs	r2, #28
   226ee:	f104 0108 	add.w	r1, r4, #8
   226f2:	4630      	mov	r0, r6
   226f4:	f7ff fb8a 	bl	21e0c <CC_PalMemCopyPlat>
   226f8:	4628      	mov	r0, r5
   226fa:	bd70      	pop	{r4, r5, r6, pc}
   226fc:	2220      	movs	r2, #32
   226fe:	f104 0108 	add.w	r1, r4, #8
   22702:	4630      	mov	r0, r6
   22704:	f7ff fb82 	bl	21e0c <CC_PalMemCopyPlat>
   22708:	4628      	mov	r0, r5
   2270a:	bd70      	pop	{r4, r5, r6, pc}
   2270c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   22710:	e7ea      	b.n	226e8 <cc_mbedtls_sha256_finish+0x1c>
   22712:	bf00      	nop

00022714 <mbedtls_sha_starts_internal>:
   22714:	b178      	cbz	r0, 22736 <mbedtls_sha_starts_internal+0x22>
   22716:	b538      	push	{r3, r4, r5, lr}
   22718:	4604      	mov	r4, r0
   2271a:	460d      	mov	r5, r1
   2271c:	21f0      	movs	r1, #240	; 0xf0
   2271e:	f7ff fb79 	bl	21e14 <CC_PalMemSetZeroPlat>
   22722:	2340      	movs	r3, #64	; 0x40
   22724:	6025      	str	r5, [r4, #0]
   22726:	65e3      	str	r3, [r4, #92]	; 0x5c
   22728:	4620      	mov	r0, r4
   2272a:	f000 fa63 	bl	22bf4 <InitHashDrv>
   2272e:	3800      	subs	r0, #0
   22730:	bf18      	it	ne
   22732:	2001      	movne	r0, #1
   22734:	bd38      	pop	{r3, r4, r5, pc}
   22736:	2001      	movs	r0, #1
   22738:	4770      	bx	lr
   2273a:	bf00      	nop

0002273c <mbedtls_sha_finish_internal>:
   2273c:	b570      	push	{r4, r5, r6, lr}
   2273e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   22740:	b0a4      	sub	sp, #144	; 0x90
   22742:	4604      	mov	r4, r0
   22744:	ae04      	add	r6, sp, #16
   22746:	b9e5      	cbnz	r5, 22782 <mbedtls_sha_finish_internal+0x46>
   22748:	2201      	movs	r2, #1
   2274a:	2300      	movs	r3, #0
   2274c:	6062      	str	r2, [r4, #4]
   2274e:	4630      	mov	r0, r6
   22750:	e9cd 3300 	strd	r3, r3, [sp]
   22754:	aa02      	add	r2, sp, #8
   22756:	4629      	mov	r1, r5
   22758:	f000 fa18 	bl	22b8c <SetDataBuffersInfo>
   2275c:	b110      	cbz	r0, 22764 <mbedtls_sha_finish_internal+0x28>
   2275e:	2001      	movs	r0, #1
   22760:	b024      	add	sp, #144	; 0x90
   22762:	bd70      	pop	{r4, r5, r6, pc}
   22764:	462a      	mov	r2, r5
   22766:	a902      	add	r1, sp, #8
   22768:	4620      	mov	r0, r4
   2276a:	f000 fa6d 	bl	22c48 <ProcessHashDrv>
   2276e:	2800      	cmp	r0, #0
   22770:	d1f5      	bne.n	2275e <mbedtls_sha_finish_internal+0x22>
   22772:	4620      	mov	r0, r4
   22774:	f000 fb7e 	bl	22e74 <FinishHashDrv>
   22778:	2800      	cmp	r0, #0
   2277a:	d1f0      	bne.n	2275e <mbedtls_sha_finish_internal+0x22>
   2277c:	6620      	str	r0, [r4, #96]	; 0x60
   2277e:	b024      	add	sp, #144	; 0x90
   22780:	bd70      	pop	{r4, r5, r6, pc}
   22782:	2d80      	cmp	r5, #128	; 0x80
   22784:	462a      	mov	r2, r5
   22786:	f100 0164 	add.w	r1, r0, #100	; 0x64
   2278a:	bf28      	it	cs
   2278c:	2280      	movcs	r2, #128	; 0x80
   2278e:	4630      	mov	r0, r6
   22790:	f7ff fb3c 	bl	21e0c <CC_PalMemCopyPlat>
   22794:	6e25      	ldr	r5, [r4, #96]	; 0x60
   22796:	e7d7      	b.n	22748 <mbedtls_sha_finish_internal+0xc>

00022798 <mbedtls_sha_update_internal>:
   22798:	2800      	cmp	r0, #0
   2279a:	f000 80cd 	beq.w	22938 <mbedtls_sha_update_internal+0x1a0>
   2279e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227a2:	4615      	mov	r5, r2
   227a4:	b0a5      	sub	sp, #148	; 0x94
   227a6:	2a00      	cmp	r2, #0
   227a8:	f000 80b4 	beq.w	22914 <mbedtls_sha_update_internal+0x17c>
   227ac:	460f      	mov	r7, r1
   227ae:	2900      	cmp	r1, #0
   227b0:	f000 80ac 	beq.w	2290c <mbedtls_sha_update_internal+0x174>
   227b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   227b8:	4606      	mov	r6, r0
   227ba:	6e00      	ldr	r0, [r0, #96]	; 0x60
   227bc:	d37d      	bcc.n	228ba <mbedtls_sha_update_internal+0x122>
   227be:	f64f 78ff 	movw	r8, #65535	; 0xffff
   227c2:	f106 0964 	add.w	r9, r6, #100	; 0x64
   227c6:	e014      	b.n	227f2 <mbedtls_sha_update_internal+0x5a>
   227c8:	4283      	cmp	r3, r0
   227ca:	46ba      	mov	sl, r7
   227cc:	f64f 74ff 	movw	r4, #65535	; 0xffff
   227d0:	d029      	beq.n	22826 <mbedtls_sha_update_internal+0x8e>
   227d2:	fbb4 fbf3 	udiv	fp, r4, r3
   227d6:	fb03 fb0b 	mul.w	fp, r3, fp
   227da:	f1bb 0f00 	cmp.w	fp, #0
   227de:	d144      	bne.n	2286a <mbedtls_sha_update_internal+0xd2>
   227e0:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   227e4:	4447      	add	r7, r8
   227e6:	3dff      	subs	r5, #255	; 0xff
   227e8:	2c00      	cmp	r4, #0
   227ea:	d159      	bne.n	228a0 <mbedtls_sha_update_internal+0x108>
   227ec:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   227f0:	d363      	bcc.n	228ba <mbedtls_sha_update_internal+0x122>
   227f2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   227f4:	1a1c      	subs	r4, r3, r0
   227f6:	fbb4 f2f3 	udiv	r2, r4, r3
   227fa:	fb03 4412 	mls	r4, r3, r2, r4
   227fe:	2c00      	cmp	r4, #0
   22800:	d0e2      	beq.n	227c8 <mbedtls_sha_update_internal+0x30>
   22802:	4544      	cmp	r4, r8
   22804:	bf28      	it	cs
   22806:	4644      	movcs	r4, r8
   22808:	4622      	mov	r2, r4
   2280a:	4448      	add	r0, r9
   2280c:	4639      	mov	r1, r7
   2280e:	f7ff fafd 	bl	21e0c <CC_PalMemCopyPlat>
   22812:	6e30      	ldr	r0, [r6, #96]	; 0x60
   22814:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   22816:	4420      	add	r0, r4
   22818:	4283      	cmp	r3, r0
   2281a:	eb07 0a04 	add.w	sl, r7, r4
   2281e:	6630      	str	r0, [r6, #96]	; 0x60
   22820:	eba8 0404 	sub.w	r4, r8, r4
   22824:	d1d5      	bne.n	227d2 <mbedtls_sha_update_internal+0x3a>
   22826:	2b80      	cmp	r3, #128	; 0x80
   22828:	bf28      	it	cs
   2282a:	2380      	movcs	r3, #128	; 0x80
   2282c:	461a      	mov	r2, r3
   2282e:	4649      	mov	r1, r9
   22830:	a804      	add	r0, sp, #16
   22832:	f7ff faeb 	bl	21e0c <CC_PalMemCopyPlat>
   22836:	2300      	movs	r3, #0
   22838:	e9cd 3300 	strd	r3, r3, [sp]
   2283c:	aa02      	add	r2, sp, #8
   2283e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   22840:	a804      	add	r0, sp, #16
   22842:	f000 f9a3 	bl	22b8c <SetDataBuffersInfo>
   22846:	2800      	cmp	r0, #0
   22848:	d160      	bne.n	2290c <mbedtls_sha_update_internal+0x174>
   2284a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2284c:	a902      	add	r1, sp, #8
   2284e:	4630      	mov	r0, r6
   22850:	f000 f9fa 	bl	22c48 <ProcessHashDrv>
   22854:	2800      	cmp	r0, #0
   22856:	d159      	bne.n	2290c <mbedtls_sha_update_internal+0x174>
   22858:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2285a:	fbb4 fbf3 	udiv	fp, r4, r3
   2285e:	fb03 fb0b 	mul.w	fp, r3, fp
   22862:	6630      	str	r0, [r6, #96]	; 0x60
   22864:	f1bb 0f00 	cmp.w	fp, #0
   22868:	d0ba      	beq.n	227e0 <mbedtls_sha_update_internal+0x48>
   2286a:	2300      	movs	r3, #0
   2286c:	e9cd 3300 	strd	r3, r3, [sp]
   22870:	aa02      	add	r2, sp, #8
   22872:	4659      	mov	r1, fp
   22874:	4650      	mov	r0, sl
   22876:	f000 f989 	bl	22b8c <SetDataBuffersInfo>
   2287a:	2800      	cmp	r0, #0
   2287c:	d146      	bne.n	2290c <mbedtls_sha_update_internal+0x174>
   2287e:	a902      	add	r1, sp, #8
   22880:	465a      	mov	r2, fp
   22882:	4630      	mov	r0, r6
   22884:	f000 f9e0 	bl	22c48 <ProcessHashDrv>
   22888:	2800      	cmp	r0, #0
   2288a:	d13f      	bne.n	2290c <mbedtls_sha_update_internal+0x174>
   2288c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   22890:	eba4 040b 	sub.w	r4, r4, fp
   22894:	6e30      	ldr	r0, [r6, #96]	; 0x60
   22896:	44da      	add	sl, fp
   22898:	4447      	add	r7, r8
   2289a:	3dff      	subs	r5, #255	; 0xff
   2289c:	2c00      	cmp	r4, #0
   2289e:	d0a5      	beq.n	227ec <mbedtls_sha_update_internal+0x54>
   228a0:	3019      	adds	r0, #25
   228a2:	4651      	mov	r1, sl
   228a4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   228a8:	4622      	mov	r2, r4
   228aa:	f7ff faaf 	bl	21e0c <CC_PalMemCopyPlat>
   228ae:	6e30      	ldr	r0, [r6, #96]	; 0x60
   228b0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   228b4:	4420      	add	r0, r4
   228b6:	6630      	str	r0, [r6, #96]	; 0x60
   228b8:	d29b      	bcs.n	227f2 <mbedtls_sha_update_internal+0x5a>
   228ba:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   228bc:	1a14      	subs	r4, r2, r0
   228be:	fbb4 f3f2 	udiv	r3, r4, r2
   228c2:	fb02 4413 	mls	r4, r2, r3, r4
   228c6:	42ac      	cmp	r4, r5
   228c8:	bf28      	it	cs
   228ca:	462c      	movcs	r4, r5
   228cc:	bb34      	cbnz	r4, 2291c <mbedtls_sha_update_internal+0x184>
   228ce:	4290      	cmp	r0, r2
   228d0:	d034      	beq.n	2293c <mbedtls_sha_update_internal+0x1a4>
   228d2:	fbb5 f4f2 	udiv	r4, r5, r2
   228d6:	fb02 f404 	mul.w	r4, r2, r4
   228da:	b96c      	cbnz	r4, 228f8 <mbedtls_sha_update_internal+0x160>
   228dc:	b1d5      	cbz	r5, 22914 <mbedtls_sha_update_internal+0x17c>
   228de:	6e33      	ldr	r3, [r6, #96]	; 0x60
   228e0:	3319      	adds	r3, #25
   228e2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   228e6:	462a      	mov	r2, r5
   228e8:	4639      	mov	r1, r7
   228ea:	f7ff fa8f 	bl	21e0c <CC_PalMemCopyPlat>
   228ee:	6e33      	ldr	r3, [r6, #96]	; 0x60
   228f0:	442b      	add	r3, r5
   228f2:	2000      	movs	r0, #0
   228f4:	6633      	str	r3, [r6, #96]	; 0x60
   228f6:	e00a      	b.n	2290e <mbedtls_sha_update_internal+0x176>
   228f8:	2300      	movs	r3, #0
   228fa:	e9cd 3300 	strd	r3, r3, [sp]
   228fe:	aa02      	add	r2, sp, #8
   22900:	4621      	mov	r1, r4
   22902:	4638      	mov	r0, r7
   22904:	f000 f942 	bl	22b8c <SetDataBuffersInfo>
   22908:	2800      	cmp	r0, #0
   2290a:	d033      	beq.n	22974 <mbedtls_sha_update_internal+0x1dc>
   2290c:	2001      	movs	r0, #1
   2290e:	b025      	add	sp, #148	; 0x94
   22910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22914:	4628      	mov	r0, r5
   22916:	b025      	add	sp, #148	; 0x94
   22918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2291c:	f106 0364 	add.w	r3, r6, #100	; 0x64
   22920:	4639      	mov	r1, r7
   22922:	4622      	mov	r2, r4
   22924:	4418      	add	r0, r3
   22926:	f7ff fa71 	bl	21e0c <CC_PalMemCopyPlat>
   2292a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   2292c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2292e:	4420      	add	r0, r4
   22930:	1b2d      	subs	r5, r5, r4
   22932:	4427      	add	r7, r4
   22934:	6630      	str	r0, [r6, #96]	; 0x60
   22936:	e7ca      	b.n	228ce <mbedtls_sha_update_internal+0x136>
   22938:	2001      	movs	r0, #1
   2293a:	4770      	bx	lr
   2293c:	2a80      	cmp	r2, #128	; 0x80
   2293e:	bf28      	it	cs
   22940:	2280      	movcs	r2, #128	; 0x80
   22942:	f106 0164 	add.w	r1, r6, #100	; 0x64
   22946:	a804      	add	r0, sp, #16
   22948:	f7ff fa60 	bl	21e0c <CC_PalMemCopyPlat>
   2294c:	2300      	movs	r3, #0
   2294e:	e9cd 3300 	strd	r3, r3, [sp]
   22952:	a804      	add	r0, sp, #16
   22954:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   22956:	aa02      	add	r2, sp, #8
   22958:	f000 f918 	bl	22b8c <SetDataBuffersInfo>
   2295c:	2800      	cmp	r0, #0
   2295e:	d1d5      	bne.n	2290c <mbedtls_sha_update_internal+0x174>
   22960:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   22962:	a902      	add	r1, sp, #8
   22964:	4630      	mov	r0, r6
   22966:	f000 f96f 	bl	22c48 <ProcessHashDrv>
   2296a:	2800      	cmp	r0, #0
   2296c:	d1ce      	bne.n	2290c <mbedtls_sha_update_internal+0x174>
   2296e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   22970:	6630      	str	r0, [r6, #96]	; 0x60
   22972:	e7ae      	b.n	228d2 <mbedtls_sha_update_internal+0x13a>
   22974:	a902      	add	r1, sp, #8
   22976:	4622      	mov	r2, r4
   22978:	4630      	mov	r0, r6
   2297a:	f000 f965 	bl	22c48 <ProcessHashDrv>
   2297e:	2800      	cmp	r0, #0
   22980:	d1c4      	bne.n	2290c <mbedtls_sha_update_internal+0x174>
   22982:	4427      	add	r7, r4
   22984:	1b2d      	subs	r5, r5, r4
   22986:	e7a9      	b.n	228dc <mbedtls_sha_update_internal+0x144>

00022988 <cc_mbedtls_sha256>:
   22988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2298a:	461c      	mov	r4, r3
   2298c:	4605      	mov	r5, r0
   2298e:	4811      	ldr	r0, [pc, #68]	; (229d4 <cc_mbedtls_sha256+0x4c>)
   22990:	460e      	mov	r6, r1
   22992:	4617      	mov	r7, r2
   22994:	f7ff fe42 	bl	2261c <cc_mbedtls_sha256_init>
   22998:	4621      	mov	r1, r4
   2299a:	480e      	ldr	r0, [pc, #56]	; (229d4 <cc_mbedtls_sha256+0x4c>)
   2299c:	f7ff fe58 	bl	22650 <cc_mbedtls_sha256_starts>
   229a0:	4604      	mov	r4, r0
   229a2:	b120      	cbz	r0, 229ae <cc_mbedtls_sha256+0x26>
   229a4:	480b      	ldr	r0, [pc, #44]	; (229d4 <cc_mbedtls_sha256+0x4c>)
   229a6:	f7ff fe4d 	bl	22644 <cc_mbedtls_sha256_free>
   229aa:	4620      	mov	r0, r4
   229ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   229ae:	4809      	ldr	r0, [pc, #36]	; (229d4 <cc_mbedtls_sha256+0x4c>)
   229b0:	4632      	mov	r2, r6
   229b2:	4629      	mov	r1, r5
   229b4:	f7ff fe60 	bl	22678 <cc_mbedtls_sha256_update>
   229b8:	4604      	mov	r4, r0
   229ba:	2800      	cmp	r0, #0
   229bc:	d1f2      	bne.n	229a4 <cc_mbedtls_sha256+0x1c>
   229be:	4639      	mov	r1, r7
   229c0:	4804      	ldr	r0, [pc, #16]	; (229d4 <cc_mbedtls_sha256+0x4c>)
   229c2:	f7ff fe83 	bl	226cc <cc_mbedtls_sha256_finish>
   229c6:	4604      	mov	r4, r0
   229c8:	4802      	ldr	r0, [pc, #8]	; (229d4 <cc_mbedtls_sha256+0x4c>)
   229ca:	f7ff fe3b 	bl	22644 <cc_mbedtls_sha256_free>
   229ce:	4620      	mov	r0, r4
   229d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   229d2:	bf00      	nop
   229d4:	20004390 	.word	0x20004390

000229d8 <RNG_PLAT_SetUserRngParameters>:
   229d8:	b530      	push	{r4, r5, lr}
   229da:	b083      	sub	sp, #12
   229dc:	231c      	movs	r3, #28
   229de:	a901      	add	r1, sp, #4
   229e0:	4604      	mov	r4, r0
   229e2:	9301      	str	r3, [sp, #4]
   229e4:	f000 f834 	bl	22a50 <CC_PalTrngParamGet>
   229e8:	4605      	mov	r5, r0
   229ea:	b938      	cbnz	r0, 229fc <RNG_PLAT_SetUserRngParameters+0x24>
   229ec:	9b01      	ldr	r3, [sp, #4]
   229ee:	2b1c      	cmp	r3, #28
   229f0:	d007      	beq.n	22a02 <RNG_PLAT_SetUserRngParameters+0x2a>
   229f2:	4d15      	ldr	r5, [pc, #84]	; (22a48 <RNG_PLAT_SetUserRngParameters+0x70>)
   229f4:	211c      	movs	r1, #28
   229f6:	4620      	mov	r0, r4
   229f8:	f7ff fa0c 	bl	21e14 <CC_PalMemSetZeroPlat>
   229fc:	4628      	mov	r0, r5
   229fe:	b003      	add	sp, #12
   22a00:	bd30      	pop	{r4, r5, pc}
   22a02:	e9d4 3200 	ldrd	r3, r2, [r4]
   22a06:	2101      	movs	r1, #1
   22a08:	3b00      	subs	r3, #0
   22a0a:	61e1      	str	r1, [r4, #28]
   22a0c:	bf18      	it	ne
   22a0e:	2301      	movne	r3, #1
   22a10:	b10a      	cbz	r2, 22a16 <RNG_PLAT_SetUserRngParameters+0x3e>
   22a12:	f043 0302 	orr.w	r3, r3, #2
   22a16:	68a2      	ldr	r2, [r4, #8]
   22a18:	b932      	cbnz	r2, 22a28 <RNG_PLAT_SetUserRngParameters+0x50>
   22a1a:	68e2      	ldr	r2, [r4, #12]
   22a1c:	b942      	cbnz	r2, 22a30 <RNG_PLAT_SetUserRngParameters+0x58>
   22a1e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   22a22:	b97b      	cbnz	r3, 22a44 <RNG_PLAT_SetUserRngParameters+0x6c>
   22a24:	4d09      	ldr	r5, [pc, #36]	; (22a4c <RNG_PLAT_SetUserRngParameters+0x74>)
   22a26:	e7e5      	b.n	229f4 <RNG_PLAT_SetUserRngParameters+0x1c>
   22a28:	68e2      	ldr	r2, [r4, #12]
   22a2a:	f043 0304 	orr.w	r3, r3, #4
   22a2e:	b13a      	cbz	r2, 22a40 <RNG_PLAT_SetUserRngParameters+0x68>
   22a30:	f043 0308 	orr.w	r3, r3, #8
   22a34:	2200      	movs	r2, #0
   22a36:	4628      	mov	r0, r5
   22a38:	e9c4 3208 	strd	r3, r2, [r4, #32]
   22a3c:	b003      	add	sp, #12
   22a3e:	bd30      	pop	{r4, r5, pc}
   22a40:	e9c4 3208 	strd	r3, r2, [r4, #32]
   22a44:	4615      	mov	r5, r2
   22a46:	e7d9      	b.n	229fc <RNG_PLAT_SetUserRngParameters+0x24>
   22a48:	00f00c37 	.word	0x00f00c37
   22a4c:	00f00c0e 	.word	0x00f00c0e

00022a50 <CC_PalTrngParamGet>:
   22a50:	b118      	cbz	r0, 22a5a <CC_PalTrngParamGet+0xa>
   22a52:	b111      	cbz	r1, 22a5a <CC_PalTrngParamGet+0xa>
   22a54:	680b      	ldr	r3, [r1, #0]
   22a56:	2b1c      	cmp	r3, #28
   22a58:	d001      	beq.n	22a5e <CC_PalTrngParamGet+0xe>
   22a5a:	2001      	movs	r0, #1
   22a5c:	4770      	bx	lr
   22a5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22a62:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   22a66:	3201      	adds	r2, #1
   22a68:	bf14      	ite	ne
   22a6a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   22a6e:	f241 225c 	movweq	r2, #4700	; 0x125c
   22a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22a76:	6002      	str	r2, [r0, #0]
   22a78:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   22a7c:	3201      	adds	r2, #1
   22a7e:	bf14      	ite	ne
   22a80:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   22a84:	f641 1264 	movweq	r2, #6500	; 0x1964
   22a88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22a8c:	6042      	str	r2, [r0, #4]
   22a8e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   22a92:	3201      	adds	r2, #1
   22a94:	bf14      	ite	ne
   22a96:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   22a9a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   22a9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22aa2:	6082      	str	r2, [r0, #8]
   22aa4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   22aa8:	3201      	adds	r2, #1
   22aaa:	bf14      	ite	ne
   22aac:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   22ab0:	f241 3288 	movweq	r2, #5000	; 0x1388
   22ab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22ab8:	60c2      	str	r2, [r0, #12]
   22aba:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   22abe:	3201      	adds	r2, #1
   22ac0:	bf14      	ite	ne
   22ac2:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   22ac6:	2290      	moveq	r2, #144	; 0x90
   22ac8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22acc:	6102      	str	r2, [r0, #16]
   22ace:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   22ad2:	3201      	adds	r2, #1
   22ad4:	bf14      	ite	ne
   22ad6:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   22ada:	2251      	moveq	r2, #81	; 0x51
   22adc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22ae0:	6142      	str	r2, [r0, #20]
   22ae2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   22ae6:	3201      	adds	r2, #1
   22ae8:	bf14      	ite	ne
   22aea:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   22aee:	f240 3337 	movweq	r3, #823	; 0x337
   22af2:	6183      	str	r3, [r0, #24]
   22af4:	2000      	movs	r0, #0
   22af6:	4770      	bx	lr

00022af8 <LLF_RND_WaitRngInterrupt>:
   22af8:	b508      	push	{r3, lr}
   22afa:	4601      	mov	r1, r0
   22afc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   22b00:	f7ff f910 	bl	21d24 <CC_HalWaitInterruptRND>
   22b04:	4b03      	ldr	r3, [pc, #12]	; (22b14 <LLF_RND_WaitRngInterrupt+0x1c>)
   22b06:	2200      	movs	r2, #0
   22b08:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   22b0c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   22b10:	bd08      	pop	{r3, pc}
   22b12:	bf00      	nop
   22b14:	5002b000 	.word	0x5002b000

00022b18 <LLF_RND_GetRoscSampleCnt>:
   22b18:	3801      	subs	r0, #1
   22b1a:	2807      	cmp	r0, #7
   22b1c:	d805      	bhi.n	22b2a <LLF_RND_GetRoscSampleCnt+0x12>
   22b1e:	e8df f000 	tbb	[pc, r0]
   22b22:	0e12      	.short	0x0e12
   22b24:	04040a04 	.word	0x04040a04
   22b28:	0604      	.short	0x0604
   22b2a:	4809      	ldr	r0, [pc, #36]	; (22b50 <LLF_RND_GetRoscSampleCnt+0x38>)
   22b2c:	4770      	bx	lr
   22b2e:	68cb      	ldr	r3, [r1, #12]
   22b30:	624b      	str	r3, [r1, #36]	; 0x24
   22b32:	2000      	movs	r0, #0
   22b34:	4770      	bx	lr
   22b36:	688b      	ldr	r3, [r1, #8]
   22b38:	624b      	str	r3, [r1, #36]	; 0x24
   22b3a:	2000      	movs	r0, #0
   22b3c:	4770      	bx	lr
   22b3e:	684b      	ldr	r3, [r1, #4]
   22b40:	624b      	str	r3, [r1, #36]	; 0x24
   22b42:	2000      	movs	r0, #0
   22b44:	4770      	bx	lr
   22b46:	680b      	ldr	r3, [r1, #0]
   22b48:	624b      	str	r3, [r1, #36]	; 0x24
   22b4a:	2000      	movs	r0, #0
   22b4c:	4770      	bx	lr
   22b4e:	bf00      	nop
   22b50:	00f10c31 	.word	0x00f10c31

00022b54 <LLF_RND_GetFastestRosc>:
   22b54:	680b      	ldr	r3, [r1, #0]
   22b56:	e002      	b.n	22b5e <LLF_RND_GetFastestRosc+0xa>
   22b58:	2b08      	cmp	r3, #8
   22b5a:	600b      	str	r3, [r1, #0]
   22b5c:	d806      	bhi.n	22b6c <LLF_RND_GetFastestRosc+0x18>
   22b5e:	6a02      	ldr	r2, [r0, #32]
   22b60:	4213      	tst	r3, r2
   22b62:	ea4f 0343 	mov.w	r3, r3, lsl #1
   22b66:	d0f7      	beq.n	22b58 <LLF_RND_GetFastestRosc+0x4>
   22b68:	2000      	movs	r0, #0
   22b6a:	4770      	bx	lr
   22b6c:	4800      	ldr	r0, [pc, #0]	; (22b70 <LLF_RND_GetFastestRosc+0x1c>)
   22b6e:	4770      	bx	lr
   22b70:	00f10c31 	.word	0x00f10c31

00022b74 <LLF_RND_TurnOffTrng>:
   22b74:	4b04      	ldr	r3, [pc, #16]	; (22b88 <LLF_RND_TurnOffTrng+0x14>)
   22b76:	2200      	movs	r2, #0
   22b78:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   22b7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   22b80:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   22b84:	f7ff b8b4 	b.w	21cf0 <CC_HalClearInterruptBit>
   22b88:	5002b000 	.word	0x5002b000

00022b8c <SetDataBuffersInfo>:
   22b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b8e:	b083      	sub	sp, #12
   22b90:	461d      	mov	r5, r3
   22b92:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   22b96:	f04f 0300 	mov.w	r3, #0
   22b9a:	f88d 3007 	strb.w	r3, [sp, #7]
   22b9e:	d324      	bcc.n	22bea <SetDataBuffersInfo+0x5e>
   22ba0:	468c      	mov	ip, r1
   22ba2:	4484      	add	ip, r0
   22ba4:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   22ba8:	4604      	mov	r4, r0
   22baa:	d81e      	bhi.n	22bea <SetDataBuffersInfo+0x5e>
   22bac:	4617      	mov	r7, r2
   22bae:	f10d 0307 	add.w	r3, sp, #7
   22bb2:	2201      	movs	r2, #1
   22bb4:	f000 fe66 	bl	23884 <CC_PalDataBufferAttrGet>
   22bb8:	4606      	mov	r6, r0
   22bba:	b9b0      	cbnz	r0, 22bea <SetDataBuffersInfo+0x5e>
   22bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22bbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22bc2:	603c      	str	r4, [r7, #0]
   22bc4:	713b      	strb	r3, [r7, #4]
   22bc6:	b192      	cbz	r2, 22bee <SetDataBuffersInfo+0x62>
   22bc8:	b14d      	cbz	r5, 22bde <SetDataBuffersInfo+0x52>
   22bca:	4602      	mov	r2, r0
   22bcc:	9908      	ldr	r1, [sp, #32]
   22bce:	f10d 0307 	add.w	r3, sp, #7
   22bd2:	4628      	mov	r0, r5
   22bd4:	f000 fe56 	bl	23884 <CC_PalDataBufferAttrGet>
   22bd8:	b938      	cbnz	r0, 22bea <SetDataBuffersInfo+0x5e>
   22bda:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22be0:	4630      	mov	r0, r6
   22be2:	6015      	str	r5, [r2, #0]
   22be4:	7113      	strb	r3, [r2, #4]
   22be6:	b003      	add	sp, #12
   22be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bea:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   22bee:	4630      	mov	r0, r6
   22bf0:	b003      	add	sp, #12
   22bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022bf4 <InitHashDrv>:
   22bf4:	b1e8      	cbz	r0, 22c32 <InitHashDrv+0x3e>
   22bf6:	b510      	push	{r4, lr}
   22bf8:	6804      	ldr	r4, [r0, #0]
   22bfa:	2c01      	cmp	r4, #1
   22bfc:	d004      	beq.n	22c08 <InitHashDrv+0x14>
   22bfe:	2c02      	cmp	r4, #2
   22c00:	d010      	beq.n	22c24 <InitHashDrv+0x30>
   22c02:	b144      	cbz	r4, 22c16 <InitHashDrv+0x22>
   22c04:	480c      	ldr	r0, [pc, #48]	; (22c38 <InitHashDrv+0x44>)
   22c06:	bd10      	pop	{r4, pc}
   22c08:	490c      	ldr	r1, [pc, #48]	; (22c3c <InitHashDrv+0x48>)
   22c0a:	2220      	movs	r2, #32
   22c0c:	3008      	adds	r0, #8
   22c0e:	f7ff f8fd 	bl	21e0c <CC_PalMemCopyPlat>
   22c12:	2000      	movs	r0, #0
   22c14:	bd10      	pop	{r4, pc}
   22c16:	490a      	ldr	r1, [pc, #40]	; (22c40 <InitHashDrv+0x4c>)
   22c18:	2214      	movs	r2, #20
   22c1a:	3008      	adds	r0, #8
   22c1c:	f7ff f8f6 	bl	21e0c <CC_PalMemCopyPlat>
   22c20:	4620      	mov	r0, r4
   22c22:	bd10      	pop	{r4, pc}
   22c24:	4907      	ldr	r1, [pc, #28]	; (22c44 <InitHashDrv+0x50>)
   22c26:	2220      	movs	r2, #32
   22c28:	3008      	adds	r0, #8
   22c2a:	f7ff f8ef 	bl	21e0c <CC_PalMemCopyPlat>
   22c2e:	2000      	movs	r0, #0
   22c30:	bd10      	pop	{r4, pc}
   22c32:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   22c36:	4770      	bx	lr
   22c38:	00f30001 	.word	0x00f30001
   22c3c:	00028c00 	.word	0x00028c00
   22c40:	00028bcc 	.word	0x00028bcc
   22c44:	00028be0 	.word	0x00028be0

00022c48 <ProcessHashDrv>:
   22c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22c4c:	2900      	cmp	r1, #0
   22c4e:	f000 80f9 	beq.w	22e44 <ProcessHashDrv+0x1fc>
   22c52:	4604      	mov	r4, r0
   22c54:	2800      	cmp	r0, #0
   22c56:	f000 80f9 	beq.w	22e4c <ProcessHashDrv+0x204>
   22c5a:	6803      	ldr	r3, [r0, #0]
   22c5c:	4690      	mov	r8, r2
   22c5e:	460f      	mov	r7, r1
   22c60:	2b00      	cmp	r3, #0
   22c62:	f000 80c3 	beq.w	22dec <ProcessHashDrv+0x1a4>
   22c66:	3b01      	subs	r3, #1
   22c68:	2b01      	cmp	r3, #1
   22c6a:	f200 80d7 	bhi.w	22e1c <ProcessHashDrv+0x1d4>
   22c6e:	4879      	ldr	r0, [pc, #484]	; (22e54 <ProcessHashDrv+0x20c>)
   22c70:	f04f 31ff 	mov.w	r1, #4294967295
   22c74:	f04f 0902 	mov.w	r9, #2
   22c78:	f7ff f8e4 	bl	21e44 <CC_PalMutexLock>
   22c7c:	2800      	cmp	r0, #0
   22c7e:	f040 80bf 	bne.w	22e00 <ProcessHashDrv+0x1b8>
   22c82:	2000      	movs	r0, #0
   22c84:	f7ff f90e 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   22c88:	4606      	mov	r6, r0
   22c8a:	2800      	cmp	r0, #0
   22c8c:	f040 80c2 	bne.w	22e14 <ProcessHashDrv+0x1cc>
   22c90:	4a71      	ldr	r2, [pc, #452]	; (22e58 <ProcessHashDrv+0x210>)
   22c92:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   22c96:	2b00      	cmp	r3, #0
   22c98:	d1fb      	bne.n	22c92 <ProcessHashDrv+0x4a>
   22c9a:	4d6f      	ldr	r5, [pc, #444]	; (22e58 <ProcessHashDrv+0x210>)
   22c9c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   22ca0:	2b00      	cmp	r3, #0
   22ca2:	d1fb      	bne.n	22c9c <ProcessHashDrv+0x54>
   22ca4:	f04f 30ff 	mov.w	r0, #4294967295
   22ca8:	f7ff f822 	bl	21cf0 <CC_HalClearInterruptBit>
   22cac:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   22cb0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   22cb4:	f7ff f82a 	bl	21d0c <CC_HalMaskInterrupt>
   22cb8:	2301      	movs	r3, #1
   22cba:	2207      	movs	r2, #7
   22cbc:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   22cc0:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   22cc4:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   22cc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   22cca:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   22cce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22cd0:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   22cd4:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   22cd8:	6823      	ldr	r3, [r4, #0]
   22cda:	b15b      	cbz	r3, 22cf4 <ProcessHashDrv+0xac>
   22cdc:	3b01      	subs	r3, #1
   22cde:	2b01      	cmp	r3, #1
   22ce0:	d818      	bhi.n	22d14 <ProcessHashDrv+0xcc>
   22ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22ce4:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   22ce8:	6a23      	ldr	r3, [r4, #32]
   22cea:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   22cee:	69e3      	ldr	r3, [r4, #28]
   22cf0:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   22cf4:	4b58      	ldr	r3, [pc, #352]	; (22e58 <ProcessHashDrv+0x210>)
   22cf6:	69a2      	ldr	r2, [r4, #24]
   22cf8:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   22cfc:	6962      	ldr	r2, [r4, #20]
   22cfe:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   22d02:	6922      	ldr	r2, [r4, #16]
   22d04:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   22d08:	68e2      	ldr	r2, [r4, #12]
   22d0a:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   22d0e:	68a2      	ldr	r2, [r4, #8]
   22d10:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   22d14:	4a50      	ldr	r2, [pc, #320]	; (22e58 <ProcessHashDrv+0x210>)
   22d16:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22d1a:	2b00      	cmp	r3, #0
   22d1c:	d1fb      	bne.n	22d16 <ProcessHashDrv+0xce>
   22d1e:	f1b8 0f00 	cmp.w	r8, #0
   22d22:	d05f      	beq.n	22de4 <ProcessHashDrv+0x19c>
   22d24:	6863      	ldr	r3, [r4, #4]
   22d26:	2b01      	cmp	r3, #1
   22d28:	bf08      	it	eq
   22d2a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   22d2e:	4b4a      	ldr	r3, [pc, #296]	; (22e58 <ProcessHashDrv+0x210>)
   22d30:	683a      	ldr	r2, [r7, #0]
   22d32:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   22d36:	2040      	movs	r0, #64	; 0x40
   22d38:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   22d3c:	f7fe ffec 	bl	21d18 <CC_HalWaitInterrupt>
   22d40:	4606      	mov	r6, r0
   22d42:	4a45      	ldr	r2, [pc, #276]	; (22e58 <ProcessHashDrv+0x210>)
   22d44:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22d48:	2b00      	cmp	r3, #0
   22d4a:	d1fb      	bne.n	22d44 <ProcessHashDrv+0xfc>
   22d4c:	4a42      	ldr	r2, [pc, #264]	; (22e58 <ProcessHashDrv+0x210>)
   22d4e:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   22d52:	2b00      	cmp	r3, #0
   22d54:	d1fb      	bne.n	22d4e <ProcessHashDrv+0x106>
   22d56:	6823      	ldr	r3, [r4, #0]
   22d58:	b15b      	cbz	r3, 22d72 <ProcessHashDrv+0x12a>
   22d5a:	3b01      	subs	r3, #1
   22d5c:	2b01      	cmp	r3, #1
   22d5e:	d818      	bhi.n	22d92 <ProcessHashDrv+0x14a>
   22d60:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   22d64:	6263      	str	r3, [r4, #36]	; 0x24
   22d66:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   22d6a:	6223      	str	r3, [r4, #32]
   22d6c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   22d70:	61e3      	str	r3, [r4, #28]
   22d72:	4b39      	ldr	r3, [pc, #228]	; (22e58 <ProcessHashDrv+0x210>)
   22d74:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   22d78:	61a2      	str	r2, [r4, #24]
   22d7a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   22d7e:	6162      	str	r2, [r4, #20]
   22d80:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   22d84:	6122      	str	r2, [r4, #16]
   22d86:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   22d8a:	60e2      	str	r2, [r4, #12]
   22d8c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   22d90:	60a3      	str	r3, [r4, #8]
   22d92:	4a31      	ldr	r2, [pc, #196]	; (22e58 <ProcessHashDrv+0x210>)
   22d94:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   22d98:	64a1      	str	r1, [r4, #72]	; 0x48
   22d9a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   22d9e:	64e1      	str	r1, [r4, #76]	; 0x4c
   22da0:	2300      	movs	r3, #0
   22da2:	2101      	movs	r1, #1
   22da4:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   22da8:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   22dac:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   22db0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22db4:	2b00      	cmp	r3, #0
   22db6:	d1fb      	bne.n	22db0 <ProcessHashDrv+0x168>
   22db8:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   22dbc:	2e00      	cmp	r6, #0
   22dbe:	d13b      	bne.n	22e38 <ProcessHashDrv+0x1f0>
   22dc0:	4b25      	ldr	r3, [pc, #148]	; (22e58 <ProcessHashDrv+0x210>)
   22dc2:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   22dc6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   22dca:	f7fe ff9f 	bl	21d0c <CC_HalMaskInterrupt>
   22dce:	2001      	movs	r0, #1
   22dd0:	f7ff f868 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   22dd4:	bb60      	cbnz	r0, 22e30 <ProcessHashDrv+0x1e8>
   22dd6:	481f      	ldr	r0, [pc, #124]	; (22e54 <ProcessHashDrv+0x20c>)
   22dd8:	f7ff f83c 	bl	21e54 <CC_PalMutexUnlock>
   22ddc:	bb10      	cbnz	r0, 22e24 <ProcessHashDrv+0x1dc>
   22dde:	4630      	mov	r0, r6
   22de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22de4:	2304      	movs	r3, #4
   22de6:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   22dea:	e7aa      	b.n	22d42 <ProcessHashDrv+0xfa>
   22dec:	4819      	ldr	r0, [pc, #100]	; (22e54 <ProcessHashDrv+0x20c>)
   22dee:	f04f 31ff 	mov.w	r1, #4294967295
   22df2:	f04f 0901 	mov.w	r9, #1
   22df6:	f7ff f825 	bl	21e44 <CC_PalMutexLock>
   22dfa:	2800      	cmp	r0, #0
   22dfc:	f43f af41 	beq.w	22c82 <ProcessHashDrv+0x3a>
   22e00:	4816      	ldr	r0, [pc, #88]	; (22e5c <ProcessHashDrv+0x214>)
   22e02:	f7fe f895 	bl	20f30 <CC_PalAbort>
   22e06:	2000      	movs	r0, #0
   22e08:	f7ff f84c 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   22e0c:	4606      	mov	r6, r0
   22e0e:	2800      	cmp	r0, #0
   22e10:	f43f af3e 	beq.w	22c90 <ProcessHashDrv+0x48>
   22e14:	4812      	ldr	r0, [pc, #72]	; (22e60 <ProcessHashDrv+0x218>)
   22e16:	f7fe f88b 	bl	20f30 <CC_PalAbort>
   22e1a:	e739      	b.n	22c90 <ProcessHashDrv+0x48>
   22e1c:	4e11      	ldr	r6, [pc, #68]	; (22e64 <ProcessHashDrv+0x21c>)
   22e1e:	4630      	mov	r0, r6
   22e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22e24:	4810      	ldr	r0, [pc, #64]	; (22e68 <ProcessHashDrv+0x220>)
   22e26:	f7fe f883 	bl	20f30 <CC_PalAbort>
   22e2a:	4630      	mov	r0, r6
   22e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22e30:	480e      	ldr	r0, [pc, #56]	; (22e6c <ProcessHashDrv+0x224>)
   22e32:	f7fe f87d 	bl	20f30 <CC_PalAbort>
   22e36:	e7ce      	b.n	22dd6 <ProcessHashDrv+0x18e>
   22e38:	2110      	movs	r1, #16
   22e3a:	f104 0008 	add.w	r0, r4, #8
   22e3e:	f7fe ffe9 	bl	21e14 <CC_PalMemSetZeroPlat>
   22e42:	e7bd      	b.n	22dc0 <ProcessHashDrv+0x178>
   22e44:	4e0a      	ldr	r6, [pc, #40]	; (22e70 <ProcessHashDrv+0x228>)
   22e46:	4630      	mov	r0, r6
   22e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22e4c:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   22e50:	e7c5      	b.n	22dde <ProcessHashDrv+0x196>
   22e52:	bf00      	nop
   22e54:	20000968 	.word	0x20000968
   22e58:	5002b000 	.word	0x5002b000
   22e5c:	00028b00 	.word	0x00028b00
   22e60:	00028b18 	.word	0x00028b18
   22e64:	00f30001 	.word	0x00f30001
   22e68:	00028b58 	.word	0x00028b58
   22e6c:	00028b38 	.word	0x00028b38
   22e70:	00f30003 	.word	0x00f30003

00022e74 <FinishHashDrv>:
   22e74:	b398      	cbz	r0, 22ede <FinishHashDrv+0x6a>
   22e76:	b470      	push	{r4, r5, r6}
   22e78:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   22e7c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   22e80:	ba26      	rev	r6, r4
   22e82:	ba0d      	rev	r5, r1
   22e84:	ba14      	rev	r4, r2
   22e86:	ba19      	rev	r1, r3
   22e88:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   22e8c:	ba12      	rev	r2, r2
   22e8e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   22e92:	6182      	str	r2, [r0, #24]
   22e94:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   22e98:	e9c0 6502 	strd	r6, r5, [r0, #8]
   22e9c:	ba1b      	rev	r3, r3
   22e9e:	ba25      	rev	r5, r4
   22ea0:	e9c0 3507 	strd	r3, r5, [r0, #28]
   22ea4:	ba14      	rev	r4, r2
   22ea6:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   22eaa:	6a81      	ldr	r1, [r0, #40]	; 0x28
   22eac:	ba12      	rev	r2, r2
   22eae:	ba09      	rev	r1, r1
   22eb0:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   22eb4:	62c2      	str	r2, [r0, #44]	; 0x2c
   22eb6:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   22eba:	ba1b      	rev	r3, r3
   22ebc:	ba25      	rev	r5, r4
   22ebe:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   22ec2:	ba14      	rev	r4, r2
   22ec4:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   22ec8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   22eca:	ba12      	rev	r2, r2
   22ecc:	ba09      	rev	r1, r1
   22ece:	ba1b      	rev	r3, r3
   22ed0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   22ed4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   22ed8:	2000      	movs	r0, #0
   22eda:	bc70      	pop	{r4, r5, r6}
   22edc:	4770      	bx	lr
   22ede:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   22ee2:	4770      	bx	lr

00022ee4 <LoadAesKey>:
   22ee4:	2800      	cmp	r0, #0
   22ee6:	d046      	beq.n	22f76 <LoadAesKey+0x92>
   22ee8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   22eec:	2b00      	cmp	r3, #0
   22eee:	d033      	beq.n	22f58 <LoadAesKey+0x74>
   22ef0:	2b03      	cmp	r3, #3
   22ef2:	b510      	push	{r4, lr}
   22ef4:	d013      	beq.n	22f1e <LoadAesKey+0x3a>
   22ef6:	4821      	ldr	r0, [pc, #132]	; (22f7c <LoadAesKey+0x98>)
   22ef8:	4c21      	ldr	r4, [pc, #132]	; (22f80 <LoadAesKey+0x9c>)
   22efa:	6822      	ldr	r2, [r4, #0]
   22efc:	4b21      	ldr	r3, [pc, #132]	; (22f84 <LoadAesKey+0xa0>)
   22efe:	6812      	ldr	r2, [r2, #0]
   22f00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22f04:	6822      	ldr	r2, [r4, #0]
   22f06:	6852      	ldr	r2, [r2, #4]
   22f08:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   22f0c:	6822      	ldr	r2, [r4, #0]
   22f0e:	6892      	ldr	r2, [r2, #8]
   22f10:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22f14:	6822      	ldr	r2, [r4, #0]
   22f16:	68d2      	ldr	r2, [r2, #12]
   22f18:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22f1c:	bd10      	pop	{r4, pc}
   22f1e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   22f20:	6c00      	ldr	r0, [r0, #64]	; 0x40
   22f22:	4c17      	ldr	r4, [pc, #92]	; (22f80 <LoadAesKey+0x9c>)
   22f24:	f000 fbac 	bl	23680 <kmu_validate_kdr_slot_and_size>
   22f28:	2800      	cmp	r0, #0
   22f2a:	d1e6      	bne.n	22efa <LoadAesKey+0x16>
   22f2c:	6822      	ldr	r2, [r4, #0]
   22f2e:	4b15      	ldr	r3, [pc, #84]	; (22f84 <LoadAesKey+0xa0>)
   22f30:	6812      	ldr	r2, [r2, #0]
   22f32:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22f36:	6822      	ldr	r2, [r4, #0]
   22f38:	6852      	ldr	r2, [r2, #4]
   22f3a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   22f3e:	6822      	ldr	r2, [r4, #0]
   22f40:	6892      	ldr	r2, [r2, #8]
   22f42:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22f46:	6822      	ldr	r2, [r4, #0]
   22f48:	68d2      	ldr	r2, [r2, #12]
   22f4a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22f4e:	f000 fba3 	bl	23698 <kmu_use_kdr_key>
   22f52:	2800      	cmp	r0, #0
   22f54:	d1d1      	bne.n	22efa <LoadAesKey+0x16>
   22f56:	bd10      	pop	{r4, pc}
   22f58:	4a0a      	ldr	r2, [pc, #40]	; (22f84 <LoadAesKey+0xa0>)
   22f5a:	6901      	ldr	r1, [r0, #16]
   22f5c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   22f60:	6941      	ldr	r1, [r0, #20]
   22f62:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   22f66:	6981      	ldr	r1, [r0, #24]
   22f68:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   22f6c:	69c1      	ldr	r1, [r0, #28]
   22f6e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   22f72:	4618      	mov	r0, r3
   22f74:	4770      	bx	lr
   22f76:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   22f7a:	4770      	bx	lr
   22f7c:	00f10009 	.word	0x00f10009
   22f80:	20000958 	.word	0x20000958
   22f84:	5002b000 	.word	0x5002b000

00022f88 <InitAes.part.0>:
   22f88:	4a37      	ldr	r2, [pc, #220]	; (23068 <InitAes.part.0+0xe0>)
   22f8a:	b538      	push	{r3, r4, r5, lr}
   22f8c:	4604      	mov	r4, r0
   22f8e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22f92:	2b00      	cmp	r3, #0
   22f94:	d1fb      	bne.n	22f8e <InitAes.part.0+0x6>
   22f96:	4a34      	ldr	r2, [pc, #208]	; (23068 <InitAes.part.0+0xe0>)
   22f98:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   22f9c:	2b00      	cmp	r3, #0
   22f9e:	d1fb      	bne.n	22f98 <InitAes.part.0+0x10>
   22fa0:	4a31      	ldr	r2, [pc, #196]	; (23068 <InitAes.part.0+0xe0>)
   22fa2:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   22fa6:	2b00      	cmp	r3, #0
   22fa8:	d1fb      	bne.n	22fa2 <InitAes.part.0+0x1a>
   22faa:	4a2f      	ldr	r2, [pc, #188]	; (23068 <InitAes.part.0+0xe0>)
   22fac:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   22fb0:	2b00      	cmp	r3, #0
   22fb2:	d1fb      	bne.n	22fac <InitAes.part.0+0x24>
   22fb4:	4a2c      	ldr	r2, [pc, #176]	; (23068 <InitAes.part.0+0xe0>)
   22fb6:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   22fba:	2b00      	cmp	r3, #0
   22fbc:	d1fb      	bne.n	22fb6 <InitAes.part.0+0x2e>
   22fbe:	4d2a      	ldr	r5, [pc, #168]	; (23068 <InitAes.part.0+0xe0>)
   22fc0:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   22fc4:	2b00      	cmp	r3, #0
   22fc6:	d1fb      	bne.n	22fc0 <InitAes.part.0+0x38>
   22fc8:	f04f 30ff 	mov.w	r0, #4294967295
   22fcc:	f7fe fe90 	bl	21cf0 <CC_HalClearInterruptBit>
   22fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22fd2:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   22fd6:	f023 0304 	bic.w	r3, r3, #4
   22fda:	2b03      	cmp	r3, #3
   22fdc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22fde:	d039      	beq.n	23054 <InitAes.part.0+0xcc>
   22fe0:	2b01      	cmp	r3, #1
   22fe2:	bf0c      	ite	eq
   22fe4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   22fe8:	f020 0020 	bicne.w	r0, r0, #32
   22fec:	f7fe fe8e 	bl	21d0c <CC_HalMaskInterrupt>
   22ff0:	4a1d      	ldr	r2, [pc, #116]	; (23068 <InitAes.part.0+0xe0>)
   22ff2:	2301      	movs	r3, #1
   22ff4:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   22ff8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22ffc:	2b00      	cmp	r3, #0
   22ffe:	d1fb      	bne.n	22ff8 <InitAes.part.0+0x70>
   23000:	4a19      	ldr	r2, [pc, #100]	; (23068 <InitAes.part.0+0xe0>)
   23002:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   23006:	2b00      	cmp	r3, #0
   23008:	d1fb      	bne.n	23002 <InitAes.part.0+0x7a>
   2300a:	4917      	ldr	r1, [pc, #92]	; (23068 <InitAes.part.0+0xe0>)
   2300c:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   23010:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   23014:	2b00      	cmp	r3, #0
   23016:	d1fb      	bne.n	23010 <InitAes.part.0+0x88>
   23018:	4a13      	ldr	r2, [pc, #76]	; (23068 <InitAes.part.0+0xe0>)
   2301a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2301e:	2b00      	cmp	r3, #0
   23020:	d1fb      	bne.n	2301a <InitAes.part.0+0x92>
   23022:	6b62      	ldr	r2, [r4, #52]	; 0x34
   23024:	f022 0104 	bic.w	r1, r2, #4
   23028:	2903      	cmp	r1, #3
   2302a:	bf18      	it	ne
   2302c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   2302e:	490e      	ldr	r1, [pc, #56]	; (23068 <InitAes.part.0+0xe0>)
   23030:	ea4f 0282 	mov.w	r2, r2, lsl #2
   23034:	bf18      	it	ne
   23036:	f003 0301 	andne.w	r3, r3, #1
   2303a:	f002 021c 	and.w	r2, r2, #28
   2303e:	4313      	orrs	r3, r2
   23040:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   23044:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23046:	2b07      	cmp	r3, #7
   23048:	bf04      	itt	eq
   2304a:	2301      	moveq	r3, #1
   2304c:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   23050:	2000      	movs	r0, #0
   23052:	bd38      	pop	{r3, r4, r5, pc}
   23054:	2b01      	cmp	r3, #1
   23056:	bf0c      	ite	eq
   23058:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   2305c:	f020 0010 	bicne.w	r0, r0, #16
   23060:	f7fe fe54 	bl	21d0c <CC_HalMaskInterrupt>
   23064:	e7c4      	b.n	22ff0 <InitAes.part.0+0x68>
   23066:	bf00      	nop
   23068:	5002b000 	.word	0x5002b000

0002306c <write_invalid_key>:
   2306c:	4a09      	ldr	r2, [pc, #36]	; (23094 <write_invalid_key+0x28>)
   2306e:	4b0a      	ldr	r3, [pc, #40]	; (23098 <write_invalid_key+0x2c>)
   23070:	6811      	ldr	r1, [r2, #0]
   23072:	6809      	ldr	r1, [r1, #0]
   23074:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   23078:	6811      	ldr	r1, [r2, #0]
   2307a:	6849      	ldr	r1, [r1, #4]
   2307c:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   23080:	6811      	ldr	r1, [r2, #0]
   23082:	6889      	ldr	r1, [r1, #8]
   23084:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   23088:	6812      	ldr	r2, [r2, #0]
   2308a:	68d2      	ldr	r2, [r2, #12]
   2308c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   23090:	4770      	bx	lr
   23092:	bf00      	nop
   23094:	20000958 	.word	0x20000958
   23098:	5002b000 	.word	0x5002b000

0002309c <ProcessAesDrv>:
   2309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230a0:	b085      	sub	sp, #20
   230a2:	2900      	cmp	r1, #0
   230a4:	f000 80a3 	beq.w	231ee <ProcessAesDrv+0x152>
   230a8:	4690      	mov	r8, r2
   230aa:	2a00      	cmp	r2, #0
   230ac:	f000 809f 	beq.w	231ee <ProcessAesDrv+0x152>
   230b0:	4605      	mov	r5, r0
   230b2:	2800      	cmp	r0, #0
   230b4:	f000 813c 	beq.w	23330 <ProcessAesDrv+0x294>
   230b8:	4699      	mov	r9, r3
   230ba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   230bc:	460e      	mov	r6, r1
   230be:	2b00      	cmp	r3, #0
   230c0:	d151      	bne.n	23166 <ProcessAesDrv+0xca>
   230c2:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   230c6:	d253      	bcs.n	23170 <ProcessAesDrv+0xd4>
   230c8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   230cc:	2b04      	cmp	r3, #4
   230ce:	f000 8112 	beq.w	232f6 <ProcessAesDrv+0x25a>
   230d2:	2700      	movs	r7, #0
   230d4:	48a6      	ldr	r0, [pc, #664]	; (23370 <ProcessAesDrv+0x2d4>)
   230d6:	f04f 31ff 	mov.w	r1, #4294967295
   230da:	f7fe feb3 	bl	21e44 <CC_PalMutexLock>
   230de:	2800      	cmp	r0, #0
   230e0:	f040 80e8 	bne.w	232b4 <ProcessAesDrv+0x218>
   230e4:	2000      	movs	r0, #0
   230e6:	f7fe fedd 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   230ea:	2800      	cmp	r0, #0
   230ec:	f040 80eb 	bne.w	232c6 <ProcessAesDrv+0x22a>
   230f0:	48a0      	ldr	r0, [pc, #640]	; (23374 <ProcessAesDrv+0x2d8>)
   230f2:	2301      	movs	r3, #1
   230f4:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   230f8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   230fc:	2c00      	cmp	r4, #0
   230fe:	d1fb      	bne.n	230f8 <ProcessAesDrv+0x5c>
   23100:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   23102:	2b03      	cmp	r3, #3
   23104:	dc39      	bgt.n	2317a <ProcessAesDrv+0xde>
   23106:	2b00      	cmp	r3, #0
   23108:	da3a      	bge.n	23180 <ProcessAesDrv+0xe4>
   2310a:	4c9b      	ldr	r4, [pc, #620]	; (23378 <ProcessAesDrv+0x2dc>)
   2310c:	4a99      	ldr	r2, [pc, #612]	; (23374 <ProcessAesDrv+0x2d8>)
   2310e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   23112:	2b00      	cmp	r3, #0
   23114:	d1fb      	bne.n	2310e <ProcessAesDrv+0x72>
   23116:	2f00      	cmp	r7, #0
   23118:	f040 80e4 	bne.w	232e4 <ProcessAesDrv+0x248>
   2311c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2311e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   23120:	f023 0304 	bic.w	r3, r3, #4
   23124:	2b03      	cmp	r3, #3
   23126:	4b93      	ldr	r3, [pc, #588]	; (23374 <ProcessAesDrv+0x2d8>)
   23128:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   2312c:	d056      	beq.n	231dc <ProcessAesDrv+0x140>
   2312e:	2a01      	cmp	r2, #1
   23130:	bf0c      	ite	eq
   23132:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   23136:	f040 0020 	orrne.w	r0, r0, #32
   2313a:	f7fe fde7 	bl	21d0c <CC_HalMaskInterrupt>
   2313e:	4b8d      	ldr	r3, [pc, #564]	; (23374 <ProcessAesDrv+0x2d8>)
   23140:	2200      	movs	r2, #0
   23142:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   23146:	2001      	movs	r0, #1
   23148:	f7fe feac 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   2314c:	2800      	cmp	r0, #0
   2314e:	f040 80c5 	bne.w	232dc <ProcessAesDrv+0x240>
   23152:	4887      	ldr	r0, [pc, #540]	; (23370 <ProcessAesDrv+0x2d4>)
   23154:	f7fe fe7e 	bl	21e54 <CC_PalMutexUnlock>
   23158:	2800      	cmp	r0, #0
   2315a:	f040 80b8 	bne.w	232ce <ProcessAesDrv+0x232>
   2315e:	4620      	mov	r0, r4
   23160:	b005      	add	sp, #20
   23162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23166:	2b01      	cmp	r3, #1
   23168:	d1ae      	bne.n	230c8 <ProcessAesDrv+0x2c>
   2316a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   2316e:	d3ab      	bcc.n	230c8 <ProcessAesDrv+0x2c>
   23170:	4c82      	ldr	r4, [pc, #520]	; (2337c <ProcessAesDrv+0x2e0>)
   23172:	4620      	mov	r0, r4
   23174:	b005      	add	sp, #20
   23176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2317a:	3b06      	subs	r3, #6
   2317c:	2b01      	cmp	r3, #1
   2317e:	d8c4      	bhi.n	2310a <ProcessAesDrv+0x6e>
   23180:	6bab      	ldr	r3, [r5, #56]	; 0x38
   23182:	2b01      	cmp	r3, #1
   23184:	f200 80d2 	bhi.w	2332c <ProcessAesDrv+0x290>
   23188:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2318a:	2b01      	cmp	r3, #1
   2318c:	d834      	bhi.n	231f8 <ProcessAesDrv+0x15c>
   2318e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   23190:	2b01      	cmp	r3, #1
   23192:	f200 8122 	bhi.w	233da <ProcessAesDrv+0x33e>
   23196:	4628      	mov	r0, r5
   23198:	f7ff fef6 	bl	22f88 <InitAes.part.0>
   2319c:	4604      	mov	r4, r0
   2319e:	2800      	cmp	r0, #0
   231a0:	d1b4      	bne.n	2310c <ProcessAesDrv+0x70>
   231a2:	4628      	mov	r0, r5
   231a4:	f7ff fe9e 	bl	22ee4 <LoadAesKey>
   231a8:	4604      	mov	r4, r0
   231aa:	2800      	cmp	r0, #0
   231ac:	d1ae      	bne.n	2310c <ProcessAesDrv+0x70>
   231ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   231b0:	2b07      	cmp	r3, #7
   231b2:	d8aa      	bhi.n	2310a <ProcessAesDrv+0x6e>
   231b4:	a201      	add	r2, pc, #4	; (adr r2, 231bc <ProcessAesDrv+0x120>)
   231b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   231ba:	bf00      	nop
   231bc:	00023219 	.word	0x00023219
   231c0:	000231fd 	.word	0x000231fd
   231c4:	000233a1 	.word	0x000233a1
   231c8:	000231fd 	.word	0x000231fd
   231cc:	0002310b 	.word	0x0002310b
   231d0:	0002310b 	.word	0x0002310b
   231d4:	000233a1 	.word	0x000233a1
   231d8:	000231fd 	.word	0x000231fd
   231dc:	2a01      	cmp	r2, #1
   231de:	bf0c      	ite	eq
   231e0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   231e4:	f040 0010 	orrne.w	r0, r0, #16
   231e8:	f7fe fd90 	bl	21d0c <CC_HalMaskInterrupt>
   231ec:	e7a7      	b.n	2313e <ProcessAesDrv+0xa2>
   231ee:	4c64      	ldr	r4, [pc, #400]	; (23380 <ProcessAesDrv+0x2e4>)
   231f0:	4620      	mov	r0, r4
   231f2:	b005      	add	sp, #20
   231f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231f8:	4c62      	ldr	r4, [pc, #392]	; (23384 <ProcessAesDrv+0x2e8>)
   231fa:	e787      	b.n	2310c <ProcessAesDrv+0x70>
   231fc:	4b5d      	ldr	r3, [pc, #372]	; (23374 <ProcessAesDrv+0x2d8>)
   231fe:	682a      	ldr	r2, [r5, #0]
   23200:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   23204:	686a      	ldr	r2, [r5, #4]
   23206:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2320a:	68aa      	ldr	r2, [r5, #8]
   2320c:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   23210:	68ea      	ldr	r2, [r5, #12]
   23212:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   23216:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   23218:	6832      	ldr	r2, [r6, #0]
   2321a:	f023 0304 	bic.w	r3, r3, #4
   2321e:	2b03      	cmp	r3, #3
   23220:	d00d      	beq.n	2323e <ProcessAesDrv+0x1a2>
   23222:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   23224:	f8d8 1000 	ldr.w	r1, [r8]
   23228:	2b01      	cmp	r3, #1
   2322a:	4b52      	ldr	r3, [pc, #328]	; (23374 <ProcessAesDrv+0x2d8>)
   2322c:	bf0b      	itete	eq
   2322e:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   23232:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   23236:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   2323a:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   2323e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   23240:	2b01      	cmp	r3, #1
   23242:	4b4c      	ldr	r3, [pc, #304]	; (23374 <ProcessAesDrv+0x2d8>)
   23244:	bf0b      	itete	eq
   23246:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   2324a:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   2324e:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   23252:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   23256:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   23258:	f023 0304 	bic.w	r3, r3, #4
   2325c:	2b03      	cmp	r3, #3
   2325e:	d06a      	beq.n	23336 <ProcessAesDrv+0x29a>
   23260:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   23262:	2b01      	cmp	r3, #1
   23264:	bf0c      	ite	eq
   23266:	2080      	moveq	r0, #128	; 0x80
   23268:	2020      	movne	r0, #32
   2326a:	f7fe fd55 	bl	21d18 <CC_HalWaitInterrupt>
   2326e:	4604      	mov	r4, r0
   23270:	2800      	cmp	r0, #0
   23272:	f47f af4b 	bne.w	2310c <ProcessAesDrv+0x70>
   23276:	4b3f      	ldr	r3, [pc, #252]	; (23374 <ProcessAesDrv+0x2d8>)
   23278:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   2327c:	2c00      	cmp	r4, #0
   2327e:	d1fb      	bne.n	23278 <ProcessAesDrv+0x1dc>
   23280:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   23282:	3b01      	subs	r3, #1
   23284:	2b06      	cmp	r3, #6
   23286:	d812      	bhi.n	232ae <ProcessAesDrv+0x212>
   23288:	e8df f003 	tbb	[pc, r3]
   2328c:	11049904 	.word	0x11049904
   23290:	9911      	.short	0x9911
   23292:	04          	.byte	0x04
   23293:	00          	.byte	0x00
   23294:	4b37      	ldr	r3, [pc, #220]	; (23374 <ProcessAesDrv+0x2d8>)
   23296:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2329a:	602a      	str	r2, [r5, #0]
   2329c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   232a0:	606a      	str	r2, [r5, #4]
   232a2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   232a6:	60aa      	str	r2, [r5, #8]
   232a8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   232ac:	60eb      	str	r3, [r5, #12]
   232ae:	2301      	movs	r3, #1
   232b0:	65ab      	str	r3, [r5, #88]	; 0x58
   232b2:	e72b      	b.n	2310c <ProcessAesDrv+0x70>
   232b4:	4834      	ldr	r0, [pc, #208]	; (23388 <ProcessAesDrv+0x2ec>)
   232b6:	f7fd fe3b 	bl	20f30 <CC_PalAbort>
   232ba:	2000      	movs	r0, #0
   232bc:	f7fe fdf2 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   232c0:	2800      	cmp	r0, #0
   232c2:	f43f af15 	beq.w	230f0 <ProcessAesDrv+0x54>
   232c6:	4831      	ldr	r0, [pc, #196]	; (2338c <ProcessAesDrv+0x2f0>)
   232c8:	f7fd fe32 	bl	20f30 <CC_PalAbort>
   232cc:	e710      	b.n	230f0 <ProcessAesDrv+0x54>
   232ce:	4830      	ldr	r0, [pc, #192]	; (23390 <ProcessAesDrv+0x2f4>)
   232d0:	f7fd fe2e 	bl	20f30 <CC_PalAbort>
   232d4:	4620      	mov	r0, r4
   232d6:	b005      	add	sp, #20
   232d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   232dc:	482d      	ldr	r0, [pc, #180]	; (23394 <ProcessAesDrv+0x2f8>)
   232de:	f7fd fe27 	bl	20f30 <CC_PalAbort>
   232e2:	e736      	b.n	23152 <ProcessAesDrv+0xb6>
   232e4:	2304      	movs	r3, #4
   232e6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   232ea:	2120      	movs	r1, #32
   232ec:	f105 0010 	add.w	r0, r5, #16
   232f0:	f7fe fd90 	bl	21e14 <CC_PalMemSetZeroPlat>
   232f4:	e712      	b.n	2311c <ProcessAesDrv+0x80>
   232f6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   232f8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   232fa:	f000 f9b5 	bl	23668 <kmu_validate_slot_and_size>
   232fe:	b998      	cbnz	r0, 23328 <ProcessAesDrv+0x28c>
   23300:	4f25      	ldr	r7, [pc, #148]	; (23398 <ProcessAesDrv+0x2fc>)
   23302:	4c1c      	ldr	r4, [pc, #112]	; (23374 <ProcessAesDrv+0x2d8>)
   23304:	683b      	ldr	r3, [r7, #0]
   23306:	681b      	ldr	r3, [r3, #0]
   23308:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   2330c:	683b      	ldr	r3, [r7, #0]
   2330e:	685b      	ldr	r3, [r3, #4]
   23310:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   23314:	683b      	ldr	r3, [r7, #0]
   23316:	689b      	ldr	r3, [r3, #8]
   23318:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   2331c:	683b      	ldr	r3, [r7, #0]
   2331e:	68db      	ldr	r3, [r3, #12]
   23320:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   23324:	6b29      	ldr	r1, [r5, #48]	; 0x30
   23326:	b161      	cbz	r1, 23342 <ProcessAesDrv+0x2a6>
   23328:	2701      	movs	r7, #1
   2332a:	e6d3      	b.n	230d4 <ProcessAesDrv+0x38>
   2332c:	4c1b      	ldr	r4, [pc, #108]	; (2339c <ProcessAesDrv+0x300>)
   2332e:	e6ed      	b.n	2310c <ProcessAesDrv+0x70>
   23330:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   23334:	e713      	b.n	2315e <ProcessAesDrv+0xc2>
   23336:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   23338:	2b01      	cmp	r3, #1
   2333a:	bf0c      	ite	eq
   2333c:	2040      	moveq	r0, #64	; 0x40
   2333e:	2010      	movne	r0, #16
   23340:	e793      	b.n	2326a <ProcessAesDrv+0x1ce>
   23342:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   23344:	9301      	str	r3, [sp, #4]
   23346:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   23348:	9300      	str	r3, [sp, #0]
   2334a:	f105 0a10 	add.w	sl, r5, #16
   2334e:	f04f 0b10 	mov.w	fp, #16
   23352:	f8cd a008 	str.w	sl, [sp, #8]
   23356:	f8cd b00c 	str.w	fp, [sp, #12]
   2335a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   2335e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   23360:	f000 f9a4 	bl	236ac <kmu_derive_cmac>
   23364:	2800      	cmp	r0, #0
   23366:	d13a      	bne.n	233de <ProcessAesDrv+0x342>
   23368:	2300      	movs	r3, #0
   2336a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2336e:	e7db      	b.n	23328 <ProcessAesDrv+0x28c>
   23370:	20000968 	.word	0x20000968
   23374:	5002b000 	.word	0x5002b000
   23378:	00f10001 	.word	0x00f10001
   2337c:	00f10005 	.word	0x00f10005
   23380:	00f1000b 	.word	0x00f1000b
   23384:	00f10003 	.word	0x00f10003
   23388:	00028b00 	.word	0x00028b00
   2338c:	00028b18 	.word	0x00028b18
   23390:	00028b58 	.word	0x00028b58
   23394:	00028b38 	.word	0x00028b38
   23398:	20000958 	.word	0x20000958
   2339c:	00f10002 	.word	0x00f10002
   233a0:	4b19      	ldr	r3, [pc, #100]	; (23408 <ProcessAesDrv+0x36c>)
   233a2:	682a      	ldr	r2, [r5, #0]
   233a4:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   233a8:	686a      	ldr	r2, [r5, #4]
   233aa:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   233ae:	68aa      	ldr	r2, [r5, #8]
   233b0:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   233b4:	68ea      	ldr	r2, [r5, #12]
   233b6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   233ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   233bc:	e72c      	b.n	23218 <ProcessAesDrv+0x17c>
   233be:	4b12      	ldr	r3, [pc, #72]	; (23408 <ProcessAesDrv+0x36c>)
   233c0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   233c4:	602a      	str	r2, [r5, #0]
   233c6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   233ca:	606a      	str	r2, [r5, #4]
   233cc:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   233d0:	60aa      	str	r2, [r5, #8]
   233d2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   233d6:	60eb      	str	r3, [r5, #12]
   233d8:	e769      	b.n	232ae <ProcessAesDrv+0x212>
   233da:	4c0c      	ldr	r4, [pc, #48]	; (2340c <ProcessAesDrv+0x370>)
   233dc:	e696      	b.n	2310c <ProcessAesDrv+0x70>
   233de:	683b      	ldr	r3, [r7, #0]
   233e0:	681b      	ldr	r3, [r3, #0]
   233e2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   233e6:	683b      	ldr	r3, [r7, #0]
   233e8:	685b      	ldr	r3, [r3, #4]
   233ea:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   233ee:	683b      	ldr	r3, [r7, #0]
   233f0:	689b      	ldr	r3, [r3, #8]
   233f2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   233f6:	683b      	ldr	r3, [r7, #0]
   233f8:	68db      	ldr	r3, [r3, #12]
   233fa:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   233fe:	4659      	mov	r1, fp
   23400:	4650      	mov	r0, sl
   23402:	f7fe fd07 	bl	21e14 <CC_PalMemSetZeroPlat>
   23406:	e7af      	b.n	23368 <ProcessAesDrv+0x2cc>
   23408:	5002b000 	.word	0x5002b000
   2340c:	00f10004 	.word	0x00f10004

00023410 <FinishAesDrv>:
   23410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23414:	b301      	cbz	r1, 23458 <FinishAesDrv+0x48>
   23416:	b1fa      	cbz	r2, 23458 <FinishAesDrv+0x48>
   23418:	4604      	mov	r4, r0
   2341a:	2800      	cmp	r0, #0
   2341c:	d07c      	beq.n	23518 <FinishAesDrv+0x108>
   2341e:	461d      	mov	r5, r3
   23420:	6b43      	ldr	r3, [r0, #52]	; 0x34
   23422:	2b07      	cmp	r3, #7
   23424:	460e      	mov	r6, r1
   23426:	d01b      	beq.n	23460 <FinishAesDrv+0x50>
   23428:	b95d      	cbnz	r5, 23442 <FinishAesDrv+0x32>
   2342a:	2b03      	cmp	r3, #3
   2342c:	d110      	bne.n	23450 <FinishAesDrv+0x40>
   2342e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   23430:	b973      	cbnz	r3, 23450 <FinishAesDrv+0x40>
   23432:	f100 0364 	add.w	r3, r0, #100	; 0x64
   23436:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2343a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2343e:	600b      	str	r3, [r1, #0]
   23440:	2510      	movs	r5, #16
   23442:	462b      	mov	r3, r5
   23444:	4631      	mov	r1, r6
   23446:	4620      	mov	r0, r4
   23448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2344c:	f7ff be26 	b.w	2309c <ProcessAesDrv>
   23450:	462f      	mov	r7, r5
   23452:	4638      	mov	r0, r7
   23454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23458:	4f77      	ldr	r7, [pc, #476]	; (23638 <FinishAesDrv+0x228>)
   2345a:	4638      	mov	r0, r7
   2345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23460:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   23462:	2b00      	cmp	r3, #0
   23464:	d15b      	bne.n	2351e <FinishAesDrv+0x10e>
   23466:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2346a:	d25d      	bcs.n	23528 <FinishAesDrv+0x118>
   2346c:	b915      	cbnz	r5, 23474 <FinishAesDrv+0x64>
   2346e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   23470:	2b00      	cmp	r3, #0
   23472:	d159      	bne.n	23528 <FinishAesDrv+0x118>
   23474:	4871      	ldr	r0, [pc, #452]	; (2363c <FinishAesDrv+0x22c>)
   23476:	f04f 31ff 	mov.w	r1, #4294967295
   2347a:	f7fe fce3 	bl	21e44 <CC_PalMutexLock>
   2347e:	2800      	cmp	r0, #0
   23480:	f040 80b8 	bne.w	235f4 <FinishAesDrv+0x1e4>
   23484:	2000      	movs	r0, #0
   23486:	f7fe fd0d 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   2348a:	2800      	cmp	r0, #0
   2348c:	f040 80ae 	bne.w	235ec <FinishAesDrv+0x1dc>
   23490:	4a6b      	ldr	r2, [pc, #428]	; (23640 <FinishAesDrv+0x230>)
   23492:	2301      	movs	r3, #1
   23494:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   23498:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2349c:	2b00      	cmp	r3, #0
   2349e:	d1fb      	bne.n	23498 <FinishAesDrv+0x88>
   234a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   234a2:	2b03      	cmp	r3, #3
   234a4:	dd20      	ble.n	234e8 <FinishAesDrv+0xd8>
   234a6:	3b06      	subs	r3, #6
   234a8:	2b01      	cmp	r3, #1
   234aa:	d81f      	bhi.n	234ec <FinishAesDrv+0xdc>
   234ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   234ae:	2b01      	cmp	r3, #1
   234b0:	d83c      	bhi.n	2352c <FinishAesDrv+0x11c>
   234b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   234b4:	2b01      	cmp	r3, #1
   234b6:	f200 80a5 	bhi.w	23604 <FinishAesDrv+0x1f4>
   234ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
   234bc:	2b01      	cmp	r3, #1
   234be:	f200 80a3 	bhi.w	23608 <FinishAesDrv+0x1f8>
   234c2:	4620      	mov	r0, r4
   234c4:	f7ff fd60 	bl	22f88 <InitAes.part.0>
   234c8:	4607      	mov	r7, r0
   234ca:	b980      	cbnz	r0, 234ee <FinishAesDrv+0xde>
   234cc:	4620      	mov	r0, r4
   234ce:	f7ff fd09 	bl	22ee4 <LoadAesKey>
   234d2:	4607      	mov	r7, r0
   234d4:	b958      	cbnz	r0, 234ee <FinishAesDrv+0xde>
   234d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   234d8:	2b07      	cmp	r3, #7
   234da:	d807      	bhi.n	234ec <FinishAesDrv+0xdc>
   234dc:	e8df f003 	tbb	[pc, r3]
   234e0:	285c2835 	.word	0x285c2835
   234e4:	285c0606 	.word	0x285c0606
   234e8:	2b00      	cmp	r3, #0
   234ea:	dadf      	bge.n	234ac <FinishAesDrv+0x9c>
   234ec:	4f55      	ldr	r7, [pc, #340]	; (23644 <FinishAesDrv+0x234>)
   234ee:	4a54      	ldr	r2, [pc, #336]	; (23640 <FinishAesDrv+0x230>)
   234f0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   234f4:	2b00      	cmp	r3, #0
   234f6:	d1fb      	bne.n	234f0 <FinishAesDrv+0xe0>
   234f8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   234fc:	2001      	movs	r0, #1
   234fe:	f7fe fcd1 	bl	21ea4 <CC_PalPowerSaveModeSelect>
   23502:	2800      	cmp	r0, #0
   23504:	d17a      	bne.n	235fc <FinishAesDrv+0x1ec>
   23506:	484d      	ldr	r0, [pc, #308]	; (2363c <FinishAesDrv+0x22c>)
   23508:	f7fe fca4 	bl	21e54 <CC_PalMutexUnlock>
   2350c:	2800      	cmp	r0, #0
   2350e:	d0a0      	beq.n	23452 <FinishAesDrv+0x42>
   23510:	484d      	ldr	r0, [pc, #308]	; (23648 <FinishAesDrv+0x238>)
   23512:	f7fd fd0d 	bl	20f30 <CC_PalAbort>
   23516:	e79c      	b.n	23452 <FinishAesDrv+0x42>
   23518:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2351c:	e799      	b.n	23452 <FinishAesDrv+0x42>
   2351e:	2b01      	cmp	r3, #1
   23520:	d1a4      	bne.n	2346c <FinishAesDrv+0x5c>
   23522:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   23526:	d3a1      	bcc.n	2346c <FinishAesDrv+0x5c>
   23528:	4f48      	ldr	r7, [pc, #288]	; (2364c <FinishAesDrv+0x23c>)
   2352a:	e792      	b.n	23452 <FinishAesDrv+0x42>
   2352c:	4f48      	ldr	r7, [pc, #288]	; (23650 <FinishAesDrv+0x240>)
   2352e:	e7de      	b.n	234ee <FinishAesDrv+0xde>
   23530:	4b43      	ldr	r3, [pc, #268]	; (23640 <FinishAesDrv+0x230>)
   23532:	6822      	ldr	r2, [r4, #0]
   23534:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   23538:	6862      	ldr	r2, [r4, #4]
   2353a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2353e:	68a2      	ldr	r2, [r4, #8]
   23540:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   23544:	68e2      	ldr	r2, [r4, #12]
   23546:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2354a:	4b3d      	ldr	r3, [pc, #244]	; (23640 <FinishAesDrv+0x230>)
   2354c:	2201      	movs	r2, #1
   2354e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   23552:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   23556:	2d00      	cmp	r5, #0
   23558:	d158      	bne.n	2360c <FinishAesDrv+0x1fc>
   2355a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   2355c:	b909      	cbnz	r1, 23562 <FinishAesDrv+0x152>
   2355e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   23562:	4b37      	ldr	r3, [pc, #220]	; (23640 <FinishAesDrv+0x230>)
   23564:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   23568:	2f00      	cmp	r7, #0
   2356a:	d1fb      	bne.n	23564 <FinishAesDrv+0x154>
   2356c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2356e:	3b01      	subs	r3, #1
   23570:	2b06      	cmp	r3, #6
   23572:	d8bc      	bhi.n	234ee <FinishAesDrv+0xde>
   23574:	a201      	add	r2, pc, #4	; (adr r2, 2357c <FinishAesDrv+0x16c>)
   23576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2357a:	bf00      	nop
   2357c:	000235b5 	.word	0x000235b5
   23580:	000235d1 	.word	0x000235d1
   23584:	000235b5 	.word	0x000235b5
   23588:	000234ef 	.word	0x000234ef
   2358c:	000234ef 	.word	0x000234ef
   23590:	000235d1 	.word	0x000235d1
   23594:	000235b5 	.word	0x000235b5
   23598:	4b29      	ldr	r3, [pc, #164]	; (23640 <FinishAesDrv+0x230>)
   2359a:	6822      	ldr	r2, [r4, #0]
   2359c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   235a0:	6862      	ldr	r2, [r4, #4]
   235a2:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   235a6:	68a2      	ldr	r2, [r4, #8]
   235a8:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   235ac:	68e2      	ldr	r2, [r4, #12]
   235ae:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   235b2:	e7ca      	b.n	2354a <FinishAesDrv+0x13a>
   235b4:	4b22      	ldr	r3, [pc, #136]	; (23640 <FinishAesDrv+0x230>)
   235b6:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   235ba:	6022      	str	r2, [r4, #0]
   235bc:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   235c0:	6062      	str	r2, [r4, #4]
   235c2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   235c6:	60a2      	str	r2, [r4, #8]
   235c8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   235cc:	60e3      	str	r3, [r4, #12]
   235ce:	e78e      	b.n	234ee <FinishAesDrv+0xde>
   235d0:	4b1b      	ldr	r3, [pc, #108]	; (23640 <FinishAesDrv+0x230>)
   235d2:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   235d6:	6022      	str	r2, [r4, #0]
   235d8:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   235dc:	6062      	str	r2, [r4, #4]
   235de:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   235e2:	60a2      	str	r2, [r4, #8]
   235e4:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   235e8:	60e3      	str	r3, [r4, #12]
   235ea:	e780      	b.n	234ee <FinishAesDrv+0xde>
   235ec:	4819      	ldr	r0, [pc, #100]	; (23654 <FinishAesDrv+0x244>)
   235ee:	f7fd fc9f 	bl	20f30 <CC_PalAbort>
   235f2:	e74d      	b.n	23490 <FinishAesDrv+0x80>
   235f4:	4818      	ldr	r0, [pc, #96]	; (23658 <FinishAesDrv+0x248>)
   235f6:	f7fd fc9b 	bl	20f30 <CC_PalAbort>
   235fa:	e743      	b.n	23484 <FinishAesDrv+0x74>
   235fc:	4817      	ldr	r0, [pc, #92]	; (2365c <FinishAesDrv+0x24c>)
   235fe:	f7fd fc97 	bl	20f30 <CC_PalAbort>
   23602:	e780      	b.n	23506 <FinishAesDrv+0xf6>
   23604:	4f16      	ldr	r7, [pc, #88]	; (23660 <FinishAesDrv+0x250>)
   23606:	e772      	b.n	234ee <FinishAesDrv+0xde>
   23608:	4f16      	ldr	r7, [pc, #88]	; (23664 <FinishAesDrv+0x254>)
   2360a:	e770      	b.n	234ee <FinishAesDrv+0xde>
   2360c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   2360e:	6832      	ldr	r2, [r6, #0]
   23610:	2901      	cmp	r1, #1
   23612:	d00a      	beq.n	2362a <FinishAesDrv+0x21a>
   23614:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   23618:	2010      	movs	r0, #16
   2361a:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2361e:	f7fe fb7b 	bl	21d18 <CC_HalWaitInterrupt>
   23622:	4607      	mov	r7, r0
   23624:	2800      	cmp	r0, #0
   23626:	d09c      	beq.n	23562 <FinishAesDrv+0x152>
   23628:	e761      	b.n	234ee <FinishAesDrv+0xde>
   2362a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2362e:	2040      	movs	r0, #64	; 0x40
   23630:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   23634:	e7f3      	b.n	2361e <FinishAesDrv+0x20e>
   23636:	bf00      	nop
   23638:	00f1000b 	.word	0x00f1000b
   2363c:	20000968 	.word	0x20000968
   23640:	5002b000 	.word	0x5002b000
   23644:	00f10001 	.word	0x00f10001
   23648:	00028b58 	.word	0x00028b58
   2364c:	00f10005 	.word	0x00f10005
   23650:	00f10002 	.word	0x00f10002
   23654:	00028b18 	.word	0x00028b18
   23658:	00028b00 	.word	0x00028b00
   2365c:	00028b38 	.word	0x00028b38
   23660:	00f10003 	.word	0x00f10003
   23664:	00f10004 	.word	0x00f10004

00023668 <kmu_validate_slot_and_size>:
   23668:	b921      	cbnz	r1, 23674 <kmu_validate_slot_and_size+0xc>
   2366a:	4b03      	ldr	r3, [pc, #12]	; (23678 <kmu_validate_slot_and_size+0x10>)
   2366c:	2800      	cmp	r0, #0
   2366e:	bf18      	it	ne
   23670:	4618      	movne	r0, r3
   23672:	4770      	bx	lr
   23674:	4801      	ldr	r0, [pc, #4]	; (2367c <kmu_validate_slot_and_size+0x14>)
   23676:	4770      	bx	lr
   23678:	00f70001 	.word	0x00f70001
   2367c:	00f70003 	.word	0x00f70003

00023680 <kmu_validate_kdr_slot_and_size>:
   23680:	b921      	cbnz	r1, 2368c <kmu_validate_kdr_slot_and_size+0xc>
   23682:	4b03      	ldr	r3, [pc, #12]	; (23690 <kmu_validate_kdr_slot_and_size+0x10>)
   23684:	2800      	cmp	r0, #0
   23686:	bf18      	it	ne
   23688:	4618      	movne	r0, r3
   2368a:	4770      	bx	lr
   2368c:	4801      	ldr	r0, [pc, #4]	; (23694 <kmu_validate_kdr_slot_and_size+0x14>)
   2368e:	4770      	bx	lr
   23690:	00f70001 	.word	0x00f70001
   23694:	00f70003 	.word	0x00f70003

00023698 <kmu_use_kdr_key>:
   23698:	4b03      	ldr	r3, [pc, #12]	; (236a8 <kmu_use_kdr_key+0x10>)
   2369a:	2000      	movs	r0, #0
   2369c:	2201      	movs	r2, #1
   2369e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   236a2:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   236a6:	4770      	bx	lr
   236a8:	5002b000 	.word	0x5002b000

000236ac <kmu_derive_cmac>:
   236ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   236b0:	b0cc      	sub	sp, #304	; 0x130
   236b2:	2400      	movs	r4, #0
   236b4:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   236b6:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   236ba:	4682      	mov	sl, r0
   236bc:	4689      	mov	r9, r1
   236be:	4616      	mov	r6, r2
   236c0:	4621      	mov	r1, r4
   236c2:	2274      	movs	r2, #116	; 0x74
   236c4:	a80e      	add	r0, sp, #56	; 0x38
   236c6:	461f      	mov	r7, r3
   236c8:	f003 fe86 	bl	273d8 <memset>
   236cc:	2280      	movs	r2, #128	; 0x80
   236ce:	4621      	mov	r1, r4
   236d0:	a82c      	add	r0, sp, #176	; 0xb0
   236d2:	942b      	str	r4, [sp, #172]	; 0xac
   236d4:	f003 fe80 	bl	273d8 <memset>
   236d8:	2384      	movs	r3, #132	; 0x84
   236da:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   236de:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   236e2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   236e6:	9305      	str	r3, [sp, #20]
   236e8:	d863      	bhi.n	237b2 <kmu_derive_cmac+0x106>
   236ea:	f7ff fcbf 	bl	2306c <write_invalid_key>
   236ee:	ab05      	add	r3, sp, #20
   236f0:	4630      	mov	r0, r6
   236f2:	ae2b      	add	r6, sp, #172	; 0xac
   236f4:	9301      	str	r3, [sp, #4]
   236f6:	9502      	str	r5, [sp, #8]
   236f8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   236fc:	4639      	mov	r1, r7
   236fe:	9600      	str	r6, [sp, #0]
   23700:	f000 f862 	bl	237c8 <UtilCmacBuildDataForDerivation>
   23704:	2800      	cmp	r0, #0
   23706:	d14f      	bne.n	237a8 <kmu_derive_cmac+0xfc>
   23708:	2303      	movs	r3, #3
   2370a:	f88d 3013 	strb.w	r3, [sp, #19]
   2370e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   23712:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   23716:	2307      	movs	r3, #7
   23718:	2200      	movs	r2, #0
   2371a:	901c      	str	r0, [sp, #112]	; 0x70
   2371c:	2110      	movs	r1, #16
   2371e:	a80e      	add	r0, sp, #56	; 0x38
   23720:	931b      	str	r3, [sp, #108]	; 0x6c
   23722:	2401      	movs	r4, #1
   23724:	2301      	movs	r3, #1
   23726:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2372a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   2372e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   23732:	9426      	str	r4, [sp, #152]	; 0x98
   23734:	f10d 0920 	add.w	r9, sp, #32
   23738:	f7fe fb6c 	bl	21e14 <CC_PalMemSetZeroPlat>
   2373c:	2210      	movs	r2, #16
   2373e:	9200      	str	r2, [sp, #0]
   23740:	9905      	ldr	r1, [sp, #20]
   23742:	f8cd 9004 	str.w	r9, [sp, #4]
   23746:	ab0a      	add	r3, sp, #40	; 0x28
   23748:	4630      	mov	r0, r6
   2374a:	aa06      	add	r2, sp, #24
   2374c:	f7ff fa1e 	bl	22b8c <SetDataBuffersInfo>
   23750:	4607      	mov	r7, r0
   23752:	b170      	cbz	r0, 23772 <kmu_derive_cmac+0xc6>
   23754:	e01d      	b.n	23792 <kmu_derive_cmac+0xe6>
   23756:	a90e      	add	r1, sp, #56	; 0x38
   23758:	eb08 0007 	add.w	r0, r8, r7
   2375c:	f7fe fb56 	bl	21e0c <CC_PalMemCopyPlat>
   23760:	2110      	movs	r1, #16
   23762:	a80e      	add	r0, sp, #56	; 0x38
   23764:	f7fe fb56 	bl	21e14 <CC_PalMemSetZeroPlat>
   23768:	3401      	adds	r4, #1
   2376a:	1bad      	subs	r5, r5, r6
   2376c:	4437      	add	r7, r6
   2376e:	b2e4      	uxtb	r4, r4
   23770:	d024      	beq.n	237bc <kmu_derive_cmac+0x110>
   23772:	2d10      	cmp	r5, #16
   23774:	464a      	mov	r2, r9
   23776:	9b05      	ldr	r3, [sp, #20]
   23778:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2377c:	a906      	add	r1, sp, #24
   2377e:	a80e      	add	r0, sp, #56	; 0x38
   23780:	462e      	mov	r6, r5
   23782:	bf28      	it	cs
   23784:	2610      	movcs	r6, #16
   23786:	f7ff fe43 	bl	23410 <FinishAesDrv>
   2378a:	4632      	mov	r2, r6
   2378c:	2800      	cmp	r0, #0
   2378e:	d0e2      	beq.n	23756 <kmu_derive_cmac+0xaa>
   23790:	4607      	mov	r7, r0
   23792:	a80e      	add	r0, sp, #56	; 0x38
   23794:	2274      	movs	r2, #116	; 0x74
   23796:	2100      	movs	r1, #0
   23798:	f7fe fb3a 	bl	21e10 <CC_PalMemSetPlat>
   2379c:	f7ff fc66 	bl	2306c <write_invalid_key>
   237a0:	4638      	mov	r0, r7
   237a2:	b04c      	add	sp, #304	; 0x130
   237a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   237a8:	4f05      	ldr	r7, [pc, #20]	; (237c0 <kmu_derive_cmac+0x114>)
   237aa:	4638      	mov	r0, r7
   237ac:	b04c      	add	sp, #304	; 0x130
   237ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   237b2:	4f04      	ldr	r7, [pc, #16]	; (237c4 <kmu_derive_cmac+0x118>)
   237b4:	4638      	mov	r0, r7
   237b6:	b04c      	add	sp, #304	; 0x130
   237b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   237bc:	462f      	mov	r7, r5
   237be:	e7e8      	b.n	23792 <kmu_derive_cmac+0xe6>
   237c0:	00f1000e 	.word	0x00f1000e
   237c4:	00f1000f 	.word	0x00f1000f

000237c8 <UtilCmacBuildDataForDerivation>:
   237c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   237cc:	b082      	sub	sp, #8
   237ce:	2600      	movs	r6, #0
   237d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   237d2:	9601      	str	r6, [sp, #4]
   237d4:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   237d8:	d841      	bhi.n	2385e <UtilCmacBuildDataForDerivation+0x96>
   237da:	00e4      	lsls	r4, r4, #3
   237dc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   237e0:	460d      	mov	r5, r1
   237e2:	f101 31ff 	add.w	r1, r1, #4294967295
   237e6:	4617      	mov	r7, r2
   237e8:	bf34      	ite	cc
   237ea:	2203      	movcc	r2, #3
   237ec:	2204      	movcs	r2, #4
   237ee:	293f      	cmp	r1, #63	; 0x3f
   237f0:	9200      	str	r2, [sp, #0]
   237f2:	d834      	bhi.n	2385e <UtilCmacBuildDataForDerivation+0x96>
   237f4:	2800      	cmp	r0, #0
   237f6:	d032      	beq.n	2385e <UtilCmacBuildDataForDerivation+0x96>
   237f8:	4698      	mov	r8, r3
   237fa:	b113      	cbz	r3, 23802 <UtilCmacBuildDataForDerivation+0x3a>
   237fc:	b37f      	cbz	r7, 2385e <UtilCmacBuildDataForDerivation+0x96>
   237fe:	2b40      	cmp	r3, #64	; 0x40
   23800:	d82d      	bhi.n	2385e <UtilCmacBuildDataForDerivation+0x96>
   23802:	9b08      	ldr	r3, [sp, #32]
   23804:	b35b      	cbz	r3, 2385e <UtilCmacBuildDataForDerivation+0x96>
   23806:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23808:	681e      	ldr	r6, [r3, #0]
   2380a:	b346      	cbz	r6, 2385e <UtilCmacBuildDataForDerivation+0x96>
   2380c:	eb05 0108 	add.w	r1, r5, r8
   23810:	440a      	add	r2, r1
   23812:	4296      	cmp	r6, r2
   23814:	d323      	bcc.n	2385e <UtilCmacBuildDataForDerivation+0x96>
   23816:	9b08      	ldr	r3, [sp, #32]
   23818:	462a      	mov	r2, r5
   2381a:	4601      	mov	r1, r0
   2381c:	1c58      	adds	r0, r3, #1
   2381e:	f7fe faf5 	bl	21e0c <CC_PalMemCopyPlat>
   23822:	9b08      	ldr	r3, [sp, #32]
   23824:	1cae      	adds	r6, r5, #2
   23826:	441d      	add	r5, r3
   23828:	2200      	movs	r2, #0
   2382a:	706a      	strb	r2, [r5, #1]
   2382c:	f1b8 0f00 	cmp.w	r8, #0
   23830:	d11f      	bne.n	23872 <UtilCmacBuildDataForDerivation+0xaa>
   23832:	9b08      	ldr	r3, [sp, #32]
   23834:	9400      	str	r4, [sp, #0]
   23836:	2cff      	cmp	r4, #255	; 0xff
   23838:	eb03 0006 	add.w	r0, r3, r6
   2383c:	d913      	bls.n	23866 <UtilCmacBuildDataForDerivation+0x9e>
   2383e:	0223      	lsls	r3, r4, #8
   23840:	b29b      	uxth	r3, r3
   23842:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   23846:	2202      	movs	r2, #2
   23848:	a901      	add	r1, sp, #4
   2384a:	9401      	str	r4, [sp, #4]
   2384c:	f7fe fade 	bl	21e0c <CC_PalMemCopyPlat>
   23850:	3602      	adds	r6, #2
   23852:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23854:	2000      	movs	r0, #0
   23856:	601e      	str	r6, [r3, #0]
   23858:	b002      	add	sp, #8
   2385a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2385e:	4808      	ldr	r0, [pc, #32]	; (23880 <UtilCmacBuildDataForDerivation+0xb8>)
   23860:	b002      	add	sp, #8
   23862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23866:	2201      	movs	r2, #1
   23868:	4669      	mov	r1, sp
   2386a:	f7fe facf 	bl	21e0c <CC_PalMemCopyPlat>
   2386e:	3601      	adds	r6, #1
   23870:	e7ef      	b.n	23852 <UtilCmacBuildDataForDerivation+0x8a>
   23872:	1998      	adds	r0, r3, r6
   23874:	4642      	mov	r2, r8
   23876:	4639      	mov	r1, r7
   23878:	f7fe fac8 	bl	21e0c <CC_PalMemCopyPlat>
   2387c:	4446      	add	r6, r8
   2387e:	e7d8      	b.n	23832 <UtilCmacBuildDataForDerivation+0x6a>
   23880:	80000006 	.word	0x80000006

00023884 <CC_PalDataBufferAttrGet>:
   23884:	2000      	movs	r0, #0
   23886:	7018      	strb	r0, [r3, #0]
   23888:	4770      	bx	lr
   2388a:	bf00      	nop

0002388c <send_data_thread>:
{
   2388c:	b530      	push	{r4, r5, lr}
   2388e:	b089      	sub	sp, #36	; 0x24
		gss_send_gps_indicate(getGPSData());
   23890:	ac02      	add	r4, sp, #8
   23892:	ad06      	add	r5, sp, #24
   23894:	4620      	mov	r0, r4
   23896:	f7ef fbd1 	bl	1303c <getGPSData>
   2389a:	e895 0003 	ldmia.w	r5, {r0, r1}
   2389e:	e88d 0003 	stmia.w	sp, {r0, r1}
   238a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   238a6:	f7ef fadb 	bl	12e60 <gss_send_gps_indicate>
		gss_send_mob_indicate(getMOBStatus());
   238aa:	f000 f808 	bl	238be <getMOBStatus>
   238ae:	f7ef fb0f 	bl	12ed0 <gss_send_mob_indicate>
	return z_impl_k_sleep(timeout);
   238b2:	2100      	movs	r1, #0
   238b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   238b8:	f7fb f936 	bl	1eb28 <z_impl_k_sleep>
	while (1)
   238bc:	e7ea      	b.n	23894 <send_data_thread+0x8>

000238be <getMOBStatus>:
#include "mob.h"

// Dummy function that returns a humidity value
bool getMOBStatus(void) {
	return true;
}
   238be:	2001      	movs	r0, #1
   238c0:	4770      	bx	lr

000238c2 <cbpprintf_external>:
{
   238c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   238c6:	4606      	mov	r6, r0
   238c8:	460d      	mov	r5, r1
   238ca:	4617      	mov	r7, r2
	if (buf == NULL) {
   238cc:	4698      	mov	r8, r3
   238ce:	b32b      	cbz	r3, 2391c <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   238d0:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   238d4:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   238d8:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   238da:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   238dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   238e0:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   238e4:	441c      	add	r4, r3
   238e6:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   238e8:	f04f 0a00 	mov.w	sl, #0
   238ec:	45ca      	cmp	sl, r9
   238ee:	d309      	bcc.n	23904 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   238f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   238f4:	f108 0308 	add.w	r3, r8, #8
   238f8:	4639      	mov	r1, r7
   238fa:	4630      	mov	r0, r6
   238fc:	46ac      	mov	ip, r5
}
   238fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   23902:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   23904:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   23908:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2390c:	4620      	mov	r0, r4
   2390e:	f7e9 f8e5 	bl	cadc <strlen>
   23912:	3001      	adds	r0, #1
   23914:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   23916:	f10a 0a01 	add.w	sl, sl, #1
   2391a:	e7e7      	b.n	238ec <cbpprintf_external+0x2a>
}
   2391c:	f06f 0015 	mvn.w	r0, #21
   23920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023924 <is_ptr>:
{
   23924:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   23926:	2500      	movs	r5, #0
{
   23928:	4602      	mov	r2, r0
	bool mod = false;
   2392a:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2392c:	4614      	mov	r4, r2
   2392e:	f814 3b01 	ldrb.w	r3, [r4], #1
   23932:	b90b      	cbnz	r3, 23938 <is_ptr+0x14>
					return false;
   23934:	4618      	mov	r0, r3
   23936:	e009      	b.n	2394c <is_ptr+0x28>
		if (mod) {
   23938:	b198      	cbz	r0, 23962 <is_ptr+0x3e>
			if (cnt == n) {
   2393a:	428d      	cmp	r5, r1
   2393c:	d107      	bne.n	2394e <is_ptr+0x2a>
				if (c == 'p') {
   2393e:	2b70      	cmp	r3, #112	; 0x70
   23940:	d004      	beq.n	2394c <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   23942:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   23946:	2a3a      	cmp	r2, #58	; 0x3a
   23948:	d80b      	bhi.n	23962 <is_ptr+0x3e>
					return false;
   2394a:	2000      	movs	r0, #0
}
   2394c:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2394e:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   23952:	2e3a      	cmp	r6, #58	; 0x3a
   23954:	d805      	bhi.n	23962 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   23956:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   23958:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2395a:	1c94      	adds	r4, r2, #2
   2395c:	2b00      	cmp	r3, #0
   2395e:	d0e9      	beq.n	23934 <is_ptr+0x10>
   23960:	2000      	movs	r0, #0
		if (c == '%') {
   23962:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   23964:	bf08      	it	eq
   23966:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   2396a:	4622      	mov	r2, r4
   2396c:	e7de      	b.n	2392c <is_ptr+0x8>

0002396e <arch_printk_char_out>:
}
   2396e:	2000      	movs	r0, #0
   23970:	4770      	bx	lr

00023972 <str_out>:
{
   23972:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   23974:	688a      	ldr	r2, [r1, #8]
   23976:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   23978:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2397a:	b114      	cbz	r4, 23982 <str_out+0x10>
   2397c:	684b      	ldr	r3, [r1, #4]
   2397e:	4293      	cmp	r3, r2
   23980:	dc01      	bgt.n	23986 <str_out+0x14>
		ctx->count++;
   23982:	608d      	str	r5, [r1, #8]
}
   23984:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   23986:	3b01      	subs	r3, #1
   23988:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2398a:	bf08      	it	eq
   2398c:	2200      	moveq	r2, #0
   2398e:	608d      	str	r5, [r1, #8]
   23990:	bf0c      	ite	eq
   23992:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   23994:	54a0      	strbne	r0, [r4, r2]
   23996:	e7f5      	b.n	23984 <str_out+0x12>

00023998 <vprintk>:
		z_log_vprintk(fmt, ap);
   23998:	f000 bd42 	b.w	24420 <z_log_vprintk>

0002399c <printk>:
{
   2399c:	b40f      	push	{r0, r1, r2, r3}
   2399e:	b507      	push	{r0, r1, r2, lr}
   239a0:	a904      	add	r1, sp, #16
   239a2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   239a6:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   239a8:	f000 fd3a 	bl	24420 <z_log_vprintk>
}
   239ac:	b003      	add	sp, #12
   239ae:	f85d eb04 	ldr.w	lr, [sp], #4
   239b2:	b004      	add	sp, #16
   239b4:	4770      	bx	lr

000239b6 <snprintk>:
{
   239b6:	b40c      	push	{r2, r3}
   239b8:	b507      	push	{r0, r1, r2, lr}
   239ba:	ab04      	add	r3, sp, #16
   239bc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   239c0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   239c2:	f7ef feff 	bl	137c4 <vsnprintk>
}
   239c6:	b003      	add	sp, #12
   239c8:	f85d eb04 	ldr.w	lr, [sp], #4
   239cc:	b002      	add	sp, #8
   239ce:	4770      	bx	lr

000239d0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   239d0:	4604      	mov	r4, r0
   239d2:	b508      	push	{r3, lr}
   239d4:	4608      	mov	r0, r1
   239d6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   239d8:	461a      	mov	r2, r3
   239da:	47a0      	blx	r4
	return z_impl_z_current_get();
   239dc:	f7fb f8be 	bl	1eb5c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   239e0:	f7f1 ff7e 	bl	158e0 <z_impl_k_thread_abort>

000239e4 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   239e4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   239e8:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   239ea:	0840      	lsrs	r0, r0, #1
   239ec:	4770      	bx	lr

000239ee <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   239ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   239f0:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   239f2:	f7ff fff7 	bl	239e4 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   239f6:	fab0 f080 	clz	r0, r0
   239fa:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   239fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   23a02:	00ca      	lsls	r2, r1, #3
   23a04:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   23a08:	1d17      	adds	r7, r2, #4
{
   23a0a:	460c      	mov	r4, r1
   23a0c:	3206      	adds	r2, #6
   23a0e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   23a10:	b956      	cbnz	r6, 23a28 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   23a12:	2101      	movs	r1, #1
   23a14:	fa01 f000 	lsl.w	r0, r1, r0
   23a18:	68d9      	ldr	r1, [r3, #12]
   23a1a:	4301      	orrs	r1, r0
   23a1c:	60d9      	str	r1, [r3, #12]
		b->next = c;
   23a1e:	f8cc 4010 	str.w	r4, [ip, #16]
   23a22:	53dd      	strh	r5, [r3, r7]
   23a24:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   23a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   23a28:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   23a2a:	3104      	adds	r1, #4
   23a2c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   23a2e:	53d8      	strh	r0, [r3, r7]
   23a30:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23a34:	529e      	strh	r6, [r3, r2]
   23a36:	80c5      	strh	r5, [r0, #6]
   23a38:	525d      	strh	r5, [r3, r1]
   23a3a:	e7f4      	b.n	23a26 <free_list_add+0x38>

00023a3c <free_list_remove_bidx>:
{
   23a3c:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   23a3e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   23a42:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   23a44:	4299      	cmp	r1, r3
   23a46:	f102 0104 	add.w	r1, r2, #4
   23a4a:	d10a      	bne.n	23a62 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   23a4c:	2301      	movs	r3, #1
   23a4e:	fa03 f202 	lsl.w	r2, r3, r2
   23a52:	68c3      	ldr	r3, [r0, #12]
   23a54:	ea23 0302 	bic.w	r3, r3, r2
   23a58:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   23a5a:	2300      	movs	r3, #0
   23a5c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   23a60:	bd10      	pop	{r4, pc}
   23a62:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   23a64:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   23a68:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   23a6c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   23a70:	80cb      	strh	r3, [r1, #6]
   23a72:	8082      	strh	r2, [r0, #4]
}
   23a74:	e7f4      	b.n	23a60 <free_list_remove_bidx+0x24>

00023a76 <free_list_remove>:
{
   23a76:	b508      	push	{r3, lr}
   23a78:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   23a7a:	f7ff ffb3 	bl	239e4 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   23a7e:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   23a82:	f1c2 021f 	rsb	r2, r2, #31
   23a86:	4618      	mov	r0, r3
}
   23a88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   23a8c:	f7ff bfd6 	b.w	23a3c <free_list_remove_bidx>

00023a90 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   23a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23a94:	fab1 f581 	clz	r5, r1
   23a98:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   23a9c:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   23aa0:	4603      	mov	r3, r0
	if (b->next) {
   23aa2:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   23aa6:	460e      	mov	r6, r1
	if (b->next) {
   23aa8:	b1c2      	cbz	r2, 23adc <alloc_chunk+0x4c>
   23aaa:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   23aac:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   23ab0:	4618      	mov	r0, r3
   23ab2:	4621      	mov	r1, r4
   23ab4:	f7ff ff96 	bl	239e4 <chunk_size>
   23ab8:	42b0      	cmp	r0, r6
   23aba:	d306      	bcc.n	23aca <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   23abc:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   23abe:	4618      	mov	r0, r3
   23ac0:	f7ff ffbc 	bl	23a3c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   23ac4:	4620      	mov	r0, r4
   23ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   23aca:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   23ace:	3f01      	subs	r7, #1
   23ad0:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   23ad2:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   23ad6:	d001      	beq.n	23adc <alloc_chunk+0x4c>
   23ad8:	4282      	cmp	r2, r0
   23ada:	d1e7      	bne.n	23aac <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   23adc:	f1c5 0220 	rsb	r2, r5, #32
   23ae0:	f04f 34ff 	mov.w	r4, #4294967295
   23ae4:	4094      	lsls	r4, r2
   23ae6:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   23ae8:	4014      	ands	r4, r2
   23aea:	d0eb      	beq.n	23ac4 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   23aec:	fa94 f2a4 	rbit	r2, r4
   23af0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23af4:	1d11      	adds	r1, r2, #4
   23af6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   23afa:	4621      	mov	r1, r4
   23afc:	e7df      	b.n	23abe <alloc_chunk+0x2e>

00023afe <merge_chunks>:
{
   23afe:	b538      	push	{r3, r4, r5, lr}
   23b00:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23b02:	f7ff ff6f 	bl	239e4 <chunk_size>
{
   23b06:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23b08:	4604      	mov	r4, r0
   23b0a:	4611      	mov	r1, r2
   23b0c:	4618      	mov	r0, r3
   23b0e:	f7ff ff69 	bl	239e4 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   23b12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   23b16:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23b18:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   23b1a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   23b1c:	4618      	mov	r0, r3
   23b1e:	f7ff ff61 	bl	239e4 <chunk_size>
	void *cmem = &buf[c];
   23b22:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23b24:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   23b28:	bd38      	pop	{r3, r4, r5, pc}

00023b2a <split_chunks>:
{
   23b2a:	b538      	push	{r3, r4, r5, lr}
   23b2c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   23b2e:	f7ff ff59 	bl	239e4 <chunk_size>
{
   23b32:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   23b34:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   23b36:	1a51      	subs	r1, r2, r1
   23b38:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   23b3c:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23b3e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   23b40:	8060      	strh	r0, [r4, #2]
   23b42:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23b46:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   23b48:	8044      	strh	r4, [r0, #2]
   23b4a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   23b4e:	4618      	mov	r0, r3
   23b50:	4611      	mov	r1, r2
   23b52:	f7ff ff47 	bl	239e4 <chunk_size>
	void *cmem = &buf[c];
   23b56:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23b58:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   23b5c:	bd38      	pop	{r3, r4, r5, pc}

00023b5e <free_chunk>:
{
   23b5e:	b538      	push	{r3, r4, r5, lr}
   23b60:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   23b62:	f7ff ff3f 	bl	239e4 <chunk_size>
   23b66:	460c      	mov	r4, r1
   23b68:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   23b6a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23b6e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   23b70:	07da      	lsls	r2, r3, #31
   23b72:	d40a      	bmi.n	23b8a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   23b74:	4628      	mov	r0, r5
   23b76:	f7ff ff7e 	bl	23a76 <free_list_remove>
	return c + chunk_size(h, c);
   23b7a:	4621      	mov	r1, r4
   23b7c:	4628      	mov	r0, r5
   23b7e:	f7ff ff31 	bl	239e4 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   23b82:	1822      	adds	r2, r4, r0
   23b84:	4628      	mov	r0, r5
   23b86:	f7ff ffba 	bl	23afe <merge_chunks>
		return ((uint16_t *)cmem)[f];
   23b8a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23b8e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   23b90:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23b94:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   23b96:	07db      	lsls	r3, r3, #31
   23b98:	d40c      	bmi.n	23bb4 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   23b9a:	4628      	mov	r0, r5
   23b9c:	f7ff ff6b 	bl	23a76 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   23ba0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   23ba4:	4622      	mov	r2, r4
   23ba6:	1a61      	subs	r1, r4, r1
   23ba8:	4628      	mov	r0, r5
   23baa:	f7ff ffa8 	bl	23afe <merge_chunks>
   23bae:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23bb2:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   23bb4:	4621      	mov	r1, r4
   23bb6:	4628      	mov	r0, r5
}
   23bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   23bbc:	f7ff bf17 	b.w	239ee <free_list_add>

00023bc0 <sys_heap_free>:
	if (mem == NULL) {
   23bc0:	b161      	cbz	r1, 23bdc <sys_heap_free+0x1c>
   23bc2:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23bc4:	3904      	subs	r1, #4
   23bc6:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   23bc8:	f021 0307 	bic.w	r3, r1, #7
   23bcc:	4403      	add	r3, r0
	free_chunk(h, c);
   23bce:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   23bd0:	885a      	ldrh	r2, [r3, #2]
   23bd2:	f022 0201 	bic.w	r2, r2, #1
   23bd6:	805a      	strh	r2, [r3, #2]
   23bd8:	f7ff bfc1 	b.w	23b5e <free_chunk>
}
   23bdc:	4770      	bx	lr

00023bde <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   23bde:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   23be0:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   23be2:	b909      	cbnz	r1, 23be8 <sys_heap_alloc+0xa>
		return NULL;
   23be4:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   23be6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   23be8:	68ab      	ldr	r3, [r5, #8]
   23bea:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   23bee:	d9f9      	bls.n	23be4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23bf0:	310b      	adds	r1, #11
   23bf2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   23bf4:	4621      	mov	r1, r4
   23bf6:	4628      	mov	r0, r5
   23bf8:	f7ff ff4a 	bl	23a90 <alloc_chunk>
	if (c == 0U) {
   23bfc:	4606      	mov	r6, r0
   23bfe:	2800      	cmp	r0, #0
   23c00:	d0f0      	beq.n	23be4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   23c02:	4601      	mov	r1, r0
   23c04:	4628      	mov	r0, r5
   23c06:	f7ff feed 	bl	239e4 <chunk_size>
   23c0a:	42a0      	cmp	r0, r4
   23c0c:	d907      	bls.n	23c1e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   23c0e:	1932      	adds	r2, r6, r4
   23c10:	4628      	mov	r0, r5
   23c12:	f7ff ff8a 	bl	23b2a <split_chunks>
		free_list_add(h, c + chunk_sz);
   23c16:	4611      	mov	r1, r2
   23c18:	4628      	mov	r0, r5
   23c1a:	f7ff fee8 	bl	239ee <free_list_add>
	void *cmem = &buf[c];
   23c1e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   23c22:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23c24:	8853      	ldrh	r3, [r2, #2]
   23c26:	f043 0301 	orr.w	r3, r3, #1
   23c2a:	8053      	strh	r3, [r2, #2]
   23c2c:	3004      	adds	r0, #4
	return mem;
   23c2e:	e7da      	b.n	23be6 <sys_heap_alloc+0x8>

00023c30 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   23c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23c34:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   23c38:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   23c3c:	6806      	ldr	r6, [r0, #0]
{
   23c3e:	460f      	mov	r7, r1
   23c40:	4614      	mov	r4, r2
	if (align != rew) {
   23c42:	d00c      	beq.n	23c5e <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   23c44:	424b      	negs	r3, r1
   23c46:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   23c48:	2b04      	cmp	r3, #4
   23c4a:	461a      	mov	r2, r3
   23c4c:	464f      	mov	r7, r9
   23c4e:	bf28      	it	cs
   23c50:	2204      	movcs	r2, #4
	rew = align & -align;
   23c52:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   23c54:	b964      	cbnz	r4, 23c70 <sys_heap_aligned_alloc+0x40>
		return NULL;
   23c56:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   23c58:	4628      	mov	r0, r5
   23c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   23c5e:	2904      	cmp	r1, #4
   23c60:	d804      	bhi.n	23c6c <sys_heap_aligned_alloc+0x3c>
}
   23c62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   23c66:	4611      	mov	r1, r2
   23c68:	f7ff bfb9 	b.w	23bde <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   23c6c:	2204      	movs	r2, #4
   23c6e:	e7f1      	b.n	23c54 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   23c70:	68b3      	ldr	r3, [r6, #8]
   23c72:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   23c76:	d9ee      	bls.n	23c56 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23c78:	f104 010b 	add.w	r1, r4, #11
   23c7c:	4439      	add	r1, r7
   23c7e:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   23c80:	08c9      	lsrs	r1, r1, #3
   23c82:	4630      	mov	r0, r6
   23c84:	f7ff ff04 	bl	23a90 <alloc_chunk>
	if (c0 == 0) {
   23c88:	4680      	mov	r8, r0
   23c8a:	2800      	cmp	r0, #0
   23c8c:	d0e3      	beq.n	23c56 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   23c8e:	f109 0504 	add.w	r5, r9, #4
   23c92:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   23c96:	1e7b      	subs	r3, r7, #1
   23c98:	4435      	add	r5, r6
   23c9a:	441d      	add	r5, r3
   23c9c:	427f      	negs	r7, r7
   23c9e:	403d      	ands	r5, r7
   23ca0:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23ca4:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23ca6:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23ca8:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23caa:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23cac:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   23cb0:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   23cb2:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23cb6:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   23cba:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   23cbe:	d208      	bcs.n	23cd2 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   23cc0:	4601      	mov	r1, r0
   23cc2:	463a      	mov	r2, r7
   23cc4:	4630      	mov	r0, r6
   23cc6:	f7ff ff30 	bl	23b2a <split_chunks>
		free_list_add(h, c0);
   23cca:	4641      	mov	r1, r8
   23ccc:	4630      	mov	r0, r6
   23cce:	f7ff fe8e 	bl	239ee <free_list_add>
	return c + chunk_size(h, c);
   23cd2:	4639      	mov	r1, r7
   23cd4:	4630      	mov	r0, r6
   23cd6:	f7ff fe85 	bl	239e4 <chunk_size>
   23cda:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   23cdc:	4284      	cmp	r4, r0
   23cde:	d207      	bcs.n	23cf0 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   23ce0:	4630      	mov	r0, r6
   23ce2:	4622      	mov	r2, r4
   23ce4:	f7ff ff21 	bl	23b2a <split_chunks>
		free_list_add(h, c_end);
   23ce8:	4621      	mov	r1, r4
   23cea:	4630      	mov	r0, r6
   23cec:	f7ff fe7f 	bl	239ee <free_list_add>
	void *cmem = &buf[c];
   23cf0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23cf4:	8873      	ldrh	r3, [r6, #2]
   23cf6:	f043 0301 	orr.w	r3, r3, #1
   23cfa:	8073      	strh	r3, [r6, #2]
   23cfc:	e7ac      	b.n	23c58 <sys_heap_aligned_alloc+0x28>

00023cfe <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   23cfe:	3a04      	subs	r2, #4
{
   23d00:	b4f0      	push	{r4, r5, r6, r7}
   23d02:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23d04:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23d06:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23d08:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23d0c:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   23d10:	1a0e      	subs	r6, r1, r0
   23d12:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   23d14:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   23d16:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   23d1a:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23d1c:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   23d20:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   23d22:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23d24:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   23d26:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23d2a:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   23d2c:	f1c2 0220 	rsb	r2, r2, #32
   23d30:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   23d32:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   23d36:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   23d3a:	4294      	cmp	r4, r2
   23d3c:	d1fb      	bne.n	23d36 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23d3e:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23d40:	f042 0201 	orr.w	r2, r2, #1
   23d44:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   23d46:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   23d4a:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23d4c:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   23d4e:	8007      	strh	r7, [r0, #0]
   23d50:	8065      	strh	r5, [r4, #2]
   23d52:	1984      	adds	r4, r0, r6
   23d54:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   23d58:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   23d5c:	8067      	strh	r7, [r4, #2]
   23d5e:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23d60:	885a      	ldrh	r2, [r3, #2]
   23d62:	f042 0201 	orr.w	r2, r2, #1
   23d66:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   23d68:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   23d6a:	f7ff be40 	b.w	239ee <free_list_add>

00023d6e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23d6e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   23d70:	f013 0307 	ands.w	r3, r3, #7
   23d74:	d105      	bne.n	23d82 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   23d76:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   23d78:	2b00      	cmp	r3, #0
   23d7a:	bf0c      	ite	eq
   23d7c:	2000      	moveq	r0, #0
   23d7e:	2003      	movne	r0, #3
   23d80:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   23d82:	2b02      	cmp	r3, #2
   23d84:	d105      	bne.n	23d92 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   23d86:	8b40      	ldrh	r0, [r0, #26]
   23d88:	fab0 f080 	clz	r0, r0
   23d8c:	0940      	lsrs	r0, r0, #5
   23d8e:	0080      	lsls	r0, r0, #2
   23d90:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   23d92:	2b01      	cmp	r3, #1
   23d94:	d105      	bne.n	23da2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   23d96:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   23d98:	2b00      	cmp	r3, #0
   23d9a:	bf0c      	ite	eq
   23d9c:	2000      	moveq	r0, #0
   23d9e:	2005      	movne	r0, #5
   23da0:	4770      	bx	lr
	int evt = EVT_NOP;
   23da2:	2000      	movs	r0, #0
}
   23da4:	4770      	bx	lr

00023da6 <validate_args>:
{
   23da6:	b510      	push	{r4, lr}
   23da8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   23daa:	b100      	cbz	r0, 23dae <validate_args+0x8>
   23dac:	b911      	cbnz	r1, 23db4 <validate_args+0xe>
		return -EINVAL;
   23dae:	f06f 0015 	mvn.w	r0, #21
}
   23db2:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   23db4:	1d08      	adds	r0, r1, #4
   23db6:	f000 f896 	bl	23ee6 <sys_notify_validate>
	if ((rv == 0)
   23dba:	2800      	cmp	r0, #0
   23dbc:	d1f9      	bne.n	23db2 <validate_args+0xc>
	    && ((cli->notify.flags
   23dbe:	68a3      	ldr	r3, [r4, #8]
   23dc0:	2b03      	cmp	r3, #3
   23dc2:	d9f6      	bls.n	23db2 <validate_args+0xc>
   23dc4:	e7f3      	b.n	23dae <validate_args+0x8>

00023dc6 <notify_one>:
{
   23dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23dca:	460d      	mov	r5, r1
   23dcc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   23dce:	4619      	mov	r1, r3
   23dd0:	1d28      	adds	r0, r5, #4
{
   23dd2:	4690      	mov	r8, r2
   23dd4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   23dd6:	f000 f89a 	bl	23f0e <sys_notify_finalize>
	if (cb) {
   23dda:	4604      	mov	r4, r0
   23ddc:	b138      	cbz	r0, 23dee <notify_one+0x28>
		cb(mgr, cli, state, res);
   23dde:	4633      	mov	r3, r6
   23de0:	4642      	mov	r2, r8
   23de2:	4629      	mov	r1, r5
   23de4:	4638      	mov	r0, r7
   23de6:	46a4      	mov	ip, r4
}
   23de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   23dec:	4760      	bx	ip
}
   23dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023df2 <transition_complete>:
{
   23df2:	b410      	push	{r4}
	__asm__ volatile(
   23df4:	f04f 0440 	mov.w	r4, #64	; 0x40
   23df8:	f3ef 8211 	mrs	r2, BASEPRI
   23dfc:	f384 8812 	msr	BASEPRI_MAX, r4
   23e00:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   23e04:	6141      	str	r1, [r0, #20]
}
   23e06:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   23e0a:	2101      	movs	r1, #1
   23e0c:	f7ef bcf0 	b.w	137f0 <process_event>

00023e10 <onoff_manager_init>:
{
   23e10:	b538      	push	{r3, r4, r5, lr}
   23e12:	460c      	mov	r4, r1
	if ((mgr == NULL)
   23e14:	4605      	mov	r5, r0
   23e16:	b158      	cbz	r0, 23e30 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   23e18:	b151      	cbz	r1, 23e30 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   23e1a:	680b      	ldr	r3, [r1, #0]
   23e1c:	b143      	cbz	r3, 23e30 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   23e1e:	684b      	ldr	r3, [r1, #4]
   23e20:	b133      	cbz	r3, 23e30 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   23e22:	221c      	movs	r2, #28
   23e24:	2100      	movs	r1, #0
   23e26:	f003 fad7 	bl	273d8 <memset>
   23e2a:	612c      	str	r4, [r5, #16]
	return 0;
   23e2c:	2000      	movs	r0, #0
}
   23e2e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   23e30:	f06f 0015 	mvn.w	r0, #21
   23e34:	e7fb      	b.n	23e2e <onoff_manager_init+0x1e>

00023e36 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   23e36:	b570      	push	{r4, r5, r6, lr}
   23e38:	4605      	mov	r5, r0
   23e3a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   23e3c:	f7ff ffb3 	bl	23da6 <validate_args>

	if (rv < 0) {
   23e40:	1e04      	subs	r4, r0, #0
   23e42:	db15      	blt.n	23e70 <onoff_request+0x3a>
   23e44:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e48:	f3ef 8211 	mrs	r2, BASEPRI
   23e4c:	f383 8812 	msr	BASEPRI_MAX, r3
   23e50:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   23e54:	8b6b      	ldrh	r3, [r5, #26]
   23e56:	8b2c      	ldrh	r4, [r5, #24]
   23e58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   23e5c:	428b      	cmp	r3, r1
   23e5e:	f004 0407 	and.w	r4, r4, #7
   23e62:	d107      	bne.n	23e74 <onoff_request+0x3e>
	__asm__ volatile(
   23e64:	f382 8811 	msr	BASEPRI, r2
   23e68:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   23e6c:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   23e70:	4620      	mov	r0, r4
   23e72:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   23e74:	2c02      	cmp	r4, #2
   23e76:	d10c      	bne.n	23e92 <onoff_request+0x5c>
		mgr->refs += 1U;
   23e78:	3301      	adds	r3, #1
   23e7a:	836b      	strh	r3, [r5, #26]
   23e7c:	f382 8811 	msr	BASEPRI, r2
   23e80:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   23e84:	2300      	movs	r3, #0
   23e86:	4622      	mov	r2, r4
   23e88:	4631      	mov	r1, r6
   23e8a:	4628      	mov	r0, r5
   23e8c:	f7ff ff9b 	bl	23dc6 <notify_one>
   23e90:	e7ee      	b.n	23e70 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   23e92:	2c06      	cmp	r4, #6
   23e94:	d814      	bhi.n	23ec0 <onoff_request+0x8a>
   23e96:	e8df f004 	tbb	[pc, r4]
   23e9a:	1304      	.short	0x1304
   23e9c:	1a041313 	.word	0x1a041313
   23ea0:	04          	.byte	0x04
   23ea1:	00          	.byte	0x00
	parent->next = child;
   23ea2:	2300      	movs	r3, #0
   23ea4:	6033      	str	r3, [r6, #0]
	return list->tail;
   23ea6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   23ea8:	b93b      	cbnz	r3, 23eba <onoff_request+0x84>
	list->head = node;
   23eaa:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   23eae:	b9ac      	cbnz	r4, 23edc <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   23eb0:	2102      	movs	r1, #2
   23eb2:	4628      	mov	r0, r5
   23eb4:	f7ef fc9c 	bl	137f0 <process_event>
   23eb8:	e7da      	b.n	23e70 <onoff_request+0x3a>
	parent->next = child;
   23eba:	601e      	str	r6, [r3, #0]
	list->tail = node;
   23ebc:	606e      	str	r6, [r5, #4]
}
   23ebe:	e7f6      	b.n	23eae <onoff_request+0x78>
   23ec0:	f382 8811 	msr	BASEPRI, r2
   23ec4:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   23ec8:	f06f 0404 	mvn.w	r4, #4
   23ecc:	e7d0      	b.n	23e70 <onoff_request+0x3a>
   23ece:	f382 8811 	msr	BASEPRI, r2
   23ed2:	f3bf 8f6f 	isb	sy
   23ed6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   23eda:	e7c9      	b.n	23e70 <onoff_request+0x3a>
   23edc:	f382 8811 	msr	BASEPRI, r2
   23ee0:	f3bf 8f6f 	isb	sy
		if (notify) {
   23ee4:	e7c4      	b.n	23e70 <onoff_request+0x3a>

00023ee6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   23ee6:	4603      	mov	r3, r0
   23ee8:	b140      	cbz	r0, 23efc <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23eea:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   23eec:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   23ef0:	2a02      	cmp	r2, #2
   23ef2:	d006      	beq.n	23f02 <sys_notify_validate+0x1c>
   23ef4:	2a03      	cmp	r2, #3
   23ef6:	d004      	beq.n	23f02 <sys_notify_validate+0x1c>
   23ef8:	2a01      	cmp	r2, #1
   23efa:	d005      	beq.n	23f08 <sys_notify_validate+0x22>
   23efc:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   23f00:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   23f02:	681a      	ldr	r2, [r3, #0]
   23f04:	2a00      	cmp	r2, #0
   23f06:	d0f9      	beq.n	23efc <sys_notify_validate+0x16>
		notify->result = 0;
   23f08:	2000      	movs	r0, #0
   23f0a:	6098      	str	r0, [r3, #8]
   23f0c:	4770      	bx	lr

00023f0e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   23f0e:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23f10:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   23f12:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   23f14:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   23f18:	2a02      	cmp	r2, #2
{
   23f1a:	4603      	mov	r3, r0
	switch (method) {
   23f1c:	f04f 0400 	mov.w	r4, #0
   23f20:	d007      	beq.n	23f32 <sys_notify_finalize+0x24>
   23f22:	2a03      	cmp	r2, #3
   23f24:	d002      	beq.n	23f2c <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   23f26:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   23f28:	2000      	movs	r0, #0
   23f2a:	e001      	b.n	23f30 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   23f2c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   23f2e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   23f30:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   23f32:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   23f34:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   23f36:	2800      	cmp	r0, #0
   23f38:	d0f6      	beq.n	23f28 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   23f3a:	f7fb f8f3 	bl	1f124 <z_impl_k_poll_signal_raise>
   23f3e:	e7f3      	b.n	23f28 <sys_notify_finalize+0x1a>

00023f40 <_ldiv5>:
	uint32_t v_lo = *v;
   23f40:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   23f44:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   23f46:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   23f4a:	fba2 2403 	umull	r2, r4, r2, r3
   23f4e:	18d5      	adds	r5, r2, r3
   23f50:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   23f54:	fba1 1303 	umull	r1, r3, r1, r3
   23f58:	1852      	adds	r2, r2, r1
   23f5a:	eb44 0403 	adc.w	r4, r4, r3
   23f5e:	1952      	adds	r2, r2, r5
   23f60:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   23f64:	1889      	adds	r1, r1, r2
   23f66:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   23f6a:	e9c0 1300 	strd	r1, r3, [r0]
}
   23f6e:	bd30      	pop	{r4, r5, pc}

00023f70 <_get_digit>:
{
   23f70:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   23f72:	680a      	ldr	r2, [r1, #0]
   23f74:	2a00      	cmp	r2, #0
{
   23f76:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   23f78:	dd0f      	ble.n	23f9a <_get_digit+0x2a>
		--*digit_count;
   23f7a:	3a01      	subs	r2, #1
   23f7c:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   23f7e:	681a      	ldr	r2, [r3, #0]
   23f80:	6844      	ldr	r4, [r0, #4]
   23f82:	200a      	movs	r0, #10
   23f84:	fba2 1200 	umull	r1, r2, r2, r0
   23f88:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   23f8c:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   23f8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   23f92:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   23f96:	3030      	adds	r0, #48	; 0x30
}
   23f98:	bd10      	pop	{r4, pc}
		rval = '0';
   23f9a:	2030      	movs	r0, #48	; 0x30
   23f9c:	e7fc      	b.n	23f98 <_get_digit+0x28>

00023f9e <outs>:
{
   23f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23fa2:	4607      	mov	r7, r0
   23fa4:	4688      	mov	r8, r1
   23fa6:	4615      	mov	r5, r2
   23fa8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23faa:	4614      	mov	r4, r2
   23fac:	42b4      	cmp	r4, r6
   23fae:	d305      	bcc.n	23fbc <outs+0x1e>
   23fb0:	b10e      	cbz	r6, 23fb6 <outs+0x18>
	return (int)count;
   23fb2:	1b60      	subs	r0, r4, r5
   23fb4:	e008      	b.n	23fc8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23fb6:	7823      	ldrb	r3, [r4, #0]
   23fb8:	2b00      	cmp	r3, #0
   23fba:	d0fa      	beq.n	23fb2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   23fbc:	f814 0b01 	ldrb.w	r0, [r4], #1
   23fc0:	4641      	mov	r1, r8
   23fc2:	47b8      	blx	r7
		if (rc < 0) {
   23fc4:	2800      	cmp	r0, #0
   23fc6:	daf1      	bge.n	23fac <outs+0xe>
}
   23fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023fcc <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   23fcc:	b40f      	push	{r0, r1, r2, r3}
   23fce:	b507      	push	{r0, r1, r2, lr}
   23fd0:	a904      	add	r1, sp, #16
   23fd2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   23fd6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   23fd8:	f7ff fcde 	bl	23998 <vprintk>

	va_end(ap);
}
   23fdc:	b003      	add	sp, #12
   23fde:	f85d eb04 	ldr.w	lr, [sp], #4
   23fe2:	b004      	add	sp, #16
   23fe4:	4770      	bx	lr

00023fe6 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   23fe6:	68c3      	ldr	r3, [r0, #12]
   23fe8:	6802      	ldr	r2, [r0, #0]
   23fea:	4293      	cmp	r3, r2
   23fec:	d904      	bls.n	23ff8 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   23fee:	3b01      	subs	r3, #1
   23ff0:	1a9a      	subs	r2, r3, r2

		return false;
   23ff2:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   23ff4:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   23ff6:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   23ff8:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   23ffa:	b913      	cbnz	r3, 24002 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   23ffc:	3801      	subs	r0, #1
   23ffe:	1a82      	subs	r2, r0, r2
		return false;
   24000:	e7f7      	b.n	23ff2 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   24002:	1a82      	subs	r2, r0, r2
	return true;
   24004:	2001      	movs	r0, #1
   24006:	e7f5      	b.n	23ff4 <free_space+0xe>

00024008 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   24008:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   2400a:	a901      	add	r1, sp, #4
{
   2400c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2400e:	f7ff ffea 	bl	23fe6 <free_space>
   24012:	b120      	cbz	r0, 2401e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   24014:	9b01      	ldr	r3, [sp, #4]
   24016:	68e2      	ldr	r2, [r4, #12]
   24018:	3b01      	subs	r3, #1
   2401a:	4413      	add	r3, r2
   2401c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   2401e:	6a20      	ldr	r0, [r4, #32]
   24020:	9b01      	ldr	r3, [sp, #4]
   24022:	1ac0      	subs	r0, r0, r3
}
   24024:	3801      	subs	r0, #1
   24026:	b002      	add	sp, #8
   24028:	bd10      	pop	{r4, pc}

0002402a <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   2402a:	b510      	push	{r4, lr}
   2402c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2402e:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   24030:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   24032:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   24034:	07d2      	lsls	r2, r2, #31
   24036:	d502      	bpl.n	2403e <idx_inc+0x14>
		return i & (buffer->size - 1);
   24038:	3b01      	subs	r3, #1
   2403a:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   2403c:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2403e:	4298      	cmp	r0, r3
   24040:	bf28      	it	cs
   24042:	1ac0      	subcs	r0, r0, r3
   24044:	e7fa      	b.n	2403c <idx_inc+0x12>

00024046 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   24046:	b538      	push	{r3, r4, r5, lr}
   24048:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2404a:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   2404c:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2404e:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   24050:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   24054:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   24058:	462a      	mov	r2, r5
   2405a:	6801      	ldr	r1, [r0, #0]
{
   2405c:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2405e:	f7ff ffe4 	bl	2402a <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   24062:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   24064:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   24066:	462a      	mov	r2, r5
   24068:	4620      	mov	r0, r4
   2406a:	f7ff ffde 	bl	2402a <idx_inc>
   2406e:	6060      	str	r0, [r4, #4]
}
   24070:	bd38      	pop	{r3, r4, r5, pc}

00024072 <max_utilization_update>:
{
   24072:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   24074:	6903      	ldr	r3, [r0, #16]
   24076:	075b      	lsls	r3, r3, #29
{
   24078:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2407a:	d506      	bpl.n	2408a <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2407c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2407e:	f7ff ffc3 	bl	24008 <get_usage>
   24082:	4285      	cmp	r5, r0
   24084:	bf2c      	ite	cs
   24086:	6265      	strcs	r5, [r4, #36]	; 0x24
   24088:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   2408a:	bd38      	pop	{r3, r4, r5, pc}

0002408c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   2408c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24090:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   24092:	2300      	movs	r3, #0
   24094:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   24096:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2409a:	f8d0 901c 	ldr.w	r9, [r0, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   2409e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   240a2:	f003 0303 	and.w	r3, r3, #3
   240a6:	2b02      	cmp	r3, #2
{
   240a8:	4604      	mov	r4, r0
   240aa:	468b      	mov	fp, r1
   240ac:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   240ae:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   240b2:	d103      	bne.n	240bc <drop_item_locked+0x30>
		return item->skip.len;
   240b4:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   240b8:	08ad      	lsrs	r5, r5, #2
   240ba:	d12e      	bne.n	2411a <drop_item_locked+0x8e>
   240bc:	69a3      	ldr	r3, [r4, #24]
   240be:	4630      	mov	r0, r6
   240c0:	4798      	blx	r3
   240c2:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   240c4:	f1b8 0f00 	cmp.w	r8, #0
   240c8:	d038      	beq.n	2413c <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   240ca:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   240ce:	079b      	lsls	r3, r3, #30
   240d0:	d531      	bpl.n	24136 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   240d2:	f10b 0101 	add.w	r1, fp, #1
   240d6:	4620      	mov	r0, r4
   240d8:	f7ff ffb5 	bl	24046 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   240dc:	6861      	ldr	r1, [r4, #4]
   240de:	462a      	mov	r2, r5
   240e0:	4620      	mov	r0, r4
   240e2:	f7ff ffa2 	bl	2402a <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   240e6:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   240e8:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   240ea:	462a      	mov	r2, r5
   240ec:	4620      	mov	r0, r4
   240ee:	f7ff ff9c 	bl	2402a <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   240f2:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   240f4:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   240f6:	68e1      	ldr	r1, [r4, #12]
   240f8:	4620      	mov	r0, r4
   240fa:	f7ff ff96 	bl	2402a <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   240fe:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   24100:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   24104:	f002 0203 	and.w	r2, r2, #3
   24108:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2410a:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2410e:	d10e      	bne.n	2412e <drop_item_locked+0xa2>
		return item->skip.len;
   24110:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   24114:	089b      	lsrs	r3, r3, #2
   24116:	d00a      	beq.n	2412e <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   24118:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2411a:	68e1      	ldr	r1, [r4, #12]
   2411c:	462a      	mov	r2, r5
   2411e:	4620      	mov	r0, r4
   24120:	f7ff ff83 	bl	2402a <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   24124:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   24128:	4630      	mov	r0, r6
   2412a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   2412e:	69a3      	ldr	r3, [r4, #24]
   24130:	4630      	mov	r0, r6
   24132:	4798      	blx	r3
   24134:	4405      	add	r5, r0
			*user_packet = true;
   24136:	2301      	movs	r3, #1
   24138:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   2413a:	e7ee      	b.n	2411a <drop_item_locked+0x8e>
		item = NULL;
   2413c:	4646      	mov	r6, r8
	return item;
   2413e:	e7f3      	b.n	24128 <drop_item_locked+0x9c>

00024140 <mpsc_pbuf_init>:
{
   24140:	b538      	push	{r3, r4, r5, lr}
   24142:	460d      	mov	r5, r1
   24144:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   24146:	221c      	movs	r2, #28
   24148:	2100      	movs	r1, #0
   2414a:	f003 f945 	bl	273d8 <memset>
	buffer->get_wlen = cfg->get_wlen;
   2414e:	68eb      	ldr	r3, [r5, #12]
   24150:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   24152:	68ab      	ldr	r3, [r5, #8]
   24154:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   24156:	682b      	ldr	r3, [r5, #0]
   24158:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   2415a:	686b      	ldr	r3, [r5, #4]
   2415c:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   2415e:	2200      	movs	r2, #0
   24160:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   24162:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   24164:	b123      	cbz	r3, 24170 <mpsc_pbuf_init+0x30>
   24166:	1e59      	subs	r1, r3, #1
   24168:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   2416a:	bf08      	it	eq
   2416c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   24170:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   24172:	2201      	movs	r2, #1
   24174:	f104 0028 	add.w	r0, r4, #40	; 0x28
   24178:	2100      	movs	r1, #0
}
   2417a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2417e:	f002 bcea 	b.w	26b56 <z_impl_k_sem_init>

00024182 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   24182:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   24186:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   24188:	6a03      	ldr	r3, [r0, #32]
   2418a:	3b01      	subs	r3, #1
   2418c:	428b      	cmp	r3, r1
{
   2418e:	4604      	mov	r4, r0
   24190:	460e      	mov	r6, r1
   24192:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   24194:	d351      	bcc.n	2423a <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   24196:	2500      	movs	r5, #0
	__asm__ volatile(
   24198:	f04f 0340 	mov.w	r3, #64	; 0x40
   2419c:	f3ef 8911 	mrs	r9, BASEPRI
   241a0:	f383 8812 	msr	BASEPRI_MAX, r3
   241a4:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   241a8:	a901      	add	r1, sp, #4
   241aa:	4620      	mov	r0, r4
   241ac:	f7ff ff1b 	bl	23fe6 <free_space>

		if (free_wlen >= wlen) {
   241b0:	f8dd a004 	ldr.w	sl, [sp, #4]
   241b4:	45b2      	cmp	sl, r6
   241b6:	d317      	bcc.n	241e8 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   241b8:	6822      	ldr	r2, [r4, #0]
			item =
   241ba:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   241bc:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   241c0:	f021 0103 	bic.w	r1, r1, #3
   241c4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   241c8:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   241cc:	6821      	ldr	r1, [r4, #0]
   241ce:	4632      	mov	r2, r6
   241d0:	4620      	mov	r0, r4
   241d2:	f7ff ff2a 	bl	2402a <idx_inc>
   241d6:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   241d8:	f389 8811 	msr	BASEPRI, r9
   241dc:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   241e0:	4628      	mov	r0, r5
   241e2:	b002      	add	sp, #8
   241e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   241e8:	b150      	cbz	r0, 24200 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   241ea:	4651      	mov	r1, sl
   241ec:	4620      	mov	r0, r4
   241ee:	f7ff ff2a 	bl	24046 <add_skip_item>
   241f2:	f389 8811 	msr	BASEPRI, r9
   241f6:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   241fa:	2d00      	cmp	r5, #0
   241fc:	d0cb      	beq.n	24196 <mpsc_pbuf_alloc+0x14>
   241fe:	e033      	b.n	24268 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   24200:	ea57 0308 	orrs.w	r3, r7, r8
   24204:	d020      	beq.n	24248 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   24206:	f002 fbf0 	bl	269ea <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2420a:	b9e8      	cbnz	r0, 24248 <mpsc_pbuf_alloc+0xc6>
   2420c:	f389 8811 	msr	BASEPRI, r9
   24210:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   24214:	463a      	mov	r2, r7
   24216:	4643      	mov	r3, r8
   24218:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2421c:	f7fa f860 	bl	1e2e0 <z_impl_k_sem_take>
	__asm__ volatile(
   24220:	f04f 0240 	mov.w	r2, #64	; 0x40
   24224:	f3ef 8311 	mrs	r3, BASEPRI
   24228:	f382 8812 	msr	BASEPRI_MAX, r2
   2422c:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   24230:	b128      	cbz	r0, 2423e <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   24232:	f383 8811 	msr	BASEPRI, r3
   24236:	f3bf 8f6f 	isb	sy
		return NULL;
   2423a:	2500      	movs	r5, #0
   2423c:	e7d0      	b.n	241e0 <mpsc_pbuf_alloc+0x5e>
   2423e:	f383 8811 	msr	BASEPRI, r3
   24242:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   24246:	e7d8      	b.n	241fa <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   24248:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   2424a:	f10d 0303 	add.w	r3, sp, #3
   2424e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   24252:	4651      	mov	r1, sl
   24254:	4620      	mov	r0, r4
   24256:	f7ff ff19 	bl	2408c <drop_item_locked>
   2425a:	4605      	mov	r5, r0
   2425c:	f389 8811 	msr	BASEPRI, r9
   24260:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   24264:	2800      	cmp	r0, #0
   24266:	d0e8      	beq.n	2423a <mpsc_pbuf_alloc+0xb8>
   24268:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2426c:	2b00      	cmp	r3, #0
   2426e:	d093      	beq.n	24198 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   24270:	6963      	ldr	r3, [r4, #20]
   24272:	2b00      	cmp	r3, #0
   24274:	d08f      	beq.n	24196 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   24276:	4629      	mov	r1, r5
   24278:	4620      	mov	r0, r4
   2427a:	4798      	blx	r3
   2427c:	e78b      	b.n	24196 <mpsc_pbuf_alloc+0x14>

0002427e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   2427e:	b570      	push	{r4, r5, r6, lr}
   24280:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   24282:	6983      	ldr	r3, [r0, #24]
   24284:	4608      	mov	r0, r1
{
   24286:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   24288:	4798      	blx	r3
   2428a:	4602      	mov	r2, r0
	__asm__ volatile(
   2428c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24290:	f3ef 8611 	mrs	r6, BASEPRI
   24294:	f383 8812 	msr	BASEPRI_MAX, r3
   24298:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2429c:	782b      	ldrb	r3, [r5, #0]
   2429e:	f043 0301 	orr.w	r3, r3, #1
   242a2:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   242a4:	6861      	ldr	r1, [r4, #4]
   242a6:	4620      	mov	r0, r4
   242a8:	f7ff febf 	bl	2402a <idx_inc>
   242ac:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   242ae:	4620      	mov	r0, r4
   242b0:	f7ff fedf 	bl	24072 <max_utilization_update>
	__asm__ volatile(
   242b4:	f386 8811 	msr	BASEPRI, r6
   242b8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   242bc:	bd70      	pop	{r4, r5, r6, pc}

000242be <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   242be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242c0:	4604      	mov	r4, r0
	__asm__ volatile(
   242c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   242c6:	f3ef 8611 	mrs	r6, BASEPRI
   242ca:	f383 8812 	msr	BASEPRI_MAX, r3
   242ce:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   242d2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   242d6:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   242d8:	bf88      	it	hi
   242da:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   242dc:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   242de:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   242e0:	b132      	cbz	r2, 242f0 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   242e2:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   242e6:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   242ea:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   242ee:	d105      	bne.n	242fc <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   242f0:	f386 8811 	msr	BASEPRI, r6
   242f4:	f3bf 8f6f 	isb	sy
			item = NULL;
   242f8:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   242fa:	e02e      	b.n	2435a <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   242fc:	2802      	cmp	r0, #2
   242fe:	d103      	bne.n	24308 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   24300:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   24304:	08ad      	lsrs	r5, r5, #2
   24306:	d105      	bne.n	24314 <mpsc_pbuf_claim+0x56>
   24308:	07d0      	lsls	r0, r2, #31
   2430a:	d414      	bmi.n	24336 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   2430c:	69a3      	ldr	r3, [r4, #24]
   2430e:	4638      	mov	r0, r7
   24310:	4798      	blx	r3
   24312:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   24314:	68a1      	ldr	r1, [r4, #8]
   24316:	462a      	mov	r2, r5
   24318:	4620      	mov	r0, r4
   2431a:	f7ff fe86 	bl	2402a <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   2431e:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   24320:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   24322:	462a      	mov	r2, r5
   24324:	4620      	mov	r0, r4
   24326:	f7ff fe80 	bl	2402a <idx_inc>
				buffer->rd_idx =
   2432a:	60e0      	str	r0, [r4, #12]
   2432c:	f386 8811 	msr	BASEPRI, r6
   24330:	f3bf 8f6f 	isb	sy
	} while (cont);
   24334:	e7c5      	b.n	242c2 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   24336:	f042 0202 	orr.w	r2, r2, #2
   2433a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   2433e:	4638      	mov	r0, r7
   24340:	69a3      	ldr	r3, [r4, #24]
   24342:	68a5      	ldr	r5, [r4, #8]
   24344:	4798      	blx	r3
   24346:	4629      	mov	r1, r5
   24348:	4602      	mov	r2, r0
   2434a:	4620      	mov	r0, r4
   2434c:	f7ff fe6d 	bl	2402a <idx_inc>
				buffer->tmp_rd_idx =
   24350:	60a0      	str	r0, [r4, #8]
   24352:	f386 8811 	msr	BASEPRI, r6
   24356:	f3bf 8f6f 	isb	sy
}
   2435a:	4638      	mov	r0, r7
   2435c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002435e <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   2435e:	b570      	push	{r4, r5, r6, lr}
   24360:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   24362:	6983      	ldr	r3, [r0, #24]
   24364:	4608      	mov	r0, r1
{
   24366:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   24368:	4798      	blx	r3
   2436a:	4602      	mov	r2, r0
	__asm__ volatile(
   2436c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24370:	f3ef 8611 	mrs	r6, BASEPRI
   24374:	f383 8812 	msr	BASEPRI_MAX, r3
   24378:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2437c:	782b      	ldrb	r3, [r5, #0]
   2437e:	f36f 0300 	bfc	r3, #0, #1
   24382:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   24384:	6923      	ldr	r3, [r4, #16]
   24386:	079b      	lsls	r3, r3, #30
   24388:	d505      	bpl.n	24396 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2438a:	68e1      	ldr	r1, [r4, #12]
   2438c:	69e3      	ldr	r3, [r4, #28]
   2438e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   24392:	429d      	cmp	r5, r3
   24394:	d112      	bne.n	243bc <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   24396:	782b      	ldrb	r3, [r5, #0]
   24398:	f36f 0341 	bfc	r3, #1, #1
   2439c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2439e:	68e1      	ldr	r1, [r4, #12]
   243a0:	4620      	mov	r0, r4
   243a2:	f7ff fe42 	bl	2402a <idx_inc>
   243a6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   243a8:	f386 8811 	msr	BASEPRI, r6
   243ac:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   243b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   243b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   243b8:	f7f9 bf6c 	b.w	1e294 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   243bc:	682b      	ldr	r3, [r5, #0]
   243be:	f360 039f 	bfi	r3, r0, #2, #30
   243c2:	602b      	str	r3, [r5, #0]
   243c4:	e7f0      	b.n	243a8 <mpsc_pbuf_free+0x4a>

000243c6 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   243c6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   243ca:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   243cc:	bf88      	it	hi
   243ce:	6a02      	ldrhi	r2, [r0, #32]
   243d0:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   243d2:	1e18      	subs	r0, r3, #0
   243d4:	bf18      	it	ne
   243d6:	2001      	movne	r0, #1
   243d8:	4770      	bx	lr

000243da <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   243da:	4770      	bx	lr

000243dc <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   243dc:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   243de:	075b      	lsls	r3, r3, #29
   243e0:	d40b      	bmi.n	243fa <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   243e2:	6803      	ldr	r3, [r0, #0]
   243e4:	8842      	ldrh	r2, [r0, #2]
   243e6:	f3c3 2349 	ubfx	r3, r3, #9, #10
   243ea:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   243ee:	1898      	adds	r0, r3, r2
   243f0:	3017      	adds	r0, #23
   243f2:	f020 0007 	bic.w	r0, r0, #7
   243f6:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   243f8:	4770      	bx	lr
	return 0;
   243fa:	2000      	movs	r0, #0
}
   243fc:	4770      	bx	lr

000243fe <dummy_timestamp>:
}
   243fe:	2000      	movs	r0, #0
   24400:	4770      	bx	lr

00024402 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   24402:	f002 b8ca 	b.w	2659a <sys_clock_cycle_get_32>

00024406 <atomic_inc>:
{
   24406:	4603      	mov	r3, r0
}
   24408:	f3bf 8f5b 	dmb	ish
   2440c:	e853 0f00 	ldrex	r0, [r3]
   24410:	1c42      	adds	r2, r0, #1
   24412:	e843 2100 	strex	r1, r2, [r3]
   24416:	2900      	cmp	r1, #0
   24418:	d1f8      	bne.n	2440c <atomic_inc+0x6>
   2441a:	f3bf 8f5b 	dmb	ish
   2441e:	4770      	bx	lr

00024420 <z_log_vprintk>:
{
   24420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   24422:	2300      	movs	r3, #0
   24424:	e9cd 0102 	strd	r0, r1, [sp, #8]
   24428:	e9cd 3300 	strd	r3, r3, [sp]
   2442c:	461a      	mov	r2, r3
   2442e:	4619      	mov	r1, r3
   24430:	4618      	mov	r0, r3
   24432:	f7ef fe49 	bl	140c8 <z_impl_z_log_msg_runtime_vcreate>
}
   24436:	b005      	add	sp, #20
   24438:	f85d fb04 	ldr.w	pc, [sp], #4

0002443c <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2443c:	2001      	movs	r0, #1
   2443e:	f7ef bc2f 	b.w	13ca0 <z_log_dropped>

00024442 <z_log_get_tag>:
}
   24442:	2000      	movs	r0, #0
   24444:	4770      	bx	lr

00024446 <z_cbprintf_cpy>:
{
   24446:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   24448:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2444c:	1b9b      	subs	r3, r3, r6
   2444e:	428b      	cmp	r3, r1
{
   24450:	460c      	mov	r4, r1
   24452:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   24454:	d30a      	bcc.n	2446c <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   24456:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24458:	460a      	mov	r2, r1
   2445a:	4601      	mov	r1, r0
   2445c:	1998      	adds	r0, r3, r6
   2445e:	f002 ffad 	bl	273bc <memcpy>
	desc->off += len;
   24462:	68ab      	ldr	r3, [r5, #8]
   24464:	4423      	add	r3, r4
   24466:	60ab      	str	r3, [r5, #8]
	return len;
   24468:	4620      	mov	r0, r4
}
   2446a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2446c:	f06f 001b 	mvn.w	r0, #27
   24470:	e7fb      	b.n	2446a <z_cbprintf_cpy+0x24>

00024472 <z_log_msg_finalize>:
{
   24472:	b570      	push	{r4, r5, r6, lr}
   24474:	460e      	mov	r6, r1
   24476:	4615      	mov	r5, r2
   24478:	4619      	mov	r1, r3
   2447a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
   2447e:	4604      	mov	r4, r0
   24480:	b918      	cbnz	r0, 2448a <z_log_msg_finalize+0x18>
}
   24482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   24486:	f7ef bc0b 	b.w	13ca0 <z_log_dropped>
	if (data) {
   2448a:	b12b      	cbz	r3, 24498 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2448c:	3010      	adds	r0, #16
   2448e:	f3c5 2349 	ubfx	r3, r5, #9, #10
   24492:	4418      	add	r0, r3
   24494:	f002 ff92 	bl	273bc <memcpy>
	msg->hdr.source = source;
   24498:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2449c:	4620      	mov	r0, r4
}
   2449e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   244a2:	f7ef bd89 	b.w	13fb8 <z_log_msg_commit>

000244a6 <buffer_write>:
{
   244a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244a8:	4606      	mov	r6, r0
   244aa:	460d      	mov	r5, r1
   244ac:	4614      	mov	r4, r2
   244ae:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   244b0:	4621      	mov	r1, r4
   244b2:	4628      	mov	r0, r5
   244b4:	463a      	mov	r2, r7
   244b6:	47b0      	blx	r6
	} while (len != 0);
   244b8:	1a24      	subs	r4, r4, r0
		buf += processed;
   244ba:	4405      	add	r5, r0
	} while (len != 0);
   244bc:	d1f8      	bne.n	244b0 <buffer_write+0xa>
}
   244be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000244c0 <cbvprintf>:
{
   244c0:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   244c2:	2400      	movs	r4, #0
   244c4:	9400      	str	r4, [sp, #0]
   244c6:	f7ec fddf 	bl	11088 <z_cbvprintf_impl>
}
   244ca:	b002      	add	sp, #8
   244cc:	bd10      	pop	{r4, pc}

000244ce <log_output_flush>:
{
   244ce:	b510      	push	{r4, lr}
		     output->control_block->offset,
   244d0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   244d2:	6881      	ldr	r1, [r0, #8]
{
   244d4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   244d6:	e9d2 2300 	ldrd	r2, r3, [r2]
   244da:	6800      	ldr	r0, [r0, #0]
   244dc:	f7ff ffe3 	bl	244a6 <buffer_write>
	output->control_block->offset = 0;
   244e0:	6863      	ldr	r3, [r4, #4]
   244e2:	2200      	movs	r2, #0
   244e4:	601a      	str	r2, [r3, #0]
}
   244e6:	bd10      	pop	{r4, pc}

000244e8 <out_func>:
{
   244e8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   244ea:	684b      	ldr	r3, [r1, #4]
   244ec:	681a      	ldr	r2, [r3, #0]
   244ee:	68cb      	ldr	r3, [r1, #12]
   244f0:	429a      	cmp	r2, r3
{
   244f2:	4605      	mov	r5, r0
   244f4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   244f6:	d102      	bne.n	244fe <out_func+0x16>
		log_output_flush(out_ctx);
   244f8:	4608      	mov	r0, r1
   244fa:	f7ff ffe8 	bl	244ce <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   244fe:	6863      	ldr	r3, [r4, #4]
   24500:	f3bf 8f5b 	dmb	ish
   24504:	e853 2f00 	ldrex	r2, [r3]
   24508:	1c51      	adds	r1, r2, #1
   2450a:	e843 1000 	strex	r0, r1, [r3]
   2450e:	2800      	cmp	r0, #0
   24510:	d1f8      	bne.n	24504 <out_func+0x1c>
   24512:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   24516:	68a3      	ldr	r3, [r4, #8]
   24518:	549d      	strb	r5, [r3, r2]
}
   2451a:	2000      	movs	r0, #0
   2451c:	bd38      	pop	{r3, r4, r5, pc}

0002451e <cr_out_func>:
	if (c == '\n') {
   2451e:	280a      	cmp	r0, #10
{
   24520:	b538      	push	{r3, r4, r5, lr}
   24522:	4604      	mov	r4, r0
   24524:	460d      	mov	r5, r1
	if (c == '\n') {
   24526:	d102      	bne.n	2452e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   24528:	200d      	movs	r0, #13
   2452a:	f7ff ffdd 	bl	244e8 <out_func>
	out_func(c, ctx);
   2452e:	4629      	mov	r1, r5
   24530:	4620      	mov	r0, r4
   24532:	f7ff ffd9 	bl	244e8 <out_func>
}
   24536:	2000      	movs	r0, #0
   24538:	bd38      	pop	{r3, r4, r5, pc}

0002453a <log_backend_uart_init>:
}
   2453a:	4770      	bx	lr

0002453c <read_str>:
{
   2453c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   24540:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   24544:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   24546:	4640      	mov	r0, r8
{
   24548:	461f      	mov	r7, r3
   2454a:	460c      	mov	r4, r1
   2454c:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   2454e:	f7e8 fac5 	bl	cadc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   24552:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   24556:	9300      	str	r3, [sp, #0]
   24558:	b280      	uxth	r0, r0
   2455a:	e9cd 8001 	strd	r8, r0, [sp, #4]
   2455e:	463b      	mov	r3, r7
   24560:	4632      	mov	r2, r6
   24562:	4621      	mov	r1, r4
   24564:	4628      	mov	r0, r5
   24566:	f001 fc30 	bl	25dca <bt_gatt_attr_read>
}
   2456a:	b004      	add	sp, #16
   2456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024570 <settings_name_next>:

	return 0;
}

int settings_name_next(const char *name, const char **next)
{
   24570:	b510      	push	{r4, lr}
	int rc = 0;

	if (next) {
   24572:	b109      	cbz	r1, 24578 <settings_name_next+0x8>
		*next = NULL;
   24574:	2300      	movs	r3, #0
   24576:	600b      	str	r3, [r1, #0]
	}

	if (!name) {
   24578:	b158      	cbz	r0, 24592 <settings_name_next+0x22>
   2457a:	4603      	mov	r3, r0

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2457c:	781a      	ldrb	r2, [r3, #0]
   2457e:	461c      	mov	r4, r3
   24580:	3301      	adds	r3, #1
   24582:	b12a      	cbz	r2, 24590 <settings_name_next+0x20>
   24584:	2a3d      	cmp	r2, #61	; 0x3d
   24586:	d003      	beq.n	24590 <settings_name_next+0x20>
   24588:	2a2f      	cmp	r2, #47	; 0x2f
   2458a:	d1f7      	bne.n	2457c <settings_name_next+0xc>
		rc++;
		name++;
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
		if (next) {
   2458c:	b101      	cbz	r1, 24590 <settings_name_next+0x20>
			*next = name + 1;
   2458e:	600b      	str	r3, [r1, #0]
   24590:	1a20      	subs	r0, r4, r0
		}
		return rc;
	}

	return rc;
}
   24592:	bd10      	pop	{r4, pc}

00024594 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   24594:	b538      	push	{r3, r4, r5, lr}
   24596:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   24598:	42ab      	cmp	r3, r5
{
   2459a:	4611      	mov	r1, r2
   2459c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2459e:	d804      	bhi.n	245aa <_copy+0x16>
   245a0:	461a      	mov	r2, r3
   245a2:	f002 ff0b 	bl	273bc <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   245a6:	4620      	mov	r0, r4
   245a8:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   245aa:	2400      	movs	r4, #0
   245ac:	e7fb      	b.n	245a6 <_copy+0x12>

000245ae <_set>:
__ssp_bos_icheck3(memset, void *, int)
   245ae:	f002 bf13 	b.w	273d8 <memset>

000245b2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   245b2:	09c3      	lsrs	r3, r0, #7
   245b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   245b8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   245bc:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   245c0:	b2c0      	uxtb	r0, r0
   245c2:	4770      	bx	lr

000245c4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   245c4:	78cb      	ldrb	r3, [r1, #3]
   245c6:	7802      	ldrb	r2, [r0, #0]
   245c8:	4053      	eors	r3, r2
   245ca:	7003      	strb	r3, [r0, #0]
   245cc:	884b      	ldrh	r3, [r1, #2]
   245ce:	7842      	ldrb	r2, [r0, #1]
   245d0:	4053      	eors	r3, r2
   245d2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   245d4:	680a      	ldr	r2, [r1, #0]
   245d6:	7883      	ldrb	r3, [r0, #2]
   245d8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   245dc:	7083      	strb	r3, [r0, #2]
   245de:	680a      	ldr	r2, [r1, #0]
   245e0:	78c3      	ldrb	r3, [r0, #3]
   245e2:	4053      	eors	r3, r2
   245e4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   245e6:	79cb      	ldrb	r3, [r1, #7]
   245e8:	7902      	ldrb	r2, [r0, #4]
   245ea:	4053      	eors	r3, r2
   245ec:	7103      	strb	r3, [r0, #4]
   245ee:	88cb      	ldrh	r3, [r1, #6]
   245f0:	7942      	ldrb	r2, [r0, #5]
   245f2:	4053      	eors	r3, r2
   245f4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   245f6:	684a      	ldr	r2, [r1, #4]
   245f8:	7983      	ldrb	r3, [r0, #6]
   245fa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   245fe:	7183      	strb	r3, [r0, #6]
   24600:	684a      	ldr	r2, [r1, #4]
   24602:	79c3      	ldrb	r3, [r0, #7]
   24604:	4053      	eors	r3, r2
   24606:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   24608:	7acb      	ldrb	r3, [r1, #11]
   2460a:	7a02      	ldrb	r2, [r0, #8]
   2460c:	4053      	eors	r3, r2
   2460e:	7203      	strb	r3, [r0, #8]
   24610:	7a42      	ldrb	r2, [r0, #9]
   24612:	894b      	ldrh	r3, [r1, #10]
   24614:	4053      	eors	r3, r2
   24616:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   24618:	688a      	ldr	r2, [r1, #8]
   2461a:	7a83      	ldrb	r3, [r0, #10]
   2461c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24620:	7283      	strb	r3, [r0, #10]
   24622:	688a      	ldr	r2, [r1, #8]
   24624:	7ac3      	ldrb	r3, [r0, #11]
   24626:	4053      	eors	r3, r2
   24628:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2462a:	7bcb      	ldrb	r3, [r1, #15]
   2462c:	7b02      	ldrb	r2, [r0, #12]
   2462e:	4053      	eors	r3, r2
   24630:	7303      	strb	r3, [r0, #12]
   24632:	89cb      	ldrh	r3, [r1, #14]
   24634:	7b42      	ldrb	r2, [r0, #13]
   24636:	4053      	eors	r3, r2
   24638:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2463a:	68ca      	ldr	r2, [r1, #12]
   2463c:	7b83      	ldrb	r3, [r0, #14]
   2463e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24642:	7383      	strb	r3, [r0, #14]
   24644:	68ca      	ldr	r2, [r1, #12]
   24646:	7bc3      	ldrb	r3, [r0, #15]
   24648:	4053      	eors	r3, r2
   2464a:	73c3      	strb	r3, [r0, #15]
}
   2464c:	4770      	bx	lr

0002464e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2464e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   24650:	7802      	ldrb	r2, [r0, #0]
   24652:	f88d 2000 	strb.w	r2, [sp]
   24656:	7942      	ldrb	r2, [r0, #5]
   24658:	f88d 2001 	strb.w	r2, [sp, #1]
   2465c:	7a82      	ldrb	r2, [r0, #10]
   2465e:	f88d 2002 	strb.w	r2, [sp, #2]
   24662:	7bc2      	ldrb	r2, [r0, #15]
   24664:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   24668:	7902      	ldrb	r2, [r0, #4]
   2466a:	f88d 2004 	strb.w	r2, [sp, #4]
   2466e:	7a42      	ldrb	r2, [r0, #9]
   24670:	f88d 2005 	strb.w	r2, [sp, #5]
   24674:	7b82      	ldrb	r2, [r0, #14]
   24676:	f88d 2006 	strb.w	r2, [sp, #6]
   2467a:	78c2      	ldrb	r2, [r0, #3]
   2467c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   24680:	7a02      	ldrb	r2, [r0, #8]
   24682:	f88d 2008 	strb.w	r2, [sp, #8]
   24686:	7b42      	ldrb	r2, [r0, #13]
   24688:	f88d 2009 	strb.w	r2, [sp, #9]
   2468c:	7882      	ldrb	r2, [r0, #2]
   2468e:	f88d 200a 	strb.w	r2, [sp, #10]
   24692:	79c2      	ldrb	r2, [r0, #7]
   24694:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   24698:	7b02      	ldrb	r2, [r0, #12]
   2469a:	f88d 200c 	strb.w	r2, [sp, #12]
   2469e:	7842      	ldrb	r2, [r0, #1]
   246a0:	7ac3      	ldrb	r3, [r0, #11]
   246a2:	f88d 200d 	strb.w	r2, [sp, #13]
   246a6:	7982      	ldrb	r2, [r0, #6]
   246a8:	f88d 200e 	strb.w	r2, [sp, #14]
   246ac:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   246b0:	2310      	movs	r3, #16
   246b2:	466a      	mov	r2, sp
   246b4:	4619      	mov	r1, r3
   246b6:	f7ff ff6d 	bl	24594 <_copy>
}
   246ba:	b005      	add	sp, #20
   246bc:	f85d fb04 	ldr.w	pc, [sp], #4

000246c0 <mult_row_column>:
{
   246c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   246c2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   246c4:	7808      	ldrb	r0, [r1, #0]
{
   246c6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   246c8:	f7ff ff73 	bl	245b2 <_double_byte>
   246cc:	4605      	mov	r5, r0
   246ce:	7860      	ldrb	r0, [r4, #1]
   246d0:	f7ff ff6f 	bl	245b2 <_double_byte>
   246d4:	78a2      	ldrb	r2, [r4, #2]
   246d6:	7863      	ldrb	r3, [r4, #1]
   246d8:	4053      	eors	r3, r2
   246da:	78e2      	ldrb	r2, [r4, #3]
   246dc:	4053      	eors	r3, r2
   246de:	405d      	eors	r5, r3
   246e0:	4068      	eors	r0, r5
   246e2:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   246e4:	7860      	ldrb	r0, [r4, #1]
   246e6:	7827      	ldrb	r7, [r4, #0]
   246e8:	f7ff ff63 	bl	245b2 <_double_byte>
   246ec:	4605      	mov	r5, r0
   246ee:	78a0      	ldrb	r0, [r4, #2]
   246f0:	f7ff ff5f 	bl	245b2 <_double_byte>
   246f4:	78a3      	ldrb	r3, [r4, #2]
   246f6:	405f      	eors	r7, r3
   246f8:	78e3      	ldrb	r3, [r4, #3]
   246fa:	405f      	eors	r7, r3
   246fc:	407d      	eors	r5, r7
   246fe:	4068      	eors	r0, r5
   24700:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24702:	7863      	ldrb	r3, [r4, #1]
   24704:	7827      	ldrb	r7, [r4, #0]
   24706:	78a0      	ldrb	r0, [r4, #2]
   24708:	405f      	eors	r7, r3
   2470a:	f7ff ff52 	bl	245b2 <_double_byte>
   2470e:	4605      	mov	r5, r0
   24710:	78e0      	ldrb	r0, [r4, #3]
   24712:	f7ff ff4e 	bl	245b2 <_double_byte>
   24716:	78e3      	ldrb	r3, [r4, #3]
   24718:	405f      	eors	r7, r3
   2471a:	407d      	eors	r5, r7
   2471c:	4068      	eors	r0, r5
   2471e:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   24720:	7820      	ldrb	r0, [r4, #0]
   24722:	f7ff ff46 	bl	245b2 <_double_byte>
   24726:	7862      	ldrb	r2, [r4, #1]
   24728:	7823      	ldrb	r3, [r4, #0]
   2472a:	4053      	eors	r3, r2
   2472c:	78a2      	ldrb	r2, [r4, #2]
   2472e:	4053      	eors	r3, r2
   24730:	ea80 0503 	eor.w	r5, r0, r3
   24734:	78e0      	ldrb	r0, [r4, #3]
   24736:	f7ff ff3c 	bl	245b2 <_double_byte>
   2473a:	b2ed      	uxtb	r5, r5
   2473c:	4045      	eors	r5, r0
   2473e:	70f5      	strb	r5, [r6, #3]
}
   24740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024742 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   24742:	b570      	push	{r4, r5, r6, lr}
   24744:	4614      	mov	r4, r2
   24746:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   24748:	4605      	mov	r5, r0
   2474a:	2800      	cmp	r0, #0
   2474c:	d049      	beq.n	247e2 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2474e:	2900      	cmp	r1, #0
   24750:	d049      	beq.n	247e6 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   24752:	2a00      	cmp	r2, #0
   24754:	d049      	beq.n	247ea <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   24756:	2310      	movs	r3, #16
   24758:	460a      	mov	r2, r1
   2475a:	4668      	mov	r0, sp
   2475c:	4619      	mov	r1, r3
   2475e:	f7ff ff19 	bl	24594 <_copy>
	add_round_key(state, s->words);
   24762:	4621      	mov	r1, r4
   24764:	4668      	mov	r0, sp
   24766:	f7ff ff2d 	bl	245c4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2476a:	3410      	adds	r4, #16
   2476c:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   24770:	4668      	mov	r0, sp
   24772:	f7f0 f965 	bl	14a40 <sub_bytes>
		shift_rows(state);
   24776:	4668      	mov	r0, sp
   24778:	f7ff ff69 	bl	2464e <shift_rows>
	mult_row_column(t, s);
   2477c:	4669      	mov	r1, sp
   2477e:	a804      	add	r0, sp, #16
   24780:	f7ff ff9e 	bl	246c0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   24784:	a901      	add	r1, sp, #4
   24786:	a805      	add	r0, sp, #20
   24788:	f7ff ff9a 	bl	246c0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2478c:	a902      	add	r1, sp, #8
   2478e:	a806      	add	r0, sp, #24
   24790:	f7ff ff96 	bl	246c0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   24794:	a903      	add	r1, sp, #12
   24796:	a807      	add	r0, sp, #28
   24798:	f7ff ff92 	bl	246c0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2479c:	2310      	movs	r3, #16
   2479e:	4619      	mov	r1, r3
   247a0:	eb0d 0203 	add.w	r2, sp, r3
   247a4:	4668      	mov	r0, sp
   247a6:	f7ff fef5 	bl	24594 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   247aa:	4621      	mov	r1, r4
   247ac:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   247ae:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   247b0:	f7ff ff08 	bl	245c4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   247b4:	42b4      	cmp	r4, r6
   247b6:	d1db      	bne.n	24770 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   247b8:	f7f0 f942 	bl	14a40 <sub_bytes>
	shift_rows(state);
   247bc:	4668      	mov	r0, sp
   247be:	f7ff ff46 	bl	2464e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   247c2:	4621      	mov	r1, r4
   247c4:	4668      	mov	r0, sp
   247c6:	f7ff fefd 	bl	245c4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   247ca:	2310      	movs	r3, #16
   247cc:	4619      	mov	r1, r3
   247ce:	466a      	mov	r2, sp
   247d0:	4628      	mov	r0, r5
   247d2:	f7ff fedf 	bl	24594 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   247d6:	4668      	mov	r0, sp
   247d8:	2210      	movs	r2, #16
   247da:	2100      	movs	r1, #0
   247dc:	f7ff fee7 	bl	245ae <_set>

	return TC_CRYPTO_SUCCESS;
   247e0:	2001      	movs	r0, #1
}
   247e2:	b008      	add	sp, #32
   247e4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   247e6:	4608      	mov	r0, r1
   247e8:	e7fb      	b.n	247e2 <tc_aes_encrypt+0xa0>
   247ea:	4610      	mov	r0, r2
   247ec:	e7f9      	b.n	247e2 <tc_aes_encrypt+0xa0>

000247ee <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   247ee:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   247f0:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   247f2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   247f4:	f912 3b10 	ldrsb.w	r3, [r2], #16
   247f8:	2b00      	cmp	r3, #0
   247fa:	bfac      	ite	ge
   247fc:	2300      	movge	r3, #0
   247fe:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24800:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24804:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   24808:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2480a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2480e:	d002      	beq.n	24816 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   24810:	7813      	ldrb	r3, [r2, #0]
   24812:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   24814:	e7f4      	b.n	24800 <gf_double+0x12>
	}
}
   24816:	bd10      	pop	{r4, pc}

00024818 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   24818:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2481a:	b120      	cbz	r0, 24826 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2481c:	2258      	movs	r2, #88	; 0x58
   2481e:	2100      	movs	r1, #0
   24820:	f7ff fec5 	bl	245ae <_set>
   24824:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24826:	bd08      	pop	{r3, pc}

00024828 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   24828:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2482a:	4604      	mov	r4, r0
   2482c:	b188      	cbz	r0, 24852 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2482e:	2210      	movs	r2, #16
   24830:	2100      	movs	r1, #0
   24832:	f7ff febc 	bl	245ae <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   24836:	2210      	movs	r2, #16
   24838:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2483c:	2100      	movs	r1, #0
   2483e:	f7ff feb6 	bl	245ae <_set>
	s->leftover_offset = 0;
   24842:	2300      	movs	r3, #0
   24844:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   24846:	2200      	movs	r2, #0
   24848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2484c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   24850:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24852:	bd10      	pop	{r4, pc}

00024854 <tc_cmac_setup>:
{
   24854:	b570      	push	{r4, r5, r6, lr}
   24856:	4604      	mov	r4, r0
   24858:	460d      	mov	r5, r1
   2485a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2485c:	b310      	cbz	r0, 248a4 <tc_cmac_setup+0x50>
   2485e:	b311      	cbz	r1, 248a6 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   24860:	2258      	movs	r2, #88	; 0x58
   24862:	2100      	movs	r1, #0
   24864:	f7ff fea3 	bl	245ae <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   24868:	4629      	mov	r1, r5
	s->sched = sched;
   2486a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2486c:	4630      	mov	r0, r6
   2486e:	f7f0 f8f3 	bl	14a58 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24872:	2210      	movs	r2, #16
   24874:	2100      	movs	r1, #0
   24876:	4620      	mov	r0, r4
   24878:	f7ff fe99 	bl	245ae <_set>
	gf_double (s->K1, s->iv);
   2487c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   24880:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24882:	4621      	mov	r1, r4
   24884:	4620      	mov	r0, r4
   24886:	f7ff ff5c 	bl	24742 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2488a:	4621      	mov	r1, r4
   2488c:	4628      	mov	r0, r5
   2488e:	f7ff ffae 	bl	247ee <gf_double>
	gf_double (s->K2, s->K1);
   24892:	4629      	mov	r1, r5
   24894:	f104 0020 	add.w	r0, r4, #32
   24898:	f7ff ffa9 	bl	247ee <gf_double>
	tc_cmac_init(s);
   2489c:	4620      	mov	r0, r4
   2489e:	f7ff ffc3 	bl	24828 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   248a2:	2001      	movs	r0, #1
}
   248a4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   248a6:	4608      	mov	r0, r1
   248a8:	e7fc      	b.n	248a4 <tc_cmac_setup+0x50>

000248aa <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   248aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248ae:	460e      	mov	r6, r1
   248b0:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   248b2:	4604      	mov	r4, r0
   248b4:	2800      	cmp	r0, #0
   248b6:	d060      	beq.n	2497a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   248b8:	b1fa      	cbz	r2, 248fa <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   248ba:	2900      	cmp	r1, #0
   248bc:	d05d      	beq.n	2497a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   248be:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   248c2:	ea53 0102 	orrs.w	r1, r3, r2
   248c6:	d058      	beq.n	2497a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   248c8:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   248ca:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   248ce:	f142 32ff 	adc.w	r2, r2, #4294967295
   248d2:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   248d6:	f1b8 0f00 	cmp.w	r8, #0
   248da:	d02c      	beq.n	24936 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   248dc:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   248e0:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   248e4:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   248e6:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   248e8:	d20a      	bcs.n	24900 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   248ea:	462b      	mov	r3, r5
   248ec:	4632      	mov	r2, r6
   248ee:	4629      	mov	r1, r5
   248f0:	f7ff fe50 	bl	24594 <_copy>
			s->leftover_offset += data_length;
   248f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   248f6:	442b      	add	r3, r5
   248f8:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   248fa:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   248fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   24900:	463b      	mov	r3, r7
   24902:	4632      	mov	r2, r6
   24904:	4639      	mov	r1, r7
   24906:	f7ff fe45 	bl	24594 <_copy>
		data_length -= remaining_space;
   2490a:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   2490c:	2300      	movs	r3, #0
   2490e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   24910:	4445      	add	r5, r8
		data += remaining_space;
   24912:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24914:	1e63      	subs	r3, r4, #1
   24916:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2491a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2491e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24922:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   24924:	ea82 0200 	eor.w	r2, r2, r0
   24928:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2492a:	d1f6      	bne.n	2491a <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2492c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2492e:	4621      	mov	r1, r4
   24930:	4620      	mov	r0, r4
   24932:	f7ff ff06 	bl	24742 <tc_aes_encrypt>
   24936:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2493a:	2d10      	cmp	r5, #16
   2493c:	d80a      	bhi.n	24954 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2493e:	2d00      	cmp	r5, #0
   24940:	d0db      	beq.n	248fa <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   24942:	462b      	mov	r3, r5
   24944:	4632      	mov	r2, r6
   24946:	4629      	mov	r1, r5
   24948:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2494c:	f7ff fe22 	bl	24594 <_copy>
		s->leftover_offset = data_length;
   24950:	6465      	str	r5, [r4, #68]	; 0x44
   24952:	e7d2      	b.n	248fa <tc_cmac_update+0x50>
   24954:	1e63      	subs	r3, r4, #1
   24956:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   24958:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2495c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24960:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   24962:	ea82 0200 	eor.w	r2, r2, r0
   24966:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24968:	d1f6      	bne.n	24958 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2496a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2496c:	4621      	mov	r1, r4
   2496e:	4620      	mov	r0, r4
   24970:	f7ff fee7 	bl	24742 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   24974:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   24976:	3d10      	subs	r5, #16
   24978:	e7df      	b.n	2493a <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2497a:	2000      	movs	r0, #0
   2497c:	e7be      	b.n	248fc <tc_cmac_update+0x52>

0002497e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2497e:	b570      	push	{r4, r5, r6, lr}
   24980:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24982:	4605      	mov	r5, r0
   24984:	b1e8      	cbz	r0, 249c2 <tc_cmac_final+0x44>
   24986:	b369      	cbz	r1, 249e4 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   24988:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2498a:	2a10      	cmp	r2, #16
   2498c:	d11a      	bne.n	249c4 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2498e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24990:	1e63      	subs	r3, r4, #1
   24992:	3901      	subs	r1, #1
   24994:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24998:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2499c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   249a0:	4072      	eors	r2, r6
   249a2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   249a6:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   249a8:	ea82 0206 	eor.w	r2, r2, r6
   249ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   249ae:	d1f3      	bne.n	24998 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   249b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   249b2:	4621      	mov	r1, r4
   249b4:	4628      	mov	r0, r5
   249b6:	f7ff fec4 	bl	24742 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   249ba:	4620      	mov	r0, r4
   249bc:	f7ff ff2c 	bl	24818 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   249c0:	2001      	movs	r0, #1
}
   249c2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   249c4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   249c8:	2100      	movs	r1, #0
   249ca:	f1c2 0210 	rsb	r2, r2, #16
   249ce:	4420      	add	r0, r4
   249d0:	f7ff fded 	bl	245ae <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   249d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   249d6:	4423      	add	r3, r4
   249d8:	2280      	movs	r2, #128	; 0x80
   249da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   249de:	f104 0120 	add.w	r1, r4, #32
   249e2:	e7d5      	b.n	24990 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   249e4:	4608      	mov	r0, r1
   249e6:	e7ec      	b.n	249c2 <tc_cmac_final+0x44>

000249e8 <abort_function>:
{
   249e8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   249ea:	2000      	movs	r0, #0
   249ec:	f7ef f870 	bl	13ad0 <sys_reboot>

000249f0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   249f0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   249f2:	6800      	ldr	r0, [r0, #0]
   249f4:	f7f0 b98e 	b.w	14d14 <z_arm_fatal_error>

000249f8 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   249f8:	2100      	movs	r1, #0
   249fa:	2001      	movs	r0, #1
   249fc:	f7f0 b98a 	b.w	14d14 <z_arm_fatal_error>

00024a00 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   24a00:	b508      	push	{r3, lr}
	handler();
   24a02:	f7f0 fa8f 	bl	14f24 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24a0a:	f7f0 bbf7 	b.w	151fc <z_arm_exc_exit>

00024a0e <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   24a0e:	2300      	movs	r3, #0
   24a10:	f7ef bb06 	b.w	14020 <z_impl_z_log_msg_static_create>

00024a14 <malloc_prepare>:
}
   24a14:	2000      	movs	r0, #0
   24a16:	4770      	bx	lr

00024a18 <_stdout_hook_default>:
}
   24a18:	f04f 30ff 	mov.w	r0, #4294967295
   24a1c:	4770      	bx	lr

00024a1e <_stdin_hook_default>:
}
   24a1e:	2000      	movs	r0, #0
   24a20:	4770      	bx	lr

00024a22 <_read>:
{
   24a22:	4608      	mov	r0, r1
   24a24:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   24a26:	f7f1 b867 	b.w	15af8 <z_impl_zephyr_read_stdin>

00024a2a <_write>:
{
   24a2a:	4608      	mov	r0, r1
   24a2c:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   24a2e:	f7f1 b877 	b.w	15b20 <z_impl_zephyr_write_stdout>

00024a32 <_close>:
int _close(int file)
   24a32:	f04f 30ff 	mov.w	r0, #4294967295
   24a36:	4770      	bx	lr

00024a38 <_lseek>:
}
   24a38:	2000      	movs	r0, #0
   24a3a:	4770      	bx	lr

00024a3c <_isatty>:
}
   24a3c:	2802      	cmp	r0, #2
   24a3e:	bfcc      	ite	gt
   24a40:	2000      	movgt	r0, #0
   24a42:	2001      	movle	r0, #1
   24a44:	4770      	bx	lr

00024a46 <_kill>:
}
   24a46:	2000      	movs	r0, #0
   24a48:	4770      	bx	lr

00024a4a <_getpid>:
}
   24a4a:	2000      	movs	r0, #0
   24a4c:	4770      	bx	lr

00024a4e <_fstat>:
	st->st_mode = S_IFCHR;
   24a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   24a52:	604b      	str	r3, [r1, #4]
}
   24a54:	2000      	movs	r0, #0
   24a56:	4770      	bx	lr

00024a58 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   24a58:	b510      	push	{r4, lr}
   24a5a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   24a5c:	2014      	movs	r0, #20
   24a5e:	f7fa ff15 	bl	1f88c <malloc>
   24a62:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   24a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   24a68:	f001 bfdb 	b.w	26a22 <z_impl_k_mutex_init>

00024a6c <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   24a6c:	f04f 32ff 	mov.w	r2, #4294967295
   24a70:	f04f 33ff 	mov.w	r3, #4294967295
   24a74:	f7f9 bb24 	b.w	1e0c0 <z_impl_k_mutex_lock>

00024a78 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   24a78:	f7f9 bb9c 	b.w	1e1b4 <z_impl_k_mutex_unlock>

00024a7c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   24a7c:	2806      	cmp	r0, #6
   24a7e:	d108      	bne.n	24a92 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24a84:	2201      	movs	r2, #1
   24a86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24a8a:	f3bf 8f4f 	dsb	sy
        __WFE();
   24a8e:	bf20      	wfe
    while (true)
   24a90:	e7fd      	b.n	24a8e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   24a92:	4770      	bx	lr

00024a94 <pm_state_exit_post_ops>:
   24a94:	2300      	movs	r3, #0
   24a96:	f383 8811 	msr	BASEPRI, r3
   24a9a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24a9e:	4770      	bx	lr

00024aa0 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24aa0:	b510      	push	{r4, lr}
   24aa2:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24aa4:	7801      	ldrb	r1, [r0, #0]
   24aa6:	7822      	ldrb	r2, [r4, #0]
   24aa8:	428a      	cmp	r2, r1
{
   24aaa:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24aac:	d00f      	beq.n	24ace <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24aae:	4669      	mov	r1, sp
   24ab0:	f7f1 f93c 	bl	15d2c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24ab4:	a905      	add	r1, sp, #20
   24ab6:	4620      	mov	r0, r4
   24ab8:	f7f1 f938 	bl	15d2c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24abc:	2210      	movs	r2, #16
   24abe:	f10d 0115 	add.w	r1, sp, #21
   24ac2:	f10d 0001 	add.w	r0, sp, #1
   24ac6:	f002 fc69 	bl	2739c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24aca:	b00a      	add	sp, #40	; 0x28
   24acc:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24ace:	2a01      	cmp	r2, #1
   24ad0:	d006      	beq.n	24ae0 <bt_uuid_cmp+0x40>
   24ad2:	2a02      	cmp	r2, #2
   24ad4:	d007      	beq.n	24ae6 <bt_uuid_cmp+0x46>
   24ad6:	b972      	cbnz	r2, 24af6 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24ad8:	8840      	ldrh	r0, [r0, #2]
   24ada:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24adc:	1ac0      	subs	r0, r0, r3
   24ade:	e7f4      	b.n	24aca <bt_uuid_cmp+0x2a>
   24ae0:	6840      	ldr	r0, [r0, #4]
   24ae2:	6863      	ldr	r3, [r4, #4]
   24ae4:	e7fa      	b.n	24adc <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24ae6:	2210      	movs	r2, #16
   24ae8:	1c61      	adds	r1, r4, #1
   24aea:	3001      	adds	r0, #1
}
   24aec:	b00a      	add	sp, #40	; 0x28
   24aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24af2:	f002 bc53 	b.w	2739c <memcmp>
	switch (u1->type) {
   24af6:	f06f 0015 	mvn.w	r0, #21
   24afa:	e7e6      	b.n	24aca <bt_uuid_cmp+0x2a>

00024afc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24afc:	2a04      	cmp	r2, #4
   24afe:	d00a      	beq.n	24b16 <bt_uuid_create+0x1a>
   24b00:	2a10      	cmp	r2, #16
   24b02:	d00d      	beq.n	24b20 <bt_uuid_create+0x24>
   24b04:	2a02      	cmp	r2, #2
   24b06:	f04f 0300 	mov.w	r3, #0
   24b0a:	d115      	bne.n	24b38 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   24b0c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24b0e:	880b      	ldrh	r3, [r1, #0]
   24b10:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24b12:	2001      	movs	r0, #1
   24b14:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   24b16:	2301      	movs	r3, #1
   24b18:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24b1a:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24b1c:	6043      	str	r3, [r0, #4]
		break;
   24b1e:	e7f8      	b.n	24b12 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   24b20:	2302      	movs	r3, #2
   24b22:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24b26:	f101 0310 	add.w	r3, r1, #16
   24b2a:	f851 2b04 	ldr.w	r2, [r1], #4
   24b2e:	f840 2b04 	str.w	r2, [r0], #4
   24b32:	4299      	cmp	r1, r3
   24b34:	d1f9      	bne.n	24b2a <bt_uuid_create+0x2e>
   24b36:	e7ec      	b.n	24b12 <bt_uuid_create+0x16>
	switch (data_len) {
   24b38:	4618      	mov	r0, r3
}
   24b3a:	4770      	bx	lr

00024b3c <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   24b3c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   24b3e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   24b40:	2106      	movs	r1, #6
{
   24b42:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24b44:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24b48:	f7f8 f8a6 	bl	1cc98 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   24b4c:	b918      	cbnz	r0, 24b56 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   24b4e:	79a3      	ldrb	r3, [r4, #6]
   24b50:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24b54:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24b56:	bd10      	pop	{r4, pc}

00024b58 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24b58:	280f      	cmp	r0, #15
   24b5a:	d807      	bhi.n	24b6c <bt_hci_evt_get_flags+0x14>
   24b5c:	280d      	cmp	r0, #13
   24b5e:	d80b      	bhi.n	24b78 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   24b60:	2805      	cmp	r0, #5
   24b62:	bf08      	it	eq
   24b64:	2003      	moveq	r0, #3
   24b66:	bf18      	it	ne
   24b68:	2002      	movne	r0, #2
   24b6a:	4770      	bx	lr
	switch (evt) {
   24b6c:	2813      	cmp	r0, #19
   24b6e:	d003      	beq.n	24b78 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   24b70:	281a      	cmp	r0, #26
   24b72:	bf08      	it	eq
   24b74:	2001      	moveq	r0, #1
   24b76:	e7f6      	b.n	24b66 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   24b78:	2001      	movs	r0, #1
	}
}
   24b7a:	4770      	bx	lr

00024b7c <hci_vendor_event>:
}
   24b7c:	4770      	bx	lr

00024b7e <atomic_or>:
{
   24b7e:	b510      	push	{r4, lr}
   24b80:	4603      	mov	r3, r0
}
   24b82:	f3bf 8f5b 	dmb	ish
   24b86:	e853 0f00 	ldrex	r0, [r3]
   24b8a:	ea40 0201 	orr.w	r2, r0, r1
   24b8e:	e843 2400 	strex	r4, r2, [r3]
   24b92:	2c00      	cmp	r4, #0
   24b94:	d1f7      	bne.n	24b86 <atomic_or+0x8>
   24b96:	f3bf 8f5b 	dmb	ish
   24b9a:	bd10      	pop	{r4, pc}

00024b9c <bt_addr_copy>:
   24b9c:	680b      	ldr	r3, [r1, #0]
   24b9e:	6003      	str	r3, [r0, #0]
   24ba0:	888b      	ldrh	r3, [r1, #4]
   24ba2:	8083      	strh	r3, [r0, #4]
}
   24ba4:	4770      	bx	lr

00024ba6 <bt_addr_le_copy>:
   24ba6:	680b      	ldr	r3, [r1, #0]
   24ba8:	6003      	str	r3, [r0, #0]
   24baa:	888b      	ldrh	r3, [r1, #4]
   24bac:	8083      	strh	r3, [r0, #4]
   24bae:	798b      	ldrb	r3, [r1, #6]
   24bb0:	7183      	strb	r3, [r0, #6]
}
   24bb2:	4770      	bx	lr

00024bb4 <z_log_msg_static_create.constprop.0>:
   24bb4:	2300      	movs	r3, #0
   24bb6:	f7ef ba33 	b.w	14020 <z_impl_z_log_msg_static_create>

00024bba <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24bba:	f3bf 8f5b 	dmb	ish
   24bbe:	e850 3f00 	ldrex	r3, [r0]
   24bc2:	400b      	ands	r3, r1
   24bc4:	e840 3200 	strex	r2, r3, [r0]
   24bc8:	2a00      	cmp	r2, #0
   24bca:	d1f8      	bne.n	24bbe <atomic_and.isra.0+0x4>
   24bcc:	f3bf 8f5b 	dmb	ish
}
   24bd0:	4770      	bx	lr

00024bd2 <bt_hci_disconnect>:
{
   24bd2:	b570      	push	{r4, r5, r6, lr}
   24bd4:	4606      	mov	r6, r0
   24bd6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24bd8:	f240 4006 	movw	r0, #1030	; 0x406
   24bdc:	2103      	movs	r1, #3
   24bde:	f7f1 fd75 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   24be2:	4604      	mov	r4, r0
   24be4:	b168      	cbz	r0, 24c02 <bt_hci_disconnect+0x30>
   24be6:	2103      	movs	r1, #3
   24be8:	300c      	adds	r0, #12
   24bea:	f001 fad9 	bl	261a0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   24bee:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   24bf0:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24bf2:	4621      	mov	r1, r4
   24bf4:	2200      	movs	r2, #0
}
   24bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24bfa:	f240 4006 	movw	r0, #1030	; 0x406
   24bfe:	f7f1 bd9f 	b.w	16740 <bt_hci_cmd_send_sync>
}
   24c02:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24c06:	bd70      	pop	{r4, r5, r6, pc}

00024c08 <bt_le_set_data_len>:
{
   24c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c0a:	4607      	mov	r7, r0
   24c0c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24c0e:	f242 0022 	movw	r0, #8226	; 0x2022
   24c12:	2106      	movs	r1, #6
{
   24c14:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24c16:	f7f1 fd59 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   24c1a:	4604      	mov	r4, r0
   24c1c:	b178      	cbz	r0, 24c3e <bt_le_set_data_len+0x36>
   24c1e:	2106      	movs	r1, #6
   24c20:	300c      	adds	r0, #12
   24c22:	f001 fabd 	bl	261a0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24c26:	883b      	ldrh	r3, [r7, #0]
   24c28:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24c2a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24c2c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24c2e:	4621      	mov	r1, r4
   24c30:	2200      	movs	r2, #0
}
   24c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24c36:	f242 0022 	movw	r0, #8226	; 0x2022
   24c3a:	f7f1 bd81 	b.w	16740 <bt_hci_cmd_send_sync>
}
   24c3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024c44 <bt_le_set_phy>:
{
   24c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24c48:	4681      	mov	r9, r0
   24c4a:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24c4c:	f242 0032 	movw	r0, #8242	; 0x2032
   24c50:	2107      	movs	r1, #7
{
   24c52:	f89d a020 	ldrb.w	sl, [sp, #32]
   24c56:	4617      	mov	r7, r2
   24c58:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24c5a:	f7f1 fd37 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   24c5e:	4605      	mov	r5, r0
   24c60:	b1a0      	cbz	r0, 24c8c <bt_le_set_phy+0x48>
   24c62:	2107      	movs	r1, #7
   24c64:	300c      	adds	r0, #12
   24c66:	f001 fa9b 	bl	261a0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24c6a:	f8b9 3000 	ldrh.w	r3, [r9]
   24c6e:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   24c70:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   24c74:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24c76:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   24c78:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   24c7c:	4629      	mov	r1, r5
   24c7e:	2200      	movs	r2, #0
}
   24c80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   24c84:	f242 0032 	movw	r0, #8242	; 0x2032
   24c88:	f7f1 bd5a 	b.w	16740 <bt_hci_cmd_send_sync>
}
   24c8c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024c94 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   24c94:	68c0      	ldr	r0, [r0, #12]
   24c96:	f7f1 be23 	b.w	168e0 <bt_hci_le_enh_conn_complete>

00024c9a <bt_le_conn_params_valid>:
{
   24c9a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   24c9c:	8803      	ldrh	r3, [r0, #0]
   24c9e:	8842      	ldrh	r2, [r0, #2]
   24ca0:	4293      	cmp	r3, r2
   24ca2:	d819      	bhi.n	24cd8 <bt_le_conn_params_valid+0x3e>
   24ca4:	2b05      	cmp	r3, #5
   24ca6:	d917      	bls.n	24cd8 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24ca8:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   24cac:	d814      	bhi.n	24cd8 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   24cae:	8883      	ldrh	r3, [r0, #4]
   24cb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   24cb4:	d210      	bcs.n	24cd8 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24cb6:	88c0      	ldrh	r0, [r0, #6]
   24cb8:	f1a0 010a 	sub.w	r1, r0, #10
   24cbc:	b289      	uxth	r1, r1
   24cbe:	f640 4476 	movw	r4, #3190	; 0xc76
   24cc2:	42a1      	cmp	r1, r4
   24cc4:	d808      	bhi.n	24cd8 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24cc6:	3301      	adds	r3, #1
   24cc8:	b29b      	uxth	r3, r3
   24cca:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   24ccc:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   24cd0:	bf34      	ite	cc
   24cd2:	2001      	movcc	r0, #1
   24cd4:	2000      	movcs	r0, #0
}
   24cd6:	bd10      	pop	{r4, pc}
		return false;
   24cd8:	2000      	movs	r0, #0
   24cda:	e7fc      	b.n	24cd6 <bt_le_conn_params_valid+0x3c>

00024cdc <le_conn_param_neg_reply>:
{
   24cdc:	b570      	push	{r4, r5, r6, lr}
   24cde:	4606      	mov	r6, r0
   24ce0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   24ce2:	f242 0021 	movw	r0, #8225	; 0x2021
   24ce6:	2103      	movs	r1, #3
   24ce8:	f7f1 fcf0 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   24cec:	4604      	mov	r4, r0
   24cee:	b918      	cbnz	r0, 24cf8 <le_conn_param_neg_reply+0x1c>
}
   24cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24cf4:	f7f1 b8f8 	b.w	15ee8 <le_conn_param_neg_reply.part.0>
   24cf8:	2103      	movs	r1, #3
   24cfa:	300c      	adds	r0, #12
   24cfc:	f001 fa50 	bl	261a0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   24d00:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   24d02:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   24d04:	4621      	mov	r1, r4
   24d06:	f242 0021 	movw	r0, #8225	; 0x2021
}
   24d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   24d0e:	f7f1 bf95 	b.w	16c3c <bt_hci_cmd_send>

00024d12 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   24d12:	2000      	movs	r0, #0
   24d14:	4770      	bx	lr

00024d16 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   24d16:	2000      	movs	r0, #0
   24d18:	4770      	bx	lr

00024d1a <bt_addr_le_eq>:
{
   24d1a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   24d1c:	2207      	movs	r2, #7
   24d1e:	f002 fb3d 	bl	2739c <memcmp>
}
   24d22:	fab0 f080 	clz	r0, r0
   24d26:	0940      	lsrs	r0, r0, #5
   24d28:	bd08      	pop	{r3, pc}

00024d2a <bt_addr_copy>:
   24d2a:	680b      	ldr	r3, [r1, #0]
   24d2c:	6003      	str	r3, [r0, #0]
   24d2e:	888b      	ldrh	r3, [r1, #4]
   24d30:	8083      	strh	r3, [r0, #4]
}
   24d32:	4770      	bx	lr

00024d34 <bt_addr_le_copy>:
   24d34:	680b      	ldr	r3, [r1, #0]
   24d36:	6003      	str	r3, [r0, #0]
   24d38:	888b      	ldrh	r3, [r1, #4]
   24d3a:	8083      	strh	r3, [r0, #4]
   24d3c:	798b      	ldrb	r3, [r1, #6]
   24d3e:	7183      	strb	r3, [r0, #6]
}
   24d40:	4770      	bx	lr

00024d42 <z_log_msg_static_create.constprop.0>:
   24d42:	2300      	movs	r3, #0
   24d44:	f7ef b96c 	b.w	14020 <z_impl_z_log_msg_static_create>

00024d48 <bt_lookup_id_addr>:
	return addr;
   24d48:	2800      	cmp	r0, #0
}
   24d4a:	bf0c      	ite	eq
   24d4c:	4608      	moveq	r0, r1
   24d4e:	2000      	movne	r0, #0
   24d50:	4770      	bx	lr

00024d52 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   24d52:	b118      	cbz	r0, 24d5c <bt_id_set_adv_random_addr+0xa>
   24d54:	b111      	cbz	r1, 24d5c <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   24d56:	4608      	mov	r0, r1
   24d58:	f7f2 bc60 	b.w	1761c <set_random_address>
}
   24d5c:	f06f 0015 	mvn.w	r0, #21
   24d60:	4770      	bx	lr

00024d62 <bt_id_set_adv_private_addr>:
{
   24d62:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   24d64:	4604      	mov	r4, r0
   24d66:	b180      	cbz	r0, 24d8a <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   24d68:	2106      	movs	r1, #6
   24d6a:	4668      	mov	r0, sp
   24d6c:	f7f7 ff94 	bl	1cc98 <bt_rand>
	if (err) {
   24d70:	b948      	cbnz	r0, 24d86 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   24d72:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24d76:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   24d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24d7c:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   24d7e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24d82:	f7ff ffe6 	bl	24d52 <bt_id_set_adv_random_addr>
}
   24d86:	b002      	add	sp, #8
   24d88:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24d8a:	f06f 0015 	mvn.w	r0, #21
   24d8e:	e7fa      	b.n	24d86 <bt_id_set_adv_private_addr+0x24>

00024d90 <bt_id_adv_random_addr_check>:
}
   24d90:	3800      	subs	r0, #0
   24d92:	bf18      	it	ne
   24d94:	2001      	movne	r0, #1
   24d96:	4770      	bx	lr

00024d98 <get_adv_channel_map>:
{
   24d98:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24d9a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24d9e:	bf0c      	ite	eq
   24da0:	2007      	moveq	r0, #7
   24da2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24da4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24da6:	bf48      	it	mi
   24da8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24dac:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24dae:	bf48      	it	mi
   24db0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24db4:	4770      	bx	lr

00024db6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24db6:	f3bf 8f5b 	dmb	ish
   24dba:	6800      	ldr	r0, [r0, #0]
   24dbc:	f3bf 8f5b 	dmb	ish
}
   24dc0:	4770      	bx	lr

00024dc2 <atomic_and>:
{
   24dc2:	b510      	push	{r4, lr}
   24dc4:	4603      	mov	r3, r0
}
   24dc6:	f3bf 8f5b 	dmb	ish
   24dca:	e853 0f00 	ldrex	r0, [r3]
   24dce:	ea00 0201 	and.w	r2, r0, r1
   24dd2:	e843 2400 	strex	r4, r2, [r3]
   24dd6:	2c00      	cmp	r4, #0
   24dd8:	d1f7      	bne.n	24dca <atomic_and+0x8>
   24dda:	f3bf 8f5b 	dmb	ish
   24dde:	bd10      	pop	{r4, pc}

00024de0 <bt_addr_le_copy>:
   24de0:	680b      	ldr	r3, [r1, #0]
   24de2:	6003      	str	r3, [r0, #0]
   24de4:	888b      	ldrh	r3, [r1, #4]
   24de6:	8083      	strh	r3, [r0, #4]
   24de8:	798b      	ldrb	r3, [r1, #6]
   24dea:	7183      	strb	r3, [r0, #6]
   24dec:	4770      	bx	lr

00024dee <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24dee:	2301      	movs	r3, #1
{
   24df0:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24df2:	fa03 f101 	lsl.w	r1, r3, r1
{
   24df6:	4604      	mov	r4, r0
	if (val) {
   24df8:	b16a      	cbz	r2, 24e16 <atomic_set_bit_to+0x28>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24dfa:	f3bf 8f5b 	dmb	ish
   24dfe:	e854 3f00 	ldrex	r3, [r4]
   24e02:	430b      	orrs	r3, r1
   24e04:	e844 3200 	strex	r2, r3, [r4]
   24e08:	2a00      	cmp	r2, #0
   24e0a:	d1f8      	bne.n	24dfe <atomic_set_bit_to+0x10>
   24e0c:	f3bf 8f5b 	dmb	ish
	}
}
   24e10:	f85d 4b04 	ldr.w	r4, [sp], #4
   24e14:	4770      	bx	lr
   24e16:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24e1a:	43c9      	mvns	r1, r1
   24e1c:	f7ff bfd1 	b.w	24dc2 <atomic_and>

00024e20 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   24e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e24:	b087      	sub	sp, #28
   24e26:	4605      	mov	r5, r0
   24e28:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   24e2c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   24e30:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   24e34:	460c      	mov	r4, r1
   24e36:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   24e38:	2100      	movs	r1, #0
   24e3a:	2210      	movs	r2, #16
   24e3c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   24e3e:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   24e40:	f002 faca 	bl	273d8 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   24e44:	b9ee      	cbnz	r6, 24e82 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   24e46:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   24e4a:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   24e4c:	a902      	add	r1, sp, #8
   24e4e:	f242 0008 	movw	r0, #8200	; 0x2008
   24e52:	f7f2 fdc1 	bl	179d8 <hci_set_ad>
		if (err) {
   24e56:	4604      	mov	r4, r0
   24e58:	b978      	cbnz	r0, 24e7a <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   24e5a:	f1ba 0f00 	cmp.w	sl, #0
   24e5e:	d13e      	bne.n	24ede <le_adv_update.constprop.0+0xbe>
   24e60:	3510      	adds	r5, #16
   24e62:	f3bf 8f5b 	dmb	ish
   24e66:	e855 3f00 	ldrex	r3, [r5]
   24e6a:	f043 0304 	orr.w	r3, r3, #4
   24e6e:	e845 3200 	strex	r2, r3, [r5]
   24e72:	2a00      	cmp	r2, #0
   24e74:	d1f7      	bne.n	24e66 <le_adv_update.constprop.0+0x46>
   24e76:	f3bf 8f5b 	dmb	ish
}
   24e7a:	4620      	mov	r0, r4
   24e7c:	b007      	add	sp, #28
   24e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   24e82:	f7f2 fb81 	bl	17588 <bt_get_name>
   24e86:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   24e88:	b9e4      	cbnz	r4, 24ec4 <le_adv_update.constprop.0+0xa4>
   24e8a:	bb37      	cbnz	r7, 24eda <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   24e8c:	4658      	mov	r0, fp
   24e8e:	f7e7 fe25 	bl	cadc <strlen>
   24e92:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   24e94:	2e01      	cmp	r6, #1
		d[0].data = ad;
   24e96:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   24e9a:	f88d 3000 	strb.w	r3, [sp]
   24e9e:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   24ea2:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   24ea6:	d1d0      	bne.n	24e4a <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   24ea8:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   24eac:	9605      	str	r6, [sp, #20]
			d_len = 2;
   24eae:	2202      	movs	r2, #2
   24eb0:	e7cc      	b.n	24e4c <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24eb2:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   24eb6:	3a08      	subs	r2, #8
   24eb8:	2a01      	cmp	r2, #1
   24eba:	d925      	bls.n	24f08 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24ebc:	3301      	adds	r3, #1
   24ebe:	4598      	cmp	r8, r3
   24ec0:	d1f7      	bne.n	24eb2 <le_adv_update.constprop.0+0x92>
   24ec2:	e7e2      	b.n	24e8a <le_adv_update.constprop.0+0x6a>
   24ec4:	2300      	movs	r3, #0
   24ec6:	e7fa      	b.n	24ebe <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24ec8:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   24ecc:	3a08      	subs	r2, #8
   24ece:	2a01      	cmp	r2, #1
   24ed0:	d91a      	bls.n	24f08 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24ed2:	3301      	adds	r3, #1
   24ed4:	4599      	cmp	r9, r3
   24ed6:	d1f7      	bne.n	24ec8 <le_adv_update.constprop.0+0xa8>
   24ed8:	e7d8      	b.n	24e8c <le_adv_update.constprop.0+0x6c>
   24eda:	2300      	movs	r3, #0
   24edc:	e7fa      	b.n	24ed4 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   24ede:	2e02      	cmp	r6, #2
   24ee0:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   24ee4:	bf08      	it	eq
   24ee6:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24ee8:	a902      	add	r1, sp, #8
			d_len = 2;
   24eea:	bf08      	it	eq
   24eec:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24eee:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   24ef2:	bf08      	it	eq
   24ef4:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   24ef8:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24efc:	f7f2 fd6c 	bl	179d8 <hci_set_ad>
		if (err) {
   24f00:	2800      	cmp	r0, #0
   24f02:	d0ad      	beq.n	24e60 <le_adv_update.constprop.0+0x40>
   24f04:	4604      	mov	r4, r0
   24f06:	e7b8      	b.n	24e7a <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   24f08:	f06f 0415 	mvn.w	r4, #21
   24f0c:	e7b5      	b.n	24e7a <le_adv_update.constprop.0+0x5a>

00024f0e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   24f0e:	6843      	ldr	r3, [r0, #4]
   24f10:	f013 0008 	ands.w	r0, r3, #8
   24f14:	d00a      	beq.n	24f2c <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   24f16:	035a      	lsls	r2, r3, #13
   24f18:	d407      	bmi.n	24f2a <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   24f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   24f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24f22:	bf14      	ite	ne
   24f24:	2002      	movne	r0, #2
   24f26:	2001      	moveq	r0, #1
   24f28:	4770      	bx	lr
   24f2a:	2001      	movs	r0, #1
}
   24f2c:	4770      	bx	lr

00024f2e <bt_le_adv_set_enable_legacy>:
{
   24f2e:	b570      	push	{r4, r5, r6, lr}
   24f30:	4606      	mov	r6, r0
   24f32:	b086      	sub	sp, #24
   24f34:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   24f36:	f242 000a 	movw	r0, #8202	; 0x200a
   24f3a:	2101      	movs	r1, #1
   24f3c:	f7f1 fbc6 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   24f40:	4604      	mov	r4, r0
   24f42:	b1b0      	cbz	r0, 24f72 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   24f44:	300c      	adds	r0, #12
	if (enable) {
   24f46:	b195      	cbz	r5, 24f6e <bt_le_adv_set_enable_legacy+0x40>
   24f48:	2101      	movs	r1, #1
   24f4a:	f001 f938 	bl	261be <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   24f4e:	f106 0210 	add.w	r2, r6, #16
   24f52:	a903      	add	r1, sp, #12
   24f54:	4620      	mov	r0, r4
   24f56:	9500      	str	r5, [sp, #0]
   24f58:	2307      	movs	r3, #7
   24f5a:	f7f1 fba5 	bl	166a8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   24f5e:	2200      	movs	r2, #0
   24f60:	4621      	mov	r1, r4
   24f62:	f242 000a 	movw	r0, #8202	; 0x200a
   24f66:	f7f1 fbeb 	bl	16740 <bt_hci_cmd_send_sync>
}
   24f6a:	b006      	add	sp, #24
   24f6c:	bd70      	pop	{r4, r5, r6, pc}
   24f6e:	4629      	mov	r1, r5
   24f70:	e7eb      	b.n	24f4a <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   24f72:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24f76:	e7f8      	b.n	24f6a <bt_le_adv_set_enable_legacy+0x3c>

00024f78 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   24f78:	3018      	adds	r0, #24
   24f7a:	f001 bec0 	b.w	26cfe <k_work_cancel_delayable>

00024f7e <z_log_msg_static_create.constprop.0>:
   24f7e:	2300      	movs	r3, #0
   24f80:	f7ef b84e 	b.w	14020 <z_impl_z_log_msg_static_create>

00024f84 <tx_complete_work>:
	tx_notify(conn);
   24f84:	3828      	subs	r0, #40	; 0x28
   24f86:	f7f3 b84b 	b.w	18020 <tx_notify>

00024f8a <bt_conn_reset_rx_state>:
{
   24f8a:	b510      	push	{r4, lr}
   24f8c:	4604      	mov	r4, r0
	if (!conn->rx) {
   24f8e:	6900      	ldr	r0, [r0, #16]
   24f90:	b118      	cbz	r0, 24f9a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24f92:	f7f5 ff59 	bl	1ae48 <net_buf_unref>
	conn->rx = NULL;
   24f96:	2300      	movs	r3, #0
   24f98:	6123      	str	r3, [r4, #16]
}
   24f9a:	bd10      	pop	{r4, pc}

00024f9c <conn_cleanup>:
{
   24f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24fa0:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   24fa2:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   24fa4:	f104 0638 	add.w	r6, r4, #56	; 0x38
   24fa8:	2300      	movs	r3, #0
   24faa:	2200      	movs	r2, #0
   24fac:	4630      	mov	r0, r6
   24fae:	f001 f89c 	bl	260ea <net_buf_get>
   24fb2:	4603      	mov	r3, r0
   24fb4:	b950      	cbnz	r0, 24fcc <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   24fb6:	4620      	mov	r0, r4
   24fb8:	f7ff ffe7 	bl	24f8a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   24fbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24fc0:	2200      	movs	r2, #0
}
   24fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   24fc6:	2300      	movs	r3, #0
   24fc8:	f7f9 bae0 	b.w	1e58c <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   24fcc:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   24fce:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   24fd0:	f7f5 ff3a 	bl	1ae48 <net_buf_unref>
		if (tx) {
   24fd4:	2d00      	cmp	r5, #0
   24fd6:	d0e7      	beq.n	24fa8 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   24fd8:	4629      	mov	r1, r5
   24fda:	4620      	mov	r0, r4
   24fdc:	f7f3 f850 	bl	18080 <conn_tx_destroy>
   24fe0:	e7e0      	b.n	24fa4 <conn_cleanup+0x8>

00024fe2 <bt_conn_ref>:
{
   24fe2:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24fe4:	f3bf 8f5b 	dmb	ish
   24fe8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   24fec:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   24ff0:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   24ff4:	b17b      	cbz	r3, 25016 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24ff6:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   24ffa:	1c59      	adds	r1, r3, #1
   24ffc:	e852 4f00 	ldrex	r4, [r2]
   25000:	429c      	cmp	r4, r3
   25002:	d104      	bne.n	2500e <bt_conn_ref+0x2c>
   25004:	e842 1c00 	strex	ip, r1, [r2]
   25008:	f1bc 0f00 	cmp.w	ip, #0
   2500c:	d1f6      	bne.n	24ffc <bt_conn_ref+0x1a>
   2500e:	f3bf 8f5b 	dmb	ish
   25012:	d1e7      	bne.n	24fe4 <bt_conn_ref+0x2>
}
   25014:	bd10      	pop	{r4, pc}
			return NULL;
   25016:	4618      	mov	r0, r3
   25018:	e7fc      	b.n	25014 <bt_conn_ref+0x32>

0002501a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2501a:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2501e:	f3bf 8f5b 	dmb	ish
   25022:	e853 1f00 	ldrex	r1, [r3]
   25026:	3901      	subs	r1, #1
   25028:	e843 1200 	strex	r2, r1, [r3]
   2502c:	2a00      	cmp	r2, #0
   2502e:	d1f8      	bne.n	25022 <bt_conn_unref+0x8>
   25030:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   25034:	8842      	ldrh	r2, [r0, #2]
   25036:	f240 1301 	movw	r3, #257	; 0x101
   2503a:	429a      	cmp	r2, r3
   2503c:	d108      	bne.n	25050 <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2503e:	f3bf 8f5b 	dmb	ish
   25042:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   25046:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2504a:	b90b      	cbnz	r3, 25050 <bt_conn_unref+0x36>
		bt_le_adv_resume();
   2504c:	f7f2 bf72 	b.w	17f34 <bt_le_adv_resume>
}
   25050:	4770      	bx	lr

00025052 <conn_lookup_handle>:
{
   25052:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25056:	4607      	mov	r7, r0
   25058:	460e      	mov	r6, r1
   2505a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2505c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2505e:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   25062:	42b4      	cmp	r4, r6
   25064:	d103      	bne.n	2506e <conn_lookup_handle+0x1c>
	return NULL;
   25066:	2300      	movs	r3, #0
}
   25068:	4618      	mov	r0, r3
   2506a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2506e:	fb09 7004 	mla	r0, r9, r4, r7
   25072:	f7ff ffb6 	bl	24fe2 <bt_conn_ref>
   25076:	4603      	mov	r3, r0
		if (!conn) {
   25078:	b158      	cbz	r0, 25092 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2507a:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2507c:	2d01      	cmp	r5, #1
   2507e:	d002      	beq.n	25086 <conn_lookup_handle+0x34>
   25080:	3d07      	subs	r5, #7
   25082:	2d01      	cmp	r5, #1
   25084:	d803      	bhi.n	2508e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   25086:	881a      	ldrh	r2, [r3, #0]
   25088:	4542      	cmp	r2, r8
   2508a:	d0ed      	beq.n	25068 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2508c:	4618      	mov	r0, r3
   2508e:	f7ff ffc4 	bl	2501a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   25092:	3401      	adds	r4, #1
   25094:	e7e5      	b.n	25062 <conn_lookup_handle+0x10>

00025096 <bt_conn_connected>:
{
   25096:	b510      	push	{r4, lr}
   25098:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2509a:	f7f3 fe45 	bl	18d28 <bt_l2cap_connected>
	notify_connected(conn);
   2509e:	4620      	mov	r0, r4
}
   250a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   250a4:	f7f2 bf8a 	b.w	17fbc <notify_connected>

000250a8 <bt_conn_get_security>:
}
   250a8:	2001      	movs	r0, #1
   250aa:	4770      	bx	lr

000250ac <bt_conn_is_peer_addr_le>:
{
   250ac:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   250ae:	7a03      	ldrb	r3, [r0, #8]
   250b0:	428b      	cmp	r3, r1
{
   250b2:	4604      	mov	r4, r0
   250b4:	4615      	mov	r5, r2
	if (id != conn->id) {
   250b6:	d115      	bne.n	250e4 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   250b8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   250bc:	2207      	movs	r2, #7
   250be:	4628      	mov	r0, r5
   250c0:	f002 f96c 	bl	2739c <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   250c4:	b180      	cbz	r0, 250e8 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   250c6:	78e3      	ldrb	r3, [r4, #3]
   250c8:	2207      	movs	r2, #7
   250ca:	b943      	cbnz	r3, 250de <bt_conn_is_peer_addr_le+0x32>
   250cc:	f104 0196 	add.w	r1, r4, #150	; 0x96
   250d0:	4628      	mov	r0, r5
   250d2:	f002 f963 	bl	2739c <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   250d6:	fab0 f080 	clz	r0, r0
   250da:	0940      	lsrs	r0, r0, #5
}
   250dc:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   250de:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   250e2:	e7f5      	b.n	250d0 <bt_conn_is_peer_addr_le+0x24>
		return false;
   250e4:	2000      	movs	r0, #0
   250e6:	e7f9      	b.n	250dc <bt_conn_is_peer_addr_le+0x30>
		return true;
   250e8:	2001      	movs	r0, #1
   250ea:	e7f7      	b.n	250dc <bt_conn_is_peer_addr_le+0x30>

000250ec <bt_conn_le_conn_update>:
{
   250ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250ee:	4607      	mov	r7, r0
   250f0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   250f2:	f242 0013 	movw	r0, #8211	; 0x2013
   250f6:	210e      	movs	r1, #14
   250f8:	f7f1 fae8 	bl	166cc <bt_hci_cmd_create>
	if (!buf) {
   250fc:	4606      	mov	r6, r0
   250fe:	b1d0      	cbz	r0, 25136 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   25100:	210e      	movs	r1, #14
   25102:	300c      	adds	r0, #12
   25104:	f001 f84c 	bl	261a0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   25108:	220e      	movs	r2, #14
   2510a:	4604      	mov	r4, r0
   2510c:	2100      	movs	r1, #0
   2510e:	f002 f963 	bl	273d8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   25112:	883b      	ldrh	r3, [r7, #0]
   25114:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   25116:	882b      	ldrh	r3, [r5, #0]
   25118:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2511a:	886b      	ldrh	r3, [r5, #2]
   2511c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2511e:	88ab      	ldrh	r3, [r5, #4]
   25120:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   25122:	88eb      	ldrh	r3, [r5, #6]
   25124:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25126:	4631      	mov	r1, r6
   25128:	2200      	movs	r2, #0
}
   2512a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2512e:	f242 0013 	movw	r0, #8211	; 0x2013
   25132:	f7f1 bb05 	b.w	16740 <bt_hci_cmd_send_sync>
}
   25136:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002513c <l2cap_connected>:
}
   2513c:	4770      	bx	lr

0002513e <z_log_msg_static_create.constprop.0>:
   2513e:	2300      	movs	r3, #0
   25140:	f7ee bf6e 	b.w	14020 <z_impl_z_log_msg_static_create>

00025144 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   25144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25146:	4605      	mov	r5, r0
   25148:	460f      	mov	r7, r1
   2514a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2514c:	2300      	movs	r3, #0
   2514e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25152:	2104      	movs	r1, #4
   25154:	2000      	movs	r0, #0
   25156:	f7f3 fae1 	bl	1871c <bt_conn_create_pdu_timeout>
	if (!buf) {
   2515a:	4604      	mov	r4, r0
   2515c:	b920      	cbnz	r0, 25168 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2515e:	4628      	mov	r0, r5
}
   25160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25164:	f7f3 bda4 	b.w	18cb0 <l2cap_create_le_sig_pdu.part.0>
   25168:	2104      	movs	r1, #4
   2516a:	300c      	adds	r0, #12
   2516c:	f001 f818 	bl	261a0 <net_buf_simple_add>
	hdr->code = code;
   25170:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   25172:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   25174:	8046      	strh	r6, [r0, #2]
}
   25176:	4620      	mov	r0, r4
   25178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002517a <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2517a:	4770      	bx	lr

0002517c <bt_l2cap_chan_del>:
{
   2517c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2517e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   25182:	4604      	mov	r4, r0
	if (!chan->conn) {
   25184:	b123      	cbz	r3, 25190 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   25186:	686b      	ldr	r3, [r5, #4]
   25188:	b103      	cbz	r3, 2518c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2518a:	4798      	blx	r3
	chan->conn = NULL;
   2518c:	2300      	movs	r3, #0
   2518e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   25190:	68e3      	ldr	r3, [r4, #12]
   25192:	b10b      	cbz	r3, 25198 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   25194:	4620      	mov	r0, r4
   25196:	4798      	blx	r3
	if (ops->released) {
   25198:	6a2b      	ldr	r3, [r5, #32]
   2519a:	b11b      	cbz	r3, 251a4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2519c:	4620      	mov	r0, r4
}
   2519e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   251a2:	4718      	bx	r3
}
   251a4:	bd70      	pop	{r4, r5, r6, pc}

000251a6 <bt_l2cap_disconnected>:
{
   251a6:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   251a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   251aa:	b130      	cbz	r0, 251ba <bt_l2cap_disconnected+0x14>
	return node->next;
   251ac:	f850 4908 	ldr.w	r4, [r0], #-8
   251b0:	b104      	cbz	r4, 251b4 <bt_l2cap_disconnected+0xe>
   251b2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   251b4:	f7ff ffe2 	bl	2517c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   251b8:	b904      	cbnz	r4, 251bc <bt_l2cap_disconnected+0x16>
}
   251ba:	bd38      	pop	{r3, r4, r5, pc}
   251bc:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   251be:	b12d      	cbz	r5, 251cc <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   251c0:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   251c2:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   251c4:	f7ff ffda 	bl	2517c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   251c8:	462c      	mov	r4, r5
   251ca:	e7f7      	b.n	251bc <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   251cc:	4620      	mov	r0, r4
}
   251ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   251d2:	f7ff bfd3 	b.w	2517c <bt_l2cap_chan_del>

000251d6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   251d6:	3104      	adds	r1, #4
   251d8:	f7f3 baa0 	b.w	1871c <bt_conn_create_pdu_timeout>

000251dc <bt_l2cap_send_cb>:
{
   251dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251e0:	4614      	mov	r4, r2
   251e2:	4605      	mov	r5, r0
   251e4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   251e6:	f102 000c 	add.w	r0, r2, #12
   251ea:	2104      	movs	r1, #4
   251ec:	461e      	mov	r6, r3
   251ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   251f2:	f000 ffec 	bl	261ce <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   251f6:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   251f8:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   251fa:	3a04      	subs	r2, #4
   251fc:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   251fe:	4643      	mov	r3, r8
   25200:	4632      	mov	r2, r6
   25202:	4621      	mov	r1, r4
   25204:	4628      	mov	r0, r5
}
   25206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2520a:	f7f3 b8d3 	b.w	183b4 <bt_conn_send_cb>

0002520e <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2520e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25210:	b130      	cbz	r0, 25220 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25212:	8983      	ldrh	r3, [r0, #12]
   25214:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25216:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2521a:	d001      	beq.n	25220 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2521c:	6880      	ldr	r0, [r0, #8]
   2521e:	e7f7      	b.n	25210 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   25220:	4770      	bx	lr

00025222 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   25222:	4770      	bx	lr

00025224 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   25224:	4603      	mov	r3, r0
	return list->head;
   25226:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   25228:	b128      	cbz	r0, 25236 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2522a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2522c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2522e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25230:	4288      	cmp	r0, r1
	list->tail = node;
   25232:	bf08      	it	eq
   25234:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   25236:	4770      	bx	lr

00025238 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   25238:	4603      	mov	r3, r0
	size_t bytes = 0;
   2523a:	2000      	movs	r0, #0

	while (buf) {
   2523c:	b903      	cbnz	r3, 25240 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2523e:	4770      	bx	lr
		bytes += buf->len;
   25240:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   25242:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   25244:	4410      	add	r0, r2
		buf = buf->frags;
   25246:	e7f9      	b.n	2523c <net_buf_frags_len+0x4>

00025248 <attr_read_type_cb>:
{
   25248:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2524a:	68d4      	ldr	r4, [r2, #12]
   2524c:	7823      	ldrb	r3, [r4, #0]
   2524e:	3102      	adds	r1, #2
   25250:	b913      	cbnz	r3, 25258 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   25252:	7021      	strb	r1, [r4, #0]
	return true;
   25254:	2001      	movs	r0, #1
}
   25256:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   25258:	428b      	cmp	r3, r1
   2525a:	d0fb      	beq.n	25254 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2525c:	8a03      	ldrh	r3, [r0, #16]
   2525e:	3b02      	subs	r3, #2
   25260:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   25262:	2000      	movs	r0, #0
   25264:	6110      	str	r0, [r2, #16]
		return false;
   25266:	e7f6      	b.n	25256 <attr_read_type_cb+0xe>

00025268 <att_prepare_write_req>:
}
   25268:	2006      	movs	r0, #6
   2526a:	4770      	bx	lr

0002526c <atomic_test_bit>:
   2526c:	f3bf 8f5b 	dmb	ish
   25270:	6800      	ldr	r0, [r0, #0]
   25272:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25276:	4108      	asrs	r0, r1
}
   25278:	f000 0001 	and.w	r0, r0, #1
   2527c:	4770      	bx	lr

0002527e <write_cb>:
{
   2527e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25280:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   25282:	4601      	mov	r1, r0
{
   25284:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25286:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2528a:	6820      	ldr	r0, [r4, #0]
   2528c:	f000 fe08 	bl	25ea0 <bt_gatt_check_perm>
   25290:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   25292:	bb00      	cbnz	r0, 252d6 <write_cb+0x58>
	if (!data->req) {
   25294:	7a23      	ldrb	r3, [r4, #8]
   25296:	b1b3      	cbz	r3, 252c6 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   25298:	f1a3 0218 	sub.w	r2, r3, #24
   2529c:	4253      	negs	r3, r2
   2529e:	4153      	adcs	r3, r2
   252a0:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   252a2:	9301      	str	r3, [sp, #4]
   252a4:	8a63      	ldrh	r3, [r4, #18]
   252a6:	9300      	str	r3, [sp, #0]
   252a8:	68ae      	ldr	r6, [r5, #8]
   252aa:	8a23      	ldrh	r3, [r4, #16]
   252ac:	68e2      	ldr	r2, [r4, #12]
   252ae:	6820      	ldr	r0, [r4, #0]
   252b0:	4629      	mov	r1, r5
   252b2:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   252b4:	2800      	cmp	r0, #0
   252b6:	db08      	blt.n	252ca <write_cb+0x4c>
   252b8:	8a23      	ldrh	r3, [r4, #16]
   252ba:	4298      	cmp	r0, r3
   252bc:	d10e      	bne.n	252dc <write_cb+0x5e>
	data->err = 0U;
   252be:	2300      	movs	r3, #0
   252c0:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   252c2:	2001      	movs	r0, #1
   252c4:	e008      	b.n	252d8 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   252c6:	2302      	movs	r3, #2
   252c8:	e7eb      	b.n	252a2 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   252ca:	f110 0fff 	cmn.w	r0, #255	; 0xff
   252ce:	d305      	bcc.n	252dc <write_cb+0x5e>
		return -err;
   252d0:	4240      	negs	r0, r0
   252d2:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   252d4:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   252d6:	2000      	movs	r0, #0
}
   252d8:	b002      	add	sp, #8
   252da:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   252dc:	200e      	movs	r0, #14
   252de:	e7f9      	b.n	252d4 <write_cb+0x56>

000252e0 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   252e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   252e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   252e6:	2300      	movs	r3, #0
   252e8:	9300      	str	r3, [sp, #0]
   252ea:	461a      	mov	r2, r3
   252ec:	f7f5 f8ee 	bl	1a4cc <bt_gatt_foreach_attr_type>
				  user_data);
}
   252f0:	b005      	add	sp, #20
   252f2:	f85d fb04 	ldr.w	pc, [sp], #4

000252f6 <att_chan_mtu_updated>:
{
   252f6:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   252f8:	6805      	ldr	r5, [r0, #0]
	return list->head;
   252fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   252fc:	b352      	cbz	r2, 25354 <att_chan_mtu_updated+0x5e>
	return node->next;
   252fe:	6813      	ldr	r3, [r2, #0]
   25300:	b103      	cbz	r3, 25304 <att_chan_mtu_updated+0xe>
   25302:	3be0      	subs	r3, #224	; 0xe0
   25304:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   25308:	2200      	movs	r2, #0
   2530a:	4611      	mov	r1, r2
   2530c:	e000      	b.n	25310 <att_chan_mtu_updated+0x1a>
   2530e:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   25310:	4284      	cmp	r4, r0
   25312:	d007      	beq.n	25324 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25314:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25316:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25318:	42b1      	cmp	r1, r6
   2531a:	bf38      	it	cc
   2531c:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2531e:	42a2      	cmp	r2, r4
   25320:	bf38      	it	cc
   25322:	4622      	movcc	r2, r4
   25324:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25326:	b12b      	cbz	r3, 25334 <att_chan_mtu_updated+0x3e>
   25328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2532c:	2b00      	cmp	r3, #0
   2532e:	d1ee      	bne.n	2530e <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   25330:	4284      	cmp	r4, r0
   25332:	d1ef      	bne.n	25314 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25334:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   25336:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25338:	428b      	cmp	r3, r1
   2533a:	d801      	bhi.n	25340 <att_chan_mtu_updated+0x4a>
   2533c:	4290      	cmp	r0, r2
   2533e:	d90b      	bls.n	25358 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25340:	4282      	cmp	r2, r0
   25342:	bf38      	it	cc
   25344:	4602      	movcc	r2, r0
   25346:	4299      	cmp	r1, r3
   25348:	6828      	ldr	r0, [r5, #0]
   2534a:	bf38      	it	cc
   2534c:	4619      	movcc	r1, r3
}
   2534e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25350:	f7f5 bc5a 	b.w	1ac08 <bt_gatt_att_max_mtu_changed>
   25354:	4611      	mov	r1, r2
   25356:	e7ed      	b.n	25334 <att_chan_mtu_updated+0x3e>
}
   25358:	bc70      	pop	{r4, r5, r6}
   2535a:	4770      	bx	lr

0002535c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2535c:	68d0      	ldr	r0, [r2, #12]
   2535e:	7803      	ldrb	r3, [r0, #0]
   25360:	3104      	adds	r1, #4
   25362:	b913      	cbnz	r3, 2536a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   25364:	7001      	strb	r1, [r0, #0]
	return true;
   25366:	2001      	movs	r0, #1
   25368:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2536a:	428b      	cmp	r3, r1
   2536c:	d0fb      	beq.n	25366 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2536e:	6891      	ldr	r1, [r2, #8]
   25370:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   25372:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   25374:	3b04      	subs	r3, #4
   25376:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   25378:	6110      	str	r0, [r2, #16]
}
   2537a:	4770      	bx	lr

0002537c <find_info_cb>:
{
   2537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2537e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   25380:	6816      	ldr	r6, [r2, #0]
{
   25382:	4605      	mov	r5, r0
   25384:	460f      	mov	r7, r1
   25386:	4614      	mov	r4, r2
	if (!data->rsp) {
   25388:	b963      	cbnz	r3, 253a4 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2538a:	6850      	ldr	r0, [r2, #4]
   2538c:	2101      	movs	r1, #1
   2538e:	300c      	adds	r0, #12
   25390:	f000 ff06 	bl	261a0 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25394:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25396:	682b      	ldr	r3, [r5, #0]
   25398:	781b      	ldrb	r3, [r3, #0]
   2539a:	2b00      	cmp	r3, #0
   2539c:	bf14      	ite	ne
   2539e:	2302      	movne	r3, #2
   253a0:	2301      	moveq	r3, #1
   253a2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   253a4:	68a3      	ldr	r3, [r4, #8]
   253a6:	781b      	ldrb	r3, [r3, #0]
   253a8:	2b01      	cmp	r3, #1
   253aa:	d003      	beq.n	253b4 <find_info_cb+0x38>
   253ac:	2b02      	cmp	r3, #2
   253ae:	d019      	beq.n	253e4 <find_info_cb+0x68>
   253b0:	2000      	movs	r0, #0
   253b2:	e016      	b.n	253e2 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   253b4:	682b      	ldr	r3, [r5, #0]
   253b6:	781b      	ldrb	r3, [r3, #0]
   253b8:	2b00      	cmp	r3, #0
   253ba:	d1f9      	bne.n	253b0 <find_info_cb+0x34>
   253bc:	6860      	ldr	r0, [r4, #4]
   253be:	2104      	movs	r1, #4
   253c0:	300c      	adds	r0, #12
   253c2:	f000 feed 	bl	261a0 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   253c6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   253c8:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   253ca:	682a      	ldr	r2, [r5, #0]
   253cc:	68e3      	ldr	r3, [r4, #12]
   253ce:	8852      	ldrh	r2, [r2, #2]
   253d0:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   253d2:	6863      	ldr	r3, [r4, #4]
   253d4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   253d6:	8a1b      	ldrh	r3, [r3, #16]
   253d8:	1ac0      	subs	r0, r0, r3
   253da:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   253dc:	bf94      	ite	ls
   253de:	2000      	movls	r0, #0
   253e0:	2001      	movhi	r0, #1
}
   253e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   253e4:	682b      	ldr	r3, [r5, #0]
   253e6:	781b      	ldrb	r3, [r3, #0]
   253e8:	2b02      	cmp	r3, #2
   253ea:	d1e1      	bne.n	253b0 <find_info_cb+0x34>
   253ec:	6860      	ldr	r0, [r4, #4]
   253ee:	2112      	movs	r1, #18
   253f0:	300c      	adds	r0, #12
   253f2:	f000 fed5 	bl	261a0 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   253f6:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   253f8:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   253fa:	682b      	ldr	r3, [r5, #0]
   253fc:	68e2      	ldr	r2, [r4, #12]
   253fe:	1c59      	adds	r1, r3, #1
   25400:	3202      	adds	r2, #2
   25402:	3311      	adds	r3, #17
   25404:	f851 0b04 	ldr.w	r0, [r1], #4
   25408:	f842 0b04 	str.w	r0, [r2], #4
   2540c:	4299      	cmp	r1, r3
   2540e:	d1f9      	bne.n	25404 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   25410:	6863      	ldr	r3, [r4, #4]
   25412:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   25414:	8a1b      	ldrh	r3, [r3, #16]
   25416:	1ac0      	subs	r0, r0, r3
   25418:	2812      	cmp	r0, #18
   2541a:	e7df      	b.n	253dc <find_info_cb+0x60>

0002541c <z_log_msg_static_create.constprop.0>:
   2541c:	2300      	movs	r3, #0
   2541e:	f7ee bdff 	b.w	14020 <z_impl_z_log_msg_static_create>

00025422 <chan_req_send>:
{
   25422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25424:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25426:	6888      	ldr	r0, [r1, #8]
   25428:	f7ff ff06 	bl	25238 <net_buf_frags_len>
   2542c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   2542e:	4283      	cmp	r3, r0
{
   25430:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25432:	d30d      	bcc.n	25450 <chan_req_send+0x2e>
	chan->req = req;
   25434:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   25438:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   2543a:	2600      	movs	r6, #0
   2543c:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2543e:	4628      	mov	r0, r5
   25440:	4639      	mov	r1, r7
   25442:	f7f3 feb9 	bl	191b8 <chan_send>
	if (err) {
   25446:	b110      	cbz	r0, 2544e <chan_req_send+0x2c>
		req->buf = buf;
   25448:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2544a:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   2544e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   25450:	f06f 0079 	mvn.w	r0, #121	; 0x79
   25454:	e7fb      	b.n	2544e <chan_req_send+0x2c>

00025456 <process_queue>:
{
   25456:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   25458:	2200      	movs	r2, #0
{
   2545a:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2545c:	2300      	movs	r3, #0
   2545e:	4608      	mov	r0, r1
{
   25460:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   25462:	f000 fe42 	bl	260ea <net_buf_get>
	if (buf) {
   25466:	4605      	mov	r5, r0
   25468:	b158      	cbz	r0, 25482 <process_queue+0x2c>
	return chan_send(chan, buf);
   2546a:	4601      	mov	r1, r0
   2546c:	4620      	mov	r0, r4
   2546e:	f7f3 fea3 	bl	191b8 <chan_send>
		if (err) {
   25472:	4604      	mov	r4, r0
   25474:	b118      	cbz	r0, 2547e <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   25476:	4629      	mov	r1, r5
   25478:	4630      	mov	r0, r6
   2547a:	f001 fb62 	bl	26b42 <k_queue_prepend>
}
   2547e:	4620      	mov	r0, r4
   25480:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   25482:	f06f 0401 	mvn.w	r4, #1
   25486:	e7fa      	b.n	2547e <process_queue+0x28>

00025488 <bt_att_chan_send_rsp>:
{
   25488:	b538      	push	{r3, r4, r5, lr}
   2548a:	4604      	mov	r4, r0
   2548c:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2548e:	f7f3 fe93 	bl	191b8 <chan_send>
	if (err) {
   25492:	b130      	cbz	r0, 254a2 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   25494:	4629      	mov	r1, r5
   25496:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   2549a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2549e:	f000 be57 	b.w	26150 <net_buf_put>
}
   254a2:	bd38      	pop	{r3, r4, r5, pc}

000254a4 <att_chan_read>:
{
   254a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254a8:	4680      	mov	r8, r0
   254aa:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   254ac:	4610      	mov	r0, r2
{
   254ae:	4699      	mov	r9, r3
   254b0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   254b2:	f7ff fec1 	bl	25238 <net_buf_frags_len>
   254b6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   254ba:	4283      	cmp	r3, r0
{
   254bc:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   254be:	d97a      	bls.n	255b6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   254c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   254c4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   254c6:	4630      	mov	r0, r6
   254c8:	f000 fe48 	bl	2615c <net_buf_frag_last>
	size_t len, total = 0;
   254cc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   254d0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   254d2:	4630      	mov	r0, r6
   254d4:	f7ff feb0 	bl	25238 <net_buf_frags_len>
   254d8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   254dc:	f105 070c 	add.w	r7, r5, #12
   254e0:	1a24      	subs	r4, r4, r0
   254e2:	4638      	mov	r0, r7
   254e4:	f000 fe97 	bl	26216 <net_buf_simple_tailroom>
   254e8:	4284      	cmp	r4, r0
   254ea:	d211      	bcs.n	25510 <att_chan_read+0x6c>
   254ec:	4630      	mov	r0, r6
   254ee:	f7ff fea3 	bl	25238 <net_buf_frags_len>
   254f2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   254f6:	1a24      	subs	r4, r4, r0
		if (!len) {
   254f8:	bb34      	cbnz	r4, 25548 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   254fa:	7ab0      	ldrb	r0, [r6, #10]
   254fc:	f7f5 fbe2 	bl	1acc4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   25500:	2200      	movs	r2, #0
   25502:	2300      	movs	r3, #0
   25504:	f000 fdec 	bl	260e0 <net_buf_alloc_fixed>
			if (!frag) {
   25508:	4605      	mov	r5, r0
   2550a:	b930      	cbnz	r0, 2551a <att_chan_read+0x76>
	return total;
   2550c:	4657      	mov	r7, sl
   2550e:	e02c      	b.n	2556a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   25510:	4638      	mov	r0, r7
   25512:	f000 fe80 	bl	26216 <net_buf_simple_tailroom>
   25516:	4604      	mov	r4, r0
   25518:	e7ee      	b.n	254f8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2551a:	4601      	mov	r1, r0
   2551c:	4630      	mov	r0, r6
   2551e:	f000 fe2e 	bl	2617e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25522:	4630      	mov	r0, r6
   25524:	f7ff fe88 	bl	25238 <net_buf_frags_len>
   25528:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2552c:	f105 070c 	add.w	r7, r5, #12
   25530:	1a24      	subs	r4, r4, r0
   25532:	4638      	mov	r0, r7
   25534:	f000 fe6f 	bl	26216 <net_buf_simple_tailroom>
   25538:	4284      	cmp	r4, r0
   2553a:	d21a      	bcs.n	25572 <att_chan_read+0xce>
   2553c:	4630      	mov	r0, r6
   2553e:	f7ff fe7b 	bl	25238 <net_buf_frags_len>
   25542:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25546:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   25548:	68e9      	ldr	r1, [r5, #12]
   2554a:	8a2a      	ldrh	r2, [r5, #16]
   2554c:	f8cd 9000 	str.w	r9, [sp]
   25550:	f8db 7004 	ldr.w	r7, [fp, #4]
   25554:	9803      	ldr	r0, [sp, #12]
   25556:	440a      	add	r2, r1
   25558:	b2a3      	uxth	r3, r4
   2555a:	4659      	mov	r1, fp
   2555c:	47b8      	blx	r7
		if (read < 0) {
   2555e:	1e07      	subs	r7, r0, #0
   25560:	da0c      	bge.n	2557c <att_chan_read+0xd8>
				return total;
   25562:	f1ba 0f00 	cmp.w	sl, #0
   25566:	bf18      	it	ne
   25568:	4657      	movne	r7, sl
}
   2556a:	4638      	mov	r0, r7
   2556c:	b005      	add	sp, #20
   2556e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25572:	4638      	mov	r0, r7
   25574:	f000 fe4f 	bl	26216 <net_buf_simple_tailroom>
   25578:	4604      	mov	r4, r0
   2557a:	e7e5      	b.n	25548 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2557c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2557e:	b993      	cbnz	r3, 255a6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   25580:	4639      	mov	r1, r7
   25582:	f105 000c 	add.w	r0, r5, #12
   25586:	f000 fe0b 	bl	261a0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2558a:	4630      	mov	r0, r6
   2558c:	f7ff fe54 	bl	25238 <net_buf_frags_len>
   25590:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   25594:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25596:	4283      	cmp	r3, r0
		total += read;
   25598:	44ba      	add	sl, r7
		offset += read;
   2559a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2559e:	d9b5      	bls.n	2550c <att_chan_read+0x68>
   255a0:	42a7      	cmp	r7, r4
   255a2:	d096      	beq.n	254d2 <att_chan_read+0x2e>
   255a4:	e7b2      	b.n	2550c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   255a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   255a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   255aa:	4639      	mov	r1, r7
   255ac:	4628      	mov	r0, r5
   255ae:	4798      	blx	r3
   255b0:	2800      	cmp	r0, #0
   255b2:	d1e5      	bne.n	25580 <att_chan_read+0xdc>
   255b4:	e7aa      	b.n	2550c <att_chan_read+0x68>
		return 0;
   255b6:	2700      	movs	r7, #0
   255b8:	e7d7      	b.n	2556a <att_chan_read+0xc6>

000255ba <sys_slist_find_and_remove.isra.0>:
	return list->head;
   255ba:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   255bc:	2200      	movs	r2, #0
   255be:	b903      	cbnz	r3, 255c2 <sys_slist_find_and_remove.isra.0+0x8>
   255c0:	4770      	bx	lr
   255c2:	428b      	cmp	r3, r1
   255c4:	d10f      	bne.n	255e6 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   255c6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   255c8:	b93a      	cbnz	r2, 255da <sys_slist_find_and_remove.isra.0+0x20>
   255ca:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   255cc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   255ce:	4291      	cmp	r1, r2
   255d0:	d100      	bne.n	255d4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   255d2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   255d4:	2300      	movs	r3, #0
   255d6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   255d8:	4770      	bx	lr
	parent->next = child;
   255da:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   255dc:	6843      	ldr	r3, [r0, #4]
   255de:	4299      	cmp	r1, r3
	list->tail = node;
   255e0:	bf08      	it	eq
   255e2:	6042      	streq	r2, [r0, #4]
}
   255e4:	e7f6      	b.n	255d4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   255e6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   255e8:	681b      	ldr	r3, [r3, #0]
   255ea:	e7e8      	b.n	255be <sys_slist_find_and_remove.isra.0+0x4>

000255ec <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   255ec:	2006      	movs	r0, #6
   255ee:	4770      	bx	lr

000255f0 <atomic_test_and_set_bit>:
{
   255f0:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   255f2:	2301      	movs	r3, #1
   255f4:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   255f8:	f3bf 8f5b 	dmb	ish
   255fc:	e850 3f00 	ldrex	r3, [r0]
   25600:	ea43 0201 	orr.w	r2, r3, r1
   25604:	e840 2400 	strex	r4, r2, [r0]
   25608:	2c00      	cmp	r4, #0
   2560a:	d1f7      	bne.n	255fc <atomic_test_and_set_bit+0xc>
   2560c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   25610:	4219      	tst	r1, r3
}
   25612:	bf14      	ite	ne
   25614:	2001      	movne	r0, #1
   25616:	2000      	moveq	r0, #0
   25618:	bd10      	pop	{r4, pc}

0002561a <read_cb>:
{
   2561a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2561c:	6816      	ldr	r6, [r2, #0]
{
   2561e:	4605      	mov	r5, r0
	data->err = 0x00;
   25620:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25622:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   25624:	7313      	strb	r3, [r2, #12]
{
   25626:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25628:	4629      	mov	r1, r5
   2562a:	2295      	movs	r2, #149	; 0x95
   2562c:	f000 fc38 	bl	25ea0 <bt_gatt_check_perm>
   25630:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   25632:	b980      	cbnz	r0, 25656 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25634:	e9cd 0000 	strd	r0, r0, [sp]
   25638:	4629      	mov	r1, r5
   2563a:	88a3      	ldrh	r3, [r4, #4]
   2563c:	68a2      	ldr	r2, [r4, #8]
   2563e:	4630      	mov	r0, r6
   25640:	f7ff ff30 	bl	254a4 <att_chan_read>
	if (ret < 0) {
   25644:	2800      	cmp	r0, #0
   25646:	da09      	bge.n	2565c <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   25648:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2564c:	bf26      	itte	cs
   2564e:	4240      	negcs	r0, r0
   25650:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   25652:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   25654:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   25656:	2000      	movs	r0, #0
}
   25658:	b002      	add	sp, #8
   2565a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2565c:	2001      	movs	r0, #1
   2565e:	e7fb      	b.n	25658 <read_cb+0x3e>

00025660 <read_vl_cb>:
{
   25660:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   25664:	f8d2 8000 	ldr.w	r8, [r2]
{
   25668:	4606      	mov	r6, r0
	data->err = 0x00;
   2566a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2566c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   25670:	7313      	strb	r3, [r2, #12]
{
   25672:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25674:	4631      	mov	r1, r6
   25676:	2295      	movs	r2, #149	; 0x95
   25678:	f000 fc12 	bl	25ea0 <bt_gatt_check_perm>
   2567c:	4605      	mov	r5, r0
   2567e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   25680:	b9e0      	cbnz	r0, 256bc <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   25682:	68a0      	ldr	r0, [r4, #8]
   25684:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   25688:	8a02      	ldrh	r2, [r0, #16]
   2568a:	1a9b      	subs	r3, r3, r2
   2568c:	2b01      	cmp	r3, #1
   2568e:	dd15      	ble.n	256bc <read_vl_cb+0x5c>
   25690:	2102      	movs	r1, #2
   25692:	300c      	adds	r0, #12
   25694:	f000 fd84 	bl	261a0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25698:	e9cd 5500 	strd	r5, r5, [sp]
   2569c:	4607      	mov	r7, r0
   2569e:	88a3      	ldrh	r3, [r4, #4]
   256a0:	68a2      	ldr	r2, [r4, #8]
   256a2:	4631      	mov	r1, r6
   256a4:	4640      	mov	r0, r8
   256a6:	f7ff fefd 	bl	254a4 <att_chan_read>
	if (read < 0) {
   256aa:	1e03      	subs	r3, r0, #0
   256ac:	da0a      	bge.n	256c4 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   256ae:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   256b2:	bf26      	itte	cs
   256b4:	425b      	negcs	r3, r3
   256b6:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   256b8:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   256ba:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   256bc:	2000      	movs	r0, #0
}
   256be:	b002      	add	sp, #8
   256c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   256c4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   256c6:	2001      	movs	r0, #1
   256c8:	e7f9      	b.n	256be <read_vl_cb+0x5e>

000256ca <bt_att_sent>:
{
   256ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256cc:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   256ce:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   256d0:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   256d4:	f850 4c04 	ldr.w	r4, [r0, #-4]
   256d8:	f3bf 8f5b 	dmb	ish
   256dc:	e853 1f00 	ldrex	r1, [r3]
   256e0:	f021 0110 	bic.w	r1, r1, #16
   256e4:	e843 1200 	strex	r2, r1, [r3]
   256e8:	2a00      	cmp	r2, #0
   256ea:	d1f7      	bne.n	256dc <bt_att_sent+0x12>
   256ec:	f3bf 8f5b 	dmb	ish
	if (!att) {
   256f0:	b30c      	cbz	r4, 25736 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   256f2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   256f6:	b98b      	cbnz	r3, 2571c <bt_att_sent+0x52>
   256f8:	6863      	ldr	r3, [r4, #4]
   256fa:	b17b      	cbz	r3, 2571c <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   256fc:	1d20      	adds	r0, r4, #4
   256fe:	f7ff fd91 	bl	25224 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25702:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25704:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25706:	4638      	mov	r0, r7
   25708:	f7ff fe8b 	bl	25422 <chan_req_send>
   2570c:	2800      	cmp	r0, #0
   2570e:	da12      	bge.n	25736 <bt_att_sent+0x6c>
	return list->head;
   25710:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   25712:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   25714:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   25716:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25718:	b903      	cbnz	r3, 2571c <bt_att_sent+0x52>
	list->tail = node;
   2571a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2571c:	f105 0194 	add.w	r1, r5, #148	; 0x94
   25720:	4638      	mov	r0, r7
   25722:	f7ff fe98 	bl	25456 <process_queue>
	if (!err) {
   25726:	b130      	cbz	r0, 25736 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   25728:	f104 010c 	add.w	r1, r4, #12
   2572c:	4638      	mov	r0, r7
}
   2572e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   25732:	f7ff be90 	b.w	25456 <process_queue>
}
   25736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025738 <att_req_send_process>:
{
   25738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2573c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2573e:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25740:	2c00      	cmp	r4, #0
   25742:	d03b      	beq.n	257bc <att_req_send_process+0x84>
	return node->next;
   25744:	f854 69e0 	ldr.w	r6, [r4], #-224
   25748:	b106      	cbz	r6, 2574c <att_req_send_process+0x14>
   2574a:	3ee0      	subs	r6, #224	; 0xe0
{
   2574c:	2300      	movs	r3, #0
   2574e:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   25750:	f108 0704 	add.w	r7, r8, #4
   25754:	e013      	b.n	2577e <att_req_send_process+0x46>
		if (!req && prev &&
   25756:	b1c3      	cbz	r3, 2578a <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   25758:	2103      	movs	r1, #3
   2575a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2575e:	f7ff fd85 	bl	2526c <atomic_test_bit>
   25762:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   25764:	f103 0090 	add.w	r0, r3, #144	; 0x90
   25768:	f7ff fd80 	bl	2526c <atomic_test_bit>
		if (!req && prev &&
   2576c:	4282      	cmp	r2, r0
   2576e:	d10c      	bne.n	2578a <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25770:	b326      	cbz	r6, 257bc <att_req_send_process+0x84>
   25772:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   25776:	b102      	cbz	r2, 2577a <att_req_send_process+0x42>
   25778:	3ae0      	subs	r2, #224	; 0xe0
{
   2577a:	4634      	mov	r4, r6
   2577c:	4616      	mov	r6, r2
		if (chan->req) {
   2577e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   25782:	2a00      	cmp	r2, #0
   25784:	d1f4      	bne.n	25770 <att_req_send_process+0x38>
		if (!req && prev &&
   25786:	2d00      	cmp	r5, #0
   25788:	d0e5      	beq.n	25756 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2578a:	4638      	mov	r0, r7
   2578c:	f7ff fd4a 	bl	25224 <sys_slist_get>
	if (node) {
   25790:	4605      	mov	r5, r0
   25792:	b908      	cbnz	r0, 25798 <att_req_send_process+0x60>
   25794:	4623      	mov	r3, r4
   25796:	e7eb      	b.n	25770 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   25798:	4601      	mov	r1, r0
   2579a:	4620      	mov	r0, r4
   2579c:	f7ff fe41 	bl	25422 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   257a0:	2800      	cmp	r0, #0
   257a2:	da0b      	bge.n	257bc <att_req_send_process+0x84>
	return list->head;
   257a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   257a8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   257aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   257ae:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   257b2:	2b00      	cmp	r3, #0
   257b4:	d1ee      	bne.n	25794 <att_req_send_process+0x5c>
	list->tail = node;
   257b6:	f8c8 5008 	str.w	r5, [r8, #8]
}
   257ba:	e7eb      	b.n	25794 <att_req_send_process+0x5c>
}
   257bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000257c0 <bt_att_status>:
{
   257c0:	b538      	push	{r3, r4, r5, lr}
   257c2:	4605      	mov	r5, r0
   257c4:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   257c6:	2100      	movs	r1, #0
   257c8:	f7ff fd50 	bl	2526c <atomic_test_bit>
   257cc:	b1c0      	cbz	r0, 25800 <bt_att_status+0x40>
	if (!chan->att) {
   257ce:	f855 0c04 	ldr.w	r0, [r5, #-4]
   257d2:	b1a8      	cbz	r0, 25800 <bt_att_status+0x40>
	if (chan->req) {
   257d4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   257d8:	b993      	cbnz	r3, 25800 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   257da:	3004      	adds	r0, #4
   257dc:	f7ff fd22 	bl	25224 <sys_slist_get>
	if (!node) {
   257e0:	4604      	mov	r4, r0
   257e2:	b168      	cbz	r0, 25800 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   257e4:	4601      	mov	r1, r0
   257e6:	1f28      	subs	r0, r5, #4
   257e8:	f7ff fe1b 	bl	25422 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   257ec:	2800      	cmp	r0, #0
   257ee:	da07      	bge.n	25800 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   257f0:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   257f4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   257f6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   257f8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   257fa:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   257fc:	b902      	cbnz	r2, 25800 <bt_att_status+0x40>
	list->tail = node;
   257fe:	609c      	str	r4, [r3, #8]
}
   25800:	bd38      	pop	{r3, r4, r5, pc}

00025802 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   25802:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   25804:	6883      	ldr	r3, [r0, #8]
   25806:	699b      	ldr	r3, [r3, #24]
   25808:	b10b      	cbz	r3, 2580e <att_sent+0xc>
		chan->ops->sent(chan);
   2580a:	3004      	adds	r0, #4
   2580c:	4718      	bx	r3
}
   2580e:	4770      	bx	lr

00025810 <att_unknown>:
{
   25810:	b510      	push	{r4, lr}
   25812:	460c      	mov	r4, r1
	if (!err) {
   25814:	b90a      	cbnz	r2, 2581a <att_unknown+0xa>
		att_sent(conn, user_data);
   25816:	f7ff fff4 	bl	25802 <att_sent>
	tx_meta_data_free(user_data);
   2581a:	4620      	mov	r0, r4
}
   2581c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   25820:	f7f3 bbfc 	b.w	1901c <tx_meta_data_free>

00025824 <att_tx_complete>:
{
   25824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25828:	4606      	mov	r6, r0
   2582a:	460d      	mov	r5, r1
	if (!err) {
   2582c:	4614      	mov	r4, r2
   2582e:	b122      	cbz	r2, 2583a <att_tx_complete+0x16>
}
   25830:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   25834:	4608      	mov	r0, r1
   25836:	f7f3 bbf1 	b.w	1901c <tx_meta_data_free>
		att_sent(conn, user_data);
   2583a:	f7ff ffe2 	bl	25802 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2583e:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   25840:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   25844:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   25848:	4628      	mov	r0, r5
   2584a:	f7f3 fbe7 	bl	1901c <tx_meta_data_free>
	if (!err && func) {
   2584e:	b92f      	cbnz	r7, 2585c <att_tx_complete+0x38>
}
   25850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   25854:	4649      	mov	r1, r9
   25856:	4630      	mov	r0, r6
   25858:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2585a:	3401      	adds	r4, #1
   2585c:	b2a3      	uxth	r3, r4
   2585e:	4543      	cmp	r3, r8
   25860:	d3f8      	bcc.n	25854 <att_tx_complete+0x30>
   25862:	e7f5      	b.n	25850 <att_tx_complete+0x2c>

00025864 <att_req_sent>:
{
   25864:	b510      	push	{r4, lr}
   25866:	460c      	mov	r4, r1
	if (!err) {
   25868:	b90a      	cbnz	r2, 2586e <att_req_sent+0xa>
		att_sent(conn, user_data);
   2586a:	f7ff ffca 	bl	25802 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2586e:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   25870:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   25874:	b12b      	cbz	r3, 25882 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   25876:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2587a:	2300      	movs	r3, #0
   2587c:	30b0      	adds	r0, #176	; 0xb0
   2587e:	f7f8 fe85 	bl	1e58c <k_work_reschedule>
	tx_meta_data_free(user_data);
   25882:	4620      	mov	r0, r4
}
   25884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   25888:	f7f3 bbc8 	b.w	1901c <tx_meta_data_free>

0002588c <att_cfm_sent>:
{
   2588c:	b510      	push	{r4, lr}
   2588e:	460c      	mov	r4, r1
	if (!err) {
   25890:	b90a      	cbnz	r2, 25896 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   25892:	f7ff ffb6 	bl	25802 <att_sent>
   25896:	6823      	ldr	r3, [r4, #0]
   25898:	f3bf 8f5b 	dmb	ish
   2589c:	3390      	adds	r3, #144	; 0x90
   2589e:	e853 1f00 	ldrex	r1, [r3]
   258a2:	f021 0102 	bic.w	r1, r1, #2
   258a6:	e843 1200 	strex	r2, r1, [r3]
   258aa:	2a00      	cmp	r2, #0
   258ac:	d1f7      	bne.n	2589e <att_cfm_sent+0x12>
   258ae:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   258b2:	4620      	mov	r0, r4
}
   258b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   258b8:	f7f3 bbb0 	b.w	1901c <tx_meta_data_free>

000258bc <att_rsp_sent>:
{
   258bc:	b510      	push	{r4, lr}
   258be:	460c      	mov	r4, r1
	if (!err) {
   258c0:	b90a      	cbnz	r2, 258c6 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   258c2:	f7ff ff9e 	bl	25802 <att_sent>
   258c6:	6823      	ldr	r3, [r4, #0]
   258c8:	f3bf 8f5b 	dmb	ish
   258cc:	3390      	adds	r3, #144	; 0x90
   258ce:	e853 1f00 	ldrex	r1, [r3]
   258d2:	f021 0101 	bic.w	r1, r1, #1
   258d6:	e843 1200 	strex	r2, r1, [r3]
   258da:	2a00      	cmp	r2, #0
   258dc:	d1f7      	bne.n	258ce <att_rsp_sent+0x12>
   258de:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   258e2:	4620      	mov	r0, r4
}
   258e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   258e8:	f7f3 bb98 	b.w	1901c <tx_meta_data_free>

000258ec <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   258ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   258f0:	4688      	mov	r8, r1
   258f2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   258f4:	2101      	movs	r1, #1
   258f6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   258f8:	4605      	mov	r5, r0
   258fa:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   258fc:	f7f3 fe3a 	bl	19574 <bt_att_chan_create_pdu>
	if (!buf) {
   25900:	4604      	mov	r4, r0
   25902:	b170      	cbz	r0, 25922 <send_err_rsp.part.0+0x36>
   25904:	2104      	movs	r1, #4
   25906:	300c      	adds	r0, #12
   25908:	f000 fc4a 	bl	261a0 <net_buf_simple_add>
	rsp->request = req;
   2590c:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   25910:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   25914:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   25916:	4621      	mov	r1, r4
   25918:	4628      	mov	r0, r5
}
   2591a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2591e:	f7ff bdb3 	b.w	25488 <bt_att_chan_send_rsp>
}
   25922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025926 <att_write_req>:
{
   25926:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25928:	460c      	mov	r4, r1
   2592a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2592c:	f101 000c 	add.w	r0, r1, #12
   25930:	f000 fc65 	bl	261fe <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25934:	8a22      	ldrh	r2, [r4, #16]
   25936:	9201      	str	r2, [sp, #4]
   25938:	68e2      	ldr	r2, [r4, #12]
   2593a:	9200      	str	r2, [sp, #0]
   2593c:	4603      	mov	r3, r0
   2593e:	2213      	movs	r2, #19
   25940:	2112      	movs	r1, #18
   25942:	4628      	mov	r0, r5
   25944:	f7f3 ff30 	bl	197a8 <att_write_rsp.constprop.0>
}
   25948:	b003      	add	sp, #12
   2594a:	bd30      	pop	{r4, r5, pc}

0002594c <att_write_cmd>:
{
   2594c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2594e:	460c      	mov	r4, r1
   25950:	4605      	mov	r5, r0
   25952:	f101 000c 	add.w	r0, r1, #12
   25956:	f000 fc52 	bl	261fe <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2595a:	8a22      	ldrh	r2, [r4, #16]
   2595c:	9201      	str	r2, [sp, #4]
   2595e:	68e2      	ldr	r2, [r4, #12]
   25960:	9200      	str	r2, [sp, #0]
   25962:	2200      	movs	r2, #0
   25964:	4603      	mov	r3, r0
   25966:	4611      	mov	r1, r2
   25968:	4628      	mov	r0, r5
   2596a:	f7f3 ff1d 	bl	197a8 <att_write_rsp.constprop.0>
}
   2596e:	b003      	add	sp, #12
   25970:	bd30      	pop	{r4, r5, pc}

00025972 <att_read_blob_req>:
{
   25972:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25974:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25976:	8813      	ldrh	r3, [r2, #0]
   25978:	8852      	ldrh	r2, [r2, #2]
   2597a:	9200      	str	r2, [sp, #0]
   2597c:	210c      	movs	r1, #12
   2597e:	220d      	movs	r2, #13
   25980:	f7f4 f8d8 	bl	19b34 <att_read_rsp>
}
   25984:	b003      	add	sp, #12
   25986:	f85d fb04 	ldr.w	pc, [sp], #4

0002598a <att_read_req>:
{
   2598a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2598c:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2598e:	2200      	movs	r2, #0
   25990:	881b      	ldrh	r3, [r3, #0]
   25992:	9200      	str	r2, [sp, #0]
   25994:	210a      	movs	r1, #10
   25996:	220b      	movs	r2, #11
   25998:	f7f4 f8cc 	bl	19b34 <att_read_rsp>
}
   2599c:	b003      	add	sp, #12
   2599e:	f85d fb04 	ldr.w	pc, [sp], #4

000259a2 <att_mtu_req>:
{
   259a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   259a4:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   259a6:	f850 2b90 	ldr.w	r2, [r0], #144
{
   259aa:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   259ac:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   259ae:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   259b0:	f7ff fc5c 	bl	2526c <atomic_test_bit>
   259b4:	4604      	mov	r4, r0
   259b6:	b9d8      	cbnz	r0, 259f0 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   259b8:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   259ba:	881b      	ldrh	r3, [r3, #0]
   259bc:	2b16      	cmp	r3, #22
   259be:	d919      	bls.n	259f4 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   259c0:	4630      	mov	r0, r6
   259c2:	2202      	movs	r2, #2
   259c4:	f7f3 ff54 	bl	19870 <bt_att_create_pdu>
	if (!pdu) {
   259c8:	4606      	mov	r6, r0
   259ca:	b1a8      	cbz	r0, 259f8 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   259cc:	2102      	movs	r1, #2
   259ce:	300c      	adds	r0, #12
   259d0:	f000 fbe6 	bl	261a0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   259d4:	2717      	movs	r7, #23
   259d6:	7007      	strb	r7, [r0, #0]
   259d8:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   259da:	4631      	mov	r1, r6
   259dc:	4628      	mov	r0, r5
   259de:	f7ff fd53 	bl	25488 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   259e2:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   259e4:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   259e6:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   259e8:	f7ff fc85 	bl	252f6 <att_chan_mtu_updated>
	return 0;
   259ec:	4620      	mov	r0, r4
}
   259ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   259f0:	2006      	movs	r0, #6
   259f2:	e7fc      	b.n	259ee <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   259f4:	2004      	movs	r0, #4
   259f6:	e7fa      	b.n	259ee <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   259f8:	200e      	movs	r0, #14
   259fa:	e7f8      	b.n	259ee <att_mtu_req+0x4c>

000259fc <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   259fc:	8a0a      	ldrh	r2, [r1, #16]
   259fe:	68c9      	ldr	r1, [r1, #12]
   25a00:	2300      	movs	r3, #0
   25a02:	f7f4 ba45 	b.w	19e90 <att_handle_rsp>

00025a06 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   25a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a08:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   25a0a:	f7f3 fc33 	bl	19274 <att_get>
	if (!att) {
   25a0e:	4604      	mov	r4, r0
   25a10:	b940      	cbnz	r0, 25a24 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   25a12:	69a8      	ldr	r0, [r5, #24]
   25a14:	f7f3 fb02 	bl	1901c <tx_meta_data_free>
		net_buf_unref(buf);
   25a18:	4628      	mov	r0, r5
   25a1a:	f7f5 fa15 	bl	1ae48 <net_buf_unref>
		return -ENOTCONN;
   25a1e:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   25a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   25a24:	f100 060c 	add.w	r6, r0, #12
   25a28:	4629      	mov	r1, r5
   25a2a:	4630      	mov	r0, r6
   25a2c:	f000 fb90 	bl	26150 <net_buf_put>
	return list->head;
   25a30:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a32:	b14d      	cbz	r5, 25a48 <bt_att_send+0x42>
	return node->next;
   25a34:	f855 49e0 	ldr.w	r4, [r5], #-224
   25a38:	b104      	cbz	r4, 25a3c <bt_att_send+0x36>
   25a3a:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   25a3c:	4631      	mov	r1, r6
   25a3e:	4628      	mov	r0, r5
   25a40:	f7ff fd09 	bl	25456 <process_queue>
		if (!err) {
   25a44:	4603      	mov	r3, r0
   25a46:	b980      	cbnz	r0, 25a6a <bt_att_send+0x64>
	return 0;
   25a48:	2000      	movs	r0, #0
   25a4a:	e7ea      	b.n	25a22 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   25a4c:	2103      	movs	r1, #3
   25a4e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   25a52:	f7ff fc0b 	bl	2526c <atomic_test_bit>
   25a56:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   25a58:	f105 0090 	add.w	r0, r5, #144	; 0x90
   25a5c:	f7ff fc06 	bl	2526c <atomic_test_bit>
		if (err == -ENOENT && prev &&
   25a60:	4287      	cmp	r7, r0
   25a62:	f06f 0301 	mvn.w	r3, #1
   25a66:	d107      	bne.n	25a78 <bt_att_send+0x72>
   25a68:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a6a:	2c00      	cmp	r4, #0
   25a6c:	d0ec      	beq.n	25a48 <bt_att_send+0x42>
   25a6e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   25a72:	b922      	cbnz	r2, 25a7e <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   25a74:	3302      	adds	r3, #2
   25a76:	d0e9      	beq.n	25a4c <bt_att_send+0x46>
{
   25a78:	4625      	mov	r5, r4
   25a7a:	4614      	mov	r4, r2
   25a7c:	e7de      	b.n	25a3c <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a7e:	3ae0      	subs	r2, #224	; 0xe0
   25a80:	e7f8      	b.n	25a74 <bt_att_send+0x6e>

00025a82 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   25a82:	b510      	push	{r4, lr}
   25a84:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   25a86:	f7f3 fbf5 	bl	19274 <att_get>
	if (!att) {
   25a8a:	b160      	cbz	r0, 25aa6 <bt_att_req_send+0x24>
	parent->next = child;
   25a8c:	2300      	movs	r3, #0
   25a8e:	6023      	str	r3, [r4, #0]
	return list->tail;
   25a90:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   25a92:	b92b      	cbnz	r3, 25aa0 <bt_att_req_send+0x1e>
	list->head = node;
   25a94:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   25a98:	f7ff fe4e 	bl	25738 <att_req_send_process>

	return 0;
   25a9c:	2000      	movs	r0, #0
}
   25a9e:	bd10      	pop	{r4, pc}
	parent->next = child;
   25aa0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25aa2:	6084      	str	r4, [r0, #8]
}
   25aa4:	e7f8      	b.n	25a98 <bt_att_req_send+0x16>
		return -ENOTCONN;
   25aa6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25aaa:	e7f8      	b.n	25a9e <bt_att_req_send+0x1c>

00025aac <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   25aac:	2001      	movs	r0, #1
   25aae:	4770      	bx	lr

00025ab0 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   25ab0:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   25ab2:	f7f3 fbdf 	bl	19274 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   25ab6:	b198      	cbz	r0, 25ae0 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   25ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   25aba:	b18b      	cbz	r3, 25ae0 <bt_att_clear_out_of_sync_sent+0x30>
   25abc:	f3bf 8f5b 	dmb	ish
   25ac0:	3be0      	subs	r3, #224	; 0xe0
   25ac2:	f103 0290 	add.w	r2, r3, #144	; 0x90
   25ac6:	e852 0f00 	ldrex	r0, [r2]
   25aca:	f020 0020 	bic.w	r0, r0, #32
   25ace:	e842 0100 	strex	r1, r0, [r2]
   25ad2:	2900      	cmp	r1, #0
   25ad4:	d1f7      	bne.n	25ac6 <bt_att_clear_out_of_sync_sent+0x16>
   25ad6:	f3bf 8f5b 	dmb	ish
	return node->next;
   25ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   25ade:	e7ec      	b.n	25aba <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   25ae0:	bd08      	pop	{r3, pc}

00025ae2 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   25ae2:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   25ae4:	2104      	movs	r1, #4
   25ae6:	f7ff fb92 	bl	2520e <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   25aea:	b128      	cbz	r0, 25af8 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   25aec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   25af0:	2105      	movs	r1, #5
   25af2:	308c      	adds	r0, #140	; 0x8c
   25af4:	f7ff bbba 	b.w	2526c <atomic_test_bit>
}
   25af8:	bd08      	pop	{r3, pc}

00025afa <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   25afa:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   25afc:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   25b00:	2201      	movs	r2, #1
   25b02:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   25b04:	7403      	strb	r3, [r0, #16]
}
   25b06:	4770      	bx	lr

00025b08 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   25b08:	6010      	str	r0, [r2, #0]
}
   25b0a:	2000      	movs	r0, #0
   25b0c:	4770      	bx	lr

00025b0e <gatt_ccc_changed>:
{
   25b0e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   25b10:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   25b12:	895a      	ldrh	r2, [r3, #10]
   25b14:	428a      	cmp	r2, r1
   25b16:	d003      	beq.n	25b20 <gatt_ccc_changed+0x12>
		ccc->value = value;
   25b18:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   25b1a:	68db      	ldr	r3, [r3, #12]
   25b1c:	b103      	cbz	r3, 25b20 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   25b1e:	4718      	bx	r3
}
   25b20:	4770      	bx	lr

00025b22 <gatt_indicate_rsp>:
{
   25b22:	b510      	push	{r4, lr}
   25b24:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25b26:	68a3      	ldr	r3, [r4, #8]
{
   25b28:	460a      	mov	r2, r1
	if (params->func) {
   25b2a:	b10b      	cbz	r3, 25b30 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   25b2c:	4621      	mov	r1, r4
   25b2e:	4798      	blx	r3
	params->_ref--;
   25b30:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25b32:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   25b34:	3b01      	subs	r3, #1
   25b36:	b2db      	uxtb	r3, r3
   25b38:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25b3a:	b122      	cbz	r2, 25b46 <gatt_indicate_rsp+0x24>
   25b3c:	b91b      	cbnz	r3, 25b46 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   25b3e:	4620      	mov	r0, r4
}
   25b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25b44:	4710      	bx	r2
}
   25b46:	bd10      	pop	{r4, pc}

00025b48 <match_uuid>:
	data->attr = attr;
   25b48:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25b4a:	8091      	strh	r1, [r2, #4]
}
   25b4c:	2000      	movs	r0, #0
   25b4e:	4770      	bx	lr

00025b50 <ccc_set_cb>:
}
   25b50:	2000      	movs	r0, #0
   25b52:	4770      	bx	lr

00025b54 <gen_hash_m>:
{
   25b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25b56:	6807      	ldr	r7, [r0, #0]
   25b58:	783d      	ldrb	r5, [r7, #0]
{
   25b5a:	b089      	sub	sp, #36	; 0x24
   25b5c:	4606      	mov	r6, r0
   25b5e:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25b60:	b9dd      	cbnz	r5, 25b9a <gen_hash_m+0x46>
	switch (u16->val) {
   25b62:	887b      	ldrh	r3, [r7, #2]
   25b64:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25b68:	d004      	beq.n	25b74 <gen_hash_m+0x20>
   25b6a:	d810      	bhi.n	25b8e <gen_hash_m+0x3a>
   25b6c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25b70:	2b03      	cmp	r3, #3
   25b72:	d812      	bhi.n	25b9a <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   25b74:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25b78:	2202      	movs	r2, #2
   25b7a:	f10d 010a 	add.w	r1, sp, #10
   25b7e:	4620      	mov	r0, r4
   25b80:	f7fe fe93 	bl	248aa <tc_cmac_update>
   25b84:	b968      	cbnz	r0, 25ba2 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   25b86:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   25b8a:	65a2      	str	r2, [r4, #88]	; 0x58
   25b8c:	e006      	b.n	25b9c <gen_hash_m+0x48>
	switch (u16->val) {
   25b8e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25b92:	33ff      	adds	r3, #255	; 0xff
   25b94:	b29b      	uxth	r3, r3
   25b96:	2b04      	cmp	r3, #4
   25b98:	d91e      	bls.n	25bd8 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   25b9a:	2501      	movs	r5, #1
}
   25b9c:	4628      	mov	r0, r5
   25b9e:	b009      	add	sp, #36	; 0x24
   25ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   25ba2:	887b      	ldrh	r3, [r7, #2]
   25ba4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25ba8:	2202      	movs	r2, #2
   25baa:	f10d 010a 	add.w	r1, sp, #10
   25bae:	4620      	mov	r0, r4
   25bb0:	f7fe fe7b 	bl	248aa <tc_cmac_update>
   25bb4:	2800      	cmp	r0, #0
   25bb6:	d0e6      	beq.n	25b86 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25bb8:	2000      	movs	r0, #0
   25bba:	9000      	str	r0, [sp, #0]
   25bbc:	aa03      	add	r2, sp, #12
   25bbe:	6877      	ldr	r7, [r6, #4]
   25bc0:	2313      	movs	r3, #19
   25bc2:	4631      	mov	r1, r6
   25bc4:	47b8      	blx	r7
		if (len < 0) {
   25bc6:	1e02      	subs	r2, r0, #0
   25bc8:	dbdf      	blt.n	25b8a <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   25bca:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25bcc:	4620      	mov	r0, r4
   25bce:	f7fe fe6c 	bl	248aa <tc_cmac_update>
   25bd2:	2800      	cmp	r0, #0
   25bd4:	d1e1      	bne.n	25b9a <gen_hash_m+0x46>
   25bd6:	e7d6      	b.n	25b86 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   25bd8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25bdc:	2202      	movs	r2, #2
   25bde:	f10d 010a 	add.w	r1, sp, #10
   25be2:	4620      	mov	r0, r4
   25be4:	f7fe fe61 	bl	248aa <tc_cmac_update>
   25be8:	2800      	cmp	r0, #0
   25bea:	d0cc      	beq.n	25b86 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   25bec:	887b      	ldrh	r3, [r7, #2]
   25bee:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25bf2:	2202      	movs	r2, #2
   25bf4:	f10d 010a 	add.w	r1, sp, #10
   25bf8:	e7e8      	b.n	25bcc <gen_hash_m+0x78>

00025bfa <bt_addr_le_eq>:
{
   25bfa:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   25bfc:	2207      	movs	r2, #7
   25bfe:	f001 fbcd 	bl	2739c <memcmp>
}
   25c02:	fab0 f080 	clz	r0, r0
   25c06:	0940      	lsrs	r0, r0, #5
   25c08:	bd08      	pop	{r3, pc}

00025c0a <bt_addr_le_copy>:
   25c0a:	680b      	ldr	r3, [r1, #0]
   25c0c:	6003      	str	r3, [r0, #0]
   25c0e:	888b      	ldrh	r3, [r1, #4]
   25c10:	8083      	strh	r3, [r0, #4]
   25c12:	798b      	ldrb	r3, [r1, #6]
   25c14:	7183      	strb	r3, [r0, #6]
}
   25c16:	4770      	bx	lr

00025c18 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   25c18:	2300      	movs	r3, #0
   25c1a:	6003      	str	r3, [r0, #0]
   25c1c:	6043      	str	r3, [r0, #4]
   25c1e:	6083      	str	r3, [r0, #8]
}
   25c20:	4770      	bx	lr

00025c22 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   25c22:	b538      	push	{r3, r4, r5, lr}
   25c24:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   25c28:	4294      	cmp	r4, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   25c2a:	4615      	mov	r5, r2
	if (offset > value_len) {
   25c2c:	d30a      	bcc.n	25c44 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   25c2e:	1aa4      	subs	r4, r4, r2
   25c30:	428c      	cmp	r4, r1
   25c32:	bfa8      	it	ge
   25c34:	460c      	movge	r4, r1
   25c36:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25c38:	4622      	mov	r2, r4
   25c3a:	1959      	adds	r1, r3, r5
   25c3c:	f001 fbbe 	bl	273bc <memcpy>
}
   25c40:	4620      	mov	r0, r4
   25c42:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25c44:	f06f 0406 	mvn.w	r4, #6
   25c48:	e7fa      	b.n	25c40 <bt_gatt_attr_read.constprop.0+0x1e>

00025c4a <bt_gatt_attr_read_ccc>:
{
   25c4a:	b530      	push	{r4, r5, lr}
   25c4c:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   25c4e:	68c9      	ldr	r1, [r1, #12]
{
   25c50:	4614      	mov	r4, r2
   25c52:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   25c54:	f7f4 fa08 	bl	1a068 <find_ccc_cfg>
	if (cfg) {
   25c58:	b100      	cbz	r0, 25c5c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   25c5a:	8900      	ldrh	r0, [r0, #8]
   25c5c:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25c60:	2302      	movs	r3, #2
   25c62:	9300      	str	r3, [sp, #0]
   25c64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   25c68:	f10d 030e 	add.w	r3, sp, #14
   25c6c:	4629      	mov	r1, r5
   25c6e:	4620      	mov	r0, r4
   25c70:	f7ff ffd7 	bl	25c22 <bt_gatt_attr_read.constprop.0>
}
   25c74:	b005      	add	sp, #20
   25c76:	bd30      	pop	{r4, r5, pc}

00025c78 <bt_gatt_attr_read_service>:
{
   25c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   25c7a:	460c      	mov	r4, r1
   25c7c:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   25c7e:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   25c80:	781c      	ldrb	r4, [r3, #0]
{
   25c82:	4610      	mov	r0, r2
   25c84:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   25c88:	b13c      	cbz	r4, 25c9a <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   25c8a:	2410      	movs	r4, #16
   25c8c:	3301      	adds	r3, #1
   25c8e:	9406      	str	r4, [sp, #24]
}
   25c90:	b004      	add	sp, #16
   25c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   25c96:	f7ff bfc4 	b.w	25c22 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25c9a:	885b      	ldrh	r3, [r3, #2]
   25c9c:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   25ca0:	2302      	movs	r3, #2
   25ca2:	9300      	str	r3, [sp, #0]
   25ca4:	f10d 030e 	add.w	r3, sp, #14
   25ca8:	f7ff ffbb 	bl	25c22 <bt_gatt_attr_read.constprop.0>
}
   25cac:	b004      	add	sp, #16
   25cae:	bd10      	pop	{r4, pc}

00025cb0 <cf_read>:
{
   25cb0:	b530      	push	{r4, r5, lr}
   25cb2:	b085      	sub	sp, #20
   25cb4:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   25cb6:	2300      	movs	r3, #0
{
   25cb8:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   25cba:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   25cbe:	f7f4 f9ab 	bl	1a018 <find_cf_cfg>
	if (cfg) {
   25cc2:	b110      	cbz	r0, 25cca <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   25cc4:	7a03      	ldrb	r3, [r0, #8]
   25cc6:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   25cca:	2301      	movs	r3, #1
   25ccc:	9300      	str	r3, [sp, #0]
   25cce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   25cd2:	ab03      	add	r3, sp, #12
   25cd4:	4629      	mov	r1, r5
   25cd6:	4620      	mov	r0, r4
   25cd8:	f7ff ffa3 	bl	25c22 <bt_gatt_attr_read.constprop.0>
}
   25cdc:	b005      	add	sp, #20
   25cde:	bd30      	pop	{r4, r5, pc}

00025ce0 <read_name>:
{
   25ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ce4:	4614      	mov	r4, r2
   25ce6:	461d      	mov	r5, r3
   25ce8:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   25cec:	f7f1 fc4c 	bl	17588 <bt_get_name>
   25cf0:	4606      	mov	r6, r0
				 strlen(name));
   25cf2:	f7e6 fef3 	bl	cadc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25cf6:	b280      	uxth	r0, r0
   25cf8:	9006      	str	r0, [sp, #24]
   25cfa:	4633      	mov	r3, r6
   25cfc:	463a      	mov	r2, r7
   25cfe:	4629      	mov	r1, r5
   25d00:	4620      	mov	r0, r4
}
   25d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25d06:	f7ff bf8c 	b.w	25c22 <bt_gatt_attr_read.constprop.0>

00025d0a <read_appearance>:
{
   25d0a:	b530      	push	{r4, r5, lr}
   25d0c:	b085      	sub	sp, #20
   25d0e:	4614      	mov	r4, r2
   25d10:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25d12:	f7fe fffe 	bl	24d12 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25d16:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25d18:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25d1c:	9300      	str	r3, [sp, #0]
   25d1e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   25d22:	f10d 030e 	add.w	r3, sp, #14
   25d26:	4629      	mov	r1, r5
   25d28:	4620      	mov	r0, r4
   25d2a:	f7ff ff7a 	bl	25c22 <bt_gatt_attr_read.constprop.0>
}
   25d2e:	b005      	add	sp, #20
   25d30:	bd30      	pop	{r4, r5, pc}

00025d32 <z_log_msg_static_create.constprop.0>:
   25d32:	2300      	movs	r3, #0
   25d34:	f7ee b974 	b.w	14020 <z_impl_z_log_msg_static_create>

00025d38 <sc_clear>:
{
   25d38:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25d3a:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   25d3e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25d40:	4629      	mov	r1, r5
   25d42:	7a00      	ldrb	r0, [r0, #8]
   25d44:	f7fe ffe7 	bl	24d16 <bt_addr_le_is_bonded>
   25d48:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   25d4a:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   25d4c:	f7f4 f97c 	bl	1a048 <find_sc_cfg>
		if (cfg) {
   25d50:	b118      	cbz	r0, 25d5a <sc_clear+0x22>
}
   25d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   25d56:	f7ff bf5f 	b.w	25c18 <clear_sc_cfg>
}
   25d5a:	bd38      	pop	{r3, r4, r5, pc}

00025d5c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25d5c:	2a02      	cmp	r2, #2
{
   25d5e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25d60:	d108      	bne.n	25d74 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25d62:	2300      	movs	r3, #0
   25d64:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25d68:	461a      	mov	r2, r3
   25d6a:	7a00      	ldrb	r0, [r0, #8]
   25d6c:	f7f4 fa1e 	bl	1a1ac <sc_save>
}
   25d70:	2002      	movs	r0, #2
   25d72:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25d74:	f7ff ffe0 	bl	25d38 <sc_clear>
   25d78:	e7fa      	b.n	25d70 <sc_ccc_cfg_write+0x14>

00025d7a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25d7a:	2301      	movs	r3, #1
   25d7c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25d7e:	f3bf 8f5b 	dmb	ish
   25d82:	e850 2f00 	ldrex	r2, [r0]
   25d86:	431a      	orrs	r2, r3
   25d88:	e840 2100 	strex	r1, r2, [r0]
   25d8c:	2900      	cmp	r1, #0
   25d8e:	d1f8      	bne.n	25d82 <atomic_set_bit+0x8>
   25d90:	f3bf 8f5b 	dmb	ish
}
   25d94:	4770      	bx	lr

00025d96 <sc_restore_rsp>:
{
   25d96:	b538      	push	{r3, r4, r5, lr}
   25d98:	4604      	mov	r4, r0
   25d9a:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   25d9c:	f7ff fe86 	bl	25aac <bt_att_fixed_chan_only>
   25da0:	b150      	cbz	r0, 25db8 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   25da2:	4620      	mov	r0, r4
   25da4:	f7f4 f938 	bl	1a018 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   25da8:	b130      	cbz	r0, 25db8 <sc_restore_rsp+0x22>
   25daa:	7a03      	ldrb	r3, [r0, #8]
   25dac:	07db      	lsls	r3, r3, #31
   25dae:	d503      	bpl.n	25db8 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   25db0:	2100      	movs	r1, #0
   25db2:	300c      	adds	r0, #12
   25db4:	f7ff ffe1 	bl	25d7a <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   25db8:	b935      	cbnz	r5, 25dc8 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   25dba:	7a20      	ldrb	r0, [r4, #8]
   25dbc:	f104 0188 	add.w	r1, r4, #136	; 0x88
   25dc0:	f7f4 f942 	bl	1a048 <find_sc_cfg>
		if (sc_cfg) {
   25dc4:	b100      	cbz	r0, 25dc8 <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   25dc6:	6085      	str	r5, [r0, #8]
}
   25dc8:	bd38      	pop	{r3, r4, r5, pc}

00025dca <bt_gatt_attr_read>:
{
   25dca:	b510      	push	{r4, lr}
   25dcc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   25dd0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   25dd4:	428c      	cmp	r4, r1
{
   25dd6:	4610      	mov	r0, r2
	if (offset > value_len) {
   25dd8:	d30b      	bcc.n	25df2 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   25dda:	1a64      	subs	r4, r4, r1
   25ddc:	429c      	cmp	r4, r3
   25dde:	bfa8      	it	ge
   25de0:	461c      	movge	r4, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25de2:	9b03      	ldr	r3, [sp, #12]
   25de4:	b2a4      	uxth	r4, r4
   25de6:	4622      	mov	r2, r4
   25de8:	4419      	add	r1, r3
   25dea:	f001 fae7 	bl	273bc <memcpy>
}
   25dee:	4620      	mov	r0, r4
   25df0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25df2:	f06f 0406 	mvn.w	r4, #6
   25df6:	e7fa      	b.n	25dee <bt_gatt_attr_read+0x24>

00025df8 <bt_gatt_attr_value_handle>:
{
   25df8:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25dfa:	4604      	mov	r4, r0
   25dfc:	b910      	cbnz	r0, 25e04 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   25dfe:	2000      	movs	r0, #0
}
   25e00:	b002      	add	sp, #8
   25e02:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25e04:	2300      	movs	r3, #0
   25e06:	f88d 3004 	strb.w	r3, [sp, #4]
   25e0a:	6800      	ldr	r0, [r0, #0]
   25e0c:	f642 0303 	movw	r3, #10243	; 0x2803
   25e10:	a901      	add	r1, sp, #4
   25e12:	f8ad 3006 	strh.w	r3, [sp, #6]
   25e16:	f7fe fe43 	bl	24aa0 <bt_uuid_cmp>
   25e1a:	2800      	cmp	r0, #0
   25e1c:	d1ef      	bne.n	25dfe <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25e1e:	68e3      	ldr	r3, [r4, #12]
   25e20:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   25e22:	2800      	cmp	r0, #0
   25e24:	d1ec      	bne.n	25e00 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   25e26:	4620      	mov	r0, r4
   25e28:	f7f4 fb20 	bl	1a46c <bt_gatt_attr_get_handle>
   25e2c:	3001      	adds	r0, #1
   25e2e:	b280      	uxth	r0, r0
	return handle;
   25e30:	e7e6      	b.n	25e00 <bt_gatt_attr_value_handle+0x8>

00025e32 <bt_gatt_attr_read_chrc>:
{
   25e32:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25e34:	68cc      	ldr	r4, [r1, #12]
{
   25e36:	b088      	sub	sp, #32
   25e38:	4608      	mov	r0, r1
   25e3a:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   25e3c:	79a3      	ldrb	r3, [r4, #6]
   25e3e:	f88d 300c 	strb.w	r3, [sp, #12]
{
   25e42:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25e44:	f7ff ffd8 	bl	25df8 <bt_gatt_attr_value_handle>
   25e48:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25e4c:	6824      	ldr	r4, [r4, #0]
   25e4e:	7823      	ldrb	r3, [r4, #0]
   25e50:	b96b      	cbnz	r3, 25e6e <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25e52:	8863      	ldrh	r3, [r4, #2]
   25e54:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   25e58:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25e5a:	9300      	str	r3, [sp, #0]
   25e5c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   25e60:	ab03      	add	r3, sp, #12
   25e62:	4631      	mov	r1, r6
   25e64:	4628      	mov	r0, r5
   25e66:	f7ff fedc 	bl	25c22 <bt_gatt_attr_read.constprop.0>
}
   25e6a:	b008      	add	sp, #32
   25e6c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25e6e:	1c63      	adds	r3, r4, #1
   25e70:	f10d 020f 	add.w	r2, sp, #15
   25e74:	3411      	adds	r4, #17
   25e76:	f853 1b04 	ldr.w	r1, [r3], #4
   25e7a:	f842 1b04 	str.w	r1, [r2], #4
   25e7e:	42a3      	cmp	r3, r4
   25e80:	d1f9      	bne.n	25e76 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   25e82:	2313      	movs	r3, #19
   25e84:	e7e9      	b.n	25e5a <bt_gatt_attr_read_chrc+0x28>

00025e86 <bt_gatt_foreach_attr>:
{
   25e86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25e88:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25e8c:	2300      	movs	r3, #0
   25e8e:	9300      	str	r3, [sp, #0]
   25e90:	461a      	mov	r2, r3
   25e92:	f7f4 fb1b 	bl	1a4cc <bt_gatt_foreach_attr_type>
}
   25e96:	b005      	add	sp, #20
   25e98:	f85d fb04 	ldr.w	pc, [sp], #4

00025e9c <db_hash_process>:
	db_hash_gen(true);
   25e9c:	f7f4 bb70 	b.w	1a580 <db_hash_gen.constprop.0>

00025ea0 <bt_gatt_check_perm>:
{
   25ea0:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   25ea2:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25ea4:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   25ea6:	d504      	bpl.n	25eb2 <bt_gatt_check_perm+0x12>
   25ea8:	f013 0f95 	tst.w	r3, #149	; 0x95
   25eac:	d01d      	beq.n	25eea <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25eae:	684c      	ldr	r4, [r1, #4]
   25eb0:	b1dc      	cbz	r4, 25eea <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25eb2:	0794      	lsls	r4, r2, #30
   25eb4:	d504      	bpl.n	25ec0 <bt_gatt_check_perm+0x20>
   25eb6:	f413 7f95 	tst.w	r3, #298	; 0x12a
   25eba:	d018      	beq.n	25eee <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25ebc:	6889      	ldr	r1, [r1, #8]
   25ebe:	b1b1      	cbz	r1, 25eee <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   25ec0:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   25ec4:	f414 7fc0 	tst.w	r4, #384	; 0x180
   25ec8:	d001      	beq.n	25ece <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   25eca:	2005      	movs	r0, #5
}
   25ecc:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25ece:	f014 0f30 	tst.w	r4, #48	; 0x30
   25ed2:	d105      	bne.n	25ee0 <bt_gatt_check_perm+0x40>
	return 0;
   25ed4:	f014 0f0c 	tst.w	r4, #12
   25ed8:	bf14      	ite	ne
   25eda:	200f      	movne	r0, #15
   25edc:	2000      	moveq	r0, #0
   25ede:	e7f5      	b.n	25ecc <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25ee0:	f7ff f8e2 	bl	250a8 <bt_conn_get_security>
   25ee4:	2802      	cmp	r0, #2
   25ee6:	d8f5      	bhi.n	25ed4 <bt_gatt_check_perm+0x34>
   25ee8:	e7ef      	b.n	25eca <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25eea:	2002      	movs	r0, #2
   25eec:	e7ee      	b.n	25ecc <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25eee:	2003      	movs	r0, #3
   25ef0:	e7ec      	b.n	25ecc <bt_gatt_check_perm+0x2c>

00025ef2 <bt_gatt_is_subscribed>:
{
   25ef2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25ef6:	7a83      	ldrb	r3, [r0, #10]
   25ef8:	2b07      	cmp	r3, #7
{
   25efa:	4605      	mov	r5, r0
   25efc:	460c      	mov	r4, r1
   25efe:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   25f00:	d110      	bne.n	25f24 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   25f02:	2300      	movs	r3, #0
   25f04:	f88d 300c 	strb.w	r3, [sp, #12]
   25f08:	6820      	ldr	r0, [r4, #0]
   25f0a:	f642 0303 	movw	r3, #10243	; 0x2803
   25f0e:	a903      	add	r1, sp, #12
   25f10:	f8ad 300e 	strh.w	r3, [sp, #14]
   25f14:	f7fe fdc4 	bl	24aa0 <bt_uuid_cmp>
   25f18:	b960      	cbnz	r0, 25f34 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   25f1a:	68e3      	ldr	r3, [r4, #12]
   25f1c:	799b      	ldrb	r3, [r3, #6]
   25f1e:	f013 0f30 	tst.w	r3, #48	; 0x30
   25f22:	d103      	bne.n	25f2c <bt_gatt_is_subscribed+0x3a>
		return false;
   25f24:	2000      	movs	r0, #0
}
   25f26:	b004      	add	sp, #16
   25f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   25f2c:	4620      	mov	r0, r4
   25f2e:	f7f4 fbaf 	bl	1a690 <bt_gatt_attr_next>
   25f32:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   25f34:	2300      	movs	r3, #0
   25f36:	6820      	ldr	r0, [r4, #0]
   25f38:	f88d 300c 	strb.w	r3, [sp, #12]
   25f3c:	a903      	add	r1, sp, #12
   25f3e:	f642 1302 	movw	r3, #10498	; 0x2902
   25f42:	f8ad 300e 	strh.w	r3, [sp, #14]
   25f46:	f7fe fdab 	bl	24aa0 <bt_uuid_cmp>
   25f4a:	b118      	cbz	r0, 25f54 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   25f4c:	4620      	mov	r0, r4
   25f4e:	f7f4 fb9f 	bl	1a690 <bt_gatt_attr_next>
   25f52:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   25f54:	2600      	movs	r6, #0
   25f56:	f642 1802 	movw	r8, #10498	; 0x2902
   25f5a:	6820      	ldr	r0, [r4, #0]
   25f5c:	f88d 6000 	strb.w	r6, [sp]
   25f60:	4669      	mov	r1, sp
   25f62:	f8ad 8002 	strh.w	r8, [sp, #2]
   25f66:	f7fe fd9b 	bl	24aa0 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   25f6a:	b9d8      	cbnz	r0, 25fa4 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   25f6c:	2300      	movs	r3, #0
   25f6e:	6820      	ldr	r0, [r4, #0]
   25f70:	f88d 300c 	strb.w	r3, [sp, #12]
   25f74:	a903      	add	r1, sp, #12
   25f76:	f642 1302 	movw	r3, #10498	; 0x2902
   25f7a:	f8ad 300e 	strh.w	r3, [sp, #14]
   25f7e:	f7fe fd8f 	bl	24aa0 <bt_uuid_cmp>
   25f82:	2800      	cmp	r0, #0
   25f84:	d1ce      	bne.n	25f24 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   25f86:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   25f88:	4622      	mov	r2, r4
   25f8a:	4628      	mov	r0, r5
   25f8c:	f812 1b01 	ldrb.w	r1, [r2], #1
   25f90:	f7ff f88c 	bl	250ac <bt_conn_is_peer_addr_le>
   25f94:	2800      	cmp	r0, #0
   25f96:	d0c5      	beq.n	25f24 <bt_gatt_is_subscribed+0x32>
   25f98:	8923      	ldrh	r3, [r4, #8]
   25f9a:	421f      	tst	r7, r3
   25f9c:	bf14      	ite	ne
   25f9e:	2001      	movne	r0, #1
   25fa0:	2000      	moveq	r0, #0
   25fa2:	e7c0      	b.n	25f26 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   25fa4:	6820      	ldr	r0, [r4, #0]
   25fa6:	f88d 6004 	strb.w	r6, [sp, #4]
   25faa:	f642 0303 	movw	r3, #10243	; 0x2803
   25fae:	a901      	add	r1, sp, #4
   25fb0:	f8ad 3006 	strh.w	r3, [sp, #6]
   25fb4:	f7fe fd74 	bl	24aa0 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   25fb8:	2800      	cmp	r0, #0
   25fba:	d0d7      	beq.n	25f6c <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   25fbc:	6820      	ldr	r0, [r4, #0]
   25fbe:	f88d 6008 	strb.w	r6, [sp, #8]
   25fc2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   25fc6:	a902      	add	r1, sp, #8
   25fc8:	f8ad 300a 	strh.w	r3, [sp, #10]
   25fcc:	f7fe fd68 	bl	24aa0 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   25fd0:	2800      	cmp	r0, #0
   25fd2:	d0cb      	beq.n	25f6c <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   25fd4:	6820      	ldr	r0, [r4, #0]
   25fd6:	f88d 600c 	strb.w	r6, [sp, #12]
   25fda:	f642 0301 	movw	r3, #10241	; 0x2801
   25fde:	a903      	add	r1, sp, #12
   25fe0:	f8ad 300e 	strh.w	r3, [sp, #14]
   25fe4:	f7fe fd5c 	bl	24aa0 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   25fe8:	2800      	cmp	r0, #0
   25fea:	d0bf      	beq.n	25f6c <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   25fec:	4620      	mov	r0, r4
   25fee:	f7f4 fb4f 	bl	1a690 <bt_gatt_attr_next>
		if (!attr) {
   25ff2:	4604      	mov	r4, r0
   25ff4:	2800      	cmp	r0, #0
   25ff6:	d1b0      	bne.n	25f5a <bt_gatt_is_subscribed+0x68>
   25ff8:	e794      	b.n	25f24 <bt_gatt_is_subscribed+0x32>

00025ffa <bt_gatt_change_aware>:
{
   25ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ffc:	4606      	mov	r6, r0
   25ffe:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   26000:	f7f4 f80a 	bl	1a018 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   26004:	b318      	cbz	r0, 2604e <bt_gatt_change_aware+0x54>
   26006:	7a03      	ldrb	r3, [r0, #8]
   26008:	07db      	lsls	r3, r3, #31
   2600a:	d520      	bpl.n	2604e <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2600c:	f3bf 8f5b 	dmb	ish
   26010:	68c5      	ldr	r5, [r0, #12]
   26012:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26016:	f015 0501 	ands.w	r5, r5, #1
   2601a:	f100 040c 	add.w	r4, r0, #12
   2601e:	d116      	bne.n	2604e <bt_gatt_change_aware+0x54>
	if (!req) {
   26020:	b1b7      	cbz	r7, 26050 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26022:	f3bf 8f5b 	dmb	ish
   26026:	e854 1f00 	ldrex	r1, [r4]
   2602a:	f021 0302 	bic.w	r3, r1, #2
   2602e:	e844 3200 	strex	r2, r3, [r4]
   26032:	2a00      	cmp	r2, #0
   26034:	d1f7      	bne.n	26026 <bt_gatt_change_aware+0x2c>
   26036:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2603a:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   2603e:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   26040:	d008      	beq.n	26054 <bt_gatt_change_aware+0x5a>
		bt_att_clear_out_of_sync_sent(conn);
   26042:	f7ff fd35 	bl	25ab0 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   26046:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   26048:	4620      	mov	r0, r4
   2604a:	f7ff fe96 	bl	25d7a <atomic_set_bit>
		return true;
   2604e:	2501      	movs	r5, #1
}
   26050:	4628      	mov	r0, r5
   26052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   26054:	f7ff fd2a 	bl	25aac <bt_att_fixed_chan_only>
   26058:	2800      	cmp	r0, #0
   2605a:	d0f9      	beq.n	26050 <bt_gatt_change_aware+0x56>
   2605c:	4630      	mov	r0, r6
   2605e:	f7ff fd40 	bl	25ae2 <bt_att_out_of_sync_sent_on_fixed>
   26062:	2800      	cmp	r0, #0
   26064:	d0f4      	beq.n	26050 <bt_gatt_change_aware+0x56>
   26066:	f3bf 8f5b 	dmb	ish
   2606a:	e854 3f00 	ldrex	r3, [r4]
   2606e:	f023 0302 	bic.w	r3, r3, #2
   26072:	e844 3200 	strex	r2, r3, [r4]
   26076:	2a00      	cmp	r2, #0
   26078:	d1f7      	bne.n	2606a <bt_gatt_change_aware+0x70>
   2607a:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2607e:	4630      	mov	r0, r6
   26080:	f7ff fd16 	bl	25ab0 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   26084:	4639      	mov	r1, r7
   26086:	e7df      	b.n	26048 <bt_gatt_change_aware+0x4e>

00026088 <bt_smp_recv>:
{
   26088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2608a:	2100      	movs	r1, #0
   2608c:	f04f 32ff 	mov.w	r2, #4294967295
   26090:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   26094:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   26096:	4608      	mov	r0, r1
   26098:	f7ff f89d 	bl	251d6 <bt_l2cap_create_pdu_timeout>
   2609c:	f100 060c 	add.w	r6, r0, #12
   260a0:	4604      	mov	r4, r0
   260a2:	2101      	movs	r1, #1
   260a4:	4630      	mov	r0, r6
   260a6:	f000 f87b 	bl	261a0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   260aa:	2505      	movs	r5, #5
   260ac:	7005      	strb	r5, [r0, #0]
   260ae:	2101      	movs	r1, #1
   260b0:	4630      	mov	r0, r6
   260b2:	f000 f875 	bl	261a0 <net_buf_simple_add>
   260b6:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   260b8:	7005      	strb	r5, [r0, #0]
   260ba:	4622      	mov	r2, r4
   260bc:	9300      	str	r3, [sp, #0]
   260be:	2106      	movs	r1, #6
   260c0:	4638      	mov	r0, r7
   260c2:	f7ff f88b 	bl	251dc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   260c6:	b110      	cbz	r0, 260ce <bt_smp_recv+0x46>
		net_buf_unref(buf);
   260c8:	4620      	mov	r0, r4
   260ca:	f7f4 febd 	bl	1ae48 <net_buf_unref>
}
   260ce:	2000      	movs	r0, #0
   260d0:	b003      	add	sp, #12
   260d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000260d4 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   260d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   260d8:	4770      	bx	lr

000260da <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   260da:	2000      	movs	r0, #0
   260dc:	4770      	bx	lr

000260de <fixed_data_unref>:
}
   260de:	4770      	bx	lr

000260e0 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   260e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   260e2:	6849      	ldr	r1, [r1, #4]
   260e4:	6809      	ldr	r1, [r1, #0]
   260e6:	f7f4 be1d 	b.w	1ad24 <net_buf_alloc_len>

000260ea <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   260ea:	f7f8 b89f 	b.w	1e22c <z_impl_k_queue_get>

000260ee <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   260ee:	6883      	ldr	r3, [r0, #8]
   260f0:	440b      	add	r3, r1
   260f2:	6003      	str	r3, [r0, #0]
}
   260f4:	4770      	bx	lr

000260f6 <net_buf_slist_put>:
	__asm__ volatile(
   260f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   260fa:	f3ef 8211 	mrs	r2, BASEPRI
   260fe:	f383 8812 	msr	BASEPRI_MAX, r3
   26102:	f3bf 8f6f 	isb	sy
	parent->next = child;
   26106:	2300      	movs	r3, #0
   26108:	600b      	str	r3, [r1, #0]
	return list->tail;
   2610a:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2610c:	b933      	cbnz	r3, 2611c <net_buf_slist_put+0x26>
	list->head = node;
   2610e:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   26112:	f382 8811 	msr	BASEPRI, r2
   26116:	f3bf 8f6f 	isb	sy
}
   2611a:	4770      	bx	lr
	parent->next = child;
   2611c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2611e:	6041      	str	r1, [r0, #4]
}
   26120:	e7f7      	b.n	26112 <net_buf_slist_put+0x1c>

00026122 <net_buf_slist_get>:
{
   26122:	b510      	push	{r4, lr}
   26124:	4603      	mov	r3, r0
	__asm__ volatile(
   26126:	f04f 0240 	mov.w	r2, #64	; 0x40
   2612a:	f3ef 8111 	mrs	r1, BASEPRI
   2612e:	f382 8812 	msr	BASEPRI_MAX, r2
   26132:	f3bf 8f6f 	isb	sy
	return list->head;
   26136:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   26138:	b128      	cbz	r0, 26146 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2613a:	685c      	ldr	r4, [r3, #4]
	return node->next;
   2613c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2613e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26140:	42a0      	cmp	r0, r4
	list->tail = node;
   26142:	bf08      	it	eq
   26144:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   26146:	f381 8811 	msr	BASEPRI, r1
   2614a:	f3bf 8f6f 	isb	sy
}
   2614e:	bd10      	pop	{r4, pc}

00026150 <net_buf_put>:
	k_fifo_put(fifo, buf);
   26150:	f000 bcec 	b.w	26b2c <k_queue_append>

00026154 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   26154:	7a02      	ldrb	r2, [r0, #8]
   26156:	3201      	adds	r2, #1
   26158:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2615a:	4770      	bx	lr

0002615c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2615c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2615e:	4618      	mov	r0, r3
   26160:	685b      	ldr	r3, [r3, #4]
   26162:	2b00      	cmp	r3, #0
   26164:	d1fb      	bne.n	2615e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   26166:	4770      	bx	lr

00026168 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   26168:	6842      	ldr	r2, [r0, #4]
{
   2616a:	b510      	push	{r4, lr}
	if (parent->frags) {
   2616c:	b12a      	cbz	r2, 2617a <net_buf_frag_insert+0x12>
   2616e:	460b      	mov	r3, r1
	while (buf->frags) {
   26170:	461c      	mov	r4, r3
   26172:	685b      	ldr	r3, [r3, #4]
   26174:	2b00      	cmp	r3, #0
   26176:	d1fb      	bne.n	26170 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   26178:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2617a:	6041      	str	r1, [r0, #4]
}
   2617c:	bd10      	pop	{r4, pc}

0002617e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2617e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   26180:	4604      	mov	r4, r0
   26182:	b920      	cbnz	r0, 2618e <net_buf_frag_add+0x10>
	buf->ref++;
   26184:	7a0b      	ldrb	r3, [r1, #8]
   26186:	3301      	adds	r3, #1
   26188:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   2618a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2618c:	bd10      	pop	{r4, pc}
   2618e:	4603      	mov	r3, r0
	while (buf->frags) {
   26190:	4618      	mov	r0, r3
   26192:	685b      	ldr	r3, [r3, #4]
   26194:	2b00      	cmp	r3, #0
   26196:	d1fb      	bne.n	26190 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   26198:	f7ff ffe6 	bl	26168 <net_buf_frag_insert>
   2619c:	4620      	mov	r0, r4
   2619e:	e7f5      	b.n	2618c <net_buf_frag_add+0xe>

000261a0 <net_buf_simple_add>:
	return buf->data + buf->len;
   261a0:	8883      	ldrh	r3, [r0, #4]
   261a2:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   261a4:	4419      	add	r1, r3
   261a6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   261a8:	18d0      	adds	r0, r2, r3
   261aa:	4770      	bx	lr

000261ac <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   261ac:	b430      	push	{r4, r5}
   261ae:	8884      	ldrh	r4, [r0, #4]
   261b0:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   261b2:	18a3      	adds	r3, r4, r2
   261b4:	8083      	strh	r3, [r0, #4]
   261b6:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   261b8:	bc30      	pop	{r4, r5}
   261ba:	f001 b8ff 	b.w	273bc <memcpy>

000261be <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   261be:	b510      	push	{r4, lr}
   261c0:	8883      	ldrh	r3, [r0, #4]
   261c2:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   261c4:	1c5c      	adds	r4, r3, #1
   261c6:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   261c8:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   261ca:	18d0      	adds	r0, r2, r3
   261cc:	bd10      	pop	{r4, pc}

000261ce <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   261ce:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   261d0:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   261d2:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   261d4:	1a40      	subs	r0, r0, r1
	buf->len += len;
   261d6:	4411      	add	r1, r2
	buf->data -= len;
   261d8:	6018      	str	r0, [r3, #0]
	buf->len += len;
   261da:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   261dc:	4770      	bx	lr

000261de <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   261de:	8882      	ldrh	r2, [r0, #4]
   261e0:	1a52      	subs	r2, r2, r1
{
   261e2:	4603      	mov	r3, r0
	buf->len -= len;
   261e4:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   261e6:	6800      	ldr	r0, [r0, #0]
   261e8:	4408      	add	r0, r1
   261ea:	6018      	str	r0, [r3, #0]
}
   261ec:	4770      	bx	lr

000261ee <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   261ee:	4603      	mov	r3, r0
	void *data = buf->data;
   261f0:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   261f2:	889a      	ldrh	r2, [r3, #4]
   261f4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   261f6:	4401      	add	r1, r0
	buf->len -= len;
   261f8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   261fa:	6019      	str	r1, [r3, #0]

	return data;
}
   261fc:	4770      	bx	lr

000261fe <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   261fe:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   26200:	6803      	ldr	r3, [r0, #0]
   26202:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26204:	2102      	movs	r1, #2
   26206:	f7ff ffea 	bl	261de <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2620a:	4620      	mov	r0, r4
   2620c:	bd10      	pop	{r4, pc}

0002620e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2620e:	6802      	ldr	r2, [r0, #0]
   26210:	6880      	ldr	r0, [r0, #8]
}
   26212:	1a10      	subs	r0, r2, r0
   26214:	4770      	bx	lr

00026216 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26216:	8883      	ldrh	r3, [r0, #4]
   26218:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2621a:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2621c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2621e:	6803      	ldr	r3, [r0, #0]
   26220:	1a5b      	subs	r3, r3, r1
}
   26222:	1ad0      	subs	r0, r2, r3
   26224:	4770      	bx	lr

00026226 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   26226:	6903      	ldr	r3, [r0, #16]
   26228:	b2c9      	uxtb	r1, r1
   2622a:	220c      	movs	r2, #12
   2622c:	fb01 3302 	mla	r3, r1, r2, r3
   26230:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   26232:	f000 0007 	and.w	r0, r0, #7
   26236:	4770      	bx	lr

00026238 <set_on_state>:
	__asm__ volatile(
   26238:	f04f 0340 	mov.w	r3, #64	; 0x40
   2623c:	f3ef 8211 	mrs	r2, BASEPRI
   26240:	f383 8812 	msr	BASEPRI_MAX, r3
   26244:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   26248:	6803      	ldr	r3, [r0, #0]
   2624a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2624e:	f043 0302 	orr.w	r3, r3, #2
   26252:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   26254:	f382 8811 	msr	BASEPRI, r2
   26258:	f3bf 8f6f 	isb	sy
}
   2625c:	4770      	bx	lr

0002625e <stop>:
{
   2625e:	b570      	push	{r4, r5, r6, lr}
   26260:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   26262:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   26264:	f04f 0440 	mov.w	r4, #64	; 0x40
   26268:	f3ef 8511 	mrs	r5, BASEPRI
   2626c:	f384 8812 	msr	BASEPRI_MAX, r4
   26270:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26274:	260c      	movs	r6, #12
   26276:	fb06 3401 	mla	r4, r6, r1, r3
   2627a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2627c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   26280:	d008      	beq.n	26294 <stop+0x36>
   26282:	42a2      	cmp	r2, r4
   26284:	d006      	beq.n	26294 <stop+0x36>
	__asm__ volatile(
   26286:	f385 8811 	msr	BASEPRI, r5
   2628a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2628e:	f04f 30ff 	mov.w	r0, #4294967295
}
   26292:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   26294:	4371      	muls	r1, r6
   26296:	440b      	add	r3, r1
   26298:	2201      	movs	r2, #1
   2629a:	641a      	str	r2, [r3, #64]	; 0x40
   2629c:	f385 8811 	msr	BASEPRI, r5
   262a0:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   262a4:	6843      	ldr	r3, [r0, #4]
   262a6:	440b      	add	r3, r1
   262a8:	685b      	ldr	r3, [r3, #4]
   262aa:	4798      	blx	r3
	return 0;
   262ac:	2000      	movs	r0, #0
   262ae:	e7f0      	b.n	26292 <stop+0x34>

000262b0 <api_stop>:
	return stop(dev, subsys, CTX_API);
   262b0:	2280      	movs	r2, #128	; 0x80
   262b2:	f7ff bfd4 	b.w	2625e <stop>

000262b6 <async_start>:
{
   262b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262b8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   262ba:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   262bc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   262be:	f04f 0540 	mov.w	r5, #64	; 0x40
   262c2:	f3ef 8611 	mrs	r6, BASEPRI
   262c6:	f385 8812 	msr	BASEPRI_MAX, r5
   262ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   262ce:	250c      	movs	r5, #12
   262d0:	4369      	muls	r1, r5
   262d2:	440c      	add	r4, r1
   262d4:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   262d6:	f005 0c07 	and.w	ip, r5, #7
   262da:	f1bc 0f01 	cmp.w	ip, #1
   262de:	d10b      	bne.n	262f8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   262e0:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   262e2:	f386 8811 	msr	BASEPRI, r6
   262e6:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   262ea:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   262ee:	6843      	ldr	r3, [r0, #4]
   262f0:	585b      	ldr	r3, [r3, r1]
   262f2:	4798      	blx	r3
	return 0;
   262f4:	2000      	movs	r0, #0
}
   262f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   262f8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   262fc:	42af      	cmp	r7, r5
   262fe:	f386 8811 	msr	BASEPRI, r6
   26302:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   26306:	bf0c      	ite	eq
   26308:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2630c:	f04f 30ff 	movne.w	r0, #4294967295
   26310:	e7f1      	b.n	262f6 <async_start+0x40>

00026312 <api_start>:
{
   26312:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   26314:	2480      	movs	r4, #128	; 0x80
   26316:	9400      	str	r4, [sp, #0]
   26318:	f7ff ffcd 	bl	262b6 <async_start>
}
   2631c:	b002      	add	sp, #8
   2631e:	bd10      	pop	{r4, pc}

00026320 <onoff_started_callback>:
{
   26320:	b410      	push	{r4}
	return &data->mgr[type];
   26322:	6900      	ldr	r0, [r0, #16]
   26324:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   26326:	241c      	movs	r4, #28
   26328:	fb03 0004 	mla	r0, r3, r4, r0
   2632c:	2100      	movs	r1, #0
}
   2632e:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   26332:	4710      	bx	r2

00026334 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   26334:	2000      	movs	r0, #0
   26336:	f7f6 bec5 	b.w	1d0c4 <nrfx_clock_start>

0002633a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2633a:	2000      	movs	r0, #0
   2633c:	f000 ba10 	b.w	26760 <nrfx_clock_stop>

00026340 <blocking_start_callback>:
{
   26340:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   26342:	f7f7 bfa7 	b.w	1e294 <z_impl_k_sem_give>

00026346 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26346:	6843      	ldr	r3, [r0, #4]
   26348:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2634a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2634e:	600b      	str	r3, [r1, #0]
}
   26350:	2000      	movs	r0, #0
   26352:	4770      	bx	lr

00026354 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26354:	6843      	ldr	r3, [r0, #4]
   26356:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   26358:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2635c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   26360:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   26364:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   26368:	2000      	movs	r0, #0
   2636a:	4770      	bx	lr

0002636c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2636c:	6843      	ldr	r3, [r0, #4]
   2636e:	685b      	ldr	r3, [r3, #4]
}
   26370:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   26372:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   26376:	4770      	bx	lr

00026378 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26378:	6843      	ldr	r3, [r0, #4]
   2637a:	685b      	ldr	r3, [r3, #4]
}
   2637c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2637e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   26382:	4770      	bx	lr

00026384 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26384:	6843      	ldr	r3, [r0, #4]
   26386:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26388:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2638c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   26390:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   26392:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   26396:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2639a:	2000      	movs	r0, #0
   2639c:	4770      	bx	lr

0002639e <gpio_nrfx_manage_callback>:
{
   2639e:	b510      	push	{r4, lr}
	return port->data;
   263a0:	6903      	ldr	r3, [r0, #16]
	return list->head;
   263a2:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   263a4:	b1f8      	cbz	r0, 263e6 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   263a6:	4288      	cmp	r0, r1
   263a8:	d119      	bne.n	263de <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   263aa:	689c      	ldr	r4, [r3, #8]
	return node->next;
   263ac:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   263ae:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   263b0:	42a1      	cmp	r1, r4
   263b2:	d100      	bne.n	263b6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   263b4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   263b6:	2000      	movs	r0, #0
   263b8:	6008      	str	r0, [r1, #0]
	if (set) {
   263ba:	b12a      	cbz	r2, 263c8 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   263bc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   263be:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   263c0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   263c2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   263c4:	b902      	cbnz	r2, 263c8 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   263c6:	6099      	str	r1, [r3, #8]
	return 0;
   263c8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   263ca:	e010      	b.n	263ee <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   263cc:	4281      	cmp	r1, r0
   263ce:	d106      	bne.n	263de <gpio_nrfx_manage_callback+0x40>
	return node->next;
   263d0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   263d2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   263d4:	6898      	ldr	r0, [r3, #8]
   263d6:	4281      	cmp	r1, r0
   263d8:	d1ed      	bne.n	263b6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   263da:	609c      	str	r4, [r3, #8]
}
   263dc:	e7eb      	b.n	263b6 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   263de:	4604      	mov	r4, r0
   263e0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   263e2:	2800      	cmp	r0, #0
   263e4:	d1f2      	bne.n	263cc <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   263e6:	2a00      	cmp	r2, #0
   263e8:	d1e8      	bne.n	263bc <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   263ea:	f06f 0015 	mvn.w	r0, #21
}
   263ee:	bd10      	pop	{r4, pc}

000263f0 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   263f0:	6902      	ldr	r2, [r0, #16]
{
   263f2:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   263f4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   263f8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   263fc:	2000      	movs	r0, #0
   263fe:	4770      	bx	lr

00026400 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26400:	6843      	ldr	r3, [r0, #4]
   26402:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26404:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26408:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2640c:	4770      	bx	lr

0002640e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2640e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   26410:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   26412:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26414:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26418:	b150      	cbz	r0, 26430 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2641a:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2641c:	2000      	movs	r0, #0
   2641e:	7812      	ldrb	r2, [r2, #0]
   26420:	700a      	strb	r2, [r1, #0]
   26422:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26426:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2642a:	2201      	movs	r2, #1
   2642c:	601a      	str	r2, [r3, #0]
	return 0;
   2642e:	4770      	bx	lr
		return -1;
   26430:	f04f 30ff 	mov.w	r0, #4294967295
}
   26434:	4770      	bx	lr

00026436 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   26436:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   26438:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2643a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2643e:	b940      	cbnz	r0, 26452 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   26440:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26442:	079b      	lsls	r3, r3, #30
   26444:	d406      	bmi.n	26454 <is_tx_ready.isra.0+0x1e>
   26446:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2644a:	3800      	subs	r0, #0
   2644c:	bf18      	it	ne
   2644e:	2001      	movne	r0, #1
   26450:	4770      	bx	lr
   26452:	2001      	movs	r0, #1
}
   26454:	4770      	bx	lr

00026456 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   26456:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   26458:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2645a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2645e:	05c9      	lsls	r1, r1, #23
   26460:	d518      	bpl.n	26494 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26462:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   26466:	b1a9      	cbz	r1, 26494 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   26468:	f04f 0040 	mov.w	r0, #64	; 0x40
   2646c:	f3ef 8111 	mrs	r1, BASEPRI
   26470:	f380 8812 	msr	BASEPRI_MAX, r0
   26474:	f3bf 8f6f 	isb	sy
   26478:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2647c:	b130      	cbz	r0, 2648c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2647e:	2000      	movs	r0, #0
   26480:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   26484:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26488:	2001      	movs	r0, #1
   2648a:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2648c:	f381 8811 	msr	BASEPRI, r1
   26490:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26494:	6852      	ldr	r2, [r2, #4]
   26496:	06d2      	lsls	r2, r2, #27
   26498:	d515      	bpl.n	264c6 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2649a:	f04f 0140 	mov.w	r1, #64	; 0x40
   2649e:	f3ef 8211 	mrs	r2, BASEPRI
   264a2:	f381 8812 	msr	BASEPRI_MAX, r1
   264a6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   264aa:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   264ae:	b111      	cbz	r1, 264b6 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   264b0:	2100      	movs	r1, #0
   264b2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   264b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   264ba:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   264be:	f382 8811 	msr	BASEPRI, r2
   264c2:	f3bf 8f6f 	isb	sy
}
   264c6:	4770      	bx	lr

000264c8 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   264c8:	b510      	push	{r4, lr}
   264ca:	2200      	movs	r2, #0
   264cc:	4604      	mov	r4, r0
   264ce:	2101      	movs	r1, #1
   264d0:	2028      	movs	r0, #40	; 0x28
   264d2:	f7ee fcff 	bl	14ed4 <z_arm_irq_priority_set>
   264d6:	2028      	movs	r0, #40	; 0x28
   264d8:	f7ee fccc 	bl	14e74 <arch_irq_enable>
   264dc:	4620      	mov	r0, r4
   264de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   264e2:	f7f5 b881 	b.w	1b5e8 <uarte_instance_init.constprop.0>

000264e6 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   264e6:	b510      	push	{r4, lr}
   264e8:	2200      	movs	r2, #0
   264ea:	4604      	mov	r4, r0
   264ec:	2101      	movs	r1, #1
   264ee:	2002      	movs	r0, #2
   264f0:	f7ee fcf0 	bl	14ed4 <z_arm_irq_priority_set>
   264f4:	2002      	movs	r0, #2
   264f6:	f7ee fcbd 	bl	14e74 <arch_irq_enable>
   264fa:	4620      	mov	r0, r4
   264fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26500:	f7f5 b872 	b.w	1b5e8 <uarte_instance_init.constprop.0>

00026504 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   26504:	2000      	movs	r0, #0
   26506:	4770      	bx	lr

00026508 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   26508:	b538      	push	{r3, r4, r5, lr}
   2650a:	460c      	mov	r4, r1
   2650c:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2650e:	f7f1 f82f 	bl	17570 <bt_is_ready>
   26512:	b128      	cbz	r0, 26520 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   26514:	4629      	mov	r1, r5
   26516:	4620      	mov	r0, r4
}
   26518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2651c:	f7f0 b9b4 	b.w	16888 <bt_hci_le_rand>
}
   26520:	f06f 000a 	mvn.w	r0, #10
   26524:	bd38      	pop	{r3, r4, r5, pc}

00026526 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   26526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26528:	460f      	mov	r7, r1
   2652a:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2652c:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   26530:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   26532:	42a6      	cmp	r6, r4
   26534:	d803      	bhi.n	2653e <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   26536:	d016      	beq.n	26566 <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   26538:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   2653a:	b003      	add	sp, #12
   2653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2653e:	1b33      	subs	r3, r6, r4
   26540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   26544:	bf38      	it	cc
   26546:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   26548:	462a      	mov	r2, r5
   2654a:	ab01      	add	r3, sp, #4
   2654c:	1939      	adds	r1, r7, r4
   2654e:	2000      	movs	r0, #0
   26550:	f7fa fd46 	bl	20fe0 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   26554:	b920      	cbnz	r0, 26560 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   26556:	9b01      	ldr	r3, [sp, #4]
   26558:	42ab      	cmp	r3, r5
   2655a:	d101      	bne.n	26560 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   2655c:	442c      	add	r4, r5
   2655e:	e7e8      	b.n	26532 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   26560:	f06f 0015 	mvn.w	r0, #21
   26564:	e7e9      	b.n	2653a <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   26566:	2000      	movs	r0, #0
   26568:	e7e7      	b.n	2653a <entropy_cc3xx_rng_get_entropy+0x14>

0002656a <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2656a:	2200      	movs	r2, #0
{
   2656c:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2656e:	4611      	mov	r1, r2
   26570:	4610      	mov	r0, r2
   26572:	f7fa fd01 	bl	20f78 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   26576:	2800      	cmp	r0, #0
	}

	return 0;
}
   26578:	bf18      	it	ne
   2657a:	f06f 0015 	mvnne.w	r0, #21
   2657e:	bd08      	pop	{r3, pc}

00026580 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   26580:	4770      	bx	lr

00026582 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   26582:	f100 0350 	add.w	r3, r0, #80	; 0x50
   26586:	009b      	lsls	r3, r3, #2
   26588:	b29b      	uxth	r3, r3
   2658a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2658e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   26592:	2200      	movs	r2, #0
   26594:	601a      	str	r2, [r3, #0]
   26596:	681b      	ldr	r3, [r3, #0]
}
   26598:	4770      	bx	lr

0002659a <sys_clock_cycle_get_32>:
{
   2659a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2659c:	f7f5 fada 	bl	1bb54 <z_nrf_rtc_timer_read>
}
   265a0:	bd08      	pop	{r3, pc}

000265a2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   265a2:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   265a4:	6843      	ldr	r3, [r0, #4]
   265a6:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   265a8:	7a05      	ldrb	r5, [r0, #8]
   265aa:	6844      	ldr	r4, [r0, #4]
   265ac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   265b0:	42a3      	cmp	r3, r4
   265b2:	d302      	bcc.n	265ba <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   265b4:	f06f 0001 	mvn.w	r0, #1
}
   265b8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   265ba:	795c      	ldrb	r4, [r3, #5]
   265bc:	428c      	cmp	r4, r1
   265be:	d001      	beq.n	265c4 <pinctrl_lookup_state+0x22>
		(*state)++;
   265c0:	3308      	adds	r3, #8
   265c2:	e7f0      	b.n	265a6 <pinctrl_lookup_state+0x4>
			return 0;
   265c4:	2000      	movs	r0, #0
   265c6:	e7f7      	b.n	265b8 <pinctrl_lookup_state+0x16>

000265c8 <gpio_pin_configure_dt>:
{
   265c8:	b470      	push	{r4, r5, r6}
   265ca:	4603      	mov	r3, r0
   265cc:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   265ce:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   265d0:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   265d2:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   265d4:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
   265d6:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   265d8:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   265da:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   265dc:	2401      	movs	r4, #1
   265de:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   265e0:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   265e4:	bf14      	ite	ne
   265e6:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   265e8:	43a3      	biceq	r3, r4
   265ea:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   265ec:	6833      	ldr	r3, [r6, #0]
}
   265ee:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   265f0:	4718      	bx	r3

000265f2 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   265f2:	2301      	movs	r3, #1
   265f4:	fa03 f101 	lsl.w	r1, r3, r1
   265f8:	6903      	ldr	r3, [r0, #16]
   265fa:	681b      	ldr	r3, [r3, #0]
   265fc:	4219      	tst	r1, r3
   265fe:	d003      	beq.n	26608 <gpio_pin_set+0x16>
	if (value != 0)	{
   26600:	b122      	cbz	r2, 2660c <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   26602:	6883      	ldr	r3, [r0, #8]
   26604:	691b      	ldr	r3, [r3, #16]
   26606:	e003      	b.n	26610 <gpio_pin_set+0x1e>
	if (value != 0)	{
   26608:	2a00      	cmp	r2, #0
   2660a:	d0fa      	beq.n	26602 <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   2660c:	6883      	ldr	r3, [r0, #8]
   2660e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26610:	4718      	bx	r3

00026612 <z_log_msg_static_create.constprop.0>:
   26612:	2300      	movs	r3, #0
   26614:	f7ed bd04 	b.w	14020 <z_impl_z_log_msg_static_create>

00026618 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   26618:	2101      	movs	r1, #1
   2661a:	f7f5 bd41 	b.w	1c0a0 <dk_set_led>

0002661e <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   2661e:	2100      	movs	r1, #0
   26620:	f7f5 bd3e 	b.w	1c0a0 <dk_set_led>

00026624 <hci_driver_close>:
{
   26624:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   26626:	f7f6 fc7d 	bl	1cf24 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2662a:	f04f 30ff 	mov.w	r0, #4294967295
   2662e:	f04f 31ff 	mov.w	r1, #4294967295
   26632:	f7f5 fd67 	bl	1c104 <multithreading_lock_acquire>
	if (err) {
   26636:	4604      	mov	r4, r0
   26638:	b920      	cbnz	r0, 26644 <hci_driver_close+0x20>
	err = sdc_disable();
   2663a:	f7da fe2f 	bl	129c <sdc_disable>
	if (err) {
   2663e:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   26640:	f7f5 fd68 	bl	1c114 <multithreading_lock_release>
}
   26644:	4620      	mov	r0, r4
   26646:	bd10      	pop	{r4, pc}

00026648 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   26648:	f7f5 bda4 	b.w	1c194 <rand_prio_low_vector_get>

0002664c <hci_driver_send>:
{
   2664c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2664e:	8a03      	ldrh	r3, [r0, #16]
{
   26650:	4605      	mov	r5, r0
	if (!buf->len) {
   26652:	b373      	cbz	r3, 266b2 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   26654:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   26656:	b1a3      	cbz	r3, 26682 <hci_driver_send+0x36>
   26658:	2b02      	cmp	r3, #2
   2665a:	d12a      	bne.n	266b2 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2665c:	f04f 30ff 	mov.w	r0, #4294967295
   26660:	f04f 31ff 	mov.w	r1, #4294967295
   26664:	f7f5 fd4e 	bl	1c104 <multithreading_lock_acquire>
	if (!errcode) {
   26668:	4604      	mov	r4, r0
   2666a:	b940      	cbnz	r0, 2667e <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2666c:	68e8      	ldr	r0, [r5, #12]
   2666e:	f7e6 fd10 	bl	d092 <sdc_hci_data_put>
   26672:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   26674:	f7f5 fd4e 	bl	1c114 <multithreading_lock_release>
		if (errcode) {
   26678:	b1b4      	cbz	r4, 266a8 <hci_driver_send+0x5c>
			receive_signal_raise();
   2667a:	f7f5 fd9f 	bl	1c1bc <receive_signal_raise>
}
   2667e:	4620      	mov	r0, r4
   26680:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   26682:	f04f 30ff 	mov.w	r0, #4294967295
   26686:	f04f 31ff 	mov.w	r1, #4294967295
   2668a:	f7f5 fd3b 	bl	1c104 <multithreading_lock_acquire>
	if (!errcode) {
   2668e:	4604      	mov	r4, r0
   26690:	2800      	cmp	r0, #0
   26692:	d1f4      	bne.n	2667e <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   26694:	68e8      	ldr	r0, [r5, #12]
   26696:	f7f5 ff17 	bl	1c4c8 <hci_internal_cmd_put>
   2669a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2669c:	f7f5 fd3a 	bl	1c114 <multithreading_lock_release>
	if (errcode) {
   266a0:	2c00      	cmp	r4, #0
   266a2:	d1ec      	bne.n	2667e <hci_driver_send+0x32>
	receive_signal_raise();
   266a4:	f7f5 fd8a 	bl	1c1bc <receive_signal_raise>
		net_buf_unref(buf);
   266a8:	4628      	mov	r0, r5
   266aa:	f7f4 fbcd 	bl	1ae48 <net_buf_unref>
   266ae:	2400      	movs	r4, #0
   266b0:	e7e5      	b.n	2667e <hci_driver_send+0x32>
	switch (type) {
   266b2:	f06f 0415 	mvn.w	r4, #21
   266b6:	e7e2      	b.n	2667e <hci_driver_send+0x32>

000266b8 <receive_work_handler>:
	hci_driver_receive_process();
   266b8:	f7f5 be8a 	b.w	1c3d0 <hci_driver_receive_process>

000266bc <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   266bc:	f101 0320 	add.w	r3, r1, #32
   266c0:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   266c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   266c6:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   266ca:	428b      	cmp	r3, r1
   266cc:	d1f9      	bne.n	266c2 <sys_memcpy_swap.constprop.0+0x6>
}
   266ce:	4770      	bx	lr

000266d0 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   266d0:	2100      	movs	r1, #0
   266d2:	f7f6 bc49 	b.w	1cf68 <cmd_le_generate_dhkey>

000266d6 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   266d6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   266da:	2901      	cmp	r1, #1
   266dc:	d801      	bhi.n	266e2 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   266de:	f7f6 bc43 	b.w	1cf68 <cmd_le_generate_dhkey>
}
   266e2:	2012      	movs	r0, #18
   266e4:	4770      	bx	lr

000266e6 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   266e6:	4668      	mov	r0, sp
   266e8:	f020 0107 	bic.w	r1, r0, #7
   266ec:	468d      	mov	sp, r1
   266ee:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   266f0:	f7e4 fed2 	bl	b498 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   266f4:	f7ee fc08 	bl	14f08 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   266f8:	f7ee fd80 	bl	151fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   266fc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26700:	4685      	mov	sp, r0
   26702:	4770      	bx	lr

00026704 <mpsl_low_prio_work_handler>:
{
   26704:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   26706:	f04f 31ff 	mov.w	r1, #4294967295
   2670a:	f04f 30ff 	mov.w	r0, #4294967295
   2670e:	f7f5 fcf9 	bl	1c104 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   26712:	f7ea fa8b 	bl	10c2c <mpsl_low_priority_process>
}
   26716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2671a:	f7f5 bcfb 	b.w	1c114 <multithreading_lock_release>

0002671e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2671e:	4668      	mov	r0, sp
   26720:	f020 0107 	bic.w	r1, r0, #7
   26724:	468d      	mov	sp, r1
   26726:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   26728:	f7e4 fe2c 	bl	b384 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2672c:	f7ee fbec 	bl	14f08 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   26730:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26734:	4685      	mov	sp, r0
   26736:	4770      	bx	lr

00026738 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   26738:	4668      	mov	r0, sp
   2673a:	f020 0107 	bic.w	r1, r0, #7
   2673e:	468d      	mov	sp, r1
   26740:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   26742:	f7e2 fb89 	bl	8e58 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   26746:	f7ee fbdf 	bl	14f08 <_arch_isr_direct_pm>
   2674a:	f7ee fd57 	bl	151fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2674e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26752:	4685      	mov	sp, r0
   26754:	4770      	bx	lr

00026756 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   26756:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   26758:	f7ea fc2f 	bl	10fba <mpsl_fem_init>

	return 0;
}
   2675c:	2000      	movs	r0, #0
   2675e:	bd08      	pop	{r3, pc}

00026760 <nrfx_clock_stop>:
	switch (domain) {
   26760:	2801      	cmp	r0, #1
   26762:	d101      	bne.n	26768 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   26764:	f7e5 bd12 	b.w	c18c <mpsl_clock_hfclk_release>
}
   26768:	4770      	bx	lr

0002676a <nrfx_clock_enable>:
}
   2676a:	4770      	bx	lr

0002676c <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2676c:	f7e5 bb18 	b.w	bda0 <MPSL_IRQ_CLOCK_Handler>

00026770 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   26770:	f7fa bbaa 	b.w	20ec8 <nrf_cc3xx_platform_init>

00026774 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   26774:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   26776:	f7ee f9c1 	bl	14afc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2677a:	f7ee fa95 	bl	14ca8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2677e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   26782:	f7fa bba1 	b.w	20ec8 <nrf_cc3xx_platform_init>

00026786 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   26786:	4700      	bx	r0

00026788 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   26788:	f000 bc5b 	b.w	27042 <z_impl_k_busy_wait>

0002678c <nrf_gpio_reconfigure>:
{
   2678c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2678e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26790:	a801      	add	r0, sp, #4
{
   26792:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   26796:	4616      	mov	r6, r2
   26798:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2679a:	f7f6 fdf9 	bl	1d390 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2679e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   267a0:	f1b6 0c00 	subs.w	ip, r6, #0
   267a4:	bf18      	it	ne
   267a6:	f04f 0c01 	movne.w	ip, #1
   267aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   267ae:	1e0b      	subs	r3, r1, #0
   267b0:	bf18      	it	ne
   267b2:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   267b4:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   267b6:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   267ba:	bf14      	ite	ne
   267bc:	f04f 0c0c 	movne.w	ip, #12
   267c0:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   267c4:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   267c6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   267ca:	bf14      	ite	ne
   267cc:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   267d0:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   267d4:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   267d6:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   267da:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   267de:	bf14      	ite	ne
   267e0:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   267e4:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   267e8:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   267ec:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   267f0:	b101      	cbz	r1, 267f4 <nrf_gpio_reconfigure+0x68>
   267f2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   267f4:	b10e      	cbz	r6, 267fa <nrf_gpio_reconfigure+0x6e>
   267f6:	7836      	ldrb	r6, [r6, #0]
   267f8:	0076      	lsls	r6, r6, #1
   267fa:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   267fc:	b10d      	cbz	r5, 26802 <nrf_gpio_reconfigure+0x76>
   267fe:	782d      	ldrb	r5, [r5, #0]
   26800:	00ad      	lsls	r5, r5, #2
   26802:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   26804:	b10c      	cbz	r4, 2680a <nrf_gpio_reconfigure+0x7e>
   26806:	7824      	ldrb	r4, [r4, #0]
   26808:	0224      	lsls	r4, r4, #8
   2680a:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2680c:	b10f      	cbz	r7, 26812 <nrf_gpio_reconfigure+0x86>
   2680e:	783f      	ldrb	r7, [r7, #0]
   26810:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   26812:	430c      	orrs	r4, r1
   26814:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   26816:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2681a:	b003      	add	sp, #12
   2681c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002681e <nrf_gpio_cfg_sense_set>:
{
   2681e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   26820:	f10d 030f 	add.w	r3, sp, #15
   26824:	9301      	str	r3, [sp, #4]
   26826:	2300      	movs	r3, #0
{
   26828:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2682c:	9300      	str	r3, [sp, #0]
   2682e:	461a      	mov	r2, r3
   26830:	4619      	mov	r1, r3
   26832:	f7ff ffab 	bl	2678c <nrf_gpio_reconfigure>
}
   26836:	b005      	add	sp, #20
   26838:	f85d fb04 	ldr.w	pc, [sp], #4

0002683c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2683c:	f7f7 b918 	b.w	1da70 <_DoInit>

00026840 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   26840:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   26842:	f7ff fffb 	bl	2683c <SEGGER_RTT_Init>

	return 0;
}
   26846:	2000      	movs	r0, #0
   26848:	bd08      	pop	{r3, pc}

0002684a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2684a:	4770      	bx	lr

0002684c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2684c:	b140      	cbz	r0, 26860 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2684e:	68c3      	ldr	r3, [r0, #12]
   26850:	7858      	ldrb	r0, [r3, #1]
   26852:	f010 0001 	ands.w	r0, r0, #1
   26856:	bf1e      	ittt	ne
   26858:	7818      	ldrbne	r0, [r3, #0]
   2685a:	fab0 f080 	clzne	r0, r0
   2685e:	0940      	lsrne	r0, r0, #5
}
   26860:	4770      	bx	lr

00026862 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   26862:	f000 bdb9 	b.w	273d8 <memset>

00026866 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26866:	f000 bda9 	b.w	273bc <memcpy>

0002686a <k_heap_init>:
{
   2686a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2686c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   26870:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26874:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   26878:	f7fd ba41 	b.w	23cfe <sys_heap_init>

0002687c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26880:	b085      	sub	sp, #20
   26882:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   26886:	4607      	mov	r7, r0
   26888:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2688a:	4650      	mov	r0, sl
   2688c:	4621      	mov	r1, r4
{
   2688e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   26890:	f000 fbdb 	bl	2704a <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   26894:	f1b4 3fff 	cmp.w	r4, #4294967295
   26898:	bf08      	it	eq
   2689a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2689e:	4605      	mov	r5, r0
   268a0:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   268a2:	bf04      	itt	eq
   268a4:	f04f 35ff 	moveq.w	r5, #4294967295
   268a8:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   268ac:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   268b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   268b4:	f3ef 8411 	mrs	r4, BASEPRI
   268b8:	f383 8812 	msr	BASEPRI_MAX, r3
   268bc:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   268c0:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   268c4:	464a      	mov	r2, r9
   268c6:	4641      	mov	r1, r8
   268c8:	4638      	mov	r0, r7
   268ca:	f7fd f9b1 	bl	23c30 <sys_heap_aligned_alloc>
   268ce:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   268d0:	f7f8 fafc 	bl	1eecc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   268d4:	9b03      	ldr	r3, [sp, #12]
   268d6:	b13b      	cbz	r3, 268e8 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   268d8:	f384 8811 	msr	BASEPRI, r4
   268dc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   268e0:	4618      	mov	r0, r3
   268e2:	b005      	add	sp, #20
   268e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   268e8:	1a28      	subs	r0, r5, r0
   268ea:	eb66 0101 	sbc.w	r1, r6, r1
   268ee:	2801      	cmp	r0, #1
   268f0:	f171 0200 	sbcs.w	r2, r1, #0
   268f4:	dbf0      	blt.n	268d8 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   268f6:	e9cd 0100 	strd	r0, r1, [sp]
   268fa:	465a      	mov	r2, fp
   268fc:	4621      	mov	r1, r4
   268fe:	4650      	mov	r0, sl
   26900:	f7f7 ff8e 	bl	1e820 <z_pend_curr>
	__asm__ volatile(
   26904:	f04f 0340 	mov.w	r3, #64	; 0x40
   26908:	f3ef 8411 	mrs	r4, BASEPRI
   2690c:	f383 8812 	msr	BASEPRI_MAX, r3
   26910:	f3bf 8f6f 	isb	sy
	return k;
   26914:	e7d6      	b.n	268c4 <k_heap_aligned_alloc+0x48>

00026916 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   26916:	b538      	push	{r3, r4, r5, lr}
   26918:	4604      	mov	r4, r0
   2691a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2691e:	f3ef 8511 	mrs	r5, BASEPRI
   26922:	f383 8812 	msr	BASEPRI_MAX, r3
   26926:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2692a:	f7fd f949 	bl	23bc0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2692e:	f104 000c 	add.w	r0, r4, #12
   26932:	f000 fb0b 	bl	26f4c <z_unpend_all>
   26936:	b130      	cbz	r0, 26946 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   26938:	4629      	mov	r1, r5
   2693a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2693e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   26942:	f7f7 bfd1 	b.w	1e8e8 <z_reschedule>
	__asm__ volatile(
   26946:	f385 8811 	msr	BASEPRI, r5
   2694a:	f3bf 8f6f 	isb	sy
}
   2694e:	bd38      	pop	{r3, r4, r5, pc}

00026950 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26950:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   26954:	4313      	orrs	r3, r2
   26956:	f013 0303 	ands.w	r3, r3, #3
   2695a:	d10c      	bne.n	26976 <create_free_list+0x26>
	slab->free_list = NULL;
   2695c:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2695e:	6881      	ldr	r1, [r0, #8]
   26960:	4299      	cmp	r1, r3
   26962:	d801      	bhi.n	26968 <create_free_list+0x18>
	return 0;
   26964:	2000      	movs	r0, #0
   26966:	4770      	bx	lr
		*(char **)p = slab->free_list;
   26968:	6941      	ldr	r1, [r0, #20]
   2696a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2696c:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   2696e:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26970:	3301      	adds	r3, #1
		p += slab->block_size;
   26972:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   26974:	e7f3      	b.n	2695e <create_free_list+0xe>
		return -EINVAL;
   26976:	f06f 0015 	mvn.w	r0, #21
}
   2697a:	4770      	bx	lr

0002697c <k_mem_slab_init>:
{
   2697c:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   2697e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   26982:	2300      	movs	r3, #0
	slab->buffer = buffer;
   26984:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   26986:	6183      	str	r3, [r0, #24]
{
   26988:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   2698a:	f7ff ffe1 	bl	26950 <create_free_list>
	if (rc < 0) {
   2698e:	2800      	cmp	r0, #0
   26990:	bfa8      	it	ge
   26992:	e9c4 4400 	strdge	r4, r4, [r4]
}
   26996:	bd10      	pop	{r4, pc}

00026998 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   26998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2699a:	4604      	mov	r4, r0
   2699c:	460d      	mov	r5, r1
	__asm__ volatile(
   2699e:	f04f 0340 	mov.w	r3, #64	; 0x40
   269a2:	f3ef 8611 	mrs	r6, BASEPRI
   269a6:	f383 8812 	msr	BASEPRI_MAX, r3
   269aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   269ae:	6947      	ldr	r7, [r0, #20]
   269b0:	b977      	cbnz	r7, 269d0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   269b2:	f000 fa85 	bl	26ec0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   269b6:	b158      	cbz	r0, 269d0 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   269b8:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   269ba:	6142      	str	r2, [r0, #20]
   269bc:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   269be:	f000 fa48 	bl	26e52 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   269c2:	4631      	mov	r1, r6
   269c4:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   269c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   269cc:	f7f7 bf8c 	b.w	1e8e8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   269d0:	682b      	ldr	r3, [r5, #0]
   269d2:	6962      	ldr	r2, [r4, #20]
   269d4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   269d6:	682b      	ldr	r3, [r5, #0]
   269d8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   269da:	69a3      	ldr	r3, [r4, #24]
   269dc:	3b01      	subs	r3, #1
   269de:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   269e0:	f386 8811 	msr	BASEPRI, r6
   269e4:	f3bf 8f6f 	isb	sy
}
   269e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000269ea <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   269ea:	f3ef 8005 	mrs	r0, IPSR
}
   269ee:	3800      	subs	r0, #0
   269f0:	bf18      	it	ne
   269f2:	2001      	movne	r0, #1
   269f4:	4770      	bx	lr

000269f6 <z_impl_k_thread_name_set>:
}
   269f6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   269fa:	4770      	bx	lr

000269fc <k_thread_name_get>:
}
   269fc:	2000      	movs	r0, #0
   269fe:	4770      	bx	lr

00026a00 <z_impl_k_thread_start>:
	z_sched_start(thread);
   26a00:	f7f7 bf84 	b.w	1e90c <z_sched_start>

00026a04 <z_pm_save_idle_exit>:
{
   26a04:	b508      	push	{r3, lr}
	pm_system_resume();
   26a06:	f7ed ff11 	bl	1482c <pm_system_resume>
}
   26a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   26a0e:	f7ff bdb7 	b.w	26580 <sys_clock_idle_exit>

00026a12 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   26a12:	f990 300e 	ldrsb.w	r3, [r0, #14]
   26a16:	428b      	cmp	r3, r1
   26a18:	d001      	beq.n	26a1e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   26a1a:	f7f7 bf1f 	b.w	1e85c <z_set_prio>
}
   26a1e:	2000      	movs	r0, #0
   26a20:	4770      	bx	lr

00026a22 <z_impl_k_mutex_init>:
{
   26a22:	4603      	mov	r3, r0
	mutex->owner = NULL;
   26a24:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   26a26:	e9c3 0002 	strd	r0, r0, [r3, #8]
   26a2a:	e9c3 3300 	strd	r3, r3, [r3]
}
   26a2e:	4770      	bx	lr

00026a30 <queue_insert>:
{
   26a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26a34:	4699      	mov	r9, r3
   26a36:	4604      	mov	r4, r0
   26a38:	f89d 3020 	ldrb.w	r3, [sp, #32]
   26a3c:	460d      	mov	r5, r1
   26a3e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26a40:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26a44:	f04f 0240 	mov.w	r2, #64	; 0x40
   26a48:	f3ef 8711 	mrs	r7, BASEPRI
   26a4c:	f382 8812 	msr	BASEPRI_MAX, r2
   26a50:	f3bf 8f6f 	isb	sy
	if (is_append) {
   26a54:	b103      	cbz	r3, 26a58 <queue_insert+0x28>
	return list->tail;
   26a56:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26a58:	4630      	mov	r0, r6
   26a5a:	f000 fa31 	bl	26ec0 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   26a5e:	b158      	cbz	r0, 26a78 <queue_insert+0x48>
   26a60:	2300      	movs	r3, #0
   26a62:	67c3      	str	r3, [r0, #124]	; 0x7c
   26a64:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   26a68:	f000 f9f3 	bl	26e52 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   26a6c:	4630      	mov	r0, r6
   26a6e:	4639      	mov	r1, r7
   26a70:	f7f7 ff3a 	bl	1e8e8 <z_reschedule>
		return 0;
   26a74:	2000      	movs	r0, #0
   26a76:	e00c      	b.n	26a92 <queue_insert+0x62>
	if (alloc) {
   26a78:	f1b9 0f00 	cmp.w	r9, #0
   26a7c:	d01b      	beq.n	26ab6 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   26a7e:	2108      	movs	r1, #8
   26a80:	f7f8 fb78 	bl	1f174 <z_thread_aligned_alloc>
		if (anode == NULL) {
   26a84:	b938      	cbnz	r0, 26a96 <queue_insert+0x66>
	__asm__ volatile(
   26a86:	f387 8811 	msr	BASEPRI, r7
   26a8a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   26a8e:	f06f 000b 	mvn.w	r0, #11
}
   26a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   26a96:	2201      	movs	r2, #1
		anode->data = data;
   26a98:	f8c0 8004 	str.w	r8, [r0, #4]
   26a9c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26a9e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26aa0:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   26aa4:	b95d      	cbnz	r5, 26abe <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26aa6:	6822      	ldr	r2, [r4, #0]
   26aa8:	430a      	orrs	r2, r1
   26aaa:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26aac:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   26aae:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26ab0:	b96a      	cbnz	r2, 26ace <queue_insert+0x9e>
	list->tail = node;
   26ab2:	6060      	str	r0, [r4, #4]
}
   26ab4:	e00b      	b.n	26ace <queue_insert+0x9e>
	node->next_and_flags = flags;
   26ab6:	f8c8 9000 	str.w	r9, [r8]
}
   26aba:	4640      	mov	r0, r8
   26abc:	e7ef      	b.n	26a9e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26abe:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   26ac0:	2a03      	cmp	r2, #3
   26ac2:	d810      	bhi.n	26ae6 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26ac4:	6001      	str	r1, [r0, #0]
	return list->tail;
   26ac6:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   26ac8:	b939      	cbnz	r1, 26ada <queue_insert+0xaa>
	list->head = node;
   26aca:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   26ace:	2104      	movs	r1, #4
   26ad0:	f104 0010 	add.w	r0, r4, #16
   26ad4:	f000 fc44 	bl	27360 <z_handle_obj_poll_events>
   26ad8:	e7c8      	b.n	26a6c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26ada:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26adc:	f002 0203 	and.w	r2, r2, #3
   26ae0:	4302      	orrs	r2, r0
   26ae2:	600a      	str	r2, [r1, #0]
   26ae4:	e7e5      	b.n	26ab2 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26ae6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   26aea:	430a      	orrs	r2, r1
   26aec:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26aee:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26af0:	f002 0203 	and.w	r2, r2, #3
   26af4:	ea40 0302 	orr.w	r3, r0, r2
   26af8:	602b      	str	r3, [r5, #0]
}
   26afa:	e7e8      	b.n	26ace <queue_insert+0x9e>

00026afc <z_queue_node_peek>:
{
   26afc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   26afe:	4604      	mov	r4, r0
   26b00:	b130      	cbz	r0, 26b10 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26b02:	6802      	ldr	r2, [r0, #0]
   26b04:	0793      	lsls	r3, r2, #30
   26b06:	d003      	beq.n	26b10 <z_queue_node_peek+0x14>
		ret = anode->data;
   26b08:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26b0a:	b109      	cbz	r1, 26b10 <z_queue_node_peek+0x14>
			k_free(anode);
   26b0c:	f000 fc3e 	bl	2738c <k_free>
}
   26b10:	4620      	mov	r0, r4
   26b12:	bd10      	pop	{r4, pc}

00026b14 <z_impl_k_queue_init>:
	list->head = NULL;
   26b14:	2300      	movs	r3, #0
	list->tail = NULL;
   26b16:	e9c0 3300 	strd	r3, r3, [r0]
   26b1a:	f100 0308 	add.w	r3, r0, #8
   26b1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   26b22:	f100 0310 	add.w	r3, r0, #16
   26b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   26b2a:	4770      	bx	lr

00026b2c <k_queue_append>:
{
   26b2c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   26b2e:	2301      	movs	r3, #1
   26b30:	9300      	str	r3, [sp, #0]
   26b32:	2300      	movs	r3, #0
{
   26b34:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26b36:	4619      	mov	r1, r3
   26b38:	f7ff ff7a 	bl	26a30 <queue_insert>
}
   26b3c:	b003      	add	sp, #12
   26b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00026b42 <k_queue_prepend>:
{
   26b42:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26b44:	2300      	movs	r3, #0
{
   26b46:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26b48:	9300      	str	r3, [sp, #0]
   26b4a:	4619      	mov	r1, r3
   26b4c:	f7ff ff70 	bl	26a30 <queue_insert>
}
   26b50:	b003      	add	sp, #12
   26b52:	f85d fb04 	ldr.w	pc, [sp], #4

00026b56 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   26b56:	b15a      	cbz	r2, 26b70 <z_impl_k_sem_init+0x1a>
   26b58:	428a      	cmp	r2, r1
   26b5a:	d309      	bcc.n	26b70 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   26b5c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   26b60:	e9c0 1202 	strd	r1, r2, [r0, #8]
   26b64:	e9c0 0000 	strd	r0, r0, [r0]
   26b68:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   26b6c:	2000      	movs	r0, #0
   26b6e:	4770      	bx	lr
		return -EINVAL;
   26b70:	f06f 0015 	mvn.w	r0, #21
}
   26b74:	4770      	bx	lr

00026b76 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   26b76:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   26b78:	2301      	movs	r3, #1
   26b7a:	408b      	lsls	r3, r1
   26b7c:	ea22 0303 	bic.w	r3, r2, r3
   26b80:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   26b82:	fa22 f001 	lsr.w	r0, r2, r1
}
   26b86:	f000 0001 	and.w	r0, r0, #1
   26b8a:	4770      	bx	lr

00026b8c <unschedule_locked>:
{
   26b8c:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26b8e:	2103      	movs	r1, #3
{
   26b90:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26b92:	300c      	adds	r0, #12
   26b94:	f7ff ffef 	bl	26b76 <flag_test_and_clear>
   26b98:	4604      	mov	r4, r0
   26b9a:	b118      	cbz	r0, 26ba4 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   26b9c:	f105 0010 	add.w	r0, r5, #16
   26ba0:	f000 fa07 	bl	26fb2 <z_abort_timeout>
}
   26ba4:	4620      	mov	r0, r4
   26ba6:	bd38      	pop	{r3, r4, r5, pc}

00026ba8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   26ba8:	b120      	cbz	r0, 26bb4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   26baa:	2200      	movs	r2, #0
   26bac:	4611      	mov	r1, r2
   26bae:	30d0      	adds	r0, #208	; 0xd0
   26bb0:	f000 b9dc 	b.w	26f6c <z_sched_wake>
}
   26bb4:	4770      	bx	lr

00026bb6 <cancel_async_locked>:
{
   26bb6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   26bb8:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26bba:	f3c3 0640 	ubfx	r6, r3, #1, #1
   26bbe:	079b      	lsls	r3, r3, #30
{
   26bc0:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26bc2:	d416      	bmi.n	26bf2 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   26bc4:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   26bc6:	2102      	movs	r1, #2
   26bc8:	300c      	adds	r0, #12
   26bca:	f7ff ffd4 	bl	26b76 <flag_test_and_clear>
   26bce:	b180      	cbz	r0, 26bf2 <cancel_async_locked+0x3c>
	return list->head;
   26bd0:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26bd4:	b16a      	cbz	r2, 26bf2 <cancel_async_locked+0x3c>
   26bd6:	4294      	cmp	r4, r2
   26bd8:	d11d      	bne.n	26c16 <cancel_async_locked+0x60>
	return node->next;
   26bda:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26bdc:	b99e      	cbnz	r6, 26c06 <cancel_async_locked+0x50>
   26bde:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	list->head = node;
   26be2:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   26be6:	429c      	cmp	r4, r3
   26be8:	d101      	bne.n	26bee <cancel_async_locked+0x38>
	list->tail = node;
   26bea:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
	parent->next = child;
   26bee:	2300      	movs	r3, #0
   26bf0:	6023      	str	r3, [r4, #0]
	return *flagp;
   26bf2:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   26bf4:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   26bf8:	bf1e      	ittt	ne
   26bfa:	f043 0302 	orrne.w	r3, r3, #2
   26bfe:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   26c00:	f040 0002 	orrne.w	r0, r0, #2
}
   26c04:	bd70      	pop	{r4, r5, r6, pc}
   26c06:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   26c08:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
   26c0c:	4294      	cmp	r4, r2
	list->tail = node;
   26c0e:	bf08      	it	eq
   26c10:	f8c5 60cc 	streq.w	r6, [r5, #204]	; 0xcc
}
   26c14:	e7eb      	b.n	26bee <cancel_async_locked+0x38>
	return node->next;
   26c16:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26c18:	6812      	ldr	r2, [r2, #0]
   26c1a:	e7db      	b.n	26bd4 <cancel_async_locked+0x1e>

00026c1c <work_timeout>:
{
   26c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26c1e:	4604      	mov	r4, r0
	__asm__ volatile(
   26c20:	f04f 0340 	mov.w	r3, #64	; 0x40
   26c24:	f3ef 8511 	mrs	r5, BASEPRI
   26c28:	f383 8812 	msr	BASEPRI_MAX, r3
   26c2c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   26c30:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26c32:	f1a0 0610 	sub.w	r6, r0, #16
   26c36:	2103      	movs	r1, #3
   26c38:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   26c3a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26c3c:	f7ff ff9b 	bl	26b76 <flag_test_and_clear>
   26c40:	b128      	cbz	r0, 26c4e <work_timeout+0x32>
		queue = dw->queue;
   26c42:	69a3      	ldr	r3, [r4, #24]
   26c44:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   26c46:	a901      	add	r1, sp, #4
   26c48:	4630      	mov	r0, r6
   26c4a:	f7f7 fba9 	bl	1e3a0 <submit_to_queue_locked>
	__asm__ volatile(
   26c4e:	f385 8811 	msr	BASEPRI, r5
   26c52:	f3bf 8f6f 	isb	sy
}
   26c56:	b002      	add	sp, #8
   26c58:	bd70      	pop	{r4, r5, r6, pc}

00026c5a <k_work_init>:
{
   26c5a:	b538      	push	{r3, r4, r5, lr}
   26c5c:	4604      	mov	r4, r0
   26c5e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   26c60:	2210      	movs	r2, #16
   26c62:	2100      	movs	r1, #0
   26c64:	f000 fbb8 	bl	273d8 <memset>
   26c68:	6065      	str	r5, [r4, #4]
}
   26c6a:	bd38      	pop	{r3, r4, r5, pc}

00026c6c <k_work_busy_get>:
	__asm__ volatile(
   26c6c:	f04f 0240 	mov.w	r2, #64	; 0x40
   26c70:	f3ef 8311 	mrs	r3, BASEPRI
   26c74:	f382 8812 	msr	BASEPRI_MAX, r2
   26c78:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   26c7c:	68c0      	ldr	r0, [r0, #12]
   26c7e:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   26c82:	f383 8811 	msr	BASEPRI, r3
   26c86:	f3bf 8f6f 	isb	sy
}
   26c8a:	4770      	bx	lr

00026c8c <z_work_submit_to_queue>:
{
   26c8c:	b513      	push	{r0, r1, r4, lr}
   26c8e:	9001      	str	r0, [sp, #4]
   26c90:	4608      	mov	r0, r1
	__asm__ volatile(
   26c92:	f04f 0340 	mov.w	r3, #64	; 0x40
   26c96:	f3ef 8411 	mrs	r4, BASEPRI
   26c9a:	f383 8812 	msr	BASEPRI_MAX, r3
   26c9e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   26ca2:	a901      	add	r1, sp, #4
   26ca4:	f7f7 fb7c 	bl	1e3a0 <submit_to_queue_locked>
	__asm__ volatile(
   26ca8:	f384 8811 	msr	BASEPRI, r4
   26cac:	f3bf 8f6f 	isb	sy
}
   26cb0:	b002      	add	sp, #8
   26cb2:	bd10      	pop	{r4, pc}

00026cb4 <k_work_submit_to_queue>:
{
   26cb4:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   26cb6:	f7ff ffe9 	bl	26c8c <z_work_submit_to_queue>
	if (ret > 0) {
   26cba:	1e04      	subs	r4, r0, #0
   26cbc:	dd09      	ble.n	26cd2 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   26cbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   26cc2:	f3ef 8011 	mrs	r0, BASEPRI
   26cc6:	f383 8812 	msr	BASEPRI_MAX, r3
   26cca:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26cce:	f000 f927 	bl	26f20 <z_reschedule_irqlock>
}
   26cd2:	4620      	mov	r0, r4
   26cd4:	bd10      	pop	{r4, pc}

00026cd6 <k_work_queue_init>:
{
   26cd6:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   26cd8:	22e8      	movs	r2, #232	; 0xe8
   26cda:	2100      	movs	r1, #0
   26cdc:	f000 fb7c 	bl	273d8 <memset>
}
   26ce0:	bd08      	pop	{r3, pc}

00026ce2 <k_work_init_delayable>:
{
   26ce2:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   26ce4:	2230      	movs	r2, #48	; 0x30
{
   26ce6:	4604      	mov	r4, r0
   26ce8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   26cea:	2100      	movs	r1, #0
   26cec:	f000 fb74 	bl	273d8 <memset>
   26cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
   26cf4:	6065      	str	r5, [r4, #4]
   26cf6:	60e3      	str	r3, [r4, #12]
}
   26cf8:	bd38      	pop	{r3, r4, r5, pc}

00026cfa <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   26cfa:	f7ff bfb7 	b.w	26c6c <k_work_busy_get>

00026cfe <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   26cfe:	b538      	push	{r3, r4, r5, lr}
   26d00:	4604      	mov	r4, r0
   26d02:	f04f 0340 	mov.w	r3, #64	; 0x40
   26d06:	f3ef 8511 	mrs	r5, BASEPRI
   26d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   26d0e:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   26d12:	f7ff ff3b 	bl	26b8c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26d16:	4620      	mov	r0, r4
   26d18:	f7ff ff4d 	bl	26bb6 <cancel_async_locked>
	__asm__ volatile(
   26d1c:	f385 8811 	msr	BASEPRI, r5
   26d20:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   26d24:	bd38      	pop	{r3, r4, r5, pc}

00026d26 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   26d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d28:	4604      	mov	r4, r0
   26d2a:	460d      	mov	r5, r1
	__asm__ volatile(
   26d2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26d30:	f3ef 8611 	mrs	r6, BASEPRI
   26d34:	f383 8812 	msr	BASEPRI_MAX, r3
   26d38:	f3bf 8f6f 	isb	sy
	return *flagp;
   26d3c:	68c3      	ldr	r3, [r0, #12]
   26d3e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   26d42:	2b00      	cmp	r3, #0
   26d44:	bf14      	ite	ne
   26d46:	2701      	movne	r7, #1
   26d48:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   26d4a:	d105      	bne.n	26d58 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   26d4c:	f386 8811 	msr	BASEPRI, r6
   26d50:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   26d54:	4638      	mov	r0, r7
   26d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   26d58:	f7ff ff18 	bl	26b8c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26d5c:	4620      	mov	r0, r4
   26d5e:	f7ff ff2a 	bl	26bb6 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   26d62:	4629      	mov	r1, r5
   26d64:	4620      	mov	r0, r4
   26d66:	f7f7 fafd 	bl	1e364 <cancel_sync_locked>
   26d6a:	f386 8811 	msr	BASEPRI, r6
   26d6e:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   26d72:	2800      	cmp	r0, #0
   26d74:	d0ee      	beq.n	26d54 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   26d76:	f04f 32ff 	mov.w	r2, #4294967295
   26d7a:	f04f 33ff 	mov.w	r3, #4294967295
   26d7e:	f105 0008 	add.w	r0, r5, #8
   26d82:	f7f7 faad 	bl	1e2e0 <z_impl_k_sem_take>
   26d86:	e7e5      	b.n	26d54 <k_work_cancel_delayable_sync+0x2e>

00026d88 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   26d88:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26d8c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26d8e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26d90:	2300      	movs	r3, #0
	node->prev = NULL;
   26d92:	e9c0 3300 	strd	r3, r3, [r0]
}
   26d96:	4770      	bx	lr

00026d98 <unpend_thread_no_timeout>:
{
   26d98:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   26d9a:	f7ff fff5 	bl	26d88 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26d9e:	7b43      	ldrb	r3, [r0, #13]
   26da0:	f023 0302 	bic.w	r3, r3, #2
   26da4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   26da6:	2300      	movs	r3, #0
   26da8:	6083      	str	r3, [r0, #8]
}
   26daa:	bd08      	pop	{r3, pc}

00026dac <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   26dac:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   26db0:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   26db4:	4283      	cmp	r3, r0
		return b2 - b1;
   26db6:	bf14      	ite	ne
   26db8:	1ac0      	subne	r0, r0, r3
	return 0;
   26dba:	2000      	moveq	r0, #0
}
   26dbc:	4770      	bx	lr

00026dbe <z_thread_timeout>:
{
   26dbe:	b510      	push	{r4, lr}
   26dc0:	4601      	mov	r1, r0
	__asm__ volatile(
   26dc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   26dc6:	f3ef 8411 	mrs	r4, BASEPRI
   26dca:	f383 8812 	msr	BASEPRI_MAX, r3
   26dce:	f3bf 8f6f 	isb	sy
		if (!killed) {
   26dd2:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   26dd6:	f013 0f28 	tst.w	r3, #40	; 0x28
   26dda:	d10d      	bne.n	26df8 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   26ddc:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   26de0:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   26de2:	b10b      	cbz	r3, 26de8 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   26de4:	f7ff ffd8 	bl	26d98 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26de8:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   26dec:	f023 0314 	bic.w	r3, r3, #20
   26df0:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   26df4:	f7f7 fc3c 	bl	1e670 <ready_thread>
	__asm__ volatile(
   26df8:	f384 8811 	msr	BASEPRI, r4
   26dfc:	f3bf 8f6f 	isb	sy
}
   26e00:	bd10      	pop	{r4, pc}

00026e02 <add_to_waitq_locked>:
{
   26e02:	b538      	push	{r3, r4, r5, lr}
   26e04:	4604      	mov	r4, r0
   26e06:	460d      	mov	r5, r1
	unready_thread(thread);
   26e08:	f7f7 fc66 	bl	1e6d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26e0c:	7b63      	ldrb	r3, [r4, #13]
   26e0e:	f043 0302 	orr.w	r3, r3, #2
   26e12:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26e14:	b1e5      	cbz	r5, 26e50 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   26e16:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   26e18:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26e1a:	429d      	cmp	r5, r3
   26e1c:	d109      	bne.n	26e32 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   26e1e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   26e20:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   26e24:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26e26:	606c      	str	r4, [r5, #4]
}
   26e28:	e012      	b.n	26e50 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   26e2a:	686a      	ldr	r2, [r5, #4]
   26e2c:	4293      	cmp	r3, r2
   26e2e:	d0f6      	beq.n	26e1e <add_to_waitq_locked+0x1c>
   26e30:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26e32:	2b00      	cmp	r3, #0
   26e34:	d0f3      	beq.n	26e1e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   26e36:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26e3a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   26e3e:	428a      	cmp	r2, r1
   26e40:	d0f3      	beq.n	26e2a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26e42:	4291      	cmp	r1, r2
   26e44:	ddf1      	ble.n	26e2a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   26e46:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26e48:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26e4c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26e4e:	605c      	str	r4, [r3, #4]
}
   26e50:	bd38      	pop	{r3, r4, r5, pc}

00026e52 <z_ready_thread>:
{
   26e52:	b510      	push	{r4, lr}
	__asm__ volatile(
   26e54:	f04f 0340 	mov.w	r3, #64	; 0x40
   26e58:	f3ef 8411 	mrs	r4, BASEPRI
   26e5c:	f383 8812 	msr	BASEPRI_MAX, r3
   26e60:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   26e64:	f7f7 fc04 	bl	1e670 <ready_thread>
	__asm__ volatile(
   26e68:	f384 8811 	msr	BASEPRI, r4
   26e6c:	f3bf 8f6f 	isb	sy
}
   26e70:	bd10      	pop	{r4, pc}

00026e72 <z_unpend_thread_no_timeout>:
{
   26e72:	b508      	push	{r3, lr}
	__asm__ volatile(
   26e74:	f04f 0340 	mov.w	r3, #64	; 0x40
   26e78:	f3ef 8111 	mrs	r1, BASEPRI
   26e7c:	f383 8812 	msr	BASEPRI_MAX, r3
   26e80:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26e84:	f7ff ff88 	bl	26d98 <unpend_thread_no_timeout>
	__asm__ volatile(
   26e88:	f381 8811 	msr	BASEPRI, r1
   26e8c:	f3bf 8f6f 	isb	sy
}
   26e90:	bd08      	pop	{r3, pc}

00026e92 <z_unpend1_no_timeout>:
{
   26e92:	b508      	push	{r3, lr}
   26e94:	4603      	mov	r3, r0
	__asm__ volatile(
   26e96:	f04f 0240 	mov.w	r2, #64	; 0x40
   26e9a:	f3ef 8111 	mrs	r1, BASEPRI
   26e9e:	f382 8812 	msr	BASEPRI_MAX, r2
   26ea2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26ea6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26ea8:	4283      	cmp	r3, r0
   26eaa:	d007      	beq.n	26ebc <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   26eac:	b108      	cbz	r0, 26eb2 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   26eae:	f7ff ff73 	bl	26d98 <unpend_thread_no_timeout>
	__asm__ volatile(
   26eb2:	f381 8811 	msr	BASEPRI, r1
   26eb6:	f3bf 8f6f 	isb	sy
}
   26eba:	bd08      	pop	{r3, pc}
   26ebc:	2000      	movs	r0, #0
   26ebe:	e7f8      	b.n	26eb2 <z_unpend1_no_timeout+0x20>

00026ec0 <z_unpend_first_thread>:
{
   26ec0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26ec2:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ec6:	f3ef 8511 	mrs	r5, BASEPRI
   26eca:	f383 8812 	msr	BASEPRI_MAX, r3
   26ece:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26ed2:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26ed4:	42a0      	cmp	r0, r4
   26ed6:	d00d      	beq.n	26ef4 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   26ed8:	b134      	cbz	r4, 26ee8 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   26eda:	4620      	mov	r0, r4
   26edc:	f7ff ff5c 	bl	26d98 <unpend_thread_no_timeout>
   26ee0:	f104 0018 	add.w	r0, r4, #24
   26ee4:	f000 f865 	bl	26fb2 <z_abort_timeout>
	__asm__ volatile(
   26ee8:	f385 8811 	msr	BASEPRI, r5
   26eec:	f3bf 8f6f 	isb	sy
}
   26ef0:	4620      	mov	r0, r4
   26ef2:	bd38      	pop	{r3, r4, r5, pc}
   26ef4:	2400      	movs	r4, #0
   26ef6:	e7f7      	b.n	26ee8 <z_unpend_first_thread+0x28>

00026ef8 <z_unpend_thread>:
{
   26ef8:	b510      	push	{r4, lr}
	__asm__ volatile(
   26efa:	f04f 0340 	mov.w	r3, #64	; 0x40
   26efe:	f3ef 8411 	mrs	r4, BASEPRI
   26f02:	f383 8812 	msr	BASEPRI_MAX, r3
   26f06:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26f0a:	f7ff ff45 	bl	26d98 <unpend_thread_no_timeout>
	__asm__ volatile(
   26f0e:	f384 8811 	msr	BASEPRI, r4
   26f12:	f3bf 8f6f 	isb	sy
}
   26f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26f1a:	3018      	adds	r0, #24
   26f1c:	f000 b849 	b.w	26fb2 <z_abort_timeout>

00026f20 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26f20:	4603      	mov	r3, r0
   26f22:	b920      	cbnz	r0, 26f2e <z_reschedule_irqlock+0xe>
   26f24:	f3ef 8205 	mrs	r2, IPSR
   26f28:	b90a      	cbnz	r2, 26f2e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   26f2a:	f7ee b82d 	b.w	14f88 <arch_swap>
   26f2e:	f383 8811 	msr	BASEPRI, r3
   26f32:	f3bf 8f6f 	isb	sy
}
   26f36:	4770      	bx	lr

00026f38 <z_reschedule_unlocked>:
	__asm__ volatile(
   26f38:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f3c:	f3ef 8011 	mrs	r0, BASEPRI
   26f40:	f383 8812 	msr	BASEPRI_MAX, r3
   26f44:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26f48:	f7ff bfea 	b.w	26f20 <z_reschedule_irqlock>

00026f4c <z_unpend_all>:
{
   26f4c:	b538      	push	{r3, r4, r5, lr}
   26f4e:	4605      	mov	r5, r0
	int need_sched = 0;
   26f50:	2000      	movs	r0, #0
	return list->head == list;
   26f52:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f54:	42a5      	cmp	r5, r4
   26f56:	d000      	beq.n	26f5a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26f58:	b904      	cbnz	r4, 26f5c <z_unpend_all+0x10>
}
   26f5a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   26f5c:	4620      	mov	r0, r4
   26f5e:	f7ff ffcb 	bl	26ef8 <z_unpend_thread>
		z_ready_thread(thread);
   26f62:	4620      	mov	r0, r4
   26f64:	f7ff ff75 	bl	26e52 <z_ready_thread>
		need_sched = 1;
   26f68:	2001      	movs	r0, #1
   26f6a:	e7f2      	b.n	26f52 <z_unpend_all+0x6>

00026f6c <z_sched_wake>:
{
   26f6c:	b538      	push	{r3, r4, r5, lr}
   26f6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f72:	f3ef 8511 	mrs	r5, BASEPRI
   26f76:	f383 8812 	msr	BASEPRI_MAX, r3
   26f7a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26f7e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f80:	42a0      	cmp	r0, r4
   26f82:	d012      	beq.n	26faa <z_sched_wake+0x3e>
		if (thread != NULL) {
   26f84:	b19c      	cbz	r4, 26fae <z_sched_wake+0x42>
   26f86:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   26f88:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   26f8a:	4620      	mov	r0, r4
   26f8c:	f7ff ff04 	bl	26d98 <unpend_thread_no_timeout>
   26f90:	f104 0018 	add.w	r0, r4, #24
   26f94:	f000 f80d 	bl	26fb2 <z_abort_timeout>
			ready_thread(thread);
   26f98:	4620      	mov	r0, r4
   26f9a:	f7f7 fb69 	bl	1e670 <ready_thread>
			ret = true;
   26f9e:	2001      	movs	r0, #1
	__asm__ volatile(
   26fa0:	f385 8811 	msr	BASEPRI, r5
   26fa4:	f3bf 8f6f 	isb	sy
}
   26fa8:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   26faa:	2000      	movs	r0, #0
   26fac:	e7f8      	b.n	26fa0 <z_sched_wake+0x34>
   26fae:	4620      	mov	r0, r4
   26fb0:	e7f6      	b.n	26fa0 <z_sched_wake+0x34>

00026fb2 <z_abort_timeout>:
{
   26fb2:	b510      	push	{r4, lr}
	__asm__ volatile(
   26fb4:	f04f 0240 	mov.w	r2, #64	; 0x40
   26fb8:	f3ef 8411 	mrs	r4, BASEPRI
   26fbc:	f382 8812 	msr	BASEPRI_MAX, r2
   26fc0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   26fc4:	6803      	ldr	r3, [r0, #0]
   26fc6:	b13b      	cbz	r3, 26fd8 <z_abort_timeout+0x26>
			remove_timeout(to);
   26fc8:	f7f7 fe8c 	bl	1ece4 <remove_timeout>
			ret = 0;
   26fcc:	2000      	movs	r0, #0
	__asm__ volatile(
   26fce:	f384 8811 	msr	BASEPRI, r4
   26fd2:	f3bf 8f6f 	isb	sy
}
   26fd6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   26fd8:	f06f 0015 	mvn.w	r0, #21
   26fdc:	e7f7      	b.n	26fce <z_abort_timeout+0x1c>

00026fde <z_get_next_timeout_expiry>:
{
   26fde:	b510      	push	{r4, lr}
	__asm__ volatile(
   26fe0:	f04f 0340 	mov.w	r3, #64	; 0x40
   26fe4:	f3ef 8411 	mrs	r4, BASEPRI
   26fe8:	f383 8812 	msr	BASEPRI_MAX, r3
   26fec:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   26ff0:	f7f7 fe50 	bl	1ec94 <next_timeout>
	__asm__ volatile(
   26ff4:	f384 8811 	msr	BASEPRI, r4
   26ff8:	f3bf 8f6f 	isb	sy
}
   26ffc:	bd10      	pop	{r4, pc}

00026ffe <z_set_timeout_expiry>:
{
   26ffe:	b570      	push	{r4, r5, r6, lr}
   27000:	4604      	mov	r4, r0
   27002:	460d      	mov	r5, r1
	__asm__ volatile(
   27004:	f04f 0340 	mov.w	r3, #64	; 0x40
   27008:	f3ef 8611 	mrs	r6, BASEPRI
   2700c:	f383 8812 	msr	BASEPRI_MAX, r3
   27010:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   27014:	f7f7 fe3e 	bl	1ec94 <next_timeout>
			      || (ticks <= next_to);
   27018:	2801      	cmp	r0, #1
   2701a:	dd07      	ble.n	2702c <z_set_timeout_expiry+0x2e>
   2701c:	42a0      	cmp	r0, r4
   2701e:	db05      	blt.n	2702c <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   27020:	42a0      	cmp	r0, r4
   27022:	4629      	mov	r1, r5
   27024:	bfa8      	it	ge
   27026:	4620      	movge	r0, r4
   27028:	f7f4 fee6 	bl	1bdf8 <sys_clock_set_timeout>
	__asm__ volatile(
   2702c:	f386 8811 	msr	BASEPRI, r6
   27030:	f3bf 8f6f 	isb	sy
}
   27034:	bd70      	pop	{r4, r5, r6, pc}

00027036 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   27036:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   27038:	f7f7 ff48 	bl	1eecc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2703c:	bd08      	pop	{r3, pc}

0002703e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2703e:	f7f7 bf45 	b.w	1eecc <sys_clock_tick_get>

00027042 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   27042:	b108      	cbz	r0, 27048 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   27044:	f7ee bde6 	b.w	15c14 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   27048:	4770      	bx	lr

0002704a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2704a:	f1b1 3fff 	cmp.w	r1, #4294967295
   2704e:	bf08      	it	eq
   27050:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   27054:	b538      	push	{r3, r4, r5, lr}
   27056:	460c      	mov	r4, r1
   27058:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2705a:	d014      	beq.n	27086 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2705c:	4308      	orrs	r0, r1
   2705e:	d103      	bne.n	27068 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   27060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   27064:	f7f7 bf32 	b.w	1eecc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   27068:	f06f 0001 	mvn.w	r0, #1
   2706c:	1b40      	subs	r0, r0, r5
   2706e:	f04f 33ff 	mov.w	r3, #4294967295
   27072:	eb63 0101 	sbc.w	r1, r3, r1
   27076:	2900      	cmp	r1, #0
   27078:	da04      	bge.n	27084 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2707a:	f7f7 ff27 	bl	1eecc <sys_clock_tick_get>
   2707e:	1940      	adds	r0, r0, r5
   27080:	eb41 0104 	adc.w	r1, r1, r4
}
   27084:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   27086:	f04f 30ff 	mov.w	r0, #4294967295
   2708a:	4601      	mov	r1, r0
   2708c:	e7fa      	b.n	27084 <sys_clock_timeout_end_calc+0x3a>

0002708e <k_timer_init>:
	timer->status = 0U;
   2708e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   27090:	e9c0 1208 	strd	r1, r2, [r0, #32]
   27094:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   27098:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2709c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   270a0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   270a2:	6343      	str	r3, [r0, #52]	; 0x34
}
   270a4:	4770      	bx	lr

000270a6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   270a6:	b510      	push	{r4, lr}
   270a8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   270aa:	f7ff ff82 	bl	26fb2 <z_abort_timeout>

	if (inactive) {
   270ae:	b9b0      	cbnz	r0, 270de <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   270b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   270b2:	b10b      	cbz	r3, 270b8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   270b4:	4620      	mov	r0, r4
   270b6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   270b8:	f104 0018 	add.w	r0, r4, #24
   270bc:	f7ff fee9 	bl	26e92 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   270c0:	b168      	cbz	r0, 270de <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   270c2:	f7ff fec6 	bl	26e52 <z_ready_thread>
	__asm__ volatile(
   270c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   270ca:	f3ef 8011 	mrs	r0, BASEPRI
   270ce:	f383 8812 	msr	BASEPRI_MAX, r3
   270d2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   270d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   270da:	f7ff bf21 	b.w	26f20 <z_reschedule_irqlock>
   270de:	bd10      	pop	{r4, pc}

000270e0 <add_event>:
{
   270e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270e2:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   270e4:	e9d0 1300 	ldrd	r1, r3, [r0]
   270e8:	4288      	cmp	r0, r1
   270ea:	4604      	mov	r4, r0
   270ec:	d105      	bne.n	270fa <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   270ee:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   270f0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   270f4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   270f6:	6065      	str	r5, [r4, #4]
   270f8:	e01d      	b.n	27136 <add_event+0x56>
	if ((pending == NULL) ||
   270fa:	2b00      	cmp	r3, #0
   270fc:	d0f7      	beq.n	270ee <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   270fe:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27100:	b100      	cbz	r0, 27104 <add_event+0x24>
   27102:	3860      	subs	r0, #96	; 0x60
   27104:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   27108:	4639      	mov	r1, r7
   2710a:	f7ff fe4f 	bl	26dac <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2710e:	2800      	cmp	r0, #0
   27110:	dced      	bgt.n	270ee <add_event+0xe>
	return list->head == list;
   27112:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27114:	42b4      	cmp	r4, r6
   27116:	d0ea      	beq.n	270ee <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27118:	2e00      	cmp	r6, #0
   2711a:	d0e8      	beq.n	270ee <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2711c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2711e:	b101      	cbz	r1, 27122 <add_event+0x42>
   27120:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   27122:	4638      	mov	r0, r7
   27124:	f7ff fe42 	bl	26dac <z_sched_prio_cmp>
   27128:	2800      	cmp	r0, #0
   2712a:	dd05      	ble.n	27138 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2712c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2712e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   27132:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27134:	6075      	str	r5, [r6, #4]
}
   27136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   27138:	6863      	ldr	r3, [r4, #4]
   2713a:	429e      	cmp	r6, r3
   2713c:	d0d7      	beq.n	270ee <add_event+0xe>
   2713e:	6836      	ldr	r6, [r6, #0]
   27140:	e7ea      	b.n	27118 <add_event+0x38>

00027142 <register_events>:
{
   27142:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   27146:	2500      	movs	r5, #0
{
   27148:	468b      	mov	fp, r1
   2714a:	4614      	mov	r4, r2
   2714c:	461f      	mov	r7, r3
   2714e:	4682      	mov	sl, r0
	int events_registered = 0;
   27150:	462e      	mov	r6, r5
	event->poller = NULL;
   27152:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   27154:	455d      	cmp	r5, fp
   27156:	db02      	blt.n	2715e <register_events+0x1c>
}
   27158:	4630      	mov	r0, r6
   2715a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2715e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27162:	f3ef 8911 	mrs	r9, BASEPRI
   27166:	f383 8812 	msr	BASEPRI_MAX, r3
   2716a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2716e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   27172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27176:	3b01      	subs	r3, #1
   27178:	2b07      	cmp	r3, #7
   2717a:	d80f      	bhi.n	2719c <register_events+0x5a>
   2717c:	e8df f003 	tbb	[pc, r3]
   27180:	0a0e041e 	.word	0x0a0e041e
   27184:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   27188:	f8da 3010 	ldr.w	r3, [sl, #16]
   2718c:	689b      	ldr	r3, [r3, #8]
   2718e:	b12b      	cbz	r3, 2719c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27190:	2302      	movs	r3, #2
   27192:	e020      	b.n	271d6 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   27194:	f8da 3010 	ldr.w	r3, [sl, #16]
   27198:	681b      	ldr	r3, [r3, #0]
   2719a:	bb8b      	cbnz	r3, 27200 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2719c:	bb47      	cbnz	r7, 271f0 <register_events+0xae>
   2719e:	7823      	ldrb	r3, [r4, #0]
   271a0:	b333      	cbz	r3, 271f0 <register_events+0xae>
	switch (event->type) {
   271a2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   271a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   271aa:	3b01      	subs	r3, #1
   271ac:	2b07      	cmp	r3, #7
   271ae:	d830      	bhi.n	27212 <register_events+0xd0>
   271b0:	e8df f003 	tbb	[pc, r3]
   271b4:	282f2833 	.word	0x282f2833
   271b8:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   271bc:	f8da 3010 	ldr.w	r3, [sl, #16]
   271c0:	689b      	ldr	r3, [r3, #8]
   271c2:	2b00      	cmp	r3, #0
   271c4:	d0ea      	beq.n	2719c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   271c6:	2301      	movs	r3, #1
   271c8:	e005      	b.n	271d6 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   271ca:	f8da 3010 	ldr.w	r3, [sl, #16]
   271ce:	6a1b      	ldr	r3, [r3, #32]
   271d0:	2b00      	cmp	r3, #0
   271d2:	d0e3      	beq.n	2719c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   271d4:	2310      	movs	r3, #16
	event->state |= state;
   271d6:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   271da:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   271de:	f3c2 3186 	ubfx	r1, r2, #14, #7
   271e2:	430b      	orrs	r3, r1
   271e4:	f363 3294 	bfi	r2, r3, #14, #7
   271e8:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   271ec:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   271f0:	f389 8811 	msr	BASEPRI, r9
   271f4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   271f8:	3501      	adds	r5, #1
   271fa:	f10a 0a14 	add.w	sl, sl, #20
   271fe:	e7a9      	b.n	27154 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27200:	2304      	movs	r3, #4
   27202:	e7e8      	b.n	271d6 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   27204:	f8da 0010 	ldr.w	r0, [sl, #16]
   27208:	4622      	mov	r2, r4
   2720a:	4651      	mov	r1, sl
   2720c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2720e:	f7ff ff67 	bl	270e0 <add_event>
	event->poller = poller;
   27212:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   27216:	3601      	adds	r6, #1
   27218:	e7ea      	b.n	271f0 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2721a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2721e:	4622      	mov	r2, r4
   27220:	4651      	mov	r1, sl
   27222:	e7f4      	b.n	2720e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   27224:	f8da 0010 	ldr.w	r0, [sl, #16]
   27228:	4622      	mov	r2, r4
   2722a:	4651      	mov	r1, sl
   2722c:	3024      	adds	r0, #36	; 0x24
   2722e:	e7ee      	b.n	2720e <register_events+0xcc>

00027230 <signal_poll_event>:
{
   27230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   27234:	6884      	ldr	r4, [r0, #8]
{
   27236:	4605      	mov	r5, r0
   27238:	460e      	mov	r6, r1
	if (poller != NULL) {
   2723a:	b144      	cbz	r4, 2724e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2723c:	7863      	ldrb	r3, [r4, #1]
   2723e:	2b01      	cmp	r3, #1
   27240:	d12e      	bne.n	272a0 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   27242:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   27246:	f013 0302 	ands.w	r3, r3, #2
   2724a:	d10a      	bne.n	27262 <signal_poll_event+0x32>
		poller->is_polling = false;
   2724c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2724e:	68eb      	ldr	r3, [r5, #12]
   27250:	f3c3 3286 	ubfx	r2, r3, #14, #7
   27254:	4316      	orrs	r6, r2
	event->poller = NULL;
   27256:	2000      	movs	r0, #0
	event->state |= state;
   27258:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   2725c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2725e:	60eb      	str	r3, [r5, #12]
	return retcode;
   27260:	e03e      	b.n	272e0 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   27262:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   27266:	f1b3 3fff 	cmp.w	r3, #4294967295
   2726a:	bf08      	it	eq
   2726c:	f112 0f02 	cmneq.w	r2, #2
   27270:	d032      	beq.n	272d8 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27272:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   27276:	4640      	mov	r0, r8
   27278:	f7ff fe3e 	bl	26ef8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2727c:	2e08      	cmp	r6, #8
   2727e:	bf0c      	ite	eq
   27280:	f06f 0303 	mvneq.w	r3, #3
   27284:	2300      	movne	r3, #0
   27286:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27288:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2728c:	06db      	lsls	r3, r3, #27
   2728e:	d109      	bne.n	272a4 <signal_poll_event+0x74>
   27290:	f854 7c48 	ldr.w	r7, [r4, #-72]
   27294:	b937      	cbnz	r7, 272a4 <signal_poll_event+0x74>
	z_ready_thread(thread);
   27296:	4640      	mov	r0, r8
   27298:	f7ff fddb 	bl	26e52 <z_ready_thread>
		poller->is_polling = false;
   2729c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2729e:	e7d6      	b.n	2724e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   272a0:	2b02      	cmp	r3, #2
   272a2:	d001      	beq.n	272a8 <signal_poll_event+0x78>
		poller->is_polling = false;
   272a4:	2300      	movs	r3, #0
   272a6:	e7d1      	b.n	2724c <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   272a8:	7823      	ldrb	r3, [r4, #0]
   272aa:	2b00      	cmp	r3, #0
   272ac:	d0cf      	beq.n	2724e <signal_poll_event+0x1e>
   272ae:	f854 7c04 	ldr.w	r7, [r4, #-4]
   272b2:	2f00      	cmp	r7, #0
   272b4:	d0f2      	beq.n	2729c <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   272b6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   272ba:	f1a4 0914 	sub.w	r9, r4, #20
   272be:	f104 0014 	add.w	r0, r4, #20
   272c2:	f7ff fe76 	bl	26fb2 <z_abort_timeout>
		twork->poll_result = 0;
   272c6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   272ca:	4649      	mov	r1, r9
   272cc:	4638      	mov	r0, r7
   272ce:	f7ff fcdd 	bl	26c8c <z_work_submit_to_queue>
		poller->is_polling = false;
   272d2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   272d6:	e7ba      	b.n	2724e <signal_poll_event+0x1e>
		poller->is_polling = false;
   272d8:	2300      	movs	r3, #0
   272da:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   272dc:	f06f 000a 	mvn.w	r0, #10
}
   272e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000272e4 <clear_event_registrations>:
	while (num_events--) {
   272e4:	2314      	movs	r3, #20
{
   272e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   272e8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   272ec:	2400      	movs	r4, #0
	switch (event->type) {
   272ee:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   272f2:	b901      	cbnz	r1, 272f6 <clear_event_registrations+0x12>
}
   272f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   272f6:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   272fa:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   272fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27302:	2b08      	cmp	r3, #8
   27304:	f1a0 0714 	sub.w	r7, r0, #20
   27308:	d80c      	bhi.n	27324 <clear_event_registrations+0x40>
   2730a:	fa26 f303 	lsr.w	r3, r6, r3
   2730e:	07db      	lsls	r3, r3, #31
   27310:	d508      	bpl.n	27324 <clear_event_registrations+0x40>
	return node->next != NULL;
   27312:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   27316:	b12b      	cbz	r3, 27324 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   27318:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2731c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2731e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   27320:	e940 4405 	strd	r4, r4, [r0, #-20]
   27324:	f382 8811 	msr	BASEPRI, r2
   27328:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2732c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27330:	f3ef 8211 	mrs	r2, BASEPRI
   27334:	f383 8812 	msr	BASEPRI_MAX, r3
   27338:	f3bf 8f6f 	isb	sy
   2733c:	3901      	subs	r1, #1
   2733e:	4638      	mov	r0, r7
   27340:	e7d7      	b.n	272f2 <clear_event_registrations+0xe>

00027342 <k_poll_event_init>:
{
   27342:	b510      	push	{r4, lr}
	event->type = type;
   27344:	0552      	lsls	r2, r2, #21
   27346:	0209      	lsls	r1, r1, #8
   27348:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2734c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   27350:	430a      	orrs	r2, r1
   27352:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   27354:	2400      	movs	r4, #0
	event->type = type;
   27356:	430a      	orrs	r2, r1
	event->obj = obj;
   27358:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2735c:	6084      	str	r4, [r0, #8]
}
   2735e:	bd10      	pop	{r4, pc}

00027360 <z_handle_obj_poll_events>:
{
   27360:	4603      	mov	r3, r0
	return list->head == list;
   27362:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   27364:	4283      	cmp	r3, r0
   27366:	d008      	beq.n	2737a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   27368:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2736c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2736e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27370:	2300      	movs	r3, #0
	node->prev = NULL;
   27372:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   27376:	f7ff bf5b 	b.w	27230 <signal_poll_event>
}
   2737a:	4770      	bx	lr

0002737c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2737c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2737e:	e9c0 0000 	strd	r0, r0, [r0]
   27382:	6083      	str	r3, [r0, #8]
}
   27384:	4770      	bx	lr

00027386 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   27386:	2300      	movs	r3, #0
   27388:	6083      	str	r3, [r0, #8]
}
   2738a:	4770      	bx	lr

0002738c <k_free>:
	if (ptr != NULL) {
   2738c:	b120      	cbz	r0, 27398 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2738e:	1f01      	subs	r1, r0, #4
   27390:	f850 0c04 	ldr.w	r0, [r0, #-4]
   27394:	f7ff babf 	b.w	26916 <k_heap_free>
}
   27398:	4770      	bx	lr

0002739a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2739a:	4770      	bx	lr

0002739c <memcmp>:
   2739c:	b510      	push	{r4, lr}
   2739e:	3901      	subs	r1, #1
   273a0:	4402      	add	r2, r0
   273a2:	4290      	cmp	r0, r2
   273a4:	d101      	bne.n	273aa <memcmp+0xe>
   273a6:	2000      	movs	r0, #0
   273a8:	e005      	b.n	273b6 <memcmp+0x1a>
   273aa:	7803      	ldrb	r3, [r0, #0]
   273ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   273b0:	42a3      	cmp	r3, r4
   273b2:	d001      	beq.n	273b8 <memcmp+0x1c>
   273b4:	1b18      	subs	r0, r3, r4
   273b6:	bd10      	pop	{r4, pc}
   273b8:	3001      	adds	r0, #1
   273ba:	e7f2      	b.n	273a2 <memcmp+0x6>

000273bc <memcpy>:
   273bc:	440a      	add	r2, r1
   273be:	4291      	cmp	r1, r2
   273c0:	f100 33ff 	add.w	r3, r0, #4294967295
   273c4:	d100      	bne.n	273c8 <memcpy+0xc>
   273c6:	4770      	bx	lr
   273c8:	b510      	push	{r4, lr}
   273ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   273ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   273d2:	4291      	cmp	r1, r2
   273d4:	d1f9      	bne.n	273ca <memcpy+0xe>
   273d6:	bd10      	pop	{r4, pc}

000273d8 <memset>:
   273d8:	4402      	add	r2, r0
   273da:	4603      	mov	r3, r0
   273dc:	4293      	cmp	r3, r2
   273de:	d100      	bne.n	273e2 <memset+0xa>
   273e0:	4770      	bx	lr
   273e2:	f803 1b01 	strb.w	r1, [r3], #1
   273e6:	e7f9      	b.n	273dc <memset+0x4>

000273e8 <__cvt>:
   273e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273ec:	b085      	sub	sp, #20
   273ee:	ec57 6b10 	vmov	r6, r7, d0
   273f2:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   273f6:	2f00      	cmp	r7, #0
   273f8:	460c      	mov	r4, r1
   273fa:	4690      	mov	r8, r2
   273fc:	4619      	mov	r1, r3
   273fe:	bfb8      	it	lt
   27400:	4632      	movlt	r2, r6
   27402:	463b      	mov	r3, r7
   27404:	f02b 0a20 	bic.w	sl, fp, #32
   27408:	bfbb      	ittet	lt
   2740a:	f107 4300 	addlt.w	r3, r7, #2147483648	; 0x80000000
   2740e:	461f      	movlt	r7, r3
   27410:	2300      	movge	r3, #0
   27412:	232d      	movlt	r3, #45	; 0x2d
   27414:	bfb8      	it	lt
   27416:	4616      	movlt	r6, r2
   27418:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2741c:	700b      	strb	r3, [r1, #0]
   2741e:	d005      	beq.n	2742c <__cvt+0x44>
   27420:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   27424:	d100      	bne.n	27428 <__cvt+0x40>
   27426:	3401      	adds	r4, #1
   27428:	2102      	movs	r1, #2
   2742a:	e000      	b.n	2742e <__cvt+0x46>
   2742c:	2103      	movs	r1, #3
   2742e:	ab03      	add	r3, sp, #12
   27430:	9301      	str	r3, [sp, #4]
   27432:	ab02      	add	r3, sp, #8
   27434:	9300      	str	r3, [sp, #0]
   27436:	ec47 6b10 	vmov	d0, r6, r7
   2743a:	464b      	mov	r3, r9
   2743c:	4622      	mov	r2, r4
   2743e:	f7ea fd2f 	bl	11ea0 <_dtoa_r>
   27442:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   27446:	4605      	mov	r5, r0
   27448:	d119      	bne.n	2747e <__cvt+0x96>
   2744a:	f018 0f01 	tst.w	r8, #1
   2744e:	d00e      	beq.n	2746e <__cvt+0x86>
   27450:	eb05 0804 	add.w	r8, r5, r4
   27454:	2200      	movs	r2, #0
   27456:	2300      	movs	r3, #0
   27458:	4630      	mov	r0, r6
   2745a:	4639      	mov	r1, r7
   2745c:	f7d9 fade 	bl	a1c <__aeabi_dcmpeq>
   27460:	b108      	cbz	r0, 27466 <__cvt+0x7e>
   27462:	f8cd 800c 	str.w	r8, [sp, #12]
   27466:	2230      	movs	r2, #48	; 0x30
   27468:	9b03      	ldr	r3, [sp, #12]
   2746a:	4543      	cmp	r3, r8
   2746c:	d321      	bcc.n	274b2 <__cvt+0xca>
   2746e:	9b03      	ldr	r3, [sp, #12]
   27470:	9a10      	ldr	r2, [sp, #64]	; 0x40
   27472:	1b5b      	subs	r3, r3, r5
   27474:	4628      	mov	r0, r5
   27476:	6013      	str	r3, [r2, #0]
   27478:	b005      	add	sp, #20
   2747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2747e:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   27482:	d0e2      	beq.n	2744a <__cvt+0x62>
   27484:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   27488:	eb00 0804 	add.w	r8, r0, r4
   2748c:	d1e2      	bne.n	27454 <__cvt+0x6c>
   2748e:	7803      	ldrb	r3, [r0, #0]
   27490:	2b30      	cmp	r3, #48	; 0x30
   27492:	d10a      	bne.n	274aa <__cvt+0xc2>
   27494:	2200      	movs	r2, #0
   27496:	2300      	movs	r3, #0
   27498:	4630      	mov	r0, r6
   2749a:	4639      	mov	r1, r7
   2749c:	f7d9 fabe 	bl	a1c <__aeabi_dcmpeq>
   274a0:	b918      	cbnz	r0, 274aa <__cvt+0xc2>
   274a2:	f1c4 0401 	rsb	r4, r4, #1
   274a6:	f8c9 4000 	str.w	r4, [r9]
   274aa:	f8d9 3000 	ldr.w	r3, [r9]
   274ae:	4498      	add	r8, r3
   274b0:	e7d0      	b.n	27454 <__cvt+0x6c>
   274b2:	1c59      	adds	r1, r3, #1
   274b4:	9103      	str	r1, [sp, #12]
   274b6:	701a      	strb	r2, [r3, #0]
   274b8:	e7d6      	b.n	27468 <__cvt+0x80>

000274ba <__exponent>:
   274ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   274bc:	2900      	cmp	r1, #0
   274be:	bfba      	itte	lt
   274c0:	4249      	neglt	r1, r1
   274c2:	232d      	movlt	r3, #45	; 0x2d
   274c4:	232b      	movge	r3, #43	; 0x2b
   274c6:	2909      	cmp	r1, #9
   274c8:	7002      	strb	r2, [r0, #0]
   274ca:	7043      	strb	r3, [r0, #1]
   274cc:	dd29      	ble.n	27522 <__exponent+0x68>
   274ce:	f10d 0307 	add.w	r3, sp, #7
   274d2:	461d      	mov	r5, r3
   274d4:	270a      	movs	r7, #10
   274d6:	461a      	mov	r2, r3
   274d8:	fbb1 f6f7 	udiv	r6, r1, r7
   274dc:	fb07 1416 	mls	r4, r7, r6, r1
   274e0:	3430      	adds	r4, #48	; 0x30
   274e2:	f802 4c01 	strb.w	r4, [r2, #-1]
   274e6:	460c      	mov	r4, r1
   274e8:	2c63      	cmp	r4, #99	; 0x63
   274ea:	f103 33ff 	add.w	r3, r3, #4294967295
   274ee:	4631      	mov	r1, r6
   274f0:	dcf1      	bgt.n	274d6 <__exponent+0x1c>
   274f2:	3130      	adds	r1, #48	; 0x30
   274f4:	1e94      	subs	r4, r2, #2
   274f6:	f803 1c01 	strb.w	r1, [r3, #-1]
   274fa:	1c41      	adds	r1, r0, #1
   274fc:	4623      	mov	r3, r4
   274fe:	42ab      	cmp	r3, r5
   27500:	d30a      	bcc.n	27518 <__exponent+0x5e>
   27502:	f10d 0309 	add.w	r3, sp, #9
   27506:	1a9b      	subs	r3, r3, r2
   27508:	42ac      	cmp	r4, r5
   2750a:	bf88      	it	hi
   2750c:	2300      	movhi	r3, #0
   2750e:	3302      	adds	r3, #2
   27510:	4403      	add	r3, r0
   27512:	1a18      	subs	r0, r3, r0
   27514:	b003      	add	sp, #12
   27516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27518:	f813 6b01 	ldrb.w	r6, [r3], #1
   2751c:	f801 6f01 	strb.w	r6, [r1, #1]!
   27520:	e7ed      	b.n	274fe <__exponent+0x44>
   27522:	2330      	movs	r3, #48	; 0x30
   27524:	3130      	adds	r1, #48	; 0x30
   27526:	7083      	strb	r3, [r0, #2]
   27528:	70c1      	strb	r1, [r0, #3]
   2752a:	1d03      	adds	r3, r0, #4
   2752c:	e7f1      	b.n	27512 <__exponent+0x58>

0002752e <_printf_common>:
   2752e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27532:	4616      	mov	r6, r2
   27534:	4698      	mov	r8, r3
   27536:	688a      	ldr	r2, [r1, #8]
   27538:	690b      	ldr	r3, [r1, #16]
   2753a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2753e:	4293      	cmp	r3, r2
   27540:	bfb8      	it	lt
   27542:	4613      	movlt	r3, r2
   27544:	6033      	str	r3, [r6, #0]
   27546:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2754a:	4607      	mov	r7, r0
   2754c:	460c      	mov	r4, r1
   2754e:	b10a      	cbz	r2, 27554 <_printf_common+0x26>
   27550:	3301      	adds	r3, #1
   27552:	6033      	str	r3, [r6, #0]
   27554:	6823      	ldr	r3, [r4, #0]
   27556:	0699      	lsls	r1, r3, #26
   27558:	bf42      	ittt	mi
   2755a:	6833      	ldrmi	r3, [r6, #0]
   2755c:	3302      	addmi	r3, #2
   2755e:	6033      	strmi	r3, [r6, #0]
   27560:	6825      	ldr	r5, [r4, #0]
   27562:	f015 0506 	ands.w	r5, r5, #6
   27566:	d106      	bne.n	27576 <_printf_common+0x48>
   27568:	f104 0a19 	add.w	sl, r4, #25
   2756c:	68e3      	ldr	r3, [r4, #12]
   2756e:	6832      	ldr	r2, [r6, #0]
   27570:	1a9b      	subs	r3, r3, r2
   27572:	42ab      	cmp	r3, r5
   27574:	dc26      	bgt.n	275c4 <_printf_common+0x96>
   27576:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2757a:	6822      	ldr	r2, [r4, #0]
   2757c:	3b00      	subs	r3, #0
   2757e:	bf18      	it	ne
   27580:	2301      	movne	r3, #1
   27582:	0692      	lsls	r2, r2, #26
   27584:	d42b      	bmi.n	275de <_printf_common+0xb0>
   27586:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2758a:	4641      	mov	r1, r8
   2758c:	4638      	mov	r0, r7
   2758e:	47c8      	blx	r9
   27590:	3001      	adds	r0, #1
   27592:	d01e      	beq.n	275d2 <_printf_common+0xa4>
   27594:	6823      	ldr	r3, [r4, #0]
   27596:	6922      	ldr	r2, [r4, #16]
   27598:	f003 0306 	and.w	r3, r3, #6
   2759c:	2b04      	cmp	r3, #4
   2759e:	bf02      	ittt	eq
   275a0:	68e5      	ldreq	r5, [r4, #12]
   275a2:	6833      	ldreq	r3, [r6, #0]
   275a4:	1aed      	subeq	r5, r5, r3
   275a6:	68a3      	ldr	r3, [r4, #8]
   275a8:	bf0c      	ite	eq
   275aa:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   275ae:	2500      	movne	r5, #0
   275b0:	4293      	cmp	r3, r2
   275b2:	bfc4      	itt	gt
   275b4:	1a9b      	subgt	r3, r3, r2
   275b6:	18ed      	addgt	r5, r5, r3
   275b8:	2600      	movs	r6, #0
   275ba:	341a      	adds	r4, #26
   275bc:	42b5      	cmp	r5, r6
   275be:	d11a      	bne.n	275f6 <_printf_common+0xc8>
   275c0:	2000      	movs	r0, #0
   275c2:	e008      	b.n	275d6 <_printf_common+0xa8>
   275c4:	2301      	movs	r3, #1
   275c6:	4652      	mov	r2, sl
   275c8:	4641      	mov	r1, r8
   275ca:	4638      	mov	r0, r7
   275cc:	47c8      	blx	r9
   275ce:	3001      	adds	r0, #1
   275d0:	d103      	bne.n	275da <_printf_common+0xac>
   275d2:	f04f 30ff 	mov.w	r0, #4294967295
   275d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   275da:	3501      	adds	r5, #1
   275dc:	e7c6      	b.n	2756c <_printf_common+0x3e>
   275de:	18e1      	adds	r1, r4, r3
   275e0:	1c5a      	adds	r2, r3, #1
   275e2:	2030      	movs	r0, #48	; 0x30
   275e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   275e8:	4422      	add	r2, r4
   275ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   275ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   275f2:	3302      	adds	r3, #2
   275f4:	e7c7      	b.n	27586 <_printf_common+0x58>
   275f6:	2301      	movs	r3, #1
   275f8:	4622      	mov	r2, r4
   275fa:	4641      	mov	r1, r8
   275fc:	4638      	mov	r0, r7
   275fe:	47c8      	blx	r9
   27600:	3001      	adds	r0, #1
   27602:	d0e6      	beq.n	275d2 <_printf_common+0xa4>
   27604:	3601      	adds	r6, #1
   27606:	e7d9      	b.n	275bc <_printf_common+0x8e>

00027608 <strcpy>:
   27608:	4603      	mov	r3, r0
   2760a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2760e:	f803 2b01 	strb.w	r2, [r3], #1
   27612:	2a00      	cmp	r2, #0
   27614:	d1f9      	bne.n	2760a <strcpy+0x2>
   27616:	4770      	bx	lr

00027618 <strncmp>:
   27618:	b510      	push	{r4, lr}
   2761a:	b16a      	cbz	r2, 27638 <strncmp+0x20>
   2761c:	3901      	subs	r1, #1
   2761e:	1884      	adds	r4, r0, r2
   27620:	f810 2b01 	ldrb.w	r2, [r0], #1
   27624:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   27628:	429a      	cmp	r2, r3
   2762a:	d103      	bne.n	27634 <strncmp+0x1c>
   2762c:	42a0      	cmp	r0, r4
   2762e:	d001      	beq.n	27634 <strncmp+0x1c>
   27630:	2a00      	cmp	r2, #0
   27632:	d1f5      	bne.n	27620 <strncmp+0x8>
   27634:	1ad0      	subs	r0, r2, r3
   27636:	bd10      	pop	{r4, pc}
   27638:	4610      	mov	r0, r2
   2763a:	e7fc      	b.n	27636 <strncmp+0x1e>

0002763c <strnlen>:
   2763c:	b510      	push	{r4, lr}
   2763e:	4602      	mov	r2, r0
   27640:	4401      	add	r1, r0
   27642:	428a      	cmp	r2, r1
   27644:	4613      	mov	r3, r2
   27646:	d003      	beq.n	27650 <strnlen+0x14>
   27648:	781c      	ldrb	r4, [r3, #0]
   2764a:	3201      	adds	r2, #1
   2764c:	2c00      	cmp	r4, #0
   2764e:	d1f8      	bne.n	27642 <strnlen+0x6>
   27650:	1a18      	subs	r0, r3, r0
   27652:	bd10      	pop	{r4, pc}

00027654 <quorem>:
   27654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27658:	6903      	ldr	r3, [r0, #16]
   2765a:	690c      	ldr	r4, [r1, #16]
   2765c:	42a3      	cmp	r3, r4
   2765e:	4607      	mov	r7, r0
   27660:	db7e      	blt.n	27760 <quorem+0x10c>
   27662:	3c01      	subs	r4, #1
   27664:	f101 0814 	add.w	r8, r1, #20
   27668:	00a3      	lsls	r3, r4, #2
   2766a:	f100 0514 	add.w	r5, r0, #20
   2766e:	9300      	str	r3, [sp, #0]
   27670:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   27674:	9301      	str	r3, [sp, #4]
   27676:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2767a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2767e:	3301      	adds	r3, #1
   27680:	429a      	cmp	r2, r3
   27682:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   27686:	fbb2 f6f3 	udiv	r6, r2, r3
   2768a:	d32e      	bcc.n	276ea <quorem+0x96>
   2768c:	f04f 0a00 	mov.w	sl, #0
   27690:	46c4      	mov	ip, r8
   27692:	46ae      	mov	lr, r5
   27694:	46d3      	mov	fp, sl
   27696:	f85c 3b04 	ldr.w	r3, [ip], #4
   2769a:	b298      	uxth	r0, r3
   2769c:	fb06 a000 	mla	r0, r6, r0, sl
   276a0:	0c02      	lsrs	r2, r0, #16
   276a2:	0c1b      	lsrs	r3, r3, #16
   276a4:	fb06 2303 	mla	r3, r6, r3, r2
   276a8:	f8de 2000 	ldr.w	r2, [lr]
   276ac:	b280      	uxth	r0, r0
   276ae:	b292      	uxth	r2, r2
   276b0:	1a12      	subs	r2, r2, r0
   276b2:	445a      	add	r2, fp
   276b4:	f8de 0000 	ldr.w	r0, [lr]
   276b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   276bc:	b29b      	uxth	r3, r3
   276be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   276c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   276c6:	b292      	uxth	r2, r2
   276c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   276cc:	45e1      	cmp	r9, ip
   276ce:	f84e 2b04 	str.w	r2, [lr], #4
   276d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
   276d6:	d2de      	bcs.n	27696 <quorem+0x42>
   276d8:	9b00      	ldr	r3, [sp, #0]
   276da:	58eb      	ldr	r3, [r5, r3]
   276dc:	b92b      	cbnz	r3, 276ea <quorem+0x96>
   276de:	9b01      	ldr	r3, [sp, #4]
   276e0:	3b04      	subs	r3, #4
   276e2:	429d      	cmp	r5, r3
   276e4:	461a      	mov	r2, r3
   276e6:	d32f      	bcc.n	27748 <quorem+0xf4>
   276e8:	613c      	str	r4, [r7, #16]
   276ea:	4638      	mov	r0, r7
   276ec:	f000 f889 	bl	27802 <__mcmp>
   276f0:	2800      	cmp	r0, #0
   276f2:	db25      	blt.n	27740 <quorem+0xec>
   276f4:	4629      	mov	r1, r5
   276f6:	2000      	movs	r0, #0
   276f8:	f858 2b04 	ldr.w	r2, [r8], #4
   276fc:	f8d1 c000 	ldr.w	ip, [r1]
   27700:	fa1f fe82 	uxth.w	lr, r2
   27704:	fa1f f38c 	uxth.w	r3, ip
   27708:	eba3 030e 	sub.w	r3, r3, lr
   2770c:	4403      	add	r3, r0
   2770e:	0c12      	lsrs	r2, r2, #16
   27710:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   27714:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   27718:	b29b      	uxth	r3, r3
   2771a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2771e:	45c1      	cmp	r9, r8
   27720:	f841 3b04 	str.w	r3, [r1], #4
   27724:	ea4f 4022 	mov.w	r0, r2, asr #16
   27728:	d2e6      	bcs.n	276f8 <quorem+0xa4>
   2772a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2772e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   27732:	b922      	cbnz	r2, 2773e <quorem+0xea>
   27734:	3b04      	subs	r3, #4
   27736:	429d      	cmp	r5, r3
   27738:	461a      	mov	r2, r3
   2773a:	d30b      	bcc.n	27754 <quorem+0x100>
   2773c:	613c      	str	r4, [r7, #16]
   2773e:	3601      	adds	r6, #1
   27740:	4630      	mov	r0, r6
   27742:	b003      	add	sp, #12
   27744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27748:	6812      	ldr	r2, [r2, #0]
   2774a:	3b04      	subs	r3, #4
   2774c:	2a00      	cmp	r2, #0
   2774e:	d1cb      	bne.n	276e8 <quorem+0x94>
   27750:	3c01      	subs	r4, #1
   27752:	e7c6      	b.n	276e2 <quorem+0x8e>
   27754:	6812      	ldr	r2, [r2, #0]
   27756:	3b04      	subs	r3, #4
   27758:	2a00      	cmp	r2, #0
   2775a:	d1ef      	bne.n	2773c <quorem+0xe8>
   2775c:	3c01      	subs	r4, #1
   2775e:	e7ea      	b.n	27736 <quorem+0xe2>
   27760:	2000      	movs	r0, #0
   27762:	e7ee      	b.n	27742 <quorem+0xee>

00027764 <__hi0bits>:
   27764:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   27768:	4603      	mov	r3, r0
   2776a:	bf36      	itet	cc
   2776c:	0403      	lslcc	r3, r0, #16
   2776e:	2000      	movcs	r0, #0
   27770:	2010      	movcc	r0, #16
   27772:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   27776:	bf3c      	itt	cc
   27778:	021b      	lslcc	r3, r3, #8
   2777a:	3008      	addcc	r0, #8
   2777c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   27780:	bf3c      	itt	cc
   27782:	011b      	lslcc	r3, r3, #4
   27784:	3004      	addcc	r0, #4
   27786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2778a:	d303      	bcc.n	27794 <__hi0bits+0x30>
   2778c:	2b00      	cmp	r3, #0
   2778e:	db0a      	blt.n	277a6 <__hi0bits+0x42>
   27790:	3001      	adds	r0, #1
   27792:	4770      	bx	lr
   27794:	009b      	lsls	r3, r3, #2
   27796:	d501      	bpl.n	2779c <__hi0bits+0x38>
   27798:	3002      	adds	r0, #2
   2779a:	4770      	bx	lr
   2779c:	005b      	lsls	r3, r3, #1
   2779e:	d501      	bpl.n	277a4 <__hi0bits+0x40>
   277a0:	3003      	adds	r0, #3
   277a2:	4770      	bx	lr
   277a4:	2020      	movs	r0, #32
   277a6:	4770      	bx	lr

000277a8 <__lo0bits>:
   277a8:	6803      	ldr	r3, [r0, #0]
   277aa:	4602      	mov	r2, r0
   277ac:	f013 0007 	ands.w	r0, r3, #7
   277b0:	d00b      	beq.n	277ca <__lo0bits+0x22>
   277b2:	07d9      	lsls	r1, r3, #31
   277b4:	d421      	bmi.n	277fa <__lo0bits+0x52>
   277b6:	0798      	lsls	r0, r3, #30
   277b8:	bf49      	itett	mi
   277ba:	085b      	lsrmi	r3, r3, #1
   277bc:	089b      	lsrpl	r3, r3, #2
   277be:	2001      	movmi	r0, #1
   277c0:	6013      	strmi	r3, [r2, #0]
   277c2:	bf5c      	itt	pl
   277c4:	6013      	strpl	r3, [r2, #0]
   277c6:	2002      	movpl	r0, #2
   277c8:	4770      	bx	lr
   277ca:	b299      	uxth	r1, r3
   277cc:	b909      	cbnz	r1, 277d2 <__lo0bits+0x2a>
   277ce:	0c1b      	lsrs	r3, r3, #16
   277d0:	2010      	movs	r0, #16
   277d2:	b2d9      	uxtb	r1, r3
   277d4:	b909      	cbnz	r1, 277da <__lo0bits+0x32>
   277d6:	3008      	adds	r0, #8
   277d8:	0a1b      	lsrs	r3, r3, #8
   277da:	0719      	lsls	r1, r3, #28
   277dc:	bf04      	itt	eq
   277de:	091b      	lsreq	r3, r3, #4
   277e0:	3004      	addeq	r0, #4
   277e2:	0799      	lsls	r1, r3, #30
   277e4:	bf04      	itt	eq
   277e6:	089b      	lsreq	r3, r3, #2
   277e8:	3002      	addeq	r0, #2
   277ea:	07d9      	lsls	r1, r3, #31
   277ec:	d403      	bmi.n	277f6 <__lo0bits+0x4e>
   277ee:	085b      	lsrs	r3, r3, #1
   277f0:	f100 0001 	add.w	r0, r0, #1
   277f4:	d003      	beq.n	277fe <__lo0bits+0x56>
   277f6:	6013      	str	r3, [r2, #0]
   277f8:	4770      	bx	lr
   277fa:	2000      	movs	r0, #0
   277fc:	4770      	bx	lr
   277fe:	2020      	movs	r0, #32
   27800:	4770      	bx	lr

00027802 <__mcmp>:
   27802:	690a      	ldr	r2, [r1, #16]
   27804:	4603      	mov	r3, r0
   27806:	6900      	ldr	r0, [r0, #16]
   27808:	1a80      	subs	r0, r0, r2
   2780a:	b530      	push	{r4, r5, lr}
   2780c:	d10e      	bne.n	2782c <__mcmp+0x2a>
   2780e:	3314      	adds	r3, #20
   27810:	3114      	adds	r1, #20
   27812:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   27816:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2781a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2781e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   27822:	4295      	cmp	r5, r2
   27824:	d003      	beq.n	2782e <__mcmp+0x2c>
   27826:	d205      	bcs.n	27834 <__mcmp+0x32>
   27828:	f04f 30ff 	mov.w	r0, #4294967295
   2782c:	bd30      	pop	{r4, r5, pc}
   2782e:	42a3      	cmp	r3, r4
   27830:	d3f3      	bcc.n	2781a <__mcmp+0x18>
   27832:	e7fb      	b.n	2782c <__mcmp+0x2a>
   27834:	2001      	movs	r0, #1
   27836:	e7f9      	b.n	2782c <__mcmp+0x2a>

00027838 <_calloc_r>:
   27838:	b538      	push	{r3, r4, r5, lr}
   2783a:	fb02 f501 	mul.w	r5, r2, r1
   2783e:	4629      	mov	r1, r5
   27840:	f7f8 f876 	bl	1f930 <_malloc_r>
   27844:	4604      	mov	r4, r0
   27846:	b118      	cbz	r0, 27850 <_calloc_r+0x18>
   27848:	462a      	mov	r2, r5
   2784a:	2100      	movs	r1, #0
   2784c:	f7ff fdc4 	bl	273d8 <memset>
   27850:	4620      	mov	r0, r4
   27852:	bd38      	pop	{r3, r4, r5, pc}

00027854 <__ascii_mbtowc>:
   27854:	b082      	sub	sp, #8
   27856:	b901      	cbnz	r1, 2785a <__ascii_mbtowc+0x6>
   27858:	a901      	add	r1, sp, #4
   2785a:	b142      	cbz	r2, 2786e <__ascii_mbtowc+0x1a>
   2785c:	b14b      	cbz	r3, 27872 <__ascii_mbtowc+0x1e>
   2785e:	7813      	ldrb	r3, [r2, #0]
   27860:	600b      	str	r3, [r1, #0]
   27862:	7812      	ldrb	r2, [r2, #0]
   27864:	1e10      	subs	r0, r2, #0
   27866:	bf18      	it	ne
   27868:	2001      	movne	r0, #1
   2786a:	b002      	add	sp, #8
   2786c:	4770      	bx	lr
   2786e:	4610      	mov	r0, r2
   27870:	e7fb      	b.n	2786a <__ascii_mbtowc+0x16>
   27872:	f06f 0001 	mvn.w	r0, #1
   27876:	e7f8      	b.n	2786a <__ascii_mbtowc+0x16>

00027878 <__sfputc_r>:
   27878:	6893      	ldr	r3, [r2, #8]
   2787a:	3b01      	subs	r3, #1
   2787c:	2b00      	cmp	r3, #0
   2787e:	b410      	push	{r4}
   27880:	6093      	str	r3, [r2, #8]
   27882:	da08      	bge.n	27896 <__sfputc_r+0x1e>
   27884:	6994      	ldr	r4, [r2, #24]
   27886:	42a3      	cmp	r3, r4
   27888:	db01      	blt.n	2788e <__sfputc_r+0x16>
   2788a:	290a      	cmp	r1, #10
   2788c:	d103      	bne.n	27896 <__sfputc_r+0x1e>
   2788e:	f85d 4b04 	ldr.w	r4, [sp], #4
   27892:	f7f9 b89d 	b.w	209d0 <__swbuf_r>
   27896:	6813      	ldr	r3, [r2, #0]
   27898:	1c58      	adds	r0, r3, #1
   2789a:	6010      	str	r0, [r2, #0]
   2789c:	7019      	strb	r1, [r3, #0]
   2789e:	4608      	mov	r0, r1
   278a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   278a4:	4770      	bx	lr

000278a6 <__sfputs_r>:
   278a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278a8:	4606      	mov	r6, r0
   278aa:	460f      	mov	r7, r1
   278ac:	4614      	mov	r4, r2
   278ae:	18d5      	adds	r5, r2, r3
   278b0:	42ac      	cmp	r4, r5
   278b2:	d101      	bne.n	278b8 <__sfputs_r+0x12>
   278b4:	2000      	movs	r0, #0
   278b6:	e007      	b.n	278c8 <__sfputs_r+0x22>
   278b8:	f814 1b01 	ldrb.w	r1, [r4], #1
   278bc:	463a      	mov	r2, r7
   278be:	4630      	mov	r0, r6
   278c0:	f7ff ffda 	bl	27878 <__sfputc_r>
   278c4:	1c43      	adds	r3, r0, #1
   278c6:	d1f3      	bne.n	278b0 <__sfputs_r+0xa>
   278c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000278ca <__ascii_wctomb>:
   278ca:	4603      	mov	r3, r0
   278cc:	4608      	mov	r0, r1
   278ce:	b141      	cbz	r1, 278e2 <__ascii_wctomb+0x18>
   278d0:	2aff      	cmp	r2, #255	; 0xff
   278d2:	d904      	bls.n	278de <__ascii_wctomb+0x14>
   278d4:	228a      	movs	r2, #138	; 0x8a
   278d6:	601a      	str	r2, [r3, #0]
   278d8:	f04f 30ff 	mov.w	r0, #4294967295
   278dc:	4770      	bx	lr
   278de:	700a      	strb	r2, [r1, #0]
   278e0:	2001      	movs	r0, #1
   278e2:	4770      	bx	lr

000278e4 <abort>:
   278e4:	b508      	push	{r3, lr}
   278e6:	2006      	movs	r0, #6
   278e8:	f7f9 fa6c 	bl	20dc4 <raise>
   278ec:	2001      	movs	r0, #1
   278ee:	f7ee f92f 	bl	15b50 <_exit>

000278f2 <__sflush_r>:
   278f2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   278f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   278fa:	0717      	lsls	r7, r2, #28
   278fc:	4605      	mov	r5, r0
   278fe:	460c      	mov	r4, r1
   27900:	d456      	bmi.n	279b0 <__sflush_r+0xbe>
   27902:	684b      	ldr	r3, [r1, #4]
   27904:	2b00      	cmp	r3, #0
   27906:	dc02      	bgt.n	2790e <__sflush_r+0x1c>
   27908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2790a:	2b00      	cmp	r3, #0
   2790c:	dd3d      	ble.n	2798a <__sflush_r+0x98>
   2790e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   27910:	2e00      	cmp	r6, #0
   27912:	d03a      	beq.n	2798a <__sflush_r+0x98>
   27914:	2300      	movs	r3, #0
   27916:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2791a:	682f      	ldr	r7, [r5, #0]
   2791c:	6a21      	ldr	r1, [r4, #32]
   2791e:	602b      	str	r3, [r5, #0]
   27920:	d025      	beq.n	2796e <__sflush_r+0x7c>
   27922:	6d62      	ldr	r2, [r4, #84]	; 0x54
   27924:	89a3      	ldrh	r3, [r4, #12]
   27926:	0758      	lsls	r0, r3, #29
   27928:	d505      	bpl.n	27936 <__sflush_r+0x44>
   2792a:	6863      	ldr	r3, [r4, #4]
   2792c:	1ad2      	subs	r2, r2, r3
   2792e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27930:	b10b      	cbz	r3, 27936 <__sflush_r+0x44>
   27932:	6c23      	ldr	r3, [r4, #64]	; 0x40
   27934:	1ad2      	subs	r2, r2, r3
   27936:	6a21      	ldr	r1, [r4, #32]
   27938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2793a:	2300      	movs	r3, #0
   2793c:	4628      	mov	r0, r5
   2793e:	47b0      	blx	r6
   27940:	1c41      	adds	r1, r0, #1
   27942:	d024      	beq.n	2798e <__sflush_r+0x9c>
   27944:	2300      	movs	r3, #0
   27946:	6063      	str	r3, [r4, #4]
   27948:	6923      	ldr	r3, [r4, #16]
   2794a:	6023      	str	r3, [r4, #0]
   2794c:	89a3      	ldrh	r3, [r4, #12]
   2794e:	04da      	lsls	r2, r3, #19
   27950:	d500      	bpl.n	27954 <__sflush_r+0x62>
   27952:	6560      	str	r0, [r4, #84]	; 0x54
   27954:	6b61      	ldr	r1, [r4, #52]	; 0x34
   27956:	602f      	str	r7, [r5, #0]
   27958:	b1b9      	cbz	r1, 2798a <__sflush_r+0x98>
   2795a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2795e:	4299      	cmp	r1, r3
   27960:	d002      	beq.n	27968 <__sflush_r+0x76>
   27962:	4628      	mov	r0, r5
   27964:	f7f7 ff9a 	bl	1f89c <_free_r>
   27968:	2300      	movs	r3, #0
   2796a:	6363      	str	r3, [r4, #52]	; 0x34
   2796c:	e00d      	b.n	2798a <__sflush_r+0x98>
   2796e:	2301      	movs	r3, #1
   27970:	4628      	mov	r0, r5
   27972:	47b0      	blx	r6
   27974:	1c46      	adds	r6, r0, #1
   27976:	4602      	mov	r2, r0
   27978:	d1d4      	bne.n	27924 <__sflush_r+0x32>
   2797a:	682b      	ldr	r3, [r5, #0]
   2797c:	2b00      	cmp	r3, #0
   2797e:	d0d1      	beq.n	27924 <__sflush_r+0x32>
   27980:	2b1d      	cmp	r3, #29
   27982:	d001      	beq.n	27988 <__sflush_r+0x96>
   27984:	2b16      	cmp	r3, #22
   27986:	d12b      	bne.n	279e0 <__sflush_r+0xee>
   27988:	602f      	str	r7, [r5, #0]
   2798a:	2000      	movs	r0, #0
   2798c:	e02f      	b.n	279ee <__sflush_r+0xfc>
   2798e:	682a      	ldr	r2, [r5, #0]
   27990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27994:	b142      	cbz	r2, 279a8 <__sflush_r+0xb6>
   27996:	2a1d      	cmp	r2, #29
   27998:	d001      	beq.n	2799e <__sflush_r+0xac>
   2799a:	2a16      	cmp	r2, #22
   2799c:	d122      	bne.n	279e4 <__sflush_r+0xf2>
   2799e:	2300      	movs	r3, #0
   279a0:	6063      	str	r3, [r4, #4]
   279a2:	6923      	ldr	r3, [r4, #16]
   279a4:	6023      	str	r3, [r4, #0]
   279a6:	e7d5      	b.n	27954 <__sflush_r+0x62>
   279a8:	6062      	str	r2, [r4, #4]
   279aa:	6922      	ldr	r2, [r4, #16]
   279ac:	6022      	str	r2, [r4, #0]
   279ae:	e7ce      	b.n	2794e <__sflush_r+0x5c>
   279b0:	690f      	ldr	r7, [r1, #16]
   279b2:	2f00      	cmp	r7, #0
   279b4:	d0e9      	beq.n	2798a <__sflush_r+0x98>
   279b6:	0793      	lsls	r3, r2, #30
   279b8:	680e      	ldr	r6, [r1, #0]
   279ba:	bf08      	it	eq
   279bc:	694b      	ldreq	r3, [r1, #20]
   279be:	600f      	str	r7, [r1, #0]
   279c0:	bf18      	it	ne
   279c2:	2300      	movne	r3, #0
   279c4:	eba6 0807 	sub.w	r8, r6, r7
   279c8:	608b      	str	r3, [r1, #8]
   279ca:	f1b8 0f00 	cmp.w	r8, #0
   279ce:	dddc      	ble.n	2798a <__sflush_r+0x98>
   279d0:	6a21      	ldr	r1, [r4, #32]
   279d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   279d4:	4643      	mov	r3, r8
   279d6:	463a      	mov	r2, r7
   279d8:	4628      	mov	r0, r5
   279da:	47b0      	blx	r6
   279dc:	2800      	cmp	r0, #0
   279de:	dc08      	bgt.n	279f2 <__sflush_r+0x100>
   279e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   279e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   279e8:	81a3      	strh	r3, [r4, #12]
   279ea:	f04f 30ff 	mov.w	r0, #4294967295
   279ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   279f2:	4407      	add	r7, r0
   279f4:	eba8 0800 	sub.w	r8, r8, r0
   279f8:	e7e7      	b.n	279ca <__sflush_r+0xd8>

000279fa <__sfmoreglue>:
   279fa:	b570      	push	{r4, r5, r6, lr}
   279fc:	2368      	movs	r3, #104	; 0x68
   279fe:	1e4d      	subs	r5, r1, #1
   27a00:	435d      	muls	r5, r3
   27a02:	460e      	mov	r6, r1
   27a04:	f105 0174 	add.w	r1, r5, #116	; 0x74
   27a08:	f7f7 ff92 	bl	1f930 <_malloc_r>
   27a0c:	4604      	mov	r4, r0
   27a0e:	b140      	cbz	r0, 27a22 <__sfmoreglue+0x28>
   27a10:	2100      	movs	r1, #0
   27a12:	e9c0 1600 	strd	r1, r6, [r0]
   27a16:	300c      	adds	r0, #12
   27a18:	60a0      	str	r0, [r4, #8]
   27a1a:	f105 0268 	add.w	r2, r5, #104	; 0x68
   27a1e:	f7ff fcdb 	bl	273d8 <memset>
   27a22:	4620      	mov	r0, r4
   27a24:	bd70      	pop	{r4, r5, r6, pc}

00027a26 <_fwalk_reent>:
   27a26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27a2a:	4606      	mov	r6, r0
   27a2c:	4688      	mov	r8, r1
   27a2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   27a32:	2700      	movs	r7, #0
   27a34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   27a38:	f1b9 0901 	subs.w	r9, r9, #1
   27a3c:	d505      	bpl.n	27a4a <_fwalk_reent+0x24>
   27a3e:	6824      	ldr	r4, [r4, #0]
   27a40:	2c00      	cmp	r4, #0
   27a42:	d1f7      	bne.n	27a34 <_fwalk_reent+0xe>
   27a44:	4638      	mov	r0, r7
   27a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27a4a:	89ab      	ldrh	r3, [r5, #12]
   27a4c:	2b01      	cmp	r3, #1
   27a4e:	d907      	bls.n	27a60 <_fwalk_reent+0x3a>
   27a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   27a54:	3301      	adds	r3, #1
   27a56:	d003      	beq.n	27a60 <_fwalk_reent+0x3a>
   27a58:	4629      	mov	r1, r5
   27a5a:	4630      	mov	r0, r6
   27a5c:	47c0      	blx	r8
   27a5e:	4307      	orrs	r7, r0
   27a60:	3568      	adds	r5, #104	; 0x68
   27a62:	e7e9      	b.n	27a38 <_fwalk_reent+0x12>

00027a64 <__swhatbuf_r>:
   27a64:	b570      	push	{r4, r5, r6, lr}
   27a66:	460c      	mov	r4, r1
   27a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27a6c:	2900      	cmp	r1, #0
   27a6e:	b096      	sub	sp, #88	; 0x58
   27a70:	4615      	mov	r5, r2
   27a72:	461e      	mov	r6, r3
   27a74:	da0d      	bge.n	27a92 <__swhatbuf_r+0x2e>
   27a76:	89a3      	ldrh	r3, [r4, #12]
   27a78:	f013 0f80 	tst.w	r3, #128	; 0x80
   27a7c:	f04f 0100 	mov.w	r1, #0
   27a80:	bf14      	ite	ne
   27a82:	2340      	movne	r3, #64	; 0x40
   27a84:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   27a88:	2000      	movs	r0, #0
   27a8a:	6031      	str	r1, [r6, #0]
   27a8c:	602b      	str	r3, [r5, #0]
   27a8e:	b016      	add	sp, #88	; 0x58
   27a90:	bd70      	pop	{r4, r5, r6, pc}
   27a92:	466a      	mov	r2, sp
   27a94:	f7f9 f9d2 	bl	20e3c <_fstat_r>
   27a98:	2800      	cmp	r0, #0
   27a9a:	dbec      	blt.n	27a76 <__swhatbuf_r+0x12>
   27a9c:	9901      	ldr	r1, [sp, #4]
   27a9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   27aa2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   27aa6:	4259      	negs	r1, r3
   27aa8:	4159      	adcs	r1, r3
   27aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   27aae:	e7eb      	b.n	27a88 <__swhatbuf_r+0x24>

00027ab0 <memmove>:
   27ab0:	4288      	cmp	r0, r1
   27ab2:	b510      	push	{r4, lr}
   27ab4:	eb01 0402 	add.w	r4, r1, r2
   27ab8:	d902      	bls.n	27ac0 <memmove+0x10>
   27aba:	4284      	cmp	r4, r0
   27abc:	4623      	mov	r3, r4
   27abe:	d807      	bhi.n	27ad0 <memmove+0x20>
   27ac0:	1e43      	subs	r3, r0, #1
   27ac2:	42a1      	cmp	r1, r4
   27ac4:	d008      	beq.n	27ad8 <memmove+0x28>
   27ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
   27aca:	f803 2f01 	strb.w	r2, [r3, #1]!
   27ace:	e7f8      	b.n	27ac2 <memmove+0x12>
   27ad0:	4402      	add	r2, r0
   27ad2:	4601      	mov	r1, r0
   27ad4:	428a      	cmp	r2, r1
   27ad6:	d100      	bne.n	27ada <memmove+0x2a>
   27ad8:	bd10      	pop	{r4, pc}
   27ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   27ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
   27ae2:	e7f7      	b.n	27ad4 <memmove+0x24>

00027ae4 <_raise_r>:
   27ae4:	291f      	cmp	r1, #31
   27ae6:	b538      	push	{r3, r4, r5, lr}
   27ae8:	4605      	mov	r5, r0
   27aea:	460c      	mov	r4, r1
   27aec:	d904      	bls.n	27af8 <_raise_r+0x14>
   27aee:	2316      	movs	r3, #22
   27af0:	6003      	str	r3, [r0, #0]
   27af2:	f04f 30ff 	mov.w	r0, #4294967295
   27af6:	bd38      	pop	{r3, r4, r5, pc}
   27af8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   27afa:	b112      	cbz	r2, 27b02 <_raise_r+0x1e>
   27afc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   27b00:	b94b      	cbnz	r3, 27b16 <_raise_r+0x32>
   27b02:	4628      	mov	r0, r5
   27b04:	f000 f816 	bl	27b34 <_getpid_r>
   27b08:	4622      	mov	r2, r4
   27b0a:	4601      	mov	r1, r0
   27b0c:	4628      	mov	r0, r5
   27b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27b12:	f7f9 b95f 	b.w	20dd4 <_kill_r>
   27b16:	2b01      	cmp	r3, #1
   27b18:	d00a      	beq.n	27b30 <_raise_r+0x4c>
   27b1a:	1c59      	adds	r1, r3, #1
   27b1c:	d103      	bne.n	27b26 <_raise_r+0x42>
   27b1e:	2316      	movs	r3, #22
   27b20:	6003      	str	r3, [r0, #0]
   27b22:	2001      	movs	r0, #1
   27b24:	e7e7      	b.n	27af6 <_raise_r+0x12>
   27b26:	2100      	movs	r1, #0
   27b28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   27b2c:	4620      	mov	r0, r4
   27b2e:	4798      	blx	r3
   27b30:	2000      	movs	r0, #0
   27b32:	e7e0      	b.n	27af6 <_raise_r+0x12>

00027b34 <_getpid_r>:
   27b34:	f7fc bf89 	b.w	24a4a <_getpid>

00027b38 <__sread>:
   27b38:	b510      	push	{r4, lr}
   27b3a:	460c      	mov	r4, r1
   27b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27b40:	f7f9 f9b0 	bl	20ea4 <_read_r>
   27b44:	2800      	cmp	r0, #0
   27b46:	bfab      	itete	ge
   27b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   27b4a:	89a3      	ldrhlt	r3, [r4, #12]
   27b4c:	181b      	addge	r3, r3, r0
   27b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   27b52:	bfac      	ite	ge
   27b54:	6563      	strge	r3, [r4, #84]	; 0x54
   27b56:	81a3      	strhlt	r3, [r4, #12]
   27b58:	bd10      	pop	{r4, pc}

00027b5a <__swrite>:
   27b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b5e:	461f      	mov	r7, r3
   27b60:	898b      	ldrh	r3, [r1, #12]
   27b62:	05db      	lsls	r3, r3, #23
   27b64:	4605      	mov	r5, r0
   27b66:	460c      	mov	r4, r1
   27b68:	4616      	mov	r6, r2
   27b6a:	d505      	bpl.n	27b78 <__swrite+0x1e>
   27b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27b70:	2302      	movs	r3, #2
   27b72:	2200      	movs	r2, #0
   27b74:	f7f9 f984 	bl	20e80 <_lseek_r>
   27b78:	89a3      	ldrh	r3, [r4, #12]
   27b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   27b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   27b82:	81a3      	strh	r3, [r4, #12]
   27b84:	4632      	mov	r2, r6
   27b86:	463b      	mov	r3, r7
   27b88:	4628      	mov	r0, r5
   27b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27b8e:	f7f9 b933 	b.w	20df8 <_write_r>

00027b92 <__sseek>:
   27b92:	b510      	push	{r4, lr}
   27b94:	460c      	mov	r4, r1
   27b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27b9a:	f7f9 f971 	bl	20e80 <_lseek_r>
   27b9e:	1c43      	adds	r3, r0, #1
   27ba0:	89a3      	ldrh	r3, [r4, #12]
   27ba2:	bf15      	itete	ne
   27ba4:	6560      	strne	r0, [r4, #84]	; 0x54
   27ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   27baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   27bae:	81a3      	strheq	r3, [r4, #12]
   27bb0:	bf18      	it	ne
   27bb2:	81a3      	strhne	r3, [r4, #12]
   27bb4:	bd10      	pop	{r4, pc}

00027bb6 <__sclose>:
   27bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27bba:	f7f9 b92f 	b.w	20e1c <_close_r>
	...
