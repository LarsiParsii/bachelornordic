
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 7a 00 20 d9 65 01 00 41 95 02 00 91 65 01 00     .z. .e..A....e..
  10:	91 65 01 00 91 65 01 00 91 65 01 00 00 00 00 00     .e...e...e......
	...
  2c:	d9 55 01 00 91 65 01 00 00 00 00 00 45 55 01 00     .U...e......EU..
  3c:	91 65 01 00                                         .e..

00000040 <_irq_vector_table>:
  40:	95 57 01 00 2f d0 02 00 95 57 01 00 95 57 01 00     .W../....W...W..
  50:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  60:	f7 cf 02 00 95 57 01 00 95 57 01 00 15 d0 02 00     .....W...W......
  70:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  80:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  90:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  a0:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  b0:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  c0:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  d0:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  e0:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..
  f0:	95 57 01 00 95 57 01 00 95 57 01 00 95 57 01 00     .W...W...W...W..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x16>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x3a>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x58>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf4>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <CONFIG_BT_HCI_TX_STACK_SIZE+0x7c>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <CONFIG_BT_HCI_TX_STACK_SIZE+0xda>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <CONFIG_BT_HCI_TX_STACK_SIZE+0x13a>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <__z_interrupt_stack_SIZEOF+0x5a>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <__z_interrupt_stack_SIZEOF+0x30>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <__z_interrupt_stack_SIZEOF>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <__z_interrupt_stack_SIZEOF+0xa>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <__z_interrupt_stack_SIZEOF+0x88>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <__z_interrupt_stack_SIZEOF+0x9c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     93a:	e712      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295
     94c:	f04f 30ff 	movne.w	r0, #4294967295
     950:	f000 b80c 	b.w	96c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f00b ff6e 	bl	c83c <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <__gedf2>:
     970:	f04f 3cff 	mov.w	ip, #4294967295
     974:	e006      	b.n	984 <__cmpdf2+0x4>
     976:	bf00      	nop

00000978 <__ledf2>:
     978:	f04f 0c01 	mov.w	ip, #1
     97c:	e002      	b.n	984 <__cmpdf2+0x4>
     97e:	bf00      	nop

00000980 <__cmpdf2>:
     980:	f04f 0c01 	mov.w	ip, #1
     984:	f84d cd04 	str.w	ip, [sp, #-4]!
     988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     98c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     994:	bf18      	it	ne
     996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     99a:	d01b      	beq.n	9d4 <__cmpdf2+0x54>
     99c:	b001      	add	sp, #4
     99e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     9a2:	bf0c      	ite	eq
     9a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     9a8:	ea91 0f03 	teqne	r1, r3
     9ac:	bf02      	ittt	eq
     9ae:	ea90 0f02 	teqeq	r0, r2
     9b2:	2000      	moveq	r0, #0
     9b4:	4770      	bxeq	lr
     9b6:	f110 0f00 	cmn.w	r0, #0
     9ba:	ea91 0f03 	teq	r1, r3
     9be:	bf58      	it	pl
     9c0:	4299      	cmppl	r1, r3
     9c2:	bf08      	it	eq
     9c4:	4290      	cmpeq	r0, r2
     9c6:	bf2c      	ite	cs
     9c8:	17d8      	asrcs	r0, r3, #31
     9ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     9ce:	f040 0001 	orr.w	r0, r0, #1
     9d2:	4770      	bx	lr
     9d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9dc:	d102      	bne.n	9e4 <__cmpdf2+0x64>
     9de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9e2:	d107      	bne.n	9f4 <__cmpdf2+0x74>
     9e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9ec:	d1d6      	bne.n	99c <__cmpdf2+0x1c>
     9ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9f2:	d0d3      	beq.n	99c <__cmpdf2+0x1c>
     9f4:	f85d 0b04 	ldr.w	r0, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_cdrcmple>:
     9fc:	4684      	mov	ip, r0
     9fe:	4610      	mov	r0, r2
     a00:	4662      	mov	r2, ip
     a02:	468c      	mov	ip, r1
     a04:	4619      	mov	r1, r3
     a06:	4663      	mov	r3, ip
     a08:	e000      	b.n	a0c <__aeabi_cdcmpeq>
     a0a:	bf00      	nop

00000a0c <__aeabi_cdcmpeq>:
     a0c:	b501      	push	{r0, lr}
     a0e:	f7ff ffb7 	bl	980 <__cmpdf2>
     a12:	2800      	cmp	r0, #0
     a14:	bf48      	it	mi
     a16:	f110 0f00 	cmnmi.w	r0, #0
     a1a:	bd01      	pop	{r0, pc}

00000a1c <__aeabi_dcmpeq>:
     a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a20:	f7ff fff4 	bl	a0c <__aeabi_cdcmpeq>
     a24:	bf0c      	ite	eq
     a26:	2001      	moveq	r0, #1
     a28:	2000      	movne	r0, #0
     a2a:	f85d fb08 	ldr.w	pc, [sp], #8
     a2e:	bf00      	nop

00000a30 <__aeabi_dcmplt>:
     a30:	f84d ed08 	str.w	lr, [sp, #-8]!
     a34:	f7ff ffea 	bl	a0c <__aeabi_cdcmpeq>
     a38:	bf34      	ite	cc
     a3a:	2001      	movcc	r0, #1
     a3c:	2000      	movcs	r0, #0
     a3e:	f85d fb08 	ldr.w	pc, [sp], #8
     a42:	bf00      	nop

00000a44 <__aeabi_dcmple>:
     a44:	f84d ed08 	str.w	lr, [sp, #-8]!
     a48:	f7ff ffe0 	bl	a0c <__aeabi_cdcmpeq>
     a4c:	bf94      	ite	ls
     a4e:	2001      	movls	r0, #1
     a50:	2000      	movhi	r0, #0
     a52:	f85d fb08 	ldr.w	pc, [sp], #8
     a56:	bf00      	nop

00000a58 <__aeabi_dcmpge>:
     a58:	f84d ed08 	str.w	lr, [sp, #-8]!
     a5c:	f7ff ffce 	bl	9fc <__aeabi_cdrcmple>
     a60:	bf94      	ite	ls
     a62:	2001      	movls	r0, #1
     a64:	2000      	movhi	r0, #0
     a66:	f85d fb08 	ldr.w	pc, [sp], #8
     a6a:	bf00      	nop

00000a6c <__aeabi_dcmpgt>:
     a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a70:	f7ff ffc4 	bl	9fc <__aeabi_cdrcmple>
     a74:	bf34      	ite	cc
     a76:	2001      	movcc	r0, #1
     a78:	2000      	movcs	r0, #0
     a7a:	f85d fb08 	ldr.w	pc, [sp], #8
     a7e:	bf00      	nop

00000a80 <ocrypto_bigint_add256>:
     a80:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     a84:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     a88:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     a8c:	185b      	adds	r3, r3, r1
     a8e:	eb54 040c 	adcs.w	r4, r4, ip
     a92:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     a96:	414d      	adcs	r5, r1
     a98:	eb56 060c 	adcs.w	r6, r6, ip
     a9c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     aa0:	414f      	adcs	r7, r1
     aa2:	eb58 080c 	adcs.w	r8, r8, ip
     aa6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     aaa:	eb59 0901 	adcs.w	r9, r9, r1
     aae:	eb5a 0a0c 	adcs.w	sl, sl, ip
     ab2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     ab6:	4180      	sbcs	r0, r0
     ab8:	3001      	adds	r0, #1
     aba:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     abe:	4770      	bx	lr

00000ac0 <ocrypto_bigint_sub256>:
     ac0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     ac4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     ac8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     acc:	1a5b      	subs	r3, r3, r1
     ace:	eb74 040c 	sbcs.w	r4, r4, ip
     ad2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ad6:	418d      	sbcs	r5, r1
     ad8:	eb76 060c 	sbcs.w	r6, r6, ip
     adc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ae0:	418f      	sbcs	r7, r1
     ae2:	eb78 080c 	sbcs.w	r8, r8, ip
     ae6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     aea:	eb79 0901 	sbcs.w	r9, r9, r1
     aee:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     af2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     af6:	4180      	sbcs	r0, r0
     af8:	4240      	negs	r0, r0
     afa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     afe:	4770      	bx	lr

00000b00 <ocrypto_bigint_cadd256>:
     b00:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b04:	4252      	negs	r2, r2
     b06:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b0a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b0e:	4017      	ands	r7, r2
     b10:	19db      	adds	r3, r3, r7
     b12:	ea18 0802 	ands.w	r8, r8, r2
     b16:	eb54 0408 	adcs.w	r4, r4, r8
     b1a:	ea19 0902 	ands.w	r9, r9, r2
     b1e:	eb55 0509 	adcs.w	r5, r5, r9
     b22:	ea1a 0a02 	ands.w	sl, sl, r2
     b26:	eb56 060a 	adcs.w	r6, r6, sl
     b2a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     b2c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b30:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b34:	4017      	ands	r7, r2
     b36:	417b      	adcs	r3, r7
     b38:	ea18 0802 	ands.w	r8, r8, r2
     b3c:	eb54 0408 	adcs.w	r4, r4, r8
     b40:	ea19 0902 	ands.w	r9, r9, r2
     b44:	eb55 0509 	adcs.w	r5, r5, r9
     b48:	ea1a 0a02 	ands.w	sl, sl, r2
     b4c:	eb56 060a 	adcs.w	r6, r6, sl
     b50:	c078      	stmia	r0!, {r3, r4, r5, r6}
     b52:	4180      	sbcs	r0, r0
     b54:	3001      	adds	r0, #1
     b56:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b5a:	4770      	bx	lr

00000b5c <ocrypto_bigint_csub256>:
     b5c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b60:	4252      	negs	r2, r2
     b62:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b66:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b6a:	4017      	ands	r7, r2
     b6c:	1bdb      	subs	r3, r3, r7
     b6e:	ea18 0802 	ands.w	r8, r8, r2
     b72:	eb74 0408 	sbcs.w	r4, r4, r8
     b76:	ea19 0902 	ands.w	r9, r9, r2
     b7a:	eb75 0509 	sbcs.w	r5, r5, r9
     b7e:	ea1a 0a02 	ands.w	sl, sl, r2
     b82:	eb76 060a 	sbcs.w	r6, r6, sl
     b86:	c078      	stmia	r0!, {r3, r4, r5, r6}
     b88:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b8c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b90:	4017      	ands	r7, r2
     b92:	41bb      	sbcs	r3, r7
     b94:	ea18 0802 	ands.w	r8, r8, r2
     b98:	eb74 0408 	sbcs.w	r4, r4, r8
     b9c:	ea19 0902 	ands.w	r9, r9, r2
     ba0:	eb75 0509 	sbcs.w	r5, r5, r9
     ba4:	ea1a 0a02 	ands.w	sl, sl, r2
     ba8:	eb76 060a 	sbcs.w	r6, r6, sl
     bac:	c078      	stmia	r0!, {r3, r4, r5, r6}
     bae:	4180      	sbcs	r0, r0
     bb0:	4240      	negs	r0, r0
     bb2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     bb6:	4770      	bx	lr

00000bb8 <ocrypto_bigint_cswap256>:
     bb8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     bbc:	4252      	negs	r2, r2
     bbe:	f04f 0804 	mov.w	r8, #4

00000bc2 <cswap256_loop>:
     bc2:	e890 0030 	ldmia.w	r0, {r4, r5}
     bc6:	e891 00c0 	ldmia.w	r1, {r6, r7}
     bca:	1ba3      	subs	r3, r4, r6
     bcc:	4013      	ands	r3, r2
     bce:	1ae4      	subs	r4, r4, r3
     bd0:	18f6      	adds	r6, r6, r3
     bd2:	1beb      	subs	r3, r5, r7
     bd4:	4013      	ands	r3, r2
     bd6:	1aed      	subs	r5, r5, r3
     bd8:	18ff      	adds	r7, r7, r3
     bda:	c030      	stmia	r0!, {r4, r5}
     bdc:	c1c0      	stmia	r1!, {r6, r7}
     bde:	f1b8 0801 	subs.w	r8, r8, #1
     be2:	d1ee      	bne.n	bc2 <cswap256_loop>
     be4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     be8:	4770      	bx	lr
     bea:	bf00      	nop

00000bec <ocrypto_mul256_noframe>:
     bec:	b500      	push	{lr}
     bee:	ec92 0a08 	vldmia	r2, {s0-s7}
     bf2:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     bf6:	ee07 1a10 	vmov	s14, r1
     bfa:	ec53 2a10 	vmov	r2, r3, s0, s1
     bfe:	ec56 4a11 	vmov	r4, r6, s2, s3
     c02:	fba7 5102 	umull	r5, r1, r7, r2
     c06:	fba8 0b02 	umull	r0, fp, r8, r2
     c0a:	fbe7 1063 	umaal	r1, r0, r7, r3
     c0e:	fbe9 b062 	umaal	fp, r0, r9, r2
     c12:	ec41 5a14 	vmov	s8, s9, r5, r1
     c16:	fba8 5103 	umull	r5, r1, r8, r3
     c1a:	fbea 0162 	umaal	r0, r1, sl, r2
     c1e:	fbe7 b564 	umaal	fp, r5, r7, r4
     c22:	fbe7 0566 	umaal	r0, r5, r7, r6
     c26:	fbe8 1566 	umaal	r1, r5, r8, r6
     c2a:	ee05 ba10 	vmov	s10, fp
     c2e:	fba9 b603 	umull	fp, r6, r9, r3
     c32:	fbea 1663 	umaal	r1, r6, sl, r3
     c36:	fbec 5663 	umaal	r5, r6, ip, r3
     c3a:	fbe8 0b64 	umaal	r0, fp, r8, r4
     c3e:	fbe9 1b64 	umaal	r1, fp, r9, r4
     c42:	fbea 5b64 	umaal	r5, fp, sl, r4
     c46:	fbec 6b64 	umaal	r6, fp, ip, r4
     c4a:	ee05 0a90 	vmov	s11, r0
     c4e:	fbac 3002 	umull	r3, r0, ip, r2
     c52:	ee12 4a10 	vmov	r4, s4
     c56:	fbee 5062 	umaal	r5, r0, lr, r2
     c5a:	fbe9 6064 	umaal	r6, r0, r9, r4
     c5e:	fbea b064 	umaal	fp, r0, sl, r4
     c62:	fbe7 3164 	umaal	r3, r1, r7, r4
     c66:	fbe8 5164 	umaal	r5, r1, r8, r4
     c6a:	ee12 4a90 	vmov	r4, s5
     c6e:	fbe8 6164 	umaal	r6, r1, r8, r4
     c72:	fbe9 b164 	umaal	fp, r1, r9, r4
     c76:	fbea 0164 	umaal	r0, r1, sl, r4
     c7a:	ee06 3a10 	vmov	s12, r3
     c7e:	fba7 3204 	umull	r3, r2, r7, r4
     c82:	ee13 4a10 	vmov	r4, s6
     c86:	fbe7 6264 	umaal	r6, r2, r7, r4
     c8a:	fbe8 b264 	umaal	fp, r2, r8, r4
     c8e:	fbe9 0264 	umaal	r0, r2, r9, r4
     c92:	fbea 1264 	umaal	r1, r2, sl, r4
     c96:	ee11 4a90 	vmov	r4, s3
     c9a:	fbe9 5364 	umaal	r5, r3, r9, r4
     c9e:	fbea 6364 	umaal	r6, r3, sl, r4
     ca2:	ee13 4a90 	vmov	r4, s7
     ca6:	fbe7 b364 	umaal	fp, r3, r7, r4
     caa:	fbe8 0364 	umaal	r0, r3, r8, r4
     cae:	fbe9 1364 	umaal	r1, r3, r9, r4
     cb2:	fbea 2364 	umaal	r2, r3, sl, r4
     cb6:	ee06 5a90 	vmov	s13, r5
     cba:	ee17 9a10 	vmov	r9, s14
     cbe:	e899 0600 	ldmia.w	r9, {r9, sl}
     cc2:	ee10 8a10 	vmov	r8, s0
     cc6:	fba9 5408 	umull	r5, r4, r9, r8
     cca:	fbea b468 	umaal	fp, r4, sl, r8
     cce:	ee12 8a10 	vmov	r8, s4
     cd2:	fbec 0468 	umaal	r0, r4, ip, r8
     cd6:	fbee 1468 	umaal	r1, r4, lr, r8
     cda:	fbe9 2468 	umaal	r2, r4, r9, r8
     cde:	fbea 3468 	umaal	r3, r4, sl, r8
     ce2:	ee10 8a90 	vmov	r8, s1
     ce6:	fbee 6568 	umaal	r6, r5, lr, r8
     cea:	fbe9 b568 	umaal	fp, r5, r9, r8
     cee:	fbea 0568 	umaal	r0, r5, sl, r8
     cf2:	ee12 8a90 	vmov	r8, s5
     cf6:	fbec 1568 	umaal	r1, r5, ip, r8
     cfa:	fbee 2568 	umaal	r2, r5, lr, r8
     cfe:	fbe9 3568 	umaal	r3, r5, r9, r8
     d02:	fbea 4568 	umaal	r4, r5, sl, r8
     d06:	ee07 6a10 	vmov	s14, r6
     d0a:	ee11 8a10 	vmov	r8, s2
     d0e:	fbae 7608 	umull	r7, r6, lr, r8
     d12:	fbe9 0668 	umaal	r0, r6, r9, r8
     d16:	fbea 1668 	umaal	r1, r6, sl, r8
     d1a:	ee13 8a10 	vmov	r8, s6
     d1e:	fbec 2668 	umaal	r2, r6, ip, r8
     d22:	fbee 3668 	umaal	r3, r6, lr, r8
     d26:	fbe9 4668 	umaal	r4, r6, r9, r8
     d2a:	fbea 5668 	umaal	r5, r6, sl, r8
     d2e:	ee11 8a90 	vmov	r8, s3
     d32:	fbec b768 	umaal	fp, r7, ip, r8
     d36:	fbee 0768 	umaal	r0, r7, lr, r8
     d3a:	fbe9 1768 	umaal	r1, r7, r9, r8
     d3e:	fbea 2768 	umaal	r2, r7, sl, r8
     d42:	ee13 8a90 	vmov	r8, s7
     d46:	fbec 3768 	umaal	r3, r7, ip, r8
     d4a:	fbee 4768 	umaal	r4, r7, lr, r8
     d4e:	fbe9 5768 	umaal	r5, r7, r9, r8
     d52:	fbea 6768 	umaal	r6, r7, sl, r8
     d56:	bd00      	pop	{pc}

00000d58 <ocrypto_bigint_mul256>:
     d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d5c:	ee07 0a90 	vmov	s15, r0
     d60:	f7ff ff44 	bl	bec <ocrypto_mul256_noframe>
     d64:	ee17 8a90 	vmov	r8, s15
     d68:	ee07 ba90 	vmov	s15, fp
     d6c:	eca8 4a08 	vstmia	r8!, {s8-s15}
     d70:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000d78 <ocrypto_sqr256_noframe>:
     d78:	b500      	push	{lr}
     d7a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     d7e:	fba3 5203 	umull	r5, r2, r3, r3
     d82:	fba3 0104 	umull	r0, r1, r3, r4
     d86:	fbe3 2064 	umaal	r2, r0, r3, r4
     d8a:	fbe3 1067 	umaal	r1, r0, r3, r7
     d8e:	ec42 5a14 	vmov	s8, s9, r5, r2
     d92:	fba3 5207 	umull	r5, r2, r3, r7
     d96:	fbe3 0268 	umaal	r0, r2, r3, r8
     d9a:	fbe4 1564 	umaal	r1, r5, r4, r4
     d9e:	fbe3 0568 	umaal	r0, r5, r3, r8
     da2:	fbe3 2569 	umaal	r2, r5, r3, r9
     da6:	fba4 b607 	umull	fp, r6, r4, r7
     daa:	fbe3 2669 	umaal	r2, r6, r3, r9
     dae:	fbe3 566a 	umaal	r5, r6, r3, sl
     db2:	fbe4 0b67 	umaal	r0, fp, r4, r7
     db6:	fbe4 2b68 	umaal	r2, fp, r4, r8
     dba:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     dbe:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     dc2:	ec40 1a15 	vmov	s10, s11, r1, r0
     dc6:	fba4 1008 	umull	r1, r0, r4, r8
     dca:	fbe4 5069 	umaal	r5, r0, r4, r9
     dce:	fbe3 606c 	umaal	r6, r0, r3, ip
     dd2:	fbe3 b06e 	umaal	fp, r0, r3, lr
     dd6:	fbe7 2167 	umaal	r2, r1, r7, r7
     dda:	fbe4 5169 	umaal	r5, r1, r4, r9
     dde:	fbe4 616a 	umaal	r6, r1, r4, sl
     de2:	fbe3 b16e 	umaal	fp, r1, r3, lr
     de6:	fbe4 016e 	umaal	r0, r1, r4, lr
     dea:	ee06 2a10 	vmov	s12, r2
     dee:	fba7 3208 	umull	r3, r2, r7, r8
     df2:	fbe4 626a 	umaal	r6, r2, r4, sl
     df6:	fbe4 b26c 	umaal	fp, r2, r4, ip
     dfa:	fbe4 026e 	umaal	r0, r2, r4, lr
     dfe:	fbe7 126e 	umaal	r1, r2, r7, lr
     e02:	fbe7 5368 	umaal	r5, r3, r7, r8
     e06:	fbe7 6369 	umaal	r6, r3, r7, r9
     e0a:	fbe4 b36c 	umaal	fp, r3, r4, ip
     e0e:	fbe7 036c 	umaal	r0, r3, r7, ip
     e12:	fbe7 136e 	umaal	r1, r3, r7, lr
     e16:	fbe8 236e 	umaal	r2, r3, r8, lr
     e1a:	ee06 5a90 	vmov	s13, r5
     e1e:	fba7 5409 	umull	r5, r4, r7, r9
     e22:	fbe7 b46a 	umaal	fp, r4, r7, sl
     e26:	fbe7 046c 	umaal	r0, r4, r7, ip
     e2a:	fbe8 146c 	umaal	r1, r4, r8, ip
     e2e:	fbe8 246e 	umaal	r2, r4, r8, lr
     e32:	fbe9 346e 	umaal	r3, r4, r9, lr
     e36:	fbe8 6568 	umaal	r6, r5, r8, r8
     e3a:	fbe7 b56a 	umaal	fp, r5, r7, sl
     e3e:	fbe8 056a 	umaal	r0, r5, r8, sl
     e42:	fbe8 156c 	umaal	r1, r5, r8, ip
     e46:	fbe9 256c 	umaal	r2, r5, r9, ip
     e4a:	fbe9 356e 	umaal	r3, r5, r9, lr
     e4e:	fbea 456e 	umaal	r4, r5, sl, lr
     e52:	ee07 6a10 	vmov	s14, r6
     e56:	fba8 7609 	umull	r7, r6, r8, r9
     e5a:	fbe8 066a 	umaal	r0, r6, r8, sl
     e5e:	fbe9 166a 	umaal	r1, r6, r9, sl
     e62:	fbe9 266c 	umaal	r2, r6, r9, ip
     e66:	fbea 366c 	umaal	r3, r6, sl, ip
     e6a:	fbea 466e 	umaal	r4, r6, sl, lr
     e6e:	fbec 566e 	umaal	r5, r6, ip, lr
     e72:	fbe8 b769 	umaal	fp, r7, r8, r9
     e76:	fbe9 0769 	umaal	r0, r7, r9, r9
     e7a:	fbe9 176a 	umaal	r1, r7, r9, sl
     e7e:	fbea 276a 	umaal	r2, r7, sl, sl
     e82:	fbea 376c 	umaal	r3, r7, sl, ip
     e86:	fbec 476c 	umaal	r4, r7, ip, ip
     e8a:	fbec 576e 	umaal	r5, r7, ip, lr
     e8e:	fbee 676e 	umaal	r6, r7, lr, lr
     e92:	bd00      	pop	{pc}

00000e94 <ocrypto_bigint_sqr256>:
     e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e98:	ee07 0a90 	vmov	s15, r0
     e9c:	f7ff ff6c 	bl	d78 <ocrypto_sqr256_noframe>
     ea0:	ee17 8a90 	vmov	r8, s15
     ea4:	ee07 ba90 	vmov	s15, fp
     ea8:	eca8 4a08 	vstmia	r8!, {s8-s15}
     eac:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000eb4 <ocrypto_constant_time_equal>:
     eb4:	b430      	push	{r4, r5}
     eb6:	f04f 0300 	mov.w	r3, #0

00000eba <constant_time_equal_loop>:
     eba:	f810 4b01 	ldrb.w	r4, [r0], #1
     ebe:	f811 5b01 	ldrb.w	r5, [r1], #1
     ec2:	3a01      	subs	r2, #1
     ec4:	ea84 0405 	eor.w	r4, r4, r5
     ec8:	ea43 0304 	orr.w	r3, r3, r4
     ecc:	d1f5      	bne.n	eba <constant_time_equal_loop>
     ece:	f1a3 0301 	sub.w	r3, r3, #1
     ed2:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     ed6:	bc30      	pop	{r4, r5}
     ed8:	4770      	bx	lr
     eda:	bf00      	nop

00000edc <ocrypto_constant_time_is_zero>:
     edc:	f04f 0300 	mov.w	r3, #0

00000ee0 <constant_time_is_zero_loop>:
     ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
     ee4:	3901      	subs	r1, #1
     ee6:	ea43 0302 	orr.w	r3, r3, r2
     eea:	d1f9      	bne.n	ee0 <constant_time_is_zero_loop>
     eec:	f1a3 0301 	sub.w	r3, r3, #1
     ef0:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     ef4:	4770      	bx	lr
     ef6:	bf00      	nop

00000ef8 <ocrypto_constant_time_xor>:
     ef8:	b430      	push	{r4, r5}

00000efa <constant_time_xor_loop>:
     efa:	f811 4b01 	ldrb.w	r4, [r1], #1
     efe:	f812 5b01 	ldrb.w	r5, [r2], #1
     f02:	406c      	eors	r4, r5
     f04:	f800 4b01 	strb.w	r4, [r0], #1
     f08:	3b01      	subs	r3, #1
     f0a:	d1f6      	bne.n	efa <constant_time_xor_loop>
     f0c:	bc30      	pop	{r4, r5}
     f0e:	4770      	bx	lr

00000f10 <ocrypto_mod_p256_add>:
     f10:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f14:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     f18:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f1c:	185b      	adds	r3, r3, r1
     f1e:	eb54 040c 	adcs.w	r4, r4, ip
     f22:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f26:	414d      	adcs	r5, r1
     f28:	eb56 060c 	adcs.w	r6, r6, ip
     f2c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f30:	414f      	adcs	r7, r1
     f32:	eb58 080c 	adcs.w	r8, r8, ip
     f36:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f3a:	eb59 0901 	adcs.w	r9, r9, r1
     f3e:	eb5a 0a0c 	adcs.w	sl, sl, ip
     f42:	4189      	sbcs	r1, r1
     f44:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     f48:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     f4c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     f50:	f176 0600 	sbcs.w	r6, r6, #0
     f54:	f177 0700 	sbcs.w	r7, r7, #0
     f58:	f178 0800 	sbcs.w	r8, r8, #0
     f5c:	f179 0901 	sbcs.w	r9, r9, #1
     f60:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     f64:	f151 0100 	adcs.w	r1, r1, #0
     f68:	185b      	adds	r3, r3, r1
     f6a:	414c      	adcs	r4, r1
     f6c:	414d      	adcs	r5, r1
     f6e:	f156 0600 	adcs.w	r6, r6, #0
     f72:	f157 0700 	adcs.w	r7, r7, #0
     f76:	f158 0800 	adcs.w	r8, r8, #0
     f7a:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     f7e:	eb5a 0a01 	adcs.w	sl, sl, r1
     f82:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     f86:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f8a:	4770      	bx	lr

00000f8c <ocrypto_mod_p256_sub>:
     f8c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f90:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     f94:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     f98:	1a5b      	subs	r3, r3, r1
     f9a:	eb74 040c 	sbcs.w	r4, r4, ip
     f9e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fa2:	418d      	sbcs	r5, r1
     fa4:	eb76 060c 	sbcs.w	r6, r6, ip
     fa8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fac:	418f      	sbcs	r7, r1
     fae:	eb78 080c 	sbcs.w	r8, r8, ip
     fb2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fb6:	eb79 0901 	sbcs.w	r9, r9, r1
     fba:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     fbe:	4189      	sbcs	r1, r1
     fc0:	185b      	adds	r3, r3, r1
     fc2:	414c      	adcs	r4, r1
     fc4:	414d      	adcs	r5, r1
     fc6:	f156 0600 	adcs.w	r6, r6, #0
     fca:	f157 0700 	adcs.w	r7, r7, #0
     fce:	f158 0800 	adcs.w	r8, r8, #0
     fd2:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     fd6:	eb5a 0a01 	adcs.w	sl, sl, r1
     fda:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     fde:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     fe2:	4770      	bx	lr

00000fe4 <mul_reduce>:
     fe4:	eb18 0804 	adds.w	r8, r8, r4
     fe8:	eb59 0905 	adcs.w	r9, r9, r5
     fec:	eb5a 0a06 	adcs.w	sl, sl, r6
     ff0:	eb5b 0b07 	adcs.w	fp, fp, r7
     ff4:	f05f 0c00 	movs.w	ip, #0
     ff8:	f14c 0c00 	adc.w	ip, ip, #0
     ffc:	eb18 0805 	adds.w	r8, r8, r5
    1000:	eb59 0906 	adcs.w	r9, r9, r6
    1004:	eb5a 0a07 	adcs.w	sl, sl, r7
    1008:	eb5b 0b07 	adcs.w	fp, fp, r7
    100c:	eb50 000c 	adcs.w	r0, r0, ip
    1010:	f05f 0c00 	movs.w	ip, #0
    1014:	eb51 010c 	adcs.w	r1, r1, ip
    1018:	eb52 020c 	adcs.w	r2, r2, ip
    101c:	4163      	adcs	r3, r4
    101e:	f14c 0c00 	adc.w	ip, ip, #0
    1022:	ebb8 0807 	subs.w	r8, r8, r7
    1026:	f179 0900 	sbcs.w	r9, r9, #0
    102a:	f17a 0a00 	sbcs.w	sl, sl, #0
    102e:	eb7b 0b04 	sbcs.w	fp, fp, r4
    1032:	41a8      	sbcs	r0, r5
    1034:	41b1      	sbcs	r1, r6
    1036:	41a2      	sbcs	r2, r4
    1038:	41b3      	sbcs	r3, r6
    103a:	f16c 0c00 	sbc.w	ip, ip, #0
    103e:	ebbb 0b05 	subs.w	fp, fp, r5
    1042:	41b0      	sbcs	r0, r6
    1044:	41b9      	sbcs	r1, r7
    1046:	41aa      	sbcs	r2, r5
    1048:	41bb      	sbcs	r3, r7
    104a:	f16c 0c00 	sbc.w	ip, ip, #0
    104e:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    1052:	ebb8 0804 	subs.w	r8, r8, r4
    1056:	eb79 0904 	sbcs.w	r9, r9, r4
    105a:	eb7a 0a04 	sbcs.w	sl, sl, r4
    105e:	f17b 0b00 	sbcs.w	fp, fp, #0
    1062:	f170 0000 	sbcs.w	r0, r0, #0
    1066:	f171 0100 	sbcs.w	r1, r1, #0
    106a:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    106e:	41a3      	sbcs	r3, r4
    1070:	f16c 0c00 	sbc.w	ip, ip, #0
    1074:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1078:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    107c:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    1080:	f15b 0b00 	adcs.w	fp, fp, #0
    1084:	f150 0400 	adcs.w	r4, r0, #0
    1088:	f151 0500 	adcs.w	r5, r1, #0
    108c:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    1090:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    1094:	f14c 0c00 	adc.w	ip, ip, #0
    1098:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    109c:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    10a0:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    10a4:	f15b 0300 	adcs.w	r3, fp, #0
    10a8:	f154 0400 	adcs.w	r4, r4, #0
    10ac:	f155 0500 	adcs.w	r5, r5, #0
    10b0:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    10b4:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    10b8:	4770      	bx	lr
    10ba:	bf00      	nop

000010bc <ocrypto_mod_p256_mul>:
    10bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10c0:	ee07 0a90 	vmov	s15, r0
    10c4:	f7ff fd92 	bl	bec <ocrypto_mul256_noframe>
    10c8:	ec59 8a16 	vmov	r8, r9, s12, s13
    10cc:	ee17 aa10 	vmov	sl, s14
    10d0:	f7ff ff88 	bl	fe4 <mul_reduce>
    10d4:	ec59 8a14 	vmov	r8, r9, s8, s9
    10d8:	ec5b aa15 	vmov	sl, fp, s10, s11
    10dc:	f7ff ff82 	bl	fe4 <mul_reduce>
    10e0:	ee17 8a90 	vmov	r8, s15
    10e4:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    10e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000010ec <ocrypto_mod_p256_sqr>:
    10ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10f0:	ee07 0a90 	vmov	s15, r0
    10f4:	f7ff fe40 	bl	d78 <ocrypto_sqr256_noframe>
    10f8:	ec59 8a16 	vmov	r8, r9, s12, s13
    10fc:	ee17 aa10 	vmov	sl, s14
    1100:	f7ff ff70 	bl	fe4 <mul_reduce>
    1104:	ec59 8a14 	vmov	r8, r9, s8, s9
    1108:	ec5b aa15 	vmov	sl, fp, s10, s11
    110c:	f7ff ff6a 	bl	fe4 <mul_reduce>
    1110:	ee17 8a90 	vmov	r8, s15
    1114:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000111c <__aeabi_dcmpun>:
    111c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1124:	d102      	bne.n	112c <__aeabi_dcmpun+0x10>
    1126:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    112a:	d10a      	bne.n	1142 <__aeabi_dcmpun+0x26>
    112c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1130:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1134:	d102      	bne.n	113c <__aeabi_dcmpun+0x20>
    1136:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    113a:	d102      	bne.n	1142 <__aeabi_dcmpun+0x26>
    113c:	f04f 0000 	mov.w	r0, #0
    1140:	4770      	bx	lr
    1142:	f04f 0001 	mov.w	r0, #1
    1146:	4770      	bx	lr

00001148 <__aeabi_d2iz>:
    1148:	ea4f 0241 	mov.w	r2, r1, lsl #1
    114c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1150:	d215      	bcs.n	117e <__aeabi_d2iz+0x36>
    1152:	d511      	bpl.n	1178 <__aeabi_d2iz+0x30>
    1154:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1158:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    115c:	d912      	bls.n	1184 <__aeabi_d2iz+0x3c>
    115e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1166:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    116a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    116e:	fa23 f002 	lsr.w	r0, r3, r2
    1172:	bf18      	it	ne
    1174:	4240      	negne	r0, r0
    1176:	4770      	bx	lr
    1178:	f04f 0000 	mov.w	r0, #0
    117c:	4770      	bx	lr
    117e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1182:	d105      	bne.n	1190 <__aeabi_d2iz+0x48>
    1184:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    1188:	bf08      	it	eq
    118a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    118e:	4770      	bx	lr
    1190:	f04f 0000 	mov.w	r0, #0
    1194:	4770      	bx	lr
    1196:	bf00      	nop
    1198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    119a:	4c14      	ldr	r4, [pc, #80]	; (11ec <__aeabi_d2iz+0xa4>)
    119c:	7a20      	ldrb	r0, [r4, #8]
    119e:	f88d 0001 	strb.w	r0, [sp, #1]
    11a2:	79e0      	ldrb	r0, [r4, #7]
    11a4:	f88d 0000 	strb.w	r0, [sp]
    11a8:	79a0      	ldrb	r0, [r4, #6]
    11aa:	f8ad 0004 	strh.w	r0, [sp, #4]
    11ae:	7960      	ldrb	r0, [r4, #5]
    11b0:	f8ad 0002 	strh.w	r0, [sp, #2]
    11b4:	4668      	mov	r0, sp
    11b6:	f006 f84d 	bl	7254 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    11ba:	b108      	cbz	r0, 11c0 <__aeabi_d2iz+0x78>
    11bc:	21a7      	movs	r1, #167	; 0xa7
    11be:	e010      	b.n	11e2 <__aeabi_d2iz+0x9a>
    11c0:	68e0      	ldr	r0, [r4, #12]
    11c2:	9002      	str	r0, [sp, #8]
    11c4:	a802      	add	r0, sp, #8
    11c6:	f006 f85b 	bl	7280 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    11ca:	b108      	cbz	r0, 11d0 <__aeabi_d2iz+0x88>
    11cc:	21ab      	movs	r1, #171	; 0xab
    11ce:	e008      	b.n	11e2 <__aeabi_d2iz+0x9a>
    11d0:	4807      	ldr	r0, [pc, #28]	; (11f0 <__aeabi_d2iz+0xa8>)
    11d2:	6800      	ldr	r0, [r0, #0]
    11d4:	9003      	str	r0, [sp, #12]
    11d6:	a803      	add	r0, sp, #12
    11d8:	f00e ffa9 	bl	1012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    11dc:	2800      	cmp	r0, #0
    11de:	d003      	beq.n	11e8 <__aeabi_d2iz+0xa0>
    11e0:	21af      	movs	r1, #175	; 0xaf
    11e2:	2003      	movs	r0, #3
    11e4:	f000 f8dc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11e8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    11ea:	0000      	.short	0x0000
    11ec:	20000de0 	.word	0x20000de0
    11f0:	000014a8 	.word	0x000014a8

000011f4 <sdc_build_revision_get>:
    11f4:	b510      	push	{r4, lr}
    11f6:	b128      	cbz	r0, 1204 <sdc_build_revision_get+0x10>
    11f8:	2214      	movs	r2, #20
    11fa:	4904      	ldr	r1, [pc, #16]	; (120c <sdc_build_revision_get+0x18>)
    11fc:	f00f fdd8 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1200:	2000      	movs	r0, #0
    1202:	bd10      	pop	{r4, pc}
    1204:	f06f 0015 	mvn.w	r0, #21
    1208:	bd10      	pop	{r4, pc}
    120a:	0000      	.short	0x0000
    120c:	000014cc 	.word	0x000014cc

00001210 <sdc_cfg_set>:
    1210:	b570      	push	{r4, r5, r6, lr}
    1212:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1216:	bbb8      	cbnz	r0, 1288 <sdc_cfg_set+0x78>
    1218:	4c1e      	ldr	r4, [pc, #120]	; (1294 <sdc_cfg_set+0x84>)
    121a:	7860      	ldrb	r0, [r4, #1]
    121c:	b108      	cbz	r0, 1222 <sdc_cfg_set+0x12>
    121e:	1198      	asrs	r0, r3, #6
    1220:	bd70      	pop	{r4, r5, r6, pc}
    1222:	b301      	cbz	r1, 1266 <sdc_cfg_set+0x56>
    1224:	f06f 0515 	mvn.w	r5, #21
    1228:	b1aa      	cbz	r2, 1256 <sdc_cfg_set+0x46>
    122a:	481b      	ldr	r0, [pc, #108]	; (1298 <sdc_cfg_set+0x88>)
    122c:	1e89      	subs	r1, r1, #2
    122e:	2906      	cmp	r1, #6
    1230:	d22b      	bcs.n	128a <sdc_cfg_set+0x7a>
    1232:	e8df f001 	tbb	[pc, r1]
    1236:	0603      	.short	0x0603
    1238:	1c2a1916 	.word	0x1c2a1916
    123c:	7811      	ldrb	r1, [r2, #0]
    123e:	7041      	strb	r1, [r0, #1]
    1240:	e017      	b.n	1272 <sdc_cfg_set+0x62>
    1242:	7891      	ldrb	r1, [r2, #2]
    1244:	b139      	cbz	r1, 1256 <sdc_cfg_set+0x46>
    1246:	78d1      	ldrb	r1, [r2, #3]
    1248:	b129      	cbz	r1, 1256 <sdc_cfg_set+0x46>
    124a:	7811      	ldrb	r1, [r2, #0]
    124c:	291b      	cmp	r1, #27
    124e:	d302      	bcc.n	1256 <sdc_cfg_set+0x46>
    1250:	7851      	ldrb	r1, [r2, #1]
    1252:	291b      	cmp	r1, #27
    1254:	d201      	bcs.n	125a <sdc_cfg_set+0x4a>
    1256:	4628      	mov	r0, r5
    1258:	bd70      	pop	{r4, r5, r6, pc}
    125a:	6811      	ldr	r1, [r2, #0]
    125c:	f8c0 1005 	str.w	r1, [r0, #5]
    1260:	e007      	b.n	1272 <sdc_cfg_set+0x62>
    1262:	6811      	ldr	r1, [r2, #0]
    1264:	60c1      	str	r1, [r0, #12]
    1266:	e004      	b.n	1272 <sdc_cfg_set+0x62>
    1268:	7811      	ldrb	r1, [r2, #0]
    126a:	7081      	strb	r1, [r0, #2]
    126c:	e001      	b.n	1272 <sdc_cfg_set+0x62>
    126e:	8811      	ldrh	r1, [r2, #0]
    1270:	8241      	strh	r1, [r0, #18]
    1272:	2201      	movs	r2, #1
    1274:	4908      	ldr	r1, [pc, #32]	; (1298 <sdc_cfg_set+0x88>)
    1276:	2000      	movs	r0, #0
    1278:	f00b fc38 	bl	caec <strlen+0x10>
    127c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    1280:	db05      	blt.n	128e <sdc_cfg_set+0x7e>
    1282:	f06f 000b 	mvn.w	r0, #11
    1286:	bd70      	pop	{r4, r5, r6, pc}
    1288:	e7ff      	b.n	128a <sdc_cfg_set+0x7a>
    128a:	4618      	mov	r0, r3
    128c:	e7fb      	b.n	1286 <sdc_cfg_set+0x76>
    128e:	2101      	movs	r1, #1
    1290:	70a1      	strb	r1, [r4, #2]
    1292:	e7f8      	b.n	1286 <sdc_cfg_set+0x76>
    1294:	20000028 	.word	0x20000028
    1298:	20000de0 	.word	0x20000de0

0000129c <sdc_disable>:
    129c:	b510      	push	{r4, lr}
    129e:	4c07      	ldr	r4, [pc, #28]	; (12bc <sdc_disable+0x20>)
    12a0:	7860      	ldrb	r0, [r4, #1]
    12a2:	b120      	cbz	r0, 12ae <sdc_disable+0x12>
    12a4:	f006 faca 	bl	783c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    12a8:	7820      	ldrb	r0, [r4, #0]
    12aa:	f00b f9e7 	bl	c67c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    12ae:	f000 fd87 	bl	1dc0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    12b2:	f000 fe5f 	bl	1f74 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    12b6:	2000      	movs	r0, #0
    12b8:	7060      	strb	r0, [r4, #1]
    12ba:	bd10      	pop	{r4, pc}
    12bc:	20000028 	.word	0x20000028

000012c0 <sdc_enable>:
    12c0:	b570      	push	{r4, r5, r6, lr}
    12c2:	460c      	mov	r4, r1
    12c4:	0005      	movs	r5, r0
    12c6:	d002      	beq.n	12ce <sdc_enable+0xe>
    12c8:	b10c      	cbz	r4, 12ce <sdc_enable+0xe>
    12ca:	0760      	lsls	r0, r4, #29
    12cc:	d002      	beq.n	12d4 <sdc_enable+0x14>
    12ce:	f06f 0015 	mvn.w	r0, #21
    12d2:	bd70      	pop	{r4, r5, r6, pc}
    12d4:	f000 f920 	bl	1518 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    12d8:	b1a8      	cbz	r0, 1306 <sdc_enable+0x46>
    12da:	4628      	mov	r0, r5
    12dc:	f00b f994 	bl	c608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    12e0:	4d0a      	ldr	r5, [pc, #40]	; (130c <sdc_enable+0x4c>)
    12e2:	2200      	movs	r2, #0
    12e4:	490a      	ldr	r1, [pc, #40]	; (1310 <sdc_enable+0x50>)
    12e6:	7028      	strb	r0, [r5, #0]
    12e8:	4620      	mov	r0, r4
    12ea:	f00b fbff 	bl	caec <strlen+0x10>
    12ee:	f00f fb38 	bl	10962 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    12f2:	2100      	movs	r1, #0
    12f4:	7828      	ldrb	r0, [r5, #0]
    12f6:	f006 fa8b 	bl	7810 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    12fa:	f7ff ff4d 	bl	1198 <__aeabi_d2iz+0x50>
    12fe:	2001      	movs	r0, #1
    1300:	7068      	strb	r0, [r5, #1]
    1302:	2000      	movs	r0, #0
    1304:	bd70      	pop	{r4, r5, r6, pc}
    1306:	f04f 30ff 	mov.w	r0, #4294967295
    130a:	bd70      	pop	{r4, r5, r6, pc}
    130c:	20000028 	.word	0x20000028
    1310:	20000de0 	.word	0x20000de0

00001314 <sdc_init>:
    1314:	b530      	push	{r4, r5, lr}
    1316:	b089      	sub	sp, #36	; 0x24
    1318:	0004      	movs	r4, r0
    131a:	d00c      	beq.n	1336 <sdc_init+0x22>
    131c:	f00b f91a 	bl	c554 <mpsl_is_initialized>
    1320:	f04f 35ff 	mov.w	r5, #4294967295
    1324:	b120      	cbz	r0, 1330 <sdc_init+0x1c>
    1326:	f00a ffad 	bl	c284 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    132a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    132e:	d905      	bls.n	133c <sdc_init+0x28>
    1330:	4628      	mov	r0, r5
    1332:	b009      	add	sp, #36	; 0x24
    1334:	bd30      	pop	{r4, r5, pc}
    1336:	f06f 0015 	mvn.w	r0, #21
    133a:	e7fa      	b.n	1332 <sdc_init+0x1e>
    133c:	4d13      	ldr	r5, [pc, #76]	; (138c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4>)
    133e:	4814      	ldr	r0, [pc, #80]	; (1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>)
    1340:	606c      	str	r4, [r5, #4]
    1342:	f000 fa0b 	bl	175c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    1346:	2000      	movs	r0, #0
    1348:	7068      	strb	r0, [r5, #1]
    134a:	70a8      	strb	r0, [r5, #2]
    134c:	4601      	mov	r1, r0
    134e:	2220      	movs	r2, #32
    1350:	4668      	mov	r0, sp
    1352:	f00f fda7 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1356:	2220      	movs	r2, #32
    1358:	490e      	ldr	r1, [pc, #56]	; (1394 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xc>)
    135a:	4668      	mov	r0, sp
    135c:	f00f fd28 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1360:	2220      	movs	r2, #32
    1362:	4669      	mov	r1, sp
    1364:	480c      	ldr	r0, [pc, #48]	; (1398 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x10>)
    1366:	f00f fd23 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    136a:	f3ef 8410 	mrs	r4, PRIMASK
    136e:	b672      	cpsid	i
    1370:	f000 fd34 	bl	1ddc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    1374:	4809      	ldr	r0, [pc, #36]	; (139c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x14>)
    1376:	f000 fe09 	bl	1f8c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    137a:	b118      	cbz	r0, 1384 <sdc_init+0x70>
    137c:	21c5      	movs	r1, #197	; 0xc5
    137e:	2003      	movs	r0, #3
    1380:	f000 f80e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1384:	b904      	cbnz	r4, 1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>
    1386:	b662      	cpsie	i
    1388:	2000      	movs	r0, #0
    138a:	e7d2      	b.n	1332 <sdc_init+0x1e>
    138c:	20000028 	.word	0x20000028
    1390:	00001199 	.word	0x00001199
    1394:	000014ac 	.word	0x000014ac
    1398:	20000de0 	.word	0x20000de0
    139c:	00001545 	.word	0x00001545

000013a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    13a0:	b50e      	push	{r1, r2, r3, lr}
    13a2:	b672      	cpsid	i
    13a4:	4a15      	ldr	r2, [pc, #84]	; (13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    13a6:	6855      	ldr	r5, [r2, #4]
    13a8:	b1dd      	cbz	r5, 13e2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    13aa:	2200      	movs	r2, #0
    13ac:	4603      	mov	r3, r0
    13ae:	466e      	mov	r6, sp
    13b0:	240a      	movs	r4, #10
    13b2:	e003      	b.n	13bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    13b4:	fbb0 f0f4 	udiv	r0, r0, r4
    13b8:	1c52      	adds	r2, r2, #1
    13ba:	b2d2      	uxtb	r2, r2
    13bc:	2800      	cmp	r0, #0
    13be:	d1f9      	bne.n	13b4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    13c0:	54b0      	strb	r0, [r6, r2]
    13c2:	e00a      	b.n	13da <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    13c4:	b2d8      	uxtb	r0, r3
    13c6:	fbb0 f7f4 	udiv	r7, r0, r4
    13ca:	fbb3 f3f4 	udiv	r3, r3, r4
    13ce:	fb04 0017 	mls	r0, r4, r7, r0
    13d2:	1e52      	subs	r2, r2, #1
    13d4:	b2d2      	uxtb	r2, r2
    13d6:	3030      	adds	r0, #48	; 0x30
    13d8:	54b0      	strb	r0, [r6, r2]
    13da:	2a00      	cmp	r2, #0
    13dc:	d1f2      	bne.n	13c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    13de:	4630      	mov	r0, r6
    13e0:	47a8      	blx	r5
    13e2:	f3bf 8f4f 	dsb	sy
    13e6:	4806      	ldr	r0, [pc, #24]	; (1400 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    13e8:	6801      	ldr	r1, [r0, #0]
    13ea:	4a06      	ldr	r2, [pc, #24]	; (1404 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    13ec:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    13f0:	4311      	orrs	r1, r2
    13f2:	6001      	str	r1, [r0, #0]
    13f4:	f3bf 8f4f 	dsb	sy
    13f8:	bf00      	nop
    13fa:	e7fd      	b.n	13f8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    13fc:	20000028 	.word	0x20000028
    1400:	e000ed0c 	.word	0xe000ed0c
    1404:	05fa0004 	.word	0x05fa0004

00001408 <sdc_support_adv>:
    1408:	4806      	ldr	r0, [pc, #24]	; (1424 <sdc_support_adv+0x1c>)
    140a:	b510      	push	{r4, lr}
    140c:	7881      	ldrb	r1, [r0, #2]
    140e:	7840      	ldrb	r0, [r0, #1]
    1410:	4301      	orrs	r1, r0
    1412:	d002      	beq.n	141a <sdc_support_adv+0x12>
    1414:	f04f 30ff 	mov.w	r0, #4294967295
    1418:	bd10      	pop	{r4, pc}
    141a:	f006 fa1f 	bl	785c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    141e:	2000      	movs	r0, #0
    1420:	bd10      	pop	{r4, pc}
    1422:	0000      	.short	0x0000
    1424:	20000028 	.word	0x20000028

00001428 <sdc_support_dle_peripheral>:
    1428:	4806      	ldr	r0, [pc, #24]	; (1444 <sdc_support_dle_peripheral+0x1c>)
    142a:	b510      	push	{r4, lr}
    142c:	7881      	ldrb	r1, [r0, #2]
    142e:	7840      	ldrb	r0, [r0, #1]
    1430:	4301      	orrs	r1, r0
    1432:	d002      	beq.n	143a <sdc_support_dle_peripheral+0x12>
    1434:	f04f 30ff 	mov.w	r0, #4294967295
    1438:	bd10      	pop	{r4, pc}
    143a:	f005 ff6d 	bl	7318 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    143e:	2000      	movs	r0, #0
    1440:	bd10      	pop	{r4, pc}
    1442:	0000      	.short	0x0000
    1444:	20000028 	.word	0x20000028

00001448 <sdc_support_le_2m_phy>:
    1448:	4806      	ldr	r0, [pc, #24]	; (1464 <sdc_support_le_2m_phy+0x1c>)
    144a:	b510      	push	{r4, lr}
    144c:	7881      	ldrb	r1, [r0, #2]
    144e:	7840      	ldrb	r0, [r0, #1]
    1450:	4301      	orrs	r1, r0
    1452:	d002      	beq.n	145a <sdc_support_le_2m_phy+0x12>
    1454:	f04f 30ff 	mov.w	r0, #4294967295
    1458:	bd10      	pop	{r4, pc}
    145a:	f00f f807 	bl	1046c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    145e:	2000      	movs	r0, #0
    1460:	bd10      	pop	{r4, pc}
    1462:	0000      	.short	0x0000
    1464:	20000028 	.word	0x20000028

00001468 <sdc_support_peripheral>:
    1468:	4806      	ldr	r0, [pc, #24]	; (1484 <sdc_support_peripheral+0x1c>)
    146a:	b510      	push	{r4, lr}
    146c:	7881      	ldrb	r1, [r0, #2]
    146e:	7840      	ldrb	r0, [r0, #1]
    1470:	4301      	orrs	r1, r0
    1472:	d002      	beq.n	147a <sdc_support_peripheral+0x12>
    1474:	f04f 30ff 	mov.w	r0, #4294967295
    1478:	bd10      	pop	{r4, pc}
    147a:	f006 fa01 	bl	7880 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    147e:	2000      	movs	r0, #0
    1480:	bd10      	pop	{r4, pc}
    1482:	0000      	.short	0x0000
    1484:	20000028 	.word	0x20000028

00001488 <sdc_support_phy_update_peripheral>:
    1488:	4806      	ldr	r0, [pc, #24]	; (14a4 <sdc_support_phy_update_peripheral+0x1c>)
    148a:	b510      	push	{r4, lr}
    148c:	7881      	ldrb	r1, [r0, #2]
    148e:	7840      	ldrb	r0, [r0, #1]
    1490:	4301      	orrs	r1, r0
    1492:	d002      	beq.n	149a <sdc_support_phy_update_peripheral+0x12>
    1494:	f04f 30ff 	mov.w	r0, #4294967295
    1498:	bd10      	pop	{r4, pc}
    149a:	f00e fff7 	bl	1048c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    149e:	2000      	movs	r0, #0
    14a0:	bd10      	pop	{r4, pc}
    14a2:	0000      	.short	0x0000
    14a4:	20000028 	.word	0x20000028
    14a8:	00000001 	.word	0x00000001
    14ac:	00010100 	.word	0x00010100
    14b0:	031b1b00 	.word	0x031b1b00
    14b4:	00000002 	.word	0x00000002
    14b8:	00001d4c 	.word	0x00001d4c
    14bc:	001f0000 	.word	0x001f0000
	...
    14cc:	2f2d0cd8 	.word	0x2f2d0cd8
    14d0:	5ce2ae36 	.word	0x5ce2ae36
    14d4:	4c802680 	.word	0x4c802680
    14d8:	53164d3f 	.word	0x53164d3f
    14dc:	73c79650 	.word	0x73c79650

000014e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    14e0:	4a05      	ldr	r2, [pc, #20]	; (14f8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    14e2:	b510      	push	{r4, lr}
    14e4:	6852      	ldr	r2, [r2, #4]
    14e6:	b112      	cbz	r2, 14ee <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    14e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    14ec:	4710      	bx	r2
    14ee:	2192      	movs	r1, #146	; 0x92
    14f0:	2004      	movs	r0, #4
    14f2:	f7ff ff55 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f6:	0000      	.short	0x0000
    14f8:	20000e00 	.word	0x20000e00

000014fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    14fc:	4a05      	ldr	r2, [pc, #20]	; (1514 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    14fe:	b510      	push	{r4, lr}
    1500:	6892      	ldr	r2, [r2, #8]
    1502:	b112      	cbz	r2, 150a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    1504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1508:	4710      	bx	r2
    150a:	2198      	movs	r1, #152	; 0x98
    150c:	2004      	movs	r0, #4
    150e:	f7ff ff47 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1512:	0000      	.short	0x0000
    1514:	20000e00 	.word	0x20000e00

00001518 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    1518:	4805      	ldr	r0, [pc, #20]	; (1530 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    151a:	6801      	ldr	r1, [r0, #0]
    151c:	b129      	cbz	r1, 152a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    151e:	6841      	ldr	r1, [r0, #4]
    1520:	b119      	cbz	r1, 152a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1522:	6880      	ldr	r0, [r0, #8]
    1524:	b108      	cbz	r0, 152a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1526:	2001      	movs	r0, #1
    1528:	4770      	bx	lr
    152a:	2000      	movs	r0, #0
    152c:	4770      	bx	lr
    152e:	0000      	.short	0x0000
    1530:	20000e00 	.word	0x20000e00

00001534 <sdc_rand_source_register>:
    1534:	4902      	ldr	r1, [pc, #8]	; (1540 <sdc_rand_source_register+0xc>)
    1536:	c80d      	ldmia	r0, {r0, r2, r3}
    1538:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    153c:	2000      	movs	r0, #0
    153e:	4770      	bx	lr
    1540:	20000e00 	.word	0x20000e00

00001544 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    1544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1546:	4c12      	ldr	r4, [pc, #72]	; (1590 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    1548:	2600      	movs	r6, #0
    154a:	6825      	ldr	r5, [r4, #0]
    154c:	e011      	b.n	1572 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    154e:	9800      	ldr	r0, [sp, #0]
    1550:	2802      	cmp	r0, #2
    1552:	d002      	beq.n	155a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    1554:	2803      	cmp	r0, #3
    1556:	d10c      	bne.n	1572 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    1558:	e006      	b.n	1568 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    155a:	6820      	ldr	r0, [r4, #0]
    155c:	b110      	cbz	r0, 1564 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    155e:	2000      	movs	r0, #0
    1560:	6026      	str	r6, [r4, #0]
    1562:	e005      	b.n	1570 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    1564:	2128      	movs	r1, #40	; 0x28
    1566:	e00c      	b.n	1582 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    1568:	6820      	ldr	r0, [r4, #0]
    156a:	b168      	cbz	r0, 1588 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    156c:	2001      	movs	r0, #1
    156e:	6026      	str	r6, [r4, #0]
    1570:	47a8      	blx	r5
    1572:	4668      	mov	r0, sp
    1574:	f000 fcd0 	bl	1f18 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    1578:	2800      	cmp	r0, #0
    157a:	d0e8      	beq.n	154e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    157c:	2805      	cmp	r0, #5
    157e:	d005      	beq.n	158c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    1580:	2135      	movs	r1, #53	; 0x35
    1582:	2004      	movs	r0, #4
    1584:	f7ff ff0c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1588:	212d      	movs	r1, #45	; 0x2d
    158a:	e7fa      	b.n	1582 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    158e:	0000      	.short	0x0000
    1590:	20000030 	.word	0x20000030

00001594 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    1594:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1598:	4e25      	ldr	r6, [pc, #148]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    159a:	4605      	mov	r5, r0
    159c:	1d00      	adds	r0, r0, #4
    159e:	f106 0744 	add.w	r7, r6, #68	; 0x44
    15a2:	6030      	str	r0, [r6, #0]
    15a4:	7838      	ldrb	r0, [r7, #0]
    15a6:	b158      	cbz	r0, 15c0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    15a8:	78ba      	ldrb	r2, [r7, #2]
    15aa:	463c      	mov	r4, r7
    15ac:	1c79      	adds	r1, r7, #1
    15ae:	4628      	mov	r0, r5
    15b0:	1c92      	adds	r2, r2, #2
    15b2:	f00f fbfd 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    15b6:	2000      	movs	r0, #0
    15b8:	7020      	strb	r0, [r4, #0]
    15ba:	2004      	movs	r0, #4
    15bc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    15c0:	481b      	ldr	r0, [pc, #108]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    15c2:	f001 fe7f 	bl	32c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    15c6:	4604      	mov	r4, r0
    15c8:	2802      	cmp	r0, #2
    15ca:	d004      	beq.n	15d6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
    15cc:	2c04      	cmp	r4, #4
    15ce:	d007      	beq.n	15e0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
    15d0:	2c08      	cmp	r4, #8
    15d2:	d027      	beq.n	1624 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    15d4:	e02a      	b.n	162c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    15d6:	4916      	ldr	r1, [pc, #88]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    15d8:	4628      	mov	r0, r5
    15da:	f00b fb0a 	bl	cbf2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    15de:	e025      	b.n	162c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    15e0:	7830      	ldrb	r0, [r6, #0]
    15e2:	2808      	cmp	r0, #8
    15e4:	d104      	bne.n	15f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
    15e6:	2105      	movs	r1, #5
    15e8:	203e      	movs	r0, #62	; 0x3e
    15ea:	f00b fad4 	bl	cb96 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    15ee:	b160      	cbz	r0, 160a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x76>
    15f0:	490f      	ldr	r1, [pc, #60]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    15f2:	4628      	mov	r0, r5
    15f4:	f00b fb62 	bl	ccbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    15f8:	2800      	cmp	r0, #0
    15fa:	d0d3      	beq.n	15a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    15fc:	78a9      	ldrb	r1, [r5, #2]
    15fe:	7828      	ldrb	r0, [r5, #0]
    1600:	f00b fac9 	bl	cb96 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    1604:	2800      	cmp	r0, #0
    1606:	d0cd      	beq.n	15a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1608:	e010      	b.n	162c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    160a:	88b0      	ldrh	r0, [r6, #4]
    160c:	f8ad 0000 	strh.w	r0, [sp]
    1610:	a901      	add	r1, sp, #4
    1612:	4668      	mov	r0, sp
    1614:	f00b fe3d 	bl	d292 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    1618:	2800      	cmp	r0, #0
    161a:	d0c3      	beq.n	15a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    161c:	21a7      	movs	r1, #167	; 0xa7
    161e:	2008      	movs	r0, #8
    1620:	f7ff febe 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1624:	4902      	ldr	r1, [pc, #8]	; (1630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    1626:	4628      	mov	r0, r5
    1628:	f00b fb11 	bl	cc4e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    162c:	4620      	mov	r0, r4
    162e:	e7c5      	b.n	15bc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    1630:	20000e0c 	.word	0x20000e0c
    1634:	b570      	push	{r4, r5, r6, lr}
    1636:	780a      	ldrb	r2, [r1, #0]
    1638:	7082      	strb	r2, [r0, #2]
    163a:	b33a      	cbz	r2, 168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
    163c:	2a01      	cmp	r2, #1
    163e:	d825      	bhi.n	168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
    1640:	2313      	movs	r3, #19
    1642:	7003      	strb	r3, [r0, #0]
    1644:	2300      	movs	r3, #0
    1646:	e00a      	b.n	165e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
    1648:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    164c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    1650:	78a6      	ldrb	r6, [r4, #2]
    1652:	70ee      	strb	r6, [r5, #3]
    1654:	8864      	ldrh	r4, [r4, #2]
    1656:	0a24      	lsrs	r4, r4, #8
    1658:	1c5b      	adds	r3, r3, #1
    165a:	712c      	strb	r4, [r5, #4]
    165c:	b2db      	uxtb	r3, r3
    165e:	4293      	cmp	r3, r2
    1660:	d3f2      	bcc.n	1648 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
    1662:	2300      	movs	r3, #0
    1664:	e00b      	b.n	167e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xea>
    1666:	bf00      	nop
    1668:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    166c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    1670:	792e      	ldrb	r6, [r5, #4]
    1672:	7166      	strb	r6, [r4, #5]
    1674:	88ad      	ldrh	r5, [r5, #4]
    1676:	0a2d      	lsrs	r5, r5, #8
    1678:	1c5b      	adds	r3, r3, #1
    167a:	71a5      	strb	r5, [r4, #6]
    167c:	b2db      	uxtb	r3, r3
    167e:	4293      	cmp	r3, r2
    1680:	d3f2      	bcc.n	1668 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
    1682:	2101      	movs	r1, #1
    1684:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    1688:	b2c0      	uxtb	r0, r0
    168a:	bd70      	pop	{r4, r5, r6, pc}
    168c:	2000      	movs	r0, #0
    168e:	bd70      	pop	{r4, r5, r6, pc}

00001690 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    1690:	2840      	cmp	r0, #64	; 0x40
    1692:	d203      	bcs.n	169c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    1694:	1e40      	subs	r0, r0, #1
    1696:	b2c1      	uxtb	r1, r0
    1698:	4805      	ldr	r0, [pc, #20]	; (16b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    169a:	e005      	b.n	16a8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    169c:	28ff      	cmp	r0, #255	; 0xff
    169e:	d005      	beq.n	16ac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    16a0:	3840      	subs	r0, #64	; 0x40
    16a2:	b2c1      	uxtb	r1, r0
    16a4:	4802      	ldr	r0, [pc, #8]	; (16b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    16a6:	3008      	adds	r0, #8
    16a8:	f00b bcea 	b.w	d080 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    16ac:	2001      	movs	r0, #1
    16ae:	4770      	bx	lr
    16b0:	2000003c 	.word	0x2000003c

000016b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    16b4:	1e40      	subs	r0, r0, #1
    16b6:	b2c1      	uxtb	r1, r0
    16b8:	4801      	ldr	r0, [pc, #4]	; (16c0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    16ba:	f00b bce1 	b.w	d080 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    16be:	0000      	.short	0x0000
    16c0:	2000004c 	.word	0x2000004c

000016c4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    16c4:	b510      	push	{r4, lr}
    16c6:	4a07      	ldr	r2, [pc, #28]	; (16e4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    16c8:	6801      	ldr	r1, [r0, #0]
    16ca:	4b06      	ldr	r3, [pc, #24]	; (16e4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    16cc:	6191      	str	r1, [r2, #24]
    16ce:	6840      	ldr	r0, [r0, #4]
    16d0:	61d0      	str	r0, [r2, #28]
    16d2:	681c      	ldr	r4, [r3, #0]
    16d4:	3218      	adds	r2, #24
    16d6:	43a1      	bics	r1, r4
    16d8:	6011      	str	r1, [r2, #0]
    16da:	6859      	ldr	r1, [r3, #4]
    16dc:	4388      	bics	r0, r1
    16de:	6050      	str	r0, [r2, #4]
    16e0:	bd10      	pop	{r4, pc}
    16e2:	0000      	.short	0x0000
    16e4:	20000034 	.word	0x20000034

000016e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    16e8:	4a06      	ldr	r2, [pc, #24]	; (1704 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    16ea:	6801      	ldr	r1, [r0, #0]
    16ec:	6091      	str	r1, [r2, #8]
    16ee:	6840      	ldr	r0, [r0, #4]
    16f0:	60d0      	str	r0, [r2, #12]
    16f2:	3208      	adds	r2, #8
    16f4:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
    16f8:	6011      	str	r1, [r2, #0]
    16fa:	4903      	ldr	r1, [pc, #12]	; (1708 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
    16fc:	4308      	orrs	r0, r1
    16fe:	6050      	str	r0, [r2, #4]
    1700:	4770      	bx	lr
    1702:	0000      	.short	0x0000
    1704:	20000034 	.word	0x20000034
    1708:	024007f8 	.word	0x024007f8

0000170c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    170c:	4902      	ldr	r1, [pc, #8]	; (1718 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    170e:	6802      	ldr	r2, [r0, #0]
    1710:	610a      	str	r2, [r1, #16]
    1712:	6840      	ldr	r0, [r0, #4]
    1714:	6148      	str	r0, [r1, #20]
    1716:	4770      	bx	lr
    1718:	20000034 	.word	0x20000034

0000171c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    171c:	4807      	ldr	r0, [pc, #28]	; (173c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    171e:	f04f 31ff 	mov.w	r1, #4294967295
    1722:	2200      	movs	r2, #0
    1724:	6001      	str	r1, [r0, #0]
    1726:	0cc9      	lsrs	r1, r1, #19
    1728:	6041      	str	r1, [r0, #4]
    172a:	f100 0108 	add.w	r1, r0, #8
    172e:	201f      	movs	r0, #31
    1730:	600a      	str	r2, [r1, #0]
    1732:	604a      	str	r2, [r1, #4]
    1734:	3108      	adds	r1, #8
    1736:	e9c1 0200 	strd	r0, r2, [r1]
    173a:	4770      	bx	lr
    173c:	2000003c 	.word	0x2000003c

00001740 <sdc_hci_cmd_cb_reset>:
    1740:	b510      	push	{r4, lr}
    1742:	f7ff ffeb 	bl	171c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    1746:	f00e fe0a 	bl	1035e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    174a:	4604      	mov	r4, r0
    174c:	4802      	ldr	r0, [pc, #8]	; (1758 <sdc_hci_cmd_cb_reset+0x18>)
    174e:	6800      	ldr	r0, [r0, #0]
    1750:	b100      	cbz	r0, 1754 <sdc_hci_cmd_cb_reset+0x14>
    1752:	4780      	blx	r0
    1754:	4620      	mov	r0, r4
    1756:	bd10      	pop	{r4, pc}
    1758:	20000054 	.word	0x20000054

0000175c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    175c:	4901      	ldr	r1, [pc, #4]	; (1764 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    175e:	6008      	str	r0, [r1, #0]
    1760:	4770      	bx	lr
    1762:	0000      	.short	0x0000
    1764:	20000054 	.word	0x20000054

00001768 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    1768:	2102      	movs	r1, #2
    176a:	8001      	strh	r1, [r0, #0]
    176c:	8041      	strh	r1, [r0, #2]
    176e:	2100      	movs	r1, #0
    1770:	7101      	strb	r1, [r0, #4]
    1772:	21d8      	movs	r1, #216	; 0xd8
    1774:	7141      	strb	r1, [r0, #5]
    1776:	f642 510c 	movw	r1, #11532	; 0x2d0c
    177a:	80c1      	strh	r1, [r0, #6]
    177c:	4901      	ldr	r1, [pc, #4]	; (1784 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    177e:	6081      	str	r1, [r0, #8]
    1780:	2000      	movs	r0, #0
    1782:	4770      	bx	lr
    1784:	e2ae362f 	.word	0xe2ae362f

00001788 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    1788:	b510      	push	{r4, lr}
    178a:	2802      	cmp	r0, #2
    178c:	d304      	bcc.n	1798 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    178e:	f240 2103 	movw	r1, #515	; 0x203
    1792:	2017      	movs	r0, #23
    1794:	f7ff fe04 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1798:	4901      	ldr	r1, [pc, #4]	; (17a0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    179a:	5c08      	ldrb	r0, [r1, r0]
    179c:	bd10      	pop	{r4, pc}
    179e:	0000      	.short	0x0000
    17a0:	20000f54 	.word	0x20000f54

000017a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    17a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17a6:	0005      	movs	r5, r0
    17a8:	9500      	str	r5, [sp, #0]
    17aa:	d00d      	beq.n	17c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    17ac:	2600      	movs	r6, #0
    17ae:	7808      	ldrb	r0, [r1, #0]
    17b0:	7849      	ldrb	r1, [r1, #1]
    17b2:	4604      	mov	r4, r0
    17b4:	42a1      	cmp	r1, r4
    17b6:	d900      	bls.n	17ba <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    17b8:	460c      	mov	r4, r1
    17ba:	07aa      	lsls	r2, r5, #30
    17bc:	d006      	beq.n	17cc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    17be:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    17c2:	2017      	movs	r0, #23
    17c4:	f7ff fdec 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17c8:	2601      	movs	r6, #1
    17ca:	e7f0      	b.n	17ae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    17cc:	4f12      	ldr	r7, [pc, #72]	; (1818 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    17ce:	7038      	strb	r0, [r7, #0]
    17d0:	7079      	strb	r1, [r7, #1]
    17d2:	4631      	mov	r1, r6
    17d4:	4668      	mov	r0, sp
    17d6:	f000 f8d3 	bl	1980 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    17da:	2100      	movs	r1, #0
    17dc:	460b      	mov	r3, r1
    17de:	9800      	ldr	r0, [sp, #0]
    17e0:	1cc0      	adds	r0, r0, #3
    17e2:	f020 0003 	bic.w	r0, r0, #3
    17e6:	9000      	str	r0, [sp, #0]
    17e8:	b966      	cbnz	r6, 1804 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    17ea:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    17ee:	60d0      	str	r0, [r2, #12]
    17f0:	2000      	movs	r0, #0
    17f2:	e005      	b.n	1800 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    17f4:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    17f8:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    17fc:	1c40      	adds	r0, r0, #1
    17fe:	b2c0      	uxtb	r0, r0
    1800:	42a0      	cmp	r0, r4
    1802:	d3f7      	bcc.n	17f4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    1804:	9800      	ldr	r0, [sp, #0]
    1806:	1c49      	adds	r1, r1, #1
    1808:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    180c:	b2c9      	uxtb	r1, r1
    180e:	9000      	str	r0, [sp, #0]
    1810:	2902      	cmp	r1, #2
    1812:	d3e4      	bcc.n	17de <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    1814:	1b40      	subs	r0, r0, r5
    1816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1818:	20000f54 	.word	0x20000f54

0000181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    181c:	b570      	push	{r4, r5, r6, lr}
    181e:	4604      	mov	r4, r0
    1820:	7985      	ldrb	r5, [r0, #6]
    1822:	f000 f8e9 	bl	19f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    1826:	4a0c      	ldr	r2, [pc, #48]	; (1858 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    1828:	79e1      	ldrb	r1, [r4, #7]
    182a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    182e:	e00e      	b.n	184e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    1830:	68d3      	ldr	r3, [r2, #12]
    1832:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1836:	b143      	cbz	r3, 184a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    1838:	1c48      	adds	r0, r1, #1
    183a:	71e0      	strb	r0, [r4, #7]
    183c:	80a1      	strh	r1, [r4, #4]
    183e:	68d0      	ldr	r0, [r2, #12]
    1840:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    1844:	6020      	str	r0, [r4, #0]
    1846:	2000      	movs	r0, #0
    1848:	bd70      	pop	{r4, r5, r6, pc}
    184a:	1c49      	adds	r1, r1, #1
    184c:	b2c9      	uxtb	r1, r1
    184e:	4281      	cmp	r1, r0
    1850:	d3ee      	bcc.n	1830 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    1852:	71e1      	strb	r1, [r4, #7]
    1854:	2005      	movs	r0, #5
    1856:	bd70      	pop	{r4, r5, r6, pc}
    1858:	20000f54 	.word	0x20000f54

0000185c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    185c:	b4f0      	push	{r4, r5, r6, r7}
    185e:	b121      	cbz	r1, 186a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    1860:	2901      	cmp	r1, #1
    1862:	d002      	beq.n	186a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    1864:	bcf0      	pop	{r4, r5, r6, r7}
    1866:	2000      	movs	r0, #0
    1868:	4770      	bx	lr
    186a:	4a0f      	ldr	r2, [pc, #60]	; (18a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    186c:	2500      	movs	r5, #0
    186e:	462b      	mov	r3, r5
    1870:	f64f 74ff 	movw	r4, #65535	; 0xffff
    1874:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    1878:	5c57      	ldrb	r7, [r2, r1]
    187a:	e00a      	b.n	1892 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    187c:	195a      	adds	r2, r3, r5
    187e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    1882:	b292      	uxth	r2, r2
    1884:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    1888:	f1bc 0f00 	cmp.w	ip, #0
    188c:	d004      	beq.n	1898 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    188e:	1c5b      	adds	r3, r3, #1
    1890:	b29b      	uxth	r3, r3
    1892:	429f      	cmp	r7, r3
    1894:	d8f2      	bhi.n	187c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    1896:	4622      	mov	r2, r4
    1898:	8002      	strh	r2, [r0, #0]
    189a:	4610      	mov	r0, r2
    189c:	42a2      	cmp	r2, r4
    189e:	d0e1      	beq.n	1864 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    18a0:	bcf0      	pop	{r4, r5, r6, r7}
    18a2:	f000 b835 	b.w	1910 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    18a6:	0000      	.short	0x0000
    18a8:	20000f54 	.word	0x20000f54

000018ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    18ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18b0:	4606      	mov	r6, r0
    18b2:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    18b6:	460c      	mov	r4, r1
    18b8:	f243 0702 	movw	r7, #12290	; 0x3002
    18bc:	38ff      	subs	r0, #255	; 0xff
    18be:	d020      	beq.n	1902 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    18c0:	2c02      	cmp	r4, #2
    18c2:	d302      	bcc.n	18ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    18c4:	2007      	movs	r0, #7
    18c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18ca:	4630      	mov	r0, r6
    18cc:	f000 f848 	bl	1960 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    18d0:	0005      	movs	r5, r0
    18d2:	d016      	beq.n	1902 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    18d4:	480c      	ldr	r0, [pc, #48]	; (1908 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    18d6:	4629      	mov	r1, r5
    18d8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    18dc:	4630      	mov	r0, r6
    18de:	4790      	blx	r2
    18e0:	480a      	ldr	r0, [pc, #40]	; (190c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    18e2:	2100      	movs	r1, #0
    18e4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    18e8:	68f8      	ldr	r0, [r7, #12]
    18ea:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    18ee:	4620      	mov	r0, r4
    18f0:	f000 f878 	bl	19e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    18f4:	4602      	mov	r2, r0
    18f6:	4629      	mov	r1, r5
    18f8:	6878      	ldr	r0, [r7, #4]
    18fa:	f00b ff58 	bl	d7ae <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    18fe:	2000      	movs	r0, #0
    1900:	e7e1      	b.n	18c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    1902:	4638      	mov	r0, r7
    1904:	e7df      	b.n	18c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    1906:	0000      	.short	0x0000
    1908:	00001a10 	.word	0x00001a10
    190c:	20000f54 	.word	0x20000f54
    1910:	b570      	push	{r4, r5, r6, lr}
    1912:	460e      	mov	r6, r1
    1914:	4605      	mov	r5, r0
    1916:	f00b ff84 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    191a:	b158      	cbz	r0, 1934 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    191c:	480f      	ldr	r0, [pc, #60]	; (195c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    191e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    1922:	68e0      	ldr	r0, [r4, #12]
    1924:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    1928:	b138      	cbz	r0, 193a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    192a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    192e:	2017      	movs	r0, #23
    1930:	f7ff fd36 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1934:	f240 1189 	movw	r1, #393	; 0x189
    1938:	e7f9      	b.n	192e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    193a:	6860      	ldr	r0, [r4, #4]
    193c:	2800      	cmp	r0, #0
    193e:	d00b      	beq.n	1958 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    1940:	4630      	mov	r0, r6
    1942:	f000 f84f 	bl	19e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    1946:	4601      	mov	r1, r0
    1948:	6860      	ldr	r0, [r4, #4]
    194a:	f00b fed8 	bl	d6fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    194e:	2800      	cmp	r0, #0
    1950:	d002      	beq.n	1958 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    1952:	68e1      	ldr	r1, [r4, #12]
    1954:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    1958:	bd70      	pop	{r4, r5, r6, pc}
    195a:	0000      	.short	0x0000
    195c:	20000f54 	.word	0x20000f54
    1960:	b570      	push	{r4, r5, r6, lr}
    1962:	460c      	mov	r4, r1
    1964:	4605      	mov	r5, r0
    1966:	f00b ff5c 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    196a:	2800      	cmp	r0, #0
    196c:	d005      	beq.n	197a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    196e:	4803      	ldr	r0, [pc, #12]	; (197c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    1970:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1974:	68c0      	ldr	r0, [r0, #12]
    1976:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    197a:	bd70      	pop	{r4, r5, r6, pc}
    197c:	20000f54 	.word	0x20000f54
    1980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1984:	4e16      	ldr	r6, [pc, #88]	; (19e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    1986:	4688      	mov	r8, r1
    1988:	4605      	mov	r5, r0
    198a:	2400      	movs	r4, #0
    198c:	6828      	ldr	r0, [r5, #0]
    198e:	1cc0      	adds	r0, r0, #3
    1990:	f020 0003 	bic.w	r0, r0, #3
    1994:	6028      	str	r0, [r5, #0]
    1996:	4620      	mov	r0, r4
    1998:	f000 f824 	bl	19e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    199c:	5d31      	ldrb	r1, [r6, r4]
    199e:	4348      	muls	r0, r1
    19a0:	f1b8 0f00 	cmp.w	r8, #0
    19a4:	d001      	beq.n	19aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    19a6:	2200      	movs	r2, #0
    19a8:	e000      	b.n	19ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    19aa:	682a      	ldr	r2, [r5, #0]
    19ac:	4601      	mov	r1, r0
    19ae:	9200      	str	r2, [sp, #0]
    19b0:	b132      	cbz	r2, 19c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    19b2:	2700      	movs	r7, #0
    19b4:	ea4f 000d 	mov.w	r0, sp
    19b8:	f00b fed2 	bl	d760 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    19bc:	b11f      	cbz	r7, 19c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    19be:	e006      	b.n	19ce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    19c0:	2701      	movs	r7, #1
    19c2:	2000      	movs	r0, #0
    19c4:	e7f8      	b.n	19b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    19c6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    19ca:	9a00      	ldr	r2, [sp, #0]
    19cc:	604a      	str	r2, [r1, #4]
    19ce:	6829      	ldr	r1, [r5, #0]
    19d0:	1c64      	adds	r4, r4, #1
    19d2:	4408      	add	r0, r1
    19d4:	b2e4      	uxtb	r4, r4
    19d6:	6028      	str	r0, [r5, #0]
    19d8:	2c02      	cmp	r4, #2
    19da:	d3d7      	bcc.n	198c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    19dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19e0:	20000f54 	.word	0x20000f54
    19e4:	4903      	ldr	r1, [pc, #12]	; (19f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    19e6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    19ea:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    19ee:	1cc0      	adds	r0, r0, #3
    19f0:	4008      	ands	r0, r1
    19f2:	4770      	bx	lr
    19f4:	00001a0c 	.word	0x00001a0c
    19f8:	4903      	ldr	r1, [pc, #12]	; (1a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    19fa:	7808      	ldrb	r0, [r1, #0]
    19fc:	7849      	ldrb	r1, [r1, #1]
    19fe:	4288      	cmp	r0, r1
    1a00:	d200      	bcs.n	1a04 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    1a02:	4608      	mov	r0, r1
    1a04:	4770      	bx	lr
    1a06:	0000      	.short	0x0000
    1a08:	20000f54 	.word	0x20000f54
    1a0c:	011802f8 	.word	0x011802f8
    1a10:	0000f501 	.word	0x0000f501
    1a14:	0000eaab 	.word	0x0000eaab

00001a18 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1a18:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a1c:	4c24      	ldr	r4, [pc, #144]	; (1ab0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1a1e:	4606      	mov	r6, r0
    1a20:	b081      	sub	sp, #4
    1a22:	6820      	ldr	r0, [r4, #0]
    1a24:	469a      	mov	sl, r3
    1a26:	4693      	mov	fp, r2
    1a28:	b158      	cbz	r0, 1a42 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    1a2a:	7a01      	ldrb	r1, [r0, #8]
    1a2c:	42b1      	cmp	r1, r6
    1a2e:	d903      	bls.n	1a38 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1a30:	6840      	ldr	r0, [r0, #4]
    1a32:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1a36:	b140      	cbz	r0, 1a4a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1a38:	f243 0002 	movw	r0, #12290	; 0x3002
    1a3c:	b005      	add	sp, #20
    1a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a42:	21a5      	movs	r1, #165	; 0xa5
    1a44:	2018      	movs	r0, #24
    1a46:	f7ff fcab 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a4a:	4619      	mov	r1, r3
    1a4c:	9802      	ldr	r0, [sp, #8]
    1a4e:	f00b ff0b 	bl	d868 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    1a52:	4680      	mov	r8, r0
    1a54:	4658      	mov	r0, fp
    1a56:	990e      	ldr	r1, [sp, #56]	; 0x38
    1a58:	f00b fefc 	bl	d854 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    1a5c:	4605      	mov	r5, r0
    1a5e:	eb08 0005 	add.w	r0, r8, r5
    1a62:	1d00      	adds	r0, r0, #4
    1a64:	b287      	uxth	r7, r0
    1a66:	6820      	ldr	r0, [r4, #0]
    1a68:	46a1      	mov	r9, r4
    1a6a:	4639      	mov	r1, r7
    1a6c:	6800      	ldr	r0, [r0, #0]
    1a6e:	f00b fe46 	bl	d6fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    1a72:	0004      	movs	r4, r0
    1a74:	d01a      	beq.n	1aac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    1a76:	8067      	strh	r7, [r4, #2]
    1a78:	8025      	strh	r5, [r4, #0]
    1a7a:	4629      	mov	r1, r5
    1a7c:	1d20      	adds	r0, r4, #4
    1a7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1a80:	4607      	mov	r7, r0
    1a82:	465a      	mov	r2, fp
    1a84:	2309      	movs	r3, #9
    1a86:	9500      	str	r5, [sp, #0]
    1a88:	f00b fdb3 	bl	d5f2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1a8c:	8820      	ldrh	r0, [r4, #0]
    1a8e:	4641      	mov	r1, r8
    1a90:	4438      	add	r0, r7
    1a92:	230a      	movs	r3, #10
    1a94:	9a02      	ldr	r2, [sp, #8]
    1a96:	f8cd a000 	str.w	sl, [sp]
    1a9a:	f00b fdaa 	bl	d5f2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1a9e:	f8d9 0000 	ldr.w	r0, [r9]
    1aa2:	6840      	ldr	r0, [r0, #4]
    1aa4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1aa8:	2000      	movs	r0, #0
    1aaa:	e7c7      	b.n	1a3c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1aac:	2004      	movs	r0, #4
    1aae:	e7c5      	b.n	1a3c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1ab0:	20000058 	.word	0x20000058

00001ab4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	4c14      	ldr	r4, [pc, #80]	; (1b08 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1ab8:	6823      	ldr	r3, [r4, #0]
    1aba:	b18b      	cbz	r3, 1ae0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1abc:	7a19      	ldrb	r1, [r3, #8]
    1abe:	4281      	cmp	r1, r0
    1ac0:	d912      	bls.n	1ae8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1ac2:	685a      	ldr	r2, [r3, #4]
    1ac4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1ac8:	b171      	cbz	r1, 1ae8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1aca:	2500      	movs	r5, #0
    1acc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1ad0:	884a      	ldrh	r2, [r1, #2]
    1ad2:	6818      	ldr	r0, [r3, #0]
    1ad4:	f00b fe6b 	bl	d7ae <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1ad8:	6821      	ldr	r1, [r4, #0]
    1ada:	2000      	movs	r0, #0
    1adc:	7a0a      	ldrb	r2, [r1, #8]
    1ade:	e00c      	b.n	1afa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1ae0:	21c6      	movs	r1, #198	; 0xc6
    1ae2:	2018      	movs	r0, #24
    1ae4:	f7ff fc5c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ae8:	f243 0002 	movw	r0, #12290	; 0x3002
    1aec:	bd70      	pop	{r4, r5, r6, pc}
    1aee:	684b      	ldr	r3, [r1, #4]
    1af0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1af4:	b933      	cbnz	r3, 1b04 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1af6:	1c40      	adds	r0, r0, #1
    1af8:	b2c0      	uxtb	r0, r0
    1afa:	4282      	cmp	r2, r0
    1afc:	d8f7      	bhi.n	1aee <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1afe:	6808      	ldr	r0, [r1, #0]
    1b00:	f00b fe4a 	bl	d798 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1b04:	2000      	movs	r0, #0
    1b06:	bd70      	pop	{r4, r5, r6, pc}
    1b08:	20000058 	.word	0x20000058

00001b0c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b10:	460d      	mov	r5, r1
    1b12:	0004      	movs	r4, r0
    1b14:	4690      	mov	r8, r2
    1b16:	f04f 0600 	mov.w	r6, #0
    1b1a:	d006      	beq.n	1b2a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1b1c:	2700      	movs	r7, #0
    1b1e:	07a0      	lsls	r0, r4, #30
    1b20:	d005      	beq.n	1b2e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1b22:	2186      	movs	r1, #134	; 0x86
    1b24:	2018      	movs	r0, #24
    1b26:	f7ff fc3b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b2a:	2701      	movs	r7, #1
    1b2c:	e7f7      	b.n	1b1e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1b2e:	b1cd      	cbz	r5, 1b64 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1b30:	4611      	mov	r1, r2
    1b32:	2000      	movs	r0, #0
    1b34:	f00b fe14 	bl	d760 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1b38:	300c      	adds	r0, #12
    1b3a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    1b3e:	b98f      	cbnz	r7, 1b64 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1b40:	4f0a      	ldr	r7, [pc, #40]	; (1b6c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    1b42:	f104 000c 	add.w	r0, r4, #12
    1b46:	00aa      	lsls	r2, r5, #2
    1b48:	603c      	str	r4, [r7, #0]
    1b4a:	7225      	strb	r5, [r4, #8]
    1b4c:	6060      	str	r0, [r4, #4]
    1b4e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1b52:	6020      	str	r0, [r4, #0]
    1b54:	2100      	movs	r1, #0
    1b56:	6860      	ldr	r0, [r4, #4]
    1b58:	f00f f9a4 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1b5c:	4641      	mov	r1, r8
    1b5e:	6838      	ldr	r0, [r7, #0]
    1b60:	f00b fdfe 	bl	d760 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1b64:	4630      	mov	r0, r6
    1b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b6a:	0000      	.short	0x0000
    1b6c:	20000058 	.word	0x20000058

00001b70 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    1b70:	b570      	push	{r4, r5, r6, lr}
    1b72:	4d08      	ldr	r5, [pc, #32]	; (1b94 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1b74:	6828      	ldr	r0, [r5, #0]
    1b76:	2800      	cmp	r0, #0
    1b78:	d00a      	beq.n	1b90 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1b7a:	2400      	movs	r4, #0
    1b7c:	e004      	b.n	1b88 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    1b7e:	4620      	mov	r0, r4
    1b80:	f7ff ff98 	bl	1ab4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1b84:	1c64      	adds	r4, r4, #1
    1b86:	b2e4      	uxtb	r4, r4
    1b88:	6828      	ldr	r0, [r5, #0]
    1b8a:	7a00      	ldrb	r0, [r0, #8]
    1b8c:	42a0      	cmp	r0, r4
    1b8e:	d8f6      	bhi.n	1b7e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    1b90:	bd70      	pop	{r4, r5, r6, pc}
    1b92:	0000      	.short	0x0000
    1b94:	20000058 	.word	0x20000058

00001b98 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1b98:	4909      	ldr	r1, [pc, #36]	; (1bc0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1b9a:	b510      	push	{r4, lr}
    1b9c:	4602      	mov	r2, r0
    1b9e:	6809      	ldr	r1, [r1, #0]
    1ba0:	2000      	movs	r0, #0
    1ba2:	b149      	cbz	r1, 1bb8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1ba4:	7a0b      	ldrb	r3, [r1, #8]
    1ba6:	4293      	cmp	r3, r2
    1ba8:	d905      	bls.n	1bb6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1baa:	6849      	ldr	r1, [r1, #4]
    1bac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1bb0:	2900      	cmp	r1, #0
    1bb2:	d000      	beq.n	1bb6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1bb4:	1d08      	adds	r0, r1, #4
    1bb6:	bd10      	pop	{r4, pc}
    1bb8:	21ec      	movs	r1, #236	; 0xec
    1bba:	2018      	movs	r0, #24
    1bbc:	f7ff fbf0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1bc0:	20000058 	.word	0x20000058

00001bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1bc4:	490a      	ldr	r1, [pc, #40]	; (1bf0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1bc6:	b510      	push	{r4, lr}
    1bc8:	4602      	mov	r2, r0
    1bca:	6809      	ldr	r1, [r1, #0]
    1bcc:	2000      	movs	r0, #0
    1bce:	b159      	cbz	r1, 1be8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1bd0:	7a0b      	ldrb	r3, [r1, #8]
    1bd2:	4293      	cmp	r3, r2
    1bd4:	d907      	bls.n	1be6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1bd6:	6849      	ldr	r1, [r1, #4]
    1bd8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1bdc:	2900      	cmp	r1, #0
    1bde:	d002      	beq.n	1be6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1be0:	f831 0b04 	ldrh.w	r0, [r1], #4
    1be4:	4408      	add	r0, r1
    1be6:	bd10      	pop	{r4, pc}
    1be8:	21fa      	movs	r1, #250	; 0xfa
    1bea:	2018      	movs	r0, #24
    1bec:	f7ff fbd8 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1bf0:	20000058 	.word	0x20000058
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	4b1e      	ldr	r3, [pc, #120]	; (1c70 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1bf8:	6845      	ldr	r5, [r0, #4]
    1bfa:	4604      	mov	r4, r0
    1bfc:	2200      	movs	r2, #0
    1bfe:	b1a1      	cbz	r1, 1c2a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    1c00:	2001      	movs	r0, #1
    1c02:	7060      	strb	r0, [r4, #1]
    1c04:	8858      	ldrh	r0, [r3, #2]
    1c06:	0881      	lsrs	r1, r0, #2
    1c08:	f05f 0000 	movs.w	r0, #0
    1c0c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1c10:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1c14:	831a      	strh	r2, [r3, #24]
    1c16:	8419      	strh	r1, [r3, #32]
    1c18:	fb00 5301 	mla	r3, r0, r1, r5
    1c1c:	6073      	str	r3, [r6, #4]
    1c1e:	1823      	adds	r3, r4, r0
    1c20:	1c40      	adds	r0, r0, #1
    1c22:	751a      	strb	r2, [r3, #20]
    1c24:	2804      	cmp	r0, #4
    1c26:	d3f1      	bcc.n	1c0c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1c28:	bd70      	pop	{r4, r5, r6, pc}
    1c2a:	7062      	strb	r2, [r4, #1]
    1c2c:	f05f 0000 	movs.w	r0, #0
    1c30:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    1c34:	830a      	strh	r2, [r1, #24]
    1c36:	840a      	strh	r2, [r1, #32]
    1c38:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1c3c:	604a      	str	r2, [r1, #4]
    1c3e:	1821      	adds	r1, r4, r0
    1c40:	1c40      	adds	r0, r0, #1
    1c42:	750a      	strb	r2, [r1, #20]
    1c44:	2804      	cmp	r0, #4
    1c46:	d3f3      	bcc.n	1c30 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1c48:	8858      	ldrh	r0, [r3, #2]
    1c4a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    1c4e:	d201      	bcs.n	1c54 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    1c50:	0846      	lsrs	r6, r0, #1
    1c52:	e000      	b.n	1c56 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    1c54:	26ff      	movs	r6, #255	; 0xff
    1c56:	f00b fe7b 	bl	d950 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1c5a:	6065      	str	r5, [r4, #4]
    1c5c:	8420      	strh	r0, [r4, #32]
    1c5e:	1829      	adds	r1, r5, r0
    1c60:	60a1      	str	r1, [r4, #8]
    1c62:	8466      	strh	r6, [r4, #34]	; 0x22
    1c64:	60e5      	str	r5, [r4, #12]
    1c66:	84a0      	strh	r0, [r4, #36]	; 0x24
    1c68:	6121      	str	r1, [r4, #16]
    1c6a:	84e6      	strh	r6, [r4, #38]	; 0x26
    1c6c:	bd70      	pop	{r4, r5, r6, pc}
    1c6e:	0000      	.short	0x0000
    1c70:	2000005c 	.word	0x2000005c

00001c74 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c78:	b158      	cbz	r0, 1c92 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1c7a:	2500      	movs	r5, #0
    1c7c:	4411      	add	r1, r2
    1c7e:	4e24      	ldr	r6, [pc, #144]	; (1d10 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    1c80:	b2cc      	uxtb	r4, r1
    1c82:	2700      	movs	r7, #0
    1c84:	7034      	strb	r4, [r6, #0]
    1c86:	0781      	lsls	r1, r0, #30
    1c88:	d005      	beq.n	1c96 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1c8a:	214e      	movs	r1, #78	; 0x4e
    1c8c:	2009      	movs	r0, #9
    1c8e:	f7ff fb87 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c92:	2501      	movs	r5, #1
    1c94:	e7f2      	b.n	1c7c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1c96:	2b1f      	cmp	r3, #31
    1c98:	d804      	bhi.n	1ca4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1c9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1c9e:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    1ca2:	e009      	b.n	1cb8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1ca4:	0059      	lsls	r1, r3, #1
    1ca6:	2bff      	cmp	r3, #255	; 0xff
    1ca8:	d90c      	bls.n	1cc4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1caa:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1cae:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1cb2:	d200      	bcs.n	1cb6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1cb4:	4611      	mov	r1, r2
    1cb6:	b289      	uxth	r1, r1
    1cb8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1cbc:	1cc9      	adds	r1, r1, #3
    1cbe:	4011      	ands	r1, r2
    1cc0:	b135      	cbz	r5, 1cd0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    1cc2:	e007      	b.n	1cd4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1cc4:	227c      	movs	r2, #124	; 0x7c
    1cc6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1cca:	d3f4      	bcc.n	1cb6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1ccc:	217c      	movs	r1, #124	; 0x7c
    1cce:	e7f2      	b.n	1cb6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1cd0:	6070      	str	r0, [r6, #4]
    1cd2:	8071      	strh	r1, [r6, #2]
    1cd4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1cd8:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1cdc:	2200      	movs	r2, #0
    1cde:	6876      	ldr	r6, [r6, #4]
    1ce0:	f04f 0c01 	mov.w	ip, #1
    1ce4:	e00d      	b.n	1d02 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1ce6:	b94d      	cbnz	r5, 1cfc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1ce8:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1cec:	eb00 0e03 	add.w	lr, r0, r3
    1cf0:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1cf4:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1cf8:	f8c7 e004 	str.w	lr, [r7, #4]
    1cfc:	1c52      	adds	r2, r2, #1
    1cfe:	440b      	add	r3, r1
    1d00:	b2d2      	uxtb	r2, r2
    1d02:	42a2      	cmp	r2, r4
    1d04:	d3ef      	bcc.n	1ce6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1d06:	1ddb      	adds	r3, r3, #7
    1d08:	f023 0007 	bic.w	r0, r3, #7
    1d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d10:	2000005c 	.word	0x2000005c

00001d14 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1d14:	b570      	push	{r4, r5, r6, lr}
    1d16:	4a10      	ldr	r2, [pc, #64]	; (1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1d18:	2000      	movs	r0, #0
    1d1a:	6851      	ldr	r1, [r2, #4]
    1d1c:	7812      	ldrb	r2, [r2, #0]
    1d1e:	e014      	b.n	1d4a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1d20:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1d24:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1d28:	b16b      	cbz	r3, 1d46 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1d2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1d2e:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    1d32:	d00c      	beq.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d34:	2500      	movs	r5, #0
    1d36:	70a5      	strb	r5, [r4, #2]
    1d38:	2101      	movs	r1, #1
    1d3a:	4620      	mov	r0, r4
    1d3c:	f7ff ff5a 	bl	1bf4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    1d40:	7025      	strb	r5, [r4, #0]
    1d42:	4620      	mov	r0, r4
    1d44:	bd70      	pop	{r4, r5, r6, pc}
    1d46:	1c40      	adds	r0, r0, #1
    1d48:	b2c0      	uxtb	r0, r0
    1d4a:	4290      	cmp	r0, r2
    1d4c:	d3e8      	bcc.n	1d20 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    1d4e:	21a9      	movs	r1, #169	; 0xa9
    1d50:	2009      	movs	r0, #9
    1d52:	f7ff fb25 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d56:	0000      	.short	0x0000
    1d58:	2000005c 	.word	0x2000005c

00001d5c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1d5c:	4804      	ldr	r0, [pc, #16]	; (1d70 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    1d5e:	b510      	push	{r4, lr}
    1d60:	8840      	ldrh	r0, [r0, #2]
    1d62:	0884      	lsrs	r4, r0, #2
    1d64:	f00b fdf4 	bl	d950 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1d68:	4284      	cmp	r4, r0
    1d6a:	d300      	bcc.n	1d6e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1d6c:	4620      	mov	r0, r4
    1d6e:	bd10      	pop	{r4, pc}
    1d70:	2000005c 	.word	0x2000005c
    1d74:	b530      	push	{r4, r5, lr}
    1d76:	490d      	ldr	r1, [pc, #52]	; (1dac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1d78:	2001      	movs	r0, #1
    1d7a:	6048      	str	r0, [r1, #4]
    1d7c:	1e82      	subs	r2, r0, #2
    1d7e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1d82:	490b      	ldr	r1, [pc, #44]	; (1db0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1d84:	6088      	str	r0, [r1, #8]
    1d86:	2300      	movs	r3, #0
    1d88:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1d8c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1d90:	4c08      	ldr	r4, [pc, #32]	; (1db4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    1d92:	6023      	str	r3, [r4, #0]
    1d94:	1d25      	adds	r5, r4, #4
    1d96:	6028      	str	r0, [r5, #0]
    1d98:	6088      	str	r0, [r1, #8]
    1d9a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1d9e:	6023      	str	r3, [r4, #0]
    1da0:	6028      	str	r0, [r5, #0]
    1da2:	4906      	ldr	r1, [pc, #24]	; (1dbc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1da4:	4804      	ldr	r0, [pc, #16]	; (1db8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1da6:	6008      	str	r0, [r1, #0]
    1da8:	bd30      	pop	{r4, r5, pc}
    1daa:	0000      	.short	0x0000
    1dac:	4000e000 	.word	0x4000e000
    1db0:	4000f000 	.word	0x4000f000
    1db4:	4000f500 	.word	0x4000f500
    1db8:	3ff60000 	.word	0x3ff60000
    1dbc:	4001f508 	.word	0x4001f508

00001dc0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1dc0:	b510      	push	{r4, lr}
    1dc2:	f7ff ffd7 	bl	1d74 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1dc6:	f00b fe9a 	bl	dafe <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1dca:	4903      	ldr	r1, [pc, #12]	; (1dd8 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1dcc:	4801      	ldr	r0, [pc, #4]	; (1dd4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1dce:	6008      	str	r0, [r1, #0]
    1dd0:	bd10      	pop	{r4, pc}
    1dd2:	0000      	.short	0x0000
    1dd4:	3ff60000 	.word	0x3ff60000
    1dd8:	4001f508 	.word	0x4001f508

00001ddc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1ddc:	b510      	push	{r4, lr}
    1dde:	f7ff ffc9 	bl	1d74 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1de2:	f00b fe8c 	bl	dafe <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1de6:	f000 f887 	bl	1ef8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1dea:	4905      	ldr	r1, [pc, #20]	; (1e00 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1dec:	4803      	ldr	r0, [pc, #12]	; (1dfc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1dee:	6008      	str	r0, [r1, #0]
    1df0:	f000 f8b8 	bl	1f64 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1df8:	f000 b8dc 	b.w	1fb4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1dfc:	3ff60000 	.word	0x3ff60000
    1e00:	4001f508 	.word	0x4001f508
    1e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e08:	4682      	mov	sl, r0
    1e0a:	4838      	ldr	r0, [pc, #224]	; (1eec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1e0c:	f00e feee 	bl	10bec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1e10:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1eec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    1e14:	b128      	cbz	r0, 1e22 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1e16:	2601      	movs	r6, #1
    1e18:	f10b 0001 	add.w	r0, fp, #1
    1e1c:	21ff      	movs	r1, #255	; 0xff
    1e1e:	7001      	strb	r1, [r0, #0]
    1e20:	e000      	b.n	1e24 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    1e22:	2600      	movs	r6, #0
    1e24:	f44f 7580 	mov.w	r5, #256	; 0x100
    1e28:	4c31      	ldr	r4, [pc, #196]	; (1ef0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    1e2a:	f04f 0800 	mov.w	r8, #0
    1e2e:	1d2f      	adds	r7, r5, #4
    1e30:	2101      	movs	r1, #1
    1e32:	6061      	str	r1, [r4, #4]
    1e34:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1e38:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1e3c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1e40:	6021      	str	r1, [r4, #0]
    1e42:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1ef4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    1e46:	e01c      	b.n	1e82 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1e48:	f8d9 0000 	ldr.w	r0, [r9]
    1e4c:	06c0      	lsls	r0, r0, #27
    1e4e:	d518      	bpl.n	1e82 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1e50:	200e      	movs	r0, #14
    1e52:	f00b fe63 	bl	db1c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1e56:	f3ef 8010 	mrs	r0, PRIMASK
    1e5a:	9000      	str	r0, [sp, #0]
    1e5c:	b672      	cpsid	i
    1e5e:	2103      	movs	r1, #3
    1e60:	4620      	mov	r0, r4
    1e62:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1e66:	4629      	mov	r1, r5
    1e68:	f00b fe65 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1e6c:	b930      	cbnz	r0, 1e7c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1e6e:	4639      	mov	r1, r7
    1e70:	4620      	mov	r0, r4
    1e72:	f00b fe60 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1e76:	b908      	cbnz	r0, 1e7c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1e78:	f00e ff4f 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1e7c:	9800      	ldr	r0, [sp, #0]
    1e7e:	b900      	cbnz	r0, 1e82 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1e80:	b662      	cpsie	i
    1e82:	4629      	mov	r1, r5
    1e84:	4620      	mov	r0, r4
    1e86:	f00b fe56 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1e8a:	b928      	cbnz	r0, 1e98 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1e8c:	4639      	mov	r1, r7
    1e8e:	4620      	mov	r0, r4
    1e90:	f00b fe51 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1e94:	2800      	cmp	r0, #0
    1e96:	d0d7      	beq.n	1e48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1e98:	4639      	mov	r1, r7
    1e9a:	4620      	mov	r0, r4
    1e9c:	f00b fe4b 	bl	db36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1ea0:	2800      	cmp	r0, #0
    1ea2:	d1c5      	bne.n	1e30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1ea4:	bb06      	cbnz	r6, 1ee8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1ea6:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1eaa:	f88d 1000 	strb.w	r1, [sp]
    1eae:	9900      	ldr	r1, [sp, #0]
    1eb0:	9100      	str	r1, [sp, #0]
    1eb2:	f89d 1000 	ldrb.w	r1, [sp]
    1eb6:	b109      	cbz	r1, 1ebc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1eb8:	2501      	movs	r5, #1
    1eba:	e000      	b.n	1ebe <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1ebc:	2500      	movs	r5, #0
    1ebe:	f10b 0001 	add.w	r0, fp, #1
    1ec2:	f880 8000 	strb.w	r8, [r0]
    1ec6:	2003      	movs	r0, #3
    1ec8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1ecc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1ed0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1ed4:	200e      	movs	r0, #14
    1ed6:	f00b fe21 	bl	db1c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1eda:	4804      	ldr	r0, [pc, #16]	; (1eec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1edc:	f00e fe9d 	bl	10c1a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1ee0:	b115      	cbz	r5, 1ee8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1ee2:	2011      	movs	r0, #17
    1ee4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ee8:	2000      	movs	r0, #0
    1eea:	e7fb      	b.n	1ee4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1eec:	2000035c 	.word	0x2000035c
    1ef0:	4000e000 	.word	0x4000e000
    1ef4:	e000ed10 	.word	0xe000ed10

00001ef8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1ef8:	b510      	push	{r4, lr}
    1efa:	4806      	ldr	r0, [pc, #24]	; (1f14 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1efc:	f00e fe89 	bl	10c12 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1f00:	b118      	cbz	r0, 1f0a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1f02:	2127      	movs	r1, #39	; 0x27
    1f04:	201d      	movs	r0, #29
    1f06:	f7ff fa4b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f0a:	4802      	ldr	r0, [pc, #8]	; (1f14 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1f0c:	2100      	movs	r1, #0
    1f0e:	7041      	strb	r1, [r0, #1]
    1f10:	bd10      	pop	{r4, pc}
    1f12:	0000      	.short	0x0000
    1f14:	2000035c 	.word	0x2000035c

00001f18 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	4911      	ldr	r1, [pc, #68]	; (1f60 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1f1c:	680a      	ldr	r2, [r1, #0]
    1f1e:	b1ea      	cbz	r2, 1f5c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1f20:	2300      	movs	r3, #0
    1f22:	461d      	mov	r5, r3
    1f24:	2401      	movs	r4, #1
    1f26:	684a      	ldr	r2, [r1, #4]
    1f28:	1c52      	adds	r2, r2, #1
    1f2a:	604a      	str	r2, [r1, #4]
    1f2c:	2a09      	cmp	r2, #9
    1f2e:	d300      	bcc.n	1f32 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1f30:	604d      	str	r5, [r1, #4]
    1f32:	790e      	ldrb	r6, [r1, #4]
    1f34:	fa04 f206 	lsl.w	r2, r4, r6
    1f38:	680e      	ldr	r6, [r1, #0]
    1f3a:	4216      	tst	r6, r2
    1f3c:	d00b      	beq.n	1f56 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1f3e:	f3ef 8310 	mrs	r3, PRIMASK
    1f42:	b672      	cpsid	i
    1f44:	680c      	ldr	r4, [r1, #0]
    1f46:	4394      	bics	r4, r2
    1f48:	600c      	str	r4, [r1, #0]
    1f4a:	b903      	cbnz	r3, 1f4e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1f4c:	b662      	cpsie	i
    1f4e:	6849      	ldr	r1, [r1, #4]
    1f50:	6001      	str	r1, [r0, #0]
    1f52:	2000      	movs	r0, #0
    1f54:	bd70      	pop	{r4, r5, r6, pc}
    1f56:	1c5b      	adds	r3, r3, #1
    1f58:	2b09      	cmp	r3, #9
    1f5a:	d3e4      	bcc.n	1f26 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1f5c:	2005      	movs	r0, #5
    1f5e:	bd70      	pop	{r4, r5, r6, pc}
    1f60:	20000064 	.word	0x20000064

00001f64 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1f64:	4802      	ldr	r0, [pc, #8]	; (1f70 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1f66:	2100      	movs	r1, #0
    1f68:	6001      	str	r1, [r0, #0]
    1f6a:	6041      	str	r1, [r0, #4]
    1f6c:	4770      	bx	lr
    1f6e:	0000      	.short	0x0000
    1f70:	20000064 	.word	0x20000064

00001f74 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1f74:	b510      	push	{r4, lr}
    1f76:	4c04      	ldr	r4, [pc, #16]	; (1f88 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1f78:	7820      	ldrb	r0, [r4, #0]
    1f7a:	28ff      	cmp	r0, #255	; 0xff
    1f7c:	d003      	beq.n	1f86 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    1f7e:	f00a fb7d 	bl	c67c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1f82:	20ff      	movs	r0, #255	; 0xff
    1f84:	7020      	strb	r0, [r4, #0]
    1f86:	bd10      	pop	{r4, pc}
    1f88:	20000000 	.word	0x20000000

00001f8c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1f8c:	b510      	push	{r4, lr}
    1f8e:	4c08      	ldr	r4, [pc, #32]	; (1fb0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1f90:	7861      	ldrb	r1, [r4, #1]
    1f92:	b109      	cbz	r1, 1f98 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1f94:	200f      	movs	r0, #15
    1f96:	bd10      	pop	{r4, pc}
    1f98:	f00a fb36 	bl	c608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1f9c:	7020      	strb	r0, [r4, #0]
    1f9e:	28ff      	cmp	r0, #255	; 0xff
    1fa0:	d001      	beq.n	1fa6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    1fa2:	2000      	movs	r0, #0
    1fa4:	bd10      	pop	{r4, pc}
    1fa6:	2173      	movs	r1, #115	; 0x73
    1fa8:	201f      	movs	r0, #31
    1faa:	f7ff f9f9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1fae:	0000      	.short	0x0000
    1fb0:	20000000 	.word	0x20000000

00001fb4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1fb4:	4901      	ldr	r1, [pc, #4]	; (1fbc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1fb6:	2000      	movs	r0, #0
    1fb8:	7048      	strb	r0, [r1, #1]
    1fba:	4770      	bx	lr
    1fbc:	20000000 	.word	0x20000000

00001fc0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1fc0:	4806      	ldr	r0, [pc, #24]	; (1fdc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    1fc2:	4a07      	ldr	r2, [pc, #28]	; (1fe0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1fc4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1fc6:	8852      	ldrh	r2, [r2, #2]
    1fc8:	4291      	cmp	r1, r2
    1fca:	d104      	bne.n	1fd6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1fcc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1fd0:	b108      	cbz	r0, 1fd6 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1fd2:	2000      	movs	r0, #0
    1fd4:	4770      	bx	lr
    1fd6:	2001      	movs	r0, #1
    1fd8:	4770      	bx	lr
    1fda:	0000      	.short	0x0000
    1fdc:	20001478 	.word	0x20001478
    1fe0:	20000348 	.word	0x20000348

00001fe4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1fe4:	4901      	ldr	r1, [pc, #4]	; (1fec <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1fe6:	8048      	strh	r0, [r1, #2]
    1fe8:	4770      	bx	lr
    1fea:	0000      	.short	0x0000
    1fec:	20000348 	.word	0x20000348

00001ff0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1ff0:	4808      	ldr	r0, [pc, #32]	; (2014 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1ff2:	4a09      	ldr	r2, [pc, #36]	; (2018 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1ff4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1ff6:	8852      	ldrh	r2, [r2, #2]
    1ff8:	4291      	cmp	r1, r2
    1ffa:	d109      	bne.n	2010 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1ffc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2000:	8481      	strh	r1, [r0, #36]	; 0x24
    2002:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    2006:	b119      	cbz	r1, 2010 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    2008:	2100      	movs	r1, #0
    200a:	7001      	strb	r1, [r0, #0]
    200c:	2001      	movs	r0, #1
    200e:	4770      	bx	lr
    2010:	2000      	movs	r0, #0
    2012:	4770      	bx	lr
    2014:	20001478 	.word	0x20001478
    2018:	20000348 	.word	0x20000348

0000201c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    201c:	4807      	ldr	r0, [pc, #28]	; (203c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    201e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    2022:	2901      	cmp	r1, #1
    2024:	d007      	beq.n	2036 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    2026:	2101      	movs	r1, #1
    2028:	7001      	strb	r1, [r0, #0]
    202a:	4805      	ldr	r0, [pc, #20]	; (2040 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    202c:	4903      	ldr	r1, [pc, #12]	; (203c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    202e:	8800      	ldrh	r0, [r0, #0]
    2030:	8488      	strh	r0, [r1, #36]	; 0x24
    2032:	2001      	movs	r0, #1
    2034:	4770      	bx	lr
    2036:	2000      	movs	r0, #0
    2038:	4770      	bx	lr
    203a:	0000      	.short	0x0000
    203c:	20001478 	.word	0x20001478
    2040:	20000348 	.word	0x20000348

00002044 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    2044:	4906      	ldr	r1, [pc, #24]	; (2060 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    2046:	4b07      	ldr	r3, [pc, #28]	; (2064 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    2048:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    204a:	885b      	ldrh	r3, [r3, #2]
    204c:	429a      	cmp	r2, r3
    204e:	d105      	bne.n	205c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    2050:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    2054:	b112      	cbz	r2, 205c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    2056:	6001      	str	r1, [r0, #0]
    2058:	2001      	movs	r0, #1
    205a:	4770      	bx	lr
    205c:	2000      	movs	r0, #0
    205e:	4770      	bx	lr
    2060:	20001478 	.word	0x20001478
    2064:	20000348 	.word	0x20000348

00002068 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    2068:	4909      	ldr	r1, [pc, #36]	; (2090 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    206a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    206c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    2070:	3bff      	subs	r3, #255	; 0xff
    2072:	d002      	beq.n	207a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    2074:	2100      	movs	r1, #0
    2076:	6001      	str	r1, [r0, #0]
    2078:	e007      	b.n	208a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    207a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    207e:	4904      	ldr	r1, [pc, #16]	; (2090 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    2080:	2a01      	cmp	r2, #1
    2082:	d002      	beq.n	208a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    2084:	6001      	str	r1, [r0, #0]
    2086:	2001      	movs	r0, #1
    2088:	4770      	bx	lr
    208a:	2000      	movs	r0, #0
    208c:	4770      	bx	lr
    208e:	0000      	.short	0x0000
    2090:	20001478 	.word	0x20001478

00002094 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    2094:	4901      	ldr	r1, [pc, #4]	; (209c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    2096:	8008      	strh	r0, [r1, #0]
    2098:	4770      	bx	lr
    209a:	0000      	.short	0x0000
    209c:	20000348 	.word	0x20000348

000020a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    20a0:	4905      	ldr	r1, [pc, #20]	; (20b8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    20a2:	2000      	movs	r0, #0
    20a4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    20a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    20ac:	8488      	strh	r0, [r1, #36]	; 0x24
    20ae:	4903      	ldr	r1, [pc, #12]	; (20bc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    20b0:	8008      	strh	r0, [r1, #0]
    20b2:	8048      	strh	r0, [r1, #2]
    20b4:	4770      	bx	lr
    20b6:	0000      	.short	0x0000
    20b8:	20001478 	.word	0x20001478
    20bc:	20000348 	.word	0x20000348
    20c0:	4905      	ldr	r1, [pc, #20]	; (20d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    20c2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    20c4:	4282      	cmp	r2, r0
    20c6:	d105      	bne.n	20d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    20c8:	2000      	movs	r0, #0
    20ca:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    20ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
    20d2:	8488      	strh	r0, [r1, #36]	; 0x24
    20d4:	4770      	bx	lr
    20d6:	0000      	.short	0x0000
    20d8:	20001478 	.word	0x20001478

000020dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    20dc:	4a0a      	ldr	r2, [pc, #40]	; (2108 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    20de:	b110      	cbz	r0, 20e6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    20e0:	2801      	cmp	r0, #1
    20e2:	d007      	beq.n	20f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    20e4:	e00e      	b.n	2104 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    20e6:	7850      	ldrb	r0, [r2, #1]
    20e8:	b160      	cbz	r0, 2104 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    20ea:	f8d2 0002 	ldr.w	r0, [r2, #2]
    20ee:	6008      	str	r0, [r1, #0]
    20f0:	88d0      	ldrh	r0, [r2, #6]
    20f2:	e004      	b.n	20fe <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    20f4:	7810      	ldrb	r0, [r2, #0]
    20f6:	b128      	cbz	r0, 2104 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    20f8:	6890      	ldr	r0, [r2, #8]
    20fa:	6008      	str	r0, [r1, #0]
    20fc:	8990      	ldrh	r0, [r2, #12]
    20fe:	8088      	strh	r0, [r1, #4]
    2100:	2001      	movs	r0, #1
    2102:	4770      	bx	lr
    2104:	2000      	movs	r0, #0
    2106:	4770      	bx	lr
    2108:	2000035e 	.word	0x2000035e

0000210c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    210c:	4a08      	ldr	r2, [pc, #32]	; (2130 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    210e:	2301      	movs	r3, #1
    2110:	b138      	cbz	r0, 2122 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    2112:	2801      	cmp	r0, #1
    2114:	d104      	bne.n	2120 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    2116:	7013      	strb	r3, [r2, #0]
    2118:	6808      	ldr	r0, [r1, #0]
    211a:	6090      	str	r0, [r2, #8]
    211c:	8888      	ldrh	r0, [r1, #4]
    211e:	8190      	strh	r0, [r2, #12]
    2120:	4770      	bx	lr
    2122:	7053      	strb	r3, [r2, #1]
    2124:	6808      	ldr	r0, [r1, #0]
    2126:	f8c2 0002 	str.w	r0, [r2, #2]
    212a:	8888      	ldrh	r0, [r1, #4]
    212c:	80d0      	strh	r0, [r2, #6]
    212e:	4770      	bx	lr
    2130:	2000035e 	.word	0x2000035e

00002134 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    2134:	4906      	ldr	r1, [pc, #24]	; (2150 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    2136:	b110      	cbz	r0, 213e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    2138:	2801      	cmp	r0, #1
    213a:	d002      	beq.n	2142 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    213c:	e005      	b.n	214a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    213e:	7848      	ldrb	r0, [r1, #1]
    2140:	e000      	b.n	2144 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    2142:	7808      	ldrb	r0, [r1, #0]
    2144:	b108      	cbz	r0, 214a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    2146:	2001      	movs	r0, #1
    2148:	4770      	bx	lr
    214a:	2000      	movs	r0, #0
    214c:	4770      	bx	lr
    214e:	0000      	.short	0x0000
    2150:	2000035e 	.word	0x2000035e

00002154 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    2154:	4901      	ldr	r1, [pc, #4]	; (215c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    2156:	7708      	strb	r0, [r1, #28]
    2158:	4770      	bx	lr
    215a:	0000      	.short	0x0000
    215c:	20000dba 	.word	0x20000dba

00002160 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    2160:	4801      	ldr	r0, [pc, #4]	; (2168 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    2162:	7880      	ldrb	r0, [r0, #2]
    2164:	4770      	bx	lr
    2166:	0000      	.short	0x0000
    2168:	2000006c 	.word	0x2000006c

0000216c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    216c:	4801      	ldr	r0, [pc, #4]	; (2174 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    216e:	78c0      	ldrb	r0, [r0, #3]
    2170:	4770      	bx	lr
    2172:	0000      	.short	0x0000
    2174:	2000006c 	.word	0x2000006c

00002178 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    2178:	b570      	push	{r4, r5, r6, lr}
    217a:	460c      	mov	r4, r1
    217c:	4605      	mov	r5, r0
    217e:	f000 f91f 	bl	23c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    2182:	b118      	cbz	r0, 218c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    2184:	21d0      	movs	r1, #208	; 0xd0
    2186:	2027      	movs	r0, #39	; 0x27
    2188:	f7ff f90a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    218c:	4803      	ldr	r0, [pc, #12]	; (219c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    218e:	2101      	movs	r1, #1
    2190:	f00c f8fb 	bl	e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2194:	4802      	ldr	r0, [pc, #8]	; (21a0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    2196:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    219a:	bd70      	pop	{r4, r5, r6, pc}
    219c:	20000d98 	.word	0x20000d98
    21a0:	2000006c 	.word	0x2000006c

000021a4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    21a4:	4901      	ldr	r1, [pc, #4]	; (21ac <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    21a6:	2001      	movs	r0, #1
    21a8:	7148      	strb	r0, [r1, #5]
    21aa:	4770      	bx	lr
    21ac:	2000006c 	.word	0x2000006c

000021b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    21b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b4:	4d5b      	ldr	r5, [pc, #364]	; (2324 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>)
    21b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    21b8:	782e      	ldrb	r6, [r5, #0]
    21ba:	2e00      	cmp	r6, #0
    21bc:	d16b      	bne.n	2296 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    21be:	2a00      	cmp	r2, #0
    21c0:	d069      	beq.n	2296 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    21c2:	2b00      	cmp	r3, #0
    21c4:	d067      	beq.n	2296 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    21c6:	2c00      	cmp	r4, #0
    21c8:	d065      	beq.n	2296 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    21ca:	f105 0614 	add.w	r6, r5, #20
    21ce:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    21d2:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    21d6:	2700      	movs	r7, #0
    21d8:	716f      	strb	r7, [r5, #5]
    21da:	712f      	strb	r7, [r5, #4]
    21dc:	70af      	strb	r7, [r5, #2]
    21de:	706f      	strb	r7, [r5, #1]
    21e0:	70ef      	strb	r7, [r5, #3]
    21e2:	81af      	strh	r7, [r5, #12]
    21e4:	81ef      	strh	r7, [r5, #14]
    21e6:	f000 f93d 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    21ea:	4606      	mov	r6, r0
    21ec:	f000 f934 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    21f0:	4604      	mov	r4, r0
    21f2:	f005 ffa7 	bl	8144 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    21f6:	f005 fcff 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    21fa:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    21fe:	f006 f825 	bl	824c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    2202:	69e0      	ldr	r0, [r4, #28]
    2204:	f006 f908 	bl	8418 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    2208:	6960      	ldr	r0, [r4, #20]
    220a:	f006 f8fb 	bl	8404 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    220e:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    2212:	f006 f931 	bl	8478 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2216:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    221a:	6840      	ldr	r0, [r0, #4]
    221c:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    2220:	b108      	cbz	r0, 2226 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    2222:	f005 ff0f 	bl	8044 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    2226:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    222a:	2001      	movs	r0, #1
    222c:	f005 fe4e 	bl	7ecc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    2230:	2800      	cmp	r0, #0
    2232:	d070      	beq.n	2316 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x166>
    2234:	483c      	ldr	r0, [pc, #240]	; (2328 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>)
    2236:	f005 feb5 	bl	7fa4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    223a:	8820      	ldrh	r0, [r4, #0]
    223c:	f7ff fcc2 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2240:	6368      	str	r0, [r5, #52]	; 0x34
    2242:	8820      	ldrh	r0, [r4, #0]
    2244:	f7ff fca8 	bl	1b98 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2248:	f106 0288 	add.w	r2, r6, #136	; 0x88
    224c:	63a8      	str	r0, [r5, #56]	; 0x38
    224e:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    2252:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 232c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    2256:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    225a:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    225e:	f8c9 2019 	str.w	r2, [r9, #25]
    2262:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    2266:	f8c9 101d 	str.w	r1, [r9, #29]
    226a:	f000 f933 	bl	24d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf8>
    226e:	4601      	mov	r1, r0
    2270:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    2272:	46ba      	mov	sl, r7
    2274:	f00b fde6 	bl	de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    2278:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    227a:	4281      	cmp	r1, r0
    227c:	d200      	bcs.n	2280 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    227e:	4608      	mov	r0, r1
    2280:	71a8      	strb	r0, [r5, #6]
    2282:	46a8      	mov	r8, r5
    2284:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2288:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    228a:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    228e:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    2290:	2908      	cmp	r1, #8
    2292:	d104      	bne.n	229e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    2294:	e002      	b.n	229c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    2296:	f240 1145 	movw	r1, #325	; 0x145
    229a:	e040      	b.n	231e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    229c:	2104      	movs	r1, #4
    229e:	f00b fdd1 	bl	de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    22a2:	b90f      	cbnz	r7, 22a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    22a4:	1d00      	adds	r0, r0, #4
    22a6:	b280      	uxth	r0, r0
    22a8:	4285      	cmp	r5, r0
    22aa:	d200      	bcs.n	22ae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    22ac:	4628      	mov	r0, r5
    22ae:	b2c5      	uxtb	r5, r0
    22b0:	f888 5007 	strb.w	r5, [r8, #7]
    22b4:	f888 5008 	strb.w	r5, [r8, #8]
    22b8:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    22bc:	46d0      	mov	r8, sl
    22be:	b190      	cbz	r0, 22e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    22c0:	2701      	movs	r7, #1
    22c2:	f889 7018 	strb.w	r7, [r9, #24]
    22c6:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    22ca:	e9c9 1204 	strd	r1, r2, [r9, #16]
    22ce:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    22d2:	f00b fcbc 	bl	dc4e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    22d6:	4603      	mov	r3, r0
    22d8:	462a      	mov	r2, r5
    22da:	4914      	ldr	r1, [pc, #80]	; (232c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    22dc:	4638      	mov	r0, r7
    22de:	f8cd 8000 	str.w	r8, [sp]
    22e2:	f005 fbf5 	bl	7ad0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    22e6:	2001      	movs	r0, #1
    22e8:	f000 fb54 	bl	2994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    22ec:	4810      	ldr	r0, [pc, #64]	; (2330 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    22ee:	6800      	ldr	r0, [r0, #0]
    22f0:	2803      	cmp	r0, #3
    22f2:	d012      	beq.n	231a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    22f4:	280b      	cmp	r0, #11
    22f6:	d010      	beq.n	231a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    22f8:	480c      	ldr	r0, [pc, #48]	; (232c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    22fa:	220e      	movs	r2, #14
    22fc:	2100      	movs	r1, #0
    22fe:	304a      	adds	r0, #74	; 0x4a
    2300:	f00e fdd0 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2304:	4809      	ldr	r0, [pc, #36]	; (232c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    2306:	8ab1      	ldrh	r1, [r6, #20]
    2308:	304a      	adds	r0, #74	; 0x4a
    230a:	8041      	strh	r1, [r0, #2]
    230c:	8821      	ldrh	r1, [r4, #0]
    230e:	8001      	strh	r1, [r0, #0]
    2310:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    2314:	7101      	strb	r1, [r0, #4]
    2316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    231a:	f240 2102 	movw	r1, #514	; 0x202
    231e:	2027      	movs	r0, #39	; 0x27
    2320:	f7ff f83e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2324:	2000006c 	.word	0x2000006c
    2328:	00002b98 	.word	0x00002b98
    232c:	20000d70 	.word	0x20000d70
    2330:	40001550 	.word	0x40001550

00002334 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    2334:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2338:	4688      	mov	r8, r1
    233a:	4607      	mov	r7, r0
    233c:	f000 f892 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2340:	4c1a      	ldr	r4, [pc, #104]	; (23ac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    2342:	4605      	mov	r5, r0
    2344:	07b8      	lsls	r0, r7, #30
    2346:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2348:	784e      	ldrb	r6, [r1, #1]
    234a:	d516      	bpl.n	237a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    234c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    234e:	b330      	cbz	r0, 239e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    2350:	8962      	ldrh	r2, [r4, #10]
    2352:	1cd2      	adds	r2, r2, #3
    2354:	f00e fd2c 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2358:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    235a:	6260      	str	r0, [r4, #36]	; 0x24
    235c:	4669      	mov	r1, sp
    235e:	aa01      	add	r2, sp, #4
    2360:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2362:	f00b f8c3 	bl	d4ec <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    2366:	9800      	ldr	r0, [sp, #0]
    2368:	f00b f876 	bl	d458 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    236c:	f8c8 0000 	str.w	r0, [r8]
    2370:	4631      	mov	r1, r6
    2372:	2201      	movs	r2, #1
    2374:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2376:	f00b f826 	bl	d3c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    237a:	07f8      	lsls	r0, r7, #31
    237c:	d00d      	beq.n	239a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    237e:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    2382:	3518      	adds	r5, #24
    2384:	1c40      	adds	r0, r0, #1
    2386:	f141 0100 	adc.w	r1, r1, #0
    238a:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    238e:	f815 0918 	ldrb.w	r0, [r5], #-24
    2392:	2801      	cmp	r0, #1
    2394:	d008      	beq.n	23a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    2396:	2001      	movs	r0, #1
    2398:	7628      	strb	r0, [r5, #24]
    239a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    239e:	f240 4166 	movw	r1, #1126	; 0x466
    23a2:	2027      	movs	r0, #39	; 0x27
    23a4:	f7fe fffc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    23a8:	2000      	movs	r0, #0
    23aa:	e7f5      	b.n	2398 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    23ac:	2000006c 	.word	0x2000006c

000023b0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    23b0:	4802      	ldr	r0, [pc, #8]	; (23bc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    23b2:	89c0      	ldrh	r0, [r0, #14]
    23b4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    23b8:	4770      	bx	lr
    23ba:	0000      	.short	0x0000
    23bc:	2000006c 	.word	0x2000006c

000023c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    23c0:	4804      	ldr	r0, [pc, #16]	; (23d4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    23c2:	7800      	ldrb	r0, [r0, #0]
    23c4:	b108      	cbz	r0, 23ca <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    23c6:	200c      	movs	r0, #12
    23c8:	4770      	bx	lr
    23ca:	4903      	ldr	r1, [pc, #12]	; (23d8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    23cc:	2000      	movs	r0, #0
    23ce:	7708      	strb	r0, [r1, #28]
    23d0:	4770      	bx	lr
    23d2:	0000      	.short	0x0000
    23d4:	2000006c 	.word	0x2000006c
    23d8:	20000dba 	.word	0x20000dba

000023dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    23dc:	480c      	ldr	r0, [pc, #48]	; (2410 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    23de:	b510      	push	{r4, lr}
    23e0:	7801      	ldrb	r1, [r0, #0]
    23e2:	b149      	cbz	r1, 23f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    23e4:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    23e8:	7800      	ldrb	r0, [r0, #0]
    23ea:	2802      	cmp	r0, #2
    23ec:	d008      	beq.n	2400 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    23ee:	f240 211e 	movw	r1, #542	; 0x21e
    23f2:	2027      	movs	r0, #39	; 0x27
    23f4:	f7fe ffd4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    23f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    23fc:	f000 b9d8 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    2400:	6848      	ldr	r0, [r1, #4]
    2402:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    240a:	f005 bdd3 	b.w	7fb4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    240e:	0000      	.short	0x0000
    2410:	2000006c 	.word	0x2000006c
    2414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2416:	2600      	movs	r6, #0
    2418:	4605      	mov	r5, r0
    241a:	704e      	strb	r6, [r1, #1]
    241c:	201d      	movs	r0, #29
    241e:	4f09      	ldr	r7, [pc, #36]	; (2444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    2420:	460c      	mov	r4, r1
    2422:	7008      	strb	r0, [r1, #0]
    2424:	722e      	strb	r6, [r5, #8]
    2426:	220e      	movs	r2, #14
    2428:	4639      	mov	r1, r7
    242a:	1d20      	adds	r0, r4, #4
    242c:	f00e fcc0 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2430:	7a28      	ldrb	r0, [r5, #8]
    2432:	f88d 0000 	strb.w	r0, [sp]
    2436:	9800      	ldr	r0, [sp, #0]
    2438:	9000      	str	r0, [sp, #0]
    243a:	f89d 0000 	ldrb.w	r0, [sp]
    243e:	2800      	cmp	r0, #0
    2440:	d1f0      	bne.n	2424 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    2442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2444:	20000dc8 	.word	0x20000dc8
    2448:	4a02      	ldr	r2, [pc, #8]	; (2454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>)
    244a:	8993      	ldrh	r3, [r2, #12]
    244c:	4303      	orrs	r3, r0
    244e:	8193      	strh	r3, [r2, #12]
    2450:	6952      	ldr	r2, [r2, #20]
    2452:	4710      	bx	r2
    2454:	2000006c 	.word	0x2000006c
    2458:	4801      	ldr	r0, [pc, #4]	; (2460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>)
    245a:	6840      	ldr	r0, [r0, #4]
    245c:	4770      	bx	lr
    245e:	0000      	.short	0x0000
    2460:	200000a8 	.word	0x200000a8
    2464:	4801      	ldr	r0, [pc, #4]	; (246c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    2466:	6840      	ldr	r0, [r0, #4]
    2468:	3080      	adds	r0, #128	; 0x80
    246a:	4770      	bx	lr
    246c:	200000a8 	.word	0x200000a8
    2470:	4a01      	ldr	r2, [pc, #4]	; (2478 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    2472:	2100      	movs	r1, #0
    2474:	6952      	ldr	r2, [r2, #20]
    2476:	4710      	bx	r2
    2478:	2000006c 	.word	0x2000006c
    247c:	b570      	push	{r4, r5, r6, lr}
    247e:	4605      	mov	r5, r0
    2480:	2901      	cmp	r1, #1
    2482:	d818      	bhi.n	24b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    2484:	4c12      	ldr	r4, [pc, #72]	; (24d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>)
    2486:	69a1      	ldr	r1, [r4, #24]
    2488:	4788      	blx	r1
    248a:	b1a0      	cbz	r0, 24b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    248c:	7920      	ldrb	r0, [r4, #4]
    248e:	b990      	cbnz	r0, 24b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    2490:	b9e5      	cbnz	r5, 24cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    2492:	f104 0010 	add.w	r0, r4, #16
    2496:	7801      	ldrb	r1, [r0, #0]
    2498:	06c8      	lsls	r0, r1, #27
    249a:	d405      	bmi.n	24a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    249c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    249e:	7800      	ldrb	r0, [r0, #0]
    24a0:	06c0      	lsls	r0, r0, #27
    24a2:	d401      	bmi.n	24a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    24a4:	2001      	movs	r0, #1
    24a6:	e000      	b.n	24aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xce>
    24a8:	2000      	movs	r0, #0
    24aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    24ac:	b92a      	cbnz	r2, 24ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    24ae:	8962      	ldrh	r2, [r4, #10]
    24b0:	b11a      	cbz	r2, 24ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    24b2:	06c9      	lsls	r1, r1, #27
    24b4:	d401      	bmi.n	24ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    24b6:	2001      	movs	r0, #1
    24b8:	bd70      	pop	{r4, r5, r6, pc}
    24ba:	89a1      	ldrh	r1, [r4, #12]
    24bc:	078a      	lsls	r2, r1, #30
    24be:	d503      	bpl.n	24c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    24c0:	6a22      	ldr	r2, [r4, #32]
    24c2:	78d2      	ldrb	r2, [r2, #3]
    24c4:	2a02      	cmp	r2, #2
    24c6:	d001      	beq.n	24cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    24c8:	4308      	orrs	r0, r1
    24ca:	d1f4      	bne.n	24b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    24cc:	2000      	movs	r0, #0
    24ce:	bd70      	pop	{r4, r5, r6, pc}
    24d0:	2000006c 	.word	0x2000006c
    24d4:	b510      	push	{r4, lr}
    24d6:	f7ff ffbf 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    24da:	4604      	mov	r4, r0
    24dc:	f7ff ffc2 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    24e0:	4602      	mov	r2, r0
    24e2:	7f41      	ldrb	r1, [r0, #29]
    24e4:	4816      	ldr	r0, [pc, #88]	; (2540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>)
    24e6:	2925      	cmp	r1, #37	; 0x25
    24e8:	d010      	beq.n	250c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    24ea:	2926      	cmp	r1, #38	; 0x26
    24ec:	d00e      	beq.n	250c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    24ee:	7f92      	ldrb	r2, [r2, #30]
    24f0:	2a25      	cmp	r2, #37	; 0x25
    24f2:	d00b      	beq.n	250c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    24f4:	2920      	cmp	r1, #32
    24f6:	d00d      	beq.n	2514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    24f8:	2921      	cmp	r1, #33	; 0x21
    24fa:	d00b      	beq.n	2514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    24fc:	2a23      	cmp	r2, #35	; 0x23
    24fe:	d00f      	beq.n	2520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    2500:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2504:	2804      	cmp	r0, #4
    2506:	d100      	bne.n	250a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    2508:	2008      	movs	r0, #8
    250a:	bd10      	pop	{r4, pc}
    250c:	6840      	ldr	r0, [r0, #4]
    250e:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    2512:	e00e      	b.n	2532 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x156>
    2514:	2a23      	cmp	r2, #35	; 0x23
    2516:	d003      	beq.n	2520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    2518:	6840      	ldr	r0, [r0, #4]
    251a:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    251e:	e005      	b.n	252c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    2520:	6841      	ldr	r1, [r0, #4]
    2522:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    2526:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    252a:	4008      	ands	r0, r1
    252c:	f00b fb85 	bl	dc3a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    2530:	4601      	mov	r1, r0
    2532:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    253a:	f00b bb96 	b.w	dc6a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    253e:	0000      	.short	0x0000
    2540:	200000a8 	.word	0x200000a8
    2544:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2548:	468b      	mov	fp, r1
    254a:	4681      	mov	r9, r0
    254c:	f7ff ff8a 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2550:	2600      	movs	r6, #0
    2552:	4c66      	ldr	r4, [pc, #408]	; (26ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    2554:	4607      	mov	r7, r0
    2556:	f88d 6008 	strb.w	r6, [sp, #8]
    255a:	9603      	str	r6, [sp, #12]
    255c:	9601      	str	r6, [sp, #4]
    255e:	7820      	ldrb	r0, [r4, #0]
    2560:	4635      	mov	r5, r6
    2562:	2802      	cmp	r0, #2
    2564:	d004      	beq.n	2570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    2566:	f240 41ea 	movw	r1, #1258	; 0x4ea
    256a:	2027      	movs	r0, #39	; 0x27
    256c:	f7fe ff18 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2570:	7ba0      	ldrb	r0, [r4, #14]
    2572:	0640      	lsls	r0, r0, #25
    2574:	d406      	bmi.n	2584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    2576:	2040      	movs	r0, #64	; 0x40
    2578:	f7ff ff7a 	bl	2470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    257c:	89e0      	ldrh	r0, [r4, #14]
    257e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    2582:	81e0      	strh	r0, [r4, #14]
    2584:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    2588:	f1b9 0f00 	cmp.w	r9, #0
    258c:	d03a      	beq.n	2604 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    258e:	b180      	cbz	r0, 25b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    2590:	f005 fb6c 	bl	7c6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    2594:	f005 fb46 	bl	7c24 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    2598:	b958      	cbnz	r0, 25b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    259a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    259c:	7841      	ldrb	r1, [r0, #1]
    259e:	b141      	cbz	r1, 25b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    25a0:	7800      	ldrb	r0, [r0, #0]
    25a2:	7e39      	ldrb	r1, [r7, #24]
    25a4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    25a8:	4288      	cmp	r0, r1
    25aa:	d102      	bne.n	25b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    25ac:	2001      	movs	r0, #1
    25ae:	7060      	strb	r0, [r4, #1]
    25b0:	e097      	b.n	26e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    25b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    25b4:	7841      	ldrb	r1, [r0, #1]
    25b6:	8161      	strh	r1, [r4, #10]
    25b8:	b121      	cbz	r1, 25c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e8>
    25ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    25bc:	f00b f86c 	bl	d698 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    25c0:	62a0      	str	r0, [r4, #40]	; 0x28
    25c2:	e000      	b.n	25c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    25c4:	62a5      	str	r5, [r4, #40]	; 0x28
    25c6:	89e0      	ldrh	r0, [r4, #14]
    25c8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    25cc:	81e0      	strh	r0, [r4, #14]
    25ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    25d0:	7df9      	ldrb	r1, [r7, #23]
    25d2:	7800      	ldrb	r0, [r0, #0]
    25d4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    25d8:	4288      	cmp	r0, r1
    25da:	d007      	beq.n	25ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    25dc:	a803      	add	r0, sp, #12
    25de:	f000 f98b 	bl	28f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    25e2:	89e0      	ldrh	r0, [r4, #14]
    25e4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    25e8:	81e0      	strh	r0, [r4, #14]
    25ea:	e000      	b.n	25ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x212>
    25ec:	2601      	movs	r6, #1
    25ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    25f0:	7e39      	ldrb	r1, [r7, #24]
    25f2:	7800      	ldrb	r0, [r0, #0]
    25f4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    25f8:	4288      	cmp	r0, r1
    25fa:	d10d      	bne.n	2618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    25fc:	a802      	add	r0, sp, #8
    25fe:	f000 f931 	bl	2864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x488>
    2602:	e009      	b.n	2618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    2604:	b108      	cbz	r0, 260a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22e>
    2606:	f005 fb2b 	bl	7c60 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    260a:	78a0      	ldrb	r0, [r4, #2]
    260c:	1c40      	adds	r0, r0, #1
    260e:	70a0      	strb	r0, [r4, #2]
    2610:	89e0      	ldrh	r0, [r4, #14]
    2612:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    2616:	81e0      	strh	r0, [r4, #14]
    2618:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 26ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>
    261c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    2620:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    2624:	b190      	cbz	r0, 264c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    2626:	f7ff ff17 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    262a:	4931      	ldr	r1, [pc, #196]	; (26f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    262c:	760d      	strb	r5, [r1, #24]
    262e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    2632:	e9c1 2304 	strd	r2, r3, [r1, #16]
    2636:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    263a:	f00b fb08 	bl	dc4e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    263e:	4603      	mov	r3, r0
    2640:	22fb      	movs	r2, #251	; 0xfb
    2642:	492b      	ldr	r1, [pc, #172]	; (26f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    2644:	4628      	mov	r0, r5
    2646:	9500      	str	r5, [sp, #0]
    2648:	f005 fa42 	bl	7ad0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    264c:	f04f 0800 	mov.w	r8, #0
    2650:	f1bb 0f00 	cmp.w	fp, #0
    2654:	d104      	bne.n	2660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    2656:	78a1      	ldrb	r1, [r4, #2]
    2658:	2001      	movs	r0, #1
    265a:	f7ff ff0f 	bl	247c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    265e:	b120      	cbz	r0, 266a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    2660:	f005 febc 	bl	83dc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    2664:	f04f 0801 	mov.w	r8, #1
    2668:	e002      	b.n	2670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x294>
    266a:	2000      	movs	r0, #0
    266c:	f000 f9d0 	bl	2a10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>
    2670:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2674:	b118      	cbz	r0, 267e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    2676:	a901      	add	r1, sp, #4
    2678:	2002      	movs	r0, #2
    267a:	f7ff fe5b 	bl	2334 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    267e:	481c      	ldr	r0, [pc, #112]	; (26f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    2680:	8aba      	ldrh	r2, [r7, #20]
    2682:	304a      	adds	r0, #74	; 0x4a
    2684:	b13e      	cbz	r6, 2696 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    2686:	b91a      	cbnz	r2, 2690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    2688:	88c2      	ldrh	r2, [r0, #6]
    268a:	b90a      	cbnz	r2, 2690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    268c:	8902      	ldrh	r2, [r0, #8]
    268e:	b112      	cbz	r2, 2696 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    2690:	8942      	ldrh	r2, [r0, #10]
    2692:	1c52      	adds	r2, r2, #1
    2694:	8142      	strh	r2, [r0, #10]
    2696:	f1b9 0f00 	cmp.w	r9, #0
    269a:	d008      	beq.n	26ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    269c:	88c1      	ldrh	r1, [r0, #6]
    269e:	1c49      	adds	r1, r1, #1
    26a0:	80c1      	strh	r1, [r0, #6]
    26a2:	4812      	ldr	r0, [pc, #72]	; (26ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    26a4:	70a5      	strb	r5, [r4, #2]
    26a6:	303c      	adds	r0, #60	; 0x3c
    26a8:	f001 f960 	bl	396c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    26ac:	e002      	b.n	26b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    26ae:	8901      	ldrh	r1, [r0, #8]
    26b0:	1c49      	adds	r1, r1, #1
    26b2:	8101      	strh	r1, [r0, #8]
    26b4:	9803      	ldr	r0, [sp, #12]
    26b6:	b140      	cbz	r0, 26ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ee>
    26b8:	f00a fece 	bl	d458 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    26bc:	f8da 1004 	ldr.w	r1, [sl, #4]
    26c0:	1c40      	adds	r0, r0, #1
    26c2:	7205      	strb	r5, [r0, #8]
    26c4:	220e      	movs	r2, #14
    26c6:	f00b fede 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    26ca:	9801      	ldr	r0, [sp, #4]
    26cc:	b130      	cbz	r0, 26dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x300>
    26ce:	f8da 1004 	ldr.w	r1, [sl, #4]
    26d2:	7205      	strb	r5, [r0, #8]
    26d4:	222a      	movs	r2, #42	; 0x2a
    26d6:	9801      	ldr	r0, [sp, #4]
    26d8:	f00b fed5 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    26dc:	f1b8 0f00 	cmp.w	r8, #0
    26e0:	d001      	beq.n	26e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x30a>
    26e2:	f000 f865 	bl	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    26e6:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    26ea:	0000      	.short	0x0000
    26ec:	2000006c 	.word	0x2000006c
    26f0:	20000d70 	.word	0x20000d70
    26f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    26f8:	4688      	mov	r8, r1
    26fa:	4681      	mov	r9, r0
    26fc:	f7ff feb2 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2700:	4d29      	ldr	r5, [pc, #164]	; (27a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    2702:	4604      	mov	r4, r0
    2704:	7828      	ldrb	r0, [r5, #0]
    2706:	2801      	cmp	r0, #1
    2708:	d004      	beq.n	2714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    270a:	f240 4175 	movw	r1, #1141	; 0x475
    270e:	2027      	movs	r0, #39	; 0x27
    2710:	f7fe fe46 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2714:	7c20      	ldrb	r0, [r4, #16]
    2716:	2700      	movs	r7, #0
    2718:	2601      	movs	r6, #1
    271a:	b128      	cbz	r0, 2728 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    271c:	7427      	strb	r7, [r4, #16]
    271e:	2100      	movs	r1, #0
    2720:	2004      	movs	r0, #4
    2722:	f7ff fe91 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2726:	74a6      	strb	r6, [r4, #18]
    2728:	6a29      	ldr	r1, [r5, #32]
    272a:	7808      	ldrb	r0, [r1, #0]
    272c:	43c0      	mvns	r0, r0
    272e:	0780      	lsls	r0, r0, #30
    2730:	d109      	bne.n	2746 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    2732:	7da0      	ldrb	r0, [r4, #22]
    2734:	bb88      	cbnz	r0, 279a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    2736:	2002      	movs	r0, #2
    2738:	f7ff fe86 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    273c:	6a28      	ldr	r0, [r5, #32]
    273e:	7800      	ldrb	r0, [r0, #0]
    2740:	43c0      	mvns	r0, r0
    2742:	0780      	lsls	r0, r0, #30
    2744:	d029      	beq.n	279a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    2746:	6a28      	ldr	r0, [r5, #32]
    2748:	7840      	ldrb	r0, [r0, #1]
    274a:	b110      	cbz	r0, 2752 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    274c:	2002      	movs	r0, #2
    274e:	75a0      	strb	r0, [r4, #22]
    2750:	e000      	b.n	2754 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    2752:	75a6      	strb	r6, [r4, #22]
    2754:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    2758:	b198      	cbz	r0, 2782 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    275a:	f7ff fe7d 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    275e:	4913      	ldr	r1, [pc, #76]	; (27ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    2760:	7a2d      	ldrb	r5, [r5, #8]
    2762:	760e      	strb	r6, [r1, #24]
    2764:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    2768:	e9c1 2304 	strd	r2, r3, [r1, #16]
    276c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    2770:	f00b fa6d 	bl	dc4e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    2774:	4603      	mov	r3, r0
    2776:	462a      	mov	r2, r5
    2778:	490c      	ldr	r1, [pc, #48]	; (27ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    277a:	4630      	mov	r0, r6
    277c:	9700      	str	r7, [sp, #0]
    277e:	f005 f9a7 	bl	7ad0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2782:	ea38 0009 	bics.w	r0, r8, r9
    2786:	d004      	beq.n	2792 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    2788:	2100      	movs	r1, #0
    278a:	4608      	mov	r0, r1
    278c:	f7ff fe76 	bl	247c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    2790:	b128      	cbz	r0, 279e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    2792:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2796:	f000 b80b 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    279a:	2003      	movs	r0, #3
    279c:	e7d7      	b.n	274e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    279e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    27a2:	2000      	movs	r0, #0
    27a4:	f000 b8f6 	b.w	2994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    27a8:	2000006c 	.word	0x2000006c
    27ac:	20000d70 	.word	0x20000d70
    27b0:	b510      	push	{r4, lr}
    27b2:	f005 fb01 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    27b6:	f005 fa1f 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    27ba:	4c0d      	ldr	r4, [pc, #52]	; (27f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    27bc:	89e0      	ldrh	r0, [r4, #14]
    27be:	f7ff fe57 	bl	2470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    27c2:	480c      	ldr	r0, [pc, #48]	; (27f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    27c4:	7f00      	ldrb	r0, [r0, #28]
    27c6:	b158      	cbz	r0, 27e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    27c8:	490a      	ldr	r1, [pc, #40]	; (27f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    27ca:	220e      	movs	r2, #14
    27cc:	f101 000e 	add.w	r0, r1, #14
    27d0:	f00e faee 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    27d4:	4807      	ldr	r0, [pc, #28]	; (27f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    27d6:	2224      	movs	r2, #36	; 0x24
    27d8:	4907      	ldr	r1, [pc, #28]	; (27f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    27da:	301d      	adds	r0, #29
    27dc:	f00b fe67 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    27e0:	69e2      	ldr	r2, [r4, #28]
    27e2:	7921      	ldrb	r1, [r4, #4]
    27e4:	7860      	ldrb	r0, [r4, #1]
    27e6:	4790      	blx	r2
    27e8:	2000      	movs	r0, #0
    27ea:	7020      	strb	r0, [r4, #0]
    27ec:	bd10      	pop	{r4, pc}
    27ee:	0000      	.short	0x0000
    27f0:	2000006c 	.word	0x2000006c
    27f4:	20000dba 	.word	0x20000dba
    27f8:	00002415 	.word	0x00002415
    27fc:	4808      	ldr	r0, [pc, #32]	; (2820 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    27fe:	b510      	push	{r4, lr}
    2800:	7800      	ldrb	r0, [r0, #0]
    2802:	2802      	cmp	r0, #2
    2804:	d004      	beq.n	2810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x434>
    2806:	f240 214d 	movw	r1, #589	; 0x24d
    280a:	2027      	movs	r0, #39	; 0x27
    280c:	f7fe fdc8 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2810:	4904      	ldr	r1, [pc, #16]	; (2824 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    2812:	2001      	movs	r0, #1
    2814:	7308      	strb	r0, [r1, #12]
    2816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    281a:	f7ff bfc9 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    281e:	0000      	.short	0x0000
    2820:	2000006c 	.word	0x2000006c
    2824:	20000dba 	.word	0x20000dba
    2828:	b430      	push	{r4, r5}
    282a:	4604      	mov	r4, r0
    282c:	480c      	ldr	r0, [pc, #48]	; (2860 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x484>)
    282e:	7a00      	ldrb	r0, [r0, #8]
    2830:	b10b      	cbz	r3, 2836 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45a>
    2832:	1d00      	adds	r0, r0, #4
    2834:	b2c0      	uxtb	r0, r0
    2836:	b93a      	cbnz	r2, 2848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46c>
    2838:	28ff      	cmp	r0, #255	; 0xff
    283a:	d105      	bne.n	2848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46c>
    283c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    2840:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    2844:	429a      	cmp	r2, r3
    2846:	d009      	beq.n	285c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    2848:	b121      	cbz	r1, 2854 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    284a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    284e:	bc30      	pop	{r4, r5}
    2850:	f005 bde8 	b.w	8424 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2854:	20ff      	movs	r0, #255	; 0xff
    2856:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    285a:	e7f8      	b.n	284e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x472>
    285c:	bc30      	pop	{r4, r5}
    285e:	4770      	bx	lr
    2860:	2000006c 	.word	0x2000006c
    2864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2868:	4607      	mov	r7, r0
    286a:	f7ff fdfb 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    286e:	4c21      	ldr	r4, [pc, #132]	; (28f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>)
    2870:	4605      	mov	r5, r0
    2872:	2601      	movs	r6, #1
    2874:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2876:	7808      	ldrb	r0, [r1, #0]
    2878:	f000 0003 	and.w	r0, r0, #3
    287c:	2801      	cmp	r0, #1
    287e:	d00c      	beq.n	289a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    2880:	2802      	cmp	r0, #2
    2882:	d00a      	beq.n	289a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    2884:	2803      	cmp	r0, #3
    2886:	d11b      	bne.n	28c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    2888:	742e      	strb	r6, [r5, #16]
    288a:	89e0      	ldrh	r0, [r4, #14]
    288c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    2890:	81e0      	strh	r0, [r4, #14]
    2892:	2001      	movs	r0, #1
    2894:	f7ff fdd8 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2898:	e012      	b.n	28c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    289a:	7848      	ldrb	r0, [r1, #1]
    289c:	b180      	cbz	r0, 28c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    289e:	89e1      	ldrh	r1, [r4, #14]
    28a0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    28a4:	81e1      	strh	r1, [r4, #14]
    28a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    28a8:	2900      	cmp	r1, #0
    28aa:	d018      	beq.n	28de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    28ac:	28fb      	cmp	r0, #251	; 0xfb
    28ae:	d818      	bhi.n	28e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    28b0:	7960      	ldrb	r0, [r4, #5]
    28b2:	b120      	cbz	r0, 28be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e2>
    28b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28b8:	2020      	movs	r0, #32
    28ba:	f7ff bdd9 	b.w	2470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    28be:	703e      	strb	r6, [r7, #0]
    28c0:	7e28      	ldrb	r0, [r5, #24]
    28c2:	2801      	cmp	r0, #1
    28c4:	d012      	beq.n	28ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    28c6:	762e      	strb	r6, [r5, #24]
    28c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28ca:	7840      	ldrb	r0, [r0, #1]
    28cc:	2800      	cmp	r0, #0
    28ce:	d006      	beq.n	28de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    28d0:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    28d4:	1c40      	adds	r0, r0, #1
    28d6:	f141 0100 	adc.w	r1, r1, #0
    28da:	e9c5 0100 	strd	r0, r1, [r5]
    28de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28e2:	7920      	ldrb	r0, [r4, #4]
    28e4:	f040 0010 	orr.w	r0, r0, #16
    28e8:	7120      	strb	r0, [r4, #4]
    28ea:	e7f8      	b.n	28de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    28ec:	2000      	movs	r0, #0
    28ee:	7628      	strb	r0, [r5, #24]
    28f0:	e7ea      	b.n	28c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ec>
    28f2:	0000      	.short	0x0000
    28f4:	2000006c 	.word	0x2000006c
    28f8:	b570      	push	{r4, r5, r6, lr}
    28fa:	4605      	mov	r5, r0
    28fc:	f7ff fdb2 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2900:	4604      	mov	r4, r0
    2902:	7d80      	ldrb	r0, [r0, #22]
    2904:	2800      	cmp	r0, #0
    2906:	d02d      	beq.n	2964 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x588>
    2908:	2802      	cmp	r0, #2
    290a:	d10c      	bne.n	2926 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    290c:	481b      	ldr	r0, [pc, #108]	; (297c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a0>)
    290e:	4629      	mov	r1, r5
    2910:	6b40      	ldr	r0, [r0, #52]	; 0x34
    2912:	f00a fd30 	bl	d376 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2916:	b330      	cbz	r0, 2966 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    2918:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    291c:	1c40      	adds	r0, r0, #1
    291e:	f141 0100 	adc.w	r1, r1, #0
    2922:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2926:	2500      	movs	r5, #0
    2928:	75a5      	strb	r5, [r4, #22]
    292a:	7ca0      	ldrb	r0, [r4, #18]
    292c:	b120      	cbz	r0, 2938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55c>
    292e:	74a5      	strb	r5, [r4, #18]
    2930:	2100      	movs	r1, #0
    2932:	2010      	movs	r0, #16
    2934:	f7ff fd88 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2938:	7c60      	ldrb	r0, [r4, #17]
    293a:	b170      	cbz	r0, 295a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57e>
    293c:	7465      	strb	r5, [r4, #17]
    293e:	f7ff fb57 	bl	1ff0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    2942:	b198      	cbz	r0, 296c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    2944:	2100      	movs	r1, #0
    2946:	2008      	movs	r0, #8
    2948:	f7ff fd7e 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    294c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2950:	1c40      	adds	r0, r0, #1
    2952:	f141 0100 	adc.w	r1, r1, #0
    2956:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    295a:	7de0      	ldrb	r0, [r4, #23]
    295c:	2801      	cmp	r0, #1
    295e:	d00a      	beq.n	2976 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59a>
    2960:	2001      	movs	r0, #1
    2962:	75e0      	strb	r0, [r4, #23]
    2964:	bd70      	pop	{r4, r5, r6, pc}
    2966:	f240 31e3 	movw	r1, #995	; 0x3e3
    296a:	e001      	b.n	2970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>
    296c:	f240 31fa 	movw	r1, #1018	; 0x3fa
    2970:	2027      	movs	r0, #39	; 0x27
    2972:	f7fe fd15 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2976:	75e5      	strb	r5, [r4, #23]
    2978:	bd70      	pop	{r4, r5, r6, pc}
    297a:	0000      	.short	0x0000
    297c:	2000006c 	.word	0x2000006c
    2980:	4803      	ldr	r0, [pc, #12]	; (2990 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>)
    2982:	7800      	ldrb	r0, [r0, #0]
    2984:	2800      	cmp	r0, #0
    2986:	d001      	beq.n	298c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    2988:	f7ff bf12 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    298c:	4770      	bx	lr
    298e:	0000      	.short	0x0000
    2990:	2000006c 	.word	0x2000006c
    2994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2998:	4606      	mov	r6, r0
    299a:	f7ff fd5d 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    299e:	4680      	mov	r8, r0
    29a0:	f7ff fd60 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    29a4:	4c18      	ldr	r4, [pc, #96]	; (2a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>)
    29a6:	4605      	mov	r5, r0
    29a8:	4632      	mov	r2, r6
    29aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    29ac:	6260      	str	r0, [r4, #36]	; 0x24
    29ae:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    29b2:	2101      	movs	r1, #1
    29b4:	4640      	mov	r0, r8
    29b6:	f7ff ff37 	bl	2828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    29ba:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    29be:	2700      	movs	r7, #0
    29c0:	b170      	cbz	r0, 29e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x604>
    29c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    29c4:	f005 fc64 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    29c8:	4810      	ldr	r0, [pc, #64]	; (2a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>)
    29ca:	2101      	movs	r1, #1
    29cc:	7601      	strb	r1, [r0, #24]
    29ce:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    29d2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    29d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    29d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    29da:	f005 f8cb 	bl	7b74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    29de:	e004      	b.n	29ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60e>
    29e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    29e2:	f005 fc55 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    29e6:	f005 f907 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    29ea:	b916      	cbnz	r6, 29f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x616>
    29ec:	4638      	mov	r0, r7
    29ee:	f005 fb05 	bl	7ffc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    29f2:	2100      	movs	r1, #0
    29f4:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    29f8:	4608      	mov	r0, r1
    29fa:	f005 fcd1 	bl	83a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    29fe:	2002      	movs	r0, #2
    2a00:	7020      	strb	r0, [r4, #0]
    2a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a06:	0000      	.short	0x0000
    2a08:	2000006c 	.word	0x2000006c
    2a0c:	20000d70 	.word	0x20000d70
    2a10:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2a14:	4604      	mov	r4, r0
    2a16:	f7ff fd25 	bl	2464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2a1a:	4605      	mov	r5, r0
    2a1c:	f7ff fd1c 	bl	2458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    2a20:	2700      	movs	r7, #0
    2a22:	f88d 7000 	strb.w	r7, [sp]
    2a26:	4606      	mov	r6, r0
    2a28:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b4>
    2a2c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2a30:	4622      	mov	r2, r4
    2a32:	4639      	mov	r1, r7
    2a34:	f7ff fef8 	bl	2828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    2a38:	7da8      	ldrb	r0, [r5, #22]
    2a3a:	f04f 0801 	mov.w	r8, #1
    2a3e:	f1a9 0420 	sub.w	r4, r9, #32
    2a42:	b140      	cbz	r0, 2a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67a>
    2a44:	2801      	cmp	r0, #1
    2a46:	d020      	beq.n	2a8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ae>
    2a48:	2802      	cmp	r0, #2
    2a4a:	d02f      	beq.n	2aac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    2a4c:	2803      	cmp	r0, #3
    2a4e:	d03b      	beq.n	2ac8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    2a50:	f240 21ff 	movw	r1, #767	; 0x2ff
    2a54:	e057      	b.n	2b06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    2a56:	79a0      	ldrb	r0, [r4, #6]
    2a58:	2150      	movs	r1, #80	; 0x50
    2a5a:	f8ad 0004 	strh.w	r0, [sp, #4]
    2a5e:	5388      	strh	r0, [r1, r6]
    2a60:	4648      	mov	r0, r9
    2a62:	f7ff faef 	bl	2044 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2a66:	b130      	cbz	r0, 2a76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    2a68:	2080      	movs	r0, #128	; 0x80
    2a6a:	6a21      	ldr	r1, [r4, #32]
    2a6c:	f7ff fcec 	bl	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2a70:	f885 8011 	strb.w	r8, [r5, #17]
    2a74:	e02c      	b.n	2ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2a76:	466a      	mov	r2, sp
    2a78:	a901      	add	r1, sp, #4
    2a7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2a7c:	f00b f8ff 	bl	dc7e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    2a80:	6220      	str	r0, [r4, #32]
    2a82:	b110      	cbz	r0, 2a8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ae>
    2a84:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    2a88:	b111      	cbz	r1, 2a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>
    2a8a:	4842      	ldr	r0, [pc, #264]	; (2b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>)
    2a8c:	6220      	str	r0, [r4, #32]
    2a8e:	e01f      	b.n	2ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2a90:	f89d 1000 	ldrb.w	r1, [sp]
    2a94:	b921      	cbnz	r1, 2aa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    2a96:	8007      	strh	r7, [r0, #0]
    2a98:	7087      	strb	r7, [r0, #2]
    2a9a:	2101      	movs	r1, #1
    2a9c:	f00b fc75 	bl	e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2aa0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2aa4:	6a20      	ldr	r0, [r4, #32]
    2aa6:	f00b fbf8 	bl	e29a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    2aaa:	e011      	b.n	2ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2aac:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    2ab0:	f8ad 0004 	strh.w	r0, [sp, #4]
    2ab4:	466a      	mov	r2, sp
    2ab6:	a901      	add	r1, sp, #4
    2ab8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2aba:	f00b f8e0 	bl	dc7e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    2abe:	6220      	str	r0, [r4, #32]
    2ac0:	b930      	cbnz	r0, 2ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2ac2:	f240 21e9 	movw	r1, #745	; 0x2e9
    2ac6:	e01e      	b.n	2b06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    2ac8:	4648      	mov	r0, r9
    2aca:	f7ff fabb 	bl	2044 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2ace:	b1c0      	cbz	r0, 2b02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    2ad0:	6a20      	ldr	r0, [r4, #32]
    2ad2:	2308      	movs	r3, #8
    2ad4:	7801      	ldrb	r1, [r0, #0]
    2ad6:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    2ada:	7001      	strb	r1, [r0, #0]
    2adc:	7dea      	ldrb	r2, [r5, #23]
    2ade:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2ae2:	4311      	orrs	r1, r2
    2ae4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2ae8:	7001      	strb	r1, [r0, #0]
    2aea:	7e2a      	ldrb	r2, [r5, #24]
    2aec:	2304      	movs	r3, #4
    2aee:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2af2:	4311      	orrs	r1, r2
    2af4:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2af8:	7001      	strb	r1, [r0, #0]
    2afa:	43c9      	mvns	r1, r1
    2afc:	0789      	lsls	r1, r1, #30
    2afe:	d005      	beq.n	2b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    2b00:	e007      	b.n	2b12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    2b02:	f240 21f2 	movw	r1, #754	; 0x2f2
    2b06:	2027      	movs	r0, #39	; 0x27
    2b08:	f7fe fc4a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b0c:	78c0      	ldrb	r0, [r0, #3]
    2b0e:	2802      	cmp	r0, #2
    2b10:	d00f      	beq.n	2b32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x756>
    2b12:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2b14:	f00a fd2d 	bl	d572 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2b18:	b108      	cbz	r0, 2b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    2b1a:	2101      	movs	r1, #1
    2b1c:	e00a      	b.n	2b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    2b1e:	6a20      	ldr	r0, [r4, #32]
    2b20:	7800      	ldrb	r0, [r0, #0]
    2b22:	43c0      	mvns	r0, r0
    2b24:	0780      	lsls	r0, r0, #30
    2b26:	d004      	beq.n	2b32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x756>
    2b28:	f7ff fa4a 	bl	1fc0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    2b2c:	f080 0101 	eor.w	r1, r0, #1
    2b30:	e000      	b.n	2b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    2b32:	2100      	movs	r1, #0
    2b34:	6a20      	ldr	r0, [r4, #32]
    2b36:	7802      	ldrb	r2, [r0, #0]
    2b38:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2b3c:	7001      	strb	r1, [r0, #0]
    2b3e:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2b42:	b181      	cbz	r1, 2b66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    2b44:	7841      	ldrb	r1, [r0, #1]
    2b46:	b171      	cbz	r1, 2b66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    2b48:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2b4a:	f005 fba1 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2b4e:	4811      	ldr	r0, [pc, #68]	; (2b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>)
    2b50:	3828      	subs	r0, #40	; 0x28
    2b52:	7607      	strb	r7, [r0, #24]
    2b54:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2b58:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2b5c:	6a21      	ldr	r1, [r4, #32]
    2b5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2b60:	f005 f808 	bl	7b74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2b64:	e003      	b.n	2b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x792>
    2b66:	f005 fb93 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2b6a:	f005 f845 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2b6e:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2b72:	2101      	movs	r1, #1
    2b74:	2000      	movs	r0, #0
    2b76:	f005 fc13 	bl	83a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2b7a:	f884 8003 	strb.w	r8, [r4, #3]
    2b7e:	6a21      	ldr	r1, [r4, #32]
    2b80:	880a      	ldrh	r2, [r1, #0]
    2b82:	8222      	strh	r2, [r4, #16]
    2b84:	7889      	ldrb	r1, [r1, #2]
    2b86:	74a1      	strb	r1, [r4, #18]
    2b88:	f884 8000 	strb.w	r8, [r4]
    2b8c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2b90:	2000008c 	.word	0x2000008c
    2b94:	20000d98 	.word	0x20000d98
    2b98:	000027fd 	.word	0x000027fd
    2b9c:	00002545 	.word	0x00002545
    2ba0:	000026f5 	.word	0x000026f5
    2ba4:	00002981 	.word	0x00002981

00002ba8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2ba8:	4800      	ldr	r0, [pc, #0]	; (2bac <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2baa:	4770      	bx	lr
    2bac:	20001671 	.word	0x20001671

00002bb0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2bb0:	4904      	ldr	r1, [pc, #16]	; (2bc4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2bb2:	788a      	ldrb	r2, [r1, #2]
    2bb4:	4282      	cmp	r2, r0
    2bb6:	d903      	bls.n	2bc0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2bb8:	4408      	add	r0, r1
    2bba:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2bbe:	4770      	bx	lr
    2bc0:	2000      	movs	r0, #0
    2bc2:	4770      	bx	lr
    2bc4:	2000149e 	.word	0x2000149e

00002bc8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2bc8:	4904      	ldr	r1, [pc, #16]	; (2bdc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2bca:	788a      	ldrb	r2, [r1, #2]
    2bcc:	4282      	cmp	r2, r0
    2bce:	d903      	bls.n	2bd8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2bd0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2bd4:	3083      	adds	r0, #131	; 0x83
    2bd6:	4770      	bx	lr
    2bd8:	2000      	movs	r0, #0
    2bda:	4770      	bx	lr
    2bdc:	2000149e 	.word	0x2000149e

00002be0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2be0:	4a05      	ldr	r2, [pc, #20]	; (2bf8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2be2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2be6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2bea:	6802      	ldr	r2, [r0, #0]
    2bec:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    2bf0:	8880      	ldrh	r0, [r0, #4]
    2bf2:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2bf6:	4770      	bx	lr
    2bf8:	2000149e 	.word	0x2000149e

00002bfc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2bfc:	4904      	ldr	r1, [pc, #16]	; (2c10 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2bfe:	788a      	ldrb	r2, [r1, #2]
    2c00:	4282      	cmp	r2, r0
    2c02:	d903      	bls.n	2c0c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2c04:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2c08:	1cc0      	adds	r0, r0, #3
    2c0a:	4770      	bx	lr
    2c0c:	2000      	movs	r0, #0
    2c0e:	4770      	bx	lr
    2c10:	2000149e 	.word	0x2000149e

00002c14 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2c14:	b510      	push	{r4, lr}
    2c16:	f240 12d3 	movw	r2, #467	; 0x1d3
    2c1a:	2100      	movs	r1, #0
    2c1c:	4808      	ldr	r0, [pc, #32]	; (2c40 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    2c1e:	f00e f941 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c22:	2208      	movs	r2, #8
    2c24:	21ff      	movs	r1, #255	; 0xff
    2c26:	4807      	ldr	r0, [pc, #28]	; (2c44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2c28:	f00e f93c 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c2c:	4805      	ldr	r0, [pc, #20]	; (2c44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2c2e:	2100      	movs	r1, #0
    2c30:	1f00      	subs	r0, r0, #4
    2c32:	7001      	strb	r1, [r0, #0]
    2c34:	7041      	strb	r1, [r0, #1]
    2c36:	f44f 7161 	mov.w	r1, #900	; 0x384
    2c3a:	8041      	strh	r1, [r0, #2]
    2c3c:	bd10      	pop	{r4, pc}
    2c3e:	0000      	.short	0x0000
    2c40:	2000149e 	.word	0x2000149e
    2c44:	20000350 	.word	0x20000350

00002c48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2c48:	4b0b      	ldr	r3, [pc, #44]	; (2c78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2c4a:	b510      	push	{r4, lr}
    2c4c:	789c      	ldrb	r4, [r3, #2]
    2c4e:	4284      	cmp	r4, r0
    2c50:	d90f      	bls.n	2c72 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2c52:	4418      	add	r0, r3
    2c54:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2c58:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2c5c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2c60:	700b      	strb	r3, [r1, #0]
    2c62:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    2c66:	6011      	str	r1, [r2, #0]
    2c68:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    2c6c:	8090      	strh	r0, [r2, #4]
    2c6e:	2001      	movs	r0, #1
    2c70:	bd10      	pop	{r4, pc}
    2c72:	2000      	movs	r0, #0
    2c74:	bd10      	pop	{r4, pc}
    2c76:	0000      	.short	0x0000
    2c78:	2000149e 	.word	0x2000149e

00002c7c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    2c7c:	4907      	ldr	r1, [pc, #28]	; (2c9c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    2c7e:	788a      	ldrb	r2, [r1, #2]
    2c80:	4282      	cmp	r2, r0
    2c82:	d909      	bls.n	2c98 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2c84:	4408      	add	r0, r1
    2c86:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2c8a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2c8e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2c92:	f000 0001 	and.w	r0, r0, #1
    2c96:	4770      	bx	lr
    2c98:	2000      	movs	r0, #0
    2c9a:	4770      	bx	lr
    2c9c:	2000149e 	.word	0x2000149e

00002ca0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2ca0:	4801      	ldr	r0, [pc, #4]	; (2ca8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2ca2:	8840      	ldrh	r0, [r0, #2]
    2ca4:	4770      	bx	lr
    2ca6:	0000      	.short	0x0000
    2ca8:	2000034c 	.word	0x2000034c

00002cac <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2cac:	4905      	ldr	r1, [pc, #20]	; (2cc4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2cae:	788a      	ldrb	r2, [r1, #2]
    2cb0:	4282      	cmp	r2, r0
    2cb2:	d903      	bls.n	2cbc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2cb4:	4408      	add	r0, r1
    2cb6:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    2cba:	b108      	cbz	r0, 2cc0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2cbc:	2000      	movs	r0, #0
    2cbe:	4770      	bx	lr
    2cc0:	2001      	movs	r0, #1
    2cc2:	4770      	bx	lr
    2cc4:	2000149e 	.word	0x2000149e

00002cc8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    2cc8:	b570      	push	{r4, r5, r6, lr}
    2cca:	460d      	mov	r5, r1
    2ccc:	4606      	mov	r6, r0
    2cce:	f000 f8c1 	bl	2e54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    2cd2:	4c10      	ldr	r4, [pc, #64]	; (2d14 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    2cd4:	2810      	cmp	r0, #16
    2cd6:	d007      	beq.n	2ce8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2cd8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2cdc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    2ce0:	07c9      	lsls	r1, r1, #31
    2ce2:	d001      	beq.n	2ce8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2ce4:	2001      	movs	r0, #1
    2ce6:	bd70      	pop	{r4, r5, r6, pc}
    2ce8:	7861      	ldrb	r1, [r4, #1]
    2cea:	2908      	cmp	r1, #8
    2cec:	d210      	bcs.n	2d10 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    2cee:	2810      	cmp	r0, #16
    2cf0:	d008      	beq.n	2d04 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    2cf2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2cf6:	2101      	movs	r1, #1
    2cf8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2cfc:	7860      	ldrb	r0, [r4, #1]
    2cfe:	1c40      	adds	r0, r0, #1
    2d00:	7060      	strb	r0, [r4, #1]
    2d02:	e7ef      	b.n	2ce4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    2d04:	2201      	movs	r2, #1
    2d06:	4629      	mov	r1, r5
    2d08:	4630      	mov	r0, r6
    2d0a:	f000 f887 	bl	2e1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2d0e:	e7f5      	b.n	2cfc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    2d10:	2000      	movs	r0, #0
    2d12:	bd70      	pop	{r4, r5, r6, pc}
    2d14:	2000149e 	.word	0x2000149e

00002d18 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2d18:	b570      	push	{r4, r5, r6, lr}
    2d1a:	4d0b      	ldr	r5, [pc, #44]	; (2d48 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2d1c:	7828      	ldrb	r0, [r5, #0]
    2d1e:	1e40      	subs	r0, r0, #1
    2d20:	b244      	sxtb	r4, r0
    2d22:	e00a      	b.n	2d3a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    2d24:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2d28:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2d2c:	07c0      	lsls	r0, r0, #31
    2d2e:	d002      	beq.n	2d36 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    2d30:	b2e0      	uxtb	r0, r4
    2d32:	f000 f8ed 	bl	2f10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    2d36:	1e64      	subs	r4, r4, #1
    2d38:	b264      	sxtb	r4, r4
    2d3a:	2c00      	cmp	r4, #0
    2d3c:	daf2      	bge.n	2d24 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    2d3e:	4903      	ldr	r1, [pc, #12]	; (2d4c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    2d40:	2000      	movs	r0, #0
    2d42:	7048      	strb	r0, [r1, #1]
    2d44:	bd70      	pop	{r4, r5, r6, pc}
    2d46:	0000      	.short	0x0000
    2d48:	2000149e 	.word	0x2000149e
    2d4c:	2000034c 	.word	0x2000034c

00002d50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    2d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d54:	2400      	movs	r4, #0
    2d56:	4625      	mov	r5, r4
    2d58:	4e18      	ldr	r6, [pc, #96]	; (2dbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2d5a:	e029      	b.n	2db0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2d5c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    2d60:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    2d64:	07c0      	lsls	r0, r0, #31
    2d66:	d021      	beq.n	2dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2d68:	4628      	mov	r0, r5
    2d6a:	f000 f843 	bl	2df4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2d6e:	4603      	mov	r3, r0
    2d70:	f7ff ff44 	bl	2bfc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2d74:	4601      	mov	r1, r0
    2d76:	2000      	movs	r0, #0
    2d78:	2b10      	cmp	r3, #16
    2d7a:	d009      	beq.n	2d90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    2d7c:	18f2      	adds	r2, r6, r3
    2d7e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    2d82:	f1bc 0f01 	cmp.w	ip, #1
    2d86:	d002      	beq.n	2d8e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    2d88:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    2d8c:	b102      	cbz	r2, 2d90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    2d8e:	2001      	movs	r0, #1
    2d90:	1e40      	subs	r0, r0, #1
    2d92:	4201      	tst	r1, r0
    2d94:	d10a      	bne.n	2dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2d96:	480a      	ldr	r0, [pc, #40]	; (2dc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    2d98:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    2d9c:	5503      	strb	r3, [r0, r4]
    2d9e:	4620      	mov	r0, r4
    2da0:	1c64      	adds	r4, r4, #1
    2da2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    2da6:	b2e4      	uxtb	r4, r4
    2da8:	f005 fc20 	bl	85ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    2dac:	1c6d      	adds	r5, r5, #1
    2dae:	b2ed      	uxtb	r5, r5
    2db0:	7830      	ldrb	r0, [r6, #0]
    2db2:	42a8      	cmp	r0, r5
    2db4:	d8d2      	bhi.n	2d5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    2db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dba:	0000      	.short	0x0000
    2dbc:	2000149e 	.word	0x2000149e
    2dc0:	20000350 	.word	0x20000350
    2dc4:	4602      	mov	r2, r0
    2dc6:	4809      	ldr	r0, [pc, #36]	; (2dec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    2dc8:	b510      	push	{r4, lr}
    2dca:	7800      	ldrb	r0, [r0, #0]
    2dcc:	460b      	mov	r3, r1
    2dce:	b158      	cbz	r0, 2de8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2dd0:	4807      	ldr	r0, [pc, #28]	; (2df0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2dd2:	7881      	ldrb	r1, [r0, #2]
    2dd4:	b141      	cbz	r1, 2de8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2dd6:	b10b      	cbz	r3, 2ddc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2dd8:	1cc0      	adds	r0, r0, #3
    2dda:	e001      	b.n	2de0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2ddc:	4804      	ldr	r0, [pc, #16]	; (2df0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2dde:	3083      	adds	r0, #131	; 0x83
    2de0:	f004 fdd0 	bl	7984 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2de4:	2001      	movs	r0, #1
    2de6:	bd10      	pop	{r4, pc}
    2de8:	2000      	movs	r0, #0
    2dea:	bd10      	pop	{r4, pc}
    2dec:	2000034c 	.word	0x2000034c
    2df0:	2000149e 	.word	0x2000149e
    2df4:	4908      	ldr	r1, [pc, #32]	; (2e18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    2df6:	b510      	push	{r4, lr}
    2df8:	4603      	mov	r3, r0
    2dfa:	2000      	movs	r0, #0
    2dfc:	788a      	ldrb	r2, [r1, #2]
    2dfe:	e006      	b.n	2e0e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    2e00:	180c      	adds	r4, r1, r0
    2e02:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    2e06:	429c      	cmp	r4, r3
    2e08:	d004      	beq.n	2e14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2e0a:	1c40      	adds	r0, r0, #1
    2e0c:	b2c0      	uxtb	r0, r0
    2e0e:	4282      	cmp	r2, r0
    2e10:	d8f6      	bhi.n	2e00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    2e12:	2010      	movs	r0, #16
    2e14:	bd10      	pop	{r4, pc}
    2e16:	0000      	.short	0x0000
    2e18:	2000149e 	.word	0x2000149e
    2e1c:	b570      	push	{r4, r5, r6, lr}
    2e1e:	4b0c      	ldr	r3, [pc, #48]	; (2e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    2e20:	4604      	mov	r4, r0
    2e22:	7818      	ldrb	r0, [r3, #0]
    2e24:	1c45      	adds	r5, r0, #1
    2e26:	701d      	strb	r5, [r3, #0]
    2e28:	2810      	cmp	r0, #16
    2e2a:	d303      	bcc.n	2e34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2e2c:	2146      	movs	r1, #70	; 0x46
    2e2e:	2028      	movs	r0, #40	; 0x28
    2e30:	f7fe fab6 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2e34:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2e38:	680d      	ldr	r5, [r1, #0]
    2e3a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    2e3e:	8889      	ldrh	r1, [r1, #4]
    2e40:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    2e44:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2e48:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2e4c:	bd70      	pop	{r4, r5, r6, pc}
    2e4e:	0000      	.short	0x0000
    2e50:	2000149e 	.word	0x2000149e
    2e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e56:	4c1a      	ldr	r4, [pc, #104]	; (2ec0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2e58:	4603      	mov	r3, r0
    2e5a:	2000      	movs	r0, #0
    2e5c:	7825      	ldrb	r5, [r4, #0]
    2e5e:	e02a      	b.n	2eb6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    2e60:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2e64:	780f      	ldrb	r7, [r1, #0]
    2e66:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2e6a:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    2e6e:	ea87 070c 	eor.w	r7, r7, ip
    2e72:	405e      	eors	r6, r3
    2e74:	443e      	add	r6, r7
    2e76:	784f      	ldrb	r7, [r1, #1]
    2e78:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2e7c:	ea87 070c 	eor.w	r7, r7, ip
    2e80:	443e      	add	r6, r7
    2e82:	788f      	ldrb	r7, [r1, #2]
    2e84:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2e88:	ea87 070c 	eor.w	r7, r7, ip
    2e8c:	443e      	add	r6, r7
    2e8e:	78cf      	ldrb	r7, [r1, #3]
    2e90:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2e94:	ea87 070c 	eor.w	r7, r7, ip
    2e98:	443e      	add	r6, r7
    2e9a:	790f      	ldrb	r7, [r1, #4]
    2e9c:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    2ea0:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    2ea4:	ea87 070c 	eor.w	r7, r7, ip
    2ea8:	443e      	add	r6, r7
    2eaa:	794f      	ldrb	r7, [r1, #5]
    2eac:	4057      	eors	r7, r2
    2eae:	42f7      	cmn	r7, r6
    2eb0:	d004      	beq.n	2ebc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    2eb2:	1c40      	adds	r0, r0, #1
    2eb4:	b2c0      	uxtb	r0, r0
    2eb6:	4285      	cmp	r5, r0
    2eb8:	d8d2      	bhi.n	2e60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    2eba:	2010      	movs	r0, #16
    2ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ebe:	0000      	.short	0x0000
    2ec0:	2000149e 	.word	0x2000149e
    2ec4:	b570      	push	{r4, r5, r6, lr}
    2ec6:	4605      	mov	r5, r0
    2ec8:	f7ff ff94 	bl	2df4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2ecc:	2810      	cmp	r0, #16
    2ece:	d11c      	bne.n	2f0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2ed0:	4c0e      	ldr	r4, [pc, #56]	; (2f0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    2ed2:	7820      	ldrb	r0, [r4, #0]
    2ed4:	1e40      	subs	r0, r0, #1
    2ed6:	b2c0      	uxtb	r0, r0
    2ed8:	7020      	strb	r0, [r4, #0]
    2eda:	42a8      	cmp	r0, r5
    2edc:	d015      	beq.n	2f0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2ede:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2ee2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    2ee6:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2eea:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    2eee:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    2ef2:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    2ef6:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2efa:	7820      	ldrb	r0, [r4, #0]
    2efc:	f7ff ff7a 	bl	2df4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2f00:	2810      	cmp	r0, #16
    2f02:	d002      	beq.n	2f0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2f04:	4420      	add	r0, r4
    2f06:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2f0a:	bd70      	pop	{r4, r5, r6, pc}
    2f0c:	2000149e 	.word	0x2000149e
    2f10:	4905      	ldr	r1, [pc, #20]	; (2f28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    2f12:	784a      	ldrb	r2, [r1, #1]
    2f14:	1e52      	subs	r2, r2, #1
    2f16:	704a      	strb	r2, [r1, #1]
    2f18:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2f1c:	2200      	movs	r2, #0
    2f1e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    2f22:	f7ff bfcf 	b.w	2ec4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    2f26:	0000      	.short	0x0000
    2f28:	2000149e 	.word	0x2000149e

00002f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f30:	4604      	mov	r4, r0
    2f32:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2f36:	f04f 0901 	mov.w	r9, #1
    2f3a:	b171      	cbz	r1, 2f5a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2f3c:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2f40:	1e7e      	subs	r6, r7, #1
    2f42:	2901      	cmp	r1, #1
    2f44:	d025      	beq.n	2f92 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x66>
    2f46:	2902      	cmp	r1, #2
    2f48:	d04a      	beq.n	2fe0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb4>
    2f4a:	2903      	cmp	r1, #3
    2f4c:	d11f      	bne.n	2f8e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2f4e:	4639      	mov	r1, r7
    2f50:	4630      	mov	r0, r6
    2f52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f56:	f00b b8c5 	b.w	e0e4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2f5a:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2f5e:	2100      	movs	r1, #0
    2f60:	f00d ffa0 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2f64:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2f68:	4822      	ldr	r0, [pc, #136]	; (2ff4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>)
    2f6a:	66e8      	str	r0, [r5, #108]	; 0x6c
    2f6c:	2007      	movs	r0, #7
    2f6e:	6728      	str	r0, [r5, #112]	; 0x70
    2f70:	f814 0fec 	ldrb.w	r0, [r4, #236]!
    2f74:	f020 0004 	bic.w	r0, r0, #4
    2f78:	7020      	strb	r0, [r4, #0]
    2f7a:	20fe      	movs	r0, #254	; 0xfe
    2f7c:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2f80:	207f      	movs	r0, #127	; 0x7f
    2f82:	7668      	strb	r0, [r5, #25]
    2f84:	481c      	ldr	r0, [pc, #112]	; (2ff8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>)
    2f86:	60a8      	str	r0, [r5, #8]
    2f88:	2000      	movs	r0, #0
    2f8a:	e9c5 0000 	strd	r0, r0, [r5]
    2f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f92:	f04f 0800 	mov.w	r8, #0
    2f96:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2f9a:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2f9e:	6921      	ldr	r1, [r4, #16]
    2fa0:	4816      	ldr	r0, [pc, #88]	; (2ffc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2fa2:	460a      	mov	r2, r1
    2fa4:	4408      	add	r0, r1
    2fa6:	fbb0 f0f1 	udiv	r0, r0, r1
    2faa:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2fae:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2fb2:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    2fb6:	8b63      	ldrh	r3, [r4, #26]
    2fb8:	4628      	mov	r0, r5
    2fba:	f000 f821 	bl	3000 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    2fbe:	4639      	mov	r1, r7
    2fc0:	4630      	mov	r0, r6
    2fc2:	f00b f88f 	bl	e0e4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2fc6:	f00d fe84 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    2fca:	b118      	cbz	r0, 2fd4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa8>
    2fcc:	6960      	ldr	r0, [r4, #20]
    2fce:	f000 fb53 	bl	3678 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    2fd2:	b110      	cbz	r0, 2fda <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xae>
    2fd4:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    2fd8:	e7d9      	b.n	2f8e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2fda:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    2fde:	e7d6      	b.n	2f8e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2fe0:	6901      	ldr	r1, [r0, #16]
    2fe2:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    2fe6:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    2fea:	4628      	mov	r0, r5
    2fec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ff0:	f000 b806 	b.w	3000 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    2ff4:	3404492f 	.word	0x3404492f
    2ff8:	fffce000 	.word	0xfffce000
    2ffc:	01c9c37f 	.word	0x01c9c37f
    3000:	b510      	push	{r4, lr}
    3002:	2400      	movs	r4, #0
    3004:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    3008:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    300c:	434c      	muls	r4, r1
    300e:	fbb4 f4f2 	udiv	r4, r4, r2
    3012:	f820 4910 	strh.w	r4, [r0], #-16
    3016:	f240 2471 	movw	r4, #625	; 0x271
    301a:	4363      	muls	r3, r4
    301c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    3020:	1e5b      	subs	r3, r3, #1
    3022:	fbb3 f3f2 	udiv	r3, r3, r2
    3026:	81c3      	strh	r3, [r0, #14]
    3028:	4b09      	ldr	r3, [pc, #36]	; (3050 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    302a:	fbb3 f3f2 	udiv	r3, r3, r2
    302e:	1c5b      	adds	r3, r3, #1
    3030:	8283      	strh	r3, [r0, #20]
    3032:	8903      	ldrh	r3, [r0, #8]
    3034:	4363      	muls	r3, r4
    3036:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    303a:	1e5b      	subs	r3, r3, #1
    303c:	fbb3 f3f2 	udiv	r3, r3, r2
    3040:	6043      	str	r3, [r0, #4]
    3042:	6803      	ldr	r3, [r0, #0]
    3044:	434b      	muls	r3, r1
    3046:	fbb3 f1f2 	udiv	r1, r3, r2
    304a:	6001      	str	r1, [r0, #0]
    304c:	bd10      	pop	{r4, pc}
    304e:	0000      	.short	0x0000
    3050:	02625a00 	.word	0x02625a00

00003054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    3054:	4902      	ldr	r1, [pc, #8]	; (3060 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    3056:	f991 1000 	ldrsb.w	r1, [r1]
    305a:	f00a bff4 	b.w	e046 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    305e:	0000      	.short	0x0000
    3060:	2000036c 	.word	0x2000036c

00003064 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    3064:	b508      	push	{r3, lr}
    3066:	207f      	movs	r0, #127	; 0x7f
    3068:	f88d 0000 	strb.w	r0, [sp]
    306c:	4668      	mov	r0, sp
    306e:	f005 f9bd 	bl	83ec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    3072:	b140      	cbz	r0, 3086 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    3074:	4805      	ldr	r0, [pc, #20]	; (308c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    3076:	7840      	ldrb	r0, [r0, #1]
    3078:	4240      	negs	r0, r0
    307a:	b241      	sxtb	r1, r0
    307c:	f99d 0000 	ldrsb.w	r0, [sp]
    3080:	f00a ffe1 	bl	e046 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    3084:	bd08      	pop	{r3, pc}
    3086:	f99d 0000 	ldrsb.w	r0, [sp]
    308a:	bd08      	pop	{r3, pc}
    308c:	2000036c 	.word	0x2000036c
    3090:	b570      	push	{r4, r5, r6, lr}
    3092:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    3096:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    309a:	2401      	movs	r4, #1
    309c:	fb03 2101 	mla	r1, r3, r1, r2
    30a0:	2225      	movs	r2, #37	; 0x25
    30a2:	fbb1 f3f2 	udiv	r3, r1, r2
    30a6:	fb02 1113 	mls	r1, r2, r3, r1
    30aa:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    30ae:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    30b2:	f001 0307 	and.w	r3, r1, #7
    30b6:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    30ba:	fa04 f303 	lsl.w	r3, r4, r3
    30be:	421a      	tst	r2, r3
    30c0:	d004      	beq.n	30cc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x68>
    30c2:	bf00      	nop
    30c4:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    30c8:	2000      	movs	r0, #0
    30ca:	bd70      	pop	{r4, r5, r6, pc}
    30cc:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    30d0:	fbb1 f3f2 	udiv	r3, r1, r2
    30d4:	fb02 1113 	mls	r1, r2, r3, r1
    30d8:	1c49      	adds	r1, r1, #1
    30da:	b2c9      	uxtb	r1, r1
    30dc:	2300      	movs	r3, #0
    30de:	18c5      	adds	r5, r0, r3
    30e0:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    30e4:	428a      	cmp	r2, r1
    30e6:	d312      	bcc.n	310e <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xaa>
    30e8:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    30ec:	2200      	movs	r2, #0
    30ee:	bf00      	nop
    30f0:	fa04 f602 	lsl.w	r6, r4, r2
    30f4:	4235      	tst	r5, r6
    30f6:	d001      	beq.n	30fc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x98>
    30f8:	1e49      	subs	r1, r1, #1
    30fa:	b2c9      	uxtb	r1, r1
    30fc:	b121      	cbz	r1, 3108 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xa4>
    30fe:	1c52      	adds	r2, r2, #1
    3100:	b2d2      	uxtb	r2, r2
    3102:	2a08      	cmp	r2, #8
    3104:	d3f4      	bcc.n	30f0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x8c>
    3106:	e004      	b.n	3112 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xae>
    3108:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    310c:	e7da      	b.n	30c4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x60>
    310e:	1a89      	subs	r1, r1, r2
    3110:	b2c9      	uxtb	r1, r1
    3112:	1c5b      	adds	r3, r3, #1
    3114:	b2db      	uxtb	r3, r3
    3116:	2b05      	cmp	r3, #5
    3118:	d3e1      	bcc.n	30de <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x7a>
    311a:	201f      	movs	r0, #31
    311c:	bd70      	pop	{r4, r5, r6, pc}
    311e:	0000      	movs	r0, r0
    3120:	b570      	push	{r4, r5, r6, lr}
    3122:	1c49      	adds	r1, r1, #1
    3124:	2300      	movs	r3, #0
    3126:	b2c9      	uxtb	r1, r1
    3128:	2401      	movs	r4, #1
    312a:	18c5      	adds	r5, r0, r3
    312c:	79aa      	ldrb	r2, [r5, #6]
    312e:	428a      	cmp	r2, r1
    3130:	d312      	bcc.n	3158 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf4>
    3132:	f895 5001 	ldrb.w	r5, [r5, #1]
    3136:	2200      	movs	r2, #0
    3138:	fa04 f602 	lsl.w	r6, r4, r2
    313c:	4235      	tst	r5, r6
    313e:	d001      	beq.n	3144 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xe0>
    3140:	1e49      	subs	r1, r1, #1
    3142:	b2c9      	uxtb	r1, r1
    3144:	b121      	cbz	r1, 3150 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xec>
    3146:	1c52      	adds	r2, r2, #1
    3148:	b2d2      	uxtb	r2, r2
    314a:	2a08      	cmp	r2, #8
    314c:	d3f4      	bcc.n	3138 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xd4>
    314e:	e005      	b.n	315c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf8>
    3150:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    3154:	b2c0      	uxtb	r0, r0
    3156:	bd70      	pop	{r4, r5, r6, pc}
    3158:	1a89      	subs	r1, r1, r2
    315a:	b2c9      	uxtb	r1, r1
    315c:	1c5b      	adds	r3, r3, #1
    315e:	b2db      	uxtb	r3, r3
    3160:	2b05      	cmp	r3, #5
    3162:	d3e2      	bcc.n	312a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xc6>
    3164:	219d      	movs	r1, #157	; 0x9d
    3166:	2046      	movs	r0, #70	; 0x46
    3168:	f7fe f91a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000316c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    316c:	7841      	ldrb	r1, [r0, #1]
    316e:	b141      	cbz	r1, 3182 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    3170:	78c0      	ldrb	r0, [r0, #3]
    3172:	282b      	cmp	r0, #43	; 0x2b
    3174:	d203      	bcs.n	317e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    3176:	4a04      	ldr	r2, [pc, #16]	; (3188 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    3178:	5c10      	ldrb	r0, [r2, r0]
    317a:	4288      	cmp	r0, r1
    317c:	d101      	bne.n	3182 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    317e:	2001      	movs	r0, #1
    3180:	4770      	bx	lr
    3182:	2000      	movs	r0, #0
    3184:	4770      	bx	lr
    3186:	0000      	.short	0x0000
    3188:	00010fee 	.word	0x00010fee

0000318c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    318c:	b510      	push	{r4, lr}
    318e:	2201      	movs	r2, #1
    3190:	70c1      	strb	r1, [r0, #3]
    3192:	292b      	cmp	r1, #43	; 0x2b
    3194:	d202      	bcs.n	319c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    3196:	4a06      	ldr	r2, [pc, #24]	; (31b0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    3198:	5c52      	ldrb	r2, [r2, r1]
    319a:	e006      	b.n	31aa <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    319c:	29ff      	cmp	r1, #255	; 0xff
    319e:	d004      	beq.n	31aa <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    31a0:	f240 4175 	movw	r1, #1141	; 0x475
    31a4:	202a      	movs	r0, #42	; 0x2a
    31a6:	f7fe f8fb 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31aa:	7042      	strb	r2, [r0, #1]
    31ac:	bd10      	pop	{r4, pc}
    31ae:	0000      	.short	0x0000
    31b0:	00010fee 	.word	0x00010fee

000031b4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    31b4:	4904      	ldr	r1, [pc, #16]	; (31c8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    31b6:	7c89      	ldrb	r1, [r1, #18]
    31b8:	0749      	lsls	r1, r1, #29
    31ba:	d400      	bmi.n	31be <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    31bc:	b108      	cbz	r0, 31c2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    31be:	2000      	movs	r0, #0
    31c0:	4770      	bx	lr
    31c2:	2001      	movs	r0, #1
    31c4:	4770      	bx	lr
    31c6:	0000      	.short	0x0000
    31c8:	20000f68 	.word	0x20000f68

000031cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    31cc:	4803      	ldr	r0, [pc, #12]	; (31dc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    31ce:	7c80      	ldrb	r0, [r0, #18]
    31d0:	0780      	lsls	r0, r0, #30
    31d2:	d401      	bmi.n	31d8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    31d4:	2001      	movs	r0, #1
    31d6:	4770      	bx	lr
    31d8:	2000      	movs	r0, #0
    31da:	4770      	bx	lr
    31dc:	20000f68 	.word	0x20000f68

000031e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    31e0:	4803      	ldr	r0, [pc, #12]	; (31f0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    31e2:	7c80      	ldrb	r0, [r0, #18]
    31e4:	07c0      	lsls	r0, r0, #31
    31e6:	d001      	beq.n	31ec <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    31e8:	2000      	movs	r0, #0
    31ea:	4770      	bx	lr
    31ec:	2001      	movs	r0, #1
    31ee:	4770      	bx	lr
    31f0:	20000f68 	.word	0x20000f68
    31f4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    31f8:	4688      	mov	r8, r1
    31fa:	4699      	mov	r9, r3
    31fc:	4615      	mov	r5, r2
    31fe:	4604      	mov	r4, r0
    3200:	4669      	mov	r1, sp
    3202:	f00a fd7f 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3206:	bbe0      	cbnz	r0, 3282 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    3208:	9e01      	ldr	r6, [sp, #4]
    320a:	2700      	movs	r7, #0
    320c:	3680      	adds	r6, #128	; 0x80
    320e:	b17d      	cbz	r5, 3230 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    3210:	4620      	mov	r0, r4
    3212:	f7fe fcd7 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3216:	0004      	movs	r4, r0
    3218:	d00e      	beq.n	3238 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    321a:	4629      	mov	r1, r5
    321c:	f00a f97b 	bl	d516 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    3220:	b118      	cbz	r0, 322a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    3222:	491b      	ldr	r1, [pc, #108]	; (3290 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    3224:	8849      	ldrh	r1, [r1, #2]
    3226:	42a9      	cmp	r1, r5
    3228:	d208      	bcs.n	323c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    322a:	2000      	movs	r0, #0
    322c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3230:	2001      	movs	r0, #1
    3232:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    3236:	e024      	b.n	3282 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    3238:	2167      	movs	r1, #103	; 0x67
    323a:	e025      	b.n	3288 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    323c:	4601      	mov	r1, r0
    323e:	aa02      	add	r2, sp, #8
    3240:	4620      	mov	r0, r4
    3242:	f00a f961 	bl	d508 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    3246:	9802      	ldr	r0, [sp, #8]
    3248:	8007      	strh	r7, [r0, #0]
    324a:	7087      	strb	r7, [r0, #2]
    324c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    3250:	b109      	cbz	r1, 3256 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    3252:	f04f 0802 	mov.w	r8, #2
    3256:	4641      	mov	r1, r8
    3258:	f00b f897 	bl	e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    325c:	9802      	ldr	r0, [sp, #8]
    325e:	462a      	mov	r2, r5
    3260:	4649      	mov	r1, r9
    3262:	1cc0      	adds	r0, r0, #3
    3264:	f00d fda4 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3268:	4620      	mov	r0, r4
    326a:	4629      	mov	r1, r5
    326c:	f00a f90a 	bl	d484 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    3270:	b148      	cbz	r0, 3286 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    3272:	4668      	mov	r0, sp
    3274:	f00b f8e4 	bl	e440 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    3278:	9801      	ldr	r0, [sp, #4]
    327a:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    327e:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    3282:	2001      	movs	r0, #1
    3284:	e7d2      	b.n	322c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    3286:	217c      	movs	r1, #124	; 0x7c
    3288:	202b      	movs	r0, #43	; 0x2b
    328a:	f7fe f889 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    328e:	0000      	.short	0x0000
    3290:	20000f68 	.word	0x20000f68

00003294 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    3294:	4809      	ldr	r0, [pc, #36]	; (32bc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    3296:	b082      	sub	sp, #8
    3298:	7a00      	ldrb	r0, [r0, #8]
    329a:	f88d 0000 	strb.w	r0, [sp]
    329e:	9800      	ldr	r0, [sp, #0]
    32a0:	9000      	str	r0, [sp, #0]
    32a2:	f89d 0000 	ldrb.w	r0, [sp]
    32a6:	2800      	cmp	r0, #0
    32a8:	d105      	bne.n	32b6 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    32aa:	2202      	movs	r2, #2
    32ac:	4904      	ldr	r1, [pc, #16]	; (32c0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    32ae:	4803      	ldr	r0, [pc, #12]	; (32bc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    32b0:	b002      	add	sp, #8
    32b2:	f00b b8e8 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    32b6:	b002      	add	sp, #8
    32b8:	4770      	bx	lr
    32ba:	0000      	.short	0x0000
    32bc:	20000f80 	.word	0x20000f80
    32c0:	0000e4cd 	.word	0x0000e4cd

000032c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    32c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32c8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 3464 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a0>
    32cc:	f8df a198 	ldr.w	sl, [pc, #408]	; 3468 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    32d0:	4683      	mov	fp, r0
    32d2:	f04f 0901 	mov.w	r9, #1
    32d6:	2600      	movs	r6, #0
    32d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    32dc:	7a00      	ldrb	r0, [r0, #8]
    32de:	f88d 0000 	strb.w	r0, [sp]
    32e2:	9800      	ldr	r0, [sp, #0]
    32e4:	9000      	str	r0, [sp, #0]
    32e6:	f89d 1000 	ldrb.w	r1, [sp]
    32ea:	292a      	cmp	r1, #42	; 0x2a
    32ec:	d106      	bne.n	32fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    32ee:	f89a 1013 	ldrb.w	r1, [sl, #19]
    32f2:	b119      	cbz	r1, 32fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    32f4:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    32f8:	2800      	cmp	r0, #0
    32fa:	d07d      	beq.n	33f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    32fc:	2700      	movs	r7, #0
    32fe:	f88d 6000 	strb.w	r6, [sp]
    3302:	4668      	mov	r0, sp
    3304:	f000 f912 	bl	352c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>
    3308:	f89d 1000 	ldrb.w	r1, [sp]
    330c:	2900      	cmp	r1, #0
    330e:	d1f8      	bne.n	3302 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    3310:	2800      	cmp	r0, #0
    3312:	d071      	beq.n	33f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    3314:	4604      	mov	r4, r0
    3316:	7a00      	ldrb	r0, [r0, #8]
    3318:	f88d 0000 	strb.w	r0, [sp]
    331c:	9800      	ldr	r0, [sp, #0]
    331e:	9000      	str	r0, [sp, #0]
    3320:	f89d 5000 	ldrb.w	r5, [sp]
    3324:	1ea8      	subs	r0, r5, #2
    3326:	2830      	cmp	r0, #48	; 0x30
    3328:	d267      	bcs.n	33fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    332a:	e8df f000 	tbb	[pc, r0]
    332e:	2718      	.short	0x2718
    3330:	85852185 	.word	0x85852185
    3334:	6f696f27 	.word	0x6f696f27
    3338:	6f2d6f6f 	.word	0x6f2d6f6f
    333c:	85852185 	.word	0x85852185
    3340:	85216f6f 	.word	0x85216f6f
    3344:	6f858585 	.word	0x6f858585
    3348:	6f858545 	.word	0x6f858545
    334c:	856f6f21 	.word	0x856f6f21
    3350:	8585216f 	.word	0x8585216f
    3354:	8575554f 	.word	0x8575554f
    3358:	85858585 	.word	0x85858585
    335c:	4f85      	.short	0x4f85
    335e:	6862      	ldr	r2, [r4, #4]
    3360:	b912      	cbnz	r2, 3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3362:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    3366:	e064      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3368:	4659      	mov	r1, fp
    336a:	4620      	mov	r0, r4
    336c:	4790      	blx	r2
    336e:	e03c      	b.n	33ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    3370:	6862      	ldr	r2, [r4, #4]
    3372:	2a00      	cmp	r2, #0
    3374:	d1f8      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3376:	f240 11bb 	movw	r1, #443	; 0x1bb
    337a:	e05a      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    337c:	6862      	ldr	r2, [r4, #4]
    337e:	2a00      	cmp	r2, #0
    3380:	d1f2      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3382:	f240 214b 	movw	r1, #587	; 0x24b
    3386:	e054      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3388:	6860      	ldr	r0, [r4, #4]
    338a:	465d      	mov	r5, fp
    338c:	b180      	cbz	r0, 33b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xec>
    338e:	8804      	ldrh	r4, [r0, #0]
    3390:	4620      	mov	r0, r4
    3392:	f7fe fc17 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3396:	b168      	cbz	r0, 33b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    3398:	706e      	strb	r6, [r5, #1]
    339a:	220d      	movs	r2, #13
    339c:	702a      	strb	r2, [r5, #0]
    339e:	80ec      	strh	r4, [r5, #6]
    33a0:	f8a5 9008 	strh.w	r9, [r5, #8]
    33a4:	4631      	mov	r1, r6
    33a6:	f885 9004 	strb.w	r9, [r5, #4]
    33aa:	f00a f94b 	bl	d644 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    33ae:	e057      	b.n	3460 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    33b0:	21ce      	movs	r1, #206	; 0xce
    33b2:	e03e      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33b4:	21ae      	movs	r1, #174	; 0xae
    33b6:	e03c      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33b8:	6862      	ldr	r2, [r4, #4]
    33ba:	b122      	cbz	r2, 33c6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x102>
    33bc:	4659      	mov	r1, fp
    33be:	4620      	mov	r0, r4
    33c0:	4790      	blx	r2
    33c2:	2701      	movs	r7, #1
    33c4:	e011      	b.n	33ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    33c6:	f240 2163 	movw	r1, #611	; 0x263
    33ca:	e032      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33cc:	6862      	ldr	r2, [r4, #4]
    33ce:	2a00      	cmp	r2, #0
    33d0:	d1ca      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    33d2:	f240 216f 	movw	r1, #623	; 0x26f
    33d6:	e02c      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33d8:	f88b 6001 	strb.w	r6, [fp, #1]
    33dc:	2116      	movs	r1, #22
    33de:	f88b 1000 	strb.w	r1, [fp]
    33e2:	f8d4 1009 	ldr.w	r1, [r4, #9]
    33e6:	f8cb 1004 	str.w	r1, [fp, #4]
    33ea:	7226      	strb	r6, [r4, #8]
    33ec:	2d21      	cmp	r5, #33	; 0x21
    33ee:	d026      	beq.n	343e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17a>
    33f0:	2d14      	cmp	r5, #20
    33f2:	d027      	beq.n	3444 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    33f4:	2d22      	cmp	r5, #34	; 0x22
    33f6:	e001      	b.n	33fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    33f8:	e017      	b.n	342a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    33fa:	e01d      	b.n	3438 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    33fc:	d029      	beq.n	3452 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    33fe:	e02d      	b.n	345c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    3400:	6862      	ldr	r2, [r4, #4]
    3402:	2a00      	cmp	r2, #0
    3404:	d1b0      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3406:	f240 2181 	movw	r1, #641	; 0x281
    340a:	e012      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    340c:	6862      	ldr	r2, [r4, #4]
    340e:	2a00      	cmp	r2, #0
    3410:	d1aa      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3412:	f240 2196 	movw	r1, #662	; 0x296
    3416:	e00c      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3418:	4814      	ldr	r0, [pc, #80]	; (346c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a8>)
    341a:	6802      	ldr	r2, [r0, #0]
    341c:	b122      	cbz	r2, 3428 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    341e:	6860      	ldr	r0, [r4, #4]
    3420:	b128      	cbz	r0, 342e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3422:	8800      	ldrh	r0, [r0, #0]
    3424:	4659      	mov	r1, fp
    3426:	4790      	blx	r2
    3428:	2002      	movs	r0, #2
    342a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    342e:	f240 219f 	movw	r1, #671	; 0x29f
    3432:	2010      	movs	r0, #16
    3434:	f7fd ffb4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3438:	f240 21bd 	movw	r1, #701	; 0x2bd
    343c:	e7f9      	b.n	3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    343e:	f7ff fec5 	bl	31cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    3442:	e008      	b.n	3456 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    3444:	f89b 000e 	ldrb.w	r0, [fp, #14]
    3448:	f000 0001 	and.w	r0, r0, #1
    344c:	f7ff feb2 	bl	31b4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    3450:	e001      	b.n	3456 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    3452:	f7ff fec5 	bl	31e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    3456:	2800      	cmp	r0, #0
    3458:	f47f af3e 	bne.w	32d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    345c:	2f00      	cmp	r7, #0
    345e:	d1fb      	bne.n	3458 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x194>
    3460:	2004      	movs	r0, #4
    3462:	e7e2      	b.n	342a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    3464:	20000f94 	.word	0x20000f94
    3468:	20000f68 	.word	0x20000f68
    346c:	200000b0 	.word	0x200000b0

00003470 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    3470:	4901      	ldr	r1, [pc, #4]	; (3478 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    3472:	7008      	strb	r0, [r1, #0]
    3474:	f000 b8b0 	b.w	35d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    3478:	2000036e 	.word	0x2000036e

0000347c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    347c:	4902      	ldr	r1, [pc, #8]	; (3488 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    347e:	4801      	ldr	r0, [pc, #4]	; (3484 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    3480:	6008      	str	r0, [r1, #0]
    3482:	4770      	bx	lr
    3484:	0000348d 	.word	0x0000348d
    3488:	200000b0 	.word	0x200000b0
    348c:	b538      	push	{r3, r4, r5, lr}
    348e:	000d      	movs	r5, r1
    3490:	d014      	beq.n	34bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    3492:	80a8      	strh	r0, [r5, #4]
    3494:	2100      	movs	r1, #0
    3496:	7269      	strb	r1, [r5, #9]
    3498:	f7fe fb7e 	bl	1b98 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    349c:	4604      	mov	r4, r0
    349e:	f00a f815 	bl	d4cc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    34a2:	b168      	cbz	r0, 34c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x44>
    34a4:	4601      	mov	r1, r0
    34a6:	466a      	mov	r2, sp
    34a8:	4620      	mov	r0, r4
    34aa:	f00a f82d 	bl	d508 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    34ae:	80e8      	strh	r0, [r5, #6]
    34b0:	b148      	cbz	r0, 34c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4a>
    34b2:	28fb      	cmp	r0, #251	; 0xfb
    34b4:	d90a      	bls.n	34cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x50>
    34b6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    34ba:	e032      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34bc:	21fc      	movs	r1, #252	; 0xfc
    34be:	e030      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34c0:	f240 1105 	movw	r1, #261	; 0x105
    34c4:	e02d      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34c6:	f44f 7185 	mov.w	r1, #266	; 0x10a
    34ca:	e02a      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34cc:	9800      	ldr	r0, [sp, #0]
    34ce:	f00a ff08 	bl	e2e2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    34d2:	2801      	cmp	r0, #1
    34d4:	d004      	beq.n	34e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    34d6:	2802      	cmp	r0, #2
    34d8:	d002      	beq.n	34e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    34da:	f44f 718e 	mov.w	r1, #284	; 0x11c
    34de:	e020      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    34e0:	7228      	strb	r0, [r5, #8]
    34e2:	6828      	ldr	r0, [r5, #0]
    34e4:	b1a8      	cbz	r0, 3512 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    34e6:	9900      	ldr	r1, [sp, #0]
    34e8:	88ea      	ldrh	r2, [r5, #6]
    34ea:	1cc9      	adds	r1, r1, #3
    34ec:	f00d fc60 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    34f0:	4620      	mov	r0, r4
    34f2:	f009 ffb3 	bl	d45c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    34f6:	b178      	cbz	r0, 3518 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>
    34f8:	4620      	mov	r0, r4
    34fa:	2100      	movs	r1, #0
    34fc:	f00a f8a2 	bl	d644 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    3500:	b168      	cbz	r0, 351e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa2>
    3502:	4809      	ldr	r0, [pc, #36]	; (3528 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xac>)
    3504:	7cc1      	ldrb	r1, [r0, #19]
    3506:	2900      	cmp	r1, #0
    3508:	d002      	beq.n	3510 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x94>
    350a:	8a81      	ldrh	r1, [r0, #20]
    350c:	1e49      	subs	r1, r1, #1
    350e:	8281      	strh	r1, [r0, #20]
    3510:	bd38      	pop	{r3, r4, r5, pc}
    3512:	f240 1123 	movw	r1, #291	; 0x123
    3516:	e004      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3518:	f44f 7194 	mov.w	r1, #296	; 0x128
    351c:	e001      	b.n	3522 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    351e:	f240 112d 	movw	r1, #301	; 0x12d
    3522:	2010      	movs	r0, #16
    3524:	f7fd ff3c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3528:	20000f68 	.word	0x20000f68
    352c:	b538      	push	{r3, r4, r5, lr}
    352e:	4602      	mov	r2, r0
    3530:	4b11      	ldr	r3, [pc, #68]	; (3578 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>)
    3532:	2000      	movs	r0, #0
    3534:	7010      	strb	r0, [r2, #0]
    3536:	6858      	ldr	r0, [r3, #4]
    3538:	7a01      	ldrb	r1, [r0, #8]
    353a:	f88d 1000 	strb.w	r1, [sp]
    353e:	9900      	ldr	r1, [sp, #0]
    3540:	9100      	str	r1, [sp, #0]
    3542:	f89d 5000 	ldrb.w	r5, [sp]
    3546:	2401      	movs	r4, #1
    3548:	2d01      	cmp	r5, #1
    354a:	d006      	beq.n	355a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xde>
    354c:	f3ef 8110 	mrs	r1, PRIMASK
    3550:	b672      	cpsid	i
    3552:	6805      	ldr	r5, [r0, #0]
    3554:	605d      	str	r5, [r3, #4]
    3556:	b111      	cbz	r1, 355e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe2>
    3558:	e002      	b.n	3560 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe4>
    355a:	2000      	movs	r0, #0
    355c:	bd38      	pop	{r3, r4, r5, pc}
    355e:	b662      	cpsie	i
    3560:	7a01      	ldrb	r1, [r0, #8]
    3562:	f88d 1000 	strb.w	r1, [sp]
    3566:	9900      	ldr	r1, [sp, #0]
    3568:	9100      	str	r1, [sp, #0]
    356a:	f89d 3000 	ldrb.w	r3, [sp]
    356e:	2b00      	cmp	r3, #0
    3570:	d1f4      	bne.n	355c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe0>
    3572:	7014      	strb	r4, [r2, #0]
    3574:	bd38      	pop	{r3, r4, r5, pc}
    3576:	0000      	.short	0x0000
    3578:	20000f94 	.word	0x20000f94
    357c:	b538      	push	{r3, r4, r5, lr}
    357e:	b1d0      	cbz	r0, 35b6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13a>
    3580:	6041      	str	r1, [r0, #4]
    3582:	f100 0108 	add.w	r1, r0, #8
    3586:	700a      	strb	r2, [r1, #0]
    3588:	f3ef 8310 	mrs	r3, PRIMASK
    358c:	b672      	cpsid	i
    358e:	4c10      	ldr	r4, [pc, #64]	; (35d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x154>)
    3590:	6004      	str	r4, [r0, #0]
    3592:	1f21      	subs	r1, r4, #4
    3594:	684a      	ldr	r2, [r1, #4]
    3596:	b14a      	cbz	r2, 35ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    3598:	7a12      	ldrb	r2, [r2, #8]
    359a:	f88d 2000 	strb.w	r2, [sp]
    359e:	9a00      	ldr	r2, [sp, #0]
    35a0:	9200      	str	r2, [sp, #0]
    35a2:	f89d 5000 	ldrb.w	r5, [sp]
    35a6:	2d01      	cmp	r5, #1
    35a8:	d100      	bne.n	35ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    35aa:	600c      	str	r4, [r1, #0]
    35ac:	680a      	ldr	r2, [r1, #0]
    35ae:	6010      	str	r0, [r2, #0]
    35b0:	6008      	str	r0, [r1, #0]
    35b2:	b12b      	cbz	r3, 35c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    35b4:	e005      	b.n	35c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x146>
    35b6:	f240 21e2 	movw	r1, #738	; 0x2e2
    35ba:	2010      	movs	r0, #16
    35bc:	f7fd fef0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    35c0:	b662      	cpsie	i
    35c2:	4804      	ldr	r0, [pc, #16]	; (35d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    35c4:	7800      	ldrb	r0, [r0, #0]
    35c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    35ca:	f009 b83b 	b.w	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    35ce:	0000      	.short	0x0000
    35d0:	20000f98 	.word	0x20000f98
    35d4:	2000036e 	.word	0x2000036e
    35d8:	4808      	ldr	r0, [pc, #32]	; (35fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    35da:	b510      	push	{r4, lr}
    35dc:	2100      	movs	r1, #0
    35de:	6141      	str	r1, [r0, #20]
    35e0:	6181      	str	r1, [r0, #24]
    35e2:	61c1      	str	r1, [r0, #28]
    35e4:	6201      	str	r1, [r0, #32]
    35e6:	2212      	movs	r2, #18
    35e8:	f00d fc5c 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    35ec:	4803      	ldr	r0, [pc, #12]	; (35fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    35ee:	3014      	adds	r0, #20
    35f0:	2101      	movs	r1, #1
    35f2:	7301      	strb	r1, [r0, #12]
    35f4:	1d01      	adds	r1, r0, #4
    35f6:	6041      	str	r1, [r0, #4]
    35f8:	6001      	str	r1, [r0, #0]
    35fa:	bd10      	pop	{r4, pc}
    35fc:	20000f80 	.word	0x20000f80

00003600 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    3600:	b4f0      	push	{r4, r5, r6, r7}
    3602:	8150      	strh	r0, [r2, #10]
    3604:	890c      	ldrh	r4, [r1, #8]
    3606:	4613      	mov	r3, r2
    3608:	8194      	strh	r4, [r2, #12]
    360a:	898a      	ldrh	r2, [r1, #12]
    360c:	81da      	strh	r2, [r3, #14]
    360e:	8948      	ldrh	r0, [r1, #10]
    3610:	8218      	strh	r0, [r3, #16]
    3612:	89cd      	ldrh	r5, [r1, #14]
    3614:	825d      	strh	r5, [r3, #18]
    3616:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    3618:	42ae      	cmp	r6, r5
    361a:	d108      	bne.n	362e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    361c:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    361e:	4285      	cmp	r5, r0
    3620:	d105      	bne.n	362e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    3622:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    3624:	4295      	cmp	r5, r2
    3626:	d102      	bne.n	362e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    3628:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    362a:	42a2      	cmp	r2, r4
    362c:	d001      	beq.n	3632 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    362e:	2201      	movs	r2, #1
    3630:	e000      	b.n	3634 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    3632:	2200      	movs	r2, #0
    3634:	751a      	strb	r2, [r3, #20]
    3636:	8548      	strh	r0, [r1, #42]	; 0x2a
    3638:	8a58      	ldrh	r0, [r3, #18]
    363a:	85c8      	strh	r0, [r1, #46]	; 0x2e
    363c:	8998      	ldrh	r0, [r3, #12]
    363e:	8588      	strh	r0, [r1, #44]	; 0x2c
    3640:	89d8      	ldrh	r0, [r3, #14]
    3642:	8608      	strh	r0, [r1, #48]	; 0x30
    3644:	bcf0      	pop	{r4, r5, r6, r7}
    3646:	2214      	movs	r2, #20
    3648:	4901      	ldr	r1, [pc, #4]	; (3650 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    364a:	4618      	mov	r0, r3
    364c:	f00a bf2f 	b.w	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3650:	0000e68b 	.word	0x0000e68b

00003654 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    3654:	8150      	strh	r0, [r2, #10]
    3656:	8a88      	ldrh	r0, [r1, #20]
    3658:	8190      	strh	r0, [r2, #12]
    365a:	8ac8      	ldrh	r0, [r1, #22]
    365c:	81d0      	strh	r0, [r2, #14]
    365e:	8b08      	ldrh	r0, [r1, #24]
    3660:	8210      	strh	r0, [r2, #16]
    3662:	8b48      	ldrh	r0, [r1, #26]
    3664:	4613      	mov	r3, r2
    3666:	8250      	strh	r0, [r2, #18]
    3668:	2221      	movs	r2, #33	; 0x21
    366a:	4902      	ldr	r1, [pc, #8]	; (3674 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    366c:	4618      	mov	r0, r3
    366e:	f00a bf0a 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3672:	0000      	.short	0x0000
    3674:	0000e6c1 	.word	0x0000e6c1

00003678 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    3678:	b5f0      	push	{r4, r5, r6, r7, lr}
    367a:	f06f 021f 	mvn.w	r2, #31
    367e:	0c01      	lsrs	r1, r0, #16
    3680:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    3684:	251f      	movs	r5, #31
    3686:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    368a:	3854      	subs	r0, #84	; 0x54
    368c:	d00d      	beq.n	36aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    368e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    3692:	3855      	subs	r0, #85	; 0x55
    3694:	d009      	beq.n	36aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3696:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    369a:	38aa      	subs	r0, #170	; 0xaa
    369c:	d005      	beq.n	36aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    369e:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    36a2:	38aa      	subs	r0, #170	; 0xaa
    36a4:	d001      	beq.n	36aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    36a6:	2001      	movs	r0, #1
    36a8:	e000      	b.n	36ac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    36aa:	2000      	movs	r0, #0
    36ac:	2200      	movs	r2, #0
    36ae:	4613      	mov	r3, r2
    36b0:	ea4f 0402 	mov.w	r4, r2
    36b4:	ea82 0701 	eor.w	r7, r2, r1
    36b8:	43ff      	mvns	r7, r7
    36ba:	431f      	orrs	r7, r3
    36bc:	1c7f      	adds	r7, r7, #1
    36be:	d00f      	beq.n	36e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    36c0:	f006 0701 	and.w	r7, r6, #1
    36c4:	0852      	lsrs	r2, r2, #1
    36c6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    36ca:	f005 0701 	and.w	r7, r5, #1
    36ce:	085b      	lsrs	r3, r3, #1
    36d0:	0876      	lsrs	r6, r6, #1
    36d2:	086d      	lsrs	r5, r5, #1
    36d4:	1c64      	adds	r4, r4, #1
    36d6:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    36da:	2c16      	cmp	r4, #22
    36dc:	d3ea      	bcc.n	36b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    36de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36e0:	2000      	movs	r0, #0
    36e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000036e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    36e4:	b510      	push	{r4, lr}
    36e6:	4804      	ldr	r0, [pc, #16]	; (36f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    36e8:	f00b f84e 	bl	e788 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    36ec:	4802      	ldr	r0, [pc, #8]	; (36f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    36ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36f2:	3008      	adds	r0, #8
    36f4:	f00b b848 	b.w	e788 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    36f8:	200000b4 	.word	0x200000b4

000036fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    36fc:	4801      	ldr	r0, [pc, #4]	; (3704 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    36fe:	f000 b809 	b.w	3714 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3702:	0000      	.short	0x0000
    3704:	200000b4 	.word	0x200000b4

00003708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    3708:	4801      	ldr	r0, [pc, #4]	; (3710 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    370a:	f000 b803 	b.w	3714 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    370e:	0000      	.short	0x0000
    3710:	200000bc 	.word	0x200000bc
    3714:	b510      	push	{r4, lr}
    3716:	e9d0 2100 	ldrd	r2, r1, [r0]
    371a:	4b09      	ldr	r3, [pc, #36]	; (3740 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    371c:	4c09      	ldr	r4, [pc, #36]	; (3744 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    371e:	4353      	muls	r3, r2
    3720:	4354      	muls	r4, r2
    3722:	4051      	eors	r1, r2
    3724:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    3728:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    372c:	ea4f 41f1 	mov.w	r1, r1, ror #19
    3730:	e9c0 2100 	strd	r2, r1, [r0]
    3734:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    3738:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    373c:	4618      	mov	r0, r3
    373e:	bd10      	pop	{r4, pc}
    3740:	c6ef3760 	.word	0xc6ef3760
    3744:	9e3779bb 	.word	0x9e3779bb

00003748 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    3748:	b510      	push	{r4, lr}
    374a:	6840      	ldr	r0, [r0, #4]
    374c:	2200      	movs	r2, #0
    374e:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    3752:	3080      	adds	r0, #128	; 0x80
    3754:	1d09      	adds	r1, r1, #4
    3756:	07db      	lsls	r3, r3, #31
    3758:	d001      	beq.n	375e <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    375a:	2001      	movs	r0, #1
    375c:	bd10      	pop	{r4, pc}
    375e:	790c      	ldrb	r4, [r1, #4]
    3760:	680b      	ldr	r3, [r1, #0]
    3762:	4909      	ldr	r1, [pc, #36]	; (3788 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    3764:	400b      	ands	r3, r1
    3766:	f004 0107 	and.w	r1, r4, #7
    376a:	66c3      	str	r3, [r0, #108]	; 0x6c
    376c:	6701      	str	r1, [r0, #112]	; 0x70
    376e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    3772:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
    3776:	1c49      	adds	r1, r1, #1
    3778:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    377c:	68c1      	ldr	r1, [r0, #12]
    377e:	f041 0101 	orr.w	r1, r1, #1
    3782:	60c1      	str	r1, [r0, #12]
    3784:	2000      	movs	r0, #0
    3786:	bd10      	pop	{r4, pc}
    3788:	3704492f 	.word	0x3704492f

0000378c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    378c:	b510      	push	{r4, lr}
    378e:	1d04      	adds	r4, r0, #4
    3790:	f004 f8c8 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3794:	4a03      	ldr	r2, [pc, #12]	; (37a4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    3796:	f001 0107 	and.w	r1, r1, #7
    379a:	4010      	ands	r0, r2
    379c:	6020      	str	r0, [r4, #0]
    379e:	6061      	str	r1, [r4, #4]
    37a0:	bd10      	pop	{r4, pc}
    37a2:	0000      	.short	0x0000
    37a4:	3704492f 	.word	0x3704492f

000037a8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    37a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    37ac:	7803      	ldrb	r3, [r0, #0]
    37ae:	6840      	ldr	r0, [r0, #4]
    37b0:	1d0f      	adds	r7, r1, #4
    37b2:	f100 0580 	add.w	r5, r0, #128	; 0x80
    37b6:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    37ba:	4606      	mov	r6, r0
    37bc:	f04f 0800 	mov.w	r8, #0
    37c0:	7f6a      	ldrb	r2, [r5, #29]
    37c2:	2107      	movs	r1, #7
    37c4:	4628      	mov	r0, r5
    37c6:	f00a fac7 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    37ca:	b1b0      	cbz	r0, 37fa <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x52>
    37cc:	6838      	ldr	r0, [r7, #0]
    37ce:	4a15      	ldr	r2, [pc, #84]	; (3824 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7c>)
    37d0:	7939      	ldrb	r1, [r7, #4]
    37d2:	4010      	ands	r0, r2
    37d4:	f001 0107 	and.w	r1, r1, #7
    37d8:	66e8      	str	r0, [r5, #108]	; 0x6c
    37da:	6729      	str	r1, [r5, #112]	; 0x70
    37dc:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    37e0:	f885 801d 	strb.w	r8, [r5, #29]
    37e4:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    37e8:	4640      	mov	r0, r8
    37ea:	f88d 1000 	strb.w	r1, [sp]
    37ee:	9900      	ldr	r1, [sp, #0]
    37f0:	9100      	str	r1, [sp, #0]
    37f2:	f89d 1000 	ldrb.w	r1, [sp]
    37f6:	b991      	cbnz	r1, 381e <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x76>
    37f8:	e002      	b.n	3800 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    37fa:	2001      	movs	r0, #1
    37fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3800:	8831      	ldrh	r1, [r6, #0]
    3802:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    3806:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    380a:	6839      	ldr	r1, [r7, #0]
    380c:	66e1      	str	r1, [r4, #108]	; 0x6c
    380e:	6879      	ldr	r1, [r7, #4]
    3810:	6721      	str	r1, [r4, #112]	; 0x70
    3812:	2208      	movs	r2, #8
    3814:	4904      	ldr	r1, [pc, #16]	; (3828 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x80>)
    3816:	f104 0060 	add.w	r0, r4, #96	; 0x60
    381a:	f00a fe34 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    381e:	2000      	movs	r0, #0
    3820:	e7ec      	b.n	37fc <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x54>
    3822:	0000      	.short	0x0000
    3824:	3704492f 	.word	0x3704492f
    3828:	0000e8f5 	.word	0x0000e8f5

0000382c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    382c:	b570      	push	{r4, r5, r6, lr}
    382e:	1d0d      	adds	r5, r1, #4
    3830:	6844      	ldr	r4, [r0, #4]
    3832:	f004 f877 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3836:	4a06      	ldr	r2, [pc, #24]	; (3850 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    3838:	4010      	ands	r0, r2
    383a:	f001 0207 	and.w	r2, r1, #7
    383e:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    3842:	4001      	ands	r1, r0
    3844:	f361 0007 	bfi	r0, r1, #0, #8
    3848:	6028      	str	r0, [r5, #0]
    384a:	606a      	str	r2, [r5, #4]
    384c:	bd70      	pop	{r4, r5, r6, pc}
    384e:	0000      	.short	0x0000
    3850:	3704492f 	.word	0x3704492f

00003854 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    3854:	6841      	ldr	r1, [r0, #4]
    3856:	b082      	sub	sp, #8
    3858:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    385c:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    3860:	f88d 2000 	strb.w	r2, [sp]
    3864:	9a00      	ldr	r2, [sp, #0]
    3866:	9200      	str	r2, [sp, #0]
    3868:	f89d 2000 	ldrb.w	r2, [sp]
    386c:	2a00      	cmp	r2, #0
    386e:	d10b      	bne.n	3888 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    3870:	8809      	ldrh	r1, [r1, #0]
    3872:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    3876:	211a      	movs	r1, #26
    3878:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    387c:	2208      	movs	r2, #8
    387e:	4903      	ldr	r1, [pc, #12]	; (388c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    3880:	3060      	adds	r0, #96	; 0x60
    3882:	b002      	add	sp, #8
    3884:	f00a bdff 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3888:	b002      	add	sp, #8
    388a:	4770      	bx	lr
    388c:	0000e8f5 	.word	0x0000e8f5

00003890 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    3890:	b570      	push	{r4, r5, r6, lr}
    3892:	6844      	ldr	r4, [r0, #4]
    3894:	460d      	mov	r5, r1
    3896:	7803      	ldrb	r3, [r0, #0]
    3898:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    389c:	3480      	adds	r4, #128	; 0x80
    389e:	2600      	movs	r6, #0
    38a0:	2108      	movs	r1, #8
    38a2:	4620      	mov	r0, r4
    38a4:	f00a fa58 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    38a8:	b920      	cbnz	r0, 38b4 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    38aa:	7b20      	ldrb	r0, [r4, #12]
    38ac:	0780      	lsls	r0, r0, #30
    38ae:	d501      	bpl.n	38b4 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    38b0:	2001      	movs	r0, #1
    38b2:	bd70      	pop	{r4, r5, r6, pc}
    38b4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    38b8:	0780      	lsls	r0, r0, #30
    38ba:	d419      	bmi.n	38f0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    38bc:	4628      	mov	r0, r5
    38be:	f00a fd7e 	bl	e3be <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    38c2:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    38c6:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    38ca:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    38ce:	8868      	ldrh	r0, [r5, #2]
    38d0:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    38d4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    38d8:	f040 0002 	orr.w	r0, r0, #2
    38dc:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    38e0:	07c0      	lsls	r0, r0, #31
    38e2:	d009      	beq.n	38f8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    38e4:	2203      	movs	r2, #3
    38e6:	4911      	ldr	r1, [pc, #68]	; (392c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    38e8:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    38ec:	f00a fddf 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    38f0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    38f4:	07c0      	lsls	r0, r0, #31
    38f6:	d110      	bne.n	391a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    38f8:	68e0      	ldr	r0, [r4, #12]
    38fa:	0781      	lsls	r1, r0, #30
    38fc:	d503      	bpl.n	3906 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    38fe:	214f      	movs	r1, #79	; 0x4f
    3900:	2040      	movs	r0, #64	; 0x40
    3902:	f7fd fd4d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3906:	f040 0002 	orr.w	r0, r0, #2
    390a:	60e0      	str	r0, [r4, #12]
    390c:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    3910:	1c40      	adds	r0, r0, #1
    3912:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    3916:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    391a:	7f60      	ldrb	r0, [r4, #29]
    391c:	2801      	cmp	r0, #1
    391e:	d102      	bne.n	3926 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    3920:	7766      	strb	r6, [r4, #29]
    3922:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    3926:	2000      	movs	r0, #0
    3928:	bd70      	pop	{r4, r5, r6, pc}
    392a:	0000      	.short	0x0000
    392c:	0000e923 	.word	0x0000e923

00003930 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    3930:	4907      	ldr	r1, [pc, #28]	; (3950 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    3932:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3936:	1300      	asrs	r0, r0, #12
    3938:	7809      	ldrb	r1, [r1, #0]
    393a:	b240      	sxtb	r0, r0
    393c:	4249      	negs	r1, r1
    393e:	b249      	sxtb	r1, r1
    3940:	4408      	add	r0, r1
    3942:	f300 0007 	ssat	r0, #8, r0
    3946:	2800      	cmp	r0, #0
    3948:	dc00      	bgt.n	394c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    394a:	2000      	movs	r0, #0
    394c:	b2c0      	uxtb	r0, r0
    394e:	4770      	bx	lr
    3950:	200000c4 	.word	0x200000c4

00003954 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    3954:	4a04      	ldr	r2, [pc, #16]	; (3968 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    3956:	6892      	ldr	r2, [r2, #8]
    3958:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    395c:	434b      	muls	r3, r1
    395e:	4342      	muls	r2, r0
    3960:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3964:	4770      	bx	lr
    3966:	0000      	.short	0x0000
    3968:	200000c4 	.word	0x200000c4

0000396c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    396e:	6844      	ldr	r4, [r0, #4]
    3970:	4606      	mov	r6, r0
    3972:	f104 0580 	add.w	r5, r4, #128	; 0x80
    3976:	f000 f87f 	bl	3a78 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    397a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    397e:	2901      	cmp	r1, #1
    3980:	d11a      	bne.n	39b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3982:	2800      	cmp	r0, #0
    3984:	d018      	beq.n	39b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3986:	6870      	ldr	r0, [r6, #4]
    3988:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    398c:	f88d 1000 	strb.w	r1, [sp]
    3990:	9900      	ldr	r1, [sp, #0]
    3992:	9100      	str	r1, [sp, #0]
    3994:	f89d 1000 	ldrb.w	r1, [sp]
    3998:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    399c:	2900      	cmp	r1, #0
    399e:	d10b      	bne.n	39b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    39a0:	8821      	ldrh	r1, [r4, #0]
    39a2:	8141      	strh	r1, [r0, #10]
    39a4:	7e69      	ldrb	r1, [r5, #25]
    39a6:	7301      	strb	r1, [r0, #12]
    39a8:	7ea9      	ldrb	r1, [r5, #26]
    39aa:	7341      	strb	r1, [r0, #13]
    39ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    39b0:	221f      	movs	r2, #31
    39b2:	4902      	ldr	r1, [pc, #8]	; (39bc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    39b4:	f00a bd67 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    39b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39ba:	0000      	.short	0x0000
    39bc:	0000e9c5 	.word	0x0000e9c5
    39c0:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    39c4:	4a0d      	ldr	r2, [pc, #52]	; (39fc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    39c6:	b510      	push	{r4, lr}
    39c8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    39cc:	1309      	asrs	r1, r1, #12
    39ce:	1300      	asrs	r0, r0, #12
    39d0:	b24b      	sxtb	r3, r1
    39d2:	f992 4000 	ldrsb.w	r4, [r2]
    39d6:	4240      	negs	r0, r0
    39d8:	2100      	movs	r1, #0
    39da:	b240      	sxtb	r0, r0
    39dc:	42a3      	cmp	r3, r4
    39de:	da02      	bge.n	39e6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    39e0:	f992 1002 	ldrsb.w	r1, [r2, #2]
    39e4:	e005      	b.n	39f2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    39e6:	f992 4001 	ldrsb.w	r4, [r2, #1]
    39ea:	42a3      	cmp	r3, r4
    39ec:	dd04      	ble.n	39f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    39ee:	f992 1003 	ldrsb.w	r1, [r2, #3]
    39f2:	4408      	add	r0, r1
    39f4:	f300 0107 	ssat	r1, #8, r0
    39f8:	4608      	mov	r0, r1
    39fa:	bd10      	pop	{r4, pc}
    39fc:	200000c4 	.word	0x200000c4
    3a00:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3a04:	2200      	movs	r2, #0
    3a06:	704a      	strb	r2, [r1, #1]
    3a08:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3a0c:	700a      	strb	r2, [r1, #0]
    3a0e:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3a12:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3a16:	f00b fff0 	bl	f9fa <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3a1a:	4606      	mov	r6, r0
    3a1c:	68a0      	ldr	r0, [r4, #8]
    3a1e:	f7ff ffcf 	bl	39c0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3a22:	0007      	movs	r7, r0
    3a24:	d021      	beq.n	3a6a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3a26:	4620      	mov	r0, r4
    3a28:	f00a ffd4 	bl	e9d4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d01c      	beq.n	3a6a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3a30:	8828      	ldrh	r0, [r5, #0]
    3a32:	4669      	mov	r1, sp
    3a34:	f00a f966 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3a38:	b118      	cbz	r0, 3a42 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    3a3a:	2189      	movs	r1, #137	; 0x89
    3a3c:	207a      	movs	r0, #122	; 0x7a
    3a3e:	f7fd fcaf 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a42:	1c76      	adds	r6, r6, #1
    3a44:	b2f1      	uxtb	r1, r6
    3a46:	2302      	movs	r3, #2
    3a48:	463a      	mov	r2, r7
    3a4a:	4668      	mov	r0, sp
    3a4c:	f00b fff4 	bl	fa38 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    3a50:	2800      	cmp	r0, #0
    3a52:	d10a      	bne.n	3a6a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3a54:	4806      	ldr	r0, [pc, #24]	; (3a70 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    3a56:	4907      	ldr	r1, [pc, #28]	; (3a74 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    3a58:	7900      	ldrb	r0, [r0, #4]
    3a5a:	fba0 6501 	umull	r6, r5, r0, r1
    3a5e:	f007 fbe3 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3a62:	1980      	adds	r0, r0, r6
    3a64:	4169      	adcs	r1, r5
    3a66:	e9c4 0100 	strd	r0, r1, [r4]
    3a6a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3a6e:	0000      	.short	0x0000
    3a70:	200000c4 	.word	0x200000c4
    3a74:	000f4240 	.word	0x000f4240
    3a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a7c:	4607      	mov	r7, r0
    3a7e:	f7ff faf1 	bl	3064 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3a82:	687c      	ldr	r4, [r7, #4]
    3a84:	4605      	mov	r5, r0
    3a86:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    3a8a:	3480      	adds	r4, #128	; 0x80
    3a8c:	287f      	cmp	r0, #127	; 0x7f
    3a8e:	d03c      	beq.n	3b0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x72>
    3a90:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3a94:	687e      	ldr	r6, [r7, #4]
    3a96:	76a0      	strb	r0, [r4, #26]
    3a98:	4629      	mov	r1, r5
    3a9a:	68a0      	ldr	r0, [r4, #8]
    3a9c:	f7ff ff5a 	bl	3954 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3aa0:	60a0      	str	r0, [r4, #8]
    3aa2:	481b      	ldr	r0, [pc, #108]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3aa4:	7940      	ldrb	r0, [r0, #5]
    3aa6:	b190      	cbz	r0, 3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3aa8:	6878      	ldr	r0, [r7, #4]
    3aaa:	f100 0880 	add.w	r8, r0, #128	; 0x80
    3aae:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    3ab2:	f7ff ff85 	bl	39c0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3ab6:	b150      	cbz	r0, 3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3ab8:	4640      	mov	r0, r8
    3aba:	f00a ff8b 	bl	e9d4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3abe:	b130      	cbz	r0, 3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3ac0:	6878      	ldr	r0, [r7, #4]
    3ac2:	2231      	movs	r2, #49	; 0x31
    3ac4:	4913      	ldr	r1, [pc, #76]	; (3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
    3ac6:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    3aca:	f00a fcf0 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3ace:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3ad2:	2100      	movs	r1, #0
    3ad4:	1a28      	subs	r0, r5, r0
    3ad6:	d500      	bpl.n	3ada <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42>
    3ad8:	4240      	negs	r0, r0
    3ada:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    3ade:	4282      	cmp	r2, r0
    3ae0:	dc10      	bgt.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3ae2:	2aff      	cmp	r2, #255	; 0xff
    3ae4:	d00e      	beq.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3ae6:	7f20      	ldrb	r0, [r4, #28]
    3ae8:	1c40      	adds	r0, r0, #1
    3aea:	b2c0      	uxtb	r0, r0
    3aec:	7720      	strb	r0, [r4, #28]
    3aee:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3af2:	4290      	cmp	r0, r2
    3af4:	d802      	bhi.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    3af6:	7ee0      	ldrb	r0, [r4, #27]
    3af8:	287f      	cmp	r0, #127	; 0x7f
    3afa:	d103      	bne.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3afc:	2000      	movs	r0, #0
    3afe:	76e5      	strb	r5, [r4, #27]
    3b00:	7720      	strb	r0, [r4, #28]
    3b02:	2101      	movs	r1, #1
    3b04:	4608      	mov	r0, r1
    3b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b0a:	2000      	movs	r0, #0
    3b0c:	e7fb      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
    3b0e:	0000      	.short	0x0000
    3b10:	200000c4 	.word	0x200000c4
    3b14:	00003a01 	.word	0x00003a01

00003b18 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3b18:	b570      	push	{r4, r5, r6, lr}
    3b1a:	4604      	mov	r4, r0
    3b1c:	7c00      	ldrb	r0, [r0, #16]
    3b1e:	b300      	cbz	r0, 3b62 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3b20:	2802      	cmp	r0, #2
    3b22:	d01e      	beq.n	3b62 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3b24:	f05f 0001 	movs.w	r0, #1
    3b28:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3b2c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    3b30:	460d      	mov	r5, r1
    3b32:	b1c0      	cbz	r0, 3b66 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3b34:	7de0      	ldrb	r0, [r4, #23]
    3b36:	b1f0      	cbz	r0, 3b76 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3b38:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3b3c:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    3b40:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3b44:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3b48:	7c20      	ldrb	r0, [r4, #16]
    3b4a:	f00a ff6c 	bl	ea26 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    3b4e:	7620      	strb	r0, [r4, #24]
    3b50:	2008      	movs	r0, #8
    3b52:	7660      	strb	r0, [r4, #25]
    3b54:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3b58:	4629      	mov	r1, r5
    3b5a:	f00a ff50 	bl	e9fe <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    3b5e:	b9a8      	cbnz	r0, 3b8c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    3b60:	e00e      	b.n	3b80 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    3b62:	2000      	movs	r0, #0
    3b64:	e7e0      	b.n	3b28 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3b66:	2000      	movs	r0, #0
    3b68:	f7fe fab8 	bl	20dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3b6c:	2800      	cmp	r0, #0
    3b6e:	d1eb      	bne.n	3b48 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    3b70:	f240 41b9 	movw	r1, #1209	; 0x4b9
    3b74:	e001      	b.n	3b7a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3b76:	f240 41bd 	movw	r1, #1213	; 0x4bd
    3b7a:	202d      	movs	r0, #45	; 0x2d
    3b7c:	f7fd fc10 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b80:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3b84:	4629      	mov	r1, r5
    3b86:	f00a ff43 	bl	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    3b8a:	b100      	cbz	r0, 3b8e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3b8c:	2001      	movs	r0, #1
    3b8e:	76a0      	strb	r0, [r4, #26]
    3b90:	7e20      	ldrb	r0, [r4, #24]
    3b92:	b130      	cbz	r0, 3ba2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3b94:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3b98:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3b9c:	f00a f87e 	bl	dc9c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3ba0:	7660      	strb	r0, [r4, #25]
    3ba2:	f7ff f87d 	bl	2ca0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3ba6:	490c      	ldr	r1, [pc, #48]	; (3bd8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3ba8:	fba0 2301 	umull	r2, r3, r0, r1
    3bac:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3bb0:	f00b f8be 	bl	ed30 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    3bb4:	2100      	movs	r1, #0
    3bb6:	4620      	mov	r0, r4
    3bb8:	f00b f873 	bl	eca2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    3bbc:	2000      	movs	r0, #0
    3bbe:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3bc2:	78a0      	ldrb	r0, [r4, #2]
    3bc4:	0740      	lsls	r0, r0, #29
    3bc6:	d505      	bpl.n	3bd4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3bc8:	4620      	mov	r0, r4
    3bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3bce:	2100      	movs	r1, #0
    3bd0:	f000 bdd0 	b.w	4774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66c>
    3bd4:	bd70      	pop	{r4, r5, r6, pc}
    3bd6:	0000      	.short	0x0000
    3bd8:	000f4240 	.word	0x000f4240

00003bdc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3bdc:	b530      	push	{r4, r5, lr}
    3bde:	460c      	mov	r4, r1
    3be0:	b08d      	sub	sp, #52	; 0x34
    3be2:	4605      	mov	r5, r0
    3be4:	4601      	mov	r1, r0
    3be6:	2224      	movs	r2, #36	; 0x24
    3be8:	a802      	add	r0, sp, #8
    3bea:	f00d f8e1 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3bee:	a80b      	add	r0, sp, #44	; 0x2c
    3bf0:	f00b f8fb 	bl	edea <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3bf4:	7aa0      	ldrb	r0, [r4, #10]
    3bf6:	f88d 0018 	strb.w	r0, [sp, #24]
    3bfa:	7820      	ldrb	r0, [r4, #0]
    3bfc:	f88d 0008 	strb.w	r0, [sp, #8]
    3c00:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3c04:	f8ad 0000 	strh.w	r0, [sp]
    3c08:	f89d 0000 	ldrb.w	r0, [sp]
    3c0c:	f000 0101 	and.w	r1, r0, #1
    3c10:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3c14:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3c18:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3c1c:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3c20:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3c24:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3c28:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3c2c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3c30:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3c34:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3c38:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3c3c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3c40:	f8ad 000a 	strh.w	r0, [sp, #10]
    3c44:	7d20      	ldrb	r0, [r4, #20]
    3c46:	2801      	cmp	r0, #1
    3c48:	d006      	beq.n	3c58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3c4a:	2802      	cmp	r0, #2
    3c4c:	d004      	beq.n	3c58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3c4e:	f240 21ea 	movw	r1, #746	; 0x2ea
    3c52:	2006      	movs	r0, #6
    3c54:	f7fd fba4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c58:	f88d 000c 	strb.w	r0, [sp, #12]
    3c5c:	7a61      	ldrb	r1, [r4, #9]
    3c5e:	a80b      	add	r0, sp, #44	; 0x2c
    3c60:	f00b f8aa 	bl	edb8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3c64:	7d20      	ldrb	r0, [r4, #20]
    3c66:	2101      	movs	r1, #1
    3c68:	2802      	cmp	r0, #2
    3c6a:	d102      	bne.n	3c72 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3c6c:	7d60      	ldrb	r0, [r4, #21]
    3c6e:	1c40      	adds	r0, r0, #1
    3c70:	b2c1      	uxtb	r1, r0
    3c72:	7ea0      	ldrb	r0, [r4, #26]
    3c74:	1c40      	adds	r0, r0, #1
    3c76:	b2c2      	uxtb	r2, r0
    3c78:	a80b      	add	r0, sp, #44	; 0x2c
    3c7a:	f00b f864 	bl	ed46 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    3c7e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3c82:	0700      	lsls	r0, r0, #28
    3c84:	d501      	bpl.n	3c8a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3c86:	2000      	movs	r0, #0
    3c88:	e020      	b.n	3ccc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3c8a:	a80b      	add	r0, sp, #44	; 0x2c
    3c8c:	f00b f86d 	bl	ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3c90:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3c94:	2228      	movs	r2, #40	; 0x28
    3c96:	f000 fe11 	bl	48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3c9a:	f240 2171 	movw	r1, #625	; 0x271
    3c9e:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    3ca2:	fbb0 f0f1 	udiv	r0, r0, r1
    3ca6:	4348      	muls	r0, r1
    3ca8:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3cac:	f240 2371 	movw	r3, #625	; 0x271
    3cb0:	0a0a      	lsrs	r2, r1, #8
    3cb2:	f240 2171 	movw	r1, #625	; 0x271
    3cb6:	434a      	muls	r2, r1
    3cb8:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3cbc:	0a09      	lsrs	r1, r1, #8
    3cbe:	4359      	muls	r1, r3
    3cc0:	4290      	cmp	r0, r2
    3cc2:	d801      	bhi.n	3cc8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    3cc4:	9204      	str	r2, [sp, #16]
    3cc6:	e004      	b.n	3cd2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3cc8:	4288      	cmp	r0, r1
    3cca:	d801      	bhi.n	3cd0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3ccc:	9004      	str	r0, [sp, #16]
    3cce:	e000      	b.n	3cd2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3cd0:	9104      	str	r1, [sp, #16]
    3cd2:	7ca0      	ldrb	r0, [r4, #18]
    3cd4:	f88d 0017 	strb.w	r0, [sp, #23]
    3cd8:	7e20      	ldrb	r0, [r4, #24]
    3cda:	2801      	cmp	r0, #1
    3cdc:	d000      	beq.n	3ce0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    3cde:	2000      	movs	r0, #0
    3ce0:	f88d 0014 	strb.w	r0, [sp, #20]
    3ce4:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3ce6:	f009 fe41 	bl	d96c <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3cea:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3cec:	f009 fee6 	bl	dabc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    3cf0:	2224      	movs	r2, #36	; 0x24
    3cf2:	a902      	add	r1, sp, #8
    3cf4:	4628      	mov	r0, r5
    3cf6:	f00d f85b 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3cfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3cfc:	62a8      	str	r0, [r5, #40]	; 0x28
    3cfe:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    3d02:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3d04:	7ae0      	ldrb	r0, [r4, #11]
    3d06:	b168      	cbz	r0, 3d24 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3d08:	2802      	cmp	r0, #2
    3d0a:	d00b      	beq.n	3d24 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3d0c:	f05f 0001 	movs.w	r0, #1
    3d10:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3d14:	68e0      	ldr	r0, [r4, #12]
    3d16:	65a8      	str	r0, [r5, #88]	; 0x58
    3d18:	8a20      	ldrh	r0, [r4, #16]
    3d1a:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    3d1e:	b00d      	add	sp, #52	; 0x34
    3d20:	2000      	movs	r0, #0
    3d22:	bd30      	pop	{r4, r5, pc}
    3d24:	2000      	movs	r0, #0
    3d26:	e7f3      	b.n	3d10 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003d28 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3d28:	4a0a      	ldr	r2, [pc, #40]	; (3d54 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3d2a:	b510      	push	{r4, lr}
    3d2c:	2100      	movs	r1, #0
    3d2e:	7011      	strb	r1, [r2, #0]
    3d30:	4c09      	ldr	r4, [pc, #36]	; (3d58 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    3d32:	6060      	str	r0, [r4, #4]
    3d34:	f000 f822 	bl	3d7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3d38:	b110      	cbz	r0, 3d40 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3d3a:	f240 312d 	movw	r1, #813	; 0x32d
    3d3e:	e004      	b.n	3d4a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3d40:	68a0      	ldr	r0, [r4, #8]
    3d42:	2800      	cmp	r0, #0
    3d44:	d104      	bne.n	3d50 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3d46:	f44f 714c 	mov.w	r1, #816	; 0x330
    3d4a:	202d      	movs	r0, #45	; 0x2d
    3d4c:	f7fd fb28 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d50:	bd10      	pop	{r4, pc}
    3d52:	0000      	.short	0x0000
    3d54:	20000fa4 	.word	0x20000fa4
    3d58:	200000d0 	.word	0x200000d0

00003d5c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3d5c:	4902      	ldr	r1, [pc, #8]	; (3d68 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    3d5e:	4801      	ldr	r0, [pc, #4]	; (3d64 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3d60:	6088      	str	r0, [r1, #8]
    3d62:	4770      	bx	lr
    3d64:	000048a4 	.word	0x000048a4
    3d68:	200000d0 	.word	0x200000d0

00003d6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3d6c:	4902      	ldr	r1, [pc, #8]	; (3d78 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    3d6e:	6008      	str	r0, [r1, #0]
    3d70:	6889      	ldr	r1, [r1, #8]
    3d72:	6809      	ldr	r1, [r1, #0]
    3d74:	4708      	bx	r1
    3d76:	0000      	.short	0x0000
    3d78:	200000d0 	.word	0x200000d0

00003d7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3d7c:	4808      	ldr	r0, [pc, #32]	; (3da0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d7e:	b510      	push	{r4, lr}
    3d80:	7800      	ldrb	r0, [r0, #0]
    3d82:	b110      	cbz	r0, 3d8a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3d84:	240c      	movs	r4, #12
    3d86:	4620      	mov	r0, r4
    3d88:	bd10      	pop	{r4, pc}
    3d8a:	2400      	movs	r4, #0
    3d8c:	2218      	movs	r2, #24
    3d8e:	4621      	mov	r1, r4
    3d90:	4803      	ldr	r0, [pc, #12]	; (3da0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d92:	f00d f887 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d96:	f003 ffe7 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3d9a:	f003 fe0b 	bl	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3d9e:	e7f2      	b.n	3d86 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    3da0:	20000fa4 	.word	0x20000fa4

00003da4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3da4:	4904      	ldr	r1, [pc, #16]	; (3db8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3da6:	b510      	push	{r4, lr}
    3da8:	7809      	ldrb	r1, [r1, #0]
    3daa:	2901      	cmp	r1, #1
    3dac:	d101      	bne.n	3db2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    3dae:	f000 fbb5 	bl	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3db2:	2000      	movs	r0, #0
    3db4:	bd10      	pop	{r4, pc}
    3db6:	0000      	.short	0x0000
    3db8:	20000fa4 	.word	0x20000fa4

00003dbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    3dbc:	4902      	ldr	r1, [pc, #8]	; (3dc8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    3dbe:	4801      	ldr	r0, [pc, #4]	; (3dc4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    3dc0:	6008      	str	r0, [r1, #0]
    3dc2:	4770      	bx	lr
    3dc4:	00004649 	.word	0x00004649
    3dc8:	200000dc 	.word	0x200000dc

00003dcc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3dcc:	b510      	push	{r4, lr}
    3dce:	4604      	mov	r4, r0
    3dd0:	7880      	ldrb	r0, [r0, #2]
    3dd2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3dd6:	b158      	cbz	r0, 3df0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3dd8:	233c      	movs	r3, #60	; 0x3c
    3dda:	22ff      	movs	r2, #255	; 0xff
    3ddc:	4620      	mov	r0, r4
    3dde:	69e1      	ldr	r1, [r4, #28]
    3de0:	f000 fbc2 	bl	4568 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    3de4:	2211      	movs	r2, #17
    3de6:	4904      	ldr	r1, [pc, #16]	; (3df8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3de8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3dec:	f00a fb4b 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3df0:	2001      	movs	r0, #1
    3df2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3df6:	bd10      	pop	{r4, pc}
    3df8:	0000ec3b 	.word	0x0000ec3b
    3dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e00:	000f      	movs	r7, r1
    3e02:	4604      	mov	r4, r0
    3e04:	d023      	beq.n	3e4e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3e06:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3e0a:	4605      	mov	r5, r0
    3e0c:	f00a ffd6 	bl	edbc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3e10:	b9b0      	cbnz	r0, 3e40 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    3e12:	78a0      	ldrb	r0, [r4, #2]
    3e14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3e18:	b350      	cbz	r0, 3e70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3e1a:	4628      	mov	r0, r5
    3e1c:	f00a ffa5 	bl	ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3e20:	4606      	mov	r6, r0
    3e22:	4628      	mov	r0, r5
    3e24:	f00a ffca 	bl	edbc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3e28:	1a30      	subs	r0, r6, r0
    3e2a:	b2c0      	uxtb	r0, r0
    3e2c:	f00b f81b 	bl	ee66 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3e30:	4601      	mov	r1, r0
    3e32:	4835      	ldr	r0, [pc, #212]	; (3f08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3e34:	6842      	ldr	r2, [r0, #4]
    3e36:	4411      	add	r1, r2
    3e38:	6041      	str	r1, [r0, #4]
    3e3a:	4628      	mov	r0, r5
    3e3c:	f00a ffdc 	bl	edf8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3e40:	4628      	mov	r0, r5
    3e42:	f00a ff9e 	bl	ed82 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3e46:	4601      	mov	r1, r0
    3e48:	4620      	mov	r0, r4
    3e4a:	f00a ff66 	bl	ed1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    3e4e:	4d2f      	ldr	r5, [pc, #188]	; (3f0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    3e50:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3e54:	2100      	movs	r1, #0
    3e56:	6868      	ldr	r0, [r5, #4]
    3e58:	8001      	strh	r1, [r0, #0]
    3e5a:	f00a fec4 	bl	ebe6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e5e:	8860      	ldrh	r0, [r4, #2]
    3e60:	2813      	cmp	r0, #19
    3e62:	d013      	beq.n	3e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3e64:	dc09      	bgt.n	3e7a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3e66:	2810      	cmp	r0, #16
    3e68:	d036      	beq.n	3ed8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3e6a:	2812      	cmp	r0, #18
    3e6c:	d109      	bne.n	3e82 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    3e6e:	e031      	b.n	3ed4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    3e70:	4620      	mov	r0, r4
    3e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e76:	f000 bb51 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3e7a:	2815      	cmp	r0, #21
    3e7c:	d00f      	beq.n	3e9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e7e:	281d      	cmp	r0, #29
    3e80:	d00d      	beq.n	3e9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e82:	f240 6172 	movw	r1, #1650	; 0x672
    3e86:	202d      	movs	r0, #45	; 0x2d
    3e88:	f7fd fa8a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e8c:	2100      	movs	r1, #0
    3e8e:	6868      	ldr	r0, [r5, #4]
    3e90:	f00a f980 	bl	e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e94:	2101      	movs	r1, #1
    3e96:	6868      	ldr	r0, [r5, #4]
    3e98:	f00a fea5 	bl	ebe6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e9c:	e020      	b.n	3ee0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3e9e:	2101      	movs	r1, #1
    3ea0:	6868      	ldr	r0, [r5, #4]
    3ea2:	f00a f977 	bl	e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3ea6:	2101      	movs	r1, #1
    3ea8:	6868      	ldr	r0, [r5, #4]
    3eaa:	f00a fe9c 	bl	ebe6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3eae:	b136      	cbz	r6, 3ebe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    3eb0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3eb4:	6868      	ldr	r0, [r5, #4]
    3eb6:	f00a f988 	bl	e1ca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3eba:	2101      	movs	r1, #1
    3ebc:	e006      	b.n	3ecc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    3ebe:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3ec2:	6868      	ldr	r0, [r5, #4]
    3ec4:	f00a f981 	bl	e1ca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3ec8:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3ecc:	6868      	ldr	r0, [r5, #4]
    3ece:	f00a f982 	bl	e1d6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3ed2:	e005      	b.n	3ee0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3ed4:	2106      	movs	r1, #6
    3ed6:	e000      	b.n	3eda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3ed8:	2102      	movs	r1, #2
    3eda:	6868      	ldr	r0, [r5, #4]
    3edc:	f00a f95a 	bl	e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3ee0:	4620      	mov	r0, r4
    3ee2:	f000 fcbd 	bl	4860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x758>
    3ee6:	8860      	ldrh	r0, [r4, #2]
    3ee8:	281d      	cmp	r0, #29
    3eea:	d007      	beq.n	3efc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3eec:	2815      	cmp	r0, #21
    3eee:	d005      	beq.n	3efc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3ef0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3ef4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3ef6:	6868      	ldr	r0, [r5, #4]
    3ef8:	f00a f93c 	bl	e174 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3efc:	4639      	mov	r1, r7
    3efe:	4620      	mov	r0, r4
    3f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f04:	f000 b9f6 	b.w	42f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    3f08:	20000fa4 	.word	0x20000fa4
    3f0c:	200000d0 	.word	0x200000d0
    3f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f14:	4d2f      	ldr	r5, [pc, #188]	; (3fd4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3f16:	4680      	mov	r8, r0
    3f18:	7828      	ldrb	r0, [r5, #0]
    3f1a:	2802      	cmp	r0, #2
    3f1c:	d005      	beq.n	3f2a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3f1e:	7828      	ldrb	r0, [r5, #0]
    3f20:	2803      	cmp	r0, #3
    3f22:	d002      	beq.n	3f2a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3f24:	f640 512d 	movw	r1, #3373	; 0xd2d
    3f28:	e02b      	b.n	3f82 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3f2a:	4c2b      	ldr	r4, [pc, #172]	; (3fd8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3f2c:	6826      	ldr	r6, [r4, #0]
    3f2e:	7b30      	ldrb	r0, [r6, #12]
    3f30:	b118      	cbz	r0, 3f3a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    3f32:	f7ff f897 	bl	3064 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3f36:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3f3a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3f3e:	2700      	movs	r7, #0
    3f40:	f1b8 0f00 	cmp.w	r8, #0
    3f44:	f89c 0000 	ldrb.w	r0, [ip]
    3f48:	f000 060f 	and.w	r6, r0, #15
    3f4c:	d027      	beq.n	3f9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f4e:	6821      	ldr	r1, [r4, #0]
    3f50:	09c0      	lsrs	r0, r0, #7
    3f52:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3f56:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3f5a:	f10c 0109 	add.w	r1, ip, #9
    3f5e:	f009 fe05 	bl	db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3f62:	b1e0      	cbz	r0, 3f9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f64:	4639      	mov	r1, r7
    3f66:	6860      	ldr	r0, [r4, #4]
    3f68:	f00a f8f4 	bl	e154 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3f6c:	b1b8      	cbz	r0, 3f9e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f6e:	782a      	ldrb	r2, [r5, #0]
    3f70:	6820      	ldr	r0, [r4, #0]
    3f72:	4631      	mov	r1, r6
    3f74:	2a02      	cmp	r2, #2
    3f76:	d007      	beq.n	3f88 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f78:	782a      	ldrb	r2, [r5, #0]
    3f7a:	2a03      	cmp	r2, #3
    3f7c:	d004      	beq.n	3f88 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f7e:	f640 5106 	movw	r1, #3334	; 0xd06
    3f82:	202d      	movs	r0, #45	; 0x2d
    3f84:	f7fd fa0c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f88:	68a2      	ldr	r2, [r4, #8]
    3f8a:	782b      	ldrb	r3, [r5, #0]
    3f8c:	6952      	ldr	r2, [r2, #20]
    3f8e:	f06f 0607 	mvn.w	r6, #7
    3f92:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3f96:	58d2      	ldr	r2, [r2, r3]
    3f98:	4790      	blx	r2
    3f9a:	4606      	mov	r6, r0
    3f9c:	e000      	b.n	3fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    3f9e:	2601      	movs	r6, #1
    3fa0:	7ba8      	ldrb	r0, [r5, #14]
    3fa2:	b118      	cbz	r0, 3fac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3fa4:	f003 fee0 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3fa8:	f003 fd04 	bl	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3fac:	2e00      	cmp	r6, #0
    3fae:	d00f      	beq.n	3fd0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    3fb0:	6820      	ldr	r0, [r4, #0]
    3fb2:	f00a ff6e 	bl	ee92 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3fb6:	b130      	cbz	r0, 3fc6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    3fb8:	f003 fefe 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3fbc:	68a0      	ldr	r0, [r4, #8]
    3fbe:	6880      	ldr	r0, [r0, #8]
    3fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3fc4:	4700      	bx	r0
    3fc6:	6820      	ldr	r0, [r4, #0]
    3fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3fcc:	f000 baa6 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fd4:	20000fa4 	.word	0x20000fa4
    3fd8:	200000d0 	.word	0x200000d0
    3fdc:	b510      	push	{r4, lr}
    3fde:	2903      	cmp	r1, #3
    3fe0:	d002      	beq.n	3fe8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    3fe2:	2905      	cmp	r1, #5
    3fe4:	d10a      	bne.n	3ffc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3fe6:	e002      	b.n	3fee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    3fe8:	f000 fb92 	bl	4710 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x608>
    3fec:	e003      	b.n	3ff6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    3fee:	4904      	ldr	r1, [pc, #16]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3ff0:	6809      	ldr	r1, [r1, #0]
    3ff2:	b109      	cbz	r1, 3ff8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3ff4:	4788      	blx	r1
    3ff6:	b108      	cbz	r0, 3ffc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3ff8:	2000      	movs	r0, #0
    3ffa:	bd10      	pop	{r4, pc}
    3ffc:	2001      	movs	r0, #1
    3ffe:	bd10      	pop	{r4, pc}
    4000:	200000dc 	.word	0x200000dc
    4004:	4a09      	ldr	r2, [pc, #36]	; (402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>)
    4006:	0003      	movs	r3, r0
    4008:	6810      	ldr	r0, [r2, #0]
    400a:	d001      	beq.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400c:	f000 ba86 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    4010:	2900      	cmp	r1, #0
    4012:	d009      	beq.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4014:	6891      	ldr	r1, [r2, #8]
    4016:	4a06      	ldr	r2, [pc, #24]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    4018:	6909      	ldr	r1, [r1, #16]
    401a:	7812      	ldrb	r2, [r2, #0]
    401c:	f06f 030f 	mvn.w	r3, #15
    4020:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4024:	5889      	ldr	r1, [r1, r2]
    4026:	4708      	bx	r1
    4028:	4770      	bx	lr
    402a:	0000      	.short	0x0000
    402c:	200000d0 	.word	0x200000d0
    4030:	20000fa4 	.word	0x20000fa4
    4034:	b570      	push	{r4, r5, r6, lr}
    4036:	4604      	mov	r4, r0
    4038:	8840      	ldrh	r0, [r0, #2]
    403a:	2810      	cmp	r0, #16
    403c:	d019      	beq.n	4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
    403e:	4d10      	ldr	r5, [pc, #64]	; (4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>)
    4040:	7ba8      	ldrb	r0, [r5, #14]
    4042:	b120      	cbz	r0, 404e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e>
    4044:	f003 fcd6 	bl	79f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4048:	2040      	movs	r0, #64	; 0x40
    404a:	f003 fe9b 	bl	7d84 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    404e:	480d      	ldr	r0, [pc, #52]	; (4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>)
    4050:	6840      	ldr	r0, [r0, #4]
    4052:	f004 f91d 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4056:	78a0      	ldrb	r0, [r4, #2]
    4058:	0740      	lsls	r0, r0, #29
    405a:	d404      	bmi.n	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>
    405c:	2100      	movs	r1, #0
    405e:	7922      	ldrb	r2, [r4, #4]
    4060:	4608      	mov	r0, r1
    4062:	f004 f99d 	bl	83a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4066:	2000      	movs	r0, #0
    4068:	f003 ffc8 	bl	7ffc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    406c:	2002      	movs	r0, #2
    406e:	7028      	strb	r0, [r5, #0]
    4070:	bd70      	pop	{r4, r5, r6, pc}
    4072:	4620      	mov	r0, r4
    4074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4078:	2101      	movs	r1, #1
    407a:	f7ff bebf 	b.w	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    407e:	0000      	.short	0x0000
    4080:	20000fa4 	.word	0x20000fa4
    4084:	200000d0 	.word	0x200000d0
    4088:	b510      	push	{r4, lr}
    408a:	4c12      	ldr	r4, [pc, #72]	; (40d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd4>)
    408c:	6820      	ldr	r0, [r4, #0]
    408e:	f000 f825 	bl	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    4092:	6820      	ldr	r0, [r4, #0]
    4094:	f00a fefd 	bl	ee92 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    4098:	2800      	cmp	r0, #0
    409a:	6820      	ldr	r0, [r4, #0]
    409c:	d00b      	beq.n	40b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb6>
    409e:	490e      	ldr	r1, [pc, #56]	; (40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>)
    40a0:	780a      	ldrb	r2, [r1, #0]
    40a2:	2a02      	cmp	r2, #2
    40a4:	d00b      	beq.n	40be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbe>
    40a6:	780a      	ldrb	r2, [r1, #0]
    40a8:	2a03      	cmp	r2, #3
    40aa:	d008      	beq.n	40be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbe>
    40ac:	f640 4137 	movw	r1, #3127	; 0xc37
    40b0:	202d      	movs	r0, #45	; 0x2d
    40b2:	f7fd f975 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40ba:	f000 ba2f 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    40be:	68a2      	ldr	r2, [r4, #8]
    40c0:	7809      	ldrb	r1, [r1, #0]
    40c2:	68d2      	ldr	r2, [r2, #12]
    40c4:	f06f 0307 	mvn.w	r3, #7
    40c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    40cc:	5851      	ldr	r1, [r2, r1]
    40ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40d2:	4708      	bx	r1
    40d4:	200000d0 	.word	0x200000d0
    40d8:	20000fa4 	.word	0x20000fa4
    40dc:	b510      	push	{r4, lr}
    40de:	7b01      	ldrb	r1, [r0, #12]
    40e0:	b121      	cbz	r1, 40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
    40e2:	4604      	mov	r4, r0
    40e4:	f7fe ffbe 	bl	3064 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    40e8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    40ec:	4805      	ldr	r0, [pc, #20]	; (4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>)
    40ee:	7b80      	ldrb	r0, [r0, #14]
    40f0:	2800      	cmp	r0, #0
    40f2:	d005      	beq.n	4100 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x100>
    40f4:	f003 fe38 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    40f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40fc:	f003 bc5a 	b.w	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4100:	bd10      	pop	{r4, pc}
    4102:	0000      	.short	0x0000
    4104:	20000fa4 	.word	0x20000fa4

00004108 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    4108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    410c:	4d5d      	ldr	r5, [pc, #372]	; (4284 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    410e:	4604      	mov	r4, r0
    4110:	b086      	sub	sp, #24
    4112:	7828      	ldrb	r0, [r5, #0]
    4114:	2800      	cmp	r0, #0
    4116:	d14e      	bne.n	41b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    4118:	7820      	ldrb	r0, [r4, #0]
    411a:	28ff      	cmp	r0, #255	; 0xff
    411c:	d04b      	beq.n	41b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    411e:	f04f 0800 	mov.w	r8, #0
    4122:	f8a5 800c 	strh.w	r8, [r5, #12]
    4126:	f8c5 8004 	str.w	r8, [r5, #4]
    412a:	f885 8001 	strb.w	r8, [r5, #1]
    412e:	f885 8002 	strb.w	r8, [r5, #2]
    4132:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    4136:	4b54      	ldr	r3, [pc, #336]	; (4288 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    4138:	4e54      	ldr	r6, [pc, #336]	; (428c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    413a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    413c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    4140:	68b0      	ldr	r0, [r6, #8]
    4142:	6840      	ldr	r0, [r0, #4]
    4144:	9003      	str	r0, [sp, #12]
    4146:	4668      	mov	r0, sp
    4148:	f003 ff2c 	bl	7fa4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    414c:	f003 fffa 	bl	8144 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4150:	f004 fa7c 	bl	864c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    4154:	f003 fe08 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4158:	f003 fc2c 	bl	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    415c:	484c      	ldr	r0, [pc, #304]	; (4290 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    415e:	f004 f951 	bl	8404 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4162:	484c      	ldr	r0, [pc, #304]	; (4294 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    4164:	f004 f958 	bl	8418 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4168:	f104 0028 	add.w	r0, r4, #40	; 0x28
    416c:	4607      	mov	r7, r0
    416e:	f00a fe43 	bl	edf8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    4172:	4638      	mov	r0, r7
    4174:	f00a fe05 	bl	ed82 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    4178:	4601      	mov	r1, r0
    417a:	4620      	mov	r0, r4
    417c:	f00a fdcd 	bl	ed1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    4180:	f994 000e 	ldrsb.w	r0, [r4, #14]
    4184:	f004 f862 	bl	824c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4188:	7921      	ldrb	r1, [r4, #4]
    418a:	2000      	movs	r0, #0
    418c:	f003 fe9e 	bl	7ecc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4190:	2101      	movs	r1, #1
    4192:	60a8      	str	r0, [r5, #8]
    4194:	b198      	cbz	r0, 41be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    4196:	f104 0138 	add.w	r1, r4, #56	; 0x38
    419a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    419c:	f009 fc55 	bl	da4a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    41a0:	4607      	mov	r7, r0
    41a2:	f104 0140 	add.w	r1, r4, #64	; 0x40
    41a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    41a8:	f009 fc52 	bl	da50 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    41ac:	b14f      	cbz	r7, 41c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    41ae:	f894 1020 	ldrb.w	r1, [r4, #32]
    41b2:	b951      	cbnz	r1, 41ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    41b4:	e005      	b.n	41c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    41b6:	200c      	movs	r0, #12
    41b8:	b006      	add	sp, #24
    41ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41be:	7029      	strb	r1, [r5, #0]
    41c0:	e05e      	b.n	4280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    41c2:	b120      	cbz	r0, 41ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    41c4:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    41c8:	b108      	cbz	r0, 41ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    41ca:	2701      	movs	r7, #1
    41cc:	e000      	b.n	41d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    41ce:	2700      	movs	r7, #0
    41d0:	7ea0      	ldrb	r0, [r4, #26]
    41d2:	b920      	cbnz	r0, 41de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    41d4:	7e20      	ldrb	r0, [r4, #24]
    41d6:	b910      	cbnz	r0, 41de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    41d8:	78a0      	ldrb	r0, [r4, #2]
    41da:	0740      	lsls	r0, r0, #29
    41dc:	d523      	bpl.n	4226 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    41de:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    41e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    41e6:	4050      	eors	r0, r2
    41e8:	ea70 0101 	orns	r1, r0, r1
    41ec:	d006      	beq.n	41fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    41ee:	f007 f81b 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    41f2:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    41f6:	1a80      	subs	r0, r0, r2
    41f8:	4199      	sbcs	r1, r3
    41fa:	d200      	bcs.n	41fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    41fc:	b19f      	cbz	r7, 4226 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    41fe:	f7fe fd4f 	bl	2ca0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4202:	4925      	ldr	r1, [pc, #148]	; (4298 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    4204:	fba0 2301 	umull	r2, r3, r0, r1
    4208:	f104 0048 	add.w	r0, r4, #72	; 0x48
    420c:	f00a fd90 	bl	ed30 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    4210:	2101      	movs	r1, #1
    4212:	4620      	mov	r0, r4
    4214:	f00a fd45 	bl	eca2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    4218:	78a0      	ldrb	r0, [r4, #2]
    421a:	0740      	lsls	r0, r0, #29
    421c:	d503      	bpl.n	4226 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    421e:	2101      	movs	r1, #1
    4220:	4620      	mov	r0, r4
    4222:	f000 faa7 	bl	4774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66c>
    4226:	f7fe fd93 	bl	2d50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    422a:	6870      	ldr	r0, [r6, #4]
    422c:	1cc0      	adds	r0, r0, #3
    422e:	f009 fd28 	bl	dc82 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    4232:	73a8      	strb	r0, [r5, #14]
    4234:	78a0      	ldrb	r0, [r4, #2]
    4236:	07c0      	lsls	r0, r0, #31
    4238:	d022      	beq.n	4280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    423a:	f8cd 8010 	str.w	r8, [sp, #16]
    423e:	20ff      	movs	r0, #255	; 0xff
    4240:	f8cd 8014 	str.w	r8, [sp, #20]
    4244:	73e8      	strb	r0, [r5, #15]
    4246:	69e6      	ldr	r6, [r4, #28]
    4248:	f106 070a 	add.w	r7, r6, #10
    424c:	e013      	b.n	4276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    424e:	9c04      	ldr	r4, [sp, #16]
    4250:	42b4      	cmp	r4, r6
    4252:	d010      	beq.n	4276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    4254:	7a72      	ldrb	r2, [r6, #9]
    4256:	7a60      	ldrb	r0, [r4, #9]
    4258:	463b      	mov	r3, r7
    425a:	f104 010a 	add.w	r1, r4, #10
    425e:	f009 fc85 	bl	db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4262:	b140      	cbz	r0, 4276 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    4264:	78a0      	ldrb	r0, [r4, #2]
    4266:	73e8      	strb	r0, [r5, #15]
    4268:	f8d4 0003 	ldr.w	r0, [r4, #3]
    426c:	6128      	str	r0, [r5, #16]
    426e:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    4272:	82a8      	strh	r0, [r5, #20]
    4274:	e004      	b.n	4280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    4276:	a804      	add	r0, sp, #16
    4278:	f7fd fad0 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    427c:	2800      	cmp	r0, #0
    427e:	d0e6      	beq.n	424e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    4280:	2000      	movs	r0, #0
    4282:	e799      	b.n	41b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    4284:	20000fa4 	.word	0x20000fa4
    4288:	00004884 	.word	0x00004884
    428c:	200000d0 	.word	0x200000d0
    4290:	8e89bed6 	.word	0x8e89bed6
    4294:	00555555 	.word	0x00555555
    4298:	000f4240 	.word	0x000f4240
    429c:	b510      	push	{r4, lr}
    429e:	4604      	mov	r4, r0
    42a0:	f7ff ff32 	bl	4108 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    42a4:	2800      	cmp	r0, #0
    42a6:	d108      	bne.n	42ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    42a8:	4804      	ldr	r0, [pc, #16]	; (42bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    42aa:	7800      	ldrb	r0, [r0, #0]
    42ac:	2801      	cmp	r0, #1
    42ae:	d003      	beq.n	42b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    42b0:	2100      	movs	r1, #0
    42b2:	4620      	mov	r0, r4
    42b4:	f7ff fda2 	bl	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    42b8:	2000      	movs	r0, #0
    42ba:	bd10      	pop	{r4, pc}
    42bc:	20000fa4 	.word	0x20000fa4
    42c0:	480a      	ldr	r0, [pc, #40]	; (42ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    42c2:	b510      	push	{r4, lr}
    42c4:	490a      	ldr	r1, [pc, #40]	; (42f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    42c6:	6804      	ldr	r4, [r0, #0]
    42c8:	7808      	ldrb	r0, [r1, #0]
    42ca:	2800      	cmp	r0, #0
    42cc:	d00d      	beq.n	42ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    42ce:	7808      	ldrb	r0, [r1, #0]
    42d0:	2802      	cmp	r0, #2
    42d2:	d002      	beq.n	42da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    42d4:	7808      	ldrb	r0, [r1, #0]
    42d6:	2803      	cmp	r0, #3
    42d8:	d102      	bne.n	42e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    42da:	4620      	mov	r0, r4
    42dc:	f7ff fefe 	bl	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    42e0:	4620      	mov	r0, r4
    42e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42e6:	f000 b919 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    42ea:	bd10      	pop	{r4, pc}
    42ec:	200000d0 	.word	0x200000d0
    42f0:	20000fa4 	.word	0x20000fa4
    42f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42f8:	4604      	mov	r4, r0
    42fa:	4829      	ldr	r0, [pc, #164]	; (43a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    42fc:	460d      	mov	r5, r1
    42fe:	6840      	ldr	r0, [r0, #4]
    4300:	f003 ffc6 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4304:	4e27      	ldr	r6, [pc, #156]	; (43a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>)
    4306:	2004      	movs	r0, #4
    4308:	7030      	strb	r0, [r6, #0]
    430a:	b355      	cbz	r5, 4362 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    430c:	8860      	ldrh	r0, [r4, #2]
    430e:	2810      	cmp	r0, #16
    4310:	d023      	beq.n	435a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    4312:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4316:	4680      	mov	r8, r0
    4318:	68b5      	ldr	r5, [r6, #8]
    431a:	f00a fd26 	bl	ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    431e:	4607      	mov	r7, r0
    4320:	4640      	mov	r0, r8
    4322:	f00a fd4b 	bl	edbc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    4326:	1a38      	subs	r0, r7, r0
    4328:	1e40      	subs	r0, r0, #1
    432a:	b2c0      	uxtb	r0, r0
    432c:	8861      	ldrh	r1, [r4, #2]
    432e:	2228      	movs	r2, #40	; 0x28
    4330:	f000 fae4 	bl	48fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    4334:	4405      	add	r5, r0
    4336:	78a0      	ldrb	r0, [r4, #2]
    4338:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    433c:	b130      	cbz	r0, 434c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    433e:	6870      	ldr	r0, [r6, #4]
    4340:	4405      	add	r5, r0
    4342:	f00a fd94 	bl	ee6e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    4346:	4428      	add	r0, r5
    4348:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    434c:	7922      	ldrb	r2, [r4, #4]
    434e:	4629      	mov	r1, r5
    4350:	2000      	movs	r0, #0
    4352:	f003 ffb3 	bl	82bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    4356:	b920      	cbnz	r0, 4362 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    4358:	e00c      	b.n	4374 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26c>
    435a:	7921      	ldrb	r1, [r4, #4]
    435c:	2000      	movs	r0, #0
    435e:	f003 fd7b 	bl	7e58 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    4362:	8860      	ldrh	r0, [r4, #2]
    4364:	2813      	cmp	r0, #19
    4366:	d011      	beq.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    4368:	dc07      	bgt.n	437a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    436a:	2810      	cmp	r0, #16
    436c:	d015      	beq.n	439a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x292>
    436e:	2812      	cmp	r0, #18
    4370:	d107      	bne.n	4382 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    4372:	e00b      	b.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    4374:	f640 51a8 	movw	r1, #3496	; 0xda8
    4378:	e005      	b.n	4386 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27e>
    437a:	2815      	cmp	r0, #21
    437c:	d006      	beq.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    437e:	281d      	cmp	r0, #29
    4380:	d004      	beq.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    4382:	f640 51bc 	movw	r1, #3516	; 0xdbc
    4386:	202d      	movs	r0, #45	; 0x2d
    4388:	f7fd f80a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    438c:	7922      	ldrb	r2, [r4, #4]
    438e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4392:	2101      	movs	r1, #1
    4394:	2000      	movs	r0, #0
    4396:	f004 b803 	b.w	83a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    439e:	0000      	.short	0x0000
    43a0:	200000d0 	.word	0x200000d0
    43a4:	20000fa4 	.word	0x20000fa4
    43a8:	b538      	push	{r3, r4, r5, lr}
    43aa:	4604      	mov	r4, r0
    43ac:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    43b0:	460b      	mov	r3, r1
    43b2:	f88d 0000 	strb.w	r0, [sp]
    43b6:	9800      	ldr	r0, [sp, #0]
    43b8:	9000      	str	r0, [sp, #0]
    43ba:	f89d 0000 	ldrb.w	r0, [sp]
    43be:	2800      	cmp	r0, #0
    43c0:	d13a      	bne.n	4438 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    43c2:	7820      	ldrb	r0, [r4, #0]
    43c4:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    43c8:	2bff      	cmp	r3, #255	; 0xff
    43ca:	d010      	beq.n	43ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e6>
    43cc:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    43d0:	1e51      	subs	r1, r2, #1
    43d2:	4618      	mov	r0, r3
    43d4:	f7fe fc38 	bl	2c48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    43d8:	b130      	cbz	r0, 43e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e0>
    43da:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    43de:	f040 0002 	orr.w	r0, r0, #2
    43e2:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    43e6:	e011      	b.n	440c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    43e8:	f241 0108 	movw	r1, #4104	; 0x1008
    43ec:	e021      	b.n	4432 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    43ee:	4813      	ldr	r0, [pc, #76]	; (443c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    43f0:	6840      	ldr	r0, [r0, #4]
    43f2:	7801      	ldrb	r1, [r0, #0]
    43f4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    43f8:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    43fc:	f8d0 1003 	ldr.w	r1, [r0, #3]
    4400:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    4404:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    4408:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    440c:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    4410:	287f      	cmp	r0, #127	; 0x7f
    4412:	d00c      	beq.n	442e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    4414:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    4418:	207f      	movs	r0, #127	; 0x7f
    441a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    441e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    4422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4426:	2220      	movs	r2, #32
    4428:	4905      	ldr	r1, [pc, #20]	; (4440 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>)
    442a:	f00a b82c 	b.w	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    442e:	f640 616c 	movw	r1, #3692	; 0xe6c
    4432:	202d      	movs	r0, #45	; 0x2d
    4434:	f7fc ffb4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4438:	bd38      	pop	{r3, r4, r5, pc}
    443a:	0000      	.short	0x0000
    443c:	200000d0 	.word	0x200000d0
    4440:	0000ec8b 	.word	0x0000ec8b
    4444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4448:	4690      	mov	r8, r2
    444a:	460e      	mov	r6, r1
    444c:	4604      	mov	r4, r0
    444e:	2903      	cmp	r1, #3
    4450:	d004      	beq.n	445c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    4452:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    4456:	b108      	cbz	r0, 445c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    4458:	2001      	movs	r0, #1
    445a:	e000      	b.n	445e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x356>
    445c:	2000      	movs	r0, #0
    445e:	4681      	mov	r9, r0
    4460:	f003 fc9c 	bl	7d9c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    4464:	4605      	mov	r5, r0
    4466:	2e03      	cmp	r6, #3
    4468:	d003      	beq.n	4472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36a>
    446a:	2701      	movs	r7, #1
    446c:	2e05      	cmp	r6, #5
    446e:	d005      	beq.n	447c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x374>
    4470:	e008      	b.n	4484 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37c>
    4472:	78a0      	ldrb	r0, [r4, #2]
    4474:	2702      	movs	r7, #2
    4476:	f3c0 0040 	ubfx	r0, r0, #1, #1
    447a:	e001      	b.n	4480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    447c:	78a0      	ldrb	r0, [r4, #2]
    447e:	07c0      	lsls	r0, r0, #31
    4480:	2800      	cmp	r0, #0
    4482:	d042      	beq.n	450a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x402>
    4484:	f1b9 0f00 	cmp.w	r9, #0
    4488:	d13e      	bne.n	4508 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    448a:	4822      	ldr	r0, [pc, #136]	; (4514 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>)
    448c:	7b80      	ldrb	r0, [r0, #14]
    448e:	b140      	cbz	r0, 44a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39a>
    4490:	f009 fbfa 	bl	dc88 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    4494:	f888 0000 	strb.w	r0, [r8]
    4498:	28ff      	cmp	r0, #255	; 0xff
    449a:	d002      	beq.n	44a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39a>
    449c:	f7fe fbee 	bl	2c7c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    44a0:	4305      	orrs	r5, r0
    44a2:	4e1d      	ldr	r6, [pc, #116]	; (4518 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>)
    44a4:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    44a8:	f104 0358 	add.w	r3, r4, #88	; 0x58
    44ac:	6871      	ldr	r1, [r6, #4]
    44ae:	f811 0b03 	ldrb.w	r0, [r1], #3
    44b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    44b6:	f009 fb59 	bl	db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    44ba:	f898 1000 	ldrb.w	r1, [r8]
    44be:	29ff      	cmp	r1, #255	; 0xff
    44c0:	d004      	beq.n	44cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    44c2:	b990      	cbnz	r0, 44ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    44c4:	7e60      	ldrb	r0, [r4, #25]
    44c6:	4288      	cmp	r0, r1
    44c8:	d00f      	beq.n	44ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    44ca:	e008      	b.n	44de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    44cc:	b138      	cbz	r0, 44de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    44ce:	6871      	ldr	r1, [r6, #4]
    44d0:	f811 0b03 	ldrb.w	r0, [r1], #3
    44d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    44d8:	f00a fb8e 	bl	ebf8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    44dc:	b128      	cbz	r0, 44ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    44de:	2000      	movs	r0, #0
    44e0:	78a1      	ldrb	r1, [r4, #2]
    44e2:	0749      	lsls	r1, r1, #29
    44e4:	d503      	bpl.n	44ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e6>
    44e6:	b990      	cbnz	r0, 450e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    44e8:	e00e      	b.n	4508 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    44ea:	2001      	movs	r0, #1
    44ec:	e7f8      	b.n	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    44ee:	b975      	cbnz	r5, 450e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    44f0:	7be0      	ldrb	r0, [r4, #15]
    44f2:	b108      	cbz	r0, 44f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    44f4:	42b8      	cmp	r0, r7
    44f6:	d107      	bne.n	4508 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    44f8:	6871      	ldr	r1, [r6, #4]
    44fa:	f811 0b03 	ldrb.w	r0, [r1], #3
    44fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4502:	f00a fb79 	bl	ebf8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    4506:	b110      	cbz	r0, 450e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    4508:	2000      	movs	r0, #0
    450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    450e:	2001      	movs	r0, #1
    4510:	e7fb      	b.n	450a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x402>
    4512:	0000      	.short	0x0000
    4514:	20000fa4 	.word	0x20000fa4
    4518:	200000d0 	.word	0x200000d0
    451c:	b570      	push	{r4, r5, r6, lr}
    451e:	4604      	mov	r4, r0
    4520:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    4522:	4d10      	ldr	r5, [pc, #64]	; (4564 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>)
    4524:	1c40      	adds	r0, r0, #1
    4526:	8620      	strh	r0, [r4, #48]	; 0x30
    4528:	7ba8      	ldrb	r0, [r5, #14]
    452a:	2600      	movs	r6, #0
    452c:	b120      	cbz	r0, 4538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    452e:	f003 fc1b 	bl	7d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4532:	f003 fa3f 	bl	79b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4536:	73ae      	strb	r6, [r5, #14]
    4538:	702e      	strb	r6, [r5, #0]
    453a:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    453e:	b108      	cbz	r0, 4544 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    4540:	2101      	movs	r1, #1
    4542:	e00a      	b.n	455a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x452>
    4544:	7b60      	ldrb	r0, [r4, #13]
    4546:	b138      	cbz	r0, 4558 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    4548:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    454a:	4288      	cmp	r0, r1
    454c:	d804      	bhi.n	4558 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    454e:	2101      	movs	r1, #1
    4550:	4620      	mov	r0, r4
    4552:	f00a fcb0 	bl	eeb6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4556:	bd70      	pop	{r4, r5, r6, pc}
    4558:	2100      	movs	r1, #0
    455a:	4620      	mov	r0, r4
    455c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4560:	f00a bca9 	b.w	eeb6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4564:	20000fa4 	.word	0x20000fa4
    4568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    456c:	4604      	mov	r4, r0
    456e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    4572:	8808      	ldrh	r0, [r1, #0]
    4574:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    4578:	20ff      	movs	r0, #255	; 0xff
    457a:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    457e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4582:	4616      	mov	r6, r2
    4584:	460d      	mov	r5, r1
    4586:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    458a:	2b00      	cmp	r3, #0
    458c:	d14b      	bne.n	4626 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    458e:	6928      	ldr	r0, [r5, #16]
    4590:	f009 fbc9 	bl	dd26 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4594:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    4598:	8b28      	ldrh	r0, [r5, #24]
    459a:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    459e:	8b68      	ldrh	r0, [r5, #26]
    45a0:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    45a4:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    45a8:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    45ac:	7e20      	ldrb	r0, [r4, #24]
    45ae:	f104 0151 	add.w	r1, r4, #81	; 0x51
    45b2:	460f      	mov	r7, r1
    45b4:	2500      	movs	r5, #0
    45b6:	b120      	cbz	r0, 45c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    45b8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    45bc:	f00a fa28 	bl	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    45c0:	b940      	cbnz	r0, 45d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    45c2:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    45c6:	b170      	cbz	r0, 45e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4de>
    45c8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    45cc:	4639      	mov	r1, r7
    45ce:	f00a fa16 	bl	e9fe <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    45d2:	b140      	cbz	r0, 45e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4de>
    45d4:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    45d8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    45dc:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    45e0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    45e4:	e003      	b.n	45ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e6>
    45e6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    45ea:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    45ee:	4815      	ldr	r0, [pc, #84]	; (4644 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x53c>)
    45f0:	2eff      	cmp	r6, #255	; 0xff
    45f2:	6840      	ldr	r0, [r0, #4]
    45f4:	7801      	ldrb	r1, [r0, #0]
    45f6:	f3c1 1180 	ubfx	r1, r1, #6, #1
    45fa:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    45fe:	f850 1f03 	ldr.w	r1, [r0, #3]!
    4602:	d017      	beq.n	4634 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    4604:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    4608:	8880      	ldrh	r0, [r0, #4]
    460a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    460e:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    4612:	1e51      	subs	r1, r2, #1
    4614:	4630      	mov	r0, r6
    4616:	f7fe fb17 	bl	2c48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    461a:	b130      	cbz	r0, 462a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x522>
    461c:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    4620:	f040 0002 	orr.w	r0, r0, #2
    4624:	7020      	strb	r0, [r4, #0]
    4626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    462a:	f640 418b 	movw	r1, #3211	; 0xc8b
    462e:	202d      	movs	r0, #45	; 0x2d
    4630:	f7fc feb6 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4634:	f844 1f7a 	str.w	r1, [r4, #122]!
    4638:	8880      	ldrh	r0, [r0, #4]
    463a:	80a0      	strh	r0, [r4, #4]
    463c:	60e5      	str	r5, [r4, #12]
    463e:	8225      	strh	r5, [r4, #16]
    4640:	e7f1      	b.n	4626 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    4642:	0000      	.short	0x0000
    4644:	200000d0 	.word	0x200000d0
    4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    464a:	4604      	mov	r4, r0
    464c:	20ff      	movs	r0, #255	; 0xff
    464e:	f88d 0000 	strb.w	r0, [sp]
    4652:	2601      	movs	r6, #1
    4654:	466a      	mov	r2, sp
    4656:	2105      	movs	r1, #5
    4658:	4620      	mov	r0, r4
    465a:	f7ff fef3 	bl	4444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    465e:	b160      	cbz	r0, 467a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x572>
    4660:	4d28      	ldr	r5, [pc, #160]	; (4704 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    4662:	4f27      	ldr	r7, [pc, #156]	; (4700 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    4664:	6869      	ldr	r1, [r5, #4]
    4666:	7bfa      	ldrb	r2, [r7, #15]
    4668:	f107 0310 	add.w	r3, r7, #16
    466c:	f811 0b03 	ldrb.w	r0, [r1], #3
    4670:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4674:	f009 fa7a 	bl	db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4678:	b110      	cbz	r0, 4680 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    467a:	2600      	movs	r6, #0
    467c:	4630      	mov	r0, r6
    467e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4680:	686a      	ldr	r2, [r5, #4]
    4682:	69e0      	ldr	r0, [r4, #28]
    4684:	7812      	ldrb	r2, [r2, #0]
    4686:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    468a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    468e:	4011      	ands	r1, r2
    4690:	7001      	strb	r1, [r0, #0]
    4692:	2201      	movs	r2, #1
    4694:	4620      	mov	r0, r4
    4696:	69e1      	ldr	r1, [r4, #28]
    4698:	f000 f89a 	bl	47d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c8>
    469c:	2300      	movs	r3, #0
    469e:	f89d 2000 	ldrb.w	r2, [sp]
    46a2:	4620      	mov	r0, r4
    46a4:	69e1      	ldr	r1, [r4, #28]
    46a6:	f7ff ff5f 	bl	4568 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    46aa:	2211      	movs	r2, #17
    46ac:	4916      	ldr	r1, [pc, #88]	; (4708 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>)
    46ae:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    46b2:	f009 fee8 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    46b6:	69e0      	ldr	r0, [r4, #28]
    46b8:	2205      	movs	r2, #5
    46ba:	8801      	ldrh	r1, [r0, #0]
    46bc:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    46c0:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    46c4:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    46c8:	4910      	ldr	r1, [pc, #64]	; (470c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x604>)
    46ca:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    46ce:	f009 feda 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    46d2:	2100      	movs	r1, #0
    46d4:	69e0      	ldr	r0, [r4, #28]
    46d6:	7039      	strb	r1, [r7, #0]
    46d8:	460a      	mov	r2, r1
    46da:	4621      	mov	r1, r4
    46dc:	f000 fa86 	bl	4bec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    46e0:	6868      	ldr	r0, [r5, #4]
    46e2:	69e1      	ldr	r1, [r4, #28]
    46e4:	f8d0 2003 	ldr.w	r2, [r0, #3]
    46e8:	f841 2f03 	str.w	r2, [r1, #3]!
    46ec:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    46f0:	808a      	strh	r2, [r1, #4]
    46f2:	7800      	ldrb	r0, [r0, #0]
    46f4:	69e1      	ldr	r1, [r4, #28]
    46f6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    46fa:	7088      	strb	r0, [r1, #2]
    46fc:	e7be      	b.n	467c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    46fe:	0000      	.short	0x0000
    4700:	20000fa4 	.word	0x20000fa4
    4704:	200000d0 	.word	0x200000d0
    4708:	0000ec3b 	.word	0x0000ec3b
    470c:	0000ec2b 	.word	0x0000ec2b
    4710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4712:	4604      	mov	r4, r0
    4714:	20ff      	movs	r0, #255	; 0xff
    4716:	f88d 0000 	strb.w	r0, [sp]
    471a:	2501      	movs	r5, #1
    471c:	466a      	mov	r2, sp
    471e:	2103      	movs	r1, #3
    4720:	4620      	mov	r0, r4
    4722:	f7ff fe8f 	bl	4444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    4726:	b1e8      	cbz	r0, 4764 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    4728:	7b20      	ldrb	r0, [r4, #12]
    472a:	b120      	cbz	r0, 4736 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62e>
    472c:	f89d 1000 	ldrb.w	r1, [sp]
    4730:	4620      	mov	r0, r4
    4732:	f7ff fe39 	bl	43a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    4736:	4e0d      	ldr	r6, [pc, #52]	; (476c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x664>)
    4738:	2100      	movs	r1, #0
    473a:	6870      	ldr	r0, [r6, #4]
    473c:	8001      	strh	r1, [r0, #0]
    473e:	2104      	movs	r1, #4
    4740:	f009 fd28 	bl	e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4744:	4620      	mov	r0, r4
    4746:	f000 f88b 	bl	4860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x758>
    474a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    474e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4750:	6870      	ldr	r0, [r6, #4]
    4752:	f009 fd56 	bl	e202 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    4756:	4906      	ldr	r1, [pc, #24]	; (4770 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x668>)
    4758:	2005      	movs	r0, #5
    475a:	7008      	strb	r0, [r1, #0]
    475c:	6870      	ldr	r0, [r6, #4]
    475e:	f003 fd97 	bl	8290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4762:	e000      	b.n	4766 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65e>
    4764:	2500      	movs	r5, #0
    4766:	4628      	mov	r0, r5
    4768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    476a:	0000      	.short	0x0000
    476c:	200000d0 	.word	0x200000d0
    4770:	20000fa4 	.word	0x20000fa4
    4774:	b570      	push	{r4, r5, r6, lr}
    4776:	4604      	mov	r4, r0
    4778:	460e      	mov	r6, r1
    477a:	7e40      	ldrb	r0, [r0, #25]
    477c:	f7fe fa3e 	bl	2bfc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    4780:	0005      	movs	r5, r0
    4782:	d019      	beq.n	47b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>
    4784:	2110      	movs	r1, #16
    4786:	f009 fc4f 	bl	e028 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    478a:	2800      	cmp	r0, #0
    478c:	d114      	bne.n	47b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>
    478e:	2001      	movs	r0, #1
    4790:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    4794:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    4798:	4632      	mov	r2, r6
    479a:	460c      	mov	r4, r1
    479c:	4628      	mov	r0, r5
    479e:	f009 fa15 	bl	dbcc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    47a2:	4621      	mov	r1, r4
    47a4:	4c05      	ldr	r4, [pc, #20]	; (47bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    47a6:	6860      	ldr	r0, [r4, #4]
    47a8:	f009 fd0f 	bl	e1ca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    47ac:	6860      	ldr	r0, [r4, #4]
    47ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47b2:	2101      	movs	r1, #1
    47b4:	f009 bd0f 	b.w	e1d6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    47b8:	bd70      	pop	{r4, r5, r6, pc}
    47ba:	0000      	.short	0x0000
    47bc:	200000d0 	.word	0x200000d0
    47c0:	4802      	ldr	r0, [pc, #8]	; (47cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>)
    47c2:	2101      	movs	r1, #1
    47c4:	6800      	ldr	r0, [r0, #0]
    47c6:	f7ff bb19 	b.w	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    47ca:	0000      	.short	0x0000
    47cc:	200000d0 	.word	0x200000d0
    47d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47d4:	4e21      	ldr	r6, [pc, #132]	; (485c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x754>)
    47d6:	4680      	mov	r8, r0
    47d8:	460c      	mov	r4, r1
    47da:	6870      	ldr	r0, [r6, #4]
    47dc:	4615      	mov	r5, r2
    47de:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    47e2:	6161      	str	r1, [r4, #20]
    47e4:	6841      	ldr	r1, [r0, #4]
    47e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    47ea:	61e1      	str	r1, [r4, #28]
    47ec:	8940      	ldrh	r0, [r0, #10]
    47ee:	f009 fa96 	bl	dd1e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    47f2:	4607      	mov	r7, r0
    47f4:	6120      	str	r0, [r4, #16]
    47f6:	6870      	ldr	r0, [r6, #4]
    47f8:	4639      	mov	r1, r7
    47fa:	7d80      	ldrb	r0, [r0, #22]
    47fc:	f009 fc0b 	bl	e016 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4800:	84a0      	strh	r0, [r4, #36]	; 0x24
    4802:	6870      	ldr	r0, [r6, #4]
    4804:	4639      	mov	r1, r7
    4806:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    480a:	f009 fc00 	bl	e00e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    480e:	6220      	str	r0, [r4, #32]
    4810:	6870      	ldr	r0, [r6, #4]
    4812:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4816:	8321      	strh	r1, [r4, #24]
    4818:	8841      	ldrh	r1, [r0, #2]
    481a:	8361      	strh	r1, [r4, #26]
    481c:	6841      	ldr	r1, [r0, #4]
    481e:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    4822:	7a01      	ldrb	r1, [r0, #8]
    4824:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4828:	7a41      	ldrb	r1, [r0, #9]
    482a:	f001 011f 	and.w	r1, r1, #31
    482e:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    4832:	7a40      	ldrb	r0, [r0, #9]
    4834:	0940      	lsrs	r0, r0, #5
    4836:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    483a:	f104 0062 	add.w	r0, r4, #98	; 0x62
    483e:	7205      	strb	r5, [r0, #8]
    4840:	7245      	strb	r5, [r0, #9]
    4842:	21ff      	movs	r1, #255	; 0xff
    4844:	7281      	strb	r1, [r0, #10]
    4846:	2100      	movs	r1, #0
    4848:	3836      	subs	r0, #54	; 0x36
    484a:	f009 fecb 	bl	e5e4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    484e:	f898 000e 	ldrb.w	r0, [r8, #14]
    4852:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    4856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    485a:	0000      	.short	0x0000
    485c:	200000d0 	.word	0x200000d0
    4860:	b570      	push	{r4, r5, r6, lr}
    4862:	4d07      	ldr	r5, [pc, #28]	; (4880 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x778>)
    4864:	4604      	mov	r4, r0
    4866:	f100 0151 	add.w	r1, r0, #81	; 0x51
    486a:	6868      	ldr	r0, [r5, #4]
    486c:	f009 fcba 	bl	e1e4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    4870:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    4874:	6868      	ldr	r0, [r5, #4]
    4876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    487a:	f009 bcb9 	b.w	e1f0 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    487e:	0000      	.short	0x0000
    4880:	200000d0 	.word	0x200000d0
    4884:	00004089 	.word	0x00004089
    4888:	00003f11 	.word	0x00003f11
    488c:	00004005 	.word	0x00004005
    4890:	00000000 	.word	0x00000000
    4894:	00003fdd 	.word	0x00003fdd
    4898:	00004035 	.word	0x00004035
    489c:	0000ec1f 	.word	0x0000ec1f
    48a0:	0000ec25 	.word	0x0000ec25
    48a4:	0000429d 	.word	0x0000429d
    48a8:	000042c1 	.word	0x000042c1
    48ac:	000047c1 	.word	0x000047c1
    48b0:	000048a0 	.word	0x000048a0
    48b4:	00004898 	.word	0x00004898
    48b8:	00004894 	.word	0x00004894

000048bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    48bc:	b510      	push	{r4, lr}
    48be:	1e42      	subs	r2, r0, #1
    48c0:	2a02      	cmp	r2, #2
    48c2:	d901      	bls.n	48c8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    48c4:	21ca      	movs	r1, #202	; 0xca
    48c6:	e009      	b.n	48dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    48c8:	1e40      	subs	r0, r0, #1
    48ca:	2910      	cmp	r1, #16
    48cc:	d009      	beq.n	48e2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    48ce:	2912      	cmp	r1, #18
    48d0:	d00c      	beq.n	48ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    48d2:	2913      	cmp	r1, #19
    48d4:	d00a      	beq.n	48ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    48d6:	2915      	cmp	r1, #21
    48d8:	d005      	beq.n	48e6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    48da:	21d8      	movs	r1, #216	; 0xd8
    48dc:	202f      	movs	r0, #47	; 0x2f
    48de:	f7fc fd5f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48e2:	4905      	ldr	r1, [pc, #20]	; (48f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48e4:	e004      	b.n	48f0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48e6:	4904      	ldr	r1, [pc, #16]	; (48f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48e8:	1d89      	adds	r1, r1, #6
    48ea:	e001      	b.n	48f0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48ec:	4902      	ldr	r1, [pc, #8]	; (48f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48ee:	1f89      	subs	r1, r1, #6
    48f0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    48f4:	bd10      	pop	{r4, pc}
    48f6:	0000      	.short	0x0000
    48f8:	0000ee86 	.word	0x0000ee86

000048fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    48fc:	1e42      	subs	r2, r0, #1
    48fe:	b510      	push	{r4, lr}
    4900:	b2d2      	uxtb	r2, r2
    4902:	2a01      	cmp	r2, #1
    4904:	d903      	bls.n	490e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4906:	291d      	cmp	r1, #29
    4908:	d001      	beq.n	490e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    490a:	21ee      	movs	r1, #238	; 0xee
    490c:	e00d      	b.n	492a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    490e:	2913      	cmp	r1, #19
    4910:	d013      	beq.n	493a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    4912:	dc04      	bgt.n	491e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4914:	2910      	cmp	r1, #16
    4916:	d00b      	beq.n	4930 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4918:	2912      	cmp	r1, #18
    491a:	d104      	bne.n	4926 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    491c:	e00d      	b.n	493a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    491e:	2915      	cmp	r1, #21
    4920:	d008      	beq.n	4934 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    4922:	291d      	cmp	r1, #29
    4924:	d00e      	beq.n	4944 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4926:	f44f 7181 	mov.w	r1, #258	; 0x102
    492a:	202f      	movs	r0, #47	; 0x2f
    492c:	f7fc fd38 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4930:	4807      	ldr	r0, [pc, #28]	; (4950 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4932:	e004      	b.n	493e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4934:	4806      	ldr	r0, [pc, #24]	; (4950 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4936:	3008      	adds	r0, #8
    4938:	e001      	b.n	493e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    493a:	4805      	ldr	r0, [pc, #20]	; (4950 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    493c:	1d00      	adds	r0, r0, #4
    493e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    4942:	bd10      	pop	{r4, pc}
    4944:	f240 315a 	movw	r1, #858	; 0x35a
    4948:	fb10 f001 	smulbb	r0, r0, r1
    494c:	bd10      	pop	{r4, pc}
    494e:	0000      	.short	0x0000
    4950:	0000ee74 	.word	0x0000ee74

00004954 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    4954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4958:	4604      	mov	r4, r0
    495a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    495e:	4616      	mov	r6, r2
    4960:	460f      	mov	r7, r1
    4962:	2800      	cmp	r0, #0
    4964:	d15e      	bne.n	4a24 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4966:	4621      	mov	r1, r4
    4968:	484d      	ldr	r0, [pc, #308]	; (4aa0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    496a:	f006 fa4d 	bl	ae08 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    496e:	4605      	mov	r5, r0
    4970:	2820      	cmp	r0, #32
    4972:	d057      	beq.n	4a24 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4974:	2250      	movs	r2, #80	; 0x50
    4976:	2100      	movs	r1, #0
    4978:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    497c:	f00c fa92 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4980:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    4984:	2501      	movs	r5, #1
    4986:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    498a:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    498e:	b137      	cbz	r7, 499e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    4990:	f7fe feba 	bl	3708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4994:	f000 0007 	and.w	r0, r0, #7
    4998:	1c40      	adds	r0, r0, #1
    499a:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    499e:	4620      	mov	r0, r4
    49a0:	f00a fc26 	bl	f1f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    49a4:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    49a8:	2002      	movs	r0, #2
    49aa:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    49ae:	46a8      	mov	r8, r5
    49b0:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    49b4:	2500      	movs	r5, #0
    49b6:	f804 5fe8 	strb.w	r5, [r4, #232]!
    49ba:	f007 fbb1 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    49be:	4607      	mov	r7, r0
    49c0:	f00c f86c 	bl	10a9c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    49c4:	8921      	ldrh	r1, [r4, #8]
    49c6:	3ce8      	subs	r4, #232	; 0xe8
    49c8:	4288      	cmp	r0, r1
    49ca:	d800      	bhi.n	49ce <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    49cc:	4608      	mov	r0, r1
    49ce:	4438      	add	r0, r7
    49d0:	30cc      	adds	r0, #204	; 0xcc
    49d2:	b287      	uxth	r7, r0
    49d4:	4620      	mov	r0, r4
    49d6:	f00a f8ce 	bl	eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    49da:	b330      	cbz	r0, 4a2a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    49dc:	f00b ff64 	bl	108a8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    49e0:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    49e4:	b281      	uxth	r1, r0
    49e6:	4630      	mov	r0, r6
    49e8:	f007 fcba 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    49ec:	4430      	add	r0, r6
    49ee:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    49f2:	3490      	adds	r4, #144	; 0x90
    49f4:	f006 fc18 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    49f8:	19c0      	adds	r0, r0, r7
    49fa:	4169      	adcs	r1, r5
    49fc:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    4a00:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4a04:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4a08:	2001      	movs	r0, #1
    4a0a:	f00a fa2c 	bl	ee66 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    4a0e:	f500 7088 	add.w	r0, r0, #272	; 0x110
    4a12:	1a30      	subs	r0, r6, r0
    4a14:	6460      	str	r0, [r4, #68]	; 0x44
    4a16:	f04f 30ff 	mov.w	r0, #4294967295
    4a1a:	0841      	lsrs	r1, r0, #1
    4a1c:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    4a20:	3c90      	subs	r4, #144	; 0x90
    4a22:	e025      	b.n	4a70 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4a24:	200c      	movs	r0, #12
    4a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a2a:	2100      	movs	r1, #0
    4a2c:	4620      	mov	r0, r4
    4a2e:	f00a fb31 	bl	f094 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    4a32:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4aa4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4a36:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4a3a:	2000      	movs	r0, #0
    4a3c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a40:	b149      	cbz	r1, 4a56 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a42:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4a44:	b139      	cbz	r1, 4a56 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a46:	f7fe fe5f 	bl	3708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4a4a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a4e:	fbb0 f2f1 	udiv	r2, r0, r1
    4a52:	fb01 0012 	mls	r0, r1, r2, r0
    4a56:	4407      	add	r7, r0
    4a58:	f006 fbe6 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4a5c:	19c0      	adds	r0, r0, r7
    4a5e:	4169      	adcs	r1, r5
    4a60:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    4a64:	b19e      	cbz	r6, 4a8e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    4a66:	1980      	adds	r0, r0, r6
    4a68:	eb51 0105 	adcs.w	r1, r1, r5
    4a6c:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    4a70:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4a74:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    4a78:	f00a fbb8 	bl	f1ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    4a7c:	b158      	cbz	r0, 4a96 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    4a7e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    4a82:	2100      	movs	r1, #0
    4a84:	4620      	mov	r0, r4
    4a86:	f00a f8a6 	bl	ebd6 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    4a8a:	2000      	movs	r0, #0
    4a8c:	e7cb      	b.n	4a26 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    4a8e:	f04f 30ff 	mov.w	r0, #4294967295
    4a92:	0841      	lsrs	r1, r0, #1
    4a94:	e7ea      	b.n	4a6c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    4a96:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
    4a9a:	2030      	movs	r0, #48	; 0x30
    4a9c:	f7fc fc80 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aa0:	0000f369 	.word	0x0000f369
    4aa4:	200000e0 	.word	0x200000e0

00004aa8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    4aa8:	4901      	ldr	r1, [pc, #4]	; (4ab0 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    4aaa:	8088      	strh	r0, [r1, #4]
    4aac:	4770      	bx	lr
    4aae:	0000      	.short	0x0000
    4ab0:	200000e0 	.word	0x200000e0

00004ab4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4ab4:	4805      	ldr	r0, [pc, #20]	; (4acc <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4ab6:	2100      	movs	r1, #0
    4ab8:	7001      	strb	r1, [r0, #0]
    4aba:	2201      	movs	r2, #1
    4abc:	7082      	strb	r2, [r0, #2]
    4abe:	7041      	strb	r1, [r0, #1]
    4ac0:	f242 7110 	movw	r1, #10000	; 0x2710
    4ac4:	8081      	strh	r1, [r0, #4]
    4ac6:	f000 b803 	b.w	4ad0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4aca:	0000      	.short	0x0000
    4acc:	200000e0 	.word	0x200000e0

00004ad0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4ad0:	b51c      	push	{r2, r3, r4, lr}
    4ad2:	4909      	ldr	r1, [pc, #36]	; (4af8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
    4ad8:	e9cd 0100 	strd	r0, r1, [sp]
    4adc:	e002      	b.n	4ae4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    4ade:	9800      	ldr	r0, [sp, #0]
    4ae0:	f00a f9fd 	bl	eede <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4ae4:	4668      	mov	r0, sp
    4ae6:	f7fc fe99 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4aea:	2800      	cmp	r0, #0
    4aec:	d0f7      	beq.n	4ade <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    4aee:	f000 f8a9 	bl	4c44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    4af2:	2000      	movs	r0, #0
    4af4:	bd1c      	pop	{r2, r3, r4, pc}
    4af6:	0000      	.short	0x0000
    4af8:	000053a4 	.word	0x000053a4

00004afc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4afc:	4901      	ldr	r1, [pc, #4]	; (4b04 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    4afe:	7008      	strb	r0, [r1, #0]
    4b00:	4770      	bx	lr
    4b02:	0000      	.short	0x0000
    4b04:	200000e0 	.word	0x200000e0

00004b08 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4b08:	4908      	ldr	r1, [pc, #32]	; (4b2c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b0e:	fbb1 f1f2 	udiv	r1, r1, r2
    4b12:	b510      	push	{r4, lr}
    4b14:	f501 7125 	add.w	r1, r1, #660	; 0x294
    4b18:	f009 fd7d 	bl	e616 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4b1c:	f640 0148 	movw	r1, #2120	; 0x848
    4b20:	4288      	cmp	r0, r1
    4b22:	d300      	bcc.n	4b26 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4b24:	4608      	mov	r0, r1
    4b26:	b280      	uxth	r0, r0
    4b28:	bd10      	pop	{r4, pc}
    4b2a:	0000      	.short	0x0000
    4b2c:	0001527d 	.word	0x0001527d

00004b30 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    4b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b34:	4c0f      	ldr	r4, [pc, #60]	; (4b74 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x44>)
    4b36:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    4b3a:	f003 fac3 	bl	80c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4b3e:	4605      	mov	r5, r0
    4b40:	4602      	mov	r2, r0
    4b42:	4639      	mov	r1, r7
    4b44:	4630      	mov	r0, r6
    4b46:	f009 f8f4 	bl	dd32 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    4b4a:	4606      	mov	r6, r0
    4b4c:	68a0      	ldr	r0, [r4, #8]
    4b4e:	4286      	cmp	r6, r0
    4b50:	d005      	beq.n	4b5e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2e>
    4b52:	6921      	ldr	r1, [r4, #16]
    4b54:	1a30      	subs	r0, r6, r0
    4b56:	4408      	add	r0, r1
    4b58:	6120      	str	r0, [r4, #16]
    4b5a:	f006 fa97 	bl	b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4b5e:	60a6      	str	r6, [r4, #8]
    4b60:	42b5      	cmp	r5, r6
    4b62:	d801      	bhi.n	4b68 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x38>
    4b64:	7860      	ldrb	r0, [r4, #1]
    4b66:	b110      	cbz	r0, 4b6e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    4b68:	2000      	movs	r0, #0
    4b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b6e:	2001      	movs	r0, #1
    4b70:	e7fb      	b.n	4b6a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    4b72:	0000      	.short	0x0000
    4b74:	200000e0 	.word	0x200000e0

00004b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    4b78:	b510      	push	{r4, lr}
    4b7a:	4604      	mov	r4, r0
    4b7c:	2906      	cmp	r1, #6
    4b7e:	d22e      	bcs.n	4bde <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    4b80:	e8df f001 	tbb	[pc, r1]
    4b84:	14031105 	.word	0x14031105
    4b88:	2815      	.short	0x2815
    4b8a:	2100      	movs	r1, #0
    4b8c:	e006      	b.n	4b9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4b8e:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4b92:	b110      	cbz	r0, 4b9a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    4b94:	4620      	mov	r0, r4
    4b96:	f00a fabc 	bl	f112 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    4b9a:	2101      	movs	r1, #1
    4b9c:	4620      	mov	r0, r4
    4b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ba2:	f000 b8f7 	b.w	4d94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    4ba6:	2003      	movs	r0, #3
    4ba8:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4bac:	bd10      	pop	{r4, pc}
    4bae:	f003 fa8f 	bl	80d0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    4bb2:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    4bb6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4bba:	f003 fb4d 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4bbe:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4bc2:	1a09      	subs	r1, r1, r0
    4bc4:	4808      	ldr	r0, [pc, #32]	; (4be8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    4bc6:	6882      	ldr	r2, [r0, #8]
    4bc8:	440a      	add	r2, r1
    4bca:	6082      	str	r2, [r0, #8]
    4bcc:	68c2      	ldr	r2, [r0, #12]
    4bce:	4411      	add	r1, r2
    4bd0:	60c1      	str	r1, [r0, #12]
    4bd2:	bd10      	pop	{r4, pc}
    4bd4:	4620      	mov	r0, r4
    4bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bda:	f00a ba85 	b.w	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4bde:	f44f 61e8 	mov.w	r1, #1856	; 0x740
    4be2:	2030      	movs	r0, #48	; 0x30
    4be4:	f7fc fbdc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4be8:	200000e0 	.word	0x200000e0

00004bec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4bec:	b570      	push	{r4, r5, r6, lr}
    4bee:	460c      	mov	r4, r1
    4bf0:	4605      	mov	r5, r0
    4bf2:	b112      	cbz	r2, 4bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    4bf4:	f240 716a 	movw	r1, #1898	; 0x76a
    4bf8:	e010      	b.n	4c1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    4bfa:	f003 fa63 	bl	80c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4bfe:	4601      	mov	r1, r0
    4c00:	2200      	movs	r2, #0
    4c02:	4620      	mov	r0, r4
    4c04:	f00a fb64 	bl	f2d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    4c08:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4c0c:	462a      	mov	r2, r5
    4c0e:	4905      	ldr	r1, [pc, #20]	; (4c24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    4c10:	f005 ffb0 	bl	ab74 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4c14:	2800      	cmp	r0, #0
    4c16:	d104      	bne.n	4c22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    4c18:	f240 7153 	movw	r1, #1875	; 0x753
    4c1c:	2030      	movs	r0, #48	; 0x30
    4c1e:	f7fc fbbf 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c22:	bd70      	pop	{r4, r5, r6, pc}
    4c24:	0000f40b 	.word	0x0000f40b
    4c28:	b510      	push	{r4, lr}
    4c2a:	280c      	cmp	r0, #12
    4c2c:	d304      	bcc.n	4c38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    4c2e:	f240 318b 	movw	r1, #907	; 0x38b
    4c32:	2006      	movs	r0, #6
    4c34:	f7fc fbb4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c38:	4901      	ldr	r1, [pc, #4]	; (4c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    4c3a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4c3e:	bd10      	pop	{r4, pc}
    4c40:	000053c0 	.word	0x000053c0
    4c44:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4c48:	4d15      	ldr	r5, [pc, #84]	; (4ca0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    4c4a:	2001      	movs	r0, #1
    4c4c:	7068      	strb	r0, [r5, #1]
    4c4e:	2400      	movs	r4, #0
    4c50:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4c54:	e00b      	b.n	4c6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    4c56:	2100      	movs	r1, #0
    4c58:	f008 fdd9 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4c5c:	0007      	movs	r7, r0
    4c5e:	d009      	beq.n	4c74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    4c60:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    4c64:	f005 ffb8 	bl	abd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4c68:	4638      	mov	r0, r7
    4c6a:	f00a fb24 	bl	f2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    4c6e:	9400      	str	r4, [sp, #0]
    4c70:	9401      	str	r4, [sp, #4]
    4c72:	e00d      	b.n	4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4c74:	f44f 7190 	mov.w	r1, #288	; 0x120
    4c78:	2030      	movs	r0, #48	; 0x30
    4c7a:	f7fc fb91 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c7e:	9800      	ldr	r0, [sp, #0]
    4c80:	b130      	cbz	r0, 4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4c82:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    4c86:	b119      	cbz	r1, 4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4c88:	8800      	ldrh	r0, [r0, #0]
    4c8a:	42b0      	cmp	r0, r6
    4c8c:	d1e3      	bne.n	4c56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    4c8e:	e004      	b.n	4c9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    4c90:	4668      	mov	r0, sp
    4c92:	f7fc fdc3 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4c96:	2800      	cmp	r0, #0
    4c98:	d0f1      	beq.n	4c7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    4c9a:	706c      	strb	r4, [r5, #1]
    4c9c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4ca0:	200000e0 	.word	0x200000e0
    4ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ca8:	4604      	mov	r4, r0
    4caa:	4839      	ldr	r0, [pc, #228]	; (4d90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    4cac:	461e      	mov	r6, r3
    4cae:	4690      	mov	r8, r2
    4cb0:	7880      	ldrb	r0, [r0, #2]
    4cb2:	4689      	mov	r9, r1
    4cb4:	2500      	movs	r5, #0
    4cb6:	2800      	cmp	r0, #0
    4cb8:	d063      	beq.n	4d82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4cba:	f007 fb07 	bl	c2cc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4cbe:	b3e0      	cbz	r0, 4d3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    4cc0:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4cc4:	2802      	cmp	r0, #2
    4cc6:	d35c      	bcc.n	4d82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4cc8:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ccc:	2802      	cmp	r0, #2
    4cce:	d058      	beq.n	4d82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4cd0:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4cd4:	bb88      	cbnz	r0, 4d3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    4cd6:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4cda:	f7ff ffa5 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4cde:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    4ce2:	b281      	uxth	r1, r0
    4ce4:	8031      	strh	r1, [r6, #0]
    4ce6:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cea:	2700      	movs	r7, #0
    4cec:	2801      	cmp	r0, #1
    4cee:	d00d      	beq.n	4d0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    4cf0:	6920      	ldr	r0, [r4, #16]
    4cf2:	f007 fb35 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4cf6:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4cfa:	4442      	add	r2, r8
    4cfc:	eba2 0109 	sub.w	r1, r2, r9
    4d00:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d04:	1a82      	subs	r2, r0, r2
    4d06:	fb01 7502 	mla	r5, r1, r2, r7
    4d0a:	e035      	b.n	4d78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    4d0c:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4d10:	2803      	cmp	r0, #3
    4d12:	d039      	beq.n	4d88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    4d14:	2101      	movs	r1, #1
    4d16:	2000      	movs	r0, #0
    4d18:	f009 f8d6 	bl	dec8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4d1c:	6a21      	ldr	r1, [r4, #32]
    4d1e:	1847      	adds	r7, r0, r1
    4d20:	8831      	ldrh	r1, [r6, #0]
    4d22:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d26:	f007 fb1b 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d2a:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    4d2e:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4d32:	1a82      	subs	r2, r0, r2
    4d34:	fb01 5502 	mla	r5, r1, r2, r5
    4d38:	e000      	b.n	4d3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    4d3a:	e022      	b.n	4d82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4d3c:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4d40:	8831      	ldrh	r1, [r6, #0]
    4d42:	4638      	mov	r0, r7
    4d44:	f007 fb0c 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d48:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4d4c:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4d50:	1a41      	subs	r1, r0, r1
    4d52:	440d      	add	r5, r1
    4d54:	8831      	ldrh	r1, [r6, #0]
    4d56:	6920      	ldr	r0, [r4, #16]
    4d58:	f007 fb02 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d5c:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4d60:	4442      	add	r2, r8
    4d62:	eba2 0109 	sub.w	r1, r2, r9
    4d66:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4d6a:	1a89      	subs	r1, r1, r2
    4d6c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d70:	1a82      	subs	r2, r0, r2
    4d72:	1e49      	subs	r1, r1, #1
    4d74:	fb01 5502 	mla	r5, r1, r2, r5
    4d78:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4d7c:	2001      	movs	r0, #1
    4d7e:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    4d82:	4628      	mov	r0, r5
    4d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d88:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d8c:	e7c6      	b.n	4d1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    4d8e:	0000      	.short	0x0000
    4d90:	200000e0 	.word	0x200000e0
    4d94:	b538      	push	{r3, r4, r5, lr}
    4d96:	2500      	movs	r5, #0
    4d98:	4604      	mov	r4, r0
    4d9a:	2901      	cmp	r1, #1
    4d9c:	d102      	bne.n	4da4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    4d9e:	4810      	ldr	r0, [pc, #64]	; (4de0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    4da0:	7840      	ldrb	r0, [r0, #1]
    4da2:	b170      	cbz	r0, 4dc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    4da4:	2004      	movs	r0, #4
    4da6:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4daa:	bf00      	nop
    4dac:	f00a f9aa 	bl	f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    4db0:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    4db4:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4db8:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4dbc:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    4dc0:	bd38      	pop	{r3, r4, r5, pc}
    4dc2:	9500      	str	r5, [sp, #0]
    4dc4:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4dc8:	2301      	movs	r3, #1
    4dca:	2200      	movs	r2, #0
    4dcc:	4620      	mov	r0, r4
    4dce:	f000 f809 	bl	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    4dd2:	2800      	cmp	r0, #0
    4dd4:	d0ea      	beq.n	4dac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    4dd6:	f240 61b5 	movw	r1, #1717	; 0x6b5
    4dda:	2030      	movs	r0, #48	; 0x30
    4ddc:	f7fc fae0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4de0:	200000e0 	.word	0x200000e0
    4de4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4de8:	b08b      	sub	sp, #44	; 0x2c
    4dea:	4604      	mov	r4, r0
    4dec:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4df0:	4699      	mov	r9, r3
    4df2:	460f      	mov	r7, r1
    4df4:	9307      	str	r3, [sp, #28]
    4df6:	9005      	str	r0, [sp, #20]
    4df8:	f00b fd56 	bl	108a8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4dfc:	4605      	mov	r5, r0
    4dfe:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4e02:	f7ff ff11 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4e06:	4428      	add	r0, r5
    4e08:	f8ad 0004 	strh.w	r0, [sp, #4]
    4e0c:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4e10:	280d      	cmp	r0, #13
    4e12:	d004      	beq.n	4e1e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    4e14:	2000      	movs	r0, #0
    4e16:	9008      	str	r0, [sp, #32]
    4e18:	980d      	ldr	r0, [sp, #52]	; 0x34
    4e1a:	b110      	cbz	r0, 4e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    4e1c:	e02e      	b.n	4e7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e1e:	2001      	movs	r0, #1
    4e20:	e7f9      	b.n	4e16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    4e22:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4e26:	2803      	cmp	r0, #3
    4e28:	d128      	bne.n	4e7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e2a:	9808      	ldr	r0, [sp, #32]
    4e2c:	b330      	cbz	r0, 4e7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e2e:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4e32:	42b8      	cmp	r0, r7
    4e34:	d122      	bne.n	4e7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e36:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4e3a:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4e3e:	6920      	ldr	r0, [r4, #16]
    4e40:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4e44:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4e48:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4e4c:	4408      	add	r0, r1
    4e4e:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4e52:	4620      	mov	r0, r4
    4e54:	f000 fac0 	bl	53d8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4e58:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4e5c:	6220      	str	r0, [r4, #32]
    4e5e:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4e62:	84a0      	strh	r0, [r4, #36]	; 0x24
    4e64:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    4e68:	6120      	str	r0, [r4, #16]
    4e6a:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4e6e:	8320      	strh	r0, [r4, #24]
    4e70:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4e74:	8360      	strh	r0, [r4, #26]
    4e76:	2002      	movs	r0, #2
    4e78:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4e7c:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4e80:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4e84:	1a38      	subs	r0, r7, r0
    4e86:	fa0f fa80 	sxth.w	sl, r0
    4e8a:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    4e8e:	1a38      	subs	r0, r7, r0
    4e90:	fa0f f880 	sxth.w	r8, r0
    4e94:	f1b8 0f00 	cmp.w	r8, #0
    4e98:	da08      	bge.n	4eac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    4e9a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4e9e:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    4ea2:	46d0      	mov	r8, sl
    4ea4:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4ea8:	2001      	movs	r0, #1
    4eaa:	9007      	str	r0, [sp, #28]
    4eac:	ab01      	add	r3, sp, #4
    4eae:	4652      	mov	r2, sl
    4eb0:	4641      	mov	r1, r8
    4eb2:	4620      	mov	r0, r4
    4eb4:	f7ff fef6 	bl	4ca4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    4eb8:	9004      	str	r0, [sp, #16]
    4eba:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ebe:	f8df b334 	ldr.w	fp, [pc, #820]	; 51f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    4ec2:	b140      	cbz	r0, 4ed6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    4ec4:	2801      	cmp	r0, #1
    4ec6:	d07d      	beq.n	4fc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    4ec8:	2802      	cmp	r0, #2
    4eca:	d051      	beq.n	4f70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    4ecc:	2803      	cmp	r0, #3
    4ece:	d07a      	beq.n	4fc6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    4ed0:	f240 5143 	movw	r1, #1347	; 0x543
    4ed4:	e18a      	b.n	51ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    4ed6:	2101      	movs	r1, #1
    4ed8:	2000      	movs	r0, #0
    4eda:	f008 fff5 	bl	dec8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4ede:	4606      	mov	r6, r0
    4ee0:	6a20      	ldr	r0, [r4, #32]
    4ee2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4ee6:	4430      	add	r0, r6
    4ee8:	f007 fa3a 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4eec:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4ef0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4ef4:	6920      	ldr	r0, [r4, #16]
    4ef6:	f007 fa33 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4efa:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4efe:	a907      	add	r1, sp, #28
    4f00:	a806      	add	r0, sp, #24
    4f02:	f003 f847 	bl	7f94 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4f06:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4f0e:	f006 f99d 	bl	b24c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4f12:	4682      	mov	sl, r0
    4f14:	4620      	mov	r0, r4
    4f16:	f00a f8e7 	bl	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4f1a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4f1e:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4f22:	f003 f9c5 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f26:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f2a:	4401      	add	r1, r0
    4f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f30:	fbb1 f0f0 	udiv	r0, r1, r0
    4f34:	6a21      	ldr	r1, [r4, #32]
    4f36:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4f3a:	4431      	add	r1, r6
    4f3c:	1a08      	subs	r0, r1, r0
    4f3e:	1a81      	subs	r1, r0, r2
    4f40:	4441      	add	r1, r8
    4f42:	3920      	subs	r1, #32
    4f44:	eba1 060a 	sub.w	r6, r1, sl
    4f48:	0050      	lsls	r0, r2, #1
    4f4a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4f4c:	3060      	adds	r0, #96	; 0x60
    4f4e:	4401      	add	r1, r0
    4f50:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4f54:	f00a f938 	bl	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    4f58:	3022      	adds	r0, #34	; 0x22
    4f5a:	f8cb 0014 	str.w	r0, [fp, #20]
    4f5e:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4f62:	1a30      	subs	r0, r6, r0
    4f64:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    4f68:	d258      	bcs.n	501c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    4f6a:	f240 41dc 	movw	r1, #1244	; 0x4dc
    4f6e:	e13d      	b.n	51ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    4f70:	6a21      	ldr	r1, [r4, #32]
    4f72:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4f76:	4408      	add	r0, r1
    4f78:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f7c:	f007 f9f0 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f80:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4f84:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f88:	6920      	ldr	r0, [r4, #16]
    4f8a:	f007 f9e9 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f8e:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4f92:	4620      	mov	r0, r4
    4f94:	f00a f8a8 	bl	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4f98:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4f9c:	bb10      	cbnz	r0, 4fe4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    4f9e:	f1b9 0f00 	cmp.w	r9, #0
    4fa2:	d01f      	beq.n	4fe4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    4fa4:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    4fa8:	4640      	mov	r0, r8
    4faa:	f003 f981 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4fae:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4fb2:	4401      	add	r1, r0
    4fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4fb8:	fbb1 f0f0 	udiv	r0, r1, r0
    4fbc:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4fc0:	4408      	add	r0, r1
    4fc2:	e001      	b.n	4fc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    4fc4:	e02b      	b.n	501e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    4fc6:	e047      	b.n	5058 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    4fc8:	6a22      	ldr	r2, [r4, #32]
    4fca:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    4fce:	4411      	add	r1, r2
    4fd0:	1a0e      	subs	r6, r1, r0
    4fd2:	4640      	mov	r0, r8
    4fd4:	f003 f940 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4fd8:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4fdc:	1a08      	subs	r0, r1, r0
    4fde:	4406      	add	r6, r0
    4fe0:	3e20      	subs	r6, #32
    4fe2:	e006      	b.n	4ff2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    4fe4:	6a21      	ldr	r1, [r4, #32]
    4fe6:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4fea:	4408      	add	r0, r1
    4fec:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4ff0:	1a46      	subs	r6, r0, r1
    4ff2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4ff6:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    4ffa:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    4ffe:	fb01 0002 	mla	r0, r1, r2, r0
    5002:	0040      	lsls	r0, r0, #1
    5004:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5006:	3060      	adds	r0, #96	; 0x60
    5008:	4401      	add	r1, r0
    500a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    500e:	f00a f8db 	bl	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    5012:	f8cb 0014 	str.w	r0, [fp, #20]
    5016:	2001      	movs	r0, #1
    5018:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    501c:	e061      	b.n	50e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    501e:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    5022:	6920      	ldr	r0, [r4, #16]
    5024:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5028:	1a86      	subs	r6, r0, r2
    502a:	eb01 000a 	add.w	r0, r1, sl
    502e:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    5032:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    5036:	1a40      	subs	r0, r0, r1
    5038:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    503c:	1e40      	subs	r0, r0, #1
    503e:	fb0c 3101 	mla	r1, ip, r1, r3
    5042:	fb00 1002 	mla	r0, r0, r2, r1
    5046:	0040      	lsls	r0, r0, #1
    5048:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    504a:	3060      	adds	r0, #96	; 0x60
    504c:	4401      	add	r1, r0
    504e:	fb06 f608 	mul.w	r6, r6, r8
    5052:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5056:	e040      	b.n	50da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    5058:	6920      	ldr	r0, [r4, #16]
    505a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    505e:	fb00 f008 	mul.w	r0, r0, r8
    5062:	fb08 0611 	mls	r6, r8, r1, r0
    5066:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    506a:	2825      	cmp	r0, #37	; 0x25
    506c:	d003      	beq.n	5076 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    506e:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    5072:	2825      	cmp	r0, #37	; 0x25
    5074:	d109      	bne.n	508a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    5076:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    507a:	1a38      	subs	r0, r7, r0
    507c:	b200      	sxth	r0, r0
    507e:	2800      	cmp	r0, #0
    5080:	db03      	blt.n	508a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    5082:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    5086:	b100      	cbz	r0, 508a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    5088:	9005      	str	r0, [sp, #20]
    508a:	9807      	ldr	r0, [sp, #28]
    508c:	b1d8      	cbz	r0, 50c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    508e:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    5092:	b9c0      	cbnz	r0, 50c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    5094:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    5098:	2800      	cmp	r0, #0
    509a:	d07d      	beq.n	5198 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    509c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50a0:	f003 f906 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    50a4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    50a8:	4401      	add	r1, r0
    50aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    50ae:	fbb1 f0f0 	udiv	r0, r1, r0
    50b2:	1a36      	subs	r6, r6, r0
    50b4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50b8:	f003 f8ce 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    50bc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    50c0:	1a08      	subs	r0, r1, r0
    50c2:	4406      	add	r6, r0
    50c4:	3e20      	subs	r6, #32
    50c6:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    50ca:	eb01 000a 	add.w	r0, r1, sl
    50ce:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    50d2:	4348      	muls	r0, r1
    50d4:	0041      	lsls	r1, r0, #1
    50d6:	3160      	adds	r1, #96	; 0x60
    50d8:	9805      	ldr	r0, [sp, #20]
    50da:	f00a f875 	bl	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    50de:	f8cb 0014 	str.w	r0, [fp, #20]
    50e2:	9804      	ldr	r0, [sp, #16]
    50e4:	f8db 2014 	ldr.w	r2, [fp, #20]
    50e8:	1a31      	subs	r1, r6, r0
    50ea:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    50ee:	6920      	ldr	r0, [r4, #16]
    50f0:	1b80      	subs	r0, r0, r6
    50f2:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    50f6:	f8cb 0018 	str.w	r0, [fp, #24]
    50fa:	4282      	cmp	r2, r0
    50fc:	d800      	bhi.n	5100 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    50fe:	4610      	mov	r0, r2
    5100:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    5104:	2600      	movs	r6, #0
    5106:	702e      	strb	r6, [r5, #0]
    5108:	2064      	movs	r0, #100	; 0x64
    510a:	8128      	strh	r0, [r5, #8]
    510c:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    5110:	1851      	adds	r1, r2, r1
    5112:	4170      	adcs	r0, r6
    5114:	e9c5 1004 	strd	r1, r0, [r5, #16]
    5118:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    511c:	f009 fa4c 	bl	e5b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    5120:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    5124:	4408      	add	r0, r1
    5126:	6068      	str	r0, [r5, #4]
    5128:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    512c:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    5130:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    5134:	72ae      	strb	r6, [r5, #10]
    5136:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    513a:	1bc0      	subs	r0, r0, r7
    513c:	b200      	sxth	r0, r0
    513e:	2800      	cmp	r0, #0
    5140:	dd01      	ble.n	5146 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    5142:	2002      	movs	r0, #2
    5144:	72a8      	strb	r0, [r5, #10]
    5146:	9808      	ldr	r0, [sp, #32]
    5148:	b338      	cbz	r0, 519a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    514a:	f1b9 0f00 	cmp.w	r9, #0
    514e:	d01c      	beq.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5150:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    5154:	b3f1      	cbz	r1, 51d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5e8>
    5156:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    515a:	bf00      	nop
    515c:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    5160:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    5164:	1c40      	adds	r0, r0, #1
    5166:	4342      	muls	r2, r0
    5168:	428a      	cmp	r2, r1
    516a:	d20e      	bcs.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    516c:	7aa8      	ldrb	r0, [r5, #10]
    516e:	b160      	cbz	r0, 518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5170:	72ae      	strb	r6, [r5, #10]
    5172:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5176:	1c40      	adds	r0, r0, #1
    5178:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    517c:	f7fe fabe 	bl	36fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    5180:	f000 0007 	and.w	r0, r0, #7
    5184:	1c40      	adds	r0, r0, #1
    5186:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    518a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    518e:	4629      	mov	r1, r5
    5190:	f00a f82c 	bl	f1ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    5194:	b340      	cbz	r0, 51e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    5196:	e001      	b.n	519c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    5198:	e009      	b.n	51ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    519a:	e00b      	b.n	51b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    519c:	980d      	ldr	r0, [sp, #52]	; 0x34
    519e:	f080 0001 	eor.w	r0, r0, #1
    51a2:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    51a6:	2000      	movs	r0, #0
    51a8:	b00f      	add	sp, #60	; 0x3c
    51aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51ae:	f240 512e 	movw	r1, #1326	; 0x52e
    51b2:	e01b      	b.n	51ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    51b4:	f1b9 0f00 	cmp.w	r9, #0
    51b8:	d1ca      	bne.n	5150 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    51ba:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    51be:	2800      	cmp	r0, #0
    51c0:	d0e3      	beq.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    51c2:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    51c6:	6920      	ldr	r0, [r4, #16]
    51c8:	1a41      	subs	r1, r0, r1
    51ca:	4628      	mov	r0, r5
    51cc:	f008 fe8e 	bl	deec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    51d0:	0400      	lsls	r0, r0, #16
    51d2:	e000      	b.n	51d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ea>
    51d4:	e006      	b.n	51e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    51d6:	0c00      	lsrs	r0, r0, #16
    51d8:	d0d7      	beq.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    51da:	9918      	ldr	r1, [sp, #96]	; 0x60
    51dc:	b101      	cbz	r1, 51e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    51de:	8008      	strh	r0, [r1, #0]
    51e0:	2001      	movs	r0, #1
    51e2:	e7e1      	b.n	51a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5bc>
    51e4:	2000      	movs	r0, #0
    51e6:	e7b9      	b.n	515c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    51e8:	f240 518c 	movw	r1, #1420	; 0x58c
    51ec:	2030      	movs	r0, #48	; 0x30
    51ee:	f7fc f8d7 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51f2:	0000      	.short	0x0000
    51f4:	200000e0 	.word	0x200000e0
    51f8:	b570      	push	{r4, r5, r6, lr}
    51fa:	4604      	mov	r4, r0
    51fc:	f00b fc4e 	bl	10a9c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    5200:	2864      	cmp	r0, #100	; 0x64
    5202:	d901      	bls.n	5208 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>
    5204:	4605      	mov	r5, r0
    5206:	e000      	b.n	520a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61e>
    5208:	2564      	movs	r5, #100	; 0x64
    520a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    520e:	2128      	movs	r1, #40	; 0x28
    5210:	f009 fef8 	bl	f004 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    5214:	4428      	add	r0, r5
    5216:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    521a:	f500 7010 	add.w	r0, r0, #576	; 0x240
    521e:	180e      	adds	r6, r1, r0
    5220:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5224:	2128      	movs	r1, #40	; 0x28
    5226:	f009 feed 	bl	f004 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    522a:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    522e:	4620      	mov	r0, r4
    5230:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5232:	f009 f960 	bl	e4f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5236:	4605      	mov	r5, r0
    5238:	4632      	mov	r2, r6
    523a:	4620      	mov	r0, r4
    523c:	6921      	ldr	r1, [r4, #16]
    523e:	f009 f95a 	bl	e4f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5242:	4909      	ldr	r1, [pc, #36]	; (5268 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    5244:	4285      	cmp	r5, r0
    5246:	60c8      	str	r0, [r1, #12]
    5248:	d200      	bcs.n	524c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x660>
    524a:	4628      	mov	r0, r5
    524c:	6088      	str	r0, [r1, #8]
    524e:	780a      	ldrb	r2, [r1, #0]
    5250:	b902      	cbnz	r2, 5254 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    5252:	60c8      	str	r0, [r1, #12]
    5254:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    5258:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    525c:	6108      	str	r0, [r1, #16]
    525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5262:	f005 bf13 	b.w	b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5266:	0000      	.short	0x0000
    5268:	200000e0 	.word	0x200000e0
    526c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    526e:	4604      	mov	r4, r0
    5270:	f005 ffda 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5274:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    5278:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    527c:	1ac0      	subs	r0, r0, r3
    527e:	eb61 0102 	sbc.w	r1, r1, r2
    5282:	2200      	movs	r2, #0
    5284:	4613      	mov	r3, r2
    5286:	1a12      	subs	r2, r2, r0
    5288:	418b      	sbcs	r3, r1
    528a:	db02      	blt.n	5292 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a6>
    528c:	f240 6109 	movw	r1, #1545	; 0x609
    5290:	e04d      	b.n	532e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    5292:	1c42      	adds	r2, r0, #1
    5294:	f171 0100 	sbcs.w	r1, r1, #0
    5298:	db02      	blt.n	52a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b4>
    529a:	f240 610a 	movw	r1, #1546	; 0x60a
    529e:	e046      	b.n	532e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    52a0:	6922      	ldr	r2, [r4, #16]
    52a2:	2100      	movs	r1, #0
    52a4:	b10a      	cbz	r2, 52aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6be>
    52a6:	fbb0 f1f2 	udiv	r1, r0, r2
    52aa:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    52ae:	280d      	cmp	r0, #13
    52b0:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    52b4:	d01b      	beq.n	52ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x702>
    52b6:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    52ba:	1853      	adds	r3, r2, r1
    52bc:	1ac3      	subs	r3, r0, r3
    52be:	b21b      	sxth	r3, r3
    52c0:	2b00      	cmp	r3, #0
    52c2:	db01      	blt.n	52c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6dc>
    52c4:	1c40      	adds	r0, r0, #1
    52c6:	e001      	b.n	52cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e0>
    52c8:	1c49      	adds	r1, r1, #1
    52ca:	1850      	adds	r0, r2, r1
    52cc:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    52d0:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    52d4:	f88d 0000 	strb.w	r0, [sp]
    52d8:	9800      	ldr	r0, [sp, #0]
    52da:	9000      	str	r0, [sp, #0]
    52dc:	f89d 0000 	ldrb.w	r0, [sp]
    52e0:	b940      	cbnz	r0, 52f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    52e2:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    52e6:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    52ea:	4288      	cmp	r0, r1
    52ec:	d102      	bne.n	52f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    52ee:	1c40      	adds	r0, r0, #1
    52f0:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    52f4:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    52f8:	1c40      	adds	r0, r0, #1
    52fa:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    52fe:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    5302:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    5306:	1a40      	subs	r0, r0, r1
    5308:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    530c:	1e40      	subs	r0, r0, #1
    530e:	4408      	add	r0, r1
    5310:	b285      	uxth	r5, r0
    5312:	e026      	b.n	5362 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    5314:	a801      	add	r0, sp, #4
    5316:	2300      	movs	r3, #0
    5318:	9000      	str	r0, [sp, #0]
    531a:	461a      	mov	r2, r3
    531c:	4620      	mov	r0, r4
    531e:	f7ff fd61 	bl	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    5322:	2800      	cmp	r0, #0
    5324:	d03a      	beq.n	539c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b0>
    5326:	2801      	cmp	r0, #1
    5328:	d004      	beq.n	5334 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x748>
    532a:	f240 6149 	movw	r1, #1609	; 0x649
    532e:	2030      	movs	r0, #48	; 0x30
    5330:	f7fc f836 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5334:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5338:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    533c:	1a42      	subs	r2, r0, r1
    533e:	b212      	sxth	r2, r2
    5340:	2a00      	cmp	r2, #0
    5342:	da09      	bge.n	5358 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    5344:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5348:	4402      	add	r2, r0
    534a:	1aaa      	subs	r2, r5, r2
    534c:	b212      	sxth	r2, r2
    534e:	2a00      	cmp	r2, #0
    5350:	da02      	bge.n	5358 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    5352:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    5356:	e004      	b.n	5362 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    5358:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    535c:	4408      	add	r0, r1
    535e:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5362:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    5366:	1a68      	subs	r0, r5, r1
    5368:	b200      	sxth	r0, r0
    536a:	2800      	cmp	r0, #0
    536c:	dad2      	bge.n	5314 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x728>
    536e:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    5372:	b188      	cbz	r0, 5398 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ac>
    5374:	f05f 0008 	movs.w	r0, #8
    5378:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    537c:	220b      	movs	r2, #11
    537e:	4908      	ldr	r1, [pc, #32]	; (53a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>)
    5380:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    5384:	f009 f87f 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5388:	4620      	mov	r0, r4
    538a:	f00a f8bf 	bl	f50c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    538e:	4620      	mov	r0, r4
    5390:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    5394:	f009 bf8f 	b.w	f2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    5398:	203e      	movs	r0, #62	; 0x3e
    539a:	e7ed      	b.n	5378 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78c>
    539c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    539e:	0000      	.short	0x0000
    53a0:	0000e7c5 	.word	0x0000e7c5
    53a4:	00000000 	.word	0x00000000
    53a8:	00010000 	.word	0x00010000
    53ac:	00000000 	.word	0x00000000
    53b0:	00010000 	.word	0x00010000
    53b4:	00000000 	.word	0x00000000
    53b8:	00001e14 	.word	0x00001e14
    53bc:	00001130 	.word	0x00001130
    53c0:	00fa01f4 	.word	0x00fa01f4
    53c4:	00640096 	.word	0x00640096
    53c8:	0032004b 	.word	0x0032004b
    53cc:	0014001e 	.word	0x0014001e
    53d0:	0005000a 	.word	0x0005000a
    53d4:	00010002 	.word	0x00010002

000053d8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    53d8:	b510      	push	{r4, lr}
    53da:	4604      	mov	r4, r0
    53dc:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    53e0:	6921      	ldr	r1, [r4, #16]
    53e2:	4288      	cmp	r0, r1
    53e4:	d109      	bne.n	53fa <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    53e6:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    53ea:	8b22      	ldrh	r2, [r4, #24]
    53ec:	4291      	cmp	r1, r2
    53ee:	d104      	bne.n	53fa <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    53f0:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    53f4:	8b62      	ldrh	r2, [r4, #26]
    53f6:	4291      	cmp	r1, r2
    53f8:	d014      	beq.n	5424 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    53fa:	8821      	ldrh	r1, [r4, #0]
    53fc:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    5400:	f008 fc91 	bl	dd26 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5404:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    5408:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    540c:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    5410:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    5414:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    5418:	2209      	movs	r2, #9
    541a:	4907      	ldr	r1, [pc, #28]	; (5438 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    541c:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    5420:	f009 f845 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5424:	2102      	movs	r1, #2
    5426:	4620      	mov	r0, r4
    5428:	f7fd fd80 	bl	2f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    542c:	2000      	movs	r0, #0
    542e:	f804 0f9e 	strb.w	r0, [r4, #158]!
    5432:	2003      	movs	r0, #3
    5434:	70e0      	strb	r0, [r4, #3]
    5436:	bd10      	pop	{r4, pc}
    5438:	0000e809 	.word	0x0000e809

0000543c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    543c:	4806      	ldr	r0, [pc, #24]	; (5458 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    543e:	4905      	ldr	r1, [pc, #20]	; (5454 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    5440:	6501      	str	r1, [r0, #80]	; 0x50
    5442:	4906      	ldr	r1, [pc, #24]	; (545c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    5444:	6541      	str	r1, [r0, #84]	; 0x54
    5446:	4807      	ldr	r0, [pc, #28]	; (5464 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    5448:	4905      	ldr	r1, [pc, #20]	; (5460 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    544a:	6501      	str	r1, [r0, #80]	; 0x50
    544c:	4906      	ldr	r1, [pc, #24]	; (5468 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    544e:	6541      	str	r1, [r0, #84]	; 0x54
    5450:	4770      	bx	lr
    5452:	0000      	.short	0x0000
    5454:	000067bd 	.word	0x000067bd
    5458:	20000114 	.word	0x20000114
    545c:	000068a1 	.word	0x000068a1
    5460:	0000f72d 	.word	0x0000f72d
    5464:	200001c0 	.word	0x200001c0
    5468:	0000f757 	.word	0x0000f757

0000546c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    546c:	481e      	ldr	r0, [pc, #120]	; (54e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    546e:	491d      	ldr	r1, [pc, #116]	; (54e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    5470:	6081      	str	r1, [r0, #8]
    5472:	491e      	ldr	r1, [pc, #120]	; (54ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    5474:	6041      	str	r1, [r0, #4]
    5476:	491e      	ldr	r1, [pc, #120]	; (54f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    5478:	6001      	str	r1, [r0, #0]
    547a:	491e      	ldr	r1, [pc, #120]	; (54f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    547c:	6281      	str	r1, [r0, #40]	; 0x28
    547e:	491e      	ldr	r1, [pc, #120]	; (54f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    5480:	62c1      	str	r1, [r0, #44]	; 0x2c
    5482:	491e      	ldr	r1, [pc, #120]	; (54fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    5484:	60c1      	str	r1, [r0, #12]
    5486:	491e      	ldr	r1, [pc, #120]	; (5500 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    5488:	6181      	str	r1, [r0, #24]
    548a:	491e      	ldr	r1, [pc, #120]	; (5504 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    548c:	6301      	str	r1, [r0, #48]	; 0x30
    548e:	491e      	ldr	r1, [pc, #120]	; (5508 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    5490:	6201      	str	r1, [r0, #32]
    5492:	491e      	ldr	r1, [pc, #120]	; (550c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    5494:	64c1      	str	r1, [r0, #76]	; 0x4c
    5496:	491e      	ldr	r1, [pc, #120]	; (5510 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    5498:	6481      	str	r1, [r0, #72]	; 0x48
    549a:	491e      	ldr	r1, [pc, #120]	; (5514 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    549c:	6441      	str	r1, [r0, #68]	; 0x44
    549e:	491e      	ldr	r1, [pc, #120]	; (5518 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    54a0:	6341      	str	r1, [r0, #52]	; 0x34
    54a2:	491e      	ldr	r1, [pc, #120]	; (551c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    54a4:	61c1      	str	r1, [r0, #28]
    54a6:	491e      	ldr	r1, [pc, #120]	; (5520 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    54a8:	6241      	str	r1, [r0, #36]	; 0x24
    54aa:	481f      	ldr	r0, [pc, #124]	; (5528 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    54ac:	491d      	ldr	r1, [pc, #116]	; (5524 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    54ae:	6081      	str	r1, [r0, #8]
    54b0:	491e      	ldr	r1, [pc, #120]	; (552c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    54b2:	61c1      	str	r1, [r0, #28]
    54b4:	491e      	ldr	r1, [pc, #120]	; (5530 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    54b6:	6241      	str	r1, [r0, #36]	; 0x24
    54b8:	491e      	ldr	r1, [pc, #120]	; (5534 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    54ba:	62c1      	str	r1, [r0, #44]	; 0x2c
    54bc:	491e      	ldr	r1, [pc, #120]	; (5538 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    54be:	6101      	str	r1, [r0, #16]
    54c0:	491e      	ldr	r1, [pc, #120]	; (553c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    54c2:	6141      	str	r1, [r0, #20]
    54c4:	491e      	ldr	r1, [pc, #120]	; (5540 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    54c6:	6441      	str	r1, [r0, #68]	; 0x44
    54c8:	491e      	ldr	r1, [pc, #120]	; (5544 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    54ca:	6341      	str	r1, [r0, #52]	; 0x34
    54cc:	491e      	ldr	r1, [pc, #120]	; (5548 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    54ce:	6181      	str	r1, [r0, #24]
    54d0:	491e      	ldr	r1, [pc, #120]	; (554c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    54d2:	6301      	str	r1, [r0, #48]	; 0x30
    54d4:	491e      	ldr	r1, [pc, #120]	; (5550 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    54d6:	6481      	str	r1, [r0, #72]	; 0x48
    54d8:	491e      	ldr	r1, [pc, #120]	; (5554 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    54da:	64c1      	str	r1, [r0, #76]	; 0x4c
    54dc:	491e      	ldr	r1, [pc, #120]	; (5558 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    54de:	6381      	str	r1, [r0, #56]	; 0x38
    54e0:	4770      	bx	lr
    54e2:	0000      	.short	0x0000
    54e4:	00006be1 	.word	0x00006be1
    54e8:	20000114 	.word	0x20000114
    54ec:	000065ad 	.word	0x000065ad
    54f0:	00006619 	.word	0x00006619
    54f4:	0000f5ef 	.word	0x0000f5ef
    54f8:	0000f639 	.word	0x0000f639
    54fc:	000066d9 	.word	0x000066d9
    5500:	0000f651 	.word	0x0000f651
    5504:	00006ca5 	.word	0x00006ca5
    5508:	00006775 	.word	0x00006775
    550c:	0000f5c1 	.word	0x0000f5c1
    5510:	0000f59b 	.word	0x0000f59b
    5514:	00006b59 	.word	0x00006b59
    5518:	00006b8d 	.word	0x00006b8d
    551c:	00006c19 	.word	0x00006c19
    5520:	00006781 	.word	0x00006781
    5524:	0000f8a1 	.word	0x0000f8a1
    5528:	200001c0 	.word	0x200001c0
    552c:	00006d81 	.word	0x00006d81
    5530:	0000f729 	.word	0x0000f729
    5534:	0000f7c1 	.word	0x0000f7c1
    5538:	0000f703 	.word	0x0000f703
    553c:	0000f883 	.word	0x0000f883
    5540:	0000f831 	.word	0x0000f831
    5544:	0000f861 	.word	0x0000f861
    5548:	00006d0d 	.word	0x00006d0d
    554c:	0000f8c3 	.word	0x0000f8c3
    5550:	0000f787 	.word	0x0000f787
    5554:	0000f7b1 	.word	0x0000f7b1
    5558:	0000f87f 	.word	0x0000f87f

0000555c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    555c:	4806      	ldr	r0, [pc, #24]	; (5578 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    555e:	4905      	ldr	r1, [pc, #20]	; (5574 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    5560:	6581      	str	r1, [r0, #88]	; 0x58
    5562:	4906      	ldr	r1, [pc, #24]	; (557c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    5564:	6601      	str	r1, [r0, #96]	; 0x60
    5566:	4807      	ldr	r0, [pc, #28]	; (5584 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    5568:	4905      	ldr	r1, [pc, #20]	; (5580 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    556a:	6581      	str	r1, [r0, #88]	; 0x58
    556c:	4906      	ldr	r1, [pc, #24]	; (5588 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    556e:	65c1      	str	r1, [r0, #92]	; 0x5c
    5570:	4770      	bx	lr
    5572:	0000      	.short	0x0000
    5574:	00006921 	.word	0x00006921
    5578:	20000114 	.word	0x20000114
    557c:	00006a05 	.word	0x00006a05
    5580:	0000f7e7 	.word	0x0000f7e7
    5584:	200001c0 	.word	0x200001c0
    5588:	0000f811 	.word	0x0000f811

0000558c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    558e:	4c7c      	ldr	r4, [pc, #496]	; (5780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    5590:	2101      	movs	r1, #1
    5592:	f1a4 0610 	sub.w	r6, r4, #16
    5596:	7021      	strb	r1, [r4, #0]
    5598:	2500      	movs	r5, #0
    559a:	6060      	str	r0, [r4, #4]
    559c:	8075      	strh	r5, [r6, #2]
    559e:	7075      	strb	r5, [r6, #1]
    55a0:	7035      	strb	r5, [r6, #0]
    55a2:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    55a6:	8800      	ldrh	r0, [r0, #0]
    55a8:	f7fc fb0c 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    55ac:	b180      	cbz	r0, 55d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    55ae:	6860      	ldr	r0, [r4, #4]
    55b0:	8800      	ldrh	r0, [r0, #0]
    55b2:	f7fc fd6f 	bl	2094 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    55b6:	6860      	ldr	r0, [r4, #4]
    55b8:	8800      	ldrh	r0, [r0, #0]
    55ba:	f7fc fd13 	bl	1fe4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    55be:	6860      	ldr	r0, [r4, #4]
    55c0:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    55c4:	b1c9      	cbz	r1, 55fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    55c6:	3080      	adds	r0, #128	; 0x80
    55c8:	f009 ffaf 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    55cc:	b118      	cbz	r0, 55d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    55ce:	e014      	b.n	55fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    55d0:	f640 5159 	movw	r1, #3417	; 0xd59
    55d4:	e06c      	b.n	56b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    55d6:	6860      	ldr	r0, [r4, #4]
    55d8:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    55dc:	f88d 1000 	strb.w	r1, [sp]
    55e0:	9900      	ldr	r1, [sp, #0]
    55e2:	9100      	str	r1, [sp, #0]
    55e4:	f89d 1000 	ldrb.w	r1, [sp]
    55e8:	b139      	cbz	r1, 55fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    55ea:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    55ee:	2301      	movs	r3, #1
    55f0:	4619      	mov	r1, r3
    55f2:	3080      	adds	r0, #128	; 0x80
    55f4:	f008 fbb0 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    55f8:	b180      	cbz	r0, 561c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    55fa:	6860      	ldr	r0, [r4, #4]
    55fc:	3080      	adds	r0, #128	; 0x80
    55fe:	f009 ff94 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5602:	b128      	cbz	r0, 5610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    5604:	6860      	ldr	r0, [r4, #4]
    5606:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    560a:	bf00      	nop
    560c:	f000 fbb4 	bl	5d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>
    5610:	6860      	ldr	r0, [r4, #4]
    5612:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    5616:	b189      	cbz	r1, 563c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    5618:	80b5      	strh	r5, [r6, #4]
    561a:	e01e      	b.n	565a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    561c:	6860      	ldr	r0, [r4, #4]
    561e:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    5622:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5626:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    562a:	2100      	movs	r1, #0
    562c:	2002      	movs	r0, #2
    562e:	f000 fe63 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5632:	6860      	ldr	r0, [r4, #4]
    5634:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    5638:	2002      	movs	r0, #2
    563a:	e7e7      	b.n	560c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    563c:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    5640:	f88d 1000 	strb.w	r1, [sp]
    5644:	9900      	ldr	r1, [sp, #0]
    5646:	9100      	str	r1, [sp, #0]
    5648:	f89d 1000 	ldrb.w	r1, [sp]
    564c:	b919      	cbnz	r1, 5656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    564e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    5650:	8b02      	ldrh	r2, [r0, #24]
    5652:	4291      	cmp	r1, r2
    5654:	d800      	bhi.n	5658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    5656:	8b01      	ldrh	r1, [r0, #24]
    5658:	80b1      	strh	r1, [r6, #4]
    565a:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    565e:	1e49      	subs	r1, r1, #1
    5660:	b28f      	uxth	r7, r1
    5662:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    5666:	4439      	add	r1, r7
    5668:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    566c:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    5670:	4439      	add	r1, r7
    5672:	8001      	strh	r1, [r0, #0]
    5674:	f001 fbb2 	bl	6ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    5678:	b120      	cbz	r0, 5684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    567a:	6860      	ldr	r0, [r4, #4]
    567c:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    5680:	4439      	add	r1, r7
    5682:	6001      	str	r1, [r0, #0]
    5684:	6861      	ldr	r1, [r4, #4]
    5686:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    568a:	2801      	cmp	r0, #1
    568c:	d802      	bhi.n	5694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    568e:	1c40      	adds	r0, r0, #1
    5690:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    5694:	b10f      	cbz	r7, 569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    5696:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    569a:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    569e:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    56a2:	f101 0080 	add.w	r0, r1, #128	; 0x80
    56a6:	f008 fcfb 	bl	e0a0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    56aa:	b120      	cbz	r0, 56b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    56ac:	f44f 615a 	mov.w	r1, #3488	; 0xda0
    56b0:	2031      	movs	r0, #49	; 0x31
    56b2:	f7fb fe75 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56b6:	6860      	ldr	r0, [r4, #4]
    56b8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    56bc:	290a      	cmp	r1, #10
    56be:	d001      	beq.n	56c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    56c0:	290b      	cmp	r1, #11
    56c2:	d119      	bne.n	56f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    56c4:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    56c8:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    56cc:	1ad2      	subs	r2, r2, r3
    56ce:	b212      	sxth	r2, r2
    56d0:	2a00      	cmp	r2, #0
    56d2:	db11      	blt.n	56f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    56d4:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    56d8:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    56dc:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    56e0:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    56e4:	2103      	movs	r1, #3
    56e6:	f7fd fc21 	bl	2f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    56ea:	6860      	ldr	r0, [r4, #4]
    56ec:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    56f0:	21ff      	movs	r1, #255	; 0xff
    56f2:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    56f6:	e026      	b.n	5746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    56f8:	2925      	cmp	r1, #37	; 0x25
    56fa:	d111      	bne.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    56fc:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5700:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5704:	1a89      	subs	r1, r1, r2
    5706:	b209      	sxth	r1, r1
    5708:	2900      	cmp	r1, #0
    570a:	db09      	blt.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    570c:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5710:	f000 feac 	bl	646c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    5714:	2800      	cmp	r0, #0
    5716:	6860      	ldr	r0, [r4, #4]
    5718:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    571c:	d029      	beq.n	5772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    571e:	e012      	b.n	5746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5720:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5724:	2925      	cmp	r1, #37	; 0x25
    5726:	d001      	beq.n	572c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    5728:	2927      	cmp	r1, #39	; 0x27
    572a:	d10c      	bne.n	5746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    572c:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5730:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5734:	1a89      	subs	r1, r1, r2
    5736:	b209      	sxth	r1, r1
    5738:	2900      	cmp	r1, #0
    573a:	db04      	blt.n	5746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    573c:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5740:	f000 fe94 	bl	646c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    5744:	b1a8      	cbz	r0, 5772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    5746:	480f      	ldr	r0, [pc, #60]	; (5784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    5748:	9000      	str	r0, [sp, #0]
    574a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    574e:	4b0e      	ldr	r3, [pc, #56]	; (5788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    5750:	4a0e      	ldr	r2, [pc, #56]	; (578c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    5752:	f7fc fd2d 	bl	21b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    5756:	6860      	ldr	r0, [r4, #4]
    5758:	2301      	movs	r3, #1
    575a:	2105      	movs	r1, #5
    575c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5760:	3080      	adds	r0, #128	; 0x80
    5762:	f008 faf9 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5766:	2800      	cmp	r0, #0
    5768:	d009      	beq.n	577e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    576a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    576e:	f7fc bd19 	b.w	21a4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    5772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5776:	2100      	movs	r1, #0
    5778:	4608      	mov	r0, r1
    577a:	f000 bbc9 	b.w	5f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5780:	2000010c 	.word	0x2000010c
    5784:	00005f11 	.word	0x00005f11
    5788:	00005a4d 	.word	0x00005a4d
    578c:	000063b9 	.word	0x000063b9
    5790:	4804      	ldr	r0, [pc, #16]	; (57a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    5792:	2100      	movs	r1, #0
    5794:	6840      	ldr	r0, [r0, #4]
    5796:	f820 1fd8 	strh.w	r1, [r0, #216]!
    579a:	7881      	ldrb	r1, [r0, #2]
    579c:	1c49      	adds	r1, r1, #1
    579e:	7081      	strb	r1, [r0, #2]
    57a0:	4770      	bx	lr
    57a2:	0000      	.short	0x0000
    57a4:	2000010c 	.word	0x2000010c
    57a8:	4807      	ldr	r0, [pc, #28]	; (57c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    57aa:	b510      	push	{r4, lr}
    57ac:	6841      	ldr	r1, [r0, #4]
    57ae:	f811 0fda 	ldrb.w	r0, [r1, #218]!
    57b2:	1e40      	subs	r0, r0, #1
    57b4:	b240      	sxtb	r0, r0
    57b6:	7008      	strb	r0, [r1, #0]
    57b8:	2800      	cmp	r0, #0
    57ba:	da04      	bge.n	57c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    57bc:	f240 2101 	movw	r1, #513	; 0x201
    57c0:	2031      	movs	r0, #49	; 0x31
    57c2:	f7fb fded 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57c6:	bd10      	pop	{r4, pc}
    57c8:	2000010c 	.word	0x2000010c
    57cc:	491d      	ldr	r1, [pc, #116]	; (5844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    57ce:	b508      	push	{r3, lr}
    57d0:	6849      	ldr	r1, [r1, #4]
    57d2:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    57d6:	b1c0      	cbz	r0, 580a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    57d8:	2a11      	cmp	r2, #17
    57da:	d006      	beq.n	57ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    57dc:	2a15      	cmp	r2, #21
    57de:	d007      	beq.n	57f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    57e0:	2a16      	cmp	r2, #22
    57e2:	d009      	beq.n	57f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    57e4:	2a1c      	cmp	r2, #28
    57e6:	d128      	bne.n	583a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    57e8:	e009      	b.n	57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    57ea:	2101      	movs	r1, #1
    57ec:	200b      	movs	r0, #11
    57ee:	e008      	b.n	5802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    57f0:	4814      	ldr	r0, [pc, #80]	; (5844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    57f2:	f009 ff3e 	bl	f672 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x166>
    57f6:	e006      	b.n	5806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    57f8:	f000 fd9c 	bl	6334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda8>
    57fc:	e003      	b.n	5806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    57fe:	2101      	movs	r1, #1
    5800:	2006      	movs	r0, #6
    5802:	f000 fd79 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5806:	2001      	movs	r0, #1
    5808:	bd08      	pop	{r3, pc}
    580a:	2a22      	cmp	r2, #34	; 0x22
    580c:	d004      	beq.n	5818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    580e:	2a2f      	cmp	r2, #47	; 0x2f
    5810:	d113      	bne.n	583a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    5812:	2101      	movs	r1, #1
    5814:	2011      	movs	r0, #17
    5816:	e7f4      	b.n	5802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5818:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    581c:	2802      	cmp	r0, #2
    581e:	d00e      	beq.n	583e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    5820:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5824:	2801      	cmp	r0, #1
    5826:	d108      	bne.n	583a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    5828:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    582c:	f88d 0000 	strb.w	r0, [sp]
    5830:	9800      	ldr	r0, [sp, #0]
    5832:	9000      	str	r0, [sp, #0]
    5834:	f89d 0000 	ldrb.w	r0, [sp]
    5838:	b108      	cbz	r0, 583e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    583a:	2000      	movs	r0, #0
    583c:	bd08      	pop	{r3, pc}
    583e:	2101      	movs	r1, #1
    5840:	2017      	movs	r0, #23
    5842:	e7de      	b.n	5802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5844:	2000010c 	.word	0x2000010c
    5848:	b538      	push	{r3, r4, r5, lr}
    584a:	2800      	cmp	r0, #0
    584c:	d176      	bne.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    584e:	4c3c      	ldr	r4, [pc, #240]	; (5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>)
    5850:	6860      	ldr	r0, [r4, #4]
    5852:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    5856:	07ca      	lsls	r2, r1, #31
    5858:	d002      	beq.n	5860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    585a:	2101      	movs	r1, #1
    585c:	2009      	movs	r0, #9
    585e:	e069      	b.n	5934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5860:	078a      	lsls	r2, r1, #30
    5862:	d50a      	bpl.n	587a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    5864:	2101      	movs	r1, #1
    5866:	200c      	movs	r0, #12
    5868:	f000 fd46 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    586c:	6860      	ldr	r0, [r4, #4]
    586e:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    5872:	f041 0101 	orr.w	r1, r1, #1
    5876:	7001      	strb	r1, [r0, #0]
    5878:	e05e      	b.n	5938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>
    587a:	074a      	lsls	r2, r1, #29
    587c:	d502      	bpl.n	5884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    587e:	2101      	movs	r1, #1
    5880:	2013      	movs	r0, #19
    5882:	e057      	b.n	5934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5884:	070a      	lsls	r2, r1, #28
    5886:	d506      	bpl.n	5896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    5888:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    588c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5890:	2101      	movs	r1, #1
    5892:	2007      	movs	r0, #7
    5894:	e04e      	b.n	5934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5896:	f011 0f30 	tst.w	r1, #48	; 0x30
    589a:	d047      	beq.n	592c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    589c:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    58a0:	f88d 1000 	strb.w	r1, [sp]
    58a4:	9900      	ldr	r1, [sp, #0]
    58a6:	9100      	str	r1, [sp, #0]
    58a8:	f89d 1000 	ldrb.w	r1, [sp]
    58ac:	bbd9      	cbnz	r1, 5926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    58ae:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    58b2:	2500      	movs	r5, #0
    58b4:	f88d 1000 	strb.w	r1, [sp]
    58b8:	9900      	ldr	r1, [sp, #0]
    58ba:	9100      	str	r1, [sp, #0]
    58bc:	f89d 1000 	ldrb.w	r1, [sp]
    58c0:	b1c1      	cbz	r1, 58f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    58c2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    58c6:	2925      	cmp	r1, #37	; 0x25
    58c8:	d02e      	beq.n	5928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    58ca:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    58ce:	2925      	cmp	r1, #37	; 0x25
    58d0:	d02a      	beq.n	5928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    58d2:	2300      	movs	r3, #0
    58d4:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    58d8:	f500 7199 	add.w	r1, r0, #306	; 0x132
    58dc:	f008 fdfd 	bl	e4da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    58e0:	6860      	ldr	r0, [r4, #4]
    58e2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    58e6:	f021 0120 	bic.w	r1, r1, #32
    58ea:	f041 0110 	orr.w	r1, r1, #16
    58ee:	6001      	str	r1, [r0, #0]
    58f0:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    58f4:	6860      	ldr	r0, [r4, #4]
    58f6:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    58fa:	06c9      	lsls	r1, r1, #27
    58fc:	d51e      	bpl.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    58fe:	f008 fe07 	bl	e510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5902:	2105      	movs	r1, #5
    5904:	6860      	ldr	r0, [r4, #4]
    5906:	f7ff f937 	bl	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    590a:	f000 f925 	bl	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    590e:	6861      	ldr	r1, [r4, #4]
    5910:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5914:	8bc2      	ldrh	r2, [r0, #30]
    5916:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    591a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    591c:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5920:	2101      	movs	r1, #1
    5922:	2015      	movs	r0, #21
    5924:	e006      	b.n	5934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5926:	e009      	b.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    5928:	2301      	movs	r3, #1
    592a:	e7d3      	b.n	58d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    592c:	0648      	lsls	r0, r1, #25
    592e:	d505      	bpl.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    5930:	2101      	movs	r1, #1
    5932:	2024      	movs	r0, #36	; 0x24
    5934:	f000 fce0 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5938:	2001      	movs	r0, #1
    593a:	bd38      	pop	{r3, r4, r5, pc}
    593c:	2000      	movs	r0, #0
    593e:	bd38      	pop	{r3, r4, r5, pc}
    5940:	2000010c 	.word	0x2000010c
    5944:	b570      	push	{r4, r5, r6, lr}
    5946:	460d      	mov	r5, r1
    5948:	4606      	mov	r6, r0
    594a:	f008 fd04 	bl	e356 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    594e:	4604      	mov	r4, r0
    5950:	4630      	mov	r0, r6
    5952:	f008 fd02 	bl	e35a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    5956:	4629      	mov	r1, r5
    5958:	f000 f81e 	bl	5998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    595c:	b1b8      	cbz	r0, 598e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    595e:	4620      	mov	r0, r4
    5960:	f008 faa4 	bl	deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5964:	0001      	movs	r1, r0
    5966:	d00d      	beq.n	5984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    5968:	480a      	ldr	r0, [pc, #40]	; (5994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x408>)
    596a:	6840      	ldr	r0, [r0, #4]
    596c:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5970:	428a      	cmp	r2, r1
    5972:	d007      	beq.n	5984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    5974:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    5978:	2901      	cmp	r1, #1
    597a:	d005      	beq.n	5988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    597c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    5980:	4220      	tst	r0, r4
    5982:	d004      	beq.n	598e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    5984:	2001      	movs	r0, #1
    5986:	bd70      	pop	{r4, r5, r6, pc}
    5988:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    598c:	e7f8      	b.n	5980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    598e:	2000      	movs	r0, #0
    5990:	bd70      	pop	{r4, r5, r6, pc}
    5992:	0000      	.short	0x0000
    5994:	2000010c 	.word	0x2000010c
    5998:	b570      	push	{r4, r5, r6, lr}
    599a:	460d      	mov	r5, r1
    599c:	4604      	mov	r4, r0
    599e:	f008 fa85 	bl	deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    59a2:	b350      	cbz	r0, 59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59a4:	4916      	ldr	r1, [pc, #88]	; (5a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>)
    59a6:	6849      	ldr	r1, [r1, #4]
    59a8:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    59ac:	4282      	cmp	r2, r0
    59ae:	d024      	beq.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59b0:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    59b4:	2b01      	cmp	r3, #1
    59b6:	d005      	beq.n	59c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    59b8:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    59bc:	4223      	tst	r3, r4
    59be:	d013      	beq.n	59e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    59c0:	b11d      	cbz	r5, 59ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    59c2:	e01a      	b.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59c4:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    59c8:	e7f8      	b.n	59bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    59ca:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    59ce:	4221      	tst	r1, r4
    59d0:	d113      	bne.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59d2:	b15a      	cbz	r2, 59ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    59d4:	2a04      	cmp	r2, #4
    59d6:	d00e      	beq.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    59d8:	2804      	cmp	r0, #4
    59da:	d00c      	beq.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    59dc:	2a08      	cmp	r2, #8
    59de:	d00a      	beq.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    59e0:	2808      	cmp	r0, #8
    59e2:	d008      	beq.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    59e4:	4282      	cmp	r2, r0
    59e6:	d908      	bls.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    59e8:	2000      	movs	r0, #0
    59ea:	bd70      	pop	{r4, r5, r6, pc}
    59ec:	f240 11a3 	movw	r1, #419	; 0x1a3
    59f0:	2006      	movs	r0, #6
    59f2:	f7fb fcd5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59f6:	4282      	cmp	r2, r0
    59f8:	d3f6      	bcc.n	59e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    59fa:	2001      	movs	r0, #1
    59fc:	bd70      	pop	{r4, r5, r6, pc}
    59fe:	0000      	.short	0x0000
    5a00:	2000010c 	.word	0x2000010c
    5a04:	b510      	push	{r4, lr}
    5a06:	4c10      	ldr	r4, [pc, #64]	; (5a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>)
    5a08:	2301      	movs	r3, #1
    5a0a:	2100      	movs	r1, #0
    5a0c:	6860      	ldr	r0, [r4, #4]
    5a0e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5a12:	3080      	adds	r0, #128	; 0x80
    5a14:	f008 f9a0 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a18:	b140      	cbz	r0, 5a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a0>
    5a1a:	6860      	ldr	r0, [r4, #4]
    5a1c:	2301      	movs	r3, #1
    5a1e:	2104      	movs	r1, #4
    5a20:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a24:	3080      	adds	r0, #128	; 0x80
    5a26:	f008 f997 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a2a:	b108      	cbz	r0, 5a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>
    5a2c:	2000      	movs	r0, #0
    5a2e:	bd10      	pop	{r4, pc}
    5a30:	6860      	ldr	r0, [r4, #4]
    5a32:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5a36:	2800      	cmp	r0, #0
    5a38:	d0f9      	beq.n	5a2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    5a3a:	2100      	movs	r1, #0
    5a3c:	2012      	movs	r0, #18
    5a3e:	f000 fc5b 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5a42:	2001      	movs	r0, #1
    5a44:	bd10      	pop	{r4, pc}
    5a46:	0000      	.short	0x0000
    5a48:	2000010c 	.word	0x2000010c
    5a4c:	490d      	ldr	r1, [pc, #52]	; (5a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f8>)
    5a4e:	4602      	mov	r2, r0
    5a50:	7848      	ldrb	r0, [r1, #1]
    5a52:	b9a0      	cbnz	r0, 5a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5a54:	f101 0010 	add.w	r0, r1, #16
    5a58:	6840      	ldr	r0, [r0, #4]
    5a5a:	b142      	cbz	r2, 5a6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    5a5c:	7889      	ldrb	r1, [r1, #2]
    5a5e:	0709      	lsls	r1, r1, #28
    5a60:	d503      	bpl.n	5a6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4de>
    5a62:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5a66:	2807      	cmp	r0, #7
    5a68:	d009      	beq.n	5a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5a6a:	2001      	movs	r0, #1
    5a6c:	4770      	bx	lr
    5a6e:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    5a72:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a74:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5a76:	428a      	cmp	r2, r1
    5a78:	d801      	bhi.n	5a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5a7a:	f7ff b859 	b.w	4b30 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    5a7e:	2000      	movs	r0, #0
    5a80:	4770      	bx	lr
    5a82:	0000      	.short	0x0000
    5a84:	200000fc 	.word	0x200000fc
    5a88:	b538      	push	{r3, r4, r5, lr}
    5a8a:	4c32      	ldr	r4, [pc, #200]	; (5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c8>)
    5a8c:	4605      	mov	r5, r0
    5a8e:	6860      	ldr	r0, [r4, #4]
    5a90:	3080      	adds	r0, #128	; 0x80
    5a92:	f009 fd4a 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5a96:	2800      	cmp	r0, #0
    5a98:	d15b      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5a9a:	2d00      	cmp	r5, #0
    5a9c:	d159      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5a9e:	6860      	ldr	r0, [r4, #4]
    5aa0:	2301      	movs	r3, #1
    5aa2:	4619      	mov	r1, r3
    5aa4:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5aa8:	3080      	adds	r0, #128	; 0x80
    5aaa:	f008 f955 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5aae:	2800      	cmp	r0, #0
    5ab0:	d14f      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5ab2:	6860      	ldr	r0, [r4, #4]
    5ab4:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5ab8:	f88d 1000 	strb.w	r1, [sp]
    5abc:	9900      	ldr	r1, [sp, #0]
    5abe:	9100      	str	r1, [sp, #0]
    5ac0:	f89d 2000 	ldrb.w	r2, [sp]
    5ac4:	2100      	movs	r1, #0
    5ac6:	b142      	cbz	r2, 5ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x54e>
    5ac8:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5acc:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5ad0:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5ad4:	2100      	movs	r1, #0
    5ad6:	2002      	movs	r0, #2
    5ad8:	e030      	b.n	5b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    5ada:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ade:	2301      	movs	r3, #1
    5ae0:	2104      	movs	r1, #4
    5ae2:	3080      	adds	r0, #128	; 0x80
    5ae4:	f008 f938 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ae8:	4605      	mov	r5, r0
    5aea:	f7ff fead 	bl	5848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    5aee:	2800      	cmp	r0, #0
    5af0:	d12f      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5af2:	4628      	mov	r0, r5
    5af4:	f7ff fe6a 	bl	57cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    5af8:	2800      	cmp	r0, #0
    5afa:	d12a      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5afc:	f7ff ff82 	bl	5a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x478>
    5b00:	2800      	cmp	r0, #0
    5b02:	d126      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b04:	6860      	ldr	r0, [r4, #4]
    5b06:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5b0a:	2909      	cmp	r1, #9
    5b0c:	d01a      	beq.n	5b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b0e:	2d00      	cmp	r5, #0
    5b10:	d11f      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b12:	f000 fb1d 	bl	6150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    5b16:	2800      	cmp	r0, #0
    5b18:	d11b      	bne.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b1a:	6860      	ldr	r0, [r4, #4]
    5b1c:	2301      	movs	r3, #1
    5b1e:	2100      	movs	r1, #0
    5b20:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5b24:	3080      	adds	r0, #128	; 0x80
    5b26:	f008 f917 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b2a:	2800      	cmp	r0, #0
    5b2c:	d011      	beq.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b2e:	6860      	ldr	r0, [r4, #4]
    5b30:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5b34:	2800      	cmp	r0, #0
    5b36:	d00c      	beq.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b38:	2100      	movs	r1, #0
    5b3a:	20ff      	movs	r0, #255	; 0xff
    5b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b40:	f000 bbda 	b.w	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5b44:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    5b48:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5b4c:	2100      	movs	r1, #0
    5b4e:	2007      	movs	r0, #7
    5b50:	e7f4      	b.n	5b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    5b52:	bd38      	pop	{r3, r4, r5, pc}
    5b54:	2000010c 	.word	0x2000010c
    5b58:	4808      	ldr	r0, [pc, #32]	; (5b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f0>)
    5b5a:	6843      	ldr	r3, [r0, #4]
    5b5c:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5b60:	2801      	cmp	r0, #1
    5b62:	d006      	beq.n	5b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e6>
    5b64:	f503 72b1 	add.w	r2, r3, #354	; 0x162
    5b68:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5b6c:	8818      	ldrh	r0, [r3, #0]
    5b6e:	f7fd bd47 	b.w	3600 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5b72:	2002      	movs	r0, #2
    5b74:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5b78:	4770      	bx	lr
    5b7a:	0000      	.short	0x0000
    5b7c:	2000010c 	.word	0x2000010c
    5b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b82:	4d2b      	ldr	r5, [pc, #172]	; (5c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5b84:	0006      	movs	r6, r0
    5b86:	f105 0410 	add.w	r4, r5, #16
    5b8a:	d133      	bne.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5b8c:	f000 f8aa 	bl	5ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    5b90:	f000 f852 	bl	5c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    5b94:	0006      	movs	r6, r0
    5b96:	d12d      	bne.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5b98:	8869      	ldrh	r1, [r5, #2]
    5b9a:	0748      	lsls	r0, r1, #29
    5b9c:	d506      	bpl.n	5bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    5b9e:	6860      	ldr	r0, [r4, #4]
    5ba0:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5ba4:	2806      	cmp	r0, #6
    5ba6:	d101      	bne.n	5bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    5ba8:	2001      	movs	r0, #1
    5baa:	7028      	strb	r0, [r5, #0]
    5bac:	0788      	lsls	r0, r1, #30
    5bae:	d516      	bpl.n	5bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5bb0:	68a8      	ldr	r0, [r5, #8]
    5bb2:	78c0      	ldrb	r0, [r0, #3]
    5bb4:	282b      	cmp	r0, #43	; 0x2b
    5bb6:	d207      	bcs.n	5bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    5bb8:	491e      	ldr	r1, [pc, #120]	; (5c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    5bba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5bbe:	b119      	cbz	r1, 5bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    5bc0:	481b      	ldr	r0, [pc, #108]	; (5c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5bc2:	3010      	adds	r0, #16
    5bc4:	4788      	blx	r1
    5bc6:	e00a      	b.n	5bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5bc8:	28ff      	cmp	r0, #255	; 0xff
    5bca:	d004      	beq.n	5bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    5bcc:	f640 1102 	movw	r1, #2306	; 0x902
    5bd0:	2031      	movs	r0, #49	; 0x31
    5bd2:	f7fb fbe5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bd6:	4816      	ldr	r0, [pc, #88]	; (5c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5bd8:	3010      	adds	r0, #16
    5bda:	f009 fd89 	bl	f6f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    5bde:	78a8      	ldrb	r0, [r5, #2]
    5be0:	06c0      	lsls	r0, r0, #27
    5be2:	d507      	bpl.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5be4:	6860      	ldr	r0, [r4, #4]
    5be6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5bea:	290a      	cmp	r1, #10
    5bec:	d102      	bne.n	5bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5bee:	210b      	movs	r1, #11
    5bf0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5bf4:	7868      	ldrb	r0, [r5, #1]
    5bf6:	0700      	lsls	r0, r0, #28
    5bf8:	d518      	bpl.n	5c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5bfa:	6860      	ldr	r0, [r4, #4]
    5bfc:	2301      	movs	r3, #1
    5bfe:	2105      	movs	r1, #5
    5c00:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c04:	3080      	adds	r0, #128	; 0x80
    5c06:	f008 f8a7 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c0a:	b108      	cbz	r0, 5c10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x684>
    5c0c:	2608      	movs	r6, #8
    5c0e:	e00d      	b.n	5c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5c10:	2500      	movs	r5, #0
    5c12:	4669      	mov	r1, sp
    5c14:	2003      	movs	r0, #3
    5c16:	9500      	str	r5, [sp, #0]
    5c18:	f7fc fb8c 	bl	2334 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5c1c:	9800      	ldr	r0, [sp, #0]
    5c1e:	b128      	cbz	r0, 5c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5c20:	7205      	strb	r5, [r0, #8]
    5c22:	222a      	movs	r2, #42	; 0x2a
    5c24:	6861      	ldr	r1, [r4, #4]
    5c26:	9800      	ldr	r0, [sp, #0]
    5c28:	f008 fc2d 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5c2c:	4630      	mov	r0, r6
    5c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c30:	200000fc 	.word	0x200000fc
    5c34:	200001c0 	.word	0x200001c0
    5c38:	b570      	push	{r4, r5, r6, lr}
    5c3a:	4d28      	ldr	r5, [pc, #160]	; (5cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5c3c:	2000      	movs	r0, #0
    5c3e:	78a9      	ldrb	r1, [r5, #2]
    5c40:	07c9      	lsls	r1, r1, #31
    5c42:	d017      	beq.n	5c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>
    5c44:	68e8      	ldr	r0, [r5, #12]
    5c46:	f105 0410 	add.w	r4, r5, #16
    5c4a:	2301      	movs	r3, #1
    5c4c:	78c6      	ldrb	r6, [r0, #3]
    5c4e:	6860      	ldr	r0, [r4, #4]
    5c50:	2105      	movs	r1, #5
    5c52:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c56:	3080      	adds	r0, #128	; 0x80
    5c58:	f008 f87e 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c5c:	b158      	cbz	r0, 5c76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ea>
    5c5e:	1eb6      	subs	r6, r6, #2
    5c60:	2e0a      	cmp	r6, #10
    5c62:	d206      	bcs.n	5c72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    5c64:	e8df f006 	tbb	[pc, r6]
    5c68:	05050707 	.word	0x05050707
    5c6c:	05050707 	.word	0x05050707
    5c70:	0707      	.short	0x0707
    5c72:	2008      	movs	r0, #8
    5c74:	bd70      	pop	{r4, r5, r6, pc}
    5c76:	68e8      	ldr	r0, [r5, #12]
    5c78:	f7fd fa78 	bl	316c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5c7c:	b338      	cbz	r0, 5cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5c7e:	68e8      	ldr	r0, [r5, #12]
    5c80:	78c5      	ldrb	r5, [r0, #3]
    5c82:	b11d      	cbz	r5, 5c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    5c84:	2d01      	cmp	r5, #1
    5c86:	d001      	beq.n	5c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    5c88:	2d16      	cmp	r5, #22
    5c8a:	d113      	bne.n	5cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5c8c:	6860      	ldr	r0, [r4, #4]
    5c8e:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5c92:	f008 f8b9 	bl	de08 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5c96:	b168      	cbz	r0, 5cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5c98:	6861      	ldr	r1, [r4, #4]
    5c9a:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    5c9e:	2820      	cmp	r0, #32
    5ca0:	d008      	beq.n	5cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5ca2:	2821      	cmp	r0, #33	; 0x21
    5ca4:	d003      	beq.n	5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    5ca6:	2d16      	cmp	r5, #22
    5ca8:	d00f      	beq.n	5cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    5caa:	2002      	movs	r0, #2
    5cac:	bd70      	pop	{r4, r5, r6, pc}
    5cae:	202e      	movs	r0, #46	; 0x2e
    5cb0:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5cb4:	2d2b      	cmp	r5, #43	; 0x2b
    5cb6:	d20a      	bcs.n	5cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5cb8:	4809      	ldr	r0, [pc, #36]	; (5ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    5cba:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5cbe:	b131      	cbz	r1, 5cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cc4:	4805      	ldr	r0, [pc, #20]	; (5cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5cc6:	3010      	adds	r0, #16
    5cc8:	4708      	bx	r1
    5cca:	2020      	movs	r0, #32
    5ccc:	bd70      	pop	{r4, r5, r6, pc}
    5cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cd2:	4802      	ldr	r0, [pc, #8]	; (5cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5cd4:	3010      	adds	r0, #16
    5cd6:	f000 bd59 	b.w	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    5cda:	0000      	.short	0x0000
    5cdc:	200000fc 	.word	0x200000fc
    5ce0:	20000114 	.word	0x20000114
    5ce4:	b570      	push	{r4, r5, r6, lr}
    5ce6:	4e23      	ldr	r6, [pc, #140]	; (5d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>)
    5ce8:	78b0      	ldrb	r0, [r6, #2]
    5cea:	0700      	lsls	r0, r0, #28
    5cec:	d540      	bpl.n	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5cee:	f106 0410 	add.w	r4, r6, #16
    5cf2:	6860      	ldr	r0, [r4, #4]
    5cf4:	3080      	adds	r0, #128	; 0x80
    5cf6:	f009 fc18 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5cfa:	b148      	cbz	r0, 5d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    5cfc:	6860      	ldr	r0, [r4, #4]
    5cfe:	21fe      	movs	r1, #254	; 0xfe
    5d00:	2500      	movs	r5, #0
    5d02:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5d06:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5d0a:	291a      	cmp	r1, #26
    5d0c:	d10c      	bne.n	5d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79c>
    5d0e:	e004      	b.n	5d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78e>
    5d10:	f640 110e 	movw	r1, #2318	; 0x90e
    5d14:	2031      	movs	r0, #49	; 0x31
    5d16:	f7fb fb43 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d1a:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5d1e:	f7ff fd43 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    5d22:	6860      	ldr	r0, [r4, #4]
    5d24:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5d28:	6860      	ldr	r0, [r4, #4]
    5d2a:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5d2e:	2920      	cmp	r1, #32
    5d30:	d002      	beq.n	5d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    5d32:	2931      	cmp	r1, #49	; 0x31
    5d34:	d113      	bne.n	5d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5d36:	e00b      	b.n	5d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c4>
    5d38:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5d3c:	f008 f864 	bl	de08 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5d40:	b108      	cbz	r0, 5d46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ba>
    5d42:	202e      	movs	r0, #46	; 0x2e
    5d44:	e000      	b.n	5d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    5d46:	2021      	movs	r0, #33	; 0x21
    5d48:	6861      	ldr	r1, [r4, #4]
    5d4a:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5d4e:	e006      	b.n	5d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5d50:	2101      	movs	r1, #1
    5d52:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5d56:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5d5a:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5d5e:	6860      	ldr	r0, [r4, #4]
    5d60:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5d64:	2907      	cmp	r1, #7
    5d66:	d103      	bne.n	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5d68:	2102      	movs	r1, #2
    5d6a:	7031      	strb	r1, [r6, #0]
    5d6c:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5d70:	bd70      	pop	{r4, r5, r6, pc}
    5d72:	0000      	.short	0x0000
    5d74:	200000fc 	.word	0x200000fc
    5d78:	b538      	push	{r3, r4, r5, lr}
    5d7a:	4605      	mov	r5, r0
    5d7c:	4668      	mov	r0, sp
    5d7e:	f7fc f973 	bl	2068 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5d82:	b308      	cbz	r0, 5dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    5d84:	2222      	movs	r2, #34	; 0x22
    5d86:	2100      	movs	r1, #0
    5d88:	9800      	ldr	r0, [sp, #0]
    5d8a:	f00b f88b 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d8e:	2103      	movs	r1, #3
    5d90:	9800      	ldr	r0, [sp, #0]
    5d92:	f008 fafa 	bl	e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5d96:	9800      	ldr	r0, [sp, #0]
    5d98:	7801      	ldrb	r1, [r0, #0]
    5d9a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5d9e:	7001      	strb	r1, [r0, #0]
    5da0:	4629      	mov	r1, r5
    5da2:	f7fd f9f3 	bl	318c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5da6:	4c59      	ldr	r4, [pc, #356]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5da8:	2d11      	cmp	r5, #17
    5daa:	d02d      	beq.n	5e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87c>
    5dac:	dc0f      	bgt.n	5dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    5dae:	f1a5 0502 	sub.w	r5, r5, #2
    5db2:	2d0d      	cmp	r5, #13
    5db4:	d21f      	bcs.n	5df6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5db6:	e8df f005 	tbb	[pc, r5]
    5dba:	1e21      	.short	0x1e21
    5dbc:	219e9e51 	.word	0x219e9e51
    5dc0:	9e1e5e1e 	.word	0x9e1e5e1e
    5dc4:	008c343a 	.word	0x008c343a
    5dc8:	f640 31b5 	movw	r1, #2997	; 0xbb5
    5dcc:	e099      	b.n	5f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5dce:	2d17      	cmp	r5, #23
    5dd0:	d070      	beq.n	5eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    5dd2:	dc08      	bgt.n	5de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    5dd4:	f1a5 0512 	sub.w	r5, r5, #18
    5dd8:	2d05      	cmp	r5, #5
    5dda:	d20c      	bcs.n	5df6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5ddc:	e8df f005 	tbb	[pc, r5]
    5de0:	50508b8b 	.word	0x50508b8b
    5de4:	0033      	.short	0x0033
    5de6:	2d23      	cmp	r5, #35	; 0x23
    5de8:	d077      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5dea:	2d24      	cmp	r5, #36	; 0x24
    5dec:	d075      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5dee:	2d25      	cmp	r5, #37	; 0x25
    5df0:	d073      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5df2:	2dff      	cmp	r5, #255	; 0xff
    5df4:	d077      	beq.n	5ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    5df6:	f640 4161 	movw	r1, #3169	; 0xc61
    5dfa:	e082      	b.n	5f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5dfc:	6860      	ldr	r0, [r4, #4]
    5dfe:	9900      	ldr	r1, [sp, #0]
    5e00:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    5e04:	7108      	strb	r0, [r1, #4]
    5e06:	e076      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e08:	6860      	ldr	r0, [r4, #4]
    5e0a:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5e0e:	9800      	ldr	r0, [sp, #0]
    5e10:	f008 faa7 	bl	e362 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    5e14:	6860      	ldr	r0, [r4, #4]
    5e16:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5e1a:	9800      	ldr	r0, [sp, #0]
    5e1c:	f008 faa5 	bl	e36a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    5e20:	e069      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e22:	6861      	ldr	r1, [r4, #4]
    5e24:	9800      	ldr	r0, [sp, #0]
    5e26:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5e2a:	7101      	strb	r1, [r0, #4]
    5e2c:	e063      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e2e:	9800      	ldr	r0, [sp, #0]
    5e30:	210c      	movs	r1, #12
    5e32:	7101      	strb	r1, [r0, #4]
    5e34:	2159      	movs	r1, #89	; 0x59
    5e36:	7141      	strb	r1, [r0, #5]
    5e38:	2100      	movs	r1, #0
    5e3a:	7181      	strb	r1, [r0, #6]
    5e3c:	214b      	movs	r1, #75	; 0x4b
    5e3e:	71c1      	strb	r1, [r0, #7]
    5e40:	2112      	movs	r1, #18
    5e42:	7201      	strb	r1, [r0, #8]
    5e44:	e057      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e46:	9800      	ldr	r0, [sp, #0]
    5e48:	f8d4 1004 	ldr.w	r1, [r4, #4]
    5e4c:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5e50:	7101      	strb	r1, [r0, #4]
    5e52:	6861      	ldr	r1, [r4, #4]
    5e54:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5e58:	7141      	strb	r1, [r0, #5]
    5e5a:	e04c      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e5c:	6861      	ldr	r1, [r4, #4]
    5e5e:	9800      	ldr	r0, [sp, #0]
    5e60:	f501 7110 	add.w	r1, r1, #576	; 0x240
    5e64:	f008 fa38 	bl	e2d8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    5e68:	6861      	ldr	r1, [r4, #4]
    5e6a:	9800      	ldr	r0, [sp, #0]
    5e6c:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    5e70:	f008 fa2f 	bl	e2d2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    5e74:	e03f      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e76:	4825      	ldr	r0, [pc, #148]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5e78:	9900      	ldr	r1, [sp, #0]
    5e7a:	f7fd fcd7 	bl	382c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5e7e:	e03a      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e80:	6860      	ldr	r0, [r4, #4]
    5e82:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5e86:	9800      	ldr	r0, [sp, #0]
    5e88:	f008 fa87 	bl	e39a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5e8c:	6860      	ldr	r0, [r4, #4]
    5e8e:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    5e92:	9800      	ldr	r0, [sp, #0]
    5e94:	f008 fa85 	bl	e3a2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5e98:	6860      	ldr	r0, [r4, #4]
    5e9a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5e9e:	9800      	ldr	r0, [sp, #0]
    5ea0:	f008 fa83 	bl	e3aa <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5ea4:	6860      	ldr	r0, [r4, #4]
    5ea6:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5eaa:	9800      	ldr	r0, [sp, #0]
    5eac:	f008 fa81 	bl	e3b2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5eb0:	e021      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5eb2:	e7ff      	b.n	5eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    5eb4:	6861      	ldr	r1, [r4, #4]
    5eb6:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5eba:	2801      	cmp	r0, #1
    5ebc:	9800      	ldr	r0, [sp, #0]
    5ebe:	d0c5      	beq.n	5e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c0>
    5ec0:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    5ec4:	7101      	strb	r1, [r0, #4]
    5ec6:	6861      	ldr	r1, [r4, #4]
    5ec8:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5ecc:	e7c4      	b.n	5e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8cc>
    5ece:	e004      	b.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5ed0:	e009      	b.n	5ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    5ed2:	9800      	ldr	r0, [sp, #0]
    5ed4:	f7fd fc5a 	bl	378c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5ed8:	e00d      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5eda:	4a0c      	ldr	r2, [pc, #48]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5edc:	4628      	mov	r0, r5
    5ede:	9900      	ldr	r1, [sp, #0]
    5ee0:	f009 fd43 	bl	f96a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    5ee4:	e007      	b.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5ee6:	6860      	ldr	r0, [r4, #4]
    5ee8:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5eec:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    5ef0:	9800      	ldr	r0, [sp, #0]
    5ef2:	f008 fa3c 	bl	e36e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5ef6:	f7fc f891 	bl	201c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5efa:	2800      	cmp	r0, #0
    5efc:	d104      	bne.n	5f08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97c>
    5efe:	f640 4165 	movw	r1, #3173	; 0xc65
    5f02:	2031      	movs	r0, #49	; 0x31
    5f04:	f7fb fa4c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f08:	bd38      	pop	{r3, r4, r5, pc}
    5f0a:	0000      	.short	0x0000
    5f0c:	2000010c 	.word	0x2000010c
    5f10:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5f14:	4e8c      	ldr	r6, [pc, #560]	; (6148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>)
    5f16:	468a      	mov	sl, r1
    5f18:	6870      	ldr	r0, [r6, #4]
    5f1a:	8800      	ldrh	r0, [r0, #0]
    5f1c:	f7fb fe52 	bl	1bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f20:	0007      	movs	r7, r0
    5f22:	d00c      	beq.n	5f3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    5f24:	f1a6 0510 	sub.w	r5, r6, #16
    5f28:	f04f 0400 	mov.w	r4, #0
    5f2c:	8868      	ldrh	r0, [r5, #2]
    5f2e:	05c0      	lsls	r0, r0, #23
    5f30:	d50a      	bpl.n	5f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9bc>
    5f32:	6870      	ldr	r0, [r6, #4]
    5f34:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5f38:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5f3c:	e009      	b.n	5f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c6>
    5f3e:	f640 7145 	movw	r1, #3909	; 0xf45
    5f42:	2031      	movs	r0, #49	; 0x31
    5f44:	f7fb fa2c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f48:	6871      	ldr	r1, [r6, #4]
    5f4a:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    5f4e:	1c40      	adds	r0, r0, #1
    5f50:	8008      	strh	r0, [r1, #0]
    5f52:	f000 ff43 	bl	6ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    5f56:	f04f 0901 	mov.w	r9, #1
    5f5a:	b340      	cbz	r0, 5fae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5f5c:	8868      	ldrh	r0, [r5, #2]
    5f5e:	0500      	lsls	r0, r0, #20
    5f60:	d506      	bpl.n	5f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    5f62:	6870      	ldr	r0, [r6, #4]
    5f64:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    5f68:	b111      	cbz	r1, 5f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    5f6a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5f6e:	e01e      	b.n	5fae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5f70:	6870      	ldr	r0, [r6, #4]
    5f72:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    5f76:	1c49      	adds	r1, r1, #1
    5f78:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    5f7c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    5f80:	428a      	cmp	r2, r1
    5f82:	d301      	bcc.n	5f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    5f84:	1a53      	subs	r3, r2, r1
    5f86:	e000      	b.n	5f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fe>
    5f88:	2300      	movs	r3, #0
    5f8a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    5f8e:	f10c 0c05 	add.w	ip, ip, #5
    5f92:	4563      	cmp	r3, ip
    5f94:	d801      	bhi.n	5f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5f96:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    5f9a:	4291      	cmp	r1, r2
    5f9c:	d307      	bcc.n	5fae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5f9e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5fa2:	220f      	movs	r2, #15
    5fa4:	4969      	ldr	r1, [pc, #420]	; (614c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    5fa6:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    5faa:	f008 fa80 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5fae:	8868      	ldrh	r0, [r5, #2]
    5fb0:	f04f 0b02 	mov.w	fp, #2
    5fb4:	f410 7f40 	tst.w	r0, #768	; 0x300
    5fb8:	d00e      	beq.n	5fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    5fba:	6870      	ldr	r0, [r6, #4]
    5fbc:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fc0:	b111      	cbz	r1, 5fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa3c>
    5fc2:	2903      	cmp	r1, #3
    5fc4:	d108      	bne.n	5fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    5fc6:	e002      	b.n	5fce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa42>
    5fc8:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5fcc:	e001      	b.n	5fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa46>
    5fce:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fd2:	2101      	movs	r1, #1
    5fd4:	f7fe fdd0 	bl	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5fd8:	6870      	ldr	r0, [r6, #4]
    5fda:	46b0      	mov	r8, r6
    5fdc:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fe0:	2901      	cmp	r1, #1
    5fe2:	d104      	bne.n	5fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    5fe4:	8869      	ldrh	r1, [r5, #2]
    5fe6:	0549      	lsls	r1, r1, #21
    5fe8:	d501      	bpl.n	5fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    5fea:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fee:	9900      	ldr	r1, [sp, #0]
    5ff0:	2900      	cmp	r1, #0
    5ff2:	d179      	bne.n	60e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    5ff4:	78a9      	ldrb	r1, [r5, #2]
    5ff6:	0649      	lsls	r1, r1, #25
    5ff8:	d502      	bpl.n	6000 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa74>
    5ffa:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5ffe:	e004      	b.n	600a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    6000:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    6004:	1c49      	adds	r1, r1, #1
    6006:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    600a:	4650      	mov	r0, sl
    600c:	f7ff fdb8 	bl	5b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    6010:	ea40 000a 	orr.w	r0, r0, sl
    6014:	4682      	mov	sl, r0
    6016:	f7ff fd37 	bl	5a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>
    601a:	f8d8 6004 	ldr.w	r6, [r8, #4]
    601e:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    6022:	1c40      	adds	r0, r0, #1
    6024:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    6028:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    602c:	b128      	cbz	r0, 603a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaae>
    602e:	f7fc f9bf 	bl	23b0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    6032:	b1b0      	cbz	r0, 6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    6034:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6038:	e013      	b.n	6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    603a:	f7fc f897 	bl	216c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    603e:	b108      	cbz	r0, 6044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    6040:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6044:	f7fc f88c 	bl	2160 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    6048:	b158      	cbz	r0, 6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    604a:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    604e:	1c40      	adds	r0, r0, #1
    6050:	b2c0      	uxtb	r0, r0
    6052:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    6056:	2802      	cmp	r0, #2
    6058:	d903      	bls.n	6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    605a:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    605e:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    6062:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6066:	4646      	mov	r6, r8
    6068:	2301      	movs	r3, #1
    606a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    606e:	2100      	movs	r1, #0
    6070:	3080      	adds	r0, #128	; 0x80
    6072:	f007 fe71 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6076:	b920      	cbnz	r0, 6082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf6>
    6078:	6870      	ldr	r0, [r6, #4]
    607a:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    607e:	280b      	cmp	r0, #11
    6080:	d15f      	bne.n	6142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    6082:	6870      	ldr	r0, [r6, #4]
    6084:	2301      	movs	r3, #1
    6086:	2100      	movs	r1, #0
    6088:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    608c:	3080      	adds	r0, #128	; 0x80
    608e:	f007 fe63 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6092:	b350      	cbz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    6094:	6870      	ldr	r0, [r6, #4]
    6096:	2301      	movs	r3, #1
    6098:	2100      	movs	r1, #0
    609a:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    609e:	3080      	adds	r0, #128	; 0x80
    60a0:	f007 fe5a 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60a4:	b308      	cbz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    60a6:	6870      	ldr	r0, [r6, #4]
    60a8:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    60ac:	2902      	cmp	r1, #2
    60ae:	d148      	bne.n	6142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    60b0:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    60b4:	b9c8      	cbnz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    60b6:	4638      	mov	r0, r7
    60b8:	f007 f955 	bl	d366 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    60bc:	b1a8      	cbz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    60be:	6870      	ldr	r0, [r6, #4]
    60c0:	3080      	adds	r0, #128	; 0x80
    60c2:	f009 fa32 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    60c6:	b980      	cbnz	r0, 60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    60c8:	6871      	ldr	r1, [r6, #4]
    60ca:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    60ce:	2801      	cmp	r0, #1
    60d0:	d937      	bls.n	6142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    60d2:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    60d6:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    60da:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    60de:	1e93      	subs	r3, r2, #2
    60e0:	4298      	cmp	r0, r3
    60e2:	db03      	blt.n	60ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    60e4:	2001      	movs	r0, #1
    60e6:	e004      	b.n	60f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    60e8:	e01c      	b.n	6124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    60ea:	e02a      	b.n	6142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    60ec:	1a10      	subs	r0, r2, r0
    60ee:	1e40      	subs	r0, r0, #1
    60f0:	b280      	uxth	r0, r0
    60f2:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    60f6:	88aa      	ldrh	r2, [r5, #4]
    60f8:	4293      	cmp	r3, r2
    60fa:	d301      	bcc.n	6100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    60fc:	2201      	movs	r2, #1
    60fe:	e002      	b.n	6106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    6100:	1ad2      	subs	r2, r2, r3
    6102:	1c52      	adds	r2, r2, #1
    6104:	b292      	uxth	r2, r2
    6106:	4290      	cmp	r0, r2
    6108:	d900      	bls.n	610c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    610a:	4610      	mov	r0, r2
    610c:	2801      	cmp	r0, #1
    610e:	d101      	bne.n	6114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    6110:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    6114:	6871      	ldr	r1, [r6, #4]
    6116:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    611a:	4410      	add	r0, r2
    611c:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    6120:	f000 ff28 	bl	6f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e8>
    6124:	78a8      	ldrb	r0, [r5, #2]
    6126:	4652      	mov	r2, sl
    6128:	f3c0 1180 	ubfx	r1, r0, #6, #1
    612c:	9800      	ldr	r0, [sp, #0]
    612e:	f000 fe69 	bl	6e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1878>
    6132:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6136:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    613a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    613e:	f7fb bf57 	b.w	1ff0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6142:	2001      	movs	r0, #1
    6144:	6871      	ldr	r1, [r6, #4]
    6146:	e7e3      	b.n	6110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    6148:	2000010c 	.word	0x2000010c
    614c:	0000e911 	.word	0x0000e911
    6150:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6152:	4c68      	ldr	r4, [pc, #416]	; (62f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    6154:	2301      	movs	r3, #1
    6156:	2100      	movs	r1, #0
    6158:	6860      	ldr	r0, [r4, #4]
    615a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    615e:	3080      	adds	r0, #128	; 0x80
    6160:	f007 fdfa 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6164:	2800      	cmp	r0, #0
    6166:	d07a      	beq.n	625e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd2>
    6168:	6860      	ldr	r0, [r4, #4]
    616a:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    616e:	2500      	movs	r5, #0
    6170:	b139      	cbz	r1, 6182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    6172:	2100      	movs	r1, #0
    6174:	200e      	movs	r0, #14
    6176:	f000 f8bf 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    617a:	6860      	ldr	r0, [r4, #4]
    617c:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    6180:	e0b5      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    6182:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    6186:	b119      	cbz	r1, 6190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    6188:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    618c:	0789      	lsls	r1, r1, #30
    618e:	d016      	beq.n	61be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    6190:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6194:	f88d 1004 	strb.w	r1, [sp, #4]
    6198:	9901      	ldr	r1, [sp, #4]
    619a:	9101      	str	r1, [sp, #4]
    619c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61a0:	b141      	cbz	r1, 61b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    61a2:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    61a6:	f88d 1000 	strb.w	r1, [sp]
    61aa:	9900      	ldr	r1, [sp, #0]
    61ac:	9100      	str	r1, [sp, #0]
    61ae:	f89d 1000 	ldrb.w	r1, [sp]
    61b2:	b189      	cbz	r1, 61d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    61b4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    61b8:	2901      	cmp	r1, #1
    61ba:	d030      	beq.n	621e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc92>
    61bc:	e040      	b.n	6240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    61be:	2100      	movs	r1, #0
    61c0:	200c      	movs	r0, #12
    61c2:	f000 f899 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    61c6:	6860      	ldr	r0, [r4, #4]
    61c8:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    61cc:	f041 0101 	orr.w	r1, r1, #1
    61d0:	7001      	strb	r1, [r0, #0]
    61d2:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    61d6:	e08a      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    61d8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    61dc:	2925      	cmp	r1, #37	; 0x25
    61de:	d01c      	beq.n	621a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    61e0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    61e4:	2925      	cmp	r1, #37	; 0x25
    61e6:	d018      	beq.n	621a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    61e8:	f05f 0300 	movs.w	r3, #0
    61ec:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    61f0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    61f4:	f008 f971 	bl	e4da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    61f8:	6860      	ldr	r0, [r4, #4]
    61fa:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    61fe:	2100      	movs	r1, #0
    6200:	2014      	movs	r0, #20
    6202:	f000 f879 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6206:	6861      	ldr	r1, [r4, #4]
    6208:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    620c:	8bc2      	ldrh	r2, [r0, #30]
    620e:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    6212:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6214:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    6218:	e069      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    621a:	2301      	movs	r3, #1
    621c:	e7e6      	b.n	61ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    621e:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6222:	f88d 1000 	strb.w	r1, [sp]
    6226:	9900      	ldr	r1, [sp, #0]
    6228:	9100      	str	r1, [sp, #0]
    622a:	f89d 1000 	ldrb.w	r1, [sp]
    622e:	b939      	cbnz	r1, 6240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    6230:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6234:	2301      	movs	r3, #1
    6236:	210b      	movs	r1, #11
    6238:	3080      	adds	r0, #128	; 0x80
    623a:	f007 fd8d 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    623e:	b178      	cbz	r0, 6260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    6240:	6860      	ldr	r0, [r4, #4]
    6242:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    6246:	f88d 1000 	strb.w	r1, [sp]
    624a:	9900      	ldr	r1, [sp, #0]
    624c:	9100      	str	r1, [sp, #0]
    624e:	f89d 1000 	ldrb.w	r1, [sp]
    6252:	b3b9      	cbz	r1, 62c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    6254:	2100      	movs	r1, #0
    6256:	2023      	movs	r0, #35	; 0x23
    6258:	f000 f84e 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    625c:	e047      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    625e:	e030      	b.n	62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    6260:	6860      	ldr	r0, [r4, #4]
    6262:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6266:	f009 f968 	bl	f53a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    626a:	4605      	mov	r5, r0
    626c:	6860      	ldr	r0, [r4, #4]
    626e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6272:	f009 f962 	bl	f53a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6276:	4606      	mov	r6, r0
    6278:	6860      	ldr	r0, [r4, #4]
    627a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    627e:	4628      	mov	r0, r5
    6280:	f009 f966 	bl	f550 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6284:	b150      	cbz	r0, 629c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    6286:	6860      	ldr	r0, [r4, #4]
    6288:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    628c:	4630      	mov	r0, r6
    628e:	f009 f95f 	bl	f550 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6292:	b118      	cbz	r0, 629c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    6294:	2000      	movs	r0, #0
    6296:	f000 f941 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    629a:	e011      	b.n	62c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    629c:	6860      	ldr	r0, [r4, #4]
    629e:	2301      	movs	r3, #1
    62a0:	2103      	movs	r1, #3
    62a2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62a6:	3080      	adds	r0, #128	; 0x80
    62a8:	f007 fd56 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62ac:	b940      	cbnz	r0, 62c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    62ae:	6860      	ldr	r0, [r4, #4]
    62b0:	2301      	movs	r3, #1
    62b2:	2102      	movs	r1, #2
    62b4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62b8:	3080      	adds	r0, #128	; 0x80
    62ba:	f007 fd4d 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62be:	b110      	cbz	r0, 62c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    62c0:	2000      	movs	r0, #0
    62c2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62c4:	e002      	b.n	62cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    62c6:	2100      	movs	r1, #0
    62c8:	2016      	movs	r0, #22
    62ca:	e7c5      	b.n	6258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xccc>
    62cc:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    62d0:	f88d 0000 	strb.w	r0, [sp]
    62d4:	9800      	ldr	r0, [sp, #0]
    62d6:	9000      	str	r0, [sp, #0]
    62d8:	f89d 0000 	ldrb.w	r0, [sp]
    62dc:	2800      	cmp	r0, #0
    62de:	d0f0      	beq.n	62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    62e0:	2100      	movs	r1, #0
    62e2:	2025      	movs	r0, #37	; 0x25
    62e4:	f000 f808 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    62e8:	6860      	ldr	r0, [r4, #4]
    62ea:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    62ee:	2001      	movs	r0, #1
    62f0:	e7e7      	b.n	62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    62f2:	0000      	.short	0x0000
    62f4:	2000010c 	.word	0x2000010c
    62f8:	b570      	push	{r4, r5, r6, lr}
    62fa:	4c0d      	ldr	r4, [pc, #52]	; (6330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda4>)
    62fc:	4606      	mov	r6, r0
    62fe:	460d      	mov	r5, r1
    6300:	6860      	ldr	r0, [r4, #4]
    6302:	3080      	adds	r0, #128	; 0x80
    6304:	f009 f911 	bl	f52a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6308:	b120      	cbz	r0, 6314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    630a:	f640 416a 	movw	r1, #3178	; 0xc6a
    630e:	2031      	movs	r0, #49	; 0x31
    6310:	f7fb f846 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6314:	6862      	ldr	r2, [r4, #4]
    6316:	2000      	movs	r0, #0
    6318:	2d01      	cmp	r5, #1
    631a:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    631e:	d004      	beq.n	632a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9e>
    6320:	f822 0fd2 	strh.w	r0, [r2, #210]!
    6324:	2001      	movs	r0, #1
    6326:	7110      	strb	r0, [r2, #4]
    6328:	bd70      	pop	{r4, r5, r6, pc}
    632a:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    632e:	bd70      	pop	{r4, r5, r6, pc}
    6330:	2000010c 	.word	0x2000010c
    6334:	b538      	push	{r3, r4, r5, lr}
    6336:	4c1f      	ldr	r4, [pc, #124]	; (63b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>)
    6338:	2500      	movs	r5, #0
    633a:	6860      	ldr	r0, [r4, #4]
    633c:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    6340:	2901      	cmp	r1, #1
    6342:	d00c      	beq.n	635e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd2>
    6344:	2902      	cmp	r1, #2
    6346:	d133      	bne.n	63b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    6348:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    634c:	2900      	cmp	r1, #0
    634e:	f04f 0106 	mov.w	r1, #6
    6352:	d01a      	beq.n	638a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfe>
    6354:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6358:	2101      	movs	r1, #1
    635a:	2002      	movs	r0, #2
    635c:	e023      	b.n	63a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    635e:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    6362:	f88d 1000 	strb.w	r1, [sp]
    6366:	9900      	ldr	r1, [sp, #0]
    6368:	9100      	str	r1, [sp, #0]
    636a:	f89d 1000 	ldrb.w	r1, [sp]
    636e:	2900      	cmp	r1, #0
    6370:	d11e      	bne.n	63b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    6372:	f500 7384 	add.w	r3, r0, #264	; 0x108
    6376:	f500 710e 	add.w	r1, r0, #568	; 0x238
    637a:	2200      	movs	r2, #0
    637c:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    6380:	f007 fca2 	bl	dcc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    6384:	2101      	movs	r1, #1
    6386:	2005      	movs	r0, #5
    6388:	e00d      	b.n	63a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    638a:	2003      	movs	r0, #3
    638c:	f000 fcb4 	bl	6cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    6390:	6860      	ldr	r0, [r4, #4]
    6392:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    6396:	0880      	lsrs	r0, r0, #2
    6398:	f010 0f01 	tst.w	r0, #1
    639c:	d001      	beq.n	63a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    639e:	2011      	movs	r0, #17
    63a0:	e000      	b.n	63a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    63a2:	200d      	movs	r0, #13
    63a4:	2101      	movs	r1, #1
    63a6:	f7ff ffa7 	bl	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    63aa:	6860      	ldr	r0, [r4, #4]
    63ac:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    63b0:	bd38      	pop	{r3, r4, r5, pc}
    63b2:	0000      	.short	0x0000
    63b4:	2000010c 	.word	0x2000010c
    63b8:	b570      	push	{r4, r5, r6, lr}
    63ba:	4b2b      	ldr	r3, [pc, #172]	; (6468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xedc>)
    63bc:	4602      	mov	r2, r0
    63be:	8858      	ldrh	r0, [r3, #2]
    63c0:	4310      	orrs	r0, r2
    63c2:	8058      	strh	r0, [r3, #2]
    63c4:	f103 0010 	add.w	r0, r3, #16
    63c8:	2a40      	cmp	r2, #64	; 0x40
    63ca:	6840      	ldr	r0, [r0, #4]
    63cc:	d00d      	beq.n	63ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    63ce:	0796      	lsls	r6, r2, #30
    63d0:	f04f 0500 	mov.w	r5, #0
    63d4:	f04f 0401 	mov.w	r4, #1
    63d8:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    63dc:	d50c      	bpl.n	63f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    63de:	b14e      	cbz	r6, 63f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>
    63e0:	f640 61b2 	movw	r1, #3762	; 0xeb2
    63e4:	2031      	movs	r0, #49	; 0x31
    63e6:	f7fa ffdb 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63ee:	2104      	movs	r1, #4
    63f0:	f7fe bbc2 	b.w	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    63f4:	6099      	str	r1, [r3, #8]
    63f6:	e01c      	b.n	6432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    63f8:	b1c6      	cbz	r6, 642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    63fa:	60d9      	str	r1, [r3, #12]
    63fc:	78c9      	ldrb	r1, [r1, #3]
    63fe:	2906      	cmp	r1, #6
    6400:	d002      	beq.n	6408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    6402:	290b      	cmp	r1, #11
    6404:	d112      	bne.n	642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6406:	e009      	b.n	641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>
    6408:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    640c:	2918      	cmp	r1, #24
    640e:	d10d      	bne.n	642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6410:	2100      	movs	r1, #0
    6412:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    6416:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    641a:	e007      	b.n	642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    641c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6420:	2912      	cmp	r1, #18
    6422:	d103      	bne.n	642c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6424:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    6428:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    642c:	0791      	lsls	r1, r2, #30
    642e:	d516      	bpl.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    6430:	6899      	ldr	r1, [r3, #8]
    6432:	78c9      	ldrb	r1, [r1, #3]
    6434:	2905      	cmp	r1, #5
    6436:	d002      	beq.n	643e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    6438:	290b      	cmp	r1, #11
    643a:	d110      	bne.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    643c:	e009      	b.n	6452 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec6>
    643e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6442:	2916      	cmp	r1, #22
    6444:	d10b      	bne.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    6446:	2100      	movs	r1, #0
    6448:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    644c:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    6450:	e005      	b.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    6452:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6456:	2911      	cmp	r1, #17
    6458:	d101      	bne.n	645e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    645a:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    645e:	0690      	lsls	r0, r2, #26
    6460:	d501      	bpl.n	6466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    6462:	2008      	movs	r0, #8
    6464:	7058      	strb	r0, [r3, #1]
    6466:	bd70      	pop	{r4, r5, r6, pc}
    6468:	200000fc 	.word	0x200000fc
    646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6470:	4c29      	ldr	r4, [pc, #164]	; (6518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    6472:	2501      	movs	r5, #1
    6474:	6863      	ldr	r3, [r4, #4]
    6476:	f893 12ce 	ldrb.w	r1, [r3, #718]	; 0x2ce
    647a:	b109      	cbz	r1, 6480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    647c:	2701      	movs	r7, #1
    647e:	e000      	b.n	6482 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef6>
    6480:	2700      	movs	r7, #0
    6482:	f893 02cf 	ldrb.w	r0, [r3, #719]	; 0x2cf
    6486:	b108      	cbz	r0, 648c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    6488:	2601      	movs	r6, #1
    648a:	e000      	b.n	648e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    648c:	2600      	movs	r6, #0
    648e:	b90f      	cbnz	r7, 6494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    6490:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    6494:	b90e      	cbnz	r6, 649a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    6496:	f893 006b 	ldrb.w	r0, [r3, #107]	; 0x6b
    649a:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    649e:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
    64a2:	f103 0262 	add.w	r2, r3, #98	; 0x62
    64a6:	20ff      	movs	r0, #255	; 0xff
    64a8:	7290      	strb	r0, [r2, #10]
    64aa:	4618      	mov	r0, r3
    64ac:	f009 fb1f 	bl	faee <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    64b0:	6860      	ldr	r0, [r4, #4]
    64b2:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    64b6:	2801      	cmp	r0, #1
    64b8:	d001      	beq.n	64be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    64ba:	b907      	cbnz	r7, 64be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    64bc:	b116      	cbz	r6, 64c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    64be:	2000      	movs	r0, #0
    64c0:	f000 f82c 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    64c4:	6860      	ldr	r0, [r4, #4]
    64c6:	302c      	adds	r0, #44	; 0x2c
    64c8:	f008 f876 	bl	e5b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    64cc:	4606      	mov	r6, r0
    64ce:	6860      	ldr	r0, [r4, #4]
    64d0:	f008 f81e 	bl	e510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    64d4:	b130      	cbz	r0, 64e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf58>
    64d6:	6861      	ldr	r1, [r4, #4]
    64d8:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    64dc:	f831 0b2c 	ldrh.w	r0, [r1], #44
    64e0:	f7fd f88e 	bl	3600 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    64e4:	2105      	movs	r1, #5
    64e6:	6860      	ldr	r0, [r4, #4]
    64e8:	f7fe fb46 	bl	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    64ec:	6860      	ldr	r0, [r4, #4]
    64ee:	302c      	adds	r0, #44	; 0x2c
    64f0:	f008 f862 	bl	e5b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    64f4:	4604      	mov	r4, r0
    64f6:	42a6      	cmp	r6, r4
    64f8:	d20a      	bcs.n	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    64fa:	f003 fdf5 	bl	a0e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    64fe:	4601      	mov	r1, r0
    6500:	1ba0      	subs	r0, r4, r6
    6502:	2865      	cmp	r0, #101	; 0x65
    6504:	d200      	bcs.n	6508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>
    6506:	2065      	movs	r0, #101	; 0x65
    6508:	f003 fd10 	bl	9f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    650c:	b100      	cbz	r0, 6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    650e:	2500      	movs	r5, #0
    6510:	4628      	mov	r0, r5
    6512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6516:	0000      	.short	0x0000
    6518:	2000010c 	.word	0x2000010c
    651c:	b510      	push	{r4, lr}
    651e:	4c10      	ldr	r4, [pc, #64]	; (6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>)
    6520:	6861      	ldr	r1, [r4, #4]
    6522:	880a      	ldrh	r2, [r1, #0]
    6524:	f8a1 21a6 	strh.w	r2, [r1, #422]	; 0x1a6
    6528:	f881 01a4 	strb.w	r0, [r1, #420]	; 0x1a4
    652c:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    6530:	f009 f803 	bl	f53a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6534:	6861      	ldr	r1, [r4, #4]
    6536:	f881 01a8 	strb.w	r0, [r1, #424]	; 0x1a8
    653a:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    653e:	f008 fffc 	bl	f53a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6542:	6863      	ldr	r3, [r4, #4]
    6544:	2215      	movs	r2, #21
    6546:	4907      	ldr	r1, [pc, #28]	; (6564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    6548:	f883 01a9 	strb.w	r0, [r3, #425]	; 0x1a9
    654c:	f503 70cd 	add.w	r0, r3, #410	; 0x19a
    6550:	f007 ffad 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    6554:	6861      	ldr	r1, [r4, #4]
    6556:	2000      	movs	r0, #0
    6558:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
    655c:	bd10      	pop	{r4, pc}
    655e:	0000      	.short	0x0000
    6560:	2000010c 	.word	0x2000010c
    6564:	000108dd 	.word	0x000108dd
    6568:	b570      	push	{r4, r5, r6, lr}
    656a:	4d0f      	ldr	r5, [pc, #60]	; (65a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    656c:	686c      	ldr	r4, [r5, #4]
    656e:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    6572:	2921      	cmp	r1, #33	; 0x21
    6574:	d002      	beq.n	657c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    6576:	292e      	cmp	r1, #46	; 0x2e
    6578:	d003      	beq.n	6582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    657a:	e011      	b.n	65a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    657c:	f7ff ffce 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6580:	e008      	b.n	6594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    6582:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    6586:	f104 0080 	add.w	r0, r4, #128	; 0x80
    658a:	2301      	movs	r3, #1
    658c:	210b      	movs	r1, #11
    658e:	f007 fbe3 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6592:	b138      	cbz	r0, 65a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    6594:	6869      	ldr	r1, [r5, #4]
    6596:	2000      	movs	r0, #0
    6598:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    659c:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    65a0:	2000      	movs	r0, #0
    65a2:	bd70      	pop	{r4, r5, r6, pc}
    65a4:	202a      	movs	r0, #42	; 0x2a
    65a6:	e7e9      	b.n	657c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    65a8:	2000010c 	.word	0x2000010c
    65ac:	b570      	push	{r4, r5, r6, lr}
    65ae:	4604      	mov	r4, r0
    65b0:	6840      	ldr	r0, [r0, #4]
    65b2:	2301      	movs	r3, #1
    65b4:	2100      	movs	r1, #0
    65b6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    65ba:	3080      	adds	r0, #128	; 0x80
    65bc:	f007 fbcc 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65c0:	b1b8      	cbz	r0, 65f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    65c2:	4d13      	ldr	r5, [pc, #76]	; (6610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    65c4:	68e8      	ldr	r0, [r5, #12]
    65c6:	f007 fe32 	bl	e22e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    65ca:	6861      	ldr	r1, [r4, #4]
    65cc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    65d0:	6861      	ldr	r1, [r4, #4]
    65d2:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    65d6:	f008 ffc9 	bl	f56c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    65da:	b160      	cbz	r0, 65f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    65dc:	6861      	ldr	r1, [r4, #4]
    65de:	2028      	movs	r0, #40	; 0x28
    65e0:	220b      	movs	r2, #11
    65e2:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    65e6:	6860      	ldr	r0, [r4, #4]
    65e8:	490a      	ldr	r1, [pc, #40]	; (6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1088>)
    65ea:	30b4      	adds	r0, #180	; 0xb4
    65ec:	f007 ff4b 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    65f0:	e00b      	b.n	660a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    65f2:	2001      	movs	r0, #1
    65f4:	bd70      	pop	{r4, r5, r6, pc}
    65f6:	6861      	ldr	r1, [r4, #4]
    65f8:	68e8      	ldr	r0, [r5, #12]
    65fa:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    65fe:	f007 fe11 	bl	e224 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    6602:	6861      	ldr	r1, [r4, #4]
    6604:	200a      	movs	r0, #10
    6606:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    660a:	2000      	movs	r0, #0
    660c:	bd70      	pop	{r4, r5, r6, pc}
    660e:	0000      	.short	0x0000
    6610:	200000fc 	.word	0x200000fc
    6614:	0000e7c5 	.word	0x0000e7c5
    6618:	b570      	push	{r4, r5, r6, lr}
    661a:	4604      	mov	r4, r0
    661c:	6840      	ldr	r0, [r0, #4]
    661e:	2301      	movs	r3, #1
    6620:	2100      	movs	r1, #0
    6622:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6626:	3080      	adds	r0, #128	; 0x80
    6628:	f007 fb96 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    662c:	b1e0      	cbz	r0, 6668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    662e:	4d28      	ldr	r5, [pc, #160]	; (66d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1144>)
    6630:	2100      	movs	r1, #0
    6632:	68e8      	ldr	r0, [r5, #12]
    6634:	f007 fdfe 	bl	e234 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    6638:	b1c0      	cbz	r0, 666c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e0>
    663a:	68e8      	ldr	r0, [r5, #12]
    663c:	6861      	ldr	r1, [r4, #4]
    663e:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    6642:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6646:	6861      	ldr	r1, [r4, #4]
    6648:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    664c:	f008 ff8e 	bl	f56c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6650:	b188      	cbz	r0, 6676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ea>
    6652:	6861      	ldr	r1, [r4, #4]
    6654:	2028      	movs	r0, #40	; 0x28
    6656:	220b      	movs	r2, #11
    6658:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    665c:	6860      	ldr	r0, [r4, #4]
    665e:	491d      	ldr	r1, [pc, #116]	; (66d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>)
    6660:	30b4      	adds	r0, #180	; 0xb4
    6662:	f007 ff10 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6666:	e030      	b.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113e>
    6668:	2001      	movs	r0, #1
    666a:	bd70      	pop	{r4, r5, r6, pc}
    666c:	4620      	mov	r0, r4
    666e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6672:	f000 b88b 	b.w	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6676:	68e8      	ldr	r0, [r5, #12]
    6678:	f007 fe06 	bl	e288 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    667c:	f007 fb4f 	bl	dd1e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6680:	4606      	mov	r6, r0
    6682:	6860      	ldr	r0, [r4, #4]
    6684:	4631      	mov	r1, r6
    6686:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    668a:	68e8      	ldr	r0, [r5, #12]
    668c:	7900      	ldrb	r0, [r0, #4]
    668e:	f007 fcc2 	bl	e016 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6692:	6861      	ldr	r1, [r4, #4]
    6694:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    6698:	68e8      	ldr	r0, [r5, #12]
    669a:	4631      	mov	r1, r6
    669c:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    66a0:	f007 fcb5 	bl	e00e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    66a4:	6861      	ldr	r1, [r4, #4]
    66a6:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    66aa:	68e8      	ldr	r0, [r5, #12]
    66ac:	f007 fdef 	bl	e28e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    66b0:	6861      	ldr	r1, [r4, #4]
    66b2:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    66b6:	68e8      	ldr	r0, [r5, #12]
    66b8:	f007 fdec 	bl	e294 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    66bc:	6861      	ldr	r1, [r4, #4]
    66be:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    66c2:	6861      	ldr	r1, [r4, #4]
    66c4:	200d      	movs	r0, #13
    66c6:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    66ca:	2000      	movs	r0, #0
    66cc:	bd70      	pop	{r4, r5, r6, pc}
    66ce:	0000      	.short	0x0000
    66d0:	200000fc 	.word	0x200000fc
    66d4:	0000e7c5 	.word	0x0000e7c5
    66d8:	b570      	push	{r4, r5, r6, lr}
    66da:	4604      	mov	r4, r0
    66dc:	6840      	ldr	r0, [r0, #4]
    66de:	2301      	movs	r3, #1
    66e0:	2100      	movs	r1, #0
    66e2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    66e6:	3080      	adds	r0, #128	; 0x80
    66e8:	f007 fb36 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66ec:	b970      	cbnz	r0, 670c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    66ee:	6860      	ldr	r0, [r4, #4]
    66f0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    66f4:	2a13      	cmp	r2, #19
    66f6:	d009      	beq.n	670c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    66f8:	2301      	movs	r3, #1
    66fa:	2105      	movs	r1, #5
    66fc:	3080      	adds	r0, #128	; 0x80
    66fe:	f007 fb2b 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6702:	b108      	cbz	r0, 6708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>
    6704:	2008      	movs	r0, #8
    6706:	bd70      	pop	{r4, r5, r6, pc}
    6708:	2001      	movs	r0, #1
    670a:	bd70      	pop	{r4, r5, r6, pc}
    670c:	6860      	ldr	r0, [r4, #4]
    670e:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    6712:	b908      	cbnz	r0, 6718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118c>
    6714:	f7ff f83c 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6718:	4d14      	ldr	r5, [pc, #80]	; (676c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e0>)
    671a:	6861      	ldr	r1, [r4, #4]
    671c:	f501 710e 	add.w	r1, r1, #568	; 0x238
    6720:	68e8      	ldr	r0, [r5, #12]
    6722:	f007 fdd0 	bl	e2c6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    6726:	6861      	ldr	r1, [r4, #4]
    6728:	68e8      	ldr	r0, [r5, #12]
    672a:	f501 718c 	add.w	r1, r1, #280	; 0x118
    672e:	f007 fdc1 	bl	e2b4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    6732:	6860      	ldr	r0, [r4, #4]
    6734:	8801      	ldrh	r1, [r0, #0]
    6736:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    673a:	6861      	ldr	r1, [r4, #4]
    673c:	68e8      	ldr	r0, [r5, #12]
    673e:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    6742:	f007 fdbb 	bl	e2bc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    6746:	6861      	ldr	r1, [r4, #4]
    6748:	68e8      	ldr	r0, [r5, #12]
    674a:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    674e:	f007 fdae 	bl	e2ae <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    6752:	6860      	ldr	r0, [r4, #4]
    6754:	220a      	movs	r2, #10
    6756:	4906      	ldr	r1, [pc, #24]	; (6770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>)
    6758:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    675c:	f007 fe93 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6760:	6861      	ldr	r1, [r4, #4]
    6762:	2015      	movs	r0, #21
    6764:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6768:	2000      	movs	r0, #0
    676a:	bd70      	pop	{r4, r5, r6, pc}
    676c:	200000fc 	.word	0x200000fc
    6770:	0000e87b 	.word	0x0000e87b
    6774:	4901      	ldr	r1, [pc, #4]	; (677c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f0>)
    6776:	68c9      	ldr	r1, [r1, #12]
    6778:	f7fc bfe6 	b.w	3748 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    677c:	200000fc 	.word	0x200000fc
    6780:	4901      	ldr	r1, [pc, #4]	; (6788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fc>)
    6782:	68c9      	ldr	r1, [r1, #12]
    6784:	f7fd b810 	b.w	37a8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    6788:	200000fc 	.word	0x200000fc
    678c:	b510      	push	{r4, lr}
    678e:	6842      	ldr	r2, [r0, #4]
    6790:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    6794:	070b      	lsls	r3, r1, #28
    6796:	d501      	bpl.n	679c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    6798:	2001      	movs	r0, #1
    679a:	bd10      	pop	{r4, pc}
    679c:	f041 0108 	orr.w	r1, r1, #8
    67a0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    67a4:	4904      	ldr	r1, [pc, #16]	; (67b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122c>)
    67a6:	6840      	ldr	r0, [r0, #4]
    67a8:	68c9      	ldr	r1, [r1, #12]
    67aa:	78c9      	ldrb	r1, [r1, #3]
    67ac:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    67b0:	f7fe ffee 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    67b4:	2000      	movs	r0, #0
    67b6:	bd10      	pop	{r4, pc}
    67b8:	200000fc 	.word	0x200000fc
    67bc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67c0:	4605      	mov	r5, r0
    67c2:	6840      	ldr	r0, [r0, #4]
    67c4:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    67c8:	f010 0f30 	tst.w	r0, #48	; 0x30
    67cc:	d002      	beq.n	67d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1248>
    67ce:	2001      	movs	r0, #1
    67d0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    67d4:	4c31      	ldr	r4, [pc, #196]	; (689c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    67d6:	68e0      	ldr	r0, [r4, #12]
    67d8:	f007 fd8f 	bl	e2fa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    67dc:	b330      	cbz	r0, 682c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a0>
    67de:	68e0      	ldr	r0, [r4, #12]
    67e0:	f007 fd85 	bl	e2ee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    67e4:	4680      	mov	r8, r0
    67e6:	68e0      	ldr	r0, [r4, #12]
    67e8:	f007 fd85 	bl	e2f6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    67ec:	4607      	mov	r7, r0
    67ee:	68e0      	ldr	r0, [r4, #12]
    67f0:	f007 fd7b 	bl	e2ea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    67f4:	4606      	mov	r6, r0
    67f6:	68e0      	ldr	r0, [r4, #12]
    67f8:	f007 fd7b 	bl	e2f2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    67fc:	4601      	mov	r1, r0
    67fe:	f8cd 8000 	str.w	r8, [sp]
    6802:	6868      	ldr	r0, [r5, #4]
    6804:	463b      	mov	r3, r7
    6806:	4632      	mov	r2, r6
    6808:	302c      	adds	r0, #44	; 0x2c
    680a:	f007 ff0f 	bl	e62c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    680e:	78a0      	ldrb	r0, [r4, #2]
    6810:	0781      	lsls	r1, r0, #30
    6812:	f04f 0001 	mov.w	r0, #1
    6816:	d503      	bpl.n	6820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    6818:	68a1      	ldr	r1, [r4, #8]
    681a:	78c9      	ldrb	r1, [r1, #3]
    681c:	2914      	cmp	r1, #20
    681e:	d00a      	beq.n	6836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    6820:	6869      	ldr	r1, [r5, #4]
    6822:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    6826:	291d      	cmp	r1, #29
    6828:	d005      	beq.n	6836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    682a:	e007      	b.n	683c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b0>
    682c:	4628      	mov	r0, r5
    682e:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6832:	f7ff bfab 	b.w	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6836:	6869      	ldr	r1, [r5, #4]
    6838:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    683c:	6868      	ldr	r0, [r5, #4]
    683e:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    6842:	2901      	cmp	r1, #1
    6844:	d011      	beq.n	686a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    6846:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    684a:	f88d 1004 	strb.w	r1, [sp, #4]
    684e:	9901      	ldr	r1, [sp, #4]
    6850:	9101      	str	r1, [sp, #4]
    6852:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6856:	b941      	cbnz	r1, 686a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    6858:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    685c:	f88d 1000 	strb.w	r1, [sp]
    6860:	9900      	ldr	r1, [sp, #0]
    6862:	9100      	str	r1, [sp, #0]
    6864:	f89d 1000 	ldrb.w	r1, [sp]
    6868:	b141      	cbz	r1, 687c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>
    686a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    686e:	f041 0110 	orr.w	r1, r1, #16
    6872:	6001      	str	r1, [r0, #0]
    6874:	f7fe ff8c 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6878:	2000      	movs	r0, #0
    687a:	e7a9      	b.n	67d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1244>
    687c:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    6880:	f041 0120 	orr.w	r1, r1, #32
    6884:	6001      	str	r1, [r0, #0]
    6886:	4805      	ldr	r0, [pc, #20]	; (689c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    6888:	3010      	adds	r0, #16
    688a:	6843      	ldr	r3, [r0, #4]
    688c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    6890:	8818      	ldrh	r0, [r3, #0]
    6892:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    6896:	f7fc fedd 	bl	3654 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    689a:	e7eb      	b.n	6874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    689c:	200000fc 	.word	0x200000fc
    68a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    68a4:	4604      	mov	r4, r0
    68a6:	6840      	ldr	r0, [r0, #4]
    68a8:	2301      	movs	r3, #1
    68aa:	210a      	movs	r1, #10
    68ac:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    68b0:	3080      	adds	r0, #128	; 0x80
    68b2:	f007 fa51 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68b6:	b370      	cbz	r0, 6916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138a>
    68b8:	4d18      	ldr	r5, [pc, #96]	; (691c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>)
    68ba:	68e8      	ldr	r0, [r5, #12]
    68bc:	f007 fd1d 	bl	e2fa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    68c0:	b1e8      	cbz	r0, 68fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    68c2:	68e8      	ldr	r0, [r5, #12]
    68c4:	f007 fd13 	bl	e2ee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    68c8:	4607      	mov	r7, r0
    68ca:	68e8      	ldr	r0, [r5, #12]
    68cc:	f007 fd13 	bl	e2f6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    68d0:	4680      	mov	r8, r0
    68d2:	68e8      	ldr	r0, [r5, #12]
    68d4:	f007 fd09 	bl	e2ea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    68d8:	4606      	mov	r6, r0
    68da:	68e8      	ldr	r0, [r5, #12]
    68dc:	f007 fd09 	bl	e2f2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    68e0:	4601      	mov	r1, r0
    68e2:	9700      	str	r7, [sp, #0]
    68e4:	6860      	ldr	r0, [r4, #4]
    68e6:	4643      	mov	r3, r8
    68e8:	4632      	mov	r2, r6
    68ea:	302c      	adds	r0, #44	; 0x2c
    68ec:	f007 fe9e 	bl	e62c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    68f0:	6860      	ldr	r0, [r4, #4]
    68f2:	f007 fe0d 	bl	e510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    68f6:	2105      	movs	r1, #5
    68f8:	6860      	ldr	r0, [r4, #4]
    68fa:	f7fe f93d 	bl	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    68fe:	6861      	ldr	r1, [r4, #4]
    6900:	2000      	movs	r0, #0
    6902:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    6906:	6861      	ldr	r1, [r4, #4]
    6908:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    690c:	f7ff f924 	bl	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    6910:	2000      	movs	r0, #0
    6912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6916:	e7ff      	b.n	6918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    6918:	2001      	movs	r0, #1
    691a:	e7fa      	b.n	6912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1386>
    691c:	200000fc 	.word	0x200000fc
    6920:	b538      	push	{r3, r4, r5, lr}
    6922:	4604      	mov	r4, r0
    6924:	6840      	ldr	r0, [r0, #4]
    6926:	2301      	movs	r3, #1
    6928:	210b      	movs	r1, #11
    692a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    692e:	3080      	adds	r0, #128	; 0x80
    6930:	f007 fa12 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6934:	bb60      	cbnz	r0, 6990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    6936:	6860      	ldr	r0, [r4, #4]
    6938:	2301      	movs	r3, #1
    693a:	2100      	movs	r1, #0
    693c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6940:	3080      	adds	r0, #128	; 0x80
    6942:	f007 fa09 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6946:	b308      	cbz	r0, 698c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    6948:	6860      	ldr	r0, [r4, #4]
    694a:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    694e:	2825      	cmp	r0, #37	; 0x25
    6950:	d01e      	beq.n	6990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    6952:	4d2a      	ldr	r5, [pc, #168]	; (69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    6954:	68e8      	ldr	r0, [r5, #12]
    6956:	f007 fce2 	bl	e31e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    695a:	b1d8      	cbz	r0, 6994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1408>
    695c:	68e8      	ldr	r0, [r5, #12]
    695e:	6862      	ldr	r2, [r4, #4]
    6960:	7941      	ldrb	r1, [r0, #5]
    6962:	f001 0107 	and.w	r1, r1, #7
    6966:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    696a:	7900      	ldrb	r0, [r0, #4]
    696c:	f000 0107 	and.w	r1, r0, #7
    6970:	6860      	ldr	r0, [r4, #4]
    6972:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    6976:	6860      	ldr	r0, [r4, #4]
    6978:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
    697c:	f88d 2000 	strb.w	r2, [sp]
    6980:	9a00      	ldr	r2, [sp, #0]
    6982:	9200      	str	r2, [sp, #0]
    6984:	f89d 2000 	ldrb.w	r2, [sp]
    6988:	bb7a      	cbnz	r2, 69ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    698a:	e008      	b.n	699e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1412>
    698c:	2001      	movs	r0, #1
    698e:	bd38      	pop	{r3, r4, r5, pc}
    6990:	2020      	movs	r0, #32
    6992:	bd38      	pop	{r3, r4, r5, pc}
    6994:	4620      	mov	r0, r4
    6996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    699a:	f7ff bef7 	b.w	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    699e:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
    69a2:	2a01      	cmp	r2, #1
    69a4:	d021      	beq.n	69ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    69a6:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    69aa:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    69ae:	7855      	ldrb	r5, [r2, #1]
    69b0:	428d      	cmp	r5, r1
    69b2:	d106      	bne.n	69c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    69b4:	7811      	ldrb	r1, [r2, #0]
    69b6:	4299      	cmp	r1, r3
    69b8:	d103      	bne.n	69c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    69ba:	2102      	movs	r1, #2
    69bc:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    69c0:	e013      	b.n	69ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    69c2:	480e      	ldr	r0, [pc, #56]	; (69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    69c4:	3010      	adds	r0, #16
    69c6:	6841      	ldr	r1, [r0, #4]
    69c8:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    69cc:	880a      	ldrh	r2, [r1, #0]
    69ce:	f820 2b02 	strh.w	r2, [r0], #2
    69d2:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    69d6:	f800 2b01 	strb.w	r2, [r0], #1
    69da:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    69de:	f800 190d 	strb.w	r1, [r0], #-13
    69e2:	2222      	movs	r2, #34	; 0x22
    69e4:	4906      	ldr	r1, [pc, #24]	; (6a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1474>)
    69e6:	f007 fd4e 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69ea:	6861      	ldr	r1, [r4, #4]
    69ec:	2022      	movs	r0, #34	; 0x22
    69ee:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    69f2:	f7fe fecd 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    69f6:	2000      	movs	r0, #0
    69f8:	bd38      	pop	{r3, r4, r5, pc}
    69fa:	0000      	.short	0x0000
    69fc:	200000fc 	.word	0x200000fc
    6a00:	00010907 	.word	0x00010907
    6a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a08:	6845      	ldr	r5, [r0, #4]
    6a0a:	4604      	mov	r4, r0
    6a0c:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    6a10:	2821      	cmp	r0, #33	; 0x21
    6a12:	d008      	beq.n	6a26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149a>
    6a14:	f05f 0600 	movs.w	r6, #0
    6a18:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6a1c:	2823      	cmp	r0, #35	; 0x23
    6a1e:	d004      	beq.n	6a2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    6a20:	b38e      	cbz	r6, 6a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fa>
    6a22:	359d      	adds	r5, #157	; 0x9d
    6a24:	e002      	b.n	6a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    6a26:	2601      	movs	r6, #1
    6a28:	e7f6      	b.n	6a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148c>
    6a2a:	359e      	adds	r5, #158	; 0x9e
    6a2c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    6a30:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6a34:	f007 fc7f 	bl	e336 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6a38:	2700      	movs	r7, #0
    6a3a:	b340      	cbz	r0, 6a8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6a3c:	4631      	mov	r1, r6
    6a3e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6a42:	f7fe ff7f 	bl	5944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    6a46:	b310      	cbz	r0, 6a8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6a48:	466a      	mov	r2, sp
    6a4a:	4646      	mov	r6, r8
    6a4c:	6860      	ldr	r0, [r4, #4]
    6a4e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6a52:	f007 fa96 	bl	df82 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    6a56:	b3c0      	cbz	r0, 6aca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153e>
    6a58:	68f0      	ldr	r0, [r6, #12]
    6a5a:	f007 fc6a 	bl	e332 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6a5e:	6861      	ldr	r1, [r4, #4]
    6a60:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6a64:	6861      	ldr	r1, [r4, #4]
    6a66:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6a6a:	f008 fd7f 	bl	f56c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6a6e:	b368      	cbz	r0, 6acc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>
    6a70:	6861      	ldr	r1, [r4, #4]
    6a72:	2028      	movs	r0, #40	; 0x28
    6a74:	220b      	movs	r2, #11
    6a76:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6a7a:	6860      	ldr	r0, [r4, #4]
    6a7c:	4935      	ldr	r1, [pc, #212]	; (6b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6a7e:	30b4      	adds	r0, #180	; 0xb4
    6a80:	f007 fd01 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6a84:	e058      	b.n	6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6a86:	e7ff      	b.n	6a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fc>
    6a88:	2002      	movs	r0, #2
    6a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6a8e:	6860      	ldr	r0, [r4, #4]
    6a90:	f04f 0900 	mov.w	r9, #0
    6a94:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6a98:	2901      	cmp	r1, #1
    6a9a:	d018      	beq.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    6a9c:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6aa0:	b30e      	cbz	r6, 6ae6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155a>
    6aa2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6aa6:	6861      	ldr	r1, [r4, #4]
    6aa8:	2201      	movs	r2, #1
    6aaa:	78c0      	ldrb	r0, [r0, #3]
    6aac:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    6ab0:	4082      	lsls	r2, r0
    6ab2:	6861      	ldr	r1, [r4, #4]
    6ab4:	f3c2 6000 	ubfx	r0, r2, #24, #1
    6ab8:	b168      	cbz	r0, 6ad6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    6aba:	2009      	movs	r0, #9
    6abc:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6ac0:	6860      	ldr	r0, [r4, #4]
    6ac2:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    6ac6:	b9a8      	cbnz	r0, 6af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1568>
    6ac8:	e008      	b.n	6adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1550>
    6aca:	e015      	b.n	6af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    6acc:	e028      	b.n	6b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1594>
    6ace:	201e      	movs	r0, #30
    6ad0:	f7ff fd24 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6ad4:	e7e4      	b.n	6aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1514>
    6ad6:	f240 4183 	movw	r1, #1155	; 0x483
    6ada:	e001      	b.n	6ae0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    6adc:	f240 418b 	movw	r1, #1163	; 0x48b
    6ae0:	2031      	movs	r0, #49	; 0x31
    6ae2:	f7fa fc5d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ae6:	702f      	strb	r7, [r5, #0]
    6ae8:	f7fe fe5e 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6aec:	4620      	mov	r0, r4
    6aee:	f7ff fe4d 	bl	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6af2:	4681      	mov	r9, r0
    6af4:	4648      	mov	r0, r9
    6af6:	e7c8      	b.n	6a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6af8:	6860      	ldr	r0, [r4, #4]
    6afa:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6afe:	2901      	cmp	r1, #1
    6b00:	d009      	beq.n	6b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158a>
    6b02:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6b06:	6860      	ldr	r0, [r4, #4]
    6b08:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6b0c:	42a9      	cmp	r1, r5
    6b0e:	d113      	bne.n	6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b10:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6b14:	e010      	b.n	6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b16:	2000      	movs	r0, #0
    6b18:	f7ff fd00 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6b1c:	702f      	strb	r7, [r5, #0]
    6b1e:	e7f2      	b.n	6b06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157a>
    6b20:	6861      	ldr	r1, [r4, #4]
    6b22:	f89d 0000 	ldrb.w	r0, [sp]
    6b26:	f881 02ce 	strb.w	r0, [r1, #718]	; 0x2ce
    6b2a:	6861      	ldr	r1, [r4, #4]
    6b2c:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6b30:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6b34:	2025      	movs	r0, #37	; 0x25
    6b36:	7028      	strb	r0, [r5, #0]
    6b38:	6860      	ldr	r0, [r4, #4]
    6b3a:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6b3e:	42a9      	cmp	r1, r5
    6b40:	d102      	bne.n	6b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    6b42:	f7fe fe31 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6b46:	e001      	b.n	6b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    6b48:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6b4c:	2000      	movs	r0, #0
    6b4e:	e79c      	b.n	6a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6b50:	200000fc 	.word	0x200000fc
    6b54:	0000e7c5 	.word	0x0000e7c5
    6b58:	b570      	push	{r4, r5, r6, lr}
    6b5a:	4604      	mov	r4, r0
    6b5c:	6840      	ldr	r0, [r0, #4]
    6b5e:	4d0a      	ldr	r5, [pc, #40]	; (6b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6b60:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    6b64:	f041 0104 	orr.w	r1, r1, #4
    6b68:	7001      	strb	r1, [r0, #0]
    6b6a:	68e8      	ldr	r0, [r5, #12]
    6b6c:	f007 fbf7 	bl	e35e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6b70:	4606      	mov	r6, r0
    6b72:	68e8      	ldr	r0, [r5, #12]
    6b74:	f007 fbf7 	bl	e366 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6b78:	4601      	mov	r1, r0
    6b7a:	4622      	mov	r2, r4
    6b7c:	4630      	mov	r0, r6
    6b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b82:	f000 b895 	b.w	6cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    6b86:	0000      	.short	0x0000
    6b88:	200000fc 	.word	0x200000fc
    6b8c:	4602      	mov	r2, r0
    6b8e:	4813      	ldr	r0, [pc, #76]	; (6bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    6b90:	68c0      	ldr	r0, [r0, #12]
    6b92:	7901      	ldrb	r1, [r0, #4]
    6b94:	4811      	ldr	r0, [pc, #68]	; (6bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    6b96:	3010      	adds	r0, #16
    6b98:	6843      	ldr	r3, [r0, #4]
    6b9a:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    6b9e:	2821      	cmp	r0, #33	; 0x21
    6ba0:	d010      	beq.n	6bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    6ba2:	282e      	cmp	r0, #46	; 0x2e
    6ba4:	d00e      	beq.n	6bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    6ba6:	2828      	cmp	r0, #40	; 0x28
    6ba8:	d00e      	beq.n	6bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163c>
    6baa:	2804      	cmp	r0, #4
    6bac:	d00e      	beq.n	6bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1640>
    6bae:	280f      	cmp	r0, #15
    6bb0:	d00e      	beq.n	6bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    6bb2:	281d      	cmp	r0, #29
    6bb4:	d00e      	beq.n	6bd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1648>
    6bb6:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    6bba:	2823      	cmp	r0, #35	; 0x23
    6bbc:	d00c      	beq.n	6bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164c>
    6bbe:	20fe      	movs	r0, #254	; 0xfe
    6bc0:	f000 b876 	b.w	6cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    6bc4:	2016      	movs	r0, #22
    6bc6:	e7fb      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bc8:	2023      	movs	r0, #35	; 0x23
    6bca:	e7f9      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bcc:	200e      	movs	r0, #14
    6bce:	e7f7      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bd0:	2012      	movs	r0, #18
    6bd2:	e7f5      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bd4:	2014      	movs	r0, #20
    6bd6:	e7f3      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bd8:	2017      	movs	r0, #23
    6bda:	e7f1      	b.n	6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6bdc:	200000fc 	.word	0x200000fc
    6be0:	b510      	push	{r4, lr}
    6be2:	4604      	mov	r4, r0
    6be4:	6840      	ldr	r0, [r0, #4]
    6be6:	2301      	movs	r3, #1
    6be8:	4619      	mov	r1, r3
    6bea:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6bee:	3080      	adds	r0, #128	; 0x80
    6bf0:	f007 f8b2 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6bf4:	b108      	cbz	r0, 6bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166e>
    6bf6:	2000      	movs	r0, #0
    6bf8:	bd10      	pop	{r4, pc}
    6bfa:	4806      	ldr	r0, [pc, #24]	; (6c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6bfc:	68c0      	ldr	r0, [r0, #12]
    6bfe:	f007 fbdc 	bl	e3ba <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6c02:	6861      	ldr	r1, [r4, #4]
    6c04:	f881 00a0 	strb.w	r0, [r1, #160]	; 0xa0
    6c08:	6861      	ldr	r1, [r4, #4]
    6c0a:	2006      	movs	r0, #6
    6c0c:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    6c10:	e7f1      	b.n	6bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    6c12:	0000      	.short	0x0000
    6c14:	200000fc 	.word	0x200000fc
    6c18:	b570      	push	{r4, r5, r6, lr}
    6c1a:	4604      	mov	r4, r0
    6c1c:	481f      	ldr	r0, [pc, #124]	; (6c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>)
    6c1e:	2500      	movs	r5, #0
    6c20:	68c0      	ldr	r0, [r0, #12]
    6c22:	7903      	ldrb	r3, [r0, #4]
    6c24:	6860      	ldr	r0, [r4, #4]
    6c26:	2b16      	cmp	r3, #22
    6c28:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6c2c:	d013      	beq.n	6c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    6c2e:	dc06      	bgt.n	6c3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    6c30:	2b0e      	cmp	r3, #14
    6c32:	d009      	beq.n	6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6c34:	2b12      	cmp	r3, #18
    6c36:	d007      	beq.n	6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6c38:	2b14      	cmp	r3, #20
    6c3a:	d12c      	bne.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c3c:	e004      	b.n	6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6c3e:	2b17      	cmp	r3, #23
    6c40:	d002      	beq.n	6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6c42:	2b23      	cmp	r3, #35	; 0x23
    6c44:	d127      	bne.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c46:	e01f      	b.n	6c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6c48:	4622      	mov	r2, r4
    6c4a:	2101      	movs	r1, #1
    6c4c:	4618      	mov	r0, r3
    6c4e:	f008 fe3a 	bl	f8c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6c52:	4605      	mov	r5, r0
    6c54:	e01f      	b.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c56:	2821      	cmp	r0, #33	; 0x21
    6c58:	d001      	beq.n	6c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    6c5a:	282e      	cmp	r0, #46	; 0x2e
    6c5c:	d11b      	bne.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c5e:	4620      	mov	r0, r4
    6c60:	f008 fc90 	bl	f584 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    6c64:	6860      	ldr	r0, [r4, #4]
    6c66:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6c6a:	2922      	cmp	r1, #34	; 0x22
    6c6c:	d013      	beq.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c6e:	2108      	movs	r1, #8
    6c70:	30ec      	adds	r0, #236	; 0xec
    6c72:	f008 fc3b 	bl	f4ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    6c76:	6860      	ldr	r0, [r4, #4]
    6c78:	210b      	movs	r1, #11
    6c7a:	30ec      	adds	r0, #236	; 0xec
    6c7c:	f008 fc36 	bl	f4ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    6c80:	201a      	movs	r0, #26
    6c82:	f7ff fc4b 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6c86:	e006      	b.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c88:	2828      	cmp	r0, #40	; 0x28
    6c8a:	d104      	bne.n	6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c8c:	4804      	ldr	r0, [pc, #16]	; (6ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>)
    6c8e:	6801      	ldr	r1, [r0, #0]
    6c90:	b109      	cbz	r1, 6c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6c92:	4620      	mov	r0, r4
    6c94:	4788      	blx	r1
    6c96:	4628      	mov	r0, r5
    6c98:	bd70      	pop	{r4, r5, r6, pc}
    6c9a:	0000      	.short	0x0000
    6c9c:	200000fc 	.word	0x200000fc
    6ca0:	20000270 	.word	0x20000270
    6ca4:	4901      	ldr	r1, [pc, #4]	; (6cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1720>)
    6ca6:	68c9      	ldr	r1, [r1, #12]
    6ca8:	f7fc bdf2 	b.w	3890 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6cac:	200000fc 	.word	0x200000fc
    6cb0:	4603      	mov	r3, r0
    6cb2:	2000      	movs	r0, #0
    6cb4:	2b17      	cmp	r3, #23
    6cb6:	d017      	beq.n	6ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6cb8:	dc0a      	bgt.n	6cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    6cba:	2b0e      	cmp	r3, #14
    6cbc:	d014      	beq.n	6ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6cbe:	2b12      	cmp	r3, #18
    6cc0:	d012      	beq.n	6ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6cc2:	2b14      	cmp	r3, #20
    6cc4:	d010      	beq.n	6ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6cc6:	2b16      	cmp	r3, #22
    6cc8:	d112      	bne.n	6cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6cca:	4608      	mov	r0, r1
    6ccc:	f7ff bc4c 	b.w	6568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    6cd0:	2b23      	cmp	r3, #35	; 0x23
    6cd2:	d003      	beq.n	6cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6cd4:	2b24      	cmp	r3, #36	; 0x24
    6cd6:	d001      	beq.n	6cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6cd8:	2b25      	cmp	r3, #37	; 0x25
    6cda:	d109      	bne.n	6cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6cdc:	4a05      	ldr	r2, [pc, #20]	; (6cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>)
    6cde:	6812      	ldr	r2, [r2, #0]
    6ce0:	2a00      	cmp	r2, #0
    6ce2:	d005      	beq.n	6cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6ce4:	4618      	mov	r0, r3
    6ce6:	4710      	bx	r2
    6ce8:	2100      	movs	r1, #0
    6cea:	4618      	mov	r0, r3
    6cec:	f008 bdeb 	b.w	f8c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6cf0:	4770      	bx	lr
    6cf2:	0000      	.short	0x0000
    6cf4:	2000026c 	.word	0x2000026c
    6cf8:	4a03      	ldr	r2, [pc, #12]	; (6d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177c>)
    6cfa:	6852      	ldr	r2, [r2, #4]
    6cfc:	f882 0123 	strb.w	r0, [r2, #291]	; 0x123
    6d00:	f882 1122 	strb.w	r1, [r2, #290]	; 0x122
    6d04:	4770      	bx	lr
    6d06:	0000      	.short	0x0000
    6d08:	2000010c 	.word	0x2000010c
    6d0c:	b570      	push	{r4, r5, r6, lr}
    6d0e:	4604      	mov	r4, r0
    6d10:	6840      	ldr	r0, [r0, #4]
    6d12:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6d16:	291c      	cmp	r1, #28
    6d18:	d004      	beq.n	6d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    6d1a:	f640 014e 	movw	r1, #2126	; 0x84e
    6d1e:	2031      	movs	r0, #49	; 0x31
    6d20:	f7fa fb3e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d24:	2500      	movs	r5, #0
    6d26:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6d2a:	6860      	ldr	r0, [r4, #4]
    6d2c:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6d30:	b161      	cbz	r1, 6d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    6d32:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    6d36:	6860      	ldr	r0, [r4, #4]
    6d38:	220d      	movs	r2, #13
    6d3a:	8801      	ldrh	r1, [r0, #0]
    6d3c:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d40:	6860      	ldr	r0, [r4, #4]
    6d42:	490d      	ldr	r1, [pc, #52]	; (6d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ec>)
    6d44:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d48:	6860      	ldr	r0, [r4, #4]
    6d4a:	e00c      	b.n	6d66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17da>
    6d4c:	8801      	ldrh	r1, [r0, #0]
    6d4e:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d52:	6860      	ldr	r0, [r4, #4]
    6d54:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d58:	6861      	ldr	r1, [r4, #4]
    6d5a:	2001      	movs	r0, #1
    6d5c:	220c      	movs	r2, #12
    6d5e:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    6d62:	4906      	ldr	r1, [pc, #24]	; (6d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f0>)
    6d64:	6860      	ldr	r0, [r4, #4]
    6d66:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6d6a:	f007 fb8c 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6d6e:	6860      	ldr	r0, [r4, #4]
    6d70:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    6d74:	bd70      	pop	{r4, r5, r6, pc}
    6d76:	0000      	.short	0x0000
    6d78:	0000e865 	.word	0x0000e865
    6d7c:	0000e847 	.word	0x0000e847
    6d80:	4915      	ldr	r1, [pc, #84]	; (6dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>)
    6d82:	b510      	push	{r4, lr}
    6d84:	6889      	ldr	r1, [r1, #8]
    6d86:	790a      	ldrb	r2, [r1, #4]
    6d88:	6841      	ldr	r1, [r0, #4]
    6d8a:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6d8e:	2b09      	cmp	r3, #9
    6d90:	d10a      	bne.n	6da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    6d92:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    6d96:	4293      	cmp	r3, r2
    6d98:	d106      	bne.n	6da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    6d9a:	2200      	movs	r2, #0
    6d9c:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6da0:	6840      	ldr	r0, [r0, #4]
    6da2:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    6da6:	bd10      	pop	{r4, pc}
    6da8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6dac:	071c      	lsls	r4, r3, #28
    6dae:	d507      	bpl.n	6dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    6db0:	f023 0008 	bic.w	r0, r3, #8
    6db4:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dbc:	f7fe bcf4 	b.w	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6dc0:	2aff      	cmp	r2, #255	; 0xff
    6dc2:	d004      	beq.n	6dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1842>
    6dc4:	f240 71ea 	movw	r1, #2026	; 0x7ea
    6dc8:	2031      	movs	r0, #49	; 0x31
    6dca:	f7fa fae9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dd2:	f008 bc8d 	b.w	f6f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    6dd6:	0000      	.short	0x0000
    6dd8:	200000fc 	.word	0x200000fc
    6ddc:	4808      	ldr	r0, [pc, #32]	; (6e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1874>)
    6dde:	b510      	push	{r4, lr}
    6de0:	6840      	ldr	r0, [r0, #4]
    6de2:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6de6:	b941      	cbnz	r1, 6dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186e>
    6de8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6dec:	2301      	movs	r3, #1
    6dee:	2106      	movs	r1, #6
    6df0:	3080      	adds	r0, #128	; 0x80
    6df2:	f006 ffb1 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6df6:	2800      	cmp	r0, #0
    6df8:	d000      	beq.n	6dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    6dfa:	2001      	movs	r0, #1
    6dfc:	bd10      	pop	{r4, pc}
    6dfe:	0000      	.short	0x0000
    6e00:	2000010c 	.word	0x2000010c
    6e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e06:	4c59      	ldr	r4, [pc, #356]	; (6f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6e08:	4606      	mov	r6, r0
    6e0a:	4615      	mov	r5, r2
    6e0c:	6860      	ldr	r0, [r4, #4]
    6e0e:	2200      	movs	r2, #0
    6e10:	b111      	cbz	r1, 6e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    6e12:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6e16:	e006      	b.n	6e26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189a>
    6e18:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6e1c:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    6e20:	4411      	add	r1, r2
    6e22:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    6e26:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6e2a:	f88d 1000 	strb.w	r1, [sp]
    6e2e:	9900      	ldr	r1, [sp, #0]
    6e30:	9100      	str	r1, [sp, #0]
    6e32:	f89d 1000 	ldrb.w	r1, [sp]
    6e36:	b939      	cbnz	r1, 6e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    6e38:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6e3c:	2301      	movs	r3, #1
    6e3e:	4619      	mov	r1, r3
    6e40:	3080      	adds	r0, #128	; 0x80
    6e42:	f006 ff89 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e46:	b130      	cbz	r0, 6e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    6e48:	6860      	ldr	r0, [r4, #4]
    6e4a:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    6e4e:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    6e52:	4411      	add	r1, r2
    6e54:	8001      	strh	r1, [r0, #0]
    6e56:	6860      	ldr	r0, [r4, #4]
    6e58:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    6e5c:	b132      	cbz	r2, 6e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e0>
    6e5e:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6e62:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6e66:	4419      	add	r1, r3
    6e68:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6e6c:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    6e70:	2b00      	cmp	r3, #0
    6e72:	dd06      	ble.n	6e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f6>
    6e74:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6e78:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6e7c:	4439      	add	r1, r7
    6e7e:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    6e82:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6e86:	bb09      	cbnz	r1, 6ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    6e88:	b9be      	cbnz	r6, 6eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192e>
    6e8a:	4938      	ldr	r1, [pc, #224]	; (6f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6e8c:	3910      	subs	r1, #16
    6e8e:	7809      	ldrb	r1, [r1, #0]
    6e90:	2902      	cmp	r1, #2
    6e92:	d006      	beq.n	6ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    6e94:	2901      	cmp	r1, #1
    6e96:	d00a      	beq.n	6eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1922>
    6e98:	b1f5      	cbz	r5, 6ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    6e9a:	06e9      	lsls	r1, r5, #27
    6e9c:	d50b      	bpl.n	6eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192a>
    6e9e:	211e      	movs	r1, #30
    6ea0:	e042      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6ea2:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6ea6:	2906      	cmp	r1, #6
    6ea8:	d03e      	beq.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6eaa:	2116      	movs	r1, #22
    6eac:	e03c      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6eae:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    6eb2:	b959      	cbnz	r1, 6ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    6eb4:	e054      	b.n	6f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6eb6:	0729      	lsls	r1, r5, #28
    6eb8:	d501      	bpl.n	6ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1932>
    6eba:	213d      	movs	r1, #61	; 0x3d
    6ebc:	e034      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6ebe:	06a9      	lsls	r1, r5, #26
    6ec0:	d501      	bpl.n	6ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x193a>
    6ec2:	2123      	movs	r1, #35	; 0x23
    6ec4:	e030      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6ec6:	07a9      	lsls	r1, r5, #30
    6ec8:	d001      	beq.n	6ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    6eca:	212a      	movs	r1, #42	; 0x2a
    6ecc:	e02c      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6ece:	f640 615e 	movw	r1, #3678	; 0xe5e
    6ed2:	2031      	movs	r0, #49	; 0x31
    6ed4:	f7fa fa64 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ed8:	b12a      	cbz	r2, 6ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    6eda:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6ede:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6ee2:	4291      	cmp	r1, r2
    6ee4:	d216      	bcs.n	6f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	dd05      	ble.n	6ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196a>
    6eea:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6eee:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6ef2:	4291      	cmp	r1, r2
    6ef4:	d20e      	bcs.n	6f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    6ef6:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6efa:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6efe:	428a      	cmp	r2, r1
    6f00:	d30a      	bcc.n	6f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f02:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6f06:	f88d 2000 	strb.w	r2, [sp]
    6f0a:	9a00      	ldr	r2, [sp, #0]
    6f0c:	9200      	str	r2, [sp, #0]
    6f0e:	f89d 2000 	ldrb.w	r2, [sp]
    6f12:	b10a      	cbz	r2, 6f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f14:	2122      	movs	r1, #34	; 0x22
    6f16:	e007      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f18:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6f1c:	b172      	cbz	r2, 6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f1e:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6f22:	428a      	cmp	r2, r1
    6f24:	d31c      	bcc.n	6f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6f26:	2108      	movs	r1, #8
    6f28:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6f2c:	f88d 2000 	strb.w	r2, [sp]
    6f30:	9a00      	ldr	r2, [sp, #0]
    6f32:	9200      	str	r2, [sp, #0]
    6f34:	f89d 2000 	ldrb.w	r2, [sp]
    6f38:	b96a      	cbnz	r2, 6f56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    6f3a:	e005      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>
    6f3c:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6f40:	2906      	cmp	r1, #6
    6f42:	d30d      	bcc.n	6f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6f44:	213e      	movs	r1, #62	; 0x3e
    6f46:	e7ef      	b.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f48:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6f4c:	220b      	movs	r2, #11
    6f4e:	4908      	ldr	r1, [pc, #32]	; (6f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>)
    6f50:	30b4      	adds	r0, #180	; 0xb4
    6f52:	f007 fa98 	bl	e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6f56:	6860      	ldr	r0, [r4, #4]
    6f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f5c:	f008 bad6 	b.w	f50c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    6f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f64:	2100      	movs	r1, #0
    6f66:	f7fd be07 	b.w	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6f6a:	0000      	.short	0x0000
    6f6c:	2000010c 	.word	0x2000010c
    6f70:	0000e7c5 	.word	0x0000e7c5
    6f74:	b570      	push	{r4, r5, r6, lr}
    6f76:	4d2e      	ldr	r5, [pc, #184]	; (7030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa4>)
    6f78:	6868      	ldr	r0, [r5, #4]
    6f7a:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6f7e:	b151      	cbz	r1, 6f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    6f80:	2901      	cmp	r1, #1
    6f82:	d008      	beq.n	6f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    6f84:	2902      	cmp	r1, #2
    6f86:	d009      	beq.n	6f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    6f88:	2903      	cmp	r1, #3
    6f8a:	d007      	beq.n	6f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    6f8c:	f640 41d7 	movw	r1, #3287	; 0xcd7
    6f90:	2031      	movs	r0, #49	; 0x31
    6f92:	f7fa fa05 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f96:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6f9a:	e037      	b.n	700c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a80>
    6f9c:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    6fa0:	2907      	cmp	r1, #7
    6fa2:	d036      	beq.n	7012 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a86>
    6fa4:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6fa8:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6fac:	2400      	movs	r4, #0
    6fae:	1c93      	adds	r3, r2, #2
    6fb0:	4299      	cmp	r1, r3
    6fb2:	d306      	bcc.n	6fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a36>
    6fb4:	1a89      	subs	r1, r1, r2
    6fb6:	1e89      	subs	r1, r1, #2
    6fb8:	040c      	lsls	r4, r1, #16
    6fba:	0c24      	lsrs	r4, r4, #16
    6fbc:	d001      	beq.n	6fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a36>
    6fbe:	1e64      	subs	r4, r4, #1
    6fc0:	b2a4      	uxth	r4, r4
    6fc2:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    6fc6:	b139      	cbz	r1, 6fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>
    6fc8:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6fcc:	2301      	movs	r3, #1
    6fce:	2109      	movs	r1, #9
    6fd0:	3080      	adds	r0, #128	; 0x80
    6fd2:	f006 fec1 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6fd6:	b340      	cbz	r0, 702a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
    6fd8:	f7ff ff00 	bl	6ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    6fdc:	b178      	cbz	r0, 6ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a72>
    6fde:	686a      	ldr	r2, [r5, #4]
    6fe0:	2000      	movs	r0, #0
    6fe2:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    6fe6:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    6fea:	1c93      	adds	r3, r2, #2
    6fec:	4299      	cmp	r1, r3
    6fee:	d303      	bcc.n	6ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>
    6ff0:	1a88      	subs	r0, r1, r2
    6ff2:	1e80      	subs	r0, r0, #2
    6ff4:	d000      	beq.n	6ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>
    6ff6:	1e40      	subs	r0, r0, #1
    6ff8:	42a0      	cmp	r0, r4
    6ffa:	d200      	bcs.n	6ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a72>
    6ffc:	b284      	uxth	r4, r0
    6ffe:	b10c      	cbz	r4, 7004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    7000:	1e64      	subs	r4, r4, #1
    7002:	b2a4      	uxth	r4, r4
    7004:	6868      	ldr	r0, [r5, #4]
    7006:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    700a:	4421      	add	r1, r4
    700c:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    7010:	bd70      	pop	{r4, r5, r6, pc}
    7012:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    7016:	2903      	cmp	r1, #3
    7018:	d3bd      	bcc.n	6f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    701a:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    701e:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    7020:	4411      	add	r1, r2
    7022:	1c49      	adds	r1, r1, #1
    7024:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    7028:	bd70      	pop	{r4, r5, r6, pc}
    702a:	2400      	movs	r4, #0
    702c:	e7ea      	b.n	7004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    702e:	0000      	.short	0x0000
    7030:	2000010c 	.word	0x2000010c

00007034 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    7034:	b570      	push	{r4, r5, r6, lr}
    7036:	6844      	ldr	r4, [r0, #4]
    7038:	220d      	movs	r2, #13
    703a:	f504 7598 	add.w	r5, r4, #304	; 0x130
    703e:	2100      	movs	r1, #0
    7040:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    7044:	f009 ff2e 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7048:	f44f 70a3 	mov.w	r0, #326	; 0x146
    704c:	2100      	movs	r1, #0
    704e:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    7052:	5501      	strb	r1, [r0, r4]
    7054:	f8a5 1017 	strh.w	r1, [r5, #23]
    7058:	7669      	strb	r1, [r5, #25]
    705a:	4608      	mov	r0, r1
    705c:	f05f 017f 	movs.w	r1, #127	; 0x7f
    7060:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    7064:	1c40      	adds	r0, r0, #1
    7066:	b2c0      	uxtb	r0, r0
    7068:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    706c:	2802      	cmp	r0, #2
    706e:	d3f7      	bcc.n	7060 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    7070:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    7074:	4620      	mov	r0, r4
    7076:	f008 fd14 	bl	faa2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    707a:	2000      	movs	r0, #0
    707c:	21ff      	movs	r1, #255	; 0xff
    707e:	1822      	adds	r2, r4, r0
    7080:	1c40      	adds	r0, r0, #1
    7082:	b2c0      	uxtb	r0, r0
    7084:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    7088:	2802      	cmp	r0, #2
    708a:	d3f8      	bcc.n	707e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    708c:	bd70      	pop	{r4, r5, r6, pc}
	...

00007090 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    7090:	4903      	ldr	r1, [pc, #12]	; (70a0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    7092:	884a      	ldrh	r2, [r1, #2]
    7094:	8002      	strh	r2, [r0, #0]
    7096:	7809      	ldrb	r1, [r1, #0]
    7098:	7081      	strb	r1, [r0, #2]
    709a:	2000      	movs	r0, #0
    709c:	4770      	bx	lr
    709e:	0000      	.short	0x0000
    70a0:	20000f68 	.word	0x20000f68

000070a4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    70a4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    70a6:	460c      	mov	r4, r1
    70a8:	4605      	mov	r5, r0
    70aa:	8800      	ldrh	r0, [r0, #0]
    70ac:	4669      	mov	r1, sp
    70ae:	f006 fe29 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    70b2:	2200      	movs	r2, #0
    70b4:	b128      	cbz	r0, 70c2 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    70b6:	f8c4 2002 	str.w	r2, [r4, #2]
    70ba:	71a2      	strb	r2, [r4, #6]
    70bc:	8022      	strh	r2, [r4, #0]
    70be:	2002      	movs	r0, #2
    70c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70c2:	9901      	ldr	r1, [sp, #4]
    70c4:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    70c8:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    70cc:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    70d0:	f8c4 0002 	str.w	r0, [r4, #2]
    70d4:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    70d8:	71a0      	strb	r0, [r4, #6]
    70da:	8828      	ldrh	r0, [r5, #0]
    70dc:	8020      	strh	r0, [r4, #0]
    70de:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    70e2:	f88d 0008 	strb.w	r0, [sp, #8]
    70e6:	9802      	ldr	r0, [sp, #8]
    70e8:	9002      	str	r0, [sp, #8]
    70ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    70ee:	2800      	cmp	r0, #0
    70f0:	d1ea      	bne.n	70c8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    70f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000070f4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    70f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    70f6:	460d      	mov	r5, r1
    70f8:	4606      	mov	r6, r0
    70fa:	8800      	ldrh	r0, [r0, #0]
    70fc:	4669      	mov	r1, sp
    70fe:	f006 fe01 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7102:	2800      	cmp	r0, #0
    7104:	d11a      	bne.n	713c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    7106:	f8dd 4004 	ldr.w	r4, [sp, #4]
    710a:	2700      	movs	r7, #0
    710c:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7110:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    7114:	f009 f9d1 	bl	104ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    7118:	70a8      	strb	r0, [r5, #2]
    711a:	7860      	ldrb	r0, [r4, #1]
    711c:	f009 f9cd 	bl	104ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    7120:	70e8      	strb	r0, [r5, #3]
    7122:	78a0      	ldrb	r0, [r4, #2]
    7124:	f88d 0008 	strb.w	r0, [sp, #8]
    7128:	9802      	ldr	r0, [sp, #8]
    712a:	9002      	str	r0, [sp, #8]
    712c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7130:	3c6a      	subs	r4, #106	; 0x6a
    7132:	2800      	cmp	r0, #0
    7134:	d1ea      	bne.n	710c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    7136:	8830      	ldrh	r0, [r6, #0]
    7138:	8028      	strh	r0, [r5, #0]
    713a:	2000      	movs	r0, #0
    713c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007140 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7140:	4903      	ldr	r1, [pc, #12]	; (7150 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    7142:	888a      	ldrh	r2, [r1, #4]
    7144:	8002      	strh	r2, [r0, #0]
    7146:	88c9      	ldrh	r1, [r1, #6]
    7148:	8041      	strh	r1, [r0, #2]
    714a:	2000      	movs	r0, #0
    714c:	4770      	bx	lr
    714e:	0000      	.short	0x0000
    7150:	2000027c 	.word	0x2000027c

00007154 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7154:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7156:	2400      	movs	r4, #0
    7158:	a902      	add	r1, sp, #8
    715a:	f88d 4004 	strb.w	r4, [sp, #4]
    715e:	f88d 4008 	strb.w	r4, [sp, #8]
    7162:	9100      	str	r1, [sp, #0]
    7164:	7882      	ldrb	r2, [r0, #2]
    7166:	7841      	ldrb	r1, [r0, #1]
    7168:	7800      	ldrb	r0, [r0, #0]
    716a:	ab01      	add	r3, sp, #4
    716c:	f009 fb19 	bl	107a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    7170:	2800      	cmp	r0, #0
    7172:	d112      	bne.n	719a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7174:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7178:	f009 fa53 	bl	10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    717c:	b170      	cbz	r0, 719c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    717e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7182:	f009 fa4e 	bl	10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    7186:	b148      	cbz	r0, 719c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7188:	4805      	ldr	r0, [pc, #20]	; (71a0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    718a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    718e:	7381      	strb	r1, [r0, #14]
    7190:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7194:	73c1      	strb	r1, [r0, #15]
    7196:	8204      	strh	r4, [r0, #16]
    7198:	2000      	movs	r0, #0
    719a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    719c:	2011      	movs	r0, #17
    719e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    71a0:	20000f68 	.word	0x20000f68

000071a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    71a4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    71a8:	460f      	mov	r7, r1
    71aa:	4605      	mov	r5, r0
    71ac:	7806      	ldrb	r6, [r0, #0]
    71ae:	f009 f9eb 	bl	10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    71b2:	2800      	cmp	r0, #0
    71b4:	d10a      	bne.n	71cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    71b6:	4628      	mov	r0, r5
    71b8:	f009 f9c0 	bl	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    71bc:	2800      	cmp	r0, #0
    71be:	d105      	bne.n	71cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    71c0:	2001      	movs	r0, #1
    71c2:	f7fa fae1 	bl	1788 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    71c6:	4286      	cmp	r6, r0
    71c8:	d302      	bcc.n	71d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    71ca:	2007      	movs	r0, #7
    71cc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    71d0:	2101      	movs	r1, #1
    71d2:	4630      	mov	r0, r6
    71d4:	f006 fb1b 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    71d8:	0004      	movs	r4, r0
    71da:	d004      	beq.n	71e6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    71dc:	f007 fea8 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    71e0:	b168      	cbz	r0, 71fe <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    71e2:	200c      	movs	r0, #12
    71e4:	e7f2      	b.n	71cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    71e6:	2101      	movs	r1, #1
    71e8:	4630      	mov	r0, r6
    71ea:	f006 fb06 	bl	d7fa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    71ee:	0004      	movs	r4, r0
    71f0:	d013      	beq.n	721a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    71f2:	4817      	ldr	r0, [pc, #92]	; (7250 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    71f4:	f990 1000 	ldrsb.w	r1, [r0]
    71f8:	4620      	mov	r0, r4
    71fa:	f007 fc5b 	bl	eab4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    71fe:	4620      	mov	r0, r4
    7200:	f007 fcc3 	bl	eb8a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    7204:	7038      	strb	r0, [r7, #0]
    7206:	74e8      	strb	r0, [r5, #19]
    7208:	4629      	mov	r1, r5
    720a:	4620      	mov	r0, r4
    720c:	f7fc fce6 	bl	3bdc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    7210:	4606      	mov	r6, r0
    7212:	7e68      	ldrb	r0, [r5, #25]
    7214:	b1d0      	cbz	r0, 724c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    7216:	b12e      	cbz	r6, 7224 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    7218:	e018      	b.n	724c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    721a:	f241 31e8 	movw	r1, #5096	; 0x13e8
    721e:	2039      	movs	r0, #57	; 0x39
    7220:	f7fa f8be 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7224:	2200      	movs	r2, #0
    7226:	4668      	mov	r0, sp
    7228:	6b61      	ldr	r1, [r4, #52]	; 0x34
    722a:	f006 fba2 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    722e:	2200      	movs	r2, #0
    7230:	2101      	movs	r1, #1
    7232:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7234:	f006 fc17 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    7238:	2204      	movs	r2, #4
    723a:	4668      	mov	r0, sp
    723c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    723e:	f006 fb98 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    7242:	2200      	movs	r2, #0
    7244:	4611      	mov	r1, r2
    7246:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7248:	f006 fc0d 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    724c:	4630      	mov	r0, r6
    724e:	e7bd      	b.n	71cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    7250:	20000274 	.word	0x20000274

00007254 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7254:	7801      	ldrb	r1, [r0, #0]
    7256:	b171      	cbz	r1, 7276 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7258:	7841      	ldrb	r1, [r0, #1]
    725a:	b161      	cbz	r1, 7276 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    725c:	8841      	ldrh	r1, [r0, #2]
    725e:	291b      	cmp	r1, #27
    7260:	d309      	bcc.n	7276 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7262:	8881      	ldrh	r1, [r0, #4]
    7264:	291b      	cmp	r1, #27
    7266:	d306      	bcc.n	7276 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7268:	4904      	ldr	r1, [pc, #16]	; (727c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    726a:	6802      	ldr	r2, [r0, #0]
    726c:	600a      	str	r2, [r1, #0]
    726e:	8880      	ldrh	r0, [r0, #4]
    7270:	8088      	strh	r0, [r1, #4]
    7272:	2000      	movs	r0, #0
    7274:	4770      	bx	lr
    7276:	2012      	movs	r0, #18
    7278:	4770      	bx	lr
    727a:	0000      	.short	0x0000
    727c:	20000f68 	.word	0x20000f68

00007280 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7280:	6800      	ldr	r0, [r0, #0]
    7282:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7286:	4288      	cmp	r0, r1
    7288:	d303      	bcc.n	7292 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    728a:	4903      	ldr	r1, [pc, #12]	; (7298 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    728c:	6088      	str	r0, [r1, #8]
    728e:	2000      	movs	r0, #0
    7290:	4770      	bx	lr
    7292:	2012      	movs	r0, #18
    7294:	4770      	bx	lr
    7296:	0000      	.short	0x0000
    7298:	20000f68 	.word	0x20000f68

0000729c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    729c:	4a03      	ldr	r2, [pc, #12]	; (72ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    729e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    72a2:	6001      	str	r1, [r0, #0]
    72a4:	6042      	str	r2, [r0, #4]
    72a6:	2000      	movs	r0, #0
    72a8:	4770      	bx	lr
    72aa:	0000      	.short	0x0000
    72ac:	000077e8 	.word	0x000077e8

000072b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    72b0:	b50e      	push	{r1, r2, r3, lr}
    72b2:	8800      	ldrh	r0, [r0, #0]
    72b4:	4669      	mov	r1, sp
    72b6:	f006 fd25 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    72ba:	b960      	cbnz	r0, 72d6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    72bc:	9801      	ldr	r0, [sp, #4]
    72be:	f009 fa2c 	bl	1071a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    72c2:	b140      	cbz	r0, 72d6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    72c4:	9801      	ldr	r0, [sp, #4]
    72c6:	4601      	mov	r1, r0
    72c8:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    72cc:	3080      	adds	r0, #128	; 0x80
    72ce:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    72d2:	b962      	cbnz	r2, 72ee <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    72d4:	e001      	b.n	72da <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    72d6:	2002      	movs	r0, #2
    72d8:	bd0e      	pop	{r1, r2, r3, pc}
    72da:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    72de:	f88d 2008 	strb.w	r2, [sp, #8]
    72e2:	9a02      	ldr	r2, [sp, #8]
    72e4:	9202      	str	r2, [sp, #8]
    72e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    72ea:	2201      	movs	r2, #1
    72ec:	b10b      	cbz	r3, 72f2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    72ee:	203a      	movs	r0, #58	; 0x3a
    72f0:	bd0e      	pop	{r1, r2, r3, pc}
    72f2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    72f6:	079b      	lsls	r3, r3, #30
    72f8:	d006      	beq.n	7308 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    72fa:	2203      	movs	r2, #3
    72fc:	4905      	ldr	r1, [pc, #20]	; (7314 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    72fe:	305e      	adds	r0, #94	; 0x5e
    7300:	f007 f8d5 	bl	e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7304:	2000      	movs	r0, #0
    7306:	bd0e      	pop	{r1, r2, r3, pc}
    7308:	700a      	strb	r2, [r1, #0]
    730a:	4668      	mov	r0, sp
    730c:	f007 f898 	bl	e440 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    7310:	e7f8      	b.n	7304 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7312:	0000      	.short	0x0000
    7314:	0000e923 	.word	0x0000e923

00007318 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    7318:	b510      	push	{r4, lr}
    731a:	2005      	movs	r0, #5
    731c:	f000 faf6 	bl	790c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7320:	f7fe f88c 	bl	543c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    7324:	4902      	ldr	r1, [pc, #8]	; (7330 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    7326:	4801      	ldr	r0, [pc, #4]	; (732c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    7328:	6048      	str	r0, [r1, #4]
    732a:	bd10      	pop	{r4, pc}
    732c:	00007361 	.word	0x00007361
    7330:	20000274 	.word	0x20000274
    7334:	b51c      	push	{r2, r3, r4, lr}
    7336:	4909      	ldr	r1, [pc, #36]	; (735c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    7338:	e9d1 0100 	ldrd	r0, r1, [r1]
    733c:	e9cd 0100 	strd	r0, r1, [sp]
    7340:	e005      	b.n	734e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    7342:	9800      	ldr	r0, [sp, #0]
    7344:	f007 fdf4 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7348:	b108      	cbz	r0, 734e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    734a:	2001      	movs	r0, #1
    734c:	bd1c      	pop	{r2, r3, r4, pc}
    734e:	4668      	mov	r0, sp
    7350:	f7fa fa64 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7354:	2800      	cmp	r0, #0
    7356:	d0f4      	beq.n	7342 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    7358:	2000      	movs	r0, #0
    735a:	bd1c      	pop	{r2, r3, r4, pc}
    735c:	000077e8 	.word	0x000077e8
    7360:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    7364:	4613      	mov	r3, r2
    7366:	4a33      	ldr	r2, [pc, #204]	; (7434 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    7368:	460f      	mov	r7, r1
    736a:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    736e:	8814      	ldrh	r4, [r2, #0]
    7370:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    7374:	428c      	cmp	r4, r1
    7376:	d200      	bcs.n	737a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    7378:	4621      	mov	r1, r4
    737a:	4688      	mov	r8, r1
    737c:	8891      	ldrh	r1, [r2, #4]
    737e:	42b1      	cmp	r1, r6
    7380:	d200      	bcs.n	7384 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    7382:	460e      	mov	r6, r1
    7384:	8851      	ldrh	r1, [r2, #2]
    7386:	f640 0448 	movw	r4, #2120	; 0x848
    738a:	42a1      	cmp	r1, r4
    738c:	d300      	bcc.n	7390 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    738e:	4621      	mov	r1, r4
    7390:	88d5      	ldrh	r5, [r2, #6]
    7392:	42a5      	cmp	r5, r4
    7394:	d300      	bcc.n	7398 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    7396:	4625      	mov	r5, r4
    7398:	42a1      	cmp	r1, r4
    739a:	d200      	bcs.n	739e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    739c:	460c      	mov	r4, r1
    739e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    73a2:	2e1b      	cmp	r6, #27
    73a4:	d001      	beq.n	73aa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    73a6:	4295      	cmp	r5, r2
    73a8:	d104      	bne.n	73b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    73aa:	f1b8 0f1b 	cmp.w	r8, #27
    73ae:	d03e      	beq.n	742e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    73b0:	4294      	cmp	r4, r2
    73b2:	d03c      	beq.n	742e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    73b4:	466a      	mov	r2, sp
    73b6:	4619      	mov	r1, r3
    73b8:	f009 f956 	bl	10668 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    73bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    73c0:	4641      	mov	r1, r8
    73c2:	4540      	cmp	r0, r8
    73c4:	d900      	bls.n	73c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    73c6:	4608      	mov	r0, r1
    73c8:	80f8      	strh	r0, [r7, #6]
    73ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    73ce:	42a1      	cmp	r1, r4
    73d0:	d800      	bhi.n	73d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    73d2:	460c      	mov	r4, r1
    73d4:	813c      	strh	r4, [r7, #8]
    73d6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    73da:	42b1      	cmp	r1, r6
    73dc:	d800      	bhi.n	73e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    73de:	460e      	mov	r6, r1
    73e0:	807e      	strh	r6, [r7, #2]
    73e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    73e6:	42a9      	cmp	r1, r5
    73e8:	d800      	bhi.n	73ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    73ea:	460d      	mov	r5, r1
    73ec:	80bd      	strh	r5, [r7, #4]
    73ee:	21ff      	movs	r1, #255	; 0xff
    73f0:	7039      	strb	r1, [r7, #0]
    73f2:	381b      	subs	r0, #27
    73f4:	28e0      	cmp	r0, #224	; 0xe0
    73f6:	d902      	bls.n	73fe <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    73f8:	f640 516e 	movw	r1, #3438	; 0xd6e
    73fc:	e014      	b.n	7428 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    73fe:	3e1b      	subs	r6, #27
    7400:	2ee0      	cmp	r6, #224	; 0xe0
    7402:	d902      	bls.n	740a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    7404:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7408:	e00e      	b.n	7428 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    740a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    740e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    7412:	4284      	cmp	r4, r0
    7414:	d902      	bls.n	741c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    7416:	f640 5172 	movw	r1, #3442	; 0xd72
    741a:	e005      	b.n	7428 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    741c:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7420:	4285      	cmp	r5, r0
    7422:	d904      	bls.n	742e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    7424:	f640 5174 	movw	r1, #3444	; 0xd74
    7428:	2039      	movs	r0, #57	; 0x39
    742a:	f7f9 ffb9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    742e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    7432:	0000      	.short	0x0000
    7434:	2000027c 	.word	0x2000027c
    7438:	b510      	push	{r4, lr}
    743a:	480d      	ldr	r0, [pc, #52]	; (7470 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    743c:	2100      	movs	r1, #0
    743e:	4b0d      	ldr	r3, [pc, #52]	; (7474 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    7440:	74c1      	strb	r1, [r0, #19]
    7442:	8281      	strh	r1, [r0, #20]
    7444:	221b      	movs	r2, #27
    7446:	801a      	strh	r2, [r3, #0]
    7448:	f44f 74a4 	mov.w	r4, #328	; 0x148
    744c:	805c      	strh	r4, [r3, #2]
    744e:	809a      	strh	r2, [r3, #4]
    7450:	80dc      	strh	r4, [r3, #6]
    7452:	7381      	strb	r1, [r0, #14]
    7454:	73c1      	strb	r1, [r0, #15]
    7456:	2303      	movs	r3, #3
    7458:	7003      	strb	r3, [r0, #0]
    745a:	2302      	movs	r3, #2
    745c:	7043      	strb	r3, [r0, #1]
    745e:	8042      	strh	r2, [r0, #2]
    7460:	8082      	strh	r2, [r0, #4]
    7462:	f640 62a6 	movw	r2, #3750	; 0xea6
    7466:	6082      	str	r2, [r0, #8]
    7468:	7481      	strb	r1, [r0, #18]
    746a:	7301      	strb	r1, [r0, #12]
    746c:	bd10      	pop	{r4, pc}
    746e:	0000      	.short	0x0000
    7470:	20000f68 	.word	0x20000f68
    7474:	2000027c 	.word	0x2000027c
    7478:	b510      	push	{r4, lr}
    747a:	2101      	movs	r1, #1
    747c:	2000      	movs	r0, #0
    747e:	f006 f9c6 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7482:	0004      	movs	r4, r0
    7484:	d10a      	bne.n	749c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    7486:	2101      	movs	r1, #1
    7488:	f006 f9b7 	bl	d7fa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    748c:	0004      	movs	r4, r0
    748e:	d007      	beq.n	74a0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    7490:	4806      	ldr	r0, [pc, #24]	; (74ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    7492:	f990 1000 	ldrsb.w	r1, [r0]
    7496:	4620      	mov	r0, r4
    7498:	f007 fb0c 	bl	eab4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    749c:	4620      	mov	r0, r4
    749e:	bd10      	pop	{r4, pc}
    74a0:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    74a4:	2039      	movs	r0, #57	; 0x39
    74a6:	f7f9 ff7b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74aa:	0000      	.short	0x0000
    74ac:	20000274 	.word	0x20000274

000074b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    74b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    74b4:	b087      	sub	sp, #28
    74b6:	460c      	mov	r4, r1
    74b8:	4680      	mov	r8, r0
    74ba:	4605      	mov	r5, r0
    74bc:	f007 fb68 	bl	eb90 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    74c0:	b198      	cbz	r0, 74ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    74c2:	4628      	mov	r0, r5
    74c4:	f007 fb57 	bl	eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    74c8:	b130      	cbz	r0, 74d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    74ca:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    74ce:	2012      	movs	r0, #18
    74d0:	2900      	cmp	r1, #0
    74d2:	d00b      	beq.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    74d4:	2980      	cmp	r1, #128	; 0x80
    74d6:	d809      	bhi.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    74d8:	4628      	mov	r0, r5
    74da:	f007 fb3d 	bl	eb58 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    74de:	b140      	cbz	r0, 74f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    74e0:	4640      	mov	r0, r8
    74e2:	f007 faa8 	bl	ea36 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    74e6:	b130      	cbz	r0, 74f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    74e8:	e009      	b.n	74fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    74ea:	2042      	movs	r0, #66	; 0x42
    74ec:	b007      	add	sp, #28
    74ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    74f2:	200c      	movs	r0, #12
    74f4:	e7fa      	b.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    74f6:	4640      	mov	r0, r8
    74f8:	f007 fb37 	bl	eb6a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    74fc:	b3c8      	cbz	r0, 7572 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    74fe:	4640      	mov	r0, r8
    7500:	f007 fd16 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7504:	2800      	cmp	r0, #0
    7506:	d1f4      	bne.n	74f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    7508:	4640      	mov	r0, r8
    750a:	f007 faaf 	bl	ea6c <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    750e:	2800      	cmp	r0, #0
    7510:	d1ef      	bne.n	74f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    7512:	4640      	mov	r0, r8
    7514:	f7fc fb00 	bl	3b18 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    7518:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    751c:	f242 7110 	movw	r1, #10000	; 0x2710
    7520:	fb00 f901 	mul.w	r9, r0, r1
    7524:	78e1      	ldrb	r1, [r4, #3]
    7526:	4640      	mov	r0, r8
    7528:	f007 fb0d 	bl	eb46 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    752c:	4640      	mov	r0, r8
    752e:	f007 fb1e 	bl	eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    7532:	b308      	cbz	r0, 7578 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    7534:	2100      	movs	r1, #0
    7536:	a801      	add	r0, sp, #4
    7538:	f7fa f990 	bl	185c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    753c:	0004      	movs	r4, r0
    753e:	d07b      	beq.n	7638 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    7540:	2100      	movs	r1, #0
    7542:	f7fb fcf3 	bl	2f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7546:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    754a:	8020      	strh	r0, [r4, #0]
    754c:	4621      	mov	r1, r4
    754e:	4640      	mov	r0, r8
    7550:	f007 fb35 	bl	ebbe <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    7554:	f000 f9e6 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7558:	0940      	lsrs	r0, r0, #5
    755a:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    755e:	07c0      	lsls	r0, r0, #31
    7560:	4d41      	ldr	r5, [pc, #260]	; (7668 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    7562:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7566:	d011      	beq.n	758c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    7568:	8869      	ldrh	r1, [r5, #2]
    756a:	88aa      	ldrh	r2, [r5, #4]
    756c:	84c1      	strh	r1, [r0, #38]	; 0x26
    756e:	8502      	strh	r2, [r0, #40]	; 0x28
    7570:	e00f      	b.n	7592 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    7572:	e7ff      	b.n	7574 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    7574:	2012      	movs	r0, #18
    7576:	e7b9      	b.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7578:	464a      	mov	r2, r9
    757a:	2100      	movs	r1, #0
    757c:	4640      	mov	r0, r8
    757e:	f7fd f9e9 	bl	4954 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7582:	2800      	cmp	r0, #0
    7584:	d0b2      	beq.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7586:	f241 6122 	movw	r1, #5666	; 0x1622
    758a:	e05f      	b.n	764c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    758c:	221b      	movs	r2, #27
    758e:	84c2      	strh	r2, [r0, #38]	; 0x26
    7590:	8502      	strh	r2, [r0, #40]	; 0x28
    7592:	f000 f9c7 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7596:	0788      	lsls	r0, r1, #30
    7598:	f04f 0601 	mov.w	r6, #1
    759c:	d505      	bpl.n	75aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    759e:	f88d 6008 	strb.w	r6, [sp, #8]
    75a2:	a802      	add	r0, sp, #8
    75a4:	9403      	str	r4, [sp, #12]
    75a6:	f7ff fd45 	bl	7034 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    75aa:	68a8      	ldr	r0, [r5, #8]
    75ac:	62e0      	str	r0, [r4, #44]	; 0x2c
    75ae:	f641 574c 	movw	r7, #7500	; 0x1d4c
    75b2:	4640      	mov	r0, r8
    75b4:	f007 fae3 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    75b8:	b910      	cbnz	r0, 75c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    75ba:	4640      	mov	r0, r8
    75bc:	f007 fafd 	bl	ebba <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    75c0:	6127      	str	r7, [r4, #16]
    75c2:	8821      	ldrh	r1, [r4, #0]
    75c4:	f8ad 1008 	strh.w	r1, [sp, #8]
    75c8:	7ba9      	ldrb	r1, [r5, #14]
    75ca:	f88d 100a 	strb.w	r1, [sp, #10]
    75ce:	7be9      	ldrb	r1, [r5, #15]
    75d0:	f88d 100b 	strb.w	r1, [sp, #11]
    75d4:	8a29      	ldrh	r1, [r5, #16]
    75d6:	f8ad 100c 	strh.w	r1, [sp, #12]
    75da:	a905      	add	r1, sp, #20
    75dc:	9100      	str	r1, [sp, #0]
    75de:	4630      	mov	r0, r6
    75e0:	ab04      	add	r3, sp, #16
    75e2:	aa02      	add	r2, sp, #8
    75e4:	4621      	mov	r1, r4
    75e6:	f009 f875 	bl	106d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    75ea:	b140      	cbz	r0, 75fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    75ec:	2100      	movs	r1, #0
    75ee:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    75f2:	f7fa f95b 	bl	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    75f6:	b1f0      	cbz	r0, 7636 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    75f8:	f241 617c 	movw	r1, #5756	; 0x167c
    75fc:	e026      	b.n	764c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    75fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7602:	f88d 0018 	strb.w	r0, [sp, #24]
    7606:	f89d 0014 	ldrb.w	r0, [sp, #20]
    760a:	f88d 0019 	strb.w	r0, [sp, #25]
    760e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    7612:	f8ad 001a 	strh.w	r0, [sp, #26]
    7616:	a906      	add	r1, sp, #24
    7618:	4620      	mov	r0, r4
    761a:	f006 fc43 	bl	dea4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    761e:	7868      	ldrb	r0, [r5, #1]
    7620:	9000      	str	r0, [sp, #0]
    7622:	782b      	ldrb	r3, [r5, #0]
    7624:	88aa      	ldrh	r2, [r5, #4]
    7626:	8869      	ldrh	r1, [r5, #2]
    7628:	8820      	ldrh	r0, [r4, #0]
    762a:	f7fa f9f5 	bl	1a18 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    762e:	b128      	cbz	r0, 763c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    7630:	f241 6187 	movw	r1, #5767	; 0x1687
    7634:	e00a      	b.n	764c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    7636:	e7ff      	b.n	7638 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    7638:	2009      	movs	r0, #9
    763a:	e757      	b.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    763c:	464a      	mov	r2, r9
    763e:	4621      	mov	r1, r4
    7640:	4640      	mov	r0, r8
    7642:	f7fd f987 	bl	4954 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7646:	b120      	cbz	r0, 7652 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    7648:	f241 6189 	movw	r1, #5769	; 0x1689
    764c:	2039      	movs	r0, #57	; 0x39
    764e:	f7f9 fea7 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7652:	4806      	ldr	r0, [pc, #24]	; (766c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    7654:	6843      	ldr	r3, [r0, #4]
    7656:	b123      	cbz	r3, 7662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    7658:	2200      	movs	r2, #0
    765a:	f504 7199 	add.w	r1, r4, #306	; 0x132
    765e:	4620      	mov	r0, r4
    7660:	4798      	blx	r3
    7662:	2000      	movs	r0, #0
    7664:	e742      	b.n	74ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7666:	0000      	.short	0x0000
    7668:	20000f68 	.word	0x20000f68
    766c:	20000274 	.word	0x20000274
    7670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7674:	b088      	sub	sp, #32
    7676:	4604      	mov	r4, r0
    7678:	8800      	ldrh	r0, [r0, #0]
    767a:	a906      	add	r1, sp, #24
    767c:	f006 fb42 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7680:	2800      	cmp	r0, #0
    7682:	d147      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7684:	9807      	ldr	r0, [sp, #28]
    7686:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    768a:	f88d 1008 	strb.w	r1, [sp, #8]
    768e:	9902      	ldr	r1, [sp, #8]
    7690:	9102      	str	r1, [sp, #8]
    7692:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7696:	3080      	adds	r0, #128	; 0x80
    7698:	b101      	cbz	r1, 769c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    769a:	2101      	movs	r1, #1
    769c:	f88d 100c 	strb.w	r1, [sp, #12]
    76a0:	7b01      	ldrb	r1, [r0, #12]
    76a2:	f04f 0800 	mov.w	r8, #0
    76a6:	0689      	lsls	r1, r1, #26
    76a8:	d502      	bpl.n	76b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    76aa:	f89d 100c 	ldrb.w	r1, [sp, #12]
    76ae:	b149      	cbz	r1, 76c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    76b0:	f05f 0100 	movs.w	r1, #0
    76b4:	f88d 1004 	strb.w	r1, [sp, #4]
    76b8:	2105      	movs	r1, #5
    76ba:	306c      	adds	r0, #108	; 0x6c
    76bc:	f008 fa61 	bl	fb82 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    76c0:	b110      	cbz	r0, 76c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    76c2:	e004      	b.n	76ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    76c4:	2101      	movs	r1, #1
    76c6:	e7f5      	b.n	76b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    76c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    76cc:	b308      	cbz	r0, 7712 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    76ce:	8921      	ldrh	r1, [r4, #8]
    76d0:	88e0      	ldrh	r0, [r4, #6]
    76d2:	f008 ffbb 	bl	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    76d6:	2800      	cmp	r0, #0
    76d8:	d11c      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    76da:	88a1      	ldrh	r1, [r4, #4]
    76dc:	8860      	ldrh	r0, [r4, #2]
    76de:	f008 ffb5 	bl	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    76e2:	2800      	cmp	r0, #0
    76e4:	d116      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    76e6:	8921      	ldrh	r1, [r4, #8]
    76e8:	88e0      	ldrh	r0, [r4, #6]
    76ea:	f008 ffa5 	bl	10638 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    76ee:	2800      	cmp	r0, #0
    76f0:	d110      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    76f2:	88a1      	ldrh	r1, [r4, #4]
    76f4:	8860      	ldrh	r0, [r4, #2]
    76f6:	f008 ff9f 	bl	10638 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    76fa:	0006      	movs	r6, r0
    76fc:	d10a      	bne.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    76fe:	9807      	ldr	r0, [sp, #28]
    7700:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7704:	27ff      	movs	r7, #255	; 0xff
    7706:	706f      	strb	r7, [r5, #1]
    7708:	f89d 100c 	ldrb.w	r1, [sp, #12]
    770c:	b129      	cbz	r1, 771a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    770e:	263a      	movs	r6, #58	; 0x3a
    7710:	e02e      	b.n	7770 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    7712:	201a      	movs	r0, #26
    7714:	b008      	add	sp, #32
    7716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    771a:	4641      	mov	r1, r8
    771c:	aa03      	add	r2, sp, #12
    771e:	f008 ffa3 	bl	10668 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    7722:	8861      	ldrh	r1, [r4, #2]
    7724:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7728:	4281      	cmp	r1, r0
    772a:	d200      	bcs.n	772e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    772c:	4608      	mov	r0, r1
    772e:	80e8      	strh	r0, [r5, #6]
    7730:	88a1      	ldrh	r1, [r4, #4]
    7732:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7736:	4281      	cmp	r1, r0
    7738:	d200      	bcs.n	773c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    773a:	4608      	mov	r0, r1
    773c:	8128      	strh	r0, [r5, #8]
    773e:	88e2      	ldrh	r2, [r4, #6]
    7740:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7744:	428a      	cmp	r2, r1
    7746:	d200      	bcs.n	774a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    7748:	4611      	mov	r1, r2
    774a:	8069      	strh	r1, [r5, #2]
    774c:	8922      	ldrh	r2, [r4, #8]
    774e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7752:	428a      	cmp	r2, r1
    7754:	d200      	bcs.n	7758 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    7756:	4611      	mov	r1, r2
    7758:	f640 0248 	movw	r2, #2120	; 0x848
    775c:	80a9      	strh	r1, [r5, #4]
    775e:	4291      	cmp	r1, r2
    7760:	d300      	bcc.n	7764 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    7762:	4611      	mov	r1, r2
    7764:	80a9      	strh	r1, [r5, #4]
    7766:	4290      	cmp	r0, r2
    7768:	d200      	bcs.n	776c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    776a:	4602      	mov	r2, r0
    776c:	812a      	strh	r2, [r5, #8]
    776e:	702f      	strb	r7, [r5, #0]
    7770:	f885 8001 	strb.w	r8, [r5, #1]
    7774:	4630      	mov	r0, r6
    7776:	e7cd      	b.n	7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7778:	b51c      	push	{r2, r3, r4, lr}
    777a:	490c      	ldr	r1, [pc, #48]	; (77ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    777c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7780:	e9cd 0100 	strd	r0, r1, [sp]
    7784:	e00a      	b.n	779c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7786:	9c00      	ldr	r4, [sp, #0]
    7788:	4620      	mov	r0, r4
    778a:	f007 fbd1 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    778e:	b128      	cbz	r0, 779c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7790:	4620      	mov	r0, r4
    7792:	f007 fa23 	bl	ebdc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    7796:	b108      	cbz	r0, 779c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7798:	2001      	movs	r0, #1
    779a:	bd1c      	pop	{r2, r3, r4, pc}
    779c:	4668      	mov	r0, sp
    779e:	f7fa f83d 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    77a2:	2800      	cmp	r0, #0
    77a4:	d0ef      	beq.n	7786 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    77a6:	2000      	movs	r0, #0
    77a8:	bd1c      	pop	{r2, r3, r4, pc}
    77aa:	0000      	.short	0x0000
    77ac:	000077e8 	.word	0x000077e8
    77b0:	b510      	push	{r4, lr}
    77b2:	4604      	mov	r4, r0
    77b4:	88c1      	ldrh	r1, [r0, #6]
    77b6:	8880      	ldrh	r0, [r0, #4]
    77b8:	f008 ff48 	bl	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    77bc:	2800      	cmp	r0, #0
    77be:	d10f      	bne.n	77e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    77c0:	8861      	ldrh	r1, [r4, #2]
    77c2:	8820      	ldrh	r0, [r4, #0]
    77c4:	f008 ff42 	bl	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    77c8:	2800      	cmp	r0, #0
    77ca:	d109      	bne.n	77e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    77cc:	4805      	ldr	r0, [pc, #20]	; (77e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    77ce:	88a1      	ldrh	r1, [r4, #4]
    77d0:	8081      	strh	r1, [r0, #4]
    77d2:	8821      	ldrh	r1, [r4, #0]
    77d4:	8001      	strh	r1, [r0, #0]
    77d6:	88e1      	ldrh	r1, [r4, #6]
    77d8:	80c1      	strh	r1, [r0, #6]
    77da:	8861      	ldrh	r1, [r4, #2]
    77dc:	8041      	strh	r1, [r0, #2]
    77de:	2000      	movs	r0, #0
    77e0:	bd10      	pop	{r4, pc}
    77e2:	0000      	.short	0x0000
    77e4:	2000027c 	.word	0x2000027c
    77e8:	00000000 	.word	0x00000000
    77ec:	00010000 	.word	0x00010000
    77f0:	00000000 	.word	0x00000000
    77f4:	00010000 	.word	0x00010000
    77f8:	0c124b0c 	.word	0x0c124b0c
    77fc:	124b0059 	.word	0x124b0059
    7800:	00000000 	.word	0x00000000
    7804:	00010000 	.word	0x00010000
    7808:	00000000 	.word	0x00000000
    780c:	00010000 	.word	0x00010000

00007810 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7810:	b510      	push	{r4, lr}
    7812:	f7fb fe2d 	bl	3470 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7816:	4c05      	ldr	r4, [pc, #20]	; (782c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7818:	6860      	ldr	r0, [r4, #4]
    781a:	f009 f81e 	bl	1085a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    781e:	f008 fdc3 	bl	103a8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    7822:	f7fb ff5f 	bl	36e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7826:	2001      	movs	r0, #1
    7828:	7020      	strb	r0, [r4, #0]
    782a:	bd10      	pop	{r4, pc}
    782c:	20000284 	.word	0x20000284

00007830 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    7830:	4801      	ldr	r0, [pc, #4]	; (7838 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    7832:	7800      	ldrb	r0, [r0, #0]
    7834:	4770      	bx	lr
    7836:	0000      	.short	0x0000
    7838:	20000284 	.word	0x20000284

0000783c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    783c:	b510      	push	{r4, lr}
    783e:	4c06      	ldr	r4, [pc, #24]	; (7858 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    7840:	68a0      	ldr	r0, [r4, #8]
    7842:	f009 f80a 	bl	1085a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    7846:	68e0      	ldr	r0, [r4, #12]
    7848:	f009 f807 	bl	1085a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    784c:	f008 fe11 	bl	10472 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    7850:	2000      	movs	r0, #0
    7852:	7020      	strb	r0, [r4, #0]
    7854:	bd10      	pop	{r4, pc}
    7856:	0000      	.short	0x0000
    7858:	20000284 	.word	0x20000284

0000785c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    785c:	b510      	push	{r4, lr}
    785e:	4905      	ldr	r1, [pc, #20]	; (7874 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    7860:	4805      	ldr	r0, [pc, #20]	; (7878 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7862:	f008 ffed 	bl	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    7866:	4804      	ldr	r0, [pc, #16]	; (7878 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    786c:	4903      	ldr	r1, [pc, #12]	; (787c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    786e:	1d00      	adds	r0, r0, #4
    7870:	f008 bfe6 	b.w	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    7874:	20000294 	.word	0x20000294
    7878:	20000288 	.word	0x20000288
    787c:	2000029c 	.word	0x2000029c

00007880 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    7880:	b510      	push	{r4, lr}
    7882:	4908      	ldr	r1, [pc, #32]	; (78a4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    7884:	4808      	ldr	r0, [pc, #32]	; (78a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7886:	f008 ffdb 	bl	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    788a:	4807      	ldr	r0, [pc, #28]	; (78a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    788c:	4907      	ldr	r1, [pc, #28]	; (78ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    788e:	1d00      	adds	r0, r0, #4
    7890:	f008 ffd6 	bl	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    7894:	4804      	ldr	r0, [pc, #16]	; (78a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    789a:	4905      	ldr	r1, [pc, #20]	; (78b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    789c:	3008      	adds	r0, #8
    789e:	f008 bfcf 	b.w	10840 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    78a2:	0000      	.short	0x0000
    78a4:	200002ac 	.word	0x200002ac
    78a8:	20000288 	.word	0x20000288
    78ac:	200002b4 	.word	0x200002b4
    78b0:	200002a4 	.word	0x200002a4

000078b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    78b4:	4801      	ldr	r0, [pc, #4]	; (78bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    78b6:	7840      	ldrb	r0, [r0, #1]
    78b8:	4770      	bx	lr
    78ba:	0000      	.short	0x0000
    78bc:	20000284 	.word	0x20000284
    78c0:	b510      	push	{r4, lr}
    78c2:	f7fc fa4b 	bl	3d5c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    78c6:	f7fd f8f5 	bl	4ab4 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    78ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78ce:	4801      	ldr	r0, [pc, #4]	; (78d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    78d0:	f7fc ba2a 	b.w	3d28 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    78d4:	20001681 	.word	0x20001681
    78d8:	490a      	ldr	r1, [pc, #40]	; (7904 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    78da:	b510      	push	{r4, lr}
    78dc:	2001      	movs	r0, #1
    78de:	7048      	strb	r0, [r1, #1]
    78e0:	f7fc fa6c 	bl	3dbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    78e4:	f7fd fdc2 	bl	546c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    78e8:	f006 f93e 	bl	db68 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    78ec:	4906      	ldr	r1, [pc, #24]	; (7908 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    78ee:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    78f2:	f7fa fc41 	bl	2178 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    78f6:	2000      	movs	r0, #0
    78f8:	f005 ff66 	bl	d7c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    78fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7900:	f7fb bdbc 	b.w	347c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7904:	20000284 	.word	0x20000284
    7908:	20001783 	.word	0x20001783

0000790c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    790c:	4a04      	ldr	r2, [pc, #16]	; (7920 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    790e:	08c1      	lsrs	r1, r0, #3
    7910:	f000 0307 	and.w	r3, r0, #7
    7914:	2001      	movs	r0, #1
    7916:	4098      	lsls	r0, r3
    7918:	5c53      	ldrb	r3, [r2, r1]
    791a:	4303      	orrs	r3, r0
    791c:	5453      	strb	r3, [r2, r1]
    791e:	4770      	bx	lr
    7920:	20000020 	.word	0x20000020

00007924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7924:	4901      	ldr	r1, [pc, #4]	; (792c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7926:	e9d1 0100 	ldrd	r0, r1, [r1]
    792a:	4770      	bx	lr
    792c:	20000020 	.word	0x20000020

00007930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7930:	4806      	ldr	r0, [pc, #24]	; (794c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7932:	8801      	ldrh	r1, [r0, #0]
    7934:	7900      	ldrb	r0, [r0, #4]
    7936:	0602      	lsls	r2, r0, #24
    7938:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    793c:	f000 0001 	and.w	r0, r0, #1
    7940:	1800      	adds	r0, r0, r0
    7942:	b2c0      	uxtb	r0, r0
    7944:	f040 0001 	orr.w	r0, r0, #1
    7948:	4770      	bx	lr
    794a:	0000      	.short	0x0000
    794c:	20000020 	.word	0x20000020

00007950 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7950:	b510      	push	{r4, lr}
    7952:	f004 fc97 	bl	c284 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7956:	2200      	movs	r2, #0
    7958:	4b08      	ldr	r3, [pc, #32]	; (797c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    795a:	4611      	mov	r1, r2
    795c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7960:	4284      	cmp	r4, r0
    7962:	d303      	bcc.n	796c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7964:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7968:	7882      	ldrb	r2, [r0, #2]
    796a:	e003      	b.n	7974 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    796c:	1c49      	adds	r1, r1, #1
    796e:	b2c9      	uxtb	r1, r1
    7970:	290c      	cmp	r1, #12
    7972:	d3f3      	bcc.n	795c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7974:	4802      	ldr	r0, [pc, #8]	; (7980 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7976:	7002      	strb	r2, [r0, #0]
    7978:	bd10      	pop	{r4, pc}
    797a:	0000      	.short	0x0000
    797c:	000108ac 	.word	0x000108ac
    7980:	2000036f 	.word	0x2000036f

00007984 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7984:	b570      	push	{r4, r5, r6, lr}
    7986:	4605      	mov	r5, r0
    7988:	4616      	mov	r6, r2
    798a:	460c      	mov	r4, r1
    798c:	2002      	movs	r0, #2
    798e:	f000 f9b7 	bl	7d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7992:	4906      	ldr	r1, [pc, #24]	; (79ac <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7994:	2001      	movs	r0, #1
    7996:	1ef6      	subs	r6, r6, #3
    7998:	7008      	strb	r0, [r1, #0]
    799a:	4805      	ldr	r0, [pc, #20]	; (79b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    799c:	6006      	str	r6, [r0, #0]
    799e:	4804      	ldr	r0, [pc, #16]	; (79b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    79a0:	3808      	subs	r0, #8
    79a2:	6005      	str	r5, [r0, #0]
    79a4:	1f00      	subs	r0, r0, #4
    79a6:	6004      	str	r4, [r0, #0]
    79a8:	bd70      	pop	{r4, r5, r6, pc}
    79aa:	0000      	.short	0x0000
    79ac:	20000370 	.word	0x20000370
    79b0:	4000f510 	.word	0x4000f510

000079b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    79b4:	b510      	push	{r4, lr}
    79b6:	4c0c      	ldr	r4, [pc, #48]	; (79e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    79b8:	7820      	ldrb	r0, [r4, #0]
    79ba:	b180      	cbz	r0, 79de <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    79bc:	490b      	ldr	r1, [pc, #44]	; (79ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    79be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    79c2:	6008      	str	r0, [r1, #0]
    79c4:	f000 f86a 	bl	7a9c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    79c8:	2100      	movs	r1, #0
    79ca:	b120      	cbz	r0, 79d6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    79cc:	2001      	movs	r0, #1
    79ce:	7060      	strb	r0, [r4, #1]
    79d0:	4807      	ldr	r0, [pc, #28]	; (79f0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    79d2:	6800      	ldr	r0, [r0, #0]
    79d4:	e001      	b.n	79da <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    79d6:	7061      	strb	r1, [r4, #1]
    79d8:	2010      	movs	r0, #16
    79da:	70a0      	strb	r0, [r4, #2]
    79dc:	7021      	strb	r1, [r4, #0]
    79de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79e2:	2000      	movs	r0, #0
    79e4:	f000 b98c 	b.w	7d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    79e8:	20000370 	.word	0x20000370
    79ec:	4001f508 	.word	0x4001f508
    79f0:	4000f400 	.word	0x4000f400

000079f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    79f4:	b510      	push	{r4, lr}
    79f6:	2002      	movs	r0, #2
    79f8:	f000 f982 	bl	7d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    79fc:	4904      	ldr	r1, [pc, #16]	; (7a10 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    79fe:	2001      	movs	r0, #1
    7a00:	7008      	strb	r0, [r1, #0]
    7a02:	f000 f859 	bl	7ab8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7a06:	4903      	ldr	r1, [pc, #12]	; (7a14 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7a08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7a0c:	6008      	str	r0, [r1, #0]
    7a0e:	bd10      	pop	{r4, pc}
    7a10:	20000370 	.word	0x20000370
    7a14:	4001f504 	.word	0x4001f504

00007a18 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7a18:	4803      	ldr	r0, [pc, #12]	; (7a28 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7a1a:	2100      	movs	r1, #0
    7a1c:	7001      	strb	r1, [r0, #0]
    7a1e:	7041      	strb	r1, [r0, #1]
    7a20:	2110      	movs	r1, #16
    7a22:	7081      	strb	r1, [r0, #2]
    7a24:	4770      	bx	lr
    7a26:	0000      	.short	0x0000
    7a28:	20000370 	.word	0x20000370

00007a2c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7a2c:	4807      	ldr	r0, [pc, #28]	; (7a4c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7a2e:	b510      	push	{r4, lr}
    7a30:	7801      	ldrb	r1, [r0, #0]
    7a32:	b141      	cbz	r1, 7a46 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7a34:	f000 f832 	bl	7a9c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7a38:	b118      	cbz	r0, 7a42 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7a3a:	4805      	ldr	r0, [pc, #20]	; (7a50 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7a3c:	6800      	ldr	r0, [r0, #0]
    7a3e:	b2c0      	uxtb	r0, r0
    7a40:	bd10      	pop	{r4, pc}
    7a42:	2010      	movs	r0, #16
    7a44:	bd10      	pop	{r4, pc}
    7a46:	7880      	ldrb	r0, [r0, #2]
    7a48:	bd10      	pop	{r4, pc}
    7a4a:	0000      	.short	0x0000
    7a4c:	20000370 	.word	0x20000370
    7a50:	4000f400 	.word	0x4000f400

00007a54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7a54:	4808      	ldr	r0, [pc, #32]	; (7a78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7a56:	b510      	push	{r4, lr}
    7a58:	7801      	ldrb	r1, [r0, #0]
    7a5a:	b159      	cbz	r1, 7a74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7a5c:	4807      	ldr	r0, [pc, #28]	; (7a7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7a5e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7a62:	b128      	cbz	r0, 7a70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7a64:	f000 f80c 	bl	7a80 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7a68:	2800      	cmp	r0, #0
    7a6a:	d000      	beq.n	7a6e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7a6c:	2001      	movs	r0, #1
    7a6e:	bd10      	pop	{r4, pc}
    7a70:	2002      	movs	r0, #2
    7a72:	bd10      	pop	{r4, pc}
    7a74:	7840      	ldrb	r0, [r0, #1]
    7a76:	bd10      	pop	{r4, pc}
    7a78:	20000370 	.word	0x20000370
    7a7c:	4000f000 	.word	0x4000f000
    7a80:	4805      	ldr	r0, [pc, #20]	; (7a98 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7a82:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7a86:	b111      	cbz	r1, 7a8e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7a88:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7a8c:	b108      	cbz	r0, 7a92 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7a8e:	2000      	movs	r0, #0
    7a90:	4770      	bx	lr
    7a92:	2001      	movs	r0, #1
    7a94:	4770      	bx	lr
    7a96:	0000      	.short	0x0000
    7a98:	4000f000 	.word	0x4000f000
    7a9c:	4805      	ldr	r0, [pc, #20]	; (7ab4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7a9e:	b510      	push	{r4, lr}
    7aa0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7aa4:	b120      	cbz	r0, 7ab0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7aa6:	f7ff ffeb 	bl	7a80 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7aaa:	b108      	cbz	r0, 7ab0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7aac:	2001      	movs	r0, #1
    7aae:	bd10      	pop	{r4, pc}
    7ab0:	2000      	movs	r0, #0
    7ab2:	bd10      	pop	{r4, pc}
    7ab4:	4000f000 	.word	0x4000f000
    7ab8:	4804      	ldr	r0, [pc, #16]	; (7acc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7aba:	2100      	movs	r1, #0
    7abc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7ac0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7ac4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7ac8:	4770      	bx	lr
    7aca:	0000      	.short	0x0000
    7acc:	4000f000 	.word	0x4000f000

00007ad0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ad4:	4604      	mov	r4, r0
    7ad6:	461e      	mov	r6, r3
    7ad8:	4690      	mov	r8, r2
    7ada:	460f      	mov	r7, r1
    7adc:	2001      	movs	r0, #1
    7ade:	f000 f90f 	bl	7d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7ae2:	4d1e      	ldr	r5, [pc, #120]	; (7b5c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7ae4:	481e      	ldr	r0, [pc, #120]	; (7b60 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7ae6:	f004 0103 	and.w	r1, r4, #3
    7aea:	712e      	strb	r6, [r5, #4]
    7aec:	6800      	ldr	r0, [r0, #0]
    7aee:	0432      	lsls	r2, r6, #16
    7af0:	f361 0007 	bfi	r0, r1, #0, #8
    7af4:	f366 200f 	bfi	r0, r6, #8, #8
    7af8:	0c00      	lsrs	r0, r0, #16
    7afa:	4e1a      	ldr	r6, [pc, #104]	; (7b64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7afc:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7b00:	4308      	orrs	r0, r1
    7b02:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7b06:	4818      	ldr	r0, [pc, #96]	; (7b68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7b08:	6007      	str	r7, [r0, #0]
    7b0a:	f009 f8c6 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7b0e:	b938      	cbnz	r0, 7b20 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7b10:	4815      	ldr	r0, [pc, #84]	; (7b68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7b12:	3010      	adds	r0, #16
    7b14:	6801      	ldr	r1, [r0, #0]
    7b16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7b1a:	ea41 0108 	orr.w	r1, r1, r8
    7b1e:	6001      	str	r1, [r0, #0]
    7b20:	f000 f8e4 	bl	7cec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7b24:	b10c      	cbz	r4, 7b2a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7b26:	2c04      	cmp	r4, #4
    7b28:	d107      	bne.n	7b3a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7b2a:	4811      	ldr	r0, [pc, #68]	; (7b70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7b2c:	490d      	ldr	r1, [pc, #52]	; (7b64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7b2e:	4a0f      	ldr	r2, [pc, #60]	; (7b6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7b30:	1d09      	adds	r1, r1, #4
    7b32:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7b36:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7b3a:	2001      	movs	r0, #1
    7b3c:	7068      	strb	r0, [r5, #1]
    7b3e:	70ec      	strb	r4, [r5, #3]
    7b40:	b11c      	cbz	r4, 7b4a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7b42:	2c01      	cmp	r4, #1
    7b44:	d001      	beq.n	7b4a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7b46:	2c02      	cmp	r4, #2
    7b48:	d106      	bne.n	7b58 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7b4a:	7028      	strb	r0, [r5, #0]
    7b4c:	2100      	movs	r1, #0
    7b4e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7b52:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7b56:	6030      	str	r0, [r6, #0]
    7b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b5c:	20000373 	.word	0x20000373
    7b60:	00007cfc 	.word	0x00007cfc
    7b64:	4000f000 	.word	0x4000f000
    7b68:	4000f508 	.word	0x4000f508
    7b6c:	4000f100 	.word	0x4000f100
    7b70:	4001f088 	.word	0x4001f088

00007b74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7b74:	b570      	push	{r4, r5, r6, lr}
    7b76:	4a1c      	ldr	r2, [pc, #112]	; (7be8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7b78:	7853      	ldrb	r3, [r2, #1]
    7b7a:	b1a3      	cbz	r3, 7ba6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7b7c:	4b1b      	ldr	r3, [pc, #108]	; (7bec <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7b7e:	6019      	str	r1, [r3, #0]
    7b80:	1d19      	adds	r1, r3, #4
    7b82:	6008      	str	r0, [r1, #0]
    7b84:	2501      	movs	r5, #1
    7b86:	7095      	strb	r5, [r2, #2]
    7b88:	4610      	mov	r0, r2
    7b8a:	78d6      	ldrb	r6, [r2, #3]
    7b8c:	4b18      	ldr	r3, [pc, #96]	; (7bf0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7b8e:	7800      	ldrb	r0, [r0, #0]
    7b90:	4c18      	ldr	r4, [pc, #96]	; (7bf4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7b92:	2100      	movs	r1, #0
    7b94:	b156      	cbz	r6, 7bac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7b96:	2e04      	cmp	r6, #4
    7b98:	d01b      	beq.n	7bd2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7b9a:	b308      	cbz	r0, 7be0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7b9c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ba0:	0668      	lsls	r0, r5, #25
    7ba2:	6018      	str	r0, [r3, #0]
    7ba4:	bd70      	pop	{r4, r5, r6, pc}
    7ba6:	f240 11bd 	movw	r1, #445	; 0x1bd
    7baa:	e01a      	b.n	7be2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7bac:	b178      	cbz	r0, 7bce <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7bae:	4620      	mov	r0, r4
    7bb0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7bb4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7bb8:	601e      	str	r6, [r3, #0]
    7bba:	1271      	asrs	r1, r6, #9
    7bbc:	f008 feee 	bl	1099c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d0ef      	beq.n	7ba4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7bc4:	6065      	str	r5, [r4, #4]
    7bc6:	480a      	ldr	r0, [pc, #40]	; (7bf0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7bc8:	1d00      	adds	r0, r0, #4
    7bca:	6006      	str	r6, [r0, #0]
    7bcc:	bd70      	pop	{r4, r5, r6, pc}
    7bce:	21b3      	movs	r1, #179	; 0xb3
    7bd0:	e007      	b.n	7be2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7bd2:	7015      	strb	r5, [r2, #0]
    7bd4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7bd8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7bdc:	6025      	str	r5, [r4, #0]
    7bde:	bd70      	pop	{r4, r5, r6, pc}
    7be0:	21c6      	movs	r1, #198	; 0xc6
    7be2:	203c      	movs	r0, #60	; 0x3c
    7be4:	f7f9 fbdc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7be8:	20000373 	.word	0x20000373
    7bec:	4000f50c 	.word	0x4000f50c
    7bf0:	4001f504 	.word	0x4001f504
    7bf4:	4000f000 	.word	0x4000f000

00007bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7bf8:	b570      	push	{r4, r5, r6, lr}
    7bfa:	4d05      	ldr	r5, [pc, #20]	; (7c10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7bfc:	2400      	movs	r4, #0
    7bfe:	7828      	ldrb	r0, [r5, #0]
    7c00:	b110      	cbz	r0, 7c08 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7c02:	f000 f873 	bl	7cec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7c06:	702c      	strb	r4, [r5, #0]
    7c08:	706c      	strb	r4, [r5, #1]
    7c0a:	70ac      	strb	r4, [r5, #2]
    7c0c:	bd70      	pop	{r4, r5, r6, pc}
    7c0e:	0000      	.short	0x0000
    7c10:	20000373 	.word	0x20000373

00007c14 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7c14:	4802      	ldr	r0, [pc, #8]	; (7c20 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7c16:	2100      	movs	r1, #0
    7c18:	7001      	strb	r1, [r0, #0]
    7c1a:	7041      	strb	r1, [r0, #1]
    7c1c:	7081      	strb	r1, [r0, #2]
    7c1e:	4770      	bx	lr
    7c20:	20000373 	.word	0x20000373

00007c24 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7c24:	480b      	ldr	r0, [pc, #44]	; (7c54 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7c26:	b510      	push	{r4, lr}
    7c28:	7800      	ldrb	r0, [r0, #0]
    7c2a:	b158      	cbz	r0, 7c44 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7c2c:	f44f 7182 	mov.w	r1, #260	; 0x104
    7c30:	4809      	ldr	r0, [pc, #36]	; (7c58 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7c32:	f008 feb3 	bl	1099c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7c36:	b140      	cbz	r0, 7c4a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7c38:	4808      	ldr	r0, [pc, #32]	; (7c5c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7c3a:	6800      	ldr	r0, [r0, #0]
    7c3c:	2800      	cmp	r0, #0
    7c3e:	d000      	beq.n	7c42 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7c40:	2001      	movs	r0, #1
    7c42:	bd10      	pop	{r4, pc}
    7c44:	f240 2123 	movw	r1, #547	; 0x223
    7c48:	e001      	b.n	7c4e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7c4a:	f44f 7109 	mov.w	r1, #548	; 0x224
    7c4e:	203c      	movs	r0, #60	; 0x3c
    7c50:	f7f9 fba6 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c54:	20000373 	.word	0x20000373
    7c58:	4000f000 	.word	0x4000f000
    7c5c:	4000f400 	.word	0x4000f400

00007c60 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7c60:	4801      	ldr	r0, [pc, #4]	; (7c68 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7c62:	2101      	movs	r1, #1
    7c64:	6081      	str	r1, [r0, #8]
    7c66:	4770      	bx	lr
    7c68:	4000f000 	.word	0x4000f000

00007c6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c70:	481b      	ldr	r0, [pc, #108]	; (7ce0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7c72:	7800      	ldrb	r0, [r0, #0]
    7c74:	b1d8      	cbz	r0, 7cae <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7c76:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7ce4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7c7a:	f44f 7682 	mov.w	r6, #260	; 0x104
    7c7e:	4631      	mov	r1, r6
    7c80:	4640      	mov	r0, r8
    7c82:	f008 fe8b 	bl	1099c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7c86:	2800      	cmp	r0, #0
    7c88:	d128      	bne.n	7cdc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7c8a:	2002      	movs	r0, #2
    7c8c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7c90:	4c15      	ldr	r4, [pc, #84]	; (7ce8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7c92:	6820      	ldr	r0, [r4, #0]
    7c94:	43c0      	mvns	r0, r0
    7c96:	f340 1500 	sbfx	r5, r0, #4, #1
    7c9a:	6820      	ldr	r0, [r4, #0]
    7c9c:	f040 0010 	orr.w	r0, r0, #16
    7ca0:	6020      	str	r0, [r4, #0]
    7ca2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7ca6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7caa:	1c6d      	adds	r5, r5, #1
    7cac:	e008      	b.n	7cc0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7cae:	f240 212f 	movw	r1, #559	; 0x22f
    7cb2:	203c      	movs	r0, #60	; 0x3c
    7cb4:	f7f9 fb74 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cb8:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7cbc:	f009 f82d 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7cc0:	4631      	mov	r1, r6
    7cc2:	4640      	mov	r0, r8
    7cc4:	f008 fe6a 	bl	1099c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7cc8:	2800      	cmp	r0, #0
    7cca:	d0f5      	beq.n	7cb8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7ccc:	b91d      	cbnz	r5, 7cd6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7cce:	6820      	ldr	r0, [r4, #0]
    7cd0:	f020 0010 	bic.w	r0, r0, #16
    7cd4:	6020      	str	r0, [r4, #0]
    7cd6:	2002      	movs	r0, #2
    7cd8:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ce0:	20000373 	.word	0x20000373
    7ce4:	4000f000 	.word	0x4000f000
    7ce8:	e000ed10 	.word	0xe000ed10
    7cec:	4902      	ldr	r1, [pc, #8]	; (7cf8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7cee:	4801      	ldr	r0, [pc, #4]	; (7cf4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7cf0:	6008      	str	r0, [r1, #0]
    7cf2:	4770      	bx	lr
    7cf4:	02020000 	.word	0x02020000
    7cf8:	4001f508 	.word	0x4001f508
    7cfc:	00010000 	.word	0x00010000

00007d00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7d00:	b510      	push	{r4, lr}
    7d02:	4604      	mov	r4, r0
    7d04:	f000 f820 	bl	7d48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7d08:	2c00      	cmp	r4, #0
    7d0a:	d00e      	beq.n	7d2a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7d0c:	4a0b      	ldr	r2, [pc, #44]	; (7d3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7d0e:	480b      	ldr	r0, [pc, #44]	; (7d3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7d10:	490b      	ldr	r1, [pc, #44]	; (7d40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7d12:	3214      	adds	r2, #20
    7d14:	2c01      	cmp	r4, #1
    7d16:	d005      	beq.n	7d24 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7d18:	2c02      	cmp	r4, #2
    7d1a:	d007      	beq.n	7d2c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7d1c:	2182      	movs	r1, #130	; 0x82
    7d1e:	203d      	movs	r0, #61	; 0x3d
    7d20:	f7f9 fb3e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d24:	2302      	movs	r3, #2
    7d26:	6003      	str	r3, [r0, #0]
    7d28:	6011      	str	r1, [r2, #0]
    7d2a:	bd10      	pop	{r4, pc}
    7d2c:	2303      	movs	r3, #3
    7d2e:	6003      	str	r3, [r0, #0]
    7d30:	6011      	str	r1, [r2, #0]
    7d32:	4904      	ldr	r1, [pc, #16]	; (7d44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7d34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7d38:	6008      	str	r0, [r1, #0]
    7d3a:	bd10      	pop	{r4, pc}
    7d3c:	4000f500 	.word	0x4000f500
    7d40:	20001885 	.word	0x20001885
    7d44:	4001f504 	.word	0x4001f504
    7d48:	4805      	ldr	r0, [pc, #20]	; (7d60 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7d4a:	b510      	push	{r4, lr}
    7d4c:	2100      	movs	r1, #0
    7d4e:	6001      	str	r1, [r0, #0]
    7d50:	6001      	str	r1, [r0, #0]
    7d52:	f7ff ff51 	bl	7bf8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7d56:	4903      	ldr	r1, [pc, #12]	; (7d64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7d58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7d5c:	6008      	str	r0, [r1, #0]
    7d5e:	bd10      	pop	{r4, pc}
    7d60:	4000f500 	.word	0x4000f500
    7d64:	4001f508 	.word	0x4001f508

00007d68 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7d68:	4805      	ldr	r0, [pc, #20]	; (7d80 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7d6a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7d6e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7d72:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7d76:	2100      	movs	r1, #0
    7d78:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7d7c:	4770      	bx	lr
    7d7e:	0000      	.short	0x0000
    7d80:	40001000 	.word	0x40001000

00007d84 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7d84:	4904      	ldr	r1, [pc, #16]	; (7d98 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7d86:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7d8a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7d8e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7d92:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7d96:	4770      	bx	lr
    7d98:	40001000 	.word	0x40001000

00007d9c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    7d9c:	4801      	ldr	r0, [pc, #4]	; (7da4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    7d9e:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    7da2:	4770      	bx	lr
    7da4:	20000fcc 	.word	0x20000fcc

00007da8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7da8:	4902      	ldr	r1, [pc, #8]	; (7db4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7daa:	5c08      	ldrb	r0, [r1, r0]
    7dac:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7db0:	4770      	bx	lr
    7db2:	0000      	.short	0x0000
    7db4:	00008afe 	.word	0x00008afe

00007db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dba:	4c24      	ldr	r4, [pc, #144]	; (7e4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7dbc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7dc0:	f010 0f10 	tst.w	r0, #16
    7dc4:	d001      	beq.n	7dca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7dc6:	2701      	movs	r7, #1
    7dc8:	e000      	b.n	7dcc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7dca:	2700      	movs	r7, #0
    7dcc:	2010      	movs	r0, #16
    7dce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7dd2:	2002      	movs	r0, #2
    7dd4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7dd8:	481d      	ldr	r0, [pc, #116]	; (7e50 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7dda:	2500      	movs	r5, #0
    7ddc:	491d      	ldr	r1, [pc, #116]	; (7e54 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7dde:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7de2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7de6:	6008      	str	r0, [r1, #0]
    7de8:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7dec:	f44f 7688 	mov.w	r6, #272	; 0x110
    7df0:	f010 0fff 	tst.w	r0, #255	; 0xff
    7df4:	d019      	beq.n	7e2a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7df6:	20ff      	movs	r0, #255	; 0xff
    7df8:	f88d 0000 	strb.w	r0, [sp]
    7dfc:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7e00:	2001      	movs	r0, #1
    7e02:	6120      	str	r0, [r4, #16]
    7e04:	e005      	b.n	7e12 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7e06:	bf00      	nop
    7e08:	f89d 0000 	ldrb.w	r0, [sp]
    7e0c:	1e40      	subs	r0, r0, #1
    7e0e:	f88d 0000 	strb.w	r0, [sp]
    7e12:	f89d 0000 	ldrb.w	r0, [sp]
    7e16:	b128      	cbz	r0, 7e24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7e18:	4631      	mov	r1, r6
    7e1a:	4620      	mov	r0, r4
    7e1c:	f008 fded 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7e20:	2800      	cmp	r0, #0
    7e22:	d0f1      	beq.n	7e08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7e24:	f89d 0000 	ldrb.w	r0, [sp]
    7e28:	b158      	cbz	r0, 7e42 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7e2a:	f000 fc57 	bl	86dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7e2e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7e32:	f000 fde5 	bl	8a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7e36:	2f00      	cmp	r7, #0
    7e38:	d002      	beq.n	7e40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7e3a:	2010      	movs	r0, #16
    7e3c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e42:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7e46:	203e      	movs	r0, #62	; 0x3e
    7e48:	f7f9 faaa 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e4c:	40001000 	.word	0x40001000
    7e50:	20000fcc 	.word	0x20000fcc
    7e54:	4001f508 	.word	0x4001f508

00007e58 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e5c:	4d18      	ldr	r5, [pc, #96]	; (7ec0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7e5e:	4607      	mov	r7, r0
    7e60:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7e64:	07c2      	lsls	r2, r0, #31
    7e66:	d00f      	beq.n	7e88 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7e68:	4c16      	ldr	r4, [pc, #88]	; (7ec4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7e6a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7e6e:	f042 0201 	orr.w	r2, r2, #1
    7e72:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7e76:	f040 0002 	orr.w	r0, r0, #2
    7e7a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7e7e:	2601      	movs	r6, #1
    7e80:	b13f      	cbz	r7, 7e92 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7e82:	2f01      	cmp	r7, #1
    7e84:	d00b      	beq.n	7e9e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7e86:	e010      	b.n	7eaa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7e88:	f240 7185 	movw	r1, #1925	; 0x785
    7e8c:	203e      	movs	r0, #62	; 0x3e
    7e8e:	f7f9 fa87 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e92:	4608      	mov	r0, r1
    7e94:	f000 fe0e 	bl	8ab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7e98:	726e      	strb	r6, [r5, #9]
    7e9a:	6026      	str	r6, [r4, #0]
    7e9c:	e005      	b.n	7eaa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7e9e:	4608      	mov	r0, r1
    7ea0:	f000 fdee 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7ea4:	2002      	movs	r0, #2
    7ea6:	7268      	strb	r0, [r5, #9]
    7ea8:	6066      	str	r6, [r4, #4]
    7eaa:	4807      	ldr	r0, [pc, #28]	; (7ec8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7eac:	64c6      	str	r6, [r0, #76]	; 0x4c
    7eae:	4806      	ldr	r0, [pc, #24]	; (7ec8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7eb0:	300c      	adds	r0, #12
    7eb2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7eb6:	4638      	mov	r0, r7
    7eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ebc:	f000 bd72 	b.w	89a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7ec0:	20000fcc 	.word	0x20000fcc
    7ec4:	40001000 	.word	0x40001000
    7ec8:	40008000 	.word	0x40008000

00007ecc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ed0:	4c2c      	ldr	r4, [pc, #176]	; (7f84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7ed2:	0006      	movs	r6, r0
    7ed4:	4d2c      	ldr	r5, [pc, #176]	; (7f88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7ed6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7eda:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7f8c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7ede:	f040 0002 	orr.w	r0, r0, #2
    7ee2:	4689      	mov	r9, r1
    7ee4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7ee8:	f04f 0700 	mov.w	r7, #0
    7eec:	d002      	beq.n	7ef4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7eee:	2e01      	cmp	r6, #1
    7ef0:	d020      	beq.n	7f34 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7ef2:	e036      	b.n	7f62 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7ef4:	4608      	mov	r0, r1
    7ef6:	f000 fddd 	bl	8ab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7efa:	2001      	movs	r0, #1
    7efc:	7260      	strb	r0, [r4, #9]
    7efe:	79e0      	ldrb	r0, [r4, #7]
    7f00:	2801      	cmp	r0, #1
    7f02:	d105      	bne.n	7f10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7f04:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7f08:	f040 0008 	orr.w	r0, r0, #8
    7f0c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7f10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7f12:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7f16:	62a0      	str	r0, [r4, #40]	; 0x28
    7f18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7f1c:	f8c8 0000 	str.w	r0, [r8]
    7f20:	491b      	ldr	r1, [pc, #108]	; (7f90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7f22:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7f26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7f2a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7f2e:	fbb0 f7f1 	udiv	r7, r0, r1
    7f32:	e016      	b.n	7f62 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7f34:	4608      	mov	r0, r1
    7f36:	f000 fda3 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7f3a:	2002      	movs	r0, #2
    7f3c:	7260      	strb	r0, [r4, #9]
    7f3e:	79e0      	ldrb	r0, [r4, #7]
    7f40:	2801      	cmp	r0, #1
    7f42:	d105      	bne.n	7f50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7f44:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7f48:	f040 0004 	orr.w	r0, r0, #4
    7f4c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7f50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7f52:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7f56:	62a0      	str	r0, [r4, #40]	; 0x28
    7f58:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7f5c:	f8c8 0000 	str.w	r0, [r8]
    7f60:	2729      	movs	r7, #41	; 0x29
    7f62:	f000 fc27 	bl	87b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7f66:	f008 fd90 	bl	10a8a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7f6a:	b120      	cbz	r0, 7f76 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7f6c:	f7ff ff24 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f70:	2000      	movs	r0, #0
    7f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f76:	2100      	movs	r1, #0
    7f78:	4630      	mov	r0, r6
    7f7a:	f000 fd13 	bl	89a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7f7e:	4638      	mov	r0, r7
    7f80:	e7f7      	b.n	7f72 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7f82:	0000      	.short	0x0000
    7f84:	20000fcc 	.word	0x20000fcc
    7f88:	40001000 	.word	0x40001000
    7f8c:	4001f504 	.word	0x4001f504
    7f90:	00008af8 	.word	0x00008af8

00007f94 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    7f94:	4a02      	ldr	r2, [pc, #8]	; (7fa0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    7f96:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7f98:	6003      	str	r3, [r0, #0]
    7f9a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    7f9c:	6008      	str	r0, [r1, #0]
    7f9e:	4770      	bx	lr
    7fa0:	20000fcc 	.word	0x20000fcc

00007fa4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7fa4:	b510      	push	{r4, lr}
    7fa6:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7fa8:	4901      	ldr	r1, [pc, #4]	; (7fb0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7faa:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7fae:	bd10      	pop	{r4, pc}
    7fb0:	20000fbc 	.word	0x20000fbc

00007fb4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    7fb4:	490f      	ldr	r1, [pc, #60]	; (7ff4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    7fb6:	b510      	push	{r4, lr}
    7fb8:	69ca      	ldr	r2, [r1, #28]
    7fba:	4282      	cmp	r2, r0
    7fbc:	d302      	bcc.n	7fc4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    7fbe:	f640 113a 	movw	r1, #2362	; 0x93a
    7fc2:	e00b      	b.n	7fdc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    7fc4:	2201      	movs	r2, #1
    7fc6:	730a      	strb	r2, [r1, #12]
    7fc8:	6108      	str	r0, [r1, #16]
    7fca:	490b      	ldr	r1, [pc, #44]	; (7ff8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7fcc:	644a      	str	r2, [r1, #68]	; 0x44
    7fce:	1d0a      	adds	r2, r1, #4
    7fd0:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    7fd4:	4283      	cmp	r3, r0
    7fd6:	d304      	bcc.n	7fe2 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    7fd8:	f640 1143 	movw	r1, #2371	; 0x943
    7fdc:	203e      	movs	r0, #62	; 0x3e
    7fde:	f7f9 f9df 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fe2:	2300      	movs	r3, #0
    7fe4:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    7fe8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ff0:	f000 bcac 	b.w	894c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    7ff4:	20000fcc 	.word	0x20000fcc
    7ff8:	40008000 	.word	0x40008000

00007ffc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7ffc:	b570      	push	{r4, r5, r6, lr}
    7ffe:	4c0f      	ldr	r4, [pc, #60]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    8000:	4603      	mov	r3, r0
    8002:	2002      	movs	r0, #2
    8004:	7320      	strb	r0, [r4, #12]
    8006:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    800a:	2096      	movs	r0, #150	; 0x96
    800c:	f894 1020 	ldrb.w	r1, [r4, #32]
    8010:	7d22      	ldrb	r2, [r4, #20]
    8012:	2d01      	cmp	r5, #1
    8014:	d00e      	beq.n	8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    8016:	f000 fdab 	bl	8b70 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    801a:	6120      	str	r0, [r4, #16]
    801c:	4808      	ldr	r0, [pc, #32]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    801e:	2100      	movs	r1, #0
    8020:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    8024:	6921      	ldr	r1, [r4, #16]
    8026:	69e0      	ldr	r0, [r4, #28]
    8028:	4408      	add	r0, r1
    802a:	4905      	ldr	r1, [pc, #20]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    802c:	1d09      	adds	r1, r1, #4
    802e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8032:	bd70      	pop	{r4, r5, r6, pc}
    8034:	f000 fdba 	bl	8bac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    8038:	e7ef      	b.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    803a:	0000      	.short	0x0000
    803c:	20000fcc 	.word	0x20000fcc
    8040:	40008000 	.word	0x40008000

00008044 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    8044:	b510      	push	{r4, lr}
    8046:	f008 fe44 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    804a:	2800      	cmp	r0, #0
    804c:	d006      	beq.n	805c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    804e:	4804      	ldr	r0, [pc, #16]	; (8060 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    8050:	6801      	ldr	r1, [r0, #0]
    8052:	f021 0101 	bic.w	r1, r1, #1
    8056:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    805a:	6001      	str	r1, [r0, #0]
    805c:	bd10      	pop	{r4, pc}
    805e:	0000      	.short	0x0000
    8060:	40001774 	.word	0x40001774

00008064 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    8064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8068:	2238      	movs	r2, #56	; 0x38
    806a:	2100      	movs	r1, #0
    806c:	4813      	ldr	r0, [pc, #76]	; (80bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    806e:	f008 ff19 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8072:	f000 fcc5 	bl	8a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8076:	f008 fde5 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    807a:	4d11      	ldr	r5, [pc, #68]	; (80c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    807c:	4e10      	ldr	r6, [pc, #64]	; (80c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    807e:	2400      	movs	r4, #0
    8080:	4f0f      	ldr	r7, [pc, #60]	; (80c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8082:	3508      	adds	r5, #8
    8084:	3610      	adds	r6, #16
    8086:	b928      	cbnz	r0, 8094 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8088:	f008 fdf3 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    808c:	b910      	cbnz	r0, 8094 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    808e:	f008 fdfa 	bl	10c86 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8092:	b108      	cbz	r0, 8098 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    8094:	2224      	movs	r2, #36	; 0x24
    8096:	e006      	b.n	80a6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8098:	f008 fe35 	bl	10d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    809c:	b910      	cbnz	r0, 80a4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    809e:	f008 fe28 	bl	10cf2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    80a2:	b140      	cbz	r0, 80b6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    80a4:	2240      	movs	r2, #64	; 0x40
    80a6:	21ff      	movs	r1, #255	; 0xff
    80a8:	4638      	mov	r0, r7
    80aa:	f008 fefb 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80ae:	602c      	str	r4, [r5, #0]
    80b0:	6034      	str	r4, [r6, #0]
    80b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80b6:	2238      	movs	r2, #56	; 0x38
    80b8:	e7f5      	b.n	80a6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    80ba:	0000      	.short	0x0000
    80bc:	20000fcc 	.word	0x20000fcc
    80c0:	40000e00 	.word	0x40000e00

000080c4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    80c4:	4801      	ldr	r0, [pc, #4]	; (80cc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    80c6:	69c0      	ldr	r0, [r0, #28]
    80c8:	4770      	bx	lr
    80ca:	0000      	.short	0x0000
    80cc:	20000fcc 	.word	0x20000fcc

000080d0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    80d0:	4801      	ldr	r0, [pc, #4]	; (80d8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    80d2:	6980      	ldr	r0, [r0, #24]
    80d4:	4770      	bx	lr
    80d6:	0000      	.short	0x0000
    80d8:	20000fcc 	.word	0x20000fcc

000080dc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    80dc:	b510      	push	{r4, lr}
    80de:	f000 fc43 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    80e2:	f7ff fe69 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    80e6:	f004 fb69 	bl	c7bc <mpsl_fem_disable>
    80ea:	b130      	cbz	r0, 80fa <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    80ec:	1c40      	adds	r0, r0, #1
    80ee:	d004      	beq.n	80fa <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    80f0:	f240 516d 	movw	r1, #1389	; 0x56d
    80f4:	203e      	movs	r0, #62	; 0x3e
    80f6:	f7f9 f953 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80fa:	480f      	ldr	r0, [pc, #60]	; (8138 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    80fc:	4a0f      	ldr	r2, [pc, #60]	; (813c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    80fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8100:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    8104:	6011      	str	r1, [r2, #0]
    8106:	2400      	movs	r4, #0
    8108:	6284      	str	r4, [r0, #40]	; 0x28
    810a:	7304      	strb	r4, [r0, #12]
    810c:	61c4      	str	r4, [r0, #28]
    810e:	6184      	str	r4, [r0, #24]
    8110:	f000 fc2a 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    8114:	480a      	ldr	r0, [pc, #40]	; (8140 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    8116:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    811a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    811e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    8122:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    8126:	2001      	movs	r0, #1
    8128:	f008 fc56 	bl	109d8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    812c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8130:	2001      	movs	r0, #1
    8132:	f008 bc44 	b.w	109be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8136:	0000      	.short	0x0000
    8138:	20000fcc 	.word	0x20000fcc
    813c:	4001f508 	.word	0x4001f508
    8140:	40008000 	.word	0x40008000

00008144 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    8144:	b570      	push	{r4, r5, r6, lr}
    8146:	2001      	movs	r0, #1
    8148:	f008 fc46 	bl	109d8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    814c:	4c37      	ldr	r4, [pc, #220]	; (822c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    814e:	2000      	movs	r0, #0
    8150:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    8154:	2001      	movs	r0, #1
    8156:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    815a:	f008 fdaa 	bl	10cb2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    815e:	4d34      	ldr	r5, [pc, #208]	; (8230 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8160:	b118      	cbz	r0, 816a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    8162:	6828      	ldr	r0, [r5, #0]
    8164:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    8168:	6028      	str	r0, [r5, #0]
    816a:	f008 fd96 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    816e:	b128      	cbz	r0, 817c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    8170:	6828      	ldr	r0, [r5, #0]
    8172:	4930      	ldr	r1, [pc, #192]	; (8234 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    8174:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    8178:	4308      	orrs	r0, r1
    817a:	6028      	str	r0, [r5, #0]
    817c:	f008 fda9 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8180:	b138      	cbz	r0, 8192 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    8182:	482b      	ldr	r0, [pc, #172]	; (8230 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8184:	1d00      	adds	r0, r0, #4
    8186:	6801      	ldr	r1, [r0, #0]
    8188:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    818c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8190:	6001      	str	r1, [r0, #0]
    8192:	4927      	ldr	r1, [pc, #156]	; (8230 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8194:	4828      	ldr	r0, [pc, #160]	; (8238 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    8196:	313c      	adds	r1, #60	; 0x3c
    8198:	6008      	str	r0, [r1, #0]
    819a:	f004 fb49 	bl	c830 <mpsl_fem_device_config_254_apply_get>
    819e:	b140      	cbz	r0, 81b2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    81a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    81a4:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    81a8:	1c41      	adds	r1, r0, #1
    81aa:	d002      	beq.n	81b2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    81ac:	4920      	ldr	r1, [pc, #128]	; (8230 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81ae:	3110      	adds	r1, #16
    81b0:	6008      	str	r0, [r1, #0]
    81b2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    81b6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    81b8:	1c41      	adds	r1, r0, #1
    81ba:	d004      	beq.n	81c6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    81bc:	491f      	ldr	r1, [pc, #124]	; (823c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    81be:	680a      	ldr	r2, [r1, #0]
    81c0:	f360 4217 	bfi	r2, r0, #16, #8
    81c4:	600a      	str	r2, [r1, #0]
    81c6:	f240 1103 	movw	r1, #259	; 0x103
    81ca:	f240 605b 	movw	r0, #1627	; 0x65b
    81ce:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    81d2:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    81d6:	2001      	movs	r0, #1
    81d8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    81dc:	f000 f842 	bl	8264 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    81e0:	f240 2001 	movw	r0, #513	; 0x201
    81e4:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    81e8:	2002      	movs	r0, #2
    81ea:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    81ee:	4914      	ldr	r1, [pc, #80]	; (8240 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    81f0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    81f4:	6008      	str	r0, [r1, #0]
    81f6:	4913      	ldr	r1, [pc, #76]	; (8244 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    81f8:	2000      	movs	r0, #0
    81fa:	4d13      	ldr	r5, [pc, #76]	; (8248 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    81fc:	8608      	strh	r0, [r1, #48]	; 0x30
    81fe:	3110      	adds	r1, #16
    8200:	61c8      	str	r0, [r1, #28]
    8202:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    8206:	7028      	strb	r0, [r5, #0]
    8208:	2001      	movs	r0, #1
    820a:	f008 fbd8 	bl	109be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    820e:	2010      	movs	r0, #16
    8210:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8214:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8218:	2002      	movs	r0, #2
    821a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    821e:	6868      	ldr	r0, [r5, #4]
    8220:	2800      	cmp	r0, #0
    8222:	d002      	beq.n	822a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    8224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8228:	4700      	bx	r0
    822a:	bd70      	pop	{r4, r5, r6, pc}
    822c:	40001000 	.word	0x40001000
    8230:	4000173c 	.word	0x4000173c
    8234:	80000096 	.word	0x80000096
    8238:	8900002c 	.word	0x8900002c
    823c:	4000158c 	.word	0x4000158c
    8240:	4001f504 	.word	0x4001f504
    8244:	20000fbc 	.word	0x20000fbc
    8248:	200002bc 	.word	0x200002bc

0000824c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    824c:	4901      	ldr	r1, [pc, #4]	; (8254 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    824e:	7548      	strb	r0, [r1, #21]
    8250:	4770      	bx	lr
    8252:	0000      	.short	0x0000
    8254:	20000fcc 	.word	0x20000fcc

00008258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    8258:	4901      	ldr	r1, [pc, #4]	; (8260 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    825a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    825e:	4770      	bx	lr
    8260:	00008b4c 	.word	0x00008b4c

00008264 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    8264:	4908      	ldr	r1, [pc, #32]	; (8288 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    8266:	b510      	push	{r4, lr}
    8268:	7508      	strb	r0, [r1, #20]
    826a:	4908      	ldr	r1, [pc, #32]	; (828c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    826c:	2801      	cmp	r0, #1
    826e:	d006      	beq.n	827e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    8270:	2802      	cmp	r0, #2
    8272:	d006      	beq.n	8282 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    8274:	f640 5186 	movw	r1, #3462	; 0xd86
    8278:	203e      	movs	r0, #62	; 0x3e
    827a:	f7f9 f891 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    827e:	2003      	movs	r0, #3
    8280:	e000      	b.n	8284 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    8282:	2004      	movs	r0, #4
    8284:	6008      	str	r0, [r1, #0]
    8286:	bd10      	pop	{r4, pc}
    8288:	20000fcc 	.word	0x20000fcc
    828c:	40001510 	.word	0x40001510

00008290 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8290:	4905      	ldr	r1, [pc, #20]	; (82a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8292:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    8296:	4805      	ldr	r0, [pc, #20]	; (82ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    8298:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    829c:	f041 0101 	orr.w	r1, r1, #1
    82a0:	7001      	strb	r1, [r0, #0]
    82a2:	f000 ba4d 	b.w	8740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    82a6:	0000      	.short	0x0000
    82a8:	40001000 	.word	0x40001000
    82ac:	20000fcc 	.word	0x20000fcc

000082b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    82b0:	4901      	ldr	r1, [pc, #4]	; (82b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    82b2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    82b6:	4770      	bx	lr
    82b8:	00008b58 	.word	0x00008b58

000082bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    82bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82c0:	4e30      	ldr	r6, [pc, #192]	; (8384 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    82c2:	4c31      	ldr	r4, [pc, #196]	; (8388 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    82c4:	4688      	mov	r8, r1
    82c6:	0007      	movs	r7, r0
    82c8:	4615      	mov	r5, r2
    82ca:	f04f 0901 	mov.w	r9, #1
    82ce:	d006      	beq.n	82de <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    82d0:	2f01      	cmp	r7, #1
    82d2:	d012      	beq.n	82fa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    82d4:	f640 012d 	movw	r1, #2093	; 0x82d
    82d8:	203e      	movs	r0, #62	; 0x3e
    82da:	f7f9 f861 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82de:	4610      	mov	r0, r2
    82e0:	f000 fbe8 	bl	8ab4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    82e4:	4829      	ldr	r0, [pc, #164]	; (838c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    82e6:	f884 9009 	strb.w	r9, [r4, #9]
    82ea:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    82ee:	4640      	mov	r0, r8
    82f0:	f000 fb8e 	bl	8a10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    82f4:	4605      	mov	r5, r0
    82f6:	4630      	mov	r0, r6
    82f8:	e00c      	b.n	8314 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    82fa:	4610      	mov	r0, r2
    82fc:	f000 fbc0 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8300:	2002      	movs	r0, #2
    8302:	7260      	strb	r0, [r4, #9]
    8304:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8308:	4640      	mov	r0, r8
    830a:	f000 fb81 	bl	8a10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    830e:	4605      	mov	r5, r0
    8310:	481c      	ldr	r0, [pc, #112]	; (8384 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8312:	1d00      	adds	r0, r0, #4
    8314:	f000 fb3a 	bl	898c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    8318:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8390 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    831c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8320:	f8df a074 	ldr.w	sl, [pc, #116]	; 8398 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8324:	481b      	ldr	r0, [pc, #108]	; (8394 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    8326:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    832a:	2010      	movs	r0, #16
    832c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8330:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8332:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    8336:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    833a:	62a0      	str	r0, [r4, #40]	; 0x28
    833c:	4817      	ldr	r0, [pc, #92]	; (839c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    833e:	6006      	str	r6, [r0, #0]
    8340:	f000 fa38 	bl	87b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    8344:	4641      	mov	r1, r8
    8346:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    834a:	4811      	ldr	r0, [pc, #68]	; (8390 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    834c:	300c      	adds	r0, #12
    834e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8352:	42a8      	cmp	r0, r5
    8354:	d310      	bcc.n	8378 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    8356:	2000      	movs	r0, #0
    8358:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    835c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    8360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8362:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    8366:	62a0      	str	r0, [r4, #40]	; 0x28
    8368:	480c      	ldr	r0, [pc, #48]	; (839c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    836a:	1d00      	adds	r0, r0, #4
    836c:	6006      	str	r6, [r0, #0]
    836e:	f7ff fd23 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8372:	2000      	movs	r0, #0
    8374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8378:	4629      	mov	r1, r5
    837a:	4638      	mov	r0, r7
    837c:	f000 fb12 	bl	89a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    8380:	2001      	movs	r0, #1
    8382:	e7f7      	b.n	8374 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    8384:	40001000 	.word	0x40001000
    8388:	20000fcc 	.word	0x20000fcc
    838c:	00008af8 	.word	0x00008af8
    8390:	40008000 	.word	0x40008000
    8394:	40008140 	.word	0x40008140
    8398:	4001f098 	.word	0x4001f098
    839c:	4001f504 	.word	0x4001f504

000083a0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    83a0:	4b0d      	ldr	r3, [pc, #52]	; (83d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    83a2:	b510      	push	{r4, lr}
    83a4:	71d8      	strb	r0, [r3, #7]
    83a6:	729a      	strb	r2, [r3, #10]
    83a8:	b151      	cbz	r1, 83c0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    83aa:	2002      	movs	r0, #2
    83ac:	7218      	strb	r0, [r3, #8]
    83ae:	2801      	cmp	r0, #1
    83b0:	d008      	beq.n	83c4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    83b2:	2802      	cmp	r0, #2
    83b4:	d00f      	beq.n	83d6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    83b6:	f640 2163 	movw	r1, #2659	; 0xa63
    83ba:	203e      	movs	r0, #62	; 0x3e
    83bc:	f7f8 fff0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83c0:	2001      	movs	r0, #1
    83c2:	e7f3      	b.n	83ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    83c4:	7a58      	ldrb	r0, [r3, #9]
    83c6:	2802      	cmp	r0, #2
    83c8:	d105      	bne.n	83d6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    83ca:	f000 f97d 	bl	86c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    83ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83d2:	f000 bab1 	b.w	8938 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    83d6:	bd10      	pop	{r4, pc}
    83d8:	20000fcc 	.word	0x20000fcc

000083dc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    83dc:	4902      	ldr	r1, [pc, #8]	; (83e8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    83de:	2000      	movs	r0, #0
    83e0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    83e4:	4770      	bx	lr
    83e6:	0000      	.short	0x0000
    83e8:	40008000 	.word	0x40008000

000083ec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    83ec:	4904      	ldr	r1, [pc, #16]	; (8400 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    83ee:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    83f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    83f6:	4249      	negs	r1, r1
    83f8:	7001      	strb	r1, [r0, #0]
    83fa:	2001      	movs	r0, #1
    83fc:	4770      	bx	lr
    83fe:	0000      	.short	0x0000
    8400:	40001000 	.word	0x40001000

00008404 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8404:	4903      	ldr	r1, [pc, #12]	; (8414 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8406:	0e02      	lsrs	r2, r0, #24
    8408:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    840c:	0200      	lsls	r0, r0, #8
    840e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8412:	4770      	bx	lr
    8414:	40001000 	.word	0x40001000

00008418 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8418:	4901      	ldr	r1, [pc, #4]	; (8420 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    841a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    841e:	4770      	bx	lr
    8420:	40001000 	.word	0x40001000

00008424 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8424:	b510      	push	{r4, lr}
    8426:	2200      	movs	r2, #0
    8428:	2901      	cmp	r1, #1
    842a:	d006      	beq.n	843a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    842c:	2902      	cmp	r1, #2
    842e:	d002      	beq.n	8436 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    8430:	f240 21d9 	movw	r1, #729	; 0x2d9
    8434:	e014      	b.n	8460 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    8436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    843a:	490b      	ldr	r1, [pc, #44]	; (8468 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    843c:	430a      	orrs	r2, r1
    843e:	490b      	ldr	r1, [pc, #44]	; (846c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8440:	600a      	str	r2, [r1, #0]
    8442:	490b      	ldr	r1, [pc, #44]	; (8470 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    8444:	4308      	orrs	r0, r1
    8446:	4909      	ldr	r1, [pc, #36]	; (846c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8448:	1d09      	adds	r1, r1, #4
    844a:	6008      	str	r0, [r1, #0]
    844c:	4809      	ldr	r0, [pc, #36]	; (8474 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    844e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8452:	b2c0      	uxtb	r0, r0
    8454:	2803      	cmp	r0, #3
    8456:	d001      	beq.n	845c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    8458:	280b      	cmp	r0, #11
    845a:	d104      	bne.n	8466 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    845c:	f240 21f1 	movw	r1, #753	; 0x2f1
    8460:	203e      	movs	r0, #62	; 0x3e
    8462:	f7f8 ff9d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8466:	bd10      	pop	{r4, pc}
    8468:	00100108 	.word	0x00100108
    846c:	40001514 	.word	0x40001514
    8470:	02030000 	.word	0x02030000
    8474:	40001000 	.word	0x40001000

00008478 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    8478:	4901      	ldr	r1, [pc, #4]	; (8480 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    847a:	7588      	strb	r0, [r1, #22]
    847c:	4770      	bx	lr
    847e:	0000      	.short	0x0000
    8480:	20000fcc 	.word	0x20000fcc

00008484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8488:	4853      	ldr	r0, [pc, #332]	; (85d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    848a:	f04f 0a01 	mov.w	sl, #1
    848e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8492:	4851      	ldr	r0, [pc, #324]	; (85d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8494:	300c      	adds	r0, #12
    8496:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    849a:	f008 faf4 	bl	10a86 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    849e:	4c4f      	ldr	r4, [pc, #316]	; (85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    84a0:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    84a4:	f000 f91a 	bl	86dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    84a8:	494d      	ldr	r1, [pc, #308]	; (85e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    84aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84ac:	6008      	str	r0, [r1, #0]
    84ae:	f8df 8134 	ldr.w	r8, [pc, #308]	; 85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    84b2:	2000      	movs	r0, #0
    84b4:	62a0      	str	r0, [r4, #40]	; 0x28
    84b6:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    84ba:	f240 131d 	movw	r3, #285	; 0x11d
    84be:	439a      	bics	r2, r3
    84c0:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    84c4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    84c8:	f000 f988 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    84cc:	4605      	mov	r5, r0
    84ce:	4842      	ldr	r0, [pc, #264]	; (85d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    84d0:	3008      	adds	r0, #8
    84d2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    84d6:	4e40      	ldr	r6, [pc, #256]	; (85d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    84d8:	61e0      	str	r0, [r4, #28]
    84da:	1d36      	adds	r6, r6, #4
    84dc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    84e0:	61a0      	str	r0, [r4, #24]
    84e2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    84e6:	7d21      	ldrb	r1, [r4, #20]
    84e8:	f884 1020 	strb.w	r1, [r4, #32]
    84ec:	7a61      	ldrb	r1, [r4, #9]
    84ee:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    84f2:	46a1      	mov	r9, r4
    84f4:	2400      	movs	r4, #0
    84f6:	4639      	mov	r1, r7
    84f8:	4628      	mov	r0, r5
    84fa:	f000 f9e3 	bl	88c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    84fe:	b910      	cbnz	r0, 8506 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8500:	f8c8 a010 	str.w	sl, [r8, #16]
    8504:	2401      	movs	r4, #1
    8506:	4f35      	ldr	r7, [pc, #212]	; (85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8508:	07e8      	lsls	r0, r5, #31
    850a:	f1a7 0710 	sub.w	r7, r7, #16
    850e:	d002      	beq.n	8516 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8510:	6838      	ldr	r0, [r7, #0]
    8512:	4780      	blx	r0
    8514:	e034      	b.n	8580 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8516:	07a8      	lsls	r0, r5, #30
    8518:	d529      	bpl.n	856e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    851a:	0768      	lsls	r0, r5, #29
    851c:	d421      	bmi.n	8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    851e:	f008 fbd8 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8522:	b9f0      	cbnz	r0, 8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8524:	f008 fbc5 	bl	10cb2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8528:	b9d8      	cbnz	r0, 8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    852a:	482f      	ldr	r0, [pc, #188]	; (85e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    852c:	6800      	ldr	r0, [r0, #0]
    852e:	f3c0 5242 	ubfx	r2, r0, #21, #3
    8532:	f3c0 6100 	ubfx	r1, r0, #24, #1
    8536:	f000 0c0f 	and.w	ip, r0, #15
    853a:	f3c0 1303 	ubfx	r3, r0, #4, #4
    853e:	f3c0 2803 	ubfx	r8, r0, #8, #4
    8542:	b171      	cbz	r1, 8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8544:	f1bc 0f00 	cmp.w	ip, #0
    8548:	d003      	beq.n	8552 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    854a:	b113      	cbz	r3, 8552 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    854c:	f1b8 0f00 	cmp.w	r8, #0
    8550:	d107      	bne.n	8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8552:	f3c0 4004 	ubfx	r0, r0, #16, #5
    8556:	2801      	cmp	r0, #1
    8558:	d103      	bne.n	8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    855a:	2a03      	cmp	r2, #3
    855c:	d201      	bcs.n	8562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    855e:	f045 0504 	orr.w	r5, r5, #4
    8562:	f345 0080 	sbfx	r0, r5, #2, #1
    8566:	4621      	mov	r1, r4
    8568:	1c40      	adds	r0, r0, #1
    856a:	687a      	ldr	r2, [r7, #4]
    856c:	e007      	b.n	857e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    856e:	f015 0f28 	tst.w	r5, #40	; 0x28
    8572:	d005      	beq.n	8580 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8574:	f345 1140 	sbfx	r1, r5, #5, #1
    8578:	68ba      	ldr	r2, [r7, #8]
    857a:	4620      	mov	r0, r4
    857c:	1c49      	adds	r1, r1, #1
    857e:	4790      	blx	r2
    8580:	06e8      	lsls	r0, r5, #27
    8582:	d501      	bpl.n	8588 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    8584:	68f8      	ldr	r0, [r7, #12]
    8586:	4780      	blx	r0
    8588:	f899 1009 	ldrb.w	r1, [r9, #9]
    858c:	4648      	mov	r0, r9
    858e:	2902      	cmp	r1, #2
    8590:	d120      	bne.n	85d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8592:	7b01      	ldrb	r1, [r0, #12]
    8594:	2900      	cmp	r1, #0
    8596:	d01d      	beq.n	85d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8598:	2902      	cmp	r1, #2
    859a:	d004      	beq.n	85a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    859c:	2901      	cmp	r1, #1
    859e:	d009      	beq.n	85b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    85a0:	f640 4166 	movw	r1, #3174	; 0xc66
    85a4:	e00d      	b.n	85c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    85a6:	69c1      	ldr	r1, [r0, #28]
    85a8:	f8d9 0010 	ldr.w	r0, [r9, #16]
    85ac:	4408      	add	r0, r1
    85ae:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    85b2:	e00b      	b.n	85cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    85b4:	6901      	ldr	r1, [r0, #16]
    85b6:	f8d9 001c 	ldr.w	r0, [r9, #28]
    85ba:	4281      	cmp	r1, r0
    85bc:	d804      	bhi.n	85c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    85be:	f640 4167 	movw	r1, #3175	; 0xc67
    85c2:	203e      	movs	r0, #62	; 0x3e
    85c4:	f7f8 feec 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85c8:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    85cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85d0:	f000 b9bc 	b.w	894c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    85d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85d8:	40008000 	.word	0x40008000
    85dc:	20000fcc 	.word	0x20000fcc
    85e0:	4001f508 	.word	0x4001f508
    85e4:	40001000 	.word	0x40001000
    85e8:	40001450 	.word	0x40001450

000085ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    85ec:	b570      	push	{r4, r5, r6, lr}
    85ee:	4b16      	ldr	r3, [pc, #88]	; (8648 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    85f0:	888c      	ldrh	r4, [r1, #4]
    85f2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    85f6:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    85fa:	780c      	ldrb	r4, [r1, #0]
    85fc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8600:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8604:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    8608:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    860c:	2401      	movs	r4, #1
    860e:	4084      	lsls	r4, r0
    8610:	b2c9      	uxtb	r1, r1
    8612:	b2e5      	uxtb	r5, r4
    8614:	4329      	orrs	r1, r5
    8616:	b132      	cbz	r2, 8626 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    8618:	2a01      	cmp	r2, #1
    861a:	d00a      	beq.n	8632 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    861c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    8620:	203e      	movs	r0, #62	; 0x3e
    8622:	f7f8 febd 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8626:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    862a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    862e:	43a0      	bics	r0, r4
    8630:	e004      	b.n	863c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    8632:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    8636:	f3c0 2007 	ubfx	r0, r0, #8, #8
    863a:	4328      	orrs	r0, r5
    863c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8640:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    8644:	bd70      	pop	{r4, r5, r6, pc}
    8646:	0000      	.short	0x0000
    8648:	40001000 	.word	0x40001000

0000864c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    864c:	4901      	ldr	r1, [pc, #4]	; (8654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    864e:	2001      	movs	r0, #1
    8650:	7008      	strb	r0, [r1, #0]
    8652:	4770      	bx	lr
    8654:	200002bc 	.word	0x200002bc
    8658:	480b      	ldr	r0, [pc, #44]	; (8688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    865a:	7d81      	ldrb	r1, [r0, #22]
    865c:	480b      	ldr	r0, [pc, #44]	; (868c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    865e:	5c40      	ldrb	r0, [r0, r1]
    8660:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8664:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    8668:	d204      	bcs.n	8674 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    866a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    866e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8672:	e001      	b.n	8678 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    8674:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    8678:	4a05      	ldr	r2, [pc, #20]	; (8690 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    867a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    867e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    8682:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    8686:	4770      	bx	lr
    8688:	20000fcc 	.word	0x20000fcc
    868c:	00008afe 	.word	0x00008afe
    8690:	40001000 	.word	0x40001000
    8694:	b508      	push	{r3, lr}
    8696:	490b      	ldr	r1, [pc, #44]	; (86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    8698:	466b      	mov	r3, sp
    869a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    869e:	7d89      	ldrb	r1, [r1, #22]
    86a0:	f000 fad0 	bl	8c44 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    86a4:	f99d 0000 	ldrsb.w	r0, [sp]
    86a8:	f000 faa0 	bl	8bec <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    86ac:	f10d 0001 	add.w	r0, sp, #1
    86b0:	f004 f8a8 	bl	c804 <mpsl_fem_pa_gain_set>
    86b4:	2800      	cmp	r0, #0
    86b6:	d004      	beq.n	86c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    86b8:	f240 6115 	movw	r1, #1557	; 0x615
    86bc:	203e      	movs	r0, #62	; 0x3e
    86be:	f7f8 fe6f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86c2:	bd08      	pop	{r3, pc}
    86c4:	20000fcc 	.word	0x20000fcc
    86c8:	4803      	ldr	r0, [pc, #12]	; (86d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    86ca:	7a01      	ldrb	r1, [r0, #8]
    86cc:	2901      	cmp	r1, #1
    86ce:	d102      	bne.n	86d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    86d0:	7a80      	ldrb	r0, [r0, #10]
    86d2:	f7ff bfdf 	b.w	8694 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    86d6:	4770      	bx	lr
    86d8:	20000fcc 	.word	0x20000fcc
    86dc:	480d      	ldr	r0, [pc, #52]	; (8714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    86de:	b510      	push	{r4, lr}
    86e0:	7a40      	ldrb	r0, [r0, #9]
    86e2:	2801      	cmp	r0, #1
    86e4:	d00c      	beq.n	8700 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    86e6:	2802      	cmp	r0, #2
    86e8:	d113      	bne.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    86ea:	f004 f86d 	bl	c7c8 <mpsl_fem_lna_configuration_clear>
    86ee:	2800      	cmp	r0, #0
    86f0:	d00f      	beq.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    86f2:	1c40      	adds	r0, r0, #1
    86f4:	d00d      	beq.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    86f6:	f640 01c1 	movw	r1, #2241	; 0x8c1
    86fa:	203e      	movs	r0, #62	; 0x3e
    86fc:	f7f8 fe50 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8700:	f004 f874 	bl	c7ec <mpsl_fem_pa_configuration_clear>
    8704:	2800      	cmp	r0, #0
    8706:	d004      	beq.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8708:	1c40      	adds	r0, r0, #1
    870a:	d002      	beq.n	8712 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    870c:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8710:	e7f3      	b.n	86fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8712:	bd10      	pop	{r4, pc}
    8714:	20000fcc 	.word	0x20000fcc
    8718:	4808      	ldr	r0, [pc, #32]	; (873c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    871a:	2100      	movs	r1, #0
    871c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8720:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8724:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8728:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    872c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8730:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8734:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8738:	4770      	bx	lr
    873a:	0000      	.short	0x0000
    873c:	40001000 	.word	0x40001000
    8740:	4818      	ldr	r0, [pc, #96]	; (87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    8742:	b510      	push	{r4, lr}
    8744:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    8748:	07c1      	lsls	r1, r0, #31
    874a:	d029      	beq.n	87a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    874c:	0781      	lsls	r1, r0, #30
    874e:	d514      	bpl.n	877a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    8750:	4815      	ldr	r0, [pc, #84]	; (87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8752:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8756:	f041 0101 	orr.w	r1, r1, #1
    875a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    875e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8762:	b2c0      	uxtb	r0, r0
    8764:	280b      	cmp	r0, #11
    8766:	d005      	beq.n	8774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    8768:	280a      	cmp	r0, #10
    876a:	d003      	beq.n	8774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    876c:	2803      	cmp	r0, #3
    876e:	d001      	beq.n	8774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    8770:	2802      	cmp	r0, #2
    8772:	d115      	bne.n	87a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    8774:	f240 613e 	movw	r1, #1598	; 0x63e
    8778:	e00f      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    877a:	0740      	lsls	r0, r0, #29
    877c:	d510      	bpl.n	87a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    877e:	480a      	ldr	r0, [pc, #40]	; (87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8780:	490a      	ldr	r1, [pc, #40]	; (87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    8782:	3008      	adds	r0, #8
    8784:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8788:	f44f 71a0 	mov.w	r1, #320	; 0x140
    878c:	4808      	ldr	r0, [pc, #32]	; (87b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    878e:	f008 f939 	bl	10a04 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8792:	2800      	cmp	r0, #0
    8794:	d004      	beq.n	87a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    8796:	f240 6146 	movw	r1, #1606	; 0x646
    879a:	203e      	movs	r0, #62	; 0x3e
    879c:	f7f8 fe00 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87a0:	bd10      	pop	{r4, pc}
    87a2:	0000      	.short	0x0000
    87a4:	20000fcc 	.word	0x20000fcc
    87a8:	40001000 	.word	0x40001000
    87ac:	4001f098 	.word	0x4001f098
    87b0:	40008000 	.word	0x40008000
    87b4:	4808      	ldr	r0, [pc, #32]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    87b6:	4601      	mov	r1, r0
    87b8:	79c2      	ldrb	r2, [r0, #7]
    87ba:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    87be:	b112      	cbz	r2, 87c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    87c0:	2a01      	cmp	r2, #1
    87c2:	d003      	beq.n	87cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    87c4:	e006      	b.n	87d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    87c6:	f041 0102 	orr.w	r1, r1, #2
    87ca:	e001      	b.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    87cc:	f041 0104 	orr.w	r1, r1, #4
    87d0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    87d4:	f7ff bfb4 	b.w	8740 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    87d8:	20000fcc 	.word	0x20000fcc
    87dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87e0:	4d34      	ldr	r5, [pc, #208]	; (88b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    87e2:	2400      	movs	r4, #0
    87e4:	7b28      	ldrb	r0, [r5, #12]
    87e6:	b138      	cbz	r0, 87f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    87e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    87ec:	4832      	ldr	r0, [pc, #200]	; (88b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    87ee:	f008 f909 	bl	10a04 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    87f2:	b108      	cbz	r0, 87f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    87f4:	2601      	movs	r6, #1
    87f6:	e000      	b.n	87fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    87f8:	2600      	movs	r6, #0
    87fa:	7a68      	ldrb	r0, [r5, #9]
    87fc:	4f2f      	ldr	r7, [pc, #188]	; (88bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    87fe:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8802:	2801      	cmp	r0, #1
    8804:	d002      	beq.n	880c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    8806:	2802      	cmp	r0, #2
    8808:	d006      	beq.n	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    880a:	e016      	b.n	883a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    880c:	4638      	mov	r0, r7
    880e:	f008 f8f4 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8812:	b190      	cbz	r0, 883a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8814:	2408      	movs	r4, #8
    8816:	e010      	b.n	883a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8818:	4638      	mov	r0, r7
    881a:	f008 f8ee 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    881e:	b100      	cbz	r0, 8822 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    8820:	2402      	movs	r4, #2
    8822:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    8826:	43c0      	mvns	r0, r0
    8828:	f340 0000 	sbfx	r0, r0, #0, #1
    882c:	1c40      	adds	r0, r0, #1
    882e:	d101      	bne.n	8834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    8830:	f044 0404 	orr.w	r4, r4, #4
    8834:	b10e      	cbz	r6, 883a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8836:	f044 0401 	orr.w	r4, r4, #1
    883a:	f014 0f0b 	tst.w	r4, #11
    883e:	d107      	bne.n	8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    8840:	f44f 7188 	mov.w	r1, #272	; 0x110
    8844:	4638      	mov	r0, r7
    8846:	f008 f8d8 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    884a:	b108      	cbz	r0, 8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    884c:	f044 0410 	orr.w	r4, r4, #16
    8850:	481b      	ldr	r0, [pc, #108]	; (88c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    8852:	7800      	ldrb	r0, [r0, #0]
    8854:	b1f8      	cbz	r0, 8896 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    8856:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    885a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    885e:	d007      	beq.n	8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    8860:	f44f 718a 	mov.w	r1, #276	; 0x114
    8864:	4638      	mov	r0, r7
    8866:	f008 f8c8 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    886a:	b108      	cbz	r0, 8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    886c:	2001      	movs	r0, #1
    886e:	e000      	b.n	8872 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    8870:	2000      	movs	r0, #0
    8872:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    8876:	b13e      	cbz	r6, 8888 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    8878:	f44f 718c 	mov.w	r1, #280	; 0x118
    887c:	4638      	mov	r0, r7
    887e:	f008 f8bc 	bl	109fa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8882:	b108      	cbz	r0, 8888 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    8884:	2001      	movs	r0, #1
    8886:	e000      	b.n	888a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    8888:	2000      	movs	r0, #0
    888a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    888e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    8892:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    8896:	f7ff ff3f 	bl	8718 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    889a:	06e0      	lsls	r0, r4, #27
    889c:	d506      	bpl.n	88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    889e:	0720      	lsls	r0, r4, #28
    88a0:	d404      	bmi.n	88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88a2:	7a68      	ldrb	r0, [r5, #9]
    88a4:	2801      	cmp	r0, #1
    88a6:	d101      	bne.n	88ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88a8:	f044 0420 	orr.w	r4, r4, #32
    88ac:	4620      	mov	r0, r4
    88ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88b2:	0000      	.short	0x0000
    88b4:	20000fcc 	.word	0x20000fcc
    88b8:	40008000 	.word	0x40008000
    88bc:	40001000 	.word	0x40001000
    88c0:	200002bc 	.word	0x200002bc
    88c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88c8:	4c1a      	ldr	r4, [pc, #104]	; (8934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    88ca:	460d      	mov	r5, r1
    88cc:	7a21      	ldrb	r1, [r4, #8]
    88ce:	b129      	cbz	r1, 88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    88d0:	f010 0f11 	tst.w	r0, #17
    88d4:	d007      	beq.n	88e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    88d6:	f7ff fa6f 	bl	7db8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    88da:	e024      	b.n	8926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    88dc:	f000 f890 	bl	8a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    88e0:	2000      	movs	r0, #0
    88e2:	7320      	strb	r0, [r4, #12]
    88e4:	e01f      	b.n	8926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    88e6:	2901      	cmp	r1, #1
    88e8:	d001      	beq.n	88ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    88ea:	2601      	movs	r6, #1
    88ec:	e000      	b.n	88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    88ee:	2600      	movs	r6, #0
    88f0:	79e0      	ldrb	r0, [r4, #7]
    88f2:	2801      	cmp	r0, #1
    88f4:	d00e      	beq.n	8914 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    88f6:	2700      	movs	r7, #0
    88f8:	f000 f882 	bl	8a00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    88fc:	2196      	movs	r1, #150	; 0x96
    88fe:	4630      	mov	r0, r6
    8900:	f000 f894 	bl	8a2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8904:	4601      	mov	r1, r0
    8906:	b14f      	cbz	r7, 891c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    8908:	353b      	adds	r5, #59	; 0x3b
    890a:	428d      	cmp	r5, r1
    890c:	d904      	bls.n	8918 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    890e:	2000      	movs	r0, #0
    8910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8914:	2701      	movs	r7, #1
    8916:	e7ef      	b.n	88f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    8918:	2001      	movs	r0, #1
    891a:	71e0      	strb	r0, [r4, #7]
    891c:	7aa2      	ldrb	r2, [r4, #10]
    891e:	4630      	mov	r0, r6
    8920:	f7ff fccc 	bl	82bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8924:	b108      	cbz	r0, 892a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    8926:	2001      	movs	r0, #1
    8928:	e7f2      	b.n	8910 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    892a:	f640 21c4 	movw	r1, #2756	; 0xac4
    892e:	203e      	movs	r0, #62	; 0x3e
    8930:	f7f8 fd36 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8934:	20000fcc 	.word	0x20000fcc
    8938:	4803      	ldr	r0, [pc, #12]	; (8948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    893a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    893e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8942:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8946:	4770      	bx	lr
    8948:	40001000 	.word	0x40001000
    894c:	4804      	ldr	r0, [pc, #16]	; (8960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    894e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8950:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8954:	6281      	str	r1, [r0, #40]	; 0x28
    8956:	4903      	ldr	r1, [pc, #12]	; (8964 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    8958:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    895c:	6008      	str	r0, [r1, #0]
    895e:	4770      	bx	lr
    8960:	20000fcc 	.word	0x20000fcc
    8964:	4001f504 	.word	0x4001f504
    8968:	4a07      	ldr	r2, [pc, #28]	; (8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    896a:	2000      	movs	r0, #0
    896c:	3208      	adds	r2, #8
    896e:	4906      	ldr	r1, [pc, #24]	; (8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    8970:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8974:	1d0a      	adds	r2, r1, #4
    8976:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    897a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    897e:	4902      	ldr	r1, [pc, #8]	; (8988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    8980:	310c      	adds	r1, #12
    8982:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8986:	4770      	bx	lr
    8988:	40008000 	.word	0x40008000
    898c:	4903      	ldr	r1, [pc, #12]	; (899c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    898e:	79c9      	ldrb	r1, [r1, #7]
    8990:	2900      	cmp	r1, #0
    8992:	d102      	bne.n	899a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    8994:	4902      	ldr	r1, [pc, #8]	; (89a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    8996:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    899a:	4770      	bx	lr
    899c:	20000fcc 	.word	0x20000fcc
    89a0:	4001f098 	.word	0x4001f098
    89a4:	b510      	push	{r4, lr}
    89a6:	4a14      	ldr	r2, [pc, #80]	; (89f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89a8:	b120      	cbz	r0, 89b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    89aa:	2801      	cmp	r0, #1
    89ac:	d011      	beq.n	89d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    89ae:	f240 7169 	movw	r1, #1897	; 0x769
    89b2:	e01c      	b.n	89ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    89b4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    89b8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    89bc:	490f      	ldr	r1, [pc, #60]	; (89fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    89be:	480e      	ldr	r0, [pc, #56]	; (89f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89c0:	f003 ff1a 	bl	c7f8 <mpsl_fem_pa_configuration_set>
    89c4:	2800      	cmp	r0, #0
    89c6:	d015      	beq.n	89f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89c8:	1c40      	adds	r0, r0, #1
    89ca:	d013      	beq.n	89f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89cc:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    89d0:	e00d      	b.n	89ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    89d2:	f101 0029 	add.w	r0, r1, #41	; 0x29
    89d6:	e9c2 1002 	strd	r1, r0, [r2, #8]
    89da:	4908      	ldr	r1, [pc, #32]	; (89fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    89dc:	4806      	ldr	r0, [pc, #24]	; (89f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89de:	f003 fef9 	bl	c7d4 <mpsl_fem_lna_configuration_set>
    89e2:	2800      	cmp	r0, #0
    89e4:	d006      	beq.n	89f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89e6:	1c40      	adds	r0, r0, #1
    89e8:	d004      	beq.n	89f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89ea:	f240 7165 	movw	r1, #1893	; 0x765
    89ee:	203e      	movs	r0, #62	; 0x3e
    89f0:	f7f8 fcd6 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89f4:	bd10      	pop	{r4, pc}
    89f6:	0000      	.short	0x0000
    89f8:	200002c4 	.word	0x200002c4
    89fc:	00008b28 	.word	0x00008b28
    8a00:	4802      	ldr	r0, [pc, #8]	; (8a0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8a02:	2100      	movs	r1, #0
    8a04:	71c1      	strb	r1, [r0, #7]
    8a06:	7201      	strb	r1, [r0, #8]
    8a08:	7241      	strb	r1, [r0, #9]
    8a0a:	4770      	bx	lr
    8a0c:	20000fcc 	.word	0x20000fcc
    8a10:	4a05      	ldr	r2, [pc, #20]	; (8a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8a12:	79d2      	ldrb	r2, [r2, #7]
    8a14:	2a01      	cmp	r2, #1
    8a16:	d006      	beq.n	8a26 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    8a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a1c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8a20:	fbb1 f1f2 	udiv	r1, r1, r2
    8a24:	1a40      	subs	r0, r0, r1
    8a26:	4770      	bx	lr
    8a28:	20000fcc 	.word	0x20000fcc
    8a2c:	b570      	push	{r4, r5, r6, lr}
    8a2e:	4c13      	ldr	r4, [pc, #76]	; (8a7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    8a30:	4603      	mov	r3, r0
    8a32:	460d      	mov	r5, r1
    8a34:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8a38:	2000      	movs	r0, #0
    8a3a:	b15a      	cbz	r2, 8a54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    8a3c:	4621      	mov	r1, r4
    8a3e:	f891 1020 	ldrb.w	r1, [r1, #32]
    8a42:	b163      	cbz	r3, 8a5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    8a44:	2b01      	cmp	r3, #1
    8a46:	d111      	bne.n	8a6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    8a48:	2a01      	cmp	r2, #1
    8a4a:	4628      	mov	r0, r5
    8a4c:	d012      	beq.n	8a74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    8a4e:	f007 ffde 	bl	10a0e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8a52:	e009      	b.n	8a68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8a54:	f640 016e 	movw	r1, #2158	; 0x86e
    8a58:	203e      	movs	r0, #62	; 0x3e
    8a5a:	f7f8 fca1 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a5e:	2a01      	cmp	r2, #1
    8a60:	4628      	mov	r0, r5
    8a62:	d004      	beq.n	8a6e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    8a64:	f007 ffe1 	bl	10a2a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8a68:	69e1      	ldr	r1, [r4, #28]
    8a6a:	4408      	add	r0, r1
    8a6c:	bd70      	pop	{r4, r5, r6, pc}
    8a6e:	f000 f8d1 	bl	8c14 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8a72:	e7f9      	b.n	8a68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8a74:	f000 f8c0 	bl	8bf8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8a78:	e7f6      	b.n	8a68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8a7a:	0000      	.short	0x0000
    8a7c:	20000fcc 	.word	0x20000fcc
    8a80:	b510      	push	{r4, lr}
    8a82:	f7ff fbef 	bl	8264 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8a86:	f7ff fde7 	bl	8658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8a8a:	f7ff fe1d 	bl	86c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8a8e:	f7ff ff53 	bl	8938 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8a92:	f008 f91e 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8a96:	2800      	cmp	r0, #0
    8a98:	d108      	bne.n	8aac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8a9a:	f008 f90a 	bl	10cb2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8a9e:	2800      	cmp	r0, #0
    8aa0:	d104      	bne.n	8aac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8aa2:	4803      	ldr	r0, [pc, #12]	; (8ab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8aa4:	6801      	ldr	r1, [r0, #0]
    8aa6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8aaa:	6001      	str	r1, [r0, #0]
    8aac:	bd10      	pop	{r4, pc}
    8aae:	0000      	.short	0x0000
    8ab0:	40001568 	.word	0x40001568
    8ab4:	b510      	push	{r4, lr}
    8ab6:	4604      	mov	r4, r0
    8ab8:	f7ff fbd4 	bl	8264 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8abc:	f7ff fdcc 	bl	8658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8ac0:	4620      	mov	r0, r4
    8ac2:	f7ff fde7 	bl	8694 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8ac6:	f008 f904 	bl	10cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8aca:	2800      	cmp	r0, #0
    8acc:	d00d      	beq.n	8aea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8ace:	4a09      	ldr	r2, [pc, #36]	; (8af4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8ad0:	6811      	ldr	r1, [r2, #0]
    8ad2:	0650      	lsls	r0, r2, #25
    8ad4:	2c02      	cmp	r4, #2
    8ad6:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8ada:	d007      	beq.n	8aec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8adc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8ae0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8ae4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8ae8:	6010      	str	r0, [r2, #0]
    8aea:	bd10      	pop	{r4, pc}
    8aec:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8af0:	e7f6      	b.n	8ae0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8af2:	0000      	.short	0x0000
    8af4:	40001588 	.word	0x40001588
    8af8:	a62c0000 	.word	0xa62c0000
    8afc:	0604a1e0 	.word	0x0604a1e0
    8b00:	0e0c0a08 	.word	0x0e0c0a08
    8b04:	16141210 	.word	0x16141210
    8b08:	201e1c18 	.word	0x201e1c18
    8b0c:	28262422 	.word	0x28262422
    8b10:	302e2c2a 	.word	0x302e2c2a
    8b14:	38363432 	.word	0x38363432
    8b18:	403e3c3a 	.word	0x403e3c3a
    8b1c:	48464442 	.word	0x48464442
    8b20:	024e4c4a 	.word	0x024e4c4a
    8b24:	0000501a 	.word	0x0000501a
    8b28:	00000001 	.word	0x00000001
    8b2c:	40001110 	.word	0x40001110
	...
    8b44:	00001e14 	.word	0x00001e14
    8b48:	00001130 	.word	0x00001130
    8b4c:	00000000 	.word	0x00000000
    8b50:	00000028 	.word	0x00000028
    8b54:	00000018 	.word	0x00000018
    8b58:	00000000 	.word	0x00000000
    8b5c:	00001e14 	.word	0x00001e14
    8b60:	00001130 	.word	0x00001130
    8b64:	00000000 	.word	0x00000000
    8b68:	00001770 	.word	0x00001770
    8b6c:	00000fa0 	.word	0x00000fa0

00008b70 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8b70:	b570      	push	{r4, r5, r6, lr}
    8b72:	4605      	mov	r5, r0
    8b74:	4614      	mov	r4, r2
    8b76:	4608      	mov	r0, r1
    8b78:	f7ff fb9a 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8b7c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8b80:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8b84:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8b88:	4807      	ldr	r0, [pc, #28]	; (8ba8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8b8a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8b8e:	4408      	add	r0, r1
    8b90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8b94:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8b98:	fbb0 f5f1 	udiv	r5, r0, r1
    8b9c:	4620      	mov	r0, r4
    8b9e:	f7ff fb5b 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8ba2:	4428      	add	r0, r5
    8ba4:	1d40      	adds	r0, r0, #5
    8ba6:	bd70      	pop	{r4, r5, r6, pc}
    8ba8:	00008c38 	.word	0x00008c38

00008bac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8bac:	b570      	push	{r4, r5, r6, lr}
    8bae:	4d0e      	ldr	r5, [pc, #56]	; (8be8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8bb0:	461c      	mov	r4, r3
    8bb2:	3d08      	subs	r5, #8
    8bb4:	4b0c      	ldr	r3, [pc, #48]	; (8be8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8bb6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8bba:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bc2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8bc6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8bca:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8bce:	4418      	add	r0, r3
    8bd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8bd4:	fbb0 f5f1 	udiv	r5, r0, r1
    8bd8:	4610      	mov	r0, r2
    8bda:	f7ff fb3d 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8bde:	4428      	add	r0, r5
    8be0:	4420      	add	r0, r4
    8be2:	1d40      	adds	r0, r0, #5
    8be4:	bd70      	pop	{r4, r5, r6, pc}
    8be6:	0000      	.short	0x0000
    8be8:	00008c38 	.word	0x00008c38

00008bec <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8bec:	4901      	ldr	r1, [pc, #4]	; (8bf4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8bee:	b2c0      	uxtb	r0, r0
    8bf0:	6008      	str	r0, [r1, #0]
    8bf2:	4770      	bx	lr
    8bf4:	4000150c 	.word	0x4000150c

00008bf8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8bf8:	4a05      	ldr	r2, [pc, #20]	; (8c10 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8bfa:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8bfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c02:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8c06:	fbb1 f1f2 	udiv	r1, r1, r2
    8c0a:	4408      	add	r0, r1
    8c0c:	1e80      	subs	r0, r0, #2
    8c0e:	4770      	bx	lr
    8c10:	00008c30 	.word	0x00008c30

00008c14 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8c14:	4a05      	ldr	r2, [pc, #20]	; (8c2c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8c16:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c1e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8c22:	fbb1 f1f2 	udiv	r1, r1, r2
    8c26:	4408      	add	r0, r1
    8c28:	4770      	bx	lr
    8c2a:	0000      	.short	0x0000
    8c2c:	00008c30 	.word	0x00008c30
    8c30:	05dc0000 	.word	0x05dc0000
    8c34:	000003e8 	.word	0x000003e8
    8c38:	00000000 	.word	0x00000000
    8c3c:	00001e14 	.word	0x00001e14
    8c40:	00001130 	.word	0x00001130

00008c44 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c48:	461e      	mov	r6, r3
    8c4a:	4617      	mov	r7, r2
    8c4c:	460c      	mov	r4, r1
    8c4e:	4605      	mov	r5, r0
    8c50:	f000 f856 	bl	8d00 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8c54:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8cfc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8c58:	4680      	mov	r8, r0
    8c5a:	f899 0000 	ldrb.w	r0, [r9]
    8c5e:	42a8      	cmp	r0, r5
    8c60:	d110      	bne.n	8c84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c62:	f899 1001 	ldrb.w	r1, [r9, #1]
    8c66:	4648      	mov	r0, r9
    8c68:	42a1      	cmp	r1, r4
    8c6a:	d10b      	bne.n	8c84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c6c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8c70:	42b9      	cmp	r1, r7
    8c72:	d107      	bne.n	8c84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c74:	78c2      	ldrb	r2, [r0, #3]
    8c76:	4542      	cmp	r2, r8
    8c78:	d104      	bne.n	8c84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c7a:	8881      	ldrh	r1, [r0, #4]
    8c7c:	8031      	strh	r1, [r6, #0]
    8c7e:	7980      	ldrb	r0, [r0, #6]
    8c80:	70b0      	strb	r0, [r6, #2]
    8c82:	e037      	b.n	8cf4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8c84:	463a      	mov	r2, r7
    8c86:	4621      	mov	r1, r4
    8c88:	2d01      	cmp	r5, #1
    8c8a:	d009      	beq.n	8ca0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8c8c:	2d02      	cmp	r5, #2
    8c8e:	d009      	beq.n	8ca4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8c90:	2d04      	cmp	r5, #4
    8c92:	d009      	beq.n	8ca8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8c94:	2d08      	cmp	r5, #8
    8c96:	d009      	beq.n	8cac <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8c98:	f240 4162 	movw	r1, #1122	; 0x462
    8c9c:	2006      	movs	r0, #6
    8c9e:	e00c      	b.n	8cba <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8ca0:	2000      	movs	r0, #0
    8ca2:	e004      	b.n	8cae <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8ca4:	2001      	movs	r0, #1
    8ca6:	e002      	b.n	8cae <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8ca8:	2003      	movs	r0, #3
    8caa:	e000      	b.n	8cae <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cac:	2002      	movs	r0, #2
    8cae:	466b      	mov	r3, sp
    8cb0:	f000 f89e 	bl	8df0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8cb4:	b118      	cbz	r0, 8cbe <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8cb6:	213d      	movs	r1, #61	; 0x3d
    8cb8:	2075      	movs	r0, #117	; 0x75
    8cba:	f7f8 fb71 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cbe:	4620      	mov	r0, r4
    8cc0:	f7ff f872 	bl	7da8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8cc4:	4602      	mov	r2, r0
    8cc6:	2300      	movs	r3, #0
    8cc8:	4631      	mov	r1, r6
    8cca:	f99d 0000 	ldrsb.w	r0, [sp]
    8cce:	f003 fda5 	bl	c81c <mpsl_fem_tx_power_split>
    8cd2:	4601      	mov	r1, r0
    8cd4:	f889 1007 	strb.w	r1, [r9, #7]
    8cd8:	8831      	ldrh	r1, [r6, #0]
    8cda:	f8a9 1004 	strh.w	r1, [r9, #4]
    8cde:	78b1      	ldrb	r1, [r6, #2]
    8ce0:	f889 1006 	strb.w	r1, [r9, #6]
    8ce4:	f889 5000 	strb.w	r5, [r9]
    8ce8:	f889 4001 	strb.w	r4, [r9, #1]
    8cec:	f889 7002 	strb.w	r7, [r9, #2]
    8cf0:	f889 8003 	strb.w	r8, [r9, #3]
    8cf4:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8cfc:	20000378 	.word	0x20000378

00008d00 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8d00:	4801      	ldr	r0, [pc, #4]	; (8d08 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8d02:	7800      	ldrb	r0, [r0, #0]
    8d04:	4770      	bx	lr
    8d06:	0000      	.short	0x0000
    8d08:	200002dc 	.word	0x200002dc

00008d0c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8d0c:	b570      	push	{r4, r5, r6, lr}
    8d0e:	4c17      	ldr	r4, [pc, #92]	; (8d6c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8d10:	7860      	ldrb	r0, [r4, #1]
    8d12:	2800      	cmp	r0, #0
    8d14:	d123      	bne.n	8d5e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8d16:	2001      	movs	r0, #1
    8d18:	7060      	strb	r0, [r4, #1]
    8d1a:	f007 ffb4 	bl	10c86 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8d1e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8d22:	b928      	cbnz	r0, 8d30 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d24:	f007 ffe5 	bl	10cf2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8d28:	b910      	cbnz	r0, 8d30 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d2a:	f007 ffec 	bl	10d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8d2e:	b120      	cbz	r0, 8d3a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8d30:	480f      	ldr	r0, [pc, #60]	; (8d70 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d32:	6060      	str	r0, [r4, #4]
    8d34:	70a5      	strb	r5, [r4, #2]
    8d36:	2008      	movs	r0, #8
    8d38:	e010      	b.n	8d5c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8d3a:	f007 ff79 	bl	10c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8d3e:	b940      	cbnz	r0, 8d52 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d40:	f007 ff80 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8d44:	b928      	cbnz	r0, 8d52 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d46:	f007 ff94 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8d4a:	b910      	cbnz	r0, 8d52 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d4c:	f007 ffa5 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8d50:	b130      	cbz	r0, 8d60 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8d52:	4807      	ldr	r0, [pc, #28]	; (8d70 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d54:	3031      	adds	r0, #49	; 0x31
    8d56:	6060      	str	r0, [r4, #4]
    8d58:	70a5      	strb	r5, [r4, #2]
    8d5a:	2004      	movs	r0, #4
    8d5c:	70e0      	strb	r0, [r4, #3]
    8d5e:	bd70      	pop	{r4, r5, r6, pc}
    8d60:	f240 113f 	movw	r1, #319	; 0x13f
    8d64:	2074      	movs	r0, #116	; 0x74
    8d66:	f003 fb99 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d6a:	0000      	.short	0x0000
    8d6c:	200002dc 	.word	0x200002dc
    8d70:	00011027 	.word	0x00011027

00008d74 <mpsl_tx_power_radio_supported_power_adjust>:
    8d74:	4a06      	ldr	r2, [pc, #24]	; (8d90 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8d76:	b500      	push	{lr}
    8d78:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8d7c:	4290      	cmp	r0, r2
    8d7e:	db01      	blt.n	8d84 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8d80:	4610      	mov	r0, r2
    8d82:	bd00      	pop	{pc}
    8d84:	f000 f808 	bl	8d98 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8d88:	4902      	ldr	r1, [pc, #8]	; (8d94 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8d8a:	5608      	ldrsb	r0, [r1, r0]
    8d8c:	bd00      	pop	{pc}
    8d8e:	0000      	.short	0x0000
    8d90:	200002dc 	.word	0x200002dc
    8d94:	00011019 	.word	0x00011019

00008d98 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8d98:	4602      	mov	r2, r0
    8d9a:	4813      	ldr	r0, [pc, #76]	; (8de8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8d9c:	b510      	push	{r4, lr}
    8d9e:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8da2:	429a      	cmp	r2, r3
    8da4:	db01      	blt.n	8daa <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8da6:	200d      	movs	r0, #13
    8da8:	bd10      	pop	{r4, pc}
    8daa:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8dae:	429a      	cmp	r2, r3
    8db0:	dc01      	bgt.n	8db6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8db2:	2000      	movs	r0, #0
    8db4:	bd10      	pop	{r4, pc}
    8db6:	b101      	cbz	r1, 8dba <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8db8:	2101      	movs	r1, #1
    8dba:	1ad4      	subs	r4, r2, r3
    8dbc:	6843      	ldr	r3, [r0, #4]
    8dbe:	5d18      	ldrb	r0, [r3, r4]
    8dc0:	4c0a      	ldr	r4, [pc, #40]	; (8dec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8dc2:	5624      	ldrsb	r4, [r4, r0]
    8dc4:	4294      	cmp	r4, r2
    8dc6:	d0f5      	beq.n	8db4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8dc8:	4c08      	ldr	r4, [pc, #32]	; (8dec <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8dca:	4408      	add	r0, r1
    8dcc:	343f      	adds	r4, #63	; 0x3f
    8dce:	b2c0      	uxtb	r0, r0
    8dd0:	b2d2      	uxtb	r2, r2
    8dd2:	42a3      	cmp	r3, r4
    8dd4:	d1ee      	bne.n	8db4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8dd6:	2900      	cmp	r1, #0
    8dd8:	d0ec      	beq.n	8db4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8dda:	2a01      	cmp	r2, #1
    8ddc:	d001      	beq.n	8de2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8dde:	2a02      	cmp	r2, #2
    8de0:	d1e8      	bne.n	8db4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8de2:	1c40      	adds	r0, r0, #1
    8de4:	b2c0      	uxtb	r0, r0
    8de6:	bd10      	pop	{r4, pc}
    8de8:	200002dc 	.word	0x200002dc
    8dec:	00011019 	.word	0x00011019

00008df0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8df4:	461c      	mov	r4, r3
    8df6:	4690      	mov	r8, r2
    8df8:	460d      	mov	r5, r1
    8dfa:	4606      	mov	r6, r0
    8dfc:	f06f 0715 	mvn.w	r7, #21
    8e00:	2804      	cmp	r0, #4
    8e02:	d804      	bhi.n	8e0e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e04:	b11c      	cbz	r4, 8e0e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e06:	f007 fe1b 	bl	10a40 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8e0a:	42a8      	cmp	r0, r5
    8e0c:	d802      	bhi.n	8e14 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8e0e:	4638      	mov	r0, r7
    8e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e14:	4805      	ldr	r0, [pc, #20]	; (8e2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8e16:	4642      	mov	r2, r8
    8e18:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8e1c:	b118      	cbz	r0, 8e26 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e1e:	5740      	ldrsb	r0, [r0, r5]
    8e20:	4282      	cmp	r2, r0
    8e22:	dd00      	ble.n	8e26 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e24:	4602      	mov	r2, r0
    8e26:	7022      	strb	r2, [r4, #0]
    8e28:	2000      	movs	r0, #0
    8e2a:	e7f1      	b.n	8e10 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8e2c:	20001004 	.word	0x20001004

00008e30 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8e30:	4801      	ldr	r0, [pc, #4]	; (8e38 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8e32:	7800      	ldrb	r0, [r0, #0]
    8e34:	4770      	bx	lr
    8e36:	0000      	.short	0x0000
    8e38:	200002e4 	.word	0x200002e4

00008e3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8e3c:	4905      	ldr	r1, [pc, #20]	; (8e54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8e3e:	780a      	ldrb	r2, [r1, #0]
    8e40:	4290      	cmp	r0, r2
    8e42:	d301      	bcc.n	8e48 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8e44:	2000      	movs	r0, #0
    8e46:	4770      	bx	lr
    8e48:	6849      	ldr	r1, [r1, #4]
    8e4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8e4e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8e52:	4770      	bx	lr
    8e54:	200002e4 	.word	0x200002e4

00008e58 <MPSL_IRQ_RADIO_Handler>:
    8e58:	490e      	ldr	r1, [pc, #56]	; (8e94 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8e5a:	b510      	push	{r4, lr}
    8e5c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8e60:	2820      	cmp	r0, #32
    8e62:	d012      	beq.n	8e8a <MPSL_IRQ_RADIO_Handler+0x32>
    8e64:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8e68:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8e6c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8e70:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8e74:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8e78:	6840      	ldr	r0, [r0, #4]
    8e7a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8e7e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e86:	2104      	movs	r1, #4
    8e88:	4710      	bx	r2
    8e8a:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8e8e:	2070      	movs	r0, #112	; 0x70
    8e90:	f003 fb04 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e94:	20001418 	.word	0x20001418
    8e98:	b570      	push	{r4, r5, r6, lr}
    8e9a:	4605      	mov	r5, r0
    8e9c:	2a20      	cmp	r2, #32
    8e9e:	d028      	beq.n	8ef2 <MPSL_IRQ_RADIO_Handler+0x9a>
    8ea0:	4819      	ldr	r0, [pc, #100]	; (8f08 <MPSL_IRQ_RADIO_Handler+0xb0>)
    8ea2:	4c1a      	ldr	r4, [pc, #104]	; (8f0c <MPSL_IRQ_RADIO_Handler+0xb4>)
    8ea4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8ea8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8eac:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8eb0:	4423      	add	r3, r4
    8eb2:	2920      	cmp	r1, #32
    8eb4:	d022      	beq.n	8efc <MPSL_IRQ_RADIO_Handler+0xa4>
    8eb6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8eba:	7840      	ldrb	r0, [r0, #1]
    8ebc:	784c      	ldrb	r4, [r1, #1]
    8ebe:	7048      	strb	r0, [r1, #1]
    8ec0:	4620      	mov	r0, r4
    8ec2:	4601      	mov	r1, r0
    8ec4:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8ec8:	4291      	cmp	r1, r2
    8eca:	7005      	strb	r5, [r0, #0]
    8ecc:	7840      	ldrb	r0, [r0, #1]
    8ece:	d1f8      	bne.n	8ec2 <MPSL_IRQ_RADIO_Handler+0x6a>
    8ed0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8ed4:	2a20      	cmp	r2, #32
    8ed6:	bf1a      	itte	ne
    8ed8:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8edc:	7054      	strbne	r4, [r2, #1]
    8ede:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8ee2:	2220      	movs	r2, #32
    8ee4:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8ee8:	f88c 2001 	strb.w	r2, [ip, #1]
    8eec:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8ef0:	bd70      	pop	{r4, r5, r6, pc}
    8ef2:	f44f 7126 	mov.w	r1, #664	; 0x298
    8ef6:	2070      	movs	r0, #112	; 0x70
    8ef8:	f003 fad0 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8efc:	f893 4020 	ldrb.w	r4, [r3, #32]
    8f00:	7840      	ldrb	r0, [r0, #1]
    8f02:	f883 0020 	strb.w	r0, [r3, #32]
    8f06:	e7db      	b.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x68>
    8f08:	20001398 	.word	0x20001398
    8f0c:	20001418 	.word	0x20001418
    8f10:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f14:	b08d      	sub	sp, #52	; 0x34
    8f16:	4615      	mov	r5, r2
    8f18:	460c      	mov	r4, r1
    8f1a:	f002 f9e9 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8f1e:	4428      	add	r0, r5
    8f20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8f24:	9008      	str	r0, [sp, #32]
    8f26:	6821      	ldr	r1, [r4, #0]
    8f28:	1a08      	subs	r0, r1, r0
    8f2a:	0200      	lsls	r0, r0, #8
    8f2c:	17c1      	asrs	r1, r0, #31
    8f2e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8f32:	1200      	asrs	r0, r0, #8
    8f34:	2800      	cmp	r0, #0
    8f36:	f300 80f0 	bgt.w	911a <MPSL_IRQ_RADIO_Handler+0x2c2>
    8f3a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8f3e:	48cd      	ldr	r0, [pc, #820]	; (9274 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8f40:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8f44:	4408      	add	r0, r1
    8f46:	9009      	str	r0, [sp, #36]	; 0x24
    8f48:	f890 5020 	ldrb.w	r5, [r0, #32]
    8f4c:	2020      	movs	r0, #32
    8f4e:	4eca      	ldr	r6, [pc, #808]	; (9278 <MPSL_IRQ_RADIO_Handler+0x420>)
    8f50:	f10d 0a18 	add.w	sl, sp, #24
    8f54:	f10d 091c 	add.w	r9, sp, #28
    8f58:	f88d 0018 	strb.w	r0, [sp, #24]
    8f5c:	2d20      	cmp	r5, #32
    8f5e:	bf1c      	itt	ne
    8f60:	48c6      	ldrne	r0, [pc, #792]	; (927c <MPSL_IRQ_RADIO_Handler+0x424>)
    8f62:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8f66:	d038      	beq.n	8fda <MPSL_IRQ_RADIO_Handler+0x182>
    8f68:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8f6c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8f70:	f100 0108 	add.w	r1, r0, #8
    8f74:	68c0      	ldr	r0, [r0, #12]
    8f76:	6827      	ldr	r7, [r4, #0]
    8f78:	1a38      	subs	r0, r7, r0
    8f7a:	0200      	lsls	r0, r0, #8
    8f7c:	17c2      	asrs	r2, r0, #31
    8f7e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f82:	1200      	asrs	r0, r0, #8
    8f84:	d429      	bmi.n	8fda <MPSL_IRQ_RADIO_Handler+0x182>
    8f86:	89e0      	ldrh	r0, [r4, #14]
    8f88:	b300      	cbz	r0, 8fcc <MPSL_IRQ_RADIO_Handler+0x174>
    8f8a:	89c8      	ldrh	r0, [r1, #14]
    8f8c:	b9f0      	cbnz	r0, 8fcc <MPSL_IRQ_RADIO_Handler+0x174>
    8f8e:	6808      	ldr	r0, [r1, #0]
    8f90:	9003      	str	r0, [sp, #12]
    8f92:	f003 f8c5 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f96:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f9a:	bf08      	it	eq
    8f9c:	200d      	moveq	r0, #13
    8f9e:	d00b      	beq.n	8fb8 <MPSL_IRQ_RADIO_Handler+0x160>
    8fa0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8fa4:	3856      	subs	r0, #86	; 0x56
    8fa6:	bf08      	it	eq
    8fa8:	201c      	moveq	r0, #28
    8faa:	d005      	beq.n	8fb8 <MPSL_IRQ_RADIO_Handler+0x160>
    8fac:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8fb0:	389f      	subs	r0, #159	; 0x9f
    8fb2:	bf14      	ite	ne
    8fb4:	2000      	movne	r0, #0
    8fb6:	2032      	moveq	r0, #50	; 0x32
    8fb8:	1c41      	adds	r1, r0, #1
    8fba:	9803      	ldr	r0, [sp, #12]
    8fbc:	1a38      	subs	r0, r7, r0
    8fbe:	0200      	lsls	r0, r0, #8
    8fc0:	17c2      	asrs	r2, r0, #31
    8fc2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8fc6:	1200      	asrs	r0, r0, #8
    8fc8:	4288      	cmp	r0, r1
    8fca:	db06      	blt.n	8fda <MPSL_IRQ_RADIO_Handler+0x182>
    8fcc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8fd0:	f88a 5000 	strb.w	r5, [sl]
    8fd4:	7845      	ldrb	r5, [r0, #1]
    8fd6:	2d20      	cmp	r5, #32
    8fd8:	d1c6      	bne.n	8f68 <MPSL_IRQ_RADIO_Handler+0x110>
    8fda:	f89a 0000 	ldrb.w	r0, [sl]
    8fde:	f889 0000 	strb.w	r0, [r9]
    8fe2:	2d20      	cmp	r5, #32
    8fe4:	bf1c      	itt	ne
    8fe6:	48a5      	ldrne	r0, [pc, #660]	; (927c <MPSL_IRQ_RADIO_Handler+0x424>)
    8fe8:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8fec:	f000 813e 	beq.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    8ff0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8ff4:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8ff8:	6861      	ldr	r1, [r4, #4]
    8ffa:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8ffe:	f107 0008 	add.w	r0, r7, #8
    9002:	eba8 0101 	sub.w	r1, r8, r1
    9006:	0209      	lsls	r1, r1, #8
    9008:	17ca      	asrs	r2, r1, #31
    900a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    900e:	1209      	asrs	r1, r1, #8
    9010:	d427      	bmi.n	9062 <MPSL_IRQ_RADIO_Handler+0x20a>
    9012:	89c0      	ldrh	r0, [r0, #14]
    9014:	2800      	cmp	r0, #0
    9016:	f000 8129 	beq.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    901a:	89e0      	ldrh	r0, [r4, #14]
    901c:	2800      	cmp	r0, #0
    901e:	f040 8125 	bne.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    9022:	f8d4 a000 	ldr.w	sl, [r4]
    9026:	f003 f87b 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    902a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    902e:	bf08      	it	eq
    9030:	200d      	moveq	r0, #13
    9032:	d00b      	beq.n	904c <MPSL_IRQ_RADIO_Handler+0x1f4>
    9034:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9038:	3856      	subs	r0, #86	; 0x56
    903a:	bf08      	it	eq
    903c:	201c      	moveq	r0, #28
    903e:	d005      	beq.n	904c <MPSL_IRQ_RADIO_Handler+0x1f4>
    9040:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9044:	389f      	subs	r0, #159	; 0x9f
    9046:	bf14      	ite	ne
    9048:	2000      	movne	r0, #0
    904a:	2032      	moveq	r0, #50	; 0x32
    904c:	1c41      	adds	r1, r0, #1
    904e:	eba8 000a 	sub.w	r0, r8, sl
    9052:	0200      	lsls	r0, r0, #8
    9054:	17c2      	asrs	r2, r0, #31
    9056:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    905a:	1200      	asrs	r0, r0, #8
    905c:	4288      	cmp	r0, r1
    905e:	f280 8105 	bge.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    9062:	f889 5000 	strb.w	r5, [r9]
    9066:	7e38      	ldrb	r0, [r7, #24]
    9068:	7c21      	ldrb	r1, [r4, #16]
    906a:	4288      	cmp	r0, r1
    906c:	d906      	bls.n	907c <MPSL_IRQ_RADIO_Handler+0x224>
    906e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9072:	7845      	ldrb	r5, [r0, #1]
    9074:	2d20      	cmp	r5, #32
    9076:	d1bb      	bne.n	8ff0 <MPSL_IRQ_RADIO_Handler+0x198>
    9078:	f000 b8f8 	b.w	926c <MPSL_IRQ_RADIO_Handler+0x414>
    907c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    9080:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9084:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9088:	8ac1      	ldrh	r1, [r0, #22]
    908a:	68c5      	ldr	r5, [r0, #12]
    908c:	bbe1      	cbnz	r1, 9108 <MPSL_IRQ_RADIO_Handler+0x2b0>
    908e:	89e1      	ldrh	r1, [r4, #14]
    9090:	b3d1      	cbz	r1, 9108 <MPSL_IRQ_RADIO_Handler+0x2b0>
    9092:	6887      	ldr	r7, [r0, #8]
    9094:	f003 f844 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9098:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    909c:	bf08      	it	eq
    909e:	200d      	moveq	r0, #13
    90a0:	d00b      	beq.n	90ba <MPSL_IRQ_RADIO_Handler+0x262>
    90a2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90a6:	3856      	subs	r0, #86	; 0x56
    90a8:	bf08      	it	eq
    90aa:	201c      	moveq	r0, #28
    90ac:	d005      	beq.n	90ba <MPSL_IRQ_RADIO_Handler+0x262>
    90ae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90b2:	389f      	subs	r0, #159	; 0x9f
    90b4:	bf14      	ite	ne
    90b6:	2000      	movne	r0, #0
    90b8:	2032      	moveq	r0, #50	; 0x32
    90ba:	1c41      	adds	r1, r0, #1
    90bc:	1be8      	subs	r0, r5, r7
    90be:	0200      	lsls	r0, r0, #8
    90c0:	17c2      	asrs	r2, r0, #31
    90c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90c6:	1200      	asrs	r0, r0, #8
    90c8:	4288      	cmp	r0, r1
    90ca:	da1d      	bge.n	9108 <MPSL_IRQ_RADIO_Handler+0x2b0>
    90cc:	f003 f828 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90d0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90d4:	bf08      	it	eq
    90d6:	200d      	moveq	r0, #13
    90d8:	d00b      	beq.n	90f2 <MPSL_IRQ_RADIO_Handler+0x29a>
    90da:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90de:	3856      	subs	r0, #86	; 0x56
    90e0:	bf08      	it	eq
    90e2:	201c      	moveq	r0, #28
    90e4:	d005      	beq.n	90f2 <MPSL_IRQ_RADIO_Handler+0x29a>
    90e6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90ea:	389f      	subs	r0, #159	; 0x9f
    90ec:	bf14      	ite	ne
    90ee:	2000      	movne	r0, #0
    90f0:	2032      	moveq	r0, #50	; 0x32
    90f2:	f89d 101c 	ldrb.w	r1, [sp, #28]
    90f6:	1c40      	adds	r0, r0, #1
    90f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    90fc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9100:	6889      	ldr	r1, [r1, #8]
    9102:	4408      	add	r0, r1
    9104:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    9108:	9808      	ldr	r0, [sp, #32]
    910a:	1a28      	subs	r0, r5, r0
    910c:	0200      	lsls	r0, r0, #8
    910e:	17c1      	asrs	r1, r0, #31
    9110:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9114:	1200      	asrs	r0, r0, #8
    9116:	2800      	cmp	r0, #0
    9118:	dd03      	ble.n	9122 <MPSL_IRQ_RADIO_Handler+0x2ca>
    911a:	b011      	add	sp, #68	; 0x44
    911c:	2000      	movs	r0, #0
    911e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9122:	6820      	ldr	r0, [r4, #0]
    9124:	42a8      	cmp	r0, r5
    9126:	d902      	bls.n	912e <MPSL_IRQ_RADIO_Handler+0x2d6>
    9128:	68a1      	ldr	r1, [r4, #8]
    912a:	1c49      	adds	r1, r1, #1
    912c:	60a1      	str	r1, [r4, #8]
    912e:	6861      	ldr	r1, [r4, #4]
    9130:	f10d 0a18 	add.w	sl, sp, #24
    9134:	1a08      	subs	r0, r1, r0
    9136:	4428      	add	r0, r5
    9138:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    913c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9140:	e9c4 1000 	strd	r1, r0, [r4]
    9144:	9810      	ldr	r0, [sp, #64]	; 0x40
    9146:	900b      	str	r0, [sp, #44]	; 0x2c
    9148:	9809      	ldr	r0, [sp, #36]	; 0x24
    914a:	f10d 081c 	add.w	r8, sp, #28
    914e:	f890 5020 	ldrb.w	r5, [r0, #32]
    9152:	2020      	movs	r0, #32
    9154:	f88d 0018 	strb.w	r0, [sp, #24]
    9158:	2d20      	cmp	r5, #32
    915a:	d03c      	beq.n	91d6 <MPSL_IRQ_RADIO_Handler+0x37e>
    915c:	4947      	ldr	r1, [pc, #284]	; (927c <MPSL_IRQ_RADIO_Handler+0x424>)
    915e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9160:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    9164:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9168:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    916c:	f100 0108 	add.w	r1, r0, #8
    9170:	68c0      	ldr	r0, [r0, #12]
    9172:	6827      	ldr	r7, [r4, #0]
    9174:	1a38      	subs	r0, r7, r0
    9176:	0200      	lsls	r0, r0, #8
    9178:	17c2      	asrs	r2, r0, #31
    917a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    917e:	1200      	asrs	r0, r0, #8
    9180:	d429      	bmi.n	91d6 <MPSL_IRQ_RADIO_Handler+0x37e>
    9182:	89e0      	ldrh	r0, [r4, #14]
    9184:	b300      	cbz	r0, 91c8 <MPSL_IRQ_RADIO_Handler+0x370>
    9186:	89c8      	ldrh	r0, [r1, #14]
    9188:	b9f0      	cbnz	r0, 91c8 <MPSL_IRQ_RADIO_Handler+0x370>
    918a:	f8d1 9000 	ldr.w	r9, [r1]
    918e:	f002 ffc7 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9192:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9196:	bf08      	it	eq
    9198:	200d      	moveq	r0, #13
    919a:	d00b      	beq.n	91b4 <MPSL_IRQ_RADIO_Handler+0x35c>
    919c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91a0:	3856      	subs	r0, #86	; 0x56
    91a2:	bf08      	it	eq
    91a4:	201c      	moveq	r0, #28
    91a6:	d005      	beq.n	91b4 <MPSL_IRQ_RADIO_Handler+0x35c>
    91a8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91ac:	389f      	subs	r0, #159	; 0x9f
    91ae:	bf14      	ite	ne
    91b0:	2000      	movne	r0, #0
    91b2:	2032      	moveq	r0, #50	; 0x32
    91b4:	1c41      	adds	r1, r0, #1
    91b6:	eba7 0009 	sub.w	r0, r7, r9
    91ba:	0200      	lsls	r0, r0, #8
    91bc:	17c2      	asrs	r2, r0, #31
    91be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91c2:	1200      	asrs	r0, r0, #8
    91c4:	4288      	cmp	r0, r1
    91c6:	db06      	blt.n	91d6 <MPSL_IRQ_RADIO_Handler+0x37e>
    91c8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    91cc:	f88a 5000 	strb.w	r5, [sl]
    91d0:	7845      	ldrb	r5, [r0, #1]
    91d2:	2d20      	cmp	r5, #32
    91d4:	d1c6      	bne.n	9164 <MPSL_IRQ_RADIO_Handler+0x30c>
    91d6:	f89a 0000 	ldrb.w	r0, [sl]
    91da:	f888 0000 	strb.w	r0, [r8]
    91de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    91e0:	2d20      	cmp	r5, #32
    91e2:	bf1c      	itt	ne
    91e4:	4925      	ldrne	r1, [pc, #148]	; (927c <MPSL_IRQ_RADIO_Handler+0x424>)
    91e6:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    91ea:	d03f      	beq.n	926c <MPSL_IRQ_RADIO_Handler+0x414>
    91ec:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    91f0:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    91f4:	6860      	ldr	r0, [r4, #4]
    91f6:	f8d7 9008 	ldr.w	r9, [r7, #8]
    91fa:	f107 0108 	add.w	r1, r7, #8
    91fe:	eba9 0000 	sub.w	r0, r9, r0
    9202:	0200      	lsls	r0, r0, #8
    9204:	17c2      	asrs	r2, r0, #31
    9206:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    920a:	1200      	asrs	r0, r0, #8
    920c:	d422      	bmi.n	9254 <MPSL_IRQ_RADIO_Handler+0x3fc>
    920e:	89c8      	ldrh	r0, [r1, #14]
    9210:	b360      	cbz	r0, 926c <MPSL_IRQ_RADIO_Handler+0x414>
    9212:	89e0      	ldrh	r0, [r4, #14]
    9214:	bb50      	cbnz	r0, 926c <MPSL_IRQ_RADIO_Handler+0x414>
    9216:	f8d4 a000 	ldr.w	sl, [r4]
    921a:	f002 ff81 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    921e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9222:	bf08      	it	eq
    9224:	200d      	moveq	r0, #13
    9226:	d00b      	beq.n	9240 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9228:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    922c:	3856      	subs	r0, #86	; 0x56
    922e:	bf08      	it	eq
    9230:	201c      	moveq	r0, #28
    9232:	d005      	beq.n	9240 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9234:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9238:	389f      	subs	r0, #159	; 0x9f
    923a:	bf14      	ite	ne
    923c:	2000      	movne	r0, #0
    923e:	2032      	moveq	r0, #50	; 0x32
    9240:	1c41      	adds	r1, r0, #1
    9242:	eba9 000a 	sub.w	r0, r9, sl
    9246:	0200      	lsls	r0, r0, #8
    9248:	17c2      	asrs	r2, r0, #31
    924a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    924e:	1200      	asrs	r0, r0, #8
    9250:	4288      	cmp	r0, r1
    9252:	da0b      	bge.n	926c <MPSL_IRQ_RADIO_Handler+0x414>
    9254:	f888 5000 	strb.w	r5, [r8]
    9258:	7e38      	ldrb	r0, [r7, #24]
    925a:	7c21      	ldrb	r1, [r4, #16]
    925c:	4288      	cmp	r0, r1
    925e:	f67f af0d 	bls.w	907c <MPSL_IRQ_RADIO_Handler+0x224>
    9262:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9266:	7845      	ldrb	r5, [r0, #1]
    9268:	2d20      	cmp	r5, #32
    926a:	d1bf      	bne.n	91ec <MPSL_IRQ_RADIO_Handler+0x394>
    926c:	b011      	add	sp, #68	; 0x44
    926e:	2001      	movs	r0, #1
    9270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9274:	20001418 	.word	0x20001418
    9278:	20001018 	.word	0x20001018
    927c:	20001398 	.word	0x20001398
    9280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9284:	460f      	mov	r7, r1
    9286:	4606      	mov	r6, r0
    9288:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    928c:	494b      	ldr	r1, [pc, #300]	; (93bc <MPSL_IRQ_RADIO_Handler+0x564>)
    928e:	4699      	mov	r9, r3
    9290:	4408      	add	r0, r1
    9292:	4692      	mov	sl, r2
    9294:	f890 4020 	ldrb.w	r4, [r0, #32]
    9298:	2020      	movs	r0, #32
    929a:	7010      	strb	r0, [r2, #0]
    929c:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    92a0:	2c20      	cmp	r4, #32
    92a2:	bf1c      	itt	ne
    92a4:	4846      	ldrne	r0, [pc, #280]	; (93c0 <MPSL_IRQ_RADIO_Handler+0x568>)
    92a6:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    92aa:	d038      	beq.n	931e <MPSL_IRQ_RADIO_Handler+0x4c6>
    92ac:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    92b0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    92b4:	f100 0108 	add.w	r1, r0, #8
    92b8:	68c0      	ldr	r0, [r0, #12]
    92ba:	6835      	ldr	r5, [r6, #0]
    92bc:	1a28      	subs	r0, r5, r0
    92be:	0200      	lsls	r0, r0, #8
    92c0:	17c2      	asrs	r2, r0, #31
    92c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    92c6:	1200      	asrs	r0, r0, #8
    92c8:	d429      	bmi.n	931e <MPSL_IRQ_RADIO_Handler+0x4c6>
    92ca:	89f0      	ldrh	r0, [r6, #14]
    92cc:	b300      	cbz	r0, 9310 <MPSL_IRQ_RADIO_Handler+0x4b8>
    92ce:	89c8      	ldrh	r0, [r1, #14]
    92d0:	b9f0      	cbnz	r0, 9310 <MPSL_IRQ_RADIO_Handler+0x4b8>
    92d2:	6808      	ldr	r0, [r1, #0]
    92d4:	9000      	str	r0, [sp, #0]
    92d6:	f002 ff23 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92da:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92de:	bf08      	it	eq
    92e0:	200d      	moveq	r0, #13
    92e2:	d00b      	beq.n	92fc <MPSL_IRQ_RADIO_Handler+0x4a4>
    92e4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    92e8:	3856      	subs	r0, #86	; 0x56
    92ea:	bf08      	it	eq
    92ec:	201c      	moveq	r0, #28
    92ee:	d005      	beq.n	92fc <MPSL_IRQ_RADIO_Handler+0x4a4>
    92f0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    92f4:	389f      	subs	r0, #159	; 0x9f
    92f6:	bf14      	ite	ne
    92f8:	2000      	movne	r0, #0
    92fa:	2032      	moveq	r0, #50	; 0x32
    92fc:	1c41      	adds	r1, r0, #1
    92fe:	9800      	ldr	r0, [sp, #0]
    9300:	1a28      	subs	r0, r5, r0
    9302:	0200      	lsls	r0, r0, #8
    9304:	17c2      	asrs	r2, r0, #31
    9306:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    930a:	1200      	asrs	r0, r0, #8
    930c:	4288      	cmp	r0, r1
    930e:	db06      	blt.n	931e <MPSL_IRQ_RADIO_Handler+0x4c6>
    9310:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9314:	f88a 4000 	strb.w	r4, [sl]
    9318:	7844      	ldrb	r4, [r0, #1]
    931a:	2c20      	cmp	r4, #32
    931c:	d1c6      	bne.n	92ac <MPSL_IRQ_RADIO_Handler+0x454>
    931e:	f89a 0000 	ldrb.w	r0, [sl]
    9322:	f889 0000 	strb.w	r0, [r9]
    9326:	2c20      	cmp	r4, #32
    9328:	bf1c      	itt	ne
    932a:	4825      	ldrne	r0, [pc, #148]	; (93c0 <MPSL_IRQ_RADIO_Handler+0x568>)
    932c:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    9330:	d040      	beq.n	93b4 <MPSL_IRQ_RADIO_Handler+0x55c>
    9332:	bf00      	nop
    9334:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9338:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    933c:	6870      	ldr	r0, [r6, #4]
    933e:	68bd      	ldr	r5, [r7, #8]
    9340:	f107 0108 	add.w	r1, r7, #8
    9344:	1a28      	subs	r0, r5, r0
    9346:	0200      	lsls	r0, r0, #8
    9348:	17c2      	asrs	r2, r0, #31
    934a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    934e:	1200      	asrs	r0, r0, #8
    9350:	d422      	bmi.n	9398 <MPSL_IRQ_RADIO_Handler+0x540>
    9352:	89c8      	ldrh	r0, [r1, #14]
    9354:	b370      	cbz	r0, 93b4 <MPSL_IRQ_RADIO_Handler+0x55c>
    9356:	89f0      	ldrh	r0, [r6, #14]
    9358:	bb60      	cbnz	r0, 93b4 <MPSL_IRQ_RADIO_Handler+0x55c>
    935a:	f8d6 b000 	ldr.w	fp, [r6]
    935e:	f002 fedf 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9362:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9366:	bf08      	it	eq
    9368:	200d      	moveq	r0, #13
    936a:	d00b      	beq.n	9384 <MPSL_IRQ_RADIO_Handler+0x52c>
    936c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9370:	3856      	subs	r0, #86	; 0x56
    9372:	bf08      	it	eq
    9374:	201c      	moveq	r0, #28
    9376:	d005      	beq.n	9384 <MPSL_IRQ_RADIO_Handler+0x52c>
    9378:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    937c:	389f      	subs	r0, #159	; 0x9f
    937e:	bf14      	ite	ne
    9380:	2000      	movne	r0, #0
    9382:	2032      	moveq	r0, #50	; 0x32
    9384:	1c41      	adds	r1, r0, #1
    9386:	eba5 000b 	sub.w	r0, r5, fp
    938a:	0200      	lsls	r0, r0, #8
    938c:	17c2      	asrs	r2, r0, #31
    938e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9392:	1200      	asrs	r0, r0, #8
    9394:	4288      	cmp	r0, r1
    9396:	da0d      	bge.n	93b4 <MPSL_IRQ_RADIO_Handler+0x55c>
    9398:	f889 4000 	strb.w	r4, [r9]
    939c:	7e38      	ldrb	r0, [r7, #24]
    939e:	7c31      	ldrb	r1, [r6, #16]
    93a0:	4288      	cmp	r0, r1
    93a2:	d802      	bhi.n	93aa <MPSL_IRQ_RADIO_Handler+0x552>
    93a4:	2000      	movs	r0, #0
    93a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93aa:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    93ae:	7844      	ldrb	r4, [r0, #1]
    93b0:	2c20      	cmp	r4, #32
    93b2:	d1bf      	bne.n	9334 <MPSL_IRQ_RADIO_Handler+0x4dc>
    93b4:	2001      	movs	r0, #1
    93b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93ba:	0000      	.short	0x0000
    93bc:	20001418 	.word	0x20001418
    93c0:	20001398 	.word	0x20001398
    93c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93c8:	b098      	sub	sp, #96	; 0x60
    93ca:	4615      	mov	r5, r2
    93cc:	f002 fa52 	bl	b874 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    93d0:	4604      	mov	r4, r0
    93d2:	f002 fccd 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    93d6:	4606      	mov	r6, r0
    93d8:	9819      	ldr	r0, [sp, #100]	; 0x64
    93da:	2801      	cmp	r0, #1
    93dc:	bf18      	it	ne
    93de:	2802      	cmpne	r0, #2
    93e0:	d005      	beq.n	93ee <MPSL_IRQ_RADIO_Handler+0x596>
    93e2:	f640 1192 	movw	r1, #2450	; 0x992
    93e6:	f04f 0070 	mov.w	r0, #112	; 0x70
    93ea:	f003 f857 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93ee:	49f9      	ldr	r1, [pc, #996]	; (97d4 <MPSL_IRQ_RADIO_Handler+0x97c>)
    93f0:	2001      	movs	r0, #1
    93f2:	6008      	str	r0, [r1, #0]
    93f4:	49f8      	ldr	r1, [pc, #992]	; (97d8 <MPSL_IRQ_RADIO_Handler+0x980>)
    93f6:	6889      	ldr	r1, [r1, #8]
    93f8:	6008      	str	r0, [r1, #0]
    93fa:	2000      	movs	r0, #0
    93fc:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9400:	900a      	str	r0, [sp, #40]	; 0x28
    9402:	1e40      	subs	r0, r0, #1
    9404:	900b      	str	r0, [sp, #44]	; 0x2c
    9406:	49f5      	ldr	r1, [pc, #980]	; (97dc <MPSL_IRQ_RADIO_Handler+0x984>)
    9408:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    940c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9410:	f101 0008 	add.w	r0, r1, #8
    9414:	6989      	ldr	r1, [r1, #24]
    9416:	e890 100d 	ldmia.w	r0, {r0, r2, r3, ip}
    941a:	af0c      	add	r7, sp, #48	; 0x30
    941c:	9110      	str	r1, [sp, #64]	; 0x40
    941e:	e887 100d 	stmia.w	r7, {r0, r2, r3, ip}
    9422:	f007 fb44 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9426:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    942a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    942e:	4602      	mov	r2, r0
    9430:	4441      	add	r1, r8
    9432:	1c49      	adds	r1, r1, #1
    9434:	4bea      	ldr	r3, [pc, #936]	; (97e0 <MPSL_IRQ_RADIO_Handler+0x988>)
    9436:	4408      	add	r0, r1
    9438:	429a      	cmp	r2, r3
    943a:	d854      	bhi.n	94e6 <MPSL_IRQ_RADIO_Handler+0x68e>
    943c:	4de9      	ldr	r5, [pc, #932]	; (97e4 <MPSL_IRQ_RADIO_Handler+0x98c>)
    943e:	42a9      	cmp	r1, r5
    9440:	dc58      	bgt.n	94f4 <MPSL_IRQ_RADIO_Handler+0x69c>
    9442:	426a      	negs	r2, r5
    9444:	4291      	cmp	r1, r2
    9446:	db5d      	blt.n	9504 <MPSL_IRQ_RADIO_Handler+0x6ac>
    9448:	1c59      	adds	r1, r3, #1
    944a:	4281      	cmp	r1, r0
    944c:	bfdc      	itt	le
    944e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9452:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9456:	dd05      	ble.n	9464 <MPSL_IRQ_RADIO_Handler+0x60c>
    9458:	2800      	cmp	r0, #0
    945a:	bfbc      	itt	lt
    945c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9460:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9464:	9014      	str	r0, [sp, #80]	; 0x50
    9466:	48e0      	ldr	r0, [pc, #896]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9468:	f1b8 0f00 	cmp.w	r8, #0
    946c:	8b80      	ldrh	r0, [r0, #28]
    946e:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    9472:	bf14      	ite	ne
    9474:	f04f 0a01 	movne.w	sl, #1
    9478:	f04f 0a00 	moveq.w	sl, #0
    947c:	f002 ff96 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9480:	9016      	str	r0, [sp, #88]	; 0x58
    9482:	f1ba 0f00 	cmp.w	sl, #0
    9486:	d008      	beq.n	949a <MPSL_IRQ_RADIO_Handler+0x642>
    9488:	48d7      	ldr	r0, [pc, #860]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    948a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    948c:	f1b0 3fff 	cmp.w	r0, #4294967295
    9490:	bf02      	ittt	eq
    9492:	9816      	ldreq	r0, [sp, #88]	; 0x58
    9494:	2800      	cmpeq	r0, #0
    9496:	2701      	moveq	r7, #1
    9498:	d001      	beq.n	949e <MPSL_IRQ_RADIO_Handler+0x646>
    949a:	f04f 0700 	mov.w	r7, #0
    949e:	f002 fe3f 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94a2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94a6:	bf08      	it	eq
    94a8:	200d      	moveq	r0, #13
    94aa:	d00b      	beq.n	94c4 <MPSL_IRQ_RADIO_Handler+0x66c>
    94ac:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94b0:	3856      	subs	r0, #86	; 0x56
    94b2:	bf08      	it	eq
    94b4:	201c      	moveq	r0, #28
    94b6:	d005      	beq.n	94c4 <MPSL_IRQ_RADIO_Handler+0x66c>
    94b8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94bc:	389f      	subs	r0, #159	; 0x9f
    94be:	bf14      	ite	ne
    94c0:	2000      	movne	r0, #0
    94c2:	2032      	moveq	r0, #50	; 0x32
    94c4:	f04f 0900 	mov.w	r9, #0
    94c8:	46cb      	mov	fp, r9
    94ca:	9013      	str	r0, [sp, #76]	; 0x4c
    94cc:	4546      	cmp	r6, r8
    94ce:	d936      	bls.n	953e <MPSL_IRQ_RADIO_Handler+0x6e6>
    94d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    94d2:	f8df 930c 	ldr.w	r9, [pc, #780]	; 97e0 <MPSL_IRQ_RADIO_Handler+0x988>
    94d6:	ea6f 0c06 	mvn.w	ip, r6
    94da:	4669      	mov	r1, sp
    94dc:	aa17      	add	r2, sp, #92	; 0x5c
    94de:	eb03 000c 	add.w	r0, r3, ip
    94e2:	454b      	cmp	r3, r9
    94e4:	d904      	bls.n	94f0 <MPSL_IRQ_RADIO_Handler+0x698>
    94e6:	f240 519e 	movw	r1, #1438	; 0x59e
    94ea:	2070      	movs	r0, #112	; 0x70
    94ec:	f002 ffd6 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94f0:	45ac      	cmp	ip, r5
    94f2:	dd04      	ble.n	94fe <MPSL_IRQ_RADIO_Handler+0x6a6>
    94f4:	f240 519f 	movw	r1, #1439	; 0x59f
    94f8:	2070      	movs	r0, #112	; 0x70
    94fa:	f002 ffcf 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94fe:	4bbb      	ldr	r3, [pc, #748]	; (97ec <MPSL_IRQ_RADIO_Handler+0x994>)
    9500:	459c      	cmp	ip, r3
    9502:	da04      	bge.n	950e <MPSL_IRQ_RADIO_Handler+0x6b6>
    9504:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9508:	2070      	movs	r0, #112	; 0x70
    950a:	f002 ffc7 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    950e:	4bb8      	ldr	r3, [pc, #736]	; (97f0 <MPSL_IRQ_RADIO_Handler+0x998>)
    9510:	4283      	cmp	r3, r0
    9512:	bfdc      	itt	le
    9514:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9518:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    951c:	dd05      	ble.n	952a <MPSL_IRQ_RADIO_Handler+0x6d2>
    951e:	2800      	cmp	r0, #0
    9520:	bfbc      	itt	lt
    9522:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9526:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    952a:	f001 fefd 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    952e:	9800      	ldr	r0, [sp, #0]
    9530:	990c      	ldr	r1, [sp, #48]	; 0x30
    9532:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9536:	9000      	str	r0, [sp, #0]
    9538:	1a08      	subs	r0, r1, r0
    953a:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    953e:	2f00      	cmp	r7, #0
    9540:	bf18      	it	ne
    9542:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    9546:	d105      	bne.n	9554 <MPSL_IRQ_RADIO_Handler+0x6fc>
    9548:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    954c:	2800      	cmp	r0, #0
    954e:	bf18      	it	ne
    9550:	f04f 0b02 	movne.w	fp, #2
    9554:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9558:	d008      	beq.n	956c <MPSL_IRQ_RADIO_Handler+0x714>
    955a:	980c      	ldr	r0, [sp, #48]	; 0x30
    955c:	1b00      	subs	r0, r0, r4
    955e:	0200      	lsls	r0, r0, #8
    9560:	17c1      	asrs	r1, r0, #31
    9562:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9566:	1200      	asrs	r0, r0, #8
    9568:	2801      	cmp	r0, #1
    956a:	da02      	bge.n	9572 <MPSL_IRQ_RADIO_Handler+0x71a>
    956c:	2003      	movs	r0, #3
    956e:	9d18      	ldr	r5, [sp, #96]	; 0x60
    9570:	e00d      	b.n	958e <MPSL_IRQ_RADIO_Handler+0x736>
    9572:	b157      	cbz	r7, 958a <MPSL_IRQ_RADIO_Handler+0x732>
    9574:	489c      	ldr	r0, [pc, #624]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9576:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    957a:	b130      	cbz	r0, 958a <MPSL_IRQ_RADIO_Handler+0x732>
    957c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9580:	f110 0b00 	adds.w	fp, r0, #0
    9584:	bf18      	it	ne
    9586:	f04f 0b02 	movne.w	fp, #2
    958a:	4625      	mov	r5, r4
    958c:	2000      	movs	r0, #0
    958e:	4483      	add	fp, r0
    9590:	980c      	ldr	r0, [sp, #48]	; 0x30
    9592:	eba0 0009 	sub.w	r0, r0, r9
    9596:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    959a:	1e48      	subs	r0, r1, #1
    959c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    95a0:	1b42      	subs	r2, r0, r5
    95a2:	0212      	lsls	r2, r2, #8
    95a4:	17d3      	asrs	r3, r2, #31
    95a6:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    95aa:	1212      	asrs	r2, r2, #8
    95ac:	455a      	cmp	r2, fp
    95ae:	db04      	blt.n	95ba <MPSL_IRQ_RADIO_Handler+0x762>
    95b0:	f1b9 0f00 	cmp.w	r9, #0
    95b4:	bf18      	it	ne
    95b6:	910c      	strne	r1, [sp, #48]	; 0x30
    95b8:	e02d      	b.n	9616 <MPSL_IRQ_RADIO_Handler+0x7be>
    95ba:	f1b9 0f00 	cmp.w	r9, #0
    95be:	d005      	beq.n	95cc <MPSL_IRQ_RADIO_Handler+0x774>
    95c0:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    95c4:	b920      	cbnz	r0, 95d0 <MPSL_IRQ_RADIO_Handler+0x778>
    95c6:	f002 fbc9 	bl	bd5c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    95ca:	b108      	cbz	r0, 95d0 <MPSL_IRQ_RADIO_Handler+0x778>
    95cc:	b9af      	cbnz	r7, 95fa <MPSL_IRQ_RADIO_Handler+0x7a2>
    95ce:	e00c      	b.n	95ea <MPSL_IRQ_RADIO_Handler+0x792>
    95d0:	b92f      	cbnz	r7, 95de <MPSL_IRQ_RADIO_Handler+0x786>
    95d2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    95d6:	2800      	cmp	r0, #0
    95d8:	bf18      	it	ne
    95da:	f1ab 0b02 	subne.w	fp, fp, #2
    95de:	f04f 0900 	mov.w	r9, #0
    95e2:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    95e6:	464e      	mov	r6, r9
    95e8:	e007      	b.n	95fa <MPSL_IRQ_RADIO_Handler+0x7a2>
    95ea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    95ee:	b120      	cbz	r0, 95fa <MPSL_IRQ_RADIO_Handler+0x7a2>
    95f0:	2000      	movs	r0, #0
    95f2:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    95f6:	f1ab 0b02 	sub.w	fp, fp, #2
    95fa:	980c      	ldr	r0, [sp, #48]	; 0x30
    95fc:	eba0 0109 	sub.w	r1, r0, r9
    9600:	1e48      	subs	r0, r1, #1
    9602:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9606:	1b42      	subs	r2, r0, r5
    9608:	0212      	lsls	r2, r2, #8
    960a:	17d3      	asrs	r3, r2, #31
    960c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9610:	1212      	asrs	r2, r2, #8
    9612:	455a      	cmp	r2, fp
    9614:	db7e      	blt.n	9714 <MPSL_IRQ_RADIO_Handler+0x8bc>
    9616:	4a74      	ldr	r2, [pc, #464]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9618:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    961a:	1a89      	subs	r1, r1, r2
    961c:	0209      	lsls	r1, r1, #8
    961e:	17cb      	asrs	r3, r1, #31
    9620:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    9624:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9626:	1209      	asrs	r1, r1, #8
    9628:	b93b      	cbnz	r3, 963a <MPSL_IRQ_RADIO_Handler+0x7e2>
    962a:	f1b2 3fff 	cmp.w	r2, #4294967295
    962e:	bf1c      	itt	ne
    9630:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    9632:	4291      	cmpne	r1, r2
    9634:	bfb8      	it	lt
    9636:	2100      	movlt	r1, #0
    9638:	db00      	blt.n	963c <MPSL_IRQ_RADIO_Handler+0x7e4>
    963a:	2101      	movs	r1, #1
    963c:	ea3a 0101 	bics.w	r1, sl, r1
    9640:	d168      	bne.n	9714 <MPSL_IRQ_RADIO_Handler+0x8bc>
    9642:	9919      	ldr	r1, [sp, #100]	; 0x64
    9644:	4605      	mov	r5, r0
    9646:	f04f 0900 	mov.w	r9, #0
    964a:	9105      	str	r1, [sp, #20]
    964c:	f001 ffd6 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9650:	1a28      	subs	r0, r5, r0
    9652:	0200      	lsls	r0, r0, #8
    9654:	17c1      	asrs	r1, r0, #31
    9656:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    965a:	ea4f 2b20 	mov.w	fp, r0, asr #8
    965e:	f002 fd5f 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9662:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9666:	bf08      	it	eq
    9668:	200d      	moveq	r0, #13
    966a:	d00b      	beq.n	9684 <MPSL_IRQ_RADIO_Handler+0x82c>
    966c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9670:	3856      	subs	r0, #86	; 0x56
    9672:	bf08      	it	eq
    9674:	201c      	moveq	r0, #28
    9676:	d005      	beq.n	9684 <MPSL_IRQ_RADIO_Handler+0x82c>
    9678:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    967c:	389f      	subs	r0, #159	; 0x9f
    967e:	bf14      	ite	ne
    9680:	2000      	movne	r0, #0
    9682:	2032      	moveq	r0, #50	; 0x32
    9684:	300b      	adds	r0, #11
    9686:	4558      	cmp	r0, fp
    9688:	dd1f      	ble.n	96ca <MPSL_IRQ_RADIO_Handler+0x872>
    968a:	9805      	ldr	r0, [sp, #20]
    968c:	2801      	cmp	r0, #1
    968e:	d001      	beq.n	9694 <MPSL_IRQ_RADIO_Handler+0x83c>
    9690:	b147      	cbz	r7, 96a4 <MPSL_IRQ_RADIO_Handler+0x84c>
    9692:	e012      	b.n	96ba <MPSL_IRQ_RADIO_Handler+0x862>
    9694:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9698:	d11c      	bne.n	96d4 <MPSL_IRQ_RADIO_Handler+0x87c>
    969a:	f640 1113 	movw	r1, #2323	; 0x913
    969e:	2070      	movs	r0, #112	; 0x70
    96a0:	f002 fefc 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96a4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    96a8:	d007      	beq.n	96ba <MPSL_IRQ_RADIO_Handler+0x862>
    96aa:	1b60      	subs	r0, r4, r5
    96ac:	0200      	lsls	r0, r0, #8
    96ae:	17c1      	asrs	r1, r0, #31
    96b0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    96b4:	1200      	asrs	r0, r0, #8
    96b6:	2804      	cmp	r0, #4
    96b8:	dd04      	ble.n	96c4 <MPSL_IRQ_RADIO_Handler+0x86c>
    96ba:	462c      	mov	r4, r5
    96bc:	4620      	mov	r0, r4
    96be:	f001 ffc3 	bl	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    96c2:	e007      	b.n	96d4 <MPSL_IRQ_RADIO_Handler+0x87c>
    96c4:	2800      	cmp	r0, #0
    96c6:	dc62      	bgt.n	978e <MPSL_IRQ_RADIO_Handler+0x936>
    96c8:	e004      	b.n	96d4 <MPSL_IRQ_RADIO_Handler+0x87c>
    96ca:	462c      	mov	r4, r5
    96cc:	4620      	mov	r0, r4
    96ce:	f001 ffbb 	bl	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    96d2:	46d1      	mov	r9, sl
    96d4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    96d8:	d054      	beq.n	9784 <MPSL_IRQ_RADIO_Handler+0x92c>
    96da:	980c      	ldr	r0, [sp, #48]	; 0x30
    96dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    96de:	1b00      	subs	r0, r0, r4
    96e0:	1b12      	subs	r2, r2, r4
    96e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    96e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    96ea:	2801      	cmp	r0, #1
    96ec:	d34f      	bcc.n	978e <MPSL_IRQ_RADIO_Handler+0x936>
    96ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    96f2:	bf98      	it	ls
    96f4:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    96f8:	d849      	bhi.n	978e <MPSL_IRQ_RADIO_Handler+0x936>
    96fa:	4620      	mov	r0, r4
    96fc:	f007 f9d7 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9700:	9914      	ldr	r1, [sp, #80]	; 0x50
    9702:	4a38      	ldr	r2, [pc, #224]	; (97e4 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9704:	1a0d      	subs	r5, r1, r0
    9706:	f04f 0b00 	mov.w	fp, #0
    970a:	1aaa      	subs	r2, r5, r2
    970c:	f17b 0200 	sbcs.w	r2, fp, #0
    9710:	d318      	bcc.n	9744 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9712:	e000      	b.n	9716 <MPSL_IRQ_RADIO_Handler+0x8be>
    9714:	e03b      	b.n	978e <MPSL_IRQ_RADIO_Handler+0x936>
    9716:	4b33      	ldr	r3, [pc, #204]	; (97e4 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9718:	1a42      	subs	r2, r0, r1
    971a:	1ad3      	subs	r3, r2, r3
    971c:	f17b 0300 	sbcs.w	r3, fp, #0
    9720:	d310      	bcc.n	9744 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9722:	4b2f      	ldr	r3, [pc, #188]	; (97e0 <MPSL_IRQ_RADIO_Handler+0x988>)
    9724:	42ab      	cmp	r3, r5
    9726:	bf3e      	ittt	cc
    9728:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    972c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    9730:	1845      	addcc	r5, r0, r1
    9732:	d307      	bcc.n	9744 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9734:	4293      	cmp	r3, r2
    9736:	d22e      	bcs.n	9796 <MPSL_IRQ_RADIO_Handler+0x93e>
    9738:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    973c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    9740:	4408      	add	r0, r1
    9742:	4245      	negs	r5, r0
    9744:	4f28      	ldr	r7, [pc, #160]	; (97e8 <MPSL_IRQ_RADIO_Handler+0x990>)
    9746:	7fb8      	ldrb	r0, [r7, #30]
    9748:	b350      	cbz	r0, 97a0 <MPSL_IRQ_RADIO_Handler+0x948>
    974a:	9819      	ldr	r0, [sp, #100]	; 0x64
    974c:	2801      	cmp	r0, #1
    974e:	d005      	beq.n	975c <MPSL_IRQ_RADIO_Handler+0x904>
    9750:	2002      	movs	r0, #2
    9752:	f002 f9c9 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9756:	2001      	movs	r0, #1
    9758:	f002 f9c6 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    975c:	45b0      	cmp	r8, r6
    975e:	d22b      	bcs.n	97b8 <MPSL_IRQ_RADIO_Handler+0x960>
    9760:	eba5 0106 	sub.w	r1, r5, r6
    9764:	f04f 0002 	mov.w	r0, #2
    9768:	f002 f908 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    976c:	b388      	cbz	r0, 97d2 <MPSL_IRQ_RADIO_Handler+0x97a>
    976e:	f1b8 0f00 	cmp.w	r8, #0
    9772:	bf1c      	itt	ne
    9774:	eba5 0108 	subne.w	r1, r5, r8
    9778:	2001      	movne	r0, #1
    977a:	d043      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x9ac>
    977c:	f002 f8fe 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9780:	b338      	cbz	r0, 97d2 <MPSL_IRQ_RADIO_Handler+0x97a>
    9782:	e03f      	b.n	9804 <MPSL_IRQ_RADIO_Handler+0x9ac>
    9784:	f640 2131 	movw	r1, #2609	; 0xa31
    9788:	2070      	movs	r0, #112	; 0x70
    978a:	f002 fe87 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    978e:	b01b      	add	sp, #108	; 0x6c
    9790:	2000      	movs	r0, #0
    9792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9796:	f640 3105 	movw	r1, #2821	; 0xb05
    979a:	2070      	movs	r0, #112	; 0x70
    979c:	f002 fe7e 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97a0:	45b0      	cmp	r8, r6
    97a2:	bf34      	ite	cc
    97a4:	4630      	movcc	r0, r6
    97a6:	4640      	movcs	r0, r8
    97a8:	301e      	adds	r0, #30
    97aa:	42a8      	cmp	r0, r5
    97ac:	dbcd      	blt.n	974a <MPSL_IRQ_RADIO_Handler+0x8f2>
    97ae:	f640 2145 	movw	r1, #2629	; 0xa45
    97b2:	2070      	movs	r0, #112	; 0x70
    97b4:	f002 fe72 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97b8:	d91c      	bls.n	97f4 <MPSL_IRQ_RADIO_Handler+0x99c>
    97ba:	eba5 0108 	sub.w	r1, r5, r8
    97be:	2001      	movs	r0, #1
    97c0:	f002 f8dc 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    97c4:	b128      	cbz	r0, 97d2 <MPSL_IRQ_RADIO_Handler+0x97a>
    97c6:	2e00      	cmp	r6, #0
    97c8:	bf1c      	itt	ne
    97ca:	1ba9      	subne	r1, r5, r6
    97cc:	2002      	movne	r0, #2
    97ce:	d019      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x9ac>
    97d0:	e7d4      	b.n	977c <MPSL_IRQ_RADIO_Handler+0x924>
    97d2:	e042      	b.n	985a <MPSL_IRQ_RADIO_Handler+0xa02>
    97d4:	40000508 	.word	0x40000508
    97d8:	200002ec 	.word	0x200002ec
    97dc:	20001018 	.word	0x20001018
    97e0:	1e847fff 	.word	0x1e847fff
    97e4:	0f424000 	.word	0x0f424000
    97e8:	20001418 	.word	0x20001418
    97ec:	f0bdc000 	.word	0xf0bdc000
    97f0:	1e848000 	.word	0x1e848000
    97f4:	ea56 0008 	orrs.w	r0, r6, r8
    97f8:	d004      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x9ac>
    97fa:	f640 1176 	movw	r1, #2422	; 0x976
    97fe:	2070      	movs	r0, #112	; 0x70
    9800:	f002 fe4c 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9804:	4629      	mov	r1, r5
    9806:	2000      	movs	r0, #0
    9808:	f002 f8b8 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    980c:	b328      	cbz	r0, 985a <MPSL_IRQ_RADIO_Handler+0xa02>
    980e:	2601      	movs	r6, #1
    9810:	f1ba 0f00 	cmp.w	sl, #0
    9814:	bf04      	itt	eq
    9816:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    981a:	2800      	cmpeq	r0, #0
    981c:	d002      	beq.n	9824 <MPSL_IRQ_RADIO_Handler+0x9cc>
    981e:	f1b9 0f00 	cmp.w	r9, #0
    9822:	d024      	beq.n	986e <MPSL_IRQ_RADIO_Handler+0xa16>
    9824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9826:	f1b0 3fff 	cmp.w	r0, #4294967295
    982a:	d004      	beq.n	9836 <MPSL_IRQ_RADIO_Handler+0x9de>
    982c:	f002 fc7e 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9830:	f04f 30ff 	mov.w	r0, #4294967295
    9834:	62f8      	str	r0, [r7, #44]	; 0x2c
    9836:	f1b9 0f00 	cmp.w	r9, #0
    983a:	d01c      	beq.n	9876 <MPSL_IRQ_RADIO_Handler+0xa1e>
    983c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    983e:	1a20      	subs	r0, r4, r0
    9840:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9844:	2005      	movs	r0, #5
    9846:	f002 f899 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    984a:	b360      	cbz	r0, 98a6 <MPSL_IRQ_RADIO_Handler+0xa4e>
    984c:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9850:	2800      	cmp	r0, #0
    9852:	bf08      	it	eq
    9854:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    9858:	e015      	b.n	9886 <MPSL_IRQ_RADIO_Handler+0xa2e>
    985a:	2002      	movs	r0, #2
    985c:	f002 f944 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9860:	2001      	movs	r0, #1
    9862:	f002 f941 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9866:	b01b      	add	sp, #108	; 0x6c
    9868:	2000      	movs	r0, #0
    986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    986e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9870:	f1b0 3fff 	cmp.w	r0, #4294967295
    9874:	d012      	beq.n	989c <MPSL_IRQ_RADIO_Handler+0xa44>
    9876:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    987a:	b120      	cbz	r0, 9886 <MPSL_IRQ_RADIO_Handler+0xa2e>
    987c:	2005      	movs	r0, #5
    987e:	f002 f933 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9882:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    9886:	eba5 0008 	sub.w	r0, r5, r8
    988a:	f1a0 0119 	sub.w	r1, r0, #25
    988e:	2900      	cmp	r1, #0
    9890:	dc0e      	bgt.n	98b0 <MPSL_IRQ_RADIO_Handler+0xa58>
    9892:	f640 216e 	movw	r1, #2670	; 0xa6e
    9896:	2070      	movs	r0, #112	; 0x70
    9898:	f002 fe00 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    989c:	f002 fc62 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    98a0:	f001 feac 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    98a4:	e7c6      	b.n	9834 <MPSL_IRQ_RADIO_Handler+0x9dc>
    98a6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    98aa:	2070      	movs	r0, #112	; 0x70
    98ac:	f002 fdf6 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98b0:	2003      	movs	r0, #3
    98b2:	f002 f863 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    98b6:	b1b8      	cbz	r0, 98e8 <MPSL_IRQ_RADIO_Handler+0xa90>
    98b8:	480e      	ldr	r0, [pc, #56]	; (98f4 <MPSL_IRQ_RADIO_Handler+0xa9c>)
    98ba:	6880      	ldr	r0, [r0, #8]
    98bc:	f8c0 b000 	str.w	fp, [r0]
    98c0:	480d      	ldr	r0, [pc, #52]	; (98f8 <MPSL_IRQ_RADIO_Handler+0xaa0>)
    98c2:	f8c0 b000 	str.w	fp, [r0]
    98c6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    98ca:	e898 107f 	ldmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, ip}
    98ce:	6038      	str	r0, [r7, #0]
    98d0:	6079      	str	r1, [r7, #4]
    98d2:	60ba      	str	r2, [r7, #8]
    98d4:	60fb      	str	r3, [r7, #12]
    98d6:	613c      	str	r4, [r7, #16]
    98d8:	617d      	str	r5, [r7, #20]
    98da:	61be      	str	r6, [r7, #24]
    98dc:	f8c7 c01c 	str.w	ip, [r7, #28]
    98e0:	b01b      	add	sp, #108	; 0x6c
    98e2:	2001      	movs	r0, #1
    98e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98e8:	f640 2176 	movw	r1, #2678	; 0xa76
    98ec:	2070      	movs	r0, #112	; 0x70
    98ee:	f002 fdd5 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98f2:	0000      	.short	0x0000
    98f4:	200002ec 	.word	0x200002ec
    98f8:	40000508 	.word	0x40000508
    98fc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9900:	460d      	mov	r5, r1
    9902:	4614      	mov	r4, r2
    9904:	4606      	mov	r6, r0
    9906:	f04f 0a00 	mov.w	sl, #0
    990a:	892a      	ldrh	r2, [r5, #8]
    990c:	6841      	ldr	r1, [r0, #4]
    990e:	4650      	mov	r0, sl
    9910:	f362 401f 	bfi	r0, r2, #16, #16
    9914:	7aaa      	ldrb	r2, [r5, #10]
    9916:	46d1      	mov	r9, sl
    9918:	f362 0907 	bfi	r9, r2, #0, #8
    991c:	7aea      	ldrb	r2, [r5, #11]
    991e:	b083      	sub	sp, #12
    9920:	f362 290f 	bfi	r9, r2, #8, #8
    9924:	782a      	ldrb	r2, [r5, #0]
    9926:	f8c4 a000 	str.w	sl, [r4]
    992a:	f362 4917 	bfi	r9, r2, #16, #8
    992e:	f8c4 a004 	str.w	sl, [r4, #4]
    9932:	f8c4 9010 	str.w	r9, [r4, #16]
    9936:	e9c4 1002 	strd	r1, r0, [r4, #8]
    993a:	4f9d      	ldr	r7, [pc, #628]	; (9bb0 <MPSL_IRQ_RADIO_Handler+0xd58>)
    993c:	6870      	ldr	r0, [r6, #4]
    993e:	fba0 8907 	umull	r8, r9, r0, r7
    9942:	6830      	ldr	r0, [r6, #0]
    9944:	f007 f8b3 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9948:	eb10 0108 	adds.w	r1, r0, r8
    994c:	eb4a 0209 	adc.w	r2, sl, r9
    9950:	7828      	ldrb	r0, [r5, #0]
    9952:	ea4f 0967 	mov.w	r9, r7, asr #1
    9956:	f1c9 0b00 	rsb	fp, r9, #0
    995a:	b170      	cbz	r0, 997a <MPSL_IRQ_RADIO_Handler+0xb22>
    995c:	89e0      	ldrh	r0, [r4, #14]
    995e:	f894 8011 	ldrb.w	r8, [r4, #17]
    9962:	43c0      	mvns	r0, r0
    9964:	f8d5 a004 	ldr.w	sl, [r5, #4]
    9968:	f104 020c 	add.w	r2, r4, #12
    996c:	4548      	cmp	r0, r9
    996e:	dd7c      	ble.n	9a6a <MPSL_IRQ_RADIO_Handler+0xc12>
    9970:	f240 519f 	movw	r1, #1439	; 0x59f
    9974:	2070      	movs	r0, #112	; 0x70
    9976:	f002 fd91 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    997a:	f8df c238 	ldr.w	ip, [pc, #568]	; 9bb4 <MPSL_IRQ_RADIO_Handler+0xd5c>
    997e:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    9982:	eb11 0a0c 	adds.w	sl, r1, ip
    9986:	f142 0c00 	adc.w	ip, r2, #0
    998a:	ebb0 0a0a 	subs.w	sl, r0, sl
    998e:	eb73 0c0c 	sbcs.w	ip, r3, ip
    9992:	d272      	bcs.n	9a7a <MPSL_IRQ_RADIO_Handler+0xc22>
    9994:	1a41      	subs	r1, r0, r1
    9996:	eb73 0102 	sbcs.w	r1, r3, r2
    999a:	d36e      	bcc.n	9a7a <MPSL_IRQ_RADIO_Handler+0xc22>
    999c:	ebb0 0608 	subs.w	r6, r0, r8
    99a0:	42b7      	cmp	r7, r6
    99a2:	d82b      	bhi.n	99fc <MPSL_IRQ_RADIO_Handler+0xba4>
    99a4:	89e0      	ldrh	r0, [r4, #14]
    99a6:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    99aa:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    99ae:	43c1      	mvns	r1, r0
    99b0:	4a81      	ldr	r2, [pc, #516]	; (9bb8 <MPSL_IRQ_RADIO_Handler+0xd60>)
    99b2:	eb08 0001 	add.w	r0, r8, r1
    99b6:	4542      	cmp	r2, r8
    99b8:	d32b      	bcc.n	9a12 <MPSL_IRQ_RADIO_Handler+0xbba>
    99ba:	4549      	cmp	r1, r9
    99bc:	dcd8      	bgt.n	9970 <MPSL_IRQ_RADIO_Handler+0xb18>
    99be:	4559      	cmp	r1, fp
    99c0:	db66      	blt.n	9a90 <MPSL_IRQ_RADIO_Handler+0xc38>
    99c2:	4287      	cmp	r7, r0
    99c4:	bfdc      	itt	le
    99c6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    99ca:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    99ce:	dd05      	ble.n	99dc <MPSL_IRQ_RADIO_Handler+0xb84>
    99d0:	2800      	cmp	r0, #0
    99d2:	bfbc      	itt	lt
    99d4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    99d8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    99dc:	466a      	mov	r2, sp
    99de:	a901      	add	r1, sp, #4
    99e0:	f001 fca2 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    99e4:	89e0      	ldrh	r0, [r4, #14]
    99e6:	f89d 1000 	ldrb.w	r1, [sp]
    99ea:	1a30      	subs	r0, r6, r0
    99ec:	1a40      	subs	r0, r0, r1
    99ee:	1e40      	subs	r0, r0, #1
    99f0:	42b8      	cmp	r0, r7
    99f2:	d302      	bcc.n	99fa <MPSL_IRQ_RADIO_Handler+0xba2>
    99f4:	68a0      	ldr	r0, [r4, #8]
    99f6:	1c40      	adds	r0, r0, #1
    99f8:	60a0      	str	r0, [r4, #8]
    99fa:	4646      	mov	r6, r8
    99fc:	89e0      	ldrh	r0, [r4, #14]
    99fe:	4b6e      	ldr	r3, [pc, #440]	; (9bb8 <MPSL_IRQ_RADIO_Handler+0xd60>)
    9a00:	43c1      	mvns	r1, r0
    9a02:	686d      	ldr	r5, [r5, #4]
    9a04:	f894 8011 	ldrb.w	r8, [r4, #17]
    9a08:	1870      	adds	r0, r6, r1
    9a0a:	f104 020c 	add.w	r2, r4, #12
    9a0e:	429e      	cmp	r6, r3
    9a10:	d904      	bls.n	9a1c <MPSL_IRQ_RADIO_Handler+0xbc4>
    9a12:	f240 519e 	movw	r1, #1438	; 0x59e
    9a16:	2070      	movs	r0, #112	; 0x70
    9a18:	f002 fd40 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a1c:	4549      	cmp	r1, r9
    9a1e:	dca7      	bgt.n	9970 <MPSL_IRQ_RADIO_Handler+0xb18>
    9a20:	4559      	cmp	r1, fp
    9a22:	db35      	blt.n	9a90 <MPSL_IRQ_RADIO_Handler+0xc38>
    9a24:	4287      	cmp	r7, r0
    9a26:	bfdc      	itt	le
    9a28:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9a2c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9a30:	dd05      	ble.n	9a3e <MPSL_IRQ_RADIO_Handler+0xbe6>
    9a32:	2800      	cmp	r0, #0
    9a34:	bfbc      	itt	lt
    9a36:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9a3a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9a3e:	4621      	mov	r1, r4
    9a40:	f001 fc72 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9a44:	6820      	ldr	r0, [r4, #0]
    9a46:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9a4a:	1970      	adds	r0, r6, r5
    9a4c:	1c40      	adds	r0, r0, #1
    9a4e:	6021      	str	r1, [r4, #0]
    9a50:	f1b8 0f00 	cmp.w	r8, #0
    9a54:	bf08      	it	eq
    9a56:	307a      	addeq	r0, #122	; 0x7a
    9a58:	d004      	beq.n	9a64 <MPSL_IRQ_RADIO_Handler+0xc0c>
    9a5a:	f1b8 0f01 	cmp.w	r8, #1
    9a5e:	bf08      	it	eq
    9a60:	3048      	addeq	r0, #72	; 0x48
    9a62:	d13a      	bne.n	9ada <MPSL_IRQ_RADIO_Handler+0xc82>
    9a64:	f001 fc44 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9a68:	e001      	b.n	9a6e <MPSL_IRQ_RADIO_Handler+0xc16>
    9a6a:	e00e      	b.n	9a8a <MPSL_IRQ_RADIO_Handler+0xc32>
    9a6c:	e005      	b.n	9a7a <MPSL_IRQ_RADIO_Handler+0xc22>
    9a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9a72:	6060      	str	r0, [r4, #4]
    9a74:	b007      	add	sp, #28
    9a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a7a:	6830      	ldr	r0, [r6, #0]
    9a7c:	1e40      	subs	r0, r0, #1
    9a7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9a82:	6020      	str	r0, [r4, #0]
    9a84:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9a88:	e7f3      	b.n	9a72 <MPSL_IRQ_RADIO_Handler+0xc1a>
    9a8a:	4601      	mov	r1, r0
    9a8c:	4558      	cmp	r0, fp
    9a8e:	da04      	bge.n	9a9a <MPSL_IRQ_RADIO_Handler+0xc42>
    9a90:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9a94:	2070      	movs	r0, #112	; 0x70
    9a96:	f002 fd01 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a9a:	4287      	cmp	r7, r0
    9a9c:	bfdc      	itt	le
    9a9e:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    9aa2:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    9aa6:	dd05      	ble.n	9ab4 <MPSL_IRQ_RADIO_Handler+0xc5c>
    9aa8:	2800      	cmp	r0, #0
    9aaa:	bfbc      	itt	lt
    9aac:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9ab0:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    9ab4:	4621      	mov	r1, r4
    9ab6:	f001 fc37 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9aba:	6820      	ldr	r0, [r4, #0]
    9abc:	f1b8 0f00 	cmp.w	r8, #0
    9ac0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9ac4:	f10a 0001 	add.w	r0, sl, #1
    9ac8:	6021      	str	r1, [r4, #0]
    9aca:	bf08      	it	eq
    9acc:	307a      	addeq	r0, #122	; 0x7a
    9ace:	d009      	beq.n	9ae4 <MPSL_IRQ_RADIO_Handler+0xc8c>
    9ad0:	f1b8 0f01 	cmp.w	r8, #1
    9ad4:	bf08      	it	eq
    9ad6:	3048      	addeq	r0, #72	; 0x48
    9ad8:	d004      	beq.n	9ae4 <MPSL_IRQ_RADIO_Handler+0xc8c>
    9ada:	f240 6139 	movw	r1, #1593	; 0x639
    9ade:	2070      	movs	r0, #112	; 0x70
    9ae0:	f002 fcdc 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ae4:	f001 fc04 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9ae8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9aec:	6061      	str	r1, [r4, #4]
    9aee:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    9af2:	aa01      	add	r2, sp, #4
    9af4:	4669      	mov	r1, sp
    9af6:	4648      	mov	r0, r9
    9af8:	6837      	ldr	r7, [r6, #0]
    9afa:	f001 fc15 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9afe:	f002 f937 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9b02:	f001 fbf5 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9b06:	4680      	mov	r8, r0
    9b08:	482c      	ldr	r0, [pc, #176]	; (9bbc <MPSL_IRQ_RADIO_Handler+0xd64>)
    9b0a:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9b0e:	2920      	cmp	r1, #32
    9b10:	d02a      	beq.n	9b68 <MPSL_IRQ_RADIO_Handler+0xd10>
    9b12:	68c0      	ldr	r0, [r0, #12]
    9b14:	1d40      	adds	r0, r0, #5
    9b16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b1a:	bf00      	nop
    9b1c:	e9d4 2100 	ldrd	r2, r1, [r4]
    9b20:	1a89      	subs	r1, r1, r2
    9b22:	4401      	add	r1, r0
    9b24:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9b28:	e9c4 0100 	strd	r0, r1, [r4]
    9b2c:	6831      	ldr	r1, [r6, #0]
    9b2e:	4281      	cmp	r1, r0
    9b30:	d902      	bls.n	9b38 <MPSL_IRQ_RADIO_Handler+0xce0>
    9b32:	68a0      	ldr	r0, [r4, #8]
    9b34:	1c40      	adds	r0, r0, #1
    9b36:	60a0      	str	r0, [r4, #8]
    9b38:	6832      	ldr	r2, [r6, #0]
    9b3a:	6928      	ldr	r0, [r5, #16]
    9b3c:	4621      	mov	r1, r4
    9b3e:	9b06      	ldr	r3, [sp, #24]
    9b40:	f7ff f9e6 	bl	8f10 <MPSL_IRQ_RADIO_Handler+0xb8>
    9b44:	2800      	cmp	r0, #0
    9b46:	bf1c      	itt	ne
    9b48:	b007      	addne	sp, #28
    9b4a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b4e:	e9d4 1000 	ldrd	r1, r0, [r4]
    9b52:	1a40      	subs	r0, r0, r1
    9b54:	6831      	ldr	r1, [r6, #0]
    9b56:	6021      	str	r1, [r4, #0]
    9b58:	6831      	ldr	r1, [r6, #0]
    9b5a:	4408      	add	r0, r1
    9b5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b60:	6060      	str	r0, [r4, #4]
    9b62:	b007      	add	sp, #28
    9b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b68:	3709      	adds	r7, #9
    9b6a:	f1b9 0f00 	cmp.w	r9, #0
    9b6e:	d016      	beq.n	9b9e <MPSL_IRQ_RADIO_Handler+0xd46>
    9b70:	f002 fc1c 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9b74:	b998      	cbnz	r0, 9b9e <MPSL_IRQ_RADIO_Handler+0xd46>
    9b76:	f002 fad3 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9b7a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9b7e:	bf08      	it	eq
    9b80:	200d      	moveq	r0, #13
    9b82:	d00b      	beq.n	9b9c <MPSL_IRQ_RADIO_Handler+0xd44>
    9b84:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9b88:	3856      	subs	r0, #86	; 0x56
    9b8a:	bf08      	it	eq
    9b8c:	201c      	moveq	r0, #28
    9b8e:	d005      	beq.n	9b9c <MPSL_IRQ_RADIO_Handler+0xd44>
    9b90:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9b94:	389f      	subs	r0, #159	; 0x9f
    9b96:	bf14      	ite	ne
    9b98:	2000      	movne	r0, #0
    9b9a:	2032      	moveq	r0, #50	; 0x32
    9b9c:	4407      	add	r7, r0
    9b9e:	9800      	ldr	r0, [sp, #0]
    9ba0:	4580      	cmp	r8, r0
    9ba2:	bf84      	itt	hi
    9ba4:	eba8 0000 	subhi.w	r0, r8, r0
    9ba8:	4407      	addhi	r7, r0
    9baa:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9bae:	e7b5      	b.n	9b1c <MPSL_IRQ_RADIO_Handler+0xcc4>
    9bb0:	1e848000 	.word	0x1e848000
    9bb4:	0f424000 	.word	0x0f424000
    9bb8:	1e847fff 	.word	0x1e847fff
    9bbc:	20001418 	.word	0x20001418
    9bc0:	b570      	push	{r4, r5, r6, lr}
    9bc2:	4d1e      	ldr	r5, [pc, #120]	; (9c3c <MPSL_IRQ_RADIO_Handler+0xde4>)
    9bc4:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9bc8:	2820      	cmp	r0, #32
    9bca:	bf18      	it	ne
    9bcc:	bd70      	popne	{r4, r5, r6, pc}
    9bce:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9bd2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9bd6:	4428      	add	r0, r5
    9bd8:	f890 4020 	ldrb.w	r4, [r0, #32]
    9bdc:	2c20      	cmp	r4, #32
    9bde:	d027      	beq.n	9c30 <MPSL_IRQ_RADIO_Handler+0xdd8>
    9be0:	4b17      	ldr	r3, [pc, #92]	; (9c40 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9be2:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9be6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9bea:	7849      	ldrb	r1, [r1, #1]
    9bec:	f880 1020 	strb.w	r1, [r0, #32]
    9bf0:	20ff      	movs	r0, #255	; 0xff
    9bf2:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9bf6:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9bfa:	4621      	mov	r1, r4
    9bfc:	2002      	movs	r0, #2
    9bfe:	f000 f891 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    9c02:	2000      	movs	r0, #0
    9c04:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9c08:	77a8      	strb	r0, [r5, #30]
    9c0a:	490e      	ldr	r1, [pc, #56]	; (9c44 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9c0c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9c10:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9c14:	7e00      	ldrb	r0, [r0, #24]
    9c16:	2800      	cmp	r0, #0
    9c18:	bf08      	it	eq
    9c1a:	f002 fda9 	bleq	c770 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9c1e:	2000      	movs	r0, #0
    9c20:	4909      	ldr	r1, [pc, #36]	; (9c48 <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9c22:	6849      	ldr	r1, [r1, #4]
    9c24:	2900      	cmp	r1, #0
    9c26:	bf08      	it	eq
    9c28:	bd70      	popeq	{r4, r5, r6, pc}
    9c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c2e:	4708      	bx	r1
    9c30:	f240 3132 	movw	r1, #818	; 0x332
    9c34:	2070      	movs	r0, #112	; 0x70
    9c36:	f002 fc31 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c3a:	0000      	.short	0x0000
    9c3c:	20001418 	.word	0x20001418
    9c40:	20001398 	.word	0x20001398
    9c44:	20001018 	.word	0x20001018
    9c48:	200002ec 	.word	0x200002ec
    9c4c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c50:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9d14 <MPSL_IRQ_RADIO_Handler+0xebc>
    9c54:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9c58:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9c5c:	4440      	add	r0, r8
    9c5e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9c62:	2c20      	cmp	r4, #32
    9c64:	bf08      	it	eq
    9c66:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9c6a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9d18 <MPSL_IRQ_RADIO_Handler+0xec0>
    9c6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9d1c <MPSL_IRQ_RADIO_Handler+0xec4>
    9c72:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9c76:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9c7a:	2607      	movs	r6, #7
    9c7c:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9c80:	2801      	cmp	r0, #1
    9c82:	d00e      	beq.n	9ca2 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9c84:	2804      	cmp	r0, #4
    9c86:	bf08      	it	eq
    9c88:	2602      	moveq	r6, #2
    9c8a:	d00a      	beq.n	9ca2 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9c8c:	2805      	cmp	r0, #5
    9c8e:	bf0c      	ite	eq
    9c90:	2603      	moveq	r6, #3
    9c92:	2806      	cmpne	r0, #6
    9c94:	d005      	beq.n	9ca2 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9c96:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9c9a:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c9e:	f002 fbfd 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ca2:	f1bb 0f00 	cmp.w	fp, #0
    9ca6:	bf18      	it	ne
    9ca8:	f3af 8000 	nopne.w
    9cac:	f3ef 8010 	mrs	r0, PRIMASK
    9cb0:	b672      	cpsid	i
    9cb2:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9cb6:	784a      	ldrb	r2, [r1, #1]
    9cb8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9cbc:	4441      	add	r1, r8
    9cbe:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9cc2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9cc6:	42a2      	cmp	r2, r4
    9cc8:	bf04      	itt	eq
    9cca:	2220      	moveq	r2, #32
    9ccc:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9cd0:	b1c0      	cbz	r0, 9d04 <MPSL_IRQ_RADIO_Handler+0xeac>
    9cd2:	462a      	mov	r2, r5
    9cd4:	4621      	mov	r1, r4
    9cd6:	2001      	movs	r0, #1
    9cd8:	f000 f824 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    9cdc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9ce0:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9ce4:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9ce8:	6840      	ldr	r0, [r0, #4]
    9cea:	4631      	mov	r1, r6
    9cec:	4790      	blx	r2
    9cee:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9cf2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9cf6:	4440      	add	r0, r8
    9cf8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9cfc:	2c20      	cmp	r4, #32
    9cfe:	d1ba      	bne.n	9c76 <MPSL_IRQ_RADIO_Handler+0xe1e>
    9d00:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d04:	4806      	ldr	r0, [pc, #24]	; (9d20 <MPSL_IRQ_RADIO_Handler+0xec8>)
    9d06:	2800      	cmp	r0, #0
    9d08:	bf18      	it	ne
    9d0a:	f3af 8000 	nopne.w
    9d0e:	b662      	cpsie	i
    9d10:	e7df      	b.n	9cd2 <MPSL_IRQ_RADIO_Handler+0xe7a>
    9d12:	0000      	.short	0x0000
    9d14:	20001418 	.word	0x20001418
    9d18:	00000000 	.word	0x00000000
    9d1c:	20001398 	.word	0x20001398
    9d20:	00000000 	.word	0x00000000
    9d24:	f8df c058 	ldr.w	ip, [pc, #88]	; 9d80 <MPSL_IRQ_RADIO_Handler+0xf28>
    9d28:	b510      	push	{r4, lr}
    9d2a:	2300      	movs	r3, #0
    9d2c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9d30:	2807      	cmp	r0, #7
    9d32:	d21f      	bcs.n	9d74 <MPSL_IRQ_RADIO_Handler+0xf1c>
    9d34:	e8df f000 	tbb	[pc, r0]
    9d38:	05050505 	.word	0x05050505
    9d3c:	00040404 	.word	0x00040404
    9d40:	2301      	movs	r3, #1
    9d42:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9d46:	2b00      	cmp	r3, #0
    9d48:	bf08      	it	eq
    9d4a:	bd10      	popeq	{r4, pc}
    9d4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9d50:	480c      	ldr	r0, [pc, #48]	; (9d84 <MPSL_IRQ_RADIO_Handler+0xf2c>)
    9d52:	4402      	add	r2, r0
    9d54:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9d58:	2820      	cmp	r0, #32
    9d5a:	bf0e      	itee	eq
    9d5c:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9d60:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9d64:	7041      	strbne	r1, [r0, #1]
    9d66:	2020      	movs	r0, #32
    9d68:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9d6c:	7058      	strb	r0, [r3, #1]
    9d6e:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9d72:	bd10      	pop	{r4, pc}
    9d74:	f240 216e 	movw	r1, #622	; 0x26e
    9d78:	2070      	movs	r0, #112	; 0x70
    9d7a:	f002 fb8f 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d7e:	0000      	.short	0x0000
    9d80:	20001398 	.word	0x20001398
    9d84:	20001418 	.word	0x20001418
    9d88:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9d8c:	460f      	mov	r7, r1
    9d8e:	4680      	mov	r8, r0
    9d90:	f8df a160 	ldr.w	sl, [pc, #352]	; 9ef4 <MPSL_IRQ_RADIO_Handler+0x109c>
    9d94:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9d98:	4450      	add	r0, sl
    9d9a:	f1b8 0f01 	cmp.w	r8, #1
    9d9e:	f890 4020 	ldrb.w	r4, [r0, #32]
    9da2:	4625      	mov	r5, r4
    9da4:	bf18      	it	ne
    9da6:	f1b8 0f02 	cmpne.w	r8, #2
    9daa:	d005      	beq.n	9db8 <MPSL_IRQ_RADIO_Handler+0xf60>
    9dac:	f640 21ac 	movw	r1, #2732	; 0xaac
    9db0:	f04f 0070 	mov.w	r0, #112	; 0x70
    9db4:	f002 fb72 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9db8:	f04f 0b00 	mov.w	fp, #0
    9dbc:	2d20      	cmp	r5, #32
    9dbe:	d042      	beq.n	9e46 <MPSL_IRQ_RADIO_Handler+0xfee>
    9dc0:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9dc4:	2600      	movs	r6, #0
    9dc6:	2800      	cmp	r0, #0
    9dc8:	bf08      	it	eq
    9dca:	2602      	moveq	r6, #2
    9dcc:	f001 fc16 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9dd0:	f8df c124 	ldr.w	ip, [pc, #292]	; 9ef8 <MPSL_IRQ_RADIO_Handler+0x10a0>
    9dd4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9dd8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9ddc:	688a      	ldr	r2, [r1, #8]
    9dde:	68c9      	ldr	r1, [r1, #12]
    9de0:	1a12      	subs	r2, r2, r0
    9de2:	1a09      	subs	r1, r1, r0
    9de4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9de8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9dec:	4296      	cmp	r6, r2
    9dee:	bf99      	ittee	ls
    9df0:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9df4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9df8:	4a40      	ldrhi	r2, [pc, #256]	; (9efc <MPSL_IRQ_RADIO_Handler+0x10a4>)
    9dfa:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9dfe:	d920      	bls.n	9e42 <MPSL_IRQ_RADIO_Handler+0xfea>
    9e00:	4622      	mov	r2, r4
    9e02:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9e06:	784c      	ldrb	r4, [r1, #1]
    9e08:	2c20      	cmp	r4, #32
    9e0a:	d012      	beq.n	9e32 <MPSL_IRQ_RADIO_Handler+0xfda>
    9e0c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9e10:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9e14:	688b      	ldr	r3, [r1, #8]
    9e16:	68c9      	ldr	r1, [r1, #12]
    9e18:	1a1b      	subs	r3, r3, r0
    9e1a:	1a09      	subs	r1, r1, r0
    9e1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9e20:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9e24:	429e      	cmp	r6, r3
    9e26:	bf9c      	itt	ls
    9e28:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9e2c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9e30:	d8e6      	bhi.n	9e00 <MPSL_IRQ_RADIO_Handler+0xfa8>
    9e32:	2a20      	cmp	r2, #32
    9e34:	d005      	beq.n	9e42 <MPSL_IRQ_RADIO_Handler+0xfea>
    9e36:	463b      	mov	r3, r7
    9e38:	2120      	movs	r1, #32
    9e3a:	2004      	movs	r0, #4
    9e3c:	f7ff f82c 	bl	8e98 <MPSL_IRQ_RADIO_Handler+0x40>
    9e40:	4604      	mov	r4, r0
    9e42:	42ac      	cmp	r4, r5
    9e44:	d116      	bne.n	9e74 <MPSL_IRQ_RADIO_Handler+0x101c>
    9e46:	482e      	ldr	r0, [pc, #184]	; (9f00 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9e48:	2800      	cmp	r0, #0
    9e4a:	bf18      	it	ne
    9e4c:	f3af 8000 	nopne.w
    9e50:	f001 fbd4 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9e54:	4603      	mov	r3, r0
    9e56:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9e5a:	2820      	cmp	r0, #32
    9e5c:	d00d      	beq.n	9e7a <MPSL_IRQ_RADIO_Handler+0x1022>
    9e5e:	f8da 0008 	ldr.w	r0, [sl, #8]
    9e62:	1c99      	adds	r1, r3, #2
    9e64:	1a08      	subs	r0, r1, r0
    9e66:	0200      	lsls	r0, r0, #8
    9e68:	17c1      	asrs	r1, r0, #31
    9e6a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9e6e:	1200      	asrs	r0, r0, #8
    9e70:	2800      	cmp	r0, #0
    9e72:	dd02      	ble.n	9e7a <MPSL_IRQ_RADIO_Handler+0x1022>
    9e74:	2000      	movs	r0, #0
    9e76:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e7a:	2d20      	cmp	r5, #32
    9e7c:	d014      	beq.n	9ea8 <MPSL_IRQ_RADIO_Handler+0x1050>
    9e7e:	462a      	mov	r2, r5
    9e80:	4641      	mov	r1, r8
    9e82:	4618      	mov	r0, r3
    9e84:	f7ff fa9e 	bl	93c4 <MPSL_IRQ_RADIO_Handler+0x56c>
    9e88:	2800      	cmp	r0, #0
    9e8a:	bf1e      	ittt	ne
    9e8c:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9e90:	2002      	movne	r0, #2
    9e92:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e96:	463b      	mov	r3, r7
    9e98:	462a      	mov	r2, r5
    9e9a:	2120      	movs	r1, #32
    9e9c:	2004      	movs	r0, #4
    9e9e:	f7fe fffb 	bl	8e98 <MPSL_IRQ_RADIO_Handler+0x40>
    9ea2:	2000      	movs	r0, #0
    9ea4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ea8:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9eac:	f1b0 3fff 	cmp.w	r0, #4294967295
    9eb0:	d005      	beq.n	9ebe <MPSL_IRQ_RADIO_Handler+0x1066>
    9eb2:	f002 f93b 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9eb6:	f04f 30ff 	mov.w	r0, #4294967295
    9eba:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9ebe:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9ec2:	b120      	cbz	r0, 9ece <MPSL_IRQ_RADIO_Handler+0x1076>
    9ec4:	2005      	movs	r0, #5
    9ec6:	f001 fe0f 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9eca:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9ece:	2004      	movs	r0, #4
    9ed0:	f001 fe0a 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ed4:	f001 fe78 	bl	bbc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9ed8:	2020      	movs	r0, #32
    9eda:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9ede:	4809      	ldr	r0, [pc, #36]	; (9f04 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9ee0:	6880      	ldr	r0, [r0, #8]
    9ee2:	f8c0 b000 	str.w	fp, [r0]
    9ee6:	4808      	ldr	r0, [pc, #32]	; (9f08 <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9ee8:	f8c0 b000 	str.w	fp, [r0]
    9eec:	2001      	movs	r0, #1
    9eee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ef2:	0000      	.short	0x0000
    9ef4:	20001418 	.word	0x20001418
    9ef8:	20001018 	.word	0x20001018
    9efc:	20001398 	.word	0x20001398
    9f00:	00000000 	.word	0x00000000
    9f04:	200002ec 	.word	0x200002ec
    9f08:	40000508 	.word	0x40000508

00009f0c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9f0c:	4906      	ldr	r1, [pc, #24]	; (9f28 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9f0e:	b510      	push	{r4, lr}
    9f10:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9f14:	2a20      	cmp	r2, #32
    9f16:	bf1c      	itt	ne
    9f18:	7788      	strbne	r0, [r1, #30]
    9f1a:	bd10      	popne	{r4, pc}
    9f1c:	f240 319a 	movw	r1, #922	; 0x39a
    9f20:	2070      	movs	r0, #112	; 0x70
    9f22:	f002 fabb 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f26:	0000      	.short	0x0000
    9f28:	20001418 	.word	0x20001418

00009f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f30:	4e69      	ldr	r6, [pc, #420]	; (a0d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9f32:	4607      	mov	r7, r0
    9f34:	b08d      	sub	sp, #52	; 0x34
    9f36:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9f3a:	4688      	mov	r8, r1
    9f3c:	2820      	cmp	r0, #32
    9f3e:	d055      	beq.n	9fec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9f40:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9f44:	f106 0408 	add.w	r4, r6, #8
    9f48:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9f4c:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9f50:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9f54:	2020      	movs	r0, #32
    9f56:	f88d 0020 	strb.w	r0, [sp, #32]
    9f5a:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9f5e:	aa0a      	add	r2, sp, #40	; 0x28
    9f60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9f64:	4430      	add	r0, r6
    9f66:	a909      	add	r1, sp, #36	; 0x24
    9f68:	f890 5020 	ldrb.w	r5, [r0, #32]
    9f6c:	68f0      	ldr	r0, [r6, #12]
    9f6e:	9002      	str	r0, [sp, #8]
    9f70:	6830      	ldr	r0, [r6, #0]
    9f72:	4438      	add	r0, r7
    9f74:	f001 f9d8 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9f78:	f8da 000c 	ldr.w	r0, [sl, #12]
    9f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
    9f7e:	2f65      	cmp	r7, #101	; 0x65
    9f80:	4408      	add	r0, r1
    9f82:	d338      	bcc.n	9ff6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9f84:	4a55      	ldr	r2, [pc, #340]	; (a0dc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    9f86:	2100      	movs	r1, #0
    9f88:	1bd2      	subs	r2, r2, r7
    9f8a:	eb71 0201 	sbcs.w	r2, r1, r1
    9f8e:	d332      	bcc.n	9ff6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9f90:	6822      	ldr	r2, [r4, #0]
    9f92:	1a82      	subs	r2, r0, r2
    9f94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9f98:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9f9c:	d82b      	bhi.n	9ff6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9f9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9fa2:	6060      	str	r0, [r4, #4]
    9fa4:	4630      	mov	r0, r6
    9fa6:	f884 8010 	strb.w	r8, [r4, #16]
    9faa:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    9fae:	f10d 0a20 	add.w	sl, sp, #32
    9fb2:	2d20      	cmp	r5, #32
    9fb4:	bf1c      	itt	ne
    9fb6:	494a      	ldrne	r1, [pc, #296]	; (a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9fb8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9fbc:	d050      	beq.n	a060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9fbe:	bf00      	nop
    9fc0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9fc4:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9fc8:	6861      	ldr	r1, [r4, #4]
    9fca:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9fce:	f108 0008 	add.w	r0, r8, #8
    9fd2:	1a71      	subs	r1, r6, r1
    9fd4:	0209      	lsls	r1, r1, #8
    9fd6:	17ca      	asrs	r2, r1, #31
    9fd8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9fdc:	1209      	asrs	r1, r1, #8
    9fde:	d42d      	bmi.n	a03c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9fe0:	89c0      	ldrh	r0, [r0, #14]
    9fe2:	2800      	cmp	r0, #0
    9fe4:	d03c      	beq.n	a060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9fe6:	89e0      	ldrh	r0, [r4, #14]
    9fe8:	b148      	cbz	r0, 9ffe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9fea:	e039      	b.n	a060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9fec:	f640 3173 	movw	r1, #2931	; 0xb73
    9ff0:	2070      	movs	r0, #112	; 0x70
    9ff2:	f002 fa53 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ff6:	b00d      	add	sp, #52	; 0x34
    9ff8:	2001      	movs	r0, #1
    9ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ffe:	6820      	ldr	r0, [r4, #0]
    a000:	900c      	str	r0, [sp, #48]	; 0x30
    a002:	f002 f88d 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a006:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a00a:	bf08      	it	eq
    a00c:	200d      	moveq	r0, #13
    a00e:	d00b      	beq.n	a028 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a010:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a014:	3856      	subs	r0, #86	; 0x56
    a016:	bf08      	it	eq
    a018:	201c      	moveq	r0, #28
    a01a:	d005      	beq.n	a028 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a01c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a020:	389f      	subs	r0, #159	; 0x9f
    a022:	bf14      	ite	ne
    a024:	2000      	movne	r0, #0
    a026:	2032      	moveq	r0, #50	; 0x32
    a028:	1c41      	adds	r1, r0, #1
    a02a:	980c      	ldr	r0, [sp, #48]	; 0x30
    a02c:	1a30      	subs	r0, r6, r0
    a02e:	0200      	lsls	r0, r0, #8
    a030:	17c2      	asrs	r2, r0, #31
    a032:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    a036:	1200      	asrs	r0, r0, #8
    a038:	4288      	cmp	r0, r1
    a03a:	da11      	bge.n	a060 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a03c:	f88a 5000 	strb.w	r5, [sl]
    a040:	f898 1018 	ldrb.w	r1, [r8, #24]
    a044:	7c20      	ldrb	r0, [r4, #16]
    a046:	4281      	cmp	r1, r0
    a048:	d805      	bhi.n	a056 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    a04a:	9802      	ldr	r0, [sp, #8]
    a04c:	6060      	str	r0, [r4, #4]
    a04e:	b00d      	add	sp, #52	; 0x34
    a050:	2002      	movs	r0, #2
    a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a056:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    a05a:	7845      	ldrb	r5, [r0, #1]
    a05c:	2d20      	cmp	r5, #32
    a05e:	d1af      	bne.n	9fc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    a060:	2005      	movs	r0, #5
    a062:	f001 fd41 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a066:	4c1c      	ldr	r4, [pc, #112]	; (a0d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a068:	f04f 30ff 	mov.w	r0, #4294967295
    a06c:	6060      	str	r0, [r4, #4]
    a06e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    a072:	f89d 2020 	ldrb.w	r2, [sp, #32]
    a076:	2120      	movs	r1, #32
    a078:	2a20      	cmp	r2, #32
    a07a:	d003      	beq.n	a084 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    a07c:	2005      	movs	r0, #5
    a07e:	f7fe ff0b 	bl	8e98 <MPSL_IRQ_RADIO_Handler+0x40>
    a082:	e004      	b.n	a08e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    a084:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a088:	4420      	add	r0, r4
    a08a:	f890 0020 	ldrb.w	r0, [r0, #32]
    a08e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    a092:	4913      	ldr	r1, [pc, #76]	; (a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a094:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    a098:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    a09c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a0a0:	7048      	strb	r0, [r1, #1]
    a0a2:	6820      	ldr	r0, [r4, #0]
    a0a4:	4438      	add	r0, r7
    a0a6:	6020      	str	r0, [r4, #0]
    a0a8:	20ff      	movs	r0, #255	; 0xff
    a0aa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    a0ae:	7e60      	ldrb	r0, [r4, #25]
    a0b0:	2801      	cmp	r0, #1
    a0b2:	d105      	bne.n	a0c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    a0b4:	68e0      	ldr	r0, [r4, #12]
    a0b6:	1e40      	subs	r0, r0, #1
    a0b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a0bc:	f001 fb78 	bl	b7b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a0c0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a0c4:	2820      	cmp	r0, #32
    a0c6:	d003      	beq.n	a0d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    a0c8:	4806      	ldr	r0, [pc, #24]	; (a0e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    a0ca:	7840      	ldrb	r0, [r0, #1]
    a0cc:	f002 faba 	bl	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a0d0:	b00d      	add	sp, #52	; 0x34
    a0d2:	2000      	movs	r0, #0
    a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0d8:	20001418 	.word	0x20001418
    a0dc:	0f424000 	.word	0x0f424000
    a0e0:	20001398 	.word	0x20001398
    a0e4:	200002ec 	.word	0x200002ec

0000a0e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a0e8:	4806      	ldr	r0, [pc, #24]	; (a104 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a0ea:	b510      	push	{r4, lr}
    a0ec:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a0f0:	2920      	cmp	r1, #32
    a0f2:	bf1c      	itt	ne
    a0f4:	7e00      	ldrbne	r0, [r0, #24]
    a0f6:	bd10      	popne	{r4, pc}
    a0f8:	f640 316d 	movw	r1, #2925	; 0xb6d
    a0fc:	2070      	movs	r0, #112	; 0x70
    a0fe:	f002 f9cd 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a102:	0000      	.short	0x0000
    a104:	20001418 	.word	0x20001418

0000a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a10a:	4d6f      	ldr	r5, [pc, #444]	; (a2c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a10c:	2601      	movs	r6, #1
    a10e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a112:	4a6e      	ldr	r2, [pc, #440]	; (a2cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a114:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a116:	2808      	cmp	r0, #8
    a118:	d272      	bcs.n	a200 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a11a:	e8df f000 	tbb	[pc, r0]
    a11e:	7704      	.short	0x7704
    a120:	44cfb19f 	.word	0x44cfb19f
    a124:	bbb6      	.short	0xbbb6
    a126:	f1b1 3fff 	cmp.w	r1, #4294967295
    a12a:	d104      	bne.n	a136 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a12c:	f002 f81a 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a130:	f001 fa64 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a134:	62e0      	str	r0, [r4, #44]	; 0x2c
    a136:	8ae0      	ldrh	r0, [r4, #22]
    a138:	b110      	cbz	r0, a140 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a13a:	f002 f937 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a13e:	b180      	cbz	r0, a162 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a140:	f7ff fd3e 	bl	9bc0 <MPSL_IRQ_RADIO_Handler+0xd68>
    a144:	20ff      	movs	r0, #255	; 0xff
    a146:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a14a:	6861      	ldr	r1, [r4, #4]
    a14c:	f1b1 3fff 	cmp.w	r1, #4294967295
    a150:	d003      	beq.n	a15a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a152:	2005      	movs	r0, #5
    a154:	f001 fc12 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a158:	b140      	cbz	r0, a16c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a15a:	7e60      	ldrb	r0, [r4, #25]
    a15c:	2801      	cmp	r0, #1
    a15e:	d110      	bne.n	a182 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a160:	e009      	b.n	a176 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a162:	f640 0169 	movw	r1, #2153	; 0x869
    a166:	2070      	movs	r0, #112	; 0x70
    a168:	f002 f998 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a16c:	f640 016e 	movw	r1, #2158	; 0x86e
    a170:	2070      	movs	r0, #112	; 0x70
    a172:	f002 f993 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a176:	68e0      	ldr	r0, [r4, #12]
    a178:	1e40      	subs	r0, r0, #1
    a17a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a17e:	f001 fb17 	bl	b7b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a182:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a186:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a18a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a18e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a192:	6840      	ldr	r0, [r0, #4]
    a194:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a198:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a19c:	b001      	add	sp, #4
    a19e:	2101      	movs	r1, #1
    a1a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1a4:	4710      	bx	r2
    a1a6:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a1aa:	b158      	cbz	r0, a1c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a1ac:	f1b1 3fff 	cmp.w	r1, #4294967295
    a1b0:	d104      	bne.n	a1bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a1b2:	f001 ffd7 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a1b6:	f001 fa21 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a1ba:	62e0      	str	r0, [r4, #44]	; 0x2c
    a1bc:	2000      	movs	r0, #0
    a1be:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1c4:	f7ff fcfc 	bl	9bc0 <MPSL_IRQ_RADIO_Handler+0xd68>
    a1c8:	f04f 30ff 	mov.w	r0, #4294967295
    a1cc:	6060      	str	r0, [r4, #4]
    a1ce:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a1d2:	f88d 0000 	strb.w	r0, [sp]
    a1d6:	f89d 0000 	ldrb.w	r0, [sp]
    a1da:	b190      	cbz	r0, a202 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a1dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a1e0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a1e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a1e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a1ec:	6840      	ldr	r0, [r0, #4]
    a1ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a1f2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a1f6:	b001      	add	sp, #4
    a1f8:	2106      	movs	r1, #6
    a1fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1fe:	4710      	bx	r2
    a200:	e05c      	b.n	a2bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a202:	f640 0185 	movw	r1, #2181	; 0x885
    a206:	2070      	movs	r0, #112	; 0x70
    a208:	f002 f948 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a20c:	f7ff fcd8 	bl	9bc0 <MPSL_IRQ_RADIO_Handler+0xd68>
    a210:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a214:	f002 f8ca 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a218:	b120      	cbz	r0, a224 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a21a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a21c:	f1b0 3fff 	cmp.w	r0, #4294967295
    a220:	d005      	beq.n	a22e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a222:	e009      	b.n	a238 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a224:	f640 0193 	movw	r1, #2195	; 0x893
    a228:	2070      	movs	r0, #112	; 0x70
    a22a:	f002 f937 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a22e:	f001 ff99 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a232:	f001 f9e3 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a236:	62e0      	str	r0, [r4, #44]	; 0x2c
    a238:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a23c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a240:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a244:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a248:	6840      	ldr	r0, [r0, #4]
    a24a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a24e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a252:	b001      	add	sp, #4
    a254:	2100      	movs	r1, #0
    a256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a25a:	4710      	bx	r2
    a25c:	f001 fd6a 	bl	bd34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a260:	8ae0      	ldrh	r0, [r4, #22]
    a262:	b110      	cbz	r0, a26a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a264:	f002 f8a2 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a268:	b128      	cbz	r0, a276 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a26a:	f001 fd77 	bl	bd5c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a26e:	2800      	cmp	r0, #0
    a270:	bf18      	it	ne
    a272:	7766      	strbne	r6, [r4, #29]
    a274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a276:	f640 019d 	movw	r1, #2205	; 0x89d
    a27a:	2070      	movs	r0, #112	; 0x70
    a27c:	f002 f90e 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a280:	4813      	ldr	r0, [pc, #76]	; (a2d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a282:	6006      	str	r6, [r0, #0]
    a284:	6890      	ldr	r0, [r2, #8]
    a286:	6006      	str	r6, [r0, #0]
    a288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a28a:	7810      	ldrb	r0, [r2, #0]
    a28c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a290:	f002 b9d8 	b.w	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a294:	f7ff fc94 	bl	9bc0 <MPSL_IRQ_RADIO_Handler+0xd68>
    a298:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a29c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a2a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a2a4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a2a8:	6840      	ldr	r0, [r0, #4]
    a2aa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a2ae:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a2b2:	b001      	add	sp, #4
    a2b4:	2105      	movs	r1, #5
    a2b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a2ba:	4710      	bx	r2
    a2bc:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a2c0:	2070      	movs	r0, #112	; 0x70
    a2c2:	f002 f8eb 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2c6:	0000      	.short	0x0000
    a2c8:	20001018 	.word	0x20001018
    a2cc:	200002ec 	.word	0x200002ec
    a2d0:	40000508 	.word	0x40000508

0000a2d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a2d4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2d8:	4682      	mov	sl, r0
    a2da:	48ed      	ldr	r0, [pc, #948]	; (a690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3bc>)
    a2dc:	b08d      	sub	sp, #52	; 0x34
    a2de:	6800      	ldr	r0, [r0, #0]
    a2e0:	4dec      	ldr	r5, [pc, #944]	; (a694 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>)
    a2e2:	05c0      	lsls	r0, r0, #23
    a2e4:	0dc0      	lsrs	r0, r0, #23
    a2e6:	d00e      	beq.n	a306 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a2e8:	3810      	subs	r0, #16
    a2ea:	b240      	sxtb	r0, r0
    a2ec:	2800      	cmp	r0, #0
    a2ee:	bfb8      	it	lt
    a2f0:	f000 000f 	andlt.w	r0, r0, #15
    a2f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a2f8:	bfac      	ite	ge
    a2fa:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a2fe:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a302:	0940      	lsrs	r0, r0, #5
    a304:	d00d      	beq.n	a322 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a306:	980e      	ldr	r0, [sp, #56]	; 0x38
    a308:	f04f 0b00 	mov.w	fp, #0
    a30c:	7800      	ldrb	r0, [r0, #0]
    a30e:	2800      	cmp	r0, #0
    a310:	bf18      	it	ne
    a312:	2801      	cmpne	r0, #1
    a314:	d018      	beq.n	a348 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a316:	f240 713b 	movw	r1, #1851	; 0x73b
    a31a:	f04f 0070 	mov.w	r0, #112	; 0x70
    a31e:	f002 f8bd 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a322:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a326:	f04f 0b01 	mov.w	fp, #1
    a32a:	2820      	cmp	r0, #32
    a32c:	d007      	beq.n	a33e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a32e:	980e      	ldr	r0, [sp, #56]	; 0x38
    a330:	7800      	ldrb	r0, [r0, #0]
    a332:	b148      	cbz	r0, a348 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a334:	f240 7137 	movw	r1, #1847	; 0x737
    a338:	2070      	movs	r0, #112	; 0x70
    a33a:	f002 f8af 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a33e:	f240 7134 	movw	r1, #1844	; 0x734
    a342:	2070      	movs	r0, #112	; 0x70
    a344:	f002 f8aa 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a348:	4cd3      	ldr	r4, [pc, #844]	; (a698 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a34a:	b124      	cbz	r4, a356 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a34c:	2100      	movs	r1, #0
    a34e:	f240 703e 	movw	r0, #1854	; 0x73e
    a352:	f3af 8000 	nop.w
    a356:	2000      	movs	r0, #0
    a358:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    a35c:	49cf      	ldr	r1, [pc, #828]	; (a69c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a35e:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a362:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a366:	f04f 0901 	mov.w	r9, #1
    a36a:	9000      	str	r0, [sp, #0]
    a36c:	b124      	cbz	r4, a378 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a36e:	2100      	movs	r1, #0
    a370:	f240 7049 	movw	r0, #1865	; 0x749
    a374:	f3af 8000 	nop.w
    a378:	f1b9 0f00 	cmp.w	r9, #0
    a37c:	d00a      	beq.n	a394 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a37e:	bf00      	nop
    a380:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a384:	f04f 0800 	mov.w	r8, #0
    a388:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a38c:	f1bb 0f00 	cmp.w	fp, #0
    a390:	d007      	beq.n	a3a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a392:	e038      	b.n	a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a394:	48c2      	ldr	r0, [pc, #776]	; (a6a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a396:	2800      	cmp	r0, #0
    a398:	bf18      	it	ne
    a39a:	f3af 8000 	nopne.w
    a39e:	b662      	cpsie	i
    a3a0:	e7ee      	b.n	a380 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a3a2:	4637      	mov	r7, r6
    a3a4:	2001      	movs	r0, #1
    a3a6:	ea20 0607 	bic.w	r6, r0, r7
    a3aa:	48be      	ldr	r0, [pc, #760]	; (a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a3ac:	2240      	movs	r2, #64	; 0x40
    a3ae:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a3b2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a3b6:	f006 fcfb 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a3ba:	b124      	cbz	r4, a3c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a3bc:	2100      	movs	r1, #0
    a3be:	f240 505e 	movw	r0, #1374	; 0x55e
    a3c2:	f3af 8000 	nop.w
    a3c6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a3ca:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a3ce:	4429      	add	r1, r5
    a3d0:	4428      	add	r0, r5
    a3d2:	8c0a      	ldrh	r2, [r1, #32]
    a3d4:	8402      	strh	r2, [r0, #32]
    a3d6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a3da:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a3de:	b124      	cbz	r4, a3ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a3e0:	2100      	movs	r1, #0
    a3e2:	f240 5062 	movw	r0, #1378	; 0x562
    a3e6:	f3af 8000 	nop.w
    a3ea:	b124      	cbz	r4, a3f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a3ec:	2100      	movs	r1, #0
    a3ee:	f240 7053 	movw	r0, #1875	; 0x753
    a3f2:	f3af 8000 	nop.w
    a3f6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a3fa:	f88d 0018 	strb.w	r0, [sp, #24]
    a3fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a402:	2800      	cmp	r0, #0
    a404:	d1b2      	bne.n	a36c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a406:	b124      	cbz	r4, a412 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a408:	2100      	movs	r1, #0
    a40a:	f240 705d 	movw	r0, #1885	; 0x75d
    a40e:	f3af 8000 	nop.w
    a412:	a806      	add	r0, sp, #24
    a414:	f001 f8f8 	bl	b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a41c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    a420:	4633      	mov	r3, r6
    a422:	aa01      	add	r2, sp, #4
    a424:	a808      	add	r0, sp, #32
    a426:	990e      	ldr	r1, [sp, #56]	; 0x38
    a428:	f7ff fa68 	bl	98fc <MPSL_IRQ_RADIO_Handler+0xaa4>
    a42c:	b124      	cbz	r4, a438 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a42e:	2100      	movs	r1, #0
    a430:	f240 7064 	movw	r0, #1892	; 0x764
    a434:	f3af 8000 	nop.w
    a438:	4a9a      	ldr	r2, [pc, #616]	; (a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a43a:	9908      	ldr	r1, [sp, #32]
    a43c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a440:	a801      	add	r0, sp, #4
    a442:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a446:	2a01      	cmp	r2, #1
    a448:	bf18      	it	ne
    a44a:	2a02      	cmpne	r2, #2
    a44c:	d138      	bne.n	a4c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a44e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    a452:	9a01      	ldr	r2, [sp, #4]
    a454:	9b02      	ldr	r3, [sp, #8]
    a456:	eba2 0201 	sub.w	r2, r2, r1
    a45a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a45e:	eba3 0101 	sub.w	r1, r3, r1
    a462:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a466:	2a02      	cmp	r2, #2
    a468:	d360      	bcc.n	a52c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a46a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a46e:	bf98      	it	ls
    a470:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a474:	d85a      	bhi.n	a52c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a476:	f04f 0801 	mov.w	r8, #1
    a47a:	ab07      	add	r3, sp, #28
    a47c:	aa06      	add	r2, sp, #24
    a47e:	4631      	mov	r1, r6
    a480:	f7fe fefe 	bl	9280 <MPSL_IRQ_RADIO_Handler+0x428>
    a484:	2800      	cmp	r0, #0
    a486:	d059      	beq.n	a53c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    a488:	f89d 1018 	ldrb.w	r1, [sp, #24]
    a48c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    a490:	4633      	mov	r3, r6
    a492:	428a      	cmp	r2, r1
    a494:	d056      	beq.n	a544 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a496:	2005      	movs	r0, #5
    a498:	f7fe fcfe 	bl	8e98 <MPSL_IRQ_RADIO_Handler+0x40>
    a49c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a4a0:	7048      	strb	r0, [r1, #1]
    a4a2:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a4a6:	2820      	cmp	r0, #32
    a4a8:	bf1c      	itt	ne
    a4aa:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a4ae:	f880 a001 	strbne.w	sl, [r0, #1]
    a4b2:	d053      	beq.n	a55c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x288>
    a4b4:	4632      	mov	r2, r6
    a4b6:	4651      	mov	r1, sl
    a4b8:	f05f 0003 	movs.w	r0, #3
    a4bc:	f7ff fc32 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    a4c0:	b124      	cbz	r4, a4cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a4c2:	2100      	movs	r1, #0
    a4c4:	f240 7069 	movw	r0, #1897	; 0x769
    a4c8:	f3af 8000 	nop.w
    a4cc:	4876      	ldr	r0, [pc, #472]	; (a6a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a4ce:	2800      	cmp	r0, #0
    a4d0:	bf18      	it	ne
    a4d2:	f3af 8000 	nopne.w
    a4d6:	f3ef 8910 	mrs	r9, PRIMASK
    a4da:	b672      	cpsid	i
    a4dc:	b124      	cbz	r4, a4e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a4de:	2100      	movs	r1, #0
    a4e0:	f240 706f 	movw	r0, #1903	; 0x76f
    a4e4:	f3af 8000 	nop.w
    a4e8:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a4ec:	f88d 0018 	strb.w	r0, [sp, #24]
    a4f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a4f4:	2800      	cmp	r0, #0
    a4f6:	f47f af39 	bne.w	a36c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a4fa:	b124      	cbz	r4, a506 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a4fc:	2100      	movs	r1, #0
    a4fe:	f240 7077 	movw	r0, #1911	; 0x777
    a502:	f3af 8000 	nop.w
    a506:	e89d 108f 	ldmia.w	sp, {r0, r1, r2, r3, r7, ip}
    a50a:	f100 0008 	add.w	r0, r0, #8
    a50e:	f1b8 0f00 	cmp.w	r8, #0
    a512:	e880 108e 	stmia.w	r0, {r1, r2, r3, r7, ip}
    a516:	d051      	beq.n	a5bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>
    a518:	b124      	cbz	r4, a524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x250>
    a51a:	2100      	movs	r1, #0
    a51c:	f240 7084 	movw	r0, #1924	; 0x784
    a520:	f3af 8000 	nop.w
    a524:	f1bb 0f00 	cmp.w	fp, #0
    a528:	d139      	bne.n	a59e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a52a:	e01f      	b.n	a56c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    a52c:	4632      	mov	r2, r6
    a52e:	4651      	mov	r1, sl
    a530:	2004      	movs	r0, #4
    a532:	f7ff fbf7 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    a536:	f04f 0801 	mov.w	r8, #1
    a53a:	e7c1      	b.n	a4c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a53c:	4632      	mov	r2, r6
    a53e:	4651      	mov	r1, sl
    a540:	2004      	movs	r0, #4
    a542:	e7bb      	b.n	a4bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a544:	2920      	cmp	r1, #32
    a546:	bf19      	ittee	ne
    a548:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a54c:	7840      	ldrbne	r0, [r0, #1]
    a54e:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a552:	4428      	addeq	r0, r5
    a554:	bf08      	it	eq
    a556:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a55a:	e79f      	b.n	a49c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a55c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a560:	4429      	add	r1, r5
    a562:	f881 a020 	strb.w	sl, [r1, #32]
    a566:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    a56a:	e7a3      	b.n	a4b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a56c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a56e:	f010 0fff 	tst.w	r0, #255	; 0xff
    a572:	d014      	beq.n	a59e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a574:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a578:	2820      	cmp	r0, #32
    a57a:	d110      	bne.n	a59e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a57c:	b124      	cbz	r4, a588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    a57e:	2100      	movs	r1, #0
    a580:	f240 7089 	movw	r0, #1929	; 0x789
    a584:	f3af 8000 	nop.w
    a588:	4631      	mov	r1, r6
    a58a:	2002      	movs	r0, #2
    a58c:	f7ff fbfc 	bl	9d88 <MPSL_IRQ_RADIO_Handler+0xf30>
    a590:	900a      	str	r0, [sp, #40]	; 0x28
    a592:	b920      	cbnz	r0, a59e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a594:	980e      	ldr	r0, [sp, #56]	; 0x38
    a596:	7800      	ldrb	r0, [r0, #0]
    a598:	b1e8      	cbz	r0, a5d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x302>
    a59a:	2801      	cmp	r0, #1
    a59c:	d02a      	beq.n	a5f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    a59e:	b124      	cbz	r4, a5aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d6>
    a5a0:	2100      	movs	r1, #0
    a5a2:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a5a6:	f3af 8000 	nop.w
    a5aa:	20ff      	movs	r0, #255	; 0xff
    a5ac:	f1bb 0f00 	cmp.w	fp, #0
    a5b0:	bf18      	it	ne
    a5b2:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a5b6:	d026      	beq.n	a606 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x332>
    a5b8:	f04f 0801 	mov.w	r8, #1
    a5bc:	b124      	cbz	r4, a5c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    a5be:	2100      	movs	r1, #0
    a5c0:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a5c4:	f3af 8000 	nop.w
    a5c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    a5ca:	4e38      	ldr	r6, [pc, #224]	; (a6ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a5cc:	2802      	cmp	r0, #2
    a5ce:	d023      	beq.n	a618 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x344>
    a5d0:	2801      	cmp	r0, #1
    a5d2:	d029      	beq.n	a628 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    a5d4:	e02d      	b.n	a632 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a5d6:	b124      	cbz	r4, a5e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    a5d8:	2100      	movs	r1, #0
    a5da:	f240 7091 	movw	r0, #1937	; 0x791
    a5de:	f3af 8000 	nop.w
    a5e2:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a5e6:	4651      	mov	r1, sl
    a5e8:	2004      	movs	r0, #4
    a5ea:	f7ff fb9b 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    a5ee:	f04f 0801 	mov.w	r8, #1
    a5f2:	e7e3      	b.n	a5bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>
    a5f4:	2c00      	cmp	r4, #0
    a5f6:	f43f aeb9 	beq.w	a36c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a5fa:	2100      	movs	r1, #0
    a5fc:	f240 709c 	movw	r0, #1948	; 0x79c
    a600:	f3af 8000 	nop.w
    a604:	e6b2      	b.n	a36c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a606:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a60a:	2101      	movs	r1, #1
    a60c:	4391      	bics	r1, r2
    a60e:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a612:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a616:	e7cf      	b.n	a5b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>
    a618:	68a8      	ldr	r0, [r5, #8]
    a61a:	9908      	ldr	r1, [sp, #32]
    a61c:	1a40      	subs	r0, r0, r1
    a61e:	f006 fa46 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a622:	6871      	ldr	r1, [r6, #4]
    a624:	b921      	cbnz	r1, a630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a626:	e004      	b.n	a632 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a628:	6871      	ldr	r1, [r6, #4]
    a62a:	f04f 30ff 	mov.w	r0, #4294967295
    a62e:	b101      	cbz	r1, a632 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a630:	4788      	blx	r1
    a632:	f1b9 0f00 	cmp.w	r9, #0
    a636:	d024      	beq.n	a682 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a638:	b124      	cbz	r4, a644 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    a63a:	2100      	movs	r1, #0
    a63c:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a640:	f3af 8000 	nop.w
    a644:	f1b8 0f00 	cmp.w	r8, #0
    a648:	d011      	beq.n	a66e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    a64a:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a64e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a652:	4428      	add	r0, r5
    a654:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a658:	2820      	cmp	r0, #32
    a65a:	d008      	beq.n	a66e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    a65c:	b124      	cbz	r4, a668 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>
    a65e:	2100      	movs	r1, #0
    a660:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a664:	f3af 8000 	nop.w
    a668:	7870      	ldrb	r0, [r6, #1]
    a66a:	f001 ffeb 	bl	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a66e:	b124      	cbz	r4, a67a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    a670:	2100      	movs	r1, #0
    a672:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a676:	f3af 8000 	nop.w
    a67a:	b00f      	add	sp, #60	; 0x3c
    a67c:	4640      	mov	r0, r8
    a67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a682:	4807      	ldr	r0, [pc, #28]	; (a6a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a684:	2800      	cmp	r0, #0
    a686:	bf18      	it	ne
    a688:	f3af 8000 	nopne.w
    a68c:	b662      	cpsie	i
    a68e:	e7d3      	b.n	a638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a690:	e000ed04 	.word	0xe000ed04
    a694:	20001418 	.word	0x20001418
    a698:	00000000 	.word	0x00000000
    a69c:	20001018 	.word	0x20001018
    a6a0:	00000000 	.word	0x00000000
    a6a4:	20001398 	.word	0x20001398
    a6a8:	00000000 	.word	0x00000000
    a6ac:	200002ec 	.word	0x200002ec

0000a6b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6b4:	4606      	mov	r6, r0
    a6b6:	7800      	ldrb	r0, [r0, #0]
    a6b8:	b08d      	sub	sp, #52	; 0x34
    a6ba:	b118      	cbz	r0, a6c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a6bc:	b00d      	add	sp, #52	; 0x34
    a6be:	2000      	movs	r0, #0
    a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6c4:	488c      	ldr	r0, [pc, #560]	; (a8f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a6c6:	6800      	ldr	r0, [r0, #0]
    a6c8:	05c0      	lsls	r0, r0, #23
    a6ca:	0dc0      	lsrs	r0, r0, #23
    a6cc:	d00e      	beq.n	a6ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a6ce:	3810      	subs	r0, #16
    a6d0:	b240      	sxtb	r0, r0
    a6d2:	2800      	cmp	r0, #0
    a6d4:	bfb8      	it	lt
    a6d6:	f000 000f 	andlt.w	r0, r0, #15
    a6da:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a6de:	bfac      	ite	ge
    a6e0:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a6e4:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a6e8:	0940      	lsrs	r0, r0, #5
    a6ea:	d0e7      	beq.n	a6bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a6ec:	4d83      	ldr	r5, [pc, #524]	; (a8fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a6ee:	4c84      	ldr	r4, [pc, #528]	; (a900 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a6f0:	f04f 0b01 	mov.w	fp, #1
    a6f4:	2700      	movs	r7, #0
    a6f6:	b125      	cbz	r5, a702 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a6f8:	2100      	movs	r1, #0
    a6fa:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a6fe:	f3af 8000 	nop.w
    a702:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a706:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a70a:	f04f 0900 	mov.w	r9, #0
    a70e:	b125      	cbz	r5, a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a710:	2100      	movs	r1, #0
    a712:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a716:	f3af 8000 	nop.w
    a71a:	487a      	ldr	r0, [pc, #488]	; (a904 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a71c:	ea2b 080a 	bic.w	r8, fp, sl
    a720:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a724:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a728:	2240      	movs	r2, #64	; 0x40
    a72a:	f006 fb41 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a72e:	b125      	cbz	r5, a73a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a730:	2100      	movs	r1, #0
    a732:	f240 505e 	movw	r0, #1374	; 0x55e
    a736:	f3af 8000 	nop.w
    a73a:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a73e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a742:	4421      	add	r1, r4
    a744:	4420      	add	r0, r4
    a746:	8c0a      	ldrh	r2, [r1, #32]
    a748:	8402      	strh	r2, [r0, #32]
    a74a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a74e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a752:	b125      	cbz	r5, a75e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a754:	2100      	movs	r1, #0
    a756:	f240 5062 	movw	r0, #1378	; 0x562
    a75a:	f3af 8000 	nop.w
    a75e:	b125      	cbz	r5, a76a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a760:	2100      	movs	r1, #0
    a762:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a766:	f3af 8000 	nop.w
    a76a:	a808      	add	r0, sp, #32
    a76c:	f000 ff4c 	bl	b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a770:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a778:	4643      	mov	r3, r8
    a77a:	466a      	mov	r2, sp
    a77c:	4631      	mov	r1, r6
    a77e:	a80a      	add	r0, sp, #40	; 0x28
    a780:	f7ff f8bc 	bl	98fc <MPSL_IRQ_RADIO_Handler+0xaa4>
    a784:	b125      	cbz	r5, a790 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a786:	2100      	movs	r1, #0
    a788:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a78c:	f3af 8000 	nop.w
    a790:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a794:	2820      	cmp	r0, #32
    a796:	d01a      	beq.n	a7ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a798:	68e0      	ldr	r0, [r4, #12]
    a79a:	9900      	ldr	r1, [sp, #0]
    a79c:	1a09      	subs	r1, r1, r0
    a79e:	0209      	lsls	r1, r1, #8
    a7a0:	17ca      	asrs	r2, r1, #31
    a7a2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a7a6:	1209      	asrs	r1, r1, #8
    a7a8:	d511      	bpl.n	a7ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a7aa:	9900      	ldr	r1, [sp, #0]
    a7ac:	4281      	cmp	r1, r0
    a7ae:	d902      	bls.n	a7b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a7b0:	9902      	ldr	r1, [sp, #8]
    a7b2:	1c49      	adds	r1, r1, #1
    a7b4:	9102      	str	r1, [sp, #8]
    a7b6:	e9dd 2100 	ldrd	r2, r1, [sp]
    a7ba:	1a89      	subs	r1, r1, r2
    a7bc:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a7c0:	4408      	add	r0, r1
    a7c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7c6:	e9cd 2000 	strd	r2, r0, [sp]
    a7ca:	f04f 0901 	mov.w	r9, #1
    a7ce:	b125      	cbz	r5, a7da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a7d0:	2100      	movs	r1, #0
    a7d2:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a7d6:	f3af 8000 	nop.w
    a7da:	9900      	ldr	r1, [sp, #0]
    a7dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    a7de:	9a01      	ldr	r2, [sp, #4]
    a7e0:	1a09      	subs	r1, r1, r0
    a7e2:	1a10      	subs	r0, r2, r0
    a7e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a7e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7ec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a7f0:	bf98      	it	ls
    a7f2:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a7f6:	d809      	bhi.n	a80c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a7f8:	4643      	mov	r3, r8
    a7fa:	4669      	mov	r1, sp
    a7fc:	4842      	ldr	r0, [pc, #264]	; (a908 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a7fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a800:	f7fe fb86 	bl	8f10 <MPSL_IRQ_RADIO_Handler+0xb8>
    a804:	ea59 0000 	orrs.w	r0, r9, r0
    a808:	d129      	bne.n	a85e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a80a:	e042      	b.n	a892 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a80c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a80e:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a812:	9002      	str	r0, [sp, #8]
    a814:	aa09      	add	r2, sp, #36	; 0x24
    a816:	a907      	add	r1, sp, #28
    a818:	4650      	mov	r0, sl
    a81a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a81e:	f000 fd83 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a822:	f001 faa5 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a826:	f000 fd63 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a82a:	4681      	mov	r9, r0
    a82c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a830:	2820      	cmp	r0, #32
    a832:	d03b      	beq.n	a8ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a834:	68e0      	ldr	r0, [r4, #12]
    a836:	1d40      	adds	r0, r0, #5
    a838:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a83c:	9900      	ldr	r1, [sp, #0]
    a83e:	4281      	cmp	r1, r0
    a840:	d902      	bls.n	a848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a842:	9902      	ldr	r1, [sp, #8]
    a844:	1c49      	adds	r1, r1, #1
    a846:	9102      	str	r1, [sp, #8]
    a848:	e9dd 2100 	ldrd	r2, r1, [sp]
    a84c:	1a89      	subs	r1, r1, r2
    a84e:	9000      	str	r0, [sp, #0]
    a850:	4408      	add	r0, r1
    a852:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a856:	9001      	str	r0, [sp, #4]
    a858:	201f      	movs	r0, #31
    a85a:	f88d 000c 	strb.w	r0, [sp, #12]
    a85e:	9800      	ldr	r0, [sp, #0]
    a860:	f006 f925 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a864:	1c41      	adds	r1, r0, #1
    a866:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a86a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a86e:	4410      	add	r0, r2
    a870:	4408      	add	r0, r1
    a872:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a876:	b125      	cbz	r5, a882 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a878:	2100      	movs	r1, #0
    a87a:	f240 601a 	movw	r0, #1562	; 0x61a
    a87e:	f3af 8000 	nop.w
    a882:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a886:	4a21      	ldr	r2, [pc, #132]	; (a90c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a888:	9b02      	ldr	r3, [sp, #8]
    a88a:	fbe3 1002 	umlal	r1, r0, r3, r2
    a88e:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a892:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a896:	f88d 0014 	strb.w	r0, [sp, #20]
    a89a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a89e:	2800      	cmp	r0, #0
    a8a0:	f47f af29 	bne.w	a6f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a8a4:	b00d      	add	sp, #52	; 0x34
    a8a6:	2001      	movs	r0, #1
    a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8ac:	f108 0809 	add.w	r8, r8, #9
    a8b0:	f1ba 0f00 	cmp.w	sl, #0
    a8b4:	d016      	beq.n	a8e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a8b6:	f001 fd79 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a8ba:	b998      	cbnz	r0, a8e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a8bc:	f001 fc30 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a8c0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a8c4:	bf08      	it	eq
    a8c6:	200d      	moveq	r0, #13
    a8c8:	d00b      	beq.n	a8e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a8ca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a8ce:	3856      	subs	r0, #86	; 0x56
    a8d0:	bf08      	it	eq
    a8d2:	201c      	moveq	r0, #28
    a8d4:	d005      	beq.n	a8e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a8d6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a8da:	389f      	subs	r0, #159	; 0x9f
    a8dc:	bf14      	ite	ne
    a8de:	4638      	movne	r0, r7
    a8e0:	2032      	moveq	r0, #50	; 0x32
    a8e2:	4480      	add	r8, r0
    a8e4:	9807      	ldr	r0, [sp, #28]
    a8e6:	4581      	cmp	r9, r0
    a8e8:	bf84      	itt	hi
    a8ea:	eba9 0000 	subhi.w	r0, r9, r0
    a8ee:	4480      	addhi	r8, r0
    a8f0:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a8f4:	e7a2      	b.n	a83c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a8f6:	0000      	.short	0x0000
    a8f8:	e000ed04 	.word	0xe000ed04
    a8fc:	00000000 	.word	0x00000000
    a900:	20001418 	.word	0x20001418
    a904:	20001398 	.word	0x20001398
    a908:	0f424000 	.word	0x0f424000
    a90c:	1e848000 	.word	0x1e848000

0000a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a910:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a914:	4d92      	ldr	r5, [pc, #584]	; (ab60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a916:	b08c      	sub	sp, #48	; 0x30
    a918:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a91c:	2000      	movs	r0, #0
    a91e:	9008      	str	r0, [sp, #32]
    a920:	9006      	str	r0, [sp, #24]
    a922:	2001      	movs	r0, #1
    a924:	4c8f      	ldr	r4, [pc, #572]	; (ab64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a926:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a92a:	f04f 0800 	mov.w	r8, #0
    a92e:	4607      	mov	r7, r0
    a930:	9007      	str	r0, [sp, #28]
    a932:	b124      	cbz	r4, a93e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a934:	2100      	movs	r1, #0
    a936:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a93a:	f3af 8000 	nop.w
    a93e:	9807      	ldr	r0, [sp, #28]
    a940:	2800      	cmp	r0, #0
    a942:	d03c      	beq.n	a9be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a944:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a948:	b124      	cbz	r4, a954 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a94a:	2100      	movs	r1, #0
    a94c:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a950:	f3af 8000 	nop.w
    a954:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a958:	2240      	movs	r2, #64	; 0x40
    a95a:	ea27 060a 	bic.w	r6, r7, sl
    a95e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a962:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a966:	4683      	mov	fp, r0
    a968:	f006 fa22 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a96c:	b124      	cbz	r4, a978 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a96e:	2100      	movs	r1, #0
    a970:	f240 505e 	movw	r0, #1374	; 0x55e
    a974:	f3af 8000 	nop.w
    a978:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a97c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a980:	4428      	add	r0, r5
    a982:	4429      	add	r1, r5
    a984:	9000      	str	r0, [sp, #0]
    a986:	8c0a      	ldrh	r2, [r1, #32]
    a988:	8402      	strh	r2, [r0, #32]
    a98a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a98e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a992:	b124      	cbz	r4, a99e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a994:	2100      	movs	r1, #0
    a996:	f240 5062 	movw	r0, #1378	; 0x562
    a99a:	f3af 8000 	nop.w
    a99e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a9a2:	f88d 0008 	strb.w	r0, [sp, #8]
    a9a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9aa:	b178      	cbz	r0, a9cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a9ac:	2c00      	cmp	r4, #0
    a9ae:	bf1c      	itt	ne
    a9b0:	2100      	movne	r1, #0
    a9b2:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    a9b6:	d0bc      	beq.n	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9b8:	f3af 8000 	nop.w
    a9bc:	e7b9      	b.n	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9be:	486a      	ldr	r0, [pc, #424]	; (ab68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a9c0:	2800      	cmp	r0, #0
    a9c2:	bf18      	it	ne
    a9c4:	f3af 8000 	nopne.w
    a9c8:	b662      	cpsie	i
    a9ca:	e7bb      	b.n	a944 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a9cc:	b124      	cbz	r4, a9d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a9ce:	2100      	movs	r1, #0
    a9d0:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a9d4:	f3af 8000 	nop.w
    a9d8:	980c      	ldr	r0, [sp, #48]	; 0x30
    a9da:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a9de:	2803      	cmp	r0, #3
    a9e0:	d17e      	bne.n	aae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a9e2:	9a00      	ldr	r2, [sp, #0]
    a9e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9e6:	f892 0020 	ldrb.w	r0, [r2, #32]
    a9ea:	4288      	cmp	r0, r1
    a9ec:	bf14      	ite	ne
    a9ee:	f04f 0a00 	movne.w	sl, #0
    a9f2:	f04f 0a01 	moveq.w	sl, #1
    a9f6:	f102 0c20 	add.w	ip, r2, #32
    a9fa:	4683      	mov	fp, r0
    a9fc:	2220      	movs	r2, #32
    a9fe:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    aa02:	e003      	b.n	aa0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    aa04:	4602      	mov	r2, r0
    aa06:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    aa0a:	7840      	ldrb	r0, [r0, #1]
    aa0c:	4288      	cmp	r0, r1
    aa0e:	d002      	beq.n	aa16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    aa10:	2820      	cmp	r0, #32
    aa12:	d00a      	beq.n	aa2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aa14:	e7f6      	b.n	aa04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    aa16:	2820      	cmp	r0, #32
    aa18:	d007      	beq.n	aa2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aa1a:	4583      	cmp	fp, r0
    aa1c:	d107      	bne.n	aa2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    aa1e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    aa22:	7840      	ldrb	r0, [r0, #1]
    aa24:	f88c 0000 	strb.w	r0, [ip]
    aa28:	e007      	b.n	aa3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    aa2a:	4640      	mov	r0, r8
    aa2c:	e00c      	b.n	aa48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    aa2e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    aa32:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    aa36:	7840      	ldrb	r0, [r0, #1]
    aa38:	7048      	strb	r0, [r1, #1]
    aa3a:	b124      	cbz	r4, aa46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    aa3c:	2100      	movs	r1, #0
    aa3e:	f240 40c9 	movw	r0, #1225	; 0x4c9
    aa42:	f3af 8000 	nop.w
    aa46:	4638      	mov	r0, r7
    aa48:	46c3      	mov	fp, r8
    aa4a:	ea10 0f0a 	tst.w	r0, sl
    aa4e:	bf18      	it	ne
    aa50:	46bb      	movne	fp, r7
    aa52:	2800      	cmp	r0, #0
    aa54:	d04e      	beq.n	aaf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa56:	b124      	cbz	r4, aa62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    aa58:	2100      	movs	r1, #0
    aa5a:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    aa5e:	f3af 8000 	nop.w
    aa62:	4632      	mov	r2, r6
    aa64:	2001      	movs	r0, #1
    aa66:	990c      	ldr	r1, [sp, #48]	; 0x30
    aa68:	f7ff f95c 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    aa6c:	b124      	cbz	r4, aa78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    aa6e:	2100      	movs	r1, #0
    aa70:	f640 0001 	movw	r0, #2049	; 0x801
    aa74:	f3af 8000 	nop.w
    aa78:	483c      	ldr	r0, [pc, #240]	; (ab6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    aa7a:	2800      	cmp	r0, #0
    aa7c:	bf18      	it	ne
    aa7e:	f3af 8000 	nopne.w
    aa82:	f3ef 8010 	mrs	r0, PRIMASK
    aa86:	b672      	cpsid	i
    aa88:	9007      	str	r0, [sp, #28]
    aa8a:	b124      	cbz	r4, aa96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    aa8c:	2100      	movs	r1, #0
    aa8e:	f640 0006 	movw	r0, #2054	; 0x806
    aa92:	f3af 8000 	nop.w
    aa96:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    aa9a:	f88d 0008 	strb.w	r0, [sp, #8]
    aa9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aaa2:	b138      	cbz	r0, aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    aaa4:	2c00      	cmp	r4, #0
    aaa6:	bf1c      	itt	ne
    aaa8:	2100      	movne	r1, #0
    aaaa:	f640 000a 	movwne	r0, #2058	; 0x80a
    aaae:	f43f af40 	beq.w	a932 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aab2:	e781      	b.n	a9b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aab4:	f1bb 0f00 	cmp.w	fp, #0
    aab8:	d009      	beq.n	aace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aaba:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aabe:	2820      	cmp	r0, #32
    aac0:	d105      	bne.n	aace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aac2:	4631      	mov	r1, r6
    aac4:	2002      	movs	r0, #2
    aac6:	f7ff f95f 	bl	9d88 <MPSL_IRQ_RADIO_Handler+0xf30>
    aaca:	9006      	str	r0, [sp, #24]
    aacc:	b1f8      	cbz	r0, ab0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aace:	b124      	cbz	r4, aada <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aad0:	2100      	movs	r1, #0
    aad2:	f640 001e 	movw	r0, #2078	; 0x81e
    aad6:	f3af 8000 	nop.w
    aada:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aade:	e000      	b.n	aae2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aae0:	e008      	b.n	aaf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aae2:	ea27 0000 	bic.w	r0, r7, r0
    aae6:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aaea:	20ff      	movs	r0, #255	; 0xff
    aaec:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aaf0:	2001      	movs	r0, #1
    aaf2:	9008      	str	r0, [sp, #32]
    aaf4:	b124      	cbz	r4, ab00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aaf6:	2100      	movs	r1, #0
    aaf8:	f640 0027 	movw	r0, #2087	; 0x827
    aafc:	f3af 8000 	nop.w
    ab00:	9806      	ldr	r0, [sp, #24]
    ab02:	4e1b      	ldr	r6, [pc, #108]	; (ab70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    ab04:	2802      	cmp	r0, #2
    ab06:	d009      	beq.n	ab1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    ab08:	2801      	cmp	r0, #1
    ab0a:	d010      	beq.n	ab2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    ab0c:	e014      	b.n	ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab0e:	b19c      	cbz	r4, ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab10:	2100      	movs	r1, #0
    ab12:	f640 0019 	movw	r0, #2073	; 0x819
    ab16:	f3af 8000 	nop.w
    ab1a:	e7ec      	b.n	aaf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ab1c:	f000 fd6e 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ab20:	68a9      	ldr	r1, [r5, #8]
    ab22:	1a08      	subs	r0, r1, r0
    ab24:	f005 ffc3 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ab28:	6871      	ldr	r1, [r6, #4]
    ab2a:	b921      	cbnz	r1, ab36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    ab2c:	e004      	b.n	ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab2e:	6871      	ldr	r1, [r6, #4]
    ab30:	f04f 30ff 	mov.w	r0, #4294967295
    ab34:	b101      	cbz	r1, ab38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab36:	4788      	blx	r1
    ab38:	9807      	ldr	r0, [sp, #28]
    ab3a:	b148      	cbz	r0, ab50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    ab3c:	b124      	cbz	r4, ab48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    ab3e:	2100      	movs	r1, #0
    ab40:	f640 003c 	movw	r0, #2108	; 0x83c
    ab44:	f3af 8000 	nop.w
    ab48:	9808      	ldr	r0, [sp, #32]
    ab4a:	b00d      	add	sp, #52	; 0x34
    ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab50:	4805      	ldr	r0, [pc, #20]	; (ab68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    ab52:	2800      	cmp	r0, #0
    ab54:	bf18      	it	ne
    ab56:	f3af 8000 	nopne.w
    ab5a:	b662      	cpsie	i
    ab5c:	e7ee      	b.n	ab3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    ab5e:	0000      	.short	0x0000
    ab60:	20001418 	.word	0x20001418
	...
    ab70:	200002ec 	.word	0x200002ec

0000ab74 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    ab74:	2820      	cmp	r0, #32
    ab76:	bf24      	itt	cs
    ab78:	2000      	movcs	r0, #0
    ab7a:	4770      	bxcs	lr
    ab7c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ab80:	4b03      	ldr	r3, [pc, #12]	; (ab90 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    ab82:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    ab86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ab8a:	6042      	str	r2, [r0, #4]
    ab8c:	2001      	movs	r0, #1
    ab8e:	4770      	bx	lr
    ab90:	20001018 	.word	0x20001018

0000ab94 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ab94:	b510      	push	{r4, lr}
    ab96:	2820      	cmp	r0, #32
    ab98:	d211      	bcs.n	abbe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ab9a:	490e      	ldr	r1, [pc, #56]	; (abd4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ab9c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aba0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    aba4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    aba8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    abac:	b13b      	cbz	r3, abbe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    abae:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    abb2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    abb6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    abba:	2a01      	cmp	r2, #1
    abbc:	d001      	beq.n	abc2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    abbe:	2000      	movs	r0, #0
    abc0:	bd10      	pop	{r4, pc}
    abc2:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    abc6:	4601      	mov	r1, r0
    abc8:	2000      	movs	r0, #0
    abca:	f7ff f8ab 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    abce:	2001      	movs	r0, #1
    abd0:	bd10      	pop	{r4, pc}
    abd2:	0000      	.short	0x0000
    abd4:	20001418 	.word	0x20001418

0000abd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    abd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abdc:	4e86      	ldr	r6, [pc, #536]	; (adf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    abde:	4680      	mov	r8, r0
    abe0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    abe4:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    abe8:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    abec:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    abf0:	2800      	cmp	r0, #0
    abf2:	d071      	beq.n	acd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    abf4:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    abf8:	4d80      	ldr	r5, [pc, #512]	; (adfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    abfa:	b125      	cbz	r5, ac06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    abfc:	2100      	movs	r1, #0
    abfe:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ac02:	f3af 8000 	nop.w
    ac06:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ac0a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac0e:	2801      	cmp	r0, #1
    ac10:	d018      	beq.n	ac44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ac12:	b2c0      	uxtb	r0, r0
    ac14:	2804      	cmp	r0, #4
    ac16:	bf1c      	itt	ne
    ac18:	2805      	cmpne	r0, #5
    ac1a:	2806      	cmpne	r0, #6
    ac1c:	d061      	beq.n	ace2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ac1e:	b12d      	cbz	r5, ac2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ac20:	f04f 0100 	mov.w	r1, #0
    ac24:	f640 30c5 	movw	r0, #3013	; 0xbc5
    ac28:	f3af 8000 	nop.w
    ac2c:	f006 f875 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ac30:	b125      	cbz	r5, ac3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ac32:	2100      	movs	r1, #0
    ac34:	f640 30c9 	movw	r0, #3017	; 0xbc9
    ac38:	f3af 8000 	nop.w
    ac3c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac40:	2801      	cmp	r0, #1
    ac42:	d1e6      	bne.n	ac12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ac44:	2401      	movs	r4, #1
    ac46:	b125      	cbz	r5, ac52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ac48:	2100      	movs	r1, #0
    ac4a:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    ac4e:	f3af 8000 	nop.w
    ac52:	2c00      	cmp	r4, #0
    ac54:	d04b      	beq.n	acee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ac56:	2000      	movs	r0, #0
    ac58:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ac5c:	b125      	cbz	r5, ac68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ac5e:	2100      	movs	r1, #0
    ac60:	f640 30d5 	movw	r0, #3029	; 0xbd5
    ac64:	f3af 8000 	nop.w
    ac68:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    ac6c:	2001      	movs	r0, #1
    ac6e:	ea20 090b 	bic.w	r9, r0, fp
    ac72:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ac76:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ac7a:	2240      	movs	r2, #64	; 0x40
    ac7c:	f006 f898 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ac80:	b125      	cbz	r5, ac8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    ac82:	2100      	movs	r1, #0
    ac84:	f240 505e 	movw	r0, #1374	; 0x55e
    ac88:	f3af 8000 	nop.w
    ac8c:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    ac90:	eb00 0a06 	add.w	sl, r0, r6
    ac94:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    ac98:	4430      	add	r0, r6
    ac9a:	8c01      	ldrh	r1, [r0, #32]
    ac9c:	f8aa 1020 	strh.w	r1, [sl, #32]
    aca0:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    aca4:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    aca8:	b125      	cbz	r5, acb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    acaa:	2100      	movs	r1, #0
    acac:	f240 5062 	movw	r0, #1378	; 0x562
    acb0:	f3af 8000 	nop.w
    acb4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    acb8:	f88d 0000 	strb.w	r0, [sp]
    acbc:	f89d 0000 	ldrb.w	r0, [sp]
    acc0:	b1e0      	cbz	r0, acfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    acc2:	2d00      	cmp	r5, #0
    acc4:	bf1c      	itt	ne
    acc6:	2100      	movne	r1, #0
    acc8:	f640 30db 	movwne	r0, #3035	; 0xbdb
    accc:	d0bb      	beq.n	ac46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acce:	bf00      	nop
    acd0:	f3af 8000 	nop.w
    acd4:	e7b7      	b.n	ac46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acd6:	e7ff      	b.n	acd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    acd8:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    acdc:	2070      	movs	r0, #112	; 0x70
    acde:	f001 fbdd 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ace2:	464a      	mov	r2, r9
    ace4:	4641      	mov	r1, r8
    ace6:	2001      	movs	r0, #1
    ace8:	f7ff f81c 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    acec:	e7a0      	b.n	ac30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    acee:	4844      	ldr	r0, [pc, #272]	; (ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    acf0:	2800      	cmp	r0, #0
    acf2:	bf18      	it	ne
    acf4:	f3af 8000 	nopne.w
    acf8:	b662      	cpsie	i
    acfa:	e7ac      	b.n	ac56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    acfc:	b125      	cbz	r5, ad08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    acfe:	2100      	movs	r1, #0
    ad00:	f640 30df 	movw	r0, #3039	; 0xbdf
    ad04:	f3af 8000 	nop.w
    ad08:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ad0c:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ad10:	4640      	mov	r0, r8
    ad12:	461c      	mov	r4, r3
    ad14:	f04f 0b20 	mov.w	fp, #32
    ad18:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ad1c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ad20:	e004      	b.n	ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ad22:	46a3      	mov	fp, r4
    ad24:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ad28:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ad2c:	4284      	cmp	r4, r0
    ad2e:	d002      	beq.n	ad36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ad30:	2c20      	cmp	r4, #32
    ad32:	d02b      	beq.n	ad8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ad34:	e7f5      	b.n	ad22 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ad36:	2c20      	cmp	r4, #32
    ad38:	d028      	beq.n	ad8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ad3a:	42a3      	cmp	r3, r4
    ad3c:	d104      	bne.n	ad48 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    ad3e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    ad42:	7840      	ldrb	r0, [r0, #1]
    ad44:	7008      	strb	r0, [r1, #0]
    ad46:	e005      	b.n	ad54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    ad48:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    ad4c:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    ad50:	7840      	ldrb	r0, [r0, #1]
    ad52:	7048      	strb	r0, [r1, #1]
    ad54:	f1ba 0f00 	cmp.w	sl, #0
    ad58:	d011      	beq.n	ad7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ad5a:	b125      	cbz	r5, ad66 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    ad5c:	2100      	movs	r1, #0
    ad5e:	f240 40c1 	movw	r0, #1217	; 0x4c1
    ad62:	f3af 8000 	nop.w
    ad66:	f89a 0000 	ldrb.w	r0, [sl]
    ad6a:	42a0      	cmp	r0, r4
    ad6c:	d107      	bne.n	ad7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ad6e:	b125      	cbz	r5, ad7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    ad70:	2100      	movs	r1, #0
    ad72:	f240 40c4 	movw	r0, #1220	; 0x4c4
    ad76:	f3af 8000 	nop.w
    ad7a:	f88a b000 	strb.w	fp, [sl]
    ad7e:	b15d      	cbz	r5, ad98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ad80:	2100      	movs	r1, #0
    ad82:	f240 40c9 	movw	r0, #1225	; 0x4c9
    ad86:	f3af 8000 	nop.w
    ad8a:	e000      	b.n	ad8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    ad8c:	b125      	cbz	r5, ad98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ad8e:	2100      	movs	r1, #0
    ad90:	f640 30e3 	movw	r0, #3043	; 0xbe3
    ad94:	f3af 8000 	nop.w
    ad98:	481a      	ldr	r0, [pc, #104]	; (ae04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    ad9a:	2800      	cmp	r0, #0
    ad9c:	bf18      	it	ne
    ad9e:	f3af 8000 	nopne.w
    ada2:	f3ef 8410 	mrs	r4, PRIMASK
    ada6:	b672      	cpsid	i
    ada8:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    adac:	f88d 0000 	strb.w	r0, [sp]
    adb0:	f89d 0000 	ldrb.w	r0, [sp]
    adb4:	b138      	cbz	r0, adc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    adb6:	2d00      	cmp	r5, #0
    adb8:	bf1c      	itt	ne
    adba:	2100      	movne	r1, #0
    adbc:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    adc0:	f43f af41 	beq.w	ac46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    adc4:	e784      	b.n	acd0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    adc6:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    adca:	20ff      	movs	r0, #255	; 0xff
    adcc:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    add0:	b154      	cbz	r4, ade8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    add2:	2d00      	cmp	r5, #0
    add4:	bf08      	it	eq
    add6:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adda:	2100      	movs	r1, #0
    addc:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ade0:	f3af 8000 	nop.w
    ade4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ade8:	4805      	ldr	r0, [pc, #20]	; (ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    adea:	2800      	cmp	r0, #0
    adec:	bf18      	it	ne
    adee:	f3af 8000 	nopne.w
    adf2:	b662      	cpsie	i
    adf4:	e7ed      	b.n	add2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    adf6:	0000      	.short	0x0000
    adf8:	20001418 	.word	0x20001418
	...

0000ae08 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ae08:	b570      	push	{r4, r5, r6, lr}
    ae0a:	460d      	mov	r5, r1
    ae0c:	4606      	mov	r6, r0
    ae0e:	f001 fabb 	bl	c388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ae12:	480f      	ldr	r0, [pc, #60]	; (ae50 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ae14:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ae18:	2400      	movs	r4, #0
    ae1a:	3880      	subs	r0, #128	; 0x80
    ae1c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ae20:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ae24:	b129      	cbz	r1, ae32 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ae26:	1c61      	adds	r1, r4, #1
    ae28:	b2cc      	uxtb	r4, r1
    ae2a:	2c20      	cmp	r4, #32
    ae2c:	d3f8      	bcc.n	ae20 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ae2e:	2020      	movs	r0, #32
    ae30:	bd70      	pop	{r4, r5, r6, pc}
    ae32:	4808      	ldr	r0, [pc, #32]	; (ae54 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ae34:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ae38:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    ae3c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ae40:	4621      	mov	r1, r4
    ae42:	6045      	str	r5, [r0, #4]
    ae44:	2001      	movs	r0, #1
    ae46:	f7fe ff6d 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    ae4a:	4620      	mov	r0, r4
    ae4c:	bd70      	pop	{r4, r5, r6, pc}
    ae4e:	0000      	.short	0x0000
    ae50:	20001418 	.word	0x20001418
    ae54:	20001018 	.word	0x20001018

0000ae58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae5c:	b083      	sub	sp, #12
    ae5e:	f000 fbcd 	bl	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ae62:	4605      	mov	r5, r0
    ae64:	f000 feb0 	bl	bbc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ae68:	4c84      	ldr	r4, [pc, #528]	; (b07c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    ae6a:	6860      	ldr	r0, [r4, #4]
    ae6c:	f1b0 3fff 	cmp.w	r0, #4294967295
    ae70:	bf1c      	itt	ne
    ae72:	f04f 30ff 	movne.w	r0, #4294967295
    ae76:	6060      	strne	r0, [r4, #4]
    ae78:	7fa0      	ldrb	r0, [r4, #30]
    ae7a:	f8df 9204 	ldr.w	r9, [pc, #516]	; b080 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    ae7e:	b990      	cbnz	r0, aea6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    ae80:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    ae84:	1a40      	subs	r0, r0, r1
    ae86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae8a:	f44f 710c 	mov.w	r1, #560	; 0x230
    ae8e:	f001 fa67 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ae92:	68e1      	ldr	r1, [r4, #12]
    ae94:	4408      	add	r0, r1
    ae96:	1a28      	subs	r0, r5, r0
    ae98:	0200      	lsls	r0, r0, #8
    ae9a:	17c1      	asrs	r1, r0, #31
    ae9c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    aea0:	1200      	asrs	r0, r0, #8
    aea2:	0fc0      	lsrs	r0, r0, #31
    aea4:	d012      	beq.n	aecc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    aea6:	7e60      	ldrb	r0, [r4, #25]
    aea8:	b320      	cbz	r0, aef4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    aeaa:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    aeae:	f88d 0000 	strb.w	r0, [sp]
    aeb2:	f89d 0000 	ldrb.w	r0, [sp]
    aeb6:	b1e8      	cbz	r0, aef4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    aeb8:	f000 fce2 	bl	b880 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    aebc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    aec0:	b1f0      	cbz	r0, af00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    aec2:	f240 31f5 	movw	r1, #1013	; 0x3f5
    aec6:	2070      	movs	r0, #112	; 0x70
    aec8:	f001 fae8 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aecc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    aed0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    aed4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    aed8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    aedc:	6840      	ldr	r0, [r0, #4]
    aede:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    aee2:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    aee6:	2108      	movs	r1, #8
    aee8:	4790      	blx	r2
    aeea:	f240 31dd 	movw	r1, #989	; 0x3dd
    aeee:	2070      	movs	r0, #112	; 0x70
    aef0:	f001 fad4 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aef4:	1ce8      	adds	r0, r5, #3
    aef6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aefa:	f000 fba5 	bl	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    aefe:	e7dd      	b.n	aebc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    af00:	2001      	movs	r0, #1
    af02:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    af06:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    af0a:	2820      	cmp	r0, #32
    af0c:	d021      	beq.n	af52 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    af0e:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    af12:	2020      	movs	r0, #32
    af14:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    af18:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    af1c:	2000      	movs	r0, #0
    af1e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    af22:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    af26:	6020      	str	r0, [r4, #0]
    af28:	f000 ff28 	bl	bd7c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    af2c:	7720      	strb	r0, [r4, #28]
    af2e:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    af32:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    af36:	1907      	adds	r7, r0, r4
    af38:	f897 0020 	ldrb.w	r0, [r7, #32]
    af3c:	2820      	cmp	r0, #32
    af3e:	d058      	beq.n	aff2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    af44:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    af48:	f899 001a 	ldrb.w	r0, [r9, #26]
    af4c:	2801      	cmp	r0, #1
    af4e:	d005      	beq.n	af5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    af50:	e04f      	b.n	aff2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af52:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    af56:	2070      	movs	r0, #112	; 0x70
    af58:	f001 faa0 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af5c:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    af60:	aa01      	add	r2, sp, #4
    af62:	4669      	mov	r1, sp
    af64:	4658      	mov	r0, fp
    af66:	f000 f9df 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    af6a:	f000 ff01 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    af6e:	f000 f9bf 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    af72:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    af76:	2820      	cmp	r0, #32
    af78:	d004      	beq.n	af84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    af7a:	68e0      	ldr	r0, [r4, #12]
    af7c:	1d40      	adds	r0, r0, #5
    af7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af82:	e01d      	b.n	afc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    af84:	f105 0a09 	add.w	sl, r5, #9
    af88:	f1bb 0f00 	cmp.w	fp, #0
    af8c:	d016      	beq.n	afbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    af8e:	f001 fa0d 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    af92:	b998      	cbnz	r0, afbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    af94:	f001 f8c4 	bl	c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    af98:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    af9c:	bf08      	it	eq
    af9e:	200d      	moveq	r0, #13
    afa0:	d00b      	beq.n	afba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    afa2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    afa6:	3856      	subs	r0, #86	; 0x56
    afa8:	bf08      	it	eq
    afaa:	201c      	moveq	r0, #28
    afac:	d005      	beq.n	afba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    afae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    afb2:	389f      	subs	r0, #159	; 0x9f
    afb4:	bf14      	ite	ne
    afb6:	2000      	movne	r0, #0
    afb8:	2032      	moveq	r0, #50	; 0x32
    afba:	4482      	add	sl, r0
    afbc:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    afc0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    afc4:	1a81      	subs	r1, r0, r2
    afc6:	0209      	lsls	r1, r1, #8
    afc8:	17cb      	asrs	r3, r1, #31
    afca:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    afce:	1209      	asrs	r1, r1, #8
    afd0:	2900      	cmp	r1, #0
    afd2:	dc0e      	bgt.n	aff2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    afd4:	f109 0308 	add.w	r3, r9, #8
    afd8:	4282      	cmp	r2, r0
    afda:	d202      	bcs.n	afe2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    afdc:	6899      	ldr	r1, [r3, #8]
    afde:	1e49      	subs	r1, r1, #1
    afe0:	6099      	str	r1, [r3, #8]
    afe2:	e9d3 2100 	ldrd	r2, r1, [r3]
    afe6:	1a89      	subs	r1, r1, r2
    afe8:	6018      	str	r0, [r3, #0]
    afea:	4408      	add	r0, r1
    afec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aff0:	6058      	str	r0, [r3, #4]
    aff2:	4631      	mov	r1, r6
    aff4:	2001      	movs	r0, #1
    aff6:	f7fe fec7 	bl	9d88 <MPSL_IRQ_RADIO_Handler+0xf30>
    affa:	ea5f 0900 	movs.w	r9, r0
    affe:	d0f8      	beq.n	aff2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b000:	4820      	ldr	r0, [pc, #128]	; (b084 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    b002:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    b006:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b00a:	2802      	cmp	r0, #2
    b00c:	d104      	bne.n	b018 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    b00e:	4632      	mov	r2, r6
    b010:	4641      	mov	r1, r8
    b012:	2006      	movs	r0, #6
    b014:	f7fe fe86 	bl	9d24 <MPSL_IRQ_RADIO_Handler+0xecc>
    b018:	20ff      	movs	r0, #255	; 0xff
    b01a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b01e:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    b022:	4e19      	ldr	r6, [pc, #100]	; (b088 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    b024:	2820      	cmp	r0, #32
    b026:	bf1c      	itt	ne
    b028:	7870      	ldrbne	r0, [r6, #1]
    b02a:	f001 fb0b 	blne	c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b02e:	7f20      	ldrb	r0, [r4, #28]
    b030:	b120      	cbz	r0, b03c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    b032:	f000 fe7f 	bl	bd34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b036:	2000      	movs	r0, #0
    b038:	7720      	strb	r0, [r4, #28]
    b03a:	7760      	strb	r0, [r4, #29]
    b03c:	f1b9 0f02 	cmp.w	r9, #2
    b040:	d011      	beq.n	b066 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    b042:	f1b9 0f01 	cmp.w	r9, #1
    b046:	bf1c      	itt	ne
    b048:	b003      	addne	sp, #12
    b04a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b04e:	f04f 30ff 	mov.w	r0, #4294967295
    b052:	6871      	ldr	r1, [r6, #4]
    b054:	2900      	cmp	r1, #0
    b056:	bf04      	itt	eq
    b058:	b003      	addeq	sp, #12
    b05a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b05e:	b003      	add	sp, #12
    b060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b064:	4708      	bx	r1
    b066:	68a0      	ldr	r0, [r4, #8]
    b068:	1b40      	subs	r0, r0, r5
    b06a:	f005 fd20 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b06e:	6871      	ldr	r1, [r6, #4]
    b070:	2900      	cmp	r1, #0
    b072:	d1f4      	bne.n	b05e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    b074:	b003      	add	sp, #12
    b076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b07a:	0000      	.short	0x0000
    b07c:	20001418 	.word	0x20001418
    b080:	20001018 	.word	0x20001018
    b084:	20001398 	.word	0x20001398
    b088:	200002ec 	.word	0x200002ec

0000b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b08c:	b570      	push	{r4, r5, r6, lr}
    b08e:	4c42      	ldr	r4, [pc, #264]	; (b198 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b090:	4605      	mov	r5, r0
    b092:	b082      	sub	sp, #8
    b094:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b098:	2820      	cmp	r0, #32
    b09a:	d008      	beq.n	b0ae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b09c:	6860      	ldr	r0, [r4, #4]
    b09e:	f1b0 3fff 	cmp.w	r0, #4294967295
    b0a2:	d009      	beq.n	b0b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b0a4:	f640 21e4 	movw	r1, #2788	; 0xae4
    b0a8:	2070      	movs	r0, #112	; 0x70
    b0aa:	f001 f9f7 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0ae:	f640 21e3 	movw	r1, #2787	; 0xae3
    b0b2:	2070      	movs	r0, #112	; 0x70
    b0b4:	f001 f9f2 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0b8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b0bc:	4937      	ldr	r1, [pc, #220]	; (b19c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b0be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b0c2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    b0c6:	68b0      	ldr	r0, [r6, #8]
    b0c8:	f005 fcf1 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b0cc:	4602      	mov	r2, r0
    b0ce:	8af0      	ldrh	r0, [r6, #22]
    b0d0:	7d31      	ldrb	r1, [r6, #20]
    b0d2:	4b33      	ldr	r3, [pc, #204]	; (b1a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b0d4:	4408      	add	r0, r1
    b0d6:	1c40      	adds	r0, r0, #1
    b0d8:	1811      	adds	r1, r2, r0
    b0da:	429a      	cmp	r2, r3
    b0dc:	d817      	bhi.n	b10e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b0de:	4a31      	ldr	r2, [pc, #196]	; (b1a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b0e0:	4290      	cmp	r0, r2
    b0e2:	dc1b      	bgt.n	b11c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b0e4:	f1c2 0c00 	rsb	ip, r2, #0
    b0e8:	4560      	cmp	r0, ip
    b0ea:	db1e      	blt.n	b12a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b0ec:	0056      	lsls	r6, r2, #1
    b0ee:	428e      	cmp	r6, r1
    b0f0:	bfdc      	itt	le
    b0f2:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b0f6:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b0fa:	dd05      	ble.n	b108 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b0fc:	2900      	cmp	r1, #0
    b0fe:	bfbc      	itt	lt
    b100:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b104:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b108:	1948      	adds	r0, r1, r5
    b10a:	4299      	cmp	r1, r3
    b10c:	d904      	bls.n	b118 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b10e:	f240 519e 	movw	r1, #1438	; 0x59e
    b112:	2070      	movs	r0, #112	; 0x70
    b114:	f001 f9c2 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b118:	4295      	cmp	r5, r2
    b11a:	dd04      	ble.n	b126 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b11c:	f240 519f 	movw	r1, #1439	; 0x59f
    b120:	2070      	movs	r0, #112	; 0x70
    b122:	f001 f9bb 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b126:	4565      	cmp	r5, ip
    b128:	da04      	bge.n	b134 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b12a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b12e:	2070      	movs	r0, #112	; 0x70
    b130:	f001 f9b4 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b134:	4286      	cmp	r6, r0
    b136:	bfdc      	itt	le
    b138:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b13c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b140:	dd05      	ble.n	b14e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b142:	2800      	cmp	r0, #0
    b144:	bfbc      	itt	lt
    b146:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b14a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b14e:	aa01      	add	r2, sp, #4
    b150:	4669      	mov	r1, sp
    b152:	f000 f8e9 	bl	b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b156:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b15a:	280f      	cmp	r0, #15
    b15c:	bf8c      	ite	hi
    b15e:	2001      	movhi	r0, #1
    b160:	2000      	movls	r0, #0
    b162:	9900      	ldr	r1, [sp, #0]
    b164:	4408      	add	r0, r1
    b166:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b16a:	6061      	str	r1, [r4, #4]
    b16c:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b170:	f88d 0000 	strb.w	r0, [sp]
    b174:	f89d 0000 	ldrb.w	r0, [sp]
    b178:	2800      	cmp	r0, #0
    b17a:	bf04      	itt	eq
    b17c:	b002      	addeq	sp, #8
    b17e:	bd70      	popeq	{r4, r5, r6, pc}
    b180:	2005      	movs	r0, #5
    b182:	f000 fbfb 	bl	b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b186:	2800      	cmp	r0, #0
    b188:	bf1c      	itt	ne
    b18a:	b002      	addne	sp, #8
    b18c:	bd70      	popne	{r4, r5, r6, pc}
    b18e:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b192:	2070      	movs	r0, #112	; 0x70
    b194:	f001 f982 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b198:	20001418 	.word	0x20001418
    b19c:	20001018 	.word	0x20001018
    b1a0:	1e847fff 	.word	0x1e847fff
    b1a4:	0f424000 	.word	0x0f424000

0000b1a8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b1a8:	b570      	push	{r4, r5, r6, lr}
    b1aa:	4c1c      	ldr	r4, [pc, #112]	; (b21c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b1ac:	2120      	movs	r1, #32
    b1ae:	f884 1020 	strb.w	r1, [r4, #32]
    b1b2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b1b6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b1ba:	2000      	movs	r0, #0
    b1bc:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b1c0:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b1c4:	1e42      	subs	r2, r0, #1
    b1c6:	e9c4 0200 	strd	r0, r2, [r4]
    b1ca:	77a0      	strb	r0, [r4, #30]
    b1cc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b1d0:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b1d4:	7720      	strb	r0, [r4, #28]
    b1d6:	7760      	strb	r0, [r4, #29]
    b1d8:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b1dc:	62e2      	str	r2, [r4, #44]	; 0x2c
    b1de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b1e2:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b1e6:	2210      	movs	r2, #16
    b1e8:	7088      	strb	r0, [r1, #2]
    b1ea:	f801 0f04 	strb.w	r0, [r1, #4]!
    b1ee:	1e52      	subs	r2, r2, #1
    b1f0:	d1fa      	bne.n	b1e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b1f2:	f000 fdcd 	bl	bd90 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b1f6:	4d0a      	ldr	r5, [pc, #40]	; (b220 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b1f8:	2601      	movs	r6, #1
    b1fa:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b1fe:	20ff      	movs	r0, #255	; 0xff
    b200:	7028      	strb	r0, [r5, #0]
    b202:	4808      	ldr	r0, [pc, #32]	; (b224 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b204:	f001 fa00 	bl	c608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b208:	7068      	strb	r0, [r5, #1]
    b20a:	f001 fa6b 	bl	c6e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b20e:	60a8      	str	r0, [r5, #8]
    b210:	f000 fd48 	bl	bca4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b214:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b218:	bd70      	pop	{r4, r5, r6, pc}
    b21a:	0000      	.short	0x0000
    b21c:	20001418 	.word	0x20001418
    b220:	200002ec 	.word	0x200002ec
    b224:	00009c4d 	.word	0x00009c4d

0000b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b228:	b500      	push	{lr}
    b22a:	b083      	sub	sp, #12
    b22c:	4668      	mov	r0, sp
    b22e:	f000 f9eb 	bl	b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b232:	9800      	ldr	r0, [sp, #0]
    b234:	f005 fc3b 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b238:	9a01      	ldr	r2, [sp, #4]
    b23a:	4b03      	ldr	r3, [pc, #12]	; (b248 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b23c:	2100      	movs	r1, #0
    b23e:	fbe2 0103 	umlal	r0, r1, r2, r3
    b242:	b003      	add	sp, #12
    b244:	bd00      	pop	{pc}
    b246:	0000      	.short	0x0000
    b248:	1e848000 	.word	0x1e848000

0000b24c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b24c:	b570      	push	{r4, r5, r6, lr}
    b24e:	4606      	mov	r6, r0
    b250:	b082      	sub	sp, #8
    b252:	461d      	mov	r5, r3
    b254:	4610      	mov	r0, r2
    b256:	f005 fc2a 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b25a:	4604      	mov	r4, r0
    b25c:	4668      	mov	r0, sp
    b25e:	f000 f9d3 	bl	b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b262:	4920      	ldr	r1, [pc, #128]	; (b2e4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    b264:	9801      	ldr	r0, [sp, #4]
    b266:	fba0 0201 	umull	r0, r2, r0, r1
    b26a:	1a30      	subs	r0, r6, r0
    b26c:	bf44      	itt	mi
    b26e:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    b272:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    b276:	d504      	bpl.n	b282 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    b278:	f640 410b 	movw	r1, #3083	; 0xc0b
    b27c:	2070      	movs	r0, #112	; 0x70
    b27e:	f001 f90d 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b282:	4288      	cmp	r0, r1
    b284:	db04      	blt.n	b290 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    b286:	f640 410c 	movw	r1, #3084	; 0xc0c
    b28a:	2070      	movs	r0, #112	; 0x70
    b28c:	f001 f906 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b290:	4a15      	ldr	r2, [pc, #84]	; (b2e8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    b292:	1a21      	subs	r1, r4, r0
    b294:	2300      	movs	r3, #0
    b296:	1a8a      	subs	r2, r1, r2
    b298:	f173 0200 	sbcs.w	r2, r3, #0
    b29c:	d318      	bcc.n	b2d0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b29e:	f8df c048 	ldr.w	ip, [pc, #72]	; b2e8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    b2a2:	1b02      	subs	r2, r0, r4
    b2a4:	ebb2 0c0c 	subs.w	ip, r2, ip
    b2a8:	f173 0300 	sbcs.w	r3, r3, #0
    b2ac:	d310      	bcc.n	b2d0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b2ae:	4b0f      	ldr	r3, [pc, #60]	; (b2ec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    b2b0:	428b      	cmp	r3, r1
    b2b2:	bf3e      	ittt	cc
    b2b4:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    b2b8:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b2bc:	1901      	addcc	r1, r0, r4
    b2be:	d307      	bcc.n	b2d0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b2c0:	4293      	cmp	r3, r2
    b2c2:	d20a      	bcs.n	b2da <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    b2c4:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    b2c8:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    b2cc:	4408      	add	r0, r1
    b2ce:	4241      	negs	r1, r0
    b2d0:	f101 000f 	add.w	r0, r1, #15
    b2d4:	b002      	add	sp, #8
    b2d6:	1a28      	subs	r0, r5, r0
    b2d8:	bd70      	pop	{r4, r5, r6, pc}
    b2da:	f640 3105 	movw	r1, #2821	; 0xb05
    b2de:	2070      	movs	r0, #112	; 0x70
    b2e0:	f001 f8dc 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2e4:	1e848000 	.word	0x1e848000
    b2e8:	0f424000 	.word	0x0f424000
    b2ec:	1e847fff 	.word	0x1e847fff

0000b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b2f0:	0b41      	lsrs	r1, r0, #13
    b2f2:	f248 6237 	movw	r2, #34359	; 0x8637
    b2f6:	4351      	muls	r1, r2
    b2f8:	0c0a      	lsrs	r2, r1, #16
    b2fa:	4b09      	ldr	r3, [pc, #36]	; (b320 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b2fc:	0251      	lsls	r1, r2, #9
    b2fe:	fb02 0203 	mla	r2, r2, r3, r0
    b302:	4808      	ldr	r0, [pc, #32]	; (b324 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b304:	4350      	muls	r0, r2
    b306:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b30a:	306e      	adds	r0, #110	; 0x6e
    b30c:	0d40      	lsrs	r0, r0, #21
    b30e:	425b      	negs	r3, r3
    b310:	fb10 f303 	smulbb	r3, r0, r3
    b314:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b318:	bf88      	it	hi
    b31a:	1c49      	addhi	r1, r1, #1
    b31c:	4408      	add	r0, r1
    b31e:	4770      	bx	lr
    b320:	ffffc2f7 	.word	0xffffc2f7
    b324:	00010c6f 	.word	0x00010c6f

0000b328 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b328:	0b43      	lsrs	r3, r0, #13
    b32a:	f248 6c37 	movw	ip, #34359	; 0x8637
    b32e:	fb03 f30c 	mul.w	r3, r3, ip
    b332:	b430      	push	{r4, r5}
    b334:	0c1b      	lsrs	r3, r3, #16
    b336:	f8df c044 	ldr.w	ip, [pc, #68]	; b37c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b33a:	025c      	lsls	r4, r3, #9
    b33c:	fb03 030c 	mla	r3, r3, ip, r0
    b340:	480f      	ldr	r0, [pc, #60]	; (b380 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b342:	4358      	muls	r0, r3
    b344:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b348:	eb04 000c 	add.w	r0, r4, ip
    b34c:	f643 5409 	movw	r4, #15625	; 0x3d09
    b350:	fb1c f404 	smulbb	r4, ip, r4
    b354:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b358:	f643 5508 	movw	r5, #15624	; 0x3d08
    b35c:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b360:	442c      	add	r4, r5
    b362:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b366:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b36a:	bf84      	itt	hi
    b36c:	f04f 0c00 	movhi.w	ip, #0
    b370:	1c40      	addhi	r0, r0, #1
    b372:	6008      	str	r0, [r1, #0]
    b374:	f882 c000 	strb.w	ip, [r2]
    b378:	bc30      	pop	{r4, r5}
    b37a:	4770      	bx	lr
    b37c:	ffffc2f7 	.word	0xffffc2f7
    b380:	00010c6f 	.word	0x00010c6f

0000b384 <MPSL_IRQ_RTC0_Handler>:
    b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b388:	4d3b      	ldr	r5, [pc, #236]	; (b478 <MPSL_IRQ_RTC0_Handler+0xf4>)
    b38a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b38e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b47c <MPSL_IRQ_RTC0_Handler+0xf8>
    b392:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b396:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b39a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b39e:	f04f 0400 	mov.w	r4, #0
    b3a2:	d019      	beq.n	b3d8 <MPSL_IRQ_RTC0_Handler+0x54>
    b3a4:	4836      	ldr	r0, [pc, #216]	; (b480 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b3a6:	6800      	ldr	r0, [r0, #0]
    b3a8:	b1b0      	cbz	r0, b3d8 <MPSL_IRQ_RTC0_Handler+0x54>
    b3aa:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b3ae:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b3b2:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b3b6:	f8d8 1000 	ldr.w	r1, [r8]
    b3ba:	1a40      	subs	r0, r0, r1
    b3bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b3c0:	2802      	cmp	r0, #2
    b3c2:	d302      	bcc.n	b3ca <MPSL_IRQ_RTC0_Handler+0x46>
    b3c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b3c8:	d906      	bls.n	b3d8 <MPSL_IRQ_RTC0_Handler+0x54>
    b3ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b3ce:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b3d2:	2004      	movs	r0, #4
    b3d4:	f7fe fe98 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3d8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b3dc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b3e0:	d01a      	beq.n	b418 <MPSL_IRQ_RTC0_Handler+0x94>
    b3e2:	4828      	ldr	r0, [pc, #160]	; (b484 <MPSL_IRQ_RTC0_Handler+0x100>)
    b3e4:	6800      	ldr	r0, [r0, #0]
    b3e6:	b1b8      	cbz	r0, b418 <MPSL_IRQ_RTC0_Handler+0x94>
    b3e8:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b3ec:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b3f0:	4825      	ldr	r0, [pc, #148]	; (b488 <MPSL_IRQ_RTC0_Handler+0x104>)
    b3f2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b3f6:	f8d8 1000 	ldr.w	r1, [r8]
    b3fa:	1a40      	subs	r0, r0, r1
    b3fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b400:	2802      	cmp	r0, #2
    b402:	d302      	bcc.n	b40a <MPSL_IRQ_RTC0_Handler+0x86>
    b404:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b408:	d906      	bls.n	b418 <MPSL_IRQ_RTC0_Handler+0x94>
    b40a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b40e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b412:	2005      	movs	r0, #5
    b414:	f7fe fe78 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b418:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b41c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b420:	d01a      	beq.n	b458 <MPSL_IRQ_RTC0_Handler+0xd4>
    b422:	481a      	ldr	r0, [pc, #104]	; (b48c <MPSL_IRQ_RTC0_Handler+0x108>)
    b424:	6800      	ldr	r0, [r0, #0]
    b426:	b1b8      	cbz	r0, b458 <MPSL_IRQ_RTC0_Handler+0xd4>
    b428:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b42c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b430:	4817      	ldr	r0, [pc, #92]	; (b490 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b432:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b436:	f8d8 1000 	ldr.w	r1, [r8]
    b43a:	1a40      	subs	r0, r0, r1
    b43c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b440:	2802      	cmp	r0, #2
    b442:	d302      	bcc.n	b44a <MPSL_IRQ_RTC0_Handler+0xc6>
    b444:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b448:	d906      	bls.n	b458 <MPSL_IRQ_RTC0_Handler+0xd4>
    b44a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b44e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b452:	2006      	movs	r0, #6
    b454:	f7fe fe58 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b458:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b45c:	2800      	cmp	r0, #0
    b45e:	bf08      	it	eq
    b460:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b464:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b468:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b46c:	4809      	ldr	r0, [pc, #36]	; (b494 <MPSL_IRQ_RTC0_Handler+0x110>)
    b46e:	68c1      	ldr	r1, [r0, #12]
    b470:	1c49      	adds	r1, r1, #1
    b472:	60c1      	str	r1, [r0, #12]
    b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b478:	4000b000 	.word	0x4000b000
    b47c:	4000b504 	.word	0x4000b504
    b480:	4000b140 	.word	0x4000b140
    b484:	4000b144 	.word	0x4000b144
    b488:	4000b004 	.word	0x4000b004
    b48c:	4000b148 	.word	0x4000b148
    b490:	4000b008 	.word	0x4000b008
    b494:	200002f8 	.word	0x200002f8

0000b498 <MPSL_IRQ_TIMER0_Handler>:
    b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b49c:	4d38      	ldr	r5, [pc, #224]	; (b580 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b49e:	7828      	ldrb	r0, [r5, #0]
    b4a0:	2804      	cmp	r0, #4
    b4a2:	d068      	beq.n	b576 <MPSL_IRQ_TIMER0_Handler+0xde>
    b4a4:	1ca8      	adds	r0, r5, #2
    b4a6:	2201      	movs	r2, #1
    b4a8:	7801      	ldrb	r1, [r0, #0]
    b4aa:	b159      	cbz	r1, b4c4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b4ac:	2901      	cmp	r1, #1
    b4ae:	bf08      	it	eq
    b4b0:	706a      	strbeq	r2, [r5, #1]
    b4b2:	d002      	beq.n	b4ba <MPSL_IRQ_TIMER0_Handler+0x22>
    b4b4:	7869      	ldrb	r1, [r5, #1]
    b4b6:	2900      	cmp	r1, #0
    b4b8:	d058      	beq.n	b56c <MPSL_IRQ_TIMER0_Handler+0xd4>
    b4ba:	2102      	movs	r1, #2
    b4bc:	7001      	strb	r1, [r0, #0]
    b4be:	7840      	ldrb	r0, [r0, #1]
    b4c0:	f000 fb12 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4c4:	4c2f      	ldr	r4, [pc, #188]	; (b584 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b4c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4ca:	f04f 0800 	mov.w	r8, #0
    b4ce:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b4d2:	f44f 7780 	mov.w	r7, #256	; 0x100
    b4d6:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b4da:	d00a      	beq.n	b4f2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b4dc:	482a      	ldr	r0, [pc, #168]	; (b588 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b4de:	6800      	ldr	r0, [r0, #0]
    b4e0:	b138      	cbz	r0, b4f2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b4e2:	2003      	movs	r0, #3
    b4e4:	f000 fb00 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4e8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b4ec:	2003      	movs	r0, #3
    b4ee:	f7fe fe0b 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b4f2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4f6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b4fa:	d00a      	beq.n	b512 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b4fc:	4823      	ldr	r0, [pc, #140]	; (b58c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b4fe:	6800      	ldr	r0, [r0, #0]
    b500:	b138      	cbz	r0, b512 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b502:	2002      	movs	r0, #2
    b504:	f000 faf0 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b508:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b50c:	2002      	movs	r0, #2
    b50e:	f7fe fdfb 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b512:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b516:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b51a:	d00a      	beq.n	b532 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b51c:	481c      	ldr	r0, [pc, #112]	; (b590 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b51e:	6800      	ldr	r0, [r0, #0]
    b520:	b138      	cbz	r0, b532 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b522:	2001      	movs	r0, #1
    b524:	f000 fae0 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b528:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b52c:	2001      	movs	r0, #1
    b52e:	f7fe fdeb 	bl	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b532:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b536:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b53a:	bf08      	it	eq
    b53c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b540:	4814      	ldr	r0, [pc, #80]	; (b594 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b542:	6800      	ldr	r0, [r0, #0]
    b544:	2800      	cmp	r0, #0
    b546:	bf08      	it	eq
    b548:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b54c:	2000      	movs	r0, #0
    b54e:	f000 facb 	bl	bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b552:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b556:	2004      	movs	r0, #4
    b558:	7028      	strb	r0, [r5, #0]
    b55a:	f8c5 8004 	str.w	r8, [r5, #4]
    b55e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b566:	2000      	movs	r0, #0
    b568:	f7fe bdce 	b.w	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b56c:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b570:	206c      	movs	r0, #108	; 0x6c
    b572:	f000 ff93 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b57a:	2007      	movs	r0, #7
    b57c:	f7fe bdc4 	b.w	a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b580:	200002f8 	.word	0x200002f8
    b584:	40008000 	.word	0x40008000
    b588:	4000814c 	.word	0x4000814c
    b58c:	40008148 	.word	0x40008148
    b590:	40008144 	.word	0x40008144
    b594:	40008140 	.word	0x40008140
    b598:	2201      	movs	r2, #1
    b59a:	0211      	lsls	r1, r2, #8
    b59c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b5a0:	2000      	movs	r0, #0
    b5a2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b5a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b5aa:	f3bf 8f4f 	dsb	sy
    b5ae:	f3bf 8f6f 	isb	sy
    b5b2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b5b6:	490e      	ldr	r1, [pc, #56]	; (b5f0 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b5b8:	f841 2f04 	str.w	r2, [r1, #4]!
    b5bc:	1e43      	subs	r3, r0, #1
    b5be:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b5c2:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b5c6:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b5ca:	4b0a      	ldr	r3, [pc, #40]	; (b5f4 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b5cc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b5d0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b5d4:	1d1b      	adds	r3, r3, #4
    b5d6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b5da:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b5de:	1d1b      	adds	r3, r3, #4
    b5e0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b5e4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b5e8:	60ca      	str	r2, [r1, #12]
    b5ea:	4903      	ldr	r1, [pc, #12]	; (b5f8 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b5ec:	7048      	strb	r0, [r1, #1]
    b5ee:	4770      	bx	lr
    b5f0:	40008000 	.word	0x40008000
    b5f4:	40008004 	.word	0x40008004
    b5f8:	200002f8 	.word	0x200002f8

0000b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b5fc:	4801      	ldr	r0, [pc, #4]	; (b604 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b5fe:	6800      	ldr	r0, [r0, #0]
    b600:	4770      	bx	lr
    b602:	0000      	.short	0x0000
    b604:	4000b504 	.word	0x4000b504

0000b608 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b608:	b430      	push	{r4, r5}
    b60a:	f3ef 8c10 	mrs	ip, PRIMASK
    b60e:	b672      	cpsid	i
    b610:	2500      	movs	r5, #0
    b612:	4b0b      	ldr	r3, [pc, #44]	; (b640 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b614:	4a0b      	ldr	r2, [pc, #44]	; (b644 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b616:	bf00      	nop
    b618:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b61c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b620:	b12c      	cbz	r4, b62e <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b622:	68d1      	ldr	r1, [r2, #12]
    b624:	1c49      	adds	r1, r1, #1
    b626:	60d1      	str	r1, [r2, #12]
    b628:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b62c:	e7f4      	b.n	b618 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b62e:	68d2      	ldr	r2, [r2, #12]
    b630:	f1bc 0f00 	cmp.w	ip, #0
    b634:	d100      	bne.n	b638 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b636:	b662      	cpsie	i
    b638:	e9c0 1200 	strd	r1, r2, [r0]
    b63c:	bc30      	pop	{r4, r5}
    b63e:	4770      	bx	lr
    b640:	4000b000 	.word	0x4000b000
    b644:	200002f8 	.word	0x200002f8

0000b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b64c:	f8df 8134 	ldr.w	r8, [pc, #308]	; b784 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b650:	4605      	mov	r5, r0
    b652:	f1a8 0602 	sub.w	r6, r8, #2
    b656:	f898 3000 	ldrb.w	r3, [r8]
    b65a:	68b0      	ldr	r0, [r6, #8]
    b65c:	2b01      	cmp	r3, #1
    b65e:	bf04      	itt	eq
    b660:	42a8      	cmpeq	r0, r5
    b662:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b666:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b66a:	4a47      	ldr	r2, [pc, #284]	; (b788 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b66c:	6011      	str	r1, [r2, #0]
    b66e:	4948      	ldr	r1, [pc, #288]	; (b790 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b670:	4a46      	ldr	r2, [pc, #280]	; (b78c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b672:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b676:	f101 0c04 	add.w	ip, r1, #4
    b67a:	f04f 0400 	mov.w	r4, #0
    b67e:	2b00      	cmp	r3, #0
    b680:	d055      	beq.n	b72e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b682:	4a44      	ldr	r2, [pc, #272]	; (b794 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b684:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b688:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b68c:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b690:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b694:	2701      	movs	r7, #1
    b696:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b69a:	2a00      	cmp	r2, #0
    b69c:	bf01      	itttt	eq
    b69e:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b6a2:	2a00      	cmpeq	r2, #0
    b6a4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b6a8:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b6ac:	f04f 0a10 	mov.w	sl, #16
    b6b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b6b4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b6b8:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b6bc:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b6c0:	4a35      	ldr	r2, [pc, #212]	; (b798 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b6c2:	f8d2 c000 	ldr.w	ip, [r2]
    b6c6:	eba5 0c0c 	sub.w	ip, r5, ip
    b6ca:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b6ce:	f1bc 0f02 	cmp.w	ip, #2
    b6d2:	d337      	bcc.n	b744 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b6d4:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b6d8:	d834      	bhi.n	b744 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b6da:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b6de:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b6e2:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b6e6:	b12b      	cbz	r3, b6f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b6e8:	6811      	ldr	r1, [r2, #0]
    b6ea:	1a41      	subs	r1, r0, r1
    b6ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b6f0:	2902      	cmp	r1, #2
    b6f2:	d3f9      	bcc.n	b6e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b6f4:	6077      	str	r7, [r6, #4]
    b6f6:	7034      	strb	r4, [r6, #0]
    b6f8:	f7ff ff4e 	bl	b598 <MPSL_IRQ_TIMER0_Handler+0x100>
    b6fc:	4827      	ldr	r0, [pc, #156]	; (b79c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b6fe:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b702:	f364 0101 	bfi	r1, r4, #0, #2
    b706:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b70a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b70e:	2102      	movs	r1, #2
    b710:	f361 0201 	bfi	r2, r1, #0, #2
    b714:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b718:	fa9a f1aa 	rbit	r1, sl
    b71c:	fab1 f181 	clz	r1, r1
    b720:	2909      	cmp	r1, #9
    b722:	d917      	bls.n	b754 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b724:	f240 3155 	movw	r1, #853	; 0x355
    b728:	a01d      	add	r0, pc, #116	; (adr r0, b7a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b72a:	f000 fe8b 	bl	c444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b72e:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b732:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b736:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b73a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b73e:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b742:	e7a5      	b.n	b690 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b744:	2000      	movs	r0, #0
    b746:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b74a:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b74e:	206c      	movs	r0, #108	; 0x6c
    b750:	f000 fea4 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b754:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b758:	60c7      	str	r7, [r0, #12]
    b75a:	6871      	ldr	r1, [r6, #4]
    b75c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b760:	f44f 7080 	mov.w	r0, #256	; 0x100
    b764:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b768:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b76c:	490f      	ldr	r1, [pc, #60]	; (b7ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b76e:	05c0      	lsls	r0, r0, #23
    b770:	6008      	str	r0, [r1, #0]
    b772:	2004      	movs	r0, #4
    b774:	60b5      	str	r5, [r6, #8]
    b776:	f888 0001 	strb.w	r0, [r8, #1]
    b77a:	f888 7000 	strb.w	r7, [r8]
    b77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b782:	0000      	.short	0x0000
    b784:	200002fa 	.word	0x200002fa
    b788:	4001f508 	.word	0x4001f508
    b78c:	fffbfffd 	.word	0xfffbfffd
    b790:	4000b000 	.word	0x4000b000
    b794:	fffafffd 	.word	0xfffafffd
    b798:	4000b504 	.word	0x4000b504
    b79c:	40008000 	.word	0x40008000
    b7a0:	5f66726e 	.word	0x5f66726e
    b7a4:	656d6974 	.word	0x656d6974
    b7a8:	00682e72 	.word	0x00682e72
    b7ac:	4001f504 	.word	0x4001f504

0000b7b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b7b0:	b570      	push	{r4, r5, r6, lr}
    b7b2:	4c2a      	ldr	r4, [pc, #168]	; (b85c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b7b4:	68a1      	ldr	r1, [r4, #8]
    b7b6:	4281      	cmp	r1, r0
    b7b8:	bf14      	ite	ne
    b7ba:	2201      	movne	r2, #1
    b7bc:	2200      	moveq	r2, #0
    b7be:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b860 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b7c2:	f89c 5000 	ldrb.w	r5, [ip]
    b7c6:	2d02      	cmp	r5, #2
    b7c8:	d002      	beq.n	b7d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b7ca:	2a00      	cmp	r2, #0
    b7cc:	d034      	beq.n	b838 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b7ce:	e002      	b.n	b7d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b7d0:	2a00      	cmp	r2, #0
    b7d2:	bf08      	it	eq
    b7d4:	bd70      	popeq	{r4, r5, r6, pc}
    b7d6:	7862      	ldrb	r2, [r4, #1]
    b7d8:	b39a      	cbz	r2, b842 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b7da:	4b22      	ldr	r3, [pc, #136]	; (b864 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b7dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b7e0:	601a      	str	r2, [r3, #0]
    b7e2:	4b21      	ldr	r3, [pc, #132]	; (b868 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b7e4:	1392      	asrs	r2, r2, #14
    b7e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b7ea:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b7ee:	2200      	movs	r2, #0
    b7f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b7f4:	4a1d      	ldr	r2, [pc, #116]	; (b86c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b7f6:	6816      	ldr	r6, [r2, #0]
    b7f8:	1b86      	subs	r6, r0, r6
    b7fa:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b7fe:	2e02      	cmp	r6, #2
    b800:	d324      	bcc.n	b84c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b802:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b806:	d821      	bhi.n	b84c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b808:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b80c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b810:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b814:	b12d      	cbz	r5, b822 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b816:	6813      	ldr	r3, [r2, #0]
    b818:	1acb      	subs	r3, r1, r3
    b81a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b81e:	2b02      	cmp	r3, #2
    b820:	d3f9      	bcc.n	b816 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b822:	4b13      	ldr	r3, [pc, #76]	; (b870 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b824:	2102      	movs	r1, #2
    b826:	074a      	lsls	r2, r1, #29
    b828:	601a      	str	r2, [r3, #0]
    b82a:	60a0      	str	r0, [r4, #8]
    b82c:	2004      	movs	r0, #4
    b82e:	f88c 0001 	strb.w	r0, [ip, #1]
    b832:	f88c 1000 	strb.w	r1, [ip]
    b836:	bd70      	pop	{r4, r5, r6, pc}
    b838:	f240 21aa 	movw	r1, #682	; 0x2aa
    b83c:	206c      	movs	r0, #108	; 0x6c
    b83e:	f000 fe2d 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b842:	f240 21ae 	movw	r1, #686	; 0x2ae
    b846:	206c      	movs	r0, #108	; 0x6c
    b848:	f000 fe28 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b84c:	2000      	movs	r0, #0
    b84e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b852:	f240 21ba 	movw	r1, #698	; 0x2ba
    b856:	206c      	movs	r0, #108	; 0x6c
    b858:	f000 fe20 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b85c:	200002f8 	.word	0x200002f8
    b860:	200002fa 	.word	0x200002fa
    b864:	4001f508 	.word	0x4001f508
    b868:	4000b000 	.word	0x4000b000
    b86c:	4000b504 	.word	0x4000b504
    b870:	4001f504 	.word	0x4001f504

0000b874 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b874:	4801      	ldr	r0, [pc, #4]	; (b87c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b876:	6880      	ldr	r0, [r0, #8]
    b878:	4770      	bx	lr
    b87a:	0000      	.short	0x0000
    b87c:	200002f8 	.word	0x200002f8

0000b880 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b884:	4836      	ldr	r0, [pc, #216]	; (b960 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b886:	4a35      	ldr	r2, [pc, #212]	; (b95c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b888:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b88c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b964 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b890:	1d03      	adds	r3, r0, #4
    b892:	2100      	movs	r1, #0
    b894:	f89c 4000 	ldrb.w	r4, [ip]
    b898:	b184      	cbz	r4, b8bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b89a:	4a33      	ldr	r2, [pc, #204]	; (b968 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b89c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b8a0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b8a4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b8a8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b8ac:	2301      	movs	r3, #1
    b8ae:	2a00      	cmp	r2, #0
    b8b0:	bf04      	itt	eq
    b8b2:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b8b6:	2800      	cmpeq	r0, #0
    b8b8:	d111      	bne.n	b8de <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b8ba:	e00a      	b.n	b8d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b8bc:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b8c0:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b8c4:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b8c8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b8cc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b8d0:	e7ea      	b.n	b8a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b8d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b8d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b8da:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b8de:	2c02      	cmp	r4, #2
    b8e0:	d004      	beq.n	b8ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b8e2:	f240 21c6 	movw	r1, #710	; 0x2c6
    b8e6:	206c      	movs	r0, #108	; 0x6c
    b8e8:	f000 fdd8 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8ec:	4e1f      	ldr	r6, [pc, #124]	; (b96c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b8ee:	6830      	ldr	r0, [r6, #0]
    b8f0:	4c1f      	ldr	r4, [pc, #124]	; (b970 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b8f2:	1cc0      	adds	r0, r0, #3
    b8f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b8f8:	68a2      	ldr	r2, [r4, #8]
    b8fa:	4d1e      	ldr	r5, [pc, #120]	; (b974 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b8fc:	4290      	cmp	r0, r2
    b8fe:	d00b      	beq.n	b918 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b900:	6837      	ldr	r7, [r6, #0]
    b902:	1bd7      	subs	r7, r2, r7
    b904:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b908:	2f04      	cmp	r7, #4
    b90a:	d305      	bcc.n	b918 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b90c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b910:	d802      	bhi.n	b918 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b912:	f7ff fe99 	bl	b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b916:	e01b      	b.n	b950 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b918:	6830      	ldr	r0, [r6, #0]
    b91a:	1a10      	subs	r0, r2, r0
    b91c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b920:	2802      	cmp	r0, #2
    b922:	d313      	bcc.n	b94c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b924:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b928:	d810      	bhi.n	b94c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b92a:	4a13      	ldr	r2, [pc, #76]	; (b978 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b92c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b930:	6010      	str	r0, [r2, #0]
    b932:	6063      	str	r3, [r4, #4]
    b934:	7021      	strb	r1, [r4, #0]
    b936:	606b      	str	r3, [r5, #4]
    b938:	60eb      	str	r3, [r5, #12]
    b93a:	0040      	lsls	r0, r0, #1
    b93c:	1f11      	subs	r1, r2, #4
    b93e:	6008      	str	r0, [r1, #0]
    b940:	2004      	movs	r0, #4
    b942:	f88c 0001 	strb.w	r0, [ip, #1]
    b946:	f88c 3000 	strb.w	r3, [ip]
    b94a:	e001      	b.n	b950 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b94c:	6063      	str	r3, [r4, #4]
    b94e:	7021      	strb	r1, [r4, #0]
    b950:	6860      	ldr	r0, [r4, #4]
    b952:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b95a:	0000      	.short	0x0000
    b95c:	fffbfffd 	.word	0xfffbfffd
    b960:	4000b000 	.word	0x4000b000
    b964:	200002fa 	.word	0x200002fa
    b968:	fffafffd 	.word	0xfffafffd
    b96c:	4000b504 	.word	0x4000b504
    b970:	200002f8 	.word	0x200002f8
    b974:	40008000 	.word	0x40008000
    b978:	4001f508 	.word	0x4001f508

0000b97c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b980:	4a54      	ldr	r2, [pc, #336]	; (bad4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    b982:	2500      	movs	r5, #0
    b984:	2401      	movs	r4, #1
    b986:	f892 c000 	ldrb.w	ip, [r2]
    b98a:	7853      	ldrb	r3, [r2, #1]
    b98c:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b990:	2807      	cmp	r0, #7
    b992:	d27d      	bcs.n	ba90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b994:	e8df f000 	tbb	[pc, r0]
    b998:	04040404 	.word	0x04040404
    b99c:	00585858 	.word	0x00585858
    b9a0:	4a4d      	ldr	r2, [pc, #308]	; (bad8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    b9a2:	6897      	ldr	r7, [r2, #8]
    b9a4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    b9a8:	bf04      	itt	eq
    b9aa:	7852      	ldrbeq	r2, [r2, #1]
    b9ac:	2a00      	cmpeq	r2, #0
    b9ae:	d003      	beq.n	b9b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    b9b0:	f1bc 0f02 	cmp.w	ip, #2
    b9b4:	d005      	beq.n	b9c2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    b9b6:	e026      	b.n	ba06 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    b9b8:	f240 3156 	movw	r1, #854	; 0x356
    b9bc:	206c      	movs	r0, #108	; 0x6c
    b9be:	f000 fd6d 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9c2:	1f1a      	subs	r2, r3, #4
    b9c4:	b2d2      	uxtb	r2, r2
    b9c6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b9ca:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b9ce:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b9d2:	2200      	movs	r2, #0
    b9d4:	f1bc 0f01 	cmp.w	ip, #1
    b9d8:	d003      	beq.n	b9e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b9da:	f1bc 0f02 	cmp.w	ip, #2
    b9de:	d008      	beq.n	b9f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b9e0:	e00e      	b.n	ba00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b9e2:	2b04      	cmp	r3, #4
    b9e4:	bf24      	itt	cs
    b9e6:	6837      	ldrcs	r7, [r6, #0]
    b9e8:	2f00      	cmpcs	r7, #0
    b9ea:	bf08      	it	eq
    b9ec:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b9f0:	e006      	b.n	ba00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b9f2:	2b04      	cmp	r3, #4
    b9f4:	bf24      	itt	cs
    b9f6:	6837      	ldrcs	r7, [r6, #0]
    b9f8:	2f00      	cmpcs	r7, #0
    b9fa:	bf08      	it	eq
    b9fc:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    ba00:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    ba04:	d1e5      	bne.n	b9d2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    ba06:	f8df c0d4 	ldr.w	ip, [pc, #212]	; badc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    ba0a:	f100 0210 	add.w	r2, r0, #16
    ba0e:	fa04 f202 	lsl.w	r2, r4, r2
    ba12:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    ba16:	f04f 0340 	mov.w	r3, #64	; 0x40
    ba1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ba1e:	b2db      	uxtb	r3, r3
    ba20:	4463      	add	r3, ip
    ba22:	601c      	str	r4, [r3, #0]
    ba24:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    ba28:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    ba2c:	eba1 0303 	sub.w	r3, r1, r3
    ba30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ba34:	2b03      	cmp	r3, #3
    ba36:	bf26      	itte	cs
    ba38:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    ba3c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    ba40:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    ba44:	d237      	bcs.n	bab6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    ba46:	e03c      	b.n	bac2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    ba48:	f1bc 0f00 	cmp.w	ip, #0
    ba4c:	d006      	beq.n	ba5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    ba4e:	4283      	cmp	r3, r0
    ba50:	d104      	bne.n	ba5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    ba52:	f240 3176 	movw	r1, #886	; 0x376
    ba56:	206c      	movs	r0, #108	; 0x6c
    ba58:	f000 fd20 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba5c:	1f02      	subs	r2, r0, #4
    ba5e:	b2d3      	uxtb	r3, r2
    ba60:	2b03      	cmp	r3, #3
    ba62:	d304      	bcc.n	ba6e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    ba64:	f240 11d1 	movw	r1, #465	; 0x1d1
    ba68:	206c      	movs	r0, #108	; 0x6c
    ba6a:	f000 fd17 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba6e:	f8df c070 	ldr.w	ip, [pc, #112]	; bae0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    ba72:	f103 0210 	add.w	r2, r3, #16
    ba76:	fa04 f202 	lsl.w	r2, r4, r2
    ba7a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    ba7e:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    ba82:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    ba86:	f84c 5003 	str.w	r5, [ip, r3]
    ba8a:	4b16      	ldr	r3, [pc, #88]	; (bae4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    ba8c:	681b      	ldr	r3, [r3, #0]
    ba8e:	e000      	b.n	ba92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    ba90:	e01a      	b.n	bac8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    ba92:	1f00      	subs	r0, r0, #4
    ba94:	1acb      	subs	r3, r1, r3
    ba96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ba9a:	b2c0      	uxtb	r0, r0
    ba9c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    baa0:	2b02      	cmp	r3, #2
    baa2:	d30b      	bcc.n	babc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    baa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    baa8:	d808      	bhi.n	babc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    baaa:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    baae:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    bab2:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    bab6:	2001      	movs	r0, #1
    bab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    babc:	2100      	movs	r1, #0
    babe:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bac2:	2000      	movs	r0, #0
    bac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bac8:	f240 317a 	movw	r1, #890	; 0x37a
    bacc:	206c      	movs	r0, #108	; 0x6c
    bace:	f000 fce5 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bad2:	0000      	.short	0x0000
    bad4:	200002fa 	.word	0x200002fa
    bad8:	200002f8 	.word	0x200002f8
    badc:	40008000 	.word	0x40008000
    bae0:	4000b000 	.word	0x4000b000
    bae4:	4000b504 	.word	0x4000b504

0000bae8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    baec:	2601      	movs	r6, #1
    baee:	2700      	movs	r7, #0
    baf0:	f44f 78a0 	mov.w	r8, #320	; 0x140
    baf4:	2807      	cmp	r0, #7
    baf6:	d251      	bcs.n	bb9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    baf8:	e8df f000 	tbb	[pc, r0]
    bafc:	04040404 	.word	0x04040404
    bb00:	00191919 	.word	0x00191919
    bb04:	f100 0110 	add.w	r1, r0, #16
    bb08:	fa06 f201 	lsl.w	r2, r6, r1
    bb0c:	4926      	ldr	r1, [pc, #152]	; (bba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bb0e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bb12:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bb16:	2200      	movs	r2, #0
    bb18:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bb1c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    bb20:	508f      	str	r7, [r1, r2]
    bb22:	4922      	ldr	r1, [pc, #136]	; (bbac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bb24:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bb28:	9000      	str	r0, [sp, #0]
    bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bb2e:	4d20      	ldr	r5, [pc, #128]	; (bbb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bb30:	1f01      	subs	r1, r0, #4
    bb32:	b2cc      	uxtb	r4, r1
    bb34:	7829      	ldrb	r1, [r5, #0]
    bb36:	b179      	cbz	r1, bb58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bb38:	786a      	ldrb	r2, [r5, #1]
    bb3a:	4282      	cmp	r2, r0
    bb3c:	d10c      	bne.n	bb58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bb3e:	4a1d      	ldr	r2, [pc, #116]	; (bbb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bb40:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bb44:	6010      	str	r0, [r2, #0]
    bb46:	2901      	cmp	r1, #1
    bb48:	bf08      	it	eq
    bb4a:	f7ff fd25 	bleq	b598 <MPSL_IRQ_TIMER0_Handler+0x100>
    bb4e:	702f      	strb	r7, [r5, #0]
    bb50:	4919      	ldr	r1, [pc, #100]	; (bbb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    bb52:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    bb56:	6088      	str	r0, [r1, #8]
    bb58:	4918      	ldr	r1, [pc, #96]	; (bbbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    bb5a:	f104 0010 	add.w	r0, r4, #16
    bb5e:	fa06 f000 	lsl.w	r0, r6, r0
    bb62:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bb66:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bb6a:	00a0      	lsls	r0, r4, #2
    bb6c:	4408      	add	r0, r1
    bb6e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bb72:	4a13      	ldr	r2, [pc, #76]	; (bbc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    bb74:	6812      	ldr	r2, [r2, #0]
    bb76:	1a80      	subs	r0, r0, r2
    bb78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb7c:	2802      	cmp	r0, #2
    bb7e:	d307      	bcc.n	bb90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    bb80:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    bb84:	2000      	movs	r0, #0
    bb86:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bb8a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    bb8e:	500f      	str	r7, [r1, r0]
    bb90:	480c      	ldr	r0, [pc, #48]	; (bbc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    bb92:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bb96:	9000      	str	r0, [sp, #0]
    bb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bb9c:	f240 31fe 	movw	r1, #1022	; 0x3fe
    bba0:	206c      	movs	r0, #108	; 0x6c
    bba2:	f000 fc7b 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bba6:	0000      	.short	0x0000
    bba8:	40008000 	.word	0x40008000
    bbac:	40008140 	.word	0x40008140
    bbb0:	200002fa 	.word	0x200002fa
    bbb4:	4001f508 	.word	0x4001f508
    bbb8:	200002f8 	.word	0x200002f8
    bbbc:	4000b000 	.word	0x4000b000
    bbc0:	4000b504 	.word	0x4000b504
    bbc4:	4000b140 	.word	0x4000b140

0000bbc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bbc8:	4825      	ldr	r0, [pc, #148]	; (bc60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    bbca:	4a24      	ldr	r2, [pc, #144]	; (bc5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    bbcc:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bbd0:	4924      	ldr	r1, [pc, #144]	; (bc64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    bbd2:	1d03      	adds	r3, r0, #4
    bbd4:	f891 c000 	ldrb.w	ip, [r1]
    bbd8:	2100      	movs	r1, #0
    bbda:	f1bc 0f00 	cmp.w	ip, #0
    bbde:	d010      	beq.n	bc02 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bbe0:	4a21      	ldr	r2, [pc, #132]	; (bc68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    bbe2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bbe6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bbea:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bbee:	bf00      	nop
    bbf0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bbf4:	2a00      	cmp	r2, #0
    bbf6:	bf04      	itt	eq
    bbf8:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bbfc:	2800      	cmpeq	r0, #0
    bbfe:	d111      	bne.n	bc24 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bc00:	e00a      	b.n	bc18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bc02:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc06:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc0a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bc0e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bc12:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc16:	e7eb      	b.n	bbf0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    bc18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bc20:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bc24:	4811      	ldr	r0, [pc, #68]	; (bc6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    bc26:	f04f 32ff 	mov.w	r2, #4294967295
    bc2a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bc2e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc32:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bc36:	f100 0204 	add.w	r2, r0, #4
    bc3a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bc3e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc42:	f102 0204 	add.w	r2, r2, #4
    bc46:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bc4a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bc4e:	f102 0204 	add.w	r2, r2, #4
    bc52:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bc56:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bc5a:	4770      	bx	lr
    bc5c:	fffbfffd 	.word	0xfffbfffd
    bc60:	4000b000 	.word	0x4000b000
    bc64:	200002fa 	.word	0x200002fa
    bc68:	fffafffd 	.word	0xfffafffd
    bc6c:	40008000 	.word	0x40008000

0000bc70 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bc70:	b510      	push	{r4, lr}
    bc72:	2807      	cmp	r0, #7
    bc74:	d20d      	bcs.n	bc92 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bc76:	e8df f000 	tbb	[pc, r0]
    bc7a:	0404      	.short	0x0404
    bc7c:	06060404 	.word	0x06060404
    bc80:	0006      	.short	0x0006
    bc82:	4906      	ldr	r1, [pc, #24]	; (bc9c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bc84:	e002      	b.n	bc8c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bc86:	1f00      	subs	r0, r0, #4
    bc88:	4905      	ldr	r1, [pc, #20]	; (bca0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bc8a:	b2c0      	uxtb	r0, r0
    bc8c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bc90:	bd10      	pop	{r4, pc}
    bc92:	f240 319e 	movw	r1, #926	; 0x39e
    bc96:	206c      	movs	r0, #108	; 0x6c
    bc98:	f000 fc00 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc9c:	40008140 	.word	0x40008140
    bca0:	4000b140 	.word	0x4000b140

0000bca4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bca4:	b570      	push	{r4, r5, r6, lr}
    bca6:	481f      	ldr	r0, [pc, #124]	; (bd24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bca8:	2400      	movs	r4, #0
    bcaa:	2104      	movs	r1, #4
    bcac:	7004      	strb	r4, [r0, #0]
    bcae:	1e80      	subs	r0, r0, #2
    bcb0:	7001      	strb	r1, [r0, #0]
    bcb2:	0589      	lsls	r1, r1, #22
    bcb4:	60c4      	str	r4, [r0, #12]
    bcb6:	6081      	str	r1, [r0, #8]
    bcb8:	f7ff fc6e 	bl	b598 <MPSL_IRQ_TIMER0_Handler+0x100>
    bcbc:	2501      	movs	r5, #1
    bcbe:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bcc2:	02eb      	lsls	r3, r5, #11
    bcc4:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bcc8:	f3bf 8f4f 	dsb	sy
    bccc:	f3bf 8f6f 	isb	sy
    bcd0:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bcd4:	4814      	ldr	r0, [pc, #80]	; (bd28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bcd6:	6045      	str	r5, [r0, #4]
    bcd8:	6085      	str	r5, [r0, #8]
    bcda:	4914      	ldr	r1, [pc, #80]	; (bd2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bcdc:	680a      	ldr	r2, [r1, #0]
    bcde:	2a00      	cmp	r2, #0
    bce0:	d1fc      	bne.n	bcdc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bce2:	1e51      	subs	r1, r2, #1
    bce4:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bce8:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bcec:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bcf0:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bcf4:	490e      	ldr	r1, [pc, #56]	; (bd30 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bcf6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bcfa:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bcfe:	1d09      	adds	r1, r1, #4
    bd00:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bd04:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bd08:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bd0c:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bd10:	6005      	str	r5, [r0, #0]
    bd12:	f44f 7182 	mov.w	r1, #260	; 0x104
    bd16:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bd1a:	2102      	movs	r1, #2
    bd1c:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bd20:	bd70      	pop	{r4, r5, r6, pc}
    bd22:	0000      	.short	0x0000
    bd24:	200002fa 	.word	0x200002fa
    bd28:	4000b000 	.word	0x4000b000
    bd2c:	4000b504 	.word	0x4000b504
    bd30:	4000b004 	.word	0x4000b004

0000bd34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bd34:	4808      	ldr	r0, [pc, #32]	; (bd58 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bd36:	f990 0000 	ldrsb.w	r0, [r0]
    bd3a:	2800      	cmp	r0, #0
    bd3c:	bfb8      	it	lt
    bd3e:	4770      	bxlt	lr
    bd40:	f000 011f 	and.w	r1, r0, #31
    bd44:	2201      	movs	r2, #1
    bd46:	fa02 f101 	lsl.w	r1, r2, r1
    bd4a:	0940      	lsrs	r0, r0, #5
    bd4c:	0080      	lsls	r0, r0, #2
    bd4e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd52:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bd56:	4770      	bx	lr
    bd58:	20000380 	.word	0x20000380

0000bd5c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bd5c:	4803      	ldr	r0, [pc, #12]	; (bd6c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bd5e:	7800      	ldrb	r0, [r0, #0]
    bd60:	2803      	cmp	r0, #3
    bd62:	bf0c      	ite	eq
    bd64:	2001      	moveq	r0, #1
    bd66:	2000      	movne	r0, #0
    bd68:	4770      	bx	lr
    bd6a:	0000      	.short	0x0000
    bd6c:	20000358 	.word	0x20000358

0000bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bd70:	4801      	ldr	r0, [pc, #4]	; (bd78 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bd72:	8840      	ldrh	r0, [r0, #2]
    bd74:	4770      	bx	lr
    bd76:	0000      	.short	0x0000
    bd78:	20000358 	.word	0x20000358

0000bd7c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bd7c:	4803      	ldr	r0, [pc, #12]	; (bd8c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bd7e:	7800      	ldrb	r0, [r0, #0]
    bd80:	2802      	cmp	r0, #2
    bd82:	bf16      	itet	ne
    bd84:	2803      	cmpne	r0, #3
    bd86:	2001      	moveq	r0, #1
    bd88:	2000      	movne	r0, #0
    bd8a:	4770      	bx	lr
    bd8c:	20000358 	.word	0x20000358

0000bd90 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bd90:	4802      	ldr	r0, [pc, #8]	; (bd9c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bd92:	2100      	movs	r1, #0
    bd94:	7001      	strb	r1, [r0, #0]
    bd96:	8041      	strh	r1, [r0, #2]
    bd98:	4770      	bx	lr
    bd9a:	0000      	.short	0x0000
    bd9c:	20000358 	.word	0x20000358

0000bda0 <MPSL_IRQ_CLOCK_Handler>:
    bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bda4:	4c16      	ldr	r4, [pc, #88]	; (be00 <MPSL_IRQ_CLOCK_Handler+0x60>)
    bda6:	7a60      	ldrb	r0, [r4, #9]
    bda8:	2800      	cmp	r0, #0
    bdaa:	d027      	beq.n	bdfc <MPSL_IRQ_CLOCK_Handler+0x5c>
    bdac:	f44f 7180 	mov.w	r1, #256	; 0x100
    bdb0:	058d      	lsls	r5, r1, #22
    bdb2:	4628      	mov	r0, r5
    bdb4:	f004 fea6 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdb8:	4680      	mov	r8, r0
    bdba:	f44f 7182 	mov.w	r1, #260	; 0x104
    bdbe:	4628      	mov	r0, r5
    bdc0:	f004 fea0 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdc4:	2600      	movs	r6, #0
    bdc6:	4607      	mov	r7, r0
    bdc8:	f1b8 0f00 	cmp.w	r8, #0
    bdcc:	d009      	beq.n	bde2 <MPSL_IRQ_CLOCK_Handler+0x42>
    bdce:	2001      	movs	r0, #1
    bdd0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bdd4:	7920      	ldrb	r0, [r4, #4]
    bdd6:	b120      	cbz	r0, bde2 <MPSL_IRQ_CLOCK_Handler+0x42>
    bdd8:	7126      	strb	r6, [r4, #4]
    bdda:	69e0      	ldr	r0, [r4, #28]
    bddc:	b108      	cbz	r0, bde2 <MPSL_IRQ_CLOCK_Handler+0x42>
    bdde:	4780      	blx	r0
    bde0:	61e6      	str	r6, [r4, #28]
    bde2:	b137      	cbz	r7, bdf2 <MPSL_IRQ_CLOCK_Handler+0x52>
    bde4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bde8:	2002      	movs	r0, #2
    bdea:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bdee:	f000 fa75 	bl	c2dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bdf2:	4640      	mov	r0, r8
    bdf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bdf8:	f000 b858 	b.w	beac <MPSL_IRQ_CLOCK_Handler+0x10c>
    bdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be00:	20000308 	.word	0x20000308
    be04:	b510      	push	{r4, lr}
    be06:	f004 ff27 	bl	10c58 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    be0a:	b930      	cbnz	r0, be1a <MPSL_IRQ_CLOCK_Handler+0x7a>
    be0c:	f004 ff45 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be10:	b918      	cbnz	r0, be1a <MPSL_IRQ_CLOCK_Handler+0x7a>
    be12:	f004 ff78 	bl	10d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    be16:	2800      	cmp	r0, #0
    be18:	d002      	beq.n	be20 <MPSL_IRQ_CLOCK_Handler+0x80>
    be1a:	4902      	ldr	r1, [pc, #8]	; (be24 <MPSL_IRQ_CLOCK_Handler+0x84>)
    be1c:	2002      	movs	r0, #2
    be1e:	6008      	str	r0, [r1, #0]
    be20:	bd10      	pop	{r4, pc}
    be22:	0000      	.short	0x0000
    be24:	40000c34 	.word	0x40000c34
    be28:	b570      	push	{r4, r5, r6, lr}
    be2a:	f000 f99b 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    be2e:	f000 fabd 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    be32:	4c09      	ldr	r4, [pc, #36]	; (be58 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    be34:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be38:	b130      	cbz	r0, be48 <MPSL_IRQ_CLOCK_Handler+0xa8>
    be3a:	f7ff ffe3 	bl	be04 <MPSL_IRQ_CLOCK_Handler+0x64>
    be3e:	2001      	movs	r0, #1
    be40:	6128      	str	r0, [r5, #16]
    be42:	2004      	movs	r0, #4
    be44:	72a0      	strb	r0, [r4, #10]
    be46:	e004      	b.n	be52 <MPSL_IRQ_CLOCK_Handler+0xb2>
    be48:	2003      	movs	r0, #3
    be4a:	72a0      	strb	r0, [r4, #10]
    be4c:	2001      	movs	r0, #1
    be4e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    be52:	2000      	movs	r0, #0
    be54:	71e0      	strb	r0, [r4, #7]
    be56:	bd70      	pop	{r4, r5, r6, pc}
    be58:	20000308 	.word	0x20000308
    be5c:	b570      	push	{r4, r5, r6, lr}
    be5e:	4c12      	ldr	r4, [pc, #72]	; (bea8 <MPSL_IRQ_CLOCK_Handler+0x108>)
    be60:	79a0      	ldrb	r0, [r4, #6]
    be62:	b1e0      	cbz	r0, be9e <MPSL_IRQ_CLOCK_Handler+0xfe>
    be64:	79e1      	ldrb	r1, [r4, #7]
    be66:	1e40      	subs	r0, r0, #1
    be68:	4281      	cmp	r1, r0
    be6a:	da18      	bge.n	be9e <MPSL_IRQ_CLOCK_Handler+0xfe>
    be6c:	f000 fa9e 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    be70:	4605      	mov	r5, r0
    be72:	f000 fb87 	bl	c584 <mpsl_temperature_get>
    be76:	79a1      	ldrb	r1, [r4, #6]
    be78:	2901      	cmp	r1, #1
    be7a:	d902      	bls.n	be82 <MPSL_IRQ_CLOCK_Handler+0xe2>
    be7c:	79e1      	ldrb	r1, [r4, #7]
    be7e:	1c49      	adds	r1, r1, #1
    be80:	71e1      	strb	r1, [r4, #7]
    be82:	b10d      	cbz	r5, be88 <MPSL_IRQ_CLOCK_Handler+0xe8>
    be84:	6961      	ldr	r1, [r4, #20]
    be86:	e000      	b.n	be8a <MPSL_IRQ_CLOCK_Handler+0xea>
    be88:	6921      	ldr	r1, [r4, #16]
    be8a:	1a41      	subs	r1, r0, r1
    be8c:	2902      	cmp	r1, #2
    be8e:	da02      	bge.n	be96 <MPSL_IRQ_CLOCK_Handler+0xf6>
    be90:	f111 0f02 	cmn.w	r1, #2
    be94:	dc07      	bgt.n	bea6 <MPSL_IRQ_CLOCK_Handler+0x106>
    be96:	b10d      	cbz	r5, be9c <MPSL_IRQ_CLOCK_Handler+0xfc>
    be98:	6160      	str	r0, [r4, #20]
    be9a:	e000      	b.n	be9e <MPSL_IRQ_CLOCK_Handler+0xfe>
    be9c:	6120      	str	r0, [r4, #16]
    be9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bea2:	f7ff bfc1 	b.w	be28 <MPSL_IRQ_CLOCK_Handler+0x88>
    bea6:	bd70      	pop	{r4, r5, r6, pc}
    bea8:	20000308 	.word	0x20000308
    beac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    beb0:	4606      	mov	r6, r0
    beb2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    beb6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    beba:	4628      	mov	r0, r5
    bebc:	f004 fe22 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bec0:	4680      	mov	r8, r0
    bec2:	f44f 7188 	mov.w	r1, #272	; 0x110
    bec6:	4628      	mov	r0, r5
    bec8:	f004 fe1c 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    becc:	4c27      	ldr	r4, [pc, #156]	; (bf6c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bece:	4682      	mov	sl, r0
    bed0:	7827      	ldrb	r7, [r4, #0]
    bed2:	f104 0008 	add.w	r0, r4, #8
    bed6:	f004 fe89 	bl	10bec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    beda:	b110      	cbz	r0, bee2 <MPSL_IRQ_CLOCK_Handler+0x142>
    bedc:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bee0:	e016      	b.n	bf10 <MPSL_IRQ_CLOCK_Handler+0x170>
    bee2:	f04f 0901 	mov.w	r9, #1
    bee6:	b146      	cbz	r6, befa <MPSL_IRQ_CLOCK_Handler+0x15a>
    bee8:	7aa0      	ldrb	r0, [r4, #10]
    beea:	2803      	cmp	r0, #3
    beec:	d105      	bne.n	befa <MPSL_IRQ_CLOCK_Handler+0x15a>
    beee:	2004      	movs	r0, #4
    bef0:	72a0      	strb	r0, [r4, #10]
    bef2:	f7ff ff87 	bl	be04 <MPSL_IRQ_CLOCK_Handler+0x64>
    bef6:	f8c5 9010 	str.w	r9, [r5, #16]
    befa:	2600      	movs	r6, #0
    befc:	f1b8 0f00 	cmp.w	r8, #0
    bf00:	d018      	beq.n	bf34 <MPSL_IRQ_CLOCK_Handler+0x194>
    bf02:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bf06:	7aa0      	ldrb	r0, [r4, #10]
    bf08:	2804      	cmp	r0, #4
    bf0a:	d004      	beq.n	bf16 <MPSL_IRQ_CLOCK_Handler+0x176>
    bf0c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    bf10:	206d      	movs	r0, #109	; 0x6d
    bf12:	f000 fac3 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf16:	f004 fe9f 	bl	10c58 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bf1a:	b928      	cbnz	r0, bf28 <MPSL_IRQ_CLOCK_Handler+0x188>
    bf1c:	f004 febd 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf20:	b910      	cbnz	r0, bf28 <MPSL_IRQ_CLOCK_Handler+0x188>
    bf22:	f004 fef0 	bl	10d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bf26:	b108      	cbz	r0, bf2c <MPSL_IRQ_CLOCK_Handler+0x18c>
    bf28:	4811      	ldr	r0, [pc, #68]	; (bf70 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    bf2a:	6006      	str	r6, [r0, #0]
    bf2c:	2002      	movs	r0, #2
    bf2e:	72a0      	strb	r0, [r4, #10]
    bf30:	f000 f8fc 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bf34:	f1ba 0f00 	cmp.w	sl, #0
    bf38:	d008      	beq.n	bf4c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    bf3a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bf3e:	7aa0      	ldrb	r0, [r4, #10]
    bf40:	2802      	cmp	r0, #2
    bf42:	d101      	bne.n	bf48 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    bf44:	f7ff ff8a 	bl	be5c <MPSL_IRQ_CLOCK_Handler+0xbc>
    bf48:	f8c5 9014 	str.w	r9, [r5, #20]
    bf4c:	b13f      	cbz	r7, bf5e <MPSL_IRQ_CLOCK_Handler+0x1be>
    bf4e:	7026      	strb	r6, [r4, #0]
    bf50:	7aa0      	ldrb	r0, [r4, #10]
    bf52:	2802      	cmp	r0, #2
    bf54:	d101      	bne.n	bf5a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    bf56:	f7ff ff67 	bl	be28 <MPSL_IRQ_CLOCK_Handler+0x88>
    bf5a:	f000 f8e7 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bf5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf62:	4802      	ldr	r0, [pc, #8]	; (bf6c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bf64:	3008      	adds	r0, #8
    bf66:	f004 be58 	b.w	10c1a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bf6a:	0000      	.short	0x0000
    bf6c:	20000308 	.word	0x20000308
    bf70:	40000c34 	.word	0x40000c34
    bf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf78:	4c49      	ldr	r4, [pc, #292]	; (c0a0 <MPSL_IRQ_CLOCK_Handler+0x300>)
    bf7a:	2700      	movs	r7, #0
    bf7c:	4606      	mov	r6, r0
    bf7e:	61a7      	str	r7, [r4, #24]
    bf80:	7842      	ldrb	r2, [r0, #1]
    bf82:	7881      	ldrb	r1, [r0, #2]
    bf84:	7800      	ldrb	r0, [r0, #0]
    bf86:	72e0      	strb	r0, [r4, #11]
    bf88:	7162      	strb	r2, [r4, #5]
    bf8a:	71a1      	strb	r1, [r4, #6]
    bf8c:	71e7      	strb	r7, [r4, #7]
    bf8e:	f04f 0801 	mov.w	r8, #1
    bf92:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bf96:	2805      	cmp	r0, #5
    bf98:	d225      	bcs.n	bfe6 <MPSL_IRQ_CLOCK_Handler+0x246>
    bf9a:	e8df f000 	tbb	[pc, r0]
    bf9e:	0310      	.short	0x0310
    bfa0:	00222006 	.word	0x00222006
    bfa4:	f8c4 8018 	str.w	r8, [r4, #24]
    bfa8:	e009      	b.n	bfbe <MPSL_IRQ_CLOCK_Handler+0x21e>
    bfaa:	f000 f8db 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bfae:	2101      	movs	r1, #1
    bfb0:	4628      	mov	r0, r5
    bfb2:	f004 fdac 	bl	10b0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bfb6:	2800      	cmp	r0, #0
    bfb8:	d0f9      	beq.n	bfae <MPSL_IRQ_CLOCK_Handler+0x20e>
    bfba:	2002      	movs	r0, #2
    bfbc:	61a0      	str	r0, [r4, #24]
    bfbe:	f004 fdd2 	bl	10b66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    bfc2:	b1c0      	cbz	r0, bff6 <MPSL_IRQ_CLOCK_Handler+0x256>
    bfc4:	f000 fa0c 	bl	c3e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bfc8:	7e21      	ldrb	r1, [r4, #24]
    bfca:	f001 0103 	and.w	r1, r1, #3
    bfce:	4288      	cmp	r0, r1
    bfd0:	d111      	bne.n	bff6 <MPSL_IRQ_CLOCK_Handler+0x256>
    bfd2:	79b0      	ldrb	r0, [r6, #6]
    bfd4:	b160      	cbz	r0, bff0 <MPSL_IRQ_CLOCK_Handler+0x250>
    bfd6:	2002      	movs	r0, #2
    bfd8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bfdc:	e044      	b.n	c068 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bfde:	4831      	ldr	r0, [pc, #196]	; (c0a4 <MPSL_IRQ_CLOCK_Handler+0x304>)
    bfe0:	e7ec      	b.n	bfbc <MPSL_IRQ_CLOCK_Handler+0x21c>
    bfe2:	4831      	ldr	r0, [pc, #196]	; (c0a8 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bfe4:	e7ea      	b.n	bfbc <MPSL_IRQ_CLOCK_Handler+0x21c>
    bfe6:	f240 313d 	movw	r1, #829	; 0x33d
    bfea:	206d      	movs	r0, #109	; 0x6d
    bfec:	f000 fa56 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bff0:	f000 f9ca 	bl	c388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bff4:	e038      	b.n	c068 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bff6:	f8c5 800c 	str.w	r8, [r5, #12]
    bffa:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bffe:	69a0      	ldr	r0, [r4, #24]
    c000:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c004:	f004 fe14 	bl	10c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c008:	b940      	cbnz	r0, c01c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c00a:	f004 fe1b 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c00e:	b928      	cbnz	r0, c01c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c010:	f004 fe2f 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c014:	b910      	cbnz	r0, c01c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c016:	f004 fe40 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c01a:	b138      	cbz	r0, c02c <MPSL_IRQ_CLOCK_Handler+0x28c>
    c01c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c020:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c024:	4921      	ldr	r1, [pc, #132]	; (c0ac <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c026:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c02a:	6008      	str	r0, [r1, #0]
    c02c:	f004 fe00 	bl	10c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c030:	b940      	cbnz	r0, c044 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c032:	f004 fe07 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c036:	b928      	cbnz	r0, c044 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c038:	f004 fe1b 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c03c:	b910      	cbnz	r0, c044 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c03e:	f004 fe2c 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c042:	b118      	cbz	r0, c04c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c044:	4919      	ldr	r1, [pc, #100]	; (c0ac <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c046:	3110      	adds	r1, #16
    c048:	f8c1 8000 	str.w	r8, [r1]
    c04c:	f8c5 8008 	str.w	r8, [r5, #8]
    c050:	2002      	movs	r0, #2
    c052:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c056:	79b0      	ldrb	r0, [r6, #6]
    c058:	b930      	cbnz	r0, c068 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c05a:	f000 f829 	bl	c0b0 <MPSL_IRQ_CLOCK_Handler+0x310>
    c05e:	2002      	movs	r0, #2
    c060:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c064:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c068:	79a0      	ldrb	r0, [r4, #6]
    c06a:	b170      	cbz	r0, c08a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c06c:	7830      	ldrb	r0, [r6, #0]
    c06e:	b960      	cbnz	r0, c08a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c070:	f000 f99c 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c074:	4606      	mov	r6, r0
    c076:	f000 fa85 	bl	c584 <mpsl_temperature_get>
    c07a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c07e:	b116      	cbz	r6, c086 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c080:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c084:	e001      	b.n	c08a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c086:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c08a:	2101      	movs	r1, #1
    c08c:	4628      	mov	r0, r5
    c08e:	f004 fd3e 	bl	10b0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c092:	b108      	cbz	r0, c098 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c094:	f000 f984 	bl	c3a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c098:	72a7      	strb	r7, [r4, #10]
    c09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c09e:	0000      	.short	0x0000
    c0a0:	20000308 	.word	0x20000308
    c0a4:	00020001 	.word	0x00020001
    c0a8:	00030001 	.word	0x00030001
    c0ac:	4000053c 	.word	0x4000053c
    c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0b4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c0b8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c0bc:	f010 0f02 	tst.w	r0, #2
    c0c0:	d011      	beq.n	c0e6 <MPSL_IRQ_CLOCK_Handler+0x346>
    c0c2:	4c16      	ldr	r4, [pc, #88]	; (c11c <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c0c4:	6820      	ldr	r0, [r4, #0]
    c0c6:	43c0      	mvns	r0, r0
    c0c8:	f340 1600 	sbfx	r6, r0, #4, #1
    c0cc:	6820      	ldr	r0, [r4, #0]
    c0ce:	f040 0010 	orr.w	r0, r0, #16
    c0d2:	6020      	str	r0, [r4, #0]
    c0d4:	f44f 7782 	mov.w	r7, #260	; 0x104
    c0d8:	4639      	mov	r1, r7
    c0da:	4628      	mov	r0, r5
    c0dc:	1c76      	adds	r6, r6, #1
    c0de:	f004 fd11 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c0e2:	b128      	cbz	r0, c0f0 <MPSL_IRQ_CLOCK_Handler+0x350>
    c0e4:	e00a      	b.n	c0fc <MPSL_IRQ_CLOCK_Handler+0x35c>
    c0e6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c0ea:	206d      	movs	r0, #109	; 0x6d
    c0ec:	f000 f9d6 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0f0:	f004 fe15 	bl	10d1e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c0f4:	e002      	b.n	c0fc <MPSL_IRQ_CLOCK_Handler+0x35c>
    c0f6:	bf00      	nop
    c0f8:	f004 fe0f 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c0fc:	4639      	mov	r1, r7
    c0fe:	4628      	mov	r0, r5
    c100:	f004 fd00 	bl	10b04 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c104:	2800      	cmp	r0, #0
    c106:	d0f7      	beq.n	c0f8 <MPSL_IRQ_CLOCK_Handler+0x358>
    c108:	f000 f93e 	bl	c388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c10c:	2e00      	cmp	r6, #0
    c10e:	d103      	bne.n	c118 <MPSL_IRQ_CLOCK_Handler+0x378>
    c110:	6820      	ldr	r0, [r4, #0]
    c112:	f020 0010 	bic.w	r0, r0, #16
    c116:	6020      	str	r0, [r4, #0]
    c118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c11c:	e000ed10 	.word	0xe000ed10

0000c120 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c120:	4801      	ldr	r0, [pc, #4]	; (c128 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c122:	89c0      	ldrh	r0, [r0, #14]
    c124:	4770      	bx	lr
    c126:	0000      	.short	0x0000
    c128:	20000308 	.word	0x20000308

0000c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c12c:	b510      	push	{r4, lr}
    c12e:	f3ef 8410 	mrs	r4, PRIMASK
    c132:	b672      	cpsid	i
    c134:	480a      	ldr	r0, [pc, #40]	; (c160 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c136:	7841      	ldrb	r1, [r0, #1]
    c138:	b129      	cbz	r1, c146 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c13a:	7841      	ldrb	r1, [r0, #1]
    c13c:	1e49      	subs	r1, r1, #1
    c13e:	7041      	strb	r1, [r0, #1]
    c140:	7841      	ldrb	r1, [r0, #1]
    c142:	b129      	cbz	r1, c150 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c144:	e008      	b.n	c158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c146:	f240 1119 	movw	r1, #281	; 0x119
    c14a:	206d      	movs	r0, #109	; 0x6d
    c14c:	f000 f9a6 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c150:	7880      	ldrb	r0, [r0, #2]
    c152:	b908      	cbnz	r0, c158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c154:	f000 f938 	bl	c3c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c158:	2c00      	cmp	r4, #0
    c15a:	d100      	bne.n	c15e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c15c:	b662      	cpsie	i
    c15e:	bd10      	pop	{r4, pc}
    c160:	20000308 	.word	0x20000308

0000c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c164:	b510      	push	{r4, lr}
    c166:	f3ef 8410 	mrs	r4, PRIMASK
    c16a:	b672      	cpsid	i
    c16c:	4806      	ldr	r0, [pc, #24]	; (c188 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c16e:	7841      	ldrb	r1, [r0, #1]
    c170:	1c49      	adds	r1, r1, #1
    c172:	7041      	strb	r1, [r0, #1]
    c174:	7840      	ldrb	r0, [r0, #1]
    c176:	2801      	cmp	r0, #1
    c178:	d101      	bne.n	c17e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c17a:	f004 fcdf 	bl	10b3c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c17e:	2c00      	cmp	r4, #0
    c180:	d100      	bne.n	c184 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c182:	b662      	cpsie	i
    c184:	bd10      	pop	{r4, pc}
    c186:	0000      	.short	0x0000
    c188:	20000308 	.word	0x20000308

0000c18c <mpsl_clock_hfclk_release>:
    c18c:	4805      	ldr	r0, [pc, #20]	; (c1a4 <mpsl_clock_hfclk_release+0x18>)
    c18e:	b510      	push	{r4, lr}
    c190:	78c1      	ldrb	r1, [r0, #3]
    c192:	b121      	cbz	r1, c19e <mpsl_clock_hfclk_release+0x12>
    c194:	2100      	movs	r1, #0
    c196:	7101      	strb	r1, [r0, #4]
    c198:	70c1      	strb	r1, [r0, #3]
    c19a:	f7ff ffc7 	bl	c12c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c19e:	2000      	movs	r0, #0
    c1a0:	bd10      	pop	{r4, pc}
    c1a2:	0000      	.short	0x0000
    c1a4:	20000308 	.word	0x20000308

0000c1a8 <mpsl_clock_hfclk_request>:
    c1a8:	b570      	push	{r4, r5, r6, lr}
    c1aa:	4c0c      	ldr	r4, [pc, #48]	; (c1dc <mpsl_clock_hfclk_request+0x34>)
    c1ac:	78e1      	ldrb	r1, [r4, #3]
    c1ae:	b961      	cbnz	r1, c1ca <mpsl_clock_hfclk_request+0x22>
    c1b0:	2501      	movs	r5, #1
    c1b2:	70e5      	strb	r5, [r4, #3]
    c1b4:	61e0      	str	r0, [r4, #28]
    c1b6:	f7ff ffd5 	bl	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c1ba:	f000 f8f7 	bl	c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c1be:	b130      	cbz	r0, c1ce <mpsl_clock_hfclk_request+0x26>
    c1c0:	69e0      	ldr	r0, [r4, #28]
    c1c2:	b110      	cbz	r0, c1ca <mpsl_clock_hfclk_request+0x22>
    c1c4:	4780      	blx	r0
    c1c6:	2000      	movs	r0, #0
    c1c8:	61e0      	str	r0, [r4, #28]
    c1ca:	2000      	movs	r0, #0
    c1cc:	bd70      	pop	{r4, r5, r6, pc}
    c1ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c1d2:	7125      	strb	r5, [r4, #4]
    c1d4:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c1d8:	e7f7      	b.n	c1ca <mpsl_clock_hfclk_request+0x22>
    c1da:	0000      	.short	0x0000
    c1dc:	20000308 	.word	0x20000308

0000c1e0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1e4:	0005      	movs	r5, r0
    c1e6:	f06f 0015 	mvn.w	r0, #21
    c1ea:	d03f      	beq.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1ec:	7829      	ldrb	r1, [r5, #0]
    c1ee:	2904      	cmp	r1, #4
    c1f0:	d83c      	bhi.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1f2:	2900      	cmp	r1, #0
    c1f4:	7869      	ldrb	r1, [r5, #1]
    c1f6:	d03b      	beq.n	c270 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c1f8:	2900      	cmp	r1, #0
    c1fa:	d137      	bne.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1fc:	78a9      	ldrb	r1, [r5, #2]
    c1fe:	2900      	cmp	r1, #0
    c200:	d134      	bne.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c202:	2000      	movs	r0, #0
    c204:	f004 fc6d 	bl	10ae2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c208:	2000      	movs	r0, #0
    c20a:	f004 fc5d 	bl	10ac8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c20e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c212:	f04f 31ff 	mov.w	r1, #4294967295
    c216:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c21a:	2600      	movs	r6, #0
    c21c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c220:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c224:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c228:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c22c:	4c14      	ldr	r4, [pc, #80]	; (c280 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c22e:	7066      	strb	r6, [r4, #1]
    c230:	88a8      	ldrh	r0, [r5, #4]
    c232:	81a0      	strh	r0, [r4, #12]
    c234:	f004 fc79 	bl	10b2a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c238:	2701      	movs	r7, #1
    c23a:	b108      	cbz	r0, c240 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c23c:	70e7      	strb	r7, [r4, #3]
    c23e:	7067      	strb	r7, [r4, #1]
    c240:	2101      	movs	r1, #1
    c242:	4640      	mov	r0, r8
    c244:	f004 fc63 	bl	10b0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c248:	b108      	cbz	r0, c24e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c24a:	f000 f8a9 	bl	c3a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c24e:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c252:	81e0      	strh	r0, [r4, #14]
    c254:	4628      	mov	r0, r5
    c256:	f7ff fe8d 	bl	bf74 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c25a:	7267      	strb	r7, [r4, #9]
    c25c:	2000      	movs	r0, #0
    c25e:	f004 fc33 	bl	10ac8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c262:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c266:	4630      	mov	r0, r6
    c268:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c270:	2900      	cmp	r1, #0
    c272:	d0fb      	beq.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c274:	2920      	cmp	r1, #32
    c276:	d8f9      	bhi.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c278:	78a9      	ldrb	r1, [r5, #2]
    c27a:	2921      	cmp	r1, #33	; 0x21
    c27c:	d9c1      	bls.n	c202 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c27e:	e7f5      	b.n	c26c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c280:	20000308 	.word	0x20000308

0000c284 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c284:	4801      	ldr	r0, [pc, #4]	; (c28c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c286:	8980      	ldrh	r0, [r0, #12]
    c288:	4770      	bx	lr
    c28a:	0000      	.short	0x0000
    c28c:	20000308 	.word	0x20000308

0000c290 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    c290:	b510      	push	{r4, lr}
    c292:	480d      	ldr	r0, [pc, #52]	; (c2c8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c294:	f004 fcaa 	bl	10bec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c298:	490b      	ldr	r1, [pc, #44]	; (c2c8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c29a:	3908      	subs	r1, #8
    c29c:	b148      	cbz	r0, c2b2 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    c29e:	2001      	movs	r0, #1
    c2a0:	7008      	strb	r0, [r1, #0]
    c2a2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c2a6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2ae:	f7ff bf59 	b.w	c164 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c2b2:	7a88      	ldrb	r0, [r1, #10]
    c2b4:	2802      	cmp	r0, #2
    c2b6:	d101      	bne.n	c2bc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    c2b8:	f7ff fdb6 	bl	be28 <MPSL_IRQ_CLOCK_Handler+0x88>
    c2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2c0:	4801      	ldr	r0, [pc, #4]	; (c2c8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c2c2:	f004 bcaa 	b.w	10c1a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c2c6:	0000      	.short	0x0000
    c2c8:	20000310 	.word	0x20000310

0000c2cc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c2cc:	4802      	ldr	r0, [pc, #8]	; (c2d8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c2ce:	7a80      	ldrb	r0, [r0, #10]
    c2d0:	2800      	cmp	r0, #0
    c2d2:	d000      	beq.n	c2d6 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c2d4:	2001      	movs	r0, #1
    c2d6:	4770      	bx	lr
    c2d8:	20000308 	.word	0x20000308

0000c2dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2de:	4d1f      	ldr	r5, [pc, #124]	; (c35c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c2e0:	7ae8      	ldrb	r0, [r5, #11]
    c2e2:	2800      	cmp	r0, #0
    c2e4:	d10f      	bne.n	c306 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2e6:	7e28      	ldrb	r0, [r5, #24]
    c2e8:	f000 0003 	and.w	r0, r0, #3
    c2ec:	f004 fc2b 	bl	10b46 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c2f0:	2800      	cmp	r0, #0
    c2f2:	d008      	beq.n	c306 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2f4:	f3ef 8110 	mrs	r1, PRIMASK
    c2f8:	b672      	cpsid	i
    c2fa:	f7ff ffe7 	bl	c2cc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c2fe:	b118      	cbz	r0, c308 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c300:	2900      	cmp	r1, #0
    c302:	d100      	bne.n	c306 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c304:	b662      	cpsie	i
    c306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c308:	2601      	movs	r6, #1
    c30a:	72ae      	strb	r6, [r5, #10]
    c30c:	b901      	cbnz	r1, c310 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c30e:	b662      	cpsie	i
    c310:	2018      	movs	r0, #24
    c312:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c316:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c31a:	61a6      	str	r6, [r4, #24]
    c31c:	f44f 7020 	mov.w	r0, #640	; 0x280
    c320:	f8ad 0000 	strh.w	r0, [sp]
    c324:	f8bd 0000 	ldrh.w	r0, [sp]
    c328:	1e41      	subs	r1, r0, #1
    c32a:	f8ad 1000 	strh.w	r1, [sp]
    c32e:	d2f9      	bcs.n	c324 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c330:	2700      	movs	r7, #0
    c332:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c336:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c33a:	4808      	ldr	r0, [pc, #32]	; (c35c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c33c:	3008      	adds	r0, #8
    c33e:	f004 fc68 	bl	10c12 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c342:	702f      	strb	r7, [r5, #0]
    c344:	f7ff fd70 	bl	be28 <MPSL_IRQ_CLOCK_Handler+0x88>
    c348:	6166      	str	r6, [r4, #20]
    c34a:	7968      	ldrb	r0, [r5, #5]
    c34c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c350:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c354:	2018      	movs	r0, #24
    c356:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c35c:	20000308 	.word	0x20000308

0000c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c360:	4602      	mov	r2, r0
    c362:	b510      	push	{r4, lr}
    c364:	2000      	movs	r0, #0
    c366:	2900      	cmp	r1, #0
    c368:	d00a      	beq.n	c380 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c36a:	2a00      	cmp	r2, #0
    c36c:	d008      	beq.n	c380 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c36e:	fba2 0101 	umull	r0, r1, r2, r1
    c372:	1e40      	subs	r0, r0, #1
    c374:	4a03      	ldr	r2, [pc, #12]	; (c384 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c376:	f141 31ff 	adc.w	r1, r1, #4294967295
    c37a:	f004 fcd2 	bl	10d22 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c37e:	1c40      	adds	r0, r0, #1
    c380:	bd10      	pop	{r4, pc}
    c382:	0000      	.short	0x0000
    c384:	000f4240 	.word	0x000f4240

0000c388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c388:	b510      	push	{r4, lr}
    c38a:	4c04      	ldr	r4, [pc, #16]	; (c39c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c38c:	7e20      	ldrb	r0, [r4, #24]
    c38e:	f000 0003 	and.w	r0, r0, #3
    c392:	f004 fbd8 	bl	10b46 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c396:	2800      	cmp	r0, #0
    c398:	d0f8      	beq.n	c38c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c39a:	bd10      	pop	{r4, pc}
    c39c:	20000308 	.word	0x20000308

0000c3a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c3a0:	4901      	ldr	r1, [pc, #4]	; (c3a8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c3a2:	2001      	movs	r0, #1
    c3a4:	7008      	strb	r0, [r1, #0]
    c3a6:	4770      	bx	lr
    c3a8:	20000381 	.word	0x20000381

0000c3ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c3ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3b0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c3b4:	b918      	cbnz	r0, c3be <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c3b6:	4803      	ldr	r0, [pc, #12]	; (c3c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c3b8:	7800      	ldrb	r0, [r0, #0]
    c3ba:	2800      	cmp	r0, #0
    c3bc:	d000      	beq.n	c3c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c3be:	2001      	movs	r0, #1
    c3c0:	4770      	bx	lr
    c3c2:	0000      	.short	0x0000
    c3c4:	20000381 	.word	0x20000381

0000c3c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c3c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3cc:	2101      	movs	r1, #1
    c3ce:	6041      	str	r1, [r0, #4]
    c3d0:	2100      	movs	r1, #0
    c3d2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c3d6:	4801      	ldr	r0, [pc, #4]	; (c3dc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c3d8:	7001      	strb	r1, [r0, #0]
    c3da:	4770      	bx	lr
    c3dc:	20000381 	.word	0x20000381

0000c3e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c3e0:	4802      	ldr	r0, [pc, #8]	; (c3ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c3e2:	6800      	ldr	r0, [r0, #0]
    c3e4:	f000 0003 	and.w	r0, r0, #3
    c3e8:	4770      	bx	lr
    c3ea:	0000      	.short	0x0000
    c3ec:	4000041c 	.word	0x4000041c
    c3f0:	b510      	push	{r4, lr}
    c3f2:	b131      	cbz	r1, c402 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c3f4:	2901      	cmp	r1, #1
    c3f6:	d007      	beq.n	c408 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c3f8:	f240 3102 	movw	r1, #770	; 0x302
    c3fc:	a005      	add	r0, pc, #20	; (adr r0, c414 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c3fe:	f000 f821 	bl	c444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c402:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c406:	e001      	b.n	c40c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c408:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c40c:	f000 0001 	and.w	r0, r0, #1
    c410:	bd10      	pop	{r4, pc}
    c412:	0000      	.short	0x0000
    c414:	5f66726e 	.word	0x5f66726e
    c418:	636f6c63 	.word	0x636f6c63
    c41c:	00682e6b 	.word	0x00682e6b
    c420:	f3bf 8f4f 	dsb	sy
    c424:	4805      	ldr	r0, [pc, #20]	; (c43c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c426:	6801      	ldr	r1, [r0, #0]
    c428:	4a05      	ldr	r2, [pc, #20]	; (c440 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c42a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c42e:	4311      	orrs	r1, r2
    c430:	6001      	str	r1, [r0, #0]
    c432:	f3bf 8f4f 	dsb	sy
    c436:	bf00      	nop
    c438:	e7fd      	b.n	c436 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c43a:	0000      	.short	0x0000
    c43c:	e000ed0c 	.word	0xe000ed0c
    c440:	05fa0004 	.word	0x05fa0004

0000c444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c444:	b672      	cpsid	i
    c446:	4a03      	ldr	r2, [pc, #12]	; (c454 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c448:	6852      	ldr	r2, [r2, #4]
    c44a:	b102      	cbz	r2, c44e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c44c:	4790      	blx	r2
    c44e:	f7ff ffe7 	bl	c420 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c452:	0000      	.short	0x0000
    c454:	20000328 	.word	0x20000328
    c458:	4806      	ldr	r0, [pc, #24]	; (c474 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c45a:	b510      	push	{r4, lr}
    c45c:	2100      	movs	r1, #0
    c45e:	6001      	str	r1, [r0, #0]
    c460:	2101      	movs	r1, #1
    c462:	6001      	str	r1, [r0, #0]
    c464:	4608      	mov	r0, r1
    c466:	f004 fb95 	bl	10b94 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c46e:	2001      	movs	r0, #1
    c470:	f004 bb83 	b.w	10b7a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c474:	40001ffc 	.word	0x40001ffc
    c478:	4807      	ldr	r0, [pc, #28]	; (c498 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c47a:	b510      	push	{r4, lr}
    c47c:	2101      	movs	r1, #1
    c47e:	6041      	str	r1, [r0, #4]
    c480:	1e89      	subs	r1, r1, #2
    c482:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c486:	200c      	movs	r0, #12
    c488:	f004 fb84 	bl	10b94 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c490:	200c      	movs	r0, #12
    c492:	f004 bb72 	b.w	10b7a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c496:	0000      	.short	0x0000
    c498:	4000c000 	.word	0x4000c000

0000c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c49c:	b50e      	push	{r1, r2, r3, lr}
    c49e:	b672      	cpsid	i
    c4a0:	4a0f      	ldr	r2, [pc, #60]	; (c4e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c4a2:	6855      	ldr	r5, [r2, #4]
    c4a4:	b1d5      	cbz	r5, c4dc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c4a6:	2200      	movs	r2, #0
    c4a8:	4603      	mov	r3, r0
    c4aa:	466e      	mov	r6, sp
    c4ac:	240a      	movs	r4, #10
    c4ae:	e003      	b.n	c4b8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c4b0:	fbb0 f0f4 	udiv	r0, r0, r4
    c4b4:	1c52      	adds	r2, r2, #1
    c4b6:	b2d2      	uxtb	r2, r2
    c4b8:	2800      	cmp	r0, #0
    c4ba:	d1f9      	bne.n	c4b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c4bc:	54b0      	strb	r0, [r6, r2]
    c4be:	e009      	b.n	c4d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c4c0:	fbb3 f0f4 	udiv	r0, r3, r4
    c4c4:	fb04 3010 	mls	r0, r4, r0, r3
    c4c8:	fbb3 f3f4 	udiv	r3, r3, r4
    c4cc:	1e52      	subs	r2, r2, #1
    c4ce:	b2d2      	uxtb	r2, r2
    c4d0:	3030      	adds	r0, #48	; 0x30
    c4d2:	54b0      	strb	r0, [r6, r2]
    c4d4:	2a00      	cmp	r2, #0
    c4d6:	d1f3      	bne.n	c4c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c4d8:	4630      	mov	r0, r6
    c4da:	47a8      	blx	r5
    c4dc:	f7ff ffa0 	bl	c420 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c4e0:	20000328 	.word	0x20000328

0000c4e4 <mpsl_init>:
    c4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4e8:	4c18      	ldr	r4, [pc, #96]	; (c54c <mpsl_init+0x68>)
    c4ea:	4606      	mov	r6, r0
    c4ec:	4617      	mov	r7, r2
    c4ee:	7860      	ldrb	r0, [r4, #1]
    c4f0:	460d      	mov	r5, r1
    c4f2:	b118      	cbz	r0, c4fc <mpsl_init+0x18>
    c4f4:	f04f 30ff 	mov.w	r0, #4294967295
    c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4fc:	f7fc fc06 	bl	8d0c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c500:	b906      	cbnz	r6, c504 <mpsl_init+0x20>
    c502:	4e13      	ldr	r6, [pc, #76]	; (c550 <mpsl_init+0x6c>)
    c504:	6067      	str	r7, [r4, #4]
    c506:	7025      	strb	r5, [r4, #0]
    c508:	f7ff ffa6 	bl	c458 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c50c:	f7ff ffb4 	bl	c478 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c510:	4630      	mov	r0, r6
    c512:	f7ff fe65 	bl	c1e0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c516:	0006      	movs	r6, r0
    c518:	d1ee      	bne.n	c4f8 <mpsl_init+0x14>
    c51a:	f7fe fe45 	bl	b1a8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c51e:	f7ff fedd 	bl	c2dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c522:	f004 faa0 	bl	10a66 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c526:	4628      	mov	r0, r5
    c528:	f004 fb27 	bl	10b7a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c52c:	2001      	movs	r0, #1
    c52e:	2d00      	cmp	r5, #0
    c530:	db09      	blt.n	c546 <mpsl_init+0x62>
    c532:	f005 011f 	and.w	r1, r5, #31
    c536:	fa00 f101 	lsl.w	r1, r0, r1
    c53a:	096a      	lsrs	r2, r5, #5
    c53c:	0092      	lsls	r2, r2, #2
    c53e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c542:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c546:	7060      	strb	r0, [r4, #1]
    c548:	4630      	mov	r0, r6
    c54a:	e7d5      	b.n	c4f8 <mpsl_init+0x14>
    c54c:	20000328 	.word	0x20000328
    c550:	00010bb6 	.word	0x00010bb6

0000c554 <mpsl_is_initialized>:
    c554:	4801      	ldr	r0, [pc, #4]	; (c55c <mpsl_is_initialized+0x8>)
    c556:	7840      	ldrb	r0, [r0, #1]
    c558:	4770      	bx	lr
    c55a:	0000      	.short	0x0000
    c55c:	20000328 	.word	0x20000328

0000c560 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c560:	4807      	ldr	r0, [pc, #28]	; (c580 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c562:	f990 0000 	ldrsb.w	r0, [r0]
    c566:	2800      	cmp	r0, #0
    c568:	db09      	blt.n	c57e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c56a:	f000 021f 	and.w	r2, r0, #31
    c56e:	2101      	movs	r1, #1
    c570:	4091      	lsls	r1, r2
    c572:	0940      	lsrs	r0, r0, #5
    c574:	0080      	lsls	r0, r0, #2
    c576:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c57a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c57e:	4770      	bx	lr
    c580:	20000328 	.word	0x20000328

0000c584 <mpsl_temperature_get>:
    c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c588:	2601      	movs	r6, #1
    c58a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c58e:	0331      	lsls	r1, r6, #12
    c590:	f04f 0800 	mov.w	r8, #0
    c594:	4640      	mov	r0, r8
    c596:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c59a:	f3bf 8f4f 	dsb	sy
    c59e:	f3bf 8f6f 	isb	sy
    c5a2:	4c16      	ldr	r4, [pc, #88]	; (c5fc <mpsl_temperature_get+0x78>)
    c5a4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c5a8:	200c      	movs	r0, #12
    c5aa:	f004 fb12 	bl	10bd2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c5ae:	4d14      	ldr	r5, [pc, #80]	; (c600 <mpsl_temperature_get+0x7c>)
    c5b0:	6828      	ldr	r0, [r5, #0]
    c5b2:	43c0      	mvns	r0, r0
    c5b4:	f340 1700 	sbfx	r7, r0, #4, #1
    c5b8:	6828      	ldr	r0, [r5, #0]
    c5ba:	f040 0010 	orr.w	r0, r0, #16
    c5be:	6028      	str	r0, [r5, #0]
    c5c0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c5c4:	6026      	str	r6, [r4, #0]
    c5c6:	1c7f      	adds	r7, r7, #1
    c5c8:	e002      	b.n	c5d0 <mpsl_temperature_get+0x4c>
    c5ca:	bf00      	nop
    c5cc:	f004 fba5 	bl	10d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c5d0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c5d4:	2800      	cmp	r0, #0
    c5d6:	d0f9      	beq.n	c5cc <mpsl_temperature_get+0x48>
    c5d8:	b91f      	cbnz	r7, c5e2 <mpsl_temperature_get+0x5e>
    c5da:	6828      	ldr	r0, [r5, #0]
    c5dc:	f020 0010 	bic.w	r0, r0, #16
    c5e0:	6028      	str	r0, [r5, #0]
    c5e2:	4808      	ldr	r0, [pc, #32]	; (c604 <mpsl_temperature_get+0x80>)
    c5e4:	6805      	ldr	r5, [r0, #0]
    c5e6:	6066      	str	r6, [r4, #4]
    c5e8:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c5ec:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c5f0:	200c      	movs	r0, #12
    c5f2:	f004 faee 	bl	10bd2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c5f6:	4628      	mov	r0, r5
    c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5fc:	4000c000 	.word	0x4000c000
    c600:	e000ed10 	.word	0xe000ed10
    c604:	4000c508 	.word	0x4000c508

0000c608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c608:	b510      	push	{r4, lr}
    c60a:	4602      	mov	r2, r0
    c60c:	2005      	movs	r0, #5
    c60e:	490c      	ldr	r1, [pc, #48]	; (c640 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c610:	e004      	b.n	c61c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c612:	bf00      	nop
    c614:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c618:	791b      	ldrb	r3, [r3, #4]
    c61a:	b133      	cbz	r3, c62a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c61c:	1e40      	subs	r0, r0, #1
    c61e:	b2c0      	uxtb	r0, r0
    c620:	d2f8      	bcs.n	c614 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c622:	2148      	movs	r1, #72	; 0x48
    c624:	2069      	movs	r0, #105	; 0x69
    c626:	f7ff ff39 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c62a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c62e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c632:	2200      	movs	r2, #0
    c634:	714a      	strb	r2, [r1, #5]
    c636:	718a      	strb	r2, [r1, #6]
    c638:	2201      	movs	r2, #1
    c63a:	710a      	strb	r2, [r1, #4]
    c63c:	bd10      	pop	{r4, pc}
    c63e:	0000      	.short	0x0000
    c640:	20001450 	.word	0x20001450

0000c644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c644:	b510      	push	{r4, lr}
    c646:	2805      	cmp	r0, #5
    c648:	d301      	bcc.n	c64e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c64a:	2158      	movs	r1, #88	; 0x58
    c64c:	e006      	b.n	c65c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c64e:	490a      	ldr	r1, [pc, #40]	; (c678 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c650:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c654:	7901      	ldrb	r1, [r0, #4]
    c656:	2901      	cmp	r1, #1
    c658:	d003      	beq.n	c662 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c65a:	2159      	movs	r1, #89	; 0x59
    c65c:	2069      	movs	r0, #105	; 0x69
    c65e:	f7ff ff1d 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c662:	7941      	ldrb	r1, [r0, #5]
    c664:	7982      	ldrb	r2, [r0, #6]
    c666:	1c49      	adds	r1, r1, #1
    c668:	b2c9      	uxtb	r1, r1
    c66a:	428a      	cmp	r2, r1
    c66c:	d000      	beq.n	c670 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c66e:	7141      	strb	r1, [r0, #5]
    c670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c674:	f7ff bf74 	b.w	c560 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c678:	20001450 	.word	0x20001450

0000c67c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c67c:	b510      	push	{r4, lr}
    c67e:	2805      	cmp	r0, #5
    c680:	d303      	bcc.n	c68a <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c682:	214f      	movs	r1, #79	; 0x4f
    c684:	2069      	movs	r0, #105	; 0x69
    c686:	f7ff ff09 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c68a:	4a03      	ldr	r2, [pc, #12]	; (c698 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c68c:	2100      	movs	r1, #0
    c68e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c692:	7101      	strb	r1, [r0, #4]
    c694:	bd10      	pop	{r4, pc}
    c696:	0000      	.short	0x0000
    c698:	20001450 	.word	0x20001450

0000c69c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c69c:	b570      	push	{r4, r5, r6, lr}
    c69e:	2505      	movs	r5, #5
    c6a0:	4e0e      	ldr	r6, [pc, #56]	; (c6dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c6a2:	4c0f      	ldr	r4, [pc, #60]	; (c6e0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c6a4:	e016      	b.n	c6d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c6a6:	7821      	ldrb	r1, [r4, #0]
    c6a8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c6ac:	7902      	ldrb	r2, [r0, #4]
    c6ae:	2a01      	cmp	r2, #1
    c6b0:	d108      	bne.n	c6c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c6b2:	7942      	ldrb	r2, [r0, #5]
    c6b4:	7983      	ldrb	r3, [r0, #6]
    c6b6:	429a      	cmp	r2, r3
    c6b8:	d004      	beq.n	c6c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c6ba:	7942      	ldrb	r2, [r0, #5]
    c6bc:	7182      	strb	r2, [r0, #6]
    c6be:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c6c2:	4780      	blx	r0
    c6c4:	7820      	ldrb	r0, [r4, #0]
    c6c6:	1c40      	adds	r0, r0, #1
    c6c8:	b2c0      	uxtb	r0, r0
    c6ca:	7020      	strb	r0, [r4, #0]
    c6cc:	2805      	cmp	r0, #5
    c6ce:	d301      	bcc.n	c6d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c6d0:	2000      	movs	r0, #0
    c6d2:	7020      	strb	r0, [r4, #0]
    c6d4:	1e6d      	subs	r5, r5, #1
    c6d6:	b2ed      	uxtb	r5, r5
    c6d8:	d2e5      	bcs.n	c6a6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c6da:	bd70      	pop	{r4, r5, r6, pc}
    c6dc:	20001450 	.word	0x20001450
    c6e0:	20000382 	.word	0x20000382

0000c6e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c6e4:	b500      	push	{lr}
    c6e6:	f004 faa3 	bl	10c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c6ea:	b940      	cbnz	r0, c6fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6ec:	f004 faaa 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c6f0:	b928      	cbnz	r0, c6fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6f2:	f004 fabe 	bl	10c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c6f6:	b910      	cbnz	r0, c6fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6f8:	f004 facf 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c6fc:	b108      	cbz	r0, c702 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c6fe:	4802      	ldr	r0, [pc, #8]	; (c708 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c700:	bd00      	pop	{pc}
    c702:	4802      	ldr	r0, [pc, #8]	; (c70c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c704:	bd00      	pop	{pc}
    c706:	0000      	.short	0x0000
    c708:	4000050c 	.word	0x4000050c
    c70c:	4001e700 	.word	0x4001e700
    c710:	b510      	push	{r4, lr}
    c712:	f004 fac2 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c716:	b330      	cbz	r0, c766 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c718:	f3ef 8010 	mrs	r0, PRIMASK
    c71c:	b1c8      	cbz	r0, c752 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c71e:	2100      	movs	r1, #0
    c720:	b672      	cpsid	i
    c722:	4812      	ldr	r0, [pc, #72]	; (c76c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c724:	6802      	ldr	r2, [r0, #0]
    c726:	6803      	ldr	r3, [r0, #0]
    c728:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c72c:	f043 0310 	orr.w	r3, r3, #16
    c730:	6003      	str	r3, [r0, #0]
    c732:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c736:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c73a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c73e:	431c      	orrs	r4, r3
    c740:	d000      	beq.n	c744 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c742:	bf40      	sev
    c744:	bf20      	wfe
    c746:	bf00      	nop
    c748:	bf00      	nop
    c74a:	bf00      	nop
    c74c:	bf00      	nop
    c74e:	b112      	cbz	r2, c756 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c750:	e005      	b.n	c75e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c752:	2101      	movs	r1, #1
    c754:	e7e4      	b.n	c720 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c756:	6802      	ldr	r2, [r0, #0]
    c758:	f022 0210 	bic.w	r2, r2, #16
    c75c:	6002      	str	r2, [r0, #0]
    c75e:	2900      	cmp	r1, #0
    c760:	d000      	beq.n	c764 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c762:	b662      	cpsie	i
    c764:	bd10      	pop	{r4, pc}
    c766:	bf20      	wfe
    c768:	bd10      	pop	{r4, pc}
    c76a:	0000      	.short	0x0000
    c76c:	e000ed10 	.word	0xe000ed10

0000c770 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c770:	4901      	ldr	r1, [pc, #4]	; (c778 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c772:	2001      	movs	r0, #1
    c774:	7088      	strb	r0, [r1, #2]
    c776:	4770      	bx	lr
    c778:	20000330 	.word	0x20000330

0000c77c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c77c:	00010f7d 00010fb5 00010f9f 00010f8d     }...............
    c78c:	00010f99 00010f87 00010f7b 00010f79     ........{...y...
    c79c:	00010fb1 00010fa5 00010f93 00010f81     ................
    c7ac:	00010f73 00010f6b 00010f6f 00010f65     s...k...o...e...

0000c7bc <mpsl_fem_disable>:
    c7bc:	4801      	ldr	r0, [pc, #4]	; (c7c4 <mpsl_fem_disable+0x8>)
    c7be:	6800      	ldr	r0, [r0, #0]
    c7c0:	6800      	ldr	r0, [r0, #0]
    c7c2:	4700      	bx	r0
    c7c4:	20000344 	.word	0x20000344

0000c7c8 <mpsl_fem_lna_configuration_clear>:
    c7c8:	4801      	ldr	r0, [pc, #4]	; (c7d0 <mpsl_fem_lna_configuration_clear+0x8>)
    c7ca:	6800      	ldr	r0, [r0, #0]
    c7cc:	6940      	ldr	r0, [r0, #20]
    c7ce:	4700      	bx	r0
    c7d0:	20000344 	.word	0x20000344

0000c7d4 <mpsl_fem_lna_configuration_set>:
    c7d4:	4a01      	ldr	r2, [pc, #4]	; (c7dc <mpsl_fem_lna_configuration_set+0x8>)
    c7d6:	6812      	ldr	r2, [r2, #0]
    c7d8:	68d2      	ldr	r2, [r2, #12]
    c7da:	4710      	bx	r2
    c7dc:	20000344 	.word	0x20000344

0000c7e0 <mpsl_fem_lna_is_configured>:
    c7e0:	4901      	ldr	r1, [pc, #4]	; (c7e8 <mpsl_fem_lna_is_configured+0x8>)
    c7e2:	6809      	ldr	r1, [r1, #0]
    c7e4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c7e6:	4708      	bx	r1
    c7e8:	20000344 	.word	0x20000344

0000c7ec <mpsl_fem_pa_configuration_clear>:
    c7ec:	4801      	ldr	r0, [pc, #4]	; (c7f4 <mpsl_fem_pa_configuration_clear+0x8>)
    c7ee:	6800      	ldr	r0, [r0, #0]
    c7f0:	6900      	ldr	r0, [r0, #16]
    c7f2:	4700      	bx	r0
    c7f4:	20000344 	.word	0x20000344

0000c7f8 <mpsl_fem_pa_configuration_set>:
    c7f8:	4a01      	ldr	r2, [pc, #4]	; (c800 <mpsl_fem_pa_configuration_set+0x8>)
    c7fa:	6812      	ldr	r2, [r2, #0]
    c7fc:	6892      	ldr	r2, [r2, #8]
    c7fe:	4710      	bx	r2
    c800:	20000344 	.word	0x20000344

0000c804 <mpsl_fem_pa_gain_set>:
    c804:	4901      	ldr	r1, [pc, #4]	; (c80c <mpsl_fem_pa_gain_set+0x8>)
    c806:	6809      	ldr	r1, [r1, #0]
    c808:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c80a:	4708      	bx	r1
    c80c:	20000344 	.word	0x20000344

0000c810 <mpsl_fem_pa_is_configured>:
    c810:	4901      	ldr	r1, [pc, #4]	; (c818 <mpsl_fem_pa_is_configured+0x8>)
    c812:	6809      	ldr	r1, [r1, #0]
    c814:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c816:	4708      	bx	r1
    c818:	20000344 	.word	0x20000344

0000c81c <mpsl_fem_tx_power_split>:
    c81c:	b430      	push	{r4, r5}
    c81e:	4c03      	ldr	r4, [pc, #12]	; (c82c <mpsl_fem_tx_power_split+0x10>)
    c820:	6824      	ldr	r4, [r4, #0]
    c822:	6864      	ldr	r4, [r4, #4]
    c824:	46a4      	mov	ip, r4
    c826:	bc30      	pop	{r4, r5}
    c828:	4760      	bx	ip
    c82a:	0000      	.short	0x0000
    c82c:	20000344 	.word	0x20000344

0000c830 <mpsl_fem_device_config_254_apply_get>:
    c830:	4801      	ldr	r0, [pc, #4]	; (c838 <mpsl_fem_device_config_254_apply_get+0x8>)
    c832:	7800      	ldrb	r0, [r0, #0]
    c834:	4770      	bx	lr
    c836:	0000      	.short	0x0000
    c838:	20000383 	.word	0x20000383

0000c83c <__udivmoddi4>:
    c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c840:	4686      	mov	lr, r0
    c842:	468c      	mov	ip, r1
    c844:	4608      	mov	r0, r1
    c846:	9e08      	ldr	r6, [sp, #32]
    c848:	4615      	mov	r5, r2
    c84a:	4674      	mov	r4, lr
    c84c:	4619      	mov	r1, r3
    c84e:	2b00      	cmp	r3, #0
    c850:	f040 80c2 	bne.w	c9d8 <__udivmoddi4+0x19c>
    c854:	4285      	cmp	r5, r0
    c856:	fab2 f282 	clz	r2, r2
    c85a:	d945      	bls.n	c8e8 <__udivmoddi4+0xac>
    c85c:	b14a      	cbz	r2, c872 <__udivmoddi4+0x36>
    c85e:	f1c2 0320 	rsb	r3, r2, #32
    c862:	fa00 fc02 	lsl.w	ip, r0, r2
    c866:	fa2e f303 	lsr.w	r3, lr, r3
    c86a:	4095      	lsls	r5, r2
    c86c:	ea43 0c0c 	orr.w	ip, r3, ip
    c870:	4094      	lsls	r4, r2
    c872:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c876:	b2a8      	uxth	r0, r5
    c878:	fbbc f8fe 	udiv	r8, ip, lr
    c87c:	0c23      	lsrs	r3, r4, #16
    c87e:	fb0e cc18 	mls	ip, lr, r8, ip
    c882:	fb08 f900 	mul.w	r9, r8, r0
    c886:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c88a:	4599      	cmp	r9, r3
    c88c:	d928      	bls.n	c8e0 <__udivmoddi4+0xa4>
    c88e:	18eb      	adds	r3, r5, r3
    c890:	f108 37ff 	add.w	r7, r8, #4294967295
    c894:	d204      	bcs.n	c8a0 <__udivmoddi4+0x64>
    c896:	4599      	cmp	r9, r3
    c898:	d902      	bls.n	c8a0 <__udivmoddi4+0x64>
    c89a:	f1a8 0702 	sub.w	r7, r8, #2
    c89e:	442b      	add	r3, r5
    c8a0:	eba3 0309 	sub.w	r3, r3, r9
    c8a4:	b2a4      	uxth	r4, r4
    c8a6:	fbb3 fcfe 	udiv	ip, r3, lr
    c8aa:	fb0e 331c 	mls	r3, lr, ip, r3
    c8ae:	fb0c f000 	mul.w	r0, ip, r0
    c8b2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c8b6:	42a0      	cmp	r0, r4
    c8b8:	d914      	bls.n	c8e4 <__udivmoddi4+0xa8>
    c8ba:	192c      	adds	r4, r5, r4
    c8bc:	f10c 33ff 	add.w	r3, ip, #4294967295
    c8c0:	d204      	bcs.n	c8cc <__udivmoddi4+0x90>
    c8c2:	42a0      	cmp	r0, r4
    c8c4:	d902      	bls.n	c8cc <__udivmoddi4+0x90>
    c8c6:	f1ac 0302 	sub.w	r3, ip, #2
    c8ca:	442c      	add	r4, r5
    c8cc:	1a24      	subs	r4, r4, r0
    c8ce:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c8d2:	b11e      	cbz	r6, c8dc <__udivmoddi4+0xa0>
    c8d4:	40d4      	lsrs	r4, r2
    c8d6:	2300      	movs	r3, #0
    c8d8:	6034      	str	r4, [r6, #0]
    c8da:	6073      	str	r3, [r6, #4]
    c8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c8e0:	4647      	mov	r7, r8
    c8e2:	e7dd      	b.n	c8a0 <__udivmoddi4+0x64>
    c8e4:	4663      	mov	r3, ip
    c8e6:	e7f1      	b.n	c8cc <__udivmoddi4+0x90>
    c8e8:	bb92      	cbnz	r2, c950 <__udivmoddi4+0x114>
    c8ea:	1b43      	subs	r3, r0, r5
    c8ec:	2101      	movs	r1, #1
    c8ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c8f2:	b2af      	uxth	r7, r5
    c8f4:	fbb3 fcfe 	udiv	ip, r3, lr
    c8f8:	0c20      	lsrs	r0, r4, #16
    c8fa:	fb0e 331c 	mls	r3, lr, ip, r3
    c8fe:	fb0c f807 	mul.w	r8, ip, r7
    c902:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c906:	4598      	cmp	r8, r3
    c908:	d962      	bls.n	c9d0 <__udivmoddi4+0x194>
    c90a:	18eb      	adds	r3, r5, r3
    c90c:	f10c 30ff 	add.w	r0, ip, #4294967295
    c910:	d204      	bcs.n	c91c <__udivmoddi4+0xe0>
    c912:	4598      	cmp	r8, r3
    c914:	d902      	bls.n	c91c <__udivmoddi4+0xe0>
    c916:	f1ac 0002 	sub.w	r0, ip, #2
    c91a:	442b      	add	r3, r5
    c91c:	eba3 0308 	sub.w	r3, r3, r8
    c920:	b2a4      	uxth	r4, r4
    c922:	fbb3 fcfe 	udiv	ip, r3, lr
    c926:	fb0e 331c 	mls	r3, lr, ip, r3
    c92a:	fb0c f707 	mul.w	r7, ip, r7
    c92e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c932:	42a7      	cmp	r7, r4
    c934:	d94e      	bls.n	c9d4 <__udivmoddi4+0x198>
    c936:	192c      	adds	r4, r5, r4
    c938:	f10c 33ff 	add.w	r3, ip, #4294967295
    c93c:	d204      	bcs.n	c948 <__udivmoddi4+0x10c>
    c93e:	42a7      	cmp	r7, r4
    c940:	d902      	bls.n	c948 <__udivmoddi4+0x10c>
    c942:	f1ac 0302 	sub.w	r3, ip, #2
    c946:	442c      	add	r4, r5
    c948:	1be4      	subs	r4, r4, r7
    c94a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c94e:	e7c0      	b.n	c8d2 <__udivmoddi4+0x96>
    c950:	f1c2 0320 	rsb	r3, r2, #32
    c954:	fa20 f103 	lsr.w	r1, r0, r3
    c958:	4095      	lsls	r5, r2
    c95a:	4090      	lsls	r0, r2
    c95c:	fa2e f303 	lsr.w	r3, lr, r3
    c960:	4303      	orrs	r3, r0
    c962:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c966:	b2af      	uxth	r7, r5
    c968:	fbb1 fcfe 	udiv	ip, r1, lr
    c96c:	fb0e 101c 	mls	r0, lr, ip, r1
    c970:	0c19      	lsrs	r1, r3, #16
    c972:	fb0c f807 	mul.w	r8, ip, r7
    c976:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c97a:	4588      	cmp	r8, r1
    c97c:	fa04 f402 	lsl.w	r4, r4, r2
    c980:	d922      	bls.n	c9c8 <__udivmoddi4+0x18c>
    c982:	1869      	adds	r1, r5, r1
    c984:	f10c 30ff 	add.w	r0, ip, #4294967295
    c988:	d204      	bcs.n	c994 <__udivmoddi4+0x158>
    c98a:	4588      	cmp	r8, r1
    c98c:	d902      	bls.n	c994 <__udivmoddi4+0x158>
    c98e:	f1ac 0002 	sub.w	r0, ip, #2
    c992:	4429      	add	r1, r5
    c994:	eba1 0108 	sub.w	r1, r1, r8
    c998:	b29b      	uxth	r3, r3
    c99a:	fbb1 fcfe 	udiv	ip, r1, lr
    c99e:	fb0e 111c 	mls	r1, lr, ip, r1
    c9a2:	fb0c f707 	mul.w	r7, ip, r7
    c9a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c9aa:	429f      	cmp	r7, r3
    c9ac:	d90e      	bls.n	c9cc <__udivmoddi4+0x190>
    c9ae:	18eb      	adds	r3, r5, r3
    c9b0:	f10c 31ff 	add.w	r1, ip, #4294967295
    c9b4:	d204      	bcs.n	c9c0 <__udivmoddi4+0x184>
    c9b6:	429f      	cmp	r7, r3
    c9b8:	d902      	bls.n	c9c0 <__udivmoddi4+0x184>
    c9ba:	f1ac 0102 	sub.w	r1, ip, #2
    c9be:	442b      	add	r3, r5
    c9c0:	1bdb      	subs	r3, r3, r7
    c9c2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c9c6:	e792      	b.n	c8ee <__udivmoddi4+0xb2>
    c9c8:	4660      	mov	r0, ip
    c9ca:	e7e3      	b.n	c994 <__udivmoddi4+0x158>
    c9cc:	4661      	mov	r1, ip
    c9ce:	e7f7      	b.n	c9c0 <__udivmoddi4+0x184>
    c9d0:	4660      	mov	r0, ip
    c9d2:	e7a3      	b.n	c91c <__udivmoddi4+0xe0>
    c9d4:	4663      	mov	r3, ip
    c9d6:	e7b7      	b.n	c948 <__udivmoddi4+0x10c>
    c9d8:	4283      	cmp	r3, r0
    c9da:	d906      	bls.n	c9ea <__udivmoddi4+0x1ae>
    c9dc:	b916      	cbnz	r6, c9e4 <__udivmoddi4+0x1a8>
    c9de:	2100      	movs	r1, #0
    c9e0:	4608      	mov	r0, r1
    c9e2:	e77b      	b.n	c8dc <__udivmoddi4+0xa0>
    c9e4:	e9c6 e000 	strd	lr, r0, [r6]
    c9e8:	e7f9      	b.n	c9de <__udivmoddi4+0x1a2>
    c9ea:	fab3 f783 	clz	r7, r3
    c9ee:	b98f      	cbnz	r7, ca14 <__udivmoddi4+0x1d8>
    c9f0:	4283      	cmp	r3, r0
    c9f2:	d301      	bcc.n	c9f8 <__udivmoddi4+0x1bc>
    c9f4:	4572      	cmp	r2, lr
    c9f6:	d808      	bhi.n	ca0a <__udivmoddi4+0x1ce>
    c9f8:	ebbe 0402 	subs.w	r4, lr, r2
    c9fc:	eb60 0303 	sbc.w	r3, r0, r3
    ca00:	2001      	movs	r0, #1
    ca02:	469c      	mov	ip, r3
    ca04:	b91e      	cbnz	r6, ca0e <__udivmoddi4+0x1d2>
    ca06:	2100      	movs	r1, #0
    ca08:	e768      	b.n	c8dc <__udivmoddi4+0xa0>
    ca0a:	4638      	mov	r0, r7
    ca0c:	e7fa      	b.n	ca04 <__udivmoddi4+0x1c8>
    ca0e:	e9c6 4c00 	strd	r4, ip, [r6]
    ca12:	e7f8      	b.n	ca06 <__udivmoddi4+0x1ca>
    ca14:	f1c7 0c20 	rsb	ip, r7, #32
    ca18:	40bb      	lsls	r3, r7
    ca1a:	fa22 f40c 	lsr.w	r4, r2, ip
    ca1e:	431c      	orrs	r4, r3
    ca20:	fa2e f10c 	lsr.w	r1, lr, ip
    ca24:	fa20 f30c 	lsr.w	r3, r0, ip
    ca28:	40b8      	lsls	r0, r7
    ca2a:	4301      	orrs	r1, r0
    ca2c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    ca30:	fa0e f507 	lsl.w	r5, lr, r7
    ca34:	fbb3 f8f9 	udiv	r8, r3, r9
    ca38:	fa1f fe84 	uxth.w	lr, r4
    ca3c:	fb09 3018 	mls	r0, r9, r8, r3
    ca40:	0c0b      	lsrs	r3, r1, #16
    ca42:	fb08 fa0e 	mul.w	sl, r8, lr
    ca46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    ca4a:	459a      	cmp	sl, r3
    ca4c:	fa02 f207 	lsl.w	r2, r2, r7
    ca50:	d940      	bls.n	cad4 <__udivmoddi4+0x298>
    ca52:	18e3      	adds	r3, r4, r3
    ca54:	f108 30ff 	add.w	r0, r8, #4294967295
    ca58:	d204      	bcs.n	ca64 <__udivmoddi4+0x228>
    ca5a:	459a      	cmp	sl, r3
    ca5c:	d902      	bls.n	ca64 <__udivmoddi4+0x228>
    ca5e:	f1a8 0002 	sub.w	r0, r8, #2
    ca62:	4423      	add	r3, r4
    ca64:	eba3 030a 	sub.w	r3, r3, sl
    ca68:	b289      	uxth	r1, r1
    ca6a:	fbb3 f8f9 	udiv	r8, r3, r9
    ca6e:	fb09 3318 	mls	r3, r9, r8, r3
    ca72:	fb08 fe0e 	mul.w	lr, r8, lr
    ca76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ca7a:	458e      	cmp	lr, r1
    ca7c:	d92c      	bls.n	cad8 <__udivmoddi4+0x29c>
    ca7e:	1861      	adds	r1, r4, r1
    ca80:	f108 33ff 	add.w	r3, r8, #4294967295
    ca84:	d204      	bcs.n	ca90 <__udivmoddi4+0x254>
    ca86:	458e      	cmp	lr, r1
    ca88:	d902      	bls.n	ca90 <__udivmoddi4+0x254>
    ca8a:	f1a8 0302 	sub.w	r3, r8, #2
    ca8e:	4421      	add	r1, r4
    ca90:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ca94:	fba0 9802 	umull	r9, r8, r0, r2
    ca98:	eba1 010e 	sub.w	r1, r1, lr
    ca9c:	4541      	cmp	r1, r8
    ca9e:	46ce      	mov	lr, r9
    caa0:	4643      	mov	r3, r8
    caa2:	d302      	bcc.n	caaa <__udivmoddi4+0x26e>
    caa4:	d106      	bne.n	cab4 <__udivmoddi4+0x278>
    caa6:	454d      	cmp	r5, r9
    caa8:	d204      	bcs.n	cab4 <__udivmoddi4+0x278>
    caaa:	ebb9 0e02 	subs.w	lr, r9, r2
    caae:	eb68 0304 	sbc.w	r3, r8, r4
    cab2:	3801      	subs	r0, #1
    cab4:	2e00      	cmp	r6, #0
    cab6:	d0a6      	beq.n	ca06 <__udivmoddi4+0x1ca>
    cab8:	ebb5 020e 	subs.w	r2, r5, lr
    cabc:	eb61 0103 	sbc.w	r1, r1, r3
    cac0:	fa01 fc0c 	lsl.w	ip, r1, ip
    cac4:	fa22 f307 	lsr.w	r3, r2, r7
    cac8:	ea4c 0303 	orr.w	r3, ip, r3
    cacc:	40f9      	lsrs	r1, r7
    cace:	e9c6 3100 	strd	r3, r1, [r6]
    cad2:	e798      	b.n	ca06 <__udivmoddi4+0x1ca>
    cad4:	4640      	mov	r0, r8
    cad6:	e7c5      	b.n	ca64 <__udivmoddi4+0x228>
    cad8:	4643      	mov	r3, r8
    cada:	e7d9      	b.n	ca90 <__udivmoddi4+0x254>

0000cadc <strlen>:
    cadc:	4603      	mov	r3, r0
    cade:	f813 2b01 	ldrb.w	r2, [r3], #1
    cae2:	2a00      	cmp	r2, #0
    cae4:	d1fb      	bne.n	cade <strlen+0x2>
    cae6:	1a18      	subs	r0, r3, r0
    cae8:	3801      	subs	r0, #1
    caea:	4770      	bx	lr
    caec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caf0:	460c      	mov	r4, r1
    caf2:	4681      	mov	r9, r0
    caf4:	7849      	ldrb	r1, [r1, #1]
    caf6:	f100 0003 	add.w	r0, r0, #3
    cafa:	f88d 1000 	strb.w	r1, [sp]
    cafe:	f020 0003 	bic.w	r0, r0, #3
    cb02:	78a1      	ldrb	r1, [r4, #2]
    cb04:	0015      	movs	r5, r2
    cb06:	4606      	mov	r6, r0
    cb08:	f88d 1001 	strb.w	r1, [sp, #1]
    cb0c:	d000      	beq.n	cb10 <strlen+0x34>
    cb0e:	2000      	movs	r0, #0
    cb10:	4669      	mov	r1, sp
    cb12:	f7f4 fe47 	bl	17a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cb16:	eb06 0a00 	add.w	sl, r6, r0
    cb1a:	7820      	ldrb	r0, [r4, #0]
    cb1c:	7861      	ldrb	r1, [r4, #1]
    cb1e:	2700      	movs	r7, #0
    cb20:	4408      	add	r0, r1
    cb22:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    cb26:	463e      	mov	r6, r7
    cb28:	e008      	b.n	cb3c <strlen+0x60>
    cb2a:	7a23      	ldrb	r3, [r4, #8]
    cb2c:	79e2      	ldrb	r2, [r4, #7]
    cb2e:	79a1      	ldrb	r1, [r4, #6]
    cb30:	7960      	ldrb	r0, [r4, #5]
    cb32:	f000 fe80 	bl	d836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cb36:	1c76      	adds	r6, r6, #1
    cb38:	4407      	add	r7, r0
    cb3a:	b2f6      	uxtb	r6, r6
    cb3c:	4546      	cmp	r6, r8
    cb3e:	d3f4      	bcc.n	cb2a <strlen+0x4e>
    cb40:	f10a 0003 	add.w	r0, sl, #3
    cb44:	f020 0003 	bic.w	r0, r0, #3
    cb48:	4606      	mov	r6, r0
    cb4a:	b105      	cbz	r5, cb4e <strlen+0x72>
    cb4c:	2000      	movs	r0, #0
    cb4e:	463a      	mov	r2, r7
    cb50:	4641      	mov	r1, r8
    cb52:	f7f4 ffdb 	bl	1b0c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cb56:	4430      	add	r0, r6
    cb58:	78a1      	ldrb	r1, [r4, #2]
    cb5a:	462e      	mov	r6, r5
    cb5c:	b159      	cbz	r1, cb76 <strlen+0x9a>
    cb5e:	1cc0      	adds	r0, r0, #3
    cb60:	f020 0003 	bic.w	r0, r0, #3
    cb64:	8a63      	ldrh	r3, [r4, #18]
    cb66:	78e2      	ldrb	r2, [r4, #3]
    cb68:	4605      	mov	r5, r0
    cb6a:	b2c9      	uxtb	r1, r1
    cb6c:	b106      	cbz	r6, cb70 <strlen+0x94>
    cb6e:	2000      	movs	r0, #0
    cb70:	f7f5 f880 	bl	1c74 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cb74:	4428      	add	r0, r5
    cb76:	1dc0      	adds	r0, r0, #7
    cb78:	f020 0007 	bic.w	r0, r0, #7
    cb7c:	eba0 0009 	sub.w	r0, r0, r9
    cb80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cb84 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cb84:	b50e      	push	{r1, r2, r3, lr}
    cb86:	4601      	mov	r1, r0
    cb88:	4668      	mov	r0, sp
    cb8a:	f000 f818 	bl	cbbe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cb8e:	4668      	mov	r0, sp
    cb90:	f001 fc62 	bl	e458 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cb94:	bd0e      	pop	{r1, r2, r3, pc}
    cb96:	b570      	push	{r4, r5, r6, lr}
    cb98:	460c      	mov	r4, r1
    cb9a:	4605      	mov	r5, r0
    cb9c:	f7f4 fd78 	bl	1690 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cba0:	2800      	cmp	r0, #0
    cba2:	d002      	beq.n	cbaa <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    cba4:	2d3e      	cmp	r5, #62	; 0x3e
    cba6:	d001      	beq.n	cbac <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    cba8:	2001      	movs	r0, #1
    cbaa:	bd70      	pop	{r4, r5, r6, pc}
    cbac:	2c12      	cmp	r4, #18
    cbae:	d004      	beq.n	cbba <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    cbb0:	4620      	mov	r0, r4
    cbb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cbb6:	f7f4 bd7d 	b.w	16b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbba:	2000      	movs	r0, #0
    cbbc:	bd70      	pop	{r4, r5, r6, pc}

0000cbbe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cbbe:	880a      	ldrh	r2, [r1, #0]
    cbc0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cbc4:	8082      	strh	r2, [r0, #4]
    cbc6:	884a      	ldrh	r2, [r1, #2]
    cbc8:	80c2      	strh	r2, [r0, #6]
    cbca:	784a      	ldrb	r2, [r1, #1]
    cbcc:	0993      	lsrs	r3, r2, #6
    cbce:	2200      	movs	r2, #0
    cbd0:	7242      	strb	r2, [r0, #9]
    cbd2:	784b      	ldrb	r3, [r1, #1]
    cbd4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cbd8:	b11b      	cbz	r3, cbe2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cbda:	2b01      	cmp	r3, #1
    cbdc:	d005      	beq.n	cbea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cbde:	2b02      	cmp	r3, #2
    cbe0:	d005      	beq.n	cbee <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cbe2:	7202      	strb	r2, [r0, #8]
    cbe4:	1d09      	adds	r1, r1, #4
    cbe6:	6001      	str	r1, [r0, #0]
    cbe8:	4770      	bx	lr
    cbea:	2201      	movs	r2, #1
    cbec:	e7f9      	b.n	cbe2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cbee:	2202      	movs	r2, #2
    cbf0:	e7f7      	b.n	cbe2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000cbf2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cbf2:	b510      	push	{r4, lr}
    cbf4:	460c      	mov	r4, r1
    cbf6:	7909      	ldrb	r1, [r1, #4]
    cbf8:	7001      	strb	r1, [r0, #0]
    cbfa:	7841      	ldrb	r1, [r0, #1]
    cbfc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cc00:	7041      	strb	r1, [r0, #1]
    cc02:	88a2      	ldrh	r2, [r4, #4]
    cc04:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cc08:	4311      	orrs	r1, r2
    cc0a:	7041      	strb	r1, [r0, #1]
    cc0c:	79a2      	ldrb	r2, [r4, #6]
    cc0e:	7082      	strb	r2, [r0, #2]
    cc10:	88e2      	ldrh	r2, [r4, #6]
    cc12:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    cc16:	0a12      	lsrs	r2, r2, #8
    cc18:	70c2      	strb	r2, [r0, #3]
    cc1a:	7041      	strb	r1, [r0, #1]
    cc1c:	7a22      	ldrb	r2, [r4, #8]
    cc1e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cc22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    cc26:	7041      	strb	r1, [r0, #1]
    cc28:	7a62      	ldrb	r2, [r4, #9]
    cc2a:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    cc2e:	7041      	strb	r1, [r0, #1]
    cc30:	6821      	ldr	r1, [r4, #0]
    cc32:	1d02      	adds	r2, r0, #4
    cc34:	4291      	cmp	r1, r2
    cc36:	d006      	beq.n	cc46 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    cc38:	88e2      	ldrh	r2, [r4, #6]
    cc3a:	2afb      	cmp	r2, #251	; 0xfb
    cc3c:	d300      	bcc.n	cc40 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    cc3e:	22fb      	movs	r2, #251	; 0xfb
    cc40:	1d00      	adds	r0, r0, #4
    cc42:	f004 f8b5 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc46:	79a0      	ldrb	r0, [r4, #6]
    cc48:	1d00      	adds	r0, r0, #4
    cc4a:	b2c0      	uxtb	r0, r0
    cc4c:	bd10      	pop	{r4, pc}

0000cc4e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cc4e:	b430      	push	{r4, r5}
    cc50:	790a      	ldrb	r2, [r1, #4]
    cc52:	7002      	strb	r2, [r0, #0]
    cc54:	7842      	ldrb	r2, [r0, #1]
    cc56:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cc5a:	7042      	strb	r2, [r0, #1]
    cc5c:	888b      	ldrh	r3, [r1, #4]
    cc5e:	f3c3 2303 	ubfx	r3, r3, #8, #4
    cc62:	431a      	orrs	r2, r3
    cc64:	7042      	strb	r2, [r0, #1]
    cc66:	798b      	ldrb	r3, [r1, #6]
    cc68:	7083      	strb	r3, [r0, #2]
    cc6a:	78c3      	ldrb	r3, [r0, #3]
    cc6c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cc70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cc74:	70c3      	strb	r3, [r0, #3]
    cc76:	88cc      	ldrh	r4, [r1, #6]
    cc78:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cc7c:	4323      	orrs	r3, r4
    cc7e:	70c3      	strb	r3, [r0, #3]
    cc80:	7042      	strb	r2, [r0, #1]
    cc82:	7a0c      	ldrb	r4, [r1, #8]
    cc84:	f004 0403 	and.w	r4, r4, #3
    cc88:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cc8c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cc90:	7042      	strb	r2, [r0, #1]
    cc92:	7a4c      	ldrb	r4, [r1, #9]
    cc94:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    cc98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cc9c:	7042      	strb	r2, [r0, #1]
    cc9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cca2:	70c2      	strb	r2, [r0, #3]
    cca4:	680b      	ldr	r3, [r1, #0]
    cca6:	1d02      	adds	r2, r0, #4
    cca8:	4293      	cmp	r3, r2
    ccaa:	d005      	beq.n	ccb8 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ccac:	88ca      	ldrh	r2, [r1, #6]
    ccae:	bc30      	pop	{r4, r5}
    ccb0:	4619      	mov	r1, r3
    ccb2:	1d00      	adds	r0, r0, #4
    ccb4:	f004 b87c 	b.w	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ccb8:	bc30      	pop	{r4, r5}
    ccba:	4770      	bx	lr

0000ccbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ccbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccc0:	460d      	mov	r5, r1
    ccc2:	4604      	mov	r4, r0
    ccc4:	780f      	ldrb	r7, [r1, #0]
    ccc6:	2000      	movs	r0, #0
    ccc8:	220c      	movs	r2, #12
    ccca:	2305      	movs	r3, #5
    cccc:	263e      	movs	r6, #62	; 0x3e
    ccce:	21ff      	movs	r1, #255	; 0xff
    ccd0:	2f1e      	cmp	r7, #30
    ccd2:	d27d      	bcs.n	cdd0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    ccd4:	e8df f007 	tbb	[pc, r7]
    ccd8:	28260fce 	.word	0x28260fce
    ccdc:	645349ce 	.word	0x645349ce
    cce0:	a0959380 	.word	0xa0959380
    cce4:	ced0c6ab 	.word	0xced0c6ab
    cce8:	b62ecece 	.word	0xb62ecece
    ccec:	f4f1d9b9 	.word	0xf4f1d9b9
    ccf0:	ebecedee 	.word	0xebecedee
    ccf4:	e9ea      	.short	0xe9ea
    ccf6:	7022      	strb	r2, [r4, #0]
    ccf8:	7928      	ldrb	r0, [r5, #4]
    ccfa:	70a0      	strb	r0, [r4, #2]
    ccfc:	7968      	ldrb	r0, [r5, #5]
    ccfe:	70e0      	strb	r0, [r4, #3]
    cd00:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd04:	0a00      	lsrs	r0, r0, #8
    cd06:	7120      	strb	r0, [r4, #4]
    cd08:	79e8      	ldrb	r0, [r5, #7]
    cd0a:	7160      	strb	r0, [r4, #5]
    cd0c:	7a28      	ldrb	r0, [r5, #8]
    cd0e:	71a0      	strb	r0, [r4, #6]
    cd10:	8928      	ldrh	r0, [r5, #8]
    cd12:	0a00      	lsrs	r0, r0, #8
    cd14:	71e0      	strb	r0, [r4, #7]
    cd16:	7aa8      	ldrb	r0, [r5, #10]
    cd18:	7220      	strb	r0, [r4, #8]
    cd1a:	8968      	ldrh	r0, [r5, #10]
    cd1c:	0a00      	lsrs	r0, r0, #8
    cd1e:	7260      	strb	r0, [r4, #9]
    cd20:	2008      	movs	r0, #8
    cd22:	e0a5      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd24:	2010      	movs	r0, #16
    cd26:	e000      	b.n	cd2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6e>
    cd28:	201a      	movs	r0, #26
    cd2a:	7020      	strb	r0, [r4, #0]
    cd2c:	7928      	ldrb	r0, [r5, #4]
    cd2e:	70a0      	strb	r0, [r4, #2]
    cd30:	2001      	movs	r0, #1
    cd32:	e09d      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd34:	2029      	movs	r0, #41	; 0x29
    cd36:	f7f4 fcbd 	bl	16b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cd3a:	b148      	cbz	r0, cd50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x94>
    cd3c:	7026      	strb	r6, [r4, #0]
    cd3e:	2029      	movs	r0, #41	; 0x29
    cd40:	70a0      	strb	r0, [r4, #2]
    cd42:	2221      	movs	r2, #33	; 0x21
    cd44:	1d29      	adds	r1, r5, #4
    cd46:	1ce0      	adds	r0, r4, #3
    cd48:	f004 f832 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd4c:	2022      	movs	r0, #34	; 0x22
    cd4e:	e08f      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd50:	200a      	movs	r0, #10
    cd52:	f7f4 fcaf 	bl	16b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cd56:	2800      	cmp	r0, #0
    cd58:	4629      	mov	r1, r5
    cd5a:	4620      	mov	r0, r4
    cd5c:	d002      	beq.n	cd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    cd5e:	f000 f95b 	bl	d018 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cd62:	e083      	b.n	ce6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    cd64:	f000 f92f 	bl	cfc6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cd68:	e080      	b.n	ce6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    cd6a:	7026      	strb	r6, [r4, #0]
    cd6c:	2014      	movs	r0, #20
    cd6e:	70a0      	strb	r0, [r4, #2]
    cd70:	7928      	ldrb	r0, [r5, #4]
    cd72:	70e0      	strb	r0, [r4, #3]
    cd74:	88a8      	ldrh	r0, [r5, #4]
    cd76:	0a00      	lsrs	r0, r0, #8
    cd78:	7120      	strb	r0, [r4, #4]
    cd7a:	79a8      	ldrb	r0, [r5, #6]
    cd7c:	e0bf      	b.n	cefe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    cd7e:	223e      	movs	r2, #62	; 0x3e
    cd80:	7022      	strb	r2, [r4, #0]
    cd82:	2204      	movs	r2, #4
    cd84:	70a2      	strb	r2, [r4, #2]
    cd86:	6868      	ldr	r0, [r5, #4]
    cd88:	f8c4 0003 	str.w	r0, [r4, #3]
    cd8c:	68a8      	ldr	r0, [r5, #8]
    cd8e:	f8c4 0007 	str.w	r0, [r4, #7]
    cd92:	89a8      	ldrh	r0, [r5, #12]
    cd94:	f8a4 000b 	strh.w	r0, [r4, #11]
    cd98:	7ba8      	ldrb	r0, [r5, #14]
    cd9a:	7360      	strb	r0, [r4, #13]
    cd9c:	200c      	movs	r0, #12
    cd9e:	e067      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cda0:	7026      	strb	r6, [r4, #0]
    cda2:	2003      	movs	r0, #3
    cda4:	70a0      	strb	r0, [r4, #2]
    cda6:	7928      	ldrb	r0, [r5, #4]
    cda8:	70e0      	strb	r0, [r4, #3]
    cdaa:	79a8      	ldrb	r0, [r5, #6]
    cdac:	7120      	strb	r0, [r4, #4]
    cdae:	88e8      	ldrh	r0, [r5, #6]
    cdb0:	0a00      	lsrs	r0, r0, #8
    cdb2:	7160      	strb	r0, [r4, #5]
    cdb4:	7a28      	ldrb	r0, [r5, #8]
    cdb6:	71a0      	strb	r0, [r4, #6]
    cdb8:	8928      	ldrh	r0, [r5, #8]
    cdba:	0a00      	lsrs	r0, r0, #8
    cdbc:	71e0      	strb	r0, [r4, #7]
    cdbe:	7aa8      	ldrb	r0, [r5, #10]
    cdc0:	7220      	strb	r0, [r4, #8]
    cdc2:	8968      	ldrh	r0, [r5, #10]
    cdc4:	0a00      	lsrs	r0, r0, #8
    cdc6:	7260      	strb	r0, [r4, #9]
    cdc8:	7b28      	ldrb	r0, [r5, #12]
    cdca:	72a0      	strb	r0, [r4, #10]
    cdcc:	89a8      	ldrh	r0, [r5, #12]
    cdce:	e000      	b.n	cdd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x116>
    cdd0:	e050      	b.n	ce74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    cdd2:	0a00      	lsrs	r0, r0, #8
    cdd4:	72e0      	strb	r0, [r4, #11]
    cdd6:	e0cf      	b.n	cf78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    cdd8:	7026      	strb	r6, [r4, #0]
    cdda:	70a3      	strb	r3, [r4, #2]
    cddc:	7928      	ldrb	r0, [r5, #4]
    cdde:	70e0      	strb	r0, [r4, #3]
    cde0:	88a8      	ldrh	r0, [r5, #4]
    cde2:	0a00      	lsrs	r0, r0, #8
    cde4:	7120      	strb	r0, [r4, #4]
    cde6:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cdea:	f8c4 0005 	str.w	r0, [r4, #5]
    cdee:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cdf2:	f8c4 0009 	str.w	r0, [r4, #9]
    cdf6:	89e8      	ldrh	r0, [r5, #14]
    cdf8:	f8a4 000d 	strh.w	r0, [r4, #13]
    cdfc:	e0e1      	b.n	cfc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    cdfe:	2011      	movs	r0, #17
    ce00:	e03b      	b.n	ce7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1be>
    ce02:	7023      	strb	r3, [r4, #0]
    ce04:	7928      	ldrb	r0, [r5, #4]
    ce06:	70a0      	strb	r0, [r4, #2]
    ce08:	7968      	ldrb	r0, [r5, #5]
    ce0a:	70e0      	strb	r0, [r4, #3]
    ce0c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ce10:	0a00      	lsrs	r0, r0, #8
    ce12:	7120      	strb	r0, [r4, #4]
    ce14:	79e8      	ldrb	r0, [r5, #7]
    ce16:	e072      	b.n	cefe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    ce18:	2008      	movs	r0, #8
    ce1a:	7020      	strb	r0, [r4, #0]
    ce1c:	7928      	ldrb	r0, [r5, #4]
    ce1e:	70a0      	strb	r0, [r4, #2]
    ce20:	79a8      	ldrb	r0, [r5, #6]
    ce22:	70e0      	strb	r0, [r4, #3]
    ce24:	88e8      	ldrh	r0, [r5, #6]
    ce26:	0a00      	lsrs	r0, r0, #8
    ce28:	7120      	strb	r0, [r4, #4]
    ce2a:	7a28      	ldrb	r0, [r5, #8]
    ce2c:	e067      	b.n	cefe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    ce2e:	2030      	movs	r0, #48	; 0x30
    ce30:	7020      	strb	r0, [r4, #0]
    ce32:	7928      	ldrb	r0, [r5, #4]
    ce34:	70a0      	strb	r0, [r4, #2]
    ce36:	79a8      	ldrb	r0, [r5, #6]
    ce38:	70e0      	strb	r0, [r4, #3]
    ce3a:	88e8      	ldrh	r0, [r5, #6]
    ce3c:	0a00      	lsrs	r0, r0, #8
    ce3e:	7120      	strb	r0, [r4, #4]
    ce40:	2003      	movs	r0, #3
    ce42:	e015      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ce44:	7026      	strb	r6, [r4, #0]
    ce46:	2007      	movs	r0, #7
    ce48:	e05e      	b.n	cf08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    ce4a:	7026      	strb	r6, [r4, #0]
    ce4c:	70a2      	strb	r2, [r4, #2]
    ce4e:	7928      	ldrb	r0, [r5, #4]
    ce50:	70e0      	strb	r0, [r4, #3]
    ce52:	79a8      	ldrb	r0, [r5, #6]
    ce54:	7120      	strb	r0, [r4, #4]
    ce56:	88e8      	ldrh	r0, [r5, #6]
    ce58:	0a00      	lsrs	r0, r0, #8
    ce5a:	7160      	strb	r0, [r4, #5]
    ce5c:	7a28      	ldrb	r0, [r5, #8]
    ce5e:	71a0      	strb	r0, [r4, #6]
    ce60:	7a68      	ldrb	r0, [r5, #9]
    ce62:	e01f      	b.n	cea4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    ce64:	1d29      	adds	r1, r5, #4
    ce66:	4620      	mov	r0, r4
    ce68:	f7f4 fbe4 	bl	1634 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    ce6c:	2800      	cmp	r0, #0
    ce6e:	d001      	beq.n	ce74 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    ce70:	7060      	strb	r0, [r4, #1]
    ce72:	1c80      	adds	r0, r0, #2
    ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce78:	2057      	movs	r0, #87	; 0x57
    ce7a:	7020      	strb	r0, [r4, #0]
    ce7c:	7928      	ldrb	r0, [r5, #4]
    ce7e:	70a0      	strb	r0, [r4, #2]
    ce80:	88a8      	ldrh	r0, [r5, #4]
    ce82:	0a00      	lsrs	r0, r0, #8
    ce84:	70e0      	strb	r0, [r4, #3]
    ce86:	2002      	movs	r0, #2
    ce88:	e7f2      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ce8a:	7026      	strb	r6, [r4, #0]
    ce8c:	2012      	movs	r0, #18
    ce8e:	70a0      	strb	r0, [r4, #2]
    ce90:	7928      	ldrb	r0, [r5, #4]
    ce92:	70e0      	strb	r0, [r4, #3]
    ce94:	7968      	ldrb	r0, [r5, #5]
    ce96:	7120      	strb	r0, [r4, #4]
    ce98:	79a8      	ldrb	r0, [r5, #6]
    ce9a:	7160      	strb	r0, [r4, #5]
    ce9c:	88e8      	ldrh	r0, [r5, #6]
    ce9e:	0a00      	lsrs	r0, r0, #8
    cea0:	71a0      	strb	r0, [r4, #6]
    cea2:	7a28      	ldrb	r0, [r5, #8]
    cea4:	71e0      	strb	r0, [r4, #7]
    cea6:	2006      	movs	r0, #6
    cea8:	e7e2      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ceaa:	e075      	b.n	cf98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    ceac:	e048      	b.n	cf40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    ceae:	e029      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    ceb0:	e054      	b.n	cf5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    ceb2:	e063      	b.n	cf7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    ceb4:	e01b      	b.n	ceee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    ceb6:	e003      	b.n	cec0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    ceb8:	e7ff      	b.n	ceba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1fe>
    ceba:	7026      	strb	r6, [r4, #0]
    cebc:	2020      	movs	r0, #32
    cebe:	e041      	b.n	cf44 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cec0:	7026      	strb	r6, [r4, #0]
    cec2:	2021      	movs	r0, #33	; 0x21
    cec4:	70a0      	strb	r0, [r4, #2]
    cec6:	7928      	ldrb	r0, [r5, #4]
    cec8:	70e0      	strb	r0, [r4, #3]
    ceca:	7968      	ldrb	r0, [r5, #5]
    cecc:	7120      	strb	r0, [r4, #4]
    cece:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ced2:	0a00      	lsrs	r0, r0, #8
    ced4:	7160      	strb	r0, [r4, #5]
    ced6:	79e8      	ldrb	r0, [r5, #7]
    ced8:	71a0      	strb	r0, [r4, #6]
    ceda:	7a28      	ldrb	r0, [r5, #8]
    cedc:	71e0      	strb	r0, [r4, #7]
    cede:	7a68      	ldrb	r0, [r5, #9]
    cee0:	7220      	strb	r0, [r4, #8]
    cee2:	7aa8      	ldrb	r0, [r5, #10]
    cee4:	7260      	strb	r0, [r4, #9]
    cee6:	7ae8      	ldrb	r0, [r5, #11]
    cee8:	72a0      	strb	r0, [r4, #10]
    ceea:	2009      	movs	r0, #9
    ceec:	e7c0      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ceee:	7021      	strb	r1, [r4, #0]
    cef0:	20a1      	movs	r0, #161	; 0xa1
    cef2:	70a0      	strb	r0, [r4, #2]
    cef4:	7928      	ldrb	r0, [r5, #4]
    cef6:	70e0      	strb	r0, [r4, #3]
    cef8:	7968      	ldrb	r0, [r5, #5]
    cefa:	7120      	strb	r0, [r4, #4]
    cefc:	2000      	movs	r0, #0
    cefe:	7160      	strb	r0, [r4, #5]
    cf00:	2004      	movs	r0, #4
    cf02:	e7b5      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf04:	7021      	strb	r1, [r4, #0]
    cf06:	20a2      	movs	r0, #162	; 0xa2
    cf08:	70a0      	strb	r0, [r4, #2]
    cf0a:	7928      	ldrb	r0, [r5, #4]
    cf0c:	70e0      	strb	r0, [r4, #3]
    cf0e:	88a8      	ldrh	r0, [r5, #4]
    cf10:	0a00      	lsrs	r0, r0, #8
    cf12:	7120      	strb	r0, [r4, #4]
    cf14:	79a8      	ldrb	r0, [r5, #6]
    cf16:	7160      	strb	r0, [r4, #5]
    cf18:	88e8      	ldrh	r0, [r5, #6]
    cf1a:	0a00      	lsrs	r0, r0, #8
    cf1c:	71a0      	strb	r0, [r4, #6]
    cf1e:	7a28      	ldrb	r0, [r5, #8]
    cf20:	71e0      	strb	r0, [r4, #7]
    cf22:	8928      	ldrh	r0, [r5, #8]
    cf24:	0a00      	lsrs	r0, r0, #8
    cf26:	7220      	strb	r0, [r4, #8]
    cf28:	7aa8      	ldrb	r0, [r5, #10]
    cf2a:	7260      	strb	r0, [r4, #9]
    cf2c:	8968      	ldrh	r0, [r5, #10]
    cf2e:	0a00      	lsrs	r0, r0, #8
    cf30:	72a0      	strb	r0, [r4, #10]
    cf32:	7b28      	ldrb	r0, [r5, #12]
    cf34:	72e0      	strb	r0, [r4, #11]
    cf36:	89a8      	ldrh	r0, [r5, #12]
    cf38:	0a00      	lsrs	r0, r0, #8
    cf3a:	7320      	strb	r0, [r4, #12]
    cf3c:	200b      	movs	r0, #11
    cf3e:	e797      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf40:	7021      	strb	r1, [r4, #0]
    cf42:	20a3      	movs	r0, #163	; 0xa3
    cf44:	70a0      	strb	r0, [r4, #2]
    cf46:	7928      	ldrb	r0, [r5, #4]
    cf48:	70e0      	strb	r0, [r4, #3]
    cf4a:	88a8      	ldrh	r0, [r5, #4]
    cf4c:	0a00      	lsrs	r0, r0, #8
    cf4e:	7120      	strb	r0, [r4, #4]
    cf50:	79a8      	ldrb	r0, [r5, #6]
    cf52:	7160      	strb	r0, [r4, #5]
    cf54:	79e8      	ldrb	r0, [r5, #7]
    cf56:	71a0      	strb	r0, [r4, #6]
    cf58:	2005      	movs	r0, #5
    cf5a:	e789      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf5c:	7026      	strb	r6, [r4, #0]
    cf5e:	2013      	movs	r0, #19
    cf60:	70a0      	strb	r0, [r4, #2]
    cf62:	7928      	ldrb	r0, [r5, #4]
    cf64:	70e0      	strb	r0, [r4, #3]
    cf66:	7968      	ldrb	r0, [r5, #5]
    cf68:	7120      	strb	r0, [r4, #4]
    cf6a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cf6e:	f8c4 0005 	str.w	r0, [r4, #5]
    cf72:	8968      	ldrh	r0, [r5, #10]
    cf74:	f8a4 0009 	strh.w	r0, [r4, #9]
    cf78:	200a      	movs	r0, #10
    cf7a:	e779      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf7c:	7021      	strb	r1, [r4, #0]
    cf7e:	20a4      	movs	r0, #164	; 0xa4
    cf80:	70a0      	strb	r0, [r4, #2]
    cf82:	7928      	ldrb	r0, [r5, #4]
    cf84:	70e0      	strb	r0, [r4, #3]
    cf86:	88a8      	ldrh	r0, [r5, #4]
    cf88:	0a00      	lsrs	r0, r0, #8
    cf8a:	7120      	strb	r0, [r4, #4]
    cf8c:	79a8      	ldrb	r0, [r5, #6]
    cf8e:	7160      	strb	r0, [r4, #5]
    cf90:	79e8      	ldrb	r0, [r5, #7]
    cf92:	71a0      	strb	r0, [r4, #6]
    cf94:	2007      	movs	r0, #7
    cf96:	e76b      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf98:	7021      	strb	r1, [r4, #0]
    cf9a:	2080      	movs	r0, #128	; 0x80
    cf9c:	70a0      	strb	r0, [r4, #2]
    cf9e:	88a9      	ldrh	r1, [r5, #4]
    cfa0:	f8a4 1003 	strh.w	r1, [r4, #3]
    cfa4:	88e9      	ldrh	r1, [r5, #6]
    cfa6:	f8a4 1005 	strh.w	r1, [r4, #5]
    cfaa:	7a29      	ldrb	r1, [r5, #8]
    cfac:	71e1      	strb	r1, [r4, #7]
    cfae:	8969      	ldrh	r1, [r5, #10]
    cfb0:	8121      	strh	r1, [r4, #8]
    cfb2:	89a9      	ldrh	r1, [r5, #12]
    cfb4:	8161      	strh	r1, [r4, #10]
    cfb6:	89e9      	ldrh	r1, [r5, #14]
    cfb8:	81a1      	strh	r1, [r4, #12]
    cfba:	7c29      	ldrb	r1, [r5, #16]
    cfbc:	f001 0101 	and.w	r1, r1, #1
    cfc0:	73a1      	strb	r1, [r4, #14]
    cfc2:	200d      	movs	r0, #13
    cfc4:	e754      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>

0000cfc6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    cfc6:	223e      	movs	r2, #62	; 0x3e
    cfc8:	7002      	strb	r2, [r0, #0]
    cfca:	2201      	movs	r2, #1
    cfcc:	7082      	strb	r2, [r0, #2]
    cfce:	790a      	ldrb	r2, [r1, #4]
    cfd0:	70c2      	strb	r2, [r0, #3]
    cfd2:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cfd6:	7102      	strb	r2, [r0, #4]
    cfd8:	880a      	ldrh	r2, [r1, #0]
    cfda:	0a12      	lsrs	r2, r2, #8
    cfdc:	7142      	strb	r2, [r0, #5]
    cfde:	788a      	ldrb	r2, [r1, #2]
    cfe0:	7182      	strb	r2, [r0, #6]
    cfe2:	78ca      	ldrb	r2, [r1, #3]
    cfe4:	71c2      	strb	r2, [r0, #7]
    cfe6:	684a      	ldr	r2, [r1, #4]
    cfe8:	6082      	str	r2, [r0, #8]
    cfea:	890a      	ldrh	r2, [r1, #8]
    cfec:	8182      	strh	r2, [r0, #12]
    cfee:	7d8a      	ldrb	r2, [r1, #22]
    cff0:	7382      	strb	r2, [r0, #14]
    cff2:	8aca      	ldrh	r2, [r1, #22]
    cff4:	0a12      	lsrs	r2, r2, #8
    cff6:	73c2      	strb	r2, [r0, #15]
    cff8:	7e0a      	ldrb	r2, [r1, #24]
    cffa:	7402      	strb	r2, [r0, #16]
    cffc:	8b0a      	ldrh	r2, [r1, #24]
    cffe:	0a12      	lsrs	r2, r2, #8
    d000:	7442      	strb	r2, [r0, #17]
    d002:	7e8a      	ldrb	r2, [r1, #26]
    d004:	7482      	strb	r2, [r0, #18]
    d006:	8b4a      	ldrh	r2, [r1, #26]
    d008:	0a12      	lsrs	r2, r2, #8
    d00a:	74c2      	strb	r2, [r0, #19]
    d00c:	7f09      	ldrb	r1, [r1, #28]
    d00e:	7501      	strb	r1, [r0, #20]
    d010:	2113      	movs	r1, #19
    d012:	7041      	strb	r1, [r0, #1]
    d014:	4608      	mov	r0, r1
    d016:	4770      	bx	lr
    d018:	223e      	movs	r2, #62	; 0x3e
    d01a:	7002      	strb	r2, [r0, #0]
    d01c:	220a      	movs	r2, #10
    d01e:	7082      	strb	r2, [r0, #2]
    d020:	790a      	ldrb	r2, [r1, #4]
    d022:	70c2      	strb	r2, [r0, #3]
    d024:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d028:	7102      	strb	r2, [r0, #4]
    d02a:	880a      	ldrh	r2, [r1, #0]
    d02c:	0a12      	lsrs	r2, r2, #8
    d02e:	7142      	strb	r2, [r0, #5]
    d030:	788a      	ldrb	r2, [r1, #2]
    d032:	7182      	strb	r2, [r0, #6]
    d034:	78ca      	ldrb	r2, [r1, #3]
    d036:	71c2      	strb	r2, [r0, #7]
    d038:	684a      	ldr	r2, [r1, #4]
    d03a:	6082      	str	r2, [r0, #8]
    d03c:	890a      	ldrh	r2, [r1, #8]
    d03e:	8182      	strh	r2, [r0, #12]
    d040:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d044:	f8c0 200e 	str.w	r2, [r0, #14]
    d048:	89ca      	ldrh	r2, [r1, #14]
    d04a:	8242      	strh	r2, [r0, #18]
    d04c:	690a      	ldr	r2, [r1, #16]
    d04e:	6142      	str	r2, [r0, #20]
    d050:	8a8a      	ldrh	r2, [r1, #20]
    d052:	8302      	strh	r2, [r0, #24]
    d054:	7d8a      	ldrb	r2, [r1, #22]
    d056:	7682      	strb	r2, [r0, #26]
    d058:	8aca      	ldrh	r2, [r1, #22]
    d05a:	0a12      	lsrs	r2, r2, #8
    d05c:	76c2      	strb	r2, [r0, #27]
    d05e:	7e0a      	ldrb	r2, [r1, #24]
    d060:	7702      	strb	r2, [r0, #28]
    d062:	8b0a      	ldrh	r2, [r1, #24]
    d064:	0a12      	lsrs	r2, r2, #8
    d066:	7742      	strb	r2, [r0, #29]
    d068:	7e8a      	ldrb	r2, [r1, #26]
    d06a:	7782      	strb	r2, [r0, #30]
    d06c:	8b4a      	ldrh	r2, [r1, #26]
    d06e:	0a12      	lsrs	r2, r2, #8
    d070:	77c2      	strb	r2, [r0, #31]
    d072:	7f09      	ldrb	r1, [r1, #28]
    d074:	f880 1020 	strb.w	r1, [r0, #32]
    d078:	211f      	movs	r1, #31
    d07a:	7041      	strb	r1, [r0, #1]
    d07c:	4608      	mov	r0, r1
    d07e:	4770      	bx	lr
    d080:	094a      	lsrs	r2, r1, #5
    d082:	f001 011f 	and.w	r1, r1, #31
    d086:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d08a:	40c8      	lsrs	r0, r1
    d08c:	f000 0001 	and.w	r0, r0, #1
    d090:	4770      	bx	lr

0000d092 <sdc_hci_data_put>:
    d092:	b510      	push	{r4, lr}
    d094:	f06f 0415 	mvn.w	r4, #21
    d098:	b120      	cbz	r0, d0a4 <sdc_hci_data_put+0x12>
    d09a:	f7ff fd73 	bl	cb84 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d09e:	b108      	cbz	r0, d0a4 <sdc_hci_data_put+0x12>
    d0a0:	2000      	movs	r0, #0
    d0a2:	bd10      	pop	{r4, pc}
    d0a4:	4620      	mov	r0, r4
    d0a6:	bd10      	pop	{r4, pc}

0000d0a8 <sdc_hci_get>:
    d0a8:	b510      	push	{r4, lr}
    d0aa:	460c      	mov	r4, r1
    d0ac:	b130      	cbz	r0, d0bc <sdc_hci_get+0x14>
    d0ae:	b12c      	cbz	r4, d0bc <sdc_hci_get+0x14>
    d0b0:	f7f4 fa70 	bl	1594 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d0b4:	b128      	cbz	r0, d0c2 <sdc_hci_get+0x1a>
    d0b6:	7020      	strb	r0, [r4, #0]
    d0b8:	2000      	movs	r0, #0
    d0ba:	bd10      	pop	{r4, pc}
    d0bc:	f06f 0015 	mvn.w	r0, #21
    d0c0:	bd10      	pop	{r4, pc}
    d0c2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d0c6:	bd10      	pop	{r4, pc}

0000d0c8 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d0c8:	f003 b910 	b.w	102ec <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d0cc <sdc_hci_cmd_cb_read_transmit_power_level>:
    d0cc:	f003 b92b 	b.w	10326 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d0d0 <sdc_hci_cmd_cb_set_event_mask>:
    d0d0:	b510      	push	{r4, lr}
    d0d2:	f7f4 fb09 	bl	16e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d0d6:	2000      	movs	r0, #0
    d0d8:	bd10      	pop	{r4, pc}

0000d0da <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d0da:	b510      	push	{r4, lr}
    d0dc:	f7f4 fb16 	bl	170c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d0e0:	2000      	movs	r0, #0
    d0e2:	bd10      	pop	{r4, pc}

0000d0e4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d0e4:	f003 b940 	b.w	10368 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d0e8 <sdc_hci_cmd_vs_conn_event_extend>:
    d0e8:	b508      	push	{r3, lr}
    d0ea:	7800      	ldrb	r0, [r0, #0]
    d0ec:	f88d 0000 	strb.w	r0, [sp]
    d0f0:	4668      	mov	r0, sp
    d0f2:	f003 f81c 	bl	1012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d0f6:	bd08      	pop	{r3, pc}

0000d0f8 <sdc_hci_cmd_vs_conn_update>:
    d0f8:	2001      	movs	r0, #1
    d0fa:	4770      	bx	lr

0000d0fc <sdc_hci_cmd_vs_event_length_set>:
    d0fc:	f7fa b8c0 	b.w	7280 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d100 <sdc_hci_cmd_vs_llpm_mode_set>:
    d100:	2001      	movs	r0, #1
    d102:	4770      	bx	lr

0000d104 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d104:	7881      	ldrb	r1, [r0, #2]
    d106:	8800      	ldrh	r0, [r0, #0]
    d108:	f002 bfc1 	b.w	1008e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d10c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d10c:	7800      	ldrb	r0, [r0, #0]
    d10e:	b100      	cbz	r0, d112 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d110:	2001      	movs	r0, #1
    d112:	f002 bfb7 	b.w	10084 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d116 <sdc_hci_cmd_vs_set_adv_randomness>:
    d116:	f002 bfe4 	b.w	100e2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d11a <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d11a:	b510      	push	{r4, lr}
    d11c:	4604      	mov	r4, r0
    d11e:	f7ff fa31 	bl	c584 <mpsl_temperature_get>
    d122:	17c1      	asrs	r1, r0, #31
    d124:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d128:	1080      	asrs	r0, r0, #2
    d12a:	287f      	cmp	r0, #127	; 0x7f
    d12c:	dd01      	ble.n	d132 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d12e:	207f      	movs	r0, #127	; 0x7f
    d130:	e004      	b.n	d13c <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d132:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d136:	4288      	cmp	r0, r1
    d138:	da00      	bge.n	d13c <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d13a:	4608      	mov	r0, r1
    d13c:	7020      	strb	r0, [r4, #0]
    d13e:	2000      	movs	r0, #0
    d140:	bd10      	pop	{r4, pc}

0000d142 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d142:	b570      	push	{r4, r5, r6, lr}
    d144:	4605      	mov	r5, r0
    d146:	2210      	movs	r2, #16
    d148:	2100      	movs	r1, #0
    d14a:	f003 feab 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d14e:	2210      	movs	r2, #16
    d150:	2100      	movs	r1, #0
    d152:	f105 0010 	add.w	r0, r5, #16
    d156:	f003 fea5 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d15a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d15e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d162:	1c40      	adds	r0, r0, #1
    d164:	d10b      	bne.n	d17e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d166:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d16a:	1c40      	adds	r0, r0, #1
    d16c:	d107      	bne.n	d17e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d16e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d172:	1c40      	adds	r0, r0, #1
    d174:	d103      	bne.n	d17e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d176:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d17a:	1c40      	adds	r0, r0, #1
    d17c:	d00b      	beq.n	d196 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d17e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d182:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d186:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d18a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d18e:	612a      	str	r2, [r5, #16]
    d190:	6168      	str	r0, [r5, #20]
    d192:	61a9      	str	r1, [r5, #24]
    d194:	61eb      	str	r3, [r5, #28]
    d196:	2000      	movs	r0, #0
    d198:	f7f4 ffcc 	bl	2134 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d19c:	b918      	cbnz	r0, d1a6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d19e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d1a2:	07c0      	lsls	r0, r0, #31
    d1a4:	d118      	bne.n	d1d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1a6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d1aa:	1c40      	adds	r0, r0, #1
    d1ac:	d10b      	bne.n	d1c6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1ae:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d1b2:	1c40      	adds	r0, r0, #1
    d1b4:	d107      	bne.n	d1c6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1b6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d1ba:	1c40      	adds	r0, r0, #1
    d1bc:	d103      	bne.n	d1c6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1be:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d1c2:	1c40      	adds	r0, r0, #1
    d1c4:	d008      	beq.n	d1d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1c6:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d1ca:	6861      	ldr	r1, [r4, #4]
    d1cc:	68a2      	ldr	r2, [r4, #8]
    d1ce:	68e3      	ldr	r3, [r4, #12]
    d1d0:	6028      	str	r0, [r5, #0]
    d1d2:	6069      	str	r1, [r5, #4]
    d1d4:	60aa      	str	r2, [r5, #8]
    d1d6:	60eb      	str	r3, [r5, #12]
    d1d8:	2000      	movs	r0, #0
    d1da:	bd70      	pop	{r4, r5, r6, pc}

0000d1dc <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d1dc:	b538      	push	{r3, r4, r5, lr}
    d1de:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d1e2:	4604      	mov	r4, r0
    d1e4:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d1e8:	1c40      	adds	r0, r0, #1
    d1ea:	d105      	bne.n	d1f8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d1ec:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d1f0:	43c0      	mvns	r0, r0
    d1f2:	0400      	lsls	r0, r0, #16
    d1f4:	0c00      	lsrs	r0, r0, #16
    d1f6:	d03e      	beq.n	d276 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d1f8:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d1fc:	07c0      	lsls	r0, r0, #31
    d1fe:	d03a      	beq.n	d276 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d200:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d204:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d208:	f8ad 1000 	strh.w	r1, [sp]
    d20c:	f8c4 0001 	str.w	r0, [r4, #1]
    d210:	f8bd 0000 	ldrh.w	r0, [sp]
    d214:	f8a4 0005 	strh.w	r0, [r4, #5]
    d218:	79a0      	ldrb	r0, [r4, #6]
    d21a:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d21e:	71a0      	strb	r0, [r4, #6]
    d220:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d224:	1c40      	adds	r0, r0, #1
    d226:	d00f      	beq.n	d248 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d228:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d22c:	1c40      	adds	r0, r0, #1
    d22e:	d00b      	beq.n	d248 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d230:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d234:	1c40      	adds	r0, r0, #1
    d236:	d007      	beq.n	d248 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d238:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d23c:	1c40      	adds	r0, r0, #1
    d23e:	d003      	beq.n	d248 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d240:	2000      	movs	r0, #0
    d242:	f7f4 ff77 	bl	2134 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d246:	b140      	cbz	r0, d25a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d248:	2210      	movs	r2, #16
    d24a:	2100      	movs	r1, #0
    d24c:	1de0      	adds	r0, r4, #7
    d24e:	f003 fe29 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d252:	2001      	movs	r0, #1
    d254:	7020      	strb	r0, [r4, #0]
    d256:	2000      	movs	r0, #0
    d258:	bd38      	pop	{r3, r4, r5, pc}
    d25a:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d25e:	6869      	ldr	r1, [r5, #4]
    d260:	68a8      	ldr	r0, [r5, #8]
    d262:	68eb      	ldr	r3, [r5, #12]
    d264:	f8c4 2007 	str.w	r2, [r4, #7]
    d268:	f8c4 100b 	str.w	r1, [r4, #11]
    d26c:	f8c4 000f 	str.w	r0, [r4, #15]
    d270:	f8c4 3013 	str.w	r3, [r4, #19]
    d274:	e7ed      	b.n	d252 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d276:	2000      	movs	r0, #0
    d278:	e7ec      	b.n	d254 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d27a <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d27a:	f002 bf47 	b.w	1010c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d27e <sdc_hci_cmd_ip_read_bd_addr>:
    d27e:	f003 b846 	b.w	1030e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d282 <sdc_hci_cmd_ip_read_local_version_information>:
    d282:	f7fa b80b 	b.w	729c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d286 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d286:	f002 bcda 	b.w	fc3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d28a <sdc_hci_cmd_le_clear_filter_accept_list>:
    d28a:	f002 bcef 	b.w	fc6c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d28e <sdc_hci_cmd_le_encrypt>:
    d28e:	f002 bcf7 	b.w	fc80 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d292 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d292:	8802      	ldrh	r2, [r0, #0]
    d294:	800a      	strh	r2, [r1, #0]
    d296:	f002 bcfc 	b.w	fc92 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d29a <sdc_hci_cmd_le_long_term_key_request_reply>:
    d29a:	8802      	ldrh	r2, [r0, #0]
    d29c:	800a      	strh	r2, [r1, #0]
    d29e:	f002 bd11 	b.w	fcc4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d2a2 <sdc_hci_cmd_le_rand>:
    d2a2:	f002 bd39 	b.w	fd18 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d2a6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d2a6:	f002 bd3d 	b.w	fd24 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d2aa <sdc_hci_cmd_le_read_buffer_size>:
    d2aa:	f7f9 bef1 	b.w	7090 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d2ae <sdc_hci_cmd_le_read_channel_map>:
    d2ae:	f7f9 bef9 	b.w	70a4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d2b2 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d2b2:	f002 bd77 	b.w	fda4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d2b6 <sdc_hci_cmd_le_read_max_data_length>:
    d2b6:	f002 bd40 	b.w	fd3a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d2ba <sdc_hci_cmd_le_read_phy>:
    d2ba:	f7f9 bf1b 	b.w	70f4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d2be <sdc_hci_cmd_le_read_remote_features>:
    d2be:	f002 bd45 	b.w	fd4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d2c2 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d2c2:	f7f9 bf3d 	b.w	7140 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d2c6 <sdc_hci_cmd_le_read_transmit_power>:
    d2c6:	f002 bd5d 	b.w	fd84 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d2ca <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d2ca:	f002 bd6f 	b.w	fdac <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d2ce <sdc_hci_cmd_le_set_adv_data>:
    d2ce:	f002 bd82 	b.w	fdd6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d2d2 <sdc_hci_cmd_le_set_adv_enable>:
    d2d2:	f002 bd95 	b.w	fe00 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d2d6 <sdc_hci_cmd_le_set_adv_params>:
    d2d6:	f002 bdc6 	b.w	fe66 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d2da <sdc_hci_cmd_le_set_data_length>:
    d2da:	f002 be59 	b.w	ff90 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d2de <sdc_hci_cmd_le_set_data_related_address_changes>:
    d2de:	f002 be77 	b.w	ffd0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d2e2 <sdc_hci_cmd_le_set_default_phy>:
    d2e2:	f7f9 bf37 	b.w	7154 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d2e6 <sdc_hci_cmd_le_set_event_mask>:
    d2e6:	b510      	push	{r4, lr}
    d2e8:	f7f4 f9ec 	bl	16c4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d2ec:	2000      	movs	r0, #0
    d2ee:	bd10      	pop	{r4, pc}

0000d2f0 <sdc_hci_cmd_le_set_phy>:
    d2f0:	f002 be7b 	b.w	ffea <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d2f4 <sdc_hci_cmd_le_set_random_address>:
    d2f4:	f002 be92 	b.w	1001c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d2f8 <sdc_hci_cmd_le_set_scan_response_data>:
    d2f8:	f002 be9e 	b.w	10038 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d2fc <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d2fc:	f002 beb1 	b.w	10062 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d300 <sdc_hci_cmd_lc_disconnect>:
    d300:	f002 bc4f 	b.w	fba2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d304 <sdc_hci_cmd_lc_read_remote_version_information>:
    d304:	f7f9 bfd4 	b.w	72b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d308:	b570      	push	{r4, r5, r6, lr}
    d30a:	880b      	ldrh	r3, [r1, #0]
    d30c:	7cc4      	ldrb	r4, [r0, #19]
    d30e:	f100 0518 	add.w	r5, r0, #24
    d312:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d316:	8802      	ldrh	r2, [r0, #0]
    d318:	4435      	add	r5, r6
    d31a:	1d64      	adds	r4, r4, #5
    d31c:	882d      	ldrh	r5, [r5, #0]
    d31e:	4422      	add	r2, r4
    d320:	b292      	uxth	r2, r2
    d322:	4425      	add	r5, r4
    d324:	1e54      	subs	r4, r2, #1
    d326:	442c      	add	r4, r5
    d328:	fb94 f4f2 	sdiv	r4, r4, r2
    d32c:	fb02 6204 	mla	r2, r2, r4, r6
    d330:	8840      	ldrh	r0, [r0, #2]
    d332:	b292      	uxth	r2, r2
    d334:	4290      	cmp	r0, r2
    d336:	d903      	bls.n	d340 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d338:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d33c:	4310      	orrs	r0, r2
    d33e:	e002      	b.n	d346 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d340:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d344:	4398      	bics	r0, r3
    d346:	8008      	strh	r0, [r1, #0]
    d348:	bd70      	pop	{r4, r5, r6, pc}
    d34a:	0442      	lsls	r2, r0, #17
    d34c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d350:	d107      	bne.n	d362 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d352:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d356:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d35a:	4288      	cmp	r0, r1
    d35c:	d001      	beq.n	d362 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d35e:	2001      	movs	r0, #1
    d360:	4770      	bx	lr
    d362:	2000      	movs	r0, #0
    d364:	4770      	bx	lr

0000d366 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d366:	8881      	ldrh	r1, [r0, #4]
    d368:	88c0      	ldrh	r0, [r0, #6]
    d36a:	4288      	cmp	r0, r1
    d36c:	d101      	bne.n	d372 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d36e:	2001      	movs	r0, #1
    d370:	4770      	bx	lr
    d372:	2000      	movs	r0, #0
    d374:	4770      	bx	lr

0000d376 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d37a:	460f      	mov	r7, r1
    d37c:	4604      	mov	r4, r0
    d37e:	f100 0118 	add.w	r1, r0, #24
    d382:	8880      	ldrh	r0, [r0, #4]
    d384:	2600      	movs	r6, #0
    d386:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d38a:	1845      	adds	r5, r0, r1
    d38c:	603e      	str	r6, [r7, #0]
    d38e:	89e0      	ldrh	r0, [r4, #14]
    d390:	2800      	cmp	r0, #0
    d392:	d016      	beq.n	d3c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d394:	8961      	ldrh	r1, [r4, #10]
    d396:	4408      	add	r0, r1
    d398:	b280      	uxth	r0, r0
    d39a:	8160      	strh	r0, [r4, #10]
    d39c:	8829      	ldrh	r1, [r5, #0]
    d39e:	4288      	cmp	r0, r1
    d3a0:	d905      	bls.n	d3ae <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d3a2:	f240 1151 	movw	r1, #337	; 0x151
    d3a6:	f04f 0014 	mov.w	r0, #20
    d3aa:	f7f3 fff9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3ae:	d106      	bne.n	d3be <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d3b0:	f104 0104 	add.w	r1, r4, #4
    d3b4:	4620      	mov	r0, r4
    d3b6:	f7ff ffa7 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3ba:	8166      	strh	r6, [r4, #10]
    d3bc:	603d      	str	r5, [r7, #0]
    d3be:	81e6      	strh	r6, [r4, #14]
    d3c0:	2001      	movs	r0, #1
    d3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d3c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3ca:	4604      	mov	r4, r0
    d3cc:	f100 0318 	add.w	r3, r0, #24
    d3d0:	88c0      	ldrh	r0, [r0, #6]
    d3d2:	460e      	mov	r6, r1
    d3d4:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d3d8:	8a20      	ldrh	r0, [r4, #16]
    d3da:	19d9      	adds	r1, r3, r7
    d3dc:	b108      	cbz	r0, d3e2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d3de:	42b0      	cmp	r0, r6
    d3e0:	d202      	bcs.n	d3e8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d3e2:	2000      	movs	r0, #0
    d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3e8:	89a0      	ldrh	r0, [r4, #12]
    d3ea:	2500      	movs	r5, #0
    d3ec:	b140      	cbz	r0, d400 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d3ee:	f8b1 c000 	ldrh.w	ip, [r1]
    d3f2:	4560      	cmp	r0, ip
    d3f4:	d006      	beq.n	d404 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d3f6:	f44f 7101 	mov.w	r1, #516	; 0x204
    d3fa:	2014      	movs	r0, #20
    d3fc:	f7f3 ffd0 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d400:	800d      	strh	r5, [r1, #0]
    d402:	e00e      	b.n	d422 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d404:	f894 c013 	ldrb.w	ip, [r4, #19]
    d408:	4418      	add	r0, r3
    d40a:	f10c 0c05 	add.w	ip, ip, #5
    d40e:	44bc      	add	ip, r7
    d410:	4460      	add	r0, ip
    d412:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d416:	f820 cc03 	strh.w	ip, [r0, #-3]
    d41a:	f894 c016 	ldrb.w	ip, [r4, #22]
    d41e:	f800 cc01 	strb.w	ip, [r0, #-1]
    d422:	89a0      	ldrh	r0, [r4, #12]
    d424:	4430      	add	r0, r6
    d426:	81a0      	strh	r0, [r4, #12]
    d428:	8808      	ldrh	r0, [r1, #0]
    d42a:	4430      	add	r0, r6
    d42c:	8008      	strh	r0, [r1, #0]
    d42e:	b12a      	cbz	r2, d43c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d430:	1da1      	adds	r1, r4, #6
    d432:	4620      	mov	r0, r4
    d434:	f7ff ff68 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d438:	81a5      	strh	r5, [r4, #12]
    d43a:	e00a      	b.n	d452 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d43c:	7ce0      	ldrb	r0, [r4, #19]
    d43e:	89a1      	ldrh	r1, [r4, #12]
    d440:	1d40      	adds	r0, r0, #5
    d442:	4438      	add	r0, r7
    d444:	4419      	add	r1, r3
    d446:	4408      	add	r0, r1
    d448:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d44c:	82a1      	strh	r1, [r4, #20]
    d44e:	7880      	ldrb	r0, [r0, #2]
    d450:	75a0      	strb	r0, [r4, #22]
    d452:	8225      	strh	r5, [r4, #16]
    d454:	2001      	movs	r0, #1
    d456:	e7c5      	b.n	d3e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d458 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d458:	1c80      	adds	r0, r0, #2
    d45a:	4770      	bx	lr

0000d45c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d45c:	b510      	push	{r4, lr}
    d45e:	4604      	mov	r4, r0
    d460:	88c0      	ldrh	r0, [r0, #6]
    d462:	88a1      	ldrh	r1, [r4, #4]
    d464:	4281      	cmp	r1, r0
    d466:	d003      	beq.n	d470 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d468:	8960      	ldrh	r0, [r4, #10]
    d46a:	b908      	cbnz	r0, d470 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d46c:	89e0      	ldrh	r0, [r4, #14]
    d46e:	b108      	cbz	r0, d474 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d470:	2000      	movs	r0, #0
    d472:	bd10      	pop	{r4, pc}
    d474:	1d21      	adds	r1, r4, #4
    d476:	4620      	mov	r0, r4
    d478:	f7ff ff46 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d47c:	2000      	movs	r0, #0
    d47e:	81e0      	strh	r0, [r4, #14]
    d480:	2001      	movs	r0, #1
    d482:	bd10      	pop	{r4, pc}

0000d484 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d484:	b510      	push	{r4, lr}
    d486:	4604      	mov	r4, r0
    d488:	f100 0218 	add.w	r2, r0, #24
    d48c:	88c0      	ldrh	r0, [r0, #6]
    d48e:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d492:	4402      	add	r2, r0
    d494:	8820      	ldrh	r0, [r4, #0]
    d496:	2845      	cmp	r0, #69	; 0x45
    d498:	d200      	bcs.n	d49c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d49a:	2045      	movs	r0, #69	; 0x45
    d49c:	4288      	cmp	r0, r1
    d49e:	d204      	bcs.n	d4aa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d4a0:	f44f 7182 	mov.w	r1, #260	; 0x104
    d4a4:	2014      	movs	r0, #20
    d4a6:	f7f3 ff7b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4aa:	7ca0      	ldrb	r0, [r4, #18]
    d4ac:	2800      	cmp	r0, #0
    d4ae:	d003      	beq.n	d4b8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d4b0:	8810      	ldrh	r0, [r2, #0]
    d4b2:	4288      	cmp	r0, r1
    d4b4:	d201      	bcs.n	d4ba <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d4b6:	2000      	movs	r0, #0
    d4b8:	bd10      	pop	{r4, pc}
    d4ba:	8011      	strh	r1, [r2, #0]
    d4bc:	1da1      	adds	r1, r4, #6
    d4be:	4620      	mov	r0, r4
    d4c0:	f7ff ff22 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4c4:	2000      	movs	r0, #0
    d4c6:	74a0      	strb	r0, [r4, #18]
    d4c8:	2001      	movs	r0, #1
    d4ca:	bd10      	pop	{r4, pc}

0000d4cc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d4cc:	b510      	push	{r4, lr}
    d4ce:	88c4      	ldrh	r4, [r0, #6]
    d4d0:	8883      	ldrh	r3, [r0, #4]
    d4d2:	4601      	mov	r1, r0
    d4d4:	f100 0218 	add.w	r2, r0, #24
    d4d8:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d4dc:	4410      	add	r0, r2
    d4de:	42a3      	cmp	r3, r4
    d4e0:	d002      	beq.n	d4e8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d4e2:	8949      	ldrh	r1, [r1, #10]
    d4e4:	2900      	cmp	r1, #0
    d4e6:	d000      	beq.n	d4ea <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d4e8:	2000      	movs	r0, #0
    d4ea:	bd10      	pop	{r4, pc}

0000d4ec <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d4ec:	8803      	ldrh	r3, [r0, #0]
    d4ee:	2b45      	cmp	r3, #69	; 0x45
    d4f0:	d200      	bcs.n	d4f4 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d4f2:	2345      	movs	r3, #69	; 0x45
    d4f4:	8013      	strh	r3, [r2, #0]
    d4f6:	88c2      	ldrh	r2, [r0, #6]
    d4f8:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d4fc:	f100 0218 	add.w	r2, r0, #24
    d500:	441a      	add	r2, r3
    d502:	600a      	str	r2, [r1, #0]
    d504:	8980      	ldrh	r0, [r0, #12]
    d506:	4770      	bx	lr

0000d508 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d508:	7cc0      	ldrb	r0, [r0, #19]
    d50a:	1d40      	adds	r0, r0, #5
    d50c:	4408      	add	r0, r1
    d50e:	1ec0      	subs	r0, r0, #3
    d510:	6010      	str	r0, [r2, #0]
    d512:	8808      	ldrh	r0, [r1, #0]
    d514:	4770      	bx	lr

0000d516 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d51a:	460e      	mov	r6, r1
    d51c:	88c1      	ldrh	r1, [r0, #6]
    d51e:	8902      	ldrh	r2, [r0, #8]
    d520:	4604      	mov	r4, r0
    d522:	f100 0818 	add.w	r8, r0, #24
    d526:	8800      	ldrh	r0, [r0, #0]
    d528:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d52c:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d530:	2845      	cmp	r0, #69	; 0x45
    d532:	d200      	bcs.n	d536 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d534:	2045      	movs	r0, #69	; 0x45
    d536:	42b0      	cmp	r0, r6
    d538:	d203      	bcs.n	d542 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d53a:	21c6      	movs	r1, #198	; 0xc6
    d53c:	2014      	movs	r0, #20
    d53e:	f7f3 ff2f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d542:	4610      	mov	r0, r2
    d544:	f7ff ff01 	bl	d34a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d548:	b110      	cbz	r0, d550 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d54a:	2000      	movs	r0, #0
    d54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d550:	42af      	cmp	r7, r5
    d552:	d908      	bls.n	d566 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d554:	7ce1      	ldrb	r1, [r4, #19]
    d556:	1b78      	subs	r0, r7, r5
    d558:	1a40      	subs	r0, r0, r1
    d55a:	1f40      	subs	r0, r0, #5
    d55c:	4286      	cmp	r6, r0
    d55e:	dd02      	ble.n	d566 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d560:	2000      	movs	r0, #0
    d562:	74a0      	strb	r0, [r4, #18]
    d564:	e7f1      	b.n	d54a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d566:	eb08 0005 	add.w	r0, r8, r5
    d56a:	2101      	movs	r1, #1
    d56c:	8006      	strh	r6, [r0, #0]
    d56e:	74a1      	strb	r1, [r4, #18]
    d570:	e7ec      	b.n	d54c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d572 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d572:	b538      	push	{r3, r4, r5, lr}
    d574:	88c4      	ldrh	r4, [r0, #6]
    d576:	8881      	ldrh	r1, [r0, #4]
    d578:	f100 0218 	add.w	r2, r0, #24
    d57c:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d580:	441a      	add	r2, r3
    d582:	42a1      	cmp	r1, r4
    d584:	d010      	beq.n	d5a8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d586:	8943      	ldrh	r3, [r0, #10]
    d588:	89c5      	ldrh	r5, [r0, #14]
    d58a:	8812      	ldrh	r2, [r2, #0]
    d58c:	442b      	add	r3, r5
    d58e:	4293      	cmp	r3, r2
    d590:	d308      	bcc.n	d5a4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d592:	f8ad 1000 	strh.w	r1, [sp]
    d596:	4669      	mov	r1, sp
    d598:	f7ff feb6 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d59c:	f8bd 0000 	ldrh.w	r0, [sp]
    d5a0:	42a0      	cmp	r0, r4
    d5a2:	d001      	beq.n	d5a8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d5a4:	2001      	movs	r0, #1
    d5a6:	bd38      	pop	{r3, r4, r5, pc}
    d5a8:	2000      	movs	r0, #0
    d5aa:	bd38      	pop	{r3, r4, r5, pc}

0000d5ac <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d5ac:	b570      	push	{r4, r5, r6, lr}
    d5ae:	88c6      	ldrh	r6, [r0, #6]
    d5b0:	8885      	ldrh	r5, [r0, #4]
    d5b2:	4603      	mov	r3, r0
    d5b4:	f100 0418 	add.w	r4, r0, #24
    d5b8:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d5bc:	4420      	add	r0, r4
    d5be:	42b5      	cmp	r5, r6
    d5c0:	d102      	bne.n	d5c8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d5c2:	2000      	movs	r0, #0
    d5c4:	81d8      	strh	r0, [r3, #14]
    d5c6:	bd70      	pop	{r4, r5, r6, pc}
    d5c8:	8804      	ldrh	r4, [r0, #0]
    d5ca:	895d      	ldrh	r5, [r3, #10]
    d5cc:	7cde      	ldrb	r6, [r3, #19]
    d5ce:	1b64      	subs	r4, r4, r5
    d5d0:	4435      	add	r5, r6
    d5d2:	4428      	add	r0, r5
    d5d4:	880d      	ldrh	r5, [r1, #0]
    d5d6:	b2a4      	uxth	r4, r4
    d5d8:	1c80      	adds	r0, r0, #2
    d5da:	42a5      	cmp	r5, r4
    d5dc:	d900      	bls.n	d5e0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d5de:	800c      	strh	r4, [r1, #0]
    d5e0:	895c      	ldrh	r4, [r3, #10]
    d5e2:	b124      	cbz	r4, d5ee <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d5e4:	2400      	movs	r4, #0
    d5e6:	7014      	strb	r4, [r2, #0]
    d5e8:	8809      	ldrh	r1, [r1, #0]
    d5ea:	81d9      	strh	r1, [r3, #14]
    d5ec:	bd70      	pop	{r4, r5, r6, pc}
    d5ee:	2401      	movs	r4, #1
    d5f0:	e7f9      	b.n	d5e6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d5f2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5f6:	461d      	mov	r5, r3
    d5f8:	4616      	mov	r6, r2
    d5fa:	9f06      	ldr	r7, [sp, #24]
    d5fc:	460b      	mov	r3, r1
    d5fe:	4604      	mov	r4, r0
    d600:	463a      	mov	r2, r7
    d602:	4629      	mov	r1, r5
    d604:	4630      	mov	r0, r6
    d606:	f000 f839 	bl	d67c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d60a:	4283      	cmp	r3, r0
    d60c:	d201      	bcs.n	d612 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d60e:	219e      	movs	r1, #158	; 0x9e
    d610:	e012      	b.n	d638 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d612:	07a0      	lsls	r0, r4, #30
    d614:	d001      	beq.n	d61a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d616:	219f      	movs	r1, #159	; 0x9f
    d618:	e00e      	b.n	d638 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d61a:	2218      	movs	r2, #24
    d61c:	2100      	movs	r1, #0
    d61e:	4620      	mov	r0, r4
    d620:	f003 fc40 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d624:	19a8      	adds	r0, r5, r6
    d626:	1d40      	adds	r0, r0, #5
    d628:	4378      	muls	r0, r7
    d62a:	b280      	uxth	r0, r0
    d62c:	74e5      	strb	r5, [r4, #19]
    d62e:	8060      	strh	r0, [r4, #2]
    d630:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d634:	d903      	bls.n	d63e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d636:	21a4      	movs	r1, #164	; 0xa4
    d638:	2014      	movs	r0, #20
    d63a:	f7f3 feb1 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d63e:	8026      	strh	r6, [r4, #0]
    d640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d644 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d644:	b570      	push	{r4, r5, r6, lr}
    d646:	460b      	mov	r3, r1
    d648:	4604      	mov	r4, r0
    d64a:	f100 0118 	add.w	r1, r0, #24
    d64e:	8902      	ldrh	r2, [r0, #8]
    d650:	8880      	ldrh	r0, [r0, #4]
    d652:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d656:	440d      	add	r5, r1
    d658:	4282      	cmp	r2, r0
    d65a:	d101      	bne.n	d660 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d65c:	2000      	movs	r0, #0
    d65e:	bd70      	pop	{r4, r5, r6, pc}
    d660:	b123      	cbz	r3, d66c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d662:	7ce2      	ldrb	r2, [r4, #19]
    d664:	1ca9      	adds	r1, r5, #2
    d666:	4618      	mov	r0, r3
    d668:	f003 fba2 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d66c:	882d      	ldrh	r5, [r5, #0]
    d66e:	f104 0108 	add.w	r1, r4, #8
    d672:	4620      	mov	r0, r4
    d674:	f7ff fe48 	bl	d308 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d678:	4628      	mov	r0, r5
    d67a:	bd70      	pop	{r4, r5, r6, pc}

0000d67c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d67c:	4401      	add	r1, r0
    d67e:	1d49      	adds	r1, r1, #5
    d680:	4351      	muls	r1, r2
    d682:	b28a      	uxth	r2, r1
    d684:	2100      	movs	r1, #0
    d686:	2845      	cmp	r0, #69	; 0x45
    d688:	d202      	bcs.n	d690 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d68a:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d68e:	b281      	uxth	r1, r0
    d690:	3218      	adds	r2, #24
    d692:	1850      	adds	r0, r2, r1
    d694:	b280      	uxth	r0, r0
    d696:	4770      	bx	lr

0000d698 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d69c:	4688      	mov	r8, r1
    d69e:	88c1      	ldrh	r1, [r0, #6]
    d6a0:	4604      	mov	r4, r0
    d6a2:	8900      	ldrh	r0, [r0, #8]
    d6a4:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d6a8:	f104 0518 	add.w	r5, r4, #24
    d6ac:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d6b0:	eb05 0906 	add.w	r9, r5, r6
    d6b4:	f7ff fe49 	bl	d34a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d6b8:	2200      	movs	r2, #0
    d6ba:	b998      	cbnz	r0, d6e4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d6bc:	8820      	ldrh	r0, [r4, #0]
    d6be:	2845      	cmp	r0, #69	; 0x45
    d6c0:	d200      	bcs.n	d6c4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d6c2:	2045      	movs	r0, #69	; 0x45
    d6c4:	42b7      	cmp	r7, r6
    d6c6:	d906      	bls.n	d6d6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d6c8:	7ce3      	ldrb	r3, [r4, #19]
    d6ca:	1bb9      	subs	r1, r7, r6
    d6cc:	1ac9      	subs	r1, r1, r3
    d6ce:	1f49      	subs	r1, r1, #5
    d6d0:	4281      	cmp	r1, r0
    d6d2:	da00      	bge.n	d6d6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d6d4:	4608      	mov	r0, r1
    d6d6:	89a1      	ldrh	r1, [r4, #12]
    d6d8:	b111      	cbz	r1, d6e0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d6da:	f8b9 3000 	ldrh.w	r3, [r9]
    d6de:	1ac0      	subs	r0, r0, r3
    d6e0:	4540      	cmp	r0, r8
    d6e2:	da03      	bge.n	d6ec <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d6e4:	8222      	strh	r2, [r4, #16]
    d6e6:	2000      	movs	r0, #0
    d6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d6ec:	7ce0      	ldrb	r0, [r4, #19]
    d6ee:	4429      	add	r1, r5
    d6f0:	1d40      	adds	r0, r0, #5
    d6f2:	4430      	add	r0, r6
    d6f4:	4408      	add	r0, r1
    d6f6:	f8a4 8010 	strh.w	r8, [r4, #16]
    d6fa:	1ec0      	subs	r0, r0, #3
    d6fc:	e7f4      	b.n	d6e8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d6fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d6fe:	b570      	push	{r4, r5, r6, lr}
    d700:	2300      	movs	r3, #0
    d702:	f1a1 0208 	sub.w	r2, r1, #8
    d706:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d70a:	42a2      	cmp	r2, r4
    d70c:	d304      	bcc.n	d718 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d70e:	f240 11cd 	movw	r1, #461	; 0x1cd
    d712:	2015      	movs	r0, #21
    d714:	f7f3 fe44 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d718:	6802      	ldr	r2, [r0, #0]
    d71a:	b90a      	cbnz	r2, d720 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d71c:	e01e      	b.n	d75c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d71e:	4610      	mov	r0, r2
    d720:	6802      	ldr	r2, [r0, #0]
    d722:	8893      	ldrh	r3, [r2, #4]
    d724:	428b      	cmp	r3, r1
    d726:	d002      	beq.n	d72e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d728:	6813      	ldr	r3, [r2, #0]
    d72a:	2b00      	cmp	r3, #0
    d72c:	d1f7      	bne.n	d71e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d72e:	8894      	ldrh	r4, [r2, #4]
    d730:	4613      	mov	r3, r2
    d732:	428c      	cmp	r4, r1
    d734:	d101      	bne.n	d73a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d736:	6811      	ldr	r1, [r2, #0]
    d738:	e00d      	b.n	d756 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d73a:	f101 0508 	add.w	r5, r1, #8
    d73e:	b2ae      	uxth	r6, r5
    d740:	2500      	movs	r5, #0
    d742:	42b4      	cmp	r4, r6
    d744:	d309      	bcc.n	d75a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d746:	1a64      	subs	r4, r4, r1
    d748:	4411      	add	r1, r2
    d74a:	600d      	str	r5, [r1, #0]
    d74c:	808c      	strh	r4, [r1, #4]
    d74e:	6802      	ldr	r2, [r0, #0]
    d750:	6812      	ldr	r2, [r2, #0]
    d752:	6002      	str	r2, [r0, #0]
    d754:	600a      	str	r2, [r1, #0]
    d756:	6001      	str	r1, [r0, #0]
    d758:	e000      	b.n	d75c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d75a:	2300      	movs	r3, #0
    d75c:	4618      	mov	r0, r3
    d75e:	bd70      	pop	{r4, r5, r6, pc}

0000d760 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d760:	b510      	push	{r4, lr}
    d762:	000c      	movs	r4, r1
    d764:	d004      	beq.n	d770 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d766:	2c08      	cmp	r4, #8
    d768:	d207      	bcs.n	d77a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d76a:	f240 1195 	movw	r1, #405	; 0x195
    d76e:	e00a      	b.n	d786 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d770:	b108      	cbz	r0, d776 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d772:	2100      	movs	r1, #0
    d774:	6001      	str	r1, [r0, #0]
    d776:	2000      	movs	r0, #0
    d778:	bd10      	pop	{r4, pc}
    d77a:	b158      	cbz	r0, d794 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d77c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d780:	d304      	bcc.n	d78c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d782:	f240 11a7 	movw	r1, #423	; 0x1a7
    d786:	2015      	movs	r0, #21
    d788:	f7f3 fe0a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d78c:	b2a1      	uxth	r1, r4
    d78e:	6800      	ldr	r0, [r0, #0]
    d790:	f000 f814 	bl	d7bc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d794:	1d20      	adds	r0, r4, #4
    d796:	bd10      	pop	{r4, pc}

0000d798 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d798:	2100      	movs	r1, #0
    d79a:	6802      	ldr	r2, [r0, #0]
    d79c:	e003      	b.n	d7a6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d79e:	8893      	ldrh	r3, [r2, #4]
    d7a0:	6812      	ldr	r2, [r2, #0]
    d7a2:	4419      	add	r1, r3
    d7a4:	b289      	uxth	r1, r1
    d7a6:	2a00      	cmp	r2, #0
    d7a8:	d1f9      	bne.n	d79e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d7aa:	f000 b807 	b.w	d7bc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d7ae <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d7ae:	2300      	movs	r3, #0
    d7b0:	600b      	str	r3, [r1, #0]
    d7b2:	808a      	strh	r2, [r1, #4]
    d7b4:	6802      	ldr	r2, [r0, #0]
    d7b6:	600a      	str	r2, [r1, #0]
    d7b8:	6001      	str	r1, [r0, #0]
    d7ba:	4770      	bx	lr
    d7bc:	2300      	movs	r3, #0
    d7be:	6043      	str	r3, [r0, #4]
    d7c0:	1d02      	adds	r2, r0, #4
    d7c2:	8101      	strh	r1, [r0, #8]
    d7c4:	6002      	str	r2, [r0, #0]
    d7c6:	4770      	bx	lr

0000d7c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d7c8:	b51c      	push	{r2, r3, r4, lr}
    d7ca:	4604      	mov	r4, r0
    d7cc:	2000      	movs	r0, #0
    d7ce:	9001      	str	r0, [sp, #4]
    d7d0:	9000      	str	r0, [sp, #0]
    d7d2:	f88d 4006 	strb.w	r4, [sp, #6]
    d7d6:	e00a      	b.n	d7ee <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d7d8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d7dc:	4621      	mov	r1, r4
    d7de:	f7f4 f865 	bl	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d7e2:	b120      	cbz	r0, d7ee <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d7e4:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d7e8:	2017      	movs	r0, #23
    d7ea:	f7f3 fdd9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7ee:	4668      	mov	r0, sp
    d7f0:	f7f4 f814 	bl	181c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d7f4:	2800      	cmp	r0, #0
    d7f6:	d0ef      	beq.n	d7d8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d7f8:	bd1c      	pop	{r2, r3, r4, pc}

0000d7fa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d7fa:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d7fe:	3aff      	subs	r2, #255	; 0xff
    d800:	d001      	beq.n	d806 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d802:	2902      	cmp	r1, #2
    d804:	d301      	bcc.n	d80a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d806:	2000      	movs	r0, #0
    d808:	4770      	bx	lr
    d80a:	f7f4 b881 	b.w	1910 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d80e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d812:	3aff      	subs	r2, #255	; 0xff
    d814:	d001      	beq.n	d81a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d816:	2902      	cmp	r1, #2
    d818:	d301      	bcc.n	d81e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d81a:	2000      	movs	r0, #0
    d81c:	4770      	bx	lr
    d81e:	f7f4 b89f 	b.w	1960 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d822:	b510      	push	{r4, lr}
    d824:	4604      	mov	r4, r0
    d826:	f7f4 f8e7 	bl	19f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d82a:	42a0      	cmp	r0, r4
    d82c:	d901      	bls.n	d832 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    d82e:	2001      	movs	r0, #1
    d830:	bd10      	pop	{r4, pc}
    d832:	2000      	movs	r0, #0
    d834:	bd10      	pop	{r4, pc}

0000d836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d836:	b570      	push	{r4, r5, r6, lr}
    d838:	460e      	mov	r6, r1
    d83a:	461d      	mov	r5, r3
    d83c:	4611      	mov	r1, r2
    d83e:	f000 f813 	bl	d868 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d842:	4604      	mov	r4, r0
    d844:	4629      	mov	r1, r5
    d846:	4630      	mov	r0, r6
    d848:	f000 f804 	bl	d854 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d84c:	4420      	add	r0, r4
    d84e:	1d00      	adds	r0, r0, #4
    d850:	b280      	uxth	r0, r0
    d852:	bd70      	pop	{r4, r5, r6, pc}
    d854:	b510      	push	{r4, lr}
    d856:	460a      	mov	r2, r1
    d858:	2109      	movs	r1, #9
    d85a:	f7ff ff0f 	bl	d67c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d85e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d862:	1cc0      	adds	r0, r0, #3
    d864:	4008      	ands	r0, r1
    d866:	bd10      	pop	{r4, pc}
    d868:	b510      	push	{r4, lr}
    d86a:	460a      	mov	r2, r1
    d86c:	210a      	movs	r1, #10
    d86e:	f7ff ff05 	bl	d67c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d872:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d876:	1cc0      	adds	r0, r0, #3
    d878:	4008      	ands	r0, r1
    d87a:	bd10      	pop	{r4, pc}
    d87c:	b109      	cbz	r1, d882 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d87e:	2100      	movs	r1, #0
    d880:	e000      	b.n	d884 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d882:	2102      	movs	r1, #2
    d884:	1843      	adds	r3, r0, r1
    d886:	7d1a      	ldrb	r2, [r3, #20]
    d888:	2a02      	cmp	r2, #2
    d88a:	d008      	beq.n	d89e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d88c:	7d5b      	ldrb	r3, [r3, #21]
    d88e:	2b02      	cmp	r3, #2
    d890:	d009      	beq.n	d8a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d892:	2a03      	cmp	r2, #3
    d894:	d003      	beq.n	d89e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d896:	2b03      	cmp	r3, #3
    d898:	d005      	beq.n	d8a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d89a:	2000      	movs	r0, #0
    d89c:	4770      	bx	lr
    d89e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d8a2:	8b00      	ldrh	r0, [r0, #24]
    d8a4:	4770      	bx	lr
    d8a6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d8aa:	8b40      	ldrh	r0, [r0, #26]
    d8ac:	4770      	bx	lr
    d8ae:	b109      	cbz	r1, d8b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d8b0:	2100      	movs	r1, #0
    d8b2:	e000      	b.n	d8b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d8b4:	2102      	movs	r1, #2
    d8b6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d8ba:	8b01      	ldrh	r1, [r0, #24]
    d8bc:	b911      	cbnz	r1, d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d8be:	8b40      	ldrh	r0, [r0, #26]
    d8c0:	2800      	cmp	r0, #0
    d8c2:	d000      	beq.n	d8c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d8c4:	2001      	movs	r0, #1
    d8c6:	4770      	bx	lr
    d8c8:	b538      	push	{r3, r4, r5, lr}
    d8ca:	7883      	ldrb	r3, [r0, #2]
    d8cc:	f88d 3000 	strb.w	r3, [sp]
    d8d0:	9b00      	ldr	r3, [sp, #0]
    d8d2:	9300      	str	r3, [sp, #0]
    d8d4:	f89d 3000 	ldrb.w	r3, [sp]
    d8d8:	b95b      	cbnz	r3, d8f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d8da:	2400      	movs	r4, #0
    d8dc:	b10a      	cbz	r2, d8e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d8de:	2300      	movs	r3, #0
    d8e0:	e000      	b.n	d8e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d8e2:	2302      	movs	r3, #2
    d8e4:	18c2      	adds	r2, r0, r3
    d8e6:	7d15      	ldrb	r5, [r2, #20]
    d8e8:	2d02      	cmp	r5, #2
    d8ea:	d004      	beq.n	d8f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d8ec:	7d52      	ldrb	r2, [r2, #21]
    d8ee:	2a02      	cmp	r2, #2
    d8f0:	d004      	beq.n	d8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d8f2:	2000      	movs	r0, #0
    d8f4:	bd38      	pop	{r3, r4, r5, pc}
    d8f6:	461a      	mov	r2, r3
    d8f8:	1c5b      	adds	r3, r3, #1
    d8fa:	e000      	b.n	d8fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d8fc:	1c5a      	adds	r2, r3, #1
    d8fe:	b179      	cbz	r1, d920 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d900:	18c5      	adds	r5, r0, r3
    d902:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d906:	752c      	strb	r4, [r5, #20]
    d908:	831c      	strh	r4, [r3, #24]
    d90a:	2303      	movs	r3, #3
    d90c:	1884      	adds	r4, r0, r2
    d90e:	7523      	strb	r3, [r4, #20]
    d910:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d914:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d918:	685b      	ldr	r3, [r3, #4]
    d91a:	600b      	str	r3, [r1, #0]
    d91c:	8b00      	ldrh	r0, [r0, #24]
    d91e:	8088      	strh	r0, [r1, #4]
    d920:	2001      	movs	r0, #1
    d922:	bd38      	pop	{r3, r4, r5, pc}
    d924:	b510      	push	{r4, lr}
    d926:	b109      	cbz	r1, d92c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d928:	2100      	movs	r1, #0
    d92a:	e000      	b.n	d92e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d92c:	2102      	movs	r1, #2
    d92e:	1843      	adds	r3, r0, r1
    d930:	7d1c      	ldrb	r4, [r3, #20]
    d932:	4294      	cmp	r4, r2
    d934:	d103      	bne.n	d93e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d936:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d93a:	8b00      	ldrh	r0, [r0, #24]
    d93c:	bd10      	pop	{r4, pc}
    d93e:	7d5b      	ldrb	r3, [r3, #21]
    d940:	4293      	cmp	r3, r2
    d942:	d103      	bne.n	d94c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d944:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d948:	8b40      	ldrh	r0, [r0, #26]
    d94a:	bd10      	pop	{r4, pc}
    d94c:	2000      	movs	r0, #0
    d94e:	bd10      	pop	{r4, pc}
    d950:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d954:	d201      	bcs.n	d95a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d956:	0841      	lsrs	r1, r0, #1
    d958:	e000      	b.n	d95c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d95a:	21ff      	movs	r1, #255	; 0xff
    d95c:	1a40      	subs	r0, r0, r1
    d95e:	f240 6172 	movw	r1, #1650	; 0x672
    d962:	4288      	cmp	r0, r1
    d964:	db00      	blt.n	d968 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d966:	4608      	mov	r0, r1
    d968:	b280      	uxth	r0, r0
    d96a:	4770      	bx	lr

0000d96c <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d96c:	2101      	movs	r1, #1
    d96e:	f7ff bf85 	b.w	d87c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d976:	4606      	mov	r6, r0
    d978:	f342 0780 	sbfx	r7, r2, #2, #1
    d97c:	7848      	ldrb	r0, [r1, #1]
    d97e:	460c      	mov	r4, r1
    d980:	f022 0504 	bic.w	r5, r2, #4
    d984:	1c7f      	adds	r7, r7, #1
    d986:	b100      	cbz	r0, d98a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d988:	b90d      	cbnz	r5, d98e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d98a:	4328      	orrs	r0, r5
    d98c:	d104      	bne.n	d998 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d98e:	b145      	cbz	r5, d9a2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d990:	2100      	movs	r1, #0
    d992:	4620      	mov	r0, r4
    d994:	f7f4 f92e 	bl	1bf4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d998:	20ff      	movs	r0, #255	; 0xff
    d99a:	70a0      	strb	r0, [r4, #2]
    d99c:	b11f      	cbz	r7, d9a6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d99e:	2000      	movs	r0, #0
    d9a0:	e002      	b.n	d9a8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d9a2:	2101      	movs	r1, #1
    d9a4:	e7f5      	b.n	d992 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d9a6:	2002      	movs	r0, #2
    d9a8:	1821      	adds	r1, r4, r0
    d9aa:	7d09      	ldrb	r1, [r1, #20]
    d9ac:	2903      	cmp	r1, #3
    d9ae:	d102      	bne.n	d9b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d9b0:	2d02      	cmp	r5, #2
    d9b2:	d000      	beq.n	d9b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d9b4:	1c40      	adds	r0, r0, #1
    d9b6:	1822      	adds	r2, r4, r0
    d9b8:	2101      	movs	r1, #1
    d9ba:	7511      	strb	r1, [r2, #20]
    d9bc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d9c0:	2200      	movs	r2, #0
    d9c2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d9c6:	830a      	strh	r2, [r1, #24]
    d9c8:	6840      	ldr	r0, [r0, #4]
    d9ca:	70a2      	strb	r2, [r4, #2]
    d9cc:	4631      	mov	r1, r6
    d9ce:	f362 010f 	bfi	r1, r2, #0, #16
    d9d2:	e9c6 0100 	strd	r0, r1, [r6]
    d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d9da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9de:	461e      	mov	r6, r3
    d9e0:	4613      	mov	r3, r2
    d9e2:	4604      	mov	r4, r0
    d9e4:	b109      	cbz	r1, d9ea <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d9e6:	2000      	movs	r0, #0
    d9e8:	e000      	b.n	d9ec <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d9ea:	2002      	movs	r0, #2
    d9ec:	21ff      	movs	r1, #255	; 0xff
    d9ee:	70a1      	strb	r1, [r4, #2]
    d9f0:	1821      	adds	r1, r4, r0
    d9f2:	7d0a      	ldrb	r2, [r1, #20]
    d9f4:	2a01      	cmp	r2, #1
    d9f6:	d003      	beq.n	da00 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d9f8:	7d49      	ldrb	r1, [r1, #21]
    d9fa:	2901      	cmp	r1, #1
    d9fc:	d10c      	bne.n	da18 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d9fe:	1c40      	adds	r0, r0, #1
    da00:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    da04:	2700      	movs	r7, #0
    da06:	8b29      	ldrh	r1, [r5, #24]
    da08:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    da0c:	198a      	adds	r2, r1, r6
    da0e:	4562      	cmp	r2, ip
    da10:	d905      	bls.n	da1e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    da12:	4420      	add	r0, r4
    da14:	832f      	strh	r7, [r5, #24]
    da16:	7507      	strb	r7, [r0, #20]
    da18:	2000      	movs	r0, #0
    da1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da1e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    da22:	4632      	mov	r2, r6
    da24:	6840      	ldr	r0, [r0, #4]
    da26:	4408      	add	r0, r1
    da28:	4619      	mov	r1, r3
    da2a:	f003 f9c1 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da2e:	8b28      	ldrh	r0, [r5, #24]
    da30:	4430      	add	r0, r6
    da32:	8328      	strh	r0, [r5, #24]
    da34:	70a7      	strb	r7, [r4, #2]
    da36:	2001      	movs	r0, #1
    da38:	e7ef      	b.n	da1a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000da3a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    da3a:	b510      	push	{r4, lr}
    da3c:	2101      	movs	r1, #1
    da3e:	f7ff ff36 	bl	d8ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    da42:	2800      	cmp	r0, #0
    da44:	d000      	beq.n	da48 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    da46:	2001      	movs	r0, #1
    da48:	bd10      	pop	{r4, pc}

0000da4a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    da4a:	2201      	movs	r2, #1
    da4c:	f7ff bf3c 	b.w	d8c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000da50 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    da50:	2200      	movs	r2, #0
    da52:	f7ff bf39 	b.w	d8c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000da56 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    da56:	b510      	push	{r4, lr}
    da58:	2100      	movs	r1, #0
    da5a:	f7ff ff28 	bl	d8ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    da5e:	2800      	cmp	r0, #0
    da60:	d000      	beq.n	da64 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    da62:	2001      	movs	r0, #1
    da64:	bd10      	pop	{r4, pc}

0000da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    da66:	b570      	push	{r4, r5, r6, lr}
    da68:	b109      	cbz	r1, da6e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    da6a:	2300      	movs	r3, #0
    da6c:	e000      	b.n	da70 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    da6e:	2302      	movs	r3, #2
    da70:	21ff      	movs	r1, #255	; 0xff
    da72:	7081      	strb	r1, [r0, #2]
    da74:	18c1      	adds	r1, r0, r3
    da76:	2402      	movs	r4, #2
    da78:	7d0d      	ldrb	r5, [r1, #20]
    da7a:	2d01      	cmp	r5, #1
    da7c:	d007      	beq.n	da8e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    da7e:	7d4d      	ldrb	r5, [r1, #21]
    da80:	2d01      	cmp	r5, #1
    da82:	d009      	beq.n	da98 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    da84:	f44f 718b 	mov.w	r1, #278	; 0x116
    da88:	2009      	movs	r0, #9
    da8a:	f7f3 fc89 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da92:	831a      	strh	r2, [r3, #24]
    da94:	750c      	strb	r4, [r1, #20]
    da96:	e003      	b.n	daa0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    da98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da9c:	835a      	strh	r2, [r3, #26]
    da9e:	754c      	strb	r4, [r1, #21]
    daa0:	2100      	movs	r1, #0
    daa2:	7081      	strb	r1, [r0, #2]
    daa4:	bd70      	pop	{r4, r5, r6, pc}

0000daa6 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    daa6:	2101      	movs	r1, #1
    daa8:	7001      	strb	r1, [r0, #0]
    daaa:	4770      	bx	lr

0000daac <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    daac:	2201      	movs	r2, #1
    daae:	4611      	mov	r1, r2
    dab0:	f7ff bf38 	b.w	d924 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dab4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    dab4:	2201      	movs	r2, #1
    dab6:	2100      	movs	r1, #0
    dab8:	f7ff bf34 	b.w	d924 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dabc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    dabc:	2100      	movs	r1, #0
    dabe:	f7ff bedd 	b.w	d87c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dac2:	2800      	cmp	r0, #0
    dac4:	db09      	blt.n	dada <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    dac6:	f000 021f 	and.w	r2, r0, #31
    daca:	2101      	movs	r1, #1
    dacc:	4091      	lsls	r1, r2
    dace:	0940      	lsrs	r0, r0, #5
    dad0:	0080      	lsls	r0, r0, #2
    dad2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dad6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dada:	4770      	bx	lr
    dadc:	2800      	cmp	r0, #0
    dade:	db0d      	blt.n	dafc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    dae0:	f000 021f 	and.w	r2, r0, #31
    dae4:	2101      	movs	r1, #1
    dae6:	4091      	lsls	r1, r2
    dae8:	0940      	lsrs	r0, r0, #5
    daea:	0080      	lsls	r0, r0, #2
    daec:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    daf0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    daf4:	f3bf 8f4f 	dsb	sy
    daf8:	f3bf 8f6f 	isb	sy
    dafc:	4770      	bx	lr
    dafe:	b510      	push	{r4, lr}
    db00:	200e      	movs	r0, #14
    db02:	f7ff ffeb 	bl	dadc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    db06:	200e      	movs	r0, #14
    db08:	f7ff ffdb 	bl	dac2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    db0c:	200f      	movs	r0, #15
    db0e:	f7ff ffe5 	bl	dadc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    db12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db16:	200f      	movs	r0, #15
    db18:	f7ff bfd3 	b.w	dac2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    db1c:	2800      	cmp	r0, #0
    db1e:	db09      	blt.n	db34 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    db20:	f000 021f 	and.w	r2, r0, #31
    db24:	2101      	movs	r1, #1
    db26:	4091      	lsls	r1, r2
    db28:	0940      	lsrs	r0, r0, #5
    db2a:	0080      	lsls	r0, r0, #2
    db2c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    db30:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    db34:	4770      	bx	lr
    db36:	5840      	ldr	r0, [r0, r1]
    db38:	2800      	cmp	r0, #0
    db3a:	d000      	beq.n	db3e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    db3c:	2001      	movs	r0, #1
    db3e:	4770      	bx	lr

0000db40 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    db40:	b510      	push	{r4, lr}
    db42:	4604      	mov	r4, r0
    db44:	4620      	mov	r0, r4
    db46:	f7f4 f95d 	bl	1e04 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    db4a:	2811      	cmp	r0, #17
    db4c:	d0fa      	beq.n	db44 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    db4e:	bd10      	pop	{r4, pc}

0000db50 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    db50:	b510      	push	{r4, lr}
    db52:	f7ff fff5 	bl	db40 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    db56:	2800      	cmp	r0, #0
    db58:	d003      	beq.n	db62 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    db5a:	21a0      	movs	r1, #160	; 0xa0
    db5c:	201d      	movs	r0, #29
    db5e:	f7f3 fc1f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db62:	bd10      	pop	{r4, pc}

0000db64 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    db64:	f7f4 baac 	b.w	20c0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000db68 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    db68:	f7f4 ba9a 	b.w	20a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000db6c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    db6c:	b510      	push	{r4, lr}
    db6e:	4050      	eors	r0, r2
    db70:	780a      	ldrb	r2, [r1, #0]
    db72:	781c      	ldrb	r4, [r3, #0]
    db74:	4062      	eors	r2, r4
    db76:	4410      	add	r0, r2
    db78:	784a      	ldrb	r2, [r1, #1]
    db7a:	785c      	ldrb	r4, [r3, #1]
    db7c:	4062      	eors	r2, r4
    db7e:	4410      	add	r0, r2
    db80:	788a      	ldrb	r2, [r1, #2]
    db82:	789c      	ldrb	r4, [r3, #2]
    db84:	4062      	eors	r2, r4
    db86:	4410      	add	r0, r2
    db88:	78ca      	ldrb	r2, [r1, #3]
    db8a:	78dc      	ldrb	r4, [r3, #3]
    db8c:	4062      	eors	r2, r4
    db8e:	4410      	add	r0, r2
    db90:	790a      	ldrb	r2, [r1, #4]
    db92:	791c      	ldrb	r4, [r3, #4]
    db94:	7949      	ldrb	r1, [r1, #5]
    db96:	4062      	eors	r2, r4
    db98:	4410      	add	r0, r2
    db9a:	795a      	ldrb	r2, [r3, #5]
    db9c:	4051      	eors	r1, r2
    db9e:	42c1      	cmn	r1, r0
    dba0:	d101      	bne.n	dba6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    dba2:	2001      	movs	r0, #1
    dba4:	bd10      	pop	{r4, pc}
    dba6:	2000      	movs	r0, #0
    dba8:	bd10      	pop	{r4, pc}

0000dbaa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dbaa:	b510      	push	{r4, lr}
    dbac:	2900      	cmp	r1, #0
    dbae:	4604      	mov	r4, r0
    dbb0:	f04f 0106 	mov.w	r1, #6
    dbb4:	d002      	beq.n	dbbc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dbb6:	f7f3 fc93 	bl	14e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dbba:	e001      	b.n	dbc0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dbbc:	f7f3 fc9e 	bl	14fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dbc0:	7960      	ldrb	r0, [r4, #5]
    dbc2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dbc6:	7160      	strb	r0, [r4, #5]
    dbc8:	bd10      	pop	{r4, pc}

0000dbca <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dbca:	4770      	bx	lr

0000dbcc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dbcc:	b530      	push	{r4, r5, lr}
    dbce:	460c      	mov	r4, r1
    dbd0:	4605      	mov	r5, r0
    dbd2:	b08d      	sub	sp, #52	; 0x34
    dbd4:	f04f 0103 	mov.w	r1, #3
    dbd8:	f104 0003 	add.w	r0, r4, #3
    dbdc:	b112      	cbz	r2, dbe4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dbde:	f7f3 fc7f 	bl	14e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dbe2:	e001      	b.n	dbe8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dbe4:	f7f3 fc8a 	bl	14fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dbe8:	7960      	ldrb	r0, [r4, #5]
    dbea:	220d      	movs	r2, #13
    dbec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dbf0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dbf4:	7160      	strb	r0, [r4, #5]
    dbf6:	2100      	movs	r1, #0
    dbf8:	a804      	add	r0, sp, #16
    dbfa:	f003 f953 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dbfe:	78e0      	ldrb	r0, [r4, #3]
    dc00:	f88d 001f 	strb.w	r0, [sp, #31]
    dc04:	7920      	ldrb	r0, [r4, #4]
    dc06:	f88d 001e 	strb.w	r0, [sp, #30]
    dc0a:	7960      	ldrb	r0, [r4, #5]
    dc0c:	f88d 001d 	strb.w	r0, [sp, #29]
    dc10:	2210      	movs	r2, #16
    dc12:	4629      	mov	r1, r5
    dc14:	4668      	mov	r0, sp
    dc16:	f003 f8cb 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc1a:	4668      	mov	r0, sp
    dc1c:	f7ff ff98 	bl	db50 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dc20:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dc24:	7020      	strb	r0, [r4, #0]
    dc26:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dc2a:	7060      	strb	r0, [r4, #1]
    dc2c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dc30:	70a0      	strb	r0, [r4, #2]
    dc32:	b00d      	add	sp, #52	; 0x34
    dc34:	bd30      	pop	{r4, r5, pc}

0000dc36 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    dc36:	f7f4 bdbb 	b.w	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    dc3a:	07c1      	lsls	r1, r0, #31
    dc3c:	d001      	beq.n	dc42 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    dc3e:	2001      	movs	r0, #1
    dc40:	4770      	bx	lr
    dc42:	0780      	lsls	r0, r0, #30
    dc44:	d501      	bpl.n	dc4a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    dc46:	2002      	movs	r0, #2
    dc48:	4770      	bx	lr
    dc4a:	2000      	movs	r0, #0
    dc4c:	4770      	bx	lr
    dc4e:	b510      	push	{r4, lr}
    dc50:	2801      	cmp	r0, #1
    dc52:	d008      	beq.n	dc66 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    dc54:	2802      	cmp	r0, #2
    dc56:	d004      	beq.n	dc62 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    dc58:	f240 4122 	movw	r1, #1058	; 0x422
    dc5c:	2006      	movs	r0, #6
    dc5e:	f7f3 fb9f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc62:	2001      	movs	r0, #1
    dc64:	bd10      	pop	{r4, pc}
    dc66:	2000      	movs	r0, #0
    dc68:	bd10      	pop	{r4, pc}
    dc6a:	2900      	cmp	r1, #0
    dc6c:	d004      	beq.n	dc78 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    dc6e:	2801      	cmp	r0, #1
    dc70:	d003      	beq.n	dc7a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dc72:	2901      	cmp	r1, #1
    dc74:	d001      	beq.n	dc7a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dc76:	2002      	movs	r0, #2
    dc78:	4770      	bx	lr
    dc7a:	2001      	movs	r0, #1
    dc7c:	4770      	bx	lr
    dc7e:	f7ff bc95 	b.w	d5ac <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dc82 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dc82:	2101      	movs	r1, #1
    dc84:	f7f5 b89e 	b.w	2dc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000dc88 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dc88:	b510      	push	{r4, lr}
    dc8a:	f002 fe75 	bl	10978 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dc8e:	b118      	cbz	r0, dc98 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc94:	f7f9 beca 	b.w	7a2c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dc98:	20ff      	movs	r0, #255	; 0xff
    dc9a:	bd10      	pop	{r4, pc}

0000dc9c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dc9c:	b510      	push	{r4, lr}
    dc9e:	f7f5 f8d9 	bl	2e54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dca2:	2810      	cmp	r0, #16
    dca4:	d003      	beq.n	dcae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dca6:	f7f5 f8a5 	bl	2df4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    dcaa:	2810      	cmp	r0, #16
    dcac:	d100      	bne.n	dcb0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    dcae:	2008      	movs	r0, #8
    dcb0:	bd10      	pop	{r4, pc}

0000dcb2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    dcb2:	b510      	push	{r4, lr}
    dcb4:	f7f5 f8ce 	bl	2e54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dcb8:	2810      	cmp	r0, #16
    dcba:	d003      	beq.n	dcc4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    dcbc:	f7f5 f928 	bl	2f10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    dcc0:	2001      	movs	r0, #1
    dcc2:	bd10      	pop	{r4, pc}
    dcc4:	2000      	movs	r0, #0
    dcc6:	bd10      	pop	{r4, pc}

0000dcc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dcc8:	b570      	push	{r4, r5, r6, lr}
    dcca:	460e      	mov	r6, r1
    dccc:	b08c      	sub	sp, #48	; 0x30
    dcce:	4614      	mov	r4, r2
    dcd0:	4601      	mov	r1, r0
    dcd2:	461d      	mov	r5, r3
    dcd4:	2210      	movs	r2, #16
    dcd6:	4668      	mov	r0, sp
    dcd8:	f000 f938 	bl	df4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dcdc:	2210      	movs	r2, #16
    dcde:	4631      	mov	r1, r6
    dce0:	a804      	add	r0, sp, #16
    dce2:	f000 f933 	bl	df4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dce6:	4668      	mov	r0, sp
    dce8:	f7ff ff32 	bl	db50 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dcec:	a908      	add	r1, sp, #32
    dcee:	f04f 0210 	mov.w	r2, #16
    dcf2:	4628      	mov	r0, r5
    dcf4:	b11c      	cbz	r4, dcfe <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dcf6:	f000 f929 	bl	df4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dcfa:	b00c      	add	sp, #48	; 0x30
    dcfc:	bd70      	pop	{r4, r5, r6, pc}
    dcfe:	f003 f857 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd02:	e7fa      	b.n	dcfa <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    dd04:	b510      	push	{r4, lr}
    dd06:	460c      	mov	r4, r1
    dd08:	2100      	movs	r1, #0
    dd0a:	f7ff fd80 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dd0e:	6060      	str	r0, [r4, #4]
    dd10:	b118      	cbz	r0, dd1a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dd12:	2001      	movs	r0, #1
    dd14:	7020      	strb	r0, [r4, #0]
    dd16:	2000      	movs	r0, #0
    dd18:	bd10      	pop	{r4, pc}
    dd1a:	2002      	movs	r0, #2
    dd1c:	bd10      	pop	{r4, pc}

0000dd1e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dd1e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd22:	4348      	muls	r0, r1
    dd24:	4770      	bx	lr

0000dd26 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    dd26:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd2a:	fbb0 f0f1 	udiv	r0, r0, r1
    dd2e:	b280      	uxth	r0, r0
    dd30:	4770      	bx	lr

0000dd32 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    dd32:	b570      	push	{r4, r5, r6, lr}
    dd34:	4604      	mov	r4, r0
    dd36:	4290      	cmp	r0, r2
    dd38:	d20b      	bcs.n	dd52 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    dd3a:	1b10      	subs	r0, r2, r4
    dd3c:	2865      	cmp	r0, #101	; 0x65
    dd3e:	d200      	bcs.n	dd42 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    dd40:	2065      	movs	r0, #101	; 0x65
    dd42:	1825      	adds	r5, r4, r0
    dd44:	428d      	cmp	r5, r1
    dd46:	d803      	bhi.n	dd50 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    dd48:	2103      	movs	r1, #3
    dd4a:	f7fc f8ef 	bl	9f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    dd4e:	b108      	cbz	r0, dd54 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    dd50:	4620      	mov	r0, r4
    dd52:	bd70      	pop	{r4, r5, r6, pc}
    dd54:	4628      	mov	r0, r5
    dd56:	bd70      	pop	{r4, r5, r6, pc}

0000dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dd58:	b510      	push	{r4, lr}
    dd5a:	f1a2 0310 	sub.w	r3, r2, #16
    dd5e:	290d      	cmp	r1, #13
    dd60:	d24d      	bcs.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd62:	e8df f001 	tbb	[pc, r1]
    dd66:	0907      	.short	0x0907
    dd68:	1d1a150e 	.word	0x1d1a150e
    dd6c:	4e2c2921 	.word	0x4e2c2921
    dd70:	0048362f 	.word	0x0048362f
    dd74:	b3f2      	cbz	r2, ddf4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    dd76:	e042      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd78:	2a06      	cmp	r2, #6
    dd7a:	d03e      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd7c:	2a07      	cmp	r2, #7
    dd7e:	d03c      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd80:	e03d      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd82:	2a0b      	cmp	r2, #11
    dd84:	d039      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd86:	2a0c      	cmp	r2, #12
    dd88:	d037      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd8a:	2a0a      	cmp	r2, #10
    dd8c:	d035      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd8e:	e036      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd90:	2a0d      	cmp	r2, #13
    dd92:	d032      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd94:	2a0e      	cmp	r2, #14
    dd96:	d030      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd98:	e031      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd9a:	2b0c      	cmp	r3, #12
    dd9c:	d92d      	bls.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd9e:	e02e      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dda0:	3a11      	subs	r2, #17
    dda2:	2a0b      	cmp	r2, #11
    dda4:	d929      	bls.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dda6:	e02a      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dda8:	2b03      	cmp	r3, #3
    ddaa:	d926      	bls.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    ddb0:	b1f8      	cbz	r0, ddf2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    ddb2:	2a1c      	cmp	r2, #28
    ddb4:	d921      	bls.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddb6:	e022      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddb8:	2a04      	cmp	r2, #4
    ddba:	d01e      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddbc:	e01f      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddbe:	2a01      	cmp	r2, #1
    ddc0:	d01b      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddc2:	e01c      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddc4:	2a1d      	cmp	r2, #29
    ddc6:	d018      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddc8:	2a1e      	cmp	r2, #30
    ddca:	d016      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddcc:	2a1f      	cmp	r2, #31
    ddce:	d014      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddd0:	e015      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddd2:	2a20      	cmp	r2, #32
    ddd4:	d011      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddd6:	2a21      	cmp	r2, #33	; 0x21
    ddd8:	d00f      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddda:	2a22      	cmp	r2, #34	; 0x22
    dddc:	d00d      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddde:	2a23      	cmp	r2, #35	; 0x23
    dde0:	d00b      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dde2:	2a24      	cmp	r2, #36	; 0x24
    dde4:	d009      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dde6:	2a25      	cmp	r2, #37	; 0x25
    dde8:	d007      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddea:	2a26      	cmp	r2, #38	; 0x26
    ddec:	d005      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddee:	2a2e      	cmp	r2, #46	; 0x2e
    ddf0:	d003      	beq.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddf2:	e004      	b.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddf4:	e001      	b.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddf6:	2a28      	cmp	r2, #40	; 0x28
    ddf8:	d101      	bne.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddfa:	2001      	movs	r0, #1
    ddfc:	bd10      	pop	{r4, pc}
    ddfe:	2000      	movs	r0, #0
    de00:	bd10      	pop	{r4, pc}
    de02:	2a0f      	cmp	r2, #15
    de04:	d1fb      	bne.n	ddfe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de06:	e7f8      	b.n	ddfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000de08 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    de08:	280b      	cmp	r0, #11
    de0a:	d019      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de0c:	280c      	cmp	r0, #12
    de0e:	d017      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de10:	280a      	cmp	r0, #10
    de12:	d015      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de14:	280d      	cmp	r0, #13
    de16:	d013      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de18:	280e      	cmp	r0, #14
    de1a:	d011      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de1c:	2820      	cmp	r0, #32
    de1e:	d00f      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de20:	2821      	cmp	r0, #33	; 0x21
    de22:	d00d      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de24:	2822      	cmp	r0, #34	; 0x22
    de26:	d00b      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de28:	2823      	cmp	r0, #35	; 0x23
    de2a:	d009      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de2c:	2824      	cmp	r0, #36	; 0x24
    de2e:	d007      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de30:	2825      	cmp	r0, #37	; 0x25
    de32:	d005      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de34:	2826      	cmp	r0, #38	; 0x26
    de36:	d003      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de38:	282e      	cmp	r0, #46	; 0x2e
    de3a:	d001      	beq.n	de40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    de3c:	2000      	movs	r0, #0
    de3e:	4770      	bx	lr
    de40:	2001      	movs	r0, #1
    de42:	4770      	bx	lr

0000de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    de44:	f011 0f0c 	tst.w	r1, #12
    de48:	d018      	beq.n	de7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    de4a:	074a      	lsls	r2, r1, #29
    de4c:	f44f 7116 	mov.w	r1, #600	; 0x258
    de50:	2a00      	cmp	r2, #0
    de52:	da02      	bge.n	de5a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    de54:	f04f 0210 	mov.w	r2, #16
    de58:	e001      	b.n	de5e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    de5a:	f04f 0240 	mov.w	r2, #64	; 0x40
    de5e:	da01      	bge.n	de64 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    de60:	f04f 0196 	mov.w	r1, #150	; 0x96
    de64:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    de68:	eba0 0301 	sub.w	r3, r0, r1
    de6c:	4288      	cmp	r0, r1
    de6e:	d903      	bls.n	de78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de70:	fb93 f0f2 	sdiv	r0, r3, r2
    de74:	b280      	uxth	r0, r0
    de76:	4770      	bx	lr
    de78:	2000      	movs	r0, #0
    de7a:	4770      	bx	lr
    de7c:	2902      	cmp	r1, #2
    de7e:	d008      	beq.n	de92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    de80:	2870      	cmp	r0, #112	; 0x70
    de82:	d9f9      	bls.n	de78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de84:	3870      	subs	r0, #112	; 0x70
    de86:	17c1      	asrs	r1, r0, #31
    de88:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    de8c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    de90:	4770      	bx	lr
    de92:	283c      	cmp	r0, #60	; 0x3c
    de94:	d9f0      	bls.n	de78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de96:	383c      	subs	r0, #60	; 0x3c
    de98:	17c1      	asrs	r1, r0, #31
    de9a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    de9e:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dea2:	4770      	bx	lr

0000dea4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dea4:	6809      	ldr	r1, [r1, #0]
    dea6:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    deaa:	4770      	bx	lr

0000deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    deac:	07c1      	lsls	r1, r0, #31
    deae:	d001      	beq.n	deb4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    deb0:	2001      	movs	r0, #1
    deb2:	4770      	bx	lr
    deb4:	0781      	lsls	r1, r0, #30
    deb6:	d501      	bpl.n	debc <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    deb8:	2002      	movs	r0, #2
    deba:	4770      	bx	lr
    debc:	0740      	lsls	r0, r0, #29
    debe:	d501      	bpl.n	dec4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    dec0:	2008      	movs	r0, #8
    dec2:	4770      	bx	lr
    dec4:	2000      	movs	r0, #0
    dec6:	4770      	bx	lr

0000dec8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dec8:	b510      	push	{r4, lr}
    deca:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dece:	2901      	cmp	r1, #1
    ded0:	d006      	beq.n	dee0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ded2:	2902      	cmp	r1, #2
    ded4:	d005      	beq.n	dee2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ded6:	f240 31a1 	movw	r1, #929	; 0x3a1
    deda:	2029      	movs	r0, #41	; 0x29
    dedc:	f7f3 fa60 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dee0:	b108      	cbz	r0, dee6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dee2:	4610      	mov	r0, r2
    dee4:	bd10      	pop	{r4, pc}
    dee6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    deea:	bd10      	pop	{r4, pc}

0000deec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    def0:	4607      	mov	r7, r0
    def2:	460e      	mov	r6, r1
    def4:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    def8:	f7fc fbda 	bl	a6b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    defc:	b198      	cbz	r0, df26 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    defe:	b31e      	cbz	r6, df48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    df04:	1b40      	subs	r0, r0, r5
    df06:	2300      	movs	r3, #0
    df08:	eb61 0104 	sbc.w	r1, r1, r4
    df0c:	461a      	mov	r2, r3
    df0e:	1a1b      	subs	r3, r3, r0
    df10:	418a      	sbcs	r2, r1
    df12:	da19      	bge.n	df48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df14:	1c42      	adds	r2, r0, #1
    df16:	f171 0100 	sbcs.w	r1, r1, #0
    df1a:	db07      	blt.n	df2c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    df1c:	f240 211b 	movw	r1, #539	; 0x21b
    df20:	2029      	movs	r0, #41	; 0x29
    df22:	f7f3 fa3d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df26:	f240 2111 	movw	r1, #529	; 0x211
    df2a:	e7f9      	b.n	df20 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    df2c:	4430      	add	r0, r6
    df2e:	1e40      	subs	r0, r0, #1
    df30:	fbb0 f1f6 	udiv	r1, r0, r6
    df34:	fb01 f006 	mul.w	r0, r1, r6
    df38:	1828      	adds	r0, r5, r0
    df3a:	f144 0400 	adc.w	r4, r4, #0
    df3e:	e9c7 0404 	strd	r0, r4, [r7, #16]
    df42:	4608      	mov	r0, r1
    df44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df48:	2000      	movs	r0, #0
    df4a:	e7fb      	b.n	df44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000df4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    df4c:	b530      	push	{r4, r5, lr}
    df4e:	4613      	mov	r3, r2
    df50:	e006      	b.n	df60 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    df52:	18cc      	adds	r4, r1, r3
    df54:	1ad5      	subs	r5, r2, r3
    df56:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    df5a:	1e5b      	subs	r3, r3, #1
    df5c:	5544      	strb	r4, [r0, r5]
    df5e:	b2db      	uxtb	r3, r3
    df60:	2b00      	cmp	r3, #0
    df62:	d1f6      	bne.n	df52 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    df64:	bd30      	pop	{r4, r5, pc}

0000df66 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    df66:	2300      	movs	r3, #0
    df68:	6403      	str	r3, [r0, #64]	; 0x40
    df6a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    df6e:	f240 2371 	movw	r3, #625	; 0x271
    df72:	435a      	muls	r2, r3
    df74:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    df78:	1e52      	subs	r2, r2, #1
    df7a:	fbb2 f1f1 	udiv	r1, r2, r1
    df7e:	6441      	str	r1, [r0, #68]	; 0x44
    df80:	4770      	bx	lr

0000df82 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    df82:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    df86:	4607      	mov	r7, r0
    df88:	4690      	mov	r8, r2
    df8a:	468b      	mov	fp, r1
    df8c:	2601      	movs	r6, #1
    df8e:	4608      	mov	r0, r1
    df90:	f000 f9e1 	bl	e356 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    df94:	4682      	mov	sl, r0
    df96:	4658      	mov	r0, fp
    df98:	f000 f9df 	bl	e35a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    df9c:	4681      	mov	r9, r0
    df9e:	f7ff ff85 	bl	deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dfa2:	4604      	mov	r4, r0
    dfa4:	4650      	mov	r0, sl
    dfa6:	f7ff ff81 	bl	deac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dfaa:	4605      	mov	r5, r0
    dfac:	ea54 0005 	orrs.w	r0, r4, r5
    dfb0:	d100      	bne.n	dfb4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    dfb2:	2600      	movs	r6, #0
    dfb4:	f7f9 fcbc 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    dfb8:	ea10 0f09 	tst.w	r0, r9
    dfbc:	d100      	bne.n	dfc0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    dfbe:	2400      	movs	r4, #0
    dfc0:	f7f9 fcb6 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    dfc4:	ea10 0f0a 	tst.w	r0, sl
    dfc8:	d100      	bne.n	dfcc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    dfca:	2500      	movs	r5, #0
    dfcc:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    dfd0:	42a0      	cmp	r0, r4
    dfd2:	d100      	bne.n	dfd6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    dfd4:	2400      	movs	r4, #0
    dfd6:	f888 4000 	strb.w	r4, [r8]
    dfda:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    dfde:	42a8      	cmp	r0, r5
    dfe0:	d100      	bne.n	dfe4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    dfe2:	2500      	movs	r5, #0
    dfe4:	f888 5001 	strb.w	r5, [r8, #1]
    dfe8:	b974      	cbnz	r4, e008 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dfea:	b96d      	cbnz	r5, e008 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dfec:	4658      	mov	r0, fp
    dfee:	f000 f9a0 	bl	e332 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    dff2:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    dff6:	1a40      	subs	r0, r0, r1
    dff8:	b200      	sxth	r0, r0
    dffa:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dffe:	4288      	cmp	r0, r1
    e000:	dc01      	bgt.n	e006 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e002:	2800      	cmp	r0, #0
    e004:	dc00      	bgt.n	e008 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e006:	2600      	movs	r6, #0
    e008:	4630      	mov	r0, r6
    e00a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e00e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e00e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e012:	4348      	muls	r0, r1
    e014:	4770      	bx	lr

0000e016 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e016:	f240 2171 	movw	r1, #625	; 0x271
    e01a:	fb10 f001 	smulbb	r0, r0, r1
    e01e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e022:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e026:	4770      	bx	lr

0000e028 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e028:	b510      	push	{r4, lr}
    e02a:	2300      	movs	r3, #0
    e02c:	461a      	mov	r2, r3
    e02e:	e003      	b.n	e038 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e030:	5c84      	ldrb	r4, [r0, r2]
    e032:	4323      	orrs	r3, r4
    e034:	1c52      	adds	r2, r2, #1
    e036:	b2d2      	uxtb	r2, r2
    e038:	428a      	cmp	r2, r1
    e03a:	d3f9      	bcc.n	e030 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e03c:	b10b      	cbz	r3, e042 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e03e:	2000      	movs	r0, #0
    e040:	bd10      	pop	{r4, pc}
    e042:	2001      	movs	r0, #1
    e044:	bd10      	pop	{r4, pc}
    e046:	4401      	add	r1, r0
    e048:	2914      	cmp	r1, #20
    e04a:	dd01      	ble.n	e050 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    e04c:	2014      	movs	r0, #20
    e04e:	4770      	bx	lr
    e050:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e054:	4281      	cmp	r1, r0
    e056:	dbfa      	blt.n	e04e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x26>
    e058:	b248      	sxtb	r0, r1
    e05a:	4770      	bx	lr

0000e05c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e05c:	b570      	push	{r4, r5, r6, lr}
    e05e:	4605      	mov	r5, r0
    e060:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e064:	b286      	uxth	r6, r0
    e066:	4610      	mov	r0, r2
    e068:	7aec      	ldrb	r4, [r5, #11]
    e06a:	4631      	mov	r1, r6
    e06c:	f000 f863 	bl	e136 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e070:	4070      	eors	r0, r6
    e072:	2125      	movs	r1, #37	; 0x25
    e074:	fbb0 f2f1 	udiv	r2, r0, r1
    e078:	fb01 0112 	mls	r1, r1, r2, r0
    e07c:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e080:	f001 0307 	and.w	r3, r1, #7
    e084:	7852      	ldrb	r2, [r2, #1]
    e086:	2601      	movs	r6, #1
    e088:	409e      	lsls	r6, r3
    e08a:	4232      	tst	r2, r6
    e08c:	d001      	beq.n	e092 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e08e:	4608      	mov	r0, r1
    e090:	bd70      	pop	{r4, r5, r6, pc}
    e092:	4344      	muls	r4, r0
    e094:	0c21      	lsrs	r1, r4, #16
    e096:	4628      	mov	r0, r5
    e098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e09c:	f7f5 b840 	b.w	3120 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xbc>

0000e0a0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e0a0:	b510      	push	{r4, lr}
    e0a2:	4604      	mov	r4, r0
    e0a4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e0a8:	b108      	cbz	r0, e0ae <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e0aa:	2825      	cmp	r0, #37	; 0x25
    e0ac:	d901      	bls.n	e0b2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e0ae:	2012      	movs	r0, #18
    e0b0:	bd10      	pop	{r4, pc}
    e0b2:	b132      	cbz	r2, e0c2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e0b4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e0b8:	b128      	cbz	r0, e0c6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e0ba:	2801      	cmp	r0, #1
    e0bc:	d009      	beq.n	e0d2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e0be:	201f      	movs	r0, #31
    e0c0:	bd10      	pop	{r4, pc}
    e0c2:	2000      	movs	r0, #0
    e0c4:	bd10      	pop	{r4, pc}
    e0c6:	4620      	mov	r0, r4
    e0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0cc:	4611      	mov	r1, r2
    e0ce:	f7f4 bfdf 	b.w	3090 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x2c>
    e0d2:	8aa2      	ldrh	r2, [r4, #20]
    e0d4:	6949      	ldr	r1, [r1, #20]
    e0d6:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e0da:	f7ff ffbf 	bl	e05c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e0de:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e0e2:	e7ee      	b.n	e0c2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e0e4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e0e4:	b570      	push	{r4, r5, r6, lr}
    e0e6:	4604      	mov	r4, r0
    e0e8:	1c40      	adds	r0, r0, #1
    e0ea:	4288      	cmp	r0, r1
    e0ec:	d004      	beq.n	e0f8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e0ee:	6808      	ldr	r0, [r1, #0]
    e0f0:	f8c4 0001 	str.w	r0, [r4, #1]
    e0f4:	7908      	ldrb	r0, [r1, #4]
    e0f6:	7160      	strb	r0, [r4, #5]
    e0f8:	7960      	ldrb	r0, [r4, #5]
    e0fa:	f000 001f 	and.w	r0, r0, #31
    e0fe:	7160      	strb	r0, [r4, #5]
    e100:	2000      	movs	r0, #0
    e102:	72e0      	strb	r0, [r4, #11]
    e104:	4605      	mov	r5, r0
    e106:	1966      	adds	r6, r4, r5
    e108:	7870      	ldrb	r0, [r6, #1]
    e10a:	f000 fb4a 	bl	e7a2 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e10e:	71b0      	strb	r0, [r6, #6]
    e110:	7ae1      	ldrb	r1, [r4, #11]
    e112:	1c6d      	adds	r5, r5, #1
    e114:	4408      	add	r0, r1
    e116:	b2ed      	uxtb	r5, r5
    e118:	72e0      	strb	r0, [r4, #11]
    e11a:	2d05      	cmp	r5, #5
    e11c:	d3f3      	bcc.n	e106 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e11e:	bd70      	pop	{r4, r5, r6, pc}
    e120:	b2c1      	uxtb	r1, r0
    e122:	fa91 f1a1 	rbit	r1, r1
    e126:	0a00      	lsrs	r0, r0, #8
    e128:	0e09      	lsrs	r1, r1, #24
    e12a:	fa90 f0a0 	rbit	r0, r0
    e12e:	0e00      	lsrs	r0, r0, #24
    e130:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e134:	4770      	bx	lr
    e136:	b570      	push	{r4, r5, r6, lr}
    e138:	460d      	mov	r5, r1
    e13a:	4048      	eors	r0, r1
    e13c:	2400      	movs	r4, #0
    e13e:	f7ff ffef 	bl	e120 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e142:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e146:	1c64      	adds	r4, r4, #1
    e148:	4428      	add	r0, r5
    e14a:	b2e4      	uxtb	r4, r4
    e14c:	b280      	uxth	r0, r0
    e14e:	2c03      	cmp	r4, #3
    e150:	d3f5      	bcc.n	e13e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e152:	bd70      	pop	{r4, r5, r6, pc}

0000e154 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e154:	7802      	ldrb	r2, [r0, #0]
    e156:	f002 020f 	and.w	r2, r2, #15
    e15a:	2a03      	cmp	r2, #3
    e15c:	d003      	beq.n	e166 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    e15e:	2a05      	cmp	r2, #5
    e160:	d104      	bne.n	e16c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    e162:	f000 b92e 	b.w	e3c2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    e166:	7840      	ldrb	r0, [r0, #1]
    e168:	280c      	cmp	r0, #12
    e16a:	d001      	beq.n	e170 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    e16c:	2000      	movs	r0, #0
    e16e:	4770      	bx	lr
    e170:	2001      	movs	r0, #1
    e172:	4770      	bx	lr

0000e174 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e174:	b570      	push	{r4, r5, r6, lr}
    e176:	4614      	mov	r4, r2
    e178:	4605      	mov	r5, r0
    e17a:	2a1f      	cmp	r2, #31
    e17c:	d903      	bls.n	e186 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e17e:	21ee      	movs	r1, #238	; 0xee
    e180:	202a      	movs	r0, #42	; 0x2a
    e182:	f7f3 f90d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e186:	f105 0009 	add.w	r0, r5, #9
    e18a:	f002 fe11 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e18e:	1da4      	adds	r4, r4, #6
    e190:	706c      	strb	r4, [r5, #1]
    e192:	bd70      	pop	{r4, r5, r6, pc}

0000e194 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e194:	b510      	push	{r4, lr}
    e196:	7802      	ldrb	r2, [r0, #0]
    e198:	f001 030f 	and.w	r3, r1, #15
    e19c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e1a0:	431a      	orrs	r2, r3
    e1a2:	7002      	strb	r2, [r0, #0]
    e1a4:	2907      	cmp	r1, #7
    e1a6:	d20c      	bcs.n	e1c2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e1a8:	e8df f001 	tbb	[pc, r1]
    e1ac:	06040604 	.word	0x06040604
    e1b0:	00040804 	.word	0x00040804
    e1b4:	2106      	movs	r1, #6
    e1b6:	e002      	b.n	e1be <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e1b8:	210c      	movs	r1, #12
    e1ba:	e000      	b.n	e1be <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e1bc:	2122      	movs	r1, #34	; 0x22
    e1be:	7041      	strb	r1, [r0, #1]
    e1c0:	bd10      	pop	{r4, pc}
    e1c2:	21a8      	movs	r1, #168	; 0xa8
    e1c4:	202a      	movs	r0, #42	; 0x2a
    e1c6:	f7f3 f8eb 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e1ca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e1ca:	680a      	ldr	r2, [r1, #0]
    e1cc:	f840 2f09 	str.w	r2, [r0, #9]!
    e1d0:	8889      	ldrh	r1, [r1, #4]
    e1d2:	8081      	strh	r1, [r0, #4]
    e1d4:	4770      	bx	lr

0000e1d6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e1d6:	7802      	ldrb	r2, [r0, #0]
    e1d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e1dc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e1e0:	7002      	strb	r2, [r0, #0]
    e1e2:	4770      	bx	lr

0000e1e4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e1e4:	680a      	ldr	r2, [r1, #0]
    e1e6:	f840 2f03 	str.w	r2, [r0, #3]!
    e1ea:	8889      	ldrh	r1, [r1, #4]
    e1ec:	8081      	strh	r1, [r0, #4]
    e1ee:	4770      	bx	lr

0000e1f0 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e1f0:	7802      	ldrb	r2, [r0, #0]
    e1f2:	2340      	movs	r3, #64	; 0x40
    e1f4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e1f8:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e1fc:	430a      	orrs	r2, r1
    e1fe:	7002      	strb	r2, [r0, #0]
    e200:	4770      	bx	lr

0000e202 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e202:	b570      	push	{r4, r5, r6, lr}
    e204:	4614      	mov	r4, r2
    e206:	4605      	mov	r5, r0
    e208:	2a1f      	cmp	r2, #31
    e20a:	d904      	bls.n	e216 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e20c:	f44f 7188 	mov.w	r1, #272	; 0x110
    e210:	202a      	movs	r0, #42	; 0x2a
    e212:	f7f3 f8c5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e216:	f105 0009 	add.w	r0, r5, #9
    e21a:	f002 fdc9 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e21e:	1da4      	adds	r4, r4, #6
    e220:	706c      	strb	r4, [r5, #1]
    e222:	bd70      	pop	{r4, r5, r6, pc}

0000e224 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e224:	6842      	ldr	r2, [r0, #4]
    e226:	600a      	str	r2, [r1, #0]
    e228:	7a00      	ldrb	r0, [r0, #8]
    e22a:	7108      	strb	r0, [r1, #4]
    e22c:	4770      	bx	lr

0000e22e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e22e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e232:	4770      	bx	lr

0000e234 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e234:	b570      	push	{r4, r5, r6, lr}
    e236:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e23a:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e23e:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e242:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e246:	88c0      	ldrh	r0, [r0, #6]
    e248:	b131      	cbz	r1, e258 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e24a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e24e:	d903      	bls.n	e258 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e250:	f640 5107 	movw	r1, #3335	; 0xd07
    e254:	428a      	cmp	r2, r1
    e256:	d90b      	bls.n	e270 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e258:	1f91      	subs	r1, r2, #6
    e25a:	f640 467a 	movw	r6, #3194	; 0xc7a
    e25e:	42b1      	cmp	r1, r6
    e260:	d810      	bhi.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e262:	b17b      	cbz	r3, e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e264:	2b08      	cmp	r3, #8
    e266:	d80d      	bhi.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e268:	4293      	cmp	r3, r2
    e26a:	d20b      	bcs.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e26c:	4295      	cmp	r5, r2
    e26e:	d809      	bhi.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e270:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e274:	d206      	bcs.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e276:	f640 4176 	movw	r1, #3190	; 0xc76
    e27a:	380a      	subs	r0, #10
    e27c:	4288      	cmp	r0, r1
    e27e:	d801      	bhi.n	e284 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e280:	2001      	movs	r0, #1
    e282:	bd70      	pop	{r4, r5, r6, pc}
    e284:	2000      	movs	r0, #0
    e286:	bd70      	pop	{r4, r5, r6, pc}

0000e288 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e288:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e28c:	4770      	bx	lr

0000e28e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e28e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e292:	4770      	bx	lr

0000e294 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e294:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e298:	4770      	bx	lr

0000e29a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e29a:	b510      	push	{r4, lr}
    e29c:	29fb      	cmp	r1, #251	; 0xfb
    e29e:	d904      	bls.n	e2aa <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e2a0:	f240 61a9 	movw	r1, #1705	; 0x6a9
    e2a4:	202a      	movs	r0, #42	; 0x2a
    e2a6:	f7f3 f87b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2aa:	7041      	strb	r1, [r0, #1]
    e2ac:	bd10      	pop	{r4, pc}

0000e2ae <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e2ae:	8980      	ldrh	r0, [r0, #12]
    e2b0:	8008      	strh	r0, [r1, #0]
    e2b2:	4770      	bx	lr

0000e2b4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e2b4:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e2b8:	6008      	str	r0, [r1, #0]
    e2ba:	4770      	bx	lr

0000e2bc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e2bc:	6842      	ldr	r2, [r0, #4]
    e2be:	600a      	str	r2, [r1, #0]
    e2c0:	6880      	ldr	r0, [r0, #8]
    e2c2:	6048      	str	r0, [r1, #4]
    e2c4:	4770      	bx	lr

0000e2c6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e2c6:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e2ca:	600a      	str	r2, [r1, #0]
    e2cc:	6840      	ldr	r0, [r0, #4]
    e2ce:	6048      	str	r0, [r1, #4]
    e2d0:	4770      	bx	lr

0000e2d2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e2d2:	6809      	ldr	r1, [r1, #0]
    e2d4:	60c1      	str	r1, [r0, #12]
    e2d6:	4770      	bx	lr

0000e2d8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e2d8:	680a      	ldr	r2, [r1, #0]
    e2da:	6042      	str	r2, [r0, #4]
    e2dc:	6849      	ldr	r1, [r1, #4]
    e2de:	6081      	str	r1, [r0, #8]
    e2e0:	4770      	bx	lr

0000e2e2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e2e2:	7800      	ldrb	r0, [r0, #0]
    e2e4:	f000 0003 	and.w	r0, r0, #3
    e2e8:	4770      	bx	lr

0000e2ea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e2ea:	8880      	ldrh	r0, [r0, #4]
    e2ec:	4770      	bx	lr

0000e2ee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e2ee:	88c0      	ldrh	r0, [r0, #6]
    e2f0:	4770      	bx	lr

0000e2f2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e2f2:	8900      	ldrh	r0, [r0, #8]
    e2f4:	4770      	bx	lr

0000e2f6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e2f6:	8940      	ldrh	r0, [r0, #10]
    e2f8:	4770      	bx	lr

0000e2fa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e2fa:	8901      	ldrh	r1, [r0, #8]
    e2fc:	291b      	cmp	r1, #27
    e2fe:	d30c      	bcc.n	e31a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e300:	8941      	ldrh	r1, [r0, #10]
    e302:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e306:	4291      	cmp	r1, r2
    e308:	d307      	bcc.n	e31a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e30a:	8881      	ldrh	r1, [r0, #4]
    e30c:	291b      	cmp	r1, #27
    e30e:	d304      	bcc.n	e31a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e310:	88c0      	ldrh	r0, [r0, #6]
    e312:	4290      	cmp	r0, r2
    e314:	d301      	bcc.n	e31a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e316:	2001      	movs	r0, #1
    e318:	4770      	bx	lr
    e31a:	2000      	movs	r0, #0
    e31c:	4770      	bx	lr

0000e31e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e31e:	7901      	ldrb	r1, [r0, #4]
    e320:	0749      	lsls	r1, r1, #29
    e322:	d004      	beq.n	e32e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e324:	7940      	ldrb	r0, [r0, #5]
    e326:	0740      	lsls	r0, r0, #29
    e328:	d001      	beq.n	e32e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e32a:	2001      	movs	r0, #1
    e32c:	4770      	bx	lr
    e32e:	2000      	movs	r0, #0
    e330:	4770      	bx	lr

0000e332 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e332:	88c0      	ldrh	r0, [r0, #6]
    e334:	4770      	bx	lr

0000e336 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e336:	7901      	ldrb	r1, [r0, #4]
    e338:	7940      	ldrb	r0, [r0, #5]
    e33a:	f001 0107 	and.w	r1, r1, #7
    e33e:	1e4a      	subs	r2, r1, #1
    e340:	f000 0007 	and.w	r0, r0, #7
    e344:	4011      	ands	r1, r2
    e346:	1e42      	subs	r2, r0, #1
    e348:	4010      	ands	r0, r2
    e34a:	4301      	orrs	r1, r0
    e34c:	d001      	beq.n	e352 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e34e:	2000      	movs	r0, #0
    e350:	4770      	bx	lr
    e352:	2001      	movs	r0, #1
    e354:	4770      	bx	lr

0000e356 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e356:	7900      	ldrb	r0, [r0, #4]
    e358:	4770      	bx	lr

0000e35a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e35a:	7940      	ldrb	r0, [r0, #5]
    e35c:	4770      	bx	lr

0000e35e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e35e:	7900      	ldrb	r0, [r0, #4]
    e360:	4770      	bx	lr

0000e362 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e362:	7101      	strb	r1, [r0, #4]
    e364:	4770      	bx	lr

0000e366 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e366:	7940      	ldrb	r0, [r0, #5]
    e368:	4770      	bx	lr

0000e36a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e36a:	7141      	strb	r1, [r0, #5]
    e36c:	4770      	bx	lr

0000e36e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e36e:	b510      	push	{r4, lr}
    e370:	2a1b      	cmp	r2, #27
    e372:	d904      	bls.n	e37e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e374:	f240 417f 	movw	r1, #1151	; 0x47f
    e378:	202a      	movs	r0, #42	; 0x2a
    e37a:	f7f3 f811 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e37e:	7042      	strb	r2, [r0, #1]
    e380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e384:	1cc0      	adds	r0, r0, #3
    e386:	f002 bd13 	b.w	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e38a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e38a:	7802      	ldrb	r2, [r0, #0]
    e38c:	f001 0103 	and.w	r1, r1, #3
    e390:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e394:	430a      	orrs	r2, r1
    e396:	7002      	strb	r2, [r0, #0]
    e398:	4770      	bx	lr

0000e39a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e39a:	7101      	strb	r1, [r0, #4]
    e39c:	0a09      	lsrs	r1, r1, #8
    e39e:	7141      	strb	r1, [r0, #5]
    e3a0:	4770      	bx	lr

0000e3a2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e3a2:	7181      	strb	r1, [r0, #6]
    e3a4:	0a09      	lsrs	r1, r1, #8
    e3a6:	71c1      	strb	r1, [r0, #7]
    e3a8:	4770      	bx	lr

0000e3aa <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e3aa:	7201      	strb	r1, [r0, #8]
    e3ac:	0a09      	lsrs	r1, r1, #8
    e3ae:	7241      	strb	r1, [r0, #9]
    e3b0:	4770      	bx	lr

0000e3b2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e3b2:	7281      	strb	r1, [r0, #10]
    e3b4:	0a09      	lsrs	r1, r1, #8
    e3b6:	72c1      	strb	r1, [r0, #11]
    e3b8:	4770      	bx	lr

0000e3ba <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e3ba:	7900      	ldrb	r0, [r0, #4]
    e3bc:	4770      	bx	lr

0000e3be <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e3be:	7900      	ldrb	r0, [r0, #4]
    e3c0:	4770      	bx	lr
    e3c2:	b570      	push	{r4, r5, r6, lr}
    e3c4:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e3c8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e3cc:	f012 0fff 	tst.w	r2, #255	; 0xff
    e3d0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e3d4:	d108      	bne.n	e3e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e3d6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e3da:	b92c      	cbnz	r4, e3e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e3dc:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e3e0:	b914      	cbnz	r4, e3e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e3e2:	0e12      	lsrs	r2, r2, #24
    e3e4:	d100      	bne.n	e3e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e3e6:	b34b      	cbz	r3, e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e3e8:	7846      	ldrb	r6, [r0, #1]
    e3ea:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e3ee:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e3f2:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e3f6:	7d83      	ldrb	r3, [r0, #22]
    e3f8:	2e22      	cmp	r6, #34	; 0x22
    e3fa:	d11f      	bne.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e3fc:	b131      	cbz	r1, e40c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e3fe:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e402:	d903      	bls.n	e40c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e404:	f640 5107 	movw	r1, #3335	; 0xd07
    e408:	428a      	cmp	r2, r1
    e40a:	d90b      	bls.n	e424 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e40c:	1f91      	subs	r1, r2, #6
    e40e:	f640 467a 	movw	r6, #3194	; 0xc7a
    e412:	42b1      	cmp	r1, r6
    e414:	d812      	bhi.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e416:	b18b      	cbz	r3, e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e418:	2b08      	cmp	r3, #8
    e41a:	d80f      	bhi.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e41c:	4293      	cmp	r3, r2
    e41e:	d20d      	bcs.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e420:	4295      	cmp	r5, r2
    e422:	d80b      	bhi.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e424:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e428:	d208      	bcs.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e42a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e42e:	f640 4176 	movw	r1, #3190	; 0xc76
    e432:	380a      	subs	r0, #10
    e434:	4288      	cmp	r0, r1
    e436:	d801      	bhi.n	e43c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e438:	2001      	movs	r0, #1
    e43a:	bd70      	pop	{r4, r5, r6, pc}
    e43c:	2000      	movs	r0, #0
    e43e:	bd70      	pop	{r4, r5, r6, pc}

0000e440 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e440:	6841      	ldr	r1, [r0, #4]
    e442:	2200      	movs	r2, #0
    e444:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e448:	2b00      	cmp	r3, #0
    e44a:	d004      	beq.n	e456 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e44c:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e450:	6840      	ldr	r0, [r0, #4]
    e452:	f000 bd70 	b.w	ef36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e456:	4770      	bx	lr

0000e458 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e458:	b510      	push	{r4, lr}
    e45a:	7a01      	ldrb	r1, [r0, #8]
    e45c:	b119      	cbz	r1, e466 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e45e:	2901      	cmp	r1, #1
    e460:	d006      	beq.n	e470 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e462:	2000      	movs	r0, #0
    e464:	bd10      	pop	{r4, pc}
    e466:	88c2      	ldrh	r2, [r0, #6]
    e468:	6803      	ldr	r3, [r0, #0]
    e46a:	8880      	ldrh	r0, [r0, #4]
    e46c:	2102      	movs	r1, #2
    e46e:	e003      	b.n	e478 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e470:	88c2      	ldrh	r2, [r0, #6]
    e472:	6803      	ldr	r3, [r0, #0]
    e474:	8880      	ldrh	r0, [r0, #4]
    e476:	2101      	movs	r1, #1
    e478:	f7f4 febc 	bl	31f4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e47c:	b908      	cbnz	r0, e482 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e47e:	f7f4 ff09 	bl	3294 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e482:	2001      	movs	r0, #1
    e484:	bd10      	pop	{r4, pc}

0000e486 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e486:	b508      	push	{r3, lr}
    e488:	7a03      	ldrb	r3, [r0, #8]
    e48a:	f88d 3000 	strb.w	r3, [sp]
    e48e:	9b00      	ldr	r3, [sp, #0]
    e490:	9300      	str	r3, [sp, #0]
    e492:	f89d 3000 	ldrb.w	r3, [sp]
    e496:	b123      	cbz	r3, e4a2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e498:	f240 3117 	movw	r1, #791	; 0x317
    e49c:	2010      	movs	r0, #16
    e49e:	f7f2 ff7f 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e4a6:	f7f5 b869 	b.w	357c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>

0000e4aa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e4aa:	f7f5 b895 	b.w	35d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>

0000e4ae <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e4ae:	7a03      	ldrb	r3, [r0, #8]
    e4b0:	b082      	sub	sp, #8
    e4b2:	f88d 3000 	strb.w	r3, [sp]
    e4b6:	9b00      	ldr	r3, [sp, #0]
    e4b8:	9300      	str	r3, [sp, #0]
    e4ba:	f89d 3000 	ldrb.w	r3, [sp]
    e4be:	2b00      	cmp	r3, #0
    e4c0:	d102      	bne.n	e4c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e4c2:	b002      	add	sp, #8
    e4c4:	f7f5 b85a 	b.w	357c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    e4c8:	b002      	add	sp, #8
    e4ca:	4770      	bx	lr
    e4cc:	2000      	movs	r0, #0
    e4ce:	7048      	strb	r0, [r1, #1]
    e4d0:	2003      	movs	r0, #3
    e4d2:	7008      	strb	r0, [r1, #0]
    e4d4:	2001      	movs	r0, #1
    e4d6:	7108      	strb	r0, [r1, #4]
    e4d8:	4770      	bx	lr

0000e4da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e4da:	b510      	push	{r4, lr}
    e4dc:	888c      	ldrh	r4, [r1, #4]
    e4de:	890a      	ldrh	r2, [r1, #8]
    e4e0:	884b      	ldrh	r3, [r1, #2]
    e4e2:	88c9      	ldrh	r1, [r1, #6]
    e4e4:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e4e8:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e4ec:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e4f0:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e4f4:	bd10      	pop	{r4, pc}

0000e4f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e4f6:	b570      	push	{r4, r5, r6, lr}
    e4f8:	4615      	mov	r5, r2
    e4fa:	460c      	mov	r4, r1
    e4fc:	f000 f91a 	bl	e734 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e500:	3096      	adds	r0, #150	; 0x96
    e502:	4428      	add	r0, r5
    e504:	42a0      	cmp	r0, r4
    e506:	d801      	bhi.n	e50c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e508:	1a20      	subs	r0, r4, r0
    e50a:	bd70      	pop	{r4, r5, r6, pc}
    e50c:	2000      	movs	r0, #0
    e50e:	bd70      	pop	{r4, r5, r6, pc}

0000e510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e514:	4604      	mov	r4, r0
    e516:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e518:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e51a:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e51e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e522:	4285      	cmp	r5, r0
    e524:	d300      	bcc.n	e528 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e526:	4605      	mov	r5, r0
    e528:	4620      	mov	r0, r4
    e52a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e52e:	f000 f89c 	bl	e66a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e532:	4601      	mov	r1, r0
    e534:	86e5      	strh	r5, [r4, #54]	; 0x36
    e536:	8761      	strh	r1, [r4, #58]	; 0x3a
    e538:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e53a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e53e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e540:	4680      	mov	r8, r0
    e542:	42aa      	cmp	r2, r5
    e544:	d200      	bcs.n	e548 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e546:	462a      	mov	r2, r5
    e548:	428b      	cmp	r3, r1
    e54a:	d200      	bcs.n	e54e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e54c:	460b      	mov	r3, r1
    e54e:	8202      	strh	r2, [r0, #16]
    e550:	f8a8 3012 	strh.w	r3, [r8, #18]
    e554:	42bd      	cmp	r5, r7
    e556:	d101      	bne.n	e55c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e558:	42b1      	cmp	r1, r6
    e55a:	d001      	beq.n	e560 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e55c:	2001      	movs	r0, #1
    e55e:	e000      	b.n	e562 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e560:	2000      	movs	r0, #0
    e562:	4681      	mov	r9, r0
    e564:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e568:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e56c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e56e:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e570:	4285      	cmp	r5, r0
    e572:	d300      	bcc.n	e576 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e574:	4605      	mov	r5, r0
    e576:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e57a:	4620      	mov	r0, r4
    e57c:	f000 f87d 	bl	e67a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e580:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e584:	2902      	cmp	r1, #2
    e586:	d108      	bne.n	e59a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e588:	42af      	cmp	r7, r5
    e58a:	d200      	bcs.n	e58e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e58c:	463d      	mov	r5, r7
    e58e:	4286      	cmp	r6, r0
    e590:	d200      	bcs.n	e594 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e592:	4630      	mov	r0, r6
    e594:	2100      	movs	r1, #0
    e596:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e59a:	f8a8 5008 	strh.w	r5, [r8, #8]
    e59e:	f8a8 000c 	strh.w	r0, [r8, #12]
    e5a2:	42bd      	cmp	r5, r7
    e5a4:	d101      	bne.n	e5aa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e5a6:	42b0      	cmp	r0, r6
    e5a8:	d001      	beq.n	e5ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e5aa:	2001      	movs	r0, #1
    e5ac:	e000      	b.n	e5b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e5ae:	2000      	movs	r0, #0
    e5b0:	ea40 0009 	orr.w	r0, r0, r9
    e5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e5b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e5b8:	6840      	ldr	r0, [r0, #4]
    e5ba:	4770      	bx	lr

0000e5bc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5c0:	4616      	mov	r6, r2
    e5c2:	460f      	mov	r7, r1
    e5c4:	4604      	mov	r4, r0
    e5c6:	f000 f8b5 	bl	e734 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e5ca:	4605      	mov	r5, r0
    e5cc:	463a      	mov	r2, r7
    e5ce:	6921      	ldr	r1, [r4, #16]
    e5d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e5d2:	f000 f845 	bl	e660 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e5d6:	19a9      	adds	r1, r5, r6
    e5d8:	4281      	cmp	r1, r0
    e5da:	d300      	bcc.n	e5de <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e5dc:	4608      	mov	r0, r1
    e5de:	6320      	str	r0, [r4, #48]	; 0x30
    e5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e5e4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e5e4:	221b      	movs	r2, #27
    e5e6:	8402      	strh	r2, [r0, #32]
    e5e8:	8382      	strh	r2, [r0, #28]
    e5ea:	82c2      	strh	r2, [r0, #22]
    e5ec:	8282      	strh	r2, [r0, #20]
    e5ee:	8142      	strh	r2, [r0, #10]
    e5f0:	8202      	strh	r2, [r0, #16]
    e5f2:	8102      	strh	r2, [r0, #8]
    e5f4:	8542      	strh	r2, [r0, #42]	; 0x2a
    e5f6:	8582      	strh	r2, [r0, #44]	; 0x2c
    e5f8:	8482      	strh	r2, [r0, #36]	; 0x24
    e5fa:	2900      	cmp	r1, #0
    e5fc:	d10a      	bne.n	e614 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e5fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e602:	8441      	strh	r1, [r0, #34]	; 0x22
    e604:	83c1      	strh	r1, [r0, #30]
    e606:	8341      	strh	r1, [r0, #26]
    e608:	8301      	strh	r1, [r0, #24]
    e60a:	81c1      	strh	r1, [r0, #14]
    e60c:	8241      	strh	r1, [r0, #18]
    e60e:	8181      	strh	r1, [r0, #12]
    e610:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e612:	8601      	strh	r1, [r0, #48]	; 0x30
    e614:	4770      	bx	lr

0000e616 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e616:	6800      	ldr	r0, [r0, #0]
    e618:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e61c:	4290      	cmp	r0, r2
    e61e:	d903      	bls.n	e628 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e620:	1a40      	subs	r0, r0, r1
    e622:	389c      	subs	r0, #156	; 0x9c
    e624:	0840      	lsrs	r0, r0, #1
    e626:	4770      	bx	lr
    e628:	2000      	movs	r0, #0
    e62a:	4770      	bx	lr

0000e62c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e62c:	b510      	push	{r4, lr}
    e62e:	9c02      	ldr	r4, [sp, #8]
    e630:	8281      	strh	r1, [r0, #20]
    e632:	82c2      	strh	r2, [r0, #22]
    e634:	8303      	strh	r3, [r0, #24]
    e636:	8344      	strh	r4, [r0, #26]
    e638:	bd10      	pop	{r4, pc}
    e63a:	1d00      	adds	r0, r0, #4
    e63c:	b510      	push	{r4, lr}
    e63e:	b280      	uxth	r0, r0
    e640:	2901      	cmp	r1, #1
    e642:	d006      	beq.n	e652 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e644:	2902      	cmp	r1, #2
    e646:	d007      	beq.n	e658 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e648:	f240 2126 	movw	r1, #550	; 0x226
    e64c:	2006      	movs	r0, #6
    e64e:	f7f2 fea7 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e652:	00c0      	lsls	r0, r0, #3
    e654:	3050      	adds	r0, #80	; 0x50
    e656:	e001      	b.n	e65c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e658:	0080      	lsls	r0, r0, #2
    e65a:	302c      	adds	r0, #44	; 0x2c
    e65c:	b280      	uxth	r0, r0
    e65e:	bd10      	pop	{r4, pc}
    e660:	4288      	cmp	r0, r1
    e662:	d300      	bcc.n	e666 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e664:	4608      	mov	r0, r1
    e666:	1a80      	subs	r0, r0, r2
    e668:	4770      	bx	lr
    e66a:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e66e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e672:	4281      	cmp	r1, r0
    e674:	d200      	bcs.n	e678 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e676:	4608      	mov	r0, r1
    e678:	4770      	bx	lr
    e67a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e67e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e682:	4281      	cmp	r1, r0
    e684:	d200      	bcs.n	e688 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e686:	4608      	mov	r0, r1
    e688:	4770      	bx	lr
    e68a:	b538      	push	{r3, r4, r5, lr}
    e68c:	2200      	movs	r2, #0
    e68e:	f1a0 0318 	sub.w	r3, r0, #24
    e692:	2413      	movs	r4, #19
    e694:	7202      	strb	r2, [r0, #8]
    e696:	704a      	strb	r2, [r1, #1]
    e698:	700c      	strb	r4, [r1, #0]
    e69a:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e69e:	604d      	str	r5, [r1, #4]
    e6a0:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e6a4:	608d      	str	r5, [r1, #8]
    e6a6:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e6aa:	60cd      	str	r5, [r1, #12]
    e6ac:	7a05      	ldrb	r5, [r0, #8]
    e6ae:	f88d 5000 	strb.w	r5, [sp]
    e6b2:	9d00      	ldr	r5, [sp, #0]
    e6b4:	9500      	str	r5, [sp, #0]
    e6b6:	f89d 5000 	ldrb.w	r5, [sp]
    e6ba:	2d00      	cmp	r5, #0
    e6bc:	d1ea      	bne.n	e694 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e6be:	bd38      	pop	{r3, r4, r5, pc}
    e6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6c2:	b087      	sub	sp, #28
    e6c4:	460d      	mov	r5, r1
    e6c6:	4604      	mov	r4, r0
    e6c8:	f7f4 fd80 	bl	31cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e6cc:	2600      	movs	r6, #0
    e6ce:	b328      	cbz	r0, e71c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e6d0:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    e6d4:	7226      	strb	r6, [r4, #8]
    e6d6:	8807      	ldrh	r7, [r0, #0]
    e6d8:	a903      	add	r1, sp, #12
    e6da:	4638      	mov	r0, r7
    e6dc:	f001 fcf3 	bl	100c6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e6e0:	b108      	cbz	r0, e6e6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e6e2:	21fd      	movs	r1, #253	; 0xfd
    e6e4:	e017      	b.n	e716 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e6e6:	f8ad 7000 	strh.w	r7, [sp]
    e6ea:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e6ee:	f8ad 0002 	strh.w	r0, [sp, #2]
    e6f2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e6f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    e6fa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e6fe:	f8ad 0006 	strh.w	r0, [sp, #6]
    e702:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e706:	f8ad 0008 	strh.w	r0, [sp, #8]
    e70a:	4668      	mov	r0, sp
    e70c:	f001 fd17 	bl	1013e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e710:	b120      	cbz	r0, e71c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e712:	f44f 7183 	mov.w	r1, #262	; 0x106
    e716:	202c      	movs	r0, #44	; 0x2c
    e718:	f7f2 fe42 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e71c:	201b      	movs	r0, #27
    e71e:	7028      	strb	r0, [r5, #0]
    e720:	706e      	strb	r6, [r5, #1]
    e722:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e726:	6068      	str	r0, [r5, #4]
    e728:	6860      	ldr	r0, [r4, #4]
    e72a:	60a8      	str	r0, [r5, #8]
    e72c:	8920      	ldrh	r0, [r4, #8]
    e72e:	81a8      	strh	r0, [r5, #12]
    e730:	b007      	add	sp, #28
    e732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e734:	2196      	movs	r1, #150	; 0x96
    e736:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e73a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e73e:	f000 b800 	b.w	e742 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e746:	460d      	mov	r5, r1
    e748:	4606      	mov	r6, r0
    e74a:	4698      	mov	r8, r3
    e74c:	4617      	mov	r7, r2
    e74e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e750:	4611      	mov	r1, r2
    e752:	f7ff ff72 	bl	e63a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e756:	4604      	mov	r4, r0
    e758:	4639      	mov	r1, r7
    e75a:	4630      	mov	r0, r6
    e75c:	f7ff ff8d 	bl	e67a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e760:	42a0      	cmp	r0, r4
    e762:	d200      	bcs.n	e766 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e764:	4604      	mov	r4, r0
    e766:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e768:	4641      	mov	r1, r8
    e76a:	f7ff ff66 	bl	e63a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e76e:	4607      	mov	r7, r0
    e770:	4641      	mov	r1, r8
    e772:	4630      	mov	r0, r6
    e774:	f7ff ff79 	bl	e66a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e778:	42b8      	cmp	r0, r7
    e77a:	d300      	bcc.n	e77e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e77c:	4638      	mov	r0, r7
    e77e:	4420      	add	r0, r4
    e780:	4428      	add	r0, r5
    e782:	1d80      	adds	r0, r0, #6
    e784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e788:	b510      	push	{r4, lr}
    e78a:	4604      	mov	r4, r0
    e78c:	2108      	movs	r1, #8
    e78e:	4620      	mov	r0, r4
    e790:	f7f2 feb4 	bl	14fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e794:	6820      	ldr	r0, [r4, #0]
    e796:	2800      	cmp	r0, #0
    e798:	d102      	bne.n	e7a0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x174>
    e79a:	6860      	ldr	r0, [r4, #4]
    e79c:	2800      	cmp	r0, #0
    e79e:	d0f5      	beq.n	e78c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x160>
    e7a0:	bd10      	pop	{r4, pc}

0000e7a2 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e7a2:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e7a6:	2255      	movs	r2, #85	; 0x55
    e7a8:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e7ac:	4408      	add	r0, r1
    e7ae:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e7b2:	2233      	movs	r2, #51	; 0x33
    e7b4:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e7b8:	4408      	add	r0, r1
    e7ba:	f000 010f 	and.w	r1, r0, #15
    e7be:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e7c2:	4770      	bx	lr

0000e7c4 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e7c4:	b510      	push	{r4, lr}
    e7c6:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e7ca:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e7ce:	2000      	movs	r0, #0
    e7d0:	7048      	strb	r0, [r1, #1]
    e7d2:	230a      	movs	r3, #10
    e7d4:	700b      	strb	r3, [r1, #0]
    e7d6:	7108      	strb	r0, [r1, #4]
    e7d8:	f8a1 4005 	strh.w	r4, [r1, #5]
    e7dc:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e7e0:	71c8      	strb	r0, [r1, #7]
    e7e2:	4620      	mov	r0, r4
    e7e4:	f7f3 f9d8 	bl	1b98 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e7e8:	f7fe fdbd 	bl	d366 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e7ec:	b140      	cbz	r0, e800 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e7ee:	4620      	mov	r0, r4
    e7f0:	f7ff f9b8 	bl	db64 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e7f4:	4620      	mov	r0, r4
    e7f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7fa:	2100      	movs	r1, #0
    e7fc:	f7f3 b856 	b.w	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e800:	2160      	movs	r1, #96	; 0x60
    e802:	2063      	movs	r0, #99	; 0x63
    e804:	f7f2 fdcc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e808 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e808:	b538      	push	{r3, r4, r5, lr}
    e80a:	2200      	movs	r2, #0
    e80c:	704a      	strb	r2, [r1, #1]
    e80e:	2307      	movs	r3, #7
    e810:	700b      	strb	r3, [r1, #0]
    e812:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e816:	f5a0 73df 	sub.w	r3, r0, #446	; 0x1be
    e81a:	7202      	strb	r2, [r0, #8]
    e81c:	84da      	strh	r2, [r3, #38]	; 0x26
    e81e:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e822:	604d      	str	r5, [r1, #4]
    e824:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e828:	608d      	str	r5, [r1, #8]
    e82a:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e82e:	818d      	strh	r5, [r1, #12]
    e830:	710a      	strb	r2, [r1, #4]
    e832:	7a05      	ldrb	r5, [r0, #8]
    e834:	f88d 5000 	strb.w	r5, [sp]
    e838:	9d00      	ldr	r5, [sp, #0]
    e83a:	9500      	str	r5, [sp, #0]
    e83c:	f89d 5000 	ldrb.w	r5, [sp]
    e840:	2d00      	cmp	r5, #0
    e842:	d1ea      	bne.n	e81a <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e844:	bd38      	pop	{r3, r4, r5, pc}

0000e846 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e846:	2200      	movs	r2, #0
    e848:	704a      	strb	r2, [r1, #1]
    e84a:	220b      	movs	r2, #11
    e84c:	700a      	strb	r2, [r1, #0]
    e84e:	f100 020a 	add.w	r2, r0, #10
    e852:	7a83      	ldrb	r3, [r0, #10]
    e854:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e858:	710b      	strb	r3, [r1, #4]
    e85a:	8800      	ldrh	r0, [r0, #0]
    e85c:	80c8      	strh	r0, [r1, #6]
    e85e:	7910      	ldrb	r0, [r2, #4]
    e860:	7208      	strb	r0, [r1, #8]
    e862:	4770      	bx	lr

0000e864 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e864:	2200      	movs	r2, #0
    e866:	704a      	strb	r2, [r1, #1]
    e868:	220c      	movs	r2, #12
    e86a:	700a      	strb	r2, [r1, #0]
    e86c:	7a82      	ldrb	r2, [r0, #10]
    e86e:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e872:	710a      	strb	r2, [r1, #4]
    e874:	8800      	ldrh	r0, [r0, #0]
    e876:	80c8      	strh	r0, [r1, #6]
    e878:	4770      	bx	lr

0000e87a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e87a:	2200      	movs	r2, #0
    e87c:	704a      	strb	r2, [r1, #1]
    e87e:	2208      	movs	r2, #8
    e880:	700a      	strb	r2, [r1, #0]
    e882:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e886:	8812      	ldrh	r2, [r2, #0]
    e888:	808a      	strh	r2, [r1, #4]
    e88a:	68c2      	ldr	r2, [r0, #12]
    e88c:	f8c1 2006 	str.w	r2, [r1, #6]
    e890:	6902      	ldr	r2, [r0, #16]
    e892:	f8c1 200a 	str.w	r2, [r1, #10]
    e896:	8a80      	ldrh	r0, [r0, #20]
    e898:	81c8      	strh	r0, [r1, #14]
    e89a:	4770      	bx	lr

0000e89c <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e89c:	b510      	push	{r4, lr}
    e89e:	6844      	ldr	r4, [r0, #4]
    e8a0:	7803      	ldrb	r3, [r0, #0]
    e8a2:	2100      	movs	r1, #0
    e8a4:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e8a8:	3480      	adds	r4, #128	; 0x80
    e8aa:	4620      	mov	r0, r4
    e8ac:	f7ff fa54 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8b0:	b110      	cbz	r0, e8b8 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e8b2:	2004      	movs	r0, #4
    e8b4:	7760      	strb	r0, [r4, #29]
    e8b6:	bd10      	pop	{r4, pc}
    e8b8:	21aa      	movs	r1, #170	; 0xaa
    e8ba:	201c      	movs	r0, #28
    e8bc:	f7f2 fd70 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e8c0 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e8c0:	b510      	push	{r4, lr}
    e8c2:	6841      	ldr	r1, [r0, #4]
    e8c4:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e8c8:	07d2      	lsls	r2, r2, #31
    e8ca:	d00b      	beq.n	e8e4 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e8cc:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e8d0:	1e52      	subs	r2, r2, #1
    e8d2:	b252      	sxtb	r2, r2
    e8d4:	700a      	strb	r2, [r1, #0]
    e8d6:	6840      	ldr	r0, [r0, #4]
    e8d8:	2a00      	cmp	r2, #0
    e8da:	da05      	bge.n	e8e8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e8dc:	21b9      	movs	r1, #185	; 0xb9
    e8de:	201c      	movs	r0, #28
    e8e0:	f7f2 fd5e 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8e4:	21b7      	movs	r1, #183	; 0xb7
    e8e6:	e7fa      	b.n	e8de <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e8e8:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e8ec:	f021 0101 	bic.w	r1, r1, #1
    e8f0:	6001      	str	r1, [r0, #0]
    e8f2:	bd10      	pop	{r4, pc}
    e8f4:	2200      	movs	r2, #0
    e8f6:	704a      	strb	r2, [r1, #1]
    e8f8:	2206      	movs	r2, #6
    e8fa:	700a      	strb	r2, [r1, #0]
    e8fc:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e900:	604a      	str	r2, [r1, #4]
    e902:	6842      	ldr	r2, [r0, #4]
    e904:	608a      	str	r2, [r1, #8]
    e906:	8902      	ldrh	r2, [r0, #8]
    e908:	818a      	strh	r2, [r1, #12]
    e90a:	7a80      	ldrb	r0, [r0, #10]
    e90c:	7388      	strb	r0, [r1, #14]
    e90e:	4770      	bx	lr

0000e910 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e910:	2200      	movs	r2, #0
    e912:	704a      	strb	r2, [r1, #1]
    e914:	220e      	movs	r2, #14
    e916:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e91a:	700a      	strb	r2, [r1, #0]
    e91c:	8800      	ldrh	r0, [r0, #0]
    e91e:	8088      	strh	r0, [r1, #4]
    e920:	4770      	bx	lr

0000e922 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e922:	b538      	push	{r3, r4, r5, lr}
    e924:	2400      	movs	r4, #0
    e926:	704c      	strb	r4, [r1, #1]
    e928:	2501      	movs	r5, #1
    e92a:	700d      	strb	r5, [r1, #0]
    e92c:	f1a0 025e 	sub.w	r2, r0, #94	; 0x5e
    e930:	f1a0 03de 	sub.w	r3, r0, #222	; 0xde
    e934:	710c      	strb	r4, [r1, #4]
    e936:	7204      	strb	r4, [r0, #8]
    e938:	881d      	ldrh	r5, [r3, #0]
    e93a:	f8a1 5005 	strh.w	r5, [r1, #5]
    e93e:	f892 5067 	ldrb.w	r5, [r2, #103]	; 0x67
    e942:	71cd      	strb	r5, [r1, #7]
    e944:	f8b2 5068 	ldrh.w	r5, [r2, #104]	; 0x68
    e948:	810d      	strh	r5, [r1, #8]
    e94a:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e94e:	814d      	strh	r5, [r1, #10]
    e950:	7a05      	ldrb	r5, [r0, #8]
    e952:	f88d 5000 	strb.w	r5, [sp]
    e956:	9d00      	ldr	r5, [sp, #0]
    e958:	9500      	str	r5, [sp, #0]
    e95a:	f89d 5000 	ldrb.w	r5, [sp]
    e95e:	2d00      	cmp	r5, #0
    e960:	d1e9      	bne.n	e936 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e962:	bd38      	pop	{r3, r4, r5, pc}

0000e964 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e964:	b570      	push	{r4, r5, r6, lr}
    e966:	7803      	ldrb	r3, [r0, #0]
    e968:	6840      	ldr	r0, [r0, #4]
    e96a:	2500      	movs	r5, #0
    e96c:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e970:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    e974:	f500 7098 	add.w	r0, r0, #304	; 0x130
    e978:	0789      	lsls	r1, r1, #30
    e97a:	d40e      	bmi.n	e99a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    e97c:	7f62      	ldrb	r2, [r4, #29]
    e97e:	2100      	movs	r1, #0
    e980:	4620      	mov	r0, r4
    e982:	f7ff f9e9 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e986:	b130      	cbz	r0, e996 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    e988:	2001      	movs	r0, #1
    e98a:	7760      	strb	r0, [r4, #29]
    e98c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e990:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    e994:	bd70      	pop	{r4, r5, r6, pc}
    e996:	216e      	movs	r1, #110	; 0x6e
    e998:	e00b      	b.n	e9b2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    e99a:	7b21      	ldrb	r1, [r4, #12]
    e99c:	0789      	lsls	r1, r1, #30
    e99e:	d50f      	bpl.n	e9c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    e9a0:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    e9a4:	1e49      	subs	r1, r1, #1
    e9a6:	b249      	sxtb	r1, r1
    e9a8:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    e9ac:	2900      	cmp	r1, #0
    e9ae:	da03      	bge.n	e9b8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    e9b0:	2180      	movs	r1, #128	; 0x80
    e9b2:	2040      	movs	r0, #64	; 0x40
    e9b4:	f7f2 fcf4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9b8:	68e1      	ldr	r1, [r4, #12]
    e9ba:	f021 0102 	bic.w	r1, r1, #2
    e9be:	60e1      	str	r1, [r4, #12]
    e9c0:	7485      	strb	r5, [r0, #18]
    e9c2:	bd70      	pop	{r4, r5, r6, pc}
    e9c4:	2200      	movs	r2, #0
    e9c6:	704a      	strb	r2, [r1, #1]
    e9c8:	2219      	movs	r2, #25
    e9ca:	700a      	strb	r2, [r1, #0]
    e9cc:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e9d0:	6048      	str	r0, [r1, #4]
    e9d2:	4770      	bx	lr
    e9d4:	b510      	push	{r4, lr}
    e9d6:	4604      	mov	r4, r0
    e9d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e9dc:	e9d4 1000 	ldrd	r1, r0, [r4]
    e9e0:	4050      	eors	r0, r2
    e9e2:	ea70 0101 	orns	r1, r0, r1
    e9e6:	d008      	beq.n	e9fa <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e9e8:	f7fc fc1e 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e9ec:	e9d4 2300 	ldrd	r2, r3, [r4]
    e9f0:	1a80      	subs	r0, r0, r2
    e9f2:	4199      	sbcs	r1, r3
    e9f4:	d301      	bcc.n	e9fa <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e9f6:	2001      	movs	r0, #1
    e9f8:	bd10      	pop	{r4, pc}
    e9fa:	2000      	movs	r0, #0
    e9fc:	bd10      	pop	{r4, pc}
    e9fe:	2801      	cmp	r0, #1
    ea00:	d102      	bne.n	ea08 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa4>
    ea02:	7948      	ldrb	r0, [r1, #5]
    ea04:	0980      	lsrs	r0, r0, #6
    ea06:	d001      	beq.n	ea0c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa8>
    ea08:	2000      	movs	r0, #0
    ea0a:	4770      	bx	lr
    ea0c:	2001      	movs	r0, #1
    ea0e:	4770      	bx	lr
    ea10:	2801      	cmp	r0, #1
    ea12:	d106      	bne.n	ea22 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    ea14:	7948      	ldrb	r0, [r1, #5]
    ea16:	2101      	movs	r1, #1
    ea18:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ea1c:	d101      	bne.n	ea22 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    ea1e:	2001      	movs	r0, #1
    ea20:	4770      	bx	lr
    ea22:	2000      	movs	r0, #0
    ea24:	4770      	bx	lr
    ea26:	2802      	cmp	r0, #2
    ea28:	d003      	beq.n	ea32 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    ea2a:	2803      	cmp	r0, #3
    ea2c:	d001      	beq.n	ea32 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    ea2e:	2000      	movs	r0, #0
    ea30:	4770      	bx	lr
    ea32:	2001      	movs	r0, #1
    ea34:	4770      	bx	lr

0000ea36 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    ea36:	b510      	push	{r4, lr}
    ea38:	4604      	mov	r4, r0
    ea3a:	7c00      	ldrb	r0, [r0, #16]
    ea3c:	f7ff fff3 	bl	ea26 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    ea40:	b148      	cbz	r0, ea56 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ea42:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    ea46:	f104 0158 	add.w	r1, r4, #88	; 0x58
    ea4a:	f7ff f927 	bl	dc9c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ea4e:	2808      	cmp	r0, #8
    ea50:	d001      	beq.n	ea56 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ea52:	2001      	movs	r0, #1
    ea54:	bd10      	pop	{r4, pc}
    ea56:	7c20      	ldrb	r0, [r4, #16]
    ea58:	b118      	cbz	r0, ea62 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ea5a:	2802      	cmp	r0, #2
    ea5c:	d001      	beq.n	ea62 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ea5e:	7de0      	ldrb	r0, [r4, #23]
    ea60:	bd10      	pop	{r4, pc}
    ea62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea66:	2000      	movs	r0, #0
    ea68:	f7f3 bb64 	b.w	2134 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000ea6c <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    ea6c:	b508      	push	{r3, lr}
    ea6e:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    ea72:	f88d 1000 	strb.w	r1, [sp]
    ea76:	9900      	ldr	r1, [sp, #0]
    ea78:	9100      	str	r1, [sp, #0]
    ea7a:	f89d 1000 	ldrb.w	r1, [sp]
    ea7e:	b941      	cbnz	r1, ea92 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    ea80:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    ea84:	f88d 1000 	strb.w	r1, [sp]
    ea88:	9900      	ldr	r1, [sp, #0]
    ea8a:	9100      	str	r1, [sp, #0]
    ea8c:	f89d 1000 	ldrb.w	r1, [sp]
    ea90:	b109      	cbz	r1, ea96 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    ea92:	2001      	movs	r0, #1
    ea94:	bd08      	pop	{r3, pc}
    ea96:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    ea9a:	f88d 0000 	strb.w	r0, [sp]
    ea9e:	9800      	ldr	r0, [sp, #0]
    eaa0:	9000      	str	r0, [sp, #0]
    eaa2:	f89d 0000 	ldrb.w	r0, [sp]
    eaa6:	2000      	movs	r0, #0
    eaa8:	bd08      	pop	{r3, pc}

0000eaaa <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    eaaa:	20ff      	movs	r0, #255	; 0xff
    eaac:	7008      	strb	r0, [r1, #0]
    eaae:	6b48      	ldr	r0, [r1, #52]	; 0x34
    eab0:	f7fe bff9 	b.w	daa6 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000eab4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    eab4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eab6:	460d      	mov	r5, r1
    eab8:	4604      	mov	r4, r0
    eaba:	f44f 728c 	mov.w	r2, #280	; 0x118
    eabe:	2100      	movs	r1, #0
    eac0:	f002 f9f0 	bl	10ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eac4:	20ff      	movs	r0, #255	; 0xff
    eac6:	7020      	strb	r0, [r4, #0]
    eac8:	207f      	movs	r0, #127	; 0x7f
    eaca:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    eace:	2013      	movs	r0, #19
    ead0:	8060      	strh	r0, [r4, #2]
    ead2:	f242 7010 	movw	r0, #10000	; 0x2710
    ead6:	8460      	strh	r0, [r4, #34]	; 0x22
    ead8:	f7f3 f91c 	bl	1d14 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    eadc:	4601      	mov	r1, r0
    eade:	6360      	str	r0, [r4, #52]	; 0x34
    eae0:	2200      	movs	r2, #0
    eae2:	4668      	mov	r0, sp
    eae4:	f7fe ff45 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eae8:	2200      	movs	r2, #0
    eaea:	2101      	movs	r1, #1
    eaec:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eaee:	f7fe ffba 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eaf2:	2204      	movs	r2, #4
    eaf4:	4668      	mov	r0, sp
    eaf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    eaf8:	f7fe ff3b 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eafc:	2200      	movs	r2, #0
    eafe:	4611      	mov	r1, r2
    eb00:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb02:	f7fe ffb0 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb06:	73a5      	strb	r5, [r4, #14]
    eb08:	f104 0028 	add.w	r0, r4, #40	; 0x28
    eb0c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    eb10:	f000 b96b 	b.w	edea <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000eb14 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    eb14:	7880      	ldrb	r0, [r0, #2]
    eb16:	f3c0 0080 	ubfx	r0, r0, #2, #1
    eb1a:	b108      	cbz	r0, eb20 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    eb1c:	2000      	movs	r0, #0
    eb1e:	4770      	bx	lr
    eb20:	201f      	movs	r0, #31
    eb22:	4770      	bx	lr

0000eb24 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    eb24:	f7f5 bcfa 	b.w	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>

0000eb28 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    eb28:	6880      	ldr	r0, [r0, #8]
    eb2a:	4770      	bx	lr

0000eb2c <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    eb2c:	2001      	movs	r0, #1
    eb2e:	4770      	bx	lr

0000eb30 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    eb30:	b510      	push	{r4, lr}
    eb32:	4604      	mov	r4, r0
    eb34:	3028      	adds	r0, #40	; 0x28
    eb36:	f000 f918 	bl	ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    eb3a:	8861      	ldrh	r1, [r4, #2]
    eb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb40:	2228      	movs	r2, #40	; 0x28
    eb42:	f7f5 bebb 	b.w	48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000eb46 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    eb46:	2200      	movs	r2, #0
    eb48:	8602      	strh	r2, [r0, #48]	; 0x30
    eb4a:	8843      	ldrh	r3, [r0, #2]
    eb4c:	2b1d      	cmp	r3, #29
    eb4e:	d001      	beq.n	eb54 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    eb50:	7341      	strb	r1, [r0, #13]
    eb52:	4770      	bx	lr
    eb54:	7342      	strb	r2, [r0, #13]
    eb56:	4770      	bx	lr

0000eb58 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    eb58:	b510      	push	{r4, lr}
    eb5a:	2400      	movs	r4, #0
    eb5c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    eb5e:	f7fe ff7a 	bl	da56 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    eb62:	4384      	bics	r4, r0
    eb64:	f084 0001 	eor.w	r0, r4, #1
    eb68:	bd10      	pop	{r4, pc}

0000eb6a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    eb6a:	2000      	movs	r0, #0
    eb6c:	4770      	bx	lr

0000eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    eb6e:	7880      	ldrb	r0, [r0, #2]
    eb70:	f000 0001 	and.w	r0, r0, #1
    eb74:	4770      	bx	lr

0000eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    eb76:	7880      	ldrb	r0, [r0, #2]
    eb78:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    eb7c:	4770      	bx	lr

0000eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    eb7e:	2001      	movs	r0, #1
    eb80:	4770      	bx	lr

0000eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    eb82:	7880      	ldrb	r0, [r0, #2]
    eb84:	f3c0 0040 	ubfx	r0, r0, #1, #1
    eb88:	4770      	bx	lr

0000eb8a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    eb8a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    eb8e:	4770      	bx	lr

0000eb90 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    eb90:	7800      	ldrb	r0, [r0, #0]
    eb92:	28ff      	cmp	r0, #255	; 0xff
    eb94:	d001      	beq.n	eb9a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    eb96:	2001      	movs	r0, #1
    eb98:	4770      	bx	lr
    eb9a:	2000      	movs	r0, #0
    eb9c:	4770      	bx	lr

0000eb9e <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    eb9e:	f800 1f20 	strb.w	r1, [r0, #32]!
    eba2:	7042      	strb	r2, [r0, #1]
    eba4:	4770      	bx	lr

0000eba6 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    eba6:	680a      	ldr	r2, [r1, #0]
    eba8:	f840 2f11 	str.w	r2, [r0, #17]!
    ebac:	8889      	ldrh	r1, [r1, #4]
    ebae:	8081      	strh	r1, [r0, #4]
    ebb0:	2101      	movs	r1, #1
    ebb2:	7181      	strb	r1, [r0, #6]
    ebb4:	4770      	bx	lr

0000ebb6 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ebb6:	7b00      	ldrb	r0, [r0, #12]
    ebb8:	4770      	bx	lr

0000ebba <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ebba:	2001      	movs	r0, #1
    ebbc:	4770      	bx	lr

0000ebbe <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ebbe:	61c1      	str	r1, [r0, #28]
    ebc0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ebc4:	724a      	strb	r2, [r1, #9]
    ebc6:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ebca:	f8c1 200a 	str.w	r2, [r1, #10]
    ebce:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ebd2:	81c8      	strh	r0, [r1, #14]
    ebd4:	4770      	bx	lr

0000ebd6 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ebd6:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ebda:	4770      	bx	lr

0000ebdc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ebdc:	7bc0      	ldrb	r0, [r0, #15]
    ebde:	2800      	cmp	r0, #0
    ebe0:	d000      	beq.n	ebe4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ebe2:	2001      	movs	r0, #1
    ebe4:	4770      	bx	lr
    ebe6:	7802      	ldrb	r2, [r0, #0]
    ebe8:	2320      	movs	r3, #32
    ebea:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ebee:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ebf2:	430a      	orrs	r2, r1
    ebf4:	7002      	strb	r2, [r0, #0]
    ebf6:	4770      	bx	lr
    ebf8:	b510      	push	{r4, lr}
    ebfa:	f7ff f84f 	bl	dc9c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ebfe:	4604      	mov	r4, r0
    ec00:	f7f4 f854 	bl	2cac <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    ec04:	b138      	cbz	r0, ec16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    ec06:	4620      	mov	r0, r4
    ec08:	f7f3 fff8 	bl	2bfc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    ec0c:	b118      	cbz	r0, ec16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    ec0e:	2110      	movs	r1, #16
    ec10:	f7ff fa0a 	bl	e028 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    ec14:	b108      	cbz	r0, ec1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    ec16:	2000      	movs	r0, #0
    ec18:	bd10      	pop	{r4, pc}
    ec1a:	2001      	movs	r0, #1
    ec1c:	bd10      	pop	{r4, pc}
    ec1e:	2101      	movs	r1, #1
    ec20:	f7f5 b8ec 	b.w	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ec24:	2101      	movs	r1, #1
    ec26:	f7f5 b8e9 	b.w	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ec2a:	2200      	movs	r2, #0
    ec2c:	704a      	strb	r2, [r1, #1]
    ec2e:	2205      	movs	r2, #5
    ec30:	700a      	strb	r2, [r1, #0]
    ec32:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ec36:	6048      	str	r0, [r1, #4]
    ec38:	4770      	bx	lr
    ec3a:	b510      	push	{r4, lr}
    ec3c:	460c      	mov	r4, r1
    ec3e:	2100      	movs	r1, #0
    ec40:	7061      	strb	r1, [r4, #1]
    ec42:	2112      	movs	r1, #18
    ec44:	7021      	strb	r1, [r4, #0]
    ec46:	f100 0109 	add.w	r1, r0, #9
    ec4a:	2221      	movs	r2, #33	; 0x21
    ec4c:	1d20      	adds	r0, r4, #4
    ec4e:	f002 f8af 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec52:	2001      	movs	r0, #1
    ec54:	71e0      	strb	r0, [r4, #7]
    ec56:	7920      	ldrb	r0, [r4, #4]
    ec58:	2800      	cmp	r0, #0
    ec5a:	d015      	beq.n	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ec5c:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ec60:	2100      	movs	r1, #0
    ec62:	4620      	mov	r0, r4
    ec64:	f7fe fdd3 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec68:	2800      	cmp	r0, #0
    ec6a:	d00d      	beq.n	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ec6c:	8800      	ldrh	r0, [r0, #0]
    ec6e:	f7fe ff79 	bl	db64 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ec72:	2100      	movs	r1, #0
    ec74:	4620      	mov	r0, r4
    ec76:	f7f2 fe19 	bl	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ec7a:	2800      	cmp	r0, #0
    ec7c:	d004      	beq.n	ec88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ec7e:	f44f 7114 	mov.w	r1, #592	; 0x250
    ec82:	202d      	movs	r0, #45	; 0x2d
    ec84:	f7f2 fb8c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec88:	bd10      	pop	{r4, pc}
    ec8a:	2200      	movs	r2, #0
    ec8c:	704a      	strb	r2, [r1, #1]
    ec8e:	221a      	movs	r2, #26
    ec90:	700a      	strb	r2, [r1, #0]
    ec92:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ec96:	604a      	str	r2, [r1, #4]
    ec98:	6842      	ldr	r2, [r0, #4]
    ec9a:	608a      	str	r2, [r1, #8]
    ec9c:	7a00      	ldrb	r0, [r0, #8]
    ec9e:	7308      	strb	r0, [r1, #12]
    eca0:	4770      	bx	lr
    eca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eca6:	4604      	mov	r4, r0
    eca8:	460f      	mov	r7, r1
    ecaa:	7e40      	ldrb	r0, [r0, #25]
    ecac:	f7f3 ff8c 	bl	2bc8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ecb0:	4606      	mov	r6, r0
    ecb2:	7e20      	ldrb	r0, [r4, #24]
    ecb4:	f104 0551 	add.w	r5, r4, #81	; 0x51
    ecb8:	b120      	cbz	r0, ecc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    ecba:	b11e      	cbz	r6, ecc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    ecbc:	7e60      	ldrb	r0, [r4, #25]
    ecbe:	f7f3 ff77 	bl	2bb0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ecc2:	b1a0      	cbz	r0, ecee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x112>
    ecc4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    ecc8:	2800      	cmp	r0, #0
    ecca:	d024      	beq.n	ed16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    eccc:	7ea0      	ldrb	r0, [r4, #26]
    ecce:	2800      	cmp	r0, #0
    ecd0:	d021      	beq.n	ed16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    ecd2:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    ecd6:	4629      	mov	r1, r5
    ecd8:	f7ff fe9a 	bl	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    ecdc:	b1a8      	cbz	r0, ed0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    ecde:	f7f3 ff63 	bl	2ba8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ece2:	463a      	mov	r2, r7
    ece4:	4629      	mov	r1, r5
    ece6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ecea:	f7fe bf6f 	b.w	dbcc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ecee:	2001      	movs	r0, #1
    ecf0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ecf4:	463a      	mov	r2, r7
    ecf6:	4629      	mov	r1, r5
    ecf8:	4630      	mov	r0, r6
    ecfa:	f7fe ff67 	bl	dbcc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ecfe:	7e61      	ldrb	r1, [r4, #25]
    ed00:	4628      	mov	r0, r5
    ed02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed06:	f7f3 bf6b 	b.w	2be0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ed0a:	4639      	mov	r1, r7
    ed0c:	4628      	mov	r0, r5
    ed0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed12:	f7fe bf4a 	b.w	dbaa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ed16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed1a:	b510      	push	{r4, lr}
    ed1c:	4604      	mov	r4, r0
    ed1e:	4608      	mov	r0, r1
    ed20:	f7f9 fbaa 	bl	8478 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    ed24:	7921      	ldrb	r1, [r4, #4]
    ed26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed2a:	2025      	movs	r0, #37	; 0x25
    ed2c:	f7f9 bb7a 	b.w	8424 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    ed30:	b570      	push	{r4, r5, r6, lr}
    ed32:	4614      	mov	r4, r2
    ed34:	461d      	mov	r5, r3
    ed36:	4606      	mov	r6, r0
    ed38:	f7fc fa76 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ed3c:	1900      	adds	r0, r0, r4
    ed3e:	4169      	adcs	r1, r5
    ed40:	e9c6 0100 	strd	r0, r1, [r6]
    ed44:	bd70      	pop	{r4, r5, r6, pc}

0000ed46 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ed46:	b570      	push	{r4, r5, r6, lr}
    ed48:	7001      	strb	r1, [r0, #0]
    ed4a:	7042      	strb	r2, [r0, #1]
    ed4c:	4614      	mov	r4, r2
    ed4e:	460d      	mov	r5, r1
    ed50:	7880      	ldrb	r0, [r0, #2]
    ed52:	f000 f87f 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ed56:	fb10 f005 	smulbb	r0, r0, r5
    ed5a:	4360      	muls	r0, r4
    ed5c:	28ff      	cmp	r0, #255	; 0xff
    ed5e:	d303      	bcc.n	ed68 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ed60:	215c      	movs	r1, #92	; 0x5c
    ed62:	202e      	movs	r0, #46	; 0x2e
    ed64:	f7f2 fb1c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed68:	bd70      	pop	{r4, r5, r6, pc}

0000ed6a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ed6a:	b510      	push	{r4, lr}
    ed6c:	4604      	mov	r4, r0
    ed6e:	7880      	ldrb	r0, [r0, #2]
    ed70:	f000 f870 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ed74:	7861      	ldrb	r1, [r4, #1]
    ed76:	7822      	ldrb	r2, [r4, #0]
    ed78:	fb11 f102 	smulbb	r1, r1, r2
    ed7c:	4348      	muls	r0, r1
    ed7e:	b2c0      	uxtb	r0, r0
    ed80:	bd10      	pop	{r4, pc}

0000ed82 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ed82:	b510      	push	{r4, lr}
    ed84:	4604      	mov	r4, r0
    ed86:	f000 f84d 	bl	ee24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ed8a:	7961      	ldrb	r1, [r4, #5]
    ed8c:	1c49      	adds	r1, r1, #1
    ed8e:	b2c9      	uxtb	r1, r1
    ed90:	7161      	strb	r1, [r4, #5]
    ed92:	7862      	ldrb	r2, [r4, #1]
    ed94:	4291      	cmp	r1, r2
    ed96:	d10b      	bne.n	edb0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ed98:	2200      	movs	r2, #0
    ed9a:	7162      	strb	r2, [r4, #5]
    ed9c:	78e1      	ldrb	r1, [r4, #3]
    ed9e:	4301      	orrs	r1, r0
    eda0:	70e1      	strb	r1, [r4, #3]
    eda2:	78a3      	ldrb	r3, [r4, #2]
    eda4:	4299      	cmp	r1, r3
    eda6:	d103      	bne.n	edb0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    eda8:	70e2      	strb	r2, [r4, #3]
    edaa:	7921      	ldrb	r1, [r4, #4]
    edac:	1c49      	adds	r1, r1, #1
    edae:	7121      	strb	r1, [r4, #4]
    edb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edb4:	f000 b825 	b.w	ee02 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000edb8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    edb8:	7081      	strb	r1, [r0, #2]
    edba:	4770      	bx	lr

0000edbc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    edbc:	b570      	push	{r4, r5, r6, lr}
    edbe:	4604      	mov	r4, r0
    edc0:	7880      	ldrb	r0, [r0, #2]
    edc2:	f000 f847 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edc6:	7861      	ldrb	r1, [r4, #1]
    edc8:	fb11 f500 	smulbb	r5, r1, r0
    edcc:	78e0      	ldrb	r0, [r4, #3]
    edce:	f000 f841 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edd2:	7861      	ldrb	r1, [r4, #1]
    edd4:	7962      	ldrb	r2, [r4, #5]
    edd6:	fb10 2001 	smlabb	r0, r0, r1, r2
    edda:	7821      	ldrb	r1, [r4, #0]
    eddc:	7922      	ldrb	r2, [r4, #4]
    edde:	1a89      	subs	r1, r1, r2
    ede0:	fb11 f105 	smulbb	r1, r1, r5
    ede4:	1a08      	subs	r0, r1, r0
    ede6:	b2c0      	uxtb	r0, r0
    ede8:	bd70      	pop	{r4, r5, r6, pc}

0000edea <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    edea:	2100      	movs	r1, #0
    edec:	6001      	str	r1, [r0, #0]
    edee:	8081      	strh	r1, [r0, #4]
    edf0:	2101      	movs	r1, #1
    edf2:	7041      	strb	r1, [r0, #1]
    edf4:	7001      	strb	r1, [r0, #0]
    edf6:	4770      	bx	lr

0000edf8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    edf8:	2100      	movs	r1, #0
    edfa:	70c1      	strb	r1, [r0, #3]
    edfc:	7141      	strb	r1, [r0, #5]
    edfe:	7101      	strb	r1, [r0, #4]
    ee00:	4770      	bx	lr
    ee02:	b510      	push	{r4, lr}
    ee04:	2801      	cmp	r0, #1
    ee06:	d007      	beq.n	ee18 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ee08:	2802      	cmp	r0, #2
    ee0a:	d007      	beq.n	ee1c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ee0c:	2804      	cmp	r0, #4
    ee0e:	d007      	beq.n	ee20 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ee10:	2139      	movs	r1, #57	; 0x39
    ee12:	202e      	movs	r0, #46	; 0x2e
    ee14:	f7f2 fac4 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee18:	2025      	movs	r0, #37	; 0x25
    ee1a:	bd10      	pop	{r4, pc}
    ee1c:	2026      	movs	r0, #38	; 0x26
    ee1e:	bd10      	pop	{r4, pc}
    ee20:	2027      	movs	r0, #39	; 0x27
    ee22:	bd10      	pop	{r4, pc}
    ee24:	4601      	mov	r1, r0
    ee26:	2000      	movs	r0, #0
    ee28:	788a      	ldrb	r2, [r1, #2]
    ee2a:	07d3      	lsls	r3, r2, #31
    ee2c:	d002      	beq.n	ee34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    ee2e:	78cb      	ldrb	r3, [r1, #3]
    ee30:	07db      	lsls	r3, r3, #31
    ee32:	d006      	beq.n	ee42 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ee34:	0793      	lsls	r3, r2, #30
    ee36:	d506      	bpl.n	ee46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ee38:	78cb      	ldrb	r3, [r1, #3]
    ee3a:	079b      	lsls	r3, r3, #30
    ee3c:	d403      	bmi.n	ee46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ee3e:	2002      	movs	r0, #2
    ee40:	4770      	bx	lr
    ee42:	2001      	movs	r0, #1
    ee44:	4770      	bx	lr
    ee46:	0752      	lsls	r2, r2, #29
    ee48:	d5fc      	bpl.n	ee44 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ee4a:	78c9      	ldrb	r1, [r1, #3]
    ee4c:	0749      	lsls	r1, r1, #29
    ee4e:	d4f9      	bmi.n	ee44 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ee50:	2004      	movs	r0, #4
    ee52:	4770      	bx	lr
    ee54:	f3c0 0180 	ubfx	r1, r0, #2, #1
    ee58:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ee5c:	4411      	add	r1, r2
    ee5e:	f000 0001 	and.w	r0, r0, #1
    ee62:	4408      	add	r0, r1
    ee64:	4770      	bx	lr

0000ee66 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    ee66:	f240 315a 	movw	r1, #858	; 0x35a
    ee6a:	4348      	muls	r0, r1
    ee6c:	4770      	bx	lr

0000ee6e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    ee6e:	f240 20ef 	movw	r0, #751	; 0x2ef
    ee72:	4770      	bx	lr
    ee74:	041c020e 	.word	0x041c020e
    ee78:	0c600630 	.word	0x0c600630
    ee7c:	06b4035a 	.word	0x06b4035a
    ee80:	0bf505c5 	.word	0x0bf505c5
    ee84:	01a31225 	.word	0x01a31225
    ee88:	05bf03b1 	.word	0x05bf03b1
    ee8c:	064902ef 	.word	0x064902ef
    ee90:	09a3      	.short	0x09a3

0000ee92 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ee92:	b510      	push	{r4, lr}
    ee94:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ee98:	b109      	cbz	r1, ee9e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ee9a:	2000      	movs	r0, #0
    ee9c:	bd10      	pop	{r4, pc}
    ee9e:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    eea2:	b131      	cbz	r1, eeb2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    eea4:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    eea8:	428a      	cmp	r2, r1
    eeaa:	d902      	bls.n	eeb2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    eeac:	f7f4 ff8e 	bl	3dcc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eeb0:	e7f3      	b.n	ee9a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    eeb2:	2001      	movs	r0, #1
    eeb4:	bd10      	pop	{r4, pc}

0000eeb6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    eeb6:	b510      	push	{r4, lr}
    eeb8:	b131      	cbz	r1, eec8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    eeba:	2901      	cmp	r1, #1
    eebc:	d008      	beq.n	eed0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    eebe:	f240 717a 	movw	r1, #1914	; 0x77a
    eec2:	2030      	movs	r0, #48	; 0x30
    eec4:	f7f2 fa6c 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eecc:	f000 b9b7 	b.w	f23e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    eed0:	2100      	movs	r1, #0
    eed2:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    eed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eeda:	f000 b913 	b.w	f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000eede <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    eede:	b510      	push	{r4, lr}
    eee0:	4604      	mov	r4, r0
    eee2:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    eee6:	2800      	cmp	r0, #0
    eee8:	d019      	beq.n	ef1e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    eeea:	2001      	movs	r0, #1
    eeec:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    eef0:	4601      	mov	r1, r0
    eef2:	4620      	mov	r0, r4
    eef4:	f7ff fe6f 	bl	ebd6 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    eef8:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    eefc:	b170      	cbz	r0, ef1c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    eefe:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ef02:	f7fb fd05 	bl	a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ef06:	7820      	ldrb	r0, [r4, #0]
    ef08:	f7fb fe66 	bl	abd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ef0c:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ef10:	f7fb fe40 	bl	ab94 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ef14:	b120      	cbz	r0, ef20 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ef16:	2000      	movs	r0, #0
    ef18:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    ef1c:	2000      	movs	r0, #0
    ef1e:	bd10      	pop	{r4, pc}
    ef20:	f240 2105 	movw	r1, #517	; 0x205
    ef24:	2030      	movs	r0, #48	; 0x30
    ef26:	f7f2 fa3b 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef2a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ef2a:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ef2e:	4770      	bx	lr

0000ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ef30:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ef34:	4770      	bx	lr

0000ef36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ef36:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef38:	4604      	mov	r4, r0
    ef3a:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    ef3e:	2800      	cmp	r0, #0
    ef40:	d15f      	bne.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef42:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ef46:	2803      	cmp	r0, #3
    ef48:	d15b      	bne.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef4a:	f7fc f96d 	bl	b228 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ef4e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    ef52:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    ef56:	1ac0      	subs	r0, r0, r3
    ef58:	eb61 0102 	sbc.w	r1, r1, r2
    ef5c:	2300      	movs	r3, #0
    ef5e:	461a      	mov	r2, r3
    ef60:	1a1b      	subs	r3, r3, r0
    ef62:	418a      	sbcs	r2, r1
    ef64:	da4d      	bge.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef66:	1c42      	adds	r2, r0, #1
    ef68:	f171 0100 	sbcs.w	r1, r1, #0
    ef6c:	db02      	blt.n	ef74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    ef6e:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
    ef72:	e036      	b.n	efe2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    ef74:	6921      	ldr	r1, [r4, #16]
    ef76:	b111      	cbz	r1, ef7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    ef78:	fbb0 f0f1 	udiv	r0, r0, r1
    ef7c:	e000      	b.n	ef80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    ef7e:	2000      	movs	r0, #0
    ef80:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    ef84:	1c40      	adds	r0, r0, #1
    ef86:	4408      	add	r0, r1
    ef88:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    ef8c:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ef90:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    ef94:	1a08      	subs	r0, r1, r0
    ef96:	b200      	sxth	r0, r0
    ef98:	2800      	cmp	r0, #0
    ef9a:	dd32      	ble.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef9c:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    efa0:	f7fb fcb6 	bl	a910 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    efa4:	2800      	cmp	r0, #0
    efa6:	d02c      	beq.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efa8:	20ff      	movs	r0, #255	; 0xff
    efaa:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    efae:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    efb2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    efb6:	ae01      	add	r6, sp, #4
    efb8:	1a40      	subs	r0, r0, r1
    efba:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    efbe:	1e40      	subs	r0, r0, #1
    efc0:	4408      	add	r0, r1
    efc2:	b285      	uxth	r5, r0
    efc4:	e017      	b.n	eff6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    efc6:	9600      	str	r6, [sp, #0]
    efc8:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    efcc:	2300      	movs	r3, #0
    efce:	2201      	movs	r2, #1
    efd0:	4620      	mov	r0, r4
    efd2:	f7f5 ff07 	bl	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    efd6:	2800      	cmp	r0, #0
    efd8:	d013      	beq.n	f002 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efda:	2801      	cmp	r0, #1
    efdc:	d004      	beq.n	efe8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    efde:	f240 51f9 	movw	r1, #1529	; 0x5f9
    efe2:	2030      	movs	r0, #48	; 0x30
    efe4:	f7f2 f9dc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efe8:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    efec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    eff0:	4408      	add	r0, r1
    eff2:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    eff6:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    effa:	1a28      	subs	r0, r5, r0
    effc:	b200      	sxth	r0, r0
    effe:	2800      	cmp	r0, #0
    f000:	dae1      	bge.n	efc6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f002:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f004:	2000      	movs	r0, #0
    f006:	4770      	bx	lr
    f008:	b570      	push	{r4, r5, r6, lr}
    f00a:	4604      	mov	r4, r0
    f00c:	f000 f8f0 	bl	f1f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    f010:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f014:	2000      	movs	r0, #0
    f016:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    f01a:	4601      	mov	r1, r0
    f01c:	2501      	movs	r5, #1
    f01e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    f022:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    f026:	4606      	mov	r6, r0
    f028:	f7fe ff60 	bl	deec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f02c:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f030:	1c40      	adds	r0, r0, #1
    f032:	280a      	cmp	r0, #10
    f034:	d201      	bcs.n	f03a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    f036:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    f03a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f03e:	b138      	cbz	r0, f050 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f040:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f044:	1c40      	adds	r0, r0, #1
    f046:	280a      	cmp	r0, #10
    f048:	d302      	bcc.n	f050 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f04a:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    f04e:	e002      	b.n	f056 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    f050:	2002      	movs	r0, #2
    f052:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    f056:	4620      	mov	r0, r4
    f058:	f000 f822 	bl	f0a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    f05c:	b120      	cbz	r0, f068 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    f05e:	4620      	mov	r0, r4
    f060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f064:	f000 b80d 	b.w	f082 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    f068:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f06c:	4631      	mov	r1, r6
    f06e:	f000 f8bd 	bl	f1ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f072:	2800      	cmp	r0, #0
    f074:	d104      	bne.n	f080 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    f076:	f240 618e 	movw	r1, #1678	; 0x68e
    f07a:	2030      	movs	r0, #48	; 0x30
    f07c:	f7f2 f990 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f080:	bd70      	pop	{r4, r5, r6, pc}
    f082:	b510      	push	{r4, lr}
    f084:	4604      	mov	r4, r0
    f086:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f08a:	f7fb fd83 	bl	ab94 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f08e:	2000      	movs	r0, #0
    f090:	7620      	strb	r0, [r4, #24]
    f092:	bd10      	pop	{r4, pc}
    f094:	b510      	push	{r4, lr}
    f096:	f7ff fd4b 	bl	eb30 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f09a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    f09e:	bd10      	pop	{r4, pc}
    f0a0:	b570      	push	{r4, r5, r6, lr}
    f0a2:	4605      	mov	r5, r0
    f0a4:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    f0a8:	b108      	cbz	r0, f0ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    f0aa:	2001      	movs	r0, #1
    f0ac:	bd70      	pop	{r4, r5, r6, pc}
    f0ae:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    f0b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f0b6:	4050      	eors	r0, r2
    f0b8:	ea70 0101 	orns	r1, r0, r1
    f0bc:	d012      	beq.n	f0e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    f0be:	2400      	movs	r4, #0
    f0c0:	4621      	mov	r1, r4
    f0c2:	4628      	mov	r0, r5
    f0c4:	f7ff ffe6 	bl	f094 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    f0c8:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    f0cc:	1840      	adds	r0, r0, r1
    f0ce:	4154      	adcs	r4, r2
    f0d0:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f0d4:	3df8      	subs	r5, #248	; 0xf8
    f0d6:	1a10      	subs	r0, r2, r0
    f0d8:	41a1      	sbcs	r1, r4
    f0da:	d503      	bpl.n	f0e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    f0dc:	4628      	mov	r0, r5
    f0de:	f7f4 fe75 	bl	3dcc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f0e2:	e7e2      	b.n	f0aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    f0e4:	2000      	movs	r0, #0
    f0e6:	bd70      	pop	{r4, r5, r6, pc}
    f0e8:	b510      	push	{r4, lr}
    f0ea:	4604      	mov	r4, r0
    f0ec:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    f0f0:	f000 f9ef 	bl	f4d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    f0f4:	4602      	mov	r2, r0
    f0f6:	4620      	mov	r0, r4
    f0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0fc:	f240 111b 	movw	r1, #283	; 0x11b
    f100:	f7ff ba5c 	b.w	e5bc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f104:	b510      	push	{r4, lr}
    f106:	f7f8 ffe9 	bl	80dc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f10e:	f7fb bea3 	b.w	ae58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f116:	4604      	mov	r4, r0
    f118:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    f11c:	2800      	cmp	r0, #0
    f11e:	d051      	beq.n	f1c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    f120:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f124:	2803      	cmp	r0, #3
    f126:	d14d      	bne.n	f1c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    f128:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    f12c:	f001 fbbc 	bl	108a8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f130:	4605      	mov	r5, r0
    f132:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f136:	f7f5 fd77 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f13a:	4428      	add	r0, r5
    f13c:	b286      	uxth	r6, r0
    f13e:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f142:	f7f5 fd71 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f146:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f14a:	fa1f f880 	uxth.w	r8, r0
    f14e:	4648      	mov	r0, r9
    f150:	f7f9 f882 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f154:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    f158:	1a0d      	subs	r5, r1, r0
    f15a:	4648      	mov	r0, r9
    f15c:	f7f9 f8a8 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f160:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f164:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f168:	fbb0 f0fa 	udiv	r0, r0, sl
    f16c:	1a2d      	subs	r5, r5, r0
    f16e:	4648      	mov	r0, r9
    f170:	f7f9 f872 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f174:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    f178:	1a0f      	subs	r7, r1, r0
    f17a:	4648      	mov	r0, r9
    f17c:	f7f9 f898 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f180:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f184:	4401      	add	r1, r0
    f186:	fbb1 f0fa 	udiv	r0, r1, sl
    f18a:	1a39      	subs	r1, r7, r0
    f18c:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f190:	4370      	muls	r0, r6
    f192:	fbb0 f2f8 	udiv	r2, r0, r8
    f196:	2029      	movs	r0, #41	; 0x29
    f198:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f19c:	3260      	adds	r2, #96	; 0x60
    f19e:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f1a2:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f1a6:	42a9      	cmp	r1, r5
    f1a8:	d801      	bhi.n	f1ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    f1aa:	4285      	cmp	r5, r0
    f1ac:	d901      	bls.n	f1b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    f1ae:	f7fd f86f 	bl	c290 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f1b2:	4631      	mov	r1, r6
    f1b4:	6920      	ldr	r0, [r4, #16]
    f1b6:	f7fd f8d3 	bl	c360 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f1ba:	2100      	movs	r1, #0
    f1bc:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f1c0:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1c8:	b570      	push	{r4, r5, r6, lr}
    f1ca:	460c      	mov	r4, r1
    f1cc:	4605      	mov	r5, r0
    f1ce:	f7f9 f86f 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1d2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f1d6:	4408      	add	r0, r1
    f1d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f1dc:	fbb0 f6f1 	udiv	r6, r0, r1
    f1e0:	4628      	mov	r0, r5
    f1e2:	f7f9 f839 	bl	8258 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f1e6:	4430      	add	r0, r6
    f1e8:	4420      	add	r0, r4
    f1ea:	bd70      	pop	{r4, r5, r6, pc}
    f1ec:	f7fb b872 	b.w	a2d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f1f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f1f2:	4604      	mov	r4, r0
    f1f4:	f7ff fcc3 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f1f8:	b1f8      	cbz	r0, f23a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    f1fa:	4620      	mov	r0, r4
    f1fc:	f7ff fcb7 	bl	eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f200:	b918      	cbnz	r0, f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    f202:	4620      	mov	r0, r4
    f204:	f7ff fcbd 	bl	eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f208:	b140      	cbz	r0, f21c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    f20a:	2455      	movs	r4, #85	; 0x55
    f20c:	4668      	mov	r0, sp
    f20e:	f7fd faff 	bl	c810 <mpsl_fem_pa_is_configured>
    f212:	f89d 0000 	ldrb.w	r0, [sp]
    f216:	b118      	cbz	r0, f220 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    f218:	2501      	movs	r5, #1
    f21a:	e002      	b.n	f222 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    f21c:	2450      	movs	r4, #80	; 0x50
    f21e:	e7f5      	b.n	f20c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f220:	2500      	movs	r5, #0
    f222:	a801      	add	r0, sp, #4
    f224:	f7fd fadc 	bl	c7e0 <mpsl_fem_lna_is_configured>
    f228:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f22c:	b100      	cbz	r0, f230 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    f22e:	2001      	movs	r0, #1
    f230:	4305      	orrs	r5, r0
    f232:	d000      	beq.n	f236 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    f234:	340a      	adds	r4, #10
    f236:	4620      	mov	r0, r4
    f238:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f23a:	2061      	movs	r0, #97	; 0x61
    f23c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f23e:	b570      	push	{r4, r5, r6, lr}
    f240:	4604      	mov	r4, r0
    f242:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f244:	2500      	movs	r5, #0
    f246:	b130      	cbz	r0, f256 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f248:	f7f4 fa58 	bl	36fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f24c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f24e:	fbb0 f2f1 	udiv	r2, r0, r1
    f252:	fb01 0512 	mls	r5, r1, r2, r0
    f256:	4620      	mov	r0, r4
    f258:	f7ff fc66 	bl	eb28 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f25c:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    f260:	4428      	add	r0, r5
    f262:	34e8      	adds	r4, #232	; 0xe8
    f264:	2500      	movs	r5, #0
    f266:	1882      	adds	r2, r0, r2
    f268:	eb45 0001 	adc.w	r0, r5, r1
    f26c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f270:	f804 5b0b 	strb.w	r5, [r4], #11
    f274:	2001      	movs	r0, #1
    f276:	f804 0901 	strb.w	r0, [r4], #-1
    f27a:	2002      	movs	r0, #2
    f27c:	f804 09f2 	strb.w	r0, [r4], #-242
    f280:	4620      	mov	r0, r4
    f282:	f7ff ffb5 	bl	f1f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    f286:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f28a:	4620      	mov	r0, r4
    f28c:	f7ff ff08 	bl	f0a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    f290:	b930      	cbnz	r0, f2a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    f292:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f296:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    f29a:	f7ff ffa7 	bl	f1ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f29e:	b128      	cbz	r0, f2ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    f2a0:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    f2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f2a8:	f7ff bf2c 	b.w	f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    f2ac:	f240 61d4 	movw	r1, #1748	; 0x6d4
    f2b0:	2030      	movs	r0, #48	; 0x30
    f2b2:	f7f2 f875 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2b6:	b510      	push	{r4, lr}
    f2b8:	4604      	mov	r4, r0
    f2ba:	2000      	movs	r0, #0
    f2bc:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f2c0:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f2c4:	f7fb fc66 	bl	ab94 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f2c8:	2020      	movs	r0, #32
    f2ca:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f2ce:	bd10      	pop	{r4, pc}
    f2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f2d4:	4604      	mov	r4, r0
    f2d6:	2500      	movs	r5, #0
    f2d8:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    f2dc:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    f2e0:	4689      	mov	r9, r1
    f2e2:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f2e6:	f04f 0801 	mov.w	r8, #1
    f2ea:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    f2ee:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    f2f2:	4641      	mov	r1, r8
    f2f4:	34c8      	adds	r4, #200	; 0xc8
    f2f6:	f7f3 fe19 	bl	2f2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f2fa:	6860      	ldr	r0, [r4, #4]
    f2fc:	f8c0 6290 	str.w	r6, [r0, #656]	; 0x290
    f300:	f8c0 7294 	str.w	r7, [r0, #660]	; 0x294
    f304:	6861      	ldr	r1, [r4, #4]
    f306:	7820      	ldrb	r0, [r4, #0]
    f308:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    f30c:	6861      	ldr	r1, [r4, #4]
    f30e:	f8c1 92a8 	str.w	r9, [r1, #680]	; 0x2a8
    f312:	6860      	ldr	r0, [r4, #4]
    f314:	e9c0 67a6 	strd	r6, r7, [r0, #664]	; 0x298
    f318:	6864      	ldr	r4, [r4, #4]
    f31a:	f884 525c 	strb.w	r5, [r4, #604]	; 0x25c
    f31e:	2300      	movs	r3, #0
    f320:	f8a4 52a0 	strh.w	r5, [r4, #672]	; 0x2a0
    f324:	461a      	mov	r2, r3
    f326:	4619      	mov	r1, r3
    f328:	4620      	mov	r0, r4
    f32a:	9500      	str	r5, [sp, #0]
    f32c:	f7f5 fd5a 	bl	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f330:	b120      	cbz	r0, f33c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    f332:	f240 2119 	movw	r1, #537	; 0x219
    f336:	2030      	movs	r0, #48	; 0x30
    f338:	f7f2 f832 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f33c:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f340:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f344:	f884 825c 	strb.w	r8, [r4, #604]	; 0x25c
    f348:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f34c:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f350:	3494      	adds	r4, #148	; 0x94
    f352:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f356:	8820      	ldrh	r0, [r4, #0]
    f358:	1e40      	subs	r0, r0, #1
    f35a:	8020      	strh	r0, [r4, #0]
    f35c:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f360:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f364:	f7ff bece 	b.w	f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    f368:	b570      	push	{r4, r5, r6, lr}
    f36a:	b140      	cbz	r0, f37e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    f36c:	2909      	cmp	r1, #9
    f36e:	d249      	bcs.n	f404 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    f370:	e8df f001 	tbb	[pc, r1]
    f374:	3c3c1507 	.word	0x3c3c1507
    f378:	402a4838 	.word	0x402a4838
    f37c:	0044      	.short	0x0044
    f37e:	21cb      	movs	r1, #203	; 0xcb
    f380:	e03d      	b.n	f3fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f382:	4604      	mov	r4, r0
    f384:	f7f4 fcf2 	bl	3d6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f388:	b110      	cbz	r0, f390 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    f38a:	f240 2175 	movw	r1, #629	; 0x275
    f38e:	e036      	b.n	f3fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f390:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f398:	38ff      	subs	r0, #255	; 0xff
    f39a:	f7fb be77 	b.w	b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f39e:	4605      	mov	r5, r0
    f3a0:	f7ff fbe9 	bl	eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f3a4:	b9b0      	cbnz	r0, f3d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    f3a6:	2100      	movs	r1, #0
    f3a8:	4628      	mov	r0, r5
    f3aa:	f7ff fe73 	bl	f094 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    f3ae:	4604      	mov	r4, r0
    f3b0:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f3b4:	42a0      	cmp	r0, r4
    f3b6:	d20b      	bcs.n	f3d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    f3b8:	1a20      	subs	r0, r4, r0
    f3ba:	2103      	movs	r1, #3
    f3bc:	f7fa fdb6 	bl	9f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f3c0:	b130      	cbz	r0, f3d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    f3c2:	4628      	mov	r0, r5
    f3c4:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f3c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3cc:	f7ff bbaa 	b.w	eb24 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f3d0:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f3d4:	4628      	mov	r0, r5
    f3d6:	f7f4 fce5 	bl	3da4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f3da:	2800      	cmp	r0, #0
    f3dc:	d014      	beq.n	f408 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    f3de:	f240 21a9 	movw	r1, #681	; 0x2a9
    f3e2:	e00c      	b.n	f3fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3e8:	f7f9 b84c 	b.w	8484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f3ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3f0:	f7ff be0a 	b.w	f008 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3f8:	f7ff be43 	b.w	f082 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    f3fc:	21eb      	movs	r1, #235	; 0xeb
    f3fe:	2030      	movs	r0, #48	; 0x30
    f400:	f7f1 ffce 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f404:	21ef      	movs	r1, #239	; 0xef
    f406:	e7fa      	b.n	f3fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f408:	bd70      	pop	{r4, r5, r6, pc}
    f40a:	b510      	push	{r4, lr}
    f40c:	0004      	movs	r4, r0
    f40e:	d008      	beq.n	f422 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    f410:	2909      	cmp	r1, #9
    f412:	d25c      	bcs.n	f4ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    f414:	e8df f001 	tbb	[pc, r1]
    f418:	40403807 	.word	0x40403807
    f41c:	4c455b3c 	.word	0x4c455b3c
    f420:	0057      	.short	0x0057
    f422:	2197      	movs	r1, #151	; 0x97
    f424:	e050      	b.n	f4c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f426:	2100      	movs	r1, #0
    f428:	f8c4 12ac 	str.w	r1, [r4, #684]	; 0x2ac
    f42c:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f430:	4620      	mov	r0, r4
    f432:	b189      	cbz	r1, f458 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    f434:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f438:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f43c:	428a      	cmp	r2, r1
    f43e:	d106      	bne.n	f44e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    f440:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f444:	1a51      	subs	r1, r2, r1
    f446:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f44a:	4611      	mov	r1, r2
    f44c:	e00d      	b.n	f46a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f44e:	1a51      	subs	r1, r2, r1
    f450:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f454:	b291      	uxth	r1, r2
    f456:	e008      	b.n	f46a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f458:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f45c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f460:	1a89      	subs	r1, r1, r2
    f462:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f466:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f46a:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f46e:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f472:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f476:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f47a:	f7f6 f887 	bl	558c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f47e:	4620      	mov	r0, r4
    f480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f484:	f7f5 beb8 	b.w	51f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    f488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f48c:	f000 b83c 	b.w	f508 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f494:	f7f8 bff6 	b.w	8484 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f498:	4620      	mov	r0, r4
    f49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f49e:	f7f5 bee5 	b.w	526c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x680>
    f4a2:	2001      	movs	r0, #1
    f4a4:	f7fa fd32 	bl	9f0c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4ac:	f7fe bbc3 	b.w	dc36 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f4b0:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f4b4:	2804      	cmp	r0, #4
    f4b6:	d001      	beq.n	f4bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    f4b8:	21b9      	movs	r1, #185	; 0xb9
    f4ba:	e005      	b.n	f4c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f4bc:	4620      	mov	r0, r4
    f4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4c2:	f7ff bef8 	b.w	f2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f4c6:	21bf      	movs	r1, #191	; 0xbf
    f4c8:	2030      	movs	r0, #48	; 0x30
    f4ca:	f7f1 ff69 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4ce:	21c3      	movs	r1, #195	; 0xc3
    f4d0:	e7fa      	b.n	f4c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f4d2:	b510      	push	{r4, lr}
    f4d4:	f7f8 feec 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f4d8:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f4dc:	4408      	add	r0, r1
    f4de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f4e2:	fbb0 f0f1 	udiv	r0, r0, r1
    f4e6:	f200 1079 	addw	r0, r0, #377	; 0x179
    f4ea:	bd10      	pop	{r4, pc}
    f4ec:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f4f0:	f001 0307 	and.w	r3, r1, #7
    f4f4:	7802      	ldrb	r2, [r0, #0]
    f4f6:	2101      	movs	r1, #1
    f4f8:	4099      	lsls	r1, r3
    f4fa:	438a      	bics	r2, r1
    f4fc:	7002      	strb	r2, [r0, #0]
    f4fe:	4770      	bx	lr

0000f500 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f500:	f7f2 bad8 	b.w	1ab4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f504 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f504:	2000      	movs	r0, #0
    f506:	4770      	bx	lr

0000f508 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f508:	f7f2 bf68 	b.w	23dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f50c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f50c:	2100      	movs	r1, #0
    f50e:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f512:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f516:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f51a:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f51e:	b109      	cbz	r1, f524 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f520:	2102      	movs	r1, #2
    f522:	e000      	b.n	f526 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f524:	2103      	movs	r1, #3
    f526:	f7f5 bb27 	b.w	4b78 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f52a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f52e:	28fe      	cmp	r0, #254	; 0xfe
    f530:	d001      	beq.n	f536 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f532:	2001      	movs	r0, #1
    f534:	4770      	bx	lr
    f536:	2000      	movs	r0, #0
    f538:	4770      	bx	lr
    f53a:	b510      	push	{r4, lr}
    f53c:	2801      	cmp	r0, #1
    f53e:	d006      	beq.n	f54e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f540:	2802      	cmp	r0, #2
    f542:	d004      	beq.n	f54e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f544:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    f548:	2006      	movs	r0, #6
    f54a:	f7f1 ff29 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f54e:	bd10      	pop	{r4, pc}
    f550:	2801      	cmp	r0, #1
    f552:	d002      	beq.n	f55a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f554:	2802      	cmp	r0, #2
    f556:	d105      	bne.n	f564 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f558:	e002      	b.n	f560 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f55a:	2901      	cmp	r1, #1
    f55c:	d004      	beq.n	f568 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f55e:	e001      	b.n	f564 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f560:	2902      	cmp	r1, #2
    f562:	d001      	beq.n	f568 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f564:	2000      	movs	r0, #0
    f566:	4770      	bx	lr
    f568:	2001      	movs	r0, #1
    f56a:	4770      	bx	lr
    f56c:	1a40      	subs	r0, r0, r1
    f56e:	b200      	sxth	r0, r0
    f570:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f574:	4288      	cmp	r0, r1
    f576:	dc01      	bgt.n	f57c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f578:	2800      	cmp	r0, #0
    f57a:	dc01      	bgt.n	f580 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f57c:	2001      	movs	r0, #1
    f57e:	4770      	bx	lr
    f580:	2000      	movs	r0, #0
    f582:	4770      	bx	lr
    f584:	6842      	ldr	r2, [r0, #4]
    f586:	2100      	movs	r1, #0
    f588:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f58c:	6842      	ldr	r2, [r0, #4]
    f58e:	f882 10d6 	strb.w	r1, [r2, #214]	; 0xd6
    f592:	6840      	ldr	r0, [r0, #4]
    f594:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    f598:	4770      	bx	lr
    f59a:	b510      	push	{r4, lr}
    f59c:	4604      	mov	r4, r0
    f59e:	6840      	ldr	r0, [r0, #4]
    f5a0:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    f5a4:	0740      	lsls	r0, r0, #29
    f5a6:	d501      	bpl.n	f5ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa0>
    f5a8:	2001      	movs	r0, #1
    f5aa:	bd10      	pop	{r4, pc}
    f5ac:	f7f6 f8f0 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f5b0:	6860      	ldr	r0, [r4, #4]
    f5b2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f5b6:	f041 0104 	orr.w	r1, r1, #4
    f5ba:	6001      	str	r1, [r0, #0]
    f5bc:	2000      	movs	r0, #0
    f5be:	bd10      	pop	{r4, pc}
    f5c0:	b510      	push	{r4, lr}
    f5c2:	4604      	mov	r4, r0
    f5c4:	6840      	ldr	r0, [r0, #4]
    f5c6:	2301      	movs	r3, #1
    f5c8:	2109      	movs	r1, #9
    f5ca:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f5ce:	3080      	adds	r0, #128	; 0x80
    f5d0:	f7fe fbc2 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f5d4:	2800      	cmp	r0, #0
    f5d6:	d009      	beq.n	f5ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe0>
    f5d8:	6861      	ldr	r1, [r4, #4]
    f5da:	2000      	movs	r0, #0
    f5dc:	f881 00ca 	strb.w	r0, [r1, #202]	; 0xca
    f5e0:	6861      	ldr	r1, [r4, #4]
    f5e2:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    f5e6:	6861      	ldr	r1, [r4, #4]
    f5e8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f5ec:	bd10      	pop	{r4, pc}
    f5ee:	b510      	push	{r4, lr}
    f5f0:	4604      	mov	r4, r0
    f5f2:	6840      	ldr	r0, [r0, #4]
    f5f4:	2301      	movs	r3, #1
    f5f6:	2100      	movs	r1, #0
    f5f8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    f5fc:	3080      	adds	r0, #128	; 0x80
    f5fe:	f7fe fbab 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f602:	2800      	cmp	r0, #0
    f604:	6860      	ldr	r0, [r4, #4]
    f606:	d00b      	beq.n	f620 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x114>
    f608:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    f60c:	2800      	cmp	r0, #0
    f60e:	d006      	beq.n	f61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x112>
    f610:	f7f6 f8be 	bl	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f614:	6861      	ldr	r1, [r4, #4]
    f616:	2011      	movs	r0, #17
    f618:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f61c:	2000      	movs	r0, #0
    f61e:	bd10      	pop	{r4, pc}
    f620:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    f624:	2301      	movs	r3, #1
    f626:	2105      	movs	r1, #5
    f628:	3080      	adds	r0, #128	; 0x80
    f62a:	f7fe fb95 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f62e:	b108      	cbz	r0, f634 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x128>
    f630:	2008      	movs	r0, #8
    f632:	bd10      	pop	{r4, pc}
    f634:	2001      	movs	r0, #1
    f636:	bd10      	pop	{r4, pc}
    f638:	6840      	ldr	r0, [r0, #4]
    f63a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f63e:	2912      	cmp	r1, #18
    f640:	d001      	beq.n	f646 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x13a>
    f642:	2002      	movs	r0, #2
    f644:	4770      	bx	lr
    f646:	2113      	movs	r1, #19
    f648:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f64c:	2000      	movs	r0, #0
    f64e:	4770      	bx	lr
    f650:	b510      	push	{r4, lr}
    f652:	4604      	mov	r4, r0
    f654:	6840      	ldr	r0, [r0, #4]
    f656:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    f65a:	2818      	cmp	r0, #24
    f65c:	d001      	beq.n	f662 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x156>
    f65e:	2002      	movs	r0, #2
    f660:	bd10      	pop	{r4, pc}
    f662:	f7f6 f8a1 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f666:	6861      	ldr	r1, [r4, #4]
    f668:	201c      	movs	r0, #28
    f66a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f66e:	2000      	movs	r0, #0
    f670:	bd10      	pop	{r4, pc}
    f672:	b510      	push	{r4, lr}
    f674:	6843      	ldr	r3, [r0, #4]
    f676:	4604      	mov	r4, r0
    f678:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f67c:	2808      	cmp	r0, #8
    f67e:	d20d      	bcs.n	f69c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x190>
    f680:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f684:	f1c0 0008 	rsb	r0, r0, #8
    f688:	b2c1      	uxtb	r1, r0
    f68a:	1898      	adds	r0, r3, r2
    f68c:	f7f1 ff28 	bl	14e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f690:	6861      	ldr	r1, [r4, #4]
    f692:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f696:	4410      	add	r0, r2
    f698:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f69c:	6862      	ldr	r2, [r4, #4]
    f69e:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f6a2:	3908      	subs	r1, #8
    f6a4:	2904      	cmp	r1, #4
    f6a6:	d20d      	bcs.n	f6c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b8>
    f6a8:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f6ac:	f1c1 0104 	rsb	r1, r1, #4
    f6b0:	b2c9      	uxtb	r1, r1
    f6b2:	4410      	add	r0, r2
    f6b4:	f7f1 ff14 	bl	14e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f6b8:	6861      	ldr	r1, [r4, #4]
    f6ba:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f6be:	4410      	add	r0, r2
    f6c0:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f6c4:	6860      	ldr	r0, [r4, #4]
    f6c6:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f6ca:	290c      	cmp	r1, #12
    f6cc:	d30f      	bcc.n	f6ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e2>
    f6ce:	d005      	beq.n	f6dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d0>
    f6d0:	f640 1176 	movw	r1, #2422	; 0x976
    f6d4:	f04f 0031 	mov.w	r0, #49	; 0x31
    f6d8:	f7f1 fe62 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6dc:	2100      	movs	r1, #0
    f6de:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f6e2:	2101      	movs	r1, #1
    f6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6e8:	2004      	movs	r0, #4
    f6ea:	f7f6 be05 	b.w	62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    f6ee:	bd10      	pop	{r4, pc}
    f6f0:	6842      	ldr	r2, [r0, #4]
    f6f2:	2131      	movs	r1, #49	; 0x31
    f6f4:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f6f8:	6840      	ldr	r0, [r0, #4]
    f6fa:	2100      	movs	r1, #0
    f6fc:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f700:	4770      	bx	lr
    f702:	b510      	push	{r4, lr}
    f704:	6841      	ldr	r1, [r0, #4]
    f706:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f70a:	2a15      	cmp	r2, #21
    f70c:	d004      	beq.n	f718 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x20c>
    f70e:	f640 011b 	movw	r1, #2075	; 0x81b
    f712:	2031      	movs	r0, #49	; 0x31
    f714:	f7f1 fe44 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f718:	2201      	movs	r2, #1
    f71a:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f71e:	6840      	ldr	r0, [r0, #4]
    f720:	2116      	movs	r1, #22
    f722:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f726:	bd10      	pop	{r4, pc}
    f728:	f7ff b8ca 	b.w	e8c0 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f72c:	b510      	push	{r4, lr}
    f72e:	4604      	mov	r4, r0
    f730:	6840      	ldr	r0, [r0, #4]
    f732:	2301      	movs	r3, #1
    f734:	2100      	movs	r1, #0
    f736:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f73a:	3080      	adds	r0, #128	; 0x80
    f73c:	f7fe fb0c 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f740:	b120      	cbz	r0, f74c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x240>
    f742:	6861      	ldr	r1, [r4, #4]
    f744:	201d      	movs	r0, #29
    f746:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f74a:	bd10      	pop	{r4, pc}
    f74c:	f640 017e 	movw	r1, #2174	; 0x87e
    f750:	2031      	movs	r0, #49	; 0x31
    f752:	f7f1 fe25 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f756:	b510      	push	{r4, lr}
    f758:	6841      	ldr	r1, [r0, #4]
    f75a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    f75e:	06c2      	lsls	r2, r0, #27
    f760:	d402      	bmi.n	f768 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x25c>
    f762:	f640 0185 	movw	r1, #2181	; 0x885
    f766:	e003      	b.n	f770 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x264>
    f768:	0682      	lsls	r2, r0, #26
    f76a:	d504      	bpl.n	f776 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x26a>
    f76c:	f640 0186 	movw	r1, #2182	; 0x886
    f770:	2031      	movs	r0, #49	; 0x31
    f772:	f7f1 fe15 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f776:	f020 0010 	bic.w	r0, r0, #16
    f77a:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    f77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f782:	f7f6 b811 	b.w	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f786:	b510      	push	{r4, lr}
    f788:	4604      	mov	r4, r0
    f78a:	6840      	ldr	r0, [r0, #4]
    f78c:	2301      	movs	r3, #1
    f78e:	2100      	movs	r1, #0
    f790:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f794:	3080      	adds	r0, #128	; 0x80
    f796:	f7fe fadf 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f79a:	b120      	cbz	r0, f7a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x29a>
    f79c:	6861      	ldr	r1, [r4, #4]
    f79e:	200f      	movs	r0, #15
    f7a0:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f7a4:	bd10      	pop	{r4, pc}
    f7a6:	f640 0171 	movw	r1, #2161	; 0x871
    f7aa:	2031      	movs	r0, #49	; 0x31
    f7ac:	f7f1 fdf8 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7b0:	6840      	ldr	r0, [r0, #4]
    f7b2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f7b6:	f021 0104 	bic.w	r1, r1, #4
    f7ba:	6001      	str	r1, [r0, #0]
    f7bc:	f7f5 bff4 	b.w	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f7c0:	b510      	push	{r4, lr}
    f7c2:	6841      	ldr	r1, [r0, #4]
    f7c4:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f7c8:	2a11      	cmp	r2, #17
    f7ca:	d004      	beq.n	f7d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ca>
    f7cc:	f640 0113 	movw	r1, #2067	; 0x813
    f7d0:	2031      	movs	r0, #49	; 0x31
    f7d2:	f7f1 fde5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7d6:	2201      	movs	r2, #1
    f7d8:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f7dc:	6840      	ldr	r0, [r0, #4]
    f7de:	2112      	movs	r1, #18
    f7e0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f7e4:	bd10      	pop	{r4, pc}
    f7e6:	b510      	push	{r4, lr}
    f7e8:	4604      	mov	r4, r0
    f7ea:	6840      	ldr	r0, [r0, #4]
    f7ec:	2301      	movs	r3, #1
    f7ee:	2100      	movs	r1, #0
    f7f0:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f7f4:	3080      	adds	r0, #128	; 0x80
    f7f6:	f7fe faaf 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f7fa:	b120      	cbz	r0, f806 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2fa>
    f7fc:	6861      	ldr	r1, [r4, #4]
    f7fe:	2020      	movs	r0, #32
    f800:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f804:	bd10      	pop	{r4, pc}
    f806:	f44f 6109 	mov.w	r1, #2192	; 0x890
    f80a:	2031      	movs	r0, #49	; 0x31
    f80c:	f7f1 fdc8 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f810:	b510      	push	{r4, lr}
    f812:	6841      	ldr	r1, [r0, #4]
    f814:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f818:	2822      	cmp	r0, #34	; 0x22
    f81a:	d005      	beq.n	f828 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f81c:	b120      	cbz	r0, f828 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f81e:	f640 0197 	movw	r1, #2199	; 0x897
    f822:	2031      	movs	r0, #49	; 0x31
    f824:	f7f1 fdbc 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f828:	2023      	movs	r0, #35	; 0x23
    f82a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f82e:	bd10      	pop	{r4, pc}
    f830:	b510      	push	{r4, lr}
    f832:	6840      	ldr	r0, [r0, #4]
    f834:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f838:	292f      	cmp	r1, #47	; 0x2f
    f83a:	d006      	beq.n	f84a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f83c:	2916      	cmp	r1, #22
    f83e:	d00b      	beq.n	f858 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x34c>
    f840:	f640 013d 	movw	r1, #2109	; 0x83d
    f844:	2031      	movs	r0, #49	; 0x31
    f846:	f7f1 fdab 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f84a:	2100      	movs	r1, #0
    f84c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f854:	f7f5 bfa8 	b.w	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f858:	211a      	movs	r1, #26
    f85a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f85e:	bd10      	pop	{r4, pc}
    f860:	b510      	push	{r4, lr}
    f862:	6840      	ldr	r0, [r0, #4]
    f864:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f868:	2916      	cmp	r1, #22
    f86a:	d004      	beq.n	f876 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36a>
    f86c:	f640 0128 	movw	r1, #2088	; 0x828
    f870:	2031      	movs	r0, #49	; 0x31
    f872:	f7f1 fd95 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f876:	211a      	movs	r1, #26
    f878:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f87c:	bd10      	pop	{r4, pc}
    f87e:	f7ff b80d 	b.w	e89c <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f882:	b510      	push	{r4, lr}
    f884:	6840      	ldr	r0, [r0, #4]
    f886:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f88a:	2916      	cmp	r1, #22
    f88c:	d004      	beq.n	f898 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    f88e:	f640 0122 	movw	r1, #2082	; 0x822
    f892:	2031      	movs	r0, #49	; 0x31
    f894:	f7f1 fd84 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f898:	2118      	movs	r1, #24
    f89a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f89e:	bd10      	pop	{r4, pc}
    f8a0:	b510      	push	{r4, lr}
    f8a2:	4604      	mov	r4, r0
    f8a4:	6840      	ldr	r0, [r0, #4]
    f8a6:	2301      	movs	r3, #1
    f8a8:	4619      	mov	r1, r3
    f8aa:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    f8ae:	3080      	adds	r0, #128	; 0x80
    f8b0:	f7fe fa52 	bl	dd58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f8b4:	2800      	cmp	r0, #0
    f8b6:	d103      	bne.n	f8c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3b4>
    f8b8:	6861      	ldr	r1, [r4, #4]
    f8ba:	2007      	movs	r0, #7
    f8bc:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    f8c0:	bd10      	pop	{r4, pc}
    f8c2:	f7ff b84f 	b.w	e964 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f8c6:	b570      	push	{r4, r5, r6, lr}
    f8c8:	4614      	mov	r4, r2
    f8ca:	460e      	mov	r6, r1
    f8cc:	6861      	ldr	r1, [r4, #4]
    f8ce:	4602      	mov	r2, r0
    f8d0:	2500      	movs	r5, #0
    f8d2:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    f8d6:	2a0e      	cmp	r2, #14
    f8d8:	d00a      	beq.n	f8f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3e4>
    f8da:	2a12      	cmp	r2, #18
    f8dc:	d011      	beq.n	f902 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f6>
    f8de:	2a14      	cmp	r2, #20
    f8e0:	d016      	beq.n	f910 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x404>
    f8e2:	2a17      	cmp	r2, #23
    f8e4:	d022      	beq.n	f92c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x420>
    f8e6:	f240 4115 	movw	r1, #1045	; 0x415
    f8ea:	2031      	movs	r0, #49	; 0x31
    f8ec:	f7f1 fd58 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8f0:	2804      	cmp	r0, #4
    f8f2:	d12f      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f8f4:	4620      	mov	r0, r4
    f8f6:	f7ff fe45 	bl	f584 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f8fa:	4620      	mov	r0, r4
    f8fc:	f7f3 ffaa 	bl	3854 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    f900:	e028      	b.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f902:	280f      	cmp	r0, #15
    f904:	d126      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f906:	4620      	mov	r0, r4
    f908:	f7ff fe5a 	bl	f5c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xb4>
    f90c:	4605      	mov	r5, r0
    f90e:	e021      	b.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f910:	281d      	cmp	r0, #29
    f912:	d11f      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f914:	4620      	mov	r0, r4
    f916:	f7ff fe35 	bl	f584 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f91a:	b126      	cbz	r6, f926 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x41a>
    f91c:	6860      	ldr	r0, [r4, #4]
    f91e:	2105      	movs	r1, #5
    f920:	30ec      	adds	r0, #236	; 0xec
    f922:	f7ff fde3 	bl	f4ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    f926:	f7f6 f917 	bl	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    f92a:	e013      	b.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f92c:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f930:	2823      	cmp	r0, #35	; 0x23
    f932:	d10f      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f934:	2600      	movs	r6, #0
    f936:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    f93a:	f7f5 ff35 	bl	57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f93e:	6860      	ldr	r0, [r4, #4]
    f940:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    f944:	2801      	cmp	r0, #1
    f946:	d102      	bne.n	f94e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x442>
    f948:	2000      	movs	r0, #0
    f94a:	f7f6 fde7 	bl	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    f94e:	6860      	ldr	r0, [r4, #4]
    f950:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    f954:	4628      	mov	r0, r5
    f956:	bd70      	pop	{r4, r5, r6, pc}
    f958:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f95c:	f001 0107 	and.w	r1, r1, #7
    f960:	7800      	ldrb	r0, [r0, #0]
    f962:	40c8      	lsrs	r0, r1
    f964:	f000 0001 	and.w	r0, r0, #1
    f968:	4770      	bx	lr

0000f96a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f96e:	6856      	ldr	r6, [r2, #4]
    f970:	460c      	mov	r4, r1
    f972:	f506 7598 	add.w	r5, r6, #304	; 0x130
    f976:	f106 0780 	add.w	r7, r6, #128	; 0x80
    f97a:	2823      	cmp	r0, #35	; 0x23
    f97c:	d008      	beq.n	f990 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f97e:	2824      	cmp	r0, #36	; 0x24
    f980:	d014      	beq.n	f9ac <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f982:	2825      	cmp	r0, #37	; 0x25
    f984:	d02a      	beq.n	f9dc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f986:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f98a:	2078      	movs	r0, #120	; 0x78
    f98c:	f7f1 fd08 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f990:	7de8      	ldrb	r0, [r5, #23]
    f992:	f000 f8d4 	bl	fb3e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f996:	7de9      	ldrb	r1, [r5, #23]
    f998:	7121      	strb	r1, [r4, #4]
    f99a:	7e29      	ldrb	r1, [r5, #24]
    f99c:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f9a0:	7161      	strb	r1, [r4, #5]
    f9a2:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f9a6:	71a0      	strb	r0, [r4, #6]
    f9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9ac:	7d28      	ldrb	r0, [r5, #20]
    f9ae:	f000 f8c6 	bl	fb3e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f9b2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f9b6:	7f78      	ldrb	r0, [r7, #29]
    f9b8:	366f      	adds	r6, #111	; 0x6f
    f9ba:	2828      	cmp	r0, #40	; 0x28
    f9bc:	d00c      	beq.n	f9d8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f9be:	68b8      	ldr	r0, [r7, #8]
    f9c0:	f7f3 ffb6 	bl	3930 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f9c4:	7831      	ldrb	r1, [r6, #0]
    f9c6:	7121      	strb	r1, [r4, #4]
    f9c8:	7d69      	ldrb	r1, [r5, #21]
    f9ca:	7161      	strb	r1, [r4, #5]
    f9cc:	7871      	ldrb	r1, [r6, #1]
    f9ce:	71a1      	strb	r1, [r4, #6]
    f9d0:	71e0      	strb	r0, [r4, #7]
    f9d2:	2000      	movs	r0, #0
    f9d4:	75a8      	strb	r0, [r5, #22]
    f9d6:	e7e7      	b.n	f9a8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f9d8:	20ff      	movs	r0, #255	; 0xff
    f9da:	e7f3      	b.n	f9c4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f9dc:	7d28      	ldrb	r0, [r5, #20]
    f9de:	f000 f8ae 	bl	fb3e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f9e2:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f9e6:	7d29      	ldrb	r1, [r5, #20]
    f9e8:	7121      	strb	r1, [r4, #4]
    f9ea:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f9ee:	7161      	strb	r1, [r4, #5]
    f9f0:	7d69      	ldrb	r1, [r5, #21]
    f9f2:	71a1      	strb	r1, [r4, #6]
    f9f4:	7840      	ldrb	r0, [r0, #1]
    f9f6:	71e0      	strb	r0, [r4, #7]
    f9f8:	e7d6      	b.n	f9a8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f9fa <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f9fa:	b510      	push	{r4, lr}
    f9fc:	2801      	cmp	r0, #1
    f9fe:	d006      	beq.n	fa0e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    fa00:	2802      	cmp	r0, #2
    fa02:	d006      	beq.n	fa12 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    fa04:	f240 2162 	movw	r1, #610	; 0x262
    fa08:	2078      	movs	r0, #120	; 0x78
    fa0a:	f7f1 fcc9 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa0e:	2000      	movs	r0, #0
    fa10:	bd10      	pop	{r4, pc}
    fa12:	2001      	movs	r0, #1
    fa14:	bd10      	pop	{r4, pc}

0000fa16 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    fa16:	207f      	movs	r0, #127	; 0x7f
    fa18:	f000 b8ab 	b.w	fb72 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000fa1c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    fa1c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fa20:	f000 b8a7 	b.w	fb72 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000fa24 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    fa24:	b510      	push	{r4, lr}
    fa26:	4604      	mov	r4, r0
    fa28:	f7f7 ff7c 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fa2c:	1e64      	subs	r4, r4, #1
    fa2e:	b2e2      	uxtb	r2, r4
    fa30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa34:	f000 b869 	b.w	fb0a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000fa38 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    fa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa3c:	4607      	mov	r7, r0
    fa3e:	461e      	mov	r6, r3
    fa40:	4690      	mov	r8, r2
    fa42:	460c      	mov	r4, r1
    fa44:	4608      	mov	r0, r1
    fa46:	f7ff ffed 	bl	fa24 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    fa4a:	b1e8      	cbz	r0, fa88 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    fa4c:	687d      	ldr	r5, [r7, #4]
    fa4e:	2121      	movs	r1, #33	; 0x21
    fa50:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    fa54:	3580      	adds	r5, #128	; 0x80
    fa56:	f7ff ff7f 	bl	f958 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44c>
    fa5a:	b1b8      	cbz	r0, fa8c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    fa5c:	1e64      	subs	r4, r4, #1
    fa5e:	6f29      	ldr	r1, [r5, #112]	; 0x70
    fa60:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    fa62:	b2e2      	uxtb	r2, r4
    fa64:	f000 f851 	bl	fb0a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    fa68:	b180      	cbz	r0, fa8c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    fa6a:	6878      	ldr	r0, [r7, #4]
    fa6c:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    fa70:	f88d 1000 	strb.w	r1, [sp]
    fa74:	9900      	ldr	r1, [sp, #0]
    fa76:	9100      	str	r1, [sp, #0]
    fa78:	f89d 1000 	ldrb.w	r1, [sp]
    fa7c:	f200 1047 	addw	r0, r0, #327	; 0x147
    fa80:	b131      	cbz	r1, fa90 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    fa82:	203a      	movs	r0, #58	; 0x3a
    fa84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fa88:	2011      	movs	r0, #17
    fa8a:	e7fb      	b.n	fa84 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    fa8c:	201a      	movs	r0, #26
    fa8e:	e7f9      	b.n	fa84 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    fa90:	1c81      	adds	r1, r0, #2
    fa92:	700e      	strb	r6, [r1, #0]
    fa94:	2101      	movs	r1, #1
    fa96:	40a1      	lsls	r1, r4
    fa98:	7001      	strb	r1, [r0, #0]
    fa9a:	f880 8001 	strb.w	r8, [r0, #1]
    fa9e:	2000      	movs	r0, #0
    faa0:	e7f0      	b.n	fa84 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000faa2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    faa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    faa6:	460d      	mov	r5, r1
    faa8:	4606      	mov	r6, r0
    faaa:	f7ff ffb4 	bl	fa16 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    faae:	4607      	mov	r7, r0
    fab0:	f7ff ffb4 	bl	fa1c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    fab4:	2400      	movs	r4, #0
    fab6:	4285      	cmp	r5, r0
    fab8:	d100      	bne.n	fabc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    faba:	2401      	movs	r4, #1
    fabc:	42bd      	cmp	r5, r7
    fabe:	d101      	bne.n	fac4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    fac0:	f044 0402 	orr.w	r4, r4, #2
    fac4:	f000 f834 	bl	fb30 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    fac8:	2200      	movs	r2, #0
    faca:	4601      	mov	r1, r0
    facc:	2301      	movs	r3, #1
    face:	fa03 f002 	lsl.w	r0, r3, r2
    fad2:	4208      	tst	r0, r1
    fad4:	d005      	beq.n	fae2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    fad6:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    fada:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    fade:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    fae2:	1c52      	adds	r2, r2, #1
    fae4:	b2d2      	uxtb	r2, r2
    fae6:	2a02      	cmp	r2, #2
    fae8:	d3f1      	bcc.n	face <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    faea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000faee <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    faee:	b510      	push	{r4, lr}
    faf0:	4604      	mov	r4, r0
    faf2:	4608      	mov	r0, r1
    faf4:	f7ff ff81 	bl	f9fa <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    faf8:	2802      	cmp	r0, #2
    fafa:	d205      	bcs.n	fb08 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    fafc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    fb00:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    fb04:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    fb08:	bd10      	pop	{r4, pc}
    fb0a:	b510      	push	{r4, lr}
    fb0c:	4614      	mov	r4, r2
    fb0e:	4602      	mov	r2, r0
    fb10:	2000      	movs	r0, #0
    fb12:	4603      	mov	r3, r0
    fb14:	2c02      	cmp	r4, #2
    fb16:	d205      	bcs.n	fb24 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    fb18:	4610      	mov	r0, r2
    fb1a:	f000 f821 	bl	fb60 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    fb1e:	2101      	movs	r1, #1
    fb20:	40a1      	lsls	r1, r4
    fb22:	b2cb      	uxtb	r3, r1
    fb24:	4203      	tst	r3, r0
    fb26:	d001      	beq.n	fb2c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    fb28:	2001      	movs	r0, #1
    fb2a:	bd10      	pop	{r4, pc}
    fb2c:	2000      	movs	r0, #0
    fb2e:	bd10      	pop	{r4, pc}
    fb30:	b510      	push	{r4, lr}
    fb32:	f7f7 fef7 	bl	7924 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb3a:	f000 b811 	b.w	fb60 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    fb3e:	4601      	mov	r1, r0
    fb40:	b510      	push	{r4, lr}
    fb42:	2000      	movs	r0, #0
    fb44:	2301      	movs	r3, #1
    fb46:	fa03 f200 	lsl.w	r2, r3, r0
    fb4a:	420a      	tst	r2, r1
    fb4c:	d107      	bne.n	fb5e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    fb4e:	1c40      	adds	r0, r0, #1
    fb50:	b2c0      	uxtb	r0, r0
    fb52:	2802      	cmp	r0, #2
    fb54:	d3f7      	bcc.n	fb46 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    fb56:	213c      	movs	r1, #60	; 0x3c
    fb58:	2078      	movs	r0, #120	; 0x78
    fb5a:	f7f1 fc21 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb5e:	bd10      	pop	{r4, pc}
    fb60:	0a00      	lsrs	r0, r0, #8
    fb62:	2201      	movs	r2, #1
    fb64:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    fb68:	07c0      	lsls	r0, r0, #31
    fb6a:	d000      	beq.n	fb6e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    fb6c:	2203      	movs	r2, #3
    fb6e:	4610      	mov	r0, r2
    fb70:	4770      	bx	lr
    fb72:	b508      	push	{r3, lr}
    fb74:	2301      	movs	r3, #1
    fb76:	f640 1288 	movw	r2, #2440	; 0x988
    fb7a:	4669      	mov	r1, sp
    fb7c:	f7fc fe4e 	bl	c81c <mpsl_fem_tx_power_split>
    fb80:	bd08      	pop	{r3, pc}
    fb82:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fb86:	f001 0107 	and.w	r1, r1, #7
    fb8a:	7800      	ldrb	r0, [r0, #0]
    fb8c:	40c8      	lsrs	r0, r1
    fb8e:	f000 0001 	and.w	r0, r0, #1
    fb92:	4770      	bx	lr
    fb94:	b118      	cbz	r0, fb9e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fb96:	2802      	cmp	r0, #2
    fb98:	d001      	beq.n	fb9e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fb9a:	2001      	movs	r0, #1
    fb9c:	4770      	bx	lr
    fb9e:	2000      	movs	r0, #0
    fba0:	4770      	bx	lr

0000fba2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fba2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fba4:	7881      	ldrb	r1, [r0, #2]
    fba6:	2500      	movs	r5, #0
    fba8:	4604      	mov	r4, r0
    fbaa:	291a      	cmp	r1, #26
    fbac:	d024      	beq.n	fbf8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fbae:	dc0e      	bgt.n	fbce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    fbb0:	2916      	cmp	r1, #22
    fbb2:	d22b      	bcs.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fbb4:	e8df f001 	tbb	[pc, r1]
    fbb8:	2a2a2a2a 	.word	0x2a2a2a2a
    fbbc:	2a2a202a 	.word	0x2a2a202a
    fbc0:	2a2a2a2a 	.word	0x2a2a2a2a
    fbc4:	2a2a2a2a 	.word	0x2a2a2a2a
    fbc8:	202a2a2a 	.word	0x202a2a2a
    fbcc:	2020      	.short	0x2020
    fbce:	292a      	cmp	r1, #42	; 0x2a
    fbd0:	d01c      	beq.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fbd2:	dc0b      	bgt.n	fbec <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fbd4:	f1a1 011e 	sub.w	r1, r1, #30
    fbd8:	290c      	cmp	r1, #12
    fbda:	d217      	bcs.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fbdc:	e8df f001 	tbb	[pc, r1]
    fbe0:	16161616 	.word	0x16161616
    fbe4:	16161616 	.word	0x16161616
    fbe8:	0c161616 	.word	0x0c161616
    fbec:	393a      	subs	r1, #58	; 0x3a
    fbee:	2902      	cmp	r1, #2
    fbf0:	d20c      	bcs.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fbf2:	e8df f001 	tbb	[pc, r1]
    fbf6:	010b      	.short	0x010b
    fbf8:	8820      	ldrh	r0, [r4, #0]
    fbfa:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fbfe:	d205      	bcs.n	fc0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc00:	4669      	mov	r1, sp
    fc02:	f7fe f87f 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc06:	b118      	cbz	r0, fc10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fc08:	2002      	movs	r0, #2
    fc0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc0c:	2012      	movs	r0, #18
    fc0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc10:	9901      	ldr	r1, [sp, #4]
    fc12:	4668      	mov	r0, sp
    fc14:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    fc18:	f88d 2008 	strb.w	r2, [sp, #8]
    fc1c:	9a02      	ldr	r2, [sp, #8]
    fc1e:	9202      	str	r2, [sp, #8]
    fc20:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fc24:	f501 7198 	add.w	r1, r1, #304	; 0x130
    fc28:	b10a      	cbz	r2, fc2e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    fc2a:	200c      	movs	r0, #12
    fc2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc2e:	78a2      	ldrb	r2, [r4, #2]
    fc30:	704a      	strb	r2, [r1, #1]
    fc32:	22ff      	movs	r2, #255	; 0xff
    fc34:	700a      	strb	r2, [r1, #0]
    fc36:	f7fe fc03 	bl	e440 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fc3a:	4628      	mov	r0, r5
    fc3c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fc3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fc3e:	b510      	push	{r4, lr}
    fc40:	4604      	mov	r4, r0
    fc42:	f7f7 fd99 	bl	7778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fc46:	b108      	cbz	r0, fc4c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fc48:	200c      	movs	r0, #12
    fc4a:	bd10      	pop	{r4, pc}
    fc4c:	7820      	ldrb	r0, [r4, #0]
    fc4e:	b118      	cbz	r0, fc58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fc50:	2801      	cmp	r0, #1
    fc52:	d001      	beq.n	fc58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fc54:	2012      	movs	r0, #18
    fc56:	bd10      	pop	{r4, pc}
    fc58:	f7ff ff9c 	bl	fb94 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fc5c:	1c61      	adds	r1, r4, #1
    fc5e:	f7f3 f833 	bl	2cc8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fc62:	b108      	cbz	r0, fc68 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fc64:	2000      	movs	r0, #0
    fc66:	bd10      	pop	{r4, pc}
    fc68:	2007      	movs	r0, #7
    fc6a:	bd10      	pop	{r4, pc}

0000fc6c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fc6c:	b510      	push	{r4, lr}
    fc6e:	f7f7 fd83 	bl	7778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fc72:	b108      	cbz	r0, fc78 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fc74:	200c      	movs	r0, #12
    fc76:	bd10      	pop	{r4, pc}
    fc78:	f7f3 f84e 	bl	2d18 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fc7c:	2000      	movs	r0, #0
    fc7e:	bd10      	pop	{r4, pc}

0000fc80 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fc80:	b510      	push	{r4, lr}
    fc82:	460b      	mov	r3, r1
    fc84:	2201      	movs	r2, #1
    fc86:	f100 0110 	add.w	r1, r0, #16
    fc8a:	f7fe f81d 	bl	dcc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fc8e:	2000      	movs	r0, #0
    fc90:	bd10      	pop	{r4, pc}

0000fc92 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fc92:	b510      	push	{r4, lr}
    fc94:	8800      	ldrh	r0, [r0, #0]
    fc96:	2100      	movs	r1, #0
    fc98:	f7fd fdb9 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc9c:	b118      	cbz	r0, fca6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fc9e:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fca2:	b111      	cbz	r1, fcaa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fca4:	e007      	b.n	fcb6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fca6:	2002      	movs	r0, #2
    fca8:	bd10      	pop	{r4, pc}
    fcaa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fcae:	2915      	cmp	r1, #21
    fcb0:	d003      	beq.n	fcba <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fcb2:	2916      	cmp	r1, #22
    fcb4:	d001      	beq.n	fcba <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fcb6:	200c      	movs	r0, #12
    fcb8:	bd10      	pop	{r4, pc}
    fcba:	2102      	movs	r1, #2
    fcbc:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fcc0:	2000      	movs	r0, #0
    fcc2:	bd10      	pop	{r4, pc}

0000fcc4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcc6:	4605      	mov	r5, r0
    fcc8:	8800      	ldrh	r0, [r0, #0]
    fcca:	2100      	movs	r1, #0
    fccc:	f7fd fd9f 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fcd0:	0004      	movs	r4, r0
    fcd2:	d003      	beq.n	fcdc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fcd4:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    fcd8:	b110      	cbz	r0, fce0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fcda:	e011      	b.n	fd00 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fcdc:	2002      	movs	r0, #2
    fcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fce0:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fce4:	2815      	cmp	r0, #21
    fce6:	d001      	beq.n	fcec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fce8:	2816      	cmp	r0, #22
    fcea:	d109      	bne.n	fd00 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fcec:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    fcf0:	f88d 0000 	strb.w	r0, [sp]
    fcf4:	9800      	ldr	r0, [sp, #0]
    fcf6:	9000      	str	r0, [sp, #0]
    fcf8:	f89d 0000 	ldrb.w	r0, [sp]
    fcfc:	2601      	movs	r6, #1
    fcfe:	b108      	cbz	r0, fd04 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fd00:	200c      	movs	r0, #12
    fd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd04:	2210      	movs	r2, #16
    fd06:	1ca9      	adds	r1, r5, #2
    fd08:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fd0c:	f001 f850 	bl	10db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fd10:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    fd14:	2000      	movs	r0, #0
    fd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fd18 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fd18:	b510      	push	{r4, lr}
    fd1a:	2108      	movs	r1, #8
    fd1c:	f7f1 fbee 	bl	14fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fd20:	2000      	movs	r0, #0
    fd22:	bd10      	pop	{r4, pc}

0000fd24 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fd24:	b510      	push	{r4, lr}
    fd26:	4604      	mov	r4, r0
    fd28:	f7f7 fba6 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fd2c:	f7fe ff2d 	bl	eb8a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fd30:	f7f3 f990 	bl	3054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fd34:	7020      	strb	r0, [r4, #0]
    fd36:	2000      	movs	r0, #0
    fd38:	bd10      	pop	{r4, pc}

0000fd3a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fd3a:	21fb      	movs	r1, #251	; 0xfb
    fd3c:	8001      	strh	r1, [r0, #0]
    fd3e:	f640 0248 	movw	r2, #2120	; 0x848
    fd42:	8042      	strh	r2, [r0, #2]
    fd44:	8081      	strh	r1, [r0, #4]
    fd46:	80c2      	strh	r2, [r0, #6]
    fd48:	2000      	movs	r0, #0
    fd4a:	4770      	bx	lr

0000fd4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fd4c:	b51c      	push	{r2, r3, r4, lr}
    fd4e:	8800      	ldrh	r0, [r0, #0]
    fd50:	4669      	mov	r1, sp
    fd52:	f7fd ffd7 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fd56:	2800      	cmp	r0, #0
    fd58:	d10d      	bne.n	fd76 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fd5a:	f89d 0000 	ldrb.w	r0, [sp]
    fd5e:	9c01      	ldr	r4, [sp, #4]
    fd60:	2801      	cmp	r0, #1
    fd62:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fd66:	d103      	bne.n	fd70 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fd68:	9801      	ldr	r0, [sp, #4]
    fd6a:	f000 fcd6 	bl	1071a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fd6e:	b118      	cbz	r0, fd78 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fd70:	7ce0      	ldrb	r0, [r4, #19]
    fd72:	b118      	cbz	r0, fd7c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fd74:	203a      	movs	r0, #58	; 0x3a
    fd76:	bd1c      	pop	{r2, r3, r4, pc}
    fd78:	2002      	movs	r0, #2
    fd7a:	bd1c      	pop	{r2, r3, r4, pc}
    fd7c:	2001      	movs	r0, #1
    fd7e:	74e0      	strb	r0, [r4, #19]
    fd80:	2000      	movs	r0, #0
    fd82:	bd1c      	pop	{r2, r3, r4, pc}

0000fd84 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fd84:	b510      	push	{r4, lr}
    fd86:	4604      	mov	r4, r0
    fd88:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fd8c:	f000 fd01 	bl	10792 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fd90:	f7f3 f960 	bl	3054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fd94:	7020      	strb	r0, [r4, #0]
    fd96:	f000 fcbd 	bl	10714 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fd9a:	f7f3 f95b 	bl	3054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fd9e:	7060      	strb	r0, [r4, #1]
    fda0:	2000      	movs	r0, #0
    fda2:	bd10      	pop	{r4, pc}

0000fda4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fda4:	2108      	movs	r1, #8
    fda6:	7001      	strb	r1, [r0, #0]
    fda8:	2000      	movs	r0, #0
    fdaa:	4770      	bx	lr

0000fdac <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fdac:	b510      	push	{r4, lr}
    fdae:	4604      	mov	r4, r0
    fdb0:	f7f7 fce2 	bl	7778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fdb4:	b108      	cbz	r0, fdba <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fdb6:	200c      	movs	r0, #12
    fdb8:	bd10      	pop	{r4, pc}
    fdba:	7820      	ldrb	r0, [r4, #0]
    fdbc:	b108      	cbz	r0, fdc2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fdbe:	2801      	cmp	r0, #1
    fdc0:	d107      	bne.n	fdd2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fdc2:	f7ff fee7 	bl	fb94 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fdc6:	1c61      	adds	r1, r4, #1
    fdc8:	f7fd ff73 	bl	dcb2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fdcc:	b108      	cbz	r0, fdd2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fdce:	2000      	movs	r0, #0
    fdd0:	bd10      	pop	{r4, pc}
    fdd2:	2012      	movs	r0, #18
    fdd4:	bd10      	pop	{r4, pc}

0000fdd6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fdd6:	b51c      	push	{r2, r3, r4, lr}
    fdd8:	4604      	mov	r4, r0
    fdda:	f7f7 fb4d 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fdde:	2000      	movs	r0, #0
    fde0:	f88d 0002 	strb.w	r0, [sp, #2]
    fde4:	2103      	movs	r1, #3
    fde6:	f88d 1001 	strb.w	r1, [sp, #1]
    fdea:	f814 1b01 	ldrb.w	r1, [r4], #1
    fdee:	f88d 1003 	strb.w	r1, [sp, #3]
    fdf2:	f88d 0000 	strb.w	r0, [sp]
    fdf6:	4668      	mov	r0, sp
    fdf8:	9401      	str	r4, [sp, #4]
    fdfa:	f000 f9a2 	bl	10142 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fdfe:	bd1c      	pop	{r2, r3, r4, pc}

0000fe00 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fe00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fe02:	4605      	mov	r5, r0
    fe04:	f7f7 fb38 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fe08:	4606      	mov	r6, r0
    fe0a:	7828      	ldrb	r0, [r5, #0]
    fe0c:	2400      	movs	r4, #0
    fe0e:	b160      	cbz	r0, fe2a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fe10:	f88d 4000 	strb.w	r4, [sp]
    fe14:	2001      	movs	r0, #1
    fe16:	f10d 0101 	add.w	r1, sp, #1
    fe1a:	f7f2 f95f 	bl	20dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fe1e:	b120      	cbz	r0, fe2a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fe20:	4668      	mov	r0, sp
    fe22:	f000 f897 	bl	ff54 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fe26:	2800      	cmp	r0, #0
    fe28:	d112      	bne.n	fe50 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fe2a:	f88d 400c 	strb.w	r4, [sp, #12]
    fe2e:	4630      	mov	r0, r6
    fe30:	f7fe fea1 	bl	eb76 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fe34:	b118      	cbz	r0, fe3e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fe36:	2080      	movs	r0, #128	; 0x80
    fe38:	f8ad 000d 	strh.w	r0, [sp, #13]
    fe3c:	e001      	b.n	fe42 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fe3e:	f8ad 400d 	strh.w	r4, [sp, #13]
    fe42:	f88d 400f 	strb.w	r4, [sp, #15]
    fe46:	7828      	ldrb	r0, [r5, #0]
    fe48:	2801      	cmp	r0, #1
    fe4a:	d003      	beq.n	fe54 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fe4c:	b138      	cbz	r0, fe5e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fe4e:	2012      	movs	r0, #18
    fe50:	b004      	add	sp, #16
    fe52:	bd70      	pop	{r4, r5, r6, pc}
    fe54:	a903      	add	r1, sp, #12
    fe56:	4630      	mov	r0, r6
    fe58:	f7f7 fb2a 	bl	74b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fe5c:	e7f8      	b.n	fe50 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fe5e:	4630      	mov	r0, r6
    fe60:	f000 fc71 	bl	10746 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fe64:	e7f4      	b.n	fe50 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fe66 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fe66:	b530      	push	{r4, r5, lr}
    fe68:	b08b      	sub	sp, #44	; 0x2c
    fe6a:	4604      	mov	r4, r0
    fe6c:	f7f7 fb04 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fe70:	4602      	mov	r2, r0
    fe72:	7920      	ldrb	r0, [r4, #4]
    fe74:	2804      	cmp	r0, #4
    fe76:	d803      	bhi.n	fe80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fe78:	8860      	ldrh	r0, [r4, #2]
    fe7a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fe7e:	d902      	bls.n	fe86 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fe80:	2012      	movs	r0, #18
    fe82:	b00b      	add	sp, #44	; 0x2c
    fe84:	bd30      	pop	{r4, r5, pc}
    fe86:	2500      	movs	r5, #0
    fe88:	f88d 5004 	strb.w	r5, [sp, #4]
    fe8c:	7921      	ldrb	r1, [r4, #4]
    fe8e:	9500      	str	r5, [sp, #0]
    fe90:	f89d 0000 	ldrb.w	r0, [sp]
    fe94:	2905      	cmp	r1, #5
    fe96:	f040 0010 	orr.w	r0, r0, #16
    fe9a:	f88d 0000 	strb.w	r0, [sp]
    fe9e:	d254      	bcs.n	ff4a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fea0:	e8df f001 	tbb	[pc, r1]
    fea4:	11050803 	.word	0x11050803
    fea8:	000b      	.short	0x000b
    feaa:	f040 0001 	orr.w	r0, r0, #1
    feae:	f040 0002 	orr.w	r0, r0, #2
    feb2:	e006      	b.n	fec2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    feb4:	f040 0009 	orr.w	r0, r0, #9
    feb8:	e001      	b.n	febe <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    feba:	f040 0001 	orr.w	r0, r0, #1
    febe:	f040 0004 	orr.w	r0, r0, #4
    fec2:	f88d 0000 	strb.w	r0, [sp]
    fec6:	f8bd 0000 	ldrh.w	r0, [sp]
    feca:	9000      	str	r0, [sp, #0]
    fecc:	f8bd 0000 	ldrh.w	r0, [sp]
    fed0:	f8ad 0005 	strh.w	r0, [sp, #5]
    fed4:	8821      	ldrh	r1, [r4, #0]
    fed6:	f8dd 0006 	ldr.w	r0, [sp, #6]
    feda:	f361 201f 	bfi	r0, r1, #8, #24
    fede:	f8cd 0006 	str.w	r0, [sp, #6]
    fee2:	8861      	ldrh	r1, [r4, #2]
    fee4:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fee8:	f361 201f 	bfi	r0, r1, #8, #24
    feec:	f8cd 0009 	str.w	r0, [sp, #9]
    fef0:	7b60      	ldrb	r0, [r4, #13]
    fef2:	f88d 000d 	strb.w	r0, [sp, #13]
    fef6:	7960      	ldrb	r0, [r4, #5]
    fef8:	f88d 000e 	strb.w	r0, [sp, #14]
    fefc:	79a0      	ldrb	r0, [r4, #6]
    fefe:	f88d 000f 	strb.w	r0, [sp, #15]
    ff02:	f8d4 0007 	ldr.w	r0, [r4, #7]
    ff06:	9004      	str	r0, [sp, #16]
    ff08:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    ff0c:	f8ad 0014 	strh.w	r0, [sp, #20]
    ff10:	7ba0      	ldrb	r0, [r4, #14]
    ff12:	f88d 0016 	strb.w	r0, [sp, #22]
    ff16:	207f      	movs	r0, #127	; 0x7f
    ff18:	f88d 0017 	strb.w	r0, [sp, #23]
    ff1c:	2001      	movs	r0, #1
    ff1e:	f88d 0018 	strb.w	r0, [sp, #24]
    ff22:	f88d 5019 	strb.w	r5, [sp, #25]
    ff26:	f88d 001a 	strb.w	r0, [sp, #26]
    ff2a:	f88d 501b 	strb.w	r5, [sp, #27]
    ff2e:	4610      	mov	r0, r2
    ff30:	f7fe fe41 	bl	ebb6 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    ff34:	f88d 001c 	strb.w	r0, [sp, #28]
    ff38:	f88d 501d 	strb.w	r5, [sp, #29]
    ff3c:	f88d 501e 	strb.w	r5, [sp, #30]
    ff40:	a909      	add	r1, sp, #36	; 0x24
    ff42:	a801      	add	r0, sp, #4
    ff44:	f7f7 f92e 	bl	71a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    ff48:	e79b      	b.n	fe82 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    ff4a:	f241 215b 	movw	r1, #4699	; 0x125b
    ff4e:	2039      	movs	r0, #57	; 0x39
    ff50:	f7f1 fa26 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ff54 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    ff54:	b570      	push	{r4, r5, r6, lr}
    ff56:	4604      	mov	r4, r0
    ff58:	7800      	ldrb	r0, [r0, #0]
    ff5a:	2101      	movs	r1, #1
    ff5c:	f7fd fc57 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff60:	0005      	movs	r5, r0
    ff62:	d007      	beq.n	ff74 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    ff64:	f7fe ffe4 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff68:	b160      	cbz	r0, ff84 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ff6a:	4628      	mov	r0, r5
    ff6c:	f7fe fe09 	bl	eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ff70:	b110      	cbz	r0, ff78 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    ff72:	e005      	b.n	ff80 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    ff74:	2042      	movs	r0, #66	; 0x42
    ff76:	bd70      	pop	{r4, r5, r6, pc}
    ff78:	4628      	mov	r0, r5
    ff7a:	f7fe fdf8 	bl	eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ff7e:	b108      	cbz	r0, ff84 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    ff80:	200c      	movs	r0, #12
    ff82:	bd70      	pop	{r4, r5, r6, pc}
    ff84:	1c61      	adds	r1, r4, #1
    ff86:	4628      	mov	r0, r5
    ff88:	f7fe fe0d 	bl	eba6 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    ff8c:	2000      	movs	r0, #0
    ff8e:	bd70      	pop	{r4, r5, r6, pc}

0000ff90 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ff90:	b50e      	push	{r1, r2, r3, lr}
    ff92:	8882      	ldrh	r2, [r0, #4]
    ff94:	f244 2390 	movw	r3, #17040	; 0x4290
    ff98:	429a      	cmp	r2, r3
    ff9a:	d901      	bls.n	ffa0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    ff9c:	2012      	movs	r0, #18
    ff9e:	bd0e      	pop	{r1, r2, r3, pc}
    ffa0:	f640 0348 	movw	r3, #2120	; 0x848
    ffa4:	429a      	cmp	r2, r3
    ffa6:	d300      	bcc.n	ffaa <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ffa8:	461a      	mov	r2, r3
    ffaa:	8803      	ldrh	r3, [r0, #0]
    ffac:	f8ad 3000 	strh.w	r3, [sp]
    ffb0:	8843      	ldrh	r3, [r0, #2]
    ffb2:	f8ad 3002 	strh.w	r3, [sp, #2]
    ffb6:	f8ad 2004 	strh.w	r2, [sp, #4]
    ffba:	8843      	ldrh	r3, [r0, #2]
    ffbc:	f8ad 3006 	strh.w	r3, [sp, #6]
    ffc0:	f8ad 2008 	strh.w	r2, [sp, #8]
    ffc4:	8800      	ldrh	r0, [r0, #0]
    ffc6:	8008      	strh	r0, [r1, #0]
    ffc8:	4668      	mov	r0, sp
    ffca:	f7f7 fb51 	bl	7670 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    ffce:	bd0e      	pop	{r1, r2, r3, pc}

0000ffd0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    ffd0:	b510      	push	{r4, lr}
    ffd2:	4604      	mov	r4, r0
    ffd4:	f7f7 fa50 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    ffd8:	7861      	ldrb	r1, [r4, #1]
    ffda:	f3c1 0240 	ubfx	r2, r1, #1, #1
    ffde:	f001 0101 	and.w	r1, r1, #1
    ffe2:	f7fe fddc 	bl	eb9e <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    ffe6:	2000      	movs	r0, #0
    ffe8:	bd10      	pop	{r4, pc}

0000ffea <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    ffea:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ffec:	4604      	mov	r4, r0
    ffee:	f10d 0007 	add.w	r0, sp, #7
    fff2:	9000      	str	r0, [sp, #0]
    fff4:	7922      	ldrb	r2, [r4, #4]
    fff6:	78e1      	ldrb	r1, [r4, #3]
    fff8:	78a0      	ldrb	r0, [r4, #2]
    fffa:	f10d 0306 	add.w	r3, sp, #6
    fffe:	f000 fbd0 	bl	107a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   10002:	2800      	cmp	r0, #0
   10004:	d109      	bne.n	1001a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   10006:	8820      	ldrh	r0, [r4, #0]
   10008:	f8ad 0004 	strh.w	r0, [sp, #4]
   1000c:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10010:	f8ad 0008 	strh.w	r0, [sp, #8]
   10014:	a801      	add	r0, sp, #4
   10016:	f000 f94f 	bl	102b8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   1001a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001001c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   1001c:	b510      	push	{r4, lr}
   1001e:	4604      	mov	r4, r0
   10020:	2001      	movs	r0, #1
   10022:	f000 fa55 	bl	104d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10026:	b128      	cbz	r0, 10034 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10028:	4621      	mov	r1, r4
   1002a:	2001      	movs	r0, #1
   1002c:	f7f2 f86e 	bl	210c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10030:	2000      	movs	r0, #0
   10032:	bd10      	pop	{r4, pc}
   10034:	200c      	movs	r0, #12
   10036:	bd10      	pop	{r4, pc}

00010038 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10038:	b51c      	push	{r2, r3, r4, lr}
   1003a:	4604      	mov	r4, r0
   1003c:	f7f7 fa1c 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   10040:	2000      	movs	r0, #0
   10042:	f88d 0000 	strb.w	r0, [sp]
   10046:	f88d 0002 	strb.w	r0, [sp, #2]
   1004a:	2003      	movs	r0, #3
   1004c:	f88d 0001 	strb.w	r0, [sp, #1]
   10050:	f814 0b01 	ldrb.w	r0, [r4], #1
   10054:	f88d 0003 	strb.w	r0, [sp, #3]
   10058:	4668      	mov	r0, sp
   1005a:	9401      	str	r4, [sp, #4]
   1005c:	f000 f8da 	bl	10214 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10060:	bd1c      	pop	{r2, r3, r4, pc}

00010062 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10062:	b51c      	push	{r2, r3, r4, lr}
   10064:	8801      	ldrh	r1, [r0, #0]
   10066:	f8ad 1000 	strh.w	r1, [sp]
   1006a:	8841      	ldrh	r1, [r0, #2]
   1006c:	f8ad 1002 	strh.w	r1, [sp, #2]
   10070:	8801      	ldrh	r1, [r0, #0]
   10072:	f8ad 1004 	strh.w	r1, [sp, #4]
   10076:	8840      	ldrh	r0, [r0, #2]
   10078:	f8ad 0006 	strh.w	r0, [sp, #6]
   1007c:	4668      	mov	r0, sp
   1007e:	f7f7 fb97 	bl	77b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
   10082:	bd1c      	pop	{r2, r3, r4, pc}

00010084 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10084:	b510      	push	{r4, lr}
   10086:	f7f2 f865 	bl	2154 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1008a:	2000      	movs	r0, #0
   1008c:	bd10      	pop	{r4, pc}

0001008e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   1008e:	b510      	push	{r4, lr}
   10090:	460c      	mov	r4, r1
   10092:	2100      	movs	r1, #0
   10094:	f7fd fbbb 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10098:	b118      	cbz	r0, 100a2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   1009a:	2c02      	cmp	r4, #2
   1009c:	d903      	bls.n	100a6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   1009e:	2012      	movs	r0, #18
   100a0:	bd10      	pop	{r4, pc}
   100a2:	2002      	movs	r0, #2
   100a4:	bd10      	pop	{r4, pc}
   100a6:	f014 0101 	ands.w	r1, r4, #1
   100aa:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
   100ae:	f3c4 0240 	ubfx	r2, r4, #1, #1
   100b2:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
   100b6:	d004      	beq.n	100c2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   100b8:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
   100bc:	b109      	cbz	r1, 100c2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   100be:	f7fe ff3a 	bl	ef36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   100c2:	2000      	movs	r0, #0
   100c4:	bd10      	pop	{r4, pc}

000100c6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   100c6:	b51c      	push	{r2, r3, r4, lr}
   100c8:	460c      	mov	r4, r1
   100ca:	4669      	mov	r1, sp
   100cc:	f7fd fe1a 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100d0:	2800      	cmp	r0, #0
   100d2:	d105      	bne.n	100e0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   100d4:	2100      	movs	r1, #0
   100d6:	4622      	mov	r2, r4
   100d8:	9801      	ldr	r0, [sp, #4]
   100da:	f000 fac5 	bl	10668 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   100de:	2000      	movs	r0, #0
   100e0:	bd1c      	pop	{r2, r3, r4, pc}

000100e2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
   100e2:	b510      	push	{r4, lr}
   100e4:	4604      	mov	r4, r0
   100e6:	7800      	ldrb	r0, [r0, #0]
   100e8:	28ff      	cmp	r0, #255	; 0xff
   100ea:	d009      	beq.n	10100 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
   100ec:	2101      	movs	r1, #1
   100ee:	f7fd fb8e 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   100f2:	b118      	cbz	r0, 100fc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
   100f4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   100f8:	8441      	strh	r1, [r0, #34]	; 0x22
   100fa:	e005      	b.n	10108 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
   100fc:	2042      	movs	r0, #66	; 0x42
   100fe:	bd10      	pop	{r4, pc}
   10100:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10104:	f7f4 fcd0 	bl	4aa8 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
   10108:	2000      	movs	r0, #0
   1010a:	bd10      	pop	{r4, pc}

0001010c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1010c:	b510      	push	{r4, lr}
   1010e:	4604      	mov	r4, r0
   10110:	f7f7 fb8e 	bl	7830 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   10114:	b118      	cbz	r0, 1011e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   10116:	2000      	movs	r0, #0
   10118:	f000 f9da 	bl	104d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   1011c:	b128      	cbz	r0, 1012a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   1011e:	4621      	mov	r1, r4
   10120:	2000      	movs	r0, #0
   10122:	f7f1 fff3 	bl	210c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10126:	2000      	movs	r0, #0
   10128:	bd10      	pop	{r4, pc}
   1012a:	200c      	movs	r0, #12
   1012c:	bd10      	pop	{r4, pc}

0001012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1012e:	b510      	push	{r4, lr}
   10130:	7800      	ldrb	r0, [r0, #0]
   10132:	b100      	cbz	r0, 10136 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10134:	2001      	movs	r0, #1
   10136:	f7f4 fce1 	bl	4afc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1013a:	2000      	movs	r0, #0
   1013c:	bd10      	pop	{r4, pc}

0001013e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1013e:	f7f7 ba97 	b.w	7670 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

00010142 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10142:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10146:	4606      	mov	r6, r0
   10148:	7845      	ldrb	r5, [r0, #1]
   1014a:	7800      	ldrb	r0, [r0, #0]
   1014c:	2101      	movs	r1, #1
   1014e:	f7fd fb5e 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10152:	0004      	movs	r4, r0
   10154:	d01e      	beq.n	10194 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10156:	f7fe fcdd 	bl	eb14 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   1015a:	78f1      	ldrb	r1, [r6, #3]
   1015c:	4281      	cmp	r1, r0
   1015e:	d800      	bhi.n	10162 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10160:	4608      	mov	r0, r1
   10162:	4607      	mov	r7, r0
   10164:	2d04      	cmp	r5, #4
   10166:	d018      	beq.n	1019a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10168:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1016a:	f7fd fc9f 	bl	daac <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1016e:	4438      	add	r0, r7
   10170:	b281      	uxth	r1, r0
   10172:	4620      	mov	r0, r4
   10174:	2201      	movs	r2, #1
   10176:	f000 f9bd 	bl	104f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1017a:	2800      	cmp	r0, #0
   1017c:	d10b      	bne.n	10196 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1017e:	2d03      	cmp	r5, #3
   10180:	d000      	beq.n	10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10182:	b1df      	cbz	r7, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10184:	4620      	mov	r0, r4
   10186:	f7fe fcfa 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1018a:	7871      	ldrb	r1, [r6, #1]
   1018c:	2903      	cmp	r1, #3
   1018e:	d010      	beq.n	101b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10190:	b9a0      	cbnz	r0, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10192:	e004      	b.n	1019e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10194:	2042      	movs	r0, #66	; 0x42
   10196:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1019a:	b97f      	cbnz	r7, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1019c:	e7f2      	b.n	10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1019e:	2904      	cmp	r1, #4
   101a0:	d107      	bne.n	101b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   101a2:	4620      	mov	r0, r4
   101a4:	f7fe fec4 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   101a8:	b140      	cbz	r0, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   101aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
   101ac:	f7fd fc45 	bl	da3a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   101b0:	b120      	cbz	r0, 101bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   101b2:	2d01      	cmp	r5, #1
   101b4:	d004      	beq.n	101c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   101b6:	2d03      	cmp	r5, #3
   101b8:	d002      	beq.n	101c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   101ba:	e00e      	b.n	101da <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   101bc:	2012      	movs	r0, #18
   101be:	e7ea      	b.n	10196 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   101c0:	4620      	mov	r0, r4
   101c2:	f7fe fcdc 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   101c6:	b108      	cbz	r0, 101cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   101c8:	2200      	movs	r2, #0
   101ca:	e002      	b.n	101d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   101cc:	2d01      	cmp	r5, #1
   101ce:	d013      	beq.n	101f8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   101d0:	2201      	movs	r2, #1
   101d2:	4668      	mov	r0, sp
   101d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   101d6:	f7fd fbcc 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   101da:	2d04      	cmp	r5, #4
   101dc:	d018      	beq.n	10210 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   101de:	6872      	ldr	r2, [r6, #4]
   101e0:	463b      	mov	r3, r7
   101e2:	2101      	movs	r1, #1
   101e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
   101e6:	f7fd fbf8 	bl	d9da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   101ea:	b138      	cbz	r0, 101fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   101ec:	7870      	ldrb	r0, [r6, #1]
   101ee:	2802      	cmp	r0, #2
   101f0:	d006      	beq.n	10200 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   101f2:	2803      	cmp	r0, #3
   101f4:	d004      	beq.n	10200 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   101f6:	e00b      	b.n	10210 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   101f8:	2202      	movs	r2, #2
   101fa:	e7ea      	b.n	101d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   101fc:	2007      	movs	r0, #7
   101fe:	e7ca      	b.n	10196 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10200:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10202:	f7fd fc53 	bl	daac <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10206:	4602      	mov	r2, r0
   10208:	2101      	movs	r1, #1
   1020a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1020c:	f7fd fc2b 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10210:	2000      	movs	r0, #0
   10212:	e7c0      	b.n	10196 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010214 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10214:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10218:	4607      	mov	r7, r0
   1021a:	7845      	ldrb	r5, [r0, #1]
   1021c:	78c6      	ldrb	r6, [r0, #3]
   1021e:	7800      	ldrb	r0, [r0, #0]
   10220:	2101      	movs	r1, #1
   10222:	f7fd faf4 	bl	d80e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10226:	0004      	movs	r4, r0
   10228:	d003      	beq.n	10232 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   1022a:	f7fe fcaa 	bl	eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1022e:	b118      	cbz	r0, 10238 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10230:	e003      	b.n	1023a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10232:	2042      	movs	r0, #66	; 0x42
   10234:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10238:	2600      	movs	r6, #0
   1023a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1023c:	f7fd fc3a 	bl	dab4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10240:	4430      	add	r0, r6
   10242:	b281      	uxth	r1, r0
   10244:	4688      	mov	r8, r1
   10246:	4620      	mov	r0, r4
   10248:	2201      	movs	r2, #1
   1024a:	f000 f953 	bl	104f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1024e:	2800      	cmp	r0, #0
   10250:	d1f0      	bne.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10252:	2d04      	cmp	r5, #4
   10254:	d008      	beq.n	10268 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10256:	2d03      	cmp	r5, #3
   10258:	d00a      	beq.n	10270 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   1025a:	b12e      	cbz	r6, 10268 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1025c:	4620      	mov	r0, r4
   1025e:	f7fe fe67 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10262:	b118      	cbz	r0, 1026c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10264:	200c      	movs	r0, #12
   10266:	e7e5      	b.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10268:	2012      	movs	r0, #18
   1026a:	e7e3      	b.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1026c:	2d01      	cmp	r5, #1
   1026e:	d10c      	bne.n	1028a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10270:	4620      	mov	r0, r4
   10272:	f7fe fc84 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10276:	b108      	cbz	r0, 1027c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10278:	2204      	movs	r2, #4
   1027a:	e002      	b.n	10282 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1027c:	2d01      	cmp	r5, #1
   1027e:	d010      	beq.n	102a2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10280:	2205      	movs	r2, #5
   10282:	4668      	mov	r0, sp
   10284:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10286:	f7fd fb74 	bl	d972 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1028a:	687a      	ldr	r2, [r7, #4]
   1028c:	4633      	mov	r3, r6
   1028e:	2100      	movs	r1, #0
   10290:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10292:	f7fd fba2 	bl	d9da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10296:	b130      	cbz	r0, 102a6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10298:	2d02      	cmp	r5, #2
   1029a:	d006      	beq.n	102aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1029c:	2d03      	cmp	r5, #3
   1029e:	d004      	beq.n	102aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   102a0:	e008      	b.n	102b4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   102a2:	2206      	movs	r2, #6
   102a4:	e7ed      	b.n	10282 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   102a6:	2007      	movs	r0, #7
   102a8:	e7c4      	b.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   102aa:	4642      	mov	r2, r8
   102ac:	2100      	movs	r1, #0
   102ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
   102b0:	f7fd fbd9 	bl	da66 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   102b4:	2000      	movs	r0, #0
   102b6:	e7bd      	b.n	10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

000102b8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   102b8:	b510      	push	{r4, lr}
   102ba:	4604      	mov	r4, r0
   102bc:	8880      	ldrh	r0, [r0, #4]
   102be:	b128      	cbz	r0, 102cc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102c0:	2801      	cmp	r0, #1
   102c2:	d003      	beq.n	102cc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102c4:	2802      	cmp	r0, #2
   102c6:	d001      	beq.n	102cc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102c8:	2012      	movs	r0, #18
   102ca:	bd10      	pop	{r4, pc}
   102cc:	78e0      	ldrb	r0, [r4, #3]
   102ce:	f000 f9a8 	bl	10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   102d2:	b148      	cbz	r0, 102e8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   102d4:	78a0      	ldrb	r0, [r4, #2]
   102d6:	f000 f9a4 	bl	10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   102da:	b128      	cbz	r0, 102e8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   102dc:	4620      	mov	r0, r4
   102de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102e2:	2101      	movs	r1, #1
   102e4:	f000 b862 	b.w	103ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   102e8:	2011      	movs	r0, #17
   102ea:	bd10      	pop	{r4, pc}

000102ec <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   102ec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   102ee:	460c      	mov	r4, r1
   102f0:	4605      	mov	r5, r0
   102f2:	8800      	ldrh	r0, [r0, #0]
   102f4:	4669      	mov	r1, sp
   102f6:	f7fd fd05 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   102fa:	2800      	cmp	r0, #0
   102fc:	d106      	bne.n	1030c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   102fe:	9801      	ldr	r0, [sp, #4]
   10300:	8829      	ldrh	r1, [r5, #0]
   10302:	8021      	strh	r1, [r4, #0]
   10304:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   10308:	8060      	strh	r0, [r4, #2]
   1030a:	2000      	movs	r0, #0
   1030c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001030e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   1030e:	b510      	push	{r4, lr}
   10310:	4604      	mov	r4, r0
   10312:	4601      	mov	r1, r0
   10314:	2000      	movs	r0, #0
   10316:	f7f1 fee1 	bl	20dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1031a:	b910      	cbnz	r0, 10322 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   1031c:	2000      	movs	r0, #0
   1031e:	6020      	str	r0, [r4, #0]
   10320:	80a0      	strh	r0, [r4, #4]
   10322:	2000      	movs	r0, #0
   10324:	bd10      	pop	{r4, pc}

00010326 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10326:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10328:	460c      	mov	r4, r1
   1032a:	4605      	mov	r5, r0
   1032c:	8800      	ldrh	r0, [r0, #0]
   1032e:	4669      	mov	r1, sp
   10330:	f7fd fce8 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10334:	b108      	cbz	r0, 1033a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10336:	2002      	movs	r0, #2
   10338:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1033a:	78a8      	ldrb	r0, [r5, #2]
   1033c:	b158      	cbz	r0, 10356 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   1033e:	f000 f9e9 	bl	10714 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   10342:	70a0      	strb	r0, [r4, #2]
   10344:	8828      	ldrh	r0, [r5, #0]
   10346:	8020      	strh	r0, [r4, #0]
   10348:	f994 0002 	ldrsb.w	r0, [r4, #2]
   1034c:	f7f2 fe82 	bl	3054 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10350:	70a0      	strb	r0, [r4, #2]
   10352:	2000      	movs	r0, #0
   10354:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10356:	9801      	ldr	r0, [sp, #4]
   10358:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1035c:	e7f1      	b.n	10342 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001035e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1035e:	b510      	push	{r4, lr}
   10360:	f7f7 fa6c 	bl	783c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10364:	2000      	movs	r0, #0
   10366:	bd10      	pop	{r4, pc}

00010368 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10368:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1036c:	4604      	mov	r4, r0
   1036e:	8840      	ldrh	r0, [r0, #2]
   10370:	460d      	mov	r5, r1
   10372:	b1b8      	cbz	r0, 103a4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10374:	8820      	ldrh	r0, [r4, #0]
   10376:	4669      	mov	r1, sp
   10378:	f7fd fcc4 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1037c:	2800      	cmp	r0, #0
   1037e:	d10f      	bne.n	103a0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10380:	8820      	ldrh	r0, [r4, #0]
   10382:	8028      	strh	r0, [r5, #0]
   10384:	9e01      	ldr	r6, [sp, #4]
   10386:	f106 0510 	add.w	r5, r6, #16
   1038a:	3680      	adds	r6, #128	; 0x80
   1038c:	682f      	ldr	r7, [r5, #0]
   1038e:	8862      	ldrh	r2, [r4, #2]
   10390:	4639      	mov	r1, r7
   10392:	4630      	mov	r0, r6
   10394:	f7fd fde7 	bl	df66 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10398:	6828      	ldr	r0, [r5, #0]
   1039a:	42b8      	cmp	r0, r7
   1039c:	d1f6      	bne.n	1038c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1039e:	2000      	movs	r0, #0
   103a0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   103a4:	2012      	movs	r0, #18
   103a6:	e7fb      	b.n	103a0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

000103a8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   103a8:	f000 b863 	b.w	10472 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000103ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   103ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103b0:	b086      	sub	sp, #24
   103b2:	4689      	mov	r9, r1
   103b4:	4607      	mov	r7, r0
   103b6:	8800      	ldrh	r0, [r0, #0]
   103b8:	a901      	add	r1, sp, #4
   103ba:	f7fd fca3 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   103be:	2800      	cmp	r0, #0
   103c0:	d136      	bne.n	10430 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   103c2:	9802      	ldr	r0, [sp, #8]
   103c4:	4601      	mov	r1, r0
   103c6:	4688      	mov	r8, r1
   103c8:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   103cc:	f500 7498 	add.w	r4, r0, #304	; 0x130
   103d0:	f88d 1000 	strb.w	r1, [sp]
   103d4:	9900      	ldr	r1, [sp, #0]
   103d6:	9100      	str	r1, [sp, #0]
   103d8:	f89d 1000 	ldrb.w	r1, [sp]
   103dc:	3080      	adds	r0, #128	; 0x80
   103de:	b109      	cbz	r1, 103e4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   103e0:	2601      	movs	r6, #1
   103e2:	e000      	b.n	103e6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   103e4:	2600      	movs	r6, #0
   103e6:	7f81      	ldrb	r1, [r0, #30]
   103e8:	2922      	cmp	r1, #34	; 0x22
   103ea:	d100      	bne.n	103ee <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   103ec:	b13e      	cbz	r6, 103fe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   103ee:	2500      	movs	r5, #0
   103f0:	306c      	adds	r0, #108	; 0x6c
   103f2:	2108      	movs	r1, #8
   103f4:	4682      	mov	sl, r0
   103f6:	f7ff fbc4 	bl	fb82 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   103fa:	b110      	cbz	r0, 10402 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   103fc:	e007      	b.n	1040e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   103fe:	2501      	movs	r5, #1
   10400:	e7f6      	b.n	103f0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10402:	210b      	movs	r1, #11
   10404:	4650      	mov	r0, sl
   10406:	f7ff fbbc 	bl	fb82 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   1040a:	b900      	cbnz	r0, 1040e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1040c:	b17d      	cbz	r5, 1042e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   1040e:	a804      	add	r0, sp, #16
   10410:	9000      	str	r0, [sp, #0]
   10412:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10416:	ab03      	add	r3, sp, #12
   10418:	463a      	mov	r2, r7
   1041a:	4641      	mov	r1, r8
   1041c:	f000 f95a 	bl	106d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   10420:	0005      	movs	r5, r0
   10422:	d105      	bne.n	10430 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10424:	340c      	adds	r4, #12
   10426:	20ff      	movs	r0, #255	; 0xff
   10428:	7060      	strb	r0, [r4, #1]
   1042a:	b936      	cbnz	r6, 1043a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1042c:	e003      	b.n	10436 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1042e:	201a      	movs	r0, #26
   10430:	b006      	add	sp, #24
   10432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10436:	7820      	ldrb	r0, [r4, #0]
   10438:	b108      	cbz	r0, 1043e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   1043a:	253a      	movs	r5, #58	; 0x3a
   1043c:	e012      	b.n	10464 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1043e:	f884 9000 	strb.w	r9, [r4]
   10442:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10446:	70a0      	strb	r0, [r4, #2]
   10448:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1044c:	70e1      	strb	r1, [r4, #3]
   1044e:	f88d 0000 	strb.w	r0, [sp]
   10452:	f88d 1001 	strb.w	r1, [sp, #1]
   10456:	88b8      	ldrh	r0, [r7, #4]
   10458:	f8ad 0002 	strh.w	r0, [sp, #2]
   1045c:	4669      	mov	r1, sp
   1045e:	4640      	mov	r0, r8
   10460:	f7fd fd20 	bl	dea4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10464:	2000      	movs	r0, #0
   10466:	7060      	strb	r0, [r4, #1]
   10468:	4628      	mov	r0, r5
   1046a:	e7e1      	b.n	10430 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0001046c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   1046c:	2008      	movs	r0, #8
   1046e:	f7f7 ba4d 	b.w	790c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010472 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10472:	b510      	push	{r4, lr}
   10474:	f7fd fba9 	bl	dbca <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   10478:	f7f2 fbcc 	bl	2c14 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   1047c:	f7f7 fa68 	bl	7950 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   10480:	f7fe f813 	bl	e4aa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   10484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10488:	f7f6 bfd6 	b.w	7438 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

0001048c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   1048c:	f7f5 b866 	b.w	555c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10490:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10494:	4288      	cmp	r0, r1
   10496:	d303      	bcc.n	104a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   10498:	f640 0148 	movw	r1, #2120	; 0x848
   1049c:	4288      	cmp	r0, r1
   1049e:	d300      	bcc.n	104a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   104a0:	4608      	mov	r0, r1
   104a2:	b280      	uxth	r0, r0
   104a4:	4770      	bx	lr
   104a6:	07c1      	lsls	r1, r0, #31
   104a8:	d001      	beq.n	104ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   104aa:	2001      	movs	r0, #1
   104ac:	4770      	bx	lr
   104ae:	0780      	lsls	r0, r0, #30
   104b0:	d501      	bpl.n	104b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   104b2:	2002      	movs	r0, #2
   104b4:	4770      	bx	lr
   104b6:	2000      	movs	r0, #0
   104b8:	4770      	bx	lr
   104ba:	b510      	push	{r4, lr}
   104bc:	2801      	cmp	r0, #1
   104be:	d006      	beq.n	104ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   104c0:	2802      	cmp	r0, #2
   104c2:	d004      	beq.n	104ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   104c4:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   104c8:	2006      	movs	r0, #6
   104ca:	f7f0 ff69 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104ce:	bd10      	pop	{r4, pc}
   104d0:	b510      	push	{r4, lr}
   104d2:	f7f6 ff2f 	bl	7334 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   104d6:	b158      	cbz	r0, 104f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   104d8:	f7f6 ffce 	bl	7478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   104dc:	4604      	mov	r4, r0
   104de:	f7fe fb50 	bl	eb82 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   104e2:	b918      	cbnz	r0, 104ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   104e4:	4620      	mov	r0, r4
   104e6:	f7fe fb42 	bl	eb6e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   104ea:	b108      	cbz	r0, 104f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   104ec:	2000      	movs	r0, #0
   104ee:	bd10      	pop	{r4, pc}
   104f0:	2001      	movs	r0, #1
   104f2:	bd10      	pop	{r4, pc}
   104f4:	b570      	push	{r4, r5, r6, lr}
   104f6:	460c      	mov	r4, r1
   104f8:	4605      	mov	r5, r0
   104fa:	b112      	cbz	r2, 10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   104fc:	291f      	cmp	r1, #31
   104fe:	d80c      	bhi.n	1051a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10500:	e016      	b.n	10530 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   10502:	f7f1 fc2b 	bl	1d5c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10506:	42a0      	cmp	r0, r4
   10508:	d201      	bcs.n	1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   1050a:	2007      	movs	r0, #7
   1050c:	bd70      	pop	{r4, r5, r6, pc}
   1050e:	4628      	mov	r0, r5
   10510:	f7fe fb35 	bl	eb7e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10514:	b118      	cbz	r0, 1051e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10516:	2c1f      	cmp	r4, #31
   10518:	d901      	bls.n	1051e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1051a:	2012      	movs	r0, #18
   1051c:	bd70      	pop	{r4, r5, r6, pc}
   1051e:	4628      	mov	r0, r5
   10520:	f7fe fb36 	bl	eb90 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10524:	b130      	cbz	r0, 10534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   10526:	4621      	mov	r1, r4
   10528:	4628      	mov	r0, r5
   1052a:	f7fe faff 	bl	eb2c <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1052e:	b118      	cbz	r0, 10538 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   10530:	2000      	movs	r0, #0
   10532:	bd70      	pop	{r4, r5, r6, pc}
   10534:	2042      	movs	r0, #66	; 0x42
   10536:	bd70      	pop	{r4, r5, r6, pc}
   10538:	2045      	movs	r0, #69	; 0x45
   1053a:	bd70      	pop	{r4, r5, r6, pc}
   1053c:	b510      	push	{r4, lr}
   1053e:	4604      	mov	r4, r0
   10540:	7840      	ldrb	r0, [r0, #1]
   10542:	06c1      	lsls	r1, r0, #27
   10544:	d51c      	bpl.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10546:	07c0      	lsls	r0, r0, #31
   10548:	d00b      	beq.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1054a:	f7f7 f9b3 	bl	78b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1054e:	b1b8      	cbz	r0, 10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10550:	7860      	ldrb	r0, [r4, #1]
   10552:	06c1      	lsls	r1, r0, #27
   10554:	d405      	bmi.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10556:	0700      	lsls	r0, r0, #28
   10558:	d503      	bpl.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1055a:	7d20      	ldrb	r0, [r4, #20]
   1055c:	2802      	cmp	r0, #2
   1055e:	d10f      	bne.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10560:	e010      	b.n	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10562:	7d20      	ldrb	r0, [r4, #20]
   10564:	2802      	cmp	r0, #2
   10566:	d001      	beq.n	1056c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   10568:	7ea0      	ldrb	r0, [r4, #26]
   1056a:	b948      	cbnz	r0, 10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1056c:	7860      	ldrb	r0, [r4, #1]
   1056e:	0700      	lsls	r0, r0, #28
   10570:	d408      	bmi.n	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10572:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1057a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1057e:	d201      	bcs.n	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10580:	2011      	movs	r0, #17
   10582:	bd10      	pop	{r4, pc}
   10584:	2000      	movs	r0, #0
   10586:	bd10      	pop	{r4, pc}
   10588:	b538      	push	{r3, r4, r5, lr}
   1058a:	4604      	mov	r4, r0
   1058c:	7800      	ldrb	r0, [r0, #0]
   1058e:	28ef      	cmp	r0, #239	; 0xef
   10590:	d843      	bhi.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10592:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10596:	f8ad 0000 	strh.w	r0, [sp]
   1059a:	9800      	ldr	r0, [sp, #0]
   1059c:	f000 f918 	bl	107d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   105a0:	b3a0      	cbz	r0, 1060c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   105a2:	7861      	ldrb	r1, [r4, #1]
   105a4:	0708      	lsls	r0, r1, #28
   105a6:	d40b      	bmi.n	105c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   105a8:	f8d4 0002 	ldr.w	r0, [r4, #2]
   105ac:	f8d4 3005 	ldr.w	r3, [r4, #5]
   105b0:	0a02      	lsrs	r2, r0, #8
   105b2:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   105b6:	d830      	bhi.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105b8:	2220      	movs	r2, #32
   105ba:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   105be:	d82c      	bhi.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105c0:	7a60      	ldrb	r0, [r4, #9]
   105c2:	b318      	cbz	r0, 1060c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   105c4:	2807      	cmp	r0, #7
   105c6:	d828      	bhi.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105c8:	7aa0      	ldrb	r0, [r4, #10]
   105ca:	b128      	cbz	r0, 105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   105cc:	2801      	cmp	r0, #1
   105ce:	d003      	beq.n	105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   105d0:	2802      	cmp	r0, #2
   105d2:	d001      	beq.n	105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   105d4:	2803      	cmp	r0, #3
   105d6:	d120      	bne.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105d8:	074a      	lsls	r2, r1, #29
   105da:	d403      	bmi.n	105e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   105dc:	2802      	cmp	r0, #2
   105de:	d001      	beq.n	105e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   105e0:	2803      	cmp	r0, #3
   105e2:	d105      	bne.n	105f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   105e4:	7ae0      	ldrb	r0, [r4, #11]
   105e6:	b108      	cbz	r0, 105ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   105e8:	2801      	cmp	r0, #1
   105ea:	d116      	bne.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   105ec:	0748      	lsls	r0, r1, #29
   105ee:	d407      	bmi.n	10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   105f0:	7ca0      	ldrb	r0, [r4, #18]
   105f2:	b128      	cbz	r0, 10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   105f4:	2801      	cmp	r0, #1
   105f6:	d003      	beq.n	10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   105f8:	2802      	cmp	r0, #2
   105fa:	d001      	beq.n	10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   105fc:	2803      	cmp	r0, #3
   105fe:	d10c      	bne.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10600:	06c8      	lsls	r0, r1, #27
   10602:	7d20      	ldrb	r0, [r4, #20]
   10604:	d503      	bpl.n	1060e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   10606:	2801      	cmp	r0, #1
   10608:	d107      	bne.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1060a:	e002      	b.n	10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   1060c:	e005      	b.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1060e:	2802      	cmp	r0, #2
   10610:	d003      	beq.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10612:	7e20      	ldrb	r0, [r4, #24]
   10614:	b118      	cbz	r0, 1061e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10616:	2801      	cmp	r0, #1
   10618:	d001      	beq.n	1061e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1061a:	2012      	movs	r0, #18
   1061c:	bd38      	pop	{r3, r4, r5, pc}
   1061e:	2000      	movs	r0, #0
   10620:	bd38      	pop	{r3, r4, r5, pc}
   10622:	b510      	push	{r4, lr}
   10624:	0004      	movs	r4, r0
   10626:	d005      	beq.n	10634 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10628:	f7f7 f982 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1062c:	4384      	bics	r4, r0
   1062e:	d001      	beq.n	10634 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10630:	2000      	movs	r0, #0
   10632:	bd10      	pop	{r4, pc}
   10634:	2001      	movs	r0, #1
   10636:	bd10      	pop	{r4, pc}
   10638:	28fb      	cmp	r0, #251	; 0xfb
   1063a:	d803      	bhi.n	10644 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   1063c:	f640 0048 	movw	r0, #2120	; 0x848
   10640:	4281      	cmp	r1, r0
   10642:	d901      	bls.n	10648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   10644:	2011      	movs	r0, #17
   10646:	4770      	bx	lr
   10648:	2000      	movs	r0, #0
   1064a:	4770      	bx	lr
   1064c:	381b      	subs	r0, #27
   1064e:	28e1      	cmp	r0, #225	; 0xe1
   10650:	d206      	bcs.n	10660 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10652:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10656:	d303      	bcc.n	10660 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10658:	f244 2090 	movw	r0, #17040	; 0x4290
   1065c:	4281      	cmp	r1, r0
   1065e:	d901      	bls.n	10664 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10660:	2012      	movs	r0, #18
   10662:	4770      	bx	lr
   10664:	2000      	movs	r0, #0
   10666:	4770      	bx	lr
   10668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1066c:	4606      	mov	r6, r0
   1066e:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10672:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   10676:	4615      	mov	r5, r2
   10678:	302c      	adds	r0, #44	; 0x2c
   1067a:	f7f4 fa45 	bl	4b08 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   1067e:	4680      	mov	r8, r0
   10680:	2102      	movs	r1, #2
   10682:	f7fd fbdf 	bl	de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10686:	4287      	cmp	r7, r0
   10688:	d200      	bcs.n	1068c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   1068a:	4638      	mov	r0, r7
   1068c:	4607      	mov	r7, r0
   1068e:	2102      	movs	r1, #2
   10690:	4640      	mov	r0, r8
   10692:	f7fd fbd7 	bl	de44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10696:	4284      	cmp	r4, r0
   10698:	d200      	bcs.n	1069c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   1069a:	4620      	mov	r0, r4
   1069c:	8831      	ldrh	r1, [r6, #0]
   1069e:	8029      	strh	r1, [r5, #0]
   106a0:	2f1b      	cmp	r7, #27
   106a2:	d913      	bls.n	106cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   106a4:	2ffb      	cmp	r7, #251	; 0xfb
   106a6:	d300      	bcc.n	106aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   106a8:	27fb      	movs	r7, #251	; 0xfb
   106aa:	806f      	strh	r7, [r5, #2]
   106ac:	281b      	cmp	r0, #27
   106ae:	d90f      	bls.n	106d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   106b0:	28fb      	cmp	r0, #251	; 0xfb
   106b2:	d300      	bcc.n	106b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   106b4:	20fb      	movs	r0, #251	; 0xfb
   106b6:	80e8      	strh	r0, [r5, #6]
   106b8:	4640      	mov	r0, r8
   106ba:	f7ff fee9 	bl	10490 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   106be:	80a8      	strh	r0, [r5, #4]
   106c0:	4640      	mov	r0, r8
   106c2:	f7ff fee5 	bl	10490 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   106c6:	8128      	strh	r0, [r5, #8]
   106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106cc:	271b      	movs	r7, #27
   106ce:	e7ec      	b.n	106aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   106d0:	201b      	movs	r0, #27
   106d2:	e7f0      	b.n	106b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   106d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106d8:	7890      	ldrb	r0, [r2, #2]
   106da:	9e06      	ldr	r6, [sp, #24]
   106dc:	461d      	mov	r5, r3
   106de:	4614      	mov	r4, r2
   106e0:	b908      	cbnz	r0, 106e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   106e2:	f7f7 f925 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   106e6:	78e4      	ldrb	r4, [r4, #3]
   106e8:	4607      	mov	r7, r0
   106ea:	b914      	cbnz	r4, 106f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   106ec:	f7f7 f920 	bl	7930 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   106f0:	4604      	mov	r4, r0
   106f2:	b16f      	cbz	r7, 10710 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   106f4:	b164      	cbz	r4, 10710 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   106f6:	4638      	mov	r0, r7
   106f8:	f7ff fed5 	bl	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   106fc:	4620      	mov	r0, r4
   106fe:	f7ff fed2 	bl	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10702:	b12f      	cbz	r7, 10710 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10704:	b124      	cbz	r4, 10710 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10706:	702f      	strb	r7, [r5, #0]
   10708:	7034      	strb	r4, [r6, #0]
   1070a:	2000      	movs	r0, #0
   1070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10710:	2009      	movs	r0, #9
   10712:	e7fb      	b.n	1070c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10714:	207f      	movs	r0, #127	; 0x7f
   10716:	f000 b83c 	b.w	10792 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   1071a:	b508      	push	{r3, lr}
   1071c:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   10720:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   10724:	f88d 0000 	strb.w	r0, [sp]
   10728:	9800      	ldr	r0, [sp, #0]
   1072a:	9000      	str	r0, [sp, #0]
   1072c:	f89d 0000 	ldrb.w	r0, [sp]
   10730:	b100      	cbz	r0, 10734 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   10732:	2001      	movs	r0, #1
   10734:	1e40      	subs	r0, r0, #1
   10736:	4208      	tst	r0, r1
   10738:	d003      	beq.n	10742 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1073a:	2904      	cmp	r1, #4
   1073c:	d001      	beq.n	10742 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1073e:	2001      	movs	r0, #1
   10740:	bd08      	pop	{r3, pc}
   10742:	2000      	movs	r0, #0
   10744:	bd08      	pop	{r3, pc}
   10746:	b570      	push	{r4, r5, r6, lr}
   10748:	4605      	mov	r5, r0
   1074a:	f7fe fa21 	bl	eb90 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1074e:	b170      	cbz	r0, 1076e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   10750:	4628      	mov	r0, r5
   10752:	f7fe fbed 	bl	ef30 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10756:	2800      	cmp	r0, #0
   10758:	d008      	beq.n	1076c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   1075a:	4628      	mov	r0, r5
   1075c:	f7fe fbe5 	bl	ef2a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10760:	4604      	mov	r4, r0
   10762:	4628      	mov	r0, r5
   10764:	f7fe fbbb 	bl	eede <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   10768:	b118      	cbz	r0, 10772 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   1076a:	200c      	movs	r0, #12
   1076c:	bd70      	pop	{r4, r5, r6, pc}
   1076e:	2042      	movs	r0, #66	; 0x42
   10770:	bd70      	pop	{r4, r5, r6, pc}
   10772:	b164      	cbz	r4, 1078e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10774:	8820      	ldrh	r0, [r4, #0]
   10776:	f7fd f9f5 	bl	db64 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1077a:	8820      	ldrh	r0, [r4, #0]
   1077c:	2100      	movs	r1, #0
   1077e:	f7f1 f895 	bl	18ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10782:	b120      	cbz	r0, 1078e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10784:	f241 61ac 	movw	r1, #5804	; 0x16ac
   10788:	2039      	movs	r0, #57	; 0x39
   1078a:	f7f0 fe09 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1078e:	2000      	movs	r0, #0
   10790:	bd70      	pop	{r4, r5, r6, pc}
   10792:	b508      	push	{r3, lr}
   10794:	f640 1288 	movw	r2, #2440	; 0x988
   10798:	2300      	movs	r3, #0
   1079a:	4669      	mov	r1, sp
   1079c:	f7fc f83e 	bl	c81c <mpsl_fem_tx_power_split>
   107a0:	bd08      	pop	{r3, pc}
   107a2:	b530      	push	{r4, r5, lr}
   107a4:	f340 0400 	sbfx	r4, r0, #0, #1
   107a8:	f340 0040 	sbfx	r0, r0, #1, #1
   107ac:	1c40      	adds	r0, r0, #1
   107ae:	9d03      	ldr	r5, [sp, #12]
   107b0:	1c64      	adds	r4, r4, #1
   107b2:	d000      	beq.n	107b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
   107b4:	b119      	cbz	r1, 107be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   107b6:	b100      	cbz	r0, 107ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
   107b8:	b10a      	cbz	r2, 107be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   107ba:	b91c      	cbnz	r4, 107c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   107bc:	e001      	b.n	107c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   107be:	2011      	movs	r0, #17
   107c0:	bd30      	pop	{r4, r5, pc}
   107c2:	2100      	movs	r1, #0
   107c4:	7019      	strb	r1, [r3, #0]
   107c6:	b900      	cbnz	r0, 107ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   107c8:	2200      	movs	r2, #0
   107ca:	702a      	strb	r2, [r5, #0]
   107cc:	2000      	movs	r0, #0
   107ce:	bd30      	pop	{r4, r5, pc}
   107d0:	b2c0      	uxtb	r0, r0
   107d2:	06c1      	lsls	r1, r0, #27
   107d4:	d40c      	bmi.n	107f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   107d6:	0681      	lsls	r1, r0, #26
   107d8:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   107dc:	d503      	bpl.n	107e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
   107de:	b9d1      	cbnz	r1, 10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107e0:	0781      	lsls	r1, r0, #30
   107e2:	d418      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107e4:	e001      	b.n	107ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
   107e6:	2900      	cmp	r1, #0
   107e8:	d1fa      	bne.n	107e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
   107ea:	0700      	lsls	r0, r0, #28
   107ec:	d413      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107ee:	e010      	b.n	10812 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   107f0:	0641      	lsls	r1, r0, #25
   107f2:	d410      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107f4:	0681      	lsls	r1, r0, #26
   107f6:	d40e      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   107f8:	07c1      	lsls	r1, r0, #31
   107fa:	ea4f 7180 	mov.w	r1, r0, lsl #30
   107fe:	d004      	beq.n	1080a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10800:	2900      	cmp	r1, #0
   10802:	db02      	blt.n	1080a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10804:	0740      	lsls	r0, r0, #29
   10806:	d404      	bmi.n	10812 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   10808:	e005      	b.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1080a:	0701      	lsls	r1, r0, #28
   1080c:	d403      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1080e:	0740      	lsls	r0, r0, #29
   10810:	d401      	bmi.n	10816 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10812:	2001      	movs	r0, #1
   10814:	4770      	bx	lr
   10816:	2000      	movs	r0, #0
   10818:	4770      	bx	lr
   1081a:	b510      	push	{r4, lr}
   1081c:	f7f4 f958 	bl	4ad0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10820:	b108      	cbz	r0, 10826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   10822:	21fd      	movs	r1, #253	; 0xfd
   10824:	e004      	b.n	10830 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
   10826:	f7f3 faa9 	bl	3d7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1082a:	b120      	cbz	r0, 10836 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   1082c:	f44f 7181 	mov.w	r1, #258	; 0x102
   10830:	2001      	movs	r0, #1
   10832:	f7f0 fdb5 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1083a:	2001      	movs	r0, #1
   1083c:	f7fc bfc4 	b.w	d7c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10840:	6802      	ldr	r2, [r0, #0]
   10842:	b912      	cbnz	r2, 1084a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   10844:	6001      	str	r1, [r0, #0]
   10846:	4770      	bx	lr
   10848:	4602      	mov	r2, r0
   1084a:	6850      	ldr	r0, [r2, #4]
   1084c:	b108      	cbz	r0, 10852 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   1084e:	428a      	cmp	r2, r1
   10850:	d1fa      	bne.n	10848 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   10852:	428a      	cmp	r2, r1
   10854:	d0f7      	beq.n	10846 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10856:	6051      	str	r1, [r2, #4]
   10858:	4770      	bx	lr
   1085a:	b510      	push	{r4, lr}
   1085c:	4604      	mov	r4, r0
   1085e:	e002      	b.n	10866 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
   10860:	6820      	ldr	r0, [r4, #0]
   10862:	4780      	blx	r0
   10864:	6864      	ldr	r4, [r4, #4]
   10866:	2c00      	cmp	r4, #0
   10868:	d1fa      	bne.n	10860 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
   1086a:	bd10      	pop	{r4, pc}
   1086c:	b510      	push	{r4, lr}
   1086e:	2000      	movs	r0, #0
   10870:	f7fc ffaa 	bl	d7c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10874:	f7f1 f97c 	bl	1b70 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10878:	f7f1 fc12 	bl	20a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1087c:	f7f1 fda0 	bl	23c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10880:	2800      	cmp	r0, #0
   10882:	d003      	beq.n	1088c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   10884:	21df      	movs	r1, #223	; 0xdf
   10886:	2001      	movs	r0, #1
   10888:	f7f0 fd8a 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1088c:	bd10      	pop	{r4, pc}
   1088e:	b510      	push	{r4, lr}
   10890:	f7ff ffc3 	bl	1081a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   10894:	f7fe fe36 	bl	f504 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10898:	2800      	cmp	r0, #0
   1089a:	d004      	beq.n	108a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
   1089c:	f240 1117 	movw	r1, #279	; 0x117
   108a0:	2001      	movs	r0, #1
   108a2:	f7f0 fd7d 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108a6:	bd10      	pop	{r4, pc}

000108a8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   108a8:	f7fb bcec 	b.w	c284 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   108ac:	000b0001 	.word	0x000b0001
   108b0:	000a0002 	.word	0x000a0002
   108b4:	00090005 	.word	0x00090005
   108b8:	0008000a 	.word	0x0008000a
   108bc:	00070014 	.word	0x00070014
   108c0:	0006001e 	.word	0x0006001e
   108c4:	00050032 	.word	0x00050032
   108c8:	0004004b 	.word	0x0004004b
   108cc:	00030064 	.word	0x00030064
   108d0:	00020096 	.word	0x00020096
   108d4:	000100fa 	.word	0x000100fa
   108d8:	000001f4 	.word	0x000001f4

000108dc <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   108dc:	b518      	push	{r3, r4, lr}
   108de:	2200      	movs	r2, #0
   108e0:	704a      	strb	r2, [r1, #1]
   108e2:	2314      	movs	r3, #20
   108e4:	700b      	strb	r3, [r1, #0]
   108e6:	7202      	strb	r2, [r0, #8]
   108e8:	f8d0 400a 	ldr.w	r4, [r0, #10]
   108ec:	604c      	str	r4, [r1, #4]
   108ee:	89c3      	ldrh	r3, [r0, #14]
   108f0:	810b      	strh	r3, [r1, #8]
   108f2:	7a03      	ldrb	r3, [r0, #8]
   108f4:	f88d 3000 	strb.w	r3, [sp]
   108f8:	9b00      	ldr	r3, [sp, #0]
   108fa:	9300      	str	r3, [sp, #0]
   108fc:	f89d 3000 	ldrb.w	r3, [sp]
   10900:	2b00      	cmp	r3, #0
   10902:	d1f0      	bne.n	108e6 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   10904:	bd18      	pop	{r3, r4, pc}

00010906 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   10906:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10908:	460d      	mov	r5, r1
   1090a:	4604      	mov	r4, r0
   1090c:	f7f2 fc68 	bl	31e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   10910:	2600      	movs	r6, #0
   10912:	b1f8      	cbz	r0, 10954 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   10914:	f5a4 70c6 	sub.w	r0, r4, #396	; 0x18c
   10918:	7226      	strb	r6, [r4, #8]
   1091a:	8800      	ldrh	r0, [r0, #0]
   1091c:	f8ad 0000 	strh.w	r0, [sp]
   10920:	a902      	add	r1, sp, #8
   10922:	f7fd f9ef 	bl	dd04 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10926:	b108      	cbz	r0, 1092c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   10928:	2124      	movs	r1, #36	; 0x24
   1092a:	e010      	b.n	1094e <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   1092c:	9803      	ldr	r0, [sp, #12]
   1092e:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   10932:	f88d 1002 	strb.w	r1, [sp, #2]
   10936:	7841      	ldrb	r1, [r0, #1]
   10938:	f88d 1003 	strb.w	r1, [sp, #3]
   1093c:	8840      	ldrh	r0, [r0, #2]
   1093e:	f8ad 0004 	strh.w	r0, [sp, #4]
   10942:	2102      	movs	r1, #2
   10944:	4668      	mov	r0, sp
   10946:	f7ff fd31 	bl	103ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1094a:	b118      	cbz	r0, 10954 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   1094c:	213a      	movs	r1, #58	; 0x3a
   1094e:	207e      	movs	r0, #126	; 0x7e
   10950:	f7f0 fd26 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10954:	201c      	movs	r0, #28
   10956:	7028      	strb	r0, [r5, #0]
   10958:	706e      	strb	r6, [r5, #1]
   1095a:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1095e:	6068      	str	r0, [r5, #4]
   10960:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

00010962 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10962:	b510      	push	{r4, lr}
   10964:	f7f7 fb7e 	bl	8064 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10968:	f000 f81d 	bl	109a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1096c:	f7f7 f854 	bl	7a18 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10974:	f7f7 b94e 	b.w	7c14 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010978 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10978:	b510      	push	{r4, lr}
   1097a:	24c8      	movs	r4, #200	; 0xc8
   1097c:	1e64      	subs	r4, r4, #1
   1097e:	b2e4      	uxtb	r4, r4
   10980:	f7f7 f868 	bl	7a54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10984:	2802      	cmp	r0, #2
   10986:	d003      	beq.n	10990 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10988:	2801      	cmp	r0, #1
   1098a:	d000      	beq.n	1098e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   1098c:	2000      	movs	r0, #0
   1098e:	bd10      	pop	{r4, pc}
   10990:	2c00      	cmp	r4, #0
   10992:	d1f3      	bne.n	1097c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10994:	21ca      	movs	r1, #202	; 0xca
   10996:	203b      	movs	r0, #59	; 0x3b
   10998:	f7f0 fd02 	bl	13a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1099c:	5840      	ldr	r0, [r0, r1]
   1099e:	2800      	cmp	r0, #0
   109a0:	d000      	beq.n	109a4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   109a2:	2001      	movs	r0, #1
   109a4:	4770      	bx	lr

000109a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   109a6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   109aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   109ae:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   109b2:	f3bf 8f4f 	dsb	sy
   109b6:	f3bf 8f6f 	isb	sy
   109ba:	f7f7 b9c5 	b.w	7d48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   109be:	2800      	cmp	r0, #0
   109c0:	db09      	blt.n	109d6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   109c2:	f000 021f 	and.w	r2, r0, #31
   109c6:	2101      	movs	r1, #1
   109c8:	4091      	lsls	r1, r2
   109ca:	0940      	lsrs	r0, r0, #5
   109cc:	0080      	lsls	r0, r0, #2
   109ce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109d2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   109d6:	4770      	bx	lr
   109d8:	2800      	cmp	r0, #0
   109da:	db0d      	blt.n	109f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   109dc:	f000 021f 	and.w	r2, r0, #31
   109e0:	2101      	movs	r1, #1
   109e2:	4091      	lsls	r1, r2
   109e4:	0940      	lsrs	r0, r0, #5
   109e6:	0080      	lsls	r0, r0, #2
   109e8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109ec:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   109f0:	f3bf 8f4f 	dsb	sy
   109f4:	f3bf 8f6f 	isb	sy
   109f8:	4770      	bx	lr
   109fa:	5840      	ldr	r0, [r0, r1]
   109fc:	2800      	cmp	r0, #0
   109fe:	d000      	beq.n	10a02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10a00:	2001      	movs	r0, #1
   10a02:	4770      	bx	lr
   10a04:	5840      	ldr	r0, [r0, r1]
   10a06:	2800      	cmp	r0, #0
   10a08:	d000      	beq.n	10a0c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10a0a:	2001      	movs	r0, #1
   10a0c:	4770      	bx	lr

00010a0e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10a0e:	b510      	push	{r4, lr}
   10a10:	4604      	mov	r4, r0
   10a12:	4608      	mov	r0, r1
   10a14:	f7f7 fc4c 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10a1c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10a20:	fbb0 f0f1 	udiv	r0, r0, r1
   10a24:	1a20      	subs	r0, r4, r0
   10a26:	1e80      	subs	r0, r0, #2
   10a28:	bd10      	pop	{r4, pc}

00010a2a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10a2a:	b510      	push	{r4, lr}
   10a2c:	4604      	mov	r4, r0
   10a2e:	4608      	mov	r0, r1
   10a30:	f7f7 fc3e 	bl	82b0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10a38:	fbb0 f0f1 	udiv	r0, r0, r1
   10a3c:	1a20      	subs	r0, r4, r0
   10a3e:	bd10      	pop	{r4, pc}
   10a40:	2804      	cmp	r0, #4
   10a42:	d202      	bcs.n	10a4a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10a44:	f04f 0028 	mov.w	r0, #40	; 0x28
   10a48:	4770      	bx	lr
   10a4a:	d102      	bne.n	10a52 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10a4c:	f04f 0010 	mov.w	r0, #16
   10a50:	4770      	bx	lr
   10a52:	f04f 0000 	mov.w	r0, #0
   10a56:	4770      	bx	lr
   10a58:	2100      	movs	r1, #0
   10a5a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10a5e:	f800 1f24 	strb.w	r1, [r0, #36]!
   10a62:	7041      	strb	r1, [r0, #1]
   10a64:	4770      	bx	lr

00010a66 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10a66:	b570      	push	{r4, r5, r6, lr}
   10a68:	f7f8 f9e2 	bl	8e30 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10a6c:	4605      	mov	r5, r0
   10a6e:	2400      	movs	r4, #0
   10a70:	e006      	b.n	10a80 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10a72:	4620      	mov	r0, r4
   10a74:	f7f8 f9e2 	bl	8e3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10a78:	f7ff ffee 	bl	10a58 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10a7c:	1c64      	adds	r4, r4, #1
   10a7e:	b2e4      	uxtb	r4, r4
   10a80:	42ac      	cmp	r4, r5
   10a82:	d3f6      	bcc.n	10a72 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10a84:	bd70      	pop	{r4, r5, r6, pc}

00010a86 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10a86:	f7fa bdb9 	b.w	b5fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010a8a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10a8a:	b510      	push	{r4, lr}
   10a8c:	2000      	movs	r0, #0
   10a8e:	f7fb f8ef 	bl	bc70 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10a92:	6800      	ldr	r0, [r0, #0]
   10a94:	2800      	cmp	r0, #0
   10a96:	bf18      	it	ne
   10a98:	2001      	movne	r0, #1
   10a9a:	bd10      	pop	{r4, pc}

00010a9c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10a9c:	b510      	push	{r4, lr}
   10a9e:	f7fb f967 	bl	bd70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   10aa2:	f7fa fc25 	bl	b2f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10aa6:	f000 f802 	bl	10aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10aaa:	b280      	uxth	r0, r0
   10aac:	bd10      	pop	{r4, pc}

00010aae <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10aae:	0a41      	lsrs	r1, r0, #9
   10ab0:	f643 5209 	movw	r2, #15625	; 0x3d09
   10ab4:	4351      	muls	r1, r2
   10ab6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10aba:	fb10 f002 	smulbb	r0, r0, r2
   10abe:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10ac2:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10ac6:	4770      	bx	lr
   10ac8:	2800      	cmp	r0, #0
   10aca:	db09      	blt.n	10ae0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10acc:	f000 021f 	and.w	r2, r0, #31
   10ad0:	2101      	movs	r1, #1
   10ad2:	4091      	lsls	r1, r2
   10ad4:	0940      	lsrs	r0, r0, #5
   10ad6:	0080      	lsls	r0, r0, #2
   10ad8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10adc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10ae0:	4770      	bx	lr
   10ae2:	2800      	cmp	r0, #0
   10ae4:	db0d      	blt.n	10b02 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10ae6:	f000 021f 	and.w	r2, r0, #31
   10aea:	2101      	movs	r1, #1
   10aec:	4091      	lsls	r1, r2
   10aee:	0940      	lsrs	r0, r0, #5
   10af0:	0080      	lsls	r0, r0, #2
   10af2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10af6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10afa:	f3bf 8f4f 	dsb	sy
   10afe:	f3bf 8f6f 	isb	sy
   10b02:	4770      	bx	lr
   10b04:	5840      	ldr	r0, [r0, r1]
   10b06:	2800      	cmp	r0, #0
   10b08:	d000      	beq.n	10b0c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10b0a:	2001      	movs	r0, #1
   10b0c:	4770      	bx	lr
   10b0e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10b12:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10b16:	f002 0201 	and.w	r2, r2, #1
   10b1a:	03c0      	lsls	r0, r0, #15
   10b1c:	d503      	bpl.n	10b26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10b1e:	428a      	cmp	r2, r1
   10b20:	d101      	bne.n	10b26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10b22:	2001      	movs	r0, #1
   10b24:	4770      	bx	lr
   10b26:	2000      	movs	r0, #0
   10b28:	4770      	bx	lr

00010b2a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10b2a:	b510      	push	{r4, lr}
   10b2c:	2101      	movs	r1, #1
   10b2e:	0788      	lsls	r0, r1, #30
   10b30:	f7fb fc5e 	bl	c3f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10b34:	2800      	cmp	r0, #0
   10b36:	d000      	beq.n	10b3a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10b38:	2001      	movs	r0, #1
   10b3a:	bd10      	pop	{r4, pc}

00010b3c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10b3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10b40:	2101      	movs	r1, #1
   10b42:	6001      	str	r1, [r0, #0]
   10b44:	4770      	bx	lr

00010b46 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10b4a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10b4e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10b52:	f002 0203 	and.w	r2, r2, #3
   10b56:	03c9      	lsls	r1, r1, #15
   10b58:	d503      	bpl.n	10b62 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10b5a:	4282      	cmp	r2, r0
   10b5c:	d101      	bne.n	10b62 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10b5e:	2001      	movs	r0, #1
   10b60:	4770      	bx	lr
   10b62:	2000      	movs	r0, #0
   10b64:	4770      	bx	lr

00010b66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10b66:	b510      	push	{r4, lr}
   10b68:	2100      	movs	r1, #0
   10b6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10b6e:	f7fb fc3f 	bl	c3f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10b72:	2800      	cmp	r0, #0
   10b74:	d000      	beq.n	10b78 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10b76:	2001      	movs	r0, #1
   10b78:	bd10      	pop	{r4, pc}
   10b7a:	2800      	cmp	r0, #0
   10b7c:	db09      	blt.n	10b92 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10b7e:	f000 021f 	and.w	r2, r0, #31
   10b82:	2101      	movs	r1, #1
   10b84:	4091      	lsls	r1, r2
   10b86:	0940      	lsrs	r0, r0, #5
   10b88:	0080      	lsls	r0, r0, #2
   10b8a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b8e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10b92:	4770      	bx	lr
   10b94:	2800      	cmp	r0, #0
   10b96:	db0d      	blt.n	10bb4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10b98:	f000 021f 	and.w	r2, r0, #31
   10b9c:	2101      	movs	r1, #1
   10b9e:	4091      	lsls	r1, r2
   10ba0:	0940      	lsrs	r0, r0, #5
   10ba2:	0080      	lsls	r0, r0, #2
   10ba4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10ba8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10bac:	f3bf 8f4f 	dsb	sy
   10bb0:	f3bf 8f6f 	isb	sy
   10bb4:	4770      	bx	lr
   10bb6:	1000      	.short	0x1000
   10bb8:	00fa0002 	.word	0x00fa0002
   10bbc:	f18c0000 	.word	0xf18c0000
   10bc0:	4134cc9e 	.word	0x4134cc9e
   10bc4:	f70ea7d7 	.word	0xf70ea7d7
   10bc8:	2bbb1459 	.word	0x2bbb1459
   10bcc:	bb7f67d7 	.word	0xbb7f67d7
   10bd0:	ebbe      	.short	0xebbe
   10bd2:	2800      	cmp	r0, #0
   10bd4:	db09      	blt.n	10bea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10bd6:	f000 021f 	and.w	r2, r0, #31
   10bda:	2101      	movs	r1, #1
   10bdc:	4091      	lsls	r1, r2
   10bde:	0940      	lsrs	r0, r0, #5
   10be0:	0080      	lsls	r0, r0, #2
   10be2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10be6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10bea:	4770      	bx	lr

00010bec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10bec:	f3ef 8110 	mrs	r1, PRIMASK
   10bf0:	b672      	cpsid	i
   10bf2:	7802      	ldrb	r2, [r0, #0]
   10bf4:	2a01      	cmp	r2, #1
   10bf6:	d001      	beq.n	10bfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10bf8:	2201      	movs	r2, #1
   10bfa:	e000      	b.n	10bfe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10bfc:	2200      	movs	r2, #0
   10bfe:	2301      	movs	r3, #1
   10c00:	7003      	strb	r3, [r0, #0]
   10c02:	b901      	cbnz	r1, 10c06 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10c04:	b662      	cpsie	i
   10c06:	b10a      	cbz	r2, 10c0c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10c08:	2000      	movs	r0, #0
   10c0a:	4770      	bx	lr
   10c0c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10c10:	4770      	bx	lr

00010c12 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10c12:	2100      	movs	r1, #0
   10c14:	7001      	strb	r1, [r0, #0]
   10c16:	4608      	mov	r0, r1
   10c18:	4770      	bx	lr

00010c1a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10c1a:	f3ef 8110 	mrs	r1, PRIMASK
   10c1e:	b672      	cpsid	i
   10c20:	2200      	movs	r2, #0
   10c22:	7002      	strb	r2, [r0, #0]
   10c24:	b901      	cbnz	r1, 10c28 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10c26:	b662      	cpsie	i
   10c28:	2000      	movs	r0, #0
   10c2a:	4770      	bx	lr

00010c2c <mpsl_low_priority_process>:
   10c2c:	f7fb bd36 	b.w	c69c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010c30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10c30:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c34:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10c38:	280f      	cmp	r0, #15
   10c3a:	d001      	beq.n	10c40 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10c3c:	2000      	movs	r0, #0
   10c3e:	4770      	bx	lr
   10c40:	2001      	movs	r0, #1
   10c42:	4770      	bx	lr

00010c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10c44:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c48:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10c4c:	280a      	cmp	r0, #10
   10c4e:	d001      	beq.n	10c54 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10c50:	2000      	movs	r0, #0
   10c52:	4770      	bx	lr
   10c54:	2001      	movs	r0, #1
   10c56:	4770      	bx	lr

00010c58 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10c58:	b500      	push	{lr}
   10c5a:	f7ff fff3 	bl	10c44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10c5e:	b120      	cbz	r0, 10c6a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10c60:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c64:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10c68:	b108      	cbz	r0, 10c6e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10c6a:	2000      	movs	r0, #0
   10c6c:	bd00      	pop	{pc}
   10c6e:	2001      	movs	r0, #1
   10c70:	bd00      	pop	{pc}

00010c72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10c72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c76:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10c7a:	280e      	cmp	r0, #14
   10c7c:	d001      	beq.n	10c82 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10c7e:	2000      	movs	r0, #0
   10c80:	4770      	bx	lr
   10c82:	2001      	movs	r0, #1
   10c84:	4770      	bx	lr

00010c86 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10c86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c8a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10c8e:	2810      	cmp	r0, #16
   10c90:	d001      	beq.n	10c96 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10c92:	2000      	movs	r0, #0
   10c94:	4770      	bx	lr
   10c96:	2001      	movs	r0, #1
   10c98:	4770      	bx	lr

00010c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10c9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c9e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10ca2:	2806      	cmp	r0, #6
   10ca4:	d003      	beq.n	10cae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10ca6:	1c40      	adds	r0, r0, #1
   10ca8:	d001      	beq.n	10cae <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10caa:	2000      	movs	r0, #0
   10cac:	4770      	bx	lr
   10cae:	2001      	movs	r0, #1
   10cb0:	4770      	bx	lr

00010cb2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10cb2:	b500      	push	{lr}
   10cb4:	f7ff fff1 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10cb8:	b148      	cbz	r0, 10cce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10cba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cbe:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10cc2:	2806      	cmp	r0, #6
   10cc4:	d303      	bcc.n	10cce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10cc6:	1c40      	adds	r0, r0, #1
   10cc8:	d001      	beq.n	10cce <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10cca:	2001      	movs	r0, #1
   10ccc:	bd00      	pop	{pc}
   10cce:	2000      	movs	r0, #0
   10cd0:	bd00      	pop	{pc}

00010cd2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10cd2:	b500      	push	{lr}
   10cd4:	f7ff ffe1 	bl	10c9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10cd8:	b138      	cbz	r0, 10cea <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10cda:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cde:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10ce2:	2806      	cmp	r0, #6
   10ce4:	d303      	bcc.n	10cee <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10ce6:	1c40      	adds	r0, r0, #1
   10ce8:	d001      	beq.n	10cee <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10cea:	2000      	movs	r0, #0
   10cec:	bd00      	pop	{pc}
   10cee:	2001      	movs	r0, #1
   10cf0:	bd00      	pop	{pc}

00010cf2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10cf2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cf6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10cfa:	280d      	cmp	r0, #13
   10cfc:	d001      	beq.n	10d02 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10cfe:	2000      	movs	r0, #0
   10d00:	4770      	bx	lr
   10d02:	2001      	movs	r0, #1
   10d04:	4770      	bx	lr

00010d06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10d06:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d0a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d0e:	2808      	cmp	r0, #8
   10d10:	d001      	beq.n	10d16 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10d12:	2000      	movs	r0, #0
   10d14:	4770      	bx	lr
   10d16:	2001      	movs	r0, #1
   10d18:	4770      	bx	lr

00010d1a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10d1a:	f7fb bcf9 	b.w	c710 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010d1e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10d1e:	f7fb bcf7 	b.w	c710 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010d22 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d26:	428a      	cmp	r2, r1
   10d28:	d803      	bhi.n	10d32 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10d2a:	2179      	movs	r1, #121	; 0x79
   10d2c:	2096      	movs	r0, #150	; 0x96
   10d2e:	f7fb fbb5 	bl	c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10d32:	fab2 f382 	clz	r3, r2
   10d36:	b13b      	cbz	r3, 10d48 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10d38:	4099      	lsls	r1, r3
   10d3a:	f1c3 0420 	rsb	r4, r3, #32
   10d3e:	fa20 f404 	lsr.w	r4, r0, r4
   10d42:	4321      	orrs	r1, r4
   10d44:	4098      	lsls	r0, r3
   10d46:	409a      	lsls	r2, r3
   10d48:	0c14      	lsrs	r4, r2, #16
   10d4a:	0c07      	lsrs	r7, r0, #16
   10d4c:	b286      	uxth	r6, r0
   10d4e:	fbb1 f0f4 	udiv	r0, r1, r4
   10d52:	fbb1 f3f4 	udiv	r3, r1, r4
   10d56:	fb04 1c10 	mls	ip, r4, r0, r1
   10d5a:	b295      	uxth	r5, r2
   10d5c:	fb03 f005 	mul.w	r0, r3, r5
   10d60:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   10d64:	4560      	cmp	r0, ip
   10d66:	d907      	bls.n	10d78 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10d68:	eba0 000c 	sub.w	r0, r0, ip
   10d6c:	4290      	cmp	r0, r2
   10d6e:	d901      	bls.n	10d74 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   10d70:	2002      	movs	r0, #2
   10d72:	e000      	b.n	10d76 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   10d74:	2001      	movs	r0, #1
   10d76:	1a1b      	subs	r3, r3, r0
   10d78:	0409      	lsls	r1, r1, #16
   10d7a:	0418      	lsls	r0, r3, #16
   10d7c:	19c9      	adds	r1, r1, r7
   10d7e:	fba3 3702 	umull	r3, r7, r3, r2
   10d82:	1acf      	subs	r7, r1, r3
   10d84:	fbb7 f1f4 	udiv	r1, r7, r4
   10d88:	fbb7 f3f4 	udiv	r3, r7, r4
   10d8c:	fb04 7413 	mls	r4, r4, r3, r7
   10d90:	fb01 f305 	mul.w	r3, r1, r5
   10d94:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10d98:	42a3      	cmp	r3, r4
   10d9a:	d906      	bls.n	10daa <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10d9c:	1b1b      	subs	r3, r3, r4
   10d9e:	4293      	cmp	r3, r2
   10da0:	d901      	bls.n	10da6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   10da2:	2202      	movs	r2, #2
   10da4:	e000      	b.n	10da8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10da6:	2201      	movs	r2, #1
   10da8:	1a89      	subs	r1, r1, r2
   10daa:	4308      	orrs	r0, r1
   10dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010db0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10db0:	b4f0      	push	{r4, r5, r6, r7}
   10db2:	ea80 0c01 	eor.w	ip, r0, r1
   10db6:	4603      	mov	r3, r0
   10db8:	f01c 0f03 	tst.w	ip, #3
   10dbc:	d13c      	bne.n	10e38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10dbe:	f013 0f03 	tst.w	r3, #3
   10dc2:	d00b      	beq.n	10ddc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10dc4:	2a00      	cmp	r2, #0
   10dc6:	bf04      	itt	eq
   10dc8:	bcf0      	popeq	{r4, r5, r6, r7}
   10dca:	4770      	bxeq	lr
   10dcc:	f811 cb01 	ldrb.w	ip, [r1], #1
   10dd0:	f803 cb01 	strb.w	ip, [r3], #1
   10dd4:	1e52      	subs	r2, r2, #1
   10dd6:	f013 0f03 	tst.w	r3, #3
   10dda:	d1f3      	bne.n	10dc4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10ddc:	2a03      	cmp	r2, #3
   10dde:	d94f      	bls.n	10e80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10de0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10de4:	d24c      	bcs.n	10e80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10de6:	f1c2 0c00 	rsb	ip, r2, #0
   10dea:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10dee:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10df2:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10df6:	f1cc 0c00 	rsb	ip, ip, #0
   10dfa:	f1bc 0f00 	cmp.w	ip, #0
   10dfe:	dd1b      	ble.n	10e38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e00:	1f0d      	subs	r5, r1, #4
   10e02:	1f1c      	subs	r4, r3, #4
   10e04:	f01c 0f01 	tst.w	ip, #1
   10e08:	d003      	beq.n	10e12 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10e0a:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10e0e:	f844 6f04 	str.w	r6, [r4, #4]!
   10e12:	ea5f 066c 	movs.w	r6, ip, asr #1
   10e16:	d007      	beq.n	10e28 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10e18:	686f      	ldr	r7, [r5, #4]
   10e1a:	6067      	str	r7, [r4, #4]
   10e1c:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10e20:	f844 7f08 	str.w	r7, [r4, #8]!
   10e24:	1e76      	subs	r6, r6, #1
   10e26:	d1f7      	bne.n	10e18 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10e28:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10e2c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10e30:	f1cc 0c00 	rsb	ip, ip, #0
   10e34:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10e38:	2a00      	cmp	r2, #0
   10e3a:	bf04      	itt	eq
   10e3c:	bcf0      	popeq	{r4, r5, r6, r7}
   10e3e:	4770      	bxeq	lr
   10e40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10e44:	d226      	bcs.n	10e94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10e46:	2a00      	cmp	r2, #0
   10e48:	bfdc      	itt	le
   10e4a:	bcf0      	pople	{r4, r5, r6, r7}
   10e4c:	4770      	bxle	lr
   10e4e:	1e49      	subs	r1, r1, #1
   10e50:	1e5b      	subs	r3, r3, #1
   10e52:	f012 0f01 	tst.w	r2, #1
   10e56:	d003      	beq.n	10e60 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10e58:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10e5c:	f803 cf01 	strb.w	ip, [r3, #1]!
   10e60:	1052      	asrs	r2, r2, #1
   10e62:	bf04      	itt	eq
   10e64:	bcf0      	popeq	{r4, r5, r6, r7}
   10e66:	4770      	bxeq	lr
   10e68:	f891 c001 	ldrb.w	ip, [r1, #1]
   10e6c:	f883 c001 	strb.w	ip, [r3, #1]
   10e70:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10e74:	f803 cf02 	strb.w	ip, [r3, #2]!
   10e78:	1e52      	subs	r2, r2, #1
   10e7a:	d1f5      	bne.n	10e68 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10e7c:	bcf0      	pop	{r4, r5, r6, r7}
   10e7e:	4770      	bx	lr
   10e80:	2a04      	cmp	r2, #4
   10e82:	d3d9      	bcc.n	10e38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e84:	f851 cb04 	ldr.w	ip, [r1], #4
   10e88:	1f12      	subs	r2, r2, #4
   10e8a:	f843 cb04 	str.w	ip, [r3], #4
   10e8e:	2a04      	cmp	r2, #4
   10e90:	d2f8      	bcs.n	10e84 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10e92:	e7d1      	b.n	10e38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e94:	f811 cb01 	ldrb.w	ip, [r1], #1
   10e98:	f803 cb01 	strb.w	ip, [r3], #1
   10e9c:	1e52      	subs	r2, r2, #1
   10e9e:	d1f9      	bne.n	10e94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10ea0:	bcf0      	pop	{r4, r5, r6, r7}
   10ea2:	4770      	bx	lr

00010ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10ea4:	b470      	push	{r4, r5, r6}
   10ea6:	4603      	mov	r3, r0
   10ea8:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10eac:	f010 0f03 	tst.w	r0, #3
   10eb0:	d009      	beq.n	10ec6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10eb2:	2a00      	cmp	r2, #0
   10eb4:	bf04      	itt	eq
   10eb6:	bc70      	popeq	{r4, r5, r6}
   10eb8:	4770      	bxeq	lr
   10eba:	f803 cb01 	strb.w	ip, [r3], #1
   10ebe:	1e52      	subs	r2, r2, #1
   10ec0:	f013 0f03 	tst.w	r3, #3
   10ec4:	d1f5      	bne.n	10eb2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10ec6:	b2c9      	uxtb	r1, r1
   10ec8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10ecc:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10ed0:	2a03      	cmp	r2, #3
   10ed2:	d939      	bls.n	10f48 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10ed4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10ed8:	d236      	bcs.n	10f48 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10eda:	4251      	negs	r1, r2
   10edc:	17cc      	asrs	r4, r1, #31
   10ede:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10ee2:	1089      	asrs	r1, r1, #2
   10ee4:	424e      	negs	r6, r1
   10ee6:	2e00      	cmp	r6, #0
   10ee8:	dd11      	ble.n	10f0e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10eea:	1f19      	subs	r1, r3, #4
   10eec:	f016 0f01 	tst.w	r6, #1
   10ef0:	bf18      	it	ne
   10ef2:	f841 5f04 	strne.w	r5, [r1, #4]!
   10ef6:	1074      	asrs	r4, r6, #1
   10ef8:	d004      	beq.n	10f04 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10efa:	604d      	str	r5, [r1, #4]
   10efc:	f841 5f08 	str.w	r5, [r1, #8]!
   10f00:	1e64      	subs	r4, r4, #1
   10f02:	d1fa      	bne.n	10efa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10f04:	4271      	negs	r1, r6
   10f06:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10f0a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10f0e:	2a00      	cmp	r2, #0
   10f10:	bf04      	itt	eq
   10f12:	bc70      	popeq	{r4, r5, r6}
   10f14:	4770      	bxeq	lr
   10f16:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10f1a:	d21d      	bcs.n	10f58 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10f1c:	2a00      	cmp	r2, #0
   10f1e:	bfdc      	itt	le
   10f20:	bc70      	pople	{r4, r5, r6}
   10f22:	4770      	bxle	lr
   10f24:	1e59      	subs	r1, r3, #1
   10f26:	f012 0f01 	tst.w	r2, #1
   10f2a:	bf18      	it	ne
   10f2c:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10f30:	1052      	asrs	r2, r2, #1
   10f32:	bf04      	itt	eq
   10f34:	bc70      	popeq	{r4, r5, r6}
   10f36:	4770      	bxeq	lr
   10f38:	f881 c001 	strb.w	ip, [r1, #1]
   10f3c:	f801 cf02 	strb.w	ip, [r1, #2]!
   10f40:	1e52      	subs	r2, r2, #1
   10f42:	d1f9      	bne.n	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10f44:	bc70      	pop	{r4, r5, r6}
   10f46:	4770      	bx	lr
   10f48:	2a04      	cmp	r2, #4
   10f4a:	d3e0      	bcc.n	10f0e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10f4c:	1f12      	subs	r2, r2, #4
   10f4e:	f843 5b04 	str.w	r5, [r3], #4
   10f52:	2a04      	cmp	r2, #4
   10f54:	d2fa      	bcs.n	10f4c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10f56:	e7da      	b.n	10f0e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10f58:	f803 cb01 	strb.w	ip, [r3], #1
   10f5c:	1e52      	subs	r2, r2, #1
   10f5e:	d1fb      	bne.n	10f58 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10f60:	bc70      	pop	{r4, r5, r6}
   10f62:	4770      	bx	lr
   10f64:	f04f 30ff 	mov.w	r0, #4294967295
   10f68:	4770      	bx	lr
   10f6a:	2000      	movs	r0, #0
   10f6c:	4770      	bx	lr
   10f6e:	2000      	movs	r0, #0
   10f70:	4770      	bx	lr
   10f72:	f04f 30ff 	mov.w	r0, #4294967295
   10f76:	4770      	bx	lr
   10f78:	4770      	bx	lr
   10f7a:	4770      	bx	lr
   10f7c:	2000      	movs	r0, #0
   10f7e:	4770      	bx	lr
   10f80:	2100      	movs	r1, #0
   10f82:	7001      	strb	r1, [r0, #0]
   10f84:	4770      	bx	lr
   10f86:	f04f 30ff 	mov.w	r0, #4294967295
   10f8a:	4770      	bx	lr
   10f8c:	f04f 30ff 	mov.w	r0, #4294967295
   10f90:	4770      	bx	lr
   10f92:	2100      	movs	r1, #0
   10f94:	7001      	strb	r1, [r0, #0]
   10f96:	4770      	bx	lr
   10f98:	f04f 30ff 	mov.w	r0, #4294967295
   10f9c:	4770      	bx	lr
   10f9e:	f04f 30ff 	mov.w	r0, #4294967295
   10fa2:	4770      	bx	lr
   10fa4:	7800      	ldrb	r0, [r0, #0]
   10fa6:	2800      	cmp	r0, #0
   10fa8:	d001      	beq.n	10fae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10faa:	f06f 0015 	mvn.w	r0, #21
   10fae:	4770      	bx	lr
   10fb0:	2000      	movs	r0, #0
   10fb2:	4770      	bx	lr
   10fb4:	2200      	movs	r2, #0
   10fb6:	f000 b802 	b.w	10fbe <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010fba <mpsl_fem_init>:
   10fba:	f7f7 bea7 	b.w	8d0c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010fbe <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10fbe:	b570      	push	{r4, r5, r6, lr}
   10fc0:	4614      	mov	r4, r2
   10fc2:	460d      	mov	r5, r1
   10fc4:	1b00      	subs	r0, r0, r4
   10fc6:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10fca:	4288      	cmp	r0, r1
   10fcc:	da01      	bge.n	10fd2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10fce:	4608      	mov	r0, r1
   10fd0:	e002      	b.n	10fd8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10fd2:	287f      	cmp	r0, #127	; 0x7f
   10fd4:	dd00      	ble.n	10fd8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10fd6:	207f      	movs	r0, #127	; 0x7f
   10fd8:	4619      	mov	r1, r3
   10fda:	b240      	sxtb	r0, r0
   10fdc:	f7f7 feca 	bl	8d74 <mpsl_tx_power_radio_supported_power_adjust>
   10fe0:	7028      	strb	r0, [r5, #0]
   10fe2:	706c      	strb	r4, [r5, #1]
   10fe4:	2100      	movs	r1, #0
   10fe6:	4420      	add	r0, r4
   10fe8:	70a9      	strb	r1, [r5, #2]
   10fea:	b240      	sxtb	r0, r0
   10fec:	bd70      	pop	{r4, r5, r6, pc}
   10fee:	080c      	.short	0x080c
   10ff0:	010d1702 	.word	0x010d1702
   10ff4:	09090201 	.word	0x09090201
   10ff8:	02060101 	.word	0x02060101
   10ffc:	03181809 	.word	0x03181809
   11000:	09090101 	.word	0x09090101
   11004:	03050303 	.word	0x03050303
   11008:	02230102 	.word	0x02230102
   1100c:	10092402 	.word	0x10092402
   11010:	05050404 	.word	0x05050404
   11014:	0b040b0b 	.word	0x0b040b0b
   11018:	2b          	.byte	0x2b
   11019:	d8          	.byte	0xd8
   1101a:	f0ec      	.short	0xf0ec
   1101c:	00fcf8f4 	.word	0x00fcf8f4
   11020:	05040302 	.word	0x05040302
   11024:	00080706 	.word	0x00080706
	...
   11038:	01000000 	.word	0x01000000
   1103c:	02010101 	.word	0x02010101
   11040:	03020202 	.word	0x03020202
   11044:	04030303 	.word	0x04030303
   11048:	05040404 	.word	0x05040404
   1104c:	06050505 	.word	0x06050505
   11050:	09080706 	.word	0x09080706
   11054:	0d0c0b0a 	.word	0x0d0c0b0a
	...
   1106c:	01010101 	.word	0x01010101
   11070:	02020202 	.word	0x02020202
   11074:	03030303 	.word	0x03030303
   11078:	04040404 	.word	0x04040404
   1107c:	05050505 	.word	0x05050505
   11080:	08060606 	.word	0x08060606
   11084:	00000009 	.word	0x00000009

00011088 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   11088:	b530      	push	{r4, r5, lr}
   1108a:	b089      	sub	sp, #36	; 0x24
   1108c:	4604      	mov	r4, r0
   1108e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11090:	2000      	movs	r0, #0
   11092:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
	list->tail = NULL;
   11096:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1109a:	f504 7080 	add.w	r0, r4, #256	; 0x100
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1109e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	list->tail = (sys_dnode_t *)list;
   110a2:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   110a6:	f504 7084 	add.w	r0, r4, #264	; 0x108
	list->head = (sys_dnode_t *)list;
   110aa:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	list->tail = (sys_dnode_t *)list;
   110ae:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   110b2:	b1ed      	cbz	r5, 110f0 <k_work_queue_start+0x68>
   110b4:	7928      	ldrb	r0, [r5, #4]
   110b6:	b9e8      	cbnz	r0, 110f4 <k_work_queue_start+0x6c>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   110b8:	2001      	movs	r0, #1
	*flagp = flags;
   110ba:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   110be:	ed9f 7b10 	vldr	d7, [pc, #64]	; 11100 <k_work_queue_start+0x78>
   110c2:	ed8d 7b06 	vstr	d7, [sp, #24]
   110c6:	2000      	movs	r0, #0
   110c8:	9004      	str	r0, [sp, #16]
   110ca:	9303      	str	r3, [sp, #12]
   110cc:	9002      	str	r0, [sp, #8]
   110ce:	9001      	str	r0, [sp, #4]
   110d0:	9400      	str	r4, [sp, #0]
   110d2:	4b0d      	ldr	r3, [pc, #52]	; (11108 <k_work_queue_start+0x80>)
   110d4:	4620      	mov	r0, r4
   110d6:	f01c fa1f 	bl	2d518 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   110da:	b125      	cbz	r5, 110e6 <k_work_queue_start+0x5e>
   110dc:	6829      	ldr	r1, [r5, #0]
   110de:	b111      	cbz	r1, 110e6 <k_work_queue_start+0x5e>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
   110e0:	4620      	mov	r0, r4
   110e2:	f010 fee5 	bl	21eb0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   110e6:	4620      	mov	r0, r4
   110e8:	f01c fa06 	bl	2d4f8 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   110ec:	b009      	add	sp, #36	; 0x24
   110ee:	bd30      	pop	{r4, r5, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   110f0:	2001      	movs	r0, #1
   110f2:	e7e2      	b.n	110ba <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   110f4:	f240 1001 	movw	r0, #257	; 0x101
   110f8:	e7df      	b.n	110ba <k_work_queue_start+0x32>
   110fa:	bf00      	nop
   110fc:	f3af 8000 	nop.w
   11100:	ffffffff 	.word	0xffffffff
   11104:	ffffffff 	.word	0xffffffff
   11108:	00022469 	.word	0x00022469
   1110c:	00000000 	.word	0x00000000

00011110 <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   11110:	b510      	push	{r4, lr}
   11112:	b082      	sub	sp, #8
   11114:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   11116:	2300      	movs	r3, #0
   11118:	3204      	adds	r2, #4
   1111a:	d20e      	bcs.n	1113a <z_heap_aligned_alloc+0x2a>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   1111c:	b97b      	cbnz	r3, 1113e <z_heap_aligned_alloc+0x2e>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1111e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 11148 <z_heap_aligned_alloc+0x38>
   11122:	ed8d 7b00 	vstr	d7, [sp]
   11126:	f041 0104 	orr.w	r1, r1, #4
   1112a:	4620      	mov	r0, r4
   1112c:	f01c f901 	bl	2d332 <k_heap_aligned_alloc>
	if (mem == NULL) {
   11130:	b108      	cbz	r0, 11136 <z_heap_aligned_alloc+0x26>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   11132:	f840 4b04 	str.w	r4, [r0], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   11136:	b002      	add	sp, #8
   11138:	bd10      	pop	{r4, pc}
   1113a:	2301      	movs	r3, #1
   1113c:	e7ee      	b.n	1111c <z_heap_aligned_alloc+0xc>
		return NULL;
   1113e:	2000      	movs	r0, #0
   11140:	e7f9      	b.n	11136 <z_heap_aligned_alloc+0x26>
   11142:	bf00      	nop
   11144:	f3af 8000 	nop.w
	...

00011150 <_dtoa_r>:
   11150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11154:	6a47      	ldr	r7, [r0, #36]	; 0x24
   11156:	b097      	sub	sp, #92	; 0x5c
   11158:	ed8d 0b00 	vstr	d0, [sp]
   1115c:	ec55 4b10 	vmov	r4, r5, d0
   11160:	9e20      	ldr	r6, [sp, #128]	; 0x80
   11162:	9108      	str	r1, [sp, #32]
   11164:	4683      	mov	fp, r0
   11166:	920c      	str	r2, [sp, #48]	; 0x30
   11168:	9312      	str	r3, [sp, #72]	; 0x48
   1116a:	b97f      	cbnz	r7, 1118c <_dtoa_r+0x3c>
   1116c:	2010      	movs	r0, #16
   1116e:	f012 fc61 	bl	23a34 <malloc>
   11172:	4602      	mov	r2, r0
   11174:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   11178:	b920      	cbnz	r0, 11184 <_dtoa_r+0x34>
   1117a:	4ba7      	ldr	r3, [pc, #668]	; (11418 <_dtoa_r+0x2c8>)
   1117c:	21ea      	movs	r1, #234	; 0xea
   1117e:	48a7      	ldr	r0, [pc, #668]	; (1141c <_dtoa_r+0x2cc>)
   11180:	f013 fb9e 	bl	248c0 <__assert_func>
   11184:	e9c0 7701 	strd	r7, r7, [r0, #4]
   11188:	6007      	str	r7, [r0, #0]
   1118a:	60c7      	str	r7, [r0, #12]
   1118c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   11190:	6819      	ldr	r1, [r3, #0]
   11192:	b159      	cbz	r1, 111ac <_dtoa_r+0x5c>
   11194:	685a      	ldr	r2, [r3, #4]
   11196:	604a      	str	r2, [r1, #4]
   11198:	2301      	movs	r3, #1
   1119a:	4093      	lsls	r3, r2
   1119c:	608b      	str	r3, [r1, #8]
   1119e:	4658      	mov	r0, fp
   111a0:	f013 f8b4 	bl	2430c <_Bfree>
   111a4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   111a8:	2200      	movs	r2, #0
   111aa:	601a      	str	r2, [r3, #0]
   111ac:	1e2b      	subs	r3, r5, #0
   111ae:	bfb9      	ittee	lt
   111b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   111b4:	9301      	strlt	r3, [sp, #4]
   111b6:	2300      	movge	r3, #0
   111b8:	6033      	strge	r3, [r6, #0]
   111ba:	9f01      	ldr	r7, [sp, #4]
   111bc:	4b98      	ldr	r3, [pc, #608]	; (11420 <_dtoa_r+0x2d0>)
   111be:	bfbc      	itt	lt
   111c0:	2201      	movlt	r2, #1
   111c2:	6032      	strlt	r2, [r6, #0]
   111c4:	43bb      	bics	r3, r7
   111c6:	d119      	bne.n	111fc <_dtoa_r+0xac>
   111c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   111ca:	f242 730f 	movw	r3, #9999	; 0x270f
   111ce:	6013      	str	r3, [r2, #0]
   111d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   111d4:	4323      	orrs	r3, r4
   111d6:	f000 85dd 	beq.w	11d94 <_dtoa_r+0xc44>
   111da:	9b21      	ldr	r3, [sp, #132]	; 0x84
   111dc:	b953      	cbnz	r3, 111f4 <_dtoa_r+0xa4>
   111de:	4b91      	ldr	r3, [pc, #580]	; (11424 <_dtoa_r+0x2d4>)
   111e0:	e021      	b.n	11226 <_dtoa_r+0xd6>
   111e2:	4b91      	ldr	r3, [pc, #580]	; (11428 <_dtoa_r+0x2d8>)
   111e4:	9303      	str	r3, [sp, #12]
   111e6:	3308      	adds	r3, #8
   111e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
   111ea:	6013      	str	r3, [r2, #0]
   111ec:	9803      	ldr	r0, [sp, #12]
   111ee:	b017      	add	sp, #92	; 0x5c
   111f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111f4:	4b8b      	ldr	r3, [pc, #556]	; (11424 <_dtoa_r+0x2d4>)
   111f6:	9303      	str	r3, [sp, #12]
   111f8:	3303      	adds	r3, #3
   111fa:	e7f5      	b.n	111e8 <_dtoa_r+0x98>
   111fc:	ed9d 7b00 	vldr	d7, [sp]
   11200:	2200      	movs	r2, #0
   11202:	ec51 0b17 	vmov	r0, r1, d7
   11206:	2300      	movs	r3, #0
   11208:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1120c:	f7ef fc06 	bl	a1c <__aeabi_dcmpeq>
   11210:	4680      	mov	r8, r0
   11212:	b150      	cbz	r0, 1122a <_dtoa_r+0xda>
   11214:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11216:	2301      	movs	r3, #1
   11218:	6013      	str	r3, [r2, #0]
   1121a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1121c:	b113      	cbz	r3, 11224 <_dtoa_r+0xd4>
   1121e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   11220:	4b82      	ldr	r3, [pc, #520]	; (1142c <_dtoa_r+0x2dc>)
   11222:	6013      	str	r3, [r2, #0]
   11224:	4b82      	ldr	r3, [pc, #520]	; (11430 <_dtoa_r+0x2e0>)
   11226:	9303      	str	r3, [sp, #12]
   11228:	e7e0      	b.n	111ec <_dtoa_r+0x9c>
   1122a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1122e:	aa14      	add	r2, sp, #80	; 0x50
   11230:	a915      	add	r1, sp, #84	; 0x54
   11232:	4658      	mov	r0, fp
   11234:	f013 faec 	bl	24810 <__d2b>
   11238:	f3c7 560a 	ubfx	r6, r7, #20, #11
   1123c:	9002      	str	r0, [sp, #8]
   1123e:	2e00      	cmp	r6, #0
   11240:	d078      	beq.n	11334 <_dtoa_r+0x1e4>
   11242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11244:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   11248:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1124c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11250:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   11254:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   11258:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   1125c:	4619      	mov	r1, r3
   1125e:	2200      	movs	r2, #0
   11260:	4b74      	ldr	r3, [pc, #464]	; (11434 <_dtoa_r+0x2e4>)
   11262:	f7ee ffa1 	bl	1a8 <__aeabi_dsub>
   11266:	a366      	add	r3, pc, #408	; (adr r3, 11400 <_dtoa_r+0x2b0>)
   11268:	e9d3 2300 	ldrd	r2, r3, [r3]
   1126c:	f7ef f954 	bl	518 <__aeabi_dmul>
   11270:	a365      	add	r3, pc, #404	; (adr r3, 11408 <_dtoa_r+0x2b8>)
   11272:	e9d3 2300 	ldrd	r2, r3, [r3]
   11276:	f7ee ff99 	bl	1ac <__adddf3>
   1127a:	4604      	mov	r4, r0
   1127c:	4630      	mov	r0, r6
   1127e:	460d      	mov	r5, r1
   11280:	f7ef f8e0 	bl	444 <__aeabi_i2d>
   11284:	a362      	add	r3, pc, #392	; (adr r3, 11410 <_dtoa_r+0x2c0>)
   11286:	e9d3 2300 	ldrd	r2, r3, [r3]
   1128a:	f7ef f945 	bl	518 <__aeabi_dmul>
   1128e:	4602      	mov	r2, r0
   11290:	460b      	mov	r3, r1
   11292:	4620      	mov	r0, r4
   11294:	4629      	mov	r1, r5
   11296:	f7ee ff89 	bl	1ac <__adddf3>
   1129a:	4604      	mov	r4, r0
   1129c:	460d      	mov	r5, r1
   1129e:	f7ef ff53 	bl	1148 <__aeabi_d2iz>
   112a2:	2200      	movs	r2, #0
   112a4:	4607      	mov	r7, r0
   112a6:	2300      	movs	r3, #0
   112a8:	4620      	mov	r0, r4
   112aa:	4629      	mov	r1, r5
   112ac:	f7ef fbc0 	bl	a30 <__aeabi_dcmplt>
   112b0:	b140      	cbz	r0, 112c4 <_dtoa_r+0x174>
   112b2:	4638      	mov	r0, r7
   112b4:	f7ef f8c6 	bl	444 <__aeabi_i2d>
   112b8:	4622      	mov	r2, r4
   112ba:	462b      	mov	r3, r5
   112bc:	f7ef fbae 	bl	a1c <__aeabi_dcmpeq>
   112c0:	b900      	cbnz	r0, 112c4 <_dtoa_r+0x174>
   112c2:	3f01      	subs	r7, #1
   112c4:	2f16      	cmp	r7, #22
   112c6:	d852      	bhi.n	1136e <_dtoa_r+0x21e>
   112c8:	4b5b      	ldr	r3, [pc, #364]	; (11438 <_dtoa_r+0x2e8>)
   112ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   112ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   112d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   112d6:	f7ef fbab 	bl	a30 <__aeabi_dcmplt>
   112da:	2800      	cmp	r0, #0
   112dc:	d049      	beq.n	11372 <_dtoa_r+0x222>
   112de:	3f01      	subs	r7, #1
   112e0:	2300      	movs	r3, #0
   112e2:	9311      	str	r3, [sp, #68]	; 0x44
   112e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   112e6:	1b9b      	subs	r3, r3, r6
   112e8:	1e5a      	subs	r2, r3, #1
   112ea:	bf45      	ittet	mi
   112ec:	f1c3 0301 	rsbmi	r3, r3, #1
   112f0:	9306      	strmi	r3, [sp, #24]
   112f2:	2300      	movpl	r3, #0
   112f4:	2300      	movmi	r3, #0
   112f6:	9207      	str	r2, [sp, #28]
   112f8:	bf54      	ite	pl
   112fa:	9306      	strpl	r3, [sp, #24]
   112fc:	9307      	strmi	r3, [sp, #28]
   112fe:	2f00      	cmp	r7, #0
   11300:	db39      	blt.n	11376 <_dtoa_r+0x226>
   11302:	9b07      	ldr	r3, [sp, #28]
   11304:	9710      	str	r7, [sp, #64]	; 0x40
   11306:	443b      	add	r3, r7
   11308:	9307      	str	r3, [sp, #28]
   1130a:	2300      	movs	r3, #0
   1130c:	9309      	str	r3, [sp, #36]	; 0x24
   1130e:	9b08      	ldr	r3, [sp, #32]
   11310:	2b09      	cmp	r3, #9
   11312:	d866      	bhi.n	113e2 <_dtoa_r+0x292>
   11314:	2b05      	cmp	r3, #5
   11316:	bfc4      	itt	gt
   11318:	3b04      	subgt	r3, #4
   1131a:	9308      	strgt	r3, [sp, #32]
   1131c:	9b08      	ldr	r3, [sp, #32]
   1131e:	f1a3 0302 	sub.w	r3, r3, #2
   11322:	bfcc      	ite	gt
   11324:	2400      	movgt	r4, #0
   11326:	2401      	movle	r4, #1
   11328:	2b03      	cmp	r3, #3
   1132a:	d865      	bhi.n	113f8 <_dtoa_r+0x2a8>
   1132c:	e8df f003 	tbb	[pc, r3]
   11330:	5736382b 	.word	0x5736382b
   11334:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
   11338:	441e      	add	r6, r3
   1133a:	f206 4332 	addw	r3, r6, #1074	; 0x432
   1133e:	2b20      	cmp	r3, #32
   11340:	bfc1      	itttt	gt
   11342:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   11346:	409f      	lslgt	r7, r3
   11348:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
   1134c:	fa24 f303 	lsrgt.w	r3, r4, r3
   11350:	bfd6      	itet	le
   11352:	f1c3 0320 	rsble	r3, r3, #32
   11356:	ea47 0003 	orrgt.w	r0, r7, r3
   1135a:	fa04 f003 	lslle.w	r0, r4, r3
   1135e:	f7ef f861 	bl	424 <__aeabi_ui2d>
   11362:	2201      	movs	r2, #1
   11364:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
   11368:	3e01      	subs	r6, #1
   1136a:	9213      	str	r2, [sp, #76]	; 0x4c
   1136c:	e776      	b.n	1125c <_dtoa_r+0x10c>
   1136e:	2301      	movs	r3, #1
   11370:	e7b7      	b.n	112e2 <_dtoa_r+0x192>
   11372:	9011      	str	r0, [sp, #68]	; 0x44
   11374:	e7b6      	b.n	112e4 <_dtoa_r+0x194>
   11376:	9b06      	ldr	r3, [sp, #24]
   11378:	1bdb      	subs	r3, r3, r7
   1137a:	9306      	str	r3, [sp, #24]
   1137c:	427b      	negs	r3, r7
   1137e:	9309      	str	r3, [sp, #36]	; 0x24
   11380:	2300      	movs	r3, #0
   11382:	9310      	str	r3, [sp, #64]	; 0x40
   11384:	e7c3      	b.n	1130e <_dtoa_r+0x1be>
   11386:	2300      	movs	r3, #0
   11388:	930d      	str	r3, [sp, #52]	; 0x34
   1138a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1138c:	2b00      	cmp	r3, #0
   1138e:	dc57      	bgt.n	11440 <_dtoa_r+0x2f0>
   11390:	2301      	movs	r3, #1
   11392:	9304      	str	r3, [sp, #16]
   11394:	4699      	mov	r9, r3
   11396:	461a      	mov	r2, r3
   11398:	920c      	str	r2, [sp, #48]	; 0x30
   1139a:	e00c      	b.n	113b6 <_dtoa_r+0x266>
   1139c:	2301      	movs	r3, #1
   1139e:	e7f3      	b.n	11388 <_dtoa_r+0x238>
   113a0:	2300      	movs	r3, #0
   113a2:	930d      	str	r3, [sp, #52]	; 0x34
   113a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   113a6:	18fb      	adds	r3, r7, r3
   113a8:	f103 0901 	add.w	r9, r3, #1
   113ac:	9304      	str	r3, [sp, #16]
   113ae:	464b      	mov	r3, r9
   113b0:	2b01      	cmp	r3, #1
   113b2:	bfb8      	it	lt
   113b4:	2301      	movlt	r3, #1
   113b6:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
   113ba:	2100      	movs	r1, #0
   113bc:	2204      	movs	r2, #4
   113be:	f102 0514 	add.w	r5, r2, #20
   113c2:	429d      	cmp	r5, r3
   113c4:	d940      	bls.n	11448 <_dtoa_r+0x2f8>
   113c6:	6041      	str	r1, [r0, #4]
   113c8:	4658      	mov	r0, fp
   113ca:	f012 ff5f 	bl	2428c <_Balloc>
   113ce:	9003      	str	r0, [sp, #12]
   113d0:	2800      	cmp	r0, #0
   113d2:	d13c      	bne.n	1144e <_dtoa_r+0x2fe>
   113d4:	4b19      	ldr	r3, [pc, #100]	; (1143c <_dtoa_r+0x2ec>)
   113d6:	4602      	mov	r2, r0
   113d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   113dc:	e6cf      	b.n	1117e <_dtoa_r+0x2e>
   113de:	2301      	movs	r3, #1
   113e0:	e7df      	b.n	113a2 <_dtoa_r+0x252>
   113e2:	2401      	movs	r4, #1
   113e4:	2300      	movs	r3, #0
   113e6:	9308      	str	r3, [sp, #32]
   113e8:	940d      	str	r4, [sp, #52]	; 0x34
   113ea:	f04f 33ff 	mov.w	r3, #4294967295
   113ee:	9304      	str	r3, [sp, #16]
   113f0:	4699      	mov	r9, r3
   113f2:	2200      	movs	r2, #0
   113f4:	2312      	movs	r3, #18
   113f6:	e7cf      	b.n	11398 <_dtoa_r+0x248>
   113f8:	2301      	movs	r3, #1
   113fa:	930d      	str	r3, [sp, #52]	; 0x34
   113fc:	e7f5      	b.n	113ea <_dtoa_r+0x29a>
   113fe:	bf00      	nop
   11400:	636f4361 	.word	0x636f4361
   11404:	3fd287a7 	.word	0x3fd287a7
   11408:	8b60c8b3 	.word	0x8b60c8b3
   1140c:	3fc68a28 	.word	0x3fc68a28
   11410:	509f79fb 	.word	0x509f79fb
   11414:	3fd34413 	.word	0x3fd34413
   11418:	00031c12 	.word	0x00031c12
   1141c:	00031c29 	.word	0x00031c29
   11420:	7ff00000 	.word	0x7ff00000
   11424:	00031c0e 	.word	0x00031c0e
   11428:	00031c05 	.word	0x00031c05
   1142c:	00031be2 	.word	0x00031be2
   11430:	00031be1 	.word	0x00031be1
   11434:	3ff80000 	.word	0x3ff80000
   11438:	0002f070 	.word	0x0002f070
   1143c:	00031c9d 	.word	0x00031c9d
   11440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11442:	9304      	str	r3, [sp, #16]
   11444:	4699      	mov	r9, r3
   11446:	e7b6      	b.n	113b6 <_dtoa_r+0x266>
   11448:	3101      	adds	r1, #1
   1144a:	0052      	lsls	r2, r2, #1
   1144c:	e7b7      	b.n	113be <_dtoa_r+0x26e>
   1144e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   11452:	9a03      	ldr	r2, [sp, #12]
   11454:	601a      	str	r2, [r3, #0]
   11456:	f1b9 0f0e 	cmp.w	r9, #14
   1145a:	d86f      	bhi.n	1153c <_dtoa_r+0x3ec>
   1145c:	2c00      	cmp	r4, #0
   1145e:	d06d      	beq.n	1153c <_dtoa_r+0x3ec>
   11460:	2f00      	cmp	r7, #0
   11462:	dd36      	ble.n	114d2 <_dtoa_r+0x382>
   11464:	4ba1      	ldr	r3, [pc, #644]	; (116ec <_dtoa_r+0x59c>)
   11466:	f007 020f 	and.w	r2, r7, #15
   1146a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1146e:	ed93 7b00 	vldr	d7, [r3]
   11472:	05f8      	lsls	r0, r7, #23
   11474:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   11478:	ea4f 1427 	mov.w	r4, r7, asr #4
   1147c:	d517      	bpl.n	114ae <_dtoa_r+0x35e>
   1147e:	4b9c      	ldr	r3, [pc, #624]	; (116f0 <_dtoa_r+0x5a0>)
   11480:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   11488:	f7ef f970 	bl	76c <__aeabi_ddiv>
   1148c:	e9cd 0100 	strd	r0, r1, [sp]
   11490:	f004 040f 	and.w	r4, r4, #15
   11494:	f04f 0803 	mov.w	r8, #3
   11498:	4d95      	ldr	r5, [pc, #596]	; (116f0 <_dtoa_r+0x5a0>)
   1149a:	b95c      	cbnz	r4, 114b4 <_dtoa_r+0x364>
   1149c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   114a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   114a4:	f7ef f962 	bl	76c <__aeabi_ddiv>
   114a8:	e9cd 0100 	strd	r0, r1, [sp]
   114ac:	e02b      	b.n	11506 <_dtoa_r+0x3b6>
   114ae:	f04f 0802 	mov.w	r8, #2
   114b2:	e7f1      	b.n	11498 <_dtoa_r+0x348>
   114b4:	07e1      	lsls	r1, r4, #31
   114b6:	d509      	bpl.n	114cc <_dtoa_r+0x37c>
   114b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   114bc:	e9d5 2300 	ldrd	r2, r3, [r5]
   114c0:	f7ef f82a 	bl	518 <__aeabi_dmul>
   114c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   114c8:	f108 0801 	add.w	r8, r8, #1
   114cc:	1064      	asrs	r4, r4, #1
   114ce:	3508      	adds	r5, #8
   114d0:	e7e3      	b.n	1149a <_dtoa_r+0x34a>
   114d2:	f000 8107 	beq.w	116e4 <_dtoa_r+0x594>
   114d6:	427c      	negs	r4, r7
   114d8:	4b84      	ldr	r3, [pc, #528]	; (116ec <_dtoa_r+0x59c>)
   114da:	4d85      	ldr	r5, [pc, #532]	; (116f0 <_dtoa_r+0x5a0>)
   114dc:	f004 020f 	and.w	r2, r4, #15
   114e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   114e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   114e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   114ec:	f7ef f814 	bl	518 <__aeabi_dmul>
   114f0:	e9cd 0100 	strd	r0, r1, [sp]
   114f4:	1124      	asrs	r4, r4, #4
   114f6:	2300      	movs	r3, #0
   114f8:	f04f 0802 	mov.w	r8, #2
   114fc:	2c00      	cmp	r4, #0
   114fe:	f040 80e5 	bne.w	116cc <_dtoa_r+0x57c>
   11502:	2b00      	cmp	r3, #0
   11504:	d1d0      	bne.n	114a8 <_dtoa_r+0x358>
   11506:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11508:	e9dd 4500 	ldrd	r4, r5, [sp]
   1150c:	2b00      	cmp	r3, #0
   1150e:	f000 814c 	beq.w	117aa <_dtoa_r+0x65a>
   11512:	4b78      	ldr	r3, [pc, #480]	; (116f4 <_dtoa_r+0x5a4>)
   11514:	2200      	movs	r2, #0
   11516:	4620      	mov	r0, r4
   11518:	4629      	mov	r1, r5
   1151a:	f7ef fa89 	bl	a30 <__aeabi_dcmplt>
   1151e:	2800      	cmp	r0, #0
   11520:	f000 8143 	beq.w	117aa <_dtoa_r+0x65a>
   11524:	f1b9 0f00 	cmp.w	r9, #0
   11528:	f000 813f 	beq.w	117aa <_dtoa_r+0x65a>
   1152c:	9b04      	ldr	r3, [sp, #16]
   1152e:	2b00      	cmp	r3, #0
   11530:	f300 80e4 	bgt.w	116fc <_dtoa_r+0x5ac>
   11534:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   11538:	e9cd 3400 	strd	r3, r4, [sp]
   1153c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1153e:	2b00      	cmp	r3, #0
   11540:	db02      	blt.n	11548 <_dtoa_r+0x3f8>
   11542:	2f0e      	cmp	r7, #14
   11544:	f340 8242 	ble.w	119cc <_dtoa_r+0x87c>
   11548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1154a:	2a00      	cmp	r2, #0
   1154c:	f040 8267 	bne.w	11a1e <_dtoa_r+0x8ce>
   11550:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11552:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11556:	2500      	movs	r5, #0
   11558:	f1b8 0f00 	cmp.w	r8, #0
   1155c:	d00d      	beq.n	1157a <_dtoa_r+0x42a>
   1155e:	9b07      	ldr	r3, [sp, #28]
   11560:	2b00      	cmp	r3, #0
   11562:	dd0a      	ble.n	1157a <_dtoa_r+0x42a>
   11564:	4543      	cmp	r3, r8
   11566:	9a06      	ldr	r2, [sp, #24]
   11568:	bfa8      	it	ge
   1156a:	4643      	movge	r3, r8
   1156c:	1ad2      	subs	r2, r2, r3
   1156e:	9206      	str	r2, [sp, #24]
   11570:	9a07      	ldr	r2, [sp, #28]
   11572:	eba8 0803 	sub.w	r8, r8, r3
   11576:	1ad3      	subs	r3, r2, r3
   11578:	9307      	str	r3, [sp, #28]
   1157a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1157c:	b30b      	cbz	r3, 115c2 <_dtoa_r+0x472>
   1157e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11580:	2b00      	cmp	r3, #0
   11582:	f000 82a6 	beq.w	11ad2 <_dtoa_r+0x982>
   11586:	2c00      	cmp	r4, #0
   11588:	f000 82a1 	beq.w	11ace <_dtoa_r+0x97e>
   1158c:	4629      	mov	r1, r5
   1158e:	4622      	mov	r2, r4
   11590:	4658      	mov	r0, fp
   11592:	f012 ffe3 	bl	2455c <__pow5mult>
   11596:	9a02      	ldr	r2, [sp, #8]
   11598:	4601      	mov	r1, r0
   1159a:	4605      	mov	r5, r0
   1159c:	4658      	mov	r0, fp
   1159e:	f012 ff33 	bl	24408 <__multiply>
   115a2:	9902      	ldr	r1, [sp, #8]
   115a4:	4606      	mov	r6, r0
   115a6:	4658      	mov	r0, fp
   115a8:	f012 feb0 	bl	2430c <_Bfree>
   115ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   115ae:	1b1b      	subs	r3, r3, r4
   115b0:	9309      	str	r3, [sp, #36]	; 0x24
   115b2:	f000 8291 	beq.w	11ad8 <_dtoa_r+0x988>
   115b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   115b8:	4631      	mov	r1, r6
   115ba:	4658      	mov	r0, fp
   115bc:	f012 ffce 	bl	2455c <__pow5mult>
   115c0:	9002      	str	r0, [sp, #8]
   115c2:	2101      	movs	r1, #1
   115c4:	4658      	mov	r0, fp
   115c6:	f012 ff09 	bl	243dc <__i2b>
   115ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   115cc:	4604      	mov	r4, r0
   115ce:	2b00      	cmp	r3, #0
   115d0:	f000 8284 	beq.w	11adc <_dtoa_r+0x98c>
   115d4:	461a      	mov	r2, r3
   115d6:	4601      	mov	r1, r0
   115d8:	4658      	mov	r0, fp
   115da:	f012 ffbf 	bl	2455c <__pow5mult>
   115de:	9b08      	ldr	r3, [sp, #32]
   115e0:	2b01      	cmp	r3, #1
   115e2:	4604      	mov	r4, r0
   115e4:	dc03      	bgt.n	115ee <_dtoa_r+0x49e>
   115e6:	9b00      	ldr	r3, [sp, #0]
   115e8:	2b00      	cmp	r3, #0
   115ea:	f000 827c 	beq.w	11ae6 <_dtoa_r+0x996>
   115ee:	2600      	movs	r6, #0
   115f0:	6923      	ldr	r3, [r4, #16]
   115f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   115f6:	6918      	ldr	r0, [r3, #16]
   115f8:	f01d f846 	bl	2e688 <__hi0bits>
   115fc:	9610      	str	r6, [sp, #64]	; 0x40
   115fe:	f1c0 0020 	rsb	r0, r0, #32
   11602:	9b07      	ldr	r3, [sp, #28]
   11604:	4418      	add	r0, r3
   11606:	f010 001f 	ands.w	r0, r0, #31
   1160a:	f000 8291 	beq.w	11b30 <_dtoa_r+0x9e0>
   1160e:	f1c0 0320 	rsb	r3, r0, #32
   11612:	2b04      	cmp	r3, #4
   11614:	f340 8281 	ble.w	11b1a <_dtoa_r+0x9ca>
   11618:	9b06      	ldr	r3, [sp, #24]
   1161a:	f1c0 001c 	rsb	r0, r0, #28
   1161e:	4403      	add	r3, r0
   11620:	9306      	str	r3, [sp, #24]
   11622:	9b07      	ldr	r3, [sp, #28]
   11624:	4403      	add	r3, r0
   11626:	4480      	add	r8, r0
   11628:	9307      	str	r3, [sp, #28]
   1162a:	9b06      	ldr	r3, [sp, #24]
   1162c:	2b00      	cmp	r3, #0
   1162e:	dd05      	ble.n	1163c <_dtoa_r+0x4ec>
   11630:	9902      	ldr	r1, [sp, #8]
   11632:	461a      	mov	r2, r3
   11634:	4658      	mov	r0, fp
   11636:	f012 ffeb 	bl	24610 <__lshift>
   1163a:	9002      	str	r0, [sp, #8]
   1163c:	9b07      	ldr	r3, [sp, #28]
   1163e:	2b00      	cmp	r3, #0
   11640:	dd05      	ble.n	1164e <_dtoa_r+0x4fe>
   11642:	4621      	mov	r1, r4
   11644:	461a      	mov	r2, r3
   11646:	4658      	mov	r0, fp
   11648:	f012 ffe2 	bl	24610 <__lshift>
   1164c:	4604      	mov	r4, r0
   1164e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11650:	2b00      	cmp	r3, #0
   11652:	f000 8276 	beq.w	11b42 <_dtoa_r+0x9f2>
   11656:	9802      	ldr	r0, [sp, #8]
   11658:	4621      	mov	r1, r4
   1165a:	f01d f864 	bl	2e726 <__mcmp>
   1165e:	2800      	cmp	r0, #0
   11660:	f280 826f 	bge.w	11b42 <_dtoa_r+0x9f2>
   11664:	2300      	movs	r3, #0
   11666:	9902      	ldr	r1, [sp, #8]
   11668:	220a      	movs	r2, #10
   1166a:	4658      	mov	r0, fp
   1166c:	f012 fe70 	bl	24350 <__multadd>
   11670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11672:	9002      	str	r0, [sp, #8]
   11674:	1e7e      	subs	r6, r7, #1
   11676:	2b00      	cmp	r3, #0
   11678:	f000 825c 	beq.w	11b34 <_dtoa_r+0x9e4>
   1167c:	2300      	movs	r3, #0
   1167e:	4629      	mov	r1, r5
   11680:	220a      	movs	r2, #10
   11682:	4658      	mov	r0, fp
   11684:	f012 fe64 	bl	24350 <__multadd>
   11688:	9b04      	ldr	r3, [sp, #16]
   1168a:	2b00      	cmp	r3, #0
   1168c:	4605      	mov	r5, r0
   1168e:	dc03      	bgt.n	11698 <_dtoa_r+0x548>
   11690:	9b08      	ldr	r3, [sp, #32]
   11692:	2b02      	cmp	r3, #2
   11694:	f300 825e 	bgt.w	11b54 <_dtoa_r+0xa04>
   11698:	f1b8 0f00 	cmp.w	r8, #0
   1169c:	dd05      	ble.n	116aa <_dtoa_r+0x55a>
   1169e:	4629      	mov	r1, r5
   116a0:	4642      	mov	r2, r8
   116a2:	4658      	mov	r0, fp
   116a4:	f012 ffb4 	bl	24610 <__lshift>
   116a8:	4605      	mov	r5, r0
   116aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   116ac:	2b00      	cmp	r3, #0
   116ae:	f000 82d0 	beq.w	11c52 <_dtoa_r+0xb02>
   116b2:	6869      	ldr	r1, [r5, #4]
   116b4:	4658      	mov	r0, fp
   116b6:	f012 fde9 	bl	2428c <_Balloc>
   116ba:	4607      	mov	r7, r0
   116bc:	2800      	cmp	r0, #0
   116be:	f040 827f 	bne.w	11bc0 <_dtoa_r+0xa70>
   116c2:	4b0d      	ldr	r3, [pc, #52]	; (116f8 <_dtoa_r+0x5a8>)
   116c4:	4602      	mov	r2, r0
   116c6:	f240 21ea 	movw	r1, #746	; 0x2ea
   116ca:	e558      	b.n	1117e <_dtoa_r+0x2e>
   116cc:	07e2      	lsls	r2, r4, #31
   116ce:	d506      	bpl.n	116de <_dtoa_r+0x58e>
   116d0:	e9d5 2300 	ldrd	r2, r3, [r5]
   116d4:	f7ee ff20 	bl	518 <__aeabi_dmul>
   116d8:	f108 0801 	add.w	r8, r8, #1
   116dc:	2301      	movs	r3, #1
   116de:	1064      	asrs	r4, r4, #1
   116e0:	3508      	adds	r5, #8
   116e2:	e70b      	b.n	114fc <_dtoa_r+0x3ac>
   116e4:	f04f 0802 	mov.w	r8, #2
   116e8:	e70d      	b.n	11506 <_dtoa_r+0x3b6>
   116ea:	bf00      	nop
   116ec:	0002f070 	.word	0x0002f070
   116f0:	0002f048 	.word	0x0002f048
   116f4:	3ff00000 	.word	0x3ff00000
   116f8:	00031c9d 	.word	0x00031c9d
   116fc:	4620      	mov	r0, r4
   116fe:	4bad      	ldr	r3, [pc, #692]	; (119b4 <_dtoa_r+0x864>)
   11700:	2200      	movs	r2, #0
   11702:	4629      	mov	r1, r5
   11704:	f7ee ff08 	bl	518 <__aeabi_dmul>
   11708:	e9cd 0100 	strd	r0, r1, [sp]
   1170c:	9c04      	ldr	r4, [sp, #16]
   1170e:	1e7e      	subs	r6, r7, #1
   11710:	f108 0801 	add.w	r8, r8, #1
   11714:	4640      	mov	r0, r8
   11716:	f7ee fe95 	bl	444 <__aeabi_i2d>
   1171a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1171e:	f7ee fefb 	bl	518 <__aeabi_dmul>
   11722:	4ba5      	ldr	r3, [pc, #660]	; (119b8 <_dtoa_r+0x868>)
   11724:	2200      	movs	r2, #0
   11726:	f7ee fd41 	bl	1ac <__adddf3>
   1172a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   1172e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   11732:	930f      	str	r3, [sp, #60]	; 0x3c
   11734:	2c00      	cmp	r4, #0
   11736:	d13b      	bne.n	117b0 <_dtoa_r+0x660>
   11738:	e9dd 0100 	ldrd	r0, r1, [sp]
   1173c:	4b9f      	ldr	r3, [pc, #636]	; (119bc <_dtoa_r+0x86c>)
   1173e:	2200      	movs	r2, #0
   11740:	f7ee fd32 	bl	1a8 <__aeabi_dsub>
   11744:	4602      	mov	r2, r0
   11746:	460b      	mov	r3, r1
   11748:	e9cd 2300 	strd	r2, r3, [sp]
   1174c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   11750:	f7ef f98c 	bl	a6c <__aeabi_dcmpgt>
   11754:	2800      	cmp	r0, #0
   11756:	f040 8157 	bne.w	11a08 <_dtoa_r+0x8b8>
   1175a:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
   1175e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11762:	e9dd 0100 	ldrd	r0, r1, [sp]
   11766:	f7ef f963 	bl	a30 <__aeabi_dcmplt>
   1176a:	2800      	cmp	r0, #0
   1176c:	f43f aee2 	beq.w	11534 <_dtoa_r+0x3e4>
   11770:	2400      	movs	r4, #0
   11772:	4625      	mov	r5, r4
   11774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11776:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1177a:	43de      	mvns	r6, r3
   1177c:	f04f 0800 	mov.w	r8, #0
   11780:	4621      	mov	r1, r4
   11782:	4658      	mov	r0, fp
   11784:	f012 fdc2 	bl	2430c <_Bfree>
   11788:	2d00      	cmp	r5, #0
   1178a:	f000 80a9 	beq.w	118e0 <_dtoa_r+0x790>
   1178e:	f1b8 0f00 	cmp.w	r8, #0
   11792:	d005      	beq.n	117a0 <_dtoa_r+0x650>
   11794:	45a8      	cmp	r8, r5
   11796:	d003      	beq.n	117a0 <_dtoa_r+0x650>
   11798:	4641      	mov	r1, r8
   1179a:	4658      	mov	r0, fp
   1179c:	f012 fdb6 	bl	2430c <_Bfree>
   117a0:	4629      	mov	r1, r5
   117a2:	4658      	mov	r0, fp
   117a4:	f012 fdb2 	bl	2430c <_Bfree>
   117a8:	e09a      	b.n	118e0 <_dtoa_r+0x790>
   117aa:	463e      	mov	r6, r7
   117ac:	464c      	mov	r4, r9
   117ae:	e7b1      	b.n	11714 <_dtoa_r+0x5c4>
   117b0:	4b83      	ldr	r3, [pc, #524]	; (119c0 <_dtoa_r+0x870>)
   117b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   117b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   117ba:	9b03      	ldr	r3, [sp, #12]
   117bc:	441c      	add	r4, r3
   117be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   117c0:	2b00      	cmp	r3, #0
   117c2:	d04a      	beq.n	1185a <_dtoa_r+0x70a>
   117c4:	4602      	mov	r2, r0
   117c6:	460b      	mov	r3, r1
   117c8:	2000      	movs	r0, #0
   117ca:	497e      	ldr	r1, [pc, #504]	; (119c4 <_dtoa_r+0x874>)
   117cc:	f7ee ffce 	bl	76c <__aeabi_ddiv>
   117d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   117d4:	f7ee fce8 	bl	1a8 <__aeabi_dsub>
   117d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   117dc:	f8dd a00c 	ldr.w	sl, [sp, #12]
   117e0:	e9dd 0100 	ldrd	r0, r1, [sp]
   117e4:	f7ef fcb0 	bl	1148 <__aeabi_d2iz>
   117e8:	4605      	mov	r5, r0
   117ea:	f7ee fe2b 	bl	444 <__aeabi_i2d>
   117ee:	4602      	mov	r2, r0
   117f0:	460b      	mov	r3, r1
   117f2:	e9dd 0100 	ldrd	r0, r1, [sp]
   117f6:	f7ee fcd7 	bl	1a8 <__aeabi_dsub>
   117fa:	3530      	adds	r5, #48	; 0x30
   117fc:	e9cd 0100 	strd	r0, r1, [sp]
   11800:	4602      	mov	r2, r0
   11802:	460b      	mov	r3, r1
   11804:	f80a 5b01 	strb.w	r5, [sl], #1
   11808:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1180c:	f7ef f92e 	bl	a6c <__aeabi_dcmpgt>
   11810:	2800      	cmp	r0, #0
   11812:	d165      	bne.n	118e0 <_dtoa_r+0x790>
   11814:	e9dd 2300 	ldrd	r2, r3, [sp]
   11818:	496b      	ldr	r1, [pc, #428]	; (119c8 <_dtoa_r+0x878>)
   1181a:	2000      	movs	r0, #0
   1181c:	f7ee fcc4 	bl	1a8 <__aeabi_dsub>
   11820:	4602      	mov	r2, r0
   11822:	460b      	mov	r3, r1
   11824:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   11828:	f7ef f920 	bl	a6c <__aeabi_dcmpgt>
   1182c:	2800      	cmp	r0, #0
   1182e:	f040 810d 	bne.w	11a4c <_dtoa_r+0x8fc>
   11832:	45a2      	cmp	sl, r4
   11834:	f000 80ea 	beq.w	11a0c <_dtoa_r+0x8bc>
   11838:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1183c:	4b5d      	ldr	r3, [pc, #372]	; (119b4 <_dtoa_r+0x864>)
   1183e:	2200      	movs	r2, #0
   11840:	f7ee fe6a 	bl	518 <__aeabi_dmul>
   11844:	4b5b      	ldr	r3, [pc, #364]	; (119b4 <_dtoa_r+0x864>)
   11846:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1184a:	2200      	movs	r2, #0
   1184c:	e9dd 0100 	ldrd	r0, r1, [sp]
   11850:	f7ee fe62 	bl	518 <__aeabi_dmul>
   11854:	e9cd 0100 	strd	r0, r1, [sp]
   11858:	e7c2      	b.n	117e0 <_dtoa_r+0x690>
   1185a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1185e:	f7ee fe5b 	bl	518 <__aeabi_dmul>
   11862:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   11866:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1186a:	46a0      	mov	r8, r4
   1186c:	e9dd 0100 	ldrd	r0, r1, [sp]
   11870:	f7ef fc6a 	bl	1148 <__aeabi_d2iz>
   11874:	4605      	mov	r5, r0
   11876:	f7ee fde5 	bl	444 <__aeabi_i2d>
   1187a:	4602      	mov	r2, r0
   1187c:	460b      	mov	r3, r1
   1187e:	e9dd 0100 	ldrd	r0, r1, [sp]
   11882:	f7ee fc91 	bl	1a8 <__aeabi_dsub>
   11886:	3530      	adds	r5, #48	; 0x30
   11888:	f80a 5b01 	strb.w	r5, [sl], #1
   1188c:	4602      	mov	r2, r0
   1188e:	460b      	mov	r3, r1
   11890:	45a2      	cmp	sl, r4
   11892:	e9cd 2300 	strd	r2, r3, [sp]
   11896:	f04f 0200 	mov.w	r2, #0
   1189a:	d123      	bne.n	118e4 <_dtoa_r+0x794>
   1189c:	4b49      	ldr	r3, [pc, #292]	; (119c4 <_dtoa_r+0x874>)
   1189e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   118a2:	f7ee fc83 	bl	1ac <__adddf3>
   118a6:	4602      	mov	r2, r0
   118a8:	460b      	mov	r3, r1
   118aa:	e9dd 0100 	ldrd	r0, r1, [sp]
   118ae:	f7ef f8dd 	bl	a6c <__aeabi_dcmpgt>
   118b2:	2800      	cmp	r0, #0
   118b4:	f040 80ca 	bne.w	11a4c <_dtoa_r+0x8fc>
   118b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   118bc:	4941      	ldr	r1, [pc, #260]	; (119c4 <_dtoa_r+0x874>)
   118be:	2000      	movs	r0, #0
   118c0:	f7ee fc72 	bl	1a8 <__aeabi_dsub>
   118c4:	4602      	mov	r2, r0
   118c6:	460b      	mov	r3, r1
   118c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   118cc:	f7ef f8b0 	bl	a30 <__aeabi_dcmplt>
   118d0:	b170      	cbz	r0, 118f0 <_dtoa_r+0x7a0>
   118d2:	46c2      	mov	sl, r8
   118d4:	f108 38ff 	add.w	r8, r8, #4294967295
   118d8:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   118dc:	2b30      	cmp	r3, #48	; 0x30
   118de:	d0f8      	beq.n	118d2 <_dtoa_r+0x782>
   118e0:	4637      	mov	r7, r6
   118e2:	e055      	b.n	11990 <_dtoa_r+0x840>
   118e4:	4b33      	ldr	r3, [pc, #204]	; (119b4 <_dtoa_r+0x864>)
   118e6:	f7ee fe17 	bl	518 <__aeabi_dmul>
   118ea:	e9cd 0100 	strd	r0, r1, [sp]
   118ee:	e7bd      	b.n	1186c <_dtoa_r+0x71c>
   118f0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   118f4:	e9cd 3400 	strd	r3, r4, [sp]
   118f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   118fa:	2b00      	cmp	r3, #0
   118fc:	f6ff ae28 	blt.w	11550 <_dtoa_r+0x400>
   11900:	2f0e      	cmp	r7, #14
   11902:	f73f ae25 	bgt.w	11550 <_dtoa_r+0x400>
   11906:	4b2e      	ldr	r3, [pc, #184]	; (119c0 <_dtoa_r+0x870>)
   11908:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1190c:	ed93 7b00 	vldr	d7, [r3]
   11910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11912:	2b00      	cmp	r3, #0
   11914:	ed8d 7b04 	vstr	d7, [sp, #16]
   11918:	da02      	bge.n	11920 <_dtoa_r+0x7d0>
   1191a:	f1b9 0f00 	cmp.w	r9, #0
   1191e:	d064      	beq.n	119ea <_dtoa_r+0x89a>
   11920:	e9dd 4500 	ldrd	r4, r5, [sp]
   11924:	f8dd a00c 	ldr.w	sl, [sp, #12]
   11928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1192c:	4620      	mov	r0, r4
   1192e:	4629      	mov	r1, r5
   11930:	f7ee ff1c 	bl	76c <__aeabi_ddiv>
   11934:	f7ef fc08 	bl	1148 <__aeabi_d2iz>
   11938:	4606      	mov	r6, r0
   1193a:	f7ee fd83 	bl	444 <__aeabi_i2d>
   1193e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11942:	f7ee fde9 	bl	518 <__aeabi_dmul>
   11946:	4602      	mov	r2, r0
   11948:	460b      	mov	r3, r1
   1194a:	4620      	mov	r0, r4
   1194c:	4629      	mov	r1, r5
   1194e:	f106 0430 	add.w	r4, r6, #48	; 0x30
   11952:	f7ee fc29 	bl	1a8 <__aeabi_dsub>
   11956:	f80a 4b01 	strb.w	r4, [sl], #1
   1195a:	9c03      	ldr	r4, [sp, #12]
   1195c:	ebaa 0404 	sub.w	r4, sl, r4
   11960:	45a1      	cmp	r9, r4
   11962:	4602      	mov	r2, r0
   11964:	460b      	mov	r3, r1
   11966:	f040 8082 	bne.w	11a6e <_dtoa_r+0x91e>
   1196a:	f7ee fc1f 	bl	1ac <__adddf3>
   1196e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11972:	4604      	mov	r4, r0
   11974:	460d      	mov	r5, r1
   11976:	f7ef f879 	bl	a6c <__aeabi_dcmpgt>
   1197a:	2800      	cmp	r0, #0
   1197c:	d165      	bne.n	11a4a <_dtoa_r+0x8fa>
   1197e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11982:	4620      	mov	r0, r4
   11984:	4629      	mov	r1, r5
   11986:	f7ef f849 	bl	a1c <__aeabi_dcmpeq>
   1198a:	b108      	cbz	r0, 11990 <_dtoa_r+0x840>
   1198c:	07f3      	lsls	r3, r6, #31
   1198e:	d45c      	bmi.n	11a4a <_dtoa_r+0x8fa>
   11990:	9902      	ldr	r1, [sp, #8]
   11992:	4658      	mov	r0, fp
   11994:	f012 fcba 	bl	2430c <_Bfree>
   11998:	2300      	movs	r3, #0
   1199a:	f88a 3000 	strb.w	r3, [sl]
   1199e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   119a0:	3701      	adds	r7, #1
   119a2:	601f      	str	r7, [r3, #0]
   119a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   119a6:	2b00      	cmp	r3, #0
   119a8:	f43f ac20 	beq.w	111ec <_dtoa_r+0x9c>
   119ac:	f8c3 a000 	str.w	sl, [r3]
   119b0:	e41c      	b.n	111ec <_dtoa_r+0x9c>
   119b2:	bf00      	nop
   119b4:	40240000 	.word	0x40240000
   119b8:	401c0000 	.word	0x401c0000
   119bc:	40140000 	.word	0x40140000
   119c0:	0002f070 	.word	0x0002f070
   119c4:	3fe00000 	.word	0x3fe00000
   119c8:	3ff00000 	.word	0x3ff00000
   119cc:	4ba2      	ldr	r3, [pc, #648]	; (11c58 <_dtoa_r+0xb08>)
   119ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   119d2:	ed93 7b00 	vldr	d7, [r3]
   119d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   119d8:	2b00      	cmp	r3, #0
   119da:	ed8d 7b04 	vstr	d7, [sp, #16]
   119de:	da9f      	bge.n	11920 <_dtoa_r+0x7d0>
   119e0:	f1b9 0f00 	cmp.w	r9, #0
   119e4:	dc9c      	bgt.n	11920 <_dtoa_r+0x7d0>
   119e6:	f47f aec3 	bne.w	11770 <_dtoa_r+0x620>
   119ea:	4b9c      	ldr	r3, [pc, #624]	; (11c5c <_dtoa_r+0xb0c>)
   119ec:	2200      	movs	r2, #0
   119ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   119f2:	f7ee fd91 	bl	518 <__aeabi_dmul>
   119f6:	e9dd 2300 	ldrd	r2, r3, [sp]
   119fa:	f7ef f82d 	bl	a58 <__aeabi_dcmpge>
   119fe:	4604      	mov	r4, r0
   11a00:	2800      	cmp	r0, #0
   11a02:	f47f aeb5 	bne.w	11770 <_dtoa_r+0x620>
   11a06:	463e      	mov	r6, r7
   11a08:	4625      	mov	r5, r4
   11a0a:	e0b4      	b.n	11b76 <_dtoa_r+0xa26>
   11a0c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   11a10:	e9cd 3400 	strd	r3, r4, [sp]
   11a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11a16:	2b00      	cmp	r3, #0
   11a18:	db01      	blt.n	11a1e <_dtoa_r+0x8ce>
   11a1a:	2f0e      	cmp	r7, #14
   11a1c:	ddd6      	ble.n	119cc <_dtoa_r+0x87c>
   11a1e:	9a08      	ldr	r2, [sp, #32]
   11a20:	2a01      	cmp	r2, #1
   11a22:	dc36      	bgt.n	11a92 <_dtoa_r+0x942>
   11a24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11a26:	b382      	cbz	r2, 11a8a <_dtoa_r+0x93a>
   11a28:	f203 4333 	addw	r3, r3, #1075	; 0x433
   11a2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11a2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11a32:	9a06      	ldr	r2, [sp, #24]
   11a34:	441a      	add	r2, r3
   11a36:	9206      	str	r2, [sp, #24]
   11a38:	9a07      	ldr	r2, [sp, #28]
   11a3a:	2101      	movs	r1, #1
   11a3c:	441a      	add	r2, r3
   11a3e:	4658      	mov	r0, fp
   11a40:	9207      	str	r2, [sp, #28]
   11a42:	f012 fccb 	bl	243dc <__i2b>
   11a46:	4605      	mov	r5, r0
   11a48:	e586      	b.n	11558 <_dtoa_r+0x408>
   11a4a:	463e      	mov	r6, r7
   11a4c:	4653      	mov	r3, sl
   11a4e:	469a      	mov	sl, r3
   11a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   11a54:	2a39      	cmp	r2, #57	; 0x39
   11a56:	d106      	bne.n	11a66 <_dtoa_r+0x916>
   11a58:	9a03      	ldr	r2, [sp, #12]
   11a5a:	429a      	cmp	r2, r3
   11a5c:	d1f7      	bne.n	11a4e <_dtoa_r+0x8fe>
   11a5e:	9903      	ldr	r1, [sp, #12]
   11a60:	2230      	movs	r2, #48	; 0x30
   11a62:	3601      	adds	r6, #1
   11a64:	700a      	strb	r2, [r1, #0]
   11a66:	781a      	ldrb	r2, [r3, #0]
   11a68:	3201      	adds	r2, #1
   11a6a:	701a      	strb	r2, [r3, #0]
   11a6c:	e738      	b.n	118e0 <_dtoa_r+0x790>
   11a6e:	4b7c      	ldr	r3, [pc, #496]	; (11c60 <_dtoa_r+0xb10>)
   11a70:	2200      	movs	r2, #0
   11a72:	f7ee fd51 	bl	518 <__aeabi_dmul>
   11a76:	2200      	movs	r2, #0
   11a78:	2300      	movs	r3, #0
   11a7a:	4604      	mov	r4, r0
   11a7c:	460d      	mov	r5, r1
   11a7e:	f7ee ffcd 	bl	a1c <__aeabi_dcmpeq>
   11a82:	2800      	cmp	r0, #0
   11a84:	f43f af50 	beq.w	11928 <_dtoa_r+0x7d8>
   11a88:	e782      	b.n	11990 <_dtoa_r+0x840>
   11a8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11a8c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   11a90:	e7cc      	b.n	11a2c <_dtoa_r+0x8dc>
   11a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a94:	f109 34ff 	add.w	r4, r9, #4294967295
   11a98:	42a3      	cmp	r3, r4
   11a9a:	db08      	blt.n	11aae <_dtoa_r+0x95e>
   11a9c:	f1b9 0f00 	cmp.w	r9, #0
   11aa0:	eba3 0404 	sub.w	r4, r3, r4
   11aa4:	db0e      	blt.n	11ac4 <_dtoa_r+0x974>
   11aa6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11aaa:	464b      	mov	r3, r9
   11aac:	e7c1      	b.n	11a32 <_dtoa_r+0x8e2>
   11aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ab0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11ab2:	9409      	str	r4, [sp, #36]	; 0x24
   11ab4:	1ae3      	subs	r3, r4, r3
   11ab6:	441a      	add	r2, r3
   11ab8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   11abc:	9210      	str	r2, [sp, #64]	; 0x40
   11abe:	464b      	mov	r3, r9
   11ac0:	2400      	movs	r4, #0
   11ac2:	e7b6      	b.n	11a32 <_dtoa_r+0x8e2>
   11ac4:	9b06      	ldr	r3, [sp, #24]
   11ac6:	eba3 0809 	sub.w	r8, r3, r9
   11aca:	2300      	movs	r3, #0
   11acc:	e7b1      	b.n	11a32 <_dtoa_r+0x8e2>
   11ace:	9e02      	ldr	r6, [sp, #8]
   11ad0:	e571      	b.n	115b6 <_dtoa_r+0x466>
   11ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11ad4:	9902      	ldr	r1, [sp, #8]
   11ad6:	e570      	b.n	115ba <_dtoa_r+0x46a>
   11ad8:	9602      	str	r6, [sp, #8]
   11ada:	e572      	b.n	115c2 <_dtoa_r+0x472>
   11adc:	9b08      	ldr	r3, [sp, #32]
   11ade:	2b01      	cmp	r3, #1
   11ae0:	dc17      	bgt.n	11b12 <_dtoa_r+0x9c2>
   11ae2:	9b00      	ldr	r3, [sp, #0]
   11ae4:	b9ab      	cbnz	r3, 11b12 <_dtoa_r+0x9c2>
   11ae6:	9b01      	ldr	r3, [sp, #4]
   11ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   11aec:	b99b      	cbnz	r3, 11b16 <_dtoa_r+0x9c6>
   11aee:	9b01      	ldr	r3, [sp, #4]
   11af0:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   11af4:	0d36      	lsrs	r6, r6, #20
   11af6:	0536      	lsls	r6, r6, #20
   11af8:	b136      	cbz	r6, 11b08 <_dtoa_r+0x9b8>
   11afa:	9b06      	ldr	r3, [sp, #24]
   11afc:	3301      	adds	r3, #1
   11afe:	9306      	str	r3, [sp, #24]
   11b00:	9b07      	ldr	r3, [sp, #28]
   11b02:	3301      	adds	r3, #1
   11b04:	9307      	str	r3, [sp, #28]
   11b06:	2601      	movs	r6, #1
   11b08:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b0a:	2b00      	cmp	r3, #0
   11b0c:	f47f ad70 	bne.w	115f0 <_dtoa_r+0x4a0>
   11b10:	9610      	str	r6, [sp, #64]	; 0x40
   11b12:	2001      	movs	r0, #1
   11b14:	e575      	b.n	11602 <_dtoa_r+0x4b2>
   11b16:	2600      	movs	r6, #0
   11b18:	e7f6      	b.n	11b08 <_dtoa_r+0x9b8>
   11b1a:	f43f ad86 	beq.w	1162a <_dtoa_r+0x4da>
   11b1e:	9a06      	ldr	r2, [sp, #24]
   11b20:	331c      	adds	r3, #28
   11b22:	441a      	add	r2, r3
   11b24:	9206      	str	r2, [sp, #24]
   11b26:	9a07      	ldr	r2, [sp, #28]
   11b28:	441a      	add	r2, r3
   11b2a:	4498      	add	r8, r3
   11b2c:	9207      	str	r2, [sp, #28]
   11b2e:	e57c      	b.n	1162a <_dtoa_r+0x4da>
   11b30:	4603      	mov	r3, r0
   11b32:	e7f4      	b.n	11b1e <_dtoa_r+0x9ce>
   11b34:	9b04      	ldr	r3, [sp, #16]
   11b36:	2b00      	cmp	r3, #0
   11b38:	dc2b      	bgt.n	11b92 <_dtoa_r+0xa42>
   11b3a:	9b08      	ldr	r3, [sp, #32]
   11b3c:	2b02      	cmp	r3, #2
   11b3e:	dc09      	bgt.n	11b54 <_dtoa_r+0xa04>
   11b40:	e027      	b.n	11b92 <_dtoa_r+0xa42>
   11b42:	f1b9 0f00 	cmp.w	r9, #0
   11b46:	dc1d      	bgt.n	11b84 <_dtoa_r+0xa34>
   11b48:	9b08      	ldr	r3, [sp, #32]
   11b4a:	2b02      	cmp	r3, #2
   11b4c:	dd1a      	ble.n	11b84 <_dtoa_r+0xa34>
   11b4e:	f8cd 9010 	str.w	r9, [sp, #16]
   11b52:	463e      	mov	r6, r7
   11b54:	9b04      	ldr	r3, [sp, #16]
   11b56:	2b00      	cmp	r3, #0
   11b58:	f47f ae0c 	bne.w	11774 <_dtoa_r+0x624>
   11b5c:	4621      	mov	r1, r4
   11b5e:	2205      	movs	r2, #5
   11b60:	4658      	mov	r0, fp
   11b62:	f012 fbf5 	bl	24350 <__multadd>
   11b66:	4601      	mov	r1, r0
   11b68:	4604      	mov	r4, r0
   11b6a:	9802      	ldr	r0, [sp, #8]
   11b6c:	f01c fddb 	bl	2e726 <__mcmp>
   11b70:	2800      	cmp	r0, #0
   11b72:	f77f adff 	ble.w	11774 <_dtoa_r+0x624>
   11b76:	f8dd a00c 	ldr.w	sl, [sp, #12]
   11b7a:	2331      	movs	r3, #49	; 0x31
   11b7c:	f80a 3b01 	strb.w	r3, [sl], #1
   11b80:	3601      	adds	r6, #1
   11b82:	e5fb      	b.n	1177c <_dtoa_r+0x62c>
   11b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11b86:	f8cd 9010 	str.w	r9, [sp, #16]
   11b8a:	463e      	mov	r6, r7
   11b8c:	2b00      	cmp	r3, #0
   11b8e:	f47f ad83 	bne.w	11698 <_dtoa_r+0x548>
   11b92:	9f03      	ldr	r7, [sp, #12]
   11b94:	9802      	ldr	r0, [sp, #8]
   11b96:	4621      	mov	r1, r4
   11b98:	f01c fcee 	bl	2e578 <quorem>
   11b9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
   11ba0:	f807 9b01 	strb.w	r9, [r7], #1
   11ba4:	9b03      	ldr	r3, [sp, #12]
   11ba6:	9a04      	ldr	r2, [sp, #16]
   11ba8:	1afb      	subs	r3, r7, r3
   11baa:	429a      	cmp	r2, r3
   11bac:	f340 80cb 	ble.w	11d46 <_dtoa_r+0xbf6>
   11bb0:	9902      	ldr	r1, [sp, #8]
   11bb2:	2300      	movs	r3, #0
   11bb4:	220a      	movs	r2, #10
   11bb6:	4658      	mov	r0, fp
   11bb8:	f012 fbca 	bl	24350 <__multadd>
   11bbc:	9002      	str	r0, [sp, #8]
   11bbe:	e7e9      	b.n	11b94 <_dtoa_r+0xa44>
   11bc0:	692a      	ldr	r2, [r5, #16]
   11bc2:	3202      	adds	r2, #2
   11bc4:	0092      	lsls	r2, r2, #2
   11bc6:	f105 010c 	add.w	r1, r5, #12
   11bca:	300c      	adds	r0, #12
   11bcc:	f01c fb7d 	bl	2e2ca <memcpy>
   11bd0:	2201      	movs	r2, #1
   11bd2:	4639      	mov	r1, r7
   11bd4:	4658      	mov	r0, fp
   11bd6:	f012 fd1b 	bl	24610 <__lshift>
   11bda:	9b03      	ldr	r3, [sp, #12]
   11bdc:	f103 0a01 	add.w	sl, r3, #1
   11be0:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   11be4:	4413      	add	r3, r2
   11be6:	9307      	str	r3, [sp, #28]
   11be8:	9b00      	ldr	r3, [sp, #0]
   11bea:	f003 0301 	and.w	r3, r3, #1
   11bee:	46a8      	mov	r8, r5
   11bf0:	9309      	str	r3, [sp, #36]	; 0x24
   11bf2:	4605      	mov	r5, r0
   11bf4:	f10a 33ff 	add.w	r3, sl, #4294967295
   11bf8:	4621      	mov	r1, r4
   11bfa:	9802      	ldr	r0, [sp, #8]
   11bfc:	9304      	str	r3, [sp, #16]
   11bfe:	f01c fcbb 	bl	2e578 <quorem>
   11c02:	4641      	mov	r1, r8
   11c04:	9006      	str	r0, [sp, #24]
   11c06:	f100 0930 	add.w	r9, r0, #48	; 0x30
   11c0a:	9802      	ldr	r0, [sp, #8]
   11c0c:	f01c fd8b 	bl	2e726 <__mcmp>
   11c10:	462a      	mov	r2, r5
   11c12:	4621      	mov	r1, r4
   11c14:	4607      	mov	r7, r0
   11c16:	4658      	mov	r0, fp
   11c18:	f012 fd66 	bl	246e8 <__mdiff>
   11c1c:	68c2      	ldr	r2, [r0, #12]
   11c1e:	4601      	mov	r1, r0
   11c20:	b302      	cbz	r2, 11c64 <_dtoa_r+0xb14>
   11c22:	4658      	mov	r0, fp
   11c24:	f012 fb72 	bl	2430c <_Bfree>
   11c28:	2f00      	cmp	r7, #0
   11c2a:	da3a      	bge.n	11ca2 <_dtoa_r+0xb52>
   11c2c:	9902      	ldr	r1, [sp, #8]
   11c2e:	2201      	movs	r2, #1
   11c30:	4658      	mov	r0, fp
   11c32:	f012 fced 	bl	24610 <__lshift>
   11c36:	4621      	mov	r1, r4
   11c38:	9002      	str	r0, [sp, #8]
   11c3a:	f01c fd74 	bl	2e726 <__mcmp>
   11c3e:	2800      	cmp	r0, #0
   11c40:	dc03      	bgt.n	11c4a <_dtoa_r+0xafa>
   11c42:	d129      	bne.n	11c98 <_dtoa_r+0xb48>
   11c44:	f019 0f01 	tst.w	r9, #1
   11c48:	d026      	beq.n	11c98 <_dtoa_r+0xb48>
   11c4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   11c4e:	d11d      	bne.n	11c8c <_dtoa_r+0xb3c>
   11c50:	e032      	b.n	11cb8 <_dtoa_r+0xb68>
   11c52:	4628      	mov	r0, r5
   11c54:	e7c1      	b.n	11bda <_dtoa_r+0xa8a>
   11c56:	bf00      	nop
   11c58:	0002f070 	.word	0x0002f070
   11c5c:	40140000 	.word	0x40140000
   11c60:	40240000 	.word	0x40240000
   11c64:	900a      	str	r0, [sp, #40]	; 0x28
   11c66:	9802      	ldr	r0, [sp, #8]
   11c68:	f01c fd5d 	bl	2e726 <__mcmp>
   11c6c:	990a      	ldr	r1, [sp, #40]	; 0x28
   11c6e:	900c      	str	r0, [sp, #48]	; 0x30
   11c70:	4658      	mov	r0, fp
   11c72:	f012 fb4b 	bl	2430c <_Bfree>
   11c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11c78:	bb5a      	cbnz	r2, 11cd2 <_dtoa_r+0xb82>
   11c7a:	9b08      	ldr	r3, [sp, #32]
   11c7c:	b953      	cbnz	r3, 11c94 <_dtoa_r+0xb44>
   11c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c80:	b943      	cbnz	r3, 11c94 <_dtoa_r+0xb44>
   11c82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   11c86:	d017      	beq.n	11cb8 <_dtoa_r+0xb68>
   11c88:	2f00      	cmp	r7, #0
   11c8a:	dd05      	ble.n	11c98 <_dtoa_r+0xb48>
   11c8c:	9b06      	ldr	r3, [sp, #24]
   11c8e:	f103 0931 	add.w	r9, r3, #49	; 0x31
   11c92:	e001      	b.n	11c98 <_dtoa_r+0xb48>
   11c94:	2f00      	cmp	r7, #0
   11c96:	da2a      	bge.n	11cee <_dtoa_r+0xb9e>
   11c98:	f8dd a010 	ldr.w	sl, [sp, #16]
   11c9c:	f80a 9b01 	strb.w	r9, [sl], #1
   11ca0:	e56e      	b.n	11780 <_dtoa_r+0x630>
   11ca2:	9b08      	ldr	r3, [sp, #32]
   11ca4:	433b      	orrs	r3, r7
   11ca6:	d104      	bne.n	11cb2 <_dtoa_r+0xb62>
   11ca8:	9b00      	ldr	r3, [sp, #0]
   11caa:	f003 0301 	and.w	r3, r3, #1
   11cae:	2b00      	cmp	r3, #0
   11cb0:	d0bc      	beq.n	11c2c <_dtoa_r+0xadc>
   11cb2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   11cb6:	d136      	bne.n	11d26 <_dtoa_r+0xbd6>
   11cb8:	9f04      	ldr	r7, [sp, #16]
   11cba:	2339      	movs	r3, #57	; 0x39
   11cbc:	f807 3b01 	strb.w	r3, [r7], #1
   11cc0:	46ba      	mov	sl, r7
   11cc2:	3f01      	subs	r7, #1
   11cc4:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   11cc8:	2b39      	cmp	r3, #57	; 0x39
   11cca:	d05b      	beq.n	11d84 <_dtoa_r+0xc34>
   11ccc:	3301      	adds	r3, #1
   11cce:	703b      	strb	r3, [r7, #0]
   11cd0:	e556      	b.n	11780 <_dtoa_r+0x630>
   11cd2:	2f00      	cmp	r7, #0
   11cd4:	db06      	blt.n	11ce4 <_dtoa_r+0xb94>
   11cd6:	9b08      	ldr	r3, [sp, #32]
   11cd8:	433b      	orrs	r3, r7
   11cda:	d106      	bne.n	11cea <_dtoa_r+0xb9a>
   11cdc:	9b00      	ldr	r3, [sp, #0]
   11cde:	f003 0301 	and.w	r3, r3, #1
   11ce2:	b913      	cbnz	r3, 11cea <_dtoa_r+0xb9a>
   11ce4:	2a00      	cmp	r2, #0
   11ce6:	dca1      	bgt.n	11c2c <_dtoa_r+0xadc>
   11ce8:	e7d6      	b.n	11c98 <_dtoa_r+0xb48>
   11cea:	2a00      	cmp	r2, #0
   11cec:	dce1      	bgt.n	11cb2 <_dtoa_r+0xb62>
   11cee:	9b07      	ldr	r3, [sp, #28]
   11cf0:	f80a 9c01 	strb.w	r9, [sl, #-1]
   11cf4:	4553      	cmp	r3, sl
   11cf6:	4657      	mov	r7, sl
   11cf8:	d02f      	beq.n	11d5a <_dtoa_r+0xc0a>
   11cfa:	9902      	ldr	r1, [sp, #8]
   11cfc:	2300      	movs	r3, #0
   11cfe:	220a      	movs	r2, #10
   11d00:	4658      	mov	r0, fp
   11d02:	f012 fb25 	bl	24350 <__multadd>
   11d06:	45a8      	cmp	r8, r5
   11d08:	9002      	str	r0, [sp, #8]
   11d0a:	f04f 0300 	mov.w	r3, #0
   11d0e:	f04f 020a 	mov.w	r2, #10
   11d12:	4641      	mov	r1, r8
   11d14:	4658      	mov	r0, fp
   11d16:	d10b      	bne.n	11d30 <_dtoa_r+0xbe0>
   11d18:	f012 fb1a 	bl	24350 <__multadd>
   11d1c:	4680      	mov	r8, r0
   11d1e:	4605      	mov	r5, r0
   11d20:	f10a 0a01 	add.w	sl, sl, #1
   11d24:	e766      	b.n	11bf4 <_dtoa_r+0xaa4>
   11d26:	f8dd a010 	ldr.w	sl, [sp, #16]
   11d2a:	f109 0901 	add.w	r9, r9, #1
   11d2e:	e7b5      	b.n	11c9c <_dtoa_r+0xb4c>
   11d30:	f012 fb0e 	bl	24350 <__multadd>
   11d34:	4629      	mov	r1, r5
   11d36:	4680      	mov	r8, r0
   11d38:	2300      	movs	r3, #0
   11d3a:	220a      	movs	r2, #10
   11d3c:	4658      	mov	r0, fp
   11d3e:	f012 fb07 	bl	24350 <__multadd>
   11d42:	4605      	mov	r5, r0
   11d44:	e7ec      	b.n	11d20 <_dtoa_r+0xbd0>
   11d46:	9b04      	ldr	r3, [sp, #16]
   11d48:	2b00      	cmp	r3, #0
   11d4a:	bfc8      	it	gt
   11d4c:	461f      	movgt	r7, r3
   11d4e:	9b03      	ldr	r3, [sp, #12]
   11d50:	bfd8      	it	le
   11d52:	2701      	movle	r7, #1
   11d54:	441f      	add	r7, r3
   11d56:	f04f 0800 	mov.w	r8, #0
   11d5a:	9902      	ldr	r1, [sp, #8]
   11d5c:	2201      	movs	r2, #1
   11d5e:	4658      	mov	r0, fp
   11d60:	f012 fc56 	bl	24610 <__lshift>
   11d64:	4621      	mov	r1, r4
   11d66:	9002      	str	r0, [sp, #8]
   11d68:	f01c fcdd 	bl	2e726 <__mcmp>
   11d6c:	2800      	cmp	r0, #0
   11d6e:	dca7      	bgt.n	11cc0 <_dtoa_r+0xb70>
   11d70:	d102      	bne.n	11d78 <_dtoa_r+0xc28>
   11d72:	f019 0f01 	tst.w	r9, #1
   11d76:	d1a3      	bne.n	11cc0 <_dtoa_r+0xb70>
   11d78:	46ba      	mov	sl, r7
   11d7a:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   11d7e:	2b30      	cmp	r3, #48	; 0x30
   11d80:	d0fa      	beq.n	11d78 <_dtoa_r+0xc28>
   11d82:	e4fd      	b.n	11780 <_dtoa_r+0x630>
   11d84:	9b03      	ldr	r3, [sp, #12]
   11d86:	42bb      	cmp	r3, r7
   11d88:	d19a      	bne.n	11cc0 <_dtoa_r+0xb70>
   11d8a:	9a03      	ldr	r2, [sp, #12]
   11d8c:	2331      	movs	r3, #49	; 0x31
   11d8e:	3601      	adds	r6, #1
   11d90:	7013      	strb	r3, [r2, #0]
   11d92:	e4f5      	b.n	11780 <_dtoa_r+0x630>
   11d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11d96:	2b00      	cmp	r3, #0
   11d98:	f47f aa23 	bne.w	111e2 <_dtoa_r+0x92>
   11d9c:	4b01      	ldr	r3, [pc, #4]	; (11da4 <_dtoa_r+0xc54>)
   11d9e:	f7ff ba42 	b.w	11226 <_dtoa_r+0xd6>
   11da2:	bf00      	nop
   11da4:	00031c05 	.word	0x00031c05

00011da8 <button_changed>:
	.mob_cb 	= NULL,
};

static void button_changed(uint32_t button_state, uint32_t has_changed)
{
	if (has_changed & USER_BUTTON) {
   11da8:	f011 0f01 	tst.w	r1, #1
   11dac:	d003      	beq.n	11db6 <button_changed+0xe>
		uint32_t user_button_state = button_state & USER_BUTTON;
		app_button_state = user_button_state ? true : false;
   11dae:	f000 0001 	and.w	r0, r0, #1
   11db2:	4b01      	ldr	r3, [pc, #4]	; (11db8 <button_changed+0x10>)
   11db4:	7018      	strb	r0, [r3, #0]
	}
}
   11db6:	4770      	bx	lr
   11db8:	20004b62 	.word	0x20004b62

00011dbc <init_button>:

static int init_button(void)
{
   11dbc:	b510      	push	{r4, lr}
	int err;

	err = dk_buttons_init(button_changed);
   11dbe:	4806      	ldr	r0, [pc, #24]	; (11dd8 <init_button+0x1c>)
   11dc0:	f00d fd54 	bl	1f86c <dk_buttons_init>
	if (err) {
   11dc4:	4604      	mov	r4, r0
   11dc6:	b908      	cbnz	r0, 11dcc <init_button+0x10>
		printk("Cannot init buttons (err: %d)\n", err);
	}

	return err;
}
   11dc8:	4620      	mov	r0, r4
   11dca:	bd10      	pop	{r4, pc}
		printk("Cannot init buttons (err: %d)\n", err);
   11dcc:	4601      	mov	r1, r0
   11dce:	4803      	ldr	r0, [pc, #12]	; (11ddc <init_button+0x20>)
   11dd0:	f015 fee0 	bl	27b94 <printk>
	return err;
   11dd4:	e7f8      	b.n	11dc8 <init_button+0xc>
   11dd6:	bf00      	nop
   11dd8:	00011da9 	.word	0x00011da9
   11ddc:	0002f138 	.word	0x0002f138

00011de0 <main>:

void main(void)
{
   11de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11de4:	b09a      	sub	sp, #104	; 0x68
   11de6:	af00      	add	r7, sp, #0
	LOG_ERR("Error log level enabled\n");
   11de8:	4bb6      	ldr	r3, [pc, #728]	; (120c4 <main+0x2e4>)
   11dea:	61fb      	str	r3, [r7, #28]
   11dec:	2502      	movs	r5, #2
   11dee:	713d      	strb	r5, [r7, #4]
   11df0:	2400      	movs	r4, #0
   11df2:	717c      	strb	r4, [r7, #5]
   11df4:	71bc      	strb	r4, [r7, #6]
   11df6:	71fc      	strb	r4, [r7, #7]
   11df8:	687b      	ldr	r3, [r7, #4]
   11dfa:	61bb      	str	r3, [r7, #24]
   11dfc:	4621      	mov	r1, r4
   11dfe:	f364 0100 	bfi	r1, r4, #0, #1
   11e02:	f364 0141 	bfi	r1, r4, #1, #1
   11e06:	f364 0182 	bfi	r1, r4, #2, #1
   11e0a:	f364 01c5 	bfi	r1, r4, #3, #3
   11e0e:	2301      	movs	r3, #1
   11e10:	f363 1188 	bfi	r1, r3, #6, #3
   11e14:	f04f 0808 	mov.w	r8, #8
   11e18:	f368 2152 	bfi	r1, r8, #9, #10
   11e1c:	f364 41de 	bfi	r1, r4, #19, #12
   11e20:	f364 71df 	bfi	r1, r4, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   11e24:	4ea8      	ldr	r6, [pc, #672]	; (120c8 <main+0x2e8>)
   11e26:	4623      	mov	r3, r4
   11e28:	f107 0218 	add.w	r2, r7, #24
   11e2c:	4630      	mov	r0, r6
   11e2e:	f016 ffc8 	bl	28dc2 <z_impl_z_log_msg_static_create>
	LOG_WRN("Warning log level enabled\n");
   11e32:	4ba6      	ldr	r3, [pc, #664]	; (120cc <main+0x2ec>)
   11e34:	637b      	str	r3, [r7, #52]	; 0x34
   11e36:	713d      	strb	r5, [r7, #4]
   11e38:	717c      	strb	r4, [r7, #5]
   11e3a:	71bc      	strb	r4, [r7, #6]
   11e3c:	71fc      	strb	r4, [r7, #7]
   11e3e:	687b      	ldr	r3, [r7, #4]
   11e40:	633b      	str	r3, [r7, #48]	; 0x30
   11e42:	4621      	mov	r1, r4
   11e44:	f364 0100 	bfi	r1, r4, #0, #1
   11e48:	f364 0141 	bfi	r1, r4, #1, #1
   11e4c:	f364 0182 	bfi	r1, r4, #2, #1
   11e50:	f364 01c5 	bfi	r1, r4, #3, #3
   11e54:	f365 1188 	bfi	r1, r5, #6, #3
   11e58:	f368 2152 	bfi	r1, r8, #9, #10
   11e5c:	f364 41de 	bfi	r1, r4, #19, #12
   11e60:	f364 71df 	bfi	r1, r4, #31, #1
   11e64:	4623      	mov	r3, r4
   11e66:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11e6a:	4630      	mov	r0, r6
   11e6c:	f016 ffa9 	bl	28dc2 <z_impl_z_log_msg_static_create>
	LOG_INF("Info log level enabled\n");
   11e70:	4b97      	ldr	r3, [pc, #604]	; (120d0 <main+0x2f0>)
   11e72:	64fb      	str	r3, [r7, #76]	; 0x4c
   11e74:	713d      	strb	r5, [r7, #4]
   11e76:	717c      	strb	r4, [r7, #5]
   11e78:	71bc      	strb	r4, [r7, #6]
   11e7a:	71fc      	strb	r4, [r7, #7]
   11e7c:	687b      	ldr	r3, [r7, #4]
   11e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   11e80:	4621      	mov	r1, r4
   11e82:	f364 0100 	bfi	r1, r4, #0, #1
   11e86:	f364 0141 	bfi	r1, r4, #1, #1
   11e8a:	f364 0182 	bfi	r1, r4, #2, #1
   11e8e:	f364 01c5 	bfi	r1, r4, #3, #3
   11e92:	2303      	movs	r3, #3
   11e94:	f363 1188 	bfi	r1, r3, #6, #3
   11e98:	f368 2152 	bfi	r1, r8, #9, #10
   11e9c:	f364 41de 	bfi	r1, r4, #19, #12
   11ea0:	f364 71df 	bfi	r1, r4, #31, #1
   11ea4:	4623      	mov	r3, r4
   11ea6:	f107 0248 	add.w	r2, r7, #72	; 0x48
   11eaa:	4630      	mov	r0, r6
   11eac:	f016 ff89 	bl	28dc2 <z_impl_z_log_msg_static_create>
	LOG_DBG("Debug log level enabled\n\n");
   11eb0:	466d      	mov	r5, sp
   11eb2:	b088      	sub	sp, #32
   11eb4:	466b      	mov	r3, sp
   11eb6:	f113 0210 	adds.w	r2, r3, #16
   11eba:	d00e      	beq.n	11eda <main+0xfa>
   11ebc:	210c      	movs	r1, #12
   11ebe:	b142      	cbz	r2, 11ed2 <main+0xf2>
   11ec0:	4608      	mov	r0, r1
   11ec2:	2904      	cmp	r1, #4
   11ec4:	dd01      	ble.n	11eca <main+0xea>
   11ec6:	4c83      	ldr	r4, [pc, #524]	; (120d4 <main+0x2f4>)
   11ec8:	615c      	str	r4, [r3, #20]
   11eca:	2808      	cmp	r0, #8
   11ecc:	dd08      	ble.n	11ee0 <main+0x100>
   11ece:	4882      	ldr	r0, [pc, #520]	; (120d8 <main+0x2f8>)
   11ed0:	6198      	str	r0, [r3, #24]
   11ed2:	290b      	cmp	r1, #11
   11ed4:	dd64      	ble.n	11fa0 <main+0x1c0>
   11ed6:	240c      	movs	r4, #12
   11ed8:	e004      	b.n	11ee4 <main+0x104>
   11eda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11ede:	e7ee      	b.n	11ebe <main+0xde>
   11ee0:	f06f 041b 	mvn.w	r4, #27
   11ee4:	b13a      	cbz	r2, 11ef6 <main+0x116>
   11ee6:	2103      	movs	r1, #3
   11ee8:	7139      	strb	r1, [r7, #4]
   11eea:	2100      	movs	r1, #0
   11eec:	7179      	strb	r1, [r7, #5]
   11eee:	71b9      	strb	r1, [r7, #6]
   11ef0:	71f9      	strb	r1, [r7, #7]
   11ef2:	6878      	ldr	r0, [r7, #4]
   11ef4:	6118      	str	r0, [r3, #16]
   11ef6:	2100      	movs	r1, #0
   11ef8:	f36f 0100 	bfc	r1, #0, #1
   11efc:	f36f 0141 	bfc	r1, #1, #1
   11f00:	f36f 0182 	bfc	r1, #2, #1
   11f04:	f36f 01c5 	bfc	r1, #3, #3
   11f08:	2304      	movs	r3, #4
   11f0a:	f363 1188 	bfi	r1, r3, #6, #3
   11f0e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   11f12:	f363 2152 	bfi	r1, r3, #9, #10
   11f16:	f36f 41de 	bfc	r1, #19, #12
   11f1a:	f36f 71df 	bfc	r1, #31, #1
   11f1e:	4c6a      	ldr	r4, [pc, #424]	; (120c8 <main+0x2e8>)
   11f20:	2300      	movs	r3, #0
   11f22:	4620      	mov	r0, r4
   11f24:	f016 ff4d 	bl	28dc2 <z_impl_z_log_msg_static_create>
   11f28:	46ad      	mov	sp, r5

	int blink_status = 0;
	int err;

	LOG_INF("Starting MOB unit application \n");
   11f2a:	4b6c      	ldr	r3, [pc, #432]	; (120dc <main+0x2fc>)
   11f2c:	667b      	str	r3, [r7, #100]	; 0x64
   11f2e:	2302      	movs	r3, #2
   11f30:	713b      	strb	r3, [r7, #4]
   11f32:	2300      	movs	r3, #0
   11f34:	717b      	strb	r3, [r7, #5]
   11f36:	71bb      	strb	r3, [r7, #6]
   11f38:	71fb      	strb	r3, [r7, #7]
   11f3a:	687a      	ldr	r2, [r7, #4]
   11f3c:	663a      	str	r2, [r7, #96]	; 0x60
   11f3e:	4619      	mov	r1, r3
   11f40:	f363 0100 	bfi	r1, r3, #0, #1
   11f44:	f363 0141 	bfi	r1, r3, #1, #1
   11f48:	f363 0182 	bfi	r1, r3, #2, #1
   11f4c:	f363 01c5 	bfi	r1, r3, #3, #3
   11f50:	2203      	movs	r2, #3
   11f52:	f362 1188 	bfi	r1, r2, #6, #3
   11f56:	2208      	movs	r2, #8
   11f58:	f362 2152 	bfi	r1, r2, #9, #10
   11f5c:	f363 41de 	bfi	r1, r3, #19, #12
   11f60:	f363 71df 	bfi	r1, r3, #31, #1
   11f64:	f107 0260 	add.w	r2, r7, #96	; 0x60
   11f68:	4620      	mov	r0, r4
   11f6a:	f016 ff2a 	bl	28dc2 <z_impl_z_log_msg_static_create>

	err = dk_leds_init();
   11f6e:	f00d fdcf 	bl	1fb10 <dk_leds_init>
	if (err) {
   11f72:	4604      	mov	r4, r0
   11f74:	2800      	cmp	r0, #0
   11f76:	d044      	beq.n	12002 <main+0x222>
		LOG_ERR("LEDs init failed (err %d)\n", err);
   11f78:	466d      	mov	r5, sp
   11f7a:	b088      	sub	sp, #32
   11f7c:	466b      	mov	r3, sp
   11f7e:	f113 0210 	adds.w	r2, r3, #16
   11f82:	d010      	beq.n	11fa6 <main+0x1c6>
   11f84:	210c      	movs	r1, #12
   11f86:	b13a      	cbz	r2, 11f98 <main+0x1b8>
   11f88:	4608      	mov	r0, r1
   11f8a:	2904      	cmp	r1, #4
   11f8c:	dd01      	ble.n	11f92 <main+0x1b2>
   11f8e:	4e54      	ldr	r6, [pc, #336]	; (120e0 <main+0x300>)
   11f90:	615e      	str	r6, [r3, #20]
   11f92:	2808      	cmp	r0, #8
   11f94:	dd0a      	ble.n	11fac <main+0x1cc>
   11f96:	619c      	str	r4, [r3, #24]
   11f98:	290b      	cmp	r1, #11
   11f9a:	dd2f      	ble.n	11ffc <main+0x21c>
   11f9c:	240c      	movs	r4, #12
   11f9e:	e007      	b.n	11fb0 <main+0x1d0>
	LOG_DBG("Debug log level enabled\n\n");
   11fa0:	f06f 041b 	mvn.w	r4, #27
   11fa4:	e79e      	b.n	11ee4 <main+0x104>
		LOG_ERR("LEDs init failed (err %d)\n", err);
   11fa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11faa:	e7ec      	b.n	11f86 <main+0x1a6>
   11fac:	f06f 041b 	mvn.w	r4, #27
   11fb0:	b13a      	cbz	r2, 11fc2 <main+0x1e2>
   11fb2:	2103      	movs	r1, #3
   11fb4:	7139      	strb	r1, [r7, #4]
   11fb6:	2100      	movs	r1, #0
   11fb8:	7179      	strb	r1, [r7, #5]
   11fba:	71b9      	strb	r1, [r7, #6]
   11fbc:	71f9      	strb	r1, [r7, #7]
   11fbe:	6878      	ldr	r0, [r7, #4]
   11fc0:	6118      	str	r0, [r3, #16]
   11fc2:	2100      	movs	r1, #0
   11fc4:	f36f 0100 	bfc	r1, #0, #1
   11fc8:	f36f 0141 	bfc	r1, #1, #1
   11fcc:	f36f 0182 	bfc	r1, #2, #1
   11fd0:	f36f 01c5 	bfc	r1, #3, #3
   11fd4:	2301      	movs	r3, #1
   11fd6:	f363 1188 	bfi	r1, r3, #6, #3
   11fda:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   11fde:	f364 2152 	bfi	r1, r4, #9, #10
   11fe2:	f36f 41de 	bfc	r1, #19, #12
   11fe6:	f36f 71df 	bfc	r1, #31, #1
   11fea:	2300      	movs	r3, #0
   11fec:	4836      	ldr	r0, [pc, #216]	; (120c8 <main+0x2e8>)
   11fee:	f016 fee8 	bl	28dc2 <z_impl_z_log_msg_static_create>
   11ff2:	46ad      	mov	sp, r5

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
   11ff4:	3768      	adds	r7, #104	; 0x68
   11ff6:	46bd      	mov	sp, r7
   11ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("LEDs init failed (err %d)\n", err);
   11ffc:	f06f 041b 	mvn.w	r4, #27
   12000:	e7d6      	b.n	11fb0 <main+0x1d0>
	err = init_button();
   12002:	f7ff fedb 	bl	11dbc <init_button>
	if (err) {
   12006:	4604      	mov	r4, r0
   12008:	2800      	cmp	r0, #0
   1200a:	d03e      	beq.n	1208a <main+0x2aa>
		LOG_ERR("Button init failed (err %d)\n", err);
   1200c:	466d      	mov	r5, sp
   1200e:	b088      	sub	sp, #32
   12010:	466b      	mov	r3, sp
   12012:	f113 0210 	adds.w	r2, r3, #16
   12016:	d00d      	beq.n	12034 <main+0x254>
   12018:	210c      	movs	r1, #12
   1201a:	b13a      	cbz	r2, 1202c <main+0x24c>
   1201c:	4608      	mov	r0, r1
   1201e:	2904      	cmp	r1, #4
   12020:	dd01      	ble.n	12026 <main+0x246>
   12022:	4e30      	ldr	r6, [pc, #192]	; (120e4 <main+0x304>)
   12024:	615e      	str	r6, [r3, #20]
   12026:	2808      	cmp	r0, #8
   12028:	dd07      	ble.n	1203a <main+0x25a>
   1202a:	619c      	str	r4, [r3, #24]
   1202c:	290b      	cmp	r1, #11
   1202e:	dd29      	ble.n	12084 <main+0x2a4>
   12030:	240c      	movs	r4, #12
   12032:	e004      	b.n	1203e <main+0x25e>
   12034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12038:	e7ef      	b.n	1201a <main+0x23a>
   1203a:	f06f 041b 	mvn.w	r4, #27
   1203e:	b13a      	cbz	r2, 12050 <main+0x270>
   12040:	2103      	movs	r1, #3
   12042:	7139      	strb	r1, [r7, #4]
   12044:	2100      	movs	r1, #0
   12046:	7179      	strb	r1, [r7, #5]
   12048:	71b9      	strb	r1, [r7, #6]
   1204a:	71f9      	strb	r1, [r7, #7]
   1204c:	6878      	ldr	r0, [r7, #4]
   1204e:	6118      	str	r0, [r3, #16]
   12050:	2100      	movs	r1, #0
   12052:	f36f 0100 	bfc	r1, #0, #1
   12056:	f36f 0141 	bfc	r1, #1, #1
   1205a:	f36f 0182 	bfc	r1, #2, #1
   1205e:	f36f 01c5 	bfc	r1, #3, #3
   12062:	2301      	movs	r3, #1
   12064:	f363 1188 	bfi	r1, r3, #6, #3
   12068:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1206c:	f363 2152 	bfi	r1, r3, #9, #10
   12070:	f36f 41de 	bfc	r1, #19, #12
   12074:	f36f 71df 	bfc	r1, #31, #1
   12078:	2300      	movs	r3, #0
   1207a:	4813      	ldr	r0, [pc, #76]	; (120c8 <main+0x2e8>)
   1207c:	f016 fea1 	bl	28dc2 <z_impl_z_log_msg_static_create>
   12080:	46ad      	mov	sp, r5
		return;
   12082:	e7b7      	b.n	11ff4 <main+0x214>
		LOG_ERR("Button init failed (err %d)\n", err);
   12084:	f06f 041b 	mvn.w	r4, #27
   12088:	e7d9      	b.n	1203e <main+0x25e>
	err = gss_init(&app_callbacks);
   1208a:	4817      	ldr	r0, [pc, #92]	; (120e8 <main+0x308>)
   1208c:	f000 f86e 	bl	1216c <gss_init>
	if (err)
   12090:	4604      	mov	r4, r0
   12092:	2800      	cmp	r0, #0
   12094:	d054      	beq.n	12140 <main+0x360>
		LOG_ERR("Failed to init GSS (err:%d)\n", err);
   12096:	466d      	mov	r5, sp
   12098:	b088      	sub	sp, #32
   1209a:	466b      	mov	r3, sp
   1209c:	f113 0210 	adds.w	r2, r3, #16
   120a0:	d00d      	beq.n	120be <main+0x2de>
   120a2:	210c      	movs	r1, #12
   120a4:	b13a      	cbz	r2, 120b6 <main+0x2d6>
   120a6:	4608      	mov	r0, r1
   120a8:	2904      	cmp	r1, #4
   120aa:	dd01      	ble.n	120b0 <main+0x2d0>
   120ac:	4e0f      	ldr	r6, [pc, #60]	; (120ec <main+0x30c>)
   120ae:	615e      	str	r6, [r3, #20]
   120b0:	2808      	cmp	r0, #8
   120b2:	dd1d      	ble.n	120f0 <main+0x310>
   120b4:	619c      	str	r4, [r3, #24]
   120b6:	290b      	cmp	r1, #11
   120b8:	dd3f      	ble.n	1213a <main+0x35a>
   120ba:	240c      	movs	r4, #12
   120bc:	e01a      	b.n	120f4 <main+0x314>
   120be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   120c2:	e7ef      	b.n	120a4 <main+0x2c4>
   120c4:	0002f158 	.word	0x0002f158
   120c8:	0002ef20 	.word	0x0002ef20
   120cc:	0002f174 	.word	0x0002f174
   120d0:	0002f190 	.word	0x0002f190
   120d4:	0002f1a8 	.word	0x0002f1a8
   120d8:	0002f244 	.word	0x0002f244
   120dc:	0002f1c8 	.word	0x0002f1c8
   120e0:	0002f1e8 	.word	0x0002f1e8
   120e4:	0002f204 	.word	0x0002f204
   120e8:	200030c0 	.word	0x200030c0
   120ec:	0002f224 	.word	0x0002f224
   120f0:	f06f 041b 	mvn.w	r4, #27
   120f4:	b13a      	cbz	r2, 12106 <main+0x326>
   120f6:	2103      	movs	r1, #3
   120f8:	7139      	strb	r1, [r7, #4]
   120fa:	2100      	movs	r1, #0
   120fc:	7179      	strb	r1, [r7, #5]
   120fe:	71b9      	strb	r1, [r7, #6]
   12100:	71f9      	strb	r1, [r7, #7]
   12102:	6878      	ldr	r0, [r7, #4]
   12104:	6118      	str	r0, [r3, #16]
   12106:	2100      	movs	r1, #0
   12108:	f36f 0100 	bfc	r1, #0, #1
   1210c:	f36f 0141 	bfc	r1, #1, #1
   12110:	f36f 0182 	bfc	r1, #2, #1
   12114:	f36f 01c5 	bfc	r1, #3, #3
   12118:	2301      	movs	r3, #1
   1211a:	f363 1188 	bfi	r1, r3, #6, #3
   1211e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   12122:	f363 2152 	bfi	r1, r3, #9, #10
   12126:	f36f 41de 	bfc	r1, #19, #12
   1212a:	f36f 71df 	bfc	r1, #31, #1
   1212e:	2300      	movs	r3, #0
   12130:	480c      	ldr	r0, [pc, #48]	; (12164 <main+0x384>)
   12132:	f016 fe46 	bl	28dc2 <z_impl_z_log_msg_static_create>
   12136:	46ad      	mov	sp, r5
		return;
   12138:	e75c      	b.n	11ff4 <main+0x214>
		LOG_ERR("Failed to init GSS (err:%d)\n", err);
   1213a:	f06f 041b 	mvn.w	r4, #27
   1213e:	e7d9      	b.n	120f4 <main+0x314>
	ble_init(&connection_callbacks);
   12140:	4809      	ldr	r0, [pc, #36]	; (12168 <main+0x388>)
   12142:	f000 f81d 	bl	12180 <ble_init>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   12146:	3401      	adds	r4, #1
   12148:	f004 0101 	and.w	r1, r4, #1
   1214c:	bf48      	it	mi
   1214e:	4249      	negmi	r1, r1
   12150:	2000      	movs	r0, #0
   12152:	f00d fd21 	bl	1fb98 <dk_set_led>
	return z_impl_k_sleep(timeout);
   12156:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1215a:	2100      	movs	r1, #0
   1215c:	f010 fdb2 	bl	22cc4 <z_impl_k_sleep>
	for (;;) {
   12160:	e7f1      	b.n	12146 <main+0x366>
   12162:	bf00      	nop
   12164:	0002ef20 	.word	0x0002ef20
   12168:	200004e0 	.word	0x200004e0

0001216c <gss_init>:
/* CALLBACKS */

/* A function to register application callbacks */
int gss_init(struct gss_cb_s *callbacks)
{
	if (callbacks)
   1216c:	b120      	cbz	r0, 12178 <gss_init+0xc>
	{
		gss_cb.gps_cb = callbacks->gps_cb;
   1216e:	6801      	ldr	r1, [r0, #0]
   12170:	4a02      	ldr	r2, [pc, #8]	; (1217c <gss_init+0x10>)
   12172:	6011      	str	r1, [r2, #0]
		gss_cb.mob_cb = callbacks->mob_cb;
   12174:	6843      	ldr	r3, [r0, #4]
   12176:	6053      	str	r3, [r2, #4]
	}

	return 0;
   12178:	2000      	movs	r0, #0
   1217a:	4770      	bx	lr
   1217c:	200030c8 	.word	0x200030c8

00012180 <ble_init>:
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_GSS_VAL),
	BT_DATA(BT_DATA_NAME_COMPLETE, CONFIG_BT_DEVICE_NAME, sizeof(CONFIG_BT_DEVICE_NAME) - 1),
};

int ble_init(struct bt_conn_cb *connection_cb)
{
   12180:	b5f0      	push	{r4, r5, r6, r7, lr}
   12182:	b091      	sub	sp, #68	; 0x44
   12184:	af02      	add	r7, sp, #8
   12186:	4604      	mov	r4, r0
	int err;
	err = bt_enable(NULL);
   12188:	2000      	movs	r0, #0
   1218a:	f007 f8b3 	bl	192f4 <bt_enable>
	if (err)
   1218e:	2800      	cmp	r0, #0
   12190:	d042      	beq.n	12218 <ble_init+0x98>
   12192:	4605      	mov	r5, r0
	{
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
   12194:	466e      	mov	r6, sp
   12196:	b088      	sub	sp, #32
   12198:	ab02      	add	r3, sp, #8
   1219a:	f113 0210 	adds.w	r2, r3, #16
   1219e:	d00d      	beq.n	121bc <ble_init+0x3c>
   121a0:	210c      	movs	r1, #12
   121a2:	b13a      	cbz	r2, 121b4 <ble_init+0x34>
   121a4:	4608      	mov	r0, r1
   121a6:	2904      	cmp	r1, #4
   121a8:	dd01      	ble.n	121ae <ble_init+0x2e>
   121aa:	4c64      	ldr	r4, [pc, #400]	; (1233c <ble_init+0x1bc>)
   121ac:	615c      	str	r4, [r3, #20]
   121ae:	2808      	cmp	r0, #8
   121b0:	dd07      	ble.n	121c2 <ble_init+0x42>
   121b2:	619d      	str	r5, [r3, #24]
   121b4:	290b      	cmp	r1, #11
   121b6:	dd2c      	ble.n	12212 <ble_init+0x92>
   121b8:	240c      	movs	r4, #12
   121ba:	e004      	b.n	121c6 <ble_init+0x46>
   121bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   121c0:	e7ef      	b.n	121a2 <ble_init+0x22>
   121c2:	f06f 041b 	mvn.w	r4, #27
   121c6:	b13a      	cbz	r2, 121d8 <ble_init+0x58>
   121c8:	2103      	movs	r1, #3
   121ca:	7139      	strb	r1, [r7, #4]
   121cc:	2100      	movs	r1, #0
   121ce:	7179      	strb	r1, [r7, #5]
   121d0:	71b9      	strb	r1, [r7, #6]
   121d2:	71f9      	strb	r1, [r7, #7]
   121d4:	6878      	ldr	r0, [r7, #4]
   121d6:	6118      	str	r0, [r3, #16]
   121d8:	2100      	movs	r1, #0
   121da:	f36f 0100 	bfc	r1, #0, #1
   121de:	f36f 0141 	bfc	r1, #1, #1
   121e2:	f36f 0182 	bfc	r1, #2, #1
   121e6:	f36f 01c5 	bfc	r1, #3, #3
   121ea:	2301      	movs	r3, #1
   121ec:	f363 1188 	bfi	r1, r3, #6, #3
   121f0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   121f4:	f363 2152 	bfi	r1, r3, #9, #10
   121f8:	f36f 41de 	bfc	r1, #19, #12
   121fc:	f36f 71df 	bfc	r1, #31, #1
   12200:	2300      	movs	r3, #0
   12202:	484f      	ldr	r0, [pc, #316]	; (12340 <ble_init+0x1c0>)
   12204:	f016 fddd 	bl	28dc2 <z_impl_z_log_msg_static_create>
   12208:	46b5      	mov	sp, r6
		LOG_ERR("Advertising failed to start (err %d)\n", err);
		return err;
	}

	LOG_INF("Advertising successfully started\n");
}
   1220a:	4628      	mov	r0, r5
   1220c:	373c      	adds	r7, #60	; 0x3c
   1220e:	46bd      	mov	sp, r7
   12210:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
   12212:	f06f 041b 	mvn.w	r4, #27
   12216:	e7d6      	b.n	121c6 <ble_init+0x46>
	bt_conn_cb_register(connection_cb);
   12218:	4620      	mov	r0, r4
   1221a:	f008 fe85 	bl	1af28 <bt_conn_cb_register>
	LOG_INF("Bluetooth initialized\n");
   1221e:	4b49      	ldr	r3, [pc, #292]	; (12344 <ble_init+0x1c4>)
   12220:	61fb      	str	r3, [r7, #28]
   12222:	2502      	movs	r5, #2
   12224:	713d      	strb	r5, [r7, #4]
   12226:	2300      	movs	r3, #0
   12228:	717b      	strb	r3, [r7, #5]
   1222a:	71bb      	strb	r3, [r7, #6]
   1222c:	71fb      	strb	r3, [r7, #7]
   1222e:	687a      	ldr	r2, [r7, #4]
   12230:	61ba      	str	r2, [r7, #24]
   12232:	4619      	mov	r1, r3
   12234:	f363 0100 	bfi	r1, r3, #0, #1
   12238:	f363 0141 	bfi	r1, r3, #1, #1
   1223c:	f363 0182 	bfi	r1, r3, #2, #1
   12240:	f363 01c5 	bfi	r1, r3, #3, #3
   12244:	2403      	movs	r4, #3
   12246:	f364 1188 	bfi	r1, r4, #6, #3
   1224a:	2208      	movs	r2, #8
   1224c:	f362 2152 	bfi	r1, r2, #9, #10
   12250:	f363 41de 	bfi	r1, r3, #19, #12
   12254:	f363 71df 	bfi	r1, r3, #31, #1
   12258:	f107 0218 	add.w	r2, r7, #24
   1225c:	4838      	ldr	r0, [pc, #224]	; (12340 <ble_init+0x1c0>)
   1225e:	f016 fdb0 	bl	28dc2 <z_impl_z_log_msg_static_create>
	err = bt_le_adv_start(adv_param, ad, ARRAY_SIZE(ad),
   12262:	9500      	str	r5, [sp, #0]
   12264:	4b38      	ldr	r3, [pc, #224]	; (12348 <ble_init+0x1c8>)
   12266:	4622      	mov	r2, r4
   12268:	4938      	ldr	r1, [pc, #224]	; (1234c <ble_init+0x1cc>)
   1226a:	4839      	ldr	r0, [pc, #228]	; (12350 <ble_init+0x1d0>)
   1226c:	f007 ff6c 	bl	1a148 <bt_le_adv_start>
	if (err)
   12270:	4605      	mov	r5, r0
   12272:	2800      	cmp	r0, #0
   12274:	d03e      	beq.n	122f4 <ble_init+0x174>
		LOG_ERR("Advertising failed to start (err %d)\n", err);
   12276:	466e      	mov	r6, sp
   12278:	b088      	sub	sp, #32
   1227a:	ab02      	add	r3, sp, #8
   1227c:	f113 0210 	adds.w	r2, r3, #16
   12280:	d00d      	beq.n	1229e <ble_init+0x11e>
   12282:	210c      	movs	r1, #12
   12284:	b13a      	cbz	r2, 12296 <ble_init+0x116>
   12286:	4608      	mov	r0, r1
   12288:	2904      	cmp	r1, #4
   1228a:	dd01      	ble.n	12290 <ble_init+0x110>
   1228c:	4c31      	ldr	r4, [pc, #196]	; (12354 <ble_init+0x1d4>)
   1228e:	615c      	str	r4, [r3, #20]
   12290:	2808      	cmp	r0, #8
   12292:	dd07      	ble.n	122a4 <ble_init+0x124>
   12294:	619d      	str	r5, [r3, #24]
   12296:	290b      	cmp	r1, #11
   12298:	dd29      	ble.n	122ee <ble_init+0x16e>
   1229a:	240c      	movs	r4, #12
   1229c:	e004      	b.n	122a8 <ble_init+0x128>
   1229e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   122a2:	e7ef      	b.n	12284 <ble_init+0x104>
   122a4:	f06f 041b 	mvn.w	r4, #27
   122a8:	b13a      	cbz	r2, 122ba <ble_init+0x13a>
   122aa:	2103      	movs	r1, #3
   122ac:	7139      	strb	r1, [r7, #4]
   122ae:	2100      	movs	r1, #0
   122b0:	7179      	strb	r1, [r7, #5]
   122b2:	71b9      	strb	r1, [r7, #6]
   122b4:	71f9      	strb	r1, [r7, #7]
   122b6:	6878      	ldr	r0, [r7, #4]
   122b8:	6118      	str	r0, [r3, #16]
   122ba:	2100      	movs	r1, #0
   122bc:	f36f 0100 	bfc	r1, #0, #1
   122c0:	f36f 0141 	bfc	r1, #1, #1
   122c4:	f36f 0182 	bfc	r1, #2, #1
   122c8:	f36f 01c5 	bfc	r1, #3, #3
   122cc:	2301      	movs	r3, #1
   122ce:	f363 1188 	bfi	r1, r3, #6, #3
   122d2:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   122d6:	f364 2152 	bfi	r1, r4, #9, #10
   122da:	f36f 41de 	bfc	r1, #19, #12
   122de:	f36f 71df 	bfc	r1, #31, #1
   122e2:	2300      	movs	r3, #0
   122e4:	4816      	ldr	r0, [pc, #88]	; (12340 <ble_init+0x1c0>)
   122e6:	f016 fd6c 	bl	28dc2 <z_impl_z_log_msg_static_create>
   122ea:	46b5      	mov	sp, r6
		return err;
   122ec:	e78d      	b.n	1220a <ble_init+0x8a>
		LOG_ERR("Advertising failed to start (err %d)\n", err);
   122ee:	f06f 041b 	mvn.w	r4, #27
   122f2:	e7d9      	b.n	122a8 <ble_init+0x128>
	LOG_INF("Advertising successfully started\n");
   122f4:	4b18      	ldr	r3, [pc, #96]	; (12358 <ble_init+0x1d8>)
   122f6:	637b      	str	r3, [r7, #52]	; 0x34
   122f8:	2302      	movs	r3, #2
   122fa:	713b      	strb	r3, [r7, #4]
   122fc:	2300      	movs	r3, #0
   122fe:	717b      	strb	r3, [r7, #5]
   12300:	71bb      	strb	r3, [r7, #6]
   12302:	71fb      	strb	r3, [r7, #7]
   12304:	687a      	ldr	r2, [r7, #4]
   12306:	633a      	str	r2, [r7, #48]	; 0x30
   12308:	4619      	mov	r1, r3
   1230a:	f363 0100 	bfi	r1, r3, #0, #1
   1230e:	f363 0141 	bfi	r1, r3, #1, #1
   12312:	f363 0182 	bfi	r1, r3, #2, #1
   12316:	f363 01c5 	bfi	r1, r3, #3, #3
   1231a:	2203      	movs	r2, #3
   1231c:	f362 1188 	bfi	r1, r2, #6, #3
   12320:	2208      	movs	r2, #8
   12322:	f362 2152 	bfi	r1, r2, #9, #10
   12326:	f363 41de 	bfi	r1, r3, #19, #12
   1232a:	f363 71df 	bfi	r1, r3, #31, #1
   1232e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   12332:	4803      	ldr	r0, [pc, #12]	; (12340 <ble_init+0x1c0>)
   12334:	f016 fd45 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   12338:	e767      	b.n	1220a <ble_init+0x8a>
   1233a:	bf00      	nop
   1233c:	0002f2bc 	.word	0x0002f2bc
   12340:	0002eee8 	.word	0x0002eee8
   12344:	0002f2dc 	.word	0x0002f2dc
   12348:	0002f3b0 	.word	0x0002f3b0
   1234c:	0002f3c0 	.word	0x0002f3c0
   12350:	20000588 	.word	0x20000588
   12354:	0002f2f4 	.word	0x0002f2f4
   12358:	0002f31c 	.word	0x0002f31c

0001235c <on_connected>:

/* BLUETOOTH CONNECTION CALLBACKS */

void on_connected(struct bt_conn *conn, uint8_t err)
{
   1235c:	b508      	push	{r3, lr}
	if (err)
   1235e:	b931      	cbnz	r1, 1236e <on_connected+0x12>
	{
		printk("Connection failed (err %u)\n", err);
		return;
	}

	printk("Connected\n");
   12360:	4805      	ldr	r0, [pc, #20]	; (12378 <on_connected+0x1c>)
   12362:	f015 fc17 	bl	27b94 <printk>

	dk_set_led_on(CON_STATUS_LED);
   12366:	2001      	movs	r0, #1
   12368:	f01a fa6c 	bl	2c844 <dk_set_led_on>
}
   1236c:	bd08      	pop	{r3, pc}
		printk("Connection failed (err %u)\n", err);
   1236e:	4803      	ldr	r0, [pc, #12]	; (1237c <on_connected+0x20>)
   12370:	f015 fc10 	bl	27b94 <printk>
		return;
   12374:	e7fa      	b.n	1236c <on_connected+0x10>
   12376:	bf00      	nop
   12378:	0002f35c 	.word	0x0002f35c
   1237c:	0002f340 	.word	0x0002f340

00012380 <on_disconnected>:

void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
   12380:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   12382:	4803      	ldr	r0, [pc, #12]	; (12390 <on_disconnected+0x10>)
   12384:	f015 fc06 	bl	27b94 <printk>

	dk_set_led_off(CON_STATUS_LED);
   12388:	2001      	movs	r0, #1
   1238a:	f01a fa60 	bl	2c84e <dk_set_led_off>
   1238e:	bd08      	pop	{r3, pc}
   12390:	0002f368 	.word	0x0002f368

00012394 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12398:	b091      	sub	sp, #68	; 0x44
   1239a:	9205      	str	r2, [sp, #20]
   1239c:	9302      	str	r3, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1239e:	4613      	mov	r3, r2
   123a0:	f002 0204 	and.w	r2, r2, #4
   123a4:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   123a6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   123aa:	f010 0203 	ands.w	r2, r0, #3
   123ae:	9201      	str	r2, [sp, #4]
   123b0:	f040 8223 	bne.w	127fa <cbvprintf_package+0x466>
   123b4:	4607      	mov	r7, r0
   123b6:	468a      	mov	sl, r1
   123b8:	3301      	adds	r3, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   123ba:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   123bc:	2800      	cmp	r0, #0
   123be:	d047      	beq.n	12450 <cbvprintf_package+0xbc>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   123c0:	b127      	cbz	r7, 123cc <cbvprintf_package+0x38>
   123c2:	1be2      	subs	r2, r4, r7
   123c4:	3204      	adds	r2, #4
   123c6:	4552      	cmp	r2, sl
   123c8:	f200 821a 	bhi.w	12800 <cbvprintf_package+0x46c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
   123cc:	9a02      	ldr	r2, [sp, #8]
   123ce:	1e55      	subs	r5, r2, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   123d0:	9a01      	ldr	r2, [sp, #4]
   123d2:	9204      	str	r2, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   123d4:	9206      	str	r2, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   123d6:	9203      	str	r2, [sp, #12]
	bool parsing = false;
   123d8:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   123da:	f04f 3bff 	mov.w	fp, #4294967295
	align = VA_STACK_ALIGN(char *);
   123de:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
   123e2:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   123e4:	b10f      	cbz	r7, 123ea <cbvprintf_package+0x56>
				*(const char **)buf = s;
   123e6:	9a02      	ldr	r2, [sp, #8]
   123e8:	6022      	str	r2, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   123ea:	1e5a      	subs	r2, r3, #1
   123ec:	9207      	str	r2, [sp, #28]
   123ee:	2b00      	cmp	r3, #0
   123f0:	f340 815f 	ble.w	126b2 <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   123f4:	9b05      	ldr	r3, [sp, #20]
   123f6:	f013 0202 	ands.w	r2, r3, #2
   123fa:	d026      	beq.n	1244a <cbvprintf_package+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   123fc:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   123fe:	1be1      	subs	r1, r4, r7
   12400:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12402:	b11a      	cbz	r2, 1240c <cbvprintf_package+0x78>
   12404:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12408:	f080 8200 	bcs.w	1280c <cbvprintf_package+0x478>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1240c:	9903      	ldr	r1, [sp, #12]
   1240e:	290f      	cmp	r1, #15
   12410:	f200 81ff 	bhi.w	12812 <cbvprintf_package+0x47e>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
   12414:	2f00      	cmp	r7, #0
   12416:	f000 8164 	beq.w	126e2 <cbvprintf_package+0x34e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
   1241a:	b2db      	uxtb	r3, r3
   1241c:	f101 0240 	add.w	r2, r1, #64	; 0x40
   12420:	446a      	add	r2, sp
   12422:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
   12426:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
   1242a:	2800      	cmp	r0, #0
   1242c:	f000 8155 	beq.w	126da <cbvprintf_package+0x346>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   12430:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12434:	f101 0240 	add.w	r2, r1, #64	; 0x40
   12438:	446a      	add	r2, sp
   1243a:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
   1243e:	9b04      	ldr	r3, [sp, #16]
   12440:	3301      	adds	r3, #1
   12442:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
   12444:	9b03      	ldr	r3, [sp, #12]
   12446:	3301      	adds	r3, #1
   12448:	9303      	str	r3, [sp, #12]
			}
			buf += sizeof(char *);
   1244a:	3404      	adds	r4, #4

			is_str_arg = false;
   1244c:	2100      	movs	r1, #0
   1244e:	e03d      	b.n	124cc <cbvprintf_package+0x138>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   12450:	f001 0a07 	and.w	sl, r1, #7
   12454:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   12456:	f1ca 0a08 	rsb	sl, sl, #8
   1245a:	e7b1      	b.n	123c0 <cbvprintf_package+0x2c>
				parsing = false;
   1245c:	2600      	movs	r6, #0
   1245e:	e034      	b.n	124ca <cbvprintf_package+0x136>
   12460:	2600      	movs	r6, #0
   12462:	e032      	b.n	124ca <cbvprintf_package+0x136>
   12464:	2600      	movs	r6, #0
   12466:	e030      	b.n	124ca <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(intmax_t);
   12468:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
   1246c:	46c1      	mov	r9, r8
   1246e:	e02c      	b.n	124ca <cbvprintf_package+0x136>
				if (*fmt == '%') {
   12470:	2b25      	cmp	r3, #37	; 0x25
   12472:	d12a      	bne.n	124ca <cbvprintf_package+0x136>
					arg_idx++;
   12474:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
   12478:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
   1247a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
   1247e:	46c1      	mov	r9, r8
				continue;
   12480:	e023      	b.n	124ca <cbvprintf_package+0x136>
			switch (*fmt) {
   12482:	2b47      	cmp	r3, #71	; 0x47
   12484:	d8ec      	bhi.n	12460 <cbvprintf_package+0xcc>
   12486:	2b2a      	cmp	r3, #42	; 0x2a
   12488:	d312      	bcc.n	124b0 <cbvprintf_package+0x11c>
   1248a:	3b2a      	subs	r3, #42	; 0x2a
   1248c:	b2db      	uxtb	r3, r3
   1248e:	2001      	movs	r0, #1
   12490:	fa00 f303 	lsl.w	r3, r0, r3
   12494:	f64f 70da 	movw	r0, #65498	; 0xffda
   12498:	4203      	tst	r3, r0
   1249a:	d116      	bne.n	124ca <cbvprintf_package+0x136>
   1249c:	f013 5f62 	tst.w	r3, #947912704	; 0x38800000
   124a0:	f040 80c4 	bne.w	1262c <cbvprintf_package+0x298>
   124a4:	f013 0f01 	tst.w	r3, #1
   124a8:	f040 808e 	bne.w	125c8 <cbvprintf_package+0x234>
				parsing = false;
   124ac:	2600      	movs	r6, #0
   124ae:	e00c      	b.n	124ca <cbvprintf_package+0x136>
			switch (*fmt) {
   124b0:	2b25      	cmp	r3, #37	; 0x25
   124b2:	d103      	bne.n	124bc <cbvprintf_package+0x128>
				arg_idx--;
   124b4:	f10b 3bff 	add.w	fp, fp, #4294967295
				parsing = false;
   124b8:	2600      	movs	r6, #0
				continue;
   124ba:	e006      	b.n	124ca <cbvprintf_package+0x136>
			switch (*fmt) {
   124bc:	d901      	bls.n	124c2 <cbvprintf_package+0x12e>
				parsing = false;
   124be:	2600      	movs	r6, #0
   124c0:	e003      	b.n	124ca <cbvprintf_package+0x136>
			switch (*fmt) {
   124c2:	2b20      	cmp	r3, #32
   124c4:	d001      	beq.n	124ca <cbvprintf_package+0x136>
   124c6:	2b23      	cmp	r3, #35	; 0x23
   124c8:	d1cc      	bne.n	12464 <cbvprintf_package+0xd0>
				parsing = false;
   124ca:	4615      	mov	r5, r2
			if (*++fmt == '\0') {
   124cc:	1c6a      	adds	r2, r5, #1
   124ce:	786b      	ldrb	r3, [r5, #1]
   124d0:	2b00      	cmp	r3, #0
   124d2:	f000 811d 	beq.w	12710 <cbvprintf_package+0x37c>
			if (!parsing) {
   124d6:	2e00      	cmp	r6, #0
   124d8:	d0ca      	beq.n	12470 <cbvprintf_package+0xdc>
			switch (*fmt) {
   124da:	2b7a      	cmp	r3, #122	; 0x7a
   124dc:	d8be      	bhi.n	1245c <cbvprintf_package+0xc8>
   124de:	2b4c      	cmp	r3, #76	; 0x4c
   124e0:	d3cf      	bcc.n	12482 <cbvprintf_package+0xee>
   124e2:	3b4c      	subs	r3, #76	; 0x4c
   124e4:	2b2e      	cmp	r3, #46	; 0x2e
   124e6:	d861      	bhi.n	125ac <cbvprintf_package+0x218>
   124e8:	a001      	add	r0, pc, #4	; (adr r0, 124f0 <cbvprintf_package+0x15c>)
   124ea:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   124ee:	bf00      	nop
   124f0:	000124cb 	.word	0x000124cb
   124f4:	000125ad 	.word	0x000125ad
   124f8:	000125ad 	.word	0x000125ad
   124fc:	000125ad 	.word	0x000125ad
   12500:	000125ad 	.word	0x000125ad
   12504:	000125ad 	.word	0x000125ad
   12508:	000125ad 	.word	0x000125ad
   1250c:	000125ad 	.word	0x000125ad
   12510:	000125ad 	.word	0x000125ad
   12514:	000125ad 	.word	0x000125ad
   12518:	000125ad 	.word	0x000125ad
   1251c:	000125ad 	.word	0x000125ad
   12520:	000125c1 	.word	0x000125c1
   12524:	000125ad 	.word	0x000125ad
   12528:	000125ad 	.word	0x000125ad
   1252c:	000125ad 	.word	0x000125ad
   12530:	000125ad 	.word	0x000125ad
   12534:	000125ad 	.word	0x000125ad
   12538:	000125ad 	.word	0x000125ad
   1253c:	000125ad 	.word	0x000125ad
   12540:	000125ad 	.word	0x000125ad
   12544:	0001262d 	.word	0x0001262d
   12548:	000125ad 	.word	0x000125ad
   1254c:	000125c1 	.word	0x000125c1
   12550:	000125c1 	.word	0x000125c1
   12554:	0001262d 	.word	0x0001262d
   12558:	0001262d 	.word	0x0001262d
   1255c:	0001262d 	.word	0x0001262d
   12560:	000124cb 	.word	0x000124cb
   12564:	000125c1 	.word	0x000125c1
   12568:	00012469 	.word	0x00012469
   1256c:	000125ad 	.word	0x000125ad
   12570:	000124cb 	.word	0x000124cb
   12574:	000125ad 	.word	0x000125ad
   12578:	0001268b 	.word	0x0001268b
   1257c:	000125c1 	.word	0x000125c1
   12580:	0001268b 	.word	0x0001268b
   12584:	000125ad 	.word	0x000125ad
   12588:	000125ad 	.word	0x000125ad
   1258c:	00012695 	.word	0x00012695
   12590:	000125b9 	.word	0x000125b9
   12594:	000125c1 	.word	0x000125c1
   12598:	000125ad 	.word	0x000125ad
   1259c:	000125ad 	.word	0x000125ad
   125a0:	000125c1 	.word	0x000125c1
   125a4:	000125ad 	.word	0x000125ad
   125a8:	000125b1 	.word	0x000125b1
				parsing = false;
   125ac:	2600      	movs	r6, #0
   125ae:	e78c      	b.n	124ca <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(size_t);
   125b0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
   125b4:	46c1      	mov	r9, r8
				continue;
   125b6:	e788      	b.n	124ca <cbvprintf_package+0x136>
				align = VA_STACK_ALIGN(ptrdiff_t);
   125b8:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
   125bc:	46c1      	mov	r9, r8
				continue;
   125be:	e784      	b.n	124ca <cbvprintf_package+0x136>
				if (fmt[-1] == 'l') {
   125c0:	782b      	ldrb	r3, [r5, #0]
   125c2:	2b6c      	cmp	r3, #108	; 0x6c
   125c4:	d024      	beq.n	12610 <cbvprintf_package+0x27c>
				parsing = false;
   125c6:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
   125c8:	4444      	add	r4, r8
   125ca:	3c01      	subs	r4, #1
   125cc:	f1c8 0300 	rsb	r3, r8, #0
   125d0:	401c      	ands	r4, r3
   125d2:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   125d4:	b127      	cbz	r7, 125e0 <cbvprintf_package+0x24c>
   125d6:	1be3      	subs	r3, r4, r7
   125d8:	444b      	add	r3, r9
   125da:	459a      	cmp	sl, r3
   125dc:	f0c0 8113 	bcc.w	12806 <cbvprintf_package+0x472>
		if (is_str_arg) {
   125e0:	2900      	cmp	r1, #0
   125e2:	d15d      	bne.n	126a0 <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
   125e4:	f1b9 0f04 	cmp.w	r9, #4
   125e8:	f000 808a 	beq.w	12700 <cbvprintf_package+0x36c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
   125ec:	f1b9 0f08 	cmp.w	r9, #8
   125f0:	f040 8112 	bne.w	12818 <cbvprintf_package+0x484>
			long long v = va_arg(ap, long long);
   125f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   125f6:	3307      	adds	r3, #7
   125f8:	f023 0307 	bic.w	r3, r3, #7
   125fc:	f103 0008 	add.w	r0, r3, #8
   12600:	901a      	str	r0, [sp, #104]	; 0x68
   12602:	ed93 7b00 	vldr	d7, [r3]

			if (buf0 != NULL) {
   12606:	b10f      	cbz	r7, 1260c <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
   12608:	ed84 7b00 	vstr	d7, [r4]
				}
			}
			buf += sizeof(long long);
   1260c:	3408      	adds	r4, #8
   1260e:	e75c      	b.n	124ca <cbvprintf_package+0x136>
					if (fmt[-2] == 'l') {
   12610:	f812 3c02 	ldrb.w	r3, [r2, #-2]
   12614:	2b6c      	cmp	r3, #108	; 0x6c
   12616:	d004      	beq.n	12622 <cbvprintf_package+0x28e>
				parsing = false;
   12618:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
   1261a:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
   1261e:	46c1      	mov	r9, r8
   12620:	e7d2      	b.n	125c8 <cbvprintf_package+0x234>
				parsing = false;
   12622:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
   12624:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
   12628:	46c1      	mov	r9, r8
   1262a:	e7cd      	b.n	125c8 <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
   1262c:	782b      	ldrb	r3, [r5, #0]
   1262e:	2b4c      	cmp	r3, #76	; 0x4c
   12630:	d01b      	beq.n	1266a <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
   12632:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12634:	3307      	adds	r3, #7
   12636:	f023 0307 	bic.w	r3, r3, #7
   1263a:	f103 0008 	add.w	r0, r3, #8
   1263e:	901a      	str	r0, [sp, #104]	; 0x68
   12640:	e9d3 8900 	ldrd	r8, r9, [r3]
				buf = (void *) ROUND_UP(buf, align);
   12644:	3407      	adds	r4, #7
   12646:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   1264a:	b147      	cbz	r7, 1265e <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
   1264c:	1be3      	subs	r3, r4, r7
   1264e:	3308      	adds	r3, #8
   12650:	4553      	cmp	r3, sl
   12652:	d814      	bhi.n	1267e <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
   12654:	782b      	ldrb	r3, [r5, #0]
   12656:	2b4c      	cmp	r3, #76	; 0x4c
   12658:	d014      	beq.n	12684 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
   1265a:	e9c4 8900 	strd	r8, r9, [r4]
				buf += size;
   1265e:	3408      	adds	r4, #8
				parsing = false;
   12660:	2600      	movs	r6, #0
				continue;
   12662:	f04f 0808 	mov.w	r8, #8
   12666:	46c1      	mov	r9, r8
   12668:	e72f      	b.n	124ca <cbvprintf_package+0x136>
					v.ld = va_arg(ap, long double);
   1266a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1266c:	3307      	adds	r3, #7
   1266e:	f023 0307 	bic.w	r3, r3, #7
   12672:	f103 0008 	add.w	r0, r3, #8
   12676:	901a      	str	r0, [sp, #104]	; 0x68
   12678:	e9d3 8900 	ldrd	r8, r9, [r3]
					size = sizeof(long double);
   1267c:	e7e2      	b.n	12644 <cbvprintf_package+0x2b0>
						return -ENOSPC;
   1267e:	f06f 001b 	mvn.w	r0, #27
   12682:	e0b7      	b.n	127f4 <cbvprintf_package+0x460>
						*(long double *)buf = v.ld;
   12684:	e9c4 8900 	strd	r8, r9, [r4]
   12688:	e7e9      	b.n	1265e <cbvprintf_package+0x2ca>
				parsing = false;
   1268a:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   1268c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   12690:	46c1      	mov	r9, r8
   12692:	e799      	b.n	125c8 <cbvprintf_package+0x234>
				is_str_arg = true;
   12694:	4631      	mov	r1, r6
				parsing = false;
   12696:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   12698:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   1269c:	46c1      	mov	r9, r8
   1269e:	e793      	b.n	125c8 <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
   126a0:	4604      	mov	r4, r0
   126a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   126a4:	1d19      	adds	r1, r3, #4
   126a6:	911a      	str	r1, [sp, #104]	; 0x68
   126a8:	681b      	ldr	r3, [r3, #0]
   126aa:	9302      	str	r3, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   126ac:	9b07      	ldr	r3, [sp, #28]
			if (*++fmt == '\0') {
   126ae:	4615      	mov	r5, r2
   126b0:	e698      	b.n	123e4 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   126b2:	4b5f      	ldr	r3, [pc, #380]	; (12830 <cbvprintf_package+0x49c>)
   126b4:	9a02      	ldr	r2, [sp, #8]
   126b6:	429a      	cmp	r2, r3
   126b8:	d304      	bcc.n	126c4 <cbvprintf_package+0x330>
   126ba:	4b5e      	ldr	r3, [pc, #376]	; (12834 <cbvprintf_package+0x4a0>)
   126bc:	429a      	cmp	r2, r3
   126be:	d30a      	bcc.n	126d6 <cbvprintf_package+0x342>
   126c0:	2300      	movs	r3, #0
   126c2:	e000      	b.n	126c6 <cbvprintf_package+0x332>
   126c4:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   126c6:	2b00      	cmp	r3, #0
   126c8:	f47f ae94 	bne.w	123f4 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   126cc:	9b05      	ldr	r3, [sp, #20]
   126ce:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   126d2:	2000      	movs	r0, #0
   126d4:	e693      	b.n	123fe <cbvprintf_package+0x6a>
   126d6:	2301      	movs	r3, #1
   126d8:	e7f5      	b.n	126c6 <cbvprintf_package+0x332>
						s_rw_cnt++;
   126da:	9b06      	ldr	r3, [sp, #24]
   126dc:	3301      	adds	r3, #1
   126de:	9306      	str	r3, [sp, #24]
   126e0:	e6b0      	b.n	12444 <cbvprintf_package+0xb0>
				} else if (is_ro) {
   126e2:	b110      	cbz	r0, 126ea <cbvprintf_package+0x356>
					len += 1;
   126e4:	f10a 0a01 	add.w	sl, sl, #1
   126e8:	e6ac      	b.n	12444 <cbvprintf_package+0xb0>
				} else if (rws_pos_en) {
   126ea:	9b00      	ldr	r3, [sp, #0]
   126ec:	b113      	cbz	r3, 126f4 <cbvprintf_package+0x360>
					len += 2;
   126ee:	f10a 0a02 	add.w	sl, sl, #2
   126f2:	e6a7      	b.n	12444 <cbvprintf_package+0xb0>
					len += strlen(s) + 1 + 1;
   126f4:	9802      	ldr	r0, [sp, #8]
   126f6:	f7fa f9f1 	bl	cadc <strlen>
   126fa:	1c83      	adds	r3, r0, #2
   126fc:	449a      	add	sl, r3
   126fe:	e6a1      	b.n	12444 <cbvprintf_package+0xb0>
			int v = va_arg(ap, int);
   12700:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12702:	1d18      	adds	r0, r3, #4
   12704:	901a      	str	r0, [sp, #104]	; 0x68
   12706:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
   12708:	b107      	cbz	r7, 1270c <cbvprintf_package+0x378>
				*(int *)buf = v;
   1270a:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   1270c:	3404      	adds	r4, #4
   1270e:	e6dc      	b.n	124ca <cbvprintf_package+0x136>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
   12710:	1be3      	subs	r3, r4, r7
   12712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12716:	f080 8082 	bcs.w	1281e <cbvprintf_package+0x48a>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
   1271a:	b197      	cbz	r7, 12742 <cbvprintf_package+0x3ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
   1271c:	2200      	movs	r2, #0
   1271e:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12720:	089b      	lsrs	r3, r3, #2
   12722:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
   12724:	9b00      	ldr	r3, [sp, #0]
   12726:	b183      	cbz	r3, 1274a <cbvprintf_package+0x3b6>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12728:	9b06      	ldr	r3, [sp, #24]
   1272a:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   1272c:	9b04      	ldr	r3, [sp, #16]
   1272e:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
   12730:	bb1b      	cbnz	r3, 1277a <cbvprintf_package+0x3e6>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
   12732:	9d01      	ldr	r5, [sp, #4]
   12734:	f8dd 900c 	ldr.w	r9, [sp, #12]
   12738:	f8dd b010 	ldr.w	fp, [sp, #16]
   1273c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   12740:	e03b      	b.n	127ba <cbvprintf_package+0x426>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   12742:	4453      	add	r3, sl
   12744:	f1a3 0008 	sub.w	r0, r3, #8
   12748:	e054      	b.n	127f4 <cbvprintf_package+0x460>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   1274a:	9b06      	ldr	r3, [sp, #24]
   1274c:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1274e:	e7ed      	b.n	1272c <cbvprintf_package+0x398>
		for (i = 0; i < s_idx; i++) {
   12750:	3301      	adds	r3, #1
   12752:	4298      	cmp	r0, r3
   12754:	d9ed      	bls.n	12732 <cbvprintf_package+0x39e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   12756:	f103 0240 	add.w	r2, r3, #64	; 0x40
   1275a:	446a      	add	r2, sp
   1275c:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   12760:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
   12764:	2a00      	cmp	r2, #0
   12766:	daf3      	bge.n	12750 <cbvprintf_package+0x3bc>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   12768:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   1276c:	1be2      	subs	r2, r4, r7
   1276e:	3201      	adds	r2, #1
   12770:	4592      	cmp	sl, r2
   12772:	d357      	bcc.n	12824 <cbvprintf_package+0x490>
			*buf++ = pos;
   12774:	f804 1b01 	strb.w	r1, [r4], #1
   12778:	e7ea      	b.n	12750 <cbvprintf_package+0x3bc>
		for (i = 0; i < s_idx; i++) {
   1277a:	9b01      	ldr	r3, [sp, #4]
   1277c:	9803      	ldr	r0, [sp, #12]
   1277e:	e7e8      	b.n	12752 <cbvprintf_package+0x3be>
		if (rws_pos_en) {
   12780:	9b00      	ldr	r3, [sp, #0]
   12782:	b33b      	cbz	r3, 127d4 <cbvprintf_package+0x440>
			*buf++ = str_ptr_arg[i];
   12784:	f105 0340 	add.w	r3, r5, #64	; 0x40
   12788:	446b      	add	r3, sp
   1278a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
   1278e:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
   12792:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
   12794:	1be3      	subs	r3, r4, r7
   12796:	4433      	add	r3, r6
   12798:	3301      	adds	r3, #1
   1279a:	459a      	cmp	sl, r3
   1279c:	d345      	bcc.n	1282a <cbvprintf_package+0x496>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
   1279e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   127a2:	446b      	add	r3, sp
   127a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   127a8:	f804 3b01 	strb.w	r3, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   127ac:	4632      	mov	r2, r6
   127ae:	4641      	mov	r1, r8
   127b0:	4620      	mov	r0, r4
   127b2:	f01b fd8a 	bl	2e2ca <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
   127b6:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
   127b8:	3501      	adds	r5, #1
   127ba:	45a9      	cmp	r9, r5
   127bc:	d919      	bls.n	127f2 <cbvprintf_package+0x45e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   127be:	f1bb 0f00 	cmp.w	fp, #0
   127c2:	d0dd      	beq.n	12780 <cbvprintf_package+0x3ec>
   127c4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   127c8:	446b      	add	r3, sp
   127ca:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   127ce:	2b00      	cmp	r3, #0
   127d0:	dad6      	bge.n	12780 <cbvprintf_package+0x3ec>
   127d2:	e7f1      	b.n	127b8 <cbvprintf_package+0x424>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   127d4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   127d8:	446b      	add	r3, sp
   127da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   127de:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   127e2:	2200      	movs	r2, #0
   127e4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
   127e8:	4640      	mov	r0, r8
   127ea:	f7fa f977 	bl	cadc <strlen>
   127ee:	1c46      	adds	r6, r0, #1
   127f0:	e7d0      	b.n	12794 <cbvprintf_package+0x400>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
   127f2:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   127f4:	b011      	add	sp, #68	; 0x44
   127f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
   127fa:	f06f 000d 	mvn.w	r0, #13
   127fe:	e7f9      	b.n	127f4 <cbvprintf_package+0x460>
		return -ENOSPC;
   12800:	f06f 001b 	mvn.w	r0, #27
   12804:	e7f6      	b.n	127f4 <cbvprintf_package+0x460>
			return -ENOSPC;
   12806:	f06f 001b 	mvn.w	r0, #27
   1280a:	e7f3      	b.n	127f4 <cbvprintf_package+0x460>
					return -EINVAL;
   1280c:	f06f 0015 	mvn.w	r0, #21
   12810:	e7f0      	b.n	127f4 <cbvprintf_package+0x460>
					return -EINVAL;
   12812:	f06f 0015 	mvn.w	r0, #21
   12816:	e7ed      	b.n	127f4 <cbvprintf_package+0x460>
			return -EINVAL;
   12818:	f06f 0015 	mvn.w	r0, #21
   1281c:	e7ea      	b.n	127f4 <cbvprintf_package+0x460>
		return -EINVAL;
   1281e:	f06f 0015 	mvn.w	r0, #21
   12822:	e7e7      	b.n	127f4 <cbvprintf_package+0x460>
				return -ENOSPC;
   12824:	f06f 001b 	mvn.w	r0, #27
   12828:	e7e4      	b.n	127f4 <cbvprintf_package+0x460>
			return -ENOSPC;
   1282a:	f06f 001b 	mvn.w	r0, #27
   1282e:	e7e1      	b.n	127f4 <cbvprintf_package+0x460>
   12830:	0002eaec 	.word	0x0002eaec
   12834:	00031d7c 	.word	0x00031d7c

00012838 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1283c:	b097      	sub	sp, #92	; 0x5c
   1283e:	af00      	add	r7, sp, #0
   12840:	4683      	mov	fp, r0
   12842:	61ba      	str	r2, [r7, #24]
   12844:	60fb      	str	r3, [r7, #12]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   12846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1284a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1284e:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12850:	6139      	str	r1, [r7, #16]
   12852:	b151      	cbz	r1, 1286a <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   12854:	f89b 6002 	ldrb.w	r6, [fp, #2]
   12858:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
   1285a:	b156      	cbz	r6, 12872 <cbprintf_package_convert+0x3a>
   1285c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12860:	f013 0f01 	tst.w	r3, #1
   12864:	d111      	bne.n	1288a <cbprintf_package_convert+0x52>
   12866:	2300      	movs	r3, #0
   12868:	e004      	b.n	12874 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   1286a:	f015 f8f1 	bl	27a50 <get_package_len>
   1286e:	6138      	str	r0, [r7, #16]
   12870:	e7f0      	b.n	12854 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
   12872:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   12874:	f89b 2003 	ldrb.w	r2, [fp, #3]
   12878:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
   1287a:	b142      	cbz	r2, 1288e <cbprintf_package_convert+0x56>
   1287c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   12880:	f012 0f02 	tst.w	r2, #2
   12884:	d122      	bne.n	128cc <cbprintf_package_convert+0x94>
   12886:	2200      	movs	r2, #0
   12888:	e002      	b.n	12890 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
   1288a:	2301      	movs	r3, #1
   1288c:	e7f2      	b.n	12874 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
   1288e:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   12890:	b902      	cbnz	r2, 12894 <cbprintf_package_convert+0x5c>
   12892:	b1eb      	cbz	r3, 128d0 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   12894:	f89b 5000 	ldrb.w	r5, [fp]
   12898:	00aa      	lsls	r2, r5, #2
   1289a:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   1289c:	f8db 2004 	ldr.w	r2, [fp, #4]
   128a0:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
   128a2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   128a6:	69ba      	ldr	r2, [r7, #24]
   128a8:	b1f2      	cbz	r2, 128e8 <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   128aa:	2b00      	cmp	r3, #0
   128ac:	f040 8112 	bne.w	12ad4 <cbprintf_package_convert+0x29c>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   128b0:	f1b9 0f00 	cmp.w	r9, #0
   128b4:	f000 811d 	beq.w	12af2 <cbprintf_package_convert+0x2ba>
   128b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   128bc:	f013 0f04 	tst.w	r3, #4
   128c0:	f040 811b 	bne.w	12afa <cbprintf_package_convert+0x2c2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   128c4:	2000      	movs	r0, #0
		keep_cnt = 0;
   128c6:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   128c8:	4606      	mov	r6, r0
   128ca:	e107      	b.n	12adc <cbprintf_package_convert+0x2a4>
	rw_cpy = rws_nbr > 0 &&
   128cc:	2201      	movs	r2, #1
   128ce:	e7df      	b.n	12890 <cbprintf_package_convert+0x58>
		if (cb) {
   128d0:	69bb      	ldr	r3, [r7, #24]
   128d2:	b11b      	cbz	r3, 128dc <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
   128d4:	68fa      	ldr	r2, [r7, #12]
   128d6:	6939      	ldr	r1, [r7, #16]
   128d8:	4658      	mov	r0, fp
   128da:	4798      	blx	r3
		return in_len;
   128dc:	693c      	ldr	r4, [r7, #16]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   128de:	4620      	mov	r0, r4
   128e0:	375c      	adds	r7, #92	; 0x5c
   128e2:	46bd      	mov	sp, r7
   128e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   128e8:	693c      	ldr	r4, [r7, #16]
		if (ro_cpy) {
   128ea:	bb2b      	cbnz	r3, 12938 <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   128ec:	f1b9 0f00 	cmp.w	r9, #0
   128f0:	d038      	beq.n	12964 <cbprintf_package_convert+0x12c>
   128f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   128f6:	f013 0304 	ands.w	r3, r3, #4
   128fa:	613b      	str	r3, [r7, #16]
   128fc:	d027      	beq.n	1294e <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
   128fe:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   12900:	2300      	movs	r3, #0
   12902:	613b      	str	r3, [r7, #16]
   12904:	e023      	b.n	1294e <cbprintf_package_convert+0x116>
				out_len += len;
   12906:	4404      	add	r4, r0
				str_pos++;
   12908:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
   1290a:	3601      	adds	r6, #1
   1290c:	454e      	cmp	r6, r9
   1290e:	d21a      	bcs.n	12946 <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
   12910:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   12912:	2300      	movs	r3, #0
   12914:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   12918:	4619      	mov	r1, r3
   1291a:	69b8      	ldr	r0, [r7, #24]
   1291c:	f015 f8ad 	bl	27a7a <append_string>
				if (strl && strl_cnt < strl_len) {
   12920:	f1ba 0f00 	cmp.w	sl, #0
   12924:	d0ef      	beq.n	12906 <cbprintf_package_convert+0xce>
   12926:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1292a:	4598      	cmp	r8, r3
   1292c:	d2eb      	bcs.n	12906 <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
   1292e:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
   12932:	f108 0801 	add.w	r8, r8, #1
   12936:	e7e6      	b.n	12906 <cbprintf_package_convert+0xce>
			for (int i = 0; i < ros_nbr; i++) {
   12938:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
   1293a:	46b0      	mov	r8, r6
   1293c:	f8c7 a01c 	str.w	sl, [r7, #28]
   12940:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
   12944:	e7e2      	b.n	1290c <cbprintf_package_convert+0xd4>
   12946:	f8c7 8010 	str.w	r8, [r7, #16]
   1294a:	f8d7 a01c 	ldr.w	sl, [r7, #28]
		bool drop_ro_str_pos = !(flags &
   1294e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12952:	f003 0305 	and.w	r3, r3, #5
   12956:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
   12958:	f04f 0800 	mov.w	r8, #0
   1295c:	46a1      	mov	r9, r4
   1295e:	f8c7 b01c 	str.w	fp, [r7, #28]
   12962:	e0a1      	b.n	12aa8 <cbprintf_package_convert+0x270>
	size_t strl_cnt = 0;
   12964:	f8c7 9010 	str.w	r9, [r7, #16]
   12968:	e7f1      	b.n	1294e <cbprintf_package_convert+0x116>
   1296a:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   1296c:	6a3b      	ldr	r3, [r7, #32]
   1296e:	b97b      	cbnz	r3, 12990 <cbprintf_package_convert+0x158>
			if (is_ro) {
   12970:	2d00      	cmp	r5, #0
   12972:	d07b      	beq.n	12a6c <cbprintf_package_convert+0x234>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12974:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12978:	f013 0f01 	tst.w	r3, #1
   1297c:	d17b      	bne.n	12a76 <cbprintf_package_convert+0x23e>
					out_len -= drop_ro_str_pos ? 2 : 1;
   1297e:	68fb      	ldr	r3, [r7, #12]
   12980:	2b00      	cmp	r3, #0
   12982:	d171      	bne.n	12a68 <cbprintf_package_convert+0x230>
   12984:	2302      	movs	r3, #2
   12986:	eba9 0903 	sub.w	r9, r9, r3
   1298a:	e08a      	b.n	12aa2 <cbprintf_package_convert+0x26a>
   1298c:	2501      	movs	r5, #1
   1298e:	e7ed      	b.n	1296c <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12990:	4659      	mov	r1, fp
   12992:	6978      	ldr	r0, [r7, #20]
   12994:	f015 f8b8 	bl	27b08 <is_ptr>
   12998:	2800      	cmp	r0, #0
   1299a:	d0e9      	beq.n	12970 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   1299c:	466c      	mov	r4, sp
   1299e:	2300      	movs	r3, #0
   129a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   129a4:	2302      	movs	r3, #2
   129a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   129aa:	b08a      	sub	sp, #40	; 0x28
   129ac:	4669      	mov	r1, sp
   129ae:	f111 0210 	adds.w	r2, r1, #16
   129b2:	d039      	beq.n	12a28 <cbprintf_package_convert+0x1f0>
   129b4:	2512      	movs	r5, #18
   129b6:	b11a      	cbz	r2, 129c0 <cbprintf_package_convert+0x188>
   129b8:	2d04      	cmp	r5, #4
   129ba:	dd01      	ble.n	129c0 <cbprintf_package_convert+0x188>
   129bc:	4bb1      	ldr	r3, [pc, #708]	; (12c84 <cbprintf_package_convert+0x44c>)
   129be:	614b      	str	r3, [r1, #20]
   129c0:	2300      	movs	r3, #0
   129c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   129c6:	2302      	movs	r3, #2
   129c8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   129cc:	bb7a      	cbnz	r2, 12a2e <cbprintf_package_convert+0x1f6>
   129ce:	2d11      	cmp	r5, #17
   129d0:	dd47      	ble.n	12a62 <cbprintf_package_convert+0x22a>
   129d2:	2312      	movs	r3, #18
   129d4:	b162      	cbz	r2, 129f0 <cbprintf_package_convert+0x1b8>
   129d6:	2004      	movs	r0, #4
   129d8:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   129dc:	2000      	movs	r0, #0
   129de:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   129e2:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   129e6:	2001      	movs	r0, #1
   129e8:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   129ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   129ee:	6108      	str	r0, [r1, #16]
   129f0:	f36f 0a00 	bfc	sl, #0, #1
   129f4:	f36f 0a41 	bfc	sl, #1, #1
   129f8:	f36f 0a82 	bfc	sl, #2, #1
   129fc:	f36f 0ac5 	bfc	sl, #3, #3
   12a00:	2102      	movs	r1, #2
   12a02:	f361 1a88 	bfi	sl, r1, #6, #3
   12a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12a0a:	f363 2a52 	bfi	sl, r3, #9, #10
   12a0e:	f36f 4ade 	bfc	sl, #19, #12
   12a12:	f36f 7adf 	bfc	sl, #31, #1
   12a16:	2300      	movs	r3, #0
   12a18:	4651      	mov	r1, sl
   12a1a:	489b      	ldr	r0, [pc, #620]	; (12c88 <cbprintf_package_convert+0x450>)
   12a1c:	f016 f9d1 	bl	28dc2 <z_impl_z_log_msg_static_create>
   12a20:	46a5      	mov	sp, r4
				out_len -= 2;
   12a22:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   12a26:	e03c      	b.n	12aa2 <cbprintf_package_convert+0x26a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12a28:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   12a2c:	e7c3      	b.n	129b6 <cbprintf_package_convert+0x17e>
   12a2e:	462b      	mov	r3, r5
   12a30:	2d08      	cmp	r5, #8
   12a32:	dd01      	ble.n	12a38 <cbprintf_package_convert+0x200>
   12a34:	6978      	ldr	r0, [r7, #20]
   12a36:	6188      	str	r0, [r1, #24]
   12a38:	2b0c      	cmp	r3, #12
   12a3a:	dd01      	ble.n	12a40 <cbprintf_package_convert+0x208>
   12a3c:	f8c1 b01c 	str.w	fp, [r1, #28]
   12a40:	f101 0320 	add.w	r3, r1, #32
   12a44:	2000      	movs	r0, #0
   12a46:	e009      	b.n	12a5c <cbprintf_package_convert+0x224>
   12a48:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   12a4c:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   12a50:	44f4      	add	ip, lr
   12a52:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   12a56:	f803 cb01 	strb.w	ip, [r3], #1
   12a5a:	3001      	adds	r0, #1
   12a5c:	2801      	cmp	r0, #1
   12a5e:	d9f3      	bls.n	12a48 <cbprintf_package_convert+0x210>
   12a60:	e7b5      	b.n	129ce <cbprintf_package_convert+0x196>
   12a62:	f06f 031b 	mvn.w	r3, #27
   12a66:	e7b5      	b.n	129d4 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12a68:	2301      	movs	r3, #1
   12a6a:	e78c      	b.n	12986 <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12a70:	f013 0f02 	tst.w	r3, #2
   12a74:	d015      	beq.n	12aa2 <cbprintf_package_convert+0x26a>
				len = append_string(cb, NULL, str, 0);
   12a76:	2300      	movs	r3, #0
   12a78:	4622      	mov	r2, r4
   12a7a:	4619      	mov	r1, r3
   12a7c:	69b8      	ldr	r0, [r7, #24]
   12a7e:	f014 fffc 	bl	27a7a <append_string>
				if (strl && strl_cnt < strl_len) {
   12a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   12a86:	b153      	cbz	r3, 12a9e <cbprintf_package_convert+0x266>
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   12a8e:	4293      	cmp	r3, r2
   12a90:	d205      	bcs.n	12a9e <cbprintf_package_convert+0x266>
					strl[strl_cnt++] = (uint16_t)len;
   12a92:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   12a96:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   12a9a:	3301      	adds	r3, #1
   12a9c:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   12a9e:	3801      	subs	r0, #1
   12aa0:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
   12aa2:	f108 0801 	add.w	r8, r8, #1
			uint8_t arg_pos = *str_pos++;
   12aa6:	4635      	mov	r5, r6
		for (int i = 0; i < rws_nbr; i++) {
   12aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12aaa:	4598      	cmp	r8, r3
   12aac:	d210      	bcs.n	12ad0 <cbprintf_package_convert+0x298>
			uint8_t arg_idx = *str_pos++;
   12aae:	462e      	mov	r6, r5
   12ab0:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
   12ab4:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   12ab6:	69fa      	ldr	r2, [r7, #28]
   12ab8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   12abc:	4b73      	ldr	r3, [pc, #460]	; (12c8c <cbprintf_package_convert+0x454>)
   12abe:	429c      	cmp	r4, r3
   12ac0:	f4ff af53 	bcc.w	1296a <cbprintf_package_convert+0x132>
   12ac4:	4b72      	ldr	r3, [pc, #456]	; (12c90 <cbprintf_package_convert+0x458>)
   12ac6:	429c      	cmp	r4, r3
   12ac8:	f4ff af60 	bcc.w	1298c <cbprintf_package_convert+0x154>
   12acc:	2500      	movs	r5, #0
   12ace:	e74d      	b.n	1296c <cbprintf_package_convert+0x134>
   12ad0:	464c      	mov	r4, r9
   12ad2:	e704      	b.n	128de <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
   12ad4:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   12ad8:	2300      	movs	r3, #0
   12ada:	61fb      	str	r3, [r7, #28]
	if (dst) {
   12adc:	b118      	cbz	r0, 12ae6 <cbprintf_package_convert+0x2ae>
   12ade:	464a      	mov	r2, r9
   12ae0:	4629      	mov	r1, r5
   12ae2:	f01b fbf2 	bl	2e2ca <memcpy>
	str_pos += ros_nbr;
   12ae6:	444d      	add	r5, r9
	for (int i = 0; i < rws_nbr; i++) {
   12ae8:	f04f 0800 	mov.w	r8, #0
   12aec:	f8c7 9004 	str.w	r9, [r7, #4]
   12af0:	e01e      	b.n	12b30 <cbprintf_package_convert+0x2f8>
		dst = NULL;
   12af2:	2000      	movs	r0, #0
		keep_cnt = 0;
   12af4:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
   12af6:	4606      	mov	r6, r0
   12af8:	e7f0      	b.n	12adc <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   12afa:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
   12afc:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   12b00:	2600      	movs	r6, #0
   12b02:	e7eb      	b.n	12adc <cbprintf_package_convert+0x2a4>
   12b04:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12b06:	6a3b      	ldr	r3, [r7, #32]
   12b08:	bb33      	cbnz	r3, 12b58 <cbprintf_package_convert+0x320>
		if (is_ro) {
   12b0a:	2d00      	cmp	r5, #0
   12b0c:	d03b      	beq.n	12b86 <cbprintf_package_convert+0x34e>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12b12:	f013 0f01 	tst.w	r3, #1
   12b16:	d026      	beq.n	12b66 <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12b18:	1c73      	adds	r3, r6, #1
   12b1a:	f106 0230 	add.w	r2, r6, #48	; 0x30
   12b1e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12b22:	1856      	adds	r6, r2, r1
   12b24:	f806 9c14 	strb.w	r9, [r6, #-20]
   12b28:	b2de      	uxtb	r6, r3
	for (int i = 0; i < rws_nbr; i++) {
   12b2a:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
   12b2e:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
   12b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b32:	4598      	cmp	r8, r3
   12b34:	d249      	bcs.n	12bca <cbprintf_package_convert+0x392>
		uint8_t arg_idx = *str_pos++;
   12b36:	462c      	mov	r4, r5
   12b38:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
   12b3c:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   12b40:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   12b44:	4a51      	ldr	r2, [pc, #324]	; (12c8c <cbprintf_package_convert+0x454>)
   12b46:	4293      	cmp	r3, r2
   12b48:	d3dc      	bcc.n	12b04 <cbprintf_package_convert+0x2cc>
   12b4a:	4a51      	ldr	r2, [pc, #324]	; (12c90 <cbprintf_package_convert+0x458>)
   12b4c:	4293      	cmp	r3, r2
   12b4e:	d301      	bcc.n	12b54 <cbprintf_package_convert+0x31c>
   12b50:	2500      	movs	r5, #0
   12b52:	e7d8      	b.n	12b06 <cbprintf_package_convert+0x2ce>
   12b54:	2501      	movs	r5, #1
   12b56:	e7d6      	b.n	12b06 <cbprintf_package_convert+0x2ce>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12b58:	4651      	mov	r1, sl
   12b5a:	6978      	ldr	r0, [r7, #20]
   12b5c:	f014 ffd4 	bl	27b08 <is_ptr>
   12b60:	2800      	cmp	r0, #0
   12b62:	d0d2      	beq.n	12b0a <cbprintf_package_convert+0x2d2>
   12b64:	e7e1      	b.n	12b2a <cbprintf_package_convert+0x2f2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12b6a:	f013 0f04 	tst.w	r3, #4
   12b6e:	d0dc      	beq.n	12b2a <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_pos;
   12b70:	69fa      	ldr	r2, [r7, #28]
   12b72:	1c53      	adds	r3, r2, #1
   12b74:	3230      	adds	r2, #48	; 0x30
   12b76:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12b7a:	440a      	add	r2, r1
   12b7c:	f802 9c24 	strb.w	r9, [r2, #-36]
   12b80:	b2db      	uxtb	r3, r3
   12b82:	61fb      	str	r3, [r7, #28]
   12b84:	e7d1      	b.n	12b2a <cbprintf_package_convert+0x2f2>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12b8a:	f013 0f02 	tst.w	r3, #2
   12b8e:	d009      	beq.n	12ba4 <cbprintf_package_convert+0x36c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12b90:	1c73      	adds	r3, r6, #1
   12b92:	f106 0230 	add.w	r2, r6, #48	; 0x30
   12b96:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12b9a:	1856      	adds	r6, r2, r1
   12b9c:	f806 9c14 	strb.w	r9, [r6, #-20]
   12ba0:	b2de      	uxtb	r6, r3
   12ba2:	e7c2      	b.n	12b2a <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_idx;
   12ba4:	69f9      	ldr	r1, [r7, #28]
   12ba6:	1c4b      	adds	r3, r1, #1
   12ba8:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12bac:	f107 0028 	add.w	r0, r7, #40	; 0x28
   12bb0:	4402      	add	r2, r0
   12bb2:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   12bb6:	1c8a      	adds	r2, r1, #2
   12bb8:	b2d2      	uxtb	r2, r2
   12bba:	61fa      	str	r2, [r7, #28]
   12bbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
   12bc0:	fa52 f383 	uxtab	r3, r2, r3
   12bc4:	f803 9c24 	strb.w	r9, [r3, #-36]
   12bc8:	e7af      	b.n	12b2a <cbprintf_package_convert+0x2f2>
	out_desc.len = in_desc->len;
   12bca:	f8d7 9004 	ldr.w	r9, [r7, #4]
   12bce:	f89b 3000 	ldrb.w	r3, [fp]
   12bd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12bd6:	f89b 3001 	ldrb.w	r3, [fp, #1]
   12bda:	4433      	add	r3, r6
   12bdc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12be4:	f013 0f02 	tst.w	r3, #2
   12be8:	d10e      	bne.n	12c08 <cbprintf_package_convert+0x3d0>
   12bea:	69fb      	ldr	r3, [r7, #28]
   12bec:	f3c3 0347 	ubfx	r3, r3, #1, #8
   12bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12bf8:	f013 0f01 	tst.w	r3, #1
   12bfc:	d106      	bne.n	12c0c <cbprintf_package_convert+0x3d4>
   12bfe:	f013 0f04 	tst.w	r3, #4
   12c02:	d13d      	bne.n	12c80 <cbprintf_package_convert+0x448>
   12c04:	2300      	movs	r3, #0
   12c06:	e002      	b.n	12c0e <cbprintf_package_convert+0x3d6>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12c08:	2300      	movs	r3, #0
   12c0a:	e7f1      	b.n	12bf0 <cbprintf_package_convert+0x3b8>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12c0c:	2300      	movs	r3, #0
   12c0e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   12c12:	f8db 0000 	ldr.w	r0, [fp]
   12c16:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   12c18:	6d78      	ldr	r0, [r7, #84]	; 0x54
   12c1a:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
   12c1e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
   12c22:	4652      	mov	r2, sl
   12c24:	68b9      	ldr	r1, [r7, #8]
   12c26:	4658      	mov	r0, fp
   12c28:	69bb      	ldr	r3, [r7, #24]
   12c2a:	4798      	blx	r3
	if (rv < 0) {
   12c2c:	1e04      	subs	r4, r0, #0
   12c2e:	f6ff ae56 	blt.w	128de <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
   12c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12c34:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12c38:	4652      	mov	r2, sl
   12c3a:	69f9      	ldr	r1, [r7, #28]
   12c3c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   12c40:	69bb      	ldr	r3, [r7, #24]
   12c42:	4798      	blx	r3
	if (rv < 0) {
   12c44:	2800      	cmp	r0, #0
   12c46:	db56      	blt.n	12cf6 <cbprintf_package_convert+0x4be>
	out_len += rv;
   12c48:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   12c4c:	68b9      	ldr	r1, [r7, #8]
   12c4e:	4449      	add	r1, r9
   12c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12c52:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   12c56:	4652      	mov	r2, sl
   12c58:	6938      	ldr	r0, [r7, #16]
   12c5a:	1a41      	subs	r1, r0, r1
   12c5c:	4628      	mov	r0, r5
   12c5e:	69bb      	ldr	r3, [r7, #24]
   12c60:	4798      	blx	r3
	if (rv < 0) {
   12c62:	1e04      	subs	r4, r0, #0
   12c64:	f6ff ae3b 	blt.w	128de <cbprintf_package_convert+0xa6>
	out_len += rv;
   12c68:	eb08 0504 	add.w	r5, r8, r4
	for (int i = 0; i < scpy_cnt; i++) {
   12c6c:	f04f 0800 	mov.w	r8, #0
   12c70:	627e      	str	r6, [r7, #36]	; 0x24
   12c72:	f8c7 b020 	str.w	fp, [r7, #32]
   12c76:	69be      	ldr	r6, [r7, #24]
   12c78:	46d1      	mov	r9, sl
   12c7a:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
   12c7e:	e01e      	b.n	12cbe <cbprintf_package_convert+0x486>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12c80:	69fb      	ldr	r3, [r7, #28]
   12c82:	e7c4      	b.n	12c0e <cbprintf_package_convert+0x3d6>
   12c84:	0002f3d8 	.word	0x0002f3d8
   12c88:	0002eed8 	.word	0x0002eed8
   12c8c:	0002eaec 	.word	0x0002eaec
   12c90:	00031d7c 	.word	0x00031d7c
		uint16_t str_len = strl ? strl[i] : 0;
   12c94:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   12c98:	464a      	mov	r2, r9
   12c9a:	2101      	movs	r1, #1
   12c9c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   12ca0:	47b0      	blx	r6
		if (rv < 0) {
   12ca2:	2800      	cmp	r0, #0
   12ca4:	db29      	blt.n	12cfa <cbprintf_package_convert+0x4c2>
		out_len += rv;
   12ca6:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
   12ca8:	4653      	mov	r3, sl
   12caa:	4622      	mov	r2, r4
   12cac:	4649      	mov	r1, r9
   12cae:	4630      	mov	r0, r6
   12cb0:	f014 fee3 	bl	27a7a <append_string>
		if (rv < 0) {
   12cb4:	2800      	cmp	r0, #0
   12cb6:	db22      	blt.n	12cfe <cbprintf_package_convert+0x4c6>
		out_len += rv;
   12cb8:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   12cba:	f108 0801 	add.w	r8, r8, #1
   12cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cc0:	4598      	cmp	r8, r3
   12cc2:	da11      	bge.n	12ce8 <cbprintf_package_convert+0x4b0>
		uint8_t loc = cpy_str_pos[i];
   12cc4:	f108 0330 	add.w	r3, r8, #48	; 0x30
   12cc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   12ccc:	4413      	add	r3, r2
   12cce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   12cd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   12cd6:	6a3a      	ldr	r2, [r7, #32]
   12cd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12cdc:	f1bb 0f00 	cmp.w	fp, #0
   12ce0:	d0d8      	beq.n	12c94 <cbprintf_package_convert+0x45c>
   12ce2:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
   12ce6:	e7d7      	b.n	12c98 <cbprintf_package_convert+0x460>
	(void)cb(NULL, 0, ctx);
   12ce8:	68fa      	ldr	r2, [r7, #12]
   12cea:	2100      	movs	r1, #0
   12cec:	4608      	mov	r0, r1
   12cee:	69bb      	ldr	r3, [r7, #24]
   12cf0:	4798      	blx	r3
	return out_len;
   12cf2:	462c      	mov	r4, r5
   12cf4:	e5f3      	b.n	128de <cbprintf_package_convert+0xa6>
		return rv;
   12cf6:	4604      	mov	r4, r0
   12cf8:	e5f1      	b.n	128de <cbprintf_package_convert+0xa6>
   12cfa:	4604      	mov	r4, r0
   12cfc:	e5ef      	b.n	128de <cbprintf_package_convert+0xa6>
   12cfe:	4604      	mov	r4, r0
   12d00:	e5ed      	b.n	128de <cbprintf_package_convert+0xa6>
   12d02:	bf00      	nop

00012d04 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   12d04:	4b01      	ldr	r3, [pc, #4]	; (12d0c <__printk_hook_install+0x8>)
   12d06:	6018      	str	r0, [r3, #0]
}
   12d08:	4770      	bx	lr
   12d0a:	bf00      	nop
   12d0c:	2000059c 	.word	0x2000059c

00012d10 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12d10:	b510      	push	{r4, lr}
   12d12:	b086      	sub	sp, #24
   12d14:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   12d16:	9003      	str	r0, [sp, #12]
   12d18:	9104      	str	r1, [sp, #16]
   12d1a:	2100      	movs	r1, #0
   12d1c:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12d1e:	9100      	str	r1, [sp, #0]
   12d20:	a903      	add	r1, sp, #12
   12d22:	4806      	ldr	r0, [pc, #24]	; (12d3c <vsnprintk+0x2c>)
   12d24:	f000 fb84 	bl	13430 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12d28:	9b05      	ldr	r3, [sp, #20]
   12d2a:	9a04      	ldr	r2, [sp, #16]
   12d2c:	4293      	cmp	r3, r2
   12d2e:	da01      	bge.n	12d34 <vsnprintk+0x24>
		str[ctx.count] = '\0';
   12d30:	2200      	movs	r2, #0
   12d32:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   12d34:	9805      	ldr	r0, [sp, #20]
   12d36:	b006      	add	sp, #24
   12d38:	bd10      	pop	{r4, pc}
   12d3a:	bf00      	nop
   12d3c:	00027b5b 	.word	0x00027b5b

00012d40 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d44:	b083      	sub	sp, #12
   12d46:	4604      	mov	r4, r0
   12d48:	4608      	mov	r0, r1
   12d4a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12d4c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12d4e:	f013 0f08 	tst.w	r3, #8
   12d52:	d105      	bne.n	12d60 <process_event+0x20>
   12d54:	f003 0607 	and.w	r6, r3, #7
	list->head = NULL;
   12d58:	2300      	movs	r3, #0
   12d5a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   12d5c:	9301      	str	r3, [sp, #4]
}
   12d5e:	e055      	b.n	12e0c <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   12d60:	2901      	cmp	r1, #1
   12d62:	d009      	beq.n	12d78 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12d64:	f043 0320 	orr.w	r3, r3, #32
   12d68:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12d6a:	f385 8811 	msr	BASEPRI, r5
   12d6e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12d72:	b003      	add	sp, #12
   12d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12d78:	f043 0310 	orr.w	r3, r3, #16
   12d7c:	8323      	strh	r3, [r4, #24]
   12d7e:	e7f4      	b.n	12d6a <process_event+0x2a>
			evt = process_recheck(mgr);
   12d80:	4620      	mov	r0, r4
   12d82:	f015 f95c 	bl	2803e <process_recheck>
   12d86:	e043      	b.n	12e10 <process_event+0xd0>
			res = mgr->last_res;
   12d88:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   12d8c:	464a      	mov	r2, r9
   12d8e:	4669      	mov	r1, sp
   12d90:	4620      	mov	r0, r4
   12d92:	f015 f96d 	bl	28070 <process_complete>
		onoff_transition_fn transit = NULL;
   12d96:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12d9a:	8b23      	ldrh	r3, [r4, #24]
   12d9c:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12da0:	42b7      	cmp	r7, r6
   12da2:	d069      	beq.n	12e78 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12da4:	68a2      	ldr	r2, [r4, #8]
   12da6:	2a00      	cmp	r2, #0
   12da8:	d066      	beq.n	12e78 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12daa:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12dac:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   12db0:	8323      	strh	r3, [r4, #24]
   12db2:	f385 8811 	msr	BASEPRI, r5
   12db6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12dba:	2a00      	cmp	r2, #0
   12dbc:	d164      	bne.n	12e88 <process_event+0x148>
   12dbe:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   12dc0:	b12b      	cbz	r3, 12dce <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   12dc2:	464b      	mov	r3, r9
   12dc4:	463a      	mov	r2, r7
   12dc6:	4669      	mov	r1, sp
   12dc8:	4620      	mov	r0, r4
   12dca:	f015 f9ca 	bl	28162 <notify_all>
			if (transit != NULL) {
   12dce:	f1b8 0f00 	cmp.w	r8, #0
   12dd2:	d002      	beq.n	12dda <process_event+0x9a>
				transit(mgr, transition_complete);
   12dd4:	4934      	ldr	r1, [pc, #208]	; (12ea8 <process_event+0x168>)
   12dd6:	4620      	mov	r0, r4
   12dd8:	47c0      	blx	r8
	__asm__ volatile(
   12dda:	f04f 0340 	mov.w	r3, #64	; 0x40
   12dde:	f3ef 8511 	mrs	r5, BASEPRI
   12de2:	f383 8812 	msr	BASEPRI_MAX, r3
   12de6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12dea:	8b23      	ldrh	r3, [r4, #24]
   12dec:	f023 0308 	bic.w	r3, r3, #8
   12df0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12df2:	8b23      	ldrh	r3, [r4, #24]
   12df4:	f013 0f10 	tst.w	r3, #16
   12df8:	d04c      	beq.n	12e94 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12dfa:	f023 0310 	bic.w	r3, r3, #16
   12dfe:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12e00:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12e02:	8b26      	ldrh	r6, [r4, #24]
   12e04:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   12e08:	2800      	cmp	r0, #0
   12e0a:	d0ae      	beq.n	12d6a <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   12e0c:	2802      	cmp	r0, #2
   12e0e:	d0b7      	beq.n	12d80 <process_event+0x40>
		if (evt == EVT_NOP) {
   12e10:	2800      	cmp	r0, #0
   12e12:	d0aa      	beq.n	12d6a <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   12e14:	3801      	subs	r0, #1
   12e16:	2804      	cmp	r0, #4
   12e18:	d82a      	bhi.n	12e70 <process_event+0x130>
   12e1a:	a301      	add	r3, pc, #4	; (adr r3, 12e20 <process_event+0xe0>)
   12e1c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   12e20:	00012d89 	.word	0x00012d89
   12e24:	00012e71 	.word	0x00012e71
   12e28:	00012e35 	.word	0x00012e35
   12e2c:	00012e49 	.word	0x00012e49
   12e30:	00012e5d 	.word	0x00012e5d
			transit = mgr->transitions->start;
   12e34:	6923      	ldr	r3, [r4, #16]
   12e36:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   12e3a:	2106      	movs	r1, #6
   12e3c:	4620      	mov	r0, r4
   12e3e:	f015 f8d4 	bl	27fea <set_state>
		res = 0;
   12e42:	f04f 0900 	mov.w	r9, #0
   12e46:	e7a8      	b.n	12d9a <process_event+0x5a>
			transit = mgr->transitions->stop;
   12e48:	6923      	ldr	r3, [r4, #16]
   12e4a:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   12e4e:	2104      	movs	r1, #4
   12e50:	4620      	mov	r0, r4
   12e52:	f015 f8ca 	bl	27fea <set_state>
		res = 0;
   12e56:	f04f 0900 	mov.w	r9, #0
   12e5a:	e79e      	b.n	12d9a <process_event+0x5a>
			transit = mgr->transitions->reset;
   12e5c:	6923      	ldr	r3, [r4, #16]
   12e5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   12e62:	2105      	movs	r1, #5
   12e64:	4620      	mov	r0, r4
   12e66:	f015 f8c0 	bl	27fea <set_state>
		res = 0;
   12e6a:	f04f 0900 	mov.w	r9, #0
   12e6e:	e794      	b.n	12d9a <process_event+0x5a>
		if (evt == EVT_NOP) {
   12e70:	f04f 0800 	mov.w	r8, #0
   12e74:	46c1      	mov	r9, r8
   12e76:	e790      	b.n	12d9a <process_event+0x5a>
   12e78:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   12e7a:	b10a      	cbz	r2, 12e80 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12e7c:	2200      	movs	r2, #0
   12e7e:	e795      	b.n	12dac <process_event+0x6c>
		    || (transit != NULL)) {
   12e80:	f1b8 0f00 	cmp.w	r8, #0
   12e84:	d192      	bne.n	12dac <process_event+0x6c>
   12e86:	e7b4      	b.n	12df2 <process_event+0xb2>
				notify_monitors(mgr, state, res);
   12e88:	464a      	mov	r2, r9
   12e8a:	4639      	mov	r1, r7
   12e8c:	4620      	mov	r0, r4
   12e8e:	f015 f8b4 	bl	27ffa <notify_monitors>
   12e92:	e794      	b.n	12dbe <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12e94:	f013 0f20 	tst.w	r3, #32
   12e98:	d004      	beq.n	12ea4 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12e9a:	f023 0320 	bic.w	r3, r3, #32
   12e9e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   12ea0:	2002      	movs	r0, #2
   12ea2:	e7ae      	b.n	12e02 <process_event+0xc2>
		evt = EVT_NOP;
   12ea4:	2000      	movs	r0, #0
   12ea6:	e7ac      	b.n	12e02 <process_event+0xc2>
   12ea8:	00028191 	.word	0x00028191

00012eac <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   12eac:	4684      	mov	ip, r0
	const char *sp = *str;
   12eae:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   12eb0:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   12eb2:	e006      	b.n	12ec2 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   12eb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   12eb8:	3201      	adds	r2, #1
   12eba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   12ebe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12ec2:	7813      	ldrb	r3, [r2, #0]
   12ec4:	4903      	ldr	r1, [pc, #12]	; (12ed4 <extract_decimal+0x28>)
   12ec6:	5cc9      	ldrb	r1, [r1, r3]
   12ec8:	f011 0f04 	tst.w	r1, #4
   12ecc:	d1f2      	bne.n	12eb4 <extract_decimal+0x8>
	}
	*str = sp;
   12ece:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
   12ed2:	4770      	bx	lr
   12ed4:	00031ad1 	.word	0x00031ad1

00012ed8 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   12ed8:	4684      	mov	ip, r0
   12eda:	4608      	mov	r0, r1
	bool loop = true;
   12edc:	2201      	movs	r2, #1
   12ede:	e026      	b.n	12f2e <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   12ee0:	f89c 3000 	ldrb.w	r3, [ip]
   12ee4:	f043 0304 	orr.w	r3, r3, #4
   12ee8:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   12eec:	b1f2      	cbz	r2, 12f2c <extract_flags+0x54>
			++sp;
   12eee:	3001      	adds	r0, #1
   12ef0:	e01c      	b.n	12f2c <extract_flags+0x54>
			conv->flag_plus = true;
   12ef2:	f89c 3000 	ldrb.w	r3, [ip]
   12ef6:	f043 0308 	orr.w	r3, r3, #8
   12efa:	f88c 3000 	strb.w	r3, [ip]
			break;
   12efe:	e7f5      	b.n	12eec <extract_flags+0x14>
			conv->flag_space = true;
   12f00:	f89c 3000 	ldrb.w	r3, [ip]
   12f04:	f043 0310 	orr.w	r3, r3, #16
   12f08:	f88c 3000 	strb.w	r3, [ip]
			break;
   12f0c:	e7ee      	b.n	12eec <extract_flags+0x14>
			conv->flag_hash = true;
   12f0e:	f89c 3000 	ldrb.w	r3, [ip]
   12f12:	f043 0320 	orr.w	r3, r3, #32
   12f16:	f88c 3000 	strb.w	r3, [ip]
			break;
   12f1a:	e7e7      	b.n	12eec <extract_flags+0x14>
			conv->flag_zero = true;
   12f1c:	f89c 3000 	ldrb.w	r3, [ip]
   12f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12f24:	f88c 3000 	strb.w	r3, [ip]
			break;
   12f28:	e7e0      	b.n	12eec <extract_flags+0x14>
		switch (*sp) {
   12f2a:	2200      	movs	r2, #0
		}
	} while (loop);
   12f2c:	b342      	cbz	r2, 12f80 <extract_flags+0xa8>
		switch (*sp) {
   12f2e:	7803      	ldrb	r3, [r0, #0]
   12f30:	3b20      	subs	r3, #32
   12f32:	2b10      	cmp	r3, #16
   12f34:	d8f9      	bhi.n	12f2a <extract_flags+0x52>
   12f36:	a101      	add	r1, pc, #4	; (adr r1, 12f3c <extract_flags+0x64>)
   12f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   12f3c:	00012f01 	.word	0x00012f01
   12f40:	00012f2b 	.word	0x00012f2b
   12f44:	00012f2b 	.word	0x00012f2b
   12f48:	00012f0f 	.word	0x00012f0f
   12f4c:	00012f2b 	.word	0x00012f2b
   12f50:	00012f2b 	.word	0x00012f2b
   12f54:	00012f2b 	.word	0x00012f2b
   12f58:	00012f2b 	.word	0x00012f2b
   12f5c:	00012f2b 	.word	0x00012f2b
   12f60:	00012f2b 	.word	0x00012f2b
   12f64:	00012f2b 	.word	0x00012f2b
   12f68:	00012ef3 	.word	0x00012ef3
   12f6c:	00012f2b 	.word	0x00012f2b
   12f70:	00012ee1 	.word	0x00012ee1
   12f74:	00012f2b 	.word	0x00012f2b
   12f78:	00012f2b 	.word	0x00012f2b
   12f7c:	00012f1d 	.word	0x00012f1d

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   12f80:	f89c 3000 	ldrb.w	r3, [ip]
   12f84:	f003 0344 	and.w	r3, r3, #68	; 0x44
   12f88:	2b44      	cmp	r3, #68	; 0x44
   12f8a:	d000      	beq.n	12f8e <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   12f8c:	4770      	bx	lr
		conv->flag_zero = false;
   12f8e:	f89c 3000 	ldrb.w	r3, [ip]
   12f92:	f36f 1386 	bfc	r3, #6, #1
   12f96:	f88c 3000 	strb.w	r3, [ip]
   12f9a:	e7f7      	b.n	12f8c <extract_flags+0xb4>

00012f9c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   12f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa0:	4605      	mov	r5, r0
   12fa2:	460c      	mov	r4, r1
   12fa4:	4693      	mov	fp, r2
   12fa6:	4699      	mov	r9, r3
   12fa8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   12faa:	78d0      	ldrb	r0, [r2, #3]
   12fac:	4b25      	ldr	r3, [pc, #148]	; (13044 <encode_uint+0xa8>)
   12fae:	f813 a000 	ldrb.w	sl, [r3, r0]
   12fb2:	f00a 0a03 	and.w	sl, sl, #3
	const unsigned int radix = conversion_radix(conv->specifier);
   12fb6:	f015 fb9c 	bl	286f2 <conversion_radix>
   12fba:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   12fbc:	e015      	b.n	12fea <encode_uint+0x4e>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   12fbe:	f1ba 0f01 	cmp.w	sl, #1
   12fc2:	d020      	beq.n	13006 <encode_uint+0x6a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   12fc4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12fc6:	3257      	adds	r2, #87	; 0x57
   12fc8:	b2d2      	uxtb	r2, r2
   12fca:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   12fce:	4632      	mov	r2, r6
   12fd0:	4643      	mov	r3, r8
   12fd2:	4628      	mov	r0, r5
   12fd4:	4621      	mov	r1, r4
   12fd6:	f7ed fcb1 	bl	93c <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   12fda:	42b5      	cmp	r5, r6
   12fdc:	f174 0400 	sbcs.w	r4, r4, #0
   12fe0:	d315      	bcc.n	1300e <encode_uint+0x72>
   12fe2:	454f      	cmp	r7, r9
   12fe4:	d913      	bls.n	1300e <encode_uint+0x72>
		value /= radix;
   12fe6:	4605      	mov	r5, r0
   12fe8:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   12fea:	f04f 0800 	mov.w	r8, #0
   12fee:	4632      	mov	r2, r6
   12ff0:	4643      	mov	r3, r8
   12ff2:	4628      	mov	r0, r5
   12ff4:	4621      	mov	r1, r4
   12ff6:	f7ed fca1 	bl	93c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12ffa:	2a09      	cmp	r2, #9
   12ffc:	d8df      	bhi.n	12fbe <encode_uint+0x22>
   12ffe:	b2d2      	uxtb	r2, r2
   13000:	3230      	adds	r2, #48	; 0x30
   13002:	b2d2      	uxtb	r2, r2
   13004:	e7e1      	b.n	12fca <encode_uint+0x2e>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   13006:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13008:	3237      	adds	r2, #55	; 0x37
   1300a:	b2d2      	uxtb	r2, r2
   1300c:	e7dd      	b.n	12fca <encode_uint+0x2e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1300e:	f89b 3000 	ldrb.w	r3, [fp]
   13012:	f013 0f20 	tst.w	r3, #32
   13016:	d003      	beq.n	13020 <encode_uint+0x84>
		if (radix == 8) {
   13018:	2e08      	cmp	r6, #8
   1301a:	d004      	beq.n	13026 <encode_uint+0x8a>
			conv->altform_0 = true;
		} else if (radix == 16) {
   1301c:	2e10      	cmp	r6, #16
   1301e:	d009      	beq.n	13034 <encode_uint+0x98>
			;
		}
	}

	return bp;
}
   13020:	4638      	mov	r0, r7
   13022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   13026:	f89b 3002 	ldrb.w	r3, [fp, #2]
   1302a:	f043 0308 	orr.w	r3, r3, #8
   1302e:	f88b 3002 	strb.w	r3, [fp, #2]
   13032:	e7f5      	b.n	13020 <encode_uint+0x84>
			conv->altform_0c = true;
   13034:	f89b 3002 	ldrb.w	r3, [fp, #2]
   13038:	f043 0310 	orr.w	r3, r3, #16
   1303c:	f88b 3002 	strb.w	r3, [fp, #2]
   13040:	e7ee      	b.n	13020 <encode_uint+0x84>
   13042:	bf00      	nop
   13044:	00031ad1 	.word	0x00031ad1

00013048 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
   13048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1304c:	b087      	sub	sp, #28
   1304e:	ec55 4b10 	vmov	r4, r5, d0
   13052:	4607      	mov	r7, r0
   13054:	460e      	mov	r6, r1
   13056:	4699      	mov	r9, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
   13058:	4621      	mov	r1, r4
   1305a:	1e2b      	subs	r3, r5, #0
   1305c:	db06      	blt.n	1306c <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
   1305e:	7800      	ldrb	r0, [r0, #0]
   13060:	f010 0f08 	tst.w	r0, #8
   13064:	d012      	beq.n	1308c <encode_float+0x44>
		*sign = '+';
   13066:	202b      	movs	r0, #43	; 0x2b
   13068:	7010      	strb	r0, [r2, #0]
   1306a:	e001      	b.n	13070 <encode_float+0x28>
		*sign = '-';
   1306c:	202d      	movs	r0, #45	; 0x2d
   1306e:	7010      	strb	r0, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
   13070:	f897 8003 	ldrb.w	r8, [r7, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   13074:	f3c3 540a 	ubfx	r4, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   13078:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1307c:	9104      	str	r1, [sp, #16]
   1307e:	9305      	str	r3, [sp, #20]
	bool is_subnormal = (expo == 0) && (fract != 0);
   13080:	b954      	cbnz	r4, 13098 <encode_float+0x50>
   13082:	ea51 0203 	orrs.w	r2, r1, r3
   13086:	d127      	bne.n	130d8 <encode_float+0x90>
   13088:	2200      	movs	r2, #0
   1308a:	e006      	b.n	1309a <encode_float+0x52>
	} else if (conv->flag_space) {
   1308c:	f010 0f10 	tst.w	r0, #16
   13090:	d0ee      	beq.n	13070 <encode_float+0x28>
		*sign = ' ';
   13092:	2020      	movs	r0, #32
   13094:	7010      	strb	r0, [r2, #0]
   13096:	e7eb      	b.n	13070 <encode_float+0x28>
	bool is_subnormal = (expo == 0) && (fract != 0);
   13098:	2200      	movs	r2, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1309a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1309e:	4284      	cmp	r4, r0
   130a0:	d01c      	beq.n	130dc <encode_float+0x94>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
   130a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   130a6:	d05d      	beq.n	13164 <encode_float+0x11c>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
   130a8:	02db      	lsls	r3, r3, #11
   130aa:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   130ae:	02c9      	lsls	r1, r1, #11
   130b0:	9104      	str	r1, [sp, #16]
   130b2:	9305      	str	r3, [sp, #20]
	fract &= ~SIGN_MASK;
   130b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   130b8:	9305      	str	r3, [sp, #20]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
   130ba:	4321      	orrs	r1, r4
   130bc:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
   130c0:	4319      	orrs	r1, r3
   130c2:	d007      	beq.n	130d4 <encode_float+0x8c>
		if (is_subnormal) {
   130c4:	2a00      	cmp	r2, #0
   130c6:	d151      	bne.n	1316c <encode_float+0x124>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   130c8:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
   130cc:	9b05      	ldr	r3, [sp, #20]
   130ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   130d2:	9305      	str	r3, [sp, #20]
		c = 'f';
   130d4:	2500      	movs	r5, #0
   130d6:	e06a      	b.n	131ae <encode_float+0x166>
	bool is_subnormal = (expo == 0) && (fract != 0);
   130d8:	2201      	movs	r2, #1
   130da:	e7de      	b.n	1309a <encode_float+0x52>
		if (fract == 0) {
   130dc:	430b      	orrs	r3, r1
   130de:	d124      	bne.n	1312a <encode_float+0xe2>
			if (isupper((unsigned char)c)) {
   130e0:	4b9d      	ldr	r3, [pc, #628]	; (13358 <encode_float+0x310>)
   130e2:	f813 3008 	ldrb.w	r3, [r3, r8]
   130e6:	f003 0303 	and.w	r3, r3, #3
   130ea:	2b01      	cmp	r3, #1
   130ec:	d011      	beq.n	13112 <encode_float+0xca>
				*buf++ = 'i';
   130ee:	2369      	movs	r3, #105	; 0x69
   130f0:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'n';
   130f4:	236e      	movs	r3, #110	; 0x6e
   130f6:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'f';
   130fa:	f109 0203 	add.w	r2, r9, #3
   130fe:	2366      	movs	r3, #102	; 0x66
   13100:	f889 3002 	strb.w	r3, [r9, #2]
		conv->flag_zero = false;
   13104:	783b      	ldrb	r3, [r7, #0]
   13106:	f36f 1386 	bfc	r3, #6, #1
   1310a:	703b      	strb	r3, [r7, #0]
		*bpe = buf;
   1310c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1310e:	601a      	str	r2, [r3, #0]
		return bps;
   13110:	e178      	b.n	13404 <encode_float+0x3bc>
				*buf++ = 'I';
   13112:	2349      	movs	r3, #73	; 0x49
   13114:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'N';
   13118:	234e      	movs	r3, #78	; 0x4e
   1311a:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'F';
   1311e:	f109 0203 	add.w	r2, r9, #3
   13122:	2346      	movs	r3, #70	; 0x46
   13124:	f889 3002 	strb.w	r3, [r9, #2]
   13128:	e7ec      	b.n	13104 <encode_float+0xbc>
			if (isupper((unsigned char)c)) {
   1312a:	4b8b      	ldr	r3, [pc, #556]	; (13358 <encode_float+0x310>)
   1312c:	f813 3008 	ldrb.w	r3, [r3, r8]
   13130:	f003 0303 	and.w	r3, r3, #3
   13134:	2b01      	cmp	r3, #1
   13136:	d00a      	beq.n	1314e <encode_float+0x106>
				*buf++ = 'n';
   13138:	236e      	movs	r3, #110	; 0x6e
   1313a:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'a';
   1313e:	2261      	movs	r2, #97	; 0x61
   13140:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'n';
   13144:	f109 0203 	add.w	r2, r9, #3
   13148:	f889 3002 	strb.w	r3, [r9, #2]
   1314c:	e7da      	b.n	13104 <encode_float+0xbc>
				*buf++ = 'N';
   1314e:	234e      	movs	r3, #78	; 0x4e
   13150:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'A';
   13154:	2241      	movs	r2, #65	; 0x41
   13156:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'N';
   1315a:	f109 0203 	add.w	r2, r9, #3
   1315e:	f889 3002 	strb.w	r3, [r9, #2]
   13162:	e7cf      	b.n	13104 <encode_float+0xbc>
		c = 'f';
   13164:	f04f 0866 	mov.w	r8, #102	; 0x66
   13168:	e79e      	b.n	130a8 <encode_float+0x60>
				expo--;
   1316a:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1316c:	9b04      	ldr	r3, [sp, #16]
   1316e:	9a05      	ldr	r2, [sp, #20]
   13170:	18db      	adds	r3, r3, r3
   13172:	4152      	adcs	r2, r2
   13174:	9304      	str	r3, [sp, #16]
   13176:	9205      	str	r2, [sp, #20]
   13178:	2a00      	cmp	r2, #0
   1317a:	daf6      	bge.n	1316a <encode_float+0x122>
   1317c:	e7a4      	b.n	130c8 <encode_float+0x80>
		/*
		 * Make room to allow a multiplication by 5 without overflow.
		 * We test only the top part for faster code.
		 */
		do {
			fract >>= 1;
   1317e:	9b05      	ldr	r3, [sp, #20]
   13180:	9a04      	ldr	r2, [sp, #16]
   13182:	0852      	lsrs	r2, r2, #1
   13184:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   13188:	085b      	lsrs	r3, r3, #1
   1318a:	9204      	str	r2, [sp, #16]
   1318c:	9305      	str	r3, [sp, #20]
			expo++;
   1318e:	4621      	mov	r1, r4
   13190:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   13192:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
   13196:	d2f2      	bcs.n	1317e <encode_float+0x136>

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
   13198:	009c      	lsls	r4, r3, #2
   1319a:	ea44 7492 	orr.w	r4, r4, r2, lsr #30
   1319e:	0090      	lsls	r0, r2, #2
   131a0:	1880      	adds	r0, r0, r2
   131a2:	eb43 0304 	adc.w	r3, r3, r4
   131a6:	9004      	str	r0, [sp, #16]
   131a8:	9305      	str	r3, [sp, #20]
		expo++;
   131aa:	1c8c      	adds	r4, r1, #2
		decexp--;
   131ac:	3d01      	subs	r5, #1
	while (expo < -2) {
   131ae:	f114 0f02 	cmn.w	r4, #2
   131b2:	dbe4      	blt.n	1317e <encode_float+0x136>
   131b4:	e014      	b.n	131e0 <encode_float+0x198>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
   131b6:	9b04      	ldr	r3, [sp, #16]
   131b8:	3302      	adds	r3, #2
   131ba:	9a05      	ldr	r2, [sp, #20]
   131bc:	f142 0200 	adc.w	r2, r2, #0
   131c0:	9304      	str	r3, [sp, #16]
   131c2:	9205      	str	r2, [sp, #20]
		_ldiv5(&fract);
   131c4:	a804      	add	r0, sp, #16
   131c6:	f015 fa4e 	bl	28666 <_ldiv5>
		expo--;
   131ca:	3c01      	subs	r4, #1
		decexp++;
   131cc:	3501      	adds	r5, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
   131ce:	9a04      	ldr	r2, [sp, #16]
   131d0:	9b05      	ldr	r3, [sp, #20]
   131d2:	1892      	adds	r2, r2, r2
   131d4:	415b      	adcs	r3, r3
   131d6:	9204      	str	r2, [sp, #16]
   131d8:	9305      	str	r3, [sp, #20]
			expo--;
   131da:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
   131dc:	2b00      	cmp	r3, #0
   131de:	daf6      	bge.n	131ce <encode_float+0x186>
	while (expo > 0) {
   131e0:	2c00      	cmp	r4, #0
   131e2:	dce8      	bgt.n	131b6 <encode_float+0x16e>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
   131e4:	f1c4 0104 	rsb	r1, r4, #4
   131e8:	9a05      	ldr	r2, [sp, #20]
   131ea:	341c      	adds	r4, #28
   131ec:	f1a1 0020 	sub.w	r0, r1, #32
   131f0:	9b04      	ldr	r3, [sp, #16]
   131f2:	40cb      	lsrs	r3, r1
   131f4:	fa02 f404 	lsl.w	r4, r2, r4
   131f8:	4323      	orrs	r3, r4
   131fa:	fa22 f000 	lsr.w	r0, r2, r0
   131fe:	4303      	orrs	r3, r0
   13200:	40ca      	lsrs	r2, r1
   13202:	9304      	str	r3, [sp, #16]
   13204:	9205      	str	r2, [sp, #20]

	if ((c == 'g') || (c == 'G')) {
   13206:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   1320a:	d014      	beq.n	13236 <encode_float+0x1ee>
   1320c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   13210:	d011      	beq.n	13236 <encode_float+0x1ee>
	bool prune_zero = false;
   13212:	f04f 0b00 	mov.w	fp, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
   13216:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   1321a:	d02a      	beq.n	13272 <encode_float+0x22a>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
   1321c:	f106 0a01 	add.w	sl, r6, #1
	}

	int digit_count = 16;
   13220:	2310      	movs	r3, #16
   13222:	9303      	str	r3, [sp, #12]

	if (decimals > 16) {
   13224:	459a      	cmp	sl, r3
   13226:	dd00      	ble.n	1322a <encode_float+0x1e2>
		decimals = 16;
   13228:	469a      	mov	sl, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
   1322a:	2200      	movs	r2, #0
   1322c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13230:	e9cd 2300 	strd	r2, r3, [sp]
	while (decimals--) {
   13234:	e029      	b.n	1328a <encode_float+0x242>
		if (decexp < (-4 + 1) || decexp > precision) {
   13236:	f115 0f03 	cmn.w	r5, #3
   1323a:	db01      	blt.n	13240 <encode_float+0x1f8>
   1323c:	42b5      	cmp	r5, r6
   1323e:	dd11      	ble.n	13264 <encode_float+0x21c>
			c += 'e' - 'g';  /* e or E */
   13240:	f1a8 0802 	sub.w	r8, r8, #2
   13244:	fa5f f888 	uxtb.w	r8, r8
			if (precision > 0) {
   13248:	2e00      	cmp	r6, #0
   1324a:	dd00      	ble.n	1324e <encode_float+0x206>
				precision--;
   1324c:	3e01      	subs	r6, #1
		if (!conv->flag_hash && (precision > 0)) {
   1324e:	783b      	ldrb	r3, [r7, #0]
   13250:	f3c3 1b40 	ubfx	fp, r3, #5, #1
   13254:	f013 0f20 	tst.w	r3, #32
   13258:	d108      	bne.n	1326c <encode_float+0x224>
   1325a:	2e00      	cmp	r6, #0
   1325c:	dddb      	ble.n	13216 <encode_float+0x1ce>
			prune_zero = true;
   1325e:	f04f 0b01 	mov.w	fp, #1
   13262:	e7d8      	b.n	13216 <encode_float+0x1ce>
			precision -= decexp;
   13264:	1b76      	subs	r6, r6, r5
			c = 'f';
   13266:	f04f 0866 	mov.w	r8, #102	; 0x66
   1326a:	e7f0      	b.n	1324e <encode_float+0x206>
	bool prune_zero = false;
   1326c:	f04f 0b00 	mov.w	fp, #0
   13270:	e7d1      	b.n	13216 <encode_float+0x1ce>
		if (decimals < 0) {
   13272:	eb15 0a06 	adds.w	sl, r5, r6
   13276:	d5d3      	bpl.n	13220 <encode_float+0x1d8>
	int digit_count = 16;
   13278:	2310      	movs	r3, #16
   1327a:	9303      	str	r3, [sp, #12]
			decimals = 0;
   1327c:	f04f 0a00 	mov.w	sl, #0
   13280:	e7d3      	b.n	1322a <encode_float+0x1e2>
		_ldiv10(&round);
   13282:	4668      	mov	r0, sp
   13284:	f015 fa0b 	bl	2869e <_ldiv10>
	while (decimals--) {
   13288:	46a2      	mov	sl, r4
   1328a:	f10a 34ff 	add.w	r4, sl, #4294967295
   1328e:	f1ba 0f00 	cmp.w	sl, #0
   13292:	d1f6      	bne.n	13282 <encode_float+0x23a>
	}
	fract += round;
   13294:	9b04      	ldr	r3, [sp, #16]
   13296:	9a00      	ldr	r2, [sp, #0]
   13298:	189b      	adds	r3, r3, r2
   1329a:	9a05      	ldr	r2, [sp, #20]
   1329c:	9901      	ldr	r1, [sp, #4]
   1329e:	eb42 0201 	adc.w	r2, r2, r1
   132a2:	9304      	str	r3, [sp, #16]
   132a4:	9205      	str	r2, [sp, #20]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
   132a6:	f04f 31ff 	mov.w	r1, #4294967295
   132aa:	4299      	cmp	r1, r3
   132ac:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
   132b0:	4193      	sbcs	r3, r2
   132b2:	d306      	bcc.n	132c2 <encode_float+0x27a>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
   132b4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   132b8:	d138      	bne.n	1332c <encode_float+0x2e4>
		if (decexp > 0) {
   132ba:	2d00      	cmp	r5, #0
   132bc:	dd31      	ble.n	13322 <encode_float+0x2da>
	char *buf = bps;
   132be:	464c      	mov	r4, r9
   132c0:	e00b      	b.n	132da <encode_float+0x292>
		_ldiv10(&fract);
   132c2:	a804      	add	r0, sp, #16
   132c4:	f015 f9eb 	bl	2869e <_ldiv10>
		decexp++;
   132c8:	3501      	adds	r5, #1
   132ca:	e7f3      	b.n	132b4 <encode_float+0x26c>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
   132cc:	a903      	add	r1, sp, #12
   132ce:	a804      	add	r0, sp, #16
   132d0:	f015 f9f1 	bl	286b6 <_get_digit>
   132d4:	f804 0b01 	strb.w	r0, [r4], #1
				decexp--;
   132d8:	3d01      	subs	r5, #1
			while (decexp > 0 && digit_count > 0) {
   132da:	2d00      	cmp	r5, #0
   132dc:	dd02      	ble.n	132e4 <encode_float+0x29c>
   132de:	9b03      	ldr	r3, [sp, #12]
   132e0:	2b00      	cmp	r3, #0
   132e2:	dcf3      	bgt.n	132cc <encode_float+0x284>
			}

			conv->pad0_value = decexp;
   132e4:	607d      	str	r5, [r7, #4]

			decexp = 0;
   132e6:	4655      	mov	r5, sl
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   132e8:	783b      	ldrb	r3, [r7, #0]
   132ea:	f013 0f20 	tst.w	r3, #32
   132ee:	d101      	bne.n	132f4 <encode_float+0x2ac>
   132f0:	2e00      	cmp	r6, #0
   132f2:	dd02      	ble.n	132fa <encode_float+0x2b2>
			*buf++ = '.';
   132f4:	232e      	movs	r3, #46	; 0x2e
   132f6:	f804 3b01 	strb.w	r3, [r4], #1
		}

		if (decexp < 0 && precision > 0) {
   132fa:	2d00      	cmp	r5, #0
   132fc:	da35      	bge.n	1336a <encode_float+0x322>
   132fe:	2e00      	cmp	r6, #0
   13300:	dd33      	ble.n	1336a <encode_float+0x322>
			conv->pad0_value = -decexp;
   13302:	426b      	negs	r3, r5
   13304:	607b      	str	r3, [r7, #4]
			if (conv->pad0_value > precision) {
   13306:	429e      	cmp	r6, r3
   13308:	da00      	bge.n	1330c <encode_float+0x2c4>
				conv->pad0_value = precision;
   1330a:	607e      	str	r6, [r7, #4]
			}

			precision -= conv->pad0_value;
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	1af6      	subs	r6, r6, r3
			conv->pad_postdp = (conv->pad0_value > 0);
   13310:	2b00      	cmp	r3, #0
   13312:	bfd4      	ite	le
   13314:	2300      	movle	r3, #0
   13316:	2301      	movgt	r3, #1
   13318:	78ba      	ldrb	r2, [r7, #2]
   1331a:	f363 1245 	bfi	r2, r3, #5, #1
   1331e:	70ba      	strb	r2, [r7, #2]
   13320:	e023      	b.n	1336a <encode_float+0x322>
			*buf++ = '0';
   13322:	464c      	mov	r4, r9
   13324:	2330      	movs	r3, #48	; 0x30
   13326:	f804 3b01 	strb.w	r3, [r4], #1
   1332a:	e7dd      	b.n	132e8 <encode_float+0x2a0>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
   1332c:	a903      	add	r1, sp, #12
   1332e:	a804      	add	r0, sp, #16
   13330:	f015 f9c1 	bl	286b6 <_get_digit>
   13334:	464c      	mov	r4, r9
   13336:	f804 0b01 	strb.w	r0, [r4], #1
		if (*buf++ != '0') {
   1333a:	2830      	cmp	r0, #48	; 0x30
   1333c:	d000      	beq.n	13340 <encode_float+0x2f8>
			decexp--;
   1333e:	3d01      	subs	r5, #1
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   13340:	783b      	ldrb	r3, [r7, #0]
   13342:	f013 0f20 	tst.w	r3, #32
   13346:	d101      	bne.n	1334c <encode_float+0x304>
   13348:	2e00      	cmp	r6, #0
   1334a:	dd0e      	ble.n	1336a <encode_float+0x322>
			*buf++ = '.';
   1334c:	f109 0402 	add.w	r4, r9, #2
   13350:	232e      	movs	r3, #46	; 0x2e
   13352:	f889 3001 	strb.w	r3, [r9, #1]
   13356:	e008      	b.n	1336a <encode_float+0x322>
   13358:	00031ad1 	.word	0x00031ad1
		}
	}

	while (precision > 0 && digit_count > 0) {
		*buf++ = _get_digit(&fract, &digit_count);
   1335c:	a903      	add	r1, sp, #12
   1335e:	a804      	add	r0, sp, #16
   13360:	f015 f9a9 	bl	286b6 <_get_digit>
   13364:	f804 0b01 	strb.w	r0, [r4], #1
		precision--;
   13368:	3e01      	subs	r6, #1
	while (precision > 0 && digit_count > 0) {
   1336a:	2e00      	cmp	r6, #0
   1336c:	dd02      	ble.n	13374 <encode_float+0x32c>
   1336e:	9b03      	ldr	r3, [sp, #12]
   13370:	2b00      	cmp	r3, #0
   13372:	dcf3      	bgt.n	1335c <encode_float+0x314>
	}

	conv->pad0_pre_exp = precision;
   13374:	60be      	str	r6, [r7, #8]

	if (prune_zero) {
   13376:	f1bb 0f00 	cmp.w	fp, #0
   1337a:	d009      	beq.n	13390 <encode_float+0x348>
		conv->pad0_pre_exp = 0;
   1337c:	2300      	movs	r3, #0
   1337e:	60bb      	str	r3, [r7, #8]
		while (*--buf == '0') {
   13380:	4623      	mov	r3, r4
   13382:	461c      	mov	r4, r3
   13384:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   13388:	2a30      	cmp	r2, #48	; 0x30
   1338a:	d0fa      	beq.n	13382 <encode_float+0x33a>
			;
		}
		if (*buf != '.') {
   1338c:	2a2e      	cmp	r2, #46	; 0x2e
   1338e:	d03d      	beq.n	1340c <encode_float+0x3c4>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
   13390:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   13394:	d002      	beq.n	1339c <encode_float+0x354>
   13396:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   1339a:	d126      	bne.n	133ea <encode_float+0x3a2>
		*buf++ = c;
   1339c:	f884 8000 	strb.w	r8, [r4]
		if (decexp < 0) {
   133a0:	2d00      	cmp	r5, #0
   133a2:	db35      	blt.n	13410 <encode_float+0x3c8>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
   133a4:	1ca2      	adds	r2, r4, #2
   133a6:	232b      	movs	r3, #43	; 0x2b
   133a8:	7063      	strb	r3, [r4, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
   133aa:	2d63      	cmp	r5, #99	; 0x63
   133ac:	dd0c      	ble.n	133c8 <encode_float+0x380>
			*buf++ = (decexp / 100) + '0';
   133ae:	491e      	ldr	r1, [pc, #120]	; (13428 <encode_float+0x3e0>)
   133b0:	fb81 3105 	smull	r3, r1, r1, r5
   133b4:	17eb      	asrs	r3, r5, #31
   133b6:	ebc3 1361 	rsb	r3, r3, r1, asr #5
   133ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
   133be:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
   133c2:	2164      	movs	r1, #100	; 0x64
   133c4:	fb01 5513 	mls	r5, r1, r3, r5
		}

		*buf++ = (decexp / 10) + '0';
   133c8:	4918      	ldr	r1, [pc, #96]	; (1342c <encode_float+0x3e4>)
   133ca:	fb81 3105 	smull	r3, r1, r1, r5
   133ce:	17eb      	asrs	r3, r5, #31
   133d0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   133d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
   133d8:	4614      	mov	r4, r2
   133da:	f804 1b02 	strb.w	r1, [r4], #2
		*buf++ = (decexp % 10) + '0';
   133de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   133e2:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
   133e6:	3330      	adds	r3, #48	; 0x30
   133e8:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
   133ea:	687b      	ldr	r3, [r7, #4]
		|| (conv->pad0_pre_exp > 0);
   133ec:	2b00      	cmp	r3, #0
   133ee:	dd14      	ble.n	1341a <encode_float+0x3d2>
   133f0:	f04f 0a01 	mov.w	sl, #1
	conv->pad_fp = (conv->pad0_value > 0)
   133f4:	78bb      	ldrb	r3, [r7, #2]
   133f6:	f36a 1386 	bfi	r3, sl, #6, #1
   133fa:	70bb      	strb	r3, [r7, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
   133fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   133fe:	601c      	str	r4, [r3, #0]
	*buf = 0;
   13400:	2300      	movs	r3, #0
   13402:	7023      	strb	r3, [r4, #0]
	return bps;
}
   13404:	4648      	mov	r0, r9
   13406:	b007      	add	sp, #28
   13408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
   1340c:	461c      	mov	r4, r3
   1340e:	e7bf      	b.n	13390 <encode_float+0x348>
			decexp = -decexp;
   13410:	426d      	negs	r5, r5
			*buf++ = '-';
   13412:	1ca2      	adds	r2, r4, #2
   13414:	232d      	movs	r3, #45	; 0x2d
   13416:	7063      	strb	r3, [r4, #1]
   13418:	e7c7      	b.n	133aa <encode_float+0x362>
		|| (conv->pad0_pre_exp > 0);
   1341a:	68bb      	ldr	r3, [r7, #8]
   1341c:	2b00      	cmp	r3, #0
   1341e:	dde9      	ble.n	133f4 <encode_float+0x3ac>
   13420:	f04f 0a01 	mov.w	sl, #1
   13424:	e7e6      	b.n	133f4 <encode_float+0x3ac>
   13426:	bf00      	nop
   13428:	51eb851f 	.word	0x51eb851f
   1342c:	66666667 	.word	0x66666667

00013430 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   13430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13434:	b095      	sub	sp, #84	; 0x54
   13436:	4606      	mov	r6, r0
   13438:	460d      	mov	r5, r1
   1343a:	4690      	mov	r8, r2
   1343c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1343e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13440:	f898 0000 	ldrb.w	r0, [r8]
   13444:	2800      	cmp	r0, #0
   13446:	f000 8345 	beq.w	13ad4 <z_cbvprintf_impl+0x6a4>
		if (*fp != '%') {
   1344a:	2825      	cmp	r0, #37	; 0x25
   1344c:	d008      	beq.n	13460 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   1344e:	f108 0801 	add.w	r8, r8, #1
   13452:	4629      	mov	r1, r5
   13454:	47b0      	blx	r6
   13456:	2800      	cmp	r0, #0
   13458:	f2c0 833d 	blt.w	13ad6 <z_cbvprintf_impl+0x6a6>
   1345c:	3401      	adds	r4, #1
			continue;
   1345e:	e7ef      	b.n	13440 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   13460:	2300      	movs	r3, #0
   13462:	9306      	str	r3, [sp, #24]
   13464:	9307      	str	r3, [sp, #28]
   13466:	9308      	str	r3, [sp, #32]
   13468:	9309      	str	r3, [sp, #36]	; 0x24
   1346a:	930a      	str	r3, [sp, #40]	; 0x28
   1346c:	930b      	str	r3, [sp, #44]	; 0x2c
		union argument_value *const value = &state.value;
		const char *sp = fp;
		int width = -1;
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
   1346e:	f10d 024d 	add.w	r2, sp, #77	; 0x4d
   13472:	9205      	str	r2, [sp, #20]
		char sign = 0;
   13474:	f88d 3013 	strb.w	r3, [sp, #19]

		fp = extract_conversion(conv, sp);
   13478:	4641      	mov	r1, r8
   1347a:	a808      	add	r0, sp, #32
   1347c:	f015 f8d1 	bl	28622 <extract_conversion>
   13480:	4681      	mov	r9, r0

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   13482:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   13486:	f013 0f01 	tst.w	r3, #1
   1348a:	f000 809e 	beq.w	135ca <z_cbvprintf_impl+0x19a>
			width = va_arg(ap, int);
   1348e:	9b03      	ldr	r3, [sp, #12]
   13490:	1d1a      	adds	r2, r3, #4
   13492:	9203      	str	r2, [sp, #12]
   13494:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   13496:	2f00      	cmp	r7, #0
   13498:	f2c0 808f 	blt.w	135ba <z_cbvprintf_impl+0x18a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1349c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   134a0:	f013 0f04 	tst.w	r3, #4
   134a4:	f000 80a3 	beq.w	135ee <z_cbvprintf_impl+0x1be>
			int arg = va_arg(ap, int);
   134a8:	9b03      	ldr	r3, [sp, #12]
   134aa:	1d1a      	adds	r2, r3, #4
   134ac:	9203      	str	r2, [sp, #12]
   134ae:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   134b2:	f1ba 0f00 	cmp.w	sl, #0
   134b6:	f2c0 8091 	blt.w	135dc <z_cbvprintf_impl+0x1ac>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   134ba:	2300      	movs	r3, #0
   134bc:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   134be:	930a      	str	r3, [sp, #40]	; 0x28

		/* FP conversion requires knowing the precision. */
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
		    && (conv->specifier_cat == SPECIFIER_FP)
   134c0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   134c4:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   134c8:	2b04      	cmp	r3, #4
   134ca:	f000 8099 	beq.w	13600 <z_cbvprintf_impl+0x1d0>
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   134ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   134d2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   134d6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   134da:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   134de:	2b01      	cmp	r3, #1
   134e0:	f000 809e 	beq.w	13620 <z_cbvprintf_impl+0x1f0>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   134e4:	2b02      	cmp	r3, #2
   134e6:	f000 80e3 	beq.w	136b0 <z_cbvprintf_impl+0x280>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   134ea:	2b04      	cmp	r3, #4
   134ec:	f000 8134 	beq.w	13758 <z_cbvprintf_impl+0x328>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   134f0:	2b03      	cmp	r3, #3
   134f2:	f000 814b 	beq.w	1378c <z_cbvprintf_impl+0x35c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   134f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   134fa:	f012 0f03 	tst.w	r2, #3
   134fe:	f040 814b 	bne.w	13798 <z_cbvprintf_impl+0x368>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   13502:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   13506:	3b25      	subs	r3, #37	; 0x25
   13508:	2b53      	cmp	r3, #83	; 0x53
   1350a:	f200 81fc 	bhi.w	13906 <z_cbvprintf_impl+0x4d6>
   1350e:	e8df f013 	tbh	[pc, r3, lsl #1]
   13512:	014f      	.short	0x014f
   13514:	01fa01fa 	.word	0x01fa01fa
   13518:	01fa01fa 	.word	0x01fa01fa
   1351c:	01fa01fa 	.word	0x01fa01fa
   13520:	01fa01fa 	.word	0x01fa01fa
   13524:	01fa01fa 	.word	0x01fa01fa
   13528:	01fa01fa 	.word	0x01fa01fa
   1352c:	01fa01fa 	.word	0x01fa01fa
   13530:	01fa01fa 	.word	0x01fa01fa
   13534:	01fa01fa 	.word	0x01fa01fa
   13538:	01fa01fa 	.word	0x01fa01fa
   1353c:	01fa01fa 	.word	0x01fa01fa
   13540:	01fa01fa 	.word	0x01fa01fa
   13544:	01fa01fa 	.word	0x01fa01fa
   13548:	01fc01fa 	.word	0x01fc01fa
   1354c:	01fa01fa 	.word	0x01fa01fa
   13550:	01fc01fa 	.word	0x01fc01fa
   13554:	01fc01fc 	.word	0x01fc01fc
   13558:	01fa01fa 	.word	0x01fa01fa
   1355c:	01fa01fa 	.word	0x01fa01fa
   13560:	01fa01fa 	.word	0x01fa01fa
   13564:	01fa01fa 	.word	0x01fa01fa
   13568:	01fa01fa 	.word	0x01fa01fa
   1356c:	01fa01fa 	.word	0x01fa01fa
   13570:	01fa01fa 	.word	0x01fa01fa
   13574:	01fa01fa 	.word	0x01fa01fa
   13578:	01fa01b1 	.word	0x01fa01b1
   1357c:	01fa01fa 	.word	0x01fa01fa
   13580:	01fa01fa 	.word	0x01fa01fa
   13584:	01fa01fa 	.word	0x01fa01fa
   13588:	01fc01fa 	.word	0x01fc01fa
   1358c:	019c01fa 	.word	0x019c01fa
   13590:	01fc01a5 	.word	0x01fc01a5
   13594:	01fc01fc 	.word	0x01fc01fc
   13598:	01a501fa 	.word	0x01a501fa
   1359c:	01fa01fa 	.word	0x01fa01fa
   135a0:	01fa01fa 	.word	0x01fa01fa
   135a4:	01b101f5 	.word	0x01b101f5
   135a8:	01fa01dc 	.word	0x01fa01dc
   135ac:	015701fa 	.word	0x015701fa
   135b0:	01b101fa 	.word	0x01b101fa
   135b4:	01fa01fa 	.word	0x01fa01fa
   135b8:	01b1      	.short	0x01b1
				conv->flag_dash = true;
   135ba:	f89d 3020 	ldrb.w	r3, [sp, #32]
   135be:	f043 0304 	orr.w	r3, r3, #4
   135c2:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   135c6:	427f      	negs	r7, r7
   135c8:	e768      	b.n	1349c <z_cbvprintf_impl+0x6c>
		} else if (conv->width_present) {
   135ca:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   135ce:	2b00      	cmp	r3, #0
   135d0:	db02      	blt.n	135d8 <z_cbvprintf_impl+0x1a8>
		int width = -1;
   135d2:	f04f 37ff 	mov.w	r7, #4294967295
   135d6:	e761      	b.n	1349c <z_cbvprintf_impl+0x6c>
			width = conv->width_value;
   135d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   135da:	e75f      	b.n	1349c <z_cbvprintf_impl+0x6c>
				conv->prec_present = false;
   135dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   135e0:	f36f 0341 	bfc	r3, #1, #1
   135e4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   135e8:	f04f 3aff 	mov.w	sl, #4294967295
   135ec:	e765      	b.n	134ba <z_cbvprintf_impl+0x8a>
		} else if (conv->prec_present) {
   135ee:	f013 0f02 	tst.w	r3, #2
   135f2:	d002      	beq.n	135fa <z_cbvprintf_impl+0x1ca>
			precision = conv->prec_value;
   135f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   135f8:	e75f      	b.n	134ba <z_cbvprintf_impl+0x8a>
		int precision = -1;
   135fa:	f04f 3aff 	mov.w	sl, #4294967295
   135fe:	e75c      	b.n	134ba <z_cbvprintf_impl+0x8a>
		    && !conv->prec_present) {
   13600:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   13604:	f013 0f02 	tst.w	r3, #2
   13608:	f47f af61 	bne.w	134ce <z_cbvprintf_impl+0x9e>
			if (conv->specifier_a) {
   1360c:	f99d 3021 	ldrsb.w	r3, [sp, #33]	; 0x21
   13610:	2b00      	cmp	r3, #0
   13612:	db02      	blt.n	1361a <z_cbvprintf_impl+0x1ea>
				precision = 6;
   13614:	f04f 0a06 	mov.w	sl, #6
   13618:	e759      	b.n	134ce <z_cbvprintf_impl+0x9e>
				precision = FRACTION_HEX;
   1361a:	f04f 0a0d 	mov.w	sl, #13
   1361e:	e756      	b.n	134ce <z_cbvprintf_impl+0x9e>
			switch (length_mod) {
   13620:	1ed3      	subs	r3, r2, #3
   13622:	2b04      	cmp	r3, #4
   13624:	d804      	bhi.n	13630 <z_cbvprintf_impl+0x200>
   13626:	e8df f003 	tbb	[pc, r3]
   1362a:	1d0b      	.short	0x1d0b
   1362c:	3529      	.short	0x3529
   1362e:	35          	.byte	0x35
   1362f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   13630:	9b03      	ldr	r3, [sp, #12]
   13632:	1d19      	adds	r1, r3, #4
   13634:	9103      	str	r1, [sp, #12]
   13636:	681b      	ldr	r3, [r3, #0]
   13638:	17d9      	asrs	r1, r3, #31
   1363a:	9306      	str	r3, [sp, #24]
   1363c:	9107      	str	r1, [sp, #28]
				break;
   1363e:	e006      	b.n	1364e <z_cbvprintf_impl+0x21e>
					value->sint = va_arg(ap, long);
   13640:	9b03      	ldr	r3, [sp, #12]
   13642:	1d19      	adds	r1, r3, #4
   13644:	9103      	str	r1, [sp, #12]
   13646:	681b      	ldr	r3, [r3, #0]
   13648:	17d9      	asrs	r1, r3, #31
   1364a:	9306      	str	r3, [sp, #24]
   1364c:	9107      	str	r1, [sp, #28]
			if (length_mod == LENGTH_HH) {
   1364e:	2a01      	cmp	r2, #1
   13650:	d028      	beq.n	136a4 <z_cbvprintf_impl+0x274>
			} else if (length_mod == LENGTH_H) {
   13652:	2a02      	cmp	r2, #2
   13654:	f47f af4f 	bne.w	134f6 <z_cbvprintf_impl+0xc6>
				value->sint = (short)value->sint;
   13658:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   1365c:	17da      	asrs	r2, r3, #31
   1365e:	9306      	str	r3, [sp, #24]
   13660:	9207      	str	r2, [sp, #28]
   13662:	e748      	b.n	134f6 <z_cbvprintf_impl+0xc6>
					(sint_value_type)va_arg(ap, long long);
   13664:	9b03      	ldr	r3, [sp, #12]
   13666:	3307      	adds	r3, #7
   13668:	f023 0307 	bic.w	r3, r3, #7
   1366c:	f103 0108 	add.w	r1, r3, #8
   13670:	9103      	str	r1, [sp, #12]
   13672:	e9d3 0100 	ldrd	r0, r1, [r3]
				value->sint =
   13676:	e9cd 0106 	strd	r0, r1, [sp, #24]
				break;
   1367a:	e7e8      	b.n	1364e <z_cbvprintf_impl+0x21e>
					(sint_value_type)va_arg(ap, intmax_t);
   1367c:	9b03      	ldr	r3, [sp, #12]
   1367e:	3307      	adds	r3, #7
   13680:	f023 0307 	bic.w	r3, r3, #7
   13684:	f103 0108 	add.w	r1, r3, #8
   13688:	9103      	str	r1, [sp, #12]
   1368a:	e9d3 0100 	ldrd	r0, r1, [r3]
				value->sint =
   1368e:	e9cd 0106 	strd	r0, r1, [sp, #24]
				break;
   13692:	e7dc      	b.n	1364e <z_cbvprintf_impl+0x21e>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13694:	9b03      	ldr	r3, [sp, #12]
   13696:	1d19      	adds	r1, r3, #4
   13698:	9103      	str	r1, [sp, #12]
   1369a:	681b      	ldr	r3, [r3, #0]
   1369c:	17d9      	asrs	r1, r3, #31
				value->sint =
   1369e:	9306      	str	r3, [sp, #24]
   136a0:	9107      	str	r1, [sp, #28]
				break;
   136a2:	e7d4      	b.n	1364e <z_cbvprintf_impl+0x21e>
				value->sint = (signed char)value->sint;
   136a4:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   136a8:	17da      	asrs	r2, r3, #31
   136aa:	9306      	str	r3, [sp, #24]
   136ac:	9207      	str	r2, [sp, #28]
   136ae:	e722      	b.n	134f6 <z_cbvprintf_impl+0xc6>
			switch (length_mod) {
   136b0:	1ed3      	subs	r3, r2, #3
   136b2:	2b04      	cmp	r3, #4
   136b4:	d804      	bhi.n	136c0 <z_cbvprintf_impl+0x290>
   136b6:	e8df f003 	tbb	[pc, r3]
   136ba:	1f0b      	.short	0x1f0b
   136bc:	4135      	.short	0x4135
   136be:	41          	.byte	0x41
   136bf:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   136c0:	9b03      	ldr	r3, [sp, #12]
   136c2:	1d19      	adds	r1, r3, #4
   136c4:	9103      	str	r1, [sp, #12]
   136c6:	681b      	ldr	r3, [r3, #0]
   136c8:	9306      	str	r3, [sp, #24]
   136ca:	2300      	movs	r3, #0
   136cc:	9307      	str	r3, [sp, #28]
				break;
   136ce:	e01e      	b.n	1370e <z_cbvprintf_impl+0x2de>
				    && (conv->specifier == 'c')) {
   136d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   136d4:	2b63      	cmp	r3, #99	; 0x63
   136d6:	d007      	beq.n	136e8 <z_cbvprintf_impl+0x2b8>
					value->uint = va_arg(ap, unsigned long);
   136d8:	9b03      	ldr	r3, [sp, #12]
   136da:	1d19      	adds	r1, r3, #4
   136dc:	9103      	str	r1, [sp, #12]
   136de:	681b      	ldr	r3, [r3, #0]
   136e0:	9306      	str	r3, [sp, #24]
   136e2:	2300      	movs	r3, #0
   136e4:	9307      	str	r3, [sp, #28]
   136e6:	e012      	b.n	1370e <z_cbvprintf_impl+0x2de>
					value->uint = (wchar_t)va_arg(ap,
   136e8:	9b03      	ldr	r3, [sp, #12]
   136ea:	1d19      	adds	r1, r3, #4
   136ec:	9103      	str	r1, [sp, #12]
   136ee:	681b      	ldr	r3, [r3, #0]
   136f0:	9306      	str	r3, [sp, #24]
   136f2:	2300      	movs	r3, #0
   136f4:	9307      	str	r3, [sp, #28]
   136f6:	e00a      	b.n	1370e <z_cbvprintf_impl+0x2de>
					(uint_value_type)va_arg(ap,
   136f8:	9b03      	ldr	r3, [sp, #12]
   136fa:	3307      	adds	r3, #7
   136fc:	f023 0307 	bic.w	r3, r3, #7
   13700:	f103 0108 	add.w	r1, r3, #8
   13704:	9103      	str	r1, [sp, #12]
   13706:	e9d3 0100 	ldrd	r0, r1, [r3]
				value->uint =
   1370a:	e9cd 0106 	strd	r0, r1, [sp, #24]
			if (length_mod == LENGTH_HH) {
   1370e:	2a01      	cmp	r2, #1
   13710:	d01c      	beq.n	1374c <z_cbvprintf_impl+0x31c>
			} else if (length_mod == LENGTH_H) {
   13712:	2a02      	cmp	r2, #2
   13714:	f47f aeef 	bne.w	134f6 <z_cbvprintf_impl+0xc6>
				value->uint = (unsigned short)value->uint;
   13718:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1371c:	9306      	str	r3, [sp, #24]
   1371e:	2300      	movs	r3, #0
   13720:	9307      	str	r3, [sp, #28]
   13722:	e6e8      	b.n	134f6 <z_cbvprintf_impl+0xc6>
					(uint_value_type)va_arg(ap,
   13724:	9b03      	ldr	r3, [sp, #12]
   13726:	3307      	adds	r3, #7
   13728:	f023 0307 	bic.w	r3, r3, #7
   1372c:	f103 0108 	add.w	r1, r3, #8
   13730:	9103      	str	r1, [sp, #12]
   13732:	e9d3 0100 	ldrd	r0, r1, [r3]
				value->uint =
   13736:	e9cd 0106 	strd	r0, r1, [sp, #24]
				break;
   1373a:	e7e8      	b.n	1370e <z_cbvprintf_impl+0x2de>
					(uint_value_type)va_arg(ap, size_t);
   1373c:	9b03      	ldr	r3, [sp, #12]
   1373e:	1d19      	adds	r1, r3, #4
   13740:	9103      	str	r1, [sp, #12]
   13742:	681b      	ldr	r3, [r3, #0]
				value->uint =
   13744:	9306      	str	r3, [sp, #24]
   13746:	2300      	movs	r3, #0
   13748:	9307      	str	r3, [sp, #28]
				break;
   1374a:	e7e0      	b.n	1370e <z_cbvprintf_impl+0x2de>
				value->uint = (unsigned char)value->uint;
   1374c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13750:	9306      	str	r3, [sp, #24]
   13752:	2300      	movs	r3, #0
   13754:	9307      	str	r3, [sp, #28]
   13756:	e6ce      	b.n	134f6 <z_cbvprintf_impl+0xc6>
			if (length_mod == LENGTH_UPPER_L) {
   13758:	2a08      	cmp	r2, #8
   1375a:	d00b      	beq.n	13774 <z_cbvprintf_impl+0x344>
				value->dbl = va_arg(ap, double);
   1375c:	9b03      	ldr	r3, [sp, #12]
   1375e:	3307      	adds	r3, #7
   13760:	f023 0307 	bic.w	r3, r3, #7
   13764:	f103 0208 	add.w	r2, r3, #8
   13768:	9203      	str	r2, [sp, #12]
   1376a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1376e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13772:	e6c0      	b.n	134f6 <z_cbvprintf_impl+0xc6>
				value->ldbl = va_arg(ap, long double);
   13774:	9b03      	ldr	r3, [sp, #12]
   13776:	3307      	adds	r3, #7
   13778:	f023 0307 	bic.w	r3, r3, #7
   1377c:	f103 0208 	add.w	r2, r3, #8
   13780:	9203      	str	r2, [sp, #12]
   13782:	e9d3 2300 	ldrd	r2, r3, [r3]
   13786:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1378a:	e6b4      	b.n	134f6 <z_cbvprintf_impl+0xc6>
			value->ptr = va_arg(ap, void *);
   1378c:	9b03      	ldr	r3, [sp, #12]
   1378e:	1d1a      	adds	r2, r3, #4
   13790:	9203      	str	r2, [sp, #12]
   13792:	681b      	ldr	r3, [r3, #0]
   13794:	9306      	str	r3, [sp, #24]
   13796:	e6ae      	b.n	134f6 <z_cbvprintf_impl+0xc6>
			OUTS(sp, fp);
   13798:	464b      	mov	r3, r9
   1379a:	4642      	mov	r2, r8
   1379c:	4629      	mov	r1, r5
   1379e:	4630      	mov	r0, r6
   137a0:	f014 ffdb 	bl	2875a <outs>
   137a4:	2800      	cmp	r0, #0
   137a6:	f2c0 8196 	blt.w	13ad6 <z_cbvprintf_impl+0x6a6>
   137aa:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   137ac:	46c8      	mov	r8, r9
			continue;
   137ae:	e647      	b.n	13440 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   137b0:	4629      	mov	r1, r5
   137b2:	2025      	movs	r0, #37	; 0x25
   137b4:	47b0      	blx	r6
   137b6:	2800      	cmp	r0, #0
   137b8:	f2c0 818d 	blt.w	13ad6 <z_cbvprintf_impl+0x6a6>
   137bc:	3401      	adds	r4, #1
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   137be:	e0a2      	b.n	13906 <z_cbvprintf_impl+0x4d6>
			bps = (const char *)value->ptr;
   137c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if (precision >= 0) {
   137c4:	f1ba 0f00 	cmp.w	sl, #0
   137c8:	db3b      	blt.n	13842 <z_cbvprintf_impl+0x412>
				len = strnlen(bps, precision);
   137ca:	4651      	mov	r1, sl
   137cc:	4640      	mov	r0, r8
   137ce:	f01a fec7 	bl	2e560 <strnlen>
			bpe = bps + len;
   137d2:	4440      	add	r0, r8
   137d4:	9005      	str	r0, [sp, #20]
		if (bps == NULL) {
   137d6:	f1b8 0f00 	cmp.w	r8, #0
   137da:	f000 8094 	beq.w	13906 <z_cbvprintf_impl+0x4d6>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   137de:	9b05      	ldr	r3, [sp, #20]
   137e0:	eba3 0308 	sub.w	r3, r3, r8
		int pad_len = 0;

		if (sign != 0) {
   137e4:	f89d 0013 	ldrb.w	r0, [sp, #19]
   137e8:	b100      	cbz	r0, 137ec <z_cbvprintf_impl+0x3bc>
			nj_len += 1U;
   137ea:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   137ec:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   137f0:	f011 0f10 	tst.w	r1, #16
   137f4:	f000 8096 	beq.w	13924 <z_cbvprintf_impl+0x4f4>
			nj_len += 2U;
   137f8:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   137fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   137fc:	4413      	add	r3, r2
		if (conv->pad_fp) {
   137fe:	f011 0f40 	tst.w	r1, #64	; 0x40
   13802:	d001      	beq.n	13808 <z_cbvprintf_impl+0x3d8>
			nj_len += conv->pad0_pre_exp;
   13804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13806:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   13808:	2f00      	cmp	r7, #0
   1380a:	f340 80a3 	ble.w	13954 <z_cbvprintf_impl+0x524>
			width -= (int)nj_len;
   1380e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   13810:	f89d 3020 	ldrb.w	r3, [sp, #32]
   13814:	f013 0f04 	tst.w	r3, #4
   13818:	f040 809c 	bne.w	13954 <z_cbvprintf_impl+0x524>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1381c:	f013 0f40 	tst.w	r3, #64	; 0x40
   13820:	f000 8091 	beq.w	13946 <z_cbvprintf_impl+0x516>
					if (sign != 0) {
   13824:	2800      	cmp	r0, #0
   13826:	f000 8091 	beq.w	1394c <z_cbvprintf_impl+0x51c>
						OUTC(sign);
   1382a:	4629      	mov	r1, r5
   1382c:	47b0      	blx	r6
   1382e:	2800      	cmp	r0, #0
   13830:	f2c0 8151 	blt.w	13ad6 <z_cbvprintf_impl+0x6a6>
   13834:	3401      	adds	r4, #1
						sign = 0;
   13836:	2300      	movs	r3, #0
   13838:	f88d 3013 	strb.w	r3, [sp, #19]
					}
					pad = '0';
   1383c:	f04f 0a30 	mov.w	sl, #48	; 0x30
   13840:	e086      	b.n	13950 <z_cbvprintf_impl+0x520>
				len = strlen(bps);
   13842:	4640      	mov	r0, r8
   13844:	f7f9 f94a 	bl	cadc <strlen>
   13848:	e7c3      	b.n	137d2 <z_cbvprintf_impl+0x3a2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1384a:	9b06      	ldr	r3, [sp, #24]
   1384c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			bpe = buf + 1;
   13850:	f10d 0335 	add.w	r3, sp, #53	; 0x35
   13854:	9305      	str	r3, [sp, #20]
			bps = buf;
   13856:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   1385a:	e7c0      	b.n	137de <z_cbvprintf_impl+0x3ae>
			if (conv->flag_plus) {
   1385c:	f012 0f08 	tst.w	r2, #8
   13860:	d023      	beq.n	138aa <z_cbvprintf_impl+0x47a>
				sign = '+';
   13862:	232b      	movs	r3, #43	; 0x2b
   13864:	f88d 3013 	strb.w	r3, [sp, #19]
			sint = value->sint;
   13868:	9a06      	ldr	r2, [sp, #24]
   1386a:	9b07      	ldr	r3, [sp, #28]
			if (sint < 0) {
   1386c:	2b00      	cmp	r3, #0
   1386e:	db23      	blt.n	138b8 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)sint;
   13870:	9206      	str	r2, [sp, #24]
   13872:	9307      	str	r3, [sp, #28]
			bps = encode_uint(value->uint, conv, buf, bpe);
   13874:	9b05      	ldr	r3, [sp, #20]
   13876:	9300      	str	r3, [sp, #0]
   13878:	ab0d      	add	r3, sp, #52	; 0x34
   1387a:	aa08      	add	r2, sp, #32
   1387c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13880:	f7ff fb8c 	bl	12f9c <encode_uint>
   13884:	4680      	mov	r8, r0
			if (precision >= 0) {
   13886:	f1ba 0f00 	cmp.w	sl, #0
   1388a:	dba4      	blt.n	137d6 <z_cbvprintf_impl+0x3a6>
				size_t len = bpe - bps;
   1388c:	9b05      	ldr	r3, [sp, #20]
   1388e:	eba3 0308 	sub.w	r3, r3, r8
				conv->flag_zero = false;
   13892:	f89d 2020 	ldrb.w	r2, [sp, #32]
   13896:	f36f 1286 	bfc	r2, #6, #1
   1389a:	f88d 2020 	strb.w	r2, [sp, #32]
				if (len < (size_t)precision) {
   1389e:	459a      	cmp	sl, r3
   138a0:	d999      	bls.n	137d6 <z_cbvprintf_impl+0x3a6>
					conv->pad0_value = precision - (int)len;
   138a2:	ebaa 0303 	sub.w	r3, sl, r3
   138a6:	9309      	str	r3, [sp, #36]	; 0x24
   138a8:	e795      	b.n	137d6 <z_cbvprintf_impl+0x3a6>
			} else if (conv->flag_space) {
   138aa:	f012 0f10 	tst.w	r2, #16
   138ae:	d0db      	beq.n	13868 <z_cbvprintf_impl+0x438>
				sign = ' ';
   138b0:	2320      	movs	r3, #32
   138b2:	f88d 3013 	strb.w	r3, [sp, #19]
   138b6:	e7d7      	b.n	13868 <z_cbvprintf_impl+0x438>
				sign = '-';
   138b8:	212d      	movs	r1, #45	; 0x2d
   138ba:	f88d 1013 	strb.w	r1, [sp, #19]
				value->uint = (uint_value_type)-sint;
   138be:	4252      	negs	r2, r2
   138c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   138c4:	9206      	str	r2, [sp, #24]
   138c6:	9307      	str	r3, [sp, #28]
   138c8:	e7d4      	b.n	13874 <z_cbvprintf_impl+0x444>
			if (value->ptr != NULL) {
   138ca:	9806      	ldr	r0, [sp, #24]
   138cc:	b920      	cbnz	r0, 138d8 <z_cbvprintf_impl+0x4a8>
			bpe = bps + 5;
   138ce:	4b83      	ldr	r3, [pc, #524]	; (13adc <z_cbvprintf_impl+0x6ac>)
   138d0:	9305      	str	r3, [sp, #20]
			bps = "(nil)";
   138d2:	f1a3 0805 	sub.w	r8, r3, #5
   138d6:	e782      	b.n	137de <z_cbvprintf_impl+0x3ae>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   138d8:	9b05      	ldr	r3, [sp, #20]
   138da:	9300      	str	r3, [sp, #0]
   138dc:	ab0d      	add	r3, sp, #52	; 0x34
   138de:	aa08      	add	r2, sp, #32
   138e0:	2100      	movs	r1, #0
   138e2:	f7ff fb5b 	bl	12f9c <encode_uint>
   138e6:	4680      	mov	r8, r0
				conv->altform_0c = true;
   138e8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   138ec:	f043 0310 	orr.w	r3, r3, #16
   138f0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   138f4:	2378      	movs	r3, #120	; 0x78
   138f6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				goto prec_int_pad0;
   138fa:	e7c4      	b.n	13886 <z_cbvprintf_impl+0x456>
				store_count(conv, value->ptr, count);
   138fc:	4622      	mov	r2, r4
   138fe:	9906      	ldr	r1, [sp, #24]
   13900:	a808      	add	r0, sp, #32
   13902:	f014 ff0b 	bl	2871c <store_count>
		fp = extract_conversion(conv, sp);
   13906:	46c8      	mov	r8, r9
			continue;
   13908:	e59a      	b.n	13440 <z_cbvprintf_impl+0x10>
				bps = encode_float(value->dbl, conv, precision,
   1390a:	ab05      	add	r3, sp, #20
   1390c:	9300      	str	r3, [sp, #0]
   1390e:	ab0d      	add	r3, sp, #52	; 0x34
   13910:	f10d 0213 	add.w	r2, sp, #19
   13914:	4651      	mov	r1, sl
   13916:	a808      	add	r0, sp, #32
   13918:	ed9d 0b06 	vldr	d0, [sp, #24]
   1391c:	f7ff fb94 	bl	13048 <encode_float>
   13920:	4680      	mov	r8, r0
			break;
   13922:	e758      	b.n	137d6 <z_cbvprintf_impl+0x3a6>
		} else if (conv->altform_0) {
   13924:	f011 0f08 	tst.w	r1, #8
   13928:	f43f af67 	beq.w	137fa <z_cbvprintf_impl+0x3ca>
			nj_len += 1U;
   1392c:	3301      	adds	r3, #1
   1392e:	e764      	b.n	137fa <z_cbvprintf_impl+0x3ca>
				}

				while (width-- > 0) {
					OUTC(pad);
   13930:	3401      	adds	r4, #1
				while (width-- > 0) {
   13932:	463b      	mov	r3, r7
   13934:	1e5f      	subs	r7, r3, #1
   13936:	2b00      	cmp	r3, #0
   13938:	dd0c      	ble.n	13954 <z_cbvprintf_impl+0x524>
					OUTC(pad);
   1393a:	4629      	mov	r1, r5
   1393c:	4650      	mov	r0, sl
   1393e:	47b0      	blx	r6
   13940:	2800      	cmp	r0, #0
   13942:	daf5      	bge.n	13930 <z_cbvprintf_impl+0x500>
   13944:	e0c7      	b.n	13ad6 <z_cbvprintf_impl+0x6a6>
				char pad = ' ';
   13946:	f04f 0a20 	mov.w	sl, #32
   1394a:	e001      	b.n	13950 <z_cbvprintf_impl+0x520>
					pad = '0';
   1394c:	f04f 0a30 	mov.w	sl, #48	; 0x30
   13950:	463b      	mov	r3, r7
   13952:	e7ef      	b.n	13934 <z_cbvprintf_impl+0x504>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   13954:	f89d 0013 	ldrb.w	r0, [sp, #19]
   13958:	b128      	cbz	r0, 13966 <z_cbvprintf_impl+0x536>
			OUTC(sign);
   1395a:	4629      	mov	r1, r5
   1395c:	47b0      	blx	r6
   1395e:	2800      	cmp	r0, #0
   13960:	f2c0 80b9 	blt.w	13ad6 <z_cbvprintf_impl+0x6a6>
   13964:	3401      	adds	r4, #1
		}

		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   13966:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1396a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1396e:	d074      	beq.n	13a5a <z_cbvprintf_impl+0x62a>
			const char *cp = bps;

			if (conv->specifier_a) {
   13970:	f99d 3021 	ldrsb.w	r3, [sp, #33]	; 0x21
   13974:	2b00      	cmp	r3, #0
   13976:	db0f      	blt.n	13998 <z_cbvprintf_impl+0x568>
				/* Only padding is pre_exp */
				while (*cp != 'p') {
					OUTC(*cp++);
				}
			} else {
				while (isdigit((unsigned char)*cp)) {
   13978:	f898 0000 	ldrb.w	r0, [r8]
   1397c:	4b58      	ldr	r3, [pc, #352]	; (13ae0 <z_cbvprintf_impl+0x6b0>)
   1397e:	5c1b      	ldrb	r3, [r3, r0]
   13980:	f013 0f04 	tst.w	r3, #4
   13984:	d015      	beq.n	139b2 <z_cbvprintf_impl+0x582>
					OUTC(*cp++);
   13986:	f108 0801 	add.w	r8, r8, #1
   1398a:	4629      	mov	r1, r5
   1398c:	47b0      	blx	r6
   1398e:	2800      	cmp	r0, #0
   13990:	f2c0 80a1 	blt.w	13ad6 <z_cbvprintf_impl+0x6a6>
   13994:	3401      	adds	r4, #1
   13996:	e7ef      	b.n	13978 <z_cbvprintf_impl+0x548>
				while (*cp != 'p') {
   13998:	f898 0000 	ldrb.w	r0, [r8]
   1399c:	2870      	cmp	r0, #112	; 0x70
   1399e:	d045      	beq.n	13a2c <z_cbvprintf_impl+0x5fc>
					OUTC(*cp++);
   139a0:	f108 0801 	add.w	r8, r8, #1
   139a4:	4629      	mov	r1, r5
   139a6:	47b0      	blx	r6
   139a8:	2800      	cmp	r0, #0
   139aa:	f2c0 8094 	blt.w	13ad6 <z_cbvprintf_impl+0x6a6>
   139ae:	3401      	adds	r4, #1
   139b0:	e7f2      	b.n	13998 <z_cbvprintf_impl+0x568>
				}

				pad_len = conv->pad0_value;
   139b2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
				if (!conv->pad_postdp) {
   139b6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   139ba:	f013 0f20 	tst.w	r3, #32
   139be:	d012      	beq.n	139e6 <z_cbvprintf_impl+0x5b6>
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}

				if (*cp == '.') {
   139c0:	f898 0000 	ldrb.w	r0, [r8]
   139c4:	282e      	cmp	r0, #46	; 0x2e
   139c6:	d01d      	beq.n	13a04 <z_cbvprintf_impl+0x5d4>
					 */
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}
				while (isdigit((unsigned char)*cp)) {
   139c8:	f898 0000 	ldrb.w	r0, [r8]
   139cc:	4b44      	ldr	r3, [pc, #272]	; (13ae0 <z_cbvprintf_impl+0x6b0>)
   139ce:	5c1b      	ldrb	r3, [r3, r0]
   139d0:	f013 0f04 	tst.w	r3, #4
   139d4:	d02a      	beq.n	13a2c <z_cbvprintf_impl+0x5fc>
					OUTC(*cp++);
   139d6:	f108 0801 	add.w	r8, r8, #1
   139da:	4629      	mov	r1, r5
   139dc:	47b0      	blx	r6
   139de:	2800      	cmp	r0, #0
   139e0:	db79      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   139e2:	3401      	adds	r4, #1
   139e4:	e7f0      	b.n	139c8 <z_cbvprintf_impl+0x598>
					while (pad_len-- > 0) {
   139e6:	f10a 3bff 	add.w	fp, sl, #4294967295
   139ea:	f1ba 0f00 	cmp.w	sl, #0
   139ee:	dd07      	ble.n	13a00 <z_cbvprintf_impl+0x5d0>
						OUTC('0');
   139f0:	4629      	mov	r1, r5
   139f2:	2030      	movs	r0, #48	; 0x30
   139f4:	47b0      	blx	r6
   139f6:	2800      	cmp	r0, #0
   139f8:	db6d      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   139fa:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   139fc:	46da      	mov	sl, fp
   139fe:	e7f2      	b.n	139e6 <z_cbvprintf_impl+0x5b6>
   13a00:	46da      	mov	sl, fp
   13a02:	e7dd      	b.n	139c0 <z_cbvprintf_impl+0x590>
					OUTC(*cp++);
   13a04:	f108 0801 	add.w	r8, r8, #1
   13a08:	4629      	mov	r1, r5
   13a0a:	47b0      	blx	r6
   13a0c:	2800      	cmp	r0, #0
   13a0e:	db62      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   13a10:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   13a12:	f10a 3bff 	add.w	fp, sl, #4294967295
   13a16:	f1ba 0f00 	cmp.w	sl, #0
   13a1a:	ddd5      	ble.n	139c8 <z_cbvprintf_impl+0x598>
						OUTC('0');
   13a1c:	4629      	mov	r1, r5
   13a1e:	2030      	movs	r0, #48	; 0x30
   13a20:	47b0      	blx	r6
   13a22:	2800      	cmp	r0, #0
   13a24:	db57      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   13a26:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   13a28:	46da      	mov	sl, fp
   13a2a:	e7f2      	b.n	13a12 <z_cbvprintf_impl+0x5e2>
				}
			}

			pad_len = conv->pad0_pre_exp;
   13a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			while (pad_len-- > 0) {
   13a2e:	f103 3aff 	add.w	sl, r3, #4294967295
   13a32:	2b00      	cmp	r3, #0
   13a34:	dd07      	ble.n	13a46 <z_cbvprintf_impl+0x616>
				OUTC('0');
   13a36:	4629      	mov	r1, r5
   13a38:	2030      	movs	r0, #48	; 0x30
   13a3a:	47b0      	blx	r6
   13a3c:	2800      	cmp	r0, #0
   13a3e:	db4a      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   13a40:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   13a42:	4653      	mov	r3, sl
   13a44:	e7f3      	b.n	13a2e <z_cbvprintf_impl+0x5fe>
			}

			OUTS(cp, bpe);
   13a46:	9b05      	ldr	r3, [sp, #20]
   13a48:	4642      	mov	r2, r8
   13a4a:	4629      	mov	r1, r5
   13a4c:	4630      	mov	r0, r6
   13a4e:	f014 fe84 	bl	2875a <outs>
   13a52:	2800      	cmp	r0, #0
   13a54:	db3f      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   13a56:	4404      	add	r4, r0
   13a58:	e032      	b.n	13ac0 <z_cbvprintf_impl+0x690>
		} else {
			if (conv->altform_0c | conv->altform_0) {
   13a5a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   13a5e:	f3c3 1200 	ubfx	r2, r3, #4, #1
   13a62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13a66:	431a      	orrs	r2, r3
   13a68:	d005      	beq.n	13a76 <z_cbvprintf_impl+0x646>
				OUTC('0');
   13a6a:	4629      	mov	r1, r5
   13a6c:	2030      	movs	r0, #48	; 0x30
   13a6e:	47b0      	blx	r6
   13a70:	2800      	cmp	r0, #0
   13a72:	db30      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   13a74:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   13a76:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   13a7a:	f013 0f10 	tst.w	r3, #16
   13a7e:	d006      	beq.n	13a8e <z_cbvprintf_impl+0x65e>
				OUTC(conv->specifier);
   13a80:	4629      	mov	r1, r5
   13a82:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   13a86:	47b0      	blx	r6
   13a88:	2800      	cmp	r0, #0
   13a8a:	db24      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   13a8c:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   13a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   13a90:	f103 3aff 	add.w	sl, r3, #4294967295
   13a94:	2b00      	cmp	r3, #0
   13a96:	dd07      	ble.n	13aa8 <z_cbvprintf_impl+0x678>
				OUTC('0');
   13a98:	4629      	mov	r1, r5
   13a9a:	2030      	movs	r0, #48	; 0x30
   13a9c:	47b0      	blx	r6
   13a9e:	2800      	cmp	r0, #0
   13aa0:	db19      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   13aa2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   13aa4:	4653      	mov	r3, sl
   13aa6:	e7f3      	b.n	13a90 <z_cbvprintf_impl+0x660>
			}

			OUTS(bps, bpe);
   13aa8:	9b05      	ldr	r3, [sp, #20]
   13aaa:	4642      	mov	r2, r8
   13aac:	4629      	mov	r1, r5
   13aae:	4630      	mov	r0, r6
   13ab0:	f014 fe53 	bl	2875a <outs>
   13ab4:	2800      	cmp	r0, #0
   13ab6:	db0e      	blt.n	13ad6 <z_cbvprintf_impl+0x6a6>
   13ab8:	4404      	add	r4, r0
   13aba:	e001      	b.n	13ac0 <z_cbvprintf_impl+0x690>
		}

		/* Finish left justification */
		while (width > 0) {
			OUTC(' ');
   13abc:	3401      	adds	r4, #1
			--width;
   13abe:	3f01      	subs	r7, #1
		while (width > 0) {
   13ac0:	2f00      	cmp	r7, #0
   13ac2:	dd05      	ble.n	13ad0 <z_cbvprintf_impl+0x6a0>
			OUTC(' ');
   13ac4:	4629      	mov	r1, r5
   13ac6:	2020      	movs	r0, #32
   13ac8:	47b0      	blx	r6
   13aca:	2800      	cmp	r0, #0
   13acc:	daf6      	bge.n	13abc <z_cbvprintf_impl+0x68c>
   13ace:	e002      	b.n	13ad6 <z_cbvprintf_impl+0x6a6>
		fp = extract_conversion(conv, sp);
   13ad0:	46c8      	mov	r8, r9
   13ad2:	e4b5      	b.n	13440 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   13ad4:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   13ad6:	b015      	add	sp, #84	; 0x54
   13ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13adc:	0002f495 	.word	0x0002f495
   13ae0:	00031ad1 	.word	0x00031ad1

00013ae4 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13ae4:	b508      	push	{r3, lr}
   13ae6:	f04f 0240 	mov.w	r2, #64	; 0x40
   13aea:	f3ef 8311 	mrs	r3, BASEPRI
   13aee:	f382 8812 	msr	BASEPRI_MAX, r2
   13af2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   13af6:	f015 fde1 	bl	296bc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   13afa:	4803      	ldr	r0, [pc, #12]	; (13b08 <sys_reboot+0x24>)
   13afc:	f014 f84a 	bl	27b94 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   13b00:	f001 fa74 	bl	14fec <arch_cpu_idle>
   13b04:	e7fc      	b.n	13b00 <sys_reboot+0x1c>
   13b06:	bf00      	nop
   13b08:	0002f498 	.word	0x0002f498

00013b0c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13b0c:	f00d b8a2 	b.w	20c54 <SystemInit>

00013b10 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   13b10:	b538      	push	{r3, r4, r5, lr}
   13b12:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13b14:	4c0b      	ldr	r4, [pc, #44]	; (13b44 <msg_process+0x34>)
   13b16:	e000      	b.n	13b1a <msg_process+0xa>
   13b18:	3410      	adds	r4, #16
   13b1a:	4b0b      	ldr	r3, [pc, #44]	; (13b48 <msg_process+0x38>)
   13b1c:	429c      	cmp	r4, r3
   13b1e:	d20f      	bcs.n	13b40 <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13b20:	6863      	ldr	r3, [r4, #4]
   13b22:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
   13b24:	2b00      	cmp	r3, #0
   13b26:	d0f7      	beq.n	13b18 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   13b28:	4629      	mov	r1, r5
   13b2a:	4620      	mov	r0, r4
   13b2c:	f015 f8d1 	bl	28cd2 <msg_filter_check>
		if (log_backend_is_active(backend) &&
   13b30:	2800      	cmp	r0, #0
   13b32:	d0f1      	beq.n	13b18 <msg_process+0x8>
	backend->api->process(backend, msg);
   13b34:	6823      	ldr	r3, [r4, #0]
   13b36:	681b      	ldr	r3, [r3, #0]
   13b38:	4629      	mov	r1, r5
   13b3a:	4620      	mov	r0, r4
   13b3c:	4798      	blx	r3
}
   13b3e:	e7eb      	b.n	13b18 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
   13b40:	bd38      	pop	{r3, r4, r5, pc}
   13b42:	bf00      	nop
   13b44:	0002ef68 	.word	0x0002ef68
   13b48:	0002ef88 	.word	0x0002ef88

00013b4c <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   13b4c:	b570      	push	{r4, r5, r6, lr}
   13b4e:	4606      	mov	r6, r0
   13b50:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13b52:	4c08      	ldr	r4, [pc, #32]	; (13b74 <log_backend_notify_all+0x28>)
   13b54:	e004      	b.n	13b60 <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
   13b56:	462a      	mov	r2, r5
   13b58:	4631      	mov	r1, r6
   13b5a:	4620      	mov	r0, r4
   13b5c:	4798      	blx	r3
   13b5e:	3410      	adds	r4, #16
   13b60:	4b05      	ldr	r3, [pc, #20]	; (13b78 <log_backend_notify_all+0x2c>)
   13b62:	429c      	cmp	r4, r3
   13b64:	d204      	bcs.n	13b70 <log_backend_notify_all+0x24>
	if (backend->api->notify) {
   13b66:	6823      	ldr	r3, [r4, #0]
   13b68:	699b      	ldr	r3, [r3, #24]
   13b6a:	2b00      	cmp	r3, #0
   13b6c:	d1f3      	bne.n	13b56 <log_backend_notify_all+0xa>
   13b6e:	e7f6      	b.n	13b5e <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
   13b70:	bd70      	pop	{r4, r5, r6, pc}
   13b72:	bf00      	nop
   13b74:	0002ef68 	.word	0x0002ef68
   13b78:	0002ef88 	.word	0x0002ef88

00013b7c <activate_foreach_backend>:
{
   13b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b80:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   13b82:	4605      	mov	r5, r0
	while (mask_cpy) {
   13b84:	e00a      	b.n	13b9c <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
   13b86:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   13b8a:	4b14      	ldr	r3, [pc, #80]	; (13bdc <activate_foreach_backend+0x60>)
   13b8c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   13b90:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   13b92:	2204      	movs	r2, #4
   13b94:	6819      	ldr	r1, [r3, #0]
   13b96:	4620      	mov	r0, r4
   13b98:	f000 faa4 	bl	140e4 <log_backend_enable>
	while (mask_cpy) {
   13b9c:	b1d5      	cbz	r5, 13bd4 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
   13b9e:	fa95 f6a5 	rbit	r6, r5
   13ba2:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   13ba6:	4c0d      	ldr	r4, [pc, #52]	; (13bdc <activate_foreach_backend+0x60>)
   13ba8:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   13bac:	2301      	movs	r3, #1
   13bae:	40b3      	lsls	r3, r6
   13bb0:	ea6f 0803 	mvn.w	r8, r3
   13bb4:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13bb8:	7b23      	ldrb	r3, [r4, #12]
   13bba:	2b00      	cmp	r3, #0
   13bbc:	d0ee      	beq.n	13b9c <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
   13bbe:	0133      	lsls	r3, r6, #4
   13bc0:	4a06      	ldr	r2, [pc, #24]	; (13bdc <activate_foreach_backend+0x60>)
   13bc2:	58d3      	ldr	r3, [r2, r3]
   13bc4:	691b      	ldr	r3, [r3, #16]
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	d0dd      	beq.n	13b86 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
   13bca:	4620      	mov	r0, r4
   13bcc:	4798      	blx	r3
   13bce:	2800      	cmp	r0, #0
   13bd0:	d1e4      	bne.n	13b9c <activate_foreach_backend+0x20>
   13bd2:	e7d8      	b.n	13b86 <activate_foreach_backend+0xa>
}
   13bd4:	4638      	mov	r0, r7
   13bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bda:	bf00      	nop
   13bdc:	0002ef68 	.word	0x0002ef68

00013be0 <z_log_init>:
{
   13be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13be4:	4680      	mov	r8, r0
   13be6:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13be8:	4b20      	ldr	r3, [pc, #128]	; (13c6c <z_log_init+0x8c>)
   13bea:	f3bf 8f5b 	dmb	ish
   13bee:	e853 5f00 	ldrex	r5, [r3]
   13bf2:	1c6a      	adds	r2, r5, #1
   13bf4:	e843 2100 	strex	r1, r2, [r3]
   13bf8:	2900      	cmp	r1, #0
   13bfa:	d1f8      	bne.n	13bee <z_log_init+0xe>
   13bfc:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   13c00:	2d00      	cmp	r5, #0
   13c02:	d12f      	bne.n	13c64 <z_log_init+0x84>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c04:	4c1a      	ldr	r4, [pc, #104]	; (13c70 <z_log_init+0x90>)
	int i = 0;
   13c06:	2600      	movs	r6, #0
   13c08:	e007      	b.n	13c1a <z_log_init+0x3a>
						   backend->cb->ctx,
   13c0a:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   13c0c:	2204      	movs	r2, #4
   13c0e:	6819      	ldr	r1, [r3, #0]
   13c10:	4620      	mov	r0, r4
   13c12:	f000 fa67 	bl	140e4 <log_backend_enable>
			i++;
   13c16:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c18:	3410      	adds	r4, #16
   13c1a:	4b16      	ldr	r3, [pc, #88]	; (13c74 <z_log_init+0x94>)
   13c1c:	429c      	cmp	r4, r3
   13c1e:	d213      	bcs.n	13c48 <z_log_init+0x68>
		if (backend->autostart) {
   13c20:	7b23      	ldrb	r3, [r4, #12]
   13c22:	2b00      	cmp	r3, #0
   13c24:	d0f8      	beq.n	13c18 <z_log_init+0x38>
	if (backend->api->init) {
   13c26:	6823      	ldr	r3, [r4, #0]
   13c28:	68db      	ldr	r3, [r3, #12]
   13c2a:	b10b      	cbz	r3, 13c30 <z_log_init+0x50>
		backend->api->init(backend);
   13c2c:	4620      	mov	r0, r4
   13c2e:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   13c30:	6823      	ldr	r3, [r4, #0]
   13c32:	691b      	ldr	r3, [r3, #16]
   13c34:	2b00      	cmp	r3, #0
   13c36:	d0e8      	beq.n	13c0a <z_log_init+0x2a>
		return backend->api->is_ready(backend);
   13c38:	4620      	mov	r0, r4
   13c3a:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13c3c:	2800      	cmp	r0, #0
   13c3e:	d0e4      	beq.n	13c0a <z_log_init+0x2a>
				mask |= BIT(i);
   13c40:	2301      	movs	r3, #1
   13c42:	40b3      	lsls	r3, r6
   13c44:	431d      	orrs	r5, r3
   13c46:	e7e6      	b.n	13c16 <z_log_init+0x36>
	if (blocking) {
   13c48:	f1b8 0f00 	cmp.w	r8, #0
   13c4c:	d00b      	beq.n	13c66 <z_log_init+0x86>
		while (mask) {
   13c4e:	b155      	cbz	r5, 13c66 <z_log_init+0x86>
			mask = activate_foreach_backend(mask);
   13c50:	4628      	mov	r0, r5
   13c52:	f7ff ff93 	bl	13b7c <activate_foreach_backend>
   13c56:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13c58:	2f00      	cmp	r7, #0
   13c5a:	d0f8      	beq.n	13c4e <z_log_init+0x6e>
				k_msleep(10);
   13c5c:	200a      	movs	r0, #10
   13c5e:	f015 f83e 	bl	28cde <k_msleep>
   13c62:	e7f4      	b.n	13c4e <z_log_init+0x6e>
		return 0;
   13c64:	2500      	movs	r5, #0
}
   13c66:	4628      	mov	r0, r5
   13c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c6c:	200030e4 	.word	0x200030e4
   13c70:	0002ef68 	.word	0x0002ef68
   13c74:	0002ef88 	.word	0x0002ef88

00013c78 <thread_set>:
{
   13c78:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   13c7a:	4b06      	ldr	r3, [pc, #24]	; (13c94 <thread_set+0x1c>)
   13c7c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13c7e:	b118      	cbz	r0, 13c88 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13c80:	4b05      	ldr	r3, [pc, #20]	; (13c98 <thread_set+0x20>)
   13c82:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   13c84:	2b09      	cmp	r3, #9
   13c86:	dc00      	bgt.n	13c8a <thread_set+0x12>
}
   13c88:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13c8a:	4804      	ldr	r0, [pc, #16]	; (13c9c <thread_set+0x24>)
   13c8c:	f00e fafc 	bl	22288 <z_impl_k_sem_give>
}
   13c90:	e7fa      	b.n	13c88 <thread_set+0x10>
   13c92:	bf00      	nop
   13c94:	200030d8 	.word	0x200030d8
   13c98:	200030e0 	.word	0x200030e0
   13c9c:	20000c1c 	.word	0x20000c1c

00013ca0 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   13ca0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   13ca2:	4802      	ldr	r0, [pc, #8]	; (13cac <log_process_thread_timer_expiry_fn+0xc>)
   13ca4:	f00e faf0 	bl	22288 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   13ca8:	bd08      	pop	{r3, pc}
   13caa:	bf00      	nop
   13cac:	20000c1c 	.word	0x20000c1c

00013cb0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   13cb0:	b530      	push	{r4, r5, lr}
   13cb2:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13cb4:	2200      	movs	r2, #0
   13cb6:	490f      	ldr	r1, [pc, #60]	; (13cf4 <enable_logger+0x44>)
   13cb8:	480f      	ldr	r0, [pc, #60]	; (13cf8 <enable_logger+0x48>)
   13cba:	f01a f919 	bl	2def0 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13cbe:	4d0f      	ldr	r5, [pc, #60]	; (13cfc <enable_logger+0x4c>)
   13cc0:	2200      	movs	r2, #0
   13cc2:	2300      	movs	r3, #0
   13cc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13cc8:	2400      	movs	r4, #0
   13cca:	9404      	str	r4, [sp, #16]
   13ccc:	230e      	movs	r3, #14
   13cce:	9303      	str	r3, [sp, #12]
   13cd0:	9402      	str	r4, [sp, #8]
   13cd2:	9401      	str	r4, [sp, #4]
   13cd4:	9400      	str	r4, [sp, #0]
   13cd6:	4b0a      	ldr	r3, [pc, #40]	; (13d00 <enable_logger+0x50>)
   13cd8:	f44f 7240 	mov.w	r2, #768	; 0x300
   13cdc:	4909      	ldr	r1, [pc, #36]	; (13d04 <enable_logger+0x54>)
   13cde:	4628      	mov	r0, r5
   13ce0:	f019 fc1a 	bl	2d518 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13ce4:	4908      	ldr	r1, [pc, #32]	; (13d08 <enable_logger+0x58>)
   13ce6:	4628      	mov	r0, r5
   13ce8:	f00e f8e2 	bl	21eb0 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   13cec:	4620      	mov	r0, r4
   13cee:	b009      	add	sp, #36	; 0x24
   13cf0:	bd30      	pop	{r4, r5, pc}
   13cf2:	bf00      	nop
   13cf4:	00013ca1 	.word	0x00013ca1
   13cf8:	20001e90 	.word	0x20001e90
   13cfc:	20001990 	.word	0x20001990
   13d00:	00014045 	.word	0x00014045
   13d04:	20004b80 	.word	0x20004b80
   13d08:	0002f4c4 	.word	0x0002f4c4

00013d0c <log_format_func_t_get>:
}
   13d0c:	4b01      	ldr	r3, [pc, #4]	; (13d14 <log_format_func_t_get+0x8>)
   13d0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13d12:	4770      	bx	lr
   13d14:	0002f4e0 	.word	0x0002f4e0

00013d18 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   13d18:	b148      	cbz	r0, 13d2e <log_set_timestamp_func+0x16>
{
   13d1a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   13d1c:	4a05      	ldr	r2, [pc, #20]	; (13d34 <log_set_timestamp_func+0x1c>)
   13d1e:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   13d20:	4b05      	ldr	r3, [pc, #20]	; (13d38 <log_set_timestamp_func+0x20>)
   13d22:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   13d24:	4608      	mov	r0, r1
   13d26:	f000 fc01 	bl	1452c <log_output_timestamp_freq_set>
	return 0;
   13d2a:	2000      	movs	r0, #0
}
   13d2c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13d2e:	f06f 0015 	mvn.w	r0, #21
}
   13d32:	4770      	bx	lr
   13d34:	200005a0 	.word	0x200005a0
   13d38:	200030d4 	.word	0x200030d4

00013d3c <z_log_notify_backend_enabled>:
{
   13d3c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13d3e:	4b05      	ldr	r3, [pc, #20]	; (13d54 <z_log_notify_backend_enabled+0x18>)
   13d40:	781b      	ldrb	r3, [r3, #0]
   13d42:	b11b      	cbz	r3, 13d4c <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   13d44:	4b03      	ldr	r3, [pc, #12]	; (13d54 <z_log_notify_backend_enabled+0x18>)
   13d46:	2201      	movs	r2, #1
   13d48:	701a      	strb	r2, [r3, #0]
}
   13d4a:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   13d4c:	4802      	ldr	r0, [pc, #8]	; (13d58 <z_log_notify_backend_enabled+0x1c>)
   13d4e:	f00e fa9b 	bl	22288 <z_impl_k_sem_give>
}
   13d52:	e7f7      	b.n	13d44 <z_log_notify_backend_enabled+0x8>
   13d54:	20004b63 	.word	0x20004b63
   13d58:	20000c1c 	.word	0x20000c1c

00013d5c <z_log_dropped>:
   13d5c:	4b0d      	ldr	r3, [pc, #52]	; (13d94 <z_log_dropped+0x38>)
   13d5e:	f3bf 8f5b 	dmb	ish
   13d62:	e853 1f00 	ldrex	r1, [r3]
   13d66:	3101      	adds	r1, #1
   13d68:	e843 1200 	strex	r2, r1, [r3]
   13d6c:	2a00      	cmp	r2, #0
   13d6e:	d1f8      	bne.n	13d62 <z_log_dropped+0x6>
   13d70:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   13d74:	b900      	cbnz	r0, 13d78 <z_log_dropped+0x1c>
}
   13d76:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13d78:	4b07      	ldr	r3, [pc, #28]	; (13d98 <z_log_dropped+0x3c>)
   13d7a:	f3bf 8f5b 	dmb	ish
   13d7e:	e853 1f00 	ldrex	r1, [r3]
   13d82:	3901      	subs	r1, #1
   13d84:	e843 1200 	strex	r2, r1, [r3]
   13d88:	2a00      	cmp	r2, #0
   13d8a:	d1f8      	bne.n	13d7e <z_log_dropped+0x22>
   13d8c:	f3bf 8f5b 	dmb	ish
   13d90:	e7f1      	b.n	13d76 <z_log_dropped+0x1a>
   13d92:	bf00      	nop
   13d94:	200030dc 	.word	0x200030dc
   13d98:	200030e0 	.word	0x200030e0

00013d9c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13d9c:	4b06      	ldr	r3, [pc, #24]	; (13db8 <z_log_dropped_read_and_clear+0x1c>)
}
   13d9e:	2000      	movs	r0, #0
   13da0:	4601      	mov	r1, r0
   13da2:	f3bf 8f5b 	dmb	ish
   13da6:	e853 0f00 	ldrex	r0, [r3]
   13daa:	e843 1200 	strex	r2, r1, [r3]
   13dae:	2a00      	cmp	r2, #0
   13db0:	d1f9      	bne.n	13da6 <z_log_dropped_read_and_clear+0xa>
   13db2:	f3bf 8f5b 	dmb	ish
   13db6:	4770      	bx	lr
   13db8:	200030dc 	.word	0x200030dc

00013dbc <dropped_notify>:
{
   13dbc:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13dbe:	f7ff ffed 	bl	13d9c <z_log_dropped_read_and_clear>
   13dc2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13dc4:	4c09      	ldr	r4, [pc, #36]	; (13dec <dropped_notify+0x30>)
   13dc6:	e000      	b.n	13dca <dropped_notify+0xe>
   13dc8:	3410      	adds	r4, #16
   13dca:	4b09      	ldr	r3, [pc, #36]	; (13df0 <dropped_notify+0x34>)
   13dcc:	429c      	cmp	r4, r3
   13dce:	d20b      	bcs.n	13de8 <dropped_notify+0x2c>
	return backend->cb->active;
   13dd0:	6863      	ldr	r3, [r4, #4]
   13dd2:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13dd4:	2b00      	cmp	r3, #0
   13dd6:	d0f7      	beq.n	13dc8 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   13dd8:	6823      	ldr	r3, [r4, #0]
   13dda:	685b      	ldr	r3, [r3, #4]
   13ddc:	2b00      	cmp	r3, #0
   13dde:	d0f3      	beq.n	13dc8 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   13de0:	4629      	mov	r1, r5
   13de2:	4620      	mov	r0, r4
   13de4:	4798      	blx	r3
   13de6:	e7ef      	b.n	13dc8 <dropped_notify+0xc>
}
   13de8:	bd38      	pop	{r3, r4, r5, pc}
   13dea:	bf00      	nop
   13dec:	0002ef68 	.word	0x0002ef68
   13df0:	0002ef88 	.word	0x0002ef88

00013df4 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   13df4:	4b03      	ldr	r3, [pc, #12]	; (13e04 <z_log_dropped_pending+0x10>)
   13df6:	6818      	ldr	r0, [r3, #0]
}
   13df8:	2800      	cmp	r0, #0
   13dfa:	bfd4      	ite	le
   13dfc:	2000      	movle	r0, #0
   13dfe:	2001      	movgt	r0, #1
   13e00:	4770      	bx	lr
   13e02:	bf00      	nop
   13e04:	200030dc 	.word	0x200030dc

00013e08 <z_log_msg_init>:
{
   13e08:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13e0a:	4c04      	ldr	r4, [pc, #16]	; (13e1c <z_log_msg_init+0x14>)
   13e0c:	4904      	ldr	r1, [pc, #16]	; (13e20 <z_log_msg_init+0x18>)
   13e0e:	4620      	mov	r0, r4
   13e10:	f014 fdb9 	bl	28986 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13e14:	4b03      	ldr	r3, [pc, #12]	; (13e24 <z_log_msg_init+0x1c>)
   13e16:	601c      	str	r4, [r3, #0]
}
   13e18:	bd10      	pop	{r4, pc}
   13e1a:	bf00      	nop
   13e1c:	20000ad0 	.word	0x20000ad0
   13e20:	0002f4cc 	.word	0x0002f4cc
   13e24:	200030d0 	.word	0x200030d0

00013e28 <log_core_init>:
{
   13e28:	b508      	push	{r3, lr}
	panic_mode = false;
   13e2a:	2300      	movs	r3, #0
   13e2c:	4a05      	ldr	r2, [pc, #20]	; (13e44 <log_core_init+0x1c>)
   13e2e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13e30:	4a05      	ldr	r2, [pc, #20]	; (13e48 <log_core_init+0x20>)
   13e32:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13e38:	4804      	ldr	r0, [pc, #16]	; (13e4c <log_core_init+0x24>)
   13e3a:	f7ff ff6d 	bl	13d18 <log_set_timestamp_func>
		z_log_msg_init();
   13e3e:	f7ff ffe3 	bl	13e08 <z_log_msg_init>
}
   13e42:	bd08      	pop	{r3, pc}
   13e44:	20004b64 	.word	0x20004b64
   13e48:	200030dc 	.word	0x200030dc
   13e4c:	00028cd7 	.word	0x00028cd7

00013e50 <z_log_msg_alloc>:
{
   13e50:	b508      	push	{r3, lr}
   13e52:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   13e54:	4801      	ldr	r0, [pc, #4]	; (13e5c <z_log_msg_alloc+0xc>)
   13e56:	f014 ff58 	bl	28d0a <msg_alloc>
}
   13e5a:	bd08      	pop	{r3, pc}
   13e5c:	20000ad0 	.word	0x20000ad0

00013e60 <z_log_msg_local_claim>:
{
   13e60:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13e62:	4802      	ldr	r0, [pc, #8]	; (13e6c <z_log_msg_local_claim+0xc>)
   13e64:	f014 fe67 	bl	28b36 <mpsc_pbuf_claim>
}
   13e68:	bd08      	pop	{r3, pc}
   13e6a:	bf00      	nop
   13e6c:	20000ad0 	.word	0x20000ad0

00013e70 <z_log_msg_free>:
{
   13e70:	b508      	push	{r3, lr}
   13e72:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   13e74:	4b02      	ldr	r3, [pc, #8]	; (13e80 <z_log_msg_free+0x10>)
   13e76:	6818      	ldr	r0, [r3, #0]
   13e78:	f014 ff4d 	bl	28d16 <msg_free>
}
   13e7c:	bd08      	pop	{r3, pc}
   13e7e:	bf00      	nop
   13e80:	200030d0 	.word	0x200030d0

00013e84 <z_log_msg_pending>:
{
   13e84:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   13e86:	4802      	ldr	r0, [pc, #8]	; (13e90 <z_log_msg_pending+0xc>)
   13e88:	f014 ff49 	bl	28d1e <msg_pending>
}
   13e8c:	bd08      	pop	{r3, pc}
   13e8e:	bf00      	nop
   13e90:	20000ad0 	.word	0x20000ad0

00013e94 <z_impl_log_process>:
{
   13e94:	b510      	push	{r4, lr}
   13e96:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   13e98:	2200      	movs	r2, #0
   13e9a:	2300      	movs	r3, #0
   13e9c:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   13ea0:	4b28      	ldr	r3, [pc, #160]	; (13f44 <z_impl_log_process+0xb0>)
   13ea2:	7818      	ldrb	r0, [r3, #0]
   13ea4:	b908      	cbnz	r0, 13eaa <z_impl_log_process+0x16>
}
   13ea6:	b002      	add	sp, #8
   13ea8:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   13eaa:	4668      	mov	r0, sp
   13eac:	f014 ff4f 	bl	28d4e <z_log_msg_claim>
	if (msg) {
   13eb0:	4604      	mov	r4, r0
   13eb2:	b188      	cbz	r0, 13ed8 <z_impl_log_process+0x44>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13eb4:	4b24      	ldr	r3, [pc, #144]	; (13f48 <z_impl_log_process+0xb4>)
   13eb6:	f3bf 8f5b 	dmb	ish
   13eba:	e853 1f00 	ldrex	r1, [r3]
   13ebe:	3901      	subs	r1, #1
   13ec0:	e843 1200 	strex	r2, r1, [r3]
   13ec4:	2a00      	cmp	r2, #0
   13ec6:	d1f8      	bne.n	13eba <z_impl_log_process+0x26>
   13ec8:	f3bf 8f5b 	dmb	ish
		msg_process(msg);
   13ecc:	4620      	mov	r0, r4
   13ece:	f7ff fe1f 	bl	13b10 <msg_process>
		z_log_msg_free(msg);
   13ed2:	4620      	mov	r0, r4
   13ed4:	f7ff ffcc 	bl	13e70 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   13ed8:	f7ff ff8c 	bl	13df4 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   13edc:	b958      	cbnz	r0, 13ef6 <z_impl_log_process+0x62>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13ede:	4a1b      	ldr	r2, [pc, #108]	; (13f4c <z_impl_log_process+0xb8>)
   13ee0:	6813      	ldr	r3, [r2, #0]
   13ee2:	6851      	ldr	r1, [r2, #4]
   13ee4:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13ee8:	f141 0100 	adc.w	r1, r1, #0
   13eec:	6013      	str	r3, [r2, #0]
   13eee:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   13ef0:	f7ff ffc8 	bl	13e84 <z_log_msg_pending>
   13ef4:	e7d7      	b.n	13ea6 <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   13ef6:	f019 ffb8 	bl	2de6a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13efa:	014a      	lsls	r2, r1, #5
   13efc:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   13f00:	0143      	lsls	r3, r0, #5
   13f02:	1a1b      	subs	r3, r3, r0
   13f04:	eb62 0201 	sbc.w	r2, r2, r1
   13f08:	0092      	lsls	r2, r2, #2
   13f0a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   13f0e:	009b      	lsls	r3, r3, #2
   13f10:	181b      	adds	r3, r3, r0
   13f12:	eb42 0201 	adc.w	r2, r2, r1
   13f16:	00d2      	lsls	r2, r2, #3
   13f18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   13f1c:	f3c3 3310 	ubfx	r3, r3, #12, #17
   13f20:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   13f24:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13f26:	4809      	ldr	r0, [pc, #36]	; (13f4c <z_impl_log_process+0xb8>)
   13f28:	6801      	ldr	r1, [r0, #0]
   13f2a:	6840      	ldr	r0, [r0, #4]
   13f2c:	1a5b      	subs	r3, r3, r1
   13f2e:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   13f32:	f240 31e9 	movw	r1, #1001	; 0x3e9
   13f36:	428b      	cmp	r3, r1
   13f38:	f172 0200 	sbcs.w	r2, r2, #0
   13f3c:	d3cf      	bcc.n	13ede <z_impl_log_process+0x4a>
				dropped_notify();
   13f3e:	f7ff ff3d 	bl	13dbc <dropped_notify>
			if (unordered_pend) {
   13f42:	e7cc      	b.n	13ede <z_impl_log_process+0x4a>
   13f44:	20004b63 	.word	0x20004b63
   13f48:	200030e0 	.word	0x200030e0
   13f4c:	20001e88 	.word	0x20001e88

00013f50 <z_impl_log_panic>:
	if (panic_mode) {
   13f50:	4b0f      	ldr	r3, [pc, #60]	; (13f90 <z_impl_log_panic+0x40>)
   13f52:	781b      	ldrb	r3, [r3, #0]
   13f54:	b103      	cbz	r3, 13f58 <z_impl_log_panic+0x8>
   13f56:	4770      	bx	lr
{
   13f58:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   13f5a:	2100      	movs	r1, #0
   13f5c:	2001      	movs	r0, #1
   13f5e:	f7ff fe3f 	bl	13be0 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13f62:	4c0c      	ldr	r4, [pc, #48]	; (13f94 <z_impl_log_panic+0x44>)
   13f64:	e000      	b.n	13f68 <z_impl_log_panic+0x18>
   13f66:	3410      	adds	r4, #16
   13f68:	4b0b      	ldr	r3, [pc, #44]	; (13f98 <z_impl_log_panic+0x48>)
   13f6a:	429c      	cmp	r4, r3
   13f6c:	d208      	bcs.n	13f80 <z_impl_log_panic+0x30>
	return backend->cb->active;
   13f6e:	6863      	ldr	r3, [r4, #4]
   13f70:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   13f72:	2b00      	cmp	r3, #0
   13f74:	d0f7      	beq.n	13f66 <z_impl_log_panic+0x16>
	backend->api->panic(backend);
   13f76:	6823      	ldr	r3, [r4, #0]
   13f78:	689b      	ldr	r3, [r3, #8]
   13f7a:	4620      	mov	r0, r4
   13f7c:	4798      	blx	r3
}
   13f7e:	e7f2      	b.n	13f66 <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13f80:	f7ff ff88 	bl	13e94 <z_impl_log_process>
		while (log_process() == true) {
   13f84:	2800      	cmp	r0, #0
   13f86:	d1fb      	bne.n	13f80 <z_impl_log_panic+0x30>
	panic_mode = true;
   13f88:	4b01      	ldr	r3, [pc, #4]	; (13f90 <z_impl_log_panic+0x40>)
   13f8a:	2201      	movs	r2, #1
   13f8c:	701a      	strb	r2, [r3, #0]
}
   13f8e:	bd10      	pop	{r4, pc}
   13f90:	20004b64 	.word	0x20004b64
   13f94:	0002ef68 	.word	0x0002ef68
   13f98:	0002ef88 	.word	0x0002ef88

00013f9c <z_log_msg_post_finalize>:
{
   13f9c:	b510      	push	{r4, lr}
   13f9e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13fa0:	4b1b      	ldr	r3, [pc, #108]	; (14010 <z_log_msg_post_finalize+0x74>)
   13fa2:	f3bf 8f5b 	dmb	ish
   13fa6:	e853 2f00 	ldrex	r2, [r3]
   13faa:	1c51      	adds	r1, r2, #1
   13fac:	e843 1000 	strex	r0, r1, [r3]
   13fb0:	2800      	cmp	r0, #0
   13fb2:	d1f8      	bne.n	13fa6 <z_log_msg_post_finalize+0xa>
   13fb4:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   13fb8:	4b16      	ldr	r3, [pc, #88]	; (14014 <z_log_msg_post_finalize+0x78>)
   13fba:	781b      	ldrb	r3, [r3, #0]
   13fbc:	b963      	cbnz	r3, 13fd8 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL) {
   13fbe:	4b16      	ldr	r3, [pc, #88]	; (14018 <z_log_msg_post_finalize+0x7c>)
   13fc0:	681b      	ldr	r3, [r3, #0]
   13fc2:	b1bb      	cbz	r3, 13ff4 <z_log_msg_post_finalize+0x58>
		if (cnt == 0) {
   13fc4:	b1c2      	cbz	r2, 13ff8 <z_log_msg_post_finalize+0x5c>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13fc6:	2a0a      	cmp	r2, #10
   13fc8:	d114      	bne.n	13ff4 <z_log_msg_post_finalize+0x58>
	z_impl_k_timer_stop(timer);
   13fca:	4814      	ldr	r0, [pc, #80]	; (1401c <z_log_msg_post_finalize+0x80>)
   13fcc:	f019 ff9c 	bl	2df08 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13fd0:	4813      	ldr	r0, [pc, #76]	; (14020 <z_log_msg_post_finalize+0x84>)
   13fd2:	f00e f959 	bl	22288 <z_impl_k_sem_give>
}
   13fd6:	e00d      	b.n	13ff4 <z_log_msg_post_finalize+0x58>
   13fd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   13fdc:	f3ef 8411 	mrs	r4, BASEPRI
   13fe0:	f383 8812 	msr	BASEPRI_MAX, r3
   13fe4:	f3bf 8f6f 	isb	sy
   13fe8:	f7ff ff54 	bl	13e94 <z_impl_log_process>
	__asm__ volatile(
   13fec:	f384 8811 	msr	BASEPRI, r4
   13ff0:	f3bf 8f6f 	isb	sy
   13ff4:	b002      	add	sp, #8
   13ff6:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
   13ff8:	2200      	movs	r2, #0
   13ffa:	2300      	movs	r3, #0
   13ffc:	e9cd 2300 	strd	r2, r3, [sp]
   14000:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14004:	2300      	movs	r3, #0
   14006:	4805      	ldr	r0, [pc, #20]	; (1401c <z_log_msg_post_finalize+0x80>)
   14008:	f00f f8b2 	bl	23170 <z_impl_k_timer_start>
   1400c:	e7f2      	b.n	13ff4 <z_log_msg_post_finalize+0x58>
   1400e:	bf00      	nop
   14010:	200030e0 	.word	0x200030e0
   14014:	20004b64 	.word	0x20004b64
   14018:	200030d8 	.word	0x200030d8
   1401c:	20001e90 	.word	0x20001e90
   14020:	20000c1c 	.word	0x20000c1c

00014024 <z_log_msg_commit>:
{
   14024:	b510      	push	{r4, lr}
   14026:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   14028:	4b04      	ldr	r3, [pc, #16]	; (1403c <z_log_msg_commit+0x18>)
   1402a:	681b      	ldr	r3, [r3, #0]
   1402c:	4798      	blx	r3
   1402e:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   14030:	4621      	mov	r1, r4
   14032:	4803      	ldr	r0, [pc, #12]	; (14040 <z_log_msg_commit+0x1c>)
   14034:	f014 fe8f 	bl	28d56 <msg_commit>
}
   14038:	bd10      	pop	{r4, pc}
   1403a:	bf00      	nop
   1403c:	200005a0 	.word	0x200005a0
   14040:	20000ad0 	.word	0x20000ad0

00014044 <log_process_thread_func>:
{
   14044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
   14048:	2100      	movs	r1, #0
   1404a:	4608      	mov	r0, r1
   1404c:	f7ff fdc8 	bl	13be0 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   14050:	4680      	mov	r8, r0
   14052:	b140      	cbz	r0, 14066 <log_process_thread_func+0x22>
   14054:	f240 6667 	movw	r6, #1639	; 0x667
   14058:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   1405a:	f00e fe5d 	bl	22d18 <z_impl_z_current_get>
	thread_set(k_current_get());
   1405e:	f7ff fe0b 	bl	13c78 <thread_set>
	bool processed_any = false;
   14062:	2500      	movs	r5, #0
   14064:	e015      	b.n	14092 <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   14066:	f04f 36ff 	mov.w	r6, #4294967295
   1406a:	f04f 37ff 	mov.w	r7, #4294967295
   1406e:	e7f4      	b.n	1405a <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
   14070:	4640      	mov	r0, r8
   14072:	f7ff fd83 	bl	13b7c <activate_foreach_backend>
			if (!activate_mask) {
   14076:	4680      	mov	r8, r0
   14078:	b970      	cbnz	r0, 14098 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
   1407a:	f04f 36ff 	mov.w	r6, #4294967295
   1407e:	f04f 37ff 	mov.w	r7, #4294967295
   14082:	e009      	b.n	14098 <log_process_thread_func+0x54>
   14084:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
   14086:	4632      	mov	r2, r6
   14088:	463b      	mov	r3, r7
   1408a:	4809      	ldr	r0, [pc, #36]	; (140b0 <log_process_thread_func+0x6c>)
   1408c:	f00e f924 	bl	222d8 <z_impl_k_sem_take>
{
   14090:	4625      	mov	r5, r4
		if (activate_mask) {
   14092:	f1b8 0f00 	cmp.w	r8, #0
   14096:	d1eb      	bne.n	14070 <log_process_thread_func+0x2c>
   14098:	f7ff fefc 	bl	13e94 <z_impl_log_process>
		if (log_process() == false) {
   1409c:	4604      	mov	r4, r0
   1409e:	2800      	cmp	r0, #0
   140a0:	d1f6      	bne.n	14090 <log_process_thread_func+0x4c>
			if (processed_any) {
   140a2:	2d00      	cmp	r5, #0
   140a4:	d0ee      	beq.n	14084 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   140a6:	2100      	movs	r1, #0
   140a8:	4608      	mov	r0, r1
   140aa:	f7ff fd4f 	bl	13b4c <log_backend_notify_all>
   140ae:	e7ea      	b.n	14086 <log_process_thread_func+0x42>
   140b0:	20000c1c 	.word	0x20000c1c

000140b4 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   140b4:	4802      	ldr	r0, [pc, #8]	; (140c0 <log_src_cnt_get+0xc>)
   140b6:	4b03      	ldr	r3, [pc, #12]	; (140c4 <log_src_cnt_get+0x10>)
   140b8:	1ac0      	subs	r0, r0, r3
   140ba:	08c0      	lsrs	r0, r0, #3
   140bc:	4770      	bx	lr
   140be:	bf00      	nop
   140c0:	0002ef68 	.word	0x0002ef68
   140c4:	0002ee68 	.word	0x0002ee68

000140c8 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   140c8:	b510      	push	{r4, lr}
   140ca:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   140cc:	f7ff fff2 	bl	140b4 <log_src_cnt_get>
   140d0:	42a0      	cmp	r0, r4
   140d2:	d903      	bls.n	140dc <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   140d4:	4b02      	ldr	r3, [pc, #8]	; (140e0 <log_source_name_get+0x18>)
   140d6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   140da:	bd10      	pop	{r4, pc}
			return NULL;
   140dc:	2000      	movs	r0, #0
   140de:	e7fc      	b.n	140da <log_source_name_get+0x12>
   140e0:	0002ee68 	.word	0x0002ee68

000140e4 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   140e4:	b510      	push	{r4, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   140e6:	4b08      	ldr	r3, [pc, #32]	; (14108 <log_backend_enable+0x24>)
   140e8:	1ac3      	subs	r3, r0, r3
   140ea:	111b      	asrs	r3, r3, #4
   140ec:	3301      	adds	r3, #1
	backend->cb->id = id;
   140ee:	6844      	ldr	r4, [r0, #4]
   140f0:	7123      	strb	r3, [r4, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
   140f2:	6843      	ldr	r3, [r0, #4]
   140f4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   140f6:	6843      	ldr	r3, [r0, #4]
   140f8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   140fa:	6843      	ldr	r3, [r0, #4]
   140fc:	2201      	movs	r2, #1
   140fe:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   14100:	f7ff fe1c 	bl	13d3c <z_log_notify_backend_enabled>
}
   14104:	bd10      	pop	{r4, pc}
   14106:	bf00      	nop
   14108:	0002ef68 	.word	0x0002ef68

0001410c <cbprintf_package_copy>:
{
   1410c:	b500      	push	{lr}
   1410e:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   14110:	9205      	str	r2, [sp, #20]
   14112:	9306      	str	r3, [sp, #24]
   14114:	2300      	movs	r3, #0
   14116:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   14118:	b162      	cbz	r2, 14134 <cbprintf_package_copy+0x28>
   1411a:	4a07      	ldr	r2, [pc, #28]	; (14138 <cbprintf_package_copy+0x2c>)
   1411c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1411e:	9302      	str	r3, [sp, #8]
   14120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14122:	9301      	str	r3, [sp, #4]
   14124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14126:	9300      	str	r3, [sp, #0]
   14128:	ab05      	add	r3, sp, #20
   1412a:	f7fe fb85 	bl	12838 <cbprintf_package_convert>
}
   1412e:	b009      	add	sp, #36	; 0x24
   14130:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   14134:	2200      	movs	r2, #0
   14136:	e7f1      	b.n	1411c <cbprintf_package_copy+0x10>
   14138:	00028d67 	.word	0x00028d67

0001413c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1413c:	b40e      	push	{r1, r2, r3}
   1413e:	b500      	push	{lr}
   14140:	b084      	sub	sp, #16
   14142:	4601      	mov	r1, r0
   14144:	ab05      	add	r3, sp, #20
   14146:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   1414a:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1414c:	2000      	movs	r0, #0
   1414e:	9000      	str	r0, [sp, #0]
   14150:	4803      	ldr	r0, [pc, #12]	; (14160 <print_formatted+0x24>)
   14152:	f7ff f96d 	bl	13430 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   14156:	b004      	add	sp, #16
   14158:	f85d eb04 	ldr.w	lr, [sp], #4
   1415c:	b003      	add	sp, #12
   1415e:	4770      	bx	lr
   14160:	00028f87 	.word	0x00028f87

00014164 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   14164:	b530      	push	{r4, r5, lr}
   14166:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
   14168:	f011 0f44 	tst.w	r1, #68	; 0x44
   1416c:	d005      	beq.n	1417a <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   1416e:	4b1a      	ldr	r3, [pc, #104]	; (141d8 <timestamp_print+0x74>)
   14170:	681c      	ldr	r4, [r3, #0]
   14172:	b934      	cbnz	r4, 14182 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   14174:	2000      	movs	r0, #0
	}

	return length;
}
   14176:	b005      	add	sp, #20
   14178:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   1417a:	4918      	ldr	r1, [pc, #96]	; (141dc <timestamp_print+0x78>)
   1417c:	f7ff ffde 	bl	1413c <print_formatted>
   14180:	e7f9      	b.n	14176 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   14182:	4b17      	ldr	r3, [pc, #92]	; (141e0 <timestamp_print+0x7c>)
   14184:	6819      	ldr	r1, [r3, #0]
   14186:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   1418a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   1418e:	4a15      	ldr	r2, [pc, #84]	; (141e4 <timestamp_print+0x80>)
   14190:	fba2 320c 	umull	r3, r2, r2, ip
   14194:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   14196:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1419a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   1419e:	4b12      	ldr	r3, [pc, #72]	; (141e8 <timestamp_print+0x84>)
   141a0:	fba3 530e 	umull	r5, r3, r3, lr
   141a4:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   141a6:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   141aa:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   141ae:	fb0c f101 	mul.w	r1, ip, r1
   141b2:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   141b6:	fb04 1115 	mls	r1, r4, r5, r1
   141ba:	fb0c f101 	mul.w	r1, ip, r1
   141be:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   141c2:	9102      	str	r1, [sp, #8]
   141c4:	9501      	str	r5, [sp, #4]
   141c6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   141ca:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   141ce:	9100      	str	r1, [sp, #0]
   141d0:	4906      	ldr	r1, [pc, #24]	; (141ec <timestamp_print+0x88>)
   141d2:	f7ff ffb3 	bl	1413c <print_formatted>
   141d6:	e7ce      	b.n	14176 <timestamp_print+0x12>
   141d8:	200030ec 	.word	0x200030ec
   141dc:	0002f500 	.word	0x0002f500
   141e0:	200030e8 	.word	0x200030e8
   141e4:	91a2b3c5 	.word	0x91a2b3c5
   141e8:	88888889 	.word	0x88888889
   141ec:	0002f50c 	.word	0x0002f50c

000141f0 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   141f0:	b161      	cbz	r1, 1420c <color_print+0x1c>
{
   141f2:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   141f4:	b12a      	cbz	r2, 14202 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   141f6:	4a06      	ldr	r2, [pc, #24]	; (14210 <color_print+0x20>)
   141f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   141fc:	b912      	cbnz	r2, 14204 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   141fe:	4a05      	ldr	r2, [pc, #20]	; (14214 <color_print+0x24>)
   14200:	e000      	b.n	14204 <color_print+0x14>
   14202:	4a04      	ldr	r2, [pc, #16]	; (14214 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   14204:	4904      	ldr	r1, [pc, #16]	; (14218 <color_print+0x28>)
   14206:	f7ff ff99 	bl	1413c <print_formatted>
	}
}
   1420a:	bd08      	pop	{r3, pc}
   1420c:	4770      	bx	lr
   1420e:	bf00      	nop
   14210:	0002f5ac 	.word	0x0002f5ac
   14214:	0002f528 	.word	0x0002f528
   14218:	0002f530 	.word	0x0002f530

0001421c <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   1421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14220:	4605      	mov	r5, r0
   14222:	4690      	mov	r8, r2
   14224:	461e      	mov	r6, r3
   14226:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   14228:	b981      	cbnz	r1, 1424c <ids_print+0x30>
	int total = 0;
   1422a:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   1422c:	b12e      	cbz	r6, 1423a <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   1422e:	4632      	mov	r2, r6
   14230:	4910      	ldr	r1, [pc, #64]	; (14274 <ids_print+0x58>)
   14232:	4628      	mov	r0, r5
   14234:	f7ff ff82 	bl	1413c <print_formatted>
   14238:	4404      	add	r4, r0
	}

	if (source) {
   1423a:	b1b7      	cbz	r7, 1426a <ids_print+0x4e>
		total += print_formatted(output,
   1423c:	f1b8 0f00 	cmp.w	r8, #0
   14240:	d00d      	beq.n	1425e <ids_print+0x42>
				(func_on &&
   14242:	9b07      	ldr	r3, [sp, #28]
   14244:	2b04      	cmp	r3, #4
   14246:	d013      	beq.n	14270 <ids_print+0x54>
		total += print_formatted(output,
   14248:	490b      	ldr	r1, [pc, #44]	; (14278 <ids_print+0x5c>)
   1424a:	e009      	b.n	14260 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   1424c:	4b0b      	ldr	r3, [pc, #44]	; (1427c <ids_print+0x60>)
   1424e:	9a07      	ldr	r2, [sp, #28]
   14250:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14254:	490a      	ldr	r1, [pc, #40]	; (14280 <ids_print+0x64>)
   14256:	f7ff ff71 	bl	1413c <print_formatted>
   1425a:	4604      	mov	r4, r0
   1425c:	e7e6      	b.n	1422c <ids_print+0x10>
		total += print_formatted(output,
   1425e:	4906      	ldr	r1, [pc, #24]	; (14278 <ids_print+0x5c>)
   14260:	463a      	mov	r2, r7
   14262:	4628      	mov	r0, r5
   14264:	f7ff ff6a 	bl	1413c <print_formatted>
   14268:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   1426a:	4620      	mov	r0, r4
   1426c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   14270:	4904      	ldr	r1, [pc, #16]	; (14284 <ids_print+0x68>)
   14272:	e7f5      	b.n	14260 <ids_print+0x44>
   14274:	0002f548 	.word	0x0002f548
   14278:	0002f538 	.word	0x0002f538
   1427c:	0002f5c0 	.word	0x0002f5c0
   14280:	0002f540 	.word	0x0002f540
   14284:	0002f534 	.word	0x0002f534

00014288 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   14288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1428c:	b085      	sub	sp, #20
   1428e:	4605      	mov	r5, r0
   14290:	460c      	mov	r4, r1
   14292:	4616      	mov	r6, r2
   14294:	9303      	str	r3, [sp, #12]
   14296:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1429a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1429e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   142a2:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   142a6:	f014 fd5c 	bl	28d62 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   142aa:	b1d8      	cbz	r0, 142e4 <prefix_print+0x5c>
   142ac:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   142ae:	4912      	ldr	r1, [pc, #72]	; (142f8 <prefix_print+0x70>)
   142b0:	4628      	mov	r0, r5
   142b2:	f7ff ff43 	bl	1413c <print_formatted>
   142b6:	4607      	mov	r7, r0
	}

	if (stamp) {
   142b8:	f1bb 0f00 	cmp.w	fp, #0
   142bc:	d114      	bne.n	142e8 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   142be:	4642      	mov	r2, r8
   142c0:	4651      	mov	r1, sl
   142c2:	4628      	mov	r0, r5
   142c4:	f014 fe1f 	bl	28f06 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   142c8:	f8cd 8004 	str.w	r8, [sp, #4]
   142cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   142ce:	9300      	str	r3, [sp, #0]
   142d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   142d2:	4632      	mov	r2, r6
   142d4:	4649      	mov	r1, r9
   142d6:	4628      	mov	r0, r5
   142d8:	f7ff ffa0 	bl	1421c <ids_print>

	return length;
}
   142dc:	4438      	add	r0, r7
   142de:	b005      	add	sp, #20
   142e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   142e4:	2700      	movs	r7, #0
   142e6:	e7e7      	b.n	142b8 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   142e8:	9a03      	ldr	r2, [sp, #12]
   142ea:	4621      	mov	r1, r4
   142ec:	4628      	mov	r0, r5
   142ee:	f7ff ff39 	bl	14164 <timestamp_print>
   142f2:	4407      	add	r7, r0
   142f4:	e7e3      	b.n	142be <prefix_print+0x36>
   142f6:	bf00      	nop
   142f8:	0002f54c 	.word	0x0002f54c

000142fc <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   142fc:	f011 0f10 	tst.w	r1, #16
   14300:	d10b      	bne.n	1431a <newline_print+0x1e>
{
   14302:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   14304:	f011 0f20 	tst.w	r1, #32
   14308:	d003      	beq.n	14312 <newline_print+0x16>
		print_formatted(ctx, "\n");
   1430a:	4904      	ldr	r1, [pc, #16]	; (1431c <newline_print+0x20>)
   1430c:	f7ff ff16 	bl	1413c <print_formatted>
}
   14310:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   14312:	4903      	ldr	r1, [pc, #12]	; (14320 <newline_print+0x24>)
   14314:	f7ff ff12 	bl	1413c <print_formatted>
   14318:	e7fa      	b.n	14310 <newline_print+0x14>
   1431a:	4770      	bx	lr
   1431c:	0002f1c4 	.word	0x0002f1c4
   14320:	000319ac 	.word	0x000319ac

00014324 <hexdump_line_print>:
{
   14324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14328:	4605      	mov	r5, r0
   1432a:	460f      	mov	r7, r1
   1432c:	4616      	mov	r6, r2
   1432e:	4698      	mov	r8, r3
	newline_print(output, flags);
   14330:	9906      	ldr	r1, [sp, #24]
   14332:	f7ff ffe3 	bl	142fc <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   14336:	2400      	movs	r4, #0
   14338:	4544      	cmp	r4, r8
   1433a:	da05      	bge.n	14348 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   1433c:	4924      	ldr	r1, [pc, #144]	; (143d0 <hexdump_line_print+0xac>)
   1433e:	4628      	mov	r0, r5
   14340:	f7ff fefc 	bl	1413c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14344:	3401      	adds	r4, #1
   14346:	e7f7      	b.n	14338 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14348:	2400      	movs	r4, #0
   1434a:	e009      	b.n	14360 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   1434c:	4920      	ldr	r1, [pc, #128]	; (143d0 <hexdump_line_print+0xac>)
   1434e:	4628      	mov	r0, r5
   14350:	f7ff fef4 	bl	1413c <print_formatted>
   14354:	e00b      	b.n	1436e <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   14356:	491f      	ldr	r1, [pc, #124]	; (143d4 <hexdump_line_print+0xb0>)
   14358:	4628      	mov	r0, r5
   1435a:	f7ff feef 	bl	1413c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1435e:	3401      	adds	r4, #1
   14360:	2c0f      	cmp	r4, #15
   14362:	dc0c      	bgt.n	1437e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   14364:	2c00      	cmp	r4, #0
   14366:	dd02      	ble.n	1436e <hexdump_line_print+0x4a>
   14368:	f014 0f07 	tst.w	r4, #7
   1436c:	d0ee      	beq.n	1434c <hexdump_line_print+0x28>
		if (i < length) {
   1436e:	42b4      	cmp	r4, r6
   14370:	d2f1      	bcs.n	14356 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   14372:	5d3a      	ldrb	r2, [r7, r4]
   14374:	4918      	ldr	r1, [pc, #96]	; (143d8 <hexdump_line_print+0xb4>)
   14376:	4628      	mov	r0, r5
   14378:	f7ff fee0 	bl	1413c <print_formatted>
   1437c:	e7ef      	b.n	1435e <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   1437e:	4917      	ldr	r1, [pc, #92]	; (143dc <hexdump_line_print+0xb8>)
   14380:	4628      	mov	r0, r5
   14382:	f7ff fedb 	bl	1413c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14386:	2400      	movs	r4, #0
   14388:	e009      	b.n	1439e <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   1438a:	4911      	ldr	r1, [pc, #68]	; (143d0 <hexdump_line_print+0xac>)
   1438c:	4628      	mov	r0, r5
   1438e:	f7ff fed5 	bl	1413c <print_formatted>
   14392:	e00b      	b.n	143ac <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   14394:	4912      	ldr	r1, [pc, #72]	; (143e0 <hexdump_line_print+0xbc>)
   14396:	4628      	mov	r0, r5
   14398:	f7ff fed0 	bl	1413c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1439c:	3401      	adds	r4, #1
   1439e:	2c0f      	cmp	r4, #15
   143a0:	dc13      	bgt.n	143ca <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
   143a2:	2c00      	cmp	r4, #0
   143a4:	dd02      	ble.n	143ac <hexdump_line_print+0x88>
   143a6:	f014 0f07 	tst.w	r4, #7
   143aa:	d0ee      	beq.n	1438a <hexdump_line_print+0x66>
		if (i < length) {
   143ac:	42b4      	cmp	r4, r6
   143ae:	d207      	bcs.n	143c0 <hexdump_line_print+0x9c>
			unsigned char c = (unsigned char)data[i];
   143b0:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
   143b2:	4b0c      	ldr	r3, [pc, #48]	; (143e4 <hexdump_line_print+0xc0>)
   143b4:	5c9b      	ldrb	r3, [r3, r2]
			print_formatted(output, "%c",
   143b6:	f013 0f97 	tst.w	r3, #151	; 0x97
   143ba:	d1eb      	bne.n	14394 <hexdump_line_print+0x70>
   143bc:	222e      	movs	r2, #46	; 0x2e
   143be:	e7e9      	b.n	14394 <hexdump_line_print+0x70>
			print_formatted(output, " ");
   143c0:	4903      	ldr	r1, [pc, #12]	; (143d0 <hexdump_line_print+0xac>)
   143c2:	4628      	mov	r0, r5
   143c4:	f7ff feba 	bl	1413c <print_formatted>
   143c8:	e7e8      	b.n	1439c <hexdump_line_print+0x78>
}
   143ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143ce:	bf00      	nop
   143d0:	0002f544 	.word	0x0002f544
   143d4:	0002f558 	.word	0x0002f558
   143d8:	0002f550 	.word	0x0002f550
   143dc:	0002f55c 	.word	0x0002f55c
   143e0:	0002f560 	.word	0x0002f560
   143e4:	00031ad1 	.word	0x00031ad1

000143e8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   143e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143ec:	b084      	sub	sp, #16
   143ee:	4604      	mov	r4, r0
   143f0:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   143f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   143f6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   143f8:	b995      	cbnz	r5, 14420 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   143fa:	2b01      	cmp	r3, #1
   143fc:	d01b      	beq.n	14436 <log_output_process+0x4e>
   143fe:	4817      	ldr	r0, [pc, #92]	; (1445c <log_output_process+0x74>)
		prefix_offset = 0;
   14400:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   14404:	b127      	cbz	r7, 14410 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   14406:	463b      	mov	r3, r7
   14408:	4622      	mov	r2, r4
   1440a:	4915      	ldr	r1, [pc, #84]	; (14460 <log_output_process+0x78>)
   1440c:	f013 fb4c 	bl	27aa8 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   14410:	b9ae      	cbnz	r6, 1443e <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   14412:	b9ed      	cbnz	r5, 14450 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14414:	4620      	mov	r0, r4
   14416:	f014 fda9 	bl	28f6c <log_output_flush>
}
   1441a:	b004      	add	sp, #16
   1441c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   14420:	9502      	str	r5, [sp, #8]
   14422:	9301      	str	r3, [sp, #4]
   14424:	9200      	str	r2, [sp, #0]
   14426:	460b      	mov	r3, r1
   14428:	2200      	movs	r2, #0
   1442a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1442c:	f7ff ff2c 	bl	14288 <prefix_print>
   14430:	4680      	mov	r8, r0
		cb = out_func;
   14432:	480c      	ldr	r0, [pc, #48]	; (14464 <log_output_process+0x7c>)
   14434:	e7e6      	b.n	14404 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14436:	480b      	ldr	r0, [pc, #44]	; (14464 <log_output_process+0x7c>)
		prefix_offset = 0;
   14438:	f04f 0800 	mov.w	r8, #0
   1443c:	e7e2      	b.n	14404 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   1443e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14440:	9300      	str	r3, [sp, #0]
   14442:	4643      	mov	r3, r8
   14444:	4632      	mov	r2, r6
   14446:	990c      	ldr	r1, [sp, #48]	; 0x30
   14448:	4620      	mov	r0, r4
   1444a:	f014 fd74 	bl	28f36 <log_msg_hexdump>
   1444e:	e7e0      	b.n	14412 <log_output_process+0x2a>
		postfix_print(output, flags, level);
   14450:	462a      	mov	r2, r5
   14452:	990e      	ldr	r1, [sp, #56]	; 0x38
   14454:	4620      	mov	r0, r4
   14456:	f014 fd62 	bl	28f1e <postfix_print>
   1445a:	e7db      	b.n	14414 <log_output_process+0x2c>
   1445c:	00028fbf 	.word	0x00028fbf
   14460:	00028ef7 	.word	0x00028ef7
   14464:	00028f87 	.word	0x00028f87

00014468 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   14468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1446c:	b086      	sub	sp, #24
   1446e:	4605      	mov	r5, r0
   14470:	460c      	mov	r4, r1
   14472:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   14474:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   14478:	880e      	ldrh	r6, [r1, #0]
   1447a:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   1447e:	7808      	ldrb	r0, [r1, #0]
   14480:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   14484:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   14486:	b133      	cbz	r3, 14496 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   14488:	4a11      	ldr	r2, [pc, #68]	; (144d0 <log_output_msg_process+0x68>)
   1448a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   1448c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14490:	2900      	cmp	r1, #0
   14492:	da18      	bge.n	144c6 <log_output_msg_process+0x5e>
   14494:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   14496:	4622      	mov	r2, r4
   14498:	f852 1b10 	ldr.w	r1, [r2], #16
   1449c:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
   144a0:	8860      	ldrh	r0, [r4, #2]
   144a2:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   144a6:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   144a8:	b901      	cbnz	r1, 144ac <log_output_msg_process+0x44>
   144aa:	2200      	movs	r2, #0
   144ac:	9704      	str	r7, [sp, #16]
   144ae:	9003      	str	r0, [sp, #12]
   144b0:	9402      	str	r4, [sp, #8]
   144b2:	9201      	str	r2, [sp, #4]
   144b4:	9600      	str	r6, [sp, #0]
   144b6:	2200      	movs	r2, #0
   144b8:	4641      	mov	r1, r8
   144ba:	4628      	mov	r0, r5
   144bc:	f7ff ff94 	bl	143e8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   144c0:	b006      	add	sp, #24
   144c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   144c6:	f7ff fdff 	bl	140c8 <log_source_name_get>
   144ca:	4603      	mov	r3, r0
   144cc:	e7e3      	b.n	14496 <log_output_msg_process+0x2e>
   144ce:	bf00      	nop
   144d0:	0002ee68 	.word	0x0002ee68

000144d4 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   144d4:	b570      	push	{r4, r5, r6, lr}
   144d6:	b082      	sub	sp, #8
   144d8:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   144da:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   144dc:	f242 730f 	movw	r3, #9999	; 0x270f
   144e0:	428b      	cmp	r3, r1
   144e2:	bf28      	it	cs
   144e4:	460b      	movcs	r3, r1
   144e6:	4a0e      	ldr	r2, [pc, #56]	; (14520 <log_output_dropped_process+0x4c>)
   144e8:	2105      	movs	r1, #5
   144ea:	4668      	mov	r0, sp
   144ec:	f013 fb60 	bl	27bb0 <snprintk>
   144f0:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   144f2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   144f4:	685b      	ldr	r3, [r3, #4]
   144f6:	220b      	movs	r2, #11
   144f8:	490a      	ldr	r1, [pc, #40]	; (14524 <log_output_dropped_process+0x50>)
   144fa:	4628      	mov	r0, r5
   144fc:	f014 fcee 	bl	28edc <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   14500:	6863      	ldr	r3, [r4, #4]
   14502:	685b      	ldr	r3, [r3, #4]
   14504:	4632      	mov	r2, r6
   14506:	4669      	mov	r1, sp
   14508:	4628      	mov	r0, r5
   1450a:	f014 fce7 	bl	28edc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   1450e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14510:	685b      	ldr	r3, [r3, #4]
   14512:	221b      	movs	r2, #27
   14514:	4904      	ldr	r1, [pc, #16]	; (14528 <log_output_dropped_process+0x54>)
   14516:	4628      	mov	r0, r5
   14518:	f014 fce0 	bl	28edc <buffer_write>
}
   1451c:	b002      	add	sp, #8
   1451e:	bd70      	pop	{r4, r5, r6, pc}
   14520:	00030708 	.word	0x00030708
   14524:	0002f580 	.word	0x0002f580
   14528:	0002f564 	.word	0x0002f564

0001452c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1452c:	4b07      	ldr	r3, [pc, #28]	; (1454c <log_output_timestamp_freq_set+0x20>)
   1452e:	2201      	movs	r2, #1
   14530:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14532:	e004      	b.n	1453e <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   14534:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   14536:	4a05      	ldr	r2, [pc, #20]	; (1454c <log_output_timestamp_freq_set+0x20>)
   14538:	6813      	ldr	r3, [r2, #0]
   1453a:	005b      	lsls	r3, r3, #1
   1453c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1453e:	4b04      	ldr	r3, [pc, #16]	; (14550 <log_output_timestamp_freq_set+0x24>)
   14540:	4298      	cmp	r0, r3
   14542:	d8f7      	bhi.n	14534 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   14544:	4b03      	ldr	r3, [pc, #12]	; (14554 <log_output_timestamp_freq_set+0x28>)
   14546:	6018      	str	r0, [r3, #0]
}
   14548:	4770      	bx	lr
   1454a:	bf00      	nop
   1454c:	200030e8 	.word	0x200030e8
   14550:	000f4240 	.word	0x000f4240
   14554:	200030ec 	.word	0x200030ec

00014558 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   14558:	4b03      	ldr	r3, [pc, #12]	; (14568 <log_backend_rtt_init+0x10>)
   1455a:	2201      	movs	r2, #1
   1455c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
   1455e:	4b03      	ldr	r3, [pc, #12]	; (1456c <log_backend_rtt_init+0x14>)
   14560:	4a03      	ldr	r2, [pc, #12]	; (14570 <log_backend_rtt_init+0x18>)
   14562:	601a      	str	r2, [r3, #0]
}
   14564:	4770      	bx	lr
   14566:	bf00      	nop
   14568:	20004b65 	.word	0x20004b65
   1456c:	20003118 	.word	0x20003118
   14570:	2000311c 	.word	0x2000311c

00014574 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   14574:	4b01      	ldr	r3, [pc, #4]	; (1457c <format_set+0x8>)
   14576:	6019      	str	r1, [r3, #0]
	return 0;
}
   14578:	2000      	movs	r0, #0
   1457a:	4770      	bx	lr
   1457c:	20003104 	.word	0x20003104

00014580 <on_failed_write>:
{
   14580:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   14582:	b918      	cbnz	r0, 1458c <on_failed_write+0xc>
		host_present = false;
   14584:	4b07      	ldr	r3, [pc, #28]	; (145a4 <on_failed_write+0x24>)
   14586:	2200      	movs	r2, #0
   14588:	701a      	strb	r2, [r3, #0]
}
   1458a:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   1458c:	4b06      	ldr	r3, [pc, #24]	; (145a8 <on_failed_write+0x28>)
   1458e:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   14590:	b123      	cbz	r3, 1459c <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   14592:	f241 3088 	movw	r0, #5000	; 0x1388
   14596:	f019 fc6c 	bl	2de72 <z_impl_k_busy_wait>
}
   1459a:	e7f6      	b.n	1458a <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
   1459c:	2005      	movs	r0, #5
   1459e:	f014 fd1d 	bl	28fdc <k_msleep>
}
   145a2:	e7f2      	b.n	1458a <on_failed_write+0xa>
   145a4:	20004b65 	.word	0x20004b65
   145a8:	20004b66 	.word	0x20004b66

000145ac <on_write>:
{
   145ac:	b538      	push	{r3, r4, r5, lr}
   145ae:	4604      	mov	r4, r0
	host_present = true;
   145b0:	4b0a      	ldr	r3, [pc, #40]	; (145dc <on_write+0x30>)
   145b2:	2201      	movs	r2, #1
   145b4:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   145b6:	4b0a      	ldr	r3, [pc, #40]	; (145e0 <on_write+0x34>)
   145b8:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   145ba:	b92b      	cbnz	r3, 145c8 <on_write+0x1c>
}
   145bc:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
   145be:	1e65      	subs	r5, r4, #1
   145c0:	4620      	mov	r0, r4
   145c2:	f7ff ffdd 	bl	14580 <on_failed_write>
   145c6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   145c8:	2000      	movs	r0, #0
   145ca:	f00d f957 	bl	2187c <SEGGER_RTT_HasDataUp>
   145ce:	2800      	cmp	r0, #0
   145d0:	d0f4      	beq.n	145bc <on_write+0x10>
   145d2:	4b02      	ldr	r3, [pc, #8]	; (145dc <on_write+0x30>)
   145d4:	781b      	ldrb	r3, [r3, #0]
   145d6:	2b00      	cmp	r3, #0
   145d8:	d1f1      	bne.n	145be <on_write+0x12>
   145da:	e7ef      	b.n	145bc <on_write+0x10>
   145dc:	20004b65 	.word	0x20004b65
   145e0:	20004b66 	.word	0x20004b66

000145e4 <data_out_block_mode>:
{
   145e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145e6:	4606      	mov	r6, r0
   145e8:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   145ea:	2704      	movs	r7, #4
   145ec:	e00d      	b.n	1460a <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   145ee:	462a      	mov	r2, r5
   145f0:	4631      	mov	r1, r6
   145f2:	2000      	movs	r0, #0
   145f4:	f00d f8de 	bl	217b4 <SEGGER_RTT_WriteSkipNoLock>
   145f8:	4604      	mov	r4, r0
   145fa:	e014      	b.n	14626 <data_out_block_mode+0x42>
			on_write(retry_cnt);
   145fc:	4638      	mov	r0, r7
   145fe:	f7ff ffd5 	bl	145ac <on_write>
	} while ((ret == 0) && host_present);
   14602:	b9dc      	cbnz	r4, 1463c <data_out_block_mode+0x58>
   14604:	4b11      	ldr	r3, [pc, #68]	; (1464c <data_out_block_mode+0x68>)
   14606:	781b      	ldrb	r3, [r3, #0]
   14608:	b1c3      	cbz	r3, 1463c <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   1460a:	4b11      	ldr	r3, [pc, #68]	; (14650 <data_out_block_mode+0x6c>)
   1460c:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   1460e:	2b00      	cmp	r3, #0
   14610:	d1ed      	bne.n	145ee <data_out_block_mode+0xa>
			RTT_LOCK();
   14612:	f00d f943 	bl	2189c <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   14616:	462a      	mov	r2, r5
   14618:	4631      	mov	r1, r6
   1461a:	2000      	movs	r0, #0
   1461c:	f00d f8ca 	bl	217b4 <SEGGER_RTT_WriteSkipNoLock>
   14620:	4604      	mov	r4, r0
			RTT_UNLOCK();
   14622:	f00d f947 	bl	218b4 <zephyr_rtt_mutex_unlock>
		if (ret) {
   14626:	2c00      	cmp	r4, #0
   14628:	d1e8      	bne.n	145fc <data_out_block_mode+0x18>
		} else if (host_present) {
   1462a:	4b08      	ldr	r3, [pc, #32]	; (1464c <data_out_block_mode+0x68>)
   1462c:	781b      	ldrb	r3, [r3, #0]
   1462e:	2b00      	cmp	r3, #0
   14630:	d0e7      	beq.n	14602 <data_out_block_mode+0x1e>
			retry_cnt--;
   14632:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   14634:	4638      	mov	r0, r7
   14636:	f7ff ffa3 	bl	14580 <on_failed_write>
   1463a:	e7e2      	b.n	14602 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
   1463c:	b914      	cbnz	r4, 14644 <data_out_block_mode+0x60>
   1463e:	4b03      	ldr	r3, [pc, #12]	; (1464c <data_out_block_mode+0x68>)
   14640:	781b      	ldrb	r3, [r3, #0]
   14642:	b903      	cbnz	r3, 14646 <data_out_block_mode+0x62>
   14644:	462c      	mov	r4, r5
}
   14646:	4620      	mov	r0, r4
   14648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1464a:	bf00      	nop
   1464c:	20004b65 	.word	0x20004b65
   14650:	20004b66 	.word	0x20004b66

00014654 <panic>:
{
   14654:	b508      	push	{r3, lr}
	panic_mode = true;
   14656:	4b03      	ldr	r3, [pc, #12]	; (14664 <panic+0x10>)
   14658:	2201      	movs	r2, #1
   1465a:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1465c:	4802      	ldr	r0, [pc, #8]	; (14668 <panic+0x14>)
   1465e:	f014 fc85 	bl	28f6c <log_output_flush>
}
   14662:	bd08      	pop	{r3, pc}
   14664:	20004b66 	.word	0x20004b66
   14668:	0002f600 	.word	0x0002f600

0001466c <dropped>:
{
   1466c:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1466e:	4802      	ldr	r0, [pc, #8]	; (14678 <dropped+0xc>)
   14670:	f7ff ff30 	bl	144d4 <log_output_dropped_process>
}
   14674:	bd08      	pop	{r3, pc}
   14676:	bf00      	nop
   14678:	0002f600 	.word	0x0002f600

0001467c <process>:
{
   1467c:	b510      	push	{r4, lr}
   1467e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14680:	4b04      	ldr	r3, [pc, #16]	; (14694 <process+0x18>)
   14682:	6818      	ldr	r0, [r3, #0]
   14684:	f7ff fb42 	bl	13d0c <log_format_func_t_get>
   14688:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
   1468a:	220f      	movs	r2, #15
   1468c:	4621      	mov	r1, r4
   1468e:	4802      	ldr	r0, [pc, #8]	; (14698 <process+0x1c>)
   14690:	4798      	blx	r3
}
   14692:	bd10      	pop	{r4, pc}
   14694:	20003104 	.word	0x20003104
   14698:	0002f600 	.word	0x0002f600

0001469c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   1469c:	b570      	push	{r4, r5, r6, lr}
   1469e:	4606      	mov	r6, r0
   146a0:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   146a2:	2400      	movs	r4, #0
   146a4:	e005      	b.n	146b2 <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
   146a6:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   146a8:	4804      	ldr	r0, [pc, #16]	; (146bc <char_out+0x20>)
   146aa:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   146ac:	685b      	ldr	r3, [r3, #4]
   146ae:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   146b0:	3401      	adds	r4, #1
   146b2:	42ac      	cmp	r4, r5
   146b4:	d3f7      	bcc.n	146a6 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   146b6:	4628      	mov	r0, r5
   146b8:	bd70      	pop	{r4, r5, r6, pc}
   146ba:	bf00      	nop
   146bc:	0002ec5c 	.word	0x0002ec5c

000146c0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   146c0:	4b01      	ldr	r3, [pc, #4]	; (146c8 <format_set+0x8>)
   146c2:	6019      	str	r1, [r3, #0]
	return 0;
}
   146c4:	2000      	movs	r0, #0
   146c6:	4770      	bx	lr
   146c8:	2000314c 	.word	0x2000314c

000146cc <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
   146cc:	b508      	push	{r3, lr}
	in_panic = true;
   146ce:	4b03      	ldr	r3, [pc, #12]	; (146dc <panic+0x10>)
   146d0:	2201      	movs	r2, #1
   146d2:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
   146d4:	4802      	ldr	r0, [pc, #8]	; (146e0 <panic+0x14>)
   146d6:	f014 fc49 	bl	28f6c <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   146da:	bd08      	pop	{r3, pc}
   146dc:	20004b67 	.word	0x20004b67
   146e0:	0002f64c 	.word	0x0002f64c

000146e4 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   146e4:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
   146e6:	4802      	ldr	r0, [pc, #8]	; (146f0 <dropped+0xc>)
   146e8:	f7ff fef4 	bl	144d4 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   146ec:	bd08      	pop	{r3, pc}
   146ee:	bf00      	nop
   146f0:	0002f64c 	.word	0x0002f64c

000146f4 <process>:
{
   146f4:	b510      	push	{r4, lr}
   146f6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   146f8:	4b04      	ldr	r3, [pc, #16]	; (1470c <process+0x18>)
   146fa:	6818      	ldr	r0, [r3, #0]
   146fc:	f7ff fb06 	bl	13d0c <log_format_func_t_get>
   14700:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   14702:	220f      	movs	r2, #15
   14704:	4621      	mov	r1, r4
   14706:	4802      	ldr	r0, [pc, #8]	; (14710 <process+0x1c>)
   14708:	4798      	blx	r3
}
   1470a:	bd10      	pop	{r4, pc}
   1470c:	2000314c 	.word	0x2000314c
   14710:	0002f64c 	.word	0x0002f64c

00014714 <dis_set>:
);

#if defined(CONFIG_BT_DIS_SETTINGS)
static int dis_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *store)
{
   14714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14718:	b082      	sub	sp, #8
   1471a:	af00      	add	r7, sp, #0
   1471c:	4604      	mov	r4, r0
   1471e:	4690      	mov	r8, r2
   14720:	461e      	mov	r6, r3
	ssize_t len;
	int nlen;
	const char *next;

	nlen = settings_name_next(name, &next);
   14722:	1d39      	adds	r1, r7, #4
   14724:	f014 fc8d 	bl	29042 <settings_name_next>
   14728:	4605      	mov	r5, r0
	if (!strncmp(name, "manuf", nlen)) {
   1472a:	4602      	mov	r2, r0
   1472c:	499b      	ldr	r1, [pc, #620]	; (1499c <dis_set+0x288>)
   1472e:	4620      	mov	r0, r4
   14730:	f019 fef1 	bl	2e516 <strncmp>
   14734:	2800      	cmp	r0, #0
   14736:	d149      	bne.n	147cc <dis_set+0xb8>
		len = read_cb(store, &dis_manuf, sizeof(dis_manuf) - 1);
   14738:	2214      	movs	r2, #20
   1473a:	4999      	ldr	r1, [pc, #612]	; (149a0 <dis_set+0x28c>)
   1473c:	4630      	mov	r0, r6
   1473e:	47c0      	blx	r8
		if (len < 0) {
   14740:	2800      	cmp	r0, #0
   14742:	db07      	blt.n	14754 <dis_set+0x40>
			LOG_ERR("Failed to read manufacturer from storage"
				       " (err %zd)", len);
		} else {
			dis_manuf[len] = '\0';
   14744:	4b96      	ldr	r3, [pc, #600]	; (149a0 <dis_set+0x28c>)
   14746:	2200      	movs	r2, #0
   14748:	541a      	strb	r2, [r3, r0]
		}
		return 0;
	}
#endif
	return 0;
}
   1474a:	2000      	movs	r0, #0
   1474c:	3708      	adds	r7, #8
   1474e:	46bd      	mov	sp, r7
   14750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERR("Failed to read manufacturer from storage"
   14754:	466d      	mov	r5, sp
   14756:	b088      	sub	sp, #32
   14758:	466b      	mov	r3, sp
   1475a:	f113 0210 	adds.w	r2, r3, #16
   1475e:	d02f      	beq.n	147c0 <dis_set+0xac>
   14760:	210c      	movs	r1, #12
   14762:	b13a      	cbz	r2, 14774 <dis_set+0x60>
   14764:	460c      	mov	r4, r1
   14766:	2904      	cmp	r1, #4
   14768:	dd01      	ble.n	1476e <dis_set+0x5a>
   1476a:	4e8e      	ldr	r6, [pc, #568]	; (149a4 <dis_set+0x290>)
   1476c:	615e      	str	r6, [r3, #20]
   1476e:	2c08      	cmp	r4, #8
   14770:	dd00      	ble.n	14774 <dis_set+0x60>
   14772:	6198      	str	r0, [r3, #24]
   14774:	290b      	cmp	r1, #11
   14776:	dd26      	ble.n	147c6 <dis_set+0xb2>
   14778:	240c      	movs	r4, #12
   1477a:	b13a      	cbz	r2, 1478c <dis_set+0x78>
   1477c:	2103      	movs	r1, #3
   1477e:	7039      	strb	r1, [r7, #0]
   14780:	2100      	movs	r1, #0
   14782:	7079      	strb	r1, [r7, #1]
   14784:	70b9      	strb	r1, [r7, #2]
   14786:	70f9      	strb	r1, [r7, #3]
   14788:	6838      	ldr	r0, [r7, #0]
   1478a:	6118      	str	r0, [r3, #16]
   1478c:	2100      	movs	r1, #0
   1478e:	f36f 0100 	bfc	r1, #0, #1
   14792:	f36f 0141 	bfc	r1, #1, #1
   14796:	f36f 0182 	bfc	r1, #2, #1
   1479a:	f36f 01c5 	bfc	r1, #3, #3
   1479e:	2301      	movs	r3, #1
   147a0:	f363 1188 	bfi	r1, r3, #6, #3
   147a4:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   147a8:	f363 2152 	bfi	r1, r3, #9, #10
   147ac:	f36f 41de 	bfc	r1, #19, #12
   147b0:	f36f 71df 	bfc	r1, #31, #1
   147b4:	2300      	movs	r3, #0
   147b6:	487c      	ldr	r0, [pc, #496]	; (149a8 <dis_set+0x294>)
   147b8:	f014 fb03 	bl	28dc2 <z_impl_z_log_msg_static_create>
   147bc:	46ad      	mov	sp, r5
   147be:	e7c4      	b.n	1474a <dis_set+0x36>
   147c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   147c4:	e7cd      	b.n	14762 <dis_set+0x4e>
   147c6:	f06f 041b 	mvn.w	r4, #27
   147ca:	e7d6      	b.n	1477a <dis_set+0x66>
	if (!strncmp(name, "model", nlen)) {
   147cc:	462a      	mov	r2, r5
   147ce:	4977      	ldr	r1, [pc, #476]	; (149ac <dis_set+0x298>)
   147d0:	4620      	mov	r0, r4
   147d2:	f019 fea0 	bl	2e516 <strncmp>
   147d6:	2800      	cmp	r0, #0
   147d8:	d145      	bne.n	14866 <dis_set+0x152>
		len = read_cb(store, &dis_model, sizeof(dis_model) - 1);
   147da:	2214      	movs	r2, #20
   147dc:	4974      	ldr	r1, [pc, #464]	; (149b0 <dis_set+0x29c>)
   147de:	4630      	mov	r0, r6
   147e0:	47c0      	blx	r8
		if (len < 0) {
   147e2:	2800      	cmp	r0, #0
   147e4:	db03      	blt.n	147ee <dis_set+0xda>
			dis_model[len] = '\0';
   147e6:	4b72      	ldr	r3, [pc, #456]	; (149b0 <dis_set+0x29c>)
   147e8:	2200      	movs	r2, #0
   147ea:	541a      	strb	r2, [r3, r0]
		return 0;
   147ec:	e7ad      	b.n	1474a <dis_set+0x36>
			LOG_ERR("Failed to read model from storage"
   147ee:	466d      	mov	r5, sp
   147f0:	b088      	sub	sp, #32
   147f2:	466b      	mov	r3, sp
   147f4:	f113 0210 	adds.w	r2, r3, #16
   147f8:	d02f      	beq.n	1485a <dis_set+0x146>
   147fa:	210c      	movs	r1, #12
   147fc:	b13a      	cbz	r2, 1480e <dis_set+0xfa>
   147fe:	460c      	mov	r4, r1
   14800:	2904      	cmp	r1, #4
   14802:	dd01      	ble.n	14808 <dis_set+0xf4>
   14804:	4e6b      	ldr	r6, [pc, #428]	; (149b4 <dis_set+0x2a0>)
   14806:	615e      	str	r6, [r3, #20]
   14808:	2c08      	cmp	r4, #8
   1480a:	dd00      	ble.n	1480e <dis_set+0xfa>
   1480c:	6198      	str	r0, [r3, #24]
   1480e:	290b      	cmp	r1, #11
   14810:	dd26      	ble.n	14860 <dis_set+0x14c>
   14812:	240c      	movs	r4, #12
   14814:	b13a      	cbz	r2, 14826 <dis_set+0x112>
   14816:	2103      	movs	r1, #3
   14818:	7039      	strb	r1, [r7, #0]
   1481a:	2100      	movs	r1, #0
   1481c:	7079      	strb	r1, [r7, #1]
   1481e:	70b9      	strb	r1, [r7, #2]
   14820:	70f9      	strb	r1, [r7, #3]
   14822:	6838      	ldr	r0, [r7, #0]
   14824:	6118      	str	r0, [r3, #16]
   14826:	2100      	movs	r1, #0
   14828:	f36f 0100 	bfc	r1, #0, #1
   1482c:	f36f 0141 	bfc	r1, #1, #1
   14830:	f36f 0182 	bfc	r1, #2, #1
   14834:	f36f 01c5 	bfc	r1, #3, #3
   14838:	2301      	movs	r3, #1
   1483a:	f363 1188 	bfi	r1, r3, #6, #3
   1483e:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   14842:	f364 2152 	bfi	r1, r4, #9, #10
   14846:	f36f 41de 	bfc	r1, #19, #12
   1484a:	f36f 71df 	bfc	r1, #31, #1
   1484e:	2300      	movs	r3, #0
   14850:	4855      	ldr	r0, [pc, #340]	; (149a8 <dis_set+0x294>)
   14852:	f014 fab6 	bl	28dc2 <z_impl_z_log_msg_static_create>
   14856:	46ad      	mov	sp, r5
   14858:	e777      	b.n	1474a <dis_set+0x36>
   1485a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1485e:	e7cd      	b.n	147fc <dis_set+0xe8>
   14860:	f06f 041b 	mvn.w	r4, #27
   14864:	e7d6      	b.n	14814 <dis_set+0x100>
	if (!strncmp(name, "serial", nlen)) {
   14866:	462a      	mov	r2, r5
   14868:	4953      	ldr	r1, [pc, #332]	; (149b8 <dis_set+0x2a4>)
   1486a:	4620      	mov	r0, r4
   1486c:	f019 fe53 	bl	2e516 <strncmp>
   14870:	2800      	cmp	r0, #0
   14872:	d145      	bne.n	14900 <dis_set+0x1ec>
		len = read_cb(store, &dis_serial_number,
   14874:	2214      	movs	r2, #20
   14876:	4951      	ldr	r1, [pc, #324]	; (149bc <dis_set+0x2a8>)
   14878:	4630      	mov	r0, r6
   1487a:	47c0      	blx	r8
		if (len < 0) {
   1487c:	2800      	cmp	r0, #0
   1487e:	db03      	blt.n	14888 <dis_set+0x174>
			dis_serial_number[len] = '\0';
   14880:	4b4e      	ldr	r3, [pc, #312]	; (149bc <dis_set+0x2a8>)
   14882:	2200      	movs	r2, #0
   14884:	541a      	strb	r2, [r3, r0]
		return 0;
   14886:	e760      	b.n	1474a <dis_set+0x36>
			LOG_ERR("Failed to read serial number from storage"
   14888:	466d      	mov	r5, sp
   1488a:	b088      	sub	sp, #32
   1488c:	466b      	mov	r3, sp
   1488e:	f113 0210 	adds.w	r2, r3, #16
   14892:	d02f      	beq.n	148f4 <dis_set+0x1e0>
   14894:	210c      	movs	r1, #12
   14896:	b13a      	cbz	r2, 148a8 <dis_set+0x194>
   14898:	460c      	mov	r4, r1
   1489a:	2904      	cmp	r1, #4
   1489c:	dd01      	ble.n	148a2 <dis_set+0x18e>
   1489e:	4e48      	ldr	r6, [pc, #288]	; (149c0 <dis_set+0x2ac>)
   148a0:	615e      	str	r6, [r3, #20]
   148a2:	2c08      	cmp	r4, #8
   148a4:	dd00      	ble.n	148a8 <dis_set+0x194>
   148a6:	6198      	str	r0, [r3, #24]
   148a8:	290b      	cmp	r1, #11
   148aa:	dd26      	ble.n	148fa <dis_set+0x1e6>
   148ac:	240c      	movs	r4, #12
   148ae:	b13a      	cbz	r2, 148c0 <dis_set+0x1ac>
   148b0:	2103      	movs	r1, #3
   148b2:	7039      	strb	r1, [r7, #0]
   148b4:	2100      	movs	r1, #0
   148b6:	7079      	strb	r1, [r7, #1]
   148b8:	70b9      	strb	r1, [r7, #2]
   148ba:	70f9      	strb	r1, [r7, #3]
   148bc:	6838      	ldr	r0, [r7, #0]
   148be:	6118      	str	r0, [r3, #16]
   148c0:	2100      	movs	r1, #0
   148c2:	f36f 0100 	bfc	r1, #0, #1
   148c6:	f36f 0141 	bfc	r1, #1, #1
   148ca:	f36f 0182 	bfc	r1, #2, #1
   148ce:	f36f 01c5 	bfc	r1, #3, #3
   148d2:	2301      	movs	r3, #1
   148d4:	f363 1188 	bfi	r1, r3, #6, #3
   148d8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   148dc:	f364 2152 	bfi	r1, r4, #9, #10
   148e0:	f36f 41de 	bfc	r1, #19, #12
   148e4:	f36f 71df 	bfc	r1, #31, #1
   148e8:	2300      	movs	r3, #0
   148ea:	482f      	ldr	r0, [pc, #188]	; (149a8 <dis_set+0x294>)
   148ec:	f014 fa69 	bl	28dc2 <z_impl_z_log_msg_static_create>
   148f0:	46ad      	mov	sp, r5
   148f2:	e72a      	b.n	1474a <dis_set+0x36>
   148f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   148f8:	e7cd      	b.n	14896 <dis_set+0x182>
   148fa:	f06f 041b 	mvn.w	r4, #27
   148fe:	e7d6      	b.n	148ae <dis_set+0x19a>
	if (!strncmp(name, "sw", nlen)) {
   14900:	462a      	mov	r2, r5
   14902:	4930      	ldr	r1, [pc, #192]	; (149c4 <dis_set+0x2b0>)
   14904:	4620      	mov	r0, r4
   14906:	f019 fe06 	bl	2e516 <strncmp>
   1490a:	2800      	cmp	r0, #0
   1490c:	f47f af1d 	bne.w	1474a <dis_set+0x36>
		len = read_cb(store, &dis_sw_rev, sizeof(dis_sw_rev) - 1);
   14910:	2214      	movs	r2, #20
   14912:	492d      	ldr	r1, [pc, #180]	; (149c8 <dis_set+0x2b4>)
   14914:	4630      	mov	r0, r6
   14916:	47c0      	blx	r8
		if (len < 0) {
   14918:	2800      	cmp	r0, #0
   1491a:	db03      	blt.n	14924 <dis_set+0x210>
			dis_sw_rev[len] = '\0';
   1491c:	4b2a      	ldr	r3, [pc, #168]	; (149c8 <dis_set+0x2b4>)
   1491e:	2200      	movs	r2, #0
   14920:	541a      	strb	r2, [r3, r0]
		return 0;
   14922:	e712      	b.n	1474a <dis_set+0x36>
			LOG_ERR("Failed to read software revision from storage"
   14924:	466d      	mov	r5, sp
   14926:	b088      	sub	sp, #32
   14928:	466b      	mov	r3, sp
   1492a:	f113 0210 	adds.w	r2, r3, #16
   1492e:	d02f      	beq.n	14990 <dis_set+0x27c>
   14930:	210c      	movs	r1, #12
   14932:	b13a      	cbz	r2, 14944 <dis_set+0x230>
   14934:	460c      	mov	r4, r1
   14936:	2904      	cmp	r1, #4
   14938:	dd01      	ble.n	1493e <dis_set+0x22a>
   1493a:	4e24      	ldr	r6, [pc, #144]	; (149cc <dis_set+0x2b8>)
   1493c:	615e      	str	r6, [r3, #20]
   1493e:	2c08      	cmp	r4, #8
   14940:	dd00      	ble.n	14944 <dis_set+0x230>
   14942:	6198      	str	r0, [r3, #24]
   14944:	290b      	cmp	r1, #11
   14946:	dd26      	ble.n	14996 <dis_set+0x282>
   14948:	240c      	movs	r4, #12
   1494a:	b13a      	cbz	r2, 1495c <dis_set+0x248>
   1494c:	2103      	movs	r1, #3
   1494e:	7039      	strb	r1, [r7, #0]
   14950:	2100      	movs	r1, #0
   14952:	7079      	strb	r1, [r7, #1]
   14954:	70b9      	strb	r1, [r7, #2]
   14956:	70f9      	strb	r1, [r7, #3]
   14958:	6838      	ldr	r0, [r7, #0]
   1495a:	6118      	str	r0, [r3, #16]
   1495c:	2100      	movs	r1, #0
   1495e:	f36f 0100 	bfc	r1, #0, #1
   14962:	f36f 0141 	bfc	r1, #1, #1
   14966:	f36f 0182 	bfc	r1, #2, #1
   1496a:	f36f 01c5 	bfc	r1, #3, #3
   1496e:	2301      	movs	r3, #1
   14970:	f363 1188 	bfi	r1, r3, #6, #3
   14974:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   14978:	f364 2152 	bfi	r1, r4, #9, #10
   1497c:	f36f 41de 	bfc	r1, #19, #12
   14980:	f36f 71df 	bfc	r1, #31, #1
   14984:	2300      	movs	r3, #0
   14986:	4808      	ldr	r0, [pc, #32]	; (149a8 <dis_set+0x294>)
   14988:	f014 fa1b 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1498c:	46ad      	mov	sp, r5
   1498e:	e6dc      	b.n	1474a <dis_set+0x36>
   14990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   14994:	e7cd      	b.n	14932 <dis_set+0x21e>
   14996:	f06f 041b 	mvn.w	r4, #27
   1499a:	e7d6      	b.n	1494a <dis_set+0x236>
   1499c:	0002f65c 	.word	0x0002f65c
   149a0:	2000062c 	.word	0x2000062c
   149a4:	0002f664 	.word	0x0002f664
   149a8:	0002ee90 	.word	0x0002ee90
   149ac:	0002f698 	.word	0x0002f698
   149b0:	20000644 	.word	0x20000644
   149b4:	0002f6a0 	.word	0x0002f6a0
   149b8:	0002f6cc 	.word	0x0002f6cc
   149bc:	20000614 	.word	0x20000614
   149c0:	0002f6d4 	.word	0x0002f6d4
   149c4:	0002f708 	.word	0x0002f708
   149c8:	200005fc 	.word	0x200005fc
   149cc:	0002f70c 	.word	0x0002f70c

000149d0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   149d0:	b570      	push	{r4, r5, r6, lr}
   149d2:	4605      	mov	r5, r0
	__asm__ volatile(
   149d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   149d8:	f3ef 8611 	mrs	r6, BASEPRI
   149dc:	f383 8812 	msr	BASEPRI_MAX, r3
   149e0:	f3bf 8f6f 	isb	sy
   149e4:	4b0e      	ldr	r3, [pc, #56]	; (14a20 <pm_state_notify+0x50>)
   149e6:	681c      	ldr	r4, [r3, #0]
   149e8:	e00d      	b.n	14a06 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   149ea:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   149ec:	b13a      	cbz	r2, 149fe <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   149ee:	4b0d      	ldr	r3, [pc, #52]	; (14a24 <pm_state_notify+0x54>)
   149f0:	7d1b      	ldrb	r3, [r3, #20]
   149f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   149f6:	490c      	ldr	r1, [pc, #48]	; (14a28 <pm_state_notify+0x58>)
   149f8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   149fc:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   149fe:	4623      	mov	r3, r4
	return node->next;
   14a00:	6824      	ldr	r4, [r4, #0]
   14a02:	b104      	cbz	r4, 14a06 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   14a04:	b123      	cbz	r3, 14a10 <pm_state_notify+0x40>
   14a06:	b12c      	cbz	r4, 14a14 <pm_state_notify+0x44>
		if (entering_state) {
   14a08:	2d00      	cmp	r5, #0
   14a0a:	d0ee      	beq.n	149ea <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   14a0c:	6862      	ldr	r2, [r4, #4]
   14a0e:	e7ed      	b.n	149ec <pm_state_notify+0x1c>
   14a10:	461c      	mov	r4, r3
   14a12:	e7f8      	b.n	14a06 <pm_state_notify+0x36>
	__asm__ volatile(
   14a14:	f386 8811 	msr	BASEPRI, r6
   14a18:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   14a1c:	bd70      	pop	{r4, r5, r6, pc}
   14a1e:	bf00      	nop
   14a20:	20003168 	.word	0x20003168
   14a24:	20004040 	.word	0x20004040
   14a28:	2000315c 	.word	0x2000315c

00014a2c <pm_exit_pos_ops>:
{
   14a2c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   14a2e:	4b06      	ldr	r3, [pc, #24]	; (14a48 <pm_exit_pos_ops+0x1c>)
   14a30:	b123      	cbz	r3, 14a3c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14a32:	7841      	ldrb	r1, [r0, #1]
   14a34:	7800      	ldrb	r0, [r0, #0]
   14a36:	f014 fe58 	bl	296ea <pm_state_exit_post_ops>
}
   14a3a:	bd08      	pop	{r3, pc}
   14a3c:	2300      	movs	r3, #0
   14a3e:	f383 8811 	msr	BASEPRI, r3
   14a42:	f3bf 8f6f 	isb	sy
   14a46:	e7f8      	b.n	14a3a <pm_exit_pos_ops+0xe>
   14a48:	000296eb 	.word	0x000296eb

00014a4c <pm_system_resume>:

void pm_system_resume(void)
{
   14a4c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   14a4e:	4b0e      	ldr	r3, [pc, #56]	; (14a88 <pm_system_resume+0x3c>)
   14a50:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14a52:	4621      	mov	r1, r4
   14a54:	480d      	ldr	r0, [pc, #52]	; (14a8c <pm_system_resume+0x40>)
   14a56:	f014 fb11 	bl	2907c <atomic_test_and_clear_bit>
   14a5a:	b900      	cbnz	r0, 14a5e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   14a5c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   14a5e:	0065      	lsls	r5, r4, #1
   14a60:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   14a64:	4e0a      	ldr	r6, [pc, #40]	; (14a90 <pm_system_resume+0x44>)
   14a66:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   14a6a:	f7ff ffdf 	bl	14a2c <pm_exit_pos_ops>
		pm_state_notify(false);
   14a6e:	2000      	movs	r0, #0
   14a70:	f7ff ffae 	bl	149d0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14a74:	192b      	adds	r3, r5, r4
   14a76:	0099      	lsls	r1, r3, #2
   14a78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   14a7c:	2200      	movs	r2, #0
   14a7e:	5072      	str	r2, [r6, r1]
   14a80:	605a      	str	r2, [r3, #4]
   14a82:	609a      	str	r2, [r3, #8]
}
   14a84:	e7ea      	b.n	14a5c <pm_system_resume+0x10>
   14a86:	bf00      	nop
   14a88:	20004040 	.word	0x20004040
   14a8c:	20003170 	.word	0x20003170
   14a90:	2000315c 	.word	0x2000315c

00014a94 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   14a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a96:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   14a98:	4b38      	ldr	r3, [pc, #224]	; (14b7c <pm_system_suspend+0xe8>)
   14a9a:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   14a9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14aa0:	f3ef 8611 	mrs	r6, BASEPRI
   14aa4:	f383 8812 	msr	BASEPRI_MAX, r3
   14aa8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   14aac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14ab0:	4b33      	ldr	r3, [pc, #204]	; (14b80 <pm_system_suspend+0xec>)
   14ab2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   14ab6:	2b00      	cmp	r3, #0
   14ab8:	d039      	beq.n	14b2e <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14aba:	4b32      	ldr	r3, [pc, #200]	; (14b84 <pm_system_suspend+0xf0>)
   14abc:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   14ac0:	4f2f      	ldr	r7, [pc, #188]	; (14b80 <pm_system_suspend+0xec>)
   14ac2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   14ac6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   14aca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14ace:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14ad2:	2300      	movs	r3, #0
   14ad4:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   14ad8:	f386 8811 	msr	BASEPRI, r6
   14adc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14ae0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14ae4:	4a27      	ldr	r2, [pc, #156]	; (14b84 <pm_system_suspend+0xf0>)
   14ae6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   14aea:	2b00      	cmp	r3, #0
   14aec:	d044      	beq.n	14b78 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14aee:	f1b5 3fff 	cmp.w	r5, #4294967295
   14af2:	d12b      	bne.n	14b4c <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14af4:	f00d fdf4 	bl	226e0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14af8:	2001      	movs	r0, #1
   14afa:	f7ff ff69 	bl	149d0 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   14afe:	4621      	mov	r1, r4
   14b00:	4821      	ldr	r0, [pc, #132]	; (14b88 <pm_system_suspend+0xf4>)
   14b02:	f014 fad7 	bl	290b4 <atomic_set_bit>
	if (pm_state_set != NULL) {
   14b06:	4b21      	ldr	r3, [pc, #132]	; (14b8c <pm_system_suspend+0xf8>)
   14b08:	b15b      	cbz	r3, 14b22 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
   14b0a:	4a1e      	ldr	r2, [pc, #120]	; (14b84 <pm_system_suspend+0xf0>)
   14b0c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14b10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14b14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   14b18:	7859      	ldrb	r1, [r3, #1]
   14b1a:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   14b1e:	f014 fddc 	bl	296da <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14b22:	f7ff ff93 	bl	14a4c <pm_system_resume>
	k_sched_unlock();
   14b26:	f00d ffdd 	bl	22ae4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   14b2a:	2001      	movs	r0, #1
}
   14b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   14b2e:	4601      	mov	r1, r0
   14b30:	4620      	mov	r0, r4
   14b32:	f000 f831 	bl	14b98 <pm_policy_next_state>
		if (info != NULL) {
   14b36:	2800      	cmp	r0, #0
   14b38:	d0ce      	beq.n	14ad8 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   14b3a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   14b3e:	4b11      	ldr	r3, [pc, #68]	; (14b84 <pm_system_suspend+0xf0>)
   14b40:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14b44:	c807      	ldmia	r0, {r0, r1, r2}
   14b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   14b4a:	e7c5      	b.n	14ad8 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
   14b4c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14b50:	4b0c      	ldr	r3, [pc, #48]	; (14b84 <pm_system_suspend+0xf0>)
   14b52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14b56:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   14b58:	0c41      	lsrs	r1, r0, #17
   14b5a:	03c0      	lsls	r0, r0, #15
   14b5c:	4b0c      	ldr	r3, [pc, #48]	; (14b90 <pm_system_suspend+0xfc>)
   14b5e:	18c0      	adds	r0, r0, r3
   14b60:	4a0c      	ldr	r2, [pc, #48]	; (14b94 <pm_system_suspend+0x100>)
   14b62:	f04f 0300 	mov.w	r3, #0
   14b66:	f141 0100 	adc.w	r1, r1, #0
   14b6a:	f7eb fee7 	bl	93c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   14b6e:	2101      	movs	r1, #1
   14b70:	1a28      	subs	r0, r5, r0
   14b72:	f019 f94b 	bl	2de0c <z_set_timeout_expiry>
   14b76:	e7bd      	b.n	14af4 <pm_system_suspend+0x60>
		return false;
   14b78:	2000      	movs	r0, #0
   14b7a:	e7d7      	b.n	14b2c <pm_system_suspend+0x98>
   14b7c:	20004040 	.word	0x20004040
   14b80:	20003150 	.word	0x20003150
   14b84:	2000315c 	.word	0x2000315c
   14b88:	20003170 	.word	0x20003170
   14b8c:	000296db 	.word	0x000296db
   14b90:	000f423f 	.word	0x000f423f
   14b94:	000f4240 	.word	0x000f4240

00014b98 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   14b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b9c:	b082      	sub	sp, #8
   14b9e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14ba0:	a901      	add	r1, sp, #4
   14ba2:	f000 f845 	bl	14c30 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14ba6:	1e44      	subs	r4, r0, #1
   14ba8:	b224      	sxth	r4, r4
   14baa:	e007      	b.n	14bbc <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   14bac:	f1b6 3fff 	cmp.w	r6, #4294967295
   14bb0:	d033      	beq.n	14c1a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   14bb2:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   14bb4:	45b0      	cmp	r8, r6
   14bb6:	d930      	bls.n	14c1a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14bb8:	3c01      	subs	r4, #1
   14bba:	b224      	sxth	r4, r4
   14bbc:	2c00      	cmp	r4, #0
   14bbe:	db2b      	blt.n	14c18 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   14bc0:	9b01      	ldr	r3, [sp, #4]
   14bc2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14bc6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   14bca:	7869      	ldrb	r1, [r5, #1]
   14bcc:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   14bd0:	f014 fa83 	bl	290da <pm_policy_state_lock_is_active>
   14bd4:	2800      	cmp	r0, #0
   14bd6:	d1ef      	bne.n	14bb8 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   14bd8:	6868      	ldr	r0, [r5, #4]
   14bda:	0c41      	lsrs	r1, r0, #17
   14bdc:	03c0      	lsls	r0, r0, #15
   14bde:	4f11      	ldr	r7, [pc, #68]	; (14c24 <pm_policy_next_state+0x8c>)
   14be0:	19c0      	adds	r0, r0, r7
   14be2:	4a11      	ldr	r2, [pc, #68]	; (14c28 <pm_policy_next_state+0x90>)
   14be4:	f04f 0300 	mov.w	r3, #0
   14be8:	f141 0100 	adc.w	r1, r1, #0
   14bec:	f7eb fea6 	bl	93c <__aeabi_uldivmod>
   14bf0:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   14bf2:	68ab      	ldr	r3, [r5, #8]
   14bf4:	0c59      	lsrs	r1, r3, #17
   14bf6:	03db      	lsls	r3, r3, #15
   14bf8:	19d8      	adds	r0, r3, r7
   14bfa:	4a0b      	ldr	r2, [pc, #44]	; (14c28 <pm_policy_next_state+0x90>)
   14bfc:	f04f 0300 	mov.w	r3, #0
   14c00:	f141 0100 	adc.w	r1, r1, #0
   14c04:	f7eb fe9a 	bl	93c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14c08:	4b08      	ldr	r3, [pc, #32]	; (14c2c <pm_policy_next_state+0x94>)
   14c0a:	681b      	ldr	r3, [r3, #0]
   14c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14c10:	d0cc      	beq.n	14bac <pm_policy_next_state+0x14>
   14c12:	4283      	cmp	r3, r0
   14c14:	d8ca      	bhi.n	14bac <pm_policy_next_state+0x14>
   14c16:	e7cf      	b.n	14bb8 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   14c18:	2500      	movs	r5, #0
}
   14c1a:	4628      	mov	r0, r5
   14c1c:	b002      	add	sp, #8
   14c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c22:	bf00      	nop
   14c24:	000f423f 	.word	0x000f423f
   14c28:	000f4240 	.word	0x000f4240
   14c2c:	2000065c 	.word	0x2000065c

00014c30 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14c30:	b908      	cbnz	r0, 14c36 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14c32:	4b02      	ldr	r3, [pc, #8]	; (14c3c <pm_state_cpu_get_all+0xc>)
   14c34:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14c36:	2000      	movs	r0, #0
   14c38:	4770      	bx	lr
   14c3a:	bf00      	nop
   14c3c:	0002f818 	.word	0x0002f818

00014c40 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   14c40:	b470      	push	{r4, r5, r6}
   14c42:	b08d      	sub	sp, #52	; 0x34
   14c44:	4606      	mov	r6, r0
   14c46:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   14c48:	f10d 0c04 	add.w	ip, sp, #4
   14c4c:	4c2b      	ldr	r4, [pc, #172]	; (14cfc <tc_aes128_set_encrypt_key+0xbc>)
   14c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14c50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14c56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14c5a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   14c5e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   14c62:	2e00      	cmp	r6, #0
   14c64:	d045      	beq.n	14cf2 <tc_aes128_set_encrypt_key+0xb2>
   14c66:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   14c68:	2d00      	cmp	r5, #0
   14c6a:	d044      	beq.n	14cf6 <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   14c6c:	2300      	movs	r3, #0
   14c6e:	e00f      	b.n	14c90 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14c70:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   14c74:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   14c78:	784a      	ldrb	r2, [r1, #1]
   14c7a:	0412      	lsls	r2, r2, #16
   14c7c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14c80:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14c82:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14c86:	78c9      	ldrb	r1, [r1, #3]
   14c88:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14c8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   14c8e:	3301      	adds	r3, #1
   14c90:	2b03      	cmp	r3, #3
   14c92:	d9ed      	bls.n	14c70 <tc_aes128_set_encrypt_key+0x30>
   14c94:	e006      	b.n	14ca4 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   14c96:	1f19      	subs	r1, r3, #4
   14c98:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   14c9c:	404a      	eors	r2, r1
   14c9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14ca2:	3301      	adds	r3, #1
   14ca4:	2b2b      	cmp	r3, #43	; 0x2b
   14ca6:	d820      	bhi.n	14cea <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   14ca8:	1e5a      	subs	r2, r3, #1
   14caa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   14cae:	f013 0f03 	tst.w	r3, #3
   14cb2:	d1f0      	bne.n	14c96 <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   14cb4:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14cb8:	0e11      	lsrs	r1, r2, #24
   14cba:	4c11      	ldr	r4, [pc, #68]	; (14d00 <tc_aes128_set_encrypt_key+0xc0>)
   14cbc:	5c65      	ldrb	r5, [r4, r1]
   14cbe:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14cc2:	5c61      	ldrb	r1, [r4, r1]
   14cc4:	0409      	lsls	r1, r1, #16
   14cc6:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   14cca:	f3c2 2507 	ubfx	r5, r2, #8, #8
   14cce:	5d65      	ldrb	r5, [r4, r5]
   14cd0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14cd4:	b2d2      	uxtb	r2, r2
   14cd6:	5ca2      	ldrb	r2, [r4, r2]
   14cd8:	4311      	orrs	r1, r2
   14cda:	f023 0203 	bic.w	r2, r3, #3
   14cde:	3230      	adds	r2, #48	; 0x30
   14ce0:	446a      	add	r2, sp
   14ce2:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   14ce6:	404a      	eors	r2, r1
   14ce8:	e7d5      	b.n	14c96 <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   14cea:	2001      	movs	r0, #1
}
   14cec:	b00d      	add	sp, #52	; 0x34
   14cee:	bc70      	pop	{r4, r5, r6}
   14cf0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14cf2:	2000      	movs	r0, #0
   14cf4:	e7fa      	b.n	14cec <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   14cf6:	2000      	movs	r0, #0
   14cf8:	e7f8      	b.n	14cec <tc_aes128_set_encrypt_key+0xac>
   14cfa:	bf00      	nop
   14cfc:	0002eff0 	.word	0x0002eff0
   14d00:	0002f818 	.word	0x0002f818

00014d04 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14d04:	2800      	cmp	r0, #0
   14d06:	d04e      	beq.n	14da6 <tc_aes_encrypt+0xa2>
{
   14d08:	b570      	push	{r4, r5, r6, lr}
   14d0a:	b084      	sub	sp, #16
   14d0c:	4615      	mov	r5, r2
   14d0e:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   14d10:	2900      	cmp	r1, #0
   14d12:	d04a      	beq.n	14daa <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   14d14:	2a00      	cmp	r2, #0
   14d16:	d04a      	beq.n	14dae <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   14d18:	2310      	movs	r3, #16
   14d1a:	460a      	mov	r2, r1
   14d1c:	4619      	mov	r1, r3
   14d1e:	4668      	mov	r0, sp
   14d20:	f014 f9dd 	bl	290de <_copy>
	add_round_key(state, s->words);
   14d24:	4629      	mov	r1, r5
   14d26:	4668      	mov	r0, sp
   14d28:	f014 f9f3 	bl	29112 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   14d2c:	2400      	movs	r4, #0
   14d2e:	e014      	b.n	14d5a <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   14d30:	f81d 1003 	ldrb.w	r1, [sp, r3]
   14d34:	481f      	ldr	r0, [pc, #124]	; (14db4 <tc_aes_encrypt+0xb0>)
   14d36:	5c41      	ldrb	r1, [r0, r1]
   14d38:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14d3c:	3301      	adds	r3, #1
   14d3e:	2b0f      	cmp	r3, #15
   14d40:	d9f6      	bls.n	14d30 <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   14d42:	4668      	mov	r0, sp
   14d44:	f014 fa26 	bl	29194 <shift_rows>
		mix_columns(state);
   14d48:	4668      	mov	r0, sp
   14d4a:	f014 fa9d 	bl	29288 <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   14d4e:	3401      	adds	r4, #1
   14d50:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   14d54:	4668      	mov	r0, sp
   14d56:	f014 f9dc 	bl	29112 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   14d5a:	2c08      	cmp	r4, #8
   14d5c:	d801      	bhi.n	14d62 <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   14d5e:	2300      	movs	r3, #0
   14d60:	e7ed      	b.n	14d3e <tc_aes_encrypt+0x3a>
   14d62:	2300      	movs	r3, #0
   14d64:	e006      	b.n	14d74 <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   14d66:	f81d 2003 	ldrb.w	r2, [sp, r3]
   14d6a:	4912      	ldr	r1, [pc, #72]	; (14db4 <tc_aes_encrypt+0xb0>)
   14d6c:	5c8a      	ldrb	r2, [r1, r2]
   14d6e:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14d72:	3301      	adds	r3, #1
   14d74:	2b0f      	cmp	r3, #15
   14d76:	d9f6      	bls.n	14d66 <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   14d78:	4668      	mov	r0, sp
   14d7a:	f014 fa0b 	bl	29194 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   14d7e:	1c61      	adds	r1, r4, #1
   14d80:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   14d84:	4668      	mov	r0, sp
   14d86:	f014 f9c4 	bl	29112 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   14d8a:	2310      	movs	r3, #16
   14d8c:	466a      	mov	r2, sp
   14d8e:	4619      	mov	r1, r3
   14d90:	4630      	mov	r0, r6
   14d92:	f014 f9a4 	bl	290de <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   14d96:	2210      	movs	r2, #16
   14d98:	2100      	movs	r1, #0
   14d9a:	4668      	mov	r0, sp
   14d9c:	f014 f9ac 	bl	290f8 <_set>

	return TC_CRYPTO_SUCCESS;
   14da0:	2001      	movs	r0, #1
}
   14da2:	b004      	add	sp, #16
   14da4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   14da6:	2000      	movs	r0, #0
}
   14da8:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14daa:	2000      	movs	r0, #0
   14dac:	e7f9      	b.n	14da2 <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   14dae:	2000      	movs	r0, #0
   14db0:	e7f7      	b.n	14da2 <tc_aes_encrypt+0x9e>
   14db2:	bf00      	nop
   14db4:	0002f818 	.word	0x0002f818

00014db8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   14db8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   14dba:	4802      	ldr	r0, [pc, #8]	; (14dc4 <nrf_cc3xx_platform_abort_init+0xc>)
   14dbc:	f010 f9a8 	bl	25110 <nrf_cc3xx_platform_set_abort>
}
   14dc0:	bd08      	pop	{r3, pc}
   14dc2:	bf00      	nop
   14dc4:	0002f918 	.word	0x0002f918

00014dc8 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
   14dc8:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
   14dcc:	d017      	beq.n	14dfe <mutex_flags_unknown+0x36>
   14dce:	d80c      	bhi.n	14dea <mutex_flags_unknown+0x22>
   14dd0:	f640 63ba 	movw	r3, #3770	; 0xeba
   14dd4:	4298      	cmp	r0, r3
   14dd6:	d014      	beq.n	14e02 <mutex_flags_unknown+0x3a>
   14dd8:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
   14ddc:	d013      	beq.n	14e06 <mutex_flags_unknown+0x3e>
   14dde:	283a      	cmp	r0, #58	; 0x3a
   14de0:	d001      	beq.n	14de6 <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
   14de2:	2001      	movs	r0, #1
   14de4:	4770      	bx	lr
    switch(flags){
   14de6:	2000      	movs	r0, #0
   14de8:	4770      	bx	lr
   14dea:	4b09      	ldr	r3, [pc, #36]	; (14e10 <mutex_flags_unknown+0x48>)
   14dec:	4298      	cmp	r0, r3
   14dee:	d00c      	beq.n	14e0a <mutex_flags_unknown+0x42>
   14df0:	4b08      	ldr	r3, [pc, #32]	; (14e14 <mutex_flags_unknown+0x4c>)
   14df2:	4298      	cmp	r0, r3
   14df4:	d001      	beq.n	14dfa <mutex_flags_unknown+0x32>
            return true;
   14df6:	2001      	movs	r0, #1
    }
}
   14df8:	4770      	bx	lr
    switch(flags){
   14dfa:	2000      	movs	r0, #0
   14dfc:	4770      	bx	lr
   14dfe:	2000      	movs	r0, #0
   14e00:	4770      	bx	lr
   14e02:	2000      	movs	r0, #0
   14e04:	4770      	bx	lr
   14e06:	2000      	movs	r0, #0
   14e08:	4770      	bx	lr
   14e0a:	2000      	movs	r0, #0
   14e0c:	4770      	bx	lr
   14e0e:	bf00      	nop
   14e10:	3a00003a 	.word	0x3a00003a
   14e14:	a95c5f2c 	.word	0xa95c5f2c

00014e18 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14e18:	b1e8      	cbz	r0, 14e56 <mutex_unlock_platform+0x3e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14e1a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14e1c:	6842      	ldr	r2, [r0, #4]
   14e1e:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
   14e22:	d007      	beq.n	14e34 <mutex_unlock_platform+0x1c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14e24:	490f      	ldr	r1, [pc, #60]	; (14e64 <mutex_unlock_platform+0x4c>)
   14e26:	428a      	cmp	r2, r1
   14e28:	d01a      	beq.n	14e60 <mutex_unlock_platform+0x48>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   14e2a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14e2c:	f00d f9b0 	bl	22190 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14e30:	2000      	movs	r0, #0
    }
}
   14e32:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   14e34:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14e36:	2200      	movs	r2, #0
   14e38:	f3bf 8f5b 	dmb	ish
   14e3c:	e853 1f00 	ldrex	r1, [r3]
   14e40:	2901      	cmp	r1, #1
   14e42:	d103      	bne.n	14e4c <mutex_unlock_platform+0x34>
   14e44:	e843 2000 	strex	r0, r2, [r3]
   14e48:	2800      	cmp	r0, #0
   14e4a:	d1f7      	bne.n	14e3c <mutex_unlock_platform+0x24>
   14e4c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14e50:	d104      	bne.n	14e5c <mutex_unlock_platform+0x44>
   14e52:	4610      	mov	r0, r2
   14e54:	e7ed      	b.n	14e32 <mutex_unlock_platform+0x1a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14e56:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   14e5a:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14e5c:	4802      	ldr	r0, [pc, #8]	; (14e68 <mutex_unlock_platform+0x50>)
   14e5e:	e7e8      	b.n	14e32 <mutex_unlock_platform+0x1a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14e60:	4802      	ldr	r0, [pc, #8]	; (14e6c <mutex_unlock_platform+0x54>)
   14e62:	e7e6      	b.n	14e32 <mutex_unlock_platform+0x1a>
   14e64:	a95c5f2c 	.word	0xa95c5f2c
   14e68:	ffff8fe9 	.word	0xffff8fe9
   14e6c:	ffff8fea 	.word	0xffff8fea

00014e70 <mutex_lock_platform>:
    if(mutex == NULL) {
   14e70:	b330      	cbz	r0, 14ec0 <mutex_lock_platform+0x50>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14e72:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   14e74:	6842      	ldr	r2, [r0, #4]
   14e76:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
   14e7a:	d00c      	beq.n	14e96 <mutex_lock_platform+0x26>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14e7c:	4912      	ldr	r1, [pc, #72]	; (14ec8 <mutex_lock_platform+0x58>)
   14e7e:	428a      	cmp	r2, r1
   14e80:	d01c      	beq.n	14ebc <mutex_lock_platform+0x4c>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14e82:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14e84:	f04f 32ff 	mov.w	r2, #4294967295
   14e88:	f04f 33ff 	mov.w	r3, #4294967295
   14e8c:	f00d f8fc 	bl	22088 <z_impl_k_mutex_lock>
        if (ret == 0) {
   14e90:	b188      	cbz	r0, 14eb6 <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   14e92:	480e      	ldr	r0, [pc, #56]	; (14ecc <mutex_lock_platform+0x5c>)
   14e94:	e00f      	b.n	14eb6 <mutex_lock_platform+0x46>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   14e96:	6803      	ldr	r3, [r0, #0]
   14e98:	2201      	movs	r2, #1
   14e9a:	f3bf 8f5b 	dmb	ish
   14e9e:	e853 1f00 	ldrex	r1, [r3]
   14ea2:	2900      	cmp	r1, #0
   14ea4:	d103      	bne.n	14eae <mutex_lock_platform+0x3e>
   14ea6:	e843 2000 	strex	r0, r2, [r3]
   14eaa:	2800      	cmp	r0, #0
   14eac:	d1f7      	bne.n	14e9e <mutex_lock_platform+0x2e>
   14eae:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14eb2:	d101      	bne.n	14eb8 <mutex_lock_platform+0x48>
   14eb4:	2000      	movs	r0, #0
}
   14eb6:	bd08      	pop	{r3, pc}
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14eb8:	4804      	ldr	r0, [pc, #16]	; (14ecc <mutex_lock_platform+0x5c>)
   14eba:	e7fc      	b.n	14eb6 <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14ebc:	4804      	ldr	r0, [pc, #16]	; (14ed0 <mutex_lock_platform+0x60>)
   14ebe:	e7fa      	b.n	14eb6 <mutex_lock_platform+0x46>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14ec0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   14ec4:	4770      	bx	lr
   14ec6:	bf00      	nop
   14ec8:	a95c5f2c 	.word	0xa95c5f2c
   14ecc:	ffff8fe9 	.word	0xffff8fe9
   14ed0:	ffff8fea 	.word	0xffff8fea

00014ed4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14ed4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14ed6:	4604      	mov	r4, r0
   14ed8:	b1b0      	cbz	r0, 14f08 <mutex_free_platform+0x34>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14eda:	6863      	ldr	r3, [r4, #4]
   14edc:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14ee0:	d011      	beq.n	14f06 <mutex_free_platform+0x32>
   14ee2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   14ee6:	d00e      	beq.n	14f06 <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14ee8:	4a0d      	ldr	r2, [pc, #52]	; (14f20 <mutex_free_platform+0x4c>)
   14eea:	4293      	cmp	r3, r2
   14eec:	d00b      	beq.n	14f06 <mutex_free_platform+0x32>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   14eee:	f413 6f68 	tst.w	r3, #3712	; 0xe80
   14ef2:	d10e      	bne.n	14f12 <mutex_free_platform+0x3e>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14ef4:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   14ef6:	2200      	movs	r2, #0
   14ef8:	601a      	str	r2, [r3, #0]
   14efa:	605a      	str	r2, [r3, #4]
   14efc:	609a      	str	r2, [r3, #8]
   14efe:	60da      	str	r2, [r3, #12]
   14f00:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   14f02:	4b07      	ldr	r3, [pc, #28]	; (14f20 <mutex_free_platform+0x4c>)
   14f04:	6063      	str	r3, [r4, #4]
}
   14f06:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   14f08:	4b06      	ldr	r3, [pc, #24]	; (14f24 <mutex_free_platform+0x50>)
   14f0a:	685b      	ldr	r3, [r3, #4]
   14f0c:	4806      	ldr	r0, [pc, #24]	; (14f28 <mutex_free_platform+0x54>)
   14f0e:	4798      	blx	r3
   14f10:	e7e3      	b.n	14eda <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   14f12:	4621      	mov	r1, r4
   14f14:	4805      	ldr	r0, [pc, #20]	; (14f2c <mutex_free_platform+0x58>)
   14f16:	f018 faa4 	bl	2d462 <k_mem_slab_free>
        mutex->mutex = NULL;
   14f1a:	2300      	movs	r3, #0
   14f1c:	6023      	str	r3, [r4, #0]
   14f1e:	e7f0      	b.n	14f02 <mutex_free_platform+0x2e>
   14f20:	a95c5f2c 	.word	0xa95c5f2c
   14f24:	20000a4c 	.word	0x20000a4c
   14f28:	0002f920 	.word	0x0002f920
   14f2c:	20003674 	.word	0x20003674

00014f30 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14f30:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14f32:	4604      	mov	r4, r0
   14f34:	b368      	cbz	r0, 14f92 <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14f36:	6860      	ldr	r0, [r4, #4]
   14f38:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
   14f3c:	d028      	beq.n	14f90 <mutex_init_platform+0x60>
   14f3e:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
   14f42:	d025      	beq.n	14f90 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   14f44:	4b17      	ldr	r3, [pc, #92]	; (14fa4 <mutex_init_platform+0x74>)
   14f46:	4298      	cmp	r0, r3
   14f48:	d028      	beq.n	14f9c <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
   14f4a:	f7ff ff3d 	bl	14dc8 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   14f4e:	b1c0      	cbz	r0, 14f82 <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14f50:	f04f 32ff 	mov.w	r2, #4294967295
   14f54:	f04f 33ff 	mov.w	r3, #4294967295
   14f58:	4621      	mov	r1, r4
   14f5a:	4813      	ldr	r0, [pc, #76]	; (14fa8 <mutex_init_platform+0x78>)
   14f5c:	f00c ff54 	bl	21e08 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14f60:	b908      	cbnz	r0, 14f66 <mutex_init_platform+0x36>
   14f62:	6823      	ldr	r3, [r4, #0]
   14f64:	b91b      	cbnz	r3, 14f6e <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
   14f66:	4b11      	ldr	r3, [pc, #68]	; (14fac <mutex_init_platform+0x7c>)
   14f68:	685b      	ldr	r3, [r3, #4]
   14f6a:	4811      	ldr	r0, [pc, #68]	; (14fb0 <mutex_init_platform+0x80>)
   14f6c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14f6e:	6823      	ldr	r3, [r4, #0]
   14f70:	2200      	movs	r2, #0
   14f72:	601a      	str	r2, [r3, #0]
   14f74:	605a      	str	r2, [r3, #4]
   14f76:	609a      	str	r2, [r3, #8]
   14f78:	60da      	str	r2, [r3, #12]
   14f7a:	611a      	str	r2, [r3, #16]
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   14f7c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   14f80:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   14f82:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14f84:	f018 fb06 	bl	2d594 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14f88:	6863      	ldr	r3, [r4, #4]
   14f8a:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   14f8e:	6063      	str	r3, [r4, #4]
}
   14f90:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   14f92:	4b06      	ldr	r3, [pc, #24]	; (14fac <mutex_init_platform+0x7c>)
   14f94:	685b      	ldr	r3, [r3, #4]
   14f96:	4807      	ldr	r0, [pc, #28]	; (14fb4 <mutex_init_platform+0x84>)
   14f98:	4798      	blx	r3
   14f9a:	e7cc      	b.n	14f36 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   14f9c:	6823      	ldr	r3, [r4, #0]
   14f9e:	2b00      	cmp	r3, #0
   14fa0:	d1d3      	bne.n	14f4a <mutex_init_platform+0x1a>
   14fa2:	e7d5      	b.n	14f50 <mutex_init_platform+0x20>
   14fa4:	a95c5f2c 	.word	0xa95c5f2c
   14fa8:	20003674 	.word	0x20003674
   14fac:	20000a4c 	.word	0x20000a4c
   14fb0:	0002f948 	.word	0x0002f948
   14fb4:	0002f920 	.word	0x0002f920

00014fb8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14fb8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14fba:	2340      	movs	r3, #64	; 0x40
   14fbc:	2214      	movs	r2, #20
   14fbe:	4904      	ldr	r1, [pc, #16]	; (14fd0 <nrf_cc3xx_platform_mutex_init+0x18>)
   14fc0:	4804      	ldr	r0, [pc, #16]	; (14fd4 <nrf_cc3xx_platform_mutex_init+0x1c>)
   14fc2:	f018 fa40 	bl	2d446 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14fc6:	4904      	ldr	r1, [pc, #16]	; (14fd8 <nrf_cc3xx_platform_mutex_init+0x20>)
   14fc8:	4804      	ldr	r0, [pc, #16]	; (14fdc <nrf_cc3xx_platform_mutex_init+0x24>)
   14fca:	f010 f969 	bl	252a0 <nrf_cc3xx_platform_set_mutexes>
}
   14fce:	bd08      	pop	{r3, pc}
   14fd0:	20003174 	.word	0x20003174
   14fd4:	20003674 	.word	0x20003674
   14fd8:	0002f978 	.word	0x0002f978
   14fdc:	0002f98c 	.word	0x0002f98c

00014fe0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14fe0:	4901      	ldr	r1, [pc, #4]	; (14fe8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14fe2:	2210      	movs	r2, #16
	str	r2, [r1]
   14fe4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14fe6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14fe8:	e000ed10 	.word	0xe000ed10

00014fec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14fec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14fee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14ff0:	f380 8811 	msr	BASEPRI, r0
	isb
   14ff4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14ff8:	f3bf 8f4f 	dsb	sy
   14ffc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14ffe:	b662      	cpsie	i
	isb
   15000:	f3bf 8f6f 	isb	sy

	bx	lr
   15004:	4770      	bx	lr
   15006:	bf00      	nop

00015008 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15008:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1500a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1500c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   15010:	f3bf 8f4f 	dsb	sy
   15014:	bf20      	wfe

	msr	BASEPRI, r0
   15016:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1501a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1501c:	4770      	bx	lr
   1501e:	bf00      	nop

00015020 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   15020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15024:	b082      	sub	sp, #8
   15026:	af00      	add	r7, sp, #0
   15028:	4606      	mov	r6, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1502a:	f8d0 e000 	ldr.w	lr, [r0]
   1502e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   15032:	6884      	ldr	r4, [r0, #8]
   15034:	46e8      	mov	r8, sp
   15036:	b08a      	sub	sp, #40	; 0x28
   15038:	466b      	mov	r3, sp
   1503a:	f113 0210 	adds.w	r2, r3, #16
   1503e:	f000 80b8 	beq.w	151b2 <esf_dump+0x192>
   15042:	2114      	movs	r1, #20
   15044:	b18a      	cbz	r2, 1506a <esf_dump+0x4a>
   15046:	4608      	mov	r0, r1
   15048:	2904      	cmp	r1, #4
   1504a:	dd03      	ble.n	15054 <esf_dump+0x34>
   1504c:	f8df 9294 	ldr.w	r9, [pc, #660]	; 152e4 <esf_dump+0x2c4>
   15050:	f8c3 9014 	str.w	r9, [r3, #20]
   15054:	2808      	cmp	r0, #8
   15056:	dd01      	ble.n	1505c <esf_dump+0x3c>
   15058:	f8c3 e018 	str.w	lr, [r3, #24]
   1505c:	280c      	cmp	r0, #12
   1505e:	dd01      	ble.n	15064 <esf_dump+0x44>
   15060:	f8c3 c01c 	str.w	ip, [r3, #28]
   15064:	2810      	cmp	r0, #16
   15066:	dd00      	ble.n	1506a <esf_dump+0x4a>
   15068:	621c      	str	r4, [r3, #32]
   1506a:	2913      	cmp	r1, #19
   1506c:	f340 80a4 	ble.w	151b8 <esf_dump+0x198>
   15070:	2414      	movs	r4, #20
   15072:	b13a      	cbz	r2, 15084 <esf_dump+0x64>
   15074:	2105      	movs	r1, #5
   15076:	7139      	strb	r1, [r7, #4]
   15078:	2100      	movs	r1, #0
   1507a:	7179      	strb	r1, [r7, #5]
   1507c:	71b9      	strb	r1, [r7, #6]
   1507e:	71f9      	strb	r1, [r7, #7]
   15080:	6878      	ldr	r0, [r7, #4]
   15082:	6118      	str	r0, [r3, #16]
   15084:	2100      	movs	r1, #0
   15086:	f36f 0100 	bfc	r1, #0, #1
   1508a:	f36f 0141 	bfc	r1, #1, #1
   1508e:	f36f 0182 	bfc	r1, #2, #1
   15092:	f36f 01c5 	bfc	r1, #3, #3
   15096:	2301      	movs	r3, #1
   15098:	f363 1188 	bfi	r1, r3, #6, #3
   1509c:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   150a0:	f364 2152 	bfi	r1, r4, #9, #10
   150a4:	f36f 41de 	bfc	r1, #19, #12
   150a8:	f36f 71df 	bfc	r1, #31, #1
   150ac:	2300      	movs	r3, #0
   150ae:	488c      	ldr	r0, [pc, #560]	; (152e0 <esf_dump+0x2c0>)
   150b0:	f013 fe87 	bl	28dc2 <z_impl_z_log_msg_static_create>
   150b4:	46c5      	mov	sp, r8
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   150b6:	f8d6 e00c 	ldr.w	lr, [r6, #12]
   150ba:	f8d6 c010 	ldr.w	ip, [r6, #16]
   150be:	6974      	ldr	r4, [r6, #20]
   150c0:	46e8      	mov	r8, sp
   150c2:	b08a      	sub	sp, #40	; 0x28
   150c4:	466b      	mov	r3, sp
   150c6:	f113 0210 	adds.w	r2, r3, #16
   150ca:	d078      	beq.n	151be <esf_dump+0x19e>
   150cc:	2114      	movs	r1, #20
   150ce:	b18a      	cbz	r2, 150f4 <esf_dump+0xd4>
   150d0:	4608      	mov	r0, r1
   150d2:	2904      	cmp	r1, #4
   150d4:	dd03      	ble.n	150de <esf_dump+0xbe>
   150d6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 152e8 <esf_dump+0x2c8>
   150da:	f8c3 9014 	str.w	r9, [r3, #20]
   150de:	2808      	cmp	r0, #8
   150e0:	dd01      	ble.n	150e6 <esf_dump+0xc6>
   150e2:	f8c3 e018 	str.w	lr, [r3, #24]
   150e6:	280c      	cmp	r0, #12
   150e8:	dd01      	ble.n	150ee <esf_dump+0xce>
   150ea:	f8c3 c01c 	str.w	ip, [r3, #28]
   150ee:	2810      	cmp	r0, #16
   150f0:	dd00      	ble.n	150f4 <esf_dump+0xd4>
   150f2:	621c      	str	r4, [r3, #32]
   150f4:	2913      	cmp	r1, #19
   150f6:	dd65      	ble.n	151c4 <esf_dump+0x1a4>
   150f8:	2414      	movs	r4, #20
   150fa:	b13a      	cbz	r2, 1510c <esf_dump+0xec>
   150fc:	2105      	movs	r1, #5
   150fe:	7139      	strb	r1, [r7, #4]
   15100:	2100      	movs	r1, #0
   15102:	7179      	strb	r1, [r7, #5]
   15104:	71b9      	strb	r1, [r7, #6]
   15106:	71f9      	strb	r1, [r7, #7]
   15108:	6878      	ldr	r0, [r7, #4]
   1510a:	6118      	str	r0, [r3, #16]
   1510c:	2100      	movs	r1, #0
   1510e:	f36f 0100 	bfc	r1, #0, #1
   15112:	f36f 0141 	bfc	r1, #1, #1
   15116:	f36f 0182 	bfc	r1, #2, #1
   1511a:	f36f 01c5 	bfc	r1, #3, #3
   1511e:	2301      	movs	r3, #1
   15120:	f363 1188 	bfi	r1, r3, #6, #3
   15124:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   15128:	f364 2152 	bfi	r1, r4, #9, #10
   1512c:	f36f 41de 	bfc	r1, #19, #12
   15130:	f36f 71df 	bfc	r1, #31, #1
   15134:	2300      	movs	r3, #0
   15136:	486a      	ldr	r0, [pc, #424]	; (152e0 <esf_dump+0x2c0>)
   15138:	f013 fe43 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1513c:	46c5      	mov	sp, r8
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1513e:	69f4      	ldr	r4, [r6, #28]
   15140:	46e8      	mov	r8, sp
   15142:	b088      	sub	sp, #32
   15144:	466b      	mov	r3, sp
   15146:	f113 0210 	adds.w	r2, r3, #16
   1514a:	d03e      	beq.n	151ca <esf_dump+0x1aa>
   1514c:	210c      	movs	r1, #12
   1514e:	b14a      	cbz	r2, 15164 <esf_dump+0x144>
   15150:	4608      	mov	r0, r1
   15152:	2904      	cmp	r1, #4
   15154:	dd03      	ble.n	1515e <esf_dump+0x13e>
   15156:	f8df c194 	ldr.w	ip, [pc, #404]	; 152ec <esf_dump+0x2cc>
   1515a:	f8c3 c014 	str.w	ip, [r3, #20]
   1515e:	2808      	cmp	r0, #8
   15160:	dd00      	ble.n	15164 <esf_dump+0x144>
   15162:	619c      	str	r4, [r3, #24]
   15164:	290b      	cmp	r1, #11
   15166:	dd33      	ble.n	151d0 <esf_dump+0x1b0>
   15168:	240c      	movs	r4, #12
   1516a:	b13a      	cbz	r2, 1517c <esf_dump+0x15c>
   1516c:	2103      	movs	r1, #3
   1516e:	7139      	strb	r1, [r7, #4]
   15170:	2100      	movs	r1, #0
   15172:	7179      	strb	r1, [r7, #5]
   15174:	71b9      	strb	r1, [r7, #6]
   15176:	71f9      	strb	r1, [r7, #7]
   15178:	6878      	ldr	r0, [r7, #4]
   1517a:	6118      	str	r0, [r3, #16]
   1517c:	2100      	movs	r1, #0
   1517e:	f36f 0100 	bfc	r1, #0, #1
   15182:	f36f 0141 	bfc	r1, #1, #1
   15186:	f36f 0182 	bfc	r1, #2, #1
   1518a:	f36f 01c5 	bfc	r1, #3, #3
   1518e:	2301      	movs	r3, #1
   15190:	f363 1188 	bfi	r1, r3, #6, #3
   15194:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   15198:	f364 2152 	bfi	r1, r4, #9, #10
   1519c:	f36f 41de 	bfc	r1, #19, #12
   151a0:	f36f 71df 	bfc	r1, #31, #1
   151a4:	2300      	movs	r3, #0
   151a6:	484e      	ldr	r0, [pc, #312]	; (152e0 <esf_dump+0x2c0>)
   151a8:	f013 fe0b 	bl	28dc2 <z_impl_z_log_msg_static_create>
   151ac:	46c5      	mov	sp, r8
#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   151ae:	2400      	movs	r4, #0
   151b0:	e03b      	b.n	1522a <esf_dump+0x20a>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   151b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   151b6:	e745      	b.n	15044 <esf_dump+0x24>
   151b8:	f06f 041b 	mvn.w	r4, #27
   151bc:	e759      	b.n	15072 <esf_dump+0x52>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   151be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   151c2:	e784      	b.n	150ce <esf_dump+0xae>
   151c4:	f06f 041b 	mvn.w	r4, #27
   151c8:	e797      	b.n	150fa <esf_dump+0xda>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   151ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   151ce:	e7be      	b.n	1514e <esf_dump+0x12e>
   151d0:	f06f 041b 	mvn.w	r4, #27
   151d4:	e7c9      	b.n	1516a <esf_dump+0x14a>
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   151d6:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   151da:	e055      	b.n	15288 <esf_dump+0x268>
   151dc:	f1be 0f27 	cmp.w	lr, #39	; 0x27
   151e0:	dd7b      	ble.n	152da <esf_dump+0x2ba>
   151e2:	2128      	movs	r1, #40	; 0x28
   151e4:	b13a      	cbz	r2, 151f6 <esf_dump+0x1d6>
   151e6:	200a      	movs	r0, #10
   151e8:	7138      	strb	r0, [r7, #4]
   151ea:	2000      	movs	r0, #0
   151ec:	7178      	strb	r0, [r7, #5]
   151ee:	71b8      	strb	r0, [r7, #6]
   151f0:	71f8      	strb	r0, [r7, #7]
   151f2:	6878      	ldr	r0, [r7, #4]
   151f4:	6118      	str	r0, [r3, #16]
   151f6:	f36f 0500 	bfc	r5, #0, #1
   151fa:	f36f 0541 	bfc	r5, #1, #1
   151fe:	f36f 0582 	bfc	r5, #2, #1
   15202:	f36f 05c5 	bfc	r5, #3, #3
   15206:	2301      	movs	r3, #1
   15208:	f363 1588 	bfi	r5, r3, #6, #3
   1520c:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
   15210:	f361 2552 	bfi	r5, r1, #9, #10
   15214:	f36f 45de 	bfc	r5, #19, #12
   15218:	f36f 75df 	bfc	r5, #31, #1
   1521c:	2300      	movs	r3, #0
   1521e:	4629      	mov	r1, r5
   15220:	482f      	ldr	r0, [pc, #188]	; (152e0 <esf_dump+0x2c0>)
   15222:	f013 fdce 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15226:	46c5      	mov	sp, r8
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   15228:	3404      	adds	r4, #4
   1522a:	2c0f      	cmp	r4, #15
   1522c:	d862      	bhi.n	152f4 <esf_dump+0x2d4>
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1522e:	f104 0308 	add.w	r3, r4, #8
   15232:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15236:	edd3 7a00 	vldr	s15, [r3]
   1523a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
   1523e:	1c60      	adds	r0, r4, #1
   15240:	f104 0309 	add.w	r3, r4, #9
   15244:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15248:	edd3 7a00 	vldr	s15, [r3]
   1524c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
   15250:	f104 0c02 	add.w	ip, r4, #2
   15254:	f104 030a 	add.w	r3, r4, #10
   15258:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1525c:	edd3 7a00 	vldr	s15, [r3]
   15260:	eebc 7ae7 	vcvt.u32.f32	s14, s15
   15264:	f104 0903 	add.w	r9, r4, #3
   15268:	f104 030b 	add.w	r3, r4, #11
   1526c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   15270:	edd3 7a00 	vldr	s15, [r3]
   15274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15278:	46e8      	mov	r8, sp
   1527a:	b08e      	sub	sp, #56	; 0x38
   1527c:	466b      	mov	r3, sp
   1527e:	f113 0210 	adds.w	r2, r3, #16
   15282:	d0a8      	beq.n	151d6 <esf_dump+0x1b6>
   15284:	f04f 0e28 	mov.w	lr, #40	; 0x28
   15288:	2a00      	cmp	r2, #0
   1528a:	d0a7      	beq.n	151dc <esf_dump+0x1bc>
   1528c:	4671      	mov	r1, lr
   1528e:	f1be 0f04 	cmp.w	lr, #4
   15292:	dd03      	ble.n	1529c <esf_dump+0x27c>
   15294:	f8df a058 	ldr.w	sl, [pc, #88]	; 152f0 <esf_dump+0x2d0>
   15298:	f8c3 a014 	str.w	sl, [r3, #20]
   1529c:	2908      	cmp	r1, #8
   1529e:	dd00      	ble.n	152a2 <esf_dump+0x282>
   152a0:	619c      	str	r4, [r3, #24]
   152a2:	290c      	cmp	r1, #12
   152a4:	dd01      	ble.n	152aa <esf_dump+0x28a>
   152a6:	ed83 6a07 	vstr	s12, [r3, #28]
   152aa:	2910      	cmp	r1, #16
   152ac:	dd00      	ble.n	152b0 <esf_dump+0x290>
   152ae:	6218      	str	r0, [r3, #32]
   152b0:	2914      	cmp	r1, #20
   152b2:	dd01      	ble.n	152b8 <esf_dump+0x298>
   152b4:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
   152b8:	2918      	cmp	r1, #24
   152ba:	dd01      	ble.n	152c0 <esf_dump+0x2a0>
   152bc:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
   152c0:	291c      	cmp	r1, #28
   152c2:	dd01      	ble.n	152c8 <esf_dump+0x2a8>
   152c4:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
   152c8:	2920      	cmp	r1, #32
   152ca:	dd01      	ble.n	152d0 <esf_dump+0x2b0>
   152cc:	f8c3 9030 	str.w	r9, [r3, #48]	; 0x30
   152d0:	2924      	cmp	r1, #36	; 0x24
   152d2:	dd83      	ble.n	151dc <esf_dump+0x1bc>
   152d4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
   152d8:	e780      	b.n	151dc <esf_dump+0x1bc>
   152da:	f06f 011b 	mvn.w	r1, #27
   152de:	e781      	b.n	151e4 <esf_dump+0x1c4>
   152e0:	0002ef40 	.word	0x0002ef40
   152e4:	0002f99c 	.word	0x0002f99c
   152e8:	0002f9cc 	.word	0x0002f9cc
   152ec:	0002f9fc 	.word	0x0002f9fc
   152f0:	0002fa0c 	.word	0x0002fa0c
			i, (uint32_t)esf->fpu.s[i],
			i + 1, (uint32_t)esf->fpu.s[i + 1],
			i + 2, (uint32_t)esf->fpu.s[i + 2],
			i + 3, (uint32_t)esf->fpu.s[i + 3]);
	}
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   152f4:	6e34      	ldr	r4, [r6, #96]	; 0x60
   152f6:	466d      	mov	r5, sp
   152f8:	b088      	sub	sp, #32
   152fa:	466b      	mov	r3, sp
   152fc:	f113 0210 	adds.w	r2, r3, #16
   15300:	d068      	beq.n	153d4 <esf_dump+0x3b4>
   15302:	210c      	movs	r1, #12
   15304:	b14a      	cbz	r2, 1531a <esf_dump+0x2fa>
   15306:	4608      	mov	r0, r1
   15308:	2904      	cmp	r1, #4
   1530a:	dd03      	ble.n	15314 <esf_dump+0x2f4>
   1530c:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 153f4 <esf_dump+0x3d4>
   15310:	f8c3 c014 	str.w	ip, [r3, #20]
   15314:	2808      	cmp	r0, #8
   15316:	dd00      	ble.n	1531a <esf_dump+0x2fa>
   15318:	619c      	str	r4, [r3, #24]
   1531a:	290b      	cmp	r1, #11
   1531c:	dd5d      	ble.n	153da <esf_dump+0x3ba>
   1531e:	240c      	movs	r4, #12
   15320:	b13a      	cbz	r2, 15332 <esf_dump+0x312>
   15322:	2103      	movs	r1, #3
   15324:	7139      	strb	r1, [r7, #4]
   15326:	2100      	movs	r1, #0
   15328:	7179      	strb	r1, [r7, #5]
   1532a:	71b9      	strb	r1, [r7, #6]
   1532c:	71f9      	strb	r1, [r7, #7]
   1532e:	6878      	ldr	r0, [r7, #4]
   15330:	6118      	str	r0, [r3, #16]
   15332:	2100      	movs	r1, #0
   15334:	f36f 0100 	bfc	r1, #0, #1
   15338:	f36f 0141 	bfc	r1, #1, #1
   1533c:	f36f 0182 	bfc	r1, #2, #1
   15340:	f36f 01c5 	bfc	r1, #3, #3
   15344:	2301      	movs	r3, #1
   15346:	f363 1188 	bfi	r1, r3, #6, #3
   1534a:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1534e:	f364 2152 	bfi	r1, r4, #9, #10
   15352:	f36f 41de 	bfc	r1, #19, #12
   15356:	f36f 71df 	bfc	r1, #31, #1
   1535a:	2300      	movs	r3, #0
   1535c:	4823      	ldr	r0, [pc, #140]	; (153ec <esf_dump+0x3cc>)
   1535e:	f013 fd30 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15362:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15364:	69b4      	ldr	r4, [r6, #24]
   15366:	b088      	sub	sp, #32
   15368:	466b      	mov	r3, sp
   1536a:	f113 0210 	adds.w	r2, r3, #16
   1536e:	d037      	beq.n	153e0 <esf_dump+0x3c0>
   15370:	210c      	movs	r1, #12
   15372:	b13a      	cbz	r2, 15384 <esf_dump+0x364>
   15374:	4608      	mov	r0, r1
   15376:	2904      	cmp	r1, #4
   15378:	dd01      	ble.n	1537e <esf_dump+0x35e>
   1537a:	4d1d      	ldr	r5, [pc, #116]	; (153f0 <esf_dump+0x3d0>)
   1537c:	615d      	str	r5, [r3, #20]
   1537e:	2808      	cmp	r0, #8
   15380:	dd00      	ble.n	15384 <esf_dump+0x364>
   15382:	619c      	str	r4, [r3, #24]
   15384:	290b      	cmp	r1, #11
   15386:	dd2e      	ble.n	153e6 <esf_dump+0x3c6>
   15388:	240c      	movs	r4, #12
   1538a:	b13a      	cbz	r2, 1539c <esf_dump+0x37c>
   1538c:	2103      	movs	r1, #3
   1538e:	7139      	strb	r1, [r7, #4]
   15390:	2100      	movs	r1, #0
   15392:	7179      	strb	r1, [r7, #5]
   15394:	71b9      	strb	r1, [r7, #6]
   15396:	71f9      	strb	r1, [r7, #7]
   15398:	6878      	ldr	r0, [r7, #4]
   1539a:	6118      	str	r0, [r3, #16]
   1539c:	2100      	movs	r1, #0
   1539e:	f36f 0100 	bfc	r1, #0, #1
   153a2:	f36f 0141 	bfc	r1, #1, #1
   153a6:	f36f 0182 	bfc	r1, #2, #1
   153aa:	f36f 01c5 	bfc	r1, #3, #3
   153ae:	2301      	movs	r3, #1
   153b0:	f363 1188 	bfi	r1, r3, #6, #3
   153b4:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   153b8:	f364 2152 	bfi	r1, r4, #9, #10
   153bc:	f36f 41de 	bfc	r1, #19, #12
   153c0:	f36f 71df 	bfc	r1, #31, #1
   153c4:	2300      	movs	r3, #0
   153c6:	4809      	ldr	r0, [pc, #36]	; (153ec <esf_dump+0x3cc>)
   153c8:	f013 fcfb 	bl	28dc2 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
   153cc:	3708      	adds	r7, #8
   153ce:	46bd      	mov	sp, r7
   153d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   153d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   153d8:	e794      	b.n	15304 <esf_dump+0x2e4>
   153da:	f06f 041b 	mvn.w	r4, #27
   153de:	e79f      	b.n	15320 <esf_dump+0x300>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   153e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   153e4:	e7c5      	b.n	15372 <esf_dump+0x352>
   153e6:	f06f 041b 	mvn.w	r4, #27
   153ea:	e7ce      	b.n	1538a <esf_dump+0x36a>
   153ec:	0002ef40 	.word	0x0002ef40
   153f0:	0002fa60 	.word	0x0002fa60
   153f4:	0002fa50 	.word	0x0002fa50

000153f8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   153f8:	2800      	cmp	r0, #0
   153fa:	db07      	blt.n	1540c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   153fc:	f000 021f 	and.w	r2, r0, #31
   15400:	0940      	lsrs	r0, r0, #5
   15402:	2301      	movs	r3, #1
   15404:	4093      	lsls	r3, r2
   15406:	4a02      	ldr	r2, [pc, #8]	; (15410 <__NVIC_EnableIRQ+0x18>)
   15408:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   1540c:	4770      	bx	lr
   1540e:	bf00      	nop
   15410:	e000e100 	.word	0xe000e100

00015414 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15414:	2800      	cmp	r0, #0
   15416:	db0c      	blt.n	15432 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15418:	f000 021f 	and.w	r2, r0, #31
   1541c:	0940      	lsrs	r0, r0, #5
   1541e:	2301      	movs	r3, #1
   15420:	4093      	lsls	r3, r2
   15422:	3020      	adds	r0, #32
   15424:	4a03      	ldr	r2, [pc, #12]	; (15434 <__NVIC_DisableIRQ+0x20>)
   15426:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1542a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1542e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   15432:	4770      	bx	lr
   15434:	e000e100 	.word	0xe000e100

00015438 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   15438:	2800      	cmp	r0, #0
   1543a:	db08      	blt.n	1544e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1543c:	0149      	lsls	r1, r1, #5
   1543e:	b2c9      	uxtb	r1, r1
   15440:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   15444:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   15448:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   1544c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1544e:	f000 000f 	and.w	r0, r0, #15
   15452:	0149      	lsls	r1, r1, #5
   15454:	b2c9      	uxtb	r1, r1
   15456:	4b01      	ldr	r3, [pc, #4]	; (1545c <__NVIC_SetPriority+0x24>)
   15458:	5419      	strb	r1, [r3, r0]
  }
}
   1545a:	4770      	bx	lr
   1545c:	e000ed14 	.word	0xe000ed14

00015460 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   15460:	0942      	lsrs	r2, r0, #5
   15462:	4b05      	ldr	r3, [pc, #20]	; (15478 <arch_irq_is_enabled+0x18>)
   15464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15468:	f000 001f 	and.w	r0, r0, #31
   1546c:	2301      	movs	r3, #1
   1546e:	fa03 f000 	lsl.w	r0, r3, r0
}
   15472:	4010      	ands	r0, r2
   15474:	4770      	bx	lr
   15476:	bf00      	nop
   15478:	e000e100 	.word	0xe000e100

0001547c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1547c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1547e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   15480:	4b05      	ldr	r3, [pc, #20]	; (15498 <_arch_isr_direct_pm+0x1c>)
   15482:	69db      	ldr	r3, [r3, #28]
   15484:	b90b      	cbnz	r3, 1548a <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15486:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15488:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   1548a:	4b03      	ldr	r3, [pc, #12]	; (15498 <_arch_isr_direct_pm+0x1c>)
   1548c:	2200      	movs	r2, #0
   1548e:	61da      	str	r2, [r3, #28]
		z_pm_save_idle_exit();
   15490:	f018 f864 	bl	2d55c <z_pm_save_idle_exit>
   15494:	e7f7      	b.n	15486 <_arch_isr_direct_pm+0xa>
   15496:	bf00      	nop
   15498:	20004040 	.word	0x20004040

0001549c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1549c:	bf30      	wfi
    b z_SysNmiOnReset
   1549e:	f7ff bffd 	b.w	1549c <z_SysNmiOnReset>
   154a2:	bf00      	nop

000154a4 <z_arm_floating_point_init>:
	/*
	 * Upon reset, the Co-Processor Access Control Register is, normally,
	 * 0x00000000. However, it might be left un-cleared by firmware running
	 * before Zephyr boot.
	 */
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   154a4:	4b0c      	ldr	r3, [pc, #48]	; (154d8 <z_arm_floating_point_init+0x34>)
   154a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   154aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   154ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if defined(CONFIG_USERSPACE)
	/* Full access */
	SCB->CPACR |= CPACR_CP10_FULL_ACCESS | CPACR_CP11_FULL_ACCESS;
#else
	/* Privileged access only */
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   154b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   154b6:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   154ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	 * be reserved for them. This configuration improves interrupt latency.
	 * The registers will eventually be stacked when the thread is swapped
	 * out during context-switch or if an ISR attempts to execute floating
	 * point instructions.
	 */
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   154be:	f503 7300 	add.w	r3, r3, #512	; 0x200
   154c2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   154c6:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("dsb 0xF":::"memory");
   154c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   154cc:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   154d0:	2300      	movs	r3, #0
   154d2:	eee1 3a10 	vmsr	fpscr, r3
#if (!defined(CONFIG_FPU) || !defined(CONFIG_FPU_SHARING)) && \
	(!defined(CONFIG_INIT_ARCH_HW_AT_BOOT))

	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
#endif
}
   154d6:	4770      	bx	lr
   154d8:	e000ed00 	.word	0xe000ed00

000154dc <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   154dc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   154de:	4b09      	ldr	r3, [pc, #36]	; (15504 <z_arm_prep_c+0x28>)
   154e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   154e4:	4a08      	ldr	r2, [pc, #32]	; (15508 <z_arm_prep_c+0x2c>)
   154e6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   154e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   154ec:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
   154f0:	f7ff ffd8 	bl	154a4 <z_arm_floating_point_init>
#endif
	z_bss_zero();
   154f4:	f00c fbba 	bl	21c6c <z_bss_zero>
	z_data_copy();
   154f8:	f00d fc5e 	bl	22db8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   154fc:	f001 f852 	bl	165a4 <z_arm_interrupt_init>
	z_cstart();
   15500:	f00c fc14 	bl	21d2c <z_cstart>
   15504:	00000000 	.word	0x00000000
   15508:	e000ed00 	.word	0xe000ed00

0001550c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1550c:	4a0a      	ldr	r2, [pc, #40]	; (15538 <arch_swap+0x2c>)
   1550e:	6893      	ldr	r3, [r2, #8]
   15510:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   15514:	4909      	ldr	r1, [pc, #36]	; (1553c <arch_swap+0x30>)
   15516:	6809      	ldr	r1, [r1, #0]
   15518:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1551c:	4908      	ldr	r1, [pc, #32]	; (15540 <arch_swap+0x34>)
   1551e:	684b      	ldr	r3, [r1, #4]
   15520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15524:	604b      	str	r3, [r1, #4]
   15526:	2300      	movs	r3, #0
   15528:	f383 8811 	msr	BASEPRI, r3
   1552c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15530:	6893      	ldr	r3, [r2, #8]
}
   15532:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   15536:	4770      	bx	lr
   15538:	20004040 	.word	0x20004040
   1553c:	000316a0 	.word	0x000316a0
   15540:	e000ed00 	.word	0xe000ed00

00015544 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15544:	4922      	ldr	r1, [pc, #136]	; (155d0 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15546:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   15548:	f882 e0f5 	strb.w	lr, [r2, #245]	; 0xf5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1554c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   15550:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   15552:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15556:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   1555a:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   1555e:	d103      	bne.n	15568 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   15560:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vstmia r0, {s16-s31}
   15564:	ec80 8a10 	vstmia	r0, {s16-s31}

00015568 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15568:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1556a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1556e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15572:	4f18      	ldr	r7, [pc, #96]	; (155d4 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15574:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15578:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   1557a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1557c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1557e:	f992 e0f5 	ldrsb.w	lr, [r2, #245]	; 0xf5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15582:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   15586:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   15588:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1558c:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   15590:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   15594:	d003      	beq.n	1559e <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   15596:	2300      	movs	r3, #0
    vmsr fpscr, r3
   15598:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   1559c:	e003      	b.n	155a6 <in_fp_endif>

0001559e <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   1559e:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vldmia r0, {s16-s31}
   155a2:	ec90 8a10 	vldmia	r0, {s16-s31}

000155a6 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   155a6:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   155aa:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   155ae:	f383 8814 	msr	CONTROL, r3
    isb
   155b2:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   155b6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   155b8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   155ba:	f001 f8a3 	bl	16704 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   155be:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   155c2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   155c6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   155ca:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   155ce:	4770      	bx	lr
    ldr r1, =_kernel
   155d0:	20004040 	.word	0x20004040
    ldr v4, =_SCS_ICSR
   155d4:	e000ed04 	.word	0xe000ed04

000155d8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   155d8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   155dc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   155de:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   155e2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   155e6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   155e8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   155ec:	2902      	cmp	r1, #2
    beq _oops
   155ee:	d0ff      	beq.n	155f0 <_oops>

000155f0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   155f0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   155f2:	f013 ff84 	bl	294fe <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   155f6:	bd01      	pop	{r0, pc}

000155f8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   155f8:	b410      	push	{r4}
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   155fa:	7b01      	ldrb	r1, [r0, #12]
   155fc:	f011 0f02 	tst.w	r1, #2
   15600:	d009      	beq.n	15616 <arch_new_thread+0x1e>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
   15602:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
   15606:	3140      	adds	r1, #64	; 0x40
   15608:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
   1560c:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
   15610:	3940      	subs	r1, #64	; 0x40
   15612:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   15616:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   1561a:	4915      	ldr	r1, [pc, #84]	; (15670 <arch_new_thread+0x78>)
   1561c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   15620:	f021 0101 	bic.w	r1, r1, #1
   15624:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   15628:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1562c:	9b01      	ldr	r3, [sp, #4]
   1562e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   15632:	9b02      	ldr	r3, [sp, #8]
   15634:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15638:	9b03      	ldr	r3, [sp, #12]
   1563a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1563e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15642:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   15646:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   15648:	2300      	movs	r3, #0
   1564a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1564e:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   15652:	23fd      	movs	r3, #253	; 0xfd
   15654:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   15658:	7b03      	ldrb	r3, [r0, #12]
   1565a:	f013 0f02 	tst.w	r3, #2
   1565e:	d003      	beq.n	15668 <arch_new_thread+0x70>
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   15660:	f64f 5308 	movw	r3, #64776	; 0xfd08
   15664:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15668:	f85d 4b04 	ldr.w	r4, [sp], #4
   1566c:	4770      	bx	lr
   1566e:	bf00      	nop
   15670:	00027bcd 	.word	0x00027bcd

00015674 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   15674:	7b03      	ldrb	r3, [r0, #12]
   15676:	f013 0f02 	tst.w	r3, #2
   1567a:	d11e      	bne.n	156ba <z_arm_mpu_stack_guard_and_fpu_adjust+0x46>
		((thread->arch.mode_exc_return & EXC_RETURN_FTYPE) == 0)) {
   1567c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   15680:	f013 0f10 	tst.w	r3, #16
   15684:	d019      	beq.n	156ba <z_arm_mpu_stack_guard_and_fpu_adjust+0x46>
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
   15686:	4a1d      	ldr	r2, [pc, #116]	; (156fc <z_arm_mpu_stack_guard_and_fpu_adjust+0x88>)
   15688:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1568a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1568e:	6353      	str	r3, [r2, #52]	; 0x34
		if ((thread->arch.mode &
   15690:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   15694:	f013 0f08 	tst.w	r3, #8
   15698:	d02d      	beq.n	156f6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x82>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   1569a:	f023 0308 	bic.w	r3, r3, #8
   1569e:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start -=
   156a2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   156a6:	3b40      	subs	r3, #64	; 0x40
   156a8:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size +=
   156ac:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   156b0:	3340      	adds	r3, #64	; 0x40
   156b2:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
   156b6:	2040      	movs	r0, #64	; 0x40
   156b8:	4770      	bx	lr
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
   156ba:	4a10      	ldr	r2, [pc, #64]	; (156fc <z_arm_mpu_stack_guard_and_fpu_adjust+0x88>)
   156bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
   156be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   156c2:	6353      	str	r3, [r2, #52]	; 0x34
		if ((thread->arch.mode &
   156c4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   156c8:	f013 0f08 	tst.w	r3, #8
   156cc:	d10d      	bne.n	156ea <z_arm_mpu_stack_guard_and_fpu_adjust+0x76>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   156ce:	f043 0308 	orr.w	r3, r3, #8
   156d2:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start +=
   156d6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   156da:	3340      	adds	r3, #64	; 0x40
   156dc:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size -=
   156e0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   156e4:	3b40      	subs	r3, #64	; 0x40
   156e6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		thread->base.user_options |= K_FP_REGS;
   156ea:	7b03      	ldrb	r3, [r0, #12]
   156ec:	f043 0302 	orr.w	r3, r3, #2
   156f0:	7303      	strb	r3, [r0, #12]
		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
   156f2:	2080      	movs	r0, #128	; 0x80
   156f4:	4770      	bx	lr
	return MPU_GUARD_ALIGN_AND_SIZE;
   156f6:	2040      	movs	r0, #64	; 0x40
}
   156f8:	4770      	bx	lr
   156fa:	bf00      	nop
   156fc:	e000ef00 	.word	0xe000ef00

00015700 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   15700:	4b16      	ldr	r3, [pc, #88]	; (1575c <z_check_thread_stack_fail+0x5c>)
   15702:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
   15704:	b1fb      	cbz	r3, 15746 <z_check_thread_stack_fail+0x46>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
   15706:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   1570a:	f012 0f08 	tst.w	r2, #8
   1570e:	d00f      	beq.n	15730 <z_check_thread_stack_fail+0x30>
   15710:	2280      	movs	r2, #128	; 0x80
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15712:	f110 0f16 	cmn.w	r0, #22
   15716:	d00d      	beq.n	15734 <z_check_thread_stack_fail+0x34>
{
   15718:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1571a:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
   1571e:	1aa2      	subs	r2, r4, r2
   15720:	4282      	cmp	r2, r0
   15722:	d812      	bhi.n	1574a <z_check_thread_stack_fail+0x4a>
   15724:	4284      	cmp	r4, r0
   15726:	d914      	bls.n	15752 <z_check_thread_stack_fail+0x52>
   15728:	428c      	cmp	r4, r1
   1572a:	d809      	bhi.n	15740 <z_check_thread_stack_fail+0x40>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1572c:	2000      	movs	r0, #0
   1572e:	e00d      	b.n	1574c <z_check_thread_stack_fail+0x4c>
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   15730:	2240      	movs	r2, #64	; 0x40
   15732:	e7ee      	b.n	15712 <z_check_thread_stack_fail+0x12>
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15734:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   15738:	428a      	cmp	r2, r1
   1573a:	d80c      	bhi.n	15756 <z_check_thread_stack_fail+0x56>
	return 0;
   1573c:	2000      	movs	r0, #0
   1573e:	4770      	bx	lr
		return thread->stack_info.start;
   15740:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   15744:	e002      	b.n	1574c <z_check_thread_stack_fail+0x4c>
		return 0;
   15746:	2000      	movs	r0, #0
   15748:	4770      	bx	lr
	return 0;
   1574a:	2000      	movs	r0, #0
}
   1574c:	f85d 4b04 	ldr.w	r4, [sp], #4
   15750:	4770      	bx	lr
	return 0;
   15752:	2000      	movs	r0, #0
   15754:	e7fa      	b.n	1574c <z_check_thread_stack_fail+0x4c>
		return thread->stack_info.start;
   15756:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
}
   1575a:	4770      	bx	lr
   1575c:	20004040 	.word	0x20004040

00015760 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15760:	b508      	push	{r3, lr}
   15762:	4604      	mov	r4, r0
   15764:	460e      	mov	r6, r1
   15766:	4615      	mov	r5, r2
	z_arm_prepare_switch_to_main();
   15768:	f013 fef0 	bl	2954c <z_arm_prepare_switch_to_main>

	_current = main_thread;
   1576c:	4b08      	ldr	r3, [pc, #32]	; (15790 <arch_switch_to_main_thread+0x30>)
   1576e:	609c      	str	r4, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   15770:	4620      	mov	r0, r4
   15772:	f000 ffc7 	bl	16704 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   15776:	4628      	mov	r0, r5
   15778:	f386 8809 	msr	PSP, r6
   1577c:	2100      	movs	r1, #0
   1577e:	b663      	cpsie	if
   15780:	f381 8811 	msr	BASEPRI, r1
   15784:	f3bf 8f6f 	isb	sy
   15788:	2200      	movs	r2, #0
   1578a:	2300      	movs	r3, #0
   1578c:	f012 fa1e 	bl	27bcc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   15790:	20004040 	.word	0x20004040

00015794 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   15794:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   15796:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   15798:	4a0b      	ldr	r2, [pc, #44]	; (157c8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1579a:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   1579c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1579e:	bf1e      	ittt	ne
	movne	r1, #0
   157a0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   157a2:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   157a4:	f017 feda 	blne	2d55c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   157a8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   157aa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   157ae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   157b2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   157b6:	4905      	ldr	r1, [pc, #20]	; (157cc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   157b8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   157ba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   157bc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   157be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   157c2:	4903      	ldr	r1, [pc, #12]	; (157d0 <_isr_wrapper+0x3c>)
	bx r1
   157c4:	4708      	bx	r1
   157c6:	0000      	.short	0x0000
	ldr r2, =_kernel
   157c8:	20004040 	.word	0x20004040
	ldr r1, =_sw_isr_table
   157cc:	0002ec74 	.word	0x0002ec74
	ldr r1, =z_arm_int_exit
   157d0:	000157d5 	.word	0x000157d5

000157d4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   157d4:	4b04      	ldr	r3, [pc, #16]	; (157e8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   157d6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   157d8:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   157da:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   157dc:	d003      	beq.n	157e6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   157de:	4903      	ldr	r1, [pc, #12]	; (157ec <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   157e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   157e4:	600a      	str	r2, [r1, #0]

000157e6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   157e6:	4770      	bx	lr
	ldr r3, =_kernel
   157e8:	20004040 	.word	0x20004040
	ldr r1, =_SCS_ICSR
   157ec:	e000ed04 	.word	0xe000ed04

000157f0 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   157f0:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   157f2:	4b0d      	ldr	r3, [pc, #52]	; (15828 <z_arm_is_synchronous_svc+0x38>)
   157f4:	695a      	ldr	r2, [r3, #20]
   157f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   157fa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   157fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15800:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   15804:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15808:	695a      	ldr	r2, [r3, #20]
   1580a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1580e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15814:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15818:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1581c:	4299      	cmp	r1, r3
   1581e:	d001      	beq.n	15824 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   15820:	2000      	movs	r0, #0
   15822:	4770      	bx	lr
		return true;
   15824:	2001      	movs	r0, #1
}
   15826:	4770      	bx	lr
   15828:	e000ed00 	.word	0xe000ed00

0001582c <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
   1582c:	b510      	push	{r4, lr}
   1582e:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   15830:	2400      	movs	r4, #0
   15832:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15834:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   15838:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   1583c:	d134      	bne.n	158a8 <get_esf+0x7c>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1583e:	f002 040c 	and.w	r4, r2, #12
   15842:	2c08      	cmp	r4, #8
   15844:	d005      	beq.n	15852 <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15846:	f012 0f08 	tst.w	r2, #8
   1584a:	d02a      	beq.n	158a2 <get_esf+0x76>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   1584c:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
   1584e:	b008      	add	sp, #32
   15850:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15852:	4b16      	ldr	r3, [pc, #88]	; (158ac <get_esf+0x80>)
   15854:	9307      	str	r3, [sp, #28]
   15856:	2302      	movs	r3, #2
   15858:	f88d 3004 	strb.w	r3, [sp, #4]
   1585c:	2400      	movs	r4, #0
   1585e:	f88d 4005 	strb.w	r4, [sp, #5]
   15862:	f88d 4006 	strb.w	r4, [sp, #6]
   15866:	f88d 4007 	strb.w	r4, [sp, #7]
   1586a:	9b01      	ldr	r3, [sp, #4]
   1586c:	9306      	str	r3, [sp, #24]
   1586e:	4621      	mov	r1, r4
   15870:	f364 0100 	bfi	r1, r4, #0, #1
   15874:	f364 0141 	bfi	r1, r4, #1, #1
   15878:	f364 0182 	bfi	r1, r4, #2, #1
   1587c:	f364 01c5 	bfi	r1, r4, #3, #3
   15880:	2301      	movs	r3, #1
   15882:	f363 1188 	bfi	r1, r3, #6, #3
   15886:	2308      	movs	r3, #8
   15888:	f363 2152 	bfi	r1, r3, #9, #10
   1588c:	f364 41de 	bfi	r1, r4, #19, #12
   15890:	f364 71df 	bfi	r1, r4, #31, #1
   15894:	4623      	mov	r3, r4
   15896:	aa06      	add	r2, sp, #24
   15898:	4805      	ldr	r0, [pc, #20]	; (158b0 <get_esf+0x84>)
   1589a:	f013 fa92 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return NULL;
   1589e:	4620      	mov	r0, r4
   158a0:	e7d5      	b.n	1584e <get_esf+0x22>
			*nested_exc = true;
   158a2:	2201      	movs	r2, #1
   158a4:	701a      	strb	r2, [r3, #0]
   158a6:	e7d2      	b.n	1584e <get_esf+0x22>
		return NULL;
   158a8:	2000      	movs	r0, #0
   158aa:	e7d0      	b.n	1584e <get_esf+0x22>
   158ac:	0002fa90 	.word	0x0002fa90
   158b0:	0002ef40 	.word	0x0002ef40

000158b4 <bus_fault>:
{
   158b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158b8:	b0ac      	sub	sp, #176	; 0xb0
   158ba:	af00      	add	r7, sp, #0
   158bc:	4605      	mov	r5, r0
   158be:	460e      	mov	r6, r1
   158c0:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   158c2:	4bbc      	ldr	r3, [pc, #752]	; (15bb4 <bus_fault+0x300>)
   158c4:	61fb      	str	r3, [r7, #28]
   158c6:	2302      	movs	r3, #2
   158c8:	713b      	strb	r3, [r7, #4]
   158ca:	2300      	movs	r3, #0
   158cc:	717b      	strb	r3, [r7, #5]
   158ce:	71bb      	strb	r3, [r7, #6]
   158d0:	71fb      	strb	r3, [r7, #7]
   158d2:	687a      	ldr	r2, [r7, #4]
   158d4:	61ba      	str	r2, [r7, #24]
   158d6:	4619      	mov	r1, r3
   158d8:	f363 0100 	bfi	r1, r3, #0, #1
   158dc:	f363 0141 	bfi	r1, r3, #1, #1
   158e0:	f363 0182 	bfi	r1, r3, #2, #1
   158e4:	f363 01c5 	bfi	r1, r3, #3, #3
   158e8:	2201      	movs	r2, #1
   158ea:	f362 1188 	bfi	r1, r2, #6, #3
   158ee:	2208      	movs	r2, #8
   158f0:	f362 2152 	bfi	r1, r2, #9, #10
   158f4:	f363 41de 	bfi	r1, r3, #19, #12
   158f8:	f363 71df 	bfi	r1, r3, #31, #1
   158fc:	f107 0218 	add.w	r2, r7, #24
   15900:	48ad      	ldr	r0, [pc, #692]	; (15bb8 <bus_fault+0x304>)
   15902:	f013 fa5e 	bl	28dc2 <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15906:	4bad      	ldr	r3, [pc, #692]	; (15bbc <bus_fault+0x308>)
   15908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1590a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1590e:	d12a      	bne.n	15966 <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15910:	4baa      	ldr	r3, [pc, #680]	; (15bbc <bus_fault+0x308>)
   15912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15914:	f413 6f00 	tst.w	r3, #2048	; 0x800
   15918:	d148      	bne.n	159ac <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1591a:	4ba8      	ldr	r3, [pc, #672]	; (15bbc <bus_fault+0x308>)
   1591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1591e:	f413 7f00 	tst.w	r3, #512	; 0x200
   15922:	d166      	bne.n	159f2 <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15924:	4ba5      	ldr	r3, [pc, #660]	; (15bbc <bus_fault+0x308>)
   15926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15928:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1592c:	f040 80d5 	bne.w	15ada <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15930:	4ba2      	ldr	r3, [pc, #648]	; (15bbc <bus_fault+0x308>)
   15932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15934:	f413 7f80 	tst.w	r3, #256	; 0x100
   15938:	f040 80f2 	bne.w	15b20 <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1593c:	4b9f      	ldr	r3, [pc, #636]	; (15bbc <bus_fault+0x308>)
   1593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15940:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15944:	f040 8111 	bne.w	15b6a <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15948:	4a9c      	ldr	r2, [pc, #624]	; (15bbc <bus_fault+0x308>)
   1594a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1594c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15950:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   15952:	2101      	movs	r1, #1
   15954:	4628      	mov	r0, r5
   15956:	f013 fe07 	bl	29568 <memory_fault_recoverable>
   1595a:	7020      	strb	r0, [r4, #0]
}
   1595c:	2000      	movs	r0, #0
   1595e:	37b0      	adds	r7, #176	; 0xb0
   15960:	46bd      	mov	sp, r7
   15962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
   15966:	4b96      	ldr	r3, [pc, #600]	; (15bc0 <bus_fault+0x30c>)
   15968:	637b      	str	r3, [r7, #52]	; 0x34
   1596a:	2302      	movs	r3, #2
   1596c:	713b      	strb	r3, [r7, #4]
   1596e:	2300      	movs	r3, #0
   15970:	717b      	strb	r3, [r7, #5]
   15972:	71bb      	strb	r3, [r7, #6]
   15974:	71fb      	strb	r3, [r7, #7]
   15976:	687a      	ldr	r2, [r7, #4]
   15978:	633a      	str	r2, [r7, #48]	; 0x30
   1597a:	4619      	mov	r1, r3
   1597c:	f363 0100 	bfi	r1, r3, #0, #1
   15980:	f363 0141 	bfi	r1, r3, #1, #1
   15984:	f363 0182 	bfi	r1, r3, #2, #1
   15988:	f363 01c5 	bfi	r1, r3, #3, #3
   1598c:	2201      	movs	r2, #1
   1598e:	f362 1188 	bfi	r1, r2, #6, #3
   15992:	2208      	movs	r2, #8
   15994:	f362 2152 	bfi	r1, r2, #9, #10
   15998:	f363 41de 	bfi	r1, r3, #19, #12
   1599c:	f363 71df 	bfi	r1, r3, #31, #1
   159a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
   159a4:	4884      	ldr	r0, [pc, #528]	; (15bb8 <bus_fault+0x304>)
   159a6:	f013 fa0c 	bl	28dc2 <z_impl_z_log_msg_static_create>
   159aa:	e7b1      	b.n	15910 <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   159ac:	4b85      	ldr	r3, [pc, #532]	; (15bc4 <bus_fault+0x310>)
   159ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   159b0:	2302      	movs	r3, #2
   159b2:	713b      	strb	r3, [r7, #4]
   159b4:	2300      	movs	r3, #0
   159b6:	717b      	strb	r3, [r7, #5]
   159b8:	71bb      	strb	r3, [r7, #6]
   159ba:	71fb      	strb	r3, [r7, #7]
   159bc:	687a      	ldr	r2, [r7, #4]
   159be:	64ba      	str	r2, [r7, #72]	; 0x48
   159c0:	4619      	mov	r1, r3
   159c2:	f363 0100 	bfi	r1, r3, #0, #1
   159c6:	f363 0141 	bfi	r1, r3, #1, #1
   159ca:	f363 0182 	bfi	r1, r3, #2, #1
   159ce:	f363 01c5 	bfi	r1, r3, #3, #3
   159d2:	2201      	movs	r2, #1
   159d4:	f362 1188 	bfi	r1, r2, #6, #3
   159d8:	2208      	movs	r2, #8
   159da:	f362 2152 	bfi	r1, r2, #9, #10
   159de:	f363 41de 	bfi	r1, r3, #19, #12
   159e2:	f363 71df 	bfi	r1, r3, #31, #1
   159e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
   159ea:	4873      	ldr	r0, [pc, #460]	; (15bb8 <bus_fault+0x304>)
   159ec:	f013 f9e9 	bl	28dc2 <z_impl_z_log_msg_static_create>
   159f0:	e793      	b.n	1591a <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
   159f2:	4b75      	ldr	r3, [pc, #468]	; (15bc8 <bus_fault+0x314>)
   159f4:	667b      	str	r3, [r7, #100]	; 0x64
   159f6:	2302      	movs	r3, #2
   159f8:	713b      	strb	r3, [r7, #4]
   159fa:	2300      	movs	r3, #0
   159fc:	717b      	strb	r3, [r7, #5]
   159fe:	71bb      	strb	r3, [r7, #6]
   15a00:	71fb      	strb	r3, [r7, #7]
   15a02:	687a      	ldr	r2, [r7, #4]
   15a04:	663a      	str	r2, [r7, #96]	; 0x60
   15a06:	4619      	mov	r1, r3
   15a08:	f363 0100 	bfi	r1, r3, #0, #1
   15a0c:	f363 0141 	bfi	r1, r3, #1, #1
   15a10:	f363 0182 	bfi	r1, r3, #2, #1
   15a14:	f363 01c5 	bfi	r1, r3, #3, #3
   15a18:	2201      	movs	r2, #1
   15a1a:	f362 1188 	bfi	r1, r2, #6, #3
   15a1e:	2208      	movs	r2, #8
   15a20:	f362 2152 	bfi	r1, r2, #9, #10
   15a24:	f363 41de 	bfi	r1, r3, #19, #12
   15a28:	f363 71df 	bfi	r1, r3, #31, #1
   15a2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15a30:	4861      	ldr	r0, [pc, #388]	; (15bb8 <bus_fault+0x304>)
   15a32:	f013 f9c6 	bl	28dc2 <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
   15a36:	4b61      	ldr	r3, [pc, #388]	; (15bbc <bus_fault+0x308>)
   15a38:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15a3c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   15a40:	f43f af70 	beq.w	15924 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15a44:	46e8      	mov	r8, sp
   15a46:	b088      	sub	sp, #32
   15a48:	466b      	mov	r3, sp
   15a4a:	f113 0210 	adds.w	r2, r3, #16
   15a4e:	d011      	beq.n	15a74 <bus_fault+0x1c0>
   15a50:	210c      	movs	r1, #12
   15a52:	b152      	cbz	r2, 15a6a <bus_fault+0x1b6>
   15a54:	468c      	mov	ip, r1
   15a56:	2904      	cmp	r1, #4
   15a58:	dd03      	ble.n	15a62 <bus_fault+0x1ae>
   15a5a:	f8df e17c 	ldr.w	lr, [pc, #380]	; 15bd8 <bus_fault+0x324>
   15a5e:	f8c3 e014 	str.w	lr, [r3, #20]
   15a62:	f1bc 0f08 	cmp.w	ip, #8
   15a66:	dd08      	ble.n	15a7a <bus_fault+0x1c6>
   15a68:	6198      	str	r0, [r3, #24]
   15a6a:	290b      	cmp	r1, #11
   15a6c:	dd32      	ble.n	15ad4 <bus_fault+0x220>
   15a6e:	f04f 0c0c 	mov.w	ip, #12
   15a72:	e004      	b.n	15a7e <bus_fault+0x1ca>
   15a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15a78:	e7eb      	b.n	15a52 <bus_fault+0x19e>
   15a7a:	f06f 0c1b 	mvn.w	ip, #27
   15a7e:	b13a      	cbz	r2, 15a90 <bus_fault+0x1dc>
   15a80:	2103      	movs	r1, #3
   15a82:	7139      	strb	r1, [r7, #4]
   15a84:	2100      	movs	r1, #0
   15a86:	7179      	strb	r1, [r7, #5]
   15a88:	71b9      	strb	r1, [r7, #6]
   15a8a:	71f9      	strb	r1, [r7, #7]
   15a8c:	6878      	ldr	r0, [r7, #4]
   15a8e:	6118      	str	r0, [r3, #16]
   15a90:	2100      	movs	r1, #0
   15a92:	f36f 0100 	bfc	r1, #0, #1
   15a96:	f36f 0141 	bfc	r1, #1, #1
   15a9a:	f36f 0182 	bfc	r1, #2, #1
   15a9e:	f36f 01c5 	bfc	r1, #3, #3
   15aa2:	2301      	movs	r3, #1
   15aa4:	f363 1188 	bfi	r1, r3, #6, #3
   15aa8:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   15aac:	f363 2152 	bfi	r1, r3, #9, #10
   15ab0:	f36f 41de 	bfc	r1, #19, #12
   15ab4:	f36f 71df 	bfc	r1, #31, #1
   15ab8:	2300      	movs	r3, #0
   15aba:	483f      	ldr	r0, [pc, #252]	; (15bb8 <bus_fault+0x304>)
   15abc:	f013 f981 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15ac0:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   15ac2:	2e00      	cmp	r6, #0
   15ac4:	f43f af2e 	beq.w	15924 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15ac8:	4a3c      	ldr	r2, [pc, #240]	; (15bbc <bus_fault+0x308>)
   15aca:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15acc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15ad0:	6293      	str	r3, [r2, #40]	; 0x28
   15ad2:	e727      	b.n	15924 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15ad4:	f06f 0c1b 	mvn.w	ip, #27
   15ad8:	e7d1      	b.n	15a7e <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
   15ada:	4b3c      	ldr	r3, [pc, #240]	; (15bcc <bus_fault+0x318>)
   15adc:	67fb      	str	r3, [r7, #124]	; 0x7c
   15ade:	2302      	movs	r3, #2
   15ae0:	713b      	strb	r3, [r7, #4]
   15ae2:	2300      	movs	r3, #0
   15ae4:	717b      	strb	r3, [r7, #5]
   15ae6:	71bb      	strb	r3, [r7, #6]
   15ae8:	71fb      	strb	r3, [r7, #7]
   15aea:	687a      	ldr	r2, [r7, #4]
   15aec:	67ba      	str	r2, [r7, #120]	; 0x78
   15aee:	4619      	mov	r1, r3
   15af0:	f363 0100 	bfi	r1, r3, #0, #1
   15af4:	f363 0141 	bfi	r1, r3, #1, #1
   15af8:	f363 0182 	bfi	r1, r3, #2, #1
   15afc:	f363 01c5 	bfi	r1, r3, #3, #3
   15b00:	2201      	movs	r2, #1
   15b02:	f362 1188 	bfi	r1, r2, #6, #3
   15b06:	2208      	movs	r2, #8
   15b08:	f362 2152 	bfi	r1, r2, #9, #10
   15b0c:	f363 41de 	bfi	r1, r3, #19, #12
   15b10:	f363 71df 	bfi	r1, r3, #31, #1
   15b14:	f107 0278 	add.w	r2, r7, #120	; 0x78
   15b18:	4827      	ldr	r0, [pc, #156]	; (15bb8 <bus_fault+0x304>)
   15b1a:	f013 f952 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15b1e:	e707      	b.n	15930 <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
   15b20:	4b2b      	ldr	r3, [pc, #172]	; (15bd0 <bus_fault+0x31c>)
   15b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   15b26:	2302      	movs	r3, #2
   15b28:	713b      	strb	r3, [r7, #4]
   15b2a:	2300      	movs	r3, #0
   15b2c:	717b      	strb	r3, [r7, #5]
   15b2e:	71bb      	strb	r3, [r7, #6]
   15b30:	71fb      	strb	r3, [r7, #7]
   15b32:	687a      	ldr	r2, [r7, #4]
   15b34:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   15b38:	4619      	mov	r1, r3
   15b3a:	f363 0100 	bfi	r1, r3, #0, #1
   15b3e:	f363 0141 	bfi	r1, r3, #1, #1
   15b42:	f363 0182 	bfi	r1, r3, #2, #1
   15b46:	f363 01c5 	bfi	r1, r3, #3, #3
   15b4a:	2201      	movs	r2, #1
   15b4c:	f362 1188 	bfi	r1, r2, #6, #3
   15b50:	2208      	movs	r2, #8
   15b52:	f362 2152 	bfi	r1, r2, #9, #10
   15b56:	f363 41de 	bfi	r1, r3, #19, #12
   15b5a:	f363 71df 	bfi	r1, r3, #31, #1
   15b5e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   15b62:	4815      	ldr	r0, [pc, #84]	; (15bb8 <bus_fault+0x304>)
   15b64:	f013 f92d 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15b68:	e6ee      	b.n	15948 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15b6a:	4b1a      	ldr	r3, [pc, #104]	; (15bd4 <bus_fault+0x320>)
   15b6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   15b70:	2302      	movs	r3, #2
   15b72:	713b      	strb	r3, [r7, #4]
   15b74:	2300      	movs	r3, #0
   15b76:	717b      	strb	r3, [r7, #5]
   15b78:	71bb      	strb	r3, [r7, #6]
   15b7a:	71fb      	strb	r3, [r7, #7]
   15b7c:	687a      	ldr	r2, [r7, #4]
   15b7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   15b82:	4619      	mov	r1, r3
   15b84:	f363 0100 	bfi	r1, r3, #0, #1
   15b88:	f363 0141 	bfi	r1, r3, #1, #1
   15b8c:	f363 0182 	bfi	r1, r3, #2, #1
   15b90:	f363 01c5 	bfi	r1, r3, #3, #3
   15b94:	2201      	movs	r2, #1
   15b96:	f362 1188 	bfi	r1, r2, #6, #3
   15b9a:	2208      	movs	r2, #8
   15b9c:	f362 2152 	bfi	r1, r2, #9, #10
   15ba0:	f363 41de 	bfi	r1, r3, #19, #12
   15ba4:	f363 71df 	bfi	r1, r3, #31, #1
   15ba8:	f107 0290 	add.w	r2, r7, #144	; 0x90
   15bac:	4802      	ldr	r0, [pc, #8]	; (15bb8 <bus_fault+0x304>)
   15bae:	f013 f908 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15bb2:	e6c9      	b.n	15948 <bus_fault+0x94>
   15bb4:	0002fabc 	.word	0x0002fabc
   15bb8:	0002ef40 	.word	0x0002ef40
   15bbc:	e000ed00 	.word	0xe000ed00
   15bc0:	0002fad4 	.word	0x0002fad4
   15bc4:	0002fae8 	.word	0x0002fae8
   15bc8:	0002fafc 	.word	0x0002fafc
   15bcc:	0002fb30 	.word	0x0002fb30
   15bd0:	0002fb4c 	.word	0x0002fb4c
   15bd4:	0002fb64 	.word	0x0002fb64
   15bd8:	0002fb18 	.word	0x0002fb18

00015bdc <usage_fault>:
{
   15bdc:	b500      	push	{lr}
   15bde:	b0ad      	sub	sp, #180	; 0xb4
	PR_FAULT_INFO("***** USAGE FAULT *****");
   15be0:	4b9a      	ldr	r3, [pc, #616]	; (15e4c <usage_fault+0x270>)
   15be2:	9307      	str	r3, [sp, #28]
   15be4:	2302      	movs	r3, #2
   15be6:	f88d 3004 	strb.w	r3, [sp, #4]
   15bea:	2300      	movs	r3, #0
   15bec:	f88d 3005 	strb.w	r3, [sp, #5]
   15bf0:	f88d 3006 	strb.w	r3, [sp, #6]
   15bf4:	f88d 3007 	strb.w	r3, [sp, #7]
   15bf8:	9a01      	ldr	r2, [sp, #4]
   15bfa:	9206      	str	r2, [sp, #24]
   15bfc:	4619      	mov	r1, r3
   15bfe:	f363 0100 	bfi	r1, r3, #0, #1
   15c02:	f363 0141 	bfi	r1, r3, #1, #1
   15c06:	f363 0182 	bfi	r1, r3, #2, #1
   15c0a:	f363 01c5 	bfi	r1, r3, #3, #3
   15c0e:	2201      	movs	r2, #1
   15c10:	f362 1188 	bfi	r1, r2, #6, #3
   15c14:	2208      	movs	r2, #8
   15c16:	f362 2152 	bfi	r1, r2, #9, #10
   15c1a:	f363 41de 	bfi	r1, r3, #19, #12
   15c1e:	f363 71df 	bfi	r1, r3, #31, #1
   15c22:	aa06      	add	r2, sp, #24
   15c24:	488a      	ldr	r0, [pc, #552]	; (15e50 <usage_fault+0x274>)
   15c26:	f013 f8cc 	bl	28dc2 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15c2a:	4b8a      	ldr	r3, [pc, #552]	; (15e54 <usage_fault+0x278>)
   15c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   15c32:	d126      	bne.n	15c82 <usage_fault+0xa6>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15c34:	4b87      	ldr	r3, [pc, #540]	; (15e54 <usage_fault+0x278>)
   15c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   15c3c:	d147      	bne.n	15cce <usage_fault+0xf2>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15c3e:	4b85      	ldr	r3, [pc, #532]	; (15e54 <usage_fault+0x278>)
   15c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c42:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   15c46:	d168      	bne.n	15d1a <usage_fault+0x13e>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15c48:	4b82      	ldr	r3, [pc, #520]	; (15e54 <usage_fault+0x278>)
   15c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c4c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   15c50:	f040 8089 	bne.w	15d66 <usage_fault+0x18a>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15c54:	4b7f      	ldr	r3, [pc, #508]	; (15e54 <usage_fault+0x278>)
   15c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   15c5c:	f040 80a9 	bne.w	15db2 <usage_fault+0x1d6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15c60:	4b7c      	ldr	r3, [pc, #496]	; (15e54 <usage_fault+0x278>)
   15c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15c64:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15c68:	f040 80c9 	bne.w	15dfe <usage_fault+0x222>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15c6c:	4a79      	ldr	r2, [pc, #484]	; (15e54 <usage_fault+0x278>)
   15c6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15c70:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15c74:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15c78:	6293      	str	r3, [r2, #40]	; 0x28
}
   15c7a:	2000      	movs	r0, #0
   15c7c:	b02d      	add	sp, #180	; 0xb4
   15c7e:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
   15c82:	4b75      	ldr	r3, [pc, #468]	; (15e58 <usage_fault+0x27c>)
   15c84:	930d      	str	r3, [sp, #52]	; 0x34
   15c86:	2302      	movs	r3, #2
   15c88:	f88d 3004 	strb.w	r3, [sp, #4]
   15c8c:	2300      	movs	r3, #0
   15c8e:	f88d 3005 	strb.w	r3, [sp, #5]
   15c92:	f88d 3006 	strb.w	r3, [sp, #6]
   15c96:	f88d 3007 	strb.w	r3, [sp, #7]
   15c9a:	9a01      	ldr	r2, [sp, #4]
   15c9c:	920c      	str	r2, [sp, #48]	; 0x30
   15c9e:	4619      	mov	r1, r3
   15ca0:	f363 0100 	bfi	r1, r3, #0, #1
   15ca4:	f363 0141 	bfi	r1, r3, #1, #1
   15ca8:	f363 0182 	bfi	r1, r3, #2, #1
   15cac:	f363 01c5 	bfi	r1, r3, #3, #3
   15cb0:	2201      	movs	r2, #1
   15cb2:	f362 1188 	bfi	r1, r2, #6, #3
   15cb6:	2208      	movs	r2, #8
   15cb8:	f362 2152 	bfi	r1, r2, #9, #10
   15cbc:	f363 41de 	bfi	r1, r3, #19, #12
   15cc0:	f363 71df 	bfi	r1, r3, #31, #1
   15cc4:	aa0c      	add	r2, sp, #48	; 0x30
   15cc6:	4862      	ldr	r0, [pc, #392]	; (15e50 <usage_fault+0x274>)
   15cc8:	f013 f87b 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15ccc:	e7b2      	b.n	15c34 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   15cce:	4b63      	ldr	r3, [pc, #396]	; (15e5c <usage_fault+0x280>)
   15cd0:	9313      	str	r3, [sp, #76]	; 0x4c
   15cd2:	2302      	movs	r3, #2
   15cd4:	f88d 3004 	strb.w	r3, [sp, #4]
   15cd8:	2300      	movs	r3, #0
   15cda:	f88d 3005 	strb.w	r3, [sp, #5]
   15cde:	f88d 3006 	strb.w	r3, [sp, #6]
   15ce2:	f88d 3007 	strb.w	r3, [sp, #7]
   15ce6:	9a01      	ldr	r2, [sp, #4]
   15ce8:	9212      	str	r2, [sp, #72]	; 0x48
   15cea:	4619      	mov	r1, r3
   15cec:	f363 0100 	bfi	r1, r3, #0, #1
   15cf0:	f363 0141 	bfi	r1, r3, #1, #1
   15cf4:	f363 0182 	bfi	r1, r3, #2, #1
   15cf8:	f363 01c5 	bfi	r1, r3, #3, #3
   15cfc:	2201      	movs	r2, #1
   15cfe:	f362 1188 	bfi	r1, r2, #6, #3
   15d02:	2208      	movs	r2, #8
   15d04:	f362 2152 	bfi	r1, r2, #9, #10
   15d08:	f363 41de 	bfi	r1, r3, #19, #12
   15d0c:	f363 71df 	bfi	r1, r3, #31, #1
   15d10:	aa12      	add	r2, sp, #72	; 0x48
   15d12:	484f      	ldr	r0, [pc, #316]	; (15e50 <usage_fault+0x274>)
   15d14:	f013 f855 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15d18:	e791      	b.n	15c3e <usage_fault+0x62>
		PR_FAULT_INFO("  No coprocessor instructions");
   15d1a:	4b51      	ldr	r3, [pc, #324]	; (15e60 <usage_fault+0x284>)
   15d1c:	9319      	str	r3, [sp, #100]	; 0x64
   15d1e:	2302      	movs	r3, #2
   15d20:	f88d 3004 	strb.w	r3, [sp, #4]
   15d24:	2300      	movs	r3, #0
   15d26:	f88d 3005 	strb.w	r3, [sp, #5]
   15d2a:	f88d 3006 	strb.w	r3, [sp, #6]
   15d2e:	f88d 3007 	strb.w	r3, [sp, #7]
   15d32:	9a01      	ldr	r2, [sp, #4]
   15d34:	9218      	str	r2, [sp, #96]	; 0x60
   15d36:	4619      	mov	r1, r3
   15d38:	f363 0100 	bfi	r1, r3, #0, #1
   15d3c:	f363 0141 	bfi	r1, r3, #1, #1
   15d40:	f363 0182 	bfi	r1, r3, #2, #1
   15d44:	f363 01c5 	bfi	r1, r3, #3, #3
   15d48:	2201      	movs	r2, #1
   15d4a:	f362 1188 	bfi	r1, r2, #6, #3
   15d4e:	2208      	movs	r2, #8
   15d50:	f362 2152 	bfi	r1, r2, #9, #10
   15d54:	f363 41de 	bfi	r1, r3, #19, #12
   15d58:	f363 71df 	bfi	r1, r3, #31, #1
   15d5c:	aa18      	add	r2, sp, #96	; 0x60
   15d5e:	483c      	ldr	r0, [pc, #240]	; (15e50 <usage_fault+0x274>)
   15d60:	f013 f82f 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15d64:	e770      	b.n	15c48 <usage_fault+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15d66:	4b3f      	ldr	r3, [pc, #252]	; (15e64 <usage_fault+0x288>)
   15d68:	931f      	str	r3, [sp, #124]	; 0x7c
   15d6a:	2302      	movs	r3, #2
   15d6c:	f88d 3004 	strb.w	r3, [sp, #4]
   15d70:	2300      	movs	r3, #0
   15d72:	f88d 3005 	strb.w	r3, [sp, #5]
   15d76:	f88d 3006 	strb.w	r3, [sp, #6]
   15d7a:	f88d 3007 	strb.w	r3, [sp, #7]
   15d7e:	9a01      	ldr	r2, [sp, #4]
   15d80:	921e      	str	r2, [sp, #120]	; 0x78
   15d82:	4619      	mov	r1, r3
   15d84:	f363 0100 	bfi	r1, r3, #0, #1
   15d88:	f363 0141 	bfi	r1, r3, #1, #1
   15d8c:	f363 0182 	bfi	r1, r3, #2, #1
   15d90:	f363 01c5 	bfi	r1, r3, #3, #3
   15d94:	2201      	movs	r2, #1
   15d96:	f362 1188 	bfi	r1, r2, #6, #3
   15d9a:	2208      	movs	r2, #8
   15d9c:	f362 2152 	bfi	r1, r2, #9, #10
   15da0:	f363 41de 	bfi	r1, r3, #19, #12
   15da4:	f363 71df 	bfi	r1, r3, #31, #1
   15da8:	aa1e      	add	r2, sp, #120	; 0x78
   15daa:	4829      	ldr	r0, [pc, #164]	; (15e50 <usage_fault+0x274>)
   15dac:	f013 f809 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15db0:	e750      	b.n	15c54 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15db2:	4b2d      	ldr	r3, [pc, #180]	; (15e68 <usage_fault+0x28c>)
   15db4:	9325      	str	r3, [sp, #148]	; 0x94
   15db6:	2302      	movs	r3, #2
   15db8:	f88d 3004 	strb.w	r3, [sp, #4]
   15dbc:	2300      	movs	r3, #0
   15dbe:	f88d 3005 	strb.w	r3, [sp, #5]
   15dc2:	f88d 3006 	strb.w	r3, [sp, #6]
   15dc6:	f88d 3007 	strb.w	r3, [sp, #7]
   15dca:	9a01      	ldr	r2, [sp, #4]
   15dcc:	9224      	str	r2, [sp, #144]	; 0x90
   15dce:	4619      	mov	r1, r3
   15dd0:	f363 0100 	bfi	r1, r3, #0, #1
   15dd4:	f363 0141 	bfi	r1, r3, #1, #1
   15dd8:	f363 0182 	bfi	r1, r3, #2, #1
   15ddc:	f363 01c5 	bfi	r1, r3, #3, #3
   15de0:	2201      	movs	r2, #1
   15de2:	f362 1188 	bfi	r1, r2, #6, #3
   15de6:	2208      	movs	r2, #8
   15de8:	f362 2152 	bfi	r1, r2, #9, #10
   15dec:	f363 41de 	bfi	r1, r3, #19, #12
   15df0:	f363 71df 	bfi	r1, r3, #31, #1
   15df4:	aa24      	add	r2, sp, #144	; 0x90
   15df6:	4816      	ldr	r0, [pc, #88]	; (15e50 <usage_fault+0x274>)
   15df8:	f012 ffe3 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15dfc:	e730      	b.n	15c60 <usage_fault+0x84>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15dfe:	4b1b      	ldr	r3, [pc, #108]	; (15e6c <usage_fault+0x290>)
   15e00:	932b      	str	r3, [sp, #172]	; 0xac
   15e02:	2302      	movs	r3, #2
   15e04:	f88d 3004 	strb.w	r3, [sp, #4]
   15e08:	2300      	movs	r3, #0
   15e0a:	f88d 3005 	strb.w	r3, [sp, #5]
   15e0e:	f88d 3006 	strb.w	r3, [sp, #6]
   15e12:	f88d 3007 	strb.w	r3, [sp, #7]
   15e16:	9a01      	ldr	r2, [sp, #4]
   15e18:	922a      	str	r2, [sp, #168]	; 0xa8
   15e1a:	4619      	mov	r1, r3
   15e1c:	f363 0100 	bfi	r1, r3, #0, #1
   15e20:	f363 0141 	bfi	r1, r3, #1, #1
   15e24:	f363 0182 	bfi	r1, r3, #2, #1
   15e28:	f363 01c5 	bfi	r1, r3, #3, #3
   15e2c:	2201      	movs	r2, #1
   15e2e:	f362 1188 	bfi	r1, r2, #6, #3
   15e32:	2208      	movs	r2, #8
   15e34:	f362 2152 	bfi	r1, r2, #9, #10
   15e38:	f363 41de 	bfi	r1, r3, #19, #12
   15e3c:	f363 71df 	bfi	r1, r3, #31, #1
   15e40:	aa2a      	add	r2, sp, #168	; 0xa8
   15e42:	4803      	ldr	r0, [pc, #12]	; (15e50 <usage_fault+0x274>)
   15e44:	f012 ffbd 	bl	28dc2 <z_impl_z_log_msg_static_create>
   15e48:	e710      	b.n	15c6c <usage_fault+0x90>
   15e4a:	bf00      	nop
   15e4c:	0002fb94 	.word	0x0002fb94
   15e50:	0002ef40 	.word	0x0002ef40
   15e54:	e000ed00 	.word	0xe000ed00
   15e58:	0002fbac 	.word	0x0002fbac
   15e5c:	0002fbc0 	.word	0x0002fbc0
   15e60:	0002fbdc 	.word	0x0002fbdc
   15e64:	0002fbfc 	.word	0x0002fbfc
   15e68:	0002fc24 	.word	0x0002fc24
   15e6c:	0002fc40 	.word	0x0002fc40

00015e70 <debug_monitor>:
{
   15e70:	b500      	push	{lr}
   15e72:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
   15e74:	2300      	movs	r3, #0
   15e76:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
   15e78:	4a13      	ldr	r2, [pc, #76]	; (15ec8 <debug_monitor+0x58>)
   15e7a:	9207      	str	r2, [sp, #28]
   15e7c:	2202      	movs	r2, #2
   15e7e:	f88d 2004 	strb.w	r2, [sp, #4]
   15e82:	f88d 3005 	strb.w	r3, [sp, #5]
   15e86:	f88d 3006 	strb.w	r3, [sp, #6]
   15e8a:	f88d 3007 	strb.w	r3, [sp, #7]
   15e8e:	9a01      	ldr	r2, [sp, #4]
   15e90:	9206      	str	r2, [sp, #24]
   15e92:	4619      	mov	r1, r3
   15e94:	f363 0100 	bfi	r1, r3, #0, #1
   15e98:	f363 0141 	bfi	r1, r3, #1, #1
   15e9c:	f363 0182 	bfi	r1, r3, #2, #1
   15ea0:	f363 01c5 	bfi	r1, r3, #3, #3
   15ea4:	2201      	movs	r2, #1
   15ea6:	f362 1188 	bfi	r1, r2, #6, #3
   15eaa:	2208      	movs	r2, #8
   15eac:	f362 2152 	bfi	r1, r2, #9, #10
   15eb0:	f363 41de 	bfi	r1, r3, #19, #12
   15eb4:	f363 71df 	bfi	r1, r3, #31, #1
   15eb8:	aa06      	add	r2, sp, #24
   15eba:	4804      	ldr	r0, [pc, #16]	; (15ecc <debug_monitor+0x5c>)
   15ebc:	f012 ff81 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   15ec0:	b009      	add	sp, #36	; 0x24
   15ec2:	f85d fb04 	ldr.w	pc, [sp], #4
   15ec6:	bf00      	nop
   15ec8:	0002fc6c 	.word	0x0002fc6c
   15ecc:	0002ef40 	.word	0x0002ef40

00015ed0 <reserved_exception>:
{
   15ed0:	b590      	push	{r4, r7, lr}
   15ed2:	b083      	sub	sp, #12
   15ed4:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   15ed6:	290f      	cmp	r1, #15
   15ed8:	dc23      	bgt.n	15f22 <reserved_exception+0x52>
   15eda:	4c30      	ldr	r4, [pc, #192]	; (15f9c <reserved_exception+0xcc>)
   15edc:	3910      	subs	r1, #16
   15ede:	2300      	movs	r3, #0
   15ee0:	713b      	strb	r3, [r7, #4]
   15ee2:	2302      	movs	r3, #2
   15ee4:	717b      	strb	r3, [r7, #5]
   15ee6:	b08a      	sub	sp, #40	; 0x28
   15ee8:	46ec      	mov	ip, sp
   15eea:	f11c 0210 	adds.w	r2, ip, #16
   15eee:	d01a      	beq.n	15f26 <reserved_exception+0x56>
   15ef0:	2012      	movs	r0, #18
   15ef2:	b122      	cbz	r2, 15efe <reserved_exception+0x2e>
   15ef4:	2804      	cmp	r0, #4
   15ef6:	dd02      	ble.n	15efe <reserved_exception+0x2e>
   15ef8:	4b29      	ldr	r3, [pc, #164]	; (15fa0 <reserved_exception+0xd0>)
   15efa:	f8cc 3014 	str.w	r3, [ip, #20]
   15efe:	2300      	movs	r3, #0
   15f00:	703b      	strb	r3, [r7, #0]
   15f02:	2302      	movs	r3, #2
   15f04:	707b      	strb	r3, [r7, #1]
   15f06:	b1e2      	cbz	r2, 15f42 <reserved_exception+0x72>
   15f08:	4603      	mov	r3, r0
   15f0a:	2808      	cmp	r0, #8
   15f0c:	dd01      	ble.n	15f12 <reserved_exception+0x42>
   15f0e:	f8cc 4018 	str.w	r4, [ip, #24]
   15f12:	2b0c      	cmp	r3, #12
   15f14:	dd01      	ble.n	15f1a <reserved_exception+0x4a>
   15f16:	f8cc 101c 	str.w	r1, [ip, #28]
   15f1a:	f10c 0320 	add.w	r3, ip, #32
   15f1e:	2100      	movs	r1, #0
   15f20:	e00d      	b.n	15f3e <reserved_exception+0x6e>
   15f22:	4c20      	ldr	r4, [pc, #128]	; (15fa4 <reserved_exception+0xd4>)
   15f24:	e7da      	b.n	15edc <reserved_exception+0xc>
   15f26:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   15f2a:	e7e2      	b.n	15ef2 <reserved_exception+0x22>
   15f2c:	f101 0408 	add.w	r4, r1, #8
   15f30:	eb04 0e07 	add.w	lr, r4, r7
   15f34:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   15f38:	f803 eb01 	strb.w	lr, [r3], #1
   15f3c:	3101      	adds	r1, #1
   15f3e:	2901      	cmp	r1, #1
   15f40:	d9f4      	bls.n	15f2c <reserved_exception+0x5c>
   15f42:	2811      	cmp	r0, #17
   15f44:	dd26      	ble.n	15f94 <reserved_exception+0xc4>
   15f46:	2312      	movs	r3, #18
   15f48:	b14a      	cbz	r2, 15f5e <reserved_exception+0x8e>
   15f4a:	2104      	movs	r1, #4
   15f4c:	7139      	strb	r1, [r7, #4]
   15f4e:	2100      	movs	r1, #0
   15f50:	7179      	strb	r1, [r7, #5]
   15f52:	71b9      	strb	r1, [r7, #6]
   15f54:	2101      	movs	r1, #1
   15f56:	71f9      	strb	r1, [r7, #7]
   15f58:	6878      	ldr	r0, [r7, #4]
   15f5a:	f8cc 0010 	str.w	r0, [ip, #16]
   15f5e:	2100      	movs	r1, #0
   15f60:	f36f 0100 	bfc	r1, #0, #1
   15f64:	f36f 0141 	bfc	r1, #1, #1
   15f68:	f36f 0182 	bfc	r1, #2, #1
   15f6c:	f36f 01c5 	bfc	r1, #3, #3
   15f70:	2001      	movs	r0, #1
   15f72:	f360 1188 	bfi	r1, r0, #6, #3
   15f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
   15f7a:	f363 2152 	bfi	r1, r3, #9, #10
   15f7e:	f36f 41de 	bfc	r1, #19, #12
   15f82:	f36f 71df 	bfc	r1, #31, #1
   15f86:	2300      	movs	r3, #0
   15f88:	4807      	ldr	r0, [pc, #28]	; (15fa8 <reserved_exception+0xd8>)
   15f8a:	f012 ff1a 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   15f8e:	370c      	adds	r7, #12
   15f90:	46bd      	mov	sp, r7
   15f92:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   15f94:	f06f 031b 	mvn.w	r3, #27
   15f98:	e7d6      	b.n	15f48 <reserved_exception+0x78>
   15f9a:	bf00      	nop
   15f9c:	0002fc90 	.word	0x0002fc90
   15fa0:	0002fcc4 	.word	0x0002fcc4
   15fa4:	0002fca8 	.word	0x0002fca8
   15fa8:	0002ef40 	.word	0x0002ef40

00015fac <mem_manage_fault>:
{
   15fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15fb0:	b0a7      	sub	sp, #156	; 0x9c
   15fb2:	af00      	add	r7, sp, #0
   15fb4:	4605      	mov	r5, r0
   15fb6:	460c      	mov	r4, r1
   15fb8:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   15fba:	4bbc      	ldr	r3, [pc, #752]	; (162ac <mem_manage_fault+0x300>)
   15fbc:	61fb      	str	r3, [r7, #28]
   15fbe:	2302      	movs	r3, #2
   15fc0:	713b      	strb	r3, [r7, #4]
   15fc2:	2300      	movs	r3, #0
   15fc4:	717b      	strb	r3, [r7, #5]
   15fc6:	71bb      	strb	r3, [r7, #6]
   15fc8:	71fb      	strb	r3, [r7, #7]
   15fca:	687a      	ldr	r2, [r7, #4]
   15fcc:	61ba      	str	r2, [r7, #24]
   15fce:	4619      	mov	r1, r3
   15fd0:	f363 0100 	bfi	r1, r3, #0, #1
   15fd4:	f363 0141 	bfi	r1, r3, #1, #1
   15fd8:	f363 0182 	bfi	r1, r3, #2, #1
   15fdc:	f363 01c5 	bfi	r1, r3, #3, #3
   15fe0:	2201      	movs	r2, #1
   15fe2:	f362 1188 	bfi	r1, r2, #6, #3
   15fe6:	2208      	movs	r2, #8
   15fe8:	f362 2152 	bfi	r1, r2, #9, #10
   15fec:	f363 41de 	bfi	r1, r3, #19, #12
   15ff0:	f363 71df 	bfi	r1, r3, #31, #1
   15ff4:	f107 0218 	add.w	r2, r7, #24
   15ff8:	48ad      	ldr	r0, [pc, #692]	; (162b0 <mem_manage_fault+0x304>)
   15ffa:	f012 fee2 	bl	28dc2 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15ffe:	4bad      	ldr	r3, [pc, #692]	; (162b4 <mem_manage_fault+0x308>)
   16000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16002:	f013 0f10 	tst.w	r3, #16
   16006:	d140      	bne.n	1608a <mem_manage_fault+0xde>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   16008:	4baa      	ldr	r3, [pc, #680]	; (162b4 <mem_manage_fault+0x308>)
   1600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1600c:	f013 0f08 	tst.w	r3, #8
   16010:	d15e      	bne.n	160d0 <mem_manage_fault+0x124>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   16012:	4ba8      	ldr	r3, [pc, #672]	; (162b4 <mem_manage_fault+0x308>)
   16014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16016:	f013 0f02 	tst.w	r3, #2
   1601a:	d17c      	bne.n	16116 <mem_manage_fault+0x16a>
	uint32_t mmfar = -EINVAL;
   1601c:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   16020:	4ba4      	ldr	r3, [pc, #656]	; (162b4 <mem_manage_fault+0x308>)
   16022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16024:	f013 0f01 	tst.w	r3, #1
   16028:	f040 80ec 	bne.w	16204 <mem_manage_fault+0x258>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1602c:	4ba1      	ldr	r3, [pc, #644]	; (162b4 <mem_manage_fault+0x308>)
   1602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16030:	f013 0f20 	tst.w	r3, #32
   16034:	f040 8109 	bne.w	1624a <mem_manage_fault+0x29e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   16038:	4b9e      	ldr	r3, [pc, #632]	; (162b4 <mem_manage_fault+0x308>)
   1603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1603c:	f013 0f10 	tst.w	r3, #16
   16040:	d104      	bne.n	1604c <mem_manage_fault+0xa0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   16042:	4b9c      	ldr	r3, [pc, #624]	; (162b4 <mem_manage_fault+0x308>)
   16044:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   16046:	f014 0402 	ands.w	r4, r4, #2
   1604a:	d005      	beq.n	16058 <mem_manage_fault+0xac>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1604c:	4b99      	ldr	r3, [pc, #612]	; (162b4 <mem_manage_fault+0x308>)
   1604e:	685c      	ldr	r4, [r3, #4]
   16050:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   16054:	f040 811e 	bne.w	16294 <mem_manage_fault+0x2e8>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   16058:	4b96      	ldr	r3, [pc, #600]	; (162b4 <mem_manage_fault+0x308>)
   1605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1605c:	f013 0f20 	tst.w	r3, #32
   16060:	d004      	beq.n	1606c <mem_manage_fault+0xc0>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   16062:	4a94      	ldr	r2, [pc, #592]	; (162b4 <mem_manage_fault+0x308>)
   16064:	6a53      	ldr	r3, [r2, #36]	; 0x24
   16066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1606a:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1606c:	4a91      	ldr	r2, [pc, #580]	; (162b4 <mem_manage_fault+0x308>)
   1606e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16070:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   16074:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   16076:	2101      	movs	r1, #1
   16078:	4628      	mov	r0, r5
   1607a:	f013 fa75 	bl	29568 <memory_fault_recoverable>
   1607e:	7030      	strb	r0, [r6, #0]
}
   16080:	4620      	mov	r0, r4
   16082:	379c      	adds	r7, #156	; 0x9c
   16084:	46bd      	mov	sp, r7
   16086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   1608a:	4b8b      	ldr	r3, [pc, #556]	; (162b8 <mem_manage_fault+0x30c>)
   1608c:	637b      	str	r3, [r7, #52]	; 0x34
   1608e:	2302      	movs	r3, #2
   16090:	713b      	strb	r3, [r7, #4]
   16092:	2300      	movs	r3, #0
   16094:	717b      	strb	r3, [r7, #5]
   16096:	71bb      	strb	r3, [r7, #6]
   16098:	71fb      	strb	r3, [r7, #7]
   1609a:	687a      	ldr	r2, [r7, #4]
   1609c:	633a      	str	r2, [r7, #48]	; 0x30
   1609e:	4619      	mov	r1, r3
   160a0:	f363 0100 	bfi	r1, r3, #0, #1
   160a4:	f363 0141 	bfi	r1, r3, #1, #1
   160a8:	f363 0182 	bfi	r1, r3, #2, #1
   160ac:	f363 01c5 	bfi	r1, r3, #3, #3
   160b0:	2201      	movs	r2, #1
   160b2:	f362 1188 	bfi	r1, r2, #6, #3
   160b6:	2208      	movs	r2, #8
   160b8:	f362 2152 	bfi	r1, r2, #9, #10
   160bc:	f363 41de 	bfi	r1, r3, #19, #12
   160c0:	f363 71df 	bfi	r1, r3, #31, #1
   160c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   160c8:	4879      	ldr	r0, [pc, #484]	; (162b0 <mem_manage_fault+0x304>)
   160ca:	f012 fe7a 	bl	28dc2 <z_impl_z_log_msg_static_create>
   160ce:	e79b      	b.n	16008 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   160d0:	4b7a      	ldr	r3, [pc, #488]	; (162bc <mem_manage_fault+0x310>)
   160d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   160d4:	2302      	movs	r3, #2
   160d6:	713b      	strb	r3, [r7, #4]
   160d8:	2300      	movs	r3, #0
   160da:	717b      	strb	r3, [r7, #5]
   160dc:	71bb      	strb	r3, [r7, #6]
   160de:	71fb      	strb	r3, [r7, #7]
   160e0:	687a      	ldr	r2, [r7, #4]
   160e2:	64ba      	str	r2, [r7, #72]	; 0x48
   160e4:	4619      	mov	r1, r3
   160e6:	f363 0100 	bfi	r1, r3, #0, #1
   160ea:	f363 0141 	bfi	r1, r3, #1, #1
   160ee:	f363 0182 	bfi	r1, r3, #2, #1
   160f2:	f363 01c5 	bfi	r1, r3, #3, #3
   160f6:	2201      	movs	r2, #1
   160f8:	f362 1188 	bfi	r1, r2, #6, #3
   160fc:	2208      	movs	r2, #8
   160fe:	f362 2152 	bfi	r1, r2, #9, #10
   16102:	f363 41de 	bfi	r1, r3, #19, #12
   16106:	f363 71df 	bfi	r1, r3, #31, #1
   1610a:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1610e:	4868      	ldr	r0, [pc, #416]	; (162b0 <mem_manage_fault+0x304>)
   16110:	f012 fe57 	bl	28dc2 <z_impl_z_log_msg_static_create>
   16114:	e77d      	b.n	16012 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
   16116:	4b6a      	ldr	r3, [pc, #424]	; (162c0 <mem_manage_fault+0x314>)
   16118:	667b      	str	r3, [r7, #100]	; 0x64
   1611a:	2302      	movs	r3, #2
   1611c:	713b      	strb	r3, [r7, #4]
   1611e:	2300      	movs	r3, #0
   16120:	717b      	strb	r3, [r7, #5]
   16122:	71bb      	strb	r3, [r7, #6]
   16124:	71fb      	strb	r3, [r7, #7]
   16126:	687a      	ldr	r2, [r7, #4]
   16128:	663a      	str	r2, [r7, #96]	; 0x60
   1612a:	4619      	mov	r1, r3
   1612c:	f363 0100 	bfi	r1, r3, #0, #1
   16130:	f363 0141 	bfi	r1, r3, #1, #1
   16134:	f363 0182 	bfi	r1, r3, #2, #1
   16138:	f363 01c5 	bfi	r1, r3, #3, #3
   1613c:	2201      	movs	r2, #1
   1613e:	f362 1188 	bfi	r1, r2, #6, #3
   16142:	2208      	movs	r2, #8
   16144:	f362 2152 	bfi	r1, r2, #9, #10
   16148:	f363 41de 	bfi	r1, r3, #19, #12
   1614c:	f363 71df 	bfi	r1, r3, #31, #1
   16150:	f107 0260 	add.w	r2, r7, #96	; 0x60
   16154:	4856      	ldr	r0, [pc, #344]	; (162b0 <mem_manage_fault+0x304>)
   16156:	f012 fe34 	bl	28dc2 <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
   1615a:	4b56      	ldr	r3, [pc, #344]	; (162b4 <mem_manage_fault+0x308>)
   1615c:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   16160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16162:	f013 0f80 	tst.w	r3, #128	; 0x80
   16166:	d04a      	beq.n	161fe <mem_manage_fault+0x252>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   16168:	46e9      	mov	r9, sp
   1616a:	b088      	sub	sp, #32
   1616c:	466b      	mov	r3, sp
   1616e:	f113 0210 	adds.w	r2, r3, #16
   16172:	d011      	beq.n	16198 <mem_manage_fault+0x1ec>
   16174:	210c      	movs	r1, #12
   16176:	b152      	cbz	r2, 1618e <mem_manage_fault+0x1e2>
   16178:	4608      	mov	r0, r1
   1617a:	2904      	cmp	r1, #4
   1617c:	dd03      	ble.n	16186 <mem_manage_fault+0x1da>
   1617e:	f8df c14c 	ldr.w	ip, [pc, #332]	; 162cc <mem_manage_fault+0x320>
   16182:	f8c3 c014 	str.w	ip, [r3, #20]
   16186:	2808      	cmp	r0, #8
   16188:	dd09      	ble.n	1619e <mem_manage_fault+0x1f2>
   1618a:	f8c3 8018 	str.w	r8, [r3, #24]
   1618e:	290b      	cmp	r1, #11
   16190:	dd32      	ble.n	161f8 <mem_manage_fault+0x24c>
   16192:	f04f 0c0c 	mov.w	ip, #12
   16196:	e004      	b.n	161a2 <mem_manage_fault+0x1f6>
   16198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1619c:	e7eb      	b.n	16176 <mem_manage_fault+0x1ca>
   1619e:	f06f 0c1b 	mvn.w	ip, #27
   161a2:	b13a      	cbz	r2, 161b4 <mem_manage_fault+0x208>
   161a4:	2103      	movs	r1, #3
   161a6:	7139      	strb	r1, [r7, #4]
   161a8:	2100      	movs	r1, #0
   161aa:	7179      	strb	r1, [r7, #5]
   161ac:	71b9      	strb	r1, [r7, #6]
   161ae:	71f9      	strb	r1, [r7, #7]
   161b0:	6878      	ldr	r0, [r7, #4]
   161b2:	6118      	str	r0, [r3, #16]
   161b4:	2100      	movs	r1, #0
   161b6:	f36f 0100 	bfc	r1, #0, #1
   161ba:	f36f 0141 	bfc	r1, #1, #1
   161be:	f36f 0182 	bfc	r1, #2, #1
   161c2:	f36f 01c5 	bfc	r1, #3, #3
   161c6:	2301      	movs	r3, #1
   161c8:	f363 1188 	bfi	r1, r3, #6, #3
   161cc:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   161d0:	f363 2152 	bfi	r1, r3, #9, #10
   161d4:	f36f 41de 	bfc	r1, #19, #12
   161d8:	f36f 71df 	bfc	r1, #31, #1
   161dc:	2300      	movs	r3, #0
   161de:	4834      	ldr	r0, [pc, #208]	; (162b0 <mem_manage_fault+0x304>)
   161e0:	f012 fdef 	bl	28dc2 <z_impl_z_log_msg_static_create>
   161e4:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   161e6:	2c00      	cmp	r4, #0
   161e8:	f43f af1a 	beq.w	16020 <mem_manage_fault+0x74>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   161ec:	4a31      	ldr	r2, [pc, #196]	; (162b4 <mem_manage_fault+0x308>)
   161ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
   161f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   161f4:	6293      	str	r3, [r2, #40]	; 0x28
   161f6:	e713      	b.n	16020 <mem_manage_fault+0x74>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   161f8:	f06f 0c1b 	mvn.w	ip, #27
   161fc:	e7d1      	b.n	161a2 <mem_manage_fault+0x1f6>
	uint32_t mmfar = -EINVAL;
   161fe:	f06f 0815 	mvn.w	r8, #21
   16202:	e70d      	b.n	16020 <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Instruction Access Violation");
   16204:	4b2f      	ldr	r3, [pc, #188]	; (162c4 <mem_manage_fault+0x318>)
   16206:	67fb      	str	r3, [r7, #124]	; 0x7c
   16208:	2302      	movs	r3, #2
   1620a:	713b      	strb	r3, [r7, #4]
   1620c:	2300      	movs	r3, #0
   1620e:	717b      	strb	r3, [r7, #5]
   16210:	71bb      	strb	r3, [r7, #6]
   16212:	71fb      	strb	r3, [r7, #7]
   16214:	687a      	ldr	r2, [r7, #4]
   16216:	67ba      	str	r2, [r7, #120]	; 0x78
   16218:	4619      	mov	r1, r3
   1621a:	f363 0100 	bfi	r1, r3, #0, #1
   1621e:	f363 0141 	bfi	r1, r3, #1, #1
   16222:	f363 0182 	bfi	r1, r3, #2, #1
   16226:	f363 01c5 	bfi	r1, r3, #3, #3
   1622a:	2201      	movs	r2, #1
   1622c:	f362 1188 	bfi	r1, r2, #6, #3
   16230:	2208      	movs	r2, #8
   16232:	f362 2152 	bfi	r1, r2, #9, #10
   16236:	f363 41de 	bfi	r1, r3, #19, #12
   1623a:	f363 71df 	bfi	r1, r3, #31, #1
   1623e:	f107 0278 	add.w	r2, r7, #120	; 0x78
   16242:	481b      	ldr	r0, [pc, #108]	; (162b0 <mem_manage_fault+0x304>)
   16244:	f012 fdbd 	bl	28dc2 <z_impl_z_log_msg_static_create>
   16248:	e6f0      	b.n	1602c <mem_manage_fault+0x80>
		PR_FAULT_INFO(
   1624a:	4b1f      	ldr	r3, [pc, #124]	; (162c8 <mem_manage_fault+0x31c>)
   1624c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   16250:	2302      	movs	r3, #2
   16252:	713b      	strb	r3, [r7, #4]
   16254:	2300      	movs	r3, #0
   16256:	717b      	strb	r3, [r7, #5]
   16258:	71bb      	strb	r3, [r7, #6]
   1625a:	71fb      	strb	r3, [r7, #7]
   1625c:	687a      	ldr	r2, [r7, #4]
   1625e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   16262:	4619      	mov	r1, r3
   16264:	f363 0100 	bfi	r1, r3, #0, #1
   16268:	f363 0141 	bfi	r1, r3, #1, #1
   1626c:	f363 0182 	bfi	r1, r3, #2, #1
   16270:	f363 01c5 	bfi	r1, r3, #3, #3
   16274:	2201      	movs	r2, #1
   16276:	f362 1188 	bfi	r1, r2, #6, #3
   1627a:	2208      	movs	r2, #8
   1627c:	f362 2152 	bfi	r1, r2, #9, #10
   16280:	f363 41de 	bfi	r1, r3, #19, #12
   16284:	f363 71df 	bfi	r1, r3, #31, #1
   16288:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1628c:	4808      	ldr	r0, [pc, #32]	; (162b0 <mem_manage_fault+0x304>)
   1628e:	f012 fd98 	bl	28dc2 <z_impl_z_log_msg_static_create>
   16292:	e6d1      	b.n	16038 <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   16294:	4629      	mov	r1, r5
   16296:	4640      	mov	r0, r8
   16298:	f7ff fa32 	bl	15700 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1629c:	4604      	mov	r4, r0
   1629e:	2800      	cmp	r0, #0
   162a0:	f43f aeda 	beq.w	16058 <mem_manage_fault+0xac>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   162a4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   162a8:	2402      	movs	r4, #2
   162aa:	e6d5      	b.n	16058 <mem_manage_fault+0xac>
   162ac:	0002fcd8 	.word	0x0002fcd8
   162b0:	0002ef40 	.word	0x0002ef40
   162b4:	e000ed00 	.word	0xe000ed00
   162b8:	0002fcf0 	.word	0x0002fcf0
   162bc:	0002fae8 	.word	0x0002fae8
   162c0:	0002fd24 	.word	0x0002fd24
   162c4:	0002fd54 	.word	0x0002fd54
   162c8:	0002fb64 	.word	0x0002fb64
   162cc:	0002fd3c 	.word	0x0002fd3c

000162d0 <hard_fault>:
{
   162d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   162d2:	b09b      	sub	sp, #108	; 0x6c
   162d4:	af00      	add	r7, sp, #0
   162d6:	4606      	mov	r6, r0
   162d8:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   162da:	4b85      	ldr	r3, [pc, #532]	; (164f0 <hard_fault+0x220>)
   162dc:	61fb      	str	r3, [r7, #28]
   162de:	2302      	movs	r3, #2
   162e0:	713b      	strb	r3, [r7, #4]
   162e2:	2400      	movs	r4, #0
   162e4:	717c      	strb	r4, [r7, #5]
   162e6:	71bc      	strb	r4, [r7, #6]
   162e8:	71fc      	strb	r4, [r7, #7]
   162ea:	687b      	ldr	r3, [r7, #4]
   162ec:	61bb      	str	r3, [r7, #24]
   162ee:	4621      	mov	r1, r4
   162f0:	f364 0100 	bfi	r1, r4, #0, #1
   162f4:	f364 0141 	bfi	r1, r4, #1, #1
   162f8:	f364 0182 	bfi	r1, r4, #2, #1
   162fc:	f364 01c5 	bfi	r1, r4, #3, #3
   16300:	2301      	movs	r3, #1
   16302:	f363 1188 	bfi	r1, r3, #6, #3
   16306:	2308      	movs	r3, #8
   16308:	f363 2152 	bfi	r1, r3, #9, #10
   1630c:	f364 41de 	bfi	r1, r4, #19, #12
   16310:	f364 71df 	bfi	r1, r4, #31, #1
   16314:	4623      	mov	r3, r4
   16316:	f107 0218 	add.w	r2, r7, #24
   1631a:	4876      	ldr	r0, [pc, #472]	; (164f4 <hard_fault+0x224>)
   1631c:	f012 fd51 	bl	28dc2 <z_impl_z_log_msg_static_create>
	*recoverable = false;
   16320:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16322:	4b75      	ldr	r3, [pc, #468]	; (164f8 <hard_fault+0x228>)
   16324:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   16326:	f014 0402 	ands.w	r4, r4, #2
   1632a:	d10c      	bne.n	16346 <hard_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1632c:	4b72      	ldr	r3, [pc, #456]	; (164f8 <hard_fault+0x228>)
   1632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16330:	2b00      	cmp	r3, #0
   16332:	db2c      	blt.n	1638e <hard_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   16334:	4b70      	ldr	r3, [pc, #448]	; (164f8 <hard_fault+0x228>)
   16336:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   16338:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   1633c:	d14a      	bne.n	163d4 <hard_fault+0x104>
}
   1633e:	4620      	mov	r0, r4
   16340:	376c      	adds	r7, #108	; 0x6c
   16342:	46bd      	mov	sp, r7
   16344:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
   16346:	4b6d      	ldr	r3, [pc, #436]	; (164fc <hard_fault+0x22c>)
   16348:	667b      	str	r3, [r7, #100]	; 0x64
   1634a:	2302      	movs	r3, #2
   1634c:	713b      	strb	r3, [r7, #4]
   1634e:	2400      	movs	r4, #0
   16350:	717c      	strb	r4, [r7, #5]
   16352:	71bc      	strb	r4, [r7, #6]
   16354:	71fc      	strb	r4, [r7, #7]
   16356:	687b      	ldr	r3, [r7, #4]
   16358:	663b      	str	r3, [r7, #96]	; 0x60
   1635a:	4621      	mov	r1, r4
   1635c:	f364 0100 	bfi	r1, r4, #0, #1
   16360:	f364 0141 	bfi	r1, r4, #1, #1
   16364:	f364 0182 	bfi	r1, r4, #2, #1
   16368:	f364 01c5 	bfi	r1, r4, #3, #3
   1636c:	2301      	movs	r3, #1
   1636e:	f363 1188 	bfi	r1, r3, #6, #3
   16372:	2308      	movs	r3, #8
   16374:	f363 2152 	bfi	r1, r3, #9, #10
   16378:	f364 41de 	bfi	r1, r4, #19, #12
   1637c:	f364 71df 	bfi	r1, r4, #31, #1
   16380:	4623      	mov	r3, r4
   16382:	f107 0260 	add.w	r2, r7, #96	; 0x60
   16386:	485b      	ldr	r0, [pc, #364]	; (164f4 <hard_fault+0x224>)
   16388:	f012 fd1b 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1638c:	e7d7      	b.n	1633e <hard_fault+0x6e>
		PR_EXC("  Debug event");
   1638e:	4b5c      	ldr	r3, [pc, #368]	; (16500 <hard_fault+0x230>)
   16390:	64fb      	str	r3, [r7, #76]	; 0x4c
   16392:	2302      	movs	r3, #2
   16394:	713b      	strb	r3, [r7, #4]
   16396:	2300      	movs	r3, #0
   16398:	717b      	strb	r3, [r7, #5]
   1639a:	71bb      	strb	r3, [r7, #6]
   1639c:	71fb      	strb	r3, [r7, #7]
   1639e:	687a      	ldr	r2, [r7, #4]
   163a0:	64ba      	str	r2, [r7, #72]	; 0x48
   163a2:	4619      	mov	r1, r3
   163a4:	f363 0100 	bfi	r1, r3, #0, #1
   163a8:	f363 0141 	bfi	r1, r3, #1, #1
   163ac:	f363 0182 	bfi	r1, r3, #2, #1
   163b0:	f363 01c5 	bfi	r1, r3, #3, #3
   163b4:	2201      	movs	r2, #1
   163b6:	f362 1188 	bfi	r1, r2, #6, #3
   163ba:	2208      	movs	r2, #8
   163bc:	f362 2152 	bfi	r1, r2, #9, #10
   163c0:	f363 41de 	bfi	r1, r3, #19, #12
   163c4:	f363 71df 	bfi	r1, r3, #31, #1
   163c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
   163cc:	4849      	ldr	r0, [pc, #292]	; (164f4 <hard_fault+0x224>)
   163ce:	f012 fcf8 	bl	28dc2 <z_impl_z_log_msg_static_create>
   163d2:	e7b4      	b.n	1633e <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
   163d4:	4b4b      	ldr	r3, [pc, #300]	; (16504 <hard_fault+0x234>)
   163d6:	637b      	str	r3, [r7, #52]	; 0x34
   163d8:	2302      	movs	r3, #2
   163da:	713b      	strb	r3, [r7, #4]
   163dc:	2300      	movs	r3, #0
   163de:	717b      	strb	r3, [r7, #5]
   163e0:	71bb      	strb	r3, [r7, #6]
   163e2:	71fb      	strb	r3, [r7, #7]
   163e4:	687a      	ldr	r2, [r7, #4]
   163e6:	633a      	str	r2, [r7, #48]	; 0x30
   163e8:	4619      	mov	r1, r3
   163ea:	f363 0100 	bfi	r1, r3, #0, #1
   163ee:	f363 0141 	bfi	r1, r3, #1, #1
   163f2:	f363 0182 	bfi	r1, r3, #2, #1
   163f6:	f363 01c5 	bfi	r1, r3, #3, #3
   163fa:	2201      	movs	r2, #1
   163fc:	f362 1188 	bfi	r1, r2, #6, #3
   16400:	2208      	movs	r2, #8
   16402:	f362 2152 	bfi	r1, r2, #9, #10
   16406:	f363 41de 	bfi	r1, r3, #19, #12
   1640a:	f363 71df 	bfi	r1, r3, #31, #1
   1640e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   16412:	4838      	ldr	r0, [pc, #224]	; (164f4 <hard_fault+0x224>)
   16414:	f012 fcd5 	bl	28dc2 <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
   16418:	4630      	mov	r0, r6
   1641a:	f7ff f9e9 	bl	157f0 <z_arm_is_synchronous_svc>
   1641e:	2800      	cmp	r0, #0
   16420:	d042      	beq.n	164a8 <hard_fault+0x1d8>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   16422:	6834      	ldr	r4, [r6, #0]
   16424:	466d      	mov	r5, sp
   16426:	b088      	sub	sp, #32
   16428:	466b      	mov	r3, sp
   1642a:	f113 0210 	adds.w	r2, r3, #16
   1642e:	d00f      	beq.n	16450 <hard_fault+0x180>
   16430:	210c      	movs	r1, #12
   16432:	b14a      	cbz	r2, 16448 <hard_fault+0x178>
   16434:	4608      	mov	r0, r1
   16436:	2904      	cmp	r1, #4
   16438:	dd03      	ble.n	16442 <hard_fault+0x172>
   1643a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 16508 <hard_fault+0x238>
   1643e:	f8c3 c014 	str.w	ip, [r3, #20]
   16442:	2808      	cmp	r0, #8
   16444:	dd07      	ble.n	16456 <hard_fault+0x186>
   16446:	619c      	str	r4, [r3, #24]
   16448:	290b      	cmp	r1, #11
   1644a:	dd2a      	ble.n	164a2 <hard_fault+0x1d2>
   1644c:	240c      	movs	r4, #12
   1644e:	e004      	b.n	1645a <hard_fault+0x18a>
   16450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16454:	e7ed      	b.n	16432 <hard_fault+0x162>
   16456:	f06f 041b 	mvn.w	r4, #27
   1645a:	b13a      	cbz	r2, 1646c <hard_fault+0x19c>
   1645c:	2103      	movs	r1, #3
   1645e:	7139      	strb	r1, [r7, #4]
   16460:	2100      	movs	r1, #0
   16462:	7179      	strb	r1, [r7, #5]
   16464:	71b9      	strb	r1, [r7, #6]
   16466:	71f9      	strb	r1, [r7, #7]
   16468:	6878      	ldr	r0, [r7, #4]
   1646a:	6118      	str	r0, [r3, #16]
   1646c:	2100      	movs	r1, #0
   1646e:	f36f 0100 	bfc	r1, #0, #1
   16472:	f36f 0141 	bfc	r1, #1, #1
   16476:	f36f 0182 	bfc	r1, #2, #1
   1647a:	f36f 01c5 	bfc	r1, #3, #3
   1647e:	2301      	movs	r3, #1
   16480:	f363 1188 	bfi	r1, r3, #6, #3
   16484:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   16488:	f363 2152 	bfi	r1, r3, #9, #10
   1648c:	f36f 41de 	bfc	r1, #19, #12
   16490:	f36f 71df 	bfc	r1, #31, #1
   16494:	2300      	movs	r3, #0
   16496:	4817      	ldr	r0, [pc, #92]	; (164f4 <hard_fault+0x224>)
   16498:	f012 fc93 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1649c:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
   1649e:	6834      	ldr	r4, [r6, #0]
   164a0:	e74d      	b.n	1633e <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   164a2:	f06f 041b 	mvn.w	r4, #27
   164a6:	e7d8      	b.n	1645a <hard_fault+0x18a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   164a8:	4b13      	ldr	r3, [pc, #76]	; (164f8 <hard_fault+0x228>)
   164aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   164ac:	f013 0fff 	tst.w	r3, #255	; 0xff
   164b0:	d10f      	bne.n	164d2 <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   164b2:	4b11      	ldr	r3, [pc, #68]	; (164f8 <hard_fault+0x228>)
   164b4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   164b6:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
   164ba:	d111      	bne.n	164e0 <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   164bc:	4b0e      	ldr	r3, [pc, #56]	; (164f8 <hard_fault+0x228>)
   164be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   164c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   164c4:	f4ff af3b 	bcc.w	1633e <hard_fault+0x6e>
			reason = usage_fault(esf);
   164c8:	4630      	mov	r0, r6
   164ca:	f7ff fb87 	bl	15bdc <usage_fault>
   164ce:	4604      	mov	r4, r0
	return reason;
   164d0:	e735      	b.n	1633e <hard_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
   164d2:	462a      	mov	r2, r5
   164d4:	2101      	movs	r1, #1
   164d6:	4630      	mov	r0, r6
   164d8:	f7ff fd68 	bl	15fac <mem_manage_fault>
   164dc:	4604      	mov	r4, r0
   164de:	e72e      	b.n	1633e <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
   164e0:	462a      	mov	r2, r5
   164e2:	2101      	movs	r1, #1
   164e4:	4630      	mov	r0, r6
   164e6:	f7ff f9e5 	bl	158b4 <bus_fault>
   164ea:	4604      	mov	r4, r0
   164ec:	e727      	b.n	1633e <hard_fault+0x6e>
   164ee:	bf00      	nop
   164f0:	0002fd74 	.word	0x0002fd74
   164f4:	0002ef40 	.word	0x0002ef40
   164f8:	e000ed00 	.word	0xe000ed00
   164fc:	0002fd8c 	.word	0x0002fd8c
   16500:	0002fdb0 	.word	0x0002fdb0
   16504:	0002fdc0 	.word	0x0002fdc0
   16508:	0002fde0 	.word	0x0002fde0

0001650c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1650c:	b530      	push	{r4, r5, lr}
   1650e:	b09d      	sub	sp, #116	; 0x74
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16510:	4b1a      	ldr	r3, [pc, #104]	; (1657c <z_arm_fault+0x70>)
   16512:	685c      	ldr	r4, [r3, #4]
   16514:	f3c4 0408 	ubfx	r4, r4, #0, #9
   16518:	2300      	movs	r3, #0
   1651a:	f383 8811 	msr	BASEPRI, r3
   1651e:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   16522:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
   16526:	f7ff f981 	bl	1582c <get_esf>
   1652a:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1652c:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   16530:	4621      	mov	r1, r4
   16532:	f013 f81b 	bl	2956c <fault_handle>
	if (recoverable) {
   16536:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   1653a:	b10b      	cbz	r3, 16540 <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   1653c:	b01d      	add	sp, #116	; 0x74
   1653e:	bd30      	pop	{r4, r5, pc}
   16540:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   16542:	2268      	movs	r2, #104	; 0x68
   16544:	4629      	mov	r1, r5
   16546:	a801      	add	r0, sp, #4
   16548:	f017 febf 	bl	2e2ca <memcpy>
	if (nested_exc) {
   1654c:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
   16550:	b14b      	cbz	r3, 16566 <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   16552:	9b08      	ldr	r3, [sp, #32]
   16554:	f3c3 0208 	ubfx	r2, r3, #0, #9
   16558:	b95a      	cbnz	r2, 16572 <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1655a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1655e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   16562:	9308      	str	r3, [sp, #32]
   16564:	e005      	b.n	16572 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16566:	9b08      	ldr	r3, [sp, #32]
   16568:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1656c:	f023 0301 	bic.w	r3, r3, #1
   16570:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   16572:	a901      	add	r1, sp, #4
   16574:	4620      	mov	r0, r4
   16576:	f012 ffb6 	bl	294e6 <z_arm_fatal_error>
   1657a:	e7df      	b.n	1653c <z_arm_fault+0x30>
   1657c:	e000ed00 	.word	0xe000ed00

00016580 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   16580:	4a02      	ldr	r2, [pc, #8]	; (1658c <z_arm_fault_init+0xc>)
   16582:	6953      	ldr	r3, [r2, #20]
   16584:	f043 0310 	orr.w	r3, r3, #16
   16588:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1658a:	4770      	bx	lr
   1658c:	e000ed00 	.word	0xe000ed00

00016590 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   16590:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16594:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   16598:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1659a:	4672      	mov	r2, lr
	bl z_arm_fault
   1659c:	f7ff ffb6 	bl	1650c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   165a0:	bd01      	pop	{r0, pc}
   165a2:	bf00      	nop

000165a4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   165a4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   165a6:	e006      	b.n	165b6 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165a8:	f003 030f 	and.w	r3, r3, #15
   165ac:	4909      	ldr	r1, [pc, #36]	; (165d4 <z_arm_interrupt_init+0x30>)
   165ae:	4419      	add	r1, r3
   165b0:	2340      	movs	r3, #64	; 0x40
   165b2:	760b      	strb	r3, [r1, #24]
   165b4:	3201      	adds	r2, #1
   165b6:	2a2f      	cmp	r2, #47	; 0x2f
   165b8:	dc0a      	bgt.n	165d0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   165ba:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   165bc:	2b00      	cmp	r3, #0
   165be:	dbf3      	blt.n	165a8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165c0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   165c4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   165c8:	2140      	movs	r1, #64	; 0x40
   165ca:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   165ce:	e7f1      	b.n	165b4 <z_arm_interrupt_init+0x10>
	}
}
   165d0:	4770      	bx	lr
   165d2:	bf00      	nop
   165d4:	e000ecfc 	.word	0xe000ecfc

000165d8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   165d8:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   165da:	4913      	ldr	r1, [pc, #76]	; (16628 <__start+0x50>)
    strb r0, [r1]
   165dc:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   165de:	2000      	movs	r0, #0
    msr CONTROL, r0
   165e0:	f380 8814 	msr	CONTROL, r0
    isb
   165e4:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   165e8:	f7fd fa90 	bl	13b0c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   165ec:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   165ee:	490f      	ldr	r1, [pc, #60]	; (1662c <__start+0x54>)
    str r0, [r1]
   165f0:	6008      	str	r0, [r1, #0]
    dsb
   165f2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   165f6:	480e      	ldr	r0, [pc, #56]	; (16630 <__start+0x58>)
    msr msp, r0
   165f8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   165fc:	f000 f830 	bl	16660 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16600:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   16602:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   16606:	480b      	ldr	r0, [pc, #44]	; (16634 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   16608:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   1660c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1660e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   16612:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   16616:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   16618:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1661a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1661e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   16622:	f7fe ff5b 	bl	154dc <z_arm_prep_c>
   16626:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   16628:	20004b70 	.word	0x20004b70
    ldr r1, =_SCS_MPU_CTRL
   1662c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16630:	20007a00 	.word	0x20007a00
    ldr r0, =z_interrupt_stacks
   16634:	20006800 	.word	0x20006800

00016638 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   16638:	4b08      	ldr	r3, [pc, #32]	; (1665c <z_arm_clear_arm_mpu_config+0x24>)
   1663a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   1663e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   16642:	2300      	movs	r3, #0
   16644:	e006      	b.n	16654 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   16646:	4a05      	ldr	r2, [pc, #20]	; (1665c <z_arm_clear_arm_mpu_config+0x24>)
   16648:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   1664c:	2100      	movs	r1, #0
   1664e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   16652:	3301      	adds	r3, #1
   16654:	4283      	cmp	r3, r0
   16656:	dbf6      	blt.n	16646 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   16658:	4770      	bx	lr
   1665a:	bf00      	nop
   1665c:	e000ed00 	.word	0xe000ed00

00016660 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   16660:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   16662:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   16664:	2400      	movs	r4, #0
   16666:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1666a:	f7ff ffe5 	bl	16638 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1666e:	4623      	mov	r3, r4
   16670:	e008      	b.n	16684 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   16672:	f103 0120 	add.w	r1, r3, #32
   16676:	4a0e      	ldr	r2, [pc, #56]	; (166b0 <z_arm_init_arch_hw_at_boot+0x50>)
   16678:	f04f 30ff 	mov.w	r0, #4294967295
   1667c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   16680:	3301      	adds	r3, #1
   16682:	b2db      	uxtb	r3, r3
   16684:	2b07      	cmp	r3, #7
   16686:	d9f4      	bls.n	16672 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   16688:	2300      	movs	r3, #0
   1668a:	e008      	b.n	1669e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1668c:	f103 0160 	add.w	r1, r3, #96	; 0x60
   16690:	4a07      	ldr	r2, [pc, #28]	; (166b0 <z_arm_init_arch_hw_at_boot+0x50>)
   16692:	f04f 30ff 	mov.w	r0, #4294967295
   16696:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1669a:	3301      	adds	r3, #1
   1669c:	b2db      	uxtb	r3, r3
   1669e:	2b07      	cmp	r3, #7
   166a0:	d9f4      	bls.n	1668c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   166a2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   166a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   166a8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   166ac:	bd10      	pop	{r4, pc}
   166ae:	bf00      	nop
   166b0:	e000e100 	.word	0xe000e100

000166b4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   166b4:	b508      	push	{r3, lr}
	if (_current == thread) {
   166b6:	4b0a      	ldr	r3, [pc, #40]	; (166e0 <z_impl_k_thread_abort+0x2c>)
   166b8:	689b      	ldr	r3, [r3, #8]
   166ba:	4283      	cmp	r3, r0
   166bc:	d002      	beq.n	166c4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   166be:	f00c fb31 	bl	22d24 <z_thread_abort>
}
   166c2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   166c4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   166c8:	2b00      	cmp	r3, #0
   166ca:	d0f8      	beq.n	166be <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   166cc:	4b05      	ldr	r3, [pc, #20]	; (166e4 <z_impl_k_thread_abort+0x30>)
   166ce:	685a      	ldr	r2, [r3, #4]
   166d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   166d4:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   166d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   166d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   166dc:	625a      	str	r2, [r3, #36]	; 0x24
   166de:	e7ee      	b.n	166be <z_impl_k_thread_abort+0xa>
   166e0:	20004040 	.word	0x20004040
   166e4:	e000ed00 	.word	0xe000ed00

000166e8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   166e8:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   166ea:	4b03      	ldr	r3, [pc, #12]	; (166f8 <z_arm_configure_static_mpu_regions+0x10>)
   166ec:	4a03      	ldr	r2, [pc, #12]	; (166fc <z_arm_configure_static_mpu_regions+0x14>)
   166ee:	2101      	movs	r1, #1
   166f0:	4803      	ldr	r0, [pc, #12]	; (16700 <z_arm_configure_static_mpu_regions+0x18>)
   166f2:	f012 ff90 	bl	29616 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   166f6:	bd08      	pop	{r3, pc}
   166f8:	20040000 	.word	0x20040000
   166fc:	20000000 	.word	0x20000000
   16700:	0002fdfc 	.word	0x0002fdfc

00016704 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   16704:	b510      	push	{r4, lr}
   16706:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   16708:	f7fe ffb4 	bl	15674 <z_arm_mpu_stack_guard_and_fpu_adjust>
   1670c:	4603      	mov	r3, r0
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1670e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   16712:	1a12      	subs	r2, r2, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   16714:	4804      	ldr	r0, [pc, #16]	; (16728 <z_arm_configure_dynamic_mpu_regions+0x24>)
   16716:	6002      	str	r2, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   16718:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1671a:	4b04      	ldr	r3, [pc, #16]	; (1672c <z_arm_configure_dynamic_mpu_regions+0x28>)
   1671c:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1671e:	2101      	movs	r1, #1
   16720:	f012 ff7d 	bl	2961e <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   16724:	bd10      	pop	{r4, pc}
   16726:	bf00      	nop
   16728:	20003690 	.word	0x20003690
   1672c:	150b0000 	.word	0x150b0000

00016730 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   16730:	4a08      	ldr	r2, [pc, #32]	; (16754 <region_init+0x24>)
   16732:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16736:	680b      	ldr	r3, [r1, #0]
   16738:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1673c:	4303      	orrs	r3, r0
   1673e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16742:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16746:	688b      	ldr	r3, [r1, #8]
   16748:	f043 0301 	orr.w	r3, r3, #1
   1674c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   16750:	4770      	bx	lr
   16752:	bf00      	nop
   16754:	e000ed00 	.word	0xe000ed00

00016758 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   16758:	b5f0      	push	{r4, r5, r6, r7, lr}
   1675a:	b083      	sub	sp, #12
   1675c:	af00      	add	r7, sp, #0
   1675e:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   16760:	2807      	cmp	r0, #7
   16762:	d805      	bhi.n	16770 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   16764:	f7ff ffe4 	bl	16730 <region_init>

	return index;
   16768:	4620      	mov	r0, r4
}
   1676a:	370c      	adds	r7, #12
   1676c:	46bd      	mov	sp, r7
   1676e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16770:	466d      	mov	r5, sp
   16772:	b088      	sub	sp, #32
   16774:	466b      	mov	r3, sp
   16776:	f113 0210 	adds.w	r2, r3, #16
   1677a:	d031      	beq.n	167e0 <region_allocate_and_init+0x88>
   1677c:	210c      	movs	r1, #12
   1677e:	b13a      	cbz	r2, 16790 <region_allocate_and_init+0x38>
   16780:	4608      	mov	r0, r1
   16782:	2904      	cmp	r1, #4
   16784:	dd01      	ble.n	1678a <region_allocate_and_init+0x32>
   16786:	4e19      	ldr	r6, [pc, #100]	; (167ec <region_allocate_and_init+0x94>)
   16788:	615e      	str	r6, [r3, #20]
   1678a:	2808      	cmp	r0, #8
   1678c:	dd00      	ble.n	16790 <region_allocate_and_init+0x38>
   1678e:	619c      	str	r4, [r3, #24]
   16790:	290b      	cmp	r1, #11
   16792:	dd28      	ble.n	167e6 <region_allocate_and_init+0x8e>
   16794:	240c      	movs	r4, #12
   16796:	b13a      	cbz	r2, 167a8 <region_allocate_and_init+0x50>
   16798:	2103      	movs	r1, #3
   1679a:	7139      	strb	r1, [r7, #4]
   1679c:	2100      	movs	r1, #0
   1679e:	7179      	strb	r1, [r7, #5]
   167a0:	71b9      	strb	r1, [r7, #6]
   167a2:	71f9      	strb	r1, [r7, #7]
   167a4:	6878      	ldr	r0, [r7, #4]
   167a6:	6118      	str	r0, [r3, #16]
   167a8:	2100      	movs	r1, #0
   167aa:	f36f 0100 	bfc	r1, #0, #1
   167ae:	f36f 0141 	bfc	r1, #1, #1
   167b2:	f36f 0182 	bfc	r1, #2, #1
   167b6:	f36f 01c5 	bfc	r1, #3, #3
   167ba:	2301      	movs	r3, #1
   167bc:	f363 1188 	bfi	r1, r3, #6, #3
   167c0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   167c4:	f364 2152 	bfi	r1, r4, #9, #10
   167c8:	f36f 41de 	bfc	r1, #19, #12
   167cc:	f36f 71df 	bfc	r1, #31, #1
   167d0:	2300      	movs	r3, #0
   167d2:	4807      	ldr	r0, [pc, #28]	; (167f0 <region_allocate_and_init+0x98>)
   167d4:	f012 faf5 	bl	28dc2 <z_impl_z_log_msg_static_create>
   167d8:	46ad      	mov	sp, r5
		return -EINVAL;
   167da:	f06f 0015 	mvn.w	r0, #21
   167de:	e7c4      	b.n	1676a <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   167e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   167e4:	e7cb      	b.n	1677e <region_allocate_and_init+0x26>
   167e6:	f06f 041b 	mvn.w	r4, #27
   167ea:	e7d4      	b.n	16796 <region_allocate_and_init+0x3e>
   167ec:	0002fe0c 	.word	0x0002fe0c
   167f0:	0002ef30 	.word	0x0002ef30

000167f4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   167f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167f8:	b082      	sub	sp, #8
   167fa:	af00      	add	r7, sp, #0
   167fc:	4681      	mov	r9, r0
   167fe:	4688      	mov	r8, r1
   16800:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   16802:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   16804:	2500      	movs	r5, #0
   16806:	e00f      	b.n	16828 <mpu_configure_regions+0x34>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   16808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1680c:	e024      	b.n	16858 <mpu_configure_regions+0x64>
   1680e:	f06f 041b 	mvn.w	r4, #27
   16812:	e02d      	b.n	16870 <mpu_configure_regions+0x7c>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   16814:	4621      	mov	r1, r4
   16816:	b2f0      	uxtb	r0, r6
   16818:	f012 fede 	bl	295d8 <mpu_configure_region>
   1681c:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   1681e:	f110 0f16 	cmn.w	r0, #22
   16822:	d049      	beq.n	168b8 <mpu_configure_regions+0xc4>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   16824:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   16826:	3501      	adds	r5, #1
   16828:	4545      	cmp	r5, r8
   1682a:	da45      	bge.n	168b8 <mpu_configure_regions+0xc4>
		if (regions[i].size == 0U) {
   1682c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   16830:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   16834:	6862      	ldr	r2, [r4, #4]
   16836:	2a00      	cmp	r2, #0
   16838:	d0f5      	beq.n	16826 <mpu_configure_regions+0x32>
		if (do_sanity_check &&
   1683a:	f1ba 0f00 	cmp.w	sl, #0
   1683e:	d0e9      	beq.n	16814 <mpu_configure_regions+0x20>
				(!mpu_partition_is_valid(&regions[i]))) {
   16840:	4620      	mov	r0, r4
   16842:	f012 feb8 	bl	295b6 <mpu_partition_is_valid>
		if (do_sanity_check &&
   16846:	2800      	cmp	r0, #0
   16848:	d1e4      	bne.n	16814 <mpu_configure_regions+0x20>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1684a:	466e      	mov	r6, sp
   1684c:	b088      	sub	sp, #32
   1684e:	466b      	mov	r3, sp
   16850:	f113 0210 	adds.w	r2, r3, #16
   16854:	d0d8      	beq.n	16808 <mpu_configure_regions+0x14>
   16856:	210c      	movs	r1, #12
   16858:	b13a      	cbz	r2, 1686a <mpu_configure_regions+0x76>
   1685a:	4608      	mov	r0, r1
   1685c:	2904      	cmp	r1, #4
   1685e:	dd01      	ble.n	16864 <mpu_configure_regions+0x70>
   16860:	4c18      	ldr	r4, [pc, #96]	; (168c4 <mpu_configure_regions+0xd0>)
   16862:	615c      	str	r4, [r3, #20]
   16864:	2808      	cmp	r0, #8
   16866:	dd00      	ble.n	1686a <mpu_configure_regions+0x76>
   16868:	619d      	str	r5, [r3, #24]
   1686a:	290b      	cmp	r1, #11
   1686c:	ddcf      	ble.n	1680e <mpu_configure_regions+0x1a>
   1686e:	240c      	movs	r4, #12
   16870:	b13a      	cbz	r2, 16882 <mpu_configure_regions+0x8e>
   16872:	2103      	movs	r1, #3
   16874:	7139      	strb	r1, [r7, #4]
   16876:	2100      	movs	r1, #0
   16878:	7179      	strb	r1, [r7, #5]
   1687a:	71b9      	strb	r1, [r7, #6]
   1687c:	71f9      	strb	r1, [r7, #7]
   1687e:	6878      	ldr	r0, [r7, #4]
   16880:	6118      	str	r0, [r3, #16]
   16882:	2100      	movs	r1, #0
   16884:	f36f 0100 	bfc	r1, #0, #1
   16888:	f36f 0141 	bfc	r1, #1, #1
   1688c:	f36f 0182 	bfc	r1, #2, #1
   16890:	f36f 01c5 	bfc	r1, #3, #3
   16894:	2301      	movs	r3, #1
   16896:	f363 1188 	bfi	r1, r3, #6, #3
   1689a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1689e:	f363 2152 	bfi	r1, r3, #9, #10
   168a2:	f36f 41de 	bfc	r1, #19, #12
   168a6:	f36f 71df 	bfc	r1, #31, #1
   168aa:	2300      	movs	r3, #0
   168ac:	4806      	ldr	r0, [pc, #24]	; (168c8 <mpu_configure_regions+0xd4>)
   168ae:	f012 fa88 	bl	28dc2 <z_impl_z_log_msg_static_create>
   168b2:	46b5      	mov	sp, r6
			return -EINVAL;
   168b4:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   168b8:	4630      	mov	r0, r6
   168ba:	3708      	adds	r7, #8
   168bc:	46bd      	mov	sp, r7
   168be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   168c2:	bf00      	nop
   168c4:	0002fe34 	.word	0x0002fe34
   168c8:	0002ef30 	.word	0x0002ef30

000168cc <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   168cc:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   168ce:	4c03      	ldr	r4, [pc, #12]	; (168dc <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   168d0:	2301      	movs	r3, #1
   168d2:	7822      	ldrb	r2, [r4, #0]
   168d4:	f7ff ff8e 	bl	167f4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   168d8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   168da:	bd10      	pop	{r4, pc}
   168dc:	20004b68 	.word	0x20004b68

000168e0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   168e0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   168e2:	2300      	movs	r3, #0
   168e4:	4a09      	ldr	r2, [pc, #36]	; (1690c <mpu_configure_dynamic_mpu_regions+0x2c>)
   168e6:	7812      	ldrb	r2, [r2, #0]
   168e8:	f7ff ff84 	bl	167f4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   168ec:	f110 0f16 	cmn.w	r0, #22
   168f0:	d00a      	beq.n	16908 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   168f2:	4603      	mov	r3, r0
   168f4:	e006      	b.n	16904 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   168f6:	4a06      	ldr	r2, [pc, #24]	; (16910 <mpu_configure_dynamic_mpu_regions+0x30>)
   168f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   168fc:	2100      	movs	r1, #0
   168fe:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   16902:	3301      	adds	r3, #1
   16904:	2b07      	cmp	r3, #7
   16906:	ddf6      	ble.n	168f6 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   16908:	bd08      	pop	{r3, pc}
   1690a:	bf00      	nop
   1690c:	20004b68 	.word	0x20004b68
   16910:	e000ed00 	.word	0xe000ed00

00016914 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16914:	4b04      	ldr	r3, [pc, #16]	; (16928 <arm_core_mpu_enable+0x14>)
   16916:	2205      	movs	r2, #5
   16918:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1691c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16920:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16924:	4770      	bx	lr
   16926:	bf00      	nop
   16928:	e000ed00 	.word	0xe000ed00

0001692c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1692c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16930:	4b02      	ldr	r3, [pc, #8]	; (1693c <arm_core_mpu_disable+0x10>)
   16932:	2200      	movs	r2, #0
   16934:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   16938:	4770      	bx	lr
   1693a:	bf00      	nop
   1693c:	e000ed00 	.word	0xe000ed00

00016940 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   16940:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   16942:	4b0e      	ldr	r3, [pc, #56]	; (1697c <z_arm_mpu_init+0x3c>)
   16944:	681d      	ldr	r5, [r3, #0]
   16946:	2d08      	cmp	r5, #8
   16948:	d815      	bhi.n	16976 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1694a:	f7ff ffef 	bl	1692c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1694e:	2400      	movs	r4, #0
   16950:	e009      	b.n	16966 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   16952:	4b0a      	ldr	r3, [pc, #40]	; (1697c <z_arm_mpu_init+0x3c>)
   16954:	6859      	ldr	r1, [r3, #4]
   16956:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1695a:	0093      	lsls	r3, r2, #2
   1695c:	4419      	add	r1, r3
   1695e:	4620      	mov	r0, r4
   16960:	f7ff fee6 	bl	16730 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16964:	3401      	adds	r4, #1
   16966:	42a5      	cmp	r5, r4
   16968:	d8f3      	bhi.n	16952 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1696a:	4b05      	ldr	r3, [pc, #20]	; (16980 <z_arm_mpu_init+0x40>)
   1696c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1696e:	f7ff ffd1 	bl	16914 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   16972:	2000      	movs	r0, #0
}
   16974:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   16976:	f04f 30ff 	mov.w	r0, #4294967295
   1697a:	e7fb      	b.n	16974 <z_arm_mpu_init+0x34>
   1697c:	0002fe60 	.word	0x0002fe60
   16980:	20004b68 	.word	0x20004b68

00016984 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   16984:	4b01      	ldr	r3, [pc, #4]	; (1698c <__stdout_hook_install+0x8>)
   16986:	6018      	str	r0, [r3, #0]
}
   16988:	4770      	bx	lr
   1698a:	bf00      	nop
   1698c:	20000684 	.word	0x20000684

00016990 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   16990:	b570      	push	{r4, r5, r6, lr}
   16992:	4606      	mov	r6, r0
   16994:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   16996:	2400      	movs	r4, #0
   16998:	e000      	b.n	1699c <z_impl_zephyr_read_stdin+0xc>
   1699a:	3401      	adds	r4, #1
   1699c:	42ac      	cmp	r4, r5
   1699e:	da08      	bge.n	169b2 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
   169a0:	4b05      	ldr	r3, [pc, #20]	; (169b8 <z_impl_zephyr_read_stdin+0x28>)
   169a2:	681b      	ldr	r3, [r3, #0]
   169a4:	4798      	blx	r3
   169a6:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   169a8:	280a      	cmp	r0, #10
   169aa:	d001      	beq.n	169b0 <z_impl_zephyr_read_stdin+0x20>
   169ac:	280d      	cmp	r0, #13
   169ae:	d1f4      	bne.n	1699a <z_impl_zephyr_read_stdin+0xa>
			i++;
   169b0:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
   169b2:	4620      	mov	r0, r4
   169b4:	bd70      	pop	{r4, r5, r6, pc}
   169b6:	bf00      	nop
   169b8:	20000680 	.word	0x20000680

000169bc <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   169bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169be:	4605      	mov	r5, r0
   169c0:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   169c2:	2400      	movs	r4, #0
   169c4:	e004      	b.n	169d0 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   169c6:	4b09      	ldr	r3, [pc, #36]	; (169ec <z_impl_zephyr_write_stdout+0x30>)
   169c8:	681b      	ldr	r3, [r3, #0]
   169ca:	7830      	ldrb	r0, [r6, #0]
   169cc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   169ce:	3401      	adds	r4, #1
   169d0:	42bc      	cmp	r4, r7
   169d2:	da08      	bge.n	169e6 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   169d4:	192e      	adds	r6, r5, r4
   169d6:	5d2b      	ldrb	r3, [r5, r4]
   169d8:	2b0a      	cmp	r3, #10
   169da:	d1f4      	bne.n	169c6 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   169dc:	4b03      	ldr	r3, [pc, #12]	; (169ec <z_impl_zephyr_write_stdout+0x30>)
   169de:	681b      	ldr	r3, [r3, #0]
   169e0:	200d      	movs	r0, #13
   169e2:	4798      	blx	r3
   169e4:	e7ef      	b.n	169c6 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   169e6:	4638      	mov	r0, r7
   169e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   169ea:	bf00      	nop
   169ec:	20000684 	.word	0x20000684

000169f0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   169f0:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
   169f2:	2205      	movs	r2, #5
   169f4:	4902      	ldr	r1, [pc, #8]	; (16a00 <_exit+0x10>)
   169f6:	2001      	movs	r0, #1
   169f8:	f012 fe22 	bl	29640 <_write>
	while (1) {
   169fc:	e7fe      	b.n	169fc <_exit+0xc>
   169fe:	bf00      	nop
   16a00:	0002fe58 	.word	0x0002fe58

00016a04 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   16a04:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   16a06:	4b08      	ldr	r3, [pc, #32]	; (16a28 <_sbrk+0x24>)
   16a08:	6819      	ldr	r1, [r3, #0]
   16a0a:	4b08      	ldr	r3, [pc, #32]	; (16a2c <_sbrk+0x28>)
   16a0c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   16a0e:	440a      	add	r2, r1
   16a10:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   16a14:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   16a18:	429a      	cmp	r2, r3
   16a1a:	d202      	bcs.n	16a22 <_sbrk+0x1e>
		heap_sz += count;
   16a1c:	4b02      	ldr	r3, [pc, #8]	; (16a28 <_sbrk+0x24>)
   16a1e:	601a      	str	r2, [r3, #0]
		ret = ptr;
   16a20:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   16a22:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
   16a26:	4770      	bx	lr
   16a28:	2000369c 	.word	0x2000369c
   16a2c:	20008b10 	.word	0x20008b10

00016a30 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   16a30:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   16a34:	4905      	ldr	r1, [pc, #20]	; (16a4c <__NVIC_SystemReset+0x1c>)
   16a36:	68ca      	ldr	r2, [r1, #12]
   16a38:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   16a3c:	4b04      	ldr	r3, [pc, #16]	; (16a50 <__NVIC_SystemReset+0x20>)
   16a3e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   16a40:	60cb      	str	r3, [r1, #12]
   16a42:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   16a46:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   16a48:	e7fd      	b.n	16a46 <__NVIC_SystemReset+0x16>
   16a4a:	bf00      	nop
   16a4c:	e000ed00 	.word	0xe000ed00
   16a50:	05fa0004 	.word	0x05fa0004

00016a54 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   16a54:	b510      	push	{r4, lr}
	__asm__ volatile(
   16a56:	f04f 0340 	mov.w	r3, #64	; 0x40
   16a5a:	f3ef 8411 	mrs	r4, BASEPRI
   16a5e:	f383 8812 	msr	BASEPRI_MAX, r3
   16a62:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   16a66:	2301      	movs	r3, #1
   16a68:	4a0c      	ldr	r2, [pc, #48]	; (16a9c <nordicsemi_nrf52_init+0x48>)
   16a6a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16a72:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   16a76:	f012 fe11 	bl	2969c <nrf52_errata_197>
   16a7a:	b120      	cbz	r0, 16a86 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   16a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16a80:	2201      	movs	r2, #1
   16a82:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   16a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16a8a:	2201      	movs	r2, #1
   16a8c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   16a90:	f384 8811 	msr	BASEPRI, r4
   16a94:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   16a98:	2000      	movs	r0, #0
   16a9a:	bd10      	pop	{r4, pc}
   16a9c:	4001e000 	.word	0x4001e000

00016aa0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   16aa0:	b130      	cbz	r0, 16ab0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   16aa2:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   16aa4:	4b03      	ldr	r3, [pc, #12]	; (16ab4 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   16aa6:	0180      	lsls	r0, r0, #6
   16aa8:	f043 0301 	orr.w	r3, r3, #1
   16aac:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   16aae:	bd08      	pop	{r3, pc}
   16ab0:	4770      	bx	lr
   16ab2:	bf00      	nop
   16ab4:	0002f040 	.word	0x0002f040

00016ab8 <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   16ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16aba:	b08b      	sub	sp, #44	; 0x2c
   16abc:	4604      	mov	r4, r0
   16abe:	460d      	mov	r5, r1
   16ac0:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   16ac2:	7803      	ldrb	r3, [r0, #0]
   16ac4:	2b03      	cmp	r3, #3
   16ac6:	d838      	bhi.n	16b3a <bt_addr_le_to_str+0x82>
   16ac8:	e8df f003 	tbb	[pc, r3]
   16acc:	312b2102 	.word	0x312b2102
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   16ad0:	4b1d      	ldr	r3, [pc, #116]	; (16b48 <bt_addr_le_to_str+0x90>)
   16ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
   16ad6:	9007      	str	r0, [sp, #28]
   16ad8:	f8ad 1020 	strh.w	r1, [sp, #32]
   16adc:	0c09      	lsrs	r1, r1, #16
   16ade:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   16ae2:	7963      	ldrb	r3, [r4, #5]
   16ae4:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   16ae6:	78e1      	ldrb	r1, [r4, #3]
   16ae8:	78a0      	ldrb	r0, [r4, #2]
   16aea:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16aec:	f10d 0c1c 	add.w	ip, sp, #28
   16af0:	f8cd c014 	str.w	ip, [sp, #20]
   16af4:	9704      	str	r7, [sp, #16]
   16af6:	9003      	str	r0, [sp, #12]
   16af8:	9102      	str	r1, [sp, #8]
   16afa:	9201      	str	r2, [sp, #4]
   16afc:	9300      	str	r3, [sp, #0]
   16afe:	79a3      	ldrb	r3, [r4, #6]
   16b00:	4a12      	ldr	r2, [pc, #72]	; (16b4c <bt_addr_le_to_str+0x94>)
   16b02:	4631      	mov	r1, r6
   16b04:	4628      	mov	r0, r5
   16b06:	f011 f853 	bl	27bb0 <snprintk>
}
   16b0a:	b00b      	add	sp, #44	; 0x2c
   16b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   16b0e:	4b10      	ldr	r3, [pc, #64]	; (16b50 <bt_addr_le_to_str+0x98>)
   16b10:	e893 0003 	ldmia.w	r3, {r0, r1}
   16b14:	9007      	str	r0, [sp, #28]
   16b16:	f8ad 1020 	strh.w	r1, [sp, #32]
   16b1a:	0c09      	lsrs	r1, r1, #16
   16b1c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   16b20:	e7df      	b.n	16ae2 <bt_addr_le_to_str+0x2a>
		strcpy(type, "public-id");
   16b22:	4a0c      	ldr	r2, [pc, #48]	; (16b54 <bt_addr_le_to_str+0x9c>)
   16b24:	ab07      	add	r3, sp, #28
   16b26:	ca07      	ldmia	r2, {r0, r1, r2}
   16b28:	c303      	stmia	r3!, {r0, r1}
   16b2a:	801a      	strh	r2, [r3, #0]
		break;
   16b2c:	e7d9      	b.n	16ae2 <bt_addr_le_to_str+0x2a>
		strcpy(type, "random-id");
   16b2e:	4a0a      	ldr	r2, [pc, #40]	; (16b58 <bt_addr_le_to_str+0xa0>)
   16b30:	ab07      	add	r3, sp, #28
   16b32:	ca07      	ldmia	r2, {r0, r1, r2}
   16b34:	c303      	stmia	r3!, {r0, r1}
   16b36:	801a      	strh	r2, [r3, #0]
		break;
   16b38:	e7d3      	b.n	16ae2 <bt_addr_le_to_str+0x2a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   16b3a:	4a08      	ldr	r2, [pc, #32]	; (16b5c <bt_addr_le_to_str+0xa4>)
   16b3c:	210a      	movs	r1, #10
   16b3e:	a807      	add	r0, sp, #28
   16b40:	f011 f836 	bl	27bb0 <snprintk>
		break;
   16b44:	e7cd      	b.n	16ae2 <bt_addr_le_to_str+0x2a>
   16b46:	bf00      	nop
   16b48:	0002feb4 	.word	0x0002feb4
   16b4c:	0002fec4 	.word	0x0002fec4
   16b50:	0002febc 	.word	0x0002febc
   16b54:	0002fee8 	.word	0x0002fee8
   16b58:	0002fef4 	.word	0x0002fef4
   16b5c:	00030d28 	.word	0x00030d28

00016b60 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16b60:	2940      	cmp	r1, #64	; 0x40
   16b62:	bf28      	it	cs
   16b64:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   16b66:	2300      	movs	r3, #0
   16b68:	428b      	cmp	r3, r1
   16b6a:	d21c      	bcs.n	16ba6 <bt_hex+0x46>
{
   16b6c:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   16b6e:	f810 c003 	ldrb.w	ip, [r0, r3]
   16b72:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   16b76:	005a      	lsls	r2, r3, #1
   16b78:	4d0d      	ldr	r5, [pc, #52]	; (16bb0 <bt_hex+0x50>)
   16b7a:	f815 c00c 	ldrb.w	ip, [r5, ip]
   16b7e:	4c0d      	ldr	r4, [pc, #52]	; (16bb4 <bt_hex+0x54>)
   16b80:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16b84:	f810 c003 	ldrb.w	ip, [r0, r3]
   16b88:	f00c 0c0f 	and.w	ip, ip, #15
   16b8c:	3201      	adds	r2, #1
   16b8e:	f815 500c 	ldrb.w	r5, [r5, ip]
   16b92:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   16b94:	3301      	adds	r3, #1
   16b96:	428b      	cmp	r3, r1
   16b98:	d3e9      	bcc.n	16b6e <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   16b9a:	4806      	ldr	r0, [pc, #24]	; (16bb4 <bt_hex+0x54>)
   16b9c:	2200      	movs	r2, #0
   16b9e:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   16ba2:	bc30      	pop	{r4, r5}
   16ba4:	4770      	bx	lr
	str[i * 2] = '\0';
   16ba6:	4803      	ldr	r0, [pc, #12]	; (16bb4 <bt_hex+0x54>)
   16ba8:	2200      	movs	r2, #0
   16baa:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   16bae:	4770      	bx	lr
   16bb0:	0002ff00 	.word	0x0002ff00
   16bb4:	200036c0 	.word	0x200036c0

00016bb8 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   16bb8:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   16bba:	4c03      	ldr	r4, [pc, #12]	; (16bc8 <bt_addr_le_str+0x10>)
   16bbc:	221e      	movs	r2, #30
   16bbe:	4621      	mov	r1, r4
   16bc0:	f7ff ff7a 	bl	16ab8 <bt_addr_le_to_str>

	return str;
}
   16bc4:	4620      	mov	r0, r4
   16bc6:	bd10      	pop	{r4, pc}
   16bc8:	200036a0 	.word	0x200036a0

00016bcc <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   16bcc:	b570      	push	{r4, r5, r6, lr}
   16bce:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16bd0:	ae02      	add	r6, sp, #8
   16bd2:	2400      	movs	r4, #0
   16bd4:	9402      	str	r4, [sp, #8]
   16bd6:	9403      	str	r4, [sp, #12]
   16bd8:	4b08      	ldr	r3, [pc, #32]	; (16bfc <long_wq_init+0x30>)
   16bda:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   16bdc:	4d08      	ldr	r5, [pc, #32]	; (16c00 <long_wq_init+0x34>)
   16bde:	4628      	mov	r0, r5
   16be0:	f016 fea3 	bl	2d92a <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16be4:	9600      	str	r6, [sp, #0]
   16be6:	230a      	movs	r3, #10
   16be8:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   16bec:	4905      	ldr	r1, [pc, #20]	; (16c04 <long_wq_init+0x38>)
   16bee:	4628      	mov	r0, r5
   16bf0:	f7fa fa4a 	bl	11088 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   16bf4:	4620      	mov	r0, r4
   16bf6:	b004      	add	sp, #16
   16bf8:	bd70      	pop	{r4, r5, r6, pc}
   16bfa:	bf00      	nop
   16bfc:	0002ff14 	.word	0x0002ff14
   16c00:	20001ec8 	.word	0x20001ec8
   16c04:	20004f00 	.word	0x20004f00

00016c08 <bt_long_wq_schedule>:
{
   16c08:	b508      	push	{r3, lr}
   16c0a:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   16c0c:	4801      	ldr	r0, [pc, #4]	; (16c14 <bt_long_wq_schedule+0xc>)
   16c0e:	f016 feaf 	bl	2d970 <k_work_schedule_for_queue>
}
   16c12:	bd08      	pop	{r3, pc}
   16c14:	20001ec8 	.word	0x20001ec8

00016c18 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16c18:	b510      	push	{r4, lr}
   16c1a:	4686      	mov	lr, r0
   16c1c:	468c      	mov	ip, r1
	switch (src->type) {
   16c1e:	7803      	ldrb	r3, [r0, #0]
   16c20:	2b01      	cmp	r3, #1
   16c22:	d018      	beq.n	16c56 <uuid_to_uuid128+0x3e>
   16c24:	2b02      	cmp	r3, #2
   16c26:	d032      	beq.n	16c8e <uuid_to_uuid128+0x76>
   16c28:	b103      	cbz	r3, 16c2c <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   16c2a:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   16c2c:	4c22      	ldr	r4, [pc, #136]	; (16cb8 <uuid_to_uuid128+0xa0>)
   16c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16c30:	f8cc 0000 	str.w	r0, [ip]
   16c34:	f8cc 1004 	str.w	r1, [ip, #4]
   16c38:	f8cc 2008 	str.w	r2, [ip, #8]
   16c3c:	f8cc 300c 	str.w	r3, [ip, #12]
   16c40:	7823      	ldrb	r3, [r4, #0]
   16c42:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   16c46:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16c4a:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   16c4e:	0a1b      	lsrs	r3, r3, #8
   16c50:	f88c 300e 	strb.w	r3, [ip, #14]
}
   16c54:	e7e9      	b.n	16c2a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   16c56:	4c18      	ldr	r4, [pc, #96]	; (16cb8 <uuid_to_uuid128+0xa0>)
   16c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16c5a:	f8cc 0000 	str.w	r0, [ip]
   16c5e:	f8cc 1004 	str.w	r1, [ip, #4]
   16c62:	f8cc 2008 	str.w	r2, [ip, #8]
   16c66:	f8cc 300c 	str.w	r3, [ip, #12]
   16c6a:	7823      	ldrb	r3, [r4, #0]
   16c6c:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   16c70:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   16c74:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   16c78:	f3c3 2207 	ubfx	r2, r3, #8, #8
   16c7c:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16c80:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16c82:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   16c86:	0e1b      	lsrs	r3, r3, #24
   16c88:	f88c 3010 	strb.w	r3, [ip, #16]
}
   16c8c:	e7cd      	b.n	16c2a <uuid_to_uuid128+0x12>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16c8e:	6800      	ldr	r0, [r0, #0]
   16c90:	f8de 1004 	ldr.w	r1, [lr, #4]
   16c94:	f8de 2008 	ldr.w	r2, [lr, #8]
   16c98:	f8de 300c 	ldr.w	r3, [lr, #12]
   16c9c:	f8cc 0000 	str.w	r0, [ip]
   16ca0:	f8cc 1004 	str.w	r1, [ip, #4]
   16ca4:	f8cc 2008 	str.w	r2, [ip, #8]
   16ca8:	f8cc 300c 	str.w	r3, [ip, #12]
   16cac:	f89e 3010 	ldrb.w	r3, [lr, #16]
   16cb0:	f88c 3010 	strb.w	r3, [ip, #16]
   16cb4:	e7b9      	b.n	16c2a <uuid_to_uuid128+0x12>
   16cb6:	bf00      	nop
   16cb8:	0002ff20 	.word	0x0002ff20

00016cbc <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   16cbc:	b538      	push	{r3, r4, r5, lr}
   16cbe:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16cc0:	4805      	ldr	r0, [pc, #20]	; (16cd8 <bt_buf_get_rx+0x1c>)
   16cc2:	f014 ffde 	bl	2bc82 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   16cc6:	4605      	mov	r5, r0
   16cc8:	b120      	cbz	r0, 16cd4 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   16cca:	2100      	movs	r1, #0
   16ccc:	300c      	adds	r0, #12
   16cce:	f014 ffe3 	bl	2bc98 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16cd2:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   16cd4:	4628      	mov	r0, r5
   16cd6:	bd38      	pop	{r3, r4, r5, pc}
   16cd8:	20000d14 	.word	0x20000d14

00016cdc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16cdc:	b510      	push	{r4, lr}
   16cde:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   16ce0:	4b0a      	ldr	r3, [pc, #40]	; (16d0c <bt_buf_get_cmd_complete+0x30>)
   16ce2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16ce6:	b158      	cbz	r0, 16d00 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   16ce8:	f015 f836 	bl	2bd58 <net_buf_ref>
   16cec:	4604      	mov	r4, r0
   16cee:	2301      	movs	r3, #1
   16cf0:	7603      	strb	r3, [r0, #24]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   16cf2:	2100      	movs	r1, #0
   16cf4:	8201      	strh	r1, [r0, #16]
   16cf6:	300c      	adds	r0, #12
   16cf8:	f014 ffce 	bl	2bc98 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16cfc:	4620      	mov	r0, r4
   16cfe:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16d00:	460b      	mov	r3, r1
   16d02:	2001      	movs	r0, #1
   16d04:	f7ff ffda 	bl	16cbc <bt_buf_get_rx>
   16d08:	4604      	mov	r4, r0
   16d0a:	e7f7      	b.n	16cfc <bt_buf_get_cmd_complete+0x20>
   16d0c:	20000388 	.word	0x20000388

00016d10 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16d10:	b510      	push	{r4, lr}
	switch (evt) {
   16d12:	280f      	cmp	r0, #15
   16d14:	d90d      	bls.n	16d32 <bt_buf_get_evt+0x22>
   16d16:	2813      	cmp	r0, #19
   16d18:	d10d      	bne.n	16d36 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   16d1a:	4814      	ldr	r0, [pc, #80]	; (16d6c <bt_buf_get_evt+0x5c>)
   16d1c:	f014 ffb1 	bl	2bc82 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   16d20:	4604      	mov	r4, r0
   16d22:	b198      	cbz	r0, 16d4c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16d24:	2100      	movs	r1, #0
   16d26:	300c      	adds	r0, #12
   16d28:	f014 ffb6 	bl	2bc98 <net_buf_simple_reserve>
   16d2c:	2301      	movs	r3, #1
   16d2e:	7623      	strb	r3, [r4, #24]
}
   16d30:	e00c      	b.n	16d4c <bt_buf_get_evt+0x3c>
	switch (evt) {
   16d32:	280e      	cmp	r0, #14
   16d34:	d205      	bcs.n	16d42 <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   16d36:	b959      	cbnz	r1, 16d50 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16d38:	2001      	movs	r0, #1
   16d3a:	f7ff ffbf 	bl	16cbc <bt_buf_get_rx>
   16d3e:	4604      	mov	r4, r0
   16d40:	e004      	b.n	16d4c <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   16d42:	4610      	mov	r0, r2
   16d44:	4619      	mov	r1, r3
   16d46:	f7ff ffc9 	bl	16cdc <bt_buf_get_cmd_complete>
   16d4a:	4604      	mov	r4, r0
	}
}
   16d4c:	4620      	mov	r0, r4
   16d4e:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   16d50:	4807      	ldr	r0, [pc, #28]	; (16d70 <bt_buf_get_evt+0x60>)
   16d52:	f014 ff96 	bl	2bc82 <net_buf_alloc_fixed>
			if (buf) {
   16d56:	4604      	mov	r4, r0
   16d58:	2800      	cmp	r0, #0
   16d5a:	d0f7      	beq.n	16d4c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16d5c:	2100      	movs	r1, #0
   16d5e:	300c      	adds	r0, #12
   16d60:	f014 ff9a 	bl	2bc98 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16d64:	2301      	movs	r3, #1
   16d66:	7623      	strb	r3, [r4, #24]
			return buf;
   16d68:	e7f0      	b.n	16d4c <bt_buf_get_evt+0x3c>
   16d6a:	bf00      	nop
   16d6c:	20000d40 	.word	0x20000d40
   16d70:	20000c90 	.word	0x20000c90

00016d74 <conn_handle_disconnected>:
	(void)memset(disconnected_handles, 0, sizeof(disconnected_handles));
}

static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16d74:	2300      	movs	r3, #0
   16d76:	b103      	cbz	r3, 16d7a <conn_handle_disconnected+0x6>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   16d78:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   16d7a:	4a05      	ldr	r2, [pc, #20]	; (16d90 <conn_handle_disconnected+0x1c>)
   16d7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16d80:	b922      	cbnz	r2, 16d8c <conn_handle_disconnected+0x18>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16d82:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   16d86:	4902      	ldr	r1, [pc, #8]	; (16d90 <conn_handle_disconnected+0x1c>)
   16d88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16d8c:	3301      	adds	r3, #1
   16d8e:	e7f2      	b.n	16d76 <conn_handle_disconnected+0x2>
   16d90:	20003744 	.word	0x20003744

00016d94 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   16d94:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16d98:	2300      	movs	r3, #0
   16d9a:	b10b      	cbz	r3, 16da0 <conn_handle_is_disconnected+0xc>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   16d9c:	2000      	movs	r0, #0
}
   16d9e:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   16da0:	4a06      	ldr	r2, [pc, #24]	; (16dbc <conn_handle_is_disconnected+0x28>)
   16da2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16da6:	4282      	cmp	r2, r0
   16da8:	d001      	beq.n	16dae <conn_handle_is_disconnected+0x1a>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16daa:	3301      	adds	r3, #1
   16dac:	e7f5      	b.n	16d9a <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   16dae:	4a03      	ldr	r2, [pc, #12]	; (16dbc <conn_handle_is_disconnected+0x28>)
   16db0:	2100      	movs	r1, #0
   16db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   16db6:	2001      	movs	r0, #1
   16db8:	4770      	bx	lr
   16dba:	bf00      	nop
   16dbc:	20003744 	.word	0x20003744

00016dc0 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   16dc0:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   16dc2:	7851      	ldrb	r1, [r2, #1]
   16dc4:	4b08      	ldr	r3, [pc, #32]	; (16de8 <read_local_ver_complete+0x28>)
   16dc6:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   16dca:	8851      	ldrh	r1, [r2, #2]
   16dcc:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   16dd0:	7911      	ldrb	r1, [r2, #4]
   16dd2:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   16dd6:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   16dda:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   16dde:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   16de2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   16de6:	4770      	bx	lr
   16de8:	20000388 	.word	0x20000388

00016dec <read_le_features_complete>:

static void read_le_features_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   16dec:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   16dee:	4b03      	ldr	r3, [pc, #12]	; (16dfc <read_le_features_complete+0x10>)
   16df0:	f8d2 0001 	ldr.w	r0, [r2, #1]
   16df4:	f8d2 1005 	ldr.w	r1, [r2, #5]
   16df8:	c303      	stmia	r3!, {r0, r1}
}
   16dfa:	4770      	bx	lr
   16dfc:	20000458 	.word	0x20000458

00016e00 <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
   16e00:	b530      	push	{r4, r5, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   16e02:	68c4      	ldr	r4, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
   16e04:	f104 0c01 	add.w	ip, r4, #1
   16e08:	4d09      	ldr	r5, [pc, #36]	; (16e30 <read_supported_commands_complete+0x30>)
   16e0a:	3441      	adds	r4, #65	; 0x41
   16e0c:	46ae      	mov	lr, r5
   16e0e:	f8dc 0000 	ldr.w	r0, [ip]
   16e12:	f8dc 1004 	ldr.w	r1, [ip, #4]
   16e16:	f8dc 2008 	ldr.w	r2, [ip, #8]
   16e1a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   16e1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   16e22:	f10c 0c10 	add.w	ip, ip, #16
   16e26:	4675      	mov	r5, lr
   16e28:	45a4      	cmp	ip, r4
   16e2a:	d1ef      	bne.n	16e0c <read_supported_commands_complete+0xc>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
   16e2c:	bd30      	pop	{r4, r5, pc}
   16e2e:	bf00      	nop
   16e30:	20000400 	.word	0x20000400

00016e34 <read_local_features_complete>:

static void read_local_features_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   16e34:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16e36:	4b03      	ldr	r3, [pc, #12]	; (16e44 <read_local_features_complete+0x10>)
   16e38:	f8d2 0001 	ldr.w	r0, [r2, #1]
   16e3c:	f8d2 1005 	ldr.w	r1, [r2, #5]
   16e40:	c303      	stmia	r3!, {r0, r1}
}
   16e42:	4770      	bx	lr
   16e44:	200003f8 	.word	0x200003f8

00016e48 <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
   16e48:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   16e4a:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   16e4c:	3001      	adds	r0, #1
   16e4e:	f012 fcd8 	bl	29802 <sys_get_le64>
   16e52:	4b02      	ldr	r3, [pc, #8]	; (16e5c <le_read_supp_states_complete+0x14>)
   16e54:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
}
   16e58:	bd08      	pop	{r3, pc}
   16e5a:	bf00      	nop
   16e5c:	20000388 	.word	0x20000388

00016e60 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   16e60:	68c3      	ldr	r3, [r0, #12]
   16e62:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   16e64:	b98b      	cbnz	r3, 16e8a <hci_reset_complete+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e66:	4b09      	ldr	r3, [pc, #36]	; (16e8c <hci_reset_complete+0x2c>)
   16e68:	f3bf 8f5b 	dmb	ish
   16e6c:	681a      	ldr	r2, [r3, #0]
   16e6e:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16e72:	f002 0209 	and.w	r2, r2, #9
   16e76:	f3bf 8f5b 	dmb	ish
   16e7a:	e853 1f00 	ldrex	r1, [r3]
   16e7e:	e843 2000 	strex	r0, r2, [r3]
   16e82:	2800      	cmp	r0, #0
   16e84:	d1f9      	bne.n	16e7a <hci_reset_complete+0x1a>
   16e86:	f3bf 8f5b 	dmb	ish
}
   16e8a:	4770      	bx	lr
   16e8c:	20000454 	.word	0x20000454

00016e90 <le_read_buffer_size_complete>:
{
   16e90:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   16e92:	68c2      	ldr	r2, [r0, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   16e94:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16e98:	b299      	uxth	r1, r3
   16e9a:	4806      	ldr	r0, [pc, #24]	; (16eb4 <le_read_buffer_size_complete+0x24>)
   16e9c:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   16ea0:	b901      	cbnz	r1, 16ea4 <le_read_buffer_size_complete+0x14>
}
   16ea2:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   16ea4:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16ea6:	460a      	mov	r2, r1
   16ea8:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16eac:	f016 fc2f 	bl	2d70e <z_impl_k_sem_init>
   16eb0:	e7f7      	b.n	16ea2 <le_read_buffer_size_complete+0x12>
   16eb2:	bf00      	nop
   16eb4:	20000388 	.word	0x20000388

00016eb8 <read_buffer_size_complete>:
{
   16eb8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   16eba:	68c2      	ldr	r2, [r0, #12]
	if (bt_dev.le.acl_mtu) {
   16ebc:	4b08      	ldr	r3, [pc, #32]	; (16ee0 <read_buffer_size_complete+0x28>)
   16ebe:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   16ec2:	b103      	cbz	r3, 16ec6 <read_buffer_size_complete+0xe>
}
   16ec4:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   16ec6:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16eca:	4805      	ldr	r0, [pc, #20]	; (16ee0 <read_buffer_size_complete+0x28>)
   16ecc:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   16ed0:	8891      	ldrh	r1, [r2, #4]
   16ed2:	460a      	mov	r2, r1
   16ed4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16ed8:	f016 fc19 	bl	2d70e <z_impl_k_sem_init>
   16edc:	e7f2      	b.n	16ec4 <read_buffer_size_complete+0xc>
   16ede:	bf00      	nop
   16ee0:	20000388 	.word	0x20000388

00016ee4 <hci_data_buf_overflow>:
{
   16ee4:	b5b0      	push	{r4, r5, r7, lr}
   16ee6:	b082      	sub	sp, #8
   16ee8:	af00      	add	r7, sp, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   16eea:	68c3      	ldr	r3, [r0, #12]
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16eec:	781c      	ldrb	r4, [r3, #0]
   16eee:	b088      	sub	sp, #32
   16ef0:	466b      	mov	r3, sp
   16ef2:	f113 0210 	adds.w	r2, r3, #16
   16ef6:	d031      	beq.n	16f5c <hci_data_buf_overflow+0x78>
   16ef8:	210c      	movs	r1, #12
   16efa:	b13a      	cbz	r2, 16f0c <hci_data_buf_overflow+0x28>
   16efc:	4608      	mov	r0, r1
   16efe:	2904      	cmp	r1, #4
   16f00:	dd01      	ble.n	16f06 <hci_data_buf_overflow+0x22>
   16f02:	4d19      	ldr	r5, [pc, #100]	; (16f68 <hci_data_buf_overflow+0x84>)
   16f04:	615d      	str	r5, [r3, #20]
   16f06:	2808      	cmp	r0, #8
   16f08:	dd00      	ble.n	16f0c <hci_data_buf_overflow+0x28>
   16f0a:	619c      	str	r4, [r3, #24]
   16f0c:	290b      	cmp	r1, #11
   16f0e:	dd28      	ble.n	16f62 <hci_data_buf_overflow+0x7e>
   16f10:	f04f 0c0c 	mov.w	ip, #12
   16f14:	b13a      	cbz	r2, 16f26 <hci_data_buf_overflow+0x42>
   16f16:	2103      	movs	r1, #3
   16f18:	7139      	strb	r1, [r7, #4]
   16f1a:	2100      	movs	r1, #0
   16f1c:	7179      	strb	r1, [r7, #5]
   16f1e:	71b9      	strb	r1, [r7, #6]
   16f20:	71f9      	strb	r1, [r7, #7]
   16f22:	6878      	ldr	r0, [r7, #4]
   16f24:	6118      	str	r0, [r3, #16]
   16f26:	2100      	movs	r1, #0
   16f28:	f36f 0100 	bfc	r1, #0, #1
   16f2c:	f36f 0141 	bfc	r1, #1, #1
   16f30:	f36f 0182 	bfc	r1, #2, #1
   16f34:	f36f 01c5 	bfc	r1, #3, #3
   16f38:	2302      	movs	r3, #2
   16f3a:	f363 1188 	bfi	r1, r3, #6, #3
   16f3e:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   16f42:	f36c 2152 	bfi	r1, ip, #9, #10
   16f46:	f36f 41de 	bfc	r1, #19, #12
   16f4a:	f36f 71df 	bfc	r1, #31, #1
   16f4e:	2300      	movs	r3, #0
   16f50:	4806      	ldr	r0, [pc, #24]	; (16f6c <hci_data_buf_overflow+0x88>)
   16f52:	f011 ff36 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   16f56:	3708      	adds	r7, #8
   16f58:	46bd      	mov	sp, r7
   16f5a:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16f5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16f60:	e7cb      	b.n	16efa <hci_data_buf_overflow+0x16>
   16f62:	f06f 0c1b 	mvn.w	ip, #27
   16f66:	e7d5      	b.n	16f14 <hci_data_buf_overflow+0x30>
   16f68:	0002ff64 	.word	0x0002ff64
   16f6c:	0002eea0 	.word	0x0002eea0

00016f70 <handle_event_common>:
{
   16f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f72:	b083      	sub	sp, #12
   16f74:	af00      	add	r7, sp, #0
   16f76:	4604      	mov	r4, r0
   16f78:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   16f7a:	f04f 0c00 	mov.w	ip, #0
   16f7e:	4563      	cmp	r3, ip
   16f80:	d955      	bls.n	1702e <handle_event_common+0xbe>
		const struct event_handler *handler = &handlers[i];
   16f82:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   16f86:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
   16f8a:	45a6      	cmp	lr, r4
   16f8c:	d109      	bne.n	16fa2 <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
   16f8e:	8a03      	ldrh	r3, [r0, #16]
   16f90:	784a      	ldrb	r2, [r1, #1]
   16f92:	4293      	cmp	r3, r2
   16f94:	d308      	bcc.n	16fa8 <handle_event_common+0x38>
		handler->handler(buf);
   16f96:	684b      	ldr	r3, [r1, #4]
   16f98:	4798      	blx	r3
		return 0;
   16f9a:	2000      	movs	r0, #0
}
   16f9c:	370c      	adds	r7, #12
   16f9e:	46bd      	mov	sp, r7
   16fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   16fa2:	f10c 0c01 	add.w	ip, ip, #1
   16fa6:	e7ea      	b.n	16f7e <handle_event_common+0xe>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   16fa8:	466d      	mov	r5, sp
   16faa:	b088      	sub	sp, #32
   16fac:	4669      	mov	r1, sp
   16fae:	f111 0210 	adds.w	r2, r1, #16
   16fb2:	d036      	beq.n	17022 <handle_event_common+0xb2>
   16fb4:	2010      	movs	r0, #16
   16fb6:	b162      	cbz	r2, 16fd2 <handle_event_common+0x62>
   16fb8:	4684      	mov	ip, r0
   16fba:	2804      	cmp	r0, #4
   16fbc:	dd01      	ble.n	16fc2 <handle_event_common+0x52>
   16fbe:	4e1d      	ldr	r6, [pc, #116]	; (17034 <handle_event_common+0xc4>)
   16fc0:	614e      	str	r6, [r1, #20]
   16fc2:	f1bc 0f08 	cmp.w	ip, #8
   16fc6:	dd00      	ble.n	16fca <handle_event_common+0x5a>
   16fc8:	618b      	str	r3, [r1, #24]
   16fca:	f1bc 0f0c 	cmp.w	ip, #12
   16fce:	dd00      	ble.n	16fd2 <handle_event_common+0x62>
   16fd0:	61cc      	str	r4, [r1, #28]
   16fd2:	280f      	cmp	r0, #15
   16fd4:	dd28      	ble.n	17028 <handle_event_common+0xb8>
   16fd6:	2310      	movs	r3, #16
   16fd8:	b13a      	cbz	r2, 16fea <handle_event_common+0x7a>
   16fda:	2004      	movs	r0, #4
   16fdc:	7138      	strb	r0, [r7, #4]
   16fde:	2000      	movs	r0, #0
   16fe0:	7178      	strb	r0, [r7, #5]
   16fe2:	71b8      	strb	r0, [r7, #6]
   16fe4:	71f8      	strb	r0, [r7, #7]
   16fe6:	6878      	ldr	r0, [r7, #4]
   16fe8:	6108      	str	r0, [r1, #16]
   16fea:	2100      	movs	r1, #0
   16fec:	f36f 0100 	bfc	r1, #0, #1
   16ff0:	f36f 0141 	bfc	r1, #1, #1
   16ff4:	f36f 0182 	bfc	r1, #2, #1
   16ff8:	f36f 01c5 	bfc	r1, #3, #3
   16ffc:	2001      	movs	r0, #1
   16ffe:	f360 1188 	bfi	r1, r0, #6, #3
   17002:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   17006:	f363 2152 	bfi	r1, r3, #9, #10
   1700a:	f36f 41de 	bfc	r1, #19, #12
   1700e:	f36f 71df 	bfc	r1, #31, #1
   17012:	2300      	movs	r3, #0
   17014:	4808      	ldr	r0, [pc, #32]	; (17038 <handle_event_common+0xc8>)
   17016:	f011 fed4 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1701a:	46ad      	mov	sp, r5
			return -EINVAL;
   1701c:	f06f 0015 	mvn.w	r0, #21
   17020:	e7bc      	b.n	16f9c <handle_event_common+0x2c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   17022:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   17026:	e7c6      	b.n	16fb6 <handle_event_common+0x46>
   17028:	f06f 031b 	mvn.w	r3, #27
   1702c:	e7d4      	b.n	16fd8 <handle_event_common+0x68>
	return -EOPNOTSUPP;
   1702e:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   17032:	e7b3      	b.n	16f9c <handle_event_common+0x2c>
   17034:	0002ff8c 	.word	0x0002ff8c
   17038:	0002eea0 	.word	0x0002eea0

0001703c <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1703c:	2801      	cmp	r0, #1
   1703e:	d001      	beq.n	17044 <find_pending_connect+0x8>
	return NULL;
   17040:	2000      	movs	r0, #0
}
   17042:	4770      	bx	lr
{
   17044:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   17046:	2205      	movs	r2, #5
   17048:	4b07      	ldr	r3, [pc, #28]	; (17068 <find_pending_connect+0x2c>)
   1704a:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   1704e:	f004 f809 	bl	1b064 <bt_conn_lookup_state_le>
		if (!conn) {
   17052:	b100      	cbz	r0, 17056 <find_pending_connect+0x1a>
}
   17054:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   17056:	2204      	movs	r2, #4
   17058:	4904      	ldr	r1, [pc, #16]	; (1706c <find_pending_connect+0x30>)
   1705a:	4b03      	ldr	r3, [pc, #12]	; (17068 <find_pending_connect+0x2c>)
   1705c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   17060:	f004 f800 	bl	1b064 <bt_conn_lookup_state_le>
		return conn;
   17064:	e7f6      	b.n	17054 <find_pending_connect+0x18>
   17066:	bf00      	nop
   17068:	20000388 	.word	0x20000388
   1706c:	0002fe94 	.word	0x0002fe94

00017070 <le_conn_complete_adv_timeout>:
{
   17070:	b510      	push	{r4, lr}
   17072:	b088      	sub	sp, #32
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17074:	f002 fef0 	bl	19e58 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   17078:	3010      	adds	r0, #16
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1707a:	f3bf 8f5b 	dmb	ish
   1707e:	e850 3f00 	ldrex	r3, [r0]
   17082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   17086:	e840 3200 	strex	r2, r3, [r0]
   1708a:	2a00      	cmp	r2, #0
   1708c:	d1f7      	bne.n	1707e <le_conn_complete_adv_timeout+0xe>
   1708e:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   17092:	2100      	movs	r1, #0
   17094:	2001      	movs	r0, #1
   17096:	f7ff ffd1 	bl	1703c <find_pending_connect>
		if (!conn) {
   1709a:	4604      	mov	r4, r0
   1709c:	b148      	cbz	r0, 170b2 <le_conn_complete_adv_timeout+0x42>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1709e:	233c      	movs	r3, #60	; 0x3c
   170a0:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   170a2:	2100      	movs	r1, #0
   170a4:	f003 fcea 	bl	1aa7c <bt_conn_set_state>
		bt_conn_unref(conn);
   170a8:	4620      	mov	r0, r4
   170aa:	f013 f8bf 	bl	2a22c <bt_conn_unref>
}
   170ae:	b008      	add	sp, #32
   170b0:	bd10      	pop	{r4, pc}
			LOG_ERR("No pending peripheral connection");
   170b2:	4b13      	ldr	r3, [pc, #76]	; (17100 <le_conn_complete_adv_timeout+0x90>)
   170b4:	9307      	str	r3, [sp, #28]
   170b6:	2302      	movs	r3, #2
   170b8:	f88d 3004 	strb.w	r3, [sp, #4]
   170bc:	2300      	movs	r3, #0
   170be:	f88d 3005 	strb.w	r3, [sp, #5]
   170c2:	f88d 3006 	strb.w	r3, [sp, #6]
   170c6:	f88d 3007 	strb.w	r3, [sp, #7]
   170ca:	9a01      	ldr	r2, [sp, #4]
   170cc:	9206      	str	r2, [sp, #24]
   170ce:	4619      	mov	r1, r3
   170d0:	f363 0100 	bfi	r1, r3, #0, #1
   170d4:	f363 0141 	bfi	r1, r3, #1, #1
   170d8:	f363 0182 	bfi	r1, r3, #2, #1
   170dc:	f363 01c5 	bfi	r1, r3, #3, #3
   170e0:	2201      	movs	r2, #1
   170e2:	f362 1188 	bfi	r1, r2, #6, #3
   170e6:	2208      	movs	r2, #8
   170e8:	f362 2152 	bfi	r1, r2, #9, #10
   170ec:	f363 41de 	bfi	r1, r3, #19, #12
   170f0:	f363 71df 	bfi	r1, r3, #31, #1
   170f4:	aa06      	add	r2, sp, #24
   170f6:	4803      	ldr	r0, [pc, #12]	; (17104 <le_conn_complete_adv_timeout+0x94>)
   170f8:	f011 fe63 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return;
   170fc:	e7d7      	b.n	170ae <le_conn_complete_adv_timeout+0x3e>
   170fe:	bf00      	nop
   17100:	0002ffb0 	.word	0x0002ffb0
   17104:	0002eea0 	.word	0x0002eea0

00017108 <hci_disconn_complete>:
{
   17108:	b5f0      	push	{r4, r5, r6, r7, lr}
   1710a:	b083      	sub	sp, #12
   1710c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1710e:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17110:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   17114:	7823      	ldrb	r3, [r4, #0]
   17116:	b113      	cbz	r3, 1711e <hci_disconn_complete+0x16>
}
   17118:	370c      	adds	r7, #12
   1711a:	46bd      	mov	sp, r7
   1711c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_handle(handle);
   1711e:	4630      	mov	r0, r6
   17120:	f003 fca2 	bl	1aa68 <bt_conn_lookup_handle>
	if (!conn) {
   17124:	4605      	mov	r5, r0
   17126:	b158      	cbz	r0, 17140 <hci_disconn_complete+0x38>
	conn->err = evt->reason;
   17128:	78e3      	ldrb	r3, [r4, #3]
   1712a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1712c:	2100      	movs	r1, #0
   1712e:	f003 fca5 	bl	1aa7c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   17132:	78ab      	ldrb	r3, [r5, #2]
   17134:	2b01      	cmp	r3, #1
   17136:	d03f      	beq.n	171b8 <hci_disconn_complete+0xb0>
		bt_conn_unref(conn);
   17138:	4628      	mov	r0, r5
   1713a:	f013 f877 	bl	2a22c <bt_conn_unref>
		return;
   1713e:	e7eb      	b.n	17118 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   17140:	466d      	mov	r5, sp
   17142:	b088      	sub	sp, #32
   17144:	466b      	mov	r3, sp
   17146:	f113 0210 	adds.w	r2, r3, #16
   1714a:	d02f      	beq.n	171ac <hci_disconn_complete+0xa4>
   1714c:	210c      	movs	r1, #12
   1714e:	b13a      	cbz	r2, 17160 <hci_disconn_complete+0x58>
   17150:	4608      	mov	r0, r1
   17152:	2904      	cmp	r1, #4
   17154:	dd01      	ble.n	1715a <hci_disconn_complete+0x52>
   17156:	4c1a      	ldr	r4, [pc, #104]	; (171c0 <hci_disconn_complete+0xb8>)
   17158:	615c      	str	r4, [r3, #20]
   1715a:	2808      	cmp	r0, #8
   1715c:	dd00      	ble.n	17160 <hci_disconn_complete+0x58>
   1715e:	619e      	str	r6, [r3, #24]
   17160:	290b      	cmp	r1, #11
   17162:	dd26      	ble.n	171b2 <hci_disconn_complete+0xaa>
   17164:	240c      	movs	r4, #12
   17166:	b13a      	cbz	r2, 17178 <hci_disconn_complete+0x70>
   17168:	2103      	movs	r1, #3
   1716a:	7139      	strb	r1, [r7, #4]
   1716c:	2100      	movs	r1, #0
   1716e:	7179      	strb	r1, [r7, #5]
   17170:	71b9      	strb	r1, [r7, #6]
   17172:	71f9      	strb	r1, [r7, #7]
   17174:	6878      	ldr	r0, [r7, #4]
   17176:	6118      	str	r0, [r3, #16]
   17178:	2100      	movs	r1, #0
   1717a:	f36f 0100 	bfc	r1, #0, #1
   1717e:	f36f 0141 	bfc	r1, #1, #1
   17182:	f36f 0182 	bfc	r1, #2, #1
   17186:	f36f 01c5 	bfc	r1, #3, #3
   1718a:	2301      	movs	r3, #1
   1718c:	f363 1188 	bfi	r1, r3, #6, #3
   17190:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   17194:	f363 2152 	bfi	r1, r3, #9, #10
   17198:	f36f 41de 	bfc	r1, #19, #12
   1719c:	f36f 71df 	bfc	r1, #31, #1
   171a0:	2300      	movs	r3, #0
   171a2:	4808      	ldr	r0, [pc, #32]	; (171c4 <hci_disconn_complete+0xbc>)
   171a4:	f011 fe0d 	bl	28dc2 <z_impl_z_log_msg_static_create>
   171a8:	46ad      	mov	sp, r5
		return;
   171aa:	e7b5      	b.n	17118 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   171ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   171b0:	e7cd      	b.n	1714e <hci_disconn_complete+0x46>
   171b2:	f06f 041b 	mvn.w	r4, #27
   171b6:	e7d6      	b.n	17166 <hci_disconn_complete+0x5e>
	bt_conn_unref(conn);
   171b8:	4628      	mov	r0, r5
   171ba:	f013 f837 	bl	2a22c <bt_conn_unref>
   171be:	e7ab      	b.n	17118 <hci_disconn_complete+0x10>
   171c0:	0002ffd4 	.word	0x0002ffd4
   171c4:	0002eea0 	.word	0x0002eea0

000171c8 <le_phy_update_complete>:
{
   171c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   171ca:	b083      	sub	sp, #12
   171cc:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   171ce:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   171d0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   171d4:	4620      	mov	r0, r4
   171d6:	f003 fc47 	bl	1aa68 <bt_conn_lookup_handle>
	if (!conn) {
   171da:	b120      	cbz	r0, 171e6 <le_phy_update_complete+0x1e>
	bt_conn_unref(conn);
   171dc:	f013 f826 	bl	2a22c <bt_conn_unref>
}
   171e0:	370c      	adds	r7, #12
   171e2:	46bd      	mov	sp, r7
   171e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   171e6:	466d      	mov	r5, sp
   171e8:	b088      	sub	sp, #32
   171ea:	466b      	mov	r3, sp
   171ec:	f113 0210 	adds.w	r2, r3, #16
   171f0:	d02f      	beq.n	17252 <le_phy_update_complete+0x8a>
   171f2:	210c      	movs	r1, #12
   171f4:	b13a      	cbz	r2, 17206 <le_phy_update_complete+0x3e>
   171f6:	4608      	mov	r0, r1
   171f8:	2904      	cmp	r1, #4
   171fa:	dd01      	ble.n	17200 <le_phy_update_complete+0x38>
   171fc:	4e18      	ldr	r6, [pc, #96]	; (17260 <le_phy_update_complete+0x98>)
   171fe:	615e      	str	r6, [r3, #20]
   17200:	2808      	cmp	r0, #8
   17202:	dd00      	ble.n	17206 <le_phy_update_complete+0x3e>
   17204:	619c      	str	r4, [r3, #24]
   17206:	290b      	cmp	r1, #11
   17208:	dd26      	ble.n	17258 <le_phy_update_complete+0x90>
   1720a:	240c      	movs	r4, #12
   1720c:	b13a      	cbz	r2, 1721e <le_phy_update_complete+0x56>
   1720e:	2103      	movs	r1, #3
   17210:	7139      	strb	r1, [r7, #4]
   17212:	2100      	movs	r1, #0
   17214:	7179      	strb	r1, [r7, #5]
   17216:	71b9      	strb	r1, [r7, #6]
   17218:	71f9      	strb	r1, [r7, #7]
   1721a:	6878      	ldr	r0, [r7, #4]
   1721c:	6118      	str	r0, [r3, #16]
   1721e:	2100      	movs	r1, #0
   17220:	f36f 0100 	bfc	r1, #0, #1
   17224:	f36f 0141 	bfc	r1, #1, #1
   17228:	f36f 0182 	bfc	r1, #2, #1
   1722c:	f36f 01c5 	bfc	r1, #3, #3
   17230:	2301      	movs	r3, #1
   17232:	f363 1188 	bfi	r1, r3, #6, #3
   17236:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1723a:	f363 2152 	bfi	r1, r3, #9, #10
   1723e:	f36f 41de 	bfc	r1, #19, #12
   17242:	f36f 71df 	bfc	r1, #31, #1
   17246:	2300      	movs	r3, #0
   17248:	4806      	ldr	r0, [pc, #24]	; (17264 <le_phy_update_complete+0x9c>)
   1724a:	f011 fdba 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1724e:	46ad      	mov	sp, r5
		return;
   17250:	e7c6      	b.n	171e0 <le_phy_update_complete+0x18>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17252:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17256:	e7cd      	b.n	171f4 <le_phy_update_complete+0x2c>
   17258:	f06f 041b 	mvn.w	r4, #27
   1725c:	e7d6      	b.n	1720c <le_phy_update_complete+0x44>
   1725e:	bf00      	nop
   17260:	0002fffc 	.word	0x0002fffc
   17264:	0002eea0 	.word	0x0002eea0

00017268 <le_data_len_change>:
{
   17268:	b5f0      	push	{r4, r5, r6, r7, lr}
   1726a:	b083      	sub	sp, #12
   1726c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1726e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17270:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   17272:	4620      	mov	r0, r4
   17274:	f003 fbf8 	bl	1aa68 <bt_conn_lookup_handle>
	if (!conn) {
   17278:	b120      	cbz	r0, 17284 <le_data_len_change+0x1c>
	bt_conn_unref(conn);
   1727a:	f012 ffd7 	bl	2a22c <bt_conn_unref>
}
   1727e:	370c      	adds	r7, #12
   17280:	46bd      	mov	sp, r7
   17282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17284:	466d      	mov	r5, sp
   17286:	b088      	sub	sp, #32
   17288:	466b      	mov	r3, sp
   1728a:	f113 0210 	adds.w	r2, r3, #16
   1728e:	d02f      	beq.n	172f0 <le_data_len_change+0x88>
   17290:	210c      	movs	r1, #12
   17292:	b13a      	cbz	r2, 172a4 <le_data_len_change+0x3c>
   17294:	4608      	mov	r0, r1
   17296:	2904      	cmp	r1, #4
   17298:	dd01      	ble.n	1729e <le_data_len_change+0x36>
   1729a:	4e18      	ldr	r6, [pc, #96]	; (172fc <le_data_len_change+0x94>)
   1729c:	615e      	str	r6, [r3, #20]
   1729e:	2808      	cmp	r0, #8
   172a0:	dd00      	ble.n	172a4 <le_data_len_change+0x3c>
   172a2:	619c      	str	r4, [r3, #24]
   172a4:	290b      	cmp	r1, #11
   172a6:	dd26      	ble.n	172f6 <le_data_len_change+0x8e>
   172a8:	240c      	movs	r4, #12
   172aa:	b13a      	cbz	r2, 172bc <le_data_len_change+0x54>
   172ac:	2103      	movs	r1, #3
   172ae:	7139      	strb	r1, [r7, #4]
   172b0:	2100      	movs	r1, #0
   172b2:	7179      	strb	r1, [r7, #5]
   172b4:	71b9      	strb	r1, [r7, #6]
   172b6:	71f9      	strb	r1, [r7, #7]
   172b8:	6878      	ldr	r0, [r7, #4]
   172ba:	6118      	str	r0, [r3, #16]
   172bc:	2100      	movs	r1, #0
   172be:	f36f 0100 	bfc	r1, #0, #1
   172c2:	f36f 0141 	bfc	r1, #1, #1
   172c6:	f36f 0182 	bfc	r1, #2, #1
   172ca:	f36f 01c5 	bfc	r1, #3, #3
   172ce:	2301      	movs	r3, #1
   172d0:	f363 1188 	bfi	r1, r3, #6, #3
   172d4:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   172d8:	f363 2152 	bfi	r1, r3, #9, #10
   172dc:	f36f 41de 	bfc	r1, #19, #12
   172e0:	f36f 71df 	bfc	r1, #31, #1
   172e4:	2300      	movs	r3, #0
   172e6:	4806      	ldr	r0, [pc, #24]	; (17300 <le_data_len_change+0x98>)
   172e8:	f011 fd6b 	bl	28dc2 <z_impl_z_log_msg_static_create>
   172ec:	46ad      	mov	sp, r5
		return;
   172ee:	e7c6      	b.n	1727e <le_data_len_change+0x16>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   172f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   172f4:	e7cd      	b.n	17292 <le_data_len_change+0x2a>
   172f6:	f06f 041b 	mvn.w	r4, #27
   172fa:	e7d6      	b.n	172aa <le_data_len_change+0x42>
   172fc:	0002fffc 	.word	0x0002fffc
   17300:	0002eea0 	.word	0x0002eea0

00017304 <hci_num_completed_packets>:
{
   17304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17308:	b089      	sub	sp, #36	; 0x24
   1730a:	af00      	add	r7, sp, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1730c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	for (i = 0; i < evt->num_handles; i++) {
   17310:	2600      	movs	r6, #0
   17312:	e09e      	b.n	17452 <hci_num_completed_packets+0x14e>
			LOG_ERR("No connection for handle %u", handle);
   17314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17318:	e0b3      	b.n	17482 <hci_num_completed_packets+0x17e>
   1731a:	f06f 011b 	mvn.w	r1, #27
   1731e:	b13a      	cbz	r2, 17330 <hci_num_completed_packets+0x2c>
   17320:	2003      	movs	r0, #3
   17322:	7138      	strb	r0, [r7, #4]
   17324:	2000      	movs	r0, #0
   17326:	7178      	strb	r0, [r7, #5]
   17328:	71b8      	strb	r0, [r7, #6]
   1732a:	71f8      	strb	r0, [r7, #7]
   1732c:	6878      	ldr	r0, [r7, #4]
   1732e:	6118      	str	r0, [r3, #16]
   17330:	f36f 0800 	bfc	r8, #0, #1
   17334:	f36f 0841 	bfc	r8, #1, #1
   17338:	f36f 0882 	bfc	r8, #2, #1
   1733c:	f36f 08c5 	bfc	r8, #3, #3
   17340:	2301      	movs	r3, #1
   17342:	f363 1888 	bfi	r8, r3, #6, #3
   17346:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
   1734a:	f361 2852 	bfi	r8, r1, #9, #10
   1734e:	f36f 48de 	bfc	r8, #19, #12
   17352:	f36f 78df 	bfc	r8, #31, #1
   17356:	2300      	movs	r3, #0
   17358:	4641      	mov	r1, r8
   1735a:	4856      	ldr	r0, [pc, #344]	; (174b4 <hci_num_completed_packets+0x1b0>)
   1735c:	f011 fd31 	bl	28dc2 <z_impl_z_log_msg_static_create>
   17360:	46a5      	mov	sp, r4
			continue;
   17362:	e075      	b.n	17450 <hci_num_completed_packets+0x14c>
			LOG_ERR("No connection for handle %u", handle);
   17364:	f06f 011b 	mvn.w	r1, #27
   17368:	e7d9      	b.n	1731e <hci_num_completed_packets+0x1a>
				conn->pending_no_cb--;
   1736a:	3b01      	subs	r3, #1
   1736c:	61e3      	str	r3, [r4, #28]
   1736e:	f382 8811 	msr	BASEPRI, r2
   17372:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   17376:	4620      	mov	r0, r4
   17378:	f003 f852 	bl	1a420 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1737c:	f00a ff84 	bl	22288 <z_impl_k_sem_give>
				continue;
   17380:	e024      	b.n	173cc <hci_num_completed_packets+0xc8>
   17382:	f382 8811 	msr	BASEPRI, r2
   17386:	f3bf 8f6f 	isb	sy
			if (!node) {
   1738a:	2b00      	cmp	r3, #0
   1738c:	d03b      	beq.n	17406 <hci_num_completed_packets+0x102>
	__asm__ volatile(
   1738e:	f04f 0140 	mov.w	r1, #64	; 0x40
   17392:	f3ef 8211 	mrs	r2, BASEPRI
   17396:	f381 8812 	msr	BASEPRI_MAX, r1
   1739a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1739e:	68d9      	ldr	r1, [r3, #12]
   173a0:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   173a2:	2100      	movs	r1, #0
   173a4:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   173a6:	6019      	str	r1, [r3, #0]
	return list->tail;
   173a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   173aa:	2900      	cmp	r1, #0
   173ac:	d07a      	beq.n	174a4 <hci_num_completed_packets+0x1a0>
	parent->next = child;
   173ae:	600b      	str	r3, [r1, #0]
	list->tail = node;
   173b0:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   173b2:	f382 8811 	msr	BASEPRI, r2
   173b6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   173ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
   173be:	f00b f8e5 	bl	2258c <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   173c2:	4620      	mov	r0, r4
   173c4:	f003 f82c 	bl	1a420 <bt_conn_get_pkts>
   173c8:	f00a ff5e 	bl	22288 <z_impl_k_sem_give>
			LOG_ERR("No connection for handle %u", handle);
   173cc:	46ab      	mov	fp, r5
		while (count--) {
   173ce:	f10b 35ff 	add.w	r5, fp, #4294967295
   173d2:	b2ad      	uxth	r5, r5
   173d4:	f1bb 0f00 	cmp.w	fp, #0
   173d8:	d037      	beq.n	1744a <hci_num_completed_packets+0x146>
	__asm__ volatile(
   173da:	f04f 0240 	mov.w	r2, #64	; 0x40
   173de:	f3ef 8311 	mrs	r3, BASEPRI
   173e2:	f382 8812 	msr	BASEPRI_MAX, r2
   173e6:	f3bf 8f6f 	isb	sy
   173ea:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   173ec:	69e3      	ldr	r3, [r4, #28]
   173ee:	2b00      	cmp	r3, #0
   173f0:	d1bb      	bne.n	1736a <hci_num_completed_packets+0x66>
	return list->head;
   173f2:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   173f4:	2b00      	cmp	r3, #0
   173f6:	d0c4      	beq.n	17382 <hci_num_completed_packets+0x7e>
	return node->next;
   173f8:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   173fa:	6161      	str	r1, [r4, #20]
	return list->tail;
   173fc:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   173fe:	4283      	cmp	r3, r0
   17400:	d1bf      	bne.n	17382 <hci_num_completed_packets+0x7e>
	list->tail = node;
   17402:	61a1      	str	r1, [r4, #24]
}
   17404:	e7bd      	b.n	17382 <hci_num_completed_packets+0x7e>
				LOG_ERR("packets count mismatch");
   17406:	4b2c      	ldr	r3, [pc, #176]	; (174b8 <hci_num_completed_packets+0x1b4>)
   17408:	61fb      	str	r3, [r7, #28]
   1740a:	2302      	movs	r3, #2
   1740c:	713b      	strb	r3, [r7, #4]
   1740e:	2300      	movs	r3, #0
   17410:	717b      	strb	r3, [r7, #5]
   17412:	71bb      	strb	r3, [r7, #6]
   17414:	71fb      	strb	r3, [r7, #7]
   17416:	687a      	ldr	r2, [r7, #4]
   17418:	61ba      	str	r2, [r7, #24]
   1741a:	f363 0900 	bfi	r9, r3, #0, #1
   1741e:	f363 0941 	bfi	r9, r3, #1, #1
   17422:	f363 0982 	bfi	r9, r3, #2, #1
   17426:	f363 09c5 	bfi	r9, r3, #3, #3
   1742a:	2201      	movs	r2, #1
   1742c:	f362 1988 	bfi	r9, r2, #6, #3
   17430:	2208      	movs	r2, #8
   17432:	f362 2952 	bfi	r9, r2, #9, #10
   17436:	f363 49de 	bfi	r9, r3, #19, #12
   1743a:	f363 79df 	bfi	r9, r3, #31, #1
   1743e:	f107 0218 	add.w	r2, r7, #24
   17442:	4649      	mov	r1, r9
   17444:	481b      	ldr	r0, [pc, #108]	; (174b4 <hci_num_completed_packets+0x1b0>)
   17446:	f011 fcbc 	bl	28dc2 <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
   1744a:	4620      	mov	r0, r4
   1744c:	f012 feee 	bl	2a22c <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   17450:	3601      	adds	r6, #1
   17452:	f89a 3000 	ldrb.w	r3, [sl]
   17456:	429e      	cmp	r6, r3
   17458:	da27      	bge.n	174aa <hci_num_completed_packets+0x1a6>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1745a:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
   1745e:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17462:	f8b3 b003 	ldrh.w	fp, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17466:	4628      	mov	r0, r5
   17468:	f003 fafe 	bl	1aa68 <bt_conn_lookup_handle>
		if (!conn) {
   1746c:	4604      	mov	r4, r0
   1746e:	2800      	cmp	r0, #0
   17470:	d1ad      	bne.n	173ce <hci_num_completed_packets+0xca>
			LOG_ERR("No connection for handle %u", handle);
   17472:	466c      	mov	r4, sp
   17474:	b088      	sub	sp, #32
   17476:	466b      	mov	r3, sp
   17478:	f113 0210 	adds.w	r2, r3, #16
   1747c:	f43f af4a 	beq.w	17314 <hci_num_completed_packets+0x10>
   17480:	210c      	movs	r1, #12
   17482:	b152      	cbz	r2, 1749a <hci_num_completed_packets+0x196>
   17484:	4608      	mov	r0, r1
   17486:	2904      	cmp	r1, #4
   17488:	dd03      	ble.n	17492 <hci_num_completed_packets+0x18e>
   1748a:	f8df c030 	ldr.w	ip, [pc, #48]	; 174bc <hci_num_completed_packets+0x1b8>
   1748e:	f8c3 c014 	str.w	ip, [r3, #20]
   17492:	2808      	cmp	r0, #8
   17494:	f77f af41 	ble.w	1731a <hci_num_completed_packets+0x16>
   17498:	619d      	str	r5, [r3, #24]
   1749a:	290b      	cmp	r1, #11
   1749c:	f77f af62 	ble.w	17364 <hci_num_completed_packets+0x60>
   174a0:	210c      	movs	r1, #12
   174a2:	e73c      	b.n	1731e <hci_num_completed_packets+0x1a>
	list->tail = node;
   174a4:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   174a6:	6223      	str	r3, [r4, #32]
}
   174a8:	e783      	b.n	173b2 <hci_num_completed_packets+0xae>
}
   174aa:	3724      	adds	r7, #36	; 0x24
   174ac:	46bd      	mov	sp, r7
   174ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174b2:	bf00      	nop
   174b4:	0002eea0 	.word	0x0002eea0
   174b8:	0003003c 	.word	0x0003003c
   174bc:	00030020 	.word	0x00030020

000174c0 <hci_cmd_done>:
{
   174c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174c4:	b082      	sub	sp, #8
   174c6:	af00      	add	r7, sp, #0
   174c8:	4605      	mov	r5, r0
   174ca:	460e      	mov	r6, r1
   174cc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   174ce:	7a90      	ldrb	r0, [r2, #10]
   174d0:	f006 ff4e 	bl	1e370 <net_buf_pool_get>
   174d4:	4b75      	ldr	r3, [pc, #468]	; (176ac <hci_cmd_done+0x1ec>)
   174d6:	4283      	cmp	r3, r0
   174d8:	d050      	beq.n	1757c <hci_cmd_done+0xbc>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   174da:	f894 800a 	ldrb.w	r8, [r4, #10]
   174de:	4640      	mov	r0, r8
   174e0:	f006 ff46 	bl	1e370 <net_buf_pool_get>
   174e4:	466e      	mov	r6, sp
   174e6:	b08a      	sub	sp, #40	; 0x28
   174e8:	466b      	mov	r3, sp
   174ea:	f113 0210 	adds.w	r2, r3, #16
   174ee:	d03f      	beq.n	17570 <hci_cmd_done+0xb0>
   174f0:	2418      	movs	r4, #24
   174f2:	b1a2      	cbz	r2, 1751e <hci_cmd_done+0x5e>
   174f4:	4621      	mov	r1, r4
   174f6:	2c04      	cmp	r4, #4
   174f8:	dd03      	ble.n	17502 <hci_cmd_done+0x42>
   174fa:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 176bc <hci_cmd_done+0x1fc>
   174fe:	f8c3 c014 	str.w	ip, [r3, #20]
   17502:	2908      	cmp	r1, #8
   17504:	dd00      	ble.n	17508 <hci_cmd_done+0x48>
   17506:	619d      	str	r5, [r3, #24]
   17508:	290c      	cmp	r1, #12
   1750a:	dd01      	ble.n	17510 <hci_cmd_done+0x50>
   1750c:	f8c3 801c 	str.w	r8, [r3, #28]
   17510:	2910      	cmp	r1, #16
   17512:	dd00      	ble.n	17516 <hci_cmd_done+0x56>
   17514:	6218      	str	r0, [r3, #32]
   17516:	2914      	cmp	r1, #20
   17518:	dd01      	ble.n	1751e <hci_cmd_done+0x5e>
   1751a:	4964      	ldr	r1, [pc, #400]	; (176ac <hci_cmd_done+0x1ec>)
   1751c:	6259      	str	r1, [r3, #36]	; 0x24
   1751e:	2c17      	cmp	r4, #23
   17520:	dd29      	ble.n	17576 <hci_cmd_done+0xb6>
   17522:	2418      	movs	r4, #24
   17524:	b13a      	cbz	r2, 17536 <hci_cmd_done+0x76>
   17526:	2106      	movs	r1, #6
   17528:	7139      	strb	r1, [r7, #4]
   1752a:	2100      	movs	r1, #0
   1752c:	7179      	strb	r1, [r7, #5]
   1752e:	71b9      	strb	r1, [r7, #6]
   17530:	71f9      	strb	r1, [r7, #7]
   17532:	6878      	ldr	r0, [r7, #4]
   17534:	6118      	str	r0, [r3, #16]
   17536:	2100      	movs	r1, #0
   17538:	f36f 0100 	bfc	r1, #0, #1
   1753c:	f36f 0141 	bfc	r1, #1, #1
   17540:	f36f 0182 	bfc	r1, #2, #1
   17544:	f36f 01c5 	bfc	r1, #3, #3
   17548:	2302      	movs	r3, #2
   1754a:	f363 1188 	bfi	r1, r3, #6, #3
   1754e:	f404 747f 	and.w	r4, r4, #1020	; 0x3fc
   17552:	f364 2152 	bfi	r1, r4, #9, #10
   17556:	f36f 41de 	bfc	r1, #19, #12
   1755a:	f36f 71df 	bfc	r1, #31, #1
   1755e:	2300      	movs	r3, #0
   17560:	4853      	ldr	r0, [pc, #332]	; (176b0 <hci_cmd_done+0x1f0>)
   17562:	f011 fc2e 	bl	28dc2 <z_impl_z_log_msg_static_create>
   17566:	46b5      	mov	sp, r6
}
   17568:	3708      	adds	r7, #8
   1756a:	46bd      	mov	sp, r7
   1756c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   17570:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   17574:	e7bd      	b.n	174f2 <hci_cmd_done+0x32>
   17576:	f06f 041b 	mvn.w	r4, #27
   1757a:	e7d3      	b.n	17524 <hci_cmd_done+0x64>
	if (cmd(buf)->opcode != opcode) {
   1757c:	4620      	mov	r0, r4
   1757e:	f014 fadd 	bl	2bb3c <net_buf_id>
   17582:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17586:	4b4b      	ldr	r3, [pc, #300]	; (176b4 <hci_cmd_done+0x1f4>)
   17588:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1758c:	885b      	ldrh	r3, [r3, #2]
   1758e:	429d      	cmp	r5, r3
   17590:	d133      	bne.n	175fa <hci_cmd_done+0x13a>
	if (bt_dev.sent_cmd) {
   17592:	4b49      	ldr	r3, [pc, #292]	; (176b8 <hci_cmd_done+0x1f8>)
   17594:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   17598:	b128      	cbz	r0, 175a6 <hci_cmd_done+0xe6>
		net_buf_unref(bt_dev.sent_cmd);
   1759a:	f014 fbba 	bl	2bd12 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1759e:	4b46      	ldr	r3, [pc, #280]	; (176b8 <hci_cmd_done+0x1f8>)
   175a0:	2200      	movs	r2, #0
   175a2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   175a6:	4620      	mov	r0, r4
   175a8:	f014 fac8 	bl	2bb3c <net_buf_id>
   175ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   175b0:	4b40      	ldr	r3, [pc, #256]	; (176b4 <hci_cmd_done+0x1f4>)
   175b2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   175b6:	685b      	ldr	r3, [r3, #4]
   175b8:	b10b      	cbz	r3, 175be <hci_cmd_done+0xfe>
   175ba:	2e00      	cmp	r6, #0
   175bc:	d067      	beq.n	1768e <hci_cmd_done+0x1ce>
	if (cmd(buf)->sync) {
   175be:	4620      	mov	r0, r4
   175c0:	f014 fabc 	bl	2bb3c <net_buf_id>
   175c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   175c8:	4b3a      	ldr	r3, [pc, #232]	; (176b4 <hci_cmd_done+0x1f4>)
   175ca:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   175ce:	689b      	ldr	r3, [r3, #8]
   175d0:	2b00      	cmp	r3, #0
   175d2:	d0c9      	beq.n	17568 <hci_cmd_done+0xa8>
		cmd(buf)->status = status;
   175d4:	4620      	mov	r0, r4
   175d6:	f014 fab1 	bl	2bb3c <net_buf_id>
   175da:	4d36      	ldr	r5, [pc, #216]	; (176b4 <hci_cmd_done+0x1f4>)
   175dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   175e0:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   175e4:	4620      	mov	r0, r4
   175e6:	f014 faa9 	bl	2bb3c <net_buf_id>
   175ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   175ee:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   175f2:	68a8      	ldr	r0, [r5, #8]
   175f4:	f00a fe48 	bl	22288 <z_impl_k_sem_give>
}
   175f8:	e7b6      	b.n	17568 <hci_cmd_done+0xa8>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   175fa:	4620      	mov	r0, r4
   175fc:	f014 fa9e 	bl	2bb3c <net_buf_id>
   17600:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17604:	4b2b      	ldr	r3, [pc, #172]	; (176b4 <hci_cmd_done+0x1f4>)
   17606:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1760a:	885c      	ldrh	r4, [r3, #2]
   1760c:	466e      	mov	r6, sp
   1760e:	b088      	sub	sp, #32
   17610:	466b      	mov	r3, sp
   17612:	f113 0210 	adds.w	r2, r3, #16
   17616:	d034      	beq.n	17682 <hci_cmd_done+0x1c2>
   17618:	2110      	movs	r1, #16
   1761a:	b162      	cbz	r2, 17636 <hci_cmd_done+0x176>
   1761c:	4608      	mov	r0, r1
   1761e:	2904      	cmp	r1, #4
   17620:	dd03      	ble.n	1762a <hci_cmd_done+0x16a>
   17622:	f8df c09c 	ldr.w	ip, [pc, #156]	; 176c0 <hci_cmd_done+0x200>
   17626:	f8c3 c014 	str.w	ip, [r3, #20]
   1762a:	2808      	cmp	r0, #8
   1762c:	dd00      	ble.n	17630 <hci_cmd_done+0x170>
   1762e:	619d      	str	r5, [r3, #24]
   17630:	280c      	cmp	r0, #12
   17632:	dd00      	ble.n	17636 <hci_cmd_done+0x176>
   17634:	61dc      	str	r4, [r3, #28]
   17636:	290f      	cmp	r1, #15
   17638:	dd26      	ble.n	17688 <hci_cmd_done+0x1c8>
   1763a:	2410      	movs	r4, #16
   1763c:	b13a      	cbz	r2, 1764e <hci_cmd_done+0x18e>
   1763e:	2104      	movs	r1, #4
   17640:	7139      	strb	r1, [r7, #4]
   17642:	2100      	movs	r1, #0
   17644:	7179      	strb	r1, [r7, #5]
   17646:	71b9      	strb	r1, [r7, #6]
   17648:	71f9      	strb	r1, [r7, #7]
   1764a:	6878      	ldr	r0, [r7, #4]
   1764c:	6118      	str	r0, [r3, #16]
   1764e:	2100      	movs	r1, #0
   17650:	f36f 0100 	bfc	r1, #0, #1
   17654:	f36f 0141 	bfc	r1, #1, #1
   17658:	f36f 0182 	bfc	r1, #2, #1
   1765c:	f36f 01c5 	bfc	r1, #3, #3
   17660:	2302      	movs	r3, #2
   17662:	f363 1188 	bfi	r1, r3, #6, #3
   17666:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   1766a:	f363 2152 	bfi	r1, r3, #9, #10
   1766e:	f36f 41de 	bfc	r1, #19, #12
   17672:	f36f 71df 	bfc	r1, #31, #1
   17676:	2300      	movs	r3, #0
   17678:	480d      	ldr	r0, [pc, #52]	; (176b0 <hci_cmd_done+0x1f0>)
   1767a:	f011 fba2 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1767e:	46b5      	mov	sp, r6
		return;
   17680:	e772      	b.n	17568 <hci_cmd_done+0xa8>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   17682:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17686:	e7c8      	b.n	1761a <hci_cmd_done+0x15a>
   17688:	f06f 041b 	mvn.w	r4, #27
   1768c:	e7d6      	b.n	1763c <hci_cmd_done+0x17c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1768e:	4620      	mov	r0, r4
   17690:	f014 fa54 	bl	2bb3c <net_buf_id>
   17694:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17698:	4b06      	ldr	r3, [pc, #24]	; (176b4 <hci_cmd_done+0x1f4>)
   1769a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1769e:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   176a0:	7a1a      	ldrb	r2, [r3, #8]
   176a2:	6859      	ldr	r1, [r3, #4]
   176a4:	6818      	ldr	r0, [r3, #0]
   176a6:	f012 f90e 	bl	298c6 <atomic_set_bit_to>
   176aa:	e788      	b.n	175be <hci_cmd_done+0xfe>
   176ac:	20000ce8 	.word	0x20000ce8
   176b0:	0002eea0 	.word	0x0002eea0
   176b4:	20003748 	.word	0x20003748
   176b8:	20000388 	.word	0x20000388
   176bc:	00030054 	.word	0x00030054
   176c0:	0003008c 	.word	0x0003008c

000176c4 <le_remote_feat_complete>:
{
   176c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   176c6:	b083      	sub	sp, #12
   176c8:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   176ca:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   176cc:	f8b4 5001 	ldrh.w	r5, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   176d0:	4628      	mov	r0, r5
   176d2:	f003 f9c9 	bl	1aa68 <bt_conn_lookup_handle>
	if (!conn) {
   176d6:	b1e8      	cbz	r0, 17714 <le_remote_feat_complete+0x50>
   176d8:	4603      	mov	r3, r0
	if (!evt->status) {
   176da:	7822      	ldrb	r2, [r4, #0]
   176dc:	b93a      	cbnz	r2, 176ee <le_remote_feat_complete+0x2a>
   176de:	f8d4 1003 	ldr.w	r1, [r4, #3]
   176e2:	f8d4 2007 	ldr.w	r2, [r4, #7]
   176e6:	f8c0 10ad 	str.w	r1, [r0, #173]	; 0xad
   176ea:	f8c0 20b1 	str.w	r2, [r0, #177]	; 0xb1
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   176ee:	1d1a      	adds	r2, r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   176f0:	f3bf 8f5b 	dmb	ish
   176f4:	e852 0f00 	ldrex	r0, [r2]
   176f8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   176fc:	e842 0100 	strex	r1, r0, [r2]
   17700:	2900      	cmp	r1, #0
   17702:	d1f7      	bne.n	176f4 <le_remote_feat_complete+0x30>
   17704:	f3bf 8f5b 	dmb	ish
	bt_conn_unref(conn);
   17708:	4618      	mov	r0, r3
   1770a:	f012 fd8f 	bl	2a22c <bt_conn_unref>
}
   1770e:	370c      	adds	r7, #12
   17710:	46bd      	mov	sp, r7
   17712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17714:	466e      	mov	r6, sp
   17716:	b088      	sub	sp, #32
   17718:	466b      	mov	r3, sp
   1771a:	f113 0210 	adds.w	r2, r3, #16
   1771e:	d02f      	beq.n	17780 <le_remote_feat_complete+0xbc>
   17720:	210c      	movs	r1, #12
   17722:	b13a      	cbz	r2, 17734 <le_remote_feat_complete+0x70>
   17724:	4608      	mov	r0, r1
   17726:	2904      	cmp	r1, #4
   17728:	dd01      	ble.n	1772e <le_remote_feat_complete+0x6a>
   1772a:	4c18      	ldr	r4, [pc, #96]	; (1778c <le_remote_feat_complete+0xc8>)
   1772c:	615c      	str	r4, [r3, #20]
   1772e:	2808      	cmp	r0, #8
   17730:	dd00      	ble.n	17734 <le_remote_feat_complete+0x70>
   17732:	619d      	str	r5, [r3, #24]
   17734:	290b      	cmp	r1, #11
   17736:	dd26      	ble.n	17786 <le_remote_feat_complete+0xc2>
   17738:	240c      	movs	r4, #12
   1773a:	b13a      	cbz	r2, 1774c <le_remote_feat_complete+0x88>
   1773c:	2103      	movs	r1, #3
   1773e:	7139      	strb	r1, [r7, #4]
   17740:	2100      	movs	r1, #0
   17742:	7179      	strb	r1, [r7, #5]
   17744:	71b9      	strb	r1, [r7, #6]
   17746:	71f9      	strb	r1, [r7, #7]
   17748:	6878      	ldr	r0, [r7, #4]
   1774a:	6118      	str	r0, [r3, #16]
   1774c:	2100      	movs	r1, #0
   1774e:	f36f 0100 	bfc	r1, #0, #1
   17752:	f36f 0141 	bfc	r1, #1, #1
   17756:	f36f 0182 	bfc	r1, #2, #1
   1775a:	f36f 01c5 	bfc	r1, #3, #3
   1775e:	2301      	movs	r3, #1
   17760:	f363 1188 	bfi	r1, r3, #6, #3
   17764:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   17768:	f364 2152 	bfi	r1, r4, #9, #10
   1776c:	f36f 41de 	bfc	r1, #19, #12
   17770:	f36f 71df 	bfc	r1, #31, #1
   17774:	2300      	movs	r3, #0
   17776:	4806      	ldr	r0, [pc, #24]	; (17790 <le_remote_feat_complete+0xcc>)
   17778:	f011 fb23 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1777c:	46b5      	mov	sp, r6
		return;
   1777e:	e7c6      	b.n	1770e <le_remote_feat_complete+0x4a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17784:	e7cd      	b.n	17722 <le_remote_feat_complete+0x5e>
   17786:	f06f 041b 	mvn.w	r4, #27
   1778a:	e7d6      	b.n	1773a <le_remote_feat_complete+0x76>
   1778c:	0002fffc 	.word	0x0002fffc
   17790:	0002eea0 	.word	0x0002eea0

00017794 <hci_cmd_status>:
{
   17794:	b538      	push	{r3, r4, r5, lr}
   17796:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   17798:	2104      	movs	r1, #4
   1779a:	300c      	adds	r0, #12
   1779c:	f014 fb28 	bl	2bdf0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   177a0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   177a2:	4622      	mov	r2, r4
   177a4:	7801      	ldrb	r1, [r0, #0]
   177a6:	8840      	ldrh	r0, [r0, #2]
   177a8:	f7ff fe8a 	bl	174c0 <hci_cmd_done>
	if (ncmd) {
   177ac:	b905      	cbnz	r5, 177b0 <hci_cmd_status+0x1c>
}
   177ae:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   177b0:	4801      	ldr	r0, [pc, #4]	; (177b8 <hci_cmd_status+0x24>)
   177b2:	f00a fd69 	bl	22288 <z_impl_k_sem_give>
   177b6:	e7fa      	b.n	177ae <hci_cmd_status+0x1a>
   177b8:	200004a0 	.word	0x200004a0

000177bc <hci_cmd_complete>:
{
   177bc:	b538      	push	{r3, r4, r5, lr}
   177be:	4604      	mov	r4, r0
   177c0:	2103      	movs	r1, #3
   177c2:	300c      	adds	r0, #12
   177c4:	f014 fb14 	bl	2bdf0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   177c8:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   177ca:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
   177cc:	4622      	mov	r2, r4
   177ce:	7819      	ldrb	r1, [r3, #0]
   177d0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   177d4:	f7ff fe74 	bl	174c0 <hci_cmd_done>
	if (ncmd) {
   177d8:	b905      	cbnz	r5, 177dc <hci_cmd_complete+0x20>
}
   177da:	bd38      	pop	{r3, r4, r5, pc}
   177dc:	4801      	ldr	r0, [pc, #4]	; (177e4 <hci_cmd_complete+0x28>)
   177de:	f00a fd53 	bl	22288 <z_impl_k_sem_give>
   177e2:	e7fa      	b.n	177da <hci_cmd_complete+0x1e>
   177e4:	200004a0 	.word	0x200004a0

000177e8 <hci_hardware_error>:
{
   177e8:	b5b0      	push	{r4, r5, r7, lr}
   177ea:	b082      	sub	sp, #8
   177ec:	af00      	add	r7, sp, #0
   177ee:	2101      	movs	r1, #1
   177f0:	300c      	adds	r0, #12
   177f2:	f014 fafd 	bl	2bdf0 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   177f6:	7804      	ldrb	r4, [r0, #0]
   177f8:	b088      	sub	sp, #32
   177fa:	466b      	mov	r3, sp
   177fc:	f113 0210 	adds.w	r2, r3, #16
   17800:	d031      	beq.n	17866 <hci_hardware_error+0x7e>
   17802:	210c      	movs	r1, #12
   17804:	b13a      	cbz	r2, 17816 <hci_hardware_error+0x2e>
   17806:	4608      	mov	r0, r1
   17808:	2904      	cmp	r1, #4
   1780a:	dd01      	ble.n	17810 <hci_hardware_error+0x28>
   1780c:	4d19      	ldr	r5, [pc, #100]	; (17874 <hci_hardware_error+0x8c>)
   1780e:	615d      	str	r5, [r3, #20]
   17810:	2808      	cmp	r0, #8
   17812:	dd00      	ble.n	17816 <hci_hardware_error+0x2e>
   17814:	619c      	str	r4, [r3, #24]
   17816:	290b      	cmp	r1, #11
   17818:	dd28      	ble.n	1786c <hci_hardware_error+0x84>
   1781a:	f04f 0c0c 	mov.w	ip, #12
   1781e:	b13a      	cbz	r2, 17830 <hci_hardware_error+0x48>
   17820:	2103      	movs	r1, #3
   17822:	7139      	strb	r1, [r7, #4]
   17824:	2100      	movs	r1, #0
   17826:	7179      	strb	r1, [r7, #5]
   17828:	71b9      	strb	r1, [r7, #6]
   1782a:	71f9      	strb	r1, [r7, #7]
   1782c:	6878      	ldr	r0, [r7, #4]
   1782e:	6118      	str	r0, [r3, #16]
   17830:	2100      	movs	r1, #0
   17832:	f36f 0100 	bfc	r1, #0, #1
   17836:	f36f 0141 	bfc	r1, #1, #1
   1783a:	f36f 0182 	bfc	r1, #2, #1
   1783e:	f36f 01c5 	bfc	r1, #3, #3
   17842:	2301      	movs	r3, #1
   17844:	f363 1188 	bfi	r1, r3, #6, #3
   17848:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1784c:	f36c 2152 	bfi	r1, ip, #9, #10
   17850:	f36f 41de 	bfc	r1, #19, #12
   17854:	f36f 71df 	bfc	r1, #31, #1
   17858:	2300      	movs	r3, #0
   1785a:	4807      	ldr	r0, [pc, #28]	; (17878 <hci_hardware_error+0x90>)
   1785c:	f011 fab1 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   17860:	3708      	adds	r7, #8
   17862:	46bd      	mov	sp, r7
   17864:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17866:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1786a:	e7cb      	b.n	17804 <hci_hardware_error+0x1c>
   1786c:	f06f 0c1b 	mvn.w	ip, #27
   17870:	e7d5      	b.n	1781e <hci_hardware_error+0x36>
   17872:	bf00      	nop
   17874:	000300c0 	.word	0x000300c0
   17878:	0002eea0 	.word	0x0002eea0

0001787c <handle_event>:
{
   1787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17880:	b082      	sub	sp, #8
   17882:	af00      	add	r7, sp, #0
   17884:	4605      	mov	r5, r0
   17886:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   17888:	f7ff fb72 	bl	16f70 <handle_event_common>
	if (err == -EOPNOTSUPP) {
   1788c:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   17890:	d003      	beq.n	1789a <handle_event+0x1e>
}
   17892:	3708      	adds	r7, #8
   17894:	46bd      	mov	sp, r7
   17896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1789a:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1789e:	4641      	mov	r1, r8
   178a0:	68e0      	ldr	r0, [r4, #12]
   178a2:	f7ff f95d 	bl	16b60 <bt_hex>
   178a6:	466e      	mov	r6, sp
   178a8:	2302      	movs	r3, #2
   178aa:	713b      	strb	r3, [r7, #4]
   178ac:	2304      	movs	r3, #4
   178ae:	717b      	strb	r3, [r7, #5]
   178b0:	b08a      	sub	sp, #40	; 0x28
   178b2:	466c      	mov	r4, sp
   178b4:	f114 0210 	adds.w	r2, r4, #16
   178b8:	d01c      	beq.n	178f4 <handle_event+0x78>
   178ba:	f04f 0c16 	mov.w	ip, #22
   178be:	b162      	cbz	r2, 178da <handle_event+0x5e>
   178c0:	4663      	mov	r3, ip
   178c2:	f1bc 0f04 	cmp.w	ip, #4
   178c6:	dd01      	ble.n	178cc <handle_event+0x50>
   178c8:	4926      	ldr	r1, [pc, #152]	; (17964 <handle_event+0xe8>)
   178ca:	6161      	str	r1, [r4, #20]
   178cc:	2b08      	cmp	r3, #8
   178ce:	dd00      	ble.n	178d2 <handle_event+0x56>
   178d0:	61a5      	str	r5, [r4, #24]
   178d2:	2b0c      	cmp	r3, #12
   178d4:	dd01      	ble.n	178da <handle_event+0x5e>
   178d6:	f8c4 801c 	str.w	r8, [r4, #28]
   178da:	2302      	movs	r3, #2
   178dc:	703b      	strb	r3, [r7, #0]
   178de:	2304      	movs	r3, #4
   178e0:	707b      	strb	r3, [r7, #1]
   178e2:	b1a2      	cbz	r2, 1790e <handle_event+0x92>
   178e4:	f1bc 0f10 	cmp.w	ip, #16
   178e8:	dd00      	ble.n	178ec <handle_event+0x70>
   178ea:	6220      	str	r0, [r4, #32]
   178ec:	f104 0324 	add.w	r3, r4, #36	; 0x24
   178f0:	2100      	movs	r1, #0
   178f2:	e00a      	b.n	1790a <handle_event+0x8e>
   178f4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   178f8:	e7e1      	b.n	178be <handle_event+0x42>
   178fa:	f101 0008 	add.w	r0, r1, #8
   178fe:	4438      	add	r0, r7
   17900:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   17904:	f803 0b01 	strb.w	r0, [r3], #1
   17908:	3101      	adds	r1, #1
   1790a:	2901      	cmp	r1, #1
   1790c:	d9f5      	bls.n	178fa <handle_event+0x7e>
   1790e:	f1bc 0f15 	cmp.w	ip, #21
   17912:	dd24      	ble.n	1795e <handle_event+0xe2>
   17914:	2316      	movs	r3, #22
   17916:	b142      	cbz	r2, 1792a <handle_event+0xae>
   17918:	2105      	movs	r1, #5
   1791a:	7139      	strb	r1, [r7, #4]
   1791c:	2100      	movs	r1, #0
   1791e:	7179      	strb	r1, [r7, #5]
   17920:	71b9      	strb	r1, [r7, #6]
   17922:	2101      	movs	r1, #1
   17924:	71f9      	strb	r1, [r7, #7]
   17926:	6878      	ldr	r0, [r7, #4]
   17928:	6120      	str	r0, [r4, #16]
   1792a:	2100      	movs	r1, #0
   1792c:	f36f 0100 	bfc	r1, #0, #1
   17930:	f36f 0141 	bfc	r1, #1, #1
   17934:	f36f 0182 	bfc	r1, #2, #1
   17938:	f36f 01c5 	bfc	r1, #3, #3
   1793c:	2002      	movs	r0, #2
   1793e:	f360 1188 	bfi	r1, r0, #6, #3
   17942:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17946:	f363 2152 	bfi	r1, r3, #9, #10
   1794a:	f36f 41de 	bfc	r1, #19, #12
   1794e:	f36f 71df 	bfc	r1, #31, #1
   17952:	2300      	movs	r3, #0
   17954:	4804      	ldr	r0, [pc, #16]	; (17968 <handle_event+0xec>)
   17956:	f011 fa34 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1795a:	46b5      	mov	sp, r6
}
   1795c:	e799      	b.n	17892 <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1795e:	f06f 031b 	mvn.w	r3, #27
   17962:	e7d8      	b.n	17916 <handle_event+0x9a>
   17964:	000300e4 	.word	0x000300e4
   17968:	0002eea0 	.word	0x0002eea0

0001796c <hci_event>:
{
   1796c:	b538      	push	{r3, r4, r5, lr}
   1796e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17970:	8a03      	ldrh	r3, [r0, #16]
   17972:	2b01      	cmp	r3, #1
   17974:	d915      	bls.n	179a2 <hci_event+0x36>
   17976:	2102      	movs	r1, #2
   17978:	f104 000c 	add.w	r0, r4, #12
   1797c:	f014 fa38 	bl	2bdf0 <net_buf_simple_pull_mem>
   17980:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17982:	7800      	ldrb	r0, [r0, #0]
   17984:	f011 ff56 	bl	29834 <bt_hci_evt_get_flags>
   17988:	f010 0f02 	tst.w	r0, #2
   1798c:	d017      	beq.n	179be <hci_event+0x52>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1798e:	2304      	movs	r3, #4
   17990:	4a12      	ldr	r2, [pc, #72]	; (179dc <hci_event+0x70>)
   17992:	4621      	mov	r1, r4
   17994:	7828      	ldrb	r0, [r5, #0]
   17996:	f7ff ff71 	bl	1787c <handle_event>
	net_buf_unref(buf);
   1799a:	4620      	mov	r0, r4
   1799c:	f014 f9b9 	bl	2bd12 <net_buf_unref>
}
   179a0:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   179a2:	f640 136d 	movw	r3, #2413	; 0x96d
   179a6:	4a0e      	ldr	r2, [pc, #56]	; (179e0 <hci_event+0x74>)
   179a8:	490e      	ldr	r1, [pc, #56]	; (179e4 <hci_event+0x78>)
   179aa:	480f      	ldr	r0, [pc, #60]	; (179e8 <hci_event+0x7c>)
   179ac:	f010 feef 	bl	2878e <assert_print>
   179b0:	4040      	eors	r0, r0
   179b2:	f380 8811 	msr	BASEPRI, r0
   179b6:	f04f 0003 	mov.w	r0, #3
   179ba:	df02      	svc	2
   179bc:	e7db      	b.n	17976 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   179be:	f640 1371 	movw	r3, #2417	; 0x971
   179c2:	4a07      	ldr	r2, [pc, #28]	; (179e0 <hci_event+0x74>)
   179c4:	4909      	ldr	r1, [pc, #36]	; (179ec <hci_event+0x80>)
   179c6:	4808      	ldr	r0, [pc, #32]	; (179e8 <hci_event+0x7c>)
   179c8:	f010 fee1 	bl	2878e <assert_print>
   179cc:	4040      	eors	r0, r0
   179ce:	f380 8811 	msr	BASEPRI, r0
   179d2:	f04f 0003 	mov.w	r0, #3
   179d6:	df02      	svc	2
   179d8:	e7d9      	b.n	1798e <hci_event+0x22>
   179da:	bf00      	nop
   179dc:	00030500 	.word	0x00030500
   179e0:	00030108 	.word	0x00030108
   179e4:	0003013c 	.word	0x0003013c
   179e8:	00030158 	.word	0x00030158
   179ec:	00030178 	.word	0x00030178

000179f0 <hci_le_meta_event>:
{
   179f0:	b510      	push	{r4, lr}
   179f2:	4604      	mov	r4, r0
   179f4:	2101      	movs	r1, #1
   179f6:	300c      	adds	r0, #12
   179f8:	f014 f9fa 	bl	2bdf0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   179fc:	2307      	movs	r3, #7
   179fe:	4a03      	ldr	r2, [pc, #12]	; (17a0c <hci_le_meta_event+0x1c>)
   17a00:	4621      	mov	r1, r4
   17a02:	7800      	ldrb	r0, [r0, #0]
   17a04:	f7ff ff3a 	bl	1787c <handle_event>
}
   17a08:	bd10      	pop	{r4, pc}
   17a0a:	bf00      	nop
   17a0c:	00030520 	.word	0x00030520

00017a10 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   17a10:	b5b0      	push	{r4, r5, r7, lr}
   17a12:	b082      	sub	sp, #8
   17a14:	af00      	add	r7, sp, #0
   17a16:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   17a18:	4824      	ldr	r0, [pc, #144]	; (17aac <rx_queue_put+0x9c>)
   17a1a:	f014 f941 	bl	2bca0 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17a1e:	4924      	ldr	r1, [pc, #144]	; (17ab0 <rx_queue_put+0xa0>)
   17a20:	4824      	ldr	r0, [pc, #144]	; (17ab4 <rx_queue_put+0xa4>)
   17a22:	f015 ff78 	bl	2d916 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   17a26:	2800      	cmp	r0, #0
   17a28:	db02      	blt.n	17a30 <rx_queue_put+0x20>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   17a2a:	3708      	adds	r7, #8
   17a2c:	46bd      	mov	sp, r7
   17a2e:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
   17a30:	466c      	mov	r4, sp
   17a32:	b088      	sub	sp, #32
   17a34:	466b      	mov	r3, sp
   17a36:	f113 0210 	adds.w	r2, r3, #16
   17a3a:	d031      	beq.n	17aa0 <rx_queue_put+0x90>
   17a3c:	210c      	movs	r1, #12
   17a3e:	b142      	cbz	r2, 17a52 <rx_queue_put+0x42>
   17a40:	468c      	mov	ip, r1
   17a42:	2904      	cmp	r1, #4
   17a44:	dd01      	ble.n	17a4a <rx_queue_put+0x3a>
   17a46:	4d1c      	ldr	r5, [pc, #112]	; (17ab8 <rx_queue_put+0xa8>)
   17a48:	615d      	str	r5, [r3, #20]
   17a4a:	f1bc 0f08 	cmp.w	ip, #8
   17a4e:	dd00      	ble.n	17a52 <rx_queue_put+0x42>
   17a50:	6198      	str	r0, [r3, #24]
   17a52:	290b      	cmp	r1, #11
   17a54:	dd27      	ble.n	17aa6 <rx_queue_put+0x96>
   17a56:	f04f 0c0c 	mov.w	ip, #12
   17a5a:	b13a      	cbz	r2, 17a6c <rx_queue_put+0x5c>
   17a5c:	2103      	movs	r1, #3
   17a5e:	7139      	strb	r1, [r7, #4]
   17a60:	2100      	movs	r1, #0
   17a62:	7179      	strb	r1, [r7, #5]
   17a64:	71b9      	strb	r1, [r7, #6]
   17a66:	71f9      	strb	r1, [r7, #7]
   17a68:	6878      	ldr	r0, [r7, #4]
   17a6a:	6118      	str	r0, [r3, #16]
   17a6c:	2100      	movs	r1, #0
   17a6e:	f36f 0100 	bfc	r1, #0, #1
   17a72:	f36f 0141 	bfc	r1, #1, #1
   17a76:	f36f 0182 	bfc	r1, #2, #1
   17a7a:	f36f 01c5 	bfc	r1, #3, #3
   17a7e:	2301      	movs	r3, #1
   17a80:	f363 1188 	bfi	r1, r3, #6, #3
   17a84:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   17a88:	f36c 2152 	bfi	r1, ip, #9, #10
   17a8c:	f36f 41de 	bfc	r1, #19, #12
   17a90:	f36f 71df 	bfc	r1, #31, #1
   17a94:	2300      	movs	r3, #0
   17a96:	4809      	ldr	r0, [pc, #36]	; (17abc <rx_queue_put+0xac>)
   17a98:	f011 f993 	bl	28dc2 <z_impl_z_log_msg_static_create>
   17a9c:	46a5      	mov	sp, r4
}
   17a9e:	e7c4      	b.n	17a2a <rx_queue_put+0x1a>
		LOG_ERR("Could not submit rx_work: %d", err);
   17aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17aa4:	e7cb      	b.n	17a3e <rx_queue_put+0x2e>
   17aa6:	f06f 0c1b 	mvn.w	ip, #27
   17aaa:	e7d6      	b.n	17a5a <rx_queue_put+0x4a>
   17aac:	200004bc 	.word	0x200004bc
   17ab0:	200006c4 	.word	0x200006c4
   17ab4:	200020d8 	.word	0x200020d8
   17ab8:	000301a8 	.word	0x000301a8
   17abc:	0002eea0 	.word	0x0002eea0

00017ac0 <hci_acl>:
{
   17ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ac2:	b083      	sub	sp, #12
   17ac4:	af00      	add	r7, sp, #0
   17ac6:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17ac8:	8a03      	ldrh	r3, [r0, #16]
   17aca:	2b03      	cmp	r3, #3
   17acc:	d952      	bls.n	17b74 <hci_acl+0xb4>
   17ace:	2104      	movs	r1, #4
   17ad0:	f104 000c 	add.w	r0, r4, #12
   17ad4:	f014 f98c 	bl	2bdf0 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   17ad8:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   17ada:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   17adc:	0b05      	lsrs	r5, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   17ade:	f3c0 000b 	ubfx	r0, r0, #0, #12
   17ae2:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17ae4:	23ff      	movs	r3, #255	; 0xff
   17ae6:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   17ae8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
   17aec:	45b4      	cmp	ip, r6
   17aee:	d055      	beq.n	17b9c <hci_acl+0xdc>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17af0:	466d      	mov	r5, sp
   17af2:	b088      	sub	sp, #32
   17af4:	466b      	mov	r3, sp
   17af6:	f113 0210 	adds.w	r2, r3, #16
   17afa:	d049      	beq.n	17b90 <hci_acl+0xd0>
   17afc:	2110      	movs	r1, #16
   17afe:	b16a      	cbz	r2, 17b1c <hci_acl+0x5c>
   17b00:	4608      	mov	r0, r1
   17b02:	2904      	cmp	r1, #4
   17b04:	dd03      	ble.n	17b0e <hci_acl+0x4e>
   17b06:	f8df e148 	ldr.w	lr, [pc, #328]	; 17c50 <hci_acl+0x190>
   17b0a:	f8c3 e014 	str.w	lr, [r3, #20]
   17b0e:	2808      	cmp	r0, #8
   17b10:	dd01      	ble.n	17b16 <hci_acl+0x56>
   17b12:	f8c3 c018 	str.w	ip, [r3, #24]
   17b16:	280c      	cmp	r0, #12
   17b18:	dd00      	ble.n	17b1c <hci_acl+0x5c>
   17b1a:	61de      	str	r6, [r3, #28]
   17b1c:	290f      	cmp	r1, #15
   17b1e:	dd3a      	ble.n	17b96 <hci_acl+0xd6>
   17b20:	f04f 0c10 	mov.w	ip, #16
   17b24:	b13a      	cbz	r2, 17b36 <hci_acl+0x76>
   17b26:	2104      	movs	r1, #4
   17b28:	7139      	strb	r1, [r7, #4]
   17b2a:	2100      	movs	r1, #0
   17b2c:	7179      	strb	r1, [r7, #5]
   17b2e:	71b9      	strb	r1, [r7, #6]
   17b30:	71f9      	strb	r1, [r7, #7]
   17b32:	6878      	ldr	r0, [r7, #4]
   17b34:	6118      	str	r0, [r3, #16]
   17b36:	2100      	movs	r1, #0
   17b38:	f36f 0100 	bfc	r1, #0, #1
   17b3c:	f36f 0141 	bfc	r1, #1, #1
   17b40:	f36f 0182 	bfc	r1, #2, #1
   17b44:	f36f 01c5 	bfc	r1, #3, #3
   17b48:	2301      	movs	r3, #1
   17b4a:	f363 1188 	bfi	r1, r3, #6, #3
   17b4e:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   17b52:	f36c 2152 	bfi	r1, ip, #9, #10
   17b56:	f36f 41de 	bfc	r1, #19, #12
   17b5a:	f36f 71df 	bfc	r1, #31, #1
   17b5e:	2300      	movs	r3, #0
   17b60:	4837      	ldr	r0, [pc, #220]	; (17c40 <hci_acl+0x180>)
   17b62:	f011 f92e 	bl	28dc2 <z_impl_z_log_msg_static_create>
   17b66:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17b68:	4620      	mov	r0, r4
   17b6a:	f014 f8d2 	bl	2bd12 <net_buf_unref>
}
   17b6e:	370c      	adds	r7, #12
   17b70:	46bd      	mov	sp, r7
   17b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17b74:	f240 13ed 	movw	r3, #493	; 0x1ed
   17b78:	4a32      	ldr	r2, [pc, #200]	; (17c44 <hci_acl+0x184>)
   17b7a:	4933      	ldr	r1, [pc, #204]	; (17c48 <hci_acl+0x188>)
   17b7c:	4833      	ldr	r0, [pc, #204]	; (17c4c <hci_acl+0x18c>)
   17b7e:	f010 fe06 	bl	2878e <assert_print>
   17b82:	4040      	eors	r0, r0
   17b84:	f380 8811 	msr	BASEPRI, r0
   17b88:	f04f 0003 	mov.w	r0, #3
   17b8c:	df02      	svc	2
   17b8e:	e79e      	b.n	17ace <hci_acl+0xe>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17b94:	e7b3      	b.n	17afe <hci_acl+0x3e>
   17b96:	f06f 0c1b 	mvn.w	ip, #27
   17b9a:	e7c3      	b.n	17b24 <hci_acl+0x64>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17b9c:	f002 ff64 	bl	1aa68 <bt_conn_lookup_handle>
	if (!conn) {
   17ba0:	4606      	mov	r6, r0
   17ba2:	b158      	cbz	r0, 17bbc <hci_acl+0xfc>
	acl(buf)->index = bt_conn_index(conn);
   17ba4:	f003 f8ec 	bl	1ad80 <bt_conn_index>
   17ba8:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   17baa:	462a      	mov	r2, r5
   17bac:	4621      	mov	r1, r4
   17bae:	4630      	mov	r0, r6
   17bb0:	f012 fb09 	bl	2a1c6 <bt_conn_recv>
	bt_conn_unref(conn);
   17bb4:	4630      	mov	r0, r6
   17bb6:	f012 fb39 	bl	2a22c <bt_conn_unref>
   17bba:	e7d8      	b.n	17b6e <hci_acl+0xae>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17bbc:	8b65      	ldrh	r5, [r4, #26]
   17bbe:	466e      	mov	r6, sp
   17bc0:	b088      	sub	sp, #32
   17bc2:	466b      	mov	r3, sp
   17bc4:	f113 0210 	adds.w	r2, r3, #16
   17bc8:	d034      	beq.n	17c34 <hci_acl+0x174>
   17bca:	210c      	movs	r1, #12
   17bcc:	b14a      	cbz	r2, 17be2 <hci_acl+0x122>
   17bce:	4608      	mov	r0, r1
   17bd0:	2904      	cmp	r1, #4
   17bd2:	dd03      	ble.n	17bdc <hci_acl+0x11c>
   17bd4:	f8df c07c 	ldr.w	ip, [pc, #124]	; 17c54 <hci_acl+0x194>
   17bd8:	f8c3 c014 	str.w	ip, [r3, #20]
   17bdc:	2808      	cmp	r0, #8
   17bde:	dd00      	ble.n	17be2 <hci_acl+0x122>
   17be0:	619d      	str	r5, [r3, #24]
   17be2:	290b      	cmp	r1, #11
   17be4:	dd29      	ble.n	17c3a <hci_acl+0x17a>
   17be6:	250c      	movs	r5, #12
   17be8:	b13a      	cbz	r2, 17bfa <hci_acl+0x13a>
   17bea:	2103      	movs	r1, #3
   17bec:	7139      	strb	r1, [r7, #4]
   17bee:	2100      	movs	r1, #0
   17bf0:	7179      	strb	r1, [r7, #5]
   17bf2:	71b9      	strb	r1, [r7, #6]
   17bf4:	71f9      	strb	r1, [r7, #7]
   17bf6:	6878      	ldr	r0, [r7, #4]
   17bf8:	6118      	str	r0, [r3, #16]
   17bfa:	2100      	movs	r1, #0
   17bfc:	f36f 0100 	bfc	r1, #0, #1
   17c00:	f36f 0141 	bfc	r1, #1, #1
   17c04:	f36f 0182 	bfc	r1, #2, #1
   17c08:	f36f 01c5 	bfc	r1, #3, #3
   17c0c:	2301      	movs	r3, #1
   17c0e:	f363 1188 	bfi	r1, r3, #6, #3
   17c12:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   17c16:	f365 2152 	bfi	r1, r5, #9, #10
   17c1a:	f36f 41de 	bfc	r1, #19, #12
   17c1e:	f36f 71df 	bfc	r1, #31, #1
   17c22:	2300      	movs	r3, #0
   17c24:	4806      	ldr	r0, [pc, #24]	; (17c40 <hci_acl+0x180>)
   17c26:	f011 f8cc 	bl	28dc2 <z_impl_z_log_msg_static_create>
   17c2a:	46b5      	mov	sp, r6
		net_buf_unref(buf);
   17c2c:	4620      	mov	r0, r4
   17c2e:	f014 f870 	bl	2bd12 <net_buf_unref>
		return;
   17c32:	e79c      	b.n	17b6e <hci_acl+0xae>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17c34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17c38:	e7c8      	b.n	17bcc <hci_acl+0x10c>
   17c3a:	f06f 051b 	mvn.w	r5, #27
   17c3e:	e7d3      	b.n	17be8 <hci_acl+0x128>
   17c40:	0002eea0 	.word	0x0002eea0
   17c44:	00030108 	.word	0x00030108
   17c48:	0003013c 	.word	0x0003013c
   17c4c:	00030158 	.word	0x00030158
   17c50:	000301c8 	.word	0x000301c8
   17c54:	000301ec 	.word	0x000301ec

00017c58 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   17c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c5a:	b083      	sub	sp, #12
   17c5c:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   17c5e:	484c      	ldr	r0, [pc, #304]	; (17d90 <rx_work_handler+0x138>)
   17c60:	f014 f834 	bl	2bccc <net_buf_slist_get>
	if (!buf) {
   17c64:	2800      	cmp	r0, #0
   17c66:	d04e      	beq.n	17d06 <rx_work_handler+0xae>
   17c68:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17c6a:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   17c6c:	2b01      	cmp	r3, #1
   17c6e:	d004      	beq.n	17c7a <rx_work_handler+0x22>
   17c70:	2b03      	cmp	r3, #3
   17c72:	d105      	bne.n	17c80 <rx_work_handler+0x28>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   17c74:	f7ff ff24 	bl	17ac0 <hci_acl>
		break;
   17c78:	e03b      	b.n	17cf2 <rx_work_handler+0x9a>
	case BT_BUF_ISO_IN:
		hci_iso(buf);
		break;
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
   17c7a:	f7ff fe77 	bl	1796c <hci_event>
		break;
   17c7e:	e038      	b.n	17cf2 <rx_work_handler+0x9a>
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17c80:	466d      	mov	r5, sp
   17c82:	b088      	sub	sp, #32
   17c84:	4669      	mov	r1, sp
   17c86:	f111 0210 	adds.w	r2, r1, #16
   17c8a:	d03f      	beq.n	17d0c <rx_work_handler+0xb4>
   17c8c:	200c      	movs	r0, #12
   17c8e:	b142      	cbz	r2, 17ca2 <rx_work_handler+0x4a>
   17c90:	4684      	mov	ip, r0
   17c92:	2804      	cmp	r0, #4
   17c94:	dd01      	ble.n	17c9a <rx_work_handler+0x42>
   17c96:	4e3f      	ldr	r6, [pc, #252]	; (17d94 <rx_work_handler+0x13c>)
   17c98:	614e      	str	r6, [r1, #20]
   17c9a:	f1bc 0f08 	cmp.w	ip, #8
   17c9e:	dd00      	ble.n	17ca2 <rx_work_handler+0x4a>
   17ca0:	618b      	str	r3, [r1, #24]
   17ca2:	280b      	cmp	r0, #11
   17ca4:	dd35      	ble.n	17d12 <rx_work_handler+0xba>
   17ca6:	230c      	movs	r3, #12
   17ca8:	b13a      	cbz	r2, 17cba <rx_work_handler+0x62>
   17caa:	2003      	movs	r0, #3
   17cac:	7138      	strb	r0, [r7, #4]
   17cae:	2000      	movs	r0, #0
   17cb0:	7178      	strb	r0, [r7, #5]
   17cb2:	71b8      	strb	r0, [r7, #6]
   17cb4:	71f8      	strb	r0, [r7, #7]
   17cb6:	6878      	ldr	r0, [r7, #4]
   17cb8:	6108      	str	r0, [r1, #16]
   17cba:	2100      	movs	r1, #0
   17cbc:	f36f 0100 	bfc	r1, #0, #1
   17cc0:	f36f 0141 	bfc	r1, #1, #1
   17cc4:	f36f 0182 	bfc	r1, #2, #1
   17cc8:	f36f 01c5 	bfc	r1, #3, #3
   17ccc:	2001      	movs	r0, #1
   17cce:	f360 1188 	bfi	r1, r0, #6, #3
   17cd2:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   17cd6:	f363 2152 	bfi	r1, r3, #9, #10
   17cda:	f36f 41de 	bfc	r1, #19, #12
   17cde:	f36f 71df 	bfc	r1, #31, #1
   17ce2:	2300      	movs	r3, #0
   17ce4:	482c      	ldr	r0, [pc, #176]	; (17d98 <rx_work_handler+0x140>)
   17ce6:	f011 f86c 	bl	28dc2 <z_impl_z_log_msg_static_create>
   17cea:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17cec:	4620      	mov	r0, r4
   17cee:	f014 f810 	bl	2bd12 <net_buf_unref>
	return list->head;
   17cf2:	4b2a      	ldr	r3, [pc, #168]	; (17d9c <rx_work_handler+0x144>)
   17cf4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   17cf8:	b12b      	cbz	r3, 17d06 <rx_work_handler+0xae>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17cfa:	4929      	ldr	r1, [pc, #164]	; (17da0 <rx_work_handler+0x148>)
   17cfc:	4829      	ldr	r0, [pc, #164]	; (17da4 <rx_work_handler+0x14c>)
   17cfe:	f015 fe0a 	bl	2d916 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   17d02:	2800      	cmp	r0, #0
   17d04:	db08      	blt.n	17d18 <rx_work_handler+0xc0>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   17d06:	370c      	adds	r7, #12
   17d08:	46bd      	mov	sp, r7
   17d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17d0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   17d10:	e7bd      	b.n	17c8e <rx_work_handler+0x36>
   17d12:	f06f 031b 	mvn.w	r3, #27
   17d16:	e7c7      	b.n	17ca8 <rx_work_handler+0x50>
			LOG_ERR("Could not submit rx_work: %d", err);
   17d18:	466d      	mov	r5, sp
   17d1a:	b088      	sub	sp, #32
   17d1c:	466b      	mov	r3, sp
   17d1e:	f113 0210 	adds.w	r2, r3, #16
   17d22:	d02f      	beq.n	17d84 <rx_work_handler+0x12c>
   17d24:	210c      	movs	r1, #12
   17d26:	b13a      	cbz	r2, 17d38 <rx_work_handler+0xe0>
   17d28:	460c      	mov	r4, r1
   17d2a:	2904      	cmp	r1, #4
   17d2c:	dd01      	ble.n	17d32 <rx_work_handler+0xda>
   17d2e:	4e1e      	ldr	r6, [pc, #120]	; (17da8 <rx_work_handler+0x150>)
   17d30:	615e      	str	r6, [r3, #20]
   17d32:	2c08      	cmp	r4, #8
   17d34:	dd00      	ble.n	17d38 <rx_work_handler+0xe0>
   17d36:	6198      	str	r0, [r3, #24]
   17d38:	290b      	cmp	r1, #11
   17d3a:	dd26      	ble.n	17d8a <rx_work_handler+0x132>
   17d3c:	240c      	movs	r4, #12
   17d3e:	b13a      	cbz	r2, 17d50 <rx_work_handler+0xf8>
   17d40:	2103      	movs	r1, #3
   17d42:	7139      	strb	r1, [r7, #4]
   17d44:	2100      	movs	r1, #0
   17d46:	7179      	strb	r1, [r7, #5]
   17d48:	71b9      	strb	r1, [r7, #6]
   17d4a:	71f9      	strb	r1, [r7, #7]
   17d4c:	6878      	ldr	r0, [r7, #4]
   17d4e:	6118      	str	r0, [r3, #16]
   17d50:	2100      	movs	r1, #0
   17d52:	f36f 0100 	bfc	r1, #0, #1
   17d56:	f36f 0141 	bfc	r1, #1, #1
   17d5a:	f36f 0182 	bfc	r1, #2, #1
   17d5e:	f36f 01c5 	bfc	r1, #3, #3
   17d62:	2301      	movs	r3, #1
   17d64:	f363 1188 	bfi	r1, r3, #6, #3
   17d68:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   17d6c:	f363 2152 	bfi	r1, r3, #9, #10
   17d70:	f36f 41de 	bfc	r1, #19, #12
   17d74:	f36f 71df 	bfc	r1, #31, #1
   17d78:	2300      	movs	r3, #0
   17d7a:	4807      	ldr	r0, [pc, #28]	; (17d98 <rx_work_handler+0x140>)
   17d7c:	f011 f821 	bl	28dc2 <z_impl_z_log_msg_static_create>
   17d80:	46ad      	mov	sp, r5
   17d82:	e7c0      	b.n	17d06 <rx_work_handler+0xae>
   17d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17d88:	e7cd      	b.n	17d26 <rx_work_handler+0xce>
   17d8a:	f06f 041b 	mvn.w	r4, #27
   17d8e:	e7d6      	b.n	17d3e <rx_work_handler+0xe6>
   17d90:	200004bc 	.word	0x200004bc
   17d94:	00030210 	.word	0x00030210
   17d98:	0002eea0 	.word	0x0002eea0
   17d9c:	20000388 	.word	0x20000388
   17da0:	200006c4 	.word	0x200006c4
   17da4:	200020d8 	.word	0x200020d8
   17da8:	000301a8 	.word	0x000301a8

00017dac <le_conn_update_complete>:
{
   17dac:	b5f0      	push	{r4, r5, r6, r7, lr}
   17dae:	b083      	sub	sp, #12
   17db0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17db2:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   17db4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   17db8:	4630      	mov	r0, r6
   17dba:	f002 fe55 	bl	1aa68 <bt_conn_lookup_handle>
	if (!conn) {
   17dbe:	b340      	cbz	r0, 17e12 <le_conn_update_complete+0x66>
   17dc0:	4604      	mov	r4, r0
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17dc2:	782b      	ldrb	r3, [r5, #0]
   17dc4:	2b1a      	cmp	r3, #26
   17dc6:	d060      	beq.n	17e8a <le_conn_update_complete+0xde>
		if (!evt->status) {
   17dc8:	782b      	ldrb	r3, [r5, #0]
   17dca:	2b00      	cmp	r3, #0
   17dcc:	d177      	bne.n	17ebe <le_conn_update_complete+0x112>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   17dce:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   17dd2:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   17dd6:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   17dda:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17dde:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   17de2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			atomic_clear_bit(conn->flags,
   17de6:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17de8:	f3bf 8f5b 	dmb	ish
   17dec:	e853 1f00 	ldrex	r1, [r3]
   17df0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   17df4:	e843 1200 	strex	r2, r1, [r3]
   17df8:	2a00      	cmp	r2, #0
   17dfa:	d1f7      	bne.n	17dec <le_conn_update_complete+0x40>
   17dfc:	f3bf 8f5b 	dmb	ish
		notify_le_param_updated(conn);
   17e00:	4620      	mov	r0, r4
   17e02:	f003 f807 	bl	1ae14 <notify_le_param_updated>
	bt_conn_unref(conn);
   17e06:	4620      	mov	r0, r4
   17e08:	f012 fa10 	bl	2a22c <bt_conn_unref>
}
   17e0c:	370c      	adds	r7, #12
   17e0e:	46bd      	mov	sp, r7
   17e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17e12:	466d      	mov	r5, sp
   17e14:	b088      	sub	sp, #32
   17e16:	466b      	mov	r3, sp
   17e18:	f113 0210 	adds.w	r2, r3, #16
   17e1c:	d02f      	beq.n	17e7e <le_conn_update_complete+0xd2>
   17e1e:	210c      	movs	r1, #12
   17e20:	b13a      	cbz	r2, 17e32 <le_conn_update_complete+0x86>
   17e22:	4608      	mov	r0, r1
   17e24:	2904      	cmp	r1, #4
   17e26:	dd01      	ble.n	17e2c <le_conn_update_complete+0x80>
   17e28:	4c37      	ldr	r4, [pc, #220]	; (17f08 <le_conn_update_complete+0x15c>)
   17e2a:	615c      	str	r4, [r3, #20]
   17e2c:	2808      	cmp	r0, #8
   17e2e:	dd00      	ble.n	17e32 <le_conn_update_complete+0x86>
   17e30:	619e      	str	r6, [r3, #24]
   17e32:	290b      	cmp	r1, #11
   17e34:	dd26      	ble.n	17e84 <le_conn_update_complete+0xd8>
   17e36:	240c      	movs	r4, #12
   17e38:	b13a      	cbz	r2, 17e4a <le_conn_update_complete+0x9e>
   17e3a:	2103      	movs	r1, #3
   17e3c:	7039      	strb	r1, [r7, #0]
   17e3e:	2100      	movs	r1, #0
   17e40:	7079      	strb	r1, [r7, #1]
   17e42:	70b9      	strb	r1, [r7, #2]
   17e44:	70f9      	strb	r1, [r7, #3]
   17e46:	6838      	ldr	r0, [r7, #0]
   17e48:	6118      	str	r0, [r3, #16]
   17e4a:	2100      	movs	r1, #0
   17e4c:	f36f 0100 	bfc	r1, #0, #1
   17e50:	f36f 0141 	bfc	r1, #1, #1
   17e54:	f36f 0182 	bfc	r1, #2, #1
   17e58:	f36f 01c5 	bfc	r1, #3, #3
   17e5c:	2301      	movs	r3, #1
   17e5e:	f363 1188 	bfi	r1, r3, #6, #3
   17e62:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   17e66:	f364 2152 	bfi	r1, r4, #9, #10
   17e6a:	f36f 41de 	bfc	r1, #19, #12
   17e6e:	f36f 71df 	bfc	r1, #31, #1
   17e72:	2300      	movs	r3, #0
   17e74:	4825      	ldr	r0, [pc, #148]	; (17f0c <le_conn_update_complete+0x160>)
   17e76:	f010 ffa4 	bl	28dc2 <z_impl_z_log_msg_static_create>
   17e7a:	46ad      	mov	sp, r5
		return;
   17e7c:	e7c6      	b.n	17e0c <le_conn_update_complete+0x60>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17e7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17e82:	e7cd      	b.n	17e20 <le_conn_update_complete+0x74>
   17e84:	f06f 041b 	mvn.w	r4, #27
   17e88:	e7d6      	b.n	17e38 <le_conn_update_complete+0x8c>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17e8a:	78c3      	ldrb	r3, [r0, #3]
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17e8c:	2b01      	cmp	r3, #1
   17e8e:	d19b      	bne.n	17dc8 <le_conn_update_complete+0x1c>
	    !atomic_test_and_set_bit(conn->flags,
   17e90:	210a      	movs	r1, #10
   17e92:	3004      	adds	r0, #4
   17e94:	f011 fd3c 	bl	29910 <atomic_test_and_set_bit>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17e98:	2800      	cmp	r0, #0
   17e9a:	d195      	bne.n	17dc8 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   17e9c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   17ea0:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   17ea2:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   17ea6:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   17ea8:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   17eac:	80bb      	strh	r3, [r7, #4]
		param.timeout = conn->le.pending_timeout;
   17eae:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   17eb2:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   17eb4:	4639      	mov	r1, r7
   17eb6:	4620      	mov	r0, r4
   17eb8:	f012 fb18 	bl	2a4ec <bt_l2cap_update_conn_param>
				     BT_CONN_PERIPHERAL_PARAM_L2CAP)) {
   17ebc:	e7a3      	b.n	17e06 <le_conn_update_complete+0x5a>
		} else if (atomic_test_bit(conn->flags,
   17ebe:	1d26      	adds	r6, r4, #4
   17ec0:	2108      	movs	r1, #8
   17ec2:	4630      	mov	r0, r6
   17ec4:	f011 fccf 	bl	29866 <atomic_test_bit>
   17ec8:	b110      	cbz	r0, 17ed0 <le_conn_update_complete+0x124>
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   17eca:	782b      	ldrb	r3, [r5, #0]
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   17ecc:	2b20      	cmp	r3, #32
   17ece:	d00c      	beq.n	17eea <le_conn_update_complete+0x13e>
   17ed0:	f3bf 8f5b 	dmb	ish
   17ed4:	e856 3f00 	ldrex	r3, [r6]
   17ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   17edc:	e846 3200 	strex	r2, r3, [r6]
   17ee0:	2a00      	cmp	r2, #0
   17ee2:	d1f7      	bne.n	17ed4 <le_conn_update_complete+0x128>
   17ee4:	f3bf 8f5b 	dmb	ish
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
}
   17ee8:	e78a      	b.n	17e00 <le_conn_update_complete+0x54>
			   conn->le.conn_param_retry_countdown) {
   17eea:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   17eee:	2b00      	cmp	r3, #0
   17ef0:	d0ee      	beq.n	17ed0 <le_conn_update_complete+0x124>
			conn->le.conn_param_retry_countdown--;
   17ef2:	3b01      	subs	r3, #1
   17ef4:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   17ef8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   17efc:	2300      	movs	r3, #0
   17efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17f02:	f00a fb4b 	bl	2259c <k_work_schedule>
			   conn->le.conn_param_retry_countdown) {
   17f06:	e77b      	b.n	17e00 <le_conn_update_complete+0x54>
   17f08:	0002fffc 	.word	0x0002fffc
   17f0c:	0002eea0 	.word	0x0002eea0

00017f10 <bt_hci_cmd_state_set_init>:
{
   17f10:	b510      	push	{r4, lr}
   17f12:	460c      	mov	r4, r1
	state->target = target;
   17f14:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   17f16:	604b      	str	r3, [r1, #4]
	state->val = val;
   17f18:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17f1c:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   17f1e:	f013 fe0d 	bl	2bb3c <net_buf_id>
   17f22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17f26:	4b02      	ldr	r3, [pc, #8]	; (17f30 <bt_hci_cmd_state_set_init+0x20>)
   17f28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   17f2c:	605c      	str	r4, [r3, #4]
}
   17f2e:	bd10      	pop	{r4, pc}
   17f30:	20003748 	.word	0x20003748

00017f34 <bt_hci_cmd_create>:
{
   17f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17f38:	4606      	mov	r6, r0
   17f3a:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   17f3c:	f04f 32ff 	mov.w	r2, #4294967295
   17f40:	f04f 33ff 	mov.w	r3, #4294967295
   17f44:	4818      	ldr	r0, [pc, #96]	; (17fa8 <bt_hci_cmd_create+0x74>)
   17f46:	f013 fe9c 	bl	2bc82 <net_buf_alloc_fixed>
   17f4a:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   17f4c:	f100 090c 	add.w	r9, r0, #12
   17f50:	2100      	movs	r1, #0
   17f52:	4648      	mov	r0, r9
   17f54:	f013 fea0 	bl	2bc98 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17f58:	f04f 0800 	mov.w	r8, #0
   17f5c:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   17f60:	4620      	mov	r0, r4
   17f62:	f013 fdeb 	bl	2bb3c <net_buf_id>
   17f66:	4d11      	ldr	r5, [pc, #68]	; (17fac <bt_hci_cmd_create+0x78>)
   17f68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17f6c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   17f70:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   17f72:	4620      	mov	r0, r4
   17f74:	f013 fde2 	bl	2bb3c <net_buf_id>
   17f78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17f7c:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   17f80:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   17f84:	4620      	mov	r0, r4
   17f86:	f013 fdd9 	bl	2bb3c <net_buf_id>
   17f8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17f8e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   17f92:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   17f96:	2103      	movs	r1, #3
   17f98:	4648      	mov	r0, r9
   17f9a:	f013 ff01 	bl	2bda0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   17f9e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   17fa0:	7087      	strb	r7, [r0, #2]
}
   17fa2:	4620      	mov	r0, r4
   17fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17fa8:	20000ce8 	.word	0x20000ce8
   17fac:	20003748 	.word	0x20003748

00017fb0 <bt_hci_cmd_send_sync>:
{
   17fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fb4:	b088      	sub	sp, #32
   17fb6:	af00      	add	r7, sp, #0
   17fb8:	4606      	mov	r6, r0
   17fba:	4615      	mov	r5, r2
	if (!buf) {
   17fbc:	460c      	mov	r4, r1
   17fbe:	2900      	cmp	r1, #0
   17fc0:	d06f      	beq.n	180a2 <bt_hci_cmd_send_sync+0xf2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17fc2:	f107 0808 	add.w	r8, r7, #8
   17fc6:	2201      	movs	r2, #1
   17fc8:	2100      	movs	r1, #0
   17fca:	4640      	mov	r0, r8
   17fcc:	f015 fb9f 	bl	2d70e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   17fd0:	4620      	mov	r0, r4
   17fd2:	f013 fdb3 	bl	2bb3c <net_buf_id>
   17fd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17fda:	4b49      	ldr	r3, [pc, #292]	; (18100 <bt_hci_cmd_send_sync+0x150>)
   17fdc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   17fe0:	f8c3 8008 	str.w	r8, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   17fe4:	4620      	mov	r0, r4
   17fe6:	f013 feb7 	bl	2bd58 <net_buf_ref>
   17fea:	4601      	mov	r1, r0
   17fec:	4845      	ldr	r0, [pc, #276]	; (18104 <bt_hci_cmd_send_sync+0x154>)
   17fee:	f013 fe8c 	bl	2bd0a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   17ff2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   17ff6:	2300      	movs	r3, #0
   17ff8:	4640      	mov	r0, r8
   17ffa:	f00a f96d 	bl	222d8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17ffe:	4680      	mov	r8, r0
   18000:	2800      	cmp	r0, #0
   18002:	d156      	bne.n	180b2 <bt_hci_cmd_send_sync+0x102>
	status = cmd(buf)->status;
   18004:	4620      	mov	r0, r4
   18006:	f013 fd99 	bl	2bb3c <net_buf_id>
   1800a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1800e:	4b3c      	ldr	r3, [pc, #240]	; (18100 <bt_hci_cmd_send_sync+0x150>)
   18010:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
   18014:	f1b8 0f00 	cmp.w	r8, #0
   18018:	d066      	beq.n	180e8 <bt_hci_cmd_send_sync+0x138>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   1801a:	466d      	mov	r5, sp
   1801c:	b088      	sub	sp, #32
   1801e:	466b      	mov	r3, sp
   18020:	f113 0210 	adds.w	r2, r3, #16
   18024:	d057      	beq.n	180d6 <bt_hci_cmd_send_sync+0x126>
   18026:	2110      	movs	r1, #16
   18028:	b16a      	cbz	r2, 18046 <bt_hci_cmd_send_sync+0x96>
   1802a:	4608      	mov	r0, r1
   1802c:	2904      	cmp	r1, #4
   1802e:	dd03      	ble.n	18038 <bt_hci_cmd_send_sync+0x88>
   18030:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1811c <bt_hci_cmd_send_sync+0x16c>
   18034:	f8c3 c014 	str.w	ip, [r3, #20]
   18038:	2808      	cmp	r0, #8
   1803a:	dd00      	ble.n	1803e <bt_hci_cmd_send_sync+0x8e>
   1803c:	619e      	str	r6, [r3, #24]
   1803e:	280c      	cmp	r0, #12
   18040:	dd01      	ble.n	18046 <bt_hci_cmd_send_sync+0x96>
   18042:	f8c3 801c 	str.w	r8, [r3, #28]
   18046:	290f      	cmp	r1, #15
   18048:	dd48      	ble.n	180dc <bt_hci_cmd_send_sync+0x12c>
   1804a:	2610      	movs	r6, #16
   1804c:	b13a      	cbz	r2, 1805e <bt_hci_cmd_send_sync+0xae>
   1804e:	2104      	movs	r1, #4
   18050:	7139      	strb	r1, [r7, #4]
   18052:	2100      	movs	r1, #0
   18054:	7179      	strb	r1, [r7, #5]
   18056:	71b9      	strb	r1, [r7, #6]
   18058:	71f9      	strb	r1, [r7, #7]
   1805a:	6878      	ldr	r0, [r7, #4]
   1805c:	6118      	str	r0, [r3, #16]
   1805e:	2100      	movs	r1, #0
   18060:	f36f 0100 	bfc	r1, #0, #1
   18064:	f36f 0141 	bfc	r1, #1, #1
   18068:	f36f 0182 	bfc	r1, #2, #1
   1806c:	f36f 01c5 	bfc	r1, #3, #3
   18070:	2302      	movs	r3, #2
   18072:	f363 1188 	bfi	r1, r3, #6, #3
   18076:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
   1807a:	f363 2152 	bfi	r1, r3, #9, #10
   1807e:	f36f 41de 	bfc	r1, #19, #12
   18082:	f36f 71df 	bfc	r1, #31, #1
   18086:	2300      	movs	r3, #0
   18088:	481f      	ldr	r0, [pc, #124]	; (18108 <bt_hci_cmd_send_sync+0x158>)
   1808a:	f010 fe9a 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1808e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   18090:	4620      	mov	r0, r4
   18092:	f013 fe3e 	bl	2bd12 <net_buf_unref>
		switch (status) {
   18096:	f1b8 0f09 	cmp.w	r8, #9
   1809a:	d022      	beq.n	180e2 <bt_hci_cmd_send_sync+0x132>
			return -EIO;
   1809c:	f06f 0004 	mvn.w	r0, #4
   180a0:	e025      	b.n	180ee <bt_hci_cmd_send_sync+0x13e>
		buf = bt_hci_cmd_create(opcode, 0);
   180a2:	f7ff ff47 	bl	17f34 <bt_hci_cmd_create>
		if (!buf) {
   180a6:	4604      	mov	r4, r0
   180a8:	2800      	cmp	r0, #0
   180aa:	d18a      	bne.n	17fc2 <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
   180ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   180b0:	e01d      	b.n	180ee <bt_hci_cmd_send_sync+0x13e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   180b2:	f240 1349 	movw	r3, #329	; 0x149
   180b6:	4a15      	ldr	r2, [pc, #84]	; (1810c <bt_hci_cmd_send_sync+0x15c>)
   180b8:	4915      	ldr	r1, [pc, #84]	; (18110 <bt_hci_cmd_send_sync+0x160>)
   180ba:	4816      	ldr	r0, [pc, #88]	; (18114 <bt_hci_cmd_send_sync+0x164>)
   180bc:	f010 fb67 	bl	2878e <assert_print>
   180c0:	4641      	mov	r1, r8
   180c2:	4815      	ldr	r0, [pc, #84]	; (18118 <bt_hci_cmd_send_sync+0x168>)
   180c4:	f010 fb63 	bl	2878e <assert_print>
   180c8:	4040      	eors	r0, r0
   180ca:	f380 8811 	msr	BASEPRI, r0
   180ce:	f04f 0003 	mov.w	r0, #3
   180d2:	df02      	svc	2
   180d4:	e796      	b.n	18004 <bt_hci_cmd_send_sync+0x54>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   180d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   180da:	e7a5      	b.n	18028 <bt_hci_cmd_send_sync+0x78>
   180dc:	f06f 061b 	mvn.w	r6, #27
   180e0:	e7b4      	b.n	1804c <bt_hci_cmd_send_sync+0x9c>
			return -ECONNREFUSED;
   180e2:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   180e6:	e002      	b.n	180ee <bt_hci_cmd_send_sync+0x13e>
	if (rsp) {
   180e8:	b12d      	cbz	r5, 180f6 <bt_hci_cmd_send_sync+0x146>
		*rsp = buf;
   180ea:	602c      	str	r4, [r5, #0]
	return 0;
   180ec:	2000      	movs	r0, #0
}
   180ee:	3720      	adds	r7, #32
   180f0:	46bd      	mov	sp, r7
   180f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   180f6:	4620      	mov	r0, r4
   180f8:	f013 fe0b 	bl	2bd12 <net_buf_unref>
	return 0;
   180fc:	2000      	movs	r0, #0
   180fe:	e7f6      	b.n	180ee <bt_hci_cmd_send_sync+0x13e>
   18100:	20003748 	.word	0x20003748
   18104:	200004c4 	.word	0x200004c4
   18108:	0002eea0 	.word	0x0002eea0
   1810c:	00030108 	.word	0x00030108
   18110:	00030224 	.word	0x00030224
   18114:	00030158 	.word	0x00030158
   18118:	00030230 	.word	0x00030230
   1811c:	00030250 	.word	0x00030250

00018120 <common_init>:
{
   18120:	b510      	push	{r4, lr}
   18122:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   18124:	4b22      	ldr	r3, [pc, #136]	; (181b0 <common_init+0x90>)
   18126:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1812a:	689b      	ldr	r3, [r3, #8]
   1812c:	f013 0f01 	tst.w	r3, #1
   18130:	d10d      	bne.n	1814e <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   18132:	aa01      	add	r2, sp, #4
   18134:	2100      	movs	r1, #0
   18136:	f640 4003 	movw	r0, #3075	; 0xc03
   1813a:	f7ff ff39 	bl	17fb0 <bt_hci_cmd_send_sync>
		if (err) {
   1813e:	4604      	mov	r4, r0
   18140:	b968      	cbnz	r0, 1815e <common_init+0x3e>
		hci_reset_complete(rsp);
   18142:	9801      	ldr	r0, [sp, #4]
   18144:	f7fe fe8c 	bl	16e60 <hci_reset_complete>
		net_buf_unref(rsp);
   18148:	9801      	ldr	r0, [sp, #4]
   1814a:	f013 fde2 	bl	2bd12 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1814e:	aa01      	add	r2, sp, #4
   18150:	2100      	movs	r1, #0
   18152:	f241 0003 	movw	r0, #4099	; 0x1003
   18156:	f7ff ff2b 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   1815a:	4604      	mov	r4, r0
   1815c:	b110      	cbz	r0, 18164 <common_init+0x44>
}
   1815e:	4620      	mov	r0, r4
   18160:	b002      	add	sp, #8
   18162:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   18164:	9801      	ldr	r0, [sp, #4]
   18166:	f7fe fe65 	bl	16e34 <read_local_features_complete>
	net_buf_unref(rsp);
   1816a:	9801      	ldr	r0, [sp, #4]
   1816c:	f013 fdd1 	bl	2bd12 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   18170:	aa01      	add	r2, sp, #4
   18172:	2100      	movs	r1, #0
   18174:	f241 0001 	movw	r0, #4097	; 0x1001
   18178:	f7ff ff1a 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   1817c:	4604      	mov	r4, r0
   1817e:	2800      	cmp	r0, #0
   18180:	d1ed      	bne.n	1815e <common_init+0x3e>
	read_local_ver_complete(rsp);
   18182:	9801      	ldr	r0, [sp, #4]
   18184:	f7fe fe1c 	bl	16dc0 <read_local_ver_complete>
	net_buf_unref(rsp);
   18188:	9801      	ldr	r0, [sp, #4]
   1818a:	f013 fdc2 	bl	2bd12 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1818e:	aa01      	add	r2, sp, #4
   18190:	2100      	movs	r1, #0
   18192:	f241 0002 	movw	r0, #4098	; 0x1002
   18196:	f7ff ff0b 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   1819a:	4604      	mov	r4, r0
   1819c:	2800      	cmp	r0, #0
   1819e:	d1de      	bne.n	1815e <common_init+0x3e>
	read_supported_commands_complete(rsp);
   181a0:	9801      	ldr	r0, [sp, #4]
   181a2:	f7fe fe2d 	bl	16e00 <read_supported_commands_complete>
	net_buf_unref(rsp);
   181a6:	9801      	ldr	r0, [sp, #4]
   181a8:	f013 fdb3 	bl	2bd12 <net_buf_unref>
	return 0;
   181ac:	e7d7      	b.n	1815e <common_init+0x3e>
   181ae:	bf00      	nop
   181b0:	20000388 	.word	0x20000388

000181b4 <hci_le_read_max_data_len>:
{
   181b4:	b570      	push	{r4, r5, r6, lr}
   181b6:	b088      	sub	sp, #32
   181b8:	4605      	mov	r5, r0
   181ba:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   181bc:	aa01      	add	r2, sp, #4
   181be:	2100      	movs	r1, #0
   181c0:	f242 002f 	movw	r0, #8239	; 0x202f
   181c4:	f7ff fef4 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   181c8:	4606      	mov	r6, r0
   181ca:	b960      	cbnz	r0, 181e6 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   181cc:	9801      	ldr	r0, [sp, #4]
   181ce:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   181d0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   181d4:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   181d6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   181da:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   181dc:	f013 fd99 	bl	2bd12 <net_buf_unref>
}
   181e0:	4630      	mov	r0, r6
   181e2:	b008      	add	sp, #32
   181e4:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Failed to read DLE max data len");
   181e6:	4b13      	ldr	r3, [pc, #76]	; (18234 <hci_le_read_max_data_len+0x80>)
   181e8:	9307      	str	r3, [sp, #28]
   181ea:	2302      	movs	r3, #2
   181ec:	f88d 3000 	strb.w	r3, [sp]
   181f0:	2300      	movs	r3, #0
   181f2:	f88d 3001 	strb.w	r3, [sp, #1]
   181f6:	f88d 3002 	strb.w	r3, [sp, #2]
   181fa:	f88d 3003 	strb.w	r3, [sp, #3]
   181fe:	9a00      	ldr	r2, [sp, #0]
   18200:	9206      	str	r2, [sp, #24]
   18202:	4619      	mov	r1, r3
   18204:	f363 0100 	bfi	r1, r3, #0, #1
   18208:	f363 0141 	bfi	r1, r3, #1, #1
   1820c:	f363 0182 	bfi	r1, r3, #2, #1
   18210:	f363 01c5 	bfi	r1, r3, #3, #3
   18214:	2201      	movs	r2, #1
   18216:	f362 1188 	bfi	r1, r2, #6, #3
   1821a:	2208      	movs	r2, #8
   1821c:	f362 2152 	bfi	r1, r2, #9, #10
   18220:	f363 41de 	bfi	r1, r3, #19, #12
   18224:	f363 71df 	bfi	r1, r3, #31, #1
   18228:	aa06      	add	r2, sp, #24
   1822a:	4803      	ldr	r0, [pc, #12]	; (18238 <hci_le_read_max_data_len+0x84>)
   1822c:	f010 fdc9 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return err;
   18230:	e7d6      	b.n	181e0 <hci_le_read_max_data_len+0x2c>
   18232:	bf00      	nop
   18234:	0003026c 	.word	0x0003026c
   18238:	0002eea0 	.word	0x0002eea0

0001823c <le_set_event_mask>:
{
   1823c:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1823e:	2108      	movs	r1, #8
   18240:	f242 0001 	movw	r0, #8193	; 0x2001
   18244:	f7ff fe76 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   18248:	b330      	cbz	r0, 18298 <le_set_event_mask+0x5c>
   1824a:	4604      	mov	r4, r0
   1824c:	2108      	movs	r1, #8
   1824e:	300c      	adds	r0, #12
   18250:	f013 fda6 	bl	2bda0 <net_buf_simple_add>
   18254:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   18256:	4b12      	ldr	r3, [pc, #72]	; (182a0 <le_set_event_mask+0x64>)
   18258:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1825c:	f013 0f02 	tst.w	r3, #2
   18260:	d117      	bne.n	18292 <le_set_event_mask+0x56>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   18262:	200f      	movs	r0, #15
   18264:	2100      	movs	r1, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   18266:	f013 0f20 	tst.w	r3, #32
   1826a:	d001      	beq.n	18270 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1826c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   18270:	4b0b      	ldr	r3, [pc, #44]	; (182a0 <le_set_event_mask+0x64>)
   18272:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   18276:	f013 0f09 	tst.w	r3, #9
   1827a:	d001      	beq.n	18280 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1827c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	sys_put_le64(mask, cp_mask->events);
   18280:	f011 faae 	bl	297e0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   18284:	2200      	movs	r2, #0
   18286:	4621      	mov	r1, r4
   18288:	f242 0001 	movw	r0, #8193	; 0x2001
   1828c:	f7ff fe90 	bl	17fb0 <bt_hci_cmd_send_sync>
}
   18290:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   18292:	202f      	movs	r0, #47	; 0x2f
   18294:	2100      	movs	r1, #0
   18296:	e7e6      	b.n	18266 <le_set_event_mask+0x2a>
		return -ENOBUFS;
   18298:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1829c:	e7f8      	b.n	18290 <le_set_event_mask+0x54>
   1829e:	bf00      	nop
   182a0:	20000388 	.word	0x20000388

000182a4 <le_init>:
{
   182a4:	b510      	push	{r4, lr}
   182a6:	b08a      	sub	sp, #40	; 0x28
	if (!BT_FEAT_LE(bt_dev.features)) {
   182a8:	4b5a      	ldr	r3, [pc, #360]	; (18414 <le_init+0x170>)
   182aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   182ae:	f013 0f40 	tst.w	r3, #64	; 0x40
   182b2:	d00a      	beq.n	182ca <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   182b4:	aa03      	add	r2, sp, #12
   182b6:	2100      	movs	r1, #0
   182b8:	f242 0003 	movw	r0, #8195	; 0x2003
   182bc:	f7ff fe78 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   182c0:	4603      	mov	r3, r0
   182c2:	b350      	cbz	r0, 1831a <le_init+0x76>
}
   182c4:	4618      	mov	r0, r3
   182c6:	b00a      	add	sp, #40	; 0x28
   182c8:	bd10      	pop	{r4, pc}
		LOG_ERR("Non-LE capable controller detected!");
   182ca:	4b53      	ldr	r3, [pc, #332]	; (18418 <le_init+0x174>)
   182cc:	9309      	str	r3, [sp, #36]	; 0x24
   182ce:	2302      	movs	r3, #2
   182d0:	f88d 3008 	strb.w	r3, [sp, #8]
   182d4:	2300      	movs	r3, #0
   182d6:	f88d 3009 	strb.w	r3, [sp, #9]
   182da:	f88d 300a 	strb.w	r3, [sp, #10]
   182de:	f88d 300b 	strb.w	r3, [sp, #11]
   182e2:	9a02      	ldr	r2, [sp, #8]
   182e4:	9208      	str	r2, [sp, #32]
   182e6:	4619      	mov	r1, r3
   182e8:	f363 0100 	bfi	r1, r3, #0, #1
   182ec:	f363 0141 	bfi	r1, r3, #1, #1
   182f0:	f363 0182 	bfi	r1, r3, #2, #1
   182f4:	f363 01c5 	bfi	r1, r3, #3, #3
   182f8:	2201      	movs	r2, #1
   182fa:	f362 1188 	bfi	r1, r2, #6, #3
   182fe:	2208      	movs	r2, #8
   18300:	f362 2152 	bfi	r1, r2, #9, #10
   18304:	f363 41de 	bfi	r1, r3, #19, #12
   18308:	f363 71df 	bfi	r1, r3, #31, #1
   1830c:	aa08      	add	r2, sp, #32
   1830e:	4843      	ldr	r0, [pc, #268]	; (1841c <le_init+0x178>)
   18310:	f010 fd57 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   18314:	f06f 0312 	mvn.w	r3, #18
   18318:	e7d4      	b.n	182c4 <le_init+0x20>
	read_le_features_complete(rsp);
   1831a:	9803      	ldr	r0, [sp, #12]
   1831c:	f7fe fd66 	bl	16dec <read_le_features_complete>
	net_buf_unref(rsp);
   18320:	9803      	ldr	r0, [sp, #12]
   18322:	f013 fcf6 	bl	2bd12 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   18326:	aa03      	add	r2, sp, #12
   18328:	2100      	movs	r1, #0
   1832a:	f242 0002 	movw	r0, #8194	; 0x2002
   1832e:	f7ff fe3f 	bl	17fb0 <bt_hci_cmd_send_sync>
		if (err) {
   18332:	4603      	mov	r3, r0
   18334:	2800      	cmp	r0, #0
   18336:	d1c5      	bne.n	182c4 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   18338:	9803      	ldr	r0, [sp, #12]
   1833a:	f7fe fda9 	bl	16e90 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   1833e:	9803      	ldr	r0, [sp, #12]
   18340:	f013 fce7 	bl	2bd12 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18344:	4b33      	ldr	r3, [pc, #204]	; (18414 <le_init+0x170>)
   18346:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1834a:	f013 0f20 	tst.w	r3, #32
   1834e:	d032      	beq.n	183b6 <le_init+0x112>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   18350:	4b30      	ldr	r3, [pc, #192]	; (18414 <le_init+0x170>)
   18352:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   18356:	f013 0f08 	tst.w	r3, #8
   1835a:	d144      	bne.n	183e6 <le_init+0x142>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   1835c:	4b2d      	ldr	r3, [pc, #180]	; (18414 <le_init+0x170>)
   1835e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   18362:	f013 0f20 	tst.w	r3, #32
   18366:	d022      	beq.n	183ae <le_init+0x10a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18368:	a902      	add	r1, sp, #8
   1836a:	f10d 0006 	add.w	r0, sp, #6
   1836e:	f7ff ff21 	bl	181b4 <hci_le_read_max_data_len>
		if (err) {
   18372:	4603      	mov	r3, r0
   18374:	2800      	cmp	r0, #0
   18376:	d1a5      	bne.n	182c4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18378:	2104      	movs	r1, #4
   1837a:	f242 0024 	movw	r0, #8228	; 0x2024
   1837e:	f7ff fdd9 	bl	17f34 <bt_hci_cmd_create>
		if (!buf) {
   18382:	4604      	mov	r4, r0
   18384:	2800      	cmp	r0, #0
   18386:	d03f      	beq.n	18408 <le_init+0x164>
   18388:	2104      	movs	r1, #4
   1838a:	300c      	adds	r0, #12
   1838c:	f013 fd08 	bl	2bda0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   18390:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18394:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   18396:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1839a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1839c:	2200      	movs	r2, #0
   1839e:	4621      	mov	r1, r4
   183a0:	f242 0024 	movw	r0, #8228	; 0x2024
   183a4:	f7ff fe04 	bl	17fb0 <bt_hci_cmd_send_sync>
		if (err) {
   183a8:	4603      	mov	r3, r0
   183aa:	2800      	cmp	r0, #0
   183ac:	d18a      	bne.n	182c4 <le_init+0x20>
	return  le_set_event_mask();
   183ae:	f7ff ff45 	bl	1823c <le_set_event_mask>
   183b2:	4603      	mov	r3, r0
   183b4:	e786      	b.n	182c4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   183b6:	2102      	movs	r1, #2
   183b8:	f640 406d 	movw	r0, #3181	; 0xc6d
   183bc:	f7ff fdba 	bl	17f34 <bt_hci_cmd_create>
		if (!buf) {
   183c0:	4604      	mov	r4, r0
   183c2:	b320      	cbz	r0, 1840e <le_init+0x16a>
   183c4:	2102      	movs	r1, #2
   183c6:	300c      	adds	r0, #12
   183c8:	f013 fcea 	bl	2bda0 <net_buf_simple_add>
		cp_le->le = 0x01;
   183cc:	2301      	movs	r3, #1
   183ce:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   183d0:	2200      	movs	r2, #0
   183d2:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   183d4:	4621      	mov	r1, r4
   183d6:	f640 406d 	movw	r0, #3181	; 0xc6d
   183da:	f7ff fde9 	bl	17fb0 <bt_hci_cmd_send_sync>
		if (err) {
   183de:	4603      	mov	r3, r0
   183e0:	2800      	cmp	r0, #0
   183e2:	d0b5      	beq.n	18350 <le_init+0xac>
   183e4:	e76e      	b.n	182c4 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   183e6:	aa03      	add	r2, sp, #12
   183e8:	2100      	movs	r1, #0
   183ea:	f242 001c 	movw	r0, #8220	; 0x201c
   183ee:	f7ff fddf 	bl	17fb0 <bt_hci_cmd_send_sync>
		if (err) {
   183f2:	4603      	mov	r3, r0
   183f4:	2800      	cmp	r0, #0
   183f6:	f47f af65 	bne.w	182c4 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   183fa:	9803      	ldr	r0, [sp, #12]
   183fc:	f7fe fd24 	bl	16e48 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   18400:	9803      	ldr	r0, [sp, #12]
   18402:	f013 fc86 	bl	2bd12 <net_buf_unref>
   18406:	e7a9      	b.n	1835c <le_init+0xb8>
			return -ENOBUFS;
   18408:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1840c:	e75a      	b.n	182c4 <le_init+0x20>
			return -ENOBUFS;
   1840e:	f06f 0368 	mvn.w	r3, #104	; 0x68
   18412:	e757      	b.n	182c4 <le_init+0x20>
   18414:	20000388 	.word	0x20000388
   18418:	0003028c 	.word	0x0003028c
   1841c:	0002eea0 	.word	0x0002eea0

00018420 <bt_br_init>:
{
   18420:	b510      	push	{r4, lr}
   18422:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   18424:	4b0b      	ldr	r3, [pc, #44]	; (18454 <bt_br_init+0x34>)
   18426:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1842a:	b11b      	cbz	r3, 18434 <bt_br_init+0x14>
		return 0;
   1842c:	2400      	movs	r4, #0
}
   1842e:	4620      	mov	r0, r4
   18430:	b002      	add	sp, #8
   18432:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   18434:	aa01      	add	r2, sp, #4
   18436:	2100      	movs	r1, #0
   18438:	f241 0005 	movw	r0, #4101	; 0x1005
   1843c:	f7ff fdb8 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   18440:	4604      	mov	r4, r0
   18442:	2800      	cmp	r0, #0
   18444:	d1f3      	bne.n	1842e <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   18446:	9801      	ldr	r0, [sp, #4]
   18448:	f7fe fd36 	bl	16eb8 <read_buffer_size_complete>
	net_buf_unref(rsp);
   1844c:	9801      	ldr	r0, [sp, #4]
   1844e:	f013 fc60 	bl	2bd12 <net_buf_unref>
	return 0;
   18452:	e7ec      	b.n	1842e <bt_br_init+0xe>
   18454:	20000388 	.word	0x20000388

00018458 <set_event_mask>:
{
   18458:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1845a:	2108      	movs	r1, #8
   1845c:	f640 4001 	movw	r0, #3073	; 0xc01
   18460:	f7ff fd68 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   18464:	b188      	cbz	r0, 1848a <set_event_mask+0x32>
   18466:	4604      	mov	r4, r0
   18468:	2108      	movs	r1, #8
   1846a:	300c      	adds	r0, #12
   1846c:	f013 fc98 	bl	2bda0 <net_buf_simple_add>
   18470:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
   18472:	4807      	ldr	r0, [pc, #28]	; (18490 <set_event_mask+0x38>)
   18474:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   18478:	f011 f9b2 	bl	297e0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1847c:	2200      	movs	r2, #0
   1847e:	4621      	mov	r1, r4
   18480:	f640 4001 	movw	r0, #3073	; 0xc01
   18484:	f7ff fd94 	bl	17fb0 <bt_hci_cmd_send_sync>
}
   18488:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1848a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1848e:	e7fb      	b.n	18488 <set_event_mask+0x30>
   18490:	02008810 	.word	0x02008810

00018494 <hci_vs_init>:
{
   18494:	b510      	push	{r4, lr}
   18496:	b094      	sub	sp, #80	; 0x50
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   18498:	aa01      	add	r2, sp, #4
   1849a:	2100      	movs	r1, #0
   1849c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   184a0:	f7ff fd86 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   184a4:	bb48      	cbnz	r0, 184fa <hci_vs_init+0x66>
	net_buf_unref(rsp);
   184a6:	9801      	ldr	r0, [sp, #4]
   184a8:	f013 fc33 	bl	2bd12 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   184ac:	aa01      	add	r2, sp, #4
   184ae:	2100      	movs	r1, #0
   184b0:	f64f 4002 	movw	r0, #64514	; 0xfc02
   184b4:	f7ff fd7c 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   184b8:	2800      	cmp	r0, #0
   184ba:	d144      	bne.n	18546 <hci_vs_init+0xb2>
	rp.cmds = (void *)rsp->data;
   184bc:	9801      	ldr	r0, [sp, #4]
   184be:	68c3      	ldr	r3, [r0, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   184c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   184c4:	4c45      	ldr	r4, [pc, #276]	; (185dc <hci_vs_init+0x148>)
   184c6:	f8a4 30b9 	strh.w	r3, [r4, #185]	; 0xb9
	net_buf_unref(rsp);
   184ca:	f013 fc22 	bl	2bd12 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   184ce:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   184d2:	f013 0f04 	tst.w	r3, #4
   184d6:	d034      	beq.n	18542 <hci_vs_init+0xae>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   184d8:	aa01      	add	r2, sp, #4
   184da:	2100      	movs	r1, #0
   184dc:	f64f 4003 	movw	r0, #64515	; 0xfc03
   184e0:	f7ff fd66 	bl	17fb0 <bt_hci_cmd_send_sync>
		if (err) {
   184e4:	2800      	cmp	r0, #0
   184e6:	d153      	bne.n	18590 <hci_vs_init+0xfc>
		rp.feat = (void *)rsp->data;
   184e8:	9801      	ldr	r0, [sp, #4]
   184ea:	68c3      	ldr	r3, [r0, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
   184ec:	785a      	ldrb	r2, [r3, #1]
   184ee:	4b3b      	ldr	r3, [pc, #236]	; (185dc <hci_vs_init+0x148>)
   184f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		net_buf_unref(rsp);
   184f4:	f013 fc0d 	bl	2bd12 <net_buf_unref>
   184f8:	e023      	b.n	18542 <hci_vs_init+0xae>
		LOG_WRN("Vendor HCI extensions not available");
   184fa:	4b39      	ldr	r3, [pc, #228]	; (185e0 <hci_vs_init+0x14c>)
   184fc:	9313      	str	r3, [sp, #76]	; 0x4c
   184fe:	2202      	movs	r2, #2
   18500:	f88d 2000 	strb.w	r2, [sp]
   18504:	2300      	movs	r3, #0
   18506:	f88d 3001 	strb.w	r3, [sp, #1]
   1850a:	f88d 3002 	strb.w	r3, [sp, #2]
   1850e:	f88d 3003 	strb.w	r3, [sp, #3]
   18512:	9900      	ldr	r1, [sp, #0]
   18514:	9112      	str	r1, [sp, #72]	; 0x48
   18516:	4619      	mov	r1, r3
   18518:	f363 0100 	bfi	r1, r3, #0, #1
   1851c:	f363 0141 	bfi	r1, r3, #1, #1
   18520:	f363 0182 	bfi	r1, r3, #2, #1
   18524:	f363 01c5 	bfi	r1, r3, #3, #3
   18528:	f362 1188 	bfi	r1, r2, #6, #3
   1852c:	2208      	movs	r2, #8
   1852e:	f362 2152 	bfi	r1, r2, #9, #10
   18532:	f363 41de 	bfi	r1, r3, #19, #12
   18536:	f363 71df 	bfi	r1, r3, #31, #1
   1853a:	aa12      	add	r2, sp, #72	; 0x48
   1853c:	4829      	ldr	r0, [pc, #164]	; (185e4 <hci_vs_init+0x150>)
   1853e:	f010 fc40 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   18542:	b014      	add	sp, #80	; 0x50
   18544:	bd10      	pop	{r4, pc}
		LOG_WRN("Failed to read supported vendor commands");
   18546:	4b28      	ldr	r3, [pc, #160]	; (185e8 <hci_vs_init+0x154>)
   18548:	930d      	str	r3, [sp, #52]	; 0x34
   1854a:	2202      	movs	r2, #2
   1854c:	f88d 2000 	strb.w	r2, [sp]
   18550:	2300      	movs	r3, #0
   18552:	f88d 3001 	strb.w	r3, [sp, #1]
   18556:	f88d 3002 	strb.w	r3, [sp, #2]
   1855a:	f88d 3003 	strb.w	r3, [sp, #3]
   1855e:	9900      	ldr	r1, [sp, #0]
   18560:	910c      	str	r1, [sp, #48]	; 0x30
   18562:	4619      	mov	r1, r3
   18564:	f363 0100 	bfi	r1, r3, #0, #1
   18568:	f363 0141 	bfi	r1, r3, #1, #1
   1856c:	f363 0182 	bfi	r1, r3, #2, #1
   18570:	f363 01c5 	bfi	r1, r3, #3, #3
   18574:	f362 1188 	bfi	r1, r2, #6, #3
   18578:	2208      	movs	r2, #8
   1857a:	f362 2152 	bfi	r1, r2, #9, #10
   1857e:	f363 41de 	bfi	r1, r3, #19, #12
   18582:	f363 71df 	bfi	r1, r3, #31, #1
   18586:	aa0c      	add	r2, sp, #48	; 0x30
   18588:	4816      	ldr	r0, [pc, #88]	; (185e4 <hci_vs_init+0x150>)
   1858a:	f010 fc1a 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return;
   1858e:	e7d8      	b.n	18542 <hci_vs_init+0xae>
			LOG_WRN("Failed to read supported vendor features");
   18590:	4b16      	ldr	r3, [pc, #88]	; (185ec <hci_vs_init+0x158>)
   18592:	9307      	str	r3, [sp, #28]
   18594:	2202      	movs	r2, #2
   18596:	f88d 2000 	strb.w	r2, [sp]
   1859a:	2300      	movs	r3, #0
   1859c:	f88d 3001 	strb.w	r3, [sp, #1]
   185a0:	f88d 3002 	strb.w	r3, [sp, #2]
   185a4:	f88d 3003 	strb.w	r3, [sp, #3]
   185a8:	9900      	ldr	r1, [sp, #0]
   185aa:	9106      	str	r1, [sp, #24]
   185ac:	4619      	mov	r1, r3
   185ae:	f363 0100 	bfi	r1, r3, #0, #1
   185b2:	f363 0141 	bfi	r1, r3, #1, #1
   185b6:	f363 0182 	bfi	r1, r3, #2, #1
   185ba:	f363 01c5 	bfi	r1, r3, #3, #3
   185be:	f362 1188 	bfi	r1, r2, #6, #3
   185c2:	2208      	movs	r2, #8
   185c4:	f362 2152 	bfi	r1, r2, #9, #10
   185c8:	f363 41de 	bfi	r1, r3, #19, #12
   185cc:	f363 71df 	bfi	r1, r3, #31, #1
   185d0:	aa06      	add	r2, sp, #24
   185d2:	4804      	ldr	r0, [pc, #16]	; (185e4 <hci_vs_init+0x150>)
   185d4:	f010 fbf5 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return;
   185d8:	e7b3      	b.n	18542 <hci_vs_init+0xae>
   185da:	bf00      	nop
   185dc:	20000388 	.word	0x20000388
   185e0:	000302b0 	.word	0x000302b0
   185e4:	0002eea0 	.word	0x0002eea0
   185e8:	000302d4 	.word	0x000302d4
   185ec:	00030300 	.word	0x00030300

000185f0 <hci_init>:
{
   185f0:	b500      	push	{lr}
   185f2:	b089      	sub	sp, #36	; 0x24
	err = common_init();
   185f4:	f7ff fd94 	bl	18120 <common_init>
	if (err) {
   185f8:	4603      	mov	r3, r0
   185fa:	b118      	cbz	r0, 18604 <hci_init+0x14>
}
   185fc:	4618      	mov	r0, r3
   185fe:	b009      	add	sp, #36	; 0x24
   18600:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   18604:	f7ff fe4e 	bl	182a4 <le_init>
	if (err) {
   18608:	4603      	mov	r3, r0
   1860a:	2800      	cmp	r0, #0
   1860c:	d1f6      	bne.n	185fc <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1860e:	4b21      	ldr	r3, [pc, #132]	; (18694 <hci_init+0xa4>)
   18610:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   18614:	f013 0f20 	tst.w	r3, #32
   18618:	d00e      	beq.n	18638 <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   1861a:	4b1e      	ldr	r3, [pc, #120]	; (18694 <hci_init+0xa4>)
   1861c:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   18620:	b183      	cbz	r3, 18644 <hci_init+0x54>
	err = set_event_mask();
   18622:	f7ff ff19 	bl	18458 <set_event_mask>
	if (err) {
   18626:	4603      	mov	r3, r0
   18628:	2800      	cmp	r0, #0
   1862a:	d1e7      	bne.n	185fc <hci_init+0xc>
	hci_vs_init();
   1862c:	f7ff ff32 	bl	18494 <hci_vs_init>
	err = bt_id_init();
   18630:	f001 fa50 	bl	19ad4 <bt_id_init>
   18634:	4603      	mov	r3, r0
	if (err) {
   18636:	e7e1      	b.n	185fc <hci_init+0xc>
		err = bt_br_init();
   18638:	f7ff fef2 	bl	18420 <bt_br_init>
		if (err) {
   1863c:	4603      	mov	r3, r0
   1863e:	2800      	cmp	r0, #0
   18640:	d0ef      	beq.n	18622 <hci_init+0x32>
   18642:	e7db      	b.n	185fc <hci_init+0xc>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   18644:	4b14      	ldr	r3, [pc, #80]	; (18698 <hci_init+0xa8>)
   18646:	9307      	str	r3, [sp, #28]
   18648:	2302      	movs	r3, #2
   1864a:	f88d 3004 	strb.w	r3, [sp, #4]
   1864e:	2300      	movs	r3, #0
   18650:	f88d 3005 	strb.w	r3, [sp, #5]
   18654:	f88d 3006 	strb.w	r3, [sp, #6]
   18658:	f88d 3007 	strb.w	r3, [sp, #7]
   1865c:	9a01      	ldr	r2, [sp, #4]
   1865e:	9206      	str	r2, [sp, #24]
   18660:	4619      	mov	r1, r3
   18662:	f363 0100 	bfi	r1, r3, #0, #1
   18666:	f363 0141 	bfi	r1, r3, #1, #1
   1866a:	f363 0182 	bfi	r1, r3, #2, #1
   1866e:	f363 01c5 	bfi	r1, r3, #3, #3
   18672:	2201      	movs	r2, #1
   18674:	f362 1188 	bfi	r1, r2, #6, #3
   18678:	2208      	movs	r2, #8
   1867a:	f362 2152 	bfi	r1, r2, #9, #10
   1867e:	f363 41de 	bfi	r1, r3, #19, #12
   18682:	f363 71df 	bfi	r1, r3, #31, #1
   18686:	aa06      	add	r2, sp, #24
   18688:	4804      	ldr	r0, [pc, #16]	; (1869c <hci_init+0xac>)
   1868a:	f010 fb9a 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -EIO;
   1868e:	f06f 0304 	mvn.w	r3, #4
   18692:	e7b3      	b.n	185fc <hci_init+0xc>
   18694:	20000388 	.word	0x20000388
   18698:	0003032c 	.word	0x0003032c
   1869c:	0002eea0 	.word	0x0002eea0

000186a0 <bt_hci_le_rand>:
{
   186a0:	b570      	push	{r4, r5, r6, lr}
   186a2:	b082      	sub	sp, #8
   186a4:	4606      	mov	r6, r0
   186a6:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   186a8:	4b12      	ldr	r3, [pc, #72]	; (186f4 <bt_hci_le_rand+0x54>)
   186aa:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   186ae:	2b00      	cmp	r3, #0
   186b0:	da1d      	bge.n	186ee <bt_hci_le_rand+0x4e>
	while (len > 0) {
   186b2:	b1c4      	cbz	r4, 186e6 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   186b4:	4625      	mov	r5, r4
   186b6:	2c08      	cmp	r4, #8
   186b8:	bf28      	it	cs
   186ba:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   186bc:	aa01      	add	r2, sp, #4
   186be:	2100      	movs	r1, #0
   186c0:	f242 0018 	movw	r0, #8216	; 0x2018
   186c4:	f7ff fc74 	bl	17fb0 <bt_hci_cmd_send_sync>
		if (err) {
   186c8:	4603      	mov	r3, r0
   186ca:	b968      	cbnz	r0, 186e8 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   186cc:	9b01      	ldr	r3, [sp, #4]
   186ce:	68d9      	ldr	r1, [r3, #12]
   186d0:	462a      	mov	r2, r5
   186d2:	3101      	adds	r1, #1
   186d4:	4630      	mov	r0, r6
   186d6:	f015 fdf8 	bl	2e2ca <memcpy>
		net_buf_unref(rsp);
   186da:	9801      	ldr	r0, [sp, #4]
   186dc:	f013 fb19 	bl	2bd12 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   186e0:	442e      	add	r6, r5
		len -= count;
   186e2:	1b64      	subs	r4, r4, r5
   186e4:	e7e5      	b.n	186b2 <bt_hci_le_rand+0x12>
	return 0;
   186e6:	2300      	movs	r3, #0
}
   186e8:	4618      	mov	r0, r3
   186ea:	b002      	add	sp, #8
   186ec:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   186ee:	f06f 0385 	mvn.w	r3, #133	; 0x85
   186f2:	e7f9      	b.n	186e8 <bt_hci_le_rand+0x48>
   186f4:	20000388 	.word	0x20000388

000186f8 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   186f8:	7a83      	ldrb	r3, [r0, #10]
   186fa:	2b07      	cmp	r3, #7
   186fc:	d000      	beq.n	18700 <conn_auto_initiate+0x8>
   186fe:	4770      	bx	lr
{
   18700:	b5f0      	push	{r4, r5, r6, r7, lr}
   18702:	b085      	sub	sp, #20
   18704:	af02      	add	r7, sp, #8
   18706:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18708:	210c      	movs	r1, #12
   1870a:	3004      	adds	r0, #4
   1870c:	f011 f8ab 	bl	29866 <atomic_test_bit>
   18710:	2800      	cmp	r0, #0
   18712:	d144      	bne.n	1879e <conn_auto_initiate+0xa6>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   18714:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18716:	b12b      	cbz	r3, 18724 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   18718:	4b7a      	ldr	r3, [pc, #488]	; (18904 <conn_auto_initiate+0x20c>)
   1871a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1871e:	f013 0f08 	tst.w	r3, #8
   18722:	d03c      	beq.n	1879e <conn_auto_initiate+0xa6>
		err = hci_le_read_remote_features(conn);
   18724:	4620      	mov	r0, r4
   18726:	f011 f90c 	bl	29942 <hci_le_read_remote_features>
		if (err) {
   1872a:	4606      	mov	r6, r0
   1872c:	b3b8      	cbz	r0, 1879e <conn_auto_initiate+0xa6>
			LOG_ERR("Failed read remote features (%d)", err);
   1872e:	466d      	mov	r5, sp
   18730:	b088      	sub	sp, #32
   18732:	ab02      	add	r3, sp, #8
   18734:	f113 0210 	adds.w	r2, r3, #16
   18738:	d04b      	beq.n	187d2 <conn_auto_initiate+0xda>
   1873a:	210c      	movs	r1, #12
   1873c:	b14a      	cbz	r2, 18752 <conn_auto_initiate+0x5a>
   1873e:	4608      	mov	r0, r1
   18740:	2904      	cmp	r1, #4
   18742:	dd03      	ble.n	1874c <conn_auto_initiate+0x54>
   18744:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 18910 <conn_auto_initiate+0x218>
   18748:	f8c3 c014 	str.w	ip, [r3, #20]
   1874c:	2808      	cmp	r0, #8
   1874e:	dd00      	ble.n	18752 <conn_auto_initiate+0x5a>
   18750:	619e      	str	r6, [r3, #24]
   18752:	290b      	cmp	r1, #11
   18754:	dd40      	ble.n	187d8 <conn_auto_initiate+0xe0>
   18756:	f04f 0c0c 	mov.w	ip, #12
   1875a:	b13a      	cbz	r2, 1876c <conn_auto_initiate+0x74>
   1875c:	2103      	movs	r1, #3
   1875e:	7139      	strb	r1, [r7, #4]
   18760:	2100      	movs	r1, #0
   18762:	7179      	strb	r1, [r7, #5]
   18764:	71b9      	strb	r1, [r7, #6]
   18766:	71f9      	strb	r1, [r7, #7]
   18768:	6878      	ldr	r0, [r7, #4]
   1876a:	6118      	str	r0, [r3, #16]
   1876c:	2100      	movs	r1, #0
   1876e:	f36f 0100 	bfc	r1, #0, #1
   18772:	f36f 0141 	bfc	r1, #1, #1
   18776:	f36f 0182 	bfc	r1, #2, #1
   1877a:	f36f 01c5 	bfc	r1, #3, #3
   1877e:	2301      	movs	r3, #1
   18780:	f363 1188 	bfi	r1, r3, #6, #3
   18784:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   18788:	f36c 2152 	bfi	r1, ip, #9, #10
   1878c:	f36f 41de 	bfc	r1, #19, #12
   18790:	f36f 71df 	bfc	r1, #31, #1
   18794:	2300      	movs	r3, #0
   18796:	485c      	ldr	r0, [pc, #368]	; (18908 <conn_auto_initiate+0x210>)
   18798:	f010 fb13 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1879c:	46ad      	mov	sp, r5
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   1879e:	4b59      	ldr	r3, [pc, #356]	; (18904 <conn_auto_initiate+0x20c>)
   187a0:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   187a4:	f013 0f01 	tst.w	r3, #1
   187a8:	d003      	beq.n	187b2 <conn_auto_initiate+0xba>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
   187aa:	4620      	mov	r0, r4
   187ac:	f011 f858 	bl	29860 <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
   187b0:	b1a8      	cbz	r0, 187de <conn_auto_initiate+0xe6>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   187b2:	4b54      	ldr	r3, [pc, #336]	; (18904 <conn_auto_initiate+0x20c>)
   187b4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   187b8:	f013 0f20 	tst.w	r3, #32
   187bc:	d006      	beq.n	187cc <conn_auto_initiate+0xd4>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   187be:	4b51      	ldr	r3, [pc, #324]	; (18904 <conn_auto_initiate+0x20c>)
   187c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   187c4:	689b      	ldr	r3, [r3, #8]
   187c6:	f013 0f02 	tst.w	r3, #2
   187ca:	d150      	bne.n	1886e <conn_auto_initiate+0x176>
}
   187cc:	370c      	adds	r7, #12
   187ce:	46bd      	mov	sp, r7
   187d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Failed read remote features (%d)", err);
   187d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   187d6:	e7b1      	b.n	1873c <conn_auto_initiate+0x44>
   187d8:	f06f 0c1b 	mvn.w	ip, #27
   187dc:	e7bd      	b.n	1875a <conn_auto_initiate+0x62>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   187de:	2100      	movs	r1, #0
   187e0:	9100      	str	r1, [sp, #0]
   187e2:	2302      	movs	r3, #2
   187e4:	461a      	mov	r2, r3
   187e6:	4620      	mov	r0, r4
   187e8:	f011 f8fb 	bl	299e2 <bt_le_set_phy>
		if (err) {
   187ec:	4605      	mov	r5, r0
   187ee:	2800      	cmp	r0, #0
   187f0:	d0df      	beq.n	187b2 <conn_auto_initiate+0xba>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   187f2:	466e      	mov	r6, sp
   187f4:	b088      	sub	sp, #32
   187f6:	ab02      	add	r3, sp, #8
   187f8:	f113 0210 	adds.w	r2, r3, #16
   187fc:	d031      	beq.n	18862 <conn_auto_initiate+0x16a>
   187fe:	210c      	movs	r1, #12
   18800:	b14a      	cbz	r2, 18816 <conn_auto_initiate+0x11e>
   18802:	4608      	mov	r0, r1
   18804:	2904      	cmp	r1, #4
   18806:	dd03      	ble.n	18810 <conn_auto_initiate+0x118>
   18808:	f8df c108 	ldr.w	ip, [pc, #264]	; 18914 <conn_auto_initiate+0x21c>
   1880c:	f8c3 c014 	str.w	ip, [r3, #20]
   18810:	2808      	cmp	r0, #8
   18812:	dd00      	ble.n	18816 <conn_auto_initiate+0x11e>
   18814:	619d      	str	r5, [r3, #24]
   18816:	290b      	cmp	r1, #11
   18818:	dd26      	ble.n	18868 <conn_auto_initiate+0x170>
   1881a:	250c      	movs	r5, #12
   1881c:	b13a      	cbz	r2, 1882e <conn_auto_initiate+0x136>
   1881e:	2103      	movs	r1, #3
   18820:	7139      	strb	r1, [r7, #4]
   18822:	2100      	movs	r1, #0
   18824:	7179      	strb	r1, [r7, #5]
   18826:	71b9      	strb	r1, [r7, #6]
   18828:	71f9      	strb	r1, [r7, #7]
   1882a:	6878      	ldr	r0, [r7, #4]
   1882c:	6118      	str	r0, [r3, #16]
   1882e:	2100      	movs	r1, #0
   18830:	f36f 0100 	bfc	r1, #0, #1
   18834:	f36f 0141 	bfc	r1, #1, #1
   18838:	f36f 0182 	bfc	r1, #2, #1
   1883c:	f36f 01c5 	bfc	r1, #3, #3
   18840:	2301      	movs	r3, #1
   18842:	f363 1188 	bfi	r1, r3, #6, #3
   18846:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1884a:	f363 2152 	bfi	r1, r3, #9, #10
   1884e:	f36f 41de 	bfc	r1, #19, #12
   18852:	f36f 71df 	bfc	r1, #31, #1
   18856:	2300      	movs	r3, #0
   18858:	482b      	ldr	r0, [pc, #172]	; (18908 <conn_auto_initiate+0x210>)
   1885a:	f010 fab2 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1885e:	46b5      	mov	sp, r6
   18860:	e7a7      	b.n	187b2 <conn_auto_initiate+0xba>
   18862:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18866:	e7cb      	b.n	18800 <conn_auto_initiate+0x108>
   18868:	f06f 051b 	mvn.w	r5, #27
   1886c:	e7d6      	b.n	1881c <conn_auto_initiate+0x124>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1886e:	1cb9      	adds	r1, r7, #2
   18870:	4638      	mov	r0, r7
   18872:	f7ff fc9f 	bl	181b4 <hci_le_read_max_data_len>
			if (!err) {
   18876:	2800      	cmp	r0, #0
   18878:	d1a8      	bne.n	187cc <conn_auto_initiate+0xd4>
				err = bt_le_set_data_len(conn,
   1887a:	887a      	ldrh	r2, [r7, #2]
   1887c:	8839      	ldrh	r1, [r7, #0]
   1887e:	4620      	mov	r0, r4
   18880:	f011 f892 	bl	299a8 <bt_le_set_data_len>
				if (err) {
   18884:	4604      	mov	r4, r0
   18886:	2800      	cmp	r0, #0
   18888:	d0a0      	beq.n	187cc <conn_auto_initiate+0xd4>
					LOG_ERR("Failed to set data len (%d)", err);
   1888a:	466d      	mov	r5, sp
   1888c:	b088      	sub	sp, #32
   1888e:	ab02      	add	r3, sp, #8
   18890:	f113 0210 	adds.w	r2, r3, #16
   18894:	d02f      	beq.n	188f6 <conn_auto_initiate+0x1fe>
   18896:	210c      	movs	r1, #12
   18898:	b13a      	cbz	r2, 188aa <conn_auto_initiate+0x1b2>
   1889a:	4608      	mov	r0, r1
   1889c:	2904      	cmp	r1, #4
   1889e:	dd01      	ble.n	188a4 <conn_auto_initiate+0x1ac>
   188a0:	4e1a      	ldr	r6, [pc, #104]	; (1890c <conn_auto_initiate+0x214>)
   188a2:	615e      	str	r6, [r3, #20]
   188a4:	2808      	cmp	r0, #8
   188a6:	dd00      	ble.n	188aa <conn_auto_initiate+0x1b2>
   188a8:	619c      	str	r4, [r3, #24]
   188aa:	290b      	cmp	r1, #11
   188ac:	dd26      	ble.n	188fc <conn_auto_initiate+0x204>
   188ae:	240c      	movs	r4, #12
   188b0:	b13a      	cbz	r2, 188c2 <conn_auto_initiate+0x1ca>
   188b2:	2103      	movs	r1, #3
   188b4:	7139      	strb	r1, [r7, #4]
   188b6:	2100      	movs	r1, #0
   188b8:	7179      	strb	r1, [r7, #5]
   188ba:	71b9      	strb	r1, [r7, #6]
   188bc:	71f9      	strb	r1, [r7, #7]
   188be:	6878      	ldr	r0, [r7, #4]
   188c0:	6118      	str	r0, [r3, #16]
   188c2:	2100      	movs	r1, #0
   188c4:	f36f 0100 	bfc	r1, #0, #1
   188c8:	f36f 0141 	bfc	r1, #1, #1
   188cc:	f36f 0182 	bfc	r1, #2, #1
   188d0:	f36f 01c5 	bfc	r1, #3, #3
   188d4:	2301      	movs	r3, #1
   188d6:	f363 1188 	bfi	r1, r3, #6, #3
   188da:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   188de:	f363 2152 	bfi	r1, r3, #9, #10
   188e2:	f36f 41de 	bfc	r1, #19, #12
   188e6:	f36f 71df 	bfc	r1, #31, #1
   188ea:	2300      	movs	r3, #0
   188ec:	4806      	ldr	r0, [pc, #24]	; (18908 <conn_auto_initiate+0x210>)
   188ee:	f010 fa68 	bl	28dc2 <z_impl_z_log_msg_static_create>
   188f2:	46ad      	mov	sp, r5
		}
   188f4:	e76a      	b.n	187cc <conn_auto_initiate+0xd4>
					LOG_ERR("Failed to set data len (%d)", err);
   188f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   188fa:	e7cd      	b.n	18898 <conn_auto_initiate+0x1a0>
   188fc:	f06f 041b 	mvn.w	r4, #27
   18900:	e7d6      	b.n	188b0 <conn_auto_initiate+0x1b8>
   18902:	bf00      	nop
   18904:	20000388 	.word	0x20000388
   18908:	0002eea0 	.word	0x0002eea0
   1890c:	0003038c 	.word	0x0003038c
   18910:	00030350 	.word	0x00030350
   18914:	00030374 	.word	0x00030374

00018918 <bt_hci_le_enh_conn_complete>:
{
   18918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1891c:	b087      	sub	sp, #28
   1891e:	af00      	add	r7, sp, #0
   18920:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18922:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   18926:	fa1f f988 	uxth.w	r9, r8
	bool is_disconnected = conn_handle_is_disconnected(handle);
   1892a:	4648      	mov	r0, r9
   1892c:	f7fe fa32 	bl	16d94 <conn_handle_is_disconnected>
   18930:	4606      	mov	r6, r0
	if (evt->status) {
   18932:	7820      	ldrb	r0, [r4, #0]
   18934:	2800      	cmp	r0, #0
   18936:	d040      	beq.n	189ba <bt_hci_le_enh_conn_complete+0xa2>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18938:	283c      	cmp	r0, #60	; 0x3c
   1893a:	d035      	beq.n	189a8 <bt_hci_le_enh_conn_complete+0x90>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1893c:	466d      	mov	r5, sp
   1893e:	b088      	sub	sp, #32
   18940:	466b      	mov	r3, sp
   18942:	f113 0210 	adds.w	r2, r3, #16
   18946:	d032      	beq.n	189ae <bt_hci_le_enh_conn_complete+0x96>
   18948:	210c      	movs	r1, #12
   1894a:	b13a      	cbz	r2, 1895c <bt_hci_le_enh_conn_complete+0x44>
   1894c:	460c      	mov	r4, r1
   1894e:	2904      	cmp	r1, #4
   18950:	dd01      	ble.n	18956 <bt_hci_le_enh_conn_complete+0x3e>
   18952:	4e92      	ldr	r6, [pc, #584]	; (18b9c <bt_hci_le_enh_conn_complete+0x284>)
   18954:	615e      	str	r6, [r3, #20]
   18956:	2c08      	cmp	r4, #8
   18958:	dd00      	ble.n	1895c <bt_hci_le_enh_conn_complete+0x44>
   1895a:	6198      	str	r0, [r3, #24]
   1895c:	290b      	cmp	r1, #11
   1895e:	dd29      	ble.n	189b4 <bt_hci_le_enh_conn_complete+0x9c>
   18960:	240c      	movs	r4, #12
   18962:	b13a      	cbz	r2, 18974 <bt_hci_le_enh_conn_complete+0x5c>
   18964:	2103      	movs	r1, #3
   18966:	7139      	strb	r1, [r7, #4]
   18968:	2100      	movs	r1, #0
   1896a:	7179      	strb	r1, [r7, #5]
   1896c:	71b9      	strb	r1, [r7, #6]
   1896e:	71f9      	strb	r1, [r7, #7]
   18970:	6878      	ldr	r0, [r7, #4]
   18972:	6118      	str	r0, [r3, #16]
   18974:	2100      	movs	r1, #0
   18976:	f36f 0100 	bfc	r1, #0, #1
   1897a:	f36f 0141 	bfc	r1, #1, #1
   1897e:	f36f 0182 	bfc	r1, #2, #1
   18982:	f36f 01c5 	bfc	r1, #3, #3
   18986:	2302      	movs	r3, #2
   18988:	f363 1188 	bfi	r1, r3, #6, #3
   1898c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   18990:	f364 2152 	bfi	r1, r4, #9, #10
   18994:	f36f 41de 	bfc	r1, #19, #12
   18998:	f36f 71df 	bfc	r1, #31, #1
   1899c:	2300      	movs	r3, #0
   1899e:	4880      	ldr	r0, [pc, #512]	; (18ba0 <bt_hci_le_enh_conn_complete+0x288>)
   189a0:	f010 fa0f 	bl	28dc2 <z_impl_z_log_msg_static_create>
   189a4:	46ad      	mov	sp, r5
		return;
   189a6:	e053      	b.n	18a50 <bt_hci_le_enh_conn_complete+0x138>
			le_conn_complete_adv_timeout();
   189a8:	f7fe fb62 	bl	17070 <le_conn_complete_adv_timeout>
			return;
   189ac:	e050      	b.n	18a50 <bt_hci_le_enh_conn_complete+0x138>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   189ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   189b2:	e7ca      	b.n	1894a <bt_hci_le_enh_conn_complete+0x32>
   189b4:	f06f 041b 	mvn.w	r4, #27
   189b8:	e7d3      	b.n	18962 <bt_hci_le_enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   189ba:	7923      	ldrb	r3, [r4, #4]
   189bc:	3b02      	subs	r3, #2
   189be:	b2db      	uxtb	r3, r3
   189c0:	2b01      	cmp	r3, #1
   189c2:	d949      	bls.n	18a58 <bt_hci_le_enh_conn_complete+0x140>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   189c4:	78e3      	ldrb	r3, [r4, #3]
   189c6:	2b01      	cmp	r3, #1
   189c8:	d057      	beq.n	18a7a <bt_hci_le_enh_conn_complete+0x162>
				bt_lookup_id_addr(id, &evt->peer_addr));
   189ca:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   189cc:	4629      	mov	r1, r5
   189ce:	f011 f8a2 	bl	29b16 <bt_lookup_id_addr>
   189d2:	4601      	mov	r1, r0
   189d4:	f107 0008 	add.w	r0, r7, #8
   189d8:	f010 ff57 	bl	2988a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   189dc:	4629      	mov	r1, r5
   189de:	f107 0010 	add.w	r0, r7, #16
   189e2:	f010 ff52 	bl	2988a <bt_addr_le_copy>
	conn = find_pending_connect(evt->role, &id_addr);
   189e6:	f107 0108 	add.w	r1, r7, #8
   189ea:	78e0      	ldrb	r0, [r4, #3]
   189ec:	f7fe fb26 	bl	1703c <find_pending_connect>
   189f0:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   189f2:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   189f4:	2b01      	cmp	r3, #1
   189f6:	d044      	beq.n	18a82 <bt_hci_le_enh_conn_complete+0x16a>
	if (!conn) {
   189f8:	2d00      	cmp	r5, #0
   189fa:	d055      	beq.n	18aa8 <bt_hci_le_enh_conn_complete+0x190>
	conn->handle = handle;
   189fc:	4628      	mov	r0, r5
   189fe:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18a02:	f107 0108 	add.w	r1, r7, #8
   18a06:	f010 ff40 	bl	2988a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18a0a:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   18a0e:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   18a12:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   18a16:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18a1a:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   18a1e:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   18a22:	78e3      	ldrb	r3, [r4, #3]
   18a24:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   18a26:	2200      	movs	r2, #0
   18a28:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18a2a:	2b01      	cmp	r3, #1
   18a2c:	f000 8096 	beq.w	18b5c <bt_hci_le_enh_conn_complete+0x244>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18a30:	2107      	movs	r1, #7
   18a32:	4628      	mov	r0, r5
   18a34:	f002 f822 	bl	1aa7c <bt_conn_set_state>
	if (is_disconnected) {
   18a38:	2e00      	cmp	r6, #0
   18a3a:	f040 80a9 	bne.w	18b90 <bt_hci_le_enh_conn_complete+0x278>
	bt_conn_connected(conn);
   18a3e:	4628      	mov	r0, r5
   18a40:	f011 fc3f 	bl	2a2c2 <bt_conn_connected>
	conn_auto_initiate(conn);
   18a44:	4628      	mov	r0, r5
   18a46:	f7ff fe57 	bl	186f8 <conn_auto_initiate>
	bt_conn_unref(conn);
   18a4a:	4628      	mov	r0, r5
   18a4c:	f011 fbee 	bl	2a22c <bt_conn_unref>
}
   18a50:	371c      	adds	r7, #28
   18a52:	46bd      	mov	sp, r7
   18a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   18a58:	1d21      	adds	r1, r4, #4
   18a5a:	f107 0008 	add.w	r0, r7, #8
   18a5e:	f010 ff14 	bl	2988a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18a62:	7a3b      	ldrb	r3, [r7, #8]
   18a64:	3b02      	subs	r3, #2
   18a66:	723b      	strb	r3, [r7, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   18a68:	f104 0111 	add.w	r1, r4, #17
   18a6c:	f107 0011 	add.w	r0, r7, #17
   18a70:	f010 ff06 	bl	29880 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18a74:	2301      	movs	r3, #1
   18a76:	743b      	strb	r3, [r7, #16]
   18a78:	e7b5      	b.n	189e6 <bt_hci_le_enh_conn_complete+0xce>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   18a7a:	4b4a      	ldr	r3, [pc, #296]	; (18ba4 <bt_hci_le_enh_conn_complete+0x28c>)
   18a7c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   18a80:	e7a3      	b.n	189ca <bt_hci_le_enh_conn_complete+0xb2>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18a82:	f001 f9e9 	bl	19e58 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   18a86:	f100 0310 	add.w	r3, r0, #16
   18a8a:	f3bf 8f5b 	dmb	ish
   18a8e:	e853 1f00 	ldrex	r1, [r3]
   18a92:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   18a96:	e843 1200 	strex	r2, r1, [r3]
   18a9a:	2a00      	cmp	r2, #0
   18a9c:	d1f7      	bne.n	18a8e <bt_hci_le_enh_conn_complete+0x176>
   18a9e:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   18aa2:	f011 fa07 	bl	29eb4 <bt_le_lim_adv_cancel_timeout>
   18aa6:	e7a7      	b.n	189f8 <bt_hci_le_enh_conn_complete+0xe0>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   18aa8:	1d20      	adds	r0, r4, #4
   18aaa:	f7fe f885 	bl	16bb8 <bt_addr_le_str>
   18aae:	466d      	mov	r5, sp
   18ab0:	2300      	movs	r3, #0
   18ab2:	713b      	strb	r3, [r7, #4]
   18ab4:	2302      	movs	r3, #2
   18ab6:	717b      	strb	r3, [r7, #5]
   18ab8:	b088      	sub	sp, #32
   18aba:	466c      	mov	r4, sp
   18abc:	f114 0210 	adds.w	r2, r4, #16
   18ac0:	d011      	beq.n	18ae6 <bt_hci_le_enh_conn_complete+0x1ce>
   18ac2:	260e      	movs	r6, #14
   18ac4:	b11a      	cbz	r2, 18ace <bt_hci_le_enh_conn_complete+0x1b6>
   18ac6:	2e04      	cmp	r6, #4
   18ac8:	dd01      	ble.n	18ace <bt_hci_le_enh_conn_complete+0x1b6>
   18aca:	4b37      	ldr	r3, [pc, #220]	; (18ba8 <bt_hci_le_enh_conn_complete+0x290>)
   18acc:	6163      	str	r3, [r4, #20]
   18ace:	2300      	movs	r3, #0
   18ad0:	703b      	strb	r3, [r7, #0]
   18ad2:	2302      	movs	r3, #2
   18ad4:	707b      	strb	r3, [r7, #1]
   18ad6:	b19a      	cbz	r2, 18b00 <bt_hci_le_enh_conn_complete+0x1e8>
   18ad8:	2e08      	cmp	r6, #8
   18ada:	dd00      	ble.n	18ade <bt_hci_le_enh_conn_complete+0x1c6>
   18adc:	61a0      	str	r0, [r4, #24]
   18ade:	f104 031c 	add.w	r3, r4, #28
   18ae2:	2100      	movs	r1, #0
   18ae4:	e00a      	b.n	18afc <bt_hci_le_enh_conn_complete+0x1e4>
   18ae6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   18aea:	e7eb      	b.n	18ac4 <bt_hci_le_enh_conn_complete+0x1ac>
   18aec:	f101 0018 	add.w	r0, r1, #24
   18af0:	4438      	add	r0, r7
   18af2:	f810 0c18 	ldrb.w	r0, [r0, #-24]
   18af6:	f803 0b01 	strb.w	r0, [r3], #1
   18afa:	3101      	adds	r1, #1
   18afc:	2901      	cmp	r1, #1
   18afe:	d9f5      	bls.n	18aec <bt_hci_le_enh_conn_complete+0x1d4>
   18b00:	2e0d      	cmp	r6, #13
   18b02:	dd28      	ble.n	18b56 <bt_hci_le_enh_conn_complete+0x23e>
   18b04:	230e      	movs	r3, #14
   18b06:	b142      	cbz	r2, 18b1a <bt_hci_le_enh_conn_complete+0x202>
   18b08:	2103      	movs	r1, #3
   18b0a:	7139      	strb	r1, [r7, #4]
   18b0c:	2100      	movs	r1, #0
   18b0e:	7179      	strb	r1, [r7, #5]
   18b10:	71b9      	strb	r1, [r7, #6]
   18b12:	2101      	movs	r1, #1
   18b14:	71f9      	strb	r1, [r7, #7]
   18b16:	6878      	ldr	r0, [r7, #4]
   18b18:	6120      	str	r0, [r4, #16]
   18b1a:	2100      	movs	r1, #0
   18b1c:	f36f 0100 	bfc	r1, #0, #1
   18b20:	f36f 0141 	bfc	r1, #1, #1
   18b24:	f36f 0182 	bfc	r1, #2, #1
   18b28:	f36f 01c5 	bfc	r1, #3, #3
   18b2c:	2001      	movs	r0, #1
   18b2e:	f360 1188 	bfi	r1, r0, #6, #3
   18b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
   18b36:	f363 2152 	bfi	r1, r3, #9, #10
   18b3a:	f36f 41de 	bfc	r1, #19, #12
   18b3e:	f36f 71df 	bfc	r1, #31, #1
   18b42:	2300      	movs	r3, #0
   18b44:	4816      	ldr	r0, [pc, #88]	; (18ba0 <bt_hci_le_enh_conn_complete+0x288>)
   18b46:	f010 f93c 	bl	28dc2 <z_impl_z_log_msg_static_create>
   18b4a:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18b4c:	211f      	movs	r1, #31
   18b4e:	4648      	mov	r0, r9
   18b50:	f010 ff10 	bl	29974 <bt_hci_disconnect>
		return;
   18b54:	e77c      	b.n	18a50 <bt_hci_le_enh_conn_complete+0x138>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   18b56:	f06f 031b 	mvn.w	r3, #27
   18b5a:	e7d4      	b.n	18b06 <bt_hci_le_enh_conn_complete+0x1ee>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   18b5c:	f107 0110 	add.w	r1, r7, #16
   18b60:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   18b64:	f010 fe91 	bl	2988a <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18b68:	f001 f976 	bl	19e58 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   18b6c:	7a29      	ldrb	r1, [r5, #8]
   18b6e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   18b72:	4c0c      	ldr	r4, [pc, #48]	; (18ba4 <bt_hci_le_enh_conn_complete+0x28c>)
				bt_addr_le_copy(&conn->le.resp_addr,
   18b74:	4421      	add	r1, r4
   18b76:	f105 0096 	add.w	r0, r5, #150	; 0x96
   18b7a:	f010 fe86 	bl	2988a <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   18b7e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   18b82:	f013 0f40 	tst.w	r3, #64	; 0x40
   18b86:	f43f af53 	beq.w	18a30 <bt_hci_le_enh_conn_complete+0x118>
			bt_le_adv_resume();
   18b8a:	f011 f998 	bl	29ebe <bt_le_adv_resume>
   18b8e:	e74f      	b.n	18a30 <bt_hci_le_enh_conn_complete+0x118>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18b90:	2101      	movs	r1, #1
   18b92:	4628      	mov	r0, r5
   18b94:	f001 ff72 	bl	1aa7c <bt_conn_set_state>
   18b98:	e751      	b.n	18a3e <bt_hci_le_enh_conn_complete+0x126>
   18b9a:	bf00      	nop
   18b9c:	000303a8 	.word	0x000303a8
   18ba0:	0002eea0 	.word	0x0002eea0
   18ba4:	20000388 	.word	0x20000388
   18ba8:	000303c4 	.word	0x000303c4

00018bac <le_legacy_conn_complete>:
{
   18bac:	b510      	push	{r4, lr}
   18bae:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   18bb0:	68c1      	ldr	r1, [r0, #12]
	enh.status         = evt->status;
   18bb2:	780b      	ldrb	r3, [r1, #0]
   18bb4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   18bb8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   18bbc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   18bc0:	78cb      	ldrb	r3, [r1, #3]
   18bc2:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   18bc6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   18bca:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   18bce:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   18bd2:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   18bd6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   18bda:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   18bde:	7c4b      	ldrb	r3, [r1, #17]
   18be0:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   18be4:	3104      	adds	r1, #4
   18be6:	a801      	add	r0, sp, #4
   18be8:	f010 fe4f 	bl	2988a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   18bec:	4c07      	ldr	r4, [pc, #28]	; (18c0c <le_legacy_conn_complete+0x60>)
   18bee:	4621      	mov	r1, r4
   18bf0:	f10d 000b 	add.w	r0, sp, #11
   18bf4:	f010 fe44 	bl	29880 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   18bf8:	4621      	mov	r1, r4
   18bfa:	f10d 0011 	add.w	r0, sp, #17
   18bfe:	f010 fe3f 	bl	29880 <bt_addr_copy>
	enh_conn_complete(&enh);
   18c02:	4668      	mov	r0, sp
   18c04:	f010 ff12 	bl	29a2c <enh_conn_complete>
}
   18c08:	b008      	add	sp, #32
   18c0a:	bd10      	pop	{r4, pc}
   18c0c:	0002feac 	.word	0x0002feac

00018c10 <bt_send>:
{
   18c10:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   18c12:	4b03      	ldr	r3, [pc, #12]	; (18c20 <bt_send+0x10>)
   18c14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   18c18:	695b      	ldr	r3, [r3, #20]
   18c1a:	4798      	blx	r3
}
   18c1c:	bd08      	pop	{r3, pc}
   18c1e:	bf00      	nop
   18c20:	20000388 	.word	0x20000388

00018c24 <bt_hci_cmd_send>:
{
   18c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c26:	b083      	sub	sp, #12
   18c28:	af00      	add	r7, sp, #0
   18c2a:	4604      	mov	r4, r0
	if (!buf) {
   18c2c:	460d      	mov	r5, r1
   18c2e:	b161      	cbz	r1, 18c4a <bt_hci_cmd_send+0x26>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   18c30:	f640 4335 	movw	r3, #3125	; 0xc35
   18c34:	429c      	cmp	r4, r3
   18c36:	d010      	beq.n	18c5a <bt_hci_cmd_send+0x36>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   18c38:	4629      	mov	r1, r5
   18c3a:	482c      	ldr	r0, [pc, #176]	; (18cec <bt_hci_cmd_send+0xc8>)
   18c3c:	f013 f865 	bl	2bd0a <net_buf_put>
	return 0;
   18c40:	2400      	movs	r4, #0
}
   18c42:	4620      	mov	r0, r4
   18c44:	370c      	adds	r7, #12
   18c46:	46bd      	mov	sp, r7
   18c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   18c4a:	f7ff f973 	bl	17f34 <bt_hci_cmd_create>
		if (!buf) {
   18c4e:	4605      	mov	r5, r0
   18c50:	2800      	cmp	r0, #0
   18c52:	d1ed      	bne.n	18c30 <bt_hci_cmd_send+0xc>
			return -ENOBUFS;
   18c54:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18c58:	e7f3      	b.n	18c42 <bt_hci_cmd_send+0x1e>
		err = bt_send(buf);
   18c5a:	4628      	mov	r0, r5
   18c5c:	f7ff ffd8 	bl	18c10 <bt_send>
		if (err) {
   18c60:	4604      	mov	r4, r0
   18c62:	2800      	cmp	r0, #0
   18c64:	d0ed      	beq.n	18c42 <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   18c66:	466e      	mov	r6, sp
   18c68:	b088      	sub	sp, #32
   18c6a:	466b      	mov	r3, sp
   18c6c:	f113 0210 	adds.w	r2, r3, #16
   18c70:	d035      	beq.n	18cde <bt_hci_cmd_send+0xba>
   18c72:	210c      	movs	r1, #12
   18c74:	b14a      	cbz	r2, 18c8a <bt_hci_cmd_send+0x66>
   18c76:	4608      	mov	r0, r1
   18c78:	2904      	cmp	r1, #4
   18c7a:	dd03      	ble.n	18c84 <bt_hci_cmd_send+0x60>
   18c7c:	f8df c074 	ldr.w	ip, [pc, #116]	; 18cf4 <bt_hci_cmd_send+0xd0>
   18c80:	f8c3 c014 	str.w	ip, [r3, #20]
   18c84:	2808      	cmp	r0, #8
   18c86:	dd00      	ble.n	18c8a <bt_hci_cmd_send+0x66>
   18c88:	619c      	str	r4, [r3, #24]
   18c8a:	290b      	cmp	r1, #11
   18c8c:	dd2a      	ble.n	18ce4 <bt_hci_cmd_send+0xc0>
   18c8e:	f04f 0c0c 	mov.w	ip, #12
   18c92:	b13a      	cbz	r2, 18ca4 <bt_hci_cmd_send+0x80>
   18c94:	2103      	movs	r1, #3
   18c96:	7139      	strb	r1, [r7, #4]
   18c98:	2100      	movs	r1, #0
   18c9a:	7179      	strb	r1, [r7, #5]
   18c9c:	71b9      	strb	r1, [r7, #6]
   18c9e:	71f9      	strb	r1, [r7, #7]
   18ca0:	6878      	ldr	r0, [r7, #4]
   18ca2:	6118      	str	r0, [r3, #16]
   18ca4:	2100      	movs	r1, #0
   18ca6:	f36f 0100 	bfc	r1, #0, #1
   18caa:	f36f 0141 	bfc	r1, #1, #1
   18cae:	f36f 0182 	bfc	r1, #2, #1
   18cb2:	f36f 01c5 	bfc	r1, #3, #3
   18cb6:	2301      	movs	r3, #1
   18cb8:	f363 1188 	bfi	r1, r3, #6, #3
   18cbc:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   18cc0:	f36c 2152 	bfi	r1, ip, #9, #10
   18cc4:	f36f 41de 	bfc	r1, #19, #12
   18cc8:	f36f 71df 	bfc	r1, #31, #1
   18ccc:	2300      	movs	r3, #0
   18cce:	4808      	ldr	r0, [pc, #32]	; (18cf0 <bt_hci_cmd_send+0xcc>)
   18cd0:	f010 f877 	bl	28dc2 <z_impl_z_log_msg_static_create>
   18cd4:	46b5      	mov	sp, r6
			net_buf_unref(buf);
   18cd6:	4628      	mov	r0, r5
   18cd8:	f013 f81b 	bl	2bd12 <net_buf_unref>
		return err;
   18cdc:	e7b1      	b.n	18c42 <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   18cde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18ce2:	e7c7      	b.n	18c74 <bt_hci_cmd_send+0x50>
   18ce4:	f06f 0c1b 	mvn.w	ip, #27
   18ce8:	e7d3      	b.n	18c92 <bt_hci_cmd_send+0x6e>
   18cea:	bf00      	nop
   18cec:	200004c4 	.word	0x200004c4
   18cf0:	0002eea0 	.word	0x0002eea0
   18cf4:	000303e0 	.word	0x000303e0

00018cf8 <le_conn_param_neg_reply>:
{
   18cf8:	b570      	push	{r4, r5, r6, lr}
   18cfa:	b088      	sub	sp, #32
   18cfc:	4605      	mov	r5, r0
   18cfe:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   18d00:	2103      	movs	r1, #3
   18d02:	f242 0021 	movw	r0, #8225	; 0x2021
   18d06:	f7ff f915 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   18d0a:	b168      	cbz	r0, 18d28 <le_conn_param_neg_reply+0x30>
   18d0c:	4606      	mov	r6, r0
   18d0e:	2103      	movs	r1, #3
   18d10:	300c      	adds	r0, #12
   18d12:	f013 f845 	bl	2bda0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   18d16:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   18d18:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18d1a:	4631      	mov	r1, r6
   18d1c:	f242 0021 	movw	r0, #8225	; 0x2021
   18d20:	f7ff ff80 	bl	18c24 <bt_hci_cmd_send>
}
   18d24:	b008      	add	sp, #32
   18d26:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to allocate buffer");
   18d28:	4b12      	ldr	r3, [pc, #72]	; (18d74 <le_conn_param_neg_reply+0x7c>)
   18d2a:	9307      	str	r3, [sp, #28]
   18d2c:	2302      	movs	r3, #2
   18d2e:	f88d 3004 	strb.w	r3, [sp, #4]
   18d32:	2300      	movs	r3, #0
   18d34:	f88d 3005 	strb.w	r3, [sp, #5]
   18d38:	f88d 3006 	strb.w	r3, [sp, #6]
   18d3c:	f88d 3007 	strb.w	r3, [sp, #7]
   18d40:	9a01      	ldr	r2, [sp, #4]
   18d42:	9206      	str	r2, [sp, #24]
   18d44:	4619      	mov	r1, r3
   18d46:	f363 0100 	bfi	r1, r3, #0, #1
   18d4a:	f363 0141 	bfi	r1, r3, #1, #1
   18d4e:	f363 0182 	bfi	r1, r3, #2, #1
   18d52:	f363 01c5 	bfi	r1, r3, #3, #3
   18d56:	2201      	movs	r2, #1
   18d58:	f362 1188 	bfi	r1, r2, #6, #3
   18d5c:	2208      	movs	r2, #8
   18d5e:	f362 2152 	bfi	r1, r2, #9, #10
   18d62:	f363 41de 	bfi	r1, r3, #19, #12
   18d66:	f363 71df 	bfi	r1, r3, #31, #1
   18d6a:	aa06      	add	r2, sp, #24
   18d6c:	4802      	ldr	r0, [pc, #8]	; (18d78 <le_conn_param_neg_reply+0x80>)
   18d6e:	f010 f828 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return;
   18d72:	e7d7      	b.n	18d24 <le_conn_param_neg_reply+0x2c>
   18d74:	00030404 	.word	0x00030404
   18d78:	0002eea0 	.word	0x0002eea0

00018d7c <le_conn_param_req>:
{
   18d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d7e:	b085      	sub	sp, #20
   18d80:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   18d82:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   18d84:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18d86:	885a      	ldrh	r2, [r3, #2]
   18d88:	813a      	strh	r2, [r7, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   18d8a:	889a      	ldrh	r2, [r3, #4]
   18d8c:	817a      	strh	r2, [r7, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   18d8e:	88da      	ldrh	r2, [r3, #6]
   18d90:	81ba      	strh	r2, [r7, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18d92:	891b      	ldrh	r3, [r3, #8]
   18d94:	81fb      	strh	r3, [r7, #14]
	conn = bt_conn_lookup_handle(handle);
   18d96:	4620      	mov	r0, r4
   18d98:	f001 fe66 	bl	1aa68 <bt_conn_lookup_handle>
	if (!conn) {
   18d9c:	b180      	cbz	r0, 18dc0 <le_conn_param_req+0x44>
   18d9e:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   18da0:	f107 0108 	add.w	r1, r7, #8
   18da4:	f002 f886 	bl	1aeb4 <le_param_req>
   18da8:	2800      	cmp	r0, #0
   18daa:	d149      	bne.n	18e40 <le_conn_param_req+0xc4>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   18dac:	211e      	movs	r1, #30
   18dae:	4620      	mov	r0, r4
   18db0:	f7ff ffa2 	bl	18cf8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   18db4:	4628      	mov	r0, r5
   18db6:	f011 fa39 	bl	2a22c <bt_conn_unref>
}
   18dba:	3714      	adds	r7, #20
   18dbc:	46bd      	mov	sp, r7
   18dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   18dc0:	466e      	mov	r6, sp
   18dc2:	b088      	sub	sp, #32
   18dc4:	466b      	mov	r3, sp
   18dc6:	f113 0210 	adds.w	r2, r3, #16
   18dca:	d033      	beq.n	18e34 <le_conn_param_req+0xb8>
   18dcc:	210c      	movs	r1, #12
   18dce:	b13a      	cbz	r2, 18de0 <le_conn_param_req+0x64>
   18dd0:	4608      	mov	r0, r1
   18dd2:	2904      	cmp	r1, #4
   18dd4:	dd01      	ble.n	18dda <le_conn_param_req+0x5e>
   18dd6:	4d1d      	ldr	r5, [pc, #116]	; (18e4c <le_conn_param_req+0xd0>)
   18dd8:	615d      	str	r5, [r3, #20]
   18dda:	2808      	cmp	r0, #8
   18ddc:	dd00      	ble.n	18de0 <le_conn_param_req+0x64>
   18dde:	619c      	str	r4, [r3, #24]
   18de0:	290b      	cmp	r1, #11
   18de2:	dd2a      	ble.n	18e3a <le_conn_param_req+0xbe>
   18de4:	250c      	movs	r5, #12
   18de6:	b13a      	cbz	r2, 18df8 <le_conn_param_req+0x7c>
   18de8:	2103      	movs	r1, #3
   18dea:	7139      	strb	r1, [r7, #4]
   18dec:	2100      	movs	r1, #0
   18dee:	7179      	strb	r1, [r7, #5]
   18df0:	71b9      	strb	r1, [r7, #6]
   18df2:	71f9      	strb	r1, [r7, #7]
   18df4:	6878      	ldr	r0, [r7, #4]
   18df6:	6118      	str	r0, [r3, #16]
   18df8:	2100      	movs	r1, #0
   18dfa:	f36f 0100 	bfc	r1, #0, #1
   18dfe:	f36f 0141 	bfc	r1, #1, #1
   18e02:	f36f 0182 	bfc	r1, #2, #1
   18e06:	f36f 01c5 	bfc	r1, #3, #3
   18e0a:	2301      	movs	r3, #1
   18e0c:	f363 1188 	bfi	r1, r3, #6, #3
   18e10:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   18e14:	f363 2152 	bfi	r1, r3, #9, #10
   18e18:	f36f 41de 	bfc	r1, #19, #12
   18e1c:	f36f 71df 	bfc	r1, #31, #1
   18e20:	2300      	movs	r3, #0
   18e22:	480b      	ldr	r0, [pc, #44]	; (18e50 <le_conn_param_req+0xd4>)
   18e24:	f00f ffcd 	bl	28dc2 <z_impl_z_log_msg_static_create>
   18e28:	46b5      	mov	sp, r6
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   18e2a:	2102      	movs	r1, #2
   18e2c:	4620      	mov	r0, r4
   18e2e:	f7ff ff63 	bl	18cf8 <le_conn_param_neg_reply>
		return;
   18e32:	e7c2      	b.n	18dba <le_conn_param_req+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   18e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18e38:	e7c9      	b.n	18dce <le_conn_param_req+0x52>
   18e3a:	f06f 051b 	mvn.w	r5, #27
   18e3e:	e7d2      	b.n	18de6 <le_conn_param_req+0x6a>
		le_conn_param_req_reply(handle, &param);
   18e40:	f107 0108 	add.w	r1, r7, #8
   18e44:	4620      	mov	r0, r4
   18e46:	f010 fe22 	bl	29a8e <le_conn_param_req_reply>
   18e4a:	e7b3      	b.n	18db4 <le_conn_param_req+0x38>
   18e4c:	0002fffc 	.word	0x0002fffc
   18e50:	0002eea0 	.word	0x0002eea0

00018e54 <send_cmd>:
{
   18e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e56:	b089      	sub	sp, #36	; 0x24
   18e58:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   18e5a:	2200      	movs	r2, #0
   18e5c:	2300      	movs	r3, #0
   18e5e:	4855      	ldr	r0, [pc, #340]	; (18fb4 <send_cmd+0x160>)
   18e60:	f012 ff16 	bl	2bc90 <net_buf_get>
	BT_ASSERT(buf);
   18e64:	4605      	mov	r5, r0
   18e66:	2800      	cmp	r0, #0
   18e68:	d055      	beq.n	18f16 <send_cmd+0xc2>
   18e6a:	4c53      	ldr	r4, [pc, #332]	; (18fb8 <send_cmd+0x164>)
   18e6c:	f04f 32ff 	mov.w	r2, #4294967295
   18e70:	f04f 33ff 	mov.w	r3, #4294967295
   18e74:	4620      	mov	r0, r4
   18e76:	f009 fa2f 	bl	222d8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   18e7a:	69a3      	ldr	r3, [r4, #24]
   18e7c:	b34b      	cbz	r3, 18ed2 <send_cmd+0x7e>
		LOG_ERR("Uncleared pending sent_cmd");
   18e7e:	4b4f      	ldr	r3, [pc, #316]	; (18fbc <send_cmd+0x168>)
   18e80:	61fb      	str	r3, [r7, #28]
   18e82:	2302      	movs	r3, #2
   18e84:	713b      	strb	r3, [r7, #4]
   18e86:	2400      	movs	r4, #0
   18e88:	717c      	strb	r4, [r7, #5]
   18e8a:	71bc      	strb	r4, [r7, #6]
   18e8c:	71fc      	strb	r4, [r7, #7]
   18e8e:	687b      	ldr	r3, [r7, #4]
   18e90:	61bb      	str	r3, [r7, #24]
   18e92:	4621      	mov	r1, r4
   18e94:	f364 0100 	bfi	r1, r4, #0, #1
   18e98:	f364 0141 	bfi	r1, r4, #1, #1
   18e9c:	f364 0182 	bfi	r1, r4, #2, #1
   18ea0:	f364 01c5 	bfi	r1, r4, #3, #3
   18ea4:	2301      	movs	r3, #1
   18ea6:	f363 1188 	bfi	r1, r3, #6, #3
   18eaa:	2308      	movs	r3, #8
   18eac:	f363 2152 	bfi	r1, r3, #9, #10
   18eb0:	f364 41de 	bfi	r1, r4, #19, #12
   18eb4:	f364 71df 	bfi	r1, r4, #31, #1
   18eb8:	4623      	mov	r3, r4
   18eba:	f107 0218 	add.w	r2, r7, #24
   18ebe:	4840      	ldr	r0, [pc, #256]	; (18fc0 <send_cmd+0x16c>)
   18ec0:	f00f ff7f 	bl	28dc2 <z_impl_z_log_msg_static_create>
		net_buf_unref(bt_dev.sent_cmd);
   18ec4:	4e3f      	ldr	r6, [pc, #252]	; (18fc4 <send_cmd+0x170>)
   18ec6:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   18eca:	f012 ff22 	bl	2bd12 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18ece:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   18ed2:	4628      	mov	r0, r5
   18ed4:	f012 ff40 	bl	2bd58 <net_buf_ref>
   18ed8:	4b3a      	ldr	r3, [pc, #232]	; (18fc4 <send_cmd+0x170>)
   18eda:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   18ede:	4628      	mov	r0, r5
   18ee0:	f7ff fe96 	bl	18c10 <bt_send>
	if (err) {
   18ee4:	4604      	mov	r4, r0
   18ee6:	2800      	cmp	r0, #0
   18ee8:	d05d      	beq.n	18fa6 <send_cmd+0x152>
		LOG_ERR("Unable to send to driver (err %d)", err);
   18eea:	466e      	mov	r6, sp
   18eec:	b088      	sub	sp, #32
   18eee:	466b      	mov	r3, sp
   18ef0:	f113 0210 	adds.w	r2, r3, #16
   18ef4:	d01d      	beq.n	18f32 <send_cmd+0xde>
   18ef6:	210c      	movs	r1, #12
   18ef8:	b14a      	cbz	r2, 18f0e <send_cmd+0xba>
   18efa:	4608      	mov	r0, r1
   18efc:	2904      	cmp	r1, #4
   18efe:	dd03      	ble.n	18f08 <send_cmd+0xb4>
   18f00:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 18fd8 <send_cmd+0x184>
   18f04:	f8c3 c014 	str.w	ip, [r3, #20]
   18f08:	2808      	cmp	r0, #8
   18f0a:	dd15      	ble.n	18f38 <send_cmd+0xe4>
   18f0c:	619c      	str	r4, [r3, #24]
   18f0e:	290b      	cmp	r1, #11
   18f10:	dd4c      	ble.n	18fac <send_cmd+0x158>
   18f12:	240c      	movs	r4, #12
   18f14:	e012      	b.n	18f3c <send_cmd+0xe8>
	BT_ASSERT(buf);
   18f16:	f44f 6318 	mov.w	r3, #2432	; 0x980
   18f1a:	4a2b      	ldr	r2, [pc, #172]	; (18fc8 <send_cmd+0x174>)
   18f1c:	492b      	ldr	r1, [pc, #172]	; (18fcc <send_cmd+0x178>)
   18f1e:	482c      	ldr	r0, [pc, #176]	; (18fd0 <send_cmd+0x17c>)
   18f20:	f00f fc35 	bl	2878e <assert_print>
   18f24:	4040      	eors	r0, r0
   18f26:	f380 8811 	msr	BASEPRI, r0
   18f2a:	f04f 0003 	mov.w	r0, #3
   18f2e:	df02      	svc	2
   18f30:	e79b      	b.n	18e6a <send_cmd+0x16>
		LOG_ERR("Unable to send to driver (err %d)", err);
   18f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18f36:	e7df      	b.n	18ef8 <send_cmd+0xa4>
   18f38:	f06f 041b 	mvn.w	r4, #27
   18f3c:	b13a      	cbz	r2, 18f4e <send_cmd+0xfa>
   18f3e:	2103      	movs	r1, #3
   18f40:	7139      	strb	r1, [r7, #4]
   18f42:	2100      	movs	r1, #0
   18f44:	7179      	strb	r1, [r7, #5]
   18f46:	71b9      	strb	r1, [r7, #6]
   18f48:	71f9      	strb	r1, [r7, #7]
   18f4a:	6878      	ldr	r0, [r7, #4]
   18f4c:	6118      	str	r0, [r3, #16]
   18f4e:	2100      	movs	r1, #0
   18f50:	f36f 0100 	bfc	r1, #0, #1
   18f54:	f36f 0141 	bfc	r1, #1, #1
   18f58:	f36f 0182 	bfc	r1, #2, #1
   18f5c:	f36f 01c5 	bfc	r1, #3, #3
   18f60:	2301      	movs	r3, #1
   18f62:	f363 1188 	bfi	r1, r3, #6, #3
   18f66:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   18f6a:	f363 2152 	bfi	r1, r3, #9, #10
   18f6e:	f36f 41de 	bfc	r1, #19, #12
   18f72:	f36f 71df 	bfc	r1, #31, #1
   18f76:	2300      	movs	r3, #0
   18f78:	4811      	ldr	r0, [pc, #68]	; (18fc0 <send_cmd+0x16c>)
   18f7a:	f00f ff22 	bl	28dc2 <z_impl_z_log_msg_static_create>
   18f7e:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
   18f80:	480d      	ldr	r0, [pc, #52]	; (18fb8 <send_cmd+0x164>)
   18f82:	f009 f981 	bl	22288 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   18f86:	4628      	mov	r0, r5
   18f88:	f012 fdd8 	bl	2bb3c <net_buf_id>
   18f8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18f90:	4b10      	ldr	r3, [pc, #64]	; (18fd4 <send_cmd+0x180>)
   18f92:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   18f96:	462a      	mov	r2, r5
   18f98:	211f      	movs	r1, #31
   18f9a:	8858      	ldrh	r0, [r3, #2]
   18f9c:	f7fe fa90 	bl	174c0 <hci_cmd_done>
		net_buf_unref(buf);
   18fa0:	4628      	mov	r0, r5
   18fa2:	f012 feb6 	bl	2bd12 <net_buf_unref>
}
   18fa6:	3724      	adds	r7, #36	; 0x24
   18fa8:	46bd      	mov	sp, r7
   18faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to send to driver (err %d)", err);
   18fac:	f06f 041b 	mvn.w	r4, #27
   18fb0:	e7c4      	b.n	18f3c <send_cmd+0xe8>
   18fb2:	bf00      	nop
   18fb4:	200004c4 	.word	0x200004c4
   18fb8:	200004a0 	.word	0x200004a0
   18fbc:	00030420 	.word	0x00030420
   18fc0:	0002eea0 	.word	0x0002eea0
   18fc4:	20000388 	.word	0x20000388
   18fc8:	00030108 	.word	0x00030108
   18fcc:	00031110 	.word	0x00031110
   18fd0:	00030158 	.word	0x00030158
   18fd4:	20003748 	.word	0x20003748
   18fd8:	000303e0 	.word	0x000303e0

00018fdc <process_events>:
{
   18fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18fe0:	b082      	sub	sp, #8
   18fe2:	af00      	add	r7, sp, #0
   18fe4:	4604      	mov	r4, r0
   18fe6:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
   18fe8:	e03c      	b.n	19064 <process_events+0x88>
				send_cmd();
   18fea:	f7ff ff33 	bl	18e54 <send_cmd>
   18fee:	e037      	b.n	19060 <process_events+0x84>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   18ff0:	46e8      	mov	r8, sp
   18ff2:	b088      	sub	sp, #32
   18ff4:	4669      	mov	r1, sp
   18ff6:	f111 0210 	adds.w	r2, r1, #16
   18ffa:	d045      	beq.n	19088 <process_events+0xac>
   18ffc:	200c      	movs	r0, #12
   18ffe:	b152      	cbz	r2, 19016 <process_events+0x3a>
   19000:	4684      	mov	ip, r0
   19002:	2804      	cmp	r0, #4
   19004:	dd03      	ble.n	1900e <process_events+0x32>
   19006:	f8df e098 	ldr.w	lr, [pc, #152]	; 190a0 <process_events+0xc4>
   1900a:	f8c1 e014 	str.w	lr, [r1, #20]
   1900e:	f1bc 0f08 	cmp.w	ip, #8
   19012:	dd00      	ble.n	19016 <process_events+0x3a>
   19014:	618b      	str	r3, [r1, #24]
   19016:	280b      	cmp	r0, #11
   19018:	dd39      	ble.n	1908e <process_events+0xb2>
   1901a:	230c      	movs	r3, #12
   1901c:	b13a      	cbz	r2, 1902e <process_events+0x52>
   1901e:	2003      	movs	r0, #3
   19020:	7138      	strb	r0, [r7, #4]
   19022:	2000      	movs	r0, #0
   19024:	7178      	strb	r0, [r7, #5]
   19026:	71b8      	strb	r0, [r7, #6]
   19028:	71f8      	strb	r0, [r7, #7]
   1902a:	6878      	ldr	r0, [r7, #4]
   1902c:	6108      	str	r0, [r1, #16]
   1902e:	f36f 0600 	bfc	r6, #0, #1
   19032:	f36f 0641 	bfc	r6, #1, #1
   19036:	f36f 0682 	bfc	r6, #2, #1
   1903a:	f36f 06c5 	bfc	r6, #3, #3
   1903e:	2102      	movs	r1, #2
   19040:	f361 1688 	bfi	r6, r1, #6, #3
   19044:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   19048:	f363 2652 	bfi	r6, r3, #9, #10
   1904c:	f36f 46de 	bfc	r6, #19, #12
   19050:	f36f 76df 	bfc	r6, #31, #1
   19054:	2300      	movs	r3, #0
   19056:	4631      	mov	r1, r6
   19058:	4810      	ldr	r0, [pc, #64]	; (1909c <process_events+0xc0>)
   1905a:	f00f feb2 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1905e:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
   19060:	3414      	adds	r4, #20
   19062:	3d01      	subs	r5, #1
   19064:	b1b5      	cbz	r5, 19094 <process_events+0xb8>
		switch (ev->state) {
   19066:	68e3      	ldr	r3, [r4, #12]
   19068:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1906c:	2b01      	cmp	r3, #1
   1906e:	d9f7      	bls.n	19060 <process_events+0x84>
   19070:	2b04      	cmp	r3, #4
   19072:	d1bd      	bne.n	18ff0 <process_events+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
   19074:	7b23      	ldrb	r3, [r4, #12]
   19076:	2b00      	cmp	r3, #0
   19078:	d0b7      	beq.n	18fea <process_events+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1907a:	2b01      	cmp	r3, #1
   1907c:	d1f0      	bne.n	19060 <process_events+0x84>
					conn = CONTAINER_OF(ev->fifo,
   1907e:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   19080:	3838      	subs	r0, #56	; 0x38
   19082:	f002 f9c1 	bl	1b408 <bt_conn_process_tx>
   19086:	e7eb      	b.n	19060 <process_events+0x84>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   19088:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1908c:	e7b7      	b.n	18ffe <process_events+0x22>
   1908e:	f06f 031b 	mvn.w	r3, #27
   19092:	e7c3      	b.n	1901c <process_events+0x40>
}
   19094:	3708      	adds	r7, #8
   19096:	46bd      	mov	sp, r7
   19098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1909c:	0002eea0 	.word	0x0002eea0
   190a0:	0003043c 	.word	0x0003043c

000190a4 <hci_tx_thread>:
{
   190a4:	b538      	push	{r3, r4, r5, lr}
   190a6:	e012      	b.n	190ce <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
   190a8:	f640 13e6 	movw	r3, #2534	; 0x9e6
   190ac:	4a12      	ldr	r2, [pc, #72]	; (190f8 <hci_tx_thread+0x54>)
   190ae:	4913      	ldr	r1, [pc, #76]	; (190fc <hci_tx_thread+0x58>)
   190b0:	4813      	ldr	r0, [pc, #76]	; (19100 <hci_tx_thread+0x5c>)
   190b2:	f00f fb6c 	bl	2878e <assert_print>
   190b6:	4040      	eors	r0, r0
   190b8:	f380 8811 	msr	BASEPRI, r0
   190bc:	f04f 0003 	mov.w	r0, #3
   190c0:	df02      	svc	2
		process_events(events, ev_count);
   190c2:	4621      	mov	r1, r4
   190c4:	480f      	ldr	r0, [pc, #60]	; (19104 <hci_tx_thread+0x60>)
   190c6:	f7ff ff89 	bl	18fdc <process_events>
	z_impl_k_yield();
   190ca:	f009 fd69 	bl	22ba0 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   190ce:	4d0d      	ldr	r5, [pc, #52]	; (19104 <hci_tx_thread+0x60>)
   190d0:	68eb      	ldr	r3, [r5, #12]
   190d2:	f36f 3394 	bfc	r3, #14, #7
   190d6:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   190d8:	f105 0014 	add.w	r0, r5, #20
   190dc:	f001 fca0 	bl	1aa20 <bt_conn_prepare_events>
   190e0:	1c44      	adds	r4, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   190e2:	f04f 32ff 	mov.w	r2, #4294967295
   190e6:	f04f 33ff 	mov.w	r3, #4294967295
   190ea:	4621      	mov	r1, r4
   190ec:	4628      	mov	r0, r5
   190ee:	f00a f897 	bl	23220 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   190f2:	2800      	cmp	r0, #0
   190f4:	d1d8      	bne.n	190a8 <hci_tx_thread+0x4>
   190f6:	e7e4      	b.n	190c2 <hci_tx_thread+0x1e>
   190f8:	00030108 	.word	0x00030108
   190fc:	00030224 	.word	0x00030224
   19100:	00030158 	.word	0x00030158
   19104:	20000688 	.word	0x20000688

00019108 <hci_event_prio>:
{
   19108:	b570      	push	{r4, r5, r6, lr}
   1910a:	b082      	sub	sp, #8
   1910c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1910e:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   19112:	4628      	mov	r0, r5
   19114:	f012 fe7c 	bl	2be10 <net_buf_simple_headroom>
   19118:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   1911c:	8a23      	ldrh	r3, [r4, #16]
   1911e:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19122:	2b01      	cmp	r3, #1
   19124:	d91e      	bls.n	19164 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   19126:	2102      	movs	r1, #2
   19128:	4628      	mov	r0, r5
   1912a:	f012 fe61 	bl	2bdf0 <net_buf_simple_pull_mem>
   1912e:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19130:	7800      	ldrb	r0, [r0, #0]
   19132:	f010 fb7f 	bl	29834 <bt_hci_evt_get_flags>
   19136:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19138:	f010 0f01 	tst.w	r0, #1
   1913c:	d020      	beq.n	19180 <hci_event_prio+0x78>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1913e:	2305      	movs	r3, #5
   19140:	4a18      	ldr	r2, [pc, #96]	; (191a4 <hci_event_prio+0x9c>)
   19142:	4621      	mov	r1, r4
   19144:	7830      	ldrb	r0, [r6, #0]
   19146:	f7fe fb99 	bl	1787c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1914a:	f015 0f02 	tst.w	r5, #2
   1914e:	d025      	beq.n	1919c <hci_event_prio+0x94>
	buf->data = buf->__buf + state->offset;
   19150:	6963      	ldr	r3, [r4, #20]
   19152:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   19156:	4413      	add	r3, r2
   19158:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   1915a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1915e:	8223      	strh	r3, [r4, #16]
}
   19160:	b002      	add	sp, #8
   19162:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19164:	f640 537b 	movw	r3, #3451	; 0xd7b
   19168:	4a0f      	ldr	r2, [pc, #60]	; (191a8 <hci_event_prio+0xa0>)
   1916a:	4910      	ldr	r1, [pc, #64]	; (191ac <hci_event_prio+0xa4>)
   1916c:	4810      	ldr	r0, [pc, #64]	; (191b0 <hci_event_prio+0xa8>)
   1916e:	f00f fb0e 	bl	2878e <assert_print>
   19172:	4040      	eors	r0, r0
   19174:	f380 8811 	msr	BASEPRI, r0
   19178:	f04f 0003 	mov.w	r0, #3
   1917c:	df02      	svc	2
   1917e:	e7d2      	b.n	19126 <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19180:	f640 537f 	movw	r3, #3455	; 0xd7f
   19184:	4a08      	ldr	r2, [pc, #32]	; (191a8 <hci_event_prio+0xa0>)
   19186:	490b      	ldr	r1, [pc, #44]	; (191b4 <hci_event_prio+0xac>)
   19188:	4809      	ldr	r0, [pc, #36]	; (191b0 <hci_event_prio+0xa8>)
   1918a:	f00f fb00 	bl	2878e <assert_print>
   1918e:	4040      	eors	r0, r0
   19190:	f380 8811 	msr	BASEPRI, r0
   19194:	f04f 0003 	mov.w	r0, #3
   19198:	df02      	svc	2
   1919a:	e7d0      	b.n	1913e <hci_event_prio+0x36>
		net_buf_unref(buf);
   1919c:	4620      	mov	r0, r4
   1919e:	f012 fdb8 	bl	2bd12 <net_buf_unref>
}
   191a2:	e7dd      	b.n	19160 <hci_event_prio+0x58>
   191a4:	000304d8 	.word	0x000304d8
   191a8:	00030108 	.word	0x00030108
   191ac:	0003013c 	.word	0x0003013c
   191b0:	00030158 	.word	0x00030158
   191b4:	00030460 	.word	0x00030460

000191b8 <bt_recv>:
{
   191b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   191ba:	b083      	sub	sp, #12
   191bc:	af00      	add	r7, sp, #0
   191be:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   191c0:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   191c2:	2b01      	cmp	r3, #1
   191c4:	d007      	beq.n	191d6 <bt_recv+0x1e>
   191c6:	2b03      	cmp	r3, #3
   191c8:	d11b      	bne.n	19202 <bt_recv+0x4a>
		rx_queue_put(buf);
   191ca:	f7fe fc21 	bl	17a10 <rx_queue_put>
		return 0;
   191ce:	2000      	movs	r0, #0
}
   191d0:	370c      	adds	r7, #12
   191d2:	46bd      	mov	sp, r7
   191d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   191d6:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   191d8:	7818      	ldrb	r0, [r3, #0]
   191da:	f010 fb2b 	bl	29834 <bt_hci_evt_get_flags>
   191de:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   191e0:	f010 0f01 	tst.w	r0, #1
   191e4:	d104      	bne.n	191f0 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   191e6:	f015 0f02 	tst.w	r5, #2
   191ea:	d105      	bne.n	191f8 <bt_recv+0x40>
		return 0;
   191ec:	2000      	movs	r0, #0
   191ee:	e7ef      	b.n	191d0 <bt_recv+0x18>
			hci_event_prio(buf);
   191f0:	4620      	mov	r0, r4
   191f2:	f7ff ff89 	bl	19108 <hci_event_prio>
   191f6:	e7f6      	b.n	191e6 <bt_recv+0x2e>
			rx_queue_put(buf);
   191f8:	4620      	mov	r0, r4
   191fa:	f7fe fc09 	bl	17a10 <rx_queue_put>
		return 0;
   191fe:	2000      	movs	r0, #0
   19200:	e7e6      	b.n	191d0 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   19202:	466d      	mov	r5, sp
   19204:	b088      	sub	sp, #32
   19206:	4669      	mov	r1, sp
   19208:	f111 0210 	adds.w	r2, r1, #16
   1920c:	d035      	beq.n	1927a <bt_recv+0xc2>
   1920e:	200c      	movs	r0, #12
   19210:	b142      	cbz	r2, 19224 <bt_recv+0x6c>
   19212:	4684      	mov	ip, r0
   19214:	2804      	cmp	r0, #4
   19216:	dd01      	ble.n	1921c <bt_recv+0x64>
   19218:	4e1b      	ldr	r6, [pc, #108]	; (19288 <bt_recv+0xd0>)
   1921a:	614e      	str	r6, [r1, #20]
   1921c:	f1bc 0f08 	cmp.w	ip, #8
   19220:	dd00      	ble.n	19224 <bt_recv+0x6c>
   19222:	618b      	str	r3, [r1, #24]
   19224:	280b      	cmp	r0, #11
   19226:	dd2b      	ble.n	19280 <bt_recv+0xc8>
   19228:	230c      	movs	r3, #12
   1922a:	b13a      	cbz	r2, 1923c <bt_recv+0x84>
   1922c:	2003      	movs	r0, #3
   1922e:	7138      	strb	r0, [r7, #4]
   19230:	2000      	movs	r0, #0
   19232:	7178      	strb	r0, [r7, #5]
   19234:	71b8      	strb	r0, [r7, #6]
   19236:	71f8      	strb	r0, [r7, #7]
   19238:	6878      	ldr	r0, [r7, #4]
   1923a:	6108      	str	r0, [r1, #16]
   1923c:	2100      	movs	r1, #0
   1923e:	f36f 0100 	bfc	r1, #0, #1
   19242:	f36f 0141 	bfc	r1, #1, #1
   19246:	f36f 0182 	bfc	r1, #2, #1
   1924a:	f36f 01c5 	bfc	r1, #3, #3
   1924e:	2001      	movs	r0, #1
   19250:	f360 1188 	bfi	r1, r0, #6, #3
   19254:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   19258:	f363 2152 	bfi	r1, r3, #9, #10
   1925c:	f36f 41de 	bfc	r1, #19, #12
   19260:	f36f 71df 	bfc	r1, #31, #1
   19264:	2300      	movs	r3, #0
   19266:	4809      	ldr	r0, [pc, #36]	; (1928c <bt_recv+0xd4>)
   19268:	f00f fdab 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1926c:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1926e:	4620      	mov	r0, r4
   19270:	f012 fd4f 	bl	2bd12 <net_buf_unref>
		return -EINVAL;
   19274:	f06f 0015 	mvn.w	r0, #21
   19278:	e7aa      	b.n	191d0 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1927a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1927e:	e7c7      	b.n	19210 <bt_recv+0x58>
   19280:	f06f 031b 	mvn.w	r3, #27
   19284:	e7d1      	b.n	1922a <bt_recv+0x72>
   19286:	bf00      	nop
   19288:	0003047c 	.word	0x0003047c
   1928c:	0002eea0 	.word	0x0002eea0

00019290 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   19290:	4b0a      	ldr	r3, [pc, #40]	; (192bc <bt_hci_driver_register+0x2c>)
   19292:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   19296:	b943      	cbnz	r3, 192aa <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   19298:	68c3      	ldr	r3, [r0, #12]
   1929a:	b14b      	cbz	r3, 192b0 <bt_hci_driver_register+0x20>
   1929c:	6943      	ldr	r3, [r0, #20]
   1929e:	b153      	cbz	r3, 192b6 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   192a0:	4b06      	ldr	r3, [pc, #24]	; (192bc <bt_hci_driver_register+0x2c>)
   192a2:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	return 0;
   192a6:	2000      	movs	r0, #0
   192a8:	4770      	bx	lr
		return -EALREADY;
   192aa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   192ae:	4770      	bx	lr
		return -EINVAL;
   192b0:	f06f 0015 	mvn.w	r0, #21
   192b4:	4770      	bx	lr
   192b6:	f06f 0015 	mvn.w	r0, #21
}
   192ba:	4770      	bx	lr
   192bc:	20000388 	.word	0x20000388

000192c0 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   192c0:	4b06      	ldr	r3, [pc, #24]	; (192dc <bt_finalize_init+0x1c>)
   192c2:	f3bf 8f5b 	dmb	ish
   192c6:	e853 1f00 	ldrex	r1, [r3]
   192ca:	f041 0104 	orr.w	r1, r1, #4
   192ce:	e843 1200 	strex	r2, r1, [r3]
   192d2:	2a00      	cmp	r2, #0
   192d4:	d1f7      	bne.n	192c6 <bt_finalize_init+0x6>
   192d6:	f3bf 8f5b 	dmb	ish
}
   192da:	4770      	bx	lr
   192dc:	20000454 	.word	0x20000454

000192e0 <init_work>:
{
   192e0:	b508      	push	{r3, lr}
	err = bt_init();
   192e2:	f010 fbf9 	bl	29ad8 <bt_init>
	if (ready_cb) {
   192e6:	4b02      	ldr	r3, [pc, #8]	; (192f0 <init_work+0x10>)
   192e8:	681b      	ldr	r3, [r3, #0]
   192ea:	b103      	cbz	r3, 192ee <init_work+0xe>
		ready_cb(err);
   192ec:	4798      	blx	r3
}
   192ee:	bd08      	pop	{r3, pc}
   192f0:	20003760 	.word	0x20003760

000192f4 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   192f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192f8:	b090      	sub	sp, #64	; 0x40
   192fa:	af08      	add	r7, sp, #32
	int err;

	if (!bt_dev.drv) {
   192fc:	4b69      	ldr	r3, [pc, #420]	; (194a4 <bt_enable+0x1b0>)
   192fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   19302:	2b00      	cmp	r3, #0
   19304:	d063      	beq.n	193ce <bt_enable+0xda>
   19306:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19308:	4b67      	ldr	r3, [pc, #412]	; (194a8 <bt_enable+0x1b4>)
   1930a:	f3bf 8f5b 	dmb	ish
   1930e:	e853 2f00 	ldrex	r2, [r3]
   19312:	f022 0202 	bic.w	r2, r2, #2
   19316:	e843 2100 	strex	r1, r2, [r3]
   1931a:	2900      	cmp	r1, #0
   1931c:	d1f7      	bne.n	1930e <bt_enable+0x1a>
   1931e:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19322:	f3bf 8f5b 	dmb	ish
   19326:	e853 2f00 	ldrex	r2, [r3]
   1932a:	f042 0101 	orr.w	r1, r2, #1
   1932e:	e843 1000 	strex	r0, r1, [r3]
   19332:	2800      	cmp	r0, #0
   19334:	d1f7      	bne.n	19326 <bt_enable+0x32>
   19336:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1933a:	f012 0f01 	tst.w	r2, #1
   1933e:	f040 80ae 	bne.w	1949e <bt_enable+0x1aa>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   19342:	4b5a      	ldr	r3, [pc, #360]	; (194ac <bt_enable+0x1b8>)
   19344:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   19346:	4e5a      	ldr	r6, [pc, #360]	; (194b0 <bt_enable+0x1bc>)
   19348:	2201      	movs	r2, #1
   1934a:	4611      	mov	r1, r2
   1934c:	4630      	mov	r0, r6
   1934e:	f014 f9de 	bl	2d70e <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   19352:	f106 0024 	add.w	r0, r6, #36	; 0x24
   19356:	f014 f9b7 	bl	2d6c8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1935a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 194d8 <bt_enable+0x1e4>
   1935e:	2200      	movs	r2, #0
   19360:	2300      	movs	r3, #0
   19362:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19366:	2400      	movs	r4, #0
   19368:	9404      	str	r4, [sp, #16]
   1936a:	f06f 0308 	mvn.w	r3, #8
   1936e:	9303      	str	r3, [sp, #12]
   19370:	9402      	str	r4, [sp, #8]
   19372:	9401      	str	r4, [sp, #4]
   19374:	9400      	str	r4, [sp, #0]
   19376:	4b4f      	ldr	r3, [pc, #316]	; (194b4 <bt_enable+0x1c0>)
   19378:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1937c:	494e      	ldr	r1, [pc, #312]	; (194b8 <bt_enable+0x1c4>)
   1937e:	4640      	mov	r0, r8
   19380:	f014 f8ca 	bl	2d518 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19384:	494d      	ldr	r1, [pc, #308]	; (194bc <bt_enable+0x1c8>)
   19386:	4640      	mov	r0, r8
   19388:	f008 fd92 	bl	21eb0 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   1938c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 194dc <bt_enable+0x1e8>
   19390:	4640      	mov	r0, r8
   19392:	f014 faca 	bl	2d92a <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   19396:	9400      	str	r4, [sp, #0]
   19398:	f06f 0307 	mvn.w	r3, #7
   1939c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   193a0:	4947      	ldr	r1, [pc, #284]	; (194c0 <bt_enable+0x1cc>)
   193a2:	4640      	mov	r0, r8
   193a4:	f7f7 fe70 	bl	11088 <k_work_queue_start>
   193a8:	4946      	ldr	r1, [pc, #280]	; (194c4 <bt_enable+0x1d0>)
   193aa:	4640      	mov	r0, r8
   193ac:	f008 fd80 	bl	21eb0 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   193b0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   193b2:	68db      	ldr	r3, [r3, #12]
   193b4:	4798      	blx	r3
	if (err) {
   193b6:	4604      	mov	r4, r0
   193b8:	bb70      	cbnz	r0, 19418 <bt_enable+0x124>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   193ba:	2d00      	cmp	r5, #0
   193bc:	d06b      	beq.n	19496 <bt_enable+0x1a2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   193be:	4842      	ldr	r0, [pc, #264]	; (194c8 <bt_enable+0x1d4>)
   193c0:	f009 f8e4 	bl	2258c <k_work_submit>
	return 0;
}
   193c4:	4620      	mov	r0, r4
   193c6:	3720      	adds	r7, #32
   193c8:	46bd      	mov	sp, r7
   193ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No HCI driver registered");
   193ce:	4b3f      	ldr	r3, [pc, #252]	; (194cc <bt_enable+0x1d8>)
   193d0:	61fb      	str	r3, [r7, #28]
   193d2:	2302      	movs	r3, #2
   193d4:	713b      	strb	r3, [r7, #4]
   193d6:	2300      	movs	r3, #0
   193d8:	717b      	strb	r3, [r7, #5]
   193da:	71bb      	strb	r3, [r7, #6]
   193dc:	71fb      	strb	r3, [r7, #7]
   193de:	687a      	ldr	r2, [r7, #4]
   193e0:	61ba      	str	r2, [r7, #24]
   193e2:	4619      	mov	r1, r3
   193e4:	f363 0100 	bfi	r1, r3, #0, #1
   193e8:	f363 0141 	bfi	r1, r3, #1, #1
   193ec:	f363 0182 	bfi	r1, r3, #2, #1
   193f0:	f363 01c5 	bfi	r1, r3, #3, #3
   193f4:	2201      	movs	r2, #1
   193f6:	f362 1188 	bfi	r1, r2, #6, #3
   193fa:	2208      	movs	r2, #8
   193fc:	f362 2152 	bfi	r1, r2, #9, #10
   19400:	f363 41de 	bfi	r1, r3, #19, #12
   19404:	f363 71df 	bfi	r1, r3, #31, #1
   19408:	f107 0218 	add.w	r2, r7, #24
   1940c:	4830      	ldr	r0, [pc, #192]	; (194d0 <bt_enable+0x1dc>)
   1940e:	f00f fcd8 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   19412:	f06f 0412 	mvn.w	r4, #18
   19416:	e7d5      	b.n	193c4 <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   19418:	466e      	mov	r6, sp
   1941a:	b088      	sub	sp, #32
   1941c:	4633      	mov	r3, r6
   1941e:	f116 0210 	adds.w	r2, r6, #16
   19422:	d00d      	beq.n	19440 <bt_enable+0x14c>
   19424:	210c      	movs	r1, #12
   19426:	b13a      	cbz	r2, 19438 <bt_enable+0x144>
   19428:	4608      	mov	r0, r1
   1942a:	2904      	cmp	r1, #4
   1942c:	dd01      	ble.n	19432 <bt_enable+0x13e>
   1942e:	4d29      	ldr	r5, [pc, #164]	; (194d4 <bt_enable+0x1e0>)
   19430:	615d      	str	r5, [r3, #20]
   19432:	2808      	cmp	r0, #8
   19434:	dd07      	ble.n	19446 <bt_enable+0x152>
   19436:	619c      	str	r4, [r3, #24]
   19438:	290b      	cmp	r1, #11
   1943a:	dd29      	ble.n	19490 <bt_enable+0x19c>
   1943c:	250c      	movs	r5, #12
   1943e:	e004      	b.n	1944a <bt_enable+0x156>
   19440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19444:	e7ef      	b.n	19426 <bt_enable+0x132>
   19446:	f06f 051b 	mvn.w	r5, #27
   1944a:	b13a      	cbz	r2, 1945c <bt_enable+0x168>
   1944c:	2103      	movs	r1, #3
   1944e:	7139      	strb	r1, [r7, #4]
   19450:	2100      	movs	r1, #0
   19452:	7179      	strb	r1, [r7, #5]
   19454:	71b9      	strb	r1, [r7, #6]
   19456:	71f9      	strb	r1, [r7, #7]
   19458:	6878      	ldr	r0, [r7, #4]
   1945a:	6118      	str	r0, [r3, #16]
   1945c:	2100      	movs	r1, #0
   1945e:	f36f 0100 	bfc	r1, #0, #1
   19462:	f36f 0141 	bfc	r1, #1, #1
   19466:	f36f 0182 	bfc	r1, #2, #1
   1946a:	f36f 01c5 	bfc	r1, #3, #3
   1946e:	2301      	movs	r3, #1
   19470:	f363 1188 	bfi	r1, r3, #6, #3
   19474:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   19478:	f363 2152 	bfi	r1, r3, #9, #10
   1947c:	f36f 41de 	bfc	r1, #19, #12
   19480:	f36f 71df 	bfc	r1, #31, #1
   19484:	2300      	movs	r3, #0
   19486:	4812      	ldr	r0, [pc, #72]	; (194d0 <bt_enable+0x1dc>)
   19488:	f00f fc9b 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1948c:	46b5      	mov	sp, r6
		return err;
   1948e:	e799      	b.n	193c4 <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   19490:	f06f 051b 	mvn.w	r5, #27
   19494:	e7d9      	b.n	1944a <bt_enable+0x156>
		return bt_init();
   19496:	f010 fb1f 	bl	29ad8 <bt_init>
   1949a:	4604      	mov	r4, r0
   1949c:	e792      	b.n	193c4 <bt_enable+0xd0>
		return -EALREADY;
   1949e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   194a2:	e78f      	b.n	193c4 <bt_enable+0xd0>
   194a4:	20000388 	.word	0x20000388
   194a8:	20000454 	.word	0x20000454
   194ac:	20003760 	.word	0x20003760
   194b0:	200004a0 	.word	0x200004a0
   194b4:	000190a5 	.word	0x000190a5
   194b8:	20005480 	.word	0x20005480
   194bc:	000304ac 	.word	0x000304ac
   194c0:	20005b00 	.word	0x20005b00
   194c4:	000304b4 	.word	0x000304b4
   194c8:	20000444 	.word	0x20000444
   194cc:	00030490 	.word	0x00030490
   194d0:	0002eea0 	.word	0x0002eea0
   194d4:	000304bc 	.word	0x000304bc
   194d8:	20001fe0 	.word	0x20001fe0
   194dc:	200020d8 	.word	0x200020d8

000194e0 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   194e0:	f3bf 8f5b 	dmb	ish
   194e4:	4b03      	ldr	r3, [pc, #12]	; (194f4 <bt_is_ready+0x14>)
   194e6:	6818      	ldr	r0, [r3, #0]
   194e8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   194ec:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   194f0:	4770      	bx	lr
   194f2:	bf00      	nop
   194f4:	20000454 	.word	0x20000454

000194f8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   194f8:	4800      	ldr	r0, [pc, #0]	; (194fc <bt_get_name+0x4>)
   194fa:	4770      	bx	lr
   194fc:	0002f384 	.word	0x0002f384

00019500 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   19500:	b570      	push	{r4, r5, r6, lr}
   19502:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   19504:	2400      	movs	r4, #0
   19506:	e001      	b.n	1950c <id_find+0xc>
   19508:	3401      	adds	r4, #1
   1950a:	b2e4      	uxtb	r4, r4
   1950c:	4b09      	ldr	r3, [pc, #36]	; (19534 <id_find+0x34>)
   1950e:	79db      	ldrb	r3, [r3, #7]
   19510:	42a3      	cmp	r3, r4
   19512:	d90b      	bls.n	1952c <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   19514:	4626      	mov	r6, r4
   19516:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1951a:	2207      	movs	r2, #7
   1951c:	4b05      	ldr	r3, [pc, #20]	; (19534 <id_find+0x34>)
   1951e:	4419      	add	r1, r3
   19520:	4628      	mov	r0, r5
   19522:	f014 fec2 	bl	2e2aa <memcmp>
   19526:	2800      	cmp	r0, #0
   19528:	d1ee      	bne.n	19508 <id_find+0x8>
   1952a:	e001      	b.n	19530 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   1952c:	f06f 0601 	mvn.w	r6, #1
}
   19530:	4630      	mov	r0, r6
   19532:	bd70      	pop	{r4, r5, r6, pc}
   19534:	20000388 	.word	0x20000388

00019538 <set_random_address>:
{
   19538:	b570      	push	{r4, r5, r6, lr}
   1953a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1953c:	2206      	movs	r2, #6
   1953e:	4914      	ldr	r1, [pc, #80]	; (19590 <set_random_address+0x58>)
   19540:	f014 feb3 	bl	2e2aa <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19544:	4605      	mov	r5, r0
   19546:	b908      	cbnz	r0, 1954c <set_random_address+0x14>
}
   19548:	4628      	mov	r0, r5
   1954a:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1954c:	2106      	movs	r1, #6
   1954e:	f242 0005 	movw	r0, #8197	; 0x2005
   19552:	f7fe fcef 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   19556:	4605      	mov	r5, r0
   19558:	b1b0      	cbz	r0, 19588 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1955a:	2206      	movs	r2, #6
   1955c:	4621      	mov	r1, r4
   1955e:	300c      	adds	r0, #12
   19560:	f012 fc24 	bl	2bdac <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   19564:	2200      	movs	r2, #0
   19566:	4629      	mov	r1, r5
   19568:	f242 0005 	movw	r0, #8197	; 0x2005
   1956c:	f7fe fd20 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   19570:	4605      	mov	r5, r0
   19572:	2800      	cmp	r0, #0
   19574:	d1e8      	bne.n	19548 <set_random_address+0x10>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   19576:	4e06      	ldr	r6, [pc, #24]	; (19590 <set_random_address+0x58>)
   19578:	4621      	mov	r1, r4
   1957a:	4630      	mov	r0, r6
   1957c:	f010 fabf 	bl	29afe <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   19580:	2301      	movs	r3, #1
   19582:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   19586:	e7df      	b.n	19548 <set_random_address+0x10>
		return -ENOBUFS;
   19588:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1958c:	e7dc      	b.n	19548 <set_random_address+0x10>
   1958e:	bf00      	nop
   19590:	200003e9 	.word	0x200003e9

00019594 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   19594:	b570      	push	{r4, r5, r6, lr}
   19596:	b082      	sub	sp, #8
   19598:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1959a:	460e      	mov	r6, r1
   1959c:	b129      	cbz	r1, 195aa <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   1959e:	2207      	movs	r2, #7
   195a0:	4913      	ldr	r1, [pc, #76]	; (195f0 <id_create+0x5c>)
   195a2:	4630      	mov	r0, r6
   195a4:	f014 fe81 	bl	2e2aa <memcmp>
   195a8:	b9c8      	cbnz	r0, 195de <id_create+0x4a>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   195aa:	4668      	mov	r0, sp
   195ac:	f010 f90a 	bl	297c4 <bt_addr_le_create_static>
			if (err) {
   195b0:	4604      	mov	r4, r0
   195b2:	b988      	cbnz	r0, 195d8 <id_create+0x44>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   195b4:	4668      	mov	r0, sp
   195b6:	f7ff ffa3 	bl	19500 <id_find>
   195ba:	2800      	cmp	r0, #0
   195bc:	daf5      	bge.n	195aa <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   195be:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   195c2:	4b0c      	ldr	r3, [pc, #48]	; (195f4 <id_create+0x60>)
   195c4:	441d      	add	r5, r3
   195c6:	4669      	mov	r1, sp
   195c8:	4628      	mov	r0, r5
   195ca:	f010 fa9d 	bl	29b08 <bt_addr_le_copy>

		if (addr) {
   195ce:	b11e      	cbz	r6, 195d8 <id_create+0x44>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   195d0:	4629      	mov	r1, r5
   195d2:	4630      	mov	r0, r6
   195d4:	f010 fa98 	bl	29b08 <bt_addr_le_copy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   195d8:	4620      	mov	r0, r4
   195da:	b002      	add	sp, #8
   195dc:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   195de:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   195e2:	4631      	mov	r1, r6
   195e4:	4803      	ldr	r0, [pc, #12]	; (195f4 <id_create+0x60>)
   195e6:	4428      	add	r0, r5
   195e8:	f010 fa8e 	bl	29b08 <bt_addr_le_copy>
	return 0;
   195ec:	2400      	movs	r4, #0
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   195ee:	e7f3      	b.n	195d8 <id_create+0x44>
   195f0:	0002fe9c 	.word	0x0002fe9c
   195f4:	20000388 	.word	0x20000388

000195f8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   195f8:	b570      	push	{r4, r5, r6, lr}
   195fa:	b08a      	sub	sp, #40	; 0x28
   195fc:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   195fe:	4605      	mov	r5, r0
   19600:	b188      	cbz	r0, 19626 <bt_id_create+0x2e>
   19602:	2207      	movs	r2, #7
   19604:	4938      	ldr	r1, [pc, #224]	; (196e8 <bt_id_create+0xf0>)
   19606:	f014 fe50 	bl	2e2aa <memcmp>
   1960a:	b160      	cbz	r0, 19626 <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1960c:	782b      	ldrb	r3, [r5, #0]
   1960e:	2b01      	cmp	r3, #1
   19610:	d135      	bne.n	1967e <bt_id_create+0x86>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   19612:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   19614:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19618:	2bc0      	cmp	r3, #192	; 0xc0
   1961a:	d130      	bne.n	1967e <bt_id_create+0x86>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   1961c:	4628      	mov	r0, r5
   1961e:	f7ff ff6f 	bl	19500 <id_find>
   19622:	2800      	cmp	r0, #0
   19624:	da56      	bge.n	196d4 <bt_id_create+0xdc>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   19626:	2c00      	cmp	r4, #0
   19628:	d157      	bne.n	196da <bt_id_create+0xe2>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1962a:	4b30      	ldr	r3, [pc, #192]	; (196ec <bt_id_create+0xf4>)
   1962c:	79db      	ldrb	r3, [r3, #7]
   1962e:	2b01      	cmp	r3, #1
   19630:	d056      	beq.n	196e0 <bt_id_create+0xe8>
   19632:	f3bf 8f5b 	dmb	ish
   19636:	4b2e      	ldr	r3, [pc, #184]	; (196f0 <bt_id_create+0xf8>)
   19638:	681b      	ldr	r3, [r3, #0]
   1963a:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1963e:	f013 0f01 	tst.w	r3, #1
   19642:	d10d      	bne.n	19660 <bt_id_create+0x68>
		uint8_t zero_irk[16] = { 0 };
   19644:	2300      	movs	r3, #0
   19646:	9300      	str	r3, [sp, #0]
   19648:	9301      	str	r3, [sp, #4]
   1964a:	9302      	str	r3, [sp, #8]
   1964c:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1964e:	2d00      	cmp	r5, #0
   19650:	d03d      	beq.n	196ce <bt_id_create+0xd6>
   19652:	2207      	movs	r2, #7
   19654:	4924      	ldr	r1, [pc, #144]	; (196e8 <bt_id_create+0xf0>)
   19656:	4628      	mov	r0, r5
   19658:	f014 fe27 	bl	2e2aa <memcmp>
   1965c:	2800      	cmp	r0, #0
   1965e:	d036      	beq.n	196ce <bt_id_create+0xd6>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   19660:	4b22      	ldr	r3, [pc, #136]	; (196ec <bt_id_create+0xf4>)
   19662:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   19664:	4622      	mov	r2, r4
   19666:	4629      	mov	r1, r5
   19668:	4630      	mov	r0, r6
   1966a:	f7ff ff93 	bl	19594 <id_create>
	if (err) {
   1966e:	b920      	cbnz	r0, 1967a <bt_id_create+0x82>
		return err;
	} else {
		bt_dev.id_count++;
   19670:	4a1e      	ldr	r2, [pc, #120]	; (196ec <bt_id_create+0xf4>)
   19672:	79d3      	ldrb	r3, [r2, #7]
   19674:	3301      	adds	r3, #1
   19676:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   19678:	4630      	mov	r0, r6
}
   1967a:	b00a      	add	sp, #40	; 0x28
   1967c:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Only static random identity address supported");
   1967e:	4b1d      	ldr	r3, [pc, #116]	; (196f4 <bt_id_create+0xfc>)
   19680:	9309      	str	r3, [sp, #36]	; 0x24
   19682:	2302      	movs	r3, #2
   19684:	f88d 3000 	strb.w	r3, [sp]
   19688:	2300      	movs	r3, #0
   1968a:	f88d 3001 	strb.w	r3, [sp, #1]
   1968e:	f88d 3002 	strb.w	r3, [sp, #2]
   19692:	f88d 3003 	strb.w	r3, [sp, #3]
   19696:	9a00      	ldr	r2, [sp, #0]
   19698:	9208      	str	r2, [sp, #32]
   1969a:	4619      	mov	r1, r3
   1969c:	f363 0100 	bfi	r1, r3, #0, #1
   196a0:	f363 0141 	bfi	r1, r3, #1, #1
   196a4:	f363 0182 	bfi	r1, r3, #2, #1
   196a8:	f363 01c5 	bfi	r1, r3, #3, #3
   196ac:	2201      	movs	r2, #1
   196ae:	f362 1188 	bfi	r1, r2, #6, #3
   196b2:	2208      	movs	r2, #8
   196b4:	f362 2152 	bfi	r1, r2, #9, #10
   196b8:	f363 41de 	bfi	r1, r3, #19, #12
   196bc:	f363 71df 	bfi	r1, r3, #31, #1
   196c0:	aa08      	add	r2, sp, #32
   196c2:	480d      	ldr	r0, [pc, #52]	; (196f8 <bt_id_create+0x100>)
   196c4:	f00f fb7d 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   196c8:	f06f 0015 	mvn.w	r0, #21
   196cc:	e7d5      	b.n	1967a <bt_id_create+0x82>
			return -EINVAL;
   196ce:	f06f 0015 	mvn.w	r0, #21
   196d2:	e7d2      	b.n	1967a <bt_id_create+0x82>
			return -EALREADY;
   196d4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   196d8:	e7cf      	b.n	1967a <bt_id_create+0x82>
		return -EINVAL;
   196da:	f06f 0015 	mvn.w	r0, #21
   196de:	e7cc      	b.n	1967a <bt_id_create+0x82>
		return -ENOMEM;
   196e0:	f06f 000b 	mvn.w	r0, #11
   196e4:	e7c9      	b.n	1967a <bt_id_create+0x82>
   196e6:	bf00      	nop
   196e8:	0002fe9c 	.word	0x0002fe9c
   196ec:	20000388 	.word	0x20000388
   196f0:	20000454 	.word	0x20000454
   196f4:	00030574 	.word	0x00030574
   196f8:	0002eea8 	.word	0x0002eea8

000196fc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   196fc:	b530      	push	{r4, r5, lr}
   196fe:	b08f      	sub	sp, #60	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   19700:	b1f0      	cbz	r0, 19740 <bt_id_read_public_addr+0x44>
   19702:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   19704:	aa01      	add	r2, sp, #4
   19706:	2100      	movs	r1, #0
   19708:	f241 0009 	movw	r0, #4105	; 0x1009
   1970c:	f7fe fc50 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   19710:	2800      	cmp	r0, #0
   19712:	d13c      	bne.n	1978e <bt_id_read_public_addr+0x92>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   19714:	9b01      	ldr	r3, [sp, #4]
   19716:	68dc      	ldr	r4, [r3, #12]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   19718:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1971a:	2206      	movs	r2, #6
   1971c:	4935      	ldr	r1, [pc, #212]	; (197f4 <bt_id_read_public_addr+0xf8>)
   1971e:	4620      	mov	r0, r4
   19720:	f014 fdc3 	bl	2e2aa <memcmp>
   19724:	b130      	cbz	r0, 19734 <bt_id_read_public_addr+0x38>
   19726:	2206      	movs	r2, #6
   19728:	4933      	ldr	r1, [pc, #204]	; (197f8 <bt_id_read_public_addr+0xfc>)
   1972a:	4620      	mov	r0, r4
   1972c:	f014 fdbd 	bl	2e2aa <memcmp>
   19730:	2800      	cmp	r0, #0
   19732:	d153      	bne.n	197dc <bt_id_read_public_addr+0xe0>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   19734:	9801      	ldr	r0, [sp, #4]
   19736:	f012 faec 	bl	2bd12 <net_buf_unref>
		return 0U;
   1973a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1973c:	b00f      	add	sp, #60	; 0x3c
   1973e:	bd30      	pop	{r4, r5, pc}
		LOG_WRN("Invalid input parameters");
   19740:	4b2e      	ldr	r3, [pc, #184]	; (197fc <bt_id_read_public_addr+0x100>)
   19742:	930d      	str	r3, [sp, #52]	; 0x34
   19744:	2302      	movs	r3, #2
   19746:	f88d 3000 	strb.w	r3, [sp]
   1974a:	2400      	movs	r4, #0
   1974c:	f88d 4001 	strb.w	r4, [sp, #1]
   19750:	f88d 4002 	strb.w	r4, [sp, #2]
   19754:	f88d 4003 	strb.w	r4, [sp, #3]
   19758:	9a00      	ldr	r2, [sp, #0]
   1975a:	920c      	str	r2, [sp, #48]	; 0x30
   1975c:	4621      	mov	r1, r4
   1975e:	f364 0100 	bfi	r1, r4, #0, #1
   19762:	f364 0141 	bfi	r1, r4, #1, #1
   19766:	f364 0182 	bfi	r1, r4, #2, #1
   1976a:	f364 01c5 	bfi	r1, r4, #3, #3
   1976e:	f363 1188 	bfi	r1, r3, #6, #3
   19772:	2308      	movs	r3, #8
   19774:	f363 2152 	bfi	r1, r3, #9, #10
   19778:	f364 41de 	bfi	r1, r4, #19, #12
   1977c:	f364 71df 	bfi	r1, r4, #31, #1
   19780:	4623      	mov	r3, r4
   19782:	aa0c      	add	r2, sp, #48	; 0x30
   19784:	481e      	ldr	r0, [pc, #120]	; (19800 <bt_id_read_public_addr+0x104>)
   19786:	f00f fb1c 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return 0U;
   1978a:	4620      	mov	r0, r4
   1978c:	e7d6      	b.n	1973c <bt_id_read_public_addr+0x40>
		LOG_WRN("Failed to read public address");
   1978e:	4b1d      	ldr	r3, [pc, #116]	; (19804 <bt_id_read_public_addr+0x108>)
   19790:	9307      	str	r3, [sp, #28]
   19792:	2302      	movs	r3, #2
   19794:	f88d 3000 	strb.w	r3, [sp]
   19798:	2400      	movs	r4, #0
   1979a:	f88d 4001 	strb.w	r4, [sp, #1]
   1979e:	f88d 4002 	strb.w	r4, [sp, #2]
   197a2:	f88d 4003 	strb.w	r4, [sp, #3]
   197a6:	9a00      	ldr	r2, [sp, #0]
   197a8:	9206      	str	r2, [sp, #24]
   197aa:	4621      	mov	r1, r4
   197ac:	f364 0100 	bfi	r1, r4, #0, #1
   197b0:	f364 0141 	bfi	r1, r4, #1, #1
   197b4:	f364 0182 	bfi	r1, r4, #2, #1
   197b8:	f364 01c5 	bfi	r1, r4, #3, #3
   197bc:	f363 1188 	bfi	r1, r3, #6, #3
   197c0:	2308      	movs	r3, #8
   197c2:	f363 2152 	bfi	r1, r3, #9, #10
   197c6:	f364 41de 	bfi	r1, r4, #19, #12
   197ca:	f364 71df 	bfi	r1, r4, #31, #1
   197ce:	4623      	mov	r3, r4
   197d0:	aa06      	add	r2, sp, #24
   197d2:	480b      	ldr	r0, [pc, #44]	; (19800 <bt_id_read_public_addr+0x104>)
   197d4:	f00f faf5 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return 0U;
   197d8:	4620      	mov	r0, r4
   197da:	e7af      	b.n	1973c <bt_id_read_public_addr+0x40>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   197dc:	4621      	mov	r1, r4
   197de:	1c68      	adds	r0, r5, #1
   197e0:	f010 f98d 	bl	29afe <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;
   197e4:	2300      	movs	r3, #0
   197e6:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   197e8:	9801      	ldr	r0, [sp, #4]
   197ea:	f012 fa92 	bl	2bd12 <net_buf_unref>
	return 1U;
   197ee:	2001      	movs	r0, #1
   197f0:	e7a4      	b.n	1973c <bt_id_read_public_addr+0x40>
   197f2:	bf00      	nop
   197f4:	0002feac 	.word	0x0002feac
   197f8:	0002fea4 	.word	0x0002fea4
   197fc:	000305a4 	.word	0x000305a4
   19800:	0002eea8 	.word	0x0002eea8
   19804:	000305c0 	.word	0x000305c0

00019808 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   19808:	b500      	push	{lr}
   1980a:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1980c:	4668      	mov	r0, sp
   1980e:	f7ff ff75 	bl	196fc <bt_id_read_public_addr>
   19812:	4b06      	ldr	r3, [pc, #24]	; (1982c <bt_setup_public_id_addr+0x24>)
   19814:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   19816:	b918      	cbnz	r0, 19820 <bt_setup_public_id_addr+0x18>
		return 0;
   19818:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   1981a:	b003      	add	sp, #12
   1981c:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   19820:	2200      	movs	r2, #0
   19822:	4669      	mov	r1, sp
   19824:	4610      	mov	r0, r2
   19826:	f7ff feb5 	bl	19594 <id_create>
   1982a:	e7f6      	b.n	1981a <bt_setup_public_id_addr+0x12>
   1982c:	20000388 	.word	0x20000388

00019830 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   19830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19834:	b095      	sub	sp, #84	; 0x54
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   19836:	4b57      	ldr	r3, [pc, #348]	; (19994 <bt_read_static_addr+0x164>)
   19838:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   1983c:	f014 0401 	ands.w	r4, r4, #1
   19840:	d012      	beq.n	19868 <bt_read_static_addr+0x38>
   19842:	4605      	mov	r5, r0
   19844:	460e      	mov	r6, r1
		LOG_WRN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   19846:	aa01      	add	r2, sp, #4
   19848:	2100      	movs	r1, #0
   1984a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1984e:	f7fe fbaf 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   19852:	4686      	mov	lr, r0
   19854:	bb68      	cbnz	r0, 198b2 <bt_read_static_addr+0x82>
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   19856:	9801      	ldr	r0, [sp, #4]
   19858:	f8d0 900c 	ldr.w	r9, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   1985c:	f899 4001 	ldrb.w	r4, [r9, #1]
   19860:	42b4      	cmp	r4, r6
   19862:	bf28      	it	cs
   19864:	4634      	movcs	r4, r6
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   19866:	e067      	b.n	19938 <bt_read_static_addr+0x108>
		LOG_WRN("Read Static Addresses command not available");
   19868:	4b4b      	ldr	r3, [pc, #300]	; (19998 <bt_read_static_addr+0x168>)
   1986a:	9313      	str	r3, [sp, #76]	; 0x4c
   1986c:	2202      	movs	r2, #2
   1986e:	f88d 2000 	strb.w	r2, [sp]
   19872:	2300      	movs	r3, #0
   19874:	f88d 3001 	strb.w	r3, [sp, #1]
   19878:	f88d 3002 	strb.w	r3, [sp, #2]
   1987c:	f88d 3003 	strb.w	r3, [sp, #3]
   19880:	9900      	ldr	r1, [sp, #0]
   19882:	9112      	str	r1, [sp, #72]	; 0x48
   19884:	4619      	mov	r1, r3
   19886:	f363 0100 	bfi	r1, r3, #0, #1
   1988a:	f363 0141 	bfi	r1, r3, #1, #1
   1988e:	f363 0182 	bfi	r1, r3, #2, #1
   19892:	f363 01c5 	bfi	r1, r3, #3, #3
   19896:	f362 1188 	bfi	r1, r2, #6, #3
   1989a:	2208      	movs	r2, #8
   1989c:	f362 2152 	bfi	r1, r2, #9, #10
   198a0:	f363 41de 	bfi	r1, r3, #19, #12
   198a4:	f363 71df 	bfi	r1, r3, #31, #1
   198a8:	aa12      	add	r2, sp, #72	; 0x48
   198aa:	483c      	ldr	r0, [pc, #240]	; (1999c <bt_read_static_addr+0x16c>)
   198ac:	f00f fa89 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return 0;
   198b0:	e047      	b.n	19942 <bt_read_static_addr+0x112>
		LOG_WRN("Failed to read static addresses");
   198b2:	4b3b      	ldr	r3, [pc, #236]	; (199a0 <bt_read_static_addr+0x170>)
   198b4:	930d      	str	r3, [sp, #52]	; 0x34
   198b6:	2302      	movs	r3, #2
   198b8:	f88d 3000 	strb.w	r3, [sp]
   198bc:	2400      	movs	r4, #0
   198be:	f88d 4001 	strb.w	r4, [sp, #1]
   198c2:	f88d 4002 	strb.w	r4, [sp, #2]
   198c6:	f88d 4003 	strb.w	r4, [sp, #3]
   198ca:	9a00      	ldr	r2, [sp, #0]
   198cc:	920c      	str	r2, [sp, #48]	; 0x30
   198ce:	4621      	mov	r1, r4
   198d0:	f364 0100 	bfi	r1, r4, #0, #1
   198d4:	f364 0141 	bfi	r1, r4, #1, #1
   198d8:	f364 0182 	bfi	r1, r4, #2, #1
   198dc:	f364 01c5 	bfi	r1, r4, #3, #3
   198e0:	f363 1188 	bfi	r1, r3, #6, #3
   198e4:	2308      	movs	r3, #8
   198e6:	f363 2152 	bfi	r1, r3, #9, #10
   198ea:	f364 41de 	bfi	r1, r4, #19, #12
   198ee:	f364 71df 	bfi	r1, r4, #31, #1
   198f2:	4623      	mov	r3, r4
   198f4:	aa0c      	add	r2, sp, #48	; 0x30
   198f6:	4829      	ldr	r0, [pc, #164]	; (1999c <bt_read_static_addr+0x16c>)
   198f8:	f00f fa63 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return 0;
   198fc:	e021      	b.n	19942 <bt_read_static_addr+0x112>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   198fe:	f04f 0c16 	mov.w	ip, #22
   19902:	fb0c fc0e 	mul.w	ip, ip, lr
   19906:	eb05 010c 	add.w	r1, r5, ip
   1990a:	eb09 020c 	add.w	r2, r9, ip
   1990e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   19912:	f8d2 8006 	ldr.w	r8, [r2, #6]
   19916:	f8d2 700a 	ldr.w	r7, [r2, #10]
   1991a:	f8d2 600e 	ldr.w	r6, [r2, #14]
   1991e:	f845 300c 	str.w	r3, [r5, ip]
   19922:	f8c1 8004 	str.w	r8, [r1, #4]
   19926:	608f      	str	r7, [r1, #8]
   19928:	60ce      	str	r6, [r1, #12]
   1992a:	f8d2 3012 	ldr.w	r3, [r2, #18]
   1992e:	610b      	str	r3, [r1, #16]
   19930:	8ad3      	ldrh	r3, [r2, #22]
   19932:	828b      	strh	r3, [r1, #20]
	for (i = 0; i < cnt; i++) {
   19934:	f10e 0e01 	add.w	lr, lr, #1
   19938:	4574      	cmp	r4, lr
   1993a:	dce0      	bgt.n	198fe <bt_read_static_addr+0xce>
	}

	net_buf_unref(rsp);
   1993c:	f012 f9e9 	bl	2bd12 <net_buf_unref>
	if (!cnt) {
   19940:	b11c      	cbz	r4, 1994a <bt_read_static_addr+0x11a>
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   19942:	4620      	mov	r0, r4
   19944:	b015      	add	sp, #84	; 0x54
   19946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("No static addresses stored in controller");
   1994a:	4b16      	ldr	r3, [pc, #88]	; (199a4 <bt_read_static_addr+0x174>)
   1994c:	9307      	str	r3, [sp, #28]
   1994e:	2202      	movs	r2, #2
   19950:	f88d 2000 	strb.w	r2, [sp]
   19954:	2300      	movs	r3, #0
   19956:	f88d 3001 	strb.w	r3, [sp, #1]
   1995a:	f88d 3002 	strb.w	r3, [sp, #2]
   1995e:	f88d 3003 	strb.w	r3, [sp, #3]
   19962:	9900      	ldr	r1, [sp, #0]
   19964:	9106      	str	r1, [sp, #24]
   19966:	4619      	mov	r1, r3
   19968:	f363 0100 	bfi	r1, r3, #0, #1
   1996c:	f363 0141 	bfi	r1, r3, #1, #1
   19970:	f363 0182 	bfi	r1, r3, #2, #1
   19974:	f363 01c5 	bfi	r1, r3, #3, #3
   19978:	f362 1188 	bfi	r1, r2, #6, #3
   1997c:	2208      	movs	r2, #8
   1997e:	f362 2152 	bfi	r1, r2, #9, #10
   19982:	f363 41de 	bfi	r1, r3, #19, #12
   19986:	f363 71df 	bfi	r1, r3, #31, #1
   1998a:	aa06      	add	r2, sp, #24
   1998c:	4803      	ldr	r0, [pc, #12]	; (1999c <bt_read_static_addr+0x16c>)
   1998e:	f00f fa18 	bl	28dc2 <z_impl_z_log_msg_static_create>
   19992:	e7d6      	b.n	19942 <bt_read_static_addr+0x112>
   19994:	20000388 	.word	0x20000388
   19998:	000305e0 	.word	0x000305e0
   1999c:	0002eea8 	.word	0x0002eea8
   199a0:	0003060c 	.word	0x0003060c
   199a4:	0003062c 	.word	0x0003062c

000199a8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   199a8:	b510      	push	{r4, lr}
   199aa:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   199ac:	4b16      	ldr	r3, [pc, #88]	; (19a08 <bt_setup_random_id_addr+0x60>)
   199ae:	79dc      	ldrb	r4, [r3, #7]
   199b0:	b934      	cbnz	r4, 199c0 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   199b2:	2101      	movs	r1, #1
   199b4:	a802      	add	r0, sp, #8
   199b6:	f7ff ff3b 	bl	19830 <bt_read_static_addr>
   199ba:	4b13      	ldr	r3, [pc, #76]	; (19a08 <bt_setup_random_id_addr+0x60>)
   199bc:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   199be:	b948      	cbnz	r0, 199d4 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   199c0:	2100      	movs	r1, #0
   199c2:	4608      	mov	r0, r1
   199c4:	f7ff fe18 	bl	195f8 <bt_id_create>
   199c8:	4603      	mov	r3, r0
}
   199ca:	4618      	mov	r0, r3
   199cc:	b008      	add	sp, #32
   199ce:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   199d0:	3401      	adds	r4, #1
   199d2:	b2e4      	uxtb	r4, r4
   199d4:	4b0c      	ldr	r3, [pc, #48]	; (19a08 <bt_setup_random_id_addr+0x60>)
   199d6:	79db      	ldrb	r3, [r3, #7]
   199d8:	42a3      	cmp	r3, r4
   199da:	d913      	bls.n	19a04 <bt_setup_random_id_addr+0x5c>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   199dc:	2116      	movs	r1, #22
   199de:	ab02      	add	r3, sp, #8
   199e0:	fb01 3104 	mla	r1, r1, r4, r3
   199e4:	f10d 0001 	add.w	r0, sp, #1
   199e8:	f010 f889 	bl	29afe <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   199ec:	2301      	movs	r3, #1
   199ee:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   199f2:	2200      	movs	r2, #0
   199f4:	4669      	mov	r1, sp
   199f6:	4620      	mov	r0, r4
   199f8:	f7ff fdcc 	bl	19594 <id_create>
				if (err) {
   199fc:	4603      	mov	r3, r0
   199fe:	2800      	cmp	r0, #0
   19a00:	d0e6      	beq.n	199d0 <bt_setup_random_id_addr+0x28>
   19a02:	e7e2      	b.n	199ca <bt_setup_random_id_addr+0x22>
			return 0;
   19a04:	2300      	movs	r3, #0
   19a06:	e7e0      	b.n	199ca <bt_setup_random_id_addr+0x22>
   19a08:	20000388 	.word	0x20000388

00019a0c <bt_id_set_adv_own_addr>:
			   bool dir_adv, uint8_t *own_addr_type)
{
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   19a0c:	2800      	cmp	r0, #0
   19a0e:	d051      	beq.n	19ab4 <bt_id_set_adv_own_addr+0xa8>
{
   19a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a12:	460e      	mov	r6, r1
   19a14:	4617      	mov	r7, r2
   19a16:	461d      	mov	r5, r3
   19a18:	4603      	mov	r3, r0
	CHECKIF(adv == NULL || own_addr_type == NULL) {
   19a1a:	2d00      	cmp	r5, #0
   19a1c:	d04d      	beq.n	19aba <bt_id_set_adv_own_addr+0xae>
		return -EINVAL;
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   19a1e:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   19a20:	f011 0f01 	tst.w	r1, #1
   19a24:	d029      	beq.n	19a7a <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   19a26:	b142      	cbz	r2, 19a3a <bt_id_set_adv_own_addr+0x2e>
   19a28:	f011 0f20 	tst.w	r1, #32
   19a2c:	d005      	beq.n	19a3a <bt_id_set_adv_own_addr+0x2e>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   19a2e:	4a28      	ldr	r2, [pc, #160]	; (19ad0 <bt_id_set_adv_own_addr+0xc4>)
   19a30:	f892 20d0 	ldrb.w	r2, [r2, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   19a34:	f012 0f40 	tst.w	r2, #64	; 0x40
   19a38:	d042      	beq.n	19ac0 <bt_id_set_adv_own_addr+0xb4>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   19a3a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   19a3e:	4924      	ldr	r1, [pc, #144]	; (19ad0 <bt_id_set_adv_own_addr+0xc4>)
   19a40:	5c8a      	ldrb	r2, [r1, r2]
   19a42:	2a01      	cmp	r2, #1
   19a44:	d00e      	beq.n	19a64 <bt_id_set_adv_own_addr+0x58>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   19a46:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19a4a:	4b21      	ldr	r3, [pc, #132]	; (19ad0 <bt_id_set_adv_own_addr+0xc4>)
   19a4c:	5d1b      	ldrb	r3, [r3, r4]
   19a4e:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   19a50:	2f00      	cmp	r7, #0
   19a52:	d038      	beq.n	19ac6 <bt_id_set_adv_own_addr+0xba>
   19a54:	f016 0f20 	tst.w	r6, #32
   19a58:	d037      	beq.n	19aca <bt_id_set_adv_own_addr+0xbe>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   19a5a:	f043 0302 	orr.w	r3, r3, #2
   19a5e:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   19a60:	2000      	movs	r0, #0
   19a62:	e019      	b.n	19a98 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   19a64:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   19a68:	4a19      	ldr	r2, [pc, #100]	; (19ad0 <bt_id_set_adv_own_addr+0xc4>)
   19a6a:	4411      	add	r1, r2
   19a6c:	3101      	adds	r1, #1
   19a6e:	4618      	mov	r0, r3
   19a70:	f010 f859 	bl	29b26 <bt_id_set_adv_random_addr>
				if (err) {
   19a74:	2800      	cmp	r0, #0
   19a76:	d0e6      	beq.n	19a46 <bt_id_set_adv_own_addr+0x3a>
   19a78:	e00e      	b.n	19a98 <bt_id_set_adv_own_addr+0x8c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   19a7a:	f011 0f04 	tst.w	r1, #4
   19a7e:	d014      	beq.n	19aaa <bt_id_set_adv_own_addr+0x9e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   19a80:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   19a84:	4912      	ldr	r1, [pc, #72]	; (19ad0 <bt_id_set_adv_own_addr+0xc4>)
   19a86:	5c8a      	ldrb	r2, [r1, r2]
   19a88:	2a01      	cmp	r2, #1
   19a8a:	d006      	beq.n	19a9a <bt_id_set_adv_own_addr+0x8e>
	int err = 0;
   19a8c:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   19a8e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19a92:	4b0f      	ldr	r3, [pc, #60]	; (19ad0 <bt_id_set_adv_own_addr+0xc4>)
   19a94:	5d1b      	ldrb	r3, [r3, r4]
   19a96:	702b      	strb	r3, [r5, #0]
}
   19a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   19a9a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   19a9e:	4a0c      	ldr	r2, [pc, #48]	; (19ad0 <bt_id_set_adv_own_addr+0xc4>)
   19aa0:	4411      	add	r1, r2
   19aa2:	3101      	adds	r1, #1
   19aa4:	f010 f83f 	bl	29b26 <bt_id_set_adv_random_addr>
   19aa8:	e7f1      	b.n	19a8e <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   19aaa:	f010 f849 	bl	29b40 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   19aae:	2301      	movs	r3, #1
   19ab0:	702b      	strb	r3, [r5, #0]
		if (err) {
   19ab2:	e7f1      	b.n	19a98 <bt_id_set_adv_own_addr+0x8c>
		return -EINVAL;
   19ab4:	f06f 0015 	mvn.w	r0, #21
}
   19ab8:	4770      	bx	lr
		return -EINVAL;
   19aba:	f06f 0015 	mvn.w	r0, #21
   19abe:	e7eb      	b.n	19a98 <bt_id_set_adv_own_addr+0x8c>
			return -ENOTSUP;
   19ac0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19ac4:	e7e8      	b.n	19a98 <bt_id_set_adv_own_addr+0x8c>
	return 0;
   19ac6:	2000      	movs	r0, #0
   19ac8:	e7e6      	b.n	19a98 <bt_id_set_adv_own_addr+0x8c>
   19aca:	2000      	movs	r0, #0
   19acc:	e7e4      	b.n	19a98 <bt_id_set_adv_own_addr+0x8c>
   19ace:	bf00      	nop
   19ad0:	20000388 	.word	0x20000388

00019ad4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   19ad4:	b510      	push	{r4, lr}
   19ad6:	b094      	sub	sp, #80	; 0x50
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   19ad8:	4b45      	ldr	r3, [pc, #276]	; (19bf0 <bt_id_init+0x11c>)
   19ada:	79db      	ldrb	r3, [r3, #7]
   19adc:	b133      	cbz	r3, 19aec <bt_id_init+0x18>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   19ade:	4b44      	ldr	r3, [pc, #272]	; (19bf0 <bt_id_init+0x11c>)
   19ae0:	79db      	ldrb	r3, [r3, #7]
   19ae2:	b373      	cbz	r3, 19b42 <bt_id_init+0x6e>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   19ae4:	2400      	movs	r4, #0
}
   19ae6:	4620      	mov	r0, r4
   19ae8:	b014      	add	sp, #80	; 0x50
   19aea:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   19aec:	f7ff fe8c 	bl	19808 <bt_setup_public_id_addr>
		if (err) {
   19af0:	4604      	mov	r4, r0
   19af2:	2800      	cmp	r0, #0
   19af4:	d0f3      	beq.n	19ade <bt_id_init+0xa>
			LOG_ERR("Unable to set identity address");
   19af6:	4b3f      	ldr	r3, [pc, #252]	; (19bf4 <bt_id_init+0x120>)
   19af8:	9307      	str	r3, [sp, #28]
   19afa:	2302      	movs	r3, #2
   19afc:	f88d 3004 	strb.w	r3, [sp, #4]
   19b00:	2300      	movs	r3, #0
   19b02:	f88d 3005 	strb.w	r3, [sp, #5]
   19b06:	f88d 3006 	strb.w	r3, [sp, #6]
   19b0a:	f88d 3007 	strb.w	r3, [sp, #7]
   19b0e:	9a01      	ldr	r2, [sp, #4]
   19b10:	9206      	str	r2, [sp, #24]
   19b12:	4619      	mov	r1, r3
   19b14:	f363 0100 	bfi	r1, r3, #0, #1
   19b18:	f363 0141 	bfi	r1, r3, #1, #1
   19b1c:	f363 0182 	bfi	r1, r3, #2, #1
   19b20:	f363 01c5 	bfi	r1, r3, #3, #3
   19b24:	2201      	movs	r2, #1
   19b26:	f362 1188 	bfi	r1, r2, #6, #3
   19b2a:	2208      	movs	r2, #8
   19b2c:	f362 2152 	bfi	r1, r2, #9, #10
   19b30:	f363 41de 	bfi	r1, r3, #19, #12
   19b34:	f363 71df 	bfi	r1, r3, #31, #1
   19b38:	aa06      	add	r2, sp, #24
   19b3a:	482f      	ldr	r0, [pc, #188]	; (19bf8 <bt_id_init+0x124>)
   19b3c:	f00f f941 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return err;
   19b40:	e7d1      	b.n	19ae6 <bt_id_init+0x12>
		err = bt_setup_random_id_addr();
   19b42:	f7ff ff31 	bl	199a8 <bt_setup_random_id_addr>
		if (err) {
   19b46:	4604      	mov	r4, r0
   19b48:	bb58      	cbnz	r0, 19ba2 <bt_id_init+0xce>
		err = set_random_address(&bt_dev.id_addr[0].a);
   19b4a:	482c      	ldr	r0, [pc, #176]	; (19bfc <bt_id_init+0x128>)
   19b4c:	f7ff fcf4 	bl	19538 <set_random_address>
		if (err) {
   19b50:	4604      	mov	r4, r0
   19b52:	2800      	cmp	r0, #0
   19b54:	d0c7      	beq.n	19ae6 <bt_id_init+0x12>
			LOG_ERR("Unable to set random address");
   19b56:	4b2a      	ldr	r3, [pc, #168]	; (19c00 <bt_id_init+0x12c>)
   19b58:	930d      	str	r3, [sp, #52]	; 0x34
   19b5a:	2302      	movs	r3, #2
   19b5c:	f88d 3004 	strb.w	r3, [sp, #4]
   19b60:	2300      	movs	r3, #0
   19b62:	f88d 3005 	strb.w	r3, [sp, #5]
   19b66:	f88d 3006 	strb.w	r3, [sp, #6]
   19b6a:	f88d 3007 	strb.w	r3, [sp, #7]
   19b6e:	9a01      	ldr	r2, [sp, #4]
   19b70:	920c      	str	r2, [sp, #48]	; 0x30
   19b72:	4619      	mov	r1, r3
   19b74:	f363 0100 	bfi	r1, r3, #0, #1
   19b78:	f363 0141 	bfi	r1, r3, #1, #1
   19b7c:	f363 0182 	bfi	r1, r3, #2, #1
   19b80:	f363 01c5 	bfi	r1, r3, #3, #3
   19b84:	2201      	movs	r2, #1
   19b86:	f362 1188 	bfi	r1, r2, #6, #3
   19b8a:	2208      	movs	r2, #8
   19b8c:	f362 2152 	bfi	r1, r2, #9, #10
   19b90:	f363 41de 	bfi	r1, r3, #19, #12
   19b94:	f363 71df 	bfi	r1, r3, #31, #1
   19b98:	aa0c      	add	r2, sp, #48	; 0x30
   19b9a:	4817      	ldr	r0, [pc, #92]	; (19bf8 <bt_id_init+0x124>)
   19b9c:	f00f f911 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return err;
   19ba0:	e7a1      	b.n	19ae6 <bt_id_init+0x12>
			LOG_ERR("Unable to set identity address");
   19ba2:	4b14      	ldr	r3, [pc, #80]	; (19bf4 <bt_id_init+0x120>)
   19ba4:	9313      	str	r3, [sp, #76]	; 0x4c
   19ba6:	2302      	movs	r3, #2
   19ba8:	f88d 3004 	strb.w	r3, [sp, #4]
   19bac:	2300      	movs	r3, #0
   19bae:	f88d 3005 	strb.w	r3, [sp, #5]
   19bb2:	f88d 3006 	strb.w	r3, [sp, #6]
   19bb6:	f88d 3007 	strb.w	r3, [sp, #7]
   19bba:	9a01      	ldr	r2, [sp, #4]
   19bbc:	9212      	str	r2, [sp, #72]	; 0x48
   19bbe:	4619      	mov	r1, r3
   19bc0:	f363 0100 	bfi	r1, r3, #0, #1
   19bc4:	f363 0141 	bfi	r1, r3, #1, #1
   19bc8:	f363 0182 	bfi	r1, r3, #2, #1
   19bcc:	f363 01c5 	bfi	r1, r3, #3, #3
   19bd0:	2201      	movs	r2, #1
   19bd2:	f362 1188 	bfi	r1, r2, #6, #3
   19bd6:	2208      	movs	r2, #8
   19bd8:	f362 2152 	bfi	r1, r2, #9, #10
   19bdc:	f363 41de 	bfi	r1, r3, #19, #12
   19be0:	f363 71df 	bfi	r1, r3, #31, #1
   19be4:	aa12      	add	r2, sp, #72	; 0x48
   19be6:	4804      	ldr	r0, [pc, #16]	; (19bf8 <bt_id_init+0x124>)
   19be8:	f00f f8eb 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return err;
   19bec:	e77b      	b.n	19ae6 <bt_id_init+0x12>
   19bee:	bf00      	nop
   19bf0:	20000388 	.word	0x20000388
   19bf4:	00030658 	.word	0x00030658
   19bf8:	0002eea8 	.word	0x0002eea8
   19bfc:	20000389 	.word	0x20000389
   19c00:	00030678 	.word	0x00030678

00019c04 <adv_get_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   19c04:	4800      	ldr	r0, [pc, #0]	; (19c08 <adv_get_legacy+0x4>)
   19c06:	4770      	bx	lr
   19c08:	200003a0 	.word	0x200003a0

00019c0c <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   19c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c10:	b08b      	sub	sp, #44	; 0x2c
   19c12:	4607      	mov	r7, r0
   19c14:	4689      	mov	r9, r1
   19c16:	4614      	mov	r4, r2
   19c18:	461e      	mov	r6, r3
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   19c1a:	f04f 0b00 	mov.w	fp, #0
	uint8_t set_data_len = 0;
   19c1e:	465b      	mov	r3, fp
	for (size_t i = 0; i < ad_len; i++) {
   19c20:	45b3      	cmp	fp, r6
   19c22:	d265      	bcs.n	19cf0 <set_data_add_complete+0xe4>
		const struct bt_data *data = ad[i].data;
   19c24:	eb04 0acb 	add.w	sl, r4, fp, lsl #3
   19c28:	f854 803b 	ldr.w	r8, [r4, fp, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   19c2c:	2500      	movs	r5, #0
   19c2e:	f8cd b000 	str.w	fp, [sp]
   19c32:	9401      	str	r4, [sp, #4]
   19c34:	e03d      	b.n	19cb2 <set_data_add_complete+0xa6>
				ssize_t shortened_len = set_data_len_max -
							(set_data_len + 2);

				if (!(type == BT_DATA_NAME_COMPLETE &&
				      shortened_len > 0)) {
					LOG_ERR("Too big advertising data");
   19c36:	4b30      	ldr	r3, [pc, #192]	; (19cf8 <set_data_add_complete+0xec>)
   19c38:	9309      	str	r3, [sp, #36]	; 0x24
   19c3a:	2302      	movs	r3, #2
   19c3c:	f88d 300c 	strb.w	r3, [sp, #12]
   19c40:	2300      	movs	r3, #0
   19c42:	f88d 300d 	strb.w	r3, [sp, #13]
   19c46:	f88d 300e 	strb.w	r3, [sp, #14]
   19c4a:	f88d 300f 	strb.w	r3, [sp, #15]
   19c4e:	9a03      	ldr	r2, [sp, #12]
   19c50:	9208      	str	r2, [sp, #32]
   19c52:	4619      	mov	r1, r3
   19c54:	f363 0100 	bfi	r1, r3, #0, #1
   19c58:	f363 0141 	bfi	r1, r3, #1, #1
   19c5c:	f363 0182 	bfi	r1, r3, #2, #1
   19c60:	f363 01c5 	bfi	r1, r3, #3, #3
   19c64:	2201      	movs	r2, #1
   19c66:	f362 1188 	bfi	r1, r2, #6, #3
   19c6a:	2208      	movs	r2, #8
   19c6c:	f362 2152 	bfi	r1, r2, #9, #10
   19c70:	f363 41de 	bfi	r1, r3, #19, #12
   19c74:	f363 71df 	bfi	r1, r3, #31, #1
   19c78:	aa08      	add	r2, sp, #32
   19c7a:	4820      	ldr	r0, [pc, #128]	; (19cfc <set_data_add_complete+0xf0>)
   19c7c:	f00f f8a1 	bl	28dc2 <z_impl_z_log_msg_static_create>
					return -EINVAL;
   19c80:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   19c84:	b00b      	add	sp, #44	; 0x2c
   19c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_data[set_data_len++] = len + 1;
   19c8a:	b2d4      	uxtb	r4, r2
   19c8c:	1c59      	adds	r1, r3, #1
   19c8e:	b2c9      	uxtb	r1, r1
   19c90:	f104 0b01 	add.w	fp, r4, #1
   19c94:	f807 b00e 	strb.w	fp, [r7, lr]
			set_data[set_data_len++] = type;
   19c98:	3302      	adds	r3, #2
   19c9a:	fa5f fb83 	uxtb.w	fp, r3
   19c9e:	f807 c001 	strb.w	ip, [r7, r1]
   19ca2:	6841      	ldr	r1, [r0, #4]
   19ca4:	eb07 000b 	add.w	r0, r7, fp
   19ca8:	f014 fb0f 	bl	2e2ca <memcpy>
			set_data_len += len;
   19cac:	445c      	add	r4, fp
   19cae:	b2e3      	uxtb	r3, r4
		for (size_t j = 0; j < ad[i].len; j++) {
   19cb0:	3501      	adds	r5, #1
   19cb2:	f8da 2004 	ldr.w	r2, [sl, #4]
   19cb6:	4295      	cmp	r5, r2
   19cb8:	d214      	bcs.n	19ce4 <set_data_add_complete+0xd8>
			size_t len = data[j].data_len;
   19cba:	eb08 00c5 	add.w	r0, r8, r5, lsl #3
   19cbe:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   19cc0:	f818 c035 	ldrb.w	ip, [r8, r5, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   19cc4:	469e      	mov	lr, r3
   19cc6:	1899      	adds	r1, r3, r2
   19cc8:	3102      	adds	r1, #2
   19cca:	4549      	cmp	r1, r9
   19ccc:	d9dd      	bls.n	19c8a <set_data_add_complete+0x7e>
							(set_data_len + 2);
   19cce:	1c9a      	adds	r2, r3, #2
				ssize_t shortened_len = set_data_len_max -
   19cd0:	eba9 0202 	sub.w	r2, r9, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   19cd4:	f1bc 0f09 	cmp.w	ip, #9
   19cd8:	d1ad      	bne.n	19c36 <set_data_add_complete+0x2a>
   19cda:	2a00      	cmp	r2, #0
   19cdc:	ddab      	ble.n	19c36 <set_data_add_complete+0x2a>
				type = BT_DATA_NAME_SHORTENED;
   19cde:	f04f 0c08 	mov.w	ip, #8
   19ce2:	e7d2      	b.n	19c8a <set_data_add_complete+0x7e>
	for (size_t i = 0; i < ad_len; i++) {
   19ce4:	f8dd b000 	ldr.w	fp, [sp]
   19ce8:	9c01      	ldr	r4, [sp, #4]
   19cea:	f10b 0b01 	add.w	fp, fp, #1
   19cee:	e797      	b.n	19c20 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   19cf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19cf2:	7013      	strb	r3, [r2, #0]
	return 0;
   19cf4:	2000      	movs	r0, #0
   19cf6:	e7c5      	b.n	19c84 <set_data_add_complete+0x78>
   19cf8:	000306a0 	.word	0x000306a0
   19cfc:	0002ee78 	.word	0x0002ee78

00019d00 <valid_adv_ext_param>:
{
   19d00:	b510      	push	{r4, lr}
   19d02:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   19d04:	7800      	ldrb	r0, [r0, #0]
   19d06:	4b21      	ldr	r3, [pc, #132]	; (19d8c <valid_adv_ext_param+0x8c>)
   19d08:	79db      	ldrb	r3, [r3, #7]
   19d0a:	4298      	cmp	r0, r3
   19d0c:	d301      	bcc.n	19d12 <valid_adv_ext_param+0x12>
		return false;
   19d0e:	2000      	movs	r0, #0
}
   19d10:	bd10      	pop	{r4, pc}
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   19d12:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
   19d16:	2207      	movs	r2, #7
   19d18:	491d      	ldr	r1, [pc, #116]	; (19d90 <valid_adv_ext_param+0x90>)
   19d1a:	4b1c      	ldr	r3, [pc, #112]	; (19d8c <valid_adv_ext_param+0x8c>)
   19d1c:	4418      	add	r0, r3
   19d1e:	f014 fac4 	bl	2e2aa <memcmp>
	if (param->id >= bt_dev.id_count ||
   19d22:	2800      	cmp	r0, #0
   19d24:	d0f3      	beq.n	19d0e <valid_adv_ext_param+0xe>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   19d26:	6863      	ldr	r3, [r4, #4]
   19d28:	f013 0f01 	tst.w	r3, #1
   19d2c:	d107      	bne.n	19d3e <valid_adv_ext_param+0x3e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   19d2e:	4a17      	ldr	r2, [pc, #92]	; (19d8c <valid_adv_ext_param+0x8c>)
   19d30:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   19d34:	2a08      	cmp	r2, #8
   19d36:	d802      	bhi.n	19d3e <valid_adv_ext_param+0x3e>
		    param->interval_min < 0x00a0) {
   19d38:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   19d3a:	2a9f      	cmp	r2, #159	; 0x9f
   19d3c:	d91b      	bls.n	19d76 <valid_adv_ext_param+0x76>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   19d3e:	f013 0f30 	tst.w	r3, #48	; 0x30
   19d42:	d001      	beq.n	19d48 <valid_adv_ext_param+0x48>
	    !param->peer) {
   19d44:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   19d46:	b1c2      	cbz	r2, 19d7a <valid_adv_ext_param+0x7a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   19d48:	f013 0f10 	tst.w	r3, #16
   19d4c:	d108      	bne.n	19d60 <valid_adv_ext_param+0x60>
	    !param->peer) {
   19d4e:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   19d50:	b132      	cbz	r2, 19d60 <valid_adv_ext_param+0x60>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   19d52:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   19d56:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   19d5a:	d014      	beq.n	19d86 <valid_adv_ext_param+0x86>
	return true;
   19d5c:	2001      	movs	r0, #1
   19d5e:	e7d7      	b.n	19d10 <valid_adv_ext_param+0x10>
		if (param->interval_min > param->interval_max ||
   19d60:	68a2      	ldr	r2, [r4, #8]
   19d62:	68e1      	ldr	r1, [r4, #12]
   19d64:	428a      	cmp	r2, r1
   19d66:	d80a      	bhi.n	19d7e <valid_adv_ext_param+0x7e>
   19d68:	2a1f      	cmp	r2, #31
   19d6a:	d90a      	bls.n	19d82 <valid_adv_ext_param+0x82>
		    param->interval_min < 0x0020 ||
   19d6c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   19d70:	d9ef      	bls.n	19d52 <valid_adv_ext_param+0x52>
			return false;
   19d72:	2000      	movs	r0, #0
   19d74:	e7cc      	b.n	19d10 <valid_adv_ext_param+0x10>
			return false;
   19d76:	2000      	movs	r0, #0
   19d78:	e7ca      	b.n	19d10 <valid_adv_ext_param+0x10>
		return false;
   19d7a:	2000      	movs	r0, #0
   19d7c:	e7c8      	b.n	19d10 <valid_adv_ext_param+0x10>
			return false;
   19d7e:	2000      	movs	r0, #0
   19d80:	e7c6      	b.n	19d10 <valid_adv_ext_param+0x10>
   19d82:	2000      	movs	r0, #0
   19d84:	e7c4      	b.n	19d10 <valid_adv_ext_param+0x10>
		return false;
   19d86:	2000      	movs	r0, #0
   19d88:	e7c2      	b.n	19d10 <valid_adv_ext_param+0x10>
   19d8a:	bf00      	nop
   19d8c:	20000388 	.word	0x20000388
   19d90:	0002fe9c 	.word	0x0002fe9c

00019d94 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   19d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d96:	4604      	mov	r4, r0
   19d98:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   19d9a:	4605      	mov	r5, r0
   19d9c:	f815 2b09 	ldrb.w	r2, [r5], #9
   19da0:	4b17      	ldr	r3, [pc, #92]	; (19e00 <le_adv_start_add_conn+0x6c>)
   19da2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   19da6:	2207      	movs	r2, #7
   19da8:	4916      	ldr	r1, [pc, #88]	; (19e04 <le_adv_start_add_conn+0x70>)
   19daa:	4628      	mov	r0, r5
   19dac:	f014 fa7d 	bl	2e2aa <memcmp>

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   19db0:	b960      	cbnz	r0, 19dcc <le_adv_start_add_conn+0x38>
   19db2:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   19db4:	4914      	ldr	r1, [pc, #80]	; (19e08 <le_adv_start_add_conn+0x74>)
   19db6:	7820      	ldrb	r0, [r4, #0]
   19db8:	f010 fa8d 	bl	2a2d6 <bt_conn_add_le>
		if (!conn) {
   19dbc:	4604      	mov	r4, r0
   19dbe:	b1b0      	cbz	r0, 19dee <le_adv_start_add_conn+0x5a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   19dc0:	2104      	movs	r1, #4
   19dc2:	f000 fe5b 	bl	1aa7c <bt_conn_set_state>
		*out_conn = conn;
   19dc6:	603c      	str	r4, [r7, #0]
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   19dc8:	4630      	mov	r0, r6
   19dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   19dcc:	4629      	mov	r1, r5
   19dce:	7820      	ldrb	r0, [r4, #0]
   19dd0:	f001 f8d6 	bl	1af80 <bt_conn_exists_le>
   19dd4:	b970      	cbnz	r0, 19df4 <le_adv_start_add_conn+0x60>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   19dd6:	4629      	mov	r1, r5
   19dd8:	7820      	ldrb	r0, [r4, #0]
   19dda:	f010 fa7c 	bl	2a2d6 <bt_conn_add_le>
	if (!conn) {
   19dde:	4604      	mov	r4, r0
   19de0:	b158      	cbz	r0, 19dfa <le_adv_start_add_conn+0x66>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   19de2:	2105      	movs	r1, #5
   19de4:	f000 fe4a 	bl	1aa7c <bt_conn_set_state>
	*out_conn = conn;
   19de8:	603c      	str	r4, [r7, #0]
	return 0;
   19dea:	2600      	movs	r6, #0
   19dec:	e7ec      	b.n	19dc8 <le_adv_start_add_conn+0x34>
			return -ENOMEM;
   19dee:	f06f 060b 	mvn.w	r6, #11
   19df2:	e7e9      	b.n	19dc8 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   19df4:	f06f 0615 	mvn.w	r6, #21
   19df8:	e7e6      	b.n	19dc8 <le_adv_start_add_conn+0x34>
		return -ENOMEM;
   19dfa:	f06f 060b 	mvn.w	r6, #11
   19dfe:	e7e3      	b.n	19dc8 <le_adv_start_add_conn+0x34>
   19e00:	20000388 	.word	0x20000388
   19e04:	0002fe9c 	.word	0x0002fe9c
   19e08:	0002fe94 	.word	0x0002fe94

00019e0c <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   19e0c:	b570      	push	{r4, r5, r6, lr}
   19e0e:	4604      	mov	r4, r0
   19e10:	460d      	mov	r5, r1
	struct bt_conn *conn;

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   19e12:	f100 0609 	add.w	r6, r0, #9
   19e16:	2207      	movs	r2, #7
   19e18:	490d      	ldr	r1, [pc, #52]	; (19e50 <le_adv_stop_free_conn+0x44>)
   19e1a:	4630      	mov	r0, r6
   19e1c:	f014 fa45 	bl	2e2aa <memcmp>
   19e20:	b978      	cbnz	r0, 19e42 <le_adv_stop_free_conn+0x36>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   19e22:	2204      	movs	r2, #4
   19e24:	490b      	ldr	r1, [pc, #44]	; (19e54 <le_adv_stop_free_conn+0x48>)
   19e26:	7820      	ldrb	r0, [r4, #0]
   19e28:	f001 f91c 	bl	1b064 <bt_conn_lookup_state_le>
   19e2c:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   19e2e:	b13c      	cbz	r4, 19e40 <le_adv_stop_free_conn+0x34>
		conn->err = status;
   19e30:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19e32:	2100      	movs	r1, #0
   19e34:	4620      	mov	r0, r4
   19e36:	f000 fe21 	bl	1aa7c <bt_conn_set_state>
		bt_conn_unref(conn);
   19e3a:	4620      	mov	r0, r4
   19e3c:	f010 f9f6 	bl	2a22c <bt_conn_unref>
	}
}
   19e40:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   19e42:	2205      	movs	r2, #5
   19e44:	4631      	mov	r1, r6
   19e46:	7820      	ldrb	r0, [r4, #0]
   19e48:	f001 f90c 	bl	1b064 <bt_conn_lookup_state_le>
   19e4c:	4604      	mov	r4, r0
   19e4e:	e7ee      	b.n	19e2e <le_adv_stop_free_conn+0x22>
   19e50:	0002fe9c 	.word	0x0002fe9c
   19e54:	0002fe94 	.word	0x0002fe94

00019e58 <bt_le_adv_lookup_legacy>:
}
   19e58:	4800      	ldr	r0, [pc, #0]	; (19e5c <bt_le_adv_lookup_legacy+0x4>)
   19e5a:	4770      	bx	lr
   19e5c:	200003a0 	.word	0x200003a0

00019e60 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   19e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e64:	b093      	sub	sp, #76	; 0x4c
   19e66:	9205      	str	r2, [sp, #20]
   19e68:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   19e6a:	2300      	movs	r3, #0
   19e6c:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   19e6e:	690e      	ldr	r6, [r1, #16]
   19e70:	ebb6 0b03 	subs.w	fp, r6, r3
   19e74:	bf18      	it	ne
   19e76:	f04f 0b01 	movne.w	fp, #1
   19e7a:	f3bf 8f5b 	dmb	ish
   19e7e:	4bad      	ldr	r3, [pc, #692]	; (1a134 <bt_le_adv_start_legacy+0x2d4>)
   19e80:	681b      	ldr	r3, [r3, #0]
   19e82:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19e86:	f013 0f04 	tst.w	r3, #4
   19e8a:	f000 8141 	beq.w	1a110 <bt_le_adv_start_legacy+0x2b0>
   19e8e:	4605      	mov	r5, r0
   19e90:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   19e92:	4608      	mov	r0, r1
   19e94:	f00f ff7c 	bl	29d90 <valid_adv_param>
   19e98:	2800      	cmp	r0, #0
   19e9a:	f000 813c 	beq.w	1a116 <bt_le_adv_start_legacy+0x2b6>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   19e9e:	4620      	mov	r0, r4
   19ea0:	f00f fe67 	bl	29b72 <bt_id_adv_random_addr_check>
   19ea4:	4682      	mov	sl, r0
   19ea6:	2800      	cmp	r0, #0
   19ea8:	f000 8138 	beq.w	1a11c <bt_le_adv_start_legacy+0x2bc>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19eac:	f105 0710 	add.w	r7, r5, #16
   19eb0:	2107      	movs	r1, #7
   19eb2:	4638      	mov	r0, r7
   19eb4:	f00f fe93 	bl	29bde <atomic_test_bit>
   19eb8:	9004      	str	r0, [sp, #16]
   19eba:	2800      	cmp	r0, #0
   19ebc:	f040 8131 	bne.w	1a122 <bt_le_adv_start_legacy+0x2c2>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   19ec0:	2300      	movs	r3, #0
   19ec2:	9308      	str	r3, [sp, #32]
   19ec4:	9309      	str	r3, [sp, #36]	; 0x24
   19ec6:	930a      	str	r3, [sp, #40]	; 0x28
   19ec8:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   19ecc:	68a3      	ldr	r3, [r4, #8]
   19ece:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   19ed2:	68e3      	ldr	r3, [r4, #12]
   19ed4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   19ed8:	f8d4 9004 	ldr.w	r9, [r4, #4]
   19edc:	4648      	mov	r0, r9
   19ede:	f00f fe6c 	bl	29bba <get_adv_channel_map>
   19ee2:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   19ee6:	4648      	mov	r0, r9
   19ee8:	f00f fe65 	bl	29bb6 <get_filter_policy>
   19eec:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   19ef0:	782a      	ldrb	r2, [r5, #0]
   19ef2:	7823      	ldrb	r3, [r4, #0]
   19ef4:	429a      	cmp	r2, r3
   19ef6:	d00c      	beq.n	19f12 <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19ef8:	4b8e      	ldr	r3, [pc, #568]	; (1a134 <bt_le_adv_start_legacy+0x2d4>)
   19efa:	f3bf 8f5b 	dmb	ish
   19efe:	e853 1f00 	ldrex	r1, [r3]
   19f02:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   19f06:	e843 1200 	strex	r2, r1, [r3]
   19f0a:	2a00      	cmp	r2, #0
   19f0c:	d1f7      	bne.n	19efe <bt_le_adv_start_legacy+0x9e>
   19f0e:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   19f12:	7823      	ldrb	r3, [r4, #0]
   19f14:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   19f16:	4a88      	ldr	r2, [pc, #544]	; (1a138 <bt_le_adv_start_legacy+0x2d8>)
   19f18:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   19f1c:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   19f20:	465a      	mov	r2, fp
   19f22:	6861      	ldr	r1, [r4, #4]
   19f24:	4628      	mov	r0, r5
   19f26:	f7ff fd71 	bl	19a0c <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   19f2a:	4681      	mov	r9, r0
   19f2c:	2800      	cmp	r0, #0
   19f2e:	f040 80b4 	bne.w	1a09a <bt_le_adv_start_legacy+0x23a>
		return err;
	}

	if (dir_adv) {
   19f32:	b1de      	cbz	r6, 19f6c <bt_le_adv_start_legacy+0x10c>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   19f34:	6921      	ldr	r1, [r4, #16]
   19f36:	f105 0009 	add.w	r0, r5, #9
   19f3a:	f00f fe5d 	bl	29bf8 <bt_addr_le_copy>
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   19f3e:	4620      	mov	r0, r4
   19f40:	f00f ff78 	bl	29e34 <get_adv_name_type_param>
   19f44:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   19f46:	6863      	ldr	r3, [r4, #4]
   19f48:	f013 0f01 	tst.w	r3, #1
   19f4c:	d01c      	beq.n	19f88 <bt_le_adv_start_legacy+0x128>
		if (dir_adv) {
   19f4e:	b1be      	cbz	r6, 19f80 <bt_le_adv_start_legacy+0x120>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   19f50:	f013 0f10 	tst.w	r3, #16
   19f54:	d010      	beq.n	19f78 <bt_le_adv_start_legacy+0x118>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   19f56:	2304      	movs	r3, #4
   19f58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   19f5c:	6921      	ldr	r1, [r4, #16]
   19f5e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   19f62:	f00f fe49 	bl	29bf8 <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   19f66:	f8dd a010 	ldr.w	sl, [sp, #16]
   19f6a:	e015      	b.n	19f98 <bt_le_adv_start_legacy+0x138>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   19f6c:	4973      	ldr	r1, [pc, #460]	; (1a13c <bt_le_adv_start_legacy+0x2dc>)
   19f6e:	f105 0009 	add.w	r0, r5, #9
   19f72:	f00f fe41 	bl	29bf8 <bt_addr_le_copy>
   19f76:	e7e2      	b.n	19f3e <bt_le_adv_start_legacy+0xde>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   19f78:	2301      	movs	r3, #1
   19f7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   19f7e:	e7ed      	b.n	19f5c <bt_le_adv_start_legacy+0xfc>
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   19f80:	2300      	movs	r3, #0
   19f82:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   19f86:	e007      	b.n	19f98 <bt_le_adv_start_legacy+0x138>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   19f88:	f413 7f00 	tst.w	r3, #512	; 0x200
   19f8c:	d101      	bne.n	19f92 <bt_le_adv_start_legacy+0x132>
   19f8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   19f90:	b353      	cbz	r3, 19fe8 <bt_le_adv_start_legacy+0x188>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   19f92:	2302      	movs	r3, #2
   19f94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   19f98:	210f      	movs	r1, #15
   19f9a:	f242 0006 	movw	r0, #8198	; 0x2006
   19f9e:	f7fd ffc9 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   19fa2:	4681      	mov	r9, r0
   19fa4:	2800      	cmp	r0, #0
   19fa6:	f000 80bf 	beq.w	1a128 <bt_le_adv_start_legacy+0x2c8>
   19faa:	220f      	movs	r2, #15
   19fac:	a908      	add	r1, sp, #32
   19fae:	300c      	adds	r0, #12
   19fb0:	f011 fefc 	bl	2bdac <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   19fb4:	2200      	movs	r2, #0
   19fb6:	4649      	mov	r1, r9
   19fb8:	f242 0006 	movw	r0, #8198	; 0x2006
   19fbc:	f7fd fff8 	bl	17fb0 <bt_hci_cmd_send_sync>
	if (err) {
   19fc0:	4681      	mov	r9, r0
   19fc2:	2800      	cmp	r0, #0
   19fc4:	d169      	bne.n	1a09a <bt_le_adv_start_legacy+0x23a>
		return err;
	}

	if (!dir_adv) {
   19fc6:	b1be      	cbz	r6, 19ff8 <bt_le_adv_start_legacy+0x198>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   19fc8:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19fca:	f013 0f01 	tst.w	r3, #1
   19fce:	d02b      	beq.n	1a028 <bt_le_adv_start_legacy+0x1c8>
		err = le_adv_start_add_conn(adv, &conn);
   19fd0:	a907      	add	r1, sp, #28
   19fd2:	4628      	mov	r0, r5
   19fd4:	f7ff fede 	bl	19d94 <le_adv_start_add_conn>
		if (err) {
   19fd8:	b330      	cbz	r0, 1a028 <bt_le_adv_start_legacy+0x1c8>
			if (err == -ENOMEM && !dir_adv &&
   19fda:	f110 0f0c 	cmn.w	r0, #12
   19fde:	f040 80a6 	bne.w	1a12e <bt_le_adv_start_legacy+0x2ce>
   19fe2:	b1de      	cbz	r6, 1a01c <bt_le_adv_start_legacy+0x1bc>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   19fe4:	4681      	mov	r9, r0
   19fe6:	e058      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   19fe8:	2802      	cmp	r0, #2
   19fea:	d0d2      	beq.n	19f92 <bt_le_adv_start_legacy+0x132>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   19fec:	2303      	movs	r3, #3
   19fee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   19ff2:	f8dd a010 	ldr.w	sl, [sp, #16]
   19ff6:	e7cf      	b.n	19f98 <bt_le_adv_start_legacy+0x138>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   19ff8:	f8cd b00c 	str.w	fp, [sp, #12]
   19ffc:	f8cd a008 	str.w	sl, [sp, #8]
   1a000:	2300      	movs	r3, #0
   1a002:	9301      	str	r3, [sp, #4]
   1a004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1a006:	9300      	str	r3, [sp, #0]
   1a008:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1a00a:	4642      	mov	r2, r8
   1a00c:	9905      	ldr	r1, [sp, #20]
   1a00e:	4628      	mov	r0, r5
   1a010:	f00f fe33 	bl	29c7a <le_adv_update>
		if (err) {
   1a014:	2800      	cmp	r0, #0
   1a016:	d0d7      	beq.n	19fc8 <bt_le_adv_start_legacy+0x168>
			return err;
   1a018:	4681      	mov	r9, r0
   1a01a:	e03e      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1a01c:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1a01e:	f012 0f02 	tst.w	r2, #2
   1a022:	d00c      	beq.n	1a03e <bt_le_adv_start_legacy+0x1de>
			return err;
   1a024:	4681      	mov	r9, r0
   1a026:	e038      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   1a028:	2101      	movs	r1, #1
   1a02a:	4628      	mov	r0, r5
   1a02c:	f00f ff3e 	bl	29eac <bt_le_adv_set_enable>
	if (err) {
   1a030:	4605      	mov	r5, r0
   1a032:	2800      	cmp	r0, #0
   1a034:	d135      	bne.n	1a0a2 <bt_le_adv_start_legacy+0x242>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1a036:	9807      	ldr	r0, [sp, #28]
   1a038:	b108      	cbz	r0, 1a03e <bt_le_adv_start_legacy+0x1de>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   1a03a:	f010 f8f7 	bl	2a22c <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1a03e:	2e00      	cmp	r6, #0
   1a040:	d05e      	beq.n	1a100 <bt_le_adv_start_legacy+0x2a0>
   1a042:	464a      	mov	r2, r9
   1a044:	f002 0201 	and.w	r2, r2, #1
   1a048:	210e      	movs	r1, #14
   1a04a:	4638      	mov	r0, r7
   1a04c:	f00f feb1 	bl	29db2 <atomic_set_bit_to>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1a050:	f1bb 0f01 	cmp.w	fp, #1
   1a054:	bf14      	ite	ne
   1a056:	2200      	movne	r2, #0
   1a058:	2201      	moveq	r2, #1
   1a05a:	2108      	movs	r1, #8
   1a05c:	4638      	mov	r0, r7
   1a05e:	f00f fea8 	bl	29db2 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1a062:	f1bb 0f02 	cmp.w	fp, #2
   1a066:	bf14      	ite	ne
   1a068:	2200      	movne	r2, #0
   1a06a:	2201      	moveq	r2, #1
   1a06c:	2109      	movs	r1, #9
   1a06e:	4638      	mov	r0, r7
   1a070:	f00f fe9f 	bl	29db2 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   1a074:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1a076:	f002 0201 	and.w	r2, r2, #1
   1a07a:	210a      	movs	r1, #10
   1a07c:	4638      	mov	r0, r7
   1a07e:	f00f fe98 	bl	29db2 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1a082:	4652      	mov	r2, sl
   1a084:	210b      	movs	r1, #11
   1a086:	4638      	mov	r0, r7
   1a088:	f00f fe93 	bl	29db2 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   1a08c:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1a08e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1a092:	210d      	movs	r1, #13
   1a094:	4638      	mov	r0, r7
   1a096:	f00f fe8c 	bl	29db2 <atomic_set_bit_to>

	return 0;
}
   1a09a:	4648      	mov	r0, r9
   1a09c:	b013      	add	sp, #76	; 0x4c
   1a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Failed to start advertiser");
   1a0a2:	4b27      	ldr	r3, [pc, #156]	; (1a140 <bt_le_adv_start_legacy+0x2e0>)
   1a0a4:	9311      	str	r3, [sp, #68]	; 0x44
   1a0a6:	2302      	movs	r3, #2
   1a0a8:	f88d 3018 	strb.w	r3, [sp, #24]
   1a0ac:	2300      	movs	r3, #0
   1a0ae:	f88d 3019 	strb.w	r3, [sp, #25]
   1a0b2:	f88d 301a 	strb.w	r3, [sp, #26]
   1a0b6:	f88d 301b 	strb.w	r3, [sp, #27]
   1a0ba:	9a06      	ldr	r2, [sp, #24]
   1a0bc:	9210      	str	r2, [sp, #64]	; 0x40
   1a0be:	4619      	mov	r1, r3
   1a0c0:	f363 0100 	bfi	r1, r3, #0, #1
   1a0c4:	f363 0141 	bfi	r1, r3, #1, #1
   1a0c8:	f363 0182 	bfi	r1, r3, #2, #1
   1a0cc:	f363 01c5 	bfi	r1, r3, #3, #3
   1a0d0:	2201      	movs	r2, #1
   1a0d2:	f362 1188 	bfi	r1, r2, #6, #3
   1a0d6:	2208      	movs	r2, #8
   1a0d8:	f362 2152 	bfi	r1, r2, #9, #10
   1a0dc:	f363 41de 	bfi	r1, r3, #19, #12
   1a0e0:	f363 71df 	bfi	r1, r3, #31, #1
   1a0e4:	aa10      	add	r2, sp, #64	; 0x40
   1a0e6:	4817      	ldr	r0, [pc, #92]	; (1a144 <bt_le_adv_start_legacy+0x2e4>)
   1a0e8:	f00e fe6b 	bl	28dc2 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1a0ec:	9807      	ldr	r0, [sp, #28]
   1a0ee:	b128      	cbz	r0, 1a0fc <bt_le_adv_start_legacy+0x29c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a0f0:	2100      	movs	r1, #0
   1a0f2:	f000 fcc3 	bl	1aa7c <bt_conn_set_state>
			bt_conn_unref(conn);
   1a0f6:	9807      	ldr	r0, [sp, #28]
   1a0f8:	f010 f898 	bl	2a22c <bt_conn_unref>
		return err;
   1a0fc:	46a9      	mov	r9, r5
   1a0fe:	e7cc      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   1a100:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1a102:	f013 0f02 	tst.w	r3, #2
   1a106:	d001      	beq.n	1a10c <bt_le_adv_start_legacy+0x2ac>
   1a108:	464a      	mov	r2, r9
   1a10a:	e79b      	b.n	1a044 <bt_le_adv_start_legacy+0x1e4>
   1a10c:	2201      	movs	r2, #1
   1a10e:	e799      	b.n	1a044 <bt_le_adv_start_legacy+0x1e4>
		return -EAGAIN;
   1a110:	f06f 090a 	mvn.w	r9, #10
   1a114:	e7c1      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
		return -EINVAL;
   1a116:	f06f 0915 	mvn.w	r9, #21
   1a11a:	e7be      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
		return -EINVAL;
   1a11c:	f06f 0915 	mvn.w	r9, #21
   1a120:	e7bb      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
		return -EALREADY;
   1a122:	f06f 0977 	mvn.w	r9, #119	; 0x77
   1a126:	e7b8      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
		return -ENOBUFS;
   1a128:	f06f 0968 	mvn.w	r9, #104	; 0x68
   1a12c:	e7b5      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
			return err;
   1a12e:	4681      	mov	r9, r0
   1a130:	e7b3      	b.n	1a09a <bt_le_adv_start_legacy+0x23a>
   1a132:	bf00      	nop
   1a134:	20000454 	.word	0x20000454
   1a138:	20000388 	.word	0x20000388
   1a13c:	0002fe9c 	.word	0x0002fe9c
   1a140:	000306bc 	.word	0x000306bc
   1a144:	0002ee78 	.word	0x0002ee78

0001a148 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a14c:	b082      	sub	sp, #8
   1a14e:	4606      	mov	r6, r0
   1a150:	460c      	mov	r4, r1
   1a152:	4615      	mov	r5, r2
   1a154:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_get_legacy();
   1a156:	f7ff fd55 	bl	19c04 <adv_get_legacy>
	int err;

	if (!adv) {
   1a15a:	b1f8      	cbz	r0, 1a19c <bt_le_adv_start+0x54>
   1a15c:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1a15e:	9b08      	ldr	r3, [sp, #32]
   1a160:	9301      	str	r3, [sp, #4]
   1a162:	9700      	str	r7, [sp, #0]
   1a164:	462b      	mov	r3, r5
   1a166:	4622      	mov	r2, r4
   1a168:	4631      	mov	r1, r6
   1a16a:	f7ff fe79 	bl	19e60 <bt_le_adv_start_legacy>
   1a16e:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   1a170:	4629      	mov	r1, r5
   1a172:	4620      	mov	r0, r4
   1a174:	f00f fd00 	bl	29b78 <ad_is_limited>
   1a178:	b918      	cbnz	r0, 1a182 <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1a17a:	4630      	mov	r0, r6
   1a17c:	b002      	add	sp, #8
   1a17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1a182:	f108 0818 	add.w	r8, r8, #24
   1a186:	4907      	ldr	r1, [pc, #28]	; (1a1a4 <bt_le_adv_start+0x5c>)
   1a188:	4640      	mov	r0, r8
   1a18a:	f013 fbd5 	bl	2d938 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1a18e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a192:	2300      	movs	r3, #0
   1a194:	4640      	mov	r0, r8
   1a196:	f008 fa09 	bl	225ac <k_work_reschedule>
   1a19a:	e7ee      	b.n	1a17a <bt_le_adv_start+0x32>
		return -ENOMEM;
   1a19c:	f06f 060b 	mvn.w	r6, #11
   1a1a0:	e7eb      	b.n	1a17a <bt_le_adv_start+0x32>
   1a1a2:	bf00      	nop
   1a1a4:	0001a25d 	.word	0x0001a25d

0001a1a8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1a1a8:	b530      	push	{r4, r5, lr}
   1a1aa:	b089      	sub	sp, #36	; 0x24
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1a1ac:	f7ff fe54 	bl	19e58 <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   1a1b0:	b1c0      	cbz	r0, 1a1e4 <bt_le_adv_stop+0x3c>
   1a1b2:	4605      	mov	r5, r0
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1a1b4:	f00f fe7e 	bl	29eb4 <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   1a1b8:	f105 0410 	add.w	r4, r5, #16
   1a1bc:	f3bf 8f5b 	dmb	ish
   1a1c0:	e854 3f00 	ldrex	r3, [r4]
   1a1c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   1a1c8:	e844 3200 	strex	r2, r3, [r4]
   1a1cc:	2a00      	cmp	r2, #0
   1a1ce:	d1f7      	bne.n	1a1c0 <bt_le_adv_stop+0x18>
   1a1d0:	f3bf 8f5b 	dmb	ish

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1a1d4:	2107      	movs	r1, #7
   1a1d6:	4620      	mov	r0, r4
   1a1d8:	f00f fd01 	bl	29bde <atomic_test_bit>
   1a1dc:	bb50      	cbnz	r0, 1a234 <bt_le_adv_stop+0x8c>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   1a1de:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1a1e0:	b009      	add	sp, #36	; 0x24
   1a1e2:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No valid legacy adv");
   1a1e4:	4b1b      	ldr	r3, [pc, #108]	; (1a254 <bt_le_adv_stop+0xac>)
   1a1e6:	9307      	str	r3, [sp, #28]
   1a1e8:	2302      	movs	r3, #2
   1a1ea:	f88d 3004 	strb.w	r3, [sp, #4]
   1a1ee:	2400      	movs	r4, #0
   1a1f0:	f88d 4005 	strb.w	r4, [sp, #5]
   1a1f4:	f88d 4006 	strb.w	r4, [sp, #6]
   1a1f8:	f88d 4007 	strb.w	r4, [sp, #7]
   1a1fc:	9b01      	ldr	r3, [sp, #4]
   1a1fe:	9306      	str	r3, [sp, #24]
   1a200:	4621      	mov	r1, r4
   1a202:	f364 0100 	bfi	r1, r4, #0, #1
   1a206:	f364 0141 	bfi	r1, r4, #1, #1
   1a20a:	f364 0182 	bfi	r1, r4, #2, #1
   1a20e:	f364 01c5 	bfi	r1, r4, #3, #3
   1a212:	2301      	movs	r3, #1
   1a214:	f363 1188 	bfi	r1, r3, #6, #3
   1a218:	2308      	movs	r3, #8
   1a21a:	f363 2152 	bfi	r1, r3, #9, #10
   1a21e:	f364 41de 	bfi	r1, r4, #19, #12
   1a222:	f364 71df 	bfi	r1, r4, #31, #1
   1a226:	4623      	mov	r3, r4
   1a228:	aa06      	add	r2, sp, #24
   1a22a:	480b      	ldr	r0, [pc, #44]	; (1a258 <bt_le_adv_stop+0xb0>)
   1a22c:	f00e fdc9 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return 0;
   1a230:	4620      	mov	r0, r4
   1a232:	e7d5      	b.n	1a1e0 <bt_le_adv_stop+0x38>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1a234:	210a      	movs	r1, #10
   1a236:	4620      	mov	r0, r4
   1a238:	f00f fcd1 	bl	29bde <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a23c:	b920      	cbnz	r0, 1a248 <bt_le_adv_stop+0xa0>
		err = bt_le_adv_set_enable_legacy(adv, false);
   1a23e:	2100      	movs	r1, #0
   1a240:	4628      	mov	r0, r5
   1a242:	f00f fe0b 	bl	29e5c <bt_le_adv_set_enable_legacy>
		if (err) {
   1a246:	e7cb      	b.n	1a1e0 <bt_le_adv_stop+0x38>
		le_adv_stop_free_conn(adv, 0);
   1a248:	2100      	movs	r1, #0
   1a24a:	4628      	mov	r0, r5
   1a24c:	f7ff fdde 	bl	19e0c <le_adv_stop_free_conn>
   1a250:	e7f5      	b.n	1a23e <bt_le_adv_stop+0x96>
   1a252:	bf00      	nop
   1a254:	000306d8 	.word	0x000306d8
   1a258:	0002ee78 	.word	0x0002ee78

0001a25c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1a25c:	b590      	push	{r4, r7, lr}
   1a25e:	b083      	sub	sp, #12
   1a260:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1a262:	f7ff ffa1 	bl	1a1a8 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   1a266:	b088      	sub	sp, #32
   1a268:	466b      	mov	r3, sp
   1a26a:	f113 0210 	adds.w	r2, r3, #16
   1a26e:	d032      	beq.n	1a2d6 <adv_timeout+0x7a>
   1a270:	210c      	movs	r1, #12
   1a272:	b142      	cbz	r2, 1a286 <adv_timeout+0x2a>
   1a274:	468c      	mov	ip, r1
   1a276:	2904      	cmp	r1, #4
   1a278:	dd01      	ble.n	1a27e <adv_timeout+0x22>
   1a27a:	4c1a      	ldr	r4, [pc, #104]	; (1a2e4 <adv_timeout+0x88>)
   1a27c:	615c      	str	r4, [r3, #20]
   1a27e:	f1bc 0f08 	cmp.w	ip, #8
   1a282:	dd00      	ble.n	1a286 <adv_timeout+0x2a>
   1a284:	6198      	str	r0, [r3, #24]
   1a286:	290b      	cmp	r1, #11
   1a288:	dd28      	ble.n	1a2dc <adv_timeout+0x80>
   1a28a:	f04f 0c0c 	mov.w	ip, #12
   1a28e:	b13a      	cbz	r2, 1a2a0 <adv_timeout+0x44>
   1a290:	2103      	movs	r1, #3
   1a292:	7139      	strb	r1, [r7, #4]
   1a294:	2100      	movs	r1, #0
   1a296:	7179      	strb	r1, [r7, #5]
   1a298:	71b9      	strb	r1, [r7, #6]
   1a29a:	71f9      	strb	r1, [r7, #7]
   1a29c:	6878      	ldr	r0, [r7, #4]
   1a29e:	6118      	str	r0, [r3, #16]
   1a2a0:	2100      	movs	r1, #0
   1a2a2:	f36f 0100 	bfc	r1, #0, #1
   1a2a6:	f36f 0141 	bfc	r1, #1, #1
   1a2aa:	f36f 0182 	bfc	r1, #2, #1
   1a2ae:	f36f 01c5 	bfc	r1, #3, #3
   1a2b2:	2302      	movs	r3, #2
   1a2b4:	f363 1188 	bfi	r1, r3, #6, #3
   1a2b8:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1a2bc:	f36c 2152 	bfi	r1, ip, #9, #10
   1a2c0:	f36f 41de 	bfc	r1, #19, #12
   1a2c4:	f36f 71df 	bfc	r1, #31, #1
   1a2c8:	2300      	movs	r3, #0
   1a2ca:	4807      	ldr	r0, [pc, #28]	; (1a2e8 <adv_timeout+0x8c>)
   1a2cc:	f00e fd79 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   1a2d0:	370c      	adds	r7, #12
   1a2d2:	46bd      	mov	sp, r7
   1a2d4:	bd90      	pop	{r4, r7, pc}
	LOG_WRN("Failed to stop advertising: %d", err);
   1a2d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a2da:	e7ca      	b.n	1a272 <adv_timeout+0x16>
   1a2dc:	f06f 0c1b 	mvn.w	ip, #27
   1a2e0:	e7d5      	b.n	1a28e <adv_timeout+0x32>
   1a2e2:	bf00      	nop
   1a2e4:	000306ec 	.word	0x000306ec
   1a2e8:	0002ee78 	.word	0x0002ee78

0001a2ec <state2str>:
#endif /* CONFIG_BT_CONN */
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   1a2ec:	2808      	cmp	r0, #8
   1a2ee:	d816      	bhi.n	1a31e <state2str+0x32>
   1a2f0:	e8df f000 	tbb	[pc, r0]
   1a2f4:	0d071705 	.word	0x0d071705
   1a2f8:	110f090b 	.word	0x110f090b
   1a2fc:	13          	.byte	0x13
   1a2fd:	00          	.byte	0x00
   1a2fe:	480a      	ldr	r0, [pc, #40]	; (1a328 <state2str+0x3c>)
   1a300:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   1a302:	480a      	ldr	r0, [pc, #40]	; (1a32c <state2str+0x40>)
   1a304:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   1a306:	480a      	ldr	r0, [pc, #40]	; (1a330 <state2str+0x44>)
   1a308:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   1a30a:	480a      	ldr	r0, [pc, #40]	; (1a334 <state2str+0x48>)
   1a30c:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   1a30e:	480a      	ldr	r0, [pc, #40]	; (1a338 <state2str+0x4c>)
   1a310:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   1a312:	480a      	ldr	r0, [pc, #40]	; (1a33c <state2str+0x50>)
   1a314:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   1a316:	480a      	ldr	r0, [pc, #40]	; (1a340 <state2str+0x54>)
   1a318:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   1a31a:	480a      	ldr	r0, [pc, #40]	; (1a344 <state2str+0x58>)
   1a31c:	4770      	bx	lr
	default:
		return "(unknown)";
   1a31e:	480a      	ldr	r0, [pc, #40]	; (1a348 <state2str+0x5c>)
   1a320:	4770      	bx	lr
		return "disconnect-complete";
   1a322:	480a      	ldr	r0, [pc, #40]	; (1a34c <state2str+0x60>)
	}
}
   1a324:	4770      	bx	lr
   1a326:	bf00      	nop
   1a328:	00030714 	.word	0x00030714
   1a32c:	00030738 	.word	0x00030738
   1a330:	00030748 	.word	0x00030748
   1a334:	0003075c 	.word	0x0003075c
   1a338:	0003076c 	.word	0x0003076c
   1a33c:	0003077c 	.word	0x0003077c
   1a340:	00030b88 	.word	0x00030b88
   1a344:	00030788 	.word	0x00030788
   1a348:	00030798 	.word	0x00030798
   1a34c:	00030724 	.word	0x00030724

0001a350 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1a350:	b538      	push	{r3, r4, r5, lr}
   1a352:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1a354:	4b0c      	ldr	r3, [pc, #48]	; (1a388 <notify_connected+0x38>)
   1a356:	681c      	ldr	r4, [r3, #0]
   1a358:	e003      	b.n	1a362 <notify_connected+0x12>
		if (cb->connected) {
			cb->connected(conn, conn->err);
   1a35a:	7a69      	ldrb	r1, [r5, #9]
   1a35c:	4628      	mov	r0, r5
   1a35e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a360:	6924      	ldr	r4, [r4, #16]
   1a362:	b11c      	cbz	r4, 1a36c <notify_connected+0x1c>
		if (cb->connected) {
   1a364:	6823      	ldr	r3, [r4, #0]
   1a366:	2b00      	cmp	r3, #0
   1a368:	d1f7      	bne.n	1a35a <notify_connected+0xa>
   1a36a:	e7f9      	b.n	1a360 <notify_connected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a36c:	4c07      	ldr	r4, [pc, #28]	; (1a38c <notify_connected+0x3c>)
   1a36e:	e000      	b.n	1a372 <notify_connected+0x22>
   1a370:	3414      	adds	r4, #20
   1a372:	4b07      	ldr	r3, [pc, #28]	; (1a390 <notify_connected+0x40>)
   1a374:	429c      	cmp	r4, r3
   1a376:	d206      	bcs.n	1a386 <notify_connected+0x36>
		if (cb->connected) {
   1a378:	6823      	ldr	r3, [r4, #0]
   1a37a:	2b00      	cmp	r3, #0
   1a37c:	d0f8      	beq.n	1a370 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1a37e:	7a69      	ldrb	r1, [r5, #9]
   1a380:	4628      	mov	r0, r5
   1a382:	4798      	blx	r3
   1a384:	e7f4      	b.n	1a370 <notify_connected+0x20>
		}
	}
}
   1a386:	bd38      	pop	{r3, r4, r5, pc}
   1a388:	20003794 	.word	0x20003794
   1a38c:	0002ee48 	.word	0x0002ee48
   1a390:	0002ee48 	.word	0x0002ee48

0001a394 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
   1a394:	b538      	push	{r3, r4, r5, lr}
   1a396:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1a398:	4b0c      	ldr	r3, [pc, #48]	; (1a3cc <notify_disconnected+0x38>)
   1a39a:	681c      	ldr	r4, [r3, #0]
   1a39c:	e003      	b.n	1a3a6 <notify_disconnected+0x12>
		if (cb->disconnected) {
			cb->disconnected(conn, conn->err);
   1a39e:	7a69      	ldrb	r1, [r5, #9]
   1a3a0:	4628      	mov	r0, r5
   1a3a2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a3a4:	6924      	ldr	r4, [r4, #16]
   1a3a6:	b11c      	cbz	r4, 1a3b0 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1a3a8:	6863      	ldr	r3, [r4, #4]
   1a3aa:	2b00      	cmp	r3, #0
   1a3ac:	d1f7      	bne.n	1a39e <notify_disconnected+0xa>
   1a3ae:	e7f9      	b.n	1a3a4 <notify_disconnected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a3b0:	4c07      	ldr	r4, [pc, #28]	; (1a3d0 <notify_disconnected+0x3c>)
   1a3b2:	e000      	b.n	1a3b6 <notify_disconnected+0x22>
   1a3b4:	3414      	adds	r4, #20
   1a3b6:	4b07      	ldr	r3, [pc, #28]	; (1a3d4 <notify_disconnected+0x40>)
   1a3b8:	429c      	cmp	r4, r3
   1a3ba:	d206      	bcs.n	1a3ca <notify_disconnected+0x36>
		if (cb->disconnected) {
   1a3bc:	6863      	ldr	r3, [r4, #4]
   1a3be:	2b00      	cmp	r3, #0
   1a3c0:	d0f8      	beq.n	1a3b4 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1a3c2:	7a69      	ldrb	r1, [r5, #9]
   1a3c4:	4628      	mov	r0, r5
   1a3c6:	4798      	blx	r3
   1a3c8:	e7f4      	b.n	1a3b4 <notify_disconnected+0x20>
		}
	}
}
   1a3ca:	bd38      	pop	{r3, r4, r5, pc}
   1a3cc:	20003794 	.word	0x20003794
   1a3d0:	0002ee48 	.word	0x0002ee48
   1a3d4:	0002ee48 	.word	0x0002ee48

0001a3d8 <tx_free>:
{
   1a3d8:	b508      	push	{r3, lr}
   1a3da:	4601      	mov	r1, r0
	tx->cb = NULL;
   1a3dc:	2300      	movs	r3, #0
   1a3de:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1a3e0:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1a3e2:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1a3e4:	4801      	ldr	r0, [pc, #4]	; (1a3ec <tx_free+0x14>)
   1a3e6:	f013 f97b 	bl	2d6e0 <k_queue_append>
}
   1a3ea:	bd08      	pop	{r3, pc}
   1a3ec:	20000c4c 	.word	0x20000c4c

0001a3f0 <conn_tx_alloc>:
{
   1a3f0:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1a3f2:	f008 fc91 	bl	22d18 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a3f6:	4b08      	ldr	r3, [pc, #32]	; (1a418 <conn_tx_alloc+0x28>)
   1a3f8:	4283      	cmp	r3, r0
   1a3fa:	d007      	beq.n	1a40c <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   1a3fc:	f04f 32ff 	mov.w	r2, #4294967295
   1a400:	f04f 33ff 	mov.w	r3, #4294967295
   1a404:	4805      	ldr	r0, [pc, #20]	; (1a41c <conn_tx_alloc+0x2c>)
   1a406:	f007 ff01 	bl	2220c <z_impl_k_queue_get>
}
   1a40a:	bd08      	pop	{r3, pc}
   1a40c:	2200      	movs	r2, #0
   1a40e:	2300      	movs	r3, #0
   1a410:	4802      	ldr	r0, [pc, #8]	; (1a41c <conn_tx_alloc+0x2c>)
   1a412:	f007 fefb 	bl	2220c <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1a416:	e7f8      	b.n	1a40a <conn_tx_alloc+0x1a>
   1a418:	20002fa0 	.word	0x20002fa0
   1a41c:	20000c4c 	.word	0x20000c4c

0001a420 <bt_conn_get_pkts>:
}
   1a420:	4800      	ldr	r0, [pc, #0]	; (1a424 <bt_conn_get_pkts+0x4>)
   1a422:	4770      	bx	lr
   1a424:	20000488 	.word	0x20000488

0001a428 <send_frag>:
{
   1a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a42c:	b083      	sub	sp, #12
   1a42e:	af00      	add	r7, sp, #0
   1a430:	4605      	mov	r5, r0
   1a432:	460e      	mov	r6, r1
   1a434:	4692      	mov	sl, r2
   1a436:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a438:	f8d1 8018 	ldr.w	r8, [r1, #24]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   1a43c:	f7ff fff0 	bl	1a420 <bt_conn_get_pkts>
   1a440:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
   1a442:	f04f 32ff 	mov.w	r2, #4294967295
   1a446:	f04f 33ff 	mov.w	r3, #4294967295
   1a44a:	f007 ff45 	bl	222d8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1a44e:	7aab      	ldrb	r3, [r5, #10]
   1a450:	2b07      	cmp	r3, #7
   1a452:	d17f      	bne.n	1a554 <send_frag+0x12c>
   1a454:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a458:	f3ef 8311 	mrs	r3, BASEPRI
   1a45c:	f382 8812 	msr	BASEPRI_MAX, r2
   1a460:	f3bf 8f6f 	isb	sy
	if (tx) {
   1a464:	f1b8 0f00 	cmp.w	r8, #0
   1a468:	d01a      	beq.n	1a4a0 <send_frag+0x78>
	parent->next = child;
   1a46a:	2200      	movs	r2, #0
   1a46c:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   1a470:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   1a472:	b182      	cbz	r2, 1a496 <send_frag+0x6e>
	parent->next = child;
   1a474:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1a478:	f8c5 8018 	str.w	r8, [r5, #24]
	__asm__ volatile(
   1a47c:	f383 8811 	msr	BASEPRI, r3
   1a480:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1a484:	4652      	mov	r2, sl
   1a486:	4631      	mov	r1, r6
   1a488:	4628      	mov	r0, r5
   1a48a:	f00f fddc 	bl	2a046 <send_acl>
	if (err) {
   1a48e:	4684      	mov	ip, r0
   1a490:	b998      	cbnz	r0, 1a4ba <send_frag+0x92>
	return true;
   1a492:	2001      	movs	r0, #1
   1a494:	e06c      	b.n	1a570 <send_frag+0x148>
   1a496:	f8c5 8018 	str.w	r8, [r5, #24]
	list->head = node;
   1a49a:	f8c5 8014 	str.w	r8, [r5, #20]
}
   1a49e:	e7ed      	b.n	1a47c <send_frag+0x54>
	return list->tail;
   1a4a0:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   1a4a2:	b13a      	cbz	r2, 1a4b4 <send_frag+0x8c>
			pending_no_cb = &tail_tx->pending_no_cb;
   1a4a4:	f102 0b0c 	add.w	fp, r2, #12
		(*pending_no_cb)++;
   1a4a8:	f8db 2000 	ldr.w	r2, [fp]
   1a4ac:	3201      	adds	r2, #1
   1a4ae:	f8cb 2000 	str.w	r2, [fp]
   1a4b2:	e7e3      	b.n	1a47c <send_frag+0x54>
			pending_no_cb = &conn->pending_no_cb;
   1a4b4:	f105 0b1c 	add.w	fp, r5, #28
   1a4b8:	e7f6      	b.n	1a4a8 <send_frag+0x80>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1a4ba:	46ea      	mov	sl, sp
   1a4bc:	b088      	sub	sp, #32
   1a4be:	466b      	mov	r3, sp
   1a4c0:	f113 0210 	adds.w	r2, r3, #16
   1a4c4:	d058      	beq.n	1a578 <send_frag+0x150>
   1a4c6:	210c      	movs	r1, #12
   1a4c8:	b152      	cbz	r2, 1a4e0 <send_frag+0xb8>
   1a4ca:	4608      	mov	r0, r1
   1a4cc:	2904      	cmp	r1, #4
   1a4ce:	dd03      	ble.n	1a4d8 <send_frag+0xb0>
   1a4d0:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 1a5a0 <send_frag+0x178>
   1a4d4:	f8c3 e014 	str.w	lr, [r3, #20]
   1a4d8:	2808      	cmp	r0, #8
   1a4da:	dd01      	ble.n	1a4e0 <send_frag+0xb8>
   1a4dc:	f8c3 c018 	str.w	ip, [r3, #24]
   1a4e0:	290b      	cmp	r1, #11
   1a4e2:	dd4c      	ble.n	1a57e <send_frag+0x156>
   1a4e4:	f04f 0c0c 	mov.w	ip, #12
   1a4e8:	b13a      	cbz	r2, 1a4fa <send_frag+0xd2>
   1a4ea:	2103      	movs	r1, #3
   1a4ec:	7139      	strb	r1, [r7, #4]
   1a4ee:	2100      	movs	r1, #0
   1a4f0:	7179      	strb	r1, [r7, #5]
   1a4f2:	71b9      	strb	r1, [r7, #6]
   1a4f4:	71f9      	strb	r1, [r7, #7]
   1a4f6:	6878      	ldr	r0, [r7, #4]
   1a4f8:	6118      	str	r0, [r3, #16]
   1a4fa:	2100      	movs	r1, #0
   1a4fc:	f36f 0100 	bfc	r1, #0, #1
   1a500:	f36f 0141 	bfc	r1, #1, #1
   1a504:	f36f 0182 	bfc	r1, #2, #1
   1a508:	f36f 01c5 	bfc	r1, #3, #3
   1a50c:	2301      	movs	r3, #1
   1a50e:	f363 1188 	bfi	r1, r3, #6, #3
   1a512:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1a516:	f363 2152 	bfi	r1, r3, #9, #10
   1a51a:	f36f 41de 	bfc	r1, #19, #12
   1a51e:	f36f 71df 	bfc	r1, #31, #1
   1a522:	2300      	movs	r3, #0
   1a524:	481d      	ldr	r0, [pc, #116]	; (1a59c <send_frag+0x174>)
   1a526:	f00e fc4c 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1a52a:	46d5      	mov	sp, sl
	__asm__ volatile(
   1a52c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a530:	f3ef 8a11 	mrs	sl, BASEPRI
   1a534:	f383 8812 	msr	BASEPRI_MAX, r3
   1a538:	f3bf 8f6f 	isb	sy
		if (tx) {
   1a53c:	f1b8 0f00 	cmp.w	r8, #0
   1a540:	d020      	beq.n	1a584 <send_frag+0x15c>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1a542:	4641      	mov	r1, r8
   1a544:	f105 0014 	add.w	r0, r5, #20
   1a548:	f00f fd0f 	bl	29f6a <sys_slist_find_and_remove>
	__asm__ volatile(
   1a54c:	f38a 8811 	msr	BASEPRI, sl
   1a550:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1a554:	4648      	mov	r0, r9
   1a556:	f007 fe97 	bl	22288 <z_impl_k_sem_give>
	if (tx) {
   1a55a:	f1b8 0f00 	cmp.w	r8, #0
   1a55e:	d005      	beq.n	1a56c <send_frag+0x144>
		tx_data(buf)->tx = NULL;
   1a560:	2300      	movs	r3, #0
   1a562:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1a564:	4641      	mov	r1, r8
   1a566:	4628      	mov	r0, r5
   1a568:	f00f fd37 	bl	29fda <conn_tx_destroy>
	if (always_consume) {
   1a56c:	b984      	cbnz	r4, 1a590 <send_frag+0x168>
	return false;
   1a56e:	4620      	mov	r0, r4
}
   1a570:	370c      	adds	r7, #12
   1a572:	46bd      	mov	sp, r7
   1a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Unable to send to driver (err %d)", err);
   1a578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a57c:	e7a4      	b.n	1a4c8 <send_frag+0xa0>
   1a57e:	f06f 0c1b 	mvn.w	ip, #27
   1a582:	e7b1      	b.n	1a4e8 <send_frag+0xc0>
			(*pending_no_cb)--;
   1a584:	f8db 3000 	ldr.w	r3, [fp]
   1a588:	3b01      	subs	r3, #1
   1a58a:	f8cb 3000 	str.w	r3, [fp]
   1a58e:	e7dd      	b.n	1a54c <send_frag+0x124>
		net_buf_unref(buf);
   1a590:	4630      	mov	r0, r6
   1a592:	f011 fbbe 	bl	2bd12 <net_buf_unref>
	return false;
   1a596:	2000      	movs	r0, #0
   1a598:	e7ea      	b.n	1a570 <send_frag+0x148>
   1a59a:	bf00      	nop
   1a59c:	0002ee88 	.word	0x0002ee88
   1a5a0:	000303e0 	.word	0x000303e0

0001a5a4 <bt_conn_new>:
{
   1a5a4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1a5a6:	2300      	movs	r3, #0
   1a5a8:	428b      	cmp	r3, r1
   1a5aa:	d229      	bcs.n	1a600 <bt_conn_new+0x5c>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1a5ac:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1a5b0:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   1a5b4:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a5b8:	f04f 0c01 	mov.w	ip, #1
   1a5bc:	f3bf 8f5b 	dmb	ish
   1a5c0:	e852 ef00 	ldrex	lr, [r2]
   1a5c4:	f1be 0f00 	cmp.w	lr, #0
   1a5c8:	d103      	bne.n	1a5d2 <bt_conn_new+0x2e>
   1a5ca:	e842 c500 	strex	r5, ip, [r2]
   1a5ce:	2d00      	cmp	r5, #0
   1a5d0:	d1f6      	bne.n	1a5c0 <bt_conn_new+0x1c>
   1a5d2:	f3bf 8f5b 	dmb	ish
   1a5d6:	d111      	bne.n	1a5fc <bt_conn_new+0x58>
	if (!conn) {
   1a5d8:	b174      	cbz	r4, 1a5f8 <bt_conn_new+0x54>
__ssp_bos_icheck3(memset, void *, int)
   1a5da:	22bc      	movs	r2, #188	; 0xbc
   1a5dc:	2100      	movs	r1, #0
   1a5de:	4620      	mov	r0, r4
   1a5e0:	f013 fe81 	bl	2e2e6 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1a5e4:	4907      	ldr	r1, [pc, #28]	; (1a604 <bt_conn_new+0x60>)
   1a5e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a5ea:	f013 f9a5 	bl	2d938 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1a5ee:	4906      	ldr	r1, [pc, #24]	; (1a608 <bt_conn_new+0x64>)
   1a5f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a5f4:	f013 f973 	bl	2d8de <k_work_init>
}
   1a5f8:	4620      	mov	r0, r4
   1a5fa:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1a5fc:	4463      	add	r3, ip
   1a5fe:	e7d3      	b.n	1a5a8 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   1a600:	2400      	movs	r4, #0
   1a602:	e7e9      	b.n	1a5d8 <bt_conn_new+0x34>
   1a604:	0001b139 	.word	0x0001b139
   1a608:	00029fd1 	.word	0x00029fd1

0001a60c <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   1a60c:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1a60e:	2101      	movs	r1, #1
   1a610:	4801      	ldr	r0, [pc, #4]	; (1a618 <acl_conn_new+0xc>)
   1a612:	f7ff ffc7 	bl	1a5a4 <bt_conn_new>
}
   1a616:	bd08      	pop	{r3, pc}
   1a618:	200021f0 	.word	0x200021f0

0001a61c <bt_acl_recv>:
{
   1a61c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a61e:	b095      	sub	sp, #84	; 0x54
   1a620:	af00      	add	r7, sp, #0
   1a622:	4604      	mov	r4, r0
   1a624:	460d      	mov	r5, r1
	switch (flags) {
   1a626:	2a01      	cmp	r2, #1
   1a628:	d05a      	beq.n	1a6e0 <bt_acl_recv+0xc4>
   1a62a:	4613      	mov	r3, r2
   1a62c:	2a02      	cmp	r2, #2
   1a62e:	f040 80c4 	bne.w	1a7ba <bt_acl_recv+0x19e>
		if (conn->rx) {
   1a632:	6903      	ldr	r3, [r0, #16]
   1a634:	b323      	cbz	r3, 1a680 <bt_acl_recv+0x64>
			LOG_ERR("Unexpected first L2CAP frame");
   1a636:	4ba0      	ldr	r3, [pc, #640]	; (1a8b8 <bt_acl_recv+0x29c>)
   1a638:	61fb      	str	r3, [r7, #28]
   1a63a:	2302      	movs	r3, #2
   1a63c:	713b      	strb	r3, [r7, #4]
   1a63e:	2300      	movs	r3, #0
   1a640:	717b      	strb	r3, [r7, #5]
   1a642:	71bb      	strb	r3, [r7, #6]
   1a644:	71fb      	strb	r3, [r7, #7]
   1a646:	687a      	ldr	r2, [r7, #4]
   1a648:	61ba      	str	r2, [r7, #24]
   1a64a:	4619      	mov	r1, r3
   1a64c:	f363 0100 	bfi	r1, r3, #0, #1
   1a650:	f363 0141 	bfi	r1, r3, #1, #1
   1a654:	f363 0182 	bfi	r1, r3, #2, #1
   1a658:	f363 01c5 	bfi	r1, r3, #3, #3
   1a65c:	2201      	movs	r2, #1
   1a65e:	f362 1188 	bfi	r1, r2, #6, #3
   1a662:	2208      	movs	r2, #8
   1a664:	f362 2152 	bfi	r1, r2, #9, #10
   1a668:	f363 41de 	bfi	r1, r3, #19, #12
   1a66c:	f363 71df 	bfi	r1, r3, #31, #1
   1a670:	f107 0218 	add.w	r2, r7, #24
   1a674:	4891      	ldr	r0, [pc, #580]	; (1a8bc <bt_acl_recv+0x2a0>)
   1a676:	f00e fba4 	bl	28dc2 <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1a67a:	4620      	mov	r0, r4
   1a67c:	f00f fd4d 	bl	2a11a <bt_conn_reset_rx_state>
		conn->rx = buf;
   1a680:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1a682:	6921      	ldr	r1, [r4, #16]
   1a684:	8a08      	ldrh	r0, [r1, #16]
   1a686:	2801      	cmp	r0, #1
   1a688:	f240 80db 	bls.w	1a842 <bt_acl_recv+0x226>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1a68c:	68cb      	ldr	r3, [r1, #12]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1a68e:	785a      	ldrb	r2, [r3, #1]
   1a690:	781b      	ldrb	r3, [r3, #0]
   1a692:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a696:	3304      	adds	r3, #4
   1a698:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1a69a:	4283      	cmp	r3, r0
   1a69c:	f200 80d1 	bhi.w	1a842 <bt_acl_recv+0x226>
	if (conn->rx->len > acl_total_len) {
   1a6a0:	f080 8103 	bcs.w	1a8aa <bt_acl_recv+0x28e>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1a6a4:	466d      	mov	r5, sp
   1a6a6:	b088      	sub	sp, #32
   1a6a8:	4669      	mov	r1, sp
   1a6aa:	f111 0210 	adds.w	r2, r1, #16
   1a6ae:	f000 80ce 	beq.w	1a84e <bt_acl_recv+0x232>
   1a6b2:	2610      	movs	r6, #16
   1a6b4:	b17a      	cbz	r2, 1a6d6 <bt_acl_recv+0xba>
   1a6b6:	46b4      	mov	ip, r6
   1a6b8:	2e04      	cmp	r6, #4
   1a6ba:	dd03      	ble.n	1a6c4 <bt_acl_recv+0xa8>
   1a6bc:	f8df e208 	ldr.w	lr, [pc, #520]	; 1a8c8 <bt_acl_recv+0x2ac>
   1a6c0:	f8c1 e014 	str.w	lr, [r1, #20]
   1a6c4:	f1bc 0f08 	cmp.w	ip, #8
   1a6c8:	dd00      	ble.n	1a6cc <bt_acl_recv+0xb0>
   1a6ca:	6188      	str	r0, [r1, #24]
   1a6cc:	f1bc 0f0c 	cmp.w	ip, #12
   1a6d0:	f340 80c0 	ble.w	1a854 <bt_acl_recv+0x238>
   1a6d4:	61cb      	str	r3, [r1, #28]
   1a6d6:	2e0f      	cmp	r6, #15
   1a6d8:	f340 80e4 	ble.w	1a8a4 <bt_acl_recv+0x288>
   1a6dc:	2310      	movs	r3, #16
   1a6de:	e0bb      	b.n	1a858 <bt_acl_recv+0x23c>
		if (!conn->rx) {
   1a6e0:	6900      	ldr	r0, [r0, #16]
   1a6e2:	b180      	cbz	r0, 1a706 <bt_acl_recv+0xea>
		if (!buf->len) {
   1a6e4:	8a0e      	ldrh	r6, [r1, #16]
   1a6e6:	b3be      	cbz	r6, 1a758 <bt_acl_recv+0x13c>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1a6e8:	300c      	adds	r0, #12
   1a6ea:	f011 fb95 	bl	2be18 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1a6ee:	42b0      	cmp	r0, r6
   1a6f0:	d336      	bcc.n	1a760 <bt_acl_recv+0x144>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1a6f2:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a6f4:	8a2a      	ldrh	r2, [r5, #16]
   1a6f6:	68e9      	ldr	r1, [r5, #12]
   1a6f8:	300c      	adds	r0, #12
   1a6fa:	f011 fb57 	bl	2bdac <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1a6fe:	4628      	mov	r0, r5
   1a700:	f011 fb07 	bl	2bd12 <net_buf_unref>
		break;
   1a704:	e7bd      	b.n	1a682 <bt_acl_recv+0x66>
			LOG_ERR("Unexpected L2CAP continuation");
   1a706:	4b6e      	ldr	r3, [pc, #440]	; (1a8c0 <bt_acl_recv+0x2a4>)
   1a708:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a70a:	2302      	movs	r3, #2
   1a70c:	713b      	strb	r3, [r7, #4]
   1a70e:	2300      	movs	r3, #0
   1a710:	717b      	strb	r3, [r7, #5]
   1a712:	71bb      	strb	r3, [r7, #6]
   1a714:	71fb      	strb	r3, [r7, #7]
   1a716:	687a      	ldr	r2, [r7, #4]
   1a718:	64ba      	str	r2, [r7, #72]	; 0x48
   1a71a:	4619      	mov	r1, r3
   1a71c:	f363 0100 	bfi	r1, r3, #0, #1
   1a720:	f363 0141 	bfi	r1, r3, #1, #1
   1a724:	f363 0182 	bfi	r1, r3, #2, #1
   1a728:	f363 01c5 	bfi	r1, r3, #3, #3
   1a72c:	2201      	movs	r2, #1
   1a72e:	f362 1188 	bfi	r1, r2, #6, #3
   1a732:	2208      	movs	r2, #8
   1a734:	f362 2152 	bfi	r1, r2, #9, #10
   1a738:	f363 41de 	bfi	r1, r3, #19, #12
   1a73c:	f363 71df 	bfi	r1, r3, #31, #1
   1a740:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1a744:	485d      	ldr	r0, [pc, #372]	; (1a8bc <bt_acl_recv+0x2a0>)
   1a746:	f00e fb3c 	bl	28dc2 <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1a74a:	4620      	mov	r0, r4
   1a74c:	f00f fce5 	bl	2a11a <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1a750:	4628      	mov	r0, r5
   1a752:	f011 fade 	bl	2bd12 <net_buf_unref>
			return;
   1a756:	e074      	b.n	1a842 <bt_acl_recv+0x226>
			net_buf_unref(buf);
   1a758:	4608      	mov	r0, r1
   1a75a:	f011 fada 	bl	2bd12 <net_buf_unref>
			return;
   1a75e:	e070      	b.n	1a842 <bt_acl_recv+0x226>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1a760:	4b58      	ldr	r3, [pc, #352]	; (1a8c4 <bt_acl_recv+0x2a8>)
   1a762:	637b      	str	r3, [r7, #52]	; 0x34
   1a764:	2302      	movs	r3, #2
   1a766:	713b      	strb	r3, [r7, #4]
   1a768:	2600      	movs	r6, #0
   1a76a:	717e      	strb	r6, [r7, #5]
   1a76c:	71be      	strb	r6, [r7, #6]
   1a76e:	71fe      	strb	r6, [r7, #7]
   1a770:	687b      	ldr	r3, [r7, #4]
   1a772:	633b      	str	r3, [r7, #48]	; 0x30
   1a774:	4631      	mov	r1, r6
   1a776:	f366 0100 	bfi	r1, r6, #0, #1
   1a77a:	f366 0141 	bfi	r1, r6, #1, #1
   1a77e:	f366 0182 	bfi	r1, r6, #2, #1
   1a782:	f366 01c5 	bfi	r1, r6, #3, #3
   1a786:	2301      	movs	r3, #1
   1a788:	f363 1188 	bfi	r1, r3, #6, #3
   1a78c:	2308      	movs	r3, #8
   1a78e:	f363 2152 	bfi	r1, r3, #9, #10
   1a792:	f366 41de 	bfi	r1, r6, #19, #12
   1a796:	f366 71df 	bfi	r1, r6, #31, #1
   1a79a:	4633      	mov	r3, r6
   1a79c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1a7a0:	4846      	ldr	r0, [pc, #280]	; (1a8bc <bt_acl_recv+0x2a0>)
   1a7a2:	f00e fb0e 	bl	28dc2 <z_impl_z_log_msg_static_create>
			bt_l2cap_recv(conn, conn->rx, false);
   1a7a6:	4632      	mov	r2, r6
   1a7a8:	6921      	ldr	r1, [r4, #16]
   1a7aa:	4620      	mov	r0, r4
   1a7ac:	f001 f8fe 	bl	1b9ac <bt_l2cap_recv>
			conn->rx = NULL;
   1a7b0:	6126      	str	r6, [r4, #16]
			net_buf_unref(buf);
   1a7b2:	4628      	mov	r0, r5
   1a7b4:	f011 faad 	bl	2bd12 <net_buf_unref>
			return;
   1a7b8:	e043      	b.n	1a842 <bt_acl_recv+0x226>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1a7ba:	466e      	mov	r6, sp
   1a7bc:	b088      	sub	sp, #32
   1a7be:	4669      	mov	r1, sp
   1a7c0:	f111 0210 	adds.w	r2, r1, #16
   1a7c4:	d010      	beq.n	1a7e8 <bt_acl_recv+0x1cc>
   1a7c6:	200c      	movs	r0, #12
   1a7c8:	b152      	cbz	r2, 1a7e0 <bt_acl_recv+0x1c4>
   1a7ca:	4684      	mov	ip, r0
   1a7cc:	2804      	cmp	r0, #4
   1a7ce:	dd03      	ble.n	1a7d8 <bt_acl_recv+0x1bc>
   1a7d0:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 1a8cc <bt_acl_recv+0x2b0>
   1a7d4:	f8c1 e014 	str.w	lr, [r1, #20]
   1a7d8:	f1bc 0f08 	cmp.w	ip, #8
   1a7dc:	dd07      	ble.n	1a7ee <bt_acl_recv+0x1d2>
   1a7de:	618b      	str	r3, [r1, #24]
   1a7e0:	280b      	cmp	r0, #11
   1a7e2:	dd31      	ble.n	1a848 <bt_acl_recv+0x22c>
   1a7e4:	230c      	movs	r3, #12
   1a7e6:	e004      	b.n	1a7f2 <bt_acl_recv+0x1d6>
   1a7e8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a7ec:	e7ec      	b.n	1a7c8 <bt_acl_recv+0x1ac>
   1a7ee:	f06f 031b 	mvn.w	r3, #27
   1a7f2:	b13a      	cbz	r2, 1a804 <bt_acl_recv+0x1e8>
   1a7f4:	2003      	movs	r0, #3
   1a7f6:	7138      	strb	r0, [r7, #4]
   1a7f8:	2000      	movs	r0, #0
   1a7fa:	7178      	strb	r0, [r7, #5]
   1a7fc:	71b8      	strb	r0, [r7, #6]
   1a7fe:	71f8      	strb	r0, [r7, #7]
   1a800:	6878      	ldr	r0, [r7, #4]
   1a802:	6108      	str	r0, [r1, #16]
   1a804:	2100      	movs	r1, #0
   1a806:	f36f 0100 	bfc	r1, #0, #1
   1a80a:	f36f 0141 	bfc	r1, #1, #1
   1a80e:	f36f 0182 	bfc	r1, #2, #1
   1a812:	f36f 01c5 	bfc	r1, #3, #3
   1a816:	2001      	movs	r0, #1
   1a818:	f360 1188 	bfi	r1, r0, #6, #3
   1a81c:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1a820:	f363 2152 	bfi	r1, r3, #9, #10
   1a824:	f36f 41de 	bfc	r1, #19, #12
   1a828:	f36f 71df 	bfc	r1, #31, #1
   1a82c:	2300      	movs	r3, #0
   1a82e:	4823      	ldr	r0, [pc, #140]	; (1a8bc <bt_acl_recv+0x2a0>)
   1a830:	f00e fac7 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1a834:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   1a836:	4620      	mov	r0, r4
   1a838:	f00f fc6f 	bl	2a11a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1a83c:	4628      	mov	r0, r5
   1a83e:	f011 fa68 	bl	2bd12 <net_buf_unref>
}
   1a842:	3754      	adds	r7, #84	; 0x54
   1a844:	46bd      	mov	sp, r7
   1a846:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1a848:	f06f 031b 	mvn.w	r3, #27
   1a84c:	e7d1      	b.n	1a7f2 <bt_acl_recv+0x1d6>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1a84e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1a852:	e72f      	b.n	1a6b4 <bt_acl_recv+0x98>
   1a854:	f06f 031b 	mvn.w	r3, #27
   1a858:	b13a      	cbz	r2, 1a86a <bt_acl_recv+0x24e>
   1a85a:	2004      	movs	r0, #4
   1a85c:	7138      	strb	r0, [r7, #4]
   1a85e:	2000      	movs	r0, #0
   1a860:	7178      	strb	r0, [r7, #5]
   1a862:	71b8      	strb	r0, [r7, #6]
   1a864:	71f8      	strb	r0, [r7, #7]
   1a866:	6878      	ldr	r0, [r7, #4]
   1a868:	6108      	str	r0, [r1, #16]
   1a86a:	2100      	movs	r1, #0
   1a86c:	f36f 0100 	bfc	r1, #0, #1
   1a870:	f36f 0141 	bfc	r1, #1, #1
   1a874:	f36f 0182 	bfc	r1, #2, #1
   1a878:	f36f 01c5 	bfc	r1, #3, #3
   1a87c:	2001      	movs	r0, #1
   1a87e:	f360 1188 	bfi	r1, r0, #6, #3
   1a882:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1a886:	f363 2152 	bfi	r1, r3, #9, #10
   1a88a:	f36f 41de 	bfc	r1, #19, #12
   1a88e:	f36f 71df 	bfc	r1, #31, #1
   1a892:	2300      	movs	r3, #0
   1a894:	4809      	ldr	r0, [pc, #36]	; (1a8bc <bt_acl_recv+0x2a0>)
   1a896:	f00e fa94 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1a89a:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
   1a89c:	4620      	mov	r0, r4
   1a89e:	f00f fc3c 	bl	2a11a <bt_conn_reset_rx_state>
		return;
   1a8a2:	e7ce      	b.n	1a842 <bt_acl_recv+0x226>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1a8a4:	f06f 031b 	mvn.w	r3, #27
   1a8a8:	e7d6      	b.n	1a858 <bt_acl_recv+0x23c>
	conn->rx = NULL;
   1a8aa:	2300      	movs	r3, #0
   1a8ac:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1a8ae:	2201      	movs	r2, #1
   1a8b0:	4620      	mov	r0, r4
   1a8b2:	f001 f87b 	bl	1b9ac <bt_l2cap_recv>
   1a8b6:	e7c4      	b.n	1a842 <bt_acl_recv+0x226>
   1a8b8:	000307a4 	.word	0x000307a4
   1a8bc:	0002ee88 	.word	0x0002ee88
   1a8c0:	000307c4 	.word	0x000307c4
   1a8c4:	000307e4 	.word	0x000307e4
   1a8c8:	0003082c 	.word	0x0003082c
   1a8cc:	0003080c 	.word	0x0003080c

0001a8d0 <bt_conn_send_cb>:
{
   1a8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8d4:	b094      	sub	sp, #80	; 0x50
   1a8d6:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1a8d8:	7a83      	ldrb	r3, [r0, #10]
   1a8da:	2b07      	cmp	r3, #7
   1a8dc:	d11b      	bne.n	1a916 <bt_conn_send_cb+0x46>
   1a8de:	4604      	mov	r4, r0
   1a8e0:	460d      	mov	r5, r1
   1a8e2:	4616      	mov	r6, r2
	if (cb) {
   1a8e4:	2a00      	cmp	r2, #0
   1a8e6:	f000 8090 	beq.w	1aa0a <bt_conn_send_cb+0x13a>
		tx = conn_tx_alloc();
   1a8ea:	f7ff fd81 	bl	1a3f0 <conn_tx_alloc>
		if (!tx) {
   1a8ee:	4680      	mov	r8, r0
   1a8f0:	2800      	cmp	r0, #0
   1a8f2:	d038      	beq.n	1a966 <bt_conn_send_cb+0x96>
		if (conn->state != BT_CONN_CONNECTED) {
   1a8f4:	7aa3      	ldrb	r3, [r4, #10]
   1a8f6:	2b07      	cmp	r3, #7
   1a8f8:	d15d      	bne.n	1a9b6 <bt_conn_send_cb+0xe6>
		tx->cb = cb;
   1a8fa:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   1a8fc:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   1a8fe:	2300      	movs	r3, #0
   1a900:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1a902:	61a8      	str	r0, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
   1a904:	4629      	mov	r1, r5
   1a906:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1a90a:	f011 f9fe 	bl	2bd0a <net_buf_put>
	return 0;
   1a90e:	2000      	movs	r0, #0
}
   1a910:	b014      	add	sp, #80	; 0x50
   1a912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("not connected!");
   1a916:	4b3e      	ldr	r3, [pc, #248]	; (1aa10 <bt_conn_send_cb+0x140>)
   1a918:	9313      	str	r3, [sp, #76]	; 0x4c
   1a91a:	2302      	movs	r3, #2
   1a91c:	f88d 3004 	strb.w	r3, [sp, #4]
   1a920:	2300      	movs	r3, #0
   1a922:	f88d 3005 	strb.w	r3, [sp, #5]
   1a926:	f88d 3006 	strb.w	r3, [sp, #6]
   1a92a:	f88d 3007 	strb.w	r3, [sp, #7]
   1a92e:	9a01      	ldr	r2, [sp, #4]
   1a930:	9212      	str	r2, [sp, #72]	; 0x48
   1a932:	4619      	mov	r1, r3
   1a934:	f363 0100 	bfi	r1, r3, #0, #1
   1a938:	f363 0141 	bfi	r1, r3, #1, #1
   1a93c:	f363 0182 	bfi	r1, r3, #2, #1
   1a940:	f363 01c5 	bfi	r1, r3, #3, #3
   1a944:	2201      	movs	r2, #1
   1a946:	f362 1188 	bfi	r1, r2, #6, #3
   1a94a:	2208      	movs	r2, #8
   1a94c:	f362 2152 	bfi	r1, r2, #9, #10
   1a950:	f363 41de 	bfi	r1, r3, #19, #12
   1a954:	f363 71df 	bfi	r1, r3, #31, #1
   1a958:	aa12      	add	r2, sp, #72	; 0x48
   1a95a:	482e      	ldr	r0, [pc, #184]	; (1aa14 <bt_conn_send_cb+0x144>)
   1a95c:	f00e fa31 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -ENOTCONN;
   1a960:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a964:	e7d4      	b.n	1a910 <bt_conn_send_cb+0x40>
			LOG_ERR("Unable to allocate TX context");
   1a966:	4b2c      	ldr	r3, [pc, #176]	; (1aa18 <bt_conn_send_cb+0x148>)
   1a968:	930d      	str	r3, [sp, #52]	; 0x34
   1a96a:	2302      	movs	r3, #2
   1a96c:	f88d 3004 	strb.w	r3, [sp, #4]
   1a970:	2300      	movs	r3, #0
   1a972:	f88d 3005 	strb.w	r3, [sp, #5]
   1a976:	f88d 3006 	strb.w	r3, [sp, #6]
   1a97a:	f88d 3007 	strb.w	r3, [sp, #7]
   1a97e:	9a01      	ldr	r2, [sp, #4]
   1a980:	920c      	str	r2, [sp, #48]	; 0x30
   1a982:	4619      	mov	r1, r3
   1a984:	f363 0100 	bfi	r1, r3, #0, #1
   1a988:	f363 0141 	bfi	r1, r3, #1, #1
   1a98c:	f363 0182 	bfi	r1, r3, #2, #1
   1a990:	f363 01c5 	bfi	r1, r3, #3, #3
   1a994:	2201      	movs	r2, #1
   1a996:	f362 1188 	bfi	r1, r2, #6, #3
   1a99a:	2208      	movs	r2, #8
   1a99c:	f362 2152 	bfi	r1, r2, #9, #10
   1a9a0:	f363 41de 	bfi	r1, r3, #19, #12
   1a9a4:	f363 71df 	bfi	r1, r3, #31, #1
   1a9a8:	aa0c      	add	r2, sp, #48	; 0x30
   1a9aa:	481a      	ldr	r0, [pc, #104]	; (1aa14 <bt_conn_send_cb+0x144>)
   1a9ac:	f00e fa09 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return -ENOBUFS;
   1a9b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a9b4:	e7ac      	b.n	1a910 <bt_conn_send_cb+0x40>
			LOG_WRN("Disconnected while allocating context");
   1a9b6:	4b19      	ldr	r3, [pc, #100]	; (1aa1c <bt_conn_send_cb+0x14c>)
   1a9b8:	9307      	str	r3, [sp, #28]
   1a9ba:	2202      	movs	r2, #2
   1a9bc:	f88d 2004 	strb.w	r2, [sp, #4]
   1a9c0:	2300      	movs	r3, #0
   1a9c2:	f88d 3005 	strb.w	r3, [sp, #5]
   1a9c6:	f88d 3006 	strb.w	r3, [sp, #6]
   1a9ca:	f88d 3007 	strb.w	r3, [sp, #7]
   1a9ce:	9901      	ldr	r1, [sp, #4]
   1a9d0:	9106      	str	r1, [sp, #24]
   1a9d2:	4619      	mov	r1, r3
   1a9d4:	f363 0100 	bfi	r1, r3, #0, #1
   1a9d8:	f363 0141 	bfi	r1, r3, #1, #1
   1a9dc:	f363 0182 	bfi	r1, r3, #2, #1
   1a9e0:	f363 01c5 	bfi	r1, r3, #3, #3
   1a9e4:	f362 1188 	bfi	r1, r2, #6, #3
   1a9e8:	2208      	movs	r2, #8
   1a9ea:	f362 2152 	bfi	r1, r2, #9, #10
   1a9ee:	f363 41de 	bfi	r1, r3, #19, #12
   1a9f2:	f363 71df 	bfi	r1, r3, #31, #1
   1a9f6:	aa06      	add	r2, sp, #24
   1a9f8:	4806      	ldr	r0, [pc, #24]	; (1aa14 <bt_conn_send_cb+0x144>)
   1a9fa:	f00e f9e2 	bl	28dc2 <z_impl_z_log_msg_static_create>
			tx_free(tx);
   1a9fe:	4640      	mov	r0, r8
   1aa00:	f7ff fcea 	bl	1a3d8 <tx_free>
			return -ENOTCONN;
   1aa04:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1aa08:	e782      	b.n	1a910 <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
   1aa0a:	2300      	movs	r3, #0
   1aa0c:	618b      	str	r3, [r1, #24]
   1aa0e:	e779      	b.n	1a904 <bt_conn_send_cb+0x34>
   1aa10:	00030848 	.word	0x00030848
   1aa14:	0002ee88 	.word	0x0002ee88
   1aa18:	00030858 	.word	0x00030858
   1aa1c:	00030878 	.word	0x00030878

0001aa20 <bt_conn_prepare_events>:
{
   1aa20:	b570      	push	{r4, r5, r6, lr}
   1aa22:	4606      	mov	r6, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   1aa24:	4c0e      	ldr	r4, [pc, #56]	; (1aa60 <bt_conn_prepare_events+0x40>)
   1aa26:	4620      	mov	r0, r4
   1aa28:	f013 fc2d 	bl	2e286 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1aa2c:	4623      	mov	r3, r4
   1aa2e:	2200      	movs	r2, #0
   1aa30:	2101      	movs	r1, #1
   1aa32:	4630      	mov	r0, r6
   1aa34:	f013 fbff 	bl	2e236 <k_poll_event_init>
   1aa38:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1aa3a:	2400      	movs	r4, #0
   1aa3c:	b10c      	cbz	r4, 1aa42 <bt_conn_prepare_events+0x22>
}
   1aa3e:	4628      	mov	r0, r5
   1aa40:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
   1aa42:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1aa46:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   1aa4a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   1aa4e:	4b05      	ldr	r3, [pc, #20]	; (1aa64 <bt_conn_prepare_events+0x44>)
   1aa50:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1aa54:	f00f fb8b 	bl	2a16e <conn_prepare_events>
   1aa58:	b900      	cbnz	r0, 1aa5c <bt_conn_prepare_events+0x3c>
			ev_count++;
   1aa5a:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1aa5c:	3401      	adds	r4, #1
   1aa5e:	e7ed      	b.n	1aa3c <bt_conn_prepare_events+0x1c>
   1aa60:	200006d4 	.word	0x200006d4
   1aa64:	200021f0 	.word	0x200021f0

0001aa68 <bt_conn_lookup_handle>:
{
   1aa68:	b508      	push	{r3, lr}
   1aa6a:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1aa6c:	2101      	movs	r1, #1
   1aa6e:	4802      	ldr	r0, [pc, #8]	; (1aa78 <bt_conn_lookup_handle+0x10>)
   1aa70:	f00f fbfb 	bl	2a26a <conn_lookup_handle>
}
   1aa74:	bd08      	pop	{r3, pc}
   1aa76:	bf00      	nop
   1aa78:	200021f0 	.word	0x200021f0

0001aa7c <bt_conn_set_state>:
{
   1aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa7e:	b083      	sub	sp, #12
   1aa80:	af00      	add	r7, sp, #0
   1aa82:	460d      	mov	r5, r1
	if (conn->state == state) {
   1aa84:	7a86      	ldrb	r6, [r0, #10]
   1aa86:	428e      	cmp	r6, r1
   1aa88:	d014      	beq.n	1aab4 <bt_conn_set_state+0x38>
   1aa8a:	4604      	mov	r4, r0
	conn->state = state;
   1aa8c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1aa8e:	b916      	cbnz	r6, 1aa96 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1aa90:	7883      	ldrb	r3, [r0, #2]
   1aa92:	2b08      	cmp	r3, #8
   1aa94:	d166      	bne.n	1ab64 <bt_conn_set_state+0xe8>
	switch (conn->state) {
   1aa96:	7aa3      	ldrb	r3, [r4, #10]
   1aa98:	2b08      	cmp	r3, #8
   1aa9a:	f200 812b 	bhi.w	1acf4 <bt_conn_set_state+0x278>
   1aa9e:	e8df f013 	tbh	[pc, r3, lsl #1]
   1aaa2:	0080      	.short	0x0080
   1aaa4:	005b0125 	.word	0x005b0125
   1aaa8:	005b005b 	.word	0x005b005b
   1aaac:	005b005b 	.word	0x005b005b
   1aab0:	005b0064 	.word	0x005b0064
		LOG_WRN("no transition %s", state2str(state));
   1aab4:	4608      	mov	r0, r1
   1aab6:	f7ff fc19 	bl	1a2ec <state2str>
   1aaba:	466d      	mov	r5, sp
   1aabc:	2300      	movs	r3, #0
   1aabe:	713b      	strb	r3, [r7, #4]
   1aac0:	2302      	movs	r3, #2
   1aac2:	717b      	strb	r3, [r7, #5]
   1aac4:	b088      	sub	sp, #32
   1aac6:	466c      	mov	r4, sp
   1aac8:	f114 0210 	adds.w	r2, r4, #16
   1aacc:	d011      	beq.n	1aaf2 <bt_conn_set_state+0x76>
   1aace:	260e      	movs	r6, #14
   1aad0:	b11a      	cbz	r2, 1aada <bt_conn_set_state+0x5e>
   1aad2:	2e04      	cmp	r6, #4
   1aad4:	dd01      	ble.n	1aada <bt_conn_set_state+0x5e>
   1aad6:	4ba5      	ldr	r3, [pc, #660]	; (1ad6c <bt_conn_set_state+0x2f0>)
   1aad8:	6163      	str	r3, [r4, #20]
   1aada:	2300      	movs	r3, #0
   1aadc:	703b      	strb	r3, [r7, #0]
   1aade:	2302      	movs	r3, #2
   1aae0:	707b      	strb	r3, [r7, #1]
   1aae2:	b19a      	cbz	r2, 1ab0c <bt_conn_set_state+0x90>
   1aae4:	2e08      	cmp	r6, #8
   1aae6:	dd00      	ble.n	1aaea <bt_conn_set_state+0x6e>
   1aae8:	61a0      	str	r0, [r4, #24]
   1aaea:	f104 031c 	add.w	r3, r4, #28
   1aaee:	2100      	movs	r1, #0
   1aaf0:	e00a      	b.n	1ab08 <bt_conn_set_state+0x8c>
   1aaf2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1aaf6:	e7eb      	b.n	1aad0 <bt_conn_set_state+0x54>
   1aaf8:	f101 0008 	add.w	r0, r1, #8
   1aafc:	4438      	add	r0, r7
   1aafe:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1ab02:	f803 0b01 	strb.w	r0, [r3], #1
   1ab06:	3101      	adds	r1, #1
   1ab08:	2901      	cmp	r1, #1
   1ab0a:	d9f5      	bls.n	1aaf8 <bt_conn_set_state+0x7c>
   1ab0c:	2e0d      	cmp	r6, #13
   1ab0e:	dd26      	ble.n	1ab5e <bt_conn_set_state+0xe2>
   1ab10:	230e      	movs	r3, #14
   1ab12:	b142      	cbz	r2, 1ab26 <bt_conn_set_state+0xaa>
   1ab14:	2103      	movs	r1, #3
   1ab16:	7139      	strb	r1, [r7, #4]
   1ab18:	2100      	movs	r1, #0
   1ab1a:	7179      	strb	r1, [r7, #5]
   1ab1c:	71b9      	strb	r1, [r7, #6]
   1ab1e:	2101      	movs	r1, #1
   1ab20:	71f9      	strb	r1, [r7, #7]
   1ab22:	6878      	ldr	r0, [r7, #4]
   1ab24:	6120      	str	r0, [r4, #16]
   1ab26:	2100      	movs	r1, #0
   1ab28:	f36f 0100 	bfc	r1, #0, #1
   1ab2c:	f36f 0141 	bfc	r1, #1, #1
   1ab30:	f36f 0182 	bfc	r1, #2, #1
   1ab34:	f36f 01c5 	bfc	r1, #3, #3
   1ab38:	2002      	movs	r0, #2
   1ab3a:	f360 1188 	bfi	r1, r0, #6, #3
   1ab3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1ab42:	f363 2152 	bfi	r1, r3, #9, #10
   1ab46:	f36f 41de 	bfc	r1, #19, #12
   1ab4a:	f36f 71df 	bfc	r1, #31, #1
   1ab4e:	2300      	movs	r3, #0
   1ab50:	4887      	ldr	r0, [pc, #540]	; (1ad70 <bt_conn_set_state+0x2f4>)
   1ab52:	f00e f936 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1ab56:	46ad      	mov	sp, r5
}
   1ab58:	370c      	adds	r7, #12
   1ab5a:	46bd      	mov	sp, r7
   1ab5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("no transition %s", state2str(state));
   1ab5e:	f06f 031b 	mvn.w	r3, #27
   1ab62:	e7d6      	b.n	1ab12 <bt_conn_set_state+0x96>
			bt_conn_ref(conn);
   1ab64:	f00f fb3b 	bl	2a1de <bt_conn_ref>
   1ab68:	e795      	b.n	1aa96 <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1ab6a:	78a3      	ldrb	r3, [r4, #2]
   1ab6c:	2b04      	cmp	r3, #4
   1ab6e:	d0f3      	beq.n	1ab58 <bt_conn_set_state+0xdc>
		k_fifo_init(&conn->tx_queue);
   1ab70:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1ab74:	f012 fda8 	bl	2d6c8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1ab78:	2100      	movs	r1, #0
   1ab7a:	487e      	ldr	r0, [pc, #504]	; (1ad74 <bt_conn_set_state+0x2f8>)
   1ab7c:	f008 fbae 	bl	232dc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1ab80:	2300      	movs	r3, #0
   1ab82:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1ab84:	6563      	str	r3, [r4, #84]	; 0x54
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   1ab86:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1ab88:	2b01      	cmp	r3, #1
   1ab8a:	d1e5      	bne.n	1ab58 <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   1ab8c:	2303      	movs	r3, #3
   1ab8e:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1ab92:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1ab96:	2300      	movs	r3, #0
   1ab98:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1ab9c:	f007 fcfe 	bl	2259c <k_work_schedule>
   1aba0:	e7da      	b.n	1ab58 <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1aba2:	78a3      	ldrb	r3, [r4, #2]
   1aba4:	2b04      	cmp	r3, #4
   1aba6:	d017      	beq.n	1abd8 <bt_conn_set_state+0x15c>
		switch (old_state) {
   1aba8:	2e08      	cmp	r6, #8
   1abaa:	d8d5      	bhi.n	1ab58 <bt_conn_set_state+0xdc>
   1abac:	a301      	add	r3, pc, #4	; (adr r3, 1abb4 <bt_conn_set_state+0x138>)
   1abae:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1abb2:	bf00      	nop
   1abb4:	0001ac75 	.word	0x0001ac75
   1abb8:	0001abe1 	.word	0x0001abe1
   1abbc:	0001ac3d 	.word	0x0001ac3d
   1abc0:	0001ac65 	.word	0x0001ac65
   1abc4:	0001ac6d 	.word	0x0001ac6d
   1abc8:	0001ac51 	.word	0x0001ac51
   1abcc:	0001ac29 	.word	0x0001ac29
   1abd0:	0001ab59 	.word	0x0001ab59
   1abd4:	0001ac75 	.word	0x0001ac75
			bt_conn_unref(conn);
   1abd8:	4620      	mov	r0, r4
   1abda:	f00f fb27 	bl	2a22c <bt_conn_unref>
			break;
   1abde:	e7bb      	b.n	1ab58 <bt_conn_set_state+0xdc>
			tx_notify(conn);
   1abe0:	4620      	mov	r0, r4
   1abe2:	f00f f9d2 	bl	29f8a <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1abe6:	78a3      	ldrb	r3, [r4, #2]
   1abe8:	2b01      	cmp	r3, #1
   1abea:	d011      	beq.n	1ac10 <bt_conn_set_state+0x194>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1abec:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1abee:	f3bf 8f5b 	dmb	ish
   1abf2:	e854 3f00 	ldrex	r3, [r4]
   1abf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1abfa:	e844 3200 	strex	r2, r3, [r4]
   1abfe:	2a00      	cmp	r2, #0
   1ac00:	d1f7      	bne.n	1abf2 <bt_conn_set_state+0x176>
   1ac02:	f3bf 8f5b 	dmb	ish
   1ac06:	2100      	movs	r1, #0
   1ac08:	485a      	ldr	r0, [pc, #360]	; (1ad74 <bt_conn_set_state+0x2f8>)
   1ac0a:	f008 fb67 	bl	232dc <z_impl_k_poll_signal_raise>
   1ac0e:	e7a3      	b.n	1ab58 <bt_conn_set_state+0xdc>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1ac10:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1ac14:	4628      	mov	r0, r5
   1ac16:	f012 fe9b 	bl	2d950 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1ac1a:	f010 0f0c 	tst.w	r0, #12
   1ac1e:	d0e5      	beq.n	1abec <bt_conn_set_state+0x170>
				k_work_cancel_delayable(&conn->deferred_work);
   1ac20:	4628      	mov	r0, r5
   1ac22:	f012 fedc 	bl	2d9de <k_work_cancel_delayable>
   1ac26:	e7e1      	b.n	1abec <bt_conn_set_state+0x170>
			if (conn->err) {
   1ac28:	7a63      	ldrb	r3, [r4, #9]
   1ac2a:	b91b      	cbnz	r3, 1ac34 <bt_conn_set_state+0x1b8>
			bt_conn_unref(conn);
   1ac2c:	4620      	mov	r0, r4
   1ac2e:	f00f fafd 	bl	2a22c <bt_conn_unref>
			break;
   1ac32:	e791      	b.n	1ab58 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1ac34:	4620      	mov	r0, r4
   1ac36:	f7ff fb8b 	bl	1a350 <notify_connected>
   1ac3a:	e7f7      	b.n	1ac2c <bt_conn_set_state+0x1b0>
			if (conn->err) {
   1ac3c:	7a63      	ldrb	r3, [r4, #9]
   1ac3e:	b91b      	cbnz	r3, 1ac48 <bt_conn_set_state+0x1cc>
			bt_conn_unref(conn);
   1ac40:	4620      	mov	r0, r4
   1ac42:	f00f faf3 	bl	2a22c <bt_conn_unref>
			break;
   1ac46:	e787      	b.n	1ab58 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1ac48:	4620      	mov	r0, r4
   1ac4a:	f7ff fb81 	bl	1a350 <notify_connected>
   1ac4e:	e7f7      	b.n	1ac40 <bt_conn_set_state+0x1c4>
			if (conn->err) {
   1ac50:	7a63      	ldrb	r3, [r4, #9]
   1ac52:	b91b      	cbnz	r3, 1ac5c <bt_conn_set_state+0x1e0>
			bt_conn_unref(conn);
   1ac54:	4620      	mov	r0, r4
   1ac56:	f00f fae9 	bl	2a22c <bt_conn_unref>
			break;
   1ac5a:	e77d      	b.n	1ab58 <bt_conn_set_state+0xdc>
				notify_connected(conn);
   1ac5c:	4620      	mov	r0, r4
   1ac5e:	f7ff fb77 	bl	1a350 <notify_connected>
   1ac62:	e7f7      	b.n	1ac54 <bt_conn_set_state+0x1d8>
			bt_conn_unref(conn);
   1ac64:	4620      	mov	r0, r4
   1ac66:	f00f fae1 	bl	2a22c <bt_conn_unref>
			break;
   1ac6a:	e775      	b.n	1ab58 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   1ac6c:	4620      	mov	r0, r4
   1ac6e:	f00f fadd 	bl	2a22c <bt_conn_unref>
			break;
   1ac72:	e771      	b.n	1ab58 <bt_conn_set_state+0xdc>
			LOG_WRN("Invalid (%u) old state", state);
   1ac74:	466e      	mov	r6, sp
   1ac76:	b088      	sub	sp, #32
   1ac78:	466b      	mov	r3, sp
   1ac7a:	f113 0210 	adds.w	r2, r3, #16
   1ac7e:	d02f      	beq.n	1ace0 <bt_conn_set_state+0x264>
   1ac80:	210c      	movs	r1, #12
   1ac82:	b13a      	cbz	r2, 1ac94 <bt_conn_set_state+0x218>
   1ac84:	4608      	mov	r0, r1
   1ac86:	2904      	cmp	r1, #4
   1ac88:	dd01      	ble.n	1ac8e <bt_conn_set_state+0x212>
   1ac8a:	4c3b      	ldr	r4, [pc, #236]	; (1ad78 <bt_conn_set_state+0x2fc>)
   1ac8c:	615c      	str	r4, [r3, #20]
   1ac8e:	2808      	cmp	r0, #8
   1ac90:	dd00      	ble.n	1ac94 <bt_conn_set_state+0x218>
   1ac92:	619d      	str	r5, [r3, #24]
   1ac94:	290b      	cmp	r1, #11
   1ac96:	dd26      	ble.n	1ace6 <bt_conn_set_state+0x26a>
   1ac98:	240c      	movs	r4, #12
   1ac9a:	b13a      	cbz	r2, 1acac <bt_conn_set_state+0x230>
   1ac9c:	2103      	movs	r1, #3
   1ac9e:	7139      	strb	r1, [r7, #4]
   1aca0:	2100      	movs	r1, #0
   1aca2:	7179      	strb	r1, [r7, #5]
   1aca4:	71b9      	strb	r1, [r7, #6]
   1aca6:	71f9      	strb	r1, [r7, #7]
   1aca8:	6878      	ldr	r0, [r7, #4]
   1acaa:	6118      	str	r0, [r3, #16]
   1acac:	2100      	movs	r1, #0
   1acae:	f36f 0100 	bfc	r1, #0, #1
   1acb2:	f36f 0141 	bfc	r1, #1, #1
   1acb6:	f36f 0182 	bfc	r1, #2, #1
   1acba:	f36f 01c5 	bfc	r1, #3, #3
   1acbe:	2302      	movs	r3, #2
   1acc0:	f363 1188 	bfi	r1, r3, #6, #3
   1acc4:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1acc8:	f363 2152 	bfi	r1, r3, #9, #10
   1accc:	f36f 41de 	bfc	r1, #19, #12
   1acd0:	f36f 71df 	bfc	r1, #31, #1
   1acd4:	2300      	movs	r3, #0
   1acd6:	4826      	ldr	r0, [pc, #152]	; (1ad70 <bt_conn_set_state+0x2f4>)
   1acd8:	f00e f873 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1acdc:	46b5      	mov	sp, r6
   1acde:	e73b      	b.n	1ab58 <bt_conn_set_state+0xdc>
   1ace0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ace4:	e7cd      	b.n	1ac82 <bt_conn_set_state+0x206>
   1ace6:	f06f 041b 	mvn.w	r4, #27
   1acea:	e7d6      	b.n	1ac9a <bt_conn_set_state+0x21e>
		process_unack_tx(conn);
   1acec:	4620      	mov	r0, r4
   1acee:	f00f f9d2 	bl	2a096 <process_unack_tx>
		break;
   1acf2:	e731      	b.n	1ab58 <bt_conn_set_state+0xdc>
		LOG_WRN("no valid (%u) state was set", state);
   1acf4:	466e      	mov	r6, sp
   1acf6:	b088      	sub	sp, #32
   1acf8:	466b      	mov	r3, sp
   1acfa:	f113 0210 	adds.w	r2, r3, #16
   1acfe:	d130      	bne.n	1ad62 <bt_conn_set_state+0x2e6>
   1ad00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ad04:	b13a      	cbz	r2, 1ad16 <bt_conn_set_state+0x29a>
   1ad06:	4608      	mov	r0, r1
   1ad08:	2904      	cmp	r1, #4
   1ad0a:	dd01      	ble.n	1ad10 <bt_conn_set_state+0x294>
   1ad0c:	4c1b      	ldr	r4, [pc, #108]	; (1ad7c <bt_conn_set_state+0x300>)
   1ad0e:	615c      	str	r4, [r3, #20]
   1ad10:	2808      	cmp	r0, #8
   1ad12:	dd00      	ble.n	1ad16 <bt_conn_set_state+0x29a>
   1ad14:	619d      	str	r5, [r3, #24]
   1ad16:	290b      	cmp	r1, #11
   1ad18:	dd25      	ble.n	1ad66 <bt_conn_set_state+0x2ea>
   1ad1a:	240c      	movs	r4, #12
   1ad1c:	b13a      	cbz	r2, 1ad2e <bt_conn_set_state+0x2b2>
   1ad1e:	2103      	movs	r1, #3
   1ad20:	7139      	strb	r1, [r7, #4]
   1ad22:	2100      	movs	r1, #0
   1ad24:	7179      	strb	r1, [r7, #5]
   1ad26:	71b9      	strb	r1, [r7, #6]
   1ad28:	71f9      	strb	r1, [r7, #7]
   1ad2a:	6878      	ldr	r0, [r7, #4]
   1ad2c:	6118      	str	r0, [r3, #16]
   1ad2e:	2100      	movs	r1, #0
   1ad30:	f36f 0100 	bfc	r1, #0, #1
   1ad34:	f36f 0141 	bfc	r1, #1, #1
   1ad38:	f36f 0182 	bfc	r1, #2, #1
   1ad3c:	f36f 01c5 	bfc	r1, #3, #3
   1ad40:	2302      	movs	r3, #2
   1ad42:	f363 1188 	bfi	r1, r3, #6, #3
   1ad46:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1ad4a:	f364 2152 	bfi	r1, r4, #9, #10
   1ad4e:	f36f 41de 	bfc	r1, #19, #12
   1ad52:	f36f 71df 	bfc	r1, #31, #1
   1ad56:	2300      	movs	r3, #0
   1ad58:	4805      	ldr	r0, [pc, #20]	; (1ad70 <bt_conn_set_state+0x2f4>)
   1ad5a:	f00e f832 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1ad5e:	46b5      	mov	sp, r6
   1ad60:	e6fa      	b.n	1ab58 <bt_conn_set_state+0xdc>
   1ad62:	210c      	movs	r1, #12
   1ad64:	e7ce      	b.n	1ad04 <bt_conn_set_state+0x288>
   1ad66:	f06f 041b 	mvn.w	r4, #27
   1ad6a:	e7d7      	b.n	1ad1c <bt_conn_set_state+0x2a0>
   1ad6c:	000308a0 	.word	0x000308a0
   1ad70:	0002ee88 	.word	0x0002ee88
   1ad74:	200006d4 	.word	0x200006d4
   1ad78:	000308b4 	.word	0x000308b4
   1ad7c:	000308cc 	.word	0x000308cc

0001ad80 <bt_conn_index>:
		index = conn - acl_conns;
   1ad80:	4b03      	ldr	r3, [pc, #12]	; (1ad90 <bt_conn_index+0x10>)
   1ad82:	1ac0      	subs	r0, r0, r3
   1ad84:	1180      	asrs	r0, r0, #6
   1ad86:	4b03      	ldr	r3, [pc, #12]	; (1ad94 <bt_conn_index+0x14>)
   1ad88:	fb03 f000 	mul.w	r0, r3, r0
}
   1ad8c:	b2c0      	uxtb	r0, r0
   1ad8e:	4770      	bx	lr
   1ad90:	200021f0 	.word	0x200021f0
   1ad94:	aaaaaaab 	.word	0xaaaaaaab

0001ad98 <bt_conn_create_pdu_timeout>:
{
   1ad98:	b530      	push	{r4, r5, lr}
   1ad9a:	b089      	sub	sp, #36	; 0x24
   1ad9c:	460c      	mov	r4, r1
	if (!pool) {
   1ad9e:	4601      	mov	r1, r0
   1ada0:	b158      	cbz	r0, 1adba <bt_conn_create_pdu_timeout+0x22>
	return net_buf_alloc_fixed(pool, timeout);
   1ada2:	4608      	mov	r0, r1
   1ada4:	f010 ff6d 	bl	2bc82 <net_buf_alloc_fixed>
	if (!buf) {
   1ada8:	4605      	mov	r5, r0
   1adaa:	b140      	cbz	r0, 1adbe <bt_conn_create_pdu_timeout+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   1adac:	1d21      	adds	r1, r4, #4
   1adae:	300c      	adds	r0, #12
   1adb0:	f010 ff72 	bl	2bc98 <net_buf_simple_reserve>
}
   1adb4:	4628      	mov	r0, r5
   1adb6:	b009      	add	sp, #36	; 0x24
   1adb8:	bd30      	pop	{r4, r5, pc}
		pool = &acl_tx_pool;
   1adba:	4913      	ldr	r1, [pc, #76]	; (1ae08 <bt_conn_create_pdu_timeout+0x70>)
   1adbc:	e7f1      	b.n	1ada2 <bt_conn_create_pdu_timeout+0xa>
		LOG_WRN("Unable to allocate buffer within timeout");
   1adbe:	4b13      	ldr	r3, [pc, #76]	; (1ae0c <bt_conn_create_pdu_timeout+0x74>)
   1adc0:	9307      	str	r3, [sp, #28]
   1adc2:	2202      	movs	r2, #2
   1adc4:	f88d 2004 	strb.w	r2, [sp, #4]
   1adc8:	2300      	movs	r3, #0
   1adca:	f88d 3005 	strb.w	r3, [sp, #5]
   1adce:	f88d 3006 	strb.w	r3, [sp, #6]
   1add2:	f88d 3007 	strb.w	r3, [sp, #7]
   1add6:	9901      	ldr	r1, [sp, #4]
   1add8:	9106      	str	r1, [sp, #24]
   1adda:	4619      	mov	r1, r3
   1addc:	f363 0100 	bfi	r1, r3, #0, #1
   1ade0:	f363 0141 	bfi	r1, r3, #1, #1
   1ade4:	f363 0182 	bfi	r1, r3, #2, #1
   1ade8:	f363 01c5 	bfi	r1, r3, #3, #3
   1adec:	f362 1188 	bfi	r1, r2, #6, #3
   1adf0:	2208      	movs	r2, #8
   1adf2:	f362 2152 	bfi	r1, r2, #9, #10
   1adf6:	f363 41de 	bfi	r1, r3, #19, #12
   1adfa:	f363 71df 	bfi	r1, r3, #31, #1
   1adfe:	aa06      	add	r2, sp, #24
   1ae00:	4803      	ldr	r0, [pc, #12]	; (1ae10 <bt_conn_create_pdu_timeout+0x78>)
   1ae02:	f00d ffde 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return NULL;
   1ae06:	e7d5      	b.n	1adb4 <bt_conn_create_pdu_timeout+0x1c>
   1ae08:	20000c64 	.word	0x20000c64
   1ae0c:	000308e8 	.word	0x000308e8
   1ae10:	0002ee88 	.word	0x0002ee88

0001ae14 <notify_le_param_updated>:
{
   1ae14:	b570      	push	{r4, r5, r6, lr}
   1ae16:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1ae18:	1d05      	adds	r5, r0, #4
   1ae1a:	2109      	movs	r1, #9
   1ae1c:	4628      	mov	r0, r5
   1ae1e:	f00f f905 	bl	2a02c <atomic_test_bit>
   1ae22:	b178      	cbz	r0, 1ae44 <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   1ae24:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
   1ae28:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1ae2c:	4293      	cmp	r3, r2
   1ae2e:	d309      	bcc.n	1ae44 <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   1ae30:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   1ae34:	4293      	cmp	r3, r2
   1ae36:	d805      	bhi.n	1ae44 <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   1ae38:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   1ae3c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1ae40:	429a      	cmp	r2, r3
   1ae42:	d002      	beq.n	1ae4a <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   1ae44:	4b18      	ldr	r3, [pc, #96]	; (1aea8 <notify_le_param_updated+0x94>)
   1ae46:	681d      	ldr	r5, [r3, #0]
   1ae48:	e015      	b.n	1ae76 <notify_le_param_updated+0x62>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ae4a:	f3bf 8f5b 	dmb	ish
   1ae4e:	e855 3f00 	ldrex	r3, [r5]
   1ae52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1ae56:	e845 3200 	strex	r2, r3, [r5]
   1ae5a:	2a00      	cmp	r2, #0
   1ae5c:	d1f7      	bne.n	1ae4e <notify_le_param_updated+0x3a>
   1ae5e:	f3bf 8f5b 	dmb	ish
}
   1ae62:	e7ef      	b.n	1ae44 <notify_le_param_updated+0x30>
			cb->le_param_updated(conn, conn->le.interval,
   1ae64:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1ae68:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1ae6c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1ae70:	4620      	mov	r0, r4
   1ae72:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1ae74:	692d      	ldr	r5, [r5, #16]
   1ae76:	b11d      	cbz	r5, 1ae80 <notify_le_param_updated+0x6c>
		if (cb->le_param_updated) {
   1ae78:	68ee      	ldr	r6, [r5, #12]
   1ae7a:	2e00      	cmp	r6, #0
   1ae7c:	d1f2      	bne.n	1ae64 <notify_le_param_updated+0x50>
   1ae7e:	e7f9      	b.n	1ae74 <notify_le_param_updated+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1ae80:	4d0a      	ldr	r5, [pc, #40]	; (1aeac <notify_le_param_updated+0x98>)
   1ae82:	e000      	b.n	1ae86 <notify_le_param_updated+0x72>
   1ae84:	3514      	adds	r5, #20
   1ae86:	4b0a      	ldr	r3, [pc, #40]	; (1aeb0 <notify_le_param_updated+0x9c>)
   1ae88:	429d      	cmp	r5, r3
   1ae8a:	d20b      	bcs.n	1aea4 <notify_le_param_updated+0x90>
		if (cb->le_param_updated) {
   1ae8c:	68ee      	ldr	r6, [r5, #12]
   1ae8e:	2e00      	cmp	r6, #0
   1ae90:	d0f8      	beq.n	1ae84 <notify_le_param_updated+0x70>
			cb->le_param_updated(conn, conn->le.interval,
   1ae92:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1ae96:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1ae9a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1ae9e:	4620      	mov	r0, r4
   1aea0:	47b0      	blx	r6
   1aea2:	e7ef      	b.n	1ae84 <notify_le_param_updated+0x70>
}
   1aea4:	bd70      	pop	{r4, r5, r6, pc}
   1aea6:	bf00      	nop
   1aea8:	20003794 	.word	0x20003794
   1aeac:	0002ee48 	.word	0x0002ee48
   1aeb0:	0002ee48 	.word	0x0002ee48

0001aeb4 <le_param_req>:
{
   1aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aeb6:	4606      	mov	r6, r0
   1aeb8:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1aeba:	4608      	mov	r0, r1
   1aebc:	f00e fdbf 	bl	29a3e <bt_le_conn_params_valid>
   1aec0:	4607      	mov	r7, r0
   1aec2:	b338      	cbz	r0, 1af14 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   1aec4:	4b15      	ldr	r3, [pc, #84]	; (1af1c <le_param_req+0x68>)
   1aec6:	681c      	ldr	r4, [r3, #0]
   1aec8:	e000      	b.n	1aecc <le_param_req+0x18>
   1aeca:	6924      	ldr	r4, [r4, #16]
   1aecc:	b16c      	cbz	r4, 1aeea <le_param_req+0x36>
		if (!cb->le_param_req) {
   1aece:	68a3      	ldr	r3, [r4, #8]
   1aed0:	2b00      	cmp	r3, #0
   1aed2:	d0fa      	beq.n	1aeca <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   1aed4:	4629      	mov	r1, r5
   1aed6:	4630      	mov	r0, r6
   1aed8:	4798      	blx	r3
   1aeda:	b1d0      	cbz	r0, 1af12 <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   1aedc:	4628      	mov	r0, r5
   1aede:	f00e fdae 	bl	29a3e <bt_le_conn_params_valid>
   1aee2:	2800      	cmp	r0, #0
   1aee4:	d1f1      	bne.n	1aeca <le_param_req+0x16>
			return false;
   1aee6:	4607      	mov	r7, r0
   1aee8:	e014      	b.n	1af14 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1aeea:	4c0d      	ldr	r4, [pc, #52]	; (1af20 <le_param_req+0x6c>)
   1aeec:	e000      	b.n	1aef0 <le_param_req+0x3c>
   1aeee:	3414      	adds	r4, #20
   1aef0:	4b0c      	ldr	r3, [pc, #48]	; (1af24 <le_param_req+0x70>)
   1aef2:	429c      	cmp	r4, r3
   1aef4:	d20e      	bcs.n	1af14 <le_param_req+0x60>
		if (!cb->le_param_req) {
   1aef6:	68a3      	ldr	r3, [r4, #8]
   1aef8:	2b00      	cmp	r3, #0
   1aefa:	d0f8      	beq.n	1aeee <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   1aefc:	4629      	mov	r1, r5
   1aefe:	4630      	mov	r0, r6
   1af00:	4798      	blx	r3
   1af02:	b148      	cbz	r0, 1af18 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   1af04:	4628      	mov	r0, r5
   1af06:	f00e fd9a 	bl	29a3e <bt_le_conn_params_valid>
   1af0a:	2800      	cmp	r0, #0
   1af0c:	d1ef      	bne.n	1aeee <le_param_req+0x3a>
			return false;
   1af0e:	4607      	mov	r7, r0
   1af10:	e000      	b.n	1af14 <le_param_req+0x60>
			return false;
   1af12:	4607      	mov	r7, r0
}
   1af14:	4638      	mov	r0, r7
   1af16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1af18:	4607      	mov	r7, r0
   1af1a:	e7fb      	b.n	1af14 <le_param_req+0x60>
   1af1c:	20003794 	.word	0x20003794
   1af20:	0002ee48 	.word	0x0002ee48
   1af24:	0002ee48 	.word	0x0002ee48

0001af28 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1af28:	4b02      	ldr	r3, [pc, #8]	; (1af34 <bt_conn_cb_register+0xc>)
   1af2a:	681a      	ldr	r2, [r3, #0]
   1af2c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1af2e:	6018      	str	r0, [r3, #0]
}
   1af30:	4770      	bx	lr
   1af32:	bf00      	nop
   1af34:	20003794 	.word	0x20003794

0001af38 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af3a:	4607      	mov	r7, r0
   1af3c:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1af3e:	2400      	movs	r4, #0
   1af40:	b114      	cbz	r4, 1af48 <bt_conn_lookup_addr_le+0x10>
		}

		return conn;
	}

	return NULL;
   1af42:	2500      	movs	r5, #0
}
   1af44:	4628      	mov	r0, r5
   1af46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1af48:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1af4c:	480b      	ldr	r0, [pc, #44]	; (1af7c <bt_conn_lookup_addr_le+0x44>)
   1af4e:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1af52:	f00f f944 	bl	2a1de <bt_conn_ref>
		if (!conn) {
   1af56:	4605      	mov	r5, r0
   1af58:	b170      	cbz	r0, 1af78 <bt_conn_lookup_addr_le+0x40>
		if (conn->type != BT_CONN_TYPE_LE) {
   1af5a:	7883      	ldrb	r3, [r0, #2]
   1af5c:	2b01      	cmp	r3, #1
   1af5e:	d109      	bne.n	1af74 <bt_conn_lookup_addr_le+0x3c>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1af60:	4632      	mov	r2, r6
   1af62:	4639      	mov	r1, r7
   1af64:	f00f f9cd 	bl	2a302 <bt_conn_is_peer_addr_le>
   1af68:	2800      	cmp	r0, #0
   1af6a:	d1eb      	bne.n	1af44 <bt_conn_lookup_addr_le+0xc>
			bt_conn_unref(conn);
   1af6c:	4628      	mov	r0, r5
   1af6e:	f00f f95d 	bl	2a22c <bt_conn_unref>
			continue;
   1af72:	e001      	b.n	1af78 <bt_conn_lookup_addr_le+0x40>
			bt_conn_unref(conn);
   1af74:	f00f f95a 	bl	2a22c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1af78:	3401      	adds	r4, #1
   1af7a:	e7e1      	b.n	1af40 <bt_conn_lookup_addr_le+0x8>
   1af7c:	200021f0 	.word	0x200021f0

0001af80 <bt_conn_exists_le>:
{
   1af80:	b5b0      	push	{r4, r5, r7, lr}
   1af82:	b082      	sub	sp, #8
   1af84:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1af86:	f7ff ffd7 	bl	1af38 <bt_conn_lookup_addr_le>
	if (conn) {
   1af8a:	2800      	cmp	r0, #0
   1af8c:	d063      	beq.n	1b056 <bt_conn_exists_le+0xd6>
   1af8e:	4604      	mov	r4, r0
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1af90:	7a80      	ldrb	r0, [r0, #10]
   1af92:	f7ff f9ab 	bl	1a2ec <state2str>
   1af96:	466d      	mov	r5, sp
   1af98:	2300      	movs	r3, #0
   1af9a:	713b      	strb	r3, [r7, #4]
   1af9c:	2302      	movs	r3, #2
   1af9e:	717b      	strb	r3, [r7, #5]
   1afa0:	b088      	sub	sp, #32
   1afa2:	46ec      	mov	ip, sp
   1afa4:	f11c 0210 	adds.w	r2, ip, #16
   1afa8:	d016      	beq.n	1afd8 <bt_conn_exists_le+0x58>
   1afaa:	f04f 0e0e 	mov.w	lr, #14
   1afae:	b12a      	cbz	r2, 1afbc <bt_conn_exists_le+0x3c>
   1afb0:	f1be 0f04 	cmp.w	lr, #4
   1afb4:	dd02      	ble.n	1afbc <bt_conn_exists_le+0x3c>
   1afb6:	4b29      	ldr	r3, [pc, #164]	; (1b05c <bt_conn_exists_le+0xdc>)
   1afb8:	f8cc 3014 	str.w	r3, [ip, #20]
   1afbc:	2300      	movs	r3, #0
   1afbe:	703b      	strb	r3, [r7, #0]
   1afc0:	2302      	movs	r3, #2
   1afc2:	707b      	strb	r3, [r7, #1]
   1afc4:	b1aa      	cbz	r2, 1aff2 <bt_conn_exists_le+0x72>
   1afc6:	f1be 0f08 	cmp.w	lr, #8
   1afca:	dd01      	ble.n	1afd0 <bt_conn_exists_le+0x50>
   1afcc:	f8cc 0018 	str.w	r0, [ip, #24]
   1afd0:	f10c 031c 	add.w	r3, ip, #28
   1afd4:	2100      	movs	r1, #0
   1afd6:	e00a      	b.n	1afee <bt_conn_exists_le+0x6e>
   1afd8:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   1afdc:	e7e7      	b.n	1afae <bt_conn_exists_le+0x2e>
   1afde:	f101 0008 	add.w	r0, r1, #8
   1afe2:	4438      	add	r0, r7
   1afe4:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1afe8:	f803 0b01 	strb.w	r0, [r3], #1
   1afec:	3101      	adds	r1, #1
   1afee:	2901      	cmp	r1, #1
   1aff0:	d9f5      	bls.n	1afde <bt_conn_exists_le+0x5e>
   1aff2:	f1be 0f0d 	cmp.w	lr, #13
   1aff6:	dd2b      	ble.n	1b050 <bt_conn_exists_le+0xd0>
   1aff8:	230e      	movs	r3, #14
   1affa:	b14a      	cbz	r2, 1b010 <bt_conn_exists_le+0x90>
   1affc:	2103      	movs	r1, #3
   1affe:	7139      	strb	r1, [r7, #4]
   1b000:	2100      	movs	r1, #0
   1b002:	7179      	strb	r1, [r7, #5]
   1b004:	71b9      	strb	r1, [r7, #6]
   1b006:	2101      	movs	r1, #1
   1b008:	71f9      	strb	r1, [r7, #7]
   1b00a:	6878      	ldr	r0, [r7, #4]
   1b00c:	f8cc 0010 	str.w	r0, [ip, #16]
   1b010:	2100      	movs	r1, #0
   1b012:	f36f 0100 	bfc	r1, #0, #1
   1b016:	f36f 0141 	bfc	r1, #1, #1
   1b01a:	f36f 0182 	bfc	r1, #2, #1
   1b01e:	f36f 01c5 	bfc	r1, #3, #3
   1b022:	2002      	movs	r0, #2
   1b024:	f360 1188 	bfi	r1, r0, #6, #3
   1b028:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b02c:	f363 2152 	bfi	r1, r3, #9, #10
   1b030:	f36f 41de 	bfc	r1, #19, #12
   1b034:	f36f 71df 	bfc	r1, #31, #1
   1b038:	2300      	movs	r3, #0
   1b03a:	4809      	ldr	r0, [pc, #36]	; (1b060 <bt_conn_exists_le+0xe0>)
   1b03c:	f00d fec1 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1b040:	46ad      	mov	sp, r5
		bt_conn_unref(conn);
   1b042:	4620      	mov	r0, r4
   1b044:	f00f f8f2 	bl	2a22c <bt_conn_unref>
		return true;
   1b048:	2001      	movs	r0, #1
}
   1b04a:	3708      	adds	r7, #8
   1b04c:	46bd      	mov	sp, r7
   1b04e:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1b050:	f06f 031b 	mvn.w	r3, #27
   1b054:	e7d1      	b.n	1affa <bt_conn_exists_le+0x7a>
	return false;
   1b056:	2000      	movs	r0, #0
   1b058:	e7f7      	b.n	1b04a <bt_conn_exists_le+0xca>
   1b05a:	bf00      	nop
   1b05c:	00030914 	.word	0x00030914
   1b060:	0002ee88 	.word	0x0002ee88

0001b064 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b068:	4607      	mov	r7, r0
   1b06a:	460e      	mov	r6, r1
   1b06c:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b06e:	2400      	movs	r4, #0
   1b070:	b11c      	cbz	r4, 1b07a <bt_conn_lookup_state_le+0x16>
		}

		return conn;
	}

	return NULL;
   1b072:	2500      	movs	r5, #0
}
   1b074:	4628      	mov	r0, r5
   1b076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b07a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1b07e:	4b11      	ldr	r3, [pc, #68]	; (1b0c4 <bt_conn_lookup_state_le+0x60>)
   1b080:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1b084:	f00f f8ab 	bl	2a1de <bt_conn_ref>
		if (!conn) {
   1b088:	4605      	mov	r5, r0
   1b08a:	b188      	cbz	r0, 1b0b0 <bt_conn_lookup_state_le+0x4c>
		if (conn->type != BT_CONN_TYPE_LE) {
   1b08c:	7883      	ldrb	r3, [r0, #2]
   1b08e:	2b01      	cmp	r3, #1
   1b090:	d110      	bne.n	1b0b4 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b092:	b126      	cbz	r6, 1b09e <bt_conn_lookup_state_le+0x3a>
   1b094:	4632      	mov	r2, r6
   1b096:	4639      	mov	r1, r7
   1b098:	f00f f933 	bl	2a302 <bt_conn_is_peer_addr_le>
   1b09c:	b168      	cbz	r0, 1b0ba <bt_conn_lookup_state_le+0x56>
		if (!(conn->state == state && conn->id == id)) {
   1b09e:	7aab      	ldrb	r3, [r5, #10]
   1b0a0:	4543      	cmp	r3, r8
   1b0a2:	d102      	bne.n	1b0aa <bt_conn_lookup_state_le+0x46>
   1b0a4:	7a2b      	ldrb	r3, [r5, #8]
   1b0a6:	42bb      	cmp	r3, r7
   1b0a8:	d0e4      	beq.n	1b074 <bt_conn_lookup_state_le+0x10>
			bt_conn_unref(conn);
   1b0aa:	4628      	mov	r0, r5
   1b0ac:	f00f f8be 	bl	2a22c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1b0b0:	3401      	adds	r4, #1
   1b0b2:	e7dd      	b.n	1b070 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   1b0b4:	f00f f8ba 	bl	2a22c <bt_conn_unref>
			continue;
   1b0b8:	e7fa      	b.n	1b0b0 <bt_conn_lookup_state_le+0x4c>
			bt_conn_unref(conn);
   1b0ba:	4628      	mov	r0, r5
   1b0bc:	f00f f8b6 	bl	2a22c <bt_conn_unref>
			continue;
   1b0c0:	e7f6      	b.n	1b0b0 <bt_conn_lookup_state_le+0x4c>
   1b0c2:	bf00      	nop
   1b0c4:	200021f0 	.word	0x200021f0

0001b0c8 <send_conn_le_param_update>:
{
   1b0c8:	b538      	push	{r3, r4, r5, lr}
   1b0ca:	4604      	mov	r4, r0
   1b0cc:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1b0ce:	4608      	mov	r0, r1
   1b0d0:	f00e fcb5 	bl	29a3e <bt_le_conn_params_valid>
   1b0d4:	b350      	cbz	r0, 1b12c <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b0d6:	4b17      	ldr	r3, [pc, #92]	; (1b134 <send_conn_le_param_update+0x6c>)
   1b0d8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1b0dc:	f013 0f02 	tst.w	r3, #2
   1b0e0:	d004      	beq.n	1b0ec <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b0e2:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b0e6:	f013 0f02 	tst.w	r3, #2
   1b0ea:	d113      	bne.n	1b114 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1b0ec:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1b0ee:	b9c3      	cbnz	r3, 1b122 <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   1b0f0:	4629      	mov	r1, r5
   1b0f2:	4620      	mov	r0, r4
   1b0f4:	f00f f92c 	bl	2a350 <bt_conn_le_conn_update>
		if (rc == 0) {
   1b0f8:	b9b8      	cbnz	r0, 1b12a <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   1b0fa:	882b      	ldrh	r3, [r5, #0]
   1b0fc:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1b100:	886b      	ldrh	r3, [r5, #2]
   1b102:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1b106:	88ab      	ldrh	r3, [r5, #4]
   1b108:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1b10c:	88eb      	ldrh	r3, [r5, #6]
   1b10e:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   1b112:	e00a      	b.n	1b12a <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1b114:	210a      	movs	r1, #10
   1b116:	1d20      	adds	r0, r4, #4
   1b118:	f00e ff88 	bl	2a02c <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b11c:	2800      	cmp	r0, #0
   1b11e:	d1e5      	bne.n	1b0ec <send_conn_le_param_update+0x24>
   1b120:	e7e6      	b.n	1b0f0 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1b122:	4629      	mov	r1, r5
   1b124:	4620      	mov	r0, r4
   1b126:	f00f f9e1 	bl	2a4ec <bt_l2cap_update_conn_param>
}
   1b12a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b12c:	f06f 0015 	mvn.w	r0, #21
   1b130:	e7fb      	b.n	1b12a <send_conn_le_param_update+0x62>
   1b132:	bf00      	nop
   1b134:	20000388 	.word	0x20000388

0001b138 <deferred_work>:
{
   1b138:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b13a:	b087      	sub	sp, #28
   1b13c:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1b13e:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b142:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   1b146:	2b00      	cmp	r3, #0
   1b148:	d058      	beq.n	1b1fc <deferred_work+0xc4>
   1b14a:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   1b14c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1b150:	2b01      	cmp	r3, #1
   1b152:	d175      	bne.n	1b240 <deferred_work+0x108>
	if (atomic_test_and_clear_bit(conn->flags,
   1b154:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   1b158:	2109      	movs	r1, #9
   1b15a:	4630      	mov	r0, r6
   1b15c:	f00e ff4a 	bl	29ff4 <atomic_test_and_clear_bit>
   1b160:	2800      	cmp	r0, #0
   1b162:	d076      	beq.n	1b252 <deferred_work+0x11a>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b164:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1b168:	813b      	strh	r3, [r7, #8]
   1b16a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1b16e:	817b      	strh	r3, [r7, #10]
   1b170:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1b174:	81bb      	strh	r3, [r7, #12]
   1b176:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1b17a:	81fb      	strh	r3, [r7, #14]
		err = send_conn_le_param_update(conn, param);
   1b17c:	f107 0108 	add.w	r1, r7, #8
   1b180:	4628      	mov	r0, r5
   1b182:	f7ff ffa1 	bl	1b0c8 <send_conn_le_param_update>
		if (!err) {
   1b186:	4604      	mov	r4, r0
   1b188:	2800      	cmp	r0, #0
   1b18a:	d041      	beq.n	1b210 <deferred_work+0xd8>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1b18c:	466d      	mov	r5, sp
   1b18e:	b088      	sub	sp, #32
   1b190:	466b      	mov	r3, sp
   1b192:	f113 0210 	adds.w	r2, r3, #16
   1b196:	d056      	beq.n	1b246 <deferred_work+0x10e>
   1b198:	210c      	movs	r1, #12
   1b19a:	b14a      	cbz	r2, 1b1b0 <deferred_work+0x78>
   1b19c:	4608      	mov	r0, r1
   1b19e:	2904      	cmp	r1, #4
   1b1a0:	dd03      	ble.n	1b1aa <deferred_work+0x72>
   1b1a2:	f8df c168 	ldr.w	ip, [pc, #360]	; 1b30c <deferred_work+0x1d4>
   1b1a6:	f8c3 c014 	str.w	ip, [r3, #20]
   1b1aa:	2808      	cmp	r0, #8
   1b1ac:	dd00      	ble.n	1b1b0 <deferred_work+0x78>
   1b1ae:	619c      	str	r4, [r3, #24]
   1b1b0:	290b      	cmp	r1, #11
   1b1b2:	dd4b      	ble.n	1b24c <deferred_work+0x114>
   1b1b4:	240c      	movs	r4, #12
   1b1b6:	b13a      	cbz	r2, 1b1c8 <deferred_work+0x90>
   1b1b8:	2103      	movs	r1, #3
   1b1ba:	7139      	strb	r1, [r7, #4]
   1b1bc:	2100      	movs	r1, #0
   1b1be:	7179      	strb	r1, [r7, #5]
   1b1c0:	71b9      	strb	r1, [r7, #6]
   1b1c2:	71f9      	strb	r1, [r7, #7]
   1b1c4:	6878      	ldr	r0, [r7, #4]
   1b1c6:	6118      	str	r0, [r3, #16]
   1b1c8:	2100      	movs	r1, #0
   1b1ca:	f36f 0100 	bfc	r1, #0, #1
   1b1ce:	f36f 0141 	bfc	r1, #1, #1
   1b1d2:	f36f 0182 	bfc	r1, #2, #1
   1b1d6:	f36f 01c5 	bfc	r1, #3, #3
   1b1da:	2302      	movs	r3, #2
   1b1dc:	f363 1188 	bfi	r1, r3, #6, #3
   1b1e0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1b1e4:	f364 2152 	bfi	r1, r4, #9, #10
   1b1e8:	f36f 41de 	bfc	r1, #19, #12
   1b1ec:	f36f 71df 	bfc	r1, #31, #1
   1b1f0:	2300      	movs	r3, #0
   1b1f2:	4844      	ldr	r0, [pc, #272]	; (1b304 <deferred_work+0x1cc>)
   1b1f4:	f00d fde5 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1b1f8:	46ad      	mov	sp, r5
   1b1fa:	e015      	b.n	1b228 <deferred_work+0xf0>
		bt_l2cap_disconnected(conn);
   1b1fc:	4628      	mov	r0, r5
   1b1fe:	f00f f8fc 	bl	2a3fa <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1b202:	4628      	mov	r0, r5
   1b204:	f7ff f8c6 	bl	1a394 <notify_disconnected>
		bt_conn_unref(conn);
   1b208:	4628      	mov	r0, r5
   1b20a:	f00f f80f 	bl	2a22c <bt_conn_unref>
		return;
   1b20e:	e017      	b.n	1b240 <deferred_work+0x108>
   1b210:	f3bf 8f5b 	dmb	ish
   1b214:	e856 3f00 	ldrex	r3, [r6]
   1b218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1b21c:	e846 3200 	strex	r2, r3, [r6]
   1b220:	2a00      	cmp	r2, #0
   1b222:	d1f7      	bne.n	1b214 <deferred_work+0xdc>
   1b224:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b228:	f3bf 8f5b 	dmb	ish
   1b22c:	e856 3f00 	ldrex	r3, [r6]
   1b230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b234:	e846 3200 	strex	r2, r3, [r6]
   1b238:	2a00      	cmp	r2, #0
   1b23a:	d1f7      	bne.n	1b22c <deferred_work+0xf4>
   1b23c:	f3bf 8f5b 	dmb	ish
}
   1b240:	371c      	adds	r7, #28
   1b242:	46bd      	mov	sp, r7
   1b244:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   1b246:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b24a:	e7a6      	b.n	1b19a <deferred_work+0x62>
   1b24c:	f06f 041b 	mvn.w	r4, #27
   1b250:	e7b1      	b.n	1b1b6 <deferred_work+0x7e>
		param = BT_LE_CONN_PARAM(
   1b252:	4a2d      	ldr	r2, [pc, #180]	; (1b308 <deferred_work+0x1d0>)
   1b254:	f107 0310 	add.w	r3, r7, #16
   1b258:	e892 0003 	ldmia.w	r2, {r0, r1}
   1b25c:	e883 0003 	stmia.w	r3, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1b260:	4619      	mov	r1, r3
   1b262:	4628      	mov	r0, r5
   1b264:	f7ff ff30 	bl	1b0c8 <send_conn_le_param_update>
		if (!err) {
   1b268:	4604      	mov	r4, r0
   1b26a:	b3b8      	cbz	r0, 1b2dc <deferred_work+0x1a4>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1b26c:	466d      	mov	r5, sp
   1b26e:	b088      	sub	sp, #32
   1b270:	466b      	mov	r3, sp
   1b272:	f113 0210 	adds.w	r2, r3, #16
   1b276:	d03e      	beq.n	1b2f6 <deferred_work+0x1be>
   1b278:	210c      	movs	r1, #12
   1b27a:	b14a      	cbz	r2, 1b290 <deferred_work+0x158>
   1b27c:	4608      	mov	r0, r1
   1b27e:	2904      	cmp	r1, #4
   1b280:	dd03      	ble.n	1b28a <deferred_work+0x152>
   1b282:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1b310 <deferred_work+0x1d8>
   1b286:	f8c3 c014 	str.w	ip, [r3, #20]
   1b28a:	2808      	cmp	r0, #8
   1b28c:	dd00      	ble.n	1b290 <deferred_work+0x158>
   1b28e:	619c      	str	r4, [r3, #24]
   1b290:	290b      	cmp	r1, #11
   1b292:	dd33      	ble.n	1b2fc <deferred_work+0x1c4>
   1b294:	240c      	movs	r4, #12
   1b296:	b13a      	cbz	r2, 1b2a8 <deferred_work+0x170>
   1b298:	2103      	movs	r1, #3
   1b29a:	7139      	strb	r1, [r7, #4]
   1b29c:	2100      	movs	r1, #0
   1b29e:	7179      	strb	r1, [r7, #5]
   1b2a0:	71b9      	strb	r1, [r7, #6]
   1b2a2:	71f9      	strb	r1, [r7, #7]
   1b2a4:	6878      	ldr	r0, [r7, #4]
   1b2a6:	6118      	str	r0, [r3, #16]
   1b2a8:	2100      	movs	r1, #0
   1b2aa:	f36f 0100 	bfc	r1, #0, #1
   1b2ae:	f36f 0141 	bfc	r1, #1, #1
   1b2b2:	f36f 0182 	bfc	r1, #2, #1
   1b2b6:	f36f 01c5 	bfc	r1, #3, #3
   1b2ba:	2302      	movs	r3, #2
   1b2bc:	f363 1188 	bfi	r1, r3, #6, #3
   1b2c0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1b2c4:	f364 2152 	bfi	r1, r4, #9, #10
   1b2c8:	f36f 41de 	bfc	r1, #19, #12
   1b2cc:	f36f 71df 	bfc	r1, #31, #1
   1b2d0:	2300      	movs	r3, #0
   1b2d2:	480c      	ldr	r0, [pc, #48]	; (1b304 <deferred_work+0x1cc>)
   1b2d4:	f00d fd75 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1b2d8:	46ad      	mov	sp, r5
   1b2da:	e7a5      	b.n	1b228 <deferred_work+0xf0>
   1b2dc:	f3bf 8f5b 	dmb	ish
   1b2e0:	e856 3f00 	ldrex	r3, [r6]
   1b2e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1b2e8:	e846 3200 	strex	r2, r3, [r6]
   1b2ec:	2a00      	cmp	r2, #0
   1b2ee:	d1f7      	bne.n	1b2e0 <deferred_work+0x1a8>
   1b2f0:	f3bf 8f5b 	dmb	ish
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
}
   1b2f4:	e798      	b.n	1b228 <deferred_work+0xf0>
   1b2f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b2fa:	e7be      	b.n	1b27a <deferred_work+0x142>
   1b2fc:	f06f 041b 	mvn.w	r4, #27
   1b300:	e7c9      	b.n	1b296 <deferred_work+0x15e>
   1b302:	bf00      	nop
   1b304:	0002ee88 	.word	0x0002ee88
   1b308:	0002f01c 	.word	0x0002f01c
   1b30c:	00030938 	.word	0x00030938
   1b310:	00030960 	.word	0x00030960

0001b314 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1b314:	b508      	push	{r3, lr}
   1b316:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1b318:	4801      	ldr	r0, [pc, #4]	; (1b320 <bt_conn_create_frag_timeout+0xc>)
   1b31a:	f7ff fd3d 	bl	1ad98 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1b31e:	bd08      	pop	{r3, pc}
   1b320:	20000cbc 	.word	0x20000cbc

0001b324 <create_frag>:
{
   1b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b326:	4606      	mov	r6, r0
   1b328:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   1b32a:	f04f 32ff 	mov.w	r2, #4294967295
   1b32e:	f04f 33ff 	mov.w	r3, #4294967295
   1b332:	2000      	movs	r0, #0
   1b334:	f7ff ffee 	bl	1b314 <bt_conn_create_frag_timeout>
   1b338:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1b33a:	7ab3      	ldrb	r3, [r6, #10]
   1b33c:	2b07      	cmp	r3, #7
   1b33e:	d11a      	bne.n	1b376 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1b340:	2300      	movs	r3, #0
   1b342:	6183      	str	r3, [r0, #24]
	return bt_dev.le.acl_mtu;
   1b344:	4b10      	ldr	r3, [pc, #64]	; (1b388 <create_frag+0x64>)
   1b346:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1b34a:	f100 070c 	add.w	r7, r0, #12
   1b34e:	4638      	mov	r0, r7
   1b350:	f010 fd62 	bl	2be18 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1b354:	4286      	cmp	r6, r0
   1b356:	d212      	bcs.n	1b37e <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   1b358:	4b0b      	ldr	r3, [pc, #44]	; (1b388 <create_frag+0x64>)
   1b35a:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b35e:	4632      	mov	r2, r6
   1b360:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   1b364:	4638      	mov	r0, r7
   1b366:	f010 fd21 	bl	2bdac <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1b36a:	4631      	mov	r1, r6
   1b36c:	4628      	mov	r0, r5
   1b36e:	f010 fd37 	bl	2bde0 <net_buf_simple_pull>
}
   1b372:	4620      	mov	r0, r4
   1b374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1b376:	f010 fccc 	bl	2bd12 <net_buf_unref>
		return NULL;
   1b37a:	2400      	movs	r4, #0
   1b37c:	e7f9      	b.n	1b372 <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1b37e:	4638      	mov	r0, r7
   1b380:	f010 fd4a 	bl	2be18 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1b384:	b286      	uxth	r6, r0
   1b386:	e7ea      	b.n	1b35e <create_frag+0x3a>
   1b388:	20000388 	.word	0x20000388

0001b38c <send_buf>:
{
   1b38c:	b538      	push	{r3, r4, r5, lr}
   1b38e:	4605      	mov	r5, r0
   1b390:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1b392:	8a0b      	ldrh	r3, [r1, #16]
	return bt_dev.le.acl_mtu;
   1b394:	4a1b      	ldr	r2, [pc, #108]	; (1b404 <send_buf+0x78>)
   1b396:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1b39a:	429a      	cmp	r2, r3
   1b39c:	d21f      	bcs.n	1b3de <send_buf+0x52>
	frag = create_frag(conn, buf);
   1b39e:	f7ff ffc1 	bl	1b324 <create_frag>
	if (!frag) {
   1b3a2:	4601      	mov	r1, r0
   1b3a4:	b350      	cbz	r0, 1b3fc <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1b3a6:	2301      	movs	r3, #1
   1b3a8:	2200      	movs	r2, #0
   1b3aa:	4628      	mov	r0, r5
   1b3ac:	f7ff f83c 	bl	1a428 <send_frag>
   1b3b0:	4603      	mov	r3, r0
   1b3b2:	b1c8      	cbz	r0, 1b3e8 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1b3b4:	8a23      	ldrh	r3, [r4, #16]
	return bt_dev.le.acl_mtu;
   1b3b6:	4a13      	ldr	r2, [pc, #76]	; (1b404 <send_buf+0x78>)
   1b3b8:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   1b3bc:	429a      	cmp	r2, r3
   1b3be:	d215      	bcs.n	1b3ec <send_buf+0x60>
		frag = create_frag(conn, buf);
   1b3c0:	4621      	mov	r1, r4
   1b3c2:	4628      	mov	r0, r5
   1b3c4:	f7ff ffae 	bl	1b324 <create_frag>
		if (!frag) {
   1b3c8:	4601      	mov	r1, r0
   1b3ca:	b1c8      	cbz	r0, 1b400 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1b3cc:	2301      	movs	r3, #1
   1b3ce:	461a      	mov	r2, r3
   1b3d0:	4628      	mov	r0, r5
   1b3d2:	f7ff f829 	bl	1a428 <send_frag>
   1b3d6:	4603      	mov	r3, r0
   1b3d8:	2800      	cmp	r0, #0
   1b3da:	d1eb      	bne.n	1b3b4 <send_buf+0x28>
   1b3dc:	e004      	b.n	1b3e8 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1b3de:	2300      	movs	r3, #0
   1b3e0:	2202      	movs	r2, #2
   1b3e2:	f7ff f821 	bl	1a428 <send_frag>
   1b3e6:	4603      	mov	r3, r0
}
   1b3e8:	4618      	mov	r0, r3
   1b3ea:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   1b3ec:	2300      	movs	r3, #0
   1b3ee:	2203      	movs	r2, #3
   1b3f0:	4621      	mov	r1, r4
   1b3f2:	4628      	mov	r0, r5
   1b3f4:	f7ff f818 	bl	1a428 <send_frag>
   1b3f8:	4603      	mov	r3, r0
   1b3fa:	e7f5      	b.n	1b3e8 <send_buf+0x5c>
		return false;
   1b3fc:	2300      	movs	r3, #0
   1b3fe:	e7f3      	b.n	1b3e8 <send_buf+0x5c>
			return false;
   1b400:	2300      	movs	r3, #0
   1b402:	e7f1      	b.n	1b3e8 <send_buf+0x5c>
   1b404:	20000388 	.word	0x20000388

0001b408 <bt_conn_process_tx>:
{
   1b408:	b570      	push	{r4, r5, r6, lr}
   1b40a:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b40c:	7a83      	ldrb	r3, [r0, #10]
   1b40e:	b923      	cbnz	r3, 1b41a <bt_conn_process_tx+0x12>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1b410:	2106      	movs	r1, #6
   1b412:	3004      	adds	r0, #4
   1b414:	f00e fdee 	bl	29ff4 <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b418:	b968      	cbnz	r0, 1b436 <bt_conn_process_tx+0x2e>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1b41a:	2200      	movs	r2, #0
   1b41c:	2300      	movs	r3, #0
   1b41e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1b422:	f010 fc35 	bl	2bc90 <net_buf_get>
	BT_ASSERT(buf);
   1b426:	4605      	mov	r5, r0
   1b428:	b148      	cbz	r0, 1b43e <bt_conn_process_tx+0x36>
	if (!send_buf(conn, buf)) {
   1b42a:	4629      	mov	r1, r5
   1b42c:	4620      	mov	r0, r4
   1b42e:	f7ff ffad 	bl	1b38c <send_buf>
   1b432:	b190      	cbz	r0, 1b45a <bt_conn_process_tx+0x52>
}
   1b434:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   1b436:	4620      	mov	r0, r4
   1b438:	f00e fe78 	bl	2a12c <conn_cleanup>
		return;
   1b43c:	e7fa      	b.n	1b434 <bt_conn_process_tx+0x2c>
	BT_ASSERT(buf);
   1b43e:	f240 331a 	movw	r3, #794	; 0x31a
   1b442:	4a0c      	ldr	r2, [pc, #48]	; (1b474 <bt_conn_process_tx+0x6c>)
   1b444:	490c      	ldr	r1, [pc, #48]	; (1b478 <bt_conn_process_tx+0x70>)
   1b446:	480d      	ldr	r0, [pc, #52]	; (1b47c <bt_conn_process_tx+0x74>)
   1b448:	f00d f9a1 	bl	2878e <assert_print>
   1b44c:	4040      	eors	r0, r0
   1b44e:	f380 8811 	msr	BASEPRI, r0
   1b452:	f04f 0003 	mov.w	r0, #3
   1b456:	df02      	svc	2
   1b458:	e7e7      	b.n	1b42a <bt_conn_process_tx+0x22>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1b45a:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   1b45c:	2300      	movs	r3, #0
   1b45e:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1b460:	4628      	mov	r0, r5
   1b462:	f010 fc56 	bl	2bd12 <net_buf_unref>
		if (tx) {
   1b466:	2e00      	cmp	r6, #0
   1b468:	d0e4      	beq.n	1b434 <bt_conn_process_tx+0x2c>
			conn_tx_destroy(conn, tx);
   1b46a:	4631      	mov	r1, r6
   1b46c:	4620      	mov	r0, r4
   1b46e:	f00e fdb4 	bl	29fda <conn_tx_destroy>
   1b472:	e7df      	b.n	1b434 <bt_conn_process_tx+0x2c>
   1b474:	0003098c 	.word	0x0003098c
   1b478:	00031110 	.word	0x00031110
   1b47c:	00030158 	.word	0x00030158

0001b480 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1b480:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1b482:	480c      	ldr	r0, [pc, #48]	; (1b4b4 <bt_conn_init+0x34>)
   1b484:	f012 f920 	bl	2d6c8 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1b488:	2400      	movs	r4, #0
   1b48a:	e006      	b.n	1b49a <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1b48c:	490a      	ldr	r1, [pc, #40]	; (1b4b8 <bt_conn_init+0x38>)
   1b48e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1b492:	4808      	ldr	r0, [pc, #32]	; (1b4b4 <bt_conn_init+0x34>)
   1b494:	f012 f924 	bl	2d6e0 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1b498:	3401      	adds	r4, #1
   1b49a:	2c02      	cmp	r4, #2
   1b49c:	d9f6      	bls.n	1b48c <bt_conn_init+0xc>
	}

	bt_att_init();
   1b49e:	f001 fcdf 	bl	1ce60 <bt_att_init>

	err = bt_smp_init();
   1b4a2:	f010 fb08 	bl	2bab6 <bt_smp_init>
	if (err) {
   1b4a6:	4604      	mov	r4, r0
   1b4a8:	b108      	cbz	r0, 1b4ae <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1b4aa:	4620      	mov	r0, r4
   1b4ac:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   1b4ae:	f00f f84a 	bl	2a546 <bt_l2cap_init>
	return 0;
   1b4b2:	e7fa      	b.n	1b4aa <bt_conn_init+0x2a>
   1b4b4:	20000c4c 	.word	0x20000c4c
   1b4b8:	20003764 	.word	0x20003764

0001b4bc <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1b4bc:	4905      	ldr	r1, [pc, #20]	; (1b4d4 <get_ident+0x18>)
   1b4be:	780a      	ldrb	r2, [r1, #0]
   1b4c0:	1c53      	adds	r3, r2, #1
   1b4c2:	b2db      	uxtb	r3, r3
   1b4c4:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1b4c6:	b90b      	cbnz	r3, 1b4cc <get_ident+0x10>
		ident++;
   1b4c8:	3202      	adds	r2, #2
   1b4ca:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   1b4cc:	4b01      	ldr	r3, [pc, #4]	; (1b4d4 <get_ident+0x18>)
   1b4ce:	7818      	ldrb	r0, [r3, #0]
   1b4d0:	4770      	bx	lr
   1b4d2:	bf00      	nop
   1b4d4:	20004b69 	.word	0x20004b69

0001b4d8 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1b4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4da:	b083      	sub	sp, #12
   1b4dc:	af00      	add	r7, sp, #0
   1b4de:	4605      	mov	r5, r0
		.recv = l2cap_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1b4e0:	2000      	movs	r0, #0
   1b4e2:	2800      	cmp	r0, #0
   1b4e4:	d03a      	beq.n	1b55c <l2cap_accept+0x84>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   1b4e6:	466c      	mov	r4, sp
   1b4e8:	b088      	sub	sp, #32
   1b4ea:	466b      	mov	r3, sp
   1b4ec:	f113 0210 	adds.w	r2, r3, #16
   1b4f0:	d044      	beq.n	1b57c <l2cap_accept+0xa4>
   1b4f2:	210c      	movs	r1, #12
   1b4f4:	b13a      	cbz	r2, 1b506 <l2cap_accept+0x2e>
   1b4f6:	4608      	mov	r0, r1
   1b4f8:	2904      	cmp	r1, #4
   1b4fa:	dd01      	ble.n	1b500 <l2cap_accept+0x28>
   1b4fc:	4e22      	ldr	r6, [pc, #136]	; (1b588 <l2cap_accept+0xb0>)
   1b4fe:	615e      	str	r6, [r3, #20]
   1b500:	2808      	cmp	r0, #8
   1b502:	dd00      	ble.n	1b506 <l2cap_accept+0x2e>
   1b504:	619d      	str	r5, [r3, #24]
   1b506:	290b      	cmp	r1, #11
   1b508:	dd3b      	ble.n	1b582 <l2cap_accept+0xaa>
   1b50a:	f04f 0c0c 	mov.w	ip, #12
   1b50e:	b13a      	cbz	r2, 1b520 <l2cap_accept+0x48>
   1b510:	2103      	movs	r1, #3
   1b512:	7139      	strb	r1, [r7, #4]
   1b514:	2100      	movs	r1, #0
   1b516:	7179      	strb	r1, [r7, #5]
   1b518:	71b9      	strb	r1, [r7, #6]
   1b51a:	71f9      	strb	r1, [r7, #7]
   1b51c:	6878      	ldr	r0, [r7, #4]
   1b51e:	6118      	str	r0, [r3, #16]
   1b520:	2100      	movs	r1, #0
   1b522:	f36f 0100 	bfc	r1, #0, #1
   1b526:	f36f 0141 	bfc	r1, #1, #1
   1b52a:	f36f 0182 	bfc	r1, #2, #1
   1b52e:	f36f 01c5 	bfc	r1, #3, #3
   1b532:	2301      	movs	r3, #1
   1b534:	f363 1188 	bfi	r1, r3, #6, #3
   1b538:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1b53c:	f36c 2152 	bfi	r1, ip, #9, #10
   1b540:	f36f 41de 	bfc	r1, #19, #12
   1b544:	f36f 71df 	bfc	r1, #31, #1
   1b548:	2300      	movs	r3, #0
   1b54a:	4810      	ldr	r0, [pc, #64]	; (1b58c <l2cap_accept+0xb4>)
   1b54c:	f00d fc39 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1b550:	46a5      	mov	sp, r4

	return -ENOMEM;
   1b552:	f06f 000b 	mvn.w	r0, #11
}
   1b556:	370c      	adds	r7, #12
   1b558:	46bd      	mov	sp, r7
   1b55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (l2cap->chan.chan.conn) {
   1b55c:	238c      	movs	r3, #140	; 0x8c
   1b55e:	fb00 f303 	mul.w	r3, r0, r3
   1b562:	4a0b      	ldr	r2, [pc, #44]	; (1b590 <l2cap_accept+0xb8>)
   1b564:	58d3      	ldr	r3, [r2, r3]
   1b566:	b10b      	cbz	r3, 1b56c <l2cap_accept+0x94>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1b568:	3001      	adds	r0, #1
   1b56a:	e7ba      	b.n	1b4e2 <l2cap_accept+0xa>
		l2cap->chan.chan.ops = &ops;
   1b56c:	4b08      	ldr	r3, [pc, #32]	; (1b590 <l2cap_accept+0xb8>)
   1b56e:	228c      	movs	r2, #140	; 0x8c
   1b570:	fb02 3300 	mla	r3, r2, r0, r3
   1b574:	4a07      	ldr	r2, [pc, #28]	; (1b594 <l2cap_accept+0xbc>)
   1b576:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1b578:	600b      	str	r3, [r1, #0]
		return 0;
   1b57a:	e7ec      	b.n	1b556 <l2cap_accept+0x7e>
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1b57c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b580:	e7b8      	b.n	1b4f4 <l2cap_accept+0x1c>
   1b582:	f06f 0c1b 	mvn.w	ip, #27
   1b586:	e7c2      	b.n	1b50e <l2cap_accept+0x36>
   1b588:	000309e4 	.word	0x000309e4
   1b58c:	0002eeb0 	.word	0x0002eeb0
   1b590:	20003798 	.word	0x20003798
   1b594:	00030b50 	.word	0x00030b50

0001b598 <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   1b598:	8a0b      	ldrh	r3, [r1, #16]
   1b59a:	2b01      	cmp	r3, #1
   1b59c:	d900      	bls.n	1b5a0 <le_conn_param_rsp+0x8>
   1b59e:	4770      	bx	lr
{
   1b5a0:	b500      	push	{lr}
   1b5a2:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("Too small LE conn param rsp");
   1b5a4:	4b13      	ldr	r3, [pc, #76]	; (1b5f4 <le_conn_param_rsp+0x5c>)
   1b5a6:	9307      	str	r3, [sp, #28]
   1b5a8:	2302      	movs	r3, #2
   1b5aa:	f88d 3004 	strb.w	r3, [sp, #4]
   1b5ae:	2300      	movs	r3, #0
   1b5b0:	f88d 3005 	strb.w	r3, [sp, #5]
   1b5b4:	f88d 3006 	strb.w	r3, [sp, #6]
   1b5b8:	f88d 3007 	strb.w	r3, [sp, #7]
   1b5bc:	9a01      	ldr	r2, [sp, #4]
   1b5be:	9206      	str	r2, [sp, #24]
   1b5c0:	4619      	mov	r1, r3
   1b5c2:	f363 0100 	bfi	r1, r3, #0, #1
   1b5c6:	f363 0141 	bfi	r1, r3, #1, #1
   1b5ca:	f363 0182 	bfi	r1, r3, #2, #1
   1b5ce:	f363 01c5 	bfi	r1, r3, #3, #3
   1b5d2:	2201      	movs	r2, #1
   1b5d4:	f362 1188 	bfi	r1, r2, #6, #3
   1b5d8:	2208      	movs	r2, #8
   1b5da:	f362 2152 	bfi	r1, r2, #9, #10
   1b5de:	f363 41de 	bfi	r1, r3, #19, #12
   1b5e2:	f363 71df 	bfi	r1, r3, #31, #1
   1b5e6:	aa06      	add	r2, sp, #24
   1b5e8:	4803      	ldr	r0, [pc, #12]	; (1b5f8 <le_conn_param_rsp+0x60>)
   1b5ea:	f00d fbea 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   1b5ee:	b009      	add	sp, #36	; 0x24
   1b5f0:	f85d fb04 	ldr.w	pc, [sp], #4
   1b5f4:	00030a0c 	.word	0x00030a0c
   1b5f8:	0002eeb0 	.word	0x0002eeb0

0001b5fc <l2cap_chan_add>:
{
   1b5fc:	b510      	push	{r4, lr}
   1b5fe:	b088      	sub	sp, #32
	if (!le_chan) {
   1b600:	b199      	cbz	r1, 1b62a <l2cap_chan_add+0x2e>
   1b602:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   1b604:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b606:	2400      	movs	r4, #0
   1b608:	f3bf 8f5b 	dmb	ish
   1b60c:	e851 cf00 	ldrex	ip, [r1]
   1b610:	e841 4e00 	strex	lr, r4, [r1]
   1b614:	f1be 0f00 	cmp.w	lr, #0
   1b618:	d1f8      	bne.n	1b60c <l2cap_chan_add+0x10>
   1b61a:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1b61e:	4619      	mov	r1, r3
   1b620:	f00e feda 	bl	2a3d8 <bt_l2cap_chan_add>
	return true;
   1b624:	2001      	movs	r0, #1
}
   1b626:	b008      	add	sp, #32
   1b628:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to allocate L2CAP channel ID");
   1b62a:	4b14      	ldr	r3, [pc, #80]	; (1b67c <l2cap_chan_add+0x80>)
   1b62c:	9307      	str	r3, [sp, #28]
   1b62e:	2302      	movs	r3, #2
   1b630:	f88d 3004 	strb.w	r3, [sp, #4]
   1b634:	2400      	movs	r4, #0
   1b636:	f88d 4005 	strb.w	r4, [sp, #5]
   1b63a:	f88d 4006 	strb.w	r4, [sp, #6]
   1b63e:	f88d 4007 	strb.w	r4, [sp, #7]
   1b642:	9b01      	ldr	r3, [sp, #4]
   1b644:	9306      	str	r3, [sp, #24]
   1b646:	4621      	mov	r1, r4
   1b648:	f364 0100 	bfi	r1, r4, #0, #1
   1b64c:	f364 0141 	bfi	r1, r4, #1, #1
   1b650:	f364 0182 	bfi	r1, r4, #2, #1
   1b654:	f364 01c5 	bfi	r1, r4, #3, #3
   1b658:	2301      	movs	r3, #1
   1b65a:	f363 1188 	bfi	r1, r3, #6, #3
   1b65e:	2308      	movs	r3, #8
   1b660:	f363 2152 	bfi	r1, r3, #9, #10
   1b664:	f364 41de 	bfi	r1, r4, #19, #12
   1b668:	f364 71df 	bfi	r1, r4, #31, #1
   1b66c:	4623      	mov	r3, r4
   1b66e:	aa06      	add	r2, sp, #24
   1b670:	4803      	ldr	r0, [pc, #12]	; (1b680 <l2cap_chan_add+0x84>)
   1b672:	f00d fba6 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return false;
   1b676:	4620      	mov	r0, r4
   1b678:	e7d5      	b.n	1b626 <l2cap_chan_add+0x2a>
   1b67a:	bf00      	nop
   1b67c:	00030a28 	.word	0x00030a28
   1b680:	0002eeb0 	.word	0x0002eeb0

0001b684 <bt_l2cap_connected>:
{
   1b684:	b530      	push	{r4, r5, lr}
   1b686:	b083      	sub	sp, #12
   1b688:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b68a:	4c19      	ldr	r4, [pc, #100]	; (1b6f0 <bt_l2cap_connected+0x6c>)
   1b68c:	e000      	b.n	1b690 <bt_l2cap_connected+0xc>
   1b68e:	340c      	adds	r4, #12
   1b690:	4b18      	ldr	r3, [pc, #96]	; (1b6f4 <bt_l2cap_connected+0x70>)
   1b692:	429c      	cmp	r4, r3
   1b694:	d22a      	bcs.n	1b6ec <bt_l2cap_connected+0x68>
		if (fchan->accept(conn, &chan) < 0) {
   1b696:	6863      	ldr	r3, [r4, #4]
   1b698:	a901      	add	r1, sp, #4
   1b69a:	4628      	mov	r0, r5
   1b69c:	4798      	blx	r3
   1b69e:	2800      	cmp	r0, #0
   1b6a0:	dbf5      	blt.n	1b68e <bt_l2cap_connected+0xa>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1b6a2:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1b6a4:	8823      	ldrh	r3, [r4, #0]
   1b6a6:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   1b6a8:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1b6aa:	68a2      	ldr	r2, [r4, #8]
   1b6ac:	4628      	mov	r0, r5
   1b6ae:	f7ff ffa5 	bl	1b5fc <l2cap_chan_add>
   1b6b2:	b1d8      	cbz	r0, 1b6ec <bt_l2cap_connected+0x68>
		if (chan->ops->connected) {
   1b6b4:	9801      	ldr	r0, [sp, #4]
   1b6b6:	6843      	ldr	r3, [r0, #4]
   1b6b8:	681b      	ldr	r3, [r3, #0]
   1b6ba:	b103      	cbz	r3, 1b6be <bt_l2cap_connected+0x3a>
			chan->ops->connected(chan);
   1b6bc:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1b6be:	9b01      	ldr	r3, [sp, #4]
   1b6c0:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b6c2:	f3bf 8f5b 	dmb	ish
   1b6c6:	e853 1f00 	ldrex	r1, [r3]
   1b6ca:	f041 0101 	orr.w	r1, r1, #1
   1b6ce:	e843 1200 	strex	r2, r1, [r3]
   1b6d2:	2a00      	cmp	r2, #0
   1b6d4:	d1f7      	bne.n	1b6c6 <bt_l2cap_connected+0x42>
   1b6d6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1b6da:	9801      	ldr	r0, [sp, #4]
   1b6dc:	6843      	ldr	r3, [r0, #4]
   1b6de:	69db      	ldr	r3, [r3, #28]
   1b6e0:	2b00      	cmp	r3, #0
   1b6e2:	d0d4      	beq.n	1b68e <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1b6e4:	f100 0110 	add.w	r1, r0, #16
   1b6e8:	4798      	blx	r3
   1b6ea:	e7d0      	b.n	1b68e <bt_l2cap_connected+0xa>
}
   1b6ec:	b003      	add	sp, #12
   1b6ee:	bd30      	pop	{r4, r5, pc}
   1b6f0:	0002ee24 	.word	0x0002ee24
   1b6f4:	0002ee48 	.word	0x0002ee48

0001b6f8 <l2cap_create_le_sig_pdu>:
{
   1b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6fc:	b082      	sub	sp, #8
   1b6fe:	af00      	add	r7, sp, #0
   1b700:	460c      	mov	r4, r1
   1b702:	4616      	mov	r6, r2
   1b704:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1b706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b70a:	2300      	movs	r3, #0
   1b70c:	2100      	movs	r1, #0
   1b70e:	4608      	mov	r0, r1
   1b710:	f00e fe8e 	bl	2a430 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1b714:	4680      	mov	r8, r0
   1b716:	b158      	cbz	r0, 1b730 <l2cap_create_le_sig_pdu+0x38>
	return net_buf_simple_add(&buf->b, len);
   1b718:	2104      	movs	r1, #4
   1b71a:	300c      	adds	r0, #12
   1b71c:	f010 fb40 	bl	2bda0 <net_buf_simple_add>
	hdr->code = code;
   1b720:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1b722:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1b724:	8045      	strh	r5, [r0, #2]
}
   1b726:	4640      	mov	r0, r8
   1b728:	3708      	adds	r7, #8
   1b72a:	46bd      	mov	sp, r7
   1b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1b730:	466d      	mov	r5, sp
   1b732:	b088      	sub	sp, #32
   1b734:	466b      	mov	r3, sp
   1b736:	f113 0210 	adds.w	r2, r3, #16
   1b73a:	d02f      	beq.n	1b79c <l2cap_create_le_sig_pdu+0xa4>
   1b73c:	210c      	movs	r1, #12
   1b73e:	b13a      	cbz	r2, 1b750 <l2cap_create_le_sig_pdu+0x58>
   1b740:	4608      	mov	r0, r1
   1b742:	2904      	cmp	r1, #4
   1b744:	dd01      	ble.n	1b74a <l2cap_create_le_sig_pdu+0x52>
   1b746:	4e18      	ldr	r6, [pc, #96]	; (1b7a8 <l2cap_create_le_sig_pdu+0xb0>)
   1b748:	615e      	str	r6, [r3, #20]
   1b74a:	2808      	cmp	r0, #8
   1b74c:	dd00      	ble.n	1b750 <l2cap_create_le_sig_pdu+0x58>
   1b74e:	619c      	str	r4, [r3, #24]
   1b750:	290b      	cmp	r1, #11
   1b752:	dd26      	ble.n	1b7a2 <l2cap_create_le_sig_pdu+0xaa>
   1b754:	240c      	movs	r4, #12
   1b756:	b13a      	cbz	r2, 1b768 <l2cap_create_le_sig_pdu+0x70>
   1b758:	2103      	movs	r1, #3
   1b75a:	7139      	strb	r1, [r7, #4]
   1b75c:	2100      	movs	r1, #0
   1b75e:	7179      	strb	r1, [r7, #5]
   1b760:	71b9      	strb	r1, [r7, #6]
   1b762:	71f9      	strb	r1, [r7, #7]
   1b764:	6878      	ldr	r0, [r7, #4]
   1b766:	6118      	str	r0, [r3, #16]
   1b768:	2100      	movs	r1, #0
   1b76a:	f36f 0100 	bfc	r1, #0, #1
   1b76e:	f36f 0141 	bfc	r1, #1, #1
   1b772:	f36f 0182 	bfc	r1, #2, #1
   1b776:	f36f 01c5 	bfc	r1, #3, #3
   1b77a:	2301      	movs	r3, #1
   1b77c:	f363 1188 	bfi	r1, r3, #6, #3
   1b780:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1b784:	f364 2152 	bfi	r1, r4, #9, #10
   1b788:	f36f 41de 	bfc	r1, #19, #12
   1b78c:	f36f 71df 	bfc	r1, #31, #1
   1b790:	2300      	movs	r3, #0
   1b792:	4806      	ldr	r0, [pc, #24]	; (1b7ac <l2cap_create_le_sig_pdu+0xb4>)
   1b794:	f00d fb15 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1b798:	46ad      	mov	sp, r5
		return NULL;
   1b79a:	e7c4      	b.n	1b726 <l2cap_create_le_sig_pdu+0x2e>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1b79c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b7a0:	e7cd      	b.n	1b73e <l2cap_create_le_sig_pdu+0x46>
   1b7a2:	f06f 041b 	mvn.w	r4, #27
   1b7a6:	e7d6      	b.n	1b756 <l2cap_create_le_sig_pdu+0x5e>
   1b7a8:	00030a4c 	.word	0x00030a4c
   1b7ac:	0002eeb0 	.word	0x0002eeb0

0001b7b0 <l2cap_recv>:
{
   1b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7b2:	b091      	sub	sp, #68	; 0x44
   1b7b4:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1b7b6:	8a0b      	ldrh	r3, [r1, #16]
   1b7b8:	2b03      	cmp	r3, #3
   1b7ba:	d924      	bls.n	1b806 <l2cap_recv+0x56>
   1b7bc:	4606      	mov	r6, r0
   1b7be:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1b7c0:	2104      	movs	r1, #4
   1b7c2:	f104 000c 	add.w	r0, r4, #12
   1b7c6:	f010 fb13 	bl	2bdf0 <net_buf_simple_pull_mem>
   1b7ca:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1b7cc:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   1b7ce:	8a20      	ldrh	r0, [r4, #16]
   1b7d0:	4288      	cmp	r0, r1
   1b7d2:	d069      	beq.n	1b8a8 <l2cap_recv+0xf8>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1b7d4:	466c      	mov	r4, sp
   1b7d6:	b088      	sub	sp, #32
   1b7d8:	ab02      	add	r3, sp, #8
   1b7da:	f113 0210 	adds.w	r2, r3, #16
   1b7de:	d038      	beq.n	1b852 <l2cap_recv+0xa2>
   1b7e0:	2510      	movs	r5, #16
   1b7e2:	b162      	cbz	r2, 1b7fe <l2cap_recv+0x4e>
   1b7e4:	462e      	mov	r6, r5
   1b7e6:	2d04      	cmp	r5, #4
   1b7e8:	dd03      	ble.n	1b7f2 <l2cap_recv+0x42>
   1b7ea:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 1b9a4 <l2cap_recv+0x1f4>
   1b7ee:	f8c3 c014 	str.w	ip, [r3, #20]
   1b7f2:	2e08      	cmp	r6, #8
   1b7f4:	dd00      	ble.n	1b7f8 <l2cap_recv+0x48>
   1b7f6:	6198      	str	r0, [r3, #24]
   1b7f8:	2e0c      	cmp	r6, #12
   1b7fa:	dd2d      	ble.n	1b858 <l2cap_recv+0xa8>
   1b7fc:	61d9      	str	r1, [r3, #28]
   1b7fe:	2d0f      	cmp	r5, #15
   1b800:	dd4f      	ble.n	1b8a2 <l2cap_recv+0xf2>
   1b802:	2510      	movs	r5, #16
   1b804:	e02a      	b.n	1b85c <l2cap_recv+0xac>
		LOG_ERR("Too small L2CAP signaling PDU");
   1b806:	4b64      	ldr	r3, [pc, #400]	; (1b998 <l2cap_recv+0x1e8>)
   1b808:	637b      	str	r3, [r7, #52]	; 0x34
   1b80a:	2302      	movs	r3, #2
   1b80c:	713b      	strb	r3, [r7, #4]
   1b80e:	2300      	movs	r3, #0
   1b810:	717b      	strb	r3, [r7, #5]
   1b812:	71bb      	strb	r3, [r7, #6]
   1b814:	71fb      	strb	r3, [r7, #7]
   1b816:	687a      	ldr	r2, [r7, #4]
   1b818:	633a      	str	r2, [r7, #48]	; 0x30
   1b81a:	4619      	mov	r1, r3
   1b81c:	f363 0100 	bfi	r1, r3, #0, #1
   1b820:	f363 0141 	bfi	r1, r3, #1, #1
   1b824:	f363 0182 	bfi	r1, r3, #2, #1
   1b828:	f363 01c5 	bfi	r1, r3, #3, #3
   1b82c:	2201      	movs	r2, #1
   1b82e:	f362 1188 	bfi	r1, r2, #6, #3
   1b832:	2208      	movs	r2, #8
   1b834:	f362 2152 	bfi	r1, r2, #9, #10
   1b838:	f363 41de 	bfi	r1, r3, #19, #12
   1b83c:	f363 71df 	bfi	r1, r3, #31, #1
   1b840:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1b844:	4855      	ldr	r0, [pc, #340]	; (1b99c <l2cap_recv+0x1ec>)
   1b846:	f00d fabc 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   1b84a:	2000      	movs	r0, #0
   1b84c:	373c      	adds	r7, #60	; 0x3c
   1b84e:	46bd      	mov	sp, r7
   1b850:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1b852:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1b856:	e7c4      	b.n	1b7e2 <l2cap_recv+0x32>
   1b858:	f06f 051b 	mvn.w	r5, #27
   1b85c:	b13a      	cbz	r2, 1b86e <l2cap_recv+0xbe>
   1b85e:	2104      	movs	r1, #4
   1b860:	7139      	strb	r1, [r7, #4]
   1b862:	2100      	movs	r1, #0
   1b864:	7179      	strb	r1, [r7, #5]
   1b866:	71b9      	strb	r1, [r7, #6]
   1b868:	71f9      	strb	r1, [r7, #7]
   1b86a:	6878      	ldr	r0, [r7, #4]
   1b86c:	6118      	str	r0, [r3, #16]
   1b86e:	2100      	movs	r1, #0
   1b870:	f36f 0100 	bfc	r1, #0, #1
   1b874:	f36f 0141 	bfc	r1, #1, #1
   1b878:	f36f 0182 	bfc	r1, #2, #1
   1b87c:	f36f 01c5 	bfc	r1, #3, #3
   1b880:	2301      	movs	r3, #1
   1b882:	f363 1188 	bfi	r1, r3, #6, #3
   1b886:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   1b88a:	f363 2152 	bfi	r1, r3, #9, #10
   1b88e:	f36f 41de 	bfc	r1, #19, #12
   1b892:	f36f 71df 	bfc	r1, #31, #1
   1b896:	2300      	movs	r3, #0
   1b898:	4840      	ldr	r0, [pc, #256]	; (1b99c <l2cap_recv+0x1ec>)
   1b89a:	f00d fa92 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1b89e:	46a5      	mov	sp, r4
		return 0;
   1b8a0:	e7d3      	b.n	1b84a <l2cap_recv+0x9a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1b8a2:	f06f 051b 	mvn.w	r5, #27
   1b8a6:	e7d9      	b.n	1b85c <l2cap_recv+0xac>
	if (!hdr->ident) {
   1b8a8:	786b      	ldrb	r3, [r5, #1]
   1b8aa:	b14b      	cbz	r3, 1b8c0 <l2cap_recv+0x110>
	switch (hdr->code) {
   1b8ac:	782b      	ldrb	r3, [r5, #0]
   1b8ae:	2b01      	cmp	r3, #1
   1b8b0:	d0cb      	beq.n	1b84a <l2cap_recv+0x9a>
   1b8b2:	2b13      	cmp	r3, #19
   1b8b4:	d127      	bne.n	1b906 <l2cap_recv+0x156>
		le_conn_param_rsp(l2cap, buf);
   1b8b6:	4621      	mov	r1, r4
   1b8b8:	4630      	mov	r0, r6
   1b8ba:	f7ff fe6d 	bl	1b598 <le_conn_param_rsp>
		break;
   1b8be:	e7c4      	b.n	1b84a <l2cap_recv+0x9a>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1b8c0:	4b37      	ldr	r3, [pc, #220]	; (1b9a0 <l2cap_recv+0x1f0>)
   1b8c2:	61fb      	str	r3, [r7, #28]
   1b8c4:	2302      	movs	r3, #2
   1b8c6:	713b      	strb	r3, [r7, #4]
   1b8c8:	2300      	movs	r3, #0
   1b8ca:	717b      	strb	r3, [r7, #5]
   1b8cc:	71bb      	strb	r3, [r7, #6]
   1b8ce:	71fb      	strb	r3, [r7, #7]
   1b8d0:	687a      	ldr	r2, [r7, #4]
   1b8d2:	61ba      	str	r2, [r7, #24]
   1b8d4:	4619      	mov	r1, r3
   1b8d6:	f363 0100 	bfi	r1, r3, #0, #1
   1b8da:	f363 0141 	bfi	r1, r3, #1, #1
   1b8de:	f363 0182 	bfi	r1, r3, #2, #1
   1b8e2:	f363 01c5 	bfi	r1, r3, #3, #3
   1b8e6:	2201      	movs	r2, #1
   1b8e8:	f362 1188 	bfi	r1, r2, #6, #3
   1b8ec:	2208      	movs	r2, #8
   1b8ee:	f362 2152 	bfi	r1, r2, #9, #10
   1b8f2:	f363 41de 	bfi	r1, r3, #19, #12
   1b8f6:	f363 71df 	bfi	r1, r3, #31, #1
   1b8fa:	f107 0218 	add.w	r2, r7, #24
   1b8fe:	4827      	ldr	r0, [pc, #156]	; (1b99c <l2cap_recv+0x1ec>)
   1b900:	f00d fa5f 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return 0;
   1b904:	e7a1      	b.n	1b84a <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1b906:	466c      	mov	r4, sp
   1b908:	b088      	sub	sp, #32
   1b90a:	a902      	add	r1, sp, #8
   1b90c:	f111 0210 	adds.w	r2, r1, #16
   1b910:	d010      	beq.n	1b934 <l2cap_recv+0x184>
   1b912:	200c      	movs	r0, #12
   1b914:	b152      	cbz	r2, 1b92c <l2cap_recv+0x17c>
   1b916:	4684      	mov	ip, r0
   1b918:	2804      	cmp	r0, #4
   1b91a:	dd03      	ble.n	1b924 <l2cap_recv+0x174>
   1b91c:	f8df e088 	ldr.w	lr, [pc, #136]	; 1b9a8 <l2cap_recv+0x1f8>
   1b920:	f8c1 e014 	str.w	lr, [r1, #20]
   1b924:	f1bc 0f08 	cmp.w	ip, #8
   1b928:	dd07      	ble.n	1b93a <l2cap_recv+0x18a>
   1b92a:	618b      	str	r3, [r1, #24]
   1b92c:	280b      	cmp	r0, #11
   1b92e:	dd30      	ble.n	1b992 <l2cap_recv+0x1e2>
   1b930:	230c      	movs	r3, #12
   1b932:	e004      	b.n	1b93e <l2cap_recv+0x18e>
   1b934:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b938:	e7ec      	b.n	1b914 <l2cap_recv+0x164>
   1b93a:	f06f 031b 	mvn.w	r3, #27
   1b93e:	b13a      	cbz	r2, 1b950 <l2cap_recv+0x1a0>
   1b940:	2003      	movs	r0, #3
   1b942:	7138      	strb	r0, [r7, #4]
   1b944:	2000      	movs	r0, #0
   1b946:	7178      	strb	r0, [r7, #5]
   1b948:	71b8      	strb	r0, [r7, #6]
   1b94a:	71f8      	strb	r0, [r7, #7]
   1b94c:	6878      	ldr	r0, [r7, #4]
   1b94e:	6108      	str	r0, [r1, #16]
   1b950:	2100      	movs	r1, #0
   1b952:	f36f 0100 	bfc	r1, #0, #1
   1b956:	f36f 0141 	bfc	r1, #1, #1
   1b95a:	f36f 0182 	bfc	r1, #2, #1
   1b95e:	f36f 01c5 	bfc	r1, #3, #3
   1b962:	2002      	movs	r0, #2
   1b964:	f360 1188 	bfi	r1, r0, #6, #3
   1b968:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1b96c:	f363 2152 	bfi	r1, r3, #9, #10
   1b970:	f36f 41de 	bfc	r1, #19, #12
   1b974:	f36f 71df 	bfc	r1, #31, #1
   1b978:	2300      	movs	r3, #0
   1b97a:	4808      	ldr	r0, [pc, #32]	; (1b99c <l2cap_recv+0x1ec>)
   1b97c:	f00d fa21 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1b980:	46a5      	mov	sp, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1b982:	7869      	ldrb	r1, [r5, #1]
   1b984:	6830      	ldr	r0, [r6, #0]
   1b986:	2200      	movs	r2, #0
   1b988:	9200      	str	r2, [sp, #0]
   1b98a:	4613      	mov	r3, r2
   1b98c:	f00e fd78 	bl	2a480 <l2cap_send_reject>
		break;
   1b990:	e75b      	b.n	1b84a <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1b992:	f06f 031b 	mvn.w	r3, #27
   1b996:	e7d2      	b.n	1b93e <l2cap_recv+0x18e>
   1b998:	00030a74 	.word	0x00030a74
   1b99c:	0002eeb0 	.word	0x0002eeb0
   1b9a0:	00030ab8 	.word	0x00030ab8
   1b9a4:	00030a94 	.word	0x00030a94
   1b9a8:	00030adc 	.word	0x00030adc

0001b9ac <bt_l2cap_recv>:
{
   1b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9b0:	b088      	sub	sp, #32
   1b9b2:	af00      	add	r7, sp, #0
   1b9b4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1b9b6:	8a0b      	ldrh	r3, [r1, #16]
   1b9b8:	2b03      	cmp	r3, #3
   1b9ba:	d915      	bls.n	1b9e8 <bt_l2cap_recv+0x3c>
   1b9bc:	4606      	mov	r6, r0
   1b9be:	4615      	mov	r5, r2
   1b9c0:	2104      	movs	r1, #4
   1b9c2:	f104 000c 	add.w	r0, r4, #12
   1b9c6:	f010 fa13 	bl	2bdf0 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1b9ca:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1b9ce:	4641      	mov	r1, r8
   1b9d0:	4630      	mov	r0, r6
   1b9d2:	f00e fd79 	bl	2a4c8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b9d6:	b368      	cbz	r0, 1ba34 <bt_l2cap_recv+0x88>
	l2cap_chan_recv(chan, buf, complete);
   1b9d8:	462a      	mov	r2, r5
   1b9da:	4621      	mov	r1, r4
   1b9dc:	f00e fce0 	bl	2a3a0 <l2cap_chan_recv>
}
   1b9e0:	3720      	adds	r7, #32
   1b9e2:	46bd      	mov	sp, r7
   1b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Too small L2CAP PDU received");
   1b9e8:	4b34      	ldr	r3, [pc, #208]	; (1babc <bt_l2cap_recv+0x110>)
   1b9ea:	61fb      	str	r3, [r7, #28]
   1b9ec:	2302      	movs	r3, #2
   1b9ee:	713b      	strb	r3, [r7, #4]
   1b9f0:	2300      	movs	r3, #0
   1b9f2:	717b      	strb	r3, [r7, #5]
   1b9f4:	71bb      	strb	r3, [r7, #6]
   1b9f6:	71fb      	strb	r3, [r7, #7]
   1b9f8:	687a      	ldr	r2, [r7, #4]
   1b9fa:	61ba      	str	r2, [r7, #24]
   1b9fc:	4619      	mov	r1, r3
   1b9fe:	f363 0100 	bfi	r1, r3, #0, #1
   1ba02:	f363 0141 	bfi	r1, r3, #1, #1
   1ba06:	f363 0182 	bfi	r1, r3, #2, #1
   1ba0a:	f363 01c5 	bfi	r1, r3, #3, #3
   1ba0e:	2201      	movs	r2, #1
   1ba10:	f362 1188 	bfi	r1, r2, #6, #3
   1ba14:	2208      	movs	r2, #8
   1ba16:	f362 2152 	bfi	r1, r2, #9, #10
   1ba1a:	f363 41de 	bfi	r1, r3, #19, #12
   1ba1e:	f363 71df 	bfi	r1, r3, #31, #1
   1ba22:	f107 0218 	add.w	r2, r7, #24
   1ba26:	4826      	ldr	r0, [pc, #152]	; (1bac0 <bt_l2cap_recv+0x114>)
   1ba28:	f00d f9cb 	bl	28dc2 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1ba2c:	4620      	mov	r0, r4
   1ba2e:	f010 f970 	bl	2bd12 <net_buf_unref>
		return;
   1ba32:	e7d5      	b.n	1b9e0 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1ba34:	466d      	mov	r5, sp
   1ba36:	b088      	sub	sp, #32
   1ba38:	466b      	mov	r3, sp
   1ba3a:	f113 0210 	adds.w	r2, r3, #16
   1ba3e:	d00e      	beq.n	1ba5e <bt_l2cap_recv+0xb2>
   1ba40:	210c      	movs	r1, #12
   1ba42:	b142      	cbz	r2, 1ba56 <bt_l2cap_recv+0xaa>
   1ba44:	4608      	mov	r0, r1
   1ba46:	2904      	cmp	r1, #4
   1ba48:	dd01      	ble.n	1ba4e <bt_l2cap_recv+0xa2>
   1ba4a:	4e1e      	ldr	r6, [pc, #120]	; (1bac4 <bt_l2cap_recv+0x118>)
   1ba4c:	615e      	str	r6, [r3, #20]
   1ba4e:	2808      	cmp	r0, #8
   1ba50:	dd08      	ble.n	1ba64 <bt_l2cap_recv+0xb8>
   1ba52:	f8c3 8018 	str.w	r8, [r3, #24]
   1ba56:	290b      	cmp	r1, #11
   1ba58:	dd2c      	ble.n	1bab4 <bt_l2cap_recv+0x108>
   1ba5a:	260c      	movs	r6, #12
   1ba5c:	e004      	b.n	1ba68 <bt_l2cap_recv+0xbc>
   1ba5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ba62:	e7ee      	b.n	1ba42 <bt_l2cap_recv+0x96>
   1ba64:	f06f 061b 	mvn.w	r6, #27
   1ba68:	b13a      	cbz	r2, 1ba7a <bt_l2cap_recv+0xce>
   1ba6a:	2103      	movs	r1, #3
   1ba6c:	7139      	strb	r1, [r7, #4]
   1ba6e:	2100      	movs	r1, #0
   1ba70:	7179      	strb	r1, [r7, #5]
   1ba72:	71b9      	strb	r1, [r7, #6]
   1ba74:	71f9      	strb	r1, [r7, #7]
   1ba76:	6878      	ldr	r0, [r7, #4]
   1ba78:	6118      	str	r0, [r3, #16]
   1ba7a:	2100      	movs	r1, #0
   1ba7c:	f36f 0100 	bfc	r1, #0, #1
   1ba80:	f36f 0141 	bfc	r1, #1, #1
   1ba84:	f36f 0182 	bfc	r1, #2, #1
   1ba88:	f36f 01c5 	bfc	r1, #3, #3
   1ba8c:	2302      	movs	r3, #2
   1ba8e:	f363 1188 	bfi	r1, r3, #6, #3
   1ba92:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1ba96:	f363 2152 	bfi	r1, r3, #9, #10
   1ba9a:	f36f 41de 	bfc	r1, #19, #12
   1ba9e:	f36f 71df 	bfc	r1, #31, #1
   1baa2:	2300      	movs	r3, #0
   1baa4:	4806      	ldr	r0, [pc, #24]	; (1bac0 <bt_l2cap_recv+0x114>)
   1baa6:	f00d f98c 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1baaa:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1baac:	4620      	mov	r0, r4
   1baae:	f010 f930 	bl	2bd12 <net_buf_unref>
		return;
   1bab2:	e795      	b.n	1b9e0 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1bab4:	f06f 061b 	mvn.w	r6, #27
   1bab8:	e7d6      	b.n	1ba68 <bt_l2cap_recv+0xbc>
   1baba:	bf00      	nop
   1babc:	00030b04 	.word	0x00030b04
   1bac0:	0002eeb0 	.word	0x0002eeb0
   1bac4:	00030b24 	.word	0x00030b24

0001bac8 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1bac8:	2852      	cmp	r0, #82	; 0x52
   1baca:	d833      	bhi.n	1bb34 <att_op_get_type+0x6c>
   1bacc:	281b      	cmp	r0, #27
   1bace:	d321      	bcc.n	1bb14 <att_op_get_type+0x4c>
   1bad0:	f1a0 031b 	sub.w	r3, r0, #27
   1bad4:	2b37      	cmp	r3, #55	; 0x37
   1bad6:	d82f      	bhi.n	1bb38 <att_op_get_type+0x70>
   1bad8:	e8df f003 	tbb	[pc, r3]
   1badc:	3b392e37 	.word	0x3b392e37
   1bae0:	2e352a2e 	.word	0x2e352a2e
   1bae4:	2e2e2e37 	.word	0x2e2e2e37
   1bae8:	2e2e2e2e 	.word	0x2e2e2e2e
   1baec:	2e2e2e2e 	.word	0x2e2e2e2e
   1baf0:	2e2e2e2e 	.word	0x2e2e2e2e
   1baf4:	2e2e2e2e 	.word	0x2e2e2e2e
   1baf8:	2e2e2e2e 	.word	0x2e2e2e2e
   1bafc:	2e2e2e2e 	.word	0x2e2e2e2e
   1bb00:	2e2e2e2e 	.word	0x2e2e2e2e
   1bb04:	2e2e2e2e 	.word	0x2e2e2e2e
   1bb08:	2e2e2e2e 	.word	0x2e2e2e2e
   1bb0c:	2e2e2e2e 	.word	0x2e2e2e2e
   1bb10:	332e2e2e 	.word	0x332e2e2e
   1bb14:	2819      	cmp	r0, #25
   1bb16:	d80f      	bhi.n	1bb38 <att_op_get_type+0x70>
   1bb18:	b243      	sxtb	r3, r0
   1bb1a:	b16b      	cbz	r3, 1bb38 <att_op_get_type+0x70>
   1bb1c:	2301      	movs	r3, #1
   1bb1e:	4083      	lsls	r3, r0
   1bb20:	4a10      	ldr	r2, [pc, #64]	; (1bb64 <att_op_get_type+0x9c>)
   1bb22:	401a      	ands	r2, r3
   1bb24:	b9ba      	cbnz	r2, 1bb56 <att_op_get_type+0x8e>
   1bb26:	4a10      	ldr	r2, [pc, #64]	; (1bb68 <att_op_get_type+0xa0>)
   1bb28:	401a      	ands	r2, r3
   1bb2a:	b12a      	cbz	r2, 1bb38 <att_op_get_type+0x70>
   1bb2c:	2001      	movs	r0, #1
   1bb2e:	4770      	bx	lr
   1bb30:	2001      	movs	r0, #1
   1bb32:	4770      	bx	lr
   1bb34:	28d2      	cmp	r0, #210	; 0xd2
   1bb36:	d010      	beq.n	1bb5a <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   1bb38:	f010 0f40 	tst.w	r0, #64	; 0x40
   1bb3c:	d10f      	bne.n	1bb5e <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1bb3e:	2006      	movs	r0, #6
   1bb40:	4770      	bx	lr
		return ATT_COMMAND;
   1bb42:	2000      	movs	r0, #0
   1bb44:	4770      	bx	lr
		return ATT_RESPONSE;
   1bb46:	2002      	movs	r0, #2
   1bb48:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1bb4a:	2003      	movs	r0, #3
   1bb4c:	4770      	bx	lr
		return ATT_INDICATION;
   1bb4e:	2005      	movs	r0, #5
   1bb50:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1bb52:	2004      	movs	r0, #4
   1bb54:	4770      	bx	lr
		return ATT_RESPONSE;
   1bb56:	2002      	movs	r0, #2
   1bb58:	4770      	bx	lr
		return ATT_COMMAND;
   1bb5a:	2000      	movs	r0, #0
   1bb5c:	4770      	bx	lr
		return ATT_COMMAND;
   1bb5e:	2000      	movs	r0, #0
}
   1bb60:	4770      	bx	lr
   1bb62:	bf00      	nop
   1bb64:	028aaaaa 	.word	0x028aaaaa
   1bb68:	01455554 	.word	0x01455554

0001bb6c <att_cb>:
{
   1bb6c:	b508      	push	{r3, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1bb6e:	68c3      	ldr	r3, [r0, #12]
   1bb70:	7818      	ldrb	r0, [r3, #0]
   1bb72:	f7ff ffa9 	bl	1bac8 <att_op_get_type>
	switch (op_type) {
   1bb76:	2805      	cmp	r0, #5
   1bb78:	d80a      	bhi.n	1bb90 <att_cb+0x24>
   1bb7a:	e8df f000 	tbb	[pc, r0]
   1bb7e:	0507      	.short	0x0507
   1bb80:	050b0703 	.word	0x050b0703
   1bb84:	4804      	ldr	r0, [pc, #16]	; (1bb98 <att_cb+0x2c>)
   1bb86:	e000      	b.n	1bb8a <att_cb+0x1e>
		return att_req_sent;
   1bb88:	4804      	ldr	r0, [pc, #16]	; (1bb9c <att_cb+0x30>)
}
   1bb8a:	bd08      	pop	{r3, pc}
		return att_tx_complete;
   1bb8c:	4804      	ldr	r0, [pc, #16]	; (1bba0 <att_cb+0x34>)
   1bb8e:	e7fc      	b.n	1bb8a <att_cb+0x1e>
	return att_unknown;
   1bb90:	4804      	ldr	r0, [pc, #16]	; (1bba4 <att_cb+0x38>)
   1bb92:	e7fa      	b.n	1bb8a <att_cb+0x1e>
		return att_cfm_sent;
   1bb94:	4804      	ldr	r0, [pc, #16]	; (1bba8 <att_cb+0x3c>)
   1bb96:	e7f8      	b.n	1bb8a <att_cb+0x1e>
   1bb98:	0002ade9 	.word	0x0002ade9
   1bb9c:	0002adb1 	.word	0x0002adb1
   1bba0:	0002ad95 	.word	0x0002ad95
   1bba4:	0002ad79 	.word	0x0002ad79
   1bba8:	0002adcd 	.word	0x0002adcd

0001bbac <tx_meta_data_alloc>:
{
   1bbac:	b508      	push	{r3, lr}
   1bbae:	4602      	mov	r2, r0
   1bbb0:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   1bbb2:	4802      	ldr	r0, [pc, #8]	; (1bbbc <tx_meta_data_alloc+0x10>)
   1bbb4:	f006 fb2a 	bl	2220c <z_impl_k_queue_get>
}
   1bbb8:	bd08      	pop	{r3, pc}
   1bbba:	bf00      	nop
   1bbbc:	20000c34 	.word	0x20000c34

0001bbc0 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1bbc0:	b510      	push	{r4, lr}
   1bbc2:	b08e      	sub	sp, #56	; 0x38
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1bbc4:	7a83      	ldrb	r3, [r0, #10]
   1bbc6:	2b07      	cmp	r3, #7
   1bbc8:	d109      	bne.n	1bbde <att_get+0x1e>
		LOG_WRN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1bbca:	2104      	movs	r1, #4
   1bbcc:	f00e fc7c 	bl	2a4c8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1bbd0:	4604      	mov	r4, r0
   1bbd2:	b350      	cbz	r0, 1bc2a <att_get+0x6a>

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
   1bbd4:	f850 4c04 	ldr.w	r4, [r0, #-4]
}
   1bbd8:	4620      	mov	r0, r4
   1bbda:	b00e      	add	sp, #56	; 0x38
   1bbdc:	bd10      	pop	{r4, pc}
		LOG_WRN("Not connected");
   1bbde:	4b26      	ldr	r3, [pc, #152]	; (1bc78 <att_get+0xb8>)
   1bbe0:	930d      	str	r3, [sp, #52]	; 0x34
   1bbe2:	2302      	movs	r3, #2
   1bbe4:	f88d 3004 	strb.w	r3, [sp, #4]
   1bbe8:	2400      	movs	r4, #0
   1bbea:	f88d 4005 	strb.w	r4, [sp, #5]
   1bbee:	f88d 4006 	strb.w	r4, [sp, #6]
   1bbf2:	f88d 4007 	strb.w	r4, [sp, #7]
   1bbf6:	9a01      	ldr	r2, [sp, #4]
   1bbf8:	920c      	str	r2, [sp, #48]	; 0x30
   1bbfa:	4621      	mov	r1, r4
   1bbfc:	f364 0100 	bfi	r1, r4, #0, #1
   1bc00:	f364 0141 	bfi	r1, r4, #1, #1
   1bc04:	f364 0182 	bfi	r1, r4, #2, #1
   1bc08:	f364 01c5 	bfi	r1, r4, #3, #3
   1bc0c:	f363 1188 	bfi	r1, r3, #6, #3
   1bc10:	2308      	movs	r3, #8
   1bc12:	f363 2152 	bfi	r1, r3, #9, #10
   1bc16:	f364 41de 	bfi	r1, r4, #19, #12
   1bc1a:	f364 71df 	bfi	r1, r4, #31, #1
   1bc1e:	4623      	mov	r3, r4
   1bc20:	aa0c      	add	r2, sp, #48	; 0x30
   1bc22:	4816      	ldr	r0, [pc, #88]	; (1bc7c <att_get+0xbc>)
   1bc24:	f00d f8cd 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return NULL;
   1bc28:	e7d6      	b.n	1bbd8 <att_get+0x18>
		LOG_ERR("Unable to find ATT channel");
   1bc2a:	4b15      	ldr	r3, [pc, #84]	; (1bc80 <att_get+0xc0>)
   1bc2c:	9307      	str	r3, [sp, #28]
   1bc2e:	2302      	movs	r3, #2
   1bc30:	f88d 3004 	strb.w	r3, [sp, #4]
   1bc34:	2300      	movs	r3, #0
   1bc36:	f88d 3005 	strb.w	r3, [sp, #5]
   1bc3a:	f88d 3006 	strb.w	r3, [sp, #6]
   1bc3e:	f88d 3007 	strb.w	r3, [sp, #7]
   1bc42:	9a01      	ldr	r2, [sp, #4]
   1bc44:	9206      	str	r2, [sp, #24]
   1bc46:	4619      	mov	r1, r3
   1bc48:	f363 0100 	bfi	r1, r3, #0, #1
   1bc4c:	f363 0141 	bfi	r1, r3, #1, #1
   1bc50:	f363 0182 	bfi	r1, r3, #2, #1
   1bc54:	f363 01c5 	bfi	r1, r3, #3, #3
   1bc58:	2201      	movs	r2, #1
   1bc5a:	f362 1188 	bfi	r1, r2, #6, #3
   1bc5e:	2208      	movs	r2, #8
   1bc60:	f362 2152 	bfi	r1, r2, #9, #10
   1bc64:	f363 41de 	bfi	r1, r3, #19, #12
   1bc68:	f363 71df 	bfi	r1, r3, #31, #1
   1bc6c:	aa06      	add	r2, sp, #24
   1bc6e:	4803      	ldr	r0, [pc, #12]	; (1bc7c <att_get+0xbc>)
   1bc70:	f00d f8a7 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return NULL;
   1bc74:	e7b0      	b.n	1bbd8 <att_get+0x18>
   1bc76:	bf00      	nop
   1bc78:	00030b84 	.word	0x00030b84
   1bc7c:	0002ee80 	.word	0x0002ee80
   1bc80:	00030b94 	.word	0x00030b94

0001bc84 <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1bc84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc86:	b083      	sub	sp, #12
   1bc88:	af00      	add	r7, sp, #0
   1bc8a:	4605      	mov	r5, r0
   1bc8c:	460e      	mov	r6, r1
	return list->head;
   1bc8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bc90:	b103      	cbz	r3, 1bc94 <att_chan_new+0x10>
   1bc92:	3be0      	subs	r3, #224	; 0xe0
   1bc94:	607b      	str	r3, [r7, #4]
	int quota = 0;
   1bc96:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bc98:	e002      	b.n	1bca0 <att_chan_new+0x1c>
		if (chan->att == att) {
			quota++;
   1bc9a:	3201      	adds	r2, #1
   1bc9c:	e005      	b.n	1bcaa <att_chan_new+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bc9e:	607b      	str	r3, [r7, #4]
   1bca0:	687c      	ldr	r4, [r7, #4]
   1bca2:	b16c      	cbz	r4, 1bcc0 <att_chan_new+0x3c>
		if (chan->att == att) {
   1bca4:	6823      	ldr	r3, [r4, #0]
   1bca6:	42ab      	cmp	r3, r5
   1bca8:	d0f7      	beq.n	1bc9a <att_chan_new+0x16>
		}

		if (quota == ATT_CHAN_MAX) {
   1bcaa:	2a01      	cmp	r2, #1
   1bcac:	d071      	beq.n	1bd92 <att_chan_new+0x10e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bcae:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1bcb2:	d0f4      	beq.n	1bc9e <att_chan_new+0x1a>
	return node->next;
   1bcb4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bcb8:	2b00      	cmp	r3, #0
   1bcba:	d0f0      	beq.n	1bc9e <att_chan_new+0x1a>
   1bcbc:	3be0      	subs	r3, #224	; 0xe0
   1bcbe:	e7ee      	b.n	1bc9e <att_chan_new+0x1a>
			LOG_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1bcc0:	2200      	movs	r2, #0
   1bcc2:	2300      	movs	r3, #0
   1bcc4:	1d39      	adds	r1, r7, #4
   1bcc6:	4834      	ldr	r0, [pc, #208]	; (1bd98 <att_chan_new+0x114>)
   1bcc8:	f006 f89e 	bl	21e08 <k_mem_slab_alloc>
   1bccc:	bb10      	cbnz	r0, 1bd14 <att_chan_new+0x90>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   1bcce:	687c      	ldr	r4, [r7, #4]
   1bcd0:	22e8      	movs	r2, #232	; 0xe8
   1bcd2:	2100      	movs	r1, #0
   1bcd4:	4620      	mov	r0, r4
   1bcd6:	f012 fb06 	bl	2e2e6 <memset>
	chan->chan.chan.ops = &ops;
   1bcda:	4b30      	ldr	r3, [pc, #192]	; (1bd9c <att_chan_new+0x118>)
   1bcdc:	60a3      	str	r3, [r4, #8]
	k_fifo_init(&chan->tx_queue);
   1bcde:	f104 0098 	add.w	r0, r4, #152	; 0x98
	z_impl_k_queue_init(queue);
   1bce2:	f011 fcf1 	bl	2d6c8 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1bce6:	687b      	ldr	r3, [r7, #4]
   1bce8:	3390      	adds	r3, #144	; 0x90
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bcea:	f3bf 8f5b 	dmb	ish
   1bcee:	e853 2f00 	ldrex	r2, [r3]
   1bcf2:	e843 6100 	strex	r1, r6, [r3]
   1bcf6:	2900      	cmp	r1, #0
   1bcf8:	d1f9      	bne.n	1bcee <att_chan_new+0x6a>
   1bcfa:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1bcfe:	687b      	ldr	r3, [r7, #4]
   1bd00:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   1bd02:	6879      	ldr	r1, [r7, #4]
   1bd04:	4628      	mov	r0, r5
   1bd06:	f00e fc90 	bl	2a62a <att_chan_attach>

	return chan;
   1bd0a:	687c      	ldr	r4, [r7, #4]
}
   1bd0c:	4620      	mov	r0, r4
   1bd0e:	370c      	adds	r7, #12
   1bd10:	46bd      	mov	sp, r7
   1bd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1bd14:	6828      	ldr	r0, [r5, #0]
   1bd16:	466e      	mov	r6, sp
   1bd18:	b088      	sub	sp, #32
   1bd1a:	466b      	mov	r3, sp
   1bd1c:	f113 0210 	adds.w	r2, r3, #16
   1bd20:	d031      	beq.n	1bd86 <att_chan_new+0x102>
   1bd22:	210c      	movs	r1, #12
   1bd24:	b14a      	cbz	r2, 1bd3a <att_chan_new+0xb6>
   1bd26:	460d      	mov	r5, r1
   1bd28:	2904      	cmp	r1, #4
   1bd2a:	dd03      	ble.n	1bd34 <att_chan_new+0xb0>
   1bd2c:	f8df c074 	ldr.w	ip, [pc, #116]	; 1bda4 <att_chan_new+0x120>
   1bd30:	f8c3 c014 	str.w	ip, [r3, #20]
   1bd34:	2d08      	cmp	r5, #8
   1bd36:	dd00      	ble.n	1bd3a <att_chan_new+0xb6>
   1bd38:	6198      	str	r0, [r3, #24]
   1bd3a:	290b      	cmp	r1, #11
   1bd3c:	dd26      	ble.n	1bd8c <att_chan_new+0x108>
   1bd3e:	250c      	movs	r5, #12
   1bd40:	b13a      	cbz	r2, 1bd52 <att_chan_new+0xce>
   1bd42:	2103      	movs	r1, #3
   1bd44:	7039      	strb	r1, [r7, #0]
   1bd46:	2100      	movs	r1, #0
   1bd48:	7079      	strb	r1, [r7, #1]
   1bd4a:	70b9      	strb	r1, [r7, #2]
   1bd4c:	70f9      	strb	r1, [r7, #3]
   1bd4e:	6838      	ldr	r0, [r7, #0]
   1bd50:	6118      	str	r0, [r3, #16]
   1bd52:	2100      	movs	r1, #0
   1bd54:	f36f 0100 	bfc	r1, #0, #1
   1bd58:	f36f 0141 	bfc	r1, #1, #1
   1bd5c:	f36f 0182 	bfc	r1, #2, #1
   1bd60:	f36f 01c5 	bfc	r1, #3, #3
   1bd64:	2302      	movs	r3, #2
   1bd66:	f363 1188 	bfi	r1, r3, #6, #3
   1bd6a:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1bd6e:	f363 2152 	bfi	r1, r3, #9, #10
   1bd72:	f36f 41de 	bfc	r1, #19, #12
   1bd76:	f36f 71df 	bfc	r1, #31, #1
   1bd7a:	2300      	movs	r3, #0
   1bd7c:	4808      	ldr	r0, [pc, #32]	; (1bda0 <att_chan_new+0x11c>)
   1bd7e:	f00d f820 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1bd82:	46b5      	mov	sp, r6
		return NULL;
   1bd84:	e7c2      	b.n	1bd0c <att_chan_new+0x88>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1bd86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bd8a:	e7cb      	b.n	1bd24 <att_chan_new+0xa0>
   1bd8c:	f06f 051b 	mvn.w	r5, #27
   1bd90:	e7d6      	b.n	1bd40 <att_chan_new+0xbc>
			return NULL;
   1bd92:	2400      	movs	r4, #0
   1bd94:	e7ba      	b.n	1bd0c <att_chan_new+0x88>
   1bd96:	bf00      	nop
   1bd98:	20000b30 	.word	0x20000b30
   1bd9c:	200006e4 	.word	0x200006e4
   1bda0:	0002ee80 	.word	0x0002ee80
   1bda4:	00030bb0 	.word	0x00030bb0

0001bda8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1bda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdac:	b082      	sub	sp, #8
   1bdae:	af00      	add	r7, sp, #0
   1bdb0:	4680      	mov	r8, r0
   1bdb2:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1bdb4:	2200      	movs	r2, #0
   1bdb6:	2300      	movs	r3, #0
   1bdb8:	1d39      	adds	r1, r7, #4
   1bdba:	4832      	ldr	r0, [pc, #200]	; (1be84 <bt_att_accept+0xdc>)
   1bdbc:	f006 f824 	bl	21e08 <k_mem_slab_alloc>
   1bdc0:	b9f0      	cbnz	r0, 1be00 <bt_att_accept+0x58>
   1bdc2:	4605      	mov	r5, r0
	return z_impl_z_current_get();
   1bdc4:	f006 ffa8 	bl	22d18 <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   1bdc8:	4b2f      	ldr	r3, [pc, #188]	; (1be88 <bt_att_accept+0xe0>)
   1bdca:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   1bdcc:	687e      	ldr	r6, [r7, #4]
   1bdce:	222c      	movs	r2, #44	; 0x2c
   1bdd0:	2100      	movs	r1, #0
   1bdd2:	4630      	mov	r0, r6
   1bdd4:	f012 fa87 	bl	2e2e6 <memset>
	att->conn = conn;
   1bdd8:	f8c6 8000 	str.w	r8, [r6]
	sys_slist_init(&att->reqs);
   1bddc:	6878      	ldr	r0, [r7, #4]
	list->head = NULL;
   1bdde:	2100      	movs	r1, #0
   1bde0:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1bde2:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1bde4:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   1bde6:	6281      	str	r1, [r0, #40]	; 0x28
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   1bde8:	f7ff ff4c 	bl	1bc84 <att_chan_new>
	if (!chan) {
   1bdec:	4603      	mov	r3, r0
   1bdee:	2800      	cmp	r0, #0
   1bdf0:	d045      	beq.n	1be7e <bt_att_accept+0xd6>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1bdf2:	3304      	adds	r3, #4
   1bdf4:	6023      	str	r3, [r4, #0]

	return 0;
}
   1bdf6:	4628      	mov	r0, r5
   1bdf8:	3708      	adds	r7, #8
   1bdfa:	46bd      	mov	sp, r7
   1bdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No available ATT context for conn %p", conn);
   1be00:	466d      	mov	r5, sp
   1be02:	b088      	sub	sp, #32
   1be04:	466b      	mov	r3, sp
   1be06:	f113 0210 	adds.w	r2, r3, #16
   1be0a:	d032      	beq.n	1be72 <bt_att_accept+0xca>
   1be0c:	210c      	movs	r1, #12
   1be0e:	b142      	cbz	r2, 1be22 <bt_att_accept+0x7a>
   1be10:	4608      	mov	r0, r1
   1be12:	2904      	cmp	r1, #4
   1be14:	dd01      	ble.n	1be1a <bt_att_accept+0x72>
   1be16:	4c1d      	ldr	r4, [pc, #116]	; (1be8c <bt_att_accept+0xe4>)
   1be18:	615c      	str	r4, [r3, #20]
   1be1a:	2808      	cmp	r0, #8
   1be1c:	dd01      	ble.n	1be22 <bt_att_accept+0x7a>
   1be1e:	f8c3 8018 	str.w	r8, [r3, #24]
   1be22:	290b      	cmp	r1, #11
   1be24:	dd28      	ble.n	1be78 <bt_att_accept+0xd0>
   1be26:	240c      	movs	r4, #12
   1be28:	b13a      	cbz	r2, 1be3a <bt_att_accept+0x92>
   1be2a:	2103      	movs	r1, #3
   1be2c:	7039      	strb	r1, [r7, #0]
   1be2e:	2100      	movs	r1, #0
   1be30:	7079      	strb	r1, [r7, #1]
   1be32:	70b9      	strb	r1, [r7, #2]
   1be34:	70f9      	strb	r1, [r7, #3]
   1be36:	6838      	ldr	r0, [r7, #0]
   1be38:	6118      	str	r0, [r3, #16]
   1be3a:	2100      	movs	r1, #0
   1be3c:	f36f 0100 	bfc	r1, #0, #1
   1be40:	f36f 0141 	bfc	r1, #1, #1
   1be44:	f36f 0182 	bfc	r1, #2, #1
   1be48:	f36f 01c5 	bfc	r1, #3, #3
   1be4c:	2301      	movs	r3, #1
   1be4e:	f363 1188 	bfi	r1, r3, #6, #3
   1be52:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1be56:	f364 2152 	bfi	r1, r4, #9, #10
   1be5a:	f36f 41de 	bfc	r1, #19, #12
   1be5e:	f36f 71df 	bfc	r1, #31, #1
   1be62:	2300      	movs	r3, #0
   1be64:	480a      	ldr	r0, [pc, #40]	; (1be90 <bt_att_accept+0xe8>)
   1be66:	f00c ffac 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1be6a:	46ad      	mov	sp, r5
		return -ENOMEM;
   1be6c:	f06f 050b 	mvn.w	r5, #11
   1be70:	e7c1      	b.n	1bdf6 <bt_att_accept+0x4e>
		LOG_ERR("No available ATT context for conn %p", conn);
   1be72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1be76:	e7ca      	b.n	1be0e <bt_att_accept+0x66>
   1be78:	f06f 041b 	mvn.w	r4, #27
   1be7c:	e7d4      	b.n	1be28 <bt_att_accept+0x80>
		return -ENOMEM;
   1be7e:	f06f 050b 	mvn.w	r5, #11
   1be82:	e7b8      	b.n	1bdf6 <bt_att_accept+0x4e>
   1be84:	20000b14 	.word	0x20000b14
   1be88:	20003860 	.word	0x20003860
   1be8c:	00030bd8 	.word	0x00030bd8
   1be90:	0002ee80 	.word	0x0002ee80

0001be94 <bt_att_released>:
{
   1be94:	b500      	push	{lr}
   1be96:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1be98:	3804      	subs	r0, #4
   1be9a:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1be9c:	a901      	add	r1, sp, #4
   1be9e:	4803      	ldr	r0, [pc, #12]	; (1beac <bt_att_released+0x18>)
   1bea0:	f011 fadf 	bl	2d462 <k_mem_slab_free>
}
   1bea4:	b003      	add	sp, #12
   1bea6:	f85d fb04 	ldr.w	pc, [sp], #4
   1beaa:	bf00      	nop
   1beac:	20000b30 	.word	0x20000b30

0001beb0 <tx_meta_data_free>:
{
   1beb0:	b508      	push	{r3, lr}
   1beb2:	4601      	mov	r1, r0
   1beb4:	2300      	movs	r3, #0
   1beb6:	6003      	str	r3, [r0, #0]
   1beb8:	6043      	str	r3, [r0, #4]
   1beba:	6083      	str	r3, [r0, #8]
   1bebc:	60c3      	str	r3, [r0, #12]
   1bebe:	6103      	str	r3, [r0, #16]
	k_fifo_put(&free_att_tx_meta_data, data);
   1bec0:	4801      	ldr	r0, [pc, #4]	; (1bec8 <tx_meta_data_free+0x18>)
   1bec2:	f011 fc0d 	bl	2d6e0 <k_queue_append>
}
   1bec6:	bd08      	pop	{r3, pc}
   1bec8:	20000c34 	.word	0x20000c34

0001becc <chan_send>:
{
   1becc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bed0:	b08b      	sub	sp, #44	; 0x2c
   1bed2:	4605      	mov	r5, r0
   1bed4:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1bed6:	698f      	ldr	r7, [r1, #24]
	hdr = (void *)buf->data;
   1bed8:	68ce      	ldr	r6, [r1, #12]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1beda:	2102      	movs	r1, #2
   1bedc:	3090      	adds	r0, #144	; 0x90
   1bede:	f00e fbb8 	bl	2a652 <atomic_test_bit>
   1bee2:	2800      	cmp	r0, #0
   1bee4:	d05a      	beq.n	1bf9c <chan_send+0xd0>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1bee6:	7833      	ldrb	r3, [r6, #0]
   1bee8:	2bd2      	cmp	r3, #210	; 0xd2
   1beea:	d023      	beq.n	1bf34 <chan_send+0x68>
	state->offset = net_buf_simple_headroom(buf);
   1beec:	f104 000c 	add.w	r0, r4, #12
   1bef0:	f00f ff8e 	bl	2be10 <net_buf_simple_headroom>
   1bef4:	4606      	mov	r6, r0
   1bef6:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1befa:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1befe:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
   1bf02:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1bf04:	682b      	ldr	r3, [r5, #0]
   1bf06:	681d      	ldr	r5, [r3, #0]
   1bf08:	4620      	mov	r0, r4
   1bf0a:	f7ff fe2f 	bl	1bb6c <att_cb>
   1bf0e:	4603      	mov	r3, r0
   1bf10:	9700      	str	r7, [sp, #0]
   1bf12:	4622      	mov	r2, r4
   1bf14:	2104      	movs	r1, #4
   1bf16:	4628      	mov	r0, r5
   1bf18:	f00e fa8f 	bl	2a43a <bt_l2cap_send_cb>
	if (err) {
   1bf1c:	4681      	mov	r9, r0
   1bf1e:	b128      	cbz	r0, 1bf2c <chan_send+0x60>
	buf->data = buf->__buf + state->offset;
   1bf20:	6963      	ldr	r3, [r4, #20]
   1bf22:	fa13 f686 	uxtah	r6, r3, r6
   1bf26:	60e6      	str	r6, [r4, #12]
	buf->len = state->len;
   1bf28:	f8a4 8010 	strh.w	r8, [r4, #16]
}
   1bf2c:	4648      	mov	r0, r9
   1bf2e:	b00b      	add	sp, #44	; 0x2c
   1bf30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1bf34:	682b      	ldr	r3, [r5, #0]
   1bf36:	4621      	mov	r1, r4
   1bf38:	6818      	ldr	r0, [r3, #0]
   1bf3a:	f00f fdb9 	bl	2bab0 <bt_smp_sign>
		if (err) {
   1bf3e:	4681      	mov	r9, r0
   1bf40:	2800      	cmp	r0, #0
   1bf42:	d0d3      	beq.n	1beec <chan_send+0x20>
			LOG_ERR("Error signing data");
   1bf44:	4b17      	ldr	r3, [pc, #92]	; (1bfa4 <chan_send+0xd8>)
   1bf46:	9309      	str	r3, [sp, #36]	; 0x24
   1bf48:	2302      	movs	r3, #2
   1bf4a:	f88d 3008 	strb.w	r3, [sp, #8]
   1bf4e:	2300      	movs	r3, #0
   1bf50:	f88d 3009 	strb.w	r3, [sp, #9]
   1bf54:	f88d 300a 	strb.w	r3, [sp, #10]
   1bf58:	f88d 300b 	strb.w	r3, [sp, #11]
   1bf5c:	9a02      	ldr	r2, [sp, #8]
   1bf5e:	9208      	str	r2, [sp, #32]
   1bf60:	4619      	mov	r1, r3
   1bf62:	f363 0100 	bfi	r1, r3, #0, #1
   1bf66:	f363 0141 	bfi	r1, r3, #1, #1
   1bf6a:	f363 0182 	bfi	r1, r3, #2, #1
   1bf6e:	f363 01c5 	bfi	r1, r3, #3, #3
   1bf72:	2201      	movs	r2, #1
   1bf74:	f362 1188 	bfi	r1, r2, #6, #3
   1bf78:	2208      	movs	r2, #8
   1bf7a:	f362 2152 	bfi	r1, r2, #9, #10
   1bf7e:	f363 41de 	bfi	r1, r3, #19, #12
   1bf82:	f363 71df 	bfi	r1, r3, #31, #1
   1bf86:	aa08      	add	r2, sp, #32
   1bf88:	4807      	ldr	r0, [pc, #28]	; (1bfa8 <chan_send+0xdc>)
   1bf8a:	f00c ff1a 	bl	28dc2 <z_impl_z_log_msg_static_create>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1bf8e:	69a0      	ldr	r0, [r4, #24]
   1bf90:	f7ff ff8e 	bl	1beb0 <tx_meta_data_free>
			net_buf_unref(buf);
   1bf94:	4620      	mov	r0, r4
   1bf96:	f00f febc 	bl	2bd12 <net_buf_unref>
			return err;
   1bf9a:	e7c7      	b.n	1bf2c <chan_send+0x60>
		return -EINVAL;
   1bf9c:	f06f 0915 	mvn.w	r9, #21
   1bfa0:	e7c4      	b.n	1bf2c <chan_send+0x60>
   1bfa2:	bf00      	nop
   1bfa4:	00030c00 	.word	0x00030c00
   1bfa8:	0002ee80 	.word	0x0002ee80

0001bfac <read_group_cb>:
{
   1bfac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bfae:	b085      	sub	sp, #20
   1bfb0:	4605      	mov	r5, r0
   1bfb2:	460e      	mov	r6, r1
   1bfb4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1bfb6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bfb8:	2300      	movs	r3, #0
   1bfba:	f88d 3008 	strb.w	r3, [sp, #8]
   1bfbe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1bfc2:	f8ad 300a 	strh.w	r3, [sp, #10]
   1bfc6:	a902      	add	r1, sp, #8
   1bfc8:	6800      	ldr	r0, [r0, #0]
   1bfca:	f00d fba7 	bl	2971c <bt_uuid_cmp>
   1bfce:	b158      	cbz	r0, 1bfe8 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bfd0:	2300      	movs	r3, #0
   1bfd2:	f88d 300c 	strb.w	r3, [sp, #12]
   1bfd6:	f642 0301 	movw	r3, #10241	; 0x2801
   1bfda:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bfde:	a903      	add	r1, sp, #12
   1bfe0:	6828      	ldr	r0, [r5, #0]
   1bfe2:	f00d fb9b 	bl	2971c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bfe6:	bb28      	cbnz	r0, 1c034 <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1bfe8:	6861      	ldr	r1, [r4, #4]
   1bfea:	6828      	ldr	r0, [r5, #0]
   1bfec:	f00d fb96 	bl	2971c <bt_uuid_cmp>
   1bff0:	bb40      	cbnz	r0, 1c044 <read_group_cb+0x98>
	if (data->rsp->len &&
   1bff2:	68e3      	ldr	r3, [r4, #12]
   1bff4:	781a      	ldrb	r2, [r3, #0]
   1bff6:	b12a      	cbz	r2, 1c004 <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1bff8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1bffa:	68a1      	ldr	r1, [r4, #8]
   1bffc:	8a09      	ldrh	r1, [r1, #16]
   1bffe:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1c000:	4293      	cmp	r3, r2
   1c002:	db24      	blt.n	1c04e <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1c004:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1c006:	2104      	movs	r1, #4
   1c008:	300c      	adds	r0, #12
   1c00a:	f00f fec9 	bl	2bda0 <net_buf_simple_add>
   1c00e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c010:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c012:	6923      	ldr	r3, [r4, #16]
   1c014:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1c016:	9401      	str	r4, [sp, #4]
   1c018:	4b10      	ldr	r3, [pc, #64]	; (1c05c <read_group_cb+0xb0>)
   1c01a:	9300      	str	r3, [sp, #0]
   1c01c:	2300      	movs	r3, #0
   1c01e:	68a2      	ldr	r2, [r4, #8]
   1c020:	4629      	mov	r1, r5
   1c022:	4638      	mov	r0, r7
   1c024:	f00e fce7 	bl	2a9f6 <att_chan_read>
	if (read < 0) {
   1c028:	2800      	cmp	r0, #0
   1c02a:	db12      	blt.n	1c052 <read_group_cb+0xa6>
	if (!data->group) {
   1c02c:	6923      	ldr	r3, [r4, #16]
   1c02e:	b193      	cbz	r3, 1c056 <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   1c030:	2001      	movs	r0, #1
   1c032:	e00a      	b.n	1c04a <read_group_cb+0x9e>
		if (data->group &&
   1c034:	6923      	ldr	r3, [r4, #16]
   1c036:	b11b      	cbz	r3, 1c040 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1c038:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1c03a:	42b2      	cmp	r2, r6
   1c03c:	d200      	bcs.n	1c040 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c03e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1c040:	2001      	movs	r0, #1
   1c042:	e002      	b.n	1c04a <read_group_cb+0x9e>
		data->group = NULL;
   1c044:	2300      	movs	r3, #0
   1c046:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1c048:	2001      	movs	r0, #1
}
   1c04a:	b005      	add	sp, #20
   1c04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1c04e:	2000      	movs	r0, #0
   1c050:	e7fb      	b.n	1c04a <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1c052:	2000      	movs	r0, #0
   1c054:	e7f9      	b.n	1c04a <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   1c056:	2000      	movs	r0, #0
   1c058:	e7f7      	b.n	1c04a <read_group_cb+0x9e>
   1c05a:	bf00      	nop
   1c05c:	0002a5fd 	.word	0x0002a5fd

0001c060 <read_type_cb>:
{
   1c060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c064:	b083      	sub	sp, #12
   1c066:	4606      	mov	r6, r0
   1c068:	4688      	mov	r8, r1
   1c06a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c06c:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c06e:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1c070:	6851      	ldr	r1, [r2, #4]
   1c072:	6800      	ldr	r0, [r0, #0]
   1c074:	f00d fb52 	bl	2971c <bt_uuid_cmp>
   1c078:	b120      	cbz	r0, 1c084 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1c07a:	2501      	movs	r5, #1
}
   1c07c:	4628      	mov	r0, r5
   1c07e:	b003      	add	sp, #12
   1c080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c084:	2295      	movs	r2, #149	; 0x95
   1c086:	4631      	mov	r1, r6
   1c088:	4628      	mov	r0, r5
   1c08a:	f00f fbcc 	bl	2b826 <bt_gatt_check_perm>
   1c08e:	4605      	mov	r5, r0
   1c090:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c092:	b130      	cbz	r0, 1c0a2 <read_type_cb+0x42>
		if (data->rsp->len) {
   1c094:	68e3      	ldr	r3, [r4, #12]
   1c096:	781b      	ldrb	r3, [r3, #0]
   1c098:	b10b      	cbz	r3, 1c09e <read_type_cb+0x3e>
			data->err = 0x00;
   1c09a:	2300      	movs	r3, #0
   1c09c:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c09e:	2500      	movs	r5, #0
   1c0a0:	e7ec      	b.n	1c07c <read_type_cb+0x1c>
	data->err = 0x00;
   1c0a2:	f04f 0900 	mov.w	r9, #0
   1c0a6:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1c0aa:	68a0      	ldr	r0, [r4, #8]
   1c0ac:	f00f fe58 	bl	2bd60 <net_buf_frag_last>
   1c0b0:	2102      	movs	r1, #2
   1c0b2:	300c      	adds	r0, #12
   1c0b4:	f00f fe74 	bl	2bda0 <net_buf_simple_add>
   1c0b8:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1c0ba:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1c0be:	9401      	str	r4, [sp, #4]
   1c0c0:	4b10      	ldr	r3, [pc, #64]	; (1c104 <read_type_cb+0xa4>)
   1c0c2:	9300      	str	r3, [sp, #0]
   1c0c4:	464b      	mov	r3, r9
   1c0c6:	68a2      	ldr	r2, [r4, #8]
   1c0c8:	4631      	mov	r1, r6
   1c0ca:	4638      	mov	r0, r7
   1c0cc:	f00e fc93 	bl	2a9f6 <att_chan_read>
	if (read < 0) {
   1c0d0:	2800      	cmp	r0, #0
   1c0d2:	db06      	blt.n	1c0e2 <read_type_cb+0x82>
	if (!data->item) {
   1c0d4:	6923      	ldr	r3, [r4, #16]
   1c0d6:	2b00      	cmp	r3, #0
   1c0d8:	d0d0      	beq.n	1c07c <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1c0da:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   1c0dc:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1c0de:	2200      	movs	r2, #0

	while (buf) {
   1c0e0:	e006      	b.n	1c0f0 <read_type_cb+0x90>
		data->err = err_to_att(read);
   1c0e2:	f00e fa6e 	bl	2a5c2 <err_to_att>
   1c0e6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c0e8:	e7c8      	b.n	1c07c <read_type_cb+0x1c>
		bytes += buf->len;
   1c0ea:	8a19      	ldrh	r1, [r3, #16]
   1c0ec:	440a      	add	r2, r1
		buf = buf->frags;
   1c0ee:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1c0f0:	2b00      	cmp	r3, #0
   1c0f2:	d1fa      	bne.n	1c0ea <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1c0f4:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1c0f6:	68e3      	ldr	r3, [r4, #12]
   1c0f8:	781b      	ldrb	r3, [r3, #0]
   1c0fa:	429d      	cmp	r5, r3
   1c0fc:	bf94      	ite	ls
   1c0fe:	2500      	movls	r5, #0
   1c100:	2501      	movhi	r5, #1
   1c102:	e7bb      	b.n	1c07c <read_type_cb+0x1c>
   1c104:	0002a5d3 	.word	0x0002a5d3

0001c108 <find_type_cb>:
{
   1c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c10c:	b097      	sub	sp, #92	; 0x5c
   1c10e:	af02      	add	r7, sp, #8
   1c110:	4605      	mov	r5, r0
   1c112:	460e      	mov	r6, r1
   1c114:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c116:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c11a:	f8d8 9004 	ldr.w	r9, [r8, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c11e:	2300      	movs	r3, #0
   1c120:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   1c124:	f642 0301 	movw	r3, #10241	; 0x2801
   1c128:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   1c12c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1c130:	6800      	ldr	r0, [r0, #0]
   1c132:	f00d faf3 	bl	2971c <bt_uuid_cmp>
   1c136:	b930      	cbnz	r0, 1c146 <find_type_cb+0x3e>
	data->group = NULL;
   1c138:	2300      	movs	r3, #0
   1c13a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1c13c:	2001      	movs	r0, #1
}
   1c13e:	3754      	adds	r7, #84	; 0x54
   1c140:	46bd      	mov	sp, r7
   1c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1c146:	2300      	movs	r3, #0
   1c148:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   1c14c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c150:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   1c154:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1c158:	6828      	ldr	r0, [r5, #0]
   1c15a:	f00d fadf 	bl	2971c <bt_uuid_cmp>
   1c15e:	b928      	cbnz	r0, 1c16c <find_type_cb+0x64>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1c160:	f8b8 c02a 	ldrh.w	ip, [r8, #42]	; 0x2a
   1c164:	6860      	ldr	r0, [r4, #4]
   1c166:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c168:	2200      	movs	r2, #0
	while (buf) {
   1c16a:	e00a      	b.n	1c182 <find_type_cb+0x7a>
		if (data->group &&
   1c16c:	68a3      	ldr	r3, [r4, #8]
   1c16e:	b11b      	cbz	r3, 1c178 <find_type_cb+0x70>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1c170:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1c172:	42b2      	cmp	r2, r6
   1c174:	d200      	bcs.n	1c178 <find_type_cb+0x70>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c176:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1c178:	2001      	movs	r0, #1
   1c17a:	e7e0      	b.n	1c13e <find_type_cb+0x36>
		bytes += buf->len;
   1c17c:	8a19      	ldrh	r1, [r3, #16]
   1c17e:	440a      	add	r2, r1
		buf = buf->frags;
   1c180:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1c182:	2b00      	cmp	r3, #0
   1c184:	d1fa      	bne.n	1c17c <find_type_cb+0x74>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1c186:	ebac 0302 	sub.w	r3, ip, r2
   1c18a:	2b03      	cmp	r3, #3
   1c18c:	d801      	bhi.n	1c192 <find_type_cb+0x8a>
		return BT_GATT_ITER_STOP;
   1c18e:	2000      	movs	r0, #0
   1c190:	e7d5      	b.n	1c13e <find_type_cb+0x36>
	frag = net_buf_frag_last(data->buf);
   1c192:	f00f fde5 	bl	2bd60 <net_buf_frag_last>
   1c196:	6078      	str	r0, [r7, #4]
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1c198:	f8b8 a02a 	ldrh.w	sl, [r8, #42]	; 0x2a
   1c19c:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1c19e:	2200      	movs	r2, #0
	while (buf) {
   1c1a0:	e002      	b.n	1c1a8 <find_type_cb+0xa0>
		bytes += buf->len;
   1c1a2:	8a19      	ldrh	r1, [r3, #16]
   1c1a4:	440a      	add	r2, r1
		buf = buf->frags;
   1c1a6:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1c1a8:	2b00      	cmp	r3, #0
   1c1aa:	d1fa      	bne.n	1c1a2 <find_type_cb+0x9a>
   1c1ac:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1c1b0:	687b      	ldr	r3, [r7, #4]
   1c1b2:	f103 0b0c 	add.w	fp, r3, #12
   1c1b6:	4658      	mov	r0, fp
   1c1b8:	f00f fe2e 	bl	2be18 <net_buf_simple_tailroom>
   1c1bc:	4582      	cmp	sl, r0
   1c1be:	d25c      	bcs.n	1c27a <find_type_cb+0x172>
   1c1c0:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   1c1c4:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   1c1c6:	2200      	movs	r2, #0
	while (buf) {
   1c1c8:	e002      	b.n	1c1d0 <find_type_cb+0xc8>
		bytes += buf->len;
   1c1ca:	8a19      	ldrh	r1, [r3, #16]
   1c1cc:	440a      	add	r2, r1
		buf = buf->frags;
   1c1ce:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   1c1d0:	2b00      	cmp	r3, #0
   1c1d2:	d1fa      	bne.n	1c1ca <find_type_cb+0xc2>
   1c1d4:	1a80      	subs	r0, r0, r2
	if (!len) {
   1c1d6:	2800      	cmp	r0, #0
   1c1d8:	d053      	beq.n	1c282 <find_type_cb+0x17a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1c1da:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1c1de:	2300      	movs	r3, #0
   1c1e0:	9300      	str	r3, [sp, #0]
   1c1e2:	2310      	movs	r3, #16
   1c1e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1c1e8:	4629      	mov	r1, r5
   1c1ea:	4648      	mov	r0, r9
   1c1ec:	47c0      	blx	r8
	if (read < 0) {
   1c1ee:	1e05      	subs	r5, r0, #0
   1c1f0:	dba2      	blt.n	1c138 <find_type_cb+0x30>
	if (read != data->value_len) {
   1c1f2:	7c22      	ldrb	r2, [r4, #16]
   1c1f4:	42aa      	cmp	r2, r5
   1c1f6:	f000 80aa 	beq.w	1c34e <find_type_cb+0x246>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1c1fa:	68e1      	ldr	r1, [r4, #12]
   1c1fc:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1c200:	f00d faaa 	bl	29758 <bt_uuid_create>
   1c204:	2800      	cmp	r0, #0
   1c206:	d153      	bne.n	1c2b0 <find_type_cb+0x1a8>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1c208:	7c20      	ldrb	r0, [r4, #16]
   1c20a:	466e      	mov	r6, sp
   1c20c:	b088      	sub	sp, #32
   1c20e:	ab02      	add	r3, sp, #8
   1c210:	f113 0210 	adds.w	r2, r3, #16
   1c214:	d046      	beq.n	1c2a4 <find_type_cb+0x19c>
   1c216:	210c      	movs	r1, #12
   1c218:	b14a      	cbz	r2, 1c22e <find_type_cb+0x126>
   1c21a:	460d      	mov	r5, r1
   1c21c:	2904      	cmp	r1, #4
   1c21e:	dd03      	ble.n	1c228 <find_type_cb+0x120>
   1c220:	f8df c15c 	ldr.w	ip, [pc, #348]	; 1c380 <find_type_cb+0x278>
   1c224:	f8c3 c014 	str.w	ip, [r3, #20]
   1c228:	2d08      	cmp	r5, #8
   1c22a:	dd00      	ble.n	1c22e <find_type_cb+0x126>
   1c22c:	6198      	str	r0, [r3, #24]
   1c22e:	290b      	cmp	r1, #11
   1c230:	dd3b      	ble.n	1c2aa <find_type_cb+0x1a2>
   1c232:	250c      	movs	r5, #12
   1c234:	b13a      	cbz	r2, 1c246 <find_type_cb+0x13e>
   1c236:	2103      	movs	r1, #3
   1c238:	7439      	strb	r1, [r7, #16]
   1c23a:	2100      	movs	r1, #0
   1c23c:	7479      	strb	r1, [r7, #17]
   1c23e:	74b9      	strb	r1, [r7, #18]
   1c240:	74f9      	strb	r1, [r7, #19]
   1c242:	6938      	ldr	r0, [r7, #16]
   1c244:	6118      	str	r0, [r3, #16]
   1c246:	2100      	movs	r1, #0
   1c248:	f36f 0100 	bfc	r1, #0, #1
   1c24c:	f36f 0141 	bfc	r1, #1, #1
   1c250:	f36f 0182 	bfc	r1, #2, #1
   1c254:	f36f 01c5 	bfc	r1, #3, #3
   1c258:	2302      	movs	r3, #2
   1c25a:	f363 1188 	bfi	r1, r3, #6, #3
   1c25e:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   1c262:	f365 2152 	bfi	r1, r5, #9, #10
   1c266:	f36f 41de 	bfc	r1, #19, #12
   1c26a:	f36f 71df 	bfc	r1, #31, #1
   1c26e:	2300      	movs	r3, #0
   1c270:	4842      	ldr	r0, [pc, #264]	; (1c37c <find_type_cb+0x274>)
   1c272:	f00c fda6 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1c276:	46b5      	mov	sp, r6
			goto skip;
   1c278:	e75e      	b.n	1c138 <find_type_cb+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1c27a:	4658      	mov	r0, fp
   1c27c:	f00f fdcc 	bl	2be18 <net_buf_simple_tailroom>
   1c280:	e7a9      	b.n	1c1d6 <find_type_cb+0xce>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1c282:	6863      	ldr	r3, [r4, #4]
   1c284:	7a98      	ldrb	r0, [r3, #10]
   1c286:	f002 f873 	bl	1e370 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c28a:	2200      	movs	r2, #0
   1c28c:	2300      	movs	r3, #0
   1c28e:	f00f fcf8 	bl	2bc82 <net_buf_alloc_fixed>
		if (!frag) {
   1c292:	6078      	str	r0, [r7, #4]
   1c294:	2800      	cmp	r0, #0
   1c296:	f43f af52 	beq.w	1c13e <find_type_cb+0x36>
		net_buf_frag_add(data->buf, frag);
   1c29a:	6879      	ldr	r1, [r7, #4]
   1c29c:	6860      	ldr	r0, [r4, #4]
   1c29e:	f00f fd70 	bl	2bd82 <net_buf_frag_add>
   1c2a2:	e79a      	b.n	1c1da <find_type_cb+0xd2>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1c2a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c2a8:	e7b6      	b.n	1c218 <find_type_cb+0x110>
   1c2aa:	f06f 051b 	mvn.w	r5, #27
   1c2ae:	e7c1      	b.n	1c234 <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1c2b0:	b2ea      	uxtb	r2, r5
   1c2b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1c2b6:	f107 0010 	add.w	r0, r7, #16
   1c2ba:	f00d fa4d 	bl	29758 <bt_uuid_create>
   1c2be:	2800      	cmp	r0, #0
   1c2c0:	d13d      	bne.n	1c33e <find_type_cb+0x236>
			LOG_WRN("Unable to create UUID: size %d", read);
   1c2c2:	466e      	mov	r6, sp
   1c2c4:	b088      	sub	sp, #32
   1c2c6:	ab02      	add	r3, sp, #8
   1c2c8:	f113 0210 	adds.w	r2, r3, #16
   1c2cc:	d031      	beq.n	1c332 <find_type_cb+0x22a>
   1c2ce:	210c      	movs	r1, #12
   1c2d0:	b14a      	cbz	r2, 1c2e6 <find_type_cb+0x1de>
   1c2d2:	4608      	mov	r0, r1
   1c2d4:	2904      	cmp	r1, #4
   1c2d6:	dd03      	ble.n	1c2e0 <find_type_cb+0x1d8>
   1c2d8:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 1c384 <find_type_cb+0x27c>
   1c2dc:	f8c3 c014 	str.w	ip, [r3, #20]
   1c2e0:	2808      	cmp	r0, #8
   1c2e2:	dd00      	ble.n	1c2e6 <find_type_cb+0x1de>
   1c2e4:	619d      	str	r5, [r3, #24]
   1c2e6:	290b      	cmp	r1, #11
   1c2e8:	dd26      	ble.n	1c338 <find_type_cb+0x230>
   1c2ea:	250c      	movs	r5, #12
   1c2ec:	b13a      	cbz	r2, 1c2fe <find_type_cb+0x1f6>
   1c2ee:	2103      	movs	r1, #3
   1c2f0:	7339      	strb	r1, [r7, #12]
   1c2f2:	2100      	movs	r1, #0
   1c2f4:	7379      	strb	r1, [r7, #13]
   1c2f6:	73b9      	strb	r1, [r7, #14]
   1c2f8:	73f9      	strb	r1, [r7, #15]
   1c2fa:	68f8      	ldr	r0, [r7, #12]
   1c2fc:	6118      	str	r0, [r3, #16]
   1c2fe:	2100      	movs	r1, #0
   1c300:	f36f 0100 	bfc	r1, #0, #1
   1c304:	f36f 0141 	bfc	r1, #1, #1
   1c308:	f36f 0182 	bfc	r1, #2, #1
   1c30c:	f36f 01c5 	bfc	r1, #3, #3
   1c310:	2302      	movs	r3, #2
   1c312:	f363 1188 	bfi	r1, r3, #6, #3
   1c316:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1c31a:	f363 2152 	bfi	r1, r3, #9, #10
   1c31e:	f36f 41de 	bfc	r1, #19, #12
   1c322:	f36f 71df 	bfc	r1, #31, #1
   1c326:	2300      	movs	r3, #0
   1c328:	4814      	ldr	r0, [pc, #80]	; (1c37c <find_type_cb+0x274>)
   1c32a:	f00c fd4a 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1c32e:	46b5      	mov	sp, r6
			goto skip;
   1c330:	e702      	b.n	1c138 <find_type_cb+0x30>
			LOG_WRN("Unable to create UUID: size %d", read);
   1c332:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c336:	e7cb      	b.n	1c2d0 <find_type_cb+0x1c8>
   1c338:	f06f 051b 	mvn.w	r5, #27
   1c33c:	e7d6      	b.n	1c2ec <find_type_cb+0x1e4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1c33e:	f107 0110 	add.w	r1, r7, #16
   1c342:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1c346:	f00d f9e9 	bl	2971c <bt_uuid_cmp>
   1c34a:	b148      	cbz	r0, 1c360 <find_type_cb+0x258>
   1c34c:	e6f4      	b.n	1c138 <find_type_cb+0x30>
	} else if (memcmp(data->value, uuid, read)) {
   1c34e:	462a      	mov	r2, r5
   1c350:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1c354:	68e0      	ldr	r0, [r4, #12]
   1c356:	f011 ffa8 	bl	2e2aa <memcmp>
   1c35a:	2800      	cmp	r0, #0
   1c35c:	f47f aeec 	bne.w	1c138 <find_type_cb+0x30>
	data->err = 0x00;
   1c360:	2300      	movs	r3, #0
   1c362:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1c364:	2104      	movs	r1, #4
   1c366:	6878      	ldr	r0, [r7, #4]
   1c368:	300c      	adds	r0, #12
   1c36a:	f00f fd19 	bl	2bda0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1c36e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c370:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c372:	68a3      	ldr	r3, [r4, #8]
   1c374:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1c376:	2001      	movs	r0, #1
   1c378:	e6e1      	b.n	1c13e <find_type_cb+0x36>
   1c37a:	bf00      	nop
   1c37c:	0002ee80 	.word	0x0002ee80
   1c380:	00030c14 	.word	0x00030c14
   1c384:	00030c34 	.word	0x00030c34

0001c388 <bt_att_connected>:
{
   1c388:	b510      	push	{r4, lr}
   1c38a:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1c38c:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1c38e:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c392:	f3bf 8f5b 	dmb	ish
   1c396:	e853 1f00 	ldrex	r1, [r3]
   1c39a:	f041 0104 	orr.w	r1, r1, #4
   1c39e:	e843 1200 	strex	r2, r1, [r3]
   1c3a2:	2a00      	cmp	r2, #0
   1c3a4:	d1f7      	bne.n	1c396 <bt_att_connected+0xe>
   1c3a6:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c3aa:	2317      	movs	r3, #23
   1c3ac:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c3ae:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1c3b0:	f00e fc89 	bl	2acc6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1c3b4:	4904      	ldr	r1, [pc, #16]	; (1c3c8 <bt_att_connected+0x40>)
   1c3b6:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1c3ba:	f011 fabd 	bl	2d938 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1c3be:	6820      	ldr	r0, [r4, #0]
   1c3c0:	f001 ff22 	bl	1e208 <bt_gatt_connected>
}
   1c3c4:	bd10      	pop	{r4, pc}
   1c3c6:	bf00      	nop
   1c3c8:	0001d031 	.word	0x0001d031

0001c3cc <bt_att_chan_create_pdu>:
{
   1c3cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c3d0:	b089      	sub	sp, #36	; 0x24
   1c3d2:	af00      	add	r7, sp, #0
   1c3d4:	460c      	mov	r4, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c3d6:	1c53      	adds	r3, r2, #1
   1c3d8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1c3da:	428b      	cmp	r3, r1
   1c3dc:	d80b      	bhi.n	1c3f6 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1c3de:	4620      	mov	r0, r4
   1c3e0:	f7ff fb72 	bl	1bac8 <att_op_get_type>
   1c3e4:	2802      	cmp	r0, #2
   1c3e6:	d04b      	beq.n	1c480 <bt_att_chan_create_pdu+0xb4>
   1c3e8:	2804      	cmp	r0, #4
   1c3ea:	d049      	beq.n	1c480 <bt_att_chan_create_pdu+0xb4>
		timeout = K_FOREVER;
   1c3ec:	f04f 38ff 	mov.w	r8, #4294967295
   1c3f0:	f04f 39ff 	mov.w	r9, #4294967295
   1c3f4:	e048      	b.n	1c488 <bt_att_chan_create_pdu+0xbc>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1c3f6:	466d      	mov	r5, sp
   1c3f8:	b088      	sub	sp, #32
   1c3fa:	466c      	mov	r4, sp
   1c3fc:	f114 0210 	adds.w	r2, r4, #16
   1c400:	d012      	beq.n	1c428 <bt_att_chan_create_pdu+0x5c>
   1c402:	2010      	movs	r0, #16
   1c404:	b162      	cbz	r2, 1c420 <bt_att_chan_create_pdu+0x54>
   1c406:	4606      	mov	r6, r0
   1c408:	2804      	cmp	r0, #4
   1c40a:	dd03      	ble.n	1c414 <bt_att_chan_create_pdu+0x48>
   1c40c:	f8df c184 	ldr.w	ip, [pc, #388]	; 1c594 <bt_att_chan_create_pdu+0x1c8>
   1c410:	f8c4 c014 	str.w	ip, [r4, #20]
   1c414:	2e08      	cmp	r6, #8
   1c416:	dd00      	ble.n	1c41a <bt_att_chan_create_pdu+0x4e>
   1c418:	61a1      	str	r1, [r4, #24]
   1c41a:	2e0c      	cmp	r6, #12
   1c41c:	dd07      	ble.n	1c42e <bt_att_chan_create_pdu+0x62>
   1c41e:	61e3      	str	r3, [r4, #28]
   1c420:	280f      	cmp	r0, #15
   1c422:	dd2a      	ble.n	1c47a <bt_att_chan_create_pdu+0xae>
   1c424:	2310      	movs	r3, #16
   1c426:	e004      	b.n	1c432 <bt_att_chan_create_pdu+0x66>
   1c428:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c42c:	e7ea      	b.n	1c404 <bt_att_chan_create_pdu+0x38>
   1c42e:	f06f 031b 	mvn.w	r3, #27
   1c432:	b13a      	cbz	r2, 1c444 <bt_att_chan_create_pdu+0x78>
   1c434:	2104      	movs	r1, #4
   1c436:	7139      	strb	r1, [r7, #4]
   1c438:	2100      	movs	r1, #0
   1c43a:	7179      	strb	r1, [r7, #5]
   1c43c:	71b9      	strb	r1, [r7, #6]
   1c43e:	71f9      	strb	r1, [r7, #7]
   1c440:	6878      	ldr	r0, [r7, #4]
   1c442:	6120      	str	r0, [r4, #16]
   1c444:	2100      	movs	r1, #0
   1c446:	f36f 0100 	bfc	r1, #0, #1
   1c44a:	f36f 0141 	bfc	r1, #1, #1
   1c44e:	f36f 0182 	bfc	r1, #2, #1
   1c452:	f36f 01c5 	bfc	r1, #3, #3
   1c456:	2002      	movs	r0, #2
   1c458:	f360 1188 	bfi	r1, r0, #6, #3
   1c45c:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1c460:	f363 2152 	bfi	r1, r3, #9, #10
   1c464:	f36f 41de 	bfc	r1, #19, #12
   1c468:	f36f 71df 	bfc	r1, #31, #1
   1c46c:	2300      	movs	r3, #0
   1c46e:	4847      	ldr	r0, [pc, #284]	; (1c58c <bt_att_chan_create_pdu+0x1c0>)
   1c470:	f00c fca7 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1c474:	46ad      	mov	sp, r5
		return NULL;
   1c476:	2500      	movs	r5, #0
   1c478:	e01c      	b.n	1c4b4 <bt_att_chan_create_pdu+0xe8>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1c47a:	f06f 031b 	mvn.w	r3, #27
   1c47e:	e7d8      	b.n	1c432 <bt_att_chan_create_pdu+0x66>
		timeout = BT_ATT_TIMEOUT;
   1c480:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1c484:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1c488:	4642      	mov	r2, r8
   1c48a:	464b      	mov	r3, r9
   1c48c:	2100      	movs	r1, #0
   1c48e:	4608      	mov	r0, r1
   1c490:	f00d ffce 	bl	2a430 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1c494:	4605      	mov	r5, r0
   1c496:	b190      	cbz	r0, 1c4be <bt_att_chan_create_pdu+0xf2>
	data = tx_meta_data_alloc(timeout);
   1c498:	4640      	mov	r0, r8
   1c49a:	4649      	mov	r1, r9
   1c49c:	f7ff fb86 	bl	1bbac <tx_meta_data_alloc>
	if (!data) {
   1c4a0:	4606      	mov	r6, r0
   1c4a2:	2800      	cmp	r0, #0
   1c4a4:	d04c      	beq.n	1c540 <bt_att_chan_create_pdu+0x174>
	bt_att_tx_meta_data(buf) = data;
   1c4a6:	61a8      	str	r0, [r5, #24]
   1c4a8:	2101      	movs	r1, #1
   1c4aa:	f105 000c 	add.w	r0, r5, #12
   1c4ae:	f00f fc77 	bl	2bda0 <net_buf_simple_add>
	hdr->code = op;
   1c4b2:	7004      	strb	r4, [r0, #0]
}
   1c4b4:	4628      	mov	r0, r5
   1c4b6:	3724      	adds	r7, #36	; 0x24
   1c4b8:	46bd      	mov	sp, r7
   1c4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1c4be:	466e      	mov	r6, sp
   1c4c0:	b088      	sub	sp, #32
   1c4c2:	466b      	mov	r3, sp
   1c4c4:	f113 0210 	adds.w	r2, r3, #16
   1c4c8:	d00f      	beq.n	1c4ea <bt_att_chan_create_pdu+0x11e>
   1c4ca:	210c      	movs	r1, #12
   1c4cc:	b14a      	cbz	r2, 1c4e2 <bt_att_chan_create_pdu+0x116>
   1c4ce:	4608      	mov	r0, r1
   1c4d0:	2904      	cmp	r1, #4
   1c4d2:	dd03      	ble.n	1c4dc <bt_att_chan_create_pdu+0x110>
   1c4d4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 1c598 <bt_att_chan_create_pdu+0x1cc>
   1c4d8:	f8c3 c014 	str.w	ip, [r3, #20]
   1c4dc:	2808      	cmp	r0, #8
   1c4de:	dd07      	ble.n	1c4f0 <bt_att_chan_create_pdu+0x124>
   1c4e0:	619c      	str	r4, [r3, #24]
   1c4e2:	290b      	cmp	r1, #11
   1c4e4:	dd29      	ble.n	1c53a <bt_att_chan_create_pdu+0x16e>
   1c4e6:	240c      	movs	r4, #12
   1c4e8:	e004      	b.n	1c4f4 <bt_att_chan_create_pdu+0x128>
   1c4ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c4ee:	e7ed      	b.n	1c4cc <bt_att_chan_create_pdu+0x100>
   1c4f0:	f06f 041b 	mvn.w	r4, #27
   1c4f4:	b13a      	cbz	r2, 1c506 <bt_att_chan_create_pdu+0x13a>
   1c4f6:	2103      	movs	r1, #3
   1c4f8:	7139      	strb	r1, [r7, #4]
   1c4fa:	2100      	movs	r1, #0
   1c4fc:	7179      	strb	r1, [r7, #5]
   1c4fe:	71b9      	strb	r1, [r7, #6]
   1c500:	71f9      	strb	r1, [r7, #7]
   1c502:	6878      	ldr	r0, [r7, #4]
   1c504:	6118      	str	r0, [r3, #16]
   1c506:	2100      	movs	r1, #0
   1c508:	f36f 0100 	bfc	r1, #0, #1
   1c50c:	f36f 0141 	bfc	r1, #1, #1
   1c510:	f36f 0182 	bfc	r1, #2, #1
   1c514:	f36f 01c5 	bfc	r1, #3, #3
   1c518:	2301      	movs	r3, #1
   1c51a:	f363 1188 	bfi	r1, r3, #6, #3
   1c51e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1c522:	f363 2152 	bfi	r1, r3, #9, #10
   1c526:	f36f 41de 	bfc	r1, #19, #12
   1c52a:	f36f 71df 	bfc	r1, #31, #1
   1c52e:	2300      	movs	r3, #0
   1c530:	4816      	ldr	r0, [pc, #88]	; (1c58c <bt_att_chan_create_pdu+0x1c0>)
   1c532:	f00c fc46 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1c536:	46b5      	mov	sp, r6
		return NULL;
   1c538:	e7bc      	b.n	1c4b4 <bt_att_chan_create_pdu+0xe8>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1c53a:	f06f 041b 	mvn.w	r4, #27
   1c53e:	e7d9      	b.n	1c4f4 <bt_att_chan_create_pdu+0x128>
		LOG_WRN("Unable to allocate ATT TX meta");
   1c540:	4b13      	ldr	r3, [pc, #76]	; (1c590 <bt_att_chan_create_pdu+0x1c4>)
   1c542:	61fb      	str	r3, [r7, #28]
   1c544:	2202      	movs	r2, #2
   1c546:	713a      	strb	r2, [r7, #4]
   1c548:	2300      	movs	r3, #0
   1c54a:	717b      	strb	r3, [r7, #5]
   1c54c:	71bb      	strb	r3, [r7, #6]
   1c54e:	71fb      	strb	r3, [r7, #7]
   1c550:	6879      	ldr	r1, [r7, #4]
   1c552:	61b9      	str	r1, [r7, #24]
   1c554:	4619      	mov	r1, r3
   1c556:	f363 0100 	bfi	r1, r3, #0, #1
   1c55a:	f363 0141 	bfi	r1, r3, #1, #1
   1c55e:	f363 0182 	bfi	r1, r3, #2, #1
   1c562:	f363 01c5 	bfi	r1, r3, #3, #3
   1c566:	f362 1188 	bfi	r1, r2, #6, #3
   1c56a:	2208      	movs	r2, #8
   1c56c:	f362 2152 	bfi	r1, r2, #9, #10
   1c570:	f363 41de 	bfi	r1, r3, #19, #12
   1c574:	f363 71df 	bfi	r1, r3, #31, #1
   1c578:	f107 0218 	add.w	r2, r7, #24
   1c57c:	4803      	ldr	r0, [pc, #12]	; (1c58c <bt_att_chan_create_pdu+0x1c0>)
   1c57e:	f00c fc20 	bl	28dc2 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1c582:	4628      	mov	r0, r5
   1c584:	f00f fbc5 	bl	2bd12 <net_buf_unref>
		return NULL;
   1c588:	4635      	mov	r5, r6
   1c58a:	e793      	b.n	1c4b4 <bt_att_chan_create_pdu+0xe8>
   1c58c:	0002ee80 	.word	0x0002ee80
   1c590:	00030c7c 	.word	0x00030c7c
   1c594:	00030c54 	.word	0x00030c54
   1c598:	00030a4c 	.word	0x00030a4c

0001c59c <bt_att_recv>:
{
   1c59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c5a0:	b094      	sub	sp, #80	; 0x50
   1c5a2:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1c5a4:	8a0b      	ldrh	r3, [r1, #16]
   1c5a6:	b1c3      	cbz	r3, 1c5da <bt_att_recv+0x3e>
   1c5a8:	4606      	mov	r6, r0
   1c5aa:	460d      	mov	r5, r1
   1c5ac:	f1a0 0804 	sub.w	r8, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   1c5b0:	2101      	movs	r1, #1
   1c5b2:	f105 000c 	add.w	r0, r5, #12
   1c5b6:	f00f fc1b 	bl	2bdf0 <net_buf_simple_pull_mem>
   1c5ba:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1c5bc:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1c5c0:	b36b      	cbz	r3, 1c61e <bt_att_recv+0x82>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c5c2:	2300      	movs	r3, #0
   1c5c4:	2b0d      	cmp	r3, #13
   1c5c6:	d860      	bhi.n	1c68a <bt_att_recv+0xee>
		if (hdr->code == handlers[i].op) {
   1c5c8:	f894 c000 	ldrb.w	ip, [r4]
   1c5cc:	4aa1      	ldr	r2, [pc, #644]	; (1c854 <bt_att_recv+0x2b8>)
   1c5ce:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1c5d2:	4594      	cmp	ip, r2
   1c5d4:	d028      	beq.n	1c628 <bt_att_recv+0x8c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c5d6:	3301      	adds	r3, #1
   1c5d8:	e7f4      	b.n	1c5c4 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   1c5da:	4b9f      	ldr	r3, [pc, #636]	; (1c858 <bt_att_recv+0x2bc>)
   1c5dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   1c5de:	2302      	movs	r3, #2
   1c5e0:	713b      	strb	r3, [r7, #4]
   1c5e2:	2300      	movs	r3, #0
   1c5e4:	717b      	strb	r3, [r7, #5]
   1c5e6:	71bb      	strb	r3, [r7, #6]
   1c5e8:	71fb      	strb	r3, [r7, #7]
   1c5ea:	687a      	ldr	r2, [r7, #4]
   1c5ec:	64ba      	str	r2, [r7, #72]	; 0x48
   1c5ee:	4619      	mov	r1, r3
   1c5f0:	f363 0100 	bfi	r1, r3, #0, #1
   1c5f4:	f363 0141 	bfi	r1, r3, #1, #1
   1c5f8:	f363 0182 	bfi	r1, r3, #2, #1
   1c5fc:	f363 01c5 	bfi	r1, r3, #3, #3
   1c600:	2201      	movs	r2, #1
   1c602:	f362 1188 	bfi	r1, r2, #6, #3
   1c606:	2208      	movs	r2, #8
   1c608:	f362 2152 	bfi	r1, r2, #9, #10
   1c60c:	f363 41de 	bfi	r1, r3, #19, #12
   1c610:	f363 71df 	bfi	r1, r3, #31, #1
   1c614:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1c618:	4890      	ldr	r0, [pc, #576]	; (1c85c <bt_att_recv+0x2c0>)
   1c61a:	f00c fbd2 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   1c61e:	2000      	movs	r0, #0
   1c620:	3750      	adds	r7, #80	; 0x50
   1c622:	46bd      	mov	sp, r7
   1c624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			handler = &handlers[i];
   1c628:	4a8a      	ldr	r2, [pc, #552]	; (1c854 <bt_att_recv+0x2b8>)
   1c62a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   1c62e:	f899 a002 	ldrb.w	sl, [r9, #2]
   1c632:	f1ba 0f01 	cmp.w	sl, #1
   1c636:	d078      	beq.n	1c72a <bt_att_recv+0x18e>
		} else if (handler->type == ATT_INDICATION &&
   1c638:	f1ba 0f05 	cmp.w	sl, #5
   1c63c:	f000 809f 	beq.w	1c77e <bt_att_recv+0x1e2>
	if (buf->len < handler->expect_len) {
   1c640:	8a29      	ldrh	r1, [r5, #16]
   1c642:	f899 3001 	ldrb.w	r3, [r9, #1]
   1c646:	4299      	cmp	r1, r3
   1c648:	f080 80fd 	bcs.w	1c846 <bt_att_recv+0x2aa>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c64c:	f894 c000 	ldrb.w	ip, [r4]
   1c650:	466d      	mov	r5, sp
   1c652:	b088      	sub	sp, #32
   1c654:	466b      	mov	r3, sp
   1c656:	f113 0210 	adds.w	r2, r3, #16
   1c65a:	f000 80ba 	beq.w	1c7d2 <bt_att_recv+0x236>
   1c65e:	2010      	movs	r0, #16
   1c660:	b172      	cbz	r2, 1c680 <bt_att_recv+0xe4>
   1c662:	4606      	mov	r6, r0
   1c664:	2804      	cmp	r0, #4
   1c666:	dd03      	ble.n	1c670 <bt_att_recv+0xd4>
   1c668:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 1c868 <bt_att_recv+0x2cc>
   1c66c:	f8c3 e014 	str.w	lr, [r3, #20]
   1c670:	2e08      	cmp	r6, #8
   1c672:	dd00      	ble.n	1c676 <bt_att_recv+0xda>
   1c674:	6199      	str	r1, [r3, #24]
   1c676:	2e0c      	cmp	r6, #12
   1c678:	f340 80ae 	ble.w	1c7d8 <bt_att_recv+0x23c>
   1c67c:	f8c3 c01c 	str.w	ip, [r3, #28]
   1c680:	280f      	cmp	r0, #15
   1c682:	f340 80dd 	ble.w	1c840 <bt_att_recv+0x2a4>
   1c686:	2610      	movs	r6, #16
   1c688:	e0a8      	b.n	1c7dc <bt_att_recv+0x240>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1c68a:	7826      	ldrb	r6, [r4, #0]
   1c68c:	466d      	mov	r5, sp
   1c68e:	b088      	sub	sp, #32
   1c690:	466b      	mov	r3, sp
   1c692:	f113 0210 	adds.w	r2, r3, #16
   1c696:	d00f      	beq.n	1c6b8 <bt_att_recv+0x11c>
   1c698:	210c      	movs	r1, #12
   1c69a:	b14a      	cbz	r2, 1c6b0 <bt_att_recv+0x114>
   1c69c:	4608      	mov	r0, r1
   1c69e:	2904      	cmp	r1, #4
   1c6a0:	dd03      	ble.n	1c6aa <bt_att_recv+0x10e>
   1c6a2:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 1c86c <bt_att_recv+0x2d0>
   1c6a6:	f8c3 c014 	str.w	ip, [r3, #20]
   1c6aa:	2808      	cmp	r0, #8
   1c6ac:	dd07      	ble.n	1c6be <bt_att_recv+0x122>
   1c6ae:	619e      	str	r6, [r3, #24]
   1c6b0:	290b      	cmp	r1, #11
   1c6b2:	dd37      	ble.n	1c724 <bt_att_recv+0x188>
   1c6b4:	260c      	movs	r6, #12
   1c6b6:	e004      	b.n	1c6c2 <bt_att_recv+0x126>
   1c6b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c6bc:	e7ed      	b.n	1c69a <bt_att_recv+0xfe>
   1c6be:	f06f 061b 	mvn.w	r6, #27
   1c6c2:	b13a      	cbz	r2, 1c6d4 <bt_att_recv+0x138>
   1c6c4:	2103      	movs	r1, #3
   1c6c6:	7139      	strb	r1, [r7, #4]
   1c6c8:	2100      	movs	r1, #0
   1c6ca:	7179      	strb	r1, [r7, #5]
   1c6cc:	71b9      	strb	r1, [r7, #6]
   1c6ce:	71f9      	strb	r1, [r7, #7]
   1c6d0:	6878      	ldr	r0, [r7, #4]
   1c6d2:	6118      	str	r0, [r3, #16]
   1c6d4:	2100      	movs	r1, #0
   1c6d6:	f36f 0100 	bfc	r1, #0, #1
   1c6da:	f36f 0141 	bfc	r1, #1, #1
   1c6de:	f36f 0182 	bfc	r1, #2, #1
   1c6e2:	f36f 01c5 	bfc	r1, #3, #3
   1c6e6:	2302      	movs	r3, #2
   1c6e8:	f363 1188 	bfi	r1, r3, #6, #3
   1c6ec:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   1c6f0:	f363 2152 	bfi	r1, r3, #9, #10
   1c6f4:	f36f 41de 	bfc	r1, #19, #12
   1c6f8:	f36f 71df 	bfc	r1, #31, #1
   1c6fc:	2300      	movs	r3, #0
   1c6fe:	4857      	ldr	r0, [pc, #348]	; (1c85c <bt_att_recv+0x2c0>)
   1c700:	f00c fb5f 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1c704:	46ad      	mov	sp, r5
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1c706:	7824      	ldrb	r4, [r4, #0]
   1c708:	4620      	mov	r0, r4
   1c70a:	f7ff f9dd 	bl	1bac8 <att_op_get_type>
   1c70e:	2800      	cmp	r0, #0
   1c710:	d085      	beq.n	1c61e <bt_att_recv+0x82>
   1c712:	2805      	cmp	r0, #5
   1c714:	d083      	beq.n	1c61e <bt_att_recv+0x82>
			send_err_rsp(att_chan, hdr->code, 0,
   1c716:	2306      	movs	r3, #6
   1c718:	2200      	movs	r2, #0
   1c71a:	4621      	mov	r1, r4
   1c71c:	4640      	mov	r0, r8
   1c71e:	f00e fb71 	bl	2ae04 <send_err_rsp>
		return 0;
   1c722:	e77c      	b.n	1c61e <bt_att_recv+0x82>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1c724:	f06f 061b 	mvn.w	r6, #27
   1c728:	e7cb      	b.n	1c6c2 <bt_att_recv+0x126>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1c72a:	2100      	movs	r1, #0
   1c72c:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1c730:	f00e fb01 	bl	2ad36 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1c734:	2800      	cmp	r0, #0
   1c736:	f43f af7f 	beq.w	1c638 <bt_att_recv+0x9c>
			LOG_WRN("Ignoring unexpected request");
   1c73a:	4b49      	ldr	r3, [pc, #292]	; (1c860 <bt_att_recv+0x2c4>)
   1c73c:	61fb      	str	r3, [r7, #28]
   1c73e:	2202      	movs	r2, #2
   1c740:	713a      	strb	r2, [r7, #4]
   1c742:	2300      	movs	r3, #0
   1c744:	717b      	strb	r3, [r7, #5]
   1c746:	71bb      	strb	r3, [r7, #6]
   1c748:	71fb      	strb	r3, [r7, #7]
   1c74a:	6879      	ldr	r1, [r7, #4]
   1c74c:	61b9      	str	r1, [r7, #24]
   1c74e:	4619      	mov	r1, r3
   1c750:	f363 0100 	bfi	r1, r3, #0, #1
   1c754:	f363 0141 	bfi	r1, r3, #1, #1
   1c758:	f363 0182 	bfi	r1, r3, #2, #1
   1c75c:	f363 01c5 	bfi	r1, r3, #3, #3
   1c760:	f362 1188 	bfi	r1, r2, #6, #3
   1c764:	2208      	movs	r2, #8
   1c766:	f362 2152 	bfi	r1, r2, #9, #10
   1c76a:	f363 41de 	bfi	r1, r3, #19, #12
   1c76e:	f363 71df 	bfi	r1, r3, #31, #1
   1c772:	f107 0218 	add.w	r2, r7, #24
   1c776:	4839      	ldr	r0, [pc, #228]	; (1c85c <bt_att_recv+0x2c0>)
   1c778:	f00c fb23 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return 0;
   1c77c:	e74f      	b.n	1c61e <bt_att_recv+0x82>
			   atomic_test_and_set_bit(att_chan->flags,
   1c77e:	2101      	movs	r1, #1
   1c780:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1c784:	f00e fad7 	bl	2ad36 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1c788:	2800      	cmp	r0, #0
   1c78a:	f43f af59 	beq.w	1c640 <bt_att_recv+0xa4>
			LOG_WRN("Ignoring unexpected indication");
   1c78e:	4b35      	ldr	r3, [pc, #212]	; (1c864 <bt_att_recv+0x2c8>)
   1c790:	637b      	str	r3, [r7, #52]	; 0x34
   1c792:	2202      	movs	r2, #2
   1c794:	713a      	strb	r2, [r7, #4]
   1c796:	2300      	movs	r3, #0
   1c798:	717b      	strb	r3, [r7, #5]
   1c79a:	71bb      	strb	r3, [r7, #6]
   1c79c:	71fb      	strb	r3, [r7, #7]
   1c79e:	6879      	ldr	r1, [r7, #4]
   1c7a0:	6339      	str	r1, [r7, #48]	; 0x30
   1c7a2:	4619      	mov	r1, r3
   1c7a4:	f363 0100 	bfi	r1, r3, #0, #1
   1c7a8:	f363 0141 	bfi	r1, r3, #1, #1
   1c7ac:	f363 0182 	bfi	r1, r3, #2, #1
   1c7b0:	f363 01c5 	bfi	r1, r3, #3, #3
   1c7b4:	f362 1188 	bfi	r1, r2, #6, #3
   1c7b8:	2208      	movs	r2, #8
   1c7ba:	f362 2152 	bfi	r1, r2, #9, #10
   1c7be:	f363 41de 	bfi	r1, r3, #19, #12
   1c7c2:	f363 71df 	bfi	r1, r3, #31, #1
   1c7c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1c7ca:	4824      	ldr	r0, [pc, #144]	; (1c85c <bt_att_recv+0x2c0>)
   1c7cc:	f00c faf9 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return 0;
   1c7d0:	e725      	b.n	1c61e <bt_att_recv+0x82>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c7d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c7d6:	e743      	b.n	1c660 <bt_att_recv+0xc4>
   1c7d8:	f06f 061b 	mvn.w	r6, #27
   1c7dc:	b13a      	cbz	r2, 1c7ee <bt_att_recv+0x252>
   1c7de:	2104      	movs	r1, #4
   1c7e0:	7139      	strb	r1, [r7, #4]
   1c7e2:	2100      	movs	r1, #0
   1c7e4:	7179      	strb	r1, [r7, #5]
   1c7e6:	71b9      	strb	r1, [r7, #6]
   1c7e8:	71f9      	strb	r1, [r7, #7]
   1c7ea:	6878      	ldr	r0, [r7, #4]
   1c7ec:	6118      	str	r0, [r3, #16]
   1c7ee:	2100      	movs	r1, #0
   1c7f0:	f36f 0100 	bfc	r1, #0, #1
   1c7f4:	f36f 0141 	bfc	r1, #1, #1
   1c7f8:	f36f 0182 	bfc	r1, #2, #1
   1c7fc:	f36f 01c5 	bfc	r1, #3, #3
   1c800:	2301      	movs	r3, #1
   1c802:	f363 1188 	bfi	r1, r3, #6, #3
   1c806:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
   1c80a:	f363 2152 	bfi	r1, r3, #9, #10
   1c80e:	f36f 41de 	bfc	r1, #19, #12
   1c812:	f36f 71df 	bfc	r1, #31, #1
   1c816:	2300      	movs	r3, #0
   1c818:	4810      	ldr	r0, [pc, #64]	; (1c85c <bt_att_recv+0x2c0>)
   1c81a:	f00c fad2 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1c81e:	46ad      	mov	sp, r5
		err = BT_ATT_ERR_INVALID_PDU;
   1c820:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
   1c822:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c826:	2b01      	cmp	r3, #1
   1c828:	f47f aef9 	bne.w	1c61e <bt_att_recv+0x82>
   1c82c:	2800      	cmp	r0, #0
   1c82e:	f43f aef6 	beq.w	1c61e <bt_att_recv+0x82>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1c832:	4603      	mov	r3, r0
   1c834:	2200      	movs	r2, #0
   1c836:	7821      	ldrb	r1, [r4, #0]
   1c838:	4640      	mov	r0, r8
   1c83a:	f00e fae3 	bl	2ae04 <send_err_rsp>
   1c83e:	e6ee      	b.n	1c61e <bt_att_recv+0x82>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c840:	f06f 061b 	mvn.w	r6, #27
   1c844:	e7ca      	b.n	1c7dc <bt_att_recv+0x240>
		err = handler->func(att_chan, buf);
   1c846:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c84a:	4629      	mov	r1, r5
   1c84c:	4640      	mov	r0, r8
   1c84e:	4798      	blx	r3
   1c850:	e7e7      	b.n	1c822 <bt_att_recv+0x286>
   1c852:	bf00      	nop
   1c854:	00030d70 	.word	0x00030d70
   1c858:	00030c9c 	.word	0x00030c9c
   1c85c:	0002ee80 	.word	0x0002ee80
   1c860:	00030cd4 	.word	0x00030cd4
   1c864:	00030cf0 	.word	0x00030cf0
   1c868:	00030d10 	.word	0x00030d10
   1c86c:	00030cb8 	.word	0x00030cb8

0001c870 <att_write_rsp>:
{
   1c870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c874:	b08a      	sub	sp, #40	; 0x28
   1c876:	4604      	mov	r4, r0
   1c878:	4616      	mov	r6, r2
   1c87a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c87c:	6803      	ldr	r3, [r0, #0]
   1c87e:	4688      	mov	r8, r1
   1c880:	3900      	subs	r1, #0
   1c882:	bf18      	it	ne
   1c884:	2101      	movne	r1, #1
   1c886:	6818      	ldr	r0, [r3, #0]
   1c888:	f00f f890 	bl	2b9ac <bt_gatt_change_aware>
   1c88c:	b128      	cbz	r0, 1c89a <att_write_rsp+0x2a>
	if (!handle) {
   1c88e:	b975      	cbnz	r5, 1c8ae <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c890:	2701      	movs	r7, #1
}
   1c892:	4638      	mov	r0, r7
   1c894:	b00a      	add	sp, #40	; 0x28
   1c896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1c89a:	2105      	movs	r1, #5
   1c89c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1c8a0:	f00e fa49 	bl	2ad36 <atomic_test_and_set_bit>
   1c8a4:	b108      	cbz	r0, 1c8aa <att_write_rsp+0x3a>
			return 0;
   1c8a6:	2700      	movs	r7, #0
   1c8a8:	e7f3      	b.n	1c892 <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c8aa:	2712      	movs	r7, #18
   1c8ac:	e7f1      	b.n	1c892 <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   1c8ae:	2300      	movs	r3, #0
   1c8b0:	9304      	str	r3, [sp, #16]
   1c8b2:	9305      	str	r3, [sp, #20]
   1c8b4:	9306      	str	r3, [sp, #24]
   1c8b6:	9307      	str	r3, [sp, #28]
   1c8b8:	9308      	str	r3, [sp, #32]
   1c8ba:	9309      	str	r3, [sp, #36]	; 0x24
	if (rsp) {
   1c8bc:	b13e      	cbz	r6, 1c8ce <att_write_rsp+0x5e>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1c8be:	461a      	mov	r2, r3
   1c8c0:	4631      	mov	r1, r6
   1c8c2:	4620      	mov	r0, r4
   1c8c4:	f7ff fd82 	bl	1c3cc <bt_att_chan_create_pdu>
   1c8c8:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1c8ca:	2800      	cmp	r0, #0
   1c8cc:	d03e      	beq.n	1c94c <att_write_rsp+0xdc>
	data.conn = chan->att->conn;
   1c8ce:	6823      	ldr	r3, [r4, #0]
   1c8d0:	681b      	ldr	r3, [r3, #0]
   1c8d2:	9304      	str	r3, [sp, #16]
	data.req = req;
   1c8d4:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1c8d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1c8dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1c8e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c8e2:	9307      	str	r3, [sp, #28]
	data.len = len;
   1c8e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1c8e8:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c8ec:	2301      	movs	r3, #1
   1c8ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c8f2:	ab04      	add	r3, sp, #16
   1c8f4:	9302      	str	r3, [sp, #8]
   1c8f6:	4b16      	ldr	r3, [pc, #88]	; (1c950 <att_write_rsp+0xe0>)
   1c8f8:	9301      	str	r3, [sp, #4]
   1c8fa:	2200      	movs	r2, #0
   1c8fc:	9200      	str	r2, [sp, #0]
   1c8fe:	4613      	mov	r3, r2
   1c900:	4629      	mov	r1, r5
   1c902:	4628      	mov	r0, r5
   1c904:	f000 ff26 	bl	1d754 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1c908:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1c90c:	b937      	cbnz	r7, 1c91c <att_write_rsp+0xac>
	if (data.buf) {
   1c90e:	9905      	ldr	r1, [sp, #20]
   1c910:	2900      	cmp	r1, #0
   1c912:	d0be      	beq.n	1c892 <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   1c914:	4620      	mov	r0, r4
   1c916:	f00e f861 	bl	2a9dc <bt_att_chan_send_rsp>
   1c91a:	e7ba      	b.n	1c892 <att_write_rsp+0x22>
		if (rsp) {
   1c91c:	b926      	cbnz	r6, 1c928 <att_write_rsp+0xb8>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1c91e:	f1b8 0f18 	cmp.w	r8, #24
   1c922:	d010      	beq.n	1c946 <att_write_rsp+0xd6>
   1c924:	2700      	movs	r7, #0
   1c926:	e7b4      	b.n	1c892 <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1c928:	9b05      	ldr	r3, [sp, #20]
   1c92a:	6998      	ldr	r0, [r3, #24]
   1c92c:	f7ff fac0 	bl	1beb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1c930:	9805      	ldr	r0, [sp, #20]
   1c932:	f00f f9ee 	bl	2bd12 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1c936:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1c93a:	462a      	mov	r2, r5
   1c93c:	4641      	mov	r1, r8
   1c93e:	4620      	mov	r0, r4
   1c940:	f00e fa60 	bl	2ae04 <send_err_rsp>
   1c944:	e7eb      	b.n	1c91e <att_write_rsp+0xae>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1c946:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1c94a:	e7a2      	b.n	1c892 <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   1c94c:	270e      	movs	r7, #14
   1c94e:	e7a0      	b.n	1c892 <att_write_rsp+0x22>
   1c950:	0002a97d 	.word	0x0002a97d

0001c954 <bt_att_create_pdu>:
{
   1c954:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c956:	b083      	sub	sp, #12
   1c958:	af00      	add	r7, sp, #0
   1c95a:	460e      	mov	r6, r1
   1c95c:	4615      	mov	r5, r2
	att = att_get(conn);
   1c95e:	f7ff f92f 	bl	1bbc0 <att_get>
	if (!att) {
   1c962:	4604      	mov	r4, r0
   1c964:	b300      	cbz	r0, 1c9a8 <bt_att_create_pdu+0x54>
	return list->head;
   1c966:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c968:	b314      	cbz	r4, 1c9b0 <bt_att_create_pdu+0x5c>
   1c96a:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c96c:	f114 00e0 	adds.w	r0, r4, #224	; 0xe0
   1c970:	d007      	beq.n	1c982 <bt_att_create_pdu+0x2e>
	return node->next;
   1c972:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
   1c976:	b120      	cbz	r0, 1c982 <bt_att_create_pdu+0x2e>
   1c978:	38e0      	subs	r0, #224	; 0xe0
   1c97a:	e002      	b.n	1c982 <bt_att_create_pdu+0x2e>
   1c97c:	4603      	mov	r3, r0
   1c97e:	4604      	mov	r4, r0
   1c980:	4618      	mov	r0, r3
   1c982:	b1bc      	cbz	r4, 1c9b4 <bt_att_create_pdu+0x60>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c984:	1c6b      	adds	r3, r5, #1
   1c986:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1c988:	4293      	cmp	r3, r2
   1c98a:	d907      	bls.n	1c99c <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c98c:	2800      	cmp	r0, #0
   1c98e:	d0f5      	beq.n	1c97c <bt_att_create_pdu+0x28>
   1c990:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
   1c994:	2b00      	cmp	r3, #0
   1c996:	d0f2      	beq.n	1c97e <bt_att_create_pdu+0x2a>
   1c998:	3be0      	subs	r3, #224	; 0xe0
   1c99a:	e7f0      	b.n	1c97e <bt_att_create_pdu+0x2a>
		return bt_att_chan_create_pdu(chan, op, len);
   1c99c:	462a      	mov	r2, r5
   1c99e:	4631      	mov	r1, r6
   1c9a0:	4620      	mov	r0, r4
   1c9a2:	f7ff fd13 	bl	1c3cc <bt_att_chan_create_pdu>
   1c9a6:	4604      	mov	r4, r0
}
   1c9a8:	4620      	mov	r0, r4
   1c9aa:	370c      	adds	r7, #12
   1c9ac:	46bd      	mov	sp, r7
   1c9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c9b0:	4620      	mov	r0, r4
   1c9b2:	e7e6      	b.n	1c982 <bt_att_create_pdu+0x2e>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1c9b4:	3501      	adds	r5, #1
   1c9b6:	466e      	mov	r6, sp
   1c9b8:	b088      	sub	sp, #32
   1c9ba:	466b      	mov	r3, sp
   1c9bc:	f113 0210 	adds.w	r2, r3, #16
   1c9c0:	d031      	beq.n	1ca26 <bt_att_create_pdu+0xd2>
   1c9c2:	210c      	movs	r1, #12
   1c9c4:	b14a      	cbz	r2, 1c9da <bt_att_create_pdu+0x86>
   1c9c6:	4608      	mov	r0, r1
   1c9c8:	2904      	cmp	r1, #4
   1c9ca:	dd03      	ble.n	1c9d4 <bt_att_create_pdu+0x80>
   1c9cc:	f8df c068 	ldr.w	ip, [pc, #104]	; 1ca38 <bt_att_create_pdu+0xe4>
   1c9d0:	f8c3 c014 	str.w	ip, [r3, #20]
   1c9d4:	2808      	cmp	r0, #8
   1c9d6:	dd00      	ble.n	1c9da <bt_att_create_pdu+0x86>
   1c9d8:	619d      	str	r5, [r3, #24]
   1c9da:	290b      	cmp	r1, #11
   1c9dc:	dd26      	ble.n	1ca2c <bt_att_create_pdu+0xd8>
   1c9de:	250c      	movs	r5, #12
   1c9e0:	b13a      	cbz	r2, 1c9f2 <bt_att_create_pdu+0x9e>
   1c9e2:	2103      	movs	r1, #3
   1c9e4:	7139      	strb	r1, [r7, #4]
   1c9e6:	2100      	movs	r1, #0
   1c9e8:	7179      	strb	r1, [r7, #5]
   1c9ea:	71b9      	strb	r1, [r7, #6]
   1c9ec:	71f9      	strb	r1, [r7, #7]
   1c9ee:	6878      	ldr	r0, [r7, #4]
   1c9f0:	6118      	str	r0, [r3, #16]
   1c9f2:	2100      	movs	r1, #0
   1c9f4:	f36f 0100 	bfc	r1, #0, #1
   1c9f8:	f36f 0141 	bfc	r1, #1, #1
   1c9fc:	f36f 0182 	bfc	r1, #2, #1
   1ca00:	f36f 01c5 	bfc	r1, #3, #3
   1ca04:	2302      	movs	r3, #2
   1ca06:	f363 1188 	bfi	r1, r3, #6, #3
   1ca0a:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1ca0e:	f363 2152 	bfi	r1, r3, #9, #10
   1ca12:	f36f 41de 	bfc	r1, #19, #12
   1ca16:	f36f 71df 	bfc	r1, #31, #1
   1ca1a:	2300      	movs	r3, #0
   1ca1c:	4805      	ldr	r0, [pc, #20]	; (1ca34 <bt_att_create_pdu+0xe0>)
   1ca1e:	f00c f9d0 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1ca22:	46b5      	mov	sp, r6
	return NULL;
   1ca24:	e7c0      	b.n	1c9a8 <bt_att_create_pdu+0x54>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1ca26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ca2a:	e7cb      	b.n	1c9c4 <bt_att_create_pdu+0x70>
   1ca2c:	f06f 051b 	mvn.w	r5, #27
   1ca30:	e7d6      	b.n	1c9e0 <bt_att_create_pdu+0x8c>
   1ca32:	bf00      	nop
   1ca34:	0002ee80 	.word	0x0002ee80
   1ca38:	00030d30 	.word	0x00030d30

0001ca3c <att_read_group_rsp>:
{
   1ca3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca40:	b08a      	sub	sp, #40	; 0x28
   1ca42:	4605      	mov	r5, r0
   1ca44:	4688      	mov	r8, r1
   1ca46:	4616      	mov	r6, r2
   1ca48:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1ca4a:	2400      	movs	r4, #0
   1ca4c:	9405      	str	r4, [sp, #20]
   1ca4e:	9406      	str	r4, [sp, #24]
   1ca50:	9407      	str	r4, [sp, #28]
   1ca52:	9408      	str	r4, [sp, #32]
   1ca54:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1ca56:	2201      	movs	r2, #1
   1ca58:	2111      	movs	r1, #17
   1ca5a:	6840      	ldr	r0, [r0, #4]
   1ca5c:	f7ff ff7a 	bl	1c954 <bt_att_create_pdu>
   1ca60:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1ca62:	b370      	cbz	r0, 1cac2 <att_read_group_rsp+0x86>
	data.chan = chan;
   1ca64:	9505      	str	r5, [sp, #20]
	data.uuid = uuid;
   1ca66:	f8cd 8018 	str.w	r8, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1ca6a:	2101      	movs	r1, #1
   1ca6c:	300c      	adds	r0, #12
   1ca6e:	f00f f997 	bl	2bda0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1ca72:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1ca74:	4622      	mov	r2, r4
   1ca76:	7004      	strb	r4, [r0, #0]
	data.group = NULL;
   1ca78:	9409      	str	r4, [sp, #36]	; 0x24
   1ca7a:	ab05      	add	r3, sp, #20
   1ca7c:	9302      	str	r3, [sp, #8]
   1ca7e:	4b12      	ldr	r3, [pc, #72]	; (1cac8 <att_read_group_rsp+0x8c>)
   1ca80:	9301      	str	r3, [sp, #4]
   1ca82:	9400      	str	r4, [sp, #0]
   1ca84:	4623      	mov	r3, r4
   1ca86:	4639      	mov	r1, r7
   1ca88:	4630      	mov	r0, r6
   1ca8a:	f000 fe63 	bl	1d754 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1ca8e:	9b08      	ldr	r3, [sp, #32]
   1ca90:	781c      	ldrb	r4, [r3, #0]
   1ca92:	b144      	cbz	r4, 1caa6 <att_read_group_rsp+0x6a>
	bt_att_chan_send_rsp(chan, data.buf);
   1ca94:	9907      	ldr	r1, [sp, #28]
   1ca96:	4628      	mov	r0, r5
   1ca98:	f00d ffa0 	bl	2a9dc <bt_att_chan_send_rsp>
	return 0;
   1ca9c:	2400      	movs	r4, #0
}
   1ca9e:	4620      	mov	r0, r4
   1caa0:	b00a      	add	sp, #40	; 0x28
   1caa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1caa6:	9b07      	ldr	r3, [sp, #28]
   1caa8:	6998      	ldr	r0, [r3, #24]
   1caaa:	f7ff fa01 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1caae:	9807      	ldr	r0, [sp, #28]
   1cab0:	f00f f92f 	bl	2bd12 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1cab4:	230a      	movs	r3, #10
   1cab6:	4632      	mov	r2, r6
   1cab8:	2110      	movs	r1, #16
   1caba:	4628      	mov	r0, r5
   1cabc:	f00e f9a2 	bl	2ae04 <send_err_rsp>
		return 0;
   1cac0:	e7ed      	b.n	1ca9e <att_read_group_rsp+0x62>
		return BT_ATT_ERR_UNLIKELY;
   1cac2:	240e      	movs	r4, #14
   1cac4:	e7eb      	b.n	1ca9e <att_read_group_rsp+0x62>
   1cac6:	bf00      	nop
   1cac8:	0001bfad 	.word	0x0001bfad

0001cacc <att_read_mult_vl_req>:
{
   1cacc:	b570      	push	{r4, r5, r6, lr}
   1cace:	b088      	sub	sp, #32
   1cad0:	4606      	mov	r6, r0
   1cad2:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1cad4:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1cad6:	2101      	movs	r1, #1
   1cad8:	4620      	mov	r0, r4
   1cada:	f00e ff67 	bl	2b9ac <bt_gatt_change_aware>
   1cade:	b950      	cbnz	r0, 1caf6 <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1cae0:	2105      	movs	r1, #5
   1cae2:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1cae6:	f00e f926 	bl	2ad36 <atomic_test_and_set_bit>
   1caea:	b110      	cbz	r0, 1caf2 <att_read_mult_vl_req+0x26>
			return 0;
   1caec:	2000      	movs	r0, #0
}
   1caee:	b008      	add	sp, #32
   1caf0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1caf2:	2012      	movs	r0, #18
   1caf4:	e7fb      	b.n	1caee <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1caf6:	2200      	movs	r2, #0
   1caf8:	9204      	str	r2, [sp, #16]
   1cafa:	9205      	str	r2, [sp, #20]
   1cafc:	9206      	str	r2, [sp, #24]
   1cafe:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1cb00:	2121      	movs	r1, #33	; 0x21
   1cb02:	4620      	mov	r0, r4
   1cb04:	f7ff ff26 	bl	1c954 <bt_att_create_pdu>
   1cb08:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1cb0a:	b378      	cbz	r0, 1cb6c <att_read_mult_vl_req+0xa0>
	data.chan = chan;
   1cb0c:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1cb0e:	8a2b      	ldrh	r3, [r5, #16]
   1cb10:	2b01      	cmp	r3, #1
   1cb12:	d925      	bls.n	1cb60 <att_read_mult_vl_req+0x94>
	return net_buf_simple_pull_le16(&buf->b);
   1cb14:	f105 000c 	add.w	r0, r5, #12
   1cb18:	f00f f972 	bl	2be00 <net_buf_simple_pull_le16>
   1cb1c:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1cb1e:	2301      	movs	r3, #1
   1cb20:	f88d 301c 	strb.w	r3, [sp, #28]
   1cb24:	ab04      	add	r3, sp, #16
   1cb26:	9302      	str	r3, [sp, #8]
   1cb28:	4b11      	ldr	r3, [pc, #68]	; (1cb70 <att_read_mult_vl_req+0xa4>)
   1cb2a:	9301      	str	r3, [sp, #4]
   1cb2c:	2200      	movs	r2, #0
   1cb2e:	9200      	str	r2, [sp, #0]
   1cb30:	4613      	mov	r3, r2
   1cb32:	4601      	mov	r1, r0
   1cb34:	f000 fe0e 	bl	1d754 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1cb38:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1cb3c:	2b00      	cmp	r3, #0
   1cb3e:	d0e6      	beq.n	1cb0e <att_read_mult_vl_req+0x42>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cb40:	9b06      	ldr	r3, [sp, #24]
   1cb42:	6998      	ldr	r0, [r3, #24]
   1cb44:	f7ff f9b4 	bl	1beb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1cb48:	9806      	ldr	r0, [sp, #24]
   1cb4a:	f00f f8e2 	bl	2bd12 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   1cb4e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1cb52:	4622      	mov	r2, r4
   1cb54:	2120      	movs	r1, #32
   1cb56:	4630      	mov	r0, r6
   1cb58:	f00e f954 	bl	2ae04 <send_err_rsp>
			return 0;
   1cb5c:	2000      	movs	r0, #0
   1cb5e:	e7c6      	b.n	1caee <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1cb60:	9906      	ldr	r1, [sp, #24]
   1cb62:	4630      	mov	r0, r6
   1cb64:	f00d ff3a 	bl	2a9dc <bt_att_chan_send_rsp>
	return 0;
   1cb68:	2000      	movs	r0, #0
   1cb6a:	e7c0      	b.n	1caee <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1cb6c:	200e      	movs	r0, #14
   1cb6e:	e7be      	b.n	1caee <att_read_mult_vl_req+0x22>
   1cb70:	0002ab4b 	.word	0x0002ab4b

0001cb74 <att_read_mult_req>:
{
   1cb74:	b570      	push	{r4, r5, r6, lr}
   1cb76:	b088      	sub	sp, #32
   1cb78:	4606      	mov	r6, r0
   1cb7a:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1cb7c:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1cb7e:	2101      	movs	r1, #1
   1cb80:	4620      	mov	r0, r4
   1cb82:	f00e ff13 	bl	2b9ac <bt_gatt_change_aware>
   1cb86:	b950      	cbnz	r0, 1cb9e <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1cb88:	2105      	movs	r1, #5
   1cb8a:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1cb8e:	f00e f8d2 	bl	2ad36 <atomic_test_and_set_bit>
   1cb92:	b110      	cbz	r0, 1cb9a <att_read_mult_req+0x26>
			return 0;
   1cb94:	2000      	movs	r0, #0
}
   1cb96:	b008      	add	sp, #32
   1cb98:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1cb9a:	2012      	movs	r0, #18
   1cb9c:	e7fb      	b.n	1cb96 <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   1cb9e:	2200      	movs	r2, #0
   1cba0:	9204      	str	r2, [sp, #16]
   1cba2:	9205      	str	r2, [sp, #20]
   1cba4:	9206      	str	r2, [sp, #24]
   1cba6:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1cba8:	210f      	movs	r1, #15
   1cbaa:	4620      	mov	r0, r4
   1cbac:	f7ff fed2 	bl	1c954 <bt_att_create_pdu>
   1cbb0:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1cbb2:	b378      	cbz	r0, 1cc14 <att_read_mult_req+0xa0>
	data.chan = chan;
   1cbb4:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1cbb6:	8a2b      	ldrh	r3, [r5, #16]
   1cbb8:	2b01      	cmp	r3, #1
   1cbba:	d925      	bls.n	1cc08 <att_read_mult_req+0x94>
   1cbbc:	f105 000c 	add.w	r0, r5, #12
   1cbc0:	f00f f91e 	bl	2be00 <net_buf_simple_pull_le16>
   1cbc4:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1cbc6:	2301      	movs	r3, #1
   1cbc8:	f88d 301c 	strb.w	r3, [sp, #28]
   1cbcc:	ab04      	add	r3, sp, #16
   1cbce:	9302      	str	r3, [sp, #8]
   1cbd0:	4b11      	ldr	r3, [pc, #68]	; (1cc18 <att_read_mult_req+0xa4>)
   1cbd2:	9301      	str	r3, [sp, #4]
   1cbd4:	2200      	movs	r2, #0
   1cbd6:	9200      	str	r2, [sp, #0]
   1cbd8:	4613      	mov	r3, r2
   1cbda:	4601      	mov	r1, r0
   1cbdc:	f000 fdba 	bl	1d754 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1cbe0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1cbe4:	2b00      	cmp	r3, #0
   1cbe6:	d0e6      	beq.n	1cbb6 <att_read_mult_req+0x42>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cbe8:	9b06      	ldr	r3, [sp, #24]
   1cbea:	6998      	ldr	r0, [r3, #24]
   1cbec:	f7ff f960 	bl	1beb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1cbf0:	9806      	ldr	r0, [sp, #24]
   1cbf2:	f00f f88e 	bl	2bd12 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1cbf6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1cbfa:	4622      	mov	r2, r4
   1cbfc:	210e      	movs	r1, #14
   1cbfe:	4630      	mov	r0, r6
   1cc00:	f00e f900 	bl	2ae04 <send_err_rsp>
			return 0;
   1cc04:	2000      	movs	r0, #0
   1cc06:	e7c6      	b.n	1cb96 <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   1cc08:	9906      	ldr	r1, [sp, #24]
   1cc0a:	4630      	mov	r0, r6
   1cc0c:	f00d fee6 	bl	2a9dc <bt_att_chan_send_rsp>
	return 0;
   1cc10:	2000      	movs	r0, #0
   1cc12:	e7c0      	b.n	1cb96 <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   1cc14:	200e      	movs	r0, #14
   1cc16:	e7be      	b.n	1cb96 <att_read_mult_req+0x22>
   1cc18:	0002abb1 	.word	0x0002abb1

0001cc1c <att_read_rsp>:
{
   1cc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc20:	b088      	sub	sp, #32
   1cc22:	4604      	mov	r4, r0
   1cc24:	4688      	mov	r8, r1
   1cc26:	4616      	mov	r6, r2
   1cc28:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1cc2a:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   1cc2c:	2101      	movs	r1, #1
   1cc2e:	4638      	mov	r0, r7
   1cc30:	f00e febc 	bl	2b9ac <bt_gatt_change_aware>
   1cc34:	b128      	cbz	r0, 1cc42 <att_read_rsp+0x26>
	if (!handle) {
   1cc36:	b975      	cbnz	r5, 1cc56 <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1cc38:	2601      	movs	r6, #1
}
   1cc3a:	4630      	mov	r0, r6
   1cc3c:	b008      	add	sp, #32
   1cc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1cc42:	2105      	movs	r1, #5
   1cc44:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1cc48:	f00e f875 	bl	2ad36 <atomic_test_and_set_bit>
   1cc4c:	b108      	cbz	r0, 1cc52 <att_read_rsp+0x36>
			return 0;
   1cc4e:	2600      	movs	r6, #0
   1cc50:	e7f3      	b.n	1cc3a <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1cc52:	2612      	movs	r6, #18
   1cc54:	e7f1      	b.n	1cc3a <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   1cc56:	2200      	movs	r2, #0
   1cc58:	9204      	str	r2, [sp, #16]
   1cc5a:	9205      	str	r2, [sp, #20]
   1cc5c:	9206      	str	r2, [sp, #24]
   1cc5e:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1cc60:	4631      	mov	r1, r6
   1cc62:	4638      	mov	r0, r7
   1cc64:	f7ff fe76 	bl	1c954 <bt_att_create_pdu>
   1cc68:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1cc6a:	b350      	cbz	r0, 1ccc2 <att_read_rsp+0xa6>
	data.chan = chan;
   1cc6c:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1cc6e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1cc72:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1cc76:	2301      	movs	r3, #1
   1cc78:	f88d 301c 	strb.w	r3, [sp, #28]
   1cc7c:	ab04      	add	r3, sp, #16
   1cc7e:	9302      	str	r3, [sp, #8]
   1cc80:	4b11      	ldr	r3, [pc, #68]	; (1ccc8 <att_read_rsp+0xac>)
   1cc82:	9301      	str	r3, [sp, #4]
   1cc84:	2200      	movs	r2, #0
   1cc86:	9200      	str	r2, [sp, #0]
   1cc88:	4613      	mov	r3, r2
   1cc8a:	4629      	mov	r1, r5
   1cc8c:	4628      	mov	r0, r5
   1cc8e:	f000 fd61 	bl	1d754 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1cc92:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1cc96:	b926      	cbnz	r6, 1cca2 <att_read_rsp+0x86>
	bt_att_chan_send_rsp(chan, data.buf);
   1cc98:	9906      	ldr	r1, [sp, #24]
   1cc9a:	4620      	mov	r0, r4
   1cc9c:	f00d fe9e 	bl	2a9dc <bt_att_chan_send_rsp>
	return 0;
   1cca0:	e7cb      	b.n	1cc3a <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cca2:	9b06      	ldr	r3, [sp, #24]
   1cca4:	6998      	ldr	r0, [r3, #24]
   1cca6:	f7ff f903 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1ccaa:	9806      	ldr	r0, [sp, #24]
   1ccac:	f00f f831 	bl	2bd12 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1ccb0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1ccb4:	462a      	mov	r2, r5
   1ccb6:	4641      	mov	r1, r8
   1ccb8:	4620      	mov	r0, r4
   1ccba:	f00e f8a3 	bl	2ae04 <send_err_rsp>
		return 0;
   1ccbe:	2600      	movs	r6, #0
   1ccc0:	e7bb      	b.n	1cc3a <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   1ccc2:	260e      	movs	r6, #14
   1ccc4:	e7b9      	b.n	1cc3a <att_read_rsp+0x1e>
   1ccc6:	bf00      	nop
   1ccc8:	0002abb1 	.word	0x0002abb1

0001cccc <att_read_type_rsp>:
{
   1cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccd0:	b08a      	sub	sp, #40	; 0x28
   1ccd2:	4605      	mov	r5, r0
   1ccd4:	4688      	mov	r8, r1
   1ccd6:	4616      	mov	r6, r2
   1ccd8:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1ccda:	2400      	movs	r4, #0
   1ccdc:	9404      	str	r4, [sp, #16]
   1ccde:	9405      	str	r4, [sp, #20]
   1cce0:	9406      	str	r4, [sp, #24]
   1cce2:	9407      	str	r4, [sp, #28]
   1cce4:	9408      	str	r4, [sp, #32]
   1cce6:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1cce8:	2201      	movs	r2, #1
   1ccea:	2109      	movs	r1, #9
   1ccec:	6840      	ldr	r0, [r0, #4]
   1ccee:	f7ff fe31 	bl	1c954 <bt_att_create_pdu>
   1ccf2:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1ccf4:	b388      	cbz	r0, 1cd5a <att_read_type_rsp+0x8e>
	data.chan = chan;
   1ccf6:	9504      	str	r5, [sp, #16]
	data.uuid = uuid;
   1ccf8:	f8cd 8014 	str.w	r8, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1ccfc:	2101      	movs	r1, #1
   1ccfe:	300c      	adds	r0, #12
   1cd00:	f00f f84e 	bl	2bda0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1cd04:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1cd06:	4622      	mov	r2, r4
   1cd08:	7004      	strb	r4, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1cd0a:	230a      	movs	r3, #10
   1cd0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cd10:	ab04      	add	r3, sp, #16
   1cd12:	9302      	str	r3, [sp, #8]
   1cd14:	4b12      	ldr	r3, [pc, #72]	; (1cd60 <att_read_type_rsp+0x94>)
   1cd16:	9301      	str	r3, [sp, #4]
   1cd18:	9400      	str	r4, [sp, #0]
   1cd1a:	4623      	mov	r3, r4
   1cd1c:	4639      	mov	r1, r7
   1cd1e:	4630      	mov	r0, r6
   1cd20:	f000 fd18 	bl	1d754 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1cd24:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1cd28:	b93c      	cbnz	r4, 1cd3a <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf);
   1cd2a:	9906      	ldr	r1, [sp, #24]
   1cd2c:	4628      	mov	r0, r5
   1cd2e:	f00d fe55 	bl	2a9dc <bt_att_chan_send_rsp>
}
   1cd32:	4620      	mov	r0, r4
   1cd34:	b00a      	add	sp, #40	; 0x28
   1cd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cd3a:	9b06      	ldr	r3, [sp, #24]
   1cd3c:	6998      	ldr	r0, [r3, #24]
   1cd3e:	f7ff f8b7 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1cd42:	9806      	ldr	r0, [sp, #24]
   1cd44:	f00e ffe5 	bl	2bd12 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1cd48:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1cd4c:	4632      	mov	r2, r6
   1cd4e:	2108      	movs	r1, #8
   1cd50:	4628      	mov	r0, r5
   1cd52:	f00e f857 	bl	2ae04 <send_err_rsp>
		return 0;
   1cd56:	2400      	movs	r4, #0
   1cd58:	e7eb      	b.n	1cd32 <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   1cd5a:	240e      	movs	r4, #14
   1cd5c:	e7e9      	b.n	1cd32 <att_read_type_rsp+0x66>
   1cd5e:	bf00      	nop
   1cd60:	0001c061 	.word	0x0001c061

0001cd64 <att_find_type_rsp>:
{
   1cd64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd66:	b08b      	sub	sp, #44	; 0x2c
   1cd68:	4604      	mov	r4, r0
   1cd6a:	460d      	mov	r5, r1
   1cd6c:	4616      	mov	r6, r2
   1cd6e:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1cd70:	2200      	movs	r2, #0
   1cd72:	9205      	str	r2, [sp, #20]
   1cd74:	9206      	str	r2, [sp, #24]
   1cd76:	9207      	str	r2, [sp, #28]
   1cd78:	9208      	str	r2, [sp, #32]
   1cd7a:	9209      	str	r2, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1cd7c:	2107      	movs	r1, #7
   1cd7e:	6840      	ldr	r0, [r0, #4]
   1cd80:	f7ff fde8 	bl	1c954 <bt_att_create_pdu>
   1cd84:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1cd86:	b370      	cbz	r0, 1cde6 <att_find_type_rsp+0x82>
	data.chan = chan;
   1cd88:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1cd8a:	2200      	movs	r2, #0
   1cd8c:	9207      	str	r2, [sp, #28]
	data.value = value;
   1cd8e:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1cd90:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1cd94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1cd98:	230a      	movs	r3, #10
   1cd9a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1cd9e:	ab05      	add	r3, sp, #20
   1cda0:	9302      	str	r3, [sp, #8]
   1cda2:	4b12      	ldr	r3, [pc, #72]	; (1cdec <att_find_type_rsp+0x88>)
   1cda4:	9301      	str	r3, [sp, #4]
   1cda6:	9200      	str	r2, [sp, #0]
   1cda8:	4613      	mov	r3, r2
   1cdaa:	4631      	mov	r1, r6
   1cdac:	4628      	mov	r0, r5
   1cdae:	f000 fcd1 	bl	1d754 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1cdb2:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1cdb6:	b936      	cbnz	r6, 1cdc6 <att_find_type_rsp+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1cdb8:	9906      	ldr	r1, [sp, #24]
   1cdba:	4620      	mov	r0, r4
   1cdbc:	f00d fe0e 	bl	2a9dc <bt_att_chan_send_rsp>
}
   1cdc0:	4630      	mov	r0, r6
   1cdc2:	b00b      	add	sp, #44	; 0x2c
   1cdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1cdc6:	9b06      	ldr	r3, [sp, #24]
   1cdc8:	6998      	ldr	r0, [r3, #24]
   1cdca:	f7ff f871 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1cdce:	9806      	ldr	r0, [sp, #24]
   1cdd0:	f00e ff9f 	bl	2bd12 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1cdd4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1cdd8:	462a      	mov	r2, r5
   1cdda:	2106      	movs	r1, #6
   1cddc:	4620      	mov	r0, r4
   1cdde:	f00e f811 	bl	2ae04 <send_err_rsp>
		return 0;
   1cde2:	2600      	movs	r6, #0
   1cde4:	e7ec      	b.n	1cdc0 <att_find_type_rsp+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   1cde6:	260e      	movs	r6, #14
   1cde8:	e7ea      	b.n	1cdc0 <att_find_type_rsp+0x5c>
   1cdea:	bf00      	nop
   1cdec:	0001c109 	.word	0x0001c109

0001cdf0 <att_find_info_rsp>:
{
   1cdf0:	b570      	push	{r4, r5, r6, lr}
   1cdf2:	b088      	sub	sp, #32
   1cdf4:	4604      	mov	r4, r0
   1cdf6:	460e      	mov	r6, r1
   1cdf8:	4615      	mov	r5, r2
	(void)memset(&data, 0, sizeof(data));
   1cdfa:	2200      	movs	r2, #0
   1cdfc:	9204      	str	r2, [sp, #16]
   1cdfe:	9205      	str	r2, [sp, #20]
   1ce00:	9206      	str	r2, [sp, #24]
   1ce02:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1ce04:	2105      	movs	r1, #5
   1ce06:	6840      	ldr	r0, [r0, #4]
   1ce08:	f7ff fda4 	bl	1c954 <bt_att_create_pdu>
   1ce0c:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1ce0e:	b318      	cbz	r0, 1ce58 <att_find_info_rsp+0x68>
	data.chan = chan;
   1ce10:	9404      	str	r4, [sp, #16]
   1ce12:	ab04      	add	r3, sp, #16
   1ce14:	9302      	str	r3, [sp, #8]
   1ce16:	4b11      	ldr	r3, [pc, #68]	; (1ce5c <att_find_info_rsp+0x6c>)
   1ce18:	9301      	str	r3, [sp, #4]
   1ce1a:	2200      	movs	r2, #0
   1ce1c:	9200      	str	r2, [sp, #0]
   1ce1e:	4613      	mov	r3, r2
   1ce20:	4629      	mov	r1, r5
   1ce22:	4630      	mov	r0, r6
   1ce24:	f000 fc96 	bl	1d754 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1ce28:	9b06      	ldr	r3, [sp, #24]
   1ce2a:	b133      	cbz	r3, 1ce3a <att_find_info_rsp+0x4a>
	bt_att_chan_send_rsp(chan, data.buf);
   1ce2c:	9905      	ldr	r1, [sp, #20]
   1ce2e:	4620      	mov	r0, r4
   1ce30:	f00d fdd4 	bl	2a9dc <bt_att_chan_send_rsp>
	return 0;
   1ce34:	2000      	movs	r0, #0
}
   1ce36:	b008      	add	sp, #32
   1ce38:	bd70      	pop	{r4, r5, r6, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ce3a:	9b05      	ldr	r3, [sp, #20]
   1ce3c:	6998      	ldr	r0, [r3, #24]
   1ce3e:	f7ff f837 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1ce42:	9805      	ldr	r0, [sp, #20]
   1ce44:	f00e ff65 	bl	2bd12 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1ce48:	230a      	movs	r3, #10
   1ce4a:	4632      	mov	r2, r6
   1ce4c:	2104      	movs	r1, #4
   1ce4e:	4620      	mov	r0, r4
   1ce50:	f00d ffd8 	bl	2ae04 <send_err_rsp>
		return 0;
   1ce54:	2000      	movs	r0, #0
   1ce56:	e7ee      	b.n	1ce36 <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1ce58:	200e      	movs	r0, #14
   1ce5a:	e7ec      	b.n	1ce36 <att_find_info_rsp+0x46>
   1ce5c:	0002abf9 	.word	0x0002abf9

0001ce60 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1ce60:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1ce62:	4809      	ldr	r0, [pc, #36]	; (1ce88 <bt_att_init+0x28>)
   1ce64:	f010 fc30 	bl	2d6c8 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1ce68:	2400      	movs	r4, #0
   1ce6a:	e008      	b.n	1ce7e <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1ce6c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1ce70:	0093      	lsls	r3, r2, #2
   1ce72:	4906      	ldr	r1, [pc, #24]	; (1ce8c <bt_att_init+0x2c>)
   1ce74:	4419      	add	r1, r3
   1ce76:	4804      	ldr	r0, [pc, #16]	; (1ce88 <bt_att_init+0x28>)
   1ce78:	f010 fc32 	bl	2d6e0 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1ce7c:	3401      	adds	r4, #1
   1ce7e:	2c02      	cmp	r4, #2
   1ce80:	d9f4      	bls.n	1ce6c <bt_att_init+0xc>
	}

	bt_gatt_init();
   1ce82:	f000 fc01 	bl	1d688 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1ce86:	bd10      	pop	{r4, pc}
   1ce88:	20000c34 	.word	0x20000c34
   1ce8c:	20003824 	.word	0x20003824

0001ce90 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1ce90:	b530      	push	{r4, r5, lr}
   1ce92:	b083      	sub	sp, #12
   1ce94:	4605      	mov	r5, r0
   1ce96:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1ce98:	2300      	movs	r3, #0
   1ce9a:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1ce9c:	f005 ff3c 	bl	22d18 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1cea0:	4b0b      	ldr	r3, [pc, #44]	; (1ced0 <bt_att_req_alloc+0x40>)
   1cea2:	681b      	ldr	r3, [r3, #0]
   1cea4:	4283      	cmp	r3, r0
   1cea6:	d00e      	beq.n	1cec6 <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1cea8:	462a      	mov	r2, r5
   1ceaa:	4623      	mov	r3, r4
   1ceac:	a901      	add	r1, sp, #4
   1ceae:	4809      	ldr	r0, [pc, #36]	; (1ced4 <bt_att_req_alloc+0x44>)
   1ceb0:	f004 ffaa 	bl	21e08 <k_mem_slab_alloc>
   1ceb4:	b950      	cbnz	r0, 1cecc <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1ceb6:	9801      	ldr	r0, [sp, #4]
   1ceb8:	2300      	movs	r3, #0
   1ceba:	6003      	str	r3, [r0, #0]
   1cebc:	6043      	str	r3, [r0, #4]
   1cebe:	6083      	str	r3, [r0, #8]
   1cec0:	60c3      	str	r3, [r0, #12]

	return req;
}
   1cec2:	b003      	add	sp, #12
   1cec4:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   1cec6:	2500      	movs	r5, #0
   1cec8:	462c      	mov	r4, r5
   1ceca:	e7ed      	b.n	1cea8 <bt_att_req_alloc+0x18>
		return NULL;
   1cecc:	2000      	movs	r0, #0
   1cece:	e7f8      	b.n	1cec2 <bt_att_req_alloc+0x32>
   1ced0:	20003860 	.word	0x20003860
   1ced4:	20000b4c 	.word	0x20000b4c

0001ced8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1ced8:	b500      	push	{lr}
   1ceda:	b083      	sub	sp, #12
   1cedc:	9001      	str	r0, [sp, #4]
	LOG_DBG("req %p", req);

	if (req->buf) {
   1cede:	6883      	ldr	r3, [r0, #8]
   1cee0:	b14b      	cbz	r3, 1cef6 <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1cee2:	6998      	ldr	r0, [r3, #24]
   1cee4:	f7fe ffe4 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1cee8:	9b01      	ldr	r3, [sp, #4]
   1ceea:	6898      	ldr	r0, [r3, #8]
   1ceec:	f00e ff11 	bl	2bd12 <net_buf_unref>
		req->buf = NULL;
   1cef0:	9b01      	ldr	r3, [sp, #4]
   1cef2:	2200      	movs	r2, #0
   1cef4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1cef6:	a901      	add	r1, sp, #4
   1cef8:	4802      	ldr	r0, [pc, #8]	; (1cf04 <bt_att_req_free+0x2c>)
   1cefa:	f010 fab2 	bl	2d462 <k_mem_slab_free>
}
   1cefe:	b003      	add	sp, #12
   1cf00:	f85d fb04 	ldr.w	pc, [sp], #4
   1cf04:	20000b4c 	.word	0x20000b4c

0001cf08 <att_handle_rsp>:
{
   1cf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf0c:	b08a      	sub	sp, #40	; 0x28
   1cf0e:	4604      	mov	r4, r0
   1cf10:	460f      	mov	r7, r1
   1cf12:	4691      	mov	r9, r2
   1cf14:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1cf16:	30b0      	adds	r0, #176	; 0xb0
   1cf18:	f010 fd61 	bl	2d9de <k_work_cancel_delayable>
	if (!chan->req) {
   1cf1c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1cf20:	b1f8      	cbz	r0, 1cf62 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   1cf22:	4b25      	ldr	r3, [pc, #148]	; (1cfb8 <att_handle_rsp+0xb0>)
   1cf24:	4298      	cmp	r0, r3
   1cf26:	d042      	beq.n	1cfae <att_handle_rsp+0xa6>
	func = chan->req->func;
   1cf28:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1cf2a:	f04f 0a00 	mov.w	sl, #0
   1cf2e:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1cf32:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1cf36:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1cf3a:	f7ff ffcd 	bl	1ced8 <bt_att_req_free>
	chan->req = NULL;
   1cf3e:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1cf42:	6820      	ldr	r0, [r4, #0]
   1cf44:	f00d fc00 	bl	2a748 <att_req_send_process>
	if (func) {
   1cf48:	b13d      	cbz	r5, 1cf5a <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   1cf4a:	6823      	ldr	r3, [r4, #0]
   1cf4c:	6818      	ldr	r0, [r3, #0]
   1cf4e:	f8cd 8000 	str.w	r8, [sp]
   1cf52:	464b      	mov	r3, r9
   1cf54:	463a      	mov	r2, r7
   1cf56:	4631      	mov	r1, r6
   1cf58:	47a8      	blx	r5
}
   1cf5a:	2000      	movs	r0, #0
   1cf5c:	b00a      	add	sp, #40	; 0x28
   1cf5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("No pending ATT request");
   1cf62:	4b16      	ldr	r3, [pc, #88]	; (1cfbc <att_handle_rsp+0xb4>)
   1cf64:	9309      	str	r3, [sp, #36]	; 0x24
   1cf66:	2302      	movs	r3, #2
   1cf68:	f88d 300c 	strb.w	r3, [sp, #12]
   1cf6c:	2500      	movs	r5, #0
   1cf6e:	f88d 500d 	strb.w	r5, [sp, #13]
   1cf72:	f88d 500e 	strb.w	r5, [sp, #14]
   1cf76:	f88d 500f 	strb.w	r5, [sp, #15]
   1cf7a:	9a03      	ldr	r2, [sp, #12]
   1cf7c:	9208      	str	r2, [sp, #32]
   1cf7e:	4629      	mov	r1, r5
   1cf80:	f365 0100 	bfi	r1, r5, #0, #1
   1cf84:	f365 0141 	bfi	r1, r5, #1, #1
   1cf88:	f365 0182 	bfi	r1, r5, #2, #1
   1cf8c:	f365 01c5 	bfi	r1, r5, #3, #3
   1cf90:	f363 1188 	bfi	r1, r3, #6, #3
   1cf94:	2308      	movs	r3, #8
   1cf96:	f363 2152 	bfi	r1, r3, #9, #10
   1cf9a:	f365 41de 	bfi	r1, r5, #19, #12
   1cf9e:	f365 71df 	bfi	r1, r5, #31, #1
   1cfa2:	462b      	mov	r3, r5
   1cfa4:	aa08      	add	r2, sp, #32
   1cfa6:	4806      	ldr	r0, [pc, #24]	; (1cfc0 <att_handle_rsp+0xb8>)
   1cfa8:	f00b ff0b 	bl	28dc2 <z_impl_z_log_msg_static_create>
		goto process;
   1cfac:	e7c9      	b.n	1cf42 <att_handle_rsp+0x3a>
		chan->req = NULL;
   1cfae:	2500      	movs	r5, #0
   1cfb0:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		goto process;
   1cfb4:	e7c5      	b.n	1cf42 <att_handle_rsp+0x3a>
   1cfb6:	bf00      	nop
   1cfb8:	20003864 	.word	0x20003864
   1cfbc:	00030d4c 	.word	0x00030d4c
   1cfc0:	0002ee80 	.word	0x0002ee80

0001cfc4 <att_reset>:
{
   1cfc4:	b530      	push	{r4, r5, lr}
   1cfc6:	b085      	sub	sp, #20
   1cfc8:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1cfca:	e005      	b.n	1cfd8 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1cfcc:	69a0      	ldr	r0, [r4, #24]
   1cfce:	f7fe ff6f 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(buf);
   1cfd2:	4620      	mov	r0, r4
   1cfd4:	f00e fe9d 	bl	2bd12 <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1cfd8:	2200      	movs	r2, #0
   1cfda:	2300      	movs	r3, #0
   1cfdc:	9803      	ldr	r0, [sp, #12]
   1cfde:	300c      	adds	r0, #12
   1cfe0:	f00e fe56 	bl	2bc90 <net_buf_get>
   1cfe4:	4604      	mov	r4, r0
   1cfe6:	2800      	cmp	r0, #0
   1cfe8:	d1f0      	bne.n	1cfcc <att_reset+0x8>
   1cfea:	e00b      	b.n	1d004 <att_reset+0x40>
	list->tail = node;
   1cfec:	609a      	str	r2, [r3, #8]
}
   1cfee:	e011      	b.n	1d014 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1cff0:	6818      	ldr	r0, [r3, #0]
   1cff2:	68e3      	ldr	r3, [r4, #12]
   1cff4:	9300      	str	r3, [sp, #0]
   1cff6:	2300      	movs	r3, #0
   1cff8:	461a      	mov	r2, r3
   1cffa:	210e      	movs	r1, #14
   1cffc:	47a8      	blx	r5
		bt_att_req_free(req);
   1cffe:	4620      	mov	r0, r4
   1d000:	f7ff ff6a 	bl	1ced8 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1d004:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1d006:	685c      	ldr	r4, [r3, #4]
   1d008:	b144      	cbz	r4, 1d01c <att_reset+0x58>
	return node->next;
   1d00a:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1d00c:	605a      	str	r2, [r3, #4]
	return list->tail;
   1d00e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d010:	42a1      	cmp	r1, r4
   1d012:	d0eb      	beq.n	1cfec <att_reset+0x28>
		if (req->func) {
   1d014:	6865      	ldr	r5, [r4, #4]
   1d016:	2d00      	cmp	r5, #0
   1d018:	d1ea      	bne.n	1cff0 <att_reset+0x2c>
   1d01a:	e7f0      	b.n	1cffe <att_reset+0x3a>
	att->conn = NULL;
   1d01c:	2200      	movs	r2, #0
   1d01e:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1d020:	a903      	add	r1, sp, #12
   1d022:	4802      	ldr	r0, [pc, #8]	; (1d02c <att_reset+0x68>)
   1d024:	f010 fa1d 	bl	2d462 <k_mem_slab_free>
}
   1d028:	b005      	add	sp, #20
   1d02a:	bd30      	pop	{r4, r5, pc}
   1d02c:	20000b14 	.word	0x20000b14

0001d030 <att_timeout>:
{
   1d030:	b510      	push	{r4, lr}
   1d032:	b088      	sub	sp, #32
   1d034:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1d036:	4b15      	ldr	r3, [pc, #84]	; (1d08c <att_timeout+0x5c>)
   1d038:	9307      	str	r3, [sp, #28]
   1d03a:	2302      	movs	r3, #2
   1d03c:	f88d 3004 	strb.w	r3, [sp, #4]
   1d040:	2300      	movs	r3, #0
   1d042:	f88d 3005 	strb.w	r3, [sp, #5]
   1d046:	f88d 3006 	strb.w	r3, [sp, #6]
   1d04a:	f88d 3007 	strb.w	r3, [sp, #7]
   1d04e:	9a01      	ldr	r2, [sp, #4]
   1d050:	9206      	str	r2, [sp, #24]
   1d052:	4619      	mov	r1, r3
   1d054:	f363 0100 	bfi	r1, r3, #0, #1
   1d058:	f363 0141 	bfi	r1, r3, #1, #1
   1d05c:	f363 0182 	bfi	r1, r3, #2, #1
   1d060:	f363 01c5 	bfi	r1, r3, #3, #3
   1d064:	2201      	movs	r2, #1
   1d066:	f362 1188 	bfi	r1, r2, #6, #3
   1d06a:	2208      	movs	r2, #8
   1d06c:	f362 2152 	bfi	r1, r2, #9, #10
   1d070:	f363 41de 	bfi	r1, r3, #19, #12
   1d074:	f363 71df 	bfi	r1, r3, #31, #1
   1d078:	aa06      	add	r2, sp, #24
   1d07a:	4805      	ldr	r0, [pc, #20]	; (1d090 <att_timeout+0x60>)
   1d07c:	f00b fea1 	bl	28dc2 <z_impl_z_log_msg_static_create>
	bt_att_disconnected(&chan->chan.chan);
   1d080:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
   1d084:	f00e f861 	bl	2b14a <bt_att_disconnected>
}
   1d088:	b008      	add	sp, #32
   1d08a:	bd10      	pop	{r4, pc}
   1d08c:	00030d64 	.word	0x00030d64
   1d090:	0002ee80 	.word	0x0002ee80

0001d094 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d094:	4b0d      	ldr	r3, [pc, #52]	; (1d0cc <bt_gatt_service_init+0x38>)
   1d096:	2201      	movs	r2, #1
   1d098:	f3bf 8f5b 	dmb	ish
   1d09c:	e853 1f00 	ldrex	r1, [r3]
   1d0a0:	2900      	cmp	r1, #0
   1d0a2:	d103      	bne.n	1d0ac <bt_gatt_service_init+0x18>
   1d0a4:	e843 2000 	strex	r0, r2, [r3]
   1d0a8:	2800      	cmp	r0, #0
   1d0aa:	d1f7      	bne.n	1d09c <bt_gatt_service_init+0x8>
   1d0ac:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1d0b0:	d101      	bne.n	1d0b6 <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d0b2:	4b07      	ldr	r3, [pc, #28]	; (1d0d0 <bt_gatt_service_init+0x3c>)
   1d0b4:	e006      	b.n	1d0c4 <bt_gatt_service_init+0x30>
   1d0b6:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1d0b8:	685a      	ldr	r2, [r3, #4]
   1d0ba:	4906      	ldr	r1, [pc, #24]	; (1d0d4 <bt_gatt_service_init+0x40>)
   1d0bc:	8808      	ldrh	r0, [r1, #0]
   1d0be:	4402      	add	r2, r0
   1d0c0:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d0c2:	3308      	adds	r3, #8
   1d0c4:	4a04      	ldr	r2, [pc, #16]	; (1d0d8 <bt_gatt_service_init+0x44>)
   1d0c6:	4293      	cmp	r3, r2
   1d0c8:	d3f6      	bcc.n	1d0b8 <bt_gatt_service_init+0x24>
	}
}
   1d0ca:	4770      	bx	lr
   1d0cc:	200038a8 	.word	0x200038a8
   1d0d0:	0002ee48 	.word	0x0002ee48
   1d0d4:	20004b60 	.word	0x20004b60
   1d0d8:	0002ee68 	.word	0x0002ee68

0001d0dc <find_cf_cfg>:
{
   1d0dc:	b570      	push	{r4, r5, r6, lr}
   1d0de:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1d0e0:	2400      	movs	r4, #0
   1d0e2:	b114      	cbz	r4, 1d0ea <find_cf_cfg+0xe>
	return NULL;
   1d0e4:	2500      	movs	r5, #0
}
   1d0e6:	4628      	mov	r0, r5
   1d0e8:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1d0ea:	4d0d      	ldr	r5, [pc, #52]	; (1d120 <find_cf_cfg+0x44>)
   1d0ec:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1d0f0:	b166      	cbz	r6, 1d10c <find_cf_cfg+0x30>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d0f2:	0123      	lsls	r3, r4, #4
   1d0f4:	490a      	ldr	r1, [pc, #40]	; (1d120 <find_cf_cfg+0x44>)
   1d0f6:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1d0fa:	3201      	adds	r2, #1
   1d0fc:	5cc9      	ldrb	r1, [r1, r3]
   1d0fe:	4630      	mov	r0, r6
   1d100:	f00d f8ff 	bl	2a302 <bt_conn_is_peer_addr_le>
   1d104:	2800      	cmp	r0, #0
   1d106:	d1ee      	bne.n	1d0e6 <find_cf_cfg+0xa>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1d108:	3401      	adds	r4, #1
   1d10a:	e7ea      	b.n	1d0e2 <find_cf_cfg+0x6>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d10c:	4628      	mov	r0, r5
   1d10e:	2207      	movs	r2, #7
   1d110:	4904      	ldr	r1, [pc, #16]	; (1d124 <find_cf_cfg+0x48>)
   1d112:	3001      	adds	r0, #1
   1d114:	f011 f8c9 	bl	2e2aa <memcmp>
   1d118:	2800      	cmp	r0, #0
   1d11a:	d1f5      	bne.n	1d108 <find_cf_cfg+0x2c>
   1d11c:	e7e3      	b.n	1d0e6 <find_cf_cfg+0xa>
   1d11e:	bf00      	nop
   1d120:	2000388c 	.word	0x2000388c
   1d124:	0002fe9c 	.word	0x0002fe9c

0001d128 <find_sc_cfg>:
{
   1d128:	b570      	push	{r4, r5, r6, lr}
   1d12a:	4606      	mov	r6, r0
   1d12c:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d12e:	2400      	movs	r4, #0
   1d130:	b10c      	cbz	r4, 1d136 <find_sc_cfg+0xe>
	return NULL;
   1d132:	2000      	movs	r0, #0
}
   1d134:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   1d136:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1d13a:	4a0c      	ldr	r2, [pc, #48]	; (1d16c <find_sc_cfg+0x44>)
   1d13c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1d140:	429e      	cmp	r6, r3
   1d142:	d001      	beq.n	1d148 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d144:	3401      	adds	r4, #1
   1d146:	e7f3      	b.n	1d130 <find_sc_cfg+0x8>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1d148:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1d14c:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   1d150:	2207      	movs	r2, #7
   1d152:	4629      	mov	r1, r5
   1d154:	3001      	adds	r0, #1
   1d156:	f011 f8a8 	bl	2e2aa <memcmp>
		if (id == sc_cfg[i].id &&
   1d15a:	2800      	cmp	r0, #0
   1d15c:	d1f2      	bne.n	1d144 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   1d15e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1d162:	4802      	ldr	r0, [pc, #8]	; (1d16c <find_sc_cfg+0x44>)
   1d164:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1d168:	e7e4      	b.n	1d134 <find_sc_cfg+0xc>
   1d16a:	bf00      	nop
   1d16c:	2000389c 	.word	0x2000389c

0001d170 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d172:	4607      	mov	r7, r0
   1d174:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d176:	2400      	movs	r4, #0
   1d178:	b114      	cbz	r4, 1d180 <find_ccc_cfg+0x10>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
			return cfg;
		}
	}

	return NULL;
   1d17a:	2600      	movs	r6, #0
}
   1d17c:	4630      	mov	r0, r6
   1d17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1d180:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1d184:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   1d188:	b167      	cbz	r7, 1d1a4 <find_ccc_cfg+0x34>
						    &cfg->peer)) {
   1d18a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d18e:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1d190:	3201      	adds	r2, #1
   1d192:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   1d196:	4638      	mov	r0, r7
   1d198:	f00d f8b3 	bl	2a302 <bt_conn_is_peer_addr_le>
   1d19c:	2800      	cmp	r0, #0
   1d19e:	d1ed      	bne.n	1d17c <find_ccc_cfg+0xc>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d1a0:	3401      	adds	r4, #1
   1d1a2:	e7e9      	b.n	1d178 <find_ccc_cfg+0x8>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d1a4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1d1a8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   1d1ac:	2207      	movs	r2, #7
   1d1ae:	4903      	ldr	r1, [pc, #12]	; (1d1bc <find_ccc_cfg+0x4c>)
   1d1b0:	3001      	adds	r0, #1
   1d1b2:	f011 f87a 	bl	2e2aa <memcmp>
   1d1b6:	2800      	cmp	r0, #0
   1d1b8:	d1f2      	bne.n	1d1a0 <find_ccc_cfg+0x30>
   1d1ba:	e7df      	b.n	1d17c <find_ccc_cfg+0xc>
   1d1bc:	0002fe9c 	.word	0x0002fe9c

0001d1c0 <cf_write>:
{
   1d1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1c4:	b088      	sub	sp, #32
   1d1c6:	461d      	mov	r5, r3
   1d1c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   1d1cc:	2b01      	cmp	r3, #1
   1d1ce:	d855      	bhi.n	1d27c <cf_write+0xbc>
   1d1d0:	4606      	mov	r6, r0
   1d1d2:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   1d1d4:	46a8      	mov	r8, r5
   1d1d6:	442b      	add	r3, r5
   1d1d8:	2b01      	cmp	r3, #1
   1d1da:	d852      	bhi.n	1d282 <cf_write+0xc2>
	cfg = find_cf_cfg(conn);
   1d1dc:	f7ff ff7e 	bl	1d0dc <find_cf_cfg>
	if (!cfg) {
   1d1e0:	4604      	mov	r4, r0
   1d1e2:	b1f8      	cbz	r0, 1d224 <cf_write+0x64>
	if (!cf_set_value(cfg, value, len)) {
   1d1e4:	462a      	mov	r2, r5
   1d1e6:	4639      	mov	r1, r7
   1d1e8:	4620      	mov	r0, r4
   1d1ea:	f00e f859 	bl	2b2a0 <cf_set_value>
   1d1ee:	2800      	cmp	r0, #0
   1d1f0:	d04a      	beq.n	1d288 <cf_write+0xc8>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d1f2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d1f6:	1c60      	adds	r0, r4, #1
   1d1f8:	f00e f93b 	bl	2b472 <bt_addr_le_copy>
	cfg->id = conn->id;
   1d1fc:	7a33      	ldrb	r3, [r6, #8]
   1d1fe:	4620      	mov	r0, r4
   1d200:	f800 3b0c 	strb.w	r3, [r0], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d204:	f3bf 8f5b 	dmb	ish
   1d208:	e850 3f00 	ldrex	r3, [r0]
   1d20c:	f043 0301 	orr.w	r3, r3, #1
   1d210:	e840 3200 	strex	r2, r3, [r0]
   1d214:	2a00      	cmp	r2, #0
   1d216:	d1f7      	bne.n	1d208 <cf_write+0x48>
   1d218:	f3bf 8f5b 	dmb	ish
}
   1d21c:	4640      	mov	r0, r8
   1d21e:	b008      	add	sp, #32
   1d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1d224:	f7ff ff5a 	bl	1d0dc <find_cf_cfg>
	if (!cfg) {
   1d228:	4604      	mov	r4, r0
   1d22a:	2800      	cmp	r0, #0
   1d22c:	d1da      	bne.n	1d1e4 <cf_write+0x24>
		LOG_WRN("No space to store Client Supported Features");
   1d22e:	4b18      	ldr	r3, [pc, #96]	; (1d290 <cf_write+0xd0>)
   1d230:	9307      	str	r3, [sp, #28]
   1d232:	2202      	movs	r2, #2
   1d234:	f88d 2004 	strb.w	r2, [sp, #4]
   1d238:	2300      	movs	r3, #0
   1d23a:	f88d 3005 	strb.w	r3, [sp, #5]
   1d23e:	f88d 3006 	strb.w	r3, [sp, #6]
   1d242:	f88d 3007 	strb.w	r3, [sp, #7]
   1d246:	9901      	ldr	r1, [sp, #4]
   1d248:	9106      	str	r1, [sp, #24]
   1d24a:	4619      	mov	r1, r3
   1d24c:	f363 0100 	bfi	r1, r3, #0, #1
   1d250:	f363 0141 	bfi	r1, r3, #1, #1
   1d254:	f363 0182 	bfi	r1, r3, #2, #1
   1d258:	f363 01c5 	bfi	r1, r3, #3, #3
   1d25c:	f362 1188 	bfi	r1, r2, #6, #3
   1d260:	2208      	movs	r2, #8
   1d262:	f362 2152 	bfi	r1, r2, #9, #10
   1d266:	f363 41de 	bfi	r1, r3, #19, #12
   1d26a:	f363 71df 	bfi	r1, r3, #31, #1
   1d26e:	aa06      	add	r2, sp, #24
   1d270:	4808      	ldr	r0, [pc, #32]	; (1d294 <cf_write+0xd4>)
   1d272:	f00b fda6 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d276:	f06f 0810 	mvn.w	r8, #16
   1d27a:	e7cf      	b.n	1d21c <cf_write+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d27c:	f06f 0806 	mvn.w	r8, #6
   1d280:	e7cc      	b.n	1d21c <cf_write+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d282:	f06f 080c 	mvn.w	r8, #12
   1d286:	e7c9      	b.n	1d21c <cf_write+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1d288:	f06f 0812 	mvn.w	r8, #18
   1d28c:	e7c6      	b.n	1d21c <cf_write+0x5c>
   1d28e:	bf00      	nop
   1d290:	00030de8 	.word	0x00030de8
   1d294:	0002ee98 	.word	0x0002ee98

0001d298 <sc_save>:
{
   1d298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d29c:	b088      	sub	sp, #32
   1d29e:	4607      	mov	r7, r0
   1d2a0:	4688      	mov	r8, r1
   1d2a2:	4616      	mov	r6, r2
   1d2a4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1d2a6:	f7ff ff3f 	bl	1d128 <find_sc_cfg>
	if (!cfg) {
   1d2aa:	4604      	mov	r4, r0
   1d2ac:	b178      	cbz	r0, 1d2ce <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
   1d2ae:	8923      	ldrh	r3, [r4, #8]
   1d2b0:	b913      	cbnz	r3, 1d2b8 <sc_save+0x20>
   1d2b2:	8963      	ldrh	r3, [r4, #10]
   1d2b4:	2b00      	cmp	r3, #0
   1d2b6:	d03b      	beq.n	1d330 <sc_save+0x98>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1d2b8:	462b      	mov	r3, r5
   1d2ba:	4632      	mov	r2, r6
   1d2bc:	f104 010a 	add.w	r1, r4, #10
   1d2c0:	f104 0008 	add.w	r0, r4, #8
   1d2c4:	f00d ffca 	bl	2b25c <update_range>
}
   1d2c8:	b008      	add	sp, #32
   1d2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1d2ce:	491a      	ldr	r1, [pc, #104]	; (1d338 <sc_save+0xa0>)
   1d2d0:	f7ff ff2a 	bl	1d128 <find_sc_cfg>
		if (!cfg) {
   1d2d4:	4604      	mov	r4, r0
   1d2d6:	b128      	cbz	r0, 1d2e4 <sc_save+0x4c>
		cfg->id = id;
   1d2d8:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1d2dc:	4641      	mov	r1, r8
   1d2de:	f00e f8c8 	bl	2b472 <bt_addr_le_copy>
   1d2e2:	e7e4      	b.n	1d2ae <sc_save+0x16>
			LOG_ERR("unable to save SC: no cfg left");
   1d2e4:	4b15      	ldr	r3, [pc, #84]	; (1d33c <sc_save+0xa4>)
   1d2e6:	9307      	str	r3, [sp, #28]
   1d2e8:	2302      	movs	r3, #2
   1d2ea:	f88d 3004 	strb.w	r3, [sp, #4]
   1d2ee:	2300      	movs	r3, #0
   1d2f0:	f88d 3005 	strb.w	r3, [sp, #5]
   1d2f4:	f88d 3006 	strb.w	r3, [sp, #6]
   1d2f8:	f88d 3007 	strb.w	r3, [sp, #7]
   1d2fc:	9a01      	ldr	r2, [sp, #4]
   1d2fe:	9206      	str	r2, [sp, #24]
   1d300:	4619      	mov	r1, r3
   1d302:	f363 0100 	bfi	r1, r3, #0, #1
   1d306:	f363 0141 	bfi	r1, r3, #1, #1
   1d30a:	f363 0182 	bfi	r1, r3, #2, #1
   1d30e:	f363 01c5 	bfi	r1, r3, #3, #3
   1d312:	2201      	movs	r2, #1
   1d314:	f362 1188 	bfi	r1, r2, #6, #3
   1d318:	2208      	movs	r2, #8
   1d31a:	f362 2152 	bfi	r1, r2, #9, #10
   1d31e:	f363 41de 	bfi	r1, r3, #19, #12
   1d322:	f363 71df 	bfi	r1, r3, #31, #1
   1d326:	aa06      	add	r2, sp, #24
   1d328:	4805      	ldr	r0, [pc, #20]	; (1d340 <sc_save+0xa8>)
   1d32a:	f00b fd4a 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return;
   1d32e:	e7cb      	b.n	1d2c8 <sc_save+0x30>
		cfg->data.start = start;
   1d330:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1d332:	8165      	strh	r5, [r4, #10]
		goto done;
   1d334:	e7c8      	b.n	1d2c8 <sc_save+0x30>
   1d336:	bf00      	nop
   1d338:	0002fe9c 	.word	0x0002fe9c
   1d33c:	00030e14 	.word	0x00030e14
   1d340:	0002ee98 	.word	0x0002ee98

0001d344 <clear_ccc_cfg>:
{
   1d344:	b510      	push	{r4, lr}
   1d346:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d348:	4903      	ldr	r1, [pc, #12]	; (1d358 <clear_ccc_cfg+0x14>)
   1d34a:	3001      	adds	r0, #1
   1d34c:	f00e f891 	bl	2b472 <bt_addr_le_copy>
	cfg->id = 0U;
   1d350:	2300      	movs	r3, #0
   1d352:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1d354:	8123      	strh	r3, [r4, #8]
}
   1d356:	bd10      	pop	{r4, pc}
   1d358:	0002fe9c 	.word	0x0002fe9c

0001d35c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1d35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d360:	b089      	sub	sp, #36	; 0x24
   1d362:	461c      	mov	r4, r3
   1d364:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1d368:	68cf      	ldr	r7, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1d36a:	2b00      	cmp	r3, #0
   1d36c:	d16c      	bne.n	1d448 <bt_gatt_attr_write_ccc+0xec>
   1d36e:	4681      	mov	r9, r0
   1d370:	460e      	mov	r6, r1
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1d372:	1e63      	subs	r3, r4, #1
   1d374:	b29b      	uxth	r3, r3
   1d376:	2b01      	cmp	r3, #1
   1d378:	d869      	bhi.n	1d44e <bt_gatt_attr_write_ccc+0xf2>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1d37a:	2c01      	cmp	r4, #1
   1d37c:	d91f      	bls.n	1d3be <bt_gatt_attr_write_ccc+0x62>
   1d37e:	7853      	ldrb	r3, [r2, #1]
   1d380:	7815      	ldrb	r5, [r2, #0]
   1d382:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1d386:	4639      	mov	r1, r7
   1d388:	4648      	mov	r0, r9
   1d38a:	f7ff fef1 	bl	1d170 <find_ccc_cfg>
	if (!cfg) {
   1d38e:	4680      	mov	r8, r0
   1d390:	b1b8      	cbz	r0, 1d3c2 <bt_gatt_attr_write_ccc+0x66>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
		cfg->id = conn->id;
	}

	/* Confirm write if cfg is managed by application */
	if (ccc->cfg_write) {
   1d392:	693b      	ldr	r3, [r7, #16]
   1d394:	b143      	cbz	r3, 1d3a8 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1d396:	462a      	mov	r2, r5
   1d398:	4631      	mov	r1, r6
   1d39a:	4648      	mov	r0, r9
   1d39c:	4798      	blx	r3

		if (write < 0) {
   1d39e:	2800      	cmp	r0, #0
   1d3a0:	db0a      	blt.n	1d3b8 <bt_gatt_attr_write_ccc+0x5c>
			return write;
		}

		/* Accept size=1 for backwards compatibility */
		if (write != sizeof(value) && write != 1) {
   1d3a2:	3801      	subs	r0, #1
   1d3a4:	2801      	cmp	r0, #1
   1d3a6:	d855      	bhi.n	1d454 <bt_gatt_attr_write_ccc+0xf8>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
		}
	}

	value_changed = cfg->value != value;
	cfg->value = value;
   1d3a8:	f8a8 5008 	strh.w	r5, [r8, #8]

	LOG_DBG("handle 0x%04x value %u", attr->handle, cfg->value);

	/* Update cfg if don't match */
	if (cfg->value != ccc->value) {
   1d3ac:	897b      	ldrh	r3, [r7, #10]
   1d3ae:	429d      	cmp	r5, r3
   1d3b0:	d141      	bne.n	1d436 <bt_gatt_attr_write_ccc+0xda>
		gatt_ccc_conn_enqueue(conn);
#endif
	}

	/* Disabled CCC is the same as no configured CCC, so clear the entry */
	if (!value) {
   1d3b2:	2d00      	cmp	r5, #0
   1d3b4:	d044      	beq.n	1d440 <bt_gatt_attr_write_ccc+0xe4>
		clear_ccc_cfg(cfg);
	}

	return len;
   1d3b6:	4620      	mov	r0, r4
}
   1d3b8:	b009      	add	sp, #36	; 0x24
   1d3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1d3be:	7815      	ldrb	r5, [r2, #0]
   1d3c0:	e7e1      	b.n	1d386 <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1d3c2:	b90d      	cbnz	r5, 1d3c8 <bt_gatt_attr_write_ccc+0x6c>
			return len;
   1d3c4:	4620      	mov	r0, r4
   1d3c6:	e7f7      	b.n	1d3b8 <bt_gatt_attr_write_ccc+0x5c>
		cfg = find_ccc_cfg(NULL, ccc);
   1d3c8:	4639      	mov	r1, r7
   1d3ca:	2000      	movs	r0, #0
   1d3cc:	f7ff fed0 	bl	1d170 <find_ccc_cfg>
		if (!cfg) {
   1d3d0:	4680      	mov	r8, r0
   1d3d2:	b148      	cbz	r0, 1d3e8 <bt_gatt_attr_write_ccc+0x8c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d3d4:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1d3d8:	3001      	adds	r0, #1
   1d3da:	f00e f84a 	bl	2b472 <bt_addr_le_copy>
		cfg->id = conn->id;
   1d3de:	f899 3008 	ldrb.w	r3, [r9, #8]
   1d3e2:	f888 3000 	strb.w	r3, [r8]
   1d3e6:	e7d4      	b.n	1d392 <bt_gatt_attr_write_ccc+0x36>
			LOG_WRN("No space to store CCC cfg");
   1d3e8:	4b1c      	ldr	r3, [pc, #112]	; (1d45c <bt_gatt_attr_write_ccc+0x100>)
   1d3ea:	9307      	str	r3, [sp, #28]
   1d3ec:	2202      	movs	r2, #2
   1d3ee:	f88d 2004 	strb.w	r2, [sp, #4]
   1d3f2:	2300      	movs	r3, #0
   1d3f4:	f88d 3005 	strb.w	r3, [sp, #5]
   1d3f8:	f88d 3006 	strb.w	r3, [sp, #6]
   1d3fc:	f88d 3007 	strb.w	r3, [sp, #7]
   1d400:	9901      	ldr	r1, [sp, #4]
   1d402:	9106      	str	r1, [sp, #24]
   1d404:	4619      	mov	r1, r3
   1d406:	f363 0100 	bfi	r1, r3, #0, #1
   1d40a:	f363 0141 	bfi	r1, r3, #1, #1
   1d40e:	f363 0182 	bfi	r1, r3, #2, #1
   1d412:	f363 01c5 	bfi	r1, r3, #3, #3
   1d416:	f362 1188 	bfi	r1, r2, #6, #3
   1d41a:	2208      	movs	r2, #8
   1d41c:	f362 2152 	bfi	r1, r2, #9, #10
   1d420:	f363 41de 	bfi	r1, r3, #19, #12
   1d424:	f363 71df 	bfi	r1, r3, #31, #1
   1d428:	aa06      	add	r2, sp, #24
   1d42a:	480d      	ldr	r0, [pc, #52]	; (1d460 <bt_gatt_attr_write_ccc+0x104>)
   1d42c:	f00b fcc9 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d430:	f06f 0010 	mvn.w	r0, #16
   1d434:	e7c0      	b.n	1d3b8 <bt_gatt_attr_write_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1d436:	4639      	mov	r1, r7
   1d438:	4630      	mov	r0, r6
   1d43a:	f00d ff6b 	bl	2b314 <gatt_ccc_changed>
   1d43e:	e7b8      	b.n	1d3b2 <bt_gatt_attr_write_ccc+0x56>
		clear_ccc_cfg(cfg);
   1d440:	4640      	mov	r0, r8
   1d442:	f7ff ff7f 	bl	1d344 <clear_ccc_cfg>
   1d446:	e7b6      	b.n	1d3b6 <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d448:	f06f 0006 	mvn.w	r0, #6
   1d44c:	e7b4      	b.n	1d3b8 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d44e:	f06f 000c 	mvn.w	r0, #12
   1d452:	e7b1      	b.n	1d3b8 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1d454:	f06f 000d 	mvn.w	r0, #13
   1d458:	e7ae      	b.n	1d3b8 <bt_gatt_attr_write_ccc+0x5c>
   1d45a:	bf00      	nop
   1d45c:	00030e34 	.word	0x00030e34
   1d460:	0002ee98 	.word	0x0002ee98

0001d464 <sc_clear>:
{
   1d464:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d466:	b083      	sub	sp, #12
   1d468:	af00      	add	r7, sp, #0
   1d46a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d46c:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1d470:	4629      	mov	r1, r5
   1d472:	7a00      	ldrb	r0, [r0, #8]
   1d474:	f00c fb41 	bl	29afa <bt_addr_le_is_bonded>
   1d478:	2800      	cmp	r0, #0
   1d47a:	d042      	beq.n	1d502 <sc_clear+0x9e>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1d47c:	4629      	mov	r1, r5
   1d47e:	7a20      	ldrb	r0, [r4, #8]
   1d480:	f00e f803 	bl	2b48a <bt_gatt_clear_sc>
		if (err) {
   1d484:	4604      	mov	r4, r0
   1d486:	2800      	cmp	r0, #0
   1d488:	d042      	beq.n	1d510 <sc_clear+0xac>
			LOG_ERR("Failed to clear SC %d", err);
   1d48a:	466d      	mov	r5, sp
   1d48c:	b088      	sub	sp, #32
   1d48e:	466b      	mov	r3, sp
   1d490:	f113 0210 	adds.w	r2, r3, #16
   1d494:	d02f      	beq.n	1d4f6 <sc_clear+0x92>
   1d496:	210c      	movs	r1, #12
   1d498:	b13a      	cbz	r2, 1d4aa <sc_clear+0x46>
   1d49a:	4608      	mov	r0, r1
   1d49c:	2904      	cmp	r1, #4
   1d49e:	dd01      	ble.n	1d4a4 <sc_clear+0x40>
   1d4a0:	4e1d      	ldr	r6, [pc, #116]	; (1d518 <sc_clear+0xb4>)
   1d4a2:	615e      	str	r6, [r3, #20]
   1d4a4:	2808      	cmp	r0, #8
   1d4a6:	dd00      	ble.n	1d4aa <sc_clear+0x46>
   1d4a8:	619c      	str	r4, [r3, #24]
   1d4aa:	290b      	cmp	r1, #11
   1d4ac:	dd26      	ble.n	1d4fc <sc_clear+0x98>
   1d4ae:	240c      	movs	r4, #12
   1d4b0:	b13a      	cbz	r2, 1d4c2 <sc_clear+0x5e>
   1d4b2:	2103      	movs	r1, #3
   1d4b4:	7139      	strb	r1, [r7, #4]
   1d4b6:	2100      	movs	r1, #0
   1d4b8:	7179      	strb	r1, [r7, #5]
   1d4ba:	71b9      	strb	r1, [r7, #6]
   1d4bc:	71f9      	strb	r1, [r7, #7]
   1d4be:	6878      	ldr	r0, [r7, #4]
   1d4c0:	6118      	str	r0, [r3, #16]
   1d4c2:	2100      	movs	r1, #0
   1d4c4:	f36f 0100 	bfc	r1, #0, #1
   1d4c8:	f36f 0141 	bfc	r1, #1, #1
   1d4cc:	f36f 0182 	bfc	r1, #2, #1
   1d4d0:	f36f 01c5 	bfc	r1, #3, #3
   1d4d4:	2301      	movs	r3, #1
   1d4d6:	f363 1188 	bfi	r1, r3, #6, #3
   1d4da:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1d4de:	f364 2152 	bfi	r1, r4, #9, #10
   1d4e2:	f36f 41de 	bfc	r1, #19, #12
   1d4e6:	f36f 71df 	bfc	r1, #31, #1
   1d4ea:	2300      	movs	r3, #0
   1d4ec:	480b      	ldr	r0, [pc, #44]	; (1d51c <sc_clear+0xb8>)
   1d4ee:	f00b fc68 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1d4f2:	46ad      	mov	sp, r5
   1d4f4:	e00c      	b.n	1d510 <sc_clear+0xac>
   1d4f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d4fa:	e7cd      	b.n	1d498 <sc_clear+0x34>
   1d4fc:	f06f 041b 	mvn.w	r4, #27
   1d500:	e7d6      	b.n	1d4b0 <sc_clear+0x4c>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d502:	4629      	mov	r1, r5
   1d504:	7a20      	ldrb	r0, [r4, #8]
   1d506:	f7ff fe0f 	bl	1d128 <find_sc_cfg>
		if (cfg) {
   1d50a:	b108      	cbz	r0, 1d510 <sc_clear+0xac>
			clear_sc_cfg(cfg);
   1d50c:	f00d ffb8 	bl	2b480 <clear_sc_cfg>
}
   1d510:	370c      	adds	r7, #12
   1d512:	46bd      	mov	sp, r7
   1d514:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d516:	bf00      	nop
   1d518:	00030e50 	.word	0x00030e50
   1d51c:	0002ee98 	.word	0x0002ee98

0001d520 <sc_indicate_rsp>:
{
   1d520:	b510      	push	{r4, lr}
   1d522:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d524:	4b1b      	ldr	r3, [pc, #108]	; (1d594 <sc_indicate_rsp+0x74>)
   1d526:	f3bf 8f5b 	dmb	ish
   1d52a:	e853 2f00 	ldrex	r2, [r3]
   1d52e:	f022 0202 	bic.w	r2, r2, #2
   1d532:	e843 2100 	strex	r1, r2, [r3]
   1d536:	2900      	cmp	r1, #0
   1d538:	d1f7      	bne.n	1d52a <sc_indicate_rsp+0xa>
   1d53a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d53e:	f3bf 8f5b 	dmb	ish
   1d542:	681b      	ldr	r3, [r3, #0]
   1d544:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1d548:	f013 0f01 	tst.w	r3, #1
   1d54c:	d104      	bne.n	1d558 <sc_indicate_rsp+0x38>
	if (bt_att_fixed_chan_only(conn)) {
   1d54e:	4620      	mov	r0, r4
   1d550:	f00d fe3c 	bl	2b1cc <bt_att_fixed_chan_only>
   1d554:	b930      	cbnz	r0, 1d564 <sc_indicate_rsp+0x44>
}
   1d556:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1d558:	2200      	movs	r2, #0
   1d55a:	2300      	movs	r3, #0
   1d55c:	480e      	ldr	r0, [pc, #56]	; (1d598 <sc_indicate_rsp+0x78>)
   1d55e:	f005 f825 	bl	225ac <k_work_reschedule>
   1d562:	e7f4      	b.n	1d54e <sc_indicate_rsp+0x2e>
		cfg = find_cf_cfg(conn);
   1d564:	4620      	mov	r0, r4
   1d566:	f7ff fdb9 	bl	1d0dc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d56a:	4603      	mov	r3, r0
   1d56c:	2800      	cmp	r0, #0
   1d56e:	d0f2      	beq.n	1d556 <sc_indicate_rsp+0x36>
   1d570:	7a02      	ldrb	r2, [r0, #8]
   1d572:	f012 0f01 	tst.w	r2, #1
   1d576:	d0ee      	beq.n	1d556 <sc_indicate_rsp+0x36>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d578:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d57a:	f3bf 8f5b 	dmb	ish
   1d57e:	e853 1f00 	ldrex	r1, [r3]
   1d582:	f041 0101 	orr.w	r1, r1, #1
   1d586:	e843 1200 	strex	r2, r1, [r3]
   1d58a:	2a00      	cmp	r2, #0
   1d58c:	d1f7      	bne.n	1d57e <sc_indicate_rsp+0x5e>
   1d58e:	f3bf 8f5b 	dmb	ish
}
   1d592:	e7e0      	b.n	1d556 <sc_indicate_rsp+0x36>
   1d594:	20002368 	.word	0x20002368
   1d598:	20002338 	.word	0x20002338

0001d59c <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1d59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d5a0:	6881      	ldr	r1, [r0, #8]
   1d5a2:	4b2c      	ldr	r3, [pc, #176]	; (1d654 <disconnected_cb+0xb8>)
   1d5a4:	4299      	cmp	r1, r3
   1d5a6:	d002      	beq.n	1d5ae <disconnected_cb+0x12>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1d5a8:	2001      	movs	r0, #1
   1d5aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5ae:	4604      	mov	r4, r0
   1d5b0:	4616      	mov	r6, r2
	ccc = attr->user_data;
   1d5b2:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1d5b4:	897b      	ldrh	r3, [r7, #10]
   1d5b6:	2b00      	cmp	r3, #0
   1d5b8:	d0f6      	beq.n	1d5a8 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d5ba:	2500      	movs	r5, #0
	value_used = false;
   1d5bc:	46aa      	mov	sl, r5
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d5be:	b15d      	cbz	r5, 1d5d8 <disconnected_cb+0x3c>
	if (!value_used) {
   1d5c0:	f1ba 0f00 	cmp.w	sl, #0
   1d5c4:	d1f0      	bne.n	1d5a8 <disconnected_cb+0xc>
		ccc->value = 0U;
   1d5c6:	2300      	movs	r3, #0
   1d5c8:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   1d5ca:	68fb      	ldr	r3, [r7, #12]
   1d5cc:	2b00      	cmp	r3, #0
   1d5ce:	d0eb      	beq.n	1d5a8 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   1d5d0:	2100      	movs	r1, #0
   1d5d2:	4620      	mov	r0, r4
   1d5d4:	4798      	blx	r3
   1d5d6:	e7e7      	b.n	1d5a8 <disconnected_cb+0xc>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1d5d8:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   1d5dc:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   1d5e0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1d5e4:	b1cb      	cbz	r3, 1d61a <disconnected_cb+0x7e>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d5e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1d5ea:	f108 0901 	add.w	r9, r8, #1
   1d5ee:	464a      	mov	r2, r9
   1d5f0:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1d5f4:	4630      	mov	r0, r6
   1d5f6:	f00c fe84 	bl	2a302 <bt_conn_is_peer_addr_le>
   1d5fa:	b998      	cbnz	r0, 1d624 <disconnected_cb+0x88>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d5fc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1d600:	4649      	mov	r1, r9
   1d602:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1d606:	f7fd fc97 	bl	1af38 <bt_conn_lookup_addr_le>
			if (tmp) {
   1d60a:	4603      	mov	r3, r0
   1d60c:	b128      	cbz	r0, 1d61a <disconnected_cb+0x7e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1d60e:	7a82      	ldrb	r2, [r0, #10]
   1d610:	2a07      	cmp	r2, #7
   1d612:	d004      	beq.n	1d61e <disconnected_cb+0x82>
				bt_conn_unref(tmp);
   1d614:	4618      	mov	r0, r3
   1d616:	f00c fe09 	bl	2a22c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d61a:	3501      	adds	r5, #1
   1d61c:	e7cf      	b.n	1d5be <disconnected_cb+0x22>
					value_used = true;
   1d61e:	f04f 0a01 	mov.w	sl, #1
   1d622:	e7f7      	b.n	1d614 <disconnected_cb+0x78>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d624:	f106 0b88 	add.w	fp, r6, #136	; 0x88
   1d628:	4659      	mov	r1, fp
   1d62a:	7a30      	ldrb	r0, [r6, #8]
   1d62c:	f00c fa65 	bl	29afa <bt_addr_le_is_bonded>
   1d630:	b950      	cbnz	r0, 1d648 <disconnected_cb+0xac>
				if (ccc == &sc_ccc) {
   1d632:	4b09      	ldr	r3, [pc, #36]	; (1d658 <disconnected_cb+0xbc>)
   1d634:	429f      	cmp	r7, r3
   1d636:	d003      	beq.n	1d640 <disconnected_cb+0xa4>
				clear_ccc_cfg(cfg);
   1d638:	4640      	mov	r0, r8
   1d63a:	f7ff fe83 	bl	1d344 <clear_ccc_cfg>
   1d63e:	e7ec      	b.n	1d61a <disconnected_cb+0x7e>
					sc_clear(conn);
   1d640:	4630      	mov	r0, r6
   1d642:	f7ff ff0f 	bl	1d464 <sc_clear>
   1d646:	e7f7      	b.n	1d638 <disconnected_cb+0x9c>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d648:	4659      	mov	r1, fp
   1d64a:	4648      	mov	r0, r9
   1d64c:	f00d ff11 	bl	2b472 <bt_addr_le_copy>
   1d650:	e7e3      	b.n	1d61a <disconnected_cb+0x7e>
   1d652:	bf00      	nop
   1d654:	0001d35d 	.word	0x0001d35d
   1d658:	20000754 	.word	0x20000754

0001d65c <clear_cf_cfg>:
{
   1d65c:	b510      	push	{r4, lr}
   1d65e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d660:	4908      	ldr	r1, [pc, #32]	; (1d684 <clear_cf_cfg+0x28>)
   1d662:	3001      	adds	r0, #1
   1d664:	f00d ff05 	bl	2b472 <bt_addr_le_copy>
   1d668:	2300      	movs	r3, #0
   1d66a:	7223      	strb	r3, [r4, #8]
	atomic_set(cfg->flags, 0);
   1d66c:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d66e:	f3bf 8f5b 	dmb	ish
   1d672:	e854 2f00 	ldrex	r2, [r4]
   1d676:	e844 3100 	strex	r1, r3, [r4]
   1d67a:	2900      	cmp	r1, #0
   1d67c:	d1f9      	bne.n	1d672 <clear_cf_cfg+0x16>
   1d67e:	f3bf 8f5b 	dmb	ish
}
   1d682:	bd10      	pop	{r4, pc}
   1d684:	0002fe9c 	.word	0x0002fe9c

0001d688 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d688:	4b13      	ldr	r3, [pc, #76]	; (1d6d8 <bt_gatt_init+0x50>)
   1d68a:	2201      	movs	r2, #1
   1d68c:	f3bf 8f5b 	dmb	ish
   1d690:	e853 1f00 	ldrex	r1, [r3]
   1d694:	2900      	cmp	r1, #0
   1d696:	d103      	bne.n	1d6a0 <bt_gatt_init+0x18>
   1d698:	e843 2000 	strex	r0, r2, [r3]
   1d69c:	2800      	cmp	r0, #0
   1d69e:	d1f7      	bne.n	1d690 <bt_gatt_init+0x8>
   1d6a0:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1d6a4:	d116      	bne.n	1d6d4 <bt_gatt_init+0x4c>
{
   1d6a6:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1d6a8:	f7ff fcf4 	bl	1d094 <bt_gatt_service_init>
	list->head = NULL;
   1d6ac:	4b0b      	ldr	r3, [pc, #44]	; (1d6dc <bt_gatt_init+0x54>)
   1d6ae:	2200      	movs	r2, #0
   1d6b0:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1d6b2:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1d6b4:	4c0a      	ldr	r4, [pc, #40]	; (1d6e0 <bt_gatt_init+0x58>)
   1d6b6:	490b      	ldr	r1, [pc, #44]	; (1d6e4 <bt_gatt_init+0x5c>)
   1d6b8:	4620      	mov	r0, r4
   1d6ba:	f010 f93d 	bl	2d938 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1d6be:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1d6c2:	2300      	movs	r3, #0
   1d6c4:	4620      	mov	r0, r4
   1d6c6:	f7f9 fa9f 	bl	16c08 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1d6ca:	4907      	ldr	r1, [pc, #28]	; (1d6e8 <bt_gatt_init+0x60>)
   1d6cc:	4807      	ldr	r0, [pc, #28]	; (1d6ec <bt_gatt_init+0x64>)
   1d6ce:	f010 f933 	bl	2d938 <k_work_init_delayable>
}
   1d6d2:	bd10      	pop	{r4, pc}
   1d6d4:	4770      	bx	lr
   1d6d6:	bf00      	nop
   1d6d8:	200038ac 	.word	0x200038ac
   1d6dc:	200038b0 	.word	0x200038b0
   1d6e0:	200022c0 	.word	0x200022c0
   1d6e4:	0002b81d 	.word	0x0002b81d
   1d6e8:	0001dc99 	.word	0x0001dc99
   1d6ec:	20002338 	.word	0x20002338

0001d6f0 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1d6f0:	b328      	cbz	r0, 1d73e <bt_gatt_attr_get_handle+0x4e>
   1d6f2:	4684      	mov	ip, r0
	if (attr->handle) {
   1d6f4:	8a00      	ldrh	r0, [r0, #16]
   1d6f6:	bb38      	cbnz	r0, 1d748 <bt_gatt_attr_get_handle+0x58>
{
   1d6f8:	b470      	push	{r4, r5, r6}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d6fa:	4d14      	ldr	r5, [pc, #80]	; (1d74c <bt_gatt_attr_get_handle+0x5c>)
	uint16_t handle = 1;
   1d6fc:	2201      	movs	r2, #1
   1d6fe:	e003      	b.n	1d708 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1d700:	686b      	ldr	r3, [r5, #4]
   1d702:	4413      	add	r3, r2
   1d704:	b29a      	uxth	r2, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d706:	3508      	adds	r5, #8
   1d708:	4b11      	ldr	r3, [pc, #68]	; (1d750 <bt_gatt_attr_get_handle+0x60>)
   1d70a:	429d      	cmp	r5, r3
   1d70c:	d21a      	bcs.n	1d744 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1d70e:	682c      	ldr	r4, [r5, #0]
   1d710:	4564      	cmp	r4, ip
   1d712:	d8f5      	bhi.n	1d700 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1d714:	686e      	ldr	r6, [r5, #4]
   1d716:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1d71a:	009b      	lsls	r3, r3, #2
   1d71c:	3b14      	subs	r3, #20
   1d71e:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1d720:	4563      	cmp	r3, ip
   1d722:	d3ed      	bcc.n	1d700 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1d724:	2300      	movs	r3, #0
   1d726:	429e      	cmp	r6, r3
   1d728:	d9ed      	bls.n	1d706 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1d72a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1d72e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1d732:	4561      	cmp	r1, ip
   1d734:	d005      	beq.n	1d742 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1d736:	3301      	adds	r3, #1
   1d738:	3201      	adds	r2, #1
   1d73a:	b292      	uxth	r2, r2
   1d73c:	e7f3      	b.n	1d726 <bt_gatt_attr_get_handle+0x36>
		return 0;
   1d73e:	2000      	movs	r0, #0
   1d740:	4770      	bx	lr
				return handle;
   1d742:	4610      	mov	r0, r2
}
   1d744:	bc70      	pop	{r4, r5, r6}
   1d746:	4770      	bx	lr
   1d748:	4770      	bx	lr
   1d74a:	bf00      	nop
   1d74c:	0002ee48 	.word	0x0002ee48
   1d750:	0002ee68 	.word	0x0002ee68

0001d754 <bt_gatt_foreach_attr_type>:
{
   1d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d758:	b089      	sub	sp, #36	; 0x24
   1d75a:	4682      	mov	sl, r0
   1d75c:	9107      	str	r1, [sp, #28]
   1d75e:	4690      	mov	r8, r2
   1d760:	4699      	mov	r9, r3
   1d762:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1d764:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1d768:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1d76c:	b91b      	cbnz	r3, 1d776 <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   1d76e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d772:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1d776:	4b1c      	ldr	r3, [pc, #112]	; (1d7e8 <bt_gatt_foreach_attr_type+0x94>)
   1d778:	881b      	ldrh	r3, [r3, #0]
   1d77a:	4553      	cmp	r3, sl
   1d77c:	d22c      	bcs.n	1d7d8 <bt_gatt_foreach_attr_type+0x84>
}
   1d77e:	b009      	add	sp, #36	; 0x24
   1d780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1d784:	b28c      	uxth	r4, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d786:	3608      	adds	r6, #8
   1d788:	4b18      	ldr	r3, [pc, #96]	; (1d7ec <bt_gatt_foreach_attr_type+0x98>)
   1d78a:	429e      	cmp	r6, r3
   1d78c:	d2f7      	bcs.n	1d77e <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   1d78e:	6873      	ldr	r3, [r6, #4]
   1d790:	18e1      	adds	r1, r4, r3
   1d792:	42b9      	cmp	r1, r7
   1d794:	d3f6      	bcc.n	1d784 <bt_gatt_foreach_attr_type+0x30>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1d796:	2500      	movs	r5, #0
   1d798:	9706      	str	r7, [sp, #24]
   1d79a:	6873      	ldr	r3, [r6, #4]
   1d79c:	42ab      	cmp	r3, r5
   1d79e:	d919      	bls.n	1d7d4 <bt_gatt_foreach_attr_type+0x80>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1d7a0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1d7a4:	f8cd b010 	str.w	fp, [sp, #16]
   1d7a8:	f8cd a00c 	str.w	sl, [sp, #12]
   1d7ac:	ab12      	add	r3, sp, #72	; 0x48
   1d7ae:	9302      	str	r3, [sp, #8]
   1d7b0:	f8cd 9004 	str.w	r9, [sp, #4]
   1d7b4:	f8cd 8000 	str.w	r8, [sp]
   1d7b8:	9b07      	ldr	r3, [sp, #28]
   1d7ba:	9a06      	ldr	r2, [sp, #24]
   1d7bc:	4621      	mov	r1, r4
   1d7be:	6837      	ldr	r7, [r6, #0]
   1d7c0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1d7c4:	f00d fec1 	bl	2b54a <gatt_foreach_iter>
   1d7c8:	2800      	cmp	r0, #0
   1d7ca:	d0d8      	beq.n	1d77e <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1d7cc:	3501      	adds	r5, #1
   1d7ce:	3401      	adds	r4, #1
   1d7d0:	b2a4      	uxth	r4, r4
   1d7d2:	e7e2      	b.n	1d79a <bt_gatt_foreach_attr_type+0x46>
   1d7d4:	9f06      	ldr	r7, [sp, #24]
   1d7d6:	e7d6      	b.n	1d786 <bt_gatt_foreach_attr_type+0x32>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d7d8:	4e05      	ldr	r6, [pc, #20]	; (1d7f0 <bt_gatt_foreach_attr_type+0x9c>)
		uint16_t handle = 1;
   1d7da:	2401      	movs	r4, #1
   1d7dc:	9713      	str	r7, [sp, #76]	; 0x4c
   1d7de:	4657      	mov	r7, sl
   1d7e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1d7e4:	e7d0      	b.n	1d788 <bt_gatt_foreach_attr_type+0x34>
   1d7e6:	bf00      	nop
   1d7e8:	20004b60 	.word	0x20004b60
   1d7ec:	0002ee68 	.word	0x0002ee68
   1d7f0:	0002ee48 	.word	0x0002ee48

0001d7f4 <db_hash_gen>:
{
   1d7f4:	b510      	push	{r4, lr}
   1d7f6:	b0da      	sub	sp, #360	; 0x168
	uint8_t key[16] = {};
   1d7f8:	2300      	movs	r3, #0
   1d7fa:	934a      	str	r3, [sp, #296]	; 0x128
   1d7fc:	934b      	str	r3, [sp, #300]	; 0x12c
   1d7fe:	934c      	str	r3, [sp, #304]	; 0x130
   1d800:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1d802:	aa1e      	add	r2, sp, #120	; 0x78
   1d804:	a94a      	add	r1, sp, #296	; 0x128
   1d806:	a806      	add	r0, sp, #24
   1d808:	f00b fd96 	bl	29338 <tc_cmac_setup>
   1d80c:	b320      	cbz	r0, 1d858 <db_hash_gen+0x64>
   1d80e:	ac06      	add	r4, sp, #24
   1d810:	9402      	str	r4, [sp, #8]
   1d812:	4b37      	ldr	r3, [pc, #220]	; (1d8f0 <db_hash_gen+0xfc>)
   1d814:	9301      	str	r3, [sp, #4]
   1d816:	2200      	movs	r2, #0
   1d818:	9200      	str	r2, [sp, #0]
   1d81a:	4613      	mov	r3, r2
   1d81c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d820:	2001      	movs	r0, #1
   1d822:	f7ff ff97 	bl	1d754 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1d826:	4621      	mov	r1, r4
   1d828:	4832      	ldr	r0, [pc, #200]	; (1d8f4 <db_hash_gen+0x100>)
   1d82a:	f00b fe22 	bl	29472 <tc_cmac_final>
   1d82e:	2800      	cmp	r0, #0
   1d830:	d038      	beq.n	1d8a4 <db_hash_gen+0xb0>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   1d832:	2110      	movs	r1, #16
   1d834:	482f      	ldr	r0, [pc, #188]	; (1d8f4 <db_hash_gen+0x100>)
   1d836:	f00d fcfb 	bl	2b230 <sys_mem_swap>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d83a:	4b2f      	ldr	r3, [pc, #188]	; (1d8f8 <db_hash_gen+0x104>)
   1d83c:	f3bf 8f5b 	dmb	ish
   1d840:	e853 1f00 	ldrex	r1, [r3]
   1d844:	f041 0104 	orr.w	r1, r1, #4
   1d848:	e843 1200 	strex	r2, r1, [r3]
   1d84c:	2a00      	cmp	r2, #0
   1d84e:	d1f7      	bne.n	1d840 <db_hash_gen+0x4c>
   1d850:	f3bf 8f5b 	dmb	ish
}
   1d854:	b05a      	add	sp, #360	; 0x168
   1d856:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to setup AES CMAC");
   1d858:	4b28      	ldr	r3, [pc, #160]	; (1d8fc <db_hash_gen+0x108>)
   1d85a:	9359      	str	r3, [sp, #356]	; 0x164
   1d85c:	2302      	movs	r3, #2
   1d85e:	f88d 3014 	strb.w	r3, [sp, #20]
   1d862:	2300      	movs	r3, #0
   1d864:	f88d 3015 	strb.w	r3, [sp, #21]
   1d868:	f88d 3016 	strb.w	r3, [sp, #22]
   1d86c:	f88d 3017 	strb.w	r3, [sp, #23]
   1d870:	9a05      	ldr	r2, [sp, #20]
   1d872:	9258      	str	r2, [sp, #352]	; 0x160
   1d874:	4619      	mov	r1, r3
   1d876:	f363 0100 	bfi	r1, r3, #0, #1
   1d87a:	f363 0141 	bfi	r1, r3, #1, #1
   1d87e:	f363 0182 	bfi	r1, r3, #2, #1
   1d882:	f363 01c5 	bfi	r1, r3, #3, #3
   1d886:	2201      	movs	r2, #1
   1d888:	f362 1188 	bfi	r1, r2, #6, #3
   1d88c:	2208      	movs	r2, #8
   1d88e:	f362 2152 	bfi	r1, r2, #9, #10
   1d892:	f363 41de 	bfi	r1, r3, #19, #12
   1d896:	f363 71df 	bfi	r1, r3, #31, #1
   1d89a:	aa58      	add	r2, sp, #352	; 0x160
   1d89c:	4818      	ldr	r0, [pc, #96]	; (1d900 <db_hash_gen+0x10c>)
   1d89e:	f00b fa90 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return;
   1d8a2:	e7d7      	b.n	1d854 <db_hash_gen+0x60>
		LOG_ERR("Unable to calculate hash");
   1d8a4:	4b17      	ldr	r3, [pc, #92]	; (1d904 <db_hash_gen+0x110>)
   1d8a6:	9353      	str	r3, [sp, #332]	; 0x14c
   1d8a8:	2302      	movs	r3, #2
   1d8aa:	f88d 3014 	strb.w	r3, [sp, #20]
   1d8ae:	2300      	movs	r3, #0
   1d8b0:	f88d 3015 	strb.w	r3, [sp, #21]
   1d8b4:	f88d 3016 	strb.w	r3, [sp, #22]
   1d8b8:	f88d 3017 	strb.w	r3, [sp, #23]
   1d8bc:	9a05      	ldr	r2, [sp, #20]
   1d8be:	9252      	str	r2, [sp, #328]	; 0x148
   1d8c0:	4619      	mov	r1, r3
   1d8c2:	f363 0100 	bfi	r1, r3, #0, #1
   1d8c6:	f363 0141 	bfi	r1, r3, #1, #1
   1d8ca:	f363 0182 	bfi	r1, r3, #2, #1
   1d8ce:	f363 01c5 	bfi	r1, r3, #3, #3
   1d8d2:	2201      	movs	r2, #1
   1d8d4:	f362 1188 	bfi	r1, r2, #6, #3
   1d8d8:	2208      	movs	r2, #8
   1d8da:	f362 2152 	bfi	r1, r2, #9, #10
   1d8de:	f363 41de 	bfi	r1, r3, #19, #12
   1d8e2:	f363 71df 	bfi	r1, r3, #31, #1
   1d8e6:	aa52      	add	r2, sp, #328	; 0x148
   1d8e8:	4805      	ldr	r0, [pc, #20]	; (1d900 <db_hash_gen+0x10c>)
   1d8ea:	f00b fa6a 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return;
   1d8ee:	e7b1      	b.n	1d854 <db_hash_gen+0x60>
   1d8f0:	0002b37b 	.word	0x0002b37b
   1d8f4:	200022b0 	.word	0x200022b0
   1d8f8:	20002368 	.word	0x20002368
   1d8fc:	00030e68 	.word	0x00030e68
   1d900:	0002ee98 	.word	0x0002ee98
   1d904:	00030e84 	.word	0x00030e84

0001d908 <db_hash_read>:
{
   1d908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d90c:	b084      	sub	sp, #16
   1d90e:	4604      	mov	r4, r0
   1d910:	460d      	mov	r5, r1
   1d912:	4616      	mov	r6, r2
   1d914:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1d916:	491f      	ldr	r1, [pc, #124]	; (1d994 <db_hash_read+0x8c>)
   1d918:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1d91c:	f010 f86f 	bl	2d9fe <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d920:	f3bf 8f5b 	dmb	ish
   1d924:	4b1c      	ldr	r3, [pc, #112]	; (1d998 <db_hash_read+0x90>)
   1d926:	681b      	ldr	r3, [r3, #0]
   1d928:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1d92c:	f013 0f04 	tst.w	r3, #4
   1d930:	d017      	beq.n	1d962 <db_hash_read+0x5a>
	cfg = find_cf_cfg(conn);
   1d932:	4620      	mov	r0, r4
   1d934:	f7ff fbd2 	bl	1d0dc <find_cf_cfg>
	if (cfg &&
   1d938:	b118      	cbz	r0, 1d942 <db_hash_read+0x3a>
	    CF_ROBUST_CACHING(cfg) &&
   1d93a:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   1d93c:	f012 0f01 	tst.w	r2, #1
   1d940:	d113      	bne.n	1d96a <db_hash_read+0x62>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1d942:	2310      	movs	r3, #16
   1d944:	9302      	str	r3, [sp, #8]
   1d946:	4b15      	ldr	r3, [pc, #84]	; (1d99c <db_hash_read+0x94>)
   1d948:	9301      	str	r3, [sp, #4]
   1d94a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d94e:	9300      	str	r3, [sp, #0]
   1d950:	463b      	mov	r3, r7
   1d952:	4632      	mov	r2, r6
   1d954:	4629      	mov	r1, r5
   1d956:	4620      	mov	r0, r4
   1d958:	f00d fe46 	bl	2b5e8 <bt_gatt_attr_read>
}
   1d95c:	b004      	add	sp, #16
   1d95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen(true);
   1d962:	2001      	movs	r0, #1
   1d964:	f7ff ff46 	bl	1d7f4 <db_hash_gen>
   1d968:	e7e3      	b.n	1d932 <db_hash_read+0x2a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d96a:	f100 080c 	add.w	r8, r0, #12
   1d96e:	2100      	movs	r1, #0
   1d970:	4640      	mov	r0, r8
   1d972:	f00d fd71 	bl	2b458 <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   1d976:	2800      	cmp	r0, #0
   1d978:	d1e3      	bne.n	1d942 <db_hash_read+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d97a:	f3bf 8f5b 	dmb	ish
   1d97e:	e858 3f00 	ldrex	r3, [r8]
   1d982:	f043 0302 	orr.w	r3, r3, #2
   1d986:	e848 3200 	strex	r2, r3, [r8]
   1d98a:	2a00      	cmp	r2, #0
   1d98c:	d1f7      	bne.n	1d97e <db_hash_read+0x76>
   1d98e:	f3bf 8f5b 	dmb	ish
   1d992:	e7d6      	b.n	1d942 <db_hash_read+0x3a>
   1d994:	200022f0 	.word	0x200022f0
   1d998:	20002368 	.word	0x20002368
   1d99c:	200022b0 	.word	0x200022b0

0001d9a0 <gatt_find_by_uuid>:
{
   1d9a0:	b510      	push	{r4, lr}
   1d9a2:	b084      	sub	sp, #16
   1d9a4:	4604      	mov	r4, r0
   1d9a6:	460a      	mov	r2, r1
	found->attr = NULL;
   1d9a8:	2300      	movs	r3, #0
   1d9aa:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1d9ac:	9002      	str	r0, [sp, #8]
   1d9ae:	4907      	ldr	r1, [pc, #28]	; (1d9cc <gatt_find_by_uuid+0x2c>)
   1d9b0:	9101      	str	r1, [sp, #4]
   1d9b2:	2101      	movs	r1, #1
   1d9b4:	9100      	str	r1, [sp, #0]
   1d9b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d9ba:	8880      	ldrh	r0, [r0, #4]
   1d9bc:	f7ff feca 	bl	1d754 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1d9c0:	6820      	ldr	r0, [r4, #0]
}
   1d9c2:	3800      	subs	r0, #0
   1d9c4:	bf18      	it	ne
   1d9c6:	2001      	movne	r0, #1
   1d9c8:	b004      	add	sp, #16
   1d9ca:	bd10      	pop	{r4, pc}
   1d9cc:	0002b367 	.word	0x0002b367

0001d9d0 <bt_gatt_attr_next>:
{
   1d9d0:	b510      	push	{r4, lr}
   1d9d2:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   1d9d4:	2400      	movs	r4, #0
   1d9d6:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1d9d8:	f7ff fe8a 	bl	1d6f0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1d9dc:	3001      	adds	r0, #1
   1d9de:	b280      	uxth	r0, r0
   1d9e0:	ab05      	add	r3, sp, #20
   1d9e2:	9302      	str	r3, [sp, #8]
   1d9e4:	4b05      	ldr	r3, [pc, #20]	; (1d9fc <bt_gatt_attr_next+0x2c>)
   1d9e6:	9301      	str	r3, [sp, #4]
   1d9e8:	9400      	str	r4, [sp, #0]
   1d9ea:	4623      	mov	r3, r4
   1d9ec:	4622      	mov	r2, r4
   1d9ee:	4601      	mov	r1, r0
   1d9f0:	f7ff feb0 	bl	1d754 <bt_gatt_foreach_attr_type>
}
   1d9f4:	9805      	ldr	r0, [sp, #20]
   1d9f6:	b006      	add	sp, #24
   1d9f8:	bd10      	pop	{r4, pc}
   1d9fa:	bf00      	nop
   1d9fc:	0002b30f 	.word	0x0002b30f

0001da00 <gatt_indicate>:
{
   1da00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1da04:	b096      	sub	sp, #88	; 0x58
   1da06:	4605      	mov	r5, r0
   1da08:	460f      	mov	r7, r1
   1da0a:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1da0c:	2294      	movs	r2, #148	; 0x94
   1da0e:	6861      	ldr	r1, [r4, #4]
   1da10:	f00d ff09 	bl	2b826 <bt_gatt_check_perm>
   1da14:	2800      	cmp	r0, #0
   1da16:	d13f      	bne.n	1da98 <gatt_indicate+0x98>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1da18:	2202      	movs	r2, #2
   1da1a:	6861      	ldr	r1, [r4, #4]
   1da1c:	4628      	mov	r0, r5
   1da1e:	f00d ff34 	bl	2b88a <bt_gatt_is_subscribed>
   1da22:	2800      	cmp	r0, #0
   1da24:	d05f      	beq.n	1dae6 <gatt_indicate+0xe6>
	len = sizeof(*ind) + params->len;
   1da26:	8aa6      	ldrh	r6, [r4, #20]
   1da28:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1da2a:	9600      	str	r6, [sp, #0]
   1da2c:	231d      	movs	r3, #29
   1da2e:	2200      	movs	r2, #0
   1da30:	4621      	mov	r1, r4
   1da32:	4859      	ldr	r0, [pc, #356]	; (1db98 <gatt_indicate+0x198>)
   1da34:	f00d fdb4 	bl	2b5a0 <gatt_req_alloc>
	if (!req) {
   1da38:	4681      	mov	r9, r0
   1da3a:	2800      	cmp	r0, #0
   1da3c:	f000 80a8 	beq.w	1db90 <gatt_indicate+0x190>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1da40:	4632      	mov	r2, r6
   1da42:	211d      	movs	r1, #29
   1da44:	4628      	mov	r0, r5
   1da46:	f7fe ff85 	bl	1c954 <bt_att_create_pdu>
	if (!buf) {
   1da4a:	4680      	mov	r8, r0
   1da4c:	2800      	cmp	r0, #0
   1da4e:	d071      	beq.n	1db34 <gatt_indicate+0x134>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1da50:	2301      	movs	r3, #1
   1da52:	2200      	movs	r2, #0
   1da54:	4611      	mov	r1, r2
   1da56:	f00d fbe4 	bl	2b222 <bt_att_set_tx_meta_data>
   1da5a:	f108 0a0c 	add.w	sl, r8, #12
   1da5e:	2102      	movs	r1, #2
   1da60:	4650      	mov	r0, sl
   1da62:	f00e f99d 	bl	2bda0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1da66:	4606      	mov	r6, r0
   1da68:	f826 7b02 	strh.w	r7, [r6], #2
   1da6c:	8aa1      	ldrh	r1, [r4, #20]
   1da6e:	4650      	mov	r0, sl
   1da70:	f00e f996 	bl	2bda0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1da74:	8aa2      	ldrh	r2, [r4, #20]
   1da76:	6921      	ldr	r1, [r4, #16]
   1da78:	4630      	mov	r0, r6
   1da7a:	f010 fc26 	bl	2e2ca <memcpy>
	req->buf = buf;
   1da7e:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   1da82:	4649      	mov	r1, r9
   1da84:	4628      	mov	r0, r5
   1da86:	f00d fb8a 	bl	2b19e <bt_att_req_send>
	if (err) {
   1da8a:	4604      	mov	r4, r0
   1da8c:	2800      	cmp	r0, #0
   1da8e:	d17b      	bne.n	1db88 <gatt_indicate+0x188>
}
   1da90:	4620      	mov	r0, r4
   1da92:	b016      	add	sp, #88	; 0x58
   1da94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("Link is not encrypted");
   1da98:	4b40      	ldr	r3, [pc, #256]	; (1db9c <gatt_indicate+0x19c>)
   1da9a:	9315      	str	r3, [sp, #84]	; 0x54
   1da9c:	2202      	movs	r2, #2
   1da9e:	f88d 200c 	strb.w	r2, [sp, #12]
   1daa2:	2300      	movs	r3, #0
   1daa4:	f88d 300d 	strb.w	r3, [sp, #13]
   1daa8:	f88d 300e 	strb.w	r3, [sp, #14]
   1daac:	f88d 300f 	strb.w	r3, [sp, #15]
   1dab0:	9903      	ldr	r1, [sp, #12]
   1dab2:	9114      	str	r1, [sp, #80]	; 0x50
   1dab4:	4619      	mov	r1, r3
   1dab6:	f363 0100 	bfi	r1, r3, #0, #1
   1daba:	f363 0141 	bfi	r1, r3, #1, #1
   1dabe:	f363 0182 	bfi	r1, r3, #2, #1
   1dac2:	f363 01c5 	bfi	r1, r3, #3, #3
   1dac6:	f362 1188 	bfi	r1, r2, #6, #3
   1daca:	2208      	movs	r2, #8
   1dacc:	f362 2152 	bfi	r1, r2, #9, #10
   1dad0:	f363 41de 	bfi	r1, r3, #19, #12
   1dad4:	f363 71df 	bfi	r1, r3, #31, #1
   1dad8:	aa14      	add	r2, sp, #80	; 0x50
   1dada:	4831      	ldr	r0, [pc, #196]	; (1dba0 <gatt_indicate+0x1a0>)
   1dadc:	f00b f971 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -EPERM;
   1dae0:	f04f 34ff 	mov.w	r4, #4294967295
   1dae4:	e7d4      	b.n	1da90 <gatt_indicate+0x90>
			LOG_WRN("Device is not subscribed to characteristic");
   1dae6:	4b2f      	ldr	r3, [pc, #188]	; (1dba4 <gatt_indicate+0x1a4>)
   1dae8:	930f      	str	r3, [sp, #60]	; 0x3c
   1daea:	2202      	movs	r2, #2
   1daec:	f88d 200c 	strb.w	r2, [sp, #12]
   1daf0:	2300      	movs	r3, #0
   1daf2:	f88d 300d 	strb.w	r3, [sp, #13]
   1daf6:	f88d 300e 	strb.w	r3, [sp, #14]
   1dafa:	f88d 300f 	strb.w	r3, [sp, #15]
   1dafe:	9903      	ldr	r1, [sp, #12]
   1db00:	910e      	str	r1, [sp, #56]	; 0x38
   1db02:	4619      	mov	r1, r3
   1db04:	f363 0100 	bfi	r1, r3, #0, #1
   1db08:	f363 0141 	bfi	r1, r3, #1, #1
   1db0c:	f363 0182 	bfi	r1, r3, #2, #1
   1db10:	f363 01c5 	bfi	r1, r3, #3, #3
   1db14:	f362 1188 	bfi	r1, r2, #6, #3
   1db18:	2208      	movs	r2, #8
   1db1a:	f362 2152 	bfi	r1, r2, #9, #10
   1db1e:	f363 41de 	bfi	r1, r3, #19, #12
   1db22:	f363 71df 	bfi	r1, r3, #31, #1
   1db26:	aa0e      	add	r2, sp, #56	; 0x38
   1db28:	481d      	ldr	r0, [pc, #116]	; (1dba0 <gatt_indicate+0x1a0>)
   1db2a:	f00b f94a 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1db2e:	f06f 0415 	mvn.w	r4, #21
   1db32:	e7ad      	b.n	1da90 <gatt_indicate+0x90>
		LOG_WRN("No buffer available to send indication");
   1db34:	4b1c      	ldr	r3, [pc, #112]	; (1dba8 <gatt_indicate+0x1a8>)
   1db36:	9309      	str	r3, [sp, #36]	; 0x24
   1db38:	2202      	movs	r2, #2
   1db3a:	f88d 200c 	strb.w	r2, [sp, #12]
   1db3e:	2300      	movs	r3, #0
   1db40:	f88d 300d 	strb.w	r3, [sp, #13]
   1db44:	f88d 300e 	strb.w	r3, [sp, #14]
   1db48:	f88d 300f 	strb.w	r3, [sp, #15]
   1db4c:	9903      	ldr	r1, [sp, #12]
   1db4e:	9108      	str	r1, [sp, #32]
   1db50:	4619      	mov	r1, r3
   1db52:	f363 0100 	bfi	r1, r3, #0, #1
   1db56:	f363 0141 	bfi	r1, r3, #1, #1
   1db5a:	f363 0182 	bfi	r1, r3, #2, #1
   1db5e:	f363 01c5 	bfi	r1, r3, #3, #3
   1db62:	f362 1188 	bfi	r1, r2, #6, #3
   1db66:	2208      	movs	r2, #8
   1db68:	f362 2152 	bfi	r1, r2, #9, #10
   1db6c:	f363 41de 	bfi	r1, r3, #19, #12
   1db70:	f363 71df 	bfi	r1, r3, #31, #1
   1db74:	aa08      	add	r2, sp, #32
   1db76:	480a      	ldr	r0, [pc, #40]	; (1dba0 <gatt_indicate+0x1a0>)
   1db78:	f00b f923 	bl	28dc2 <z_impl_z_log_msg_static_create>
		bt_att_req_free(req);
   1db7c:	4648      	mov	r0, r9
   1db7e:	f7ff f9ab 	bl	1ced8 <bt_att_req_free>
		return -ENOMEM;
   1db82:	f06f 040b 	mvn.w	r4, #11
   1db86:	e783      	b.n	1da90 <gatt_indicate+0x90>
		bt_att_req_free(req);
   1db88:	4648      	mov	r0, r9
   1db8a:	f7ff f9a5 	bl	1ced8 <bt_att_req_free>
   1db8e:	e77f      	b.n	1da90 <gatt_indicate+0x90>
		return -ENOMEM;
   1db90:	f06f 040b 	mvn.w	r4, #11
   1db94:	e77c      	b.n	1da90 <gatt_indicate+0x90>
   1db96:	bf00      	nop
   1db98:	0002b345 	.word	0x0002b345
   1db9c:	00030ea0 	.word	0x00030ea0
   1dba0:	0002ee98 	.word	0x0002ee98
   1dba4:	00030eb8 	.word	0x00030eb8
   1dba8:	00030ee4 	.word	0x00030ee4

0001dbac <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dbac:	f3bf 8f5b 	dmb	ish
   1dbb0:	4b37      	ldr	r3, [pc, #220]	; (1dc90 <bt_gatt_indicate+0xe4>)
   1dbb2:	681b      	ldr	r3, [r3, #0]
   1dbb4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1dbb8:	f013 0f04 	tst.w	r3, #4
   1dbbc:	d05e      	beq.n	1dc7c <bt_gatt_indicate+0xd0>
{
   1dbbe:	b530      	push	{r4, r5, lr}
   1dbc0:	b08d      	sub	sp, #52	; 0x34
   1dbc2:	4605      	mov	r5, r0
   1dbc4:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1dbc6:	b110      	cbz	r0, 1dbce <bt_gatt_indicate+0x22>
   1dbc8:	7a83      	ldrb	r3, [r0, #10]
   1dbca:	2b07      	cmp	r3, #7
   1dbcc:	d159      	bne.n	1dc82 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   1dbce:	6860      	ldr	r0, [r4, #4]
   1dbd0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1dbd2:	f7ff fd8d 	bl	1d6f0 <bt_gatt_attr_get_handle>
   1dbd6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1dbda:	6821      	ldr	r1, [r4, #0]
   1dbdc:	b341      	cbz	r1, 1dc30 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1dbde:	a805      	add	r0, sp, #20
   1dbe0:	f7ff fede 	bl	1d9a0 <gatt_find_by_uuid>
   1dbe4:	2800      	cmp	r0, #0
   1dbe6:	d04f      	beq.n	1dc88 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   1dbe8:	9b05      	ldr	r3, [sp, #20]
   1dbea:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1dbec:	9b05      	ldr	r3, [sp, #20]
   1dbee:	6818      	ldr	r0, [r3, #0]
   1dbf0:	2300      	movs	r3, #0
   1dbf2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1dbf6:	f642 0303 	movw	r3, #10243	; 0x2803
   1dbfa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1dbfe:	a90b      	add	r1, sp, #44	; 0x2c
   1dc00:	f00b fd8c 	bl	2971c <bt_uuid_cmp>
   1dc04:	b948      	cbnz	r0, 1dc1a <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1dc06:	9805      	ldr	r0, [sp, #20]
   1dc08:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1dc0a:	799b      	ldrb	r3, [r3, #6]
   1dc0c:	f013 0f20 	tst.w	r3, #32
   1dc10:	d013      	beq.n	1dc3a <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1dc12:	f00d fdaa 	bl	2b76a <bt_gatt_attr_value_handle>
   1dc16:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1dc1a:	b18d      	cbz	r5, 1dc40 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   1dc1c:	2301      	movs	r3, #1
   1dc1e:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1dc20:	4622      	mov	r2, r4
   1dc22:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1dc26:	4628      	mov	r0, r5
   1dc28:	f7ff feea 	bl	1da00 <gatt_indicate>
}
   1dc2c:	b00d      	add	sp, #52	; 0x34
   1dc2e:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1dc30:	2800      	cmp	r0, #0
   1dc32:	d1db      	bne.n	1dbec <bt_gatt_indicate+0x40>
			return -ENOENT;
   1dc34:	f06f 0001 	mvn.w	r0, #1
   1dc38:	e7f8      	b.n	1dc2c <bt_gatt_indicate+0x80>
			return -EINVAL;
   1dc3a:	f06f 0015 	mvn.w	r0, #21
   1dc3e:	e7f5      	b.n	1dc2c <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1dc40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1dc44:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1dc46:	2302      	movs	r3, #2
   1dc48:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1dc4c:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1dc4e:	2300      	movs	r3, #0
   1dc50:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1dc52:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1dc56:	f642 1202 	movw	r2, #10498	; 0x2902
   1dc5a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1dc5e:	aa05      	add	r2, sp, #20
   1dc60:	9202      	str	r2, [sp, #8]
   1dc62:	4a0c      	ldr	r2, [pc, #48]	; (1dc94 <bt_gatt_indicate+0xe8>)
   1dc64:	9201      	str	r2, [sp, #4]
   1dc66:	2201      	movs	r2, #1
   1dc68:	9200      	str	r2, [sp, #0]
   1dc6a:	aa0a      	add	r2, sp, #40	; 0x28
   1dc6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dc70:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1dc74:	f7ff fd6e 	bl	1d754 <bt_gatt_foreach_attr_type>
	return data.err;
   1dc78:	9807      	ldr	r0, [sp, #28]
   1dc7a:	e7d7      	b.n	1dc2c <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1dc7c:	f06f 000a 	mvn.w	r0, #10
}
   1dc80:	4770      	bx	lr
		return -ENOTCONN;
   1dc82:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1dc86:	e7d1      	b.n	1dc2c <bt_gatt_indicate+0x80>
			return -ENOENT;
   1dc88:	f06f 0001 	mvn.w	r0, #1
   1dc8c:	e7ce      	b.n	1dc2c <bt_gatt_indicate+0x80>
   1dc8e:	bf00      	nop
   1dc90:	20000454 	.word	0x20000454
   1dc94:	0001e049 	.word	0x0001e049

0001dc98 <sc_process>:
{
   1dc98:	b510      	push	{r4, lr}
   1dc9a:	b082      	sub	sp, #8
   1dc9c:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1dc9e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1dca2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1dca6:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1dcaa:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1dcae:	f1a0 0120 	sub.w	r1, r0, #32
   1dcb2:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dcb6:	f3bf 8f5b 	dmb	ish
   1dcba:	e854 2f00 	ldrex	r2, [r4]
   1dcbe:	f022 0201 	bic.w	r2, r2, #1
   1dcc2:	e844 2000 	strex	r0, r2, [r4]
   1dcc6:	2800      	cmp	r0, #0
   1dcc8:	d1f7      	bne.n	1dcba <sc_process+0x22>
   1dcca:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1dcce:	2000      	movs	r0, #0
   1dcd0:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1dcd4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1dcd8:	4a0e      	ldr	r2, [pc, #56]	; (1dd14 <sc_process+0x7c>)
   1dcda:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1dcde:	4a0e      	ldr	r2, [pc, #56]	; (1dd18 <sc_process+0x80>)
   1dce0:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1dce4:	aa01      	add	r2, sp, #4
   1dce6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1dcea:	2204      	movs	r2, #4
   1dcec:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1dcf0:	f7ff ff5c 	bl	1dbac <bt_gatt_indicate>
   1dcf4:	b108      	cbz	r0, 1dcfa <sc_process+0x62>
}
   1dcf6:	b002      	add	sp, #8
   1dcf8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dcfa:	f3bf 8f5b 	dmb	ish
   1dcfe:	e854 3f00 	ldrex	r3, [r4]
   1dd02:	f043 0302 	orr.w	r3, r3, #2
   1dd06:	e844 3200 	strex	r2, r3, [r4]
   1dd0a:	2a00      	cmp	r2, #0
   1dd0c:	d1f7      	bne.n	1dcfe <sc_process+0x66>
   1dd0e:	f3bf 8f5b 	dmb	ish
   1dd12:	e7f0      	b.n	1dcf6 <sc_process+0x5e>
   1dd14:	00030fa4 	.word	0x00030fa4
   1dd18:	0001d521 	.word	0x0001d521

0001dd1c <sc_restore>:
{
   1dd1c:	b510      	push	{r4, lr}
   1dd1e:	b088      	sub	sp, #32
   1dd20:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1dd22:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1dd26:	7a00      	ldrb	r0, [r0, #8]
   1dd28:	f7ff f9fe 	bl	1d128 <find_sc_cfg>
	if (!cfg) {
   1dd2c:	b1f0      	cbz	r0, 1dd6c <sc_restore+0x50>
   1dd2e:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1dd30:	8902      	ldrh	r2, [r0, #8]
   1dd32:	b90a      	cbnz	r2, 1dd38 <sc_restore+0x1c>
   1dd34:	8941      	ldrh	r1, [r0, #10]
   1dd36:	b1c9      	cbz	r1, 1dd6c <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1dd38:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1dd3c:	895b      	ldrh	r3, [r3, #10]
   1dd3e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1dd42:	4620      	mov	r0, r4
   1dd44:	f7fd f81c 	bl	1ad80 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1dd48:	491c      	ldr	r1, [pc, #112]	; (1ddbc <sc_restore+0xa0>)
   1dd4a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1dd4e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1dd52:	4a1b      	ldr	r2, [pc, #108]	; (1ddc0 <sc_restore+0xa4>)
   1dd54:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1dd56:	4a1b      	ldr	r2, [pc, #108]	; (1ddc4 <sc_restore+0xa8>)
   1dd58:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1dd5a:	aa01      	add	r2, sp, #4
   1dd5c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1dd5e:	2204      	movs	r2, #4
   1dd60:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1dd62:	4619      	mov	r1, r3
   1dd64:	4620      	mov	r0, r4
   1dd66:	f7ff ff21 	bl	1dbac <bt_gatt_indicate>
   1dd6a:	b908      	cbnz	r0, 1dd70 <sc_restore+0x54>
}
   1dd6c:	b008      	add	sp, #32
   1dd6e:	bd10      	pop	{r4, pc}
		LOG_ERR("SC restore indication failed");
   1dd70:	4b15      	ldr	r3, [pc, #84]	; (1ddc8 <sc_restore+0xac>)
   1dd72:	9307      	str	r3, [sp, #28]
   1dd74:	2302      	movs	r3, #2
   1dd76:	f88d 3000 	strb.w	r3, [sp]
   1dd7a:	2300      	movs	r3, #0
   1dd7c:	f88d 3001 	strb.w	r3, [sp, #1]
   1dd80:	f88d 3002 	strb.w	r3, [sp, #2]
   1dd84:	f88d 3003 	strb.w	r3, [sp, #3]
   1dd88:	9a00      	ldr	r2, [sp, #0]
   1dd8a:	9206      	str	r2, [sp, #24]
   1dd8c:	4619      	mov	r1, r3
   1dd8e:	f363 0100 	bfi	r1, r3, #0, #1
   1dd92:	f363 0141 	bfi	r1, r3, #1, #1
   1dd96:	f363 0182 	bfi	r1, r3, #2, #1
   1dd9a:	f363 01c5 	bfi	r1, r3, #3, #3
   1dd9e:	2201      	movs	r2, #1
   1dda0:	f362 1188 	bfi	r1, r2, #6, #3
   1dda4:	2208      	movs	r2, #8
   1dda6:	f362 2152 	bfi	r1, r2, #9, #10
   1ddaa:	f363 41de 	bfi	r1, r3, #19, #12
   1ddae:	f363 71df 	bfi	r1, r3, #31, #1
   1ddb2:	aa06      	add	r2, sp, #24
   1ddb4:	4805      	ldr	r0, [pc, #20]	; (1ddcc <sc_restore+0xb0>)
   1ddb6:	f00b f804 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1ddba:	e7d7      	b.n	1dd6c <sc_restore+0x50>
   1ddbc:	20003874 	.word	0x20003874
   1ddc0:	00030fa4 	.word	0x00030fa4
   1ddc4:	0002b4bf 	.word	0x0002b4bf
   1ddc8:	00030f0c 	.word	0x00030f0c
   1ddcc:	0002ee98 	.word	0x0002ee98

0001ddd0 <update_ccc>:
{
   1ddd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ddd4:	b082      	sub	sp, #8
   1ddd6:	af00      	add	r7, sp, #0
	struct bt_conn *conn = data->conn;
   1ddd8:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1dddc:	6882      	ldr	r2, [r0, #8]
   1ddde:	4b3a      	ldr	r3, [pc, #232]	; (1dec8 <update_ccc+0xf8>)
   1dde0:	429a      	cmp	r2, r3
   1dde2:	d004      	beq.n	1ddee <update_ccc+0x1e>
}
   1dde4:	2001      	movs	r0, #1
   1dde6:	3708      	adds	r7, #8
   1dde8:	46bd      	mov	sp, r7
   1ddea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ddee:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1ddf0:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ddf4:	2500      	movs	r5, #0
   1ddf6:	2d00      	cmp	r5, #0
   1ddf8:	d1f4      	bne.n	1dde4 <update_ccc+0x14>
		if (!cfg->value ||
   1ddfa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1ddfe:	eb09 0343 	add.w	r3, r9, r3, lsl #1
   1de02:	891b      	ldrh	r3, [r3, #8]
   1de04:	2b00      	cmp	r3, #0
   1de06:	d056      	beq.n	1deb6 <update_ccc+0xe6>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1de08:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1de0c:	eb09 0243 	add.w	r2, r9, r3, lsl #1
   1de10:	3201      	adds	r2, #1
   1de12:	f819 1013 	ldrb.w	r1, [r9, r3, lsl #1]
   1de16:	4640      	mov	r0, r8
   1de18:	f00c fa73 	bl	2a302 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1de1c:	2800      	cmp	r0, #0
   1de1e:	d04a      	beq.n	1deb6 <update_ccc+0xe6>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1de20:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1de24:	4621      	mov	r1, r4
   1de26:	4640      	mov	r0, r8
   1de28:	f00d fcfd 	bl	2b826 <bt_gatt_check_perm>
		if (err) {
   1de2c:	b108      	cbz	r0, 1de32 <update_ccc+0x62>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1de2e:	2803      	cmp	r0, #3
   1de30:	d00a      	beq.n	1de48 <update_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
   1de32:	4649      	mov	r1, r9
   1de34:	4620      	mov	r0, r4
   1de36:	f00d fa6d 	bl	2b314 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1de3a:	4b24      	ldr	r3, [pc, #144]	; (1decc <update_ccc+0xfc>)
   1de3c:	4599      	cmp	r9, r3
   1de3e:	d1d1      	bne.n	1dde4 <update_ccc+0x14>
			sc_restore(conn);
   1de40:	4640      	mov	r0, r8
   1de42:	f7ff ff6b 	bl	1dd1c <sc_restore>
   1de46:	e7cd      	b.n	1dde4 <update_ccc+0x14>
				LOG_WRN("CCC %p not writable", attr);
   1de48:	46ea      	mov	sl, sp
   1de4a:	b088      	sub	sp, #32
   1de4c:	466b      	mov	r3, sp
   1de4e:	f113 0210 	adds.w	r2, r3, #16
   1de52:	d032      	beq.n	1deba <update_ccc+0xea>
   1de54:	210c      	movs	r1, #12
   1de56:	b14a      	cbz	r2, 1de6c <update_ccc+0x9c>
   1de58:	4608      	mov	r0, r1
   1de5a:	2904      	cmp	r1, #4
   1de5c:	dd03      	ble.n	1de66 <update_ccc+0x96>
   1de5e:	f8df c074 	ldr.w	ip, [pc, #116]	; 1ded4 <update_ccc+0x104>
   1de62:	f8c3 c014 	str.w	ip, [r3, #20]
   1de66:	2808      	cmp	r0, #8
   1de68:	dd00      	ble.n	1de6c <update_ccc+0x9c>
   1de6a:	619c      	str	r4, [r3, #24]
   1de6c:	290b      	cmp	r1, #11
   1de6e:	dd27      	ble.n	1dec0 <update_ccc+0xf0>
   1de70:	210c      	movs	r1, #12
   1de72:	b13a      	cbz	r2, 1de84 <update_ccc+0xb4>
   1de74:	2003      	movs	r0, #3
   1de76:	7138      	strb	r0, [r7, #4]
   1de78:	2000      	movs	r0, #0
   1de7a:	7178      	strb	r0, [r7, #5]
   1de7c:	71b8      	strb	r0, [r7, #6]
   1de7e:	71f8      	strb	r0, [r7, #7]
   1de80:	6878      	ldr	r0, [r7, #4]
   1de82:	6118      	str	r0, [r3, #16]
   1de84:	f36f 0600 	bfc	r6, #0, #1
   1de88:	f36f 0641 	bfc	r6, #1, #1
   1de8c:	f36f 0682 	bfc	r6, #2, #1
   1de90:	f36f 06c5 	bfc	r6, #3, #3
   1de94:	2302      	movs	r3, #2
   1de96:	f363 1688 	bfi	r6, r3, #6, #3
   1de9a:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
   1de9e:	f361 2652 	bfi	r6, r1, #9, #10
   1dea2:	f36f 46de 	bfc	r6, #19, #12
   1dea6:	f36f 76df 	bfc	r6, #31, #1
   1deaa:	2300      	movs	r3, #0
   1deac:	4631      	mov	r1, r6
   1deae:	4808      	ldr	r0, [pc, #32]	; (1ded0 <update_ccc+0x100>)
   1deb0:	f00a ff87 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1deb4:	46d5      	mov	sp, sl
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1deb6:	3501      	adds	r5, #1
   1deb8:	e79d      	b.n	1ddf6 <update_ccc+0x26>
				LOG_WRN("CCC %p not writable", attr);
   1deba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1debe:	e7ca      	b.n	1de56 <update_ccc+0x86>
   1dec0:	f06f 011b 	mvn.w	r1, #27
   1dec4:	e7d5      	b.n	1de72 <update_ccc+0xa2>
   1dec6:	bf00      	nop
   1dec8:	0001d35d 	.word	0x0001d35d
   1decc:	20000754 	.word	0x20000754
   1ded0:	0002ee98 	.word	0x0002ee98
   1ded4:	00030f2c 	.word	0x00030f2c

0001ded8 <gatt_notify>:
{
   1ded8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dedc:	b095      	sub	sp, #84	; 0x54
   1dede:	4605      	mov	r5, r0
   1dee0:	460f      	mov	r7, r1
   1dee2:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1dee4:	2294      	movs	r2, #148	; 0x94
   1dee6:	6861      	ldr	r1, [r4, #4]
   1dee8:	f00d fc9d 	bl	2b826 <bt_gatt_check_perm>
   1deec:	bb70      	cbnz	r0, 1df4c <gatt_notify+0x74>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1deee:	2201      	movs	r2, #1
   1def0:	6861      	ldr	r1, [r4, #4]
   1def2:	4628      	mov	r0, r5
   1def4:	f00d fcc9 	bl	2b88a <bt_gatt_is_subscribed>
   1def8:	2800      	cmp	r0, #0
   1defa:	d04e      	beq.n	1df9a <gatt_notify+0xc2>
				sizeof(*nfy) + params->len);
   1defc:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1defe:	3202      	adds	r2, #2
   1df00:	211b      	movs	r1, #27
   1df02:	4628      	mov	r0, r5
   1df04:	f7fe fd26 	bl	1c954 <bt_att_create_pdu>
	if (!buf) {
   1df08:	4680      	mov	r8, r0
   1df0a:	2800      	cmp	r0, #0
   1df0c:	d06c      	beq.n	1dfe8 <gatt_notify+0x110>
   1df0e:	f100 090c 	add.w	r9, r0, #12
   1df12:	2102      	movs	r1, #2
   1df14:	4648      	mov	r0, r9
   1df16:	f00d ff43 	bl	2bda0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1df1a:	4606      	mov	r6, r0
   1df1c:	f826 7b02 	strh.w	r7, [r6], #2
   1df20:	89a1      	ldrh	r1, [r4, #12]
   1df22:	4648      	mov	r0, r9
   1df24:	f00d ff3c 	bl	2bda0 <net_buf_simple_add>
   1df28:	89a2      	ldrh	r2, [r4, #12]
   1df2a:	68a1      	ldr	r1, [r4, #8]
   1df2c:	4630      	mov	r0, r6
   1df2e:	f010 f9cc 	bl	2e2ca <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1df32:	2301      	movs	r3, #1
   1df34:	6962      	ldr	r2, [r4, #20]
   1df36:	6921      	ldr	r1, [r4, #16]
   1df38:	4640      	mov	r0, r8
   1df3a:	f00d f972 	bl	2b222 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1df3e:	4641      	mov	r1, r8
   1df40:	4628      	mov	r0, r5
   1df42:	f00d f914 	bl	2b16e <bt_att_send>
}
   1df46:	b015      	add	sp, #84	; 0x54
   1df48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Link is not encrypted");
   1df4c:	4b3a      	ldr	r3, [pc, #232]	; (1e038 <gatt_notify+0x160>)
   1df4e:	9313      	str	r3, [sp, #76]	; 0x4c
   1df50:	2202      	movs	r2, #2
   1df52:	f88d 2004 	strb.w	r2, [sp, #4]
   1df56:	2300      	movs	r3, #0
   1df58:	f88d 3005 	strb.w	r3, [sp, #5]
   1df5c:	f88d 3006 	strb.w	r3, [sp, #6]
   1df60:	f88d 3007 	strb.w	r3, [sp, #7]
   1df64:	9901      	ldr	r1, [sp, #4]
   1df66:	9112      	str	r1, [sp, #72]	; 0x48
   1df68:	4619      	mov	r1, r3
   1df6a:	f363 0100 	bfi	r1, r3, #0, #1
   1df6e:	f363 0141 	bfi	r1, r3, #1, #1
   1df72:	f363 0182 	bfi	r1, r3, #2, #1
   1df76:	f363 01c5 	bfi	r1, r3, #3, #3
   1df7a:	f362 1188 	bfi	r1, r2, #6, #3
   1df7e:	2208      	movs	r2, #8
   1df80:	f362 2152 	bfi	r1, r2, #9, #10
   1df84:	f363 41de 	bfi	r1, r3, #19, #12
   1df88:	f363 71df 	bfi	r1, r3, #31, #1
   1df8c:	aa12      	add	r2, sp, #72	; 0x48
   1df8e:	482b      	ldr	r0, [pc, #172]	; (1e03c <gatt_notify+0x164>)
   1df90:	f00a ff17 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -EPERM;
   1df94:	f04f 30ff 	mov.w	r0, #4294967295
   1df98:	e7d5      	b.n	1df46 <gatt_notify+0x6e>
			LOG_WRN("Device is not subscribed to characteristic");
   1df9a:	4b29      	ldr	r3, [pc, #164]	; (1e040 <gatt_notify+0x168>)
   1df9c:	930d      	str	r3, [sp, #52]	; 0x34
   1df9e:	2202      	movs	r2, #2
   1dfa0:	f88d 2004 	strb.w	r2, [sp, #4]
   1dfa4:	2300      	movs	r3, #0
   1dfa6:	f88d 3005 	strb.w	r3, [sp, #5]
   1dfaa:	f88d 3006 	strb.w	r3, [sp, #6]
   1dfae:	f88d 3007 	strb.w	r3, [sp, #7]
   1dfb2:	9901      	ldr	r1, [sp, #4]
   1dfb4:	910c      	str	r1, [sp, #48]	; 0x30
   1dfb6:	4619      	mov	r1, r3
   1dfb8:	f363 0100 	bfi	r1, r3, #0, #1
   1dfbc:	f363 0141 	bfi	r1, r3, #1, #1
   1dfc0:	f363 0182 	bfi	r1, r3, #2, #1
   1dfc4:	f363 01c5 	bfi	r1, r3, #3, #3
   1dfc8:	f362 1188 	bfi	r1, r2, #6, #3
   1dfcc:	2208      	movs	r2, #8
   1dfce:	f362 2152 	bfi	r1, r2, #9, #10
   1dfd2:	f363 41de 	bfi	r1, r3, #19, #12
   1dfd6:	f363 71df 	bfi	r1, r3, #31, #1
   1dfda:	aa0c      	add	r2, sp, #48	; 0x30
   1dfdc:	4817      	ldr	r0, [pc, #92]	; (1e03c <gatt_notify+0x164>)
   1dfde:	f00a fef0 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1dfe2:	f06f 0015 	mvn.w	r0, #21
   1dfe6:	e7ae      	b.n	1df46 <gatt_notify+0x6e>
		LOG_WRN("No buffer available to send notification");
   1dfe8:	4b16      	ldr	r3, [pc, #88]	; (1e044 <gatt_notify+0x16c>)
   1dfea:	9307      	str	r3, [sp, #28]
   1dfec:	2202      	movs	r2, #2
   1dfee:	f88d 2004 	strb.w	r2, [sp, #4]
   1dff2:	2300      	movs	r3, #0
   1dff4:	f88d 3005 	strb.w	r3, [sp, #5]
   1dff8:	f88d 3006 	strb.w	r3, [sp, #6]
   1dffc:	f88d 3007 	strb.w	r3, [sp, #7]
   1e000:	9901      	ldr	r1, [sp, #4]
   1e002:	9106      	str	r1, [sp, #24]
   1e004:	4619      	mov	r1, r3
   1e006:	f363 0100 	bfi	r1, r3, #0, #1
   1e00a:	f363 0141 	bfi	r1, r3, #1, #1
   1e00e:	f363 0182 	bfi	r1, r3, #2, #1
   1e012:	f363 01c5 	bfi	r1, r3, #3, #3
   1e016:	f362 1188 	bfi	r1, r2, #6, #3
   1e01a:	2208      	movs	r2, #8
   1e01c:	f362 2152 	bfi	r1, r2, #9, #10
   1e020:	f363 41de 	bfi	r1, r3, #19, #12
   1e024:	f363 71df 	bfi	r1, r3, #31, #1
   1e028:	aa06      	add	r2, sp, #24
   1e02a:	4804      	ldr	r0, [pc, #16]	; (1e03c <gatt_notify+0x164>)
   1e02c:	f00a fec9 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1e030:	f06f 000b 	mvn.w	r0, #11
   1e034:	e787      	b.n	1df46 <gatt_notify+0x6e>
   1e036:	bf00      	nop
   1e038:	00030ea0 	.word	0x00030ea0
   1e03c:	0002ee98 	.word	0x0002ee98
   1e040:	00030eb8 	.word	0x00030eb8
   1e044:	00030f40 	.word	0x00030f40

0001e048 <notify_cb>:
{
   1e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e04c:	b089      	sub	sp, #36	; 0x24
   1e04e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e050:	6882      	ldr	r2, [r0, #8]
   1e052:	4b67      	ldr	r3, [pc, #412]	; (1e1f0 <notify_cb+0x1a8>)
   1e054:	429a      	cmp	r2, r3
   1e056:	d005      	beq.n	1e064 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1e058:	f04f 0a01 	mov.w	sl, #1
}
   1e05c:	4650      	mov	r0, sl
   1e05e:	b009      	add	sp, #36	; 0x24
   1e060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e064:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1e066:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1e068:	4b62      	ldr	r3, [pc, #392]	; (1e1f4 <notify_cb+0x1ac>)
   1e06a:	429d      	cmp	r5, r3
   1e06c:	d02d      	beq.n	1e0ca <notify_cb+0x82>
			err = 0;
   1e06e:	2400      	movs	r4, #0
   1e070:	e084      	b.n	1e17c <notify_cb+0x134>
				sc = (struct sc_data *)data->ind_params->data;
   1e072:	6933      	ldr	r3, [r6, #16]
   1e074:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1e076:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1e07a:	8853      	ldrh	r3, [r2, #2]
   1e07c:	8812      	ldrh	r2, [r2, #0]
   1e07e:	4649      	mov	r1, r9
   1e080:	f8df c174 	ldr.w	ip, [pc, #372]	; 1e1f8 <notify_cb+0x1b0>
   1e084:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   1e088:	f7ff f906 	bl	1d298 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e08c:	3401      	adds	r4, #1
   1e08e:	2c00      	cmp	r4, #0
   1e090:	d1ed      	bne.n	1e06e <notify_cb+0x26>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e092:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1e096:	4b58      	ldr	r3, [pc, #352]	; (1e1f8 <notify_cb+0x1b0>)
   1e098:	eb03 0982 	add.w	r9, r3, r2, lsl #2
   1e09c:	f109 0901 	add.w	r9, r9, #1
   1e0a0:	2207      	movs	r2, #7
   1e0a2:	4956      	ldr	r1, [pc, #344]	; (1e1fc <notify_cb+0x1b4>)
   1e0a4:	4648      	mov	r0, r9
   1e0a6:	f010 f900 	bl	2e2aa <memcmp>
   1e0aa:	2800      	cmp	r0, #0
   1e0ac:	d0ee      	beq.n	1e08c <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1e0ae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1e0b2:	2207      	movs	r2, #7
   1e0b4:	4649      	mov	r1, r9
   1e0b6:	4850      	ldr	r0, [pc, #320]	; (1e1f8 <notify_cb+0x1b0>)
   1e0b8:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1e0bc:	f7fc ffd2 	bl	1b064 <bt_conn_lookup_state_le>
			if (!conn) {
   1e0c0:	2800      	cmp	r0, #0
   1e0c2:	d0d6      	beq.n	1e072 <notify_cb+0x2a>
			bt_conn_unref(conn);
   1e0c4:	f00c f8b2 	bl	2a22c <bt_conn_unref>
   1e0c8:	e7e0      	b.n	1e08c <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e0ca:	2400      	movs	r4, #0
   1e0cc:	e7df      	b.n	1e08e <notify_cb+0x46>
			bt_conn_unref(conn);
   1e0ce:	f00c f8ad 	bl	2a22c <bt_conn_unref>
			continue;
   1e0d2:	e052      	b.n	1e17a <notify_cb+0x132>
			bt_conn_unref(conn);
   1e0d4:	4648      	mov	r0, r9
   1e0d6:	f00c f8a9 	bl	2a22c <bt_conn_unref>
			continue;
   1e0da:	e04e      	b.n	1e17a <notify_cb+0x132>
			LOG_WRN("Link is not encrypted");
   1e0dc:	4b48      	ldr	r3, [pc, #288]	; (1e200 <notify_cb+0x1b8>)
   1e0de:	9307      	str	r3, [sp, #28]
   1e0e0:	2202      	movs	r2, #2
   1e0e2:	f88d 2004 	strb.w	r2, [sp, #4]
   1e0e6:	2300      	movs	r3, #0
   1e0e8:	f88d 3005 	strb.w	r3, [sp, #5]
   1e0ec:	f88d 3006 	strb.w	r3, [sp, #6]
   1e0f0:	f88d 3007 	strb.w	r3, [sp, #7]
   1e0f4:	9901      	ldr	r1, [sp, #4]
   1e0f6:	9106      	str	r1, [sp, #24]
   1e0f8:	f363 0800 	bfi	r8, r3, #0, #1
   1e0fc:	f363 0841 	bfi	r8, r3, #1, #1
   1e100:	f363 0882 	bfi	r8, r3, #2, #1
   1e104:	f363 08c5 	bfi	r8, r3, #3, #3
   1e108:	f362 1888 	bfi	r8, r2, #6, #3
   1e10c:	2208      	movs	r2, #8
   1e10e:	f362 2852 	bfi	r8, r2, #9, #10
   1e112:	f363 48de 	bfi	r8, r3, #19, #12
   1e116:	f363 78df 	bfi	r8, r3, #31, #1
   1e11a:	aa06      	add	r2, sp, #24
   1e11c:	4641      	mov	r1, r8
   1e11e:	4839      	ldr	r0, [pc, #228]	; (1e204 <notify_cb+0x1bc>)
   1e120:	f00a fe4f 	bl	28dc2 <z_impl_z_log_msg_static_create>
			bt_conn_unref(conn);
   1e124:	4648      	mov	r0, r9
   1e126:	f00c f881 	bl	2a22c <bt_conn_unref>
			continue;
   1e12a:	e026      	b.n	1e17a <notify_cb+0x132>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   1e12c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1e130:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   1e134:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1e136:	f012 0f02 	tst.w	r2, #2
   1e13a:	d049      	beq.n	1e1d0 <notify_cb+0x188>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1e13c:	6932      	ldr	r2, [r6, #16]
   1e13e:	88b1      	ldrh	r1, [r6, #4]
   1e140:	4648      	mov	r0, r9
   1e142:	f7ff fc5d 	bl	1da00 <gatt_indicate>
			if (err == 0) {
   1e146:	4683      	mov	fp, r0
   1e148:	b970      	cbnz	r0, 1e168 <notify_cb+0x120>
				data->ind_params->_ref++;
   1e14a:	6932      	ldr	r2, [r6, #16]
   1e14c:	7d93      	ldrb	r3, [r2, #22]
   1e14e:	3301      	adds	r3, #1
   1e150:	7593      	strb	r3, [r2, #22]
   1e152:	e009      	b.n	1e168 <notify_cb+0x120>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   1e154:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e158:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1e15c:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1e15e:	f013 0f01 	tst.w	r3, #1
   1e162:	d13a      	bne.n	1e1da <notify_cb+0x192>
			err = 0;
   1e164:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
   1e168:	4648      	mov	r0, r9
   1e16a:	f00c f85f 	bl	2a22c <bt_conn_unref>
		if (err < 0) {
   1e16e:	f1bb 0f00 	cmp.w	fp, #0
   1e172:	f6ff af73 	blt.w	1e05c <notify_cb+0x14>
		data->err = 0;
   1e176:	2300      	movs	r3, #0
   1e178:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e17a:	3401      	adds	r4, #1
   1e17c:	2c00      	cmp	r4, #0
   1e17e:	d133      	bne.n	1e1e8 <notify_cb+0x1a0>
		if (cfg->value != data->type) {
   1e180:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e184:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1e188:	891a      	ldrh	r2, [r3, #8]
   1e18a:	89b3      	ldrh	r3, [r6, #12]
   1e18c:	429a      	cmp	r2, r3
   1e18e:	d1f4      	bne.n	1e17a <notify_cb+0x132>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1e190:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e194:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1e198:	3101      	adds	r1, #1
   1e19a:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1e19e:	f7fc fecb 	bl	1af38 <bt_conn_lookup_addr_le>
		if (!conn) {
   1e1a2:	4681      	mov	r9, r0
   1e1a4:	2800      	cmp	r0, #0
   1e1a6:	d0e8      	beq.n	1e17a <notify_cb+0x132>
		if (conn->state != BT_CONN_CONNECTED) {
   1e1a8:	7a83      	ldrb	r3, [r0, #10]
   1e1aa:	2b07      	cmp	r3, #7
   1e1ac:	d18f      	bne.n	1e0ce <notify_cb+0x86>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1e1ae:	696b      	ldr	r3, [r5, #20]
   1e1b0:	b11b      	cbz	r3, 1e1ba <notify_cb+0x172>
   1e1b2:	4639      	mov	r1, r7
   1e1b4:	4798      	blx	r3
   1e1b6:	2800      	cmp	r0, #0
   1e1b8:	d08c      	beq.n	1e0d4 <notify_cb+0x8c>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e1ba:	2294      	movs	r2, #148	; 0x94
   1e1bc:	4639      	mov	r1, r7
   1e1be:	4648      	mov	r0, r9
   1e1c0:	f00d fb31 	bl	2b826 <bt_gatt_check_perm>
   1e1c4:	4682      	mov	sl, r0
   1e1c6:	2800      	cmp	r0, #0
   1e1c8:	d188      	bne.n	1e0dc <notify_cb+0x94>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1e1ca:	89b3      	ldrh	r3, [r6, #12]
   1e1cc:	2b02      	cmp	r3, #2
   1e1ce:	d0ad      	beq.n	1e12c <notify_cb+0xe4>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1e1d0:	2b01      	cmp	r3, #1
   1e1d2:	d0bf      	beq.n	1e154 <notify_cb+0x10c>
			err = 0;
   1e1d4:	f04f 0b00 	mov.w	fp, #0
   1e1d8:	e7c6      	b.n	1e168 <notify_cb+0x120>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1e1da:	6932      	ldr	r2, [r6, #16]
   1e1dc:	88b1      	ldrh	r1, [r6, #4]
   1e1de:	4648      	mov	r0, r9
   1e1e0:	f7ff fe7a 	bl	1ded8 <gatt_notify>
   1e1e4:	4683      	mov	fp, r0
   1e1e6:	e7bf      	b.n	1e168 <notify_cb+0x120>
	return BT_GATT_ITER_CONTINUE;
   1e1e8:	f04f 0a01 	mov.w	sl, #1
   1e1ec:	e736      	b.n	1e05c <notify_cb+0x14>
   1e1ee:	bf00      	nop
   1e1f0:	0001d35d 	.word	0x0001d35d
   1e1f4:	20000754 	.word	0x20000754
   1e1f8:	2000389c 	.word	0x2000389c
   1e1fc:	0002fe9c 	.word	0x0002fe9c
   1e200:	00030ea0 	.word	0x00030ea0
   1e204:	0002ee98 	.word	0x0002ee98

0001e208 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1e208:	b500      	push	{lr}
   1e20a:	b087      	sub	sp, #28
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1e20c:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1e20e:	2001      	movs	r0, #1
   1e210:	f88d 0014 	strb.w	r0, [sp, #20]
   1e214:	ab04      	add	r3, sp, #16
   1e216:	9302      	str	r3, [sp, #8]
   1e218:	4b05      	ldr	r3, [pc, #20]	; (1e230 <bt_gatt_connected+0x28>)
   1e21a:	9301      	str	r3, [sp, #4]
   1e21c:	2200      	movs	r2, #0
   1e21e:	9200      	str	r2, [sp, #0]
   1e220:	4613      	mov	r3, r2
   1e222:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e226:	f7ff fa95 	bl	1d754 <bt_gatt_foreach_attr_type>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1e22a:	b007      	add	sp, #28
   1e22c:	f85d fb04 	ldr.w	pc, [sp], #4
   1e230:	0001ddd1 	.word	0x0001ddd1

0001e234 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1e234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e236:	4605      	mov	r5, r0
   1e238:	460e      	mov	r6, r1
   1e23a:	4617      	mov	r7, r2
	return list->head;
   1e23c:	4b0a      	ldr	r3, [pc, #40]	; (1e268 <bt_gatt_att_max_mtu_changed+0x34>)
   1e23e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e240:	b104      	cbz	r4, 1e244 <bt_gatt_att_max_mtu_changed+0x10>
   1e242:	3c04      	subs	r4, #4
   1e244:	b174      	cbz	r4, 1e264 <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   1e246:	6823      	ldr	r3, [r4, #0]
   1e248:	b143      	cbz	r3, 1e25c <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   1e24a:	463a      	mov	r2, r7
   1e24c:	4631      	mov	r1, r6
   1e24e:	4628      	mov	r0, r5
   1e250:	4798      	blx	r3
	return node->next;
   1e252:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e254:	2c00      	cmp	r4, #0
   1e256:	d0f5      	beq.n	1e244 <bt_gatt_att_max_mtu_changed+0x10>
   1e258:	3c04      	subs	r4, #4
   1e25a:	e7f3      	b.n	1e244 <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e25c:	1d23      	adds	r3, r4, #4
   1e25e:	d1f8      	bne.n	1e252 <bt_gatt_att_max_mtu_changed+0x1e>
   1e260:	461c      	mov	r4, r3
   1e262:	e7ef      	b.n	1e244 <bt_gatt_att_max_mtu_changed+0x10>
		}
	}
}
   1e264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e266:	bf00      	nop
   1e268:	200038b0 	.word	0x200038b0

0001e26c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1e26c:	b510      	push	{r4, lr}
   1e26e:	b084      	sub	sp, #16
   1e270:	4604      	mov	r4, r0
   1e272:	9002      	str	r0, [sp, #8]
   1e274:	4b07      	ldr	r3, [pc, #28]	; (1e294 <bt_gatt_disconnected+0x28>)
   1e276:	9301      	str	r3, [sp, #4]
   1e278:	2200      	movs	r2, #0
   1e27a:	9200      	str	r2, [sp, #0]
   1e27c:	4613      	mov	r3, r2
   1e27e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e282:	2001      	movs	r0, #1
   1e284:	f7ff fa66 	bl	1d754 <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1e288:	4620      	mov	r0, r4
   1e28a:	f00d f997 	bl	2b5bc <remove_cf_cfg>
#endif
}
   1e28e:	b004      	add	sp, #16
   1e290:	bd10      	pop	{r4, pc}
   1e292:	bf00      	nop
   1e294:	0001d59d 	.word	0x0001d59d

0001e298 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1e298:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e29a:	b083      	sub	sp, #12
   1e29c:	af00      	add	r7, sp, #0
   1e29e:	4605      	mov	r5, r0
		.recv = bt_smp_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1e2a0:	2000      	movs	r0, #0
   1e2a2:	2800      	cmp	r0, #0
   1e2a4:	d03a      	beq.n	1e31c <bt_smp_accept+0x84>
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1e2a6:	466c      	mov	r4, sp
   1e2a8:	b088      	sub	sp, #32
   1e2aa:	466b      	mov	r3, sp
   1e2ac:	f113 0210 	adds.w	r2, r3, #16
   1e2b0:	d044      	beq.n	1e33c <bt_smp_accept+0xa4>
   1e2b2:	210c      	movs	r1, #12
   1e2b4:	b13a      	cbz	r2, 1e2c6 <bt_smp_accept+0x2e>
   1e2b6:	4608      	mov	r0, r1
   1e2b8:	2904      	cmp	r1, #4
   1e2ba:	dd01      	ble.n	1e2c0 <bt_smp_accept+0x28>
   1e2bc:	4e22      	ldr	r6, [pc, #136]	; (1e348 <bt_smp_accept+0xb0>)
   1e2be:	615e      	str	r6, [r3, #20]
   1e2c0:	2808      	cmp	r0, #8
   1e2c2:	dd00      	ble.n	1e2c6 <bt_smp_accept+0x2e>
   1e2c4:	619d      	str	r5, [r3, #24]
   1e2c6:	290b      	cmp	r1, #11
   1e2c8:	dd3b      	ble.n	1e342 <bt_smp_accept+0xaa>
   1e2ca:	f04f 0c0c 	mov.w	ip, #12
   1e2ce:	b13a      	cbz	r2, 1e2e0 <bt_smp_accept+0x48>
   1e2d0:	2103      	movs	r1, #3
   1e2d2:	7139      	strb	r1, [r7, #4]
   1e2d4:	2100      	movs	r1, #0
   1e2d6:	7179      	strb	r1, [r7, #5]
   1e2d8:	71b9      	strb	r1, [r7, #6]
   1e2da:	71f9      	strb	r1, [r7, #7]
   1e2dc:	6878      	ldr	r0, [r7, #4]
   1e2de:	6118      	str	r0, [r3, #16]
   1e2e0:	2100      	movs	r1, #0
   1e2e2:	f36f 0100 	bfc	r1, #0, #1
   1e2e6:	f36f 0141 	bfc	r1, #1, #1
   1e2ea:	f36f 0182 	bfc	r1, #2, #1
   1e2ee:	f36f 01c5 	bfc	r1, #3, #3
   1e2f2:	2301      	movs	r3, #1
   1e2f4:	f363 1188 	bfi	r1, r3, #6, #3
   1e2f8:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1e2fc:	f36c 2152 	bfi	r1, ip, #9, #10
   1e300:	f36f 41de 	bfc	r1, #19, #12
   1e304:	f36f 71df 	bfc	r1, #31, #1
   1e308:	2300      	movs	r3, #0
   1e30a:	4810      	ldr	r0, [pc, #64]	; (1e34c <bt_smp_accept+0xb4>)
   1e30c:	f00a fd59 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1e310:	46a5      	mov	sp, r4

	return -ENOMEM;
   1e312:	f06f 000b 	mvn.w	r0, #11
}
   1e316:	370c      	adds	r7, #12
   1e318:	46bd      	mov	sp, r7
   1e31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->chan.conn) {
   1e31c:	238c      	movs	r3, #140	; 0x8c
   1e31e:	fb00 f303 	mul.w	r3, r0, r3
   1e322:	4a0b      	ldr	r2, [pc, #44]	; (1e350 <bt_smp_accept+0xb8>)
   1e324:	58d3      	ldr	r3, [r2, r3]
   1e326:	b10b      	cbz	r3, 1e32c <bt_smp_accept+0x94>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1e328:	3001      	adds	r0, #1
   1e32a:	e7ba      	b.n	1e2a2 <bt_smp_accept+0xa>
		smp->chan.ops = &ops;
   1e32c:	4b08      	ldr	r3, [pc, #32]	; (1e350 <bt_smp_accept+0xb8>)
   1e32e:	228c      	movs	r2, #140	; 0x8c
   1e330:	fb02 3300 	mla	r3, r2, r0, r3
   1e334:	4a07      	ldr	r2, [pc, #28]	; (1e354 <bt_smp_accept+0xbc>)
   1e336:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   1e338:	600b      	str	r3, [r1, #0]
		return 0;
   1e33a:	e7ec      	b.n	1e316 <bt_smp_accept+0x7e>
	LOG_ERR("No available SMP context for conn %p", conn);
   1e33c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e340:	e7b8      	b.n	1e2b4 <bt_smp_accept+0x1c>
   1e342:	f06f 0c1b 	mvn.w	ip, #27
   1e346:	e7c2      	b.n	1e2ce <bt_smp_accept+0x36>
   1e348:	000310a8 	.word	0x000310a8
   1e34c:	0002eed0 	.word	0x0002eed0
   1e350:	200038b8 	.word	0x200038b8
   1e354:	000310d0 	.word	0x000310d0

0001e358 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1e358:	4b03      	ldr	r3, [pc, #12]	; (1e368 <pool_id+0x10>)
   1e35a:	1ac0      	subs	r0, r0, r3
   1e35c:	1080      	asrs	r0, r0, #2
}
   1e35e:	4b03      	ldr	r3, [pc, #12]	; (1e36c <pool_id+0x14>)
   1e360:	fb03 f000 	mul.w	r0, r3, r0
   1e364:	4770      	bx	lr
   1e366:	bf00      	nop
   1e368:	20000c64 	.word	0x20000c64
   1e36c:	ba2e8ba3 	.word	0xba2e8ba3

0001e370 <net_buf_pool_get>:
}
   1e370:	222c      	movs	r2, #44	; 0x2c
   1e372:	4b02      	ldr	r3, [pc, #8]	; (1e37c <net_buf_pool_get+0xc>)
   1e374:	fb02 3000 	mla	r0, r2, r0, r3
   1e378:	4770      	bx	lr
   1e37a:	bf00      	nop
   1e37c:	20000c64 	.word	0x20000c64

0001e380 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1e380:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1e382:	4804      	ldr	r0, [pc, #16]	; (1e394 <xoshiro128_initialize+0x14>)
   1e384:	f00e ffb5 	bl	2d2f2 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   1e388:	b108      	cbz	r0, 1e38e <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   1e38a:	2000      	movs	r0, #0
}
   1e38c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1e38e:	f06f 0012 	mvn.w	r0, #18
   1e392:	e7fb      	b.n	1e38c <xoshiro128_initialize+0xc>
   1e394:	0002ec2c 	.word	0x0002ec2c

0001e398 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1e398:	4800      	ldr	r0, [pc, #0]	; (1e39c <get_hf_flags+0x4>)
   1e39a:	4770      	bx	lr
   1e39c:	20003998 	.word	0x20003998

0001e3a0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1e3a0:	4b03      	ldr	r3, [pc, #12]	; (1e3b0 <get_subsys+0x10>)
   1e3a2:	1ac0      	subs	r0, r0, r3
   1e3a4:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1e3a6:	4b03      	ldr	r3, [pc, #12]	; (1e3b4 <get_subsys+0x14>)
   1e3a8:	fb03 f000 	mul.w	r0, r3, r0
   1e3ac:	4770      	bx	lr
   1e3ae:	bf00      	nop
   1e3b0:	20003958 	.word	0x20003958
   1e3b4:	b6db6db7 	.word	0xb6db6db7

0001e3b8 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1e3b8:	b538      	push	{r3, r4, r5, lr}
   1e3ba:	4605      	mov	r5, r0
   1e3bc:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1e3be:	f7ff ffef 	bl	1e3a0 <get_subsys>
   1e3c2:	4601      	mov	r1, r0
   1e3c4:	2240      	movs	r2, #64	; 0x40
   1e3c6:	4803      	ldr	r0, [pc, #12]	; (1e3d4 <onoff_stop+0x1c>)
   1e3c8:	f00d fdc9 	bl	2bf5e <stop>
   1e3cc:	4601      	mov	r1, r0
	notify(mgr, res);
   1e3ce:	4628      	mov	r0, r5
   1e3d0:	47a0      	blx	r4
}
   1e3d2:	bd38      	pop	{r3, r4, r5, pc}
   1e3d4:	0002ebb4 	.word	0x0002ebb4

0001e3d8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1e3d8:	b530      	push	{r4, r5, lr}
   1e3da:	b083      	sub	sp, #12
   1e3dc:	4605      	mov	r5, r0
   1e3de:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1e3e0:	f7ff ffde 	bl	1e3a0 <get_subsys>
   1e3e4:	4601      	mov	r1, r0
   1e3e6:	2340      	movs	r3, #64	; 0x40
   1e3e8:	9300      	str	r3, [sp, #0]
   1e3ea:	4623      	mov	r3, r4
   1e3ec:	4a05      	ldr	r2, [pc, #20]	; (1e404 <onoff_start+0x2c>)
   1e3ee:	4806      	ldr	r0, [pc, #24]	; (1e408 <onoff_start+0x30>)
   1e3f0:	f00d fdcf 	bl	2bf92 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1e3f4:	1e01      	subs	r1, r0, #0
   1e3f6:	db01      	blt.n	1e3fc <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1e3f8:	b003      	add	sp, #12
   1e3fa:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1e3fc:	4628      	mov	r0, r5
   1e3fe:	47a0      	blx	r4
}
   1e400:	e7fa      	b.n	1e3f8 <onoff_start+0x20>
   1e402:	bf00      	nop
   1e404:	0002bfdb 	.word	0x0002bfdb
   1e408:	0002ebb4 	.word	0x0002ebb4

0001e40c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1e40c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1e40e:	b110      	cbz	r0, 1e416 <clock_event_handler+0xa>
   1e410:	2801      	cmp	r0, #1
   1e412:	d00d      	beq.n	1e430 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1e414:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1e416:	2100      	movs	r1, #0
   1e418:	4808      	ldr	r0, [pc, #32]	; (1e43c <clock_event_handler+0x30>)
   1e41a:	f00d fd29 	bl	2be70 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1e41e:	6883      	ldr	r3, [r0, #8]
   1e420:	f013 0f07 	tst.w	r3, #7
   1e424:	d1f6      	bne.n	1e414 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1e426:	2100      	movs	r1, #0
   1e428:	4804      	ldr	r0, [pc, #16]	; (1e43c <clock_event_handler+0x30>)
   1e42a:	f00d fd86 	bl	2bf3a <clkstarted_handle>
   1e42e:	e7f1      	b.n	1e414 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1e430:	2101      	movs	r1, #1
   1e432:	4802      	ldr	r0, [pc, #8]	; (1e43c <clock_event_handler+0x30>)
   1e434:	f00d fd81 	bl	2bf3a <clkstarted_handle>
}
   1e438:	e7ec      	b.n	1e414 <clock_event_handler+0x8>
   1e43a:	bf00      	nop
   1e43c:	0002ebb4 	.word	0x0002ebb4

0001e440 <generic_hfclk_start>:
{
   1e440:	b510      	push	{r4, lr}
   1e442:	b082      	sub	sp, #8
	__asm__ volatile(
   1e444:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e448:	f3ef 8411 	mrs	r4, BASEPRI
   1e44c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e450:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1e454:	4a14      	ldr	r2, [pc, #80]	; (1e4a8 <generic_hfclk_start+0x68>)
   1e456:	6813      	ldr	r3, [r2, #0]
   1e458:	f043 0102 	orr.w	r1, r3, #2
   1e45c:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1e45e:	f013 0f01 	tst.w	r3, #1
   1e462:	d109      	bne.n	1e478 <generic_hfclk_start+0x38>
	bool already_started = false;
   1e464:	2300      	movs	r3, #0
	__asm__ volatile(
   1e466:	f384 8811 	msr	BASEPRI, r4
   1e46a:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1e46e:	b9b3      	cbnz	r3, 1e49e <generic_hfclk_start+0x5e>
	hfclk_start();
   1e470:	f00d fdbb 	bl	2bfea <hfclk_start>
}
   1e474:	b002      	add	sp, #8
   1e476:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1e478:	f10d 0207 	add.w	r2, sp, #7
   1e47c:	2101      	movs	r1, #1
   1e47e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1e482:	f00d fcd2 	bl	2be2a <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1e486:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e48a:	2b01      	cmp	r3, #1
   1e48c:	d001      	beq.n	1e492 <generic_hfclk_start+0x52>
	bool already_started = false;
   1e48e:	2300      	movs	r3, #0
   1e490:	e7e9      	b.n	1e466 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   1e492:	f7ff ff81 	bl	1e398 <get_hf_flags>
   1e496:	f00d fd3d 	bl	2bf14 <set_on_state>
			already_started = true;
   1e49a:	2301      	movs	r3, #1
   1e49c:	e7e3      	b.n	1e466 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   1e49e:	2100      	movs	r1, #0
   1e4a0:	4802      	ldr	r0, [pc, #8]	; (1e4ac <generic_hfclk_start+0x6c>)
   1e4a2:	f00d fd4a 	bl	2bf3a <clkstarted_handle>
		return;
   1e4a6:	e7e5      	b.n	1e474 <generic_hfclk_start+0x34>
   1e4a8:	200039a8 	.word	0x200039a8
   1e4ac:	0002ebb4 	.word	0x0002ebb4

0001e4b0 <generic_hfclk_stop>:
{
   1e4b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e4b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e4b6:	f3ef 8411 	mrs	r4, BASEPRI
   1e4ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1e4be:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1e4c2:	4a08      	ldr	r2, [pc, #32]	; (1e4e4 <generic_hfclk_stop+0x34>)
   1e4c4:	6813      	ldr	r3, [r2, #0]
   1e4c6:	f023 0102 	bic.w	r1, r3, #2
   1e4ca:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1e4cc:	f013 0f01 	tst.w	r3, #1
   1e4d0:	d004      	beq.n	1e4dc <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   1e4d2:	f384 8811 	msr	BASEPRI, r4
   1e4d6:	f3bf 8f6f 	isb	sy
}
   1e4da:	bd10      	pop	{r4, pc}
		hfclk_stop();
   1e4dc:	f00d fd8f 	bl	2bffe <hfclk_stop>
   1e4e0:	e7f7      	b.n	1e4d2 <generic_hfclk_stop+0x22>
   1e4e2:	bf00      	nop
   1e4e4:	200039a8 	.word	0x200039a8

0001e4e8 <lfclk_spinwait>:
{
   1e4e8:	b570      	push	{r4, r5, r6, lr}
   1e4ea:	b082      	sub	sp, #8
   1e4ec:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1e4ee:	2801      	cmp	r0, #1
   1e4f0:	d107      	bne.n	1e502 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e4f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e4f6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1e4fa:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1e4fe:	2b01      	cmp	r3, #1
   1e500:	d04c      	beq.n	1e59c <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e502:	f00e fff1 	bl	2d4e8 <k_is_in_isr>
   1e506:	4604      	mov	r4, r0
   1e508:	b918      	cbnz	r0, 1e512 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   1e50a:	4b28      	ldr	r3, [pc, #160]	; (1e5ac <lfclk_spinwait+0xc4>)
   1e50c:	781b      	ldrb	r3, [r3, #0]
   1e50e:	2b00      	cmp	r3, #0
   1e510:	d139      	bne.n	1e586 <lfclk_spinwait+0x9e>
	__asm__ volatile(
   1e512:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e516:	f3ef 8611 	mrs	r6, BASEPRI
   1e51a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e51e:	f3bf 8f6f 	isb	sy
   1e522:	2401      	movs	r4, #1
	if (!isr_mode) {
   1e524:	b924      	cbnz	r4, 1e530 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
   1e526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e52a:	2202      	movs	r2, #2
   1e52c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1e530:	aa01      	add	r2, sp, #4
   1e532:	2100      	movs	r1, #0
   1e534:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1e538:	f00d fc77 	bl	2be2a <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1e53c:	b120      	cbz	r0, 1e548 <lfclk_spinwait+0x60>
		 && ((type == target_type)
   1e53e:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1e540:	2b01      	cmp	r3, #1
   1e542:	d026      	beq.n	1e592 <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1e544:	2d01      	cmp	r5, #1
   1e546:	d024      	beq.n	1e592 <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e548:	b1fc      	cbz	r4, 1e58a <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1e54a:	4630      	mov	r0, r6
   1e54c:	f7f6 fd5c 	bl	15008 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1e550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e554:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1e558:	2b00      	cmp	r3, #0
   1e55a:	d1e9      	bne.n	1e530 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e55c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e560:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1e564:	2b00      	cmp	r3, #0
   1e566:	d0e3      	beq.n	1e530 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e56c:	2200      	movs	r2, #0
   1e56e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1e572:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e576:	2201      	movs	r2, #1
   1e578:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e57c:	490c      	ldr	r1, [pc, #48]	; (1e5b0 <lfclk_spinwait+0xc8>)
   1e57e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e582:	609a      	str	r2, [r3, #8]
}
   1e584:	e7d4      	b.n	1e530 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
   1e586:	2600      	movs	r6, #0
   1e588:	e7cc      	b.n	1e524 <lfclk_spinwait+0x3c>
				k_msleep(1);
   1e58a:	2001      	movs	r0, #1
   1e58c:	f00d fd41 	bl	2c012 <k_msleep>
   1e590:	e7de      	b.n	1e550 <lfclk_spinwait+0x68>
	if (isr_mode) {
   1e592:	b12c      	cbz	r4, 1e5a0 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   1e594:	f386 8811 	msr	BASEPRI, r6
   1e598:	f3bf 8f6f 	isb	sy
}
   1e59c:	b002      	add	sp, #8
   1e59e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1e5a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e5a4:	2202      	movs	r2, #2
   1e5a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e5aa:	e7f7      	b.n	1e59c <lfclk_spinwait+0xb4>
   1e5ac:	20004b70 	.word	0x20004b70
   1e5b0:	e000e100 	.word	0xe000e100

0001e5b4 <api_blocking_start>:
{
   1e5b4:	b500      	push	{lr}
   1e5b6:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1e5b8:	f8cd d000 	str.w	sp, [sp]
   1e5bc:	f8cd d004 	str.w	sp, [sp, #4]
   1e5c0:	2300      	movs	r3, #0
   1e5c2:	9302      	str	r3, [sp, #8]
   1e5c4:	2301      	movs	r3, #1
   1e5c6:	9303      	str	r3, [sp, #12]
   1e5c8:	ab04      	add	r3, sp, #16
   1e5ca:	9304      	str	r3, [sp, #16]
   1e5cc:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1e5ce:	466b      	mov	r3, sp
   1e5d0:	4a06      	ldr	r2, [pc, #24]	; (1e5ec <api_blocking_start+0x38>)
   1e5d2:	f00d fcfa 	bl	2bfca <api_start>
	if (err < 0) {
   1e5d6:	2800      	cmp	r0, #0
   1e5d8:	db05      	blt.n	1e5e6 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1e5da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1e5de:	2300      	movs	r3, #0
   1e5e0:	4668      	mov	r0, sp
   1e5e2:	f003 fe79 	bl	222d8 <z_impl_k_sem_take>
}
   1e5e6:	b007      	add	sp, #28
   1e5e8:	f85d fb04 	ldr.w	pc, [sp], #4
   1e5ec:	0002c03f 	.word	0x0002c03f

0001e5f0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1e5f0:	b570      	push	{r4, r5, r6, lr}
   1e5f2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1e5f4:	2200      	movs	r2, #0
   1e5f6:	2101      	movs	r1, #1
   1e5f8:	4610      	mov	r0, r2
   1e5fa:	f00a ff90 	bl	2951e <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1e5fe:	4811      	ldr	r0, [pc, #68]	; (1e644 <clk_init+0x54>)
   1e600:	f002 faf4 	bl	20bec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1e604:	4b10      	ldr	r3, [pc, #64]	; (1e648 <clk_init+0x58>)
   1e606:	4298      	cmp	r0, r3
   1e608:	d119      	bne.n	1e63e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1e60a:	f00e fd4e 	bl	2d0aa <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1e60e:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1e610:	2c01      	cmp	r4, #1
   1e612:	d812      	bhi.n	1e63a <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1e614:	4621      	mov	r1, r4
   1e616:	4630      	mov	r0, r6
   1e618:	f00d fc2a 	bl	2be70 <get_sub_data>
   1e61c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1e61e:	4621      	mov	r1, r4
   1e620:	4630      	mov	r0, r6
   1e622:	f00d fc32 	bl	2be8a <get_onoff_manager>
   1e626:	4909      	ldr	r1, [pc, #36]	; (1e64c <clk_init+0x5c>)
   1e628:	f009 fdc0 	bl	281ac <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1e62c:	2800      	cmp	r0, #0
   1e62e:	db05      	blt.n	1e63c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1e630:	2301      	movs	r3, #1
   1e632:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1e634:	441c      	add	r4, r3
   1e636:	b2e4      	uxtb	r4, r4
   1e638:	e7ea      	b.n	1e610 <clk_init+0x20>
	}

	return 0;
   1e63a:	2000      	movs	r0, #0
}
   1e63c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1e63e:	f06f 0004 	mvn.w	r0, #4
   1e642:	e7fb      	b.n	1e63c <clk_init+0x4c>
   1e644:	0001e40d 	.word	0x0001e40d
   1e648:	0bad0000 	.word	0x0bad0000
   1e64c:	00031114 	.word	0x00031114

0001e650 <z_nrf_clock_control_lf_on>:
{
   1e650:	b510      	push	{r4, lr}
   1e652:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e654:	4b10      	ldr	r3, [pc, #64]	; (1e698 <z_nrf_clock_control_lf_on+0x48>)
   1e656:	2101      	movs	r1, #1
   1e658:	f3bf 8f5b 	dmb	ish
   1e65c:	e853 2f00 	ldrex	r2, [r3]
   1e660:	e843 1000 	strex	r0, r1, [r3]
   1e664:	2800      	cmp	r0, #0
   1e666:	d1f9      	bne.n	1e65c <z_nrf_clock_control_lf_on+0xc>
   1e668:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1e66c:	b11a      	cbz	r2, 1e676 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   1e66e:	1e63      	subs	r3, r4, #1
   1e670:	2b01      	cmp	r3, #1
   1e672:	d90d      	bls.n	1e690 <z_nrf_clock_control_lf_on+0x40>
}
   1e674:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1e676:	4809      	ldr	r0, [pc, #36]	; (1e69c <z_nrf_clock_control_lf_on+0x4c>)
   1e678:	f00d fc07 	bl	2be8a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1e67c:	4908      	ldr	r1, [pc, #32]	; (1e6a0 <z_nrf_clock_control_lf_on+0x50>)
   1e67e:	2300      	movs	r3, #0
   1e680:	604b      	str	r3, [r1, #4]
   1e682:	608b      	str	r3, [r1, #8]
   1e684:	60cb      	str	r3, [r1, #12]
   1e686:	2301      	movs	r3, #1
   1e688:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1e68a:	f009 fdac 	bl	281e6 <onoff_request>
   1e68e:	e7ee      	b.n	1e66e <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   1e690:	4620      	mov	r0, r4
   1e692:	f7ff ff29 	bl	1e4e8 <lfclk_spinwait>
		break;
   1e696:	e7ed      	b.n	1e674 <z_nrf_clock_control_lf_on+0x24>
   1e698:	20003954 	.word	0x20003954
   1e69c:	0002ebb4 	.word	0x0002ebb4
   1e6a0:	20003944 	.word	0x20003944

0001e6a4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1e6a4:	b510      	push	{r4, lr}
   1e6a6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1e6a8:	280a      	cmp	r0, #10
   1e6aa:	d006      	beq.n	1e6ba <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1e6ac:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1e6ae:	4806      	ldr	r0, [pc, #24]	; (1e6c8 <console_out+0x24>)
   1e6b0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1e6b2:	685b      	ldr	r3, [r3, #4]
   1e6b4:	4798      	blx	r3

	return c;
}
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   1e6ba:	4803      	ldr	r0, [pc, #12]	; (1e6c8 <console_out+0x24>)
   1e6bc:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1e6be:	685b      	ldr	r3, [r3, #4]
   1e6c0:	210d      	movs	r1, #13
   1e6c2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1e6c4:	e7f2      	b.n	1e6ac <console_out+0x8>
   1e6c6:	bf00      	nop
   1e6c8:	0002ec5c 	.word	0x0002ec5c

0001e6cc <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   1e6cc:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1e6ce:	4c04      	ldr	r4, [pc, #16]	; (1e6e0 <uart_console_hook_install+0x14>)
   1e6d0:	4620      	mov	r0, r4
   1e6d2:	f7f8 f957 	bl	16984 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   1e6d6:	4620      	mov	r0, r4
   1e6d8:	f7f4 fb14 	bl	12d04 <__printk_hook_install>
#endif
}
   1e6dc:	bd10      	pop	{r4, pc}
   1e6de:	bf00      	nop
   1e6e0:	0001e6a5 	.word	0x0001e6a5

0001e6e4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1e6e4:	b508      	push	{r3, lr}
   1e6e6:	4805      	ldr	r0, [pc, #20]	; (1e6fc <uart_console_init+0x18>)
   1e6e8:	f00e fe03 	bl	2d2f2 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1e6ec:	b118      	cbz	r0, 1e6f6 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   1e6ee:	f7ff ffed 	bl	1e6cc <uart_console_hook_install>

	return 0;
   1e6f2:	2000      	movs	r0, #0
}
   1e6f4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1e6f6:	f06f 0012 	mvn.w	r0, #18
   1e6fa:	e7fb      	b.n	1e6f4 <uart_console_init+0x10>
   1e6fc:	0002ec5c 	.word	0x0002ec5c

0001e700 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e700:	b128      	cbz	r0, 1e70e <get_dev+0xe>
   1e702:	2801      	cmp	r0, #1
   1e704:	d101      	bne.n	1e70a <get_dev+0xa>
   1e706:	4803      	ldr	r0, [pc, #12]	; (1e714 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1e708:	4770      	bx	lr
	const struct device *dev = NULL;
   1e70a:	2000      	movs	r0, #0
   1e70c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e70e:	4802      	ldr	r0, [pc, #8]	; (1e718 <get_dev+0x18>)
   1e710:	4770      	bx	lr
   1e712:	bf00      	nop
   1e714:	0002ebcc 	.word	0x0002ebcc
   1e718:	0002ebe4 	.word	0x0002ebe4

0001e71c <gpio_nrfx_pin_interrupt_configure>:
{
   1e71c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e71e:	b085      	sub	sp, #20
   1e720:	460e      	mov	r6, r1
   1e722:	4619      	mov	r1, r3
	return port->config;
   1e724:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e726:	7b1b      	ldrb	r3, [r3, #12]
   1e728:	f006 051f 	and.w	r5, r6, #31
   1e72c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1e730:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   1e734:	d022      	beq.n	1e77c <gpio_nrfx_pin_interrupt_configure+0x60>
   1e736:	4607      	mov	r7, r0
   1e738:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e73a:	2300      	movs	r3, #0
   1e73c:	9301      	str	r3, [sp, #4]
   1e73e:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   1e740:	4610      	mov	r0, r2
   1e742:	f00d fd5e 	bl	2c202 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e746:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   1e74a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1e74c:	6899      	ldr	r1, [r3, #8]
   1e74e:	40f1      	lsrs	r1, r6
   1e750:	f011 0f01 	tst.w	r1, #1
   1e754:	d102      	bne.n	1e75c <gpio_nrfx_pin_interrupt_configure+0x40>
   1e756:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   1e75a:	d014      	beq.n	1e786 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e75c:	2300      	movs	r3, #0
   1e75e:	aa01      	add	r2, sp, #4
   1e760:	4619      	mov	r1, r3
   1e762:	4628      	mov	r0, r5
   1e764:	f002 fde4 	bl	21330 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1e768:	4b1b      	ldr	r3, [pc, #108]	; (1e7d8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1e76a:	4298      	cmp	r0, r3
   1e76c:	d131      	bne.n	1e7d2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1e76e:	2101      	movs	r1, #1
   1e770:	4628      	mov	r0, r5
   1e772:	f002 ff3d 	bl	215f0 <nrfx_gpiote_trigger_enable>
	return 0;
   1e776:	2000      	movs	r0, #0
}
   1e778:	b005      	add	sp, #20
   1e77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   1e77c:	4628      	mov	r0, r5
   1e77e:	f002 ff69 	bl	21654 <nrfx_gpiote_trigger_disable>
		return 0;
   1e782:	2000      	movs	r0, #0
   1e784:	e7f8      	b.n	1e778 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1e786:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   1e78a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e78c:	2a01      	cmp	r2, #1
   1e78e:	d014      	beq.n	1e7ba <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   1e790:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e794:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1e79c:	f013 0f01 	tst.w	r3, #1
   1e7a0:	d1dc      	bne.n	1e75c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1e7a2:	f10d 010f 	add.w	r1, sp, #15
   1e7a6:	4628      	mov	r0, r5
   1e7a8:	f002 fec6 	bl	21538 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1e7ac:	4b0b      	ldr	r3, [pc, #44]	; (1e7dc <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1e7ae:	4298      	cmp	r0, r3
   1e7b0:	d005      	beq.n	1e7be <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   1e7b2:	f10d 030f 	add.w	r3, sp, #15
   1e7b6:	9302      	str	r3, [sp, #8]
   1e7b8:	e7d0      	b.n	1e75c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   1e7ba:	4a09      	ldr	r2, [pc, #36]	; (1e7e0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1e7bc:	e7ea      	b.n	1e794 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   1e7be:	f10d 000f 	add.w	r0, sp, #15
   1e7c2:	f002 ff0d 	bl	215e0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1e7c6:	4b04      	ldr	r3, [pc, #16]	; (1e7d8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1e7c8:	4298      	cmp	r0, r3
   1e7ca:	d0f2      	beq.n	1e7b2 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   1e7cc:	f06f 000b 	mvn.w	r0, #11
   1e7d0:	e7d2      	b.n	1e778 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   1e7d2:	f06f 0015 	mvn.w	r0, #21
   1e7d6:	e7cf      	b.n	1e778 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1e7d8:	0bad0000 	.word	0x0bad0000
   1e7dc:	0bad0004 	.word	0x0bad0004
   1e7e0:	50000300 	.word	0x50000300

0001e7e4 <gpio_nrfx_pin_configure>:
{
   1e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7e8:	b086      	sub	sp, #24
   1e7ea:	460e      	mov	r6, r1
   1e7ec:	4614      	mov	r4, r2
	return port->config;
   1e7ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e7f2:	f898 300c 	ldrb.w	r3, [r8, #12]
   1e7f6:	f001 051f 	and.w	r5, r1, #31
   1e7fa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1e7fe:	f10d 0117 	add.w	r1, sp, #23
   1e802:	4628      	mov	r0, r5
   1e804:	f002 fe98 	bl	21538 <nrfx_gpiote_channel_get>
   1e808:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1e80a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   1e80e:	d03a      	beq.n	1e886 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e810:	2100      	movs	r1, #0
   1e812:	9103      	str	r1, [sp, #12]
   1e814:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e816:	460b      	mov	r3, r1
   1e818:	aa03      	add	r2, sp, #12
   1e81a:	4628      	mov	r0, r5
   1e81c:	f002 fd88 	bl	21330 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1e820:	4b33      	ldr	r3, [pc, #204]	; (1e8f0 <gpio_nrfx_pin_configure+0x10c>)
   1e822:	4298      	cmp	r0, r3
   1e824:	d161      	bne.n	1e8ea <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
   1e826:	429f      	cmp	r7, r3
   1e828:	d03d      	beq.n	1e8a6 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
   1e82a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   1e82e:	d049      	beq.n	1e8c4 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
   1e830:	f10d 0103 	add.w	r1, sp, #3
   1e834:	4620      	mov	r0, r4
   1e836:	f00d fc69 	bl	2c10c <get_drive>
		if (rv != 0) {
   1e83a:	4607      	mov	r7, r0
   1e83c:	bb50      	cbnz	r0, 1e894 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
   1e83e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1e842:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1e846:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   1e84a:	bf0c      	ite	eq
   1e84c:	2301      	moveq	r3, #1
   1e84e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1e850:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   1e854:	4620      	mov	r0, r4
   1e856:	f00d fc9c 	bl	2c192 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1e85a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1e85e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   1e862:	d025      	beq.n	1e8b0 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1e864:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1e868:	2301      	movs	r3, #1
   1e86a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1e86c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1e870:	2200      	movs	r2, #0
   1e872:	a901      	add	r1, sp, #4
   1e874:	4628      	mov	r0, r5
   1e876:	f002 fdef 	bl	21458 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e87a:	4b1d      	ldr	r3, [pc, #116]	; (1e8f0 <gpio_nrfx_pin_configure+0x10c>)
   1e87c:	4298      	cmp	r0, r3
   1e87e:	d009      	beq.n	1e894 <gpio_nrfx_pin_configure+0xb0>
   1e880:	f06f 0715 	mvn.w	r7, #21
   1e884:	e006      	b.n	1e894 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1e886:	4628      	mov	r0, r5
   1e888:	f002 ff06 	bl	21698 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1e88c:	4b18      	ldr	r3, [pc, #96]	; (1e8f0 <gpio_nrfx_pin_configure+0x10c>)
   1e88e:	429f      	cmp	r7, r3
   1e890:	d004      	beq.n	1e89c <gpio_nrfx_pin_configure+0xb8>
		return 0;
   1e892:	2700      	movs	r7, #0
}
   1e894:	4638      	mov	r0, r7
   1e896:	b006      	add	sp, #24
   1e898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   1e89c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1e8a0:	f002 fe96 	bl	215d0 <nrfx_gpiote_channel_free>
   1e8a4:	e7f5      	b.n	1e892 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
   1e8a6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1e8aa:	f002 fe91 	bl	215d0 <nrfx_gpiote_channel_free>
   1e8ae:	e7bc      	b.n	1e82a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1e8b0:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   1e8b4:	d0dc      	beq.n	1e870 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1e8b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1e8ba:	2301      	movs	r3, #1
   1e8bc:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   1e8be:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1e8c2:	e7d5      	b.n	1e870 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   1e8c4:	4620      	mov	r0, r4
   1e8c6:	f00d fc64 	bl	2c192 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1e8ca:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e8ce:	2300      	movs	r3, #0
   1e8d0:	461a      	mov	r2, r3
   1e8d2:	a902      	add	r1, sp, #8
   1e8d4:	4628      	mov	r0, r5
   1e8d6:	f002 fd2b 	bl	21330 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e8da:	4b05      	ldr	r3, [pc, #20]	; (1e8f0 <gpio_nrfx_pin_configure+0x10c>)
   1e8dc:	4298      	cmp	r0, r3
   1e8de:	d101      	bne.n	1e8e4 <gpio_nrfx_pin_configure+0x100>
   1e8e0:	2700      	movs	r7, #0
   1e8e2:	e7d7      	b.n	1e894 <gpio_nrfx_pin_configure+0xb0>
   1e8e4:	f06f 0715 	mvn.w	r7, #21
   1e8e8:	e7d4      	b.n	1e894 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
   1e8ea:	f06f 0715 	mvn.w	r7, #21
   1e8ee:	e7d1      	b.n	1e894 <gpio_nrfx_pin_configure+0xb0>
   1e8f0:	0bad0000 	.word	0x0bad0000

0001e8f4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1e8f4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1e8f6:	f002 fe61 	bl	215bc <nrfx_gpiote_is_init>
   1e8fa:	b108      	cbz	r0, 1e900 <gpio_nrfx_init+0xc>
		return 0;
   1e8fc:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1e8fe:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   1e900:	f002 fe32 	bl	21568 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1e904:	4b08      	ldr	r3, [pc, #32]	; (1e928 <gpio_nrfx_init+0x34>)
   1e906:	4298      	cmp	r0, r3
   1e908:	d10a      	bne.n	1e920 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1e90a:	2100      	movs	r1, #0
   1e90c:	4807      	ldr	r0, [pc, #28]	; (1e92c <gpio_nrfx_init+0x38>)
   1e90e:	f002 fe0d 	bl	2152c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1e912:	2200      	movs	r2, #0
   1e914:	2105      	movs	r1, #5
   1e916:	2006      	movs	r0, #6
   1e918:	f00a fe01 	bl	2951e <z_arm_irq_priority_set>
	return 0;
   1e91c:	2000      	movs	r0, #0
   1e91e:	e7ee      	b.n	1e8fe <gpio_nrfx_init+0xa>
		return -EIO;
   1e920:	f06f 0004 	mvn.w	r0, #4
   1e924:	e7eb      	b.n	1e8fe <gpio_nrfx_init+0xa>
   1e926:	bf00      	nop
   1e928:	0bad0000 	.word	0x0bad0000
   1e92c:	0002c23b 	.word	0x0002c23b

0001e930 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   1e930:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   1e932:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1e934:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   1e938:	d06f      	beq.n	1ea1a <baudrate_set+0xea>
   1e93a:	d83a      	bhi.n	1e9b2 <baudrate_set+0x82>
   1e93c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1e940:	d06e      	beq.n	1ea20 <baudrate_set+0xf0>
   1e942:	d90a      	bls.n	1e95a <baudrate_set+0x2a>
   1e944:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   1e948:	d075      	beq.n	1ea36 <baudrate_set+0x106>
   1e94a:	d924      	bls.n	1e996 <baudrate_set+0x66>
   1e94c:	f647 2312 	movw	r3, #31250	; 0x7a12
   1e950:	4299      	cmp	r1, r3
   1e952:	d12b      	bne.n	1e9ac <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e954:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e958:	e013      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1e95a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1e95e:	d061      	beq.n	1ea24 <baudrate_set+0xf4>
   1e960:	d907      	bls.n	1e972 <baudrate_set+0x42>
   1e962:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   1e966:	d063      	beq.n	1ea30 <baudrate_set+0x100>
   1e968:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1e96c:	d110      	bne.n	1e990 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e96e:	4b3c      	ldr	r3, [pc, #240]	; (1ea60 <baudrate_set+0x130>)
   1e970:	e007      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1e972:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1e976:	d058      	beq.n	1ea2a <baudrate_set+0xfa>
   1e978:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1e97c:	d105      	bne.n	1e98a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1e97e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e982:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   1e986:	2000      	movs	r0, #0
   1e988:	4770      	bx	lr
	switch (baudrate) {
   1e98a:	f06f 0015 	mvn.w	r0, #21
   1e98e:	4770      	bx	lr
   1e990:	f06f 0015 	mvn.w	r0, #21
   1e994:	4770      	bx	lr
   1e996:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1e99a:	d04e      	beq.n	1ea3a <baudrate_set+0x10a>
   1e99c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1e9a0:	d101      	bne.n	1e9a6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e9a2:	4b30      	ldr	r3, [pc, #192]	; (1ea64 <baudrate_set+0x134>)
   1e9a4:	e7ed      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1e9a6:	f06f 0015 	mvn.w	r0, #21
   1e9aa:	4770      	bx	lr
   1e9ac:	f06f 0015 	mvn.w	r0, #21
   1e9b0:	4770      	bx	lr
   1e9b2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1e9b6:	d042      	beq.n	1ea3e <baudrate_set+0x10e>
   1e9b8:	d909      	bls.n	1e9ce <baudrate_set+0x9e>
   1e9ba:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1e9be:	d046      	beq.n	1ea4e <baudrate_set+0x11e>
   1e9c0:	d91f      	bls.n	1ea02 <baudrate_set+0xd2>
   1e9c2:	4b29      	ldr	r3, [pc, #164]	; (1ea68 <baudrate_set+0x138>)
   1e9c4:	4299      	cmp	r1, r3
   1e9c6:	d148      	bne.n	1ea5a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e9c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e9cc:	e7d9      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1e9ce:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1e9d2:	d037      	beq.n	1ea44 <baudrate_set+0x114>
   1e9d4:	d905      	bls.n	1e9e2 <baudrate_set+0xb2>
   1e9d6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1e9da:	d10f      	bne.n	1e9fc <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e9dc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e9e0:	e7cf      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1e9e2:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1e9e6:	4299      	cmp	r1, r3
   1e9e8:	d02e      	beq.n	1ea48 <baudrate_set+0x118>
   1e9ea:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1e9ee:	d102      	bne.n	1e9f6 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e9f0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e9f4:	e7c5      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1e9f6:	f06f 0015 	mvn.w	r0, #21
   1e9fa:	4770      	bx	lr
   1e9fc:	f06f 0015 	mvn.w	r0, #21
   1ea00:	4770      	bx	lr
   1ea02:	4b1a      	ldr	r3, [pc, #104]	; (1ea6c <baudrate_set+0x13c>)
   1ea04:	4299      	cmp	r1, r3
   1ea06:	d025      	beq.n	1ea54 <baudrate_set+0x124>
   1ea08:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1ea0c:	d102      	bne.n	1ea14 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1ea0e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1ea12:	e7b6      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1ea14:	f06f 0015 	mvn.w	r0, #21
   1ea18:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1ea1a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1ea1e:	e7b0      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1ea20:	4b13      	ldr	r3, [pc, #76]	; (1ea70 <baudrate_set+0x140>)
   1ea22:	e7ae      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1ea24:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1ea28:	e7ab      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1ea2a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1ea2e:	e7a8      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1ea30:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1ea34:	e7a5      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1ea36:	4b0f      	ldr	r3, [pc, #60]	; (1ea74 <baudrate_set+0x144>)
   1ea38:	e7a3      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1ea3a:	4b0f      	ldr	r3, [pc, #60]	; (1ea78 <baudrate_set+0x148>)
   1ea3c:	e7a1      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1ea3e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1ea42:	e79e      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1ea44:	4b0d      	ldr	r3, [pc, #52]	; (1ea7c <baudrate_set+0x14c>)
   1ea46:	e79c      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1ea48:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1ea4c:	e799      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1ea4e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ea52:	e796      	b.n	1e982 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1ea54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ea58:	e793      	b.n	1e982 <baudrate_set+0x52>
	switch (baudrate) {
   1ea5a:	f06f 0015 	mvn.w	r0, #21
}
   1ea5e:	4770      	bx	lr
   1ea60:	0013b000 	.word	0x0013b000
   1ea64:	004ea000 	.word	0x004ea000
   1ea68:	000f4240 	.word	0x000f4240
   1ea6c:	0003d090 	.word	0x0003d090
   1ea70:	00275000 	.word	0x00275000
   1ea74:	0075c000 	.word	0x0075c000
   1ea78:	003af000 	.word	0x003af000
   1ea7c:	013a9000 	.word	0x013a9000

0001ea80 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1ea80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea82:	4605      	mov	r5, r0
   1ea84:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1ea86:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ea88:	f00e fd2e 	bl	2d4e8 <k_is_in_isr>
   1ea8c:	b910      	cbnz	r0, 1ea94 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1ea8e:	4b12      	ldr	r3, [pc, #72]	; (1ead8 <uarte_nrfx_poll_out+0x58>)
   1ea90:	781b      	ldrb	r3, [r3, #0]
   1ea92:	b983      	cbnz	r3, 1eab6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1ea94:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea98:	f3ef 8411 	mrs	r4, BASEPRI
   1ea9c:	f383 8812 	msr	BASEPRI_MAX, r3
   1eaa0:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1eaa4:	4628      	mov	r0, r5
   1eaa6:	f00d fc7c 	bl	2c3a2 <is_tx_ready>
   1eaaa:	b940      	cbnz	r0, 1eabe <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   1eaac:	f384 8811 	msr	BASEPRI, r4
   1eab0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1eab4:	e7ee      	b.n	1ea94 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1eab6:	4628      	mov	r0, r5
   1eab8:	f00d fcd9 	bl	2c46e <wait_tx_ready>
   1eabc:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   1eabe:	693b      	ldr	r3, [r7, #16]
   1eac0:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1eac2:	2201      	movs	r2, #1
   1eac4:	6939      	ldr	r1, [r7, #16]
   1eac6:	4628      	mov	r0, r5
   1eac8:	f00d fc85 	bl	2c3d6 <tx_start>
	__asm__ volatile(
   1eacc:	f384 8811 	msr	BASEPRI, r4
   1ead0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1ead4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ead6:	bf00      	nop
   1ead8:	20004b70 	.word	0x20004b70

0001eadc <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1eadc:	b530      	push	{r4, r5, lr}
   1eade:	b089      	sub	sp, #36	; 0x24
   1eae0:	4604      	mov	r4, r0
   1eae2:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1eae4:	f101 0018 	add.w	r0, r1, #24
   1eae8:	f002 fe2a 	bl	21740 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1eaec:	4b1e      	ldr	r3, [pc, #120]	; (1eb68 <endtx_stoptx_ppi_init+0x8c>)
   1eaee:	4298      	cmp	r0, r3
   1eaf0:	d112      	bne.n	1eb18 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1eaf2:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1eaf4:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1eaf8:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1eafa:	4a1c      	ldr	r2, [pc, #112]	; (1eb6c <endtx_stoptx_ppi_init+0x90>)
   1eafc:	33a2      	adds	r3, #162	; 0xa2
   1eafe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1eb02:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1eb06:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1eb08:	7e29      	ldrb	r1, [r5, #24]
   1eb0a:	2301      	movs	r3, #1
   1eb0c:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1eb0e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1eb12:	2000      	movs	r0, #0
}
   1eb14:	b009      	add	sp, #36	; 0x24
   1eb16:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   1eb18:	4b15      	ldr	r3, [pc, #84]	; (1eb70 <endtx_stoptx_ppi_init+0x94>)
   1eb1a:	9307      	str	r3, [sp, #28]
   1eb1c:	2302      	movs	r3, #2
   1eb1e:	f88d 3004 	strb.w	r3, [sp, #4]
   1eb22:	2300      	movs	r3, #0
   1eb24:	f88d 3005 	strb.w	r3, [sp, #5]
   1eb28:	f88d 3006 	strb.w	r3, [sp, #6]
   1eb2c:	f88d 3007 	strb.w	r3, [sp, #7]
   1eb30:	9a01      	ldr	r2, [sp, #4]
   1eb32:	9206      	str	r2, [sp, #24]
   1eb34:	4619      	mov	r1, r3
   1eb36:	f363 0100 	bfi	r1, r3, #0, #1
   1eb3a:	f363 0141 	bfi	r1, r3, #1, #1
   1eb3e:	f363 0182 	bfi	r1, r3, #2, #1
   1eb42:	f363 01c5 	bfi	r1, r3, #3, #3
   1eb46:	2201      	movs	r2, #1
   1eb48:	f362 1188 	bfi	r1, r2, #6, #3
   1eb4c:	2208      	movs	r2, #8
   1eb4e:	f362 2152 	bfi	r1, r2, #9, #10
   1eb52:	f363 41de 	bfi	r1, r3, #19, #12
   1eb56:	f363 71df 	bfi	r1, r3, #31, #1
   1eb5a:	aa06      	add	r2, sp, #24
   1eb5c:	4805      	ldr	r0, [pc, #20]	; (1eb74 <endtx_stoptx_ppi_init+0x98>)
   1eb5e:	f00a f930 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -EIO;
   1eb62:	f06f 0004 	mvn.w	r0, #4
   1eb66:	e7d5      	b.n	1eb14 <endtx_stoptx_ppi_init+0x38>
   1eb68:	0bad0000 	.word	0x0bad0000
   1eb6c:	4001f000 	.word	0x4001f000
   1eb70:	000311e8 	.word	0x000311e8
   1eb74:	0002ef60 	.word	0x0002ef60

0001eb78 <random_byte_get>:
	__asm__ volatile(
   1eb78:	f04f 0240 	mov.w	r2, #64	; 0x40
   1eb7c:	f3ef 8311 	mrs	r3, BASEPRI
   1eb80:	f382 8812 	msr	BASEPRI_MAX, r2
   1eb84:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1eb88:	4a0a      	ldr	r2, [pc, #40]	; (1ebb4 <random_byte_get+0x3c>)
   1eb8a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1eb8e:	b16a      	cbz	r2, 1ebac <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1eb90:	4a08      	ldr	r2, [pc, #32]	; (1ebb4 <random_byte_get+0x3c>)
   1eb92:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1eb96:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1eb98:	2100      	movs	r1, #0
   1eb9a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   1eb9e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   1eba2:	f383 8811 	msr	BASEPRI, r3
   1eba6:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1ebaa:	4770      	bx	lr
	int retval = -EAGAIN;
   1ebac:	f06f 000a 	mvn.w	r0, #10
   1ebb0:	e7f7      	b.n	1eba2 <random_byte_get+0x2a>
   1ebb2:	bf00      	nop
   1ebb4:	4000d000 	.word	0x4000d000

0001ebb8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1ebb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ebba:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   1ebbc:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   1ebbe:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   1ebc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ebc4:	f3ef 8011 	mrs	r0, BASEPRI
   1ebc8:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebcc:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1ebd0:	f89e 6000 	ldrb.w	r6, [lr]
   1ebd4:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1ebd6:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   1ebda:	1bad      	subs	r5, r5, r6
   1ebdc:	4025      	ands	r5, r4
	if (available < len) {
   1ebde:	42aa      	cmp	r2, r5
   1ebe0:	d900      	bls.n	1ebe4 <rng_pool_get+0x2c>
		len = available;
   1ebe2:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ebe4:	eb06 0c02 	add.w	ip, r6, r2
   1ebe8:	ea0c 0c04 	and.w	ip, ip, r4
   1ebec:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   1ebf0:	f380 8811 	msr	BASEPRI, r0
   1ebf4:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1ebf8:	4608      	mov	r0, r1
}
   1ebfa:	e007      	b.n	1ec0c <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1ebfc:	eb0e 0203 	add.w	r2, lr, r3
   1ec00:	7952      	ldrb	r2, [r2, #5]
   1ec02:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   1ec06:	3301      	adds	r3, #1
   1ec08:	4023      	ands	r3, r4
	while (likely(len--)) {
   1ec0a:	4662      	mov	r2, ip
   1ec0c:	f102 3cff 	add.w	ip, r2, #4294967295
   1ec10:	fa1f fc8c 	uxth.w	ip, ip
   1ec14:	2a00      	cmp	r2, #0
   1ec16:	d1f1      	bne.n	1ebfc <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1ec18:	42be      	cmp	r6, r7
   1ec1a:	d10f      	bne.n	1ec3c <rng_pool_get+0x84>
	__asm__ volatile(
   1ec1c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ec20:	f3ef 8311 	mrs	r3, BASEPRI
   1ec24:	f382 8812 	msr	BASEPRI_MAX, r2
   1ec28:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1ec2c:	f89e 2000 	ldrb.w	r2, [lr]
   1ec30:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   1ec34:	f383 8811 	msr	BASEPRI, r3
   1ec38:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1ec3c:	1a40      	subs	r0, r0, r1
   1ec3e:	b280      	uxth	r0, r0
	available = available - len;
   1ec40:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   1ec42:	f89e 3004 	ldrb.w	r3, [lr, #4]
   1ec46:	42ab      	cmp	r3, r5
   1ec48:	d302      	bcc.n	1ec50 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ec4a:	4b02      	ldr	r3, [pc, #8]	; (1ec54 <rng_pool_get+0x9c>)
   1ec4c:	2201      	movs	r2, #1
   1ec4e:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1ec50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ec52:	bf00      	nop
   1ec54:	4000d000 	.word	0x4000d000

0001ec58 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1ec58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec5a:	460d      	mov	r5, r1
   1ec5c:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ec5e:	f013 0f01 	tst.w	r3, #1
   1ec62:	d103      	bne.n	1ec6c <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ec64:	4826      	ldr	r0, [pc, #152]	; (1ed00 <entropy_nrf5_get_entropy_isr+0xa8>)
   1ec66:	f7ff ffa7 	bl	1ebb8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ec6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1ec6c:	b90a      	cbnz	r2, 1ec72 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   1ec6e:	4620      	mov	r0, r4
   1ec70:	e7fb      	b.n	1ec6a <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   1ec72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ec76:	f3ef 8611 	mrs	r6, BASEPRI
   1ec7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec7e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ec82:	200d      	movs	r0, #13
   1ec84:	f7f6 fbec 	bl	15460 <arch_irq_is_enabled>
   1ec88:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1ec8a:	200d      	movs	r0, #13
   1ec8c:	f00a fc42 	bl	29514 <arch_irq_disable>
	__asm__ volatile(
   1ec90:	f386 8811 	msr	BASEPRI, r6
   1ec94:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ec98:	4b1a      	ldr	r3, [pc, #104]	; (1ed04 <entropy_nrf5_get_entropy_isr+0xac>)
   1ec9a:	2200      	movs	r2, #0
   1ec9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1eca0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1eca4:	2201      	movs	r2, #1
   1eca6:	601a      	str	r2, [r3, #0]
   1eca8:	4b17      	ldr	r3, [pc, #92]	; (1ed08 <entropy_nrf5_get_entropy_isr+0xb0>)
   1ecaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1ecae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1ecb2:	4626      	mov	r6, r4
   1ecb4:	e00b      	b.n	1ecce <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   1ecb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ecba:	f3ef 8011 	mrs	r0, BASEPRI
   1ecbe:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecc2:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1ecc6:	f7f6 f99f 	bl	15008 <arch_cpu_atomic_idle>
}
   1ecca:	e000      	b.n	1ecce <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   1eccc:	b18e      	cbz	r6, 1ecf2 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ecce:	4b0d      	ldr	r3, [pc, #52]	; (1ed04 <entropy_nrf5_get_entropy_isr+0xac>)
   1ecd0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ecd4:	2b00      	cmp	r3, #0
   1ecd6:	d0ee      	beq.n	1ecb6 <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   1ecd8:	f7ff ff4e 	bl	1eb78 <random_byte_get>
   1ecdc:	4b0a      	ldr	r3, [pc, #40]	; (1ed08 <entropy_nrf5_get_entropy_isr+0xb0>)
   1ecde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1ece2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1ece6:	2800      	cmp	r0, #0
   1ece8:	dbf0      	blt.n	1eccc <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   1ecea:	3e01      	subs	r6, #1
   1ecec:	b2b6      	uxth	r6, r6
   1ecee:	55a8      	strb	r0, [r5, r6]
   1ecf0:	e7ec      	b.n	1eccc <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   1ecf2:	2f00      	cmp	r7, #0
   1ecf4:	d0bb      	beq.n	1ec6e <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1ecf6:	200d      	movs	r0, #13
   1ecf8:	f00a fc07 	bl	2950a <arch_irq_enable>
   1ecfc:	e7b7      	b.n	1ec6e <entropy_nrf5_get_entropy_isr+0x16>
   1ecfe:	bf00      	nop
   1ed00:	200039f4 	.word	0x200039f4
   1ed04:	4000d000 	.word	0x4000d000
   1ed08:	e000e100 	.word	0xe000e100

0001ed0c <isr>:
{
   1ed0c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ed0e:	f7ff ff33 	bl	1eb78 <random_byte_get>
	if (byte < 0) {
   1ed12:	2800      	cmp	r0, #0
   1ed14:	db06      	blt.n	1ed24 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ed16:	b2c4      	uxtb	r4, r0
   1ed18:	4621      	mov	r1, r4
   1ed1a:	480a      	ldr	r0, [pc, #40]	; (1ed44 <isr+0x38>)
   1ed1c:	f00d fc4d 	bl	2c5ba <rng_pool_put>
	if (ret < 0) {
   1ed20:	2800      	cmp	r0, #0
   1ed22:	db00      	blt.n	1ed26 <isr+0x1a>
}
   1ed24:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1ed26:	4621      	mov	r1, r4
   1ed28:	4807      	ldr	r0, [pc, #28]	; (1ed48 <isr+0x3c>)
   1ed2a:	f00d fc46 	bl	2c5ba <rng_pool_put>
		if (ret < 0) {
   1ed2e:	2800      	cmp	r0, #0
   1ed30:	db03      	blt.n	1ed3a <isr+0x2e>
	z_impl_k_sem_give(sem);
   1ed32:	4806      	ldr	r0, [pc, #24]	; (1ed4c <isr+0x40>)
   1ed34:	f003 faa8 	bl	22288 <z_impl_k_sem_give>
}
   1ed38:	e7f4      	b.n	1ed24 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ed3a:	4b05      	ldr	r3, [pc, #20]	; (1ed50 <isr+0x44>)
   1ed3c:	2201      	movs	r2, #1
   1ed3e:	605a      	str	r2, [r3, #4]
}
   1ed40:	e7f7      	b.n	1ed32 <isr+0x26>
   1ed42:	bf00      	nop
   1ed44:	200039f4 	.word	0x200039f4
   1ed48:	20003a09 	.word	0x20003a09
   1ed4c:	200039dc 	.word	0x200039dc
   1ed50:	4000d000 	.word	0x4000d000

0001ed54 <entropy_nrf5_get_entropy>:
{
   1ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed56:	460f      	mov	r7, r1
   1ed58:	4614      	mov	r4, r2
	while (len) {
   1ed5a:	e007      	b.n	1ed6c <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   1ed5c:	f04f 32ff 	mov.w	r2, #4294967295
   1ed60:	f04f 33ff 	mov.w	r3, #4294967295
   1ed64:	f106 0018 	add.w	r0, r6, #24
   1ed68:	f003 fab6 	bl	222d8 <z_impl_k_sem_take>
   1ed6c:	b1bc      	cbz	r4, 1ed9e <entropy_nrf5_get_entropy+0x4a>
   1ed6e:	4e0d      	ldr	r6, [pc, #52]	; (1eda4 <entropy_nrf5_get_entropy+0x50>)
   1ed70:	f04f 32ff 	mov.w	r2, #4294967295
   1ed74:	f04f 33ff 	mov.w	r3, #4294967295
   1ed78:	4630      	mov	r0, r6
   1ed7a:	f003 faad 	bl	222d8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ed7e:	4622      	mov	r2, r4
   1ed80:	4639      	mov	r1, r7
   1ed82:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1ed86:	f7ff ff17 	bl	1ebb8 <rng_pool_get>
   1ed8a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1ed8c:	4630      	mov	r0, r6
   1ed8e:	f003 fa7b 	bl	22288 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ed92:	2d00      	cmp	r5, #0
   1ed94:	d0e2      	beq.n	1ed5c <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   1ed96:	1b64      	subs	r4, r4, r5
   1ed98:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ed9a:	442f      	add	r7, r5
   1ed9c:	e7e6      	b.n	1ed6c <entropy_nrf5_get_entropy+0x18>
}
   1ed9e:	2000      	movs	r0, #0
   1eda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eda2:	bf00      	nop
   1eda4:	200039c4 	.word	0x200039c4

0001eda8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1eda8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1edaa:	4c18      	ldr	r4, [pc, #96]	; (1ee0c <entropy_nrf5_init+0x64>)
   1edac:	2201      	movs	r2, #1
   1edae:	4611      	mov	r1, r2
   1edb0:	4620      	mov	r0, r4
   1edb2:	f00e fcac 	bl	2d70e <z_impl_k_sem_init>
   1edb6:	2201      	movs	r2, #1
   1edb8:	2100      	movs	r1, #0
   1edba:	f104 0018 	add.w	r0, r4, #24
   1edbe:	f00e fca6 	bl	2d70e <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1edc2:	2204      	movs	r2, #4
   1edc4:	2108      	movs	r1, #8
   1edc6:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1edca:	f00d fc09 	bl	2c5e0 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1edce:	220c      	movs	r2, #12
   1edd0:	2110      	movs	r1, #16
   1edd2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1edd6:	f00d fc03 	bl	2c5e0 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1edda:	4b0d      	ldr	r3, [pc, #52]	; (1ee10 <entropy_nrf5_init+0x68>)
   1eddc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ede0:	f022 0201 	bic.w	r2, r2, #1
   1ede4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ede8:	2400      	movs	r4, #0
   1edea:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   1edee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1edf2:	2101      	movs	r1, #1
   1edf4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1edf8:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1edfa:	4622      	mov	r2, r4
   1edfc:	200d      	movs	r0, #13
   1edfe:	f00a fb8e 	bl	2951e <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1ee02:	200d      	movs	r0, #13
   1ee04:	f00a fb81 	bl	2950a <arch_irq_enable>

	return 0;
}
   1ee08:	4620      	mov	r0, r4
   1ee0a:	bd10      	pop	{r4, pc}
   1ee0c:	200039c4 	.word	0x200039c4
   1ee10:	4000d000 	.word	0x4000d000

0001ee14 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1ee14:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1ee18:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1ee1c:	4b01      	ldr	r3, [pc, #4]	; (1ee24 <set_comparator+0x10>)
   1ee1e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1ee22:	4770      	bx	lr
   1ee24:	40011000 	.word	0x40011000

0001ee28 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ee28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ee2c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1ee2e:	4a02      	ldr	r2, [pc, #8]	; (1ee38 <event_enable+0x10>)
   1ee30:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1ee34:	4770      	bx	lr
   1ee36:	bf00      	nop
   1ee38:	40011000 	.word	0x40011000

0001ee3c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ee3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ee40:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1ee42:	4a02      	ldr	r2, [pc, #8]	; (1ee4c <event_disable+0x10>)
   1ee44:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1ee48:	4770      	bx	lr
   1ee4a:	bf00      	nop
   1ee4c:	40011000 	.word	0x40011000

0001ee50 <counter>:
     return p_reg->COUNTER;
   1ee50:	4b01      	ldr	r3, [pc, #4]	; (1ee58 <counter+0x8>)
   1ee52:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1ee56:	4770      	bx	lr
   1ee58:	40011000 	.word	0x40011000

0001ee5c <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   1ee5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee60:	4606      	mov	r6, r0
   1ee62:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   1ee64:	f7ff ffea 	bl	1ee3c <event_disable>
	event_clear(chan);
   1ee68:	4630      	mov	r0, r6
   1ee6a:	f00d fc15 	bl	2c698 <event_clear>
	uint32_t cc_val = req_cc;
   1ee6e:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1ee70:	2703      	movs	r7, #3
   1ee72:	e001      	b.n	1ee78 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   1ee74:	193d      	adds	r5, r7, r4
			cc_inc++;
   1ee76:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   1ee78:	4629      	mov	r1, r5
   1ee7a:	4630      	mov	r0, r6
   1ee7c:	f7ff ffca 	bl	1ee14 <set_comparator>
		event_enable(chan);
   1ee80:	4630      	mov	r0, r6
   1ee82:	f7ff ffd1 	bl	1ee28 <event_enable>
		now = counter();
   1ee86:	f7ff ffe3 	bl	1ee50 <counter>
   1ee8a:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1ee8c:	1cc1      	adds	r1, r0, #3
   1ee8e:	4628      	mov	r0, r5
   1ee90:	f00d fbf1 	bl	2c676 <counter_sub>
   1ee94:	4b0b      	ldr	r3, [pc, #44]	; (1eec4 <set_alarm+0x68>)
   1ee96:	4298      	cmp	r0, r3
   1ee98:	d911      	bls.n	1eebe <set_alarm+0x62>
			if (event_check(chan)) {
   1ee9a:	4630      	mov	r0, r6
   1ee9c:	f00d fbef 	bl	2c67e <event_check>
   1eea0:	2800      	cmp	r0, #0
   1eea2:	d0e7      	beq.n	1ee74 <set_alarm+0x18>
				now = counter();
   1eea4:	f7ff ffd4 	bl	1ee50 <counter>
   1eea8:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1eeaa:	4641      	mov	r1, r8
   1eeac:	f00d fbe3 	bl	2c676 <counter_sub>
   1eeb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1eeb4:	d903      	bls.n	1eebe <set_alarm+0x62>
					event_clear(chan);
   1eeb6:	4630      	mov	r0, r6
   1eeb8:	f00d fbee 	bl	2c698 <event_clear>
   1eebc:	e7da      	b.n	1ee74 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   1eebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eec2:	bf00      	nop
   1eec4:	007ffffd 	.word	0x007ffffd

0001eec8 <compare_int_lock>:
{
   1eec8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1eeca:	2301      	movs	r3, #1
   1eecc:	4083      	lsls	r3, r0
   1eece:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1eed2:	4a0e      	ldr	r2, [pc, #56]	; (1ef0c <compare_int_lock+0x44>)
   1eed4:	f3bf 8f5b 	dmb	ish
   1eed8:	e852 1f00 	ldrex	r1, [r2]
   1eedc:	ea01 0e0c 	and.w	lr, r1, ip
   1eee0:	e842 e400 	strex	r4, lr, [r2]
   1eee4:	2c00      	cmp	r4, #0
   1eee6:	d1f7      	bne.n	1eed8 <compare_int_lock+0x10>
   1eee8:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1eeec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1eef0:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1eef2:	4807      	ldr	r0, [pc, #28]	; (1ef10 <compare_int_lock+0x48>)
   1eef4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1eef8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1eefc:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1ef00:	420b      	tst	r3, r1
}
   1ef02:	bf14      	ite	ne
   1ef04:	2001      	movne	r0, #1
   1ef06:	2000      	moveq	r0, #0
   1ef08:	bd10      	pop	{r4, pc}
   1ef0a:	bf00      	nop
   1ef0c:	20003a1c 	.word	0x20003a1c
   1ef10:	40011000 	.word	0x40011000

0001ef14 <channel_processing_check_and_clear>:
	sys_clock_announce(dticks);
}

static bool channel_processing_check_and_clear(int32_t chan)
{
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1ef14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ef18:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   1ef1a:	4a14      	ldr	r2, [pc, #80]	; (1ef6c <channel_processing_check_and_clear+0x58>)
   1ef1c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1ef20:	4213      	tst	r3, r2
   1ef22:	d101      	bne.n	1ef28 <channel_processing_check_and_clear+0x14>
			event_clear(chan);
			return true;
		}
	}

	return false;
   1ef24:	2000      	movs	r0, #0
}
   1ef26:	4770      	bx	lr
{
   1ef28:	b510      	push	{r4, lr}
   1ef2a:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1ef2c:	2301      	movs	r3, #1
   1ef2e:	4083      	lsls	r3, r0
   1ef30:	43db      	mvns	r3, r3
   1ef32:	490f      	ldr	r1, [pc, #60]	; (1ef70 <channel_processing_check_and_clear+0x5c>)
   1ef34:	f3bf 8f5b 	dmb	ish
   1ef38:	e851 2f00 	ldrex	r2, [r1]
   1ef3c:	ea02 0003 	and.w	r0, r2, r3
   1ef40:	e841 0c00 	strex	ip, r0, [r1]
   1ef44:	f1bc 0f00 	cmp.w	ip, #0
   1ef48:	d1f6      	bne.n	1ef38 <channel_processing_check_and_clear+0x24>
   1ef4a:	f3bf 8f5b 	dmb	ish
   1ef4e:	fa22 f304 	lsr.w	r3, r2, r4
   1ef52:	f013 0f01 	tst.w	r3, #1
   1ef56:	d103      	bne.n	1ef60 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   1ef58:	4620      	mov	r0, r4
   1ef5a:	f00d fb90 	bl	2c67e <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1ef5e:	b118      	cbz	r0, 1ef68 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   1ef60:	4620      	mov	r0, r4
   1ef62:	f00d fb99 	bl	2c698 <event_clear>
			return true;
   1ef66:	2001      	movs	r0, #1
}
   1ef68:	bd10      	pop	{r4, pc}
   1ef6a:	bf00      	nop
   1ef6c:	40011000 	.word	0x40011000
   1ef70:	20003a18 	.word	0x20003a18

0001ef74 <compare_int_unlock>:
	if (key) {
   1ef74:	b901      	cbnz	r1, 1ef78 <compare_int_unlock+0x4>
}
   1ef76:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1ef78:	2301      	movs	r3, #1
   1ef7a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ef7c:	4a11      	ldr	r2, [pc, #68]	; (1efc4 <compare_int_unlock+0x50>)
   1ef7e:	f3bf 8f5b 	dmb	ish
   1ef82:	e852 cf00 	ldrex	ip, [r2]
   1ef86:	ea4c 0c03 	orr.w	ip, ip, r3
   1ef8a:	e842 c100 	strex	r1, ip, [r2]
   1ef8e:	2900      	cmp	r1, #0
   1ef90:	d1f7      	bne.n	1ef82 <compare_int_unlock+0xe>
   1ef92:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ef96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ef9a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1ef9c:	4a0a      	ldr	r2, [pc, #40]	; (1efc8 <compare_int_unlock+0x54>)
   1ef9e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1efa2:	f3bf 8f5b 	dmb	ish
   1efa6:	4b09      	ldr	r3, [pc, #36]	; (1efcc <compare_int_unlock+0x58>)
   1efa8:	681b      	ldr	r3, [r3, #0]
   1efaa:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1efae:	40c3      	lsrs	r3, r0
   1efb0:	f013 0f01 	tst.w	r3, #1
   1efb4:	d0df      	beq.n	1ef76 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1efb6:	4b06      	ldr	r3, [pc, #24]	; (1efd0 <compare_int_unlock+0x5c>)
   1efb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1efbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1efc0:	e7d9      	b.n	1ef76 <compare_int_unlock+0x2>
   1efc2:	bf00      	nop
   1efc4:	20003a1c 	.word	0x20003a1c
   1efc8:	40011000 	.word	0x40011000
   1efcc:	20003a18 	.word	0x20003a18
   1efd0:	e000e100 	.word	0xe000e100

0001efd4 <sys_clock_timeout_handler>:
{
   1efd4:	b538      	push	{r3, r4, r5, lr}
   1efd6:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1efd8:	4610      	mov	r0, r2
   1efda:	4619      	mov	r1, r3
   1efdc:	f00d fb68 	bl	2c6b0 <absolute_time_to_cc>
   1efe0:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1efe2:	490d      	ldr	r1, [pc, #52]	; (1f018 <sys_clock_timeout_handler+0x44>)
   1efe4:	680b      	ldr	r3, [r1, #0]
   1efe6:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   1efe8:	181b      	adds	r3, r3, r0
   1efea:	684c      	ldr	r4, [r1, #4]
   1efec:	f144 0400 	adc.w	r4, r4, #0
   1eff0:	600b      	str	r3, [r1, #0]
   1eff2:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1eff4:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1eff8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1effc:	d209      	bcs.n	1f012 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1effe:	4b07      	ldr	r3, [pc, #28]	; (1f01c <sys_clock_timeout_handler+0x48>)
   1f000:	681b      	ldr	r3, [r3, #0]
   1f002:	0a19      	lsrs	r1, r3, #8
   1f004:	061b      	lsls	r3, r3, #24
   1f006:	18d4      	adds	r4, r2, r3
   1f008:	f141 0500 	adc.w	r5, r1, #0
   1f00c:	4b04      	ldr	r3, [pc, #16]	; (1f020 <sys_clock_timeout_handler+0x4c>)
   1f00e:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   1f012:	f003 ffbd 	bl	22f90 <sys_clock_announce>
}
   1f016:	bd38      	pop	{r3, r4, r5, pc}
   1f018:	20002380 	.word	0x20002380
   1f01c:	20003a20 	.word	0x20003a20
   1f020:	20002388 	.word	0x20002388

0001f024 <z_nrf_rtc_timer_read>:
{
   1f024:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1f026:	4b0d      	ldr	r3, [pc, #52]	; (1f05c <z_nrf_rtc_timer_read+0x38>)
   1f028:	681c      	ldr	r4, [r3, #0]
   1f02a:	0a25      	lsrs	r5, r4, #8
   1f02c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1f02e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1f032:	f7ff ff0d 	bl	1ee50 <counter>
   1f036:	4603      	mov	r3, r0
	val += cntr;
   1f038:	1900      	adds	r0, r0, r4
   1f03a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1f03e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1f042:	d20a      	bcs.n	1f05a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1f044:	4b06      	ldr	r3, [pc, #24]	; (1f060 <z_nrf_rtc_timer_read+0x3c>)
   1f046:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f04a:	4290      	cmp	r0, r2
   1f04c:	eb71 0303 	sbcs.w	r3, r1, r3
   1f050:	d203      	bcs.n	1f05a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1f052:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1f056:	f141 0100 	adc.w	r1, r1, #0
}
   1f05a:	bd38      	pop	{r3, r4, r5, pc}
   1f05c:	20003a20 	.word	0x20003a20
   1f060:	20002388 	.word	0x20002388

0001f064 <compare_set_nolocks>:
{
   1f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f066:	4606      	mov	r6, r0
   1f068:	4614      	mov	r4, r2
   1f06a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1f06c:	4610      	mov	r0, r2
   1f06e:	4619      	mov	r1, r3
   1f070:	f00d fb1e 	bl	2c6b0 <absolute_time_to_cc>
   1f074:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1f076:	f7ff ffd5 	bl	1f024 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1f07a:	42a0      	cmp	r0, r4
   1f07c:	eb71 0305 	sbcs.w	r3, r1, r5
   1f080:	d215      	bcs.n	1f0ae <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1f082:	1a20      	subs	r0, r4, r0
   1f084:	eb65 0101 	sbc.w	r1, r5, r1
   1f088:	4b17      	ldr	r3, [pc, #92]	; (1f0e8 <compare_set_nolocks+0x84>)
   1f08a:	4298      	cmp	r0, r3
   1f08c:	f171 0100 	sbcs.w	r1, r1, #0
   1f090:	d227      	bcs.n	1f0e2 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   1f092:	4b16      	ldr	r3, [pc, #88]	; (1f0ec <compare_set_nolocks+0x88>)
   1f094:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1f098:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1f09c:	42ab      	cmp	r3, r5
   1f09e:	bf08      	it	eq
   1f0a0:	42a2      	cmpeq	r2, r4
   1f0a2:	d012      	beq.n	1f0ca <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   1f0a4:	4639      	mov	r1, r7
   1f0a6:	4630      	mov	r0, r6
   1f0a8:	f7ff fed8 	bl	1ee5c <set_alarm>
   1f0ac:	e00d      	b.n	1f0ca <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   1f0ae:	2301      	movs	r3, #1
   1f0b0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f0b2:	4a0f      	ldr	r2, [pc, #60]	; (1f0f0 <compare_set_nolocks+0x8c>)
   1f0b4:	f3bf 8f5b 	dmb	ish
   1f0b8:	e852 0f00 	ldrex	r0, [r2]
   1f0bc:	4318      	orrs	r0, r3
   1f0be:	e842 0100 	strex	r1, r0, [r2]
   1f0c2:	2900      	cmp	r1, #0
   1f0c4:	d1f8      	bne.n	1f0b8 <compare_set_nolocks+0x54>
   1f0c6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1f0ca:	4b08      	ldr	r3, [pc, #32]	; (1f0ec <compare_set_nolocks+0x88>)
   1f0cc:	0132      	lsls	r2, r6, #4
   1f0ce:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1f0d2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1f0d6:	9906      	ldr	r1, [sp, #24]
   1f0d8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1f0da:	9b07      	ldr	r3, [sp, #28]
   1f0dc:	6073      	str	r3, [r6, #4]
	return ret;
   1f0de:	2000      	movs	r0, #0
}
   1f0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   1f0e2:	f06f 0015 	mvn.w	r0, #21
   1f0e6:	e7fb      	b.n	1f0e0 <compare_set_nolocks+0x7c>
   1f0e8:	00800001 	.word	0x00800001
   1f0ec:	20002370 	.word	0x20002370
   1f0f0:	20003a18 	.word	0x20003a18

0001f0f4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1f0f4:	b530      	push	{r4, r5, lr}
   1f0f6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1f0f8:	2300      	movs	r3, #0
   1f0fa:	4a1d      	ldr	r2, [pc, #116]	; (1f170 <sys_clock_driver_init+0x7c>)
   1f0fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f100:	2b00      	cmp	r3, #0
   1f102:	dd24      	ble.n	1f14e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   1f104:	4c1a      	ldr	r4, [pc, #104]	; (1f170 <sys_clock_driver_init+0x7c>)
   1f106:	2502      	movs	r5, #2
   1f108:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f10c:	4b19      	ldr	r3, [pc, #100]	; (1f174 <sys_clock_driver_init+0x80>)
   1f10e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1f112:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1f116:	2200      	movs	r2, #0
   1f118:	2101      	movs	r1, #1
   1f11a:	2011      	movs	r0, #17
   1f11c:	f00a f9ff 	bl	2951e <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1f120:	2011      	movs	r0, #17
   1f122:	f00a f9f2 	bl	2950a <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f126:	2301      	movs	r3, #1
   1f128:	60a3      	str	r3, [r4, #8]
   1f12a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1f12c:	4a12      	ldr	r2, [pc, #72]	; (1f178 <sys_clock_driver_init+0x84>)
   1f12e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1f130:	2400      	movs	r4, #0
   1f132:	9401      	str	r4, [sp, #4]
   1f134:	4b11      	ldr	r3, [pc, #68]	; (1f17c <sys_clock_driver_init+0x88>)
   1f136:	9300      	str	r3, [sp, #0]
   1f138:	4a11      	ldr	r2, [pc, #68]	; (1f180 <sys_clock_driver_init+0x8c>)
   1f13a:	2300      	movs	r3, #0
   1f13c:	4620      	mov	r0, r4
   1f13e:	f00d fac1 	bl	2c6c4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1f142:	4628      	mov	r0, r5
   1f144:	f7ff fa84 	bl	1e650 <z_nrf_clock_control_lf_on>

	return 0;
}
   1f148:	4620      	mov	r0, r4
   1f14a:	b003      	add	sp, #12
   1f14c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f14e:	4a0d      	ldr	r2, [pc, #52]	; (1f184 <sys_clock_driver_init+0x90>)
   1f150:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1f154:	f04f 30ff 	mov.w	r0, #4294967295
   1f158:	f04f 31ff 	mov.w	r1, #4294967295
   1f15c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f160:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f164:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1f166:	4902      	ldr	r1, [pc, #8]	; (1f170 <sys_clock_driver_init+0x7c>)
   1f168:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f16c:	3301      	adds	r3, #1
   1f16e:	e7c7      	b.n	1f100 <sys_clock_driver_init+0xc>
   1f170:	40011000 	.word	0x40011000
   1f174:	e000e100 	.word	0xe000e100
   1f178:	20003a1c 	.word	0x20003a1c
   1f17c:	0001efd5 	.word	0x0001efd5
   1f180:	007fffff 	.word	0x007fffff
   1f184:	20002370 	.word	0x20002370

0001f188 <process_channel>:
{
   1f188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f18c:	b082      	sub	sp, #8
   1f18e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1f190:	f7ff fec0 	bl	1ef14 <channel_processing_check_and_clear>
   1f194:	b910      	cbnz	r0, 1f19c <process_channel+0x14>
}
   1f196:	b002      	add	sp, #8
   1f198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1f19c:	f7ff ff42 	bl	1f024 <z_nrf_rtc_timer_read>
   1f1a0:	4682      	mov	sl, r0
   1f1a2:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   1f1a4:	f00d fa87 	bl	2c6b6 <full_int_lock>
   1f1a8:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   1f1aa:	4b15      	ldr	r3, [pc, #84]	; (1f200 <process_channel+0x78>)
   1f1ac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1f1b0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1f1b4:	45c2      	cmp	sl, r8
   1f1b6:	eb75 0509 	sbcs.w	r5, r5, r9
   1f1ba:	d20b      	bcs.n	1f1d4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1f1bc:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   1f1be:	4630      	mov	r0, r6
   1f1c0:	f00d fa7d 	bl	2c6be <full_int_unlock>
		if (handler) {
   1f1c4:	2d00      	cmp	r5, #0
   1f1c6:	d0e6      	beq.n	1f196 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1f1c8:	9700      	str	r7, [sp, #0]
   1f1ca:	4642      	mov	r2, r8
   1f1cc:	464b      	mov	r3, r9
   1f1ce:	4620      	mov	r0, r4
   1f1d0:	47a8      	blx	r5
}
   1f1d2:	e7e0      	b.n	1f196 <process_channel+0xe>
			handler = cc_data[chan].callback;
   1f1d4:	4a0a      	ldr	r2, [pc, #40]	; (1f200 <process_channel+0x78>)
   1f1d6:	0123      	lsls	r3, r4, #4
   1f1d8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1f1dc:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   1f1de:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   1f1e0:	2000      	movs	r0, #0
   1f1e2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f1e4:	f04f 32ff 	mov.w	r2, #4294967295
   1f1e8:	f04f 33ff 	mov.w	r3, #4294967295
   1f1ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1f1f0:	4620      	mov	r0, r4
   1f1f2:	f7ff fe23 	bl	1ee3c <event_disable>
			event_clear(chan);
   1f1f6:	4620      	mov	r0, r4
   1f1f8:	f00d fa4e 	bl	2c698 <event_clear>
   1f1fc:	e7df      	b.n	1f1be <process_channel+0x36>
   1f1fe:	bf00      	nop
   1f200:	20002370 	.word	0x20002370

0001f204 <rtc_nrf_isr>:
{
   1f204:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1f206:	4b0e      	ldr	r3, [pc, #56]	; (1f240 <rtc_nrf_isr+0x3c>)
   1f208:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1f20c:	f013 0f02 	tst.w	r3, #2
   1f210:	d00d      	beq.n	1f22e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f212:	4b0b      	ldr	r3, [pc, #44]	; (1f240 <rtc_nrf_isr+0x3c>)
   1f214:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1f218:	b14b      	cbz	r3, 1f22e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f21a:	4b09      	ldr	r3, [pc, #36]	; (1f240 <rtc_nrf_isr+0x3c>)
   1f21c:	2200      	movs	r2, #0
   1f21e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1f222:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   1f226:	4a07      	ldr	r2, [pc, #28]	; (1f244 <rtc_nrf_isr+0x40>)
   1f228:	6813      	ldr	r3, [r2, #0]
   1f22a:	3301      	adds	r3, #1
   1f22c:	6013      	str	r3, [r2, #0]
{
   1f22e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f230:	2c00      	cmp	r4, #0
   1f232:	dd00      	ble.n	1f236 <rtc_nrf_isr+0x32>
}
   1f234:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1f236:	4620      	mov	r0, r4
   1f238:	f7ff ffa6 	bl	1f188 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f23c:	3401      	adds	r4, #1
   1f23e:	e7f7      	b.n	1f230 <rtc_nrf_isr+0x2c>
   1f240:	40011000 	.word	0x40011000
   1f244:	20003a20 	.word	0x20003a20

0001f248 <sys_clock_set_timeout>:
{
   1f248:	b510      	push	{r4, lr}
   1f24a:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   1f24c:	f1b0 3fff 	cmp.w	r0, #4294967295
   1f250:	d006      	beq.n	1f260 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1f252:	2801      	cmp	r0, #1
   1f254:	dd09      	ble.n	1f26a <sys_clock_set_timeout+0x22>
   1f256:	4b15      	ldr	r3, [pc, #84]	; (1f2ac <sys_clock_set_timeout+0x64>)
   1f258:	4298      	cmp	r0, r3
   1f25a:	dc24      	bgt.n	1f2a6 <sys_clock_set_timeout+0x5e>
   1f25c:	4604      	mov	r4, r0
   1f25e:	e005      	b.n	1f26c <sys_clock_set_timeout+0x24>
		sys_busy = false;
   1f260:	4b13      	ldr	r3, [pc, #76]	; (1f2b0 <sys_clock_set_timeout+0x68>)
   1f262:	2200      	movs	r2, #0
   1f264:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   1f266:	4c13      	ldr	r4, [pc, #76]	; (1f2b4 <sys_clock_set_timeout+0x6c>)
   1f268:	e003      	b.n	1f272 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1f26a:	2401      	movs	r4, #1
		sys_busy = true;
   1f26c:	4b10      	ldr	r3, [pc, #64]	; (1f2b0 <sys_clock_set_timeout+0x68>)
   1f26e:	2201      	movs	r2, #1
   1f270:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1f272:	f7ff fed7 	bl	1f024 <z_nrf_rtc_timer_read>
   1f276:	4b10      	ldr	r3, [pc, #64]	; (1f2b8 <sys_clock_set_timeout+0x70>)
   1f278:	681a      	ldr	r2, [r3, #0]
   1f27a:	685b      	ldr	r3, [r3, #4]
   1f27c:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   1f27e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f282:	d300      	bcc.n	1f286 <sys_clock_set_timeout+0x3e>
		cyc = 0;
   1f284:	2400      	movs	r4, #0
	cyc += unannounced;
   1f286:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1f288:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1f28c:	d300      	bcc.n	1f290 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   1f28e:	4c09      	ldr	r4, [pc, #36]	; (1f2b4 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   1f290:	2000      	movs	r0, #0
   1f292:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1f294:	9001      	str	r0, [sp, #4]
   1f296:	4909      	ldr	r1, [pc, #36]	; (1f2bc <sys_clock_set_timeout+0x74>)
   1f298:	9100      	str	r1, [sp, #0]
   1f29a:	f143 0300 	adc.w	r3, r3, #0
   1f29e:	f00d fa11 	bl	2c6c4 <compare_set>
}
   1f2a2:	b002      	add	sp, #8
   1f2a4:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1f2a6:	4c03      	ldr	r4, [pc, #12]	; (1f2b4 <sys_clock_set_timeout+0x6c>)
   1f2a8:	e7e0      	b.n	1f26c <sys_clock_set_timeout+0x24>
   1f2aa:	bf00      	nop
   1f2ac:	007ffffe 	.word	0x007ffffe
   1f2b0:	20004b6e 	.word	0x20004b6e
   1f2b4:	007fffff 	.word	0x007fffff
   1f2b8:	20002380 	.word	0x20002380
   1f2bc:	0001efd5 	.word	0x0001efd5

0001f2c0 <sys_clock_elapsed>:
{
   1f2c0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1f2c2:	f7ff feaf 	bl	1f024 <z_nrf_rtc_timer_read>
   1f2c6:	4b02      	ldr	r3, [pc, #8]	; (1f2d0 <sys_clock_elapsed+0x10>)
   1f2c8:	681b      	ldr	r3, [r3, #0]
}
   1f2ca:	1ac0      	subs	r0, r0, r3
   1f2cc:	bd08      	pop	{r3, pc}
   1f2ce:	bf00      	nop
   1f2d0:	20002380 	.word	0x20002380

0001f2d4 <nrf_gpio_pin_write>:
    if (value == 0)
   1f2d4:	b969      	cbnz	r1, 1f2f2 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   1f2d6:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1f2da:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f2dc:	2801      	cmp	r0, #1
   1f2de:	d006      	beq.n	1f2ee <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   1f2e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f2e4:	2301      	movs	r3, #1
   1f2e6:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   1f2e8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1f2ec:	4770      	bx	lr
        case 1: return NRF_P1;
   1f2ee:	4a08      	ldr	r2, [pc, #32]	; (1f310 <nrf_gpio_pin_write+0x3c>)
   1f2f0:	e7f8      	b.n	1f2e4 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   1f2f2:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1f2f6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f2f8:	2801      	cmp	r0, #1
   1f2fa:	d006      	beq.n	1f30a <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   1f2fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f300:	2301      	movs	r3, #1
   1f302:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1f304:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   1f308:	4770      	bx	lr
        case 1: return NRF_P1;
   1f30a:	4a01      	ldr	r2, [pc, #4]	; (1f310 <nrf_gpio_pin_write+0x3c>)
   1f30c:	e7f8      	b.n	1f300 <nrf_gpio_pin_write+0x2c>
   1f30e:	bf00      	nop
   1f310:	50000300 	.word	0x50000300

0001f314 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f318:	b083      	sub	sp, #12
   1f31a:	4680      	mov	r8, r0
   1f31c:	468b      	mov	fp, r1
   1f31e:	9201      	str	r2, [sp, #4]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1f320:	2500      	movs	r5, #0
   1f322:	e02b      	b.n	1f37c <pinctrl_configure_pins+0x68>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   1f324:	f04f 34ff 	mov.w	r4, #4294967295
   1f328:	e035      	b.n	1f396 <pinctrl_configure_pins+0x82>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   1f32a:	9b01      	ldr	r3, [sp, #4]
   1f32c:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f330:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f332:	463e      	mov	r6, r7
			write = 1U;
   1f334:	4639      	mov	r1, r7
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   1f336:	2c7f      	cmp	r4, #127	; 0x7f
   1f338:	d01e      	beq.n	1f378 <pinctrl_configure_pins+0x64>
			if (write != NO_WRITE) {
   1f33a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1f33e:	f040 811f 	bne.w	1f580 <pinctrl_configure_pins+0x26c>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1f342:	f858 300a 	ldr.w	r3, [r8, sl]
   1f346:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1f34a:	d001      	beq.n	1f350 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f34c:	2701      	movs	r7, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   1f34e:	2600      	movs	r6, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1f350:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    *p_pin = pin_number & 0x1F;
   1f354:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1f358:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f35a:	2c01      	cmp	r4, #1
   1f35c:	f000 8114 	beq.w	1f588 <pinctrl_configure_pins+0x274>
        case 0: return NRF_P0;
   1f360:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f364:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1f368:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1f36c:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1f370:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1f374:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1f378:	3501      	adds	r5, #1
   1f37a:	b2ed      	uxtb	r5, r5
   1f37c:	455d      	cmp	r5, fp
   1f37e:	f080 8105 	bcs.w	1f58c <pinctrl_configure_pins+0x278>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1f382:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   1f386:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
   1f38a:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1f38e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   1f392:	2c7f      	cmp	r4, #127	; 0x7f
   1f394:	d0c6      	beq.n	1f324 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   1f396:	0c1b      	lsrs	r3, r3, #16
   1f398:	2b22      	cmp	r3, #34	; 0x22
   1f39a:	f200 80f9 	bhi.w	1f590 <pinctrl_configure_pins+0x27c>
   1f39e:	a201      	add	r2, pc, #4	; (adr r2, 1f3a4 <pinctrl_configure_pins+0x90>)
   1f3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f3a4:	0001f32b 	.word	0x0001f32b
   1f3a8:	0001f431 	.word	0x0001f431
   1f3ac:	0001f441 	.word	0x0001f441
   1f3b0:	0001f44f 	.word	0x0001f44f
   1f3b4:	0001f45f 	.word	0x0001f45f
   1f3b8:	0001f46d 	.word	0x0001f46d
   1f3bc:	0001f47b 	.word	0x0001f47b
   1f3c0:	0001f591 	.word	0x0001f591
   1f3c4:	0001f591 	.word	0x0001f591
   1f3c8:	0001f591 	.word	0x0001f591
   1f3cc:	0001f591 	.word	0x0001f591
   1f3d0:	0001f48b 	.word	0x0001f48b
   1f3d4:	0001f4a1 	.word	0x0001f4a1
   1f3d8:	0001f591 	.word	0x0001f591
   1f3dc:	0001f591 	.word	0x0001f591
   1f3e0:	0001f591 	.word	0x0001f591
   1f3e4:	0001f591 	.word	0x0001f591
   1f3e8:	0001f591 	.word	0x0001f591
   1f3ec:	0001f591 	.word	0x0001f591
   1f3f0:	0001f591 	.word	0x0001f591
   1f3f4:	0001f591 	.word	0x0001f591
   1f3f8:	0001f591 	.word	0x0001f591
   1f3fc:	0001f4b7 	.word	0x0001f4b7
   1f400:	0001f4cb 	.word	0x0001f4cb
   1f404:	0001f4df 	.word	0x0001f4df
   1f408:	0001f4f3 	.word	0x0001f4f3
   1f40c:	0001f591 	.word	0x0001f591
   1f410:	0001f591 	.word	0x0001f591
   1f414:	0001f591 	.word	0x0001f591
   1f418:	0001f507 	.word	0x0001f507
   1f41c:	0001f517 	.word	0x0001f517
   1f420:	0001f525 	.word	0x0001f525
   1f424:	0001f535 	.word	0x0001f535
   1f428:	0001f545 	.word	0x0001f545
   1f42c:	0001f555 	.word	0x0001f555
			NRF_PSEL_UART(reg, RXD) = pin;
   1f430:	9b01      	ldr	r3, [sp, #4]
   1f432:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f436:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f438:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
   1f43a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1f43e:	e77a      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
   1f440:	9b01      	ldr	r3, [sp, #4]
   1f442:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f446:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f448:	463e      	mov	r6, r7
			write = 1U;
   1f44a:	4639      	mov	r1, r7
			break;
   1f44c:	e773      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
   1f44e:	9b01      	ldr	r3, [sp, #4]
   1f450:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f454:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f456:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
   1f458:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1f45c:	e76b      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1f45e:	9b01      	ldr	r3, [sp, #4]
   1f460:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f464:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f466:	2601      	movs	r6, #1
			write = 0U;
   1f468:	4639      	mov	r1, r7
			break;
   1f46a:	e764      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1f46c:	9b01      	ldr	r3, [sp, #4]
   1f46e:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f472:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f474:	463e      	mov	r6, r7
			write = 0U;
   1f476:	2100      	movs	r1, #0
			break;
   1f478:	e75d      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1f47a:	9b01      	ldr	r3, [sp, #4]
   1f47c:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f480:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f482:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
   1f484:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1f488:	e755      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1f48a:	9b01      	ldr	r3, [sp, #4]
   1f48c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1f490:	f1b9 0f00 	cmp.w	r9, #0
   1f494:	d066      	beq.n	1f564 <pinctrl_configure_pins+0x250>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f496:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f498:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
   1f49a:	f04f 31ff 	mov.w	r1, #4294967295
   1f49e:	e74a      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1f4a0:	9b01      	ldr	r3, [sp, #4]
   1f4a2:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1f4a6:	f1b9 0f00 	cmp.w	r9, #0
   1f4aa:	d062      	beq.n	1f572 <pinctrl_configure_pins+0x25e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f4ac:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f4ae:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
   1f4b0:	f04f 31ff 	mov.w	r1, #4294967295
   1f4b4:	e73f      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1f4b6:	9b01      	ldr	r3, [sp, #4]
   1f4b8:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1f4bc:	f858 100a 	ldr.w	r1, [r8, sl]
   1f4c0:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f4c4:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f4c6:	463e      	mov	r6, r7
			break;
   1f4c8:	e735      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1f4ca:	9b01      	ldr	r3, [sp, #4]
   1f4cc:	f8c3 4564 	str.w	r4, [r3, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1f4d0:	f858 100a 	ldr.w	r1, [r8, sl]
   1f4d4:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f4d8:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f4da:	463e      	mov	r6, r7
			break;
   1f4dc:	e72b      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1f4de:	9b01      	ldr	r3, [sp, #4]
   1f4e0:	f8c3 4568 	str.w	r4, [r3, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1f4e4:	f858 100a 	ldr.w	r1, [r8, sl]
   1f4e8:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f4ec:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f4ee:	463e      	mov	r6, r7
			break;
   1f4f0:	e721      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1f4f2:	9b01      	ldr	r3, [sp, #4]
   1f4f4:	f8c3 456c 	str.w	r4, [r3, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   1f4f8:	f858 100a 	ldr.w	r1, [r8, sl]
   1f4fc:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f500:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f502:	463e      	mov	r6, r7
			break;
   1f504:	e717      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1f506:	9b01      	ldr	r3, [sp, #4]
   1f508:	f8c3 4524 	str.w	r4, [r3, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f50c:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f50e:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
   1f510:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1f514:	e70f      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1f516:	9b01      	ldr	r3, [sp, #4]
   1f518:	f8c3 4528 	str.w	r4, [r3, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f51c:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f51e:	463e      	mov	r6, r7
			write = 1U;
   1f520:	4639      	mov	r1, r7
			break;
   1f522:	e708      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1f524:	9b01      	ldr	r3, [sp, #4]
   1f526:	f8c3 4530 	str.w	r4, [r3, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f52a:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f52c:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
   1f52e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1f532:	e700      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1f534:	9b01      	ldr	r3, [sp, #4]
   1f536:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f53a:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f53c:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
   1f53e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1f542:	e6f8      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1f544:	9b01      	ldr	r3, [sp, #4]
   1f546:	f8c3 4538 	str.w	r4, [r3, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f54a:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f54c:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
   1f54e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1f552:	e6f0      	b.n	1f336 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1f554:	9b01      	ldr	r3, [sp, #4]
   1f556:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f55a:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f55c:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
   1f55e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
   1f562:	e6e8      	b.n	1f336 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f564:	464f      	mov	r7, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f566:	464e      	mov	r6, r9
		uint32_t write = NO_WRITE;
   1f568:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
   1f56c:	f04f 0906 	mov.w	r9, #6
   1f570:	e6e1      	b.n	1f336 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1f572:	464f      	mov	r7, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1f574:	464e      	mov	r6, r9
		uint32_t write = NO_WRITE;
   1f576:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
   1f57a:	f04f 0906 	mov.w	r9, #6
   1f57e:	e6da      	b.n	1f336 <pinctrl_configure_pins+0x22>
				nrf_gpio_pin_write(pin, write);
   1f580:	4620      	mov	r0, r4
   1f582:	f7ff fea7 	bl	1f2d4 <nrf_gpio_pin_write>
   1f586:	e6dc      	b.n	1f342 <pinctrl_configure_pins+0x2e>
        case 1: return NRF_P1;
   1f588:	4904      	ldr	r1, [pc, #16]	; (1f59c <pinctrl_configure_pins+0x288>)
   1f58a:	e6eb      	b.n	1f364 <pinctrl_configure_pins+0x50>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1f58c:	2000      	movs	r0, #0
   1f58e:	e001      	b.n	1f594 <pinctrl_configure_pins+0x280>
		switch (NRF_GET_FUN(pins[i])) {
   1f590:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1f594:	b003      	add	sp, #12
   1f596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f59a:	bf00      	nop
   1f59c:	50000300 	.word	0x50000300

0001f5a0 <callback_ctrl>:
static struct k_spinlock lock;
static sys_slist_t button_handlers;
static struct k_mutex button_handler_mut;

static int callback_ctrl(bool enable)
{
   1f5a0:	b538      	push	{r3, r4, r5, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1f5a2:	b120      	cbz	r0, 1f5ae <callback_ctrl+0xe>
   1f5a4:	f04f 6598 	mov.w	r5, #79691776	; 0x4c00000
	int err = 0;

	/* This must be done with irqs disabled to avoid pin callback
	 * being fired before others are still not activated.
	 */
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1f5a8:	2400      	movs	r4, #0
	int err = 0;
   1f5aa:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1f5ac:	e00c      	b.n	1f5c8 <callback_ctrl+0x28>
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1f5ae:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1f5b2:	e7f9      	b.n	1f5a8 <callback_ctrl+0x8>
 * @return a value from gpio_pin_interrupt_configure()
 */
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
						  gpio_flags_t flags)
{
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1f5b4:	4b07      	ldr	r3, [pc, #28]	; (1f5d4 <callback_ctrl+0x34>)
   1f5b6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1f5ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f5be:	7919      	ldrb	r1, [r3, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1f5c0:	462a      	mov	r2, r5
   1f5c2:	f00d f8b5 	bl	2c730 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1f5c6:	3401      	adds	r4, #1
   1f5c8:	2c03      	cmp	r4, #3
   1f5ca:	d801      	bhi.n	1f5d0 <callback_ctrl+0x30>
   1f5cc:	2800      	cmp	r0, #0
   1f5ce:	d0f1      	beq.n	1f5b4 <callback_ctrl+0x14>
		err = gpio_pin_interrupt_configure_dt(&buttons[i], flags);
	}

	return err;
}
   1f5d0:	bd38      	pop	{r3, r4, r5, pc}
   1f5d2:	bf00      	nop
   1f5d4:	00031400 	.word	0x00031400

0001f5d8 <get_buttons>:

static uint32_t get_buttons(void)
{
   1f5d8:	b530      	push	{r4, r5, lr}
   1f5da:	b089      	sub	sp, #36	; 0x24
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f5dc:	2400      	movs	r4, #0
	uint32_t ret = 0;
   1f5de:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f5e0:	e029      	b.n	1f636 <get_buttons+0x5e>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1f5e2:	4b1e      	ldr	r3, [pc, #120]	; (1f65c <get_buttons+0x84>)
   1f5e4:	9307      	str	r3, [sp, #28]
   1f5e6:	2302      	movs	r3, #2
   1f5e8:	f88d 3004 	strb.w	r3, [sp, #4]
   1f5ec:	2500      	movs	r5, #0
   1f5ee:	f88d 5005 	strb.w	r5, [sp, #5]
   1f5f2:	f88d 5006 	strb.w	r5, [sp, #6]
   1f5f6:	f88d 5007 	strb.w	r5, [sp, #7]
   1f5fa:	9b01      	ldr	r3, [sp, #4]
   1f5fc:	9306      	str	r3, [sp, #24]
   1f5fe:	4629      	mov	r1, r5
   1f600:	f365 0100 	bfi	r1, r5, #0, #1
   1f604:	f365 0141 	bfi	r1, r5, #1, #1
   1f608:	f365 0182 	bfi	r1, r5, #2, #1
   1f60c:	f365 01c5 	bfi	r1, r5, #3, #3
   1f610:	2301      	movs	r3, #1
   1f612:	f363 1188 	bfi	r1, r3, #6, #3
   1f616:	2308      	movs	r3, #8
   1f618:	f363 2152 	bfi	r1, r3, #9, #10
   1f61c:	f365 41de 	bfi	r1, r5, #19, #12
   1f620:	f365 71df 	bfi	r1, r5, #31, #1
   1f624:	462b      	mov	r3, r5
   1f626:	aa06      	add	r2, sp, #24
   1f628:	480d      	ldr	r0, [pc, #52]	; (1f660 <get_buttons+0x88>)
   1f62a:	f009 fbca 	bl	28dc2 <z_impl_z_log_msg_static_create>
			ret |= 1U << i;
		}
	}

	return ret;
}
   1f62e:	4628      	mov	r0, r5
   1f630:	b009      	add	sp, #36	; 0x24
   1f632:	bd30      	pop	{r4, r5, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f634:	3401      	adds	r4, #1
   1f636:	2c03      	cmp	r4, #3
   1f638:	d8f9      	bhi.n	1f62e <get_buttons+0x56>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   1f63a:	4a0a      	ldr	r2, [pc, #40]	; (1f664 <get_buttons+0x8c>)
   1f63c:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
   1f640:	7919      	ldrb	r1, [r3, #4]
   1f642:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
   1f646:	f00d f8c6 	bl	2c7d6 <gpio_pin_get>
		if (val < 0) {
   1f64a:	2800      	cmp	r0, #0
   1f64c:	dbc9      	blt.n	1f5e2 <get_buttons+0xa>
		if (val) {
   1f64e:	2800      	cmp	r0, #0
   1f650:	d0f0      	beq.n	1f634 <get_buttons+0x5c>
			ret |= 1U << i;
   1f652:	2301      	movs	r3, #1
   1f654:	40a3      	lsls	r3, r4
   1f656:	431d      	orrs	r5, r3
   1f658:	e7ec      	b.n	1f634 <get_buttons+0x5c>
   1f65a:	bf00      	nop
   1f65c:	000312f4 	.word	0x000312f4
   1f660:	0002eef0 	.word	0x0002eef0
   1f664:	00031400 	.word	0x00031400

0001f668 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   1f668:	b510      	push	{r4, lr}
   1f66a:	b088      	sub	sp, #32
   1f66c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f670:	f3ef 8411 	mrs	r4, BASEPRI
   1f674:	f383 8812 	msr	BASEPRI_MAX, r3
   1f678:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   1f67c:	2000      	movs	r0, #0
   1f67e:	f7ff ff8f 	bl	1f5a0 <callback_ctrl>

	if (err) {
   1f682:	b940      	cbnz	r0, 1f696 <button_pressed+0x2e>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
   1f684:	4b1b      	ldr	r3, [pc, #108]	; (1f6f4 <button_pressed+0x8c>)
   1f686:	781b      	ldrb	r3, [r3, #0]
   1f688:	b35b      	cbz	r3, 1f6e2 <button_pressed+0x7a>
	__asm__ volatile(
   1f68a:	f384 8811 	msr	BASEPRI, r4
   1f68e:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   1f692:	b008      	add	sp, #32
   1f694:	bd10      	pop	{r4, pc}
		LOG_ERR("Cannot disable callbacks");
   1f696:	4b18      	ldr	r3, [pc, #96]	; (1f6f8 <button_pressed+0x90>)
   1f698:	9307      	str	r3, [sp, #28]
   1f69a:	2302      	movs	r3, #2
   1f69c:	f88d 3004 	strb.w	r3, [sp, #4]
   1f6a0:	2300      	movs	r3, #0
   1f6a2:	f88d 3005 	strb.w	r3, [sp, #5]
   1f6a6:	f88d 3006 	strb.w	r3, [sp, #6]
   1f6aa:	f88d 3007 	strb.w	r3, [sp, #7]
   1f6ae:	9a01      	ldr	r2, [sp, #4]
   1f6b0:	9206      	str	r2, [sp, #24]
   1f6b2:	4619      	mov	r1, r3
   1f6b4:	f363 0100 	bfi	r1, r3, #0, #1
   1f6b8:	f363 0141 	bfi	r1, r3, #1, #1
   1f6bc:	f363 0182 	bfi	r1, r3, #2, #1
   1f6c0:	f363 01c5 	bfi	r1, r3, #3, #3
   1f6c4:	2201      	movs	r2, #1
   1f6c6:	f362 1188 	bfi	r1, r2, #6, #3
   1f6ca:	2208      	movs	r2, #8
   1f6cc:	f362 2152 	bfi	r1, r2, #9, #10
   1f6d0:	f363 41de 	bfi	r1, r3, #19, #12
   1f6d4:	f363 71df 	bfi	r1, r3, #31, #1
   1f6d8:	aa06      	add	r2, sp, #24
   1f6da:	4808      	ldr	r0, [pc, #32]	; (1f6fc <button_pressed+0x94>)
   1f6dc:	f009 fb71 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1f6e0:	e7d0      	b.n	1f684 <button_pressed+0x1c>
		state = STATE_SCANNING;
   1f6e2:	4b04      	ldr	r3, [pc, #16]	; (1f6f4 <button_pressed+0x8c>)
   1f6e4:	2201      	movs	r2, #1
   1f6e6:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1f6e8:	2221      	movs	r2, #33	; 0x21
   1f6ea:	2300      	movs	r3, #0
   1f6ec:	4804      	ldr	r0, [pc, #16]	; (1f700 <button_pressed+0x98>)
   1f6ee:	f002 ff5d 	bl	225ac <k_work_reschedule>
		break;
   1f6f2:	e7ca      	b.n	1f68a <button_pressed+0x22>
   1f6f4:	20004b6f 	.word	0x20004b6f
   1f6f8:	0003130c 	.word	0x0003130c
   1f6fc:	0002eef0 	.word	0x0002eef0
   1f700:	20002390 	.word	0x20002390

0001f704 <button_handlers_call>:
{
   1f704:	b570      	push	{r4, r5, r6, lr}
   1f706:	4605      	mov	r5, r0
   1f708:	460e      	mov	r6, r1
	if (button_handler_cb != NULL) {
   1f70a:	4b0f      	ldr	r3, [pc, #60]	; (1f748 <button_handlers_call+0x44>)
   1f70c:	681b      	ldr	r3, [r3, #0]
   1f70e:	b103      	cbz	r3, 1f712 <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
   1f710:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1f712:	f04f 32ff 	mov.w	r2, #4294967295
   1f716:	f04f 33ff 	mov.w	r3, #4294967295
   1f71a:	480c      	ldr	r0, [pc, #48]	; (1f74c <button_handlers_call+0x48>)
   1f71c:	f002 fcb4 	bl	22088 <z_impl_k_mutex_lock>
	return list->head;
   1f720:	4b0b      	ldr	r3, [pc, #44]	; (1f750 <button_handlers_call+0x4c>)
   1f722:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1f724:	b114      	cbz	r4, 1f72c <button_handlers_call+0x28>
   1f726:	3c04      	subs	r4, #4
   1f728:	e000      	b.n	1f72c <button_handlers_call+0x28>
   1f72a:	3c04      	subs	r4, #4
   1f72c:	b13c      	cbz	r4, 1f73e <button_handlers_call+0x3a>
			handler->cb(button_state, has_changed);
   1f72e:	6823      	ldr	r3, [r4, #0]
   1f730:	4631      	mov	r1, r6
   1f732:	4628      	mov	r0, r5
   1f734:	4798      	blx	r3
	return node->next;
   1f736:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1f738:	2c00      	cmp	r4, #0
   1f73a:	d1f6      	bne.n	1f72a <button_handlers_call+0x26>
   1f73c:	e7f6      	b.n	1f72c <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
   1f73e:	4803      	ldr	r0, [pc, #12]	; (1f74c <button_handlers_call+0x48>)
   1f740:	f002 fd26 	bl	22190 <z_impl_k_mutex_unlock>
}
   1f744:	bd70      	pop	{r4, r5, r6, pc}
   1f746:	bf00      	nop
   1f748:	20003a58 	.word	0x20003a58
   1f74c:	20003a2c 	.word	0x20003a2c
   1f750:	20003a40 	.word	0x20003a40

0001f754 <buttons_scan_fn>:
{
   1f754:	b510      	push	{r4, lr}
   1f756:	b088      	sub	sp, #32
	button_scan = get_buttons();
   1f758:	f7ff ff3e 	bl	1f5d8 <get_buttons>
   1f75c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f75e:	4b32      	ldr	r3, [pc, #200]	; (1f828 <buttons_scan_fn+0xd4>)
   1f760:	f3bf 8f5b 	dmb	ish
   1f764:	e853 2f00 	ldrex	r2, [r3]
   1f768:	e843 4100 	strex	r1, r4, [r3]
   1f76c:	2900      	cmp	r1, #0
   1f76e:	d1f9      	bne.n	1f764 <buttons_scan_fn+0x10>
   1f770:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1f774:	4b2d      	ldr	r3, [pc, #180]	; (1f82c <buttons_scan_fn+0xd8>)
   1f776:	781b      	ldrb	r3, [r3, #0]
   1f778:	b943      	cbnz	r3, 1f78c <buttons_scan_fn+0x38>
		if (button_scan != last_button_scan) {
   1f77a:	4b2d      	ldr	r3, [pc, #180]	; (1f830 <buttons_scan_fn+0xdc>)
   1f77c:	6819      	ldr	r1, [r3, #0]
   1f77e:	42a1      	cmp	r1, r4
   1f780:	d007      	beq.n	1f792 <buttons_scan_fn+0x3e>
			button_handlers_call(button_scan, has_changed);
   1f782:	4061      	eors	r1, r4
   1f784:	4620      	mov	r0, r4
   1f786:	f7ff ffbd 	bl	1f704 <button_handlers_call>
   1f78a:	e002      	b.n	1f792 <buttons_scan_fn+0x3e>
		initial_run = false;
   1f78c:	4b27      	ldr	r3, [pc, #156]	; (1f82c <buttons_scan_fn+0xd8>)
   1f78e:	2200      	movs	r2, #0
   1f790:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
   1f792:	4b27      	ldr	r3, [pc, #156]	; (1f830 <buttons_scan_fn+0xdc>)
   1f794:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
   1f796:	b99c      	cbnz	r4, 1f7c0 <buttons_scan_fn+0x6c>
	__asm__ volatile(
   1f798:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f79c:	f3ef 8411 	mrs	r4, BASEPRI
   1f7a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7a4:	f3bf 8f6f 	isb	sy
		switch (state) {
   1f7a8:	4b22      	ldr	r3, [pc, #136]	; (1f834 <buttons_scan_fn+0xe0>)
   1f7aa:	781b      	ldrb	r3, [r3, #0]
   1f7ac:	2b01      	cmp	r3, #1
   1f7ae:	d00e      	beq.n	1f7ce <buttons_scan_fn+0x7a>
		int err = 0;
   1f7b0:	2000      	movs	r0, #0
	__asm__ volatile(
   1f7b2:	f384 8811 	msr	BASEPRI, r4
   1f7b6:	f3bf 8f6f 	isb	sy
		if (err) {
   1f7ba:	b978      	cbnz	r0, 1f7dc <buttons_scan_fn+0x88>
}
   1f7bc:	b008      	add	sp, #32
   1f7be:	bd10      	pop	{r4, pc}
		k_work_reschedule(&buttons_scan,
   1f7c0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1f7c4:	2300      	movs	r3, #0
   1f7c6:	481c      	ldr	r0, [pc, #112]	; (1f838 <buttons_scan_fn+0xe4>)
   1f7c8:	f002 fef0 	bl	225ac <k_work_reschedule>
   1f7cc:	e7f6      	b.n	1f7bc <buttons_scan_fn+0x68>
			state = STATE_WAITING;
   1f7ce:	4b19      	ldr	r3, [pc, #100]	; (1f834 <buttons_scan_fn+0xe0>)
   1f7d0:	2200      	movs	r2, #0
   1f7d2:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
   1f7d4:	2001      	movs	r0, #1
   1f7d6:	f7ff fee3 	bl	1f5a0 <callback_ctrl>
			break;
   1f7da:	e7ea      	b.n	1f7b2 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot enable callbacks");
   1f7dc:	4b17      	ldr	r3, [pc, #92]	; (1f83c <buttons_scan_fn+0xe8>)
   1f7de:	9307      	str	r3, [sp, #28]
   1f7e0:	2302      	movs	r3, #2
   1f7e2:	f88d 3004 	strb.w	r3, [sp, #4]
   1f7e6:	2300      	movs	r3, #0
   1f7e8:	f88d 3005 	strb.w	r3, [sp, #5]
   1f7ec:	f88d 3006 	strb.w	r3, [sp, #6]
   1f7f0:	f88d 3007 	strb.w	r3, [sp, #7]
   1f7f4:	9a01      	ldr	r2, [sp, #4]
   1f7f6:	9206      	str	r2, [sp, #24]
   1f7f8:	4619      	mov	r1, r3
   1f7fa:	f363 0100 	bfi	r1, r3, #0, #1
   1f7fe:	f363 0141 	bfi	r1, r3, #1, #1
   1f802:	f363 0182 	bfi	r1, r3, #2, #1
   1f806:	f363 01c5 	bfi	r1, r3, #3, #3
   1f80a:	2201      	movs	r2, #1
   1f80c:	f362 1188 	bfi	r1, r2, #6, #3
   1f810:	2208      	movs	r2, #8
   1f812:	f362 2152 	bfi	r1, r2, #9, #10
   1f816:	f363 41de 	bfi	r1, r3, #19, #12
   1f81a:	f363 71df 	bfi	r1, r3, #31, #1
   1f81e:	aa06      	add	r2, sp, #24
   1f820:	4807      	ldr	r0, [pc, #28]	; (1f840 <buttons_scan_fn+0xec>)
   1f822:	f009 face 	bl	28dc2 <z_impl_z_log_msg_static_create>
}
   1f826:	e7c9      	b.n	1f7bc <buttons_scan_fn+0x68>
   1f828:	20003a54 	.word	0x20003a54
   1f82c:	20000abc 	.word	0x20000abc
   1f830:	20003a28 	.word	0x20003a28
   1f834:	20004b6f 	.word	0x20004b6f
   1f838:	20002390 	.word	0x20002390
   1f83c:	00031328 	.word	0x00031328
   1f840:	0002eef0 	.word	0x0002eef0

0001f844 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f844:	f3bf 8f5b 	dmb	ish
   1f848:	4b06      	ldr	r3, [pc, #24]	; (1f864 <dk_read_buttons+0x20>)
   1f84a:	681b      	ldr	r3, [r3, #0]
   1f84c:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   1f850:	b100      	cbz	r0, 1f854 <dk_read_buttons+0x10>
		*button_state = current_state;
   1f852:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   1f854:	b119      	cbz	r1, 1f85e <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1f856:	4a04      	ldr	r2, [pc, #16]	; (1f868 <dk_read_buttons+0x24>)
   1f858:	6812      	ldr	r2, [r2, #0]
   1f85a:	405a      	eors	r2, r3
   1f85c:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   1f85e:	4a02      	ldr	r2, [pc, #8]	; (1f868 <dk_read_buttons+0x24>)
   1f860:	6013      	str	r3, [r2, #0]
}
   1f862:	4770      	bx	lr
   1f864:	20003a54 	.word	0x20003a54
   1f868:	20003a24 	.word	0x20003a24

0001f86c <dk_buttons_init>:
{
   1f86c:	b570      	push	{r4, r5, r6, lr}
   1f86e:	b094      	sub	sp, #80	; 0x50
	button_handler_cb = button_handler;
   1f870:	4b6d      	ldr	r3, [pc, #436]	; (1fa28 <dk_buttons_init+0x1bc>)
   1f872:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1f874:	486d      	ldr	r0, [pc, #436]	; (1fa2c <dk_buttons_init+0x1c0>)
   1f876:	f00d fe8d 	bl	2d594 <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f87a:	2400      	movs	r4, #0
   1f87c:	e00a      	b.n	1f894 <dk_buttons_init+0x28>
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1f87e:	2120      	movs	r1, #32
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   1f880:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   1f884:	486a      	ldr	r0, [pc, #424]	; (1fa30 <dk_buttons_init+0x1c4>)
   1f886:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1f88a:	f00c ff8d 	bl	2c7a8 <gpio_pin_configure_dt>
		if (err) {
   1f88e:	4606      	mov	r6, r0
   1f890:	b958      	cbnz	r0, 1f8aa <dk_buttons_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f892:	3401      	adds	r4, #1
   1f894:	2c03      	cmp	r4, #3
   1f896:	d82e      	bhi.n	1f8f6 <dk_buttons_init+0x8a>
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   1f898:	4b65      	ldr	r3, [pc, #404]	; (1fa30 <dk_buttons_init+0x1c4>)
   1f89a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f89e:	88db      	ldrh	r3, [r3, #6]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1f8a0:	f013 0f01 	tst.w	r3, #1
   1f8a4:	d0eb      	beq.n	1f87e <dk_buttons_init+0x12>
   1f8a6:	2110      	movs	r1, #16
   1f8a8:	e7ea      	b.n	1f880 <dk_buttons_init+0x14>
			LOG_ERR("Cannot configure button gpio");
   1f8aa:	4b62      	ldr	r3, [pc, #392]	; (1fa34 <dk_buttons_init+0x1c8>)
   1f8ac:	9313      	str	r3, [sp, #76]	; 0x4c
   1f8ae:	2302      	movs	r3, #2
   1f8b0:	f88d 3004 	strb.w	r3, [sp, #4]
   1f8b4:	2300      	movs	r3, #0
   1f8b6:	f88d 3005 	strb.w	r3, [sp, #5]
   1f8ba:	f88d 3006 	strb.w	r3, [sp, #6]
   1f8be:	f88d 3007 	strb.w	r3, [sp, #7]
   1f8c2:	9a01      	ldr	r2, [sp, #4]
   1f8c4:	9212      	str	r2, [sp, #72]	; 0x48
   1f8c6:	4619      	mov	r1, r3
   1f8c8:	f363 0100 	bfi	r1, r3, #0, #1
   1f8cc:	f363 0141 	bfi	r1, r3, #1, #1
   1f8d0:	f363 0182 	bfi	r1, r3, #2, #1
   1f8d4:	f363 01c5 	bfi	r1, r3, #3, #3
   1f8d8:	2201      	movs	r2, #1
   1f8da:	f362 1188 	bfi	r1, r2, #6, #3
   1f8de:	2208      	movs	r2, #8
   1f8e0:	f362 2152 	bfi	r1, r2, #9, #10
   1f8e4:	f363 41de 	bfi	r1, r3, #19, #12
   1f8e8:	f363 71df 	bfi	r1, r3, #31, #1
   1f8ec:	aa12      	add	r2, sp, #72	; 0x48
   1f8ee:	4852      	ldr	r0, [pc, #328]	; (1fa38 <dk_buttons_init+0x1cc>)
   1f8f0:	f009 fa67 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return err;
   1f8f4:	e095      	b.n	1fa22 <dk_buttons_init+0x1b6>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f8f6:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
   1f8f8:	4625      	mov	r5, r4
   1f8fa:	e007      	b.n	1f90c <dk_buttons_init+0xa0>
		pin_mask |= BIT(buttons[i].pin);
   1f8fc:	4b4c      	ldr	r3, [pc, #304]	; (1fa30 <dk_buttons_init+0x1c4>)
   1f8fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f902:	791a      	ldrb	r2, [r3, #4]
   1f904:	2301      	movs	r3, #1
   1f906:	4093      	lsls	r3, r2
   1f908:	431d      	orrs	r5, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f90a:	3401      	adds	r4, #1
   1f90c:	2c03      	cmp	r4, #3
   1f90e:	d832      	bhi.n	1f976 <dk_buttons_init+0x10a>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1f910:	4b47      	ldr	r3, [pc, #284]	; (1fa30 <dk_buttons_init+0x1c4>)
   1f912:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1f916:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f91a:	7919      	ldrb	r1, [r3, #4]
   1f91c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1f920:	f00c ff06 	bl	2c730 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1f924:	4606      	mov	r6, r0
   1f926:	2800      	cmp	r0, #0
   1f928:	d0e8      	beq.n	1f8fc <dk_buttons_init+0x90>
			LOG_ERR("Cannot disable callbacks()");
   1f92a:	4b44      	ldr	r3, [pc, #272]	; (1fa3c <dk_buttons_init+0x1d0>)
   1f92c:	930d      	str	r3, [sp, #52]	; 0x34
   1f92e:	2302      	movs	r3, #2
   1f930:	f88d 3004 	strb.w	r3, [sp, #4]
   1f934:	2300      	movs	r3, #0
   1f936:	f88d 3005 	strb.w	r3, [sp, #5]
   1f93a:	f88d 3006 	strb.w	r3, [sp, #6]
   1f93e:	f88d 3007 	strb.w	r3, [sp, #7]
   1f942:	9a01      	ldr	r2, [sp, #4]
   1f944:	920c      	str	r2, [sp, #48]	; 0x30
   1f946:	4619      	mov	r1, r3
   1f948:	f363 0100 	bfi	r1, r3, #0, #1
   1f94c:	f363 0141 	bfi	r1, r3, #1, #1
   1f950:	f363 0182 	bfi	r1, r3, #2, #1
   1f954:	f363 01c5 	bfi	r1, r3, #3, #3
   1f958:	2201      	movs	r2, #1
   1f95a:	f362 1188 	bfi	r1, r2, #6, #3
   1f95e:	2208      	movs	r2, #8
   1f960:	f362 2152 	bfi	r1, r2, #9, #10
   1f964:	f363 41de 	bfi	r1, r3, #19, #12
   1f968:	f363 71df 	bfi	r1, r3, #31, #1
   1f96c:	aa0c      	add	r2, sp, #48	; 0x30
   1f96e:	4832      	ldr	r0, [pc, #200]	; (1fa38 <dk_buttons_init+0x1cc>)
   1f970:	f009 fa27 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return err;
   1f974:	e055      	b.n	1fa22 <dk_buttons_init+0x1b6>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1f976:	4b32      	ldr	r3, [pc, #200]	; (1fa40 <dk_buttons_init+0x1d4>)
   1f978:	4a32      	ldr	r2, [pc, #200]	; (1fa44 <dk_buttons_init+0x1d8>)
   1f97a:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   1f97c:	609d      	str	r5, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f97e:	2400      	movs	r4, #0
   1f980:	2c03      	cmp	r4, #3
   1f982:	d82f      	bhi.n	1f9e4 <dk_buttons_init+0x178>
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   1f984:	492e      	ldr	r1, [pc, #184]	; (1fa40 <dk_buttons_init+0x1d4>)
   1f986:	4b2a      	ldr	r3, [pc, #168]	; (1fa30 <dk_buttons_init+0x1c4>)
   1f988:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1f98c:	f00c ff50 	bl	2c830 <gpio_add_callback>
		if (err) {
   1f990:	4606      	mov	r6, r0
   1f992:	b908      	cbnz	r0, 1f998 <dk_buttons_init+0x12c>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1f994:	3401      	adds	r4, #1
   1f996:	e7f3      	b.n	1f980 <dk_buttons_init+0x114>
			LOG_ERR("Cannot add callback");
   1f998:	4b2b      	ldr	r3, [pc, #172]	; (1fa48 <dk_buttons_init+0x1dc>)
   1f99a:	9307      	str	r3, [sp, #28]
   1f99c:	2302      	movs	r3, #2
   1f99e:	f88d 3004 	strb.w	r3, [sp, #4]
   1f9a2:	2300      	movs	r3, #0
   1f9a4:	f88d 3005 	strb.w	r3, [sp, #5]
   1f9a8:	f88d 3006 	strb.w	r3, [sp, #6]
   1f9ac:	f88d 3007 	strb.w	r3, [sp, #7]
   1f9b0:	9a01      	ldr	r2, [sp, #4]
   1f9b2:	9206      	str	r2, [sp, #24]
   1f9b4:	4619      	mov	r1, r3
   1f9b6:	f363 0100 	bfi	r1, r3, #0, #1
   1f9ba:	f363 0141 	bfi	r1, r3, #1, #1
   1f9be:	f363 0182 	bfi	r1, r3, #2, #1
   1f9c2:	f363 01c5 	bfi	r1, r3, #3, #3
   1f9c6:	2201      	movs	r2, #1
   1f9c8:	f362 1188 	bfi	r1, r2, #6, #3
   1f9cc:	2208      	movs	r2, #8
   1f9ce:	f362 2152 	bfi	r1, r2, #9, #10
   1f9d2:	f363 41de 	bfi	r1, r3, #19, #12
   1f9d6:	f363 71df 	bfi	r1, r3, #31, #1
   1f9da:	aa06      	add	r2, sp, #24
   1f9dc:	4816      	ldr	r0, [pc, #88]	; (1fa38 <dk_buttons_init+0x1cc>)
   1f9de:	f009 f9f0 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return err;
   1f9e2:	e01e      	b.n	1fa22 <dk_buttons_init+0x1b6>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1f9e4:	4c19      	ldr	r4, [pc, #100]	; (1fa4c <dk_buttons_init+0x1e0>)
   1f9e6:	491a      	ldr	r1, [pc, #104]	; (1fa50 <dk_buttons_init+0x1e4>)
   1f9e8:	4620      	mov	r0, r4
   1f9ea:	f00d ffa5 	bl	2d938 <k_work_init_delayable>
	state = STATE_SCANNING;
   1f9ee:	4b19      	ldr	r3, [pc, #100]	; (1fa54 <dk_buttons_init+0x1e8>)
   1f9f0:	2201      	movs	r2, #1
   1f9f2:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1f9f4:	2200      	movs	r2, #0
   1f9f6:	2300      	movs	r3, #0
   1f9f8:	4620      	mov	r0, r4
   1f9fa:	f002 fdcf 	bl	2259c <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1f9fe:	2100      	movs	r1, #0
   1fa00:	4608      	mov	r0, r1
   1fa02:	f7ff ff1f 	bl	1f844 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1fa06:	f7ff fde7 	bl	1f5d8 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fa0a:	4b13      	ldr	r3, [pc, #76]	; (1fa58 <dk_buttons_init+0x1ec>)
   1fa0c:	f3bf 8f5b 	dmb	ish
   1fa10:	e853 2f00 	ldrex	r2, [r3]
   1fa14:	e843 0100 	strex	r1, r0, [r3]
   1fa18:	2900      	cmp	r1, #0
   1fa1a:	d1f9      	bne.n	1fa10 <dk_buttons_init+0x1a4>
   1fa1c:	f3bf 8f5b 	dmb	ish
	return 0;
   1fa20:	2600      	movs	r6, #0
}
   1fa22:	4630      	mov	r0, r6
   1fa24:	b014      	add	sp, #80	; 0x50
   1fa26:	bd70      	pop	{r4, r5, r6, pc}
   1fa28:	20003a58 	.word	0x20003a58
   1fa2c:	20003a2c 	.word	0x20003a2c
   1fa30:	00031400 	.word	0x00031400
   1fa34:	00031340 	.word	0x00031340
   1fa38:	0002eef0 	.word	0x0002eef0
   1fa3c:	00031360 	.word	0x00031360
   1fa40:	20003a48 	.word	0x20003a48
   1fa44:	0001f669 	.word	0x0001f669
   1fa48:	0003137c 	.word	0x0003137c
   1fa4c:	20002390 	.word	0x20002390
   1fa50:	0001f755 	.word	0x0001f755
   1fa54:	20004b6f 	.word	0x20004b6f
   1fa58:	20003a54 	.word	0x20003a54

0001fa5c <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
   1fa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa5e:	b089      	sub	sp, #36	; 0x24
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1fa60:	280f      	cmp	r0, #15
   1fa62:	d849      	bhi.n	1faf8 <dk_set_leds_state+0x9c>
   1fa64:	4605      	mov	r5, r0
   1fa66:	460e      	mov	r6, r1
   1fa68:	290f      	cmp	r1, #15
   1fa6a:	d848      	bhi.n	1fafe <dk_set_leds_state+0xa2>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1fa6c:	2400      	movs	r4, #0
   1fa6e:	e00b      	b.n	1fa88 <dk_set_leds_state+0x2c>
		int val, err;

		if (BIT(i) & leds_on_mask) {
			val = 1;
   1fa70:	2201      	movs	r2, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1fa72:	4b24      	ldr	r3, [pc, #144]	; (1fb04 <dk_set_leds_state+0xa8>)
   1fa74:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   1fa78:	7909      	ldrb	r1, [r1, #4]
   1fa7a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1fa7e:	f00c feca 	bl	2c816 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1fa82:	4607      	mov	r7, r0
   1fa84:	b970      	cbnz	r0, 1faa4 <dk_set_leds_state+0x48>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1fa86:	3401      	adds	r4, #1
   1fa88:	2c03      	cmp	r4, #3
   1fa8a:	d831      	bhi.n	1faf0 <dk_set_leds_state+0x94>
		if (BIT(i) & leds_on_mask) {
   1fa8c:	fa25 f304 	lsr.w	r3, r5, r4
   1fa90:	f013 0f01 	tst.w	r3, #1
   1fa94:	d1ec      	bne.n	1fa70 <dk_set_leds_state+0x14>
		} else if (BIT(i) & leds_off_mask) {
   1fa96:	fa26 f304 	lsr.w	r3, r6, r4
   1fa9a:	f013 0f01 	tst.w	r3, #1
   1fa9e:	d0f2      	beq.n	1fa86 <dk_set_leds_state+0x2a>
			val = 0;
   1faa0:	2200      	movs	r2, #0
   1faa2:	e7e6      	b.n	1fa72 <dk_set_leds_state+0x16>
			LOG_ERR("Cannot write LED gpio");
   1faa4:	4b18      	ldr	r3, [pc, #96]	; (1fb08 <dk_set_leds_state+0xac>)
   1faa6:	9307      	str	r3, [sp, #28]
   1faa8:	2302      	movs	r3, #2
   1faaa:	f88d 3004 	strb.w	r3, [sp, #4]
   1faae:	2300      	movs	r3, #0
   1fab0:	f88d 3005 	strb.w	r3, [sp, #5]
   1fab4:	f88d 3006 	strb.w	r3, [sp, #6]
   1fab8:	f88d 3007 	strb.w	r3, [sp, #7]
   1fabc:	9a01      	ldr	r2, [sp, #4]
   1fabe:	9206      	str	r2, [sp, #24]
   1fac0:	4619      	mov	r1, r3
   1fac2:	f363 0100 	bfi	r1, r3, #0, #1
   1fac6:	f363 0141 	bfi	r1, r3, #1, #1
   1faca:	f363 0182 	bfi	r1, r3, #2, #1
   1face:	f363 01c5 	bfi	r1, r3, #3, #3
   1fad2:	2201      	movs	r2, #1
   1fad4:	f362 1188 	bfi	r1, r2, #6, #3
   1fad8:	2208      	movs	r2, #8
   1fada:	f362 2152 	bfi	r1, r2, #9, #10
   1fade:	f363 41de 	bfi	r1, r3, #19, #12
   1fae2:	f363 71df 	bfi	r1, r3, #31, #1
   1fae6:	aa06      	add	r2, sp, #24
   1fae8:	4808      	ldr	r0, [pc, #32]	; (1fb0c <dk_set_leds_state+0xb0>)
   1faea:	f009 f96a 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return err;
   1faee:	e000      	b.n	1faf2 <dk_set_leds_state+0x96>
		}
	}

	return 0;
   1faf0:	2700      	movs	r7, #0
}
   1faf2:	4638      	mov	r0, r7
   1faf4:	b009      	add	sp, #36	; 0x24
   1faf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   1faf8:	f06f 0715 	mvn.w	r7, #21
   1fafc:	e7f9      	b.n	1faf2 <dk_set_leds_state+0x96>
   1fafe:	f06f 0715 	mvn.w	r7, #21
   1fb02:	e7f6      	b.n	1faf2 <dk_set_leds_state+0x96>
   1fb04:	000313e0 	.word	0x000313e0
   1fb08:	00031390 	.word	0x00031390
   1fb0c:	0002eef0 	.word	0x0002eef0

0001fb10 <dk_leds_init>:
{
   1fb10:	b530      	push	{r4, r5, lr}
   1fb12:	b089      	sub	sp, #36	; 0x24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1fb14:	2400      	movs	r4, #0
   1fb16:	2c03      	cmp	r4, #3
   1fb18:	d830      	bhi.n	1fb7c <dk_leds_init+0x6c>
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1fb1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1fb1e:	481b      	ldr	r0, [pc, #108]	; (1fb8c <dk_leds_init+0x7c>)
   1fb20:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1fb24:	f00c fe40 	bl	2c7a8 <gpio_pin_configure_dt>
		if (err) {
   1fb28:	4605      	mov	r5, r0
   1fb2a:	b908      	cbnz	r0, 1fb30 <dk_leds_init+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1fb2c:	3401      	adds	r4, #1
   1fb2e:	e7f2      	b.n	1fb16 <dk_leds_init+0x6>
			LOG_ERR("Cannot configure LED gpio");
   1fb30:	4b17      	ldr	r3, [pc, #92]	; (1fb90 <dk_leds_init+0x80>)
   1fb32:	9307      	str	r3, [sp, #28]
   1fb34:	2302      	movs	r3, #2
   1fb36:	f88d 3004 	strb.w	r3, [sp, #4]
   1fb3a:	2300      	movs	r3, #0
   1fb3c:	f88d 3005 	strb.w	r3, [sp, #5]
   1fb40:	f88d 3006 	strb.w	r3, [sp, #6]
   1fb44:	f88d 3007 	strb.w	r3, [sp, #7]
   1fb48:	9a01      	ldr	r2, [sp, #4]
   1fb4a:	9206      	str	r2, [sp, #24]
   1fb4c:	4619      	mov	r1, r3
   1fb4e:	f363 0100 	bfi	r1, r3, #0, #1
   1fb52:	f363 0141 	bfi	r1, r3, #1, #1
   1fb56:	f363 0182 	bfi	r1, r3, #2, #1
   1fb5a:	f363 01c5 	bfi	r1, r3, #3, #3
   1fb5e:	2201      	movs	r2, #1
   1fb60:	f362 1188 	bfi	r1, r2, #6, #3
   1fb64:	2208      	movs	r2, #8
   1fb66:	f362 2152 	bfi	r1, r2, #9, #10
   1fb6a:	f363 41de 	bfi	r1, r3, #19, #12
   1fb6e:	f363 71df 	bfi	r1, r3, #31, #1
   1fb72:	aa06      	add	r2, sp, #24
   1fb74:	4807      	ldr	r0, [pc, #28]	; (1fb94 <dk_leds_init+0x84>)
   1fb76:	f009 f924 	bl	28dc2 <z_impl_z_log_msg_static_create>
			return err;
   1fb7a:	e004      	b.n	1fb86 <dk_leds_init+0x76>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   1fb7c:	210f      	movs	r1, #15
   1fb7e:	2000      	movs	r0, #0
   1fb80:	f7ff ff6c 	bl	1fa5c <dk_set_leds_state>
   1fb84:	4605      	mov	r5, r0
}
   1fb86:	4628      	mov	r0, r5
   1fb88:	b009      	add	sp, #36	; 0x24
   1fb8a:	bd30      	pop	{r4, r5, pc}
   1fb8c:	000313e0 	.word	0x000313e0
   1fb90:	000313a8 	.word	0x000313a8
   1fb94:	0002eef0 	.word	0x0002eef0

0001fb98 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1fb98:	b510      	push	{r4, lr}
   1fb9a:	b08e      	sub	sp, #56	; 0x38
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1fb9c:	2803      	cmp	r0, #3
   1fb9e:	d80d      	bhi.n	1fbbc <dk_set_led+0x24>
   1fba0:	460a      	mov	r2, r1
   1fba2:	4b2d      	ldr	r3, [pc, #180]	; (1fc58 <dk_set_led+0xc0>)
   1fba4:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1fba8:	7909      	ldrb	r1, [r1, #4]
   1fbaa:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1fbae:	f00c fe32 	bl	2c816 <gpio_pin_set>
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
   1fbb2:	4604      	mov	r4, r0
   1fbb4:	bb50      	cbnz	r0, 1fc0c <dk_set_led+0x74>
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1fbb6:	4620      	mov	r0, r4
   1fbb8:	b00e      	add	sp, #56	; 0x38
   1fbba:	bd10      	pop	{r4, pc}
		LOG_ERR("LED index out of the range");
   1fbbc:	4b27      	ldr	r3, [pc, #156]	; (1fc5c <dk_set_led+0xc4>)
   1fbbe:	930d      	str	r3, [sp, #52]	; 0x34
   1fbc0:	2302      	movs	r3, #2
   1fbc2:	f88d 3004 	strb.w	r3, [sp, #4]
   1fbc6:	2300      	movs	r3, #0
   1fbc8:	f88d 3005 	strb.w	r3, [sp, #5]
   1fbcc:	f88d 3006 	strb.w	r3, [sp, #6]
   1fbd0:	f88d 3007 	strb.w	r3, [sp, #7]
   1fbd4:	9a01      	ldr	r2, [sp, #4]
   1fbd6:	920c      	str	r2, [sp, #48]	; 0x30
   1fbd8:	4619      	mov	r1, r3
   1fbda:	f363 0100 	bfi	r1, r3, #0, #1
   1fbde:	f363 0141 	bfi	r1, r3, #1, #1
   1fbe2:	f363 0182 	bfi	r1, r3, #2, #1
   1fbe6:	f363 01c5 	bfi	r1, r3, #3, #3
   1fbea:	2201      	movs	r2, #1
   1fbec:	f362 1188 	bfi	r1, r2, #6, #3
   1fbf0:	2208      	movs	r2, #8
   1fbf2:	f362 2152 	bfi	r1, r2, #9, #10
   1fbf6:	f363 41de 	bfi	r1, r3, #19, #12
   1fbfa:	f363 71df 	bfi	r1, r3, #31, #1
   1fbfe:	aa0c      	add	r2, sp, #48	; 0x30
   1fc00:	4817      	ldr	r0, [pc, #92]	; (1fc60 <dk_set_led+0xc8>)
   1fc02:	f009 f8de 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1fc06:	f06f 0415 	mvn.w	r4, #21
   1fc0a:	e7d4      	b.n	1fbb6 <dk_set_led+0x1e>
		LOG_ERR("Cannot write LED gpio");
   1fc0c:	4b15      	ldr	r3, [pc, #84]	; (1fc64 <dk_set_led+0xcc>)
   1fc0e:	9307      	str	r3, [sp, #28]
   1fc10:	2302      	movs	r3, #2
   1fc12:	f88d 3004 	strb.w	r3, [sp, #4]
   1fc16:	2300      	movs	r3, #0
   1fc18:	f88d 3005 	strb.w	r3, [sp, #5]
   1fc1c:	f88d 3006 	strb.w	r3, [sp, #6]
   1fc20:	f88d 3007 	strb.w	r3, [sp, #7]
   1fc24:	9a01      	ldr	r2, [sp, #4]
   1fc26:	9206      	str	r2, [sp, #24]
   1fc28:	4619      	mov	r1, r3
   1fc2a:	f363 0100 	bfi	r1, r3, #0, #1
   1fc2e:	f363 0141 	bfi	r1, r3, #1, #1
   1fc32:	f363 0182 	bfi	r1, r3, #2, #1
   1fc36:	f363 01c5 	bfi	r1, r3, #3, #3
   1fc3a:	2201      	movs	r2, #1
   1fc3c:	f362 1188 	bfi	r1, r2, #6, #3
   1fc40:	2208      	movs	r2, #8
   1fc42:	f362 2152 	bfi	r1, r2, #9, #10
   1fc46:	f363 41de 	bfi	r1, r3, #19, #12
   1fc4a:	f363 71df 	bfi	r1, r3, #31, #1
   1fc4e:	aa06      	add	r2, sp, #24
   1fc50:	4803      	ldr	r0, [pc, #12]	; (1fc60 <dk_set_led+0xc8>)
   1fc52:	f009 f8b6 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1fc56:	e7ae      	b.n	1fbb6 <dk_set_led+0x1e>
   1fc58:	000313e0 	.word	0x000313e0
   1fc5c:	000313c4 	.word	0x000313c4
   1fc60:	0002eef0 	.word	0x0002eef0
   1fc64:	00031390 	.word	0x00031390

0001fc68 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1fc68:	b508      	push	{r3, lr}
   1fc6a:	4602      	mov	r2, r0
   1fc6c:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1fc6e:	4802      	ldr	r0, [pc, #8]	; (1fc78 <multithreading_lock_acquire+0x10>)
   1fc70:	f002 fa0a 	bl	22088 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1fc74:	bd08      	pop	{r3, pc}
   1fc76:	bf00      	nop
   1fc78:	20000bb8 	.word	0x20000bb8

0001fc7c <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1fc7c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1fc7e:	4802      	ldr	r0, [pc, #8]	; (1fc88 <multithreading_lock_release+0xc>)
   1fc80:	f002 fa86 	bl	22190 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1fc84:	bd08      	pop	{r3, pc}
   1fc86:	bf00      	nop
   1fc88:	20000bb8 	.word	0x20000bb8

0001fc8c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1fc8c:	b510      	push	{r4, lr}
   1fc8e:	b088      	sub	sp, #32
	z_impl_log_panic();
   1fc90:	f7f4 f95e 	bl	13f50 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1fc94:	4b14      	ldr	r3, [pc, #80]	; (1fce8 <k_sys_fatal_error_handler+0x5c>)
   1fc96:	9307      	str	r3, [sp, #28]
   1fc98:	2302      	movs	r3, #2
   1fc9a:	f88d 3004 	strb.w	r3, [sp, #4]
   1fc9e:	2400      	movs	r4, #0
   1fca0:	f88d 4005 	strb.w	r4, [sp, #5]
   1fca4:	f88d 4006 	strb.w	r4, [sp, #6]
   1fca8:	f88d 4007 	strb.w	r4, [sp, #7]
   1fcac:	9b01      	ldr	r3, [sp, #4]
   1fcae:	9306      	str	r3, [sp, #24]
   1fcb0:	4621      	mov	r1, r4
   1fcb2:	f364 0100 	bfi	r1, r4, #0, #1
   1fcb6:	f364 0141 	bfi	r1, r4, #1, #1
   1fcba:	f364 0182 	bfi	r1, r4, #2, #1
   1fcbe:	f364 01c5 	bfi	r1, r4, #3, #3
   1fcc2:	2301      	movs	r3, #1
   1fcc4:	f363 1188 	bfi	r1, r3, #6, #3
   1fcc8:	2308      	movs	r3, #8
   1fcca:	f363 2152 	bfi	r1, r3, #9, #10
   1fcce:	f364 41de 	bfi	r1, r4, #19, #12
   1fcd2:	f364 71df 	bfi	r1, r4, #31, #1
   1fcd6:	4623      	mov	r3, r4
   1fcd8:	aa06      	add	r2, sp, #24
   1fcda:	4804      	ldr	r0, [pc, #16]	; (1fcec <k_sys_fatal_error_handler+0x60>)
   1fcdc:	f009 f871 	bl	28dc2 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1fce0:	4620      	mov	r0, r4
   1fce2:	f009 fceb 	bl	296bc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1fce6:	bf00      	nop
   1fce8:	00031434 	.word	0x00031434
   1fcec:	0002eef8 	.word	0x0002eef8

0001fcf0 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1fcf0:	b510      	push	{r4, lr}
   1fcf2:	4603      	mov	r3, r0
   1fcf4:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1fcf6:	4803      	ldr	r0, [pc, #12]	; (1fd04 <rand_prio_low_vector_get_blocking+0x14>)
   1fcf8:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1fcfa:	680c      	ldr	r4, [r1, #0]
   1fcfc:	4619      	mov	r1, r3
   1fcfe:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1fd00:	bd10      	pop	{r4, pc}
   1fd02:	bf00      	nop
   1fd04:	0002ebfc 	.word	0x0002ebfc

0001fd08 <sdc_assertion_handler>:
{
   1fd08:	b590      	push	{r4, r7, lr}
   1fd0a:	b083      	sub	sp, #12
   1fd0c:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1fd0e:	466c      	mov	r4, sp
   1fd10:	2300      	movs	r3, #0
   1fd12:	713b      	strb	r3, [r7, #4]
   1fd14:	2302      	movs	r3, #2
   1fd16:	717b      	strb	r3, [r7, #5]
   1fd18:	b08a      	sub	sp, #40	; 0x28
   1fd1a:	46ec      	mov	ip, sp
   1fd1c:	f11c 0210 	adds.w	r2, ip, #16
   1fd20:	d01b      	beq.n	1fd5a <sdc_assertion_handler+0x52>
   1fd22:	f04f 0e12 	mov.w	lr, #18
   1fd26:	b12a      	cbz	r2, 1fd34 <sdc_assertion_handler+0x2c>
   1fd28:	f1be 0f04 	cmp.w	lr, #4
   1fd2c:	dd02      	ble.n	1fd34 <sdc_assertion_handler+0x2c>
   1fd2e:	4b2b      	ldr	r3, [pc, #172]	; (1fddc <sdc_assertion_handler+0xd4>)
   1fd30:	f8cc 3014 	str.w	r3, [ip, #20]
   1fd34:	2300      	movs	r3, #0
   1fd36:	703b      	strb	r3, [r7, #0]
   1fd38:	2302      	movs	r3, #2
   1fd3a:	707b      	strb	r3, [r7, #1]
   1fd3c:	b1d2      	cbz	r2, 1fd74 <sdc_assertion_handler+0x6c>
   1fd3e:	4673      	mov	r3, lr
   1fd40:	f1be 0f08 	cmp.w	lr, #8
   1fd44:	dd01      	ble.n	1fd4a <sdc_assertion_handler+0x42>
   1fd46:	f8cc 0018 	str.w	r0, [ip, #24]
   1fd4a:	2b0c      	cmp	r3, #12
   1fd4c:	dd01      	ble.n	1fd52 <sdc_assertion_handler+0x4a>
   1fd4e:	f8cc 101c 	str.w	r1, [ip, #28]
   1fd52:	f10c 0320 	add.w	r3, ip, #32
   1fd56:	2100      	movs	r1, #0
   1fd58:	e00a      	b.n	1fd70 <sdc_assertion_handler+0x68>
   1fd5a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   1fd5e:	e7e2      	b.n	1fd26 <sdc_assertion_handler+0x1e>
   1fd60:	f101 0008 	add.w	r0, r1, #8
   1fd64:	4438      	add	r0, r7
   1fd66:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1fd6a:	f803 0b01 	strb.w	r0, [r3], #1
   1fd6e:	3101      	adds	r1, #1
   1fd70:	2901      	cmp	r1, #1
   1fd72:	d9f5      	bls.n	1fd60 <sdc_assertion_handler+0x58>
   1fd74:	f1be 0f11 	cmp.w	lr, #17
   1fd78:	dd2d      	ble.n	1fdd6 <sdc_assertion_handler+0xce>
   1fd7a:	2312      	movs	r3, #18
   1fd7c:	b14a      	cbz	r2, 1fd92 <sdc_assertion_handler+0x8a>
   1fd7e:	2104      	movs	r1, #4
   1fd80:	7139      	strb	r1, [r7, #4]
   1fd82:	2100      	movs	r1, #0
   1fd84:	7179      	strb	r1, [r7, #5]
   1fd86:	71b9      	strb	r1, [r7, #6]
   1fd88:	2101      	movs	r1, #1
   1fd8a:	71f9      	strb	r1, [r7, #7]
   1fd8c:	6878      	ldr	r0, [r7, #4]
   1fd8e:	f8cc 0010 	str.w	r0, [ip, #16]
   1fd92:	2100      	movs	r1, #0
   1fd94:	f36f 0100 	bfc	r1, #0, #1
   1fd98:	f36f 0141 	bfc	r1, #1, #1
   1fd9c:	f36f 0182 	bfc	r1, #2, #1
   1fda0:	f36f 01c5 	bfc	r1, #3, #3
   1fda4:	2001      	movs	r0, #1
   1fda6:	f360 1188 	bfi	r1, r0, #6, #3
   1fdaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1fdae:	f363 2152 	bfi	r1, r3, #9, #10
   1fdb2:	f36f 41de 	bfc	r1, #19, #12
   1fdb6:	f36f 71df 	bfc	r1, #31, #1
   1fdba:	2300      	movs	r3, #0
   1fdbc:	4808      	ldr	r0, [pc, #32]	; (1fde0 <sdc_assertion_handler+0xd8>)
   1fdbe:	f009 f800 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1fdc2:	46a5      	mov	sp, r4
	k_oops();
   1fdc4:	4040      	eors	r0, r0
   1fdc6:	f380 8811 	msr	BASEPRI, r0
   1fdca:	f04f 0003 	mov.w	r0, #3
   1fdce:	df02      	svc	2
}
   1fdd0:	370c      	adds	r7, #12
   1fdd2:	46bd      	mov	sp, r7
   1fdd4:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1fdd6:	f06f 031b 	mvn.w	r3, #27
   1fdda:	e7cf      	b.n	1fd7c <sdc_assertion_handler+0x74>
   1fddc:	00031454 	.word	0x00031454
   1fde0:	0002eec8 	.word	0x0002eec8

0001fde4 <event_packet_process>:
{
   1fde4:	b570      	push	{r4, r5, r6, lr}
   1fde6:	b088      	sub	sp, #32
   1fde8:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1fdea:	f00c fd35 	bl	2c858 <event_packet_is_discardable>
   1fdee:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1fdf0:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1fdf2:	461d      	mov	r5, r3
   1fdf4:	b18b      	cbz	r3, 1fe1a <event_packet_process+0x36>
   1fdf6:	2200      	movs	r2, #0
   1fdf8:	2300      	movs	r3, #0
   1fdfa:	4629      	mov	r1, r5
   1fdfc:	f7f6 ff88 	bl	16d10 <bt_buf_get_evt>
	if (!evt_buf) {
   1fe00:	4606      	mov	r6, r0
   1fe02:	b178      	cbz	r0, 1fe24 <event_packet_process+0x40>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1fe04:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1fe06:	3202      	adds	r2, #2
   1fe08:	4621      	mov	r1, r4
   1fe0a:	300c      	adds	r0, #12
   1fe0c:	f00b ffce 	bl	2bdac <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1fe10:	4630      	mov	r0, r6
   1fe12:	f7f9 f9d1 	bl	191b8 <bt_recv>
}
   1fe16:	b008      	add	sp, #32
   1fe18:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1fe1a:	f04f 32ff 	mov.w	r2, #4294967295
   1fe1e:	f04f 33ff 	mov.w	r3, #4294967295
   1fe22:	e7ea      	b.n	1fdfa <event_packet_process+0x16>
		if (discardable) {
   1fe24:	2d00      	cmp	r5, #0
   1fe26:	d1f6      	bne.n	1fe16 <event_packet_process+0x32>
		LOG_ERR("No event buffer available");
   1fe28:	4b12      	ldr	r3, [pc, #72]	; (1fe74 <event_packet_process+0x90>)
   1fe2a:	9307      	str	r3, [sp, #28]
   1fe2c:	2302      	movs	r3, #2
   1fe2e:	f88d 3004 	strb.w	r3, [sp, #4]
   1fe32:	2300      	movs	r3, #0
   1fe34:	f88d 3005 	strb.w	r3, [sp, #5]
   1fe38:	f88d 3006 	strb.w	r3, [sp, #6]
   1fe3c:	f88d 3007 	strb.w	r3, [sp, #7]
   1fe40:	9a01      	ldr	r2, [sp, #4]
   1fe42:	9206      	str	r2, [sp, #24]
   1fe44:	4619      	mov	r1, r3
   1fe46:	f363 0100 	bfi	r1, r3, #0, #1
   1fe4a:	f363 0141 	bfi	r1, r3, #1, #1
   1fe4e:	f363 0182 	bfi	r1, r3, #2, #1
   1fe52:	f363 01c5 	bfi	r1, r3, #3, #3
   1fe56:	2201      	movs	r2, #1
   1fe58:	f362 1188 	bfi	r1, r2, #6, #3
   1fe5c:	2208      	movs	r2, #8
   1fe5e:	f362 2152 	bfi	r1, r2, #9, #10
   1fe62:	f363 41de 	bfi	r1, r3, #19, #12
   1fe66:	f363 71df 	bfi	r1, r3, #31, #1
   1fe6a:	aa06      	add	r2, sp, #24
   1fe6c:	4802      	ldr	r0, [pc, #8]	; (1fe78 <event_packet_process+0x94>)
   1fe6e:	f008 ffa8 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return;
   1fe72:	e7d0      	b.n	1fe16 <event_packet_process+0x32>
   1fe74:	0003147c 	.word	0x0003147c
   1fe78:	0002eec8 	.word	0x0002eec8

0001fe7c <data_packet_process>:
{
   1fe7c:	b530      	push	{r4, r5, lr}
   1fe7e:	b089      	sub	sp, #36	; 0x24
   1fe80:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1fe82:	f04f 32ff 	mov.w	r2, #4294967295
   1fe86:	f04f 33ff 	mov.w	r3, #4294967295
   1fe8a:	2003      	movs	r0, #3
   1fe8c:	f7f6 ff16 	bl	16cbc <bt_buf_get_rx>
	if (!data_buf) {
   1fe90:	b158      	cbz	r0, 1feaa <data_packet_process+0x2e>
   1fe92:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1fe94:	8862      	ldrh	r2, [r4, #2]
   1fe96:	3204      	adds	r2, #4
   1fe98:	4621      	mov	r1, r4
   1fe9a:	300c      	adds	r0, #12
   1fe9c:	f00b ff86 	bl	2bdac <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1fea0:	4628      	mov	r0, r5
   1fea2:	f7f9 f989 	bl	191b8 <bt_recv>
}
   1fea6:	b009      	add	sp, #36	; 0x24
   1fea8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No data buffer available");
   1feaa:	4b13      	ldr	r3, [pc, #76]	; (1fef8 <data_packet_process+0x7c>)
   1feac:	9307      	str	r3, [sp, #28]
   1feae:	2302      	movs	r3, #2
   1feb0:	f88d 3004 	strb.w	r3, [sp, #4]
   1feb4:	2300      	movs	r3, #0
   1feb6:	f88d 3005 	strb.w	r3, [sp, #5]
   1feba:	f88d 3006 	strb.w	r3, [sp, #6]
   1febe:	f88d 3007 	strb.w	r3, [sp, #7]
   1fec2:	9a01      	ldr	r2, [sp, #4]
   1fec4:	9206      	str	r2, [sp, #24]
   1fec6:	4619      	mov	r1, r3
   1fec8:	f363 0100 	bfi	r1, r3, #0, #1
   1fecc:	f363 0141 	bfi	r1, r3, #1, #1
   1fed0:	f363 0182 	bfi	r1, r3, #2, #1
   1fed4:	f363 01c5 	bfi	r1, r3, #3, #3
   1fed8:	2201      	movs	r2, #1
   1feda:	f362 1188 	bfi	r1, r2, #6, #3
   1fede:	2208      	movs	r2, #8
   1fee0:	f362 2152 	bfi	r1, r2, #9, #10
   1fee4:	f363 41de 	bfi	r1, r3, #19, #12
   1fee8:	f363 71df 	bfi	r1, r3, #31, #1
   1feec:	aa06      	add	r2, sp, #24
   1feee:	4803      	ldr	r0, [pc, #12]	; (1fefc <data_packet_process+0x80>)
   1fef0:	f008 ff67 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return;
   1fef4:	e7d7      	b.n	1fea6 <data_packet_process+0x2a>
   1fef6:	bf00      	nop
   1fef8:	00031498 	.word	0x00031498
   1fefc:	0002eec8 	.word	0x0002eec8

0001ff00 <fetch_and_process_hci_msg>:
{
   1ff00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff02:	b083      	sub	sp, #12
   1ff04:	af00      	add	r7, sp, #0
   1ff06:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ff08:	f04f 30ff 	mov.w	r0, #4294967295
   1ff0c:	f04f 31ff 	mov.w	r1, #4294967295
   1ff10:	f7ff feaa 	bl	1fc68 <multithreading_lock_acquire>
	if (!errcode) {
   1ff14:	b118      	cbz	r0, 1ff1e <fetch_and_process_hci_msg+0x1e>
		return false;
   1ff16:	2000      	movs	r0, #0
}
   1ff18:	370c      	adds	r7, #12
   1ff1a:	46bd      	mov	sp, r7
   1ff1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1ff1e:	1df9      	adds	r1, r7, #7
   1ff20:	4620      	mov	r0, r4
   1ff22:	f000 fb69 	bl	205f8 <hci_internal_msg_get>
   1ff26:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1ff28:	f7ff fea8 	bl	1fc7c <multithreading_lock_release>
	if (errcode) {
   1ff2c:	2d00      	cmp	r5, #0
   1ff2e:	d1f2      	bne.n	1ff16 <fetch_and_process_hci_msg+0x16>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1ff30:	79fb      	ldrb	r3, [r7, #7]
   1ff32:	2b04      	cmp	r3, #4
   1ff34:	d038      	beq.n	1ffa8 <fetch_and_process_hci_msg+0xa8>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1ff36:	2b02      	cmp	r3, #2
   1ff38:	d03b      	beq.n	1ffb2 <fetch_and_process_hci_msg+0xb2>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1ff3a:	466d      	mov	r5, sp
   1ff3c:	b088      	sub	sp, #32
   1ff3e:	4669      	mov	r1, sp
   1ff40:	f111 0210 	adds.w	r2, r1, #16
   1ff44:	d03a      	beq.n	1ffbc <fetch_and_process_hci_msg+0xbc>
   1ff46:	200c      	movs	r0, #12
   1ff48:	b13a      	cbz	r2, 1ff5a <fetch_and_process_hci_msg+0x5a>
   1ff4a:	4604      	mov	r4, r0
   1ff4c:	2804      	cmp	r0, #4
   1ff4e:	dd01      	ble.n	1ff54 <fetch_and_process_hci_msg+0x54>
   1ff50:	4e1d      	ldr	r6, [pc, #116]	; (1ffc8 <fetch_and_process_hci_msg+0xc8>)
   1ff52:	614e      	str	r6, [r1, #20]
   1ff54:	2c08      	cmp	r4, #8
   1ff56:	dd00      	ble.n	1ff5a <fetch_and_process_hci_msg+0x5a>
   1ff58:	618b      	str	r3, [r1, #24]
   1ff5a:	280b      	cmp	r0, #11
   1ff5c:	dd31      	ble.n	1ffc2 <fetch_and_process_hci_msg+0xc2>
   1ff5e:	230c      	movs	r3, #12
   1ff60:	b13a      	cbz	r2, 1ff72 <fetch_and_process_hci_msg+0x72>
   1ff62:	2003      	movs	r0, #3
   1ff64:	7038      	strb	r0, [r7, #0]
   1ff66:	2000      	movs	r0, #0
   1ff68:	7078      	strb	r0, [r7, #1]
   1ff6a:	70b8      	strb	r0, [r7, #2]
   1ff6c:	70f8      	strb	r0, [r7, #3]
   1ff6e:	6838      	ldr	r0, [r7, #0]
   1ff70:	6108      	str	r0, [r1, #16]
   1ff72:	2100      	movs	r1, #0
   1ff74:	f36f 0100 	bfc	r1, #0, #1
   1ff78:	f36f 0141 	bfc	r1, #1, #1
   1ff7c:	f36f 0182 	bfc	r1, #2, #1
   1ff80:	f36f 01c5 	bfc	r1, #3, #3
   1ff84:	2401      	movs	r4, #1
   1ff86:	f364 1188 	bfi	r1, r4, #6, #3
   1ff8a:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1ff8e:	f363 2152 	bfi	r1, r3, #9, #10
   1ff92:	f36f 41de 	bfc	r1, #19, #12
   1ff96:	f36f 71df 	bfc	r1, #31, #1
   1ff9a:	2300      	movs	r3, #0
   1ff9c:	480b      	ldr	r0, [pc, #44]	; (1ffcc <fetch_and_process_hci_msg+0xcc>)
   1ff9e:	f008 ff10 	bl	28dc2 <z_impl_z_log_msg_static_create>
   1ffa2:	46ad      	mov	sp, r5
	return true;
   1ffa4:	4620      	mov	r0, r4
   1ffa6:	e7b7      	b.n	1ff18 <fetch_and_process_hci_msg+0x18>
		event_packet_process(p_hci_buffer);
   1ffa8:	4620      	mov	r0, r4
   1ffaa:	f7ff ff1b 	bl	1fde4 <event_packet_process>
	return true;
   1ffae:	2001      	movs	r0, #1
   1ffb0:	e7b2      	b.n	1ff18 <fetch_and_process_hci_msg+0x18>
		data_packet_process(p_hci_buffer);
   1ffb2:	4620      	mov	r0, r4
   1ffb4:	f7ff ff62 	bl	1fe7c <data_packet_process>
	return true;
   1ffb8:	2001      	movs	r0, #1
   1ffba:	e7ad      	b.n	1ff18 <fetch_and_process_hci_msg+0x18>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1ffbc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ffc0:	e7c2      	b.n	1ff48 <fetch_and_process_hci_msg+0x48>
   1ffc2:	f06f 031b 	mvn.w	r3, #27
   1ffc6:	e7cb      	b.n	1ff60 <fetch_and_process_hci_msg+0x60>
   1ffc8:	000314b4 	.word	0x000314b4
   1ffcc:	0002eec8 	.word	0x0002eec8

0001ffd0 <receive_signal_raise>:
{
   1ffd0:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1ffd2:	4902      	ldr	r1, [pc, #8]	; (1ffdc <receive_signal_raise+0xc>)
   1ffd4:	4802      	ldr	r0, [pc, #8]	; (1ffe0 <receive_signal_raise+0x10>)
   1ffd6:	f00d fc9e 	bl	2d916 <k_work_submit_to_queue>
}
   1ffda:	bd08      	pop	{r3, pc}
   1ffdc:	20003aa4 	.word	0x20003aa4
   1ffe0:	20002c98 	.word	0x20002c98

0001ffe4 <acl_handle>:
{
   1ffe4:	b538      	push	{r3, r4, r5, lr}
   1ffe6:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ffe8:	f04f 30ff 	mov.w	r0, #4294967295
   1ffec:	f04f 31ff 	mov.w	r1, #4294967295
   1fff0:	f7ff fe3a 	bl	1fc68 <multithreading_lock_acquire>
	if (!errcode) {
   1fff4:	4605      	mov	r5, r0
   1fff6:	b108      	cbz	r0, 1fffc <acl_handle+0x18>
}
   1fff8:	4628      	mov	r0, r5
   1fffa:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1fffc:	68e0      	ldr	r0, [r4, #12]
   1fffe:	f7ed f848 	bl	d092 <sdc_hci_data_put>
   20002:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   20004:	f7ff fe3a 	bl	1fc7c <multithreading_lock_release>
		if (errcode) {
   20008:	2d00      	cmp	r5, #0
   2000a:	d0f5      	beq.n	1fff8 <acl_handle+0x14>
   2000c:	4902      	ldr	r1, [pc, #8]	; (20018 <acl_handle+0x34>)
   2000e:	4803      	ldr	r0, [pc, #12]	; (2001c <acl_handle+0x38>)
   20010:	f00d fc81 	bl	2d916 <k_work_submit_to_queue>
}
   20014:	e7f0      	b.n	1fff8 <acl_handle+0x14>
   20016:	bf00      	nop
   20018:	20003aa4 	.word	0x20003aa4
   2001c:	20002c98 	.word	0x20002c98

00020020 <cmd_handle>:
{
   20020:	b538      	push	{r3, r4, r5, lr}
   20022:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20024:	f04f 30ff 	mov.w	r0, #4294967295
   20028:	f04f 31ff 	mov.w	r1, #4294967295
   2002c:	f7ff fe1c 	bl	1fc68 <multithreading_lock_acquire>
	if (!errcode) {
   20030:	4604      	mov	r4, r0
   20032:	b108      	cbz	r0, 20038 <cmd_handle+0x18>
}
   20034:	4620      	mov	r0, r4
   20036:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   20038:	68e8      	ldr	r0, [r5, #12]
   2003a:	f000 fac9 	bl	205d0 <hci_internal_cmd_put>
   2003e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   20040:	f7ff fe1c 	bl	1fc7c <multithreading_lock_release>
	if (errcode) {
   20044:	2c00      	cmp	r4, #0
   20046:	d1f5      	bne.n	20034 <cmd_handle+0x14>
   20048:	4902      	ldr	r1, [pc, #8]	; (20054 <cmd_handle+0x34>)
   2004a:	4803      	ldr	r0, [pc, #12]	; (20058 <cmd_handle+0x38>)
   2004c:	f00d fc63 	bl	2d916 <k_work_submit_to_queue>
	return 0;
   20050:	e7f0      	b.n	20034 <cmd_handle+0x14>
   20052:	bf00      	nop
   20054:	20003aa4 	.word	0x20003aa4
   20058:	20002c98 	.word	0x20002c98

0002005c <rand_prio_high_vector_get>:
{
   2005c:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   2005e:	4b08      	ldr	r3, [pc, #32]	; (20080 <rand_prio_high_vector_get+0x24>)
   20060:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   20062:	685c      	ldr	r4, [r3, #4]
   20064:	b144      	cbz	r4, 20078 <rand_prio_high_vector_get+0x1c>
   20066:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   20068:	2300      	movs	r3, #0
   2006a:	4601      	mov	r1, r0
   2006c:	4804      	ldr	r0, [pc, #16]	; (20080 <rand_prio_high_vector_get+0x24>)
   2006e:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   20070:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   20074:	b2c0      	uxtb	r0, r0
   20076:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   20078:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2007c:	e7f8      	b.n	20070 <rand_prio_high_vector_get+0x14>
   2007e:	bf00      	nop
   20080:	0002ebfc 	.word	0x0002ebfc

00020084 <rand_prio_low_vector_get>:
{
   20084:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   20086:	4b08      	ldr	r3, [pc, #32]	; (200a8 <rand_prio_low_vector_get+0x24>)
   20088:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   2008a:	685c      	ldr	r4, [r3, #4]
   2008c:	b144      	cbz	r4, 200a0 <rand_prio_low_vector_get+0x1c>
   2008e:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   20090:	2300      	movs	r3, #0
   20092:	4601      	mov	r1, r0
   20094:	4804      	ldr	r0, [pc, #16]	; (200a8 <rand_prio_low_vector_get+0x24>)
   20096:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   20098:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   2009c:	b2c0      	uxtb	r0, r0
   2009e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   200a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   200a4:	e7f8      	b.n	20098 <rand_prio_low_vector_get+0x14>
   200a6:	bf00      	nop
   200a8:	0002ebfc 	.word	0x0002ebfc

000200ac <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   200ac:	b5b0      	push	{r4, r5, r7, lr}
   200ae:	b090      	sub	sp, #64	; 0x40
   200b0:	af00      	add	r7, sp, #0
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   200b2:	4978      	ldr	r1, [pc, #480]	; (20294 <hci_driver_open+0x1e8>)
   200b4:	4878      	ldr	r0, [pc, #480]	; (20298 <hci_driver_open+0x1ec>)
   200b6:	f00d fc12 	bl	2d8de <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   200ba:	f000 fc43 	bl	20944 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   200be:	f107 0014 	add.w	r0, r7, #20
   200c2:	f7e1 f897 	bl	11f4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   200c6:	466c      	mov	r4, sp
   200c8:	2300      	movs	r3, #0
   200ca:	713b      	strb	r3, [r7, #4]
   200cc:	2302      	movs	r3, #2
   200ce:	717b      	strb	r3, [r7, #5]
   200d0:	b088      	sub	sp, #32
   200d2:	46ec      	mov	ip, sp
   200d4:	f11c 0210 	adds.w	r2, ip, #16
   200d8:	d014      	beq.n	20104 <hci_driver_open+0x58>
   200da:	200e      	movs	r0, #14
   200dc:	b122      	cbz	r2, 200e8 <hci_driver_open+0x3c>
   200de:	2804      	cmp	r0, #4
   200e0:	dd02      	ble.n	200e8 <hci_driver_open+0x3c>
   200e2:	4b6e      	ldr	r3, [pc, #440]	; (2029c <hci_driver_open+0x1f0>)
   200e4:	f8cc 3014 	str.w	r3, [ip, #20]
   200e8:	2300      	movs	r3, #0
   200ea:	703b      	strb	r3, [r7, #0]
   200ec:	2302      	movs	r3, #2
   200ee:	707b      	strb	r3, [r7, #1]
   200f0:	b1b2      	cbz	r2, 20120 <hci_driver_open+0x74>
   200f2:	2808      	cmp	r0, #8
   200f4:	dd02      	ble.n	200fc <hci_driver_open+0x50>
   200f6:	4b6a      	ldr	r3, [pc, #424]	; (202a0 <hci_driver_open+0x1f4>)
   200f8:	f8cc 3018 	str.w	r3, [ip, #24]
   200fc:	f10c 031c 	add.w	r3, ip, #28
   20100:	2100      	movs	r1, #0
   20102:	e00b      	b.n	2011c <hci_driver_open+0x70>
   20104:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20108:	e7e8      	b.n	200dc <hci_driver_open+0x30>
   2010a:	f101 0540 	add.w	r5, r1, #64	; 0x40
   2010e:	eb05 0e07 	add.w	lr, r5, r7
   20112:	f81e ec40 	ldrb.w	lr, [lr, #-64]
   20116:	f803 eb01 	strb.w	lr, [r3], #1
   2011a:	3101      	adds	r1, #1
   2011c:	2901      	cmp	r1, #1
   2011e:	d9f4      	bls.n	2010a <hci_driver_open+0x5e>
   20120:	280d      	cmp	r0, #13
   20122:	dd41      	ble.n	201a8 <hci_driver_open+0xfc>
   20124:	230e      	movs	r3, #14
   20126:	b14a      	cbz	r2, 2013c <hci_driver_open+0x90>
   20128:	2103      	movs	r1, #3
   2012a:	7139      	strb	r1, [r7, #4]
   2012c:	2100      	movs	r1, #0
   2012e:	7179      	strb	r1, [r7, #5]
   20130:	71b9      	strb	r1, [r7, #6]
   20132:	2101      	movs	r1, #1
   20134:	71f9      	strb	r1, [r7, #7]
   20136:	6878      	ldr	r0, [r7, #4]
   20138:	f8cc 0010 	str.w	r0, [ip, #16]
   2013c:	2100      	movs	r1, #0
   2013e:	f36f 0100 	bfc	r1, #0, #1
   20142:	f36f 0141 	bfc	r1, #1, #1
   20146:	f36f 0182 	bfc	r1, #2, #1
   2014a:	f36f 01c5 	bfc	r1, #3, #3
   2014e:	2003      	movs	r0, #3
   20150:	f360 1188 	bfi	r1, r0, #6, #3
   20154:	f3c3 0309 	ubfx	r3, r3, #0, #10
   20158:	f363 2152 	bfi	r1, r3, #9, #10
   2015c:	2314      	movs	r3, #20
   2015e:	f363 41de 	bfi	r1, r3, #19, #12
   20162:	f36f 71df 	bfc	r1, #31, #1
   20166:	18fb      	adds	r3, r7, r3
   20168:	484e      	ldr	r0, [pc, #312]	; (202a4 <hci_driver_open+0x1f8>)
   2016a:	f008 fe2a 	bl	28dc2 <z_impl_z_log_msg_static_create>
   2016e:	46a5      	mov	sp, r4
   20170:	484d      	ldr	r0, [pc, #308]	; (202a8 <hci_driver_open+0x1fc>)
   20172:	f00d f8be 	bl	2d2f2 <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   20176:	b1d0      	cbz	r0, 201ae <hci_driver_open+0x102>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   20178:	4a4c      	ldr	r2, [pc, #304]	; (202ac <hci_driver_open+0x200>)
   2017a:	f107 0308 	add.w	r3, r7, #8
   2017e:	ca07      	ldmia	r2, {r0, r1, r2}
   20180:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   20184:	4618      	mov	r0, r3
   20186:	f7e1 f9d5 	bl	1534 <sdc_rand_source_register>
	if (err) {
   2018a:	4603      	mov	r3, r0
   2018c:	bba0      	cbnz	r0, 201f8 <hci_driver_open+0x14c>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   2018e:	f04f 30ff 	mov.w	r0, #4294967295
   20192:	f04f 31ff 	mov.w	r1, #4294967295
   20196:	f7ff fd67 	bl	1fc68 <multithreading_lock_acquire>
	if (err) {
   2019a:	4604      	mov	r4, r0
   2019c:	2800      	cmp	r0, #0
   2019e:	d06d      	beq.n	2027c <hci_driver_open+0x1d0>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   201a0:	4620      	mov	r0, r4
   201a2:	3740      	adds	r7, #64	; 0x40
   201a4:	46bd      	mov	sp, r7
   201a6:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   201a8:	f06f 031b 	mvn.w	r3, #27
   201ac:	e7bb      	b.n	20126 <hci_driver_open+0x7a>
		LOG_ERR("Entropy source device not ready");
   201ae:	4b40      	ldr	r3, [pc, #256]	; (202b0 <hci_driver_open+0x204>)
   201b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   201b2:	2302      	movs	r3, #2
   201b4:	713b      	strb	r3, [r7, #4]
   201b6:	2300      	movs	r3, #0
   201b8:	717b      	strb	r3, [r7, #5]
   201ba:	71bb      	strb	r3, [r7, #6]
   201bc:	71fb      	strb	r3, [r7, #7]
   201be:	687a      	ldr	r2, [r7, #4]
   201c0:	63ba      	str	r2, [r7, #56]	; 0x38
   201c2:	4619      	mov	r1, r3
   201c4:	f363 0100 	bfi	r1, r3, #0, #1
   201c8:	f363 0141 	bfi	r1, r3, #1, #1
   201cc:	f363 0182 	bfi	r1, r3, #2, #1
   201d0:	f363 01c5 	bfi	r1, r3, #3, #3
   201d4:	2201      	movs	r2, #1
   201d6:	f362 1188 	bfi	r1, r2, #6, #3
   201da:	2208      	movs	r2, #8
   201dc:	f362 2152 	bfi	r1, r2, #9, #10
   201e0:	f363 41de 	bfi	r1, r3, #19, #12
   201e4:	f363 71df 	bfi	r1, r3, #31, #1
   201e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
   201ec:	482d      	ldr	r0, [pc, #180]	; (202a4 <hci_driver_open+0x1f8>)
   201ee:	f008 fde8 	bl	28dc2 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   201f2:	f06f 0412 	mvn.w	r4, #18
   201f6:	e7d3      	b.n	201a0 <hci_driver_open+0xf4>
		LOG_ERR("Failed to register rand source (%d)", err);
   201f8:	466c      	mov	r4, sp
   201fa:	b088      	sub	sp, #32
   201fc:	4669      	mov	r1, sp
   201fe:	f111 0210 	adds.w	r2, r1, #16
   20202:	d00e      	beq.n	20222 <hci_driver_open+0x176>
   20204:	200c      	movs	r0, #12
   20206:	b142      	cbz	r2, 2021a <hci_driver_open+0x16e>
   20208:	4684      	mov	ip, r0
   2020a:	2804      	cmp	r0, #4
   2020c:	dd01      	ble.n	20212 <hci_driver_open+0x166>
   2020e:	4d29      	ldr	r5, [pc, #164]	; (202b4 <hci_driver_open+0x208>)
   20210:	614d      	str	r5, [r1, #20]
   20212:	f1bc 0f08 	cmp.w	ip, #8
   20216:	dd07      	ble.n	20228 <hci_driver_open+0x17c>
   20218:	618b      	str	r3, [r1, #24]
   2021a:	280b      	cmp	r0, #11
   2021c:	dd2b      	ble.n	20276 <hci_driver_open+0x1ca>
   2021e:	230c      	movs	r3, #12
   20220:	e004      	b.n	2022c <hci_driver_open+0x180>
   20222:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20226:	e7ee      	b.n	20206 <hci_driver_open+0x15a>
   20228:	f06f 031b 	mvn.w	r3, #27
   2022c:	b13a      	cbz	r2, 2023e <hci_driver_open+0x192>
   2022e:	2003      	movs	r0, #3
   20230:	7138      	strb	r0, [r7, #4]
   20232:	2000      	movs	r0, #0
   20234:	7178      	strb	r0, [r7, #5]
   20236:	71b8      	strb	r0, [r7, #6]
   20238:	71f8      	strb	r0, [r7, #7]
   2023a:	6878      	ldr	r0, [r7, #4]
   2023c:	6108      	str	r0, [r1, #16]
   2023e:	2100      	movs	r1, #0
   20240:	f36f 0100 	bfc	r1, #0, #1
   20244:	f36f 0141 	bfc	r1, #1, #1
   20248:	f36f 0182 	bfc	r1, #2, #1
   2024c:	f36f 01c5 	bfc	r1, #3, #3
   20250:	2001      	movs	r0, #1
   20252:	f360 1188 	bfi	r1, r0, #6, #3
   20256:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   2025a:	f363 2152 	bfi	r1, r3, #9, #10
   2025e:	f36f 41de 	bfc	r1, #19, #12
   20262:	f36f 71df 	bfc	r1, #31, #1
   20266:	2300      	movs	r3, #0
   20268:	480e      	ldr	r0, [pc, #56]	; (202a4 <hci_driver_open+0x1f8>)
   2026a:	f008 fdaa 	bl	28dc2 <z_impl_z_log_msg_static_create>
   2026e:	46a5      	mov	sp, r4
		return -EINVAL;
   20270:	f06f 0415 	mvn.w	r4, #21
   20274:	e794      	b.n	201a0 <hci_driver_open+0xf4>
		LOG_ERR("Failed to register rand source (%d)", err);
   20276:	f06f 031b 	mvn.w	r3, #27
   2027a:	e7d7      	b.n	2022c <hci_driver_open+0x180>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   2027c:	490e      	ldr	r1, [pc, #56]	; (202b8 <hci_driver_open+0x20c>)
   2027e:	480f      	ldr	r0, [pc, #60]	; (202bc <hci_driver_open+0x210>)
   20280:	f7e1 f81e 	bl	12c0 <sdc_enable>
	if (err) {
   20284:	4604      	mov	r4, r0
   20286:	b910      	cbnz	r0, 2028e <hci_driver_open+0x1e2>
	MULTITHREADING_LOCK_RELEASE();
   20288:	f7ff fcf8 	bl	1fc7c <multithreading_lock_release>
	return 0;
   2028c:	e788      	b.n	201a0 <hci_driver_open+0xf4>
		MULTITHREADING_LOCK_RELEASE();
   2028e:	f7ff fcf5 	bl	1fc7c <multithreading_lock_release>
		return err;
   20292:	e785      	b.n	201a0 <hci_driver_open+0xf4>
   20294:	0002c927 	.word	0x0002c927
   20298:	20003aa4 	.word	0x20003aa4
   2029c:	0002f530 	.word	0x0002f530
   202a0:	000314f0 	.word	0x000314f0
   202a4:	0002eec8 	.word	0x0002eec8
   202a8:	0002ebfc 	.word	0x0002ebfc
   202ac:	0002f024 	.word	0x0002f024
   202b0:	00031518 	.word	0x00031518
   202b4:	00031538 	.word	0x00031538
   202b8:	200023c0 	.word	0x200023c0
   202bc:	0001ffd1 	.word	0x0001ffd1

000202c0 <configure_memory_usage>:
{
   202c0:	b5b0      	push	{r4, r5, r7, lr}
   202c2:	b082      	sub	sp, #8
   202c4:	af00      	add	r7, sp, #0
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   202c6:	2301      	movs	r3, #1
   202c8:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   202ca:	1d3a      	adds	r2, r7, #4
   202cc:	2102      	movs	r1, #2
   202ce:	2000      	movs	r0, #0
   202d0:	f7e0 ff9e 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   202d4:	2800      	cmp	r0, #0
   202d6:	db2d      	blt.n	20334 <configure_memory_usage+0x74>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   202d8:	231b      	movs	r3, #27
   202da:	717b      	strb	r3, [r7, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   202dc:	713b      	strb	r3, [r7, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   202de:	2302      	movs	r3, #2
   202e0:	71fb      	strb	r3, [r7, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   202e2:	2103      	movs	r1, #3
   202e4:	71b9      	strb	r1, [r7, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   202e6:	1d3a      	adds	r2, r7, #4
   202e8:	2000      	movs	r0, #0
   202ea:	f7e0 ff91 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   202ee:	2800      	cmp	r0, #0
   202f0:	db20      	blt.n	20334 <configure_memory_usage+0x74>
	cfg.event_length.event_length_us =
   202f2:	f641 534c 	movw	r3, #7500	; 0x1d4c
   202f6:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   202f8:	1d3a      	adds	r2, r7, #4
   202fa:	2104      	movs	r1, #4
   202fc:	2000      	movs	r0, #0
   202fe:	f7e0 ff87 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   20302:	2800      	cmp	r0, #0
   20304:	db16      	blt.n	20334 <configure_memory_usage+0x74>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   20306:	2301      	movs	r3, #1
   20308:	713b      	strb	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2030a:	1d3a      	adds	r2, r7, #4
   2030c:	2105      	movs	r1, #5
   2030e:	2000      	movs	r0, #0
   20310:	f7e0 ff7e 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   20314:	2800      	cmp	r0, #0
   20316:	db0d      	blt.n	20334 <configure_memory_usage+0x74>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   20318:	231f      	movs	r3, #31
   2031a:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2031c:	1d3a      	adds	r2, r7, #4
   2031e:	2107      	movs	r1, #7
   20320:	2000      	movs	r0, #0
   20322:	f7e0 ff75 	bl	1210 <sdc_cfg_set>
	if (required_memory < 0) {
   20326:	2800      	cmp	r0, #0
   20328:	db04      	blt.n	20334 <configure_memory_usage+0x74>
	if (required_memory > sizeof(sdc_mempool)) {
   2032a:	f240 73dd 	movw	r3, #2013	; 0x7dd
   2032e:	4298      	cmp	r0, r3
   20330:	d803      	bhi.n	2033a <configure_memory_usage+0x7a>
	return 0;
   20332:	2000      	movs	r0, #0
}
   20334:	3708      	adds	r7, #8
   20336:	46bd      	mov	sp, r7
   20338:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Allocated memory too low: %u < %u",
   2033a:	466c      	mov	r4, sp
   2033c:	b088      	sub	sp, #32
   2033e:	466b      	mov	r3, sp
   20340:	f113 0210 	adds.w	r2, r3, #16
   20344:	d03f      	beq.n	203c6 <configure_memory_usage+0x106>
   20346:	2110      	movs	r1, #16
   20348:	b172      	cbz	r2, 20368 <configure_memory_usage+0xa8>
   2034a:	468c      	mov	ip, r1
   2034c:	2904      	cmp	r1, #4
   2034e:	dd01      	ble.n	20354 <configure_memory_usage+0x94>
   20350:	4d20      	ldr	r5, [pc, #128]	; (203d4 <configure_memory_usage+0x114>)
   20352:	615d      	str	r5, [r3, #20]
   20354:	f1bc 0f08 	cmp.w	ip, #8
   20358:	dd02      	ble.n	20360 <configure_memory_usage+0xa0>
   2035a:	f240 75dd 	movw	r5, #2013	; 0x7dd
   2035e:	619d      	str	r5, [r3, #24]
   20360:	f1bc 0f0c 	cmp.w	ip, #12
   20364:	dd00      	ble.n	20368 <configure_memory_usage+0xa8>
   20366:	61d8      	str	r0, [r3, #28]
   20368:	290f      	cmp	r1, #15
   2036a:	dd2f      	ble.n	203cc <configure_memory_usage+0x10c>
   2036c:	f04f 0c10 	mov.w	ip, #16
   20370:	b13a      	cbz	r2, 20382 <configure_memory_usage+0xc2>
   20372:	2104      	movs	r1, #4
   20374:	7039      	strb	r1, [r7, #0]
   20376:	2100      	movs	r1, #0
   20378:	7079      	strb	r1, [r7, #1]
   2037a:	70b9      	strb	r1, [r7, #2]
   2037c:	70f9      	strb	r1, [r7, #3]
   2037e:	6838      	ldr	r0, [r7, #0]
   20380:	6118      	str	r0, [r3, #16]
   20382:	2100      	movs	r1, #0
   20384:	f36f 0100 	bfc	r1, #0, #1
   20388:	f36f 0141 	bfc	r1, #1, #1
   2038c:	f36f 0182 	bfc	r1, #2, #1
   20390:	f36f 01c5 	bfc	r1, #3, #3
   20394:	2301      	movs	r3, #1
   20396:	f363 1188 	bfi	r1, r3, #6, #3
   2039a:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   2039e:	f36c 2152 	bfi	r1, ip, #9, #10
   203a2:	f36f 41de 	bfc	r1, #19, #12
   203a6:	f36f 71df 	bfc	r1, #31, #1
   203aa:	2300      	movs	r3, #0
   203ac:	480a      	ldr	r0, [pc, #40]	; (203d8 <configure_memory_usage+0x118>)
   203ae:	f008 fd08 	bl	28dc2 <z_impl_z_log_msg_static_create>
   203b2:	46a5      	mov	sp, r4
		k_panic();
   203b4:	4040      	eors	r0, r0
   203b6:	f380 8811 	msr	BASEPRI, r0
   203ba:	f04f 0004 	mov.w	r0, #4
   203be:	df02      	svc	2
		return -ENOMEM;
   203c0:	f06f 000b 	mvn.w	r0, #11
   203c4:	e7b6      	b.n	20334 <configure_memory_usage+0x74>
		LOG_ERR("Allocated memory too low: %u < %u",
   203c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   203ca:	e7bd      	b.n	20348 <configure_memory_usage+0x88>
   203cc:	f06f 0c1b 	mvn.w	ip, #27
   203d0:	e7ce      	b.n	20370 <configure_memory_usage+0xb0>
   203d2:	bf00      	nop
   203d4:	0003155c 	.word	0x0003155c
   203d8:	0002eec8 	.word	0x0002eec8

000203dc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   203dc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   203de:	4806      	ldr	r0, [pc, #24]	; (203f8 <hci_driver_init+0x1c>)
   203e0:	f7f8 ff56 	bl	19290 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   203e4:	4805      	ldr	r0, [pc, #20]	; (203fc <hci_driver_init+0x20>)
   203e6:	f7e0 ff95 	bl	1314 <sdc_init>

	err = configure_supported_features();
   203ea:	f00c fa7c 	bl	2c8e6 <configure_supported_features>
	if (err) {
   203ee:	b100      	cbz	r0, 203f2 <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   203f0:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   203f2:	f7ff ff65 	bl	202c0 <configure_memory_usage>
	if (err) {
   203f6:	e7fb      	b.n	203f0 <hci_driver_init+0x14>
   203f8:	000315ac 	.word	0x000315ac
   203fc:	0001fd09 	.word	0x0001fd09

00020400 <hci_driver_receive_process>:
{
   20400:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   20402:	4805      	ldr	r0, [pc, #20]	; (20418 <hci_driver_receive_process+0x18>)
   20404:	f7ff fd7c 	bl	1ff00 <fetch_and_process_hci_msg>
   20408:	b900      	cbnz	r0, 2040c <hci_driver_receive_process+0xc>
}
   2040a:	bd08      	pop	{r3, pc}
   2040c:	4903      	ldr	r1, [pc, #12]	; (2041c <hci_driver_receive_process+0x1c>)
   2040e:	4804      	ldr	r0, [pc, #16]	; (20420 <hci_driver_receive_process+0x20>)
   20410:	f00d fa81 	bl	2d916 <k_work_submit_to_queue>
   20414:	e7f9      	b.n	2040a <hci_driver_receive_process+0xa>
   20416:	bf00      	nop
   20418:	20003a5c 	.word	0x20003a5c
   2041c:	20003aa4 	.word	0x20003aa4
   20420:	20002c98 	.word	0x20002c98

00020424 <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   20424:	f242 0332 	movw	r3, #8242	; 0x2032
   20428:	4298      	cmp	r0, r3
   2042a:	d04a      	beq.n	204c2 <command_generates_command_complete_event+0x9e>
   2042c:	d82d      	bhi.n	2048a <command_generates_command_complete_event+0x66>
   2042e:	f242 0326 	movw	r3, #8230	; 0x2026
   20432:	4298      	cmp	r0, r3
   20434:	d847      	bhi.n	204c6 <command_generates_command_complete_event+0xa2>
   20436:	f242 030d 	movw	r3, #8205	; 0x200d
   2043a:	4298      	cmp	r0, r3
   2043c:	d218      	bcs.n	20470 <command_generates_command_complete_event+0x4c>
   2043e:	f240 4306 	movw	r3, #1030	; 0x406
   20442:	4298      	cmp	r0, r3
   20444:	d041      	beq.n	204ca <command_generates_command_complete_event+0xa6>
   20446:	f240 431d 	movw	r3, #1053	; 0x41d
   2044a:	4298      	cmp	r0, r3
   2044c:	d001      	beq.n	20452 <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   2044e:	2001      	movs	r0, #1
   20450:	4770      	bx	lr
	switch (hci_opcode) {
   20452:	2000      	movs	r0, #0
   20454:	4770      	bx	lr
   20456:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   2045a:	382d      	subs	r0, #45	; 0x2d
   2045c:	b280      	uxth	r0, r0
   2045e:	4b1e      	ldr	r3, [pc, #120]	; (204d8 <command_generates_command_complete_event+0xb4>)
   20460:	40c3      	lsrs	r3, r0
   20462:	f013 0f01 	tst.w	r3, #1
   20466:	d101      	bne.n	2046c <command_generates_command_complete_event+0x48>
		return true;
   20468:	2001      	movs	r0, #1
   2046a:	4770      	bx	lr
	switch (hci_opcode) {
   2046c:	2000      	movs	r0, #0
   2046e:	4770      	bx	lr
   20470:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   20474:	380d      	subs	r0, #13
   20476:	b280      	uxth	r0, r0
   20478:	4b18      	ldr	r3, [pc, #96]	; (204dc <command_generates_command_complete_event+0xb8>)
   2047a:	40c3      	lsrs	r3, r0
   2047c:	f013 0f01 	tst.w	r3, #1
   20480:	d101      	bne.n	20486 <command_generates_command_complete_event+0x62>
		return true;
   20482:	2001      	movs	r0, #1
   20484:	4770      	bx	lr
	switch (hci_opcode) {
   20486:	2000      	movs	r0, #0
   20488:	4770      	bx	lr
   2048a:	f242 0385 	movw	r3, #8325	; 0x2085
   2048e:	4298      	cmp	r0, r3
   20490:	d80b      	bhi.n	204aa <command_generates_command_complete_event+0x86>
   20492:	f242 036d 	movw	r3, #8301	; 0x206d
   20496:	4298      	cmp	r0, r3
   20498:	d2dd      	bcs.n	20456 <command_generates_command_complete_event+0x32>
   2049a:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   2049e:	3803      	subs	r0, #3
   204a0:	b280      	uxth	r0, r0
   204a2:	2801      	cmp	r0, #1
   204a4:	d913      	bls.n	204ce <command_generates_command_complete_event+0xaa>
		return true;
   204a6:	2001      	movs	r0, #1
   204a8:	4770      	bx	lr
	switch (hci_opcode) {
   204aa:	f64f 5302 	movw	r3, #64770	; 0xfd02
   204ae:	4298      	cmp	r0, r3
   204b0:	d00f      	beq.n	204d2 <command_generates_command_complete_event+0xae>
   204b2:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   204b6:	4298      	cmp	r0, r3
   204b8:	d001      	beq.n	204be <command_generates_command_complete_event+0x9a>
		return true;
   204ba:	2001      	movs	r0, #1
	}
}
   204bc:	4770      	bx	lr
	switch (hci_opcode) {
   204be:	2000      	movs	r0, #0
   204c0:	4770      	bx	lr
   204c2:	2000      	movs	r0, #0
   204c4:	4770      	bx	lr
		return true;
   204c6:	2001      	movs	r0, #1
   204c8:	4770      	bx	lr
	switch (hci_opcode) {
   204ca:	2000      	movs	r0, #0
   204cc:	4770      	bx	lr
   204ce:	2000      	movs	r0, #0
   204d0:	4770      	bx	lr
   204d2:	2000      	movs	r0, #0
   204d4:	4770      	bx	lr
   204d6:	bf00      	nop
   204d8:	01000401 	.word	0x01000401
   204dc:	03001241 	.word	0x03001241

000204e0 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   204e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   204e2:	b083      	sub	sp, #12
   204e4:	4607      	mov	r7, r0
   204e6:	460e      	mov	r6, r1
   204e8:	7843      	ldrb	r3, [r0, #1]
   204ea:	7805      	ldrb	r5, [r0, #0]
   204ec:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   204f0:	2304      	movs	r3, #4
   204f2:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   204f6:	4b35      	ldr	r3, [pc, #212]	; (205cc <cmd_put+0xec>)
   204f8:	681c      	ldr	r4, [r3, #0]
   204fa:	b13c      	cbz	r4, 2050c <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   204fc:	f10d 0307 	add.w	r3, sp, #7
   20500:	f10d 0206 	add.w	r2, sp, #6
   20504:	47a0      	blx	r4
   20506:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   20508:	2801      	cmp	r0, #1
   2050a:	d121      	bne.n	20550 <cmd_put+0x70>

		switch (BT_OGF(opcode)) {
   2050c:	0aab      	lsrs	r3, r5, #10
   2050e:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   20512:	d20b      	bcs.n	2052c <cmd_put+0x4c>
   20514:	b21a      	sxth	r2, r3
   20516:	2a00      	cmp	r2, #0
   20518:	d04b      	beq.n	205b2 <cmd_put+0xd2>
   2051a:	3b01      	subs	r3, #1
   2051c:	2b07      	cmp	r3, #7
   2051e:	d84a      	bhi.n	205b6 <cmd_put+0xd6>
   20520:	e8df f003 	tbb	[pc, r3]
   20524:	2f274922 	.word	0x2f274922
   20528:	3f494937 	.word	0x3f494937
   2052c:	2b3f      	cmp	r3, #63	; 0x3f
   2052e:	d107      	bne.n	20540 <cmd_put+0x60>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   20530:	f10d 0206 	add.w	r2, sp, #6
   20534:	4631      	mov	r1, r6
   20536:	4638      	mov	r0, r7
   20538:	f00c fccb 	bl	2ced2 <vs_cmd_put>
   2053c:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   2053e:	e000      	b.n	20542 <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   20540:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   20542:	4628      	mov	r0, r5
   20544:	f7ff ff6e 	bl	20424 <command_generates_command_complete_event>
   20548:	f080 0001 	eor.w	r0, r0, #1
   2054c:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   20550:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20554:	b90b      	cbnz	r3, 2055a <cmd_put+0x7a>
   20556:	2c01      	cmp	r4, #1
   20558:	d12f      	bne.n	205ba <cmd_put+0xda>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   2055a:	4622      	mov	r2, r4
   2055c:	4629      	mov	r1, r5
   2055e:	4630      	mov	r0, r6
   20560:	f00c f9e5 	bl	2c92e <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   20564:	b003      	add	sp, #12
   20566:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = link_control_cmd_put(cmd_in);
   20568:	4638      	mov	r0, r7
   2056a:	f00c f9fb 	bl	2c964 <link_control_cmd_put>
   2056e:	4604      	mov	r4, r0
			break;
   20570:	e7e7      	b.n	20542 <cmd_put+0x62>
			status = controller_and_baseband_cmd_put(cmd_in,
   20572:	f10d 0206 	add.w	r2, sp, #6
   20576:	4631      	mov	r1, r6
   20578:	4638      	mov	r0, r7
   2057a:	f00c fa0a 	bl	2c992 <controller_and_baseband_cmd_put>
   2057e:	4604      	mov	r4, r0
			break;
   20580:	e7df      	b.n	20542 <cmd_put+0x62>
			status = info_param_cmd_put(cmd_in,
   20582:	f10d 0206 	add.w	r2, sp, #6
   20586:	4631      	mov	r1, r6
   20588:	4638      	mov	r0, r7
   2058a:	f00c fb31 	bl	2cbf0 <info_param_cmd_put>
   2058e:	4604      	mov	r4, r0
			break;
   20590:	e7d7      	b.n	20542 <cmd_put+0x62>
			status = status_param_cmd_put(cmd_in,
   20592:	f10d 0206 	add.w	r2, sp, #6
   20596:	4631      	mov	r1, r6
   20598:	4638      	mov	r0, r7
   2059a:	f00c f9e1 	bl	2c960 <status_param_cmd_put>
   2059e:	4604      	mov	r4, r0
			break;
   205a0:	e7cf      	b.n	20542 <cmd_put+0x62>
			status = le_controller_cmd_put(cmd_in,
   205a2:	f10d 0206 	add.w	r2, sp, #6
   205a6:	4631      	mov	r1, r6
   205a8:	4638      	mov	r0, r7
   205aa:	f00c fba8 	bl	2ccfe <le_controller_cmd_put>
   205ae:	4604      	mov	r4, r0
			break;
   205b0:	e7c7      	b.n	20542 <cmd_put+0x62>
		switch (BT_OGF(opcode)) {
   205b2:	2401      	movs	r4, #1
   205b4:	e7c5      	b.n	20542 <cmd_put+0x62>
   205b6:	2401      	movs	r4, #1
   205b8:	e7c3      	b.n	20542 <cmd_put+0x62>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   205ba:	4623      	mov	r3, r4
   205bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
   205c0:	4629      	mov	r1, r5
   205c2:	4630      	mov	r0, r6
   205c4:	f00c f9bc 	bl	2c940 <encode_command_complete_header>
}
   205c8:	e7cc      	b.n	20564 <cmd_put+0x84>
   205ca:	bf00      	nop
   205cc:	20003ab4 	.word	0x20003ab4

000205d0 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   205d0:	4b07      	ldr	r3, [pc, #28]	; (205f0 <hci_internal_cmd_put+0x20>)
   205d2:	781b      	ldrb	r3, [r3, #0]
   205d4:	b94b      	cbnz	r3, 205ea <hci_internal_cmd_put+0x1a>
{
   205d6:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   205d8:	4c06      	ldr	r4, [pc, #24]	; (205f4 <hci_internal_cmd_put+0x24>)
   205da:	4621      	mov	r1, r4
   205dc:	f7ff ff80 	bl	204e0 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   205e0:	2301      	movs	r3, #1
   205e2:	f804 3c01 	strb.w	r3, [r4, #-1]
	}

	return 0;
   205e6:	2000      	movs	r0, #0
}
   205e8:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   205ea:	f04f 30ff 	mov.w	r0, #4294967295
}
   205ee:	4770      	bx	lr
   205f0:	20003ab8 	.word	0x20003ab8
   205f4:	20003ab9 	.word	0x20003ab9

000205f8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   205f8:	b538      	push	{r3, r4, r5, lr}
   205fa:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   205fc:	4b08      	ldr	r3, [pc, #32]	; (20620 <hci_internal_msg_get+0x28>)
   205fe:	781b      	ldrb	r3, [r3, #0]
   20600:	b153      	cbz	r3, 20618 <hci_internal_msg_get+0x20>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(msg_out,
   20602:	4d07      	ldr	r5, [pc, #28]	; (20620 <hci_internal_msg_get+0x28>)
   20604:	78aa      	ldrb	r2, [r5, #2]
   20606:	3202      	adds	r2, #2
   20608:	1c69      	adds	r1, r5, #1
   2060a:	f00d fe5e 	bl	2e2ca <memcpy>
					 &cmd_complete_or_status.raw_event[0],
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   2060e:	2000      	movs	r0, #0
   20610:	7028      	strb	r0, [r5, #0]

		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   20612:	2304      	movs	r3, #4
   20614:	7023      	strb	r3, [r4, #0]

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   20616:	bd38      	pop	{r3, r4, r5, pc}
	return sdc_hci_get(msg_out, msg_type_out);
   20618:	f7ec fd46 	bl	d0a8 <sdc_hci_get>
   2061c:	e7fb      	b.n	20616 <hci_internal_msg_get+0x1e>
   2061e:	bf00      	nop
   20620:	20003ab8 	.word	0x20003ab8

00020624 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   20624:	b538      	push	{r3, r4, r5, lr}
   20626:	4605      	mov	r5, r0
   20628:	460c      	mov	r4, r1
   2062a:	4809      	ldr	r0, [pc, #36]	; (20650 <bt_rand+0x2c>)
   2062c:	f00c fe61 	bl	2d2f2 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   20630:	f080 0301 	eor.w	r3, r0, #1
   20634:	f013 0fff 	tst.w	r3, #255	; 0xff
   20638:	d106      	bne.n	20648 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   2063a:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   2063c:	4804      	ldr	r0, [pc, #16]	; (20650 <bt_rand+0x2c>)
   2063e:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   20640:	681b      	ldr	r3, [r3, #0]
   20642:	4629      	mov	r1, r5
   20644:	4798      	blx	r3
}
   20646:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   20648:	f06f 0012 	mvn.w	r0, #18
   2064c:	e7fb      	b.n	20646 <bt_rand+0x22>
   2064e:	bf00      	nop
   20650:	0002ebfc 	.word	0x0002ebfc

00020654 <public_key>:

#if defined(CONFIG_BT_CTLR_ECDH_LIB_OBERON)
#include <ocrypto_ecdh_p256.h>

static uint8_t public_key(void)
{
   20654:	b508      	push	{r3, lr}
   20656:	e002      	b.n	2065e <public_key+0xa>
		if (err) {
			return BT_HCI_ERR_UNSPECIFIED;
		}

		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
			err = -1;
   20658:	f04f 30ff 	mov.w	r0, #4294967295
			continue;
		}

		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
						   ecdh.private_key_be);
	} while (err);
   2065c:	b190      	cbz	r0, 20684 <public_key+0x30>
		err = bt_rand(ecdh.private_key_be, 32);
   2065e:	2120      	movs	r1, #32
   20660:	4809      	ldr	r0, [pc, #36]	; (20688 <public_key+0x34>)
   20662:	f7ff ffdf 	bl	20624 <bt_rand>
		if (err) {
   20666:	b960      	cbnz	r0, 20682 <public_key+0x2e>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   20668:	2220      	movs	r2, #32
   2066a:	4908      	ldr	r1, [pc, #32]	; (2068c <public_key+0x38>)
   2066c:	4806      	ldr	r0, [pc, #24]	; (20688 <public_key+0x34>)
   2066e:	f00d fe1c 	bl	2e2aa <memcmp>
   20672:	2800      	cmp	r0, #0
   20674:	d0f0      	beq.n	20658 <public_key+0x4>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   20676:	4904      	ldr	r1, [pc, #16]	; (20688 <public_key+0x34>)
   20678:	f101 0020 	add.w	r0, r1, #32
   2067c:	f002 fe74 	bl	23368 <ocrypto_ecdh_p256_public_key>
   20680:	e7ec      	b.n	2065c <public_key+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   20682:	201f      	movs	r0, #31

	return 0;
}
   20684:	bd08      	pop	{r3, pc}
   20686:	bf00      	nop
   20688:	20003b14 	.word	0x20003b14
   2068c:	00031618 	.word	0x00031618

00020690 <ecdh_p256_public_key>:
	return 0;
}
#endif /* defined(BT_CTLR_ECDH_LIB_TINYCRYPT) */

static struct net_buf *ecdh_p256_public_key(void)
{
   20690:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = public_key();
   20692:	f7ff ffdf 	bl	20654 <public_key>
   20696:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   20698:	f04f 32ff 	mov.w	r2, #4294967295
   2069c:	f04f 33ff 	mov.w	r3, #4294967295
   206a0:	2001      	movs	r0, #1
   206a2:	f7f6 fb0b 	bl	16cbc <bt_buf_get_rx>
   206a6:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   206a8:	f100 060c 	add.w	r6, r0, #12
   206ac:	2102      	movs	r1, #2
   206ae:	4630      	mov	r0, r6
   206b0:	f00b fb76 	bl	2bda0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   206b4:	233e      	movs	r3, #62	; 0x3e
   206b6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   206b8:	2342      	movs	r3, #66	; 0x42
   206ba:	7043      	strb	r3, [r0, #1]
   206bc:	2101      	movs	r1, #1
   206be:	4630      	mov	r0, r6
   206c0:	f00b fb6e 	bl	2bda0 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   206c4:	2308      	movs	r3, #8
   206c6:	7003      	strb	r3, [r0, #0]
   206c8:	2141      	movs	r1, #65	; 0x41
   206ca:	4630      	mov	r0, r6
   206cc:	f00b fb68 	bl	2bda0 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   206d0:	7005      	strb	r5, [r0, #0]

	if (status) {
   206d2:	b135      	cbz	r5, 206e2 <ecdh_p256_public_key+0x52>
__ssp_bos_icheck3(memset, void *, int)
   206d4:	2240      	movs	r2, #64	; 0x40
   206d6:	2100      	movs	r1, #0
   206d8:	3001      	adds	r0, #1
   206da:	f00d fe04 	bl	2e2e6 <memset>
		/* Reverse Y */
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
	}

	return buf;
}
   206de:	4620      	mov	r0, r4
   206e0:	bd70      	pop	{r4, r5, r6, pc}
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   206e2:	1c42      	adds	r2, r0, #1

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   206e4:	4b0a      	ldr	r3, [pc, #40]	; (20710 <ecdh_p256_public_key+0x80>)

	for (; length > 0; length--) {
   206e6:	2120      	movs	r1, #32
   206e8:	e004      	b.n	206f4 <ecdh_p256_public_key+0x64>
		*pdst++ = *psrc--;
   206ea:	f813 c901 	ldrb.w	ip, [r3], #-1
   206ee:	f802 cb01 	strb.w	ip, [r2], #1
	for (; length > 0; length--) {
   206f2:	3901      	subs	r1, #1
   206f4:	2900      	cmp	r1, #0
   206f6:	d1f8      	bne.n	206ea <ecdh_p256_public_key+0x5a>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   206f8:	3021      	adds	r0, #33	; 0x21
	psrc += length - 1;
   206fa:	4b06      	ldr	r3, [pc, #24]	; (20714 <ecdh_p256_public_key+0x84>)
	for (; length > 0; length--) {
   206fc:	2220      	movs	r2, #32
   206fe:	e004      	b.n	2070a <ecdh_p256_public_key+0x7a>
		*pdst++ = *psrc--;
   20700:	f813 1901 	ldrb.w	r1, [r3], #-1
   20704:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   20708:	3a01      	subs	r2, #1
   2070a:	2a00      	cmp	r2, #0
   2070c:	d1f8      	bne.n	20700 <ecdh_p256_public_key+0x70>
   2070e:	e7e6      	b.n	206de <ecdh_p256_public_key+0x4e>
   20710:	20003b53 	.word	0x20003b53
   20714:	20003b73 	.word	0x20003b73

00020718 <common_secret>:
{
   20718:	b5b0      	push	{r4, r5, r7, lr}
   2071a:	b082      	sub	sp, #8
   2071c:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2071e:	b150      	cbz	r0, 20736 <common_secret+0x1e>
   20720:	4925      	ldr	r1, [pc, #148]	; (207b8 <common_secret+0xa0>)
   20722:	4826      	ldr	r0, [pc, #152]	; (207bc <common_secret+0xa4>)
   20724:	4602      	mov	r2, r0
   20726:	f002 fe33 	bl	23390 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   2072a:	4603      	mov	r3, r0
   2072c:	b928      	cbnz	r0, 2073a <common_secret+0x22>
	return 0;
   2072e:	2000      	movs	r0, #0
}
   20730:	3708      	adds	r7, #8
   20732:	46bd      	mov	sp, r7
   20734:	bdb0      	pop	{r4, r5, r7, pc}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   20736:	4922      	ldr	r1, [pc, #136]	; (207c0 <common_secret+0xa8>)
   20738:	e7f3      	b.n	20722 <common_secret+0xa>
		LOG_ERR("public key is not valid (err %d)", err);
   2073a:	466c      	mov	r4, sp
   2073c:	b088      	sub	sp, #32
   2073e:	4669      	mov	r1, sp
   20740:	f111 0210 	adds.w	r2, r1, #16
   20744:	d031      	beq.n	207aa <common_secret+0x92>
   20746:	200c      	movs	r0, #12
   20748:	b142      	cbz	r2, 2075c <common_secret+0x44>
   2074a:	4684      	mov	ip, r0
   2074c:	2804      	cmp	r0, #4
   2074e:	dd01      	ble.n	20754 <common_secret+0x3c>
   20750:	4d1c      	ldr	r5, [pc, #112]	; (207c4 <common_secret+0xac>)
   20752:	614d      	str	r5, [r1, #20]
   20754:	f1bc 0f08 	cmp.w	ip, #8
   20758:	dd00      	ble.n	2075c <common_secret+0x44>
   2075a:	618b      	str	r3, [r1, #24]
   2075c:	280b      	cmp	r0, #11
   2075e:	dd27      	ble.n	207b0 <common_secret+0x98>
   20760:	230c      	movs	r3, #12
   20762:	b13a      	cbz	r2, 20774 <common_secret+0x5c>
   20764:	2003      	movs	r0, #3
   20766:	7138      	strb	r0, [r7, #4]
   20768:	2000      	movs	r0, #0
   2076a:	7178      	strb	r0, [r7, #5]
   2076c:	71b8      	strb	r0, [r7, #6]
   2076e:	71f8      	strb	r0, [r7, #7]
   20770:	6878      	ldr	r0, [r7, #4]
   20772:	6108      	str	r0, [r1, #16]
   20774:	2100      	movs	r1, #0
   20776:	f36f 0100 	bfc	r1, #0, #1
   2077a:	f36f 0141 	bfc	r1, #1, #1
   2077e:	f36f 0182 	bfc	r1, #2, #1
   20782:	f36f 01c5 	bfc	r1, #3, #3
   20786:	2001      	movs	r0, #1
   20788:	f360 1188 	bfi	r1, r0, #6, #3
   2078c:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   20790:	f363 2152 	bfi	r1, r3, #9, #10
   20794:	f36f 41de 	bfc	r1, #19, #12
   20798:	f36f 71df 	bfc	r1, #31, #1
   2079c:	2300      	movs	r3, #0
   2079e:	480a      	ldr	r0, [pc, #40]	; (207c8 <common_secret+0xb0>)
   207a0:	f008 fb0f 	bl	28dc2 <z_impl_z_log_msg_static_create>
   207a4:	46a5      	mov	sp, r4
		return BT_HCI_ERR_INVALID_PARAM;
   207a6:	2012      	movs	r0, #18
   207a8:	e7c2      	b.n	20730 <common_secret+0x18>
		LOG_ERR("public key is not valid (err %d)", err);
   207aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   207ae:	e7cb      	b.n	20748 <common_secret+0x30>
   207b0:	f06f 031b 	mvn.w	r3, #27
   207b4:	e7d5      	b.n	20762 <common_secret+0x4a>
   207b6:	bf00      	nop
   207b8:	00031618 	.word	0x00031618
   207bc:	20003b34 	.word	0x20003b34
   207c0:	20003b14 	.word	0x20003b14
   207c4:	000315d4 	.word	0x000315d4
   207c8:	0002eec0 	.word	0x0002eec0

000207cc <ecdh_p256_common_secret>:

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   207cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_meta_event *meta;
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);
   207ce:	f7ff ffa3 	bl	20718 <common_secret>
   207d2:	4605      	mov	r5, r0

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   207d4:	f04f 32ff 	mov.w	r2, #4294967295
   207d8:	f04f 33ff 	mov.w	r3, #4294967295
   207dc:	2001      	movs	r0, #1
   207de:	f7f6 fa6d 	bl	16cbc <bt_buf_get_rx>
   207e2:	4604      	mov	r4, r0
   207e4:	f100 060c 	add.w	r6, r0, #12
   207e8:	2102      	movs	r1, #2
   207ea:	4630      	mov	r0, r6
   207ec:	f00b fad8 	bl	2bda0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   207f0:	233e      	movs	r3, #62	; 0x3e
   207f2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   207f4:	2322      	movs	r3, #34	; 0x22
   207f6:	7043      	strb	r3, [r0, #1]
   207f8:	2101      	movs	r1, #1
   207fa:	4630      	mov	r0, r6
   207fc:	f00b fad0 	bl	2bda0 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   20800:	2309      	movs	r3, #9
   20802:	7003      	strb	r3, [r0, #0]
   20804:	2121      	movs	r1, #33	; 0x21
   20806:	4630      	mov	r0, r6
   20808:	f00b faca 	bl	2bda0 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   2080c:	7005      	strb	r5, [r0, #0]

	if (status) {
   2080e:	b135      	cbz	r5, 2081e <ecdh_p256_common_secret+0x52>
   20810:	2220      	movs	r2, #32
   20812:	21ff      	movs	r1, #255	; 0xff
   20814:	3001      	adds	r0, #1
   20816:	f00d fd66 	bl	2e2e6 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   2081a:	4620      	mov	r0, r4
   2081c:	bd70      	pop	{r4, r5, r6, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   2081e:	3001      	adds	r0, #1
	psrc += length - 1;
   20820:	4b05      	ldr	r3, [pc, #20]	; (20838 <ecdh_p256_common_secret+0x6c>)
	for (; length > 0; length--) {
   20822:	2220      	movs	r2, #32
   20824:	e004      	b.n	20830 <ecdh_p256_common_secret+0x64>
		*pdst++ = *psrc--;
   20826:	f813 1901 	ldrb.w	r1, [r3], #-1
   2082a:	f800 1b01 	strb.w	r1, [r0], #1
	for (; length > 0; length--) {
   2082e:	3a01      	subs	r2, #1
   20830:	2a00      	cmp	r2, #0
   20832:	d1f8      	bne.n	20826 <ecdh_p256_common_secret+0x5a>
   20834:	e7f1      	b.n	2081a <ecdh_p256_common_secret+0x4e>
   20836:	bf00      	nop
   20838:	20003b53 	.word	0x20003b53

0002083c <work_submit>:

static struct k_thread ecdh_thread_data;
static K_KERNEL_STACK_DEFINE(ecdh_thread_stack, CONFIG_BT_CTLR_ECDH_STACK_SIZE);

static void work_submit(void)
{
   2083c:	b508      	push	{r3, lr}
	return z_impl_k_poll_signal_raise(sig, result);
   2083e:	2100      	movs	r1, #0
   20840:	4801      	ldr	r0, [pc, #4]	; (20848 <work_submit+0xc>)
   20842:	f002 fd4b 	bl	232dc <z_impl_k_poll_signal_raise>
	k_poll_signal_raise(&ecdh_signal, 0);
}
   20846:	bd08      	pop	{r3, pc}
   20848:	20003b00 	.word	0x20003b00

0002084c <ecdh_cmd_process>:
{
   2084c:	b510      	push	{r4, lr}
   2084e:	b088      	sub	sp, #32
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20850:	f3bf 8f5b 	dmb	ish
   20854:	4b25      	ldr	r3, [pc, #148]	; (208ec <ecdh_cmd_process+0xa0>)
   20856:	681b      	ldr	r3, [r3, #0]
   20858:	f3bf 8f5b 	dmb	ish
	switch (atomic_get(&cmd)) {
   2085c:	2b02      	cmp	r3, #2
   2085e:	d03d      	beq.n	208dc <ecdh_cmd_process+0x90>
   20860:	2b04      	cmp	r3, #4
   20862:	d03f      	beq.n	208e4 <ecdh_cmd_process+0x98>
   20864:	2b01      	cmp	r3, #1
   20866:	d026      	beq.n	208b6 <ecdh_cmd_process+0x6a>
		LOG_WRN("Unknown command");
   20868:	4b21      	ldr	r3, [pc, #132]	; (208f0 <ecdh_cmd_process+0xa4>)
   2086a:	9307      	str	r3, [sp, #28]
   2086c:	2302      	movs	r3, #2
   2086e:	f88d 3004 	strb.w	r3, [sp, #4]
   20872:	2400      	movs	r4, #0
   20874:	f88d 4005 	strb.w	r4, [sp, #5]
   20878:	f88d 4006 	strb.w	r4, [sp, #6]
   2087c:	f88d 4007 	strb.w	r4, [sp, #7]
   20880:	9a01      	ldr	r2, [sp, #4]
   20882:	9206      	str	r2, [sp, #24]
   20884:	4621      	mov	r1, r4
   20886:	f364 0100 	bfi	r1, r4, #0, #1
   2088a:	f364 0141 	bfi	r1, r4, #1, #1
   2088e:	f364 0182 	bfi	r1, r4, #2, #1
   20892:	f364 01c5 	bfi	r1, r4, #3, #3
   20896:	f363 1188 	bfi	r1, r3, #6, #3
   2089a:	2308      	movs	r3, #8
   2089c:	f363 2152 	bfi	r1, r3, #9, #10
   208a0:	f364 41de 	bfi	r1, r4, #19, #12
   208a4:	f364 71df 	bfi	r1, r4, #31, #1
   208a8:	4623      	mov	r3, r4
   208aa:	aa06      	add	r2, sp, #24
   208ac:	4811      	ldr	r0, [pc, #68]	; (208f4 <ecdh_cmd_process+0xa8>)
   208ae:	f008 fa88 	bl	28dc2 <z_impl_z_log_msg_static_create>
		buf = NULL;
   208b2:	4620      	mov	r0, r4
		break;
   208b4:	e001      	b.n	208ba <ecdh_cmd_process+0x6e>
		buf = ecdh_p256_public_key();
   208b6:	f7ff feeb 	bl	20690 <ecdh_p256_public_key>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   208ba:	4b0c      	ldr	r3, [pc, #48]	; (208ec <ecdh_cmd_process+0xa0>)
   208bc:	2200      	movs	r2, #0
   208be:	f3bf 8f5b 	dmb	ish
   208c2:	e853 1f00 	ldrex	r1, [r3]
   208c6:	e843 2400 	strex	r4, r2, [r3]
   208ca:	2c00      	cmp	r4, #0
   208cc:	d1f9      	bne.n	208c2 <ecdh_cmd_process+0x76>
   208ce:	f3bf 8f5b 	dmb	ish
	if (buf) {
   208d2:	b108      	cbz	r0, 208d8 <ecdh_cmd_process+0x8c>
		bt_recv(buf);
   208d4:	f7f8 fc70 	bl	191b8 <bt_recv>
}
   208d8:	b008      	add	sp, #32
   208da:	bd10      	pop	{r4, pc}
		buf = ecdh_p256_common_secret(false);
   208dc:	2000      	movs	r0, #0
   208de:	f7ff ff75 	bl	207cc <ecdh_p256_common_secret>
		break;
   208e2:	e7ea      	b.n	208ba <ecdh_cmd_process+0x6e>
		buf = ecdh_p256_common_secret(true);
   208e4:	2001      	movs	r0, #1
   208e6:	f7ff ff71 	bl	207cc <ecdh_p256_common_secret>
		break;
   208ea:	e7e6      	b.n	208ba <ecdh_cmd_process+0x6e>
   208ec:	20003b10 	.word	0x20003b10
   208f0:	000315f8 	.word	0x000315f8
   208f4:	0002eec0 	.word	0x0002eec0

000208f8 <ecdh_thread>:

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   208f8:	b500      	push	{lr}
   208fa:	b087      	sub	sp, #28
	struct k_poll_event events[1] = {
   208fc:	2300      	movs	r3, #0
   208fe:	9301      	str	r3, [sp, #4]
   20900:	9302      	str	r3, [sp, #8]
   20902:	9303      	str	r3, [sp, #12]
   20904:	9304      	str	r3, [sp, #16]
   20906:	9305      	str	r3, [sp, #20]
   20908:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2090c:	2201      	movs	r2, #1
   2090e:	f362 0305 	bfi	r3, r2, #0, #6
   20912:	f88d 3011 	strb.w	r3, [sp, #17]
   20916:	4b0a      	ldr	r3, [pc, #40]	; (20940 <ecdh_thread+0x48>)
   20918:	9305      	str	r3, [sp, #20]
	return z_impl_k_poll(events, num_events, timeout);
   2091a:	f04f 32ff 	mov.w	r2, #4294967295
   2091e:	f04f 33ff 	mov.w	r3, #4294967295
   20922:	2101      	movs	r1, #1
   20924:	a801      	add	r0, sp, #4
   20926:	f002 fc7b 	bl	23220 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   2092a:	4805      	ldr	r0, [pc, #20]	; (20940 <ecdh_thread+0x48>)
   2092c:	f00d fcb0 	bl	2e290 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   20930:	9b04      	ldr	r3, [sp, #16]
   20932:	f36f 3394 	bfc	r3, #14, #7
   20936:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   20938:	f7ff ff88 	bl	2084c <ecdh_cmd_process>
	while (true) {
   2093c:	e7ed      	b.n	2091a <ecdh_thread+0x22>
   2093e:	bf00      	nop
   20940:	20003b00 	.word	0x20003b00

00020944 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   20944:	b510      	push	{r4, lr}
   20946:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   20948:	480d      	ldr	r0, [pc, #52]	; (20980 <hci_ecdh_init+0x3c>)
   2094a:	f00d fc9c 	bl	2e286 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2094e:	4c0d      	ldr	r4, [pc, #52]	; (20984 <hci_ecdh_init+0x40>)
   20950:	2200      	movs	r2, #0
   20952:	2300      	movs	r3, #0
   20954:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20958:	2300      	movs	r3, #0
   2095a:	9304      	str	r3, [sp, #16]
   2095c:	220a      	movs	r2, #10
   2095e:	9203      	str	r2, [sp, #12]
   20960:	9302      	str	r3, [sp, #8]
   20962:	9301      	str	r3, [sp, #4]
   20964:	9300      	str	r3, [sp, #0]
   20966:	4b08      	ldr	r3, [pc, #32]	; (20988 <hci_ecdh_init+0x44>)
   20968:	f44f 7262 	mov.w	r2, #904	; 0x388
   2096c:	4907      	ldr	r1, [pc, #28]	; (2098c <hci_ecdh_init+0x48>)
   2096e:	4620      	mov	r0, r4
   20970:	f00c fdd2 	bl	2d518 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   20974:	4906      	ldr	r1, [pc, #24]	; (20990 <hci_ecdh_init+0x4c>)
   20976:	4620      	mov	r0, r4
   20978:	f001 fa9a 	bl	21eb0 <z_impl_k_thread_name_set>
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   2097c:	b008      	add	sp, #32
   2097e:	bd10      	pop	{r4, pc}
   20980:	20003b00 	.word	0x20003b00
   20984:	20002ba0 	.word	0x20002ba0
   20988:	000208f9 	.word	0x000208f9
   2098c:	20005f80 	.word	0x20005f80
   20990:	00031608 	.word	0x00031608

00020994 <hci_ecdh_uninit>:

void hci_ecdh_uninit(void)
{
   20994:	b508      	push	{r3, lr}
	z_impl_k_thread_abort(thread);
   20996:	4802      	ldr	r0, [pc, #8]	; (209a0 <hci_ecdh_uninit+0xc>)
   20998:	f7f5 fe8c 	bl	166b4 <z_impl_k_thread_abort>
#if !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK)
	k_thread_abort(&ecdh_thread_data);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   2099c:	bd08      	pop	{r3, pc}
   2099e:	bf00      	nop
   209a0:	20002ba0 	.word	0x20002ba0

000209a4 <hci_cmd_le_read_local_p256_public_key>:


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   209a4:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   209a6:	4b0a      	ldr	r3, [pc, #40]	; (209d0 <hci_cmd_le_read_local_p256_public_key+0x2c>)
   209a8:	2201      	movs	r2, #1
   209aa:	f3bf 8f5b 	dmb	ish
   209ae:	e853 1f00 	ldrex	r1, [r3]
   209b2:	2900      	cmp	r1, #0
   209b4:	d103      	bne.n	209be <hci_cmd_le_read_local_p256_public_key+0x1a>
   209b6:	e843 2000 	strex	r0, r2, [r3]
   209ba:	2800      	cmp	r0, #0
   209bc:	d1f7      	bne.n	209ae <hci_cmd_le_read_local_p256_public_key+0xa>
   209be:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   209c2:	d103      	bne.n	209cc <hci_cmd_le_read_local_p256_public_key+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();
   209c4:	f7ff ff3a 	bl	2083c <work_submit>

	return 0;
   209c8:	2000      	movs	r0, #0
}
   209ca:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   209cc:	200c      	movs	r0, #12
   209ce:	e7fc      	b.n	209ca <hci_cmd_le_read_local_p256_public_key+0x26>
   209d0:	20003b10 	.word	0x20003b10

000209d4 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   209d4:	b508      	push	{r3, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   209d6:	b1a1      	cbz	r1, 20a02 <cmd_le_generate_dhkey+0x2e>
   209d8:	2204      	movs	r2, #4
   209da:	4b17      	ldr	r3, [pc, #92]	; (20a38 <cmd_le_generate_dhkey+0x64>)
   209dc:	f3bf 8f5b 	dmb	ish
   209e0:	e853 1f00 	ldrex	r1, [r3]
   209e4:	2900      	cmp	r1, #0
   209e6:	d104      	bne.n	209f2 <cmd_le_generate_dhkey+0x1e>
   209e8:	e843 2c00 	strex	ip, r2, [r3]
   209ec:	f1bc 0f00 	cmp.w	ip, #0
   209f0:	d1f6      	bne.n	209e0 <cmd_le_generate_dhkey+0xc>
   209f2:	f3bf 8f5b 	dmb	ish
   209f6:	d11c      	bne.n	20a32 <cmd_le_generate_dhkey+0x5e>
	psrc += length - 1;
   209f8:	f100 021f 	add.w	r2, r0, #31
	uint8_t *pdst = (uint8_t *)dst;
   209fc:	4b0f      	ldr	r3, [pc, #60]	; (20a3c <cmd_le_generate_dhkey+0x68>)
	for (; length > 0; length--) {
   209fe:	2120      	movs	r1, #32
   20a00:	e006      	b.n	20a10 <cmd_le_generate_dhkey+0x3c>
   20a02:	2202      	movs	r2, #2
   20a04:	e7e9      	b.n	209da <cmd_le_generate_dhkey+0x6>
		*pdst++ = *psrc--;
   20a06:	f812 c901 	ldrb.w	ip, [r2], #-1
   20a0a:	f803 cb01 	strb.w	ip, [r3], #1
	for (; length > 0; length--) {
   20a0e:	3901      	subs	r1, #1
   20a10:	2900      	cmp	r1, #0
   20a12:	d1f8      	bne.n	20a06 <cmd_le_generate_dhkey+0x32>
	psrc += length - 1;
   20a14:	303f      	adds	r0, #63	; 0x3f
	uint8_t *pdst = (uint8_t *)dst;
   20a16:	4b0a      	ldr	r3, [pc, #40]	; (20a40 <cmd_le_generate_dhkey+0x6c>)
	for (; length > 0; length--) {
   20a18:	2220      	movs	r2, #32
   20a1a:	e004      	b.n	20a26 <cmd_le_generate_dhkey+0x52>
		*pdst++ = *psrc--;
   20a1c:	f810 1901 	ldrb.w	r1, [r0], #-1
   20a20:	f803 1b01 	strb.w	r1, [r3], #1
	for (; length > 0; length--) {
   20a24:	3a01      	subs	r2, #1
   20a26:	2a00      	cmp	r2, #0
   20a28:	d1f8      	bne.n	20a1c <cmd_le_generate_dhkey+0x48>
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);

	work_submit();
   20a2a:	f7ff ff07 	bl	2083c <work_submit>

	return 0;
   20a2e:	2000      	movs	r0, #0
}
   20a30:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   20a32:	200c      	movs	r0, #12
   20a34:	e7fc      	b.n	20a30 <cmd_le_generate_dhkey+0x5c>
   20a36:	bf00      	nop
   20a38:	20003b10 	.word	0x20003b10
   20a3c:	20003b34 	.word	0x20003b34
   20a40:	20003b54 	.word	0x20003b54

00020a44 <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   20a44:	b500      	push	{lr}
   20a46:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   20a48:	f00c fad3 	bl	2cff2 <m_config_clock_source_get>
   20a4c:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   20a50:	2332      	movs	r3, #50	; 0x32
   20a52:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   20a56:	2300      	movs	r3, #0
   20a58:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   20a5c:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   20a60:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20a64:	4a03      	ldr	r2, [pc, #12]	; (20a74 <mpsl_lib_init_internal+0x30>)
   20a66:	2119      	movs	r1, #25
   20a68:	4668      	mov	r0, sp
   20a6a:	f7eb fd3b 	bl	c4e4 <mpsl_init>
		return err;
	}
#endif

	return 0;
}
   20a6e:	b003      	add	sp, #12
   20a70:	f85d fb04 	ldr.w	pc, [sp], #4
   20a74:	00020a79 	.word	0x00020a79

00020a78 <m_assert_handler>:
{
   20a78:	b590      	push	{r4, r7, lr}
   20a7a:	b083      	sub	sp, #12
   20a7c:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   20a7e:	466c      	mov	r4, sp
   20a80:	2300      	movs	r3, #0
   20a82:	713b      	strb	r3, [r7, #4]
   20a84:	2302      	movs	r3, #2
   20a86:	717b      	strb	r3, [r7, #5]
   20a88:	b08a      	sub	sp, #40	; 0x28
   20a8a:	46ec      	mov	ip, sp
   20a8c:	f11c 0210 	adds.w	r2, ip, #16
   20a90:	d01b      	beq.n	20aca <m_assert_handler+0x52>
   20a92:	f04f 0e12 	mov.w	lr, #18
   20a96:	b12a      	cbz	r2, 20aa4 <m_assert_handler+0x2c>
   20a98:	f1be 0f04 	cmp.w	lr, #4
   20a9c:	dd02      	ble.n	20aa4 <m_assert_handler+0x2c>
   20a9e:	4b2b      	ldr	r3, [pc, #172]	; (20b4c <m_assert_handler+0xd4>)
   20aa0:	f8cc 3014 	str.w	r3, [ip, #20]
   20aa4:	2300      	movs	r3, #0
   20aa6:	703b      	strb	r3, [r7, #0]
   20aa8:	2302      	movs	r3, #2
   20aaa:	707b      	strb	r3, [r7, #1]
   20aac:	b1d2      	cbz	r2, 20ae4 <m_assert_handler+0x6c>
   20aae:	4673      	mov	r3, lr
   20ab0:	f1be 0f08 	cmp.w	lr, #8
   20ab4:	dd01      	ble.n	20aba <m_assert_handler+0x42>
   20ab6:	f8cc 0018 	str.w	r0, [ip, #24]
   20aba:	2b0c      	cmp	r3, #12
   20abc:	dd01      	ble.n	20ac2 <m_assert_handler+0x4a>
   20abe:	f8cc 101c 	str.w	r1, [ip, #28]
   20ac2:	f10c 0320 	add.w	r3, ip, #32
   20ac6:	2100      	movs	r1, #0
   20ac8:	e00a      	b.n	20ae0 <m_assert_handler+0x68>
   20aca:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   20ace:	e7e2      	b.n	20a96 <m_assert_handler+0x1e>
   20ad0:	f101 0008 	add.w	r0, r1, #8
   20ad4:	4438      	add	r0, r7
   20ad6:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   20ada:	f803 0b01 	strb.w	r0, [r3], #1
   20ade:	3101      	adds	r1, #1
   20ae0:	2901      	cmp	r1, #1
   20ae2:	d9f5      	bls.n	20ad0 <m_assert_handler+0x58>
   20ae4:	f1be 0f11 	cmp.w	lr, #17
   20ae8:	dd2d      	ble.n	20b46 <m_assert_handler+0xce>
   20aea:	2312      	movs	r3, #18
   20aec:	b14a      	cbz	r2, 20b02 <m_assert_handler+0x8a>
   20aee:	2104      	movs	r1, #4
   20af0:	7139      	strb	r1, [r7, #4]
   20af2:	2100      	movs	r1, #0
   20af4:	7179      	strb	r1, [r7, #5]
   20af6:	71b9      	strb	r1, [r7, #6]
   20af8:	2101      	movs	r1, #1
   20afa:	71f9      	strb	r1, [r7, #7]
   20afc:	6878      	ldr	r0, [r7, #4]
   20afe:	f8cc 0010 	str.w	r0, [ip, #16]
   20b02:	2100      	movs	r1, #0
   20b04:	f36f 0100 	bfc	r1, #0, #1
   20b08:	f36f 0141 	bfc	r1, #1, #1
   20b0c:	f36f 0182 	bfc	r1, #2, #1
   20b10:	f36f 01c5 	bfc	r1, #3, #3
   20b14:	2001      	movs	r0, #1
   20b16:	f360 1188 	bfi	r1, r0, #6, #3
   20b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   20b1e:	f363 2152 	bfi	r1, r3, #9, #10
   20b22:	f36f 41de 	bfc	r1, #19, #12
   20b26:	f36f 71df 	bfc	r1, #31, #1
   20b2a:	2300      	movs	r3, #0
   20b2c:	4808      	ldr	r0, [pc, #32]	; (20b50 <m_assert_handler+0xd8>)
   20b2e:	f008 f948 	bl	28dc2 <z_impl_z_log_msg_static_create>
   20b32:	46a5      	mov	sp, r4
	k_oops();
   20b34:	4040      	eors	r0, r0
   20b36:	f380 8811 	msr	BASEPRI, r0
   20b3a:	f04f 0003 	mov.w	r0, #3
   20b3e:	df02      	svc	2
}
   20b40:	370c      	adds	r7, #12
   20b42:	46bd      	mov	sp, r7
   20b44:	bd90      	pop	{r4, r7, pc}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   20b46:	f06f 031b 	mvn.w	r3, #27
   20b4a:	e7cf      	b.n	20aec <m_assert_handler+0x74>
   20b4c:	00031644 	.word	0x00031644
   20b50:	0002ef28 	.word	0x0002ef28

00020b54 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(const struct device *dev)
{
   20b54:	b530      	push	{r4, r5, lr}
   20b56:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   20b58:	4d0d      	ldr	r5, [pc, #52]	; (20b90 <mpsl_low_prio_init+0x3c>)
   20b5a:	2400      	movs	r4, #0
   20b5c:	9400      	str	r4, [sp, #0]
   20b5e:	f06f 0309 	mvn.w	r3, #9
   20b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20b66:	490b      	ldr	r1, [pc, #44]	; (20b94 <mpsl_low_prio_init+0x40>)
   20b68:	4628      	mov	r0, r5
   20b6a:	f7f0 fa8d 	bl	11088 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   20b6e:	490a      	ldr	r1, [pc, #40]	; (20b98 <mpsl_low_prio_init+0x44>)
   20b70:	4628      	mov	r0, r5
   20b72:	f001 f99d 	bl	21eb0 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   20b76:	4909      	ldr	r1, [pc, #36]	; (20b9c <mpsl_low_prio_init+0x48>)
   20b78:	4809      	ldr	r0, [pc, #36]	; (20ba0 <mpsl_low_prio_init+0x4c>)
   20b7a:	f00c feb0 	bl	2d8de <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   20b7e:	4622      	mov	r2, r4
   20b80:	2104      	movs	r1, #4
   20b82:	2019      	movs	r0, #25
   20b84:	f008 fccb 	bl	2951e <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   20b88:	4620      	mov	r0, r4
   20b8a:	b003      	add	sp, #12
   20b8c:	bd30      	pop	{r4, r5, pc}
   20b8e:	bf00      	nop
   20b90:	20002c98 	.word	0x20002c98
   20b94:	20006380 	.word	0x20006380
   20b98:	00031658 	.word	0x00031658
   20b9c:	0002d07b 	.word	0x0002d07b
   20ba0:	20003b74 	.word	0x20003b74

00020ba4 <mpsl_low_prio_irq_handler>:
{
   20ba4:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   20ba6:	4902      	ldr	r1, [pc, #8]	; (20bb0 <mpsl_low_prio_irq_handler+0xc>)
   20ba8:	4802      	ldr	r0, [pc, #8]	; (20bb4 <mpsl_low_prio_irq_handler+0x10>)
   20baa:	f00c feb4 	bl	2d916 <k_work_submit_to_queue>
}
   20bae:	bd08      	pop	{r3, pc}
   20bb0:	20003b74 	.word	0x20003b74
   20bb4:	20002c98 	.word	0x20002c98

00020bb8 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   20bb8:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   20bba:	4b02      	ldr	r3, [pc, #8]	; (20bc4 <mpsl_hfclk_callback+0xc>)
   20bbc:	681b      	ldr	r3, [r3, #0]
   20bbe:	2000      	movs	r0, #0
   20bc0:	4798      	blx	r3
}
   20bc2:	bd08      	pop	{r3, pc}
   20bc4:	20003b84 	.word	0x20003b84

00020bc8 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   20bc8:	b508      	push	{r3, lr}
	switch (domain) {
   20bca:	b128      	cbz	r0, 20bd8 <nrfx_clock_start+0x10>
   20bcc:	2801      	cmp	r0, #1
   20bce:	d102      	bne.n	20bd6 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   20bd0:	4804      	ldr	r0, [pc, #16]	; (20be4 <nrfx_clock_start+0x1c>)
   20bd2:	f7eb fae9 	bl	c1a8 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   20bd6:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   20bd8:	4b03      	ldr	r3, [pc, #12]	; (20be8 <nrfx_clock_start+0x20>)
   20bda:	681b      	ldr	r3, [r3, #0]
   20bdc:	2001      	movs	r0, #1
   20bde:	4798      	blx	r3
}
   20be0:	e7f9      	b.n	20bd6 <nrfx_clock_start+0xe>
   20be2:	bf00      	nop
   20be4:	00020bb9 	.word	0x00020bb9
   20be8:	20003b84 	.word	0x20003b84

00020bec <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   20bec:	4b01      	ldr	r3, [pc, #4]	; (20bf4 <nrfx_clock_init+0x8>)
   20bee:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   20bf0:	4801      	ldr	r0, [pc, #4]	; (20bf8 <nrfx_clock_init+0xc>)
   20bf2:	4770      	bx	lr
   20bf4:	20003b84 	.word	0x20003b84
   20bf8:	0bad0000 	.word	0x0bad0000

00020bfc <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   20bfc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20c00:	4905      	ldr	r1, [pc, #20]	; (20c18 <__NVIC_SystemReset+0x1c>)
   20c02:	68ca      	ldr	r2, [r1, #12]
   20c04:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20c08:	4b04      	ldr	r3, [pc, #16]	; (20c1c <__NVIC_SystemReset+0x20>)
   20c0a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20c0c:	60cb      	str	r3, [r1, #12]
   20c0e:	f3bf 8f4f 	dsb	sy
    __NOP();
   20c12:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20c14:	e7fd      	b.n	20c12 <__NVIC_SystemReset+0x16>
   20c16:	bf00      	nop
   20c18:	e000ed00 	.word	0xe000ed00
   20c1c:	05fa0004 	.word	0x05fa0004

00020c20 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   20c20:	4b02      	ldr	r3, [pc, #8]	; (20c2c <nvmc_wait+0xc>)
   20c22:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   20c26:	2b00      	cmp	r3, #0
   20c28:	d0fa      	beq.n	20c20 <nvmc_wait>
}
   20c2a:	4770      	bx	lr
   20c2c:	4001e000 	.word	0x4001e000

00020c30 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   20c30:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20c32:	4b03      	ldr	r3, [pc, #12]	; (20c40 <nvmc_config+0x10>)
   20c34:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   20c38:	f7ff fff2 	bl	20c20 <nvmc_wait>
}
   20c3c:	bd08      	pop	{r3, pc}
   20c3e:	bf00      	nop
   20c40:	4001e000 	.word	0x4001e000

00020c44 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   20c44:	4b01      	ldr	r3, [pc, #4]	; (20c4c <SystemCoreClockUpdate+0x8>)
   20c46:	4a02      	ldr	r2, [pc, #8]	; (20c50 <SystemCoreClockUpdate+0xc>)
   20c48:	601a      	str	r2, [r3, #0]
}
   20c4a:	4770      	bx	lr
   20c4c:	200007e8 	.word	0x200007e8
   20c50:	03d09000 	.word	0x03d09000

00020c54 <SystemInit>:

void SystemInit(void)
{
   20c54:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   20c56:	f00c fa3b 	bl	2d0d0 <nrf52_errata_36>
   20c5a:	b140      	cbz	r0, 20c6e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20c60:	2200      	movs	r2, #0
   20c62:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   20c66:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   20c6a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   20c6e:	f00c fa39 	bl	2d0e4 <nrf52_errata_66>
   20c72:	2800      	cmp	r0, #0
   20c74:	d046      	beq.n	20d04 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   20c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20c7a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   20c7e:	4b55      	ldr	r3, [pc, #340]	; (20dd4 <SystemInit+0x180>)
   20c80:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20c84:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20c88:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20c8c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20c90:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20c94:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20c98:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20c9c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20ca0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20ca4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20ca8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20cac:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20cb0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20cb4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20cb8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20cbc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20cc0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20cc4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20cc8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20ccc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20cd0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20cd4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20cd8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20cdc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20ce0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20ce4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   20ce8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   20cec:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   20cf0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   20cf4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   20cf8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   20cfc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   20d00:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   20d04:	f00c f9f8 	bl	2d0f8 <nrf52_errata_98>
   20d08:	b118      	cbz	r0, 20d12 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   20d0a:	4b33      	ldr	r3, [pc, #204]	; (20dd8 <SystemInit+0x184>)
   20d0c:	4a33      	ldr	r2, [pc, #204]	; (20ddc <SystemInit+0x188>)
   20d0e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   20d12:	f00c fa04 	bl	2d11e <nrf52_errata_103>
   20d16:	b118      	cbz	r0, 20d20 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   20d18:	4b31      	ldr	r3, [pc, #196]	; (20de0 <SystemInit+0x18c>)
   20d1a:	22fb      	movs	r2, #251	; 0xfb
   20d1c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   20d20:	f00c fa10 	bl	2d144 <nrf52_errata_115>
   20d24:	b170      	cbz	r0, 20d44 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   20d26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   20d2a:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
   20d2e:	f023 030f 	bic.w	r3, r3, #15
   20d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20d36:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
   20d3a:	f002 020f 	and.w	r2, r2, #15
   20d3e:	4313      	orrs	r3, r2
   20d40:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   20d44:	f00c fa11 	bl	2d16a <nrf52_errata_120>
   20d48:	b120      	cbz	r0, 20d54 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   20d4a:	4b26      	ldr	r3, [pc, #152]	; (20de4 <SystemInit+0x190>)
   20d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   20d50:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20d54:	f00c fa1c 	bl	2d190 <nrf52_errata_136>
   20d58:	b160      	cbz	r0, 20d74 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20d5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20d5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   20d62:	f013 0f01 	tst.w	r3, #1
   20d66:	d005      	beq.n	20d74 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   20d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20d6c:	f06f 0201 	mvn.w	r2, #1
   20d70:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   20d74:	4a1c      	ldr	r2, [pc, #112]	; (20de8 <SystemInit+0x194>)
   20d76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   20d7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   20d7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   20d82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20d86:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   20d8a:	f00c fa1b 	bl	2d1c4 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20d8e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20d92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   20d96:	2b00      	cmp	r3, #0
   20d98:	db08      	blt.n	20dac <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20d9a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20d9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20da2:	2b00      	cmp	r3, #0
   20da4:	db02      	blt.n	20dac <SystemInit+0x158>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   20da6:	f7ff ff4d 	bl	20c44 <SystemCoreClockUpdate>
}
   20daa:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   20dac:	2001      	movs	r0, #1
   20dae:	f7ff ff3f 	bl	20c30 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20db2:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   20db6:	2512      	movs	r5, #18
   20db8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   20dbc:	f7ff ff30 	bl	20c20 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   20dc0:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   20dc4:	f7ff ff2c 	bl	20c20 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   20dc8:	2000      	movs	r0, #0
   20dca:	f7ff ff31 	bl	20c30 <nvmc_config>
            NVIC_SystemReset();
   20dce:	f7ff ff15 	bl	20bfc <__NVIC_SystemReset>
   20dd2:	bf00      	nop
   20dd4:	4000c000 	.word	0x4000c000
   20dd8:	40005000 	.word	0x40005000
   20ddc:	00038148 	.word	0x00038148
   20de0:	4000f000 	.word	0x4000f000
   20de4:	40029000 	.word	0x40029000
   20de8:	e000ed00 	.word	0xe000ed00

00020dec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   20dec:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   20dee:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   20df0:	fab4 f384 	clz	r3, r4
   20df4:	f1c3 031f 	rsb	r3, r3, #31
   20df8:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   20dfc:	2b00      	cmp	r3, #0
   20dfe:	db16      	blt.n	20e2e <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   20e00:	2201      	movs	r2, #1
   20e02:	fa02 f303 	lsl.w	r3, r2, r3
   20e06:	ea24 0303 	bic.w	r3, r4, r3
   20e0a:	f3bf 8f5b 	dmb	ish
   20e0e:	e850 2f00 	ldrex	r2, [r0]
   20e12:	42a2      	cmp	r2, r4
   20e14:	d104      	bne.n	20e20 <nrfx_flag32_alloc+0x34>
   20e16:	e840 3e00 	strex	lr, r3, [r0]
   20e1a:	f1be 0f00 	cmp.w	lr, #0
   20e1e:	d1f6      	bne.n	20e0e <nrfx_flag32_alloc+0x22>
   20e20:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20e24:	d1e3      	bne.n	20dee <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   20e26:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   20e2a:	4802      	ldr	r0, [pc, #8]	; (20e34 <nrfx_flag32_alloc+0x48>)
}
   20e2c:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   20e2e:	4802      	ldr	r0, [pc, #8]	; (20e38 <nrfx_flag32_alloc+0x4c>)
   20e30:	e7fc      	b.n	20e2c <nrfx_flag32_alloc+0x40>
   20e32:	bf00      	nop
   20e34:	0bad0000 	.word	0x0bad0000
   20e38:	0bad0002 	.word	0x0bad0002

00020e3c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   20e3c:	6803      	ldr	r3, [r0, #0]
   20e3e:	40cb      	lsrs	r3, r1
   20e40:	f013 0f01 	tst.w	r3, #1
   20e44:	d115      	bne.n	20e72 <nrfx_flag32_free+0x36>
{
   20e46:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   20e48:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   20e4a:	2301      	movs	r3, #1
   20e4c:	408b      	lsls	r3, r1
   20e4e:	4313      	orrs	r3, r2
   20e50:	f3bf 8f5b 	dmb	ish
   20e54:	e850 cf00 	ldrex	ip, [r0]
   20e58:	4594      	cmp	ip, r2
   20e5a:	d104      	bne.n	20e66 <nrfx_flag32_free+0x2a>
   20e5c:	e840 3e00 	strex	lr, r3, [r0]
   20e60:	f1be 0f00 	cmp.w	lr, #0
   20e64:	d1f6      	bne.n	20e54 <nrfx_flag32_free+0x18>
   20e66:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20e6a:	d1ed      	bne.n	20e48 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   20e6c:	4802      	ldr	r0, [pc, #8]	; (20e78 <nrfx_flag32_free+0x3c>)
}
   20e6e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   20e72:	4802      	ldr	r0, [pc, #8]	; (20e7c <nrfx_flag32_free+0x40>)
}
   20e74:	4770      	bx	lr
   20e76:	bf00      	nop
   20e78:	0bad0000 	.word	0x0bad0000
   20e7c:	0bad0004 	.word	0x0bad0004

00020e80 <nrf_gpio_reconfigure>:
{
   20e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e82:	461c      	mov	r4, r3
   20e84:	9f05      	ldr	r7, [sp, #20]
   20e86:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
   20e88:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   20e8c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20e8e:	2801      	cmp	r0, #1
   20e90:	d035      	beq.n	20efe <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
   20e92:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20e96:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
   20e9a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20e9e:	b381      	cbz	r1, 20f02 <nrf_gpio_reconfigure+0x82>
   20ea0:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   20ea2:	b382      	cbz	r2, 20f06 <nrf_gpio_reconfigure+0x86>
   20ea4:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20ea8:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20eac:	b374      	cbz	r4, 20f0c <nrf_gpio_reconfigure+0x8c>
   20eae:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   20eb2:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   20eb6:	b367      	cbz	r7, 20f12 <nrf_gpio_reconfigure+0x92>
   20eb8:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20ebc:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   20ec0:	b356      	cbz	r6, 20f18 <nrf_gpio_reconfigure+0x98>
   20ec2:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20ec6:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
   20eca:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20ece:	b331      	cbz	r1, 20f1e <nrf_gpio_reconfigure+0x9e>
   20ed0:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   20ed2:	b332      	cbz	r2, 20f22 <nrf_gpio_reconfigure+0xa2>
   20ed4:	7812      	ldrb	r2, [r2, #0]
   20ed6:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20ed8:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20eda:	b324      	cbz	r4, 20f26 <nrf_gpio_reconfigure+0xa6>
   20edc:	7822      	ldrb	r2, [r4, #0]
   20ede:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   20ee0:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   20ee2:	b317      	cbz	r7, 20f2a <nrf_gpio_reconfigure+0xaa>
   20ee4:	783a      	ldrb	r2, [r7, #0]
   20ee6:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20ee8:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   20eea:	b306      	cbz	r6, 20f2e <nrf_gpio_reconfigure+0xae>
   20eec:	7832      	ldrb	r2, [r6, #0]
   20eee:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   20ef0:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20ef2:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   20ef4:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   20ef8:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
   20efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   20efe:	4d0d      	ldr	r5, [pc, #52]	; (20f34 <nrf_gpio_reconfigure+0xb4>)
   20f00:	e7c9      	b.n	20e96 <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20f02:	2000      	movs	r0, #0
   20f04:	e7cd      	b.n	20ea2 <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   20f06:	f04f 0e00 	mov.w	lr, #0
   20f0a:	e7cd      	b.n	20ea8 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20f0c:	f04f 0e00 	mov.w	lr, #0
   20f10:	e7cf      	b.n	20eb2 <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   20f12:	f04f 0e00 	mov.w	lr, #0
   20f16:	e7d1      	b.n	20ebc <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   20f18:	f04f 0e00 	mov.w	lr, #0
   20f1c:	e7d3      	b.n	20ec6 <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20f1e:	2300      	movs	r3, #0
   20f20:	e7d7      	b.n	20ed2 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   20f22:	2200      	movs	r2, #0
   20f24:	e7d8      	b.n	20ed8 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20f26:	2200      	movs	r2, #0
   20f28:	e7da      	b.n	20ee0 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   20f2a:	2200      	movs	r2, #0
   20f2c:	e7dc      	b.n	20ee8 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   20f2e:	2200      	movs	r2, #0
   20f30:	e7de      	b.n	20ef0 <nrf_gpio_reconfigure+0x70>
   20f32:	bf00      	nop
   20f34:	50000300 	.word	0x50000300

00020f38 <nrf_gpio_latches_read_and_clear>:
{
   20f38:	b500      	push	{lr}
   20f3a:	b083      	sub	sp, #12
   20f3c:	4684      	mov	ip, r0
   20f3e:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   20f40:	4b0d      	ldr	r3, [pc, #52]	; (20f78 <nrf_gpio_latches_read_and_clear+0x40>)
   20f42:	e893 0003 	ldmia.w	r3, {r0, r1}
   20f46:	ab02      	add	r3, sp, #8
   20f48:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   20f4c:	4663      	mov	r3, ip
   20f4e:	e00b      	b.n	20f68 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   20f50:	a902      	add	r1, sp, #8
   20f52:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   20f56:	f851 1c08 	ldr.w	r1, [r1, #-8]
   20f5a:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
   20f5e:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   20f62:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   20f66:	3301      	adds	r3, #1
   20f68:	eb0c 000e 	add.w	r0, ip, lr
   20f6c:	4298      	cmp	r0, r3
   20f6e:	d8ef      	bhi.n	20f50 <nrf_gpio_latches_read_and_clear+0x18>
}
   20f70:	b003      	add	sp, #12
   20f72:	f85d fb04 	ldr.w	pc, [sp], #4
   20f76:	bf00      	nop
   20f78:	0002f030 	.word	0x0002f030

00020f7c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   20f7c:	3008      	adds	r0, #8
   20f7e:	4b03      	ldr	r3, [pc, #12]	; (20f8c <pin_in_use+0x10>)
   20f80:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20f84:	f000 0001 	and.w	r0, r0, #1
   20f88:	4770      	bx	lr
   20f8a:	bf00      	nop
   20f8c:	200007ec 	.word	0x200007ec

00020f90 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20f90:	3008      	adds	r0, #8
   20f92:	4b03      	ldr	r3, [pc, #12]	; (20fa0 <pin_in_use_by_te+0x10>)
   20f94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20f98:	f3c0 1040 	ubfx	r0, r0, #5, #1
   20f9c:	4770      	bx	lr
   20f9e:	bf00      	nop
   20fa0:	200007ec 	.word	0x200007ec

00020fa4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   20fa4:	3008      	adds	r0, #8
   20fa6:	4b04      	ldr	r3, [pc, #16]	; (20fb8 <pin_has_trigger+0x14>)
   20fa8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20fac:	f010 001c 	ands.w	r0, r0, #28
   20fb0:	bf18      	it	ne
   20fb2:	2001      	movne	r0, #1
   20fb4:	4770      	bx	lr
   20fb6:	bf00      	nop
   20fb8:	200007ec 	.word	0x200007ec

00020fbc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20fbc:	3008      	adds	r0, #8
   20fbe:	4b03      	ldr	r3, [pc, #12]	; (20fcc <pin_is_output+0x10>)
   20fc0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20fc4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   20fc8:	4770      	bx	lr
   20fca:	bf00      	nop
   20fcc:	200007ec 	.word	0x200007ec

00020fd0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20fd0:	3008      	adds	r0, #8
   20fd2:	4b02      	ldr	r3, [pc, #8]	; (20fdc <pin_te_get+0xc>)
   20fd4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   20fd8:	0b40      	lsrs	r0, r0, #13
   20fda:	4770      	bx	lr
   20fdc:	200007ec 	.word	0x200007ec

00020fe0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20fe0:	2200      	movs	r2, #0
   20fe2:	e004      	b.n	20fee <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   20fe4:	f04f 33ff 	mov.w	r3, #4294967295
   20fe8:	4283      	cmp	r3, r0
   20fea:	d00f      	beq.n	2100c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20fec:	3201      	adds	r2, #1
   20fee:	2a2f      	cmp	r2, #47	; 0x2f
   20ff0:	d80a      	bhi.n	21008 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   20ff2:	f102 0308 	add.w	r3, r2, #8
   20ff6:	4906      	ldr	r1, [pc, #24]	; (21010 <handler_in_use+0x30>)
   20ff8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   20ffc:	f413 7f80 	tst.w	r3, #256	; 0x100
   21000:	d0f0      	beq.n	20fe4 <handler_in_use+0x4>
   21002:	f3c3 2343 	ubfx	r3, r3, #9, #4
   21006:	e7ef      	b.n	20fe8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   21008:	2000      	movs	r0, #0
   2100a:	4770      	bx	lr
            return true;
   2100c:	2001      	movs	r0, #1
}
   2100e:	4770      	bx	lr
   21010:	200007ec 	.word	0x200007ec

00021014 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   21014:	2300      	movs	r3, #0
   21016:	b113      	cbz	r3, 2101e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   21018:	f04f 30ff 	mov.w	r0, #4294967295
}
   2101c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2101e:	4a07      	ldr	r2, [pc, #28]	; (2103c <find_handler+0x28>)
   21020:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   21024:	4282      	cmp	r2, r0
   21026:	d001      	beq.n	2102c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   21028:	3301      	adds	r3, #1
   2102a:	e7f4      	b.n	21016 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2102c:	4a03      	ldr	r2, [pc, #12]	; (2103c <find_handler+0x28>)
   2102e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   21032:	6852      	ldr	r2, [r2, #4]
   21034:	428a      	cmp	r2, r1
   21036:	d1f7      	bne.n	21028 <find_handler+0x14>
            return i;
   21038:	4618      	mov	r0, r3
   2103a:	4770      	bx	lr
   2103c:	200007ec 	.word	0x200007ec

00021040 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21040:	f100 0208 	add.w	r2, r0, #8
   21044:	4b0f      	ldr	r3, [pc, #60]	; (21084 <get_initial_sense+0x44>)
   21046:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   2104a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2104e:	2b04      	cmp	r3, #4
   21050:	d012      	beq.n	21078 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   21052:	2b05      	cmp	r3, #5
   21054:	d012      	beq.n	2107c <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
   21056:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   2105a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2105c:	2801      	cmp	r0, #1
   2105e:	d009      	beq.n	21074 <get_initial_sense+0x34>
        case 0: return NRF_P0;
   21060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   21064:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21068:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2106a:	f013 0f01 	tst.w	r3, #1
   2106e:	d007      	beq.n	21080 <get_initial_sense+0x40>
   21070:	2003      	movs	r0, #3
   21072:	4770      	bx	lr
        case 1: return NRF_P1;
   21074:	4b04      	ldr	r3, [pc, #16]	; (21088 <get_initial_sense+0x48>)
   21076:	e7f5      	b.n	21064 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   21078:	2003      	movs	r0, #3
   2107a:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2107c:	2002      	movs	r0, #2
   2107e:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21080:	2002      	movs	r0, #2
    }

    return sense;
}
   21082:	4770      	bx	lr
   21084:	200007ec 	.word	0x200007ec
   21088:	50000300 	.word	0x50000300

0002108c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2108c:	3008      	adds	r0, #8
   2108e:	4b06      	ldr	r3, [pc, #24]	; (210a8 <channel_handler_get+0x1c>)
   21090:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   21094:	f410 7f80 	tst.w	r0, #256	; 0x100
   21098:	d004      	beq.n	210a4 <channel_handler_get+0x18>
   2109a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   2109e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   210a2:	4770      	bx	lr
        return NULL;
   210a4:	2000      	movs	r0, #0
}
   210a6:	4770      	bx	lr
   210a8:	200007ec 	.word	0x200007ec

000210ac <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   210ac:	b570      	push	{r4, r5, r6, lr}
   210ae:	4604      	mov	r4, r0
   210b0:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   210b2:	f7ff ffeb 	bl	2108c <channel_handler_get>

    if (handler)
   210b6:	b120      	cbz	r0, 210c2 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   210b8:	6806      	ldr	r6, [r0, #0]
   210ba:	6842      	ldr	r2, [r0, #4]
   210bc:	4629      	mov	r1, r5
   210be:	4620      	mov	r0, r4
   210c0:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   210c2:	4b04      	ldr	r3, [pc, #16]	; (210d4 <call_handler+0x28>)
   210c4:	689b      	ldr	r3, [r3, #8]
   210c6:	b123      	cbz	r3, 210d2 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   210c8:	4a02      	ldr	r2, [pc, #8]	; (210d4 <call_handler+0x28>)
   210ca:	68d2      	ldr	r2, [r2, #12]
   210cc:	4629      	mov	r1, r5
   210ce:	4620      	mov	r0, r4
   210d0:	4798      	blx	r3
    }
}
   210d2:	bd70      	pop	{r4, r5, r6, pc}
   210d4:	200007ec 	.word	0x200007ec

000210d8 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   210d8:	b570      	push	{r4, r5, r6, lr}
   210da:	4606      	mov	r6, r0
   210dc:	460c      	mov	r4, r1
   210de:	4615      	mov	r5, r2
    if (is_level(trigger))
   210e0:	4608      	mov	r0, r1
   210e2:	f00c f8e5 	bl	2d2b0 <is_level>
   210e6:	b960      	cbnz	r0, 21102 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   210e8:	2d02      	cmp	r5, #2
   210ea:	d028      	beq.n	2113e <next_sense_cond_call_handler+0x66>
   210ec:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   210ee:	4630      	mov	r0, r6
   210f0:	f00c f8b6 	bl	2d260 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   210f4:	2c03      	cmp	r4, #3
   210f6:	d026      	beq.n	21146 <next_sense_cond_call_handler+0x6e>
   210f8:	2d02      	cmp	r5, #2
   210fa:	d022      	beq.n	21142 <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   210fc:	2d03      	cmp	r5, #3
   210fe:	d027      	beq.n	21150 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   21100:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   21102:	4621      	mov	r1, r4
   21104:	4630      	mov	r0, r6
   21106:	f7ff ffd1 	bl	210ac <call_handler>
    *p_pin = pin_number & 0x1F;
   2110a:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   2110e:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21110:	2a01      	cmp	r2, #1
   21112:	d012      	beq.n	2113a <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
   21114:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21118:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   21120:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21124:	429d      	cmp	r5, r3
   21126:	d1eb      	bne.n	21100 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21128:	2100      	movs	r1, #0
   2112a:	4630      	mov	r0, r6
   2112c:	f00c f898 	bl	2d260 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   21130:	4629      	mov	r1, r5
   21132:	4630      	mov	r0, r6
   21134:	f00c f894 	bl	2d260 <nrf_gpio_cfg_sense_set>
   21138:	e7e2      	b.n	21100 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   2113a:	4a07      	ldr	r2, [pc, #28]	; (21158 <next_sense_cond_call_handler+0x80>)
   2113c:	e7ec      	b.n	21118 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2113e:	2103      	movs	r1, #3
   21140:	e7d5      	b.n	210ee <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21142:	2c01      	cmp	r4, #1
   21144:	d1da      	bne.n	210fc <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   21146:	4621      	mov	r1, r4
   21148:	4630      	mov	r0, r6
   2114a:	f7ff ffaf 	bl	210ac <call_handler>
}
   2114e:	e7d7      	b.n	21100 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21150:	2c02      	cmp	r4, #2
   21152:	d1d5      	bne.n	21100 <next_sense_cond_call_handler+0x28>
   21154:	e7f7      	b.n	21146 <next_sense_cond_call_handler+0x6e>
   21156:	bf00      	nop
   21158:	50000300 	.word	0x50000300

0002115c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2115c:	f100 0208 	add.w	r2, r0, #8
   21160:	4b0e      	ldr	r3, [pc, #56]	; (2119c <release_handler+0x40>)
   21162:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   21166:	f413 7f80 	tst.w	r3, #256	; 0x100
   2116a:	d016      	beq.n	2119a <release_handler+0x3e>
{
   2116c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2116e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   21172:	4610      	mov	r0, r2
   21174:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   21178:	4a08      	ldr	r2, [pc, #32]	; (2119c <release_handler+0x40>)
   2117a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   2117e:	4620      	mov	r0, r4
   21180:	f7ff ff2e 	bl	20fe0 <handler_in_use>
   21184:	b100      	cbz	r0, 21188 <release_handler+0x2c>
}
   21186:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   21188:	4804      	ldr	r0, [pc, #16]	; (2119c <release_handler+0x40>)
   2118a:	2300      	movs	r3, #0
   2118c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21190:	4621      	mov	r1, r4
   21192:	3074      	adds	r0, #116	; 0x74
   21194:	f7ff fe52 	bl	20e3c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21198:	e7f5      	b.n	21186 <release_handler+0x2a>
   2119a:	4770      	bx	lr
   2119c:	200007ec 	.word	0x200007ec

000211a0 <pin_handler_trigger_uninit>:
{
   211a0:	b510      	push	{r4, lr}
   211a2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   211a4:	f7ff fef4 	bl	20f90 <pin_in_use_by_te>
   211a8:	b140      	cbz	r0, 211bc <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   211aa:	4620      	mov	r0, r4
   211ac:	f7ff ff10 	bl	20fd0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   211b0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   211b4:	4b06      	ldr	r3, [pc, #24]	; (211d0 <pin_handler_trigger_uninit+0x30>)
   211b6:	2200      	movs	r2, #0
   211b8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   211bc:	4620      	mov	r0, r4
   211be:	f7ff ffcd 	bl	2115c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   211c2:	3408      	adds	r4, #8
   211c4:	4b03      	ldr	r3, [pc, #12]	; (211d4 <pin_handler_trigger_uninit+0x34>)
   211c6:	2200      	movs	r2, #0
   211c8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   211cc:	bd10      	pop	{r4, pc}
   211ce:	bf00      	nop
   211d0:	40006000 	.word	0x40006000
   211d4:	200007ec 	.word	0x200007ec

000211d8 <pin_handler_set>:
{
   211d8:	b570      	push	{r4, r5, r6, lr}
   211da:	b082      	sub	sp, #8
   211dc:	4605      	mov	r5, r0
   211de:	460e      	mov	r6, r1
   211e0:	4614      	mov	r4, r2
    release_handler(pin);
   211e2:	f7ff ffbb 	bl	2115c <release_handler>
    if (!handler)
   211e6:	b326      	cbz	r6, 21232 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   211e8:	4621      	mov	r1, r4
   211ea:	4630      	mov	r0, r6
   211ec:	f7ff ff12 	bl	21014 <find_handler>
    if (handler_id < 0)
   211f0:	1e03      	subs	r3, r0, #0
   211f2:	db13      	blt.n	2121c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   211f4:	4910      	ldr	r1, [pc, #64]	; (21238 <pin_handler_set+0x60>)
   211f6:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   211fa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   211fe:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21200:	f105 0008 	add.w	r0, r5, #8
   21204:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   21208:	025b      	lsls	r3, r3, #9
   2120a:	b29b      	uxth	r3, r3
   2120c:	4313      	orrs	r3, r2
   2120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21212:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   21216:	4809      	ldr	r0, [pc, #36]	; (2123c <pin_handler_set+0x64>)
}
   21218:	b002      	add	sp, #8
   2121a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2121c:	f10d 0107 	add.w	r1, sp, #7
   21220:	4807      	ldr	r0, [pc, #28]	; (21240 <pin_handler_set+0x68>)
   21222:	f7ff fde3 	bl	20dec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21226:	4b05      	ldr	r3, [pc, #20]	; (2123c <pin_handler_set+0x64>)
   21228:	4298      	cmp	r0, r3
   2122a:	d1f5      	bne.n	21218 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   2122c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21230:	e7e0      	b.n	211f4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   21232:	4802      	ldr	r0, [pc, #8]	; (2123c <pin_handler_set+0x64>)
   21234:	e7f0      	b.n	21218 <pin_handler_set+0x40>
   21236:	bf00      	nop
   21238:	200007ec 	.word	0x200007ec
   2123c:	0bad0000 	.word	0x0bad0000
   21240:	20000860 	.word	0x20000860

00021244 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   21244:	b570      	push	{r4, r5, r6, lr}
   21246:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   21248:	466a      	mov	r2, sp
   2124a:	2102      	movs	r1, #2
   2124c:	2000      	movs	r0, #0
   2124e:	f7ff fe73 	bl	20f38 <nrf_gpio_latches_read_and_clear>
   21252:	e040      	b.n	212d6 <port_event_handle+0x92>
   21254:	4e22      	ldr	r6, [pc, #136]	; (212e0 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21256:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   2125a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   2125e:	f3c2 4201 	ubfx	r2, r2, #16, #2
   21262:	f7ff ff39 	bl	210d8 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   21266:	2301      	movs	r3, #1
   21268:	40ab      	lsls	r3, r5
   2126a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   2126e:	ab02      	add	r3, sp, #8
   21270:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   21274:	f853 0c08 	ldr.w	r0, [r3, #-8]
   21278:	b300      	cbz	r0, 212bc <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
   2127a:	fa90 f0a0 	rbit	r0, r0
   2127e:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   21282:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21286:	f100 0208 	add.w	r2, r0, #8
   2128a:	4b16      	ldr	r3, [pc, #88]	; (212e4 <port_event_handle+0xa0>)
   2128c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   21290:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21294:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   21296:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2129a:	f81d 2005 	ldrb.w	r2, [sp, r5]
   2129e:	2301      	movs	r3, #1
   212a0:	40b3      	lsls	r3, r6
   212a2:	43db      	mvns	r3, r3
   212a4:	b25b      	sxtb	r3, r3
   212a6:	4013      	ands	r3, r2
   212a8:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   212ac:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   212b0:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   212b2:	2b01      	cmp	r3, #1
   212b4:	d0ce      	beq.n	21254 <port_event_handle+0x10>
        case 0: return NRF_P0;
   212b6:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   212ba:	e7cc      	b.n	21256 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   212bc:	3401      	adds	r4, #1
   212be:	2c01      	cmp	r4, #1
   212c0:	d9d5      	bls.n	2126e <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   212c2:	4b09      	ldr	r3, [pc, #36]	; (212e8 <port_event_handle+0xa4>)
   212c4:	2200      	movs	r2, #0
   212c6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   212ca:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   212ce:	4668      	mov	r0, sp
   212d0:	f00b fff3 	bl	2d2ba <latch_pending_read_and_check>
   212d4:	b108      	cbz	r0, 212da <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   212d6:	2400      	movs	r4, #0
   212d8:	e7f1      	b.n	212be <port_event_handle+0x7a>
}
   212da:	b002      	add	sp, #8
   212dc:	bd70      	pop	{r4, r5, r6, pc}
   212de:	bf00      	nop
   212e0:	50000300 	.word	0x50000300
   212e4:	200007ec 	.word	0x200007ec
   212e8:	40006000 	.word	0x40006000

000212ec <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   212ec:	b538      	push	{r3, r4, r5, lr}
   212ee:	4604      	mov	r4, r0
    while (mask)
   212f0:	e018      	b.n	21324 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   212f2:	fa94 f3a4 	rbit	r3, r4
   212f6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   212fa:	2201      	movs	r2, #1
   212fc:	409a      	lsls	r2, r3
   212fe:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21302:	4a0a      	ldr	r2, [pc, #40]	; (2132c <gpiote_evt_handle+0x40>)
   21304:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   21308:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   2130c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   21310:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21314:	f3c0 4001 	ubfx	r0, r0, #16, #2
   21318:	f00b ffc8 	bl	2d2ac <gpiote_polarity_to_trigger>
   2131c:	4601      	mov	r1, r0
   2131e:	4628      	mov	r0, r5
   21320:	f7ff fec4 	bl	210ac <call_handler>
    while (mask)
   21324:	2c00      	cmp	r4, #0
   21326:	d1e4      	bne.n	212f2 <gpiote_evt_handle+0x6>
    }
}
   21328:	bd38      	pop	{r3, r4, r5, pc}
   2132a:	bf00      	nop
   2132c:	40006000 	.word	0x40006000

00021330 <nrfx_gpiote_input_configure>:
{
   21330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21334:	b084      	sub	sp, #16
   21336:	4604      	mov	r4, r0
   21338:	4615      	mov	r5, r2
   2133a:	461e      	mov	r6, r3
    if (p_input_config)
   2133c:	b309      	cbz	r1, 21382 <nrfx_gpiote_input_configure+0x52>
   2133e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   21340:	f00b ff9e 	bl	2d280 <pin_is_task_output>
   21344:	2800      	cmp	r0, #0
   21346:	d13f      	bne.n	213c8 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21348:	2300      	movs	r3, #0
   2134a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2134e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   21352:	9301      	str	r3, [sp, #4]
   21354:	9300      	str	r3, [sp, #0]
   21356:	463b      	mov	r3, r7
   21358:	f10d 020f 	add.w	r2, sp, #15
   2135c:	f10d 010e 	add.w	r1, sp, #14
   21360:	4620      	mov	r0, r4
   21362:	f7ff fd8d 	bl	20e80 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   21366:	4a38      	ldr	r2, [pc, #224]	; (21448 <nrfx_gpiote_input_configure+0x118>)
   21368:	f104 0108 	add.w	r1, r4, #8
   2136c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21370:	f023 0302 	bic.w	r3, r3, #2
   21374:	b29b      	uxth	r3, r3
   21376:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2137a:	f043 0301 	orr.w	r3, r3, #1
   2137e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   21382:	b1bd      	cbz	r5, 213b4 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21384:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   21386:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   2138a:	4620      	mov	r0, r4
   2138c:	f7ff fe16 	bl	20fbc <pin_is_output>
   21390:	b1e0      	cbz	r0, 213cc <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   21392:	f1b8 0f00 	cmp.w	r8, #0
   21396:	d151      	bne.n	2143c <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   21398:	4a2b      	ldr	r2, [pc, #172]	; (21448 <nrfx_gpiote_input_configure+0x118>)
   2139a:	f104 0108 	add.w	r1, r4, #8
   2139e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   213a2:	f023 031c 	bic.w	r3, r3, #28
   213a6:	b29b      	uxth	r3, r3
   213a8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   213ac:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   213b0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   213b4:	2e00      	cmp	r6, #0
   213b6:	d045      	beq.n	21444 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   213b8:	6872      	ldr	r2, [r6, #4]
   213ba:	6831      	ldr	r1, [r6, #0]
   213bc:	4620      	mov	r0, r4
   213be:	f7ff ff0b 	bl	211d8 <pin_handler_set>
}
   213c2:	b004      	add	sp, #16
   213c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   213c8:	4820      	ldr	r0, [pc, #128]	; (2144c <nrfx_gpiote_input_configure+0x11c>)
   213ca:	e7fa      	b.n	213c2 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   213cc:	4a1e      	ldr	r2, [pc, #120]	; (21448 <nrfx_gpiote_input_configure+0x118>)
   213ce:	f104 0108 	add.w	r1, r4, #8
   213d2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   213d6:	f023 0320 	bic.w	r3, r3, #32
   213da:	04db      	lsls	r3, r3, #19
   213dc:	0cdb      	lsrs	r3, r3, #19
   213de:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   213e2:	f1b8 0f00 	cmp.w	r8, #0
   213e6:	d0d7      	beq.n	21398 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   213e8:	2f03      	cmp	r7, #3
   213ea:	d829      	bhi.n	21440 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   213ec:	686b      	ldr	r3, [r5, #4]
   213ee:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   213f0:	b937      	cbnz	r7, 21400 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   213f2:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   213f6:	4b16      	ldr	r3, [pc, #88]	; (21450 <nrfx_gpiote_input_configure+0x120>)
   213f8:	2200      	movs	r2, #0
   213fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   213fe:	e7cb      	b.n	21398 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   21400:	4638      	mov	r0, r7
   21402:	f00b ff54 	bl	2d2ae <gpiote_trigger_to_polarity>
   21406:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21408:	4811      	ldr	r0, [pc, #68]	; (21450 <nrfx_gpiote_input_configure+0x120>)
   2140a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   2140e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   21412:	f022 0203 	bic.w	r2, r2, #3
   21416:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   2141a:	4622      	mov	r2, r4
   2141c:	4629      	mov	r1, r5
   2141e:	f00b fee5 	bl	2d1ec <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21422:	4a09      	ldr	r2, [pc, #36]	; (21448 <nrfx_gpiote_input_configure+0x118>)
   21424:	f104 0108 	add.w	r1, r4, #8
   21428:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2142c:	036d      	lsls	r5, r5, #13
   2142e:	b2ad      	uxth	r5, r5
   21430:	432b      	orrs	r3, r5
   21432:	f043 0320 	orr.w	r3, r3, #32
   21436:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   2143a:	e7ad      	b.n	21398 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   2143c:	4803      	ldr	r0, [pc, #12]	; (2144c <nrfx_gpiote_input_configure+0x11c>)
   2143e:	e7c0      	b.n	213c2 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   21440:	4802      	ldr	r0, [pc, #8]	; (2144c <nrfx_gpiote_input_configure+0x11c>)
   21442:	e7be      	b.n	213c2 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   21444:	4803      	ldr	r0, [pc, #12]	; (21454 <nrfx_gpiote_input_configure+0x124>)
   21446:	e7bc      	b.n	213c2 <nrfx_gpiote_input_configure+0x92>
   21448:	200007ec 	.word	0x200007ec
   2144c:	0bad0004 	.word	0x0bad0004
   21450:	40006000 	.word	0x40006000
   21454:	0bad0000 	.word	0x0bad0000

00021458 <nrfx_gpiote_output_configure>:
{
   21458:	b570      	push	{r4, r5, r6, lr}
   2145a:	b084      	sub	sp, #16
   2145c:	4604      	mov	r4, r0
   2145e:	4615      	mov	r5, r2
    if (p_config)
   21460:	b329      	cbz	r1, 214ae <nrfx_gpiote_output_configure+0x56>
   21462:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21464:	f00b ff1b 	bl	2d29e <pin_is_input>
   21468:	b120      	cbz	r0, 21474 <nrfx_gpiote_output_configure+0x1c>
   2146a:	4620      	mov	r0, r4
   2146c:	f7ff fd90 	bl	20f90 <pin_in_use_by_te>
   21470:	2800      	cmp	r0, #0
   21472:	d138      	bne.n	214e6 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   21474:	4620      	mov	r0, r4
   21476:	f7ff fd95 	bl	20fa4 <pin_has_trigger>
   2147a:	b110      	cbz	r0, 21482 <nrfx_gpiote_output_configure+0x2a>
   2147c:	7873      	ldrb	r3, [r6, #1]
   2147e:	2b01      	cmp	r3, #1
   21480:	d031      	beq.n	214e6 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21482:	2301      	movs	r3, #1
   21484:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   21488:	2300      	movs	r3, #0
   2148a:	9301      	str	r3, [sp, #4]
   2148c:	9600      	str	r6, [sp, #0]
   2148e:	1cb3      	adds	r3, r6, #2
   21490:	1c72      	adds	r2, r6, #1
   21492:	f10d 010f 	add.w	r1, sp, #15
   21496:	4620      	mov	r0, r4
   21498:	f7ff fcf2 	bl	20e80 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2149c:	4a1f      	ldr	r2, [pc, #124]	; (2151c <nrfx_gpiote_output_configure+0xc4>)
   2149e:	f104 0108 	add.w	r1, r4, #8
   214a2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   214a6:	f043 0303 	orr.w	r3, r3, #3
   214aa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   214ae:	b385      	cbz	r5, 21512 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   214b0:	4620      	mov	r0, r4
   214b2:	f00b fef4 	bl	2d29e <pin_is_input>
   214b6:	bb70      	cbnz	r0, 21516 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   214b8:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   214ba:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   214be:	4b18      	ldr	r3, [pc, #96]	; (21520 <nrfx_gpiote_output_configure+0xc8>)
   214c0:	2100      	movs	r1, #0
   214c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   214c6:	4a15      	ldr	r2, [pc, #84]	; (2151c <nrfx_gpiote_output_configure+0xc4>)
   214c8:	f104 0108 	add.w	r1, r4, #8
   214cc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   214d0:	f023 0320 	bic.w	r3, r3, #32
   214d4:	04db      	lsls	r3, r3, #19
   214d6:	0cdb      	lsrs	r3, r3, #19
   214d8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   214dc:	786b      	ldrb	r3, [r5, #1]
   214de:	b923      	cbnz	r3, 214ea <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   214e0:	4810      	ldr	r0, [pc, #64]	; (21524 <nrfx_gpiote_output_configure+0xcc>)
}
   214e2:	b004      	add	sp, #16
   214e4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   214e6:	4810      	ldr	r0, [pc, #64]	; (21528 <nrfx_gpiote_output_configure+0xd0>)
   214e8:	e7fb      	b.n	214e2 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   214ea:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   214ec:	9200      	str	r2, [sp, #0]
   214ee:	4622      	mov	r2, r4
   214f0:	4631      	mov	r1, r6
   214f2:	480b      	ldr	r0, [pc, #44]	; (21520 <nrfx_gpiote_output_configure+0xc8>)
   214f4:	f00b fe94 	bl	2d220 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   214f8:	4a08      	ldr	r2, [pc, #32]	; (2151c <nrfx_gpiote_output_configure+0xc4>)
   214fa:	3408      	adds	r4, #8
   214fc:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   21500:	0376      	lsls	r6, r6, #13
   21502:	b2b6      	uxth	r6, r6
   21504:	4333      	orrs	r3, r6
   21506:	f043 0320 	orr.w	r3, r3, #32
   2150a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   2150e:	4805      	ldr	r0, [pc, #20]	; (21524 <nrfx_gpiote_output_configure+0xcc>)
   21510:	e7e7      	b.n	214e2 <nrfx_gpiote_output_configure+0x8a>
   21512:	4804      	ldr	r0, [pc, #16]	; (21524 <nrfx_gpiote_output_configure+0xcc>)
   21514:	e7e5      	b.n	214e2 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   21516:	4804      	ldr	r0, [pc, #16]	; (21528 <nrfx_gpiote_output_configure+0xd0>)
   21518:	e7e3      	b.n	214e2 <nrfx_gpiote_output_configure+0x8a>
   2151a:	bf00      	nop
   2151c:	200007ec 	.word	0x200007ec
   21520:	40006000 	.word	0x40006000
   21524:	0bad0000 	.word	0x0bad0000
   21528:	0bad0004 	.word	0x0bad0004

0002152c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2152c:	4b01      	ldr	r3, [pc, #4]	; (21534 <nrfx_gpiote_global_callback_set+0x8>)
   2152e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   21530:	60d9      	str	r1, [r3, #12]
}
   21532:	4770      	bx	lr
   21534:	200007ec 	.word	0x200007ec

00021538 <nrfx_gpiote_channel_get>:
{
   21538:	b538      	push	{r3, r4, r5, lr}
   2153a:	4604      	mov	r4, r0
   2153c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   2153e:	f7ff fd27 	bl	20f90 <pin_in_use_by_te>
   21542:	b140      	cbz	r0, 21556 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21544:	f104 0008 	add.w	r0, r4, #8
   21548:	4b04      	ldr	r3, [pc, #16]	; (2155c <nrfx_gpiote_channel_get+0x24>)
   2154a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   2154e:	0b5b      	lsrs	r3, r3, #13
   21550:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   21552:	4803      	ldr	r0, [pc, #12]	; (21560 <nrfx_gpiote_channel_get+0x28>)
}
   21554:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21556:	4803      	ldr	r0, [pc, #12]	; (21564 <nrfx_gpiote_channel_get+0x2c>)
   21558:	e7fc      	b.n	21554 <nrfx_gpiote_channel_get+0x1c>
   2155a:	bf00      	nop
   2155c:	200007ec 	.word	0x200007ec
   21560:	0bad0000 	.word	0x0bad0000
   21564:	0bad0004 	.word	0x0bad0004

00021568 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21568:	4b0f      	ldr	r3, [pc, #60]	; (215a8 <nrfx_gpiote_init+0x40>)
   2156a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   2156e:	b10b      	cbz	r3, 21574 <nrfx_gpiote_init+0xc>
        return err_code;
   21570:	480e      	ldr	r0, [pc, #56]	; (215ac <nrfx_gpiote_init+0x44>)
}
   21572:	4770      	bx	lr
{
   21574:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   21576:	4c0e      	ldr	r4, [pc, #56]	; (215b0 <nrfx_gpiote_init+0x48>)
   21578:	2260      	movs	r2, #96	; 0x60
   2157a:	2100      	movs	r1, #0
   2157c:	4620      	mov	r0, r4
   2157e:	f00c feb2 	bl	2e2e6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   21582:	2006      	movs	r0, #6
   21584:	f007 ffc1 	bl	2950a <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21588:	4b0a      	ldr	r3, [pc, #40]	; (215b4 <nrfx_gpiote_init+0x4c>)
   2158a:	2200      	movs	r2, #0
   2158c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   21590:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   21594:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21598:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2159c:	2301      	movs	r3, #1
   2159e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   215a2:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
   215a4:	4804      	ldr	r0, [pc, #16]	; (215b8 <nrfx_gpiote_init+0x50>)
}
   215a6:	bd10      	pop	{r4, pc}
   215a8:	200007ec 	.word	0x200007ec
   215ac:	0bad0005 	.word	0x0bad0005
   215b0:	200007fc 	.word	0x200007fc
   215b4:	40006000 	.word	0x40006000
   215b8:	0bad0000 	.word	0x0bad0000

000215bc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   215bc:	4b03      	ldr	r3, [pc, #12]	; (215cc <nrfx_gpiote_is_init+0x10>)
   215be:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   215c2:	3800      	subs	r0, #0
   215c4:	bf18      	it	ne
   215c6:	2001      	movne	r0, #1
   215c8:	4770      	bx	lr
   215ca:	bf00      	nop
   215cc:	200007ec 	.word	0x200007ec

000215d0 <nrfx_gpiote_channel_free>:
{
   215d0:	b508      	push	{r3, lr}
   215d2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   215d4:	4801      	ldr	r0, [pc, #4]	; (215dc <nrfx_gpiote_channel_free+0xc>)
   215d6:	f7ff fc31 	bl	20e3c <nrfx_flag32_free>
}
   215da:	bd08      	pop	{r3, pc}
   215dc:	2000085c 	.word	0x2000085c

000215e0 <nrfx_gpiote_channel_alloc>:
{
   215e0:	b508      	push	{r3, lr}
   215e2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   215e4:	4801      	ldr	r0, [pc, #4]	; (215ec <nrfx_gpiote_channel_alloc+0xc>)
   215e6:	f7ff fc01 	bl	20dec <nrfx_flag32_alloc>
}
   215ea:	bd08      	pop	{r3, pc}
   215ec:	2000085c 	.word	0x2000085c

000215f0 <nrfx_gpiote_trigger_enable>:
{
   215f0:	b538      	push	{r3, r4, r5, lr}
   215f2:	4604      	mov	r4, r0
   215f4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   215f6:	f7ff fccb 	bl	20f90 <pin_in_use_by_te>
   215fa:	b300      	cbz	r0, 2163e <nrfx_gpiote_trigger_enable+0x4e>
   215fc:	4620      	mov	r0, r4
   215fe:	f00b fe4e 	bl	2d29e <pin_is_input>
   21602:	b1e0      	cbz	r0, 2163e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   21604:	4620      	mov	r0, r4
   21606:	f7ff fce3 	bl	20fd0 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2160a:	0083      	lsls	r3, r0, #2
   2160c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   21610:	b29b      	uxth	r3, r3
   21612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21616:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2161a:	2200      	movs	r2, #0
   2161c:	601a      	str	r2, [r3, #0]
   2161e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21620:	4a0b      	ldr	r2, [pc, #44]	; (21650 <nrfx_gpiote_trigger_enable+0x60>)
   21622:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   21626:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2162a:	f043 0301 	orr.w	r3, r3, #1
   2162e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   21632:	b15d      	cbz	r5, 2164c <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21634:	2301      	movs	r3, #1
   21636:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   21638:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2163c:	e006      	b.n	2164c <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2163e:	4620      	mov	r0, r4
   21640:	f7ff fcfe 	bl	21040 <get_initial_sense>
   21644:	4601      	mov	r1, r0
   21646:	4620      	mov	r0, r4
   21648:	f00b fe0a 	bl	2d260 <nrf_gpio_cfg_sense_set>
}
   2164c:	bd38      	pop	{r3, r4, r5, pc}
   2164e:	bf00      	nop
   21650:	40006000 	.word	0x40006000

00021654 <nrfx_gpiote_trigger_disable>:
{
   21654:	b510      	push	{r4, lr}
   21656:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21658:	f7ff fc9a 	bl	20f90 <pin_in_use_by_te>
   2165c:	b1a0      	cbz	r0, 21688 <nrfx_gpiote_trigger_disable+0x34>
   2165e:	4620      	mov	r0, r4
   21660:	f00b fe1d 	bl	2d29e <pin_is_input>
   21664:	b180      	cbz	r0, 21688 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   21666:	4620      	mov	r0, r4
   21668:	f7ff fcb2 	bl	20fd0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2166c:	2201      	movs	r2, #1
   2166e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   21670:	4b08      	ldr	r3, [pc, #32]	; (21694 <nrfx_gpiote_trigger_disable+0x40>)
   21672:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21676:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2167a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   2167e:	f022 0203 	bic.w	r2, r2, #3
   21682:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   21686:	e003      	b.n	21690 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21688:	2100      	movs	r1, #0
   2168a:	4620      	mov	r0, r4
   2168c:	f00b fde8 	bl	2d260 <nrf_gpio_cfg_sense_set>
}
   21690:	bd10      	pop	{r4, pc}
   21692:	bf00      	nop
   21694:	40006000 	.word	0x40006000

00021698 <nrfx_gpiote_pin_uninit>:
{
   21698:	b510      	push	{r4, lr}
   2169a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   2169c:	f7ff fc6e 	bl	20f7c <pin_in_use>
   216a0:	b908      	cbnz	r0, 216a6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   216a2:	480c      	ldr	r0, [pc, #48]	; (216d4 <nrfx_gpiote_pin_uninit+0x3c>)
}
   216a4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   216a6:	4620      	mov	r0, r4
   216a8:	f7ff ffd4 	bl	21654 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   216ac:	4620      	mov	r0, r4
   216ae:	f7ff fd77 	bl	211a0 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   216b2:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   216b6:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   216b8:	2c01      	cmp	r4, #1
   216ba:	d008      	beq.n	216ce <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   216bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   216c0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   216c4:	2102      	movs	r1, #2
   216c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   216ca:	4803      	ldr	r0, [pc, #12]	; (216d8 <nrfx_gpiote_pin_uninit+0x40>)
   216cc:	e7ea      	b.n	216a4 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   216ce:	4a03      	ldr	r2, [pc, #12]	; (216dc <nrfx_gpiote_pin_uninit+0x44>)
   216d0:	e7f6      	b.n	216c0 <nrfx_gpiote_pin_uninit+0x28>
   216d2:	bf00      	nop
   216d4:	0bad0004 	.word	0x0bad0004
   216d8:	0bad0000 	.word	0x0bad0000
   216dc:	50000300 	.word	0x50000300

000216e0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   216e0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   216e2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   216e4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   216e8:	2100      	movs	r1, #0
    uint32_t status = 0;
   216ea:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   216ec:	e003      	b.n	216f6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   216ee:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   216f0:	3304      	adds	r3, #4
   216f2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   216f4:	3101      	adds	r1, #1
   216f6:	2907      	cmp	r1, #7
   216f8:	d814      	bhi.n	21724 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   216fa:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   216fe:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   21702:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   21704:	2a00      	cmp	r2, #0
   21706:	d0f2      	beq.n	216ee <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   21708:	4a0c      	ldr	r2, [pc, #48]	; (2173c <nrfx_gpiote_irq_handler+0x5c>)
   2170a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   2170e:	4210      	tst	r0, r2
   21710:	d0ed      	beq.n	216ee <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   21712:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   21716:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2171a:	2500      	movs	r5, #0
   2171c:	6015      	str	r5, [r2, #0]
   2171e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   21720:	4304      	orrs	r4, r0
   21722:	e7e4      	b.n	216ee <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21724:	4b05      	ldr	r3, [pc, #20]	; (2173c <nrfx_gpiote_irq_handler+0x5c>)
   21726:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2172a:	b91b      	cbnz	r3, 21734 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   2172c:	4620      	mov	r0, r4
   2172e:	f7ff fddd 	bl	212ec <gpiote_evt_handle>
}
   21732:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   21734:	f7ff fd86 	bl	21244 <port_event_handle>
   21738:	e7f8      	b.n	2172c <nrfx_gpiote_irq_handler+0x4c>
   2173a:	bf00      	nop
   2173c:	40006000 	.word	0x40006000

00021740 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   21740:	b508      	push	{r3, lr}
   21742:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   21744:	4801      	ldr	r0, [pc, #4]	; (2174c <nrfx_ppi_channel_alloc+0xc>)
   21746:	f7ff fb51 	bl	20dec <nrfx_flag32_alloc>
}
   2174a:	bd08      	pop	{r3, pc}
   2174c:	20000868 	.word	0x20000868

00021750 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21750:	4b12      	ldr	r3, [pc, #72]	; (2179c <_DoInit+0x4c>)
   21752:	2203      	movs	r2, #3
   21754:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   21756:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   21758:	4911      	ldr	r1, [pc, #68]	; (217a0 <_DoInit+0x50>)
   2175a:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2175c:	4a11      	ldr	r2, [pc, #68]	; (217a4 <_DoInit+0x54>)
   2175e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   21760:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21764:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   21766:	2200      	movs	r2, #0
   21768:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2176a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2176c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   2176e:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   21770:	490d      	ldr	r1, [pc, #52]	; (217a8 <_DoInit+0x58>)
   21772:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   21774:	2110      	movs	r1, #16
   21776:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   21778:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2177a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2177c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   2177e:	4a0b      	ldr	r2, [pc, #44]	; (217ac <_DoInit+0x5c>)
   21780:	6810      	ldr	r0, [r2, #0]
   21782:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   21786:	4a0a      	ldr	r2, [pc, #40]	; (217b0 <_DoInit+0x60>)
   21788:	e892 0003 	ldmia.w	r2, {r0, r1}
   2178c:	6018      	str	r0, [r3, #0]
   2178e:	8099      	strh	r1, [r3, #4]
   21790:	0c09      	lsrs	r1, r1, #16
   21792:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   21794:	2220      	movs	r2, #32
   21796:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   21798:	4770      	bx	lr
   2179a:	bf00      	nop
   2179c:	20003f98 	.word	0x20003f98
   217a0:	00031688 	.word	0x00031688
   217a4:	20003b98 	.word	0x20003b98
   217a8:	20003b88 	.word	0x20003b88
   217ac:	00031694 	.word	0x00031694
   217b0:	00031698 	.word	0x00031698

000217b4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   217b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   217b8:	4604      	mov	r4, r0
   217ba:	460e      	mov	r6, r1
   217bc:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   217be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   217c2:	4a2d      	ldr	r2, [pc, #180]	; (21878 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   217c4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   217c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   217ca:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   217cc:	42bb      	cmp	r3, r7
   217ce:	d84c      	bhi.n	2186a <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   217d0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   217d4:	4a28      	ldr	r2, [pc, #160]	; (21878 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   217d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   217da:	f8d2 8020 	ldr.w	r8, [r2, #32]
   217de:	eba8 0907 	sub.w	r9, r8, r7
   217e2:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   217e6:	4295      	cmp	r5, r2
   217e8:	d904      	bls.n	217f4 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   217ea:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   217ec:	429d      	cmp	r5, r3
   217ee:	d917      	bls.n	21820 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   217f0:	2000      	movs	r0, #0
   217f2:	e03f      	b.n	21874 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   217f4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 21878 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   217f8:	1c63      	adds	r3, r4, #1
   217fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   217fe:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   21802:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21804:	462a      	mov	r2, r5
   21806:	4631      	mov	r1, r6
   21808:	4438      	add	r0, r7
   2180a:	f00c fd5e 	bl	2e2ca <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   2180e:	442f      	add	r7, r5
   21810:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   21814:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   21818:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
      return 1;
   2181c:	2001      	movs	r0, #1
   2181e:	e029      	b.n	21874 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   21820:	1c43      	adds	r3, r0, #1
   21822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21826:	4a14      	ldr	r2, [pc, #80]	; (21878 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   21828:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2182c:	6858      	ldr	r0, [r3, #4]
   2182e:	464a      	mov	r2, r9
   21830:	4631      	mov	r1, r6
   21832:	4438      	add	r0, r7
   21834:	f00c fd49 	bl	2e2ca <memcpy>
      NumBytes -= Rem;
   21838:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   2183c:	eb18 0505 	adds.w	r5, r8, r5
   21840:	d00b      	beq.n	2185a <SEGGER_RTT_WriteSkipNoLock+0xa6>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   21842:	1c63      	adds	r3, r4, #1
   21844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21848:	4a0b      	ldr	r2, [pc, #44]	; (21878 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   2184a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2184e:	462a      	mov	r2, r5
   21850:	eb06 0109 	add.w	r1, r6, r9
   21854:	6858      	ldr	r0, [r3, #4]
   21856:	f00c fd38 	bl	2e2ca <memcpy>
      pRing->WrOff = NumBytes;
   2185a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2185e:	4b06      	ldr	r3, [pc, #24]	; (21878 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   21860:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   21864:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   21866:	2001      	movs	r0, #1
   21868:	e004      	b.n	21874 <SEGGER_RTT_WriteSkipNoLock+0xc0>
    Avail = RdOff - WrOff - 1u;
   2186a:	1bdb      	subs	r3, r3, r7
   2186c:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2186e:	42ab      	cmp	r3, r5
   21870:	d2c0      	bcs.n	217f4 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   21872:	2000      	movs	r0, #0
}
   21874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21878:	20003f98 	.word	0x20003f98

0002187c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   2187c:	4b06      	ldr	r3, [pc, #24]	; (21898 <SEGGER_RTT_HasDataUp+0x1c>)
   2187e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   21882:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   21886:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   21888:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2188c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   21890:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   21892:	1a80      	subs	r0, r0, r2
   21894:	4770      	bx	lr
   21896:	bf00      	nop
   21898:	20003f98 	.word	0x20003f98

0002189c <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   2189c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2189e:	f04f 32ff 	mov.w	r2, #4294967295
   218a2:	f04f 33ff 	mov.w	r3, #4294967295
   218a6:	4802      	ldr	r0, [pc, #8]	; (218b0 <zephyr_rtt_mutex_lock+0x14>)
   218a8:	f000 fbee 	bl	22088 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   218ac:	bd08      	pop	{r3, pc}
   218ae:	bf00      	nop
   218b0:	20000bf4 	.word	0x20000bf4

000218b4 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   218b4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   218b6:	4802      	ldr	r0, [pc, #8]	; (218c0 <zephyr_rtt_mutex_unlock+0xc>)
   218b8:	f000 fc6a 	bl	22190 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   218bc:	bd08      	pop	{r3, pc}
   218be:	bf00      	nop
   218c0:	20000bf4 	.word	0x20000bf4

000218c4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   218c4:	4b03      	ldr	r3, [pc, #12]	; (218d4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   218c6:	e000      	b.n	218ca <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   218c8:	3318      	adds	r3, #24
	while (dev < __device_end) {
   218ca:	4a03      	ldr	r2, [pc, #12]	; (218d8 <z_device_state_init+0x14>)
   218cc:	4293      	cmp	r3, r2
   218ce:	d3fb      	bcc.n	218c8 <z_device_state_init+0x4>
	}
}
   218d0:	4770      	bx	lr
   218d2:	bf00      	nop
   218d4:	0002ebb4 	.word	0x0002ebb4
   218d8:	0002ec74 	.word	0x0002ec74

000218dc <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   218dc:	2804      	cmp	r0, #4
   218de:	d80c      	bhi.n	218fa <reason_to_str+0x1e>
   218e0:	e8df f000 	tbb	[pc, r0]
   218e4:	07050d03 	.word	0x07050d03
   218e8:	09          	.byte	0x09
   218e9:	00          	.byte	0x00
   218ea:	4806      	ldr	r0, [pc, #24]	; (21904 <reason_to_str+0x28>)
   218ec:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   218ee:	4806      	ldr	r0, [pc, #24]	; (21908 <reason_to_str+0x2c>)
   218f0:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   218f2:	4806      	ldr	r0, [pc, #24]	; (2190c <reason_to_str+0x30>)
   218f4:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   218f6:	4806      	ldr	r0, [pc, #24]	; (21910 <reason_to_str+0x34>)
   218f8:	4770      	bx	lr
	default:
		return "Unknown error";
   218fa:	4806      	ldr	r0, [pc, #24]	; (21914 <reason_to_str+0x38>)
   218fc:	4770      	bx	lr
		return "Unhandled interrupt";
   218fe:	4806      	ldr	r0, [pc, #24]	; (21918 <reason_to_str+0x3c>)
	}
}
   21900:	4770      	bx	lr
   21902:	bf00      	nop
   21904:	000316a4 	.word	0x000316a4
   21908:	000316c8 	.word	0x000316c8
   2190c:	000316d8 	.word	0x000316d8
   21910:	000316e4 	.word	0x000316e4
   21914:	000316f4 	.word	0x000316f4
   21918:	000316b4 	.word	0x000316b4

0002191c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2191c:	b130      	cbz	r0, 2192c <thread_name_get+0x10>
{
   2191e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   21920:	f00b fde8 	bl	2d4f4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   21924:	b120      	cbz	r0, 21930 <thread_name_get+0x14>
   21926:	7803      	ldrb	r3, [r0, #0]
   21928:	b123      	cbz	r3, 21934 <thread_name_get+0x18>
}
   2192a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   2192c:	4802      	ldr	r0, [pc, #8]	; (21938 <thread_name_get+0x1c>)
}
   2192e:	4770      	bx	lr
		thread_name = "unknown";
   21930:	4801      	ldr	r0, [pc, #4]	; (21938 <thread_name_get+0x1c>)
   21932:	e7fa      	b.n	2192a <thread_name_get+0xe>
   21934:	4800      	ldr	r0, [pc, #0]	; (21938 <thread_name_get+0x1c>)
	return thread_name;
   21936:	e7f8      	b.n	2192a <thread_name_get+0xe>
   21938:	00031704 	.word	0x00031704

0002193c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2193c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21940:	b089      	sub	sp, #36	; 0x24
   21942:	af00      	add	r7, sp, #0
   21944:	4606      	mov	r6, r0
   21946:	460c      	mov	r4, r1
	__asm__ volatile(
   21948:	f04f 0340 	mov.w	r3, #64	; 0x40
   2194c:	f3ef 8811 	mrs	r8, BASEPRI
   21950:	f383 8812 	msr	BASEPRI_MAX, r3
   21954:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   21958:	f001 f9de 	bl	22d18 <z_impl_z_current_get>
   2195c:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2195e:	4630      	mov	r0, r6
   21960:	f7ff ffbc 	bl	218dc <reason_to_str>
   21964:	46e9      	mov	r9, sp
   21966:	2301      	movs	r3, #1
   21968:	713b      	strb	r3, [r7, #4]
   2196a:	2303      	movs	r3, #3
   2196c:	717b      	strb	r3, [r7, #5]
   2196e:	b08a      	sub	sp, #40	; 0x28
   21970:	46ec      	mov	ip, sp
   21972:	f11c 0210 	adds.w	r2, ip, #16
   21976:	d021      	beq.n	219bc <z_fatal_error+0x80>
   21978:	f04f 0e16 	mov.w	lr, #22
   2197c:	b152      	cbz	r2, 21994 <z_fatal_error+0x58>
   2197e:	4673      	mov	r3, lr
   21980:	f1be 0f04 	cmp.w	lr, #4
   21984:	dd02      	ble.n	2198c <z_fatal_error+0x50>
   21986:	4976      	ldr	r1, [pc, #472]	; (21b60 <z_fatal_error+0x224>)
   21988:	f8cc 1014 	str.w	r1, [ip, #20]
   2198c:	2b08      	cmp	r3, #8
   2198e:	dd01      	ble.n	21994 <z_fatal_error+0x58>
   21990:	f8cc 6018 	str.w	r6, [ip, #24]
   21994:	2301      	movs	r3, #1
   21996:	703b      	strb	r3, [r7, #0]
   21998:	2303      	movs	r3, #3
   2199a:	707b      	strb	r3, [r7, #1]
   2199c:	b1da      	cbz	r2, 219d6 <z_fatal_error+0x9a>
   2199e:	4673      	mov	r3, lr
   219a0:	f1be 0f0c 	cmp.w	lr, #12
   219a4:	dd01      	ble.n	219aa <z_fatal_error+0x6e>
   219a6:	f8cc 001c 	str.w	r0, [ip, #28]
   219aa:	2b10      	cmp	r3, #16
   219ac:	dd02      	ble.n	219b4 <z_fatal_error+0x78>
   219ae:	2300      	movs	r3, #0
   219b0:	f8cc 3020 	str.w	r3, [ip, #32]
   219b4:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   219b8:	2100      	movs	r1, #0
   219ba:	e00a      	b.n	219d2 <z_fatal_error+0x96>
   219bc:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   219c0:	e7dc      	b.n	2197c <z_fatal_error+0x40>
   219c2:	f101 0020 	add.w	r0, r1, #32
   219c6:	4438      	add	r0, r7
   219c8:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   219cc:	f803 0b01 	strb.w	r0, [r3], #1
   219d0:	3101      	adds	r1, #1
   219d2:	2901      	cmp	r1, #1
   219d4:	d9f5      	bls.n	219c2 <z_fatal_error+0x86>
   219d6:	f1be 0f15 	cmp.w	lr, #21
   219da:	dd53      	ble.n	21a84 <z_fatal_error+0x148>
   219dc:	2316      	movs	r3, #22
   219de:	b14a      	cbz	r2, 219f4 <z_fatal_error+0xb8>
   219e0:	2105      	movs	r1, #5
   219e2:	7139      	strb	r1, [r7, #4]
   219e4:	2100      	movs	r1, #0
   219e6:	7179      	strb	r1, [r7, #5]
   219e8:	71b9      	strb	r1, [r7, #6]
   219ea:	2101      	movs	r1, #1
   219ec:	71f9      	strb	r1, [r7, #7]
   219ee:	6878      	ldr	r0, [r7, #4]
   219f0:	f8cc 0010 	str.w	r0, [ip, #16]
   219f4:	2100      	movs	r1, #0
   219f6:	f36f 0100 	bfc	r1, #0, #1
   219fa:	f36f 0141 	bfc	r1, #1, #1
   219fe:	f36f 0182 	bfc	r1, #2, #1
   21a02:	f36f 01c5 	bfc	r1, #3, #3
   21a06:	2001      	movs	r0, #1
   21a08:	f360 1188 	bfi	r1, r0, #6, #3
   21a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   21a10:	f363 2152 	bfi	r1, r3, #9, #10
   21a14:	f36f 41de 	bfc	r1, #19, #12
   21a18:	f36f 71df 	bfc	r1, #31, #1
   21a1c:	2300      	movs	r3, #0
   21a1e:	4851      	ldr	r0, [pc, #324]	; (21b64 <z_fatal_error+0x228>)
   21a20:	f007 f9cf 	bl	28dc2 <z_impl_z_log_msg_static_create>
   21a24:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21a26:	b11c      	cbz	r4, 21a30 <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21a28:	69e3      	ldr	r3, [r4, #28]
   21a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   21a2e:	bb63      	cbnz	r3, 21a8a <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21a30:	4628      	mov	r0, r5
   21a32:	f7ff ff73 	bl	2191c <thread_name_get>
   21a36:	46e9      	mov	r9, sp
   21a38:	2301      	movs	r3, #1
   21a3a:	713b      	strb	r3, [r7, #4]
   21a3c:	2303      	movs	r3, #3
   21a3e:	717b      	strb	r3, [r7, #5]
   21a40:	b08a      	sub	sp, #40	; 0x28
   21a42:	46ec      	mov	ip, sp
   21a44:	f11c 0210 	adds.w	r2, ip, #16
   21a48:	d042      	beq.n	21ad0 <z_fatal_error+0x194>
   21a4a:	f04f 0e12 	mov.w	lr, #18
   21a4e:	b152      	cbz	r2, 21a66 <z_fatal_error+0x12a>
   21a50:	4673      	mov	r3, lr
   21a52:	f1be 0f04 	cmp.w	lr, #4
   21a56:	dd02      	ble.n	21a5e <z_fatal_error+0x122>
   21a58:	4943      	ldr	r1, [pc, #268]	; (21b68 <z_fatal_error+0x22c>)
   21a5a:	f8cc 1014 	str.w	r1, [ip, #20]
   21a5e:	2b08      	cmp	r3, #8
   21a60:	dd01      	ble.n	21a66 <z_fatal_error+0x12a>
   21a62:	f8cc 5018 	str.w	r5, [ip, #24]
   21a66:	2301      	movs	r3, #1
   21a68:	703b      	strb	r3, [r7, #0]
   21a6a:	2303      	movs	r3, #3
   21a6c:	707b      	strb	r3, [r7, #1]
   21a6e:	2a00      	cmp	r2, #0
   21a70:	d03b      	beq.n	21aea <z_fatal_error+0x1ae>
   21a72:	f1be 0f0c 	cmp.w	lr, #12
   21a76:	dd01      	ble.n	21a7c <z_fatal_error+0x140>
   21a78:	f8cc 001c 	str.w	r0, [ip, #28]
   21a7c:	f10c 0320 	add.w	r3, ip, #32
   21a80:	2100      	movs	r1, #0
   21a82:	e030      	b.n	21ae6 <z_fatal_error+0x1aa>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21a84:	f06f 031b 	mvn.w	r3, #27
   21a88:	e7a9      	b.n	219de <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   21a8a:	4b38      	ldr	r3, [pc, #224]	; (21b6c <z_fatal_error+0x230>)
   21a8c:	61fb      	str	r3, [r7, #28]
   21a8e:	2302      	movs	r3, #2
   21a90:	713b      	strb	r3, [r7, #4]
   21a92:	2300      	movs	r3, #0
   21a94:	717b      	strb	r3, [r7, #5]
   21a96:	71bb      	strb	r3, [r7, #6]
   21a98:	71fb      	strb	r3, [r7, #7]
   21a9a:	687a      	ldr	r2, [r7, #4]
   21a9c:	61ba      	str	r2, [r7, #24]
   21a9e:	4619      	mov	r1, r3
   21aa0:	f363 0100 	bfi	r1, r3, #0, #1
   21aa4:	f363 0141 	bfi	r1, r3, #1, #1
   21aa8:	f363 0182 	bfi	r1, r3, #2, #1
   21aac:	f363 01c5 	bfi	r1, r3, #3, #3
   21ab0:	2201      	movs	r2, #1
   21ab2:	f362 1188 	bfi	r1, r2, #6, #3
   21ab6:	2208      	movs	r2, #8
   21ab8:	f362 2152 	bfi	r1, r2, #9, #10
   21abc:	f363 41de 	bfi	r1, r3, #19, #12
   21ac0:	f363 71df 	bfi	r1, r3, #31, #1
   21ac4:	f107 0218 	add.w	r2, r7, #24
   21ac8:	4826      	ldr	r0, [pc, #152]	; (21b64 <z_fatal_error+0x228>)
   21aca:	f007 f97a 	bl	28dc2 <z_impl_z_log_msg_static_create>
   21ace:	e7af      	b.n	21a30 <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   21ad0:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   21ad4:	e7bb      	b.n	21a4e <z_fatal_error+0x112>
   21ad6:	f101 0020 	add.w	r0, r1, #32
   21ada:	4438      	add	r0, r7
   21adc:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   21ae0:	f803 0b01 	strb.w	r0, [r3], #1
   21ae4:	3101      	adds	r1, #1
   21ae6:	2901      	cmp	r1, #1
   21ae8:	d9f5      	bls.n	21ad6 <z_fatal_error+0x19a>
   21aea:	f1be 0f11 	cmp.w	lr, #17
   21aee:	dd33      	ble.n	21b58 <z_fatal_error+0x21c>
   21af0:	2312      	movs	r3, #18
   21af2:	b14a      	cbz	r2, 21b08 <z_fatal_error+0x1cc>
   21af4:	2104      	movs	r1, #4
   21af6:	7139      	strb	r1, [r7, #4]
   21af8:	2100      	movs	r1, #0
   21afa:	7179      	strb	r1, [r7, #5]
   21afc:	71b9      	strb	r1, [r7, #6]
   21afe:	2101      	movs	r1, #1
   21b00:	71f9      	strb	r1, [r7, #7]
   21b02:	6878      	ldr	r0, [r7, #4]
   21b04:	f8cc 0010 	str.w	r0, [ip, #16]
   21b08:	2100      	movs	r1, #0
   21b0a:	f36f 0100 	bfc	r1, #0, #1
   21b0e:	f36f 0141 	bfc	r1, #1, #1
   21b12:	f36f 0182 	bfc	r1, #2, #1
   21b16:	f36f 01c5 	bfc	r1, #3, #3
   21b1a:	2001      	movs	r0, #1
   21b1c:	f360 1188 	bfi	r1, r0, #6, #3
   21b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
   21b24:	f363 2152 	bfi	r1, r3, #9, #10
   21b28:	f36f 41de 	bfc	r1, #19, #12
   21b2c:	f36f 71df 	bfc	r1, #31, #1
   21b30:	2300      	movs	r3, #0
   21b32:	480c      	ldr	r0, [pc, #48]	; (21b64 <z_fatal_error+0x228>)
   21b34:	f007 f945 	bl	28dc2 <z_impl_z_log_msg_static_create>
   21b38:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   21b3a:	4621      	mov	r1, r4
   21b3c:	4630      	mov	r0, r6
   21b3e:	f7fe f8a5 	bl	1fc8c <k_sys_fatal_error_handler>
	__asm__ volatile(
   21b42:	f388 8811 	msr	BASEPRI, r8
   21b46:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   21b4a:	4628      	mov	r0, r5
   21b4c:	f7f4 fdb2 	bl	166b4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   21b50:	3724      	adds	r7, #36	; 0x24
   21b52:	46bd      	mov	sp, r7
   21b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   21b58:	f06f 031b 	mvn.w	r3, #27
   21b5c:	e7c9      	b.n	21af2 <z_fatal_error+0x1b6>
   21b5e:	bf00      	nop
   21b60:	0003170c 	.word	0x0003170c
   21b64:	0002ef40 	.word	0x0002ef40
   21b68:	00031758 	.word	0x00031758
   21b6c:	00031734 	.word	0x00031734

00021b70 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   21b70:	b570      	push	{r4, r5, r6, lr}
   21b72:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21b74:	4b11      	ldr	r3, [pc, #68]	; (21bbc <z_sys_init_run_level+0x4c>)
   21b76:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21b7a:	e009      	b.n	21b90 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   21b7c:	4240      	negs	r0, r0
   21b7e:	e017      	b.n	21bb0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   21b80:	68eb      	ldr	r3, [r5, #12]
   21b82:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   21b84:	68ea      	ldr	r2, [r5, #12]
   21b86:	7853      	ldrb	r3, [r2, #1]
   21b88:	f043 0301 	orr.w	r3, r3, #1
   21b8c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21b8e:	3408      	adds	r4, #8
   21b90:	1c73      	adds	r3, r6, #1
   21b92:	4a0a      	ldr	r2, [pc, #40]	; (21bbc <z_sys_init_run_level+0x4c>)
   21b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   21b98:	42a3      	cmp	r3, r4
   21b9a:	d90d      	bls.n	21bb8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   21b9c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   21b9e:	6823      	ldr	r3, [r4, #0]
   21ba0:	4628      	mov	r0, r5
   21ba2:	4798      	blx	r3
		if (dev != NULL) {
   21ba4:	2d00      	cmp	r5, #0
   21ba6:	d0f2      	beq.n	21b8e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   21ba8:	2800      	cmp	r0, #0
   21baa:	d0eb      	beq.n	21b84 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   21bac:	2800      	cmp	r0, #0
   21bae:	dbe5      	blt.n	21b7c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   21bb0:	28ff      	cmp	r0, #255	; 0xff
   21bb2:	dde5      	ble.n	21b80 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   21bb4:	20ff      	movs	r0, #255	; 0xff
   21bb6:	e7e3      	b.n	21b80 <z_sys_init_run_level+0x10>
		}
	}
}
   21bb8:	bd70      	pop	{r4, r5, r6, pc}
   21bba:	bf00      	nop
   21bbc:	00031780 	.word	0x00031780

00021bc0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   21bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bc2:	b087      	sub	sp, #28
   21bc4:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   21bc6:	ebc0 1640 	rsb	r6, r0, r0, lsl #5
   21bca:	4d11      	ldr	r5, [pc, #68]	; (21c10 <init_idle_thread+0x50>)
   21bcc:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
	k_thread_stack_t *stack = z_idle_stacks[i];
   21bd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21bd4:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   21bd8:	4b0e      	ldr	r3, [pc, #56]	; (21c14 <init_idle_thread+0x54>)
   21bda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	z_setup_new_thread(thread, stack,
   21bde:	4a0e      	ldr	r2, [pc, #56]	; (21c18 <init_idle_thread+0x58>)
   21be0:	9205      	str	r2, [sp, #20]
   21be2:	2201      	movs	r2, #1
   21be4:	9204      	str	r2, [sp, #16]
   21be6:	220f      	movs	r2, #15
   21be8:	9203      	str	r2, [sp, #12]
   21bea:	2200      	movs	r2, #0
   21bec:	9202      	str	r2, [sp, #8]
   21bee:	9201      	str	r2, [sp, #4]
   21bf0:	9300      	str	r3, [sp, #0]
   21bf2:	4b0a      	ldr	r3, [pc, #40]	; (21c1c <init_idle_thread+0x5c>)
   21bf4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21bf8:	4909      	ldr	r1, [pc, #36]	; (21c20 <init_idle_thread+0x60>)
   21bfa:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   21bfe:	4630      	mov	r0, r6
   21c00:	f000 f976 	bl	21ef0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21c04:	7b73      	ldrb	r3, [r6, #13]
   21c06:	f023 0304 	bic.w	r3, r3, #4
   21c0a:	7373      	strb	r3, [r6, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   21c0c:	b007      	add	sp, #28
   21c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21c10:	20002db0 	.word	0x20002db0
   21c14:	20004040 	.word	0x20004040
   21c18:	00031770 	.word	0x00031770
   21c1c:	0002204d 	.word	0x0002204d
   21c20:	20007080 	.word	0x20007080

00021c24 <bg_thread_main>:
{
   21c24:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   21c26:	4b0a      	ldr	r3, [pc, #40]	; (21c50 <bg_thread_main+0x2c>)
   21c28:	2201      	movs	r2, #1
   21c2a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   21c2c:	2003      	movs	r0, #3
   21c2e:	f7ff ff9f 	bl	21b70 <z_sys_init_run_level>
	boot_banner();
   21c32:	f001 fb91 	bl	23358 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   21c36:	2004      	movs	r0, #4
   21c38:	f7ff ff9a 	bl	21b70 <z_sys_init_run_level>
	z_init_static_threads();
   21c3c:	f000 f9bc 	bl	21fb8 <z_init_static_threads>
	(void)main();
   21c40:	f7f0 f8ce 	bl	11de0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21c44:	4a03      	ldr	r2, [pc, #12]	; (21c54 <bg_thread_main+0x30>)
   21c46:	7b13      	ldrb	r3, [r2, #12]
   21c48:	f023 0301 	bic.w	r3, r3, #1
   21c4c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21c4e:	bd08      	pop	{r3, pc}
   21c50:	20004b70 	.word	0x20004b70
   21c54:	20002ea8 	.word	0x20002ea8

00021c58 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   21c58:	b508      	push	{r3, lr}
   21c5a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21c5c:	4a01      	ldr	r2, [pc, #4]	; (21c64 <switch_to_main_thread+0xc>)
   21c5e:	4802      	ldr	r0, [pc, #8]	; (21c68 <switch_to_main_thread+0x10>)
   21c60:	f7f3 fd7e 	bl	15760 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21c64:	00021c25 	.word	0x00021c25
   21c68:	20002ea8 	.word	0x20002ea8

00021c6c <z_bss_zero>:
{
   21c6c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   21c6e:	4803      	ldr	r0, [pc, #12]	; (21c7c <z_bss_zero+0x10>)
   21c70:	4a03      	ldr	r2, [pc, #12]	; (21c80 <z_bss_zero+0x14>)
   21c72:	1a12      	subs	r2, r2, r0
   21c74:	2100      	movs	r1, #0
   21c76:	f00b fb4c 	bl	2d312 <z_early_memset>
}
   21c7a:	bd08      	pop	{r3, pc}
   21c7c:	20000d70 	.word	0x20000d70
   21c80:	20004b74 	.word	0x20004b74

00021c84 <z_init_cpu>:
{
   21c84:	b510      	push	{r4, lr}
   21c86:	4604      	mov	r4, r0
	init_idle_thread(id);
   21c88:	f7ff ff9a 	bl	21bc0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   21c8c:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
   21c90:	490b      	ldr	r1, [pc, #44]	; (21cc0 <z_init_cpu+0x3c>)
   21c92:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   21c96:	4a0b      	ldr	r2, [pc, #44]	; (21cc4 <z_init_cpu+0x40>)
   21c98:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   21c9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   21ca0:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   21ca2:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   21ca4:	eb04 1104 	add.w	r1, r4, r4, lsl #4
   21ca8:	4b07      	ldr	r3, [pc, #28]	; (21cc8 <z_init_cpu+0x44>)
   21caa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   21cae:	f503 6308 	add.w	r3, r3, #2176	; 0x880
	_kernel.cpus[id].irq_stack =
   21cb2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   21cb6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   21cba:	6053      	str	r3, [r2, #4]
}
   21cbc:	bd10      	pop	{r4, pc}
   21cbe:	bf00      	nop
   21cc0:	20002db0 	.word	0x20002db0
   21cc4:	20004040 	.word	0x20004040
   21cc8:	20006800 	.word	0x20006800

00021ccc <prepare_multithreading>:
{
   21ccc:	b570      	push	{r4, r5, r6, lr}
   21cce:	b086      	sub	sp, #24
	z_sched_init();
   21cd0:	f000 ff5a 	bl	22b88 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   21cd4:	4d10      	ldr	r5, [pc, #64]	; (21d18 <prepare_multithreading+0x4c>)
   21cd6:	4b11      	ldr	r3, [pc, #68]	; (21d1c <prepare_multithreading+0x50>)
   21cd8:	621d      	str	r5, [r3, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21cda:	4b11      	ldr	r3, [pc, #68]	; (21d20 <prepare_multithreading+0x54>)
   21cdc:	9305      	str	r3, [sp, #20]
   21cde:	2301      	movs	r3, #1
   21ce0:	9304      	str	r3, [sp, #16]
   21ce2:	2400      	movs	r4, #0
   21ce4:	9403      	str	r4, [sp, #12]
   21ce6:	9402      	str	r4, [sp, #8]
   21ce8:	9401      	str	r4, [sp, #4]
   21cea:	9400      	str	r4, [sp, #0]
   21cec:	4b0d      	ldr	r3, [pc, #52]	; (21d24 <prepare_multithreading+0x58>)
   21cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21cf2:	490d      	ldr	r1, [pc, #52]	; (21d28 <prepare_multithreading+0x5c>)
   21cf4:	4628      	mov	r0, r5
   21cf6:	f000 f8fb 	bl	21ef0 <z_setup_new_thread>
   21cfa:	4606      	mov	r6, r0
   21cfc:	7b6b      	ldrb	r3, [r5, #13]
   21cfe:	f023 0304 	bic.w	r3, r3, #4
   21d02:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   21d04:	4628      	mov	r0, r5
   21d06:	f00b ff1c 	bl	2db42 <z_ready_thread>
	z_init_cpu(0);
   21d0a:	4620      	mov	r0, r4
   21d0c:	f7ff ffba 	bl	21c84 <z_init_cpu>
}
   21d10:	4630      	mov	r0, r6
   21d12:	b006      	add	sp, #24
   21d14:	bd70      	pop	{r4, r5, r6, pc}
   21d16:	bf00      	nop
   21d18:	20002ea8 	.word	0x20002ea8
   21d1c:	20004040 	.word	0x20004040
   21d20:	00031778 	.word	0x00031778
   21d24:	00021c25 	.word	0x00021c25
   21d28:	20007200 	.word	0x20007200

00021d2c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21d2c:	b500      	push	{lr}
   21d2e:	b0bf      	sub	sp, #252	; 0xfc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   21d30:	2000      	movs	r0, #0
   21d32:	f7ff ff1d 	bl	21b70 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   21d36:	4b1f      	ldr	r3, [pc, #124]	; (21db4 <z_cstart+0x88>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21d38:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   21d3c:	4c1e      	ldr	r4, [pc, #120]	; (21db8 <z_cstart+0x8c>)
   21d3e:	6963      	ldr	r3, [r4, #20]
   21d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   21d44:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21d46:	23e0      	movs	r3, #224	; 0xe0
   21d48:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   21d4c:	2320      	movs	r3, #32
   21d4e:	77e3      	strb	r3, [r4, #31]
   21d50:	2500      	movs	r5, #0
   21d52:	7625      	strb	r5, [r4, #24]
   21d54:	7665      	strb	r5, [r4, #25]
   21d56:	76a5      	strb	r5, [r4, #26]
   21d58:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21d5e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21d62:	6263      	str	r3, [r4, #36]	; 0x24
   21d64:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21d68:	f7f4 fc0a 	bl	16580 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21d6c:	f7f3 f938 	bl	14fe0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21d70:	f04f 33ff 	mov.w	r3, #4294967295
   21d74:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21d76:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   21d78:	f7f4 fde2 	bl	16940 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21d7c:	f7f4 fcb4 	bl	166e8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   21d80:	f7f2 f852 	bl	13e28 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   21d84:	2401      	movs	r4, #1
   21d86:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   21d8a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   21d8e:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   21d90:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   21d92:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   21d94:	4b09      	ldr	r3, [pc, #36]	; (21dbc <z_cstart+0x90>)
   21d96:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   21d9a:	f7ff fd93 	bl	218c4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   21d9e:	4620      	mov	r0, r4
   21da0:	f7ff fee6 	bl	21b70 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   21da4:	2002      	movs	r0, #2
   21da6:	f7ff fee3 	bl	21b70 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   21daa:	f7ff ff8f 	bl	21ccc <prepare_multithreading>
   21dae:	f7ff ff53 	bl	21c58 <switch_to_main_thread>
   21db2:	bf00      	nop
   21db4:	20007080 	.word	0x20007080
   21db8:	e000ed00 	.word	0xe000ed00
   21dbc:	20004040 	.word	0x20004040

00021dc0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21dc0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21dc2:	4c06      	ldr	r4, [pc, #24]	; (21ddc <statics_init+0x1c>)
   21dc4:	e005      	b.n	21dd2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21dc6:	68a2      	ldr	r2, [r4, #8]
   21dc8:	6861      	ldr	r1, [r4, #4]
   21dca:	4620      	mov	r0, r4
   21dcc:	f00b faa9 	bl	2d322 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21dd0:	3414      	adds	r4, #20
   21dd2:	4b03      	ldr	r3, [pc, #12]	; (21de0 <statics_init+0x20>)
   21dd4:	429c      	cmp	r4, r3
   21dd6:	d3f6      	bcc.n	21dc6 <statics_init+0x6>
		}
	}
	return 0;
}
   21dd8:	2000      	movs	r0, #0
   21dda:	bd10      	pop	{r4, pc}
   21ddc:	20000b68 	.word	0x20000b68
   21de0:	20000b68 	.word	0x20000b68

00021de4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   21de4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21de6:	4c06      	ldr	r4, [pc, #24]	; (21e00 <init_mem_slab_module+0x1c>)
	int rc = 0;
   21de8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21dea:	e000      	b.n	21dee <init_mem_slab_module+0xa>
   21dec:	341c      	adds	r4, #28
   21dee:	4b05      	ldr	r3, [pc, #20]	; (21e04 <init_mem_slab_module+0x20>)
   21df0:	429c      	cmp	r4, r3
   21df2:	d204      	bcs.n	21dfe <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   21df4:	4620      	mov	r0, r4
   21df6:	f00b fb0f 	bl	2d418 <create_free_list>
		if (rc < 0) {
   21dfa:	2800      	cmp	r0, #0
   21dfc:	daf6      	bge.n	21dec <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   21dfe:	bd10      	pop	{r4, pc}
   21e00:	20000b14 	.word	0x20000b14
   21e04:	20000b68 	.word	0x20000b68

00021e08 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21e08:	b530      	push	{r4, r5, lr}
   21e0a:	b083      	sub	sp, #12
   21e0c:	460d      	mov	r5, r1
	__asm__ volatile(
   21e0e:	f04f 0140 	mov.w	r1, #64	; 0x40
   21e12:	f3ef 8c11 	mrs	ip, BASEPRI
   21e16:	f381 8812 	msr	BASEPRI_MAX, r1
   21e1a:	f3bf 8f6f 	isb	sy
   21e1e:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21e20:	6944      	ldr	r4, [r0, #20]
   21e22:	b164      	cbz	r4, 21e3e <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   21e24:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   21e26:	6823      	ldr	r3, [r4, #0]
   21e28:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   21e2a:	6983      	ldr	r3, [r0, #24]
   21e2c:	3301      	adds	r3, #1
   21e2e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21e30:	2000      	movs	r0, #0
	__asm__ volatile(
   21e32:	f381 8811 	msr	BASEPRI, r1
   21e36:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   21e3a:	b003      	add	sp, #12
   21e3c:	bd30      	pop	{r4, r5, pc}
   21e3e:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21e42:	ea53 0402 	orrs.w	r4, r3, r2
   21e46:	d104      	bne.n	21e52 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   21e48:	2300      	movs	r3, #0
   21e4a:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   21e4c:	f06f 000b 	mvn.w	r0, #11
   21e50:	e7ef      	b.n	21e32 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21e52:	9200      	str	r2, [sp, #0]
   21e54:	9301      	str	r3, [sp, #4]
   21e56:	4602      	mov	r2, r0
   21e58:	4670      	mov	r0, lr
   21e5a:	f000 fd8f 	bl	2297c <z_pend_curr>
		if (result == 0) {
   21e5e:	2800      	cmp	r0, #0
   21e60:	d1eb      	bne.n	21e3a <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   21e62:	4b02      	ldr	r3, [pc, #8]	; (21e6c <k_mem_slab_alloc+0x64>)
   21e64:	689b      	ldr	r3, [r3, #8]
   21e66:	695b      	ldr	r3, [r3, #20]
   21e68:	602b      	str	r3, [r5, #0]
		return result;
   21e6a:	e7e6      	b.n	21e3a <k_mem_slab_alloc+0x32>
   21e6c:	20004040 	.word	0x20004040

00021e70 <z_thread_monitor_exit>:
	__asm__ volatile(
   21e70:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e74:	f3ef 8111 	mrs	r1, BASEPRI
   21e78:	f383 8812 	msr	BASEPRI_MAX, r3
   21e7c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   21e80:	4b0a      	ldr	r3, [pc, #40]	; (21eac <z_thread_monitor_exit+0x3c>)
   21e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   21e84:	4283      	cmp	r3, r0
   21e86:	d104      	bne.n	21e92 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   21e88:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   21e8a:	4b08      	ldr	r3, [pc, #32]	; (21eac <z_thread_monitor_exit+0x3c>)
   21e8c:	631a      	str	r2, [r3, #48]	; 0x30
   21e8e:	e007      	b.n	21ea0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   21e90:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   21e92:	b113      	cbz	r3, 21e9a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   21e94:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   21e96:	4282      	cmp	r2, r0
   21e98:	d1fa      	bne.n	21e90 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   21e9a:	b10b      	cbz	r3, 21ea0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   21e9c:	6f42      	ldr	r2, [r0, #116]	; 0x74
   21e9e:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   21ea0:	f381 8811 	msr	BASEPRI, r1
   21ea4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   21ea8:	4770      	bx	lr
   21eaa:	bf00      	nop
   21eac:	20004040 	.word	0x20004040

00021eb0 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   21eb0:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   21eb2:	4604      	mov	r4, r0
   21eb4:	b140      	cbz	r0, 21ec8 <z_impl_k_thread_name_set+0x18>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   21eb6:	221f      	movs	r2, #31
   21eb8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   21ebc:	f00c fb3d 	bl	2e53a <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   21ec0:	2000      	movs	r0, #0
   21ec2:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   21ec6:	bd10      	pop	{r4, pc}
		thread = _current;
   21ec8:	4b01      	ldr	r3, [pc, #4]	; (21ed0 <z_impl_k_thread_name_set+0x20>)
   21eca:	689c      	ldr	r4, [r3, #8]
   21ecc:	e7f3      	b.n	21eb6 <z_impl_k_thread_name_set+0x6>
   21ece:	bf00      	nop
   21ed0:	20004040 	.word	0x20004040

00021ed4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   21ed4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21ed6:	ea53 0102 	orrs.w	r1, r3, r2
   21eda:	d102      	bne.n	21ee2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   21edc:	f00b fb0c 	bl	2d4f8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   21ee0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21ee2:	4902      	ldr	r1, [pc, #8]	; (21eec <schedule_new_thread+0x18>)
   21ee4:	3018      	adds	r0, #24
   21ee6:	f000 ffc9 	bl	22e7c <z_add_timeout>
   21eea:	e7f9      	b.n	21ee0 <schedule_new_thread+0xc>
   21eec:	0002db7b 	.word	0x0002db7b

00021ef0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ef4:	b085      	sub	sp, #20
   21ef6:	4604      	mov	r4, r0
   21ef8:	460f      	mov	r7, r1
   21efa:	4615      	mov	r5, r2
   21efc:	461e      	mov	r6, r3
   21efe:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   21f02:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   21f06:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21f0a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   21f0e:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
   21f12:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   21f14:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   21f16:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21f18:	2204      	movs	r2, #4
   21f1a:	9911      	ldr	r1, [sp, #68]	; 0x44
   21f1c:	f00b faf0 	bl	2d500 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   21f20:	462a      	mov	r2, r5
   21f22:	4639      	mov	r1, r7
   21f24:	4620      	mov	r0, r4
   21f26:	f00b facb 	bl	2d4c0 <setup_thread_stack>
   21f2a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21f2c:	f8cd 8008 	str.w	r8, [sp, #8]
   21f30:	f8cd 9004 	str.w	r9, [sp, #4]
   21f34:	f8cd a000 	str.w	sl, [sp]
   21f38:	4633      	mov	r3, r6
   21f3a:	4602      	mov	r2, r0
   21f3c:	4639      	mov	r1, r7
   21f3e:	4620      	mov	r0, r4
   21f40:	f7f3 fb5a 	bl	155f8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   21f44:	2300      	movs	r3, #0
   21f46:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   21f48:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   21f4a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   21f4e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   21f52:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   21f56:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f5a:	f3ef 8211 	mrs	r2, BASEPRI
   21f5e:	f383 8812 	msr	BASEPRI_MAX, r3
   21f62:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   21f66:	4b13      	ldr	r3, [pc, #76]	; (21fb4 <z_setup_new_thread+0xc4>)
   21f68:	6b19      	ldr	r1, [r3, #48]	; 0x30
   21f6a:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   21f6c:	631c      	str	r4, [r3, #48]	; 0x30
	__asm__ volatile(
   21f6e:	f382 8811 	msr	BASEPRI, r2
   21f72:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   21f76:	f1bb 0f00 	cmp.w	fp, #0
   21f7a:	d013      	beq.n	21fa4 <z_setup_new_thread+0xb4>
   21f7c:	221f      	movs	r2, #31
   21f7e:	4659      	mov	r1, fp
   21f80:	f104 0078 	add.w	r0, r4, #120	; 0x78
   21f84:	f00c fad9 	bl	2e53a <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   21f88:	2300      	movs	r3, #0
   21f8a:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   21f8e:	4b09      	ldr	r3, [pc, #36]	; (21fb4 <z_setup_new_thread+0xc4>)
   21f90:	689b      	ldr	r3, [r3, #8]
   21f92:	b15b      	cbz	r3, 21fac <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   21f94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   21f98:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   21f9c:	4628      	mov	r0, r5
   21f9e:	b005      	add	sp, #20
   21fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   21fa4:	2300      	movs	r3, #0
   21fa6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   21faa:	e7f0      	b.n	21f8e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   21fac:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   21fb0:	e7f4      	b.n	21f9c <z_setup_new_thread+0xac>
   21fb2:	bf00      	nop
   21fb4:	20004040 	.word	0x20004040

00021fb8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   21fb8:	b530      	push	{r4, r5, lr}
   21fba:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   21fbc:	4c21      	ldr	r4, [pc, #132]	; (22044 <z_init_static_threads+0x8c>)
   21fbe:	e014      	b.n	21fea <z_init_static_threads+0x32>
		z_setup_new_thread(
   21fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21fc2:	9305      	str	r3, [sp, #20]
   21fc4:	6a23      	ldr	r3, [r4, #32]
   21fc6:	9304      	str	r3, [sp, #16]
   21fc8:	69e3      	ldr	r3, [r4, #28]
   21fca:	9303      	str	r3, [sp, #12]
   21fcc:	69a3      	ldr	r3, [r4, #24]
   21fce:	9302      	str	r3, [sp, #8]
   21fd0:	6963      	ldr	r3, [r4, #20]
   21fd2:	9301      	str	r3, [sp, #4]
   21fd4:	6923      	ldr	r3, [r4, #16]
   21fd6:	9300      	str	r3, [sp, #0]
   21fd8:	68e3      	ldr	r3, [r4, #12]
   21fda:	68a2      	ldr	r2, [r4, #8]
   21fdc:	6861      	ldr	r1, [r4, #4]
   21fde:	6820      	ldr	r0, [r4, #0]
   21fe0:	f7ff ff86 	bl	21ef0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   21fe4:	6823      	ldr	r3, [r4, #0]
   21fe6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   21fe8:	3430      	adds	r4, #48	; 0x30
   21fea:	4b17      	ldr	r3, [pc, #92]	; (22048 <z_init_static_threads+0x90>)
   21fec:	429c      	cmp	r4, r3
   21fee:	d3e7      	bcc.n	21fc0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   21ff0:	f000 fb76 	bl	226e0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   21ff4:	4c13      	ldr	r4, [pc, #76]	; (22044 <z_init_static_threads+0x8c>)
   21ff6:	e000      	b.n	21ffa <z_init_static_threads+0x42>
   21ff8:	3430      	adds	r4, #48	; 0x30
   21ffa:	4b13      	ldr	r3, [pc, #76]	; (22048 <z_init_static_threads+0x90>)
   21ffc:	429c      	cmp	r4, r3
   21ffe:	d21c      	bcs.n	2203a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   22000:	6a60      	ldr	r0, [r4, #36]	; 0x24
   22002:	f1b0 3fff 	cmp.w	r0, #4294967295
   22006:	d0f7      	beq.n	21ff8 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   22008:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   2200a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2200e:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
   22010:	03c9      	lsls	r1, r1, #15
   22012:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   22016:	03c0      	lsls	r0, r0, #15
   22018:	f240 33e7 	movw	r3, #999	; 0x3e7
   2201c:	18c0      	adds	r0, r0, r3
   2201e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22022:	f04f 0300 	mov.w	r3, #0
   22026:	f141 0100 	adc.w	r1, r1, #0
   2202a:	f7de fc87 	bl	93c <__aeabi_uldivmod>
   2202e:	4602      	mov	r2, r0
   22030:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   22032:	4628      	mov	r0, r5
   22034:	f7ff ff4e 	bl	21ed4 <schedule_new_thread>
   22038:	e7de      	b.n	21ff8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   2203a:	f000 fd53 	bl	22ae4 <k_sched_unlock>
}
   2203e:	b007      	add	sp, #28
   22040:	bd30      	pop	{r4, r5, pc}
   22042:	bf00      	nop
   22044:	0002edf4 	.word	0x0002edf4
   22048:	0002edf4 	.word	0x0002edf4

0002204c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2204c:	b508      	push	{r3, lr}
   2204e:	e001      	b.n	22054 <idle+0x8>
	arch_cpu_idle();
   22050:	f7f2 ffcc 	bl	14fec <arch_cpu_idle>
	__asm__ volatile(
   22054:	f04f 0240 	mov.w	r2, #64	; 0x40
   22058:	f3ef 8311 	mrs	r3, BASEPRI
   2205c:	f382 8812 	msr	BASEPRI_MAX, r2
   22060:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   22064:	f00b febb 	bl	2ddde <z_get_next_timeout_expiry>
   22068:	4b05      	ldr	r3, [pc, #20]	; (22080 <idle+0x34>)
   2206a:	61d8      	str	r0, [r3, #28]
	return !z_sys_post_kernel;
   2206c:	4b05      	ldr	r3, [pc, #20]	; (22084 <idle+0x38>)
   2206e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   22070:	2b00      	cmp	r3, #0
   22072:	d0ed      	beq.n	22050 <idle+0x4>
   22074:	f7f2 fd0e 	bl	14a94 <pm_system_suspend>
   22078:	2800      	cmp	r0, #0
   2207a:	d1eb      	bne.n	22054 <idle+0x8>
   2207c:	e7e8      	b.n	22050 <idle+0x4>
   2207e:	bf00      	nop
   22080:	20004040 	.word	0x20004040
   22084:	20004b70 	.word	0x20004b70

00022088 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2208c:	b082      	sub	sp, #8
   2208e:	4604      	mov	r4, r0
   22090:	461e      	mov	r6, r3
   22092:	f04f 0340 	mov.w	r3, #64	; 0x40
   22096:	f3ef 8511 	mrs	r5, BASEPRI
   2209a:	f383 8812 	msr	BASEPRI_MAX, r3
   2209e:	f3bf 8f6f 	isb	sy
   220a2:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   220a4:	68c1      	ldr	r1, [r0, #12]
   220a6:	b999      	cbnz	r1, 220d0 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   220a8:	2900      	cmp	r1, #0
   220aa:	d151      	bne.n	22150 <z_impl_k_mutex_lock+0xc8>
   220ac:	4a36      	ldr	r2, [pc, #216]	; (22188 <z_impl_k_mutex_lock+0x100>)
   220ae:	6892      	ldr	r2, [r2, #8]
   220b0:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   220b4:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   220b6:	3101      	adds	r1, #1
   220b8:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   220ba:	4a33      	ldr	r2, [pc, #204]	; (22188 <z_impl_k_mutex_lock+0x100>)
   220bc:	6892      	ldr	r2, [r2, #8]
   220be:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   220c0:	f383 8811 	msr	BASEPRI, r3
   220c4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   220c8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   220ca:	b002      	add	sp, #8
   220cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220d0:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   220d2:	6880      	ldr	r0, [r0, #8]
   220d4:	4a2c      	ldr	r2, [pc, #176]	; (22188 <z_impl_k_mutex_lock+0x100>)
   220d6:	6892      	ldr	r2, [r2, #8]
   220d8:	4290      	cmp	r0, r2
   220da:	d0e5      	beq.n	220a8 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   220dc:	ea56 0107 	orrs.w	r1, r6, r7
   220e0:	d038      	beq.n	22154 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   220e2:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   220e6:	4641      	mov	r1, r8
   220e8:	f992 000e 	ldrsb.w	r0, [r2, #14]
   220ec:	f00b fa3c 	bl	2d568 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   220f0:	4580      	cmp	r8, r0
   220f2:	dc36      	bgt.n	22162 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   220f4:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   220f8:	9700      	str	r7, [sp, #0]
   220fa:	9601      	str	r6, [sp, #4]
   220fc:	4622      	mov	r2, r4
   220fe:	4629      	mov	r1, r5
   22100:	4822      	ldr	r0, [pc, #136]	; (2218c <z_impl_k_mutex_lock+0x104>)
   22102:	f000 fc3b 	bl	2297c <z_pend_curr>
	if (got_mutex == 0) {
   22106:	2800      	cmp	r0, #0
   22108:	d0df      	beq.n	220ca <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   2210a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2210e:	f3ef 8511 	mrs	r5, BASEPRI
   22112:	f383 8812 	msr	BASEPRI_MAX, r3
   22116:	f3bf 8f6f 	isb	sy
   2211a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   2211c:	68a3      	ldr	r3, [r4, #8]
   2211e:	b343      	cbz	r3, 22172 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22120:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22122:	429c      	cmp	r4, r3
   22124:	d023      	beq.n	2216e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22126:	b313      	cbz	r3, 2216e <z_impl_k_mutex_lock+0xe6>
   22128:	6921      	ldr	r1, [r4, #16]
   2212a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2212e:	f00b fa1b 	bl	2d568 <new_prio_for_inheritance>
   22132:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   22134:	4620      	mov	r0, r4
   22136:	f00b fa22 	bl	2d57e <adjust_owner_prio>
   2213a:	b9e8      	cbnz	r0, 22178 <z_impl_k_mutex_lock+0xf0>
   2213c:	f1b8 0f00 	cmp.w	r8, #0
   22140:	d11a      	bne.n	22178 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   22142:	f386 8811 	msr	BASEPRI, r6
   22146:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   2214a:	f06f 000a 	mvn.w	r0, #10
   2214e:	e7bc      	b.n	220ca <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   22150:	6922      	ldr	r2, [r4, #16]
   22152:	e7af      	b.n	220b4 <z_impl_k_mutex_lock+0x2c>
   22154:	f385 8811 	msr	BASEPRI, r5
   22158:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   2215c:	f06f 000f 	mvn.w	r0, #15
   22160:	e7b3      	b.n	220ca <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   22162:	4601      	mov	r1, r0
   22164:	4620      	mov	r0, r4
   22166:	f00b fa0a 	bl	2d57e <adjust_owner_prio>
   2216a:	4680      	mov	r8, r0
   2216c:	e7c4      	b.n	220f8 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2216e:	6921      	ldr	r1, [r4, #16]
   22170:	e7e0      	b.n	22134 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   22172:	f1b8 0f00 	cmp.w	r8, #0
   22176:	d0e4      	beq.n	22142 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   22178:	4629      	mov	r1, r5
   2217a:	4804      	ldr	r0, [pc, #16]	; (2218c <z_impl_k_mutex_lock+0x104>)
   2217c:	f000 fa9a 	bl	226b4 <z_reschedule>
	return -EAGAIN;
   22180:	f06f 000a 	mvn.w	r0, #10
   22184:	e7a1      	b.n	220ca <z_impl_k_mutex_lock+0x42>
   22186:	bf00      	nop
   22188:	20004040 	.word	0x20004040
   2218c:	20004074 	.word	0x20004074

00022190 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   22190:	6883      	ldr	r3, [r0, #8]
   22192:	b38b      	cbz	r3, 221f8 <z_impl_k_mutex_unlock+0x68>
{
   22194:	b570      	push	{r4, r5, r6, lr}
   22196:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   22198:	4a1a      	ldr	r2, [pc, #104]	; (22204 <z_impl_k_mutex_unlock+0x74>)
   2219a:	6892      	ldr	r2, [r2, #8]
   2219c:	4293      	cmp	r3, r2
   2219e:	d12e      	bne.n	221fe <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   221a0:	68c3      	ldr	r3, [r0, #12]
   221a2:	2b01      	cmp	r3, #1
   221a4:	d903      	bls.n	221ae <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   221a6:	3b01      	subs	r3, #1
   221a8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   221aa:	2000      	movs	r0, #0
}
   221ac:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   221ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   221b2:	f3ef 8511 	mrs	r5, BASEPRI
   221b6:	f383 8812 	msr	BASEPRI_MAX, r3
   221ba:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   221be:	6901      	ldr	r1, [r0, #16]
   221c0:	f00b f9dd 	bl	2d57e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   221c4:	4620      	mov	r0, r4
   221c6:	f00b fd71 	bl	2dcac <z_unpend_first_thread>
	mutex->owner = new_owner;
   221ca:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   221cc:	b168      	cbz	r0, 221ea <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   221ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
   221d2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   221d4:	2400      	movs	r4, #0
   221d6:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   221da:	f00b fcb2 	bl	2db42 <z_ready_thread>
		z_reschedule(&lock, key);
   221de:	4629      	mov	r1, r5
   221e0:	4809      	ldr	r0, [pc, #36]	; (22208 <z_impl_k_mutex_unlock+0x78>)
   221e2:	f000 fa67 	bl	226b4 <z_reschedule>
	return 0;
   221e6:	4620      	mov	r0, r4
   221e8:	e7e0      	b.n	221ac <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   221ea:	2000      	movs	r0, #0
   221ec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   221ee:	f385 8811 	msr	BASEPRI, r5
   221f2:	f3bf 8f6f 	isb	sy
   221f6:	e7d9      	b.n	221ac <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   221f8:	f06f 0015 	mvn.w	r0, #21
}
   221fc:	4770      	bx	lr
		return -EPERM;
   221fe:	f04f 30ff 	mov.w	r0, #4294967295
   22202:	e7d3      	b.n	221ac <z_impl_k_mutex_unlock+0x1c>
   22204:	20004040 	.word	0x20004040
   22208:	20004074 	.word	0x20004074

0002220c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2220c:	b510      	push	{r4, lr}
   2220e:	b082      	sub	sp, #8
   22210:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22212:	4686      	mov	lr, r0
	__asm__ volatile(
   22214:	f04f 0040 	mov.w	r0, #64	; 0x40
   22218:	f3ef 8111 	mrs	r1, BASEPRI
   2221c:	f380 8812 	msr	BASEPRI_MAX, r0
   22220:	f3bf 8f6f 	isb	sy
   22224:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   22226:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2222a:	b1a0      	cbz	r0, 22256 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2222c:	6803      	ldr	r3, [r0, #0]
   2222e:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   22232:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   22236:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2223a:	4290      	cmp	r0, r2
   2223c:	d008      	beq.n	22250 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2223e:	2101      	movs	r1, #1
   22240:	f00b fa33 	bl	2d6aa <z_queue_node_peek>
	__asm__ volatile(
   22244:	f384 8811 	msr	BASEPRI, r4
   22248:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2224c:	b002      	add	sp, #8
   2224e:	bd10      	pop	{r4, pc}
	list->tail = node;
   22250:	f8cc 3004 	str.w	r3, [ip, #4]
}
   22254:	e7f3      	b.n	2223e <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22256:	ea53 0002 	orrs.w	r0, r3, r2
   2225a:	d00a      	beq.n	22272 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2225c:	9200      	str	r2, [sp, #0]
   2225e:	9301      	str	r3, [sp, #4]
   22260:	4672      	mov	r2, lr
   22262:	4670      	mov	r0, lr
   22264:	f000 fb8a 	bl	2297c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22268:	b948      	cbnz	r0, 2227e <z_impl_k_queue_get+0x72>
   2226a:	4b06      	ldr	r3, [pc, #24]	; (22284 <z_impl_k_queue_get+0x78>)
   2226c:	689b      	ldr	r3, [r3, #8]
   2226e:	6958      	ldr	r0, [r3, #20]
   22270:	e7ec      	b.n	2224c <z_impl_k_queue_get+0x40>
   22272:	f381 8811 	msr	BASEPRI, r1
   22276:	f3bf 8f6f 	isb	sy
		return NULL;
   2227a:	2000      	movs	r0, #0
   2227c:	e7e6      	b.n	2224c <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2227e:	2000      	movs	r0, #0
   22280:	e7e4      	b.n	2224c <z_impl_k_queue_get+0x40>
   22282:	bf00      	nop
   22284:	20004040 	.word	0x20004040

00022288 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22288:	b538      	push	{r3, r4, r5, lr}
   2228a:	4604      	mov	r4, r0
	__asm__ volatile(
   2228c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22290:	f3ef 8511 	mrs	r5, BASEPRI
   22294:	f383 8812 	msr	BASEPRI_MAX, r3
   22298:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2229c:	f00b fd06 	bl	2dcac <z_unpend_first_thread>

	if (thread != NULL) {
   222a0:	b148      	cbz	r0, 222b6 <z_impl_k_sem_give+0x2e>
   222a2:	2200      	movs	r2, #0
   222a4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   222a8:	f00b fc4b 	bl	2db42 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   222ac:	4629      	mov	r1, r5
   222ae:	4809      	ldr	r0, [pc, #36]	; (222d4 <z_impl_k_sem_give+0x4c>)
   222b0:	f000 fa00 	bl	226b4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   222b4:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   222b6:	68a3      	ldr	r3, [r4, #8]
   222b8:	68e2      	ldr	r2, [r4, #12]
   222ba:	4293      	cmp	r3, r2
   222bc:	d008      	beq.n	222d0 <z_impl_k_sem_give+0x48>
   222be:	2201      	movs	r2, #1
   222c0:	4413      	add	r3, r2
   222c2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   222c4:	2102      	movs	r1, #2
   222c6:	f104 0010 	add.w	r0, r4, #16
   222ca:	f00b ffcd 	bl	2e268 <z_handle_obj_poll_events>
}
   222ce:	e7ed      	b.n	222ac <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   222d0:	2200      	movs	r2, #0
   222d2:	e7f5      	b.n	222c0 <z_impl_k_sem_give+0x38>
   222d4:	20004074 	.word	0x20004074

000222d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   222d8:	b510      	push	{r4, lr}
   222da:	b082      	sub	sp, #8
   222dc:	f04f 0440 	mov.w	r4, #64	; 0x40
   222e0:	f3ef 8111 	mrs	r1, BASEPRI
   222e4:	f384 8812 	msr	BASEPRI_MAX, r4
   222e8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   222ec:	6884      	ldr	r4, [r0, #8]
   222ee:	b144      	cbz	r4, 22302 <z_impl_k_sem_take+0x2a>
		sem->count--;
   222f0:	3c01      	subs	r4, #1
   222f2:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   222f4:	f381 8811 	msr	BASEPRI, r1
   222f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   222fc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   222fe:	b002      	add	sp, #8
   22300:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22302:	ea53 0402 	orrs.w	r4, r3, r2
   22306:	d006      	beq.n	22316 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22308:	9200      	str	r2, [sp, #0]
   2230a:	9301      	str	r3, [sp, #4]
   2230c:	4602      	mov	r2, r0
   2230e:	4805      	ldr	r0, [pc, #20]	; (22324 <z_impl_k_sem_take+0x4c>)
   22310:	f000 fb34 	bl	2297c <z_pend_curr>
	return ret;
   22314:	e7f3      	b.n	222fe <z_impl_k_sem_take+0x26>
   22316:	f381 8811 	msr	BASEPRI, r1
   2231a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2231e:	f06f 000f 	mvn.w	r0, #15
   22322:	e7ec      	b.n	222fe <z_impl_k_sem_take+0x26>
   22324:	20004074 	.word	0x20004074

00022328 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   22328:	b510      	push	{r4, lr}
   2232a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2232c:	4b08      	ldr	r3, [pc, #32]	; (22350 <k_sys_work_q_init+0x28>)
   2232e:	9302      	str	r3, [sp, #8]
   22330:	2400      	movs	r4, #0
   22332:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   22336:	ab02      	add	r3, sp, #8
   22338:	9300      	str	r3, [sp, #0]
   2233a:	f04f 33ff 	mov.w	r3, #4294967295
   2233e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22342:	4904      	ldr	r1, [pc, #16]	; (22354 <k_sys_work_q_init+0x2c>)
   22344:	4804      	ldr	r0, [pc, #16]	; (22358 <k_sys_work_q_init+0x30>)
   22346:	f7ee fe9f 	bl	11088 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2234a:	4620      	mov	r0, r4
   2234c:	b004      	add	sp, #16
   2234e:	bd10      	pop	{r4, pc}
   22350:	0003179c 	.word	0x0003179c
   22354:	20007a80 	.word	0x20007a80
   22358:	20002fa0 	.word	0x20002fa0

0002235c <queue_submit_locked>:
	if (queue == NULL) {
   2235c:	b370      	cbz	r0, 223bc <queue_submit_locked+0x60>
{
   2235e:	b538      	push	{r3, r4, r5, lr}
   22360:	460d      	mov	r5, r1
   22362:	4604      	mov	r4, r0
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22364:	4b1b      	ldr	r3, [pc, #108]	; (223d4 <queue_submit_locked+0x78>)
   22366:	689b      	ldr	r3, [r3, #8]
   22368:	4283      	cmp	r3, r0
   2236a:	d01b      	beq.n	223a4 <queue_submit_locked+0x48>
   2236c:	2300      	movs	r3, #0
   2236e:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   22370:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   22374:	f3c3 0180 	ubfx	r1, r3, #2, #1
   22378:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2237c:	f013 0f01 	tst.w	r3, #1
   22380:	d01f      	beq.n	223c2 <queue_submit_locked+0x66>
	} else if (draining && !chained) {
   22382:	b101      	cbz	r1, 22386 <queue_submit_locked+0x2a>
   22384:	b302      	cbz	r2, 223c8 <queue_submit_locked+0x6c>
	} else if (plugged && !draining) {
   22386:	b100      	cbz	r0, 2238a <queue_submit_locked+0x2e>
   22388:	b309      	cbz	r1, 223ce <queue_submit_locked+0x72>
	parent->next = child;
   2238a:	2300      	movs	r3, #0
   2238c:	602b      	str	r3, [r5, #0]
	return list->tail;
   2238e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
   22392:	b173      	cbz	r3, 223b2 <queue_submit_locked+0x56>
	parent->next = child;
   22394:	601d      	str	r5, [r3, #0]
	list->tail = node;
   22396:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
		(void)notify_queue_locked(queue);
   2239a:	4620      	mov	r0, r4
   2239c:	f00b fa0f 	bl	2d7be <notify_queue_locked>
		ret = 1;
   223a0:	2001      	movs	r0, #1
}
   223a2:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   223a4:	f00b f8a0 	bl	2d4e8 <k_is_in_isr>
   223a8:	b908      	cbnz	r0, 223ae <queue_submit_locked+0x52>
   223aa:	2301      	movs	r3, #1
   223ac:	e7df      	b.n	2236e <queue_submit_locked+0x12>
   223ae:	2300      	movs	r3, #0
   223b0:	e7dd      	b.n	2236e <queue_submit_locked+0x12>
   223b2:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
	list->head = node;
   223b6:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
   223ba:	e7ee      	b.n	2239a <queue_submit_locked+0x3e>
		return -EINVAL;
   223bc:	f06f 0015 	mvn.w	r0, #21
}
   223c0:	4770      	bx	lr
		ret = -ENODEV;
   223c2:	f06f 0012 	mvn.w	r0, #18
   223c6:	e7ec      	b.n	223a2 <queue_submit_locked+0x46>
		ret = -EBUSY;
   223c8:	f06f 000f 	mvn.w	r0, #15
   223cc:	e7e9      	b.n	223a2 <queue_submit_locked+0x46>
		ret = -EBUSY;
   223ce:	f06f 000f 	mvn.w	r0, #15
   223d2:	e7e6      	b.n	223a2 <queue_submit_locked+0x46>
   223d4:	20004040 	.word	0x20004040

000223d8 <finalize_cancel_locked>:
{
   223d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   223da:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   223dc:	68c3      	ldr	r3, [r0, #12]
   223de:	f023 0302 	bic.w	r3, r3, #2
   223e2:	60c3      	str	r3, [r0, #12]
	return list->head;
   223e4:	4b13      	ldr	r3, [pc, #76]	; (22434 <finalize_cancel_locked+0x5c>)
   223e6:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   223e8:	b185      	cbz	r5, 2240c <finalize_cancel_locked+0x34>
	return node->next;
   223ea:	682c      	ldr	r4, [r5, #0]
   223ec:	b104      	cbz	r4, 223f0 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   223ee:	b10d      	cbz	r5, 223f4 <finalize_cancel_locked+0x1c>
   223f0:	2700      	movs	r7, #0
   223f2:	e010      	b.n	22416 <finalize_cancel_locked+0x3e>
   223f4:	462c      	mov	r4, r5
   223f6:	e7fb      	b.n	223f0 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   223f8:	462a      	mov	r2, r5
   223fa:	4639      	mov	r1, r7
   223fc:	480d      	ldr	r0, [pc, #52]	; (22434 <finalize_cancel_locked+0x5c>)
   223fe:	f00b f999 	bl	2d734 <sys_slist_remove>
			k_sem_give(&wc->sem);
   22402:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   22406:	f7ff ff3f 	bl	22288 <z_impl_k_sem_give>
}
   2240a:	e009      	b.n	22420 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2240c:	462c      	mov	r4, r5
   2240e:	e7ef      	b.n	223f0 <finalize_cancel_locked+0x18>
   22410:	4623      	mov	r3, r4
   22412:	4625      	mov	r5, r4
   22414:	461c      	mov	r4, r3
   22416:	b165      	cbz	r5, 22432 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   22418:	686b      	ldr	r3, [r5, #4]
   2241a:	42b3      	cmp	r3, r6
   2241c:	d0ec      	beq.n	223f8 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   2241e:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22420:	2c00      	cmp	r4, #0
   22422:	d0f5      	beq.n	22410 <finalize_cancel_locked+0x38>
	return node->next;
   22424:	6823      	ldr	r3, [r4, #0]
   22426:	2b00      	cmp	r3, #0
   22428:	d0f3      	beq.n	22412 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2242a:	2c00      	cmp	r4, #0
   2242c:	d1f1      	bne.n	22412 <finalize_cancel_locked+0x3a>
   2242e:	4623      	mov	r3, r4
   22430:	e7ef      	b.n	22412 <finalize_cancel_locked+0x3a>
}
   22432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22434:	20004074 	.word	0x20004074

00022438 <init_work_cancel>:
{
   22438:	b538      	push	{r3, r4, r5, lr}
   2243a:	4604      	mov	r4, r0
   2243c:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   2243e:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   22440:	2201      	movs	r2, #1
   22442:	2100      	movs	r1, #0
   22444:	f00b f963 	bl	2d70e <z_impl_k_sem_init>
	canceler->work = work;
   22448:	6065      	str	r5, [r4, #4]
	parent->next = child;
   2244a:	2300      	movs	r3, #0
   2244c:	6023      	str	r3, [r4, #0]
	return list->tail;
   2244e:	4b05      	ldr	r3, [pc, #20]	; (22464 <init_work_cancel+0x2c>)
   22450:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   22452:	b11b      	cbz	r3, 2245c <init_work_cancel+0x24>
	parent->next = child;
   22454:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22456:	4b03      	ldr	r3, [pc, #12]	; (22464 <init_work_cancel+0x2c>)
   22458:	605c      	str	r4, [r3, #4]
}
   2245a:	bd38      	pop	{r3, r4, r5, pc}
   2245c:	4b01      	ldr	r3, [pc, #4]	; (22464 <init_work_cancel+0x2c>)
   2245e:	605c      	str	r4, [r3, #4]
	list->head = node;
   22460:	601c      	str	r4, [r3, #0]
}
   22462:	e7fa      	b.n	2245a <init_work_cancel+0x22>
   22464:	20004074 	.word	0x20004074

00022468 <work_queue_main>:
{
   22468:	b570      	push	{r4, r5, r6, lr}
   2246a:	b084      	sub	sp, #16
   2246c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   2246e:	e016      	b.n	2249e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   22470:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	*flagp &= ~BIT(bit);
   22474:	f023 0204 	bic.w	r2, r3, #4
   22478:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
		} else if (flag_test_and_clear(&queue->flags,
   2247c:	f013 0f04 	tst.w	r3, #4
   22480:	d15a      	bne.n	22538 <work_queue_main+0xd0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22482:	2300      	movs	r3, #0
   22484:	9302      	str	r3, [sp, #8]
   22486:	f04f 32ff 	mov.w	r2, #4294967295
   2248a:	f04f 33ff 	mov.w	r3, #4294967295
   2248e:	e9cd 2300 	strd	r2, r3, [sp]
   22492:	f505 7280 	add.w	r2, r5, #256	; 0x100
   22496:	4631      	mov	r1, r6
   22498:	482e      	ldr	r0, [pc, #184]	; (22554 <work_queue_main+0xec>)
   2249a:	f000 fc7b 	bl	22d94 <z_sched_wait>
	__asm__ volatile(
   2249e:	f04f 0340 	mov.w	r3, #64	; 0x40
   224a2:	f3ef 8611 	mrs	r6, BASEPRI
   224a6:	f383 8812 	msr	BASEPRI_MAX, r3
   224aa:	f3bf 8f6f 	isb	sy
   224ae:	4632      	mov	r2, r6
	return list->head;
   224b0:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   224b4:	2c00      	cmp	r4, #0
   224b6:	d0db      	beq.n	22470 <work_queue_main+0x8>
	return node->next;
   224b8:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   224ba:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	return list->tail;
   224be:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   224c2:	428c      	cmp	r4, r1
   224c4:	d035      	beq.n	22532 <work_queue_main+0xca>
	*flagp |= BIT(bit);
   224c6:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   224ca:	f043 0302 	orr.w	r3, r3, #2
   224ce:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   224d2:	68e3      	ldr	r3, [r4, #12]
   224d4:	f043 0101 	orr.w	r1, r3, #1
   224d8:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   224da:	f023 0304 	bic.w	r3, r3, #4
   224de:	f043 0301 	orr.w	r3, r3, #1
   224e2:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   224e4:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   224e6:	f382 8811 	msr	BASEPRI, r2
   224ea:	f3bf 8f6f 	isb	sy
		handler(work);
   224ee:	4620      	mov	r0, r4
   224f0:	4798      	blx	r3
	__asm__ volatile(
   224f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   224f6:	f3ef 8611 	mrs	r6, BASEPRI
   224fa:	f383 8812 	msr	BASEPRI_MAX, r3
   224fe:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   22502:	68e3      	ldr	r3, [r4, #12]
   22504:	f023 0301 	bic.w	r3, r3, #1
   22508:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2250a:	f013 0f02 	tst.w	r3, #2
   2250e:	d11d      	bne.n	2254c <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   22510:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   22514:	f023 0302 	bic.w	r3, r3, #2
   22518:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
	return (*flagp & BIT(bit)) != 0U;
   2251c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   22520:	f386 8811 	msr	BASEPRI, r6
   22524:	f3bf 8f6f 	isb	sy
		if (yield) {
   22528:	2b00      	cmp	r3, #0
   2252a:	d1b8      	bne.n	2249e <work_queue_main+0x36>
	z_impl_k_yield();
   2252c:	f000 fb38 	bl	22ba0 <z_impl_k_yield>
}
   22530:	e7b5      	b.n	2249e <work_queue_main+0x36>
	list->tail = node;
   22532:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
		if (node != NULL) {
   22536:	e7c6      	b.n	224c6 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   22538:	f505 7484 	add.w	r4, r5, #264	; 0x108
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2253c:	2200      	movs	r2, #0
   2253e:	2101      	movs	r1, #1
   22540:	4620      	mov	r0, r4
   22542:	f00b fbe9 	bl	2dd18 <z_sched_wake>
   22546:	2800      	cmp	r0, #0
   22548:	d1f8      	bne.n	2253c <work_queue_main+0xd4>
   2254a:	e79a      	b.n	22482 <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   2254c:	4620      	mov	r0, r4
   2254e:	f7ff ff43 	bl	223d8 <finalize_cancel_locked>
   22552:	e7dd      	b.n	22510 <work_queue_main+0xa8>
   22554:	2000407c 	.word	0x2000407c

00022558 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   22558:	b508      	push	{r3, lr}
   2255a:	4684      	mov	ip, r0
   2255c:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2255e:	ea53 0102 	orrs.w	r1, r3, r2
   22562:	d00c      	beq.n	2257e <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   22564:	68c1      	ldr	r1, [r0, #12]
   22566:	f041 0108 	orr.w	r1, r1, #8
   2256a:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   2256c:	f8dc 1000 	ldr.w	r1, [ip]
   22570:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22572:	4905      	ldr	r1, [pc, #20]	; (22588 <schedule_for_queue_locked+0x30>)
   22574:	3010      	adds	r0, #16
   22576:	f000 fc81 	bl	22e7c <z_add_timeout>

	return ret;
   2257a:	2001      	movs	r0, #1
}
   2257c:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   2257e:	4661      	mov	r1, ip
   22580:	f00b f928 	bl	2d7d4 <submit_to_queue_locked>
   22584:	e7fa      	b.n	2257c <schedule_for_queue_locked+0x24>
   22586:	bf00      	nop
   22588:	0002d835 	.word	0x0002d835

0002258c <k_work_submit>:
{
   2258c:	b508      	push	{r3, lr}
   2258e:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   22590:	4801      	ldr	r0, [pc, #4]	; (22598 <k_work_submit+0xc>)
   22592:	f00b f9c0 	bl	2d916 <k_work_submit_to_queue>
}
   22596:	bd08      	pop	{r3, pc}
   22598:	20002fa0 	.word	0x20002fa0

0002259c <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2259c:	b508      	push	{r3, lr}
   2259e:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   225a0:	4801      	ldr	r0, [pc, #4]	; (225a8 <k_work_schedule+0xc>)
   225a2:	f00b f9e5 	bl	2d970 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   225a6:	bd08      	pop	{r3, pc}
   225a8:	20002fa0 	.word	0x20002fa0

000225ac <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   225ac:	b508      	push	{r3, lr}
   225ae:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   225b0:	4801      	ldr	r0, [pc, #4]	; (225b8 <k_work_reschedule+0xc>)
   225b2:	f00b f9f7 	bl	2d9a4 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   225b6:	bd08      	pop	{r3, pc}
   225b8:	20002fa0 	.word	0x20002fa0

000225bc <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   225bc:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   225be:	2b7f      	cmp	r3, #127	; 0x7f
   225c0:	d80e      	bhi.n	225e0 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   225c2:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   225c4:	f013 0f1f 	tst.w	r3, #31
   225c8:	d10c      	bne.n	225e4 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   225ca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   225ce:	4b08      	ldr	r3, [pc, #32]	; (225f0 <sliceable+0x34>)
   225d0:	681b      	ldr	r3, [r3, #0]
   225d2:	429a      	cmp	r2, r3
   225d4:	db08      	blt.n	225e8 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   225d6:	4b07      	ldr	r3, [pc, #28]	; (225f4 <sliceable+0x38>)
   225d8:	4298      	cmp	r0, r3
   225da:	d007      	beq.n	225ec <sliceable+0x30>
   225dc:	2001      	movs	r0, #1
   225de:	4770      	bx	lr
   225e0:	2000      	movs	r0, #0
   225e2:	4770      	bx	lr
   225e4:	2000      	movs	r0, #0
   225e6:	4770      	bx	lr
   225e8:	2000      	movs	r0, #0
   225ea:	4770      	bx	lr
   225ec:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   225ee:	4770      	bx	lr
   225f0:	20004080 	.word	0x20004080
   225f4:	20002db0 	.word	0x20002db0

000225f8 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   225f8:	f1b3 3fff 	cmp.w	r3, #4294967295
   225fc:	bf08      	it	eq
   225fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22602:	d100      	bne.n	22606 <add_thread_timeout+0xe>
   22604:	4770      	bx	lr
{
   22606:	b508      	push	{r3, lr}
   22608:	4902      	ldr	r1, [pc, #8]	; (22614 <add_thread_timeout+0x1c>)
   2260a:	3018      	adds	r0, #24
   2260c:	f000 fc36 	bl	22e7c <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   22610:	bd08      	pop	{r3, pc}
   22612:	bf00      	nop
   22614:	0002db7b 	.word	0x0002db7b

00022618 <z_reset_time_slice>:
{
   22618:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   2261a:	4b07      	ldr	r3, [pc, #28]	; (22638 <z_reset_time_slice+0x20>)
   2261c:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   2261e:	b904      	cbnz	r4, 22622 <z_reset_time_slice+0xa>
}
   22620:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   22622:	f7fc fe4d 	bl	1f2c0 <sys_clock_elapsed>
   22626:	4404      	add	r4, r0
   22628:	4b04      	ldr	r3, [pc, #16]	; (2263c <z_reset_time_slice+0x24>)
   2262a:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2262c:	2100      	movs	r1, #0
   2262e:	4b02      	ldr	r3, [pc, #8]	; (22638 <z_reset_time_slice+0x20>)
   22630:	6818      	ldr	r0, [r3, #0]
   22632:	f00b fbeb 	bl	2de0c <z_set_timeout_expiry>
}
   22636:	e7f3      	b.n	22620 <z_reset_time_slice+0x8>
   22638:	20004084 	.word	0x20004084
   2263c:	20004040 	.word	0x20004040

00022640 <k_sched_time_slice_set>:
{
   22640:	b570      	push	{r4, r5, r6, lr}
   22642:	4604      	mov	r4, r0
   22644:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   22646:	2300      	movs	r3, #0
	__asm__ volatile(
   22648:	f04f 0240 	mov.w	r2, #64	; 0x40
   2264c:	f3ef 8511 	mrs	r5, BASEPRI
   22650:	f382 8812 	msr	BASEPRI_MAX, r2
   22654:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   22658:	e00e      	b.n	22678 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   2265a:	2802      	cmp	r0, #2
   2265c:	bfb8      	it	lt
   2265e:	2002      	movlt	r0, #2
   22660:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   22662:	4b11      	ldr	r3, [pc, #68]	; (226a8 <k_sched_time_slice_set+0x68>)
   22664:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
   22666:	4b11      	ldr	r3, [pc, #68]	; (226ac <k_sched_time_slice_set+0x6c>)
   22668:	6898      	ldr	r0, [r3, #8]
   2266a:	f7ff ffd5 	bl	22618 <z_reset_time_slice>
	__asm__ volatile(
   2266e:	f385 8811 	msr	BASEPRI, r5
   22672:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22676:	2301      	movs	r3, #1
   22678:	b9a3      	cbnz	r3, 226a4 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   2267a:	4b0c      	ldr	r3, [pc, #48]	; (226ac <k_sched_time_slice_set+0x6c>)
   2267c:	2200      	movs	r2, #0
   2267e:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   22680:	0c61      	lsrs	r1, r4, #17
   22682:	03e0      	lsls	r0, r4, #15
   22684:	f240 33e7 	movw	r3, #999	; 0x3e7
   22688:	18c0      	adds	r0, r0, r3
   2268a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2268e:	f04f 0300 	mov.w	r3, #0
   22692:	f141 0100 	adc.w	r1, r1, #0
   22696:	f7de f951 	bl	93c <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2269a:	4b05      	ldr	r3, [pc, #20]	; (226b0 <k_sched_time_slice_set+0x70>)
   2269c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2269e:	2c00      	cmp	r4, #0
   226a0:	dcdb      	bgt.n	2265a <k_sched_time_slice_set+0x1a>
   226a2:	e7de      	b.n	22662 <k_sched_time_slice_set+0x22>
}
   226a4:	bd70      	pop	{r4, r5, r6, pc}
   226a6:	bf00      	nop
   226a8:	20004080 	.word	0x20004080
   226ac:	20004040 	.word	0x20004040
   226b0:	20004084 	.word	0x20004084

000226b4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   226b4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   226b6:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   226b8:	b959      	cbnz	r1, 226d2 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   226ba:	f3ef 8205 	mrs	r2, IPSR
   226be:	b942      	cbnz	r2, 226d2 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   226c0:	4a06      	ldr	r2, [pc, #24]	; (226dc <z_reschedule+0x28>)
   226c2:	6a10      	ldr	r0, [r2, #32]
	return new_thread != _current;
   226c4:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   226c6:	4290      	cmp	r0, r2
   226c8:	d003      	beq.n	226d2 <z_reschedule+0x1e>
	ret = arch_swap(key);
   226ca:	4608      	mov	r0, r1
   226cc:	f7f2 ff1e 	bl	1550c <arch_swap>
		z_swap(lock, key);
   226d0:	e003      	b.n	226da <z_reschedule+0x26>
   226d2:	f383 8811 	msr	BASEPRI, r3
   226d6:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   226da:	bd08      	pop	{r3, pc}
   226dc:	20004040 	.word	0x20004040

000226e0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   226e0:	2300      	movs	r3, #0
	__asm__ volatile(
   226e2:	f04f 0240 	mov.w	r2, #64	; 0x40
   226e6:	f3ef 8111 	mrs	r1, BASEPRI
   226ea:	f382 8812 	msr	BASEPRI_MAX, r2
   226ee:	f3bf 8f6f 	isb	sy
   226f2:	e009      	b.n	22708 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   226f4:	4b06      	ldr	r3, [pc, #24]	; (22710 <k_sched_lock+0x30>)
   226f6:	689a      	ldr	r2, [r3, #8]
   226f8:	7bd3      	ldrb	r3, [r2, #15]
   226fa:	3b01      	subs	r3, #1
   226fc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   226fe:	f381 8811 	msr	BASEPRI, r1
   22702:	f3bf 8f6f 	isb	sy
   22706:	2301      	movs	r3, #1
   22708:	2b00      	cmp	r3, #0
   2270a:	d0f3      	beq.n	226f4 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2270c:	4770      	bx	lr
   2270e:	bf00      	nop
   22710:	20004040 	.word	0x20004040

00022714 <update_cache>:
{
   22714:	b538      	push	{r3, r4, r5, lr}
   22716:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   22718:	4810      	ldr	r0, [pc, #64]	; (2275c <update_cache+0x48>)
   2271a:	f00b fa0b 	bl	2db34 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2271e:	4605      	mov	r5, r0
   22720:	b170      	cbz	r0, 22740 <update_cache+0x2c>
	if (preempt_ok != 0) {
   22722:	b984      	cbnz	r4, 22746 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   22724:	4b0e      	ldr	r3, [pc, #56]	; (22760 <update_cache+0x4c>)
   22726:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   22728:	7b5a      	ldrb	r2, [r3, #13]
   2272a:	f012 0f1f 	tst.w	r2, #31
   2272e:	d10a      	bne.n	22746 <update_cache+0x32>
	return node->next != NULL;
   22730:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22732:	b942      	cbnz	r2, 22746 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   22734:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   22736:	2a7f      	cmp	r2, #127	; 0x7f
   22738:	d905      	bls.n	22746 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   2273a:	4a09      	ldr	r2, [pc, #36]	; (22760 <update_cache+0x4c>)
   2273c:	6213      	str	r3, [r2, #32]
   2273e:	e00b      	b.n	22758 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   22740:	4b07      	ldr	r3, [pc, #28]	; (22760 <update_cache+0x4c>)
   22742:	68dd      	ldr	r5, [r3, #12]
   22744:	e7ed      	b.n	22722 <update_cache+0xe>
		if (thread != _current) {
   22746:	4b06      	ldr	r3, [pc, #24]	; (22760 <update_cache+0x4c>)
   22748:	689b      	ldr	r3, [r3, #8]
   2274a:	42ab      	cmp	r3, r5
   2274c:	d002      	beq.n	22754 <update_cache+0x40>
			z_reset_time_slice(thread);
   2274e:	4628      	mov	r0, r5
   22750:	f7ff ff62 	bl	22618 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   22754:	4b02      	ldr	r3, [pc, #8]	; (22760 <update_cache+0x4c>)
   22756:	621d      	str	r5, [r3, #32]
}
   22758:	bd38      	pop	{r3, r4, r5, pc}
   2275a:	bf00      	nop
   2275c:	20004064 	.word	0x20004064
   22760:	20004040 	.word	0x20004040

00022764 <move_thread_to_end_of_prio_q>:
{
   22764:	b538      	push	{r3, r4, r5, lr}
   22766:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   22768:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2276a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2276e:	2b00      	cmp	r3, #0
   22770:	db0a      	blt.n	22788 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   22772:	7b6b      	ldrb	r3, [r5, #13]
   22774:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22778:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   2277a:	4b1b      	ldr	r3, [pc, #108]	; (227e8 <move_thread_to_end_of_prio_q+0x84>)
   2277c:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22780:	429c      	cmp	r4, r3
   22782:	d110      	bne.n	227a6 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22784:	2400      	movs	r4, #0
   22786:	e00e      	b.n	227a6 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22788:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2278c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2278e:	4601      	mov	r1, r0
   22790:	4816      	ldr	r0, [pc, #88]	; (227ec <move_thread_to_end_of_prio_q+0x88>)
   22792:	f00b f99e 	bl	2dad2 <z_priq_dumb_remove>
}
   22796:	e7ec      	b.n	22772 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   22798:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   2279a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2279c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2279e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   227a0:	6065      	str	r5, [r4, #4]
}
   227a2:	e017      	b.n	227d4 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   227a4:	2400      	movs	r4, #0
   227a6:	b16c      	cbz	r4, 227c4 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   227a8:	4621      	mov	r1, r4
   227aa:	4628      	mov	r0, r5
   227ac:	f00b f956 	bl	2da5c <z_sched_prio_cmp>
   227b0:	2800      	cmp	r0, #0
   227b2:	dcf1      	bgt.n	22798 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   227b4:	2c00      	cmp	r4, #0
   227b6:	d0f6      	beq.n	227a6 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   227b8:	4b0b      	ldr	r3, [pc, #44]	; (227e8 <move_thread_to_end_of_prio_q+0x84>)
   227ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   227bc:	429c      	cmp	r4, r3
   227be:	d0f1      	beq.n	227a4 <move_thread_to_end_of_prio_q+0x40>
   227c0:	6824      	ldr	r4, [r4, #0]
   227c2:	e7f0      	b.n	227a6 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   227c4:	4b08      	ldr	r3, [pc, #32]	; (227e8 <move_thread_to_end_of_prio_q+0x84>)
   227c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	node->next = list;
   227c8:	f103 0124 	add.w	r1, r3, #36	; 0x24
   227cc:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   227ce:	606a      	str	r2, [r5, #4]
	tail->next = node;
   227d0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   227d2:	629d      	str	r5, [r3, #40]	; 0x28
	update_cache(thread == _current);
   227d4:	4b04      	ldr	r3, [pc, #16]	; (227e8 <move_thread_to_end_of_prio_q+0x84>)
   227d6:	6898      	ldr	r0, [r3, #8]
   227d8:	42a8      	cmp	r0, r5
   227da:	bf14      	ite	ne
   227dc:	2000      	movne	r0, #0
   227de:	2001      	moveq	r0, #1
   227e0:	f7ff ff98 	bl	22714 <update_cache>
}
   227e4:	bd38      	pop	{r3, r4, r5, pc}
   227e6:	bf00      	nop
   227e8:	20004040 	.word	0x20004040
   227ec:	20004064 	.word	0x20004064

000227f0 <slice_expired_locked>:
{
   227f0:	b538      	push	{r3, r4, r5, lr}
   227f2:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   227f4:	4b07      	ldr	r3, [pc, #28]	; (22814 <slice_expired_locked+0x24>)
   227f6:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   227f8:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   227fa:	f013 0f1f 	tst.w	r3, #31
   227fe:	d004      	beq.n	2280a <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   22800:	4628      	mov	r0, r5
   22802:	f7ff ff09 	bl	22618 <z_reset_time_slice>
}
   22806:	4620      	mov	r0, r4
   22808:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   2280a:	4628      	mov	r0, r5
   2280c:	f7ff ffaa 	bl	22764 <move_thread_to_end_of_prio_q>
   22810:	e7f6      	b.n	22800 <slice_expired_locked+0x10>
   22812:	bf00      	nop
   22814:	20004040 	.word	0x20004040

00022818 <z_time_slice>:
{
   22818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2281a:	4605      	mov	r5, r0
	__asm__ volatile(
   2281c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22820:	f3ef 8611 	mrs	r6, BASEPRI
   22824:	f383 8812 	msr	BASEPRI_MAX, r3
   22828:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   2282c:	4b15      	ldr	r3, [pc, #84]	; (22884 <z_time_slice+0x6c>)
   2282e:	6898      	ldr	r0, [r3, #8]
   22830:	4b15      	ldr	r3, [pc, #84]	; (22888 <z_time_slice+0x70>)
   22832:	681b      	ldr	r3, [r3, #0]
   22834:	4298      	cmp	r0, r3
   22836:	d011      	beq.n	2285c <z_time_slice+0x44>
   22838:	4634      	mov	r4, r6
	pending_current = NULL;
   2283a:	4b13      	ldr	r3, [pc, #76]	; (22888 <z_time_slice+0x70>)
   2283c:	2200      	movs	r2, #0
   2283e:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   22840:	4b12      	ldr	r3, [pc, #72]	; (2288c <z_time_slice+0x74>)
   22842:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   22844:	b1b3      	cbz	r3, 22874 <z_time_slice+0x5c>
   22846:	f7ff feb9 	bl	225bc <sliceable>
   2284a:	b198      	cbz	r0, 22874 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
   2284c:	4b0d      	ldr	r3, [pc, #52]	; (22884 <z_time_slice+0x6c>)
   2284e:	691b      	ldr	r3, [r3, #16]
   22850:	42ab      	cmp	r3, r5
   22852:	dd0a      	ble.n	2286a <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
   22854:	1b5b      	subs	r3, r3, r5
   22856:	4a0b      	ldr	r2, [pc, #44]	; (22884 <z_time_slice+0x6c>)
   22858:	6113      	str	r3, [r2, #16]
   2285a:	e00e      	b.n	2287a <z_time_slice+0x62>
		z_reset_time_slice(_current);
   2285c:	f7ff fedc 	bl	22618 <z_reset_time_slice>
	__asm__ volatile(
   22860:	f386 8811 	msr	BASEPRI, r6
   22864:	f3bf 8f6f 	isb	sy
		return;
   22868:	e00b      	b.n	22882 <z_time_slice+0x6a>
			key = slice_expired_locked(key);
   2286a:	4630      	mov	r0, r6
   2286c:	f7ff ffc0 	bl	227f0 <slice_expired_locked>
   22870:	4604      	mov	r4, r0
   22872:	e002      	b.n	2287a <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
   22874:	4b03      	ldr	r3, [pc, #12]	; (22884 <z_time_slice+0x6c>)
   22876:	2200      	movs	r2, #0
   22878:	611a      	str	r2, [r3, #16]
   2287a:	f384 8811 	msr	BASEPRI, r4
   2287e:	f3bf 8f6f 	isb	sy
}
   22882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22884:	20004040 	.word	0x20004040
   22888:	2000407c 	.word	0x2000407c
   2288c:	20004084 	.word	0x20004084

00022890 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   22890:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22892:	f990 300d 	ldrsb.w	r3, [r0, #13]
   22896:	2b00      	cmp	r3, #0
   22898:	db33      	blt.n	22902 <ready_thread+0x72>
{
   2289a:	b570      	push	{r4, r5, r6, lr}
   2289c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2289e:	f012 0f1f 	tst.w	r2, #31
   228a2:	d101      	bne.n	228a8 <ready_thread+0x18>
	return node->next != NULL;
   228a4:	6986      	ldr	r6, [r0, #24]
   228a6:	b106      	cbz	r6, 228aa <ready_thread+0x1a>
}
   228a8:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   228aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   228ae:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   228b0:	4b14      	ldr	r3, [pc, #80]	; (22904 <ready_thread+0x74>)
   228b2:	f853 5f24 	ldr.w	r5, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   228b6:	429d      	cmp	r5, r3
   228b8:	d108      	bne.n	228cc <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   228ba:	4635      	mov	r5, r6
   228bc:	e006      	b.n	228cc <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   228be:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   228c0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   228c2:	6025      	str	r5, [r4, #0]
	prev->next = node;
   228c4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   228c6:	606c      	str	r4, [r5, #4]
}
   228c8:	e017      	b.n	228fa <ready_thread+0x6a>
   228ca:	4635      	mov	r5, r6
   228cc:	b16d      	cbz	r5, 228ea <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   228ce:	4629      	mov	r1, r5
   228d0:	4620      	mov	r0, r4
   228d2:	f00b f8c3 	bl	2da5c <z_sched_prio_cmp>
   228d6:	2800      	cmp	r0, #0
   228d8:	dcf1      	bgt.n	228be <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   228da:	2d00      	cmp	r5, #0
   228dc:	d0f6      	beq.n	228cc <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   228de:	4b09      	ldr	r3, [pc, #36]	; (22904 <ready_thread+0x74>)
   228e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   228e2:	429d      	cmp	r5, r3
   228e4:	d0f1      	beq.n	228ca <ready_thread+0x3a>
   228e6:	682d      	ldr	r5, [r5, #0]
   228e8:	e7f0      	b.n	228cc <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   228ea:	4b06      	ldr	r3, [pc, #24]	; (22904 <ready_thread+0x74>)
   228ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	node->next = list;
   228ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
   228f2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   228f4:	6062      	str	r2, [r4, #4]
	tail->next = node;
   228f6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   228f8:	629c      	str	r4, [r3, #40]	; 0x28
		update_cache(0);
   228fa:	2000      	movs	r0, #0
   228fc:	f7ff ff0a 	bl	22714 <update_cache>
}
   22900:	e7d2      	b.n	228a8 <ready_thread+0x18>
   22902:	4770      	bx	lr
   22904:	20004040 	.word	0x20004040

00022908 <z_sched_start>:
{
   22908:	b510      	push	{r4, lr}
	__asm__ volatile(
   2290a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2290e:	f3ef 8411 	mrs	r4, BASEPRI
   22912:	f383 8812 	msr	BASEPRI_MAX, r3
   22916:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2291a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   2291c:	f013 0f04 	tst.w	r3, #4
   22920:	d104      	bne.n	2292c <z_sched_start+0x24>
	__asm__ volatile(
   22922:	f384 8811 	msr	BASEPRI, r4
   22926:	f3bf 8f6f 	isb	sy
}
   2292a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2292c:	f023 0304 	bic.w	r3, r3, #4
   22930:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   22932:	f7ff ffad 	bl	22890 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   22936:	4621      	mov	r1, r4
   22938:	4801      	ldr	r0, [pc, #4]	; (22940 <z_sched_start+0x38>)
   2293a:	f7ff febb 	bl	226b4 <z_reschedule>
   2293e:	e7f4      	b.n	2292a <z_sched_start+0x22>
   22940:	20004088 	.word	0x20004088

00022944 <unready_thread>:
{
   22944:	b510      	push	{r4, lr}
   22946:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   22948:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2294a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2294e:	2b00      	cmp	r3, #0
   22950:	db08      	blt.n	22964 <unready_thread+0x20>
	update_cache(thread == _current);
   22952:	4b08      	ldr	r3, [pc, #32]	; (22974 <unready_thread+0x30>)
   22954:	6898      	ldr	r0, [r3, #8]
   22956:	42a0      	cmp	r0, r4
   22958:	bf14      	ite	ne
   2295a:	2000      	movne	r0, #0
   2295c:	2001      	moveq	r0, #1
   2295e:	f7ff fed9 	bl	22714 <update_cache>
}
   22962:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   22968:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2296a:	4601      	mov	r1, r0
   2296c:	4802      	ldr	r0, [pc, #8]	; (22978 <unready_thread+0x34>)
   2296e:	f00b f8b0 	bl	2dad2 <z_priq_dumb_remove>
}
   22972:	e7ee      	b.n	22952 <unready_thread+0xe>
   22974:	20004040 	.word	0x20004040
   22978:	20004064 	.word	0x20004064

0002297c <z_pend_curr>:
{
   2297c:	b510      	push	{r4, lr}
   2297e:	460c      	mov	r4, r1
   22980:	4611      	mov	r1, r2
	pending_current = _current;
   22982:	480a      	ldr	r0, [pc, #40]	; (229ac <z_pend_curr+0x30>)
   22984:	6882      	ldr	r2, [r0, #8]
   22986:	4b0a      	ldr	r3, [pc, #40]	; (229b0 <z_pend_curr+0x34>)
   22988:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   2298a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2298e:	f3ef 8311 	mrs	r3, BASEPRI
   22992:	f382 8812 	msr	BASEPRI_MAX, r2
   22996:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   2299a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2299e:	6880      	ldr	r0, [r0, #8]
   229a0:	f00b f95a 	bl	2dc58 <pend_locked>
   229a4:	4620      	mov	r0, r4
   229a6:	f7f2 fdb1 	bl	1550c <arch_swap>
}
   229aa:	bd10      	pop	{r4, pc}
   229ac:	20004040 	.word	0x20004040
   229b0:	2000407c 	.word	0x2000407c

000229b4 <z_set_prio>:
{
   229b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   229b8:	4605      	mov	r5, r0
   229ba:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   229bc:	2300      	movs	r3, #0
   229be:	f04f 0240 	mov.w	r2, #64	; 0x40
   229c2:	f3ef 8611 	mrs	r6, BASEPRI
   229c6:	f382 8812 	msr	BASEPRI_MAX, r2
   229ca:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   229ce:	4618      	mov	r0, r3
   229d0:	e029      	b.n	22a26 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   229d2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   229d4:	606b      	str	r3, [r5, #4]
	node->next = successor;
   229d6:	602c      	str	r4, [r5, #0]
	prev->next = node;
   229d8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   229da:	6065      	str	r5, [r4, #4]
}
   229dc:	e017      	b.n	22a0e <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   229de:	4644      	mov	r4, r8
   229e0:	b16c      	cbz	r4, 229fe <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   229e2:	4621      	mov	r1, r4
   229e4:	4628      	mov	r0, r5
   229e6:	f00b f839 	bl	2da5c <z_sched_prio_cmp>
   229ea:	2800      	cmp	r0, #0
   229ec:	dcf1      	bgt.n	229d2 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   229ee:	2c00      	cmp	r4, #0
   229f0:	d0f6      	beq.n	229e0 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   229f2:	4b1d      	ldr	r3, [pc, #116]	; (22a68 <z_set_prio+0xb4>)
   229f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   229f6:	429c      	cmp	r4, r3
   229f8:	d0f1      	beq.n	229de <z_set_prio+0x2a>
   229fa:	6824      	ldr	r4, [r4, #0]
   229fc:	e7f0      	b.n	229e0 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   229fe:	4b1a      	ldr	r3, [pc, #104]	; (22a68 <z_set_prio+0xb4>)
   22a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	node->next = list;
   22a02:	f103 0124 	add.w	r1, r3, #36	; 0x24
   22a06:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   22a08:	606a      	str	r2, [r5, #4]
	tail->next = node;
   22a0a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   22a0c:	629d      	str	r5, [r3, #40]	; 0x28
			update_cache(1);
   22a0e:	2001      	movs	r0, #1
   22a10:	f7ff fe80 	bl	22714 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22a14:	2001      	movs	r0, #1
   22a16:	e001      	b.n	22a1c <z_set_prio+0x68>
			thread->base.prio = prio;
   22a18:	73af      	strb	r7, [r5, #14]
   22a1a:	2000      	movs	r0, #0
	__asm__ volatile(
   22a1c:	f386 8811 	msr	BASEPRI, r6
   22a20:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22a24:	2301      	movs	r3, #1
   22a26:	b9e3      	cbnz	r3, 22a62 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   22a28:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22a2a:	f013 0f1f 	tst.w	r3, #31
   22a2e:	d1f3      	bne.n	22a18 <z_set_prio+0x64>
	return node->next != NULL;
   22a30:	f8d5 8018 	ldr.w	r8, [r5, #24]
   22a34:	f1b8 0f00 	cmp.w	r8, #0
   22a38:	d1ee      	bne.n	22a18 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22a3e:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22a40:	f8df 9028 	ldr.w	r9, [pc, #40]	; 22a6c <z_set_prio+0xb8>
   22a44:	4629      	mov	r1, r5
   22a46:	4648      	mov	r0, r9
   22a48:	f00b f843 	bl	2dad2 <z_priq_dumb_remove>
				thread->base.prio = prio;
   22a4c:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   22a4e:	7b6b      	ldrb	r3, [r5, #13]
   22a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22a54:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   22a56:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a5a:	454c      	cmp	r4, r9
   22a5c:	d1c0      	bne.n	229e0 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a5e:	4644      	mov	r4, r8
   22a60:	e7be      	b.n	229e0 <z_set_prio+0x2c>
}
   22a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22a66:	bf00      	nop
   22a68:	20004040 	.word	0x20004040
   22a6c:	20004064 	.word	0x20004064

00022a70 <z_impl_k_thread_suspend>:
{
   22a70:	b538      	push	{r3, r4, r5, lr}
   22a72:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   22a74:	3018      	adds	r0, #24
   22a76:	f00b f994 	bl	2dda2 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   22a7a:	2300      	movs	r3, #0
	__asm__ volatile(
   22a7c:	f04f 0240 	mov.w	r2, #64	; 0x40
   22a80:	f3ef 8511 	mrs	r5, BASEPRI
   22a84:	f382 8812 	msr	BASEPRI_MAX, r2
   22a88:	f3bf 8f6f 	isb	sy
   22a8c:	e010      	b.n	22ab0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22a8e:	7b63      	ldrb	r3, [r4, #13]
   22a90:	f043 0310 	orr.w	r3, r3, #16
   22a94:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   22a96:	4b11      	ldr	r3, [pc, #68]	; (22adc <z_impl_k_thread_suspend+0x6c>)
   22a98:	6898      	ldr	r0, [r3, #8]
   22a9a:	42a0      	cmp	r0, r4
   22a9c:	bf14      	ite	ne
   22a9e:	2000      	movne	r0, #0
   22aa0:	2001      	moveq	r0, #1
   22aa2:	f7ff fe37 	bl	22714 <update_cache>
	__asm__ volatile(
   22aa6:	f385 8811 	msr	BASEPRI, r5
   22aaa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22aae:	2301      	movs	r3, #1
   22ab0:	b963      	cbnz	r3, 22acc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   22ab2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   22ab4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   22ab8:	2b00      	cmp	r3, #0
   22aba:	dae8      	bge.n	22a8e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22abc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   22ac0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22ac2:	4621      	mov	r1, r4
   22ac4:	4806      	ldr	r0, [pc, #24]	; (22ae0 <z_impl_k_thread_suspend+0x70>)
   22ac6:	f00b f804 	bl	2dad2 <z_priq_dumb_remove>
}
   22aca:	e7e0      	b.n	22a8e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   22acc:	4b03      	ldr	r3, [pc, #12]	; (22adc <z_impl_k_thread_suspend+0x6c>)
   22ace:	689b      	ldr	r3, [r3, #8]
   22ad0:	42a3      	cmp	r3, r4
   22ad2:	d000      	beq.n	22ad6 <z_impl_k_thread_suspend+0x66>
}
   22ad4:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   22ad6:	f00a fff0 	bl	2daba <z_reschedule_unlocked>
}
   22ada:	e7fb      	b.n	22ad4 <z_impl_k_thread_suspend+0x64>
   22adc:	20004040 	.word	0x20004040
   22ae0:	20004064 	.word	0x20004064

00022ae4 <k_sched_unlock>:

void k_sched_unlock(void)
{
   22ae4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   22ae6:	2300      	movs	r3, #0
	__asm__ volatile(
   22ae8:	f04f 0240 	mov.w	r2, #64	; 0x40
   22aec:	f3ef 8411 	mrs	r4, BASEPRI
   22af0:	f382 8812 	msr	BASEPRI_MAX, r2
   22af4:	f3bf 8f6f 	isb	sy
   22af8:	e00c      	b.n	22b14 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   22afa:	4b09      	ldr	r3, [pc, #36]	; (22b20 <k_sched_unlock+0x3c>)
   22afc:	689a      	ldr	r2, [r3, #8]
   22afe:	7bd3      	ldrb	r3, [r2, #15]
   22b00:	3301      	adds	r3, #1
   22b02:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22b04:	2000      	movs	r0, #0
   22b06:	f7ff fe05 	bl	22714 <update_cache>
	__asm__ volatile(
   22b0a:	f384 8811 	msr	BASEPRI, r4
   22b0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22b12:	2301      	movs	r3, #1
   22b14:	2b00      	cmp	r3, #0
   22b16:	d0f0      	beq.n	22afa <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   22b18:	f00a ffcf 	bl	2daba <z_reschedule_unlocked>
}
   22b1c:	bd10      	pop	{r4, pc}
   22b1e:	bf00      	nop
   22b20:	20004040 	.word	0x20004040

00022b24 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   22b24:	7b43      	ldrb	r3, [r0, #13]
   22b26:	f013 0f08 	tst.w	r3, #8
   22b2a:	d12a      	bne.n	22b82 <end_thread+0x5e>
{
   22b2c:	b510      	push	{r4, lr}
   22b2e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   22b30:	f043 0208 	orr.w	r2, r3, #8
   22b34:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22b36:	f023 0220 	bic.w	r2, r3, #32
   22b3a:	f042 0208 	orr.w	r2, r2, #8
   22b3e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   22b40:	f012 0f80 	tst.w	r2, #128	; 0x80
   22b44:	d113      	bne.n	22b6e <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   22b46:	68a3      	ldr	r3, [r4, #8]
   22b48:	b113      	cbz	r3, 22b50 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   22b4a:	4620      	mov	r0, r4
   22b4c:	f00a ffc9 	bl	2dae2 <unpend_thread_no_timeout>
   22b50:	f104 0018 	add.w	r0, r4, #24
   22b54:	f00b f925 	bl	2dda2 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   22b58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22b5c:	f00b f83c 	bl	2dbd8 <unpend_all>
		update_cache(1);
   22b60:	2001      	movs	r0, #1
   22b62:	f7ff fdd7 	bl	22714 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   22b66:	4620      	mov	r0, r4
   22b68:	f7ff f982 	bl	21e70 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   22b6c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22b6e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22b72:	f043 0308 	orr.w	r3, r3, #8
   22b76:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22b78:	4601      	mov	r1, r0
   22b7a:	4802      	ldr	r0, [pc, #8]	; (22b84 <end_thread+0x60>)
   22b7c:	f00a ffa9 	bl	2dad2 <z_priq_dumb_remove>
}
   22b80:	e7e1      	b.n	22b46 <end_thread+0x22>
   22b82:	4770      	bx	lr
   22b84:	20004064 	.word	0x20004064

00022b88 <z_sched_init>:
{
   22b88:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   22b8a:	4804      	ldr	r0, [pc, #16]	; (22b9c <z_sched_init+0x14>)
   22b8c:	f00b f8c0 	bl	2dd10 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   22b90:	2100      	movs	r1, #0
   22b92:	4608      	mov	r0, r1
   22b94:	f7ff fd54 	bl	22640 <k_sched_time_slice_set>
}
   22b98:	bd08      	pop	{r3, pc}
   22b9a:	bf00      	nop
   22b9c:	20004060 	.word	0x20004060

00022ba0 <z_impl_k_yield>:
{
   22ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   22ba2:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ba6:	f3ef 8611 	mrs	r6, BASEPRI
   22baa:	f383 8812 	msr	BASEPRI_MAX, r3
   22bae:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   22bb2:	4c1d      	ldr	r4, [pc, #116]	; (22c28 <z_impl_k_yield+0x88>)
   22bb4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22bb6:	7b4b      	ldrb	r3, [r1, #13]
   22bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22bbc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22bbe:	f104 0724 	add.w	r7, r4, #36	; 0x24
   22bc2:	4638      	mov	r0, r7
   22bc4:	f00a ff85 	bl	2dad2 <z_priq_dumb_remove>
	queue_thread(_current);
   22bc8:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   22bca:	7b6b      	ldrb	r3, [r5, #13]
   22bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22bd0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   22bd2:	6a64      	ldr	r4, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22bd4:	42bc      	cmp	r4, r7
   22bd6:	d108      	bne.n	22bea <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22bd8:	2400      	movs	r4, #0
   22bda:	e006      	b.n	22bea <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   22bdc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   22bde:	606b      	str	r3, [r5, #4]
	node->next = successor;
   22be0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   22be2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   22be4:	6065      	str	r5, [r4, #4]
}
   22be6:	e017      	b.n	22c18 <z_impl_k_yield+0x78>
   22be8:	2400      	movs	r4, #0
   22bea:	b16c      	cbz	r4, 22c08 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22bec:	4621      	mov	r1, r4
   22bee:	4628      	mov	r0, r5
   22bf0:	f00a ff34 	bl	2da5c <z_sched_prio_cmp>
   22bf4:	2800      	cmp	r0, #0
   22bf6:	dcf1      	bgt.n	22bdc <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22bf8:	2c00      	cmp	r4, #0
   22bfa:	d0f6      	beq.n	22bea <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   22bfc:	4b0a      	ldr	r3, [pc, #40]	; (22c28 <z_impl_k_yield+0x88>)
   22bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22c00:	429c      	cmp	r4, r3
   22c02:	d0f1      	beq.n	22be8 <z_impl_k_yield+0x48>
   22c04:	6824      	ldr	r4, [r4, #0]
   22c06:	e7f0      	b.n	22bea <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   22c08:	4b07      	ldr	r3, [pc, #28]	; (22c28 <z_impl_k_yield+0x88>)
   22c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	node->next = list;
   22c0c:	f103 0124 	add.w	r1, r3, #36	; 0x24
   22c10:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   22c12:	606a      	str	r2, [r5, #4]
	tail->next = node;
   22c14:	6015      	str	r5, [r2, #0]
	list->tail = node;
   22c16:	629d      	str	r5, [r3, #40]	; 0x28
	update_cache(1);
   22c18:	2001      	movs	r0, #1
   22c1a:	f7ff fd7b 	bl	22714 <update_cache>
   22c1e:	4630      	mov	r0, r6
   22c20:	f7f2 fc74 	bl	1550c <arch_swap>
}
   22c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c26:	bf00      	nop
   22c28:	20004040 	.word	0x20004040

00022c2c <z_tick_sleep>:
{
   22c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   22c30:	ea50 0301 	orrs.w	r3, r0, r1
   22c34:	d038      	beq.n	22ca8 <z_tick_sleep+0x7c>
   22c36:	4604      	mov	r4, r0
   22c38:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   22c3a:	f06f 0301 	mvn.w	r3, #1
   22c3e:	1a1b      	subs	r3, r3, r0
   22c40:	f04f 32ff 	mov.w	r2, #4294967295
   22c44:	eb62 0201 	sbc.w	r2, r2, r1
   22c48:	2b01      	cmp	r3, #1
   22c4a:	f172 0200 	sbcs.w	r2, r2, #0
   22c4e:	db2f      	blt.n	22cb0 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   22c50:	f06f 0501 	mvn.w	r5, #1
   22c54:	1a2d      	subs	r5, r5, r0
   22c56:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c5a:	f3ef 8811 	mrs	r8, BASEPRI
   22c5e:	f383 8812 	msr	BASEPRI_MAX, r3
   22c62:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   22c66:	4f14      	ldr	r7, [pc, #80]	; (22cb8 <z_tick_sleep+0x8c>)
   22c68:	68b8      	ldr	r0, [r7, #8]
   22c6a:	4b14      	ldr	r3, [pc, #80]	; (22cbc <z_tick_sleep+0x90>)
   22c6c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22c6e:	f7ff fe69 	bl	22944 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   22c72:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22c74:	4622      	mov	r2, r4
   22c76:	4633      	mov	r3, r6
   22c78:	4911      	ldr	r1, [pc, #68]	; (22cc0 <z_tick_sleep+0x94>)
   22c7a:	3018      	adds	r0, #24
   22c7c:	f000 f8fe 	bl	22e7c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22c80:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22c82:	7b53      	ldrb	r3, [r2, #13]
   22c84:	f043 0310 	orr.w	r3, r3, #16
   22c88:	7353      	strb	r3, [r2, #13]
   22c8a:	4640      	mov	r0, r8
   22c8c:	f7f2 fc3e 	bl	1550c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22c90:	f00b f8e7 	bl	2de62 <sys_clock_tick_get_32>
   22c94:	1a28      	subs	r0, r5, r0
   22c96:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   22c9a:	2801      	cmp	r0, #1
   22c9c:	f173 0300 	sbcs.w	r3, r3, #0
   22ca0:	da00      	bge.n	22ca4 <z_tick_sleep+0x78>
	return 0;
   22ca2:	2000      	movs	r0, #0
}
   22ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   22ca8:	f7ff ff7a 	bl	22ba0 <z_impl_k_yield>
		return 0;
   22cac:	2000      	movs	r0, #0
   22cae:	e7f9      	b.n	22ca4 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   22cb0:	f00b f8d7 	bl	2de62 <sys_clock_tick_get_32>
   22cb4:	1905      	adds	r5, r0, r4
   22cb6:	e7ce      	b.n	22c56 <z_tick_sleep+0x2a>
   22cb8:	20004040 	.word	0x20004040
   22cbc:	2000407c 	.word	0x2000407c
   22cc0:	0002db7b 	.word	0x0002db7b

00022cc4 <z_impl_k_sleep>:
{
   22cc4:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22cc6:	f1b1 3fff 	cmp.w	r1, #4294967295
   22cca:	bf08      	it	eq
   22ccc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   22cd0:	d018      	beq.n	22d04 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
   22cd2:	f7ff ffab 	bl	22c2c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   22cd6:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   22cd8:	0151      	lsls	r1, r2, #5
   22cda:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   22cde:	0143      	lsls	r3, r0, #5
   22ce0:	1a1b      	subs	r3, r3, r0
   22ce2:	eb61 0102 	sbc.w	r1, r1, r2
   22ce6:	0089      	lsls	r1, r1, #2
   22ce8:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   22cec:	009b      	lsls	r3, r3, #2
   22cee:	181b      	adds	r3, r3, r0
   22cf0:	eb42 0201 	adc.w	r2, r2, r1
   22cf4:	00d2      	lsls	r2, r2, #3
   22cf6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   22cfa:	f3c3 3310 	ubfx	r3, r3, #12, #17
   22cfe:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   22d02:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   22d04:	4b03      	ldr	r3, [pc, #12]	; (22d14 <z_impl_k_sleep+0x50>)
   22d06:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   22d08:	f7ff feb2 	bl	22a70 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   22d0c:	f04f 30ff 	mov.w	r0, #4294967295
   22d10:	e7f7      	b.n	22d02 <z_impl_k_sleep+0x3e>
   22d12:	bf00      	nop
   22d14:	20004040 	.word	0x20004040

00022d18 <z_impl_z_current_get>:
}
   22d18:	4b01      	ldr	r3, [pc, #4]	; (22d20 <z_impl_z_current_get+0x8>)
   22d1a:	6898      	ldr	r0, [r3, #8]
   22d1c:	4770      	bx	lr
   22d1e:	bf00      	nop
   22d20:	20004040 	.word	0x20004040

00022d24 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   22d24:	b570      	push	{r4, r5, r6, lr}
   22d26:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d2a:	f3ef 8511 	mrs	r5, BASEPRI
   22d2e:	f383 8812 	msr	BASEPRI_MAX, r3
   22d32:	f3bf 8f6f 	isb	sy
   22d36:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22d38:	7b03      	ldrb	r3, [r0, #12]
   22d3a:	f013 0f01 	tst.w	r3, #1
   22d3e:	d109      	bne.n	22d54 <z_thread_abort+0x30>
   22d40:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22d42:	7b43      	ldrb	r3, [r0, #13]
   22d44:	f013 0f08 	tst.w	r3, #8
   22d48:	d00f      	beq.n	22d6a <z_thread_abort+0x46>
	__asm__ volatile(
   22d4a:	f385 8811 	msr	BASEPRI, r5
   22d4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   22d52:	e009      	b.n	22d68 <z_thread_abort+0x44>
   22d54:	f385 8811 	msr	BASEPRI, r5
   22d58:	f3bf 8f6f 	isb	sy
		k_panic();
   22d5c:	4040      	eors	r0, r0
   22d5e:	f380 8811 	msr	BASEPRI, r0
   22d62:	f04f 0004 	mov.w	r0, #4
   22d66:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22d68:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   22d6a:	f7ff fedb 	bl	22b24 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   22d6e:	4b08      	ldr	r3, [pc, #32]	; (22d90 <z_thread_abort+0x6c>)
   22d70:	689b      	ldr	r3, [r3, #8]
   22d72:	42a3      	cmp	r3, r4
   22d74:	d004      	beq.n	22d80 <z_thread_abort+0x5c>
   22d76:	f386 8811 	msr	BASEPRI, r6
   22d7a:	f3bf 8f6f 	isb	sy
   22d7e:	e7f3      	b.n	22d68 <z_thread_abort+0x44>
   22d80:	f3ef 8305 	mrs	r3, IPSR
   22d84:	2b00      	cmp	r3, #0
   22d86:	d1f6      	bne.n	22d76 <z_thread_abort+0x52>
   22d88:	4628      	mov	r0, r5
   22d8a:	f7f2 fbbf 	bl	1550c <arch_swap>
	return ret;
   22d8e:	e7f2      	b.n	22d76 <z_thread_abort+0x52>
   22d90:	20004040 	.word	0x20004040

00022d94 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22d94:	b510      	push	{r4, lr}
   22d96:	b082      	sub	sp, #8
   22d98:	9c06      	ldr	r4, [sp, #24]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22d9a:	ed9d 7b04 	vldr	d7, [sp, #16]
   22d9e:	ed8d 7b00 	vstr	d7, [sp]
   22da2:	f7ff fdeb 	bl	2297c <z_pend_curr>

	if (data != NULL) {
   22da6:	b11c      	cbz	r4, 22db0 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   22da8:	4b02      	ldr	r3, [pc, #8]	; (22db4 <z_sched_wait+0x20>)
   22daa:	689b      	ldr	r3, [r3, #8]
   22dac:	695b      	ldr	r3, [r3, #20]
   22dae:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22db0:	b002      	add	sp, #8
   22db2:	bd10      	pop	{r4, pc}
   22db4:	20004040 	.word	0x20004040

00022db8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22db8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22dba:	4806      	ldr	r0, [pc, #24]	; (22dd4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22dbc:	4a06      	ldr	r2, [pc, #24]	; (22dd8 <z_data_copy+0x20>)
   22dbe:	1a12      	subs	r2, r2, r0
   22dc0:	4906      	ldr	r1, [pc, #24]	; (22ddc <z_data_copy+0x24>)
   22dc2:	f00a faaa 	bl	2d31a <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   22dc6:	4a06      	ldr	r2, [pc, #24]	; (22de0 <z_data_copy+0x28>)
   22dc8:	4906      	ldr	r1, [pc, #24]	; (22de4 <z_data_copy+0x2c>)
   22dca:	4807      	ldr	r0, [pc, #28]	; (22de8 <z_data_copy+0x30>)
   22dcc:	f00a faa5 	bl	2d31a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22dd0:	bd08      	pop	{r3, pc}
   22dd2:	bf00      	nop
   22dd4:	20000000 	.word	0x20000000
   22dd8:	20000d6c 	.word	0x20000d6c
   22ddc:	00031d7c 	.word	0x00031d7c
   22de0:	00000000 	.word	0x00000000
   22de4:	00031d7c 	.word	0x00031d7c
   22de8:	20000000 	.word	0x20000000

00022dec <first>:
	return list->head == list;
   22dec:	4b03      	ldr	r3, [pc, #12]	; (22dfc <first+0x10>)
   22dee:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22df0:	4298      	cmp	r0, r3
   22df2:	d000      	beq.n	22df6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   22df4:	4770      	bx	lr
   22df6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   22df8:	e7fc      	b.n	22df4 <first+0x8>
   22dfa:	bf00      	nop
   22dfc:	2000086c 	.word	0x2000086c

00022e00 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22e00:	b130      	cbz	r0, 22e10 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   22e02:	4a04      	ldr	r2, [pc, #16]	; (22e14 <next+0x14>)
   22e04:	6852      	ldr	r2, [r2, #4]
   22e06:	4290      	cmp	r0, r2
   22e08:	d001      	beq.n	22e0e <next+0xe>
   22e0a:	6800      	ldr	r0, [r0, #0]
   22e0c:	4770      	bx	lr
   22e0e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   22e10:	4770      	bx	lr
   22e12:	bf00      	nop
   22e14:	2000086c 	.word	0x2000086c

00022e18 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   22e18:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22e1a:	4b04      	ldr	r3, [pc, #16]	; (22e2c <elapsed+0x14>)
   22e1c:	681b      	ldr	r3, [r3, #0]
   22e1e:	b10b      	cbz	r3, 22e24 <elapsed+0xc>
   22e20:	2000      	movs	r0, #0
}
   22e22:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22e24:	f7fc fa4c 	bl	1f2c0 <sys_clock_elapsed>
   22e28:	e7fb      	b.n	22e22 <elapsed+0xa>
   22e2a:	bf00      	nop
   22e2c:	20004088 	.word	0x20004088

00022e30 <next_timeout>:

static int32_t next_timeout(void)
{
   22e30:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   22e32:	f7ff ffdb 	bl	22dec <first>
   22e36:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   22e38:	f7ff ffee 	bl	22e18 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   22e3c:	b17c      	cbz	r4, 22e5e <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22e3e:	6923      	ldr	r3, [r4, #16]
   22e40:	6962      	ldr	r2, [r4, #20]
   22e42:	1a1b      	subs	r3, r3, r0
   22e44:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   22e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22e4c:	f172 0100 	sbcs.w	r1, r2, #0
   22e50:	da08      	bge.n	22e64 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   22e52:	2a00      	cmp	r2, #0
   22e54:	db01      	blt.n	22e5a <next_timeout+0x2a>
   22e56:	4618      	mov	r0, r3
   22e58:	e006      	b.n	22e68 <next_timeout+0x38>
   22e5a:	2300      	movs	r3, #0
   22e5c:	e7fb      	b.n	22e56 <next_timeout+0x26>
		ret = MAX_WAIT;
   22e5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22e62:	e001      	b.n	22e68 <next_timeout+0x38>
   22e64:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22e68:	4b03      	ldr	r3, [pc, #12]	; (22e78 <next_timeout+0x48>)
   22e6a:	691b      	ldr	r3, [r3, #16]
   22e6c:	b113      	cbz	r3, 22e74 <next_timeout+0x44>
   22e6e:	4283      	cmp	r3, r0
   22e70:	da00      	bge.n	22e74 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   22e72:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   22e74:	bd10      	pop	{r4, pc}
   22e76:	bf00      	nop
   22e78:	20004040 	.word	0x20004040

00022e7c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
   22e80:	bf08      	it	eq
   22e82:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22e86:	d07b      	beq.n	22f80 <z_add_timeout+0x104>
{
   22e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e8c:	4604      	mov	r4, r0
   22e8e:	4692      	mov	sl, r2
   22e90:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   22e92:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   22e94:	2300      	movs	r3, #0
	__asm__ volatile(
   22e96:	f04f 0240 	mov.w	r2, #64	; 0x40
   22e9a:	f3ef 8711 	mrs	r7, BASEPRI
   22e9e:	f382 8812 	msr	BASEPRI_MAX, r2
   22ea2:	f3bf 8f6f 	isb	sy
   22ea6:	e026      	b.n	22ef6 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   22ea8:	f11a 0801 	adds.w	r8, sl, #1
   22eac:	f145 0900 	adc.w	r9, r5, #0
   22eb0:	f7ff ffb2 	bl	22e18 <elapsed>
   22eb4:	eb18 0300 	adds.w	r3, r8, r0
   22eb8:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   22ebc:	6123      	str	r3, [r4, #16]
   22ebe:	6160      	str	r0, [r4, #20]
   22ec0:	e03b      	b.n	22f3a <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   22ec2:	1a52      	subs	r2, r2, r1
   22ec4:	eb66 0303 	sbc.w	r3, r6, r3
   22ec8:	6102      	str	r2, [r0, #16]
   22eca:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   22ecc:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   22ece:	6063      	str	r3, [r4, #4]
	node->next = successor;
   22ed0:	6020      	str	r0, [r4, #0]
	prev->next = node;
   22ed2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   22ed4:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   22ed6:	e005      	b.n	22ee4 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   22ed8:	4b2a      	ldr	r3, [pc, #168]	; (22f84 <z_add_timeout+0x108>)
   22eda:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   22edc:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   22ede:	6062      	str	r2, [r4, #4]
	tail->next = node;
   22ee0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22ee2:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22ee4:	f7ff ff82 	bl	22dec <first>
   22ee8:	4284      	cmp	r4, r0
   22eea:	d03a      	beq.n	22f62 <z_add_timeout+0xe6>
	__asm__ volatile(
   22eec:	f387 8811 	msr	BASEPRI, r7
   22ef0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   22ef4:	2301      	movs	r3, #1
   22ef6:	2b00      	cmp	r3, #0
   22ef8:	d140      	bne.n	22f7c <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   22efa:	4653      	mov	r3, sl
   22efc:	f06f 0101 	mvn.w	r1, #1
   22f00:	ebb1 010a 	subs.w	r1, r1, sl
   22f04:	f04f 30ff 	mov.w	r0, #4294967295
   22f08:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22f0c:	2a00      	cmp	r2, #0
   22f0e:	dbcb      	blt.n	22ea8 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22f10:	4a1d      	ldr	r2, [pc, #116]	; (22f88 <z_add_timeout+0x10c>)
   22f12:	6811      	ldr	r1, [r2, #0]
   22f14:	6852      	ldr	r2, [r2, #4]
   22f16:	185b      	adds	r3, r3, r1
   22f18:	eb42 0205 	adc.w	r2, r2, r5
   22f1c:	f06f 0101 	mvn.w	r1, #1
   22f20:	1ac9      	subs	r1, r1, r3
   22f22:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   22f26:	4608      	mov	r0, r1
   22f28:	461a      	mov	r2, r3
   22f2a:	2901      	cmp	r1, #1
   22f2c:	f173 0300 	sbcs.w	r3, r3, #0
   22f30:	da01      	bge.n	22f36 <z_add_timeout+0xba>
   22f32:	2001      	movs	r0, #1
   22f34:	2200      	movs	r2, #0
   22f36:	6120      	str	r0, [r4, #16]
   22f38:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   22f3a:	f7ff ff57 	bl	22dec <first>
   22f3e:	2800      	cmp	r0, #0
   22f40:	d0ca      	beq.n	22ed8 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   22f42:	6902      	ldr	r2, [r0, #16]
   22f44:	6946      	ldr	r6, [r0, #20]
   22f46:	6921      	ldr	r1, [r4, #16]
   22f48:	6963      	ldr	r3, [r4, #20]
   22f4a:	4291      	cmp	r1, r2
   22f4c:	eb73 0e06 	sbcs.w	lr, r3, r6
   22f50:	dbb7      	blt.n	22ec2 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   22f52:	1a89      	subs	r1, r1, r2
   22f54:	eb63 0306 	sbc.w	r3, r3, r6
   22f58:	6121      	str	r1, [r4, #16]
   22f5a:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   22f5c:	f7ff ff50 	bl	22e00 <next>
   22f60:	e7ed      	b.n	22f3e <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22f62:	f7ff ff65 	bl	22e30 <next_timeout>

			if (next_time == 0 ||
   22f66:	4603      	mov	r3, r0
   22f68:	b118      	cbz	r0, 22f72 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
   22f6a:	4a08      	ldr	r2, [pc, #32]	; (22f8c <z_add_timeout+0x110>)
   22f6c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   22f6e:	4282      	cmp	r2, r0
   22f70:	d0bc      	beq.n	22eec <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
   22f72:	2100      	movs	r1, #0
   22f74:	4618      	mov	r0, r3
   22f76:	f7fc f967 	bl	1f248 <sys_clock_set_timeout>
   22f7a:	e7b7      	b.n	22eec <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22f80:	4770      	bx	lr
   22f82:	bf00      	nop
   22f84:	2000086c 	.word	0x2000086c
   22f88:	200030b8 	.word	0x200030b8
   22f8c:	20004040 	.word	0x20004040

00022f90 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   22f90:	b570      	push	{r4, r5, r6, lr}
   22f92:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22f94:	f7ff fc40 	bl	22818 <z_time_slice>
	__asm__ volatile(
   22f98:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f9c:	f3ef 8611 	mrs	r6, BASEPRI
   22fa0:	f383 8812 	msr	BASEPRI_MAX, r3
   22fa4:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   22fa8:	4b28      	ldr	r3, [pc, #160]	; (2304c <sys_clock_announce+0xbc>)
   22faa:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   22fac:	e021      	b.n	22ff2 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   22fae:	4a28      	ldr	r2, [pc, #160]	; (23050 <sys_clock_announce+0xc0>)
   22fb0:	6813      	ldr	r3, [r2, #0]
   22fb2:	6851      	ldr	r1, [r2, #4]
   22fb4:	195b      	adds	r3, r3, r5
   22fb6:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   22fba:	6013      	str	r3, [r2, #0]
   22fbc:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   22fbe:	2200      	movs	r2, #0
   22fc0:	2300      	movs	r3, #0
   22fc2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   22fc6:	4620      	mov	r0, r4
   22fc8:	f00a fed4 	bl	2dd74 <remove_timeout>
	__asm__ volatile(
   22fcc:	f386 8811 	msr	BASEPRI, r6
   22fd0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   22fd4:	68a3      	ldr	r3, [r4, #8]
   22fd6:	4620      	mov	r0, r4
   22fd8:	4798      	blx	r3
	__asm__ volatile(
   22fda:	f04f 0340 	mov.w	r3, #64	; 0x40
   22fde:	f3ef 8611 	mrs	r6, BASEPRI
   22fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   22fe6:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   22fea:	4a18      	ldr	r2, [pc, #96]	; (2304c <sys_clock_announce+0xbc>)
   22fec:	6813      	ldr	r3, [r2, #0]
   22fee:	1b5b      	subs	r3, r3, r5
   22ff0:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22ff2:	f7ff fefb 	bl	22dec <first>
   22ff6:	4604      	mov	r4, r0
   22ff8:	b138      	cbz	r0, 2300a <sys_clock_announce+0x7a>
   22ffa:	6905      	ldr	r5, [r0, #16]
   22ffc:	6941      	ldr	r1, [r0, #20]
   22ffe:	4b13      	ldr	r3, [pc, #76]	; (2304c <sys_clock_announce+0xbc>)
   23000:	681a      	ldr	r2, [r3, #0]
   23002:	17d3      	asrs	r3, r2, #31
   23004:	42aa      	cmp	r2, r5
   23006:	418b      	sbcs	r3, r1
   23008:	dad1      	bge.n	22fae <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   2300a:	b144      	cbz	r4, 2301e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   2300c:	6923      	ldr	r3, [r4, #16]
   2300e:	6962      	ldr	r2, [r4, #20]
   23010:	490e      	ldr	r1, [pc, #56]	; (2304c <sys_clock_announce+0xbc>)
   23012:	6809      	ldr	r1, [r1, #0]
   23014:	1a5b      	subs	r3, r3, r1
   23016:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   2301a:	6123      	str	r3, [r4, #16]
   2301c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   2301e:	4a0c      	ldr	r2, [pc, #48]	; (23050 <sys_clock_announce+0xc0>)
   23020:	4d0a      	ldr	r5, [pc, #40]	; (2304c <sys_clock_announce+0xbc>)
   23022:	6828      	ldr	r0, [r5, #0]
   23024:	6813      	ldr	r3, [r2, #0]
   23026:	6851      	ldr	r1, [r2, #4]
   23028:	181b      	adds	r3, r3, r0
   2302a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   2302e:	6013      	str	r3, [r2, #0]
   23030:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   23032:	2400      	movs	r4, #0
   23034:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   23036:	f7ff fefb 	bl	22e30 <next_timeout>
   2303a:	4621      	mov	r1, r4
   2303c:	f7fc f904 	bl	1f248 <sys_clock_set_timeout>
	__asm__ volatile(
   23040:	f386 8811 	msr	BASEPRI, r6
   23044:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   23048:	bd70      	pop	{r4, r5, r6, pc}
   2304a:	bf00      	nop
   2304c:	20004088 	.word	0x20004088
   23050:	200030b8 	.word	0x200030b8

00023054 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   23054:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   23056:	2200      	movs	r2, #0
	__asm__ volatile(
   23058:	f04f 0340 	mov.w	r3, #64	; 0x40
   2305c:	f3ef 8411 	mrs	r4, BASEPRI
   23060:	f383 8812 	msr	BASEPRI_MAX, r3
   23064:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   23068:	4613      	mov	r3, r2
   2306a:	4611      	mov	r1, r2
   2306c:	e00c      	b.n	23088 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   2306e:	f7ff fed3 	bl	22e18 <elapsed>
   23072:	4a07      	ldr	r2, [pc, #28]	; (23090 <sys_clock_tick_get+0x3c>)
   23074:	6813      	ldr	r3, [r2, #0]
   23076:	6851      	ldr	r1, [r2, #4]
   23078:	18c3      	adds	r3, r0, r3
   2307a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   2307e:	f384 8811 	msr	BASEPRI, r4
   23082:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   23086:	2201      	movs	r2, #1
   23088:	2a00      	cmp	r2, #0
   2308a:	d0f0      	beq.n	2306e <sys_clock_tick_get+0x1a>
	}
	return t;
}
   2308c:	4618      	mov	r0, r3
   2308e:	bd10      	pop	{r4, pc}
   23090:	200030b8 	.word	0x200030b8

00023094 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   23094:	b538      	push	{r3, r4, r5, lr}
   23096:	4604      	mov	r4, r0
	__asm__ volatile(
   23098:	f04f 0340 	mov.w	r3, #64	; 0x40
   2309c:	f3ef 8511 	mrs	r5, BASEPRI
   230a0:	f383 8812 	msr	BASEPRI_MAX, r3
   230a4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   230a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
   230aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   230ac:	ea52 0103 	orrs.w	r1, r2, r3
   230b0:	d005      	beq.n	230be <z_timer_expiration_handler+0x2a>
   230b2:	f1b3 3fff 	cmp.w	r3, #4294967295
   230b6:	bf08      	it	eq
   230b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   230bc:	d128      	bne.n	23110 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   230be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   230c0:	3301      	adds	r3, #1
   230c2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   230c4:	6a23      	ldr	r3, [r4, #32]
   230c6:	b173      	cbz	r3, 230e6 <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   230c8:	f385 8811 	msr	BASEPRI, r5
   230cc:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   230d0:	6a23      	ldr	r3, [r4, #32]
   230d2:	4620      	mov	r0, r4
   230d4:	4798      	blx	r3
	__asm__ volatile(
   230d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   230da:	f3ef 8511 	mrs	r5, BASEPRI
   230de:	f383 8812 	msr	BASEPRI_MAX, r3
   230e2:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   230e6:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   230ea:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   230ec:	42a3      	cmp	r3, r4
   230ee:	d038      	beq.n	23162 <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   230f0:	2c00      	cmp	r4, #0
   230f2:	d036      	beq.n	23162 <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   230f4:	4620      	mov	r0, r4
   230f6:	f00a fcbb 	bl	2da70 <z_unpend_thread_no_timeout>
   230fa:	2300      	movs	r3, #0
   230fc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   23100:	f385 8811 	msr	BASEPRI, r5
   23104:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   23108:	4620      	mov	r0, r4
   2310a:	f00a fd1a 	bl	2db42 <z_ready_thread>
}
   2310e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
   23110:	f00a feab 	bl	2de6a <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   23114:	3001      	adds	r0, #1
   23116:	f141 0100 	adc.w	r1, r1, #0
   2311a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2311c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2311e:	18c0      	adds	r0, r0, r3
   23120:	eb41 0102 	adc.w	r1, r1, r2
   23124:	2801      	cmp	r0, #1
   23126:	f171 0100 	sbcs.w	r1, r1, #0
   2312a:	da08      	bge.n	2313e <z_timer_expiration_handler+0xaa>
   2312c:	f06f 0201 	mvn.w	r2, #1
   23130:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23134:	490d      	ldr	r1, [pc, #52]	; (2316c <z_timer_expiration_handler+0xd8>)
   23136:	4620      	mov	r0, r4
   23138:	f7ff fea0 	bl	22e7c <z_add_timeout>
   2313c:	e7bf      	b.n	230be <z_timer_expiration_handler+0x2a>
   2313e:	f00a fe94 	bl	2de6a <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   23142:	3001      	adds	r0, #1
   23144:	f141 0300 	adc.w	r3, r1, #0
   23148:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2314a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2314c:	1880      	adds	r0, r0, r2
   2314e:	eb43 0301 	adc.w	r3, r3, r1
   23152:	f06f 0201 	mvn.w	r2, #1
   23156:	1a12      	subs	r2, r2, r0
   23158:	f04f 31ff 	mov.w	r1, #4294967295
   2315c:	eb61 0303 	sbc.w	r3, r1, r3
   23160:	e7e8      	b.n	23134 <z_timer_expiration_handler+0xa0>
   23162:	f385 8811 	msr	BASEPRI, r5
   23166:	f3bf 8f6f 	isb	sy
		return;
   2316a:	e7d0      	b.n	2310e <z_timer_expiration_handler+0x7a>
   2316c:	00023095 	.word	0x00023095

00023170 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   23170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23174:	461e      	mov	r6, r3
   23176:	9f06      	ldr	r7, [sp, #24]
   23178:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2317c:	f1b3 3fff 	cmp.w	r3, #4294967295
   23180:	bf08      	it	eq
   23182:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   23186:	d02f      	beq.n	231e8 <z_impl_k_timer_start+0x78>
   23188:	4605      	mov	r5, r0
   2318a:	4614      	mov	r4, r2
   2318c:	4613      	mov	r3, r2
   2318e:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   23190:	4640      	mov	r0, r8
   23192:	f1b8 3fff 	cmp.w	r8, #4294967295
   23196:	bf08      	it	eq
   23198:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   2319c:	d00d      	beq.n	231ba <z_impl_k_timer_start+0x4a>
   2319e:	ea57 0c08 	orrs.w	ip, r7, r8
   231a2:	d00a      	beq.n	231ba <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   231a4:	f06f 0c01 	mvn.w	ip, #1
   231a8:	ebbc 0c07 	subs.w	ip, ip, r7
   231ac:	f04f 3cff 	mov.w	ip, #4294967295
   231b0:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   231b4:	f1bc 0f00 	cmp.w	ip, #0
   231b8:	db18      	blt.n	231ec <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   231ba:	f06f 0201 	mvn.w	r2, #1
   231be:	1ad2      	subs	r2, r2, r3
   231c0:	f04f 32ff 	mov.w	r2, #4294967295
   231c4:	eb62 0201 	sbc.w	r2, r2, r1
   231c8:	2a00      	cmp	r2, #0
   231ca:	db1a      	blt.n	23202 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   231cc:	4628      	mov	r0, r5
   231ce:	f00a fde8 	bl	2dda2 <z_abort_timeout>
	timer->period = period;
   231d2:	62af      	str	r7, [r5, #40]	; 0x28
   231d4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   231d8:	2300      	movs	r3, #0
   231da:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   231dc:	4622      	mov	r2, r4
   231de:	4633      	mov	r3, r6
   231e0:	490e      	ldr	r1, [pc, #56]	; (2321c <z_impl_k_timer_start+0xac>)
   231e2:	4628      	mov	r0, r5
   231e4:	f7ff fe4a 	bl	22e7c <z_add_timeout>
		     duration);
}
   231e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   231ec:	2f02      	cmp	r7, #2
   231ee:	f170 0000 	sbcs.w	r0, r0, #0
   231f2:	da02      	bge.n	231fa <z_impl_k_timer_start+0x8a>
   231f4:	2702      	movs	r7, #2
   231f6:	f04f 0800 	mov.w	r8, #0
   231fa:	3f01      	subs	r7, #1
   231fc:	f148 38ff 	adc.w	r8, r8, #4294967295
   23200:	e7db      	b.n	231ba <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   23202:	461c      	mov	r4, r3
   23204:	460e      	mov	r6, r1
   23206:	2b01      	cmp	r3, #1
   23208:	f171 0100 	sbcs.w	r1, r1, #0
   2320c:	da01      	bge.n	23212 <z_impl_k_timer_start+0xa2>
   2320e:	2401      	movs	r4, #1
   23210:	2600      	movs	r6, #0
   23212:	3c01      	subs	r4, #1
   23214:	f146 36ff 	adc.w	r6, r6, #4294967295
   23218:	e7d8      	b.n	231cc <z_impl_k_timer_start+0x5c>
   2321a:	bf00      	nop
   2321c:	00023095 	.word	0x00023095

00023220 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   23220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23224:	b083      	sub	sp, #12
   23226:	4607      	mov	r7, r0
   23228:	4616      	mov	r6, r2
   2322a:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2322c:	4b28      	ldr	r3, [pc, #160]	; (232d0 <z_impl_k_poll+0xb0>)
   2322e:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   23230:	2301      	movs	r3, #1
   23232:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   23236:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2323a:	ea55 0302 	orrs.w	r3, r5, r2
   2323e:	bf0c      	ite	eq
   23240:	2301      	moveq	r3, #1
   23242:	2300      	movne	r3, #0
   23244:	f104 0260 	add.w	r2, r4, #96	; 0x60
   23248:	f00a ff49 	bl	2e0de <register_events>
   2324c:	4680      	mov	r8, r0
	__asm__ volatile(
   2324e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23252:	f3ef 8111 	mrs	r1, BASEPRI
   23256:	f383 8812 	msr	BASEPRI_MAX, r3
   2325a:	f3bf 8f6f 	isb	sy
   2325e:	4689      	mov	r9, r1
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23260:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   23264:	b30b      	cbz	r3, 232aa <z_impl_k_poll+0x8a>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   23266:	2300      	movs	r3, #0
   23268:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2326c:	ea55 0306 	orrs.w	r3, r5, r6
   23270:	d026      	beq.n	232c0 <z_impl_k_poll+0xa0>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23272:	9600      	str	r6, [sp, #0]
   23274:	9501      	str	r5, [sp, #4]
   23276:	4a17      	ldr	r2, [pc, #92]	; (232d4 <z_impl_k_poll+0xb4>)
   23278:	4817      	ldr	r0, [pc, #92]	; (232d8 <z_impl_k_poll+0xb8>)
   2327a:	f7ff fb7f 	bl	2297c <z_pend_curr>
   2327e:	4604      	mov	r4, r0
   23280:	f04f 0340 	mov.w	r3, #64	; 0x40
   23284:	f3ef 8211 	mrs	r2, BASEPRI
   23288:	f383 8812 	msr	BASEPRI_MAX, r3
   2328c:	f3bf 8f6f 	isb	sy
   23290:	4615      	mov	r5, r2
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   23292:	4641      	mov	r1, r8
   23294:	4638      	mov	r0, r7
   23296:	f00a fe96 	bl	2dfc6 <clear_event_registrations>
	__asm__ volatile(
   2329a:	f385 8811 	msr	BASEPRI, r5
   2329e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   232a2:	4620      	mov	r0, r4
   232a4:	b003      	add	sp, #12
   232a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clear_event_registrations(events, events_registered, key);
   232aa:	460a      	mov	r2, r1
   232ac:	4601      	mov	r1, r0
   232ae:	4638      	mov	r0, r7
   232b0:	f00a fe89 	bl	2dfc6 <clear_event_registrations>
   232b4:	f389 8811 	msr	BASEPRI, r9
   232b8:	f3bf 8f6f 	isb	sy
		return 0;
   232bc:	2400      	movs	r4, #0
   232be:	e7f0      	b.n	232a2 <z_impl_k_poll+0x82>
   232c0:	f381 8811 	msr	BASEPRI, r1
   232c4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   232c8:	f06f 040a 	mvn.w	r4, #10
   232cc:	e7e9      	b.n	232a2 <z_impl_k_poll+0x82>
   232ce:	bf00      	nop
   232d0:	20004040 	.word	0x20004040
   232d4:	20000874 	.word	0x20000874
   232d8:	2000408c 	.word	0x2000408c

000232dc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   232dc:	b538      	push	{r3, r4, r5, lr}
   232de:	4603      	mov	r3, r0
	__asm__ volatile(
   232e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   232e4:	f3ef 8511 	mrs	r5, BASEPRI
   232e8:	f382 8812 	msr	BASEPRI_MAX, r2
   232ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   232f0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   232f2:	2201      	movs	r2, #1
   232f4:	6082      	str	r2, [r0, #8]
	return list->head == list;
   232f6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   232f8:	4283      	cmp	r3, r0
   232fa:	d010      	beq.n	2331e <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   232fc:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   232fe:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   23300:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23302:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23304:	2300      	movs	r3, #0
   23306:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   23308:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2330a:	2101      	movs	r1, #1
   2330c:	f00a ff71 	bl	2e1f2 <signal_poll_event>
   23310:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   23312:	4629      	mov	r1, r5
   23314:	4805      	ldr	r0, [pc, #20]	; (2332c <z_impl_k_poll_signal_raise+0x50>)
   23316:	f7ff f9cd 	bl	226b4 <z_reschedule>
	return rc;
}
   2331a:	4620      	mov	r0, r4
   2331c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2331e:	f385 8811 	msr	BASEPRI, r5
   23322:	f3bf 8f6f 	isb	sy
		return 0;
   23326:	2400      	movs	r4, #0
   23328:	e7f7      	b.n	2331a <z_impl_k_poll_signal_raise+0x3e>
   2332a:	bf00      	nop
   2332c:	2000408c 	.word	0x2000408c

00023330 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23330:	b538      	push	{r3, r4, r5, lr}
   23332:	4604      	mov	r4, r0
   23334:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   23336:	f00a f8d7 	bl	2d4e8 <k_is_in_isr>
   2333a:	b948      	cbnz	r0, 23350 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2333c:	4b05      	ldr	r3, [pc, #20]	; (23354 <z_thread_aligned_alloc+0x24>)
   2333e:	689b      	ldr	r3, [r3, #8]
   23340:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   23344:	b118      	cbz	r0, 2334e <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   23346:	462a      	mov	r2, r5
   23348:	4621      	mov	r1, r4
   2334a:	f7ed fee1 	bl	11110 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   2334e:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   23350:	2000      	movs	r0, #0
	return ret;
   23352:	e7fc      	b.n	2334e <z_thread_aligned_alloc+0x1e>
   23354:	20004040 	.word	0x20004040

00023358 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   23358:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2335a:	4802      	ldr	r0, [pc, #8]	; (23364 <boot_banner+0xc>)
   2335c:	f004 fc1a 	bl	27b94 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   23360:	bd08      	pop	{r3, pc}
   23362:	bf00      	nop
   23364:	000317a8 	.word	0x000317a8

00023368 <ocrypto_ecdh_p256_public_key>:
   23368:	b530      	push	{r4, r5, lr}
   2336a:	b099      	sub	sp, #100	; 0x64
   2336c:	4605      	mov	r5, r0
   2336e:	4668      	mov	r0, sp
   23370:	f000 f828 	bl	233c4 <ocrypto_sc_p256_from32bytes>
   23374:	4669      	mov	r1, sp
   23376:	4604      	mov	r4, r0
   23378:	a808      	add	r0, sp, #32
   2337a:	f000 fa53 	bl	23824 <ocrypto_curve_p256_scalarmult_base>
   2337e:	a908      	add	r1, sp, #32
   23380:	4304      	orrs	r4, r0
   23382:	4628      	mov	r0, r5
   23384:	f000 f98a 	bl	2369c <ocrypto_curve_p256_to64bytes>
   23388:	4620      	mov	r0, r4
   2338a:	b019      	add	sp, #100	; 0x64
   2338c:	bd30      	pop	{r4, r5, pc}
   2338e:	bf00      	nop

00023390 <ocrypto_ecdh_p256_common_secret>:
   23390:	b570      	push	{r4, r5, r6, lr}
   23392:	b098      	sub	sp, #96	; 0x60
   23394:	4605      	mov	r5, r0
   23396:	4668      	mov	r0, sp
   23398:	4616      	mov	r6, r2
   2339a:	f000 f813 	bl	233c4 <ocrypto_sc_p256_from32bytes>
   2339e:	4631      	mov	r1, r6
   233a0:	4604      	mov	r4, r0
   233a2:	a808      	add	r0, sp, #32
   233a4:	f000 f946 	bl	23634 <ocrypto_curve_p256_from64bytes>
   233a8:	a908      	add	r1, sp, #32
   233aa:	466a      	mov	r2, sp
   233ac:	4304      	orrs	r4, r0
   233ae:	4608      	mov	r0, r1
   233b0:	f000 f982 	bl	236b8 <ocrypto_curve_p256_scalarmult>
   233b4:	a908      	add	r1, sp, #32
   233b6:	4304      	orrs	r4, r0
   233b8:	4628      	mov	r0, r5
   233ba:	f000 f96d 	bl	23698 <ocrypto_curve_p256_to32bytes>
   233be:	4620      	mov	r0, r4
   233c0:	b018      	add	sp, #96	; 0x60
   233c2:	bd70      	pop	{r4, r5, r6, pc}

000233c4 <ocrypto_sc_p256_from32bytes>:
   233c4:	b570      	push	{r4, r5, r6, lr}
   233c6:	680b      	ldr	r3, [r1, #0]
   233c8:	4e12      	ldr	r6, [pc, #72]	; (23414 <ocrypto_sc_p256_from32bytes+0x50>)
   233ca:	ba1b      	rev	r3, r3
   233cc:	61c3      	str	r3, [r0, #28]
   233ce:	684b      	ldr	r3, [r1, #4]
   233d0:	ba1b      	rev	r3, r3
   233d2:	6183      	str	r3, [r0, #24]
   233d4:	688b      	ldr	r3, [r1, #8]
   233d6:	ba1b      	rev	r3, r3
   233d8:	6143      	str	r3, [r0, #20]
   233da:	68cb      	ldr	r3, [r1, #12]
   233dc:	ba1b      	rev	r3, r3
   233de:	6103      	str	r3, [r0, #16]
   233e0:	690b      	ldr	r3, [r1, #16]
   233e2:	ba1b      	rev	r3, r3
   233e4:	60c3      	str	r3, [r0, #12]
   233e6:	694b      	ldr	r3, [r1, #20]
   233e8:	ba1b      	rev	r3, r3
   233ea:	6083      	str	r3, [r0, #8]
   233ec:	698b      	ldr	r3, [r1, #24]
   233ee:	ba1b      	rev	r3, r3
   233f0:	6043      	str	r3, [r0, #4]
   233f2:	69cb      	ldr	r3, [r1, #28]
   233f4:	ba1b      	rev	r3, r3
   233f6:	4632      	mov	r2, r6
   233f8:	6003      	str	r3, [r0, #0]
   233fa:	4601      	mov	r1, r0
   233fc:	4604      	mov	r4, r0
   233fe:	f7dd fb5f 	bl	ac0 <ocrypto_bigint_sub256>
   23402:	4631      	mov	r1, r6
   23404:	4605      	mov	r5, r0
   23406:	4602      	mov	r2, r0
   23408:	4620      	mov	r0, r4
   2340a:	f7dd fb79 	bl	b00 <ocrypto_bigint_cadd256>
   2340e:	1e68      	subs	r0, r5, #1
   23410:	bd70      	pop	{r4, r5, r6, pc}
   23412:	bf00      	nop
   23414:	000317d8 	.word	0x000317d8

00023418 <p256_zdblu>:
   23418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2341c:	b088      	sub	sp, #32
   2341e:	460c      	mov	r4, r1
   23420:	4606      	mov	r6, r0
   23422:	f102 0120 	add.w	r1, r2, #32
   23426:	4668      	mov	r0, sp
   23428:	f106 0720 	add.w	r7, r6, #32
   2342c:	4690      	mov	r8, r2
   2342e:	f7dd fe5d 	bl	10ec <ocrypto_mod_p256_sqr>
   23432:	466a      	mov	r2, sp
   23434:	4669      	mov	r1, sp
   23436:	4668      	mov	r0, sp
   23438:	f7dd fd6a 	bl	f10 <ocrypto_mod_p256_add>
   2343c:	4669      	mov	r1, sp
   2343e:	4638      	mov	r0, r7
   23440:	f7dd fe54 	bl	10ec <ocrypto_mod_p256_sqr>
   23444:	463a      	mov	r2, r7
   23446:	4639      	mov	r1, r7
   23448:	4638      	mov	r0, r7
   2344a:	f104 0520 	add.w	r5, r4, #32
   2344e:	f7dd fd5f 	bl	f10 <ocrypto_mod_p256_add>
   23452:	466a      	mov	r2, sp
   23454:	4669      	mov	r1, sp
   23456:	4668      	mov	r0, sp
   23458:	f7dd fd5a 	bl	f10 <ocrypto_mod_p256_add>
   2345c:	4641      	mov	r1, r8
   2345e:	4628      	mov	r0, r5
   23460:	f7dd fe44 	bl	10ec <ocrypto_mod_p256_sqr>
   23464:	466a      	mov	r2, sp
   23466:	4641      	mov	r1, r8
   23468:	4630      	mov	r0, r6
   2346a:	f7dd fe27 	bl	10bc <ocrypto_mod_p256_mul>
   2346e:	462a      	mov	r2, r5
   23470:	4629      	mov	r1, r5
   23472:	4668      	mov	r0, sp
   23474:	f7dd fd4c 	bl	f10 <ocrypto_mod_p256_add>
   23478:	462a      	mov	r2, r5
   2347a:	4669      	mov	r1, sp
   2347c:	4668      	mov	r0, sp
   2347e:	f7dd fd47 	bl	f10 <ocrypto_mod_p256_add>
   23482:	4a12      	ldr	r2, [pc, #72]	; (234cc <p256_zdblu+0xb4>)
   23484:	4669      	mov	r1, sp
   23486:	4668      	mov	r0, sp
   23488:	f7dd fd42 	bl	f10 <ocrypto_mod_p256_add>
   2348c:	4669      	mov	r1, sp
   2348e:	4620      	mov	r0, r4
   23490:	f7dd fe2c 	bl	10ec <ocrypto_mod_p256_sqr>
   23494:	4632      	mov	r2, r6
   23496:	4621      	mov	r1, r4
   23498:	4620      	mov	r0, r4
   2349a:	f7dd fd77 	bl	f8c <ocrypto_mod_p256_sub>
   2349e:	4632      	mov	r2, r6
   234a0:	4621      	mov	r1, r4
   234a2:	4620      	mov	r0, r4
   234a4:	f7dd fd72 	bl	f8c <ocrypto_mod_p256_sub>
   234a8:	4622      	mov	r2, r4
   234aa:	4631      	mov	r1, r6
   234ac:	4628      	mov	r0, r5
   234ae:	f7dd fd6d 	bl	f8c <ocrypto_mod_p256_sub>
   234b2:	466a      	mov	r2, sp
   234b4:	4629      	mov	r1, r5
   234b6:	4628      	mov	r0, r5
   234b8:	f7dd fe00 	bl	10bc <ocrypto_mod_p256_mul>
   234bc:	463a      	mov	r2, r7
   234be:	4629      	mov	r1, r5
   234c0:	4628      	mov	r0, r5
   234c2:	f7dd fd63 	bl	f8c <ocrypto_mod_p256_sub>
   234c6:	b008      	add	sp, #32
   234c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   234cc:	00031878 	.word	0x00031878

000234d0 <p256_zaddc>:
   234d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   234d2:	b099      	sub	sp, #100	; 0x64
   234d4:	4604      	mov	r4, r0
   234d6:	460d      	mov	r5, r1
   234d8:	460a      	mov	r2, r1
   234da:	4601      	mov	r1, r0
   234dc:	4668      	mov	r0, sp
   234de:	f7dd fd55 	bl	f8c <ocrypto_mod_p256_sub>
   234e2:	4669      	mov	r1, sp
   234e4:	4668      	mov	r0, sp
   234e6:	f7dd fe01 	bl	10ec <ocrypto_mod_p256_sqr>
   234ea:	466a      	mov	r2, sp
   234ec:	4621      	mov	r1, r4
   234ee:	a808      	add	r0, sp, #32
   234f0:	f105 0620 	add.w	r6, r5, #32
   234f4:	f104 0720 	add.w	r7, r4, #32
   234f8:	f7dd fde0 	bl	10bc <ocrypto_mod_p256_mul>
   234fc:	466a      	mov	r2, sp
   234fe:	4629      	mov	r1, r5
   23500:	4668      	mov	r0, sp
   23502:	f7dd fddb 	bl	10bc <ocrypto_mod_p256_mul>
   23506:	4632      	mov	r2, r6
   23508:	4639      	mov	r1, r7
   2350a:	a810      	add	r0, sp, #64	; 0x40
   2350c:	f7dd fd00 	bl	f10 <ocrypto_mod_p256_add>
   23510:	4632      	mov	r2, r6
   23512:	4639      	mov	r1, r7
   23514:	4630      	mov	r0, r6
   23516:	f7dd fd39 	bl	f8c <ocrypto_mod_p256_sub>
   2351a:	4631      	mov	r1, r6
   2351c:	4628      	mov	r0, r5
   2351e:	f7dd fde5 	bl	10ec <ocrypto_mod_p256_sqr>
   23522:	466a      	mov	r2, sp
   23524:	a908      	add	r1, sp, #32
   23526:	4620      	mov	r0, r4
   23528:	f7dd fcf2 	bl	f10 <ocrypto_mod_p256_add>
   2352c:	4622      	mov	r2, r4
   2352e:	4629      	mov	r1, r5
   23530:	4628      	mov	r0, r5
   23532:	f7dd fd2b 	bl	f8c <ocrypto_mod_p256_sub>
   23536:	466a      	mov	r2, sp
   23538:	a908      	add	r1, sp, #32
   2353a:	4668      	mov	r0, sp
   2353c:	f7dd fd26 	bl	f8c <ocrypto_mod_p256_sub>
   23540:	466a      	mov	r2, sp
   23542:	4639      	mov	r1, r7
   23544:	4638      	mov	r0, r7
   23546:	f7dd fdb9 	bl	10bc <ocrypto_mod_p256_mul>
   2354a:	462a      	mov	r2, r5
   2354c:	a908      	add	r1, sp, #32
   2354e:	4668      	mov	r0, sp
   23550:	f7dd fd1c 	bl	f8c <ocrypto_mod_p256_sub>
   23554:	466a      	mov	r2, sp
   23556:	4631      	mov	r1, r6
   23558:	4630      	mov	r0, r6
   2355a:	f7dd fdaf 	bl	10bc <ocrypto_mod_p256_mul>
   2355e:	463a      	mov	r2, r7
   23560:	4631      	mov	r1, r6
   23562:	4630      	mov	r0, r6
   23564:	f7dd fd12 	bl	f8c <ocrypto_mod_p256_sub>
   23568:	a910      	add	r1, sp, #64	; 0x40
   2356a:	4668      	mov	r0, sp
   2356c:	f7dd fdbe 	bl	10ec <ocrypto_mod_p256_sqr>
   23570:	4622      	mov	r2, r4
   23572:	4669      	mov	r1, sp
   23574:	4620      	mov	r0, r4
   23576:	f7dd fd09 	bl	f8c <ocrypto_mod_p256_sub>
   2357a:	a908      	add	r1, sp, #32
   2357c:	4622      	mov	r2, r4
   2357e:	4608      	mov	r0, r1
   23580:	f7dd fd04 	bl	f8c <ocrypto_mod_p256_sub>
   23584:	a910      	add	r1, sp, #64	; 0x40
   23586:	aa08      	add	r2, sp, #32
   23588:	4608      	mov	r0, r1
   2358a:	f7dd fd97 	bl	10bc <ocrypto_mod_p256_mul>
   2358e:	463a      	mov	r2, r7
   23590:	a910      	add	r1, sp, #64	; 0x40
   23592:	4638      	mov	r0, r7
   23594:	f7dd fcfa 	bl	f8c <ocrypto_mod_p256_sub>
   23598:	b019      	add	sp, #100	; 0x64
   2359a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002359c <p256_zaddu>:
   2359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   235a0:	b088      	sub	sp, #32
   235a2:	460c      	mov	r4, r1
   235a4:	4605      	mov	r5, r0
   235a6:	4690      	mov	r8, r2
   235a8:	460a      	mov	r2, r1
   235aa:	4601      	mov	r1, r0
   235ac:	4668      	mov	r0, sp
   235ae:	f7dd fced 	bl	f8c <ocrypto_mod_p256_sub>
   235b2:	4669      	mov	r1, sp
   235b4:	4668      	mov	r0, sp
   235b6:	f7dd fd99 	bl	10ec <ocrypto_mod_p256_sqr>
   235ba:	466a      	mov	r2, sp
   235bc:	4629      	mov	r1, r5
   235be:	4628      	mov	r0, r5
   235c0:	f104 0620 	add.w	r6, r4, #32
   235c4:	f7dd fd7a 	bl	10bc <ocrypto_mod_p256_mul>
   235c8:	f105 0720 	add.w	r7, r5, #32
   235cc:	466a      	mov	r2, sp
   235ce:	4621      	mov	r1, r4
   235d0:	4668      	mov	r0, sp
   235d2:	f7dd fd73 	bl	10bc <ocrypto_mod_p256_mul>
   235d6:	4632      	mov	r2, r6
   235d8:	4639      	mov	r1, r7
   235da:	4630      	mov	r0, r6
   235dc:	f7dd fcd6 	bl	f8c <ocrypto_mod_p256_sub>
   235e0:	4631      	mov	r1, r6
   235e2:	4620      	mov	r0, r4
   235e4:	f7dd fd82 	bl	10ec <ocrypto_mod_p256_sqr>
   235e8:	462a      	mov	r2, r5
   235ea:	4621      	mov	r1, r4
   235ec:	4620      	mov	r0, r4
   235ee:	f7dd fccd 	bl	f8c <ocrypto_mod_p256_sub>
   235f2:	466a      	mov	r2, sp
   235f4:	4621      	mov	r1, r4
   235f6:	4620      	mov	r0, r4
   235f8:	f7dd fcc8 	bl	f8c <ocrypto_mod_p256_sub>
   235fc:	466a      	mov	r2, sp
   235fe:	4629      	mov	r1, r5
   23600:	4640      	mov	r0, r8
   23602:	f7dd fcc3 	bl	f8c <ocrypto_mod_p256_sub>
   23606:	4642      	mov	r2, r8
   23608:	4639      	mov	r1, r7
   2360a:	4638      	mov	r0, r7
   2360c:	f7dd fd56 	bl	10bc <ocrypto_mod_p256_mul>
   23610:	4622      	mov	r2, r4
   23612:	4629      	mov	r1, r5
   23614:	4668      	mov	r0, sp
   23616:	f7dd fcb9 	bl	f8c <ocrypto_mod_p256_sub>
   2361a:	466a      	mov	r2, sp
   2361c:	4631      	mov	r1, r6
   2361e:	4630      	mov	r0, r6
   23620:	f7dd fd4c 	bl	10bc <ocrypto_mod_p256_mul>
   23624:	463a      	mov	r2, r7
   23626:	4631      	mov	r1, r6
   23628:	4630      	mov	r0, r6
   2362a:	f7dd fcaf 	bl	f8c <ocrypto_mod_p256_sub>
   2362e:	b008      	add	sp, #32
   23630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023634 <ocrypto_curve_p256_from64bytes>:
   23634:	b570      	push	{r4, r5, r6, lr}
   23636:	f100 0620 	add.w	r6, r0, #32
   2363a:	b090      	sub	sp, #64	; 0x40
   2363c:	460d      	mov	r5, r1
   2363e:	4604      	mov	r4, r0
   23640:	f000 f914 	bl	2386c <ocrypto_mod_p256_from_bytes>
   23644:	f105 0120 	add.w	r1, r5, #32
   23648:	4630      	mov	r0, r6
   2364a:	f000 f90f 	bl	2386c <ocrypto_mod_p256_from_bytes>
   2364e:	4621      	mov	r1, r4
   23650:	a808      	add	r0, sp, #32
   23652:	f7dd fd4b 	bl	10ec <ocrypto_mod_p256_sqr>
   23656:	a908      	add	r1, sp, #32
   23658:	4608      	mov	r0, r1
   2365a:	4a0d      	ldr	r2, [pc, #52]	; (23690 <ocrypto_curve_p256_from64bytes+0x5c>)
   2365c:	f7dd fc58 	bl	f10 <ocrypto_mod_p256_add>
   23660:	a908      	add	r1, sp, #32
   23662:	4622      	mov	r2, r4
   23664:	4608      	mov	r0, r1
   23666:	f7dd fd29 	bl	10bc <ocrypto_mod_p256_mul>
   2366a:	a908      	add	r1, sp, #32
   2366c:	4a09      	ldr	r2, [pc, #36]	; (23694 <ocrypto_curve_p256_from64bytes+0x60>)
   2366e:	4608      	mov	r0, r1
   23670:	f7dd fc4e 	bl	f10 <ocrypto_mod_p256_add>
   23674:	4631      	mov	r1, r6
   23676:	4668      	mov	r0, sp
   23678:	f7dd fd38 	bl	10ec <ocrypto_mod_p256_sqr>
   2367c:	2220      	movs	r2, #32
   2367e:	4669      	mov	r1, sp
   23680:	eb0d 0002 	add.w	r0, sp, r2
   23684:	f7dd fc16 	bl	eb4 <ocrypto_constant_time_equal>
   23688:	3801      	subs	r0, #1
   2368a:	b010      	add	sp, #64	; 0x40
   2368c:	bd70      	pop	{r4, r5, r6, pc}
   2368e:	bf00      	nop
   23690:	00031878 	.word	0x00031878
   23694:	00031898 	.word	0x00031898

00023698 <ocrypto_curve_p256_to32bytes>:
   23698:	f000 b902 	b.w	238a0 <ocrypto_mod_p256_to_bytes>

0002369c <ocrypto_curve_p256_to64bytes>:
   2369c:	b538      	push	{r3, r4, r5, lr}
   2369e:	4604      	mov	r4, r0
   236a0:	460d      	mov	r5, r1
   236a2:	f000 f8fd 	bl	238a0 <ocrypto_mod_p256_to_bytes>
   236a6:	f105 0120 	add.w	r1, r5, #32
   236aa:	f104 0020 	add.w	r0, r4, #32
   236ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   236b2:	f000 b8f5 	b.w	238a0 <ocrypto_mod_p256_to_bytes>
   236b6:	bf00      	nop

000236b8 <ocrypto_curve_p256_scalarmult>:
   236b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   236bc:	4613      	mov	r3, r2
   236be:	b0bb      	sub	sp, #236	; 0xec
   236c0:	4a54      	ldr	r2, [pc, #336]	; (23814 <ocrypto_curve_p256_scalarmult+0x15c>)
   236c2:	4688      	mov	r8, r1
   236c4:	4607      	mov	r7, r0
   236c6:	4619      	mov	r1, r3
   236c8:	a812      	add	r0, sp, #72	; 0x48
   236ca:	f7dd f9f9 	bl	ac0 <ocrypto_bigint_sub256>
   236ce:	4952      	ldr	r1, [pc, #328]	; (23818 <ocrypto_curve_p256_scalarmult+0x160>)
   236d0:	4602      	mov	r2, r0
   236d2:	a812      	add	r0, sp, #72	; 0x48
   236d4:	f7dd fa14 	bl	b00 <ocrypto_bigint_cadd256>
   236d8:	9d19      	ldr	r5, [sp, #100]	; 0x64
   236da:	494e      	ldr	r1, [pc, #312]	; (23814 <ocrypto_curve_p256_scalarmult+0x15c>)
   236dc:	ea00 75d5 	and.w	r5, r0, r5, lsr #31
   236e0:	4606      	mov	r6, r0
   236e2:	f1c5 0201 	rsb	r2, r5, #1
   236e6:	a812      	add	r0, sp, #72	; 0x48
   236e8:	f7dd fa0a 	bl	b00 <ocrypto_bigint_cadd256>
   236ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   236ee:	4642      	mov	r2, r8
   236f0:	ea6f 0903 	mvn.w	r9, r3
   236f4:	a92a      	add	r1, sp, #168	; 0xa8
   236f6:	a81a      	add	r0, sp, #104	; 0x68
   236f8:	f7ff fe8e 	bl	23418 <p256_zdblu>
   236fc:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   23700:	a922      	add	r1, sp, #136	; 0x88
   23702:	f1c9 0201 	rsb	r2, r9, #1
   23706:	4608      	mov	r0, r1
   23708:	f000 f892 	bl	23830 <ocrypto_mod_p256_cneg>
   2370c:	f1c6 0601 	rsb	r6, r6, #1
   23710:	24fe      	movs	r4, #254	; 0xfe
   23712:	aa02      	add	r2, sp, #8
   23714:	a91a      	add	r1, sp, #104	; 0x68
   23716:	a82a      	add	r0, sp, #168	; 0xa8
   23718:	f7ff ff40 	bl	2359c <p256_zaddu>
   2371c:	1162      	asrs	r2, r4, #5
   2371e:	ab3a      	add	r3, sp, #232	; 0xe8
   23720:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23724:	f004 011f 	and.w	r1, r4, #31
   23728:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   2372c:	40cb      	lsrs	r3, r1
   2372e:	464a      	mov	r2, r9
   23730:	f003 0901 	and.w	r9, r3, #1
   23734:	ea89 0202 	eor.w	r2, r9, r2
   23738:	a92a      	add	r1, sp, #168	; 0xa8
   2373a:	a81a      	add	r0, sp, #104	; 0x68
   2373c:	9201      	str	r2, [sp, #4]
   2373e:	f7dd fa3b 	bl	bb8 <ocrypto_bigint_cswap256>
   23742:	9a01      	ldr	r2, [sp, #4]
   23744:	a932      	add	r1, sp, #200	; 0xc8
   23746:	a822      	add	r0, sp, #136	; 0x88
   23748:	f7dd fa36 	bl	bb8 <ocrypto_bigint_cswap256>
   2374c:	3c01      	subs	r4, #1
   2374e:	a92a      	add	r1, sp, #168	; 0xa8
   23750:	a81a      	add	r0, sp, #104	; 0x68
   23752:	f7ff febd 	bl	234d0 <p256_zaddc>
   23756:	1c63      	adds	r3, r4, #1
   23758:	d1db      	bne.n	23712 <ocrypto_curve_p256_scalarmult+0x5a>
   2375a:	f1c9 0201 	rsb	r2, r9, #1
   2375e:	a922      	add	r1, sp, #136	; 0x88
   23760:	a80a      	add	r0, sp, #40	; 0x28
   23762:	f000 f865 	bl	23830 <ocrypto_mod_p256_cneg>
   23766:	ea85 0509 	eor.w	r5, r5, r9
   2376a:	aa02      	add	r2, sp, #8
   2376c:	a91a      	add	r1, sp, #104	; 0x68
   2376e:	a82a      	add	r0, sp, #168	; 0xa8
   23770:	f7ff ff14 	bl	2359c <p256_zaddu>
   23774:	a92a      	add	r1, sp, #168	; 0xa8
   23776:	462a      	mov	r2, r5
   23778:	a81a      	add	r0, sp, #104	; 0x68
   2377a:	f7dd fa1d 	bl	bb8 <ocrypto_bigint_cswap256>
   2377e:	462a      	mov	r2, r5
   23780:	a932      	add	r1, sp, #200	; 0xc8
   23782:	a822      	add	r0, sp, #136	; 0x88
   23784:	f7dd fa18 	bl	bb8 <ocrypto_bigint_cswap256>
   23788:	a90a      	add	r1, sp, #40	; 0x28
   2378a:	aa02      	add	r2, sp, #8
   2378c:	4608      	mov	r0, r1
   2378e:	f7dd fc95 	bl	10bc <ocrypto_mod_p256_mul>
   23792:	a90a      	add	r1, sp, #40	; 0x28
   23794:	4608      	mov	r0, r1
   23796:	f000 f89d 	bl	238d4 <ocrypto_mod_p256_inv>
   2379a:	a90a      	add	r1, sp, #40	; 0x28
   2379c:	f107 0420 	add.w	r4, r7, #32
   237a0:	f108 0220 	add.w	r2, r8, #32
   237a4:	4608      	mov	r0, r1
   237a6:	f7dd fc89 	bl	10bc <ocrypto_mod_p256_mul>
   237aa:	a922      	add	r1, sp, #136	; 0x88
   237ac:	aa0a      	add	r2, sp, #40	; 0x28
   237ae:	4620      	mov	r0, r4
   237b0:	f7dd fc84 	bl	10bc <ocrypto_mod_p256_mul>
   237b4:	aa0a      	add	r2, sp, #40	; 0x28
   237b6:	a91a      	add	r1, sp, #104	; 0x68
   237b8:	a802      	add	r0, sp, #8
   237ba:	f7dd fc7f 	bl	10bc <ocrypto_mod_p256_mul>
   237be:	a902      	add	r1, sp, #8
   237c0:	4608      	mov	r0, r1
   237c2:	f7dd fc93 	bl	10ec <ocrypto_mod_p256_sqr>
   237c6:	aa1a      	add	r2, sp, #104	; 0x68
   237c8:	a902      	add	r1, sp, #8
   237ca:	a80a      	add	r0, sp, #40	; 0x28
   237cc:	f7dd fc76 	bl	10bc <ocrypto_mod_p256_mul>
   237d0:	4621      	mov	r1, r4
   237d2:	a802      	add	r0, sp, #8
   237d4:	f7dd fc8a 	bl	10ec <ocrypto_mod_p256_sqr>
   237d8:	aa0a      	add	r2, sp, #40	; 0x28
   237da:	a902      	add	r1, sp, #8
   237dc:	4610      	mov	r0, r2
   237de:	f7dd fbd5 	bl	f8c <ocrypto_mod_p256_sub>
   237e2:	4a0e      	ldr	r2, [pc, #56]	; (2381c <ocrypto_curve_p256_scalarmult+0x164>)
   237e4:	a90a      	add	r1, sp, #40	; 0x28
   237e6:	a802      	add	r0, sp, #8
   237e8:	f7dd fbd0 	bl	f8c <ocrypto_mod_p256_sub>
   237ec:	4620      	mov	r0, r4
   237ee:	2120      	movs	r1, #32
   237f0:	f7dd fb74 	bl	edc <ocrypto_constant_time_is_zero>
   237f4:	a90a      	add	r1, sp, #40	; 0x28
   237f6:	4243      	negs	r3, r0
   237f8:	4602      	mov	r2, r0
   237fa:	a802      	add	r0, sp, #8
   237fc:	431e      	orrs	r6, r3
   237fe:	f7dd f9db 	bl	bb8 <ocrypto_bigint_cswap256>
   23802:	4638      	mov	r0, r7
   23804:	4a06      	ldr	r2, [pc, #24]	; (23820 <ocrypto_curve_p256_scalarmult+0x168>)
   23806:	a902      	add	r1, sp, #8
   23808:	f7dd fc58 	bl	10bc <ocrypto_mod_p256_mul>
   2380c:	4630      	mov	r0, r6
   2380e:	b03b      	add	sp, #236	; 0xec
   23810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23814:	000318b8 	.word	0x000318b8
   23818:	00031838 	.word	0x00031838
   2381c:	00031898 	.word	0x00031898
   23820:	00031858 	.word	0x00031858

00023824 <ocrypto_curve_p256_scalarmult_base>:
   23824:	460a      	mov	r2, r1
   23826:	4901      	ldr	r1, [pc, #4]	; (2382c <ocrypto_curve_p256_scalarmult_base+0x8>)
   23828:	f7ff bf46 	b.w	236b8 <ocrypto_curve_p256_scalarmult>
   2382c:	000317f8 	.word	0x000317f8

00023830 <ocrypto_mod_p256_cneg>:
   23830:	b570      	push	{r4, r5, r6, lr}
   23832:	b088      	sub	sp, #32
   23834:	4604      	mov	r4, r0
   23836:	460d      	mov	r5, r1
   23838:	4616      	mov	r6, r2
   2383a:	2100      	movs	r1, #0
   2383c:	2220      	movs	r2, #32
   2383e:	4668      	mov	r0, sp
   23840:	f00a fd51 	bl	2e2e6 <memset>
   23844:	2300      	movs	r3, #0
   23846:	4629      	mov	r1, r5
   23848:	2220      	movs	r2, #32
   2384a:	4620      	mov	r0, r4
   2384c:	9300      	str	r3, [sp, #0]
   2384e:	f00a fd3c 	bl	2e2ca <memcpy>
   23852:	462a      	mov	r2, r5
   23854:	4669      	mov	r1, sp
   23856:	4668      	mov	r0, sp
   23858:	f7dd fb98 	bl	f8c <ocrypto_mod_p256_sub>
   2385c:	4632      	mov	r2, r6
   2385e:	4669      	mov	r1, sp
   23860:	4620      	mov	r0, r4
   23862:	f7dd f9a9 	bl	bb8 <ocrypto_bigint_cswap256>
   23866:	b008      	add	sp, #32
   23868:	bd70      	pop	{r4, r5, r6, pc}
   2386a:	bf00      	nop

0002386c <ocrypto_mod_p256_from_bytes>:
   2386c:	680b      	ldr	r3, [r1, #0]
   2386e:	ba1b      	rev	r3, r3
   23870:	61c3      	str	r3, [r0, #28]
   23872:	684b      	ldr	r3, [r1, #4]
   23874:	ba1b      	rev	r3, r3
   23876:	6183      	str	r3, [r0, #24]
   23878:	688b      	ldr	r3, [r1, #8]
   2387a:	ba1b      	rev	r3, r3
   2387c:	6143      	str	r3, [r0, #20]
   2387e:	68cb      	ldr	r3, [r1, #12]
   23880:	ba1b      	rev	r3, r3
   23882:	6103      	str	r3, [r0, #16]
   23884:	690b      	ldr	r3, [r1, #16]
   23886:	ba1b      	rev	r3, r3
   23888:	60c3      	str	r3, [r0, #12]
   2388a:	694b      	ldr	r3, [r1, #20]
   2388c:	ba1b      	rev	r3, r3
   2388e:	6083      	str	r3, [r0, #8]
   23890:	698b      	ldr	r3, [r1, #24]
   23892:	ba1b      	rev	r3, r3
   23894:	6043      	str	r3, [r0, #4]
   23896:	69cb      	ldr	r3, [r1, #28]
   23898:	ba1b      	rev	r3, r3
   2389a:	6003      	str	r3, [r0, #0]
   2389c:	4770      	bx	lr
   2389e:	bf00      	nop

000238a0 <ocrypto_mod_p256_to_bytes>:
   238a0:	69cb      	ldr	r3, [r1, #28]
   238a2:	ba1b      	rev	r3, r3
   238a4:	6003      	str	r3, [r0, #0]
   238a6:	698b      	ldr	r3, [r1, #24]
   238a8:	ba1b      	rev	r3, r3
   238aa:	6043      	str	r3, [r0, #4]
   238ac:	694b      	ldr	r3, [r1, #20]
   238ae:	ba1b      	rev	r3, r3
   238b0:	6083      	str	r3, [r0, #8]
   238b2:	690b      	ldr	r3, [r1, #16]
   238b4:	ba1b      	rev	r3, r3
   238b6:	60c3      	str	r3, [r0, #12]
   238b8:	68cb      	ldr	r3, [r1, #12]
   238ba:	ba1b      	rev	r3, r3
   238bc:	6103      	str	r3, [r0, #16]
   238be:	688b      	ldr	r3, [r1, #8]
   238c0:	ba1b      	rev	r3, r3
   238c2:	6143      	str	r3, [r0, #20]
   238c4:	684b      	ldr	r3, [r1, #4]
   238c6:	ba1b      	rev	r3, r3
   238c8:	6183      	str	r3, [r0, #24]
   238ca:	680b      	ldr	r3, [r1, #0]
   238cc:	ba1b      	rev	r3, r3
   238ce:	61c3      	str	r3, [r0, #28]
   238d0:	4770      	bx	lr
   238d2:	bf00      	nop

000238d4 <ocrypto_mod_p256_inv>:
   238d4:	b570      	push	{r4, r5, r6, lr}
   238d6:	b098      	sub	sp, #96	; 0x60
   238d8:	460d      	mov	r5, r1
   238da:	4606      	mov	r6, r0
   238dc:	a810      	add	r0, sp, #64	; 0x40
   238de:	f7dd fc05 	bl	10ec <ocrypto_mod_p256_sqr>
   238e2:	462a      	mov	r2, r5
   238e4:	a910      	add	r1, sp, #64	; 0x40
   238e6:	4668      	mov	r0, sp
   238e8:	f7dd fbe8 	bl	10bc <ocrypto_mod_p256_mul>
   238ec:	4669      	mov	r1, sp
   238ee:	a810      	add	r0, sp, #64	; 0x40
   238f0:	f7dd fbfc 	bl	10ec <ocrypto_mod_p256_sqr>
   238f4:	a910      	add	r1, sp, #64	; 0x40
   238f6:	4608      	mov	r0, r1
   238f8:	f7dd fbf8 	bl	10ec <ocrypto_mod_p256_sqr>
   238fc:	466a      	mov	r2, sp
   238fe:	a910      	add	r1, sp, #64	; 0x40
   23900:	a808      	add	r0, sp, #32
   23902:	f7dd fbdb 	bl	10bc <ocrypto_mod_p256_mul>
   23906:	a908      	add	r1, sp, #32
   23908:	a810      	add	r0, sp, #64	; 0x40
   2390a:	f7dd fbef 	bl	10ec <ocrypto_mod_p256_sqr>
   2390e:	a910      	add	r1, sp, #64	; 0x40
   23910:	4608      	mov	r0, r1
   23912:	f7dd fbeb 	bl	10ec <ocrypto_mod_p256_sqr>
   23916:	a910      	add	r1, sp, #64	; 0x40
   23918:	4608      	mov	r0, r1
   2391a:	f7dd fbe7 	bl	10ec <ocrypto_mod_p256_sqr>
   2391e:	a910      	add	r1, sp, #64	; 0x40
   23920:	4608      	mov	r0, r1
   23922:	f7dd fbe3 	bl	10ec <ocrypto_mod_p256_sqr>
   23926:	a910      	add	r1, sp, #64	; 0x40
   23928:	aa08      	add	r2, sp, #32
   2392a:	4608      	mov	r0, r1
   2392c:	f7dd fbc6 	bl	10bc <ocrypto_mod_p256_mul>
   23930:	a910      	add	r1, sp, #64	; 0x40
   23932:	4608      	mov	r0, r1
   23934:	f7dd fbda 	bl	10ec <ocrypto_mod_p256_sqr>
   23938:	a910      	add	r1, sp, #64	; 0x40
   2393a:	4608      	mov	r0, r1
   2393c:	f7dd fbd6 	bl	10ec <ocrypto_mod_p256_sqr>
   23940:	a910      	add	r1, sp, #64	; 0x40
   23942:	466a      	mov	r2, sp
   23944:	a808      	add	r0, sp, #32
   23946:	f7dd fbb9 	bl	10bc <ocrypto_mod_p256_mul>
   2394a:	2405      	movs	r4, #5
   2394c:	a908      	add	r1, sp, #32
   2394e:	a810      	add	r0, sp, #64	; 0x40
   23950:	f7dd fbcc 	bl	10ec <ocrypto_mod_p256_sqr>
   23954:	a910      	add	r1, sp, #64	; 0x40
   23956:	4608      	mov	r0, r1
   23958:	f7dd fbc8 	bl	10ec <ocrypto_mod_p256_sqr>
   2395c:	3c01      	subs	r4, #1
   2395e:	a910      	add	r1, sp, #64	; 0x40
   23960:	d1f5      	bne.n	2394e <ocrypto_mod_p256_inv+0x7a>
   23962:	aa08      	add	r2, sp, #32
   23964:	4608      	mov	r0, r1
   23966:	f7dd fba9 	bl	10bc <ocrypto_mod_p256_mul>
   2396a:	2405      	movs	r4, #5
   2396c:	a910      	add	r1, sp, #64	; 0x40
   2396e:	4608      	mov	r0, r1
   23970:	f7dd fbbc 	bl	10ec <ocrypto_mod_p256_sqr>
   23974:	a910      	add	r1, sp, #64	; 0x40
   23976:	4608      	mov	r0, r1
   23978:	f7dd fbb8 	bl	10ec <ocrypto_mod_p256_sqr>
   2397c:	3c01      	subs	r4, #1
   2397e:	d1f5      	bne.n	2396c <ocrypto_mod_p256_inv+0x98>
   23980:	a910      	add	r1, sp, #64	; 0x40
   23982:	aa08      	add	r2, sp, #32
   23984:	4608      	mov	r0, r1
   23986:	f7dd fb99 	bl	10bc <ocrypto_mod_p256_mul>
   2398a:	a910      	add	r1, sp, #64	; 0x40
   2398c:	a808      	add	r0, sp, #32
   2398e:	f7dd fbad 	bl	10ec <ocrypto_mod_p256_sqr>
   23992:	a908      	add	r1, sp, #32
   23994:	4608      	mov	r0, r1
   23996:	f7dd fba9 	bl	10ec <ocrypto_mod_p256_sqr>
   2399a:	a908      	add	r1, sp, #32
   2399c:	466a      	mov	r2, sp
   2399e:	4668      	mov	r0, sp
   239a0:	f7dd fb8c 	bl	10bc <ocrypto_mod_p256_mul>
   239a4:	2410      	movs	r4, #16
   239a6:	4669      	mov	r1, sp
   239a8:	a810      	add	r0, sp, #64	; 0x40
   239aa:	f7dd fb9f 	bl	10ec <ocrypto_mod_p256_sqr>
   239ae:	a910      	add	r1, sp, #64	; 0x40
   239b0:	4608      	mov	r0, r1
   239b2:	f7dd fb9b 	bl	10ec <ocrypto_mod_p256_sqr>
   239b6:	3c01      	subs	r4, #1
   239b8:	a910      	add	r1, sp, #64	; 0x40
   239ba:	d1f5      	bne.n	239a8 <ocrypto_mod_p256_inv+0xd4>
   239bc:	462a      	mov	r2, r5
   239be:	4608      	mov	r0, r1
   239c0:	f7dd fb7c 	bl	10bc <ocrypto_mod_p256_mul>
   239c4:	2440      	movs	r4, #64	; 0x40
   239c6:	a910      	add	r1, sp, #64	; 0x40
   239c8:	4608      	mov	r0, r1
   239ca:	f7dd fb8f 	bl	10ec <ocrypto_mod_p256_sqr>
   239ce:	a910      	add	r1, sp, #64	; 0x40
   239d0:	4608      	mov	r0, r1
   239d2:	f7dd fb8b 	bl	10ec <ocrypto_mod_p256_sqr>
   239d6:	3c01      	subs	r4, #1
   239d8:	d1f5      	bne.n	239c6 <ocrypto_mod_p256_inv+0xf2>
   239da:	a910      	add	r1, sp, #64	; 0x40
   239dc:	466a      	mov	r2, sp
   239de:	4608      	mov	r0, r1
   239e0:	f7dd fb6c 	bl	10bc <ocrypto_mod_p256_mul>
   239e4:	2410      	movs	r4, #16
   239e6:	a910      	add	r1, sp, #64	; 0x40
   239e8:	4608      	mov	r0, r1
   239ea:	f7dd fb7f 	bl	10ec <ocrypto_mod_p256_sqr>
   239ee:	a910      	add	r1, sp, #64	; 0x40
   239f0:	4608      	mov	r0, r1
   239f2:	f7dd fb7b 	bl	10ec <ocrypto_mod_p256_sqr>
   239f6:	3c01      	subs	r4, #1
   239f8:	d1f5      	bne.n	239e6 <ocrypto_mod_p256_inv+0x112>
   239fa:	a910      	add	r1, sp, #64	; 0x40
   239fc:	466a      	mov	r2, sp
   239fe:	4608      	mov	r0, r1
   23a00:	f7dd fb5c 	bl	10bc <ocrypto_mod_p256_mul>
   23a04:	2410      	movs	r4, #16
   23a06:	a910      	add	r1, sp, #64	; 0x40
   23a08:	4608      	mov	r0, r1
   23a0a:	f7dd fb6f 	bl	10ec <ocrypto_mod_p256_sqr>
   23a0e:	a910      	add	r1, sp, #64	; 0x40
   23a10:	4608      	mov	r0, r1
   23a12:	f7dd fb6b 	bl	10ec <ocrypto_mod_p256_sqr>
   23a16:	3c01      	subs	r4, #1
   23a18:	d1f5      	bne.n	23a06 <ocrypto_mod_p256_inv+0x132>
   23a1a:	a910      	add	r1, sp, #64	; 0x40
   23a1c:	aa08      	add	r2, sp, #32
   23a1e:	4608      	mov	r0, r1
   23a20:	f7dd fb4c 	bl	10bc <ocrypto_mod_p256_mul>
   23a24:	462a      	mov	r2, r5
   23a26:	a910      	add	r1, sp, #64	; 0x40
   23a28:	4630      	mov	r0, r6
   23a2a:	f7dd fb47 	bl	10bc <ocrypto_mod_p256_mul>
   23a2e:	b018      	add	sp, #96	; 0x60
   23a30:	bd70      	pop	{r4, r5, r6, pc}
   23a32:	bf00      	nop

00023a34 <malloc>:
   23a34:	4b02      	ldr	r3, [pc, #8]	; (23a40 <malloc+0xc>)
   23a36:	4601      	mov	r1, r0
   23a38:	6818      	ldr	r0, [r3, #0]
   23a3a:	f000 b84d 	b.w	23ad8 <_malloc_r>
   23a3e:	bf00      	nop
   23a40:	2000087c 	.word	0x2000087c

00023a44 <_free_r>:
   23a44:	b538      	push	{r3, r4, r5, lr}
   23a46:	4605      	mov	r5, r0
   23a48:	2900      	cmp	r1, #0
   23a4a:	d041      	beq.n	23ad0 <_free_r+0x8c>
   23a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   23a50:	1f0c      	subs	r4, r1, #4
   23a52:	2b00      	cmp	r3, #0
   23a54:	bfb8      	it	lt
   23a56:	18e4      	addlt	r4, r4, r3
   23a58:	f000 fc0c 	bl	24274 <__malloc_lock>
   23a5c:	4a1d      	ldr	r2, [pc, #116]	; (23ad4 <_free_r+0x90>)
   23a5e:	6813      	ldr	r3, [r2, #0]
   23a60:	b933      	cbnz	r3, 23a70 <_free_r+0x2c>
   23a62:	6063      	str	r3, [r4, #4]
   23a64:	6014      	str	r4, [r2, #0]
   23a66:	4628      	mov	r0, r5
   23a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23a6c:	f000 bc08 	b.w	24280 <__malloc_unlock>
   23a70:	42a3      	cmp	r3, r4
   23a72:	d908      	bls.n	23a86 <_free_r+0x42>
   23a74:	6820      	ldr	r0, [r4, #0]
   23a76:	1821      	adds	r1, r4, r0
   23a78:	428b      	cmp	r3, r1
   23a7a:	bf01      	itttt	eq
   23a7c:	6819      	ldreq	r1, [r3, #0]
   23a7e:	685b      	ldreq	r3, [r3, #4]
   23a80:	1809      	addeq	r1, r1, r0
   23a82:	6021      	streq	r1, [r4, #0]
   23a84:	e7ed      	b.n	23a62 <_free_r+0x1e>
   23a86:	461a      	mov	r2, r3
   23a88:	685b      	ldr	r3, [r3, #4]
   23a8a:	b10b      	cbz	r3, 23a90 <_free_r+0x4c>
   23a8c:	42a3      	cmp	r3, r4
   23a8e:	d9fa      	bls.n	23a86 <_free_r+0x42>
   23a90:	6811      	ldr	r1, [r2, #0]
   23a92:	1850      	adds	r0, r2, r1
   23a94:	42a0      	cmp	r0, r4
   23a96:	d10b      	bne.n	23ab0 <_free_r+0x6c>
   23a98:	6820      	ldr	r0, [r4, #0]
   23a9a:	4401      	add	r1, r0
   23a9c:	1850      	adds	r0, r2, r1
   23a9e:	4283      	cmp	r3, r0
   23aa0:	6011      	str	r1, [r2, #0]
   23aa2:	d1e0      	bne.n	23a66 <_free_r+0x22>
   23aa4:	6818      	ldr	r0, [r3, #0]
   23aa6:	685b      	ldr	r3, [r3, #4]
   23aa8:	6053      	str	r3, [r2, #4]
   23aaa:	4408      	add	r0, r1
   23aac:	6010      	str	r0, [r2, #0]
   23aae:	e7da      	b.n	23a66 <_free_r+0x22>
   23ab0:	d902      	bls.n	23ab8 <_free_r+0x74>
   23ab2:	230c      	movs	r3, #12
   23ab4:	602b      	str	r3, [r5, #0]
   23ab6:	e7d6      	b.n	23a66 <_free_r+0x22>
   23ab8:	6820      	ldr	r0, [r4, #0]
   23aba:	1821      	adds	r1, r4, r0
   23abc:	428b      	cmp	r3, r1
   23abe:	bf04      	itt	eq
   23ac0:	6819      	ldreq	r1, [r3, #0]
   23ac2:	685b      	ldreq	r3, [r3, #4]
   23ac4:	6063      	str	r3, [r4, #4]
   23ac6:	bf04      	itt	eq
   23ac8:	1809      	addeq	r1, r1, r0
   23aca:	6021      	streq	r1, [r4, #0]
   23acc:	6054      	str	r4, [r2, #4]
   23ace:	e7ca      	b.n	23a66 <_free_r+0x22>
   23ad0:	bd38      	pop	{r3, r4, r5, pc}
   23ad2:	bf00      	nop
   23ad4:	20004090 	.word	0x20004090

00023ad8 <_malloc_r>:
   23ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ada:	1ccd      	adds	r5, r1, #3
   23adc:	f025 0503 	bic.w	r5, r5, #3
   23ae0:	3508      	adds	r5, #8
   23ae2:	2d0c      	cmp	r5, #12
   23ae4:	bf38      	it	cc
   23ae6:	250c      	movcc	r5, #12
   23ae8:	2d00      	cmp	r5, #0
   23aea:	4606      	mov	r6, r0
   23aec:	db01      	blt.n	23af2 <_malloc_r+0x1a>
   23aee:	42a9      	cmp	r1, r5
   23af0:	d903      	bls.n	23afa <_malloc_r+0x22>
   23af2:	230c      	movs	r3, #12
   23af4:	6033      	str	r3, [r6, #0]
   23af6:	2000      	movs	r0, #0
   23af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23afa:	f000 fbbb 	bl	24274 <__malloc_lock>
   23afe:	4921      	ldr	r1, [pc, #132]	; (23b84 <_malloc_r+0xac>)
   23b00:	680a      	ldr	r2, [r1, #0]
   23b02:	4614      	mov	r4, r2
   23b04:	b99c      	cbnz	r4, 23b2e <_malloc_r+0x56>
   23b06:	4f20      	ldr	r7, [pc, #128]	; (23b88 <_malloc_r+0xb0>)
   23b08:	683b      	ldr	r3, [r7, #0]
   23b0a:	b923      	cbnz	r3, 23b16 <_malloc_r+0x3e>
   23b0c:	4621      	mov	r1, r4
   23b0e:	4630      	mov	r0, r6
   23b10:	f000 fb9c 	bl	2424c <_sbrk_r>
   23b14:	6038      	str	r0, [r7, #0]
   23b16:	4629      	mov	r1, r5
   23b18:	4630      	mov	r0, r6
   23b1a:	f000 fb97 	bl	2424c <_sbrk_r>
   23b1e:	1c43      	adds	r3, r0, #1
   23b20:	d123      	bne.n	23b6a <_malloc_r+0x92>
   23b22:	230c      	movs	r3, #12
   23b24:	6033      	str	r3, [r6, #0]
   23b26:	4630      	mov	r0, r6
   23b28:	f000 fbaa 	bl	24280 <__malloc_unlock>
   23b2c:	e7e3      	b.n	23af6 <_malloc_r+0x1e>
   23b2e:	6823      	ldr	r3, [r4, #0]
   23b30:	1b5b      	subs	r3, r3, r5
   23b32:	d417      	bmi.n	23b64 <_malloc_r+0x8c>
   23b34:	2b0b      	cmp	r3, #11
   23b36:	d903      	bls.n	23b40 <_malloc_r+0x68>
   23b38:	6023      	str	r3, [r4, #0]
   23b3a:	441c      	add	r4, r3
   23b3c:	6025      	str	r5, [r4, #0]
   23b3e:	e004      	b.n	23b4a <_malloc_r+0x72>
   23b40:	6863      	ldr	r3, [r4, #4]
   23b42:	42a2      	cmp	r2, r4
   23b44:	bf0c      	ite	eq
   23b46:	600b      	streq	r3, [r1, #0]
   23b48:	6053      	strne	r3, [r2, #4]
   23b4a:	4630      	mov	r0, r6
   23b4c:	f000 fb98 	bl	24280 <__malloc_unlock>
   23b50:	f104 000b 	add.w	r0, r4, #11
   23b54:	1d23      	adds	r3, r4, #4
   23b56:	f020 0007 	bic.w	r0, r0, #7
   23b5a:	1ac2      	subs	r2, r0, r3
   23b5c:	bf1c      	itt	ne
   23b5e:	1a1b      	subne	r3, r3, r0
   23b60:	50a3      	strne	r3, [r4, r2]
   23b62:	e7c9      	b.n	23af8 <_malloc_r+0x20>
   23b64:	4622      	mov	r2, r4
   23b66:	6864      	ldr	r4, [r4, #4]
   23b68:	e7cc      	b.n	23b04 <_malloc_r+0x2c>
   23b6a:	1cc4      	adds	r4, r0, #3
   23b6c:	f024 0403 	bic.w	r4, r4, #3
   23b70:	42a0      	cmp	r0, r4
   23b72:	d0e3      	beq.n	23b3c <_malloc_r+0x64>
   23b74:	1a21      	subs	r1, r4, r0
   23b76:	4630      	mov	r0, r6
   23b78:	f000 fb68 	bl	2424c <_sbrk_r>
   23b7c:	3001      	adds	r0, #1
   23b7e:	d1dd      	bne.n	23b3c <_malloc_r+0x64>
   23b80:	e7cf      	b.n	23b22 <_malloc_r+0x4a>
   23b82:	bf00      	nop
   23b84:	20004090 	.word	0x20004090
   23b88:	2000408c 	.word	0x2000408c

00023b8c <_printf_float>:
   23b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b90:	b08d      	sub	sp, #52	; 0x34
   23b92:	460c      	mov	r4, r1
   23b94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   23b98:	4616      	mov	r6, r2
   23b9a:	461f      	mov	r7, r3
   23b9c:	4605      	mov	r5, r0
   23b9e:	f000 fb65 	bl	2426c <_localeconv_r>
   23ba2:	6803      	ldr	r3, [r0, #0]
   23ba4:	9304      	str	r3, [sp, #16]
   23ba6:	4618      	mov	r0, r3
   23ba8:	f7e8 ff98 	bl	cadc <strlen>
   23bac:	2300      	movs	r3, #0
   23bae:	930a      	str	r3, [sp, #40]	; 0x28
   23bb0:	f8d8 3000 	ldr.w	r3, [r8]
   23bb4:	9005      	str	r0, [sp, #20]
   23bb6:	3307      	adds	r3, #7
   23bb8:	f023 0307 	bic.w	r3, r3, #7
   23bbc:	f103 0208 	add.w	r2, r3, #8
   23bc0:	f894 a018 	ldrb.w	sl, [r4, #24]
   23bc4:	f8d4 b000 	ldr.w	fp, [r4]
   23bc8:	f8c8 2000 	str.w	r2, [r8]
   23bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
   23bd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   23bd4:	9307      	str	r3, [sp, #28]
   23bd6:	f8cd 8018 	str.w	r8, [sp, #24]
   23bda:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   23bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   23be2:	4ba0      	ldr	r3, [pc, #640]	; (23e64 <_printf_float+0x2d8>)
   23be4:	f04f 32ff 	mov.w	r2, #4294967295
   23be8:	f7dd fa98 	bl	111c <__aeabi_dcmpun>
   23bec:	bb70      	cbnz	r0, 23c4c <_printf_float+0xc0>
   23bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   23bf2:	4b9c      	ldr	r3, [pc, #624]	; (23e64 <_printf_float+0x2d8>)
   23bf4:	f04f 32ff 	mov.w	r2, #4294967295
   23bf8:	f7dc ff24 	bl	a44 <__aeabi_dcmple>
   23bfc:	bb30      	cbnz	r0, 23c4c <_printf_float+0xc0>
   23bfe:	2200      	movs	r2, #0
   23c00:	2300      	movs	r3, #0
   23c02:	4640      	mov	r0, r8
   23c04:	4649      	mov	r1, r9
   23c06:	f7dc ff13 	bl	a30 <__aeabi_dcmplt>
   23c0a:	b110      	cbz	r0, 23c12 <_printf_float+0x86>
   23c0c:	232d      	movs	r3, #45	; 0x2d
   23c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23c12:	4a95      	ldr	r2, [pc, #596]	; (23e68 <_printf_float+0x2dc>)
   23c14:	4b95      	ldr	r3, [pc, #596]	; (23e6c <_printf_float+0x2e0>)
   23c16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   23c1a:	bf94      	ite	ls
   23c1c:	4690      	movls	r8, r2
   23c1e:	4698      	movhi	r8, r3
   23c20:	2303      	movs	r3, #3
   23c22:	6123      	str	r3, [r4, #16]
   23c24:	f02b 0304 	bic.w	r3, fp, #4
   23c28:	6023      	str	r3, [r4, #0]
   23c2a:	f04f 0900 	mov.w	r9, #0
   23c2e:	9700      	str	r7, [sp, #0]
   23c30:	4633      	mov	r3, r6
   23c32:	aa0b      	add	r2, sp, #44	; 0x2c
   23c34:	4621      	mov	r1, r4
   23c36:	4628      	mov	r0, r5
   23c38:	f00a fc00 	bl	2e43c <_printf_common>
   23c3c:	3001      	adds	r0, #1
   23c3e:	f040 8096 	bne.w	23d6e <_printf_float+0x1e2>
   23c42:	f04f 30ff 	mov.w	r0, #4294967295
   23c46:	b00d      	add	sp, #52	; 0x34
   23c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c4c:	4642      	mov	r2, r8
   23c4e:	464b      	mov	r3, r9
   23c50:	4640      	mov	r0, r8
   23c52:	4649      	mov	r1, r9
   23c54:	f7dd fa62 	bl	111c <__aeabi_dcmpun>
   23c58:	b140      	cbz	r0, 23c6c <_printf_float+0xe0>
   23c5a:	464b      	mov	r3, r9
   23c5c:	2b00      	cmp	r3, #0
   23c5e:	bfbc      	itt	lt
   23c60:	232d      	movlt	r3, #45	; 0x2d
   23c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   23c66:	4a82      	ldr	r2, [pc, #520]	; (23e70 <_printf_float+0x2e4>)
   23c68:	4b82      	ldr	r3, [pc, #520]	; (23e74 <_printf_float+0x2e8>)
   23c6a:	e7d4      	b.n	23c16 <_printf_float+0x8a>
   23c6c:	6863      	ldr	r3, [r4, #4]
   23c6e:	1c5a      	adds	r2, r3, #1
   23c70:	d126      	bne.n	23cc0 <_printf_float+0x134>
   23c72:	2306      	movs	r3, #6
   23c74:	6063      	str	r3, [r4, #4]
   23c76:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   23c7a:	2300      	movs	r3, #0
   23c7c:	6022      	str	r2, [r4, #0]
   23c7e:	9303      	str	r3, [sp, #12]
   23c80:	ab0a      	add	r3, sp, #40	; 0x28
   23c82:	e9cd a301 	strd	sl, r3, [sp, #4]
   23c86:	ab09      	add	r3, sp, #36	; 0x24
   23c88:	9300      	str	r3, [sp, #0]
   23c8a:	6861      	ldr	r1, [r4, #4]
   23c8c:	ec49 8b10 	vmov	d0, r8, r9
   23c90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   23c94:	4628      	mov	r0, r5
   23c96:	f00a fb2e 	bl	2e2f6 <__cvt>
   23c9a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   23c9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   23ca0:	4680      	mov	r8, r0
   23ca2:	d115      	bne.n	23cd0 <_printf_float+0x144>
   23ca4:	1ccb      	adds	r3, r1, #3
   23ca6:	db3b      	blt.n	23d20 <_printf_float+0x194>
   23ca8:	6863      	ldr	r3, [r4, #4]
   23caa:	4299      	cmp	r1, r3
   23cac:	dc38      	bgt.n	23d20 <_printf_float+0x194>
   23cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23cb0:	4299      	cmp	r1, r3
   23cb2:	db55      	blt.n	23d60 <_printf_float+0x1d4>
   23cb4:	6823      	ldr	r3, [r4, #0]
   23cb6:	6121      	str	r1, [r4, #16]
   23cb8:	07d8      	lsls	r0, r3, #31
   23cba:	d545      	bpl.n	23d48 <_printf_float+0x1bc>
   23cbc:	1c4b      	adds	r3, r1, #1
   23cbe:	e042      	b.n	23d46 <_printf_float+0x1ba>
   23cc0:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   23cc4:	2a47      	cmp	r2, #71	; 0x47
   23cc6:	d1d6      	bne.n	23c76 <_printf_float+0xea>
   23cc8:	2b00      	cmp	r3, #0
   23cca:	d1d4      	bne.n	23c76 <_printf_float+0xea>
   23ccc:	2301      	movs	r3, #1
   23cce:	e7d1      	b.n	23c74 <_printf_float+0xe8>
   23cd0:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   23cd4:	d107      	bne.n	23ce6 <_printf_float+0x15a>
   23cd6:	1cc8      	adds	r0, r1, #3
   23cd8:	db25      	blt.n	23d26 <_printf_float+0x19a>
   23cda:	6863      	ldr	r3, [r4, #4]
   23cdc:	428b      	cmp	r3, r1
   23cde:	db22      	blt.n	23d26 <_printf_float+0x19a>
   23ce0:	f04f 0a67 	mov.w	sl, #103	; 0x67
   23ce4:	e7e3      	b.n	23cae <_printf_float+0x122>
   23ce6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   23cea:	d81f      	bhi.n	23d2c <_printf_float+0x1a0>
   23cec:	3901      	subs	r1, #1
   23cee:	4652      	mov	r2, sl
   23cf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
   23cf4:	9109      	str	r1, [sp, #36]	; 0x24
   23cf6:	f00a fb67 	bl	2e3c8 <__exponent>
   23cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23cfc:	1813      	adds	r3, r2, r0
   23cfe:	2a01      	cmp	r2, #1
   23d00:	4681      	mov	r9, r0
   23d02:	6123      	str	r3, [r4, #16]
   23d04:	dc02      	bgt.n	23d0c <_printf_float+0x180>
   23d06:	6822      	ldr	r2, [r4, #0]
   23d08:	07d2      	lsls	r2, r2, #31
   23d0a:	d501      	bpl.n	23d10 <_printf_float+0x184>
   23d0c:	3301      	adds	r3, #1
   23d0e:	6123      	str	r3, [r4, #16]
   23d10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   23d14:	2b00      	cmp	r3, #0
   23d16:	d08a      	beq.n	23c2e <_printf_float+0xa2>
   23d18:	232d      	movs	r3, #45	; 0x2d
   23d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23d1e:	e786      	b.n	23c2e <_printf_float+0xa2>
   23d20:	f04f 0a65 	mov.w	sl, #101	; 0x65
   23d24:	e7e2      	b.n	23cec <_printf_float+0x160>
   23d26:	f04f 0a45 	mov.w	sl, #69	; 0x45
   23d2a:	e7df      	b.n	23cec <_printf_float+0x160>
   23d2c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   23d30:	d1bd      	bne.n	23cae <_printf_float+0x122>
   23d32:	2900      	cmp	r1, #0
   23d34:	6863      	ldr	r3, [r4, #4]
   23d36:	dd0b      	ble.n	23d50 <_printf_float+0x1c4>
   23d38:	6121      	str	r1, [r4, #16]
   23d3a:	b913      	cbnz	r3, 23d42 <_printf_float+0x1b6>
   23d3c:	6822      	ldr	r2, [r4, #0]
   23d3e:	07d0      	lsls	r0, r2, #31
   23d40:	d502      	bpl.n	23d48 <_printf_float+0x1bc>
   23d42:	3301      	adds	r3, #1
   23d44:	440b      	add	r3, r1
   23d46:	6123      	str	r3, [r4, #16]
   23d48:	65a1      	str	r1, [r4, #88]	; 0x58
   23d4a:	f04f 0900 	mov.w	r9, #0
   23d4e:	e7df      	b.n	23d10 <_printf_float+0x184>
   23d50:	b913      	cbnz	r3, 23d58 <_printf_float+0x1cc>
   23d52:	6822      	ldr	r2, [r4, #0]
   23d54:	07d2      	lsls	r2, r2, #31
   23d56:	d501      	bpl.n	23d5c <_printf_float+0x1d0>
   23d58:	3302      	adds	r3, #2
   23d5a:	e7f4      	b.n	23d46 <_printf_float+0x1ba>
   23d5c:	2301      	movs	r3, #1
   23d5e:	e7f2      	b.n	23d46 <_printf_float+0x1ba>
   23d60:	2900      	cmp	r1, #0
   23d62:	bfd4      	ite	le
   23d64:	f1c1 0202 	rsble	r2, r1, #2
   23d68:	2201      	movgt	r2, #1
   23d6a:	4413      	add	r3, r2
   23d6c:	e7eb      	b.n	23d46 <_printf_float+0x1ba>
   23d6e:	6823      	ldr	r3, [r4, #0]
   23d70:	055a      	lsls	r2, r3, #21
   23d72:	d407      	bmi.n	23d84 <_printf_float+0x1f8>
   23d74:	6923      	ldr	r3, [r4, #16]
   23d76:	4642      	mov	r2, r8
   23d78:	4631      	mov	r1, r6
   23d7a:	4628      	mov	r0, r5
   23d7c:	47b8      	blx	r7
   23d7e:	3001      	adds	r0, #1
   23d80:	d12b      	bne.n	23dda <_printf_float+0x24e>
   23d82:	e75e      	b.n	23c42 <_printf_float+0xb6>
   23d84:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   23d88:	f240 80dc 	bls.w	23f44 <_printf_float+0x3b8>
   23d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   23d90:	2200      	movs	r2, #0
   23d92:	2300      	movs	r3, #0
   23d94:	f7dc fe42 	bl	a1c <__aeabi_dcmpeq>
   23d98:	2800      	cmp	r0, #0
   23d9a:	d033      	beq.n	23e04 <_printf_float+0x278>
   23d9c:	4a36      	ldr	r2, [pc, #216]	; (23e78 <_printf_float+0x2ec>)
   23d9e:	2301      	movs	r3, #1
   23da0:	4631      	mov	r1, r6
   23da2:	4628      	mov	r0, r5
   23da4:	47b8      	blx	r7
   23da6:	3001      	adds	r0, #1
   23da8:	f43f af4b 	beq.w	23c42 <_printf_float+0xb6>
   23dac:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	; 0x24
   23db0:	4543      	cmp	r3, r8
   23db2:	db02      	blt.n	23dba <_printf_float+0x22e>
   23db4:	6823      	ldr	r3, [r4, #0]
   23db6:	07d8      	lsls	r0, r3, #31
   23db8:	d50f      	bpl.n	23dda <_printf_float+0x24e>
   23dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23dbe:	4631      	mov	r1, r6
   23dc0:	4628      	mov	r0, r5
   23dc2:	47b8      	blx	r7
   23dc4:	3001      	adds	r0, #1
   23dc6:	f43f af3c 	beq.w	23c42 <_printf_float+0xb6>
   23dca:	f04f 0900 	mov.w	r9, #0
   23dce:	f108 38ff 	add.w	r8, r8, #4294967295
   23dd2:	f104 0a1a 	add.w	sl, r4, #26
   23dd6:	45c8      	cmp	r8, r9
   23dd8:	dc09      	bgt.n	23dee <_printf_float+0x262>
   23dda:	6823      	ldr	r3, [r4, #0]
   23ddc:	079b      	lsls	r3, r3, #30
   23dde:	f100 8102 	bmi.w	23fe6 <_printf_float+0x45a>
   23de2:	68e0      	ldr	r0, [r4, #12]
   23de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23de6:	4298      	cmp	r0, r3
   23de8:	bfb8      	it	lt
   23dea:	4618      	movlt	r0, r3
   23dec:	e72b      	b.n	23c46 <_printf_float+0xba>
   23dee:	2301      	movs	r3, #1
   23df0:	4652      	mov	r2, sl
   23df2:	4631      	mov	r1, r6
   23df4:	4628      	mov	r0, r5
   23df6:	47b8      	blx	r7
   23df8:	3001      	adds	r0, #1
   23dfa:	f43f af22 	beq.w	23c42 <_printf_float+0xb6>
   23dfe:	f109 0901 	add.w	r9, r9, #1
   23e02:	e7e8      	b.n	23dd6 <_printf_float+0x24a>
   23e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23e06:	2b00      	cmp	r3, #0
   23e08:	dc38      	bgt.n	23e7c <_printf_float+0x2f0>
   23e0a:	4a1b      	ldr	r2, [pc, #108]	; (23e78 <_printf_float+0x2ec>)
   23e0c:	2301      	movs	r3, #1
   23e0e:	4631      	mov	r1, r6
   23e10:	4628      	mov	r0, r5
   23e12:	47b8      	blx	r7
   23e14:	3001      	adds	r0, #1
   23e16:	f43f af14 	beq.w	23c42 <_printf_float+0xb6>
   23e1a:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	; 0x24
   23e1e:	ea59 0303 	orrs.w	r3, r9, r3
   23e22:	d102      	bne.n	23e2a <_printf_float+0x29e>
   23e24:	6823      	ldr	r3, [r4, #0]
   23e26:	07d9      	lsls	r1, r3, #31
   23e28:	d5d7      	bpl.n	23dda <_printf_float+0x24e>
   23e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23e2e:	4631      	mov	r1, r6
   23e30:	4628      	mov	r0, r5
   23e32:	47b8      	blx	r7
   23e34:	3001      	adds	r0, #1
   23e36:	f43f af04 	beq.w	23c42 <_printf_float+0xb6>
   23e3a:	f04f 0a00 	mov.w	sl, #0
   23e3e:	f104 0b1a 	add.w	fp, r4, #26
   23e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23e44:	425b      	negs	r3, r3
   23e46:	4553      	cmp	r3, sl
   23e48:	dc01      	bgt.n	23e4e <_printf_float+0x2c2>
   23e4a:	464b      	mov	r3, r9
   23e4c:	e793      	b.n	23d76 <_printf_float+0x1ea>
   23e4e:	2301      	movs	r3, #1
   23e50:	465a      	mov	r2, fp
   23e52:	4631      	mov	r1, r6
   23e54:	4628      	mov	r0, r5
   23e56:	47b8      	blx	r7
   23e58:	3001      	adds	r0, #1
   23e5a:	f43f aef2 	beq.w	23c42 <_printf_float+0xb6>
   23e5e:	f10a 0a01 	add.w	sl, sl, #1
   23e62:	e7ee      	b.n	23e42 <_printf_float+0x2b6>
   23e64:	7fefffff 	.word	0x7fefffff
   23e68:	00031bd1 	.word	0x00031bd1
   23e6c:	00031bd5 	.word	0x00031bd5
   23e70:	00031bd9 	.word	0x00031bd9
   23e74:	00031bdd 	.word	0x00031bdd
   23e78:	00031be1 	.word	0x00031be1
   23e7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   23e7e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   23e82:	4553      	cmp	r3, sl
   23e84:	bfa8      	it	ge
   23e86:	4653      	movge	r3, sl
   23e88:	2b00      	cmp	r3, #0
   23e8a:	4699      	mov	r9, r3
   23e8c:	dc36      	bgt.n	23efc <_printf_float+0x370>
   23e8e:	f04f 0b00 	mov.w	fp, #0
   23e92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   23e96:	f104 021a 	add.w	r2, r4, #26
   23e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   23e9c:	9306      	str	r3, [sp, #24]
   23e9e:	eba3 0309 	sub.w	r3, r3, r9
   23ea2:	455b      	cmp	r3, fp
   23ea4:	dc31      	bgt.n	23f0a <_printf_float+0x37e>
   23ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23ea8:	459a      	cmp	sl, r3
   23eaa:	dc3a      	bgt.n	23f22 <_printf_float+0x396>
   23eac:	6823      	ldr	r3, [r4, #0]
   23eae:	07da      	lsls	r2, r3, #31
   23eb0:	d437      	bmi.n	23f22 <_printf_float+0x396>
   23eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23eb4:	ebaa 0903 	sub.w	r9, sl, r3
   23eb8:	9b06      	ldr	r3, [sp, #24]
   23eba:	ebaa 0303 	sub.w	r3, sl, r3
   23ebe:	4599      	cmp	r9, r3
   23ec0:	bfa8      	it	ge
   23ec2:	4699      	movge	r9, r3
   23ec4:	f1b9 0f00 	cmp.w	r9, #0
   23ec8:	dc33      	bgt.n	23f32 <_printf_float+0x3a6>
   23eca:	f04f 0800 	mov.w	r8, #0
   23ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   23ed2:	f104 0b1a 	add.w	fp, r4, #26
   23ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23ed8:	ebaa 0303 	sub.w	r3, sl, r3
   23edc:	eba3 0309 	sub.w	r3, r3, r9
   23ee0:	4543      	cmp	r3, r8
   23ee2:	f77f af7a 	ble.w	23dda <_printf_float+0x24e>
   23ee6:	2301      	movs	r3, #1
   23ee8:	465a      	mov	r2, fp
   23eea:	4631      	mov	r1, r6
   23eec:	4628      	mov	r0, r5
   23eee:	47b8      	blx	r7
   23ef0:	3001      	adds	r0, #1
   23ef2:	f43f aea6 	beq.w	23c42 <_printf_float+0xb6>
   23ef6:	f108 0801 	add.w	r8, r8, #1
   23efa:	e7ec      	b.n	23ed6 <_printf_float+0x34a>
   23efc:	4642      	mov	r2, r8
   23efe:	4631      	mov	r1, r6
   23f00:	4628      	mov	r0, r5
   23f02:	47b8      	blx	r7
   23f04:	3001      	adds	r0, #1
   23f06:	d1c2      	bne.n	23e8e <_printf_float+0x302>
   23f08:	e69b      	b.n	23c42 <_printf_float+0xb6>
   23f0a:	2301      	movs	r3, #1
   23f0c:	4631      	mov	r1, r6
   23f0e:	4628      	mov	r0, r5
   23f10:	9206      	str	r2, [sp, #24]
   23f12:	47b8      	blx	r7
   23f14:	3001      	adds	r0, #1
   23f16:	f43f ae94 	beq.w	23c42 <_printf_float+0xb6>
   23f1a:	9a06      	ldr	r2, [sp, #24]
   23f1c:	f10b 0b01 	add.w	fp, fp, #1
   23f20:	e7bb      	b.n	23e9a <_printf_float+0x30e>
   23f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23f26:	4631      	mov	r1, r6
   23f28:	4628      	mov	r0, r5
   23f2a:	47b8      	blx	r7
   23f2c:	3001      	adds	r0, #1
   23f2e:	d1c0      	bne.n	23eb2 <_printf_float+0x326>
   23f30:	e687      	b.n	23c42 <_printf_float+0xb6>
   23f32:	9a06      	ldr	r2, [sp, #24]
   23f34:	464b      	mov	r3, r9
   23f36:	4442      	add	r2, r8
   23f38:	4631      	mov	r1, r6
   23f3a:	4628      	mov	r0, r5
   23f3c:	47b8      	blx	r7
   23f3e:	3001      	adds	r0, #1
   23f40:	d1c3      	bne.n	23eca <_printf_float+0x33e>
   23f42:	e67e      	b.n	23c42 <_printf_float+0xb6>
   23f44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   23f48:	f1ba 0f01 	cmp.w	sl, #1
   23f4c:	dc01      	bgt.n	23f52 <_printf_float+0x3c6>
   23f4e:	07db      	lsls	r3, r3, #31
   23f50:	d536      	bpl.n	23fc0 <_printf_float+0x434>
   23f52:	2301      	movs	r3, #1
   23f54:	4642      	mov	r2, r8
   23f56:	4631      	mov	r1, r6
   23f58:	4628      	mov	r0, r5
   23f5a:	47b8      	blx	r7
   23f5c:	3001      	adds	r0, #1
   23f5e:	f43f ae70 	beq.w	23c42 <_printf_float+0xb6>
   23f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23f66:	4631      	mov	r1, r6
   23f68:	4628      	mov	r0, r5
   23f6a:	47b8      	blx	r7
   23f6c:	3001      	adds	r0, #1
   23f6e:	f43f ae68 	beq.w	23c42 <_printf_float+0xb6>
   23f72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   23f76:	2200      	movs	r2, #0
   23f78:	2300      	movs	r3, #0
   23f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
   23f7e:	f7dc fd4d 	bl	a1c <__aeabi_dcmpeq>
   23f82:	b9c0      	cbnz	r0, 23fb6 <_printf_float+0x42a>
   23f84:	4653      	mov	r3, sl
   23f86:	f108 0201 	add.w	r2, r8, #1
   23f8a:	4631      	mov	r1, r6
   23f8c:	4628      	mov	r0, r5
   23f8e:	47b8      	blx	r7
   23f90:	3001      	adds	r0, #1
   23f92:	d10c      	bne.n	23fae <_printf_float+0x422>
   23f94:	e655      	b.n	23c42 <_printf_float+0xb6>
   23f96:	2301      	movs	r3, #1
   23f98:	465a      	mov	r2, fp
   23f9a:	4631      	mov	r1, r6
   23f9c:	4628      	mov	r0, r5
   23f9e:	47b8      	blx	r7
   23fa0:	3001      	adds	r0, #1
   23fa2:	f43f ae4e 	beq.w	23c42 <_printf_float+0xb6>
   23fa6:	f108 0801 	add.w	r8, r8, #1
   23faa:	45d0      	cmp	r8, sl
   23fac:	dbf3      	blt.n	23f96 <_printf_float+0x40a>
   23fae:	464b      	mov	r3, r9
   23fb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   23fb4:	e6e0      	b.n	23d78 <_printf_float+0x1ec>
   23fb6:	f04f 0800 	mov.w	r8, #0
   23fba:	f104 0b1a 	add.w	fp, r4, #26
   23fbe:	e7f4      	b.n	23faa <_printf_float+0x41e>
   23fc0:	2301      	movs	r3, #1
   23fc2:	4642      	mov	r2, r8
   23fc4:	e7e1      	b.n	23f8a <_printf_float+0x3fe>
   23fc6:	2301      	movs	r3, #1
   23fc8:	464a      	mov	r2, r9
   23fca:	4631      	mov	r1, r6
   23fcc:	4628      	mov	r0, r5
   23fce:	47b8      	blx	r7
   23fd0:	3001      	adds	r0, #1
   23fd2:	f43f ae36 	beq.w	23c42 <_printf_float+0xb6>
   23fd6:	f108 0801 	add.w	r8, r8, #1
   23fda:	68e3      	ldr	r3, [r4, #12]
   23fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23fde:	1a5b      	subs	r3, r3, r1
   23fe0:	4543      	cmp	r3, r8
   23fe2:	dcf0      	bgt.n	23fc6 <_printf_float+0x43a>
   23fe4:	e6fd      	b.n	23de2 <_printf_float+0x256>
   23fe6:	f04f 0800 	mov.w	r8, #0
   23fea:	f104 0919 	add.w	r9, r4, #25
   23fee:	e7f4      	b.n	23fda <_printf_float+0x44e>

00023ff0 <_printf_i>:
   23ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23ff4:	7e0f      	ldrb	r7, [r1, #24]
   23ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23ff8:	2f78      	cmp	r7, #120	; 0x78
   23ffa:	4691      	mov	r9, r2
   23ffc:	4680      	mov	r8, r0
   23ffe:	460c      	mov	r4, r1
   24000:	469a      	mov	sl, r3
   24002:	f101 0243 	add.w	r2, r1, #67	; 0x43
   24006:	d807      	bhi.n	24018 <_printf_i+0x28>
   24008:	2f62      	cmp	r7, #98	; 0x62
   2400a:	d80a      	bhi.n	24022 <_printf_i+0x32>
   2400c:	2f00      	cmp	r7, #0
   2400e:	f000 80e0 	beq.w	241d2 <_printf_i+0x1e2>
   24012:	2f58      	cmp	r7, #88	; 0x58
   24014:	f000 80bb 	beq.w	2418e <_printf_i+0x19e>
   24018:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2401c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   24020:	e03a      	b.n	24098 <_printf_i+0xa8>
   24022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   24026:	2b15      	cmp	r3, #21
   24028:	d8f6      	bhi.n	24018 <_printf_i+0x28>
   2402a:	a101      	add	r1, pc, #4	; (adr r1, 24030 <_printf_i+0x40>)
   2402c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   24030:	00024089 	.word	0x00024089
   24034:	0002409d 	.word	0x0002409d
   24038:	00024019 	.word	0x00024019
   2403c:	00024019 	.word	0x00024019
   24040:	00024019 	.word	0x00024019
   24044:	00024019 	.word	0x00024019
   24048:	0002409d 	.word	0x0002409d
   2404c:	00024019 	.word	0x00024019
   24050:	00024019 	.word	0x00024019
   24054:	00024019 	.word	0x00024019
   24058:	00024019 	.word	0x00024019
   2405c:	000241b9 	.word	0x000241b9
   24060:	0002412d 	.word	0x0002412d
   24064:	0002416f 	.word	0x0002416f
   24068:	00024019 	.word	0x00024019
   2406c:	00024019 	.word	0x00024019
   24070:	000241db 	.word	0x000241db
   24074:	00024019 	.word	0x00024019
   24078:	0002412d 	.word	0x0002412d
   2407c:	00024019 	.word	0x00024019
   24080:	00024019 	.word	0x00024019
   24084:	00024177 	.word	0x00024177
   24088:	682b      	ldr	r3, [r5, #0]
   2408a:	1d1a      	adds	r2, r3, #4
   2408c:	681b      	ldr	r3, [r3, #0]
   2408e:	602a      	str	r2, [r5, #0]
   24090:	f104 0642 	add.w	r6, r4, #66	; 0x42
   24094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   24098:	2301      	movs	r3, #1
   2409a:	e0ab      	b.n	241f4 <_printf_i+0x204>
   2409c:	6823      	ldr	r3, [r4, #0]
   2409e:	6829      	ldr	r1, [r5, #0]
   240a0:	061f      	lsls	r7, r3, #24
   240a2:	f101 0004 	add.w	r0, r1, #4
   240a6:	6028      	str	r0, [r5, #0]
   240a8:	d501      	bpl.n	240ae <_printf_i+0xbe>
   240aa:	680d      	ldr	r5, [r1, #0]
   240ac:	e003      	b.n	240b6 <_printf_i+0xc6>
   240ae:	065e      	lsls	r6, r3, #25
   240b0:	d5fb      	bpl.n	240aa <_printf_i+0xba>
   240b2:	f9b1 5000 	ldrsh.w	r5, [r1]
   240b6:	6861      	ldr	r1, [r4, #4]
   240b8:	2d00      	cmp	r5, #0
   240ba:	da7a      	bge.n	241b2 <_printf_i+0x1c2>
   240bc:	202d      	movs	r0, #45	; 0x2d
   240be:	2900      	cmp	r1, #0
   240c0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   240c4:	60a1      	str	r1, [r4, #8]
   240c6:	da2d      	bge.n	24124 <_printf_i+0x134>
   240c8:	485e      	ldr	r0, [pc, #376]	; (24244 <_printf_i+0x254>)
   240ca:	426d      	negs	r5, r5
   240cc:	230a      	movs	r3, #10
   240ce:	4616      	mov	r6, r2
   240d0:	fbb5 f1f3 	udiv	r1, r5, r3
   240d4:	fb03 5711 	mls	r7, r3, r1, r5
   240d8:	5dc7      	ldrb	r7, [r0, r7]
   240da:	f806 7d01 	strb.w	r7, [r6, #-1]!
   240de:	462f      	mov	r7, r5
   240e0:	42bb      	cmp	r3, r7
   240e2:	460d      	mov	r5, r1
   240e4:	d9f4      	bls.n	240d0 <_printf_i+0xe0>
   240e6:	2b08      	cmp	r3, #8
   240e8:	d10b      	bne.n	24102 <_printf_i+0x112>
   240ea:	6823      	ldr	r3, [r4, #0]
   240ec:	07df      	lsls	r7, r3, #31
   240ee:	d508      	bpl.n	24102 <_printf_i+0x112>
   240f0:	6923      	ldr	r3, [r4, #16]
   240f2:	6861      	ldr	r1, [r4, #4]
   240f4:	4299      	cmp	r1, r3
   240f6:	bfde      	ittt	le
   240f8:	2330      	movle	r3, #48	; 0x30
   240fa:	f806 3c01 	strble.w	r3, [r6, #-1]
   240fe:	f106 36ff 	addle.w	r6, r6, #4294967295
   24102:	1b92      	subs	r2, r2, r6
   24104:	6122      	str	r2, [r4, #16]
   24106:	f8cd a000 	str.w	sl, [sp]
   2410a:	464b      	mov	r3, r9
   2410c:	aa03      	add	r2, sp, #12
   2410e:	4621      	mov	r1, r4
   24110:	4640      	mov	r0, r8
   24112:	f00a f993 	bl	2e43c <_printf_common>
   24116:	3001      	adds	r0, #1
   24118:	d171      	bne.n	241fe <_printf_i+0x20e>
   2411a:	f04f 30ff 	mov.w	r0, #4294967295
   2411e:	b004      	add	sp, #16
   24120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24124:	f023 0304 	bic.w	r3, r3, #4
   24128:	6023      	str	r3, [r4, #0]
   2412a:	e7cd      	b.n	240c8 <_printf_i+0xd8>
   2412c:	682b      	ldr	r3, [r5, #0]
   2412e:	6820      	ldr	r0, [r4, #0]
   24130:	1d19      	adds	r1, r3, #4
   24132:	6029      	str	r1, [r5, #0]
   24134:	0605      	lsls	r5, r0, #24
   24136:	d501      	bpl.n	2413c <_printf_i+0x14c>
   24138:	681d      	ldr	r5, [r3, #0]
   2413a:	e002      	b.n	24142 <_printf_i+0x152>
   2413c:	0641      	lsls	r1, r0, #25
   2413e:	d5fb      	bpl.n	24138 <_printf_i+0x148>
   24140:	881d      	ldrh	r5, [r3, #0]
   24142:	4840      	ldr	r0, [pc, #256]	; (24244 <_printf_i+0x254>)
   24144:	2f6f      	cmp	r7, #111	; 0x6f
   24146:	bf14      	ite	ne
   24148:	230a      	movne	r3, #10
   2414a:	2308      	moveq	r3, #8
   2414c:	2100      	movs	r1, #0
   2414e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   24152:	6866      	ldr	r6, [r4, #4]
   24154:	60a6      	str	r6, [r4, #8]
   24156:	2e00      	cmp	r6, #0
   24158:	dbb9      	blt.n	240ce <_printf_i+0xde>
   2415a:	6821      	ldr	r1, [r4, #0]
   2415c:	f021 0104 	bic.w	r1, r1, #4
   24160:	6021      	str	r1, [r4, #0]
   24162:	2d00      	cmp	r5, #0
   24164:	d1b3      	bne.n	240ce <_printf_i+0xde>
   24166:	2e00      	cmp	r6, #0
   24168:	d1b1      	bne.n	240ce <_printf_i+0xde>
   2416a:	4616      	mov	r6, r2
   2416c:	e7bb      	b.n	240e6 <_printf_i+0xf6>
   2416e:	6823      	ldr	r3, [r4, #0]
   24170:	f043 0320 	orr.w	r3, r3, #32
   24174:	6023      	str	r3, [r4, #0]
   24176:	4834      	ldr	r0, [pc, #208]	; (24248 <_printf_i+0x258>)
   24178:	2778      	movs	r7, #120	; 0x78
   2417a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2417e:	6829      	ldr	r1, [r5, #0]
   24180:	6823      	ldr	r3, [r4, #0]
   24182:	1d0e      	adds	r6, r1, #4
   24184:	602e      	str	r6, [r5, #0]
   24186:	061e      	lsls	r6, r3, #24
   24188:	d503      	bpl.n	24192 <_printf_i+0x1a2>
   2418a:	680d      	ldr	r5, [r1, #0]
   2418c:	e004      	b.n	24198 <_printf_i+0x1a8>
   2418e:	482d      	ldr	r0, [pc, #180]	; (24244 <_printf_i+0x254>)
   24190:	e7f3      	b.n	2417a <_printf_i+0x18a>
   24192:	065d      	lsls	r5, r3, #25
   24194:	d5f9      	bpl.n	2418a <_printf_i+0x19a>
   24196:	880d      	ldrh	r5, [r1, #0]
   24198:	07d9      	lsls	r1, r3, #31
   2419a:	bf44      	itt	mi
   2419c:	f043 0320 	orrmi.w	r3, r3, #32
   241a0:	6023      	strmi	r3, [r4, #0]
   241a2:	b10d      	cbz	r5, 241a8 <_printf_i+0x1b8>
   241a4:	2310      	movs	r3, #16
   241a6:	e7d1      	b.n	2414c <_printf_i+0x15c>
   241a8:	6823      	ldr	r3, [r4, #0]
   241aa:	f023 0320 	bic.w	r3, r3, #32
   241ae:	6023      	str	r3, [r4, #0]
   241b0:	e7f8      	b.n	241a4 <_printf_i+0x1b4>
   241b2:	4824      	ldr	r0, [pc, #144]	; (24244 <_printf_i+0x254>)
   241b4:	230a      	movs	r3, #10
   241b6:	e7cc      	b.n	24152 <_printf_i+0x162>
   241b8:	682b      	ldr	r3, [r5, #0]
   241ba:	6826      	ldr	r6, [r4, #0]
   241bc:	6961      	ldr	r1, [r4, #20]
   241be:	1d18      	adds	r0, r3, #4
   241c0:	6028      	str	r0, [r5, #0]
   241c2:	0635      	lsls	r5, r6, #24
   241c4:	681b      	ldr	r3, [r3, #0]
   241c6:	d501      	bpl.n	241cc <_printf_i+0x1dc>
   241c8:	6019      	str	r1, [r3, #0]
   241ca:	e002      	b.n	241d2 <_printf_i+0x1e2>
   241cc:	0670      	lsls	r0, r6, #25
   241ce:	d5fb      	bpl.n	241c8 <_printf_i+0x1d8>
   241d0:	8019      	strh	r1, [r3, #0]
   241d2:	2300      	movs	r3, #0
   241d4:	6123      	str	r3, [r4, #16]
   241d6:	4616      	mov	r6, r2
   241d8:	e795      	b.n	24106 <_printf_i+0x116>
   241da:	682b      	ldr	r3, [r5, #0]
   241dc:	1d1a      	adds	r2, r3, #4
   241de:	602a      	str	r2, [r5, #0]
   241e0:	681e      	ldr	r6, [r3, #0]
   241e2:	6862      	ldr	r2, [r4, #4]
   241e4:	2100      	movs	r1, #0
   241e6:	4630      	mov	r0, r6
   241e8:	f7db ff8a 	bl	100 <memchr>
   241ec:	b108      	cbz	r0, 241f2 <_printf_i+0x202>
   241ee:	1b80      	subs	r0, r0, r6
   241f0:	6060      	str	r0, [r4, #4]
   241f2:	6863      	ldr	r3, [r4, #4]
   241f4:	6123      	str	r3, [r4, #16]
   241f6:	2300      	movs	r3, #0
   241f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   241fc:	e783      	b.n	24106 <_printf_i+0x116>
   241fe:	6923      	ldr	r3, [r4, #16]
   24200:	4632      	mov	r2, r6
   24202:	4649      	mov	r1, r9
   24204:	4640      	mov	r0, r8
   24206:	47d0      	blx	sl
   24208:	3001      	adds	r0, #1
   2420a:	d086      	beq.n	2411a <_printf_i+0x12a>
   2420c:	6823      	ldr	r3, [r4, #0]
   2420e:	079b      	lsls	r3, r3, #30
   24210:	d414      	bmi.n	2423c <_printf_i+0x24c>
   24212:	68e0      	ldr	r0, [r4, #12]
   24214:	9b03      	ldr	r3, [sp, #12]
   24216:	4298      	cmp	r0, r3
   24218:	bfb8      	it	lt
   2421a:	4618      	movlt	r0, r3
   2421c:	e77f      	b.n	2411e <_printf_i+0x12e>
   2421e:	2301      	movs	r3, #1
   24220:	4632      	mov	r2, r6
   24222:	4649      	mov	r1, r9
   24224:	4640      	mov	r0, r8
   24226:	47d0      	blx	sl
   24228:	3001      	adds	r0, #1
   2422a:	f43f af76 	beq.w	2411a <_printf_i+0x12a>
   2422e:	3501      	adds	r5, #1
   24230:	68e3      	ldr	r3, [r4, #12]
   24232:	9903      	ldr	r1, [sp, #12]
   24234:	1a5b      	subs	r3, r3, r1
   24236:	42ab      	cmp	r3, r5
   24238:	dcf1      	bgt.n	2421e <_printf_i+0x22e>
   2423a:	e7ea      	b.n	24212 <_printf_i+0x222>
   2423c:	2500      	movs	r5, #0
   2423e:	f104 0619 	add.w	r6, r4, #25
   24242:	e7f5      	b.n	24230 <_printf_i+0x240>
   24244:	00031be3 	.word	0x00031be3
   24248:	00031bf4 	.word	0x00031bf4

0002424c <_sbrk_r>:
   2424c:	b538      	push	{r3, r4, r5, lr}
   2424e:	4d06      	ldr	r5, [pc, #24]	; (24268 <_sbrk_r+0x1c>)
   24250:	2300      	movs	r3, #0
   24252:	4604      	mov	r4, r0
   24254:	4608      	mov	r0, r1
   24256:	602b      	str	r3, [r5, #0]
   24258:	f7f2 fbd4 	bl	16a04 <_sbrk>
   2425c:	1c43      	adds	r3, r0, #1
   2425e:	d102      	bne.n	24266 <_sbrk_r+0x1a>
   24260:	682b      	ldr	r3, [r5, #0]
   24262:	b103      	cbz	r3, 24266 <_sbrk_r+0x1a>
   24264:	6023      	str	r3, [r4, #0]
   24266:	bd38      	pop	{r3, r4, r5, pc}
   24268:	20004094 	.word	0x20004094

0002426c <_localeconv_r>:
   2426c:	4800      	ldr	r0, [pc, #0]	; (24270 <_localeconv_r+0x4>)
   2426e:	4770      	bx	lr
   24270:	200009d0 	.word	0x200009d0

00024274 <__malloc_lock>:
   24274:	4801      	ldr	r0, [pc, #4]	; (2427c <__malloc_lock+0x8>)
   24276:	f005 ba05 	b.w	29684 <__retarget_lock_acquire_recursive>
   2427a:	bf00      	nop
   2427c:	20000b68 	.word	0x20000b68

00024280 <__malloc_unlock>:
   24280:	4801      	ldr	r0, [pc, #4]	; (24288 <__malloc_unlock+0x8>)
   24282:	f005 ba07 	b.w	29694 <__retarget_lock_release_recursive>
   24286:	bf00      	nop
   24288:	20000b68 	.word	0x20000b68

0002428c <_Balloc>:
   2428c:	b570      	push	{r4, r5, r6, lr}
   2428e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   24290:	4604      	mov	r4, r0
   24292:	460d      	mov	r5, r1
   24294:	b976      	cbnz	r6, 242b4 <_Balloc+0x28>
   24296:	2010      	movs	r0, #16
   24298:	f7ff fbcc 	bl	23a34 <malloc>
   2429c:	4602      	mov	r2, r0
   2429e:	6260      	str	r0, [r4, #36]	; 0x24
   242a0:	b920      	cbnz	r0, 242ac <_Balloc+0x20>
   242a2:	4b18      	ldr	r3, [pc, #96]	; (24304 <_Balloc+0x78>)
   242a4:	4818      	ldr	r0, [pc, #96]	; (24308 <_Balloc+0x7c>)
   242a6:	2166      	movs	r1, #102	; 0x66
   242a8:	f000 fb0a 	bl	248c0 <__assert_func>
   242ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   242b0:	6006      	str	r6, [r0, #0]
   242b2:	60c6      	str	r6, [r0, #12]
   242b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   242b6:	68f3      	ldr	r3, [r6, #12]
   242b8:	b183      	cbz	r3, 242dc <_Balloc+0x50>
   242ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   242bc:	68db      	ldr	r3, [r3, #12]
   242be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   242c2:	b9b8      	cbnz	r0, 242f4 <_Balloc+0x68>
   242c4:	2101      	movs	r1, #1
   242c6:	fa01 f605 	lsl.w	r6, r1, r5
   242ca:	1d72      	adds	r2, r6, #5
   242cc:	0092      	lsls	r2, r2, #2
   242ce:	4620      	mov	r0, r4
   242d0:	f00a fa44 	bl	2e75c <_calloc_r>
   242d4:	b160      	cbz	r0, 242f0 <_Balloc+0x64>
   242d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   242da:	e00e      	b.n	242fa <_Balloc+0x6e>
   242dc:	2221      	movs	r2, #33	; 0x21
   242de:	2104      	movs	r1, #4
   242e0:	4620      	mov	r0, r4
   242e2:	f00a fa3b 	bl	2e75c <_calloc_r>
   242e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   242e8:	60f0      	str	r0, [r6, #12]
   242ea:	68db      	ldr	r3, [r3, #12]
   242ec:	2b00      	cmp	r3, #0
   242ee:	d1e4      	bne.n	242ba <_Balloc+0x2e>
   242f0:	2000      	movs	r0, #0
   242f2:	bd70      	pop	{r4, r5, r6, pc}
   242f4:	6802      	ldr	r2, [r0, #0]
   242f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   242fa:	2300      	movs	r3, #0
   242fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   24300:	e7f7      	b.n	242f2 <_Balloc+0x66>
   24302:	bf00      	nop
   24304:	00031c12 	.word	0x00031c12
   24308:	00031cae 	.word	0x00031cae

0002430c <_Bfree>:
   2430c:	b570      	push	{r4, r5, r6, lr}
   2430e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   24310:	4605      	mov	r5, r0
   24312:	460c      	mov	r4, r1
   24314:	b976      	cbnz	r6, 24334 <_Bfree+0x28>
   24316:	2010      	movs	r0, #16
   24318:	f7ff fb8c 	bl	23a34 <malloc>
   2431c:	4602      	mov	r2, r0
   2431e:	6268      	str	r0, [r5, #36]	; 0x24
   24320:	b920      	cbnz	r0, 2432c <_Bfree+0x20>
   24322:	4b09      	ldr	r3, [pc, #36]	; (24348 <_Bfree+0x3c>)
   24324:	4809      	ldr	r0, [pc, #36]	; (2434c <_Bfree+0x40>)
   24326:	218a      	movs	r1, #138	; 0x8a
   24328:	f000 faca 	bl	248c0 <__assert_func>
   2432c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   24330:	6006      	str	r6, [r0, #0]
   24332:	60c6      	str	r6, [r0, #12]
   24334:	b13c      	cbz	r4, 24346 <_Bfree+0x3a>
   24336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   24338:	6862      	ldr	r2, [r4, #4]
   2433a:	68db      	ldr	r3, [r3, #12]
   2433c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   24340:	6021      	str	r1, [r4, #0]
   24342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   24346:	bd70      	pop	{r4, r5, r6, pc}
   24348:	00031c12 	.word	0x00031c12
   2434c:	00031cae 	.word	0x00031cae

00024350 <__multadd>:
   24350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24354:	690d      	ldr	r5, [r1, #16]
   24356:	4607      	mov	r7, r0
   24358:	460c      	mov	r4, r1
   2435a:	461e      	mov	r6, r3
   2435c:	f101 0c14 	add.w	ip, r1, #20
   24360:	2000      	movs	r0, #0
   24362:	f8dc 3000 	ldr.w	r3, [ip]
   24366:	b299      	uxth	r1, r3
   24368:	fb02 6101 	mla	r1, r2, r1, r6
   2436c:	0c1e      	lsrs	r6, r3, #16
   2436e:	0c0b      	lsrs	r3, r1, #16
   24370:	fb02 3306 	mla	r3, r2, r6, r3
   24374:	b289      	uxth	r1, r1
   24376:	3001      	adds	r0, #1
   24378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   2437c:	4285      	cmp	r5, r0
   2437e:	f84c 1b04 	str.w	r1, [ip], #4
   24382:	ea4f 4613 	mov.w	r6, r3, lsr #16
   24386:	dcec      	bgt.n	24362 <__multadd+0x12>
   24388:	b30e      	cbz	r6, 243ce <__multadd+0x7e>
   2438a:	68a3      	ldr	r3, [r4, #8]
   2438c:	42ab      	cmp	r3, r5
   2438e:	dc19      	bgt.n	243c4 <__multadd+0x74>
   24390:	6861      	ldr	r1, [r4, #4]
   24392:	4638      	mov	r0, r7
   24394:	3101      	adds	r1, #1
   24396:	f7ff ff79 	bl	2428c <_Balloc>
   2439a:	4680      	mov	r8, r0
   2439c:	b928      	cbnz	r0, 243aa <__multadd+0x5a>
   2439e:	4602      	mov	r2, r0
   243a0:	4b0c      	ldr	r3, [pc, #48]	; (243d4 <__multadd+0x84>)
   243a2:	480d      	ldr	r0, [pc, #52]	; (243d8 <__multadd+0x88>)
   243a4:	21b5      	movs	r1, #181	; 0xb5
   243a6:	f000 fa8b 	bl	248c0 <__assert_func>
   243aa:	6922      	ldr	r2, [r4, #16]
   243ac:	3202      	adds	r2, #2
   243ae:	f104 010c 	add.w	r1, r4, #12
   243b2:	0092      	lsls	r2, r2, #2
   243b4:	300c      	adds	r0, #12
   243b6:	f009 ff88 	bl	2e2ca <memcpy>
   243ba:	4621      	mov	r1, r4
   243bc:	4638      	mov	r0, r7
   243be:	f7ff ffa5 	bl	2430c <_Bfree>
   243c2:	4644      	mov	r4, r8
   243c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   243c8:	3501      	adds	r5, #1
   243ca:	615e      	str	r6, [r3, #20]
   243cc:	6125      	str	r5, [r4, #16]
   243ce:	4620      	mov	r0, r4
   243d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   243d4:	00031c9d 	.word	0x00031c9d
   243d8:	00031cae 	.word	0x00031cae

000243dc <__i2b>:
   243dc:	b510      	push	{r4, lr}
   243de:	460c      	mov	r4, r1
   243e0:	2101      	movs	r1, #1
   243e2:	f7ff ff53 	bl	2428c <_Balloc>
   243e6:	4602      	mov	r2, r0
   243e8:	b928      	cbnz	r0, 243f6 <__i2b+0x1a>
   243ea:	4b05      	ldr	r3, [pc, #20]	; (24400 <__i2b+0x24>)
   243ec:	4805      	ldr	r0, [pc, #20]	; (24404 <__i2b+0x28>)
   243ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
   243f2:	f000 fa65 	bl	248c0 <__assert_func>
   243f6:	2301      	movs	r3, #1
   243f8:	6144      	str	r4, [r0, #20]
   243fa:	6103      	str	r3, [r0, #16]
   243fc:	bd10      	pop	{r4, pc}
   243fe:	bf00      	nop
   24400:	00031c9d 	.word	0x00031c9d
   24404:	00031cae 	.word	0x00031cae

00024408 <__multiply>:
   24408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2440c:	4614      	mov	r4, r2
   2440e:	690a      	ldr	r2, [r1, #16]
   24410:	6923      	ldr	r3, [r4, #16]
   24412:	429a      	cmp	r2, r3
   24414:	bfa8      	it	ge
   24416:	4623      	movge	r3, r4
   24418:	460f      	mov	r7, r1
   2441a:	bfa4      	itt	ge
   2441c:	460c      	movge	r4, r1
   2441e:	461f      	movge	r7, r3
   24420:	f8d4 a010 	ldr.w	sl, [r4, #16]
   24424:	f8d7 9010 	ldr.w	r9, [r7, #16]
   24428:	68a3      	ldr	r3, [r4, #8]
   2442a:	6861      	ldr	r1, [r4, #4]
   2442c:	eb0a 0609 	add.w	r6, sl, r9
   24430:	42b3      	cmp	r3, r6
   24432:	b085      	sub	sp, #20
   24434:	bfb8      	it	lt
   24436:	3101      	addlt	r1, #1
   24438:	f7ff ff28 	bl	2428c <_Balloc>
   2443c:	b930      	cbnz	r0, 2444c <__multiply+0x44>
   2443e:	4602      	mov	r2, r0
   24440:	4b44      	ldr	r3, [pc, #272]	; (24554 <__multiply+0x14c>)
   24442:	4845      	ldr	r0, [pc, #276]	; (24558 <__multiply+0x150>)
   24444:	f240 115d 	movw	r1, #349	; 0x15d
   24448:	f000 fa3a 	bl	248c0 <__assert_func>
   2444c:	f100 0514 	add.w	r5, r0, #20
   24450:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   24454:	462b      	mov	r3, r5
   24456:	2200      	movs	r2, #0
   24458:	4543      	cmp	r3, r8
   2445a:	d321      	bcc.n	244a0 <__multiply+0x98>
   2445c:	f107 0114 	add.w	r1, r7, #20
   24460:	f104 0214 	add.w	r2, r4, #20
   24464:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   24468:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   2446c:	9302      	str	r3, [sp, #8]
   2446e:	1b13      	subs	r3, r2, r4
   24470:	3b15      	subs	r3, #21
   24472:	f023 0303 	bic.w	r3, r3, #3
   24476:	3304      	adds	r3, #4
   24478:	f104 0715 	add.w	r7, r4, #21
   2447c:	42ba      	cmp	r2, r7
   2447e:	bf38      	it	cc
   24480:	2304      	movcc	r3, #4
   24482:	9301      	str	r3, [sp, #4]
   24484:	9b02      	ldr	r3, [sp, #8]
   24486:	9103      	str	r1, [sp, #12]
   24488:	428b      	cmp	r3, r1
   2448a:	d80c      	bhi.n	244a6 <__multiply+0x9e>
   2448c:	2e00      	cmp	r6, #0
   2448e:	dd03      	ble.n	24498 <__multiply+0x90>
   24490:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   24494:	2b00      	cmp	r3, #0
   24496:	d05b      	beq.n	24550 <__multiply+0x148>
   24498:	6106      	str	r6, [r0, #16]
   2449a:	b005      	add	sp, #20
   2449c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244a0:	f843 2b04 	str.w	r2, [r3], #4
   244a4:	e7d8      	b.n	24458 <__multiply+0x50>
   244a6:	f8b1 a000 	ldrh.w	sl, [r1]
   244aa:	f1ba 0f00 	cmp.w	sl, #0
   244ae:	d024      	beq.n	244fa <__multiply+0xf2>
   244b0:	f104 0e14 	add.w	lr, r4, #20
   244b4:	46a9      	mov	r9, r5
   244b6:	f04f 0c00 	mov.w	ip, #0
   244ba:	f85e 7b04 	ldr.w	r7, [lr], #4
   244be:	f8d9 3000 	ldr.w	r3, [r9]
   244c2:	fa1f fb87 	uxth.w	fp, r7
   244c6:	b29b      	uxth	r3, r3
   244c8:	fb0a 330b 	mla	r3, sl, fp, r3
   244cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   244d0:	f8d9 7000 	ldr.w	r7, [r9]
   244d4:	4463      	add	r3, ip
   244d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   244da:	fb0a c70b 	mla	r7, sl, fp, ip
   244de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   244e2:	b29b      	uxth	r3, r3
   244e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   244e8:	4572      	cmp	r2, lr
   244ea:	f849 3b04 	str.w	r3, [r9], #4
   244ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   244f2:	d8e2      	bhi.n	244ba <__multiply+0xb2>
   244f4:	9b01      	ldr	r3, [sp, #4]
   244f6:	f845 c003 	str.w	ip, [r5, r3]
   244fa:	9b03      	ldr	r3, [sp, #12]
   244fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   24500:	3104      	adds	r1, #4
   24502:	f1b9 0f00 	cmp.w	r9, #0
   24506:	d021      	beq.n	2454c <__multiply+0x144>
   24508:	682b      	ldr	r3, [r5, #0]
   2450a:	f104 0c14 	add.w	ip, r4, #20
   2450e:	46ae      	mov	lr, r5
   24510:	f04f 0a00 	mov.w	sl, #0
   24514:	f8bc b000 	ldrh.w	fp, [ip]
   24518:	f8be 7002 	ldrh.w	r7, [lr, #2]
   2451c:	fb09 770b 	mla	r7, r9, fp, r7
   24520:	4457      	add	r7, sl
   24522:	b29b      	uxth	r3, r3
   24524:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   24528:	f84e 3b04 	str.w	r3, [lr], #4
   2452c:	f85c 3b04 	ldr.w	r3, [ip], #4
   24530:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   24534:	f8be 3000 	ldrh.w	r3, [lr]
   24538:	fb09 330a 	mla	r3, r9, sl, r3
   2453c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   24540:	4562      	cmp	r2, ip
   24542:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   24546:	d8e5      	bhi.n	24514 <__multiply+0x10c>
   24548:	9f01      	ldr	r7, [sp, #4]
   2454a:	51eb      	str	r3, [r5, r7]
   2454c:	3504      	adds	r5, #4
   2454e:	e799      	b.n	24484 <__multiply+0x7c>
   24550:	3e01      	subs	r6, #1
   24552:	e79b      	b.n	2448c <__multiply+0x84>
   24554:	00031c9d 	.word	0x00031c9d
   24558:	00031cae 	.word	0x00031cae

0002455c <__pow5mult>:
   2455c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24560:	4615      	mov	r5, r2
   24562:	f012 0203 	ands.w	r2, r2, #3
   24566:	4607      	mov	r7, r0
   24568:	460e      	mov	r6, r1
   2456a:	d007      	beq.n	2457c <__pow5mult+0x20>
   2456c:	4c25      	ldr	r4, [pc, #148]	; (24604 <__pow5mult+0xa8>)
   2456e:	3a01      	subs	r2, #1
   24570:	2300      	movs	r3, #0
   24572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   24576:	f7ff feeb 	bl	24350 <__multadd>
   2457a:	4606      	mov	r6, r0
   2457c:	10ad      	asrs	r5, r5, #2
   2457e:	d03d      	beq.n	245fc <__pow5mult+0xa0>
   24580:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   24582:	b97c      	cbnz	r4, 245a4 <__pow5mult+0x48>
   24584:	2010      	movs	r0, #16
   24586:	f7ff fa55 	bl	23a34 <malloc>
   2458a:	4602      	mov	r2, r0
   2458c:	6278      	str	r0, [r7, #36]	; 0x24
   2458e:	b928      	cbnz	r0, 2459c <__pow5mult+0x40>
   24590:	4b1d      	ldr	r3, [pc, #116]	; (24608 <__pow5mult+0xac>)
   24592:	481e      	ldr	r0, [pc, #120]	; (2460c <__pow5mult+0xb0>)
   24594:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   24598:	f000 f992 	bl	248c0 <__assert_func>
   2459c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   245a0:	6004      	str	r4, [r0, #0]
   245a2:	60c4      	str	r4, [r0, #12]
   245a4:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   245a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   245ac:	b94c      	cbnz	r4, 245c2 <__pow5mult+0x66>
   245ae:	f240 2171 	movw	r1, #625	; 0x271
   245b2:	4638      	mov	r0, r7
   245b4:	f7ff ff12 	bl	243dc <__i2b>
   245b8:	2300      	movs	r3, #0
   245ba:	f8c8 0008 	str.w	r0, [r8, #8]
   245be:	4604      	mov	r4, r0
   245c0:	6003      	str	r3, [r0, #0]
   245c2:	f04f 0900 	mov.w	r9, #0
   245c6:	07eb      	lsls	r3, r5, #31
   245c8:	d50a      	bpl.n	245e0 <__pow5mult+0x84>
   245ca:	4631      	mov	r1, r6
   245cc:	4622      	mov	r2, r4
   245ce:	4638      	mov	r0, r7
   245d0:	f7ff ff1a 	bl	24408 <__multiply>
   245d4:	4631      	mov	r1, r6
   245d6:	4680      	mov	r8, r0
   245d8:	4638      	mov	r0, r7
   245da:	f7ff fe97 	bl	2430c <_Bfree>
   245de:	4646      	mov	r6, r8
   245e0:	106d      	asrs	r5, r5, #1
   245e2:	d00b      	beq.n	245fc <__pow5mult+0xa0>
   245e4:	6820      	ldr	r0, [r4, #0]
   245e6:	b938      	cbnz	r0, 245f8 <__pow5mult+0x9c>
   245e8:	4622      	mov	r2, r4
   245ea:	4621      	mov	r1, r4
   245ec:	4638      	mov	r0, r7
   245ee:	f7ff ff0b 	bl	24408 <__multiply>
   245f2:	6020      	str	r0, [r4, #0]
   245f4:	f8c0 9000 	str.w	r9, [r0]
   245f8:	4604      	mov	r4, r0
   245fa:	e7e4      	b.n	245c6 <__pow5mult+0x6a>
   245fc:	4630      	mov	r0, r6
   245fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24602:	bf00      	nop
   24604:	000318dc 	.word	0x000318dc
   24608:	00031c12 	.word	0x00031c12
   2460c:	00031cae 	.word	0x00031cae

00024610 <__lshift>:
   24610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24614:	460c      	mov	r4, r1
   24616:	6849      	ldr	r1, [r1, #4]
   24618:	6923      	ldr	r3, [r4, #16]
   2461a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   2461e:	68a3      	ldr	r3, [r4, #8]
   24620:	4607      	mov	r7, r0
   24622:	4691      	mov	r9, r2
   24624:	ea4f 1a62 	mov.w	sl, r2, asr #5
   24628:	f108 0601 	add.w	r6, r8, #1
   2462c:	42b3      	cmp	r3, r6
   2462e:	db0b      	blt.n	24648 <__lshift+0x38>
   24630:	4638      	mov	r0, r7
   24632:	f7ff fe2b 	bl	2428c <_Balloc>
   24636:	4605      	mov	r5, r0
   24638:	b948      	cbnz	r0, 2464e <__lshift+0x3e>
   2463a:	4602      	mov	r2, r0
   2463c:	4b28      	ldr	r3, [pc, #160]	; (246e0 <__lshift+0xd0>)
   2463e:	4829      	ldr	r0, [pc, #164]	; (246e4 <__lshift+0xd4>)
   24640:	f240 11d9 	movw	r1, #473	; 0x1d9
   24644:	f000 f93c 	bl	248c0 <__assert_func>
   24648:	3101      	adds	r1, #1
   2464a:	005b      	lsls	r3, r3, #1
   2464c:	e7ee      	b.n	2462c <__lshift+0x1c>
   2464e:	2300      	movs	r3, #0
   24650:	f100 0114 	add.w	r1, r0, #20
   24654:	f100 0210 	add.w	r2, r0, #16
   24658:	4618      	mov	r0, r3
   2465a:	4553      	cmp	r3, sl
   2465c:	db33      	blt.n	246c6 <__lshift+0xb6>
   2465e:	6920      	ldr	r0, [r4, #16]
   24660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   24664:	f104 0314 	add.w	r3, r4, #20
   24668:	f019 091f 	ands.w	r9, r9, #31
   2466c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   24670:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   24674:	d02b      	beq.n	246ce <__lshift+0xbe>
   24676:	f1c9 0e20 	rsb	lr, r9, #32
   2467a:	468a      	mov	sl, r1
   2467c:	2200      	movs	r2, #0
   2467e:	6818      	ldr	r0, [r3, #0]
   24680:	fa00 f009 	lsl.w	r0, r0, r9
   24684:	4310      	orrs	r0, r2
   24686:	f84a 0b04 	str.w	r0, [sl], #4
   2468a:	f853 2b04 	ldr.w	r2, [r3], #4
   2468e:	459c      	cmp	ip, r3
   24690:	fa22 f20e 	lsr.w	r2, r2, lr
   24694:	d8f3      	bhi.n	2467e <__lshift+0x6e>
   24696:	ebac 0304 	sub.w	r3, ip, r4
   2469a:	3b15      	subs	r3, #21
   2469c:	f023 0303 	bic.w	r3, r3, #3
   246a0:	3304      	adds	r3, #4
   246a2:	f104 0015 	add.w	r0, r4, #21
   246a6:	4584      	cmp	ip, r0
   246a8:	bf38      	it	cc
   246aa:	2304      	movcc	r3, #4
   246ac:	50ca      	str	r2, [r1, r3]
   246ae:	b10a      	cbz	r2, 246b4 <__lshift+0xa4>
   246b0:	f108 0602 	add.w	r6, r8, #2
   246b4:	3e01      	subs	r6, #1
   246b6:	4638      	mov	r0, r7
   246b8:	612e      	str	r6, [r5, #16]
   246ba:	4621      	mov	r1, r4
   246bc:	f7ff fe26 	bl	2430c <_Bfree>
   246c0:	4628      	mov	r0, r5
   246c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   246c6:	f842 0f04 	str.w	r0, [r2, #4]!
   246ca:	3301      	adds	r3, #1
   246cc:	e7c5      	b.n	2465a <__lshift+0x4a>
   246ce:	3904      	subs	r1, #4
   246d0:	f853 2b04 	ldr.w	r2, [r3], #4
   246d4:	f841 2f04 	str.w	r2, [r1, #4]!
   246d8:	459c      	cmp	ip, r3
   246da:	d8f9      	bhi.n	246d0 <__lshift+0xc0>
   246dc:	e7ea      	b.n	246b4 <__lshift+0xa4>
   246de:	bf00      	nop
   246e0:	00031c9d 	.word	0x00031c9d
   246e4:	00031cae 	.word	0x00031cae

000246e8 <__mdiff>:
   246e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246ec:	4689      	mov	r9, r1
   246ee:	4606      	mov	r6, r0
   246f0:	4611      	mov	r1, r2
   246f2:	4648      	mov	r0, r9
   246f4:	4614      	mov	r4, r2
   246f6:	f00a f816 	bl	2e726 <__mcmp>
   246fa:	1e05      	subs	r5, r0, #0
   246fc:	d112      	bne.n	24724 <__mdiff+0x3c>
   246fe:	4629      	mov	r1, r5
   24700:	4630      	mov	r0, r6
   24702:	f7ff fdc3 	bl	2428c <_Balloc>
   24706:	4602      	mov	r2, r0
   24708:	b928      	cbnz	r0, 24716 <__mdiff+0x2e>
   2470a:	4b3f      	ldr	r3, [pc, #252]	; (24808 <__mdiff+0x120>)
   2470c:	f240 2132 	movw	r1, #562	; 0x232
   24710:	483e      	ldr	r0, [pc, #248]	; (2480c <__mdiff+0x124>)
   24712:	f000 f8d5 	bl	248c0 <__assert_func>
   24716:	2301      	movs	r3, #1
   24718:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2471c:	4610      	mov	r0, r2
   2471e:	b003      	add	sp, #12
   24720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24724:	bfbc      	itt	lt
   24726:	464b      	movlt	r3, r9
   24728:	46a1      	movlt	r9, r4
   2472a:	4630      	mov	r0, r6
   2472c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   24730:	bfba      	itte	lt
   24732:	461c      	movlt	r4, r3
   24734:	2501      	movlt	r5, #1
   24736:	2500      	movge	r5, #0
   24738:	f7ff fda8 	bl	2428c <_Balloc>
   2473c:	4602      	mov	r2, r0
   2473e:	b918      	cbnz	r0, 24748 <__mdiff+0x60>
   24740:	4b31      	ldr	r3, [pc, #196]	; (24808 <__mdiff+0x120>)
   24742:	f44f 7110 	mov.w	r1, #576	; 0x240
   24746:	e7e3      	b.n	24710 <__mdiff+0x28>
   24748:	f8d9 7010 	ldr.w	r7, [r9, #16]
   2474c:	6926      	ldr	r6, [r4, #16]
   2474e:	60c5      	str	r5, [r0, #12]
   24750:	f109 0310 	add.w	r3, r9, #16
   24754:	f109 0514 	add.w	r5, r9, #20
   24758:	f104 0e14 	add.w	lr, r4, #20
   2475c:	f100 0b14 	add.w	fp, r0, #20
   24760:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   24764:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   24768:	9301      	str	r3, [sp, #4]
   2476a:	46d9      	mov	r9, fp
   2476c:	f04f 0c00 	mov.w	ip, #0
   24770:	9b01      	ldr	r3, [sp, #4]
   24772:	f85e 0b04 	ldr.w	r0, [lr], #4
   24776:	f853 af04 	ldr.w	sl, [r3, #4]!
   2477a:	9301      	str	r3, [sp, #4]
   2477c:	fa1f f38a 	uxth.w	r3, sl
   24780:	4619      	mov	r1, r3
   24782:	b283      	uxth	r3, r0
   24784:	1acb      	subs	r3, r1, r3
   24786:	0c00      	lsrs	r0, r0, #16
   24788:	4463      	add	r3, ip
   2478a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   2478e:	eb00 4023 	add.w	r0, r0, r3, asr #16
   24792:	b29b      	uxth	r3, r3
   24794:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   24798:	4576      	cmp	r6, lr
   2479a:	f849 3b04 	str.w	r3, [r9], #4
   2479e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   247a2:	d8e5      	bhi.n	24770 <__mdiff+0x88>
   247a4:	1b33      	subs	r3, r6, r4
   247a6:	3b15      	subs	r3, #21
   247a8:	f023 0303 	bic.w	r3, r3, #3
   247ac:	3415      	adds	r4, #21
   247ae:	3304      	adds	r3, #4
   247b0:	42a6      	cmp	r6, r4
   247b2:	bf38      	it	cc
   247b4:	2304      	movcc	r3, #4
   247b6:	441d      	add	r5, r3
   247b8:	445b      	add	r3, fp
   247ba:	461e      	mov	r6, r3
   247bc:	462c      	mov	r4, r5
   247be:	4544      	cmp	r4, r8
   247c0:	d30e      	bcc.n	247e0 <__mdiff+0xf8>
   247c2:	f108 0103 	add.w	r1, r8, #3
   247c6:	1b49      	subs	r1, r1, r5
   247c8:	f021 0103 	bic.w	r1, r1, #3
   247cc:	3d03      	subs	r5, #3
   247ce:	45a8      	cmp	r8, r5
   247d0:	bf38      	it	cc
   247d2:	2100      	movcc	r1, #0
   247d4:	440b      	add	r3, r1
   247d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   247da:	b191      	cbz	r1, 24802 <__mdiff+0x11a>
   247dc:	6117      	str	r7, [r2, #16]
   247de:	e79d      	b.n	2471c <__mdiff+0x34>
   247e0:	f854 1b04 	ldr.w	r1, [r4], #4
   247e4:	46e6      	mov	lr, ip
   247e6:	0c08      	lsrs	r0, r1, #16
   247e8:	fa1c fc81 	uxtah	ip, ip, r1
   247ec:	4471      	add	r1, lr
   247ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
   247f2:	b289      	uxth	r1, r1
   247f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   247f8:	f846 1b04 	str.w	r1, [r6], #4
   247fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
   24800:	e7dd      	b.n	247be <__mdiff+0xd6>
   24802:	3f01      	subs	r7, #1
   24804:	e7e7      	b.n	247d6 <__mdiff+0xee>
   24806:	bf00      	nop
   24808:	00031c9d 	.word	0x00031c9d
   2480c:	00031cae 	.word	0x00031cae

00024810 <__d2b>:
   24810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24814:	460f      	mov	r7, r1
   24816:	2101      	movs	r1, #1
   24818:	ec59 8b10 	vmov	r8, r9, d0
   2481c:	4616      	mov	r6, r2
   2481e:	f7ff fd35 	bl	2428c <_Balloc>
   24822:	4604      	mov	r4, r0
   24824:	b930      	cbnz	r0, 24834 <__d2b+0x24>
   24826:	4602      	mov	r2, r0
   24828:	4b23      	ldr	r3, [pc, #140]	; (248b8 <__d2b+0xa8>)
   2482a:	4824      	ldr	r0, [pc, #144]	; (248bc <__d2b+0xac>)
   2482c:	f240 310a 	movw	r1, #778	; 0x30a
   24830:	f000 f846 	bl	248c0 <__assert_func>
   24834:	f3c9 550a 	ubfx	r5, r9, #20, #11
   24838:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2483c:	b10d      	cbz	r5, 24842 <__d2b+0x32>
   2483e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   24842:	9301      	str	r3, [sp, #4]
   24844:	f1b8 0300 	subs.w	r3, r8, #0
   24848:	d023      	beq.n	24892 <__d2b+0x82>
   2484a:	4668      	mov	r0, sp
   2484c:	9300      	str	r3, [sp, #0]
   2484e:	f009 ff3d 	bl	2e6cc <__lo0bits>
   24852:	e9dd 1200 	ldrd	r1, r2, [sp]
   24856:	b1d0      	cbz	r0, 2488e <__d2b+0x7e>
   24858:	f1c0 0320 	rsb	r3, r0, #32
   2485c:	fa02 f303 	lsl.w	r3, r2, r3
   24860:	430b      	orrs	r3, r1
   24862:	40c2      	lsrs	r2, r0
   24864:	6163      	str	r3, [r4, #20]
   24866:	9201      	str	r2, [sp, #4]
   24868:	9b01      	ldr	r3, [sp, #4]
   2486a:	61a3      	str	r3, [r4, #24]
   2486c:	2b00      	cmp	r3, #0
   2486e:	bf0c      	ite	eq
   24870:	2201      	moveq	r2, #1
   24872:	2202      	movne	r2, #2
   24874:	6122      	str	r2, [r4, #16]
   24876:	b1a5      	cbz	r5, 248a2 <__d2b+0x92>
   24878:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2487c:	4405      	add	r5, r0
   2487e:	603d      	str	r5, [r7, #0]
   24880:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   24884:	6030      	str	r0, [r6, #0]
   24886:	4620      	mov	r0, r4
   24888:	b003      	add	sp, #12
   2488a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2488e:	6161      	str	r1, [r4, #20]
   24890:	e7ea      	b.n	24868 <__d2b+0x58>
   24892:	a801      	add	r0, sp, #4
   24894:	f009 ff1a 	bl	2e6cc <__lo0bits>
   24898:	9b01      	ldr	r3, [sp, #4]
   2489a:	6163      	str	r3, [r4, #20]
   2489c:	3020      	adds	r0, #32
   2489e:	2201      	movs	r2, #1
   248a0:	e7e8      	b.n	24874 <__d2b+0x64>
   248a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   248a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   248aa:	6038      	str	r0, [r7, #0]
   248ac:	6918      	ldr	r0, [r3, #16]
   248ae:	f009 feeb 	bl	2e688 <__hi0bits>
   248b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   248b6:	e7e5      	b.n	24884 <__d2b+0x74>
   248b8:	00031c9d 	.word	0x00031c9d
   248bc:	00031cae 	.word	0x00031cae

000248c0 <__assert_func>:
   248c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   248c2:	4614      	mov	r4, r2
   248c4:	461a      	mov	r2, r3
   248c6:	4b09      	ldr	r3, [pc, #36]	; (248ec <__assert_func+0x2c>)
   248c8:	681b      	ldr	r3, [r3, #0]
   248ca:	4605      	mov	r5, r0
   248cc:	68d8      	ldr	r0, [r3, #12]
   248ce:	b954      	cbnz	r4, 248e6 <__assert_func+0x26>
   248d0:	4b07      	ldr	r3, [pc, #28]	; (248f0 <__assert_func+0x30>)
   248d2:	461c      	mov	r4, r3
   248d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   248d8:	9100      	str	r1, [sp, #0]
   248da:	462b      	mov	r3, r5
   248dc:	4905      	ldr	r1, [pc, #20]	; (248f4 <__assert_func+0x34>)
   248de:	f000 f80d 	bl	248fc <fiprintf>
   248e2:	f009 ff91 	bl	2e808 <abort>
   248e6:	4b04      	ldr	r3, [pc, #16]	; (248f8 <__assert_func+0x38>)
   248e8:	e7f4      	b.n	248d4 <__assert_func+0x14>
   248ea:	bf00      	nop
   248ec:	2000087c 	.word	0x2000087c
   248f0:	00031d5e 	.word	0x00031d5e
   248f4:	00031d30 	.word	0x00031d30
   248f8:	00031d23 	.word	0x00031d23

000248fc <fiprintf>:
   248fc:	b40e      	push	{r1, r2, r3}
   248fe:	b503      	push	{r0, r1, lr}
   24900:	4601      	mov	r1, r0
   24902:	ab03      	add	r3, sp, #12
   24904:	4805      	ldr	r0, [pc, #20]	; (2491c <fiprintf+0x20>)
   24906:	f853 2b04 	ldr.w	r2, [r3], #4
   2490a:	6800      	ldr	r0, [r0, #0]
   2490c:	9301      	str	r3, [sp, #4]
   2490e:	f000 f807 	bl	24920 <_vfiprintf_r>
   24912:	b002      	add	sp, #8
   24914:	f85d eb04 	ldr.w	lr, [sp], #4
   24918:	b003      	add	sp, #12
   2491a:	4770      	bx	lr
   2491c:	2000087c 	.word	0x2000087c

00024920 <_vfiprintf_r>:
   24920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24924:	460d      	mov	r5, r1
   24926:	b09d      	sub	sp, #116	; 0x74
   24928:	4614      	mov	r4, r2
   2492a:	4698      	mov	r8, r3
   2492c:	4606      	mov	r6, r0
   2492e:	b118      	cbz	r0, 24938 <_vfiprintf_r+0x18>
   24930:	6983      	ldr	r3, [r0, #24]
   24932:	b90b      	cbnz	r3, 24938 <_vfiprintf_r+0x18>
   24934:	f000 fa5c 	bl	24df0 <__sinit>
   24938:	4b87      	ldr	r3, [pc, #540]	; (24b58 <_vfiprintf_r+0x238>)
   2493a:	429d      	cmp	r5, r3
   2493c:	d11b      	bne.n	24976 <_vfiprintf_r+0x56>
   2493e:	6875      	ldr	r5, [r6, #4]
   24940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24942:	07d9      	lsls	r1, r3, #31
   24944:	d405      	bmi.n	24952 <_vfiprintf_r+0x32>
   24946:	89ab      	ldrh	r3, [r5, #12]
   24948:	059a      	lsls	r2, r3, #22
   2494a:	d402      	bmi.n	24952 <_vfiprintf_r+0x32>
   2494c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2494e:	f004 fe99 	bl	29684 <__retarget_lock_acquire_recursive>
   24952:	89ab      	ldrh	r3, [r5, #12]
   24954:	071b      	lsls	r3, r3, #28
   24956:	d501      	bpl.n	2495c <_vfiprintf_r+0x3c>
   24958:	692b      	ldr	r3, [r5, #16]
   2495a:	b9eb      	cbnz	r3, 24998 <_vfiprintf_r+0x78>
   2495c:	4629      	mov	r1, r5
   2495e:	4630      	mov	r0, r6
   24960:	f000 f95c 	bl	24c1c <__swsetup_r>
   24964:	b1c0      	cbz	r0, 24998 <_vfiprintf_r+0x78>
   24966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24968:	07dc      	lsls	r4, r3, #31
   2496a:	d50e      	bpl.n	2498a <_vfiprintf_r+0x6a>
   2496c:	f04f 30ff 	mov.w	r0, #4294967295
   24970:	b01d      	add	sp, #116	; 0x74
   24972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24976:	4b79      	ldr	r3, [pc, #484]	; (24b5c <_vfiprintf_r+0x23c>)
   24978:	429d      	cmp	r5, r3
   2497a:	d101      	bne.n	24980 <_vfiprintf_r+0x60>
   2497c:	68b5      	ldr	r5, [r6, #8]
   2497e:	e7df      	b.n	24940 <_vfiprintf_r+0x20>
   24980:	4b77      	ldr	r3, [pc, #476]	; (24b60 <_vfiprintf_r+0x240>)
   24982:	429d      	cmp	r5, r3
   24984:	bf08      	it	eq
   24986:	68f5      	ldreq	r5, [r6, #12]
   24988:	e7da      	b.n	24940 <_vfiprintf_r+0x20>
   2498a:	89ab      	ldrh	r3, [r5, #12]
   2498c:	0598      	lsls	r0, r3, #22
   2498e:	d4ed      	bmi.n	2496c <_vfiprintf_r+0x4c>
   24990:	6da8      	ldr	r0, [r5, #88]	; 0x58
   24992:	f004 fe7f 	bl	29694 <__retarget_lock_release_recursive>
   24996:	e7e9      	b.n	2496c <_vfiprintf_r+0x4c>
   24998:	2300      	movs	r3, #0
   2499a:	9309      	str	r3, [sp, #36]	; 0x24
   2499c:	2320      	movs	r3, #32
   2499e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   249a2:	f8cd 800c 	str.w	r8, [sp, #12]
   249a6:	2330      	movs	r3, #48	; 0x30
   249a8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 24b64 <_vfiprintf_r+0x244>
   249ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   249b0:	f04f 0901 	mov.w	r9, #1
   249b4:	4623      	mov	r3, r4
   249b6:	469a      	mov	sl, r3
   249b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   249bc:	b10a      	cbz	r2, 249c2 <_vfiprintf_r+0xa2>
   249be:	2a25      	cmp	r2, #37	; 0x25
   249c0:	d1f9      	bne.n	249b6 <_vfiprintf_r+0x96>
   249c2:	ebba 0b04 	subs.w	fp, sl, r4
   249c6:	d00b      	beq.n	249e0 <_vfiprintf_r+0xc0>
   249c8:	465b      	mov	r3, fp
   249ca:	4622      	mov	r2, r4
   249cc:	4629      	mov	r1, r5
   249ce:	4630      	mov	r0, r6
   249d0:	f009 fefb 	bl	2e7ca <__sfputs_r>
   249d4:	3001      	adds	r0, #1
   249d6:	f000 80a6 	beq.w	24b26 <_vfiprintf_r+0x206>
   249da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   249dc:	445a      	add	r2, fp
   249de:	9209      	str	r2, [sp, #36]	; 0x24
   249e0:	f89a 3000 	ldrb.w	r3, [sl]
   249e4:	2b00      	cmp	r3, #0
   249e6:	f000 809e 	beq.w	24b26 <_vfiprintf_r+0x206>
   249ea:	2300      	movs	r3, #0
   249ec:	f04f 32ff 	mov.w	r2, #4294967295
   249f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   249f4:	f10a 0a01 	add.w	sl, sl, #1
   249f8:	9304      	str	r3, [sp, #16]
   249fa:	9307      	str	r3, [sp, #28]
   249fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   24a00:	931a      	str	r3, [sp, #104]	; 0x68
   24a02:	4654      	mov	r4, sl
   24a04:	4857      	ldr	r0, [pc, #348]	; (24b64 <_vfiprintf_r+0x244>)
   24a06:	f814 1b01 	ldrb.w	r1, [r4], #1
   24a0a:	2205      	movs	r2, #5
   24a0c:	f7db fb78 	bl	100 <memchr>
   24a10:	9b04      	ldr	r3, [sp, #16]
   24a12:	b9d0      	cbnz	r0, 24a4a <_vfiprintf_r+0x12a>
   24a14:	06d9      	lsls	r1, r3, #27
   24a16:	bf44      	itt	mi
   24a18:	2220      	movmi	r2, #32
   24a1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   24a1e:	071a      	lsls	r2, r3, #28
   24a20:	bf44      	itt	mi
   24a22:	222b      	movmi	r2, #43	; 0x2b
   24a24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   24a28:	f89a 2000 	ldrb.w	r2, [sl]
   24a2c:	2a2a      	cmp	r2, #42	; 0x2a
   24a2e:	d014      	beq.n	24a5a <_vfiprintf_r+0x13a>
   24a30:	9a07      	ldr	r2, [sp, #28]
   24a32:	4654      	mov	r4, sl
   24a34:	2000      	movs	r0, #0
   24a36:	f04f 0c0a 	mov.w	ip, #10
   24a3a:	4621      	mov	r1, r4
   24a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   24a40:	3b30      	subs	r3, #48	; 0x30
   24a42:	2b09      	cmp	r3, #9
   24a44:	d94a      	bls.n	24adc <_vfiprintf_r+0x1bc>
   24a46:	b970      	cbnz	r0, 24a66 <_vfiprintf_r+0x146>
   24a48:	e014      	b.n	24a74 <_vfiprintf_r+0x154>
   24a4a:	eba0 0008 	sub.w	r0, r0, r8
   24a4e:	fa09 f000 	lsl.w	r0, r9, r0
   24a52:	4318      	orrs	r0, r3
   24a54:	9004      	str	r0, [sp, #16]
   24a56:	46a2      	mov	sl, r4
   24a58:	e7d3      	b.n	24a02 <_vfiprintf_r+0xe2>
   24a5a:	9a03      	ldr	r2, [sp, #12]
   24a5c:	1d11      	adds	r1, r2, #4
   24a5e:	6812      	ldr	r2, [r2, #0]
   24a60:	9103      	str	r1, [sp, #12]
   24a62:	2a00      	cmp	r2, #0
   24a64:	db01      	blt.n	24a6a <_vfiprintf_r+0x14a>
   24a66:	9207      	str	r2, [sp, #28]
   24a68:	e004      	b.n	24a74 <_vfiprintf_r+0x154>
   24a6a:	4252      	negs	r2, r2
   24a6c:	f043 0302 	orr.w	r3, r3, #2
   24a70:	9207      	str	r2, [sp, #28]
   24a72:	9304      	str	r3, [sp, #16]
   24a74:	7823      	ldrb	r3, [r4, #0]
   24a76:	2b2e      	cmp	r3, #46	; 0x2e
   24a78:	d10a      	bne.n	24a90 <_vfiprintf_r+0x170>
   24a7a:	7863      	ldrb	r3, [r4, #1]
   24a7c:	2b2a      	cmp	r3, #42	; 0x2a
   24a7e:	d132      	bne.n	24ae6 <_vfiprintf_r+0x1c6>
   24a80:	9b03      	ldr	r3, [sp, #12]
   24a82:	1d1a      	adds	r2, r3, #4
   24a84:	681b      	ldr	r3, [r3, #0]
   24a86:	9203      	str	r2, [sp, #12]
   24a88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   24a8c:	3402      	adds	r4, #2
   24a8e:	9305      	str	r3, [sp, #20]
   24a90:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 24b74 <_vfiprintf_r+0x254>
   24a94:	7821      	ldrb	r1, [r4, #0]
   24a96:	2203      	movs	r2, #3
   24a98:	4650      	mov	r0, sl
   24a9a:	f7db fb31 	bl	100 <memchr>
   24a9e:	b138      	cbz	r0, 24ab0 <_vfiprintf_r+0x190>
   24aa0:	9b04      	ldr	r3, [sp, #16]
   24aa2:	eba0 000a 	sub.w	r0, r0, sl
   24aa6:	2240      	movs	r2, #64	; 0x40
   24aa8:	4082      	lsls	r2, r0
   24aaa:	4313      	orrs	r3, r2
   24aac:	3401      	adds	r4, #1
   24aae:	9304      	str	r3, [sp, #16]
   24ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
   24ab4:	482c      	ldr	r0, [pc, #176]	; (24b68 <_vfiprintf_r+0x248>)
   24ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   24aba:	2206      	movs	r2, #6
   24abc:	f7db fb20 	bl	100 <memchr>
   24ac0:	2800      	cmp	r0, #0
   24ac2:	d03f      	beq.n	24b44 <_vfiprintf_r+0x224>
   24ac4:	4b29      	ldr	r3, [pc, #164]	; (24b6c <_vfiprintf_r+0x24c>)
   24ac6:	bb1b      	cbnz	r3, 24b10 <_vfiprintf_r+0x1f0>
   24ac8:	9b03      	ldr	r3, [sp, #12]
   24aca:	3307      	adds	r3, #7
   24acc:	f023 0307 	bic.w	r3, r3, #7
   24ad0:	3308      	adds	r3, #8
   24ad2:	9303      	str	r3, [sp, #12]
   24ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24ad6:	443b      	add	r3, r7
   24ad8:	9309      	str	r3, [sp, #36]	; 0x24
   24ada:	e76b      	b.n	249b4 <_vfiprintf_r+0x94>
   24adc:	fb0c 3202 	mla	r2, ip, r2, r3
   24ae0:	460c      	mov	r4, r1
   24ae2:	2001      	movs	r0, #1
   24ae4:	e7a9      	b.n	24a3a <_vfiprintf_r+0x11a>
   24ae6:	2300      	movs	r3, #0
   24ae8:	3401      	adds	r4, #1
   24aea:	9305      	str	r3, [sp, #20]
   24aec:	4619      	mov	r1, r3
   24aee:	f04f 0c0a 	mov.w	ip, #10
   24af2:	4620      	mov	r0, r4
   24af4:	f810 2b01 	ldrb.w	r2, [r0], #1
   24af8:	3a30      	subs	r2, #48	; 0x30
   24afa:	2a09      	cmp	r2, #9
   24afc:	d903      	bls.n	24b06 <_vfiprintf_r+0x1e6>
   24afe:	2b00      	cmp	r3, #0
   24b00:	d0c6      	beq.n	24a90 <_vfiprintf_r+0x170>
   24b02:	9105      	str	r1, [sp, #20]
   24b04:	e7c4      	b.n	24a90 <_vfiprintf_r+0x170>
   24b06:	fb0c 2101 	mla	r1, ip, r1, r2
   24b0a:	4604      	mov	r4, r0
   24b0c:	2301      	movs	r3, #1
   24b0e:	e7f0      	b.n	24af2 <_vfiprintf_r+0x1d2>
   24b10:	ab03      	add	r3, sp, #12
   24b12:	9300      	str	r3, [sp, #0]
   24b14:	462a      	mov	r2, r5
   24b16:	4b16      	ldr	r3, [pc, #88]	; (24b70 <_vfiprintf_r+0x250>)
   24b18:	a904      	add	r1, sp, #16
   24b1a:	4630      	mov	r0, r6
   24b1c:	f7ff f836 	bl	23b8c <_printf_float>
   24b20:	4607      	mov	r7, r0
   24b22:	1c78      	adds	r0, r7, #1
   24b24:	d1d6      	bne.n	24ad4 <_vfiprintf_r+0x1b4>
   24b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24b28:	07d9      	lsls	r1, r3, #31
   24b2a:	d405      	bmi.n	24b38 <_vfiprintf_r+0x218>
   24b2c:	89ab      	ldrh	r3, [r5, #12]
   24b2e:	059a      	lsls	r2, r3, #22
   24b30:	d402      	bmi.n	24b38 <_vfiprintf_r+0x218>
   24b32:	6da8      	ldr	r0, [r5, #88]	; 0x58
   24b34:	f004 fdae 	bl	29694 <__retarget_lock_release_recursive>
   24b38:	89ab      	ldrh	r3, [r5, #12]
   24b3a:	065b      	lsls	r3, r3, #25
   24b3c:	f53f af16 	bmi.w	2496c <_vfiprintf_r+0x4c>
   24b40:	9809      	ldr	r0, [sp, #36]	; 0x24
   24b42:	e715      	b.n	24970 <_vfiprintf_r+0x50>
   24b44:	ab03      	add	r3, sp, #12
   24b46:	9300      	str	r3, [sp, #0]
   24b48:	462a      	mov	r2, r5
   24b4a:	4b09      	ldr	r3, [pc, #36]	; (24b70 <_vfiprintf_r+0x250>)
   24b4c:	a904      	add	r1, sp, #16
   24b4e:	4630      	mov	r0, r6
   24b50:	f7ff fa4e 	bl	23ff0 <_printf_i>
   24b54:	e7e4      	b.n	24b20 <_vfiprintf_r+0x200>
   24b56:	bf00      	nop
   24b58:	00031928 	.word	0x00031928
   24b5c:	00031908 	.word	0x00031908
   24b60:	000318e8 	.word	0x000318e8
   24b64:	00031d69 	.word	0x00031d69
   24b68:	00031d73 	.word	0x00031d73
   24b6c:	00023b8d 	.word	0x00023b8d
   24b70:	0002e7cb 	.word	0x0002e7cb
   24b74:	00031d6f 	.word	0x00031d6f

00024b78 <__swbuf_r>:
   24b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b7a:	460e      	mov	r6, r1
   24b7c:	4614      	mov	r4, r2
   24b7e:	4605      	mov	r5, r0
   24b80:	b118      	cbz	r0, 24b8a <__swbuf_r+0x12>
   24b82:	6983      	ldr	r3, [r0, #24]
   24b84:	b90b      	cbnz	r3, 24b8a <__swbuf_r+0x12>
   24b86:	f000 f933 	bl	24df0 <__sinit>
   24b8a:	4b21      	ldr	r3, [pc, #132]	; (24c10 <__swbuf_r+0x98>)
   24b8c:	429c      	cmp	r4, r3
   24b8e:	d110      	bne.n	24bb2 <__swbuf_r+0x3a>
   24b90:	686c      	ldr	r4, [r5, #4]
   24b92:	69a3      	ldr	r3, [r4, #24]
   24b94:	60a3      	str	r3, [r4, #8]
   24b96:	89a3      	ldrh	r3, [r4, #12]
   24b98:	071a      	lsls	r2, r3, #28
   24b9a:	d501      	bpl.n	24ba0 <__swbuf_r+0x28>
   24b9c:	6923      	ldr	r3, [r4, #16]
   24b9e:	b993      	cbnz	r3, 24bc6 <__swbuf_r+0x4e>
   24ba0:	4621      	mov	r1, r4
   24ba2:	4628      	mov	r0, r5
   24ba4:	f000 f83a 	bl	24c1c <__swsetup_r>
   24ba8:	b168      	cbz	r0, 24bc6 <__swbuf_r+0x4e>
   24baa:	f04f 37ff 	mov.w	r7, #4294967295
   24bae:	4638      	mov	r0, r7
   24bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24bb2:	4b18      	ldr	r3, [pc, #96]	; (24c14 <__swbuf_r+0x9c>)
   24bb4:	429c      	cmp	r4, r3
   24bb6:	d101      	bne.n	24bbc <__swbuf_r+0x44>
   24bb8:	68ac      	ldr	r4, [r5, #8]
   24bba:	e7ea      	b.n	24b92 <__swbuf_r+0x1a>
   24bbc:	4b16      	ldr	r3, [pc, #88]	; (24c18 <__swbuf_r+0xa0>)
   24bbe:	429c      	cmp	r4, r3
   24bc0:	bf08      	it	eq
   24bc2:	68ec      	ldreq	r4, [r5, #12]
   24bc4:	e7e5      	b.n	24b92 <__swbuf_r+0x1a>
   24bc6:	6923      	ldr	r3, [r4, #16]
   24bc8:	6820      	ldr	r0, [r4, #0]
   24bca:	1ac0      	subs	r0, r0, r3
   24bcc:	6963      	ldr	r3, [r4, #20]
   24bce:	b2f6      	uxtb	r6, r6
   24bd0:	4283      	cmp	r3, r0
   24bd2:	4637      	mov	r7, r6
   24bd4:	dc05      	bgt.n	24be2 <__swbuf_r+0x6a>
   24bd6:	4621      	mov	r1, r4
   24bd8:	4628      	mov	r0, r5
   24bda:	f000 f88b 	bl	24cf4 <_fflush_r>
   24bde:	2800      	cmp	r0, #0
   24be0:	d1e3      	bne.n	24baa <__swbuf_r+0x32>
   24be2:	68a3      	ldr	r3, [r4, #8]
   24be4:	3b01      	subs	r3, #1
   24be6:	60a3      	str	r3, [r4, #8]
   24be8:	6823      	ldr	r3, [r4, #0]
   24bea:	1c5a      	adds	r2, r3, #1
   24bec:	6022      	str	r2, [r4, #0]
   24bee:	701e      	strb	r6, [r3, #0]
   24bf0:	6963      	ldr	r3, [r4, #20]
   24bf2:	3001      	adds	r0, #1
   24bf4:	4283      	cmp	r3, r0
   24bf6:	d004      	beq.n	24c02 <__swbuf_r+0x8a>
   24bf8:	89a3      	ldrh	r3, [r4, #12]
   24bfa:	07db      	lsls	r3, r3, #31
   24bfc:	d5d7      	bpl.n	24bae <__swbuf_r+0x36>
   24bfe:	2e0a      	cmp	r6, #10
   24c00:	d1d5      	bne.n	24bae <__swbuf_r+0x36>
   24c02:	4621      	mov	r1, r4
   24c04:	4628      	mov	r0, r5
   24c06:	f000 f875 	bl	24cf4 <_fflush_r>
   24c0a:	2800      	cmp	r0, #0
   24c0c:	d0cf      	beq.n	24bae <__swbuf_r+0x36>
   24c0e:	e7cc      	b.n	24baa <__swbuf_r+0x32>
   24c10:	00031928 	.word	0x00031928
   24c14:	00031908 	.word	0x00031908
   24c18:	000318e8 	.word	0x000318e8

00024c1c <__swsetup_r>:
   24c1c:	4b31      	ldr	r3, [pc, #196]	; (24ce4 <__swsetup_r+0xc8>)
   24c1e:	b570      	push	{r4, r5, r6, lr}
   24c20:	681d      	ldr	r5, [r3, #0]
   24c22:	4606      	mov	r6, r0
   24c24:	460c      	mov	r4, r1
   24c26:	b125      	cbz	r5, 24c32 <__swsetup_r+0x16>
   24c28:	69ab      	ldr	r3, [r5, #24]
   24c2a:	b913      	cbnz	r3, 24c32 <__swsetup_r+0x16>
   24c2c:	4628      	mov	r0, r5
   24c2e:	f000 f8df 	bl	24df0 <__sinit>
   24c32:	4b2d      	ldr	r3, [pc, #180]	; (24ce8 <__swsetup_r+0xcc>)
   24c34:	429c      	cmp	r4, r3
   24c36:	d10e      	bne.n	24c56 <__swsetup_r+0x3a>
   24c38:	686c      	ldr	r4, [r5, #4]
   24c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24c3e:	071a      	lsls	r2, r3, #28
   24c40:	d42c      	bmi.n	24c9c <__swsetup_r+0x80>
   24c42:	06dd      	lsls	r5, r3, #27
   24c44:	d411      	bmi.n	24c6a <__swsetup_r+0x4e>
   24c46:	2209      	movs	r2, #9
   24c48:	6032      	str	r2, [r6, #0]
   24c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24c4e:	81a3      	strh	r3, [r4, #12]
   24c50:	f04f 30ff 	mov.w	r0, #4294967295
   24c54:	e03d      	b.n	24cd2 <__swsetup_r+0xb6>
   24c56:	4b25      	ldr	r3, [pc, #148]	; (24cec <__swsetup_r+0xd0>)
   24c58:	429c      	cmp	r4, r3
   24c5a:	d101      	bne.n	24c60 <__swsetup_r+0x44>
   24c5c:	68ac      	ldr	r4, [r5, #8]
   24c5e:	e7ec      	b.n	24c3a <__swsetup_r+0x1e>
   24c60:	4b23      	ldr	r3, [pc, #140]	; (24cf0 <__swsetup_r+0xd4>)
   24c62:	429c      	cmp	r4, r3
   24c64:	bf08      	it	eq
   24c66:	68ec      	ldreq	r4, [r5, #12]
   24c68:	e7e7      	b.n	24c3a <__swsetup_r+0x1e>
   24c6a:	0758      	lsls	r0, r3, #29
   24c6c:	d512      	bpl.n	24c94 <__swsetup_r+0x78>
   24c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24c70:	b141      	cbz	r1, 24c84 <__swsetup_r+0x68>
   24c72:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24c76:	4299      	cmp	r1, r3
   24c78:	d002      	beq.n	24c80 <__swsetup_r+0x64>
   24c7a:	4630      	mov	r0, r6
   24c7c:	f7fe fee2 	bl	23a44 <_free_r>
   24c80:	2300      	movs	r3, #0
   24c82:	6363      	str	r3, [r4, #52]	; 0x34
   24c84:	89a3      	ldrh	r3, [r4, #12]
   24c86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   24c8a:	81a3      	strh	r3, [r4, #12]
   24c8c:	2300      	movs	r3, #0
   24c8e:	6063      	str	r3, [r4, #4]
   24c90:	6923      	ldr	r3, [r4, #16]
   24c92:	6023      	str	r3, [r4, #0]
   24c94:	89a3      	ldrh	r3, [r4, #12]
   24c96:	f043 0308 	orr.w	r3, r3, #8
   24c9a:	81a3      	strh	r3, [r4, #12]
   24c9c:	6923      	ldr	r3, [r4, #16]
   24c9e:	b94b      	cbnz	r3, 24cb4 <__swsetup_r+0x98>
   24ca0:	89a3      	ldrh	r3, [r4, #12]
   24ca2:	f403 7320 	and.w	r3, r3, #640	; 0x280
   24ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   24caa:	d003      	beq.n	24cb4 <__swsetup_r+0x98>
   24cac:	4621      	mov	r1, r4
   24cae:	4630      	mov	r0, r6
   24cb0:	f000 f91c 	bl	24eec <__smakebuf_r>
   24cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24cb8:	f013 0201 	ands.w	r2, r3, #1
   24cbc:	d00a      	beq.n	24cd4 <__swsetup_r+0xb8>
   24cbe:	2200      	movs	r2, #0
   24cc0:	60a2      	str	r2, [r4, #8]
   24cc2:	6962      	ldr	r2, [r4, #20]
   24cc4:	4252      	negs	r2, r2
   24cc6:	61a2      	str	r2, [r4, #24]
   24cc8:	6922      	ldr	r2, [r4, #16]
   24cca:	b942      	cbnz	r2, 24cde <__swsetup_r+0xc2>
   24ccc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   24cd0:	d1bb      	bne.n	24c4a <__swsetup_r+0x2e>
   24cd2:	bd70      	pop	{r4, r5, r6, pc}
   24cd4:	0799      	lsls	r1, r3, #30
   24cd6:	bf58      	it	pl
   24cd8:	6962      	ldrpl	r2, [r4, #20]
   24cda:	60a2      	str	r2, [r4, #8]
   24cdc:	e7f4      	b.n	24cc8 <__swsetup_r+0xac>
   24cde:	2000      	movs	r0, #0
   24ce0:	e7f7      	b.n	24cd2 <__swsetup_r+0xb6>
   24ce2:	bf00      	nop
   24ce4:	2000087c 	.word	0x2000087c
   24ce8:	00031928 	.word	0x00031928
   24cec:	00031908 	.word	0x00031908
   24cf0:	000318e8 	.word	0x000318e8

00024cf4 <_fflush_r>:
   24cf4:	b538      	push	{r3, r4, r5, lr}
   24cf6:	690b      	ldr	r3, [r1, #16]
   24cf8:	4605      	mov	r5, r0
   24cfa:	460c      	mov	r4, r1
   24cfc:	b913      	cbnz	r3, 24d04 <_fflush_r+0x10>
   24cfe:	2500      	movs	r5, #0
   24d00:	4628      	mov	r0, r5
   24d02:	bd38      	pop	{r3, r4, r5, pc}
   24d04:	b118      	cbz	r0, 24d0e <_fflush_r+0x1a>
   24d06:	6983      	ldr	r3, [r0, #24]
   24d08:	b90b      	cbnz	r3, 24d0e <_fflush_r+0x1a>
   24d0a:	f000 f871 	bl	24df0 <__sinit>
   24d0e:	4b14      	ldr	r3, [pc, #80]	; (24d60 <_fflush_r+0x6c>)
   24d10:	429c      	cmp	r4, r3
   24d12:	d11b      	bne.n	24d4c <_fflush_r+0x58>
   24d14:	686c      	ldr	r4, [r5, #4]
   24d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24d1a:	2b00      	cmp	r3, #0
   24d1c:	d0ef      	beq.n	24cfe <_fflush_r+0xa>
   24d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   24d20:	07d0      	lsls	r0, r2, #31
   24d22:	d404      	bmi.n	24d2e <_fflush_r+0x3a>
   24d24:	0599      	lsls	r1, r3, #22
   24d26:	d402      	bmi.n	24d2e <_fflush_r+0x3a>
   24d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24d2a:	f004 fcab 	bl	29684 <__retarget_lock_acquire_recursive>
   24d2e:	4628      	mov	r0, r5
   24d30:	4621      	mov	r1, r4
   24d32:	f009 fd70 	bl	2e816 <__sflush_r>
   24d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
   24d38:	07da      	lsls	r2, r3, #31
   24d3a:	4605      	mov	r5, r0
   24d3c:	d4e0      	bmi.n	24d00 <_fflush_r+0xc>
   24d3e:	89a3      	ldrh	r3, [r4, #12]
   24d40:	059b      	lsls	r3, r3, #22
   24d42:	d4dd      	bmi.n	24d00 <_fflush_r+0xc>
   24d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24d46:	f004 fca5 	bl	29694 <__retarget_lock_release_recursive>
   24d4a:	e7d9      	b.n	24d00 <_fflush_r+0xc>
   24d4c:	4b05      	ldr	r3, [pc, #20]	; (24d64 <_fflush_r+0x70>)
   24d4e:	429c      	cmp	r4, r3
   24d50:	d101      	bne.n	24d56 <_fflush_r+0x62>
   24d52:	68ac      	ldr	r4, [r5, #8]
   24d54:	e7df      	b.n	24d16 <_fflush_r+0x22>
   24d56:	4b04      	ldr	r3, [pc, #16]	; (24d68 <_fflush_r+0x74>)
   24d58:	429c      	cmp	r4, r3
   24d5a:	bf08      	it	eq
   24d5c:	68ec      	ldreq	r4, [r5, #12]
   24d5e:	e7da      	b.n	24d16 <_fflush_r+0x22>
   24d60:	00031928 	.word	0x00031928
   24d64:	00031908 	.word	0x00031908
   24d68:	000318e8 	.word	0x000318e8

00024d6c <std>:
   24d6c:	2300      	movs	r3, #0
   24d6e:	b510      	push	{r4, lr}
   24d70:	4604      	mov	r4, r0
   24d72:	e9c0 3300 	strd	r3, r3, [r0]
   24d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
   24d7a:	6083      	str	r3, [r0, #8]
   24d7c:	8181      	strh	r1, [r0, #12]
   24d7e:	6643      	str	r3, [r0, #100]	; 0x64
   24d80:	81c2      	strh	r2, [r0, #14]
   24d82:	6183      	str	r3, [r0, #24]
   24d84:	4619      	mov	r1, r3
   24d86:	2208      	movs	r2, #8
   24d88:	305c      	adds	r0, #92	; 0x5c
   24d8a:	f009 faac 	bl	2e2e6 <memset>
   24d8e:	4b05      	ldr	r3, [pc, #20]	; (24da4 <std+0x38>)
   24d90:	6263      	str	r3, [r4, #36]	; 0x24
   24d92:	4b05      	ldr	r3, [pc, #20]	; (24da8 <std+0x3c>)
   24d94:	62a3      	str	r3, [r4, #40]	; 0x28
   24d96:	4b05      	ldr	r3, [pc, #20]	; (24dac <std+0x40>)
   24d98:	62e3      	str	r3, [r4, #44]	; 0x2c
   24d9a:	4b05      	ldr	r3, [pc, #20]	; (24db0 <std+0x44>)
   24d9c:	6224      	str	r4, [r4, #32]
   24d9e:	6323      	str	r3, [r4, #48]	; 0x30
   24da0:	bd10      	pop	{r4, pc}
   24da2:	bf00      	nop
   24da4:	0002ea5d 	.word	0x0002ea5d
   24da8:	0002ea7f 	.word	0x0002ea7f
   24dac:	0002eab7 	.word	0x0002eab7
   24db0:	0002eadb 	.word	0x0002eadb

00024db4 <_cleanup_r>:
   24db4:	4901      	ldr	r1, [pc, #4]	; (24dbc <_cleanup_r+0x8>)
   24db6:	f009 bdc8 	b.w	2e94a <_fwalk_reent>
   24dba:	bf00      	nop
   24dbc:	00024cf5 	.word	0x00024cf5

00024dc0 <__sfp_lock_acquire>:
   24dc0:	4801      	ldr	r0, [pc, #4]	; (24dc8 <__sfp_lock_acquire+0x8>)
   24dc2:	f004 bc5f 	b.w	29684 <__retarget_lock_acquire_recursive>
   24dc6:	bf00      	nop
   24dc8:	20000b7c 	.word	0x20000b7c

00024dcc <__sfp_lock_release>:
   24dcc:	4801      	ldr	r0, [pc, #4]	; (24dd4 <__sfp_lock_release+0x8>)
   24dce:	f004 bc61 	b.w	29694 <__retarget_lock_release_recursive>
   24dd2:	bf00      	nop
   24dd4:	20000b7c 	.word	0x20000b7c

00024dd8 <__sinit_lock_acquire>:
   24dd8:	4801      	ldr	r0, [pc, #4]	; (24de0 <__sinit_lock_acquire+0x8>)
   24dda:	f004 bc53 	b.w	29684 <__retarget_lock_acquire_recursive>
   24dde:	bf00      	nop
   24de0:	20000b90 	.word	0x20000b90

00024de4 <__sinit_lock_release>:
   24de4:	4801      	ldr	r0, [pc, #4]	; (24dec <__sinit_lock_release+0x8>)
   24de6:	f004 bc55 	b.w	29694 <__retarget_lock_release_recursive>
   24dea:	bf00      	nop
   24dec:	20000b90 	.word	0x20000b90

00024df0 <__sinit>:
   24df0:	b510      	push	{r4, lr}
   24df2:	4604      	mov	r4, r0
   24df4:	f7ff fff0 	bl	24dd8 <__sinit_lock_acquire>
   24df8:	69a3      	ldr	r3, [r4, #24]
   24dfa:	b11b      	cbz	r3, 24e04 <__sinit+0x14>
   24dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24e00:	f7ff bff0 	b.w	24de4 <__sinit_lock_release>
   24e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   24e08:	6523      	str	r3, [r4, #80]	; 0x50
   24e0a:	4b13      	ldr	r3, [pc, #76]	; (24e58 <__sinit+0x68>)
   24e0c:	4a13      	ldr	r2, [pc, #76]	; (24e5c <__sinit+0x6c>)
   24e0e:	681b      	ldr	r3, [r3, #0]
   24e10:	62a2      	str	r2, [r4, #40]	; 0x28
   24e12:	42a3      	cmp	r3, r4
   24e14:	bf04      	itt	eq
   24e16:	2301      	moveq	r3, #1
   24e18:	61a3      	streq	r3, [r4, #24]
   24e1a:	4620      	mov	r0, r4
   24e1c:	f000 f820 	bl	24e60 <__sfp>
   24e20:	6060      	str	r0, [r4, #4]
   24e22:	4620      	mov	r0, r4
   24e24:	f000 f81c 	bl	24e60 <__sfp>
   24e28:	60a0      	str	r0, [r4, #8]
   24e2a:	4620      	mov	r0, r4
   24e2c:	f000 f818 	bl	24e60 <__sfp>
   24e30:	2200      	movs	r2, #0
   24e32:	60e0      	str	r0, [r4, #12]
   24e34:	2104      	movs	r1, #4
   24e36:	6860      	ldr	r0, [r4, #4]
   24e38:	f7ff ff98 	bl	24d6c <std>
   24e3c:	68a0      	ldr	r0, [r4, #8]
   24e3e:	2201      	movs	r2, #1
   24e40:	2109      	movs	r1, #9
   24e42:	f7ff ff93 	bl	24d6c <std>
   24e46:	68e0      	ldr	r0, [r4, #12]
   24e48:	2202      	movs	r2, #2
   24e4a:	2112      	movs	r1, #18
   24e4c:	f7ff ff8e 	bl	24d6c <std>
   24e50:	2301      	movs	r3, #1
   24e52:	61a3      	str	r3, [r4, #24]
   24e54:	e7d2      	b.n	24dfc <__sinit+0xc>
   24e56:	bf00      	nop
   24e58:	000318d8 	.word	0x000318d8
   24e5c:	00024db5 	.word	0x00024db5

00024e60 <__sfp>:
   24e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e62:	4607      	mov	r7, r0
   24e64:	f7ff ffac 	bl	24dc0 <__sfp_lock_acquire>
   24e68:	4b1e      	ldr	r3, [pc, #120]	; (24ee4 <__sfp+0x84>)
   24e6a:	681e      	ldr	r6, [r3, #0]
   24e6c:	69b3      	ldr	r3, [r6, #24]
   24e6e:	b913      	cbnz	r3, 24e76 <__sfp+0x16>
   24e70:	4630      	mov	r0, r6
   24e72:	f7ff ffbd 	bl	24df0 <__sinit>
   24e76:	3648      	adds	r6, #72	; 0x48
   24e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   24e7c:	3b01      	subs	r3, #1
   24e7e:	d503      	bpl.n	24e88 <__sfp+0x28>
   24e80:	6833      	ldr	r3, [r6, #0]
   24e82:	b30b      	cbz	r3, 24ec8 <__sfp+0x68>
   24e84:	6836      	ldr	r6, [r6, #0]
   24e86:	e7f7      	b.n	24e78 <__sfp+0x18>
   24e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   24e8c:	b9d5      	cbnz	r5, 24ec4 <__sfp+0x64>
   24e8e:	4b16      	ldr	r3, [pc, #88]	; (24ee8 <__sfp+0x88>)
   24e90:	60e3      	str	r3, [r4, #12]
   24e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24e96:	6665      	str	r5, [r4, #100]	; 0x64
   24e98:	f004 fbeb 	bl	29672 <__retarget_lock_init_recursive>
   24e9c:	f7ff ff96 	bl	24dcc <__sfp_lock_release>
   24ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   24ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
   24ea8:	6025      	str	r5, [r4, #0]
   24eaa:	61a5      	str	r5, [r4, #24]
   24eac:	2208      	movs	r2, #8
   24eae:	4629      	mov	r1, r5
   24eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   24eb4:	f009 fa17 	bl	2e2e6 <memset>
   24eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   24ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   24ec0:	4620      	mov	r0, r4
   24ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24ec4:	3468      	adds	r4, #104	; 0x68
   24ec6:	e7d9      	b.n	24e7c <__sfp+0x1c>
   24ec8:	2104      	movs	r1, #4
   24eca:	4638      	mov	r0, r7
   24ecc:	f009 fd27 	bl	2e91e <__sfmoreglue>
   24ed0:	4604      	mov	r4, r0
   24ed2:	6030      	str	r0, [r6, #0]
   24ed4:	2800      	cmp	r0, #0
   24ed6:	d1d5      	bne.n	24e84 <__sfp+0x24>
   24ed8:	f7ff ff78 	bl	24dcc <__sfp_lock_release>
   24edc:	230c      	movs	r3, #12
   24ede:	603b      	str	r3, [r7, #0]
   24ee0:	e7ee      	b.n	24ec0 <__sfp+0x60>
   24ee2:	bf00      	nop
   24ee4:	000318d8 	.word	0x000318d8
   24ee8:	ffff0001 	.word	0xffff0001

00024eec <__smakebuf_r>:
   24eec:	898b      	ldrh	r3, [r1, #12]
   24eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24ef0:	079d      	lsls	r5, r3, #30
   24ef2:	4606      	mov	r6, r0
   24ef4:	460c      	mov	r4, r1
   24ef6:	d507      	bpl.n	24f08 <__smakebuf_r+0x1c>
   24ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
   24efc:	6023      	str	r3, [r4, #0]
   24efe:	6123      	str	r3, [r4, #16]
   24f00:	2301      	movs	r3, #1
   24f02:	6163      	str	r3, [r4, #20]
   24f04:	b003      	add	sp, #12
   24f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24f08:	ab01      	add	r3, sp, #4
   24f0a:	466a      	mov	r2, sp
   24f0c:	f009 fd3c 	bl	2e988 <__swhatbuf_r>
   24f10:	9f00      	ldr	r7, [sp, #0]
   24f12:	4605      	mov	r5, r0
   24f14:	4639      	mov	r1, r7
   24f16:	4630      	mov	r0, r6
   24f18:	f7fe fdde 	bl	23ad8 <_malloc_r>
   24f1c:	b948      	cbnz	r0, 24f32 <__smakebuf_r+0x46>
   24f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24f22:	059a      	lsls	r2, r3, #22
   24f24:	d4ee      	bmi.n	24f04 <__smakebuf_r+0x18>
   24f26:	f023 0303 	bic.w	r3, r3, #3
   24f2a:	f043 0302 	orr.w	r3, r3, #2
   24f2e:	81a3      	strh	r3, [r4, #12]
   24f30:	e7e2      	b.n	24ef8 <__smakebuf_r+0xc>
   24f32:	4b0d      	ldr	r3, [pc, #52]	; (24f68 <__smakebuf_r+0x7c>)
   24f34:	62b3      	str	r3, [r6, #40]	; 0x28
   24f36:	89a3      	ldrh	r3, [r4, #12]
   24f38:	6020      	str	r0, [r4, #0]
   24f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24f3e:	81a3      	strh	r3, [r4, #12]
   24f40:	9b01      	ldr	r3, [sp, #4]
   24f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
   24f46:	b15b      	cbz	r3, 24f60 <__smakebuf_r+0x74>
   24f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24f4c:	4630      	mov	r0, r6
   24f4e:	f000 f85b 	bl	25008 <_isatty_r>
   24f52:	b128      	cbz	r0, 24f60 <__smakebuf_r+0x74>
   24f54:	89a3      	ldrh	r3, [r4, #12]
   24f56:	f023 0303 	bic.w	r3, r3, #3
   24f5a:	f043 0301 	orr.w	r3, r3, #1
   24f5e:	81a3      	strh	r3, [r4, #12]
   24f60:	89a3      	ldrh	r3, [r4, #12]
   24f62:	431d      	orrs	r5, r3
   24f64:	81a5      	strh	r5, [r4, #12]
   24f66:	e7cd      	b.n	24f04 <__smakebuf_r+0x18>
   24f68:	00024db5 	.word	0x00024db5

00024f6c <raise>:
   24f6c:	4b02      	ldr	r3, [pc, #8]	; (24f78 <raise+0xc>)
   24f6e:	4601      	mov	r1, r0
   24f70:	6818      	ldr	r0, [r3, #0]
   24f72:	f009 bd49 	b.w	2ea08 <_raise_r>
   24f76:	bf00      	nop
   24f78:	2000087c 	.word	0x2000087c

00024f7c <_kill_r>:
   24f7c:	b538      	push	{r3, r4, r5, lr}
   24f7e:	4d07      	ldr	r5, [pc, #28]	; (24f9c <_kill_r+0x20>)
   24f80:	2300      	movs	r3, #0
   24f82:	4604      	mov	r4, r0
   24f84:	4608      	mov	r0, r1
   24f86:	4611      	mov	r1, r2
   24f88:	602b      	str	r3, [r5, #0]
   24f8a:	f004 fb69 	bl	29660 <_kill>
   24f8e:	1c43      	adds	r3, r0, #1
   24f90:	d102      	bne.n	24f98 <_kill_r+0x1c>
   24f92:	682b      	ldr	r3, [r5, #0]
   24f94:	b103      	cbz	r3, 24f98 <_kill_r+0x1c>
   24f96:	6023      	str	r3, [r4, #0]
   24f98:	bd38      	pop	{r3, r4, r5, pc}
   24f9a:	bf00      	nop
   24f9c:	20004094 	.word	0x20004094

00024fa0 <_write_r>:
   24fa0:	b538      	push	{r3, r4, r5, lr}
   24fa2:	4d07      	ldr	r5, [pc, #28]	; (24fc0 <_write_r+0x20>)
   24fa4:	4604      	mov	r4, r0
   24fa6:	4608      	mov	r0, r1
   24fa8:	4611      	mov	r1, r2
   24faa:	2200      	movs	r2, #0
   24fac:	602a      	str	r2, [r5, #0]
   24fae:	461a      	mov	r2, r3
   24fb0:	f004 fb46 	bl	29640 <_write>
   24fb4:	1c43      	adds	r3, r0, #1
   24fb6:	d102      	bne.n	24fbe <_write_r+0x1e>
   24fb8:	682b      	ldr	r3, [r5, #0]
   24fba:	b103      	cbz	r3, 24fbe <_write_r+0x1e>
   24fbc:	6023      	str	r3, [r4, #0]
   24fbe:	bd38      	pop	{r3, r4, r5, pc}
   24fc0:	20004094 	.word	0x20004094

00024fc4 <_close_r>:
   24fc4:	b538      	push	{r3, r4, r5, lr}
   24fc6:	4d06      	ldr	r5, [pc, #24]	; (24fe0 <_close_r+0x1c>)
   24fc8:	2300      	movs	r3, #0
   24fca:	4604      	mov	r4, r0
   24fcc:	4608      	mov	r0, r1
   24fce:	602b      	str	r3, [r5, #0]
   24fd0:	f004 fb3c 	bl	2964c <_close>
   24fd4:	1c43      	adds	r3, r0, #1
   24fd6:	d102      	bne.n	24fde <_close_r+0x1a>
   24fd8:	682b      	ldr	r3, [r5, #0]
   24fda:	b103      	cbz	r3, 24fde <_close_r+0x1a>
   24fdc:	6023      	str	r3, [r4, #0]
   24fde:	bd38      	pop	{r3, r4, r5, pc}
   24fe0:	20004094 	.word	0x20004094

00024fe4 <_fstat_r>:
   24fe4:	b538      	push	{r3, r4, r5, lr}
   24fe6:	4d07      	ldr	r5, [pc, #28]	; (25004 <_fstat_r+0x20>)
   24fe8:	2300      	movs	r3, #0
   24fea:	4604      	mov	r4, r0
   24fec:	4608      	mov	r0, r1
   24fee:	4611      	mov	r1, r2
   24ff0:	602b      	str	r3, [r5, #0]
   24ff2:	f004 fb39 	bl	29668 <_fstat>
   24ff6:	1c43      	adds	r3, r0, #1
   24ff8:	d102      	bne.n	25000 <_fstat_r+0x1c>
   24ffa:	682b      	ldr	r3, [r5, #0]
   24ffc:	b103      	cbz	r3, 25000 <_fstat_r+0x1c>
   24ffe:	6023      	str	r3, [r4, #0]
   25000:	bd38      	pop	{r3, r4, r5, pc}
   25002:	bf00      	nop
   25004:	20004094 	.word	0x20004094

00025008 <_isatty_r>:
   25008:	b538      	push	{r3, r4, r5, lr}
   2500a:	4d06      	ldr	r5, [pc, #24]	; (25024 <_isatty_r+0x1c>)
   2500c:	2300      	movs	r3, #0
   2500e:	4604      	mov	r4, r0
   25010:	4608      	mov	r0, r1
   25012:	602b      	str	r3, [r5, #0]
   25014:	f004 fb1f 	bl	29656 <_isatty>
   25018:	1c43      	adds	r3, r0, #1
   2501a:	d102      	bne.n	25022 <_isatty_r+0x1a>
   2501c:	682b      	ldr	r3, [r5, #0]
   2501e:	b103      	cbz	r3, 25022 <_isatty_r+0x1a>
   25020:	6023      	str	r3, [r4, #0]
   25022:	bd38      	pop	{r3, r4, r5, pc}
   25024:	20004094 	.word	0x20004094

00025028 <_lseek_r>:
   25028:	b538      	push	{r3, r4, r5, lr}
   2502a:	4d07      	ldr	r5, [pc, #28]	; (25048 <_lseek_r+0x20>)
   2502c:	4604      	mov	r4, r0
   2502e:	4608      	mov	r0, r1
   25030:	4611      	mov	r1, r2
   25032:	2200      	movs	r2, #0
   25034:	602a      	str	r2, [r5, #0]
   25036:	461a      	mov	r2, r3
   25038:	f004 fb0b 	bl	29652 <_lseek>
   2503c:	1c43      	adds	r3, r0, #1
   2503e:	d102      	bne.n	25046 <_lseek_r+0x1e>
   25040:	682b      	ldr	r3, [r5, #0]
   25042:	b103      	cbz	r3, 25046 <_lseek_r+0x1e>
   25044:	6023      	str	r3, [r4, #0]
   25046:	bd38      	pop	{r3, r4, r5, pc}
   25048:	20004094 	.word	0x20004094

0002504c <_read_r>:
   2504c:	b538      	push	{r3, r4, r5, lr}
   2504e:	4d07      	ldr	r5, [pc, #28]	; (2506c <_read_r+0x20>)
   25050:	4604      	mov	r4, r0
   25052:	4608      	mov	r0, r1
   25054:	4611      	mov	r1, r2
   25056:	2200      	movs	r2, #0
   25058:	602a      	str	r2, [r5, #0]
   2505a:	461a      	mov	r2, r3
   2505c:	f004 faea 	bl	29634 <_read>
   25060:	1c43      	adds	r3, r0, #1
   25062:	d102      	bne.n	2506a <_read_r+0x1e>
   25064:	682b      	ldr	r3, [r5, #0]
   25066:	b103      	cbz	r3, 2506a <_read_r+0x1e>
   25068:	6023      	str	r3, [r4, #0]
   2506a:	bd38      	pop	{r3, r4, r5, pc}
   2506c:	20004094 	.word	0x20004094

00025070 <nrf_cc3xx_platform_init>:
   25070:	b510      	push	{r4, lr}
   25072:	4c0c      	ldr	r4, [pc, #48]	; (250a4 <nrf_cc3xx_platform_init+0x34>)
   25074:	6823      	ldr	r3, [r4, #0]
   25076:	b113      	cbz	r3, 2507e <nrf_cc3xx_platform_init+0xe>
   25078:	4b0b      	ldr	r3, [pc, #44]	; (250a8 <nrf_cc3xx_platform_init+0x38>)
   2507a:	681b      	ldr	r3, [r3, #0]
   2507c:	b92b      	cbnz	r3, 2508a <nrf_cc3xx_platform_init+0x1a>
   2507e:	f000 fea7 	bl	25dd0 <CC_LibInit>
   25082:	b930      	cbnz	r0, 25092 <nrf_cc3xx_platform_init+0x22>
   25084:	4b08      	ldr	r3, [pc, #32]	; (250a8 <nrf_cc3xx_platform_init+0x38>)
   25086:	2201      	movs	r2, #1
   25088:	601a      	str	r2, [r3, #0]
   2508a:	2301      	movs	r3, #1
   2508c:	6023      	str	r3, [r4, #0]
   2508e:	2000      	movs	r0, #0
   25090:	bd10      	pop	{r4, pc}
   25092:	3801      	subs	r0, #1
   25094:	2806      	cmp	r0, #6
   25096:	d901      	bls.n	2509c <nrf_cc3xx_platform_init+0x2c>
   25098:	4804      	ldr	r0, [pc, #16]	; (250ac <nrf_cc3xx_platform_init+0x3c>)
   2509a:	bd10      	pop	{r4, pc}
   2509c:	4b04      	ldr	r3, [pc, #16]	; (250b0 <nrf_cc3xx_platform_init+0x40>)
   2509e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   250a2:	bd10      	pop	{r4, pc}
   250a4:	20004098 	.word	0x20004098
   250a8:	2000409c 	.word	0x2000409c
   250ac:	ffff8ffe 	.word	0xffff8ffe
   250b0:	00031948 	.word	0x00031948

000250b4 <nrf_cc3xx_platform_abort>:
   250b4:	f3bf 8f4f 	dsb	sy
   250b8:	4905      	ldr	r1, [pc, #20]	; (250d0 <nrf_cc3xx_platform_abort+0x1c>)
   250ba:	4b06      	ldr	r3, [pc, #24]	; (250d4 <nrf_cc3xx_platform_abort+0x20>)
   250bc:	68ca      	ldr	r2, [r1, #12]
   250be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   250c2:	4313      	orrs	r3, r2
   250c4:	60cb      	str	r3, [r1, #12]
   250c6:	f3bf 8f4f 	dsb	sy
   250ca:	bf00      	nop
   250cc:	e7fd      	b.n	250ca <nrf_cc3xx_platform_abort+0x16>
   250ce:	bf00      	nop
   250d0:	e000ed00 	.word	0xe000ed00
   250d4:	05fa0004 	.word	0x05fa0004

000250d8 <CC_PalAbort>:
   250d8:	b410      	push	{r4}
   250da:	4b0a      	ldr	r3, [pc, #40]	; (25104 <CC_PalAbort+0x2c>)
   250dc:	490a      	ldr	r1, [pc, #40]	; (25108 <CC_PalAbort+0x30>)
   250de:	4c0b      	ldr	r4, [pc, #44]	; (2510c <CC_PalAbort+0x34>)
   250e0:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   250e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   250e8:	6849      	ldr	r1, [r1, #4]
   250ea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   250ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   250f2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   250f6:	2300      	movs	r3, #0
   250f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   250fc:	f85d 4b04 	ldr.w	r4, [sp], #4
   25100:	4708      	bx	r1
   25102:	bf00      	nop
   25104:	5002b000 	.word	0x5002b000
   25108:	20000a4c 	.word	0x20000a4c
   2510c:	5002a000 	.word	0x5002a000

00025110 <nrf_cc3xx_platform_set_abort>:
   25110:	e9d0 1200 	ldrd	r1, r2, [r0]
   25114:	4b01      	ldr	r3, [pc, #4]	; (2511c <nrf_cc3xx_platform_set_abort+0xc>)
   25116:	e9c3 1200 	strd	r1, r2, [r3]
   2511a:	4770      	bx	lr
   2511c:	20000a4c 	.word	0x20000a4c

00025120 <nrf_cc3xx_platform_ctr_drbg_init>:
   25120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25124:	4c15      	ldr	r4, [pc, #84]	; (2517c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   25126:	4e16      	ldr	r6, [pc, #88]	; (25180 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   25128:	2800      	cmp	r0, #0
   2512a:	bf18      	it	ne
   2512c:	4604      	movne	r4, r0
   2512e:	b084      	sub	sp, #16
   25130:	6823      	ldr	r3, [r4, #0]
   25132:	42b3      	cmp	r3, r6
   25134:	d01e      	beq.n	25174 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   25136:	460d      	mov	r5, r1
   25138:	4620      	mov	r0, r4
   2513a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   2513e:	4617      	mov	r7, r2
   25140:	f000 f8ee 	bl	25320 <mbedtls_platform_zeroize>
   25144:	1d22      	adds	r2, r4, #4
   25146:	4610      	mov	r0, r2
   25148:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   2514c:	9203      	str	r2, [sp, #12]
   2514e:	f000 fd29 	bl	25ba4 <cc_mbedtls_entropy_init>
   25152:	4640      	mov	r0, r8
   25154:	f8cd 8008 	str.w	r8, [sp, #8]
   25158:	f000 fb54 	bl	25804 <cc_mbedtls_ctr_drbg_init>
   2515c:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
   25160:	4908      	ldr	r1, [pc, #32]	; (25184 <nrf_cc3xx_platform_ctr_drbg_init+0x64>)
   25162:	9700      	str	r7, [sp, #0]
   25164:	462b      	mov	r3, r5
   25166:	f000 fb63 	bl	25830 <cc_mbedtls_ctr_drbg_seed>
   2516a:	b900      	cbnz	r0, 2516e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   2516c:	6026      	str	r6, [r4, #0]
   2516e:	b004      	add	sp, #16
   25170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25174:	2000      	movs	r0, #0
   25176:	b004      	add	sp, #16
   25178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2517c:	200040a0 	.word	0x200040a0
   25180:	5ac9bca5 	.word	0x5ac9bca5
   25184:	00025c2d 	.word	0x00025c2d

00025188 <nrf_cc3xx_platform_ctr_drbg_get>:
   25188:	b570      	push	{r4, r5, r6, lr}
   2518a:	4d0d      	ldr	r5, [pc, #52]	; (251c0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   2518c:	2800      	cmp	r0, #0
   2518e:	bf18      	it	ne
   25190:	4605      	movne	r5, r0
   25192:	461e      	mov	r6, r3
   25194:	6828      	ldr	r0, [r5, #0]
   25196:	4b0b      	ldr	r3, [pc, #44]	; (251c4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   25198:	4298      	cmp	r0, r3
   2519a:	b082      	sub	sp, #8
   2519c:	d10d      	bne.n	251ba <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   2519e:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   251a2:	2500      	movs	r5, #0
   251a4:	9500      	str	r5, [sp, #0]
   251a6:	462b      	mov	r3, r5
   251a8:	4614      	mov	r4, r2
   251aa:	f000 fb8f 	bl	258cc <cc_mbedtls_ctr_drbg_random_with_add>
   251ae:	2800      	cmp	r0, #0
   251b0:	bf18      	it	ne
   251b2:	462c      	movne	r4, r5
   251b4:	6034      	str	r4, [r6, #0]
   251b6:	b002      	add	sp, #8
   251b8:	bd70      	pop	{r4, r5, r6, pc}
   251ba:	4803      	ldr	r0, [pc, #12]	; (251c8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   251bc:	e7fb      	b.n	251b6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   251be:	bf00      	nop
   251c0:	200040a0 	.word	0x200040a0
   251c4:	5ac9bca5 	.word	0x5ac9bca5
   251c8:	ffff8fe8 	.word	0xffff8fe8

000251cc <mutex_free>:
   251cc:	b510      	push	{r4, lr}
   251ce:	4604      	mov	r4, r0
   251d0:	b150      	cbz	r0, 251e8 <mutex_free+0x1c>
   251d2:	6863      	ldr	r3, [r4, #4]
   251d4:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   251d8:	d005      	beq.n	251e6 <mutex_free+0x1a>
   251da:	4a06      	ldr	r2, [pc, #24]	; (251f4 <mutex_free+0x28>)
   251dc:	4293      	cmp	r3, r2
   251de:	d002      	beq.n	251e6 <mutex_free+0x1a>
   251e0:	2300      	movs	r3, #0
   251e2:	6023      	str	r3, [r4, #0]
   251e4:	6062      	str	r2, [r4, #4]
   251e6:	bd10      	pop	{r4, pc}
   251e8:	4b03      	ldr	r3, [pc, #12]	; (251f8 <mutex_free+0x2c>)
   251ea:	4804      	ldr	r0, [pc, #16]	; (251fc <mutex_free+0x30>)
   251ec:	685b      	ldr	r3, [r3, #4]
   251ee:	4798      	blx	r3
   251f0:	e7ef      	b.n	251d2 <mutex_free+0x6>
   251f2:	bf00      	nop
   251f4:	a95c5f2c 	.word	0xa95c5f2c
   251f8:	20000a4c 	.word	0x20000a4c
   251fc:	00031964 	.word	0x00031964

00025200 <mutex_lock>:
   25200:	b1c8      	cbz	r0, 25236 <mutex_lock+0x36>
   25202:	6843      	ldr	r3, [r0, #4]
   25204:	4a0d      	ldr	r2, [pc, #52]	; (2523c <mutex_lock+0x3c>)
   25206:	4293      	cmp	r3, r2
   25208:	d013      	beq.n	25232 <mutex_lock+0x32>
   2520a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   2520e:	d00e      	beq.n	2522e <mutex_lock+0x2e>
   25210:	2301      	movs	r3, #1
   25212:	e850 2f00 	ldrex	r2, [r0]
   25216:	4619      	mov	r1, r3
   25218:	e840 1c00 	strex	ip, r1, [r0]
   2521c:	f09c 0f00 	teq	ip, #0
   25220:	d1f7      	bne.n	25212 <mutex_lock+0x12>
   25222:	2a01      	cmp	r2, #1
   25224:	d0f5      	beq.n	25212 <mutex_lock+0x12>
   25226:	f3bf 8f5f 	dmb	sy
   2522a:	2000      	movs	r0, #0
   2522c:	4770      	bx	lr
   2522e:	4804      	ldr	r0, [pc, #16]	; (25240 <mutex_lock+0x40>)
   25230:	4770      	bx	lr
   25232:	4804      	ldr	r0, [pc, #16]	; (25244 <mutex_lock+0x44>)
   25234:	4770      	bx	lr
   25236:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2523a:	4770      	bx	lr
   2523c:	a95c5f2c 	.word	0xa95c5f2c
   25240:	ffff8fe9 	.word	0xffff8fe9
   25244:	ffff8fea 	.word	0xffff8fea

00025248 <mutex_unlock>:
   25248:	b180      	cbz	r0, 2526c <mutex_unlock+0x24>
   2524a:	6843      	ldr	r3, [r0, #4]
   2524c:	4a09      	ldr	r2, [pc, #36]	; (25274 <mutex_unlock+0x2c>)
   2524e:	4293      	cmp	r3, r2
   25250:	d00a      	beq.n	25268 <mutex_unlock+0x20>
   25252:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   25256:	d005      	beq.n	25264 <mutex_unlock+0x1c>
   25258:	f3bf 8f5f 	dmb	sy
   2525c:	2300      	movs	r3, #0
   2525e:	6003      	str	r3, [r0, #0]
   25260:	4618      	mov	r0, r3
   25262:	4770      	bx	lr
   25264:	4804      	ldr	r0, [pc, #16]	; (25278 <mutex_unlock+0x30>)
   25266:	4770      	bx	lr
   25268:	4804      	ldr	r0, [pc, #16]	; (2527c <mutex_unlock+0x34>)
   2526a:	4770      	bx	lr
   2526c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25270:	4770      	bx	lr
   25272:	bf00      	nop
   25274:	a95c5f2c 	.word	0xa95c5f2c
   25278:	ffff8fe9 	.word	0xffff8fe9
   2527c:	ffff8fea 	.word	0xffff8fea

00025280 <mutex_init>:
   25280:	b510      	push	{r4, lr}
   25282:	4604      	mov	r4, r0
   25284:	b120      	cbz	r0, 25290 <mutex_init+0x10>
   25286:	4b04      	ldr	r3, [pc, #16]	; (25298 <mutex_init+0x18>)
   25288:	6063      	str	r3, [r4, #4]
   2528a:	2200      	movs	r2, #0
   2528c:	6022      	str	r2, [r4, #0]
   2528e:	bd10      	pop	{r4, pc}
   25290:	4802      	ldr	r0, [pc, #8]	; (2529c <mutex_init+0x1c>)
   25292:	f7ff ff21 	bl	250d8 <CC_PalAbort>
   25296:	e7f6      	b.n	25286 <mutex_init+0x6>
   25298:	3a00003a 	.word	0x3a00003a
   2529c:	0003198c 	.word	0x0003198c

000252a0 <nrf_cc3xx_platform_set_mutexes>:
   252a0:	b570      	push	{r4, r5, r6, lr}
   252a2:	e9d0 2300 	ldrd	r2, r3, [r0]
   252a6:	4c15      	ldr	r4, [pc, #84]	; (252fc <nrf_cc3xx_platform_set_mutexes+0x5c>)
   252a8:	4d15      	ldr	r5, [pc, #84]	; (25300 <nrf_cc3xx_platform_set_mutexes+0x60>)
   252aa:	6063      	str	r3, [r4, #4]
   252ac:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   252b0:	e9c4 3002 	strd	r3, r0, [r4, #8]
   252b4:	6022      	str	r2, [r4, #0]
   252b6:	4b13      	ldr	r3, [pc, #76]	; (25304 <nrf_cc3xx_platform_set_mutexes+0x64>)
   252b8:	6808      	ldr	r0, [r1, #0]
   252ba:	6018      	str	r0, [r3, #0]
   252bc:	6848      	ldr	r0, [r1, #4]
   252be:	6058      	str	r0, [r3, #4]
   252c0:	6888      	ldr	r0, [r1, #8]
   252c2:	6098      	str	r0, [r3, #8]
   252c4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   252c8:	60d8      	str	r0, [r3, #12]
   252ca:	6119      	str	r1, [r3, #16]
   252cc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   252d0:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   252d4:	d010      	beq.n	252f8 <nrf_cc3xx_platform_set_mutexes+0x58>
   252d6:	490c      	ldr	r1, [pc, #48]	; (25308 <nrf_cc3xx_platform_set_mutexes+0x68>)
   252d8:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   252dc:	2300      	movs	r3, #0
   252de:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   252e2:	f505 708a 	add.w	r0, r5, #276	; 0x114
   252e6:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   252ea:	4790      	blx	r2
   252ec:	6823      	ldr	r3, [r4, #0]
   252ee:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   252f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   252f6:	4718      	bx	r3
   252f8:	bd70      	pop	{r4, r5, r6, pc}
   252fa:	bf00      	nop
   252fc:	20000a5c 	.word	0x20000a5c
   25300:	200040a0 	.word	0x200040a0
   25304:	20000a6c 	.word	0x20000a6c
   25308:	a95c5f2c 	.word	0xa95c5f2c

0002530c <mbedtls_zeroize_internal>:
   2530c:	b138      	cbz	r0, 2531e <mbedtls_zeroize_internal+0x12>
   2530e:	b131      	cbz	r1, 2531e <mbedtls_zeroize_internal+0x12>
   25310:	4401      	add	r1, r0
   25312:	2200      	movs	r2, #0
   25314:	4603      	mov	r3, r0
   25316:	3001      	adds	r0, #1
   25318:	4281      	cmp	r1, r0
   2531a:	701a      	strb	r2, [r3, #0]
   2531c:	d1fa      	bne.n	25314 <mbedtls_zeroize_internal+0x8>
   2531e:	4770      	bx	lr

00025320 <mbedtls_platform_zeroize>:
   25320:	b138      	cbz	r0, 25332 <mbedtls_platform_zeroize+0x12>
   25322:	b131      	cbz	r1, 25332 <mbedtls_platform_zeroize+0x12>
   25324:	4401      	add	r1, r0
   25326:	2200      	movs	r2, #0
   25328:	4603      	mov	r3, r0
   2532a:	3001      	adds	r0, #1
   2532c:	4288      	cmp	r0, r1
   2532e:	701a      	strb	r2, [r3, #0]
   25330:	d1fa      	bne.n	25328 <mbedtls_platform_zeroize+0x8>
   25332:	4770      	bx	lr

00025334 <block_cipher_df>:
   25334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25338:	ed2d 8b02 	vpush	{d8}
   2533c:	b0b7      	sub	sp, #220	; 0xdc
   2533e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   25342:	9005      	str	r0, [sp, #20]
   25344:	f200 814e 	bhi.w	255e4 <block_cipher_df+0x2b0>
   25348:	4614      	mov	r4, r2
   2534a:	460d      	mov	r5, r1
   2534c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   25350:	2100      	movs	r1, #0
   25352:	48a6      	ldr	r0, [pc, #664]	; (255ec <block_cipher_df+0x2b8>)
   25354:	f008 ffc7 	bl	2e2e6 <memset>
   25358:	a819      	add	r0, sp, #100	; 0x64
   2535a:	f001 f9d9 	bl	26710 <cc_mbedtls_aes_init>
   2535e:	48a3      	ldr	r0, [pc, #652]	; (255ec <block_cipher_df+0x2b8>)
   25360:	2300      	movs	r3, #0
   25362:	8203      	strh	r3, [r0, #16]
   25364:	ba63      	rev16	r3, r4
   25366:	8243      	strh	r3, [r0, #18]
   25368:	2320      	movs	r3, #32
   2536a:	4629      	mov	r1, r5
   2536c:	75c3      	strb	r3, [r0, #23]
   2536e:	4605      	mov	r5, r0
   25370:	4622      	mov	r2, r4
   25372:	3018      	adds	r0, #24
   25374:	f008 ffa9 	bl	2e2ca <memcpy>
   25378:	192b      	adds	r3, r5, r4
   2537a:	2280      	movs	r2, #128	; 0x80
   2537c:	761a      	strb	r2, [r3, #24]
   2537e:	4b9c      	ldr	r3, [pc, #624]	; (255f0 <block_cipher_df+0x2bc>)
   25380:	930d      	str	r3, [sp, #52]	; 0x34
   25382:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25386:	930e      	str	r3, [sp, #56]	; 0x38
   25388:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   2538c:	930f      	str	r3, [sp, #60]	; 0x3c
   2538e:	a90d      	add	r1, sp, #52	; 0x34
   25390:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25394:	a819      	add	r0, sp, #100	; 0x64
   25396:	9310      	str	r3, [sp, #64]	; 0x40
   25398:	f001 f9d0 	bl	2673c <cc_mbedtls_aes_setkey_enc>
   2539c:	4605      	mov	r5, r0
   2539e:	2800      	cmp	r0, #0
   253a0:	f040 80fa 	bne.w	25598 <block_cipher_df+0x264>
   253a4:	f104 0319 	add.w	r3, r4, #25
   253a8:	f10d 0820 	add.w	r8, sp, #32
   253ac:	9306      	str	r3, [sp, #24]
   253ae:	ee08 8a10 	vmov	s16, r8
   253b2:	ab11      	add	r3, sp, #68	; 0x44
   253b4:	9304      	str	r3, [sp, #16]
   253b6:	9307      	str	r3, [sp, #28]
   253b8:	ee18 0a10 	vmov	r0, s16
   253bc:	2210      	movs	r2, #16
   253be:	2100      	movs	r1, #0
   253c0:	f008 ff91 	bl	2e2e6 <memset>
   253c4:	f8df a22c 	ldr.w	sl, [pc, #556]	; 255f4 <block_cipher_df+0x2c0>
   253c8:	9b06      	ldr	r3, [sp, #24]
   253ca:	9300      	str	r3, [sp, #0]
   253cc:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   253d0:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   253d4:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   253d8:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   253dc:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   253e0:	f89d 5020 	ldrb.w	r5, [sp, #32]
   253e4:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   253e8:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   253ec:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   253f0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   253f4:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   253f8:	ea8e 0e00 	eor.w	lr, lr, r0
   253fc:	ea8c 0c03 	eor.w	ip, ip, r3
   25400:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   25404:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   25408:	406a      	eors	r2, r5
   2540a:	4058      	eors	r0, r3
   2540c:	9b00      	ldr	r3, [sp, #0]
   2540e:	9202      	str	r2, [sp, #8]
   25410:	f10a 0a10 	add.w	sl, sl, #16
   25414:	f81a 2c1f 	ldrb.w	r2, [sl, #-31]
   25418:	461d      	mov	r5, r3
   2541a:	2b10      	cmp	r3, #16
   2541c:	bf94      	ite	ls
   2541e:	1add      	subls	r5, r3, r3
   25420:	3d10      	subhi	r5, #16
   25422:	f81a 3c13 	ldrb.w	r3, [sl, #-19]
   25426:	9500      	str	r5, [sp, #0]
   25428:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   2542c:	f81a 9c1e 	ldrb.w	r9, [sl, #-30]
   25430:	f81a 8c1a 	ldrb.w	r8, [sl, #-26]
   25434:	407b      	eors	r3, r7
   25436:	9301      	str	r3, [sp, #4]
   25438:	406a      	eors	r2, r5
   2543a:	f81a 3c1b 	ldrb.w	r3, [sl, #-27]
   2543e:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   25442:	4061      	eors	r1, r4
   25444:	406b      	eors	r3, r5
   25446:	2400      	movs	r4, #0
   25448:	9303      	str	r3, [sp, #12]
   2544a:	ea8b 0b06 	eor.w	fp, fp, r6
   2544e:	9b01      	ldr	r3, [sp, #4]
   25450:	f81a 6c12 	ldrb.w	r6, [sl, #-18]
   25454:	4627      	mov	r7, r4
   25456:	f36b 0707 	bfi	r7, fp, #0, #8
   2545a:	4625      	mov	r5, r4
   2545c:	f363 270f 	bfi	r7, r3, #8, #8
   25460:	f36e 0407 	bfi	r4, lr, #0, #8
   25464:	46be      	mov	lr, r7
   25466:	462f      	mov	r7, r5
   25468:	f361 0707 	bfi	r7, r1, #0, #8
   2546c:	9902      	ldr	r1, [sp, #8]
   2546e:	9b03      	ldr	r3, [sp, #12]
   25470:	f361 0507 	bfi	r5, r1, #0, #8
   25474:	f362 250f 	bfi	r5, r2, #8, #8
   25478:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   2547c:	f81a 1c1d 	ldrb.w	r1, [sl, #-29]
   25480:	f36c 240f 	bfi	r4, ip, #8, #8
   25484:	f363 270f 	bfi	r7, r3, #8, #8
   25488:	ea82 0909 	eor.w	r9, r2, r9
   2548c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   25490:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   25494:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   25498:	ea83 0808 	eor.w	r8, r3, r8
   2549c:	ea8c 0c06 	eor.w	ip, ip, r6
   254a0:	4676      	mov	r6, lr
   254a2:	f368 4717 	bfi	r7, r8, #16, #8
   254a6:	f36c 4617 	bfi	r6, ip, #16, #8
   254aa:	f81a 8c11 	ldrb.w	r8, [sl, #-17]
   254ae:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   254b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   254b6:	f81a ec15 	ldrb.w	lr, [sl, #-21]
   254ba:	ea8c 0c08 	eor.w	ip, ip, r8
   254be:	404a      	eors	r2, r1
   254c0:	f36c 661f 	bfi	r6, ip, #24, #8
   254c4:	f81a 1c19 	ldrb.w	r1, [sl, #-25]
   254c8:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   254cc:	960b      	str	r6, [sp, #44]	; 0x2c
   254ce:	f369 4517 	bfi	r5, r9, #16, #8
   254d2:	f362 651f 	bfi	r5, r2, #24, #8
   254d6:	404b      	eors	r3, r1
   254d8:	f360 4417 	bfi	r4, r0, #16, #8
   254dc:	9508      	str	r5, [sp, #32]
   254de:	ea8c 050e 	eor.w	r5, ip, lr
   254e2:	f363 671f 	bfi	r7, r3, #24, #8
   254e6:	f365 641f 	bfi	r4, r5, #24, #8
   254ea:	ee18 3a10 	vmov	r3, s16
   254ee:	ee18 2a10 	vmov	r2, s16
   254f2:	2101      	movs	r1, #1
   254f4:	a819      	add	r0, sp, #100	; 0x64
   254f6:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   254fa:	f001 f939 	bl	26770 <cc_mbedtls_aes_crypt_ecb>
   254fe:	2800      	cmp	r0, #0
   25500:	d16c      	bne.n	255dc <block_cipher_df+0x2a8>
   25502:	9b00      	ldr	r3, [sp, #0]
   25504:	2b00      	cmp	r3, #0
   25506:	f47f af61 	bne.w	253cc <block_cipher_df+0x98>
   2550a:	9c07      	ldr	r4, [sp, #28]
   2550c:	2210      	movs	r2, #16
   2550e:	4620      	mov	r0, r4
   25510:	ee18 1a10 	vmov	r1, s16
   25514:	3410      	adds	r4, #16
   25516:	9407      	str	r4, [sp, #28]
   25518:	f008 fed7 	bl	2e2ca <memcpy>
   2551c:	4a33      	ldr	r2, [pc, #204]	; (255ec <block_cipher_df+0x2b8>)
   2551e:	78d3      	ldrb	r3, [r2, #3]
   25520:	3301      	adds	r3, #1
   25522:	70d3      	strb	r3, [r2, #3]
   25524:	ab19      	add	r3, sp, #100	; 0x64
   25526:	429c      	cmp	r4, r3
   25528:	ee18 8a10 	vmov	r8, s16
   2552c:	f47f af44 	bne.w	253b8 <block_cipher_df+0x84>
   25530:	9904      	ldr	r1, [sp, #16]
   25532:	2280      	movs	r2, #128	; 0x80
   25534:	4618      	mov	r0, r3
   25536:	f001 f901 	bl	2673c <cc_mbedtls_aes_setkey_enc>
   2553a:	4605      	mov	r5, r0
   2553c:	bb80      	cbnz	r0, 255a0 <block_cipher_df+0x26c>
   2553e:	9c05      	ldr	r4, [sp, #20]
   25540:	f104 0620 	add.w	r6, r4, #32
   25544:	ab15      	add	r3, sp, #84	; 0x54
   25546:	461a      	mov	r2, r3
   25548:	2101      	movs	r1, #1
   2554a:	a819      	add	r0, sp, #100	; 0x64
   2554c:	f001 f910 	bl	26770 <cc_mbedtls_aes_crypt_ecb>
   25550:	2210      	movs	r2, #16
   25552:	4605      	mov	r5, r0
   25554:	bb20      	cbnz	r0, 255a0 <block_cipher_df+0x26c>
   25556:	4620      	mov	r0, r4
   25558:	a915      	add	r1, sp, #84	; 0x54
   2555a:	3410      	adds	r4, #16
   2555c:	f008 feb5 	bl	2e2ca <memcpy>
   25560:	42b4      	cmp	r4, r6
   25562:	d1ef      	bne.n	25544 <block_cipher_df+0x210>
   25564:	a819      	add	r0, sp, #100	; 0x64
   25566:	f001 f8e3 	bl	26730 <cc_mbedtls_aes_free>
   2556a:	4820      	ldr	r0, [pc, #128]	; (255ec <block_cipher_df+0x2b8>)
   2556c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   25570:	f7ff fed6 	bl	25320 <mbedtls_platform_zeroize>
   25574:	9804      	ldr	r0, [sp, #16]
   25576:	2120      	movs	r1, #32
   25578:	f7ff fed2 	bl	25320 <mbedtls_platform_zeroize>
   2557c:	a80d      	add	r0, sp, #52	; 0x34
   2557e:	2110      	movs	r1, #16
   25580:	f7ff fece 	bl	25320 <mbedtls_platform_zeroize>
   25584:	4640      	mov	r0, r8
   25586:	2110      	movs	r1, #16
   25588:	f7ff feca 	bl	25320 <mbedtls_platform_zeroize>
   2558c:	4628      	mov	r0, r5
   2558e:	b037      	add	sp, #220	; 0xdc
   25590:	ecbd 8b02 	vpop	{d8}
   25594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25598:	ab11      	add	r3, sp, #68	; 0x44
   2559a:	9304      	str	r3, [sp, #16]
   2559c:	f10d 0820 	add.w	r8, sp, #32
   255a0:	a819      	add	r0, sp, #100	; 0x64
   255a2:	f001 f8c5 	bl	26730 <cc_mbedtls_aes_free>
   255a6:	4811      	ldr	r0, [pc, #68]	; (255ec <block_cipher_df+0x2b8>)
   255a8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   255ac:	f7ff feb8 	bl	25320 <mbedtls_platform_zeroize>
   255b0:	9804      	ldr	r0, [sp, #16]
   255b2:	2120      	movs	r1, #32
   255b4:	f7ff feb4 	bl	25320 <mbedtls_platform_zeroize>
   255b8:	a80d      	add	r0, sp, #52	; 0x34
   255ba:	2110      	movs	r1, #16
   255bc:	f7ff feb0 	bl	25320 <mbedtls_platform_zeroize>
   255c0:	4640      	mov	r0, r8
   255c2:	2110      	movs	r1, #16
   255c4:	f7ff feac 	bl	25320 <mbedtls_platform_zeroize>
   255c8:	9805      	ldr	r0, [sp, #20]
   255ca:	2120      	movs	r1, #32
   255cc:	f7ff fea8 	bl	25320 <mbedtls_platform_zeroize>
   255d0:	4628      	mov	r0, r5
   255d2:	b037      	add	sp, #220	; 0xdc
   255d4:	ecbd 8b02 	vpop	{d8}
   255d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255dc:	ee18 8a10 	vmov	r8, s16
   255e0:	4605      	mov	r5, r0
   255e2:	e7dd      	b.n	255a0 <block_cipher_df+0x26c>
   255e4:	f06f 0537 	mvn.w	r5, #55	; 0x37
   255e8:	e7f2      	b.n	255d0 <block_cipher_df+0x29c>
   255ea:	bf00      	nop
   255ec:	20004270 	.word	0x20004270
   255f0:	03020100 	.word	0x03020100
   255f4:	20004280 	.word	0x20004280

000255f8 <ctr_drbg_update_internal>:
   255f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255fc:	b088      	sub	sp, #32
   255fe:	4604      	mov	r4, r0
   25600:	460d      	mov	r5, r1
   25602:	2220      	movs	r2, #32
   25604:	2100      	movs	r1, #0
   25606:	4668      	mov	r0, sp
   25608:	f008 fe6d 	bl	2e2e6 <memset>
   2560c:	f104 0620 	add.w	r6, r4, #32
   25610:	466f      	mov	r7, sp
   25612:	7be2      	ldrb	r2, [r4, #15]
   25614:	3201      	adds	r2, #1
   25616:	b2d2      	uxtb	r2, r2
   25618:	73e2      	strb	r2, [r4, #15]
   2561a:	2a00      	cmp	r2, #0
   2561c:	d14d      	bne.n	256ba <ctr_drbg_update_internal+0xc2>
   2561e:	7ba2      	ldrb	r2, [r4, #14]
   25620:	3201      	adds	r2, #1
   25622:	b2d2      	uxtb	r2, r2
   25624:	73a2      	strb	r2, [r4, #14]
   25626:	2a00      	cmp	r2, #0
   25628:	d147      	bne.n	256ba <ctr_drbg_update_internal+0xc2>
   2562a:	7b63      	ldrb	r3, [r4, #13]
   2562c:	3301      	adds	r3, #1
   2562e:	b2db      	uxtb	r3, r3
   25630:	7363      	strb	r3, [r4, #13]
   25632:	2b00      	cmp	r3, #0
   25634:	d141      	bne.n	256ba <ctr_drbg_update_internal+0xc2>
   25636:	7b23      	ldrb	r3, [r4, #12]
   25638:	3301      	adds	r3, #1
   2563a:	b2db      	uxtb	r3, r3
   2563c:	7323      	strb	r3, [r4, #12]
   2563e:	2b00      	cmp	r3, #0
   25640:	d13b      	bne.n	256ba <ctr_drbg_update_internal+0xc2>
   25642:	7ae3      	ldrb	r3, [r4, #11]
   25644:	3301      	adds	r3, #1
   25646:	b2db      	uxtb	r3, r3
   25648:	72e3      	strb	r3, [r4, #11]
   2564a:	2b00      	cmp	r3, #0
   2564c:	d135      	bne.n	256ba <ctr_drbg_update_internal+0xc2>
   2564e:	7aa3      	ldrb	r3, [r4, #10]
   25650:	3301      	adds	r3, #1
   25652:	b2db      	uxtb	r3, r3
   25654:	72a3      	strb	r3, [r4, #10]
   25656:	2b00      	cmp	r3, #0
   25658:	d12f      	bne.n	256ba <ctr_drbg_update_internal+0xc2>
   2565a:	7a63      	ldrb	r3, [r4, #9]
   2565c:	3301      	adds	r3, #1
   2565e:	b2db      	uxtb	r3, r3
   25660:	7263      	strb	r3, [r4, #9]
   25662:	bb53      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   25664:	7a23      	ldrb	r3, [r4, #8]
   25666:	3301      	adds	r3, #1
   25668:	b2db      	uxtb	r3, r3
   2566a:	7223      	strb	r3, [r4, #8]
   2566c:	bb2b      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   2566e:	79e3      	ldrb	r3, [r4, #7]
   25670:	3301      	adds	r3, #1
   25672:	b2db      	uxtb	r3, r3
   25674:	71e3      	strb	r3, [r4, #7]
   25676:	bb03      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   25678:	79a3      	ldrb	r3, [r4, #6]
   2567a:	3301      	adds	r3, #1
   2567c:	b2db      	uxtb	r3, r3
   2567e:	71a3      	strb	r3, [r4, #6]
   25680:	b9db      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   25682:	7963      	ldrb	r3, [r4, #5]
   25684:	3301      	adds	r3, #1
   25686:	b2db      	uxtb	r3, r3
   25688:	7163      	strb	r3, [r4, #5]
   2568a:	b9b3      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   2568c:	7923      	ldrb	r3, [r4, #4]
   2568e:	3301      	adds	r3, #1
   25690:	b2db      	uxtb	r3, r3
   25692:	7123      	strb	r3, [r4, #4]
   25694:	b98b      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   25696:	78e3      	ldrb	r3, [r4, #3]
   25698:	3301      	adds	r3, #1
   2569a:	b2db      	uxtb	r3, r3
   2569c:	70e3      	strb	r3, [r4, #3]
   2569e:	b963      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   256a0:	78a3      	ldrb	r3, [r4, #2]
   256a2:	3301      	adds	r3, #1
   256a4:	b2db      	uxtb	r3, r3
   256a6:	70a3      	strb	r3, [r4, #2]
   256a8:	b93b      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   256aa:	7863      	ldrb	r3, [r4, #1]
   256ac:	3301      	adds	r3, #1
   256ae:	b2db      	uxtb	r3, r3
   256b0:	7063      	strb	r3, [r4, #1]
   256b2:	b913      	cbnz	r3, 256ba <ctr_drbg_update_internal+0xc2>
   256b4:	7823      	ldrb	r3, [r4, #0]
   256b6:	3301      	adds	r3, #1
   256b8:	7023      	strb	r3, [r4, #0]
   256ba:	463b      	mov	r3, r7
   256bc:	4622      	mov	r2, r4
   256be:	2101      	movs	r1, #1
   256c0:	4630      	mov	r0, r6
   256c2:	f001 f855 	bl	26770 <cc_mbedtls_aes_crypt_ecb>
   256c6:	4680      	mov	r8, r0
   256c8:	bb50      	cbnz	r0, 25720 <ctr_drbg_update_internal+0x128>
   256ca:	3710      	adds	r7, #16
   256cc:	ab08      	add	r3, sp, #32
   256ce:	429f      	cmp	r7, r3
   256d0:	d19f      	bne.n	25612 <ctr_drbg_update_internal+0x1a>
   256d2:	9a00      	ldr	r2, [sp, #0]
   256d4:	682b      	ldr	r3, [r5, #0]
   256d6:	9906      	ldr	r1, [sp, #24]
   256d8:	4053      	eors	r3, r2
   256da:	9300      	str	r3, [sp, #0]
   256dc:	9a01      	ldr	r2, [sp, #4]
   256de:	686b      	ldr	r3, [r5, #4]
   256e0:	4053      	eors	r3, r2
   256e2:	9301      	str	r3, [sp, #4]
   256e4:	9a02      	ldr	r2, [sp, #8]
   256e6:	68ab      	ldr	r3, [r5, #8]
   256e8:	4053      	eors	r3, r2
   256ea:	9302      	str	r3, [sp, #8]
   256ec:	9a03      	ldr	r2, [sp, #12]
   256ee:	68eb      	ldr	r3, [r5, #12]
   256f0:	4053      	eors	r3, r2
   256f2:	9303      	str	r3, [sp, #12]
   256f4:	9a04      	ldr	r2, [sp, #16]
   256f6:	692b      	ldr	r3, [r5, #16]
   256f8:	4053      	eors	r3, r2
   256fa:	9304      	str	r3, [sp, #16]
   256fc:	9a05      	ldr	r2, [sp, #20]
   256fe:	696b      	ldr	r3, [r5, #20]
   25700:	4053      	eors	r3, r2
   25702:	69aa      	ldr	r2, [r5, #24]
   25704:	9305      	str	r3, [sp, #20]
   25706:	404a      	eors	r2, r1
   25708:	69eb      	ldr	r3, [r5, #28]
   2570a:	9206      	str	r2, [sp, #24]
   2570c:	9a07      	ldr	r2, [sp, #28]
   2570e:	4630      	mov	r0, r6
   25710:	4053      	eors	r3, r2
   25712:	4669      	mov	r1, sp
   25714:	2280      	movs	r2, #128	; 0x80
   25716:	9307      	str	r3, [sp, #28]
   25718:	f001 f810 	bl	2673c <cc_mbedtls_aes_setkey_enc>
   2571c:	4680      	mov	r8, r0
   2571e:	b138      	cbz	r0, 25730 <ctr_drbg_update_internal+0x138>
   25720:	4668      	mov	r0, sp
   25722:	2120      	movs	r1, #32
   25724:	f7ff fdfc 	bl	25320 <mbedtls_platform_zeroize>
   25728:	4640      	mov	r0, r8
   2572a:	b008      	add	sp, #32
   2572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25730:	2210      	movs	r2, #16
   25732:	eb0d 0102 	add.w	r1, sp, r2
   25736:	4620      	mov	r0, r4
   25738:	f008 fdc7 	bl	2e2ca <memcpy>
   2573c:	e7f0      	b.n	25720 <ctr_drbg_update_internal+0x128>
   2573e:	bf00      	nop

00025740 <mbedtls_ctr_drbg_reseed_internal>:
   25740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25744:	4604      	mov	r4, r0
   25746:	6980      	ldr	r0, [r0, #24]
   25748:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   2574c:	d852      	bhi.n	257f4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2574e:	461d      	mov	r5, r3
   25750:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   25754:	42ab      	cmp	r3, r5
   25756:	d34d      	bcc.n	257f4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25758:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   2575c:	1a18      	subs	r0, r3, r0
   2575e:	4290      	cmp	r0, r2
   25760:	4616      	mov	r6, r2
   25762:	d347      	bcc.n	257f4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25764:	f8df 9098 	ldr.w	r9, [pc, #152]	; 25800 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   25768:	f44f 72c0 	mov.w	r2, #384	; 0x180
   2576c:	460f      	mov	r7, r1
   2576e:	4648      	mov	r0, r9
   25770:	2100      	movs	r1, #0
   25772:	f008 fdb8 	bl	2e2e6 <memset>
   25776:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2577a:	69a2      	ldr	r2, [r4, #24]
   2577c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   25780:	4649      	mov	r1, r9
   25782:	4798      	blx	r3
   25784:	2800      	cmp	r0, #0
   25786:	d138      	bne.n	257fa <mbedtls_ctr_drbg_reseed_internal+0xba>
   25788:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2578c:	b13d      	cbz	r5, 2579e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   2578e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   25792:	462a      	mov	r2, r5
   25794:	eb09 0108 	add.w	r1, r9, r8
   25798:	4798      	blx	r3
   2579a:	bb70      	cbnz	r0, 257fa <mbedtls_ctr_drbg_reseed_internal+0xba>
   2579c:	44a8      	add	r8, r5
   2579e:	b107      	cbz	r7, 257a2 <mbedtls_ctr_drbg_reseed_internal+0x62>
   257a0:	b9c6      	cbnz	r6, 257d4 <mbedtls_ctr_drbg_reseed_internal+0x94>
   257a2:	4917      	ldr	r1, [pc, #92]	; (25800 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   257a4:	4642      	mov	r2, r8
   257a6:	4608      	mov	r0, r1
   257a8:	f7ff fdc4 	bl	25334 <block_cipher_df>
   257ac:	4605      	mov	r5, r0
   257ae:	b138      	cbz	r0, 257c0 <mbedtls_ctr_drbg_reseed_internal+0x80>
   257b0:	4813      	ldr	r0, [pc, #76]	; (25800 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   257b2:	f44f 71c0 	mov.w	r1, #384	; 0x180
   257b6:	f7ff fdb3 	bl	25320 <mbedtls_platform_zeroize>
   257ba:	4628      	mov	r0, r5
   257bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   257c0:	490f      	ldr	r1, [pc, #60]	; (25800 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   257c2:	4620      	mov	r0, r4
   257c4:	f7ff ff18 	bl	255f8 <ctr_drbg_update_internal>
   257c8:	4605      	mov	r5, r0
   257ca:	2800      	cmp	r0, #0
   257cc:	d1f0      	bne.n	257b0 <mbedtls_ctr_drbg_reseed_internal+0x70>
   257ce:	2301      	movs	r3, #1
   257d0:	6123      	str	r3, [r4, #16]
   257d2:	e7ed      	b.n	257b0 <mbedtls_ctr_drbg_reseed_internal+0x70>
   257d4:	eb09 0008 	add.w	r0, r9, r8
   257d8:	4639      	mov	r1, r7
   257da:	4632      	mov	r2, r6
   257dc:	f008 fd75 	bl	2e2ca <memcpy>
   257e0:	4907      	ldr	r1, [pc, #28]	; (25800 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   257e2:	44b0      	add	r8, r6
   257e4:	4642      	mov	r2, r8
   257e6:	4608      	mov	r0, r1
   257e8:	f7ff fda4 	bl	25334 <block_cipher_df>
   257ec:	4605      	mov	r5, r0
   257ee:	2800      	cmp	r0, #0
   257f0:	d1de      	bne.n	257b0 <mbedtls_ctr_drbg_reseed_internal+0x70>
   257f2:	e7e5      	b.n	257c0 <mbedtls_ctr_drbg_reseed_internal+0x80>
   257f4:	f06f 0537 	mvn.w	r5, #55	; 0x37
   257f8:	e7df      	b.n	257ba <mbedtls_ctr_drbg_reseed_internal+0x7a>
   257fa:	f06f 0533 	mvn.w	r5, #51	; 0x33
   257fe:	e7dc      	b.n	257ba <mbedtls_ctr_drbg_reseed_internal+0x7a>
   25800:	20004410 	.word	0x20004410

00025804 <cc_mbedtls_ctr_drbg_init>:
   25804:	b510      	push	{r4, lr}
   25806:	22a4      	movs	r2, #164	; 0xa4
   25808:	4604      	mov	r4, r0
   2580a:	2100      	movs	r1, #0
   2580c:	f008 fd6b 	bl	2e2e6 <memset>
   25810:	4b06      	ldr	r3, [pc, #24]	; (2582c <cc_mbedtls_ctr_drbg_init+0x28>)
   25812:	f04f 31ff 	mov.w	r1, #4294967295
   25816:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   2581a:	6121      	str	r1, [r4, #16]
   2581c:	61e2      	str	r2, [r4, #28]
   2581e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   25822:	681b      	ldr	r3, [r3, #0]
   25824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25828:	4718      	bx	r3
   2582a:	bf00      	nop
   2582c:	20000ab0 	.word	0x20000ab0

00025830 <cc_mbedtls_ctr_drbg_seed>:
   25830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25834:	b087      	sub	sp, #28
   25836:	4605      	mov	r5, r0
   25838:	460f      	mov	r7, r1
   2583a:	4616      	mov	r6, r2
   2583c:	2100      	movs	r1, #0
   2583e:	2210      	movs	r2, #16
   25840:	a802      	add	r0, sp, #8
   25842:	4699      	mov	r9, r3
   25844:	f008 fd4f 	bl	2e2e6 <memset>
   25848:	4b1e      	ldr	r3, [pc, #120]	; (258c4 <cc_mbedtls_ctr_drbg_seed+0x94>)
   2584a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2584e:	681b      	ldr	r3, [r3, #0]
   25850:	4640      	mov	r0, r8
   25852:	4798      	blx	r3
   25854:	b120      	cbz	r0, 25860 <cc_mbedtls_ctr_drbg_seed+0x30>
   25856:	4604      	mov	r4, r0
   25858:	4620      	mov	r0, r4
   2585a:	b007      	add	sp, #28
   2585c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25860:	f105 0020 	add.w	r0, r5, #32
   25864:	9001      	str	r0, [sp, #4]
   25866:	f000 ff53 	bl	26710 <cc_mbedtls_aes_init>
   2586a:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   2586e:	69ae      	ldr	r6, [r5, #24]
   25870:	9801      	ldr	r0, [sp, #4]
   25872:	692b      	ldr	r3, [r5, #16]
   25874:	b9e6      	cbnz	r6, 258b0 <cc_mbedtls_ctr_drbg_seed+0x80>
   25876:	2220      	movs	r2, #32
   25878:	2b00      	cmp	r3, #0
   2587a:	61aa      	str	r2, [r5, #24]
   2587c:	db1f      	blt.n	258be <cc_mbedtls_ctr_drbg_seed+0x8e>
   2587e:	461e      	mov	r6, r3
   25880:	a902      	add	r1, sp, #8
   25882:	2280      	movs	r2, #128	; 0x80
   25884:	f000 ff5a 	bl	2673c <cc_mbedtls_aes_setkey_enc>
   25888:	4604      	mov	r4, r0
   2588a:	b930      	cbnz	r0, 2589a <cc_mbedtls_ctr_drbg_seed+0x6a>
   2588c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2588e:	4633      	mov	r3, r6
   25890:	4649      	mov	r1, r9
   25892:	4628      	mov	r0, r5
   25894:	f7ff ff54 	bl	25740 <mbedtls_ctr_drbg_reseed_internal>
   25898:	4604      	mov	r4, r0
   2589a:	4b0b      	ldr	r3, [pc, #44]	; (258c8 <cc_mbedtls_ctr_drbg_seed+0x98>)
   2589c:	4640      	mov	r0, r8
   2589e:	681b      	ldr	r3, [r3, #0]
   258a0:	4798      	blx	r3
   258a2:	2800      	cmp	r0, #0
   258a4:	bf18      	it	ne
   258a6:	4604      	movne	r4, r0
   258a8:	4620      	mov	r0, r4
   258aa:	b007      	add	sp, #28
   258ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   258b0:	2b00      	cmp	r3, #0
   258b2:	dae4      	bge.n	2587e <cc_mbedtls_ctr_drbg_seed+0x4e>
   258b4:	2e17      	cmp	r6, #23
   258b6:	d802      	bhi.n	258be <cc_mbedtls_ctr_drbg_seed+0x8e>
   258b8:	3601      	adds	r6, #1
   258ba:	0876      	lsrs	r6, r6, #1
   258bc:	e7e0      	b.n	25880 <cc_mbedtls_ctr_drbg_seed+0x50>
   258be:	2600      	movs	r6, #0
   258c0:	e7de      	b.n	25880 <cc_mbedtls_ctr_drbg_seed+0x50>
   258c2:	bf00      	nop
   258c4:	20000ab4 	.word	0x20000ab4
   258c8:	20000ab8 	.word	0x20000ab8

000258cc <cc_mbedtls_ctr_drbg_random_with_add>:
   258cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   258d0:	b08d      	sub	sp, #52	; 0x34
   258d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   258d6:	9f16      	ldr	r7, [sp, #88]	; 0x58
   258d8:	f200 80e3 	bhi.w	25aa2 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   258dc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   258e0:	f200 80dc 	bhi.w	25a9c <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   258e4:	4604      	mov	r4, r0
   258e6:	4615      	mov	r5, r2
   258e8:	460e      	mov	r6, r1
   258ea:	2220      	movs	r2, #32
   258ec:	2100      	movs	r1, #0
   258ee:	a804      	add	r0, sp, #16
   258f0:	4699      	mov	r9, r3
   258f2:	f008 fcf8 	bl	2e2e6 <memset>
   258f6:	4b6c      	ldr	r3, [pc, #432]	; (25aa8 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   258f8:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   258fc:	681b      	ldr	r3, [r3, #0]
   258fe:	4640      	mov	r0, r8
   25900:	4798      	blx	r3
   25902:	4683      	mov	fp, r0
   25904:	2800      	cmp	r0, #0
   25906:	f040 8092 	bne.w	25a2e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2590a:	6922      	ldr	r2, [r4, #16]
   2590c:	69e3      	ldr	r3, [r4, #28]
   2590e:	429a      	cmp	r2, r3
   25910:	f300 8091 	bgt.w	25a36 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   25914:	6963      	ldr	r3, [r4, #20]
   25916:	2b00      	cmp	r3, #0
   25918:	f040 808d 	bne.w	25a36 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   2591c:	2f00      	cmp	r7, #0
   2591e:	f040 80a9 	bne.w	25a74 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   25922:	f8df 9188 	ldr.w	r9, [pc, #392]	; 25aac <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   25926:	46ea      	mov	sl, sp
   25928:	2d00      	cmp	r5, #0
   2592a:	f000 8098 	beq.w	25a5e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2592e:	f104 0720 	add.w	r7, r4, #32
   25932:	46ea      	mov	sl, sp
   25934:	e00e      	b.n	25954 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   25936:	2d10      	cmp	r5, #16
   25938:	46ab      	mov	fp, r5
   2593a:	bf28      	it	cs
   2593c:	f04f 0b10 	movcs.w	fp, #16
   25940:	4630      	mov	r0, r6
   25942:	465a      	mov	r2, fp
   25944:	4651      	mov	r1, sl
   25946:	f008 fcc0 	bl	2e2ca <memcpy>
   2594a:	ebb5 050b 	subs.w	r5, r5, fp
   2594e:	445e      	add	r6, fp
   25950:	f000 8085 	beq.w	25a5e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   25954:	7be0      	ldrb	r0, [r4, #15]
   25956:	3001      	adds	r0, #1
   25958:	b2c0      	uxtb	r0, r0
   2595a:	73e0      	strb	r0, [r4, #15]
   2595c:	2800      	cmp	r0, #0
   2595e:	d14d      	bne.n	259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   25960:	7ba3      	ldrb	r3, [r4, #14]
   25962:	3301      	adds	r3, #1
   25964:	b2db      	uxtb	r3, r3
   25966:	73a3      	strb	r3, [r4, #14]
   25968:	2b00      	cmp	r3, #0
   2596a:	d147      	bne.n	259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2596c:	7b63      	ldrb	r3, [r4, #13]
   2596e:	3301      	adds	r3, #1
   25970:	b2db      	uxtb	r3, r3
   25972:	7363      	strb	r3, [r4, #13]
   25974:	2b00      	cmp	r3, #0
   25976:	d141      	bne.n	259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   25978:	7b23      	ldrb	r3, [r4, #12]
   2597a:	3301      	adds	r3, #1
   2597c:	b2db      	uxtb	r3, r3
   2597e:	7323      	strb	r3, [r4, #12]
   25980:	2b00      	cmp	r3, #0
   25982:	d13b      	bne.n	259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   25984:	7ae3      	ldrb	r3, [r4, #11]
   25986:	3301      	adds	r3, #1
   25988:	b2db      	uxtb	r3, r3
   2598a:	72e3      	strb	r3, [r4, #11]
   2598c:	2b00      	cmp	r3, #0
   2598e:	d135      	bne.n	259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   25990:	7aa3      	ldrb	r3, [r4, #10]
   25992:	3301      	adds	r3, #1
   25994:	b2db      	uxtb	r3, r3
   25996:	72a3      	strb	r3, [r4, #10]
   25998:	2b00      	cmp	r3, #0
   2599a:	d12f      	bne.n	259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2599c:	7a63      	ldrb	r3, [r4, #9]
   2599e:	3301      	adds	r3, #1
   259a0:	b2db      	uxtb	r3, r3
   259a2:	7263      	strb	r3, [r4, #9]
   259a4:	bb53      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259a6:	7a23      	ldrb	r3, [r4, #8]
   259a8:	3301      	adds	r3, #1
   259aa:	b2db      	uxtb	r3, r3
   259ac:	7223      	strb	r3, [r4, #8]
   259ae:	bb2b      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259b0:	79e3      	ldrb	r3, [r4, #7]
   259b2:	3301      	adds	r3, #1
   259b4:	b2db      	uxtb	r3, r3
   259b6:	71e3      	strb	r3, [r4, #7]
   259b8:	bb03      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259ba:	79a3      	ldrb	r3, [r4, #6]
   259bc:	3301      	adds	r3, #1
   259be:	b2db      	uxtb	r3, r3
   259c0:	71a3      	strb	r3, [r4, #6]
   259c2:	b9db      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259c4:	7963      	ldrb	r3, [r4, #5]
   259c6:	3301      	adds	r3, #1
   259c8:	b2db      	uxtb	r3, r3
   259ca:	7163      	strb	r3, [r4, #5]
   259cc:	b9b3      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259ce:	7923      	ldrb	r3, [r4, #4]
   259d0:	3301      	adds	r3, #1
   259d2:	b2db      	uxtb	r3, r3
   259d4:	7123      	strb	r3, [r4, #4]
   259d6:	b98b      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259d8:	78e3      	ldrb	r3, [r4, #3]
   259da:	3301      	adds	r3, #1
   259dc:	b2db      	uxtb	r3, r3
   259de:	70e3      	strb	r3, [r4, #3]
   259e0:	b963      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259e2:	78a3      	ldrb	r3, [r4, #2]
   259e4:	3301      	adds	r3, #1
   259e6:	b2db      	uxtb	r3, r3
   259e8:	70a3      	strb	r3, [r4, #2]
   259ea:	b93b      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259ec:	7863      	ldrb	r3, [r4, #1]
   259ee:	3301      	adds	r3, #1
   259f0:	b2db      	uxtb	r3, r3
   259f2:	7063      	strb	r3, [r4, #1]
   259f4:	b913      	cbnz	r3, 259fc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   259f6:	7823      	ldrb	r3, [r4, #0]
   259f8:	3301      	adds	r3, #1
   259fa:	7023      	strb	r3, [r4, #0]
   259fc:	4653      	mov	r3, sl
   259fe:	4622      	mov	r2, r4
   25a00:	2101      	movs	r1, #1
   25a02:	4638      	mov	r0, r7
   25a04:	f000 feb4 	bl	26770 <cc_mbedtls_aes_crypt_ecb>
   25a08:	4683      	mov	fp, r0
   25a0a:	2800      	cmp	r0, #0
   25a0c:	d093      	beq.n	25936 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   25a0e:	f8d9 3000 	ldr.w	r3, [r9]
   25a12:	4640      	mov	r0, r8
   25a14:	4798      	blx	r3
   25a16:	2120      	movs	r1, #32
   25a18:	4603      	mov	r3, r0
   25a1a:	a804      	add	r0, sp, #16
   25a1c:	2b00      	cmp	r3, #0
   25a1e:	bf18      	it	ne
   25a20:	469b      	movne	fp, r3
   25a22:	f7ff fc7d 	bl	25320 <mbedtls_platform_zeroize>
   25a26:	2110      	movs	r1, #16
   25a28:	4650      	mov	r0, sl
   25a2a:	f7ff fc79 	bl	25320 <mbedtls_platform_zeroize>
   25a2e:	4658      	mov	r0, fp
   25a30:	b00d      	add	sp, #52	; 0x34
   25a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a36:	4649      	mov	r1, r9
   25a38:	463a      	mov	r2, r7
   25a3a:	2300      	movs	r3, #0
   25a3c:	4620      	mov	r0, r4
   25a3e:	f7ff fe7f 	bl	25740 <mbedtls_ctr_drbg_reseed_internal>
   25a42:	f8df 9068 	ldr.w	r9, [pc, #104]	; 25aac <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   25a46:	2800      	cmp	r0, #0
   25a48:	f43f af6d 	beq.w	25926 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   25a4c:	f8d9 3000 	ldr.w	r3, [r9]
   25a50:	4640      	mov	r0, r8
   25a52:	4798      	blx	r3
   25a54:	4683      	mov	fp, r0
   25a56:	2800      	cmp	r0, #0
   25a58:	f43f af65 	beq.w	25926 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   25a5c:	e7e7      	b.n	25a2e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   25a5e:	a904      	add	r1, sp, #16
   25a60:	4620      	mov	r0, r4
   25a62:	f7ff fdc9 	bl	255f8 <ctr_drbg_update_internal>
   25a66:	4683      	mov	fp, r0
   25a68:	2800      	cmp	r0, #0
   25a6a:	d1d0      	bne.n	25a0e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   25a6c:	6923      	ldr	r3, [r4, #16]
   25a6e:	3301      	adds	r3, #1
   25a70:	6123      	str	r3, [r4, #16]
   25a72:	e7cc      	b.n	25a0e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   25a74:	463a      	mov	r2, r7
   25a76:	4649      	mov	r1, r9
   25a78:	a804      	add	r0, sp, #16
   25a7a:	f7ff fc5b 	bl	25334 <block_cipher_df>
   25a7e:	4683      	mov	fp, r0
   25a80:	b118      	cbz	r0, 25a8a <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   25a82:	f8df 9028 	ldr.w	r9, [pc, #40]	; 25aac <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   25a86:	46ea      	mov	sl, sp
   25a88:	e7c1      	b.n	25a0e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   25a8a:	a904      	add	r1, sp, #16
   25a8c:	4620      	mov	r0, r4
   25a8e:	f7ff fdb3 	bl	255f8 <ctr_drbg_update_internal>
   25a92:	4683      	mov	fp, r0
   25a94:	2800      	cmp	r0, #0
   25a96:	f43f af44 	beq.w	25922 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   25a9a:	e7f2      	b.n	25a82 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   25a9c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   25aa0:	e7c5      	b.n	25a2e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   25aa2:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   25aa6:	e7c2      	b.n	25a2e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   25aa8:	20000ab4 	.word	0x20000ab4
   25aac:	20000ab8 	.word	0x20000ab8

00025ab0 <entropy_update>:
   25ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25ab4:	2b20      	cmp	r3, #32
   25ab6:	b08b      	sub	sp, #44	; 0x2c
   25ab8:	461d      	mov	r5, r3
   25aba:	4606      	mov	r6, r0
   25abc:	4688      	mov	r8, r1
   25abe:	4691      	mov	r9, r2
   25ac0:	d826      	bhi.n	25b10 <entropy_update+0x60>
   25ac2:	b2db      	uxtb	r3, r3
   25ac4:	af02      	add	r7, sp, #8
   25ac6:	f88d 8004 	strb.w	r8, [sp, #4]
   25aca:	46b0      	mov	r8, r6
   25acc:	f88d 3005 	strb.w	r3, [sp, #5]
   25ad0:	f858 1b04 	ldr.w	r1, [r8], #4
   25ad4:	b921      	cbnz	r1, 25ae0 <entropy_update+0x30>
   25ad6:	4640      	mov	r0, r8
   25ad8:	f000 fe8e 	bl	267f8 <cc_mbedtls_sha256_starts>
   25adc:	4604      	mov	r4, r0
   25ade:	b940      	cbnz	r0, 25af2 <entropy_update+0x42>
   25ae0:	2301      	movs	r3, #1
   25ae2:	6033      	str	r3, [r6, #0]
   25ae4:	2202      	movs	r2, #2
   25ae6:	a901      	add	r1, sp, #4
   25ae8:	4640      	mov	r0, r8
   25aea:	f000 fe99 	bl	26820 <cc_mbedtls_sha256_update>
   25aee:	4604      	mov	r4, r0
   25af0:	b138      	cbz	r0, 25b02 <entropy_update+0x52>
   25af2:	4638      	mov	r0, r7
   25af4:	2120      	movs	r1, #32
   25af6:	f7ff fc13 	bl	25320 <mbedtls_platform_zeroize>
   25afa:	4620      	mov	r0, r4
   25afc:	b00b      	add	sp, #44	; 0x2c
   25afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25b02:	462a      	mov	r2, r5
   25b04:	4649      	mov	r1, r9
   25b06:	4640      	mov	r0, r8
   25b08:	f000 fe8a 	bl	26820 <cc_mbedtls_sha256_update>
   25b0c:	4604      	mov	r4, r0
   25b0e:	e7f0      	b.n	25af2 <entropy_update+0x42>
   25b10:	af02      	add	r7, sp, #8
   25b12:	4619      	mov	r1, r3
   25b14:	4610      	mov	r0, r2
   25b16:	2300      	movs	r3, #0
   25b18:	463a      	mov	r2, r7
   25b1a:	f001 f809 	bl	26b30 <cc_mbedtls_sha256>
   25b1e:	4604      	mov	r4, r0
   25b20:	2800      	cmp	r0, #0
   25b22:	d1e6      	bne.n	25af2 <entropy_update+0x42>
   25b24:	2320      	movs	r3, #32
   25b26:	46b9      	mov	r9, r7
   25b28:	461d      	mov	r5, r3
   25b2a:	e7cc      	b.n	25ac6 <entropy_update+0x16>

00025b2c <entropy_gather_internal.part.0>:
   25b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25b2e:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   25b32:	b0a7      	sub	sp, #156	; 0x9c
   25b34:	2b00      	cmp	r3, #0
   25b36:	bfd8      	it	le
   25b38:	ae02      	addle	r6, sp, #8
   25b3a:	dd2c      	ble.n	25b96 <entropy_gather_internal.part.0+0x6a>
   25b3c:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   25b40:	4605      	mov	r5, r0
   25b42:	2300      	movs	r3, #0
   25b44:	ae02      	add	r6, sp, #8
   25b46:	9301      	str	r3, [sp, #4]
   25b48:	f1a4 0701 	sub.w	r7, r4, #1
   25b4c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   25b50:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   25b54:	ab01      	add	r3, sp, #4
   25b56:	2290      	movs	r2, #144	; 0x90
   25b58:	4631      	mov	r1, r6
   25b5a:	47a0      	blx	r4
   25b5c:	fab7 f787 	clz	r7, r7
   25b60:	097f      	lsrs	r7, r7, #5
   25b62:	4604      	mov	r4, r0
   25b64:	b910      	cbnz	r0, 25b6c <entropy_gather_internal.part.0+0x40>
   25b66:	9b01      	ldr	r3, [sp, #4]
   25b68:	b93b      	cbnz	r3, 25b7a <entropy_gather_internal.part.0+0x4e>
   25b6a:	b1a7      	cbz	r7, 25b96 <entropy_gather_internal.part.0+0x6a>
   25b6c:	4630      	mov	r0, r6
   25b6e:	2190      	movs	r1, #144	; 0x90
   25b70:	f7ff fbd6 	bl	25320 <mbedtls_platform_zeroize>
   25b74:	4620      	mov	r0, r4
   25b76:	b027      	add	sp, #156	; 0x9c
   25b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25b7a:	4601      	mov	r1, r0
   25b7c:	4632      	mov	r2, r6
   25b7e:	4628      	mov	r0, r5
   25b80:	f7ff ff96 	bl	25ab0 <entropy_update>
   25b84:	b950      	cbnz	r0, 25b9c <entropy_gather_internal.part.0+0x70>
   25b86:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   25b8a:	9a01      	ldr	r2, [sp, #4]
   25b8c:	4413      	add	r3, r2
   25b8e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   25b92:	2f00      	cmp	r7, #0
   25b94:	d1ea      	bne.n	25b6c <entropy_gather_internal.part.0+0x40>
   25b96:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   25b9a:	e7e7      	b.n	25b6c <entropy_gather_internal.part.0+0x40>
   25b9c:	4604      	mov	r4, r0
   25b9e:	4620      	mov	r0, r4
   25ba0:	b027      	add	sp, #156	; 0x9c
   25ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025ba4 <cc_mbedtls_entropy_init>:
   25ba4:	b570      	push	{r4, r5, r6, lr}
   25ba6:	2500      	movs	r5, #0
   25ba8:	4604      	mov	r4, r0
   25baa:	f504 7688 	add.w	r6, r4, #272	; 0x110
   25bae:	2214      	movs	r2, #20
   25bb0:	4629      	mov	r1, r5
   25bb2:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   25bb6:	30fc      	adds	r0, #252	; 0xfc
   25bb8:	f008 fb95 	bl	2e2e6 <memset>
   25bbc:	2208      	movs	r2, #8
   25bbe:	4629      	mov	r1, r5
   25bc0:	4630      	mov	r0, r6
   25bc2:	f008 fb90 	bl	2e2e6 <memset>
   25bc6:	4b15      	ldr	r3, [pc, #84]	; (25c1c <cc_mbedtls_entropy_init+0x78>)
   25bc8:	4630      	mov	r0, r6
   25bca:	681b      	ldr	r3, [r3, #0]
   25bcc:	4798      	blx	r3
   25bce:	4620      	mov	r0, r4
   25bd0:	f840 5b04 	str.w	r5, [r0], #4
   25bd4:	f000 fdf6 	bl	267c4 <cc_mbedtls_sha256_init>
   25bd8:	4b11      	ldr	r3, [pc, #68]	; (25c20 <cc_mbedtls_entropy_init+0x7c>)
   25bda:	4630      	mov	r0, r6
   25bdc:	681b      	ldr	r3, [r3, #0]
   25bde:	4798      	blx	r3
   25be0:	b9d8      	cbnz	r0, 25c1a <cc_mbedtls_entropy_init+0x76>
   25be2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   25be6:	42ab      	cmp	r3, r5
   25be8:	dc11      	bgt.n	25c0e <cc_mbedtls_entropy_init+0x6a>
   25bea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   25bee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   25bf2:	2120      	movs	r1, #32
   25bf4:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   25bf8:	2101      	movs	r1, #1
   25bfa:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   25bfe:	3301      	adds	r3, #1
   25c00:	4908      	ldr	r1, [pc, #32]	; (25c24 <cc_mbedtls_entropy_init+0x80>)
   25c02:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   25c06:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   25c0a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   25c0e:	4b06      	ldr	r3, [pc, #24]	; (25c28 <cc_mbedtls_entropy_init+0x84>)
   25c10:	4630      	mov	r0, r6
   25c12:	681b      	ldr	r3, [r3, #0]
   25c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25c18:	4718      	bx	r3
   25c1a:	bd70      	pop	{r4, r5, r6, pc}
   25c1c:	20000ab0 	.word	0x20000ab0
   25c20:	20000ab4 	.word	0x20000ab4
   25c24:	00026615 	.word	0x00026615
   25c28:	20000ab8 	.word	0x20000ab8

00025c2c <cc_mbedtls_entropy_func>:
   25c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25c30:	2a20      	cmp	r2, #32
   25c32:	b088      	sub	sp, #32
   25c34:	d876      	bhi.n	25d24 <cc_mbedtls_entropy_func+0xf8>
   25c36:	4b3d      	ldr	r3, [pc, #244]	; (25d2c <cc_mbedtls_entropy_func+0x100>)
   25c38:	f500 7988 	add.w	r9, r0, #272	; 0x110
   25c3c:	681b      	ldr	r3, [r3, #0]
   25c3e:	4604      	mov	r4, r0
   25c40:	4648      	mov	r0, r9
   25c42:	4617      	mov	r7, r2
   25c44:	4688      	mov	r8, r1
   25c46:	4798      	blx	r3
   25c48:	4605      	mov	r5, r0
   25c4a:	bba0      	cbnz	r0, 25cb6 <cc_mbedtls_entropy_func+0x8a>
   25c4c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   25c50:	f240 1601 	movw	r6, #257	; 0x101
   25c54:	e001      	b.n	25c5a <cc_mbedtls_entropy_func+0x2e>
   25c56:	3e01      	subs	r6, #1
   25c58:	d060      	beq.n	25d1c <cc_mbedtls_entropy_func+0xf0>
   25c5a:	4620      	mov	r0, r4
   25c5c:	b37b      	cbz	r3, 25cbe <cc_mbedtls_entropy_func+0x92>
   25c5e:	f7ff ff65 	bl	25b2c <entropy_gather_internal.part.0>
   25c62:	4605      	mov	r5, r0
   25c64:	bb68      	cbnz	r0, 25cc2 <cc_mbedtls_entropy_func+0x96>
   25c66:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   25c6a:	2b00      	cmp	r3, #0
   25c6c:	ddf3      	ble.n	25c56 <cc_mbedtls_entropy_func+0x2a>
   25c6e:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   25c72:	4290      	cmp	r0, r2
   25c74:	d3ef      	bcc.n	25c56 <cc_mbedtls_entropy_func+0x2a>
   25c76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   25c7a:	2a01      	cmp	r2, #1
   25c7c:	d1eb      	bne.n	25c56 <cc_mbedtls_entropy_func+0x2a>
   25c7e:	281f      	cmp	r0, #31
   25c80:	d9e9      	bls.n	25c56 <cc_mbedtls_entropy_func+0x2a>
   25c82:	466e      	mov	r6, sp
   25c84:	4629      	mov	r1, r5
   25c86:	2220      	movs	r2, #32
   25c88:	4630      	mov	r0, r6
   25c8a:	f104 0a04 	add.w	sl, r4, #4
   25c8e:	f008 fb2a 	bl	2e2e6 <memset>
   25c92:	4631      	mov	r1, r6
   25c94:	4650      	mov	r0, sl
   25c96:	f000 fded 	bl	26874 <cc_mbedtls_sha256_finish>
   25c9a:	4605      	mov	r5, r0
   25c9c:	b198      	cbz	r0, 25cc6 <cc_mbedtls_entropy_func+0x9a>
   25c9e:	2120      	movs	r1, #32
   25ca0:	4630      	mov	r0, r6
   25ca2:	f7ff fb3d 	bl	25320 <mbedtls_platform_zeroize>
   25ca6:	4b22      	ldr	r3, [pc, #136]	; (25d30 <cc_mbedtls_entropy_func+0x104>)
   25ca8:	4648      	mov	r0, r9
   25caa:	681b      	ldr	r3, [r3, #0]
   25cac:	4798      	blx	r3
   25cae:	2800      	cmp	r0, #0
   25cb0:	bf18      	it	ne
   25cb2:	f06f 051d 	mvnne.w	r5, #29
   25cb6:	4628      	mov	r0, r5
   25cb8:	b008      	add	sp, #32
   25cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25cbe:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   25cc2:	466e      	mov	r6, sp
   25cc4:	e7eb      	b.n	25c9e <cc_mbedtls_entropy_func+0x72>
   25cc6:	4650      	mov	r0, sl
   25cc8:	f000 fd90 	bl	267ec <cc_mbedtls_sha256_free>
   25ccc:	4650      	mov	r0, sl
   25cce:	f000 fd79 	bl	267c4 <cc_mbedtls_sha256_init>
   25cd2:	4629      	mov	r1, r5
   25cd4:	4650      	mov	r0, sl
   25cd6:	f000 fd8f 	bl	267f8 <cc_mbedtls_sha256_starts>
   25cda:	4605      	mov	r5, r0
   25cdc:	2800      	cmp	r0, #0
   25cde:	d1de      	bne.n	25c9e <cc_mbedtls_entropy_func+0x72>
   25ce0:	4650      	mov	r0, sl
   25ce2:	2220      	movs	r2, #32
   25ce4:	4631      	mov	r1, r6
   25ce6:	f000 fd9b 	bl	26820 <cc_mbedtls_sha256_update>
   25cea:	4605      	mov	r5, r0
   25cec:	2800      	cmp	r0, #0
   25cee:	d1d6      	bne.n	25c9e <cc_mbedtls_entropy_func+0x72>
   25cf0:	4603      	mov	r3, r0
   25cf2:	4632      	mov	r2, r6
   25cf4:	2120      	movs	r1, #32
   25cf6:	4630      	mov	r0, r6
   25cf8:	f000 ff1a 	bl	26b30 <cc_mbedtls_sha256>
   25cfc:	4605      	mov	r5, r0
   25cfe:	2800      	cmp	r0, #0
   25d00:	d1cd      	bne.n	25c9e <cc_mbedtls_entropy_func+0x72>
   25d02:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   25d06:	2b00      	cmp	r3, #0
   25d08:	bfc4      	itt	gt
   25d0a:	2300      	movgt	r3, #0
   25d0c:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   25d10:	463a      	mov	r2, r7
   25d12:	4640      	mov	r0, r8
   25d14:	4631      	mov	r1, r6
   25d16:	f008 fad8 	bl	2e2ca <memcpy>
   25d1a:	e7c0      	b.n	25c9e <cc_mbedtls_entropy_func+0x72>
   25d1c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   25d20:	466e      	mov	r6, sp
   25d22:	e7bc      	b.n	25c9e <cc_mbedtls_entropy_func+0x72>
   25d24:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   25d28:	e7c5      	b.n	25cb6 <cc_mbedtls_entropy_func+0x8a>
   25d2a:	bf00      	nop
   25d2c:	20000ab4 	.word	0x20000ab4
   25d30:	20000ab8 	.word	0x20000ab8

00025d34 <RndStartupTest.constprop.0>:
   25d34:	b530      	push	{r4, r5, lr}
   25d36:	b08d      	sub	sp, #52	; 0x34
   25d38:	2100      	movs	r1, #0
   25d3a:	2228      	movs	r2, #40	; 0x28
   25d3c:	a802      	add	r0, sp, #8
   25d3e:	9101      	str	r1, [sp, #4]
   25d40:	f008 fad1 	bl	2e2e6 <memset>
   25d44:	a802      	add	r0, sp, #8
   25d46:	f000 ff1b 	bl	26b80 <RNG_PLAT_SetUserRngParameters>
   25d4a:	4604      	mov	r4, r0
   25d4c:	b110      	cbz	r0, 25d54 <RndStartupTest.constprop.0+0x20>
   25d4e:	4620      	mov	r0, r4
   25d50:	b00d      	add	sp, #52	; 0x34
   25d52:	bd30      	pop	{r4, r5, pc}
   25d54:	4d18      	ldr	r5, [pc, #96]	; (25db8 <RndStartupTest.constprop.0+0x84>)
   25d56:	f04f 31ff 	mov.w	r1, #4294967295
   25d5a:	6828      	ldr	r0, [r5, #0]
   25d5c:	f000 f946 	bl	25fec <CC_PalMutexLock>
   25d60:	4604      	mov	r4, r0
   25d62:	b9c0      	cbnz	r0, 25d96 <RndStartupTest.constprop.0+0x62>
   25d64:	2000      	movs	r0, #0
   25d66:	f000 f971 	bl	2604c <CC_PalPowerSaveModeSelect>
   25d6a:	bb00      	cbnz	r0, 25dae <RndStartupTest.constprop.0+0x7a>
   25d6c:	4a13      	ldr	r2, [pc, #76]	; (25dbc <RndStartupTest.constprop.0+0x88>)
   25d6e:	a902      	add	r1, sp, #8
   25d70:	a801      	add	r0, sp, #4
   25d72:	f000 fc41 	bl	265f8 <LLF_RND_RunTrngStartupTest>
   25d76:	4604      	mov	r4, r0
   25d78:	2001      	movs	r0, #1
   25d7a:	f000 f967 	bl	2604c <CC_PalPowerSaveModeSelect>
   25d7e:	b990      	cbnz	r0, 25da6 <RndStartupTest.constprop.0+0x72>
   25d80:	6828      	ldr	r0, [r5, #0]
   25d82:	f000 f93b 	bl	25ffc <CC_PalMutexUnlock>
   25d86:	2800      	cmp	r0, #0
   25d88:	d0e1      	beq.n	25d4e <RndStartupTest.constprop.0+0x1a>
   25d8a:	480d      	ldr	r0, [pc, #52]	; (25dc0 <RndStartupTest.constprop.0+0x8c>)
   25d8c:	f7ff f9a4 	bl	250d8 <CC_PalAbort>
   25d90:	4620      	mov	r0, r4
   25d92:	b00d      	add	sp, #52	; 0x34
   25d94:	bd30      	pop	{r4, r5, pc}
   25d96:	480b      	ldr	r0, [pc, #44]	; (25dc4 <RndStartupTest.constprop.0+0x90>)
   25d98:	f7ff f99e 	bl	250d8 <CC_PalAbort>
   25d9c:	2c01      	cmp	r4, #1
   25d9e:	bf08      	it	eq
   25da0:	2405      	moveq	r4, #5
   25da2:	d0ed      	beq.n	25d80 <RndStartupTest.constprop.0+0x4c>
   25da4:	e7de      	b.n	25d64 <RndStartupTest.constprop.0+0x30>
   25da6:	4808      	ldr	r0, [pc, #32]	; (25dc8 <RndStartupTest.constprop.0+0x94>)
   25da8:	f7ff f996 	bl	250d8 <CC_PalAbort>
   25dac:	e7e8      	b.n	25d80 <RndStartupTest.constprop.0+0x4c>
   25dae:	4807      	ldr	r0, [pc, #28]	; (25dcc <RndStartupTest.constprop.0+0x98>)
   25db0:	f7ff f992 	bl	250d8 <CC_PalAbort>
   25db4:	e7da      	b.n	25d6c <RndStartupTest.constprop.0+0x38>
   25db6:	bf00      	nop
   25db8:	20000aac 	.word	0x20000aac
   25dbc:	200045fc 	.word	0x200045fc
   25dc0:	00031a08 	.word	0x00031a08
   25dc4:	000319b0 	.word	0x000319b0
   25dc8:	000319e8 	.word	0x000319e8
   25dcc:	000319c8 	.word	0x000319c8

00025dd0 <CC_LibInit>:
   25dd0:	b530      	push	{r4, r5, lr}
   25dd2:	b083      	sub	sp, #12
   25dd4:	f000 f85c 	bl	25e90 <CC_HalInit>
   25dd8:	b128      	cbz	r0, 25de6 <CC_LibInit+0x16>
   25dda:	f000 f8ab 	bl	25f34 <CC_PalTerminate>
   25dde:	2403      	movs	r4, #3
   25de0:	4620      	mov	r0, r4
   25de2:	b003      	add	sp, #12
   25de4:	bd30      	pop	{r4, r5, pc}
   25de6:	f000 f877 	bl	25ed8 <CC_PalInit>
   25dea:	b9d8      	cbnz	r0, 25e24 <CC_LibInit+0x54>
   25dec:	f000 f92e 	bl	2604c <CC_PalPowerSaveModeSelect>
   25df0:	b9e0      	cbnz	r0, 25e2c <CC_LibInit+0x5c>
   25df2:	4c22      	ldr	r4, [pc, #136]	; (25e7c <CC_LibInit+0xac>)
   25df4:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   25df8:	0e1b      	lsrs	r3, r3, #24
   25dfa:	2bf0      	cmp	r3, #240	; 0xf0
   25dfc:	d10a      	bne.n	25e14 <CC_LibInit+0x44>
   25dfe:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   25e02:	4b1f      	ldr	r3, [pc, #124]	; (25e80 <CC_LibInit+0xb0>)
   25e04:	429a      	cmp	r2, r3
   25e06:	d031      	beq.n	25e6c <CC_LibInit+0x9c>
   25e08:	f000 f844 	bl	25e94 <CC_HalTerminate>
   25e0c:	2407      	movs	r4, #7
   25e0e:	f000 f891 	bl	25f34 <CC_PalTerminate>
   25e12:	e7e5      	b.n	25de0 <CC_LibInit+0x10>
   25e14:	f000 f83e 	bl	25e94 <CC_HalTerminate>
   25e18:	f000 f88c 	bl	25f34 <CC_PalTerminate>
   25e1c:	2406      	movs	r4, #6
   25e1e:	4620      	mov	r0, r4
   25e20:	b003      	add	sp, #12
   25e22:	bd30      	pop	{r4, r5, pc}
   25e24:	2404      	movs	r4, #4
   25e26:	4620      	mov	r0, r4
   25e28:	b003      	add	sp, #12
   25e2a:	bd30      	pop	{r4, r5, pc}
   25e2c:	f000 f832 	bl	25e94 <CC_HalTerminate>
   25e30:	f000 f880 	bl	25f34 <CC_PalTerminate>
   25e34:	f7ff ff7e 	bl	25d34 <RndStartupTest.constprop.0>
   25e38:	4604      	mov	r4, r0
   25e3a:	b998      	cbnz	r0, 25e64 <CC_LibInit+0x94>
   25e3c:	4d11      	ldr	r5, [pc, #68]	; (25e84 <CC_LibInit+0xb4>)
   25e3e:	682b      	ldr	r3, [r5, #0]
   25e40:	2b00      	cmp	r3, #0
   25e42:	d1cd      	bne.n	25de0 <CC_LibInit+0x10>
   25e44:	4602      	mov	r2, r0
   25e46:	4601      	mov	r1, r0
   25e48:	f7ff f96a 	bl	25120 <nrf_cc3xx_platform_ctr_drbg_init>
   25e4c:	b950      	cbnz	r0, 25e64 <CC_LibInit+0x94>
   25e4e:	490e      	ldr	r1, [pc, #56]	; (25e88 <CC_LibInit+0xb8>)
   25e50:	ab01      	add	r3, sp, #4
   25e52:	2268      	movs	r2, #104	; 0x68
   25e54:	f7ff f998 	bl	25188 <nrf_cc3xx_platform_ctr_drbg_get>
   25e58:	b920      	cbnz	r0, 25e64 <CC_LibInit+0x94>
   25e5a:	4b0c      	ldr	r3, [pc, #48]	; (25e8c <CC_LibInit+0xbc>)
   25e5c:	602b      	str	r3, [r5, #0]
   25e5e:	4620      	mov	r0, r4
   25e60:	b003      	add	sp, #12
   25e62:	bd30      	pop	{r4, r5, pc}
   25e64:	2405      	movs	r4, #5
   25e66:	4620      	mov	r0, r4
   25e68:	b003      	add	sp, #12
   25e6a:	bd30      	pop	{r4, r5, pc}
   25e6c:	2001      	movs	r0, #1
   25e6e:	f000 f8ed 	bl	2604c <CC_PalPowerSaveModeSelect>
   25e72:	2800      	cmp	r0, #0
   25e74:	d1da      	bne.n	25e2c <CC_LibInit+0x5c>
   25e76:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   25e7a:	e7db      	b.n	25e34 <CC_LibInit+0x64>
   25e7c:	5002b000 	.word	0x5002b000
   25e80:	20e00000 	.word	0x20e00000
   25e84:	200045f8 	.word	0x200045f8
   25e88:	20004590 	.word	0x20004590
   25e8c:	5a5aea5a 	.word	0x5a5aea5a

00025e90 <CC_HalInit>:
   25e90:	2000      	movs	r0, #0
   25e92:	4770      	bx	lr

00025e94 <CC_HalTerminate>:
   25e94:	2000      	movs	r0, #0
   25e96:	4770      	bx	lr

00025e98 <CC_HalClearInterruptBit>:
   25e98:	0543      	lsls	r3, r0, #21
   25e9a:	d504      	bpl.n	25ea6 <CC_HalClearInterruptBit+0xe>
   25e9c:	4b04      	ldr	r3, [pc, #16]	; (25eb0 <CC_HalClearInterruptBit+0x18>)
   25e9e:	f04f 32ff 	mov.w	r2, #4294967295
   25ea2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   25ea6:	4b02      	ldr	r3, [pc, #8]	; (25eb0 <CC_HalClearInterruptBit+0x18>)
   25ea8:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   25eac:	4770      	bx	lr
   25eae:	bf00      	nop
   25eb0:	5002b000 	.word	0x5002b000

00025eb4 <CC_HalMaskInterrupt>:
   25eb4:	4b01      	ldr	r3, [pc, #4]	; (25ebc <CC_HalMaskInterrupt+0x8>)
   25eb6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   25eba:	4770      	bx	lr
   25ebc:	5002b000 	.word	0x5002b000

00025ec0 <CC_HalWaitInterrupt>:
   25ec0:	b108      	cbz	r0, 25ec6 <CC_HalWaitInterrupt+0x6>
   25ec2:	f000 b86b 	b.w	25f9c <CC_PalWaitInterrupt>
   25ec6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   25eca:	4770      	bx	lr

00025ecc <CC_HalWaitInterruptRND>:
   25ecc:	b108      	cbz	r0, 25ed2 <CC_HalWaitInterruptRND+0x6>
   25ece:	f000 b84f 	b.w	25f70 <CC_PalWaitInterruptRND>
   25ed2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   25ed6:	4770      	bx	lr

00025ed8 <CC_PalInit>:
   25ed8:	b510      	push	{r4, lr}
   25eda:	4811      	ldr	r0, [pc, #68]	; (25f20 <CC_PalInit+0x48>)
   25edc:	f000 f872 	bl	25fc4 <CC_PalMutexCreate>
   25ee0:	b100      	cbz	r0, 25ee4 <CC_PalInit+0xc>
   25ee2:	bd10      	pop	{r4, pc}
   25ee4:	480f      	ldr	r0, [pc, #60]	; (25f24 <CC_PalInit+0x4c>)
   25ee6:	f000 f86d 	bl	25fc4 <CC_PalMutexCreate>
   25eea:	2800      	cmp	r0, #0
   25eec:	d1f9      	bne.n	25ee2 <CC_PalInit+0xa>
   25eee:	4c0e      	ldr	r4, [pc, #56]	; (25f28 <CC_PalInit+0x50>)
   25ef0:	4620      	mov	r0, r4
   25ef2:	f000 f867 	bl	25fc4 <CC_PalMutexCreate>
   25ef6:	2800      	cmp	r0, #0
   25ef8:	d1f3      	bne.n	25ee2 <CC_PalInit+0xa>
   25efa:	4b0c      	ldr	r3, [pc, #48]	; (25f2c <CC_PalInit+0x54>)
   25efc:	480c      	ldr	r0, [pc, #48]	; (25f30 <CC_PalInit+0x58>)
   25efe:	601c      	str	r4, [r3, #0]
   25f00:	f000 f860 	bl	25fc4 <CC_PalMutexCreate>
   25f04:	4601      	mov	r1, r0
   25f06:	2800      	cmp	r0, #0
   25f08:	d1eb      	bne.n	25ee2 <CC_PalInit+0xa>
   25f0a:	f000 f82d 	bl	25f68 <CC_PalDmaInit>
   25f0e:	4604      	mov	r4, r0
   25f10:	b108      	cbz	r0, 25f16 <CC_PalInit+0x3e>
   25f12:	4620      	mov	r0, r4
   25f14:	bd10      	pop	{r4, pc}
   25f16:	f000 f87b 	bl	26010 <CC_PalPowerSaveModeInit>
   25f1a:	4620      	mov	r0, r4
   25f1c:	e7fa      	b.n	25f14 <CC_PalInit+0x3c>
   25f1e:	bf00      	nop
   25f20:	20000aa8 	.word	0x20000aa8
   25f24:	20000a9c 	.word	0x20000a9c
   25f28:	20000aa4 	.word	0x20000aa4
   25f2c:	20000aac 	.word	0x20000aac
   25f30:	20000aa0 	.word	0x20000aa0

00025f34 <CC_PalTerminate>:
   25f34:	b508      	push	{r3, lr}
   25f36:	4808      	ldr	r0, [pc, #32]	; (25f58 <CC_PalTerminate+0x24>)
   25f38:	f000 f84e 	bl	25fd8 <CC_PalMutexDestroy>
   25f3c:	4807      	ldr	r0, [pc, #28]	; (25f5c <CC_PalTerminate+0x28>)
   25f3e:	f000 f84b 	bl	25fd8 <CC_PalMutexDestroy>
   25f42:	4807      	ldr	r0, [pc, #28]	; (25f60 <CC_PalTerminate+0x2c>)
   25f44:	f000 f848 	bl	25fd8 <CC_PalMutexDestroy>
   25f48:	4806      	ldr	r0, [pc, #24]	; (25f64 <CC_PalTerminate+0x30>)
   25f4a:	f000 f845 	bl	25fd8 <CC_PalMutexDestroy>
   25f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25f52:	f000 b80b 	b.w	25f6c <CC_PalDmaTerminate>
   25f56:	bf00      	nop
   25f58:	20000aa8 	.word	0x20000aa8
   25f5c:	20000a9c 	.word	0x20000a9c
   25f60:	20000aa4 	.word	0x20000aa4
   25f64:	20000aa0 	.word	0x20000aa0

00025f68 <CC_PalDmaInit>:
   25f68:	2000      	movs	r0, #0
   25f6a:	4770      	bx	lr

00025f6c <CC_PalDmaTerminate>:
   25f6c:	4770      	bx	lr
   25f6e:	bf00      	nop

00025f70 <CC_PalWaitInterruptRND>:
   25f70:	b410      	push	{r4}
   25f72:	4c09      	ldr	r4, [pc, #36]	; (25f98 <CC_PalWaitInterruptRND+0x28>)
   25f74:	4602      	mov	r2, r0
   25f76:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   25f7a:	4213      	tst	r3, r2
   25f7c:	d0fb      	beq.n	25f76 <CC_PalWaitInterruptRND+0x6>
   25f7e:	b121      	cbz	r1, 25f8a <CC_PalWaitInterruptRND+0x1a>
   25f80:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   25f84:	600b      	str	r3, [r1, #0]
   25f86:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   25f8a:	4b03      	ldr	r3, [pc, #12]	; (25f98 <CC_PalWaitInterruptRND+0x28>)
   25f8c:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   25f90:	2000      	movs	r0, #0
   25f92:	f85d 4b04 	ldr.w	r4, [sp], #4
   25f96:	4770      	bx	lr
   25f98:	5002b000 	.word	0x5002b000

00025f9c <CC_PalWaitInterrupt>:
   25f9c:	4a04      	ldr	r2, [pc, #16]	; (25fb0 <CC_PalWaitInterrupt+0x14>)
   25f9e:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   25fa2:	4218      	tst	r0, r3
   25fa4:	d0fb      	beq.n	25f9e <CC_PalWaitInterrupt+0x2>
   25fa6:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   25faa:	2000      	movs	r0, #0
   25fac:	4770      	bx	lr
   25fae:	bf00      	nop
   25fb0:	5002b000 	.word	0x5002b000

00025fb4 <CC_PalMemCopyPlat>:
   25fb4:	f008 bd0e 	b.w	2e9d4 <memmove>

00025fb8 <CC_PalMemSetPlat>:
   25fb8:	f008 b995 	b.w	2e2e6 <memset>

00025fbc <CC_PalMemSetZeroPlat>:
   25fbc:	460a      	mov	r2, r1
   25fbe:	2100      	movs	r1, #0
   25fc0:	f008 b991 	b.w	2e2e6 <memset>

00025fc4 <CC_PalMutexCreate>:
   25fc4:	b508      	push	{r3, lr}
   25fc6:	4b03      	ldr	r3, [pc, #12]	; (25fd4 <CC_PalMutexCreate+0x10>)
   25fc8:	6802      	ldr	r2, [r0, #0]
   25fca:	681b      	ldr	r3, [r3, #0]
   25fcc:	6810      	ldr	r0, [r2, #0]
   25fce:	4798      	blx	r3
   25fd0:	2000      	movs	r0, #0
   25fd2:	bd08      	pop	{r3, pc}
   25fd4:	20000a5c 	.word	0x20000a5c

00025fd8 <CC_PalMutexDestroy>:
   25fd8:	b508      	push	{r3, lr}
   25fda:	4b03      	ldr	r3, [pc, #12]	; (25fe8 <CC_PalMutexDestroy+0x10>)
   25fdc:	6802      	ldr	r2, [r0, #0]
   25fde:	685b      	ldr	r3, [r3, #4]
   25fe0:	6810      	ldr	r0, [r2, #0]
   25fe2:	4798      	blx	r3
   25fe4:	2000      	movs	r0, #0
   25fe6:	bd08      	pop	{r3, pc}
   25fe8:	20000a5c 	.word	0x20000a5c

00025fec <CC_PalMutexLock>:
   25fec:	4b02      	ldr	r3, [pc, #8]	; (25ff8 <CC_PalMutexLock+0xc>)
   25fee:	6802      	ldr	r2, [r0, #0]
   25ff0:	689b      	ldr	r3, [r3, #8]
   25ff2:	6810      	ldr	r0, [r2, #0]
   25ff4:	4718      	bx	r3
   25ff6:	bf00      	nop
   25ff8:	20000a5c 	.word	0x20000a5c

00025ffc <CC_PalMutexUnlock>:
   25ffc:	b508      	push	{r3, lr}
   25ffe:	4b03      	ldr	r3, [pc, #12]	; (2600c <CC_PalMutexUnlock+0x10>)
   26000:	6802      	ldr	r2, [r0, #0]
   26002:	68db      	ldr	r3, [r3, #12]
   26004:	6810      	ldr	r0, [r2, #0]
   26006:	4798      	blx	r3
   26008:	2000      	movs	r0, #0
   2600a:	bd08      	pop	{r3, pc}
   2600c:	20000a5c 	.word	0x20000a5c

00026010 <CC_PalPowerSaveModeInit>:
   26010:	b570      	push	{r4, r5, r6, lr}
   26012:	4c09      	ldr	r4, [pc, #36]	; (26038 <CC_PalPowerSaveModeInit+0x28>)
   26014:	4d09      	ldr	r5, [pc, #36]	; (2603c <CC_PalPowerSaveModeInit+0x2c>)
   26016:	6920      	ldr	r0, [r4, #16]
   26018:	68ab      	ldr	r3, [r5, #8]
   2601a:	4798      	blx	r3
   2601c:	b118      	cbz	r0, 26026 <CC_PalPowerSaveModeInit+0x16>
   2601e:	4b08      	ldr	r3, [pc, #32]	; (26040 <CC_PalPowerSaveModeInit+0x30>)
   26020:	4808      	ldr	r0, [pc, #32]	; (26044 <CC_PalPowerSaveModeInit+0x34>)
   26022:	685b      	ldr	r3, [r3, #4]
   26024:	4798      	blx	r3
   26026:	4a08      	ldr	r2, [pc, #32]	; (26048 <CC_PalPowerSaveModeInit+0x38>)
   26028:	68eb      	ldr	r3, [r5, #12]
   2602a:	6920      	ldr	r0, [r4, #16]
   2602c:	2100      	movs	r1, #0
   2602e:	6011      	str	r1, [r2, #0]
   26030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26034:	4718      	bx	r3
   26036:	bf00      	nop
   26038:	20000a6c 	.word	0x20000a6c
   2603c:	20000a5c 	.word	0x20000a5c
   26040:	20000a4c 	.word	0x20000a4c
   26044:	00031a20 	.word	0x00031a20
   26048:	2000481c 	.word	0x2000481c

0002604c <CC_PalPowerSaveModeSelect>:
   2604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2604e:	4d1a      	ldr	r5, [pc, #104]	; (260b8 <CC_PalPowerSaveModeSelect+0x6c>)
   26050:	4e1a      	ldr	r6, [pc, #104]	; (260bc <CC_PalPowerSaveModeSelect+0x70>)
   26052:	4604      	mov	r4, r0
   26054:	68b2      	ldr	r2, [r6, #8]
   26056:	6928      	ldr	r0, [r5, #16]
   26058:	4790      	blx	r2
   2605a:	b9e8      	cbnz	r0, 26098 <CC_PalPowerSaveModeSelect+0x4c>
   2605c:	4f18      	ldr	r7, [pc, #96]	; (260c0 <CC_PalPowerSaveModeSelect+0x74>)
   2605e:	683b      	ldr	r3, [r7, #0]
   26060:	b14c      	cbz	r4, 26076 <CC_PalPowerSaveModeSelect+0x2a>
   26062:	b1a3      	cbz	r3, 2608e <CC_PalPowerSaveModeSelect+0x42>
   26064:	2b01      	cmp	r3, #1
   26066:	d019      	beq.n	2609c <CC_PalPowerSaveModeSelect+0x50>
   26068:	3b01      	subs	r3, #1
   2606a:	603b      	str	r3, [r7, #0]
   2606c:	6928      	ldr	r0, [r5, #16]
   2606e:	68f3      	ldr	r3, [r6, #12]
   26070:	4798      	blx	r3
   26072:	2000      	movs	r0, #0
   26074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26076:	b943      	cbnz	r3, 2608a <CC_PalPowerSaveModeSelect+0x3e>
   26078:	4a12      	ldr	r2, [pc, #72]	; (260c4 <CC_PalPowerSaveModeSelect+0x78>)
   2607a:	2101      	movs	r1, #1
   2607c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   26080:	4911      	ldr	r1, [pc, #68]	; (260c8 <CC_PalPowerSaveModeSelect+0x7c>)
   26082:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   26086:	2a00      	cmp	r2, #0
   26088:	d1fb      	bne.n	26082 <CC_PalPowerSaveModeSelect+0x36>
   2608a:	3301      	adds	r3, #1
   2608c:	603b      	str	r3, [r7, #0]
   2608e:	68f3      	ldr	r3, [r6, #12]
   26090:	6928      	ldr	r0, [r5, #16]
   26092:	4798      	blx	r3
   26094:	2000      	movs	r0, #0
   26096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26098:	480c      	ldr	r0, [pc, #48]	; (260cc <CC_PalPowerSaveModeSelect+0x80>)
   2609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2609c:	4a0a      	ldr	r2, [pc, #40]	; (260c8 <CC_PalPowerSaveModeSelect+0x7c>)
   2609e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   260a2:	2b00      	cmp	r3, #0
   260a4:	d1fb      	bne.n	2609e <CC_PalPowerSaveModeSelect+0x52>
   260a6:	4a07      	ldr	r2, [pc, #28]	; (260c4 <CC_PalPowerSaveModeSelect+0x78>)
   260a8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   260ac:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   260b0:	f7ff ff00 	bl	25eb4 <CC_HalMaskInterrupt>
   260b4:	683b      	ldr	r3, [r7, #0]
   260b6:	e7d7      	b.n	26068 <CC_PalPowerSaveModeSelect+0x1c>
   260b8:	20000a6c 	.word	0x20000a6c
   260bc:	20000a5c 	.word	0x20000a5c
   260c0:	2000481c 	.word	0x2000481c
   260c4:	5002a000 	.word	0x5002a000
   260c8:	5002b000 	.word	0x5002b000
   260cc:	ffff8fe9 	.word	0xffff8fe9

000260d0 <mutex_init>:
   260d0:	4b01      	ldr	r3, [pc, #4]	; (260d8 <mutex_init+0x8>)
   260d2:	681b      	ldr	r3, [r3, #0]
   260d4:	4718      	bx	r3
   260d6:	bf00      	nop
   260d8:	20000a5c 	.word	0x20000a5c

000260dc <mutex_lock>:
   260dc:	4b01      	ldr	r3, [pc, #4]	; (260e4 <mutex_lock+0x8>)
   260de:	689b      	ldr	r3, [r3, #8]
   260e0:	4718      	bx	r3
   260e2:	bf00      	nop
   260e4:	20000a5c 	.word	0x20000a5c

000260e8 <mutex_unlock>:
   260e8:	4b01      	ldr	r3, [pc, #4]	; (260f0 <mutex_unlock+0x8>)
   260ea:	68db      	ldr	r3, [r3, #12]
   260ec:	4718      	bx	r3
   260ee:	bf00      	nop
   260f0:	20000a5c 	.word	0x20000a5c

000260f4 <startTrngHW>:
   260f4:	2800      	cmp	r0, #0
   260f6:	f000 8084 	beq.w	26202 <startTrngHW+0x10e>
   260fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   260fe:	460c      	mov	r4, r1
   26100:	b083      	sub	sp, #12
   26102:	2900      	cmp	r1, #0
   26104:	d078      	beq.n	261f8 <startTrngHW+0x104>
   26106:	461d      	mov	r5, r3
   26108:	2b00      	cmp	r3, #0
   2610a:	d075      	beq.n	261f8 <startTrngHW+0x104>
   2610c:	4607      	mov	r7, r0
   2610e:	b11a      	cbz	r2, 26118 <startTrngHW+0x24>
   26110:	2201      	movs	r2, #1
   26112:	2300      	movs	r3, #0
   26114:	602a      	str	r2, [r5, #0]
   26116:	6003      	str	r3, [r0, #0]
   26118:	682b      	ldr	r3, [r5, #0]
   2611a:	2b00      	cmp	r3, #0
   2611c:	d067      	beq.n	261ee <startTrngHW+0xfa>
   2611e:	4629      	mov	r1, r5
   26120:	4620      	mov	r0, r4
   26122:	f000 fdeb 	bl	26cfc <LLF_RND_GetFastestRosc>
   26126:	4603      	mov	r3, r0
   26128:	2800      	cmp	r0, #0
   2612a:	d161      	bne.n	261f0 <startTrngHW+0xfc>
   2612c:	6828      	ldr	r0, [r5, #0]
   2612e:	4621      	mov	r1, r4
   26130:	f000 fdc6 	bl	26cc0 <LLF_RND_GetRoscSampleCnt>
   26134:	4603      	mov	r3, r0
   26136:	2800      	cmp	r0, #0
   26138:	d15a      	bne.n	261f0 <startTrngHW+0xfc>
   2613a:	682a      	ldr	r2, [r5, #0]
   2613c:	2a08      	cmp	r2, #8
   2613e:	d072      	beq.n	26226 <startTrngHW+0x132>
   26140:	2a04      	cmp	r2, #4
   26142:	d073      	beq.n	2622c <startTrngHW+0x138>
   26144:	f1a2 0802 	sub.w	r8, r2, #2
   26148:	fab8 f888 	clz	r8, r8
   2614c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   26150:	4e38      	ldr	r6, [pc, #224]	; (26234 <startTrngHW+0x140>)
   26152:	2001      	movs	r0, #1
   26154:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   26158:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   2615c:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   26160:	6a62      	ldr	r2, [r4, #36]	; 0x24
   26162:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   26166:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   2616a:	428a      	cmp	r2, r1
   2616c:	d1f6      	bne.n	2615c <startTrngHW+0x68>
   2616e:	f04f 0900 	mov.w	r9, #0
   26172:	9301      	str	r3, [sp, #4]
   26174:	f04f 30ff 	mov.w	r0, #4294967295
   26178:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   2617c:	f7ff fe8c 	bl	25e98 <CC_HalClearInterruptBit>
   26180:	f06f 021b 	mvn.w	r2, #27
   26184:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   26188:	4648      	mov	r0, r9
   2618a:	f7ff fe93 	bl	25eb4 <CC_HalMaskInterrupt>
   2618e:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   26192:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   26196:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2619a:	f7ff fe8b 	bl	25eb4 <CC_HalMaskInterrupt>
   2619e:	220a      	movs	r2, #10
   261a0:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   261a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   261a6:	2b01      	cmp	r3, #1
   261a8:	9b01      	ldr	r3, [sp, #4]
   261aa:	d02d      	beq.n	26208 <startTrngHW+0x114>
   261ac:	6922      	ldr	r2, [r4, #16]
   261ae:	4922      	ldr	r1, [pc, #136]	; (26238 <startTrngHW+0x144>)
   261b0:	fba1 1202 	umull	r1, r2, r1, r2
   261b4:	0912      	lsrs	r2, r2, #4
   261b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   261b8:	fb01 f202 	mul.w	r2, r1, r2
   261bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   261c0:	491c      	ldr	r1, [pc, #112]	; (26234 <startTrngHW+0x140>)
   261c2:	03d2      	lsls	r2, r2, #15
   261c4:	0992      	lsrs	r2, r2, #6
   261c6:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   261ca:	2201      	movs	r2, #1
   261cc:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   261d0:	683a      	ldr	r2, [r7, #0]
   261d2:	6829      	ldr	r1, [r5, #0]
   261d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   261d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   261dc:	603a      	str	r2, [r7, #0]
   261de:	6829      	ldr	r1, [r5, #0]
   261e0:	4618      	mov	r0, r3
   261e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   261e6:	603a      	str	r2, [r7, #0]
   261e8:	b003      	add	sp, #12
   261ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   261ee:	4b13      	ldr	r3, [pc, #76]	; (2623c <startTrngHW+0x148>)
   261f0:	4618      	mov	r0, r3
   261f2:	b003      	add	sp, #12
   261f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   261f8:	4b11      	ldr	r3, [pc, #68]	; (26240 <startTrngHW+0x14c>)
   261fa:	4618      	mov	r0, r3
   261fc:	b003      	add	sp, #12
   261fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26202:	4b0f      	ldr	r3, [pc, #60]	; (26240 <startTrngHW+0x14c>)
   26204:	4618      	mov	r0, r3
   26206:	4770      	bx	lr
   26208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2620c:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   26210:	3101      	adds	r1, #1
   26212:	d006      	beq.n	26222 <startTrngHW+0x12e>
   26214:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   26218:	4907      	ldr	r1, [pc, #28]	; (26238 <startTrngHW+0x144>)
   2621a:	fba1 1202 	umull	r1, r2, r1, r2
   2621e:	0912      	lsrs	r2, r2, #4
   26220:	e7c9      	b.n	261b6 <startTrngHW+0xc2>
   26222:	2216      	movs	r2, #22
   26224:	e7c7      	b.n	261b6 <startTrngHW+0xc2>
   26226:	f04f 0803 	mov.w	r8, #3
   2622a:	e791      	b.n	26150 <startTrngHW+0x5c>
   2622c:	f04f 0802 	mov.w	r8, #2
   26230:	e78e      	b.n	26150 <startTrngHW+0x5c>
   26232:	bf00      	nop
   26234:	5002b000 	.word	0x5002b000
   26238:	aaaaaaab 	.word	0xaaaaaaab
   2623c:	00f10c31 	.word	0x00f10c31
   26240:	00f10c35 	.word	0x00f10c35

00026244 <LLF_RND_RepetitionCounterTest.part.0>:
   26244:	b570      	push	{r4, r5, r6, lr}
   26246:	00c9      	lsls	r1, r1, #3
   26248:	2400      	movs	r4, #0
   2624a:	1e4e      	subs	r6, r1, #1
   2624c:	f04f 0c01 	mov.w	ip, #1
   26250:	4625      	mov	r5, r4
   26252:	46a6      	mov	lr, r4
   26254:	e008      	b.n	26268 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   26256:	459e      	cmp	lr, r3
   26258:	d015      	beq.n	26286 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   2625a:	2501      	movs	r5, #1
   2625c:	45b4      	cmp	ip, r6
   2625e:	d817      	bhi.n	26290 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   26260:	3401      	adds	r4, #1
   26262:	f10c 0c01 	add.w	ip, ip, #1
   26266:	469e      	mov	lr, r3
   26268:	0963      	lsrs	r3, r4, #5
   2626a:	f004 011f 	and.w	r1, r4, #31
   2626e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   26272:	291f      	cmp	r1, #31
   26274:	fa23 f301 	lsr.w	r3, r3, r1
   26278:	bf18      	it	ne
   2627a:	f003 0301 	andne.w	r3, r3, #1
   2627e:	2c00      	cmp	r4, #0
   26280:	d1e9      	bne.n	26256 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   26282:	2501      	movs	r5, #1
   26284:	e7ec      	b.n	26260 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   26286:	3501      	adds	r5, #1
   26288:	4295      	cmp	r5, r2
   2628a:	d1e7      	bne.n	2625c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   2628c:	4801      	ldr	r0, [pc, #4]	; (26294 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   2628e:	bd70      	pop	{r4, r5, r6, pc}
   26290:	2000      	movs	r0, #0
   26292:	bd70      	pop	{r4, r5, r6, pc}
   26294:	00f10c36 	.word	0x00f10c36

00026298 <LLF_RND_AdaptiveProportionTest>:
   26298:	2800      	cmp	r0, #0
   2629a:	d03f      	beq.n	2631c <LLF_RND_AdaptiveProportionTest+0x84>
   2629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   262a0:	1e4c      	subs	r4, r1, #1
   262a2:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   262a6:	d228      	bcs.n	262fa <LLF_RND_AdaptiveProportionTest+0x62>
   262a8:	b33b      	cbz	r3, 262fa <LLF_RND_AdaptiveProportionTest+0x62>
   262aa:	b332      	cbz	r2, 262fa <LLF_RND_AdaptiveProportionTest+0x62>
   262ac:	f04f 0e00 	mov.w	lr, #0
   262b0:	00cf      	lsls	r7, r1, #3
   262b2:	4676      	mov	r6, lr
   262b4:	4675      	mov	r5, lr
   262b6:	4674      	mov	r4, lr
   262b8:	f103 38ff 	add.w	r8, r3, #4294967295
   262bc:	0961      	lsrs	r1, r4, #5
   262be:	f004 0c1f 	and.w	ip, r4, #31
   262c2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   262c6:	f1bc 0f1f 	cmp.w	ip, #31
   262ca:	fa21 f10c 	lsr.w	r1, r1, ip
   262ce:	bf18      	it	ne
   262d0:	f001 0101 	andne.w	r1, r1, #1
   262d4:	b1a4      	cbz	r4, 26300 <LLF_RND_AdaptiveProportionTest+0x68>
   262d6:	42ab      	cmp	r3, r5
   262d8:	d018      	beq.n	2630c <LLF_RND_AdaptiveProportionTest+0x74>
   262da:	428e      	cmp	r6, r1
   262dc:	bf08      	it	eq
   262de:	f10e 0e01 	addeq.w	lr, lr, #1
   262e2:	45a8      	cmp	r8, r5
   262e4:	d015      	beq.n	26312 <LLF_RND_AdaptiveProportionTest+0x7a>
   262e6:	3501      	adds	r5, #1
   262e8:	4631      	mov	r1, r6
   262ea:	3401      	adds	r4, #1
   262ec:	42bc      	cmp	r4, r7
   262ee:	d001      	beq.n	262f4 <LLF_RND_AdaptiveProportionTest+0x5c>
   262f0:	460e      	mov	r6, r1
   262f2:	e7e3      	b.n	262bc <LLF_RND_AdaptiveProportionTest+0x24>
   262f4:	2000      	movs	r0, #0
   262f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   262fa:	4809      	ldr	r0, [pc, #36]	; (26320 <LLF_RND_AdaptiveProportionTest+0x88>)
   262fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26300:	f04f 0e01 	mov.w	lr, #1
   26304:	4674      	mov	r4, lr
   26306:	4675      	mov	r5, lr
   26308:	460e      	mov	r6, r1
   2630a:	e7d7      	b.n	262bc <LLF_RND_AdaptiveProportionTest+0x24>
   2630c:	2501      	movs	r5, #1
   2630e:	46ae      	mov	lr, r5
   26310:	e7eb      	b.n	262ea <LLF_RND_AdaptiveProportionTest+0x52>
   26312:	4572      	cmp	r2, lr
   26314:	d3f1      	bcc.n	262fa <LLF_RND_AdaptiveProportionTest+0x62>
   26316:	4631      	mov	r1, r6
   26318:	461d      	mov	r5, r3
   2631a:	e7e6      	b.n	262ea <LLF_RND_AdaptiveProportionTest+0x52>
   2631c:	4800      	ldr	r0, [pc, #0]	; (26320 <LLF_RND_AdaptiveProportionTest+0x88>)
   2631e:	4770      	bx	lr
   26320:	00f10c37 	.word	0x00f10c37

00026324 <getTrngSource>:
   26324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26328:	b091      	sub	sp, #68	; 0x44
   2632a:	460d      	mov	r5, r1
   2632c:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   26330:	4681      	mov	r9, r0
   26332:	2900      	cmp	r1, #0
   26334:	d14d      	bne.n	263d2 <getTrngSource+0xae>
   26336:	6928      	ldr	r0, [r5, #16]
   26338:	9006      	str	r0, [sp, #24]
   2633a:	981a      	ldr	r0, [sp, #104]	; 0x68
   2633c:	601c      	str	r4, [r3, #0]
   2633e:	2300      	movs	r3, #0
   26340:	6003      	str	r3, [r0, #0]
   26342:	2a00      	cmp	r2, #0
   26344:	f000 8125 	beq.w	26592 <getTrngSource+0x26e>
   26348:	4b9e      	ldr	r3, [pc, #632]	; (265c4 <getTrngSource+0x2a0>)
   2634a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2634c:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   26350:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   26354:	429a      	cmp	r2, r3
   26356:	d148      	bne.n	263ea <getTrngSource+0xc6>
   26358:	290a      	cmp	r1, #10
   2635a:	d146      	bne.n	263ea <getTrngSource+0xc6>
   2635c:	f899 3003 	ldrb.w	r3, [r9, #3]
   26360:	9308      	str	r3, [sp, #32]
   26362:	f104 0308 	add.w	r3, r4, #8
   26366:	9a06      	ldr	r2, [sp, #24]
   26368:	9307      	str	r3, [sp, #28]
   2636a:	4b97      	ldr	r3, [pc, #604]	; (265c8 <getTrngSource+0x2a4>)
   2636c:	4c95      	ldr	r4, [pc, #596]	; (265c4 <getTrngSource+0x2a0>)
   2636e:	4611      	mov	r1, r2
   26370:	fba3 1301 	umull	r1, r3, r3, r1
   26374:	089b      	lsrs	r3, r3, #2
   26376:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2637a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   2637e:	9303      	str	r3, [sp, #12]
   26380:	2304      	movs	r3, #4
   26382:	9305      	str	r3, [sp, #20]
   26384:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26386:	9e06      	ldr	r6, [sp, #24]
   26388:	601e      	str	r6, [r3, #0]
   2638a:	2e00      	cmp	r6, #0
   2638c:	d033      	beq.n	263f6 <getTrngSource+0xd2>
   2638e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   26392:	2700      	movs	r7, #0
   26394:	f04f 0a01 	mov.w	sl, #1
   26398:	f000 fcc0 	bl	26d1c <LLF_RND_TurnOffTrng>
   2639c:	2300      	movs	r3, #0
   2639e:	9309      	str	r3, [sp, #36]	; 0x24
   263a0:	f1b9 0f00 	cmp.w	r9, #0
   263a4:	f000 80df 	beq.w	26566 <getTrngSource+0x242>
   263a8:	2d00      	cmp	r5, #0
   263aa:	f000 80dc 	beq.w	26566 <getTrngSource+0x242>
   263ae:	9b08      	ldr	r3, [sp, #32]
   263b0:	b1eb      	cbz	r3, 263ee <getTrngSource+0xca>
   263b2:	a908      	add	r1, sp, #32
   263b4:	4628      	mov	r0, r5
   263b6:	f000 fca1 	bl	26cfc <LLF_RND_GetFastestRosc>
   263ba:	2800      	cmp	r0, #0
   263bc:	d03e      	beq.n	2643c <getTrngSource+0x118>
   263be:	4b83      	ldr	r3, [pc, #524]	; (265cc <getTrngSource+0x2a8>)
   263c0:	4298      	cmp	r0, r3
   263c2:	d118      	bne.n	263f6 <getTrngSource+0xd2>
   263c4:	9003      	str	r0, [sp, #12]
   263c6:	f000 fca9 	bl	26d1c <LLF_RND_TurnOffTrng>
   263ca:	9803      	ldr	r0, [sp, #12]
   263cc:	b011      	add	sp, #68	; 0x44
   263ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263d2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   263d6:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   263da:	3601      	adds	r6, #1
   263dc:	bf14      	ite	ne
   263de:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   263e2:	f44f 7004 	moveq.w	r0, #528	; 0x210
   263e6:	9006      	str	r0, [sp, #24]
   263e8:	e7a7      	b.n	2633a <getTrngSource+0x16>
   263ea:	4879      	ldr	r0, [pc, #484]	; (265d0 <getTrngSource+0x2ac>)
   263ec:	e7ea      	b.n	263c4 <getTrngSource+0xa0>
   263ee:	4879      	ldr	r0, [pc, #484]	; (265d4 <getTrngSource+0x2b0>)
   263f0:	4b76      	ldr	r3, [pc, #472]	; (265cc <getTrngSource+0x2a8>)
   263f2:	4298      	cmp	r0, r3
   263f4:	d0e6      	beq.n	263c4 <getTrngSource+0xa0>
   263f6:	9b08      	ldr	r3, [sp, #32]
   263f8:	2b08      	cmp	r3, #8
   263fa:	f000 80c8 	beq.w	2658e <getTrngSource+0x26a>
   263fe:	005b      	lsls	r3, r3, #1
   26400:	2200      	movs	r2, #0
   26402:	9308      	str	r3, [sp, #32]
   26404:	9200      	str	r2, [sp, #0]
   26406:	ab08      	add	r3, sp, #32
   26408:	4629      	mov	r1, r5
   2640a:	4648      	mov	r0, r9
   2640c:	f7ff fe72 	bl	260f4 <startTrngHW>
   26410:	4b70      	ldr	r3, [pc, #448]	; (265d4 <getTrngSource+0x2b0>)
   26412:	4298      	cmp	r0, r3
   26414:	f000 80b7 	beq.w	26586 <getTrngSource+0x262>
   26418:	2800      	cmp	r0, #0
   2641a:	d1d3      	bne.n	263c4 <getTrngSource+0xa0>
   2641c:	f8d9 2000 	ldr.w	r2, [r9]
   26420:	0a13      	lsrs	r3, r2, #8
   26422:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   26426:	4313      	orrs	r3, r2
   26428:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2642c:	f8c9 3000 	str.w	r3, [r9]
   26430:	9b05      	ldr	r3, [sp, #20]
   26432:	3b01      	subs	r3, #1
   26434:	9305      	str	r3, [sp, #20]
   26436:	d1a5      	bne.n	26384 <getTrngSource+0x60>
   26438:	2000      	movs	r0, #0
   2643a:	e7c3      	b.n	263c4 <getTrngSource+0xa0>
   2643c:	9808      	ldr	r0, [sp, #32]
   2643e:	4629      	mov	r1, r5
   26440:	f000 fc3e 	bl	26cc0 <LLF_RND_GetRoscSampleCnt>
   26444:	2800      	cmp	r0, #0
   26446:	d1ba      	bne.n	263be <getTrngSource+0x9a>
   26448:	9b08      	ldr	r3, [sp, #32]
   2644a:	2b08      	cmp	r3, #8
   2644c:	f000 8095 	beq.w	2657a <getTrngSource+0x256>
   26450:	2b04      	cmp	r3, #4
   26452:	f000 8095 	beq.w	26580 <getTrngSource+0x25c>
   26456:	f1a3 0302 	sub.w	r3, r3, #2
   2645a:	fab3 f383 	clz	r3, r3
   2645e:	095b      	lsrs	r3, r3, #5
   26460:	9304      	str	r3, [sp, #16]
   26462:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   26466:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   2646a:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   2646e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   26470:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   26474:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   26478:	4293      	cmp	r3, r2
   2647a:	d1f6      	bne.n	2646a <getTrngSource+0x146>
   2647c:	f04f 0b00 	mov.w	fp, #0
   26480:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   26484:	f04f 30ff 	mov.w	r0, #4294967295
   26488:	f7ff fd06 	bl	25e98 <CC_HalClearInterruptBit>
   2648c:	f06f 031b 	mvn.w	r3, #27
   26490:	4658      	mov	r0, fp
   26492:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   26496:	f7ff fd0d 	bl	25eb4 <CC_HalMaskInterrupt>
   2649a:	9b04      	ldr	r3, [sp, #16]
   2649c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   264a0:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   264a4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   264a8:	f7ff fd04 	bl	25eb4 <CC_HalMaskInterrupt>
   264ac:	230a      	movs	r3, #10
   264ae:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   264b2:	692b      	ldr	r3, [r5, #16]
   264b4:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   264b8:	fbab 2303 	umull	r2, r3, fp, r3
   264bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   264be:	091b      	lsrs	r3, r3, #4
   264c0:	fb02 f303 	mul.w	r3, r2, r3
   264c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   264c8:	03db      	lsls	r3, r3, #15
   264ca:	099b      	lsrs	r3, r3, #6
   264cc:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   264d0:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   264d4:	9908      	ldr	r1, [sp, #32]
   264d6:	f8d9 2000 	ldr.w	r2, [r9]
   264da:	020b      	lsls	r3, r1, #8
   264dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   264e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   264e4:	4313      	orrs	r3, r2
   264e6:	f8c9 3000 	str.w	r3, [r9]
   264ea:	a809      	add	r0, sp, #36	; 0x24
   264ec:	f000 fbd8 	bl	26ca0 <LLF_RND_WaitRngInterrupt>
   264f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   264f2:	f003 031a 	and.w	r3, r3, #26
   264f6:	4303      	orrs	r3, r0
   264f8:	f47f af7d 	bne.w	263f6 <getTrngSource+0xd2>
   264fc:	fbab 3b06 	umull	r3, fp, fp, r6
   26500:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   26504:	930a      	str	r3, [sp, #40]	; 0x28
   26506:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   2650a:	930b      	str	r3, [sp, #44]	; 0x2c
   2650c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   26510:	930c      	str	r3, [sp, #48]	; 0x30
   26512:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   26516:	930d      	str	r3, [sp, #52]	; 0x34
   26518:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2651c:	930e      	str	r3, [sp, #56]	; 0x38
   2651e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   26522:	930f      	str	r3, [sp, #60]	; 0x3c
   26524:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   26528:	d101      	bne.n	2652e <getTrngSource+0x20a>
   2652a:	9b03      	ldr	r3, [sp, #12]
   2652c:	b9eb      	cbnz	r3, 2656a <getTrngSource+0x246>
   2652e:	4640      	mov	r0, r8
   26530:	2218      	movs	r2, #24
   26532:	a90a      	add	r1, sp, #40	; 0x28
   26534:	3e18      	subs	r6, #24
   26536:	f108 0818 	add.w	r8, r8, #24
   2653a:	f7ff fd3b 	bl	25fb4 <CC_PalMemCopyPlat>
   2653e:	3701      	adds	r7, #1
   26540:	2e00      	cmp	r6, #0
   26542:	f47f af29 	bne.w	26398 <getTrngSource+0x74>
   26546:	9b06      	ldr	r3, [sp, #24]
   26548:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   2654c:	d836      	bhi.n	265bc <getTrngSource+0x298>
   2654e:	9e07      	ldr	r6, [sp, #28]
   26550:	696a      	ldr	r2, [r5, #20]
   26552:	4619      	mov	r1, r3
   26554:	4630      	mov	r0, r6
   26556:	461f      	mov	r7, r3
   26558:	f7ff fe74 	bl	26244 <LLF_RND_RepetitionCounterTest.part.0>
   2655c:	b320      	cbz	r0, 265a8 <getTrngSource+0x284>
   2655e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   26560:	2300      	movs	r3, #0
   26562:	6013      	str	r3, [r2, #0]
   26564:	e72b      	b.n	263be <getTrngSource+0x9a>
   26566:	481c      	ldr	r0, [pc, #112]	; (265d8 <getTrngSource+0x2b4>)
   26568:	e729      	b.n	263be <getTrngSource+0x9a>
   2656a:	461a      	mov	r2, r3
   2656c:	4640      	mov	r0, r8
   2656e:	a90a      	add	r1, sp, #40	; 0x28
   26570:	1af6      	subs	r6, r6, r3
   26572:	4498      	add	r8, r3
   26574:	f7ff fd1e 	bl	25fb4 <CC_PalMemCopyPlat>
   26578:	e7e1      	b.n	2653e <getTrngSource+0x21a>
   2657a:	2303      	movs	r3, #3
   2657c:	9304      	str	r3, [sp, #16]
   2657e:	e770      	b.n	26462 <getTrngSource+0x13e>
   26580:	2302      	movs	r3, #2
   26582:	9304      	str	r3, [sp, #16]
   26584:	e76d      	b.n	26462 <getTrngSource+0x13e>
   26586:	6a2b      	ldr	r3, [r5, #32]
   26588:	2b00      	cmp	r3, #0
   2658a:	f43f af1b 	beq.w	263c4 <getTrngSource+0xa0>
   2658e:	4813      	ldr	r0, [pc, #76]	; (265dc <getTrngSource+0x2b8>)
   26590:	e718      	b.n	263c4 <getTrngSource+0xa0>
   26592:	9100      	str	r1, [sp, #0]
   26594:	ab08      	add	r3, sp, #32
   26596:	2201      	movs	r2, #1
   26598:	4629      	mov	r1, r5
   2659a:	4648      	mov	r0, r9
   2659c:	f7ff fdaa 	bl	260f4 <startTrngHW>
   265a0:	2800      	cmp	r0, #0
   265a2:	f43f aede 	beq.w	26362 <getTrngSource+0x3e>
   265a6:	e70d      	b.n	263c4 <getTrngSource+0xa0>
   265a8:	69aa      	ldr	r2, [r5, #24]
   265aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   265ae:	4639      	mov	r1, r7
   265b0:	4630      	mov	r0, r6
   265b2:	f7ff fe71 	bl	26298 <LLF_RND_AdaptiveProportionTest>
   265b6:	2800      	cmp	r0, #0
   265b8:	d1d1      	bne.n	2655e <getTrngSource+0x23a>
   265ba:	e73d      	b.n	26438 <getTrngSource+0x114>
   265bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   265be:	601e      	str	r6, [r3, #0]
   265c0:	e719      	b.n	263f6 <getTrngSource+0xd2>
   265c2:	bf00      	nop
   265c4:	5002b000 	.word	0x5002b000
   265c8:	aaaaaaab 	.word	0xaaaaaaab
   265cc:	00f10c02 	.word	0x00f10c02
   265d0:	00f10c30 	.word	0x00f10c30
   265d4:	00f10c31 	.word	0x00f10c31
   265d8:	00f10c35 	.word	0x00f10c35
   265dc:	00f10c32 	.word	0x00f10c32

000265e0 <LLF_RND_GetTrngSource>:
   265e0:	b410      	push	{r4}
   265e2:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   265e6:	9401      	str	r4, [sp, #4]
   265e8:	9c03      	ldr	r4, [sp, #12]
   265ea:	9402      	str	r4, [sp, #8]
   265ec:	2400      	movs	r4, #0
   265ee:	9403      	str	r4, [sp, #12]
   265f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   265f4:	f7ff be96 	b.w	26324 <getTrngSource>

000265f8 <LLF_RND_RunTrngStartupTest>:
   265f8:	b510      	push	{r4, lr}
   265fa:	b086      	sub	sp, #24
   265fc:	ab05      	add	r3, sp, #20
   265fe:	2401      	movs	r4, #1
   26600:	e9cd 2401 	strd	r2, r4, [sp, #4]
   26604:	9300      	str	r3, [sp, #0]
   26606:	2200      	movs	r2, #0
   26608:	ab04      	add	r3, sp, #16
   2660a:	f7ff fe8b 	bl	26324 <getTrngSource>
   2660e:	b006      	add	sp, #24
   26610:	bd10      	pop	{r4, pc}
   26612:	bf00      	nop

00026614 <mbedtls_hardware_poll>:
   26614:	b5f0      	push	{r4, r5, r6, r7, lr}
   26616:	b089      	sub	sp, #36	; 0x24
   26618:	9205      	str	r2, [sp, #20]
   2661a:	2900      	cmp	r1, #0
   2661c:	d064      	beq.n	266e8 <mbedtls_hardware_poll+0xd4>
   2661e:	461c      	mov	r4, r3
   26620:	2b00      	cmp	r3, #0
   26622:	d061      	beq.n	266e8 <mbedtls_hardware_poll+0xd4>
   26624:	4615      	mov	r5, r2
   26626:	2a00      	cmp	r2, #0
   26628:	d05e      	beq.n	266e8 <mbedtls_hardware_poll+0xd4>
   2662a:	4f31      	ldr	r7, [pc, #196]	; (266f0 <mbedtls_hardware_poll+0xdc>)
   2662c:	460e      	mov	r6, r1
   2662e:	6838      	ldr	r0, [r7, #0]
   26630:	f04f 31ff 	mov.w	r1, #4294967295
   26634:	f7ff fcda 	bl	25fec <CC_PalMutexLock>
   26638:	2800      	cmp	r0, #0
   2663a:	d14b      	bne.n	266d4 <mbedtls_hardware_poll+0xc0>
   2663c:	2000      	movs	r0, #0
   2663e:	f7ff fd05 	bl	2604c <CC_PalPowerSaveModeSelect>
   26642:	2800      	cmp	r0, #0
   26644:	d142      	bne.n	266cc <mbedtls_hardware_poll+0xb8>
   26646:	482b      	ldr	r0, [pc, #172]	; (266f4 <mbedtls_hardware_poll+0xe0>)
   26648:	f000 fa9a 	bl	26b80 <RNG_PLAT_SetUserRngParameters>
   2664c:	b1d8      	cbz	r0, 26686 <mbedtls_hardware_poll+0x72>
   2664e:	2001      	movs	r0, #1
   26650:	f04f 36ff 	mov.w	r6, #4294967295
   26654:	f7ff fcfa 	bl	2604c <CC_PalPowerSaveModeSelect>
   26658:	2800      	cmp	r0, #0
   2665a:	d133      	bne.n	266c4 <mbedtls_hardware_poll+0xb0>
   2665c:	4826      	ldr	r0, [pc, #152]	; (266f8 <mbedtls_hardware_poll+0xe4>)
   2665e:	f44f 7108 	mov.w	r1, #544	; 0x220
   26662:	f7fe fe53 	bl	2530c <mbedtls_zeroize_internal>
   26666:	4825      	ldr	r0, [pc, #148]	; (266fc <mbedtls_hardware_poll+0xe8>)
   26668:	2104      	movs	r1, #4
   2666a:	f7fe fe4f 	bl	2530c <mbedtls_zeroize_internal>
   2666e:	4821      	ldr	r0, [pc, #132]	; (266f4 <mbedtls_hardware_poll+0xe0>)
   26670:	2128      	movs	r1, #40	; 0x28
   26672:	f7fe fe4b 	bl	2530c <mbedtls_zeroize_internal>
   26676:	6838      	ldr	r0, [r7, #0]
   26678:	f7ff fcc0 	bl	25ffc <CC_PalMutexUnlock>
   2667c:	2800      	cmp	r0, #0
   2667e:	d12d      	bne.n	266dc <mbedtls_hardware_poll+0xc8>
   26680:	4630      	mov	r0, r6
   26682:	b009      	add	sp, #36	; 0x24
   26684:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26686:	4b1c      	ldr	r3, [pc, #112]	; (266f8 <mbedtls_hardware_poll+0xe4>)
   26688:	9302      	str	r3, [sp, #8]
   2668a:	ab07      	add	r3, sp, #28
   2668c:	9003      	str	r0, [sp, #12]
   2668e:	4602      	mov	r2, r0
   26690:	9300      	str	r3, [sp, #0]
   26692:	4918      	ldr	r1, [pc, #96]	; (266f4 <mbedtls_hardware_poll+0xe0>)
   26694:	4819      	ldr	r0, [pc, #100]	; (266fc <mbedtls_hardware_poll+0xe8>)
   26696:	9401      	str	r4, [sp, #4]
   26698:	ab05      	add	r3, sp, #20
   2669a:	f7ff ffa1 	bl	265e0 <LLF_RND_GetTrngSource>
   2669e:	4603      	mov	r3, r0
   266a0:	2800      	cmp	r0, #0
   266a2:	d1d4      	bne.n	2664e <mbedtls_hardware_poll+0x3a>
   266a4:	6822      	ldr	r2, [r4, #0]
   266a6:	42aa      	cmp	r2, r5
   266a8:	d3d1      	bcc.n	2664e <mbedtls_hardware_poll+0x3a>
   266aa:	9907      	ldr	r1, [sp, #28]
   266ac:	4630      	mov	r0, r6
   266ae:	3108      	adds	r1, #8
   266b0:	462a      	mov	r2, r5
   266b2:	461e      	mov	r6, r3
   266b4:	f7ff fc7e 	bl	25fb4 <CC_PalMemCopyPlat>
   266b8:	6025      	str	r5, [r4, #0]
   266ba:	2001      	movs	r0, #1
   266bc:	f7ff fcc6 	bl	2604c <CC_PalPowerSaveModeSelect>
   266c0:	2800      	cmp	r0, #0
   266c2:	d0cb      	beq.n	2665c <mbedtls_hardware_poll+0x48>
   266c4:	480e      	ldr	r0, [pc, #56]	; (26700 <mbedtls_hardware_poll+0xec>)
   266c6:	f7fe fd07 	bl	250d8 <CC_PalAbort>
   266ca:	e7c7      	b.n	2665c <mbedtls_hardware_poll+0x48>
   266cc:	480d      	ldr	r0, [pc, #52]	; (26704 <mbedtls_hardware_poll+0xf0>)
   266ce:	f7fe fd03 	bl	250d8 <CC_PalAbort>
   266d2:	e7b8      	b.n	26646 <mbedtls_hardware_poll+0x32>
   266d4:	480c      	ldr	r0, [pc, #48]	; (26708 <mbedtls_hardware_poll+0xf4>)
   266d6:	f7fe fcff 	bl	250d8 <CC_PalAbort>
   266da:	e7af      	b.n	2663c <mbedtls_hardware_poll+0x28>
   266dc:	480b      	ldr	r0, [pc, #44]	; (2670c <mbedtls_hardware_poll+0xf8>)
   266de:	f7fe fcfb 	bl	250d8 <CC_PalAbort>
   266e2:	4630      	mov	r0, r6
   266e4:	b009      	add	sp, #36	; 0x24
   266e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   266e8:	f04f 36ff 	mov.w	r6, #4294967295
   266ec:	e7c8      	b.n	26680 <mbedtls_hardware_poll+0x6c>
   266ee:	bf00      	nop
   266f0:	20000aac 	.word	0x20000aac
   266f4:	20004a44 	.word	0x20004a44
   266f8:	20004824 	.word	0x20004824
   266fc:	20004820 	.word	0x20004820
   26700:	000319e8 	.word	0x000319e8
   26704:	000319c8 	.word	0x000319c8
   26708:	000319b0 	.word	0x000319b0
   2670c:	00031a40 	.word	0x00031a40

00026710 <cc_mbedtls_aes_init>:
   26710:	b510      	push	{r4, lr}
   26712:	4604      	mov	r4, r0
   26714:	b130      	cbz	r0, 26724 <cc_mbedtls_aes_init+0x14>
   26716:	2200      	movs	r2, #0
   26718:	2301      	movs	r3, #1
   2671a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   2671e:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   26722:	bd10      	pop	{r4, pc}
   26724:	4801      	ldr	r0, [pc, #4]	; (2672c <cc_mbedtls_aes_init+0x1c>)
   26726:	f7fe fcd7 	bl	250d8 <CC_PalAbort>
   2672a:	e7f4      	b.n	26716 <cc_mbedtls_aes_init+0x6>
   2672c:	00031a58 	.word	0x00031a58

00026730 <cc_mbedtls_aes_free>:
   26730:	b118      	cbz	r0, 2673a <cc_mbedtls_aes_free+0xa>
   26732:	2274      	movs	r2, #116	; 0x74
   26734:	2100      	movs	r1, #0
   26736:	f7ff bc3f 	b.w	25fb8 <CC_PalMemSetPlat>
   2673a:	4770      	bx	lr

0002673c <cc_mbedtls_aes_setkey_enc>:
   2673c:	b190      	cbz	r0, 26764 <cc_mbedtls_aes_setkey_enc+0x28>
   2673e:	b1a1      	cbz	r1, 2676a <cc_mbedtls_aes_setkey_enc+0x2e>
   26740:	b510      	push	{r4, lr}
   26742:	2a80      	cmp	r2, #128	; 0x80
   26744:	f04f 0400 	mov.w	r4, #0
   26748:	6384      	str	r4, [r0, #56]	; 0x38
   2674a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   2674e:	d106      	bne.n	2675e <cc_mbedtls_aes_setkey_enc+0x22>
   26750:	2210      	movs	r2, #16
   26752:	6304      	str	r4, [r0, #48]	; 0x30
   26754:	4410      	add	r0, r2
   26756:	f7ff fc2d 	bl	25fb4 <CC_PalMemCopyPlat>
   2675a:	4620      	mov	r0, r4
   2675c:	bd10      	pop	{r4, pc}
   2675e:	f06f 001f 	mvn.w	r0, #31
   26762:	bd10      	pop	{r4, pc}
   26764:	f06f 0021 	mvn.w	r0, #33	; 0x21
   26768:	4770      	bx	lr
   2676a:	f06f 001f 	mvn.w	r0, #31
   2676e:	4770      	bx	lr

00026770 <cc_mbedtls_aes_crypt_ecb>:
   26770:	b328      	cbz	r0, 267be <cc_mbedtls_aes_crypt_ecb+0x4e>
   26772:	b322      	cbz	r2, 267be <cc_mbedtls_aes_crypt_ecb+0x4e>
   26774:	b31b      	cbz	r3, 267be <cc_mbedtls_aes_crypt_ecb+0x4e>
   26776:	2901      	cmp	r1, #1
   26778:	d821      	bhi.n	267be <cc_mbedtls_aes_crypt_ecb+0x4e>
   2677a:	b570      	push	{r4, r5, r6, lr}
   2677c:	4604      	mov	r4, r0
   2677e:	6b81      	ldr	r1, [r0, #56]	; 0x38
   26780:	b086      	sub	sp, #24
   26782:	d017      	beq.n	267b4 <cc_mbedtls_aes_crypt_ecb+0x44>
   26784:	2901      	cmp	r1, #1
   26786:	d117      	bne.n	267b8 <cc_mbedtls_aes_crypt_ecb+0x48>
   26788:	2510      	movs	r5, #16
   2678a:	2100      	movs	r1, #0
   2678c:	eb0d 0605 	add.w	r6, sp, r5
   26790:	6361      	str	r1, [r4, #52]	; 0x34
   26792:	4610      	mov	r0, r2
   26794:	9500      	str	r5, [sp, #0]
   26796:	9601      	str	r6, [sp, #4]
   26798:	aa02      	add	r2, sp, #8
   2679a:	4629      	mov	r1, r5
   2679c:	f000 faca 	bl	26d34 <SetDataBuffersInfo>
   267a0:	b950      	cbnz	r0, 267b8 <cc_mbedtls_aes_crypt_ecb+0x48>
   267a2:	462b      	mov	r3, r5
   267a4:	4632      	mov	r2, r6
   267a6:	a902      	add	r1, sp, #8
   267a8:	4620      	mov	r0, r4
   267aa:	f000 fd4b 	bl	27244 <ProcessAesDrv>
   267ae:	b918      	cbnz	r0, 267b8 <cc_mbedtls_aes_crypt_ecb+0x48>
   267b0:	b006      	add	sp, #24
   267b2:	bd70      	pop	{r4, r5, r6, pc}
   267b4:	2900      	cmp	r1, #0
   267b6:	d0e7      	beq.n	26788 <cc_mbedtls_aes_crypt_ecb+0x18>
   267b8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   267bc:	e7f8      	b.n	267b0 <cc_mbedtls_aes_crypt_ecb+0x40>
   267be:	f06f 0021 	mvn.w	r0, #33	; 0x21
   267c2:	4770      	bx	lr

000267c4 <cc_mbedtls_sha256_init>:
   267c4:	b510      	push	{r4, lr}
   267c6:	4604      	mov	r4, r0
   267c8:	b128      	cbz	r0, 267d6 <cc_mbedtls_sha256_init+0x12>
   267ca:	4620      	mov	r0, r4
   267cc:	21f4      	movs	r1, #244	; 0xf4
   267ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   267d2:	f7ff bbf3 	b.w	25fbc <CC_PalMemSetZeroPlat>
   267d6:	4804      	ldr	r0, [pc, #16]	; (267e8 <cc_mbedtls_sha256_init+0x24>)
   267d8:	f7fe fc7e 	bl	250d8 <CC_PalAbort>
   267dc:	4620      	mov	r0, r4
   267de:	21f4      	movs	r1, #244	; 0xf4
   267e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   267e4:	f7ff bbea 	b.w	25fbc <CC_PalMemSetZeroPlat>
   267e8:	00031a6c 	.word	0x00031a6c

000267ec <cc_mbedtls_sha256_free>:
   267ec:	b110      	cbz	r0, 267f4 <cc_mbedtls_sha256_free+0x8>
   267ee:	21f4      	movs	r1, #244	; 0xf4
   267f0:	f7fe bd8c 	b.w	2530c <mbedtls_zeroize_internal>
   267f4:	4770      	bx	lr
   267f6:	bf00      	nop

000267f8 <cc_mbedtls_sha256_starts>:
   267f8:	b508      	push	{r3, lr}
   267fa:	b161      	cbz	r1, 26816 <cc_mbedtls_sha256_starts+0x1e>
   267fc:	2901      	cmp	r1, #1
   267fe:	d107      	bne.n	26810 <cc_mbedtls_sha256_starts+0x18>
   26800:	2102      	movs	r1, #2
   26802:	f000 f85b 	bl	268bc <mbedtls_sha_starts_internal>
   26806:	2800      	cmp	r0, #0
   26808:	bf18      	it	ne
   2680a:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   2680e:	bd08      	pop	{r3, pc}
   26810:	f06f 0036 	mvn.w	r0, #54	; 0x36
   26814:	bd08      	pop	{r3, pc}
   26816:	2101      	movs	r1, #1
   26818:	f000 f850 	bl	268bc <mbedtls_sha_starts_internal>
   2681c:	e7f3      	b.n	26806 <cc_mbedtls_sha256_starts+0xe>
   2681e:	bf00      	nop

00026820 <cc_mbedtls_sha256_update>:
   26820:	b530      	push	{r4, r5, lr}
   26822:	4605      	mov	r5, r0
   26824:	1888      	adds	r0, r1, r2
   26826:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   2682a:	b0a1      	sub	sp, #132	; 0x84
   2682c:	460b      	mov	r3, r1
   2682e:	4614      	mov	r4, r2
   26830:	d801      	bhi.n	26836 <cc_mbedtls_sha256_update+0x16>
   26832:	2a80      	cmp	r2, #128	; 0x80
   26834:	d90c      	bls.n	26850 <cc_mbedtls_sha256_update+0x30>
   26836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2683a:	d917      	bls.n	2686c <cc_mbedtls_sha256_update+0x4c>
   2683c:	4622      	mov	r2, r4
   2683e:	4619      	mov	r1, r3
   26840:	4628      	mov	r0, r5
   26842:	f000 f87d 	bl	26940 <mbedtls_sha_update_internal>
   26846:	4604      	mov	r4, r0
   26848:	b984      	cbnz	r4, 2686c <cc_mbedtls_sha256_update+0x4c>
   2684a:	4620      	mov	r0, r4
   2684c:	b021      	add	sp, #132	; 0x84
   2684e:	bd30      	pop	{r4, r5, pc}
   26850:	4668      	mov	r0, sp
   26852:	f7ff fbaf 	bl	25fb4 <CC_PalMemCopyPlat>
   26856:	4622      	mov	r2, r4
   26858:	4669      	mov	r1, sp
   2685a:	4628      	mov	r0, r5
   2685c:	f000 f870 	bl	26940 <mbedtls_sha_update_internal>
   26860:	2180      	movs	r1, #128	; 0x80
   26862:	4604      	mov	r4, r0
   26864:	4668      	mov	r0, sp
   26866:	f7ff fba9 	bl	25fbc <CC_PalMemSetZeroPlat>
   2686a:	e7ed      	b.n	26848 <cc_mbedtls_sha256_update+0x28>
   2686c:	f06f 0436 	mvn.w	r4, #54	; 0x36
   26870:	e7eb      	b.n	2684a <cc_mbedtls_sha256_update+0x2a>
   26872:	bf00      	nop

00026874 <cc_mbedtls_sha256_finish>:
   26874:	b570      	push	{r4, r5, r6, lr}
   26876:	b1e8      	cbz	r0, 268b4 <cc_mbedtls_sha256_finish+0x40>
   26878:	460e      	mov	r6, r1
   2687a:	b1d9      	cbz	r1, 268b4 <cc_mbedtls_sha256_finish+0x40>
   2687c:	4604      	mov	r4, r0
   2687e:	f000 f831 	bl	268e4 <mbedtls_sha_finish_internal>
   26882:	4605      	mov	r5, r0
   26884:	b9b0      	cbnz	r0, 268b4 <cc_mbedtls_sha256_finish+0x40>
   26886:	6823      	ldr	r3, [r4, #0]
   26888:	2b01      	cmp	r3, #1
   2688a:	d00b      	beq.n	268a4 <cc_mbedtls_sha256_finish+0x30>
   2688c:	2b02      	cmp	r3, #2
   2688e:	d001      	beq.n	26894 <cc_mbedtls_sha256_finish+0x20>
   26890:	4628      	mov	r0, r5
   26892:	bd70      	pop	{r4, r5, r6, pc}
   26894:	221c      	movs	r2, #28
   26896:	f104 0108 	add.w	r1, r4, #8
   2689a:	4630      	mov	r0, r6
   2689c:	f7ff fb8a 	bl	25fb4 <CC_PalMemCopyPlat>
   268a0:	4628      	mov	r0, r5
   268a2:	bd70      	pop	{r4, r5, r6, pc}
   268a4:	2220      	movs	r2, #32
   268a6:	f104 0108 	add.w	r1, r4, #8
   268aa:	4630      	mov	r0, r6
   268ac:	f7ff fb82 	bl	25fb4 <CC_PalMemCopyPlat>
   268b0:	4628      	mov	r0, r5
   268b2:	bd70      	pop	{r4, r5, r6, pc}
   268b4:	f06f 0536 	mvn.w	r5, #54	; 0x36
   268b8:	e7ea      	b.n	26890 <cc_mbedtls_sha256_finish+0x1c>
   268ba:	bf00      	nop

000268bc <mbedtls_sha_starts_internal>:
   268bc:	b178      	cbz	r0, 268de <mbedtls_sha_starts_internal+0x22>
   268be:	b538      	push	{r3, r4, r5, lr}
   268c0:	4604      	mov	r4, r0
   268c2:	460d      	mov	r5, r1
   268c4:	21f0      	movs	r1, #240	; 0xf0
   268c6:	f7ff fb79 	bl	25fbc <CC_PalMemSetZeroPlat>
   268ca:	2340      	movs	r3, #64	; 0x40
   268cc:	6025      	str	r5, [r4, #0]
   268ce:	65e3      	str	r3, [r4, #92]	; 0x5c
   268d0:	4620      	mov	r0, r4
   268d2:	f000 fa63 	bl	26d9c <InitHashDrv>
   268d6:	3800      	subs	r0, #0
   268d8:	bf18      	it	ne
   268da:	2001      	movne	r0, #1
   268dc:	bd38      	pop	{r3, r4, r5, pc}
   268de:	2001      	movs	r0, #1
   268e0:	4770      	bx	lr
   268e2:	bf00      	nop

000268e4 <mbedtls_sha_finish_internal>:
   268e4:	b570      	push	{r4, r5, r6, lr}
   268e6:	6e05      	ldr	r5, [r0, #96]	; 0x60
   268e8:	b0a4      	sub	sp, #144	; 0x90
   268ea:	4604      	mov	r4, r0
   268ec:	ae04      	add	r6, sp, #16
   268ee:	b9e5      	cbnz	r5, 2692a <mbedtls_sha_finish_internal+0x46>
   268f0:	2201      	movs	r2, #1
   268f2:	2300      	movs	r3, #0
   268f4:	6062      	str	r2, [r4, #4]
   268f6:	4630      	mov	r0, r6
   268f8:	e9cd 3300 	strd	r3, r3, [sp]
   268fc:	aa02      	add	r2, sp, #8
   268fe:	4629      	mov	r1, r5
   26900:	f000 fa18 	bl	26d34 <SetDataBuffersInfo>
   26904:	b110      	cbz	r0, 2690c <mbedtls_sha_finish_internal+0x28>
   26906:	2001      	movs	r0, #1
   26908:	b024      	add	sp, #144	; 0x90
   2690a:	bd70      	pop	{r4, r5, r6, pc}
   2690c:	462a      	mov	r2, r5
   2690e:	a902      	add	r1, sp, #8
   26910:	4620      	mov	r0, r4
   26912:	f000 fa6d 	bl	26df0 <ProcessHashDrv>
   26916:	2800      	cmp	r0, #0
   26918:	d1f5      	bne.n	26906 <mbedtls_sha_finish_internal+0x22>
   2691a:	4620      	mov	r0, r4
   2691c:	f000 fb7e 	bl	2701c <FinishHashDrv>
   26920:	2800      	cmp	r0, #0
   26922:	d1f0      	bne.n	26906 <mbedtls_sha_finish_internal+0x22>
   26924:	6620      	str	r0, [r4, #96]	; 0x60
   26926:	b024      	add	sp, #144	; 0x90
   26928:	bd70      	pop	{r4, r5, r6, pc}
   2692a:	2d80      	cmp	r5, #128	; 0x80
   2692c:	462a      	mov	r2, r5
   2692e:	f100 0164 	add.w	r1, r0, #100	; 0x64
   26932:	bf28      	it	cs
   26934:	2280      	movcs	r2, #128	; 0x80
   26936:	4630      	mov	r0, r6
   26938:	f7ff fb3c 	bl	25fb4 <CC_PalMemCopyPlat>
   2693c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2693e:	e7d7      	b.n	268f0 <mbedtls_sha_finish_internal+0xc>

00026940 <mbedtls_sha_update_internal>:
   26940:	2800      	cmp	r0, #0
   26942:	f000 80cd 	beq.w	26ae0 <mbedtls_sha_update_internal+0x1a0>
   26946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2694a:	4615      	mov	r5, r2
   2694c:	b0a5      	sub	sp, #148	; 0x94
   2694e:	2a00      	cmp	r2, #0
   26950:	f000 80b4 	beq.w	26abc <mbedtls_sha_update_internal+0x17c>
   26954:	460f      	mov	r7, r1
   26956:	2900      	cmp	r1, #0
   26958:	f000 80ac 	beq.w	26ab4 <mbedtls_sha_update_internal+0x174>
   2695c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   26960:	4606      	mov	r6, r0
   26962:	6e00      	ldr	r0, [r0, #96]	; 0x60
   26964:	d37d      	bcc.n	26a62 <mbedtls_sha_update_internal+0x122>
   26966:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2696a:	f106 0964 	add.w	r9, r6, #100	; 0x64
   2696e:	e014      	b.n	2699a <mbedtls_sha_update_internal+0x5a>
   26970:	4283      	cmp	r3, r0
   26972:	46ba      	mov	sl, r7
   26974:	f64f 74ff 	movw	r4, #65535	; 0xffff
   26978:	d029      	beq.n	269ce <mbedtls_sha_update_internal+0x8e>
   2697a:	fbb4 fbf3 	udiv	fp, r4, r3
   2697e:	fb03 fb0b 	mul.w	fp, r3, fp
   26982:	f1bb 0f00 	cmp.w	fp, #0
   26986:	d144      	bne.n	26a12 <mbedtls_sha_update_internal+0xd2>
   26988:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   2698c:	4447      	add	r7, r8
   2698e:	3dff      	subs	r5, #255	; 0xff
   26990:	2c00      	cmp	r4, #0
   26992:	d159      	bne.n	26a48 <mbedtls_sha_update_internal+0x108>
   26994:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   26998:	d363      	bcc.n	26a62 <mbedtls_sha_update_internal+0x122>
   2699a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2699c:	1a1c      	subs	r4, r3, r0
   2699e:	fbb4 f2f3 	udiv	r2, r4, r3
   269a2:	fb03 4412 	mls	r4, r3, r2, r4
   269a6:	2c00      	cmp	r4, #0
   269a8:	d0e2      	beq.n	26970 <mbedtls_sha_update_internal+0x30>
   269aa:	4544      	cmp	r4, r8
   269ac:	bf28      	it	cs
   269ae:	4644      	movcs	r4, r8
   269b0:	4622      	mov	r2, r4
   269b2:	4448      	add	r0, r9
   269b4:	4639      	mov	r1, r7
   269b6:	f7ff fafd 	bl	25fb4 <CC_PalMemCopyPlat>
   269ba:	6e30      	ldr	r0, [r6, #96]	; 0x60
   269bc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   269be:	4420      	add	r0, r4
   269c0:	4283      	cmp	r3, r0
   269c2:	eb07 0a04 	add.w	sl, r7, r4
   269c6:	6630      	str	r0, [r6, #96]	; 0x60
   269c8:	eba8 0404 	sub.w	r4, r8, r4
   269cc:	d1d5      	bne.n	2697a <mbedtls_sha_update_internal+0x3a>
   269ce:	2b80      	cmp	r3, #128	; 0x80
   269d0:	bf28      	it	cs
   269d2:	2380      	movcs	r3, #128	; 0x80
   269d4:	461a      	mov	r2, r3
   269d6:	4649      	mov	r1, r9
   269d8:	a804      	add	r0, sp, #16
   269da:	f7ff faeb 	bl	25fb4 <CC_PalMemCopyPlat>
   269de:	2300      	movs	r3, #0
   269e0:	e9cd 3300 	strd	r3, r3, [sp]
   269e4:	aa02      	add	r2, sp, #8
   269e6:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   269e8:	a804      	add	r0, sp, #16
   269ea:	f000 f9a3 	bl	26d34 <SetDataBuffersInfo>
   269ee:	2800      	cmp	r0, #0
   269f0:	d160      	bne.n	26ab4 <mbedtls_sha_update_internal+0x174>
   269f2:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   269f4:	a902      	add	r1, sp, #8
   269f6:	4630      	mov	r0, r6
   269f8:	f000 f9fa 	bl	26df0 <ProcessHashDrv>
   269fc:	2800      	cmp	r0, #0
   269fe:	d159      	bne.n	26ab4 <mbedtls_sha_update_internal+0x174>
   26a00:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   26a02:	fbb4 fbf3 	udiv	fp, r4, r3
   26a06:	fb03 fb0b 	mul.w	fp, r3, fp
   26a0a:	6630      	str	r0, [r6, #96]	; 0x60
   26a0c:	f1bb 0f00 	cmp.w	fp, #0
   26a10:	d0ba      	beq.n	26988 <mbedtls_sha_update_internal+0x48>
   26a12:	2300      	movs	r3, #0
   26a14:	e9cd 3300 	strd	r3, r3, [sp]
   26a18:	aa02      	add	r2, sp, #8
   26a1a:	4659      	mov	r1, fp
   26a1c:	4650      	mov	r0, sl
   26a1e:	f000 f989 	bl	26d34 <SetDataBuffersInfo>
   26a22:	2800      	cmp	r0, #0
   26a24:	d146      	bne.n	26ab4 <mbedtls_sha_update_internal+0x174>
   26a26:	a902      	add	r1, sp, #8
   26a28:	465a      	mov	r2, fp
   26a2a:	4630      	mov	r0, r6
   26a2c:	f000 f9e0 	bl	26df0 <ProcessHashDrv>
   26a30:	2800      	cmp	r0, #0
   26a32:	d13f      	bne.n	26ab4 <mbedtls_sha_update_internal+0x174>
   26a34:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   26a38:	eba4 040b 	sub.w	r4, r4, fp
   26a3c:	6e30      	ldr	r0, [r6, #96]	; 0x60
   26a3e:	44da      	add	sl, fp
   26a40:	4447      	add	r7, r8
   26a42:	3dff      	subs	r5, #255	; 0xff
   26a44:	2c00      	cmp	r4, #0
   26a46:	d0a5      	beq.n	26994 <mbedtls_sha_update_internal+0x54>
   26a48:	3019      	adds	r0, #25
   26a4a:	4651      	mov	r1, sl
   26a4c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   26a50:	4622      	mov	r2, r4
   26a52:	f7ff faaf 	bl	25fb4 <CC_PalMemCopyPlat>
   26a56:	6e30      	ldr	r0, [r6, #96]	; 0x60
   26a58:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   26a5c:	4420      	add	r0, r4
   26a5e:	6630      	str	r0, [r6, #96]	; 0x60
   26a60:	d29b      	bcs.n	2699a <mbedtls_sha_update_internal+0x5a>
   26a62:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   26a64:	1a14      	subs	r4, r2, r0
   26a66:	fbb4 f3f2 	udiv	r3, r4, r2
   26a6a:	fb02 4413 	mls	r4, r2, r3, r4
   26a6e:	42ac      	cmp	r4, r5
   26a70:	bf28      	it	cs
   26a72:	462c      	movcs	r4, r5
   26a74:	bb34      	cbnz	r4, 26ac4 <mbedtls_sha_update_internal+0x184>
   26a76:	4290      	cmp	r0, r2
   26a78:	d034      	beq.n	26ae4 <mbedtls_sha_update_internal+0x1a4>
   26a7a:	fbb5 f4f2 	udiv	r4, r5, r2
   26a7e:	fb02 f404 	mul.w	r4, r2, r4
   26a82:	b96c      	cbnz	r4, 26aa0 <mbedtls_sha_update_internal+0x160>
   26a84:	b1d5      	cbz	r5, 26abc <mbedtls_sha_update_internal+0x17c>
   26a86:	6e33      	ldr	r3, [r6, #96]	; 0x60
   26a88:	3319      	adds	r3, #25
   26a8a:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   26a8e:	462a      	mov	r2, r5
   26a90:	4639      	mov	r1, r7
   26a92:	f7ff fa8f 	bl	25fb4 <CC_PalMemCopyPlat>
   26a96:	6e33      	ldr	r3, [r6, #96]	; 0x60
   26a98:	442b      	add	r3, r5
   26a9a:	2000      	movs	r0, #0
   26a9c:	6633      	str	r3, [r6, #96]	; 0x60
   26a9e:	e00a      	b.n	26ab6 <mbedtls_sha_update_internal+0x176>
   26aa0:	2300      	movs	r3, #0
   26aa2:	e9cd 3300 	strd	r3, r3, [sp]
   26aa6:	aa02      	add	r2, sp, #8
   26aa8:	4621      	mov	r1, r4
   26aaa:	4638      	mov	r0, r7
   26aac:	f000 f942 	bl	26d34 <SetDataBuffersInfo>
   26ab0:	2800      	cmp	r0, #0
   26ab2:	d033      	beq.n	26b1c <mbedtls_sha_update_internal+0x1dc>
   26ab4:	2001      	movs	r0, #1
   26ab6:	b025      	add	sp, #148	; 0x94
   26ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26abc:	4628      	mov	r0, r5
   26abe:	b025      	add	sp, #148	; 0x94
   26ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ac4:	f106 0364 	add.w	r3, r6, #100	; 0x64
   26ac8:	4639      	mov	r1, r7
   26aca:	4622      	mov	r2, r4
   26acc:	4418      	add	r0, r3
   26ace:	f7ff fa71 	bl	25fb4 <CC_PalMemCopyPlat>
   26ad2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   26ad4:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   26ad6:	4420      	add	r0, r4
   26ad8:	1b2d      	subs	r5, r5, r4
   26ada:	4427      	add	r7, r4
   26adc:	6630      	str	r0, [r6, #96]	; 0x60
   26ade:	e7ca      	b.n	26a76 <mbedtls_sha_update_internal+0x136>
   26ae0:	2001      	movs	r0, #1
   26ae2:	4770      	bx	lr
   26ae4:	2a80      	cmp	r2, #128	; 0x80
   26ae6:	bf28      	it	cs
   26ae8:	2280      	movcs	r2, #128	; 0x80
   26aea:	f106 0164 	add.w	r1, r6, #100	; 0x64
   26aee:	a804      	add	r0, sp, #16
   26af0:	f7ff fa60 	bl	25fb4 <CC_PalMemCopyPlat>
   26af4:	2300      	movs	r3, #0
   26af6:	e9cd 3300 	strd	r3, r3, [sp]
   26afa:	a804      	add	r0, sp, #16
   26afc:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   26afe:	aa02      	add	r2, sp, #8
   26b00:	f000 f918 	bl	26d34 <SetDataBuffersInfo>
   26b04:	2800      	cmp	r0, #0
   26b06:	d1d5      	bne.n	26ab4 <mbedtls_sha_update_internal+0x174>
   26b08:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   26b0a:	a902      	add	r1, sp, #8
   26b0c:	4630      	mov	r0, r6
   26b0e:	f000 f96f 	bl	26df0 <ProcessHashDrv>
   26b12:	2800      	cmp	r0, #0
   26b14:	d1ce      	bne.n	26ab4 <mbedtls_sha_update_internal+0x174>
   26b16:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   26b18:	6630      	str	r0, [r6, #96]	; 0x60
   26b1a:	e7ae      	b.n	26a7a <mbedtls_sha_update_internal+0x13a>
   26b1c:	a902      	add	r1, sp, #8
   26b1e:	4622      	mov	r2, r4
   26b20:	4630      	mov	r0, r6
   26b22:	f000 f965 	bl	26df0 <ProcessHashDrv>
   26b26:	2800      	cmp	r0, #0
   26b28:	d1c4      	bne.n	26ab4 <mbedtls_sha_update_internal+0x174>
   26b2a:	4427      	add	r7, r4
   26b2c:	1b2d      	subs	r5, r5, r4
   26b2e:	e7a9      	b.n	26a84 <mbedtls_sha_update_internal+0x144>

00026b30 <cc_mbedtls_sha256>:
   26b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26b32:	461c      	mov	r4, r3
   26b34:	4605      	mov	r5, r0
   26b36:	4811      	ldr	r0, [pc, #68]	; (26b7c <cc_mbedtls_sha256+0x4c>)
   26b38:	460e      	mov	r6, r1
   26b3a:	4617      	mov	r7, r2
   26b3c:	f7ff fe42 	bl	267c4 <cc_mbedtls_sha256_init>
   26b40:	4621      	mov	r1, r4
   26b42:	480e      	ldr	r0, [pc, #56]	; (26b7c <cc_mbedtls_sha256+0x4c>)
   26b44:	f7ff fe58 	bl	267f8 <cc_mbedtls_sha256_starts>
   26b48:	4604      	mov	r4, r0
   26b4a:	b120      	cbz	r0, 26b56 <cc_mbedtls_sha256+0x26>
   26b4c:	480b      	ldr	r0, [pc, #44]	; (26b7c <cc_mbedtls_sha256+0x4c>)
   26b4e:	f7ff fe4d 	bl	267ec <cc_mbedtls_sha256_free>
   26b52:	4620      	mov	r0, r4
   26b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26b56:	4809      	ldr	r0, [pc, #36]	; (26b7c <cc_mbedtls_sha256+0x4c>)
   26b58:	4632      	mov	r2, r6
   26b5a:	4629      	mov	r1, r5
   26b5c:	f7ff fe60 	bl	26820 <cc_mbedtls_sha256_update>
   26b60:	4604      	mov	r4, r0
   26b62:	2800      	cmp	r0, #0
   26b64:	d1f2      	bne.n	26b4c <cc_mbedtls_sha256+0x1c>
   26b66:	4639      	mov	r1, r7
   26b68:	4804      	ldr	r0, [pc, #16]	; (26b7c <cc_mbedtls_sha256+0x4c>)
   26b6a:	f7ff fe83 	bl	26874 <cc_mbedtls_sha256_finish>
   26b6e:	4604      	mov	r4, r0
   26b70:	4802      	ldr	r0, [pc, #8]	; (26b7c <cc_mbedtls_sha256+0x4c>)
   26b72:	f7ff fe3b 	bl	267ec <cc_mbedtls_sha256_free>
   26b76:	4620      	mov	r0, r4
   26b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26b7a:	bf00      	nop
   26b7c:	20004a6c 	.word	0x20004a6c

00026b80 <RNG_PLAT_SetUserRngParameters>:
   26b80:	b530      	push	{r4, r5, lr}
   26b82:	b083      	sub	sp, #12
   26b84:	231c      	movs	r3, #28
   26b86:	a901      	add	r1, sp, #4
   26b88:	4604      	mov	r4, r0
   26b8a:	9301      	str	r3, [sp, #4]
   26b8c:	f000 f834 	bl	26bf8 <CC_PalTrngParamGet>
   26b90:	4605      	mov	r5, r0
   26b92:	b938      	cbnz	r0, 26ba4 <RNG_PLAT_SetUserRngParameters+0x24>
   26b94:	9b01      	ldr	r3, [sp, #4]
   26b96:	2b1c      	cmp	r3, #28
   26b98:	d007      	beq.n	26baa <RNG_PLAT_SetUserRngParameters+0x2a>
   26b9a:	4d15      	ldr	r5, [pc, #84]	; (26bf0 <RNG_PLAT_SetUserRngParameters+0x70>)
   26b9c:	211c      	movs	r1, #28
   26b9e:	4620      	mov	r0, r4
   26ba0:	f7ff fa0c 	bl	25fbc <CC_PalMemSetZeroPlat>
   26ba4:	4628      	mov	r0, r5
   26ba6:	b003      	add	sp, #12
   26ba8:	bd30      	pop	{r4, r5, pc}
   26baa:	e9d4 3200 	ldrd	r3, r2, [r4]
   26bae:	2101      	movs	r1, #1
   26bb0:	3b00      	subs	r3, #0
   26bb2:	61e1      	str	r1, [r4, #28]
   26bb4:	bf18      	it	ne
   26bb6:	2301      	movne	r3, #1
   26bb8:	b10a      	cbz	r2, 26bbe <RNG_PLAT_SetUserRngParameters+0x3e>
   26bba:	f043 0302 	orr.w	r3, r3, #2
   26bbe:	68a2      	ldr	r2, [r4, #8]
   26bc0:	b932      	cbnz	r2, 26bd0 <RNG_PLAT_SetUserRngParameters+0x50>
   26bc2:	68e2      	ldr	r2, [r4, #12]
   26bc4:	b942      	cbnz	r2, 26bd8 <RNG_PLAT_SetUserRngParameters+0x58>
   26bc6:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26bca:	b97b      	cbnz	r3, 26bec <RNG_PLAT_SetUserRngParameters+0x6c>
   26bcc:	4d09      	ldr	r5, [pc, #36]	; (26bf4 <RNG_PLAT_SetUserRngParameters+0x74>)
   26bce:	e7e5      	b.n	26b9c <RNG_PLAT_SetUserRngParameters+0x1c>
   26bd0:	68e2      	ldr	r2, [r4, #12]
   26bd2:	f043 0304 	orr.w	r3, r3, #4
   26bd6:	b13a      	cbz	r2, 26be8 <RNG_PLAT_SetUserRngParameters+0x68>
   26bd8:	f043 0308 	orr.w	r3, r3, #8
   26bdc:	2200      	movs	r2, #0
   26bde:	4628      	mov	r0, r5
   26be0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26be4:	b003      	add	sp, #12
   26be6:	bd30      	pop	{r4, r5, pc}
   26be8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26bec:	4615      	mov	r5, r2
   26bee:	e7d9      	b.n	26ba4 <RNG_PLAT_SetUserRngParameters+0x24>
   26bf0:	00f00c37 	.word	0x00f00c37
   26bf4:	00f00c0e 	.word	0x00f00c0e

00026bf8 <CC_PalTrngParamGet>:
   26bf8:	b118      	cbz	r0, 26c02 <CC_PalTrngParamGet+0xa>
   26bfa:	b111      	cbz	r1, 26c02 <CC_PalTrngParamGet+0xa>
   26bfc:	680b      	ldr	r3, [r1, #0]
   26bfe:	2b1c      	cmp	r3, #28
   26c00:	d001      	beq.n	26c06 <CC_PalTrngParamGet+0xe>
   26c02:	2001      	movs	r0, #1
   26c04:	4770      	bx	lr
   26c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26c0a:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   26c0e:	3201      	adds	r2, #1
   26c10:	bf14      	ite	ne
   26c12:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   26c16:	f241 225c 	movweq	r2, #4700	; 0x125c
   26c1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26c1e:	6002      	str	r2, [r0, #0]
   26c20:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   26c24:	3201      	adds	r2, #1
   26c26:	bf14      	ite	ne
   26c28:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   26c2c:	f641 1264 	movweq	r2, #6500	; 0x1964
   26c30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26c34:	6042      	str	r2, [r0, #4]
   26c36:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   26c3a:	3201      	adds	r2, #1
   26c3c:	bf14      	ite	ne
   26c3e:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   26c42:	f640 62d8 	movweq	r2, #3800	; 0xed8
   26c46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26c4a:	6082      	str	r2, [r0, #8]
   26c4c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   26c50:	3201      	adds	r2, #1
   26c52:	bf14      	ite	ne
   26c54:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   26c58:	f241 3288 	movweq	r2, #5000	; 0x1388
   26c5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26c60:	60c2      	str	r2, [r0, #12]
   26c62:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   26c66:	3201      	adds	r2, #1
   26c68:	bf14      	ite	ne
   26c6a:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   26c6e:	2290      	moveq	r2, #144	; 0x90
   26c70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26c74:	6102      	str	r2, [r0, #16]
   26c76:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   26c7a:	3201      	adds	r2, #1
   26c7c:	bf14      	ite	ne
   26c7e:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   26c82:	2251      	moveq	r2, #81	; 0x51
   26c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26c88:	6142      	str	r2, [r0, #20]
   26c8a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   26c8e:	3201      	adds	r2, #1
   26c90:	bf14      	ite	ne
   26c92:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   26c96:	f240 3337 	movweq	r3, #823	; 0x337
   26c9a:	6183      	str	r3, [r0, #24]
   26c9c:	2000      	movs	r0, #0
   26c9e:	4770      	bx	lr

00026ca0 <LLF_RND_WaitRngInterrupt>:
   26ca0:	b508      	push	{r3, lr}
   26ca2:	4601      	mov	r1, r0
   26ca4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   26ca8:	f7ff f910 	bl	25ecc <CC_HalWaitInterruptRND>
   26cac:	4b03      	ldr	r3, [pc, #12]	; (26cbc <LLF_RND_WaitRngInterrupt+0x1c>)
   26cae:	2200      	movs	r2, #0
   26cb0:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   26cb4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   26cb8:	bd08      	pop	{r3, pc}
   26cba:	bf00      	nop
   26cbc:	5002b000 	.word	0x5002b000

00026cc0 <LLF_RND_GetRoscSampleCnt>:
   26cc0:	3801      	subs	r0, #1
   26cc2:	2807      	cmp	r0, #7
   26cc4:	d805      	bhi.n	26cd2 <LLF_RND_GetRoscSampleCnt+0x12>
   26cc6:	e8df f000 	tbb	[pc, r0]
   26cca:	0e12      	.short	0x0e12
   26ccc:	04040a04 	.word	0x04040a04
   26cd0:	0604      	.short	0x0604
   26cd2:	4809      	ldr	r0, [pc, #36]	; (26cf8 <LLF_RND_GetRoscSampleCnt+0x38>)
   26cd4:	4770      	bx	lr
   26cd6:	68cb      	ldr	r3, [r1, #12]
   26cd8:	624b      	str	r3, [r1, #36]	; 0x24
   26cda:	2000      	movs	r0, #0
   26cdc:	4770      	bx	lr
   26cde:	688b      	ldr	r3, [r1, #8]
   26ce0:	624b      	str	r3, [r1, #36]	; 0x24
   26ce2:	2000      	movs	r0, #0
   26ce4:	4770      	bx	lr
   26ce6:	684b      	ldr	r3, [r1, #4]
   26ce8:	624b      	str	r3, [r1, #36]	; 0x24
   26cea:	2000      	movs	r0, #0
   26cec:	4770      	bx	lr
   26cee:	680b      	ldr	r3, [r1, #0]
   26cf0:	624b      	str	r3, [r1, #36]	; 0x24
   26cf2:	2000      	movs	r0, #0
   26cf4:	4770      	bx	lr
   26cf6:	bf00      	nop
   26cf8:	00f10c31 	.word	0x00f10c31

00026cfc <LLF_RND_GetFastestRosc>:
   26cfc:	680b      	ldr	r3, [r1, #0]
   26cfe:	e002      	b.n	26d06 <LLF_RND_GetFastestRosc+0xa>
   26d00:	2b08      	cmp	r3, #8
   26d02:	600b      	str	r3, [r1, #0]
   26d04:	d806      	bhi.n	26d14 <LLF_RND_GetFastestRosc+0x18>
   26d06:	6a02      	ldr	r2, [r0, #32]
   26d08:	4213      	tst	r3, r2
   26d0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   26d0e:	d0f7      	beq.n	26d00 <LLF_RND_GetFastestRosc+0x4>
   26d10:	2000      	movs	r0, #0
   26d12:	4770      	bx	lr
   26d14:	4800      	ldr	r0, [pc, #0]	; (26d18 <LLF_RND_GetFastestRosc+0x1c>)
   26d16:	4770      	bx	lr
   26d18:	00f10c31 	.word	0x00f10c31

00026d1c <LLF_RND_TurnOffTrng>:
   26d1c:	4b04      	ldr	r3, [pc, #16]	; (26d30 <LLF_RND_TurnOffTrng+0x14>)
   26d1e:	2200      	movs	r2, #0
   26d20:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   26d24:	f44f 6080 	mov.w	r0, #1024	; 0x400
   26d28:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   26d2c:	f7ff b8b4 	b.w	25e98 <CC_HalClearInterruptBit>
   26d30:	5002b000 	.word	0x5002b000

00026d34 <SetDataBuffersInfo>:
   26d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   26d36:	b083      	sub	sp, #12
   26d38:	461d      	mov	r5, r3
   26d3a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   26d3e:	f04f 0300 	mov.w	r3, #0
   26d42:	f88d 3007 	strb.w	r3, [sp, #7]
   26d46:	d324      	bcc.n	26d92 <SetDataBuffersInfo+0x5e>
   26d48:	468c      	mov	ip, r1
   26d4a:	4484      	add	ip, r0
   26d4c:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   26d50:	4604      	mov	r4, r0
   26d52:	d81e      	bhi.n	26d92 <SetDataBuffersInfo+0x5e>
   26d54:	4617      	mov	r7, r2
   26d56:	f10d 0307 	add.w	r3, sp, #7
   26d5a:	2201      	movs	r2, #1
   26d5c:	f000 fe66 	bl	27a2c <CC_PalDataBufferAttrGet>
   26d60:	4606      	mov	r6, r0
   26d62:	b9b0      	cbnz	r0, 26d92 <SetDataBuffersInfo+0x5e>
   26d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26d6a:	603c      	str	r4, [r7, #0]
   26d6c:	713b      	strb	r3, [r7, #4]
   26d6e:	b192      	cbz	r2, 26d96 <SetDataBuffersInfo+0x62>
   26d70:	b14d      	cbz	r5, 26d86 <SetDataBuffersInfo+0x52>
   26d72:	4602      	mov	r2, r0
   26d74:	9908      	ldr	r1, [sp, #32]
   26d76:	f10d 0307 	add.w	r3, sp, #7
   26d7a:	4628      	mov	r0, r5
   26d7c:	f000 fe56 	bl	27a2c <CC_PalDataBufferAttrGet>
   26d80:	b938      	cbnz	r0, 26d92 <SetDataBuffersInfo+0x5e>
   26d82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26d88:	4630      	mov	r0, r6
   26d8a:	6015      	str	r5, [r2, #0]
   26d8c:	7113      	strb	r3, [r2, #4]
   26d8e:	b003      	add	sp, #12
   26d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d92:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   26d96:	4630      	mov	r0, r6
   26d98:	b003      	add	sp, #12
   26d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026d9c <InitHashDrv>:
   26d9c:	b1e8      	cbz	r0, 26dda <InitHashDrv+0x3e>
   26d9e:	b510      	push	{r4, lr}
   26da0:	6804      	ldr	r4, [r0, #0]
   26da2:	2c01      	cmp	r4, #1
   26da4:	d004      	beq.n	26db0 <InitHashDrv+0x14>
   26da6:	2c02      	cmp	r4, #2
   26da8:	d010      	beq.n	26dcc <InitHashDrv+0x30>
   26daa:	b144      	cbz	r4, 26dbe <InitHashDrv+0x22>
   26dac:	480c      	ldr	r0, [pc, #48]	; (26de0 <InitHashDrv+0x44>)
   26dae:	bd10      	pop	{r4, pc}
   26db0:	490c      	ldr	r1, [pc, #48]	; (26de4 <InitHashDrv+0x48>)
   26db2:	2220      	movs	r2, #32
   26db4:	3008      	adds	r0, #8
   26db6:	f7ff f8fd 	bl	25fb4 <CC_PalMemCopyPlat>
   26dba:	2000      	movs	r0, #0
   26dbc:	bd10      	pop	{r4, pc}
   26dbe:	490a      	ldr	r1, [pc, #40]	; (26de8 <InitHashDrv+0x4c>)
   26dc0:	2214      	movs	r2, #20
   26dc2:	3008      	adds	r0, #8
   26dc4:	f7ff f8f6 	bl	25fb4 <CC_PalMemCopyPlat>
   26dc8:	4620      	mov	r0, r4
   26dca:	bd10      	pop	{r4, pc}
   26dcc:	4907      	ldr	r1, [pc, #28]	; (26dec <InitHashDrv+0x50>)
   26dce:	2220      	movs	r2, #32
   26dd0:	3008      	adds	r0, #8
   26dd2:	f7ff f8ef 	bl	25fb4 <CC_PalMemCopyPlat>
   26dd6:	2000      	movs	r0, #0
   26dd8:	bd10      	pop	{r4, pc}
   26dda:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   26dde:	4770      	bx	lr
   26de0:	00f30001 	.word	0x00f30001
   26de4:	00031ab0 	.word	0x00031ab0
   26de8:	00031a7c 	.word	0x00031a7c
   26dec:	00031a90 	.word	0x00031a90

00026df0 <ProcessHashDrv>:
   26df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26df4:	2900      	cmp	r1, #0
   26df6:	f000 80f9 	beq.w	26fec <ProcessHashDrv+0x1fc>
   26dfa:	4604      	mov	r4, r0
   26dfc:	2800      	cmp	r0, #0
   26dfe:	f000 80f9 	beq.w	26ff4 <ProcessHashDrv+0x204>
   26e02:	6803      	ldr	r3, [r0, #0]
   26e04:	4690      	mov	r8, r2
   26e06:	460f      	mov	r7, r1
   26e08:	2b00      	cmp	r3, #0
   26e0a:	f000 80c3 	beq.w	26f94 <ProcessHashDrv+0x1a4>
   26e0e:	3b01      	subs	r3, #1
   26e10:	2b01      	cmp	r3, #1
   26e12:	f200 80d7 	bhi.w	26fc4 <ProcessHashDrv+0x1d4>
   26e16:	4879      	ldr	r0, [pc, #484]	; (26ffc <ProcessHashDrv+0x20c>)
   26e18:	f04f 31ff 	mov.w	r1, #4294967295
   26e1c:	f04f 0902 	mov.w	r9, #2
   26e20:	f7ff f8e4 	bl	25fec <CC_PalMutexLock>
   26e24:	2800      	cmp	r0, #0
   26e26:	f040 80bf 	bne.w	26fa8 <ProcessHashDrv+0x1b8>
   26e2a:	2000      	movs	r0, #0
   26e2c:	f7ff f90e 	bl	2604c <CC_PalPowerSaveModeSelect>
   26e30:	4606      	mov	r6, r0
   26e32:	2800      	cmp	r0, #0
   26e34:	f040 80c2 	bne.w	26fbc <ProcessHashDrv+0x1cc>
   26e38:	4a71      	ldr	r2, [pc, #452]	; (27000 <ProcessHashDrv+0x210>)
   26e3a:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   26e3e:	2b00      	cmp	r3, #0
   26e40:	d1fb      	bne.n	26e3a <ProcessHashDrv+0x4a>
   26e42:	4d6f      	ldr	r5, [pc, #444]	; (27000 <ProcessHashDrv+0x210>)
   26e44:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   26e48:	2b00      	cmp	r3, #0
   26e4a:	d1fb      	bne.n	26e44 <ProcessHashDrv+0x54>
   26e4c:	f04f 30ff 	mov.w	r0, #4294967295
   26e50:	f7ff f822 	bl	25e98 <CC_HalClearInterruptBit>
   26e54:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   26e58:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   26e5c:	f7ff f82a 	bl	25eb4 <CC_HalMaskInterrupt>
   26e60:	2301      	movs	r3, #1
   26e62:	2207      	movs	r2, #7
   26e64:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   26e68:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   26e6c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   26e70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   26e72:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   26e76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   26e78:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   26e7c:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   26e80:	6823      	ldr	r3, [r4, #0]
   26e82:	b15b      	cbz	r3, 26e9c <ProcessHashDrv+0xac>
   26e84:	3b01      	subs	r3, #1
   26e86:	2b01      	cmp	r3, #1
   26e88:	d818      	bhi.n	26ebc <ProcessHashDrv+0xcc>
   26e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26e8c:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   26e90:	6a23      	ldr	r3, [r4, #32]
   26e92:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   26e96:	69e3      	ldr	r3, [r4, #28]
   26e98:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   26e9c:	4b58      	ldr	r3, [pc, #352]	; (27000 <ProcessHashDrv+0x210>)
   26e9e:	69a2      	ldr	r2, [r4, #24]
   26ea0:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   26ea4:	6962      	ldr	r2, [r4, #20]
   26ea6:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   26eaa:	6922      	ldr	r2, [r4, #16]
   26eac:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   26eb0:	68e2      	ldr	r2, [r4, #12]
   26eb2:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   26eb6:	68a2      	ldr	r2, [r4, #8]
   26eb8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   26ebc:	4a50      	ldr	r2, [pc, #320]	; (27000 <ProcessHashDrv+0x210>)
   26ebe:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26ec2:	2b00      	cmp	r3, #0
   26ec4:	d1fb      	bne.n	26ebe <ProcessHashDrv+0xce>
   26ec6:	f1b8 0f00 	cmp.w	r8, #0
   26eca:	d05f      	beq.n	26f8c <ProcessHashDrv+0x19c>
   26ecc:	6863      	ldr	r3, [r4, #4]
   26ece:	2b01      	cmp	r3, #1
   26ed0:	bf08      	it	eq
   26ed2:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   26ed6:	4b4a      	ldr	r3, [pc, #296]	; (27000 <ProcessHashDrv+0x210>)
   26ed8:	683a      	ldr	r2, [r7, #0]
   26eda:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   26ede:	2040      	movs	r0, #64	; 0x40
   26ee0:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   26ee4:	f7fe ffec 	bl	25ec0 <CC_HalWaitInterrupt>
   26ee8:	4606      	mov	r6, r0
   26eea:	4a45      	ldr	r2, [pc, #276]	; (27000 <ProcessHashDrv+0x210>)
   26eec:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26ef0:	2b00      	cmp	r3, #0
   26ef2:	d1fb      	bne.n	26eec <ProcessHashDrv+0xfc>
   26ef4:	4a42      	ldr	r2, [pc, #264]	; (27000 <ProcessHashDrv+0x210>)
   26ef6:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   26efa:	2b00      	cmp	r3, #0
   26efc:	d1fb      	bne.n	26ef6 <ProcessHashDrv+0x106>
   26efe:	6823      	ldr	r3, [r4, #0]
   26f00:	b15b      	cbz	r3, 26f1a <ProcessHashDrv+0x12a>
   26f02:	3b01      	subs	r3, #1
   26f04:	2b01      	cmp	r3, #1
   26f06:	d818      	bhi.n	26f3a <ProcessHashDrv+0x14a>
   26f08:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   26f0c:	6263      	str	r3, [r4, #36]	; 0x24
   26f0e:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   26f12:	6223      	str	r3, [r4, #32]
   26f14:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   26f18:	61e3      	str	r3, [r4, #28]
   26f1a:	4b39      	ldr	r3, [pc, #228]	; (27000 <ProcessHashDrv+0x210>)
   26f1c:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   26f20:	61a2      	str	r2, [r4, #24]
   26f22:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   26f26:	6162      	str	r2, [r4, #20]
   26f28:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   26f2c:	6122      	str	r2, [r4, #16]
   26f2e:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   26f32:	60e2      	str	r2, [r4, #12]
   26f34:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   26f38:	60a3      	str	r3, [r4, #8]
   26f3a:	4a31      	ldr	r2, [pc, #196]	; (27000 <ProcessHashDrv+0x210>)
   26f3c:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   26f40:	64a1      	str	r1, [r4, #72]	; 0x48
   26f42:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   26f46:	64e1      	str	r1, [r4, #76]	; 0x4c
   26f48:	2300      	movs	r3, #0
   26f4a:	2101      	movs	r1, #1
   26f4c:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   26f50:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   26f54:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   26f58:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26f5c:	2b00      	cmp	r3, #0
   26f5e:	d1fb      	bne.n	26f58 <ProcessHashDrv+0x168>
   26f60:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   26f64:	2e00      	cmp	r6, #0
   26f66:	d13b      	bne.n	26fe0 <ProcessHashDrv+0x1f0>
   26f68:	4b25      	ldr	r3, [pc, #148]	; (27000 <ProcessHashDrv+0x210>)
   26f6a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   26f6e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   26f72:	f7fe ff9f 	bl	25eb4 <CC_HalMaskInterrupt>
   26f76:	2001      	movs	r0, #1
   26f78:	f7ff f868 	bl	2604c <CC_PalPowerSaveModeSelect>
   26f7c:	bb60      	cbnz	r0, 26fd8 <ProcessHashDrv+0x1e8>
   26f7e:	481f      	ldr	r0, [pc, #124]	; (26ffc <ProcessHashDrv+0x20c>)
   26f80:	f7ff f83c 	bl	25ffc <CC_PalMutexUnlock>
   26f84:	bb10      	cbnz	r0, 26fcc <ProcessHashDrv+0x1dc>
   26f86:	4630      	mov	r0, r6
   26f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26f8c:	2304      	movs	r3, #4
   26f8e:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   26f92:	e7aa      	b.n	26eea <ProcessHashDrv+0xfa>
   26f94:	4819      	ldr	r0, [pc, #100]	; (26ffc <ProcessHashDrv+0x20c>)
   26f96:	f04f 31ff 	mov.w	r1, #4294967295
   26f9a:	f04f 0901 	mov.w	r9, #1
   26f9e:	f7ff f825 	bl	25fec <CC_PalMutexLock>
   26fa2:	2800      	cmp	r0, #0
   26fa4:	f43f af41 	beq.w	26e2a <ProcessHashDrv+0x3a>
   26fa8:	4816      	ldr	r0, [pc, #88]	; (27004 <ProcessHashDrv+0x214>)
   26faa:	f7fe f895 	bl	250d8 <CC_PalAbort>
   26fae:	2000      	movs	r0, #0
   26fb0:	f7ff f84c 	bl	2604c <CC_PalPowerSaveModeSelect>
   26fb4:	4606      	mov	r6, r0
   26fb6:	2800      	cmp	r0, #0
   26fb8:	f43f af3e 	beq.w	26e38 <ProcessHashDrv+0x48>
   26fbc:	4812      	ldr	r0, [pc, #72]	; (27008 <ProcessHashDrv+0x218>)
   26fbe:	f7fe f88b 	bl	250d8 <CC_PalAbort>
   26fc2:	e739      	b.n	26e38 <ProcessHashDrv+0x48>
   26fc4:	4e11      	ldr	r6, [pc, #68]	; (2700c <ProcessHashDrv+0x21c>)
   26fc6:	4630      	mov	r0, r6
   26fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26fcc:	4810      	ldr	r0, [pc, #64]	; (27010 <ProcessHashDrv+0x220>)
   26fce:	f7fe f883 	bl	250d8 <CC_PalAbort>
   26fd2:	4630      	mov	r0, r6
   26fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26fd8:	480e      	ldr	r0, [pc, #56]	; (27014 <ProcessHashDrv+0x224>)
   26fda:	f7fe f87d 	bl	250d8 <CC_PalAbort>
   26fde:	e7ce      	b.n	26f7e <ProcessHashDrv+0x18e>
   26fe0:	2110      	movs	r1, #16
   26fe2:	f104 0008 	add.w	r0, r4, #8
   26fe6:	f7fe ffe9 	bl	25fbc <CC_PalMemSetZeroPlat>
   26fea:	e7bd      	b.n	26f68 <ProcessHashDrv+0x178>
   26fec:	4e0a      	ldr	r6, [pc, #40]	; (27018 <ProcessHashDrv+0x228>)
   26fee:	4630      	mov	r0, r6
   26ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26ff4:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   26ff8:	e7c5      	b.n	26f86 <ProcessHashDrv+0x196>
   26ffa:	bf00      	nop
   26ffc:	20000aa8 	.word	0x20000aa8
   27000:	5002b000 	.word	0x5002b000
   27004:	000319b0 	.word	0x000319b0
   27008:	000319c8 	.word	0x000319c8
   2700c:	00f30001 	.word	0x00f30001
   27010:	00031a08 	.word	0x00031a08
   27014:	000319e8 	.word	0x000319e8
   27018:	00f30003 	.word	0x00f30003

0002701c <FinishHashDrv>:
   2701c:	b398      	cbz	r0, 27086 <FinishHashDrv+0x6a>
   2701e:	b470      	push	{r4, r5, r6}
   27020:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   27024:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   27028:	ba26      	rev	r6, r4
   2702a:	ba0d      	rev	r5, r1
   2702c:	ba14      	rev	r4, r2
   2702e:	ba19      	rev	r1, r3
   27030:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   27034:	ba12      	rev	r2, r2
   27036:	e9c0 4104 	strd	r4, r1, [r0, #16]
   2703a:	6182      	str	r2, [r0, #24]
   2703c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   27040:	e9c0 6502 	strd	r6, r5, [r0, #8]
   27044:	ba1b      	rev	r3, r3
   27046:	ba25      	rev	r5, r4
   27048:	e9c0 3507 	strd	r3, r5, [r0, #28]
   2704c:	ba14      	rev	r4, r2
   2704e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   27052:	6a81      	ldr	r1, [r0, #40]	; 0x28
   27054:	ba12      	rev	r2, r2
   27056:	ba09      	rev	r1, r1
   27058:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   2705c:	62c2      	str	r2, [r0, #44]	; 0x2c
   2705e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   27062:	ba1b      	rev	r3, r3
   27064:	ba25      	rev	r5, r4
   27066:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   2706a:	ba14      	rev	r4, r2
   2706c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   27070:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   27072:	ba12      	rev	r2, r2
   27074:	ba09      	rev	r1, r1
   27076:	ba1b      	rev	r3, r3
   27078:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2707c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   27080:	2000      	movs	r0, #0
   27082:	bc70      	pop	{r4, r5, r6}
   27084:	4770      	bx	lr
   27086:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2708a:	4770      	bx	lr

0002708c <LoadAesKey>:
   2708c:	2800      	cmp	r0, #0
   2708e:	d046      	beq.n	2711e <LoadAesKey+0x92>
   27090:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   27094:	2b00      	cmp	r3, #0
   27096:	d033      	beq.n	27100 <LoadAesKey+0x74>
   27098:	2b03      	cmp	r3, #3
   2709a:	b510      	push	{r4, lr}
   2709c:	d013      	beq.n	270c6 <LoadAesKey+0x3a>
   2709e:	4821      	ldr	r0, [pc, #132]	; (27124 <LoadAesKey+0x98>)
   270a0:	4c21      	ldr	r4, [pc, #132]	; (27128 <LoadAesKey+0x9c>)
   270a2:	6822      	ldr	r2, [r4, #0]
   270a4:	4b21      	ldr	r3, [pc, #132]	; (2712c <LoadAesKey+0xa0>)
   270a6:	6812      	ldr	r2, [r2, #0]
   270a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   270ac:	6822      	ldr	r2, [r4, #0]
   270ae:	6852      	ldr	r2, [r2, #4]
   270b0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   270b4:	6822      	ldr	r2, [r4, #0]
   270b6:	6892      	ldr	r2, [r2, #8]
   270b8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   270bc:	6822      	ldr	r2, [r4, #0]
   270be:	68d2      	ldr	r2, [r2, #12]
   270c0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   270c4:	bd10      	pop	{r4, pc}
   270c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   270c8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   270ca:	4c17      	ldr	r4, [pc, #92]	; (27128 <LoadAesKey+0x9c>)
   270cc:	f000 fbac 	bl	27828 <kmu_validate_kdr_slot_and_size>
   270d0:	2800      	cmp	r0, #0
   270d2:	d1e6      	bne.n	270a2 <LoadAesKey+0x16>
   270d4:	6822      	ldr	r2, [r4, #0]
   270d6:	4b15      	ldr	r3, [pc, #84]	; (2712c <LoadAesKey+0xa0>)
   270d8:	6812      	ldr	r2, [r2, #0]
   270da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   270de:	6822      	ldr	r2, [r4, #0]
   270e0:	6852      	ldr	r2, [r2, #4]
   270e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   270e6:	6822      	ldr	r2, [r4, #0]
   270e8:	6892      	ldr	r2, [r2, #8]
   270ea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   270ee:	6822      	ldr	r2, [r4, #0]
   270f0:	68d2      	ldr	r2, [r2, #12]
   270f2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   270f6:	f000 fba3 	bl	27840 <kmu_use_kdr_key>
   270fa:	2800      	cmp	r0, #0
   270fc:	d1d1      	bne.n	270a2 <LoadAesKey+0x16>
   270fe:	bd10      	pop	{r4, pc}
   27100:	4a0a      	ldr	r2, [pc, #40]	; (2712c <LoadAesKey+0xa0>)
   27102:	6901      	ldr	r1, [r0, #16]
   27104:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   27108:	6941      	ldr	r1, [r0, #20]
   2710a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   2710e:	6981      	ldr	r1, [r0, #24]
   27110:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   27114:	69c1      	ldr	r1, [r0, #28]
   27116:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   2711a:	4618      	mov	r0, r3
   2711c:	4770      	bx	lr
   2711e:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   27122:	4770      	bx	lr
   27124:	00f10009 	.word	0x00f10009
   27128:	20000a98 	.word	0x20000a98
   2712c:	5002b000 	.word	0x5002b000

00027130 <InitAes.part.0>:
   27130:	4a37      	ldr	r2, [pc, #220]	; (27210 <InitAes.part.0+0xe0>)
   27132:	b538      	push	{r3, r4, r5, lr}
   27134:	4604      	mov	r4, r0
   27136:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2713a:	2b00      	cmp	r3, #0
   2713c:	d1fb      	bne.n	27136 <InitAes.part.0+0x6>
   2713e:	4a34      	ldr	r2, [pc, #208]	; (27210 <InitAes.part.0+0xe0>)
   27140:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   27144:	2b00      	cmp	r3, #0
   27146:	d1fb      	bne.n	27140 <InitAes.part.0+0x10>
   27148:	4a31      	ldr	r2, [pc, #196]	; (27210 <InitAes.part.0+0xe0>)
   2714a:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   2714e:	2b00      	cmp	r3, #0
   27150:	d1fb      	bne.n	2714a <InitAes.part.0+0x1a>
   27152:	4a2f      	ldr	r2, [pc, #188]	; (27210 <InitAes.part.0+0xe0>)
   27154:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   27158:	2b00      	cmp	r3, #0
   2715a:	d1fb      	bne.n	27154 <InitAes.part.0+0x24>
   2715c:	4a2c      	ldr	r2, [pc, #176]	; (27210 <InitAes.part.0+0xe0>)
   2715e:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   27162:	2b00      	cmp	r3, #0
   27164:	d1fb      	bne.n	2715e <InitAes.part.0+0x2e>
   27166:	4d2a      	ldr	r5, [pc, #168]	; (27210 <InitAes.part.0+0xe0>)
   27168:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   2716c:	2b00      	cmp	r3, #0
   2716e:	d1fb      	bne.n	27168 <InitAes.part.0+0x38>
   27170:	f04f 30ff 	mov.w	r0, #4294967295
   27174:	f7fe fe90 	bl	25e98 <CC_HalClearInterruptBit>
   27178:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2717a:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   2717e:	f023 0304 	bic.w	r3, r3, #4
   27182:	2b03      	cmp	r3, #3
   27184:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27186:	d039      	beq.n	271fc <InitAes.part.0+0xcc>
   27188:	2b01      	cmp	r3, #1
   2718a:	bf0c      	ite	eq
   2718c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   27190:	f020 0020 	bicne.w	r0, r0, #32
   27194:	f7fe fe8e 	bl	25eb4 <CC_HalMaskInterrupt>
   27198:	4a1d      	ldr	r2, [pc, #116]	; (27210 <InitAes.part.0+0xe0>)
   2719a:	2301      	movs	r3, #1
   2719c:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   271a0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   271a4:	2b00      	cmp	r3, #0
   271a6:	d1fb      	bne.n	271a0 <InitAes.part.0+0x70>
   271a8:	4a19      	ldr	r2, [pc, #100]	; (27210 <InitAes.part.0+0xe0>)
   271aa:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   271ae:	2b00      	cmp	r3, #0
   271b0:	d1fb      	bne.n	271aa <InitAes.part.0+0x7a>
   271b2:	4917      	ldr	r1, [pc, #92]	; (27210 <InitAes.part.0+0xe0>)
   271b4:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   271b8:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   271bc:	2b00      	cmp	r3, #0
   271be:	d1fb      	bne.n	271b8 <InitAes.part.0+0x88>
   271c0:	4a13      	ldr	r2, [pc, #76]	; (27210 <InitAes.part.0+0xe0>)
   271c2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   271c6:	2b00      	cmp	r3, #0
   271c8:	d1fb      	bne.n	271c2 <InitAes.part.0+0x92>
   271ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
   271cc:	f022 0104 	bic.w	r1, r2, #4
   271d0:	2903      	cmp	r1, #3
   271d2:	bf18      	it	ne
   271d4:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   271d6:	490e      	ldr	r1, [pc, #56]	; (27210 <InitAes.part.0+0xe0>)
   271d8:	ea4f 0282 	mov.w	r2, r2, lsl #2
   271dc:	bf18      	it	ne
   271de:	f003 0301 	andne.w	r3, r3, #1
   271e2:	f002 021c 	and.w	r2, r2, #28
   271e6:	4313      	orrs	r3, r2
   271e8:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   271ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   271ee:	2b07      	cmp	r3, #7
   271f0:	bf04      	itt	eq
   271f2:	2301      	moveq	r3, #1
   271f4:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   271f8:	2000      	movs	r0, #0
   271fa:	bd38      	pop	{r3, r4, r5, pc}
   271fc:	2b01      	cmp	r3, #1
   271fe:	bf0c      	ite	eq
   27200:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   27204:	f020 0010 	bicne.w	r0, r0, #16
   27208:	f7fe fe54 	bl	25eb4 <CC_HalMaskInterrupt>
   2720c:	e7c4      	b.n	27198 <InitAes.part.0+0x68>
   2720e:	bf00      	nop
   27210:	5002b000 	.word	0x5002b000

00027214 <write_invalid_key>:
   27214:	4a09      	ldr	r2, [pc, #36]	; (2723c <write_invalid_key+0x28>)
   27216:	4b0a      	ldr	r3, [pc, #40]	; (27240 <write_invalid_key+0x2c>)
   27218:	6811      	ldr	r1, [r2, #0]
   2721a:	6809      	ldr	r1, [r1, #0]
   2721c:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   27220:	6811      	ldr	r1, [r2, #0]
   27222:	6849      	ldr	r1, [r1, #4]
   27224:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   27228:	6811      	ldr	r1, [r2, #0]
   2722a:	6889      	ldr	r1, [r1, #8]
   2722c:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   27230:	6812      	ldr	r2, [r2, #0]
   27232:	68d2      	ldr	r2, [r2, #12]
   27234:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27238:	4770      	bx	lr
   2723a:	bf00      	nop
   2723c:	20000a98 	.word	0x20000a98
   27240:	5002b000 	.word	0x5002b000

00027244 <ProcessAesDrv>:
   27244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27248:	b085      	sub	sp, #20
   2724a:	2900      	cmp	r1, #0
   2724c:	f000 80a3 	beq.w	27396 <ProcessAesDrv+0x152>
   27250:	4690      	mov	r8, r2
   27252:	2a00      	cmp	r2, #0
   27254:	f000 809f 	beq.w	27396 <ProcessAesDrv+0x152>
   27258:	4605      	mov	r5, r0
   2725a:	2800      	cmp	r0, #0
   2725c:	f000 813c 	beq.w	274d8 <ProcessAesDrv+0x294>
   27260:	4699      	mov	r9, r3
   27262:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27264:	460e      	mov	r6, r1
   27266:	2b00      	cmp	r3, #0
   27268:	d151      	bne.n	2730e <ProcessAesDrv+0xca>
   2726a:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   2726e:	d253      	bcs.n	27318 <ProcessAesDrv+0xd4>
   27270:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   27274:	2b04      	cmp	r3, #4
   27276:	f000 8112 	beq.w	2749e <ProcessAesDrv+0x25a>
   2727a:	2700      	movs	r7, #0
   2727c:	48a6      	ldr	r0, [pc, #664]	; (27518 <ProcessAesDrv+0x2d4>)
   2727e:	f04f 31ff 	mov.w	r1, #4294967295
   27282:	f7fe feb3 	bl	25fec <CC_PalMutexLock>
   27286:	2800      	cmp	r0, #0
   27288:	f040 80e8 	bne.w	2745c <ProcessAesDrv+0x218>
   2728c:	2000      	movs	r0, #0
   2728e:	f7fe fedd 	bl	2604c <CC_PalPowerSaveModeSelect>
   27292:	2800      	cmp	r0, #0
   27294:	f040 80eb 	bne.w	2746e <ProcessAesDrv+0x22a>
   27298:	48a0      	ldr	r0, [pc, #640]	; (2751c <ProcessAesDrv+0x2d8>)
   2729a:	2301      	movs	r3, #1
   2729c:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   272a0:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   272a4:	2c00      	cmp	r4, #0
   272a6:	d1fb      	bne.n	272a0 <ProcessAesDrv+0x5c>
   272a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   272aa:	2b03      	cmp	r3, #3
   272ac:	dc39      	bgt.n	27322 <ProcessAesDrv+0xde>
   272ae:	2b00      	cmp	r3, #0
   272b0:	da3a      	bge.n	27328 <ProcessAesDrv+0xe4>
   272b2:	4c9b      	ldr	r4, [pc, #620]	; (27520 <ProcessAesDrv+0x2dc>)
   272b4:	4a99      	ldr	r2, [pc, #612]	; (2751c <ProcessAesDrv+0x2d8>)
   272b6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   272ba:	2b00      	cmp	r3, #0
   272bc:	d1fb      	bne.n	272b6 <ProcessAesDrv+0x72>
   272be:	2f00      	cmp	r7, #0
   272c0:	f040 80e4 	bne.w	2748c <ProcessAesDrv+0x248>
   272c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   272c6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   272c8:	f023 0304 	bic.w	r3, r3, #4
   272cc:	2b03      	cmp	r3, #3
   272ce:	4b93      	ldr	r3, [pc, #588]	; (2751c <ProcessAesDrv+0x2d8>)
   272d0:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   272d4:	d056      	beq.n	27384 <ProcessAesDrv+0x140>
   272d6:	2a01      	cmp	r2, #1
   272d8:	bf0c      	ite	eq
   272da:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   272de:	f040 0020 	orrne.w	r0, r0, #32
   272e2:	f7fe fde7 	bl	25eb4 <CC_HalMaskInterrupt>
   272e6:	4b8d      	ldr	r3, [pc, #564]	; (2751c <ProcessAesDrv+0x2d8>)
   272e8:	2200      	movs	r2, #0
   272ea:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   272ee:	2001      	movs	r0, #1
   272f0:	f7fe feac 	bl	2604c <CC_PalPowerSaveModeSelect>
   272f4:	2800      	cmp	r0, #0
   272f6:	f040 80c5 	bne.w	27484 <ProcessAesDrv+0x240>
   272fa:	4887      	ldr	r0, [pc, #540]	; (27518 <ProcessAesDrv+0x2d4>)
   272fc:	f7fe fe7e 	bl	25ffc <CC_PalMutexUnlock>
   27300:	2800      	cmp	r0, #0
   27302:	f040 80b8 	bne.w	27476 <ProcessAesDrv+0x232>
   27306:	4620      	mov	r0, r4
   27308:	b005      	add	sp, #20
   2730a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2730e:	2b01      	cmp	r3, #1
   27310:	d1ae      	bne.n	27270 <ProcessAesDrv+0x2c>
   27312:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   27316:	d3ab      	bcc.n	27270 <ProcessAesDrv+0x2c>
   27318:	4c82      	ldr	r4, [pc, #520]	; (27524 <ProcessAesDrv+0x2e0>)
   2731a:	4620      	mov	r0, r4
   2731c:	b005      	add	sp, #20
   2731e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27322:	3b06      	subs	r3, #6
   27324:	2b01      	cmp	r3, #1
   27326:	d8c4      	bhi.n	272b2 <ProcessAesDrv+0x6e>
   27328:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2732a:	2b01      	cmp	r3, #1
   2732c:	f200 80d2 	bhi.w	274d4 <ProcessAesDrv+0x290>
   27330:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27332:	2b01      	cmp	r3, #1
   27334:	d834      	bhi.n	273a0 <ProcessAesDrv+0x15c>
   27336:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27338:	2b01      	cmp	r3, #1
   2733a:	f200 8122 	bhi.w	27582 <ProcessAesDrv+0x33e>
   2733e:	4628      	mov	r0, r5
   27340:	f7ff fef6 	bl	27130 <InitAes.part.0>
   27344:	4604      	mov	r4, r0
   27346:	2800      	cmp	r0, #0
   27348:	d1b4      	bne.n	272b4 <ProcessAesDrv+0x70>
   2734a:	4628      	mov	r0, r5
   2734c:	f7ff fe9e 	bl	2708c <LoadAesKey>
   27350:	4604      	mov	r4, r0
   27352:	2800      	cmp	r0, #0
   27354:	d1ae      	bne.n	272b4 <ProcessAesDrv+0x70>
   27356:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27358:	2b07      	cmp	r3, #7
   2735a:	d8aa      	bhi.n	272b2 <ProcessAesDrv+0x6e>
   2735c:	a201      	add	r2, pc, #4	; (adr r2, 27364 <ProcessAesDrv+0x120>)
   2735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27362:	bf00      	nop
   27364:	000273c1 	.word	0x000273c1
   27368:	000273a5 	.word	0x000273a5
   2736c:	00027549 	.word	0x00027549
   27370:	000273a5 	.word	0x000273a5
   27374:	000272b3 	.word	0x000272b3
   27378:	000272b3 	.word	0x000272b3
   2737c:	00027549 	.word	0x00027549
   27380:	000273a5 	.word	0x000273a5
   27384:	2a01      	cmp	r2, #1
   27386:	bf0c      	ite	eq
   27388:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   2738c:	f040 0010 	orrne.w	r0, r0, #16
   27390:	f7fe fd90 	bl	25eb4 <CC_HalMaskInterrupt>
   27394:	e7a7      	b.n	272e6 <ProcessAesDrv+0xa2>
   27396:	4c64      	ldr	r4, [pc, #400]	; (27528 <ProcessAesDrv+0x2e4>)
   27398:	4620      	mov	r0, r4
   2739a:	b005      	add	sp, #20
   2739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273a0:	4c62      	ldr	r4, [pc, #392]	; (2752c <ProcessAesDrv+0x2e8>)
   273a2:	e787      	b.n	272b4 <ProcessAesDrv+0x70>
   273a4:	4b5d      	ldr	r3, [pc, #372]	; (2751c <ProcessAesDrv+0x2d8>)
   273a6:	682a      	ldr	r2, [r5, #0]
   273a8:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   273ac:	686a      	ldr	r2, [r5, #4]
   273ae:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   273b2:	68aa      	ldr	r2, [r5, #8]
   273b4:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   273b8:	68ea      	ldr	r2, [r5, #12]
   273ba:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   273be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   273c0:	6832      	ldr	r2, [r6, #0]
   273c2:	f023 0304 	bic.w	r3, r3, #4
   273c6:	2b03      	cmp	r3, #3
   273c8:	d00d      	beq.n	273e6 <ProcessAesDrv+0x1a2>
   273ca:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   273cc:	f8d8 1000 	ldr.w	r1, [r8]
   273d0:	2b01      	cmp	r3, #1
   273d2:	4b52      	ldr	r3, [pc, #328]	; (2751c <ProcessAesDrv+0x2d8>)
   273d4:	bf0b      	itete	eq
   273d6:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   273da:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   273de:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   273e2:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   273e6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   273e8:	2b01      	cmp	r3, #1
   273ea:	4b4c      	ldr	r3, [pc, #304]	; (2751c <ProcessAesDrv+0x2d8>)
   273ec:	bf0b      	itete	eq
   273ee:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   273f2:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   273f6:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   273fa:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   273fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27400:	f023 0304 	bic.w	r3, r3, #4
   27404:	2b03      	cmp	r3, #3
   27406:	d06a      	beq.n	274de <ProcessAesDrv+0x29a>
   27408:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2740a:	2b01      	cmp	r3, #1
   2740c:	bf0c      	ite	eq
   2740e:	2080      	moveq	r0, #128	; 0x80
   27410:	2020      	movne	r0, #32
   27412:	f7fe fd55 	bl	25ec0 <CC_HalWaitInterrupt>
   27416:	4604      	mov	r4, r0
   27418:	2800      	cmp	r0, #0
   2741a:	f47f af4b 	bne.w	272b4 <ProcessAesDrv+0x70>
   2741e:	4b3f      	ldr	r3, [pc, #252]	; (2751c <ProcessAesDrv+0x2d8>)
   27420:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   27424:	2c00      	cmp	r4, #0
   27426:	d1fb      	bne.n	27420 <ProcessAesDrv+0x1dc>
   27428:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2742a:	3b01      	subs	r3, #1
   2742c:	2b06      	cmp	r3, #6
   2742e:	d812      	bhi.n	27456 <ProcessAesDrv+0x212>
   27430:	e8df f003 	tbb	[pc, r3]
   27434:	11049904 	.word	0x11049904
   27438:	9911      	.short	0x9911
   2743a:	04          	.byte	0x04
   2743b:	00          	.byte	0x00
   2743c:	4b37      	ldr	r3, [pc, #220]	; (2751c <ProcessAesDrv+0x2d8>)
   2743e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   27442:	602a      	str	r2, [r5, #0]
   27444:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   27448:	606a      	str	r2, [r5, #4]
   2744a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   2744e:	60aa      	str	r2, [r5, #8]
   27450:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   27454:	60eb      	str	r3, [r5, #12]
   27456:	2301      	movs	r3, #1
   27458:	65ab      	str	r3, [r5, #88]	; 0x58
   2745a:	e72b      	b.n	272b4 <ProcessAesDrv+0x70>
   2745c:	4834      	ldr	r0, [pc, #208]	; (27530 <ProcessAesDrv+0x2ec>)
   2745e:	f7fd fe3b 	bl	250d8 <CC_PalAbort>
   27462:	2000      	movs	r0, #0
   27464:	f7fe fdf2 	bl	2604c <CC_PalPowerSaveModeSelect>
   27468:	2800      	cmp	r0, #0
   2746a:	f43f af15 	beq.w	27298 <ProcessAesDrv+0x54>
   2746e:	4831      	ldr	r0, [pc, #196]	; (27534 <ProcessAesDrv+0x2f0>)
   27470:	f7fd fe32 	bl	250d8 <CC_PalAbort>
   27474:	e710      	b.n	27298 <ProcessAesDrv+0x54>
   27476:	4830      	ldr	r0, [pc, #192]	; (27538 <ProcessAesDrv+0x2f4>)
   27478:	f7fd fe2e 	bl	250d8 <CC_PalAbort>
   2747c:	4620      	mov	r0, r4
   2747e:	b005      	add	sp, #20
   27480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27484:	482d      	ldr	r0, [pc, #180]	; (2753c <ProcessAesDrv+0x2f8>)
   27486:	f7fd fe27 	bl	250d8 <CC_PalAbort>
   2748a:	e736      	b.n	272fa <ProcessAesDrv+0xb6>
   2748c:	2304      	movs	r3, #4
   2748e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   27492:	2120      	movs	r1, #32
   27494:	f105 0010 	add.w	r0, r5, #16
   27498:	f7fe fd90 	bl	25fbc <CC_PalMemSetZeroPlat>
   2749c:	e712      	b.n	272c4 <ProcessAesDrv+0x80>
   2749e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   274a0:	6c28      	ldr	r0, [r5, #64]	; 0x40
   274a2:	f000 f9b5 	bl	27810 <kmu_validate_slot_and_size>
   274a6:	b998      	cbnz	r0, 274d0 <ProcessAesDrv+0x28c>
   274a8:	4f25      	ldr	r7, [pc, #148]	; (27540 <ProcessAesDrv+0x2fc>)
   274aa:	4c1c      	ldr	r4, [pc, #112]	; (2751c <ProcessAesDrv+0x2d8>)
   274ac:	683b      	ldr	r3, [r7, #0]
   274ae:	681b      	ldr	r3, [r3, #0]
   274b0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   274b4:	683b      	ldr	r3, [r7, #0]
   274b6:	685b      	ldr	r3, [r3, #4]
   274b8:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   274bc:	683b      	ldr	r3, [r7, #0]
   274be:	689b      	ldr	r3, [r3, #8]
   274c0:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   274c4:	683b      	ldr	r3, [r7, #0]
   274c6:	68db      	ldr	r3, [r3, #12]
   274c8:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   274cc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   274ce:	b161      	cbz	r1, 274ea <ProcessAesDrv+0x2a6>
   274d0:	2701      	movs	r7, #1
   274d2:	e6d3      	b.n	2727c <ProcessAesDrv+0x38>
   274d4:	4c1b      	ldr	r4, [pc, #108]	; (27544 <ProcessAesDrv+0x300>)
   274d6:	e6ed      	b.n	272b4 <ProcessAesDrv+0x70>
   274d8:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   274dc:	e713      	b.n	27306 <ProcessAesDrv+0xc2>
   274de:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   274e0:	2b01      	cmp	r3, #1
   274e2:	bf0c      	ite	eq
   274e4:	2040      	moveq	r0, #64	; 0x40
   274e6:	2010      	movne	r0, #16
   274e8:	e793      	b.n	27412 <ProcessAesDrv+0x1ce>
   274ea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   274ec:	9301      	str	r3, [sp, #4]
   274ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   274f0:	9300      	str	r3, [sp, #0]
   274f2:	f105 0a10 	add.w	sl, r5, #16
   274f6:	f04f 0b10 	mov.w	fp, #16
   274fa:	f8cd a008 	str.w	sl, [sp, #8]
   274fe:	f8cd b00c 	str.w	fp, [sp, #12]
   27502:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   27506:	6c28      	ldr	r0, [r5, #64]	; 0x40
   27508:	f000 f9a4 	bl	27854 <kmu_derive_cmac>
   2750c:	2800      	cmp	r0, #0
   2750e:	d13a      	bne.n	27586 <ProcessAesDrv+0x342>
   27510:	2300      	movs	r3, #0
   27512:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   27516:	e7db      	b.n	274d0 <ProcessAesDrv+0x28c>
   27518:	20000aa8 	.word	0x20000aa8
   2751c:	5002b000 	.word	0x5002b000
   27520:	00f10001 	.word	0x00f10001
   27524:	00f10005 	.word	0x00f10005
   27528:	00f1000b 	.word	0x00f1000b
   2752c:	00f10003 	.word	0x00f10003
   27530:	000319b0 	.word	0x000319b0
   27534:	000319c8 	.word	0x000319c8
   27538:	00031a08 	.word	0x00031a08
   2753c:	000319e8 	.word	0x000319e8
   27540:	20000a98 	.word	0x20000a98
   27544:	00f10002 	.word	0x00f10002
   27548:	4b19      	ldr	r3, [pc, #100]	; (275b0 <ProcessAesDrv+0x36c>)
   2754a:	682a      	ldr	r2, [r5, #0]
   2754c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   27550:	686a      	ldr	r2, [r5, #4]
   27552:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   27556:	68aa      	ldr	r2, [r5, #8]
   27558:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2755c:	68ea      	ldr	r2, [r5, #12]
   2755e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   27562:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27564:	e72c      	b.n	273c0 <ProcessAesDrv+0x17c>
   27566:	4b12      	ldr	r3, [pc, #72]	; (275b0 <ProcessAesDrv+0x36c>)
   27568:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   2756c:	602a      	str	r2, [r5, #0]
   2756e:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   27572:	606a      	str	r2, [r5, #4]
   27574:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   27578:	60aa      	str	r2, [r5, #8]
   2757a:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   2757e:	60eb      	str	r3, [r5, #12]
   27580:	e769      	b.n	27456 <ProcessAesDrv+0x212>
   27582:	4c0c      	ldr	r4, [pc, #48]	; (275b4 <ProcessAesDrv+0x370>)
   27584:	e696      	b.n	272b4 <ProcessAesDrv+0x70>
   27586:	683b      	ldr	r3, [r7, #0]
   27588:	681b      	ldr	r3, [r3, #0]
   2758a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   2758e:	683b      	ldr	r3, [r7, #0]
   27590:	685b      	ldr	r3, [r3, #4]
   27592:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   27596:	683b      	ldr	r3, [r7, #0]
   27598:	689b      	ldr	r3, [r3, #8]
   2759a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   2759e:	683b      	ldr	r3, [r7, #0]
   275a0:	68db      	ldr	r3, [r3, #12]
   275a2:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   275a6:	4659      	mov	r1, fp
   275a8:	4650      	mov	r0, sl
   275aa:	f7fe fd07 	bl	25fbc <CC_PalMemSetZeroPlat>
   275ae:	e7af      	b.n	27510 <ProcessAesDrv+0x2cc>
   275b0:	5002b000 	.word	0x5002b000
   275b4:	00f10004 	.word	0x00f10004

000275b8 <FinishAesDrv>:
   275b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275bc:	b301      	cbz	r1, 27600 <FinishAesDrv+0x48>
   275be:	b1fa      	cbz	r2, 27600 <FinishAesDrv+0x48>
   275c0:	4604      	mov	r4, r0
   275c2:	2800      	cmp	r0, #0
   275c4:	d07c      	beq.n	276c0 <FinishAesDrv+0x108>
   275c6:	461d      	mov	r5, r3
   275c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   275ca:	2b07      	cmp	r3, #7
   275cc:	460e      	mov	r6, r1
   275ce:	d01b      	beq.n	27608 <FinishAesDrv+0x50>
   275d0:	b95d      	cbnz	r5, 275ea <FinishAesDrv+0x32>
   275d2:	2b03      	cmp	r3, #3
   275d4:	d110      	bne.n	275f8 <FinishAesDrv+0x40>
   275d6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   275d8:	b973      	cbnz	r3, 275f8 <FinishAesDrv+0x40>
   275da:	f100 0364 	add.w	r3, r0, #100	; 0x64
   275de:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   275e2:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   275e6:	600b      	str	r3, [r1, #0]
   275e8:	2510      	movs	r5, #16
   275ea:	462b      	mov	r3, r5
   275ec:	4631      	mov	r1, r6
   275ee:	4620      	mov	r0, r4
   275f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   275f4:	f7ff be26 	b.w	27244 <ProcessAesDrv>
   275f8:	462f      	mov	r7, r5
   275fa:	4638      	mov	r0, r7
   275fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27600:	4f77      	ldr	r7, [pc, #476]	; (277e0 <FinishAesDrv+0x228>)
   27602:	4638      	mov	r0, r7
   27604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27608:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2760a:	2b00      	cmp	r3, #0
   2760c:	d15b      	bne.n	276c6 <FinishAesDrv+0x10e>
   2760e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   27612:	d25d      	bcs.n	276d0 <FinishAesDrv+0x118>
   27614:	b915      	cbnz	r5, 2761c <FinishAesDrv+0x64>
   27616:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27618:	2b00      	cmp	r3, #0
   2761a:	d159      	bne.n	276d0 <FinishAesDrv+0x118>
   2761c:	4871      	ldr	r0, [pc, #452]	; (277e4 <FinishAesDrv+0x22c>)
   2761e:	f04f 31ff 	mov.w	r1, #4294967295
   27622:	f7fe fce3 	bl	25fec <CC_PalMutexLock>
   27626:	2800      	cmp	r0, #0
   27628:	f040 80b8 	bne.w	2779c <FinishAesDrv+0x1e4>
   2762c:	2000      	movs	r0, #0
   2762e:	f7fe fd0d 	bl	2604c <CC_PalPowerSaveModeSelect>
   27632:	2800      	cmp	r0, #0
   27634:	f040 80ae 	bne.w	27794 <FinishAesDrv+0x1dc>
   27638:	4a6b      	ldr	r2, [pc, #428]	; (277e8 <FinishAesDrv+0x230>)
   2763a:	2301      	movs	r3, #1
   2763c:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   27640:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27644:	2b00      	cmp	r3, #0
   27646:	d1fb      	bne.n	27640 <FinishAesDrv+0x88>
   27648:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2764a:	2b03      	cmp	r3, #3
   2764c:	dd20      	ble.n	27690 <FinishAesDrv+0xd8>
   2764e:	3b06      	subs	r3, #6
   27650:	2b01      	cmp	r3, #1
   27652:	d81f      	bhi.n	27694 <FinishAesDrv+0xdc>
   27654:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27656:	2b01      	cmp	r3, #1
   27658:	d83c      	bhi.n	276d4 <FinishAesDrv+0x11c>
   2765a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2765c:	2b01      	cmp	r3, #1
   2765e:	f200 80a5 	bhi.w	277ac <FinishAesDrv+0x1f4>
   27662:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27664:	2b01      	cmp	r3, #1
   27666:	f200 80a3 	bhi.w	277b0 <FinishAesDrv+0x1f8>
   2766a:	4620      	mov	r0, r4
   2766c:	f7ff fd60 	bl	27130 <InitAes.part.0>
   27670:	4607      	mov	r7, r0
   27672:	b980      	cbnz	r0, 27696 <FinishAesDrv+0xde>
   27674:	4620      	mov	r0, r4
   27676:	f7ff fd09 	bl	2708c <LoadAesKey>
   2767a:	4607      	mov	r7, r0
   2767c:	b958      	cbnz	r0, 27696 <FinishAesDrv+0xde>
   2767e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27680:	2b07      	cmp	r3, #7
   27682:	d807      	bhi.n	27694 <FinishAesDrv+0xdc>
   27684:	e8df f003 	tbb	[pc, r3]
   27688:	285c2835 	.word	0x285c2835
   2768c:	285c0606 	.word	0x285c0606
   27690:	2b00      	cmp	r3, #0
   27692:	dadf      	bge.n	27654 <FinishAesDrv+0x9c>
   27694:	4f55      	ldr	r7, [pc, #340]	; (277ec <FinishAesDrv+0x234>)
   27696:	4a54      	ldr	r2, [pc, #336]	; (277e8 <FinishAesDrv+0x230>)
   27698:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2769c:	2b00      	cmp	r3, #0
   2769e:	d1fb      	bne.n	27698 <FinishAesDrv+0xe0>
   276a0:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   276a4:	2001      	movs	r0, #1
   276a6:	f7fe fcd1 	bl	2604c <CC_PalPowerSaveModeSelect>
   276aa:	2800      	cmp	r0, #0
   276ac:	d17a      	bne.n	277a4 <FinishAesDrv+0x1ec>
   276ae:	484d      	ldr	r0, [pc, #308]	; (277e4 <FinishAesDrv+0x22c>)
   276b0:	f7fe fca4 	bl	25ffc <CC_PalMutexUnlock>
   276b4:	2800      	cmp	r0, #0
   276b6:	d0a0      	beq.n	275fa <FinishAesDrv+0x42>
   276b8:	484d      	ldr	r0, [pc, #308]	; (277f0 <FinishAesDrv+0x238>)
   276ba:	f7fd fd0d 	bl	250d8 <CC_PalAbort>
   276be:	e79c      	b.n	275fa <FinishAesDrv+0x42>
   276c0:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   276c4:	e799      	b.n	275fa <FinishAesDrv+0x42>
   276c6:	2b01      	cmp	r3, #1
   276c8:	d1a4      	bne.n	27614 <FinishAesDrv+0x5c>
   276ca:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   276ce:	d3a1      	bcc.n	27614 <FinishAesDrv+0x5c>
   276d0:	4f48      	ldr	r7, [pc, #288]	; (277f4 <FinishAesDrv+0x23c>)
   276d2:	e792      	b.n	275fa <FinishAesDrv+0x42>
   276d4:	4f48      	ldr	r7, [pc, #288]	; (277f8 <FinishAesDrv+0x240>)
   276d6:	e7de      	b.n	27696 <FinishAesDrv+0xde>
   276d8:	4b43      	ldr	r3, [pc, #268]	; (277e8 <FinishAesDrv+0x230>)
   276da:	6822      	ldr	r2, [r4, #0]
   276dc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   276e0:	6862      	ldr	r2, [r4, #4]
   276e2:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   276e6:	68a2      	ldr	r2, [r4, #8]
   276e8:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   276ec:	68e2      	ldr	r2, [r4, #12]
   276ee:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   276f2:	4b3d      	ldr	r3, [pc, #244]	; (277e8 <FinishAesDrv+0x230>)
   276f4:	2201      	movs	r2, #1
   276f6:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   276fa:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   276fe:	2d00      	cmp	r5, #0
   27700:	d158      	bne.n	277b4 <FinishAesDrv+0x1fc>
   27702:	6da1      	ldr	r1, [r4, #88]	; 0x58
   27704:	b909      	cbnz	r1, 2770a <FinishAesDrv+0x152>
   27706:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   2770a:	4b37      	ldr	r3, [pc, #220]	; (277e8 <FinishAesDrv+0x230>)
   2770c:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   27710:	2f00      	cmp	r7, #0
   27712:	d1fb      	bne.n	2770c <FinishAesDrv+0x154>
   27714:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27716:	3b01      	subs	r3, #1
   27718:	2b06      	cmp	r3, #6
   2771a:	d8bc      	bhi.n	27696 <FinishAesDrv+0xde>
   2771c:	a201      	add	r2, pc, #4	; (adr r2, 27724 <FinishAesDrv+0x16c>)
   2771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27722:	bf00      	nop
   27724:	0002775d 	.word	0x0002775d
   27728:	00027779 	.word	0x00027779
   2772c:	0002775d 	.word	0x0002775d
   27730:	00027697 	.word	0x00027697
   27734:	00027697 	.word	0x00027697
   27738:	00027779 	.word	0x00027779
   2773c:	0002775d 	.word	0x0002775d
   27740:	4b29      	ldr	r3, [pc, #164]	; (277e8 <FinishAesDrv+0x230>)
   27742:	6822      	ldr	r2, [r4, #0]
   27744:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   27748:	6862      	ldr	r2, [r4, #4]
   2774a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2774e:	68a2      	ldr	r2, [r4, #8]
   27750:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   27754:	68e2      	ldr	r2, [r4, #12]
   27756:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2775a:	e7ca      	b.n	276f2 <FinishAesDrv+0x13a>
   2775c:	4b22      	ldr	r3, [pc, #136]	; (277e8 <FinishAesDrv+0x230>)
   2775e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   27762:	6022      	str	r2, [r4, #0]
   27764:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   27768:	6062      	str	r2, [r4, #4]
   2776a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   2776e:	60a2      	str	r2, [r4, #8]
   27770:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   27774:	60e3      	str	r3, [r4, #12]
   27776:	e78e      	b.n	27696 <FinishAesDrv+0xde>
   27778:	4b1b      	ldr	r3, [pc, #108]	; (277e8 <FinishAesDrv+0x230>)
   2777a:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   2777e:	6022      	str	r2, [r4, #0]
   27780:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   27784:	6062      	str	r2, [r4, #4]
   27786:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   2778a:	60a2      	str	r2, [r4, #8]
   2778c:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   27790:	60e3      	str	r3, [r4, #12]
   27792:	e780      	b.n	27696 <FinishAesDrv+0xde>
   27794:	4819      	ldr	r0, [pc, #100]	; (277fc <FinishAesDrv+0x244>)
   27796:	f7fd fc9f 	bl	250d8 <CC_PalAbort>
   2779a:	e74d      	b.n	27638 <FinishAesDrv+0x80>
   2779c:	4818      	ldr	r0, [pc, #96]	; (27800 <FinishAesDrv+0x248>)
   2779e:	f7fd fc9b 	bl	250d8 <CC_PalAbort>
   277a2:	e743      	b.n	2762c <FinishAesDrv+0x74>
   277a4:	4817      	ldr	r0, [pc, #92]	; (27804 <FinishAesDrv+0x24c>)
   277a6:	f7fd fc97 	bl	250d8 <CC_PalAbort>
   277aa:	e780      	b.n	276ae <FinishAesDrv+0xf6>
   277ac:	4f16      	ldr	r7, [pc, #88]	; (27808 <FinishAesDrv+0x250>)
   277ae:	e772      	b.n	27696 <FinishAesDrv+0xde>
   277b0:	4f16      	ldr	r7, [pc, #88]	; (2780c <FinishAesDrv+0x254>)
   277b2:	e770      	b.n	27696 <FinishAesDrv+0xde>
   277b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   277b6:	6832      	ldr	r2, [r6, #0]
   277b8:	2901      	cmp	r1, #1
   277ba:	d00a      	beq.n	277d2 <FinishAesDrv+0x21a>
   277bc:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   277c0:	2010      	movs	r0, #16
   277c2:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   277c6:	f7fe fb7b 	bl	25ec0 <CC_HalWaitInterrupt>
   277ca:	4607      	mov	r7, r0
   277cc:	2800      	cmp	r0, #0
   277ce:	d09c      	beq.n	2770a <FinishAesDrv+0x152>
   277d0:	e761      	b.n	27696 <FinishAesDrv+0xde>
   277d2:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   277d6:	2040      	movs	r0, #64	; 0x40
   277d8:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   277dc:	e7f3      	b.n	277c6 <FinishAesDrv+0x20e>
   277de:	bf00      	nop
   277e0:	00f1000b 	.word	0x00f1000b
   277e4:	20000aa8 	.word	0x20000aa8
   277e8:	5002b000 	.word	0x5002b000
   277ec:	00f10001 	.word	0x00f10001
   277f0:	00031a08 	.word	0x00031a08
   277f4:	00f10005 	.word	0x00f10005
   277f8:	00f10002 	.word	0x00f10002
   277fc:	000319c8 	.word	0x000319c8
   27800:	000319b0 	.word	0x000319b0
   27804:	000319e8 	.word	0x000319e8
   27808:	00f10003 	.word	0x00f10003
   2780c:	00f10004 	.word	0x00f10004

00027810 <kmu_validate_slot_and_size>:
   27810:	b921      	cbnz	r1, 2781c <kmu_validate_slot_and_size+0xc>
   27812:	4b03      	ldr	r3, [pc, #12]	; (27820 <kmu_validate_slot_and_size+0x10>)
   27814:	2800      	cmp	r0, #0
   27816:	bf18      	it	ne
   27818:	4618      	movne	r0, r3
   2781a:	4770      	bx	lr
   2781c:	4801      	ldr	r0, [pc, #4]	; (27824 <kmu_validate_slot_and_size+0x14>)
   2781e:	4770      	bx	lr
   27820:	00f70001 	.word	0x00f70001
   27824:	00f70003 	.word	0x00f70003

00027828 <kmu_validate_kdr_slot_and_size>:
   27828:	b921      	cbnz	r1, 27834 <kmu_validate_kdr_slot_and_size+0xc>
   2782a:	4b03      	ldr	r3, [pc, #12]	; (27838 <kmu_validate_kdr_slot_and_size+0x10>)
   2782c:	2800      	cmp	r0, #0
   2782e:	bf18      	it	ne
   27830:	4618      	movne	r0, r3
   27832:	4770      	bx	lr
   27834:	4801      	ldr	r0, [pc, #4]	; (2783c <kmu_validate_kdr_slot_and_size+0x14>)
   27836:	4770      	bx	lr
   27838:	00f70001 	.word	0x00f70001
   2783c:	00f70003 	.word	0x00f70003

00027840 <kmu_use_kdr_key>:
   27840:	4b03      	ldr	r3, [pc, #12]	; (27850 <kmu_use_kdr_key+0x10>)
   27842:	2000      	movs	r0, #0
   27844:	2201      	movs	r2, #1
   27846:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   2784a:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   2784e:	4770      	bx	lr
   27850:	5002b000 	.word	0x5002b000

00027854 <kmu_derive_cmac>:
   27854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27858:	b0cc      	sub	sp, #304	; 0x130
   2785a:	2400      	movs	r4, #0
   2785c:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   2785e:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   27862:	4682      	mov	sl, r0
   27864:	4689      	mov	r9, r1
   27866:	4616      	mov	r6, r2
   27868:	4621      	mov	r1, r4
   2786a:	2274      	movs	r2, #116	; 0x74
   2786c:	a80e      	add	r0, sp, #56	; 0x38
   2786e:	461f      	mov	r7, r3
   27870:	f006 fd39 	bl	2e2e6 <memset>
   27874:	2280      	movs	r2, #128	; 0x80
   27876:	4621      	mov	r1, r4
   27878:	a82c      	add	r0, sp, #176	; 0xb0
   2787a:	942b      	str	r4, [sp, #172]	; 0xac
   2787c:	f006 fd33 	bl	2e2e6 <memset>
   27880:	2384      	movs	r3, #132	; 0x84
   27882:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   27886:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2788a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2788e:	9305      	str	r3, [sp, #20]
   27890:	d863      	bhi.n	2795a <kmu_derive_cmac+0x106>
   27892:	f7ff fcbf 	bl	27214 <write_invalid_key>
   27896:	ab05      	add	r3, sp, #20
   27898:	4630      	mov	r0, r6
   2789a:	ae2b      	add	r6, sp, #172	; 0xac
   2789c:	9301      	str	r3, [sp, #4]
   2789e:	9502      	str	r5, [sp, #8]
   278a0:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   278a4:	4639      	mov	r1, r7
   278a6:	9600      	str	r6, [sp, #0]
   278a8:	f000 f862 	bl	27970 <UtilCmacBuildDataForDerivation>
   278ac:	2800      	cmp	r0, #0
   278ae:	d14f      	bne.n	27950 <kmu_derive_cmac+0xfc>
   278b0:	2303      	movs	r3, #3
   278b2:	f88d 3013 	strb.w	r3, [sp, #19]
   278b6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   278ba:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   278be:	2307      	movs	r3, #7
   278c0:	2200      	movs	r2, #0
   278c2:	901c      	str	r0, [sp, #112]	; 0x70
   278c4:	2110      	movs	r1, #16
   278c6:	a80e      	add	r0, sp, #56	; 0x38
   278c8:	931b      	str	r3, [sp, #108]	; 0x6c
   278ca:	2401      	movs	r4, #1
   278cc:	2301      	movs	r3, #1
   278ce:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   278d2:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   278d6:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   278da:	9426      	str	r4, [sp, #152]	; 0x98
   278dc:	f10d 0920 	add.w	r9, sp, #32
   278e0:	f7fe fb6c 	bl	25fbc <CC_PalMemSetZeroPlat>
   278e4:	2210      	movs	r2, #16
   278e6:	9200      	str	r2, [sp, #0]
   278e8:	9905      	ldr	r1, [sp, #20]
   278ea:	f8cd 9004 	str.w	r9, [sp, #4]
   278ee:	ab0a      	add	r3, sp, #40	; 0x28
   278f0:	4630      	mov	r0, r6
   278f2:	aa06      	add	r2, sp, #24
   278f4:	f7ff fa1e 	bl	26d34 <SetDataBuffersInfo>
   278f8:	4607      	mov	r7, r0
   278fa:	b170      	cbz	r0, 2791a <kmu_derive_cmac+0xc6>
   278fc:	e01d      	b.n	2793a <kmu_derive_cmac+0xe6>
   278fe:	a90e      	add	r1, sp, #56	; 0x38
   27900:	eb08 0007 	add.w	r0, r8, r7
   27904:	f7fe fb56 	bl	25fb4 <CC_PalMemCopyPlat>
   27908:	2110      	movs	r1, #16
   2790a:	a80e      	add	r0, sp, #56	; 0x38
   2790c:	f7fe fb56 	bl	25fbc <CC_PalMemSetZeroPlat>
   27910:	3401      	adds	r4, #1
   27912:	1bad      	subs	r5, r5, r6
   27914:	4437      	add	r7, r6
   27916:	b2e4      	uxtb	r4, r4
   27918:	d024      	beq.n	27964 <kmu_derive_cmac+0x110>
   2791a:	2d10      	cmp	r5, #16
   2791c:	464a      	mov	r2, r9
   2791e:	9b05      	ldr	r3, [sp, #20]
   27920:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   27924:	a906      	add	r1, sp, #24
   27926:	a80e      	add	r0, sp, #56	; 0x38
   27928:	462e      	mov	r6, r5
   2792a:	bf28      	it	cs
   2792c:	2610      	movcs	r6, #16
   2792e:	f7ff fe43 	bl	275b8 <FinishAesDrv>
   27932:	4632      	mov	r2, r6
   27934:	2800      	cmp	r0, #0
   27936:	d0e2      	beq.n	278fe <kmu_derive_cmac+0xaa>
   27938:	4607      	mov	r7, r0
   2793a:	a80e      	add	r0, sp, #56	; 0x38
   2793c:	2274      	movs	r2, #116	; 0x74
   2793e:	2100      	movs	r1, #0
   27940:	f7fe fb3a 	bl	25fb8 <CC_PalMemSetPlat>
   27944:	f7ff fc66 	bl	27214 <write_invalid_key>
   27948:	4638      	mov	r0, r7
   2794a:	b04c      	add	sp, #304	; 0x130
   2794c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27950:	4f05      	ldr	r7, [pc, #20]	; (27968 <kmu_derive_cmac+0x114>)
   27952:	4638      	mov	r0, r7
   27954:	b04c      	add	sp, #304	; 0x130
   27956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2795a:	4f04      	ldr	r7, [pc, #16]	; (2796c <kmu_derive_cmac+0x118>)
   2795c:	4638      	mov	r0, r7
   2795e:	b04c      	add	sp, #304	; 0x130
   27960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27964:	462f      	mov	r7, r5
   27966:	e7e8      	b.n	2793a <kmu_derive_cmac+0xe6>
   27968:	00f1000e 	.word	0x00f1000e
   2796c:	00f1000f 	.word	0x00f1000f

00027970 <UtilCmacBuildDataForDerivation>:
   27970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27974:	b082      	sub	sp, #8
   27976:	2600      	movs	r6, #0
   27978:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2797a:	9601      	str	r6, [sp, #4]
   2797c:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   27980:	d841      	bhi.n	27a06 <UtilCmacBuildDataForDerivation+0x96>
   27982:	00e4      	lsls	r4, r4, #3
   27984:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   27988:	460d      	mov	r5, r1
   2798a:	f101 31ff 	add.w	r1, r1, #4294967295
   2798e:	4617      	mov	r7, r2
   27990:	bf34      	ite	cc
   27992:	2203      	movcc	r2, #3
   27994:	2204      	movcs	r2, #4
   27996:	293f      	cmp	r1, #63	; 0x3f
   27998:	9200      	str	r2, [sp, #0]
   2799a:	d834      	bhi.n	27a06 <UtilCmacBuildDataForDerivation+0x96>
   2799c:	2800      	cmp	r0, #0
   2799e:	d032      	beq.n	27a06 <UtilCmacBuildDataForDerivation+0x96>
   279a0:	4698      	mov	r8, r3
   279a2:	b113      	cbz	r3, 279aa <UtilCmacBuildDataForDerivation+0x3a>
   279a4:	b37f      	cbz	r7, 27a06 <UtilCmacBuildDataForDerivation+0x96>
   279a6:	2b40      	cmp	r3, #64	; 0x40
   279a8:	d82d      	bhi.n	27a06 <UtilCmacBuildDataForDerivation+0x96>
   279aa:	9b08      	ldr	r3, [sp, #32]
   279ac:	b35b      	cbz	r3, 27a06 <UtilCmacBuildDataForDerivation+0x96>
   279ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   279b0:	681e      	ldr	r6, [r3, #0]
   279b2:	b346      	cbz	r6, 27a06 <UtilCmacBuildDataForDerivation+0x96>
   279b4:	eb05 0108 	add.w	r1, r5, r8
   279b8:	440a      	add	r2, r1
   279ba:	4296      	cmp	r6, r2
   279bc:	d323      	bcc.n	27a06 <UtilCmacBuildDataForDerivation+0x96>
   279be:	9b08      	ldr	r3, [sp, #32]
   279c0:	462a      	mov	r2, r5
   279c2:	4601      	mov	r1, r0
   279c4:	1c58      	adds	r0, r3, #1
   279c6:	f7fe faf5 	bl	25fb4 <CC_PalMemCopyPlat>
   279ca:	9b08      	ldr	r3, [sp, #32]
   279cc:	1cae      	adds	r6, r5, #2
   279ce:	441d      	add	r5, r3
   279d0:	2200      	movs	r2, #0
   279d2:	706a      	strb	r2, [r5, #1]
   279d4:	f1b8 0f00 	cmp.w	r8, #0
   279d8:	d11f      	bne.n	27a1a <UtilCmacBuildDataForDerivation+0xaa>
   279da:	9b08      	ldr	r3, [sp, #32]
   279dc:	9400      	str	r4, [sp, #0]
   279de:	2cff      	cmp	r4, #255	; 0xff
   279e0:	eb03 0006 	add.w	r0, r3, r6
   279e4:	d913      	bls.n	27a0e <UtilCmacBuildDataForDerivation+0x9e>
   279e6:	0223      	lsls	r3, r4, #8
   279e8:	b29b      	uxth	r3, r3
   279ea:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   279ee:	2202      	movs	r2, #2
   279f0:	a901      	add	r1, sp, #4
   279f2:	9401      	str	r4, [sp, #4]
   279f4:	f7fe fade 	bl	25fb4 <CC_PalMemCopyPlat>
   279f8:	3602      	adds	r6, #2
   279fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   279fc:	2000      	movs	r0, #0
   279fe:	601e      	str	r6, [r3, #0]
   27a00:	b002      	add	sp, #8
   27a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27a06:	4808      	ldr	r0, [pc, #32]	; (27a28 <UtilCmacBuildDataForDerivation+0xb8>)
   27a08:	b002      	add	sp, #8
   27a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27a0e:	2201      	movs	r2, #1
   27a10:	4669      	mov	r1, sp
   27a12:	f7fe facf 	bl	25fb4 <CC_PalMemCopyPlat>
   27a16:	3601      	adds	r6, #1
   27a18:	e7ef      	b.n	279fa <UtilCmacBuildDataForDerivation+0x8a>
   27a1a:	1998      	adds	r0, r3, r6
   27a1c:	4642      	mov	r2, r8
   27a1e:	4639      	mov	r1, r7
   27a20:	f7fe fac8 	bl	25fb4 <CC_PalMemCopyPlat>
   27a24:	4446      	add	r6, r8
   27a26:	e7d8      	b.n	279da <UtilCmacBuildDataForDerivation+0x6a>
   27a28:	80000006 	.word	0x80000006

00027a2c <CC_PalDataBufferAttrGet>:
   27a2c:	2000      	movs	r0, #0
   27a2e:	7018      	strb	r0, [r3, #0]
   27a30:	4770      	bx	lr
   27a32:	bf00      	nop

00027a34 <cbprintf_via_va_list>:
{
   27a34:	b510      	push	{r4, lr}
   27a36:	460c      	mov	r4, r1
   27a38:	4611      	mov	r1, r2
   27a3a:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   27a3c:	9b02      	ldr	r3, [sp, #8]
   27a3e:	47a0      	blx	r4
}
   27a40:	bd10      	pop	{r4, pc}

00027a42 <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   27a42:	3840      	subs	r0, #64	; 0x40
   27a44:	b2c0      	uxtb	r0, r0
}
   27a46:	283a      	cmp	r0, #58	; 0x3a
   27a48:	bf8c      	ite	hi
   27a4a:	2000      	movhi	r0, #0
   27a4c:	2001      	movls	r0, #1
   27a4e:	4770      	bx	lr

00027a50 <get_package_len>:
{
   27a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a52:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   27a54:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   27a56:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   27a58:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
   27a5a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   27a5e:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   27a60:	2700      	movs	r7, #0
   27a62:	e006      	b.n	27a72 <get_package_len+0x22>
		buf++;
   27a64:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   27a66:	4620      	mov	r0, r4
   27a68:	f7e5 f838 	bl	cadc <strlen>
   27a6c:	3001      	adds	r0, #1
   27a6e:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   27a70:	3701      	adds	r7, #1
   27a72:	42af      	cmp	r7, r5
   27a74:	d3f6      	bcc.n	27a64 <get_package_len+0x14>
}
   27a76:	1ba0      	subs	r0, r4, r6
   27a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027a7a <append_string>:
{
   27a7a:	b570      	push	{r4, r5, r6, lr}
   27a7c:	4614      	mov	r4, r2
	if (cb == NULL) {
   27a7e:	b138      	cbz	r0, 27a90 <append_string+0x16>
   27a80:	460d      	mov	r5, r1
   27a82:	4619      	mov	r1, r3
   27a84:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   27a86:	b143      	cbz	r3, 27a9a <append_string+0x20>
	return cb(str, strl, ctx);
   27a88:	462a      	mov	r2, r5
   27a8a:	4620      	mov	r0, r4
   27a8c:	47b0      	blx	r6
}
   27a8e:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   27a90:	4610      	mov	r0, r2
   27a92:	f7e5 f823 	bl	cadc <strlen>
   27a96:	3001      	adds	r0, #1
   27a98:	e7f9      	b.n	27a8e <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   27a9a:	4610      	mov	r0, r2
   27a9c:	f7e5 f81e 	bl	cadc <strlen>
   27aa0:	b283      	uxth	r3, r0
   27aa2:	3301      	adds	r3, #1
   27aa4:	b299      	uxth	r1, r3
   27aa6:	e7ef      	b.n	27a88 <append_string+0xe>

00027aa8 <cbpprintf_external>:
	if (buf == NULL) {
   27aa8:	b35b      	cbz	r3, 27b02 <cbpprintf_external+0x5a>
{
   27aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27aae:	b082      	sub	sp, #8
   27ab0:	4607      	mov	r7, r0
   27ab2:	4688      	mov	r8, r1
   27ab4:	4691      	mov	r9, r2
   27ab6:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   27ab8:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   27aba:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   27abc:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   27abe:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   27ac0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   27ac4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   27ac8:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   27aca:	f04f 0a00 	mov.w	sl, #0
   27ace:	e00a      	b.n	27ae6 <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   27ad0:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   27ad4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   27ad8:	4620      	mov	r0, r4
   27ada:	f7e4 ffff 	bl	cadc <strlen>
   27ade:	3001      	adds	r0, #1
   27ae0:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   27ae2:	f10a 0a01 	add.w	sl, sl, #1
   27ae6:	45b2      	cmp	sl, r6
   27ae8:	d3f2      	bcc.n	27ad0 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   27aea:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   27aee:	9300      	str	r3, [sp, #0]
   27af0:	686b      	ldr	r3, [r5, #4]
   27af2:	464a      	mov	r2, r9
   27af4:	4641      	mov	r1, r8
   27af6:	4638      	mov	r0, r7
   27af8:	f7ff ff9c 	bl	27a34 <cbprintf_via_va_list>
}
   27afc:	b002      	add	sp, #8
   27afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   27b02:	f06f 0015 	mvn.w	r0, #21
}
   27b06:	4770      	bx	lr

00027b08 <is_ptr>:
{
   27b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b0c:	4604      	mov	r4, r0
   27b0e:	4688      	mov	r8, r1
	int cnt = 0;
   27b10:	2700      	movs	r7, #0
	bool mod = false;
   27b12:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   27b14:	e007      	b.n	27b26 <is_ptr+0x1e>
				if (c == 'p') {
   27b16:	2d70      	cmp	r5, #112	; 0x70
   27b18:	d018      	beq.n	27b4c <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   27b1a:	4628      	mov	r0, r5
   27b1c:	f7ff ff91 	bl	27a42 <is_fmt_spec>
   27b20:	b9b8      	cbnz	r0, 27b52 <is_ptr+0x4a>
		if (c == '%') {
   27b22:	2d25      	cmp	r5, #37	; 0x25
   27b24:	d00e      	beq.n	27b44 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   27b26:	f814 5b01 	ldrb.w	r5, [r4], #1
   27b2a:	b175      	cbz	r5, 27b4a <is_ptr+0x42>
		if (mod) {
   27b2c:	2e00      	cmp	r6, #0
   27b2e:	d0f8      	beq.n	27b22 <is_ptr+0x1a>
			if (cnt == n) {
   27b30:	4547      	cmp	r7, r8
   27b32:	d0f0      	beq.n	27b16 <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   27b34:	4628      	mov	r0, r5
   27b36:	f7ff ff84 	bl	27a42 <is_fmt_spec>
   27b3a:	2800      	cmp	r0, #0
   27b3c:	d0f1      	beq.n	27b22 <is_ptr+0x1a>
				cnt++;
   27b3e:	3701      	adds	r7, #1
				mod = false;
   27b40:	2600      	movs	r6, #0
   27b42:	e7ee      	b.n	27b22 <is_ptr+0x1a>
			mod = !mod;
   27b44:	f086 0601 	eor.w	r6, r6, #1
   27b48:	e7ed      	b.n	27b26 <is_ptr+0x1e>
	return false;
   27b4a:	2600      	movs	r6, #0
}
   27b4c:	4630      	mov	r0, r6
   27b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   27b52:	2600      	movs	r6, #0
   27b54:	e7fa      	b.n	27b4c <is_ptr+0x44>

00027b56 <arch_printk_char_out>:
}
   27b56:	2000      	movs	r0, #0
   27b58:	4770      	bx	lr

00027b5a <str_out>:
{
   27b5a:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27b5c:	680c      	ldr	r4, [r1, #0]
   27b5e:	b154      	cbz	r4, 27b76 <str_out+0x1c>
   27b60:	688a      	ldr	r2, [r1, #8]
   27b62:	684b      	ldr	r3, [r1, #4]
   27b64:	429a      	cmp	r2, r3
   27b66:	da06      	bge.n	27b76 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   27b68:	3b01      	subs	r3, #1
   27b6a:	429a      	cmp	r2, r3
   27b6c:	d009      	beq.n	27b82 <str_out+0x28>
		ctx->str[ctx->count++] = c;
   27b6e:	1c53      	adds	r3, r2, #1
   27b70:	608b      	str	r3, [r1, #8]
   27b72:	54a0      	strb	r0, [r4, r2]
   27b74:	e002      	b.n	27b7c <str_out+0x22>
		ctx->count++;
   27b76:	688b      	ldr	r3, [r1, #8]
   27b78:	3301      	adds	r3, #1
   27b7a:	608b      	str	r3, [r1, #8]
}
   27b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
   27b80:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   27b82:	1c53      	adds	r3, r2, #1
   27b84:	608b      	str	r3, [r1, #8]
   27b86:	2300      	movs	r3, #0
   27b88:	54a3      	strb	r3, [r4, r2]
   27b8a:	e7f7      	b.n	27b7c <str_out+0x22>

00027b8c <vprintk>:
{
   27b8c:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   27b8e:	f001 f8ca 	bl	28d26 <z_log_vprintk>
}
   27b92:	bd08      	pop	{r3, pc}

00027b94 <printk>:
{
   27b94:	b40f      	push	{r0, r1, r2, r3}
   27b96:	b500      	push	{lr}
   27b98:	b083      	sub	sp, #12
   27b9a:	a904      	add	r1, sp, #16
   27b9c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   27ba0:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   27ba2:	f7ff fff3 	bl	27b8c <vprintk>
}
   27ba6:	b003      	add	sp, #12
   27ba8:	f85d eb04 	ldr.w	lr, [sp], #4
   27bac:	b004      	add	sp, #16
   27bae:	4770      	bx	lr

00027bb0 <snprintk>:
{
   27bb0:	b40c      	push	{r2, r3}
   27bb2:	b500      	push	{lr}
   27bb4:	b083      	sub	sp, #12
   27bb6:	ab04      	add	r3, sp, #16
   27bb8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   27bbc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   27bbe:	f7eb f8a7 	bl	12d10 <vsnprintk>
}
   27bc2:	b003      	add	sp, #12
   27bc4:	f85d eb04 	ldr.w	lr, [sp], #4
   27bc8:	b002      	add	sp, #8
   27bca:	4770      	bx	lr

00027bcc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   27bcc:	b508      	push	{r3, lr}
   27bce:	4604      	mov	r4, r0
   27bd0:	4608      	mov	r0, r1
   27bd2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   27bd4:	461a      	mov	r2, r3
   27bd6:	47a0      	blx	r4
	return z_impl_z_current_get();
   27bd8:	f7fb f89e 	bl	22d18 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   27bdc:	f7ee fd6a 	bl	166b4 <z_impl_k_thread_abort>

00027be0 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   27be0:	00c9      	lsls	r1, r1, #3
   27be2:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   27be4:	4408      	add	r0, r1
   27be6:	4770      	bx	lr

00027be8 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   27be8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   27bec:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   27bf0:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   27bf2:	4299      	cmp	r1, r3
   27bf4:	d00c      	beq.n	27c10 <free_list_remove_bidx+0x28>
   27bf6:	4484      	add	ip, r0
   27bf8:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   27bfc:	3204      	adds	r2, #4
   27bfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   27c02:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   27c04:	3206      	adds	r2, #6
   27c06:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   27c08:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   27c0a:	3304      	adds	r3, #4
   27c0c:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   27c0e:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   27c10:	68c3      	ldr	r3, [r0, #12]
   27c12:	2101      	movs	r1, #1
   27c14:	4091      	lsls	r1, r2
   27c16:	ea23 0301 	bic.w	r3, r3, r1
   27c1a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   27c1c:	3204      	adds	r2, #4
   27c1e:	2300      	movs	r3, #0
   27c20:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   27c24:	4770      	bx	lr

00027c26 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   27c26:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   27c28:	1d13      	adds	r3, r2, #4
   27c2a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   27c2e:	b974      	cbnz	r4, 27c4e <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   27c30:	68c3      	ldr	r3, [r0, #12]
   27c32:	2401      	movs	r4, #1
   27c34:	4094      	lsls	r4, r2
   27c36:	4323      	orrs	r3, r4
   27c38:	60c3      	str	r3, [r0, #12]
		b->next = c;
   27c3a:	3204      	adds	r2, #4
   27c3c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   27c40:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   27c42:	1d1a      	adds	r2, r3, #4
   27c44:	b289      	uxth	r1, r1
   27c46:	5281      	strh	r1, [r0, r2]
   27c48:	3306      	adds	r3, #6
   27c4a:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   27c4c:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   27c4e:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   27c50:	3204      	adds	r2, #4
   27c52:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   27c54:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   27c58:	f10c 0e04 	add.w	lr, ip, #4
   27c5c:	f820 300e 	strh.w	r3, [r0, lr]
   27c60:	f10c 0c06 	add.w	ip, ip, #6
   27c64:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   27c68:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   27c6a:	3306      	adds	r3, #6
   27c6c:	b289      	uxth	r1, r1
   27c6e:	52c1      	strh	r1, [r0, r3]
   27c70:	5281      	strh	r1, [r0, r2]
   27c72:	e7eb      	b.n	27c4c <free_list_add_bidx+0x26>

00027c74 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   27c74:	b500      	push	{lr}
	void *cmem = &buf[c];
   27c76:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   27c78:	3302      	adds	r3, #2
   27c7a:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   27c7e:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   27c82:	1a89      	subs	r1, r1, r2
   27c84:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27c88:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   27c8c:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27c90:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   27c94:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   27c96:	3302      	adds	r3, #2
   27c98:	f820 e003 	strh.w	lr, [r0, r3]
   27c9c:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   27ca0:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   27ca2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   27ca6:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   27caa:	f85d fb04 	ldr.w	pc, [sp], #4

00027cae <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   27cae:	b500      	push	{lr}
	void *cmem = &buf[c];
   27cb0:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   27cb2:	3102      	adds	r1, #2
   27cb4:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   27cb8:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   27cbc:	f10c 0c02 	add.w	ip, ip, #2
   27cc0:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   27cc4:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27cc6:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27cca:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   27cce:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   27cd2:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   27cd6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   27cda:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   27cde:	f85d fb04 	ldr.w	pc, [sp], #4

00027ce2 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   27ce2:	3904      	subs	r1, #4
   27ce4:	1a08      	subs	r0, r1, r0
}
   27ce6:	08c0      	lsrs	r0, r0, #3
   27ce8:	4770      	bx	lr

00027cea <free_list_remove>:
{
   27cea:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   27cec:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   27cf0:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   27cf2:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   27cf4:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   27cf8:	f1c2 021f 	rsb	r2, r2, #31
   27cfc:	f7ff ff74 	bl	27be8 <free_list_remove_bidx>
}
   27d00:	bd08      	pop	{r3, pc}

00027d02 <free_list_add>:
{
   27d02:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   27d04:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   27d08:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   27d0a:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   27d0c:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   27d10:	f1c2 021f 	rsb	r2, r2, #31
   27d14:	f7ff ff87 	bl	27c26 <free_list_add_bidx>
}
   27d18:	bd08      	pop	{r3, pc}

00027d1a <free_chunk>:
{
   27d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d1c:	4604      	mov	r4, r0
   27d1e:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   27d20:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   27d22:	1cb7      	adds	r7, r6, #2
   27d24:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   27d26:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   27d2a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   27d2e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   27d30:	f013 0f01 	tst.w	r3, #1
   27d34:	d00c      	beq.n	27d50 <free_chunk+0x36>
   27d36:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   27d38:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   27d3a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   27d3e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   27d40:	f013 0f01 	tst.w	r3, #1
   27d44:	d00e      	beq.n	27d64 <free_chunk+0x4a>
	free_list_add(h, c);
   27d46:	4629      	mov	r1, r5
   27d48:	4620      	mov	r0, r4
   27d4a:	f7ff ffda 	bl	27d02 <free_list_add>
}
   27d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   27d50:	f7ff ffcb 	bl	27cea <free_list_remove>
   27d54:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   27d56:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   27d5a:	4629      	mov	r1, r5
   27d5c:	4620      	mov	r0, r4
   27d5e:	f7ff ffa6 	bl	27cae <merge_chunks>
   27d62:	e7e8      	b.n	27d36 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   27d64:	4620      	mov	r0, r4
   27d66:	f7ff ffc0 	bl	27cea <free_list_remove>
   27d6a:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   27d6c:	462a      	mov	r2, r5
   27d6e:	1a69      	subs	r1, r5, r1
   27d70:	4620      	mov	r0, r4
   27d72:	f7ff ff9c 	bl	27cae <merge_chunks>
   27d76:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   27d78:	1aed      	subs	r5, r5, r3
   27d7a:	e7e4      	b.n	27d46 <free_chunk+0x2c>

00027d7c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   27d7c:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   27d7e:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   27d82:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   27d86:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   27d8a:	b1cd      	cbz	r5, 27dc0 <alloc_chunk+0x44>
   27d8c:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   27d90:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   27d94:	1d14      	adds	r4, r2, #4
   27d96:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   27d9a:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   27d9e:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   27da2:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   27da4:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   27da8:	d914      	bls.n	27dd4 <alloc_chunk+0x58>
   27daa:	4484      	add	ip, r0
   27dac:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   27db0:	1d16      	adds	r6, r2, #4
   27db2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   27db6:	f1be 0e01 	subs.w	lr, lr, #1
   27dba:	d001      	beq.n	27dc0 <alloc_chunk+0x44>
   27dbc:	42a5      	cmp	r5, r4
   27dbe:	d1e9      	bne.n	27d94 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   27dc0:	68c4      	ldr	r4, [r0, #12]
   27dc2:	f1c3 0220 	rsb	r2, r3, #32
   27dc6:	2301      	movs	r3, #1
   27dc8:	4093      	lsls	r3, r2
   27dca:	425b      	negs	r3, r3

	if (bmask != 0U) {
   27dcc:	401c      	ands	r4, r3
   27dce:	d105      	bne.n	27ddc <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   27dd0:	4620      	mov	r0, r4
   27dd2:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   27dd4:	4621      	mov	r1, r4
   27dd6:	f7ff ff07 	bl	27be8 <free_list_remove_bidx>
				return c;
   27dda:	e7f9      	b.n	27dd0 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   27ddc:	fa94 f2a4 	rbit	r2, r4
   27de0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   27de4:	1d13      	adds	r3, r2, #4
   27de6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   27dea:	4621      	mov	r1, r4
   27dec:	f7ff fefc 	bl	27be8 <free_list_remove_bidx>
		return c;
   27df0:	e7ee      	b.n	27dd0 <alloc_chunk+0x54>

00027df2 <sys_heap_free>:
	if (mem == NULL) {
   27df2:	b179      	cbz	r1, 27e14 <sys_heap_free+0x22>
{
   27df4:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   27df6:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   27df8:	4620      	mov	r0, r4
   27dfa:	f7ff ff72 	bl	27ce2 <mem_to_chunkid>
   27dfe:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   27e00:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27e04:	8853      	ldrh	r3, [r2, #2]
   27e06:	f023 0301 	bic.w	r3, r3, #1
   27e0a:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   27e0c:	4620      	mov	r0, r4
   27e0e:	f7ff ff84 	bl	27d1a <free_chunk>
}
   27e12:	bd10      	pop	{r4, pc}
   27e14:	4770      	bx	lr

00027e16 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   27e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   27e18:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   27e1a:	b341      	cbz	r1, 27e6e <sys_heap_alloc+0x58>
   27e1c:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   27e1e:	68aa      	ldr	r2, [r5, #8]
   27e20:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   27e24:	d925      	bls.n	27e72 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27e26:	330b      	adds	r3, #11
   27e28:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   27e2a:	4621      	mov	r1, r4
   27e2c:	4628      	mov	r0, r5
   27e2e:	f7ff ffa5 	bl	27d7c <alloc_chunk>
	if (c == 0U) {
   27e32:	4607      	mov	r7, r0
   27e34:	b1f8      	cbz	r0, 27e76 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   27e36:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   27e38:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   27e3c:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   27e3e:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   27e42:	d309      	bcc.n	27e58 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   27e44:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27e46:	885a      	ldrh	r2, [r3, #2]
   27e48:	f042 0201 	orr.w	r2, r2, #1
   27e4c:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   27e4e:	4639      	mov	r1, r7
   27e50:	4628      	mov	r0, r5
   27e52:	f7ff fec5 	bl	27be0 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   27e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   27e58:	4404      	add	r4, r0
   27e5a:	4622      	mov	r2, r4
   27e5c:	4601      	mov	r1, r0
   27e5e:	4628      	mov	r0, r5
   27e60:	f7ff ff08 	bl	27c74 <split_chunks>
		free_list_add(h, c + chunk_sz);
   27e64:	4621      	mov	r1, r4
   27e66:	4628      	mov	r0, r5
   27e68:	f7ff ff4b 	bl	27d02 <free_list_add>
   27e6c:	e7ea      	b.n	27e44 <sys_heap_alloc+0x2e>
		return NULL;
   27e6e:	2000      	movs	r0, #0
   27e70:	e7f1      	b.n	27e56 <sys_heap_alloc+0x40>
   27e72:	2000      	movs	r0, #0
   27e74:	e7ef      	b.n	27e56 <sys_heap_alloc+0x40>
		return NULL;
   27e76:	2000      	movs	r0, #0
   27e78:	e7ed      	b.n	27e56 <sys_heap_alloc+0x40>

00027e7a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   27e7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27e7e:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   27e80:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   27e82:	424b      	negs	r3, r1
   27e84:	400b      	ands	r3, r1
	if (align != rew) {
   27e86:	f101 39ff 	add.w	r9, r1, #4294967295
   27e8a:	ea19 0901 	ands.w	r9, r9, r1
   27e8e:	d004      	beq.n	27e9a <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   27e90:	2b03      	cmp	r3, #3
   27e92:	d847      	bhi.n	27f24 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   27e94:	464c      	mov	r4, r9
	rew = align & -align;
   27e96:	4699      	mov	r9, r3
   27e98:	e003      	b.n	27ea2 <sys_heap_aligned_alloc+0x28>
   27e9a:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   27e9c:	2904      	cmp	r1, #4
   27e9e:	d93c      	bls.n	27f1a <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   27ea0:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   27ea2:	2d00      	cmp	r5, #0
   27ea4:	d056      	beq.n	27f54 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   27ea6:	68b2      	ldr	r2, [r6, #8]
   27ea8:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   27eac:	d955      	bls.n	27f5a <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   27eae:	1961      	adds	r1, r4, r5
   27eb0:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27eb2:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   27eb4:	08c9      	lsrs	r1, r1, #3
   27eb6:	4630      	mov	r0, r6
   27eb8:	f7ff ff60 	bl	27d7c <alloc_chunk>

	if (c0 == 0) {
   27ebc:	4607      	mov	r7, r0
   27ebe:	2800      	cmp	r0, #0
   27ec0:	d04e      	beq.n	27f60 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   27ec2:	4601      	mov	r1, r0
   27ec4:	4630      	mov	r0, r6
   27ec6:	f7ff fe8b 	bl	27be0 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   27eca:	eb00 0809 	add.w	r8, r0, r9
   27ece:	44a0      	add	r8, r4
   27ed0:	f108 38ff 	add.w	r8, r8, #4294967295
   27ed4:	4264      	negs	r4, r4
   27ed6:	ea08 0804 	and.w	r8, r8, r4
   27eda:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   27ede:	eb08 0405 	add.w	r4, r8, r5
   27ee2:	3407      	adds	r4, #7
   27ee4:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   27ee8:	4641      	mov	r1, r8
   27eea:	4630      	mov	r0, r6
   27eec:	f7ff fef9 	bl	27ce2 <mem_to_chunkid>
   27ef0:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   27ef2:	1ba4      	subs	r4, r4, r6
   27ef4:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   27ef6:	4287      	cmp	r7, r0
   27ef8:	d318      	bcc.n	27f2c <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   27efa:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   27efc:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   27f00:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   27f02:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   27f06:	429c      	cmp	r4, r3
   27f08:	d31a      	bcc.n	27f40 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   27f0a:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27f0c:	8873      	ldrh	r3, [r6, #2]
   27f0e:	f043 0301 	orr.w	r3, r3, #1
   27f12:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   27f14:	4640      	mov	r0, r8
   27f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   27f1a:	4611      	mov	r1, r2
   27f1c:	f7ff ff7b 	bl	27e16 <sys_heap_alloc>
   27f20:	4680      	mov	r8, r0
   27f22:	e7f7      	b.n	27f14 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   27f24:	464c      	mov	r4, r9
	rew = align & -align;
   27f26:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   27f28:	2304      	movs	r3, #4
   27f2a:	e7ba      	b.n	27ea2 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   27f2c:	4602      	mov	r2, r0
   27f2e:	4639      	mov	r1, r7
   27f30:	4630      	mov	r0, r6
   27f32:	f7ff fe9f 	bl	27c74 <split_chunks>
		free_list_add(h, c0);
   27f36:	4639      	mov	r1, r7
   27f38:	4630      	mov	r0, r6
   27f3a:	f7ff fee2 	bl	27d02 <free_list_add>
   27f3e:	e7dc      	b.n	27efa <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   27f40:	4622      	mov	r2, r4
   27f42:	4629      	mov	r1, r5
   27f44:	4630      	mov	r0, r6
   27f46:	f7ff fe95 	bl	27c74 <split_chunks>
		free_list_add(h, c_end);
   27f4a:	4621      	mov	r1, r4
   27f4c:	4630      	mov	r0, r6
   27f4e:	f7ff fed8 	bl	27d02 <free_list_add>
   27f52:	e7da      	b.n	27f0a <sys_heap_aligned_alloc+0x90>
		return NULL;
   27f54:	f04f 0800 	mov.w	r8, #0
   27f58:	e7dc      	b.n	27f14 <sys_heap_aligned_alloc+0x9a>
   27f5a:	f04f 0800 	mov.w	r8, #0
   27f5e:	e7d9      	b.n	27f14 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   27f60:	f04f 0800 	mov.w	r8, #0
   27f64:	e7d6      	b.n	27f14 <sys_heap_aligned_alloc+0x9a>

00027f66 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   27f66:	b570      	push	{r4, r5, r6, lr}
   27f68:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   27f6a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   27f6c:	1dc8      	adds	r0, r1, #7
   27f6e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   27f72:	440a      	add	r2, r1
   27f74:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   27f78:	1a12      	subs	r2, r2, r0
   27f7a:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   27f7c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   27f7e:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   27f80:	2300      	movs	r3, #0
   27f82:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   27f84:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   27f88:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   27f8c:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   27f90:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27f92:	1dce      	adds	r6, r1, #7
   27f94:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   27f96:	e005      	b.n	27fa4 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   27f98:	f103 0c04 	add.w	ip, r3, #4
   27f9c:	2400      	movs	r4, #0
   27f9e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   27fa2:	3301      	adds	r3, #1
   27fa4:	4573      	cmp	r3, lr
   27fa6:	dbf7      	blt.n	27f98 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27fa8:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   27faa:	b2a4      	uxth	r4, r4
   27fac:	8044      	strh	r4, [r0, #2]
   27fae:	f04f 0c00 	mov.w	ip, #0
   27fb2:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27fb6:	f044 0401 	orr.w	r4, r4, #1
   27fba:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   27fbc:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27fbe:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   27fc2:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   27fc6:	1ca5      	adds	r5, r4, #2
   27fc8:	f820 e005 	strh.w	lr, [r0, r5]
   27fcc:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   27fce:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   27fd2:	1c95      	adds	r5, r2, #2
   27fd4:	f820 c005 	strh.w	ip, [r0, r5]
   27fd8:	4402      	add	r2, r0
   27fda:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27fdc:	8853      	ldrh	r3, [r2, #2]
   27fde:	f043 0301 	orr.w	r3, r3, #1
   27fe2:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   27fe4:	f7ff fe8d 	bl	27d02 <free_list_add>
}
   27fe8:	bd70      	pop	{r4, r5, r6, pc}

00027fea <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   27fea:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27fee:	8b03      	ldrh	r3, [r0, #24]
   27ff0:	f023 0307 	bic.w	r3, r3, #7
   27ff4:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   27ff6:	8303      	strh	r3, [r0, #24]
}
   27ff8:	4770      	bx	lr

00027ffa <notify_monitors>:
{
   27ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ffe:	4606      	mov	r6, r0
   28000:	460f      	mov	r7, r1
   28002:	4690      	mov	r8, r2
	return list->head;
   28004:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   28006:	b121      	cbz	r1, 28012 <notify_monitors+0x18>
	return node->next;
   28008:	680c      	ldr	r4, [r1, #0]
   2800a:	b13c      	cbz	r4, 2801c <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2800c:	b931      	cbnz	r1, 2801c <notify_monitors+0x22>
   2800e:	460c      	mov	r4, r1
   28010:	e004      	b.n	2801c <notify_monitors+0x22>
   28012:	460c      	mov	r4, r1
   28014:	e002      	b.n	2801c <notify_monitors+0x22>
   28016:	4623      	mov	r3, r4
   28018:	4621      	mov	r1, r4
   2801a:	461c      	mov	r4, r3
   2801c:	b169      	cbz	r1, 2803a <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   2801e:	684d      	ldr	r5, [r1, #4]
   28020:	4643      	mov	r3, r8
   28022:	463a      	mov	r2, r7
   28024:	4630      	mov	r0, r6
   28026:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   28028:	2c00      	cmp	r4, #0
   2802a:	d0f4      	beq.n	28016 <notify_monitors+0x1c>
	return node->next;
   2802c:	6823      	ldr	r3, [r4, #0]
   2802e:	2b00      	cmp	r3, #0
   28030:	d0f2      	beq.n	28018 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28032:	2c00      	cmp	r4, #0
   28034:	d1f0      	bne.n	28018 <notify_monitors+0x1e>
   28036:	4623      	mov	r3, r4
   28038:	e7ee      	b.n	28018 <notify_monitors+0x1e>
}
   2803a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002803e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2803e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   28040:	f013 0307 	ands.w	r3, r3, #7
   28044:	d103      	bne.n	2804e <process_recheck+0x10>
	return list->head;
   28046:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   28048:	b10a      	cbz	r2, 2804e <process_recheck+0x10>
		evt = EVT_START;
   2804a:	2003      	movs	r0, #3
   2804c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2804e:	2b02      	cmp	r3, #2
   28050:	d003      	beq.n	2805a <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   28052:	2b01      	cmp	r3, #1
   28054:	d006      	beq.n	28064 <process_recheck+0x26>
	int evt = EVT_NOP;
   28056:	2000      	movs	r0, #0
   28058:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   2805a:	8b42      	ldrh	r2, [r0, #26]
   2805c:	2a00      	cmp	r2, #0
   2805e:	d1f8      	bne.n	28052 <process_recheck+0x14>
		evt = EVT_STOP;
   28060:	2004      	movs	r0, #4
   28062:	4770      	bx	lr
   28064:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   28066:	b10b      	cbz	r3, 2806c <process_recheck+0x2e>
		evt = EVT_RESET;
   28068:	2005      	movs	r0, #5
}
   2806a:	4770      	bx	lr
	int evt = EVT_NOP;
   2806c:	2000      	movs	r0, #0
   2806e:	4770      	bx	lr

00028070 <process_complete>:
{
   28070:	b510      	push	{r4, lr}
   28072:	4604      	mov	r4, r0
   28074:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28076:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   28078:	2a00      	cmp	r2, #0
   2807a:	db07      	blt.n	2808c <process_complete+0x1c>
   2807c:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   28080:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   28082:	2a01      	cmp	r2, #1
   28084:	d90e      	bls.n	280a4 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   28086:	2b04      	cmp	r3, #4
   28088:	d036      	beq.n	280f8 <process_complete+0x88>
}
   2808a:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   2808c:	e9d0 0100 	ldrd	r0, r1, [r0]
   28090:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   28094:	2300      	movs	r3, #0
   28096:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   28098:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   2809a:	2101      	movs	r1, #1
   2809c:	4620      	mov	r0, r4
   2809e:	f7ff ffa4 	bl	27fea <set_state>
   280a2:	e7f2      	b.n	2808a <process_complete+0x1a>
		*clients = mgr->clients;
   280a4:	e9d0 0100 	ldrd	r0, r1, [r0]
   280a8:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   280ac:	2200      	movs	r2, #0
   280ae:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   280b0:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   280b2:	2b06      	cmp	r3, #6
   280b4:	d11b      	bne.n	280ee <process_complete+0x7e>
	return list->head;
   280b6:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   280ba:	b153      	cbz	r3, 280d2 <process_complete+0x62>
				mgr->refs += 1U;
   280bc:	8b62      	ldrh	r2, [r4, #26]
   280be:	3201      	adds	r2, #1
   280c0:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   280c2:	461a      	mov	r2, r3
	return node->next;
   280c4:	681b      	ldr	r3, [r3, #0]
   280c6:	2b00      	cmp	r3, #0
   280c8:	d0f7      	beq.n	280ba <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   280ca:	2a00      	cmp	r2, #0
   280cc:	d1f5      	bne.n	280ba <process_complete+0x4a>
   280ce:	4613      	mov	r3, r2
   280d0:	e7f3      	b.n	280ba <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   280d2:	2102      	movs	r1, #2
   280d4:	4620      	mov	r0, r4
   280d6:	f7ff ff88 	bl	27fea <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   280da:	4620      	mov	r0, r4
   280dc:	f7ff ffaf 	bl	2803e <process_recheck>
   280e0:	2800      	cmp	r0, #0
   280e2:	d0d2      	beq.n	2808a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   280e4:	8b23      	ldrh	r3, [r4, #24]
   280e6:	f043 0320 	orr.w	r3, r3, #32
   280ea:	8323      	strh	r3, [r4, #24]
   280ec:	e7cd      	b.n	2808a <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   280ee:	2100      	movs	r1, #0
   280f0:	4620      	mov	r0, r4
   280f2:	f7ff ff7a 	bl	27fea <set_state>
   280f6:	e7f0      	b.n	280da <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   280f8:	2100      	movs	r1, #0
   280fa:	f7ff ff76 	bl	27fea <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   280fe:	4620      	mov	r0, r4
   28100:	f7ff ff9d 	bl	2803e <process_recheck>
   28104:	2800      	cmp	r0, #0
   28106:	d0c0      	beq.n	2808a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   28108:	8b23      	ldrh	r3, [r4, #24]
   2810a:	f043 0320 	orr.w	r3, r3, #32
   2810e:	8323      	strh	r3, [r4, #24]
}
   28110:	e7bb      	b.n	2808a <process_complete+0x1a>

00028112 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   28112:	b150      	cbz	r0, 2812a <validate_args+0x18>
{
   28114:	b510      	push	{r4, lr}
   28116:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   28118:	b151      	cbz	r1, 28130 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   2811a:	1d08      	adds	r0, r1, #4
   2811c:	f000 f8c4 	bl	282a8 <sys_notify_validate>
	if ((rv == 0)
   28120:	b910      	cbnz	r0, 28128 <validate_args+0x16>
	    && ((cli->notify.flags
   28122:	68a3      	ldr	r3, [r4, #8]
   28124:	2b03      	cmp	r3, #3
   28126:	d806      	bhi.n	28136 <validate_args+0x24>
}
   28128:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2812a:	f06f 0015 	mvn.w	r0, #21
}
   2812e:	4770      	bx	lr
		return -EINVAL;
   28130:	f06f 0015 	mvn.w	r0, #21
   28134:	e7f8      	b.n	28128 <validate_args+0x16>
		rv = -EINVAL;
   28136:	f06f 0015 	mvn.w	r0, #21
   2813a:	e7f5      	b.n	28128 <validate_args+0x16>

0002813c <notify_one>:
{
   2813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28140:	4607      	mov	r7, r0
   28142:	460c      	mov	r4, r1
   28144:	4616      	mov	r6, r2
   28146:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   28148:	4619      	mov	r1, r3
   2814a:	1d20      	adds	r0, r4, #4
   2814c:	f000 f8cb 	bl	282e6 <sys_notify_finalize>
	if (cb) {
   28150:	b128      	cbz	r0, 2815e <notify_one+0x22>
   28152:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   28154:	462b      	mov	r3, r5
   28156:	4632      	mov	r2, r6
   28158:	4621      	mov	r1, r4
   2815a:	4638      	mov	r0, r7
   2815c:	47c0      	blx	r8
}
   2815e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028162 <notify_all>:
{
   28162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28166:	4680      	mov	r8, r0
   28168:	460c      	mov	r4, r1
   2816a:	4617      	mov	r7, r2
   2816c:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   2816e:	e004      	b.n	2817a <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   28170:	4633      	mov	r3, r6
   28172:	463a      	mov	r2, r7
   28174:	4640      	mov	r0, r8
   28176:	f7ff ffe1 	bl	2813c <notify_one>
	return list->head;
   2817a:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   2817c:	b131      	cbz	r1, 2818c <notify_all+0x2a>
	return node->next;
   2817e:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   28180:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28182:	6863      	ldr	r3, [r4, #4]
   28184:	428b      	cmp	r3, r1
   28186:	d1f3      	bne.n	28170 <notify_all+0xe>
	list->tail = node;
   28188:	6065      	str	r5, [r4, #4]
}
   2818a:	e7f1      	b.n	28170 <notify_all+0xe>
}
   2818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028190 <transition_complete>:
{
   28190:	b508      	push	{r3, lr}
	__asm__ volatile(
   28192:	f04f 0c40 	mov.w	ip, #64	; 0x40
   28196:	f3ef 8211 	mrs	r2, BASEPRI
   2819a:	f38c 8812 	msr	BASEPRI_MAX, ip
   2819e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   281a2:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   281a4:	2101      	movs	r1, #1
   281a6:	f7ea fdcb 	bl	12d40 <process_event>
}
   281aa:	bd08      	pop	{r3, pc}

000281ac <onoff_manager_init>:
	if ((mgr == NULL)
   281ac:	4603      	mov	r3, r0
   281ae:	b170      	cbz	r0, 281ce <onoff_manager_init+0x22>
	    || (transitions == NULL)
   281b0:	b181      	cbz	r1, 281d4 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   281b2:	680a      	ldr	r2, [r1, #0]
   281b4:	b18a      	cbz	r2, 281da <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   281b6:	684a      	ldr	r2, [r1, #4]
   281b8:	b192      	cbz	r2, 281e0 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   281ba:	2000      	movs	r0, #0
   281bc:	6018      	str	r0, [r3, #0]
   281be:	6058      	str	r0, [r3, #4]
   281c0:	6098      	str	r0, [r3, #8]
   281c2:	60d8      	str	r0, [r3, #12]
   281c4:	6118      	str	r0, [r3, #16]
   281c6:	6158      	str	r0, [r3, #20]
   281c8:	6198      	str	r0, [r3, #24]
   281ca:	6119      	str	r1, [r3, #16]
	return 0;
   281cc:	4770      	bx	lr
		return -EINVAL;
   281ce:	f06f 0015 	mvn.w	r0, #21
   281d2:	4770      	bx	lr
   281d4:	f06f 0015 	mvn.w	r0, #21
   281d8:	4770      	bx	lr
   281da:	f06f 0015 	mvn.w	r0, #21
   281de:	4770      	bx	lr
   281e0:	f06f 0015 	mvn.w	r0, #21
}
   281e4:	4770      	bx	lr

000281e6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   281e6:	b570      	push	{r4, r5, r6, lr}
   281e8:	4605      	mov	r5, r0
   281ea:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   281ec:	f7ff ff91 	bl	28112 <validate_args>

	if (rv < 0) {
   281f0:	1e04      	subs	r4, r0, #0
   281f2:	db30      	blt.n	28256 <onoff_request+0x70>
   281f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   281f8:	f3ef 8211 	mrs	r2, BASEPRI
   281fc:	f383 8812 	msr	BASEPRI_MAX, r3
   28200:	f3bf 8f6f 	isb	sy
   28204:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28206:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   2820a:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2820e:	8b6b      	ldrh	r3, [r5, #26]
   28210:	f64f 71ff 	movw	r1, #65535	; 0xffff
   28214:	428b      	cmp	r3, r1
   28216:	d02c      	beq.n	28272 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   28218:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   2821a:	f1bc 0f02 	cmp.w	ip, #2
   2821e:	d008      	beq.n	28232 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   28220:	f1bc 0f06 	cmp.w	ip, #6
   28224:	d819      	bhi.n	2825a <onoff_request+0x74>
   28226:	e8df f00c 	tbb	[pc, ip]
   2822a:	181e      	.short	0x181e
   2822c:	2a1e1818 	.word	0x2a1e1818
   28230:	1e          	.byte	0x1e
   28231:	00          	.byte	0x00
		mgr->refs += 1U;
   28232:	3301      	adds	r3, #1
   28234:	836b      	strh	r3, [r5, #26]
		notify = true;
   28236:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   28238:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   2823a:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   2823c:	b128      	cbz	r0, 2824a <onoff_request+0x64>
	parent->next = child;
   2823e:	2000      	movs	r0, #0
   28240:	6030      	str	r0, [r6, #0]
	return list->tail;
   28242:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   28244:	b308      	cbz	r0, 2828a <onoff_request+0xa4>
	parent->next = child;
   28246:	6006      	str	r6, [r0, #0]
	list->tail = node;
   28248:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   2824a:	bb09      	cbnz	r1, 28290 <onoff_request+0xaa>
	__asm__ volatile(
   2824c:	f38e 8811 	msr	BASEPRI, lr
   28250:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   28254:	bb0b      	cbnz	r3, 2829a <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   28256:	4620      	mov	r0, r4
   28258:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2825a:	f06f 0404 	mvn.w	r4, #4
   2825e:	2300      	movs	r3, #0
   28260:	4619      	mov	r1, r3
   28262:	4618      	mov	r0, r3
   28264:	e7ea      	b.n	2823c <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   28266:	fabc f18c 	clz	r1, ip
   2826a:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   2826c:	2300      	movs	r3, #0
		add_client = true;
   2826e:	2001      	movs	r0, #1
   28270:	e7e4      	b.n	2823c <onoff_request+0x56>
		rv = -EAGAIN;
   28272:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   28276:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   28278:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   2827a:	4618      	mov	r0, r3
   2827c:	e7de      	b.n	2823c <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   2827e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   28282:	2300      	movs	r3, #0
   28284:	4619      	mov	r1, r3
   28286:	4618      	mov	r0, r3
   28288:	e7d8      	b.n	2823c <onoff_request+0x56>
   2828a:	606e      	str	r6, [r5, #4]
	list->head = node;
   2828c:	602e      	str	r6, [r5, #0]
}
   2828e:	e7dc      	b.n	2824a <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   28290:	2102      	movs	r1, #2
   28292:	4628      	mov	r0, r5
   28294:	f7ea fd54 	bl	12d40 <process_event>
   28298:	e7dd      	b.n	28256 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   2829a:	2300      	movs	r3, #0
   2829c:	4662      	mov	r2, ip
   2829e:	4631      	mov	r1, r6
   282a0:	4628      	mov	r0, r5
   282a2:	f7ff ff4b 	bl	2813c <notify_one>
   282a6:	e7d6      	b.n	28256 <onoff_request+0x70>

000282a8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   282a8:	4602      	mov	r2, r0
   282aa:	b1b0      	cbz	r0, 282da <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   282ac:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   282ae:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   282b2:	2b02      	cmp	r3, #2
   282b4:	d00b      	beq.n	282ce <sys_notify_validate+0x26>
   282b6:	2b03      	cmp	r3, #3
   282b8:	d004      	beq.n	282c4 <sys_notify_validate+0x1c>
   282ba:	2b01      	cmp	r3, #1
   282bc:	d004      	beq.n	282c8 <sys_notify_validate+0x20>
   282be:	f06f 0015 	mvn.w	r0, #21
   282c2:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   282c4:	6803      	ldr	r3, [r0, #0]
   282c6:	b15b      	cbz	r3, 282e0 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   282c8:	2000      	movs	r0, #0
   282ca:	6090      	str	r0, [r2, #8]
   282cc:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   282ce:	6803      	ldr	r3, [r0, #0]
   282d0:	2b00      	cmp	r3, #0
   282d2:	d1f9      	bne.n	282c8 <sys_notify_validate+0x20>
			rv = -EINVAL;
   282d4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   282d8:	4770      	bx	lr
		return -EINVAL;
   282da:	f06f 0015 	mvn.w	r0, #21
   282de:	4770      	bx	lr
			rv = -EINVAL;
   282e0:	f06f 0015 	mvn.w	r0, #21
   282e4:	4770      	bx	lr

000282e6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   282e6:	b510      	push	{r4, lr}
   282e8:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   282ea:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   282ec:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   282f0:	6081      	str	r1, [r0, #8]
	switch (method) {
   282f2:	2a02      	cmp	r2, #2
   282f4:	d004      	beq.n	28300 <sys_notify_finalize+0x1a>
   282f6:	2a03      	cmp	r2, #3
   282f8:	d105      	bne.n	28306 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   282fa:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   282fc:	2000      	movs	r0, #0
		break;
   282fe:	e004      	b.n	2830a <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   28300:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   28302:	2400      	movs	r4, #0
		break;
   28304:	e001      	b.n	2830a <sys_notify_finalize+0x24>
	switch (method) {
   28306:	2400      	movs	r4, #0
   28308:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2830a:	2200      	movs	r2, #0
   2830c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2830e:	b108      	cbz	r0, 28314 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   28310:	f7fa ffe4 	bl	232dc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   28314:	4620      	mov	r0, r4
   28316:	bd10      	pop	{r4, pc}

00028318 <extract_width>:
{
   28318:	b530      	push	{r4, r5, lr}
   2831a:	b083      	sub	sp, #12
   2831c:	4604      	mov	r4, r0
   2831e:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   28320:	7803      	ldrb	r3, [r0, #0]
   28322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   28326:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   28328:	460d      	mov	r5, r1
   2832a:	780b      	ldrb	r3, [r1, #0]
   2832c:	2b2a      	cmp	r3, #42	; 0x2a
   2832e:	d018      	beq.n	28362 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   28330:	a801      	add	r0, sp, #4
   28332:	f7ea fdbb 	bl	12eac <extract_decimal>
	if (sp != wp) {
   28336:	9b01      	ldr	r3, [sp, #4]
   28338:	429d      	cmp	r5, r3
   2833a:	d00f      	beq.n	2835c <extract_width+0x44>
		conv->width_present = true;
   2833c:	7823      	ldrb	r3, [r4, #0]
   2833e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   28342:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   28344:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   28346:	b2db      	uxtb	r3, r3
   28348:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   2834c:	2800      	cmp	r0, #0
   2834e:	db10      	blt.n	28372 <extract_width+0x5a>
   28350:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   28352:	4313      	orrs	r3, r2
   28354:	7822      	ldrb	r2, [r4, #0]
   28356:	f363 0241 	bfi	r2, r3, #1, #1
   2835a:	7022      	strb	r2, [r4, #0]
	return sp;
   2835c:	9801      	ldr	r0, [sp, #4]
}
   2835e:	b003      	add	sp, #12
   28360:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   28362:	7843      	ldrb	r3, [r0, #1]
   28364:	f043 0301 	orr.w	r3, r3, #1
   28368:	7043      	strb	r3, [r0, #1]
		return ++sp;
   2836a:	4608      	mov	r0, r1
   2836c:	3001      	adds	r0, #1
   2836e:	9001      	str	r0, [sp, #4]
   28370:	e7f5      	b.n	2835e <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   28372:	2201      	movs	r2, #1
   28374:	e7ed      	b.n	28352 <extract_width+0x3a>

00028376 <extract_prec>:
{
   28376:	b510      	push	{r4, lr}
   28378:	b082      	sub	sp, #8
   2837a:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   2837c:	780b      	ldrb	r3, [r1, #0]
   2837e:	2b2e      	cmp	r3, #46	; 0x2e
   28380:	bf14      	ite	ne
   28382:	2300      	movne	r3, #0
   28384:	2301      	moveq	r3, #1
   28386:	7842      	ldrb	r2, [r0, #1]
   28388:	f363 0241 	bfi	r2, r3, #1, #1
   2838c:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   2838e:	b1c3      	cbz	r3, 283c2 <extract_prec+0x4c>
   28390:	4604      	mov	r4, r0
	++sp;
   28392:	9b01      	ldr	r3, [sp, #4]
   28394:	1c5a      	adds	r2, r3, #1
   28396:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   28398:	785b      	ldrb	r3, [r3, #1]
   2839a:	2b2a      	cmp	r3, #42	; 0x2a
   2839c:	d013      	beq.n	283c6 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   2839e:	a801      	add	r0, sp, #4
   283a0:	f7ea fd84 	bl	12eac <extract_decimal>
	conv->prec_value = prec;
   283a4:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   283a6:	7823      	ldrb	r3, [r4, #0]
   283a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   283ac:	2800      	cmp	r0, #0
   283ae:	db12      	blt.n	283d6 <extract_prec+0x60>
   283b0:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   283b2:	4313      	orrs	r3, r2
   283b4:	7822      	ldrb	r2, [r4, #0]
   283b6:	f363 0241 	bfi	r2, r3, #1, #1
   283ba:	7022      	strb	r2, [r4, #0]
	return sp;
   283bc:	9801      	ldr	r0, [sp, #4]
}
   283be:	b002      	add	sp, #8
   283c0:	bd10      	pop	{r4, pc}
		return sp;
   283c2:	4608      	mov	r0, r1
   283c4:	e7fb      	b.n	283be <extract_prec+0x48>
		conv->prec_star = true;
   283c6:	7843      	ldrb	r3, [r0, #1]
   283c8:	f043 0304 	orr.w	r3, r3, #4
   283cc:	7043      	strb	r3, [r0, #1]
		return ++sp;
   283ce:	4610      	mov	r0, r2
   283d0:	3001      	adds	r0, #1
   283d2:	9001      	str	r0, [sp, #4]
   283d4:	e7f3      	b.n	283be <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   283d6:	2201      	movs	r2, #1
   283d8:	e7eb      	b.n	283b2 <extract_prec+0x3c>

000283da <extract_length>:
{
   283da:	4602      	mov	r2, r0
	switch (*sp) {
   283dc:	780b      	ldrb	r3, [r1, #0]
   283de:	3b4c      	subs	r3, #76	; 0x4c
   283e0:	2b2e      	cmp	r3, #46	; 0x2e
   283e2:	d85b      	bhi.n	2849c <extract_length+0xc2>
   283e4:	e8df f003 	tbb	[pc, r3]
   283e8:	5a5a5a4f 	.word	0x5a5a5a4f
   283ec:	5a5a5a5a 	.word	0x5a5a5a5a
   283f0:	5a5a5a5a 	.word	0x5a5a5a5a
   283f4:	5a5a5a5a 	.word	0x5a5a5a5a
   283f8:	5a5a5a5a 	.word	0x5a5a5a5a
   283fc:	5a5a5a5a 	.word	0x5a5a5a5a
   28400:	5a5a5a5a 	.word	0x5a5a5a5a
   28404:	5a3a5a18 	.word	0x5a3a5a18
   28408:	5a5a5a29 	.word	0x5a5a5a29
   2840c:	5a5a5a5a 	.word	0x5a5a5a5a
   28410:	5a5a5a48 	.word	0x5a5a5a48
   28414:	5a5a      	.short	0x5a5a
   28416:	41          	.byte	0x41
   28417:	00          	.byte	0x00
		if (*++sp == 'h') {
   28418:	1c48      	adds	r0, r1, #1
   2841a:	784b      	ldrb	r3, [r1, #1]
   2841c:	2b68      	cmp	r3, #104	; 0x68
   2841e:	d005      	beq.n	2842c <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   28420:	7853      	ldrb	r3, [r2, #1]
   28422:	2102      	movs	r1, #2
   28424:	f361 03c6 	bfi	r3, r1, #3, #4
   28428:	7053      	strb	r3, [r2, #1]
   2842a:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   2842c:	7853      	ldrb	r3, [r2, #1]
   2842e:	2001      	movs	r0, #1
   28430:	f360 03c6 	bfi	r3, r0, #3, #4
   28434:	7053      	strb	r3, [r2, #1]
			++sp;
   28436:	1c88      	adds	r0, r1, #2
   28438:	4770      	bx	lr
		if (*++sp == 'l') {
   2843a:	1c48      	adds	r0, r1, #1
   2843c:	784b      	ldrb	r3, [r1, #1]
   2843e:	2b6c      	cmp	r3, #108	; 0x6c
   28440:	d005      	beq.n	2844e <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   28442:	7853      	ldrb	r3, [r2, #1]
   28444:	2103      	movs	r1, #3
   28446:	f361 03c6 	bfi	r3, r1, #3, #4
   2844a:	7053      	strb	r3, [r2, #1]
   2844c:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   2844e:	7853      	ldrb	r3, [r2, #1]
   28450:	2004      	movs	r0, #4
   28452:	f360 03c6 	bfi	r3, r0, #3, #4
   28456:	7053      	strb	r3, [r2, #1]
			++sp;
   28458:	1c88      	adds	r0, r1, #2
   2845a:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   2845c:	7853      	ldrb	r3, [r2, #1]
   2845e:	2005      	movs	r0, #5
   28460:	f360 03c6 	bfi	r3, r0, #3, #4
   28464:	7053      	strb	r3, [r2, #1]
		++sp;
   28466:	1c48      	adds	r0, r1, #1
		break;
   28468:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   2846a:	7853      	ldrb	r3, [r2, #1]
   2846c:	2006      	movs	r0, #6
   2846e:	f360 03c6 	bfi	r3, r0, #3, #4
   28472:	7053      	strb	r3, [r2, #1]
		++sp;
   28474:	1c48      	adds	r0, r1, #1
		break;
   28476:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   28478:	7853      	ldrb	r3, [r2, #1]
   2847a:	2007      	movs	r0, #7
   2847c:	f360 03c6 	bfi	r3, r0, #3, #4
   28480:	7053      	strb	r3, [r2, #1]
		++sp;
   28482:	1c48      	adds	r0, r1, #1
		break;
   28484:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   28486:	7853      	ldrb	r3, [r2, #1]
   28488:	2008      	movs	r0, #8
   2848a:	f360 03c6 	bfi	r3, r0, #3, #4
   2848e:	7053      	strb	r3, [r2, #1]
		++sp;
   28490:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   28492:	7813      	ldrb	r3, [r2, #0]
   28494:	f043 0302 	orr.w	r3, r3, #2
   28498:	7013      	strb	r3, [r2, #0]
		break;
   2849a:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   2849c:	7853      	ldrb	r3, [r2, #1]
   2849e:	f36f 03c6 	bfc	r3, #3, #4
   284a2:	7053      	strb	r3, [r2, #1]
		break;
   284a4:	4608      	mov	r0, r1
}
   284a6:	4770      	bx	lr

000284a8 <extract_specifier>:
{
   284a8:	b500      	push	{lr}
   284aa:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   284ac:	4608      	mov	r0, r1
   284ae:	f810 3b01 	ldrb.w	r3, [r0], #1
   284b2:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   284b4:	2b78      	cmp	r3, #120	; 0x78
   284b6:	d817      	bhi.n	284e8 <extract_specifier+0x40>
   284b8:	2b6e      	cmp	r3, #110	; 0x6e
   284ba:	d245      	bcs.n	28548 <extract_specifier+0xa0>
   284bc:	2b69      	cmp	r3, #105	; 0x69
   284be:	d813      	bhi.n	284e8 <extract_specifier+0x40>
   284c0:	2b58      	cmp	r3, #88	; 0x58
   284c2:	d317      	bcc.n	284f4 <extract_specifier+0x4c>
   284c4:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   284c8:	fa5f fc8c 	uxtb.w	ip, ip
   284cc:	2101      	movs	r1, #1
   284ce:	fa01 f10c 	lsl.w	r1, r1, ip
   284d2:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   284d6:	d115      	bne.n	28504 <extract_specifier+0x5c>
   284d8:	f640 0c01 	movw	ip, #2049	; 0x801
   284dc:	ea11 0f0c 	tst.w	r1, ip
   284e0:	d171      	bne.n	285c6 <extract_specifier+0x11e>
   284e2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   284e6:	d156      	bne.n	28596 <extract_specifier+0xee>
		conv->invalid = true;
   284e8:	7813      	ldrb	r3, [r2, #0]
   284ea:	f043 0301 	orr.w	r3, r3, #1
   284ee:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   284f0:	2100      	movs	r1, #0
		break;
   284f2:	e05e      	b.n	285b2 <extract_specifier+0x10a>
	switch (conv->specifier) {
   284f4:	2b41      	cmp	r3, #65	; 0x41
   284f6:	d005      	beq.n	28504 <extract_specifier+0x5c>
   284f8:	d3f6      	bcc.n	284e8 <extract_specifier+0x40>
   284fa:	f1a3 0145 	sub.w	r1, r3, #69	; 0x45
   284fe:	b2c9      	uxtb	r1, r1
   28500:	2902      	cmp	r1, #2
   28502:	d8f1      	bhi.n	284e8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   28504:	7891      	ldrb	r1, [r2, #2]
   28506:	f04f 0c04 	mov.w	ip, #4
   2850a:	f36c 0102 	bfi	r1, ip, #0, #3
   2850e:	7091      	strb	r1, [r2, #2]
			|| (conv->specifier == 'A');
   28510:	2b61      	cmp	r3, #97	; 0x61
   28512:	d06c      	beq.n	285ee <extract_specifier+0x146>
   28514:	2b41      	cmp	r3, #65	; 0x41
   28516:	d068      	beq.n	285ea <extract_specifier+0x142>
   28518:	2100      	movs	r1, #0
		conv->specifier_a = (conv->specifier == 'a')
   2851a:	7853      	ldrb	r3, [r2, #1]
   2851c:	f361 13c7 	bfi	r3, r1, #7, #1
   28520:	7053      	strb	r3, [r2, #1]
		if (conv->specifier_a
   28522:	b2db      	uxtb	r3, r3
   28524:	f992 1001 	ldrsb.w	r1, [r2, #1]
   28528:	2900      	cmp	r1, #0
   2852a:	db74      	blt.n	28616 <extract_specifier+0x16e>
		if (conv->length_mod == LENGTH_L) {
   2852c:	f003 0378 	and.w	r3, r3, #120	; 0x78
   28530:	2b18      	cmp	r3, #24
   28532:	d05e      	beq.n	285f2 <extract_specifier+0x14a>
		} else if ((conv->length_mod != LENGTH_NONE)
   28534:	2b00      	cmp	r3, #0
   28536:	d070      	beq.n	2861a <extract_specifier+0x172>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
   28538:	2b40      	cmp	r3, #64	; 0x40
   2853a:	d070      	beq.n	2861e <extract_specifier+0x176>
			conv->invalid = true;
   2853c:	7813      	ldrb	r3, [r2, #0]
   2853e:	f043 0301 	orr.w	r3, r3, #1
   28542:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   28544:	2100      	movs	r1, #0
   28546:	e034      	b.n	285b2 <extract_specifier+0x10a>
	switch (conv->specifier) {
   28548:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   2854c:	b2c9      	uxtb	r1, r1
   2854e:	f04f 0c01 	mov.w	ip, #1
   28552:	fa0c fc01 	lsl.w	ip, ip, r1
   28556:	f240 4182 	movw	r1, #1154	; 0x482
   2855a:	ea1c 0f01 	tst.w	ip, r1
   2855e:	bf14      	ite	ne
   28560:	f04f 0e01 	movne.w	lr, #1
   28564:	f04f 0e00 	moveq.w	lr, #0
   28568:	d12d      	bne.n	285c6 <extract_specifier+0x11e>
   2856a:	f01c 0f24 	tst.w	ip, #36	; 0x24
   2856e:	bf14      	ite	ne
   28570:	2101      	movne	r1, #1
   28572:	2100      	moveq	r1, #0
   28574:	d143      	bne.n	285fe <extract_specifier+0x156>
   28576:	f01c 0c01 	ands.w	ip, ip, #1
   2857a:	d0b5      	beq.n	284e8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   2857c:	7893      	ldrb	r3, [r2, #2]
   2857e:	f04f 0e03 	mov.w	lr, #3
   28582:	f36e 0302 	bfi	r3, lr, #0, #3
   28586:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   28588:	7853      	ldrb	r3, [r2, #1]
   2858a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   2858e:	2b40      	cmp	r3, #64	; 0x40
   28590:	d10f      	bne.n	285b2 <extract_specifier+0x10a>
			unsupported = true;
   28592:	4661      	mov	r1, ip
   28594:	e00d      	b.n	285b2 <extract_specifier+0x10a>
		conv->specifier_cat = SPECIFIER_SINT;
   28596:	7891      	ldrb	r1, [r2, #2]
   28598:	f04f 0c01 	mov.w	ip, #1
   2859c:	f36c 0102 	bfi	r1, ip, #0, #3
   285a0:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   285a2:	7851      	ldrb	r1, [r2, #1]
   285a4:	f001 0178 	and.w	r1, r1, #120	; 0x78
   285a8:	2940      	cmp	r1, #64	; 0x40
   285aa:	d013      	beq.n	285d4 <extract_specifier+0x12c>
		if (conv->specifier == 'c') {
   285ac:	2b63      	cmp	r3, #99	; 0x63
   285ae:	d018      	beq.n	285e2 <extract_specifier+0x13a>
	bool unsupported = false;
   285b0:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   285b2:	7813      	ldrb	r3, [r2, #0]
   285b4:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   285b8:	ea41 010c 	orr.w	r1, r1, ip
   285bc:	f361 0341 	bfi	r3, r1, #1, #1
   285c0:	7013      	strb	r3, [r2, #0]
}
   285c2:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   285c6:	7891      	ldrb	r1, [r2, #2]
   285c8:	f04f 0c02 	mov.w	ip, #2
   285cc:	f36c 0102 	bfi	r1, ip, #0, #3
   285d0:	7091      	strb	r1, [r2, #2]
   285d2:	e7e6      	b.n	285a2 <extract_specifier+0xfa>
			conv->invalid = true;
   285d4:	f892 c000 	ldrb.w	ip, [r2]
   285d8:	f04c 0c01 	orr.w	ip, ip, #1
   285dc:	f882 c000 	strb.w	ip, [r2]
   285e0:	e7e4      	b.n	285ac <extract_specifier+0x104>
			unsupported = (conv->length_mod != LENGTH_NONE);
   285e2:	3900      	subs	r1, #0
   285e4:	bf18      	it	ne
   285e6:	2101      	movne	r1, #1
   285e8:	e7e3      	b.n	285b2 <extract_specifier+0x10a>
			|| (conv->specifier == 'A');
   285ea:	2101      	movs	r1, #1
   285ec:	e795      	b.n	2851a <extract_specifier+0x72>
   285ee:	2101      	movs	r1, #1
   285f0:	e793      	b.n	2851a <extract_specifier+0x72>
			conv->length_mod = LENGTH_NONE;
   285f2:	7853      	ldrb	r3, [r2, #1]
   285f4:	f36f 03c6 	bfc	r3, #3, #4
   285f8:	7053      	strb	r3, [r2, #1]
	bool unsupported = false;
   285fa:	2100      	movs	r1, #0
   285fc:	e7d9      	b.n	285b2 <extract_specifier+0x10a>
		conv->specifier_cat = SPECIFIER_PTR;
   285fe:	7893      	ldrb	r3, [r2, #2]
   28600:	f04f 0c03 	mov.w	ip, #3
   28604:	f36c 0302 	bfi	r3, ip, #0, #3
   28608:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   2860a:	7853      	ldrb	r3, [r2, #1]
   2860c:	f013 0f78 	tst.w	r3, #120	; 0x78
   28610:	d1cf      	bne.n	285b2 <extract_specifier+0x10a>
	bool unsupported = false;
   28612:	4671      	mov	r1, lr
   28614:	e7cd      	b.n	285b2 <extract_specifier+0x10a>
			unsupported = true;
   28616:	2101      	movs	r1, #1
   28618:	e7cb      	b.n	285b2 <extract_specifier+0x10a>
	bool unsupported = false;
   2861a:	2100      	movs	r1, #0
   2861c:	e7c9      	b.n	285b2 <extract_specifier+0x10a>
   2861e:	2100      	movs	r1, #0
   28620:	e7c7      	b.n	285b2 <extract_specifier+0x10a>

00028622 <extract_conversion>:
{
   28622:	b510      	push	{r4, lr}
   28624:	4604      	mov	r4, r0
   28626:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   28628:	2300      	movs	r3, #0
   2862a:	6023      	str	r3, [r4, #0]
   2862c:	6063      	str	r3, [r4, #4]
   2862e:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   28630:	784b      	ldrb	r3, [r1, #1]
   28632:	2b25      	cmp	r3, #37	; 0x25
   28634:	d014      	beq.n	28660 <extract_conversion+0x3e>
   28636:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   28638:	4620      	mov	r0, r4
   2863a:	f7ea fc4d 	bl	12ed8 <extract_flags>
   2863e:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   28640:	4620      	mov	r0, r4
   28642:	f7ff fe69 	bl	28318 <extract_width>
   28646:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   28648:	4620      	mov	r0, r4
   2864a:	f7ff fe94 	bl	28376 <extract_prec>
   2864e:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   28650:	4620      	mov	r0, r4
   28652:	f7ff fec2 	bl	283da <extract_length>
   28656:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   28658:	4620      	mov	r0, r4
   2865a:	f7ff ff25 	bl	284a8 <extract_specifier>
}
   2865e:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   28660:	3002      	adds	r0, #2
   28662:	70e3      	strb	r3, [r4, #3]
		return sp;
   28664:	e7fb      	b.n	2865e <extract_conversion+0x3c>

00028666 <_ldiv5>:
{
   28666:	b500      	push	{lr}
	uint32_t v_lo = *v;
   28668:	6802      	ldr	r2, [r0, #0]
   2866a:	6841      	ldr	r1, [r0, #4]
	__asm__ ("" : "+r" (m));
   2866c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
   28670:	469e      	mov	lr, r3
	result += (uint64_t)v_lo * m;
   28672:	fba2 2c03 	umull	r2, ip, r2, r3
   28676:	eb12 0e0e 	adds.w	lr, r2, lr
   2867a:	eb43 0e0c 	adc.w	lr, r3, ip
	result += (uint64_t)v_lo * m;
   2867e:	eb12 020e 	adds.w	r2, r2, lr
   28682:	f14c 0c00 	adc.w	ip, ip, #0
	result += (uint64_t)v_hi * m;
   28686:	fba1 1303 	umull	r1, r3, r1, r3
   2868a:	188a      	adds	r2, r1, r2
   2868c:	eb43 020c 	adc.w	r2, r3, ip
	result += (uint64_t)v_hi * m;
   28690:	1889      	adds	r1, r1, r2
   28692:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   28696:	6001      	str	r1, [r0, #0]
   28698:	6043      	str	r3, [r0, #4]
}
   2869a:	f85d fb04 	ldr.w	pc, [sp], #4

0002869e <_ldiv10>:
{
   2869e:	b508      	push	{r3, lr}
	*v >>= 1;
   286a0:	6802      	ldr	r2, [r0, #0]
   286a2:	6841      	ldr	r1, [r0, #4]
   286a4:	0852      	lsrs	r2, r2, #1
   286a6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   286aa:	0849      	lsrs	r1, r1, #1
   286ac:	6002      	str	r2, [r0, #0]
   286ae:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
   286b0:	f7ff ffd9 	bl	28666 <_ldiv5>
}
   286b4:	bd08      	pop	{r3, pc}

000286b6 <_get_digit>:
{
   286b6:	4684      	mov	ip, r0
	if (*digit_count > 0) {
   286b8:	680b      	ldr	r3, [r1, #0]
   286ba:	2b00      	cmp	r3, #0
   286bc:	dd17      	ble.n	286ee <_get_digit+0x38>
		--*digit_count;
   286be:	3b01      	subs	r3, #1
   286c0:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   286c2:	6801      	ldr	r1, [r0, #0]
   286c4:	6843      	ldr	r3, [r0, #4]
   286c6:	0098      	lsls	r0, r3, #2
   286c8:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
   286cc:	008a      	lsls	r2, r1, #2
   286ce:	1852      	adds	r2, r2, r1
   286d0:	eb43 0300 	adc.w	r3, r3, r0
   286d4:	1892      	adds	r2, r2, r2
   286d6:	415b      	adcs	r3, r3
   286d8:	f8cc 2000 	str.w	r2, [ip]
   286dc:	f8cc 3004 	str.w	r3, [ip, #4]
		rval = ((*fr >> 60) & 0xF) + '0';
   286e0:	0f18      	lsrs	r0, r3, #28
   286e2:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
   286e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   286e8:	f8cc 3004 	str.w	r3, [ip, #4]
   286ec:	4770      	bx	lr
		rval = '0';
   286ee:	2030      	movs	r0, #48	; 0x30
}
   286f0:	4770      	bx	lr

000286f2 <conversion_radix>:
	switch (specifier) {
   286f2:	286f      	cmp	r0, #111	; 0x6f
   286f4:	d00c      	beq.n	28710 <conversion_radix+0x1e>
   286f6:	d905      	bls.n	28704 <conversion_radix+0x12>
   286f8:	2870      	cmp	r0, #112	; 0x70
   286fa:	d00b      	beq.n	28714 <conversion_radix+0x22>
   286fc:	2878      	cmp	r0, #120	; 0x78
   286fe:	d10b      	bne.n	28718 <conversion_radix+0x26>
		return 16;
   28700:	2010      	movs	r0, #16
   28702:	4770      	bx	lr
	switch (specifier) {
   28704:	2858      	cmp	r0, #88	; 0x58
   28706:	d001      	beq.n	2870c <conversion_radix+0x1a>
   28708:	200a      	movs	r0, #10
   2870a:	4770      	bx	lr
		return 16;
   2870c:	2010      	movs	r0, #16
   2870e:	4770      	bx	lr
		return 8;
   28710:	2008      	movs	r0, #8
   28712:	4770      	bx	lr
		return 16;
   28714:	2010      	movs	r0, #16
   28716:	4770      	bx	lr
	switch (specifier) {
   28718:	200a      	movs	r0, #10
}
   2871a:	4770      	bx	lr

0002871c <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   2871c:	7843      	ldrb	r3, [r0, #1]
   2871e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   28722:	2b07      	cmp	r3, #7
   28724:	d818      	bhi.n	28758 <store_count+0x3c>
   28726:	e8df f003 	tbb	[pc, r3]
   2872a:	0604      	.short	0x0604
   2872c:	100c0a08 	.word	0x100c0a08
   28730:	1614      	.short	0x1614
		*(int *)dp = count;
   28732:	600a      	str	r2, [r1, #0]
		break;
   28734:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   28736:	700a      	strb	r2, [r1, #0]
		break;
   28738:	4770      	bx	lr
		*(short *)dp = (short)count;
   2873a:	800a      	strh	r2, [r1, #0]
		break;
   2873c:	4770      	bx	lr
		*(long *)dp = (long)count;
   2873e:	600a      	str	r2, [r1, #0]
		break;
   28740:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   28742:	17d3      	asrs	r3, r2, #31
   28744:	600a      	str	r2, [r1, #0]
   28746:	604b      	str	r3, [r1, #4]
		break;
   28748:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   2874a:	17d3      	asrs	r3, r2, #31
   2874c:	600a      	str	r2, [r1, #0]
   2874e:	604b      	str	r3, [r1, #4]
		break;
   28750:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   28752:	600a      	str	r2, [r1, #0]
		break;
   28754:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   28756:	600a      	str	r2, [r1, #0]
}
   28758:	4770      	bx	lr

0002875a <outs>:
{
   2875a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2875e:	4607      	mov	r7, r0
   28760:	460e      	mov	r6, r1
   28762:	4614      	mov	r4, r2
   28764:	4698      	mov	r8, r3
	size_t count = 0;
   28766:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28768:	e006      	b.n	28778 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   2876a:	4631      	mov	r1, r6
   2876c:	f814 0b01 	ldrb.w	r0, [r4], #1
   28770:	47b8      	blx	r7
		if (rc < 0) {
   28772:	2800      	cmp	r0, #0
   28774:	db09      	blt.n	2878a <outs+0x30>
		++count;
   28776:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28778:	4544      	cmp	r4, r8
   2877a:	d3f6      	bcc.n	2876a <outs+0x10>
   2877c:	f1b8 0f00 	cmp.w	r8, #0
   28780:	d102      	bne.n	28788 <outs+0x2e>
   28782:	7823      	ldrb	r3, [r4, #0]
   28784:	2b00      	cmp	r3, #0
   28786:	d1f0      	bne.n	2876a <outs+0x10>
	return (int)count;
   28788:	4628      	mov	r0, r5
}
   2878a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002878e <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   2878e:	b40f      	push	{r0, r1, r2, r3}
   28790:	b500      	push	{lr}
   28792:	b083      	sub	sp, #12
   28794:	a904      	add	r1, sp, #16
   28796:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2879a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2879c:	f7ff f9f6 	bl	27b8c <vprintk>

	va_end(ap);
}
   287a0:	b003      	add	sp, #12
   287a2:	f85d eb04 	ldr.w	lr, [sp], #4
   287a6:	b004      	add	sp, #16
   287a8:	4770      	bx	lr

000287aa <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   287aa:	68c3      	ldr	r3, [r0, #12]
   287ac:	6802      	ldr	r2, [r0, #0]
   287ae:	4293      	cmp	r3, r2
   287b0:	d805      	bhi.n	287be <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
   287b2:	b14b      	cbz	r3, 287c8 <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
   287b4:	6a03      	ldr	r3, [r0, #32]
   287b6:	1a9b      	subs	r3, r3, r2
   287b8:	600b      	str	r3, [r1, #0]

	return true;
   287ba:	2001      	movs	r0, #1
}
   287bc:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   287be:	1a9b      	subs	r3, r3, r2
   287c0:	3b01      	subs	r3, #1
   287c2:	600b      	str	r3, [r1, #0]
		return false;
   287c4:	2000      	movs	r0, #0
   287c6:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   287c8:	6a03      	ldr	r3, [r0, #32]
   287ca:	1a9b      	subs	r3, r3, r2
   287cc:	3b01      	subs	r3, #1
   287ce:	600b      	str	r3, [r1, #0]
		return false;
   287d0:	2000      	movs	r0, #0
   287d2:	4770      	bx	lr

000287d4 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   287d4:	b510      	push	{r4, lr}
   287d6:	b082      	sub	sp, #8
   287d8:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
   287da:	a901      	add	r1, sp, #4
   287dc:	f7ff ffe5 	bl	287aa <free_space>
   287e0:	b120      	cbz	r0, 287ec <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   287e2:	68e3      	ldr	r3, [r4, #12]
   287e4:	9a01      	ldr	r2, [sp, #4]
   287e6:	4413      	add	r3, r2
   287e8:	3b01      	subs	r3, #1
   287ea:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   287ec:	6a20      	ldr	r0, [r4, #32]
   287ee:	9b01      	ldr	r3, [sp, #4]
   287f0:	1ac0      	subs	r0, r0, r3
}
   287f2:	3801      	subs	r0, #1
   287f4:	b002      	add	sp, #8
   287f6:	bd10      	pop	{r4, pc}

000287f8 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
   287f8:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   287fa:	6903      	ldr	r3, [r0, #16]
   287fc:	f013 0f04 	tst.w	r3, #4
   28800:	d100      	bne.n	28804 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
   28802:	bd38      	pop	{r3, r4, r5, pc}
   28804:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   28806:	6a45      	ldr	r5, [r0, #36]	; 0x24
   28808:	f7ff ffe4 	bl	287d4 <get_usage>
   2880c:	4285      	cmp	r5, r0
   2880e:	d902      	bls.n	28816 <max_utilization_update+0x1e>
   28810:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28812:	6260      	str	r0, [r4, #36]	; 0x24
   28814:	e7f5      	b.n	28802 <max_utilization_update+0xa>
   28816:	4620      	mov	r0, r4
   28818:	f7ff ffdc 	bl	287d4 <get_usage>
   2881c:	e7f9      	b.n	28812 <max_utilization_update+0x1a>

0002881e <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2881e:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   28820:	2300      	movs	r3, #0
   28822:	f36f 0300 	bfc	r3, #0, #1
   28826:	f043 0302 	orr.w	r3, r3, #2
   2882a:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2882e:	69c2      	ldr	r2, [r0, #28]
   28830:	6804      	ldr	r4, [r0, #0]
   28832:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28836:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   28838:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2883a:	6902      	ldr	r2, [r0, #16]
   2883c:	f012 0201 	ands.w	r2, r2, #1
   28840:	d104      	bne.n	2884c <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   28842:	6a04      	ldr	r4, [r0, #32]
   28844:	42a3      	cmp	r3, r4
   28846:	d304      	bcc.n	28852 <add_skip_item+0x34>
   28848:	1b1b      	subs	r3, r3, r4
   2884a:	e002      	b.n	28852 <add_skip_item+0x34>
		return i & (buffer->size - 1);
   2884c:	6a04      	ldr	r4, [r0, #32]
   2884e:	3c01      	subs	r4, #1
   28850:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28852:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28854:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   28856:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28858:	b922      	cbnz	r2, 28864 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   2885a:	6a03      	ldr	r3, [r0, #32]
   2885c:	4299      	cmp	r1, r3
   2885e:	d304      	bcc.n	2886a <add_skip_item+0x4c>
   28860:	1ac9      	subs	r1, r1, r3
   28862:	e002      	b.n	2886a <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   28864:	6a03      	ldr	r3, [r0, #32]
   28866:	3b01      	subs	r3, #1
   28868:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2886a:	6041      	str	r1, [r0, #4]
}
   2886c:	f85d 4b04 	ldr.w	r4, [sp], #4
   28870:	4770      	bx	lr

00028872 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   28872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28876:	b083      	sub	sp, #12
   28878:	4604      	mov	r4, r0
   2887a:	9101      	str	r1, [sp, #4]
   2887c:	4615      	mov	r5, r2
   2887e:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   28880:	2300      	movs	r3, #0
   28882:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   28884:	f8d0 801c 	ldr.w	r8, [r0, #28]
   28888:	f8d0 900c 	ldr.w	r9, [r0, #12]
   2888c:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   28890:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   28894:	f003 0303 	and.w	r3, r3, #3
   28898:	2b02      	cmp	r3, #2
   2889a:	d012      	beq.n	288c2 <drop_item_locked+0x50>
	return 0;
   2889c:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   288a0:	69a3      	ldr	r3, [r4, #24]
   288a2:	4650      	mov	r0, sl
   288a4:	4798      	blx	r3
   288a6:	4607      	mov	r7, r0
	if (skip_wlen) {
   288a8:	f1bb 0f00 	cmp.w	fp, #0
   288ac:	d152      	bne.n	28954 <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
   288ae:	2d00      	cmp	r5, #0
   288b0:	d05d      	beq.n	2896e <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   288b2:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   288b6:	f013 0f02 	tst.w	r3, #2
   288ba:	d10a      	bne.n	288d2 <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
   288bc:	2301      	movs	r3, #1
   288be:	7033      	strb	r3, [r6, #0]
   288c0:	e049      	b.n	28956 <drop_item_locked+0xe4>
		return item->skip.len;
   288c2:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   288c6:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   288ca:	d0e9      	beq.n	288a0 <drop_item_locked+0x2e>
		return item->skip.len;
   288cc:	465f      	mov	r7, fp
		allow_drop = true;
   288ce:	2501      	movs	r5, #1
   288d0:	e041      	b.n	28956 <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   288d2:	9901      	ldr	r1, [sp, #4]
   288d4:	3101      	adds	r1, #1
   288d6:	4620      	mov	r0, r4
   288d8:	f7ff ffa1 	bl	2881e <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   288dc:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   288de:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   288e0:	6922      	ldr	r2, [r4, #16]
   288e2:	f012 0201 	ands.w	r2, r2, #1
   288e6:	d104      	bne.n	288f2 <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   288e8:	6a21      	ldr	r1, [r4, #32]
   288ea:	428b      	cmp	r3, r1
   288ec:	d304      	bcc.n	288f8 <drop_item_locked+0x86>
   288ee:	1a5b      	subs	r3, r3, r1
   288f0:	e002      	b.n	288f8 <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   288f2:	6a21      	ldr	r1, [r4, #32]
   288f4:	3901      	subs	r1, #1
   288f6:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   288f8:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   288fa:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   288fc:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   288fe:	b922      	cbnz	r2, 2890a <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   28900:	6a21      	ldr	r1, [r4, #32]
   28902:	428b      	cmp	r3, r1
   28904:	d304      	bcc.n	28910 <drop_item_locked+0x9e>
   28906:	1a5b      	subs	r3, r3, r1
   28908:	e002      	b.n	28910 <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   2890a:	6a21      	ldr	r1, [r4, #32]
   2890c:	3901      	subs	r1, #1
   2890e:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   28910:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   28912:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   28914:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28916:	b922      	cbnz	r2, 28922 <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   28918:	6a22      	ldr	r2, [r4, #32]
   2891a:	4293      	cmp	r3, r2
   2891c:	d304      	bcc.n	28928 <drop_item_locked+0xb6>
   2891e:	1a9b      	subs	r3, r3, r2
   28920:	e002      	b.n	28928 <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   28922:	6a22      	ldr	r2, [r4, #32]
   28924:	3a01      	subs	r2, #1
   28926:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   28928:	69e1      	ldr	r1, [r4, #28]
   2892a:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2892e:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   28932:	f002 0203 	and.w	r2, r2, #3
   28936:	2a02      	cmp	r2, #2
   28938:	d006      	beq.n	28948 <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   2893a:	69a3      	ldr	r3, [r4, #24]
   2893c:	4650      	mov	r0, sl
   2893e:	4798      	blx	r3
   28940:	4407      	add	r7, r0
				*user_packet = true;
   28942:	2301      	movs	r3, #1
   28944:	7033      	strb	r3, [r6, #0]
   28946:	e006      	b.n	28956 <drop_item_locked+0xe4>
		return item->skip.len;
   28948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   2894c:	089b      	lsrs	r3, r3, #2
   2894e:	d0f4      	beq.n	2893a <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   28950:	441f      	add	r7, r3
   28952:	e000      	b.n	28956 <drop_item_locked+0xe4>
		allow_drop = true;
   28954:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
   28956:	b195      	cbz	r5, 2897e <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   28958:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   2895a:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2895c:	6922      	ldr	r2, [r4, #16]
   2895e:	f012 0f01 	tst.w	r2, #1
   28962:	d107      	bne.n	28974 <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   28964:	6a22      	ldr	r2, [r4, #32]
   28966:	4293      	cmp	r3, r2
   28968:	d307      	bcc.n	2897a <drop_item_locked+0x108>
   2896a:	1a9b      	subs	r3, r3, r2
   2896c:	e005      	b.n	2897a <drop_item_locked+0x108>
		item = NULL;
   2896e:	f04f 0a00 	mov.w	sl, #0
   28972:	e7f0      	b.n	28956 <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   28974:	6a22      	ldr	r2, [r4, #32]
   28976:	3a01      	subs	r2, #1
   28978:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2897a:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   2897c:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
   2897e:	4650      	mov	r0, sl
   28980:	b003      	add	sp, #12
   28982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028986 <mpsc_pbuf_init>:
{
   28986:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   28988:	2300      	movs	r3, #0
   2898a:	6003      	str	r3, [r0, #0]
   2898c:	6043      	str	r3, [r0, #4]
   2898e:	6083      	str	r3, [r0, #8]
   28990:	60c3      	str	r3, [r0, #12]
   28992:	6103      	str	r3, [r0, #16]
   28994:	6143      	str	r3, [r0, #20]
   28996:	6183      	str	r3, [r0, #24]
	buffer->get_wlen = cfg->get_wlen;
   28998:	68ca      	ldr	r2, [r1, #12]
   2899a:	6182      	str	r2, [r0, #24]
	buffer->notify_drop = cfg->notify_drop;
   2899c:	688a      	ldr	r2, [r1, #8]
   2899e:	6142      	str	r2, [r0, #20]
	buffer->buf = cfg->buf;
   289a0:	680a      	ldr	r2, [r1, #0]
   289a2:	61c2      	str	r2, [r0, #28]
	buffer->size = cfg->size;
   289a4:	684a      	ldr	r2, [r1, #4]
   289a6:	6202      	str	r2, [r0, #32]
	buffer->max_usage = 0;
   289a8:	6243      	str	r3, [r0, #36]	; 0x24
	buffer->flags = cfg->flags;
   289aa:	690b      	ldr	r3, [r1, #16]
   289ac:	6103      	str	r3, [r0, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   289ae:	b12a      	cbz	r2, 289bc <mpsc_pbuf_init+0x36>
   289b0:	1e51      	subs	r1, r2, #1
   289b2:	420a      	tst	r2, r1
   289b4:	d102      	bne.n	289bc <mpsc_pbuf_init+0x36>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   289b6:	f043 0301 	orr.w	r3, r3, #1
   289ba:	6103      	str	r3, [r0, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   289bc:	3028      	adds	r0, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   289be:	2201      	movs	r2, #1
   289c0:	2100      	movs	r1, #0
   289c2:	f004 fea4 	bl	2d70e <z_impl_k_sem_init>
}
   289c6:	bd08      	pop	{r3, pc}

000289c8 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   289c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289cc:	b085      	sub	sp, #20
   289ce:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   289d0:	6a03      	ldr	r3, [r0, #32]
   289d2:	3b01      	subs	r3, #1
   289d4:	428b      	cmp	r3, r1
   289d6:	d37f      	bcc.n	28ad8 <mpsc_pbuf_alloc+0x110>
   289d8:	4605      	mov	r5, r0
   289da:	460f      	mov	r7, r1
   289dc:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
   289de:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
   289e2:	46c3      	mov	fp, r8
   289e4:	e019      	b.n	28a1a <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
   289e6:	6a2a      	ldr	r2, [r5, #32]
   289e8:	3a01      	subs	r2, #1
   289ea:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   289ec:	602b      	str	r3, [r5, #0]
		cont = false;
   289ee:	2400      	movs	r4, #0
   289f0:	f386 8811 	msr	BASEPRI, r6
   289f4:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   289f8:	b16c      	cbz	r4, 28a16 <mpsc_pbuf_alloc+0x4e>
   289fa:	f1b8 0f00 	cmp.w	r8, #0
   289fe:	d00a      	beq.n	28a16 <mpsc_pbuf_alloc+0x4e>
   28a00:	f89d 300b 	ldrb.w	r3, [sp, #11]
   28a04:	b13b      	cbz	r3, 28a16 <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   28a06:	696b      	ldr	r3, [r5, #20]
   28a08:	2b00      	cmp	r3, #0
   28a0a:	d062      	beq.n	28ad2 <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
   28a0c:	4641      	mov	r1, r8
   28a0e:	4628      	mov	r0, r5
   28a10:	4798      	blx	r3
			}
			dropped_item = NULL;
   28a12:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
   28a16:	2c00      	cmp	r4, #0
   28a18:	d060      	beq.n	28adc <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
   28a1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   28a1e:	f3ef 8611 	mrs	r6, BASEPRI
   28a22:	f383 8812 	msr	BASEPRI_MAX, r3
   28a26:	f3bf 8f6f 	isb	sy
   28a2a:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
   28a2c:	a903      	add	r1, sp, #12
   28a2e:	4628      	mov	r0, r5
   28a30:	f7ff febb 	bl	287aa <free_space>
   28a34:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   28a36:	9903      	ldr	r1, [sp, #12]
   28a38:	42b9      	cmp	r1, r7
   28a3a:	d319      	bcc.n	28a70 <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   28a3c:	69eb      	ldr	r3, [r5, #28]
   28a3e:	682a      	ldr	r2, [r5, #0]
			item =
   28a40:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   28a44:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   28a48:	f36f 0100 	bfc	r1, #0, #1
   28a4c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   28a50:	b2c9      	uxtb	r1, r1
   28a52:	f36f 0141 	bfc	r1, #1, #1
   28a56:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   28a5a:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   28a5c:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28a5e:	692a      	ldr	r2, [r5, #16]
   28a60:	f012 0f01 	tst.w	r2, #1
   28a64:	d1bf      	bne.n	289e6 <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
   28a66:	6a2a      	ldr	r2, [r5, #32]
   28a68:	4293      	cmp	r3, r2
   28a6a:	d3bf      	bcc.n	289ec <mpsc_pbuf_alloc+0x24>
   28a6c:	1a9b      	subs	r3, r3, r2
   28a6e:	e7bd      	b.n	289ec <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
   28a70:	b9a0      	cbnz	r0, 28a9c <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   28a72:	ea5a 0309 	orrs.w	r3, sl, r9
   28a76:	d003      	beq.n	28a80 <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
   28a78:	f004 fd36 	bl	2d4e8 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   28a7c:	4604      	mov	r4, r0
   28a7e:	b188      	cbz	r0, 28aa4 <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   28a80:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   28a82:	f10d 030b 	add.w	r3, sp, #11
   28a86:	f3c2 0240 	ubfx	r2, r2, #1, #1
   28a8a:	9903      	ldr	r1, [sp, #12]
   28a8c:	4628      	mov	r0, r5
   28a8e:	f7ff fef0 	bl	28872 <drop_item_locked>
			cont = dropped_item != NULL;
   28a92:	4680      	mov	r8, r0
   28a94:	1e04      	subs	r4, r0, #0
   28a96:	bf18      	it	ne
   28a98:	2401      	movne	r4, #1
   28a9a:	e7a9      	b.n	289f0 <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
   28a9c:	4628      	mov	r0, r5
   28a9e:	f7ff febe 	bl	2881e <add_skip_item>
			cont = true;
   28aa2:	e7a5      	b.n	289f0 <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
   28aa4:	9b01      	ldr	r3, [sp, #4]
   28aa6:	f383 8811 	msr	BASEPRI, r3
   28aaa:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   28aae:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   28ab2:	464a      	mov	r2, r9
   28ab4:	4653      	mov	r3, sl
   28ab6:	f7f9 fc0f 	bl	222d8 <z_impl_k_sem_take>
	__asm__ volatile(
   28aba:	f04f 0340 	mov.w	r3, #64	; 0x40
   28abe:	f3ef 8611 	mrs	r6, BASEPRI
   28ac2:	f383 8812 	msr	BASEPRI_MAX, r3
   28ac6:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   28aca:	2800      	cmp	r0, #0
   28acc:	d190      	bne.n	289f0 <mpsc_pbuf_alloc+0x28>
				cont = true;
   28ace:	2401      	movs	r4, #1
   28ad0:	e78e      	b.n	289f0 <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
   28ad2:	f04f 0800 	mov.w	r8, #0
   28ad6:	e79e      	b.n	28a16 <mpsc_pbuf_alloc+0x4e>
		return NULL;
   28ad8:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   28adc:	4658      	mov	r0, fp
   28ade:	b005      	add	sp, #20
   28ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028ae4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   28ae4:	b570      	push	{r4, r5, r6, lr}
   28ae6:	4604      	mov	r4, r0
   28ae8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   28aea:	6983      	ldr	r3, [r0, #24]
   28aec:	4608      	mov	r0, r1
   28aee:	4798      	blx	r3
   28af0:	f04f 0340 	mov.w	r3, #64	; 0x40
   28af4:	f3ef 8611 	mrs	r6, BASEPRI
   28af8:	f383 8812 	msr	BASEPRI_MAX, r3
   28afc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   28b00:	782b      	ldrb	r3, [r5, #0]
   28b02:	f043 0301 	orr.w	r3, r3, #1
   28b06:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28b08:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   28b0a:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28b0c:	6923      	ldr	r3, [r4, #16]
   28b0e:	f013 0f01 	tst.w	r3, #1
   28b12:	d104      	bne.n	28b1e <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   28b14:	6a23      	ldr	r3, [r4, #32]
   28b16:	4298      	cmp	r0, r3
   28b18:	d304      	bcc.n	28b24 <mpsc_pbuf_commit+0x40>
   28b1a:	1ac0      	subs	r0, r0, r3
   28b1c:	e002      	b.n	28b24 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   28b1e:	6a23      	ldr	r3, [r4, #32]
   28b20:	3b01      	subs	r3, #1
   28b22:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28b24:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   28b26:	4620      	mov	r0, r4
   28b28:	f7ff fe66 	bl	287f8 <max_utilization_update>
	__asm__ volatile(
   28b2c:	f386 8811 	msr	BASEPRI, r6
   28b30:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   28b34:	bd70      	pop	{r4, r5, r6, pc}

00028b36 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   28b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28b38:	4604      	mov	r4, r0
   28b3a:	e039      	b.n	28bb0 <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   28b3c:	1a9b      	subs	r3, r3, r2
		return false;
   28b3e:	e045      	b.n	28bcc <mpsc_pbuf_claim+0x96>
		return item->skip.len;
   28b40:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   28b44:	0880      	lsrs	r0, r0, #2
   28b46:	d157      	bne.n	28bf8 <mpsc_pbuf_claim+0xc2>
   28b48:	e04d      	b.n	28be6 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
   28b4a:	6a21      	ldr	r1, [r4, #32]
   28b4c:	3901      	subs	r1, #1
   28b4e:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   28b50:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   28b52:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   28b54:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28b56:	b922      	cbnz	r2, 28b62 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
   28b58:	6a22      	ldr	r2, [r4, #32]
   28b5a:	4293      	cmp	r3, r2
   28b5c:	d304      	bcc.n	28b68 <mpsc_pbuf_claim+0x32>
   28b5e:	1a9b      	subs	r3, r3, r2
   28b60:	e002      	b.n	28b68 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
   28b62:	6a22      	ldr	r2, [r4, #32]
   28b64:	3a01      	subs	r2, #1
   28b66:	4013      	ands	r3, r2
				buffer->rd_idx =
   28b68:	60e3      	str	r3, [r4, #12]
				cont = true;
   28b6a:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   28b6c:	e01b      	b.n	28ba6 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
   28b6e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   28b72:	f043 0302 	orr.w	r3, r3, #2
   28b76:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   28b7a:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   28b7c:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   28b7e:	4630      	mov	r0, r6
   28b80:	4798      	blx	r3
	uint32_t i = idx + val;
   28b82:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28b84:	6923      	ldr	r3, [r4, #16]
   28b86:	f013 0f01 	tst.w	r3, #1
   28b8a:	d104      	bne.n	28b96 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   28b8c:	6a23      	ldr	r3, [r4, #32]
   28b8e:	4298      	cmp	r0, r3
   28b90:	d304      	bcc.n	28b9c <mpsc_pbuf_claim+0x66>
   28b92:	1ac0      	subs	r0, r0, r3
   28b94:	e002      	b.n	28b9c <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
   28b96:	6a23      	ldr	r3, [r4, #32]
   28b98:	3b01      	subs	r3, #1
   28b9a:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   28b9c:	60a0      	str	r0, [r4, #8]
		cont = false;
   28b9e:	2300      	movs	r3, #0
   28ba0:	e001      	b.n	28ba6 <mpsc_pbuf_claim+0x70>
   28ba2:	2300      	movs	r3, #0
			item = NULL;
   28ba4:	461e      	mov	r6, r3
   28ba6:	f385 8811 	msr	BASEPRI, r5
   28baa:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   28bae:	b38b      	cbz	r3, 28c14 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
   28bb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   28bb4:	f3ef 8511 	mrs	r5, BASEPRI
   28bb8:	f383 8812 	msr	BASEPRI_MAX, r3
   28bbc:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   28bc0:	68a2      	ldr	r2, [r4, #8]
   28bc2:	6863      	ldr	r3, [r4, #4]
   28bc4:	429a      	cmp	r2, r3
   28bc6:	d9b9      	bls.n	28b3c <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
   28bc8:	6a23      	ldr	r3, [r4, #32]
   28bca:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   28bcc:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
   28bce:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   28bd2:	2b00      	cmp	r3, #0
   28bd4:	d0e5      	beq.n	28ba2 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
   28bd6:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   28bda:	f013 0303 	ands.w	r3, r3, #3
   28bde:	d016      	beq.n	28c0e <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
   28be0:	2b02      	cmp	r3, #2
   28be2:	d0ad      	beq.n	28b40 <mpsc_pbuf_claim+0xa>
	return 0;
   28be4:	2000      	movs	r0, #0
	return item->hdr.valid;
   28be6:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   28bea:	f013 0f01 	tst.w	r3, #1
   28bee:	d1be      	bne.n	28b6e <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
   28bf0:	b910      	cbnz	r0, 28bf8 <mpsc_pbuf_claim+0xc2>
   28bf2:	69a3      	ldr	r3, [r4, #24]
   28bf4:	4630      	mov	r0, r6
   28bf6:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   28bf8:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   28bfa:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28bfc:	6922      	ldr	r2, [r4, #16]
   28bfe:	f012 0201 	ands.w	r2, r2, #1
   28c02:	d1a2      	bne.n	28b4a <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
   28c04:	6a21      	ldr	r1, [r4, #32]
   28c06:	428b      	cmp	r3, r1
   28c08:	d3a2      	bcc.n	28b50 <mpsc_pbuf_claim+0x1a>
   28c0a:	1a5b      	subs	r3, r3, r1
   28c0c:	e7a0      	b.n	28b50 <mpsc_pbuf_claim+0x1a>
		cont = false;
   28c0e:	2300      	movs	r3, #0
			item = NULL;
   28c10:	461e      	mov	r6, r3
   28c12:	e7c8      	b.n	28ba6 <mpsc_pbuf_claim+0x70>

	return item;
}
   28c14:	4630      	mov	r0, r6
   28c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028c18 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   28c18:	b538      	push	{r3, r4, r5, lr}
   28c1a:	4604      	mov	r4, r0
   28c1c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   28c1e:	6983      	ldr	r3, [r0, #24]
   28c20:	4608      	mov	r0, r1
   28c22:	4798      	blx	r3
   28c24:	f04f 0240 	mov.w	r2, #64	; 0x40
   28c28:	f3ef 8311 	mrs	r3, BASEPRI
   28c2c:	f382 8812 	msr	BASEPRI_MAX, r2
   28c30:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   28c34:	782a      	ldrb	r2, [r5, #0]
   28c36:	f36f 0200 	bfc	r2, #0, #1
   28c3a:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   28c3c:	6922      	ldr	r2, [r4, #16]
   28c3e:	f012 0f02 	tst.w	r2, #2
   28c42:	d00a      	beq.n	28c5a <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   28c44:	69e2      	ldr	r2, [r4, #28]
   28c46:	68e1      	ldr	r1, [r4, #12]
   28c48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   28c4c:	42aa      	cmp	r2, r5
   28c4e:	d004      	beq.n	28c5a <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   28c50:	682a      	ldr	r2, [r5, #0]
   28c52:	f360 029f 	bfi	r2, r0, #2, #30
   28c56:	602a      	str	r2, [r5, #0]
   28c58:	e012      	b.n	28c80 <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
   28c5a:	782a      	ldrb	r2, [r5, #0]
   28c5c:	f36f 0241 	bfc	r2, #1, #1
   28c60:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   28c62:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
   28c64:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28c66:	6921      	ldr	r1, [r4, #16]
   28c68:	f011 0f01 	tst.w	r1, #1
   28c6c:	d104      	bne.n	28c78 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   28c6e:	6a21      	ldr	r1, [r4, #32]
   28c70:	428a      	cmp	r2, r1
   28c72:	d304      	bcc.n	28c7e <mpsc_pbuf_free+0x66>
   28c74:	1a52      	subs	r2, r2, r1
   28c76:	e002      	b.n	28c7e <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
   28c78:	6a21      	ldr	r1, [r4, #32]
   28c7a:	3901      	subs	r1, #1
   28c7c:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   28c7e:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
   28c80:	f383 8811 	msr	BASEPRI, r3
   28c84:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   28c88:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   28c8c:	f7f9 fafc 	bl	22288 <z_impl_k_sem_give>
}
   28c90:	bd38      	pop	{r3, r4, r5, pc}

00028c92 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   28c92:	6883      	ldr	r3, [r0, #8]
   28c94:	6842      	ldr	r2, [r0, #4]
   28c96:	4293      	cmp	r3, r2
   28c98:	d905      	bls.n	28ca6 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   28c9a:	6a00      	ldr	r0, [r0, #32]
   28c9c:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   28c9e:	3800      	subs	r0, #0
   28ca0:	bf18      	it	ne
   28ca2:	2001      	movne	r0, #1
   28ca4:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   28ca6:	1ad0      	subs	r0, r2, r3
		return false;
   28ca8:	e7f9      	b.n	28c9e <mpsc_pbuf_is_pending+0xc>

00028caa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   28caa:	4770      	bx	lr

00028cac <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   28cac:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   28cae:	f013 0f04 	tst.w	r3, #4
   28cb2:	d001      	beq.n	28cb8 <log_msg_generic_get_wlen+0xc>
	return 0;
   28cb4:	2000      	movs	r0, #0
}
   28cb6:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   28cb8:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   28cba:	f3c3 2049 	ubfx	r0, r3, #9, #10
   28cbe:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   28cc2:	4418      	add	r0, r3
   28cc4:	3017      	adds	r0, #23
   28cc6:	f020 0007 	bic.w	r0, r0, #7
   28cca:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   28ccc:	4770      	bx	lr

00028cce <dummy_timestamp>:
}
   28cce:	2000      	movs	r0, #0
   28cd0:	4770      	bx	lr

00028cd2 <msg_filter_check>:
}
   28cd2:	2001      	movs	r0, #1
   28cd4:	4770      	bx	lr

00028cd6 <default_get_timestamp>:
{
   28cd6:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   28cd8:	f003 fd0d 	bl	2c6f6 <sys_clock_cycle_get_32>
}
   28cdc:	bd08      	pop	{r3, pc}

00028cde <k_msleep>:
{
   28cde:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   28ce0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   28ce4:	17c1      	asrs	r1, r0, #31
   28ce6:	03c9      	lsls	r1, r1, #15
   28ce8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   28cec:	03c0      	lsls	r0, r0, #15
   28cee:	f240 33e7 	movw	r3, #999	; 0x3e7
   28cf2:	18c0      	adds	r0, r0, r3
   28cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28cf8:	f04f 0300 	mov.w	r3, #0
   28cfc:	f141 0100 	adc.w	r1, r1, #0
   28d00:	f7d7 fe1c 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   28d04:	f7f9 ffde 	bl	22cc4 <z_impl_k_sleep>
}
   28d08:	bd08      	pop	{r3, pc}

00028d0a <msg_alloc>:
{
   28d0a:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   28d0c:	2200      	movs	r2, #0
   28d0e:	2300      	movs	r3, #0
   28d10:	f7ff fe5a 	bl	289c8 <mpsc_pbuf_alloc>
}
   28d14:	bd08      	pop	{r3, pc}

00028d16 <msg_free>:
{
   28d16:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   28d18:	f7ff ff7e 	bl	28c18 <mpsc_pbuf_free>
}
   28d1c:	bd08      	pop	{r3, pc}

00028d1e <msg_pending>:
{
   28d1e:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   28d20:	f7ff ffb7 	bl	28c92 <mpsc_pbuf_is_pending>
}
   28d24:	bd08      	pop	{r3, pc}

00028d26 <z_log_vprintk>:
{
   28d26:	b500      	push	{lr}
   28d28:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   28d2a:	9103      	str	r1, [sp, #12]
   28d2c:	9002      	str	r0, [sp, #8]
   28d2e:	2000      	movs	r0, #0
   28d30:	9001      	str	r0, [sp, #4]
   28d32:	9000      	str	r0, [sp, #0]
   28d34:	4603      	mov	r3, r0
   28d36:	4602      	mov	r2, r0
   28d38:	4601      	mov	r1, r0
   28d3a:	f000 f88b 	bl	28e54 <z_impl_z_log_msg_runtime_vcreate>
}
   28d3e:	b005      	add	sp, #20
   28d40:	f85d fb04 	ldr.w	pc, [sp], #4

00028d44 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   28d44:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   28d46:	2001      	movs	r0, #1
   28d48:	f7eb f808 	bl	13d5c <z_log_dropped>
}
   28d4c:	bd08      	pop	{r3, pc}

00028d4e <z_log_msg_claim>:
{
   28d4e:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   28d50:	f7eb f886 	bl	13e60 <z_log_msg_local_claim>
}
   28d54:	bd08      	pop	{r3, pc}

00028d56 <msg_commit>:
{
   28d56:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   28d58:	f7ff fec4 	bl	28ae4 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   28d5c:	f7eb f91e 	bl	13f9c <z_log_msg_post_finalize>
}
   28d60:	bd08      	pop	{r3, pc}

00028d62 <z_log_get_tag>:
}
   28d62:	2000      	movs	r0, #0
   28d64:	4770      	bx	lr

00028d66 <z_cbprintf_cpy>:
{
   28d66:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   28d68:	6853      	ldr	r3, [r2, #4]
   28d6a:	6896      	ldr	r6, [r2, #8]
   28d6c:	1b9b      	subs	r3, r3, r6
   28d6e:	428b      	cmp	r3, r1
   28d70:	d30c      	bcc.n	28d8c <z_cbprintf_cpy+0x26>
   28d72:	460c      	mov	r4, r1
   28d74:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   28d76:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28d78:	460a      	mov	r2, r1
   28d7a:	4601      	mov	r1, r0
   28d7c:	1998      	adds	r0, r3, r6
   28d7e:	f005 faa4 	bl	2e2ca <memcpy>
	desc->off += len;
   28d82:	68ab      	ldr	r3, [r5, #8]
   28d84:	4423      	add	r3, r4
   28d86:	60ab      	str	r3, [r5, #8]
	return len;
   28d88:	4620      	mov	r0, r4
}
   28d8a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   28d8c:	f06f 001b 	mvn.w	r0, #27
   28d90:	e7fb      	b.n	28d8a <z_cbprintf_cpy+0x24>

00028d92 <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
   28d92:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   28d94:	b190      	cbz	r0, 28dbc <z_log_msg_finalize+0x2a>
   28d96:	460e      	mov	r6, r1
   28d98:	4614      	mov	r4, r2
   28d9a:	4619      	mov	r1, r3
   28d9c:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
   28d9e:	b13b      	cbz	r3, 28db0 <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   28da0:	3010      	adds	r0, #16
   28da2:	f3c2 2349 	ubfx	r3, r2, #9, #10
   28da6:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   28daa:	4418      	add	r0, r3
   28dac:	f005 fa8d 	bl	2e2ca <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
   28db0:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   28db2:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   28db4:	4628      	mov	r0, r5
   28db6:	f7eb f935 	bl	14024 <z_log_msg_commit>
}
   28dba:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   28dbc:	f7ea ffce 	bl	13d5c <z_log_dropped>
		return;
   28dc0:	e7fb      	b.n	28dba <z_log_msg_finalize+0x28>

00028dc2 <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   28dc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28dc6:	b08a      	sub	sp, #40	; 0x28
   28dc8:	4605      	mov	r5, r0
   28dca:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   28dcc:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   28dce:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   28dd2:	b364      	cbz	r4, 28e2e <z_impl_z_log_msg_static_create+0x6c>
   28dd4:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   28dd6:	2200      	movs	r2, #0
   28dd8:	9207      	str	r2, [sp, #28]
   28dda:	9208      	str	r2, [sp, #32]
   28ddc:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   28dde:	2304      	movs	r3, #4
   28de0:	9302      	str	r3, [sp, #8]
   28de2:	ab05      	add	r3, sp, #20
   28de4:	9301      	str	r3, [sp, #4]
   28de6:	230a      	movs	r3, #10
   28de8:	9300      	str	r3, [sp, #0]
   28dea:	ab07      	add	r3, sp, #28
   28dec:	4621      	mov	r1, r4
   28dee:	4640      	mov	r0, r8
   28df0:	f7e9 fd22 	bl	12838 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   28df4:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   28df8:	f3c0 0909 	ubfx	r9, r0, #0, #10
   28dfc:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   28e00:	4449      	add	r1, r9
   28e02:	3117      	adds	r1, #23
   28e04:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   28e08:	0888      	lsrs	r0, r1, #2
   28e0a:	f7eb f821 	bl	13e50 <z_log_msg_alloc>
		if (msg) {
   28e0e:	4682      	mov	sl, r0
   28e10:	b1b8      	cbz	r0, 28e42 <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
   28e12:	2304      	movs	r3, #4
   28e14:	9302      	str	r3, [sp, #8]
   28e16:	ab05      	add	r3, sp, #20
   28e18:	9301      	str	r3, [sp, #4]
   28e1a:	230a      	movs	r3, #10
   28e1c:	9300      	str	r3, [sp, #0]
   28e1e:	464b      	mov	r3, r9
   28e20:	f100 0210 	add.w	r2, r0, #16
   28e24:	4621      	mov	r1, r4
   28e26:	4640      	mov	r0, r8
   28e28:	f7eb f970 	bl	1410c <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   28e2c:	e009      	b.n	28e42 <z_impl_z_log_msg_static_create+0x80>
   28e2e:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   28e32:	440c      	add	r4, r1
   28e34:	3417      	adds	r4, #23
   28e36:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   28e3a:	08a0      	lsrs	r0, r4, #2
   28e3c:	f7eb f808 	bl	13e50 <z_log_msg_alloc>
   28e40:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   28e42:	4633      	mov	r3, r6
   28e44:	463a      	mov	r2, r7
   28e46:	4629      	mov	r1, r5
   28e48:	4650      	mov	r0, sl
   28e4a:	f7ff ffa2 	bl	28d92 <z_log_msg_finalize>
}
   28e4e:	b00a      	add	sp, #40	; 0x28
   28e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028e54 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   28e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28e58:	b085      	sub	sp, #20
   28e5a:	4681      	mov	r9, r0
   28e5c:	460d      	mov	r5, r1
   28e5e:	4690      	mov	r8, r2
   28e60:	461e      	mov	r6, r3
   28e62:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   28e66:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   28e68:	b3b7      	cbz	r7, 28ed8 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
   28e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   28e6c:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   28e6e:	9300      	str	r3, [sp, #0]
   28e70:	463b      	mov	r3, r7
   28e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   28e74:	2110      	movs	r1, #16
   28e76:	2000      	movs	r0, #0
   28e78:	f7e9 fa8c 	bl	12394 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   28e7c:	4682      	mov	sl, r0
   28e7e:	eb00 030b 	add.w	r3, r0, fp
   28e82:	3317      	adds	r3, #23
   28e84:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   28e88:	2400      	movs	r4, #0
   28e8a:	f36f 0400 	bfc	r4, #0, #1
   28e8e:	f36f 0441 	bfc	r4, #1, #1
   28e92:	f36f 0482 	bfc	r4, #2, #1
   28e96:	f369 04c5 	bfi	r4, r9, #3, #3
   28e9a:	f368 1488 	bfi	r4, r8, #6, #3
   28e9e:	f360 2452 	bfi	r4, r0, #9, #10
   28ea2:	f36b 44de 	bfi	r4, fp, #19, #12
   28ea6:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   28eaa:	0898      	lsrs	r0, r3, #2
   28eac:	f7ea ffd0 	bl	13e50 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   28eb0:	4680      	mov	r8, r0
   28eb2:	b140      	cbz	r0, 28ec6 <z_impl_z_log_msg_runtime_vcreate+0x72>
   28eb4:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   28eb6:	b137      	cbz	r7, 28ec6 <z_impl_z_log_msg_runtime_vcreate+0x72>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   28eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   28eba:	9300      	str	r3, [sp, #0]
   28ebc:	463b      	mov	r3, r7
   28ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   28ec0:	4651      	mov	r1, sl
   28ec2:	f7e9 fa67 	bl	12394 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   28ec6:	4633      	mov	r3, r6
   28ec8:	4622      	mov	r2, r4
   28eca:	4629      	mov	r1, r5
   28ecc:	4640      	mov	r0, r8
   28ece:	f7ff ff60 	bl	28d92 <z_log_msg_finalize>
	}
}
   28ed2:	b005      	add	sp, #20
   28ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   28ed8:	2000      	movs	r0, #0
   28eda:	e7cf      	b.n	28e7c <z_impl_z_log_msg_runtime_vcreate+0x28>

00028edc <buffer_write>:
{
   28edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ede:	4607      	mov	r7, r0
   28ee0:	460d      	mov	r5, r1
   28ee2:	4614      	mov	r4, r2
   28ee4:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   28ee6:	4632      	mov	r2, r6
   28ee8:	4621      	mov	r1, r4
   28eea:	4628      	mov	r0, r5
   28eec:	47b8      	blx	r7
		buf += processed;
   28eee:	4405      	add	r5, r0
	} while (len != 0);
   28ef0:	1a24      	subs	r4, r4, r0
   28ef2:	d1f8      	bne.n	28ee6 <buffer_write+0xa>
}
   28ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028ef6 <cbvprintf>:
{
   28ef6:	b510      	push	{r4, lr}
   28ef8:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   28efa:	2400      	movs	r4, #0
   28efc:	9400      	str	r4, [sp, #0]
   28efe:	f7ea fa97 	bl	13430 <z_cbvprintf_impl>
}
   28f02:	b002      	add	sp, #8
   28f04:	bd10      	pop	{r4, pc}

00028f06 <color_prefix>:
{
   28f06:	b508      	push	{r3, lr}
   28f08:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   28f0a:	2201      	movs	r2, #1
   28f0c:	f7eb f970 	bl	141f0 <color_print>
}
   28f10:	bd08      	pop	{r3, pc}

00028f12 <color_postfix>:
{
   28f12:	b508      	push	{r3, lr}
   28f14:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   28f16:	2200      	movs	r2, #0
   28f18:	f7eb f96a 	bl	141f0 <color_print>
}
   28f1c:	bd08      	pop	{r3, pc}

00028f1e <postfix_print>:
{
   28f1e:	b538      	push	{r3, r4, r5, lr}
   28f20:	4605      	mov	r5, r0
   28f22:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   28f24:	f001 0101 	and.w	r1, r1, #1
   28f28:	f7ff fff3 	bl	28f12 <color_postfix>
	newline_print(output, flags);
   28f2c:	4621      	mov	r1, r4
   28f2e:	4628      	mov	r0, r5
   28f30:	f7eb f9e4 	bl	142fc <newline_print>
}
   28f34:	bd38      	pop	{r3, r4, r5, pc}

00028f36 <log_msg_hexdump>:
{
   28f36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f3a:	b083      	sub	sp, #12
   28f3c:	4680      	mov	r8, r0
   28f3e:	460e      	mov	r6, r1
   28f40:	4615      	mov	r5, r2
   28f42:	461f      	mov	r7, r3
   28f44:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   28f48:	462c      	mov	r4, r5
   28f4a:	2d10      	cmp	r5, #16
   28f4c:	bf28      	it	cs
   28f4e:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   28f50:	f8cd 9000 	str.w	r9, [sp]
   28f54:	463b      	mov	r3, r7
   28f56:	4622      	mov	r2, r4
   28f58:	4631      	mov	r1, r6
   28f5a:	4640      	mov	r0, r8
   28f5c:	f7eb f9e2 	bl	14324 <hexdump_line_print>
		data += length;
   28f60:	4426      	add	r6, r4
	} while (len);
   28f62:	1b2d      	subs	r5, r5, r4
   28f64:	d1f0      	bne.n	28f48 <log_msg_hexdump+0x12>
}
   28f66:	b003      	add	sp, #12
   28f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028f6c <log_output_flush>:
{
   28f6c:	b510      	push	{r4, lr}
   28f6e:	4604      	mov	r4, r0
		     output->control_block->offset,
   28f70:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   28f72:	6853      	ldr	r3, [r2, #4]
   28f74:	6812      	ldr	r2, [r2, #0]
   28f76:	6881      	ldr	r1, [r0, #8]
   28f78:	6800      	ldr	r0, [r0, #0]
   28f7a:	f7ff ffaf 	bl	28edc <buffer_write>
	output->control_block->offset = 0;
   28f7e:	6863      	ldr	r3, [r4, #4]
   28f80:	2200      	movs	r2, #0
   28f82:	601a      	str	r2, [r3, #0]
}
   28f84:	bd10      	pop	{r4, pc}

00028f86 <out_func>:
{
   28f86:	b538      	push	{r3, r4, r5, lr}
   28f88:	4605      	mov	r5, r0
   28f8a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   28f8c:	684b      	ldr	r3, [r1, #4]
   28f8e:	681a      	ldr	r2, [r3, #0]
   28f90:	68cb      	ldr	r3, [r1, #12]
   28f92:	429a      	cmp	r2, r3
   28f94:	d00f      	beq.n	28fb6 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   28f96:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   28f98:	f3bf 8f5b 	dmb	ish
   28f9c:	e853 2f00 	ldrex	r2, [r3]
   28fa0:	1c51      	adds	r1, r2, #1
   28fa2:	e843 1000 	strex	r0, r1, [r3]
   28fa6:	2800      	cmp	r0, #0
   28fa8:	d1f8      	bne.n	28f9c <out_func+0x16>
   28faa:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   28fae:	68a3      	ldr	r3, [r4, #8]
   28fb0:	549d      	strb	r5, [r3, r2]
}
   28fb2:	2000      	movs	r0, #0
   28fb4:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   28fb6:	4608      	mov	r0, r1
   28fb8:	f7ff ffd8 	bl	28f6c <log_output_flush>
   28fbc:	e7eb      	b.n	28f96 <out_func+0x10>

00028fbe <cr_out_func>:
{
   28fbe:	b538      	push	{r3, r4, r5, lr}
   28fc0:	4604      	mov	r4, r0
   28fc2:	460d      	mov	r5, r1
	if (c == '\n') {
   28fc4:	280a      	cmp	r0, #10
   28fc6:	d005      	beq.n	28fd4 <cr_out_func+0x16>
	out_func(c, ctx);
   28fc8:	4629      	mov	r1, r5
   28fca:	4620      	mov	r0, r4
   28fcc:	f7ff ffdb 	bl	28f86 <out_func>
}
   28fd0:	2000      	movs	r0, #0
   28fd2:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   28fd4:	200d      	movs	r0, #13
   28fd6:	f7ff ffd6 	bl	28f86 <out_func>
   28fda:	e7f5      	b.n	28fc8 <cr_out_func+0xa>

00028fdc <k_msleep>:
{
   28fdc:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   28fde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   28fe2:	17c1      	asrs	r1, r0, #31
   28fe4:	03c9      	lsls	r1, r1, #15
   28fe6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   28fea:	03c0      	lsls	r0, r0, #15
   28fec:	f240 33e7 	movw	r3, #999	; 0x3e7
   28ff0:	18c0      	adds	r0, r0, r3
   28ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28ff6:	f04f 0300 	mov.w	r3, #0
   28ffa:	f141 0100 	adc.w	r1, r1, #0
   28ffe:	f7d7 fc9d 	bl	93c <__aeabi_uldivmod>
   29002:	f7f9 fe5f 	bl	22cc4 <z_impl_k_sleep>
}
   29006:	bd08      	pop	{r3, pc}

00029008 <log_backend_uart_init>:
}
   29008:	4770      	bx	lr

0002900a <read_str>:
{
   2900a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2900e:	b084      	sub	sp, #16
   29010:	4605      	mov	r5, r0
   29012:	460c      	mov	r4, r1
   29014:	4616      	mov	r6, r2
   29016:	461f      	mov	r7, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   29018:	f8d1 800c 	ldr.w	r8, [r1, #12]
				 strlen(attr->user_data));
   2901c:	4640      	mov	r0, r8
   2901e:	f7e3 fd5d 	bl	cadc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   29022:	b280      	uxth	r0, r0
   29024:	9002      	str	r0, [sp, #8]
   29026:	f8cd 8004 	str.w	r8, [sp, #4]
   2902a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2902e:	9300      	str	r3, [sp, #0]
   29030:	463b      	mov	r3, r7
   29032:	4632      	mov	r2, r6
   29034:	4621      	mov	r1, r4
   29036:	4628      	mov	r0, r5
   29038:	f002 fad6 	bl	2b5e8 <bt_gatt_attr_read>
}
   2903c:	b004      	add	sp, #16
   2903e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029042 <settings_name_next>:

	return 0;
}

int settings_name_next(const char *name, const char **next)
{
   29042:	b410      	push	{r4}
   29044:	4602      	mov	r2, r0
	int rc = 0;

	if (next) {
   29046:	460c      	mov	r4, r1
   29048:	b109      	cbz	r1, 2904e <settings_name_next+0xc>
		*next = NULL;
   2904a:	2300      	movs	r3, #0
   2904c:	600b      	str	r3, [r1, #0]
	}

	if (!name) {
   2904e:	b19a      	cbz	r2, 29078 <settings_name_next+0x36>
	int rc = 0;
   29050:	2000      	movs	r0, #0

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   29052:	7813      	ldrb	r3, [r2, #0]
   29054:	b133      	cbz	r3, 29064 <settings_name_next+0x22>
   29056:	2b3d      	cmp	r3, #61	; 0x3d
   29058:	d004      	beq.n	29064 <settings_name_next+0x22>
   2905a:	2b2f      	cmp	r3, #47	; 0x2f
   2905c:	d002      	beq.n	29064 <settings_name_next+0x22>
	       (*name != SETTINGS_NAME_SEPARATOR)) {
		rc++;
   2905e:	3001      	adds	r0, #1
		name++;
   29060:	3201      	adds	r2, #1
   29062:	e7f6      	b.n	29052 <settings_name_next+0x10>
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
   29064:	2b2f      	cmp	r3, #47	; 0x2f
   29066:	d002      	beq.n	2906e <settings_name_next+0x2c>
		}
		return rc;
	}

	return rc;
}
   29068:	f85d 4b04 	ldr.w	r4, [sp], #4
   2906c:	4770      	bx	lr
		if (next) {
   2906e:	2c00      	cmp	r4, #0
   29070:	d0fa      	beq.n	29068 <settings_name_next+0x26>
			*next = name + 1;
   29072:	3201      	adds	r2, #1
   29074:	6022      	str	r2, [r4, #0]
		return rc;
   29076:	e7f7      	b.n	29068 <settings_name_next+0x26>
		return 0;
   29078:	2000      	movs	r0, #0
   2907a:	e7f5      	b.n	29068 <settings_name_next+0x26>

0002907c <atomic_test_and_clear_bit>:
{
   2907c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2907e:	f001 021f 	and.w	r2, r1, #31
   29082:	2301      	movs	r3, #1
   29084:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29086:	0949      	lsrs	r1, r1, #5
   29088:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2908c:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2908e:	f3bf 8f5b 	dmb	ish
   29092:	e850 2f00 	ldrex	r2, [r0]
   29096:	ea02 0c01 	and.w	ip, r2, r1
   2909a:	e840 ce00 	strex	lr, ip, [r0]
   2909e:	f1be 0f00 	cmp.w	lr, #0
   290a2:	d1f6      	bne.n	29092 <atomic_test_and_clear_bit+0x16>
   290a4:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   290a8:	4213      	tst	r3, r2
}
   290aa:	bf14      	ite	ne
   290ac:	2001      	movne	r0, #1
   290ae:	2000      	moveq	r0, #0
   290b0:	f85d fb04 	ldr.w	pc, [sp], #4

000290b4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   290b4:	f001 021f 	and.w	r2, r1, #31
   290b8:	2301      	movs	r3, #1
   290ba:	4093      	lsls	r3, r2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   290bc:	0949      	lsrs	r1, r1, #5
   290be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   290c2:	f3bf 8f5b 	dmb	ish
   290c6:	e850 2f00 	ldrex	r2, [r0]
   290ca:	431a      	orrs	r2, r3
   290cc:	e840 2100 	strex	r1, r2, [r0]
   290d0:	2900      	cmp	r1, #0
   290d2:	d1f8      	bne.n	290c6 <atomic_set_bit+0x12>
   290d4:	f3bf 8f5b 	dmb	ish
}
   290d8:	4770      	bx	lr

000290da <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   290da:	2000      	movs	r0, #0
   290dc:	4770      	bx	lr

000290de <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   290de:	428b      	cmp	r3, r1
   290e0:	d808      	bhi.n	290f4 <_copy+0x16>
{
   290e2:	b510      	push	{r4, lr}
   290e4:	4694      	mov	ip, r2
   290e6:	461c      	mov	r4, r3
   290e8:	461a      	mov	r2, r3
   290ea:	4661      	mov	r1, ip
   290ec:	f005 f8ed 	bl	2e2ca <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
   290f0:	4620      	mov	r0, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   290f2:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   290f4:	2000      	movs	r0, #0
}
   290f6:	4770      	bx	lr

000290f8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   290f8:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   290fa:	f005 f8f4 	bl	2e2e6 <memset>
	(void)memset(to, val, len);
}
   290fe:	bd08      	pop	{r3, pc}

00029100 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   29100:	09c3      	lsrs	r3, r0, #7
   29102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   29106:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2910a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2910e:	b2c0      	uxtb	r0, r0
   29110:	4770      	bx	lr

00029112 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   29112:	7803      	ldrb	r3, [r0, #0]
   29114:	78ca      	ldrb	r2, [r1, #3]
   29116:	4053      	eors	r3, r2
   29118:	7003      	strb	r3, [r0, #0]
   2911a:	7843      	ldrb	r3, [r0, #1]
   2911c:	788a      	ldrb	r2, [r1, #2]
   2911e:	4053      	eors	r3, r2
   29120:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   29122:	7883      	ldrb	r3, [r0, #2]
   29124:	784a      	ldrb	r2, [r1, #1]
   29126:	4053      	eors	r3, r2
   29128:	7083      	strb	r3, [r0, #2]
   2912a:	78c3      	ldrb	r3, [r0, #3]
   2912c:	780a      	ldrb	r2, [r1, #0]
   2912e:	4053      	eors	r3, r2
   29130:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   29132:	7903      	ldrb	r3, [r0, #4]
   29134:	79ca      	ldrb	r2, [r1, #7]
   29136:	4053      	eors	r3, r2
   29138:	7103      	strb	r3, [r0, #4]
   2913a:	7943      	ldrb	r3, [r0, #5]
   2913c:	798a      	ldrb	r2, [r1, #6]
   2913e:	4053      	eors	r3, r2
   29140:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   29142:	7983      	ldrb	r3, [r0, #6]
   29144:	794a      	ldrb	r2, [r1, #5]
   29146:	4053      	eors	r3, r2
   29148:	7183      	strb	r3, [r0, #6]
   2914a:	79c3      	ldrb	r3, [r0, #7]
   2914c:	790a      	ldrb	r2, [r1, #4]
   2914e:	4053      	eors	r3, r2
   29150:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   29152:	7a03      	ldrb	r3, [r0, #8]
   29154:	7aca      	ldrb	r2, [r1, #11]
   29156:	4053      	eors	r3, r2
   29158:	7203      	strb	r3, [r0, #8]
   2915a:	7a43      	ldrb	r3, [r0, #9]
   2915c:	7a8a      	ldrb	r2, [r1, #10]
   2915e:	4053      	eors	r3, r2
   29160:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   29162:	7a83      	ldrb	r3, [r0, #10]
   29164:	7a4a      	ldrb	r2, [r1, #9]
   29166:	4053      	eors	r3, r2
   29168:	7283      	strb	r3, [r0, #10]
   2916a:	7ac3      	ldrb	r3, [r0, #11]
   2916c:	7a0a      	ldrb	r2, [r1, #8]
   2916e:	4053      	eors	r3, r2
   29170:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   29172:	7b03      	ldrb	r3, [r0, #12]
   29174:	7bca      	ldrb	r2, [r1, #15]
   29176:	4053      	eors	r3, r2
   29178:	7303      	strb	r3, [r0, #12]
   2917a:	7b43      	ldrb	r3, [r0, #13]
   2917c:	7b8a      	ldrb	r2, [r1, #14]
   2917e:	4053      	eors	r3, r2
   29180:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   29182:	7b83      	ldrb	r3, [r0, #14]
   29184:	7b4a      	ldrb	r2, [r1, #13]
   29186:	4053      	eors	r3, r2
   29188:	7383      	strb	r3, [r0, #14]
   2918a:	7bc3      	ldrb	r3, [r0, #15]
   2918c:	7b0a      	ldrb	r2, [r1, #12]
   2918e:	4053      	eors	r3, r2
   29190:	73c3      	strb	r3, [r0, #15]
}
   29192:	4770      	bx	lr

00029194 <shift_rows>:
{
   29194:	b500      	push	{lr}
   29196:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   29198:	7802      	ldrb	r2, [r0, #0]
   2919a:	f88d 2000 	strb.w	r2, [sp]
   2919e:	7942      	ldrb	r2, [r0, #5]
   291a0:	f88d 2001 	strb.w	r2, [sp, #1]
   291a4:	7a82      	ldrb	r2, [r0, #10]
   291a6:	f88d 2002 	strb.w	r2, [sp, #2]
   291aa:	7bc2      	ldrb	r2, [r0, #15]
   291ac:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   291b0:	7902      	ldrb	r2, [r0, #4]
   291b2:	f88d 2004 	strb.w	r2, [sp, #4]
   291b6:	7a42      	ldrb	r2, [r0, #9]
   291b8:	f88d 2005 	strb.w	r2, [sp, #5]
   291bc:	7b82      	ldrb	r2, [r0, #14]
   291be:	f88d 2006 	strb.w	r2, [sp, #6]
   291c2:	78c2      	ldrb	r2, [r0, #3]
   291c4:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   291c8:	7a02      	ldrb	r2, [r0, #8]
   291ca:	f88d 2008 	strb.w	r2, [sp, #8]
   291ce:	7b42      	ldrb	r2, [r0, #13]
   291d0:	f88d 2009 	strb.w	r2, [sp, #9]
   291d4:	7882      	ldrb	r2, [r0, #2]
   291d6:	f88d 200a 	strb.w	r2, [sp, #10]
   291da:	79c2      	ldrb	r2, [r0, #7]
   291dc:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   291e0:	7b02      	ldrb	r2, [r0, #12]
   291e2:	f88d 200c 	strb.w	r2, [sp, #12]
   291e6:	7842      	ldrb	r2, [r0, #1]
   291e8:	f88d 200d 	strb.w	r2, [sp, #13]
   291ec:	7982      	ldrb	r2, [r0, #6]
   291ee:	f88d 200e 	strb.w	r2, [sp, #14]
   291f2:	7ac3      	ldrb	r3, [r0, #11]
   291f4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   291f8:	2310      	movs	r3, #16
   291fa:	466a      	mov	r2, sp
   291fc:	4619      	mov	r1, r3
   291fe:	f7ff ff6e 	bl	290de <_copy>
}
   29202:	b005      	add	sp, #20
   29204:	f85d fb04 	ldr.w	pc, [sp], #4

00029208 <mult_row_column>:
{
   29208:	b570      	push	{r4, r5, r6, lr}
   2920a:	4606      	mov	r6, r0
   2920c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2920e:	7808      	ldrb	r0, [r1, #0]
   29210:	f7ff ff76 	bl	29100 <_double_byte>
   29214:	4605      	mov	r5, r0
   29216:	7860      	ldrb	r0, [r4, #1]
   29218:	f7ff ff72 	bl	29100 <_double_byte>
   2921c:	7861      	ldrb	r1, [r4, #1]
   2921e:	78a2      	ldrb	r2, [r4, #2]
   29220:	78e3      	ldrb	r3, [r4, #3]
   29222:	4048      	eors	r0, r1
   29224:	4045      	eors	r5, r0
   29226:	406a      	eors	r2, r5
   29228:	4053      	eors	r3, r2
   2922a:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2922c:	7825      	ldrb	r5, [r4, #0]
   2922e:	7860      	ldrb	r0, [r4, #1]
   29230:	f7ff ff66 	bl	29100 <_double_byte>
   29234:	4045      	eors	r5, r0
   29236:	b2ed      	uxtb	r5, r5
   29238:	78a0      	ldrb	r0, [r4, #2]
   2923a:	f7ff ff61 	bl	29100 <_double_byte>
   2923e:	78a2      	ldrb	r2, [r4, #2]
   29240:	78e3      	ldrb	r3, [r4, #3]
   29242:	4050      	eors	r0, r2
   29244:	4045      	eors	r5, r0
   29246:	406b      	eors	r3, r5
   29248:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2924a:	7825      	ldrb	r5, [r4, #0]
   2924c:	7863      	ldrb	r3, [r4, #1]
   2924e:	405d      	eors	r5, r3
   29250:	78a0      	ldrb	r0, [r4, #2]
   29252:	f7ff ff55 	bl	29100 <_double_byte>
   29256:	4045      	eors	r5, r0
   29258:	b2ed      	uxtb	r5, r5
   2925a:	78e0      	ldrb	r0, [r4, #3]
   2925c:	f7ff ff50 	bl	29100 <_double_byte>
   29260:	78e3      	ldrb	r3, [r4, #3]
   29262:	4058      	eors	r0, r3
   29264:	4045      	eors	r5, r0
   29266:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   29268:	7820      	ldrb	r0, [r4, #0]
   2926a:	f7ff ff49 	bl	29100 <_double_byte>
   2926e:	7822      	ldrb	r2, [r4, #0]
   29270:	7863      	ldrb	r3, [r4, #1]
   29272:	78a5      	ldrb	r5, [r4, #2]
   29274:	4050      	eors	r0, r2
   29276:	4043      	eors	r3, r0
   29278:	405d      	eors	r5, r3
   2927a:	b2ed      	uxtb	r5, r5
   2927c:	78e0      	ldrb	r0, [r4, #3]
   2927e:	f7ff ff3f 	bl	29100 <_double_byte>
   29282:	4045      	eors	r5, r0
   29284:	70f5      	strb	r5, [r6, #3]
}
   29286:	bd70      	pop	{r4, r5, r6, pc}

00029288 <mix_columns>:
{
   29288:	b510      	push	{r4, lr}
   2928a:	b084      	sub	sp, #16
   2928c:	4604      	mov	r4, r0
	mult_row_column(t, s);
   2928e:	4601      	mov	r1, r0
   29290:	4668      	mov	r0, sp
   29292:	f7ff ffb9 	bl	29208 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   29296:	1d21      	adds	r1, r4, #4
   29298:	a801      	add	r0, sp, #4
   2929a:	f7ff ffb5 	bl	29208 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2929e:	f104 0108 	add.w	r1, r4, #8
   292a2:	a802      	add	r0, sp, #8
   292a4:	f7ff ffb0 	bl	29208 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   292a8:	f104 010c 	add.w	r1, r4, #12
   292ac:	a803      	add	r0, sp, #12
   292ae:	f7ff ffab 	bl	29208 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   292b2:	2310      	movs	r3, #16
   292b4:	466a      	mov	r2, sp
   292b6:	4619      	mov	r1, r3
   292b8:	4620      	mov	r0, r4
   292ba:	f7ff ff10 	bl	290de <_copy>
}
   292be:	b004      	add	sp, #16
   292c0:	bd10      	pop	{r4, pc}

000292c2 <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   292c2:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   292c4:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   292c8:	2a00      	cmp	r2, #0
   292ca:	db04      	blt.n	292d6 <gf_double+0x14>
   292cc:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   292d0:	f100 020f 	add.w	r2, r0, #15
   292d4:	e006      	b.n	292e4 <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   292d6:	f04f 0c87 	mov.w	ip, #135	; 0x87
   292da:	e7f9      	b.n	292d0 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   292dc:	f813 0901 	ldrb.w	r0, [r3], #-1
   292e0:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   292e4:	7818      	ldrb	r0, [r3, #0]
   292e6:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   292ea:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   292ee:	428b      	cmp	r3, r1
   292f0:	d1f4      	bne.n	292dc <gf_double+0x1a>
	}
}
   292f2:	4770      	bx	lr

000292f4 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   292f4:	b130      	cbz	r0, 29304 <tc_cmac_erase+0x10>
{
   292f6:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   292f8:	2258      	movs	r2, #88	; 0x58
   292fa:	2100      	movs	r1, #0
   292fc:	f7ff fefc 	bl	290f8 <_set>

	return TC_CRYPTO_SUCCESS;
   29300:	2001      	movs	r0, #1
}
   29302:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   29304:	2000      	movs	r0, #0
}
   29306:	4770      	bx	lr

00029308 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29308:	b1a0      	cbz	r0, 29334 <tc_cmac_init+0x2c>
{
   2930a:	b510      	push	{r4, lr}
   2930c:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2930e:	2210      	movs	r2, #16
   29310:	2100      	movs	r1, #0
   29312:	f7ff fef1 	bl	290f8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   29316:	2210      	movs	r2, #16
   29318:	2100      	movs	r1, #0
   2931a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2931e:	f7ff feeb 	bl	290f8 <_set>
	s->leftover_offset = 0;
   29322:	2300      	movs	r3, #0
   29324:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   29326:	2200      	movs	r2, #0
   29328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2932c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   29330:	2001      	movs	r0, #1
}
   29332:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   29334:	2000      	movs	r0, #0
}
   29336:	4770      	bx	lr

00029338 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   29338:	b338      	cbz	r0, 2938a <tc_cmac_setup+0x52>
{
   2933a:	b570      	push	{r4, r5, r6, lr}
   2933c:	460d      	mov	r5, r1
   2933e:	4616      	mov	r6, r2
   29340:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   29342:	b321      	cbz	r1, 2938e <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   29344:	2258      	movs	r2, #88	; 0x58
   29346:	2100      	movs	r1, #0
   29348:	f7ff fed6 	bl	290f8 <_set>
	s->sched = sched;
   2934c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2934e:	4629      	mov	r1, r5
   29350:	4630      	mov	r0, r6
   29352:	f7eb fc75 	bl	14c40 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   29356:	2210      	movs	r2, #16
   29358:	2100      	movs	r1, #0
   2935a:	4620      	mov	r0, r4
   2935c:	f7ff fecc 	bl	290f8 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   29360:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29362:	4621      	mov	r1, r4
   29364:	4620      	mov	r0, r4
   29366:	f7eb fccd 	bl	14d04 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2936a:	f104 0510 	add.w	r5, r4, #16
   2936e:	4621      	mov	r1, r4
   29370:	4628      	mov	r0, r5
   29372:	f7ff ffa6 	bl	292c2 <gf_double>
	gf_double (s->K2, s->K1);
   29376:	4629      	mov	r1, r5
   29378:	f104 0020 	add.w	r0, r4, #32
   2937c:	f7ff ffa1 	bl	292c2 <gf_double>
	tc_cmac_init(s);
   29380:	4620      	mov	r0, r4
   29382:	f7ff ffc1 	bl	29308 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   29386:	2001      	movs	r0, #1
}
   29388:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2938a:	2000      	movs	r0, #0
}
   2938c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2938e:	2000      	movs	r0, #0
   29390:	e7fa      	b.n	29388 <tc_cmac_setup+0x50>

00029392 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29392:	2800      	cmp	r0, #0
   29394:	d064      	beq.n	29460 <tc_cmac_update+0xce>
{
   29396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2939a:	460d      	mov	r5, r1
   2939c:	4616      	mov	r6, r2
   2939e:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   293a0:	2a00      	cmp	r2, #0
   293a2:	d05f      	beq.n	29464 <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   293a4:	2900      	cmp	r1, #0
   293a6:	d060      	beq.n	2946a <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   293a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
   293aa:	6d42      	ldr	r2, [r0, #84]	; 0x54
   293ac:	ea53 0102 	orrs.w	r1, r3, r2
   293b0:	d05d      	beq.n	2946e <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   293b2:	3b01      	subs	r3, #1
   293b4:	f142 32ff 	adc.w	r2, r2, #4294967295
   293b8:	6503      	str	r3, [r0, #80]	; 0x50
   293ba:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   293bc:	6c47      	ldr	r7, [r0, #68]	; 0x44
   293be:	2f00      	cmp	r7, #0
   293c0:	d03d      	beq.n	2943e <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   293c2:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   293c6:	4546      	cmp	r6, r8
   293c8:	d30d      	bcc.n	293e6 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   293ca:	f107 0030 	add.w	r0, r7, #48	; 0x30
   293ce:	4643      	mov	r3, r8
   293d0:	462a      	mov	r2, r5
   293d2:	4641      	mov	r1, r8
   293d4:	4420      	add	r0, r4
   293d6:	f7ff fe82 	bl	290de <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   293da:	3f10      	subs	r7, #16
   293dc:	443e      	add	r6, r7
		data += remaining_space;
   293de:	4445      	add	r5, r8
		s->leftover_offset = 0;
   293e0:	2300      	movs	r3, #0
   293e2:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   293e4:	e013      	b.n	2940e <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   293e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
   293ea:	4633      	mov	r3, r6
   293ec:	462a      	mov	r2, r5
   293ee:	4631      	mov	r1, r6
   293f0:	4420      	add	r0, r4
   293f2:	f7ff fe74 	bl	290de <_copy>
			s->leftover_offset += data_length;
   293f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   293f8:	4433      	add	r3, r6
   293fa:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   293fc:	2001      	movs	r0, #1
   293fe:	e032      	b.n	29466 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   29400:	5ce2      	ldrb	r2, [r4, r3]
   29402:	18e1      	adds	r1, r4, r3
   29404:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   29408:	404a      	eors	r2, r1
   2940a:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2940c:	3301      	adds	r3, #1
   2940e:	2b0f      	cmp	r3, #15
   29410:	d9f6      	bls.n	29400 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29412:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29414:	4621      	mov	r1, r4
   29416:	4620      	mov	r0, r4
   29418:	f7eb fc74 	bl	14d04 <tc_aes_encrypt>
   2941c:	e00f      	b.n	2943e <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   2941e:	5ce0      	ldrb	r0, [r4, r3]
   29420:	f815 c003 	ldrb.w	ip, [r5, r3]
   29424:	ea80 000c 	eor.w	r0, r0, ip
   29428:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2942a:	3301      	adds	r3, #1
   2942c:	2b0f      	cmp	r3, #15
   2942e:	d9f6      	bls.n	2941e <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29430:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29432:	4621      	mov	r1, r4
   29434:	4620      	mov	r0, r4
   29436:	f7eb fc65 	bl	14d04 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2943a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2943c:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   2943e:	2e10      	cmp	r6, #16
   29440:	d901      	bls.n	29446 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29442:	2300      	movs	r3, #0
   29444:	e7f2      	b.n	2942c <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   29446:	b90e      	cbnz	r6, 2944c <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   29448:	2001      	movs	r0, #1
   2944a:	e00c      	b.n	29466 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   2944c:	4633      	mov	r3, r6
   2944e:	462a      	mov	r2, r5
   29450:	4631      	mov	r1, r6
   29452:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29456:	f7ff fe42 	bl	290de <_copy>
		s->leftover_offset = data_length;
   2945a:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2945c:	2001      	movs	r0, #1
   2945e:	e002      	b.n	29466 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   29460:	2000      	movs	r0, #0
}
   29462:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   29464:	2001      	movs	r0, #1
}
   29466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2946a:	2000      	movs	r0, #0
   2946c:	e7fb      	b.n	29466 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   2946e:	2000      	movs	r0, #0
   29470:	e7f9      	b.n	29466 <tc_cmac_update+0xd4>

00029472 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29472:	b380      	cbz	r0, 294d6 <tc_cmac_final+0x64>
{
   29474:	b538      	push	{r3, r4, r5, lr}
   29476:	460c      	mov	r4, r1
   29478:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2947a:	b371      	cbz	r1, 294da <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2947c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2947e:	2a10      	cmp	r2, #16
   29480:	d103      	bne.n	2948a <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   29482:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29486:	2300      	movs	r3, #0
   29488:	e019      	b.n	294be <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2948a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2948e:	f1c2 0210 	rsb	r2, r2, #16
   29492:	2100      	movs	r1, #0
   29494:	4420      	add	r0, r4
   29496:	f7ff fe2f 	bl	290f8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2949a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2949c:	4423      	add	r3, r4
   2949e:	2280      	movs	r2, #128	; 0x80
   294a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   294a4:	f104 0c20 	add.w	ip, r4, #32
   294a8:	e7ed      	b.n	29486 <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   294aa:	5ce2      	ldrb	r2, [r4, r3]
   294ac:	18e1      	adds	r1, r4, r3
   294ae:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   294b2:	f81c 1003 	ldrb.w	r1, [ip, r3]
   294b6:	4048      	eors	r0, r1
   294b8:	4042      	eors	r2, r0
   294ba:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   294bc:	3301      	adds	r3, #1
   294be:	2b0f      	cmp	r3, #15
   294c0:	d9f3      	bls.n	294aa <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   294c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   294c4:	4621      	mov	r1, r4
   294c6:	4628      	mov	r0, r5
   294c8:	f7eb fc1c 	bl	14d04 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   294cc:	4620      	mov	r0, r4
   294ce:	f7ff ff11 	bl	292f4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   294d2:	2001      	movs	r0, #1
}
   294d4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   294d6:	2000      	movs	r0, #0
}
   294d8:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   294da:	2000      	movs	r0, #0
   294dc:	e7fa      	b.n	294d4 <tc_cmac_final+0x62>

000294de <abort_function>:
{
   294de:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   294e0:	2000      	movs	r0, #0
   294e2:	f7ea faff 	bl	13ae4 <sys_reboot>

000294e6 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   294e6:	b538      	push	{r3, r4, r5, lr}
   294e8:	4604      	mov	r4, r0

	if (esf != NULL) {
   294ea:	460d      	mov	r5, r1
   294ec:	b111      	cbz	r1, 294f4 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   294ee:	4608      	mov	r0, r1
   294f0:	f7eb fd96 	bl	15020 <esf_dump>
	}
	z_fatal_error(reason, esf);
   294f4:	4629      	mov	r1, r5
   294f6:	4620      	mov	r0, r4
   294f8:	f7f8 fa20 	bl	2193c <z_fatal_error>
}
   294fc:	bd38      	pop	{r3, r4, r5, pc}

000294fe <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   294fe:	b508      	push	{r3, lr}
   29500:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   29502:	6800      	ldr	r0, [r0, #0]
   29504:	f7ff ffef 	bl	294e6 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   29508:	bd08      	pop	{r3, pc}

0002950a <arch_irq_enable>:
{
   2950a:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   2950c:	b240      	sxtb	r0, r0
   2950e:	f7eb ff73 	bl	153f8 <__NVIC_EnableIRQ>
}
   29512:	bd08      	pop	{r3, pc}

00029514 <arch_irq_disable>:
{
   29514:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   29516:	b240      	sxtb	r0, r0
   29518:	f7eb ff7c 	bl	15414 <__NVIC_DisableIRQ>
}
   2951c:	bd08      	pop	{r3, pc}

0002951e <z_arm_irq_priority_set>:
{
   2951e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   29520:	f012 0f01 	tst.w	r2, #1
   29524:	d104      	bne.n	29530 <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   29526:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   29528:	b240      	sxtb	r0, r0
   2952a:	f7eb ff85 	bl	15438 <__NVIC_SetPriority>
}
   2952e:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   29530:	2100      	movs	r1, #0
   29532:	e7f9      	b.n	29528 <z_arm_irq_priority_set+0xa>

00029534 <z_irq_spurious>:
{
   29534:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   29536:	2100      	movs	r1, #0
   29538:	2001      	movs	r0, #1
   2953a:	f7ff ffd4 	bl	294e6 <z_arm_fatal_error>
}
   2953e:	bd08      	pop	{r3, pc}

00029540 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   29540:	b508      	push	{r3, lr}
	handler();
   29542:	f7eb ffab 	bl	1549c <z_SysNmiOnReset>
	z_arm_int_exit();
   29546:	f7ec f945 	bl	157d4 <z_arm_exc_exit>
}
   2954a:	bd08      	pop	{r3, pc}

0002954c <z_arm_prepare_switch_to_main>:
  __builtin_arm_set_fpscr(fpscr);
   2954c:	2300      	movs	r3, #0
   2954e:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   29552:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   29556:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2955a:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2955e:	f3bf 8f6f 	isb	sy
   29562:	f3bf 8f6f 	isb	sy
}
   29566:	4770      	bx	lr

00029568 <memory_fault_recoverable>:
}
   29568:	2000      	movs	r0, #0
   2956a:	4770      	bx	lr

0002956c <fault_handle>:
{
   2956c:	b508      	push	{r3, lr}
	*recoverable = false;
   2956e:	2300      	movs	r3, #0
   29570:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   29572:	1ecb      	subs	r3, r1, #3
   29574:	2b09      	cmp	r3, #9
   29576:	d81a      	bhi.n	295ae <fault_handle+0x42>
   29578:	e8df f003 	tbb	[pc, r3]
   2957c:	110d0905 	.word	0x110d0905
   29580:	19191919 	.word	0x19191919
   29584:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   29586:	4611      	mov	r1, r2
   29588:	f7ec fea2 	bl	162d0 <hard_fault>
}
   2958c:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2958e:	2100      	movs	r1, #0
   29590:	f7ec fd0c 	bl	15fac <mem_manage_fault>
		break;
   29594:	e7fa      	b.n	2958c <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   29596:	2100      	movs	r1, #0
   29598:	f7ec f98c 	bl	158b4 <bus_fault>
		break;
   2959c:	e7f6      	b.n	2958c <fault_handle+0x20>
		reason = usage_fault(esf);
   2959e:	f7ec fb1d 	bl	15bdc <usage_fault>
		break;
   295a2:	e7f3      	b.n	2958c <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   295a4:	4611      	mov	r1, r2
   295a6:	f7ec fc63 	bl	15e70 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   295aa:	2000      	movs	r0, #0
		break;
   295ac:	e7ee      	b.n	2958c <fault_handle+0x20>
		reserved_exception(esf, fault);
   295ae:	f7ec fc8f 	bl	15ed0 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   295b2:	2000      	movs	r0, #0
	return reason;
   295b4:	e7ea      	b.n	2958c <fault_handle+0x20>

000295b6 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   295b6:	6843      	ldr	r3, [r0, #4]
   295b8:	1e5a      	subs	r2, r3, #1
		&&
   295ba:	4213      	tst	r3, r2
   295bc:	d106      	bne.n	295cc <mpu_partition_is_valid+0x16>
		&&
   295be:	2b1f      	cmp	r3, #31
   295c0:	d906      	bls.n	295d0 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   295c2:	6803      	ldr	r3, [r0, #0]
		&&
   295c4:	421a      	tst	r2, r3
   295c6:	d005      	beq.n	295d4 <mpu_partition_is_valid+0x1e>
   295c8:	2000      	movs	r0, #0
   295ca:	4770      	bx	lr
   295cc:	2000      	movs	r0, #0
   295ce:	4770      	bx	lr
   295d0:	2000      	movs	r0, #0
   295d2:	4770      	bx	lr
   295d4:	2001      	movs	r0, #1
}
   295d6:	4770      	bx	lr

000295d8 <mpu_configure_region>:
{
   295d8:	b500      	push	{lr}
   295da:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   295dc:	680b      	ldr	r3, [r1, #0]
   295de:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   295e0:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   295e2:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   295e4:	2b20      	cmp	r3, #32
   295e6:	d912      	bls.n	2960e <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   295e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   295ec:	d811      	bhi.n	29612 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   295ee:	3b01      	subs	r3, #1
   295f0:	fab3 f383 	clz	r3, r3
   295f4:	f1c3 031f 	rsb	r3, r3, #31
   295f8:	005b      	lsls	r3, r3, #1
   295fa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   295fe:	4313      	orrs	r3, r2
   29600:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   29602:	a901      	add	r1, sp, #4
   29604:	f7ed f8a8 	bl	16758 <region_allocate_and_init>
}
   29608:	b005      	add	sp, #20
   2960a:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   2960e:	2308      	movs	r3, #8
   29610:	e7f5      	b.n	295fe <mpu_configure_region+0x26>
		return REGION_4G;
   29612:	233e      	movs	r3, #62	; 0x3e
   29614:	e7f3      	b.n	295fe <mpu_configure_region+0x26>

00029616 <arm_core_mpu_configure_static_mpu_regions>:
{
   29616:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   29618:	f7ed f958 	bl	168cc <mpu_configure_static_mpu_regions>
}
   2961c:	bd08      	pop	{r3, pc}

0002961e <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   2961e:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   29620:	f7ed f95e 	bl	168e0 <mpu_configure_dynamic_mpu_regions>
}
   29624:	bd08      	pop	{r3, pc}

00029626 <malloc_prepare>:
}
   29626:	2000      	movs	r0, #0
   29628:	4770      	bx	lr

0002962a <_stdout_hook_default>:
}
   2962a:	f04f 30ff 	mov.w	r0, #4294967295
   2962e:	4770      	bx	lr

00029630 <_stdin_hook_default>:
}
   29630:	2000      	movs	r0, #0
   29632:	4770      	bx	lr

00029634 <_read>:
{
   29634:	b508      	push	{r3, lr}
   29636:	4608      	mov	r0, r1
   29638:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2963a:	f7ed f9a9 	bl	16990 <z_impl_zephyr_read_stdin>
}
   2963e:	bd08      	pop	{r3, pc}

00029640 <_write>:
{
   29640:	b508      	push	{r3, lr}
   29642:	4608      	mov	r0, r1
   29644:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   29646:	f7ed f9b9 	bl	169bc <z_impl_zephyr_write_stdout>
}
   2964a:	bd08      	pop	{r3, pc}

0002964c <_close>:
}
   2964c:	f04f 30ff 	mov.w	r0, #4294967295
   29650:	4770      	bx	lr

00029652 <_lseek>:
}
   29652:	2000      	movs	r0, #0
   29654:	4770      	bx	lr

00029656 <_isatty>:
}
   29656:	2802      	cmp	r0, #2
   29658:	bfcc      	ite	gt
   2965a:	2000      	movgt	r0, #0
   2965c:	2001      	movle	r0, #1
   2965e:	4770      	bx	lr

00029660 <_kill>:
}
   29660:	2000      	movs	r0, #0
   29662:	4770      	bx	lr

00029664 <_getpid>:
}
   29664:	2000      	movs	r0, #0
   29666:	4770      	bx	lr

00029668 <_fstat>:
	st->st_mode = S_IFCHR;
   29668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   2966c:	604b      	str	r3, [r1, #4]
}
   2966e:	2000      	movs	r0, #0
   29670:	4770      	bx	lr

00029672 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   29672:	b510      	push	{r4, lr}
   29674:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   29676:	2014      	movs	r0, #20
   29678:	f7fa f9dc 	bl	23a34 <malloc>
   2967c:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   2967e:	f003 ff89 	bl	2d594 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   29682:	bd10      	pop	{r4, pc}

00029684 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   29684:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   29686:	f04f 32ff 	mov.w	r2, #4294967295
   2968a:	f04f 33ff 	mov.w	r3, #4294967295
   2968e:	f7f8 fcfb 	bl	22088 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   29692:	bd08      	pop	{r3, pc}

00029694 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   29694:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   29696:	f7f8 fd7b 	bl	22190 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   2969a:	bd08      	pop	{r3, pc}

0002969c <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2969c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   296a0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   296a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   296a8:	2a08      	cmp	r2, #8
   296aa:	d001      	beq.n	296b0 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   296ac:	2000      	movs	r0, #0
   296ae:	4770      	bx	lr
                switch(var2)
   296b0:	2b02      	cmp	r3, #2
   296b2:	d001      	beq.n	296b8 <nrf52_errata_197+0x1c>
                        return false;
   296b4:	2000      	movs	r0, #0
   296b6:	4770      	bx	lr
                        return true;
   296b8:	2001      	movs	r0, #1
    #endif
}
   296ba:	4770      	bx	lr

000296bc <sys_arch_reboot>:
{
   296bc:	b508      	push	{r3, lr}
    *p_gpregret = val;
   296be:	b2c0      	uxtb	r0, r0
   296c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   296c4:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   296c8:	f7ed f9b2 	bl	16a30 <__NVIC_SystemReset>

000296cc <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   296cc:	2301      	movs	r3, #1
   296ce:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   296d2:	f3bf 8f4f 	dsb	sy
        __WFE();
   296d6:	bf20      	wfe
    while (true)
   296d8:	e7fd      	b.n	296d6 <nrf_power_system_off+0xa>

000296da <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   296da:	2806      	cmp	r0, #6
   296dc:	d000      	beq.n	296e0 <pm_state_set+0x6>
   296de:	4770      	bx	lr
{
   296e0:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   296e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   296e6:	f7ff fff1 	bl	296cc <nrf_power_system_off>

000296ea <pm_state_exit_post_ops>:
   296ea:	2300      	movs	r3, #0
   296ec:	f383 8811 	msr	BASEPRI, r3
   296f0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   296f4:	4770      	bx	lr

000296f6 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   296f6:	b510      	push	{r4, lr}
   296f8:	b08a      	sub	sp, #40	; 0x28
   296fa:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   296fc:	a905      	add	r1, sp, #20
   296fe:	f7ed fa8b 	bl	16c18 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   29702:	4669      	mov	r1, sp
   29704:	4620      	mov	r0, r4
   29706:	f7ed fa87 	bl	16c18 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   2970a:	2210      	movs	r2, #16
   2970c:	f10d 0101 	add.w	r1, sp, #1
   29710:	f10d 0015 	add.w	r0, sp, #21
   29714:	f004 fdc9 	bl	2e2aa <memcmp>
}
   29718:	b00a      	add	sp, #40	; 0x28
   2971a:	bd10      	pop	{r4, pc}

0002971c <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2971c:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2971e:	7803      	ldrb	r3, [r0, #0]
   29720:	780a      	ldrb	r2, [r1, #0]
   29722:	4293      	cmp	r3, r2
   29724:	d107      	bne.n	29736 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   29726:	2b01      	cmp	r3, #1
   29728:	d00c      	beq.n	29744 <bt_uuid_cmp+0x28>
   2972a:	2b02      	cmp	r3, #2
   2972c:	d00e      	beq.n	2974c <bt_uuid_cmp+0x30>
   2972e:	b12b      	cbz	r3, 2973c <bt_uuid_cmp+0x20>
   29730:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   29734:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   29736:	f7ff ffde 	bl	296f6 <uuid128_cmp>
   2973a:	e7fb      	b.n	29734 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2973c:	8840      	ldrh	r0, [r0, #2]
   2973e:	884b      	ldrh	r3, [r1, #2]
   29740:	1ac0      	subs	r0, r0, r3
   29742:	e7f7      	b.n	29734 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29744:	6840      	ldr	r0, [r0, #4]
   29746:	684b      	ldr	r3, [r1, #4]
   29748:	1ac0      	subs	r0, r0, r3
   2974a:	e7f3      	b.n	29734 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2974c:	2210      	movs	r2, #16
   2974e:	3101      	adds	r1, #1
   29750:	3001      	adds	r0, #1
   29752:	f004 fdaa 	bl	2e2aa <memcmp>
   29756:	e7ed      	b.n	29734 <bt_uuid_cmp+0x18>

00029758 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   29758:	b500      	push	{lr}
   2975a:	4603      	mov	r3, r0
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2975c:	2a04      	cmp	r2, #4
   2975e:	d00f      	beq.n	29780 <bt_uuid_create+0x28>
   29760:	2a10      	cmp	r2, #16
   29762:	d01d      	beq.n	297a0 <bt_uuid_create+0x48>
   29764:	2a02      	cmp	r2, #2
   29766:	d002      	beq.n	2976e <bt_uuid_create+0x16>
   29768:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2976a:	f85d fb04 	ldr.w	pc, [sp], #4
		uuid->type = BT_UUID_TYPE_16;
   2976e:	2200      	movs	r2, #0
   29770:	7002      	strb	r2, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   29772:	7848      	ldrb	r0, [r1, #1]
   29774:	780a      	ldrb	r2, [r1, #0]
   29776:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2977a:	805a      	strh	r2, [r3, #2]
	return true;
   2977c:	2001      	movs	r0, #1
		break;
   2977e:	e7f4      	b.n	2976a <bt_uuid_create+0x12>
		uuid->type = BT_UUID_TYPE_32;
   29780:	2001      	movs	r0, #1
   29782:	7018      	strb	r0, [r3, #0]
   29784:	78ca      	ldrb	r2, [r1, #3]
   29786:	f891 c002 	ldrb.w	ip, [r1, #2]
   2978a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2978e:	f891 e001 	ldrb.w	lr, [r1, #1]
   29792:	780a      	ldrb	r2, [r1, #0]
   29794:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29798:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2979c:	605a      	str	r2, [r3, #4]
		break;
   2979e:	e7e4      	b.n	2976a <bt_uuid_create+0x12>
		uuid->type = BT_UUID_TYPE_128;
   297a0:	4602      	mov	r2, r0
   297a2:	2002      	movs	r0, #2
   297a4:	f802 0b01 	strb.w	r0, [r2], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   297a8:	f8d1 e000 	ldr.w	lr, [r1]
   297ac:	f8d1 c004 	ldr.w	ip, [r1, #4]
   297b0:	6888      	ldr	r0, [r1, #8]
   297b2:	68c9      	ldr	r1, [r1, #12]
   297b4:	f8c3 e001 	str.w	lr, [r3, #1]
   297b8:	f8c2 c004 	str.w	ip, [r2, #4]
   297bc:	6090      	str	r0, [r2, #8]
   297be:	60d1      	str	r1, [r2, #12]
	return true;
   297c0:	2001      	movs	r0, #1
   297c2:	e7d2      	b.n	2976a <bt_uuid_create+0x12>

000297c4 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   297c4:	b510      	push	{r4, lr}
   297c6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   297c8:	2301      	movs	r3, #1
   297ca:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   297ce:	2106      	movs	r1, #6
   297d0:	f7f6 ff28 	bl	20624 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   297d4:	b918      	cbnz	r0, 297de <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   297d6:	79a3      	ldrb	r3, [r4, #6]
   297d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   297dc:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   297de:	bd10      	pop	{r4, pc}

000297e0 <sys_put_le64>:
	dst[0] = val;
   297e0:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   297e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
   297e6:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   297e8:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   297ea:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   297ec:	0e00      	lsrs	r0, r0, #24
   297ee:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   297f0:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   297f2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   297f6:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   297f8:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   297fa:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   297fc:	0e09      	lsrs	r1, r1, #24
   297fe:	71d1      	strb	r1, [r2, #7]
}
   29800:	4770      	bx	lr

00029802 <sys_get_le64>:
{
   29802:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   29804:	79c3      	ldrb	r3, [r0, #7]
   29806:	7981      	ldrb	r1, [r0, #6]
   29808:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2980c:	7942      	ldrb	r2, [r0, #5]
   2980e:	7903      	ldrb	r3, [r0, #4]
   29810:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   29814:	78c2      	ldrb	r2, [r0, #3]
   29816:	f890 c002 	ldrb.w	ip, [r0, #2]
   2981a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   2981e:	f890 e001 	ldrb.w	lr, [r0, #1]
   29822:	7802      	ldrb	r2, [r0, #0]
   29824:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
}
   29828:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   2982c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   29830:	f85d fb04 	ldr.w	pc, [sp], #4

00029834 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   29834:	3805      	subs	r0, #5
   29836:	2815      	cmp	r0, #21
   29838:	d80e      	bhi.n	29858 <bt_hci_evt_get_flags+0x24>
   2983a:	e8df f000 	tbb	[pc, r0]
   2983e:	0d0b      	.short	0x0d0b
   29840:	0d0d0d0d 	.word	0x0d0d0d0d
   29844:	0f0d0d0d 	.word	0x0f0d0d0d
   29848:	0d0d0d0f 	.word	0x0d0d0d0f
   2984c:	0d0d0d0f 	.word	0x0d0d0d0f
   29850:	0f0d0d0d 	.word	0x0f0d0d0d
   29854:	2003      	movs	r0, #3
   29856:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   29858:	2002      	movs	r0, #2
   2985a:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   2985c:	2001      	movs	r0, #1
	}
}
   2985e:	4770      	bx	lr

00029860 <skip_auto_phy_update_on_conn_establishment>:
}
   29860:	2000      	movs	r0, #0
   29862:	4770      	bx	lr

00029864 <hci_vendor_event>:
}
   29864:	4770      	bx	lr

00029866 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29866:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29868:	f3bf 8f5b 	dmb	ish
   2986c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   29870:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29874:	f001 011f 	and.w	r1, r1, #31
   29878:	4108      	asrs	r0, r1
}
   2987a:	f000 0001 	and.w	r0, r0, #1
   2987e:	4770      	bx	lr

00029880 <bt_addr_copy>:
   29880:	680b      	ldr	r3, [r1, #0]
   29882:	6003      	str	r3, [r0, #0]
   29884:	888b      	ldrh	r3, [r1, #4]
   29886:	8083      	strh	r3, [r0, #4]
}
   29888:	4770      	bx	lr

0002988a <bt_addr_le_copy>:
   2988a:	680b      	ldr	r3, [r1, #0]
   2988c:	6003      	str	r3, [r0, #0]
   2988e:	888a      	ldrh	r2, [r1, #4]
   29890:	798b      	ldrb	r3, [r1, #6]
   29892:	8082      	strh	r2, [r0, #4]
   29894:	7183      	strb	r3, [r0, #6]
}
   29896:	4770      	bx	lr

00029898 <hci_disconn_complete_prio>:
{
   29898:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2989a:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2989c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   298a0:	781b      	ldrb	r3, [r3, #0]
   298a2:	b103      	cbz	r3, 298a6 <hci_disconn_complete_prio+0xe>
}
   298a4:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   298a6:	4620      	mov	r0, r4
   298a8:	f7f1 f8de 	bl	1aa68 <bt_conn_lookup_handle>
	if (!conn) {
   298ac:	4605      	mov	r5, r0
   298ae:	b130      	cbz	r0, 298be <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   298b0:	2101      	movs	r1, #1
   298b2:	f7f1 f8e3 	bl	1aa7c <bt_conn_set_state>
	bt_conn_unref(conn);
   298b6:	4628      	mov	r0, r5
   298b8:	f000 fcb8 	bl	2a22c <bt_conn_unref>
   298bc:	e7f2      	b.n	298a4 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   298be:	4620      	mov	r0, r4
   298c0:	f7ed fa58 	bl	16d74 <conn_handle_disconnected>
		return;
   298c4:	e7ee      	b.n	298a4 <hci_disconn_complete_prio+0xc>

000298c6 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   298c6:	f001 0c1f 	and.w	ip, r1, #31
   298ca:	2301      	movs	r3, #1
   298cc:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   298d0:	b172      	cbz	r2, 298f0 <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   298d2:	0949      	lsrs	r1, r1, #5
   298d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   298d8:	f3bf 8f5b 	dmb	ish
   298dc:	e850 2f00 	ldrex	r2, [r0]
   298e0:	431a      	orrs	r2, r3
   298e2:	e840 2100 	strex	r1, r2, [r0]
   298e6:	2900      	cmp	r1, #0
   298e8:	d1f8      	bne.n	298dc <atomic_set_bit_to+0x16>
   298ea:	f3bf 8f5b 	dmb	ish
   298ee:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   298f0:	0949      	lsrs	r1, r1, #5
   298f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   298f6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   298f8:	f3bf 8f5b 	dmb	ish
   298fc:	e850 2f00 	ldrex	r2, [r0]
   29900:	401a      	ands	r2, r3
   29902:	e840 2100 	strex	r1, r2, [r0]
   29906:	2900      	cmp	r1, #0
   29908:	d1f8      	bne.n	298fc <atomic_set_bit_to+0x36>
   2990a:	f3bf 8f5b 	dmb	ish
	}
}
   2990e:	4770      	bx	lr

00029910 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29910:	f001 021f 	and.w	r2, r1, #31
   29914:	2301      	movs	r3, #1
   29916:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   29918:	0949      	lsrs	r1, r1, #5
   2991a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2991e:	f3bf 8f5b 	dmb	ish
   29922:	e850 2f00 	ldrex	r2, [r0]
   29926:	ea42 0103 	orr.w	r1, r2, r3
   2992a:	e840 1c00 	strex	ip, r1, [r0]
   2992e:	f1bc 0f00 	cmp.w	ip, #0
   29932:	d1f6      	bne.n	29922 <atomic_test_and_set_bit+0x12>
   29934:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   29938:	4213      	tst	r3, r2
}
   2993a:	bf14      	ite	ne
   2993c:	2001      	movne	r0, #1
   2993e:	2000      	moveq	r0, #0
   29940:	4770      	bx	lr

00029942 <hci_le_read_remote_features>:
{
   29942:	b538      	push	{r3, r4, r5, lr}
   29944:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   29946:	2102      	movs	r1, #2
   29948:	f242 0016 	movw	r0, #8214	; 0x2016
   2994c:	f7ee faf2 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   29950:	b168      	cbz	r0, 2996e <hci_le_read_remote_features+0x2c>
   29952:	4605      	mov	r5, r0
   29954:	2102      	movs	r1, #2
   29956:	300c      	adds	r0, #12
   29958:	f002 fa22 	bl	2bda0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2995c:	8823      	ldrh	r3, [r4, #0]
   2995e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   29960:	2200      	movs	r2, #0
   29962:	4629      	mov	r1, r5
   29964:	f242 0016 	movw	r0, #8214	; 0x2016
   29968:	f7ee fb22 	bl	17fb0 <bt_hci_cmd_send_sync>
}
   2996c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2996e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29972:	e7fb      	b.n	2996c <hci_le_read_remote_features+0x2a>

00029974 <bt_hci_disconnect>:
{
   29974:	b570      	push	{r4, r5, r6, lr}
   29976:	4605      	mov	r5, r0
   29978:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2997a:	2103      	movs	r1, #3
   2997c:	f240 4006 	movw	r0, #1030	; 0x406
   29980:	f7ee fad8 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   29984:	b168      	cbz	r0, 299a2 <bt_hci_disconnect+0x2e>
   29986:	4606      	mov	r6, r0
   29988:	2103      	movs	r1, #3
   2998a:	300c      	adds	r0, #12
   2998c:	f002 fa08 	bl	2bda0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   29990:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   29992:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29994:	2200      	movs	r2, #0
   29996:	4631      	mov	r1, r6
   29998:	f240 4006 	movw	r0, #1030	; 0x406
   2999c:	f7ee fb08 	bl	17fb0 <bt_hci_cmd_send_sync>
}
   299a0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   299a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   299a6:	e7fb      	b.n	299a0 <bt_hci_disconnect+0x2c>

000299a8 <bt_le_set_data_len>:
{
   299a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   299aa:	4606      	mov	r6, r0
   299ac:	460f      	mov	r7, r1
   299ae:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   299b0:	2106      	movs	r1, #6
   299b2:	f242 0022 	movw	r0, #8226	; 0x2022
   299b6:	f7ee fabd 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   299ba:	b178      	cbz	r0, 299dc <bt_le_set_data_len+0x34>
   299bc:	4605      	mov	r5, r0
   299be:	2106      	movs	r1, #6
   299c0:	300c      	adds	r0, #12
   299c2:	f002 f9ed 	bl	2bda0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   299c6:	8833      	ldrh	r3, [r6, #0]
   299c8:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   299ca:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   299cc:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   299ce:	2200      	movs	r2, #0
   299d0:	4629      	mov	r1, r5
   299d2:	f242 0022 	movw	r0, #8226	; 0x2022
   299d6:	f7ee faeb 	bl	17fb0 <bt_hci_cmd_send_sync>
}
   299da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   299dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   299e0:	e7fb      	b.n	299da <bt_le_set_data_len+0x32>

000299e2 <bt_le_set_phy>:
{
   299e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   299e6:	4607      	mov	r7, r0
   299e8:	460e      	mov	r6, r1
   299ea:	4615      	mov	r5, r2
   299ec:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   299ee:	2107      	movs	r1, #7
   299f0:	f242 0032 	movw	r0, #8242	; 0x2032
   299f4:	f7ee fa9e 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   299f8:	b1a8      	cbz	r0, 29a26 <bt_le_set_phy+0x44>
   299fa:	4680      	mov	r8, r0
   299fc:	2107      	movs	r1, #7
   299fe:	300c      	adds	r0, #12
   29a00:	f002 f9ce 	bl	2bda0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29a04:	883b      	ldrh	r3, [r7, #0]
   29a06:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   29a08:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   29a0a:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   29a0c:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   29a0e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   29a12:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   29a16:	2200      	movs	r2, #0
   29a18:	4641      	mov	r1, r8
   29a1a:	f242 0032 	movw	r0, #8242	; 0x2032
   29a1e:	f7ee fac7 	bl	17fb0 <bt_hci_cmd_send_sync>
}
   29a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   29a26:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29a2a:	e7fa      	b.n	29a22 <bt_le_set_phy+0x40>

00029a2c <enh_conn_complete>:
{
   29a2c:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   29a2e:	f7ee ff73 	bl	18918 <bt_hci_le_enh_conn_complete>
}
   29a32:	bd08      	pop	{r3, pc}

00029a34 <le_enh_conn_complete>:
{
   29a34:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   29a36:	68c0      	ldr	r0, [r0, #12]
   29a38:	f7ff fff8 	bl	29a2c <enh_conn_complete>
}
   29a3c:	bd08      	pop	{r3, pc}

00029a3e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   29a3e:	8802      	ldrh	r2, [r0, #0]
   29a40:	8843      	ldrh	r3, [r0, #2]
   29a42:	429a      	cmp	r2, r3
   29a44:	d817      	bhi.n	29a76 <bt_le_conn_params_valid+0x38>
   29a46:	2a05      	cmp	r2, #5
   29a48:	d917      	bls.n	29a7a <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   29a4a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   29a4e:	d816      	bhi.n	29a7e <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   29a50:	8881      	ldrh	r1, [r0, #4]
   29a52:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   29a56:	d214      	bcs.n	29a82 <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   29a58:	88c0      	ldrh	r0, [r0, #6]
   29a5a:	f1a0 020a 	sub.w	r2, r0, #10
   29a5e:	b292      	uxth	r2, r2
   29a60:	f640 4c76 	movw	ip, #3190	; 0xc76
   29a64:	4562      	cmp	r2, ip
   29a66:	d80e      	bhi.n	29a86 <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   29a68:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   29a6c:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   29a70:	d20b      	bcs.n	29a8a <bt_le_conn_params_valid+0x4c>
	return true;
   29a72:	2001      	movs	r0, #1
   29a74:	4770      	bx	lr
		return false;
   29a76:	2000      	movs	r0, #0
   29a78:	4770      	bx	lr
   29a7a:	2000      	movs	r0, #0
   29a7c:	4770      	bx	lr
   29a7e:	2000      	movs	r0, #0
   29a80:	4770      	bx	lr
		return false;
   29a82:	2000      	movs	r0, #0
   29a84:	4770      	bx	lr
		return false;
   29a86:	2000      	movs	r0, #0
   29a88:	4770      	bx	lr
   29a8a:	2000      	movs	r0, #0
}
   29a8c:	4770      	bx	lr

00029a8e <le_conn_param_req_reply>:
{
   29a8e:	b570      	push	{r4, r5, r6, lr}
   29a90:	4605      	mov	r5, r0
   29a92:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   29a94:	210e      	movs	r1, #14
   29a96:	f242 0020 	movw	r0, #8224	; 0x2020
   29a9a:	f7ee fa4b 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   29a9e:	b1c0      	cbz	r0, 29ad2 <le_conn_param_req_reply+0x44>
   29aa0:	4606      	mov	r6, r0
   29aa2:	210e      	movs	r1, #14
   29aa4:	300c      	adds	r0, #12
   29aa6:	f002 f97b 	bl	2bda0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   29aaa:	2300      	movs	r3, #0
   29aac:	6003      	str	r3, [r0, #0]
   29aae:	6043      	str	r3, [r0, #4]
   29ab0:	6083      	str	r3, [r0, #8]
   29ab2:	8183      	strh	r3, [r0, #12]
	cp->handle = sys_cpu_to_le16(handle);
   29ab4:	8005      	strh	r5, [r0, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   29ab6:	8823      	ldrh	r3, [r4, #0]
   29ab8:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   29aba:	8863      	ldrh	r3, [r4, #2]
   29abc:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   29abe:	88a3      	ldrh	r3, [r4, #4]
   29ac0:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   29ac2:	88e3      	ldrh	r3, [r4, #6]
   29ac4:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   29ac6:	4631      	mov	r1, r6
   29ac8:	f242 0020 	movw	r0, #8224	; 0x2020
   29acc:	f7ef f8aa 	bl	18c24 <bt_hci_cmd_send>
}
   29ad0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   29ad2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29ad6:	e7fb      	b.n	29ad0 <le_conn_param_req_reply+0x42>

00029ad8 <bt_init>:
{
   29ad8:	b510      	push	{r4, lr}
	err = hci_init();
   29ada:	f7ee fd89 	bl	185f0 <hci_init>
	if (err) {
   29ade:	4604      	mov	r4, r0
   29ae0:	b108      	cbz	r0, 29ae6 <bt_init+0xe>
}
   29ae2:	4620      	mov	r0, r4
   29ae4:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   29ae6:	f7f1 fccb 	bl	1b480 <bt_conn_init>
		if (err) {
   29aea:	4604      	mov	r4, r0
   29aec:	2800      	cmp	r0, #0
   29aee:	d1f8      	bne.n	29ae2 <bt_init+0xa>
	bt_finalize_init();
   29af0:	f7ef fbe6 	bl	192c0 <bt_finalize_init>
	return 0;
   29af4:	e7f5      	b.n	29ae2 <bt_init+0xa>

00029af6 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   29af6:	2000      	movs	r0, #0
   29af8:	4770      	bx	lr

00029afa <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   29afa:	2000      	movs	r0, #0
   29afc:	4770      	bx	lr

00029afe <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29afe:	680b      	ldr	r3, [r1, #0]
   29b00:	6003      	str	r3, [r0, #0]
   29b02:	888b      	ldrh	r3, [r1, #4]
   29b04:	8083      	strh	r3, [r0, #4]
}
   29b06:	4770      	bx	lr

00029b08 <bt_addr_le_copy>:
   29b08:	680b      	ldr	r3, [r1, #0]
   29b0a:	6003      	str	r3, [r0, #0]
   29b0c:	888a      	ldrh	r2, [r1, #4]
   29b0e:	798b      	ldrb	r3, [r1, #6]
   29b10:	8082      	strh	r2, [r0, #4]
   29b12:	7183      	strb	r3, [r0, #6]
}
   29b14:	4770      	bx	lr

00029b16 <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   29b16:	b910      	cbnz	r0, 29b1e <bt_lookup_id_addr+0x8>
   29b18:	b119      	cbz	r1, 29b22 <bt_lookup_id_addr+0xc>
	return addr;
   29b1a:	4608      	mov	r0, r1
   29b1c:	4770      	bx	lr
		return NULL;
   29b1e:	2000      	movs	r0, #0
   29b20:	4770      	bx	lr
   29b22:	2000      	movs	r0, #0
}
   29b24:	4770      	bx	lr

00029b26 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   29b26:	b128      	cbz	r0, 29b34 <bt_id_set_adv_random_addr+0xe>
   29b28:	b139      	cbz	r1, 29b3a <bt_id_set_adv_random_addr+0x14>
{
   29b2a:	b508      	push	{r3, lr}
		return set_random_address(addr);
   29b2c:	4608      	mov	r0, r1
   29b2e:	f7ef fd03 	bl	19538 <set_random_address>
}
   29b32:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29b34:	f06f 0015 	mvn.w	r0, #21
   29b38:	4770      	bx	lr
   29b3a:	f06f 0015 	mvn.w	r0, #21
}
   29b3e:	4770      	bx	lr

00029b40 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   29b40:	b1a0      	cbz	r0, 29b6c <bt_id_set_adv_private_addr+0x2c>
{
   29b42:	b510      	push	{r4, lr}
   29b44:	b082      	sub	sp, #8
   29b46:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   29b48:	2106      	movs	r1, #6
   29b4a:	4668      	mov	r0, sp
   29b4c:	f7f6 fd6a 	bl	20624 <bt_rand>
	if (err) {
   29b50:	b108      	cbz	r0, 29b56 <bt_id_set_adv_private_addr+0x16>
}
   29b52:	b002      	add	sp, #8
   29b54:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   29b56:	f89d 3005 	ldrb.w	r3, [sp, #5]
   29b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   29b5e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   29b62:	4669      	mov	r1, sp
   29b64:	4620      	mov	r0, r4
   29b66:	f7ff ffde 	bl	29b26 <bt_id_set_adv_random_addr>
	if (err) {
   29b6a:	e7f2      	b.n	29b52 <bt_id_set_adv_private_addr+0x12>
		return -EINVAL;
   29b6c:	f06f 0015 	mvn.w	r0, #21
}
   29b70:	4770      	bx	lr

00029b72 <bt_id_adv_random_addr_check>:
	CHECKIF(param == NULL) {
   29b72:	b100      	cbz	r0, 29b76 <bt_id_adv_random_addr_check+0x4>
		return true;
   29b74:	2001      	movs	r0, #1
}
   29b76:	4770      	bx	lr

00029b78 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   29b78:	2300      	movs	r3, #0
   29b7a:	428b      	cmp	r3, r1
   29b7c:	d219      	bcs.n	29bb2 <ad_is_limited+0x3a>
{
   29b7e:	b500      	push	{lr}
   29b80:	e002      	b.n	29b88 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   29b82:	3301      	adds	r3, #1
   29b84:	428b      	cmp	r3, r1
   29b86:	d211      	bcs.n	29bac <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   29b88:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   29b8c:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   29b90:	f240 1201 	movw	r2, #257	; 0x101
   29b94:	4594      	cmp	ip, r2
   29b96:	d1f4      	bne.n	29b82 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   29b98:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   29b9c:	2a00      	cmp	r2, #0
   29b9e:	d0f0      	beq.n	29b82 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   29ba0:	7812      	ldrb	r2, [r2, #0]
   29ba2:	f012 0f01 	tst.w	r2, #1
   29ba6:	d0ec      	beq.n	29b82 <ad_is_limited+0xa>
				return true;
   29ba8:	2001      	movs	r0, #1
   29baa:	e000      	b.n	29bae <ad_is_limited+0x36>
	return false;
   29bac:	2000      	movs	r0, #0
}
   29bae:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   29bb2:	2000      	movs	r0, #0
}
   29bb4:	4770      	bx	lr

00029bb6 <get_filter_policy>:
}
   29bb6:	2000      	movs	r0, #0
   29bb8:	4770      	bx	lr

00029bba <get_adv_channel_map>:
{
   29bba:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   29bbc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   29bc0:	d10b      	bne.n	29bda <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   29bc2:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   29bc4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   29bc8:	d001      	beq.n	29bce <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   29bca:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   29bce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   29bd2:	d001      	beq.n	29bd8 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   29bd4:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   29bd8:	4770      	bx	lr
		channel_map &= ~0x01;
   29bda:	2006      	movs	r0, #6
   29bdc:	e7f2      	b.n	29bc4 <get_adv_channel_map+0xa>

00029bde <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29bde:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29be0:	f3bf 8f5b 	dmb	ish
   29be4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   29be8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29bec:	f001 011f 	and.w	r1, r1, #31
   29bf0:	4108      	asrs	r0, r1
}
   29bf2:	f000 0001 	and.w	r0, r0, #1
   29bf6:	4770      	bx	lr

00029bf8 <bt_addr_le_copy>:
   29bf8:	680b      	ldr	r3, [r1, #0]
   29bfa:	6003      	str	r3, [r0, #0]
   29bfc:	888a      	ldrh	r2, [r1, #4]
   29bfe:	798b      	ldrb	r3, [r1, #6]
   29c00:	8082      	strh	r2, [r0, #4]
   29c02:	7183      	strb	r3, [r0, #6]
   29c04:	4770      	bx	lr

00029c06 <hci_set_ad>:
{
   29c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c0a:	b082      	sub	sp, #8
   29c0c:	4607      	mov	r7, r0
   29c0e:	460d      	mov	r5, r1
   29c10:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   29c12:	2120      	movs	r1, #32
   29c14:	f7ee f98e 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   29c18:	b300      	cbz	r0, 29c5c <hci_set_ad+0x56>
   29c1a:	4680      	mov	r8, r0
   29c1c:	2120      	movs	r1, #32
   29c1e:	300c      	adds	r0, #12
   29c20:	f002 f8be 	bl	2bda0 <net_buf_simple_add>
   29c24:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   29c26:	2220      	movs	r2, #32
   29c28:	2100      	movs	r1, #0
   29c2a:	f004 fb5c 	bl	2e2e6 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   29c2e:	9400      	str	r4, [sp, #0]
   29c30:	4633      	mov	r3, r6
   29c32:	462a      	mov	r2, r5
   29c34:	211f      	movs	r1, #31
   29c36:	1c60      	adds	r0, r4, #1
   29c38:	f7ef ffe8 	bl	19c0c <set_data_add_complete>
	if (err) {
   29c3c:	4604      	mov	r4, r0
   29c3e:	b948      	cbnz	r0, 29c54 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   29c40:	2200      	movs	r2, #0
   29c42:	4641      	mov	r1, r8
   29c44:	4638      	mov	r0, r7
   29c46:	f7ee f9b3 	bl	17fb0 <bt_hci_cmd_send_sync>
   29c4a:	4604      	mov	r4, r0
}
   29c4c:	4620      	mov	r0, r4
   29c4e:	b002      	add	sp, #8
   29c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   29c54:	4640      	mov	r0, r8
   29c56:	f002 f85c 	bl	2bd12 <net_buf_unref>
		return err;
   29c5a:	e7f7      	b.n	29c4c <hci_set_ad+0x46>
		return -ENOBUFS;
   29c5c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   29c60:	e7f4      	b.n	29c4c <hci_set_ad+0x46>

00029c62 <set_ad>:
{
   29c62:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   29c64:	f242 0008 	movw	r0, #8200	; 0x2008
   29c68:	f7ff ffcd 	bl	29c06 <hci_set_ad>
}
   29c6c:	bd08      	pop	{r3, pc}

00029c6e <set_sd>:
{
   29c6e:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   29c70:	f242 0009 	movw	r0, #8201	; 0x2009
   29c74:	f7ff ffc7 	bl	29c06 <hci_set_ad>
}
   29c78:	bd08      	pop	{r3, pc}

00029c7a <le_adv_update>:
{
   29c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c7e:	b089      	sub	sp, #36	; 0x24
   29c80:	4604      	mov	r4, r0
   29c82:	460e      	mov	r6, r1
   29c84:	4617      	mov	r7, r2
   29c86:	461d      	mov	r5, r3
   29c88:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   29c8c:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   29c90:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   29c94:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   29c98:	2300      	movs	r3, #0
   29c9a:	9304      	str	r3, [sp, #16]
   29c9c:	9305      	str	r3, [sp, #20]
   29c9e:	9306      	str	r3, [sp, #24]
   29ca0:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   29ca2:	f1b9 0f00 	cmp.w	r9, #0
   29ca6:	d133      	bne.n	29d10 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   29ca8:	f1ba 0f00 	cmp.w	sl, #0
   29cac:	d002      	beq.n	29cb4 <le_adv_update+0x3a>
   29cae:	f1bb 0f00 	cmp.w	fp, #0
   29cb2:	d10e      	bne.n	29cd2 <le_adv_update+0x58>
		d[0].data = ad;
   29cb4:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   29cb6:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   29cb8:	f1b9 0f01 	cmp.w	r9, #1
   29cbc:	d056      	beq.n	29d6c <le_adv_update+0xf2>
		d_len = 1;
   29cbe:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   29cc0:	a904      	add	r1, sp, #16
   29cc2:	4620      	mov	r0, r4
   29cc4:	f7ff ffcd 	bl	29c62 <set_ad>
		if (err) {
   29cc8:	4603      	mov	r3, r0
   29cca:	b9e8      	cbnz	r0, 29d08 <le_adv_update+0x8e>
	if (scannable) {
   29ccc:	f1bb 0f00 	cmp.w	fp, #0
   29cd0:	d00c      	beq.n	29cec <le_adv_update+0x72>
		d[0].data = sd;
   29cd2:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   29cd4:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   29cd8:	f1b9 0f02 	cmp.w	r9, #2
   29cdc:	d04c      	beq.n	29d78 <le_adv_update+0xfe>
		d_len = 1;
   29cde:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   29ce0:	a904      	add	r1, sp, #16
   29ce2:	4620      	mov	r0, r4
   29ce4:	f7ff ffc3 	bl	29c6e <set_sd>
		if (err) {
   29ce8:	4603      	mov	r3, r0
   29cea:	b968      	cbnz	r0, 29d08 <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   29cec:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29cee:	f3bf 8f5b 	dmb	ish
   29cf2:	e854 3f00 	ldrex	r3, [r4]
   29cf6:	f043 0304 	orr.w	r3, r3, #4
   29cfa:	e844 3200 	strex	r2, r3, [r4]
   29cfe:	2a00      	cmp	r2, #0
   29d00:	d1f7      	bne.n	29cf2 <le_adv_update+0x78>
   29d02:	f3bf 8f5b 	dmb	ish
	return 0;
   29d06:	2300      	movs	r3, #0
}
   29d08:	4618      	mov	r0, r3
   29d0a:	b009      	add	sp, #36	; 0x24
   29d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   29d10:	f7ef fbf2 	bl	194f8 <bt_get_name>
   29d14:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   29d16:	b166      	cbz	r6, 29d32 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   29d18:	2200      	movs	r2, #0
   29d1a:	4297      	cmp	r7, r2
   29d1c:	d907      	bls.n	29d2e <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   29d1e:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   29d22:	3b08      	subs	r3, #8
   29d24:	b2db      	uxtb	r3, r3
   29d26:	2b01      	cmp	r3, #1
   29d28:	d90f      	bls.n	29d4a <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   29d2a:	3201      	adds	r2, #1
   29d2c:	e7f5      	b.n	29d1a <le_adv_update+0xa0>
	return false;
   29d2e:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   29d30:	bb43      	cbnz	r3, 29d84 <le_adv_update+0x10a>
   29d32:	b175      	cbz	r5, 29d52 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   29d34:	2200      	movs	r2, #0
   29d36:	4590      	cmp	r8, r2
   29d38:	d909      	bls.n	29d4e <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   29d3a:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   29d3e:	3b08      	subs	r3, #8
   29d40:	b2db      	uxtb	r3, r3
   29d42:	2b01      	cmp	r3, #1
   29d44:	d910      	bls.n	29d68 <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   29d46:	3201      	adds	r2, #1
   29d48:	e7f5      	b.n	29d36 <le_adv_update+0xbc>
			return true;
   29d4a:	2301      	movs	r3, #1
   29d4c:	e7f0      	b.n	29d30 <le_adv_update+0xb6>
	return false;
   29d4e:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   29d50:	b9db      	cbnz	r3, 29d8a <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   29d52:	9801      	ldr	r0, [sp, #4]
   29d54:	f7e2 fec2 	bl	cadc <strlen>
   29d58:	2309      	movs	r3, #9
   29d5a:	f88d 3008 	strb.w	r3, [sp, #8]
   29d5e:	f88d 0009 	strb.w	r0, [sp, #9]
   29d62:	9b01      	ldr	r3, [sp, #4]
   29d64:	9303      	str	r3, [sp, #12]
   29d66:	e79f      	b.n	29ca8 <le_adv_update+0x2e>
			return true;
   29d68:	2301      	movs	r3, #1
   29d6a:	e7f1      	b.n	29d50 <le_adv_update+0xd6>
			d[1].data = &data;
   29d6c:	ab02      	add	r3, sp, #8
   29d6e:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   29d70:	2301      	movs	r3, #1
   29d72:	9307      	str	r3, [sp, #28]
			d_len = 2;
   29d74:	2202      	movs	r2, #2
   29d76:	e7a3      	b.n	29cc0 <le_adv_update+0x46>
			d[1].data = &data;
   29d78:	ab02      	add	r3, sp, #8
   29d7a:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   29d7c:	2301      	movs	r3, #1
   29d7e:	9307      	str	r3, [sp, #28]
			d_len = 2;
   29d80:	2202      	movs	r2, #2
   29d82:	e7ad      	b.n	29ce0 <le_adv_update+0x66>
			return -EINVAL;
   29d84:	f06f 0315 	mvn.w	r3, #21
   29d88:	e7be      	b.n	29d08 <le_adv_update+0x8e>
   29d8a:	f06f 0315 	mvn.w	r3, #21
   29d8e:	e7bb      	b.n	29d08 <le_adv_update+0x8e>

00029d90 <valid_adv_param>:
{
   29d90:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   29d92:	6843      	ldr	r3, [r0, #4]
   29d94:	f413 6f80 	tst.w	r3, #1024	; 0x400
   29d98:	d107      	bne.n	29daa <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   29d9a:	6902      	ldr	r2, [r0, #16]
   29d9c:	b112      	cbz	r2, 29da4 <valid_adv_param+0x14>
   29d9e:	f013 0f01 	tst.w	r3, #1
   29da2:	d004      	beq.n	29dae <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   29da4:	f7ef ffac 	bl	19d00 <valid_adv_ext_param>
}
   29da8:	bd08      	pop	{r3, pc}
		return false;
   29daa:	2000      	movs	r0, #0
   29dac:	e7fc      	b.n	29da8 <valid_adv_param+0x18>
		return false;
   29dae:	2000      	movs	r0, #0
   29db0:	e7fa      	b.n	29da8 <valid_adv_param+0x18>

00029db2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29db2:	f001 0c1f 	and.w	ip, r1, #31
   29db6:	2301      	movs	r3, #1
   29db8:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   29dbc:	b172      	cbz	r2, 29ddc <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29dbe:	0949      	lsrs	r1, r1, #5
   29dc0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29dc4:	f3bf 8f5b 	dmb	ish
   29dc8:	e850 2f00 	ldrex	r2, [r0]
   29dcc:	431a      	orrs	r2, r3
   29dce:	e840 2100 	strex	r1, r2, [r0]
   29dd2:	2900      	cmp	r1, #0
   29dd4:	d1f8      	bne.n	29dc8 <atomic_set_bit_to+0x16>
   29dd6:	f3bf 8f5b 	dmb	ish
   29dda:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29ddc:	0949      	lsrs	r1, r1, #5
   29dde:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29de2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29de4:	f3bf 8f5b 	dmb	ish
   29de8:	e850 2f00 	ldrex	r2, [r0]
   29dec:	401a      	ands	r2, r3
   29dee:	e840 2100 	strex	r1, r2, [r0]
   29df2:	2900      	cmp	r1, #0
   29df4:	d1f8      	bne.n	29de8 <atomic_set_bit_to+0x36>
   29df6:	f3bf 8f5b 	dmb	ish
}
   29dfa:	4770      	bx	lr

00029dfc <atomic_test_and_clear_bit>:
{
   29dfc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29dfe:	f001 021f 	and.w	r2, r1, #31
   29e02:	2301      	movs	r3, #1
   29e04:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29e06:	0949      	lsrs	r1, r1, #5
   29e08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   29e0c:	43d9      	mvns	r1, r3
   29e0e:	f3bf 8f5b 	dmb	ish
   29e12:	e850 2f00 	ldrex	r2, [r0]
   29e16:	ea02 0c01 	and.w	ip, r2, r1
   29e1a:	e840 ce00 	strex	lr, ip, [r0]
   29e1e:	f1be 0f00 	cmp.w	lr, #0
   29e22:	d1f6      	bne.n	29e12 <atomic_test_and_clear_bit+0x16>
   29e24:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   29e28:	4213      	tst	r3, r2
}
   29e2a:	bf14      	ite	ne
   29e2c:	2001      	movne	r0, #1
   29e2e:	2000      	moveq	r0, #0
   29e30:	f85d fb04 	ldr.w	pc, [sp], #4

00029e34 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   29e34:	6843      	ldr	r3, [r0, #4]
   29e36:	f013 0f08 	tst.w	r3, #8
   29e3a:	d00b      	beq.n	29e54 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   29e3c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   29e40:	d10a      	bne.n	29e58 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   29e42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   29e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   29e4a:	d001      	beq.n	29e50 <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   29e4c:	2002      	movs	r0, #2
}
   29e4e:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   29e50:	2001      	movs	r0, #1
   29e52:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   29e54:	2000      	movs	r0, #0
   29e56:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   29e58:	2001      	movs	r0, #1
   29e5a:	4770      	bx	lr

00029e5c <bt_le_adv_set_enable_legacy>:
{
   29e5c:	b570      	push	{r4, r5, r6, lr}
   29e5e:	b086      	sub	sp, #24
   29e60:	4605      	mov	r5, r0
   29e62:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   29e64:	2101      	movs	r1, #1
   29e66:	f242 000a 	movw	r0, #8202	; 0x200a
   29e6a:	f7ee f863 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   29e6e:	b1d0      	cbz	r0, 29ea6 <bt_le_adv_set_enable_legacy+0x4a>
   29e70:	4606      	mov	r6, r0
	if (enable) {
   29e72:	b19c      	cbz	r4, 29e9c <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   29e74:	2101      	movs	r1, #1
   29e76:	300c      	adds	r0, #12
   29e78:	f001 ffa3 	bl	2bdc2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   29e7c:	9400      	str	r4, [sp, #0]
   29e7e:	2307      	movs	r3, #7
   29e80:	f105 0210 	add.w	r2, r5, #16
   29e84:	a903      	add	r1, sp, #12
   29e86:	4630      	mov	r0, r6
   29e88:	f7ee f842 	bl	17f10 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   29e8c:	2200      	movs	r2, #0
   29e8e:	4631      	mov	r1, r6
   29e90:	f242 000a 	movw	r0, #8202	; 0x200a
   29e94:	f7ee f88c 	bl	17fb0 <bt_hci_cmd_send_sync>
}
   29e98:	b006      	add	sp, #24
   29e9a:	bd70      	pop	{r4, r5, r6, pc}
   29e9c:	2100      	movs	r1, #0
   29e9e:	300c      	adds	r0, #12
   29ea0:	f001 ff8f 	bl	2bdc2 <net_buf_simple_add_u8>
   29ea4:	e7ea      	b.n	29e7c <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   29ea6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29eaa:	e7f5      	b.n	29e98 <bt_le_adv_set_enable_legacy+0x3c>

00029eac <bt_le_adv_set_enable>:
{
   29eac:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   29eae:	f7ff ffd5 	bl	29e5c <bt_le_adv_set_enable_legacy>
}
   29eb2:	bd08      	pop	{r3, pc}

00029eb4 <bt_le_lim_adv_cancel_timeout>:
{
   29eb4:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   29eb6:	3018      	adds	r0, #24
   29eb8:	f003 fd91 	bl	2d9de <k_work_cancel_delayable>
}
   29ebc:	bd08      	pop	{r3, pc}

00029ebe <bt_le_adv_resume>:
{
   29ebe:	b570      	push	{r4, r5, r6, lr}
   29ec0:	b082      	sub	sp, #8
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   29ec2:	f7ef ffc9 	bl	19e58 <bt_le_adv_lookup_legacy>
	if (!adv) {
   29ec6:	b138      	cbz	r0, 29ed8 <bt_le_adv_resume+0x1a>
   29ec8:	4605      	mov	r5, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   29eca:	f100 0410 	add.w	r4, r0, #16
   29ece:	210e      	movs	r1, #14
   29ed0:	4620      	mov	r0, r4
   29ed2:	f7ff fe84 	bl	29bde <atomic_test_bit>
   29ed6:	b908      	cbnz	r0, 29edc <bt_le_adv_resume+0x1e>
}
   29ed8:	b002      	add	sp, #8
   29eda:	bd70      	pop	{r4, r5, r6, pc}
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   29edc:	2107      	movs	r1, #7
   29ede:	4620      	mov	r0, r4
   29ee0:	f7ff fe7d 	bl	29bde <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   29ee4:	4606      	mov	r6, r0
   29ee6:	2800      	cmp	r0, #0
   29ee8:	d1f6      	bne.n	29ed8 <bt_le_adv_resume+0x1a>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   29eea:	210a      	movs	r1, #10
   29eec:	4620      	mov	r0, r4
   29eee:	f7ff fe76 	bl	29bde <atomic_test_bit>
   29ef2:	2800      	cmp	r0, #0
   29ef4:	d0f0      	beq.n	29ed8 <bt_le_adv_resume+0x1a>
	err = le_adv_start_add_conn(adv, &conn);
   29ef6:	a901      	add	r1, sp, #4
   29ef8:	4628      	mov	r0, r5
   29efa:	f7ef ff4b 	bl	19d94 <le_adv_start_add_conn>
	if (err) {
   29efe:	2800      	cmp	r0, #0
   29f00:	d1ea      	bne.n	29ed8 <bt_le_adv_resume+0x1a>
	err = bt_le_adv_set_enable(adv, true);
   29f02:	2101      	movs	r1, #1
   29f04:	4628      	mov	r0, r5
   29f06:	f7ff ffd1 	bl	29eac <bt_le_adv_set_enable>
	if (err) {
   29f0a:	b988      	cbnz	r0, 29f30 <bt_le_adv_resume+0x72>
	bt_conn_unref(conn);
   29f0c:	9801      	ldr	r0, [sp, #4]
   29f0e:	f000 f98d 	bl	2a22c <bt_conn_unref>
	if (persist_paused) {
   29f12:	2e00      	cmp	r6, #0
   29f14:	d0e0      	beq.n	29ed8 <bt_le_adv_resume+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29f16:	f3bf 8f5b 	dmb	ish
   29f1a:	e854 3f00 	ldrex	r3, [r4]
   29f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   29f22:	e844 3200 	strex	r2, r3, [r4]
   29f26:	2a00      	cmp	r2, #0
   29f28:	d1f7      	bne.n	29f1a <bt_le_adv_resume+0x5c>
   29f2a:	f3bf 8f5b 	dmb	ish
}
   29f2e:	e7d3      	b.n	29ed8 <bt_le_adv_resume+0x1a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   29f30:	2100      	movs	r1, #0
   29f32:	9801      	ldr	r0, [sp, #4]
   29f34:	f7f0 fda2 	bl	1aa7c <bt_conn_set_state>
		persist_paused = atomic_test_and_clear_bit(adv->flags,
   29f38:	210e      	movs	r1, #14
   29f3a:	4620      	mov	r0, r4
   29f3c:	f7ff ff5e 	bl	29dfc <atomic_test_and_clear_bit>
   29f40:	4606      	mov	r6, r0
   29f42:	e7e3      	b.n	29f0c <bt_le_adv_resume+0x4e>

00029f44 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   29f44:	460b      	mov	r3, r1
   29f46:	b139      	cbz	r1, 29f58 <sys_slist_remove+0x14>
	return node->next;
   29f48:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   29f4a:	6019      	str	r1, [r3, #0]
	return list->tail;
   29f4c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   29f4e:	428a      	cmp	r2, r1
   29f50:	d009      	beq.n	29f66 <sys_slist_remove+0x22>
	parent->next = child;
   29f52:	2300      	movs	r3, #0
   29f54:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   29f56:	4770      	bx	lr
	return node->next;
   29f58:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   29f5a:	6003      	str	r3, [r0, #0]
	return list->tail;
   29f5c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   29f5e:	428a      	cmp	r2, r1
   29f60:	d1f7      	bne.n	29f52 <sys_slist_remove+0xe>
	list->tail = node;
   29f62:	6043      	str	r3, [r0, #4]
}
   29f64:	e7f5      	b.n	29f52 <sys_slist_remove+0xe>
	list->tail = node;
   29f66:	6043      	str	r3, [r0, #4]
}
   29f68:	e7f3      	b.n	29f52 <sys_slist_remove+0xe>

00029f6a <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29f6a:	b508      	push	{r3, lr}
   29f6c:	460a      	mov	r2, r1
	return list->head;
   29f6e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29f70:	2100      	movs	r1, #0
   29f72:	e001      	b.n	29f78 <sys_slist_find_and_remove+0xe>
   29f74:	4619      	mov	r1, r3
   29f76:	681b      	ldr	r3, [r3, #0]
   29f78:	b12b      	cbz	r3, 29f86 <sys_slist_find_and_remove+0x1c>
   29f7a:	4293      	cmp	r3, r2
   29f7c:	d1fa      	bne.n	29f74 <sys_slist_find_and_remove+0xa>
   29f7e:	f7ff ffe1 	bl	29f44 <sys_slist_remove>
   29f82:	2001      	movs	r0, #1
   29f84:	e000      	b.n	29f88 <sys_slist_find_and_remove+0x1e>
   29f86:	2000      	movs	r0, #0
   29f88:	bd08      	pop	{r3, pc}

00029f8a <tx_notify>:
{
   29f8a:	b570      	push	{r4, r5, r6, lr}
   29f8c:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
   29f8e:	e00c      	b.n	29faa <tx_notify+0x20>
   29f90:	f383 8811 	msr	BASEPRI, r3
   29f94:	f3bf 8f6f 	isb	sy
		if (!tx) {
   29f98:	b1c8      	cbz	r0, 29fce <tx_notify+0x44>
		cb = tx->cb;
   29f9a:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   29f9c:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   29f9e:	f7f0 fa1b 	bl	1a3d8 <tx_free>
		cb(conn, user_data, 0);
   29fa2:	2200      	movs	r2, #0
   29fa4:	4631      	mov	r1, r6
   29fa6:	4620      	mov	r0, r4
   29fa8:	47a8      	blx	r5
	__asm__ volatile(
   29faa:	f04f 0240 	mov.w	r2, #64	; 0x40
   29fae:	f3ef 8311 	mrs	r3, BASEPRI
   29fb2:	f382 8812 	msr	BASEPRI_MAX, r2
   29fb6:	f3bf 8f6f 	isb	sy
	return list->head;
   29fba:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   29fbc:	2800      	cmp	r0, #0
   29fbe:	d0e7      	beq.n	29f90 <tx_notify+0x6>
	return node->next;
   29fc0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29fc2:	6222      	str	r2, [r4, #32]
	return list->tail;
   29fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29fc6:	4281      	cmp	r1, r0
   29fc8:	d1e2      	bne.n	29f90 <tx_notify+0x6>
	list->tail = node;
   29fca:	6262      	str	r2, [r4, #36]	; 0x24
}
   29fcc:	e7e0      	b.n	29f90 <tx_notify+0x6>
}
   29fce:	bd70      	pop	{r4, r5, r6, pc}

00029fd0 <tx_complete_work>:
{
   29fd0:	b508      	push	{r3, lr}
	tx_notify(conn);
   29fd2:	3828      	subs	r0, #40	; 0x28
   29fd4:	f7ff ffd9 	bl	29f8a <tx_notify>
}
   29fd8:	bd08      	pop	{r3, pc}

00029fda <conn_tx_destroy>:
{
   29fda:	b570      	push	{r4, r5, r6, lr}
   29fdc:	4604      	mov	r4, r0
   29fde:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   29fe0:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   29fe2:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   29fe4:	f7f0 f9f8 	bl	1a3d8 <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   29fe8:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   29fec:	4631      	mov	r1, r6
   29fee:	4620      	mov	r0, r4
   29ff0:	47a8      	blx	r5
}
   29ff2:	bd70      	pop	{r4, r5, r6, pc}

00029ff4 <atomic_test_and_clear_bit>:
{
   29ff4:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29ff6:	f001 021f 	and.w	r2, r1, #31
   29ffa:	2301      	movs	r3, #1
   29ffc:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29ffe:	0949      	lsrs	r1, r1, #5
   2a000:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a004:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a006:	f3bf 8f5b 	dmb	ish
   2a00a:	e850 2f00 	ldrex	r2, [r0]
   2a00e:	ea02 0c01 	and.w	ip, r2, r1
   2a012:	e840 ce00 	strex	lr, ip, [r0]
   2a016:	f1be 0f00 	cmp.w	lr, #0
   2a01a:	d1f6      	bne.n	2a00a <atomic_test_and_clear_bit+0x16>
   2a01c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a020:	4213      	tst	r3, r2
}
   2a022:	bf14      	ite	ne
   2a024:	2001      	movne	r0, #1
   2a026:	2000      	moveq	r0, #0
   2a028:	f85d fb04 	ldr.w	pc, [sp], #4

0002a02c <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a02c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a02e:	f3bf 8f5b 	dmb	ish
   2a032:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2a036:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a03a:	f001 011f 	and.w	r1, r1, #31
   2a03e:	4108      	asrs	r0, r1
}
   2a040:	f000 0001 	and.w	r0, r0, #1
   2a044:	4770      	bx	lr

0002a046 <send_acl>:
{
   2a046:	b570      	push	{r4, r5, r6, lr}
   2a048:	4605      	mov	r5, r0
   2a04a:	460c      	mov	r4, r1
	switch (flags) {
   2a04c:	2a03      	cmp	r2, #3
   2a04e:	d818      	bhi.n	2a082 <send_acl+0x3c>
   2a050:	e8df f002 	tbb	[pc, r2]
   2a054:	15021502 	.word	0x15021502
   2a058:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   2a05a:	2104      	movs	r1, #4
   2a05c:	f104 000c 	add.w	r0, r4, #12
   2a060:	f001 feb6 	bl	2bdd0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2a064:	882b      	ldrh	r3, [r5, #0]
   2a066:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2a06a:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a06c:	8a23      	ldrh	r3, [r4, #16]
   2a06e:	3b04      	subs	r3, #4
   2a070:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2a072:	2302      	movs	r3, #2
   2a074:	7623      	strb	r3, [r4, #24]
	return bt_send(buf);
   2a076:	4620      	mov	r0, r4
   2a078:	f7ee fdca 	bl	18c10 <bt_send>
}
   2a07c:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   2a07e:	2601      	movs	r6, #1
   2a080:	e7eb      	b.n	2a05a <send_acl+0x14>
	switch (flags) {
   2a082:	f06f 0015 	mvn.w	r0, #21
   2a086:	e7f9      	b.n	2a07c <send_acl+0x36>

0002a088 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a088:	680b      	ldr	r3, [r1, #0]
   2a08a:	6003      	str	r3, [r0, #0]
   2a08c:	888a      	ldrh	r2, [r1, #4]
   2a08e:	798b      	ldrb	r3, [r1, #6]
   2a090:	8082      	strh	r2, [r0, #4]
   2a092:	7183      	strb	r3, [r0, #6]
   2a094:	4770      	bx	lr

0002a096 <process_unack_tx>:
{
   2a096:	b510      	push	{r4, lr}
   2a098:	4604      	mov	r4, r0
   2a09a:	e028      	b.n	2a0ee <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2a09c:	3a01      	subs	r2, #1
   2a09e:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2a0a0:	f383 8811 	msr	BASEPRI, r3
   2a0a4:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2a0a8:	4620      	mov	r0, r4
   2a0aa:	f7f0 f9b9 	bl	1a420 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2a0ae:	f7f8 f8eb 	bl	22288 <z_impl_k_sem_give>
			continue;
   2a0b2:	e01c      	b.n	2a0ee <process_unack_tx+0x58>
   2a0b4:	f383 8811 	msr	BASEPRI, r3
   2a0b8:	f3bf 8f6f 	isb	sy
		if (!node) {
   2a0bc:	b361      	cbz	r1, 2a118 <process_unack_tx+0x82>
	__asm__ volatile(
   2a0be:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a0c2:	f3ef 8311 	mrs	r3, BASEPRI
   2a0c6:	f382 8812 	msr	BASEPRI_MAX, r2
   2a0ca:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2a0ce:	68ca      	ldr	r2, [r1, #12]
   2a0d0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2a0d2:	2200      	movs	r2, #0
   2a0d4:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   2a0d6:	f383 8811 	msr	BASEPRI, r3
   2a0da:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2a0de:	4620      	mov	r0, r4
   2a0e0:	f7ff ff7b 	bl	29fda <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   2a0e4:	4620      	mov	r0, r4
   2a0e6:	f7f0 f99b 	bl	1a420 <bt_conn_get_pkts>
   2a0ea:	f7f8 f8cd 	bl	22288 <z_impl_k_sem_give>
	__asm__ volatile(
   2a0ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a0f2:	f3ef 8311 	mrs	r3, BASEPRI
   2a0f6:	f382 8812 	msr	BASEPRI_MAX, r2
   2a0fa:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2a0fe:	69e2      	ldr	r2, [r4, #28]
   2a100:	2a00      	cmp	r2, #0
   2a102:	d1cb      	bne.n	2a09c <process_unack_tx+0x6>
	return list->head;
   2a104:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2a106:	2900      	cmp	r1, #0
   2a108:	d0d4      	beq.n	2a0b4 <process_unack_tx+0x1e>
	return node->next;
   2a10a:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2a10c:	6162      	str	r2, [r4, #20]
	return list->tail;
   2a10e:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a110:	4281      	cmp	r1, r0
   2a112:	d1cf      	bne.n	2a0b4 <process_unack_tx+0x1e>
	list->tail = node;
   2a114:	61a2      	str	r2, [r4, #24]
}
   2a116:	e7cd      	b.n	2a0b4 <process_unack_tx+0x1e>
}
   2a118:	bd10      	pop	{r4, pc}

0002a11a <bt_conn_reset_rx_state>:
{
   2a11a:	b510      	push	{r4, lr}
   2a11c:	4604      	mov	r4, r0
	if (!conn->rx) {
   2a11e:	6900      	ldr	r0, [r0, #16]
   2a120:	b118      	cbz	r0, 2a12a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2a122:	f001 fdf6 	bl	2bd12 <net_buf_unref>
	conn->rx = NULL;
   2a126:	2300      	movs	r3, #0
   2a128:	6123      	str	r3, [r4, #16]
}
   2a12a:	bd10      	pop	{r4, pc}

0002a12c <conn_cleanup>:
{
   2a12c:	b538      	push	{r3, r4, r5, lr}
   2a12e:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2a130:	2200      	movs	r2, #0
   2a132:	2300      	movs	r3, #0
   2a134:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2a138:	f001 fdaa 	bl	2bc90 <net_buf_get>
   2a13c:	4603      	mov	r3, r0
   2a13e:	b160      	cbz	r0, 2a15a <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2a140:	699c      	ldr	r4, [r3, #24]
		tx_data(buf)->tx = NULL;
   2a142:	2200      	movs	r2, #0
   2a144:	619a      	str	r2, [r3, #24]
		net_buf_unref(buf);
   2a146:	4618      	mov	r0, r3
   2a148:	f001 fde3 	bl	2bd12 <net_buf_unref>
		if (tx) {
   2a14c:	2c00      	cmp	r4, #0
   2a14e:	d0ef      	beq.n	2a130 <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   2a150:	4621      	mov	r1, r4
   2a152:	4628      	mov	r0, r5
   2a154:	f7ff ff41 	bl	29fda <conn_tx_destroy>
   2a158:	e7ea      	b.n	2a130 <conn_cleanup+0x4>
	bt_conn_reset_rx_state(conn);
   2a15a:	4628      	mov	r0, r5
   2a15c:	f7ff ffdd 	bl	2a11a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a160:	2200      	movs	r2, #0
   2a162:	2300      	movs	r3, #0
   2a164:	f105 0058 	add.w	r0, r5, #88	; 0x58
   2a168:	f7f8 fa20 	bl	225ac <k_work_reschedule>
}
   2a16c:	bd38      	pop	{r3, r4, r5, pc}

0002a16e <conn_prepare_events>:
{
   2a16e:	b538      	push	{r3, r4, r5, lr}
   2a170:	f3bf 8f5b 	dmb	ish
   2a174:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2a178:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   2a17c:	b1eb      	cbz	r3, 2a1ba <conn_prepare_events+0x4c>
   2a17e:	4604      	mov	r4, r0
   2a180:	460d      	mov	r5, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   2a182:	7a83      	ldrb	r3, [r0, #10]
   2a184:	b16b      	cbz	r3, 2a1a2 <conn_prepare_events+0x34>
	if (conn->state != BT_CONN_CONNECTED) {
   2a186:	7aa3      	ldrb	r3, [r4, #10]
   2a188:	2b07      	cmp	r3, #7
   2a18a:	d119      	bne.n	2a1c0 <conn_prepare_events+0x52>
	k_poll_event_init(&events[0],
   2a18c:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2a190:	2200      	movs	r2, #0
   2a192:	2104      	movs	r1, #4
   2a194:	4628      	mov	r0, r5
   2a196:	f004 f84e 	bl	2e236 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2a19a:	2301      	movs	r3, #1
   2a19c:	732b      	strb	r3, [r5, #12]
	return 0;
   2a19e:	2000      	movs	r0, #0
}
   2a1a0:	bd38      	pop	{r3, r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   2a1a2:	2106      	movs	r1, #6
   2a1a4:	3004      	adds	r0, #4
   2a1a6:	f7ff ff25 	bl	29ff4 <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2a1aa:	2800      	cmp	r0, #0
   2a1ac:	d0eb      	beq.n	2a186 <conn_prepare_events+0x18>
		conn_cleanup(conn);
   2a1ae:	4620      	mov	r0, r4
   2a1b0:	f7ff ffbc 	bl	2a12c <conn_cleanup>
		return -ENOTCONN;
   2a1b4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2a1b8:	e7f2      	b.n	2a1a0 <conn_prepare_events+0x32>
		return -ENOTCONN;
   2a1ba:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2a1be:	e7ef      	b.n	2a1a0 <conn_prepare_events+0x32>
		return -ENOTCONN;
   2a1c0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2a1c4:	e7ec      	b.n	2a1a0 <conn_prepare_events+0x32>

0002a1c6 <bt_conn_recv>:
{
   2a1c6:	b570      	push	{r4, r5, r6, lr}
   2a1c8:	4604      	mov	r4, r0
   2a1ca:	460d      	mov	r5, r1
   2a1cc:	4616      	mov	r6, r2
	tx_notify(conn);
   2a1ce:	f7ff fedc 	bl	29f8a <tx_notify>
		bt_acl_recv(conn, buf, flags);
   2a1d2:	4632      	mov	r2, r6
   2a1d4:	4629      	mov	r1, r5
   2a1d6:	4620      	mov	r0, r4
   2a1d8:	f7f0 fa20 	bl	1a61c <bt_acl_recv>
}
   2a1dc:	bd70      	pop	{r4, r5, r6, pc}

0002a1de <bt_conn_ref>:
   2a1de:	f3bf 8f5b 	dmb	ish
   2a1e2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2a1e6:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2a1ea:	b1eb      	cbz	r3, 2a228 <bt_conn_ref+0x4a>
{
   2a1ec:	b500      	push	{lr}
   2a1ee:	e006      	b.n	2a1fe <bt_conn_ref+0x20>
   2a1f0:	f3bf 8f5b 	dmb	ish
   2a1f4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2a1f8:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2a1fc:	b193      	cbz	r3, 2a224 <bt_conn_ref+0x46>
   2a1fe:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2a202:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a204:	f3bf 8f5b 	dmb	ish
   2a208:	e852 cf00 	ldrex	ip, [r2]
   2a20c:	459c      	cmp	ip, r3
   2a20e:	d104      	bne.n	2a21a <bt_conn_ref+0x3c>
   2a210:	e842 1e00 	strex	lr, r1, [r2]
   2a214:	f1be 0f00 	cmp.w	lr, #0
   2a218:	d1f6      	bne.n	2a208 <bt_conn_ref+0x2a>
   2a21a:	f3bf 8f5b 	dmb	ish
   2a21e:	d1e7      	bne.n	2a1f0 <bt_conn_ref+0x12>
}
   2a220:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   2a224:	2000      	movs	r0, #0
   2a226:	e7fb      	b.n	2a220 <bt_conn_ref+0x42>
   2a228:	2000      	movs	r0, #0
}
   2a22a:	4770      	bx	lr

0002a22c <bt_conn_unref>:
{
   2a22c:	b508      	push	{r3, lr}
	old = atomic_dec(&conn->ref);
   2a22e:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2a232:	f3bf 8f5b 	dmb	ish
   2a236:	e853 1f00 	ldrex	r1, [r3]
   2a23a:	3901      	subs	r1, #1
   2a23c:	e843 1200 	strex	r2, r1, [r3]
   2a240:	2a00      	cmp	r2, #0
   2a242:	d1f8      	bne.n	2a236 <bt_conn_unref+0xa>
   2a244:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2a248:	8842      	ldrh	r2, [r0, #2]
   2a24a:	f240 1301 	movw	r3, #257	; 0x101
   2a24e:	429a      	cmp	r2, r3
   2a250:	d000      	beq.n	2a254 <bt_conn_unref+0x28>
}
   2a252:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a254:	f3bf 8f5b 	dmb	ish
   2a258:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2a25c:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2a260:	2b00      	cmp	r3, #0
   2a262:	d1f6      	bne.n	2a252 <bt_conn_unref+0x26>
		bt_le_adv_resume();
   2a264:	f7ff fe2b 	bl	29ebe <bt_le_adv_resume>
}
   2a268:	e7f3      	b.n	2a252 <bt_conn_unref+0x26>

0002a26a <conn_lookup_handle>:
{
   2a26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a26c:	4606      	mov	r6, r0
   2a26e:	460d      	mov	r5, r1
   2a270:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2a272:	2400      	movs	r4, #0
   2a274:	e003      	b.n	2a27e <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   2a276:	4660      	mov	r0, ip
   2a278:	f7ff ffd8 	bl	2a22c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2a27c:	3401      	adds	r4, #1
   2a27e:	42ac      	cmp	r4, r5
   2a280:	d21c      	bcs.n	2a2bc <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2a282:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2a286:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   2a28a:	f7ff ffa8 	bl	2a1de <bt_conn_ref>
		if (!conn) {
   2a28e:	4684      	mov	ip, r0
   2a290:	2800      	cmp	r0, #0
   2a292:	d0f3      	beq.n	2a27c <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2a294:	7a83      	ldrb	r3, [r0, #10]
   2a296:	2b01      	cmp	r3, #1
   2a298:	d006      	beq.n	2a2a8 <conn_lookup_handle+0x3e>
   2a29a:	b25a      	sxtb	r2, r3
   2a29c:	2a00      	cmp	r2, #0
   2a29e:	d0ea      	beq.n	2a276 <conn_lookup_handle+0xc>
   2a2a0:	3b07      	subs	r3, #7
   2a2a2:	b2db      	uxtb	r3, r3
   2a2a4:	2b01      	cmp	r3, #1
   2a2a6:	d8e6      	bhi.n	2a276 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   2a2a8:	f8bc 3000 	ldrh.w	r3, [ip]
   2a2ac:	42bb      	cmp	r3, r7
   2a2ae:	d101      	bne.n	2a2b4 <conn_lookup_handle+0x4a>
}
   2a2b0:	4660      	mov	r0, ip
   2a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   2a2b4:	4660      	mov	r0, ip
   2a2b6:	f7ff ffb9 	bl	2a22c <bt_conn_unref>
			continue;
   2a2ba:	e7df      	b.n	2a27c <conn_lookup_handle+0x12>
	return NULL;
   2a2bc:	f04f 0c00 	mov.w	ip, #0
   2a2c0:	e7f6      	b.n	2a2b0 <conn_lookup_handle+0x46>

0002a2c2 <bt_conn_connected>:
{
   2a2c2:	b510      	push	{r4, lr}
   2a2c4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2a2c6:	f7f1 f9dd 	bl	1b684 <bt_l2cap_connected>
	notify_connected(conn);
   2a2ca:	4620      	mov	r0, r4
   2a2cc:	f7f0 f840 	bl	1a350 <notify_connected>
}
   2a2d0:	bd10      	pop	{r4, pc}

0002a2d2 <bt_conn_get_security>:
}
   2a2d2:	2001      	movs	r0, #1
   2a2d4:	4770      	bx	lr

0002a2d6 <bt_conn_add_le>:
{
   2a2d6:	b570      	push	{r4, r5, r6, lr}
   2a2d8:	4606      	mov	r6, r0
   2a2da:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   2a2dc:	f7f0 f996 	bl	1a60c <acl_conn_new>
	if (!conn) {
   2a2e0:	4604      	mov	r4, r0
   2a2e2:	b160      	cbz	r0, 2a2fe <bt_conn_add_le+0x28>
	conn->id = id;
   2a2e4:	7206      	strb	r6, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
   2a2e6:	4629      	mov	r1, r5
   2a2e8:	3088      	adds	r0, #136	; 0x88
   2a2ea:	f7ff fecd 	bl	2a088 <bt_addr_le_copy>
	conn->type = BT_CONN_TYPE_LE;
   2a2ee:	2301      	movs	r3, #1
   2a2f0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2a2f2:	2318      	movs	r3, #24
   2a2f4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2a2f8:	2328      	movs	r3, #40	; 0x28
   2a2fa:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   2a2fe:	4620      	mov	r0, r4
   2a300:	bd70      	pop	{r4, r5, r6, pc}

0002a302 <bt_conn_is_peer_addr_le>:
{
   2a302:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2a304:	7a03      	ldrb	r3, [r0, #8]
   2a306:	428b      	cmp	r3, r1
   2a308:	d001      	beq.n	2a30e <bt_conn_is_peer_addr_le+0xc>
		return false;
   2a30a:	2000      	movs	r0, #0
}
   2a30c:	bd38      	pop	{r3, r4, r5, pc}
   2a30e:	4604      	mov	r4, r0
   2a310:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2a312:	2207      	movs	r2, #7
   2a314:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2a318:	4628      	mov	r0, r5
   2a31a:	f003 ffc6 	bl	2e2aa <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2a31e:	b1a8      	cbz	r0, 2a34c <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2a320:	78e3      	ldrb	r3, [r4, #3]
   2a322:	b14b      	cbz	r3, 2a338 <bt_conn_is_peer_addr_le+0x36>
   2a324:	2207      	movs	r2, #7
   2a326:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2a32a:	4628      	mov	r0, r5
   2a32c:	f003 ffbd 	bl	2e2aa <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2a330:	fab0 f080 	clz	r0, r0
   2a334:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   2a336:	e7e9      	b.n	2a30c <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   2a338:	2207      	movs	r2, #7
   2a33a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2a33e:	4628      	mov	r0, r5
   2a340:	f003 ffb3 	bl	2e2aa <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2a344:	fab0 f080 	clz	r0, r0
   2a348:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   2a34a:	e7df      	b.n	2a30c <bt_conn_is_peer_addr_le+0xa>
		return true;
   2a34c:	2001      	movs	r0, #1
   2a34e:	e7dd      	b.n	2a30c <bt_conn_is_peer_addr_le+0xa>

0002a350 <bt_conn_le_conn_update>:
{
   2a350:	b570      	push	{r4, r5, r6, lr}
   2a352:	4605      	mov	r5, r0
   2a354:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2a356:	210e      	movs	r1, #14
   2a358:	f242 0013 	movw	r0, #8211	; 0x2013
   2a35c:	f7ed fdea 	bl	17f34 <bt_hci_cmd_create>
	if (!buf) {
   2a360:	b1c8      	cbz	r0, 2a396 <bt_conn_le_conn_update+0x46>
   2a362:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2a364:	210e      	movs	r1, #14
   2a366:	300c      	adds	r0, #12
   2a368:	f001 fd1a 	bl	2bda0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2a36c:	2200      	movs	r2, #0
   2a36e:	6002      	str	r2, [r0, #0]
   2a370:	6042      	str	r2, [r0, #4]
   2a372:	6082      	str	r2, [r0, #8]
   2a374:	8182      	strh	r2, [r0, #12]
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2a376:	882b      	ldrh	r3, [r5, #0]
   2a378:	8003      	strh	r3, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2a37a:	8823      	ldrh	r3, [r4, #0]
   2a37c:	8043      	strh	r3, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2a37e:	8863      	ldrh	r3, [r4, #2]
   2a380:	8083      	strh	r3, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2a382:	88a3      	ldrh	r3, [r4, #4]
   2a384:	80c3      	strh	r3, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2a386:	88e3      	ldrh	r3, [r4, #6]
   2a388:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2a38a:	4631      	mov	r1, r6
   2a38c:	f242 0013 	movw	r0, #8211	; 0x2013
   2a390:	f7ed fe0e 	bl	17fb0 <bt_hci_cmd_send_sync>
}
   2a394:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2a396:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a39a:	e7fb      	b.n	2a394 <bt_conn_le_conn_update+0x44>

0002a39c <l2cap_connected>:
}
   2a39c:	4770      	bx	lr

0002a39e <l2cap_disconnected>:
}
   2a39e:	4770      	bx	lr

0002a3a0 <l2cap_chan_recv>:
{
   2a3a0:	b510      	push	{r4, lr}
   2a3a2:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2a3a4:	6843      	ldr	r3, [r0, #4]
   2a3a6:	695b      	ldr	r3, [r3, #20]
   2a3a8:	4798      	blx	r3
	net_buf_unref(buf);
   2a3aa:	4620      	mov	r0, r4
   2a3ac:	f001 fcb1 	bl	2bd12 <net_buf_unref>
}
   2a3b0:	bd10      	pop	{r4, pc}

0002a3b2 <bt_l2cap_chan_del>:
{
   2a3b2:	b538      	push	{r3, r4, r5, lr}
   2a3b4:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2a3b6:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2a3b8:	6803      	ldr	r3, [r0, #0]
   2a3ba:	b123      	cbz	r3, 2a3c6 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2a3bc:	686b      	ldr	r3, [r5, #4]
   2a3be:	b103      	cbz	r3, 2a3c2 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2a3c0:	4798      	blx	r3
	chan->conn = NULL;
   2a3c2:	2300      	movs	r3, #0
   2a3c4:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2a3c6:	68e3      	ldr	r3, [r4, #12]
   2a3c8:	b10b      	cbz	r3, 2a3ce <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2a3ca:	4620      	mov	r0, r4
   2a3cc:	4798      	blx	r3
	if (ops->released) {
   2a3ce:	6a2b      	ldr	r3, [r5, #32]
   2a3d0:	b10b      	cbz	r3, 2a3d6 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2a3d2:	4620      	mov	r0, r4
   2a3d4:	4798      	blx	r3
}
   2a3d6:	bd38      	pop	{r3, r4, r5, pc}

0002a3d8 <bt_l2cap_chan_add>:
{
   2a3d8:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2a3da:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   2a3de:	2400      	movs	r4, #0
   2a3e0:	608c      	str	r4, [r1, #8]
	return list->tail;
   2a3e2:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   2a3e4:	b134      	cbz	r4, 2a3f4 <bt_l2cap_chan_add+0x1c>
	parent->next = child;
   2a3e6:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2a3e8:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   2a3ea:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2a3ec:	60ca      	str	r2, [r1, #12]
}
   2a3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
   2a3f2:	4770      	bx	lr
   2a3f4:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   2a3f6:	6503      	str	r3, [r0, #80]	; 0x50
}
   2a3f8:	e7f7      	b.n	2a3ea <bt_l2cap_chan_add+0x12>

0002a3fa <bt_l2cap_disconnected>:
{
   2a3fa:	b510      	push	{r4, lr}
	return list->head;
   2a3fc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a3fe:	b138      	cbz	r0, 2a410 <bt_l2cap_disconnected+0x16>
   2a400:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a402:	f110 0408 	adds.w	r4, r0, #8
   2a406:	d008      	beq.n	2a41a <bt_l2cap_disconnected+0x20>
	return node->next;
   2a408:	6884      	ldr	r4, [r0, #8]
   2a40a:	b134      	cbz	r4, 2a41a <bt_l2cap_disconnected+0x20>
   2a40c:	3c08      	subs	r4, #8
   2a40e:	e004      	b.n	2a41a <bt_l2cap_disconnected+0x20>
   2a410:	4604      	mov	r4, r0
   2a412:	e002      	b.n	2a41a <bt_l2cap_disconnected+0x20>
   2a414:	4623      	mov	r3, r4
   2a416:	4620      	mov	r0, r4
   2a418:	461c      	mov	r4, r3
   2a41a:	b140      	cbz	r0, 2a42e <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   2a41c:	f7ff ffc9 	bl	2a3b2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a420:	2c00      	cmp	r4, #0
   2a422:	d0f7      	beq.n	2a414 <bt_l2cap_disconnected+0x1a>
   2a424:	68a3      	ldr	r3, [r4, #8]
   2a426:	2b00      	cmp	r3, #0
   2a428:	d0f5      	beq.n	2a416 <bt_l2cap_disconnected+0x1c>
   2a42a:	3b08      	subs	r3, #8
   2a42c:	e7f3      	b.n	2a416 <bt_l2cap_disconnected+0x1c>
}
   2a42e:	bd10      	pop	{r4, pc}

0002a430 <bt_l2cap_create_pdu_timeout>:
{
   2a430:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2a432:	3104      	adds	r1, #4
   2a434:	f7f0 fcb0 	bl	1ad98 <bt_conn_create_pdu_timeout>
}
   2a438:	bd08      	pop	{r3, pc}

0002a43a <bt_l2cap_send_cb>:
{
   2a43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a43c:	4605      	mov	r5, r0
   2a43e:	460f      	mov	r7, r1
   2a440:	4614      	mov	r4, r2
   2a442:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   2a444:	2104      	movs	r1, #4
   2a446:	f102 000c 	add.w	r0, r2, #12
   2a44a:	f001 fcc1 	bl	2bdd0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a44e:	8a23      	ldrh	r3, [r4, #16]
   2a450:	3b04      	subs	r3, #4
   2a452:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   2a454:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2a456:	9b06      	ldr	r3, [sp, #24]
   2a458:	4632      	mov	r2, r6
   2a45a:	4621      	mov	r1, r4
   2a45c:	4628      	mov	r0, r5
   2a45e:	f7f0 fa37 	bl	1a8d0 <bt_conn_send_cb>
}
   2a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a464 <l2cap_send>:
{
   2a464:	b510      	push	{r4, lr}
   2a466:	b082      	sub	sp, #8
   2a468:	4614      	mov	r4, r2
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2a46a:	2300      	movs	r3, #0
   2a46c:	9300      	str	r3, [sp, #0]
   2a46e:	f7ff ffe4 	bl	2a43a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2a472:	b908      	cbnz	r0, 2a478 <l2cap_send+0x14>
}
   2a474:	b002      	add	sp, #8
   2a476:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   2a478:	4620      	mov	r0, r4
   2a47a:	f001 fc4a 	bl	2bd12 <net_buf_unref>
}
   2a47e:	e7f9      	b.n	2a474 <l2cap_send+0x10>

0002a480 <l2cap_send_reject>:
{
   2a480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a484:	4606      	mov	r6, r0
   2a486:	4690      	mov	r8, r2
   2a488:	461c      	mov	r4, r3
   2a48a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2a48e:	1cbb      	adds	r3, r7, #2
   2a490:	460a      	mov	r2, r1
   2a492:	2101      	movs	r1, #1
   2a494:	2000      	movs	r0, #0
   2a496:	f7f1 f92f 	bl	1b6f8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2a49a:	b198      	cbz	r0, 2a4c4 <l2cap_send_reject+0x44>
   2a49c:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   2a49e:	f100 090c 	add.w	r9, r0, #12
   2a4a2:	2102      	movs	r1, #2
   2a4a4:	4648      	mov	r0, r9
   2a4a6:	f001 fc7b 	bl	2bda0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2a4aa:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   2a4ae:	b124      	cbz	r4, 2a4ba <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2a4b0:	463a      	mov	r2, r7
   2a4b2:	4621      	mov	r1, r4
   2a4b4:	4648      	mov	r0, r9
   2a4b6:	f001 fc79 	bl	2bdac <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   2a4ba:	462a      	mov	r2, r5
   2a4bc:	2105      	movs	r1, #5
   2a4be:	4630      	mov	r0, r6
   2a4c0:	f7ff ffd0 	bl	2a464 <l2cap_send>
}
   2a4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a4c8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2a4c8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a4ca:	b110      	cbz	r0, 2a4d2 <bt_l2cap_le_lookup_rx_cid+0xa>
   2a4cc:	3808      	subs	r0, #8
   2a4ce:	e000      	b.n	2a4d2 <bt_l2cap_le_lookup_rx_cid+0xa>
   2a4d0:	4618      	mov	r0, r3
   2a4d2:	b150      	cbz	r0, 2a4ea <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2a4d4:	8a83      	ldrh	r3, [r0, #20]
   2a4d6:	428b      	cmp	r3, r1
   2a4d8:	d007      	beq.n	2a4ea <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a4da:	f110 0308 	adds.w	r3, r0, #8
   2a4de:	d0f7      	beq.n	2a4d0 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   2a4e0:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a4e2:	2800      	cmp	r0, #0
   2a4e4:	d0f5      	beq.n	2a4d2 <bt_l2cap_le_lookup_rx_cid+0xa>
   2a4e6:	3808      	subs	r0, #8
   2a4e8:	e7f3      	b.n	2a4d2 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2a4ea:	4770      	bx	lr

0002a4ec <bt_l2cap_update_conn_param>:
{
   2a4ec:	b570      	push	{r4, r5, r6, lr}
   2a4ee:	b082      	sub	sp, #8
   2a4f0:	4605      	mov	r5, r0
   2a4f2:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2a4f4:	f7f0 ffe2 	bl	1b4bc <get_ident>
   2a4f8:	4602      	mov	r2, r0
   2a4fa:	2308      	movs	r3, #8
   2a4fc:	2112      	movs	r1, #18
   2a4fe:	2000      	movs	r0, #0
   2a500:	f7f1 f8fa 	bl	1b6f8 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2a504:	b1e0      	cbz	r0, 2a540 <bt_l2cap_update_conn_param+0x54>
   2a506:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   2a508:	2108      	movs	r1, #8
   2a50a:	300c      	adds	r0, #12
   2a50c:	f001 fc48 	bl	2bda0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2a510:	8823      	ldrh	r3, [r4, #0]
   2a512:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2a514:	8863      	ldrh	r3, [r4, #2]
   2a516:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2a518:	88a3      	ldrh	r3, [r4, #4]
   2a51a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2a51c:	88e3      	ldrh	r3, [r4, #6]
   2a51e:	80c3      	strh	r3, [r0, #6]
   2a520:	2300      	movs	r3, #0
   2a522:	9300      	str	r3, [sp, #0]
   2a524:	4632      	mov	r2, r6
   2a526:	2105      	movs	r1, #5
   2a528:	4628      	mov	r0, r5
   2a52a:	f7ff ff86 	bl	2a43a <bt_l2cap_send_cb>
	if (err) {
   2a52e:	4604      	mov	r4, r0
   2a530:	b910      	cbnz	r0, 2a538 <bt_l2cap_update_conn_param+0x4c>
}
   2a532:	4620      	mov	r0, r4
   2a534:	b002      	add	sp, #8
   2a536:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2a538:	4630      	mov	r0, r6
   2a53a:	f001 fbea 	bl	2bd12 <net_buf_unref>
		return err;
   2a53e:	e7f8      	b.n	2a532 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2a540:	f06f 040b 	mvn.w	r4, #11
   2a544:	e7f5      	b.n	2a532 <bt_l2cap_update_conn_param+0x46>

0002a546 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2a546:	4770      	bx	lr

0002a548 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2a548:	460b      	mov	r3, r1
   2a54a:	b139      	cbz	r1, 2a55c <sys_slist_remove+0x14>
	return node->next;
   2a54c:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2a54e:	6019      	str	r1, [r3, #0]
	return list->tail;
   2a550:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a552:	428a      	cmp	r2, r1
   2a554:	d009      	beq.n	2a56a <sys_slist_remove+0x22>
	parent->next = child;
   2a556:	2300      	movs	r3, #0
   2a558:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a55a:	4770      	bx	lr
	return node->next;
   2a55c:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2a55e:	6003      	str	r3, [r0, #0]
	return list->tail;
   2a560:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a562:	428a      	cmp	r2, r1
   2a564:	d1f7      	bne.n	2a556 <sys_slist_remove+0xe>
	list->tail = node;
   2a566:	6043      	str	r3, [r0, #4]
}
   2a568:	e7f5      	b.n	2a556 <sys_slist_remove+0xe>
	list->tail = node;
   2a56a:	6043      	str	r3, [r0, #4]
}
   2a56c:	e7f3      	b.n	2a556 <sys_slist_remove+0xe>

0002a56e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a56e:	b508      	push	{r3, lr}
   2a570:	460a      	mov	r2, r1
	return list->head;
   2a572:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a574:	2100      	movs	r1, #0
   2a576:	e001      	b.n	2a57c <sys_slist_find_and_remove+0xe>
   2a578:	4619      	mov	r1, r3
   2a57a:	681b      	ldr	r3, [r3, #0]
   2a57c:	b12b      	cbz	r3, 2a58a <sys_slist_find_and_remove+0x1c>
   2a57e:	4293      	cmp	r3, r2
   2a580:	d1fa      	bne.n	2a578 <sys_slist_find_and_remove+0xa>
   2a582:	f7ff ffe1 	bl	2a548 <sys_slist_remove>
   2a586:	2001      	movs	r0, #1
   2a588:	e000      	b.n	2a58c <sys_slist_find_and_remove+0x1e>
   2a58a:	2000      	movs	r0, #0
   2a58c:	bd08      	pop	{r3, pc}

0002a58e <get_first_req_matching_chan>:
{
   2a58e:	4603      	mov	r3, r0
	return list->head;
   2a590:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2a592:	b120      	cbz	r0, 2a59e <get_first_req_matching_chan+0x10>
	return node->next;
   2a594:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a596:	601a      	str	r2, [r3, #0]
	return list->tail;
   2a598:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a59a:	4288      	cmp	r0, r1
   2a59c:	d000      	beq.n	2a5a0 <get_first_req_matching_chan+0x12>
}
   2a59e:	4770      	bx	lr
	list->tail = node;
   2a5a0:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   2a5a2:	e7fc      	b.n	2a59e <get_first_req_matching_chan+0x10>

0002a5a4 <range_is_valid>:
	if (!start || !end) {
   2a5a4:	b120      	cbz	r0, 2a5b0 <range_is_valid+0xc>
   2a5a6:	b119      	cbz	r1, 2a5b0 <range_is_valid+0xc>
	if (start > end) {
   2a5a8:	4288      	cmp	r0, r1
   2a5aa:	d806      	bhi.n	2a5ba <range_is_valid+0x16>
	return true;
   2a5ac:	2001      	movs	r0, #1
}
   2a5ae:	4770      	bx	lr
		if (err) {
   2a5b0:	b10a      	cbz	r2, 2a5b6 <range_is_valid+0x12>
			*err = 0U;
   2a5b2:	2300      	movs	r3, #0
   2a5b4:	8013      	strh	r3, [r2, #0]
		return false;
   2a5b6:	2000      	movs	r0, #0
   2a5b8:	4770      	bx	lr
		if (err) {
   2a5ba:	b102      	cbz	r2, 2a5be <range_is_valid+0x1a>
			*err = start;
   2a5bc:	8010      	strh	r0, [r2, #0]
		return false;
   2a5be:	2000      	movs	r0, #0
   2a5c0:	4770      	bx	lr

0002a5c2 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2a5c2:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2a5c6:	d201      	bcs.n	2a5cc <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   2a5c8:	200e      	movs	r0, #14
}
   2a5ca:	4770      	bx	lr
		return -err;
   2a5cc:	4240      	negs	r0, r0
   2a5ce:	b2c0      	uxtb	r0, r0
   2a5d0:	4770      	bx	lr

0002a5d2 <attr_read_type_cb>:
{
   2a5d2:	b410      	push	{r4}
	if (!data->rsp->len) {
   2a5d4:	68d4      	ldr	r4, [r2, #12]
   2a5d6:	7823      	ldrb	r3, [r4, #0]
   2a5d8:	b92b      	cbnz	r3, 2a5e6 <attr_read_type_cb+0x14>
		data->rsp->len = read + sizeof(*data->item);
   2a5da:	3102      	adds	r1, #2
   2a5dc:	7021      	strb	r1, [r4, #0]
	return true;
   2a5de:	2001      	movs	r0, #1
}
   2a5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
   2a5e4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2a5e6:	3102      	adds	r1, #2
   2a5e8:	428b      	cmp	r3, r1
   2a5ea:	d005      	beq.n	2a5f8 <attr_read_type_cb+0x26>
		frag->len -= sizeof(*data->item);
   2a5ec:	8a03      	ldrh	r3, [r0, #16]
   2a5ee:	3b02      	subs	r3, #2
   2a5f0:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2a5f2:	2000      	movs	r0, #0
   2a5f4:	6110      	str	r0, [r2, #16]
		return false;
   2a5f6:	e7f3      	b.n	2a5e0 <attr_read_type_cb+0xe>
	return true;
   2a5f8:	2001      	movs	r0, #1
   2a5fa:	e7f1      	b.n	2a5e0 <attr_read_type_cb+0xe>

0002a5fc <attr_read_group_cb>:
	if (!data->rsp->len) {
   2a5fc:	68d0      	ldr	r0, [r2, #12]
   2a5fe:	7803      	ldrb	r3, [r0, #0]
   2a600:	b91b      	cbnz	r3, 2a60a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2a602:	3104      	adds	r1, #4
   2a604:	7001      	strb	r1, [r0, #0]
	return true;
   2a606:	2001      	movs	r0, #1
   2a608:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2a60a:	3104      	adds	r1, #4
   2a60c:	428b      	cmp	r3, r1
   2a60e:	d006      	beq.n	2a61e <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2a610:	6891      	ldr	r1, [r2, #8]
   2a612:	8a0b      	ldrh	r3, [r1, #16]
   2a614:	3b04      	subs	r3, #4
   2a616:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2a618:	2000      	movs	r0, #0
   2a61a:	6110      	str	r0, [r2, #16]
		return false;
   2a61c:	4770      	bx	lr
	return true;
   2a61e:	2001      	movs	r0, #1
}
   2a620:	4770      	bx	lr

0002a622 <att_prepare_write_req>:
}
   2a622:	2006      	movs	r0, #6
   2a624:	4770      	bx	lr

0002a626 <att_exec_write_req>:
}
   2a626:	2006      	movs	r0, #6
   2a628:	4770      	bx	lr

0002a62a <att_chan_attach>:
{
   2a62a:	b538      	push	{r3, r4, r5, lr}
   2a62c:	4604      	mov	r4, r0
   2a62e:	460d      	mov	r5, r1
	return list->head;
   2a630:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   2a632:	b143      	cbz	r3, 2a646 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   2a634:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
   2a638:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   2a63a:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
	list->head = node;
   2a63e:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   2a640:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   2a642:	b122      	cbz	r2, 2a64e <att_chan_attach+0x24>
}
   2a644:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   2a646:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2a648:	f003 f83e 	bl	2d6c8 <z_impl_k_queue_init>
}
   2a64c:	e7f2      	b.n	2a634 <att_chan_attach+0xa>
	list->tail = node;
   2a64e:	62a3      	str	r3, [r4, #40]	; 0x28
}
   2a650:	e7f8      	b.n	2a644 <att_chan_attach+0x1a>

0002a652 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a652:	094b      	lsrs	r3, r1, #5
   2a654:	f3bf 8f5b 	dmb	ish
   2a658:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2a65c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a660:	f001 011f 	and.w	r1, r1, #31
   2a664:	4108      	asrs	r0, r1
}
   2a666:	f000 0001 	and.w	r0, r0, #1
   2a66a:	4770      	bx	lr

0002a66c <chan_unknown>:
{
   2a66c:	b508      	push	{r3, lr}
	tx_meta_data_free(user_data);
   2a66e:	4608      	mov	r0, r1
   2a670:	f7f1 fc1e 	bl	1beb0 <tx_meta_data_free>
}
   2a674:	bd08      	pop	{r3, pc}

0002a676 <chan_tx_complete>:
{
   2a676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a67a:	4605      	mov	r5, r0
   2a67c:	4608      	mov	r0, r1
   2a67e:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   2a680:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   2a682:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   2a684:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   2a688:	f7f1 fc12 	bl	1beb0 <tx_meta_data_free>
	if (!err && func) {
   2a68c:	b94c      	cbnz	r4, 2a6a2 <chan_tx_complete+0x2c>
   2a68e:	b146      	cbz	r6, 2a6a2 <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   2a690:	2400      	movs	r4, #0
   2a692:	e004      	b.n	2a69e <chan_tx_complete+0x28>
			func(conn, ud);
   2a694:	4641      	mov	r1, r8
   2a696:	4628      	mov	r0, r5
   2a698:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   2a69a:	3401      	adds	r4, #1
   2a69c:	b2a4      	uxth	r4, r4
   2a69e:	42a7      	cmp	r7, r4
   2a6a0:	d8f8      	bhi.n	2a694 <chan_tx_complete+0x1e>
}
   2a6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a6a6 <bt_att_chan_send>:
{
   2a6a6:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   2a6a8:	f7f1 fc10 	bl	1becc <chan_send>
}
   2a6ac:	bd08      	pop	{r3, pc}

0002a6ae <chan_req_send>:
{
   2a6ae:	b570      	push	{r4, r5, r6, lr}
   2a6b0:	4605      	mov	r5, r0
   2a6b2:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a6b4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2a6b6:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2a6b8:	2200      	movs	r2, #0
	while (buf) {
   2a6ba:	e003      	b.n	2a6c4 <chan_req_send+0x16>
		bytes += buf->len;
   2a6bc:	f8b3 c010 	ldrh.w	ip, [r3, #16]
   2a6c0:	4462      	add	r2, ip
		buf = buf->frags;
   2a6c2:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2a6c4:	2b00      	cmp	r3, #0
   2a6c6:	d1f9      	bne.n	2a6bc <chan_req_send+0xe>
   2a6c8:	4291      	cmp	r1, r2
   2a6ca:	d30d      	bcc.n	2a6e8 <chan_req_send+0x3a>
	chan->req = req;
   2a6cc:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
	buf = req->buf;
   2a6d0:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   2a6d2:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   2a6d4:	4631      	mov	r1, r6
   2a6d6:	4628      	mov	r0, r5
   2a6d8:	f7ff ffe5 	bl	2a6a6 <bt_att_chan_send>
	if (err) {
   2a6dc:	b118      	cbz	r0, 2a6e6 <chan_req_send+0x38>
		req->buf = buf;
   2a6de:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   2a6e0:	2300      	movs	r3, #0
   2a6e2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
   2a6e6:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2a6e8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2a6ec:	e7fb      	b.n	2a6e6 <chan_req_send+0x38>

0002a6ee <bt_att_chan_req_send>:
{
   2a6ee:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   2a6f0:	f7ff ffdd 	bl	2a6ae <chan_req_send>
}
   2a6f4:	bd08      	pop	{r3, pc}

0002a6f6 <bt_att_status>:
{
   2a6f6:	b570      	push	{r4, r5, r6, lr}
   2a6f8:	4604      	mov	r4, r0
   2a6fa:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2a6fc:	2100      	movs	r1, #0
   2a6fe:	f7ff ffa8 	bl	2a652 <atomic_test_bit>
   2a702:	b130      	cbz	r0, 2a712 <bt_att_status+0x1c>
   2a704:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   2a706:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a70a:	b113      	cbz	r3, 2a712 <bt_att_status+0x1c>
	if (chan->req) {
   2a70c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   2a710:	b102      	cbz	r2, 2a714 <bt_att_status+0x1e>
}
   2a712:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   2a714:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2a716:	2d00      	cmp	r5, #0
   2a718:	d0fb      	beq.n	2a712 <bt_att_status+0x1c>
	return node->next;
   2a71a:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2a71c:	605a      	str	r2, [r3, #4]
	return list->tail;
   2a71e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a720:	42a9      	cmp	r1, r5
   2a722:	d00f      	beq.n	2a744 <bt_att_status+0x4e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a724:	4629      	mov	r1, r5
   2a726:	4630      	mov	r0, r6
   2a728:	f7ff ffe1 	bl	2a6ee <bt_att_chan_req_send>
   2a72c:	2800      	cmp	r0, #0
   2a72e:	daf0      	bge.n	2a712 <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   2a730:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   2a734:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2a736:	602a      	str	r2, [r5, #0]
	list->head = node;
   2a738:	605d      	str	r5, [r3, #4]
	return list->tail;
   2a73a:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   2a73c:	2a00      	cmp	r2, #0
   2a73e:	d1e8      	bne.n	2a712 <bt_att_status+0x1c>
	list->tail = node;
   2a740:	609d      	str	r5, [r3, #8]
}
   2a742:	e7e6      	b.n	2a712 <bt_att_status+0x1c>
	list->tail = node;
   2a744:	609a      	str	r2, [r3, #8]
	if (!node) {
   2a746:	e7ed      	b.n	2a724 <bt_att_status+0x2e>

0002a748 <att_req_send_process>:
{
   2a748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a74c:	4607      	mov	r7, r0
	return list->head;
   2a74e:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a750:	b3ac      	cbz	r4, 2a7be <att_req_send_process+0x76>
   2a752:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a754:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   2a758:	d003      	beq.n	2a762 <att_req_send_process+0x1a>
	return node->next;
   2a75a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   2a75e:	b105      	cbz	r5, 2a762 <att_req_send_process+0x1a>
   2a760:	3de0      	subs	r5, #224	; 0xe0
   2a762:	f04f 0800 	mov.w	r8, #0
   2a766:	4646      	mov	r6, r8
   2a768:	e02e      	b.n	2a7c8 <att_req_send_process+0x80>
		if (!req && prev &&
   2a76a:	b196      	cbz	r6, 2a792 <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   2a76c:	4621      	mov	r1, r4
   2a76e:	1d38      	adds	r0, r7, #4
   2a770:	f7ff ff0d 	bl	2a58e <get_first_req_matching_chan>
		if (!req) {
   2a774:	4606      	mov	r6, r0
   2a776:	b300      	cbz	r0, 2a7ba <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2a778:	4601      	mov	r1, r0
   2a77a:	4620      	mov	r0, r4
   2a77c:	f7ff ffb7 	bl	2a6ee <bt_att_chan_req_send>
   2a780:	2800      	cmp	r0, #0
   2a782:	da2e      	bge.n	2a7e2 <att_req_send_process+0x9a>
	return list->head;
   2a784:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   2a786:	6033      	str	r3, [r6, #0]
	list->head = node;
   2a788:	607e      	str	r6, [r7, #4]
	return list->tail;
   2a78a:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   2a78c:	b193      	cbz	r3, 2a7b4 <att_req_send_process+0x6c>
		prev = chan;
   2a78e:	46a0      	mov	r8, r4
   2a790:	e01f      	b.n	2a7d2 <att_req_send_process+0x8a>
		if (!req && prev &&
   2a792:	f1b8 0f00 	cmp.w	r8, #0
   2a796:	d0e9      	beq.n	2a76c <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2a798:	2103      	movs	r1, #3
   2a79a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2a79e:	f7ff ff58 	bl	2a652 <atomic_test_bit>
   2a7a2:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2a7a4:	2103      	movs	r1, #3
   2a7a6:	f108 0090 	add.w	r0, r8, #144	; 0x90
   2a7aa:	f7ff ff52 	bl	2a652 <atomic_test_bit>
		if (!req && prev &&
   2a7ae:	4581      	cmp	r9, r0
   2a7b0:	d1dc      	bne.n	2a76c <att_req_send_process+0x24>
   2a7b2:	e00e      	b.n	2a7d2 <att_req_send_process+0x8a>
	list->tail = node;
   2a7b4:	60be      	str	r6, [r7, #8]
		prev = chan;
   2a7b6:	46a0      	mov	r8, r4
}
   2a7b8:	e00b      	b.n	2a7d2 <att_req_send_process+0x8a>
   2a7ba:	46a0      	mov	r8, r4
   2a7bc:	e009      	b.n	2a7d2 <att_req_send_process+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a7be:	4625      	mov	r5, r4
   2a7c0:	e7cf      	b.n	2a762 <att_req_send_process+0x1a>
   2a7c2:	462b      	mov	r3, r5
   2a7c4:	462c      	mov	r4, r5
   2a7c6:	461d      	mov	r5, r3
   2a7c8:	b15c      	cbz	r4, 2a7e2 <att_req_send_process+0x9a>
		if (chan->req) {
   2a7ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2a7ce:	2b00      	cmp	r3, #0
   2a7d0:	d0cb      	beq.n	2a76a <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a7d2:	2d00      	cmp	r5, #0
   2a7d4:	d0f5      	beq.n	2a7c2 <att_req_send_process+0x7a>
	return node->next;
   2a7d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   2a7da:	2b00      	cmp	r3, #0
   2a7dc:	d0f2      	beq.n	2a7c4 <att_req_send_process+0x7c>
   2a7de:	3be0      	subs	r3, #224	; 0xe0
   2a7e0:	e7f0      	b.n	2a7c4 <att_req_send_process+0x7c>
}
   2a7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a7e6 <chan_req_sent>:
{
   2a7e6:	b510      	push	{r4, lr}
   2a7e8:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   2a7ea:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   2a7ec:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2a7f0:	b12b      	cbz	r3, 2a7fe <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2a7f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a7f6:	2300      	movs	r3, #0
   2a7f8:	30b0      	adds	r0, #176	; 0xb0
   2a7fa:	f7f7 fed7 	bl	225ac <k_work_reschedule>
	tx_meta_data_free(user_data);
   2a7fe:	4620      	mov	r0, r4
   2a800:	f7f1 fb56 	bl	1beb0 <tx_meta_data_free>
}
   2a804:	bd10      	pop	{r4, pc}

0002a806 <chan_cfm_sent>:
{
   2a806:	b508      	push	{r3, lr}
   2a808:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2a80a:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2a80c:	3390      	adds	r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a80e:	f3bf 8f5b 	dmb	ish
   2a812:	e853 1f00 	ldrex	r1, [r3]
   2a816:	f021 0102 	bic.w	r1, r1, #2
   2a81a:	e843 1200 	strex	r2, r1, [r3]
   2a81e:	2a00      	cmp	r2, #0
   2a820:	d1f7      	bne.n	2a812 <chan_cfm_sent+0xc>
   2a822:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2a826:	f7f1 fb43 	bl	1beb0 <tx_meta_data_free>
}
   2a82a:	bd08      	pop	{r3, pc}

0002a82c <chan_rsp_sent>:
{
   2a82c:	b508      	push	{r3, lr}
   2a82e:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   2a830:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2a832:	3390      	adds	r3, #144	; 0x90
   2a834:	f3bf 8f5b 	dmb	ish
   2a838:	e853 1f00 	ldrex	r1, [r3]
   2a83c:	f021 0101 	bic.w	r1, r1, #1
   2a840:	e843 1200 	strex	r2, r1, [r3]
   2a844:	2a00      	cmp	r2, #0
   2a846:	d1f7      	bne.n	2a838 <chan_rsp_sent+0xc>
   2a848:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2a84c:	f7f1 fb30 	bl	1beb0 <tx_meta_data_free>
}
   2a850:	bd08      	pop	{r3, pc}

0002a852 <get_first_buf_matching_chan>:
{
   2a852:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2a854:	2200      	movs	r2, #0
   2a856:	2300      	movs	r3, #0
   2a858:	f001 fa1a 	bl	2bc90 <net_buf_get>
}
   2a85c:	bd08      	pop	{r3, pc}

0002a85e <process_queue>:
{
   2a85e:	b570      	push	{r4, r5, r6, lr}
   2a860:	4604      	mov	r4, r0
   2a862:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   2a864:	4601      	mov	r1, r0
   2a866:	4628      	mov	r0, r5
   2a868:	f7ff fff3 	bl	2a852 <get_first_buf_matching_chan>
	if (buf) {
   2a86c:	b168      	cbz	r0, 2a88a <process_queue+0x2c>
   2a86e:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   2a870:	4601      	mov	r1, r0
   2a872:	4620      	mov	r0, r4
   2a874:	f7ff ff17 	bl	2a6a6 <bt_att_chan_send>
		if (err) {
   2a878:	4604      	mov	r4, r0
   2a87a:	b908      	cbnz	r0, 2a880 <process_queue+0x22>
}
   2a87c:	4620      	mov	r0, r4
   2a87e:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2a880:	4631      	mov	r1, r6
   2a882:	4628      	mov	r0, r5
   2a884:	f002 ff38 	bl	2d6f8 <k_queue_prepend>
			return err;
   2a888:	e7f8      	b.n	2a87c <process_queue+0x1e>
	return -ENOENT;
   2a88a:	f06f 0401 	mvn.w	r4, #1
   2a88e:	e7f5      	b.n	2a87c <process_queue+0x1e>

0002a890 <bt_att_sent>:
{
   2a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a892:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2a894:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   2a896:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2a89a:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2a89e:	f3bf 8f5b 	dmb	ish
   2a8a2:	e853 1f00 	ldrex	r1, [r3]
   2a8a6:	f021 0110 	bic.w	r1, r1, #16
   2a8aa:	e843 1200 	strex	r2, r1, [r3]
   2a8ae:	2a00      	cmp	r2, #0
   2a8b0:	d1f7      	bne.n	2a8a2 <bt_att_sent+0x12>
   2a8b2:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2a8b6:	b145      	cbz	r5, 2a8ca <bt_att_sent+0x3a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2a8b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2a8bc:	b133      	cbz	r3, 2a8cc <bt_att_sent+0x3c>
	err = process_queue(chan, &chan->tx_queue);
   2a8be:	f104 0194 	add.w	r1, r4, #148	; 0x94
   2a8c2:	4630      	mov	r0, r6
   2a8c4:	f7ff ffcb 	bl	2a85e <process_queue>
	if (!err) {
   2a8c8:	b9c0      	cbnz	r0, 2a8fc <bt_att_sent+0x6c>
}
   2a8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2a8cc:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2a8ce:	2f00      	cmp	r7, #0
   2a8d0:	d0f5      	beq.n	2a8be <bt_att_sent+0x2e>
	return node->next;
   2a8d2:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2a8d4:	606b      	str	r3, [r5, #4]
	return list->tail;
   2a8d6:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a8d8:	42ba      	cmp	r2, r7
   2a8da:	d00d      	beq.n	2a8f8 <bt_att_sent+0x68>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a8dc:	4639      	mov	r1, r7
   2a8de:	4630      	mov	r0, r6
   2a8e0:	f7ff fee5 	bl	2a6ae <chan_req_send>
   2a8e4:	2800      	cmp	r0, #0
   2a8e6:	daf0      	bge.n	2a8ca <bt_att_sent+0x3a>
	return list->head;
   2a8e8:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2a8ea:	603b      	str	r3, [r7, #0]
	list->head = node;
   2a8ec:	606f      	str	r7, [r5, #4]
	return list->tail;
   2a8ee:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2a8f0:	2b00      	cmp	r3, #0
   2a8f2:	d1e4      	bne.n	2a8be <bt_att_sent+0x2e>
	list->tail = node;
   2a8f4:	60af      	str	r7, [r5, #8]
}
   2a8f6:	e7e2      	b.n	2a8be <bt_att_sent+0x2e>
	list->tail = node;
   2a8f8:	60ab      	str	r3, [r5, #8]
}
   2a8fa:	e7ef      	b.n	2a8dc <bt_att_sent+0x4c>
	(void)process_queue(chan, &att->tx_queue);
   2a8fc:	f105 010c 	add.w	r1, r5, #12
   2a900:	4630      	mov	r0, r6
   2a902:	f7ff ffac 	bl	2a85e <process_queue>
   2a906:	e7e0      	b.n	2a8ca <bt_att_sent+0x3a>

0002a908 <att_send_process>:
{
   2a908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a90c:	4680      	mov	r8, r0
	return list->head;
   2a90e:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a910:	b374      	cbz	r4, 2a970 <att_send_process+0x68>
   2a912:	3ce0      	subs	r4, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a914:	f114 05e0 	adds.w	r5, r4, #224	; 0xe0
   2a918:	d003      	beq.n	2a922 <att_send_process+0x1a>
	return node->next;
   2a91a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   2a91e:	b105      	cbz	r5, 2a922 <att_send_process+0x1a>
   2a920:	3de0      	subs	r5, #224	; 0xe0
   2a922:	2600      	movs	r6, #0
   2a924:	4637      	mov	r7, r6
   2a926:	e00e      	b.n	2a946 <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   2a928:	f108 010c 	add.w	r1, r8, #12
   2a92c:	4620      	mov	r0, r4
   2a92e:	f7ff ff96 	bl	2a85e <process_queue>
		if (!err) {
   2a932:	4606      	mov	r6, r0
   2a934:	b300      	cbz	r0, 2a978 <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a936:	b1ed      	cbz	r5, 2a974 <att_send_process+0x6c>
   2a938:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   2a93c:	b103      	cbz	r3, 2a940 <att_send_process+0x38>
   2a93e:	3be0      	subs	r3, #224	; 0xe0
   2a940:	4627      	mov	r7, r4
   2a942:	462c      	mov	r4, r5
   2a944:	461d      	mov	r5, r3
   2a946:	b1bc      	cbz	r4, 2a978 <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   2a948:	f116 0f02 	cmn.w	r6, #2
   2a94c:	d1ec      	bne.n	2a928 <att_send_process+0x20>
   2a94e:	2f00      	cmp	r7, #0
   2a950:	d0ea      	beq.n	2a928 <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2a952:	2103      	movs	r1, #3
   2a954:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2a958:	f7ff fe7b 	bl	2a652 <atomic_test_bit>
   2a95c:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2a95e:	2103      	movs	r1, #3
   2a960:	f107 0090 	add.w	r0, r7, #144	; 0x90
   2a964:	f7ff fe75 	bl	2a652 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2a968:	4581      	cmp	r9, r0
   2a96a:	d1dd      	bne.n	2a928 <att_send_process+0x20>
   2a96c:	463c      	mov	r4, r7
   2a96e:	e7e2      	b.n	2a936 <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a970:	4625      	mov	r5, r4
   2a972:	e7d6      	b.n	2a922 <att_send_process+0x1a>
   2a974:	462b      	mov	r3, r5
   2a976:	e7e3      	b.n	2a940 <att_send_process+0x38>
}
   2a978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a97c <write_cb>:
{
   2a97c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a97e:	b083      	sub	sp, #12
   2a980:	4606      	mov	r6, r0
   2a982:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2a984:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2a988:	4601      	mov	r1, r0
   2a98a:	6820      	ldr	r0, [r4, #0]
   2a98c:	f000 ff4b 	bl	2b826 <bt_gatt_check_perm>
   2a990:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2a992:	bb08      	cbnz	r0, 2a9d8 <write_cb+0x5c>
   2a994:	4605      	mov	r5, r0
	if (!data->req) {
   2a996:	7a23      	ldrb	r3, [r4, #8]
   2a998:	b11b      	cbz	r3, 2a9a2 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2a99a:	2b18      	cmp	r3, #24
   2a99c:	d016      	beq.n	2a9cc <write_cb+0x50>
	uint8_t flags = 0U;
   2a99e:	4603      	mov	r3, r0
   2a9a0:	e000      	b.n	2a9a4 <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2a9a2:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2a9a4:	68b7      	ldr	r7, [r6, #8]
   2a9a6:	9301      	str	r3, [sp, #4]
   2a9a8:	8a63      	ldrh	r3, [r4, #18]
   2a9aa:	9300      	str	r3, [sp, #0]
   2a9ac:	8a23      	ldrh	r3, [r4, #16]
   2a9ae:	68e2      	ldr	r2, [r4, #12]
   2a9b0:	4631      	mov	r1, r6
   2a9b2:	6820      	ldr	r0, [r4, #0]
   2a9b4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2a9b6:	2800      	cmp	r0, #0
   2a9b8:	db02      	blt.n	2a9c0 <write_cb+0x44>
   2a9ba:	8a23      	ldrh	r3, [r4, #16]
   2a9bc:	4298      	cmp	r0, r3
   2a9be:	d007      	beq.n	2a9d0 <write_cb+0x54>
		data->err = err_to_att(write);
   2a9c0:	f7ff fdff 	bl	2a5c2 <err_to_att>
   2a9c4:	7520      	strb	r0, [r4, #20]
}
   2a9c6:	4628      	mov	r0, r5
   2a9c8:	b003      	add	sp, #12
   2a9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2a9cc:	2304      	movs	r3, #4
   2a9ce:	e7e9      	b.n	2a9a4 <write_cb+0x28>
	data->err = 0U;
   2a9d0:	2300      	movs	r3, #0
   2a9d2:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2a9d4:	2501      	movs	r5, #1
   2a9d6:	e7f6      	b.n	2a9c6 <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   2a9d8:	2500      	movs	r5, #0
   2a9da:	e7f4      	b.n	2a9c6 <write_cb+0x4a>

0002a9dc <bt_att_chan_send_rsp>:
{
   2a9dc:	b538      	push	{r3, r4, r5, lr}
   2a9de:	4604      	mov	r4, r0
   2a9e0:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2a9e2:	f7f1 fa73 	bl	1becc <chan_send>
	if (err) {
   2a9e6:	b900      	cbnz	r0, 2a9ea <bt_att_chan_send_rsp+0xe>
}
   2a9e8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2a9ea:	4629      	mov	r1, r5
   2a9ec:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2a9f0:	f001 f98b 	bl	2bd0a <net_buf_put>
}
   2a9f4:	e7f8      	b.n	2a9e8 <bt_att_chan_send_rsp+0xc>

0002a9f6 <att_chan_read>:
{
   2a9f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a9fa:	b085      	sub	sp, #20
   2a9fc:	4680      	mov	r8, r0
   2a9fe:	4689      	mov	r9, r1
   2aa00:	9202      	str	r2, [sp, #8]
   2aa02:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2aa04:	6841      	ldr	r1, [r0, #4]
   2aa06:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2aa08:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   2aa0a:	4613      	mov	r3, r2
	size_t bytes = 0;
   2aa0c:	2200      	movs	r2, #0
	while (buf) {
   2aa0e:	e002      	b.n	2aa16 <att_chan_read+0x20>
		bytes += buf->len;
   2aa10:	8a19      	ldrh	r1, [r3, #16]
   2aa12:	440a      	add	r2, r1
		buf = buf->frags;
   2aa14:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2aa16:	2b00      	cmp	r3, #0
   2aa18:	d1fa      	bne.n	2aa10 <att_chan_read+0x1a>
   2aa1a:	4290      	cmp	r0, r2
   2aa1c:	d804      	bhi.n	2aa28 <att_chan_read+0x32>
		return 0;
   2aa1e:	2400      	movs	r4, #0
}
   2aa20:	4620      	mov	r0, r4
   2aa22:	b005      	add	sp, #20
   2aa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2aa28:	9802      	ldr	r0, [sp, #8]
   2aa2a:	f001 f999 	bl	2bd60 <net_buf_frag_last>
   2aa2e:	4607      	mov	r7, r0
	size_t len, total = 0;
   2aa30:	f04f 0a00 	mov.w	sl, #0
   2aa34:	e082      	b.n	2ab3c <att_chan_read+0x146>
		bytes += buf->len;
   2aa36:	8a19      	ldrh	r1, [r3, #16]
   2aa38:	440a      	add	r2, r1
		buf = buf->frags;
   2aa3a:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2aa3c:	2b00      	cmp	r3, #0
   2aa3e:	d1fa      	bne.n	2aa36 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2aa40:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2aa42:	f107 060c 	add.w	r6, r7, #12
   2aa46:	4630      	mov	r0, r6
   2aa48:	f001 f9e6 	bl	2be18 <net_buf_simple_tailroom>
   2aa4c:	4284      	cmp	r4, r0
   2aa4e:	d326      	bcc.n	2aa9e <att_chan_read+0xa8>
   2aa50:	4630      	mov	r0, r6
   2aa52:	f001 f9e1 	bl	2be18 <net_buf_simple_tailroom>
   2aa56:	4606      	mov	r6, r0
		if (!len) {
   2aa58:	b36e      	cbz	r6, 2aab6 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2aa5a:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2aa5e:	68f9      	ldr	r1, [r7, #12]
   2aa60:	8a3a      	ldrh	r2, [r7, #16]
   2aa62:	9500      	str	r5, [sp, #0]
   2aa64:	b2b3      	uxth	r3, r6
   2aa66:	440a      	add	r2, r1
   2aa68:	4649      	mov	r1, r9
   2aa6a:	9803      	ldr	r0, [sp, #12]
   2aa6c:	47a0      	blx	r4
		if (read < 0) {
   2aa6e:	1e04      	subs	r4, r0, #0
   2aa70:	db55      	blt.n	2ab1e <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   2aa72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2aa74:	b12b      	cbz	r3, 2aa82 <att_chan_read+0x8c>
   2aa76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2aa78:	4621      	mov	r1, r4
   2aa7a:	4638      	mov	r0, r7
   2aa7c:	4798      	blx	r3
   2aa7e:	2800      	cmp	r0, #0
   2aa80:	d061      	beq.n	2ab46 <att_chan_read+0x150>
		net_buf_add(frag, read);
   2aa82:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2aa84:	4621      	mov	r1, r4
   2aa86:	f107 000c 	add.w	r0, r7, #12
   2aa8a:	f001 f989 	bl	2bda0 <net_buf_simple_add>
		total += read;
   2aa8e:	44a2      	add	sl, r4
		offset += read;
   2aa90:	442c      	add	r4, r5
   2aa92:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2aa94:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   2aa98:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2aa9a:	2200      	movs	r2, #0
   2aa9c:	e048      	b.n	2ab30 <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2aa9e:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   2aaa2:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2aaa4:	2200      	movs	r2, #0
	while (buf) {
   2aaa6:	e002      	b.n	2aaae <att_chan_read+0xb8>
		bytes += buf->len;
   2aaa8:	8a19      	ldrh	r1, [r3, #16]
   2aaaa:	440a      	add	r2, r1
		buf = buf->frags;
   2aaac:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2aaae:	2b00      	cmp	r3, #0
   2aab0:	d1fa      	bne.n	2aaa8 <att_chan_read+0xb2>
   2aab2:	1ab6      	subs	r6, r6, r2
   2aab4:	e7d0      	b.n	2aa58 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2aab6:	9b02      	ldr	r3, [sp, #8]
   2aab8:	7a98      	ldrb	r0, [r3, #10]
   2aaba:	f7f3 fc59 	bl	1e370 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2aabe:	2200      	movs	r2, #0
   2aac0:	2300      	movs	r3, #0
   2aac2:	f001 f8de 	bl	2bc82 <net_buf_alloc_fixed>
			if (!frag) {
   2aac6:	4607      	mov	r7, r0
   2aac8:	b150      	cbz	r0, 2aae0 <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   2aaca:	4601      	mov	r1, r0
   2aacc:	f8dd b008 	ldr.w	fp, [sp, #8]
   2aad0:	4658      	mov	r0, fp
   2aad2:	f001 f956 	bl	2bd82 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2aad6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   2aada:	4632      	mov	r2, r6
	while (buf) {
   2aadc:	465b      	mov	r3, fp
   2aade:	e004      	b.n	2aaea <att_chan_read+0xf4>
				return total;
   2aae0:	4654      	mov	r4, sl
   2aae2:	e79d      	b.n	2aa20 <att_chan_read+0x2a>
		bytes += buf->len;
   2aae4:	8a19      	ldrh	r1, [r3, #16]
   2aae6:	440a      	add	r2, r1
		buf = buf->frags;
   2aae8:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2aaea:	2b00      	cmp	r3, #0
   2aaec:	d1fa      	bne.n	2aae4 <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2aaee:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2aaf0:	f107 0b0c 	add.w	fp, r7, #12
   2aaf4:	4658      	mov	r0, fp
   2aaf6:	f001 f98f 	bl	2be18 <net_buf_simple_tailroom>
   2aafa:	4284      	cmp	r4, r0
   2aafc:	d304      	bcc.n	2ab08 <att_chan_read+0x112>
   2aafe:	4658      	mov	r0, fp
   2ab00:	f001 f98a 	bl	2be18 <net_buf_simple_tailroom>
   2ab04:	4606      	mov	r6, r0
   2ab06:	e7a8      	b.n	2aa5a <att_chan_read+0x64>
   2ab08:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   2ab0c:	9b02      	ldr	r3, [sp, #8]
   2ab0e:	e002      	b.n	2ab16 <att_chan_read+0x120>
		bytes += buf->len;
   2ab10:	8a1a      	ldrh	r2, [r3, #16]
   2ab12:	4416      	add	r6, r2
		buf = buf->frags;
   2ab14:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2ab16:	2b00      	cmp	r3, #0
   2ab18:	d1fa      	bne.n	2ab10 <att_chan_read+0x11a>
   2ab1a:	1b8e      	subs	r6, r1, r6
   2ab1c:	e79d      	b.n	2aa5a <att_chan_read+0x64>
			if (total) {
   2ab1e:	f1ba 0f00 	cmp.w	sl, #0
   2ab22:	f43f af7d 	beq.w	2aa20 <att_chan_read+0x2a>
				return total;
   2ab26:	4654      	mov	r4, sl
   2ab28:	e77a      	b.n	2aa20 <att_chan_read+0x2a>
		bytes += buf->len;
   2ab2a:	8a19      	ldrh	r1, [r3, #16]
   2ab2c:	440a      	add	r2, r1
		buf = buf->frags;
   2ab2e:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   2ab30:	2b00      	cmp	r3, #0
   2ab32:	d1fa      	bne.n	2ab2a <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2ab34:	4290      	cmp	r0, r2
   2ab36:	d906      	bls.n	2ab46 <att_chan_read+0x150>
   2ab38:	45b3      	cmp	fp, r6
   2ab3a:	d104      	bne.n	2ab46 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2ab3c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2ab40:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2ab42:	2200      	movs	r2, #0
	while (buf) {
   2ab44:	e77a      	b.n	2aa3c <att_chan_read+0x46>
	return total;
   2ab46:	4654      	mov	r4, sl
   2ab48:	e76a      	b.n	2aa20 <att_chan_read+0x2a>

0002ab4a <read_vl_cb>:
{
   2ab4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ab4e:	b082      	sub	sp, #8
   2ab50:	4606      	mov	r6, r0
   2ab52:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2ab54:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2ab56:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2ab58:	2300      	movs	r3, #0
   2ab5a:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2ab5c:	2295      	movs	r2, #149	; 0x95
   2ab5e:	4631      	mov	r1, r6
   2ab60:	f000 fe61 	bl	2b826 <bt_gatt_check_perm>
   2ab64:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2ab66:	b9f0      	cbnz	r0, 2aba6 <read_vl_cb+0x5c>
   2ab68:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2ab6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2ab6c:	68a0      	ldr	r0, [r4, #8]
   2ab6e:	8a02      	ldrh	r2, [r0, #16]
   2ab70:	1a9b      	subs	r3, r3, r2
   2ab72:	2b01      	cmp	r3, #1
   2ab74:	dd18      	ble.n	2aba8 <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2ab76:	2102      	movs	r1, #2
   2ab78:	300c      	adds	r0, #12
   2ab7a:	f001 f911 	bl	2bda0 <net_buf_simple_add>
   2ab7e:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2ab80:	2300      	movs	r3, #0
   2ab82:	9301      	str	r3, [sp, #4]
   2ab84:	9300      	str	r3, [sp, #0]
   2ab86:	88a3      	ldrh	r3, [r4, #4]
   2ab88:	68a2      	ldr	r2, [r4, #8]
   2ab8a:	4631      	mov	r1, r6
   2ab8c:	4638      	mov	r0, r7
   2ab8e:	f7ff ff32 	bl	2a9f6 <att_chan_read>
	if (read < 0) {
   2ab92:	2800      	cmp	r0, #0
   2ab94:	db03      	blt.n	2ab9e <read_vl_cb+0x54>
	rsp->len = read;
   2ab96:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   2ab9a:	2501      	movs	r5, #1
   2ab9c:	e004      	b.n	2aba8 <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   2ab9e:	f7ff fd10 	bl	2a5c2 <err_to_att>
   2aba2:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2aba4:	e000      	b.n	2aba8 <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   2aba6:	2500      	movs	r5, #0
}
   2aba8:	4628      	mov	r0, r5
   2abaa:	b002      	add	sp, #8
   2abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002abb0 <read_cb>:
{
   2abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2abb2:	b083      	sub	sp, #12
   2abb4:	4606      	mov	r6, r0
   2abb6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2abb8:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2abba:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   2abbc:	2300      	movs	r3, #0
   2abbe:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2abc0:	2295      	movs	r2, #149	; 0x95
   2abc2:	4631      	mov	r1, r6
   2abc4:	f000 fe2f 	bl	2b826 <bt_gatt_check_perm>
   2abc8:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2abca:	b118      	cbz	r0, 2abd4 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2abcc:	2500      	movs	r5, #0
}
   2abce:	4628      	mov	r0, r5
   2abd0:	b003      	add	sp, #12
   2abd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2abd4:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2abd6:	2300      	movs	r3, #0
   2abd8:	9301      	str	r3, [sp, #4]
   2abda:	9300      	str	r3, [sp, #0]
   2abdc:	88a3      	ldrh	r3, [r4, #4]
   2abde:	68a2      	ldr	r2, [r4, #8]
   2abe0:	4631      	mov	r1, r6
   2abe2:	4638      	mov	r0, r7
   2abe4:	f7ff ff07 	bl	2a9f6 <att_chan_read>
	if (ret < 0) {
   2abe8:	2800      	cmp	r0, #0
   2abea:	db01      	blt.n	2abf0 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2abec:	2501      	movs	r5, #1
   2abee:	e7ee      	b.n	2abce <read_cb+0x1e>
		data->err = err_to_att(ret);
   2abf0:	f7ff fce7 	bl	2a5c2 <err_to_att>
   2abf4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2abf6:	e7ea      	b.n	2abce <read_cb+0x1e>

0002abf8 <find_info_cb>:
{
   2abf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2abfc:	4606      	mov	r6, r0
   2abfe:	460f      	mov	r7, r1
   2ac00:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2ac02:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2ac06:	6893      	ldr	r3, [r2, #8]
   2ac08:	b14b      	cbz	r3, 2ac1e <find_info_cb+0x26>
	switch (data->rsp->format) {
   2ac0a:	68a3      	ldr	r3, [r4, #8]
   2ac0c:	781d      	ldrb	r5, [r3, #0]
   2ac0e:	2d01      	cmp	r5, #1
   2ac10:	d013      	beq.n	2ac3a <find_info_cb+0x42>
   2ac12:	2d02      	cmp	r5, #2
   2ac14:	d02d      	beq.n	2ac72 <find_info_cb+0x7a>
   2ac16:	2500      	movs	r5, #0
}
   2ac18:	4628      	mov	r0, r5
   2ac1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2ac1e:	6850      	ldr	r0, [r2, #4]
   2ac20:	2101      	movs	r1, #1
   2ac22:	300c      	adds	r0, #12
   2ac24:	f001 f8bc 	bl	2bda0 <net_buf_simple_add>
   2ac28:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2ac2a:	6833      	ldr	r3, [r6, #0]
   2ac2c:	781b      	ldrb	r3, [r3, #0]
   2ac2e:	b913      	cbnz	r3, 2ac36 <find_info_cb+0x3e>
   2ac30:	2301      	movs	r3, #1
   2ac32:	7003      	strb	r3, [r0, #0]
   2ac34:	e7e9      	b.n	2ac0a <find_info_cb+0x12>
   2ac36:	2302      	movs	r3, #2
   2ac38:	e7fb      	b.n	2ac32 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2ac3a:	6833      	ldr	r3, [r6, #0]
   2ac3c:	f893 9000 	ldrb.w	r9, [r3]
   2ac40:	f1b9 0f00 	cmp.w	r9, #0
   2ac44:	d001      	beq.n	2ac4a <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2ac46:	2500      	movs	r5, #0
   2ac48:	e7e6      	b.n	2ac18 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2ac4a:	6860      	ldr	r0, [r4, #4]
   2ac4c:	2104      	movs	r1, #4
   2ac4e:	300c      	adds	r0, #12
   2ac50:	f001 f8a6 	bl	2bda0 <net_buf_simple_add>
   2ac54:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2ac56:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2ac58:	6832      	ldr	r2, [r6, #0]
   2ac5a:	68e3      	ldr	r3, [r4, #12]
   2ac5c:	8852      	ldrh	r2, [r2, #2]
   2ac5e:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2ac60:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2ac64:	6862      	ldr	r2, [r4, #4]
   2ac66:	8a12      	ldrh	r2, [r2, #16]
   2ac68:	1a9b      	subs	r3, r3, r2
   2ac6a:	2b04      	cmp	r3, #4
   2ac6c:	d8d4      	bhi.n	2ac18 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   2ac6e:	464d      	mov	r5, r9
   2ac70:	e7d2      	b.n	2ac18 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2ac72:	6833      	ldr	r3, [r6, #0]
   2ac74:	781b      	ldrb	r3, [r3, #0]
   2ac76:	2b02      	cmp	r3, #2
   2ac78:	d001      	beq.n	2ac7e <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2ac7a:	2500      	movs	r5, #0
   2ac7c:	e7cc      	b.n	2ac18 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2ac7e:	6860      	ldr	r0, [r4, #4]
   2ac80:	2112      	movs	r1, #18
   2ac82:	300c      	adds	r0, #12
   2ac84:	f001 f88c 	bl	2bda0 <net_buf_simple_add>
   2ac88:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2ac8a:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2ac8c:	68e3      	ldr	r3, [r4, #12]
   2ac8e:	6832      	ldr	r2, [r6, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ac90:	f8d2 5001 	ldr.w	r5, [r2, #1]
   2ac94:	f8d2 0005 	ldr.w	r0, [r2, #5]
   2ac98:	f8d2 1009 	ldr.w	r1, [r2, #9]
   2ac9c:	f8d2 200d 	ldr.w	r2, [r2, #13]
   2aca0:	f8c3 5002 	str.w	r5, [r3, #2]
   2aca4:	f8c3 0006 	str.w	r0, [r3, #6]
   2aca8:	f8c3 100a 	str.w	r1, [r3, #10]
   2acac:	f8c3 200e 	str.w	r2, [r3, #14]
		if (chan->chan.tx.mtu - data->buf->len >
   2acb0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2acb4:	6862      	ldr	r2, [r4, #4]
   2acb6:	8a12      	ldrh	r2, [r2, #16]
   2acb8:	1a9b      	subs	r3, r3, r2
   2acba:	2b12      	cmp	r3, #18
   2acbc:	d801      	bhi.n	2acc2 <find_info_cb+0xca>
	return BT_GATT_ITER_STOP;
   2acbe:	2500      	movs	r5, #0
   2acc0:	e7aa      	b.n	2ac18 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2acc2:	2501      	movs	r5, #1
   2acc4:	e7a8      	b.n	2ac18 <find_info_cb+0x20>

0002acc6 <att_chan_mtu_updated>:
{
   2acc6:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   2acc8:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2acca:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2accc:	b153      	cbz	r3, 2ace4 <att_chan_mtu_updated+0x1e>
   2acce:	3be0      	subs	r3, #224	; 0xe0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2acd0:	f113 04e0 	adds.w	r4, r3, #224	; 0xe0
   2acd4:	d003      	beq.n	2acde <att_chan_mtu_updated+0x18>
	return node->next;
   2acd6:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
   2acda:	b104      	cbz	r4, 2acde <att_chan_mtu_updated+0x18>
   2acdc:	3ce0      	subs	r4, #224	; 0xe0
   2acde:	2200      	movs	r2, #0
   2ace0:	4611      	mov	r1, r2
   2ace2:	e004      	b.n	2acee <att_chan_mtu_updated+0x28>
   2ace4:	461c      	mov	r4, r3
   2ace6:	e7fa      	b.n	2acde <att_chan_mtu_updated+0x18>
   2ace8:	4625      	mov	r5, r4
   2acea:	4623      	mov	r3, r4
   2acec:	462c      	mov	r4, r5
   2acee:	b18b      	cbz	r3, 2ad14 <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   2acf0:	4283      	cmp	r3, r0
   2acf2:	d007      	beq.n	2ad04 <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2acf4:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   2acf6:	42a9      	cmp	r1, r5
   2acf8:	bf38      	it	cc
   2acfa:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2acfc:	8b5b      	ldrh	r3, [r3, #26]
   2acfe:	429a      	cmp	r2, r3
   2ad00:	bf38      	it	cc
   2ad02:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ad04:	2c00      	cmp	r4, #0
   2ad06:	d0ef      	beq.n	2ace8 <att_chan_mtu_updated+0x22>
   2ad08:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   2ad0c:	2d00      	cmp	r5, #0
   2ad0e:	d0ec      	beq.n	2acea <att_chan_mtu_updated+0x24>
   2ad10:	3de0      	subs	r5, #224	; 0xe0
   2ad12:	e7ea      	b.n	2acea <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2ad14:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2ad16:	428b      	cmp	r3, r1
   2ad18:	d802      	bhi.n	2ad20 <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2ad1a:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2ad1c:	4294      	cmp	r4, r2
   2ad1e:	d909      	bls.n	2ad34 <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2ad20:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2ad22:	4282      	cmp	r2, r0
   2ad24:	bf38      	it	cc
   2ad26:	4602      	movcc	r2, r0
   2ad28:	4299      	cmp	r1, r3
   2ad2a:	bf38      	it	cc
   2ad2c:	4619      	movcc	r1, r3
   2ad2e:	6830      	ldr	r0, [r6, #0]
   2ad30:	f7f3 fa80 	bl	1e234 <bt_gatt_att_max_mtu_changed>
}
   2ad34:	bd70      	pop	{r4, r5, r6, pc}

0002ad36 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ad36:	f001 021f 	and.w	r2, r1, #31
   2ad3a:	2301      	movs	r3, #1
   2ad3c:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ad3e:	0949      	lsrs	r1, r1, #5
   2ad40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ad44:	f3bf 8f5b 	dmb	ish
   2ad48:	e850 2f00 	ldrex	r2, [r0]
   2ad4c:	ea42 0103 	orr.w	r1, r2, r3
   2ad50:	e840 1c00 	strex	ip, r1, [r0]
   2ad54:	f1bc 0f00 	cmp.w	ip, #0
   2ad58:	d1f6      	bne.n	2ad48 <atomic_test_and_set_bit+0x12>
   2ad5a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2ad5e:	4213      	tst	r3, r2
}
   2ad60:	bf14      	ite	ne
   2ad62:	2001      	movne	r0, #1
   2ad64:	2000      	moveq	r0, #0
   2ad66:	4770      	bx	lr

0002ad68 <att_sent>:
{
   2ad68:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   2ad6a:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   2ad6c:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   2ad6e:	689b      	ldr	r3, [r3, #8]
   2ad70:	699b      	ldr	r3, [r3, #24]
   2ad72:	b103      	cbz	r3, 2ad76 <att_sent+0xe>
		chan->ops->sent(chan);
   2ad74:	4798      	blx	r3
}
   2ad76:	bd08      	pop	{r3, pc}

0002ad78 <att_unknown>:
{
   2ad78:	b570      	push	{r4, r5, r6, lr}
   2ad7a:	4604      	mov	r4, r0
   2ad7c:	460d      	mov	r5, r1
	if (!err) {
   2ad7e:	4616      	mov	r6, r2
   2ad80:	b12a      	cbz	r2, 2ad8e <att_unknown+0x16>
	chan_unknown(conn, user_data, err);
   2ad82:	4632      	mov	r2, r6
   2ad84:	4629      	mov	r1, r5
   2ad86:	4620      	mov	r0, r4
   2ad88:	f7ff fc70 	bl	2a66c <chan_unknown>
}
   2ad8c:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2ad8e:	f7ff ffeb 	bl	2ad68 <att_sent>
   2ad92:	e7f6      	b.n	2ad82 <att_unknown+0xa>

0002ad94 <att_tx_complete>:
{
   2ad94:	b570      	push	{r4, r5, r6, lr}
   2ad96:	4604      	mov	r4, r0
   2ad98:	460d      	mov	r5, r1
	if (!err) {
   2ad9a:	4616      	mov	r6, r2
   2ad9c:	b12a      	cbz	r2, 2adaa <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   2ad9e:	4632      	mov	r2, r6
   2ada0:	4629      	mov	r1, r5
   2ada2:	4620      	mov	r0, r4
   2ada4:	f7ff fc67 	bl	2a676 <chan_tx_complete>
}
   2ada8:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2adaa:	f7ff ffdd 	bl	2ad68 <att_sent>
   2adae:	e7f6      	b.n	2ad9e <att_tx_complete+0xa>

0002adb0 <att_req_sent>:
{
   2adb0:	b570      	push	{r4, r5, r6, lr}
   2adb2:	4604      	mov	r4, r0
   2adb4:	460d      	mov	r5, r1
	if (!err) {
   2adb6:	4616      	mov	r6, r2
   2adb8:	b12a      	cbz	r2, 2adc6 <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   2adba:	4632      	mov	r2, r6
   2adbc:	4629      	mov	r1, r5
   2adbe:	4620      	mov	r0, r4
   2adc0:	f7ff fd11 	bl	2a7e6 <chan_req_sent>
}
   2adc4:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2adc6:	f7ff ffcf 	bl	2ad68 <att_sent>
   2adca:	e7f6      	b.n	2adba <att_req_sent+0xa>

0002adcc <att_cfm_sent>:
{
   2adcc:	b570      	push	{r4, r5, r6, lr}
   2adce:	4604      	mov	r4, r0
   2add0:	460d      	mov	r5, r1
	if (!err) {
   2add2:	4616      	mov	r6, r2
   2add4:	b12a      	cbz	r2, 2ade2 <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   2add6:	4632      	mov	r2, r6
   2add8:	4629      	mov	r1, r5
   2adda:	4620      	mov	r0, r4
   2addc:	f7ff fd13 	bl	2a806 <chan_cfm_sent>
}
   2ade0:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2ade2:	f7ff ffc1 	bl	2ad68 <att_sent>
   2ade6:	e7f6      	b.n	2add6 <att_cfm_sent+0xa>

0002ade8 <att_rsp_sent>:
{
   2ade8:	b570      	push	{r4, r5, r6, lr}
   2adea:	4604      	mov	r4, r0
   2adec:	460d      	mov	r5, r1
	if (!err) {
   2adee:	4616      	mov	r6, r2
   2adf0:	b12a      	cbz	r2, 2adfe <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   2adf2:	4632      	mov	r2, r6
   2adf4:	4629      	mov	r1, r5
   2adf6:	4620      	mov	r0, r4
   2adf8:	f7ff fd18 	bl	2a82c <chan_rsp_sent>
}
   2adfc:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   2adfe:	f7ff ffb3 	bl	2ad68 <att_sent>
   2ae02:	e7f6      	b.n	2adf2 <att_rsp_sent+0xa>

0002ae04 <send_err_rsp>:
	if (!req) {
   2ae04:	b901      	cbnz	r1, 2ae08 <send_err_rsp+0x4>
   2ae06:	4770      	bx	lr
{
   2ae08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae0c:	4606      	mov	r6, r0
   2ae0e:	4615      	mov	r5, r2
   2ae10:	461c      	mov	r4, r3
   2ae12:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2ae14:	2204      	movs	r2, #4
   2ae16:	2101      	movs	r1, #1
   2ae18:	f7f1 fad8 	bl	1c3cc <bt_att_chan_create_pdu>
	if (!buf) {
   2ae1c:	4680      	mov	r8, r0
   2ae1e:	b158      	cbz	r0, 2ae38 <send_err_rsp+0x34>
   2ae20:	2104      	movs	r1, #4
   2ae22:	300c      	adds	r0, #12
   2ae24:	f000 ffbc 	bl	2bda0 <net_buf_simple_add>
	rsp->request = req;
   2ae28:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   2ae2a:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   2ae2e:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2ae30:	4641      	mov	r1, r8
   2ae32:	4630      	mov	r0, r6
   2ae34:	f7ff fdd2 	bl	2a9dc <bt_att_chan_send_rsp>
}
   2ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ae3c <att_write_cmd>:
{
   2ae3c:	b530      	push	{r4, r5, lr}
   2ae3e:	b085      	sub	sp, #20
   2ae40:	4605      	mov	r5, r0
   2ae42:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   2ae44:	f101 000c 	add.w	r0, r1, #12
   2ae48:	f000 ffda 	bl	2be00 <net_buf_simple_pull_le16>
   2ae4c:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2ae4e:	68e2      	ldr	r2, [r4, #12]
   2ae50:	8a21      	ldrh	r1, [r4, #16]
   2ae52:	9102      	str	r1, [sp, #8]
   2ae54:	9201      	str	r2, [sp, #4]
   2ae56:	2100      	movs	r1, #0
   2ae58:	9100      	str	r1, [sp, #0]
   2ae5a:	460a      	mov	r2, r1
   2ae5c:	4628      	mov	r0, r5
   2ae5e:	f7f1 fd07 	bl	1c870 <att_write_rsp>
}
   2ae62:	b005      	add	sp, #20
   2ae64:	bd30      	pop	{r4, r5, pc}

0002ae66 <att_write_req>:
{
   2ae66:	b530      	push	{r4, r5, lr}
   2ae68:	b085      	sub	sp, #20
   2ae6a:	4605      	mov	r5, r0
   2ae6c:	460c      	mov	r4, r1
   2ae6e:	f101 000c 	add.w	r0, r1, #12
   2ae72:	f000 ffc5 	bl	2be00 <net_buf_simple_pull_le16>
   2ae76:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2ae78:	68e2      	ldr	r2, [r4, #12]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2ae7a:	8a21      	ldrh	r1, [r4, #16]
   2ae7c:	9102      	str	r1, [sp, #8]
   2ae7e:	9201      	str	r2, [sp, #4]
   2ae80:	2200      	movs	r2, #0
   2ae82:	9200      	str	r2, [sp, #0]
   2ae84:	2213      	movs	r2, #19
   2ae86:	2112      	movs	r1, #18
   2ae88:	4628      	mov	r0, r5
   2ae8a:	f7f1 fcf1 	bl	1c870 <att_write_rsp>
}
   2ae8e:	b005      	add	sp, #20
   2ae90:	bd30      	pop	{r4, r5, pc}

0002ae92 <att_read_group_req>:
{
   2ae92:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ae94:	b089      	sub	sp, #36	; 0x24
   2ae96:	4605      	mov	r5, r0
   2ae98:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2ae9a:	7c0c      	ldrb	r4, [r1, #16]
   2ae9c:	3c04      	subs	r4, #4
   2ae9e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2aea0:	2c02      	cmp	r4, #2
   2aea2:	d001      	beq.n	2aea8 <att_read_group_req+0x16>
   2aea4:	2c10      	cmp	r4, #16
   2aea6:	d142      	bne.n	2af2e <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2aea8:	2104      	movs	r1, #4
   2aeaa:	300c      	adds	r0, #12
   2aeac:	f000 ffa0 	bl	2bdf0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2aeb0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2aeb2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2aeb4:	4622      	mov	r2, r4
   2aeb6:	1d01      	adds	r1, r0, #4
   2aeb8:	a801      	add	r0, sp, #4
   2aeba:	f7fe fc4d 	bl	29758 <bt_uuid_create>
   2aebe:	b3c8      	cbz	r0, 2af34 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2aec0:	f10d 0216 	add.w	r2, sp, #22
   2aec4:	4639      	mov	r1, r7
   2aec6:	4630      	mov	r0, r6
   2aec8:	f7ff fb6c 	bl	2a5a4 <range_is_valid>
   2aecc:	b1f0      	cbz	r0, 2af0c <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2aece:	2300      	movs	r3, #0
   2aed0:	f88d 3018 	strb.w	r3, [sp, #24]
   2aed4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2aed8:	f8ad 301a 	strh.w	r3, [sp, #26]
   2aedc:	a906      	add	r1, sp, #24
   2aede:	a801      	add	r0, sp, #4
   2aee0:	f7fe fc1c 	bl	2971c <bt_uuid_cmp>
   2aee4:	b158      	cbz	r0, 2aefe <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2aee6:	2300      	movs	r3, #0
   2aee8:	f88d 301c 	strb.w	r3, [sp, #28]
   2aeec:	f642 0301 	movw	r3, #10241	; 0x2801
   2aef0:	f8ad 301e 	strh.w	r3, [sp, #30]
   2aef4:	a907      	add	r1, sp, #28
   2aef6:	a801      	add	r0, sp, #4
   2aef8:	f7fe fc10 	bl	2971c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2aefc:	b978      	cbnz	r0, 2af1e <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   2aefe:	463b      	mov	r3, r7
   2af00:	4632      	mov	r2, r6
   2af02:	a901      	add	r1, sp, #4
   2af04:	4628      	mov	r0, r5
   2af06:	f7f1 fd99 	bl	1ca3c <att_read_group_rsp>
   2af0a:	e011      	b.n	2af30 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2af0c:	2301      	movs	r3, #1
   2af0e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2af12:	2110      	movs	r1, #16
   2af14:	4628      	mov	r0, r5
   2af16:	f7ff ff75 	bl	2ae04 <send_err_rsp>
		return 0;
   2af1a:	2000      	movs	r0, #0
   2af1c:	e008      	b.n	2af30 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2af1e:	2310      	movs	r3, #16
   2af20:	4632      	mov	r2, r6
   2af22:	4619      	mov	r1, r3
   2af24:	4628      	mov	r0, r5
   2af26:	f7ff ff6d 	bl	2ae04 <send_err_rsp>
		return 0;
   2af2a:	2000      	movs	r0, #0
   2af2c:	e000      	b.n	2af30 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2af2e:	2004      	movs	r0, #4
}
   2af30:	b009      	add	sp, #36	; 0x24
   2af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2af34:	200e      	movs	r0, #14
   2af36:	e7fb      	b.n	2af30 <att_read_group_req+0x9e>

0002af38 <att_read_blob_req>:
{
   2af38:	b500      	push	{lr}
   2af3a:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2af3c:	68ca      	ldr	r2, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   2af3e:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2af40:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2af42:	9200      	str	r2, [sp, #0]
   2af44:	220d      	movs	r2, #13
   2af46:	210c      	movs	r1, #12
   2af48:	f7f1 fe68 	bl	1cc1c <att_read_rsp>
}
   2af4c:	b003      	add	sp, #12
   2af4e:	f85d fb04 	ldr.w	pc, [sp], #4

0002af52 <att_read_req>:
{
   2af52:	b500      	push	{lr}
   2af54:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2af56:	68cb      	ldr	r3, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   2af58:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2af5a:	2200      	movs	r2, #0
   2af5c:	9200      	str	r2, [sp, #0]
   2af5e:	220b      	movs	r2, #11
   2af60:	210a      	movs	r1, #10
   2af62:	f7f1 fe5b 	bl	1cc1c <att_read_rsp>
}
   2af66:	b003      	add	sp, #12
   2af68:	f85d fb04 	ldr.w	pc, [sp], #4

0002af6c <att_read_type_req>:
{
   2af6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2af6e:	b087      	sub	sp, #28
   2af70:	4605      	mov	r5, r0
   2af72:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2af74:	7c0c      	ldrb	r4, [r1, #16]
   2af76:	3c04      	subs	r4, #4
   2af78:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2af7a:	2c02      	cmp	r4, #2
   2af7c:	d001      	beq.n	2af82 <att_read_type_req+0x16>
   2af7e:	2c10      	cmp	r4, #16
   2af80:	d123      	bne.n	2afca <att_read_type_req+0x5e>
   2af82:	2104      	movs	r1, #4
   2af84:	300c      	adds	r0, #12
   2af86:	f000 ff33 	bl	2bdf0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2af8a:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2af8c:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2af8e:	4622      	mov	r2, r4
   2af90:	1d01      	adds	r1, r0, #4
   2af92:	a801      	add	r0, sp, #4
   2af94:	f7fe fbe0 	bl	29758 <bt_uuid_create>
   2af98:	b1c8      	cbz	r0, 2afce <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2af9a:	f10d 0216 	add.w	r2, sp, #22
   2af9e:	4639      	mov	r1, r7
   2afa0:	4630      	mov	r0, r6
   2afa2:	f7ff faff 	bl	2a5a4 <range_is_valid>
   2afa6:	b138      	cbz	r0, 2afb8 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2afa8:	463b      	mov	r3, r7
   2afaa:	4632      	mov	r2, r6
   2afac:	a901      	add	r1, sp, #4
   2afae:	4628      	mov	r0, r5
   2afb0:	f7f1 fe8c 	bl	1cccc <att_read_type_rsp>
}
   2afb4:	b007      	add	sp, #28
   2afb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2afb8:	2301      	movs	r3, #1
   2afba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2afbe:	2108      	movs	r1, #8
   2afc0:	4628      	mov	r0, r5
   2afc2:	f7ff ff1f 	bl	2ae04 <send_err_rsp>
		return 0;
   2afc6:	2000      	movs	r0, #0
   2afc8:	e7f4      	b.n	2afb4 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   2afca:	2004      	movs	r0, #4
   2afcc:	e7f2      	b.n	2afb4 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   2afce:	200e      	movs	r0, #14
   2afd0:	e7f0      	b.n	2afb4 <att_read_type_req+0x48>

0002afd2 <att_find_type_req>:
{
   2afd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2afd6:	b087      	sub	sp, #28
   2afd8:	4607      	mov	r7, r0
   2afda:	460c      	mov	r4, r1
   2afdc:	2106      	movs	r1, #6
   2afde:	f104 000c 	add.w	r0, r4, #12
   2afe2:	f000 ff05 	bl	2bdf0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2afe6:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2afe8:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2afea:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   2afee:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2aff2:	f10d 020e 	add.w	r2, sp, #14
   2aff6:	4631      	mov	r1, r6
   2aff8:	4628      	mov	r0, r5
   2affa:	f7ff fad3 	bl	2a5a4 <range_is_valid>
   2affe:	b1d0      	cbz	r0, 2b036 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2b000:	2300      	movs	r3, #0
   2b002:	f88d 3010 	strb.w	r3, [sp, #16]
   2b006:	f8ad 8012 	strh.w	r8, [sp, #18]
   2b00a:	f88d 3014 	strb.w	r3, [sp, #20]
   2b00e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2b012:	f8ad 3016 	strh.w	r3, [sp, #22]
   2b016:	a905      	add	r1, sp, #20
   2b018:	a804      	add	r0, sp, #16
   2b01a:	f7fe fb7f 	bl	2971c <bt_uuid_cmp>
   2b01e:	b998      	cbnz	r0, 2b048 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2b020:	7c23      	ldrb	r3, [r4, #16]
   2b022:	9300      	str	r3, [sp, #0]
   2b024:	464b      	mov	r3, r9
   2b026:	4632      	mov	r2, r6
   2b028:	4629      	mov	r1, r5
   2b02a:	4638      	mov	r0, r7
   2b02c:	f7f1 fe9a 	bl	1cd64 <att_find_type_rsp>
}
   2b030:	b007      	add	sp, #28
   2b032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2b036:	2301      	movs	r3, #1
   2b038:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2b03c:	2106      	movs	r1, #6
   2b03e:	4638      	mov	r0, r7
   2b040:	f7ff fee0 	bl	2ae04 <send_err_rsp>
		return 0;
   2b044:	2000      	movs	r0, #0
   2b046:	e7f3      	b.n	2b030 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2b048:	230a      	movs	r3, #10
   2b04a:	462a      	mov	r2, r5
   2b04c:	2106      	movs	r1, #6
   2b04e:	4638      	mov	r0, r7
   2b050:	f7ff fed8 	bl	2ae04 <send_err_rsp>
		return 0;
   2b054:	2000      	movs	r0, #0
   2b056:	e7eb      	b.n	2b030 <att_find_type_req+0x5e>

0002b058 <att_find_info_req>:
{
   2b058:	b570      	push	{r4, r5, r6, lr}
   2b05a:	b082      	sub	sp, #8
   2b05c:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2b05e:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2b060:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2b062:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2b064:	f10d 0206 	add.w	r2, sp, #6
   2b068:	4631      	mov	r1, r6
   2b06a:	4628      	mov	r0, r5
   2b06c:	f7ff fa9a 	bl	2a5a4 <range_is_valid>
   2b070:	b130      	cbz	r0, 2b080 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   2b072:	4632      	mov	r2, r6
   2b074:	4629      	mov	r1, r5
   2b076:	4620      	mov	r0, r4
   2b078:	f7f1 feba 	bl	1cdf0 <att_find_info_rsp>
}
   2b07c:	b002      	add	sp, #8
   2b07e:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   2b080:	2301      	movs	r3, #1
   2b082:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2b086:	2104      	movs	r1, #4
   2b088:	4620      	mov	r0, r4
   2b08a:	f7ff febb 	bl	2ae04 <send_err_rsp>
		return 0;
   2b08e:	2000      	movs	r0, #0
   2b090:	e7f4      	b.n	2b07c <att_find_info_req+0x24>

0002b092 <att_mtu_req>:
{
   2b092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b094:	4604      	mov	r4, r0
   2b096:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   2b098:	f850 3b90 	ldr.w	r3, [r0], #144
   2b09c:	681f      	ldr	r7, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2b09e:	2103      	movs	r1, #3
   2b0a0:	f7ff fad7 	bl	2a652 <atomic_test_bit>
   2b0a4:	bb00      	cbnz	r0, 2b0e8 <att_mtu_req+0x56>
	req = (void *)buf->data;
   2b0a6:	68eb      	ldr	r3, [r5, #12]
	mtu_client = sys_le16_to_cpu(req->mtu);
   2b0a8:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2b0aa:	2e16      	cmp	r6, #22
   2b0ac:	d91e      	bls.n	2b0ec <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2b0ae:	2202      	movs	r2, #2
   2b0b0:	2103      	movs	r1, #3
   2b0b2:	4638      	mov	r0, r7
   2b0b4:	f7f1 fc4e 	bl	1c954 <bt_att_create_pdu>
	if (!pdu) {
   2b0b8:	4607      	mov	r7, r0
   2b0ba:	b1c8      	cbz	r0, 2b0f0 <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2b0bc:	2102      	movs	r1, #2
   2b0be:	300c      	adds	r0, #12
   2b0c0:	f000 fe6e 	bl	2bda0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2b0c4:	2500      	movs	r5, #0
   2b0c6:	2317      	movs	r3, #23
   2b0c8:	7003      	strb	r3, [r0, #0]
   2b0ca:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2b0cc:	4639      	mov	r1, r7
   2b0ce:	4620      	mov	r0, r4
   2b0d0:	f7ff fc84 	bl	2a9dc <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2b0d4:	2e17      	cmp	r6, #23
   2b0d6:	bf28      	it	cs
   2b0d8:	2617      	movcs	r6, #23
   2b0da:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2b0dc:	8566      	strh	r6, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2b0de:	4620      	mov	r0, r4
   2b0e0:	f7ff fdf1 	bl	2acc6 <att_chan_mtu_updated>
	return 0;
   2b0e4:	4628      	mov	r0, r5
}
   2b0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2b0e8:	2006      	movs	r0, #6
   2b0ea:	e7fc      	b.n	2b0e6 <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   2b0ec:	2004      	movs	r0, #4
   2b0ee:	e7fa      	b.n	2b0e6 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   2b0f0:	200e      	movs	r0, #14
   2b0f2:	e7f8      	b.n	2b0e6 <att_mtu_req+0x54>

0002b0f4 <att_confirm>:
{
   2b0f4:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b0f6:	2300      	movs	r3, #0
   2b0f8:	8a0a      	ldrh	r2, [r1, #16]
   2b0fa:	68c9      	ldr	r1, [r1, #12]
   2b0fc:	f7f1 ff04 	bl	1cf08 <att_handle_rsp>
}
   2b100:	bd08      	pop	{r3, pc}

0002b102 <att_chan_detach>:
{
   2b102:	b538      	push	{r3, r4, r5, lr}
   2b104:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2b106:	4601      	mov	r1, r0
   2b108:	f851 0be0 	ldr.w	r0, [r1], #224
   2b10c:	3024      	adds	r0, #36	; 0x24
   2b10e:	f7ff fa2e 	bl	2a56e <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2b112:	e005      	b.n	2b120 <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2b114:	69a0      	ldr	r0, [r4, #24]
   2b116:	f7f0 fecb 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(buf);
   2b11a:	4620      	mov	r0, r4
   2b11c:	f000 fdf9 	bl	2bd12 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2b120:	2200      	movs	r2, #0
   2b122:	2300      	movs	r3, #0
   2b124:	f105 0098 	add.w	r0, r5, #152	; 0x98
   2b128:	f000 fdb2 	bl	2bc90 <net_buf_get>
   2b12c:	4604      	mov	r4, r0
   2b12e:	2800      	cmp	r0, #0
   2b130:	d1f0      	bne.n	2b114 <att_chan_detach+0x12>
	if (chan->req) {
   2b132:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2b136:	b12b      	cbz	r3, 2b144 <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2b138:	230e      	movs	r3, #14
   2b13a:	2200      	movs	r2, #0
   2b13c:	4611      	mov	r1, r2
   2b13e:	4628      	mov	r0, r5
   2b140:	f7f1 fee2 	bl	1cf08 <att_handle_rsp>
	chan->att = NULL;
   2b144:	2300      	movs	r3, #0
   2b146:	602b      	str	r3, [r5, #0]
}
   2b148:	bd38      	pop	{r3, r4, r5, pc}

0002b14a <bt_att_disconnected>:
{
   2b14a:	b538      	push	{r3, r4, r5, lr}
   2b14c:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2b14e:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   2b152:	b125      	cbz	r5, 2b15e <bt_att_disconnected+0x14>
   2b154:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   2b156:	f7ff ffd4 	bl	2b102 <att_chan_detach>
	return list->head;
   2b15a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   2b15c:	b103      	cbz	r3, 2b160 <bt_att_disconnected+0x16>
}
   2b15e:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2b160:	4628      	mov	r0, r5
   2b162:	f7f1 ff2f 	bl	1cfc4 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   2b166:	6820      	ldr	r0, [r4, #0]
   2b168:	f7f3 f880 	bl	1e26c <bt_gatt_disconnected>
   2b16c:	e7f7      	b.n	2b15e <bt_att_disconnected+0x14>

0002b16e <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2b16e:	b538      	push	{r3, r4, r5, lr}
   2b170:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2b172:	f7f0 fd25 	bl	1bbc0 <att_get>
	if (!att) {
   2b176:	b148      	cbz	r0, 2b18c <bt_att_send+0x1e>
   2b178:	4605      	mov	r5, r0
		tx_meta_data_free(bt_att_tx_meta_data(buf));
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	net_buf_put(&att->tx_queue, buf);
   2b17a:	4621      	mov	r1, r4
   2b17c:	300c      	adds	r0, #12
   2b17e:	f000 fdc4 	bl	2bd0a <net_buf_put>
	att_send_process(att);
   2b182:	4628      	mov	r0, r5
   2b184:	f7ff fbc0 	bl	2a908 <att_send_process>

	return 0;
   2b188:	2000      	movs	r0, #0
}
   2b18a:	bd38      	pop	{r3, r4, r5, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2b18c:	69a0      	ldr	r0, [r4, #24]
   2b18e:	f7f0 fe8f 	bl	1beb0 <tx_meta_data_free>
		net_buf_unref(buf);
   2b192:	4620      	mov	r0, r4
   2b194:	f000 fdbd 	bl	2bd12 <net_buf_unref>
		return -ENOTCONN;
   2b198:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b19c:	e7f5      	b.n	2b18a <bt_att_send+0x1c>

0002b19e <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2b19e:	b510      	push	{r4, lr}
   2b1a0:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2b1a2:	f7f0 fd0d 	bl	1bbc0 <att_get>
	if (!att) {
   2b1a6:	b170      	cbz	r0, 2b1c6 <bt_att_req_send+0x28>
   2b1a8:	4603      	mov	r3, r0
	parent->next = child;
   2b1aa:	2200      	movs	r2, #0
   2b1ac:	6022      	str	r2, [r4, #0]
	return list->tail;
   2b1ae:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2b1b0:	b132      	cbz	r2, 2b1c0 <bt_att_req_send+0x22>
	parent->next = child;
   2b1b2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2b1b4:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2b1b6:	4618      	mov	r0, r3
   2b1b8:	f7ff fac6 	bl	2a748 <att_req_send_process>

	return 0;
   2b1bc:	2000      	movs	r0, #0
}
   2b1be:	bd10      	pop	{r4, pc}
   2b1c0:	6084      	str	r4, [r0, #8]
	list->head = node;
   2b1c2:	6044      	str	r4, [r0, #4]
}
   2b1c4:	e7f7      	b.n	2b1b6 <bt_att_req_send+0x18>
		return -ENOTCONN;
   2b1c6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b1ca:	e7f8      	b.n	2b1be <bt_att_req_send+0x20>

0002b1cc <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2b1cc:	2001      	movs	r0, #1
   2b1ce:	4770      	bx	lr

0002b1d0 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2b1d0:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2b1d2:	f7f0 fcf5 	bl	1bbc0 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2b1d6:	b1b8      	cbz	r0, 2b208 <bt_att_clear_out_of_sync_sent+0x38>
	return list->head;
   2b1d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b1da:	b103      	cbz	r3, 2b1de <bt_att_clear_out_of_sync_sent+0xe>
   2b1dc:	3be0      	subs	r3, #224	; 0xe0
   2b1de:	b19b      	cbz	r3, 2b208 <bt_att_clear_out_of_sync_sent+0x38>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2b1e0:	f103 0290 	add.w	r2, r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b1e4:	f3bf 8f5b 	dmb	ish
   2b1e8:	e852 0f00 	ldrex	r0, [r2]
   2b1ec:	f020 0020 	bic.w	r0, r0, #32
   2b1f0:	e842 0100 	strex	r1, r0, [r2]
   2b1f4:	2900      	cmp	r1, #0
   2b1f6:	d1f7      	bne.n	2b1e8 <bt_att_clear_out_of_sync_sent+0x18>
   2b1f8:	f3bf 8f5b 	dmb	ish
	return node->next;
   2b1fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b200:	2b00      	cmp	r3, #0
   2b202:	d0ec      	beq.n	2b1de <bt_att_clear_out_of_sync_sent+0xe>
   2b204:	3be0      	subs	r3, #224	; 0xe0
   2b206:	e7ea      	b.n	2b1de <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   2b208:	bd08      	pop	{r3, pc}

0002b20a <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2b20a:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2b20c:	2104      	movs	r1, #4
   2b20e:	f7ff f95b 	bl	2a4c8 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2b212:	b120      	cbz	r0, 2b21e <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2b214:	2105      	movs	r1, #5
   2b216:	308c      	adds	r0, #140	; 0x8c
   2b218:	f7ff fa1b 	bl	2a652 <atomic_test_bit>
}
   2b21c:	bd08      	pop	{r3, pc}
		return false;
   2b21e:	2000      	movs	r0, #0
   2b220:	e7fc      	b.n	2b21c <bt_att_out_of_sync_sent_on_fixed+0x12>

0002b222 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2b222:	6980      	ldr	r0, [r0, #24]

	data->func = func;
   2b224:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   2b226:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   2b228:	2201      	movs	r2, #1
   2b22a:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2b22c:	7403      	strb	r3, [r0, #16]
}
   2b22e:	4770      	bx	lr

0002b230 <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2b230:	2300      	movs	r3, #0
   2b232:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2b236:	d210      	bcs.n	2b25a <sys_mem_swap+0x2a>
{
   2b238:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   2b23a:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2b23e:	1aca      	subs	r2, r1, r3
   2b240:	3a01      	subs	r2, #1
   2b242:	f810 e002 	ldrb.w	lr, [r0, r2]
   2b246:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2b24a:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   2b24e:	3301      	adds	r3, #1
   2b250:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   2b254:	d3f1      	bcc.n	2b23a <sys_mem_swap+0xa>
	}
}
   2b256:	f85d fb04 	ldr.w	pc, [sp], #4
   2b25a:	4770      	bx	lr

0002b25c <update_range>:
	if (new_start >= *start && new_end <= *end) {
   2b25c:	f8b0 c000 	ldrh.w	ip, [r0]
   2b260:	4562      	cmp	r2, ip
   2b262:	d312      	bcc.n	2b28a <update_range+0x2e>
{
   2b264:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   2b266:	f8b1 e000 	ldrh.w	lr, [r1]
   2b26a:	4573      	cmp	r3, lr
   2b26c:	d908      	bls.n	2b280 <update_range+0x24>
	if (*start > new_start) {
   2b26e:	4562      	cmp	r2, ip
   2b270:	d200      	bcs.n	2b274 <update_range+0x18>
		*start = new_start;
   2b272:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2b274:	880a      	ldrh	r2, [r1, #0]
   2b276:	4293      	cmp	r3, r2
   2b278:	d904      	bls.n	2b284 <update_range+0x28>
		*end = new_end;
   2b27a:	800b      	strh	r3, [r1, #0]
	return true;
   2b27c:	2001      	movs	r0, #1
   2b27e:	e002      	b.n	2b286 <update_range+0x2a>
		return false;
   2b280:	2000      	movs	r0, #0
   2b282:	e000      	b.n	2b286 <update_range+0x2a>
	return true;
   2b284:	2001      	movs	r0, #1
}
   2b286:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   2b28a:	4562      	cmp	r2, ip
   2b28c:	d200      	bcs.n	2b290 <update_range+0x34>
		*start = new_start;
   2b28e:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   2b290:	880a      	ldrh	r2, [r1, #0]
   2b292:	4293      	cmp	r3, r2
   2b294:	d902      	bls.n	2b29c <update_range+0x40>
		*end = new_end;
   2b296:	800b      	strh	r3, [r1, #0]
	return true;
   2b298:	2001      	movs	r0, #1
   2b29a:	4770      	bx	lr
   2b29c:	2001      	movs	r0, #1
}
   2b29e:	4770      	bx	lr

0002b2a0 <cf_set_value>:
{
   2b2a0:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2b2a2:	2300      	movs	r3, #0
   2b2a4:	e001      	b.n	2b2aa <cf_set_value+0xa>
   2b2a6:	3301      	adds	r3, #1
   2b2a8:	b29b      	uxth	r3, r3
   2b2aa:	2b02      	cmp	r3, #2
   2b2ac:	d819      	bhi.n	2b2e2 <cf_set_value+0x42>
   2b2ae:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   2b2b2:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   2b2b6:	d912      	bls.n	2b2de <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2b2b8:	eb00 040c 	add.w	r4, r0, ip
   2b2bc:	7a24      	ldrb	r4, [r4, #8]
   2b2be:	f003 0e07 	and.w	lr, r3, #7
   2b2c2:	fa24 f40e 	lsr.w	r4, r4, lr
   2b2c6:	f014 0f01 	tst.w	r4, #1
   2b2ca:	d0ec      	beq.n	2b2a6 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2b2cc:	f811 400c 	ldrb.w	r4, [r1, ip]
   2b2d0:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2b2d4:	f014 0f01 	tst.w	r4, #1
   2b2d8:	d1e5      	bne.n	2b2a6 <cf_set_value+0x6>
			return false;
   2b2da:	2000      	movs	r0, #0
   2b2dc:	e016      	b.n	2b30c <cf_set_value+0x6c>
   2b2de:	2300      	movs	r3, #0
   2b2e0:	e000      	b.n	2b2e4 <cf_set_value+0x44>
   2b2e2:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2b2e4:	4293      	cmp	r3, r2
   2b2e6:	d210      	bcs.n	2b30a <cf_set_value+0x6a>
   2b2e8:	b96b      	cbnz	r3, 2b306 <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2b2ea:	18c4      	adds	r4, r0, r3
   2b2ec:	f894 c008 	ldrb.w	ip, [r4, #8]
   2b2f0:	f811 e003 	ldrb.w	lr, [r1, r3]
   2b2f4:	f00e 0e07 	and.w	lr, lr, #7
   2b2f8:	ea4c 0c0e 	orr.w	ip, ip, lr
   2b2fc:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2b300:	3301      	adds	r3, #1
   2b302:	b29b      	uxth	r3, r3
   2b304:	e7ee      	b.n	2b2e4 <cf_set_value+0x44>
	return true;
   2b306:	2001      	movs	r0, #1
   2b308:	e000      	b.n	2b30c <cf_set_value+0x6c>
   2b30a:	2001      	movs	r0, #1
}
   2b30c:	bd10      	pop	{r4, pc}

0002b30e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2b30e:	6010      	str	r0, [r2, #0]
}
   2b310:	2000      	movs	r0, #0
   2b312:	4770      	bx	lr

0002b314 <gatt_ccc_changed>:
{
   2b314:	b508      	push	{r3, lr}
   2b316:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   2b318:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2b31a:	460b      	mov	r3, r1
   2b31c:	b13b      	cbz	r3, 2b32e <gatt_ccc_changed+0x1a>
	if (value != ccc->value) {
   2b31e:	8953      	ldrh	r3, [r2, #10]
   2b320:	4299      	cmp	r1, r3
   2b322:	d003      	beq.n	2b32c <gatt_ccc_changed+0x18>
		ccc->value = value;
   2b324:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   2b326:	68d3      	ldr	r3, [r2, #12]
   2b328:	b103      	cbz	r3, 2b32c <gatt_ccc_changed+0x18>
			ccc->cfg_changed(attr, value);
   2b32a:	4798      	blx	r3
}
   2b32c:	bd08      	pop	{r3, pc}
		if (ccc->cfg[i].value > value) {
   2b32e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   2b332:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   2b336:	f8bc c008 	ldrh.w	ip, [ip, #8]
   2b33a:	458c      	cmp	ip, r1
   2b33c:	d900      	bls.n	2b340 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2b33e:	4661      	mov	r1, ip
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2b340:	3301      	adds	r3, #1
   2b342:	e7eb      	b.n	2b31c <gatt_ccc_changed+0x8>

0002b344 <gatt_indicate_rsp>:
{
   2b344:	b510      	push	{r4, lr}
   2b346:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2b348:	68a3      	ldr	r3, [r4, #8]
   2b34a:	b113      	cbz	r3, 2b352 <gatt_indicate_rsp+0xe>
   2b34c:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2b34e:	4621      	mov	r1, r4
   2b350:	4798      	blx	r3
	params->_ref--;
   2b352:	7da3      	ldrb	r3, [r4, #22]
   2b354:	3b01      	subs	r3, #1
   2b356:	b2db      	uxtb	r3, r3
   2b358:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b35a:	68e2      	ldr	r2, [r4, #12]
   2b35c:	b112      	cbz	r2, 2b364 <gatt_indicate_rsp+0x20>
   2b35e:	b90b      	cbnz	r3, 2b364 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2b360:	4620      	mov	r0, r4
   2b362:	4790      	blx	r2
}
   2b364:	bd10      	pop	{r4, pc}

0002b366 <match_uuid>:
	data->attr = attr;
   2b366:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2b368:	8091      	strh	r1, [r2, #4]
}
   2b36a:	2000      	movs	r0, #0
   2b36c:	4770      	bx	lr

0002b36e <ccc_set>:
}
   2b36e:	2000      	movs	r0, #0
   2b370:	4770      	bx	lr

0002b372 <ccc_set_cb>:
{
   2b372:	b508      	push	{r3, lr}
	return ccc_set(name, len_rd, read_cb, cb_arg);
   2b374:	f7ff fffb 	bl	2b36e <ccc_set>
}
   2b378:	bd08      	pop	{r3, pc}

0002b37a <gen_hash_m>:
{
   2b37a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b37c:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b37e:	6806      	ldr	r6, [r0, #0]
   2b380:	7835      	ldrb	r5, [r6, #0]
   2b382:	2d00      	cmp	r5, #0
   2b384:	d160      	bne.n	2b448 <gen_hash_m+0xce>
   2b386:	4607      	mov	r7, r0
   2b388:	4614      	mov	r4, r2
	switch (u16->val) {
   2b38a:	8873      	ldrh	r3, [r6, #2]
   2b38c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2b390:	d019      	beq.n	2b3c6 <gen_hash_m+0x4c>
   2b392:	d913      	bls.n	2b3bc <gen_hash_m+0x42>
   2b394:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2b398:	33ff      	adds	r3, #255	; 0xff
   2b39a:	b29b      	uxth	r3, r3
   2b39c:	2b04      	cmp	r3, #4
   2b39e:	d859      	bhi.n	2b454 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   2b3a0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b3a4:	2202      	movs	r2, #2
   2b3a6:	f10d 010a 	add.w	r1, sp, #10
   2b3aa:	4620      	mov	r0, r4
   2b3ac:	f7fd fff1 	bl	29392 <tc_cmac_update>
   2b3b0:	2800      	cmp	r0, #0
   2b3b2:	d139      	bne.n	2b428 <gen_hash_m+0xae>
			state->err = -EINVAL;
   2b3b4:	f06f 0315 	mvn.w	r3, #21
   2b3b8:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b3ba:	e046      	b.n	2b44a <gen_hash_m+0xd0>
	switch (u16->val) {
   2b3bc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2b3c0:	b29b      	uxth	r3, r3
   2b3c2:	2b03      	cmp	r3, #3
   2b3c4:	d844      	bhi.n	2b450 <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   2b3c6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b3ca:	2202      	movs	r2, #2
   2b3cc:	f10d 010a 	add.w	r1, sp, #10
   2b3d0:	4620      	mov	r0, r4
   2b3d2:	f7fd ffde 	bl	29392 <tc_cmac_update>
   2b3d6:	b918      	cbnz	r0, 2b3e0 <gen_hash_m+0x66>
			state->err = -EINVAL;
   2b3d8:	f06f 0315 	mvn.w	r3, #21
   2b3dc:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b3de:	e034      	b.n	2b44a <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2b3e0:	8873      	ldrh	r3, [r6, #2]
   2b3e2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b3e6:	2202      	movs	r2, #2
   2b3e8:	f10d 010a 	add.w	r1, sp, #10
   2b3ec:	4620      	mov	r0, r4
   2b3ee:	f7fd ffd0 	bl	29392 <tc_cmac_update>
   2b3f2:	b178      	cbz	r0, 2b414 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2b3f4:	687e      	ldr	r6, [r7, #4]
   2b3f6:	2000      	movs	r0, #0
   2b3f8:	9000      	str	r0, [sp, #0]
   2b3fa:	2313      	movs	r3, #19
   2b3fc:	aa03      	add	r2, sp, #12
   2b3fe:	4639      	mov	r1, r7
   2b400:	47b0      	blx	r6
		if (len < 0) {
   2b402:	1e02      	subs	r2, r0, #0
   2b404:	db0a      	blt.n	2b41c <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   2b406:	a903      	add	r1, sp, #12
   2b408:	4620      	mov	r0, r4
   2b40a:	f7fd ffc2 	bl	29392 <tc_cmac_update>
   2b40e:	b138      	cbz	r0, 2b420 <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   2b410:	2501      	movs	r5, #1
   2b412:	e01a      	b.n	2b44a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2b414:	f06f 0315 	mvn.w	r3, #21
   2b418:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b41a:	e016      	b.n	2b44a <gen_hash_m+0xd0>
			state->err = len;
   2b41c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b41e:	e014      	b.n	2b44a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2b420:	f06f 0315 	mvn.w	r3, #21
   2b424:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b426:	e010      	b.n	2b44a <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   2b428:	8873      	ldrh	r3, [r6, #2]
   2b42a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b42e:	2202      	movs	r2, #2
   2b430:	f10d 010a 	add.w	r1, sp, #10
   2b434:	4620      	mov	r0, r4
   2b436:	f7fd ffac 	bl	29392 <tc_cmac_update>
   2b43a:	b108      	cbz	r0, 2b440 <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   2b43c:	2501      	movs	r5, #1
   2b43e:	e004      	b.n	2b44a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   2b440:	f06f 0315 	mvn.w	r3, #21
   2b444:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b446:	e000      	b.n	2b44a <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   2b448:	2501      	movs	r5, #1
}
   2b44a:	4628      	mov	r0, r5
   2b44c:	b009      	add	sp, #36	; 0x24
   2b44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2b450:	2501      	movs	r5, #1
   2b452:	e7fa      	b.n	2b44a <gen_hash_m+0xd0>
   2b454:	2501      	movs	r5, #1
   2b456:	e7f8      	b.n	2b44a <gen_hash_m+0xd0>

0002b458 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b458:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b45a:	f3bf 8f5b 	dmb	ish
   2b45e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2b462:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b466:	f001 011f 	and.w	r1, r1, #31
   2b46a:	4108      	asrs	r0, r1
}
   2b46c:	f000 0001 	and.w	r0, r0, #1
   2b470:	4770      	bx	lr

0002b472 <bt_addr_le_copy>:
   2b472:	680b      	ldr	r3, [r1, #0]
   2b474:	6003      	str	r3, [r0, #0]
   2b476:	888a      	ldrh	r2, [r1, #4]
   2b478:	798b      	ldrb	r3, [r1, #6]
   2b47a:	8082      	strh	r2, [r0, #4]
   2b47c:	7183      	strb	r3, [r0, #6]
}
   2b47e:	4770      	bx	lr

0002b480 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2b480:	2300      	movs	r3, #0
   2b482:	6003      	str	r3, [r0, #0]
   2b484:	6043      	str	r3, [r0, #4]
   2b486:	6083      	str	r3, [r0, #8]
}
   2b488:	4770      	bx	lr

0002b48a <bt_gatt_clear_sc>:
{
   2b48a:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2b48c:	f7f1 fe4c 	bl	1d128 <find_sc_cfg>
	if (!cfg) {
   2b490:	b108      	cbz	r0, 2b496 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2b492:	f7ff fff5 	bl	2b480 <clear_sc_cfg>
}
   2b496:	2000      	movs	r0, #0
   2b498:	bd08      	pop	{r3, pc}

0002b49a <sc_ccc_cfg_write>:
{
   2b49a:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2b49c:	2a02      	cmp	r2, #2
   2b49e:	d003      	beq.n	2b4a8 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2b4a0:	f7f1 ffe0 	bl	1d464 <sc_clear>
}
   2b4a4:	2002      	movs	r0, #2
   2b4a6:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2b4a8:	2300      	movs	r3, #0
   2b4aa:	461a      	mov	r2, r3
   2b4ac:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2b4b0:	7a00      	ldrb	r0, [r0, #8]
   2b4b2:	f7f1 fef1 	bl	1d298 <sc_save>
   2b4b6:	e7f5      	b.n	2b4a4 <sc_ccc_cfg_write+0xa>

0002b4b8 <sc_reset>:
   2b4b8:	2300      	movs	r3, #0
   2b4ba:	6083      	str	r3, [r0, #8]
}
   2b4bc:	4770      	bx	lr

0002b4be <sc_restore_rsp>:
{
   2b4be:	b538      	push	{r3, r4, r5, lr}
   2b4c0:	4605      	mov	r5, r0
   2b4c2:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   2b4c4:	f7ff fe82 	bl	2b1cc <bt_att_fixed_chan_only>
   2b4c8:	b908      	cbnz	r0, 2b4ce <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2b4ca:	b1c4      	cbz	r4, 2b4fe <sc_restore_rsp+0x40>
}
   2b4cc:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   2b4ce:	4628      	mov	r0, r5
   2b4d0:	f7f1 fe04 	bl	1d0dc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2b4d4:	4603      	mov	r3, r0
   2b4d6:	2800      	cmp	r0, #0
   2b4d8:	d0f7      	beq.n	2b4ca <sc_restore_rsp+0xc>
   2b4da:	7a02      	ldrb	r2, [r0, #8]
   2b4dc:	f012 0f01 	tst.w	r2, #1
   2b4e0:	d0f3      	beq.n	2b4ca <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2b4e2:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b4e4:	f3bf 8f5b 	dmb	ish
   2b4e8:	e853 1f00 	ldrex	r1, [r3]
   2b4ec:	f041 0101 	orr.w	r1, r1, #1
   2b4f0:	e843 1200 	strex	r2, r1, [r3]
   2b4f4:	2a00      	cmp	r2, #0
   2b4f6:	d1f7      	bne.n	2b4e8 <sc_restore_rsp+0x2a>
   2b4f8:	f3bf 8f5b 	dmb	ish
			LOG_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
   2b4fc:	e7e5      	b.n	2b4ca <sc_restore_rsp+0xc>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2b4fe:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2b502:	7a28      	ldrb	r0, [r5, #8]
   2b504:	f7f1 fe10 	bl	1d128 <find_sc_cfg>
		if (sc_cfg) {
   2b508:	2800      	cmp	r0, #0
   2b50a:	d0df      	beq.n	2b4cc <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   2b50c:	f7ff ffd4 	bl	2b4b8 <sc_reset>
}
   2b510:	e7dc      	b.n	2b4cc <sc_restore_rsp+0xe>

0002b512 <atomic_test_and_clear_bit>:
{
   2b512:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b514:	f001 021f 	and.w	r2, r1, #31
   2b518:	2301      	movs	r3, #1
   2b51a:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b51c:	0949      	lsrs	r1, r1, #5
   2b51e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2b522:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b524:	f3bf 8f5b 	dmb	ish
   2b528:	e850 2f00 	ldrex	r2, [r0]
   2b52c:	ea02 0c01 	and.w	ip, r2, r1
   2b530:	e840 ce00 	strex	lr, ip, [r0]
   2b534:	f1be 0f00 	cmp.w	lr, #0
   2b538:	d1f6      	bne.n	2b528 <atomic_test_and_clear_bit+0x16>
   2b53a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2b53e:	4213      	tst	r3, r2
}
   2b540:	bf14      	ite	ne
   2b542:	2001      	movne	r0, #1
   2b544:	2000      	moveq	r0, #0
   2b546:	f85d fb04 	ldr.w	pc, [sp], #4

0002b54a <gatt_foreach_iter>:
	if (handle > end_handle) {
   2b54a:	4299      	cmp	r1, r3
   2b54c:	d822      	bhi.n	2b594 <gatt_foreach_iter+0x4a>
{
   2b54e:	b538      	push	{r3, r4, r5, lr}
   2b550:	4605      	mov	r5, r0
   2b552:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2b554:	4291      	cmp	r1, r2
   2b556:	d31f      	bcc.n	2b598 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2b558:	9b04      	ldr	r3, [sp, #16]
   2b55a:	b123      	cbz	r3, 2b566 <gatt_foreach_iter+0x1c>
   2b55c:	6801      	ldr	r1, [r0, #0]
   2b55e:	4618      	mov	r0, r3
   2b560:	f7fe f8dc 	bl	2971c <bt_uuid_cmp>
   2b564:	b9d0      	cbnz	r0, 2b59c <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2b566:	9b05      	ldr	r3, [sp, #20]
   2b568:	b12b      	cbz	r3, 2b576 <gatt_foreach_iter+0x2c>
   2b56a:	68eb      	ldr	r3, [r5, #12]
   2b56c:	9a05      	ldr	r2, [sp, #20]
   2b56e:	4293      	cmp	r3, r2
   2b570:	d001      	beq.n	2b576 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2b572:	2001      	movs	r0, #1
   2b574:	e011      	b.n	2b59a <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2b576:	9b06      	ldr	r3, [sp, #24]
   2b578:	881b      	ldrh	r3, [r3, #0]
   2b57a:	3b01      	subs	r3, #1
   2b57c:	9a06      	ldr	r2, [sp, #24]
   2b57e:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2b580:	9a08      	ldr	r2, [sp, #32]
   2b582:	4621      	mov	r1, r4
   2b584:	4628      	mov	r0, r5
   2b586:	9b07      	ldr	r3, [sp, #28]
   2b588:	4798      	blx	r3
	if (!*num_matches) {
   2b58a:	9b06      	ldr	r3, [sp, #24]
   2b58c:	881b      	ldrh	r3, [r3, #0]
   2b58e:	b923      	cbnz	r3, 2b59a <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2b590:	2000      	movs	r0, #0
   2b592:	e002      	b.n	2b59a <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2b594:	2000      	movs	r0, #0
}
   2b596:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2b598:	2001      	movs	r0, #1
}
   2b59a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   2b59c:	2001      	movs	r0, #1
   2b59e:	e7fc      	b.n	2b59a <gatt_foreach_iter+0x50>

0002b5a0 <gatt_req_alloc>:
{
   2b5a0:	b538      	push	{r3, r4, r5, lr}
   2b5a2:	4605      	mov	r5, r0
   2b5a4:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2b5a6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2b5aa:	2100      	movs	r1, #0
   2b5ac:	f7f1 fc70 	bl	1ce90 <bt_att_req_alloc>
	if (!req) {
   2b5b0:	4603      	mov	r3, r0
   2b5b2:	b108      	cbz	r0, 2b5b8 <gatt_req_alloc+0x18>
	req->func = func;
   2b5b4:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2b5b6:	60c4      	str	r4, [r0, #12]
}
   2b5b8:	4618      	mov	r0, r3
   2b5ba:	bd38      	pop	{r3, r4, r5, pc}

0002b5bc <remove_cf_cfg>:
{
   2b5bc:	b570      	push	{r4, r5, r6, lr}
   2b5be:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2b5c0:	f7f1 fd8c 	bl	1d0dc <find_cf_cfg>
	if (!cfg) {
   2b5c4:	b150      	cbz	r0, 2b5dc <remove_cf_cfg+0x20>
   2b5c6:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b5c8:	f104 0588 	add.w	r5, r4, #136	; 0x88
   2b5cc:	4629      	mov	r1, r5
   2b5ce:	7a20      	ldrb	r0, [r4, #8]
   2b5d0:	f7fe fa93 	bl	29afa <bt_addr_le_is_bonded>
   2b5d4:	b918      	cbnz	r0, 2b5de <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   2b5d6:	4630      	mov	r0, r6
   2b5d8:	f7f2 f840 	bl	1d65c <clear_cf_cfg>
}
   2b5dc:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2b5de:	4629      	mov	r1, r5
   2b5e0:	1c70      	adds	r0, r6, #1
   2b5e2:	f7ff ff46 	bl	2b472 <bt_addr_le_copy>
   2b5e6:	e7f9      	b.n	2b5dc <remove_cf_cfg+0x20>

0002b5e8 <bt_gatt_attr_read>:
{
   2b5e8:	b510      	push	{r4, lr}
   2b5ea:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2b5ee:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2b5f2:	428c      	cmp	r4, r1
   2b5f4:	d30c      	bcc.n	2b610 <bt_gatt_attr_read+0x28>
   2b5f6:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   2b5f8:	1a64      	subs	r4, r4, r1
   2b5fa:	42a3      	cmp	r3, r4
   2b5fc:	bfa8      	it	ge
   2b5fe:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2b600:	b29c      	uxth	r4, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b602:	4622      	mov	r2, r4
   2b604:	9b03      	ldr	r3, [sp, #12]
   2b606:	4419      	add	r1, r3
   2b608:	f002 fe5f 	bl	2e2ca <memcpy>
	return len;
   2b60c:	4620      	mov	r0, r4
}
   2b60e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b610:	f06f 0006 	mvn.w	r0, #6
   2b614:	e7fb      	b.n	2b60e <bt_gatt_attr_read+0x26>

0002b616 <read_ppcp>:
{
   2b616:	b510      	push	{r4, lr}
   2b618:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2b61a:	2418      	movs	r4, #24
   2b61c:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2b620:	2428      	movs	r4, #40	; 0x28
   2b622:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2b626:	2400      	movs	r4, #0
   2b628:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2b62c:	242a      	movs	r4, #42	; 0x2a
   2b62e:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2b632:	2408      	movs	r4, #8
   2b634:	9402      	str	r4, [sp, #8]
   2b636:	ac04      	add	r4, sp, #16
   2b638:	9401      	str	r4, [sp, #4]
   2b63a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2b63e:	9400      	str	r4, [sp, #0]
   2b640:	f7ff ffd2 	bl	2b5e8 <bt_gatt_attr_read>
}
   2b644:	b006      	add	sp, #24
   2b646:	bd10      	pop	{r4, pc}

0002b648 <read_appearance>:
{
   2b648:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b64a:	b087      	sub	sp, #28
   2b64c:	4604      	mov	r4, r0
   2b64e:	460d      	mov	r5, r1
   2b650:	4616      	mov	r6, r2
   2b652:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2b654:	f7fe fa4f 	bl	29af6 <bt_get_appearance>
   2b658:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2b65c:	2302      	movs	r3, #2
   2b65e:	9302      	str	r3, [sp, #8]
   2b660:	f10d 0316 	add.w	r3, sp, #22
   2b664:	9301      	str	r3, [sp, #4]
   2b666:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2b66a:	9300      	str	r3, [sp, #0]
   2b66c:	463b      	mov	r3, r7
   2b66e:	4632      	mov	r2, r6
   2b670:	4629      	mov	r1, r5
   2b672:	4620      	mov	r0, r4
   2b674:	f7ff ffb8 	bl	2b5e8 <bt_gatt_attr_read>
}
   2b678:	b007      	add	sp, #28
   2b67a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b67c <read_name>:
{
   2b67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b680:	b084      	sub	sp, #16
   2b682:	4604      	mov	r4, r0
   2b684:	460d      	mov	r5, r1
   2b686:	4616      	mov	r6, r2
   2b688:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2b68a:	f7ed ff35 	bl	194f8 <bt_get_name>
   2b68e:	4680      	mov	r8, r0
				 strlen(name));
   2b690:	f7e1 fa24 	bl	cadc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2b694:	b280      	uxth	r0, r0
   2b696:	9002      	str	r0, [sp, #8]
   2b698:	f8cd 8004 	str.w	r8, [sp, #4]
   2b69c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2b6a0:	9300      	str	r3, [sp, #0]
   2b6a2:	463b      	mov	r3, r7
   2b6a4:	4632      	mov	r2, r6
   2b6a6:	4629      	mov	r1, r5
   2b6a8:	4620      	mov	r0, r4
   2b6aa:	f7ff ff9d 	bl	2b5e8 <bt_gatt_attr_read>
}
   2b6ae:	b004      	add	sp, #16
   2b6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b6b4 <cf_read>:
{
   2b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b6b6:	b087      	sub	sp, #28
   2b6b8:	4604      	mov	r4, r0
   2b6ba:	460d      	mov	r5, r1
   2b6bc:	4616      	mov	r6, r2
   2b6be:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2b6c0:	2300      	movs	r3, #0
   2b6c2:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2b6c6:	f7f1 fd09 	bl	1d0dc <find_cf_cfg>
	if (cfg) {
   2b6ca:	b110      	cbz	r0, 2b6d2 <cf_read+0x1e>
		memcpy(data, cfg->data, sizeof(data));
   2b6cc:	7a03      	ldrb	r3, [r0, #8]
   2b6ce:	f88d 3014 	strb.w	r3, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2b6d2:	2301      	movs	r3, #1
   2b6d4:	9302      	str	r3, [sp, #8]
   2b6d6:	ab05      	add	r3, sp, #20
   2b6d8:	9301      	str	r3, [sp, #4]
   2b6da:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2b6de:	9300      	str	r3, [sp, #0]
   2b6e0:	463b      	mov	r3, r7
   2b6e2:	4632      	mov	r2, r6
   2b6e4:	4629      	mov	r1, r5
   2b6e6:	4620      	mov	r0, r4
   2b6e8:	f7ff ff7e 	bl	2b5e8 <bt_gatt_attr_read>
}
   2b6ec:	b007      	add	sp, #28
   2b6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b6f0 <bt_gatt_attr_read_service>:
{
   2b6f0:	b570      	push	{r4, r5, r6, lr}
   2b6f2:	b086      	sub	sp, #24
   2b6f4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2b6f8:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2b6fa:	7826      	ldrb	r6, [r4, #0]
   2b6fc:	b146      	cbz	r6, 2b710 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2b6fe:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2b700:	2610      	movs	r6, #16
   2b702:	9602      	str	r6, [sp, #8]
   2b704:	9401      	str	r4, [sp, #4]
   2b706:	9500      	str	r5, [sp, #0]
   2b708:	f7ff ff6e 	bl	2b5e8 <bt_gatt_attr_read>
}
   2b70c:	b006      	add	sp, #24
   2b70e:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2b710:	8864      	ldrh	r4, [r4, #2]
   2b712:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2b716:	2402      	movs	r4, #2
   2b718:	9402      	str	r4, [sp, #8]
   2b71a:	f10d 0416 	add.w	r4, sp, #22
   2b71e:	9401      	str	r4, [sp, #4]
   2b720:	9500      	str	r5, [sp, #0]
   2b722:	f7ff ff61 	bl	2b5e8 <bt_gatt_attr_read>
   2b726:	e7f1      	b.n	2b70c <bt_gatt_attr_read_service+0x1c>

0002b728 <bt_gatt_attr_read_ccc>:
{
   2b728:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b72a:	b087      	sub	sp, #28
   2b72c:	4605      	mov	r5, r0
   2b72e:	460c      	mov	r4, r1
   2b730:	4616      	mov	r6, r2
   2b732:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2b734:	68c9      	ldr	r1, [r1, #12]
   2b736:	f7f1 fd1b 	bl	1d170 <find_ccc_cfg>
	if (cfg) {
   2b73a:	b190      	cbz	r0, 2b762 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2b73c:	8903      	ldrh	r3, [r0, #8]
   2b73e:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2b742:	2302      	movs	r3, #2
   2b744:	9302      	str	r3, [sp, #8]
   2b746:	f10d 0316 	add.w	r3, sp, #22
   2b74a:	9301      	str	r3, [sp, #4]
   2b74c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2b750:	9300      	str	r3, [sp, #0]
   2b752:	463b      	mov	r3, r7
   2b754:	4632      	mov	r2, r6
   2b756:	4621      	mov	r1, r4
   2b758:	4628      	mov	r0, r5
   2b75a:	f7ff ff45 	bl	2b5e8 <bt_gatt_attr_read>
}
   2b75e:	b007      	add	sp, #28
   2b760:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2b762:	2300      	movs	r3, #0
   2b764:	f8ad 3016 	strh.w	r3, [sp, #22]
   2b768:	e7eb      	b.n	2b742 <bt_gatt_attr_read_ccc+0x1a>

0002b76a <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2b76a:	b1b8      	cbz	r0, 2b79c <bt_gatt_attr_value_handle+0x32>
{
   2b76c:	b510      	push	{r4, lr}
   2b76e:	b082      	sub	sp, #8
   2b770:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2b772:	2300      	movs	r3, #0
   2b774:	f88d 3004 	strb.w	r3, [sp, #4]
   2b778:	f642 0303 	movw	r3, #10243	; 0x2803
   2b77c:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b780:	a901      	add	r1, sp, #4
   2b782:	6800      	ldr	r0, [r0, #0]
   2b784:	f7fd ffca 	bl	2971c <bt_uuid_cmp>
   2b788:	b950      	cbnz	r0, 2b7a0 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2b78a:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2b78c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2b78e:	b940      	cbnz	r0, 2b7a2 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2b790:	4620      	mov	r0, r4
   2b792:	f7f1 ffad 	bl	1d6f0 <bt_gatt_attr_get_handle>
   2b796:	3001      	adds	r0, #1
   2b798:	b280      	uxth	r0, r0
   2b79a:	e002      	b.n	2b7a2 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2b79c:	2000      	movs	r0, #0
}
   2b79e:	4770      	bx	lr
	uint16_t handle = 0;
   2b7a0:	2000      	movs	r0, #0
}
   2b7a2:	b002      	add	sp, #8
   2b7a4:	bd10      	pop	{r4, pc}

0002b7a6 <bt_gatt_attr_read_chrc>:
{
   2b7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b7aa:	b08a      	sub	sp, #40	; 0x28
   2b7ac:	4605      	mov	r5, r0
   2b7ae:	460c      	mov	r4, r1
   2b7b0:	4616      	mov	r6, r2
   2b7b2:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   2b7b4:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   2b7b8:	f898 3006 	ldrb.w	r3, [r8, #6]
   2b7bc:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2b7c0:	4608      	mov	r0, r1
   2b7c2:	f7ff ffd2 	bl	2b76a <bt_gatt_attr_value_handle>
   2b7c6:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2b7ca:	f8d8 1000 	ldr.w	r1, [r8]
   2b7ce:	780b      	ldrb	r3, [r1, #0]
   2b7d0:	b993      	cbnz	r3, 2b7f8 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2b7d2:	884b      	ldrh	r3, [r1, #2]
   2b7d4:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   2b7d8:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2b7da:	9302      	str	r3, [sp, #8]
   2b7dc:	ab05      	add	r3, sp, #20
   2b7de:	9301      	str	r3, [sp, #4]
   2b7e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2b7e4:	9300      	str	r3, [sp, #0]
   2b7e6:	463b      	mov	r3, r7
   2b7e8:	4632      	mov	r2, r6
   2b7ea:	4621      	mov	r1, r4
   2b7ec:	4628      	mov	r0, r5
   2b7ee:	f7ff fefb 	bl	2b5e8 <bt_gatt_attr_read>
}
   2b7f2:	b00a      	add	sp, #40	; 0x28
   2b7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2b7f8:	f8d1 c001 	ldr.w	ip, [r1, #1]
   2b7fc:	f8d1 0005 	ldr.w	r0, [r1, #5]
   2b800:	f8d1 2009 	ldr.w	r2, [r1, #9]
   2b804:	f8d1 300d 	ldr.w	r3, [r1, #13]
   2b808:	f8cd c017 	str.w	ip, [sp, #23]
   2b80c:	f8cd 001b 	str.w	r0, [sp, #27]
   2b810:	f8cd 201f 	str.w	r2, [sp, #31]
   2b814:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
		value_len += 16U;
   2b818:	2313      	movs	r3, #19
   2b81a:	e7de      	b.n	2b7da <bt_gatt_attr_read_chrc+0x34>

0002b81c <db_hash_process>:
{
   2b81c:	b508      	push	{r3, lr}
	db_hash_gen(true);
   2b81e:	2001      	movs	r0, #1
   2b820:	f7f1 ffe8 	bl	1d7f4 <db_hash_gen>
}
   2b824:	bd08      	pop	{r3, pc}

0002b826 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2b826:	f012 0f01 	tst.w	r2, #1
   2b82a:	d005      	beq.n	2b838 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2b82c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2b82e:	f013 0f95 	tst.w	r3, #149	; 0x95
   2b832:	d01e      	beq.n	2b872 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2b834:	684b      	ldr	r3, [r1, #4]
   2b836:	b1f3      	cbz	r3, 2b876 <bt_gatt_check_perm+0x50>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2b838:	f012 0f02 	tst.w	r2, #2
   2b83c:	d005      	beq.n	2b84a <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2b83e:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2b840:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2b844:	d019      	beq.n	2b87a <bt_gatt_check_perm+0x54>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2b846:	688b      	ldr	r3, [r1, #8]
   2b848:	b1cb      	cbz	r3, 2b87e <bt_gatt_check_perm+0x58>
{
   2b84a:	b510      	push	{r4, lr}
	mask &= attr->perm;
   2b84c:	8a4c      	ldrh	r4, [r1, #18]
   2b84e:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2b850:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2b854:	d115      	bne.n	2b882 <bt_gatt_check_perm+0x5c>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2b856:	f014 0f30 	tst.w	r4, #48	; 0x30
   2b85a:	d104      	bne.n	2b866 <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2b85c:	f014 0f0c 	tst.w	r4, #12
   2b860:	d111      	bne.n	2b886 <bt_gatt_check_perm+0x60>
	return 0;
   2b862:	2000      	movs	r0, #0
}
   2b864:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2b866:	f7fe fd34 	bl	2a2d2 <bt_conn_get_security>
   2b86a:	2802      	cmp	r0, #2
   2b86c:	d8f6      	bhi.n	2b85c <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2b86e:	2005      	movs	r0, #5
   2b870:	e7f8      	b.n	2b864 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2b872:	2002      	movs	r0, #2
   2b874:	4770      	bx	lr
   2b876:	2002      	movs	r0, #2
   2b878:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2b87a:	2003      	movs	r0, #3
   2b87c:	4770      	bx	lr
   2b87e:	2003      	movs	r0, #3
}
   2b880:	4770      	bx	lr
			return BT_ATT_ERR_AUTHENTICATION;
   2b882:	2005      	movs	r0, #5
   2b884:	e7ee      	b.n	2b864 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2b886:	200f      	movs	r0, #15
   2b888:	e7ec      	b.n	2b864 <bt_gatt_check_perm+0x3e>

0002b88a <bt_gatt_is_subscribed>:
	if (conn->state != BT_CONN_CONNECTED) {
   2b88a:	7a83      	ldrb	r3, [r0, #10]
   2b88c:	2b07      	cmp	r3, #7
   2b88e:	d001      	beq.n	2b894 <bt_gatt_is_subscribed+0xa>
		return false;
   2b890:	2000      	movs	r0, #0
}
   2b892:	4770      	bx	lr
{
   2b894:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b896:	b089      	sub	sp, #36	; 0x24
   2b898:	4605      	mov	r5, r0
   2b89a:	460c      	mov	r4, r1
   2b89c:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2b89e:	6808      	ldr	r0, [r1, #0]
   2b8a0:	2300      	movs	r3, #0
   2b8a2:	f88d 3004 	strb.w	r3, [sp, #4]
   2b8a6:	f642 0303 	movw	r3, #10243	; 0x2803
   2b8aa:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b8ae:	a901      	add	r1, sp, #4
   2b8b0:	f7fd ff34 	bl	2971c <bt_uuid_cmp>
   2b8b4:	b950      	cbnz	r0, 2b8cc <bt_gatt_is_subscribed+0x42>
		struct bt_gatt_chrc *chrc = attr->user_data;
   2b8b6:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   2b8b8:	799b      	ldrb	r3, [r3, #6]
   2b8ba:	f013 0f30 	tst.w	r3, #48	; 0x30
   2b8be:	d101      	bne.n	2b8c4 <bt_gatt_is_subscribed+0x3a>
}
   2b8c0:	b009      	add	sp, #36	; 0x24
   2b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		attr = bt_gatt_attr_next(attr);
   2b8c4:	4620      	mov	r0, r4
   2b8c6:	f7f2 f883 	bl	1d9d0 <bt_gatt_attr_next>
   2b8ca:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2b8cc:	6820      	ldr	r0, [r4, #0]
   2b8ce:	2300      	movs	r3, #0
   2b8d0:	f88d 3008 	strb.w	r3, [sp, #8]
   2b8d4:	f642 1302 	movw	r3, #10498	; 0x2902
   2b8d8:	f8ad 300a 	strh.w	r3, [sp, #10]
   2b8dc:	a902      	add	r1, sp, #8
   2b8de:	f7fd ff1d 	bl	2971c <bt_uuid_cmp>
   2b8e2:	2800      	cmp	r0, #0
   2b8e4:	d136      	bne.n	2b954 <bt_gatt_is_subscribed+0xca>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2b8e6:	6820      	ldr	r0, [r4, #0]
   2b8e8:	2300      	movs	r3, #0
   2b8ea:	f88d 300c 	strb.w	r3, [sp, #12]
   2b8ee:	f642 1302 	movw	r3, #10498	; 0x2902
   2b8f2:	f8ad 300e 	strh.w	r3, [sp, #14]
   2b8f6:	a903      	add	r1, sp, #12
   2b8f8:	f7fd ff10 	bl	2971c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2b8fc:	b378      	cbz	r0, 2b95e <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2b8fe:	6820      	ldr	r0, [r4, #0]
   2b900:	2300      	movs	r3, #0
   2b902:	f88d 3010 	strb.w	r3, [sp, #16]
   2b906:	f642 0303 	movw	r3, #10243	; 0x2803
   2b90a:	f8ad 3012 	strh.w	r3, [sp, #18]
   2b90e:	a904      	add	r1, sp, #16
   2b910:	f7fd ff04 	bl	2971c <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2b914:	b318      	cbz	r0, 2b95e <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2b916:	6820      	ldr	r0, [r4, #0]
   2b918:	2300      	movs	r3, #0
   2b91a:	f88d 3014 	strb.w	r3, [sp, #20]
   2b91e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2b922:	f8ad 3016 	strh.w	r3, [sp, #22]
   2b926:	a905      	add	r1, sp, #20
   2b928:	f7fd fef8 	bl	2971c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2b92c:	b1b8      	cbz	r0, 2b95e <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2b92e:	6820      	ldr	r0, [r4, #0]
   2b930:	2300      	movs	r3, #0
   2b932:	f88d 3018 	strb.w	r3, [sp, #24]
   2b936:	f642 0301 	movw	r3, #10241	; 0x2801
   2b93a:	f8ad 301a 	strh.w	r3, [sp, #26]
   2b93e:	a906      	add	r1, sp, #24
   2b940:	f7fd feec 	bl	2971c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2b944:	b158      	cbz	r0, 2b95e <bt_gatt_is_subscribed+0xd4>
		attr = bt_gatt_attr_next(attr);
   2b946:	4620      	mov	r0, r4
   2b948:	f7f2 f842 	bl	1d9d0 <bt_gatt_attr_next>
		if (!attr) {
   2b94c:	4604      	mov	r4, r0
   2b94e:	2800      	cmp	r0, #0
   2b950:	d1c9      	bne.n	2b8e6 <bt_gatt_is_subscribed+0x5c>
   2b952:	e7b5      	b.n	2b8c0 <bt_gatt_is_subscribed+0x36>
		attr = bt_gatt_attr_next(attr);
   2b954:	4620      	mov	r0, r4
   2b956:	f7f2 f83b 	bl	1d9d0 <bt_gatt_attr_next>
   2b95a:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2b95c:	e7c3      	b.n	2b8e6 <bt_gatt_is_subscribed+0x5c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2b95e:	6820      	ldr	r0, [r4, #0]
   2b960:	2300      	movs	r3, #0
   2b962:	f88d 301c 	strb.w	r3, [sp, #28]
   2b966:	f642 1302 	movw	r3, #10498	; 0x2902
   2b96a:	f8ad 301e 	strh.w	r3, [sp, #30]
   2b96e:	a907      	add	r1, sp, #28
   2b970:	f7fd fed4 	bl	2971c <bt_uuid_cmp>
   2b974:	b920      	cbnz	r0, 2b980 <bt_gatt_is_subscribed+0xf6>
	ccc = attr->user_data;
   2b976:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2b978:	2400      	movs	r4, #0
   2b97a:	b11c      	cbz	r4, 2b984 <bt_gatt_is_subscribed+0xfa>
	return false;
   2b97c:	2000      	movs	r0, #0
   2b97e:	e79f      	b.n	2b8c0 <bt_gatt_is_subscribed+0x36>
		return false;
   2b980:	2000      	movs	r0, #0
   2b982:	e79d      	b.n	2b8c0 <bt_gatt_is_subscribed+0x36>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2b984:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2b988:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   2b98c:	3201      	adds	r2, #1
   2b98e:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   2b992:	4628      	mov	r0, r5
   2b994:	f7fe fcb5 	bl	2a302 <bt_conn_is_peer_addr_le>
   2b998:	b130      	cbz	r0, 2b9a8 <bt_gatt_is_subscribed+0x11e>
		    (ccc_type & ccc->cfg[i].value)) {
   2b99a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2b99e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   2b9a2:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2b9a4:	4233      	tst	r3, r6
   2b9a6:	d18b      	bne.n	2b8c0 <bt_gatt_is_subscribed+0x36>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2b9a8:	3401      	adds	r4, #1
   2b9aa:	e7e6      	b.n	2b97a <bt_gatt_is_subscribed+0xf0>

0002b9ac <bt_gatt_change_aware>:
{
   2b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b9ae:	4607      	mov	r7, r0
   2b9b0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2b9b2:	f7f1 fb93 	bl	1d0dc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2b9b6:	2800      	cmp	r0, #0
   2b9b8:	d050      	beq.n	2ba5c <bt_gatt_change_aware+0xb0>
   2b9ba:	7a02      	ldrb	r2, [r0, #8]
   2b9bc:	f012 0f01 	tst.w	r2, #1
   2b9c0:	d102      	bne.n	2b9c8 <bt_gatt_change_aware+0x1c>
		return true;
   2b9c2:	2601      	movs	r6, #1
}
   2b9c4:	4630      	mov	r0, r6
   2b9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2b9c8:	f100 050c 	add.w	r5, r0, #12
   2b9cc:	2100      	movs	r1, #0
   2b9ce:	4628      	mov	r0, r5
   2b9d0:	f7ff fd42 	bl	2b458 <atomic_test_bit>
   2b9d4:	4606      	mov	r6, r0
   2b9d6:	2800      	cmp	r0, #0
   2b9d8:	d1f4      	bne.n	2b9c4 <bt_gatt_change_aware+0x18>
	if (!req) {
   2b9da:	b90c      	cbnz	r4, 2b9e0 <bt_gatt_change_aware+0x34>
		return false;
   2b9dc:	4626      	mov	r6, r4
   2b9de:	e7f1      	b.n	2b9c4 <bt_gatt_change_aware+0x18>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2b9e0:	2101      	movs	r1, #1
   2b9e2:	4628      	mov	r0, r5
   2b9e4:	f7ff fd95 	bl	2b512 <atomic_test_and_clear_bit>
   2b9e8:	4606      	mov	r6, r0
   2b9ea:	bb38      	cbnz	r0, 2ba3c <bt_gatt_change_aware+0x90>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2b9ec:	4638      	mov	r0, r7
   2b9ee:	f7ff fbed 	bl	2b1cc <bt_att_fixed_chan_only>
   2b9f2:	4606      	mov	r6, r0
   2b9f4:	2800      	cmp	r0, #0
   2b9f6:	d0e5      	beq.n	2b9c4 <bt_gatt_change_aware+0x18>
   2b9f8:	4638      	mov	r0, r7
   2b9fa:	f7ff fc06 	bl	2b20a <bt_att_out_of_sync_sent_on_fixed>
   2b9fe:	4606      	mov	r6, r0
   2ba00:	2800      	cmp	r0, #0
   2ba02:	d0df      	beq.n	2b9c4 <bt_gatt_change_aware+0x18>
   2ba04:	f3bf 8f5b 	dmb	ish
   2ba08:	e855 3f00 	ldrex	r3, [r5]
   2ba0c:	f023 0302 	bic.w	r3, r3, #2
   2ba10:	e845 3200 	strex	r2, r3, [r5]
   2ba14:	2a00      	cmp	r2, #0
   2ba16:	d1f7      	bne.n	2ba08 <bt_gatt_change_aware+0x5c>
   2ba18:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   2ba1c:	4638      	mov	r0, r7
   2ba1e:	f7ff fbd7 	bl	2b1d0 <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ba22:	f3bf 8f5b 	dmb	ish
   2ba26:	e855 3f00 	ldrex	r3, [r5]
   2ba2a:	f043 0301 	orr.w	r3, r3, #1
   2ba2e:	e845 3200 	strex	r2, r3, [r5]
   2ba32:	2a00      	cmp	r2, #0
   2ba34:	d1f7      	bne.n	2ba26 <bt_gatt_change_aware+0x7a>
   2ba36:	f3bf 8f5b 	dmb	ish
		return true;
   2ba3a:	e7c3      	b.n	2b9c4 <bt_gatt_change_aware+0x18>
		bt_att_clear_out_of_sync_sent(conn);
   2ba3c:	4638      	mov	r0, r7
   2ba3e:	f7ff fbc7 	bl	2b1d0 <bt_att_clear_out_of_sync_sent>
   2ba42:	f3bf 8f5b 	dmb	ish
   2ba46:	e855 3f00 	ldrex	r3, [r5]
   2ba4a:	f043 0301 	orr.w	r3, r3, #1
   2ba4e:	e845 3200 	strex	r2, r3, [r5]
   2ba52:	2a00      	cmp	r2, #0
   2ba54:	d1f7      	bne.n	2ba46 <bt_gatt_change_aware+0x9a>
   2ba56:	f3bf 8f5b 	dmb	ish
		return true;
   2ba5a:	e7b3      	b.n	2b9c4 <bt_gatt_change_aware+0x18>
		return true;
   2ba5c:	2601      	movs	r6, #1
   2ba5e:	e7b1      	b.n	2b9c4 <bt_gatt_change_aware+0x18>

0002ba60 <bt_smp_recv>:
{
   2ba60:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ba62:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   2ba64:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2ba66:	f04f 32ff 	mov.w	r2, #4294967295
   2ba6a:	f04f 33ff 	mov.w	r3, #4294967295
   2ba6e:	2100      	movs	r1, #0
   2ba70:	4608      	mov	r0, r1
   2ba72:	f7fe fcdd 	bl	2a430 <bt_l2cap_create_pdu_timeout>
   2ba76:	4604      	mov	r4, r0
   2ba78:	f100 060c 	add.w	r6, r0, #12
   2ba7c:	2101      	movs	r1, #1
   2ba7e:	4630      	mov	r0, r6
   2ba80:	f000 f98e 	bl	2bda0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2ba84:	2505      	movs	r5, #5
   2ba86:	7005      	strb	r5, [r0, #0]
   2ba88:	2101      	movs	r1, #1
   2ba8a:	4630      	mov	r0, r6
   2ba8c:	f000 f988 	bl	2bda0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2ba90:	7005      	strb	r5, [r0, #0]
   2ba92:	2300      	movs	r3, #0
   2ba94:	9300      	str	r3, [sp, #0]
   2ba96:	4622      	mov	r2, r4
   2ba98:	2106      	movs	r1, #6
   2ba9a:	4638      	mov	r0, r7
   2ba9c:	f7fe fccd 	bl	2a43a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2baa0:	b910      	cbnz	r0, 2baa8 <bt_smp_recv+0x48>
}
   2baa2:	2000      	movs	r0, #0
   2baa4:	b003      	add	sp, #12
   2baa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   2baa8:	4620      	mov	r0, r4
   2baaa:	f000 f932 	bl	2bd12 <net_buf_unref>
   2baae:	e7f8      	b.n	2baa2 <bt_smp_recv+0x42>

0002bab0 <bt_smp_sign>:
}
   2bab0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bab4:	4770      	bx	lr

0002bab6 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2bab6:	2000      	movs	r0, #0
   2bab8:	4770      	bx	lr

0002baba <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   2baba:	b538      	push	{r3, r4, r5, lr}
   2babc:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2babe:	7f03      	ldrb	r3, [r0, #28]
   2bac0:	331b      	adds	r3, #27
   2bac2:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2bac6:	8b02      	ldrh	r2, [r0, #24]
   2bac8:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2baca:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2bacc:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   2bad0:	f7f2 fc42 	bl	1e358 <pool_id>
   2bad4:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   2bad6:	7f23      	ldrb	r3, [r4, #28]
   2bad8:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   2bada:	4628      	mov	r0, r5
   2badc:	bd38      	pop	{r3, r4, r5, pc}

0002bade <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   2bade:	4770      	bx	lr

0002bae0 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   2bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bae4:	4604      	mov	r4, r0
   2bae6:	460d      	mov	r5, r1
   2bae8:	4617      	mov	r7, r2
   2baea:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2baec:	7a80      	ldrb	r0, [r0, #10]
   2baee:	f7f2 fc3f 	bl	1e370 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   2baf2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2baf4:	681b      	ldr	r3, [r3, #0]
   2baf6:	f8d3 8000 	ldr.w	r8, [r3]
   2bafa:	463a      	mov	r2, r7
   2bafc:	4633      	mov	r3, r6
   2bafe:	4629      	mov	r1, r5
   2bb00:	4620      	mov	r0, r4
   2bb02:	47c0      	blx	r8
}
   2bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bb08 <net_buf_destroy>:
{
   2bb08:	b510      	push	{r4, lr}
   2bb0a:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2bb0c:	7a80      	ldrb	r0, [r0, #10]
   2bb0e:	f7f2 fc2f 	bl	1e370 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2bb12:	4621      	mov	r1, r4
   2bb14:	f001 fdf0 	bl	2d6f8 <k_queue_prepend>
}
   2bb18:	bd10      	pop	{r4, pc}

0002bb1a <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   2bb1a:	b538      	push	{r3, r4, r5, lr}
   2bb1c:	4604      	mov	r4, r0
   2bb1e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2bb20:	7a80      	ldrb	r0, [r0, #10]
   2bb22:	f7f2 fc25 	bl	1e370 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2bb26:	7a63      	ldrb	r3, [r4, #9]
   2bb28:	f013 0f01 	tst.w	r3, #1
   2bb2c:	d105      	bne.n	2bb3a <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   2bb2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2bb30:	681b      	ldr	r3, [r3, #0]
   2bb32:	689b      	ldr	r3, [r3, #8]
   2bb34:	4629      	mov	r1, r5
   2bb36:	4620      	mov	r0, r4
   2bb38:	4798      	blx	r3
}
   2bb3a:	bd38      	pop	{r3, r4, r5, pc}

0002bb3c <net_buf_id>:
{
   2bb3c:	b510      	push	{r4, lr}
   2bb3e:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2bb40:	7a80      	ldrb	r0, [r0, #10]
   2bb42:	f7f2 fc15 	bl	1e370 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2bb46:	7f03      	ldrb	r3, [r0, #28]
   2bb48:	331b      	adds	r3, #27
   2bb4a:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2bb4e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2bb50:	1aa4      	subs	r4, r4, r2
}
   2bb52:	fbb4 f0f3 	udiv	r0, r4, r3
   2bb56:	bd10      	pop	{r4, pc}

0002bb58 <fixed_data_alloc>:
{
   2bb58:	b570      	push	{r4, r5, r6, lr}
   2bb5a:	4604      	mov	r4, r0
   2bb5c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2bb5e:	7a80      	ldrb	r0, [r0, #10]
   2bb60:	f7f2 fc06 	bl	1e370 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2bb64:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2bb66:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2bb68:	682a      	ldr	r2, [r5, #0]
   2bb6a:	6819      	ldr	r1, [r3, #0]
   2bb6c:	428a      	cmp	r2, r1
   2bb6e:	bf28      	it	cs
   2bb70:	460a      	movcs	r2, r1
   2bb72:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2bb74:	685d      	ldr	r5, [r3, #4]
   2bb76:	681e      	ldr	r6, [r3, #0]
   2bb78:	4620      	mov	r0, r4
   2bb7a:	f7ff ffdf 	bl	2bb3c <net_buf_id>
}
   2bb7e:	fb00 5006 	mla	r0, r0, r6, r5
   2bb82:	bd70      	pop	{r4, r5, r6, pc}

0002bb84 <net_buf_reset>:
	buf->len  = 0U;
   2bb84:	2300      	movs	r3, #0
   2bb86:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   2bb88:	6943      	ldr	r3, [r0, #20]
   2bb8a:	60c3      	str	r3, [r0, #12]
}
   2bb8c:	4770      	bx	lr

0002bb8e <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2bb8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bb92:	b082      	sub	sp, #8
   2bb94:	4605      	mov	r5, r0
   2bb96:	9101      	str	r1, [sp, #4]
   2bb98:	4616      	mov	r6, r2
   2bb9a:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2bb9c:	4610      	mov	r0, r2
   2bb9e:	4619      	mov	r1, r3
   2bba0:	f002 f96d 	bl	2de7e <sys_clock_timeout_end_calc>
   2bba4:	4681      	mov	r9, r0
   2bba6:	468a      	mov	sl, r1
   2bba8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bbac:	f3ef 8311 	mrs	r3, BASEPRI
   2bbb0:	f382 8812 	msr	BASEPRI_MAX, r2
   2bbb4:	f3bf 8f6f 	isb	sy
   2bbb8:	461a      	mov	r2, r3
   2bbba:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2bbbc:	8b6b      	ldrh	r3, [r5, #26]
   2bbbe:	b393      	cbz	r3, 2bc26 <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2bbc0:	8b2a      	ldrh	r2, [r5, #24]
   2bbc2:	4293      	cmp	r3, r2
   2bbc4:	d20b      	bcs.n	2bbde <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   2bbc6:	2200      	movs	r2, #0
   2bbc8:	2300      	movs	r3, #0
   2bbca:	4628      	mov	r0, r5
   2bbcc:	f7f6 fb1e 	bl	2220c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   2bbd0:	4604      	mov	r4, r0
   2bbd2:	b120      	cbz	r0, 2bbde <net_buf_alloc_len+0x50>
	__asm__ volatile(
   2bbd4:	f388 8811 	msr	BASEPRI, r8
   2bbd8:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   2bbdc:	e00a      	b.n	2bbf4 <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   2bbde:	8b69      	ldrh	r1, [r5, #26]
   2bbe0:	1e4b      	subs	r3, r1, #1
   2bbe2:	836b      	strh	r3, [r5, #26]
   2bbe4:	f388 8811 	msr	BASEPRI, r8
   2bbe8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   2bbec:	4628      	mov	r0, r5
   2bbee:	f7ff ff64 	bl	2baba <pool_get_uninit>
   2bbf2:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2bbf4:	9b01      	ldr	r3, [sp, #4]
   2bbf6:	b3a3      	cbz	r3, 2bc62 <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2bbf8:	ea56 0307 	orrs.w	r3, r6, r7
   2bbfc:	d005      	beq.n	2bc0a <net_buf_alloc_len+0x7c>
   2bbfe:	f1b7 3fff 	cmp.w	r7, #4294967295
   2bc02:	bf08      	it	eq
   2bc04:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2bc08:	d11a      	bne.n	2bc40 <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2bc0a:	4632      	mov	r2, r6
   2bc0c:	463b      	mov	r3, r7
   2bc0e:	a901      	add	r1, sp, #4
   2bc10:	4620      	mov	r0, r4
   2bc12:	f7ff ff65 	bl	2bae0 <data_alloc>
   2bc16:	4605      	mov	r5, r0
   2bc18:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2bc1a:	bb20      	cbnz	r0, 2bc66 <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   2bc1c:	4620      	mov	r0, r4
   2bc1e:	f7ff ff73 	bl	2bb08 <net_buf_destroy>
			return NULL;
   2bc22:	462c      	mov	r4, r5
   2bc24:	e029      	b.n	2bc7a <net_buf_alloc_len+0xec>
   2bc26:	f382 8811 	msr	BASEPRI, r2
   2bc2a:	f3bf 8f6f 	isb	sy
   2bc2e:	4632      	mov	r2, r6
   2bc30:	463b      	mov	r3, r7
   2bc32:	4628      	mov	r0, r5
   2bc34:	f7f6 faea 	bl	2220c <z_impl_k_queue_get>
	if (!buf) {
   2bc38:	4604      	mov	r4, r0
   2bc3a:	2800      	cmp	r0, #0
   2bc3c:	d1da      	bne.n	2bbf4 <net_buf_alloc_len+0x66>
   2bc3e:	e01c      	b.n	2bc7a <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   2bc40:	f7f7 fa08 	bl	23054 <sys_clock_tick_get>
   2bc44:	ebb9 0900 	subs.w	r9, r9, r0
   2bc48:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   2bc4c:	f1b9 0f01 	cmp.w	r9, #1
   2bc50:	f17a 0300 	sbcs.w	r3, sl, #0
   2bc54:	db02      	blt.n	2bc5c <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   2bc56:	464e      	mov	r6, r9
   2bc58:	4657      	mov	r7, sl
   2bc5a:	e7d6      	b.n	2bc0a <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   2bc5c:	2600      	movs	r6, #0
   2bc5e:	4637      	mov	r7, r6
   2bc60:	e7d3      	b.n	2bc0a <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   2bc62:	2300      	movs	r3, #0
   2bc64:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   2bc66:	2301      	movs	r3, #1
   2bc68:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   2bc6a:	2300      	movs	r3, #0
   2bc6c:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   2bc6e:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   2bc70:	9b01      	ldr	r3, [sp, #4]
   2bc72:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   2bc74:	4620      	mov	r0, r4
   2bc76:	f7ff ff85 	bl	2bb84 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2bc7a:	4620      	mov	r0, r4
   2bc7c:	b002      	add	sp, #8
   2bc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002bc82 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   2bc82:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2bc84:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2bc86:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2bc88:	6809      	ldr	r1, [r1, #0]
   2bc8a:	f7ff ff80 	bl	2bb8e <net_buf_alloc_len>
}
   2bc8e:	bd08      	pop	{r3, pc}

0002bc90 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   2bc90:	b508      	push	{r3, lr}
   2bc92:	f7f6 fabb 	bl	2220c <z_impl_k_queue_get>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	return buf;
}
   2bc96:	bd08      	pop	{r3, pc}

0002bc98 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2bc98:	6883      	ldr	r3, [r0, #8]
   2bc9a:	440b      	add	r3, r1
   2bc9c:	6003      	str	r3, [r0, #0]
}
   2bc9e:	4770      	bx	lr

0002bca0 <net_buf_slist_put>:
	__asm__ volatile(
   2bca0:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bca4:	f3ef 8311 	mrs	r3, BASEPRI
   2bca8:	f382 8812 	msr	BASEPRI_MAX, r2
   2bcac:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2bcb0:	2200      	movs	r2, #0
   2bcb2:	600a      	str	r2, [r1, #0]
	return list->tail;
   2bcb4:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2bcb6:	b132      	cbz	r2, 2bcc6 <net_buf_slist_put+0x26>
	parent->next = child;
   2bcb8:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2bcba:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   2bcbc:	f383 8811 	msr	BASEPRI, r3
   2bcc0:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   2bcc4:	4770      	bx	lr
   2bcc6:	6041      	str	r1, [r0, #4]
	list->head = node;
   2bcc8:	6001      	str	r1, [r0, #0]
}
   2bcca:	e7f7      	b.n	2bcbc <net_buf_slist_put+0x1c>

0002bccc <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   2bccc:	4603      	mov	r3, r0
	__asm__ volatile(
   2bcce:	f04f 0140 	mov.w	r1, #64	; 0x40
   2bcd2:	f3ef 8211 	mrs	r2, BASEPRI
   2bcd6:	f381 8812 	msr	BASEPRI_MAX, r1
   2bcda:	f3bf 8f6f 	isb	sy
	return list->head;
   2bcde:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2bce0:	b170      	cbz	r0, 2bd00 <net_buf_slist_get+0x34>
   2bce2:	b410      	push	{r4}
	return node->next;
   2bce4:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   2bce6:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bce8:	685c      	ldr	r4, [r3, #4]
   2bcea:	42a0      	cmp	r0, r4
   2bcec:	d006      	beq.n	2bcfc <net_buf_slist_get+0x30>
	__asm__ volatile(
   2bcee:	f382 8811 	msr	BASEPRI, r2
   2bcf2:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   2bcf6:	f85d 4b04 	ldr.w	r4, [sp], #4
   2bcfa:	4770      	bx	lr
	list->tail = node;
   2bcfc:	6059      	str	r1, [r3, #4]
}
   2bcfe:	e7f6      	b.n	2bcee <net_buf_slist_get+0x22>
   2bd00:	f382 8811 	msr	BASEPRI, r2
   2bd04:	f3bf 8f6f 	isb	sy
   2bd08:	4770      	bx	lr

0002bd0a <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2bd0a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   2bd0c:	f001 fce8 	bl	2d6e0 <k_queue_append>
}
   2bd10:	bd08      	pop	{r3, pc}

0002bd12 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2bd12:	b538      	push	{r3, r4, r5, lr}
   2bd14:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   2bd16:	e00a      	b.n	2bd2e <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   2bd18:	2300      	movs	r3, #0
   2bd1a:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   2bd1c:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   2bd1e:	7aa0      	ldrb	r0, [r4, #10]
   2bd20:	f7f2 fb26 	bl	1e370 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2bd24:	6a03      	ldr	r3, [r0, #32]
   2bd26:	b193      	cbz	r3, 2bd4e <net_buf_unref+0x3c>
			pool->destroy(buf);
   2bd28:	4620      	mov	r0, r4
   2bd2a:	4798      	blx	r3
{
   2bd2c:	462c      	mov	r4, r5
	while (buf) {
   2bd2e:	b194      	cbz	r4, 2bd56 <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   2bd30:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   2bd32:	7a23      	ldrb	r3, [r4, #8]
   2bd34:	3b01      	subs	r3, #1
   2bd36:	b2db      	uxtb	r3, r3
   2bd38:	7223      	strb	r3, [r4, #8]
   2bd3a:	b963      	cbnz	r3, 2bd56 <net_buf_unref+0x44>
		if (buf->__buf) {
   2bd3c:	6961      	ldr	r1, [r4, #20]
   2bd3e:	2900      	cmp	r1, #0
   2bd40:	d0ea      	beq.n	2bd18 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   2bd42:	4620      	mov	r0, r4
   2bd44:	f7ff fee9 	bl	2bb1a <data_unref>
			buf->__buf = NULL;
   2bd48:	2300      	movs	r3, #0
   2bd4a:	6163      	str	r3, [r4, #20]
   2bd4c:	e7e4      	b.n	2bd18 <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   2bd4e:	4620      	mov	r0, r4
   2bd50:	f7ff feda 	bl	2bb08 <net_buf_destroy>
   2bd54:	e7ea      	b.n	2bd2c <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   2bd56:	bd38      	pop	{r3, r4, r5, pc}

0002bd58 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2bd58:	7a02      	ldrb	r2, [r0, #8]
   2bd5a:	3201      	adds	r2, #1
   2bd5c:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2bd5e:	4770      	bx	lr

0002bd60 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2bd60:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2bd62:	4618      	mov	r0, r3
   2bd64:	685b      	ldr	r3, [r3, #4]
   2bd66:	2b00      	cmp	r3, #0
   2bd68:	d1fb      	bne.n	2bd62 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2bd6a:	4770      	bx	lr

0002bd6c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2bd6c:	b570      	push	{r4, r5, r6, lr}
   2bd6e:	4604      	mov	r4, r0
   2bd70:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2bd72:	6846      	ldr	r6, [r0, #4]
   2bd74:	b11e      	cbz	r6, 2bd7e <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   2bd76:	4608      	mov	r0, r1
   2bd78:	f7ff fff2 	bl	2bd60 <net_buf_frag_last>
   2bd7c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2bd7e:	6065      	str	r5, [r4, #4]
}
   2bd80:	bd70      	pop	{r4, r5, r6, pc}

0002bd82 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2bd82:	b538      	push	{r3, r4, r5, lr}
   2bd84:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2bd86:	b138      	cbz	r0, 2bd98 <net_buf_frag_add+0x16>
   2bd88:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2bd8a:	f7ff ffe9 	bl	2bd60 <net_buf_frag_last>
   2bd8e:	4629      	mov	r1, r5
   2bd90:	f7ff ffec 	bl	2bd6c <net_buf_frag_insert>

	return head;
   2bd94:	4620      	mov	r0, r4
}
   2bd96:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   2bd98:	4608      	mov	r0, r1
   2bd9a:	f7ff ffdd 	bl	2bd58 <net_buf_ref>
   2bd9e:	e7fa      	b.n	2bd96 <net_buf_frag_add+0x14>

0002bda0 <net_buf_simple_add>:
	return buf->data + buf->len;
   2bda0:	6802      	ldr	r2, [r0, #0]
   2bda2:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2bda4:	4419      	add	r1, r3
   2bda6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2bda8:	18d0      	adds	r0, r2, r3
   2bdaa:	4770      	bx	lr

0002bdac <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2bdac:	b538      	push	{r3, r4, r5, lr}
   2bdae:	460d      	mov	r5, r1
   2bdb0:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2bdb2:	4611      	mov	r1, r2
   2bdb4:	f7ff fff4 	bl	2bda0 <net_buf_simple_add>
   2bdb8:	4622      	mov	r2, r4
   2bdba:	4629      	mov	r1, r5
   2bdbc:	f002 fa85 	bl	2e2ca <memcpy>
}
   2bdc0:	bd38      	pop	{r3, r4, r5, pc}

0002bdc2 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2bdc2:	b510      	push	{r4, lr}
   2bdc4:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   2bdc6:	2101      	movs	r1, #1
   2bdc8:	f7ff ffea 	bl	2bda0 <net_buf_simple_add>
	*u8 = val;
   2bdcc:	7004      	strb	r4, [r0, #0]

	return u8;
}
   2bdce:	bd10      	pop	{r4, pc}

0002bdd0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2bdd0:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2bdd2:	6800      	ldr	r0, [r0, #0]
   2bdd4:	1a40      	subs	r0, r0, r1
   2bdd6:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2bdd8:	889a      	ldrh	r2, [r3, #4]
   2bdda:	440a      	add	r2, r1
   2bddc:	809a      	strh	r2, [r3, #4]
	return buf->data;
}
   2bdde:	4770      	bx	lr

0002bde0 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2bde0:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2bde2:	8882      	ldrh	r2, [r0, #4]
   2bde4:	1a52      	subs	r2, r2, r1
   2bde6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2bde8:	6800      	ldr	r0, [r0, #0]
   2bdea:	4408      	add	r0, r1
   2bdec:	6018      	str	r0, [r3, #0]
}
   2bdee:	4770      	bx	lr

0002bdf0 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2bdf0:	4603      	mov	r3, r0
	void *data = buf->data;
   2bdf2:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2bdf4:	889a      	ldrh	r2, [r3, #4]
   2bdf6:	1a52      	subs	r2, r2, r1
   2bdf8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2bdfa:	4401      	add	r1, r0
   2bdfc:	6019      	str	r1, [r3, #0]

	return data;
}
   2bdfe:	4770      	bx	lr

0002be00 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2be00:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2be02:	6803      	ldr	r3, [r0, #0]
   2be04:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2be06:	2102      	movs	r1, #2
   2be08:	f7ff ffea 	bl	2bde0 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2be0c:	4620      	mov	r0, r4
   2be0e:	bd10      	pop	{r4, pc}

0002be10 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2be10:	6802      	ldr	r2, [r0, #0]
   2be12:	6880      	ldr	r0, [r0, #8]
}
   2be14:	1a10      	subs	r0, r2, r0
   2be16:	4770      	bx	lr

0002be18 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2be18:	b538      	push	{r3, r4, r5, lr}
   2be1a:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2be1c:	88c5      	ldrh	r5, [r0, #6]
   2be1e:	f7ff fff7 	bl	2be10 <net_buf_simple_headroom>
   2be22:	1a2d      	subs	r5, r5, r0
   2be24:	88a0      	ldrh	r0, [r4, #4]
}
   2be26:	1a28      	subs	r0, r5, r0
   2be28:	bd38      	pop	{r3, r4, r5, pc}

0002be2a <nrf_clock_is_running>:
    switch (domain)
   2be2a:	b119      	cbz	r1, 2be34 <nrf_clock_is_running+0xa>
   2be2c:	2901      	cmp	r1, #1
   2be2e:	d00e      	beq.n	2be4e <nrf_clock_is_running+0x24>
   2be30:	2000      	movs	r0, #0
   2be32:	4770      	bx	lr
            if (p_clk_src != NULL)
   2be34:	b122      	cbz	r2, 2be40 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2be36:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2be3a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2be3e:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2be40:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   2be44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2be48:	d10e      	bne.n	2be68 <nrf_clock_is_running+0x3e>
    return false;
   2be4a:	2000      	movs	r0, #0
   2be4c:	4770      	bx	lr
            if (p_clk_src != NULL)
   2be4e:	b122      	cbz	r2, 2be5a <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2be50:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2be54:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2be58:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2be5a:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2be5e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2be62:	d103      	bne.n	2be6c <nrf_clock_is_running+0x42>
    return false;
   2be64:	2000      	movs	r0, #0
   2be66:	4770      	bx	lr
                return true;
   2be68:	2001      	movs	r0, #1
   2be6a:	4770      	bx	lr
                return true;
   2be6c:	2001      	movs	r0, #1
}
   2be6e:	4770      	bx	lr

0002be70 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2be70:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2be72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2be76:	0089      	lsls	r1, r1, #2
   2be78:	3138      	adds	r1, #56	; 0x38
}
   2be7a:	4408      	add	r0, r1
   2be7c:	4770      	bx	lr

0002be7e <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2be7e:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2be80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2be84:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2be88:	4770      	bx	lr

0002be8a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2be8a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   2be8c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2be90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2be94:	4770      	bx	lr

0002be96 <get_status>:
{
   2be96:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2be98:	b2c9      	uxtb	r1, r1
   2be9a:	f7ff ffe9 	bl	2be70 <get_sub_data>
   2be9e:	6880      	ldr	r0, [r0, #8]
}
   2bea0:	f000 0007 	and.w	r0, r0, #7
   2bea4:	bd08      	pop	{r3, pc}

0002bea6 <set_off_state>:
	__asm__ volatile(
   2bea6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2beaa:	f3ef 8211 	mrs	r2, BASEPRI
   2beae:	f383 8812 	msr	BASEPRI_MAX, r3
   2beb2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2beb6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2beb8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2bebc:	d001      	beq.n	2bec2 <set_off_state+0x1c>
   2bebe:	428b      	cmp	r3, r1
   2bec0:	d107      	bne.n	2bed2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2bec2:	2301      	movs	r3, #1
   2bec4:	6003      	str	r3, [r0, #0]
	int err = 0;
   2bec6:	2000      	movs	r0, #0
	__asm__ volatile(
   2bec8:	f382 8811 	msr	BASEPRI, r2
   2becc:	f3bf 8f6f 	isb	sy
}
   2bed0:	4770      	bx	lr
		err = -EPERM;
   2bed2:	f04f 30ff 	mov.w	r0, #4294967295
   2bed6:	e7f7      	b.n	2bec8 <set_off_state+0x22>

0002bed8 <set_starting_state>:
	__asm__ volatile(
   2bed8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bedc:	f3ef 8211 	mrs	r2, BASEPRI
   2bee0:	f383 8812 	msr	BASEPRI_MAX, r3
   2bee4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2bee8:	6803      	ldr	r3, [r0, #0]
   2beea:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2beee:	f003 0307 	and.w	r3, r3, #7
   2bef2:	2b01      	cmp	r3, #1
   2bef4:	d008      	beq.n	2bf08 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   2bef6:	458c      	cmp	ip, r1
   2bef8:	d009      	beq.n	2bf0e <set_starting_state+0x36>
		err = -EPERM;
   2befa:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2befe:	f382 8811 	msr	BASEPRI, r2
   2bf02:	f3bf 8f6f 	isb	sy
}
   2bf06:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2bf08:	6001      	str	r1, [r0, #0]
	int err = 0;
   2bf0a:	2000      	movs	r0, #0
   2bf0c:	e7f7      	b.n	2befe <set_starting_state+0x26>
		err = -EALREADY;
   2bf0e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2bf12:	e7f4      	b.n	2befe <set_starting_state+0x26>

0002bf14 <set_on_state>:
	__asm__ volatile(
   2bf14:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bf18:	f3ef 8211 	mrs	r2, BASEPRI
   2bf1c:	f383 8812 	msr	BASEPRI_MAX, r3
   2bf20:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2bf24:	6803      	ldr	r3, [r0, #0]
   2bf26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2bf2a:	f043 0302 	orr.w	r3, r3, #2
   2bf2e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2bf30:	f382 8811 	msr	BASEPRI, r2
   2bf34:	f3bf 8f6f 	isb	sy
}
   2bf38:	4770      	bx	lr

0002bf3a <clkstarted_handle>:
{
   2bf3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bf3c:	4606      	mov	r6, r0
   2bf3e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2bf40:	f7ff ff96 	bl	2be70 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2bf44:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2bf46:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2bf48:	2300      	movs	r3, #0
   2bf4a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2bf4e:	f7ff ffe1 	bl	2bf14 <set_on_state>
	if (callback) {
   2bf52:	b11d      	cbz	r5, 2bf5c <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2bf54:	463a      	mov	r2, r7
   2bf56:	4621      	mov	r1, r4
   2bf58:	4630      	mov	r0, r6
   2bf5a:	47a8      	blx	r5
}
   2bf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002bf5e <stop>:
{
   2bf5e:	b570      	push	{r4, r5, r6, lr}
   2bf60:	4606      	mov	r6, r0
   2bf62:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2bf64:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2bf66:	4621      	mov	r1, r4
   2bf68:	f7ff ff82 	bl	2be70 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   2bf6c:	4629      	mov	r1, r5
   2bf6e:	3008      	adds	r0, #8
   2bf70:	f7ff ff99 	bl	2bea6 <set_off_state>
	if (err < 0) {
   2bf74:	2800      	cmp	r0, #0
   2bf76:	db06      	blt.n	2bf86 <stop+0x28>
	get_sub_config(dev, type)->stop();
   2bf78:	4621      	mov	r1, r4
   2bf7a:	4630      	mov	r0, r6
   2bf7c:	f7ff ff7f 	bl	2be7e <get_sub_config>
   2bf80:	6843      	ldr	r3, [r0, #4]
   2bf82:	4798      	blx	r3
	return 0;
   2bf84:	2000      	movs	r0, #0
}
   2bf86:	bd70      	pop	{r4, r5, r6, pc}

0002bf88 <api_stop>:
{
   2bf88:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2bf8a:	2280      	movs	r2, #128	; 0x80
   2bf8c:	f7ff ffe7 	bl	2bf5e <stop>
}
   2bf90:	bd08      	pop	{r3, pc}

0002bf92 <async_start>:
{
   2bf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf96:	4606      	mov	r6, r0
   2bf98:	4690      	mov	r8, r2
   2bf9a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2bf9c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2bf9e:	4629      	mov	r1, r5
   2bfa0:	f7ff ff66 	bl	2be70 <get_sub_data>
   2bfa4:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2bfa6:	9906      	ldr	r1, [sp, #24]
   2bfa8:	3008      	adds	r0, #8
   2bfaa:	f7ff ff95 	bl	2bed8 <set_starting_state>
	if (err < 0) {
   2bfae:	2800      	cmp	r0, #0
   2bfb0:	db09      	blt.n	2bfc6 <async_start+0x34>
	subdata->cb = cb;
   2bfb2:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2bfb6:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2bfb8:	4629      	mov	r1, r5
   2bfba:	4630      	mov	r0, r6
   2bfbc:	f7ff ff5f 	bl	2be7e <get_sub_config>
   2bfc0:	6803      	ldr	r3, [r0, #0]
   2bfc2:	4798      	blx	r3
	return 0;
   2bfc4:	2000      	movs	r0, #0
}
   2bfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bfca <api_start>:
{
   2bfca:	b510      	push	{r4, lr}
   2bfcc:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2bfce:	2480      	movs	r4, #128	; 0x80
   2bfd0:	9400      	str	r4, [sp, #0]
   2bfd2:	f7ff ffde 	bl	2bf92 <async_start>
}
   2bfd6:	b002      	add	sp, #8
   2bfd8:	bd10      	pop	{r4, pc}

0002bfda <onoff_started_callback>:
{
   2bfda:	b510      	push	{r4, lr}
   2bfdc:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2bfde:	b2c9      	uxtb	r1, r1
   2bfe0:	f7ff ff53 	bl	2be8a <get_onoff_manager>
	notify(mgr, 0);
   2bfe4:	2100      	movs	r1, #0
   2bfe6:	47a0      	blx	r4
}
   2bfe8:	bd10      	pop	{r4, pc}

0002bfea <hfclk_start>:
{
   2bfea:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2bfec:	2001      	movs	r0, #1
   2bfee:	f7f4 fdeb 	bl	20bc8 <nrfx_clock_start>
}
   2bff2:	bd08      	pop	{r3, pc}

0002bff4 <lfclk_start>:
{
   2bff4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2bff6:	2000      	movs	r0, #0
   2bff8:	f7f4 fde6 	bl	20bc8 <nrfx_clock_start>
}
   2bffc:	bd08      	pop	{r3, pc}

0002bffe <hfclk_stop>:
{
   2bffe:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2c000:	2001      	movs	r0, #1
   2c002:	f001 f84b 	bl	2d09c <nrfx_clock_stop>
}
   2c006:	bd08      	pop	{r3, pc}

0002c008 <lfclk_stop>:
{
   2c008:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2c00a:	2000      	movs	r0, #0
   2c00c:	f001 f846 	bl	2d09c <nrfx_clock_stop>
}
   2c010:	bd08      	pop	{r3, pc}

0002c012 <k_msleep>:
{
   2c012:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2c014:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2c018:	17c1      	asrs	r1, r0, #31
   2c01a:	03c9      	lsls	r1, r1, #15
   2c01c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2c020:	03c0      	lsls	r0, r0, #15
   2c022:	f240 33e7 	movw	r3, #999	; 0x3e7
   2c026:	18c0      	adds	r0, r0, r3
   2c028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c02c:	f04f 0300 	mov.w	r3, #0
   2c030:	f141 0100 	adc.w	r1, r1, #0
   2c034:	f7d4 fc82 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2c038:	f7f6 fe44 	bl	22cc4 <z_impl_k_sleep>
}
   2c03c:	bd08      	pop	{r3, pc}

0002c03e <blocking_start_callback>:
{
   2c03e:	b508      	push	{r3, lr}
   2c040:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2c042:	f7f6 f921 	bl	22288 <z_impl_k_sem_give>
}
   2c046:	bd08      	pop	{r3, pc}

0002c048 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2c048:	460b      	mov	r3, r1
   2c04a:	b139      	cbz	r1, 2c05c <sys_slist_remove+0x14>
	return node->next;
   2c04c:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2c04e:	6019      	str	r1, [r3, #0]
	return list->tail;
   2c050:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2c052:	428a      	cmp	r2, r1
   2c054:	d009      	beq.n	2c06a <sys_slist_remove+0x22>
	parent->next = child;
   2c056:	2300      	movs	r3, #0
   2c058:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c05a:	4770      	bx	lr
	return node->next;
   2c05c:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2c05e:	6003      	str	r3, [r0, #0]
	return list->tail;
   2c060:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2c062:	428a      	cmp	r2, r1
   2c064:	d1f7      	bne.n	2c056 <sys_slist_remove+0xe>
	list->tail = node;
   2c066:	6043      	str	r3, [r0, #4]
}
   2c068:	e7f5      	b.n	2c056 <sys_slist_remove+0xe>
	list->tail = node;
   2c06a:	6043      	str	r3, [r0, #4]
}
   2c06c:	e7f3      	b.n	2c056 <sys_slist_remove+0xe>

0002c06e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c06e:	b508      	push	{r3, lr}
   2c070:	460a      	mov	r2, r1
	return list->head;
   2c072:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c074:	2100      	movs	r1, #0
   2c076:	e001      	b.n	2c07c <sys_slist_find_and_remove+0xe>
   2c078:	4619      	mov	r1, r3
   2c07a:	681b      	ldr	r3, [r3, #0]
   2c07c:	b12b      	cbz	r3, 2c08a <sys_slist_find_and_remove+0x1c>
   2c07e:	4293      	cmp	r3, r2
   2c080:	d1fa      	bne.n	2c078 <sys_slist_find_and_remove+0xa>
   2c082:	f7ff ffe1 	bl	2c048 <sys_slist_remove>
   2c086:	2001      	movs	r0, #1
   2c088:	e000      	b.n	2c08c <sys_slist_find_and_remove+0x1e>
   2c08a:	2000      	movs	r0, #0
   2c08c:	bd08      	pop	{r3, pc}

0002c08e <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   2c08e:	b570      	push	{r4, r5, r6, lr}
   2c090:	4604      	mov	r4, r0
   2c092:	460d      	mov	r5, r1
   2c094:	4616      	mov	r6, r2
	return list->head;
   2c096:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   2c098:	b133      	cbz	r3, 2c0a8 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   2c09a:	f7ff ffe8 	bl	2c06e <sys_slist_find_and_remove>
   2c09e:	b970      	cbnz	r0, 2c0be <gpio_manage_callback+0x30>
			if (!set) {
   2c0a0:	b91e      	cbnz	r6, 2c0aa <gpio_manage_callback+0x1c>
				return -EINVAL;
   2c0a2:	f06f 0015 	mvn.w	r0, #21
   2c0a6:	e006      	b.n	2c0b6 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   2c0a8:	b132      	cbz	r2, 2c0b8 <gpio_manage_callback+0x2a>
   2c0aa:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   2c0ac:	602b      	str	r3, [r5, #0]
	list->head = node;
   2c0ae:	6025      	str	r5, [r4, #0]
	return list->tail;
   2c0b0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c0b2:	b143      	cbz	r3, 2c0c6 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2c0b4:	2000      	movs	r0, #0
}
   2c0b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c0b8:	f06f 0015 	mvn.w	r0, #21
   2c0bc:	e7fb      	b.n	2c0b6 <gpio_manage_callback+0x28>
	if (set) {
   2c0be:	2e00      	cmp	r6, #0
   2c0c0:	d1f3      	bne.n	2c0aa <gpio_manage_callback+0x1c>
	return 0;
   2c0c2:	2000      	movs	r0, #0
   2c0c4:	e7f7      	b.n	2c0b6 <gpio_manage_callback+0x28>
	list->tail = node;
   2c0c6:	6065      	str	r5, [r4, #4]
   2c0c8:	2000      	movs	r0, #0
}
   2c0ca:	e7f4      	b.n	2c0b6 <gpio_manage_callback+0x28>

0002c0cc <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   2c0cc:	b570      	push	{r4, r5, r6, lr}
   2c0ce:	460e      	mov	r6, r1
   2c0d0:	4615      	mov	r5, r2
	return list->head;
   2c0d2:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2c0d4:	b121      	cbz	r1, 2c0e0 <gpio_fire_callbacks+0x14>
	return node->next;
   2c0d6:	680c      	ldr	r4, [r1, #0]
   2c0d8:	b13c      	cbz	r4, 2c0ea <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c0da:	b931      	cbnz	r1, 2c0ea <gpio_fire_callbacks+0x1e>
   2c0dc:	460c      	mov	r4, r1
   2c0de:	e004      	b.n	2c0ea <gpio_fire_callbacks+0x1e>
   2c0e0:	460c      	mov	r4, r1
   2c0e2:	e002      	b.n	2c0ea <gpio_fire_callbacks+0x1e>
   2c0e4:	4623      	mov	r3, r4
   2c0e6:	4621      	mov	r1, r4
   2c0e8:	461c      	mov	r4, r3
   2c0ea:	b171      	cbz	r1, 2c10a <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   2c0ec:	688a      	ldr	r2, [r1, #8]
   2c0ee:	402a      	ands	r2, r5
   2c0f0:	d002      	beq.n	2c0f8 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2c0f2:	684b      	ldr	r3, [r1, #4]
   2c0f4:	4630      	mov	r0, r6
   2c0f6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2c0f8:	2c00      	cmp	r4, #0
   2c0fa:	d0f3      	beq.n	2c0e4 <gpio_fire_callbacks+0x18>
	return node->next;
   2c0fc:	6823      	ldr	r3, [r4, #0]
   2c0fe:	2b00      	cmp	r3, #0
   2c100:	d0f1      	beq.n	2c0e6 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2c102:	2c00      	cmp	r4, #0
   2c104:	d1ef      	bne.n	2c0e6 <gpio_fire_callbacks+0x1a>
   2c106:	4623      	mov	r3, r4
   2c108:	e7ed      	b.n	2c0e6 <gpio_fire_callbacks+0x1a>
		}
	}
}
   2c10a:	bd70      	pop	{r4, r5, r6, pc}

0002c10c <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2c10c:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   2c110:	0580      	lsls	r0, r0, #22
   2c112:	0d80      	lsrs	r0, r0, #22
   2c114:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   2c118:	d033      	beq.n	2c182 <get_drive+0x76>
   2c11a:	d816      	bhi.n	2c14a <get_drive+0x3e>
   2c11c:	2806      	cmp	r0, #6
   2c11e:	d02c      	beq.n	2c17a <get_drive+0x6e>
   2c120:	d906      	bls.n	2c130 <get_drive+0x24>
   2c122:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2c126:	d10d      	bne.n	2c144 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   2c128:	2301      	movs	r3, #1
   2c12a:	700b      	strb	r3, [r1, #0]
	return 0;
   2c12c:	2000      	movs	r0, #0
		break;
   2c12e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2c130:	b300      	cbz	r0, 2c174 <get_drive+0x68>
   2c132:	2802      	cmp	r0, #2
   2c134:	d103      	bne.n	2c13e <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   2c136:	2304      	movs	r3, #4
   2c138:	700b      	strb	r3, [r1, #0]
	return 0;
   2c13a:	2000      	movs	r0, #0
		break;
   2c13c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2c13e:	f06f 0015 	mvn.w	r0, #21
   2c142:	4770      	bx	lr
   2c144:	f06f 0015 	mvn.w	r0, #21
   2c148:	4770      	bx	lr
   2c14a:	f240 2302 	movw	r3, #514	; 0x202
   2c14e:	4298      	cmp	r0, r3
   2c150:	d01b      	beq.n	2c18a <get_drive+0x7e>
   2c152:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   2c156:	d103      	bne.n	2c160 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   2c158:	2303      	movs	r3, #3
   2c15a:	700b      	strb	r3, [r1, #0]
	return 0;
   2c15c:	2000      	movs	r0, #0
		break;
   2c15e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2c160:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   2c164:	d103      	bne.n	2c16e <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   2c166:	2302      	movs	r3, #2
   2c168:	700b      	strb	r3, [r1, #0]
	return 0;
   2c16a:	2000      	movs	r0, #0
		break;
   2c16c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2c16e:	f06f 0015 	mvn.w	r0, #21
   2c172:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2c174:	2000      	movs	r0, #0
   2c176:	7008      	strb	r0, [r1, #0]
		break;
   2c178:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   2c17a:	2306      	movs	r3, #6
   2c17c:	700b      	strb	r3, [r1, #0]
	return 0;
   2c17e:	2000      	movs	r0, #0
		break;
   2c180:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2c182:	2307      	movs	r3, #7
   2c184:	700b      	strb	r3, [r1, #0]
	return 0;
   2c186:	2000      	movs	r0, #0
		break;
   2c188:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   2c18a:	2305      	movs	r3, #5
   2c18c:	700b      	strb	r3, [r1, #0]
	return 0;
   2c18e:	2000      	movs	r0, #0
}
   2c190:	4770      	bx	lr

0002c192 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2c192:	f010 0f10 	tst.w	r0, #16
   2c196:	d104      	bne.n	2c1a2 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2c198:	f010 0f20 	tst.w	r0, #32
   2c19c:	d103      	bne.n	2c1a6 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   2c19e:	2000      	movs	r0, #0
   2c1a0:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2c1a2:	2003      	movs	r0, #3
   2c1a4:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2c1a6:	2001      	movs	r0, #1
}
   2c1a8:	4770      	bx	lr

0002c1aa <gpio_nrfx_port_get_raw>:
	return port->config;
   2c1aa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c1ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2c1ae:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2c1b2:	600b      	str	r3, [r1, #0]
}
   2c1b4:	2000      	movs	r0, #0
   2c1b6:	4770      	bx	lr

0002c1b8 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2c1b8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c1ba:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2c1bc:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2c1c0:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2c1c4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2c1c8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2c1cc:	2000      	movs	r0, #0
   2c1ce:	4770      	bx	lr

0002c1d0 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2c1d0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c1d2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2c1d4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2c1d8:	2000      	movs	r0, #0
   2c1da:	4770      	bx	lr

0002c1dc <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2c1dc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c1de:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2c1e0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2c1e4:	2000      	movs	r0, #0
   2c1e6:	4770      	bx	lr

0002c1e8 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2c1e8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c1ea:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2c1ec:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2c1f0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2c1f4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2c1f6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2c1fa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2c1fe:	2000      	movs	r0, #0
   2c200:	4770      	bx	lr

0002c202 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   2c202:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   2c206:	d007      	beq.n	2c218 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2c208:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   2c20c:	d00d      	beq.n	2c22a <get_trigger+0x28>
   2c20e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2c212:	d008      	beq.n	2c226 <get_trigger+0x24>
   2c214:	2001      	movs	r0, #1
}
   2c216:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2c218:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   2c21c:	d001      	beq.n	2c222 <get_trigger+0x20>
   2c21e:	2005      	movs	r0, #5
   2c220:	4770      	bx	lr
   2c222:	2004      	movs	r0, #4
   2c224:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2c226:	2002      	movs	r0, #2
   2c228:	4770      	bx	lr
   2c22a:	2003      	movs	r0, #3
   2c22c:	4770      	bx	lr

0002c22e <gpio_nrfx_manage_callback>:
{
   2c22e:	b508      	push	{r3, lr}
	return port->data;
   2c230:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2c232:	3004      	adds	r0, #4
   2c234:	f7ff ff2b 	bl	2c08e <gpio_manage_callback>
}
   2c238:	bd08      	pop	{r3, pc}

0002c23a <nrfx_gpio_handler>:
{
   2c23a:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   2c23c:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2c240:	0940      	lsrs	r0, r0, #5
   2c242:	f7f2 fa5d 	bl	1e700 <get_dev>
	if (port == NULL) {
   2c246:	b130      	cbz	r0, 2c256 <nrfx_gpio_handler+0x1c>
   2c248:	4601      	mov	r1, r0
	return port->data;
   2c24a:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   2c24c:	2201      	movs	r2, #1
   2c24e:	40a2      	lsls	r2, r4
   2c250:	3004      	adds	r0, #4
   2c252:	f7ff ff3b 	bl	2c0cc <gpio_fire_callbacks>
}
   2c256:	bd10      	pop	{r4, pc}

0002c258 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   2c258:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2c25a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2c25c:	f04f 0140 	mov.w	r1, #64	; 0x40
   2c260:	f3ef 8311 	mrs	r3, BASEPRI
   2c264:	f381 8812 	msr	BASEPRI_MAX, r1
   2c268:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c26c:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2c270:	b131      	cbz	r1, 2c280 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c272:	2100      	movs	r1, #0
   2c274:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   2c278:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c27c:	2101      	movs	r1, #1
   2c27e:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   2c280:	f383 8811 	msr	BASEPRI, r3
   2c284:	f3bf 8f6f 	isb	sy
}
   2c288:	4770      	bx	lr

0002c28a <uarte_nrfx_isr_int>:
{
   2c28a:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2c28c:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   2c28e:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   2c290:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2c294:	f413 7f80 	tst.w	r3, #256	; 0x100
   2c298:	d002      	beq.n	2c2a0 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c29a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2c29e:	b9d3      	cbnz	r3, 2c2d6 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2c2a0:	686b      	ldr	r3, [r5, #4]
   2c2a2:	f013 0f10 	tst.w	r3, #16
   2c2a6:	d015      	beq.n	2c2d4 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   2c2a8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c2ac:	f3ef 8311 	mrs	r3, BASEPRI
   2c2b0:	f382 8812 	msr	BASEPRI_MAX, r2
   2c2b4:	f3bf 8f6f 	isb	sy
   2c2b8:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2c2bc:	b112      	cbz	r2, 2c2c4 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2c2be:	2200      	movs	r2, #0
   2c2c0:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2c2c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2c2c8:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   2c2cc:	f383 8811 	msr	BASEPRI, r3
   2c2d0:	f3bf 8f6f 	isb	sy
}
   2c2d4:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2c2d6:	f7ff ffbf 	bl	2c258 <endtx_isr>
   2c2da:	e7e1      	b.n	2c2a0 <uarte_nrfx_isr_int+0x16>

0002c2dc <uarte_nrfx_configure>:
{
   2c2dc:	b570      	push	{r4, r5, r6, lr}
   2c2de:	b082      	sub	sp, #8
   2c2e0:	4606      	mov	r6, r0
   2c2e2:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   2c2e4:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
   2c2e6:	794b      	ldrb	r3, [r1, #5]
   2c2e8:	2b01      	cmp	r3, #1
   2c2ea:	d006      	beq.n	2c2fa <uarte_nrfx_configure+0x1e>
   2c2ec:	2b03      	cmp	r3, #3
   2c2ee:	d011      	beq.n	2c314 <uarte_nrfx_configure+0x38>
   2c2f0:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2c2f4:	4618      	mov	r0, r3
   2c2f6:	b002      	add	sp, #8
   2c2f8:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2c2fa:	2300      	movs	r3, #0
   2c2fc:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2c300:	79a3      	ldrb	r3, [r4, #6]
   2c302:	2b03      	cmp	r3, #3
   2c304:	d137      	bne.n	2c376 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   2c306:	79e3      	ldrb	r3, [r4, #7]
   2c308:	b143      	cbz	r3, 2c31c <uarte_nrfx_configure+0x40>
   2c30a:	2b01      	cmp	r3, #1
   2c30c:	d010      	beq.n	2c330 <uarte_nrfx_configure+0x54>
   2c30e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2c312:	e7ef      	b.n	2c2f4 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2c314:	2310      	movs	r3, #16
   2c316:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   2c31a:	e7f1      	b.n	2c300 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2c31c:	2300      	movs	r3, #0
   2c31e:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   2c322:	7923      	ldrb	r3, [r4, #4]
   2c324:	b143      	cbz	r3, 2c338 <uarte_nrfx_configure+0x5c>
   2c326:	2b02      	cmp	r3, #2
   2c328:	d021      	beq.n	2c36e <uarte_nrfx_configure+0x92>
   2c32a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2c32e:	e7e1      	b.n	2c2f4 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2c330:	2301      	movs	r3, #1
   2c332:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2c336:	e7f4      	b.n	2c322 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2c338:	2300      	movs	r3, #0
   2c33a:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2c33e:	6821      	ldr	r1, [r4, #0]
   2c340:	4630      	mov	r0, r6
   2c342:	f7f2 faf5 	bl	1e930 <baudrate_set>
   2c346:	4603      	mov	r3, r0
   2c348:	b9c0      	cbnz	r0, 2c37c <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
   2c34a:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   2c34c:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2c34e:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   2c352:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   2c356:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2c35a:	4331      	orrs	r1, r6
   2c35c:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2c35e:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   2c362:	3504      	adds	r5, #4
   2c364:	e894 0003 	ldmia.w	r4, {r0, r1}
   2c368:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   2c36c:	e7c2      	b.n	2c2f4 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2c36e:	230e      	movs	r3, #14
   2c370:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   2c374:	e7e3      	b.n	2c33e <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
   2c376:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2c37a:	e7bb      	b.n	2c2f4 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   2c37c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2c380:	e7b8      	b.n	2c2f4 <uarte_nrfx_configure+0x18>

0002c382 <uarte_nrfx_config_get>:
{
   2c382:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   2c384:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   2c386:	3304      	adds	r3, #4
   2c388:	e893 0003 	ldmia.w	r3, {r0, r1}
   2c38c:	e882 0003 	stmia.w	r2, {r0, r1}
}
   2c390:	2000      	movs	r0, #0
   2c392:	4770      	bx	lr

0002c394 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   2c394:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2c396:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2c398:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2c39c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2c3a0:	4770      	bx	lr

0002c3a2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   2c3a2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2c3a4:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2c3a6:	685b      	ldr	r3, [r3, #4]
   2c3a8:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c3ac:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2c3b0:	b929      	cbnz	r1, 2c3be <is_tx_ready+0x1c>
   2c3b2:	b933      	cbnz	r3, 2c3c2 <is_tx_ready+0x20>
   2c3b4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2c3b8:	b92b      	cbnz	r3, 2c3c6 <is_tx_ready+0x24>
   2c3ba:	2000      	movs	r0, #0
   2c3bc:	4770      	bx	lr
   2c3be:	2001      	movs	r0, #1
   2c3c0:	4770      	bx	lr
   2c3c2:	2000      	movs	r0, #0
   2c3c4:	4770      	bx	lr
   2c3c6:	2001      	movs	r0, #1
}
   2c3c8:	4770      	bx	lr

0002c3ca <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   2c3ca:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2c3cc:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2c3ce:	2208      	movs	r2, #8
   2c3d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2c3d4:	4770      	bx	lr

0002c3d6 <tx_start>:
{
   2c3d6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2c3d8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2c3da:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2c3dc:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2c3e0:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c3e4:	2200      	movs	r2, #0
   2c3e6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   2c3ea:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   2c3ee:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   2c3f2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2c3f6:	685b      	ldr	r3, [r3, #4]
   2c3f8:	f013 0f10 	tst.w	r3, #16
   2c3fc:	d102      	bne.n	2c404 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c3fe:	2301      	movs	r3, #1
   2c400:	60a3      	str	r3, [r4, #8]
}
   2c402:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2c404:	2101      	movs	r1, #1
   2c406:	f7ff ffe0 	bl	2c3ca <uarte_enable>
    p_reg->INTENSET = mask;
   2c40a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2c40e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2c412:	e7f4      	b.n	2c3fe <tx_start+0x28>

0002c414 <uarte_nrfx_poll_in>:
{
   2c414:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   2c416:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2c418:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2c41a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c41c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2c420:	b162      	cbz	r2, 2c43c <uarte_nrfx_poll_in+0x28>
	*c = *data->rx_data;
   2c422:	6962      	ldr	r2, [r4, #20]
   2c424:	7812      	ldrb	r2, [r2, #0]
   2c426:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c428:	2000      	movs	r0, #0
   2c42a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2c42e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c432:	2201      	movs	r2, #1
   2c434:	601a      	str	r2, [r3, #0]
}
   2c436:	f85d 4b04 	ldr.w	r4, [sp], #4
   2c43a:	4770      	bx	lr
		return -1;
   2c43c:	f04f 30ff 	mov.w	r0, #4294967295
   2c440:	e7f9      	b.n	2c436 <uarte_nrfx_poll_in+0x22>

0002c442 <k_msleep>:
{
   2c442:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2c444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2c448:	17c1      	asrs	r1, r0, #31
   2c44a:	03c9      	lsls	r1, r1, #15
   2c44c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2c450:	03c0      	lsls	r0, r0, #15
   2c452:	f240 33e7 	movw	r3, #999	; 0x3e7
   2c456:	18c0      	adds	r0, r0, r3
   2c458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c45c:	f04f 0300 	mov.w	r3, #0
   2c460:	f141 0100 	adc.w	r1, r1, #0
   2c464:	f7d4 fa6a 	bl	93c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2c468:	f7f6 fc2c 	bl	22cc4 <z_impl_k_sleep>
}
   2c46c:	bd08      	pop	{r3, pc}

0002c46e <wait_tx_ready>:
{
   2c46e:	b570      	push	{r4, r5, r6, lr}
   2c470:	4606      	mov	r6, r0
   2c472:	e013      	b.n	2c49c <wait_tx_ready+0x2e>
		if (res) {
   2c474:	b17d      	cbz	r5, 2c496 <wait_tx_ready+0x28>
	__asm__ volatile(
   2c476:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c47a:	f3ef 8411 	mrs	r4, BASEPRI
   2c47e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c482:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2c486:	4630      	mov	r0, r6
   2c488:	f7ff ff8b 	bl	2c3a2 <is_tx_ready>
   2c48c:	b998      	cbnz	r0, 2c4b6 <wait_tx_ready+0x48>
	__asm__ volatile(
   2c48e:	f384 8811 	msr	BASEPRI, r4
   2c492:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   2c496:	2001      	movs	r0, #1
   2c498:	f7ff ffd3 	bl	2c442 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2c49c:	2464      	movs	r4, #100	; 0x64
   2c49e:	4630      	mov	r0, r6
   2c4a0:	f7ff ff7f 	bl	2c3a2 <is_tx_ready>
   2c4a4:	4605      	mov	r5, r0
   2c4a6:	2800      	cmp	r0, #0
   2c4a8:	d1e4      	bne.n	2c474 <wait_tx_ready+0x6>
   2c4aa:	2001      	movs	r0, #1
   2c4ac:	f000 fe9a 	bl	2d1e4 <nrfx_busy_wait>
   2c4b0:	3c01      	subs	r4, #1
   2c4b2:	d1f4      	bne.n	2c49e <wait_tx_ready+0x30>
   2c4b4:	e7de      	b.n	2c474 <wait_tx_ready+0x6>
}
   2c4b6:	4620      	mov	r0, r4
   2c4b8:	bd70      	pop	{r4, r5, r6, pc}

0002c4ba <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   2c4ba:	b510      	push	{r4, lr}
   2c4bc:	b082      	sub	sp, #8
   2c4be:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2c4c0:	aa01      	add	r2, sp, #4
   2c4c2:	f000 f91c 	bl	2c6fe <pinctrl_lookup_state>
	if (ret < 0) {
   2c4c6:	2800      	cmp	r0, #0
   2c4c8:	db05      	blt.n	2c4d6 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2c4ca:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2c4cc:	6822      	ldr	r2, [r4, #0]
   2c4ce:	7919      	ldrb	r1, [r3, #4]
   2c4d0:	6818      	ldr	r0, [r3, #0]
   2c4d2:	f7f2 ff1f 	bl	1f314 <pinctrl_configure_pins>
}
   2c4d6:	b002      	add	sp, #8
   2c4d8:	bd10      	pop	{r4, pc}

0002c4da <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   2c4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c4de:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   2c4e0:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   2c4e2:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2c4e4:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2c4e8:	2100      	movs	r1, #0
   2c4ea:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2c4ee:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2c4f2:	68f8      	ldr	r0, [r7, #12]
   2c4f4:	f7ff ffe1 	bl	2c4ba <pinctrl_apply_state>
	if (err < 0) {
   2c4f8:	1e05      	subs	r5, r0, #0
   2c4fa:	db35      	blt.n	2c568 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   2c4fc:	f108 0104 	add.w	r1, r8, #4
   2c500:	4620      	mov	r0, r4
   2c502:	f7ff feeb 	bl	2c2dc <uarte_nrfx_configure>
	if (err) {
   2c506:	4605      	mov	r5, r0
   2c508:	bb70      	cbnz	r0, 2c568 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2c50a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2c50c:	f013 0f02 	tst.w	r3, #2
   2c510:	d12d      	bne.n	2c56e <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2c512:	2308      	movs	r3, #8
   2c514:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   2c518:	7a3b      	ldrb	r3, [r7, #8]
   2c51a:	b95b      	cbnz	r3, 2c534 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c51c:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   2c520:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   2c524:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2c528:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2c52c:	2301      	movs	r3, #1
   2c52e:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c532:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2c534:	687b      	ldr	r3, [r7, #4]
   2c536:	f013 0f02 	tst.w	r3, #2
   2c53a:	d103      	bne.n	2c544 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   2c53c:	f44f 7380 	mov.w	r3, #256	; 0x100
   2c540:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2c544:	687b      	ldr	r3, [r7, #4]
   2c546:	f013 0f10 	tst.w	r3, #16
   2c54a:	d003      	beq.n	2c554 <uarte_instance_init+0x7a>
   2c54c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2c550:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   2c554:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2c558:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2c55c:	2300      	movs	r3, #0
   2c55e:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c562:	2301      	movs	r3, #1
   2c564:	60b3      	str	r3, [r6, #8]
   2c566:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2c568:	4628      	mov	r0, r5
   2c56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   2c56e:	4641      	mov	r1, r8
   2c570:	4630      	mov	r0, r6
   2c572:	f7f2 fab3 	bl	1eadc <endtx_stoptx_ppi_init>
		if (err < 0) {
   2c576:	2800      	cmp	r0, #0
   2c578:	dacb      	bge.n	2c512 <uarte_instance_init+0x38>
			return err;
   2c57a:	4605      	mov	r5, r0
   2c57c:	e7f4      	b.n	2c568 <uarte_instance_init+0x8e>

0002c57e <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2c57e:	b510      	push	{r4, lr}
   2c580:	4604      	mov	r4, r0
   2c582:	2200      	movs	r2, #0
   2c584:	2101      	movs	r1, #1
   2c586:	2002      	movs	r0, #2
   2c588:	f7fc ffc9 	bl	2951e <z_arm_irq_priority_set>
   2c58c:	2002      	movs	r0, #2
   2c58e:	f7fc ffbc 	bl	2950a <arch_irq_enable>
   2c592:	2100      	movs	r1, #0
   2c594:	4620      	mov	r0, r4
   2c596:	f7ff ffa0 	bl	2c4da <uarte_instance_init>
   2c59a:	bd10      	pop	{r4, pc}

0002c59c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2c59c:	b510      	push	{r4, lr}
   2c59e:	4604      	mov	r4, r0
   2c5a0:	2200      	movs	r2, #0
   2c5a2:	2101      	movs	r1, #1
   2c5a4:	2028      	movs	r0, #40	; 0x28
   2c5a6:	f7fc ffba 	bl	2951e <z_arm_irq_priority_set>
   2c5aa:	2028      	movs	r0, #40	; 0x28
   2c5ac:	f7fc ffad 	bl	2950a <arch_irq_enable>
   2c5b0:	2100      	movs	r1, #0
   2c5b2:	4620      	mov	r0, r4
   2c5b4:	f7ff ff91 	bl	2c4da <uarte_instance_init>
   2c5b8:	bd10      	pop	{r4, pc}

0002c5ba <rng_pool_put>:
	uint8_t first = rngp->first_read;
   2c5ba:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2c5bc:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2c5be:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   2c5c2:	1a9a      	subs	r2, r3, r2
   2c5c4:	ea3c 0202 	bics.w	r2, ip, r2
   2c5c8:	d007      	beq.n	2c5da <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   2c5ca:	18c2      	adds	r2, r0, r3
   2c5cc:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2c5ce:	3301      	adds	r3, #1
   2c5d0:	ea03 030c 	and.w	r3, r3, ip
   2c5d4:	7083      	strb	r3, [r0, #2]
	return 0;
   2c5d6:	2000      	movs	r0, #0
   2c5d8:	4770      	bx	lr
		return -ENOBUFS;
   2c5da:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2c5de:	4770      	bx	lr

0002c5e0 <rng_pool_init>:
	rngp->first_alloc = 0U;
   2c5e0:	2300      	movs	r3, #0
   2c5e2:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2c5e4:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2c5e6:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2c5e8:	3901      	subs	r1, #1
   2c5ea:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2c5ec:	7102      	strb	r2, [r0, #4]
}
   2c5ee:	4770      	bx	lr

0002c5f0 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2c5f0:	2000      	movs	r0, #0
   2c5f2:	4770      	bx	lr

0002c5f4 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2c5f4:	b538      	push	{r3, r4, r5, lr}
   2c5f6:	460c      	mov	r4, r1
   2c5f8:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2c5fa:	f7ec ff71 	bl	194e0 <bt_is_ready>
   2c5fe:	b120      	cbz	r0, 2c60a <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2c600:	4629      	mov	r1, r5
   2c602:	4620      	mov	r0, r4
   2c604:	f7ec f84c 	bl	186a0 <bt_hci_le_rand>
}
   2c608:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2c60a:	f06f 000a 	mvn.w	r0, #10
   2c60e:	e7fb      	b.n	2c608 <entropy_bt_get_entropy+0x14>

0002c610 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2c610:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c612:	b083      	sub	sp, #12
   2c614:	460f      	mov	r7, r1
   2c616:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2c618:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2c61c:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2c61e:	e00a      	b.n	2c636 <entropy_cc3xx_rng_get_entropy+0x26>
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   2c620:	ab01      	add	r3, sp, #4
   2c622:	462a      	mov	r2, r5
   2c624:	1939      	adds	r1, r7, r4
   2c626:	2000      	movs	r0, #0
   2c628:	f7f8 fdae 	bl	25188 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   2c62c:	b970      	cbnz	r0, 2c64c <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
		}

		if (olen != chunk_size) {
   2c62e:	9b01      	ldr	r3, [sp, #4]
   2c630:	42ab      	cmp	r3, r5
   2c632:	d10f      	bne.n	2c654 <entropy_cc3xx_rng_get_entropy+0x44>
			return -EINVAL;
		}

		offset += chunk_size;
   2c634:	442c      	add	r4, r5
	while (offset < length) {
   2c636:	42a6      	cmp	r6, r4
   2c638:	d905      	bls.n	2c646 <entropy_cc3xx_rng_get_entropy+0x36>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2c63a:	1b33      	subs	r3, r6, r4
   2c63c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2c640:	d2ee      	bcs.n	2c620 <entropy_cc3xx_rng_get_entropy+0x10>
			chunk_size = length - offset;
   2c642:	461d      	mov	r5, r3
   2c644:	e7ec      	b.n	2c620 <entropy_cc3xx_rng_get_entropy+0x10>
	}

	if (offset == length) {
   2c646:	d008      	beq.n	2c65a <entropy_cc3xx_rng_get_entropy+0x4a>
	int err = EINVAL;
   2c648:	2016      	movs	r0, #22
   2c64a:	e001      	b.n	2c650 <entropy_cc3xx_rng_get_entropy+0x40>
			return -EINVAL;
   2c64c:	f06f 0015 	mvn.w	r0, #21
		err = 0;
	}

	return err;
}
   2c650:	b003      	add	sp, #12
   2c652:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
   2c654:	f06f 0015 	mvn.w	r0, #21
   2c658:	e7fa      	b.n	2c650 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   2c65a:	2000      	movs	r0, #0
   2c65c:	e7f8      	b.n	2c650 <entropy_cc3xx_rng_get_entropy+0x40>

0002c65e <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2c65e:	b508      	push	{r3, lr}
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2c660:	2200      	movs	r2, #0
   2c662:	4611      	mov	r1, r2
   2c664:	4610      	mov	r0, r2
   2c666:	f7f8 fd5b 	bl	25120 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
   2c66a:	b900      	cbnz	r0, 2c66e <entropy_cc3xx_rng_init+0x10>
		return -EINVAL;
	}

	return 0;
}
   2c66c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2c66e:	f06f 0015 	mvn.w	r0, #21
   2c672:	e7fb      	b.n	2c66c <entropy_cc3xx_rng_init+0xe>

0002c674 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2c674:	4770      	bx	lr

0002c676 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2c676:	1a40      	subs	r0, r0, r1
}
   2c678:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2c67c:	4770      	bx	lr

0002c67e <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2c67e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2c682:	009b      	lsls	r3, r3, #2
   2c684:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c686:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2c68a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2c68e:	6818      	ldr	r0, [r3, #0]
}
   2c690:	3800      	subs	r0, #0
   2c692:	bf18      	it	ne
   2c694:	2001      	movne	r0, #1
   2c696:	4770      	bx	lr

0002c698 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2c698:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2c69c:	009b      	lsls	r3, r3, #2
   2c69e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2c6a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2c6a4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2c6a8:	2200      	movs	r2, #0
   2c6aa:	601a      	str	r2, [r3, #0]
   2c6ac:	681b      	ldr	r3, [r3, #0]
}
   2c6ae:	4770      	bx	lr

0002c6b0 <absolute_time_to_cc>:
}
   2c6b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2c6b4:	4770      	bx	lr

0002c6b6 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2c6b6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2c6ba:	b672      	cpsid	i
}
   2c6bc:	4770      	bx	lr

0002c6be <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2c6be:	f380 8810 	msr	PRIMASK, r0
}
   2c6c2:	4770      	bx	lr

0002c6c4 <compare_set>:
{
   2c6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c6c6:	b083      	sub	sp, #12
   2c6c8:	4604      	mov	r4, r0
   2c6ca:	4617      	mov	r7, r2
   2c6cc:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2c6ce:	f7f2 fbfb 	bl	1eec8 <compare_int_lock>
   2c6d2:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2c6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c6d6:	9301      	str	r3, [sp, #4]
   2c6d8:	9b08      	ldr	r3, [sp, #32]
   2c6da:	9300      	str	r3, [sp, #0]
   2c6dc:	463a      	mov	r2, r7
   2c6de:	462b      	mov	r3, r5
   2c6e0:	4620      	mov	r0, r4
   2c6e2:	f7f2 fcbf 	bl	1f064 <compare_set_nolocks>
   2c6e6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2c6e8:	4631      	mov	r1, r6
   2c6ea:	4620      	mov	r0, r4
   2c6ec:	f7f2 fc42 	bl	1ef74 <compare_int_unlock>
}
   2c6f0:	4628      	mov	r0, r5
   2c6f2:	b003      	add	sp, #12
   2c6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c6f6 <sys_clock_cycle_get_32>:
{
   2c6f6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2c6f8:	f7f2 fc94 	bl	1f024 <z_nrf_rtc_timer_read>
}
   2c6fc:	bd08      	pop	{r3, pc}

0002c6fe <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2c6fe:	b410      	push	{r4}
	*state = &config->states[0];
   2c700:	6843      	ldr	r3, [r0, #4]
   2c702:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2c704:	e001      	b.n	2c70a <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   2c706:	3308      	adds	r3, #8
   2c708:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2c70a:	6813      	ldr	r3, [r2, #0]
   2c70c:	f890 c008 	ldrb.w	ip, [r0, #8]
   2c710:	6844      	ldr	r4, [r0, #4]
   2c712:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
   2c716:	4563      	cmp	r3, ip
   2c718:	d205      	bcs.n	2c726 <pinctrl_lookup_state+0x28>
		if (id == (*state)->id) {
   2c71a:	f893 c005 	ldrb.w	ip, [r3, #5]
   2c71e:	458c      	cmp	ip, r1
   2c720:	d1f1      	bne.n	2c706 <pinctrl_lookup_state+0x8>
			return 0;
   2c722:	2000      	movs	r0, #0
   2c724:	e001      	b.n	2c72a <pinctrl_lookup_state+0x2c>
	}

	return -ENOENT;
   2c726:	f06f 0001 	mvn.w	r0, #1
}
   2c72a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2c72e:	4770      	bx	lr

0002c730 <z_impl_gpio_pin_interrupt_configure>:
{
   2c730:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
   2c732:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
   2c734:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c736:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   2c73a:	d006      	beq.n	2c74a <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2c73c:	6825      	ldr	r5, [r4, #0]
   2c73e:	2401      	movs	r4, #1
   2c740:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c742:	4225      	tst	r5, r4
   2c744:	d001      	beq.n	2c74a <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2c746:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c74a:	699c      	ldr	r4, [r3, #24]
   2c74c:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   2c750:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   2c754:	47a0      	blx	r4
}
   2c756:	bd38      	pop	{r3, r4, r5, pc}

0002c758 <z_impl_gpio_pin_configure>:
{
   2c758:	b538      	push	{r3, r4, r5, lr}
   2c75a:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   2c75c:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
   2c75e:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2c760:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   2c764:	d007      	beq.n	2c776 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2c766:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   2c76a:	d004      	beq.n	2c776 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2c76c:	f012 0f01 	tst.w	r2, #1
   2c770:	d001      	beq.n	2c776 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2c772:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2c776:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2c77a:	f013 0f01 	tst.w	r3, #1
   2c77e:	d00a      	beq.n	2c796 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2c780:	6823      	ldr	r3, [r4, #0]
   2c782:	f04f 0c01 	mov.w	ip, #1
   2c786:	fa0c fc01 	lsl.w	ip, ip, r1
   2c78a:	ea43 030c 	orr.w	r3, r3, ip
   2c78e:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2c790:	682b      	ldr	r3, [r5, #0]
   2c792:	4798      	blx	r3
}
   2c794:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2c796:	6823      	ldr	r3, [r4, #0]
   2c798:	f04f 0c01 	mov.w	ip, #1
   2c79c:	fa0c fc01 	lsl.w	ip, ip, r1
   2c7a0:	ea23 030c 	bic.w	r3, r3, ip
   2c7a4:	6023      	str	r3, [r4, #0]
   2c7a6:	e7f3      	b.n	2c790 <z_impl_gpio_pin_configure+0x38>

0002c7a8 <gpio_pin_configure_dt>:
{
   2c7a8:	b508      	push	{r3, lr}
   2c7aa:	4603      	mov	r3, r0
   2c7ac:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   2c7ae:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2c7b0:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2c7b2:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2c7b4:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2c7b8:	f7ff ffce 	bl	2c758 <z_impl_gpio_pin_configure>
}
   2c7bc:	bd08      	pop	{r3, pc}

0002c7be <gpio_port_get>:
{
   2c7be:	b538      	push	{r3, r4, r5, lr}
   2c7c0:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   2c7c2:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   2c7c4:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   2c7c6:	685b      	ldr	r3, [r3, #4]
   2c7c8:	4798      	blx	r3
	if (ret == 0) {
   2c7ca:	b918      	cbnz	r0, 2c7d4 <gpio_port_get+0x16>
		*value ^= data->invert;
   2c7cc:	6823      	ldr	r3, [r4, #0]
   2c7ce:	682a      	ldr	r2, [r5, #0]
   2c7d0:	4053      	eors	r3, r2
   2c7d2:	6023      	str	r3, [r4, #0]
}
   2c7d4:	bd38      	pop	{r3, r4, r5, pc}

0002c7d6 <gpio_pin_get>:
{
   2c7d6:	b510      	push	{r4, lr}
   2c7d8:	b082      	sub	sp, #8
   2c7da:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
   2c7dc:	a901      	add	r1, sp, #4
   2c7de:	f7ff ffee 	bl	2c7be <gpio_port_get>
	if (ret == 0) {
   2c7e2:	b930      	cbnz	r0, 2c7f2 <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   2c7e4:	2301      	movs	r3, #1
   2c7e6:	40a3      	lsls	r3, r4
   2c7e8:	9a01      	ldr	r2, [sp, #4]
   2c7ea:	4213      	tst	r3, r2
   2c7ec:	bf14      	ite	ne
   2c7ee:	2001      	movne	r0, #1
   2c7f0:	2000      	moveq	r0, #0
}
   2c7f2:	b002      	add	sp, #8
   2c7f4:	bd10      	pop	{r4, pc}

0002c7f6 <gpio_pin_set_raw>:
{
   2c7f6:	b508      	push	{r3, lr}
	if (value != 0)	{
   2c7f8:	b132      	cbz	r2, 2c808 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2c7fa:	2301      	movs	r3, #1
   2c7fc:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2c800:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   2c802:	68db      	ldr	r3, [r3, #12]
   2c804:	4798      	blx	r3
}
   2c806:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   2c808:	2301      	movs	r3, #1
   2c80a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   2c80e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   2c810:	691b      	ldr	r3, [r3, #16]
   2c812:	4798      	blx	r3
	return ret;
   2c814:	e7f7      	b.n	2c806 <gpio_pin_set_raw+0x10>

0002c816 <gpio_pin_set>:
{
   2c816:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
   2c818:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2c81a:	681c      	ldr	r4, [r3, #0]
   2c81c:	2301      	movs	r3, #1
   2c81e:	408b      	lsls	r3, r1
   2c820:	421c      	tst	r4, r3
   2c822:	d002      	beq.n	2c82a <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
   2c824:	fab2 f282 	clz	r2, r2
   2c828:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   2c82a:	f7ff ffe4 	bl	2c7f6 <gpio_pin_set_raw>
}
   2c82e:	bd10      	pop	{r4, pc}

0002c830 <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   2c830:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   2c832:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2c834:	69db      	ldr	r3, [r3, #28]
   2c836:	b113      	cbz	r3, 2c83e <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2c838:	2201      	movs	r2, #1
   2c83a:	4798      	blx	r3
}
   2c83c:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   2c83e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c842:	e7fb      	b.n	2c83c <gpio_add_callback+0xc>

0002c844 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
   2c844:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 1);
   2c846:	2101      	movs	r1, #1
   2c848:	f7f3 f9a6 	bl	1fb98 <dk_set_led>
}
   2c84c:	bd08      	pop	{r3, pc}

0002c84e <dk_set_led_off>:

int dk_set_led_off(uint8_t led_idx)
{
   2c84e:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 0);
   2c850:	2100      	movs	r1, #0
   2c852:	f7f3 f9a1 	bl	1fb98 <dk_set_led>
}
   2c856:	bd08      	pop	{r3, pc}

0002c858 <event_packet_is_discardable>:
	switch (hdr->evt) {
   2c858:	7803      	ldrb	r3, [r0, #0]
   2c85a:	2b3e      	cmp	r3, #62	; 0x3e
   2c85c:	d003      	beq.n	2c866 <event_packet_is_discardable+0xe>
   2c85e:	2bff      	cmp	r3, #255	; 0xff
   2c860:	d008      	beq.n	2c874 <event_packet_is_discardable+0x1c>
   2c862:	2000      	movs	r0, #0
   2c864:	4770      	bx	lr
		switch (me->subevent) {
   2c866:	7883      	ldrb	r3, [r0, #2]
   2c868:	2b02      	cmp	r3, #2
   2c86a:	d001      	beq.n	2c870 <event_packet_is_discardable+0x18>
			return false;
   2c86c:	2000      	movs	r0, #0
   2c86e:	4770      	bx	lr
			return true;
   2c870:	2001      	movs	r0, #1
   2c872:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2c874:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2c876:	2b80      	cmp	r3, #128	; 0x80
   2c878:	d001      	beq.n	2c87e <event_packet_is_discardable+0x26>
			return false;
   2c87a:	2000      	movs	r0, #0
}
   2c87c:	4770      	bx	lr
			return true;
   2c87e:	2001      	movs	r0, #1
   2c880:	4770      	bx	lr

0002c882 <hci_driver_send>:
{
   2c882:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2c884:	8a03      	ldrh	r3, [r0, #16]
   2c886:	b183      	cbz	r3, 2c8aa <hci_driver_send+0x28>
   2c888:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2c88a:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2c88c:	b14b      	cbz	r3, 2c8a2 <hci_driver_send+0x20>
   2c88e:	2b02      	cmp	r3, #2
   2c890:	d10e      	bne.n	2c8b0 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2c892:	f7f3 fba7 	bl	1ffe4 <acl_handle>
   2c896:	4605      	mov	r5, r0
	if (!err) {
   2c898:	b965      	cbnz	r5, 2c8b4 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2c89a:	4620      	mov	r0, r4
   2c89c:	f7ff fa39 	bl	2bd12 <net_buf_unref>
   2c8a0:	e008      	b.n	2c8b4 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2c8a2:	f7f3 fbbd 	bl	20020 <cmd_handle>
   2c8a6:	4605      	mov	r5, r0
		break;
   2c8a8:	e7f6      	b.n	2c898 <hci_driver_send+0x16>
		return -EINVAL;
   2c8aa:	f06f 0515 	mvn.w	r5, #21
   2c8ae:	e001      	b.n	2c8b4 <hci_driver_send+0x32>
	switch (type) {
   2c8b0:	f06f 0515 	mvn.w	r5, #21
}
   2c8b4:	4628      	mov	r0, r5
   2c8b6:	bd38      	pop	{r3, r4, r5, pc}

0002c8b8 <hci_driver_close>:
{
   2c8b8:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2c8ba:	f7f4 f86b 	bl	20994 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2c8be:	f04f 30ff 	mov.w	r0, #4294967295
   2c8c2:	f04f 31ff 	mov.w	r1, #4294967295
   2c8c6:	f7f3 f9cf 	bl	1fc68 <multithreading_lock_acquire>
	if (err) {
   2c8ca:	4604      	mov	r4, r0
   2c8cc:	b108      	cbz	r0, 2c8d2 <hci_driver_close+0x1a>
}
   2c8ce:	4620      	mov	r0, r4
   2c8d0:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   2c8d2:	f7d4 fce3 	bl	129c <sdc_disable>
	if (err) {
   2c8d6:	4604      	mov	r4, r0
   2c8d8:	b910      	cbnz	r0, 2c8e0 <hci_driver_close+0x28>
	MULTITHREADING_LOCK_RELEASE();
   2c8da:	f7f3 f9cf 	bl	1fc7c <multithreading_lock_release>
	return err;
   2c8de:	e7f6      	b.n	2c8ce <hci_driver_close+0x16>
		MULTITHREADING_LOCK_RELEASE();
   2c8e0:	f7f3 f9cc 	bl	1fc7c <multithreading_lock_release>
		return err;
   2c8e4:	e7f3      	b.n	2c8ce <hci_driver_close+0x16>

0002c8e6 <configure_supported_features>:
{
   2c8e6:	b508      	push	{r3, lr}
		err = sdc_support_adv();
   2c8e8:	f7d4 fd8e 	bl	1408 <sdc_support_adv>
		if (err) {
   2c8ec:	b960      	cbnz	r0, 2c908 <configure_supported_features+0x22>
		err = sdc_support_peripheral();
   2c8ee:	f7d4 fdbb 	bl	1468 <sdc_support_peripheral>
		if (err) {
   2c8f2:	b960      	cbnz	r0, 2c90e <configure_supported_features+0x28>
			err = sdc_support_dle_peripheral();
   2c8f4:	f7d4 fd98 	bl	1428 <sdc_support_dle_peripheral>
			if (err) {
   2c8f8:	b960      	cbnz	r0, 2c914 <configure_supported_features+0x2e>
		err = sdc_support_le_2m_phy();
   2c8fa:	f7d4 fda5 	bl	1448 <sdc_support_le_2m_phy>
		if (err) {
   2c8fe:	b960      	cbnz	r0, 2c91a <configure_supported_features+0x34>
			err = sdc_support_phy_update_peripheral();
   2c900:	f7d4 fdc2 	bl	1488 <sdc_support_phy_update_peripheral>
			if (err) {
   2c904:	b960      	cbnz	r0, 2c920 <configure_supported_features+0x3a>
}
   2c906:	bd08      	pop	{r3, pc}
			return -ENOTSUP;
   2c908:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c90c:	e7fb      	b.n	2c906 <configure_supported_features+0x20>
			return -ENOTSUP;
   2c90e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c912:	e7f8      	b.n	2c906 <configure_supported_features+0x20>
				return -ENOTSUP;
   2c914:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c918:	e7f5      	b.n	2c906 <configure_supported_features+0x20>
			return -ENOTSUP;
   2c91a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c91e:	e7f2      	b.n	2c906 <configure_supported_features+0x20>
				return -ENOTSUP;
   2c920:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c924:	e7ef      	b.n	2c906 <configure_supported_features+0x20>

0002c926 <receive_work_handler>:
{
   2c926:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   2c928:	f7f3 fd6a 	bl	20400 <hci_driver_receive_process>
}
   2c92c:	bd08      	pop	{r3, pc}

0002c92e <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2c92e:	230f      	movs	r3, #15
   2c930:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2c932:	2304      	movs	r3, #4
   2c934:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2c936:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2c938:	2301      	movs	r3, #1
   2c93a:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2c93c:	8081      	strh	r1, [r0, #4]
}
   2c93e:	4770      	bx	lr

0002c940 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2c940:	f04f 0c0e 	mov.w	ip, #14
   2c944:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   2c948:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2c94a:	2201      	movs	r2, #1
   2c94c:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2c94e:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2c952:	7143      	strb	r3, [r0, #5]
}
   2c954:	4770      	bx	lr

0002c956 <le_read_supported_states>:
	*buf = states1;
   2c956:	238f      	movs	r3, #143	; 0x8f
   2c958:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2c95a:	23c0      	movs	r3, #192	; 0xc0
   2c95c:	7103      	strb	r3, [r0, #4]
}
   2c95e:	4770      	bx	lr

0002c960 <status_param_cmd_put>:
}
   2c960:	2001      	movs	r0, #1
   2c962:	4770      	bx	lr

0002c964 <link_control_cmd_put>:
{
   2c964:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2c966:	7842      	ldrb	r2, [r0, #1]
   2c968:	f810 3b03 	ldrb.w	r3, [r0], #3
   2c96c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2c970:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2c972:	f240 4206 	movw	r2, #1030	; 0x406
   2c976:	4293      	cmp	r3, r2
   2c978:	d005      	beq.n	2c986 <link_control_cmd_put+0x22>
   2c97a:	f240 421d 	movw	r2, #1053	; 0x41d
   2c97e:	4293      	cmp	r3, r2
   2c980:	d004      	beq.n	2c98c <link_control_cmd_put+0x28>
   2c982:	2001      	movs	r0, #1
}
   2c984:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2c986:	f7e0 fcbb 	bl	d300 <sdc_hci_cmd_lc_disconnect>
   2c98a:	e7fb      	b.n	2c984 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2c98c:	f7e0 fcba 	bl	d304 <sdc_hci_cmd_lc_read_remote_version_information>
   2c990:	e7f8      	b.n	2c984 <link_control_cmd_put+0x20>

0002c992 <controller_and_baseband_cmd_put>:
{
   2c992:	b508      	push	{r3, lr}
   2c994:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2c996:	3003      	adds	r0, #3
   2c998:	f893 c001 	ldrb.w	ip, [r3, #1]
   2c99c:	781b      	ldrb	r3, [r3, #0]
   2c99e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2c9a2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2c9a4:	f640 4c63 	movw	ip, #3171	; 0xc63
   2c9a8:	4563      	cmp	r3, ip
   2c9aa:	d02c      	beq.n	2ca06 <controller_and_baseband_cmd_put+0x74>
   2c9ac:	f101 0106 	add.w	r1, r1, #6
   2c9b0:	dc16      	bgt.n	2c9e0 <controller_and_baseband_cmd_put+0x4e>
   2c9b2:	f640 4c03 	movw	ip, #3075	; 0xc03
   2c9b6:	4563      	cmp	r3, ip
   2c9b8:	d022      	beq.n	2ca00 <controller_and_baseband_cmd_put+0x6e>
   2c9ba:	f640 4c2d 	movw	ip, #3117	; 0xc2d
   2c9be:	4563      	cmp	r3, ip
   2c9c0:	d105      	bne.n	2c9ce <controller_and_baseband_cmd_put+0x3c>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2c9c2:	7813      	ldrb	r3, [r2, #0]
   2c9c4:	3303      	adds	r3, #3
   2c9c6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2c9c8:	f7e0 fb80 	bl	d0cc <sdc_hci_cmd_cb_read_transmit_power_level>
   2c9cc:	e007      	b.n	2c9de <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2c9ce:	f640 4201 	movw	r2, #3073	; 0xc01
   2c9d2:	4293      	cmp	r3, r2
   2c9d4:	d102      	bne.n	2c9dc <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2c9d6:	f7e0 fb7b 	bl	d0d0 <sdc_hci_cmd_cb_set_event_mask>
   2c9da:	e000      	b.n	2c9de <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2c9dc:	2001      	movs	r0, #1
}
   2c9de:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2c9e0:	f640 4c7b 	movw	ip, #3195	; 0xc7b
   2c9e4:	4563      	cmp	r3, ip
   2c9e6:	d011      	beq.n	2ca0c <controller_and_baseband_cmd_put+0x7a>
   2c9e8:	f640 4c7c 	movw	ip, #3196	; 0xc7c
   2c9ec:	4563      	cmp	r3, ip
   2c9ee:	d105      	bne.n	2c9fc <controller_and_baseband_cmd_put+0x6a>
		*param_length_out +=
   2c9f0:	7813      	ldrb	r3, [r2, #0]
   2c9f2:	3302      	adds	r3, #2
   2c9f4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2c9f6:	f7e0 fb75 	bl	d0e4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2c9fa:	e7f0      	b.n	2c9de <controller_and_baseband_cmd_put+0x4c>
	switch (opcode)	{
   2c9fc:	2001      	movs	r0, #1
   2c9fe:	e7ee      	b.n	2c9de <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_reset();
   2ca00:	f7d4 fe9e 	bl	1740 <sdc_hci_cmd_cb_reset>
   2ca04:	e7eb      	b.n	2c9de <controller_and_baseband_cmd_put+0x4c>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2ca06:	f7e0 fb68 	bl	d0da <sdc_hci_cmd_cb_set_event_mask_page_2>
   2ca0a:	e7e8      	b.n	2c9de <controller_and_baseband_cmd_put+0x4c>
		*param_length_out +=
   2ca0c:	7813      	ldrb	r3, [r2, #0]
   2ca0e:	3304      	adds	r3, #4
   2ca10:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2ca12:	f7e0 fb59 	bl	d0c8 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2ca16:	e7e2      	b.n	2c9de <controller_and_baseband_cmd_put+0x4c>

0002ca18 <supported_commands>:
{
   2ca18:	b510      	push	{r4, lr}
   2ca1a:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2ca1c:	2230      	movs	r2, #48	; 0x30
   2ca1e:	2100      	movs	r1, #0
   2ca20:	f001 fc61 	bl	2e2e6 <memset>
	cmds->hci_disconnect = 1;
   2ca24:	7823      	ldrb	r3, [r4, #0]
   2ca26:	f043 0320 	orr.w	r3, r3, #32
   2ca2a:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2ca2c:	78a3      	ldrb	r3, [r4, #2]
   2ca2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ca32:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2ca34:	7963      	ldrb	r3, [r4, #5]
   2ca36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ca3a:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2ca3c:	b2db      	uxtb	r3, r3
   2ca3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ca42:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2ca44:	7aa3      	ldrb	r3, [r4, #10]
   2ca46:	f043 0304 	orr.w	r3, r3, #4
   2ca4a:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2ca4c:	7ba3      	ldrb	r3, [r4, #14]
   2ca4e:	f043 0308 	orr.w	r3, r3, #8
   2ca52:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2ca54:	b2db      	uxtb	r3, r3
   2ca56:	f043 0320 	orr.w	r3, r3, #32
   2ca5a:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2ca5c:	7be3      	ldrb	r3, [r4, #15]
   2ca5e:	f043 0302 	orr.w	r3, r3, #2
   2ca62:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2ca64:	7da3      	ldrb	r3, [r4, #22]
   2ca66:	f043 0304 	orr.w	r3, r3, #4
   2ca6a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2ca6c:	7e63      	ldrb	r3, [r4, #25]
   2ca6e:	f043 0301 	orr.w	r3, r3, #1
   2ca72:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   2ca74:	b2db      	uxtb	r3, r3
   2ca76:	f043 0302 	orr.w	r3, r3, #2
   2ca7a:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2ca7c:	b2db      	uxtb	r3, r3
   2ca7e:	f043 0304 	orr.w	r3, r3, #4
   2ca82:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   2ca84:	b2db      	uxtb	r3, r3
   2ca86:	f043 0310 	orr.w	r3, r3, #16
   2ca8a:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_parameters = 1;
   2ca8c:	b2db      	uxtb	r3, r3
   2ca8e:	f043 0320 	orr.w	r3, r3, #32
   2ca92:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_advertising_physical_channel_tx_power = 1;
   2ca94:	b2db      	uxtb	r3, r3
   2ca96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ca9a:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   2ca9c:	b2db      	uxtb	r3, r3
   2ca9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2caa2:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   2caa4:	7ea3      	ldrb	r3, [r4, #26]
   2caa6:	f043 0301 	orr.w	r3, r3, #1
   2caaa:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_advertising_enable = 1;
   2caac:	b2db      	uxtb	r3, r3
   2caae:	f043 0302 	orr.w	r3, r3, #2
   2cab2:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_data_related_address_changes = 1;
   2cab4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2cab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cabc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_read_filter_accept_list_size = 1;
   2cac0:	7ea3      	ldrb	r3, [r4, #26]
   2cac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cac6:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   2cac8:	b2db      	uxtb	r3, r3
   2caca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2cace:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2cad0:	7ee3      	ldrb	r3, [r4, #27]
   2cad2:	f043 0301 	orr.w	r3, r3, #1
   2cad6:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   2cad8:	b2db      	uxtb	r3, r3
   2cada:	f043 0302 	orr.w	r3, r3, #2
   2cade:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_channel_map = 1;
   2cae0:	b2db      	uxtb	r3, r3
   2cae2:	f043 0310 	orr.w	r3, r3, #16
   2cae6:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_remote_features = 1;
   2cae8:	b2db      	uxtb	r3, r3
   2caea:	f043 0320 	orr.w	r3, r3, #32
   2caee:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   2caf0:	b2db      	uxtb	r3, r3
   2caf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2caf6:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   2caf8:	b2db      	uxtb	r3, r3
   2cafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2cafe:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_long_term_key_request_reply = 1;
   2cb00:	7f23      	ldrb	r3, [r4, #28]
   2cb02:	f043 0302 	orr.w	r3, r3, #2
   2cb06:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_long_term_key_request_negative_reply = 1;
   2cb08:	b2db      	uxtb	r3, r3
   2cb0a:	f043 0304 	orr.w	r3, r3, #4
   2cb0e:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_read_supported_states = 1;
   2cb10:	b2db      	uxtb	r3, r3
   2cb12:	f043 0308 	orr.w	r3, r3, #8
   2cb16:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   2cb18:	b2db      	uxtb	r3, r3
   2cb1a:	f043 0310 	orr.w	r3, r3, #16
   2cb1e:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   2cb20:	b2db      	uxtb	r3, r3
   2cb22:	f043 0320 	orr.w	r3, r3, #32
   2cb26:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2cb28:	b2db      	uxtb	r3, r3
   2cb2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cb2e:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2cb30:	f894 3020 	ldrb.w	r3, [r4, #32]
   2cb34:	f043 0310 	orr.w	r3, r3, #16
   2cb38:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2cb3c:	b2db      	uxtb	r3, r3
   2cb3e:	f043 0320 	orr.w	r3, r3, #32
   2cb42:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2cb46:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2cb4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cb4e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2cb52:	b2db      	uxtb	r3, r3
   2cb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2cb58:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2cb5c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2cb60:	f043 0301 	orr.w	r3, r3, #1
   2cb64:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   2cb68:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2cb6c:	f043 0308 	orr.w	r3, r3, #8
   2cb70:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_read_phy = 1;
   2cb74:	b2db      	uxtb	r3, r3
   2cb76:	f043 0310 	orr.w	r3, r3, #16
   2cb7a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_default_phy = 1;
   2cb7e:	b2db      	uxtb	r3, r3
   2cb80:	f043 0320 	orr.w	r3, r3, #32
   2cb84:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_set_phy = 1;
   2cb88:	b2db      	uxtb	r3, r3
   2cb8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cb8e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2cb92:	b2db      	uxtb	r3, r3
   2cb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2cb98:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2cb9c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2cba0:	f043 0301 	orr.w	r3, r3, #1
   2cba4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2cba8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2cbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2cbb0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_read_local_p256_public_key = 1;
   2cbb4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2cbb8:	f043 0302 	orr.w	r3, r3, #2
   2cbbc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v1 = 1;
   2cbc0:	b2db      	uxtb	r3, r3
   2cbc2:	f043 0304 	orr.w	r3, r3, #4
   2cbc6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_generate_dhkey_v2 = 1;
   2cbca:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2cbce:	f043 0304 	orr.w	r3, r3, #4
   2cbd2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   2cbd6:	bd10      	pop	{r4, pc}

0002cbd8 <supported_features>:
   2cbd8:	2300      	movs	r3, #0
   2cbda:	6003      	str	r3, [r0, #0]
   2cbdc:	6043      	str	r3, [r0, #4]
	features->bdedr_not_supported = 1;
   2cbde:	7903      	ldrb	r3, [r0, #4]
   2cbe0:	f043 0320 	orr.w	r3, r3, #32
   2cbe4:	7103      	strb	r3, [r0, #4]
	features->le_supported = 1;
   2cbe6:	b2db      	uxtb	r3, r3
   2cbe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cbec:	7103      	strb	r3, [r0, #4]
}
   2cbee:	4770      	bx	lr

0002cbf0 <info_param_cmd_put>:
{
   2cbf0:	b508      	push	{r3, lr}
   2cbf2:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2cbf4:	1d88      	adds	r0, r1, #6
   2cbf6:	f893 c001 	ldrb.w	ip, [r3, #1]
   2cbfa:	781b      	ldrb	r3, [r3, #0]
   2cbfc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2cc00:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2cc02:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2cc06:	3b01      	subs	r3, #1
   2cc08:	2b08      	cmp	r3, #8
   2cc0a:	d820      	bhi.n	2cc4e <info_param_cmd_put+0x5e>
   2cc0c:	e8df f003 	tbb	[pc, r3]
   2cc10:	1f120b05 	.word	0x1f120b05
   2cc14:	1f1f1f1f 	.word	0x1f1f1f1f
   2cc18:	19          	.byte	0x19
   2cc19:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2cc1a:	7813      	ldrb	r3, [r2, #0]
   2cc1c:	3308      	adds	r3, #8
   2cc1e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2cc20:	f7e0 fb2f 	bl	d282 <sdc_hci_cmd_ip_read_local_version_information>
   2cc24:	e014      	b.n	2cc50 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2cc26:	7813      	ldrb	r3, [r2, #0]
   2cc28:	3340      	adds	r3, #64	; 0x40
   2cc2a:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2cc2c:	f7ff fef4 	bl	2ca18 <supported_commands>
		return 0;
   2cc30:	2000      	movs	r0, #0
   2cc32:	e00d      	b.n	2cc50 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2cc34:	7813      	ldrb	r3, [r2, #0]
   2cc36:	3308      	adds	r3, #8
   2cc38:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2cc3a:	f7ff ffcd 	bl	2cbd8 <supported_features>
		return 0;
   2cc3e:	2000      	movs	r0, #0
   2cc40:	e006      	b.n	2cc50 <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2cc42:	7813      	ldrb	r3, [r2, #0]
   2cc44:	3306      	adds	r3, #6
   2cc46:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2cc48:	f7e0 fb19 	bl	d27e <sdc_hci_cmd_ip_read_bd_addr>
   2cc4c:	e000      	b.n	2cc50 <info_param_cmd_put+0x60>
	switch (opcode)	{
   2cc4e:	2001      	movs	r0, #1
}
   2cc50:	bd08      	pop	{r3, pc}

0002cc52 <le_supported_features>:
   2cc52:	2300      	movs	r3, #0
   2cc54:	6003      	str	r3, [r0, #0]
   2cc56:	6043      	str	r3, [r0, #4]
	features->params.le_encryption = 1;
   2cc58:	7803      	ldrb	r3, [r0, #0]
   2cc5a:	f043 0301 	orr.w	r3, r3, #1
   2cc5e:	7003      	strb	r3, [r0, #0]
	features->params.extended_reject_indication = 1;
   2cc60:	b2db      	uxtb	r3, r3
   2cc62:	f043 0304 	orr.w	r3, r3, #4
   2cc66:	7003      	strb	r3, [r0, #0]
	features->params.slave_initiated_features_exchange = 1;
   2cc68:	b2db      	uxtb	r3, r3
   2cc6a:	f043 0308 	orr.w	r3, r3, #8
   2cc6e:	7003      	strb	r3, [r0, #0]
	features->params.le_ping = 1;
   2cc70:	b2db      	uxtb	r3, r3
   2cc72:	f043 0310 	orr.w	r3, r3, #16
   2cc76:	7003      	strb	r3, [r0, #0]
	features->params.le_data_packet_length_extension = 1;
   2cc78:	b2db      	uxtb	r3, r3
   2cc7a:	f043 0320 	orr.w	r3, r3, #32
   2cc7e:	7003      	strb	r3, [r0, #0]
	features->params.le_2m_phy = 1;
   2cc80:	7843      	ldrb	r3, [r0, #1]
   2cc82:	f043 0301 	orr.w	r3, r3, #1
   2cc86:	7043      	strb	r3, [r0, #1]
	features->params.channel_selection_algorithm_2 = 1;
   2cc88:	b2db      	uxtb	r3, r3
   2cc8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cc8e:	7043      	strb	r3, [r0, #1]
}
   2cc90:	4770      	bx	lr

0002cc92 <vs_zephyr_supported_commands>:
   2cc92:	2300      	movs	r3, #0
   2cc94:	8003      	strh	r3, [r0, #0]
	cmds->read_version_info = 1;
   2cc96:	7803      	ldrb	r3, [r0, #0]
   2cc98:	f043 0301 	orr.w	r3, r3, #1
   2cc9c:	7003      	strb	r3, [r0, #0]
	cmds->read_supported_commands = 1;
   2cc9e:	b2db      	uxtb	r3, r3
   2cca0:	f043 0302 	orr.w	r3, r3, #2
   2cca4:	7003      	strb	r3, [r0, #0]
	cmds->write_bd_addr = 1;
   2cca6:	b2db      	uxtb	r3, r3
   2cca8:	f043 0320 	orr.w	r3, r3, #32
   2ccac:	7003      	strb	r3, [r0, #0]
	cmds->read_static_addresses = 1;
   2ccae:	7843      	ldrb	r3, [r0, #1]
   2ccb0:	f043 0301 	orr.w	r3, r3, #1
   2ccb4:	7043      	strb	r3, [r0, #1]
	cmds->read_key_hierarchy_roots = 1;
   2ccb6:	b2db      	uxtb	r3, r3
   2ccb8:	f043 0302 	orr.w	r3, r3, #2
   2ccbc:	7043      	strb	r3, [r0, #1]
	cmds->read_chip_temperature = 1;
   2ccbe:	b2db      	uxtb	r3, r3
   2ccc0:	f043 0304 	orr.w	r3, r3, #4
   2ccc4:	7043      	strb	r3, [r0, #1]
}
   2ccc6:	4770      	bx	lr

0002ccc8 <vs_supported_commands>:
   2ccc8:	2300      	movs	r3, #0
   2ccca:	8003      	strh	r3, [r0, #0]
	cmds->read_supported_vs_commands = 1;
   2cccc:	7803      	ldrb	r3, [r0, #0]
   2ccce:	f043 0301 	orr.w	r3, r3, #1
   2ccd2:	7003      	strb	r3, [r0, #0]
	cmds->llpm_mode_set = 1;
   2ccd4:	b2db      	uxtb	r3, r3
   2ccd6:	f043 0302 	orr.w	r3, r3, #2
   2ccda:	7003      	strb	r3, [r0, #0]
	cmds->conn_update = 1;
   2ccdc:	b2db      	uxtb	r3, r3
   2ccde:	f043 0304 	orr.w	r3, r3, #4
   2cce2:	7003      	strb	r3, [r0, #0]
	cmds->conn_event_extend = 1;
   2cce4:	b2db      	uxtb	r3, r3
   2cce6:	f043 0308 	orr.w	r3, r3, #8
   2ccea:	7003      	strb	r3, [r0, #0]
	cmds->qos_conn_event_report_enable = 1;
   2ccec:	b2db      	uxtb	r3, r3
   2ccee:	f043 0310 	orr.w	r3, r3, #16
   2ccf2:	7003      	strb	r3, [r0, #0]
	cmds->event_length_set = 1;
   2ccf4:	b2db      	uxtb	r3, r3
   2ccf6:	f043 0320 	orr.w	r3, r3, #32
   2ccfa:	7003      	strb	r3, [r0, #0]
}
   2ccfc:	4770      	bx	lr

0002ccfe <le_controller_cmd_put>:
{
   2ccfe:	b508      	push	{r3, lr}
   2cd00:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2cd02:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2cd04:	3106      	adds	r1, #6
   2cd06:	f893 c001 	ldrb.w	ip, [r3, #1]
   2cd0a:	781b      	ldrb	r3, [r3, #0]
   2cd0c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2cd10:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2cd12:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2cd16:	3b01      	subs	r3, #1
   2cd18:	2b7b      	cmp	r3, #123	; 0x7b
   2cd1a:	f200 80d8 	bhi.w	2cece <le_controller_cmd_put+0x1d0>
   2cd1e:	e8df f003 	tbb	[pc, r3]
   2cd22:	413e      	.short	0x413e
   2cd24:	5350d648 	.word	0x5350d648
   2cd28:	63605d56 	.word	0x63605d56
   2cd2c:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd30:	76737069 	.word	0x76737069
   2cd34:	7f79d6d6 	.word	0x7f79d6d6
   2cd38:	8fd68882 	.word	0x8fd68882
   2cd3c:	d6d69b95 	.word	0xd6d69b95
   2cd40:	a3d6d6d6 	.word	0xa3d6d6d6
   2cd44:	b6b3b0a9 	.word	0xb6b3b0a9
   2cd48:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd4c:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd50:	ccc9c3bc 	.word	0xccc9c3bc
   2cd54:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd58:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd5c:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd60:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd64:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd68:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd6c:	d6d6d6cf 	.word	0xd6d6d6cf
   2cd70:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd74:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd78:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd7c:	b9d6d6d6 	.word	0xb9d6d6d6
   2cd80:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd84:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd88:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd8c:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd90:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd94:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd98:	d6d6d6d6 	.word	0xd6d6d6d6
   2cd9c:	66d6      	.short	0x66d6
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2cd9e:	f7e0 faa2 	bl	d2e6 <sdc_hci_cmd_le_set_event_mask>
   2cda2:	e095      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2cda4:	7813      	ldrb	r3, [r2, #0]
   2cda6:	3303      	adds	r3, #3
   2cda8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2cdaa:	4608      	mov	r0, r1
   2cdac:	f7e0 fa7d 	bl	d2aa <sdc_hci_cmd_le_read_buffer_size>
   2cdb0:	e08e      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2cdb2:	7813      	ldrb	r3, [r2, #0]
   2cdb4:	3308      	adds	r3, #8
   2cdb6:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2cdb8:	4608      	mov	r0, r1
   2cdba:	f7ff ff4a 	bl	2cc52 <le_supported_features>
		return 0;
   2cdbe:	2000      	movs	r0, #0
   2cdc0:	e086      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2cdc2:	f7e0 fa97 	bl	d2f4 <sdc_hci_cmd_le_set_random_address>
   2cdc6:	e083      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   2cdc8:	f7e0 fa85 	bl	d2d6 <sdc_hci_cmd_le_set_adv_params>
   2cdcc:	e080      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   2cdce:	7813      	ldrb	r3, [r2, #0]
   2cdd0:	3301      	adds	r3, #1
   2cdd2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2cdd4:	4608      	mov	r0, r1
   2cdd6:	f7e0 fa66 	bl	d2a6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   2cdda:	e079      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2cddc:	f7e0 fa77 	bl	d2ce <sdc_hci_cmd_le_set_adv_data>
   2cde0:	e076      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   2cde2:	f7e0 fa89 	bl	d2f8 <sdc_hci_cmd_le_set_scan_response_data>
   2cde6:	e073      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   2cde8:	f7e0 fa73 	bl	d2d2 <sdc_hci_cmd_le_set_adv_enable>
   2cdec:	e070      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   2cdee:	f7e0 fa76 	bl	d2de <sdc_hci_cmd_le_set_data_related_address_changes>
   2cdf2:	e06d      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2cdf4:	7813      	ldrb	r3, [r2, #0]
   2cdf6:	3301      	adds	r3, #1
   2cdf8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   2cdfa:	4608      	mov	r0, r1
   2cdfc:	f7e0 fa59 	bl	d2b2 <sdc_hci_cmd_le_read_filter_accept_list_size>
   2ce00:	e066      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   2ce02:	f7e0 fa42 	bl	d28a <sdc_hci_cmd_le_clear_filter_accept_list>
   2ce06:	e063      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   2ce08:	f7e0 fa3d 	bl	d286 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   2ce0c:	e060      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   2ce0e:	f7e0 fa5c 	bl	d2ca <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   2ce12:	e05d      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2ce14:	7813      	ldrb	r3, [r2, #0]
   2ce16:	3307      	adds	r3, #7
   2ce18:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2ce1a:	f7e0 fa48 	bl	d2ae <sdc_hci_cmd_le_read_channel_map>
   2ce1e:	e057      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2ce20:	f7e0 fa4d 	bl	d2be <sdc_hci_cmd_le_read_remote_features>
   2ce24:	e054      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2ce26:	7813      	ldrb	r3, [r2, #0]
   2ce28:	3310      	adds	r3, #16
   2ce2a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2ce2c:	f7e0 fa2f 	bl	d28e <sdc_hci_cmd_le_encrypt>
   2ce30:	e04e      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2ce32:	7813      	ldrb	r3, [r2, #0]
   2ce34:	3308      	adds	r3, #8
   2ce36:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2ce38:	4608      	mov	r0, r1
   2ce3a:	f7e0 fa32 	bl	d2a2 <sdc_hci_cmd_le_rand>
   2ce3e:	e047      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   2ce40:	7813      	ldrb	r3, [r2, #0]
   2ce42:	3302      	adds	r3, #2
   2ce44:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2ce46:	f7e0 fa28 	bl	d29a <sdc_hci_cmd_le_long_term_key_request_reply>
   2ce4a:	e041      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   2ce4c:	7813      	ldrb	r3, [r2, #0]
   2ce4e:	3302      	adds	r3, #2
   2ce50:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2ce52:	f7e0 fa1e 	bl	d292 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   2ce56:	e03b      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2ce58:	7813      	ldrb	r3, [r2, #0]
   2ce5a:	3308      	adds	r3, #8
   2ce5c:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   2ce5e:	4608      	mov	r0, r1
   2ce60:	f7ff fd79 	bl	2c956 <le_read_supported_states>
		return 0;
   2ce64:	2000      	movs	r0, #0
   2ce66:	e033      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2ce68:	7813      	ldrb	r3, [r2, #0]
   2ce6a:	3302      	adds	r3, #2
   2ce6c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2ce6e:	f7e0 fa34 	bl	d2da <sdc_hci_cmd_le_set_data_length>
   2ce72:	e02d      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out +=
   2ce74:	7813      	ldrb	r3, [r2, #0]
   2ce76:	3304      	adds	r3, #4
   2ce78:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2ce7a:	4608      	mov	r0, r1
   2ce7c:	f7e0 fa21 	bl	d2c2 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2ce80:	e026      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2ce82:	f7e0 fa3b 	bl	d2fc <sdc_hci_cmd_le_write_suggested_default_data_length>
   2ce86:	e023      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_read_local_p256_public_key();
   2ce88:	f7f3 fd8c 	bl	209a4 <hci_cmd_le_read_local_p256_public_key>
   2ce8c:	e020      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   2ce8e:	f000 f8a1 	bl	2cfd4 <hci_cmd_le_generate_dhkey>
   2ce92:	e01d      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   2ce94:	f000 f8a3 	bl	2cfde <hci_cmd_le_generate_dhkey_v2>
   2ce98:	e01a      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2ce9a:	7813      	ldrb	r3, [r2, #0]
   2ce9c:	3308      	adds	r3, #8
   2ce9e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2cea0:	4608      	mov	r0, r1
   2cea2:	f7e0 fa08 	bl	d2b6 <sdc_hci_cmd_le_read_max_data_length>
   2cea6:	e013      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2cea8:	7813      	ldrb	r3, [r2, #0]
   2ceaa:	3304      	adds	r3, #4
   2ceac:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2ceae:	f7e0 fa04 	bl	d2ba <sdc_hci_cmd_le_read_phy>
   2ceb2:	e00d      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2ceb4:	f7e0 fa15 	bl	d2e2 <sdc_hci_cmd_le_set_default_phy>
   2ceb8:	e00a      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2ceba:	f7e0 fa19 	bl	d2f0 <sdc_hci_cmd_le_set_phy>
   2cebe:	e007      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2cec0:	7813      	ldrb	r3, [r2, #0]
   2cec2:	3302      	adds	r3, #2
   2cec4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2cec6:	4608      	mov	r0, r1
   2cec8:	f7e0 f9fd 	bl	d2c6 <sdc_hci_cmd_le_read_transmit_power>
   2cecc:	e000      	b.n	2ced0 <le_controller_cmd_put+0x1d2>
	switch (opcode)	{
   2cece:	2001      	movs	r0, #1
}
   2ced0:	bd08      	pop	{r3, pc}

0002ced2 <vs_cmd_put>:
{
   2ced2:	b508      	push	{r3, lr}
   2ced4:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2ced6:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2ced8:	3106      	adds	r1, #6
   2ceda:	f893 c001 	ldrb.w	ip, [r3, #1]
   2cede:	781b      	ldrb	r3, [r3, #0]
   2cee0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   2cee4:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   2cee8:	4563      	cmp	r3, ip
   2ceea:	d913      	bls.n	2cf14 <vs_cmd_put+0x42>
   2ceec:	f64f 5c0c 	movw	ip, #64780	; 0xfd0c
   2cef0:	4563      	cmp	r3, ip
   2cef2:	d86d      	bhi.n	2cfd0 <vs_cmd_put+0xfe>
   2cef4:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2cef8:	d31e      	bcc.n	2cf38 <vs_cmd_put+0x66>
   2cefa:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   2cefe:	2b0c      	cmp	r3, #12
   2cf00:	d862      	bhi.n	2cfc8 <vs_cmd_put+0xf6>
   2cf02:	e8df f003 	tbb	[pc, r3]
   2cf06:	4c44      	.short	0x4c44
   2cf08:	5855524f 	.word	0x5855524f
   2cf0c:	5b616161 	.word	0x5b616161
   2cf10:	6161      	.short	0x6161
   2cf12:	5e          	.byte	0x5e
   2cf13:	00          	.byte	0x00
   2cf14:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   2cf18:	d801      	bhi.n	2cf1e <vs_cmd_put+0x4c>
   2cf1a:	2001      	movs	r0, #1
}
   2cf1c:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   2cf1e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2cf22:	3b01      	subs	r3, #1
   2cf24:	2b0a      	cmp	r3, #10
   2cf26:	d851      	bhi.n	2cfcc <vs_cmd_put+0xfa>
   2cf28:	e8df f003 	tbb	[pc, r3]
   2cf2c:	50500f08 	.word	0x50500f08
   2cf30:	50502750 	.word	0x50502750
   2cf34:	2017      	.short	0x2017
   2cf36:	2a          	.byte	0x2a
   2cf37:	00          	.byte	0x00
   2cf38:	2001      	movs	r0, #1
   2cf3a:	e7ef      	b.n	2cf1c <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2cf3c:	7813      	ldrb	r3, [r2, #0]
   2cf3e:	330c      	adds	r3, #12
   2cf40:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2cf42:	4608      	mov	r0, r1
   2cf44:	f7d4 fc10 	bl	1768 <sdc_hci_cmd_vs_zephyr_read_version_info>
   2cf48:	e7e8      	b.n	2cf1c <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2cf4a:	7813      	ldrb	r3, [r2, #0]
   2cf4c:	3340      	adds	r3, #64	; 0x40
   2cf4e:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   2cf50:	4608      	mov	r0, r1
   2cf52:	f7ff fe9e 	bl	2cc92 <vs_zephyr_supported_commands>
		return 0;
   2cf56:	2000      	movs	r0, #0
   2cf58:	e7e0      	b.n	2cf1c <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   2cf5a:	7813      	ldrb	r3, [r2, #0]
   2cf5c:	1c58      	adds	r0, r3, #1
   2cf5e:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2cf60:	3317      	adds	r3, #23
   2cf62:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2cf64:	4608      	mov	r0, r1
   2cf66:	f7e0 f939 	bl	d1dc <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   2cf6a:	e7d7      	b.n	2cf1c <vs_cmd_put+0x4a>
		*param_length_out +=
   2cf6c:	7813      	ldrb	r3, [r2, #0]
   2cf6e:	3320      	adds	r3, #32
   2cf70:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2cf72:	4608      	mov	r0, r1
   2cf74:	f7e0 f8e5 	bl	d142 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2cf78:	e7d0      	b.n	2cf1c <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2cf7a:	f7e0 f97e 	bl	d27a <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2cf7e:	e7cd      	b.n	2cf1c <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2cf80:	7813      	ldrb	r3, [r2, #0]
   2cf82:	3301      	adds	r3, #1
   2cf84:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2cf86:	4608      	mov	r0, r1
   2cf88:	f7e0 f8c7 	bl	d11a <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2cf8c:	e7c6      	b.n	2cf1c <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2cf8e:	7813      	ldrb	r3, [r2, #0]
   2cf90:	3340      	adds	r3, #64	; 0x40
   2cf92:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2cf94:	4608      	mov	r0, r1
   2cf96:	f7ff fe97 	bl	2ccc8 <vs_supported_commands>
		return 0;
   2cf9a:	2000      	movs	r0, #0
   2cf9c:	e7be      	b.n	2cf1c <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2cf9e:	f7e0 f8af 	bl	d100 <sdc_hci_cmd_vs_llpm_mode_set>
   2cfa2:	e7bb      	b.n	2cf1c <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2cfa4:	f7e0 f8a8 	bl	d0f8 <sdc_hci_cmd_vs_conn_update>
   2cfa8:	e7b8      	b.n	2cf1c <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2cfaa:	f7e0 f89d 	bl	d0e8 <sdc_hci_cmd_vs_conn_event_extend>
   2cfae:	e7b5      	b.n	2cf1c <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2cfb0:	f7e0 f8ac 	bl	d10c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2cfb4:	e7b2      	b.n	2cf1c <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2cfb6:	f7e0 f8a1 	bl	d0fc <sdc_hci_cmd_vs_event_length_set>
   2cfba:	e7af      	b.n	2cf1c <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   2cfbc:	f7e0 f8a2 	bl	d104 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   2cfc0:	e7ac      	b.n	2cf1c <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   2cfc2:	f7e0 f8a8 	bl	d116 <sdc_hci_cmd_vs_set_adv_randomness>
   2cfc6:	e7a9      	b.n	2cf1c <vs_cmd_put+0x4a>
	switch (opcode)	{
   2cfc8:	2001      	movs	r0, #1
   2cfca:	e7a7      	b.n	2cf1c <vs_cmd_put+0x4a>
   2cfcc:	2001      	movs	r0, #1
   2cfce:	e7a5      	b.n	2cf1c <vs_cmd_put+0x4a>
   2cfd0:	2001      	movs	r0, #1
   2cfd2:	e7a3      	b.n	2cf1c <vs_cmd_put+0x4a>

0002cfd4 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
   2cfd4:	b508      	push	{r3, lr}
	return cmd_le_generate_dhkey(p_params->key,
   2cfd6:	2100      	movs	r1, #0
   2cfd8:	f7f3 fcfc 	bl	209d4 <cmd_le_generate_dhkey>
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}
   2cfdc:	bd08      	pop	{r3, pc}

0002cfde <hci_cmd_le_generate_dhkey_v2>:

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2cfde:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2cfe2:	2901      	cmp	r1, #1
   2cfe4:	d803      	bhi.n	2cfee <hci_cmd_le_generate_dhkey_v2+0x10>
{
   2cfe6:	b508      	push	{r3, lr}
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2cfe8:	f7f3 fcf4 	bl	209d4 <cmd_le_generate_dhkey>
}
   2cfec:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   2cfee:	2012      	movs	r0, #18
}
   2cff0:	4770      	bx	lr

0002cff2 <m_config_clock_source_get>:
}
   2cff2:	2001      	movs	r0, #1
   2cff4:	4770      	bx	lr

0002cff6 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2cff6:	4668      	mov	r0, sp
   2cff8:	f020 0107 	bic.w	r1, r0, #7
   2cffc:	468d      	mov	sp, r1
   2cffe:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2d000:	f7de fa4a 	bl	b498 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2d004:	f7e8 fa3a 	bl	1547c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2d008:	f7e8 fbe4 	bl	157d4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2d00c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2d010:	4685      	mov	sp, r0
   2d012:	4770      	bx	lr

0002d014 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2d014:	4668      	mov	r0, sp
   2d016:	f020 0107 	bic.w	r1, r0, #7
   2d01a:	468d      	mov	sp, r1
   2d01c:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2d01e:	f7de f9b1 	bl	b384 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2d022:	f7e8 fa2b 	bl	1547c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2d026:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2d02a:	4685      	mov	sp, r0
   2d02c:	4770      	bx	lr

0002d02e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2d02e:	4668      	mov	r0, sp
   2d030:	f020 0107 	bic.w	r1, r0, #7
   2d034:	468d      	mov	sp, r1
   2d036:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2d038:	f7db ff0e 	bl	8e58 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2d03c:	f7e8 fa1e 	bl	1547c <_arch_isr_direct_pm>
   2d040:	f7e8 fbc8 	bl	157d4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2d044:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2d048:	4685      	mov	sp, r0
   2d04a:	4770      	bx	lr

0002d04c <mpsl_lib_init_sys>:
{
   2d04c:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   2d04e:	f7f3 fcf9 	bl	20a44 <mpsl_lib_init_internal>
	if (err) {
   2d052:	4604      	mov	r4, r0
   2d054:	b108      	cbz	r0, 2d05a <mpsl_lib_init_sys+0xe>
}
   2d056:	4620      	mov	r0, r4
   2d058:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2d05a:	2201      	movs	r2, #1
   2d05c:	2100      	movs	r1, #0
   2d05e:	2008      	movs	r0, #8
   2d060:	f7fc fa5d 	bl	2951e <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2d064:	2201      	movs	r2, #1
   2d066:	2100      	movs	r1, #0
   2d068:	200b      	movs	r0, #11
   2d06a:	f7fc fa58 	bl	2951e <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2d06e:	2201      	movs	r2, #1
   2d070:	2100      	movs	r1, #0
   2d072:	4610      	mov	r0, r2
   2d074:	f7fc fa53 	bl	2951e <z_arm_irq_priority_set>
	return 0;
   2d078:	e7ed      	b.n	2d056 <mpsl_lib_init_sys+0xa>

0002d07a <mpsl_low_prio_work_handler>:
{
   2d07a:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2d07c:	f04f 30ff 	mov.w	r0, #4294967295
   2d080:	f04f 31ff 	mov.w	r1, #4294967295
   2d084:	f7f2 fdf0 	bl	1fc68 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2d088:	f7e3 fdd0 	bl	10c2c <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   2d08c:	f7f2 fdf6 	bl	1fc7c <multithreading_lock_release>
}
   2d090:	bd08      	pop	{r3, pc}

0002d092 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   2d092:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   2d094:	f7e3 ff91 	bl	10fba <mpsl_fem_init>

	return 0;
}
   2d098:	2000      	movs	r0, #0
   2d09a:	bd08      	pop	{r3, pc}

0002d09c <nrfx_clock_stop>:
	switch (domain) {
   2d09c:	2801      	cmp	r0, #1
   2d09e:	d000      	beq.n	2d0a2 <nrfx_clock_stop+0x6>
   2d0a0:	4770      	bx	lr
{
   2d0a2:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   2d0a4:	f7df f872 	bl	c18c <mpsl_clock_hfclk_release>
}
   2d0a8:	bd08      	pop	{r3, pc}

0002d0aa <nrfx_clock_enable>:
}
   2d0aa:	4770      	bx	lr

0002d0ac <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2d0ac:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2d0ae:	f7de fe77 	bl	bda0 <MPSL_IRQ_CLOCK_Handler>
}
   2d0b2:	bd08      	pop	{r3, pc}

0002d0b4 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   2d0b4:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2d0b6:	f7f7 ffdb 	bl	25070 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   2d0ba:	bd08      	pop	{r3, pc}

0002d0bc <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   2d0bc:	b510      	push	{r4, lr}
   2d0be:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2d0c0:	f7e7 fe7a 	bl	14db8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2d0c4:	f7e7 ff78 	bl	14fb8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   2d0c8:	4620      	mov	r0, r4
   2d0ca:	f7ff fff3 	bl	2d0b4 <hw_cc3xx_init_internal>
	return res;
}
   2d0ce:	bd10      	pop	{r4, pc}

0002d0d0 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d0d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d0d4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   2d0d8:	2b08      	cmp	r3, #8
   2d0da:	d001      	beq.n	2d0e0 <nrf52_errata_36+0x10>
        return false;
   2d0dc:	2000      	movs	r0, #0
   2d0de:	4770      	bx	lr
                        return true;
   2d0e0:	2001      	movs	r0, #1
}
   2d0e2:	4770      	bx	lr

0002d0e4 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d0e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d0e8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   2d0ec:	2b08      	cmp	r3, #8
   2d0ee:	d001      	beq.n	2d0f4 <nrf52_errata_66+0x10>
        return false;
   2d0f0:	2000      	movs	r0, #0
   2d0f2:	4770      	bx	lr
                        return true;
   2d0f4:	2001      	movs	r0, #1
}
   2d0f6:	4770      	bx	lr

0002d0f8 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d0f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d0fc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2d100:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   2d104:	2a08      	cmp	r2, #8
   2d106:	d001      	beq.n	2d10c <nrf52_errata_98+0x14>
        return false;
   2d108:	2000      	movs	r0, #0
   2d10a:	4770      	bx	lr
                switch(var2)
   2d10c:	2b00      	cmp	r3, #0
   2d10e:	d804      	bhi.n	2d11a <nrf52_errata_98+0x22>
   2d110:	e8df f003 	tbb	[pc, r3]
   2d114:	01          	.byte	0x01
   2d115:	00          	.byte	0x00
   2d116:	2001      	movs	r0, #1
   2d118:	4770      	bx	lr
                        return false;
   2d11a:	2000      	movs	r0, #0
}
   2d11c:	4770      	bx	lr

0002d11e <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d11e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d122:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2d126:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   2d12a:	2a08      	cmp	r2, #8
   2d12c:	d001      	beq.n	2d132 <nrf52_errata_103+0x14>
        return false;
   2d12e:	2000      	movs	r0, #0
   2d130:	4770      	bx	lr
                switch(var2)
   2d132:	2b00      	cmp	r3, #0
   2d134:	d804      	bhi.n	2d140 <nrf52_errata_103+0x22>
   2d136:	e8df f003 	tbb	[pc, r3]
   2d13a:	01          	.byte	0x01
   2d13b:	00          	.byte	0x00
   2d13c:	2001      	movs	r0, #1
   2d13e:	4770      	bx	lr
                        return false;
   2d140:	2000      	movs	r0, #0
}
   2d142:	4770      	bx	lr

0002d144 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d144:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d148:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2d14c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   2d150:	2a08      	cmp	r2, #8
   2d152:	d001      	beq.n	2d158 <nrf52_errata_115+0x14>
        return false;
   2d154:	2000      	movs	r0, #0
   2d156:	4770      	bx	lr
                switch(var2)
   2d158:	2b00      	cmp	r3, #0
   2d15a:	d804      	bhi.n	2d166 <nrf52_errata_115+0x22>
   2d15c:	e8df f003 	tbb	[pc, r3]
   2d160:	01          	.byte	0x01
   2d161:	00          	.byte	0x00
   2d162:	2001      	movs	r0, #1
   2d164:	4770      	bx	lr
                        return false;
   2d166:	2000      	movs	r0, #0
}
   2d168:	4770      	bx	lr

0002d16a <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d16a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d16e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2d172:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   2d176:	2a08      	cmp	r2, #8
   2d178:	d001      	beq.n	2d17e <nrf52_errata_120+0x14>
        return false;
   2d17a:	2000      	movs	r0, #0
   2d17c:	4770      	bx	lr
                switch(var2)
   2d17e:	2b00      	cmp	r3, #0
   2d180:	d804      	bhi.n	2d18c <nrf52_errata_120+0x22>
   2d182:	e8df f003 	tbb	[pc, r3]
   2d186:	01          	.byte	0x01
   2d187:	00          	.byte	0x00
   2d188:	2001      	movs	r0, #1
   2d18a:	4770      	bx	lr
                        return false;
   2d18c:	2000      	movs	r0, #0
}
   2d18e:	4770      	bx	lr

0002d190 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d194:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   2d198:	2b08      	cmp	r3, #8
   2d19a:	d001      	beq.n	2d1a0 <nrf52_errata_136+0x10>
        return false;
   2d19c:	2000      	movs	r0, #0
   2d19e:	4770      	bx	lr
                        return true;
   2d1a0:	2001      	movs	r0, #1
}
   2d1a2:	4770      	bx	lr

0002d1a4 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d1a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d1a8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2d1ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2d1b0:	2a08      	cmp	r2, #8
   2d1b2:	d001      	beq.n	2d1b8 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   2d1b4:	2000      	movs	r0, #0
   2d1b6:	4770      	bx	lr
                switch(var2)
   2d1b8:	2b04      	cmp	r3, #4
   2d1ba:	d801      	bhi.n	2d1c0 <nrf52_configuration_249+0x1c>
   2d1bc:	2000      	movs	r0, #0
   2d1be:	4770      	bx	lr
                        return true;
   2d1c0:	2001      	movs	r0, #1
    #endif
}
   2d1c2:	4770      	bx	lr

0002d1c4 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   2d1c4:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2d1c6:	f7ff ffed 	bl	2d1a4 <nrf52_configuration_249>
   2d1ca:	b138      	cbz	r0, 2d1dc <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2d1cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2d1d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2d1d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d1d8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   2d1dc:	bd08      	pop	{r3, pc}

0002d1de <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   2d1de:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2d1e0:	4780      	blx	r0
}
   2d1e2:	bd08      	pop	{r3, pc}

0002d1e4 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   2d1e4:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2d1e6:	f000 fe44 	bl	2de72 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   2d1ea:	bd08      	pop	{r3, pc}

0002d1ec <nrf_gpiote_event_configure>:
{
   2d1ec:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2d1ee:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2d1f2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2d1f6:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   2d1fa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   2d1fe:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2d202:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2d206:	0212      	lsls	r2, r2, #8
   2d208:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   2d20c:	041b      	lsls	r3, r3, #16
   2d20e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2d212:	431a      	orrs	r2, r3
   2d214:	4314      	orrs	r4, r2
   2d216:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2d21a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2d21e:	4770      	bx	lr

0002d220 <nrf_gpiote_task_configure>:
{
   2d220:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2d222:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   2d226:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2d22a:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   2d22e:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   2d232:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2d236:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2d23a:	0212      	lsls	r2, r2, #8
   2d23c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2d240:	041b      	lsls	r3, r3, #16
   2d242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2d246:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2d248:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2d24c:	051b      	lsls	r3, r3, #20
   2d24e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2d252:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2d254:	4314      	orrs	r4, r2
   2d256:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   2d25a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2d25e:	4770      	bx	lr

0002d260 <nrf_gpio_cfg_sense_set>:
{
   2d260:	b500      	push	{lr}
   2d262:	b085      	sub	sp, #20
   2d264:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2d268:	f10d 030f 	add.w	r3, sp, #15
   2d26c:	9301      	str	r3, [sp, #4]
   2d26e:	2100      	movs	r1, #0
   2d270:	9100      	str	r1, [sp, #0]
   2d272:	460b      	mov	r3, r1
   2d274:	460a      	mov	r2, r1
   2d276:	f7f3 fe03 	bl	20e80 <nrf_gpio_reconfigure>
}
   2d27a:	b005      	add	sp, #20
   2d27c:	f85d fb04 	ldr.w	pc, [sp], #4

0002d280 <pin_is_task_output>:
{
   2d280:	b510      	push	{r4, lr}
   2d282:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2d284:	f7f3 fe9a 	bl	20fbc <pin_is_output>
   2d288:	b128      	cbz	r0, 2d296 <pin_is_task_output+0x16>
   2d28a:	4620      	mov	r0, r4
   2d28c:	f7f3 fe80 	bl	20f90 <pin_in_use_by_te>
   2d290:	b118      	cbz	r0, 2d29a <pin_is_task_output+0x1a>
   2d292:	2001      	movs	r0, #1
   2d294:	e000      	b.n	2d298 <pin_is_task_output+0x18>
   2d296:	2000      	movs	r0, #0
}
   2d298:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2d29a:	2000      	movs	r0, #0
   2d29c:	e7fc      	b.n	2d298 <pin_is_task_output+0x18>

0002d29e <pin_is_input>:
{
   2d29e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   2d2a0:	f7f3 fe8c 	bl	20fbc <pin_is_output>
   2d2a4:	f080 0001 	eor.w	r0, r0, #1
}
   2d2a8:	b2c0      	uxtb	r0, r0
   2d2aa:	bd08      	pop	{r3, pc}

0002d2ac <gpiote_polarity_to_trigger>:
}
   2d2ac:	4770      	bx	lr

0002d2ae <gpiote_trigger_to_polarity>:
}
   2d2ae:	4770      	bx	lr

0002d2b0 <is_level>:
}
   2d2b0:	2803      	cmp	r0, #3
   2d2b2:	bf94      	ite	ls
   2d2b4:	2000      	movls	r0, #0
   2d2b6:	2001      	movhi	r0, #1
   2d2b8:	4770      	bx	lr

0002d2ba <latch_pending_read_and_check>:
{
   2d2ba:	b510      	push	{r4, lr}
   2d2bc:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   2d2be:	4602      	mov	r2, r0
   2d2c0:	2102      	movs	r1, #2
   2d2c2:	2000      	movs	r0, #0
   2d2c4:	f7f3 fe38 	bl	20f38 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2d2c8:	2300      	movs	r3, #0
   2d2ca:	2b01      	cmp	r3, #1
   2d2cc:	d804      	bhi.n	2d2d8 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   2d2ce:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2d2d2:	b91a      	cbnz	r2, 2d2dc <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   2d2d4:	3301      	adds	r3, #1
   2d2d6:	e7f8      	b.n	2d2ca <latch_pending_read_and_check+0x10>
    return false;
   2d2d8:	2000      	movs	r0, #0
}
   2d2da:	bd10      	pop	{r4, pc}
            return true;
   2d2dc:	2001      	movs	r0, #1
   2d2de:	e7fc      	b.n	2d2da <latch_pending_read_and_check+0x20>

0002d2e0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   2d2e0:	b508      	push	{r3, lr}
  _DoInit();
   2d2e2:	f7f4 fa35 	bl	21750 <_DoInit>
}
   2d2e6:	bd08      	pop	{r3, pc}

0002d2e8 <rtt_init>:
{
   2d2e8:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   2d2ea:	f7ff fff9 	bl	2d2e0 <SEGGER_RTT_Init>
}
   2d2ee:	2000      	movs	r0, #0
   2d2f0:	bd08      	pop	{r3, pc}

0002d2f2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2d2f2:	b160      	cbz	r0, 2d30e <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2d2f4:	68c3      	ldr	r3, [r0, #12]
   2d2f6:	785a      	ldrb	r2, [r3, #1]
   2d2f8:	f012 0f01 	tst.w	r2, #1
   2d2fc:	d003      	beq.n	2d306 <z_device_is_ready+0x14>
   2d2fe:	781b      	ldrb	r3, [r3, #0]
   2d300:	b11b      	cbz	r3, 2d30a <z_device_is_ready+0x18>
   2d302:	2000      	movs	r0, #0
   2d304:	4770      	bx	lr
   2d306:	2000      	movs	r0, #0
   2d308:	4770      	bx	lr
   2d30a:	2001      	movs	r0, #1
   2d30c:	4770      	bx	lr
		return false;
   2d30e:	2000      	movs	r0, #0
}
   2d310:	4770      	bx	lr

0002d312 <z_early_memset>:
{
   2d312:	b508      	push	{r3, lr}
   2d314:	f000 ffe7 	bl	2e2e6 <memset>
}
   2d318:	bd08      	pop	{r3, pc}

0002d31a <z_early_memcpy>:
{
   2d31a:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d31c:	f000 ffd5 	bl	2e2ca <memcpy>
}
   2d320:	bd08      	pop	{r3, pc}

0002d322 <k_heap_init>:
{
   2d322:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   2d324:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2d328:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2d32a:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2d32c:	f7fa fe1b 	bl	27f66 <sys_heap_init>
}
   2d330:	bd10      	pop	{r4, pc}

0002d332 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2d332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d336:	b085      	sub	sp, #20
   2d338:	4607      	mov	r7, r0
   2d33a:	9103      	str	r1, [sp, #12]
   2d33c:	4692      	mov	sl, r2
   2d33e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2d340:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2d342:	4628      	mov	r0, r5
   2d344:	4621      	mov	r1, r4
   2d346:	f000 fd9a 	bl	2de7e <sys_clock_timeout_end_calc>
   2d34a:	4606      	mov	r6, r0
   2d34c:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2d34e:	f1b4 3fff 	cmp.w	r4, #4294967295
   2d352:	bf08      	it	eq
   2d354:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2d358:	d00d      	beq.n	2d376 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2d35a:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   2d35e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d362:	f3ef 8511 	mrs	r5, BASEPRI
   2d366:	f383 8812 	msr	BASEPRI_MAX, r3
   2d36a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   2d36e:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   2d372:	4644      	mov	r4, r8

	while (ret == NULL) {
   2d374:	e014      	b.n	2d3a0 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2d376:	f04f 36ff 	mov.w	r6, #4294967295
   2d37a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2d37e:	e7ec      	b.n	2d35a <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2d380:	9000      	str	r0, [sp, #0]
   2d382:	9101      	str	r1, [sp, #4]
   2d384:	f107 020c 	add.w	r2, r7, #12
   2d388:	4629      	mov	r1, r5
   2d38a:	4658      	mov	r0, fp
   2d38c:	f7f5 faf6 	bl	2297c <z_pend_curr>
   2d390:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d394:	f3ef 8511 	mrs	r5, BASEPRI
   2d398:	f383 8812 	msr	BASEPRI_MAX, r3
   2d39c:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   2d3a0:	b9ac      	cbnz	r4, 2d3ce <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2d3a2:	4652      	mov	r2, sl
   2d3a4:	9903      	ldr	r1, [sp, #12]
   2d3a6:	4638      	mov	r0, r7
   2d3a8:	f7fa fd67 	bl	27e7a <sys_heap_aligned_alloc>
   2d3ac:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   2d3ae:	f7f5 fe51 	bl	23054 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2d3b2:	b964      	cbnz	r4, 2d3ce <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   2d3b4:	1a30      	subs	r0, r6, r0
   2d3b6:	eb69 0101 	sbc.w	r1, r9, r1
   2d3ba:	2801      	cmp	r0, #1
   2d3bc:	f171 0300 	sbcs.w	r3, r1, #0
   2d3c0:	db05      	blt.n	2d3ce <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   2d3c2:	f1b8 0f00 	cmp.w	r8, #0
   2d3c6:	d1db      	bne.n	2d380 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   2d3c8:	f04f 0801 	mov.w	r8, #1
   2d3cc:	e7d8      	b.n	2d380 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   2d3ce:	f385 8811 	msr	BASEPRI, r5
   2d3d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2d3d6:	4620      	mov	r0, r4
   2d3d8:	b005      	add	sp, #20
   2d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d3de <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2d3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3e0:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2d3e2:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   2d3e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d3ea:	f3ef 8511 	mrs	r5, BASEPRI
   2d3ee:	f383 8812 	msr	BASEPRI_MAX, r3
   2d3f2:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   2d3f6:	f7fa fcfc 	bl	27df2 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2d3fa:	f104 000c 	add.w	r0, r4, #12
   2d3fe:	f000 fc77 	bl	2dcf0 <z_unpend_all>
   2d402:	b920      	cbnz	r0, 2d40e <k_heap_free+0x30>
	__asm__ volatile(
   2d404:	f385 8811 	msr	BASEPRI, r5
   2d408:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2d40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   2d40e:	4629      	mov	r1, r5
   2d410:	4638      	mov	r0, r7
   2d412:	f7f5 f94f 	bl	226b4 <z_reschedule>
   2d416:	e7f9      	b.n	2d40c <k_heap_free+0x2e>

0002d418 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2d418:	68c2      	ldr	r2, [r0, #12]
   2d41a:	6903      	ldr	r3, [r0, #16]
   2d41c:	431a      	orrs	r2, r3
   2d41e:	f012 0203 	ands.w	r2, r2, #3
   2d422:	d10d      	bne.n	2d440 <create_free_list+0x28>
	slab->free_list = NULL;
   2d424:	2100      	movs	r1, #0
   2d426:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d428:	e005      	b.n	2d436 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2d42a:	6941      	ldr	r1, [r0, #20]
   2d42c:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2d42e:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   2d430:	68c1      	ldr	r1, [r0, #12]
   2d432:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2d434:	3201      	adds	r2, #1
   2d436:	6881      	ldr	r1, [r0, #8]
   2d438:	4291      	cmp	r1, r2
   2d43a:	d8f6      	bhi.n	2d42a <create_free_list+0x12>
	return 0;
   2d43c:	2000      	movs	r0, #0
   2d43e:	4770      	bx	lr
		return -EINVAL;
   2d440:	f06f 0015 	mvn.w	r0, #21
}
   2d444:	4770      	bx	lr

0002d446 <k_mem_slab_init>:
{
   2d446:	b510      	push	{r4, lr}
   2d448:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   2d44a:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   2d44c:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   2d44e:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   2d450:	2300      	movs	r3, #0
   2d452:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   2d454:	f7ff ffe0 	bl	2d418 <create_free_list>
	if (rc < 0) {
   2d458:	2800      	cmp	r0, #0
   2d45a:	db01      	blt.n	2d460 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   2d45c:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   2d45e:	6064      	str	r4, [r4, #4]
}
   2d460:	bd10      	pop	{r4, pc}

0002d462 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2d462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d466:	4604      	mov	r4, r0
   2d468:	460d      	mov	r5, r1
	__asm__ volatile(
   2d46a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d46e:	f3ef 8611 	mrs	r6, BASEPRI
   2d472:	f383 8812 	msr	BASEPRI_MAX, r3
   2d476:	f3bf 8f6f 	isb	sy
   2d47a:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2d47c:	6943      	ldr	r3, [r0, #20]
   2d47e:	b16b      	cbz	r3, 2d49c <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   2d480:	682b      	ldr	r3, [r5, #0]
   2d482:	6962      	ldr	r2, [r4, #20]
   2d484:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2d486:	682b      	ldr	r3, [r5, #0]
   2d488:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2d48a:	69a3      	ldr	r3, [r4, #24]
   2d48c:	3b01      	subs	r3, #1
   2d48e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2d490:	f387 8811 	msr	BASEPRI, r7
   2d494:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2d498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d49c:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2d4a0:	f000 fc04 	bl	2dcac <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2d4a4:	2800      	cmp	r0, #0
   2d4a6:	d0eb      	beq.n	2d480 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2d4a8:	682a      	ldr	r2, [r5, #0]
   2d4aa:	2100      	movs	r1, #0
   2d4ac:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2d4b0:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   2d4b2:	f000 fb46 	bl	2db42 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2d4b6:	4631      	mov	r1, r6
   2d4b8:	4640      	mov	r0, r8
   2d4ba:	f7f5 f8fb 	bl	226b4 <z_reschedule>
			return;
   2d4be:	e7eb      	b.n	2d498 <k_mem_slab_free+0x36>

0002d4c0 <setup_thread_stack>:
{
   2d4c0:	b410      	push	{r4}
   2d4c2:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2d4c4:	3207      	adds	r2, #7
   2d4c6:	f022 0207 	bic.w	r2, r2, #7
   2d4ca:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2d4ce:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   2d4d2:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   2d4d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2d4da:	2200      	movs	r2, #0
   2d4dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   2d4e0:	4408      	add	r0, r1
   2d4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   2d4e6:	4770      	bx	lr

0002d4e8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d4e8:	f3ef 8005 	mrs	r0, IPSR
}
   2d4ec:	3800      	subs	r0, #0
   2d4ee:	bf18      	it	ne
   2d4f0:	2001      	movne	r0, #1
   2d4f2:	4770      	bx	lr

0002d4f4 <k_thread_name_get>:
}
   2d4f4:	3078      	adds	r0, #120	; 0x78
   2d4f6:	4770      	bx	lr

0002d4f8 <z_impl_k_thread_start>:
{
   2d4f8:	b508      	push	{r3, lr}
	z_sched_start(thread);
   2d4fa:	f7f5 fa05 	bl	22908 <z_sched_start>
}
   2d4fe:	bd08      	pop	{r3, pc}

0002d500 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   2d500:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   2d502:	2400      	movs	r4, #0
   2d504:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2d506:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2d508:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   2d50a:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   2d50c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2d50e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2d510:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   2d512:	f85d 4b04 	ldr.w	r4, [sp], #4
   2d516:	4770      	bx	lr

0002d518 <z_impl_k_thread_create>:
{
   2d518:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d51a:	b087      	sub	sp, #28
   2d51c:	4604      	mov	r4, r0
   2d51e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   2d520:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2d522:	2700      	movs	r7, #0
   2d524:	9705      	str	r7, [sp, #20]
   2d526:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2d528:	9704      	str	r7, [sp, #16]
   2d52a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   2d52c:	9703      	str	r7, [sp, #12]
   2d52e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   2d530:	9702      	str	r7, [sp, #8]
   2d532:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2d534:	9701      	str	r7, [sp, #4]
   2d536:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d538:	9700      	str	r7, [sp, #0]
   2d53a:	f7f4 fcd9 	bl	21ef0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2d53e:	f1b5 3fff 	cmp.w	r5, #4294967295
   2d542:	bf08      	it	eq
   2d544:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2d548:	d102      	bne.n	2d550 <z_impl_k_thread_create+0x38>
}
   2d54a:	4620      	mov	r0, r4
   2d54c:	b007      	add	sp, #28
   2d54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   2d550:	4632      	mov	r2, r6
   2d552:	462b      	mov	r3, r5
   2d554:	4620      	mov	r0, r4
   2d556:	f7f4 fcbd 	bl	21ed4 <schedule_new_thread>
   2d55a:	e7f6      	b.n	2d54a <z_impl_k_thread_create+0x32>

0002d55c <z_pm_save_idle_exit>:
{
   2d55c:	b508      	push	{r3, lr}
	pm_system_resume();
   2d55e:	f7e7 fa75 	bl	14a4c <pm_system_resume>
	sys_clock_idle_exit();
   2d562:	f7ff f887 	bl	2c674 <sys_clock_idle_exit>
}
   2d566:	bd08      	pop	{r3, pc}

0002d568 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2d568:	4288      	cmp	r0, r1
   2d56a:	da00      	bge.n	2d56e <new_prio_for_inheritance+0x6>
   2d56c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2d56e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2d572:	db01      	blt.n	2d578 <new_prio_for_inheritance+0x10>
   2d574:	4608      	mov	r0, r1
   2d576:	4770      	bx	lr
   2d578:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2d57c:	4770      	bx	lr

0002d57e <adjust_owner_prio>:
{
   2d57e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2d580:	6880      	ldr	r0, [r0, #8]
   2d582:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2d586:	428b      	cmp	r3, r1
   2d588:	d101      	bne.n	2d58e <adjust_owner_prio+0x10>
	return false;
   2d58a:	2000      	movs	r0, #0
}
   2d58c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2d58e:	f7f5 fa11 	bl	229b4 <z_set_prio>
   2d592:	e7fb      	b.n	2d58c <adjust_owner_prio+0xe>

0002d594 <z_impl_k_mutex_init>:
{
   2d594:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2d596:	2000      	movs	r0, #0
   2d598:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2d59a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2d59c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2d59e:	605b      	str	r3, [r3, #4]
}
   2d5a0:	4770      	bx	lr

0002d5a2 <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d5a2:	680b      	ldr	r3, [r1, #0]
   2d5a4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d5a8:	600b      	str	r3, [r1, #0]
	return list->tail;
   2d5aa:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2d5ac:	b132      	cbz	r2, 2d5bc <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d5ae:	6813      	ldr	r3, [r2, #0]
   2d5b0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d5b4:	430b      	orrs	r3, r1
   2d5b6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2d5b8:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2d5ba:	4770      	bx	lr
	list->tail = node;
   2d5bc:	6041      	str	r1, [r0, #4]
	list->head = node;
   2d5be:	6001      	str	r1, [r0, #0]
}
   2d5c0:	4770      	bx	lr

0002d5c2 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   2d5c2:	b508      	push	{r3, lr}
   2d5c4:	b191      	cbz	r1, 2d5ec <sys_sflist_insert+0x2a>
   2d5c6:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d5c8:	680b      	ldr	r3, [r1, #0]
   2d5ca:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2d5ce:	2b03      	cmp	r3, #3
   2d5d0:	d918      	bls.n	2d604 <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d5d2:	6813      	ldr	r3, [r2, #0]
   2d5d4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d5d8:	430b      	orrs	r3, r1
   2d5da:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d5dc:	f8dc 3000 	ldr.w	r3, [ip]
   2d5e0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d5e4:	4313      	orrs	r3, r2
   2d5e6:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   2d5ea:	bd08      	pop	{r3, pc}
	return list->head;
   2d5ec:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d5ee:	6813      	ldr	r3, [r2, #0]
   2d5f0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d5f4:	430b      	orrs	r3, r1
   2d5f6:	6013      	str	r3, [r2, #0]
	list->head = node;
   2d5f8:	6002      	str	r2, [r0, #0]
	return list->tail;
   2d5fa:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d5fc:	2b00      	cmp	r3, #0
   2d5fe:	d1f4      	bne.n	2d5ea <sys_sflist_insert+0x28>
	list->tail = node;
   2d600:	6042      	str	r2, [r0, #4]
}
   2d602:	e7f2      	b.n	2d5ea <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   2d604:	4611      	mov	r1, r2
   2d606:	f7ff ffcc 	bl	2d5a2 <sys_sflist_append>
   2d60a:	e7ee      	b.n	2d5ea <sys_sflist_insert+0x28>

0002d60c <prepare_thread_to_run>:
{
   2d60c:	b508      	push	{r3, lr}
   2d60e:	2200      	movs	r2, #0
   2d610:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2d614:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2d616:	f000 fa94 	bl	2db42 <z_ready_thread>
}
   2d61a:	bd08      	pop	{r3, pc}

0002d61c <queue_insert>:
{
   2d61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d620:	4604      	mov	r4, r0
   2d622:	460e      	mov	r6, r1
   2d624:	4615      	mov	r5, r2
   2d626:	461f      	mov	r7, r3
   2d628:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d62c:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   2d630:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d634:	f3ef 8911 	mrs	r9, BASEPRI
   2d638:	f382 8812 	msr	BASEPRI_MAX, r2
   2d63c:	f3bf 8f6f 	isb	sy
   2d640:	46ca      	mov	sl, r9
	if (is_append) {
   2d642:	b103      	cbz	r3, 2d646 <queue_insert+0x2a>
	return list->tail;
   2d644:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2d646:	4640      	mov	r0, r8
   2d648:	f000 fb30 	bl	2dcac <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2d64c:	b998      	cbnz	r0, 2d676 <queue_insert+0x5a>
	if (alloc) {
   2d64e:	b9df      	cbnz	r7, 2d688 <queue_insert+0x6c>
	node->next_and_flags = flags;
   2d650:	2300      	movs	r3, #0
   2d652:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   2d654:	462a      	mov	r2, r5
   2d656:	4631      	mov	r1, r6
   2d658:	4620      	mov	r0, r4
   2d65a:	f7ff ffb2 	bl	2d5c2 <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2d65e:	2104      	movs	r1, #4
   2d660:	f104 0010 	add.w	r0, r4, #16
   2d664:	f000 fe00 	bl	2e268 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2d668:	4649      	mov	r1, r9
   2d66a:	4640      	mov	r0, r8
   2d66c:	f7f5 f822 	bl	226b4 <z_reschedule>
	return 0;
   2d670:	2000      	movs	r0, #0
}
   2d672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   2d676:	4629      	mov	r1, r5
   2d678:	f7ff ffc8 	bl	2d60c <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   2d67c:	4649      	mov	r1, r9
   2d67e:	4640      	mov	r0, r8
   2d680:	f7f5 f818 	bl	226b4 <z_reschedule>
		return 0;
   2d684:	2000      	movs	r0, #0
   2d686:	e7f4      	b.n	2d672 <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   2d688:	2108      	movs	r1, #8
   2d68a:	2000      	movs	r0, #0
   2d68c:	f7f5 fe50 	bl	23330 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2d690:	b120      	cbz	r0, 2d69c <queue_insert+0x80>
		anode->data = data;
   2d692:	6045      	str	r5, [r0, #4]
   2d694:	2201      	movs	r2, #1
   2d696:	6002      	str	r2, [r0, #0]
		data = anode;
   2d698:	4605      	mov	r5, r0
   2d69a:	e7db      	b.n	2d654 <queue_insert+0x38>
	__asm__ volatile(
   2d69c:	f38a 8811 	msr	BASEPRI, sl
   2d6a0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2d6a4:	f06f 000b 	mvn.w	r0, #11
   2d6a8:	e7e3      	b.n	2d672 <queue_insert+0x56>

0002d6aa <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2d6aa:	b160      	cbz	r0, 2d6c6 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d6ac:	6803      	ldr	r3, [r0, #0]
   2d6ae:	f013 0f03 	tst.w	r3, #3
   2d6b2:	d008      	beq.n	2d6c6 <z_queue_node_peek+0x1c>
{
   2d6b4:	b510      	push	{r4, lr}
		ret = anode->data;
   2d6b6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2d6b8:	b909      	cbnz	r1, 2d6be <z_queue_node_peek+0x14>
		ret = anode->data;
   2d6ba:	4620      	mov	r0, r4
}
   2d6bc:	bd10      	pop	{r4, pc}
			k_free(anode);
   2d6be:	f000 fdea 	bl	2e296 <k_free>
		ret = anode->data;
   2d6c2:	4620      	mov	r0, r4
   2d6c4:	e7fa      	b.n	2d6bc <z_queue_node_peek+0x12>
}
   2d6c6:	4770      	bx	lr

0002d6c8 <z_impl_k_queue_init>:
	list->head = NULL;
   2d6c8:	2300      	movs	r3, #0
   2d6ca:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2d6cc:	6043      	str	r3, [r0, #4]
   2d6ce:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   2d6d2:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2d6d4:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2d6d6:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2d6da:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2d6dc:	6143      	str	r3, [r0, #20]
}
   2d6de:	4770      	bx	lr

0002d6e0 <k_queue_append>:
{
   2d6e0:	b500      	push	{lr}
   2d6e2:	b083      	sub	sp, #12
   2d6e4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2d6e6:	2301      	movs	r3, #1
   2d6e8:	9300      	str	r3, [sp, #0]
   2d6ea:	2300      	movs	r3, #0
   2d6ec:	4619      	mov	r1, r3
   2d6ee:	f7ff ff95 	bl	2d61c <queue_insert>
}
   2d6f2:	b003      	add	sp, #12
   2d6f4:	f85d fb04 	ldr.w	pc, [sp], #4

0002d6f8 <k_queue_prepend>:
{
   2d6f8:	b500      	push	{lr}
   2d6fa:	b083      	sub	sp, #12
   2d6fc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2d6fe:	2100      	movs	r1, #0
   2d700:	9100      	str	r1, [sp, #0]
   2d702:	460b      	mov	r3, r1
   2d704:	f7ff ff8a 	bl	2d61c <queue_insert>
}
   2d708:	b003      	add	sp, #12
   2d70a:	f85d fb04 	ldr.w	pc, [sp], #4

0002d70e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2d70e:	b15a      	cbz	r2, 2d728 <z_impl_k_sem_init+0x1a>
   2d710:	428a      	cmp	r2, r1
   2d712:	d30c      	bcc.n	2d72e <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2d714:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2d716:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2d718:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2d71a:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2d71c:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2d720:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2d722:	6143      	str	r3, [r0, #20]
	return 0;
   2d724:	2000      	movs	r0, #0
   2d726:	4770      	bx	lr
		return -EINVAL;
   2d728:	f06f 0015 	mvn.w	r0, #21
   2d72c:	4770      	bx	lr
   2d72e:	f06f 0015 	mvn.w	r0, #21
}
   2d732:	4770      	bx	lr

0002d734 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   2d734:	460b      	mov	r3, r1
   2d736:	b139      	cbz	r1, 2d748 <sys_slist_remove+0x14>
	return node->next;
   2d738:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   2d73a:	6019      	str	r1, [r3, #0]
	return list->tail;
   2d73c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d73e:	428a      	cmp	r2, r1
   2d740:	d009      	beq.n	2d756 <sys_slist_remove+0x22>
	parent->next = child;
   2d742:	2300      	movs	r3, #0
   2d744:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d746:	4770      	bx	lr
	return node->next;
   2d748:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   2d74a:	6003      	str	r3, [r0, #0]
	return list->tail;
   2d74c:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2d74e:	428a      	cmp	r2, r1
   2d750:	d1f7      	bne.n	2d742 <sys_slist_remove+0xe>
	list->tail = node;
   2d752:	6043      	str	r3, [r0, #4]
}
   2d754:	e7f5      	b.n	2d742 <sys_slist_remove+0xe>
	list->tail = node;
   2d756:	6043      	str	r3, [r0, #4]
}
   2d758:	e7f3      	b.n	2d742 <sys_slist_remove+0xe>

0002d75a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d75a:	b508      	push	{r3, lr}
   2d75c:	460a      	mov	r2, r1
	return list->head;
   2d75e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d760:	2100      	movs	r1, #0
   2d762:	e001      	b.n	2d768 <sys_slist_find_and_remove+0xe>
   2d764:	4619      	mov	r1, r3
   2d766:	681b      	ldr	r3, [r3, #0]
   2d768:	b12b      	cbz	r3, 2d776 <sys_slist_find_and_remove+0x1c>
   2d76a:	4293      	cmp	r3, r2
   2d76c:	d1fa      	bne.n	2d764 <sys_slist_find_and_remove+0xa>
   2d76e:	f7ff ffe1 	bl	2d734 <sys_slist_remove>
   2d772:	2001      	movs	r0, #1
   2d774:	e000      	b.n	2d778 <sys_slist_find_and_remove+0x1e>
   2d776:	2000      	movs	r0, #0
   2d778:	bd08      	pop	{r3, pc}

0002d77a <queue_remove_locked>:
{
   2d77a:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2d77c:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2d77e:	f023 0204 	bic.w	r2, r3, #4
   2d782:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2d784:	f013 0f04 	tst.w	r3, #4
   2d788:	d100      	bne.n	2d78c <queue_remove_locked+0x12>
}
   2d78a:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   2d78c:	30f8      	adds	r0, #248	; 0xf8
   2d78e:	f7ff ffe4 	bl	2d75a <sys_slist_find_and_remove>
}
   2d792:	e7fa      	b.n	2d78a <queue_remove_locked+0x10>

0002d794 <cancel_async_locked>:
{
   2d794:	b510      	push	{r4, lr}
   2d796:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2d798:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d79a:	f013 0f02 	tst.w	r3, #2
   2d79e:	d009      	beq.n	2d7b4 <cancel_async_locked+0x20>
	return *flagp;
   2d7a0:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2d7a2:	f013 000f 	ands.w	r0, r3, #15
   2d7a6:	d004      	beq.n	2d7b2 <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   2d7a8:	f043 0202 	orr.w	r2, r3, #2
   2d7ac:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2d7ae:	f040 0002 	orr.w	r0, r0, #2
}
   2d7b2:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   2d7b4:	4601      	mov	r1, r0
   2d7b6:	6880      	ldr	r0, [r0, #8]
   2d7b8:	f7ff ffdf 	bl	2d77a <queue_remove_locked>
   2d7bc:	e7f0      	b.n	2d7a0 <cancel_async_locked+0xc>

0002d7be <notify_queue_locked>:
	if (queue != NULL) {
   2d7be:	b138      	cbz	r0, 2d7d0 <notify_queue_locked+0x12>
{
   2d7c0:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2d7c2:	2200      	movs	r2, #0
   2d7c4:	4611      	mov	r1, r2
   2d7c6:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2d7ca:	f000 faa5 	bl	2dd18 <z_sched_wake>
}
   2d7ce:	bd08      	pop	{r3, pc}
	bool rv = false;
   2d7d0:	2000      	movs	r0, #0
}
   2d7d2:	4770      	bx	lr

0002d7d4 <submit_to_queue_locked>:
{
   2d7d4:	b570      	push	{r4, r5, r6, lr}
   2d7d6:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   2d7d8:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d7da:	f013 0f02 	tst.w	r3, #2
   2d7de:	d122      	bne.n	2d826 <submit_to_queue_locked+0x52>
   2d7e0:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2d7e2:	f013 0f04 	tst.w	r3, #4
   2d7e6:	d123      	bne.n	2d830 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   2d7e8:	680b      	ldr	r3, [r1, #0]
   2d7ea:	b1ab      	cbz	r3, 2d818 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   2d7ec:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2d7ee:	f013 0f01 	tst.w	r3, #1
   2d7f2:	d014      	beq.n	2d81e <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   2d7f4:	68a3      	ldr	r3, [r4, #8]
   2d7f6:	602b      	str	r3, [r5, #0]
			ret = 2;
   2d7f8:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   2d7fa:	4621      	mov	r1, r4
   2d7fc:	6828      	ldr	r0, [r5, #0]
   2d7fe:	f7f4 fdad 	bl	2235c <queue_submit_locked>
		if (rc < 0) {
   2d802:	2800      	cmp	r0, #0
   2d804:	db11      	blt.n	2d82a <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   2d806:	68e3      	ldr	r3, [r4, #12]
   2d808:	f043 0304 	orr.w	r3, r3, #4
   2d80c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2d80e:	682b      	ldr	r3, [r5, #0]
   2d810:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   2d812:	b136      	cbz	r6, 2d822 <submit_to_queue_locked+0x4e>
   2d814:	4630      	mov	r0, r6
	return ret;
   2d816:	e00a      	b.n	2d82e <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   2d818:	6883      	ldr	r3, [r0, #8]
   2d81a:	600b      	str	r3, [r1, #0]
   2d81c:	e7e6      	b.n	2d7ec <submit_to_queue_locked+0x18>
		ret = 1;
   2d81e:	2601      	movs	r6, #1
   2d820:	e7eb      	b.n	2d7fa <submit_to_queue_locked+0x26>
   2d822:	4630      	mov	r0, r6
   2d824:	e001      	b.n	2d82a <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   2d826:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   2d82a:	2300      	movs	r3, #0
   2d82c:	602b      	str	r3, [r5, #0]
}
   2d82e:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   2d830:	2000      	movs	r0, #0
   2d832:	e7fa      	b.n	2d82a <submit_to_queue_locked+0x56>

0002d834 <work_timeout>:
{
   2d834:	b510      	push	{r4, lr}
   2d836:	b082      	sub	sp, #8
   2d838:	4603      	mov	r3, r0
	__asm__ volatile(
   2d83a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d83e:	f3ef 8411 	mrs	r4, BASEPRI
   2d842:	f382 8812 	msr	BASEPRI_MAX, r2
   2d846:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2d84a:	2200      	movs	r2, #0
   2d84c:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   2d84e:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2d852:	f022 0108 	bic.w	r1, r2, #8
   2d856:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2d85a:	f012 0f08 	tst.w	r2, #8
   2d85e:	d105      	bne.n	2d86c <work_timeout+0x38>
	__asm__ volatile(
   2d860:	f384 8811 	msr	BASEPRI, r4
   2d864:	f3bf 8f6f 	isb	sy
}
   2d868:	b002      	add	sp, #8
   2d86a:	bd10      	pop	{r4, pc}
   2d86c:	3810      	subs	r0, #16
		queue = dw->queue;
   2d86e:	699b      	ldr	r3, [r3, #24]
   2d870:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2d872:	a901      	add	r1, sp, #4
   2d874:	f7ff ffae 	bl	2d7d4 <submit_to_queue_locked>
   2d878:	e7f2      	b.n	2d860 <work_timeout+0x2c>

0002d87a <z_reschedule_unlocked>:
{
   2d87a:	b508      	push	{r3, lr}
	__asm__ volatile(
   2d87c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d880:	f3ef 8011 	mrs	r0, BASEPRI
   2d884:	f383 8812 	msr	BASEPRI_MAX, r3
   2d888:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d88c:	f000 f907 	bl	2da9e <z_reschedule_irqlock>
}
   2d890:	bd08      	pop	{r3, pc}

0002d892 <cancel_sync_locked>:
{
   2d892:	b510      	push	{r4, lr}
   2d894:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   2d896:	68c4      	ldr	r4, [r0, #12]
   2d898:	f014 0f02 	tst.w	r4, #2
   2d89c:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   2d8a0:	d101      	bne.n	2d8a6 <cancel_sync_locked+0x14>
}
   2d8a2:	4620      	mov	r0, r4
   2d8a4:	bd10      	pop	{r4, pc}
   2d8a6:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   2d8a8:	4611      	mov	r1, r2
   2d8aa:	f7f4 fdc5 	bl	22438 <init_work_cancel>
   2d8ae:	e7f8      	b.n	2d8a2 <cancel_sync_locked+0x10>

0002d8b0 <unschedule_locked>:
{
   2d8b0:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   2d8b2:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2d8b4:	f023 0208 	bic.w	r2, r3, #8
   2d8b8:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2d8ba:	f013 0f08 	tst.w	r3, #8
   2d8be:	d101      	bne.n	2d8c4 <unschedule_locked+0x14>
	bool ret = false;
   2d8c0:	2000      	movs	r0, #0
}
   2d8c2:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   2d8c4:	3010      	adds	r0, #16
   2d8c6:	f000 fa6c 	bl	2dda2 <z_abort_timeout>
		ret = true;
   2d8ca:	2001      	movs	r0, #1
   2d8cc:	e7f9      	b.n	2d8c2 <unschedule_locked+0x12>

0002d8ce <cancel_delayable_async_locked>:
{
   2d8ce:	b510      	push	{r4, lr}
   2d8d0:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   2d8d2:	f7ff ffed 	bl	2d8b0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2d8d6:	4620      	mov	r0, r4
   2d8d8:	f7ff ff5c 	bl	2d794 <cancel_async_locked>
}
   2d8dc:	bd10      	pop	{r4, pc}

0002d8de <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2d8de:	2300      	movs	r3, #0
   2d8e0:	6003      	str	r3, [r0, #0]
   2d8e2:	6043      	str	r3, [r0, #4]
   2d8e4:	6083      	str	r3, [r0, #8]
   2d8e6:	60c3      	str	r3, [r0, #12]
   2d8e8:	6041      	str	r1, [r0, #4]
}
   2d8ea:	4770      	bx	lr

0002d8ec <z_work_submit_to_queue>:
{
   2d8ec:	b510      	push	{r4, lr}
   2d8ee:	b082      	sub	sp, #8
   2d8f0:	9001      	str	r0, [sp, #4]
   2d8f2:	4608      	mov	r0, r1
   2d8f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d8f8:	f3ef 8411 	mrs	r4, BASEPRI
   2d8fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2d900:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2d904:	a901      	add	r1, sp, #4
   2d906:	f7ff ff65 	bl	2d7d4 <submit_to_queue_locked>
	__asm__ volatile(
   2d90a:	f384 8811 	msr	BASEPRI, r4
   2d90e:	f3bf 8f6f 	isb	sy
}
   2d912:	b002      	add	sp, #8
   2d914:	bd10      	pop	{r4, pc}

0002d916 <k_work_submit_to_queue>:
{
   2d916:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2d918:	f7ff ffe8 	bl	2d8ec <z_work_submit_to_queue>
	if (ret > 0) {
   2d91c:	1e04      	subs	r4, r0, #0
   2d91e:	dc01      	bgt.n	2d924 <k_work_submit_to_queue+0xe>
}
   2d920:	4620      	mov	r0, r4
   2d922:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   2d924:	f7ff ffa9 	bl	2d87a <z_reschedule_unlocked>
	return ret;
   2d928:	e7fa      	b.n	2d920 <k_work_submit_to_queue+0xa>

0002d92a <k_work_queue_init>:
{
   2d92a:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2d92c:	f44f 728c 	mov.w	r2, #280	; 0x118
   2d930:	2100      	movs	r1, #0
   2d932:	f000 fcd8 	bl	2e2e6 <memset>
}
   2d936:	bd08      	pop	{r3, pc}

0002d938 <k_work_init_delayable>:
{
   2d938:	b538      	push	{r3, r4, r5, lr}
   2d93a:	4604      	mov	r4, r0
   2d93c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2d93e:	2230      	movs	r2, #48	; 0x30
   2d940:	2100      	movs	r1, #0
   2d942:	f000 fcd0 	bl	2e2e6 <memset>
   2d946:	6065      	str	r5, [r4, #4]
   2d948:	f44f 7380 	mov.w	r3, #256	; 0x100
   2d94c:	60e3      	str	r3, [r4, #12]
}
   2d94e:	bd38      	pop	{r3, r4, r5, pc}

0002d950 <k_work_delayable_busy_get>:
	__asm__ volatile(
   2d950:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d954:	f3ef 8311 	mrs	r3, BASEPRI
   2d958:	f382 8812 	msr	BASEPRI_MAX, r2
   2d95c:	f3bf 8f6f 	isb	sy
	return *flagp;
   2d960:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2d962:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2d966:	f383 8811 	msr	BASEPRI, r3
   2d96a:	f3bf 8f6f 	isb	sy
}
   2d96e:	4770      	bx	lr

0002d970 <k_work_schedule_for_queue>:
{
   2d970:	b510      	push	{r4, lr}
   2d972:	b082      	sub	sp, #8
   2d974:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2d976:	f04f 0040 	mov.w	r0, #64	; 0x40
   2d97a:	f3ef 8411 	mrs	r4, BASEPRI
   2d97e:	f380 8812 	msr	BASEPRI_MAX, r0
   2d982:	f3bf 8f6f 	isb	sy
	return *flagp;
   2d986:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2d988:	f010 0f0e 	tst.w	r0, #14
   2d98c:	d006      	beq.n	2d99c <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2d98e:	2000      	movs	r0, #0
	__asm__ volatile(
   2d990:	f384 8811 	msr	BASEPRI, r4
   2d994:	f3bf 8f6f 	isb	sy
}
   2d998:	b002      	add	sp, #8
   2d99a:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2d99c:	a801      	add	r0, sp, #4
   2d99e:	f7f4 fddb 	bl	22558 <schedule_for_queue_locked>
   2d9a2:	e7f5      	b.n	2d990 <k_work_schedule_for_queue+0x20>

0002d9a4 <k_work_reschedule_for_queue>:
{
   2d9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d9a6:	b083      	sub	sp, #12
   2d9a8:	9001      	str	r0, [sp, #4]
   2d9aa:	460c      	mov	r4, r1
   2d9ac:	4616      	mov	r6, r2
   2d9ae:	461d      	mov	r5, r3
	__asm__ volatile(
   2d9b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d9b4:	f3ef 8711 	mrs	r7, BASEPRI
   2d9b8:	f383 8812 	msr	BASEPRI_MAX, r3
   2d9bc:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2d9c0:	4608      	mov	r0, r1
   2d9c2:	f7ff ff75 	bl	2d8b0 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2d9c6:	4632      	mov	r2, r6
   2d9c8:	462b      	mov	r3, r5
   2d9ca:	4621      	mov	r1, r4
   2d9cc:	a801      	add	r0, sp, #4
   2d9ce:	f7f4 fdc3 	bl	22558 <schedule_for_queue_locked>
	__asm__ volatile(
   2d9d2:	f387 8811 	msr	BASEPRI, r7
   2d9d6:	f3bf 8f6f 	isb	sy
}
   2d9da:	b003      	add	sp, #12
   2d9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d9de <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2d9de:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d9e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d9e4:	f3ef 8411 	mrs	r4, BASEPRI
   2d9e8:	f383 8812 	msr	BASEPRI_MAX, r3
   2d9ec:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2d9f0:	f7ff ff6d 	bl	2d8ce <cancel_delayable_async_locked>
	__asm__ volatile(
   2d9f4:	f384 8811 	msr	BASEPRI, r4
   2d9f8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2d9fc:	bd10      	pop	{r4, pc}

0002d9fe <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2d9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2da00:	460d      	mov	r5, r1
	__asm__ volatile(
   2da02:	f04f 0340 	mov.w	r3, #64	; 0x40
   2da06:	f3ef 8611 	mrs	r6, BASEPRI
   2da0a:	f383 8812 	msr	BASEPRI_MAX, r3
   2da0e:	f3bf 8f6f 	isb	sy
	return *flagp;
   2da12:	68c3      	ldr	r3, [r0, #12]
   2da14:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2da18:	2b00      	cmp	r3, #0
   2da1a:	bf14      	ite	ne
   2da1c:	2701      	movne	r7, #1
   2da1e:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2da20:	d107      	bne.n	2da32 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   2da22:	2000      	movs	r0, #0
	__asm__ volatile(
   2da24:	f386 8811 	msr	BASEPRI, r6
   2da28:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2da2c:	b948      	cbnz	r0, 2da42 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2da2e:	4638      	mov	r0, r7
   2da30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2da32:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   2da34:	f7ff ff4b 	bl	2d8ce <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2da38:	4629      	mov	r1, r5
   2da3a:	4620      	mov	r0, r4
   2da3c:	f7ff ff29 	bl	2d892 <cancel_sync_locked>
   2da40:	e7f0      	b.n	2da24 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   2da42:	f105 0008 	add.w	r0, r5, #8
	return z_impl_k_sem_take(sem, timeout);
   2da46:	f04f 32ff 	mov.w	r2, #4294967295
   2da4a:	f04f 33ff 	mov.w	r3, #4294967295
   2da4e:	f7f4 fc43 	bl	222d8 <z_impl_k_sem_take>
   2da52:	e7ec      	b.n	2da2e <k_work_cancel_delayable_sync+0x30>

0002da54 <thread_active_elsewhere>:
}
   2da54:	2000      	movs	r0, #0
   2da56:	4770      	bx	lr

0002da58 <pended_on_thread>:
}
   2da58:	6880      	ldr	r0, [r0, #8]
   2da5a:	4770      	bx	lr

0002da5c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2da5c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2da60:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2da64:	4283      	cmp	r3, r0
   2da66:	d001      	beq.n	2da6c <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2da68:	1ac0      	subs	r0, r0, r3
   2da6a:	4770      	bx	lr
	return 0;
   2da6c:	2000      	movs	r0, #0
}
   2da6e:	4770      	bx	lr

0002da70 <z_unpend_thread_no_timeout>:
{
   2da70:	b538      	push	{r3, r4, r5, lr}
   2da72:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   2da74:	2300      	movs	r3, #0
	__asm__ volatile(
   2da76:	f04f 0240 	mov.w	r2, #64	; 0x40
   2da7a:	f3ef 8411 	mrs	r4, BASEPRI
   2da7e:	f382 8812 	msr	BASEPRI_MAX, r2
   2da82:	f3bf 8f6f 	isb	sy
   2da86:	e007      	b.n	2da98 <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
   2da88:	4628      	mov	r0, r5
   2da8a:	f000 f82a 	bl	2dae2 <unpend_thread_no_timeout>
	__asm__ volatile(
   2da8e:	f384 8811 	msr	BASEPRI, r4
   2da92:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2da96:	2301      	movs	r3, #1
   2da98:	2b00      	cmp	r3, #0
   2da9a:	d0f5      	beq.n	2da88 <z_unpend_thread_no_timeout+0x18>
}
   2da9c:	bd38      	pop	{r3, r4, r5, pc}

0002da9e <z_reschedule_irqlock>:
{
   2da9e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2daa0:	4603      	mov	r3, r0
   2daa2:	b928      	cbnz	r0, 2dab0 <z_reschedule_irqlock+0x12>
   2daa4:	f3ef 8205 	mrs	r2, IPSR
   2daa8:	b912      	cbnz	r2, 2dab0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   2daaa:	f7e7 fd2f 	bl	1550c <arch_swap>
	return ret;
   2daae:	e003      	b.n	2dab8 <z_reschedule_irqlock+0x1a>
   2dab0:	f383 8811 	msr	BASEPRI, r3
   2dab4:	f3bf 8f6f 	isb	sy
}
   2dab8:	bd08      	pop	{r3, pc}

0002daba <z_reschedule_unlocked>:
{
   2daba:	b508      	push	{r3, lr}
	__asm__ volatile(
   2dabc:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dac0:	f3ef 8011 	mrs	r0, BASEPRI
   2dac4:	f383 8812 	msr	BASEPRI_MAX, r3
   2dac8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2dacc:	f7ff ffe7 	bl	2da9e <z_reschedule_irqlock>
}
   2dad0:	bd08      	pop	{r3, pc}

0002dad2 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   2dad2:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   2dad4:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   2dad6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2dad8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2dada:	2300      	movs	r3, #0
   2dadc:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2dade:	604b      	str	r3, [r1, #4]
}
   2dae0:	4770      	bx	lr

0002dae2 <unpend_thread_no_timeout>:
{
   2dae2:	b510      	push	{r4, lr}
   2dae4:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2dae6:	f7ff ffb7 	bl	2da58 <pended_on_thread>
   2daea:	4621      	mov	r1, r4
   2daec:	f7ff fff1 	bl	2dad2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2daf0:	7b63      	ldrb	r3, [r4, #13]
   2daf2:	f023 0302 	bic.w	r3, r3, #2
   2daf6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2daf8:	2300      	movs	r3, #0
   2dafa:	60a3      	str	r3, [r4, #8]
}
   2dafc:	bd10      	pop	{r4, pc}

0002dafe <z_unpend_thread>:
{
   2dafe:	b538      	push	{r3, r4, r5, lr}
   2db00:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2db02:	2300      	movs	r3, #0
   2db04:	f04f 0240 	mov.w	r2, #64	; 0x40
   2db08:	f3ef 8511 	mrs	r5, BASEPRI
   2db0c:	f382 8812 	msr	BASEPRI_MAX, r2
   2db10:	f3bf 8f6f 	isb	sy
   2db14:	e007      	b.n	2db26 <z_unpend_thread+0x28>
		unpend_thread_no_timeout(thread);
   2db16:	4620      	mov	r0, r4
   2db18:	f7ff ffe3 	bl	2dae2 <unpend_thread_no_timeout>
	__asm__ volatile(
   2db1c:	f385 8811 	msr	BASEPRI, r5
   2db20:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2db24:	2301      	movs	r3, #1
   2db26:	2b00      	cmp	r3, #0
   2db28:	d0f5      	beq.n	2db16 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   2db2a:	f104 0018 	add.w	r0, r4, #24
   2db2e:	f000 f938 	bl	2dda2 <z_abort_timeout>
}
   2db32:	bd38      	pop	{r3, r4, r5, pc}

0002db34 <z_priq_dumb_best>:
{
   2db34:	4603      	mov	r3, r0
	return list->head == list;
   2db36:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2db38:	4283      	cmp	r3, r0
   2db3a:	d000      	beq.n	2db3e <z_priq_dumb_best+0xa>
}
   2db3c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2db3e:	2000      	movs	r0, #0
	return thread;
   2db40:	e7fc      	b.n	2db3c <z_priq_dumb_best+0x8>

0002db42 <z_ready_thread>:
{
   2db42:	b538      	push	{r3, r4, r5, lr}
   2db44:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2db46:	2300      	movs	r3, #0
	__asm__ volatile(
   2db48:	f04f 0240 	mov.w	r2, #64	; 0x40
   2db4c:	f3ef 8511 	mrs	r5, BASEPRI
   2db50:	f382 8812 	msr	BASEPRI_MAX, r2
   2db54:	f3bf 8f6f 	isb	sy
   2db58:	e004      	b.n	2db64 <z_ready_thread+0x22>
	__asm__ volatile(
   2db5a:	f385 8811 	msr	BASEPRI, r5
   2db5e:	f3bf 8f6f 	isb	sy
   2db62:	2301      	movs	r3, #1
   2db64:	b943      	cbnz	r3, 2db78 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   2db66:	4620      	mov	r0, r4
   2db68:	f7ff ff74 	bl	2da54 <thread_active_elsewhere>
   2db6c:	2800      	cmp	r0, #0
   2db6e:	d1f4      	bne.n	2db5a <z_ready_thread+0x18>
			ready_thread(thread);
   2db70:	4620      	mov	r0, r4
   2db72:	f7f4 fe8d 	bl	22890 <ready_thread>
   2db76:	e7f0      	b.n	2db5a <z_ready_thread+0x18>
}
   2db78:	bd38      	pop	{r3, r4, r5, pc}

0002db7a <z_thread_timeout>:
{
   2db7a:	b570      	push	{r4, r5, r6, lr}
   2db7c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2db7e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   2db82:	2300      	movs	r3, #0
	__asm__ volatile(
   2db84:	f04f 0240 	mov.w	r2, #64	; 0x40
   2db88:	f3ef 8511 	mrs	r5, BASEPRI
   2db8c:	f382 8812 	msr	BASEPRI_MAX, r2
   2db90:	f3bf 8f6f 	isb	sy
   2db94:	e011      	b.n	2dbba <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2db96:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2db9a:	f023 0204 	bic.w	r2, r3, #4
   2db9e:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2dba2:	f023 0314 	bic.w	r3, r3, #20
   2dba6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2dbaa:	4630      	mov	r0, r6
   2dbac:	f7f4 fe70 	bl	22890 <ready_thread>
	__asm__ volatile(
   2dbb0:	f385 8811 	msr	BASEPRI, r5
   2dbb4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2dbb8:	2301      	movs	r3, #1
   2dbba:	b963      	cbnz	r3, 2dbd6 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   2dbbc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   2dbc0:	f013 0f28 	tst.w	r3, #40	; 0x28
   2dbc4:	d1f4      	bne.n	2dbb0 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   2dbc6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2dbca:	2b00      	cmp	r3, #0
   2dbcc:	d0e3      	beq.n	2db96 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
   2dbce:	4630      	mov	r0, r6
   2dbd0:	f7ff ff87 	bl	2dae2 <unpend_thread_no_timeout>
   2dbd4:	e7df      	b.n	2db96 <z_thread_timeout+0x1c>
}
   2dbd6:	bd70      	pop	{r4, r5, r6, pc}

0002dbd8 <unpend_all>:
{
   2dbd8:	b538      	push	{r3, r4, r5, lr}
   2dbda:	4605      	mov	r5, r0
	return list->head == list;
   2dbdc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dbde:	42a5      	cmp	r5, r4
   2dbe0:	d00e      	beq.n	2dc00 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2dbe2:	b16c      	cbz	r4, 2dc00 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   2dbe4:	4620      	mov	r0, r4
   2dbe6:	f7ff ff7c 	bl	2dae2 <unpend_thread_no_timeout>
   2dbea:	f104 0018 	add.w	r0, r4, #24
   2dbee:	f000 f8d8 	bl	2dda2 <z_abort_timeout>
   2dbf2:	2300      	movs	r3, #0
   2dbf4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   2dbf8:	4620      	mov	r0, r4
   2dbfa:	f7f4 fe49 	bl	22890 <ready_thread>
   2dbfe:	e7ed      	b.n	2dbdc <unpend_all+0x4>
}
   2dc00:	bd38      	pop	{r3, r4, r5, pc}

0002dc02 <add_to_waitq_locked>:
{
   2dc02:	b570      	push	{r4, r5, r6, lr}
   2dc04:	4605      	mov	r5, r0
   2dc06:	460e      	mov	r6, r1
	unready_thread(thread);
   2dc08:	f7f4 fe9c 	bl	22944 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2dc0c:	7b6b      	ldrb	r3, [r5, #13]
   2dc0e:	f043 0302 	orr.w	r3, r3, #2
   2dc12:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   2dc14:	b1fe      	cbz	r6, 2dc56 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   2dc16:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   2dc18:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dc1a:	42a6      	cmp	r6, r4
   2dc1c:	d108      	bne.n	2dc30 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2dc1e:	2400      	movs	r4, #0
   2dc20:	e006      	b.n	2dc30 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   2dc22:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2dc24:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2dc26:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2dc28:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2dc2a:	6065      	str	r5, [r4, #4]
}
   2dc2c:	e013      	b.n	2dc56 <add_to_waitq_locked+0x54>
   2dc2e:	2400      	movs	r4, #0
   2dc30:	b164      	cbz	r4, 2dc4c <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2dc32:	4621      	mov	r1, r4
   2dc34:	4628      	mov	r0, r5
   2dc36:	f7ff ff11 	bl	2da5c <z_sched_prio_cmp>
   2dc3a:	2800      	cmp	r0, #0
   2dc3c:	dcf1      	bgt.n	2dc22 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2dc3e:	2c00      	cmp	r4, #0
   2dc40:	d0f6      	beq.n	2dc30 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   2dc42:	6873      	ldr	r3, [r6, #4]
   2dc44:	429c      	cmp	r4, r3
   2dc46:	d0f2      	beq.n	2dc2e <add_to_waitq_locked+0x2c>
   2dc48:	6824      	ldr	r4, [r4, #0]
   2dc4a:	e7f1      	b.n	2dc30 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   2dc4c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2dc4e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   2dc50:	606b      	str	r3, [r5, #4]
	tail->next = node;
   2dc52:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2dc54:	6075      	str	r5, [r6, #4]
}
   2dc56:	bd70      	pop	{r4, r5, r6, pc}

0002dc58 <pend_locked>:
{
   2dc58:	b570      	push	{r4, r5, r6, lr}
   2dc5a:	4604      	mov	r4, r0
   2dc5c:	4616      	mov	r6, r2
   2dc5e:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   2dc60:	f7ff ffcf 	bl	2dc02 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   2dc64:	4632      	mov	r2, r6
   2dc66:	462b      	mov	r3, r5
   2dc68:	4620      	mov	r0, r4
   2dc6a:	f7f4 fcc5 	bl	225f8 <add_thread_timeout>
}
   2dc6e:	bd70      	pop	{r4, r5, r6, pc}

0002dc70 <z_unpend1_no_timeout>:
{
   2dc70:	b570      	push	{r4, r5, r6, lr}
   2dc72:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2dc74:	2300      	movs	r3, #0
	__asm__ volatile(
   2dc76:	f04f 0240 	mov.w	r2, #64	; 0x40
   2dc7a:	f3ef 8511 	mrs	r5, BASEPRI
   2dc7e:	f382 8812 	msr	BASEPRI_MAX, r2
   2dc82:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2dc86:	461c      	mov	r4, r3
   2dc88:	e004      	b.n	2dc94 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   2dc8a:	f385 8811 	msr	BASEPRI, r5
   2dc8e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2dc92:	2301      	movs	r3, #1
   2dc94:	b943      	cbnz	r3, 2dca8 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   2dc96:	4630      	mov	r0, r6
   2dc98:	f7ff ff4c 	bl	2db34 <z_priq_dumb_best>
		if (thread != NULL) {
   2dc9c:	4604      	mov	r4, r0
   2dc9e:	2800      	cmp	r0, #0
   2dca0:	d0f3      	beq.n	2dc8a <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   2dca2:	f7ff ff1e 	bl	2dae2 <unpend_thread_no_timeout>
   2dca6:	e7f0      	b.n	2dc8a <z_unpend1_no_timeout+0x1a>
}
   2dca8:	4620      	mov	r0, r4
   2dcaa:	bd70      	pop	{r4, r5, r6, pc}

0002dcac <z_unpend_first_thread>:
{
   2dcac:	b570      	push	{r4, r5, r6, lr}
   2dcae:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2dcb0:	2300      	movs	r3, #0
	__asm__ volatile(
   2dcb2:	f04f 0240 	mov.w	r2, #64	; 0x40
   2dcb6:	f3ef 8511 	mrs	r5, BASEPRI
   2dcba:	f382 8812 	msr	BASEPRI_MAX, r2
   2dcbe:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2dcc2:	461c      	mov	r4, r3
   2dcc4:	e004      	b.n	2dcd0 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   2dcc6:	f385 8811 	msr	BASEPRI, r5
   2dcca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2dcce:	2301      	movs	r3, #1
   2dcd0:	b963      	cbnz	r3, 2dcec <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   2dcd2:	4630      	mov	r0, r6
   2dcd4:	f7ff ff2e 	bl	2db34 <z_priq_dumb_best>
		if (thread != NULL) {
   2dcd8:	4604      	mov	r4, r0
   2dcda:	2800      	cmp	r0, #0
   2dcdc:	d0f3      	beq.n	2dcc6 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   2dcde:	f7ff ff00 	bl	2dae2 <unpend_thread_no_timeout>
   2dce2:	f104 0018 	add.w	r0, r4, #24
   2dce6:	f000 f85c 	bl	2dda2 <z_abort_timeout>
   2dcea:	e7ec      	b.n	2dcc6 <z_unpend_first_thread+0x1a>
}
   2dcec:	4620      	mov	r0, r4
   2dcee:	bd70      	pop	{r4, r5, r6, pc}

0002dcf0 <z_unpend_all>:
{
   2dcf0:	b538      	push	{r3, r4, r5, lr}
   2dcf2:	4605      	mov	r5, r0
	int need_sched = 0;
   2dcf4:	2000      	movs	r0, #0
	return list->head == list;
   2dcf6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dcf8:	42a5      	cmp	r5, r4
   2dcfa:	d008      	beq.n	2dd0e <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2dcfc:	b13c      	cbz	r4, 2dd0e <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   2dcfe:	4620      	mov	r0, r4
   2dd00:	f7ff fefd 	bl	2dafe <z_unpend_thread>
		z_ready_thread(thread);
   2dd04:	4620      	mov	r0, r4
   2dd06:	f7ff ff1c 	bl	2db42 <z_ready_thread>
		need_sched = 1;
   2dd0a:	2001      	movs	r0, #1
   2dd0c:	e7f3      	b.n	2dcf6 <z_unpend_all+0x6>
}
   2dd0e:	bd38      	pop	{r3, r4, r5, pc}

0002dd10 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2dd10:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   2dd12:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   2dd14:	6083      	str	r3, [r0, #8]
}
   2dd16:	4770      	bx	lr

0002dd18 <z_sched_wake>:
{
   2dd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dd1c:	4606      	mov	r6, r0
   2dd1e:	4688      	mov	r8, r1
   2dd20:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   2dd22:	2300      	movs	r3, #0
	__asm__ volatile(
   2dd24:	f04f 0240 	mov.w	r2, #64	; 0x40
   2dd28:	f3ef 8511 	mrs	r5, BASEPRI
   2dd2c:	f382 8812 	msr	BASEPRI_MAX, r2
   2dd30:	f3bf 8f6f 	isb	sy
	bool ret = false;
   2dd34:	4699      	mov	r9, r3
   2dd36:	e004      	b.n	2dd42 <z_sched_wake+0x2a>
	__asm__ volatile(
   2dd38:	f385 8811 	msr	BASEPRI, r5
   2dd3c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2dd40:	2301      	movs	r3, #1
   2dd42:	b9a3      	cbnz	r3, 2dd6e <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   2dd44:	4630      	mov	r0, r6
   2dd46:	f7ff fef5 	bl	2db34 <z_priq_dumb_best>
		if (thread != NULL) {
   2dd4a:	4604      	mov	r4, r0
   2dd4c:	2800      	cmp	r0, #0
   2dd4e:	d0f3      	beq.n	2dd38 <z_sched_wake+0x20>
   2dd50:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   2dd54:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   2dd56:	f7ff fec4 	bl	2dae2 <unpend_thread_no_timeout>
   2dd5a:	f104 0018 	add.w	r0, r4, #24
   2dd5e:	f000 f820 	bl	2dda2 <z_abort_timeout>
			ready_thread(thread);
   2dd62:	4620      	mov	r0, r4
   2dd64:	f7f4 fd94 	bl	22890 <ready_thread>
			ret = true;
   2dd68:	f04f 0901 	mov.w	r9, #1
   2dd6c:	e7e4      	b.n	2dd38 <z_sched_wake+0x20>
}
   2dd6e:	4648      	mov	r0, r9
   2dd70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002dd74 <remove_timeout>:
{
   2dd74:	b510      	push	{r4, lr}
   2dd76:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2dd78:	f7f5 f842 	bl	22e00 <next>
   2dd7c:	b148      	cbz	r0, 2dd92 <remove_timeout+0x1e>
   2dd7e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2dd80:	6903      	ldr	r3, [r0, #16]
   2dd82:	6941      	ldr	r1, [r0, #20]
   2dd84:	6920      	ldr	r0, [r4, #16]
   2dd86:	181b      	adds	r3, r3, r0
   2dd88:	6960      	ldr	r0, [r4, #20]
   2dd8a:	eb41 0100 	adc.w	r1, r1, r0
   2dd8e:	6113      	str	r3, [r2, #16]
   2dd90:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2dd92:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2dd94:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   2dd96:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2dd98:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2dd9a:	2300      	movs	r3, #0
   2dd9c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2dd9e:	6063      	str	r3, [r4, #4]
}
   2dda0:	bd10      	pop	{r4, pc}

0002dda2 <z_abort_timeout>:
{
   2dda2:	b570      	push	{r4, r5, r6, lr}
   2dda4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   2dda6:	2300      	movs	r3, #0
	__asm__ volatile(
   2dda8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ddac:	f3ef 8611 	mrs	r6, BASEPRI
   2ddb0:	f382 8812 	msr	BASEPRI_MAX, r2
   2ddb4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   2ddb8:	f06f 0015 	mvn.w	r0, #21
   2ddbc:	e004      	b.n	2ddc8 <z_abort_timeout+0x26>
	__asm__ volatile(
   2ddbe:	f386 8811 	msr	BASEPRI, r6
   2ddc2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2ddc6:	2301      	movs	r3, #1
   2ddc8:	461d      	mov	r5, r3
   2ddca:	b93b      	cbnz	r3, 2dddc <z_abort_timeout+0x3a>
	return node->next != NULL;
   2ddcc:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   2ddce:	2b00      	cmp	r3, #0
   2ddd0:	d0f5      	beq.n	2ddbe <z_abort_timeout+0x1c>
			remove_timeout(to);
   2ddd2:	4620      	mov	r0, r4
   2ddd4:	f7ff ffce 	bl	2dd74 <remove_timeout>
			ret = 0;
   2ddd8:	4628      	mov	r0, r5
   2ddda:	e7f0      	b.n	2ddbe <z_abort_timeout+0x1c>
}
   2dddc:	bd70      	pop	{r4, r5, r6, pc}

0002ddde <z_get_next_timeout_expiry>:
{
   2ddde:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   2dde0:	2300      	movs	r3, #0
	__asm__ volatile(
   2dde2:	f04f 0240 	mov.w	r2, #64	; 0x40
   2dde6:	f3ef 8411 	mrs	r4, BASEPRI
   2ddea:	f382 8812 	msr	BASEPRI_MAX, r2
   2ddee:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2ddf2:	f04f 30ff 	mov.w	r0, #4294967295
   2ddf6:	e006      	b.n	2de06 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   2ddf8:	f7f5 f81a 	bl	22e30 <next_timeout>
	__asm__ volatile(
   2ddfc:	f384 8811 	msr	BASEPRI, r4
   2de00:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2de04:	2301      	movs	r3, #1
   2de06:	2b00      	cmp	r3, #0
   2de08:	d0f6      	beq.n	2ddf8 <z_get_next_timeout_expiry+0x1a>
}
   2de0a:	bd10      	pop	{r4, pc}

0002de0c <z_set_timeout_expiry>:
{
   2de0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de0e:	4606      	mov	r6, r0
   2de10:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   2de12:	2300      	movs	r3, #0
	__asm__ volatile(
   2de14:	f04f 0240 	mov.w	r2, #64	; 0x40
   2de18:	f3ef 8511 	mrs	r5, BASEPRI
   2de1c:	f382 8812 	msr	BASEPRI_MAX, r2
   2de20:	f3bf 8f6f 	isb	sy
   2de24:	e00a      	b.n	2de3c <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   2de26:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   2de28:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2de2c:	2801      	cmp	r0, #1
   2de2e:	dd00      	ble.n	2de32 <z_set_timeout_expiry+0x26>
   2de30:	b97c      	cbnz	r4, 2de52 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   2de32:	f385 8811 	msr	BASEPRI, r5
   2de36:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2de3a:	2301      	movs	r3, #1
   2de3c:	461c      	mov	r4, r3
   2de3e:	b97b      	cbnz	r3, 2de60 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   2de40:	f7f4 fff6 	bl	22e30 <next_timeout>
			      || (ticks <= next_to);
   2de44:	f1b0 3fff 	cmp.w	r0, #4294967295
   2de48:	d0ed      	beq.n	2de26 <z_set_timeout_expiry+0x1a>
   2de4a:	42b0      	cmp	r0, r6
   2de4c:	dbec      	blt.n	2de28 <z_set_timeout_expiry+0x1c>
   2de4e:	2401      	movs	r4, #1
   2de50:	e7ea      	b.n	2de28 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2de52:	4639      	mov	r1, r7
   2de54:	42b0      	cmp	r0, r6
   2de56:	bfa8      	it	ge
   2de58:	4630      	movge	r0, r6
   2de5a:	f7f1 f9f5 	bl	1f248 <sys_clock_set_timeout>
   2de5e:	e7e8      	b.n	2de32 <z_set_timeout_expiry+0x26>
}
   2de60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002de62 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2de62:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2de64:	f7f5 f8f6 	bl	23054 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2de68:	bd08      	pop	{r3, pc}

0002de6a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   2de6a:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   2de6c:	f7f5 f8f2 	bl	23054 <sys_clock_tick_get>
}
   2de70:	bd08      	pop	{r3, pc}

0002de72 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2de72:	b900      	cbnz	r0, 2de76 <z_impl_k_busy_wait+0x4>
   2de74:	4770      	bx	lr
{
   2de76:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2de78:	f7e8 fe12 	bl	16aa0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2de7c:	bd08      	pop	{r3, pc}

0002de7e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2de7e:	b538      	push	{r3, r4, r5, lr}
   2de80:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2de82:	f1b1 3fff 	cmp.w	r1, #4294967295
   2de86:	bf08      	it	eq
   2de88:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2de8c:	d020      	beq.n	2ded0 <sys_clock_timeout_end_calc+0x52>
   2de8e:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2de90:	ea51 0300 	orrs.w	r3, r1, r0
   2de94:	d009      	beq.n	2deaa <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2de96:	f06f 0301 	mvn.w	r3, #1
   2de9a:	1a18      	subs	r0, r3, r0
   2de9c:	f04f 33ff 	mov.w	r3, #4294967295
   2dea0:	eb63 0101 	sbc.w	r1, r3, r1
   2dea4:	2900      	cmp	r1, #0
   2dea6:	db03      	blt.n	2deb0 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2dea8:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2deaa:	f7f5 f8d3 	bl	23054 <sys_clock_tick_get>
   2deae:	e7fb      	b.n	2dea8 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   2deb0:	f7f5 f8d0 	bl	23054 <sys_clock_tick_get>
   2deb4:	4603      	mov	r3, r0
   2deb6:	462a      	mov	r2, r5
   2deb8:	46a4      	mov	ip, r4
   2deba:	2d01      	cmp	r5, #1
   2debc:	f174 0400 	sbcs.w	r4, r4, #0
   2dec0:	da02      	bge.n	2dec8 <sys_clock_timeout_end_calc+0x4a>
   2dec2:	2201      	movs	r2, #1
   2dec4:	f04f 0c00 	mov.w	ip, #0
   2dec8:	1898      	adds	r0, r3, r2
   2deca:	eb41 010c 	adc.w	r1, r1, ip
   2dece:	e7eb      	b.n	2dea8 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   2ded0:	f04f 30ff 	mov.w	r0, #4294967295
   2ded4:	4601      	mov	r1, r0
   2ded6:	e7e7      	b.n	2dea8 <sys_clock_timeout_end_calc+0x2a>

0002ded8 <z_reschedule_unlocked>:
{
   2ded8:	b508      	push	{r3, lr}
	__asm__ volatile(
   2deda:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dede:	f3ef 8011 	mrs	r0, BASEPRI
   2dee2:	f383 8812 	msr	BASEPRI_MAX, r3
   2dee6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2deea:	f7ff fdd8 	bl	2da9e <z_reschedule_irqlock>
}
   2deee:	bd08      	pop	{r3, pc}

0002def0 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   2def0:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2def2:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   2def4:	2300      	movs	r3, #0
   2def6:	6303      	str	r3, [r0, #48]	; 0x30
   2def8:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2defc:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2defe:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2df00:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2df02:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   2df04:	6343      	str	r3, [r0, #52]	; 0x34
}
   2df06:	4770      	bx	lr

0002df08 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2df08:	b510      	push	{r4, lr}
   2df0a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2df0c:	f7ff ff49 	bl	2dda2 <z_abort_timeout>

	if (inactive) {
   2df10:	b960      	cbnz	r0, 2df2c <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   2df12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2df14:	b10b      	cbz	r3, 2df1a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2df16:	4620      	mov	r0, r4
   2df18:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2df1a:	f104 0018 	add.w	r0, r4, #24
   2df1e:	f7ff fea7 	bl	2dc70 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2df22:	b118      	cbz	r0, 2df2c <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   2df24:	f7ff fe0d 	bl	2db42 <z_ready_thread>
			z_reschedule_unlocked();
   2df28:	f7ff ffd6 	bl	2ded8 <z_reschedule_unlocked>
		}
	}
}
   2df2c:	bd10      	pop	{r4, pc}

0002df2e <is_condition_met>:
	switch (event->type) {
   2df2e:	7b43      	ldrb	r3, [r0, #13]
   2df30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2df34:	3b01      	subs	r3, #1
   2df36:	2b07      	cmp	r3, #7
   2df38:	d826      	bhi.n	2df88 <is_condition_met+0x5a>
   2df3a:	e8df f003 	tbb	[pc, r3]
   2df3e:	0414      	.short	0x0414
   2df40:	25250d25 	.word	0x25250d25
   2df44:	1c25      	.short	0x1c25
		if (k_sem_count_get(event->sem) > 0U) {
   2df46:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   2df48:	689b      	ldr	r3, [r3, #8]
   2df4a:	b90b      	cbnz	r3, 2df50 <is_condition_met+0x22>
	return false;
   2df4c:	2000      	movs	r0, #0
   2df4e:	4770      	bx	lr
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2df50:	2302      	movs	r3, #2
   2df52:	600b      	str	r3, [r1, #0]
			return true;
   2df54:	2001      	movs	r0, #1
   2df56:	4770      	bx	lr
		if (!k_queue_is_empty(event->queue)) {
   2df58:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2df5a:	681b      	ldr	r3, [r3, #0]
   2df5c:	b1b3      	cbz	r3, 2df8c <is_condition_met+0x5e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2df5e:	2304      	movs	r3, #4
   2df60:	600b      	str	r3, [r1, #0]
			return true;
   2df62:	2001      	movs	r0, #1
   2df64:	4770      	bx	lr
		if (event->signal->signaled != 0U) {
   2df66:	6903      	ldr	r3, [r0, #16]
   2df68:	689b      	ldr	r3, [r3, #8]
   2df6a:	b90b      	cbnz	r3, 2df70 <is_condition_met+0x42>
	return false;
   2df6c:	2000      	movs	r0, #0
   2df6e:	4770      	bx	lr
			*state = K_POLL_STATE_SIGNALED;
   2df70:	2001      	movs	r0, #1
   2df72:	6008      	str	r0, [r1, #0]
			return true;
   2df74:	4770      	bx	lr
		if (event->msgq->used_msgs > 0) {
   2df76:	6903      	ldr	r3, [r0, #16]
   2df78:	6a1b      	ldr	r3, [r3, #32]
   2df7a:	b90b      	cbnz	r3, 2df80 <is_condition_met+0x52>
	return false;
   2df7c:	2000      	movs	r0, #0
}
   2df7e:	4770      	bx	lr
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2df80:	2310      	movs	r3, #16
   2df82:	600b      	str	r3, [r1, #0]
			return true;
   2df84:	2001      	movs	r0, #1
   2df86:	4770      	bx	lr
	switch (event->type) {
   2df88:	2000      	movs	r0, #0
   2df8a:	4770      	bx	lr
	return false;
   2df8c:	2000      	movs	r0, #0
   2df8e:	4770      	bx	lr

0002df90 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2df90:	b108      	cbz	r0, 2df96 <poller_thread+0x6>
   2df92:	3860      	subs	r0, #96	; 0x60
   2df94:	4770      	bx	lr
}
   2df96:	4770      	bx	lr

0002df98 <clear_event_registration>:
	event->poller = NULL;
   2df98:	2300      	movs	r3, #0
   2df9a:	6083      	str	r3, [r0, #8]
	switch (event->type) {
   2df9c:	7b43      	ldrb	r3, [r0, #13]
   2df9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2dfa2:	2b08      	cmp	r3, #8
   2dfa4:	d80e      	bhi.n	2dfc4 <clear_event_registration+0x2c>
   2dfa6:	f44f 728b 	mov.w	r2, #278	; 0x116
   2dfaa:	fa22 f303 	lsr.w	r3, r2, r3
   2dfae:	f013 0f01 	tst.w	r3, #1
   2dfb2:	d007      	beq.n	2dfc4 <clear_event_registration+0x2c>
	return node->next != NULL;
   2dfb4:	6803      	ldr	r3, [r0, #0]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2dfb6:	b12b      	cbz	r3, 2dfc4 <clear_event_registration+0x2c>
	sys_dnode_t *const prev = node->prev;
   2dfb8:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   2dfba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2dfbc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2dfbe:	2300      	movs	r3, #0
   2dfc0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2dfc2:	6043      	str	r3, [r0, #4]
}
   2dfc4:	4770      	bx	lr

0002dfc6 <clear_event_registrations>:
{
   2dfc6:	b570      	push	{r4, r5, r6, lr}
   2dfc8:	4606      	mov	r6, r0
   2dfca:	4614      	mov	r4, r2
	while (num_events--) {
   2dfcc:	e012      	b.n	2dff4 <clear_event_registrations+0x2e>
		clear_event_registration(&events[num_events]);
   2dfce:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   2dfd2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   2dfd6:	f7ff ffdf 	bl	2df98 <clear_event_registration>
	__asm__ volatile(
   2dfda:	f384 8811 	msr	BASEPRI, r4
   2dfde:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2dfe2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dfe6:	f3ef 8411 	mrs	r4, BASEPRI
   2dfea:	f383 8812 	msr	BASEPRI_MAX, r3
   2dfee:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   2dff2:	4629      	mov	r1, r5
   2dff4:	1e4d      	subs	r5, r1, #1
   2dff6:	2900      	cmp	r1, #0
   2dff8:	d1e9      	bne.n	2dfce <clear_event_registrations+0x8>
}
   2dffa:	bd70      	pop	{r4, r5, r6, pc}

0002dffc <add_event>:
{
   2dffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e000:	4605      	mov	r5, r0
   2e002:	460e      	mov	r6, r1
	return list->head == list;
   2e004:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2e006:	4298      	cmp	r0, r3
   2e008:	d015      	beq.n	2e036 <add_event+0x3a>
   2e00a:	4614      	mov	r4, r2
   2e00c:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   2e00e:	b193      	cbz	r3, 2e036 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2e010:	6898      	ldr	r0, [r3, #8]
   2e012:	f7ff ffbd 	bl	2df90 <poller_thread>
   2e016:	4680      	mov	r8, r0
   2e018:	4620      	mov	r0, r4
   2e01a:	f7ff ffb9 	bl	2df90 <poller_thread>
   2e01e:	4607      	mov	r7, r0
   2e020:	4601      	mov	r1, r0
   2e022:	4640      	mov	r0, r8
   2e024:	f7ff fd1a 	bl	2da5c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2e028:	2800      	cmp	r0, #0
   2e02a:	dc04      	bgt.n	2e036 <add_event+0x3a>
	return list->head == list;
   2e02c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e02e:	42a5      	cmp	r5, r4
   2e030:	d10f      	bne.n	2e052 <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2e032:	2400      	movs	r4, #0
   2e034:	e00d      	b.n	2e052 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2e036:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2e038:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2e03a:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2e03c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2e03e:	606e      	str	r6, [r5, #4]
}
   2e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   2e044:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2e046:	6073      	str	r3, [r6, #4]
	node->next = successor;
   2e048:	6034      	str	r4, [r6, #0]
	prev->next = node;
   2e04a:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   2e04c:	6066      	str	r6, [r4, #4]
			return;
   2e04e:	e7f7      	b.n	2e040 <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2e050:	2400      	movs	r4, #0
   2e052:	b19c      	cbz	r4, 2e07c <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   2e054:	68a0      	ldr	r0, [r4, #8]
   2e056:	f7ff ff9b 	bl	2df90 <poller_thread>
   2e05a:	4601      	mov	r1, r0
   2e05c:	4638      	mov	r0, r7
   2e05e:	f7ff fcfd 	bl	2da5c <z_sched_prio_cmp>
   2e062:	2800      	cmp	r0, #0
   2e064:	dcee      	bgt.n	2e044 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2e066:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   2e068:	686b      	ldr	r3, [r5, #4]
   2e06a:	429c      	cmp	r4, r3
   2e06c:	d0f0      	beq.n	2e050 <add_event+0x54>
   2e06e:	6824      	ldr	r4, [r4, #0]
   2e070:	2c00      	cmp	r4, #0
   2e072:	d0ee      	beq.n	2e052 <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2e074:	2a00      	cmp	r2, #0
   2e076:	d1ec      	bne.n	2e052 <add_event+0x56>
   2e078:	4614      	mov	r4, r2
   2e07a:	e7ea      	b.n	2e052 <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   2e07c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2e07e:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   2e080:	6073      	str	r3, [r6, #4]
	tail->next = node;
   2e082:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2e084:	606e      	str	r6, [r5, #4]
}
   2e086:	e7db      	b.n	2e040 <add_event+0x44>

0002e088 <register_event>:
{
   2e088:	b538      	push	{r3, r4, r5, lr}
   2e08a:	4604      	mov	r4, r0
   2e08c:	460d      	mov	r5, r1
	switch (event->type) {
   2e08e:	7b43      	ldrb	r3, [r0, #13]
   2e090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2e094:	3b01      	subs	r3, #1
   2e096:	2b07      	cmp	r3, #7
   2e098:	d80b      	bhi.n	2e0b2 <register_event+0x2a>
   2e09a:	e8df f003 	tbb	[pc, r3]
   2e09e:	0413      	.short	0x0413
   2e0a0:	0a0a0c0a 	.word	0x0a0a0c0a
   2e0a4:	190a      	.short	0x190a
		add_event(&event->sem->poll_events, event, poller);
   2e0a6:	6900      	ldr	r0, [r0, #16]
   2e0a8:	460a      	mov	r2, r1
   2e0aa:	4621      	mov	r1, r4
   2e0ac:	3010      	adds	r0, #16
   2e0ae:	f7ff ffa5 	bl	2dffc <add_event>
	event->poller = poller;
   2e0b2:	60a5      	str	r5, [r4, #8]
}
   2e0b4:	bd38      	pop	{r3, r4, r5, pc}
		add_event(&event->queue->poll_events, event, poller);
   2e0b6:	6900      	ldr	r0, [r0, #16]
   2e0b8:	460a      	mov	r2, r1
   2e0ba:	4621      	mov	r1, r4
   2e0bc:	3010      	adds	r0, #16
   2e0be:	f7ff ff9d 	bl	2dffc <add_event>
		break;
   2e0c2:	e7f6      	b.n	2e0b2 <register_event+0x2a>
		add_event(&event->signal->poll_events, event, poller);
   2e0c4:	460a      	mov	r2, r1
   2e0c6:	4601      	mov	r1, r0
   2e0c8:	6900      	ldr	r0, [r0, #16]
   2e0ca:	f7ff ff97 	bl	2dffc <add_event>
		break;
   2e0ce:	e7f0      	b.n	2e0b2 <register_event+0x2a>
		add_event(&event->msgq->poll_events, event, poller);
   2e0d0:	6900      	ldr	r0, [r0, #16]
   2e0d2:	460a      	mov	r2, r1
   2e0d4:	4621      	mov	r1, r4
   2e0d6:	3024      	adds	r0, #36	; 0x24
   2e0d8:	f7ff ff90 	bl	2dffc <add_event>
		break;
   2e0dc:	e7e9      	b.n	2e0b2 <register_event+0x2a>

0002e0de <register_events>:
{
   2e0de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e0e2:	b083      	sub	sp, #12
   2e0e4:	4680      	mov	r8, r0
   2e0e6:	460f      	mov	r7, r1
   2e0e8:	4691      	mov	r9, r2
   2e0ea:	469a      	mov	sl, r3
	for (int ii = 0; ii < num_events; ii++) {
   2e0ec:	2500      	movs	r5, #0
	int events_registered = 0;
   2e0ee:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   2e0f0:	e00a      	b.n	2e108 <register_events+0x2a>
		} else if (!just_check && poller->is_polling) {
   2e0f2:	f1ba 0f00 	cmp.w	sl, #0
   2e0f6:	d102      	bne.n	2e0fe <register_events+0x20>
   2e0f8:	f899 3000 	ldrb.w	r3, [r9]
   2e0fc:	bb2b      	cbnz	r3, 2e14a <register_events+0x6c>
	__asm__ volatile(
   2e0fe:	f386 8811 	msr	BASEPRI, r6
   2e102:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2e106:	3501      	adds	r5, #1
   2e108:	42bd      	cmp	r5, r7
   2e10a:	da25      	bge.n	2e158 <register_events+0x7a>
	__asm__ volatile(
   2e10c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e110:	f3ef 8611 	mrs	r6, BASEPRI
   2e114:	f383 8812 	msr	BASEPRI_MAX, r3
   2e118:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   2e11c:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   2e120:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   2e124:	a901      	add	r1, sp, #4
   2e126:	4620      	mov	r0, r4
   2e128:	f7ff ff01 	bl	2df2e <is_condition_met>
   2e12c:	2800      	cmp	r0, #0
   2e12e:	d0e0      	beq.n	2e0f2 <register_events+0x14>
	event->poller = NULL;
   2e130:	2100      	movs	r1, #0
   2e132:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2e134:	68e3      	ldr	r3, [r4, #12]
   2e136:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2e13a:	9801      	ldr	r0, [sp, #4]
   2e13c:	4302      	orrs	r2, r0
   2e13e:	f362 3394 	bfi	r3, r2, #14, #7
   2e142:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2e144:	f889 1000 	strb.w	r1, [r9]
   2e148:	e7d9      	b.n	2e0fe <register_events+0x20>
			register_event(&events[ii], poller);
   2e14a:	4649      	mov	r1, r9
   2e14c:	4620      	mov	r0, r4
   2e14e:	f7ff ff9b 	bl	2e088 <register_event>
			events_registered += 1;
   2e152:	f10b 0b01 	add.w	fp, fp, #1
   2e156:	e7d2      	b.n	2e0fe <register_events+0x20>
}
   2e158:	4658      	mov	r0, fp
   2e15a:	b003      	add	sp, #12
   2e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e160 <signal_poller>:
{
   2e160:	b538      	push	{r3, r4, r5, lr}
   2e162:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   2e164:	6880      	ldr	r0, [r0, #8]
   2e166:	f7ff ff13 	bl	2df90 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2e16a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   2e16c:	f013 0f02 	tst.w	r3, #2
   2e170:	d025      	beq.n	2e1be <signal_poller+0x5e>
   2e172:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   2e174:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2e176:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   2e178:	f1b3 3fff 	cmp.w	r3, #4294967295
   2e17c:	bf08      	it	eq
   2e17e:	f112 0f02 	cmneq.w	r2, #2
   2e182:	d01e      	beq.n	2e1c2 <signal_poller+0x62>
	z_unpend_thread(thread);
   2e184:	f7ff fcbb 	bl	2dafe <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2e188:	2d08      	cmp	r5, #8
   2e18a:	d00a      	beq.n	2e1a2 <signal_poller+0x42>
   2e18c:	2300      	movs	r3, #0
   2e18e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   2e192:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2e194:	f013 0f1f 	tst.w	r3, #31
   2e198:	d108      	bne.n	2e1ac <signal_poller+0x4c>
	return node->next != NULL;
   2e19a:	69a3      	ldr	r3, [r4, #24]
   2e19c:	b123      	cbz	r3, 2e1a8 <signal_poller+0x48>
   2e19e:	2300      	movs	r3, #0
   2e1a0:	e005      	b.n	2e1ae <signal_poller+0x4e>
   2e1a2:	f06f 0303 	mvn.w	r3, #3
   2e1a6:	e7f2      	b.n	2e18e <signal_poller+0x2e>
   2e1a8:	2301      	movs	r3, #1
   2e1aa:	e000      	b.n	2e1ae <signal_poller+0x4e>
   2e1ac:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   2e1ae:	b90b      	cbnz	r3, 2e1b4 <signal_poller+0x54>
		return 0;
   2e1b0:	2000      	movs	r0, #0
   2e1b2:	e005      	b.n	2e1c0 <signal_poller+0x60>
	z_ready_thread(thread);
   2e1b4:	4620      	mov	r0, r4
   2e1b6:	f7ff fcc4 	bl	2db42 <z_ready_thread>
	return 0;
   2e1ba:	2000      	movs	r0, #0
   2e1bc:	e000      	b.n	2e1c0 <signal_poller+0x60>
		return 0;
   2e1be:	2000      	movs	r0, #0
}
   2e1c0:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2e1c2:	f06f 000a 	mvn.w	r0, #10
   2e1c6:	e7fb      	b.n	2e1c0 <signal_poller+0x60>

0002e1c8 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2e1c8:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2e1ca:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2e1cc:	7823      	ldrb	r3, [r4, #0]
   2e1ce:	b173      	cbz	r3, 2e1ee <signal_triggered_work+0x26>
   2e1d0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2e1d4:	b15d      	cbz	r5, 2e1ee <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2e1d6:	f1a4 0614 	sub.w	r6, r4, #20
   2e1da:	f104 0014 	add.w	r0, r4, #20
   2e1de:	f7ff fde0 	bl	2dda2 <z_abort_timeout>
		twork->poll_result = 0;
   2e1e2:	2300      	movs	r3, #0
   2e1e4:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2e1e6:	4631      	mov	r1, r6
   2e1e8:	4628      	mov	r0, r5
   2e1ea:	f7ff fb7f 	bl	2d8ec <z_work_submit_to_queue>
	}

	return 0;
}
   2e1ee:	2000      	movs	r0, #0
   2e1f0:	bd70      	pop	{r4, r5, r6, pc}

0002e1f2 <signal_poll_event>:
{
   2e1f2:	b570      	push	{r4, r5, r6, lr}
   2e1f4:	4604      	mov	r4, r0
   2e1f6:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2e1f8:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   2e1fa:	b1d6      	cbz	r6, 2e232 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   2e1fc:	7873      	ldrb	r3, [r6, #1]
   2e1fe:	2b01      	cmp	r3, #1
   2e200:	d00d      	beq.n	2e21e <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2e202:	2b02      	cmp	r3, #2
   2e204:	d012      	beq.n	2e22c <signal_poll_event+0x3a>
		poller->is_polling = false;
   2e206:	2000      	movs	r0, #0
   2e208:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   2e20a:	2300      	movs	r3, #0
   2e20c:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2e20e:	68e3      	ldr	r3, [r4, #12]
   2e210:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2e214:	432a      	orrs	r2, r5
   2e216:	f362 3394 	bfi	r3, r2, #14, #7
   2e21a:	60e3      	str	r3, [r4, #12]
}
   2e21c:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2e21e:	f7ff ff9f 	bl	2e160 <signal_poller>
		poller->is_polling = false;
   2e222:	2300      	movs	r3, #0
   2e224:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2e226:	4298      	cmp	r0, r3
   2e228:	daef      	bge.n	2e20a <signal_poll_event+0x18>
   2e22a:	e7f7      	b.n	2e21c <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   2e22c:	f7ff ffcc 	bl	2e1c8 <signal_triggered_work>
   2e230:	e7f7      	b.n	2e222 <signal_poll_event+0x30>
	int retcode = 0;
   2e232:	2000      	movs	r0, #0
   2e234:	e7e9      	b.n	2e20a <signal_poll_event+0x18>

0002e236 <k_poll_event_init>:
{
   2e236:	b410      	push	{r4}
	event->poller = NULL;
   2e238:	2400      	movs	r4, #0
   2e23a:	6084      	str	r4, [r0, #8]
	event->type = type;
   2e23c:	f890 c00d 	ldrb.w	ip, [r0, #13]
   2e240:	f361 0c05 	bfi	ip, r1, #0, #6
   2e244:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2e248:	68c1      	ldr	r1, [r0, #12]
   2e24a:	f364 3194 	bfi	r1, r4, #14, #7
   2e24e:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2e250:	7b81      	ldrb	r1, [r0, #14]
   2e252:	f362 1145 	bfi	r1, r2, #5, #1
   2e256:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   2e258:	89c2      	ldrh	r2, [r0, #14]
   2e25a:	f364 128f 	bfi	r2, r4, #6, #10
   2e25e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   2e260:	6103      	str	r3, [r0, #16]
}
   2e262:	f85d 4b04 	ldr.w	r4, [sp], #4
   2e266:	4770      	bx	lr

0002e268 <z_handle_obj_poll_events>:
{
   2e268:	b508      	push	{r3, lr}
   2e26a:	4603      	mov	r3, r0
	return list->head == list;
   2e26c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2e26e:	4283      	cmp	r3, r0
   2e270:	d008      	beq.n	2e284 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   2e272:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2e274:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2e276:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2e278:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e27a:	2300      	movs	r3, #0
   2e27c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2e27e:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   2e280:	f7ff ffb7 	bl	2e1f2 <signal_poll_event>
}
   2e284:	bd08      	pop	{r3, pc}

0002e286 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   2e286:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2e288:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   2e28a:	2300      	movs	r3, #0
   2e28c:	6083      	str	r3, [r0, #8]
}
   2e28e:	4770      	bx	lr

0002e290 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2e290:	2300      	movs	r3, #0
   2e292:	6083      	str	r3, [r0, #8]
}
   2e294:	4770      	bx	lr

0002e296 <k_free>:
	if (ptr != NULL) {
   2e296:	b130      	cbz	r0, 2e2a6 <k_free+0x10>
{
   2e298:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   2e29a:	1f01      	subs	r1, r0, #4
   2e29c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2e2a0:	f7ff f89d 	bl	2d3de <k_heap_free>
}
   2e2a4:	bd08      	pop	{r3, pc}
   2e2a6:	4770      	bx	lr

0002e2a8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2e2a8:	4770      	bx	lr

0002e2aa <memcmp>:
   2e2aa:	b510      	push	{r4, lr}
   2e2ac:	3901      	subs	r1, #1
   2e2ae:	4402      	add	r2, r0
   2e2b0:	4290      	cmp	r0, r2
   2e2b2:	d101      	bne.n	2e2b8 <memcmp+0xe>
   2e2b4:	2000      	movs	r0, #0
   2e2b6:	e005      	b.n	2e2c4 <memcmp+0x1a>
   2e2b8:	7803      	ldrb	r3, [r0, #0]
   2e2ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2e2be:	42a3      	cmp	r3, r4
   2e2c0:	d001      	beq.n	2e2c6 <memcmp+0x1c>
   2e2c2:	1b18      	subs	r0, r3, r4
   2e2c4:	bd10      	pop	{r4, pc}
   2e2c6:	3001      	adds	r0, #1
   2e2c8:	e7f2      	b.n	2e2b0 <memcmp+0x6>

0002e2ca <memcpy>:
   2e2ca:	440a      	add	r2, r1
   2e2cc:	4291      	cmp	r1, r2
   2e2ce:	f100 33ff 	add.w	r3, r0, #4294967295
   2e2d2:	d100      	bne.n	2e2d6 <memcpy+0xc>
   2e2d4:	4770      	bx	lr
   2e2d6:	b510      	push	{r4, lr}
   2e2d8:	f811 4b01 	ldrb.w	r4, [r1], #1
   2e2dc:	f803 4f01 	strb.w	r4, [r3, #1]!
   2e2e0:	4291      	cmp	r1, r2
   2e2e2:	d1f9      	bne.n	2e2d8 <memcpy+0xe>
   2e2e4:	bd10      	pop	{r4, pc}

0002e2e6 <memset>:
   2e2e6:	4402      	add	r2, r0
   2e2e8:	4603      	mov	r3, r0
   2e2ea:	4293      	cmp	r3, r2
   2e2ec:	d100      	bne.n	2e2f0 <memset+0xa>
   2e2ee:	4770      	bx	lr
   2e2f0:	f803 1b01 	strb.w	r1, [r3], #1
   2e2f4:	e7f9      	b.n	2e2ea <memset+0x4>

0002e2f6 <__cvt>:
   2e2f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e2fa:	b085      	sub	sp, #20
   2e2fc:	ec57 6b10 	vmov	r6, r7, d0
   2e300:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   2e304:	2f00      	cmp	r7, #0
   2e306:	460c      	mov	r4, r1
   2e308:	4690      	mov	r8, r2
   2e30a:	4619      	mov	r1, r3
   2e30c:	bfb8      	it	lt
   2e30e:	4632      	movlt	r2, r6
   2e310:	463b      	mov	r3, r7
   2e312:	f02b 0a20 	bic.w	sl, fp, #32
   2e316:	bfbb      	ittet	lt
   2e318:	f107 4300 	addlt.w	r3, r7, #2147483648	; 0x80000000
   2e31c:	461f      	movlt	r7, r3
   2e31e:	2300      	movge	r3, #0
   2e320:	232d      	movlt	r3, #45	; 0x2d
   2e322:	bfb8      	it	lt
   2e324:	4616      	movlt	r6, r2
   2e326:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2e32a:	700b      	strb	r3, [r1, #0]
   2e32c:	d005      	beq.n	2e33a <__cvt+0x44>
   2e32e:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   2e332:	d100      	bne.n	2e336 <__cvt+0x40>
   2e334:	3401      	adds	r4, #1
   2e336:	2102      	movs	r1, #2
   2e338:	e000      	b.n	2e33c <__cvt+0x46>
   2e33a:	2103      	movs	r1, #3
   2e33c:	ab03      	add	r3, sp, #12
   2e33e:	9301      	str	r3, [sp, #4]
   2e340:	ab02      	add	r3, sp, #8
   2e342:	9300      	str	r3, [sp, #0]
   2e344:	ec47 6b10 	vmov	d0, r6, r7
   2e348:	464b      	mov	r3, r9
   2e34a:	4622      	mov	r2, r4
   2e34c:	f7e2 ff00 	bl	11150 <_dtoa_r>
   2e350:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   2e354:	4605      	mov	r5, r0
   2e356:	d119      	bne.n	2e38c <__cvt+0x96>
   2e358:	f018 0f01 	tst.w	r8, #1
   2e35c:	d00e      	beq.n	2e37c <__cvt+0x86>
   2e35e:	eb05 0804 	add.w	r8, r5, r4
   2e362:	2200      	movs	r2, #0
   2e364:	2300      	movs	r3, #0
   2e366:	4630      	mov	r0, r6
   2e368:	4639      	mov	r1, r7
   2e36a:	f7d2 fb57 	bl	a1c <__aeabi_dcmpeq>
   2e36e:	b108      	cbz	r0, 2e374 <__cvt+0x7e>
   2e370:	f8cd 800c 	str.w	r8, [sp, #12]
   2e374:	2230      	movs	r2, #48	; 0x30
   2e376:	9b03      	ldr	r3, [sp, #12]
   2e378:	4543      	cmp	r3, r8
   2e37a:	d321      	bcc.n	2e3c0 <__cvt+0xca>
   2e37c:	9b03      	ldr	r3, [sp, #12]
   2e37e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2e380:	1b5b      	subs	r3, r3, r5
   2e382:	4628      	mov	r0, r5
   2e384:	6013      	str	r3, [r2, #0]
   2e386:	b005      	add	sp, #20
   2e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e38c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   2e390:	d0e2      	beq.n	2e358 <__cvt+0x62>
   2e392:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2e396:	eb00 0804 	add.w	r8, r0, r4
   2e39a:	d1e2      	bne.n	2e362 <__cvt+0x6c>
   2e39c:	7803      	ldrb	r3, [r0, #0]
   2e39e:	2b30      	cmp	r3, #48	; 0x30
   2e3a0:	d10a      	bne.n	2e3b8 <__cvt+0xc2>
   2e3a2:	2200      	movs	r2, #0
   2e3a4:	2300      	movs	r3, #0
   2e3a6:	4630      	mov	r0, r6
   2e3a8:	4639      	mov	r1, r7
   2e3aa:	f7d2 fb37 	bl	a1c <__aeabi_dcmpeq>
   2e3ae:	b918      	cbnz	r0, 2e3b8 <__cvt+0xc2>
   2e3b0:	f1c4 0401 	rsb	r4, r4, #1
   2e3b4:	f8c9 4000 	str.w	r4, [r9]
   2e3b8:	f8d9 3000 	ldr.w	r3, [r9]
   2e3bc:	4498      	add	r8, r3
   2e3be:	e7d0      	b.n	2e362 <__cvt+0x6c>
   2e3c0:	1c59      	adds	r1, r3, #1
   2e3c2:	9103      	str	r1, [sp, #12]
   2e3c4:	701a      	strb	r2, [r3, #0]
   2e3c6:	e7d6      	b.n	2e376 <__cvt+0x80>

0002e3c8 <__exponent>:
   2e3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e3ca:	2900      	cmp	r1, #0
   2e3cc:	bfba      	itte	lt
   2e3ce:	4249      	neglt	r1, r1
   2e3d0:	232d      	movlt	r3, #45	; 0x2d
   2e3d2:	232b      	movge	r3, #43	; 0x2b
   2e3d4:	2909      	cmp	r1, #9
   2e3d6:	7002      	strb	r2, [r0, #0]
   2e3d8:	7043      	strb	r3, [r0, #1]
   2e3da:	dd29      	ble.n	2e430 <__exponent+0x68>
   2e3dc:	f10d 0307 	add.w	r3, sp, #7
   2e3e0:	461d      	mov	r5, r3
   2e3e2:	270a      	movs	r7, #10
   2e3e4:	461a      	mov	r2, r3
   2e3e6:	fbb1 f6f7 	udiv	r6, r1, r7
   2e3ea:	fb07 1416 	mls	r4, r7, r6, r1
   2e3ee:	3430      	adds	r4, #48	; 0x30
   2e3f0:	f802 4c01 	strb.w	r4, [r2, #-1]
   2e3f4:	460c      	mov	r4, r1
   2e3f6:	2c63      	cmp	r4, #99	; 0x63
   2e3f8:	f103 33ff 	add.w	r3, r3, #4294967295
   2e3fc:	4631      	mov	r1, r6
   2e3fe:	dcf1      	bgt.n	2e3e4 <__exponent+0x1c>
   2e400:	3130      	adds	r1, #48	; 0x30
   2e402:	1e94      	subs	r4, r2, #2
   2e404:	f803 1c01 	strb.w	r1, [r3, #-1]
   2e408:	1c41      	adds	r1, r0, #1
   2e40a:	4623      	mov	r3, r4
   2e40c:	42ab      	cmp	r3, r5
   2e40e:	d30a      	bcc.n	2e426 <__exponent+0x5e>
   2e410:	f10d 0309 	add.w	r3, sp, #9
   2e414:	1a9b      	subs	r3, r3, r2
   2e416:	42ac      	cmp	r4, r5
   2e418:	bf88      	it	hi
   2e41a:	2300      	movhi	r3, #0
   2e41c:	3302      	adds	r3, #2
   2e41e:	4403      	add	r3, r0
   2e420:	1a18      	subs	r0, r3, r0
   2e422:	b003      	add	sp, #12
   2e424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e426:	f813 6b01 	ldrb.w	r6, [r3], #1
   2e42a:	f801 6f01 	strb.w	r6, [r1, #1]!
   2e42e:	e7ed      	b.n	2e40c <__exponent+0x44>
   2e430:	2330      	movs	r3, #48	; 0x30
   2e432:	3130      	adds	r1, #48	; 0x30
   2e434:	7083      	strb	r3, [r0, #2]
   2e436:	70c1      	strb	r1, [r0, #3]
   2e438:	1d03      	adds	r3, r0, #4
   2e43a:	e7f1      	b.n	2e420 <__exponent+0x58>

0002e43c <_printf_common>:
   2e43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e440:	4616      	mov	r6, r2
   2e442:	4698      	mov	r8, r3
   2e444:	688a      	ldr	r2, [r1, #8]
   2e446:	690b      	ldr	r3, [r1, #16]
   2e448:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2e44c:	4293      	cmp	r3, r2
   2e44e:	bfb8      	it	lt
   2e450:	4613      	movlt	r3, r2
   2e452:	6033      	str	r3, [r6, #0]
   2e454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2e458:	4607      	mov	r7, r0
   2e45a:	460c      	mov	r4, r1
   2e45c:	b10a      	cbz	r2, 2e462 <_printf_common+0x26>
   2e45e:	3301      	adds	r3, #1
   2e460:	6033      	str	r3, [r6, #0]
   2e462:	6823      	ldr	r3, [r4, #0]
   2e464:	0699      	lsls	r1, r3, #26
   2e466:	bf42      	ittt	mi
   2e468:	6833      	ldrmi	r3, [r6, #0]
   2e46a:	3302      	addmi	r3, #2
   2e46c:	6033      	strmi	r3, [r6, #0]
   2e46e:	6825      	ldr	r5, [r4, #0]
   2e470:	f015 0506 	ands.w	r5, r5, #6
   2e474:	d106      	bne.n	2e484 <_printf_common+0x48>
   2e476:	f104 0a19 	add.w	sl, r4, #25
   2e47a:	68e3      	ldr	r3, [r4, #12]
   2e47c:	6832      	ldr	r2, [r6, #0]
   2e47e:	1a9b      	subs	r3, r3, r2
   2e480:	42ab      	cmp	r3, r5
   2e482:	dc26      	bgt.n	2e4d2 <_printf_common+0x96>
   2e484:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2e488:	6822      	ldr	r2, [r4, #0]
   2e48a:	3b00      	subs	r3, #0
   2e48c:	bf18      	it	ne
   2e48e:	2301      	movne	r3, #1
   2e490:	0692      	lsls	r2, r2, #26
   2e492:	d42b      	bmi.n	2e4ec <_printf_common+0xb0>
   2e494:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2e498:	4641      	mov	r1, r8
   2e49a:	4638      	mov	r0, r7
   2e49c:	47c8      	blx	r9
   2e49e:	3001      	adds	r0, #1
   2e4a0:	d01e      	beq.n	2e4e0 <_printf_common+0xa4>
   2e4a2:	6823      	ldr	r3, [r4, #0]
   2e4a4:	6922      	ldr	r2, [r4, #16]
   2e4a6:	f003 0306 	and.w	r3, r3, #6
   2e4aa:	2b04      	cmp	r3, #4
   2e4ac:	bf02      	ittt	eq
   2e4ae:	68e5      	ldreq	r5, [r4, #12]
   2e4b0:	6833      	ldreq	r3, [r6, #0]
   2e4b2:	1aed      	subeq	r5, r5, r3
   2e4b4:	68a3      	ldr	r3, [r4, #8]
   2e4b6:	bf0c      	ite	eq
   2e4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2e4bc:	2500      	movne	r5, #0
   2e4be:	4293      	cmp	r3, r2
   2e4c0:	bfc4      	itt	gt
   2e4c2:	1a9b      	subgt	r3, r3, r2
   2e4c4:	18ed      	addgt	r5, r5, r3
   2e4c6:	2600      	movs	r6, #0
   2e4c8:	341a      	adds	r4, #26
   2e4ca:	42b5      	cmp	r5, r6
   2e4cc:	d11a      	bne.n	2e504 <_printf_common+0xc8>
   2e4ce:	2000      	movs	r0, #0
   2e4d0:	e008      	b.n	2e4e4 <_printf_common+0xa8>
   2e4d2:	2301      	movs	r3, #1
   2e4d4:	4652      	mov	r2, sl
   2e4d6:	4641      	mov	r1, r8
   2e4d8:	4638      	mov	r0, r7
   2e4da:	47c8      	blx	r9
   2e4dc:	3001      	adds	r0, #1
   2e4de:	d103      	bne.n	2e4e8 <_printf_common+0xac>
   2e4e0:	f04f 30ff 	mov.w	r0, #4294967295
   2e4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e4e8:	3501      	adds	r5, #1
   2e4ea:	e7c6      	b.n	2e47a <_printf_common+0x3e>
   2e4ec:	18e1      	adds	r1, r4, r3
   2e4ee:	1c5a      	adds	r2, r3, #1
   2e4f0:	2030      	movs	r0, #48	; 0x30
   2e4f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2e4f6:	4422      	add	r2, r4
   2e4f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2e4fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2e500:	3302      	adds	r3, #2
   2e502:	e7c7      	b.n	2e494 <_printf_common+0x58>
   2e504:	2301      	movs	r3, #1
   2e506:	4622      	mov	r2, r4
   2e508:	4641      	mov	r1, r8
   2e50a:	4638      	mov	r0, r7
   2e50c:	47c8      	blx	r9
   2e50e:	3001      	adds	r0, #1
   2e510:	d0e6      	beq.n	2e4e0 <_printf_common+0xa4>
   2e512:	3601      	adds	r6, #1
   2e514:	e7d9      	b.n	2e4ca <_printf_common+0x8e>

0002e516 <strncmp>:
   2e516:	b510      	push	{r4, lr}
   2e518:	b16a      	cbz	r2, 2e536 <strncmp+0x20>
   2e51a:	3901      	subs	r1, #1
   2e51c:	1884      	adds	r4, r0, r2
   2e51e:	f810 2b01 	ldrb.w	r2, [r0], #1
   2e522:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2e526:	429a      	cmp	r2, r3
   2e528:	d103      	bne.n	2e532 <strncmp+0x1c>
   2e52a:	42a0      	cmp	r0, r4
   2e52c:	d001      	beq.n	2e532 <strncmp+0x1c>
   2e52e:	2a00      	cmp	r2, #0
   2e530:	d1f5      	bne.n	2e51e <strncmp+0x8>
   2e532:	1ad0      	subs	r0, r2, r3
   2e534:	bd10      	pop	{r4, pc}
   2e536:	4610      	mov	r0, r2
   2e538:	e7fc      	b.n	2e534 <strncmp+0x1e>

0002e53a <strncpy>:
   2e53a:	b510      	push	{r4, lr}
   2e53c:	3901      	subs	r1, #1
   2e53e:	4603      	mov	r3, r0
   2e540:	b132      	cbz	r2, 2e550 <strncpy+0x16>
   2e542:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2e546:	f803 4b01 	strb.w	r4, [r3], #1
   2e54a:	3a01      	subs	r2, #1
   2e54c:	2c00      	cmp	r4, #0
   2e54e:	d1f7      	bne.n	2e540 <strncpy+0x6>
   2e550:	441a      	add	r2, r3
   2e552:	2100      	movs	r1, #0
   2e554:	4293      	cmp	r3, r2
   2e556:	d100      	bne.n	2e55a <strncpy+0x20>
   2e558:	bd10      	pop	{r4, pc}
   2e55a:	f803 1b01 	strb.w	r1, [r3], #1
   2e55e:	e7f9      	b.n	2e554 <strncpy+0x1a>

0002e560 <strnlen>:
   2e560:	b510      	push	{r4, lr}
   2e562:	4602      	mov	r2, r0
   2e564:	4401      	add	r1, r0
   2e566:	428a      	cmp	r2, r1
   2e568:	4613      	mov	r3, r2
   2e56a:	d003      	beq.n	2e574 <strnlen+0x14>
   2e56c:	781c      	ldrb	r4, [r3, #0]
   2e56e:	3201      	adds	r2, #1
   2e570:	2c00      	cmp	r4, #0
   2e572:	d1f8      	bne.n	2e566 <strnlen+0x6>
   2e574:	1a18      	subs	r0, r3, r0
   2e576:	bd10      	pop	{r4, pc}

0002e578 <quorem>:
   2e578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e57c:	6903      	ldr	r3, [r0, #16]
   2e57e:	690c      	ldr	r4, [r1, #16]
   2e580:	42a3      	cmp	r3, r4
   2e582:	4607      	mov	r7, r0
   2e584:	db7e      	blt.n	2e684 <quorem+0x10c>
   2e586:	3c01      	subs	r4, #1
   2e588:	f101 0814 	add.w	r8, r1, #20
   2e58c:	00a3      	lsls	r3, r4, #2
   2e58e:	f100 0514 	add.w	r5, r0, #20
   2e592:	9300      	str	r3, [sp, #0]
   2e594:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2e598:	9301      	str	r3, [sp, #4]
   2e59a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2e59e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2e5a2:	3301      	adds	r3, #1
   2e5a4:	429a      	cmp	r2, r3
   2e5a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2e5aa:	fbb2 f6f3 	udiv	r6, r2, r3
   2e5ae:	d32e      	bcc.n	2e60e <quorem+0x96>
   2e5b0:	f04f 0a00 	mov.w	sl, #0
   2e5b4:	46c4      	mov	ip, r8
   2e5b6:	46ae      	mov	lr, r5
   2e5b8:	46d3      	mov	fp, sl
   2e5ba:	f85c 3b04 	ldr.w	r3, [ip], #4
   2e5be:	b298      	uxth	r0, r3
   2e5c0:	fb06 a000 	mla	r0, r6, r0, sl
   2e5c4:	0c02      	lsrs	r2, r0, #16
   2e5c6:	0c1b      	lsrs	r3, r3, #16
   2e5c8:	fb06 2303 	mla	r3, r6, r3, r2
   2e5cc:	f8de 2000 	ldr.w	r2, [lr]
   2e5d0:	b280      	uxth	r0, r0
   2e5d2:	b292      	uxth	r2, r2
   2e5d4:	1a12      	subs	r2, r2, r0
   2e5d6:	445a      	add	r2, fp
   2e5d8:	f8de 0000 	ldr.w	r0, [lr]
   2e5dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2e5e0:	b29b      	uxth	r3, r3
   2e5e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   2e5e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   2e5ea:	b292      	uxth	r2, r2
   2e5ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e5f0:	45e1      	cmp	r9, ip
   2e5f2:	f84e 2b04 	str.w	r2, [lr], #4
   2e5f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
   2e5fa:	d2de      	bcs.n	2e5ba <quorem+0x42>
   2e5fc:	9b00      	ldr	r3, [sp, #0]
   2e5fe:	58eb      	ldr	r3, [r5, r3]
   2e600:	b92b      	cbnz	r3, 2e60e <quorem+0x96>
   2e602:	9b01      	ldr	r3, [sp, #4]
   2e604:	3b04      	subs	r3, #4
   2e606:	429d      	cmp	r5, r3
   2e608:	461a      	mov	r2, r3
   2e60a:	d32f      	bcc.n	2e66c <quorem+0xf4>
   2e60c:	613c      	str	r4, [r7, #16]
   2e60e:	4638      	mov	r0, r7
   2e610:	f000 f889 	bl	2e726 <__mcmp>
   2e614:	2800      	cmp	r0, #0
   2e616:	db25      	blt.n	2e664 <quorem+0xec>
   2e618:	4629      	mov	r1, r5
   2e61a:	2000      	movs	r0, #0
   2e61c:	f858 2b04 	ldr.w	r2, [r8], #4
   2e620:	f8d1 c000 	ldr.w	ip, [r1]
   2e624:	fa1f fe82 	uxth.w	lr, r2
   2e628:	fa1f f38c 	uxth.w	r3, ip
   2e62c:	eba3 030e 	sub.w	r3, r3, lr
   2e630:	4403      	add	r3, r0
   2e632:	0c12      	lsrs	r2, r2, #16
   2e634:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   2e638:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   2e63c:	b29b      	uxth	r3, r3
   2e63e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e642:	45c1      	cmp	r9, r8
   2e644:	f841 3b04 	str.w	r3, [r1], #4
   2e648:	ea4f 4022 	mov.w	r0, r2, asr #16
   2e64c:	d2e6      	bcs.n	2e61c <quorem+0xa4>
   2e64e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2e652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2e656:	b922      	cbnz	r2, 2e662 <quorem+0xea>
   2e658:	3b04      	subs	r3, #4
   2e65a:	429d      	cmp	r5, r3
   2e65c:	461a      	mov	r2, r3
   2e65e:	d30b      	bcc.n	2e678 <quorem+0x100>
   2e660:	613c      	str	r4, [r7, #16]
   2e662:	3601      	adds	r6, #1
   2e664:	4630      	mov	r0, r6
   2e666:	b003      	add	sp, #12
   2e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e66c:	6812      	ldr	r2, [r2, #0]
   2e66e:	3b04      	subs	r3, #4
   2e670:	2a00      	cmp	r2, #0
   2e672:	d1cb      	bne.n	2e60c <quorem+0x94>
   2e674:	3c01      	subs	r4, #1
   2e676:	e7c6      	b.n	2e606 <quorem+0x8e>
   2e678:	6812      	ldr	r2, [r2, #0]
   2e67a:	3b04      	subs	r3, #4
   2e67c:	2a00      	cmp	r2, #0
   2e67e:	d1ef      	bne.n	2e660 <quorem+0xe8>
   2e680:	3c01      	subs	r4, #1
   2e682:	e7ea      	b.n	2e65a <quorem+0xe2>
   2e684:	2000      	movs	r0, #0
   2e686:	e7ee      	b.n	2e666 <quorem+0xee>

0002e688 <__hi0bits>:
   2e688:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2e68c:	4603      	mov	r3, r0
   2e68e:	bf36      	itet	cc
   2e690:	0403      	lslcc	r3, r0, #16
   2e692:	2000      	movcs	r0, #0
   2e694:	2010      	movcc	r0, #16
   2e696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2e69a:	bf3c      	itt	cc
   2e69c:	021b      	lslcc	r3, r3, #8
   2e69e:	3008      	addcc	r0, #8
   2e6a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2e6a4:	bf3c      	itt	cc
   2e6a6:	011b      	lslcc	r3, r3, #4
   2e6a8:	3004      	addcc	r0, #4
   2e6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2e6ae:	d303      	bcc.n	2e6b8 <__hi0bits+0x30>
   2e6b0:	2b00      	cmp	r3, #0
   2e6b2:	db0a      	blt.n	2e6ca <__hi0bits+0x42>
   2e6b4:	3001      	adds	r0, #1
   2e6b6:	4770      	bx	lr
   2e6b8:	009b      	lsls	r3, r3, #2
   2e6ba:	d501      	bpl.n	2e6c0 <__hi0bits+0x38>
   2e6bc:	3002      	adds	r0, #2
   2e6be:	4770      	bx	lr
   2e6c0:	005b      	lsls	r3, r3, #1
   2e6c2:	d501      	bpl.n	2e6c8 <__hi0bits+0x40>
   2e6c4:	3003      	adds	r0, #3
   2e6c6:	4770      	bx	lr
   2e6c8:	2020      	movs	r0, #32
   2e6ca:	4770      	bx	lr

0002e6cc <__lo0bits>:
   2e6cc:	6803      	ldr	r3, [r0, #0]
   2e6ce:	4602      	mov	r2, r0
   2e6d0:	f013 0007 	ands.w	r0, r3, #7
   2e6d4:	d00b      	beq.n	2e6ee <__lo0bits+0x22>
   2e6d6:	07d9      	lsls	r1, r3, #31
   2e6d8:	d421      	bmi.n	2e71e <__lo0bits+0x52>
   2e6da:	0798      	lsls	r0, r3, #30
   2e6dc:	bf49      	itett	mi
   2e6de:	085b      	lsrmi	r3, r3, #1
   2e6e0:	089b      	lsrpl	r3, r3, #2
   2e6e2:	2001      	movmi	r0, #1
   2e6e4:	6013      	strmi	r3, [r2, #0]
   2e6e6:	bf5c      	itt	pl
   2e6e8:	6013      	strpl	r3, [r2, #0]
   2e6ea:	2002      	movpl	r0, #2
   2e6ec:	4770      	bx	lr
   2e6ee:	b299      	uxth	r1, r3
   2e6f0:	b909      	cbnz	r1, 2e6f6 <__lo0bits+0x2a>
   2e6f2:	0c1b      	lsrs	r3, r3, #16
   2e6f4:	2010      	movs	r0, #16
   2e6f6:	b2d9      	uxtb	r1, r3
   2e6f8:	b909      	cbnz	r1, 2e6fe <__lo0bits+0x32>
   2e6fa:	3008      	adds	r0, #8
   2e6fc:	0a1b      	lsrs	r3, r3, #8
   2e6fe:	0719      	lsls	r1, r3, #28
   2e700:	bf04      	itt	eq
   2e702:	091b      	lsreq	r3, r3, #4
   2e704:	3004      	addeq	r0, #4
   2e706:	0799      	lsls	r1, r3, #30
   2e708:	bf04      	itt	eq
   2e70a:	089b      	lsreq	r3, r3, #2
   2e70c:	3002      	addeq	r0, #2
   2e70e:	07d9      	lsls	r1, r3, #31
   2e710:	d403      	bmi.n	2e71a <__lo0bits+0x4e>
   2e712:	085b      	lsrs	r3, r3, #1
   2e714:	f100 0001 	add.w	r0, r0, #1
   2e718:	d003      	beq.n	2e722 <__lo0bits+0x56>
   2e71a:	6013      	str	r3, [r2, #0]
   2e71c:	4770      	bx	lr
   2e71e:	2000      	movs	r0, #0
   2e720:	4770      	bx	lr
   2e722:	2020      	movs	r0, #32
   2e724:	4770      	bx	lr

0002e726 <__mcmp>:
   2e726:	690a      	ldr	r2, [r1, #16]
   2e728:	4603      	mov	r3, r0
   2e72a:	6900      	ldr	r0, [r0, #16]
   2e72c:	1a80      	subs	r0, r0, r2
   2e72e:	b530      	push	{r4, r5, lr}
   2e730:	d10e      	bne.n	2e750 <__mcmp+0x2a>
   2e732:	3314      	adds	r3, #20
   2e734:	3114      	adds	r1, #20
   2e736:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2e73a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2e73e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2e742:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2e746:	4295      	cmp	r5, r2
   2e748:	d003      	beq.n	2e752 <__mcmp+0x2c>
   2e74a:	d205      	bcs.n	2e758 <__mcmp+0x32>
   2e74c:	f04f 30ff 	mov.w	r0, #4294967295
   2e750:	bd30      	pop	{r4, r5, pc}
   2e752:	42a3      	cmp	r3, r4
   2e754:	d3f3      	bcc.n	2e73e <__mcmp+0x18>
   2e756:	e7fb      	b.n	2e750 <__mcmp+0x2a>
   2e758:	2001      	movs	r0, #1
   2e75a:	e7f9      	b.n	2e750 <__mcmp+0x2a>

0002e75c <_calloc_r>:
   2e75c:	b538      	push	{r3, r4, r5, lr}
   2e75e:	fb02 f501 	mul.w	r5, r2, r1
   2e762:	4629      	mov	r1, r5
   2e764:	f7f5 f9b8 	bl	23ad8 <_malloc_r>
   2e768:	4604      	mov	r4, r0
   2e76a:	b118      	cbz	r0, 2e774 <_calloc_r+0x18>
   2e76c:	462a      	mov	r2, r5
   2e76e:	2100      	movs	r1, #0
   2e770:	f7ff fdb9 	bl	2e2e6 <memset>
   2e774:	4620      	mov	r0, r4
   2e776:	bd38      	pop	{r3, r4, r5, pc}

0002e778 <__ascii_mbtowc>:
   2e778:	b082      	sub	sp, #8
   2e77a:	b901      	cbnz	r1, 2e77e <__ascii_mbtowc+0x6>
   2e77c:	a901      	add	r1, sp, #4
   2e77e:	b142      	cbz	r2, 2e792 <__ascii_mbtowc+0x1a>
   2e780:	b14b      	cbz	r3, 2e796 <__ascii_mbtowc+0x1e>
   2e782:	7813      	ldrb	r3, [r2, #0]
   2e784:	600b      	str	r3, [r1, #0]
   2e786:	7812      	ldrb	r2, [r2, #0]
   2e788:	1e10      	subs	r0, r2, #0
   2e78a:	bf18      	it	ne
   2e78c:	2001      	movne	r0, #1
   2e78e:	b002      	add	sp, #8
   2e790:	4770      	bx	lr
   2e792:	4610      	mov	r0, r2
   2e794:	e7fb      	b.n	2e78e <__ascii_mbtowc+0x16>
   2e796:	f06f 0001 	mvn.w	r0, #1
   2e79a:	e7f8      	b.n	2e78e <__ascii_mbtowc+0x16>

0002e79c <__sfputc_r>:
   2e79c:	6893      	ldr	r3, [r2, #8]
   2e79e:	3b01      	subs	r3, #1
   2e7a0:	2b00      	cmp	r3, #0
   2e7a2:	b410      	push	{r4}
   2e7a4:	6093      	str	r3, [r2, #8]
   2e7a6:	da08      	bge.n	2e7ba <__sfputc_r+0x1e>
   2e7a8:	6994      	ldr	r4, [r2, #24]
   2e7aa:	42a3      	cmp	r3, r4
   2e7ac:	db01      	blt.n	2e7b2 <__sfputc_r+0x16>
   2e7ae:	290a      	cmp	r1, #10
   2e7b0:	d103      	bne.n	2e7ba <__sfputc_r+0x1e>
   2e7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
   2e7b6:	f7f6 b9df 	b.w	24b78 <__swbuf_r>
   2e7ba:	6813      	ldr	r3, [r2, #0]
   2e7bc:	1c58      	adds	r0, r3, #1
   2e7be:	6010      	str	r0, [r2, #0]
   2e7c0:	7019      	strb	r1, [r3, #0]
   2e7c2:	4608      	mov	r0, r1
   2e7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   2e7c8:	4770      	bx	lr

0002e7ca <__sfputs_r>:
   2e7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e7cc:	4606      	mov	r6, r0
   2e7ce:	460f      	mov	r7, r1
   2e7d0:	4614      	mov	r4, r2
   2e7d2:	18d5      	adds	r5, r2, r3
   2e7d4:	42ac      	cmp	r4, r5
   2e7d6:	d101      	bne.n	2e7dc <__sfputs_r+0x12>
   2e7d8:	2000      	movs	r0, #0
   2e7da:	e007      	b.n	2e7ec <__sfputs_r+0x22>
   2e7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e7e0:	463a      	mov	r2, r7
   2e7e2:	4630      	mov	r0, r6
   2e7e4:	f7ff ffda 	bl	2e79c <__sfputc_r>
   2e7e8:	1c43      	adds	r3, r0, #1
   2e7ea:	d1f3      	bne.n	2e7d4 <__sfputs_r+0xa>
   2e7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e7ee <__ascii_wctomb>:
   2e7ee:	4603      	mov	r3, r0
   2e7f0:	4608      	mov	r0, r1
   2e7f2:	b141      	cbz	r1, 2e806 <__ascii_wctomb+0x18>
   2e7f4:	2aff      	cmp	r2, #255	; 0xff
   2e7f6:	d904      	bls.n	2e802 <__ascii_wctomb+0x14>
   2e7f8:	228a      	movs	r2, #138	; 0x8a
   2e7fa:	601a      	str	r2, [r3, #0]
   2e7fc:	f04f 30ff 	mov.w	r0, #4294967295
   2e800:	4770      	bx	lr
   2e802:	700a      	strb	r2, [r1, #0]
   2e804:	2001      	movs	r0, #1
   2e806:	4770      	bx	lr

0002e808 <abort>:
   2e808:	b508      	push	{r3, lr}
   2e80a:	2006      	movs	r0, #6
   2e80c:	f7f6 fbae 	bl	24f6c <raise>
   2e810:	2001      	movs	r0, #1
   2e812:	f7e8 f8ed 	bl	169f0 <_exit>

0002e816 <__sflush_r>:
   2e816:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2e81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e81e:	0717      	lsls	r7, r2, #28
   2e820:	4605      	mov	r5, r0
   2e822:	460c      	mov	r4, r1
   2e824:	d456      	bmi.n	2e8d4 <__sflush_r+0xbe>
   2e826:	684b      	ldr	r3, [r1, #4]
   2e828:	2b00      	cmp	r3, #0
   2e82a:	dc02      	bgt.n	2e832 <__sflush_r+0x1c>
   2e82c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2e82e:	2b00      	cmp	r3, #0
   2e830:	dd3d      	ble.n	2e8ae <__sflush_r+0x98>
   2e832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2e834:	2e00      	cmp	r6, #0
   2e836:	d03a      	beq.n	2e8ae <__sflush_r+0x98>
   2e838:	2300      	movs	r3, #0
   2e83a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2e83e:	682f      	ldr	r7, [r5, #0]
   2e840:	6a21      	ldr	r1, [r4, #32]
   2e842:	602b      	str	r3, [r5, #0]
   2e844:	d025      	beq.n	2e892 <__sflush_r+0x7c>
   2e846:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2e848:	89a3      	ldrh	r3, [r4, #12]
   2e84a:	0758      	lsls	r0, r3, #29
   2e84c:	d505      	bpl.n	2e85a <__sflush_r+0x44>
   2e84e:	6863      	ldr	r3, [r4, #4]
   2e850:	1ad2      	subs	r2, r2, r3
   2e852:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e854:	b10b      	cbz	r3, 2e85a <__sflush_r+0x44>
   2e856:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2e858:	1ad2      	subs	r2, r2, r3
   2e85a:	6a21      	ldr	r1, [r4, #32]
   2e85c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2e85e:	2300      	movs	r3, #0
   2e860:	4628      	mov	r0, r5
   2e862:	47b0      	blx	r6
   2e864:	1c41      	adds	r1, r0, #1
   2e866:	d024      	beq.n	2e8b2 <__sflush_r+0x9c>
   2e868:	2300      	movs	r3, #0
   2e86a:	6063      	str	r3, [r4, #4]
   2e86c:	6923      	ldr	r3, [r4, #16]
   2e86e:	6023      	str	r3, [r4, #0]
   2e870:	89a3      	ldrh	r3, [r4, #12]
   2e872:	04da      	lsls	r2, r3, #19
   2e874:	d500      	bpl.n	2e878 <__sflush_r+0x62>
   2e876:	6560      	str	r0, [r4, #84]	; 0x54
   2e878:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2e87a:	602f      	str	r7, [r5, #0]
   2e87c:	b1b9      	cbz	r1, 2e8ae <__sflush_r+0x98>
   2e87e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2e882:	4299      	cmp	r1, r3
   2e884:	d002      	beq.n	2e88c <__sflush_r+0x76>
   2e886:	4628      	mov	r0, r5
   2e888:	f7f5 f8dc 	bl	23a44 <_free_r>
   2e88c:	2300      	movs	r3, #0
   2e88e:	6363      	str	r3, [r4, #52]	; 0x34
   2e890:	e00d      	b.n	2e8ae <__sflush_r+0x98>
   2e892:	2301      	movs	r3, #1
   2e894:	4628      	mov	r0, r5
   2e896:	47b0      	blx	r6
   2e898:	1c46      	adds	r6, r0, #1
   2e89a:	4602      	mov	r2, r0
   2e89c:	d1d4      	bne.n	2e848 <__sflush_r+0x32>
   2e89e:	682b      	ldr	r3, [r5, #0]
   2e8a0:	2b00      	cmp	r3, #0
   2e8a2:	d0d1      	beq.n	2e848 <__sflush_r+0x32>
   2e8a4:	2b1d      	cmp	r3, #29
   2e8a6:	d001      	beq.n	2e8ac <__sflush_r+0x96>
   2e8a8:	2b16      	cmp	r3, #22
   2e8aa:	d12b      	bne.n	2e904 <__sflush_r+0xee>
   2e8ac:	602f      	str	r7, [r5, #0]
   2e8ae:	2000      	movs	r0, #0
   2e8b0:	e02f      	b.n	2e912 <__sflush_r+0xfc>
   2e8b2:	682a      	ldr	r2, [r5, #0]
   2e8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2e8b8:	b142      	cbz	r2, 2e8cc <__sflush_r+0xb6>
   2e8ba:	2a1d      	cmp	r2, #29
   2e8bc:	d001      	beq.n	2e8c2 <__sflush_r+0xac>
   2e8be:	2a16      	cmp	r2, #22
   2e8c0:	d122      	bne.n	2e908 <__sflush_r+0xf2>
   2e8c2:	2300      	movs	r3, #0
   2e8c4:	6063      	str	r3, [r4, #4]
   2e8c6:	6923      	ldr	r3, [r4, #16]
   2e8c8:	6023      	str	r3, [r4, #0]
   2e8ca:	e7d5      	b.n	2e878 <__sflush_r+0x62>
   2e8cc:	6062      	str	r2, [r4, #4]
   2e8ce:	6922      	ldr	r2, [r4, #16]
   2e8d0:	6022      	str	r2, [r4, #0]
   2e8d2:	e7ce      	b.n	2e872 <__sflush_r+0x5c>
   2e8d4:	690f      	ldr	r7, [r1, #16]
   2e8d6:	2f00      	cmp	r7, #0
   2e8d8:	d0e9      	beq.n	2e8ae <__sflush_r+0x98>
   2e8da:	0793      	lsls	r3, r2, #30
   2e8dc:	680e      	ldr	r6, [r1, #0]
   2e8de:	bf08      	it	eq
   2e8e0:	694b      	ldreq	r3, [r1, #20]
   2e8e2:	600f      	str	r7, [r1, #0]
   2e8e4:	bf18      	it	ne
   2e8e6:	2300      	movne	r3, #0
   2e8e8:	eba6 0807 	sub.w	r8, r6, r7
   2e8ec:	608b      	str	r3, [r1, #8]
   2e8ee:	f1b8 0f00 	cmp.w	r8, #0
   2e8f2:	dddc      	ble.n	2e8ae <__sflush_r+0x98>
   2e8f4:	6a21      	ldr	r1, [r4, #32]
   2e8f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2e8f8:	4643      	mov	r3, r8
   2e8fa:	463a      	mov	r2, r7
   2e8fc:	4628      	mov	r0, r5
   2e8fe:	47b0      	blx	r6
   2e900:	2800      	cmp	r0, #0
   2e902:	dc08      	bgt.n	2e916 <__sflush_r+0x100>
   2e904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2e908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e90c:	81a3      	strh	r3, [r4, #12]
   2e90e:	f04f 30ff 	mov.w	r0, #4294967295
   2e912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e916:	4407      	add	r7, r0
   2e918:	eba8 0800 	sub.w	r8, r8, r0
   2e91c:	e7e7      	b.n	2e8ee <__sflush_r+0xd8>

0002e91e <__sfmoreglue>:
   2e91e:	b570      	push	{r4, r5, r6, lr}
   2e920:	2368      	movs	r3, #104	; 0x68
   2e922:	1e4d      	subs	r5, r1, #1
   2e924:	435d      	muls	r5, r3
   2e926:	460e      	mov	r6, r1
   2e928:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2e92c:	f7f5 f8d4 	bl	23ad8 <_malloc_r>
   2e930:	4604      	mov	r4, r0
   2e932:	b140      	cbz	r0, 2e946 <__sfmoreglue+0x28>
   2e934:	2100      	movs	r1, #0
   2e936:	e9c0 1600 	strd	r1, r6, [r0]
   2e93a:	300c      	adds	r0, #12
   2e93c:	60a0      	str	r0, [r4, #8]
   2e93e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2e942:	f7ff fcd0 	bl	2e2e6 <memset>
   2e946:	4620      	mov	r0, r4
   2e948:	bd70      	pop	{r4, r5, r6, pc}

0002e94a <_fwalk_reent>:
   2e94a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e94e:	4606      	mov	r6, r0
   2e950:	4688      	mov	r8, r1
   2e952:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2e956:	2700      	movs	r7, #0
   2e958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2e95c:	f1b9 0901 	subs.w	r9, r9, #1
   2e960:	d505      	bpl.n	2e96e <_fwalk_reent+0x24>
   2e962:	6824      	ldr	r4, [r4, #0]
   2e964:	2c00      	cmp	r4, #0
   2e966:	d1f7      	bne.n	2e958 <_fwalk_reent+0xe>
   2e968:	4638      	mov	r0, r7
   2e96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e96e:	89ab      	ldrh	r3, [r5, #12]
   2e970:	2b01      	cmp	r3, #1
   2e972:	d907      	bls.n	2e984 <_fwalk_reent+0x3a>
   2e974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2e978:	3301      	adds	r3, #1
   2e97a:	d003      	beq.n	2e984 <_fwalk_reent+0x3a>
   2e97c:	4629      	mov	r1, r5
   2e97e:	4630      	mov	r0, r6
   2e980:	47c0      	blx	r8
   2e982:	4307      	orrs	r7, r0
   2e984:	3568      	adds	r5, #104	; 0x68
   2e986:	e7e9      	b.n	2e95c <_fwalk_reent+0x12>

0002e988 <__swhatbuf_r>:
   2e988:	b570      	push	{r4, r5, r6, lr}
   2e98a:	460c      	mov	r4, r1
   2e98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e990:	2900      	cmp	r1, #0
   2e992:	b096      	sub	sp, #88	; 0x58
   2e994:	4615      	mov	r5, r2
   2e996:	461e      	mov	r6, r3
   2e998:	da0d      	bge.n	2e9b6 <__swhatbuf_r+0x2e>
   2e99a:	89a3      	ldrh	r3, [r4, #12]
   2e99c:	f013 0f80 	tst.w	r3, #128	; 0x80
   2e9a0:	f04f 0100 	mov.w	r1, #0
   2e9a4:	bf14      	ite	ne
   2e9a6:	2340      	movne	r3, #64	; 0x40
   2e9a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   2e9ac:	2000      	movs	r0, #0
   2e9ae:	6031      	str	r1, [r6, #0]
   2e9b0:	602b      	str	r3, [r5, #0]
   2e9b2:	b016      	add	sp, #88	; 0x58
   2e9b4:	bd70      	pop	{r4, r5, r6, pc}
   2e9b6:	466a      	mov	r2, sp
   2e9b8:	f7f6 fb14 	bl	24fe4 <_fstat_r>
   2e9bc:	2800      	cmp	r0, #0
   2e9be:	dbec      	blt.n	2e99a <__swhatbuf_r+0x12>
   2e9c0:	9901      	ldr	r1, [sp, #4]
   2e9c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   2e9c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   2e9ca:	4259      	negs	r1, r3
   2e9cc:	4159      	adcs	r1, r3
   2e9ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2e9d2:	e7eb      	b.n	2e9ac <__swhatbuf_r+0x24>

0002e9d4 <memmove>:
   2e9d4:	4288      	cmp	r0, r1
   2e9d6:	b510      	push	{r4, lr}
   2e9d8:	eb01 0402 	add.w	r4, r1, r2
   2e9dc:	d902      	bls.n	2e9e4 <memmove+0x10>
   2e9de:	4284      	cmp	r4, r0
   2e9e0:	4623      	mov	r3, r4
   2e9e2:	d807      	bhi.n	2e9f4 <memmove+0x20>
   2e9e4:	1e43      	subs	r3, r0, #1
   2e9e6:	42a1      	cmp	r1, r4
   2e9e8:	d008      	beq.n	2e9fc <memmove+0x28>
   2e9ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   2e9ee:	f803 2f01 	strb.w	r2, [r3, #1]!
   2e9f2:	e7f8      	b.n	2e9e6 <memmove+0x12>
   2e9f4:	4402      	add	r2, r0
   2e9f6:	4601      	mov	r1, r0
   2e9f8:	428a      	cmp	r2, r1
   2e9fa:	d100      	bne.n	2e9fe <memmove+0x2a>
   2e9fc:	bd10      	pop	{r4, pc}
   2e9fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2ea02:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2ea06:	e7f7      	b.n	2e9f8 <memmove+0x24>

0002ea08 <_raise_r>:
   2ea08:	291f      	cmp	r1, #31
   2ea0a:	b538      	push	{r3, r4, r5, lr}
   2ea0c:	4605      	mov	r5, r0
   2ea0e:	460c      	mov	r4, r1
   2ea10:	d904      	bls.n	2ea1c <_raise_r+0x14>
   2ea12:	2316      	movs	r3, #22
   2ea14:	6003      	str	r3, [r0, #0]
   2ea16:	f04f 30ff 	mov.w	r0, #4294967295
   2ea1a:	bd38      	pop	{r3, r4, r5, pc}
   2ea1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2ea1e:	b112      	cbz	r2, 2ea26 <_raise_r+0x1e>
   2ea20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2ea24:	b94b      	cbnz	r3, 2ea3a <_raise_r+0x32>
   2ea26:	4628      	mov	r0, r5
   2ea28:	f000 f816 	bl	2ea58 <_getpid_r>
   2ea2c:	4622      	mov	r2, r4
   2ea2e:	4601      	mov	r1, r0
   2ea30:	4628      	mov	r0, r5
   2ea32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ea36:	f7f6 baa1 	b.w	24f7c <_kill_r>
   2ea3a:	2b01      	cmp	r3, #1
   2ea3c:	d00a      	beq.n	2ea54 <_raise_r+0x4c>
   2ea3e:	1c59      	adds	r1, r3, #1
   2ea40:	d103      	bne.n	2ea4a <_raise_r+0x42>
   2ea42:	2316      	movs	r3, #22
   2ea44:	6003      	str	r3, [r0, #0]
   2ea46:	2001      	movs	r0, #1
   2ea48:	e7e7      	b.n	2ea1a <_raise_r+0x12>
   2ea4a:	2100      	movs	r1, #0
   2ea4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   2ea50:	4620      	mov	r0, r4
   2ea52:	4798      	blx	r3
   2ea54:	2000      	movs	r0, #0
   2ea56:	e7e0      	b.n	2ea1a <_raise_r+0x12>

0002ea58 <_getpid_r>:
   2ea58:	f7fa be04 	b.w	29664 <_getpid>

0002ea5c <__sread>:
   2ea5c:	b510      	push	{r4, lr}
   2ea5e:	460c      	mov	r4, r1
   2ea60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2ea64:	f7f6 faf2 	bl	2504c <_read_r>
   2ea68:	2800      	cmp	r0, #0
   2ea6a:	bfab      	itete	ge
   2ea6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2ea6e:	89a3      	ldrhlt	r3, [r4, #12]
   2ea70:	181b      	addge	r3, r3, r0
   2ea72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2ea76:	bfac      	ite	ge
   2ea78:	6563      	strge	r3, [r4, #84]	; 0x54
   2ea7a:	81a3      	strhlt	r3, [r4, #12]
   2ea7c:	bd10      	pop	{r4, pc}

0002ea7e <__swrite>:
   2ea7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ea82:	461f      	mov	r7, r3
   2ea84:	898b      	ldrh	r3, [r1, #12]
   2ea86:	05db      	lsls	r3, r3, #23
   2ea88:	4605      	mov	r5, r0
   2ea8a:	460c      	mov	r4, r1
   2ea8c:	4616      	mov	r6, r2
   2ea8e:	d505      	bpl.n	2ea9c <__swrite+0x1e>
   2ea90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2ea94:	2302      	movs	r3, #2
   2ea96:	2200      	movs	r2, #0
   2ea98:	f7f6 fac6 	bl	25028 <_lseek_r>
   2ea9c:	89a3      	ldrh	r3, [r4, #12]
   2ea9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2eaa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2eaa6:	81a3      	strh	r3, [r4, #12]
   2eaa8:	4632      	mov	r2, r6
   2eaaa:	463b      	mov	r3, r7
   2eaac:	4628      	mov	r0, r5
   2eaae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2eab2:	f7f6 ba75 	b.w	24fa0 <_write_r>

0002eab6 <__sseek>:
   2eab6:	b510      	push	{r4, lr}
   2eab8:	460c      	mov	r4, r1
   2eaba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2eabe:	f7f6 fab3 	bl	25028 <_lseek_r>
   2eac2:	1c43      	adds	r3, r0, #1
   2eac4:	89a3      	ldrh	r3, [r4, #12]
   2eac6:	bf15      	itete	ne
   2eac8:	6560      	strne	r0, [r4, #84]	; 0x54
   2eaca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2eace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2ead2:	81a3      	strheq	r3, [r4, #12]
   2ead4:	bf18      	it	ne
   2ead6:	81a3      	strhne	r3, [r4, #12]
   2ead8:	bd10      	pop	{r4, pc}

0002eada <__sclose>:
   2eada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2eade:	f7f6 ba71 	b.w	24fc4 <_close_r>
	...
