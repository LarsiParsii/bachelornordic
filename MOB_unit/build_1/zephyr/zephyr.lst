
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	a0 e2 00 20 a5 a2 00 00 bb 09 01 00 79 a2 00 00     ... ........y...
    8010:	79 a2 00 00 79 a2 00 00 79 a2 00 00 79 a2 00 00     y...y...y...y...
	...
    802c:	9d 9f 00 00 79 a2 00 00 00 00 00 00 3d 9f 00 00     ....y.......=...
    803c:	79 a2 00 00                                         y...

00008040 <_irq_vector_table>:
    8040:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8050:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8060:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8070:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8080:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8090:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    80a0:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    80b0:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    80c0:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    80d0:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    80e0:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    80f0:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8100:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8110:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8120:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8130:	21 a0 00 00 21 a0 00 00 21 a0 00 00 21 a0 00 00     !...!...!...!...
    8140:	21 a0 00 00                                         !...

Disassembly of section text:

00008148 <__aeabi_fmul>:
    8148:	f04f 0cff 	mov.w	ip, #255	; 0xff
    814c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8150:	bf1e      	ittt	ne
    8152:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8156:	ea92 0f0c 	teqne	r2, ip
    815a:	ea93 0f0c 	teqne	r3, ip
    815e:	d06f      	beq.n	8240 <__aeabi_fmul+0xf8>
    8160:	441a      	add	r2, r3
    8162:	ea80 0c01 	eor.w	ip, r0, r1
    8166:	0240      	lsls	r0, r0, #9
    8168:	bf18      	it	ne
    816a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    816e:	d01e      	beq.n	81ae <__aeabi_fmul+0x66>
    8170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8174:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8178:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    817c:	fba0 3101 	umull	r3, r1, r0, r1
    8180:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8184:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8188:	bf3e      	ittt	cc
    818a:	0049      	lslcc	r1, r1, #1
    818c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8190:	005b      	lslcc	r3, r3, #1
    8192:	ea40 0001 	orr.w	r0, r0, r1
    8196:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    819a:	2afd      	cmp	r2, #253	; 0xfd
    819c:	d81d      	bhi.n	81da <__aeabi_fmul+0x92>
    819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    81a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    81a6:	bf08      	it	eq
    81a8:	f020 0001 	biceq.w	r0, r0, #1
    81ac:	4770      	bx	lr
    81ae:	f090 0f00 	teq	r0, #0
    81b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    81b6:	bf08      	it	eq
    81b8:	0249      	lsleq	r1, r1, #9
    81ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    81be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    81c2:	3a7f      	subs	r2, #127	; 0x7f
    81c4:	bfc2      	ittt	gt
    81c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    81ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    81ce:	4770      	bxgt	lr
    81d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    81d4:	f04f 0300 	mov.w	r3, #0
    81d8:	3a01      	subs	r2, #1
    81da:	dc5d      	bgt.n	8298 <__aeabi_fmul+0x150>
    81dc:	f112 0f19 	cmn.w	r2, #25
    81e0:	bfdc      	itt	le
    81e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    81e6:	4770      	bxle	lr
    81e8:	f1c2 0200 	rsb	r2, r2, #0
    81ec:	0041      	lsls	r1, r0, #1
    81ee:	fa21 f102 	lsr.w	r1, r1, r2
    81f2:	f1c2 0220 	rsb	r2, r2, #32
    81f6:	fa00 fc02 	lsl.w	ip, r0, r2
    81fa:	ea5f 0031 	movs.w	r0, r1, rrx
    81fe:	f140 0000 	adc.w	r0, r0, #0
    8202:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8206:	bf08      	it	eq
    8208:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    820c:	4770      	bx	lr
    820e:	f092 0f00 	teq	r2, #0
    8212:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8216:	bf02      	ittt	eq
    8218:	0040      	lsleq	r0, r0, #1
    821a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    821e:	3a01      	subeq	r2, #1
    8220:	d0f9      	beq.n	8216 <__aeabi_fmul+0xce>
    8222:	ea40 000c 	orr.w	r0, r0, ip
    8226:	f093 0f00 	teq	r3, #0
    822a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    822e:	bf02      	ittt	eq
    8230:	0049      	lsleq	r1, r1, #1
    8232:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8236:	3b01      	subeq	r3, #1
    8238:	d0f9      	beq.n	822e <__aeabi_fmul+0xe6>
    823a:	ea41 010c 	orr.w	r1, r1, ip
    823e:	e78f      	b.n	8160 <__aeabi_fmul+0x18>
    8240:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8244:	ea92 0f0c 	teq	r2, ip
    8248:	bf18      	it	ne
    824a:	ea93 0f0c 	teqne	r3, ip
    824e:	d00a      	beq.n	8266 <__aeabi_fmul+0x11e>
    8250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8254:	bf18      	it	ne
    8256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    825a:	d1d8      	bne.n	820e <__aeabi_fmul+0xc6>
    825c:	ea80 0001 	eor.w	r0, r0, r1
    8260:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8264:	4770      	bx	lr
    8266:	f090 0f00 	teq	r0, #0
    826a:	bf17      	itett	ne
    826c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8270:	4608      	moveq	r0, r1
    8272:	f091 0f00 	teqne	r1, #0
    8276:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    827a:	d014      	beq.n	82a6 <__aeabi_fmul+0x15e>
    827c:	ea92 0f0c 	teq	r2, ip
    8280:	d101      	bne.n	8286 <__aeabi_fmul+0x13e>
    8282:	0242      	lsls	r2, r0, #9
    8284:	d10f      	bne.n	82a6 <__aeabi_fmul+0x15e>
    8286:	ea93 0f0c 	teq	r3, ip
    828a:	d103      	bne.n	8294 <__aeabi_fmul+0x14c>
    828c:	024b      	lsls	r3, r1, #9
    828e:	bf18      	it	ne
    8290:	4608      	movne	r0, r1
    8292:	d108      	bne.n	82a6 <__aeabi_fmul+0x15e>
    8294:	ea80 0001 	eor.w	r0, r0, r1
    8298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    829c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    82a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    82a4:	4770      	bx	lr
    82a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    82aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    82ae:	4770      	bx	lr

000082b0 <__aeabi_drsub>:
    82b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    82b4:	e002      	b.n	82bc <__adddf3>
    82b6:	bf00      	nop

000082b8 <__aeabi_dsub>:
    82b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000082bc <__adddf3>:
    82bc:	b530      	push	{r4, r5, lr}
    82be:	ea4f 0441 	mov.w	r4, r1, lsl #1
    82c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    82c6:	ea94 0f05 	teq	r4, r5
    82ca:	bf08      	it	eq
    82cc:	ea90 0f02 	teqeq	r0, r2
    82d0:	bf1f      	itttt	ne
    82d2:	ea54 0c00 	orrsne.w	ip, r4, r0
    82d6:	ea55 0c02 	orrsne.w	ip, r5, r2
    82da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    82de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    82e2:	f000 80e2 	beq.w	84aa <__adddf3+0x1ee>
    82e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    82ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    82ee:	bfb8      	it	lt
    82f0:	426d      	neglt	r5, r5
    82f2:	dd0c      	ble.n	830e <__adddf3+0x52>
    82f4:	442c      	add	r4, r5
    82f6:	ea80 0202 	eor.w	r2, r0, r2
    82fa:	ea81 0303 	eor.w	r3, r1, r3
    82fe:	ea82 0000 	eor.w	r0, r2, r0
    8302:	ea83 0101 	eor.w	r1, r3, r1
    8306:	ea80 0202 	eor.w	r2, r0, r2
    830a:	ea81 0303 	eor.w	r3, r1, r3
    830e:	2d36      	cmp	r5, #54	; 0x36
    8310:	bf88      	it	hi
    8312:	bd30      	pophi	{r4, r5, pc}
    8314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8318:	ea4f 3101 	mov.w	r1, r1, lsl #12
    831c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    8320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    8324:	d002      	beq.n	832c <__adddf3+0x70>
    8326:	4240      	negs	r0, r0
    8328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    832c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    8330:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    8338:	d002      	beq.n	8340 <__adddf3+0x84>
    833a:	4252      	negs	r2, r2
    833c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8340:	ea94 0f05 	teq	r4, r5
    8344:	f000 80a7 	beq.w	8496 <__adddf3+0x1da>
    8348:	f1a4 0401 	sub.w	r4, r4, #1
    834c:	f1d5 0e20 	rsbs	lr, r5, #32
    8350:	db0d      	blt.n	836e <__adddf3+0xb2>
    8352:	fa02 fc0e 	lsl.w	ip, r2, lr
    8356:	fa22 f205 	lsr.w	r2, r2, r5
    835a:	1880      	adds	r0, r0, r2
    835c:	f141 0100 	adc.w	r1, r1, #0
    8360:	fa03 f20e 	lsl.w	r2, r3, lr
    8364:	1880      	adds	r0, r0, r2
    8366:	fa43 f305 	asr.w	r3, r3, r5
    836a:	4159      	adcs	r1, r3
    836c:	e00e      	b.n	838c <__adddf3+0xd0>
    836e:	f1a5 0520 	sub.w	r5, r5, #32
    8372:	f10e 0e20 	add.w	lr, lr, #32
    8376:	2a01      	cmp	r2, #1
    8378:	fa03 fc0e 	lsl.w	ip, r3, lr
    837c:	bf28      	it	cs
    837e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8382:	fa43 f305 	asr.w	r3, r3, r5
    8386:	18c0      	adds	r0, r0, r3
    8388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8390:	d507      	bpl.n	83a2 <__adddf3+0xe6>
    8392:	f04f 0e00 	mov.w	lr, #0
    8396:	f1dc 0c00 	rsbs	ip, ip, #0
    839a:	eb7e 0000 	sbcs.w	r0, lr, r0
    839e:	eb6e 0101 	sbc.w	r1, lr, r1
    83a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    83a6:	d31b      	bcc.n	83e0 <__adddf3+0x124>
    83a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    83ac:	d30c      	bcc.n	83c8 <__adddf3+0x10c>
    83ae:	0849      	lsrs	r1, r1, #1
    83b0:	ea5f 0030 	movs.w	r0, r0, rrx
    83b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    83b8:	f104 0401 	add.w	r4, r4, #1
    83bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    83c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    83c4:	f080 809a 	bcs.w	84fc <__adddf3+0x240>
    83c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    83cc:	bf08      	it	eq
    83ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    83d2:	f150 0000 	adcs.w	r0, r0, #0
    83d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    83da:	ea41 0105 	orr.w	r1, r1, r5
    83de:	bd30      	pop	{r4, r5, pc}
    83e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    83e4:	4140      	adcs	r0, r0
    83e6:	eb41 0101 	adc.w	r1, r1, r1
    83ea:	3c01      	subs	r4, #1
    83ec:	bf28      	it	cs
    83ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    83f2:	d2e9      	bcs.n	83c8 <__adddf3+0x10c>
    83f4:	f091 0f00 	teq	r1, #0
    83f8:	bf04      	itt	eq
    83fa:	4601      	moveq	r1, r0
    83fc:	2000      	moveq	r0, #0
    83fe:	fab1 f381 	clz	r3, r1
    8402:	bf08      	it	eq
    8404:	3320      	addeq	r3, #32
    8406:	f1a3 030b 	sub.w	r3, r3, #11
    840a:	f1b3 0220 	subs.w	r2, r3, #32
    840e:	da0c      	bge.n	842a <__adddf3+0x16e>
    8410:	320c      	adds	r2, #12
    8412:	dd08      	ble.n	8426 <__adddf3+0x16a>
    8414:	f102 0c14 	add.w	ip, r2, #20
    8418:	f1c2 020c 	rsb	r2, r2, #12
    841c:	fa01 f00c 	lsl.w	r0, r1, ip
    8420:	fa21 f102 	lsr.w	r1, r1, r2
    8424:	e00c      	b.n	8440 <__adddf3+0x184>
    8426:	f102 0214 	add.w	r2, r2, #20
    842a:	bfd8      	it	le
    842c:	f1c2 0c20 	rsble	ip, r2, #32
    8430:	fa01 f102 	lsl.w	r1, r1, r2
    8434:	fa20 fc0c 	lsr.w	ip, r0, ip
    8438:	bfdc      	itt	le
    843a:	ea41 010c 	orrle.w	r1, r1, ip
    843e:	4090      	lslle	r0, r2
    8440:	1ae4      	subs	r4, r4, r3
    8442:	bfa2      	ittt	ge
    8444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    8448:	4329      	orrge	r1, r5
    844a:	bd30      	popge	{r4, r5, pc}
    844c:	ea6f 0404 	mvn.w	r4, r4
    8450:	3c1f      	subs	r4, #31
    8452:	da1c      	bge.n	848e <__adddf3+0x1d2>
    8454:	340c      	adds	r4, #12
    8456:	dc0e      	bgt.n	8476 <__adddf3+0x1ba>
    8458:	f104 0414 	add.w	r4, r4, #20
    845c:	f1c4 0220 	rsb	r2, r4, #32
    8460:	fa20 f004 	lsr.w	r0, r0, r4
    8464:	fa01 f302 	lsl.w	r3, r1, r2
    8468:	ea40 0003 	orr.w	r0, r0, r3
    846c:	fa21 f304 	lsr.w	r3, r1, r4
    8470:	ea45 0103 	orr.w	r1, r5, r3
    8474:	bd30      	pop	{r4, r5, pc}
    8476:	f1c4 040c 	rsb	r4, r4, #12
    847a:	f1c4 0220 	rsb	r2, r4, #32
    847e:	fa20 f002 	lsr.w	r0, r0, r2
    8482:	fa01 f304 	lsl.w	r3, r1, r4
    8486:	ea40 0003 	orr.w	r0, r0, r3
    848a:	4629      	mov	r1, r5
    848c:	bd30      	pop	{r4, r5, pc}
    848e:	fa21 f004 	lsr.w	r0, r1, r4
    8492:	4629      	mov	r1, r5
    8494:	bd30      	pop	{r4, r5, pc}
    8496:	f094 0f00 	teq	r4, #0
    849a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    849e:	bf06      	itte	eq
    84a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    84a4:	3401      	addeq	r4, #1
    84a6:	3d01      	subne	r5, #1
    84a8:	e74e      	b.n	8348 <__adddf3+0x8c>
    84aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    84ae:	bf18      	it	ne
    84b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    84b4:	d029      	beq.n	850a <__adddf3+0x24e>
    84b6:	ea94 0f05 	teq	r4, r5
    84ba:	bf08      	it	eq
    84bc:	ea90 0f02 	teqeq	r0, r2
    84c0:	d005      	beq.n	84ce <__adddf3+0x212>
    84c2:	ea54 0c00 	orrs.w	ip, r4, r0
    84c6:	bf04      	itt	eq
    84c8:	4619      	moveq	r1, r3
    84ca:	4610      	moveq	r0, r2
    84cc:	bd30      	pop	{r4, r5, pc}
    84ce:	ea91 0f03 	teq	r1, r3
    84d2:	bf1e      	ittt	ne
    84d4:	2100      	movne	r1, #0
    84d6:	2000      	movne	r0, #0
    84d8:	bd30      	popne	{r4, r5, pc}
    84da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    84de:	d105      	bne.n	84ec <__adddf3+0x230>
    84e0:	0040      	lsls	r0, r0, #1
    84e2:	4149      	adcs	r1, r1
    84e4:	bf28      	it	cs
    84e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    84ea:	bd30      	pop	{r4, r5, pc}
    84ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    84f0:	bf3c      	itt	cc
    84f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    84f6:	bd30      	popcc	{r4, r5, pc}
    84f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    84fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8504:	f04f 0000 	mov.w	r0, #0
    8508:	bd30      	pop	{r4, r5, pc}
    850a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    850e:	bf1a      	itte	ne
    8510:	4619      	movne	r1, r3
    8512:	4610      	movne	r0, r2
    8514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    8518:	bf1c      	itt	ne
    851a:	460b      	movne	r3, r1
    851c:	4602      	movne	r2, r0
    851e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8522:	bf06      	itte	eq
    8524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    8528:	ea91 0f03 	teqeq	r1, r3
    852c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    8530:	bd30      	pop	{r4, r5, pc}
    8532:	bf00      	nop

00008534 <__aeabi_ui2d>:
    8534:	f090 0f00 	teq	r0, #0
    8538:	bf04      	itt	eq
    853a:	2100      	moveq	r1, #0
    853c:	4770      	bxeq	lr
    853e:	b530      	push	{r4, r5, lr}
    8540:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8544:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8548:	f04f 0500 	mov.w	r5, #0
    854c:	f04f 0100 	mov.w	r1, #0
    8550:	e750      	b.n	83f4 <__adddf3+0x138>
    8552:	bf00      	nop

00008554 <__aeabi_i2d>:
    8554:	f090 0f00 	teq	r0, #0
    8558:	bf04      	itt	eq
    855a:	2100      	moveq	r1, #0
    855c:	4770      	bxeq	lr
    855e:	b530      	push	{r4, r5, lr}
    8560:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8564:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    856c:	bf48      	it	mi
    856e:	4240      	negmi	r0, r0
    8570:	f04f 0100 	mov.w	r1, #0
    8574:	e73e      	b.n	83f4 <__adddf3+0x138>
    8576:	bf00      	nop

00008578 <__aeabi_f2d>:
    8578:	0042      	lsls	r2, r0, #1
    857a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    857e:	ea4f 0131 	mov.w	r1, r1, rrx
    8582:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8586:	bf1f      	itttt	ne
    8588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    858c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8594:	4770      	bxne	lr
    8596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    859a:	bf08      	it	eq
    859c:	4770      	bxeq	lr
    859e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    85a2:	bf04      	itt	eq
    85a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    85a8:	4770      	bxeq	lr
    85aa:	b530      	push	{r4, r5, lr}
    85ac:	f44f 7460 	mov.w	r4, #896	; 0x380
    85b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    85b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85b8:	e71c      	b.n	83f4 <__adddf3+0x138>
    85ba:	bf00      	nop

000085bc <__aeabi_ul2d>:
    85bc:	ea50 0201 	orrs.w	r2, r0, r1
    85c0:	bf08      	it	eq
    85c2:	4770      	bxeq	lr
    85c4:	b530      	push	{r4, r5, lr}
    85c6:	f04f 0500 	mov.w	r5, #0
    85ca:	e00a      	b.n	85e2 <__aeabi_l2d+0x16>

000085cc <__aeabi_l2d>:
    85cc:	ea50 0201 	orrs.w	r2, r0, r1
    85d0:	bf08      	it	eq
    85d2:	4770      	bxeq	lr
    85d4:	b530      	push	{r4, r5, lr}
    85d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    85da:	d502      	bpl.n	85e2 <__aeabi_l2d+0x16>
    85dc:	4240      	negs	r0, r0
    85de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    85e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    85e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    85ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    85ee:	f43f aed8 	beq.w	83a2 <__adddf3+0xe6>
    85f2:	f04f 0203 	mov.w	r2, #3
    85f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    85fa:	bf18      	it	ne
    85fc:	3203      	addne	r2, #3
    85fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8602:	bf18      	it	ne
    8604:	3203      	addne	r2, #3
    8606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    860a:	f1c2 0320 	rsb	r3, r2, #32
    860e:	fa00 fc03 	lsl.w	ip, r0, r3
    8612:	fa20 f002 	lsr.w	r0, r0, r2
    8616:	fa01 fe03 	lsl.w	lr, r1, r3
    861a:	ea40 000e 	orr.w	r0, r0, lr
    861e:	fa21 f102 	lsr.w	r1, r1, r2
    8622:	4414      	add	r4, r2
    8624:	e6bd      	b.n	83a2 <__adddf3+0xe6>
    8626:	bf00      	nop

00008628 <__aeabi_dmul>:
    8628:	b570      	push	{r4, r5, r6, lr}
    862a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    862e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8636:	bf1d      	ittte	ne
    8638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    863c:	ea94 0f0c 	teqne	r4, ip
    8640:	ea95 0f0c 	teqne	r5, ip
    8644:	f000 f8de 	bleq	8804 <__aeabi_dmul+0x1dc>
    8648:	442c      	add	r4, r5
    864a:	ea81 0603 	eor.w	r6, r1, r3
    864e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    8652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    8656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    865a:	bf18      	it	ne
    865c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8668:	d038      	beq.n	86dc <__aeabi_dmul+0xb4>
    866a:	fba0 ce02 	umull	ip, lr, r0, r2
    866e:	f04f 0500 	mov.w	r5, #0
    8672:	fbe1 e502 	umlal	lr, r5, r1, r2
    8676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    867a:	fbe0 e503 	umlal	lr, r5, r0, r3
    867e:	f04f 0600 	mov.w	r6, #0
    8682:	fbe1 5603 	umlal	r5, r6, r1, r3
    8686:	f09c 0f00 	teq	ip, #0
    868a:	bf18      	it	ne
    868c:	f04e 0e01 	orrne.w	lr, lr, #1
    8690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    869c:	d204      	bcs.n	86a8 <__aeabi_dmul+0x80>
    869e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    86a2:	416d      	adcs	r5, r5
    86a4:	eb46 0606 	adc.w	r6, r6, r6
    86a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    86ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    86b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    86b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    86b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    86bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    86c0:	bf88      	it	hi
    86c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    86c6:	d81e      	bhi.n	8706 <__aeabi_dmul+0xde>
    86c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    86cc:	bf08      	it	eq
    86ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    86d2:	f150 0000 	adcs.w	r0, r0, #0
    86d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    86da:	bd70      	pop	{r4, r5, r6, pc}
    86dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    86e0:	ea46 0101 	orr.w	r1, r6, r1
    86e4:	ea40 0002 	orr.w	r0, r0, r2
    86e8:	ea81 0103 	eor.w	r1, r1, r3
    86ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    86f0:	bfc2      	ittt	gt
    86f2:	ebd4 050c 	rsbsgt	r5, r4, ip
    86f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    86fa:	bd70      	popgt	{r4, r5, r6, pc}
    86fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8700:	f04f 0e00 	mov.w	lr, #0
    8704:	3c01      	subs	r4, #1
    8706:	f300 80ab 	bgt.w	8860 <__aeabi_dmul+0x238>
    870a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    870e:	bfde      	ittt	le
    8710:	2000      	movle	r0, #0
    8712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    8716:	bd70      	pople	{r4, r5, r6, pc}
    8718:	f1c4 0400 	rsb	r4, r4, #0
    871c:	3c20      	subs	r4, #32
    871e:	da35      	bge.n	878c <__aeabi_dmul+0x164>
    8720:	340c      	adds	r4, #12
    8722:	dc1b      	bgt.n	875c <__aeabi_dmul+0x134>
    8724:	f104 0414 	add.w	r4, r4, #20
    8728:	f1c4 0520 	rsb	r5, r4, #32
    872c:	fa00 f305 	lsl.w	r3, r0, r5
    8730:	fa20 f004 	lsr.w	r0, r0, r4
    8734:	fa01 f205 	lsl.w	r2, r1, r5
    8738:	ea40 0002 	orr.w	r0, r0, r2
    873c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    8740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8748:	fa21 f604 	lsr.w	r6, r1, r4
    874c:	eb42 0106 	adc.w	r1, r2, r6
    8750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8754:	bf08      	it	eq
    8756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    875a:	bd70      	pop	{r4, r5, r6, pc}
    875c:	f1c4 040c 	rsb	r4, r4, #12
    8760:	f1c4 0520 	rsb	r5, r4, #32
    8764:	fa00 f304 	lsl.w	r3, r0, r4
    8768:	fa20 f005 	lsr.w	r0, r0, r5
    876c:	fa01 f204 	lsl.w	r2, r1, r4
    8770:	ea40 0002 	orr.w	r0, r0, r2
    8774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    877c:	f141 0100 	adc.w	r1, r1, #0
    8780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8784:	bf08      	it	eq
    8786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    878a:	bd70      	pop	{r4, r5, r6, pc}
    878c:	f1c4 0520 	rsb	r5, r4, #32
    8790:	fa00 f205 	lsl.w	r2, r0, r5
    8794:	ea4e 0e02 	orr.w	lr, lr, r2
    8798:	fa20 f304 	lsr.w	r3, r0, r4
    879c:	fa01 f205 	lsl.w	r2, r1, r5
    87a0:	ea43 0302 	orr.w	r3, r3, r2
    87a4:	fa21 f004 	lsr.w	r0, r1, r4
    87a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87ac:	fa21 f204 	lsr.w	r2, r1, r4
    87b0:	ea20 0002 	bic.w	r0, r0, r2
    87b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    87b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    87bc:	bf08      	it	eq
    87be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    87c2:	bd70      	pop	{r4, r5, r6, pc}
    87c4:	f094 0f00 	teq	r4, #0
    87c8:	d10f      	bne.n	87ea <__aeabi_dmul+0x1c2>
    87ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    87ce:	0040      	lsls	r0, r0, #1
    87d0:	eb41 0101 	adc.w	r1, r1, r1
    87d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    87d8:	bf08      	it	eq
    87da:	3c01      	subeq	r4, #1
    87dc:	d0f7      	beq.n	87ce <__aeabi_dmul+0x1a6>
    87de:	ea41 0106 	orr.w	r1, r1, r6
    87e2:	f095 0f00 	teq	r5, #0
    87e6:	bf18      	it	ne
    87e8:	4770      	bxne	lr
    87ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    87ee:	0052      	lsls	r2, r2, #1
    87f0:	eb43 0303 	adc.w	r3, r3, r3
    87f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    87f8:	bf08      	it	eq
    87fa:	3d01      	subeq	r5, #1
    87fc:	d0f7      	beq.n	87ee <__aeabi_dmul+0x1c6>
    87fe:	ea43 0306 	orr.w	r3, r3, r6
    8802:	4770      	bx	lr
    8804:	ea94 0f0c 	teq	r4, ip
    8808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    880c:	bf18      	it	ne
    880e:	ea95 0f0c 	teqne	r5, ip
    8812:	d00c      	beq.n	882e <__aeabi_dmul+0x206>
    8814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8818:	bf18      	it	ne
    881a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    881e:	d1d1      	bne.n	87c4 <__aeabi_dmul+0x19c>
    8820:	ea81 0103 	eor.w	r1, r1, r3
    8824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8828:	f04f 0000 	mov.w	r0, #0
    882c:	bd70      	pop	{r4, r5, r6, pc}
    882e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8832:	bf06      	itte	eq
    8834:	4610      	moveq	r0, r2
    8836:	4619      	moveq	r1, r3
    8838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    883c:	d019      	beq.n	8872 <__aeabi_dmul+0x24a>
    883e:	ea94 0f0c 	teq	r4, ip
    8842:	d102      	bne.n	884a <__aeabi_dmul+0x222>
    8844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    8848:	d113      	bne.n	8872 <__aeabi_dmul+0x24a>
    884a:	ea95 0f0c 	teq	r5, ip
    884e:	d105      	bne.n	885c <__aeabi_dmul+0x234>
    8850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    8854:	bf1c      	itt	ne
    8856:	4610      	movne	r0, r2
    8858:	4619      	movne	r1, r3
    885a:	d10a      	bne.n	8872 <__aeabi_dmul+0x24a>
    885c:	ea81 0103 	eor.w	r1, r1, r3
    8860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    886c:	f04f 0000 	mov.w	r0, #0
    8870:	bd70      	pop	{r4, r5, r6, pc}
    8872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    887a:	bd70      	pop	{r4, r5, r6, pc}

0000887c <__aeabi_ddiv>:
    887c:	b570      	push	{r4, r5, r6, lr}
    887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    888a:	bf1d      	ittte	ne
    888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8890:	ea94 0f0c 	teqne	r4, ip
    8894:	ea95 0f0c 	teqne	r5, ip
    8898:	f000 f8a7 	bleq	89ea <__aeabi_ddiv+0x16e>
    889c:	eba4 0405 	sub.w	r4, r4, r5
    88a0:	ea81 0e03 	eor.w	lr, r1, r3
    88a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    88ac:	f000 8088 	beq.w	89c0 <__aeabi_ddiv+0x144>
    88b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    88b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    88b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    88bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    88c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    88c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    88c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    88cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    88d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    88d4:	429d      	cmp	r5, r3
    88d6:	bf08      	it	eq
    88d8:	4296      	cmpeq	r6, r2
    88da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    88de:	f504 7440 	add.w	r4, r4, #768	; 0x300
    88e2:	d202      	bcs.n	88ea <__aeabi_ddiv+0x6e>
    88e4:	085b      	lsrs	r3, r3, #1
    88e6:	ea4f 0232 	mov.w	r2, r2, rrx
    88ea:	1ab6      	subs	r6, r6, r2
    88ec:	eb65 0503 	sbc.w	r5, r5, r3
    88f0:	085b      	lsrs	r3, r3, #1
    88f2:	ea4f 0232 	mov.w	r2, r2, rrx
    88f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    88fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    88fe:	ebb6 0e02 	subs.w	lr, r6, r2
    8902:	eb75 0e03 	sbcs.w	lr, r5, r3
    8906:	bf22      	ittt	cs
    8908:	1ab6      	subcs	r6, r6, r2
    890a:	4675      	movcs	r5, lr
    890c:	ea40 000c 	orrcs.w	r0, r0, ip
    8910:	085b      	lsrs	r3, r3, #1
    8912:	ea4f 0232 	mov.w	r2, r2, rrx
    8916:	ebb6 0e02 	subs.w	lr, r6, r2
    891a:	eb75 0e03 	sbcs.w	lr, r5, r3
    891e:	bf22      	ittt	cs
    8920:	1ab6      	subcs	r6, r6, r2
    8922:	4675      	movcs	r5, lr
    8924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8928:	085b      	lsrs	r3, r3, #1
    892a:	ea4f 0232 	mov.w	r2, r2, rrx
    892e:	ebb6 0e02 	subs.w	lr, r6, r2
    8932:	eb75 0e03 	sbcs.w	lr, r5, r3
    8936:	bf22      	ittt	cs
    8938:	1ab6      	subcs	r6, r6, r2
    893a:	4675      	movcs	r5, lr
    893c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8940:	085b      	lsrs	r3, r3, #1
    8942:	ea4f 0232 	mov.w	r2, r2, rrx
    8946:	ebb6 0e02 	subs.w	lr, r6, r2
    894a:	eb75 0e03 	sbcs.w	lr, r5, r3
    894e:	bf22      	ittt	cs
    8950:	1ab6      	subcs	r6, r6, r2
    8952:	4675      	movcs	r5, lr
    8954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8958:	ea55 0e06 	orrs.w	lr, r5, r6
    895c:	d018      	beq.n	8990 <__aeabi_ddiv+0x114>
    895e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    8962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    8966:	ea4f 1606 	mov.w	r6, r6, lsl #4
    896a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    896e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    897a:	d1c0      	bne.n	88fe <__aeabi_ddiv+0x82>
    897c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8980:	d10b      	bne.n	899a <__aeabi_ddiv+0x11e>
    8982:	ea41 0100 	orr.w	r1, r1, r0
    8986:	f04f 0000 	mov.w	r0, #0
    898a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    898e:	e7b6      	b.n	88fe <__aeabi_ddiv+0x82>
    8990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8994:	bf04      	itt	eq
    8996:	4301      	orreq	r1, r0
    8998:	2000      	moveq	r0, #0
    899a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    899e:	bf88      	it	hi
    89a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    89a4:	f63f aeaf 	bhi.w	8706 <__aeabi_dmul+0xde>
    89a8:	ebb5 0c03 	subs.w	ip, r5, r3
    89ac:	bf04      	itt	eq
    89ae:	ebb6 0c02 	subseq.w	ip, r6, r2
    89b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    89b6:	f150 0000 	adcs.w	r0, r0, #0
    89ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    89be:	bd70      	pop	{r4, r5, r6, pc}
    89c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    89c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    89c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    89cc:	bfc2      	ittt	gt
    89ce:	ebd4 050c 	rsbsgt	r5, r4, ip
    89d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    89d6:	bd70      	popgt	{r4, r5, r6, pc}
    89d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    89dc:	f04f 0e00 	mov.w	lr, #0
    89e0:	3c01      	subs	r4, #1
    89e2:	e690      	b.n	8706 <__aeabi_dmul+0xde>
    89e4:	ea45 0e06 	orr.w	lr, r5, r6
    89e8:	e68d      	b.n	8706 <__aeabi_dmul+0xde>
    89ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    89ee:	ea94 0f0c 	teq	r4, ip
    89f2:	bf08      	it	eq
    89f4:	ea95 0f0c 	teqeq	r5, ip
    89f8:	f43f af3b 	beq.w	8872 <__aeabi_dmul+0x24a>
    89fc:	ea94 0f0c 	teq	r4, ip
    8a00:	d10a      	bne.n	8a18 <__aeabi_ddiv+0x19c>
    8a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8a06:	f47f af34 	bne.w	8872 <__aeabi_dmul+0x24a>
    8a0a:	ea95 0f0c 	teq	r5, ip
    8a0e:	f47f af25 	bne.w	885c <__aeabi_dmul+0x234>
    8a12:	4610      	mov	r0, r2
    8a14:	4619      	mov	r1, r3
    8a16:	e72c      	b.n	8872 <__aeabi_dmul+0x24a>
    8a18:	ea95 0f0c 	teq	r5, ip
    8a1c:	d106      	bne.n	8a2c <__aeabi_ddiv+0x1b0>
    8a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8a22:	f43f aefd 	beq.w	8820 <__aeabi_dmul+0x1f8>
    8a26:	4610      	mov	r0, r2
    8a28:	4619      	mov	r1, r3
    8a2a:	e722      	b.n	8872 <__aeabi_dmul+0x24a>
    8a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8a30:	bf18      	it	ne
    8a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8a36:	f47f aec5 	bne.w	87c4 <__aeabi_dmul+0x19c>
    8a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    8a3e:	f47f af0d 	bne.w	885c <__aeabi_dmul+0x234>
    8a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    8a46:	f47f aeeb 	bne.w	8820 <__aeabi_dmul+0x1f8>
    8a4a:	e712      	b.n	8872 <__aeabi_dmul+0x24a>

00008a4c <__aeabi_d2f>:
    8a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    8a54:	bf24      	itt	cs
    8a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8a5e:	d90d      	bls.n	8a7c <__aeabi_d2f+0x30>
    8a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    8a74:	bf08      	it	eq
    8a76:	f020 0001 	biceq.w	r0, r0, #1
    8a7a:	4770      	bx	lr
    8a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8a80:	d121      	bne.n	8ac6 <__aeabi_d2f+0x7a>
    8a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    8a86:	bfbc      	itt	lt
    8a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8a8c:	4770      	bxlt	lr
    8a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
    8a96:	f1c2 0218 	rsb	r2, r2, #24
    8a9a:	f1c2 0c20 	rsb	ip, r2, #32
    8a9e:	fa10 f30c 	lsls.w	r3, r0, ip
    8aa2:	fa20 f002 	lsr.w	r0, r0, r2
    8aa6:	bf18      	it	ne
    8aa8:	f040 0001 	orrne.w	r0, r0, #1
    8aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    8ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
    8ab8:	ea40 000c 	orr.w	r0, r0, ip
    8abc:	fa23 f302 	lsr.w	r3, r3, r2
    8ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8ac4:	e7cc      	b.n	8a60 <__aeabi_d2f+0x14>
    8ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8aca:	d107      	bne.n	8adc <__aeabi_d2f+0x90>
    8acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8ad0:	bf1e      	ittt	ne
    8ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    8ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8ada:	4770      	bxne	lr
    8adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ae8:	4770      	bx	lr
    8aea:	bf00      	nop

00008aec <__aeabi_frsub>:
    8aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8af0:	e002      	b.n	8af8 <__addsf3>
    8af2:	bf00      	nop

00008af4 <__aeabi_fsub>:
    8af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00008af8 <__addsf3>:
    8af8:	0042      	lsls	r2, r0, #1
    8afa:	bf1f      	itttt	ne
    8afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    8b00:	ea92 0f03 	teqne	r2, r3
    8b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8b0c:	d06a      	beq.n	8be4 <__addsf3+0xec>
    8b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8b16:	bfc1      	itttt	gt
    8b18:	18d2      	addgt	r2, r2, r3
    8b1a:	4041      	eorgt	r1, r0
    8b1c:	4048      	eorgt	r0, r1
    8b1e:	4041      	eorgt	r1, r0
    8b20:	bfb8      	it	lt
    8b22:	425b      	neglt	r3, r3
    8b24:	2b19      	cmp	r3, #25
    8b26:	bf88      	it	hi
    8b28:	4770      	bxhi	lr
    8b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8b36:	bf18      	it	ne
    8b38:	4240      	negne	r0, r0
    8b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8b46:	bf18      	it	ne
    8b48:	4249      	negne	r1, r1
    8b4a:	ea92 0f03 	teq	r2, r3
    8b4e:	d03f      	beq.n	8bd0 <__addsf3+0xd8>
    8b50:	f1a2 0201 	sub.w	r2, r2, #1
    8b54:	fa41 fc03 	asr.w	ip, r1, r3
    8b58:	eb10 000c 	adds.w	r0, r0, ip
    8b5c:	f1c3 0320 	rsb	r3, r3, #32
    8b60:	fa01 f103 	lsl.w	r1, r1, r3
    8b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8b68:	d502      	bpl.n	8b70 <__addsf3+0x78>
    8b6a:	4249      	negs	r1, r1
    8b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8b74:	d313      	bcc.n	8b9e <__addsf3+0xa6>
    8b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8b7a:	d306      	bcc.n	8b8a <__addsf3+0x92>
    8b7c:	0840      	lsrs	r0, r0, #1
    8b7e:	ea4f 0131 	mov.w	r1, r1, rrx
    8b82:	f102 0201 	add.w	r2, r2, #1
    8b86:	2afe      	cmp	r2, #254	; 0xfe
    8b88:	d251      	bcs.n	8c2e <__addsf3+0x136>
    8b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8b92:	bf08      	it	eq
    8b94:	f020 0001 	biceq.w	r0, r0, #1
    8b98:	ea40 0003 	orr.w	r0, r0, r3
    8b9c:	4770      	bx	lr
    8b9e:	0049      	lsls	r1, r1, #1
    8ba0:	eb40 0000 	adc.w	r0, r0, r0
    8ba4:	3a01      	subs	r2, #1
    8ba6:	bf28      	it	cs
    8ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8bac:	d2ed      	bcs.n	8b8a <__addsf3+0x92>
    8bae:	fab0 fc80 	clz	ip, r0
    8bb2:	f1ac 0c08 	sub.w	ip, ip, #8
    8bb6:	ebb2 020c 	subs.w	r2, r2, ip
    8bba:	fa00 f00c 	lsl.w	r0, r0, ip
    8bbe:	bfaa      	itet	ge
    8bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8bc4:	4252      	neglt	r2, r2
    8bc6:	4318      	orrge	r0, r3
    8bc8:	bfbc      	itt	lt
    8bca:	40d0      	lsrlt	r0, r2
    8bcc:	4318      	orrlt	r0, r3
    8bce:	4770      	bx	lr
    8bd0:	f092 0f00 	teq	r2, #0
    8bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8bd8:	bf06      	itte	eq
    8bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8bde:	3201      	addeq	r2, #1
    8be0:	3b01      	subne	r3, #1
    8be2:	e7b5      	b.n	8b50 <__addsf3+0x58>
    8be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8bec:	bf18      	it	ne
    8bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8bf2:	d021      	beq.n	8c38 <__addsf3+0x140>
    8bf4:	ea92 0f03 	teq	r2, r3
    8bf8:	d004      	beq.n	8c04 <__addsf3+0x10c>
    8bfa:	f092 0f00 	teq	r2, #0
    8bfe:	bf08      	it	eq
    8c00:	4608      	moveq	r0, r1
    8c02:	4770      	bx	lr
    8c04:	ea90 0f01 	teq	r0, r1
    8c08:	bf1c      	itt	ne
    8c0a:	2000      	movne	r0, #0
    8c0c:	4770      	bxne	lr
    8c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8c12:	d104      	bne.n	8c1e <__addsf3+0x126>
    8c14:	0040      	lsls	r0, r0, #1
    8c16:	bf28      	it	cs
    8c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8c1c:	4770      	bx	lr
    8c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8c22:	bf3c      	itt	cc
    8c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8c28:	4770      	bxcc	lr
    8c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c36:	4770      	bx	lr
    8c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8c3c:	bf16      	itet	ne
    8c3e:	4608      	movne	r0, r1
    8c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8c44:	4601      	movne	r1, r0
    8c46:	0242      	lsls	r2, r0, #9
    8c48:	bf06      	itte	eq
    8c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8c4e:	ea90 0f01 	teqeq	r0, r1
    8c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8c56:	4770      	bx	lr

00008c58 <__aeabi_ui2f>:
    8c58:	f04f 0300 	mov.w	r3, #0
    8c5c:	e004      	b.n	8c68 <__aeabi_i2f+0x8>
    8c5e:	bf00      	nop

00008c60 <__aeabi_i2f>:
    8c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8c64:	bf48      	it	mi
    8c66:	4240      	negmi	r0, r0
    8c68:	ea5f 0c00 	movs.w	ip, r0
    8c6c:	bf08      	it	eq
    8c6e:	4770      	bxeq	lr
    8c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8c74:	4601      	mov	r1, r0
    8c76:	f04f 0000 	mov.w	r0, #0
    8c7a:	e01c      	b.n	8cb6 <__aeabi_l2f+0x2a>

00008c7c <__aeabi_ul2f>:
    8c7c:	ea50 0201 	orrs.w	r2, r0, r1
    8c80:	bf08      	it	eq
    8c82:	4770      	bxeq	lr
    8c84:	f04f 0300 	mov.w	r3, #0
    8c88:	e00a      	b.n	8ca0 <__aeabi_l2f+0x14>
    8c8a:	bf00      	nop

00008c8c <__aeabi_l2f>:
    8c8c:	ea50 0201 	orrs.w	r2, r0, r1
    8c90:	bf08      	it	eq
    8c92:	4770      	bxeq	lr
    8c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8c98:	d502      	bpl.n	8ca0 <__aeabi_l2f+0x14>
    8c9a:	4240      	negs	r0, r0
    8c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ca0:	ea5f 0c01 	movs.w	ip, r1
    8ca4:	bf02      	ittt	eq
    8ca6:	4684      	moveq	ip, r0
    8ca8:	4601      	moveq	r1, r0
    8caa:	2000      	moveq	r0, #0
    8cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8cb0:	bf08      	it	eq
    8cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8cba:	fabc f28c 	clz	r2, ip
    8cbe:	3a08      	subs	r2, #8
    8cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8cc4:	db10      	blt.n	8ce8 <__aeabi_l2f+0x5c>
    8cc6:	fa01 fc02 	lsl.w	ip, r1, r2
    8cca:	4463      	add	r3, ip
    8ccc:	fa00 fc02 	lsl.w	ip, r0, r2
    8cd0:	f1c2 0220 	rsb	r2, r2, #32
    8cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8cd8:	fa20 f202 	lsr.w	r2, r0, r2
    8cdc:	eb43 0002 	adc.w	r0, r3, r2
    8ce0:	bf08      	it	eq
    8ce2:	f020 0001 	biceq.w	r0, r0, #1
    8ce6:	4770      	bx	lr
    8ce8:	f102 0220 	add.w	r2, r2, #32
    8cec:	fa01 fc02 	lsl.w	ip, r1, r2
    8cf0:	f1c2 0220 	rsb	r2, r2, #32
    8cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8cf8:	fa21 f202 	lsr.w	r2, r1, r2
    8cfc:	eb43 0002 	adc.w	r0, r3, r2
    8d00:	bf08      	it	eq
    8d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8d06:	4770      	bx	lr

00008d08 <__aeabi_uldivmod>:
    8d08:	b953      	cbnz	r3, 8d20 <__aeabi_uldivmod+0x18>
    8d0a:	b94a      	cbnz	r2, 8d20 <__aeabi_uldivmod+0x18>
    8d0c:	2900      	cmp	r1, #0
    8d0e:	bf08      	it	eq
    8d10:	2800      	cmpeq	r0, #0
    8d12:	bf1c      	itt	ne
    8d14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8d18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    8d1c:	f000 b80c 	b.w	8d38 <__aeabi_idiv0>
    8d20:	f1ad 0c08 	sub.w	ip, sp, #8
    8d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8d28:	f000 f808 	bl	8d3c <__udivmoddi4>
    8d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
    8d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8d34:	b004      	add	sp, #16
    8d36:	4770      	bx	lr

00008d38 <__aeabi_idiv0>:
    8d38:	4770      	bx	lr
    8d3a:	bf00      	nop

00008d3c <__udivmoddi4>:
    8d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d40:	4686      	mov	lr, r0
    8d42:	468c      	mov	ip, r1
    8d44:	4608      	mov	r0, r1
    8d46:	9e08      	ldr	r6, [sp, #32]
    8d48:	4615      	mov	r5, r2
    8d4a:	4674      	mov	r4, lr
    8d4c:	4619      	mov	r1, r3
    8d4e:	2b00      	cmp	r3, #0
    8d50:	f040 80c1 	bne.w	8ed6 <__udivmoddi4+0x19a>
    8d54:	4285      	cmp	r5, r0
    8d56:	fab2 f282 	clz	r2, r2
    8d5a:	d945      	bls.n	8de8 <__udivmoddi4+0xac>
    8d5c:	b14a      	cbz	r2, 8d72 <__udivmoddi4+0x36>
    8d5e:	f1c2 0320 	rsb	r3, r2, #32
    8d62:	fa00 fc02 	lsl.w	ip, r0, r2
    8d66:	4095      	lsls	r5, r2
    8d68:	4094      	lsls	r4, r2
    8d6a:	fa2e f303 	lsr.w	r3, lr, r3
    8d6e:	ea43 0c0c 	orr.w	ip, r3, ip
    8d72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8d76:	b2a8      	uxth	r0, r5
    8d78:	0c23      	lsrs	r3, r4, #16
    8d7a:	fbbc f8fe 	udiv	r8, ip, lr
    8d7e:	fb0e cc18 	mls	ip, lr, r8, ip
    8d82:	fb08 f900 	mul.w	r9, r8, r0
    8d86:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    8d8a:	4599      	cmp	r9, r3
    8d8c:	d928      	bls.n	8de0 <__udivmoddi4+0xa4>
    8d8e:	18eb      	adds	r3, r5, r3
    8d90:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    8d94:	d204      	bcs.n	8da0 <__udivmoddi4+0x64>
    8d96:	4599      	cmp	r9, r3
    8d98:	d902      	bls.n	8da0 <__udivmoddi4+0x64>
    8d9a:	f1a8 0702 	sub.w	r7, r8, #2
    8d9e:	442b      	add	r3, r5
    8da0:	eba3 0309 	sub.w	r3, r3, r9
    8da4:	b2a4      	uxth	r4, r4
    8da6:	fbb3 fcfe 	udiv	ip, r3, lr
    8daa:	fb0e 331c 	mls	r3, lr, ip, r3
    8dae:	fb0c f000 	mul.w	r0, ip, r0
    8db2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8db6:	42a0      	cmp	r0, r4
    8db8:	d914      	bls.n	8de4 <__udivmoddi4+0xa8>
    8dba:	192c      	adds	r4, r5, r4
    8dbc:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    8dc0:	d204      	bcs.n	8dcc <__udivmoddi4+0x90>
    8dc2:	42a0      	cmp	r0, r4
    8dc4:	d902      	bls.n	8dcc <__udivmoddi4+0x90>
    8dc6:	f1ac 0302 	sub.w	r3, ip, #2
    8dca:	442c      	add	r4, r5
    8dcc:	1a24      	subs	r4, r4, r0
    8dce:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    8dd2:	b11e      	cbz	r6, 8ddc <__udivmoddi4+0xa0>
    8dd4:	40d4      	lsrs	r4, r2
    8dd6:	2300      	movs	r3, #0
    8dd8:	6034      	str	r4, [r6, #0]
    8dda:	6073      	str	r3, [r6, #4]
    8ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8de0:	4647      	mov	r7, r8
    8de2:	e7dd      	b.n	8da0 <__udivmoddi4+0x64>
    8de4:	4663      	mov	r3, ip
    8de6:	e7f1      	b.n	8dcc <__udivmoddi4+0x90>
    8de8:	bb92      	cbnz	r2, 8e50 <__udivmoddi4+0x114>
    8dea:	1b43      	subs	r3, r0, r5
    8dec:	2101      	movs	r1, #1
    8dee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8df2:	b2af      	uxth	r7, r5
    8df4:	0c20      	lsrs	r0, r4, #16
    8df6:	fbb3 fcfe 	udiv	ip, r3, lr
    8dfa:	fb0e 331c 	mls	r3, lr, ip, r3
    8dfe:	fb0c f807 	mul.w	r8, ip, r7
    8e02:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8e06:	4598      	cmp	r8, r3
    8e08:	d961      	bls.n	8ece <__udivmoddi4+0x192>
    8e0a:	18eb      	adds	r3, r5, r3
    8e0c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    8e10:	d204      	bcs.n	8e1c <__udivmoddi4+0xe0>
    8e12:	4598      	cmp	r8, r3
    8e14:	d902      	bls.n	8e1c <__udivmoddi4+0xe0>
    8e16:	f1ac 0002 	sub.w	r0, ip, #2
    8e1a:	442b      	add	r3, r5
    8e1c:	eba3 0308 	sub.w	r3, r3, r8
    8e20:	b2a4      	uxth	r4, r4
    8e22:	fbb3 fcfe 	udiv	ip, r3, lr
    8e26:	fb0e 331c 	mls	r3, lr, ip, r3
    8e2a:	fb0c f707 	mul.w	r7, ip, r7
    8e2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8e32:	42a7      	cmp	r7, r4
    8e34:	d94d      	bls.n	8ed2 <__udivmoddi4+0x196>
    8e36:	192c      	adds	r4, r5, r4
    8e38:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    8e3c:	d204      	bcs.n	8e48 <__udivmoddi4+0x10c>
    8e3e:	42a7      	cmp	r7, r4
    8e40:	d902      	bls.n	8e48 <__udivmoddi4+0x10c>
    8e42:	f1ac 0302 	sub.w	r3, ip, #2
    8e46:	442c      	add	r4, r5
    8e48:	1be4      	subs	r4, r4, r7
    8e4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8e4e:	e7c0      	b.n	8dd2 <__udivmoddi4+0x96>
    8e50:	f1c2 0320 	rsb	r3, r2, #32
    8e54:	4095      	lsls	r5, r2
    8e56:	4094      	lsls	r4, r2
    8e58:	fa20 f103 	lsr.w	r1, r0, r3
    8e5c:	fa2e f303 	lsr.w	r3, lr, r3
    8e60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8e64:	4090      	lsls	r0, r2
    8e66:	b2af      	uxth	r7, r5
    8e68:	4303      	orrs	r3, r0
    8e6a:	fbb1 fcfe 	udiv	ip, r1, lr
    8e6e:	fb0e 101c 	mls	r0, lr, ip, r1
    8e72:	0c19      	lsrs	r1, r3, #16
    8e74:	fb0c f807 	mul.w	r8, ip, r7
    8e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8e7c:	4588      	cmp	r8, r1
    8e7e:	d922      	bls.n	8ec6 <__udivmoddi4+0x18a>
    8e80:	1869      	adds	r1, r5, r1
    8e82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    8e86:	d204      	bcs.n	8e92 <__udivmoddi4+0x156>
    8e88:	4588      	cmp	r8, r1
    8e8a:	d902      	bls.n	8e92 <__udivmoddi4+0x156>
    8e8c:	f1ac 0002 	sub.w	r0, ip, #2
    8e90:	4429      	add	r1, r5
    8e92:	eba1 0108 	sub.w	r1, r1, r8
    8e96:	b29b      	uxth	r3, r3
    8e98:	fbb1 fcfe 	udiv	ip, r1, lr
    8e9c:	fb0e 111c 	mls	r1, lr, ip, r1
    8ea0:	fb0c f707 	mul.w	r7, ip, r7
    8ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8ea8:	429f      	cmp	r7, r3
    8eaa:	d90e      	bls.n	8eca <__udivmoddi4+0x18e>
    8eac:	18eb      	adds	r3, r5, r3
    8eae:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    8eb2:	d204      	bcs.n	8ebe <__udivmoddi4+0x182>
    8eb4:	429f      	cmp	r7, r3
    8eb6:	d902      	bls.n	8ebe <__udivmoddi4+0x182>
    8eb8:	f1ac 0102 	sub.w	r1, ip, #2
    8ebc:	442b      	add	r3, r5
    8ebe:	1bdb      	subs	r3, r3, r7
    8ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8ec4:	e793      	b.n	8dee <__udivmoddi4+0xb2>
    8ec6:	4660      	mov	r0, ip
    8ec8:	e7e3      	b.n	8e92 <__udivmoddi4+0x156>
    8eca:	4661      	mov	r1, ip
    8ecc:	e7f7      	b.n	8ebe <__udivmoddi4+0x182>
    8ece:	4660      	mov	r0, ip
    8ed0:	e7a4      	b.n	8e1c <__udivmoddi4+0xe0>
    8ed2:	4663      	mov	r3, ip
    8ed4:	e7b8      	b.n	8e48 <__udivmoddi4+0x10c>
    8ed6:	4283      	cmp	r3, r0
    8ed8:	d906      	bls.n	8ee8 <__udivmoddi4+0x1ac>
    8eda:	b916      	cbnz	r6, 8ee2 <__udivmoddi4+0x1a6>
    8edc:	2100      	movs	r1, #0
    8ede:	4608      	mov	r0, r1
    8ee0:	e77c      	b.n	8ddc <__udivmoddi4+0xa0>
    8ee2:	e9c6 e000 	strd	lr, r0, [r6]
    8ee6:	e7f9      	b.n	8edc <__udivmoddi4+0x1a0>
    8ee8:	fab3 f783 	clz	r7, r3
    8eec:	b98f      	cbnz	r7, 8f12 <__udivmoddi4+0x1d6>
    8eee:	4283      	cmp	r3, r0
    8ef0:	d301      	bcc.n	8ef6 <__udivmoddi4+0x1ba>
    8ef2:	4572      	cmp	r2, lr
    8ef4:	d808      	bhi.n	8f08 <__udivmoddi4+0x1cc>
    8ef6:	ebbe 0402 	subs.w	r4, lr, r2
    8efa:	eb60 0303 	sbc.w	r3, r0, r3
    8efe:	2001      	movs	r0, #1
    8f00:	469c      	mov	ip, r3
    8f02:	b91e      	cbnz	r6, 8f0c <__udivmoddi4+0x1d0>
    8f04:	2100      	movs	r1, #0
    8f06:	e769      	b.n	8ddc <__udivmoddi4+0xa0>
    8f08:	4638      	mov	r0, r7
    8f0a:	e7fa      	b.n	8f02 <__udivmoddi4+0x1c6>
    8f0c:	e9c6 4c00 	strd	r4, ip, [r6]
    8f10:	e7f8      	b.n	8f04 <__udivmoddi4+0x1c8>
    8f12:	f1c7 0c20 	rsb	ip, r7, #32
    8f16:	40bb      	lsls	r3, r7
    8f18:	fa0e f507 	lsl.w	r5, lr, r7
    8f1c:	fa22 f40c 	lsr.w	r4, r2, ip
    8f20:	fa2e f10c 	lsr.w	r1, lr, ip
    8f24:	40ba      	lsls	r2, r7
    8f26:	431c      	orrs	r4, r3
    8f28:	fa20 f30c 	lsr.w	r3, r0, ip
    8f2c:	40b8      	lsls	r0, r7
    8f2e:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8f32:	4301      	orrs	r1, r0
    8f34:	fa1f fe84 	uxth.w	lr, r4
    8f38:	fbb3 f8f9 	udiv	r8, r3, r9
    8f3c:	fb09 3018 	mls	r0, r9, r8, r3
    8f40:	0c0b      	lsrs	r3, r1, #16
    8f42:	fb08 fa0e 	mul.w	sl, r8, lr
    8f46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8f4a:	459a      	cmp	sl, r3
    8f4c:	d940      	bls.n	8fd0 <__udivmoddi4+0x294>
    8f4e:	18e3      	adds	r3, r4, r3
    8f50:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    8f54:	d204      	bcs.n	8f60 <__udivmoddi4+0x224>
    8f56:	459a      	cmp	sl, r3
    8f58:	d902      	bls.n	8f60 <__udivmoddi4+0x224>
    8f5a:	f1a8 0002 	sub.w	r0, r8, #2
    8f5e:	4423      	add	r3, r4
    8f60:	eba3 030a 	sub.w	r3, r3, sl
    8f64:	b289      	uxth	r1, r1
    8f66:	fbb3 f8f9 	udiv	r8, r3, r9
    8f6a:	fb09 3318 	mls	r3, r9, r8, r3
    8f6e:	fb08 fe0e 	mul.w	lr, r8, lr
    8f72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8f76:	458e      	cmp	lr, r1
    8f78:	d92c      	bls.n	8fd4 <__udivmoddi4+0x298>
    8f7a:	1861      	adds	r1, r4, r1
    8f7c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    8f80:	d204      	bcs.n	8f8c <__udivmoddi4+0x250>
    8f82:	458e      	cmp	lr, r1
    8f84:	d902      	bls.n	8f8c <__udivmoddi4+0x250>
    8f86:	f1a8 0302 	sub.w	r3, r8, #2
    8f8a:	4421      	add	r1, r4
    8f8c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8f90:	eba1 010e 	sub.w	r1, r1, lr
    8f94:	fba0 9802 	umull	r9, r8, r0, r2
    8f98:	4541      	cmp	r1, r8
    8f9a:	46ce      	mov	lr, r9
    8f9c:	4643      	mov	r3, r8
    8f9e:	d302      	bcc.n	8fa6 <__udivmoddi4+0x26a>
    8fa0:	d106      	bne.n	8fb0 <__udivmoddi4+0x274>
    8fa2:	454d      	cmp	r5, r9
    8fa4:	d204      	bcs.n	8fb0 <__udivmoddi4+0x274>
    8fa6:	3801      	subs	r0, #1
    8fa8:	ebb9 0e02 	subs.w	lr, r9, r2
    8fac:	eb68 0304 	sbc.w	r3, r8, r4
    8fb0:	2e00      	cmp	r6, #0
    8fb2:	d0a7      	beq.n	8f04 <__udivmoddi4+0x1c8>
    8fb4:	ebb5 020e 	subs.w	r2, r5, lr
    8fb8:	eb61 0103 	sbc.w	r1, r1, r3
    8fbc:	fa01 fc0c 	lsl.w	ip, r1, ip
    8fc0:	fa22 f307 	lsr.w	r3, r2, r7
    8fc4:	40f9      	lsrs	r1, r7
    8fc6:	ea4c 0303 	orr.w	r3, ip, r3
    8fca:	e9c6 3100 	strd	r3, r1, [r6]
    8fce:	e799      	b.n	8f04 <__udivmoddi4+0x1c8>
    8fd0:	4640      	mov	r0, r8
    8fd2:	e7c5      	b.n	8f60 <__udivmoddi4+0x224>
    8fd4:	4643      	mov	r3, r8
    8fd6:	e7d9      	b.n	8f8c <__udivmoddi4+0x250>

00008fd8 <strcmp>:
    8fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
    8fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
    8fe0:	2a01      	cmp	r2, #1
    8fe2:	bf28      	it	cs
    8fe4:	429a      	cmpcs	r2, r3
    8fe6:	d0f7      	beq.n	8fd8 <strcmp>
    8fe8:	1ad0      	subs	r0, r2, r3
    8fea:	4770      	bx	lr

00008fec <strlen>:
    8fec:	4603      	mov	r3, r0
    8fee:	f813 2b01 	ldrb.w	r2, [r3], #1
    8ff2:	2a00      	cmp	r2, #0
    8ff4:	d1fb      	bne.n	8fee <strlen+0x2>
    8ff6:	1a18      	subs	r0, r3, r0
    8ff8:	3801      	subs	r0, #1
    8ffa:	4770      	bx	lr
    8ffc:	0000      	movs	r0, r0
	...

00009000 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
    9000:	2300      	movs	r3, #0
{
    9002:	b570      	push	{r4, r5, r6, lr}
    9004:	b086      	sub	sp, #24
	struct at_param_list resp_list = {0};
    9006:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    900a:	2304      	movs	r3, #4
{
    900c:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
    900e:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
    9010:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
    9012:	2800      	cmp	r0, #0
    9014:	d079      	beq.n	910a <parse_edrx+0x10a>
    9016:	2900      	cmp	r1, #0
    9018:	d077      	beq.n	910a <parse_edrx+0x10a>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    901a:	2106      	movs	r1, #6
    901c:	a804      	add	r0, sp, #16
    901e:	f007 fef3 	bl	10e08 <at_params_list_init>
	if (err) {
    9022:	4604      	mov	r4, r0
    9024:	bb60      	cbnz	r0, 9080 <parse_edrx+0x80>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    9026:	4601      	mov	r1, r0
    9028:	aa04      	add	r2, sp, #16
    902a:	4630      	mov	r0, r6
    902c:	f007 fed3 	bl	10dd6 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    9030:	4604      	mov	r4, r0
    9032:	bb10      	cbnz	r0, 907a <parse_edrx+0x7a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    9034:	2103      	movs	r1, #3
    9036:	ab01      	add	r3, sp, #4
    9038:	aa02      	add	r2, sp, #8
    903a:	a804      	add	r0, sp, #16
    903c:	f007 ffec 	bl	11018 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
    9040:	4604      	mov	r4, r0
    9042:	b9d0      	cbnz	r0, 907a <parse_edrx+0x7a>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
    9044:	9b01      	ldr	r3, [sp, #4]
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
    9046:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9048:	3318      	adds	r3, #24
    904a:	446b      	add	r3, sp
    904c:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
    9050:	2202      	movs	r2, #2
    9052:	a802      	add	r0, sp, #8
    9054:	f006 ff78 	bl	ff48 <strtoul>

	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
    9058:	466a      	mov	r2, sp
	idx = strtoul(tmp_buf, NULL, 2);
    905a:	4606      	mov	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
    905c:	2101      	movs	r1, #1
    905e:	a804      	add	r0, sp, #16
    9060:	f007 ffae 	bl	10fc0 <at_params_int_get>
	if (err) {
    9064:	4604      	mov	r4, r0
    9066:	b940      	cbnz	r0, 907a <parse_edrx+0x7a>
	}

	/* The acces technology indicators 4 for LTE-M and 5 for NB-IoT are
	 * specified in 3GPP 27.007 Ch. 7.41.
	 */
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
    9068:	9b00      	ldr	r3, [sp, #0]
	idx = strtoul(tmp_buf, NULL, 2);
    906a:	b2f0      	uxtb	r0, r6
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
    906c:	2b04      	cmp	r3, #4
    906e:	d011      	beq.n	9094 <parse_edrx+0x94>
    9070:	2b05      	cmp	r3, #5
    9072:	d008      	beq.n	9086 <parse_edrx+0x86>
    9074:	702c      	strb	r4, [r5, #0]
		return -ENOTCONN;
    9076:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    907a:	a804      	add	r0, sp, #16
    907c:	f007 feee 	bl	10e5c <at_params_list_free>

	return err;
}
    9080:	4620      	mov	r0, r4
    9082:	b006      	add	sp, #24
    9084:	bd70      	pop	{r4, r5, r6, pc}
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
    9086:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9088:	280f      	cmp	r0, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
    908a:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    908c:	d936      	bls.n	90fc <parse_edrx+0xfc>
		return -EINVAL;
    908e:	f06f 0415 	mvn.w	r4, #21
    9092:	e7f2      	b.n	907a <parse_edrx+0x7a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
    9094:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9096:	280f      	cmp	r0, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
    9098:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    909a:	d8f8      	bhi.n	908e <parse_edrx+0x8e>
		multiplier = edrx_lookup_ltem[idx];
    909c:	4b1e      	ldr	r3, [pc, #120]	; (9118 <parse_edrx+0x118>)
		*ptw_multiplier = 1.28;
    909e:	4e1f      	ldr	r6, [pc, #124]	; (911c <parse_edrx+0x11c>)
		multiplier = edrx_lookup_ltem[idx];
    90a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    90a4:	b378      	cbz	r0, 9106 <parse_edrx+0x106>
    90a6:	f7ff fa55 	bl	8554 <__aeabi_i2d>
    90aa:	a319      	add	r3, pc, #100	; (adr r3, 9110 <parse_edrx+0x110>)
    90ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    90b0:	f7ff faba 	bl	8628 <__aeabi_dmul>
    90b4:	f7ff fcca 	bl	8a4c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    90b8:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    90ba:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    90bc:	eb0d 0301 	add.w	r3, sp, r1
    90c0:	aa02      	add	r2, sp, #8
    90c2:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
    90c4:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    90c6:	f007 ffa7 	bl	11018 <at_params_string_get>
	if (err) {
    90ca:	4604      	mov	r4, r0
    90cc:	2800      	cmp	r0, #0
    90ce:	d1d4      	bne.n	907a <parse_edrx+0x7a>
	tmp_buf[len] = '\0';
    90d0:	9b01      	ldr	r3, [sp, #4]
	idx = strtoul(tmp_buf, NULL, 2);
    90d2:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    90d4:	3318      	adds	r3, #24
    90d6:	446b      	add	r3, sp
    90d8:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
    90dc:	2202      	movs	r2, #2
    90de:	a802      	add	r0, sp, #8
    90e0:	f006 ff32 	bl	ff48 <strtoul>
    90e4:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
    90e6:	280f      	cmp	r0, #15
    90e8:	d8d1      	bhi.n	908e <parse_edrx+0x8e>
	idx += 1;
    90ea:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    90ec:	b2c0      	uxtb	r0, r0
    90ee:	f7ff fdb7 	bl	8c60 <__aeabi_i2f>
    90f2:	4631      	mov	r1, r6
    90f4:	f7ff f828 	bl	8148 <__aeabi_fmul>
    90f8:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
    90fa:	e7be      	b.n	907a <parse_edrx+0x7a>
		multiplier = edrx_lookup_nbiot[idx];
    90fc:	4b08      	ldr	r3, [pc, #32]	; (9120 <parse_edrx+0x120>)
		*ptw_multiplier = 2.56;
    90fe:	4e09      	ldr	r6, [pc, #36]	; (9124 <parse_edrx+0x124>)
		multiplier = edrx_lookup_nbiot[idx];
    9100:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
		break;
    9104:	e7ce      	b.n	90a4 <parse_edrx+0xa4>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    9106:	4808      	ldr	r0, [pc, #32]	; (9128 <parse_edrx+0x128>)
    9108:	e7d6      	b.n	90b8 <parse_edrx+0xb8>
		return -EINVAL;
    910a:	f06f 0415 	mvn.w	r4, #21
    910e:	e7b7      	b.n	9080 <parse_edrx+0x80>
    9110:	47ae147b 	.word	0x47ae147b
    9114:	40247ae1 	.word	0x40247ae1
    9118:	000127e4 	.word	0x000127e4
    911c:	3fa3d70a 	.word	0x3fa3d70a
    9120:	000127c4 	.word	0x000127c4
    9124:	4023d70a 	.word	0x4023d70a
    9128:	40a3d70a 	.word	0x40a3d70a

0000912c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    912c:	4b01      	ldr	r3, [pc, #4]	; (9134 <char_out+0x8>)
    912e:	681b      	ldr	r3, [r3, #0]
    9130:	4718      	bx	r3
    9132:	bf00      	nop
    9134:	2000c580 	.word	0x2000c580

00009138 <__printk_hook_install>:
	_char_out = fn;
    9138:	4b01      	ldr	r3, [pc, #4]	; (9140 <__printk_hook_install+0x8>)
    913a:	6018      	str	r0, [r3, #0]
}
    913c:	4770      	bx	lr
    913e:	bf00      	nop
    9140:	2000c580 	.word	0x2000c580

00009144 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    9144:	b507      	push	{r0, r1, r2, lr}
    9146:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    9148:	2100      	movs	r1, #0
    914a:	4602      	mov	r2, r0
    914c:	9100      	str	r1, [sp, #0]
    914e:	4803      	ldr	r0, [pc, #12]	; (915c <vprintk+0x18>)
    9150:	f000 f976 	bl	9440 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    9154:	b003      	add	sp, #12
    9156:	f85d fb04 	ldr.w	pc, [sp], #4
    915a:	bf00      	nop
    915c:	0000912d 	.word	0x0000912d

00009160 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9164:	8b05      	ldrh	r5, [r0, #24]
{
    9166:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9168:	0728      	lsls	r0, r5, #28
{
    916a:	4690      	mov	r8, r2
	if (processing) {
    916c:	d411      	bmi.n	9192 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    916e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9170:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    9174:	f040 80cd 	bne.w	9312 <process_event+0x1b2>
			evt = process_recheck(mgr);
    9178:	4620      	mov	r0, r4
    917a:	f007 fb11 	bl	107a0 <process_recheck>
		}

		if (evt == EVT_NOP) {
    917e:	b178      	cbz	r0, 91a0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    9180:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9182:	8b21      	ldrh	r1, [r4, #24]
    9184:	2804      	cmp	r0, #4
    9186:	d811      	bhi.n	91ac <process_event+0x4c>
    9188:	e8df f000 	tbb	[pc, r0]
    918c:	856d10c3 	.word	0x856d10c3
    9190:	95          	.byte	0x95
    9191:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    9192:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9194:	bf0c      	ite	eq
    9196:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    919a:	f045 0520 	orrne.w	r5, r5, #32
    919e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    91a0:	f388 8811 	msr	BASEPRI, r8
    91a4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    91a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    91ac:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    91b0:	45aa      	cmp	sl, r5
    91b2:	f000 80a6 	beq.w	9302 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    91b6:	2700      	movs	r7, #0
    91b8:	46b9      	mov	r9, r7
    91ba:	463e      	mov	r6, r7
    91bc:	68a3      	ldr	r3, [r4, #8]
    91be:	2b00      	cmp	r3, #0
    91c0:	f000 80bd 	beq.w	933e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    91c4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    91c8:	8321      	strh	r1, [r4, #24]
    91ca:	f388 8811 	msr	BASEPRI, r8
    91ce:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    91d2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    91d4:	2900      	cmp	r1, #0
    91d6:	f000 80bb 	beq.w	9350 <process_event+0x1f0>
	return node->next;
    91da:	680d      	ldr	r5, [r1, #0]
    91dc:	2900      	cmp	r1, #0
    91de:	f000 80b7 	beq.w	9350 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    91e2:	4633      	mov	r3, r6
    91e4:	4652      	mov	r2, sl
    91e6:	4620      	mov	r0, r4
    91e8:	f8d1 8004 	ldr.w	r8, [r1, #4]
    91ec:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    91ee:	2d00      	cmp	r5, #0
    91f0:	d076      	beq.n	92e0 <process_event+0x180>
    91f2:	682b      	ldr	r3, [r5, #0]
    91f4:	4629      	mov	r1, r5
    91f6:	461d      	mov	r5, r3
    91f8:	e7f0      	b.n	91dc <process_event+0x7c>
    91fa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    91fe:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9200:	2a01      	cmp	r2, #1
    9202:	d81b      	bhi.n	923c <process_event+0xdc>
	list->head = NULL;
    9204:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9206:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    920a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    920c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    920e:	b289      	uxth	r1, r1
	list->tail = NULL;
    9210:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9214:	d109      	bne.n	922a <process_event+0xca>
    9216:	463b      	mov	r3, r7
    9218:	e003      	b.n	9222 <process_event+0xc2>
				mgr->refs += 1U;
    921a:	8b62      	ldrh	r2, [r4, #26]
    921c:	3201      	adds	r2, #1
    921e:	8362      	strh	r2, [r4, #26]
	return node->next;
    9220:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9222:	2b00      	cmp	r3, #0
    9224:	d1f9      	bne.n	921a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9226:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    922a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    922c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    922e:	f007 fab7 	bl	107a0 <process_recheck>
    9232:	2800      	cmp	r0, #0
    9234:	d07b      	beq.n	932e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9236:	f041 0120 	orr.w	r1, r1, #32
    923a:	e077      	b.n	932c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    923c:	2b04      	cmp	r3, #4
    923e:	d10a      	bne.n	9256 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9240:	f021 0107 	bic.w	r1, r1, #7
    9244:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    9246:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9248:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    924a:	f007 faa9 	bl	107a0 <process_recheck>
    924e:	b110      	cbz	r0, 9256 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9250:	f041 0120 	orr.w	r1, r1, #32
    9254:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9256:	8b21      	ldrh	r1, [r4, #24]
    9258:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    925c:	45aa      	cmp	sl, r5
    925e:	d050      	beq.n	9302 <process_event+0x1a2>
    9260:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    9262:	46b9      	mov	r9, r7
    9264:	e7aa      	b.n	91bc <process_event+0x5c>
			transit = mgr->transitions->start;
    9266:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9268:	f021 0107 	bic.w	r1, r1, #7
    926c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    9270:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    9272:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    9276:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    9278:	d12d      	bne.n	92d6 <process_event+0x176>
		    || (transit != NULL)) {
    927a:	f1b9 0f00 	cmp.w	r9, #0
    927e:	d040      	beq.n	9302 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9280:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    9284:	8321      	strh	r1, [r4, #24]
    9286:	f388 8811 	msr	BASEPRI, r8
    928a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    928e:	4620      	mov	r0, r4
    9290:	4939      	ldr	r1, [pc, #228]	; (9378 <process_event+0x218>)
    9292:	47c8      	blx	r9
    9294:	e029      	b.n	92ea <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9296:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    929a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    929c:	f041 0104 	orr.w	r1, r1, #4
    92a0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    92a2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    92a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    92a8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    92aa:	d0e6      	beq.n	927a <process_event+0x11a>
    92ac:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    92ae:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    92b2:	463e      	mov	r6, r7
    92b4:	e782      	b.n	91bc <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    92b6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    92ba:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    92bc:	f041 0105 	orr.w	r1, r1, #5
    92c0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    92c2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    92c4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    92c8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    92ca:	d0d6      	beq.n	927a <process_event+0x11a>
    92cc:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    92ce:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    92d2:	463e      	mov	r6, r7
    92d4:	e772      	b.n	91bc <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    92d6:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    92d8:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    92dc:	463e      	mov	r6, r7
    92de:	e76d      	b.n	91bc <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    92e0:	462b      	mov	r3, r5
    92e2:	e787      	b.n	91f4 <process_event+0x94>
			if (transit != NULL) {
    92e4:	f1b9 0f00 	cmp.w	r9, #0
    92e8:	d1d1      	bne.n	928e <process_event+0x12e>
	__asm__ volatile(
    92ea:	f04f 0320 	mov.w	r3, #32
    92ee:	f3ef 8811 	mrs	r8, BASEPRI
    92f2:	f383 8812 	msr	BASEPRI_MAX, r3
    92f6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    92fa:	8b23      	ldrh	r3, [r4, #24]
    92fc:	f023 0308 	bic.w	r3, r3, #8
    9300:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9302:	8b25      	ldrh	r5, [r4, #24]
    9304:	06ea      	lsls	r2, r5, #27
    9306:	d52e      	bpl.n	9366 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9308:	f025 0310 	bic.w	r3, r5, #16
    930c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    930e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    9312:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9314:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    9316:	2e00      	cmp	r6, #0
    9318:	f6bf af6f 	bge.w	91fa <process_event+0x9a>
	list->head = NULL;
    931c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    931e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    9320:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9324:	f021 0107 	bic.w	r1, r1, #7
    9328:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    932c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    932e:	8b21      	ldrh	r1, [r4, #24]
    9330:	f04f 0900 	mov.w	r9, #0
    9334:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9338:	45aa      	cmp	sl, r5
    933a:	f47f af3f 	bne.w	91bc <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    933e:	2f00      	cmp	r7, #0
    9340:	d09b      	beq.n	927a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9342:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    9346:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    9348:	f388 8811 	msr	BASEPRI, r8
    934c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    9350:	2f00      	cmp	r7, #0
    9352:	d0c7      	beq.n	92e4 <process_event+0x184>
	return node->next;
    9354:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    9356:	4639      	mov	r1, r7
    9358:	4633      	mov	r3, r6
    935a:	4652      	mov	r2, sl
    935c:	4620      	mov	r0, r4
    935e:	f007 fa4b 	bl	107f8 <notify_one>
	list->head = node;
    9362:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    9364:	e7f4      	b.n	9350 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    9366:	06ab      	lsls	r3, r5, #26
    9368:	f57f af1a 	bpl.w	91a0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    936c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9370:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    9372:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    9376:	e6ff      	b.n	9178 <process_event+0x18>
    9378:	00010825 	.word	0x00010825

0000937c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    937c:	b5f0      	push	{r4, r5, r6, r7, lr}
    937e:	4602      	mov	r2, r0
    9380:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    9382:	270a      	movs	r7, #10
	size_t val = 0;
    9384:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    9386:	4e07      	ldr	r6, [pc, #28]	; (93a4 <extract_decimal+0x28>)
    9388:	460b      	mov	r3, r1
    938a:	781c      	ldrb	r4, [r3, #0]
    938c:	3101      	adds	r1, #1
    938e:	5d35      	ldrb	r5, [r6, r4]
    9390:	076d      	lsls	r5, r5, #29
    9392:	d401      	bmi.n	9398 <extract_decimal+0x1c>
	}
	*str = sp;
    9394:	6013      	str	r3, [r2, #0]
	return val;
}
    9396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    9398:	fb07 4300 	mla	r3, r7, r0, r4
    939c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    93a0:	e7f2      	b.n	9388 <extract_decimal+0xc>
    93a2:	bf00      	nop
    93a4:	00012ad1 	.word	0x00012ad1

000093a8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    93a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93ac:	4615      	mov	r5, r2
    93ae:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    93b0:	78d3      	ldrb	r3, [r2, #3]
    93b2:	4a22      	ldr	r2, [pc, #136]	; (943c <encode_uint+0x94>)
	switch (specifier) {
    93b4:	2b6f      	cmp	r3, #111	; 0x6f
    93b6:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    93ba:	4680      	mov	r8, r0
    93bc:	460f      	mov	r7, r1
    93be:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    93c2:	d029      	beq.n	9418 <encode_uint+0x70>
    93c4:	d824      	bhi.n	9410 <encode_uint+0x68>
		return 10;
    93c6:	2b58      	cmp	r3, #88	; 0x58
    93c8:	bf0c      	ite	eq
    93ca:	2610      	moveq	r6, #16
    93cc:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    93ce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    93d2:	4632      	mov	r2, r6
    93d4:	2300      	movs	r3, #0
    93d6:	4640      	mov	r0, r8
    93d8:	4639      	mov	r1, r7
    93da:	f7ff fc95 	bl	8d08 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    93de:	2a09      	cmp	r2, #9
    93e0:	b2d4      	uxtb	r4, r2
    93e2:	d81e      	bhi.n	9422 <encode_uint+0x7a>
    93e4:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    93e6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    93e8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    93ea:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    93ee:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    93f2:	d301      	bcc.n	93f8 <encode_uint+0x50>
    93f4:	45d1      	cmp	r9, sl
    93f6:	d811      	bhi.n	941c <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    93f8:	782b      	ldrb	r3, [r5, #0]
    93fa:	069b      	lsls	r3, r3, #26
    93fc:	d505      	bpl.n	940a <encode_uint+0x62>
		if (radix == 8) {
    93fe:	2e08      	cmp	r6, #8
    9400:	d115      	bne.n	942e <encode_uint+0x86>
			conv->altform_0 = true;
    9402:	78ab      	ldrb	r3, [r5, #2]
    9404:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    9408:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    940a:	4648      	mov	r0, r9
    940c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    9410:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    9414:	2b70      	cmp	r3, #112	; 0x70
    9416:	e7d7      	b.n	93c8 <encode_uint+0x20>
	switch (specifier) {
    9418:	2608      	movs	r6, #8
    941a:	e7d8      	b.n	93ce <encode_uint+0x26>
		value /= radix;
    941c:	4680      	mov	r8, r0
    941e:	460f      	mov	r7, r1
    9420:	e7d7      	b.n	93d2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9422:	f1bb 0f01 	cmp.w	fp, #1
    9426:	bf0c      	ite	eq
    9428:	3437      	addeq	r4, #55	; 0x37
    942a:	3457      	addne	r4, #87	; 0x57
    942c:	e7db      	b.n	93e6 <encode_uint+0x3e>
		} else if (radix == 16) {
    942e:	2e10      	cmp	r6, #16
    9430:	d1eb      	bne.n	940a <encode_uint+0x62>
			conv->altform_0c = true;
    9432:	78ab      	ldrb	r3, [r5, #2]
    9434:	f043 0310 	orr.w	r3, r3, #16
    9438:	e7e6      	b.n	9408 <encode_uint+0x60>
    943a:	bf00      	nop
    943c:	00012ad1 	.word	0x00012ad1

00009440 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    9440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9444:	4682      	mov	sl, r0
    9446:	4617      	mov	r7, r2
    9448:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    944a:	2500      	movs	r5, #0
{
    944c:	b097      	sub	sp, #92	; 0x5c
    944e:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    9450:	7838      	ldrb	r0, [r7, #0]
    9452:	b908      	cbnz	r0, 9458 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    9454:	4628      	mov	r0, r5
    9456:	e349      	b.n	9aec <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    9458:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    945a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    945c:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    945e:	d006      	beq.n	946e <z_cbvprintf_impl+0x2e>
			OUTC('%');
    9460:	9903      	ldr	r1, [sp, #12]
    9462:	47d0      	blx	sl
    9464:	2800      	cmp	r0, #0
    9466:	f2c0 8341 	blt.w	9aec <z_cbvprintf_impl+0x6ac>
    946a:	3501      	adds	r5, #1
		if (bps == NULL) {
    946c:	e1f0      	b.n	9850 <z_cbvprintf_impl+0x410>
		} state = {
    946e:	2218      	movs	r2, #24
    9470:	2100      	movs	r1, #0
    9472:	a810      	add	r0, sp, #64	; 0x40
    9474:	f008 fc3b 	bl	11cee <memset>
	if (*sp == '%') {
    9478:	787b      	ldrb	r3, [r7, #1]
    947a:	2b25      	cmp	r3, #37	; 0x25
    947c:	f000 80a3 	beq.w	95c6 <z_cbvprintf_impl+0x186>
    9480:	2300      	movs	r3, #0
    9482:	4698      	mov	r8, r3
    9484:	469e      	mov	lr, r3
    9486:	469c      	mov	ip, r3
    9488:	4618      	mov	r0, r3
    948a:	1c79      	adds	r1, r7, #1
    948c:	460e      	mov	r6, r1
		switch (*sp) {
    948e:	f811 2b01 	ldrb.w	r2, [r1], #1
    9492:	2a2b      	cmp	r2, #43	; 0x2b
    9494:	f000 80c6 	beq.w	9624 <z_cbvprintf_impl+0x1e4>
    9498:	f200 80bd 	bhi.w	9616 <z_cbvprintf_impl+0x1d6>
    949c:	2a20      	cmp	r2, #32
    949e:	f000 80c4 	beq.w	962a <z_cbvprintf_impl+0x1ea>
    94a2:	2a23      	cmp	r2, #35	; 0x23
    94a4:	f000 80c4 	beq.w	9630 <z_cbvprintf_impl+0x1f0>
    94a8:	b12b      	cbz	r3, 94b6 <z_cbvprintf_impl+0x76>
    94aa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    94ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94b2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    94b6:	f1b8 0f00 	cmp.w	r8, #0
    94ba:	d005      	beq.n	94c8 <z_cbvprintf_impl+0x88>
    94bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    94c0:	f043 0320 	orr.w	r3, r3, #32
    94c4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    94c8:	f1be 0f00 	cmp.w	lr, #0
    94cc:	d005      	beq.n	94da <z_cbvprintf_impl+0x9a>
    94ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    94d2:	f043 0310 	orr.w	r3, r3, #16
    94d6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    94da:	f1bc 0f00 	cmp.w	ip, #0
    94de:	d005      	beq.n	94ec <z_cbvprintf_impl+0xac>
    94e0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    94e4:	f043 0308 	orr.w	r3, r3, #8
    94e8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    94ec:	b128      	cbz	r0, 94fa <z_cbvprintf_impl+0xba>
    94ee:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    94f2:	f043 0304 	orr.w	r3, r3, #4
    94f6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    94fa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    94fe:	f003 0144 	and.w	r1, r3, #68	; 0x44
    9502:	2944      	cmp	r1, #68	; 0x44
    9504:	d103      	bne.n	950e <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    9506:	f36f 1386 	bfc	r3, #6, #1
    950a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    950e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    9512:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    9514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9518:	9609      	str	r6, [sp, #36]	; 0x24
    951a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    951e:	f040 808c 	bne.w	963a <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    9522:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9526:	f043 0301 	orr.w	r3, r3, #1
    952a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    952e:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    9530:	781a      	ldrb	r2, [r3, #0]
    9532:	2a2e      	cmp	r2, #46	; 0x2e
    9534:	bf0c      	ite	eq
    9536:	2101      	moveq	r1, #1
    9538:	2100      	movne	r1, #0
    953a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    953e:	f361 0241 	bfi	r2, r1, #1, #1
    9542:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    9546:	d10c      	bne.n	9562 <z_cbvprintf_impl+0x122>
	++sp;
    9548:	1c5a      	adds	r2, r3, #1
    954a:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    954c:	785a      	ldrb	r2, [r3, #1]
    954e:	2a2a      	cmp	r2, #42	; 0x2a
    9550:	f040 8083 	bne.w	965a <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    9554:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    9558:	3302      	adds	r3, #2
		conv->prec_star = true;
    955a:	f042 0204 	orr.w	r2, r2, #4
    955e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    9562:	781a      	ldrb	r2, [r3, #0]
    9564:	2a6c      	cmp	r2, #108	; 0x6c
    9566:	f000 80a4 	beq.w	96b2 <z_cbvprintf_impl+0x272>
    956a:	f200 8086 	bhi.w	967a <z_cbvprintf_impl+0x23a>
    956e:	2a68      	cmp	r2, #104	; 0x68
    9570:	f000 808c 	beq.w	968c <z_cbvprintf_impl+0x24c>
    9574:	2a6a      	cmp	r2, #106	; 0x6a
    9576:	f000 80a5 	beq.w	96c4 <z_cbvprintf_impl+0x284>
    957a:	2a4c      	cmp	r2, #76	; 0x4c
    957c:	f000 80aa 	beq.w	96d4 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    9580:	461a      	mov	r2, r3
    9582:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    9586:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    9588:	9204      	str	r2, [sp, #16]
    958a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    958e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    9592:	f200 8117 	bhi.w	97c4 <z_cbvprintf_impl+0x384>
    9596:	2b6d      	cmp	r3, #109	; 0x6d
    9598:	f200 80a9 	bhi.w	96ee <z_cbvprintf_impl+0x2ae>
    959c:	2b69      	cmp	r3, #105	; 0x69
    959e:	f200 8111 	bhi.w	97c4 <z_cbvprintf_impl+0x384>
    95a2:	2b57      	cmp	r3, #87	; 0x57
    95a4:	f200 80be 	bhi.w	9724 <z_cbvprintf_impl+0x2e4>
    95a8:	2b41      	cmp	r3, #65	; 0x41
    95aa:	d003      	beq.n	95b4 <z_cbvprintf_impl+0x174>
    95ac:	3b45      	subs	r3, #69	; 0x45
    95ae:	2b02      	cmp	r3, #2
    95b0:	f200 8108 	bhi.w	97c4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    95b4:	2204      	movs	r2, #4
    95b6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    95ba:	f362 0302 	bfi	r3, r2, #0, #3
    95be:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    95c2:	2301      	movs	r3, #1
			break;
    95c4:	e0ca      	b.n	975c <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    95c6:	1cba      	adds	r2, r7, #2
    95c8:	9204      	str	r2, [sp, #16]
    95ca:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    95ce:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    95d2:	07da      	lsls	r2, r3, #31
    95d4:	f140 80fd 	bpl.w	97d2 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    95d8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    95dc:	f1b9 0f00 	cmp.w	r9, #0
    95e0:	da07      	bge.n	95f2 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    95e2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    95e6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    95ea:	f042 0204 	orr.w	r2, r2, #4
    95ee:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    95f2:	075e      	lsls	r6, r3, #29
    95f4:	f140 80f6 	bpl.w	97e4 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    95f8:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    95fc:	f1bb 0f00 	cmp.w	fp, #0
    9600:	f280 80f5 	bge.w	97ee <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    9604:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9608:	f36f 0341 	bfc	r3, #1, #1
    960c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    9610:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    9614:	e0eb      	b.n	97ee <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    9616:	2a2d      	cmp	r2, #45	; 0x2d
    9618:	d00d      	beq.n	9636 <z_cbvprintf_impl+0x1f6>
    961a:	2a30      	cmp	r2, #48	; 0x30
    961c:	f47f af44 	bne.w	94a8 <z_cbvprintf_impl+0x68>
    9620:	2301      	movs	r3, #1
	} while (loop);
    9622:	e733      	b.n	948c <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    9624:	f04f 0c01 	mov.w	ip, #1
    9628:	e730      	b.n	948c <z_cbvprintf_impl+0x4c>
    962a:	f04f 0e01 	mov.w	lr, #1
    962e:	e72d      	b.n	948c <z_cbvprintf_impl+0x4c>
    9630:	f04f 0801 	mov.w	r8, #1
    9634:	e72a      	b.n	948c <z_cbvprintf_impl+0x4c>
    9636:	2001      	movs	r0, #1
    9638:	e728      	b.n	948c <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    963a:	a809      	add	r0, sp, #36	; 0x24
    963c:	f7ff fe9e 	bl	937c <extract_decimal>
	if (sp != wp) {
    9640:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9642:	42b3      	cmp	r3, r6
    9644:	f43f af74 	beq.w	9530 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    9648:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    964c:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    964e:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    9650:	f360 0241 	bfi	r2, r0, #1, #1
    9654:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    9658:	e76a      	b.n	9530 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    965a:	a809      	add	r0, sp, #36	; 0x24
    965c:	f7ff fe8e 	bl	937c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    9660:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    9664:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    9666:	f3c3 0240 	ubfx	r2, r3, #1, #1
    966a:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    966e:	f362 0341 	bfi	r3, r2, #1, #1
    9672:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    9676:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9678:	e773      	b.n	9562 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    967a:	2a74      	cmp	r2, #116	; 0x74
    967c:	d026      	beq.n	96cc <z_cbvprintf_impl+0x28c>
    967e:	2a7a      	cmp	r2, #122	; 0x7a
    9680:	f47f af7e 	bne.w	9580 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    9684:	2106      	movs	r1, #6
    9686:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    968a:	e00c      	b.n	96a6 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    968c:	785a      	ldrb	r2, [r3, #1]
    968e:	2a68      	cmp	r2, #104	; 0x68
    9690:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    9694:	d106      	bne.n	96a4 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    9696:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    9698:	f361 02c6 	bfi	r2, r1, #3, #4
    969c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    96a0:	3302      	adds	r3, #2
    96a2:	e76d      	b.n	9580 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    96a4:	2102      	movs	r1, #2
    96a6:	f361 02c6 	bfi	r2, r1, #3, #4
    96aa:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    96ae:	3301      	adds	r3, #1
    96b0:	e766      	b.n	9580 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    96b2:	785a      	ldrb	r2, [r3, #1]
    96b4:	2a6c      	cmp	r2, #108	; 0x6c
    96b6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    96ba:	d101      	bne.n	96c0 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    96bc:	2104      	movs	r1, #4
    96be:	e7eb      	b.n	9698 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    96c0:	2103      	movs	r1, #3
    96c2:	e7f0      	b.n	96a6 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    96c4:	2105      	movs	r1, #5
    96c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    96ca:	e7ec      	b.n	96a6 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    96cc:	2107      	movs	r1, #7
    96ce:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    96d2:	e7e8      	b.n	96a6 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    96d4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    96d8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    96dc:	f022 0202 	bic.w	r2, r2, #2
    96e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    96e4:	f042 0202 	orr.w	r2, r2, #2
    96e8:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    96ec:	e7df      	b.n	96ae <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    96ee:	3b6e      	subs	r3, #110	; 0x6e
    96f0:	b2d9      	uxtb	r1, r3
    96f2:	2301      	movs	r3, #1
    96f4:	408b      	lsls	r3, r1
    96f6:	f240 4182 	movw	r1, #1154	; 0x482
    96fa:	420b      	tst	r3, r1
    96fc:	d138      	bne.n	9770 <z_cbvprintf_impl+0x330>
    96fe:	f013 0f24 	tst.w	r3, #36	; 0x24
    9702:	d152      	bne.n	97aa <z_cbvprintf_impl+0x36a>
    9704:	07d8      	lsls	r0, r3, #31
    9706:	d55d      	bpl.n	97c4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    9708:	2103      	movs	r1, #3
    970a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    970e:	f361 0302 	bfi	r3, r1, #0, #3
    9712:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    9716:	f002 0378 	and.w	r3, r2, #120	; 0x78
    971a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    971e:	424b      	negs	r3, r1
    9720:	414b      	adcs	r3, r1
    9722:	e01b      	b.n	975c <z_cbvprintf_impl+0x31c>
    9724:	2001      	movs	r0, #1
	switch (conv->specifier) {
    9726:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    972a:	b2c9      	uxtb	r1, r1
    972c:	fa00 f101 	lsl.w	r1, r0, r1
    9730:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    9734:	f47f af3e 	bne.w	95b4 <z_cbvprintf_impl+0x174>
    9738:	f640 0601 	movw	r6, #2049	; 0x801
    973c:	4231      	tst	r1, r6
    973e:	d11d      	bne.n	977c <z_cbvprintf_impl+0x33c>
    9740:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    9744:	d03e      	beq.n	97c4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    9746:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    974a:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    974e:	f002 0278 	and.w	r2, r2, #120	; 0x78
    9752:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    9754:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    9758:	d034      	beq.n	97c4 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    975a:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    975c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9760:	f3c2 0140 	ubfx	r1, r2, #1, #1
    9764:	430b      	orrs	r3, r1
    9766:	f363 0241 	bfi	r2, r3, #1, #1
    976a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    976e:	e72e      	b.n	95ce <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    9770:	2102      	movs	r1, #2
    9772:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    9776:	f361 0302 	bfi	r3, r1, #0, #3
    977a:	e7e8      	b.n	974e <z_cbvprintf_impl+0x30e>
    977c:	2002      	movs	r0, #2
    977e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    9782:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    9786:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    978a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    978c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    9790:	bf02      	ittt	eq
    9792:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    9796:	f041 0101 	orreq.w	r1, r1, #1
    979a:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    979e:	2b63      	cmp	r3, #99	; 0x63
    97a0:	d1db      	bne.n	975a <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    97a2:	1e13      	subs	r3, r2, #0
    97a4:	bf18      	it	ne
    97a6:	2301      	movne	r3, #1
    97a8:	e7d8      	b.n	975c <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    97aa:	2103      	movs	r1, #3
    97ac:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    97b0:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    97b4:	f361 0302 	bfi	r3, r1, #0, #3
    97b8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    97bc:	bf14      	ite	ne
    97be:	2301      	movne	r3, #1
    97c0:	2300      	moveq	r3, #0
    97c2:	e7cb      	b.n	975c <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    97c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    97c8:	f043 0301 	orr.w	r3, r3, #1
    97cc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    97d0:	e7c3      	b.n	975a <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    97d2:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    97d6:	2a00      	cmp	r2, #0
		int width = -1;
    97d8:	bfac      	ite	ge
    97da:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
    97de:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    97e2:	e706      	b.n	95f2 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    97e4:	0798      	lsls	r0, r3, #30
    97e6:	f57f af13 	bpl.w	9610 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    97ea:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    97ee:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    97f0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    97f4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    97f8:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    97fc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    9800:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    9802:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    9806:	d133      	bne.n	9870 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    9808:	1ecb      	subs	r3, r1, #3
    980a:	2b04      	cmp	r3, #4
    980c:	d804      	bhi.n	9818 <z_cbvprintf_impl+0x3d8>
    980e:	e8df f003 	tbb	[pc, r3]
    9812:	4621      	.short	0x4621
    9814:	2146      	.short	0x2146
    9816:	21          	.byte	0x21
    9817:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    9818:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    981a:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    981c:	ea4f 72e3 	mov.w	r2, r3, asr #31
    9820:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    9824:	d11c      	bne.n	9860 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    9826:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    982a:	17da      	asrs	r2, r3, #31
    982c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    9830:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    9832:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    9836:	f013 0603 	ands.w	r6, r3, #3
    983a:	d050      	beq.n	98de <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    983c:	463a      	mov	r2, r7
    983e:	4650      	mov	r0, sl
    9840:	9b04      	ldr	r3, [sp, #16]
    9842:	9903      	ldr	r1, [sp, #12]
    9844:	f007 f885 	bl	10952 <outs>
    9848:	2800      	cmp	r0, #0
    984a:	f2c0 814f 	blt.w	9aec <z_cbvprintf_impl+0x6ac>
    984e:	4405      	add	r5, r0
			continue;
    9850:	9f04      	ldr	r7, [sp, #16]
    9852:	e5fd      	b.n	9450 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    9854:	f854 3b04 	ldr.w	r3, [r4], #4
    9858:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    985a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    985e:	e7e8      	b.n	9832 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    9860:	2902      	cmp	r1, #2
    9862:	d1e5      	bne.n	9830 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    9864:	b21a      	sxth	r2, r3
    9866:	f343 33c0 	sbfx	r3, r3, #15, #1
    986a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    986e:	e7df      	b.n	9830 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    9870:	2b02      	cmp	r3, #2
    9872:	d124      	bne.n	98be <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    9874:	1ecb      	subs	r3, r1, #3
    9876:	2b04      	cmp	r3, #4
    9878:	d804      	bhi.n	9884 <z_cbvprintf_impl+0x444>
    987a:	e8df f003 	tbb	[pc, r3]
    987e:	1018      	.short	0x1018
    9880:	1810      	.short	0x1810
    9882:	18          	.byte	0x18
    9883:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    9884:	2901      	cmp	r1, #1
    9886:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    988a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    988e:	d014      	beq.n	98ba <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    9890:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    9892:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    9896:	d1cc      	bne.n	9832 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    9898:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    989a:	9310      	str	r3, [sp, #64]	; 0x40
    989c:	e7c9      	b.n	9832 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    989e:	3407      	adds	r4, #7
    98a0:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    98a4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    98a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    98ac:	e7c1      	b.n	9832 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    98ae:	f854 3b04 	ldr.w	r3, [r4], #4
    98b2:	9310      	str	r3, [sp, #64]	; 0x40
    98b4:	2300      	movs	r3, #0
    98b6:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    98b8:	e7bb      	b.n	9832 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    98ba:	b2db      	uxtb	r3, r3
    98bc:	e7cd      	b.n	985a <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    98be:	2b04      	cmp	r3, #4
    98c0:	d108      	bne.n	98d4 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    98c2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    98c4:	f024 0407 	bic.w	r4, r4, #7
    98c8:	e9d4 2300 	ldrd	r2, r3, [r4]
    98cc:	3408      	adds	r4, #8
    98ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    98d2:	e7ae      	b.n	9832 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    98d4:	2b03      	cmp	r3, #3
    98d6:	d1ac      	bne.n	9832 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    98d8:	f854 3b04 	ldr.w	r3, [r4], #4
    98dc:	e7dd      	b.n	989a <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    98de:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    98e2:	2878      	cmp	r0, #120	; 0x78
    98e4:	d8b4      	bhi.n	9850 <z_cbvprintf_impl+0x410>
    98e6:	2862      	cmp	r0, #98	; 0x62
    98e8:	d81c      	bhi.n	9924 <z_cbvprintf_impl+0x4e4>
    98ea:	2825      	cmp	r0, #37	; 0x25
    98ec:	f43f adb8 	beq.w	9460 <z_cbvprintf_impl+0x20>
    98f0:	2858      	cmp	r0, #88	; 0x58
    98f2:	d1ad      	bne.n	9850 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    98f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    98f8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    98fc:	9300      	str	r3, [sp, #0]
    98fe:	aa12      	add	r2, sp, #72	; 0x48
    9900:	ab0a      	add	r3, sp, #40	; 0x28
    9902:	f7ff fd51 	bl	93a8 <encode_uint>
			if (precision >= 0) {
    9906:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    990a:	4607      	mov	r7, r0
			if (precision >= 0) {
    990c:	f280 8097 	bge.w	9a3e <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    9910:	2f00      	cmp	r7, #0
    9912:	d09d      	beq.n	9850 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    9914:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    9918:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    991c:	2e00      	cmp	r6, #0
    991e:	d04e      	beq.n	99be <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    9920:	3001      	adds	r0, #1
    9922:	e04c      	b.n	99be <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    9924:	3863      	subs	r0, #99	; 0x63
    9926:	2815      	cmp	r0, #21
    9928:	d892      	bhi.n	9850 <z_cbvprintf_impl+0x410>
    992a:	a201      	add	r2, pc, #4	; (adr r2, 9930 <z_cbvprintf_impl+0x4f0>)
    992c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    9930:	000099af 	.word	0x000099af
    9934:	00009a15 	.word	0x00009a15
    9938:	00009851 	.word	0x00009851
    993c:	00009851 	.word	0x00009851
    9940:	00009851 	.word	0x00009851
    9944:	00009851 	.word	0x00009851
    9948:	00009a15 	.word	0x00009a15
    994c:	00009851 	.word	0x00009851
    9950:	00009851 	.word	0x00009851
    9954:	00009851 	.word	0x00009851
    9958:	00009851 	.word	0x00009851
    995c:	00009a9d 	.word	0x00009a9d
    9960:	00009a39 	.word	0x00009a39
    9964:	00009a5f 	.word	0x00009a5f
    9968:	00009851 	.word	0x00009851
    996c:	00009851 	.word	0x00009851
    9970:	00009989 	.word	0x00009989
    9974:	00009851 	.word	0x00009851
    9978:	00009a39 	.word	0x00009a39
    997c:	00009851 	.word	0x00009851
    9980:	00009851 	.word	0x00009851
    9984:	00009a39 	.word	0x00009a39
			if (precision >= 0) {
    9988:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    998c:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    998e:	db0a      	blt.n	99a6 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    9990:	4659      	mov	r1, fp
    9992:	4638      	mov	r0, r7
    9994:	f008 f9ed 	bl	11d72 <strnlen>
			bpe = bps + len;
    9998:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    999c:	2f00      	cmp	r7, #0
    999e:	f43f af57 	beq.w	9850 <z_cbvprintf_impl+0x410>
		char sign = 0;
    99a2:	2600      	movs	r6, #0
    99a4:	e00b      	b.n	99be <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    99a6:	4638      	mov	r0, r7
    99a8:	f7ff fb20 	bl	8fec <strlen>
    99ac:	e7f4      	b.n	9998 <z_cbvprintf_impl+0x558>
		char sign = 0;
    99ae:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    99b0:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    99b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    99b4:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    99b8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    99bc:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    99be:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    99c2:	f013 0210 	ands.w	r2, r3, #16
    99c6:	9205      	str	r2, [sp, #20]
    99c8:	f000 8083 	beq.w	9ad2 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    99cc:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    99ce:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    99d0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    99d4:	bf48      	it	mi
    99d6:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    99d8:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    99da:	bf48      	it	mi
    99dc:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    99de:	f1b9 0f00 	cmp.w	r9, #0
    99e2:	f340 8090 	ble.w	9b06 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    99e6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    99ea:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    99ee:	f3c2 0380 	ubfx	r3, r2, #2, #1
    99f2:	0750      	lsls	r0, r2, #29
    99f4:	9306      	str	r3, [sp, #24]
    99f6:	f100 8086 	bmi.w	9b06 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    99fa:	0651      	lsls	r1, r2, #25
    99fc:	d579      	bpl.n	9af2 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    99fe:	b13e      	cbz	r6, 9a10 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    9a00:	4630      	mov	r0, r6
    9a02:	9903      	ldr	r1, [sp, #12]
    9a04:	47d0      	blx	sl
    9a06:	2800      	cmp	r0, #0
    9a08:	db70      	blt.n	9aec <z_cbvprintf_impl+0x6ac>
    9a0a:	9b06      	ldr	r3, [sp, #24]
    9a0c:	3501      	adds	r5, #1
    9a0e:	461e      	mov	r6, r3
					pad = '0';
    9a10:	2230      	movs	r2, #48	; 0x30
    9a12:	e06f      	b.n	9af4 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    9a14:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    9a16:	bf5a      	itte	pl
    9a18:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    9a1c:	015e      	lslpl	r6, r3, #5
				sign = '+';
    9a1e:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    9a20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    9a24:	2b00      	cmp	r3, #0
    9a26:	f6bf af65 	bge.w	98f4 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    9a2a:	4252      	negs	r2, r2
    9a2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    9a30:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    9a32:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    9a36:	e75d      	b.n	98f4 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    9a38:	2600      	movs	r6, #0
    9a3a:	e75b      	b.n	98f4 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    9a3c:	2600      	movs	r6, #0
				conv->flag_zero = false;
    9a3e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    9a42:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    9a46:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    9a48:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    9a4c:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    9a4e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    9a52:	f67f af5d 	bls.w	9910 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    9a56:	ebab 0303 	sub.w	r3, fp, r3
    9a5a:	9313      	str	r3, [sp, #76]	; 0x4c
    9a5c:	e758      	b.n	9910 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    9a5e:	9810      	ldr	r0, [sp, #64]	; 0x40
    9a60:	b380      	cbz	r0, 9ac4 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9a62:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    9a66:	ab0a      	add	r3, sp, #40	; 0x28
    9a68:	2100      	movs	r1, #0
    9a6a:	f8cd 8000 	str.w	r8, [sp]
    9a6e:	aa12      	add	r2, sp, #72	; 0x48
    9a70:	f7ff fc9a 	bl	93a8 <encode_uint>
				conv->altform_0c = true;
    9a74:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    9a78:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    9a7c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9a80:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    9a84:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9a88:	4607      	mov	r7, r0
				conv->altform_0c = true;
    9a8a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    9a8e:	dad5      	bge.n	9a3c <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    9a90:	2800      	cmp	r0, #0
    9a92:	f43f aedd 	beq.w	9850 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    9a96:	eba8 0000 	sub.w	r0, r8, r0
    9a9a:	e782      	b.n	99a2 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    9a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    9a9e:	2907      	cmp	r1, #7
    9aa0:	f63f aed6 	bhi.w	9850 <z_cbvprintf_impl+0x410>
    9aa4:	e8df f001 	tbb	[pc, r1]
    9aa8:	0c06040c 	.word	0x0c06040c
    9aac:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    9ab0:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9ab2:	e6cd      	b.n	9850 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    9ab4:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    9ab6:	e6cb      	b.n	9850 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    9ab8:	17ea      	asrs	r2, r5, #31
    9aba:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    9abe:	e6c7      	b.n	9850 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    9ac0:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    9ac2:	e6c5      	b.n	9850 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    9ac4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 9b84 <z_cbvprintf_impl+0x744>
		char sign = 0;
    9ac8:	4606      	mov	r6, r0
    9aca:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    9ace:	2005      	movs	r0, #5
    9ad0:	e775      	b.n	99be <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    9ad2:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    9ad4:	bf48      	it	mi
    9ad6:	3001      	addmi	r0, #1
    9ad8:	e779      	b.n	99ce <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    9ada:	4610      	mov	r0, r2
    9adc:	9307      	str	r3, [sp, #28]
    9ade:	9206      	str	r2, [sp, #24]
    9ae0:	9903      	ldr	r1, [sp, #12]
    9ae2:	47d0      	blx	sl
    9ae4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9ae8:	2800      	cmp	r0, #0
    9aea:	da04      	bge.n	9af6 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    9aec:	b017      	add	sp, #92	; 0x5c
    9aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    9af2:	2220      	movs	r2, #32
					pad = '0';
    9af4:	464b      	mov	r3, r9
				while (width-- > 0) {
    9af6:	4619      	mov	r1, r3
    9af8:	2900      	cmp	r1, #0
    9afa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    9afe:	dcec      	bgt.n	9ada <z_cbvprintf_impl+0x69a>
    9b00:	444d      	add	r5, r9
    9b02:	4699      	mov	r9, r3
    9b04:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    9b06:	b12e      	cbz	r6, 9b14 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    9b08:	4630      	mov	r0, r6
    9b0a:	9903      	ldr	r1, [sp, #12]
    9b0c:	47d0      	blx	sl
    9b0e:	2800      	cmp	r0, #0
    9b10:	dbec      	blt.n	9aec <z_cbvprintf_impl+0x6ac>
    9b12:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    9b14:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    9b18:	06da      	lsls	r2, r3, #27
    9b1a:	d401      	bmi.n	9b20 <z_cbvprintf_impl+0x6e0>
    9b1c:	071b      	lsls	r3, r3, #28
    9b1e:	d505      	bpl.n	9b2c <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    9b20:	2030      	movs	r0, #48	; 0x30
    9b22:	9903      	ldr	r1, [sp, #12]
    9b24:	47d0      	blx	sl
    9b26:	2800      	cmp	r0, #0
    9b28:	dbe0      	blt.n	9aec <z_cbvprintf_impl+0x6ac>
    9b2a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9b2c:	9b05      	ldr	r3, [sp, #20]
    9b2e:	b133      	cbz	r3, 9b3e <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    9b30:	9903      	ldr	r1, [sp, #12]
    9b32:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    9b36:	47d0      	blx	sl
    9b38:	2800      	cmp	r0, #0
    9b3a:	dbd7      	blt.n	9aec <z_cbvprintf_impl+0x6ac>
    9b3c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9b3e:	44ab      	add	fp, r5
    9b40:	e005      	b.n	9b4e <z_cbvprintf_impl+0x70e>
				OUTC('0');
    9b42:	2030      	movs	r0, #48	; 0x30
    9b44:	9903      	ldr	r1, [sp, #12]
    9b46:	47d0      	blx	sl
    9b48:	2800      	cmp	r0, #0
    9b4a:	dbcf      	blt.n	9aec <z_cbvprintf_impl+0x6ac>
    9b4c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9b4e:	ebab 0305 	sub.w	r3, fp, r5
    9b52:	2b00      	cmp	r3, #0
    9b54:	dcf5      	bgt.n	9b42 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    9b56:	4643      	mov	r3, r8
    9b58:	463a      	mov	r2, r7
    9b5a:	4650      	mov	r0, sl
    9b5c:	9903      	ldr	r1, [sp, #12]
    9b5e:	f006 fef8 	bl	10952 <outs>
    9b62:	2800      	cmp	r0, #0
    9b64:	dbc2      	blt.n	9aec <z_cbvprintf_impl+0x6ac>
    9b66:	4405      	add	r5, r0
		while (width > 0) {
    9b68:	44a9      	add	r9, r5
    9b6a:	eba9 0305 	sub.w	r3, r9, r5
    9b6e:	2b00      	cmp	r3, #0
    9b70:	f77f ae6e 	ble.w	9850 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    9b74:	2020      	movs	r0, #32
    9b76:	9903      	ldr	r1, [sp, #12]
    9b78:	47d0      	blx	sl
    9b7a:	2800      	cmp	r0, #0
    9b7c:	dbb6      	blt.n	9aec <z_cbvprintf_impl+0x6ac>
    9b7e:	3501      	adds	r5, #1
			--width;
    9b80:	e7f3      	b.n	9b6a <z_cbvprintf_impl+0x72a>
    9b82:	bf00      	nop
    9b84:	0001281a 	.word	0x0001281a

00009b88 <nordicsemi_nrf91_init>:
	__asm__ volatile(
    9b88:	f04f 0220 	mov.w	r2, #32
    9b8c:	f3ef 8311 	mrs	r3, BASEPRI
    9b90:	f382 8812 	msr	BASEPRI_MAX, r2
    9b94:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    9b98:	2101      	movs	r1, #1
    9b9a:	4a04      	ldr	r2, [pc, #16]	; (9bac <nordicsemi_nrf91_init+0x24>)
    9b9c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    9ba0:	f383 8811 	msr	BASEPRI, r3
    9ba4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    9ba8:	2000      	movs	r0, #0
    9baa:	4770      	bx	lr
    9bac:	40039000 	.word	0x40039000

00009bb0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    9bb0:	b120      	cbz	r0, 9bbc <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    9bb2:	4b03      	ldr	r3, [pc, #12]	; (9bc0 <arch_busy_wait+0x10>)
    9bb4:	0180      	lsls	r0, r0, #6
    9bb6:	f043 0301 	orr.w	r3, r3, #1
    9bba:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    9bbc:	4770      	bx	lr
    9bbe:	bf00      	nop
    9bc0:	000123e0 	.word	0x000123e0

00009bc4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9bc4:	f003 b842 	b.w	cc4c <SystemInit>

00009bc8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    9bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9bcc:	4605      	mov	r5, r0
	__asm__ volatile(
    9bce:	f04f 0320 	mov.w	r3, #32
    9bd2:	f3ef 8611 	mrs	r6, BASEPRI
    9bd6:	f383 8812 	msr	BASEPRI_MAX, r3
    9bda:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9bde:	f04f 090c 	mov.w	r9, #12
	return list->head;
    9be2:	4b0d      	ldr	r3, [pc, #52]	; (9c18 <pm_state_notify+0x50>)
    9be4:	4f0d      	ldr	r7, [pc, #52]	; (9c1c <pm_state_notify+0x54>)
    9be6:	681c      	ldr	r4, [r3, #0]
    9be8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9c20 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    9bec:	b92c      	cbnz	r4, 9bfa <pm_state_notify+0x32>
	__asm__ volatile(
    9bee:	f386 8811 	msr	BASEPRI, r6
    9bf2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    9bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    9bfa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    9bfe:	2d00      	cmp	r5, #0
    9c00:	bf18      	it	ne
    9c02:	4613      	movne	r3, r2
		if (callback) {
    9c04:	b12b      	cbz	r3, 9c12 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9c06:	f898 2014 	ldrb.w	r2, [r8, #20]
    9c0a:	fb09 f202 	mul.w	r2, r9, r2
    9c0e:	5cb8      	ldrb	r0, [r7, r2]
    9c10:	4798      	blx	r3
	return node->next;
    9c12:	6824      	ldr	r4, [r4, #0]
    9c14:	e7ea      	b.n	9bec <pm_state_notify+0x24>
    9c16:	bf00      	nop
    9c18:	2000c998 	.word	0x2000c998
    9c1c:	2000c98c 	.word	0x2000c98c
    9c20:	2000cf50 	.word	0x2000cf50

00009c24 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    9c24:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    9c26:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    9c28:	4b16      	ldr	r3, [pc, #88]	; (9c84 <pm_system_resume+0x60>)
    9c2a:	7d1c      	ldrb	r4, [r3, #20]
    9c2c:	f004 031f 	and.w	r3, r4, #31
    9c30:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9c32:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9c34:	4b14      	ldr	r3, [pc, #80]	; (9c88 <pm_system_resume+0x64>)
    9c36:	0961      	lsrs	r1, r4, #5
    9c38:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9c3c:	e8d3 1fef 	ldaex	r1, [r3]
    9c40:	ea01 0500 	and.w	r5, r1, r0
    9c44:	e8c3 5fe6 	stlex	r6, r5, [r3]
    9c48:	2e00      	cmp	r6, #0
    9c4a:	d1f7      	bne.n	9c3c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    9c4c:	420a      	tst	r2, r1
    9c4e:	d013      	beq.n	9c78 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    9c50:	4b0e      	ldr	r3, [pc, #56]	; (9c8c <pm_system_resume+0x68>)
    9c52:	4d0f      	ldr	r5, [pc, #60]	; (9c90 <pm_system_resume+0x6c>)
    9c54:	b18b      	cbz	r3, 9c7a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    9c56:	230c      	movs	r3, #12
    9c58:	4363      	muls	r3, r4
    9c5a:	18ea      	adds	r2, r5, r3
    9c5c:	7851      	ldrb	r1, [r2, #1]
    9c5e:	5ce8      	ldrb	r0, [r5, r3]
    9c60:	f006 fe9b 	bl	1099a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    9c64:	2000      	movs	r0, #0
    9c66:	f7ff ffaf 	bl	9bc8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    9c6a:	230c      	movs	r3, #12
    9c6c:	435c      	muls	r4, r3
    9c6e:	2300      	movs	r3, #0
    9c70:	192a      	adds	r2, r5, r4
    9c72:	512b      	str	r3, [r5, r4]
    9c74:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    9c78:	bd70      	pop	{r4, r5, r6, pc}
    9c7a:	f383 8811 	msr	BASEPRI, r3
    9c7e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    9c82:	e7ef      	b.n	9c64 <pm_system_resume+0x40>
    9c84:	2000cf50 	.word	0x2000cf50
    9c88:	2000c9a0 	.word	0x2000c9a0
    9c8c:	0001099b 	.word	0x0001099b
    9c90:	2000c98c 	.word	0x2000c98c

00009c94 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    9c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    9c98:	4b32      	ldr	r3, [pc, #200]	; (9d64 <pm_system_suspend+0xd0>)
{
    9c9a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    9c9c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    9c9e:	f04f 0320 	mov.w	r3, #32
    9ca2:	f3ef 8811 	mrs	r8, BASEPRI
    9ca6:	f383 8812 	msr	BASEPRI_MAX, r3
    9caa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    9cae:	240c      	movs	r4, #12
    9cb0:	436c      	muls	r4, r5
    9cb2:	4b2d      	ldr	r3, [pc, #180]	; (9d68 <pm_system_suspend+0xd4>)
    9cb4:	4e2d      	ldr	r6, [pc, #180]	; (9d6c <pm_system_suspend+0xd8>)
    9cb6:	5d19      	ldrb	r1, [r3, r4]
    9cb8:	191a      	adds	r2, r3, r4
    9cba:	2900      	cmp	r1, #0
    9cbc:	d047      	beq.n	9d4e <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    9cbe:	ca07      	ldmia	r2, {r0, r1, r2}
    9cc0:	eb06 0c04 	add.w	ip, r6, r4
    9cc4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    9cc8:	2200      	movs	r2, #0
    9cca:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    9ccc:	f388 8811 	msr	BASEPRI, r8
    9cd0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    9cd4:	230c      	movs	r3, #12
    9cd6:	436b      	muls	r3, r5
    9cd8:	5cf0      	ldrb	r0, [r6, r3]
    9cda:	18f2      	adds	r2, r6, r3
    9cdc:	b3a8      	cbz	r0, 9d4a <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    9cde:	1c7b      	adds	r3, r7, #1
    9ce0:	d010      	beq.n	9d04 <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    9ce2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9ce6:	2100      	movs	r1, #0
    9ce8:	f8d2 c008 	ldr.w	ip, [r2, #8]
    9cec:	4c20      	ldr	r4, [pc, #128]	; (9d70 <pm_system_suspend+0xdc>)
    9cee:	2300      	movs	r3, #0
    9cf0:	fbec 4100 	umlal	r4, r1, ip, r0
    9cf4:	4a1f      	ldr	r2, [pc, #124]	; (9d74 <pm_system_suspend+0xe0>)
    9cf6:	4620      	mov	r0, r4
    9cf8:	f7ff f806 	bl	8d08 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    9cfc:	2101      	movs	r1, #1
    9cfe:	1a38      	subs	r0, r7, r0
    9d00:	f007 ff5a 	bl	11bb8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    9d04:	f005 fbe2 	bl	f4cc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    9d08:	2001      	movs	r0, #1
    9d0a:	f7ff ff5d 	bl	9bc8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9d0e:	4b1a      	ldr	r3, [pc, #104]	; (9d78 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9d10:	096a      	lsrs	r2, r5, #5
    9d12:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    9d16:	2201      	movs	r2, #1
    9d18:	f005 011f 	and.w	r1, r5, #31
    9d1c:	408a      	lsls	r2, r1
    9d1e:	e8d3 0fef 	ldaex	r0, [r3]
    9d22:	4310      	orrs	r0, r2
    9d24:	e8c3 0fe1 	stlex	r1, r0, [r3]
    9d28:	2900      	cmp	r1, #0
    9d2a:	d1f8      	bne.n	9d1e <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    9d2c:	4b13      	ldr	r3, [pc, #76]	; (9d7c <pm_system_suspend+0xe8>)
    9d2e:	b13b      	cbz	r3, 9d40 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    9d30:	230c      	movs	r3, #12
    9d32:	fb03 f005 	mul.w	r0, r3, r5
    9d36:	1833      	adds	r3, r6, r0
    9d38:	7859      	ldrb	r1, [r3, #1]
    9d3a:	5c30      	ldrb	r0, [r6, r0]
    9d3c:	f006 fe21 	bl	10982 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    9d40:	f7ff ff70 	bl	9c24 <pm_system_resume>
	k_sched_unlock();
    9d44:	f005 fbd6 	bl	f4f4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    9d48:	2001      	movs	r0, #1
}
    9d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    9d4e:	4601      	mov	r1, r0
    9d50:	4628      	mov	r0, r5
    9d52:	f000 f815 	bl	9d80 <pm_policy_next_state>
		if (info != NULL) {
    9d56:	2800      	cmp	r0, #0
    9d58:	d0b8      	beq.n	9ccc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    9d5a:	c807      	ldmia	r0, {r0, r1, r2}
    9d5c:	4434      	add	r4, r6
    9d5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    9d62:	e7b3      	b.n	9ccc <pm_system_suspend+0x38>
    9d64:	2000cf50 	.word	0x2000cf50
    9d68:	2000c980 	.word	0x2000c980
    9d6c:	2000c98c 	.word	0x2000c98c
    9d70:	000f423f 	.word	0x000f423f
    9d74:	000f4240 	.word	0x000f4240
    9d78:	2000c9a0 	.word	0x2000c9a0
    9d7c:	00010983 	.word	0x00010983

00009d80 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    9d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d84:	b085      	sub	sp, #20
    9d86:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    9d88:	a903      	add	r1, sp, #12
    9d8a:	f000 f843 	bl	9e14 <pm_state_cpu_get_all>
    9d8e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    9d92:	4604      	mov	r4, r0
    9d94:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9d98:	4b1b      	ldr	r3, [pc, #108]	; (9e08 <pm_policy_next_state+0x88>)
    9d9a:	9d03      	ldr	r5, [sp, #12]
    9d9c:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    9da0:	1e43      	subs	r3, r0, #1
    9da2:	b21b      	sxth	r3, r3
    9da4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9da8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9e0c <pm_policy_next_state+0x8c>
    9dac:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    9db0:	b924      	cbnz	r4, 9dbc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    9db2:	46a1      	mov	r9, r4
}
    9db4:	4648      	mov	r0, r9
    9db6:	b005      	add	sp, #20
    9db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dbc:	46c4      	mov	ip, r8
    9dbe:	4659      	mov	r1, fp
    9dc0:	6868      	ldr	r0, [r5, #4]
    9dc2:	2300      	movs	r3, #0
    9dc4:	fbe0 c107 	umlal	ip, r1, r0, r7
    9dc8:	4a11      	ldr	r2, [pc, #68]	; (9e10 <pm_policy_next_state+0x90>)
    9dca:	4660      	mov	r0, ip
    9dcc:	f7fe ff9c 	bl	8d08 <__aeabi_uldivmod>
    9dd0:	46c4      	mov	ip, r8
    9dd2:	4659      	mov	r1, fp
    9dd4:	9001      	str	r0, [sp, #4]
    9dd6:	68a8      	ldr	r0, [r5, #8]
    9dd8:	2300      	movs	r3, #0
    9dda:	fbe0 c107 	umlal	ip, r1, r0, r7
    9dde:	4a0c      	ldr	r2, [pc, #48]	; (9e10 <pm_policy_next_state+0x90>)
    9de0:	4660      	mov	r0, ip
    9de2:	f7fe ff91 	bl	8d08 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9de6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    9dea:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9dec:	d001      	beq.n	9df2 <pm_policy_next_state+0x72>
    9dee:	4582      	cmp	sl, r0
    9df0:	d905      	bls.n	9dfe <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    9df2:	1c73      	adds	r3, r6, #1
    9df4:	d0de      	beq.n	9db4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    9df6:	9b01      	ldr	r3, [sp, #4]
    9df8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    9dfa:	42b0      	cmp	r0, r6
    9dfc:	d9da      	bls.n	9db4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    9dfe:	3c01      	subs	r4, #1
    9e00:	b2a4      	uxth	r4, r4
    9e02:	3d0c      	subs	r5, #12
    9e04:	e7d4      	b.n	9db0 <pm_policy_next_state+0x30>
    9e06:	bf00      	nop
    9e08:	2000c584 	.word	0x2000c584
    9e0c:	000f423f 	.word	0x000f423f
    9e10:	000f4240 	.word	0x000f4240

00009e14 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    9e14:	b908      	cbnz	r0, 9e1a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    9e16:	4b02      	ldr	r3, [pc, #8]	; (9e20 <pm_state_cpu_get_all+0xc>)
    9e18:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    9e1a:	2000      	movs	r0, #0
    9e1c:	4770      	bx	lr
    9e1e:	bf00      	nop
    9e20:	000123e8 	.word	0x000123e8

00009e24 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    9e24:	4901      	ldr	r1, [pc, #4]	; (9e2c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    9e26:	2210      	movs	r2, #16
	str	r2, [r1]
    9e28:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    9e2a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    9e2c:	e000ed10 	.word	0xe000ed10

00009e30 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    9e30:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    9e32:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    9e34:	f380 8811 	msr	BASEPRI, r0
	isb
    9e38:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    9e3c:	f3bf 8f4f 	dsb	sy
    9e40:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    9e42:	b662      	cpsie	i
	isb
    9e44:	f3bf 8f6f 	isb	sy

	bx	lr
    9e48:	4770      	bx	lr
    9e4a:	bf00      	nop

00009e4c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    9e4c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    9e4e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    9e50:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    9e54:	f3bf 8f4f 	dsb	sy
    9e58:	bf20      	wfe

	msr	BASEPRI, r0
    9e5a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    9e5e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    9e60:	4770      	bx	lr
    9e62:	bf00      	nop

00009e64 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    9e64:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    9e66:	2800      	cmp	r0, #0
    9e68:	db07      	blt.n	9e7a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9e6a:	2301      	movs	r3, #1
    9e6c:	0941      	lsrs	r1, r0, #5
    9e6e:	4a03      	ldr	r2, [pc, #12]	; (9e7c <arch_irq_enable+0x18>)
    9e70:	f000 001f 	and.w	r0, r0, #31
    9e74:	4083      	lsls	r3, r0
    9e76:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    9e7a:	4770      	bx	lr
    9e7c:	e000e100 	.word	0xe000e100

00009e80 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    9e80:	4b05      	ldr	r3, [pc, #20]	; (9e98 <arch_irq_is_enabled+0x18>)
    9e82:	0942      	lsrs	r2, r0, #5
    9e84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    9e88:	2301      	movs	r3, #1
    9e8a:	f000 001f 	and.w	r0, r0, #31
    9e8e:	fa03 f000 	lsl.w	r0, r3, r0
}
    9e92:	4010      	ands	r0, r2
    9e94:	4770      	bx	lr
    9e96:	bf00      	nop
    9e98:	e000e100 	.word	0xe000e100

00009e9c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    9e9c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    9e9e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    9ea0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9ea4:	bfac      	ite	ge
    9ea6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9eaa:	4b06      	ldrlt	r3, [pc, #24]	; (9ec4 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9eac:	ea4f 1141 	mov.w	r1, r1, lsl #5
    9eb0:	b2c9      	uxtb	r1, r1
    9eb2:	bfab      	itete	ge
    9eb4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9eb8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9ebc:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9ec0:	5419      	strblt	r1, [r3, r0]
}
    9ec2:	4770      	bx	lr
    9ec4:	e000ed14 	.word	0xe000ed14

00009ec8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    9ec8:	bf30      	wfi
    b z_SysNmiOnReset
    9eca:	f7ff bffd 	b.w	9ec8 <z_SysNmiOnReset>
    9ece:	bf00      	nop

00009ed0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9ed0:	4a0b      	ldr	r2, [pc, #44]	; (9f00 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    9ed2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9ed4:	4b0b      	ldr	r3, [pc, #44]	; (9f04 <z_arm_prep_c+0x34>)
    9ed6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    9eda:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    9edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9ee0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    9ee4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    9ee8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    9eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    9ef0:	f004 fce6 	bl	e8c0 <z_bss_zero>
	z_data_copy();
    9ef4:	f005 fc3a 	bl	f76c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    9ef8:	f000 f9c8 	bl	a28c <z_arm_interrupt_init>
	z_cstart();
    9efc:	f004 fd20 	bl	e940 <z_cstart>
    9f00:	00008000 	.word	0x00008000
    9f04:	e000ed00 	.word	0xe000ed00

00009f08 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    9f08:	4a09      	ldr	r2, [pc, #36]	; (9f30 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    9f0a:	490a      	ldr	r1, [pc, #40]	; (9f34 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    9f0c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    9f0e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    9f10:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    9f12:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    9f14:	4908      	ldr	r1, [pc, #32]	; (9f38 <arch_swap+0x30>)
    9f16:	684b      	ldr	r3, [r1, #4]
    9f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9f1c:	604b      	str	r3, [r1, #4]
    9f1e:	2300      	movs	r3, #0
    9f20:	f383 8811 	msr	BASEPRI, r3
    9f24:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    9f28:	6893      	ldr	r3, [r2, #8]
}
    9f2a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    9f2c:	4770      	bx	lr
    9f2e:	bf00      	nop
    9f30:	2000cf50 	.word	0x2000cf50
    9f34:	00012748 	.word	0x00012748
    9f38:	e000ed00 	.word	0xe000ed00

00009f3c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    9f3c:	4915      	ldr	r1, [pc, #84]	; (9f94 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    9f3e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    9f40:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    9f44:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    9f48:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    9f4a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    9f4e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    9f52:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    9f54:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    9f58:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    9f5c:	4f0e      	ldr	r7, [pc, #56]	; (9f98 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    9f5e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    9f62:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    9f64:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    9f66:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    9f68:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    9f6c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    9f6e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    9f70:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    9f72:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    9f76:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    9f7a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    9f7e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    9f82:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    9f86:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    9f88:	f006 fd1e 	bl	109c8 <configure_builtin_stack_guard>
    pop {r2, lr}
    9f8c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    9f90:	4770      	bx	lr
    9f92:	0000      	.short	0x0000
    ldr r1, =_kernel
    9f94:	2000cf50 	.word	0x2000cf50
    ldr v4, =_SCS_ICSR
    9f98:	e000ed04 	.word	0xe000ed04

00009f9c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    9f9c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    9fa0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    9fa2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    9fa6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    9faa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    9fac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    9fb0:	2902      	cmp	r1, #2
    beq _oops
    9fb2:	d0ff      	beq.n	9fb4 <_oops>

00009fb4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    9fb4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    9fb6:	f006 fcf8 	bl	109aa <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    9fba:	bd01      	pop	{r0, pc}

00009fbc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    9fbc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    9fc0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    9fc2:	490c      	ldr	r1, [pc, #48]	; (9ff4 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    9fc4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    9fc8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    9fca:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    9fce:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    9fd2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    9fd4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    9fd8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    9fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    9fe0:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    9fe4:	2300      	movs	r3, #0
    9fe6:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    9fe8:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    9fec:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    9fee:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    9ff0:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    9ff2:	4770      	bx	lr
    9ff4:	00010403 	.word	0x00010403

00009ff8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    9ff8:	4b08      	ldr	r3, [pc, #32]	; (a01c <arch_switch_to_main_thread+0x24>)
    9ffa:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    9ffc:	6e43      	ldr	r3, [r0, #100]	; 0x64
    9ffe:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    a002:	4610      	mov	r0, r2
    a004:	f381 8809 	msr	PSP, r1
    a008:	2100      	movs	r1, #0
    a00a:	b663      	cpsie	if
    a00c:	f381 8811 	msr	BASEPRI, r1
    a010:	f3bf 8f6f 	isb	sy
    a014:	2200      	movs	r2, #0
    a016:	2300      	movs	r3, #0
    a018:	f006 f9f3 	bl	10402 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    a01c:	2000cf50 	.word	0x2000cf50

0000a020 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    a020:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    a022:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    a024:	4a0b      	ldr	r2, [pc, #44]	; (a054 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    a026:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    a028:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    a02a:	bf1e      	ittt	ne
	movne	r1, #0
    a02c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    a02e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    a030:	f007 fbe5 	blne	117fe <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    a034:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    a036:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    a03a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    a03e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    a042:	4905      	ldr	r1, [pc, #20]	; (a058 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    a044:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    a046:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    a048:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    a04a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    a04e:	4903      	ldr	r1, [pc, #12]	; (a05c <_isr_wrapper+0x3c>)
	bx r1
    a050:	4708      	bx	r1
    a052:	0000      	.short	0x0000
	ldr r2, =_kernel
    a054:	2000cf50 	.word	0x2000cf50
	ldr r1, =_sw_isr_table
    a058:	00012128 	.word	0x00012128
	ldr r1, =z_arm_int_exit
    a05c:	0000a061 	.word	0x0000a061

0000a060 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    a060:	4b04      	ldr	r3, [pc, #16]	; (a074 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    a062:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    a064:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    a066:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    a068:	d003      	beq.n	a072 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    a06a:	4903      	ldr	r1, [pc, #12]	; (a078 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    a070:	600a      	str	r2, [r1, #0]

0000a072 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    a072:	4770      	bx	lr
	ldr r3, =_kernel
    a074:	2000cf50 	.word	0x2000cf50
	ldr r1, =_SCS_ICSR
    a078:	e000ed04 	.word	0xe000ed04

0000a07c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    a07c:	4b08      	ldr	r3, [pc, #32]	; (a0a0 <usage_fault.constprop.0+0x24>)
    a07e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    a080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    a082:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    a084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    a086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    a088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    a08a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    a08c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    a08e:	f3c0 5000 	ubfx	r0, r0, #20, #1
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    a092:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    a096:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    a09a:	0040      	lsls	r0, r0, #1
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    a09c:	629a      	str	r2, [r3, #40]	; 0x28
}
    a09e:	4770      	bx	lr
    a0a0:	e000ed00 	.word	0xe000ed00

0000a0a4 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    a0a4:	4b0d      	ldr	r3, [pc, #52]	; (a0dc <bus_fault.constprop.0+0x38>)
    a0a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    a0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    a0aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a0ac:	0592      	lsls	r2, r2, #22
    a0ae:	d508      	bpl.n	a0c2 <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
    a0b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    a0b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a0b4:	0412      	lsls	r2, r2, #16
    a0b6:	d504      	bpl.n	a0c2 <bus_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    a0b8:	b118      	cbz	r0, a0c2 <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    a0ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a0bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    a0c0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    a0c2:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    a0c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    a0c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a0c8:	05d2      	lsls	r2, r2, #23
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    a0ca:	4a04      	ldr	r2, [pc, #16]	; (a0dc <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    a0cc:	bf58      	it	pl
    a0ce:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    a0d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    a0d2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    a0d6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    a0d8:	7008      	strb	r0, [r1, #0]
}
    a0da:	4770      	bx	lr
    a0dc:	e000ed00 	.word	0xe000ed00

0000a0e0 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    a0e0:	4b12      	ldr	r3, [pc, #72]	; (a12c <mem_manage_fault.constprop.0+0x4c>)
    a0e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    a0e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    a0e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a0e8:	0792      	lsls	r2, r2, #30
    a0ea:	d508      	bpl.n	a0fe <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    a0ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    a0ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a0f0:	0612      	lsls	r2, r2, #24
    a0f2:	d504      	bpl.n	a0fe <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    a0f4:	b118      	cbz	r0, a0fe <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    a0f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a0f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    a0fc:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    a0fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    a100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    a102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a104:	06d0      	lsls	r0, r2, #27
	*recoverable = memory_fault_recoverable(esf, true);
    a106:	f04f 0000 	mov.w	r0, #0
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    a10a:	bf58      	it	pl
    a10c:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    a10e:	4b07      	ldr	r3, [pc, #28]	; (a12c <mem_manage_fault.constprop.0+0x4c>)
    a110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a112:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    a114:	bf42      	ittt	mi
    a116:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    a118:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    a11c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    a11e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a120:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    a124:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    a126:	7008      	strb	r0, [r1, #0]
}
    a128:	4770      	bx	lr
    a12a:	bf00      	nop
    a12c:	e000ed00 	.word	0xe000ed00

0000a130 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    a130:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    a132:	4b4a      	ldr	r3, [pc, #296]	; (a25c <z_arm_fault+0x12c>)
{
    a134:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    a136:	685b      	ldr	r3, [r3, #4]
    a138:	2500      	movs	r5, #0
{
    a13a:	b08b      	sub	sp, #44	; 0x2c
    a13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a140:	f385 8811 	msr	BASEPRI, r5
    a144:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    a148:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    a14c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    a150:	d116      	bne.n	a180 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    a152:	07d6      	lsls	r6, r2, #31
    a154:	d414      	bmi.n	a180 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    a156:	0655      	lsls	r5, r2, #25
    a158:	d403      	bmi.n	a162 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    a15a:	0710      	lsls	r0, r2, #28
    a15c:	d404      	bmi.n	a168 <z_arm_fault+0x38>
			*nested_exc = true;
    a15e:	2501      	movs	r5, #1
    a160:	e004      	b.n	a16c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    a162:	f012 0204 	ands.w	r2, r2, #4
    a166:	d000      	beq.n	a16a <z_arm_fault+0x3a>
			ptr_esf = (z_arch_esf_t *)psp;
    a168:	460c      	mov	r4, r1
	*nested_exc = false;
    a16a:	2500      	movs	r5, #0
	*recoverable = false;
    a16c:	2200      	movs	r2, #0
	switch (fault) {
    a16e:	3b03      	subs	r3, #3
	*recoverable = false;
    a170:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    a174:	2b03      	cmp	r3, #3
    a176:	d805      	bhi.n	a184 <z_arm_fault+0x54>
    a178:	e8df f003 	tbb	[pc, r3]
    a17c:	5f666224 	.word	0x5f666224
		return NULL;
    a180:	462c      	mov	r4, r5
    a182:	e7f3      	b.n	a16c <z_arm_fault+0x3c>
    a184:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    a186:	f89d 2007 	ldrb.w	r2, [sp, #7]
    a18a:	b9ca      	cbnz	r2, a1c0 <z_arm_fault+0x90>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    a18c:	ae02      	add	r6, sp, #8
    a18e:	f104 0720 	add.w	r7, r4, #32
    a192:	4632      	mov	r2, r6
    a194:	6820      	ldr	r0, [r4, #0]
    a196:	6861      	ldr	r1, [r4, #4]
    a198:	3408      	adds	r4, #8
    a19a:	c203      	stmia	r2!, {r0, r1}
    a19c:	42bc      	cmp	r4, r7
    a19e:	4616      	mov	r6, r2
    a1a0:	d1f7      	bne.n	a192 <z_arm_fault+0x62>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    a1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a1a4:	2d00      	cmp	r5, #0
    a1a6:	d053      	beq.n	a250 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    a1a8:	f3c2 0108 	ubfx	r1, r2, #0, #9
    a1ac:	b921      	cbnz	r1, a1b8 <z_arm_fault+0x88>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    a1ae:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    a1b2:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    a1b6:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    a1b8:	4618      	mov	r0, r3
    a1ba:	a902      	add	r1, sp, #8
    a1bc:	f006 fbf3 	bl	109a6 <z_arm_fatal_error>
}
    a1c0:	b00b      	add	sp, #44	; 0x2c
    a1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    a1c4:	4b25      	ldr	r3, [pc, #148]	; (a25c <z_arm_fault+0x12c>)
    a1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1c8:	0791      	lsls	r1, r2, #30
    a1ca:	d4db      	bmi.n	a184 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    a1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1ce:	2a00      	cmp	r2, #0
    a1d0:	dbd8      	blt.n	a184 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1d4:	0052      	lsls	r2, r2, #1
    a1d6:	d5d5      	bpl.n	a184 <z_arm_fault+0x54>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    a1d8:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    a1da:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    a1dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    a1e0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    a1e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a1e6:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    a1ea:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    a1ec:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    a1f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    a1f4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    a1f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a1fa:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    a1fe:	f64d 7202 	movw	r2, #57090	; 0xdf02
    a202:	4291      	cmp	r1, r2
    a204:	d101      	bne.n	a20a <z_arm_fault+0xda>
			reason = esf->basic.r0;
    a206:	6823      	ldr	r3, [r4, #0]
    a208:	e7bd      	b.n	a186 <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    a20a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a20c:	b2d2      	uxtb	r2, r2
    a20e:	b132      	cbz	r2, a21e <z_arm_fault+0xee>
			reason = mem_manage_fault(esf, 1, recoverable);
    a210:	2001      	movs	r0, #1
    a212:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    a216:	f7ff ff63 	bl	a0e0 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    a21a:	4603      	mov	r3, r0
		break;
    a21c:	e7b3      	b.n	a186 <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    a21e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a220:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    a224:	d005      	beq.n	a232 <z_arm_fault+0x102>
			reason = bus_fault(esf, 1, recoverable);
    a226:	2001      	movs	r0, #1
    a228:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    a22c:	f7ff ff3a 	bl	a0a4 <bus_fault.constprop.0>
    a230:	e7f3      	b.n	a21a <z_arm_fault+0xea>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    a238:	d3a4      	bcc.n	a184 <z_arm_fault+0x54>
		reason = usage_fault(esf);
    a23a:	f7ff ff1f 	bl	a07c <usage_fault.constprop.0>
    a23e:	e7ec      	b.n	a21a <z_arm_fault+0xea>
		reason = mem_manage_fault(esf, 0, recoverable);
    a240:	2000      	movs	r0, #0
    a242:	f10d 0107 	add.w	r1, sp, #7
    a246:	e7e6      	b.n	a216 <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
    a248:	2000      	movs	r0, #0
    a24a:	f10d 0107 	add.w	r1, sp, #7
    a24e:	e7ed      	b.n	a22c <z_arm_fault+0xfc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    a250:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    a254:	f022 0201 	bic.w	r2, r2, #1
    a258:	e7ad      	b.n	a1b6 <z_arm_fault+0x86>
    a25a:	bf00      	nop
    a25c:	e000ed00 	.word	0xe000ed00

0000a260 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a260:	4b04      	ldr	r3, [pc, #16]	; (a274 <z_arm_fault_init+0x14>)
    a262:	695a      	ldr	r2, [r3, #20]
    a264:	f042 0210 	orr.w	r2, r2, #16
    a268:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    a26a:	695a      	ldr	r2, [r3, #20]
    a26c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    a270:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    a272:	4770      	bx	lr
    a274:	e000ed00 	.word	0xe000ed00

0000a278 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    a278:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    a27c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    a280:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    a282:	4672      	mov	r2, lr
	bl z_arm_fault
    a284:	f7ff ff54 	bl	a130 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    a288:	bd01      	pop	{r0, pc}
    a28a:	bf00      	nop

0000a28c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    a28c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a28e:	2120      	movs	r1, #32
    a290:	4803      	ldr	r0, [pc, #12]	; (a2a0 <z_arm_interrupt_init+0x14>)
    a292:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    a294:	3301      	adds	r3, #1
    a296:	2b41      	cmp	r3, #65	; 0x41
    a298:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    a29c:	d1f9      	bne.n	a292 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    a29e:	4770      	bx	lr
    a2a0:	e000e100 	.word	0xe000e100

0000a2a4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    a2a4:	2000      	movs	r0, #0
    msr CONTROL, r0
    a2a6:	f380 8814 	msr	CONTROL, r0
    isb
    a2aa:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    a2ae:	2000      	movs	r0, #0
    msr MSPLIM, r0
    a2b0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    a2b4:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    a2b8:	f7ff fc84 	bl	9bc4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    a2bc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    a2be:	490e      	ldr	r1, [pc, #56]	; (a2f8 <__start+0x54>)
    str r0, [r1]
    a2c0:	6008      	str	r0, [r1, #0]
    dsb
    a2c2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    a2c6:	480d      	ldr	r0, [pc, #52]	; (a2fc <__start+0x58>)
    msr msp, r0
    a2c8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    a2cc:	f000 f83e 	bl	a34c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    a2d0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    a2d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    a2d6:	480a      	ldr	r0, [pc, #40]	; (a300 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    a2d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    a2dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    a2de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    a2e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    a2e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    a2e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    a2ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    a2ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    a2f2:	f7ff fded 	bl	9ed0 <z_arm_prep_c>
    a2f6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    a2f8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    a2fc:	2000e2a0 	.word	0x2000e2a0
    ldr r0, =z_interrupt_stacks
    a300:	2000d560 	.word	0x2000d560

0000a304 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    a304:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    a308:	4905      	ldr	r1, [pc, #20]	; (a320 <sys_arch_reboot+0x1c>)
    a30a:	4b06      	ldr	r3, [pc, #24]	; (a324 <sys_arch_reboot+0x20>)
    a30c:	68ca      	ldr	r2, [r1, #12]
    a30e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a312:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    a314:	60cb      	str	r3, [r1, #12]
    a316:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    a31a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    a31c:	e7fd      	b.n	a31a <sys_arch_reboot+0x16>
    a31e:	bf00      	nop
    a320:	e000ed00 	.word	0xe000ed00
    a324:	05fa0004 	.word	0x05fa0004

0000a328 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    a328:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    a32a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    a32c:	4906      	ldr	r1, [pc, #24]	; (a348 <z_arm_clear_arm_mpu_config+0x20>)
    a32e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    a332:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    a336:	4293      	cmp	r3, r2
    a338:	db00      	blt.n	a33c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    a33a:	4770      	bx	lr
  mpu->RNR = rnr;
    a33c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    a340:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    a344:	3301      	adds	r3, #1
    a346:	e7f6      	b.n	a336 <z_arm_clear_arm_mpu_config+0xe>
    a348:	e000ed00 	.word	0xe000ed00

0000a34c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    a34c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    a34e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    a350:	2400      	movs	r4, #0
    a352:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    a356:	f7ff ffe7 	bl	a328 <z_arm_clear_arm_mpu_config>
    a35a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    a35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a360:	4a0c      	ldr	r2, [pc, #48]	; (a394 <z_arm_init_arch_hw_at_boot+0x48>)
    a362:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    a366:	3301      	adds	r3, #1
    a368:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    a36a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    a36e:	d1f8      	bne.n	a362 <z_arm_init_arch_hw_at_boot+0x16>
    a370:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    a372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a376:	4a07      	ldr	r2, [pc, #28]	; (a394 <z_arm_init_arch_hw_at_boot+0x48>)
    a378:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    a37c:	3301      	adds	r3, #1
    a37e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    a380:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    a384:	d1f8      	bne.n	a378 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    a386:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    a388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a38c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    a390:	bd10      	pop	{r4, pc}
    a392:	bf00      	nop
    a394:	e000e100 	.word	0xe000e100

0000a398 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    a398:	4b08      	ldr	r3, [pc, #32]	; (a3bc <z_impl_k_thread_abort+0x24>)
    a39a:	689b      	ldr	r3, [r3, #8]
    a39c:	4283      	cmp	r3, r0
    a39e:	d10b      	bne.n	a3b8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a3a0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    a3a4:	b143      	cbz	r3, a3b8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    a3a6:	4b06      	ldr	r3, [pc, #24]	; (a3c0 <z_impl_k_thread_abort+0x28>)
    a3a8:	685a      	ldr	r2, [r3, #4]
    a3aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    a3ae:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    a3b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a3b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    a3b6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    a3b8:	f005 b966 	b.w	f688 <z_thread_abort>
    a3bc:	2000cf50 	.word	0x2000cf50
    a3c0:	e000ed00 	.word	0xe000ed00

0000a3c4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    a3c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    a3c6:	4c09      	ldr	r4, [pc, #36]	; (a3ec <z_arm_configure_static_mpu_regions+0x28>)
    a3c8:	4a09      	ldr	r2, [pc, #36]	; (a3f0 <z_arm_configure_static_mpu_regions+0x2c>)
    a3ca:	4623      	mov	r3, r4
    a3cc:	2101      	movs	r1, #1
    a3ce:	4809      	ldr	r0, [pc, #36]	; (a3f4 <z_arm_configure_static_mpu_regions+0x30>)
    a3d0:	f000 f8ea 	bl	a5a8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    a3d4:	2300      	movs	r3, #0
    a3d6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    a3d8:	4b07      	ldr	r3, [pc, #28]	; (a3f8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a3da:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    a3dc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a3de:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    a3e0:	9301      	str	r3, [sp, #4]
    a3e2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a3e4:	f000 f8ea 	bl	a5bc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    a3e8:	b004      	add	sp, #16
    a3ea:	bd10      	pop	{r4, pc}
    a3ec:	20040000 	.word	0x20040000
    a3f0:	2000c580 	.word	0x2000c580
    a3f4:	000123e8 	.word	0x000123e8
    a3f8:	2000c788 	.word	0x2000c788

0000a3fc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    a3fc:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    a3fe:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    a400:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    a402:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    a406:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    a40a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    a40c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    a40e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    a410:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    a414:	4905      	ldr	r1, [pc, #20]	; (a42c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    a416:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    a41a:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    a41e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    a422:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    a426:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    a42a:	bd10      	pop	{r4, pc}
    a42c:	e000ed00 	.word	0xe000ed00

0000a430 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a434:	460f      	mov	r7, r1
    a436:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    a438:	4606      	mov	r6, r0
    a43a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    a43e:	4d4e      	ldr	r5, [pc, #312]	; (a578 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    a440:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    a442:	45b8      	cmp	r8, r7
    a444:	f280 8094 	bge.w	a570 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    a448:	f8d6 9004 	ldr.w	r9, [r6, #4]
    a44c:	f1b9 0f00 	cmp.w	r9, #0
    a450:	d036      	beq.n	a4c0 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    a452:	f1b9 0f1f 	cmp.w	r9, #31
    a456:	f240 8089 	bls.w	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    a45a:	f019 0f1f 	tst.w	r9, #31
    a45e:	f040 8085 	bne.w	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    a462:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    a466:	f01a 0f1f 	tst.w	sl, #31
    a46a:	d17f      	bne.n	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a46c:	4650      	mov	r0, sl
    a46e:	f006 fab1 	bl	109d4 <arm_cmse_mpu_region_get>
    a472:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a474:	eb09 000a 	add.w	r0, r9, sl
    a478:	3801      	subs	r0, #1
    a47a:	f006 faab 	bl	109d4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    a47e:	4583      	cmp	fp, r0
    a480:	d174      	bne.n	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    a482:	f11b 0f16 	cmn.w	fp, #22
    a486:	d071      	beq.n	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>
    a488:	455c      	cmp	r4, fp
    a48a:	dd6f      	ble.n	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    a48c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    a490:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    a494:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    a498:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    a49c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    a4a0:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    a4a4:	e9d6 3200 	ldrd	r3, r2, [r6]
    a4a8:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    a4aa:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    a4ac:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    a4b0:	d11e      	bne.n	a4f0 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    a4b2:	45ca      	cmp	sl, r9
    a4b4:	d108      	bne.n	a4c8 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    a4b6:	4631      	mov	r1, r6
    a4b8:	fa5f f08b 	uxtb.w	r0, fp
    a4bc:	f006 fa93 	bl	109e6 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    a4c0:	f108 0801 	add.w	r8, r8, #1
    a4c4:	360c      	adds	r6, #12
    a4c6:	e7bc      	b.n	a442 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    a4c8:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    a4ca:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    a4ce:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    a4d2:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    a4d6:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    a4da:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    a4dc:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    a4e0:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    a4e2:	f006 fa80 	bl	109e6 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    a4e6:	f110 0f16 	cmn.w	r0, #22
    a4ea:	d03f      	beq.n	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    a4ec:	1c44      	adds	r4, r0, #1
    a4ee:	e7e7      	b.n	a4c0 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    a4f0:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    a4f4:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    a4f8:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    a4fa:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    a4fe:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    a502:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    a504:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    a506:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    a508:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    a50a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    a50e:	d0e8      	beq.n	a4e2 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    a510:	f006 fa69 	bl	109e6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    a514:	f110 0f16 	cmn.w	r0, #22
    a518:	d028      	beq.n	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    a51a:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    a51e:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    a522:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    a526:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    a52a:	f362 0304 	bfi	r3, r2, #0, #5
    a52e:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    a532:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    a536:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a53a:	085b      	lsrs	r3, r3, #1
    a53c:	f363 1247 	bfi	r2, r3, #5, #3
    a540:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    a544:	e9d6 3200 	ldrd	r3, r2, [r6]
    a548:	4413      	add	r3, r2
    a54a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    a54c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    a550:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    a552:	4453      	add	r3, sl
    a554:	eba3 0309 	sub.w	r3, r3, r9
    a558:	b2c8      	uxtb	r0, r1
    a55a:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    a55e:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    a560:	9303      	str	r3, [sp, #12]
    a562:	d803      	bhi.n	a56c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    a564:	4669      	mov	r1, sp
    a566:	f7ff ff49 	bl	a3fc <region_init>
    a56a:	e7bf      	b.n	a4ec <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    a56c:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    a570:	4620      	mov	r0, r4
    a572:	b005      	add	sp, #20
    a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a578:	e000ed00 	.word	0xe000ed00

0000a57c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    a57c:	2205      	movs	r2, #5
    a57e:	4b04      	ldr	r3, [pc, #16]	; (a590 <arm_core_mpu_enable+0x14>)
    a580:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    a584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a588:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    a58c:	4770      	bx	lr
    a58e:	bf00      	nop
    a590:	e000ed00 	.word	0xe000ed00

0000a594 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    a594:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    a598:	2200      	movs	r2, #0
    a59a:	4b02      	ldr	r3, [pc, #8]	; (a5a4 <arm_core_mpu_disable+0x10>)
    a59c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    a5a0:	4770      	bx	lr
    a5a2:	bf00      	nop
    a5a4:	e000ed00 	.word	0xe000ed00

0000a5a8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    a5a8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    a5aa:	4c03      	ldr	r4, [pc, #12]	; (a5b8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    a5ac:	7822      	ldrb	r2, [r4, #0]
    a5ae:	f7ff ff3f 	bl	a430 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    a5b2:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    a5b4:	bd10      	pop	{r4, pc}
    a5b6:	bf00      	nop
    a5b8:	2000cfa0 	.word	0x2000cfa0

0000a5bc <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    a5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5c0:	4d29      	ldr	r5, [pc, #164]	; (a668 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    a5c2:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    a5c4:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a5c6:	f04f 0800 	mov.w	r8, #0
    a5ca:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    a5cc:	4f27      	ldr	r7, [pc, #156]	; (a66c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a5ce:	45d0      	cmp	r8, sl
    a5d0:	da1b      	bge.n	a60a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    a5d2:	f8d6 9004 	ldr.w	r9, [r6, #4]
    a5d6:	f1b9 0f00 	cmp.w	r9, #0
    a5da:	d03f      	beq.n	a65c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    a5dc:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a5de:	4608      	mov	r0, r1
    a5e0:	9101      	str	r1, [sp, #4]
    a5e2:	f006 f9f7 	bl	109d4 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a5e6:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a5e8:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a5ea:	eb09 0001 	add.w	r0, r9, r1
    a5ee:	3801      	subs	r0, #1
    a5f0:	f006 f9f0 	bl	109d4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    a5f4:	4284      	cmp	r4, r0
    a5f6:	f04f 0214 	mov.w	r2, #20
    a5fa:	4b1d      	ldr	r3, [pc, #116]	; (a670 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    a5fc:	d008      	beq.n	a610 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    a5fe:	fb02 f308 	mul.w	r3, r2, r8
    a602:	f06f 0215 	mvn.w	r2, #21
    a606:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    a60a:	b003      	add	sp, #12
    a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    a610:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    a614:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    a616:	d0f8      	beq.n	a60a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    a618:	7819      	ldrb	r1, [r3, #0]
    a61a:	42a1      	cmp	r1, r4
    a61c:	ddf5      	ble.n	a60a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    a61e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    a622:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    a626:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    a62a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    a62e:	f100 0108 	add.w	r1, r0, #8
    a632:	7b00      	ldrb	r0, [r0, #12]
    a634:	f364 0004 	bfi	r0, r4, #0, #5
    a638:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    a63a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    a63e:	790c      	ldrb	r4, [r1, #4]
    a640:	0840      	lsrs	r0, r0, #1
    a642:	f360 1447 	bfi	r4, r0, #5, #3
    a646:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    a648:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    a64c:	f021 011f 	bic.w	r1, r1, #31
    a650:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    a652:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    a656:	f021 011f 	bic.w	r1, r1, #31
    a65a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a65c:	f108 0801 	add.w	r8, r8, #1
    a660:	3514      	adds	r5, #20
    a662:	360c      	adds	r6, #12
    a664:	e7b3      	b.n	a5ce <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    a666:	bf00      	nop
    a668:	2000c9a4 	.word	0x2000c9a4
    a66c:	e000ed00 	.word	0xe000ed00
    a670:	2000cfa0 	.word	0x2000cfa0

0000a674 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    a674:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    a676:	4d0e      	ldr	r5, [pc, #56]	; (a6b0 <z_arm_mpu_init+0x3c>)
    a678:	682c      	ldr	r4, [r5, #0]
    a67a:	2c10      	cmp	r4, #16
    a67c:	d815      	bhi.n	a6aa <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a67e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    a680:	f7ff ff88 	bl	a594 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    a684:	4b0b      	ldr	r3, [pc, #44]	; (a6b4 <z_arm_mpu_init+0x40>)
    a686:	4a0c      	ldr	r2, [pc, #48]	; (a6b8 <z_arm_mpu_init+0x44>)
    a688:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a68c:	4284      	cmp	r4, r0
    a68e:	d105      	bne.n	a69c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    a690:	4b0a      	ldr	r3, [pc, #40]	; (a6bc <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    a692:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    a694:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    a696:	f7ff ff71 	bl	a57c <arm_core_mpu_enable>
}
    a69a:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    a69c:	6869      	ldr	r1, [r5, #4]
    a69e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    a6a2:	f7ff feab 	bl	a3fc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a6a6:	3001      	adds	r0, #1
    a6a8:	e7f0      	b.n	a68c <z_arm_mpu_init+0x18>
		return -1;
    a6aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a6ae:	e7f4      	b.n	a69a <z_arm_mpu_init+0x26>
    a6b0:	000123f4 	.word	0x000123f4
    a6b4:	e000ed00 	.word	0xe000ed00
    a6b8:	0044ffaa 	.word	0x0044ffaa
    a6bc:	2000cfa0 	.word	0x2000cfa0

0000a6c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    a6c0:	4b01      	ldr	r3, [pc, #4]	; (a6c8 <__stdout_hook_install+0x8>)
    a6c2:	6018      	str	r0, [r3, #0]
}
    a6c4:	4770      	bx	lr
    a6c6:	bf00      	nop
    a6c8:	2000c588 	.word	0x2000c588

0000a6cc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    a6cc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    a6ce:	4c07      	ldr	r4, [pc, #28]	; (a6ec <_sbrk+0x20>)
    a6d0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    a6d2:	18c2      	adds	r2, r0, r3
    a6d4:	4806      	ldr	r0, [pc, #24]	; (a6f0 <_sbrk+0x24>)
    a6d6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    a6da:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    a6de:	428a      	cmp	r2, r1
		heap_sz += count;
    a6e0:	bf36      	itet	cc
    a6e2:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    a6e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
    a6e8:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    a6ea:	bd10      	pop	{r4, pc}
    a6ec:	2000c9b8 	.word	0x2000c9b8
    a6f0:	2000e8a0 	.word	0x2000e8a0

0000a6f4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    a6f4:	4b08      	ldr	r3, [pc, #32]	; (a718 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    a6f6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    a6f8:	1ac3      	subs	r3, r0, r3
{
    a6fa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    a6fc:	4907      	ldr	r1, [pc, #28]	; (a71c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    a6fe:	109b      	asrs	r3, r3, #2
{
    a700:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    a702:	4359      	muls	r1, r3
    a704:	2240      	movs	r2, #64	; 0x40
    a706:	4806      	ldr	r0, [pc, #24]	; (a720 <onoff_stop+0x2c>)
    a708:	f006 f9b5 	bl	10a76 <stop>
	notify(mgr, res);
    a70c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    a70e:	4601      	mov	r1, r0
	notify(mgr, res);
    a710:	4620      	mov	r0, r4
}
    a712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    a716:	4718      	bx	r3
    a718:	2000c9d0 	.word	0x2000c9d0
    a71c:	b6db6db7 	.word	0xb6db6db7
    a720:	000120c8 	.word	0x000120c8

0000a724 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a724:	2340      	movs	r3, #64	; 0x40
{
    a726:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    a728:	4c0b      	ldr	r4, [pc, #44]	; (a758 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a72a:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    a72c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a72e:	460b      	mov	r3, r1
{
    a730:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a732:	490a      	ldr	r1, [pc, #40]	; (a75c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    a734:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a736:	4361      	muls	r1, r4
{
    a738:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    a73a:	4a09      	ldr	r2, [pc, #36]	; (a760 <onoff_start+0x3c>)
    a73c:	4809      	ldr	r0, [pc, #36]	; (a764 <onoff_start+0x40>)
    a73e:	f006 f9c7 	bl	10ad0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    a742:	1e01      	subs	r1, r0, #0
    a744:	da05      	bge.n	a752 <onoff_start+0x2e>
		notify(mgr, err);
    a746:	4630      	mov	r0, r6
    a748:	462b      	mov	r3, r5
	}
}
    a74a:	b002      	add	sp, #8
    a74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    a750:	4718      	bx	r3
}
    a752:	b002      	add	sp, #8
    a754:	bd70      	pop	{r4, r5, r6, pc}
    a756:	bf00      	nop
    a758:	2000c9d0 	.word	0x2000c9d0
    a75c:	b6db6db7 	.word	0xb6db6db7
    a760:	00010b3d 	.word	0x00010b3d
    a764:	000120c8 	.word	0x000120c8

0000a768 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    a768:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    a76a:	2200      	movs	r2, #0
    a76c:	2101      	movs	r1, #1
{
    a76e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    a770:	2005      	movs	r0, #5
    a772:	f7ff fb93 	bl	9e9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    a776:	480f      	ldr	r0, [pc, #60]	; (a7b4 <clk_init+0x4c>)
    a778:	f002 fb02 	bl	cd80 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    a77c:	4b0e      	ldr	r3, [pc, #56]	; (a7b8 <clk_init+0x50>)
    a77e:	4298      	cmp	r0, r3
    a780:	d115      	bne.n	a7ae <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    a782:	f002 fb0d 	bl	cda0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    a786:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    a788:	490c      	ldr	r1, [pc, #48]	; (a7bc <clk_init+0x54>)
    a78a:	4630      	mov	r0, r6
    a78c:	f006 f858 	bl	10840 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    a790:	2800      	cmp	r0, #0
    a792:	db0b      	blt.n	a7ac <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    a794:	2501      	movs	r5, #1
    a796:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    a798:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    a79a:	4908      	ldr	r1, [pc, #32]	; (a7bc <clk_init+0x54>)
    a79c:	f104 001c 	add.w	r0, r4, #28
    a7a0:	f006 f84e 	bl	10840 <onoff_manager_init>
		if (err < 0) {
    a7a4:	2800      	cmp	r0, #0
    a7a6:	db01      	blt.n	a7ac <clk_init+0x44>
	}

	return 0;
    a7a8:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    a7aa:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    a7ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    a7ae:	f06f 0004 	mvn.w	r0, #4
    a7b2:	e7fb      	b.n	a7ac <clk_init+0x44>
    a7b4:	0000a7f5 	.word	0x0000a7f5
    a7b8:	0bad0000 	.word	0x0bad0000
    a7bc:	0001241c 	.word	0x0001241c

0000a7c0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    a7c0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    a7c2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    a7c4:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
    a7c6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    a7c8:	434b      	muls	r3, r1
    a7ca:	4808      	ldr	r0, [pc, #32]	; (a7ec <clkstarted_handle.constprop.0+0x2c>)
    a7cc:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    a7ce:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    a7d0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    a7d4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    a7d6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    a7d8:	f006 f93a 	bl	10a50 <set_on_state>
	if (callback) {
    a7dc:	b12d      	cbz	r5, a7ea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    a7de:	4632      	mov	r2, r6
    a7e0:	462b      	mov	r3, r5
}
    a7e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    a7e6:	4802      	ldr	r0, [pc, #8]	; (a7f0 <clkstarted_handle.constprop.0+0x30>)
    a7e8:	4718      	bx	r3
}
    a7ea:	bd70      	pop	{r4, r5, r6, pc}
    a7ec:	2000c9d0 	.word	0x2000c9d0
    a7f0:	000120c8 	.word	0x000120c8

0000a7f4 <clock_event_handler>:
	switch (event) {
    a7f4:	b110      	cbz	r0, a7fc <clock_event_handler+0x8>
    a7f6:	2801      	cmp	r0, #1
    a7f8:	d004      	beq.n	a804 <clock_event_handler+0x10>
    a7fa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    a7fc:	4b03      	ldr	r3, [pc, #12]	; (a80c <clock_event_handler+0x18>)
    a7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a800:	075b      	lsls	r3, r3, #29
    a802:	d101      	bne.n	a808 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    a804:	f7ff bfdc 	b.w	a7c0 <clkstarted_handle.constprop.0>
}
    a808:	4770      	bx	lr
    a80a:	bf00      	nop
    a80c:	2000c9d0 	.word	0x2000c9d0

0000a810 <generic_hfclk_start>:
{
    a810:	b508      	push	{r3, lr}
	__asm__ volatile(
    a812:	f04f 0320 	mov.w	r3, #32
    a816:	f3ef 8111 	mrs	r1, BASEPRI
    a81a:	f383 8812 	msr	BASEPRI_MAX, r3
    a81e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    a822:	4a11      	ldr	r2, [pc, #68]	; (a868 <generic_hfclk_start+0x58>)
    a824:	6813      	ldr	r3, [r2, #0]
    a826:	f043 0002 	orr.w	r0, r3, #2
    a82a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    a82c:	07da      	lsls	r2, r3, #31
    a82e:	d408      	bmi.n	a842 <generic_hfclk_start+0x32>
	__asm__ volatile(
    a830:	f381 8811 	msr	BASEPRI, r1
    a834:	f3bf 8f6f 	isb	sy
}
    a838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    a83c:	2001      	movs	r0, #1
    a83e:	f002 babf 	b.w	cdc0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    a842:	4b0a      	ldr	r3, [pc, #40]	; (a86c <generic_hfclk_start+0x5c>)
    a844:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    a848:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    a84c:	07d3      	lsls	r3, r2, #31
    a84e:	d5ef      	bpl.n	a830 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    a850:	4807      	ldr	r0, [pc, #28]	; (a870 <generic_hfclk_start+0x60>)
    a852:	f006 f8fd 	bl	10a50 <set_on_state>
    a856:	f381 8811 	msr	BASEPRI, r1
    a85a:	f3bf 8f6f 	isb	sy
}
    a85e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    a862:	2000      	movs	r0, #0
    a864:	f7ff bfac 	b.w	a7c0 <clkstarted_handle.constprop.0>
    a868:	2000ca20 	.word	0x2000ca20
    a86c:	40005000 	.word	0x40005000
    a870:	2000ca10 	.word	0x2000ca10

0000a874 <api_blocking_start>:
{
    a874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    a876:	2200      	movs	r2, #0
    a878:	2301      	movs	r3, #1
    a87a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    a87e:	466b      	mov	r3, sp
    a880:	4a08      	ldr	r2, [pc, #32]	; (a8a4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    a882:	f8cd d000 	str.w	sp, [sp]
    a886:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    a88a:	f006 f950 	bl	10b2e <api_start>
	if (err < 0) {
    a88e:	2800      	cmp	r0, #0
    a890:	db05      	blt.n	a89e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    a892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a896:	2300      	movs	r3, #0
    a898:	4668      	mov	r0, sp
    a89a:	f004 fab1 	bl	ee00 <z_impl_k_sem_take>
}
    a89e:	b005      	add	sp, #20
    a8a0:	f85d fb04 	ldr.w	pc, [sp], #4
    a8a4:	00010b5b 	.word	0x00010b5b

0000a8a8 <generic_hfclk_stop>:
{
    a8a8:	b510      	push	{r4, lr}
	__asm__ volatile(
    a8aa:	f04f 0320 	mov.w	r3, #32
    a8ae:	f3ef 8411 	mrs	r4, BASEPRI
    a8b2:	f383 8812 	msr	BASEPRI_MAX, r3
    a8b6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    a8ba:	4a07      	ldr	r2, [pc, #28]	; (a8d8 <generic_hfclk_stop+0x30>)
    a8bc:	6813      	ldr	r3, [r2, #0]
    a8be:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    a8c2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    a8c4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    a8c6:	d402      	bmi.n	a8ce <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    a8c8:	2001      	movs	r0, #1
    a8ca:	f006 fd3e 	bl	1134a <nrfx_clock_stop>
	__asm__ volatile(
    a8ce:	f384 8811 	msr	BASEPRI, r4
    a8d2:	f3bf 8f6f 	isb	sy
}
    a8d6:	bd10      	pop	{r4, pc}
    a8d8:	2000ca20 	.word	0x2000ca20

0000a8dc <z_nrf_clock_control_lf_on>:
{
    a8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a8e0:	2201      	movs	r2, #1
    a8e2:	4607      	mov	r7, r0
    a8e4:	4935      	ldr	r1, [pc, #212]	; (a9bc <z_nrf_clock_control_lf_on+0xe0>)
    a8e6:	e8d1 3fef 	ldaex	r3, [r1]
    a8ea:	e8c1 2fe0 	stlex	r0, r2, [r1]
    a8ee:	2800      	cmp	r0, #0
    a8f0:	d1f9      	bne.n	a8e6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    a8f2:	b933      	cbnz	r3, a902 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    a8f4:	4932      	ldr	r1, [pc, #200]	; (a9c0 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    a8f6:	4833      	ldr	r0, [pc, #204]	; (a9c4 <z_nrf_clock_control_lf_on+0xe8>)
    a8f8:	604b      	str	r3, [r1, #4]
    a8fa:	60cb      	str	r3, [r1, #12]
    a8fc:	608a      	str	r2, [r1, #8]
    a8fe:	f005 ffb2 	bl	10866 <onoff_request>
	switch (start_mode) {
    a902:	1e7b      	subs	r3, r7, #1
    a904:	2b01      	cmp	r3, #1
    a906:	d828      	bhi.n	a95a <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    a908:	2f01      	cmp	r7, #1
    a90a:	d106      	bne.n	a91a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    a90c:	4b2e      	ldr	r3, [pc, #184]	; (a9c8 <z_nrf_clock_control_lf_on+0xec>)
    a90e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    a912:	f003 0303 	and.w	r3, r3, #3
    a916:	2b02      	cmp	r3, #2
    a918:	d01f      	beq.n	a95a <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a91a:	f006 ff65 	bl	117e8 <k_is_in_isr>
    a91e:	4605      	mov	r5, r0
    a920:	b9e8      	cbnz	r0, a95e <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    a922:	4b2a      	ldr	r3, [pc, #168]	; (a9cc <z_nrf_clock_control_lf_on+0xf0>)
    a924:	781b      	ldrb	r3, [r3, #0]
    a926:	b1d3      	cbz	r3, a95e <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
    a928:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    a92a:	4606      	mov	r6, r0
    a92c:	4b26      	ldr	r3, [pc, #152]	; (a9c8 <z_nrf_clock_control_lf_on+0xec>)
    a92e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a932:	4c25      	ldr	r4, [pc, #148]	; (a9c8 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a934:	f8df 8098 	ldr.w	r8, [pc, #152]	; a9d0 <z_nrf_clock_control_lf_on+0xf4>
    a938:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a93c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    a940:	03d2      	lsls	r2, r2, #15
    a942:	d516      	bpl.n	a972 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    a944:	f003 0303 	and.w	r3, r3, #3
    a948:	2b02      	cmp	r3, #2
    a94a:	d001      	beq.n	a950 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    a94c:	2f01      	cmp	r7, #1
    a94e:	d110      	bne.n	a972 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    a950:	b375      	cbz	r5, a9b0 <z_nrf_clock_control_lf_on+0xd4>
    a952:	f386 8811 	msr	BASEPRI, r6
    a956:	f3bf 8f6f 	isb	sy
}
    a95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    a95e:	f04f 0320 	mov.w	r3, #32
    a962:	f3ef 8611 	mrs	r6, BASEPRI
    a966:	f383 8812 	msr	BASEPRI_MAX, r3
    a96a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a96e:	2501      	movs	r5, #1
    a970:	e7df      	b.n	a932 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    a972:	b1c5      	cbz	r5, a9a6 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    a974:	4630      	mov	r0, r6
    a976:	f7ff fa69 	bl	9e4c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    a97a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    a97e:	b2db      	uxtb	r3, r3
    a980:	2b01      	cmp	r3, #1
    a982:	d1d9      	bne.n	a938 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a984:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    a988:	2a00      	cmp	r2, #0
    a98a:	d0d5      	beq.n	a938 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a98c:	2200      	movs	r2, #0
    a98e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    a992:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    a996:	2202      	movs	r2, #2
    a998:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    a99c:	2220      	movs	r2, #32
    a99e:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a9a2:	60a3      	str	r3, [r4, #8]
}
    a9a4:	e7c8      	b.n	a938 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
    a9a6:	2100      	movs	r1, #0
    a9a8:	2021      	movs	r0, #33	; 0x21
    a9aa:	f004 fe4d 	bl	f648 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    a9ae:	e7e4      	b.n	a97a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    a9b0:	2202      	movs	r2, #2
    a9b2:	4b05      	ldr	r3, [pc, #20]	; (a9c8 <z_nrf_clock_control_lf_on+0xec>)
    a9b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a9b8:	e7cf      	b.n	a95a <z_nrf_clock_control_lf_on+0x7e>
    a9ba:	bf00      	nop
    a9bc:	2000c9cc 	.word	0x2000c9cc
    a9c0:	2000c9bc 	.word	0x2000c9bc
    a9c4:	2000c9ec 	.word	0x2000c9ec
    a9c8:	40005000 	.word	0x40005000
    a9cc:	2000d45a 	.word	0x2000d45a
    a9d0:	e000e100 	.word	0xe000e100

0000a9d4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    a9d4:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    a9d6:	4807      	ldr	r0, [pc, #28]	; (a9f4 <uart_console_init+0x20>)
    a9d8:	f006 fe60 	bl	1169c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    a9dc:	b138      	cbz	r0, a9ee <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    a9de:	4806      	ldr	r0, [pc, #24]	; (a9f8 <uart_console_init+0x24>)
    a9e0:	f7ff fe6e 	bl	a6c0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    a9e4:	4804      	ldr	r0, [pc, #16]	; (a9f8 <uart_console_init+0x24>)
    a9e6:	f7fe fba7 	bl	9138 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    a9ea:	2000      	movs	r0, #0
}
    a9ec:	bd08      	pop	{r3, pc}
		return -ENODEV;
    a9ee:	f06f 0012 	mvn.w	r0, #18
    a9f2:	e7fb      	b.n	a9ec <uart_console_init+0x18>
    a9f4:	00012110 	.word	0x00012110
    a9f8:	0000a9fd 	.word	0x0000a9fd

0000a9fc <console_out>:
	if ('\n' == c) {
    a9fc:	280a      	cmp	r0, #10
{
    a9fe:	b538      	push	{r3, r4, r5, lr}
    aa00:	4604      	mov	r4, r0
    aa02:	4d07      	ldr	r5, [pc, #28]	; (aa20 <console_out+0x24>)
	if ('\n' == c) {
    aa04:	d104      	bne.n	aa10 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    aa06:	68ab      	ldr	r3, [r5, #8]
    aa08:	210d      	movs	r1, #13
    aa0a:	4628      	mov	r0, r5
    aa0c:	685b      	ldr	r3, [r3, #4]
    aa0e:	4798      	blx	r3
    aa10:	68ab      	ldr	r3, [r5, #8]
    aa12:	4803      	ldr	r0, [pc, #12]	; (aa20 <console_out+0x24>)
    aa14:	685b      	ldr	r3, [r3, #4]
    aa16:	b2e1      	uxtb	r1, r4
    aa18:	4798      	blx	r3
}
    aa1a:	4620      	mov	r0, r4
    aa1c:	bd38      	pop	{r3, r4, r5, pc}
    aa1e:	bf00      	nop
    aa20:	00012110 	.word	0x00012110

0000aa24 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    aa24:	b530      	push	{r4, r5, lr}
	return port->config;
    aa26:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    aa28:	f001 041f 	and.w	r4, r1, #31
    aa2c:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    aa2e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    aa32:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    aa34:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    aa38:	d105      	bne.n	aa46 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    aa3a:	4620      	mov	r0, r4
    aa3c:	f002 fc84 	bl	d348 <nrfx_gpiote_trigger_disable>

		return 0;
    aa40:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    aa42:	b005      	add	sp, #20
    aa44:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    aa46:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    aa48:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    aa4c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    aa50:	d114      	bne.n	aa7c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    aa52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    aa56:	bf0c      	ite	eq
    aa58:	2304      	moveq	r3, #4
    aa5a:	2305      	movne	r3, #5
    aa5c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    aa60:	2300      	movs	r3, #0
    aa62:	4620      	mov	r0, r4
    aa64:	4619      	mov	r1, r3
    aa66:	aa02      	add	r2, sp, #8
    aa68:	f002 faa4 	bl	cfb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    aa6c:	4b1c      	ldr	r3, [pc, #112]	; (aae0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    aa6e:	4298      	cmp	r0, r3
    aa70:	d133      	bne.n	aada <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    aa72:	2101      	movs	r1, #1
    aa74:	4620      	mov	r0, r4
    aa76:	f002 fc23 	bl	d2c0 <nrfx_gpiote_trigger_enable>
	return 0;
    aa7a:	e7e1      	b.n	aa40 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    aa7c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    aa80:	d020      	beq.n	aac4 <gpio_nrfx_pin_interrupt_configure+0xa0>
    aa82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    aa86:	bf14      	ite	ne
    aa88:	2301      	movne	r3, #1
    aa8a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    aa8c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    aa90:	6883      	ldr	r3, [r0, #8]
    aa92:	40cb      	lsrs	r3, r1
    aa94:	07d9      	lsls	r1, r3, #31
    aa96:	d4e3      	bmi.n	aa60 <gpio_nrfx_pin_interrupt_configure+0x3c>
    aa98:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    aa9c:	d1e0      	bne.n	aa60 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    aa9e:	4a11      	ldr	r2, [pc, #68]	; (aae4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    aaa0:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    aaa4:	3380      	adds	r3, #128	; 0x80
    aaa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    aaaa:	07db      	lsls	r3, r3, #31
    aaac:	d4d8      	bmi.n	aa60 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    aaae:	f10d 0507 	add.w	r5, sp, #7
    aab2:	4629      	mov	r1, r5
    aab4:	4620      	mov	r0, r4
    aab6:	f002 fbaf 	bl	d218 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    aaba:	4b0b      	ldr	r3, [pc, #44]	; (aae8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    aabc:	4298      	cmp	r0, r3
    aabe:	d003      	beq.n	aac8 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    aac0:	9503      	str	r5, [sp, #12]
    aac2:	e7cd      	b.n	aa60 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    aac4:	2303      	movs	r3, #3
    aac6:	e7e1      	b.n	aa8c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    aac8:	4628      	mov	r0, r5
    aaca:	f002 fbf3 	bl	d2b4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    aace:	4b04      	ldr	r3, [pc, #16]	; (aae0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    aad0:	4298      	cmp	r0, r3
    aad2:	d0f5      	beq.n	aac0 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    aad4:	f06f 000b 	mvn.w	r0, #11
    aad8:	e7b3      	b.n	aa42 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    aada:	f06f 0015 	mvn.w	r0, #21
    aade:	e7b0      	b.n	aa42 <gpio_nrfx_pin_interrupt_configure+0x1e>
    aae0:	0bad0000 	.word	0x0bad0000
    aae4:	40842500 	.word	0x40842500
    aae8:	0bad0004 	.word	0x0bad0004

0000aaec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    aaec:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    aaee:	f002 fbd1 	bl	d294 <nrfx_gpiote_is_init>
    aaf2:	4604      	mov	r4, r0
    aaf4:	b968      	cbnz	r0, ab12 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    aaf6:	f002 fba5 	bl	d244 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    aafa:	4b08      	ldr	r3, [pc, #32]	; (ab1c <gpio_nrfx_init+0x30>)
    aafc:	4298      	cmp	r0, r3
    aafe:	d10a      	bne.n	ab16 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    ab00:	4621      	mov	r1, r4
    ab02:	4807      	ldr	r0, [pc, #28]	; (ab20 <gpio_nrfx_init+0x34>)
    ab04:	f002 fb82 	bl	d20c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    ab08:	4622      	mov	r2, r4
    ab0a:	2105      	movs	r1, #5
    ab0c:	2031      	movs	r0, #49	; 0x31
    ab0e:	f7ff f9c5 	bl	9e9c <z_arm_irq_priority_set>
		return 0;
    ab12:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    ab14:	bd10      	pop	{r4, pc}
		return -EIO;
    ab16:	f06f 0004 	mvn.w	r0, #4
    ab1a:	e7fb      	b.n	ab14 <gpio_nrfx_init+0x28>
    ab1c:	0bad0000 	.word	0x0bad0000
    ab20:	0000ab25 	.word	0x0000ab25

0000ab24 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    ab24:	0943      	lsrs	r3, r0, #5
{
    ab26:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    ab28:	d107      	bne.n	ab3a <nrfx_gpio_handler+0x16>
	return list->head;
    ab2a:	4b0b      	ldr	r3, [pc, #44]	; (ab58 <nrfx_gpio_handler+0x34>)
    ab2c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ab2e:	b121      	cbz	r1, ab3a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    ab30:	2501      	movs	r5, #1
	return node->next;
    ab32:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    ab34:	4e09      	ldr	r6, [pc, #36]	; (ab5c <nrfx_gpio_handler+0x38>)
    ab36:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ab38:	b901      	cbnz	r1, ab3c <nrfx_gpio_handler+0x18>
}
    ab3a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    ab3c:	688a      	ldr	r2, [r1, #8]
    ab3e:	402a      	ands	r2, r5
    ab40:	d002      	beq.n	ab48 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    ab42:	4630      	mov	r0, r6
    ab44:	684b      	ldr	r3, [r1, #4]
    ab46:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ab48:	b11c      	cbz	r4, ab52 <nrfx_gpio_handler+0x2e>
    ab4a:	6823      	ldr	r3, [r4, #0]
    ab4c:	4621      	mov	r1, r4
    ab4e:	461c      	mov	r4, r3
    ab50:	e7f2      	b.n	ab38 <nrfx_gpio_handler+0x14>
    ab52:	4623      	mov	r3, r4
    ab54:	e7fa      	b.n	ab4c <nrfx_gpio_handler+0x28>
    ab56:	bf00      	nop
    ab58:	2000ca24 	.word	0x2000ca24
    ab5c:	000120e0 	.word	0x000120e0

0000ab60 <gpio_nrfx_pin_configure>:
{
    ab60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    ab64:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ab66:	f001 051f 	and.w	r5, r1, #31
    ab6a:	7b3b      	ldrb	r3, [r7, #12]
{
    ab6c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ab6e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    ab72:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    ab74:	4628      	mov	r0, r5
    ab76:	f10d 0103 	add.w	r1, sp, #3
    ab7a:	f002 fb4d 	bl	d218 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    ab7e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    ab82:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    ab84:	d10b      	bne.n	ab9e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    ab86:	4628      	mov	r0, r5
    ab88:	f002 fc06 	bl	d398 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    ab8c:	4b3c      	ldr	r3, [pc, #240]	; (ac80 <gpio_nrfx_pin_configure+0x120>)
    ab8e:	4598      	cmp	r8, r3
    ab90:	d103      	bne.n	ab9a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    ab92:	f89d 0003 	ldrb.w	r0, [sp, #3]
    ab96:	f002 fb87 	bl	d2a8 <nrfx_gpiote_channel_free>
		return 0;
    ab9a:	2000      	movs	r0, #0
    ab9c:	e00c      	b.n	abb8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    ab9e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    aba0:	4628      	mov	r0, r5
    aba2:	4619      	mov	r1, r3
    aba4:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    aba6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    abaa:	f002 fa03 	bl	cfb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    abae:	4b34      	ldr	r3, [pc, #208]	; (ac80 <gpio_nrfx_pin_configure+0x120>)
    abb0:	4298      	cmp	r0, r3
    abb2:	d004      	beq.n	abbe <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    abb4:	f06f 0015 	mvn.w	r0, #21
}
    abb8:	b004      	add	sp, #16
    abba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    abbe:	4580      	cmp	r8, r0
    abc0:	d103      	bne.n	abca <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    abc2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    abc6:	f002 fb6f 	bl	d2a8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    abca:	03a3      	lsls	r3, r4, #14
    abcc:	d549      	bpl.n	ac62 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    abce:	f240 3306 	movw	r3, #774	; 0x306
    abd2:	4023      	ands	r3, r4
    abd4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    abd8:	d019      	beq.n	ac0e <gpio_nrfx_pin_configure+0xae>
    abda:	d80c      	bhi.n	abf6 <gpio_nrfx_pin_configure+0x96>
    abdc:	2b06      	cmp	r3, #6
    abde:	d017      	beq.n	ac10 <gpio_nrfx_pin_configure+0xb0>
    abe0:	d804      	bhi.n	abec <gpio_nrfx_pin_configure+0x8c>
    abe2:	b1ab      	cbz	r3, ac10 <gpio_nrfx_pin_configure+0xb0>
    abe4:	2b02      	cmp	r3, #2
    abe6:	d1e5      	bne.n	abb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    abe8:	2304      	movs	r3, #4
    abea:	e011      	b.n	ac10 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    abec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    abf0:	d1e0      	bne.n	abb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    abf2:	2301      	movs	r3, #1
    abf4:	e00c      	b.n	ac10 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    abf6:	f240 2202 	movw	r2, #514	; 0x202
    abfa:	4293      	cmp	r3, r2
    abfc:	d026      	beq.n	ac4c <gpio_nrfx_pin_configure+0xec>
    abfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    ac02:	d025      	beq.n	ac50 <gpio_nrfx_pin_configure+0xf0>
    ac04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ac08:	d1d4      	bne.n	abb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    ac0a:	2302      	movs	r3, #2
    ac0c:	e000      	b.n	ac10 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    ac0e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    ac10:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    ac14:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    ac18:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    ac1c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    ac1e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    ac22:	bf4c      	ite	mi
    ac24:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    ac26:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    ac2a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    ac2c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    ac30:	d510      	bpl.n	ac54 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    ac32:	2301      	movs	r3, #1
    ac34:	687a      	ldr	r2, [r7, #4]
    ac36:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    ac38:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    ac3a:	2200      	movs	r2, #0
    ac3c:	4628      	mov	r0, r5
    ac3e:	a901      	add	r1, sp, #4
    ac40:	f002 fa64 	bl	d10c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    ac44:	4b0e      	ldr	r3, [pc, #56]	; (ac80 <gpio_nrfx_pin_configure+0x120>)
    ac46:	4298      	cmp	r0, r3
    ac48:	d0a7      	beq.n	ab9a <gpio_nrfx_pin_configure+0x3a>
    ac4a:	e7b3      	b.n	abb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    ac4c:	2305      	movs	r3, #5
    ac4e:	e7df      	b.n	ac10 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    ac50:	2303      	movs	r3, #3
    ac52:	e7dd      	b.n	ac10 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    ac54:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    ac56:	bf41      	itttt	mi
    ac58:	2301      	movmi	r3, #1
    ac5a:	687a      	ldrmi	r2, [r7, #4]
    ac5c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    ac5e:	60d3      	strmi	r3, [r2, #12]
}
    ac60:	e7eb      	b.n	ac3a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    ac62:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    ac64:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    ac68:	bf4c      	ite	mi
    ac6a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    ac6c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    ac70:	461a      	mov	r2, r3
    ac72:	4628      	mov	r0, r5
    ac74:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    ac76:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    ac7a:	f002 f99b 	bl	cfb4 <nrfx_gpiote_input_configure>
    ac7e:	e7e1      	b.n	ac44 <gpio_nrfx_pin_configure+0xe4>
    ac80:	0bad0000 	.word	0x0bad0000

0000ac84 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    ac84:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    ac86:	794b      	ldrb	r3, [r1, #5]
    ac88:	2b01      	cmp	r3, #1
    ac8a:	d026      	beq.n	acda <uarte_nrfx_configure+0x56>
    ac8c:	2b03      	cmp	r3, #3
    ac8e:	d121      	bne.n	acd4 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    ac90:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    ac92:	798b      	ldrb	r3, [r1, #6]
    ac94:	2b03      	cmp	r3, #3
    ac96:	d11d      	bne.n	acd4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    ac98:	79ce      	ldrb	r6, [r1, #7]
    ac9a:	b10e      	cbz	r6, aca0 <uarte_nrfx_configure+0x1c>
    ac9c:	2e01      	cmp	r6, #1
    ac9e:	d119      	bne.n	acd4 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    aca0:	790a      	ldrb	r2, [r1, #4]
    aca2:	b112      	cbz	r2, acaa <uarte_nrfx_configure+0x26>
    aca4:	2a02      	cmp	r2, #2
    aca6:	d115      	bne.n	acd4 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    aca8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    acaa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    acac:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    acae:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    acb2:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    acb4:	d067      	beq.n	ad86 <uarte_nrfx_configure+0x102>
    acb6:	d82d      	bhi.n	ad14 <uarte_nrfx_configure+0x90>
    acb8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    acbc:	d066      	beq.n	ad8c <uarte_nrfx_configure+0x108>
    acbe:	d816      	bhi.n	acee <uarte_nrfx_configure+0x6a>
    acc0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    acc4:	d064      	beq.n	ad90 <uarte_nrfx_configure+0x10c>
    acc6:	d80a      	bhi.n	acde <uarte_nrfx_configure+0x5a>
    acc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    accc:	d063      	beq.n	ad96 <uarte_nrfx_configure+0x112>
    acce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    acd2:	d063      	beq.n	ad9c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    acd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    acd8:	e054      	b.n	ad84 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    acda:	2500      	movs	r5, #0
    acdc:	e7d9      	b.n	ac92 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    acde:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    ace2:	d05e      	beq.n	ada2 <uarte_nrfx_configure+0x11e>
    ace4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    ace8:	d1f4      	bne.n	acd4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    acea:	4b38      	ldr	r3, [pc, #224]	; (adcc <uarte_nrfx_configure+0x148>)
    acec:	e03c      	b.n	ad68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    acee:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    acf2:	d059      	beq.n	ada8 <uarte_nrfx_configure+0x124>
    acf4:	d807      	bhi.n	ad06 <uarte_nrfx_configure+0x82>
    acf6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    acfa:	d057      	beq.n	adac <uarte_nrfx_configure+0x128>
    acfc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    ad00:	d1e8      	bne.n	acd4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    ad02:	4b33      	ldr	r3, [pc, #204]	; (add0 <uarte_nrfx_configure+0x14c>)
    ad04:	e030      	b.n	ad68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ad06:	f647 2412 	movw	r4, #31250	; 0x7a12
    ad0a:	42a3      	cmp	r3, r4
    ad0c:	d1e2      	bne.n	acd4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    ad0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ad12:	e029      	b.n	ad68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ad14:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    ad18:	d04a      	beq.n	adb0 <uarte_nrfx_configure+0x12c>
    ad1a:	d813      	bhi.n	ad44 <uarte_nrfx_configure+0xc0>
    ad1c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    ad20:	d049      	beq.n	adb6 <uarte_nrfx_configure+0x132>
    ad22:	d809      	bhi.n	ad38 <uarte_nrfx_configure+0xb4>
    ad24:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    ad28:	42a3      	cmp	r3, r4
    ad2a:	d046      	beq.n	adba <uarte_nrfx_configure+0x136>
    ad2c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    ad30:	d1d0      	bne.n	acd4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    ad32:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    ad36:	e017      	b.n	ad68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ad38:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    ad3c:	d1ca      	bne.n	acd4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    ad3e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    ad42:	e011      	b.n	ad68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ad44:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    ad48:	d03a      	beq.n	adc0 <uarte_nrfx_configure+0x13c>
    ad4a:	d808      	bhi.n	ad5e <uarte_nrfx_configure+0xda>
    ad4c:	4c21      	ldr	r4, [pc, #132]	; (add4 <uarte_nrfx_configure+0x150>)
    ad4e:	42a3      	cmp	r3, r4
    ad50:	d039      	beq.n	adc6 <uarte_nrfx_configure+0x142>
    ad52:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    ad56:	d1bd      	bne.n	acd4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    ad58:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    ad5c:	e004      	b.n	ad68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ad5e:	4c1e      	ldr	r4, [pc, #120]	; (add8 <uarte_nrfx_configure+0x154>)
    ad60:	42a3      	cmp	r3, r4
    ad62:	d1b7      	bne.n	acd4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    ad64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    ad68:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    ad6a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    ad6e:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    ad70:	4335      	orrs	r5, r6
    ad72:	681b      	ldr	r3, [r3, #0]
    ad74:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ad76:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    ad7a:	1d23      	adds	r3, r4, #4
    ad7c:	c903      	ldmia	r1, {r0, r1}
    ad7e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    ad82:	2000      	movs	r0, #0
}
    ad84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    ad86:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    ad8a:	e7ed      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    ad8c:	4b13      	ldr	r3, [pc, #76]	; (addc <uarte_nrfx_configure+0x158>)
    ad8e:	e7eb      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    ad90:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    ad94:	e7e8      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    ad96:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    ad9a:	e7e5      	b.n	ad68 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ad9c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    ada0:	e7e2      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    ada2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    ada6:	e7df      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    ada8:	4b0d      	ldr	r3, [pc, #52]	; (ade0 <uarte_nrfx_configure+0x15c>)
    adaa:	e7dd      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    adac:	4b0d      	ldr	r3, [pc, #52]	; (ade4 <uarte_nrfx_configure+0x160>)
    adae:	e7db      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    adb0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    adb4:	e7d8      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    adb6:	4b0c      	ldr	r3, [pc, #48]	; (ade8 <uarte_nrfx_configure+0x164>)
    adb8:	e7d6      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    adba:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    adbe:	e7d3      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    adc0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    adc4:	e7d0      	b.n	ad68 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    adc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    adca:	e7cd      	b.n	ad68 <uarte_nrfx_configure+0xe4>
    adcc:	0013b000 	.word	0x0013b000
    add0:	004ea000 	.word	0x004ea000
    add4:	0003d090 	.word	0x0003d090
    add8:	000f4240 	.word	0x000f4240
    addc:	00275000 	.word	0x00275000
    ade0:	0075c000 	.word	0x0075c000
    ade4:	003af000 	.word	0x003af000
    ade8:	013a9000 	.word	0x013a9000

0000adec <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    adec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    adf0:	4680      	mov	r8, r0
    adf2:	2200      	movs	r2, #0
    adf4:	2101      	movs	r1, #1
    adf6:	2008      	movs	r0, #8
    adf8:	f7ff f850 	bl	9e9c <z_arm_irq_priority_set>
    adfc:	2008      	movs	r0, #8
    adfe:	f7ff f831 	bl	9e64 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    ae02:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    ae04:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    ae08:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    ae0c:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    ae0e:	aa01      	add	r2, sp, #4
    ae10:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    ae14:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    ae18:	f8d7 900c 	ldr.w	r9, [r7, #12]
    ae1c:	4648      	mov	r0, r9
    ae1e:	f005 ff77 	bl	10d10 <pinctrl_lookup_state>
	if (ret < 0) {
    ae22:	1e05      	subs	r5, r0, #0
    ae24:	db4d      	blt.n	aec2 <_flash_used+0x86>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    ae26:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    ae28:	f8d9 2000 	ldr.w	r2, [r9]
    ae2c:	7919      	ldrb	r1, [r3, #4]
    ae2e:	6818      	ldr	r0, [r3, #0]
    ae30:	f000 fab2 	bl	b398 <pinctrl_configure_pins>
	if (err < 0) {
    ae34:	1e05      	subs	r5, r0, #0
    ae36:	db44      	blt.n	aec2 <_flash_used+0x86>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    ae38:	4640      	mov	r0, r8
    ae3a:	1d31      	adds	r1, r6, #4
    ae3c:	f7ff ff22 	bl	ac84 <uarte_nrfx_configure>
	if (err) {
    ae40:	4605      	mov	r5, r0
    ae42:	2800      	cmp	r0, #0
    ae44:	d13d      	bne.n	aec2 <_flash_used+0x86>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    ae46:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    ae48:	0799      	lsls	r1, r3, #30
    ae4a:	d513      	bpl.n	ae74 <_flash_used+0x38>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    ae4c:	f106 0018 	add.w	r0, r6, #24
    ae50:	f002 f82a 	bl	cea8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    ae54:	4b1e      	ldr	r3, [pc, #120]	; (aed0 <_flash_used+0x94>)
    ae56:	4298      	cmp	r0, r3
    ae58:	d137      	bne.n	aeca <_flash_used+0x8e>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    ae5a:	7e33      	ldrb	r3, [r6, #24]
    ae5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ae60:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    ae64:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    ae68:	2301      	movs	r3, #1
    ae6a:	7e32      	ldrb	r2, [r6, #24]
    ae6c:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    ae6e:	4a19      	ldr	r2, [pc, #100]	; (aed4 <_flash_used+0x98>)
    ae70:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ae74:	2308      	movs	r3, #8
    ae76:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    ae7a:	7a3b      	ldrb	r3, [r7, #8]
    ae7c:	b953      	cbnz	r3, ae94 <_flash_used+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae7e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ae82:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ae86:	6973      	ldr	r3, [r6, #20]
    ae88:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    ae8c:	2301      	movs	r3, #1
    ae8e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ae92:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    ae94:	687b      	ldr	r3, [r7, #4]
    ae96:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    ae98:	bf5c      	itt	pl
    ae9a:	f44f 7380 	movpl.w	r3, #256	; 0x100
    ae9e:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    aea2:	687b      	ldr	r3, [r7, #4]
    aea4:	06db      	lsls	r3, r3, #27
    aea6:	bf44      	itt	mi
    aea8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    aeac:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    aeb0:	6933      	ldr	r3, [r6, #16]
    aeb2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    aeb6:	2300      	movs	r3, #0
    aeb8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aebc:	2301      	movs	r3, #1
    aebe:	60a3      	str	r3, [r4, #8]
    aec0:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    aec2:	4628      	mov	r0, r5
    aec4:	b003      	add	sp, #12
    aec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    aeca:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    aece:	e7f8      	b.n	aec2 <_flash_used+0x86>
    aed0:	0bad0000 	.word	0x0bad0000
    aed4:	40017000 	.word	0x40017000

0000aed8 <uarte_nrfx_poll_out>:
{
    aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aeda:	4604      	mov	r4, r0
    aedc:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    aede:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    aee0:	f006 fc82 	bl	117e8 <k_is_in_isr>
    aee4:	b9b0      	cbnz	r0, af14 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    aee6:	4b2e      	ldr	r3, [pc, #184]	; (afa0 <uarte_nrfx_poll_out+0xc8>)
    aee8:	781b      	ldrb	r3, [r3, #0]
    aeea:	b19b      	cbz	r3, af14 <uarte_nrfx_poll_out+0x3c>
{
    aeec:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    aeee:	6860      	ldr	r0, [r4, #4]
    aef0:	f005 fea6 	bl	10c40 <is_tx_ready.isra.0>
    aef4:	bb00      	cbnz	r0, af38 <uarte_nrfx_poll_out+0x60>
    aef6:	2001      	movs	r0, #1
    aef8:	f006 fa25 	bl	11346 <nrfx_busy_wait>
    aefc:	3e01      	subs	r6, #1
    aefe:	d1f6      	bne.n	aeee <uarte_nrfx_poll_out+0x16>
    af00:	2100      	movs	r1, #0
    af02:	2021      	movs	r0, #33	; 0x21
    af04:	f004 fba0 	bl	f648 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    af08:	e7f0      	b.n	aeec <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    af0a:	f386 8811 	msr	BASEPRI, r6
    af0e:	f3bf 8f6f 	isb	sy
}
    af12:	e7f5      	b.n	af00 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    af14:	f04f 0320 	mov.w	r3, #32
    af18:	f3ef 8611 	mrs	r6, BASEPRI
    af1c:	f383 8812 	msr	BASEPRI_MAX, r3
    af20:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    af24:	6860      	ldr	r0, [r4, #4]
    af26:	4631      	mov	r1, r6
    af28:	f005 fe8a 	bl	10c40 <is_tx_ready.isra.0>
    af2c:	b990      	cbnz	r0, af54 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    af2e:	f386 8811 	msr	BASEPRI, r6
    af32:	f3bf 8f6f 	isb	sy
}
    af36:	e7ed      	b.n	af14 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    af38:	f04f 0320 	mov.w	r3, #32
    af3c:	f3ef 8611 	mrs	r6, BASEPRI
    af40:	f383 8812 	msr	BASEPRI_MAX, r3
    af44:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    af48:	6860      	ldr	r0, [r4, #4]
    af4a:	4631      	mov	r1, r6
    af4c:	f005 fe78 	bl	10c40 <is_tx_ready.isra.0>
    af50:	2800      	cmp	r0, #0
    af52:	d0da      	beq.n	af0a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    af54:	693b      	ldr	r3, [r7, #16]
    af56:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    af58:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    af5a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    af5c:	6813      	ldr	r3, [r2, #0]
    af5e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    af62:	2001      	movs	r0, #1
    af64:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    af68:	2000      	movs	r0, #0
    af6a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    af6e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    af72:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    af76:	6852      	ldr	r2, [r2, #4]
    af78:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    af7c:	06d2      	lsls	r2, r2, #27
    af7e:	d508      	bpl.n	af92 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    af80:	2008      	movs	r0, #8
	return config->uarte_regs;
    af82:	6862      	ldr	r2, [r4, #4]
    af84:	6812      	ldr	r2, [r2, #0]
    af86:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    af8a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    af8e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af92:	2201      	movs	r2, #1
    af94:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    af96:	f381 8811 	msr	BASEPRI, r1
    af9a:	f3bf 8f6f 	isb	sy
}
    af9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    afa0:	2000d45a 	.word	0x2000d45a

0000afa4 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    afa4:	2301      	movs	r3, #1
    afa6:	4083      	lsls	r3, r0
{
    afa8:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    afaa:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    afac:	4a0b      	ldr	r2, [pc, #44]	; (afdc <compare_int_lock+0x38>)
    afae:	e8d2 1fef 	ldaex	r1, [r2]
    afb2:	ea01 0504 	and.w	r5, r1, r4
    afb6:	e8c2 5fe6 	stlex	r6, r5, [r2]
    afba:	2e00      	cmp	r6, #0
    afbc:	d1f7      	bne.n	afae <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    afbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    afc2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    afc4:	4806      	ldr	r0, [pc, #24]	; (afe0 <compare_int_lock+0x3c>)
    afc6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    afca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    afce:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    afd2:	420b      	tst	r3, r1
}
    afd4:	bf14      	ite	ne
    afd6:	2001      	movne	r0, #1
    afd8:	2000      	moveq	r0, #0
    afda:	bd70      	pop	{r4, r5, r6, pc}
    afdc:	2000ca34 	.word	0x2000ca34
    afe0:	40015000 	.word	0x40015000

0000afe4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    afe4:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    afe6:	490e      	ldr	r1, [pc, #56]	; (b020 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    afe8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    afec:	e9d1 3400 	ldrd	r3, r4, [r1]
    aff0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    aff2:	18c3      	adds	r3, r0, r3
    aff4:	f144 0400 	adc.w	r4, r4, #0
    aff8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    affc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    b000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    b004:	d209      	bcs.n	b01a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    b006:	4b07      	ldr	r3, [pc, #28]	; (b024 <sys_clock_timeout_handler+0x40>)
    b008:	681b      	ldr	r3, [r3, #0]
    b00a:	0a1a      	lsrs	r2, r3, #8
    b00c:	061b      	lsls	r3, r3, #24
    b00e:	199c      	adds	r4, r3, r6
    b010:	4b05      	ldr	r3, [pc, #20]	; (b028 <sys_clock_timeout_handler+0x44>)
    b012:	f142 0500 	adc.w	r5, r2, #0
    b016:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    b01a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    b01c:	f004 bc8c 	b.w	f938 <sys_clock_announce>
    b020:	2000c798 	.word	0x2000c798
    b024:	2000ca38 	.word	0x2000ca38
    b028:	2000c7a0 	.word	0x2000c7a0

0000b02c <compare_int_unlock>:
	if (key) {
    b02c:	b1d9      	cbz	r1, b066 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    b02e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b030:	4a0d      	ldr	r2, [pc, #52]	; (b068 <compare_int_unlock+0x3c>)
    b032:	4083      	lsls	r3, r0
    b034:	e8d2 cfef 	ldaex	ip, [r2]
    b038:	ea4c 0c03 	orr.w	ip, ip, r3
    b03c:	e8c2 cfe1 	stlex	r1, ip, [r2]
    b040:	2900      	cmp	r1, #0
    b042:	d1f7      	bne.n	b034 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    b048:	4a08      	ldr	r2, [pc, #32]	; (b06c <compare_int_unlock+0x40>)
    b04a:	4083      	lsls	r3, r0
    b04c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b050:	4b07      	ldr	r3, [pc, #28]	; (b070 <compare_int_unlock+0x44>)
    b052:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    b056:	40c3      	lsrs	r3, r0
    b058:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b05a:	bf42      	ittt	mi
    b05c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    b060:	4b04      	ldrmi	r3, [pc, #16]	; (b074 <compare_int_unlock+0x48>)
    b062:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    b066:	4770      	bx	lr
    b068:	2000ca34 	.word	0x2000ca34
    b06c:	40015000 	.word	0x40015000
    b070:	2000ca30 	.word	0x2000ca30
    b074:	e000e100 	.word	0xe000e100

0000b078 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    b078:	4b0d      	ldr	r3, [pc, #52]	; (b0b0 <z_nrf_rtc_timer_read+0x38>)
    b07a:	6818      	ldr	r0, [r3, #0]
    b07c:	0a01      	lsrs	r1, r0, #8
    b07e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    b080:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    b084:	4b0b      	ldr	r3, [pc, #44]	; (b0b4 <z_nrf_rtc_timer_read+0x3c>)
    b086:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    b08a:	1818      	adds	r0, r3, r0
    b08c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    b090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    b094:	d20a      	bcs.n	b0ac <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    b096:	4b08      	ldr	r3, [pc, #32]	; (b0b8 <z_nrf_rtc_timer_read+0x40>)
    b098:	e9d3 2300 	ldrd	r2, r3, [r3]
    b09c:	4290      	cmp	r0, r2
    b09e:	eb71 0303 	sbcs.w	r3, r1, r3
    b0a2:	d203      	bcs.n	b0ac <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    b0a4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    b0a8:	f141 0100 	adc.w	r1, r1, #0
}
    b0ac:	4770      	bx	lr
    b0ae:	bf00      	nop
    b0b0:	2000ca38 	.word	0x2000ca38
    b0b4:	40015000 	.word	0x40015000
    b0b8:	2000c7a0 	.word	0x2000c7a0

0000b0bc <compare_set>:
{
    b0bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0c0:	4616      	mov	r6, r2
    b0c2:	461f      	mov	r7, r3
    b0c4:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    b0c6:	f7ff ff6d 	bl	afa4 <compare_int_lock>
    b0ca:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    b0cc:	f7ff ffd4 	bl	b078 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    b0d0:	42b0      	cmp	r0, r6
    b0d2:	eb71 0307 	sbcs.w	r3, r1, r7
    b0d6:	d250      	bcs.n	b17a <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    b0d8:	4b38      	ldr	r3, [pc, #224]	; (b1bc <compare_set+0x100>)
    b0da:	1a30      	subs	r0, r6, r0
    b0dc:	eb67 0101 	sbc.w	r1, r7, r1
    b0e0:	4298      	cmp	r0, r3
    b0e2:	f171 0100 	sbcs.w	r1, r1, #0
    b0e6:	d265      	bcs.n	b1b4 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    b0e8:	4b35      	ldr	r3, [pc, #212]	; (b1c0 <compare_set+0x104>)
    b0ea:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    b0ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    b0f2:	429f      	cmp	r7, r3
    b0f4:	bf08      	it	eq
    b0f6:	4296      	cmpeq	r6, r2
    b0f8:	d049      	beq.n	b18e <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b0fa:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    b0fe:	4931      	ldr	r1, [pc, #196]	; (b1c4 <compare_set+0x108>)
    b100:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    b104:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    b106:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    b10a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    b10e:	f005 fdf3 	bl	10cf8 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    b112:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    b116:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b118:	f104 0550 	add.w	r5, r4, #80	; 0x50
    b11c:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b11e:	b2ad      	uxth	r5, r5
    b120:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    b124:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    b128:	4a27      	ldr	r2, [pc, #156]	; (b1c8 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b12a:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
    b12e:	9301      	str	r3, [sp, #4]
    b130:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    b134:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b138:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    b13c:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    b140:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    b144:	eba0 0008 	sub.w	r0, r0, r8
    b148:	3803      	subs	r0, #3
    b14a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    b14e:	4290      	cmp	r0, r2
    b150:	d91d      	bls.n	b18e <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b152:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    b154:	b160      	cbz	r0, b170 <compare_set+0xb4>
     return p_reg->COUNTER;
    b156:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    b15a:	eba8 000b 	sub.w	r0, r8, fp
    b15e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    b162:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b166:	d912      	bls.n	b18e <compare_set+0xd2>
					event_clear(chan);
    b168:	4620      	mov	r0, r4
    b16a:	f005 fdc5 	bl	10cf8 <event_clear>
    b16e:	4a16      	ldr	r2, [pc, #88]	; (b1c8 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    b170:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    b174:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    b178:	e7da      	b.n	b130 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    b17a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b17c:	4a13      	ldr	r2, [pc, #76]	; (b1cc <compare_set+0x110>)
    b17e:	40a3      	lsls	r3, r4
    b180:	e8d2 0fef 	ldaex	r0, [r2]
    b184:	4318      	orrs	r0, r3
    b186:	e8c2 0fe1 	stlex	r1, r0, [r2]
    b18a:	2900      	cmp	r1, #0
    b18c:	d1f8      	bne.n	b180 <compare_set+0xc4>
	return ret;
    b18e:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    b190:	490b      	ldr	r1, [pc, #44]	; (b1c0 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    b192:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    b194:	0123      	lsls	r3, r4, #4
    b196:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    b19a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    b19c:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    b1a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b1a2:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    b1a4:	4620      	mov	r0, r4
    b1a6:	9900      	ldr	r1, [sp, #0]
    b1a8:	f7ff ff40 	bl	b02c <compare_int_unlock>
}
    b1ac:	4628      	mov	r0, r5
    b1ae:	b003      	add	sp, #12
    b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    b1b4:	f06f 0515 	mvn.w	r5, #21
    b1b8:	e7f4      	b.n	b1a4 <compare_set+0xe8>
    b1ba:	bf00      	nop
    b1bc:	00800001 	.word	0x00800001
    b1c0:	2000c788 	.word	0x2000c788
    b1c4:	40015000 	.word	0x40015000
    b1c8:	007ffffd 	.word	0x007ffffd
    b1cc:	2000ca30 	.word	0x2000ca30

0000b1d0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    b1d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    b1d2:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    b1d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b1d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b1dc:	4d16      	ldr	r5, [pc, #88]	; (b238 <sys_clock_driver_init+0x68>)
    b1de:	4b17      	ldr	r3, [pc, #92]	; (b23c <sys_clock_driver_init+0x6c>)
    b1e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    b1e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    b1e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    b1ec:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b1ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    b1f2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    b1f6:	4b12      	ldr	r3, [pc, #72]	; (b240 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    b1f8:	2101      	movs	r1, #1
    b1fa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    b1fe:	2015      	movs	r0, #21
    b200:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    b204:	4622      	mov	r2, r4
    b206:	f7fe fe49 	bl	9e9c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    b20a:	2015      	movs	r0, #21
    b20c:	f7fe fe2a 	bl	9e64 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    b210:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    b212:	4a0c      	ldr	r2, [pc, #48]	; (b244 <sys_clock_driver_init+0x74>)
    b214:	60ab      	str	r3, [r5, #8]
    b216:	602b      	str	r3, [r5, #0]
    b218:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    b21a:	4b0b      	ldr	r3, [pc, #44]	; (b248 <sys_clock_driver_init+0x78>)
    b21c:	4a0b      	ldr	r2, [pc, #44]	; (b24c <sys_clock_driver_init+0x7c>)
    b21e:	9300      	str	r3, [sp, #0]
    b220:	4620      	mov	r0, r4
    b222:	2300      	movs	r3, #0
    b224:	9401      	str	r4, [sp, #4]
    b226:	f7ff ff49 	bl	b0bc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    b22a:	4630      	mov	r0, r6
    b22c:	f7ff fb56 	bl	a8dc <z_nrf_clock_control_lf_on>

	return 0;
}
    b230:	4620      	mov	r0, r4
    b232:	b002      	add	sp, #8
    b234:	bd70      	pop	{r4, r5, r6, pc}
    b236:	bf00      	nop
    b238:	40015000 	.word	0x40015000
    b23c:	2000c788 	.word	0x2000c788
    b240:	e000e100 	.word	0xe000e100
    b244:	2000ca34 	.word	0x2000ca34
    b248:	0000afe5 	.word	0x0000afe5
    b24c:	007fffff 	.word	0x007fffff

0000b250 <rtc_nrf_isr>:
{
    b250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    b254:	4b2e      	ldr	r3, [pc, #184]	; (b310 <rtc_nrf_isr+0xc0>)
    b256:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    b25a:	0790      	lsls	r0, r2, #30
    b25c:	d50b      	bpl.n	b276 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b25e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    b262:	b142      	cbz	r2, b276 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b264:	2200      	movs	r2, #0
    b266:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    b26a:	4a2a      	ldr	r2, [pc, #168]	; (b314 <rtc_nrf_isr+0xc4>)
    b26c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    b270:	6813      	ldr	r3, [r2, #0]
    b272:	3301      	adds	r3, #1
    b274:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    b276:	4a26      	ldr	r2, [pc, #152]	; (b310 <rtc_nrf_isr+0xc0>)
    b278:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    b27c:	03d9      	lsls	r1, r3, #15
    b27e:	d527      	bpl.n	b2d0 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b280:	4b25      	ldr	r3, [pc, #148]	; (b318 <rtc_nrf_isr+0xc8>)
    b282:	e8d3 1fef 	ldaex	r1, [r3]
    b286:	f021 0001 	bic.w	r0, r1, #1
    b28a:	e8c3 0fe4 	stlex	r4, r0, [r3]
    b28e:	2c00      	cmp	r4, #0
    b290:	d1f7      	bne.n	b282 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    b292:	07cb      	lsls	r3, r1, #31
    b294:	d402      	bmi.n	b29c <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b296:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    b29a:	b1cb      	cbz	r3, b2d0 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b29c:	2500      	movs	r5, #0
    b29e:	4c1c      	ldr	r4, [pc, #112]	; (b310 <rtc_nrf_isr+0xc0>)
    b2a0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    b2a4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    b2a8:	f7ff fee6 	bl	b078 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    b2ac:	f04f 0320 	mov.w	r3, #32
    b2b0:	f3ef 8211 	mrs	r2, BASEPRI
    b2b4:	f383 8812 	msr	BASEPRI_MAX, r3
    b2b8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    b2bc:	4b17      	ldr	r3, [pc, #92]	; (b31c <rtc_nrf_isr+0xcc>)
    b2be:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    b2c2:	42b0      	cmp	r0, r6
    b2c4:	41b9      	sbcs	r1, r7
    b2c6:	d206      	bcs.n	b2d6 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    b2c8:	f382 8811 	msr	BASEPRI, r2
    b2cc:	f3bf 8f6f 	isb	sy
}
    b2d0:	b003      	add	sp, #12
    b2d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    b2d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    b2da:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    b2de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    b2e2:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    b2e4:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    b2e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    b2ec:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b2f0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    b2f4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b2f8:	f382 8811 	msr	BASEPRI, r2
    b2fc:	f3bf 8f6f 	isb	sy
		if (handler) {
    b300:	2900      	cmp	r1, #0
    b302:	d0e5      	beq.n	b2d0 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    b304:	9000      	str	r0, [sp, #0]
    b306:	4632      	mov	r2, r6
    b308:	463b      	mov	r3, r7
    b30a:	4628      	mov	r0, r5
    b30c:	4788      	blx	r1
    b30e:	e7df      	b.n	b2d0 <rtc_nrf_isr+0x80>
    b310:	40015000 	.word	0x40015000
    b314:	2000ca38 	.word	0x2000ca38
    b318:	2000ca30 	.word	0x2000ca30
    b31c:	2000c788 	.word	0x2000c788

0000b320 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    b320:	1c43      	adds	r3, r0, #1
{
    b322:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    b324:	d021      	beq.n	b36a <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    b326:	2801      	cmp	r0, #1
    b328:	dd21      	ble.n	b36e <sys_clock_set_timeout+0x4e>
    b32a:	4a12      	ldr	r2, [pc, #72]	; (b374 <sys_clock_set_timeout+0x54>)
    b32c:	4b12      	ldr	r3, [pc, #72]	; (b378 <sys_clock_set_timeout+0x58>)
    b32e:	4290      	cmp	r0, r2
    b330:	bfd4      	ite	le
    b332:	4604      	movle	r4, r0
    b334:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    b336:	f7ff fe9f 	bl	b078 <z_nrf_rtc_timer_read>
    b33a:	4b10      	ldr	r3, [pc, #64]	; (b37c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    b33c:	490e      	ldr	r1, [pc, #56]	; (b378 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b342:	1a80      	subs	r0, r0, r2
		cyc = 0;
    b344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b348:	bf28      	it	cs
    b34a:	2400      	movcs	r4, #0
	cyc += unannounced;
    b34c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    b34e:	428c      	cmp	r4, r1
    b350:	bf28      	it	cs
    b352:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    b354:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    b356:	490a      	ldr	r1, [pc, #40]	; (b380 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    b358:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    b35a:	9001      	str	r0, [sp, #4]
    b35c:	9100      	str	r1, [sp, #0]
    b35e:	f143 0300 	adc.w	r3, r3, #0
    b362:	f7ff feab 	bl	b0bc <compare_set>
}
    b366:	b002      	add	sp, #8
    b368:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    b36a:	4c03      	ldr	r4, [pc, #12]	; (b378 <sys_clock_set_timeout+0x58>)
    b36c:	e7e3      	b.n	b336 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    b36e:	2401      	movs	r4, #1
    b370:	e7e1      	b.n	b336 <sys_clock_set_timeout+0x16>
    b372:	bf00      	nop
    b374:	007ffffe 	.word	0x007ffffe
    b378:	007fffff 	.word	0x007fffff
    b37c:	2000c798 	.word	0x2000c798
    b380:	0000afe5 	.word	0x0000afe5

0000b384 <sys_clock_elapsed>:
{
    b384:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    b386:	f7ff fe77 	bl	b078 <z_nrf_rtc_timer_read>
    b38a:	4b02      	ldr	r3, [pc, #8]	; (b394 <sys_clock_elapsed+0x10>)
    b38c:	681b      	ldr	r3, [r3, #0]
}
    b38e:	1ac0      	subs	r0, r0, r3
    b390:	bd08      	pop	{r3, pc}
    b392:	bf00      	nop
    b394:	2000c798 	.word	0x2000c798

0000b398 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    b398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b39c:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    b39e:	4e3f      	ldr	r6, [pc, #252]	; (b49c <pinctrl_configure_pins+0x104>)
    b3a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    b3a4:	4281      	cmp	r1, r0
    b3a6:	d102      	bne.n	b3ae <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    b3a8:	2000      	movs	r0, #0
}
    b3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    b3ae:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    b3b0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    b3b4:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    b3b8:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    b3ba:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    b3be:	bf08      	it	eq
    b3c0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    b3c4:	2d19      	cmp	r5, #25
    b3c6:	d866      	bhi.n	b496 <pinctrl_configure_pins+0xfe>
    b3c8:	e8df f005 	tbb	[pc, r5]
    b3cc:	1e1b160d 	.word	0x1e1b160d
    b3d0:	651e2d21 	.word	0x651e2d21
    b3d4:	31656565 	.word	0x31656565
    b3d8:	65656551 	.word	0x65656551
    b3dc:	65656565 	.word	0x65656565
    b3e0:	5c546565 	.word	0x5c546565
    b3e4:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    b3e6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    b3ea:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b3ee:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    b3f2:	60b5      	str	r5, [r6, #8]
}
    b3f4:	2501      	movs	r5, #1
    b3f6:	e002      	b.n	b3fe <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    b3f8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    b3fc:	2500      	movs	r5, #0
    b3fe:	46ac      	mov	ip, r5
    b400:	e01c      	b.n	b43c <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    b402:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    b406:	e7f0      	b.n	b3ea <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    b408:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    b40c:	e7f6      	b.n	b3fc <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    b40e:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    b410:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    b414:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b418:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    b41c:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    b420:	f04f 0c01 	mov.w	ip, #1
    b424:	e00a      	b.n	b43c <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    b426:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    b42a:	2501      	movs	r5, #1
    b42c:	e7f2      	b.n	b414 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    b42e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    b432:	2c00      	cmp	r4, #0
    b434:	d1e2      	bne.n	b3fc <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    b436:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    b438:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    b43a:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    b43c:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    b440:	0224      	lsls	r4, r4, #8
    b442:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    b446:	f1b8 0f00 	cmp.w	r8, #0
    b44a:	bf1c      	itt	ne
    b44c:	f04f 0c00 	movne.w	ip, #0
    b450:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b452:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    b456:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    b45a:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b45e:	ea44 040c 	orr.w	r4, r4, ip
    b462:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    b466:	3380      	adds	r3, #128	; 0x80
    b468:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    b46c:	e79a      	b.n	b3a4 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    b46e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    b472:	e7de      	b.n	b432 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    b474:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    b478:	6805      	ldr	r5, [r0, #0]
    b47a:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    b47e:	2d00      	cmp	r5, #0
    b480:	d0d3      	beq.n	b42a <pinctrl_configure_pins+0x92>
    b482:	e7b2      	b.n	b3ea <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    b484:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    b488:	e7f6      	b.n	b478 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    b48a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    b48e:	e7f3      	b.n	b478 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    b490:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    b494:	e7f0      	b.n	b478 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    b496:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b49a:	e786      	b.n	b3aa <pinctrl_configure_pins+0x12>
    b49c:	40842500 	.word	0x40842500

0000b4a0 <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
    b4a0:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
    b4a2:	4d1a      	ldr	r5, [pc, #104]	; (b50c <_nrf_modem_lib_init+0x6c>)
    b4a4:	4c1a      	ldr	r4, [pc, #104]	; (b510 <_nrf_modem_lib_init+0x70>)
    b4a6:	782b      	ldrb	r3, [r5, #0]
    b4a8:	b933      	cbnz	r3, b4b8 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
    b4aa:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
    b4ae:	4819      	ldr	r0, [pc, #100]	; (b514 <_nrf_modem_lib_init+0x74>)
    b4b0:	f006 f9b4 	bl	1181c <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
    b4b4:	2301      	movs	r3, #1
    b4b6:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
    b4b8:	2200      	movs	r2, #0
    b4ba:	2101      	movs	r1, #1
    b4bc:	202a      	movs	r0, #42	; 0x2a
    b4be:	f7fe fced 	bl	9e9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params);
    b4c2:	4815      	ldr	r0, [pc, #84]	; (b518 <_nrf_modem_lib_init+0x78>)
    b4c4:	f003 f8da 	bl	e67c <nrf_modem_init>
    b4c8:	4d14      	ldr	r5, [pc, #80]	; (b51c <_nrf_modem_lib_init+0x7c>)
    b4ca:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    b4cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b4d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b4d4:	480f      	ldr	r0, [pc, #60]	; (b514 <_nrf_modem_lib_init+0x74>)
    b4d6:	f003 fb89 	bl	ebec <z_impl_k_mutex_lock>
	return list->head;
    b4da:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
    b4dc:	b120      	cbz	r0, b4e8 <_nrf_modem_lib_init+0x48>
	return node->next;
    b4de:	6804      	ldr	r4, [r0, #0]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    b4e0:	3004      	adds	r0, #4
    b4e2:	f003 fc6d 	bl	edc0 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
    b4e6:	b944      	cbnz	r4, b4fa <_nrf_modem_lib_init+0x5a>
	return z_impl_k_mutex_unlock(mutex);
    b4e8:	480a      	ldr	r0, [pc, #40]	; (b514 <_nrf_modem_lib_init+0x74>)
    b4ea:	f003 fbf9 	bl	ece0 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    b4ee:	4c0c      	ldr	r4, [pc, #48]	; (b520 <_nrf_modem_lib_init+0x80>)
    b4f0:	4e0c      	ldr	r6, [pc, #48]	; (b524 <_nrf_modem_lib_init+0x84>)
    b4f2:	42b4      	cmp	r4, r6
    b4f4:	d304      	bcc.n	b500 <_nrf_modem_lib_init+0x60>
		 */
		return 0;
	}

	return init_ret;
}
    b4f6:	2000      	movs	r0, #0
    b4f8:	bd70      	pop	{r4, r5, r6, pc}
    b4fa:	4620      	mov	r0, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    b4fc:	6824      	ldr	r4, [r4, #0]
    b4fe:	e7ef      	b.n	b4e0 <_nrf_modem_lib_init+0x40>
		e->callback(init_ret, e->context);
    b500:	e9d4 3100 	ldrd	r3, r1, [r4]
    b504:	6828      	ldr	r0, [r5, #0]
    b506:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    b508:	3408      	adds	r4, #8
    b50a:	e7f2      	b.n	b4f2 <_nrf_modem_lib_init+0x52>
    b50c:	2000cfa3 	.word	0x2000cfa3
    b510:	2000ca54 	.word	0x2000ca54
    b514:	2000ca40 	.word	0x2000ca40
    b518:	000124d8 	.word	0x000124d8
    b51c:	2000ca3c 	.word	0x2000ca3c
    b520:	00012c04 	.word	0x00012c04
    b524:	00012c14 	.word	0x00012c14

0000b528 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    b528:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    b52a:	4b0f      	ldr	r3, [pc, #60]	; (b568 <thread_monitor_entry_get+0x40>)
{
    b52c:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
    b52e:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    b530:	4b0e      	ldr	r3, [pc, #56]	; (b56c <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    b532:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
    b534:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    b536:	4618      	mov	r0, r3
    b538:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    b53a:	42b8      	cmp	r0, r7
    b53c:	d301      	bcc.n	b542 <thread_monitor_entry_get+0x1a>
    b53e:	3d01      	subs	r5, #1
    b540:	d104      	bne.n	b54c <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
    b542:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
    b544:	3a01      	subs	r2, #1
	new_entry->id = id;
    b546:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    b548:	605a      	str	r2, [r3, #4]
}
    b54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
    b54c:	6804      	ldr	r4, [r0, #0]
    b54e:	428c      	cmp	r4, r1
    b550:	d0fb      	beq.n	b54a <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
    b552:	b13c      	cbz	r4, b564 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
    b554:	6844      	ldr	r4, [r0, #4]
    b556:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
    b558:	42a6      	cmp	r6, r4
    b55a:	bfbc      	itt	lt
    b55c:	4603      	movlt	r3, r0
    b55e:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    b560:	3008      	adds	r0, #8
    b562:	e7ea      	b.n	b53a <thread_monitor_entry_get+0x12>
    b564:	4603      	mov	r3, r0
    b566:	e7ec      	b.n	b542 <thread_monitor_entry_get+0x1a>
    b568:	2000cacc 	.word	0x2000cacc
    b56c:	2000cad8 	.word	0x2000cad8

0000b570 <on_init>:
	list->head = NULL;
    b570:	2000      	movs	r0, #0
    b572:	4b05      	ldr	r3, [pc, #20]	; (b588 <on_init+0x18>)
	list->tail = NULL;
    b574:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b578:	4b04      	ldr	r3, [pc, #16]	; (b58c <on_init+0x1c>)
    b57a:	e8d3 2fef 	ldaex	r2, [r3]
    b57e:	e8c3 0fe1 	stlex	r1, r0, [r3]
    b582:	2900      	cmp	r1, #0
    b584:	d1f9      	bne.n	b57a <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
    b586:	4770      	bx	lr
    b588:	2000cad0 	.word	0x2000cad0
    b58c:	2000cacc 	.word	0x2000cacc

0000b590 <nrf_modem_os_timedwait>:
{
    b590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b594:	b086      	sub	sp, #24
    b596:	4605      	mov	r5, r0
    b598:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
    b59a:	f006 f87c 	bl	11696 <nrf_modem_is_initialized>
    b59e:	b920      	cbnz	r0, b5aa <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
    b5a0:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
    b5a4:	b006      	add	sp, #24
    b5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
    b5aa:	f006 fb25 	bl	11bf8 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
    b5ae:	6833      	ldr	r3, [r6, #0]
    b5b0:	4604      	mov	r4, r0
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	460f      	mov	r7, r1
    b5b6:	d104      	bne.n	b5c2 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
    b5b8:	f003 ffc4 	bl	f544 <z_impl_k_yield>
		return -NRF_EAGAIN;
    b5bc:	f06f 000a 	mvn.w	r0, #10
    b5c0:	e7f0      	b.n	b5a4 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
    b5c2:	bfbc      	itt	lt
    b5c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    b5c8:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    b5ca:	2201      	movs	r2, #1
    b5cc:	2100      	movs	r1, #0
    b5ce:	a801      	add	r0, sp, #4
    b5d0:	f006 f9a4 	bl	1191c <z_impl_k_sem_init>
    b5d4:	46e8      	mov	r8, sp
	thread->context = context;
    b5d6:	9505      	str	r5, [sp, #20]
	__asm__ volatile(
    b5d8:	f04f 0320 	mov.w	r3, #32
    b5dc:	f3ef 8a11 	mrs	sl, BASEPRI
    b5e0:	f383 8812 	msr	BASEPRI_MAX, r3
    b5e4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    b5e8:	f004 f848 	bl	f67c <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    b5ec:	f7ff ff9c 	bl	b528 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    b5f0:	f8df 9118 	ldr.w	r9, [pc, #280]	; b70c <nrf_modem_os_timedwait+0x17c>
    b5f4:	6842      	ldr	r2, [r0, #4]
    b5f6:	f8d9 3000 	ldr.w	r3, [r9]
    b5fa:	429a      	cmp	r2, r3
    b5fc:	d16d      	bne.n	b6da <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
    b5fe:	2300      	movs	r3, #0
	return list->tail;
    b600:	4d43      	ldr	r5, [pc, #268]	; (b710 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
    b602:	9300      	str	r3, [sp, #0]
	return list->tail;
    b604:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    b606:	2b00      	cmp	r3, #0
    b608:	d16e      	bne.n	b6e8 <nrf_modem_os_timedwait+0x158>
	list->head = node;
    b60a:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
    b60e:	f38a 8811 	msr	BASEPRI, sl
    b612:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    b616:	6833      	ldr	r3, [r6, #0]
    b618:	1c5a      	adds	r2, r3, #1
    b61a:	d06a      	beq.n	b6f2 <nrf_modem_os_timedwait+0x162>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b61c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    b620:	f240 30e7 	movw	r0, #999	; 0x3e7
    b624:	2100      	movs	r1, #0
    b626:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    b62a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b62e:	2300      	movs	r3, #0
    b630:	fbcc 010e 	smlal	r0, r1, ip, lr
    b634:	f7fd fb68 	bl	8d08 <__aeabi_uldivmod>
    b638:	4602      	mov	r2, r0
    b63a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    b63c:	a801      	add	r0, sp, #4
    b63e:	f003 fbdf 	bl	ee00 <z_impl_k_sem_take>
	__asm__ volatile(
    b642:	f04f 0320 	mov.w	r3, #32
    b646:	f3ef 8a11 	mrs	sl, BASEPRI
    b64a:	f383 8812 	msr	BASEPRI_MAX, r3
    b64e:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b652:	2200      	movs	r2, #0
	return list->head;
    b654:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b656:	b15b      	cbz	r3, b670 <nrf_modem_os_timedwait+0xe0>
    b658:	4543      	cmp	r3, r8
    b65a:	d154      	bne.n	b706 <nrf_modem_os_timedwait+0x176>
	return node->next;
    b65c:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
    b65e:	2a00      	cmp	r2, #0
    b660:	d14b      	bne.n	b6fa <nrf_modem_os_timedwait+0x16a>
    b662:	686a      	ldr	r2, [r5, #4]
	list->head = node;
    b664:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    b666:	429a      	cmp	r2, r3
    b668:	d100      	bne.n	b66c <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
    b66a:	6069      	str	r1, [r5, #4]
	parent->next = child;
    b66c:	2300      	movs	r3, #0
    b66e:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
    b670:	f004 f804 	bl	f67c <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    b674:	f7ff ff58 	bl	b528 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    b678:	f8d9 3000 	ldr.w	r3, [r9]
    b67c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    b67e:	f38a 8811 	msr	BASEPRI, sl
    b682:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
    b686:	f006 f806 	bl	11696 <nrf_modem_is_initialized>
    b68a:	2800      	cmp	r0, #0
    b68c:	d088      	beq.n	b5a0 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
    b68e:	6835      	ldr	r5, [r6, #0]
    b690:	1c6b      	adds	r3, r5, #1
    b692:	d027      	beq.n	b6e4 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
    b694:	f006 fab0 	bl	11bf8 <z_impl_k_uptime_ticks>
    b698:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
    b69c:	fba0 320e 	umull	r3, r2, r0, lr
    b6a0:	fb0e 2101 	mla	r1, lr, r1, r2
    b6a4:	fba4 420e 	umull	r4, r2, r4, lr
    b6a8:	fb0e 2207 	mla	r2, lr, r7, r2
    b6ac:	0bdb      	lsrs	r3, r3, #15
    b6ae:	0be4      	lsrs	r4, r4, #15
    b6b0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    b6b4:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
    b6b8:	1b1b      	subs	r3, r3, r4
    b6ba:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
    b6be:	ea4f 7ce5 	mov.w	ip, r5, asr #31
    b6c2:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
    b6c6:	1aed      	subs	r5, r5, r3
    b6c8:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
    b6cc:	f1bc 0f00 	cmp.w	ip, #0
    b6d0:	bfb8      	it	lt
    b6d2:	2500      	movlt	r5, #0
    b6d4:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
    b6d6:	b92d      	cbnz	r5, b6e4 <nrf_modem_os_timedwait+0x154>
    b6d8:	e770      	b.n	b5bc <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
    b6da:	6043      	str	r3, [r0, #4]
    b6dc:	f38a 8811 	msr	BASEPRI, sl
    b6e0:	f3bf 8f6f 	isb	sy
		return 0;
    b6e4:	2000      	movs	r0, #0
    b6e6:	e75d      	b.n	b5a4 <nrf_modem_os_timedwait+0x14>
    b6e8:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    b6ec:	f8c5 8004 	str.w	r8, [r5, #4]
    b6f0:	e78d      	b.n	b60e <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    b6f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b6f6:	4613      	mov	r3, r2
    b6f8:	e7a0      	b.n	b63c <nrf_modem_os_timedwait+0xac>
	parent->next = child;
    b6fa:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    b6fc:	6869      	ldr	r1, [r5, #4]
    b6fe:	4299      	cmp	r1, r3
	list->tail = node;
    b700:	bf08      	it	eq
    b702:	606a      	streq	r2, [r5, #4]
}
    b704:	e7b2      	b.n	b66c <nrf_modem_os_timedwait+0xdc>
	return node->next;
    b706:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b708:	681b      	ldr	r3, [r3, #0]
    b70a:	e7a4      	b.n	b656 <nrf_modem_os_timedwait+0xc6>
    b70c:	2000cacc 	.word	0x2000cacc
    b710:	2000cad0 	.word	0x2000cad0

0000b714 <nrf_modem_os_sem_init>:
{
    b714:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
    b716:	6804      	ldr	r4, [r0, #0]
    b718:	4b09      	ldr	r3, [pc, #36]	; (b740 <nrf_modem_os_sem_init+0x2c>)
    b71a:	b12c      	cbz	r4, b728 <nrf_modem_os_sem_init+0x14>
    b71c:	429c      	cmp	r4, r3
    b71e:	d303      	bcc.n	b728 <nrf_modem_os_sem_init+0x14>
    b720:	f103 0570 	add.w	r5, r3, #112	; 0x70
    b724:	42ac      	cmp	r4, r5
    b726:	d306      	bcc.n	b736 <nrf_modem_os_sem_init+0x22>
	*sem = &nrf_modem_os_sems[used++];
    b728:	4d06      	ldr	r5, [pc, #24]	; (b744 <nrf_modem_os_sem_init+0x30>)
    b72a:	782c      	ldrb	r4, [r5, #0]
    b72c:	1c66      	adds	r6, r4, #1
    b72e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    b732:	702e      	strb	r6, [r5, #0]
    b734:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
    b736:	6800      	ldr	r0, [r0, #0]
}
    b738:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
    b73a:	f006 b8ef 	b.w	1191c <z_impl_k_sem_init>
    b73e:	bf00      	nop
    b740:	2000ca5c 	.word	0x2000ca5c
    b744:	2000cfa4 	.word	0x2000cfa4

0000b748 <nrf_modem_os_event_notify>:
{
    b748:	b538      	push	{r3, r4, r5, lr}
    b74a:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b74c:	4b0a      	ldr	r3, [pc, #40]	; (b778 <nrf_modem_os_event_notify+0x30>)
    b74e:	e8d3 1fef 	ldaex	r1, [r3]
    b752:	3101      	adds	r1, #1
    b754:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b758:	2a00      	cmp	r2, #0
    b75a:	d1f8      	bne.n	b74e <nrf_modem_os_event_notify+0x6>
	return list->head;
    b75c:	4b07      	ldr	r3, [pc, #28]	; (b77c <nrf_modem_os_event_notify+0x34>)
    b75e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    b760:	b904      	cbnz	r4, b764 <nrf_modem_os_event_notify+0x1c>
}
    b762:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
    b764:	6963      	ldr	r3, [r4, #20]
    b766:	42ab      	cmp	r3, r5
    b768:	d000      	beq.n	b76c <nrf_modem_os_event_notify+0x24>
    b76a:	b915      	cbnz	r5, b772 <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
    b76c:	1d20      	adds	r0, r4, #4
    b76e:	f003 fb27 	bl	edc0 <z_impl_k_sem_give>
	return node->next;
    b772:	6824      	ldr	r4, [r4, #0]
    b774:	e7f4      	b.n	b760 <nrf_modem_os_event_notify+0x18>
    b776:	bf00      	nop
    b778:	2000cacc 	.word	0x2000cacc
    b77c:	2000cad0 	.word	0x2000cad0

0000b780 <nrf_modem_os_alloc>:
{
    b780:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
    b782:	2200      	movs	r2, #0
    b784:	2300      	movs	r3, #0
    b786:	4801      	ldr	r0, [pc, #4]	; (b78c <nrf_modem_os_alloc+0xc>)
    b788:	f006 b807 	b.w	1179a <k_heap_alloc>
    b78c:	2000cb28 	.word	0x2000cb28

0000b790 <nrf_modem_os_free>:
{
    b790:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
    b792:	4801      	ldr	r0, [pc, #4]	; (b798 <nrf_modem_os_free+0x8>)
    b794:	f006 b80b 	b.w	117ae <k_heap_free>
    b798:	2000cb28 	.word	0x2000cb28

0000b79c <nrf_modem_os_shm_tx_alloc>:
{
    b79c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
    b79e:	2200      	movs	r2, #0
    b7a0:	2300      	movs	r3, #0
    b7a2:	4801      	ldr	r0, [pc, #4]	; (b7a8 <nrf_modem_os_shm_tx_alloc+0xc>)
    b7a4:	f005 bff9 	b.w	1179a <k_heap_alloc>
    b7a8:	2000cb3c 	.word	0x2000cb3c

0000b7ac <nrf_modem_os_shm_tx_free>:
{
    b7ac:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
    b7ae:	4801      	ldr	r0, [pc, #4]	; (b7b4 <nrf_modem_os_shm_tx_free+0x8>)
    b7b0:	f005 bffd 	b.w	117ae <k_heap_free>
    b7b4:	2000cb3c 	.word	0x2000cb3c

0000b7b8 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
    b7b8:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
    b7ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b7be:	4906      	ldr	r1, [pc, #24]	; (b7d8 <nrf_modem_os_init+0x20>)
    b7c0:	4806      	ldr	r0, [pc, #24]	; (b7dc <nrf_modem_os_init+0x24>)
    b7c2:	f005 ff95 	bl	116f0 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
    b7c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
    b7ca:	f44f 5202 	mov.w	r2, #8320	; 0x2080
    b7ce:	4904      	ldr	r1, [pc, #16]	; (b7e0 <nrf_modem_os_init+0x28>)
    b7d0:	4804      	ldr	r0, [pc, #16]	; (b7e4 <nrf_modem_os_init+0x2c>)
    b7d2:	f005 bf8d 	b.w	116f0 <k_heap_init>
    b7d6:	bf00      	nop
    b7d8:	2000cfa5 	.word	0x2000cfa5
    b7dc:	2000cb28 	.word	0x2000cb28
    b7e0:	200084e8 	.word	0x200084e8
    b7e4:	2000cb3c 	.word	0x2000cb3c

0000b7e8 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
    b7e8:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
    b7ea:	4802      	ldr	r0, [pc, #8]	; (b7f4 <at_monitor_sys_init+0xc>)
    b7ec:	f002 fd2a 	bl	e244 <nrf_modem_at_notif_handler_set>
	if (err) {
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
	}

	return 0;
}
    b7f0:	2000      	movs	r0, #0
    b7f2:	bd08      	pop	{r3, pc}
    b7f4:	0000b861 	.word	0x0000b861

0000b7f8 <at_monitor_task>:
{
    b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
    b7fc:	4e14      	ldr	r6, [pc, #80]	; (b850 <at_monitor_task+0x58>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    b7fe:	4f15      	ldr	r7, [pc, #84]	; (b854 <at_monitor_task+0x5c>)
		k_heap_free(&at_monitor_heap, at_notif);
    b800:	f8df 8054 	ldr.w	r8, [pc, #84]	; b858 <at_monitor_task+0x60>
    b804:	2200      	movs	r2, #0
    b806:	2300      	movs	r3, #0
    b808:	4630      	mov	r0, r6
    b80a:	f003 faa5 	bl	ed58 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
    b80e:	4605      	mov	r5, r0
    b810:	b9c8      	cbnz	r0, b846 <at_monitor_task+0x4e>
}
    b812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
    b816:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
    b818:	07da      	lsls	r2, r3, #31
    b81a:	d406      	bmi.n	b82a <at_monitor_task+0x32>
    b81c:	079b      	lsls	r3, r3, #30
    b81e:	d404      	bmi.n	b82a <at_monitor_task+0x32>
    b820:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
    b822:	b951      	cbnz	r1, b83a <at_monitor_task+0x42>
				e->handler(at_notif->data);
    b824:	4648      	mov	r0, r9
    b826:	6863      	ldr	r3, [r4, #4]
    b828:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    b82a:	340c      	adds	r4, #12
    b82c:	42bc      	cmp	r4, r7
    b82e:	d3f2      	bcc.n	b816 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
    b830:	4629      	mov	r1, r5
    b832:	4640      	mov	r0, r8
    b834:	f005 ffbb 	bl	117ae <k_heap_free>
    b838:	e7e4      	b.n	b804 <at_monitor_task+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
    b83a:	4648      	mov	r0, r9
    b83c:	f006 faa5 	bl	11d8a <strstr>
    b840:	2800      	cmp	r0, #0
    b842:	d1ef      	bne.n	b824 <at_monitor_task+0x2c>
    b844:	e7f1      	b.n	b82a <at_monitor_task+0x32>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    b846:	4c05      	ldr	r4, [pc, #20]	; (b85c <at_monitor_task+0x64>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
    b848:	f105 0904 	add.w	r9, r5, #4
    b84c:	e7ee      	b.n	b82c <at_monitor_task+0x34>
    b84e:	bf00      	nop
    b850:	2000c774 	.word	0x2000c774
    b854:	2000c708 	.word	0x2000c708
    b858:	2000c724 	.word	0x2000c724
    b85c:	2000c6b4 	.word	0x2000c6b4

0000b860 <at_monitor_dispatch>:
{
    b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b862:	4605      	mov	r5, r0
	monitored = false;
    b864:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    b866:	4c19      	ldr	r4, [pc, #100]	; (b8cc <at_monitor_dispatch+0x6c>)
    b868:	4f19      	ldr	r7, [pc, #100]	; (b8d0 <at_monitor_dispatch+0x70>)
    b86a:	42bc      	cmp	r4, r7
    b86c:	d318      	bcc.n	b8a0 <at_monitor_dispatch+0x40>
	if (!monitored) {
    b86e:	b366      	cbz	r6, b8ca <at_monitor_dispatch+0x6a>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
    b870:	4628      	mov	r0, r5
    b872:	f7fd fbbb 	bl	8fec <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
    b876:	2200      	movs	r2, #0
    b878:	1d41      	adds	r1, r0, #5
    b87a:	2300      	movs	r3, #0
    b87c:	4815      	ldr	r0, [pc, #84]	; (b8d4 <at_monitor_dispatch+0x74>)
    b87e:	f005 ff8c 	bl	1179a <k_heap_alloc>
	if (!at_notif) {
    b882:	4604      	mov	r4, r0
    b884:	b308      	cbz	r0, b8ca <at_monitor_dispatch+0x6a>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    b886:	4629      	mov	r1, r5
    b888:	3004      	adds	r0, #4
    b88a:	f006 fa45 	bl	11d18 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
    b88e:	4621      	mov	r1, r4
    b890:	4811      	ldr	r0, [pc, #68]	; (b8d8 <at_monitor_dispatch+0x78>)
    b892:	f006 f838 	bl	11906 <k_queue_append>
}
    b896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
    b89a:	4810      	ldr	r0, [pc, #64]	; (b8dc <at_monitor_dispatch+0x7c>)
    b89c:	f003 bbce 	b.w	f03c <k_work_submit>
	return mon->flags.paused;
    b8a0:	7a23      	ldrb	r3, [r4, #8]
		if (!is_paused(e) && has_match(e, notif)) {
    b8a2:	07da      	lsls	r2, r3, #31
    b8a4:	d405      	bmi.n	b8b2 <at_monitor_dispatch+0x52>
    b8a6:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
    b8a8:	b929      	cbnz	r1, b8b6 <at_monitor_dispatch+0x56>
	return mon->flags.direct;
    b8aa:	7a23      	ldrb	r3, [r4, #8]
			if (is_direct(e)) {
    b8ac:	079b      	lsls	r3, r3, #30
    b8ae:	d408      	bmi.n	b8c2 <at_monitor_dispatch+0x62>
				monitored = true;
    b8b0:	2601      	movs	r6, #1
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
    b8b2:	340c      	adds	r4, #12
    b8b4:	e7d9      	b.n	b86a <at_monitor_dispatch+0xa>
	return (mon->filter == ANY || strstr(notif, mon->filter));
    b8b6:	4628      	mov	r0, r5
    b8b8:	f006 fa67 	bl	11d8a <strstr>
    b8bc:	2800      	cmp	r0, #0
    b8be:	d1f4      	bne.n	b8aa <at_monitor_dispatch+0x4a>
    b8c0:	e7f7      	b.n	b8b2 <at_monitor_dispatch+0x52>
				e->handler(notif);
    b8c2:	4628      	mov	r0, r5
    b8c4:	6863      	ldr	r3, [r4, #4]
    b8c6:	4798      	blx	r3
    b8c8:	e7f3      	b.n	b8b2 <at_monitor_dispatch+0x52>
}
    b8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8cc:	2000c6b4 	.word	0x2000c6b4
    b8d0:	2000c708 	.word	0x2000c708
    b8d4:	2000c724 	.word	0x2000c724
    b8d8:	2000c774 	.word	0x2000c774
    b8dc:	2000c5a8 	.word	0x2000c5a8

0000b8e0 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
    b8e0:	4b09      	ldr	r3, [pc, #36]	; (b908 <is_valid_notification_char+0x28>)
    b8e2:	5c1b      	ldrb	r3, [r3, r0]
    b8e4:	f003 0303 	and.w	r3, r3, #3
    b8e8:	2b02      	cmp	r3, #2
    b8ea:	bf08      	it	eq
    b8ec:	3820      	subeq	r0, #32
    b8ee:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
    b8f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    b8f4:	2b19      	cmp	r3, #25
    b8f6:	d904      	bls.n	b902 <is_valid_notification_char+0x22>
    b8f8:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
    b8fc:	4258      	negs	r0, r3
    b8fe:	4158      	adcs	r0, r3
    b900:	4770      	bx	lr
		return true;
    b902:	2001      	movs	r0, #1
	}

	return false;
}
    b904:	4770      	bx	lr
    b906:	bf00      	nop
    b908:	00012ad1 	.word	0x00012ad1

0000b90c <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
    b90c:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
    b910:	b2db      	uxtb	r3, r3
    b912:	2b11      	cmp	r3, #17
    b914:	bf9d      	ittte	ls
    b916:	4803      	ldrls	r0, [pc, #12]	; (b924 <is_separator+0x18>)
    b918:	40d8      	lsrls	r0, r3
    b91a:	f000 0001 	andls.w	r0, r0, #1
{
    b91e:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
    b920:	4770      	bx	lr
    b922:	bf00      	nop
    b924:	00024001 	.word	0x00024001

0000b928 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
    b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b92a:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
    b92c:	2400      	movs	r4, #0
    b92e:	4e09      	ldr	r6, [pc, #36]	; (b954 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
    b930:	f856 7b04 	ldr.w	r7, [r6], #4
    b934:	4638      	mov	r0, r7
    b936:	f7fd fb59 	bl	8fec <strlen>
    b93a:	4639      	mov	r1, r7
    b93c:	4602      	mov	r2, r0
    b93e:	4628      	mov	r0, r5
    b940:	f006 f9f2 	bl	11d28 <strncmp>
		if (!diff) {
    b944:	b120      	cbz	r0, b950 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
    b946:	3401      	adds	r4, #1
    b948:	2c04      	cmp	r4, #4
    b94a:	d1f1      	bne.n	b930 <is_result+0x8>
			return true;
		}
	}

	return false;
    b94c:	2000      	movs	r0, #0
}
    b94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
    b950:	2001      	movs	r0, #1
    b952:	e7fc      	b.n	b94e <is_result+0x26>
    b954:	00012500 	.word	0x00012500

0000b958 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
    b958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
    b95c:	6804      	ldr	r4, [r0, #0]
{
    b95e:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    b960:	7823      	ldrb	r3, [r4, #0]
    b962:	4680      	mov	r8, r0
    b964:	460e      	mov	r6, r1
    b966:	4615      	mov	r5, r2
	const char *tmpstr = *str;
    b968:	9400      	str	r4, [sp, #0]
    b96a:	2b00      	cmp	r3, #0
    b96c:	f000 80cd 	beq.w	bb0a <at_parse_process_element+0x1b2>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
    b970:	4b67      	ldr	r3, [pc, #412]	; (bb10 <at_parse_process_element+0x1b8>)
    b972:	781b      	ldrb	r3, [r3, #0]
    b974:	2b06      	cmp	r3, #6
    b976:	d113      	bne.n	b9a0 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
    b978:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
    b97a:	1c62      	adds	r2, r4, #1
    b97c:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
    b97e:	4611      	mov	r1, r2
    b980:	4607      	mov	r7, r0
    b982:	f812 0b01 	ldrb.w	r0, [r2], #1
    b986:	f7ff ffab 	bl	b8e0 <is_valid_notification_char>
    b98a:	2800      	cmp	r0, #0
    b98c:	d1f7      	bne.n	b97e <at_parse_process_element+0x26>
    b98e:	b107      	cbz	r7, b992 <at_parse_process_element+0x3a>
    b990:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
    b992:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
    b994:	4622      	mov	r2, r4
    b996:	4631      	mov	r1, r6
    b998:	4628      	mov	r0, r5
    b99a:	f005 fa97 	bl	10ecc <at_params_string_put>
    b99e:	e046      	b.n	ba2e <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
    b9a0:	3b01      	subs	r3, #1
    b9a2:	2b08      	cmp	r3, #8
    b9a4:	d843      	bhi.n	ba2e <at_parse_process_element+0xd6>
    b9a6:	e8df f003 	tbb	[pc, r3]
    b9aa:	4964      	.short	0x4964
    b9ac:	420da05a 	.word	0x420da05a
    b9b0:	3f1c      	.short	0x3f1c
    b9b2:	05          	.byte	0x05
    b9b3:	00          	.byte	0x00
    b9b4:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
    b9b6:	2100      	movs	r1, #0
    b9b8:	4613      	mov	r3, r2
    b9ba:	f812 0b01 	ldrb.w	r0, [r2], #1
    b9be:	b160      	cbz	r0, b9da <at_parse_process_element+0x82>
    b9c0:	2101      	movs	r1, #1
    b9c2:	e7f9      	b.n	b9b8 <at_parse_process_element+0x60>
    b9c4:	4622      	mov	r2, r4
    b9c6:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
    b9c8:	4f52      	ldr	r7, [pc, #328]	; (bb14 <at_parse_process_element+0x1bc>)
    b9ca:	4613      	mov	r3, r2
    b9cc:	f812 0b01 	ldrb.w	r0, [r2], #1
    b9d0:	5c38      	ldrb	r0, [r7, r0]
    b9d2:	f010 0f44 	tst.w	r0, #68	; 0x44
    b9d6:	f040 8096 	bne.w	bb06 <at_parse_process_element+0x1ae>
    b9da:	b101      	cbz	r1, b9de <at_parse_process_element+0x86>
    b9dc:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
    b9de:	1b1b      	subs	r3, r3, r4
    b9e0:	e7d8      	b.n	b994 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
    b9e2:	4668      	mov	r0, sp
    b9e4:	f005 f9e9 	bl	10dba <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
    b9e8:	2200      	movs	r2, #0
    b9ea:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
    b9ec:	4849      	ldr	r0, [pc, #292]	; (bb14 <at_parse_process_element+0x1bc>)
    b9ee:	461f      	mov	r7, r3
    b9f0:	f813 1b01 	ldrb.w	r1, [r3], #1
    b9f4:	5c41      	ldrb	r1, [r0, r1]
    b9f6:	0749      	lsls	r1, r1, #29
    b9f8:	d110      	bne.n	ba1c <at_parse_process_element+0xc4>
    b9fa:	b102      	cbz	r2, b9fe <at_parse_process_element+0xa6>
    b9fc:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
    b9fe:	1b3b      	subs	r3, r7, r4
    ba00:	4622      	mov	r2, r4
    ba02:	4631      	mov	r1, r6
    ba04:	4628      	mov	r0, r5
    ba06:	f005 fa61 	bl	10ecc <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
    ba0a:	783b      	ldrb	r3, [r7, #0]
    ba0c:	2b3d      	cmp	r3, #61	; 0x3d
    ba0e:	d107      	bne.n	ba20 <at_parse_process_element+0xc8>
    ba10:	787b      	ldrb	r3, [r7, #1]
    ba12:	2b3f      	cmp	r3, #63	; 0x3f
    ba14:	d10b      	bne.n	ba2e <at_parse_process_element+0xd6>
			tmpstr += 2;
    ba16:	3702      	adds	r7, #2
		tmpstr++;
    ba18:	9700      	str	r7, [sp, #0]
    ba1a:	e008      	b.n	ba2e <at_parse_process_element+0xd6>
    ba1c:	2201      	movs	r2, #1
    ba1e:	e7e6      	b.n	b9ee <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
    ba20:	2b3f      	cmp	r3, #63	; 0x3f
    ba22:	d104      	bne.n	ba2e <at_parse_process_element+0xd6>
			tmpstr++;
    ba24:	3701      	adds	r7, #1
    ba26:	e7f7      	b.n	ba18 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
    ba28:	4628      	mov	r0, r5
    ba2a:	f005 fa25 	bl	10e78 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
    ba2e:	2000      	movs	r0, #0
	*str = tmpstr;
    ba30:	9b00      	ldr	r3, [sp, #0]
    ba32:	f8c8 3000 	str.w	r3, [r8]
}
    ba36:	b023      	add	sp, #140	; 0x8c
    ba38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
    ba3c:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
    ba3e:	783a      	ldrb	r2, [r7, #0]
    ba40:	4610      	mov	r0, r2
    ba42:	f005 f9b1 	bl	10da8 <is_lfcr>
    ba46:	463b      	mov	r3, r7
			tmpstr++;
    ba48:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
    ba4a:	b908      	cbnz	r0, ba50 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ba4c:	2a00      	cmp	r2, #0
    ba4e:	d1f6      	bne.n	ba3e <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
    ba50:	4622      	mov	r2, r4
    ba52:	4631      	mov	r1, r6
    ba54:	4628      	mov	r0, r5
    ba56:	1b1b      	subs	r3, r3, r4
    ba58:	f005 fa38 	bl	10ecc <at_params_string_put>
    ba5c:	e7dc      	b.n	ba18 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
    ba5e:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
    ba60:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
    ba62:	463b      	mov	r3, r7
    ba64:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
    ba66:	f107 0701 	add.w	r7, r7, #1
    ba6a:	d0f1      	beq.n	ba50 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ba6c:	2a00      	cmp	r2, #0
    ba6e:	d1f7      	bne.n	ba60 <at_parse_process_element+0x108>
    ba70:	e7ee      	b.n	ba50 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    ba72:	4620      	mov	r0, r4
    ba74:	220a      	movs	r2, #10
    ba76:	a901      	add	r1, sp, #4
    ba78:	f004 fa66 	bl	ff48 <strtoul>
    ba7c:	2401      	movs	r4, #1
		tmpstr = next;
    ba7e:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    ba80:	9002      	str	r0, [sp, #8]
		tmpstr = next;
    ba82:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
    ba84:	9b00      	ldr	r3, [sp, #0]
    ba86:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
    ba88:	2829      	cmp	r0, #41	; 0x29
    ba8a:	d023      	beq.n	bad4 <at_parse_process_element+0x17c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    ba8c:	b310      	cbz	r0, bad4 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
    ba8e:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
    ba92:	f7ff ff3b 	bl	b90c <is_separator>
				tmparray[i++] =
    ba96:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
    ba9a:	b908      	cbnz	r0, baa0 <at_parse_process_element+0x148>
					tmpstr = next;
    ba9c:	4627      	mov	r7, r4
    ba9e:	e017      	b.n	bad0 <at_parse_process_element+0x178>
					(uint32_t)strtoul(++tmpstr, &next, 10);
    baa0:	220a      	movs	r2, #10
    baa2:	a901      	add	r1, sp, #4
    baa4:	4648      	mov	r0, r9
    baa6:	f004 fa4f 	bl	ff48 <strtoul>
				tmparray[i++] =
    baaa:	ab22      	add	r3, sp, #136	; 0x88
    baac:	1c67      	adds	r7, r4, #1
    baae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    bab2:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
    bab6:	4648      	mov	r0, r9
    bab8:	f7fd fa98 	bl	8fec <strlen>
    babc:	4604      	mov	r4, r0
    babe:	9801      	ldr	r0, [sp, #4]
    bac0:	f7fd fa94 	bl	8fec <strlen>
    bac4:	4284      	cmp	r4, r0
    bac6:	d006      	beq.n	bad6 <at_parse_process_element+0x17e>
					tmpstr = next;
    bac8:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
    baca:	2f20      	cmp	r7, #32
					tmpstr = next;
    bacc:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
    bace:	d002      	beq.n	bad6 <at_parse_process_element+0x17e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
    bad0:	463c      	mov	r4, r7
    bad2:	e7d7      	b.n	ba84 <at_parse_process_element+0x12c>
    bad4:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
    bad6:	00bb      	lsls	r3, r7, #2
    bad8:	4631      	mov	r1, r6
    bada:	4628      	mov	r0, r5
    badc:	aa02      	add	r2, sp, #8
    bade:	f005 fa18 	bl	10f12 <at_params_array_put>
		tmpstr++;
    bae2:	9b00      	ldr	r3, [sp, #0]
    bae4:	3301      	adds	r3, #1
    bae6:	9300      	str	r3, [sp, #0]
    bae8:	e7a1      	b.n	ba2e <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
    baea:	220a      	movs	r2, #10
    baec:	4620      	mov	r0, r4
    baee:	a902      	add	r1, sp, #8
    baf0:	f004 f9ae 	bl	fe50 <strtoll>
    baf4:	460b      	mov	r3, r1
		tmpstr = next;
    baf6:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
    baf8:	4602      	mov	r2, r0
		tmpstr = next;
    bafa:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
    bafc:	4628      	mov	r0, r5
    bafe:	4631      	mov	r1, r6
    bb00:	f005 f9cf 	bl	10ea2 <at_params_int_put>
    bb04:	e793      	b.n	ba2e <at_parse_process_element+0xd6>
    bb06:	2101      	movs	r1, #1
    bb08:	e75f      	b.n	b9ca <at_parse_process_element+0x72>
		return -1;
    bb0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bb0e:	e792      	b.n	ba36 <at_parse_process_element+0xde>
    bb10:	2000d3a6 	.word	0x2000d3a6
    bb14:	00012ad1 	.word	0x00012ad1

0000bb18 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
    bb18:	b510      	push	{r4, lr}
    bb1a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
    bb1c:	f7fd fa66 	bl	8fec <strlen>
    bb20:	2801      	cmp	r0, #1
    bb22:	d921      	bls.n	bb68 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
    bb24:	7823      	ldrb	r3, [r4, #0]
    bb26:	4912      	ldr	r1, [pc, #72]	; (bb70 <is_command+0x58>)
    bb28:	5cca      	ldrb	r2, [r1, r3]
    bb2a:	f002 0203 	and.w	r2, r2, #3
    bb2e:	2a02      	cmp	r2, #2
    bb30:	bf08      	it	eq
    bb32:	3b20      	subeq	r3, #32
    bb34:	2b41      	cmp	r3, #65	; 0x41
    bb36:	d117      	bne.n	bb68 <is_command+0x50>
    bb38:	7863      	ldrb	r3, [r4, #1]
    bb3a:	5cca      	ldrb	r2, [r1, r3]
    bb3c:	f002 0203 	and.w	r2, r2, #3
    bb40:	2a02      	cmp	r2, #2
    bb42:	bf08      	it	eq
    bb44:	3b20      	subeq	r3, #32
    bb46:	2b54      	cmp	r3, #84	; 0x54
    bb48:	d10e      	bne.n	bb68 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
    bb4a:	78a2      	ldrb	r2, [r4, #2]
    bb4c:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
    bb50:	2b23      	cmp	r3, #35	; 0x23
    bb52:	d00b      	beq.n	bb6c <is_command+0x54>
    bb54:	2a25      	cmp	r2, #37	; 0x25
    bb56:	d009      	beq.n	bb6c <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
    bb58:	4610      	mov	r0, r2
    bb5a:	f005 f925 	bl	10da8 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
    bb5e:	b910      	cbnz	r0, bb66 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    bb60:	fab2 f082 	clz	r0, r2
    bb64:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    bb66:	bd10      	pop	{r4, pc}
		return false;
    bb68:	2000      	movs	r0, #0
    bb6a:	e7fc      	b.n	bb66 <is_command+0x4e>
		return true;
    bb6c:	2001      	movs	r0, #1
    bb6e:	e7fa      	b.n	bb66 <is_command+0x4e>
    bb70:	00012ad1 	.word	0x00012ad1

0000bb74 <at_parse_detect_type>:
{
    bb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb78:	4606      	mov	r6, r0
	const char *tmpstr = *str;
    bb7a:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
    bb7c:	f8df 818c 	ldr.w	r8, [pc, #396]	; bd0c <at_parse_detect_type+0x198>
    bb80:	2900      	cmp	r1, #0
    bb82:	d13d      	bne.n	bc00 <at_parse_detect_type+0x8c>
    bb84:	7820      	ldrb	r0, [r4, #0]
    bb86:	f005 f903 	bl	10d90 <is_notification>
    bb8a:	4f61      	ldr	r7, [pc, #388]	; (bd10 <at_parse_detect_type+0x19c>)
    bb8c:	4605      	mov	r5, r0
    bb8e:	b360      	cbz	r0, bbea <at_parse_detect_type+0x76>
	state = new_state;
    bb90:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    bb92:	2205      	movs	r2, #5
    bb94:	4620      	mov	r0, r4
    bb96:	495f      	ldr	r1, [pc, #380]	; (bd14 <at_parse_detect_type+0x1a0>)
	state = new_state;
    bb98:	703b      	strb	r3, [r7, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    bb9a:	f006 f8c5 	bl	11d28 <strncmp>
    bb9e:	b1f8      	cbz	r0, bbe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
    bba0:	2205      	movs	r2, #5
    bba2:	4620      	mov	r0, r4
    bba4:	495c      	ldr	r1, [pc, #368]	; (bd18 <at_parse_detect_type+0x1a4>)
    bba6:	f006 f8bf 	bl	11d28 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
    bbaa:	b1c8      	cbz	r0, bbe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
    bbac:	220b      	movs	r2, #11
    bbae:	4620      	mov	r0, r4
    bbb0:	495a      	ldr	r1, [pc, #360]	; (bd1c <at_parse_detect_type+0x1a8>)
    bbb2:	f006 f8b9 	bl	11d28 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
    bbb6:	b198      	cbz	r0, bbe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
    bbb8:	220a      	movs	r2, #10
    bbba:	4620      	mov	r0, r4
    bbbc:	4958      	ldr	r1, [pc, #352]	; (bd20 <at_parse_detect_type+0x1ac>)
    bbbe:	f006 f8b3 	bl	11d28 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
    bbc2:	b168      	cbz	r0, bbe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
    bbc4:	220b      	movs	r2, #11
    bbc6:	4620      	mov	r0, r4
    bbc8:	4956      	ldr	r1, [pc, #344]	; (bd24 <at_parse_detect_type+0x1b0>)
    bbca:	f006 f8ad 	bl	11d28 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
    bbce:	b138      	cbz	r0, bbe0 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
    bbd0:	2207      	movs	r2, #7
    bbd2:	4620      	mov	r0, r4
    bbd4:	4954      	ldr	r1, [pc, #336]	; (bd28 <at_parse_detect_type+0x1b4>)
    bbd6:	f006 f8a7 	bl	11d28 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
    bbda:	fab0 f580 	clz	r5, r0
    bbde:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
    bbe0:	f888 5000 	strb.w	r5, [r8]
	return 0;
    bbe4:	2000      	movs	r0, #0
	*str = tmpstr;
    bbe6:	6034      	str	r4, [r6, #0]
	return 0;
    bbe8:	e04c      	b.n	bc84 <at_parse_detect_type+0x110>
	} else if (set_type_string) {
    bbea:	f898 3000 	ldrb.w	r3, [r8]
    bbee:	b953      	cbnz	r3, bc06 <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
    bbf0:	4620      	mov	r0, r4
    bbf2:	f7ff ff91 	bl	bb18 <is_command>
    bbf6:	2800      	cmp	r0, #0
    bbf8:	d04e      	beq.n	bc98 <at_parse_detect_type+0x124>
	state = new_state;
    bbfa:	2307      	movs	r3, #7
    bbfc:	703b      	strb	r3, [r7, #0]
}
    bbfe:	e7f1      	b.n	bbe4 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
    bc00:	f898 3000 	ldrb.w	r3, [r8]
    bc04:	b11b      	cbz	r3, bc0e <at_parse_detect_type+0x9a>
	state = new_state;
    bc06:	2202      	movs	r2, #2
    bc08:	4b41      	ldr	r3, [pc, #260]	; (bd10 <at_parse_detect_type+0x19c>)
    bc0a:	701a      	strb	r2, [r3, #0]
}
    bc0c:	e7ea      	b.n	bbe4 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
    bc0e:	2900      	cmp	r1, #0
    bc10:	dd44      	ble.n	bc9c <at_parse_detect_type+0x128>
    bc12:	4622      	mov	r2, r4
    bc14:	4615      	mov	r5, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
    bc16:	f812 0b01 	ldrb.w	r0, [r2], #1
    bc1a:	f005 f8c5 	bl	10da8 <is_lfcr>
    bc1e:	2800      	cmp	r0, #0
    bc20:	d1f8      	bne.n	bc14 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
    bc22:	4628      	mov	r0, r5
    bc24:	f7fd f9e2 	bl	8fec <strlen>
    bc28:	2803      	cmp	r0, #3
    bc2a:	d92d      	bls.n	bc88 <at_parse_detect_type+0x114>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
    bc2c:	782b      	ldrb	r3, [r5, #0]
    bc2e:	4a3f      	ldr	r2, [pc, #252]	; (bd2c <at_parse_detect_type+0x1b8>)
    bc30:	5cd1      	ldrb	r1, [r2, r3]
    bc32:	f001 0103 	and.w	r1, r1, #3
    bc36:	2902      	cmp	r1, #2
    bc38:	bf08      	it	eq
    bc3a:	3b20      	subeq	r3, #32
    bc3c:	2b41      	cmp	r3, #65	; 0x41
    bc3e:	d123      	bne.n	bc88 <at_parse_detect_type+0x114>
    bc40:	786b      	ldrb	r3, [r5, #1]
    bc42:	5cd1      	ldrb	r1, [r2, r3]
    bc44:	f001 0103 	and.w	r1, r1, #3
    bc48:	2902      	cmp	r1, #2
    bc4a:	bf08      	it	eq
    bc4c:	3b20      	subeq	r3, #32
    bc4e:	2b54      	cmp	r3, #84	; 0x54
    bc50:	d11a      	bne.n	bc88 <at_parse_detect_type+0x114>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
    bc52:	78ab      	ldrb	r3, [r5, #2]
    bc54:	5cd1      	ldrb	r1, [r2, r3]
    bc56:	f001 0103 	and.w	r1, r1, #3
    bc5a:	2902      	cmp	r1, #2
    bc5c:	bf08      	it	eq
    bc5e:	3b20      	subeq	r3, #32
    bc60:	2b2b      	cmp	r3, #43	; 0x2b
    bc62:	d00a      	beq.n	bc7a <at_parse_detect_type+0x106>
    bc64:	2b25      	cmp	r3, #37	; 0x25
    bc66:	d10f      	bne.n	bc88 <at_parse_detect_type+0x114>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
    bc68:	78eb      	ldrb	r3, [r5, #3]
    bc6a:	5cd2      	ldrb	r2, [r2, r3]
    bc6c:	f002 0203 	and.w	r2, r2, #3
    bc70:	2a02      	cmp	r2, #2
    bc72:	bf08      	it	eq
    bc74:	3b20      	subeq	r3, #32
    bc76:	2b58      	cmp	r3, #88	; 0x58
    bc78:	d006      	beq.n	bc88 <at_parse_detect_type+0x114>
	state = new_state;
    bc7a:	2209      	movs	r2, #9
		return -2;
    bc7c:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
    bc80:	4b23      	ldr	r3, [pc, #140]	; (bd10 <at_parse_detect_type+0x19c>)
    bc82:	701a      	strb	r2, [r3, #0]
}
    bc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((index > 0) && is_notification(*tmpstr)) {
    bc88:	7820      	ldrb	r0, [r4, #0]
    bc8a:	f005 f881 	bl	10d90 <is_notification>
    bc8e:	b128      	cbz	r0, bc9c <at_parse_detect_type+0x128>
		return -1;
    bc90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		*str = tmpstr;
    bc94:	6034      	str	r4, [r6, #0]
    bc96:	e7f5      	b.n	bc84 <at_parse_detect_type+0x110>
	state = new_state;
    bc98:	2302      	movs	r3, #2
    bc9a:	e7af      	b.n	bbfc <at_parse_detect_type+0x88>
	} else if (is_number(*tmpstr)) {
    bc9c:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
    bc9e:	4b23      	ldr	r3, [pc, #140]	; (bd2c <at_parse_detect_type+0x1b8>)
    bca0:	5c9b      	ldrb	r3, [r3, r2]
    bca2:	075b      	lsls	r3, r3, #29
    bca4:	d40a      	bmi.n	bcbc <at_parse_detect_type+0x148>
    bca6:	2a2d      	cmp	r2, #45	; 0x2d
    bca8:	d008      	beq.n	bcbc <at_parse_detect_type+0x148>
    bcaa:	2a2b      	cmp	r2, #43	; 0x2b
    bcac:	d006      	beq.n	bcbc <at_parse_detect_type+0x148>
	if (chr == '"') {
    bcae:	2a22      	cmp	r2, #34	; 0x22
    bcb0:	d107      	bne.n	bcc2 <at_parse_detect_type+0x14e>
	state = new_state;
    bcb2:	2203      	movs	r2, #3
    bcb4:	4b16      	ldr	r3, [pc, #88]	; (bd10 <at_parse_detect_type+0x19c>)
		tmpstr++;
    bcb6:	3401      	adds	r4, #1
	state = new_state;
    bcb8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
    bcba:	e793      	b.n	bbe4 <at_parse_detect_type+0x70>
	state = new_state;
    bcbc:	2204      	movs	r2, #4
    bcbe:	4b14      	ldr	r3, [pc, #80]	; (bd10 <at_parse_detect_type+0x19c>)
    bcc0:	e7a3      	b.n	bc0a <at_parse_detect_type+0x96>
	if (chr == '(') {
    bcc2:	2a28      	cmp	r2, #40	; 0x28
    bcc4:	d104      	bne.n	bcd0 <at_parse_detect_type+0x15c>
    bcc6:	2201      	movs	r2, #1
    bcc8:	4b11      	ldr	r3, [pc, #68]	; (bd10 <at_parse_detect_type+0x19c>)
		tmpstr++;
    bcca:	4414      	add	r4, r2
	state = new_state;
    bccc:	701a      	strb	r2, [r3, #0]
		tmpstr++;
    bcce:	e789      	b.n	bbe4 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
    bcd0:	4610      	mov	r0, r2
    bcd2:	f005 f869 	bl	10da8 <is_lfcr>
    bcd6:	b188      	cbz	r0, bcfc <at_parse_detect_type+0x188>
    bcd8:	490d      	ldr	r1, [pc, #52]	; (bd10 <at_parse_detect_type+0x19c>)
    bcda:	780b      	ldrb	r3, [r1, #0]
    bcdc:	2b04      	cmp	r3, #4
    bcde:	d10a      	bne.n	bcf6 <at_parse_detect_type+0x182>
    bce0:	4622      	mov	r2, r4
    bce2:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
    bce4:	f812 0b01 	ldrb.w	r0, [r2], #1
    bce8:	f005 f85e 	bl	10da8 <is_lfcr>
    bcec:	2800      	cmp	r0, #0
    bcee:	d1f8      	bne.n	bce2 <at_parse_detect_type+0x16e>
	state = new_state;
    bcf0:	2305      	movs	r3, #5
    bcf2:	700b      	strb	r3, [r1, #0]
}
    bcf4:	e776      	b.n	bbe4 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
    bcf6:	2b08      	cmp	r3, #8
    bcf8:	f43f af74 	beq.w	bbe4 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
    bcfc:	4610      	mov	r0, r2
    bcfe:	f7ff fe05 	bl	b90c <is_separator>
    bd02:	2800      	cmp	r0, #0
    bd04:	d0c4      	beq.n	bc90 <at_parse_detect_type+0x11c>
	state = new_state;
    bd06:	2208      	movs	r2, #8
    bd08:	4b01      	ldr	r3, [pc, #4]	; (bd10 <at_parse_detect_type+0x19c>)
    bd0a:	e77e      	b.n	bc0a <at_parse_detect_type+0x96>
    bd0c:	2000d3a5 	.word	0x2000d3a5
    bd10:	2000d3a6 	.word	0x2000d3a6
    bd14:	00012891 	.word	0x00012891
    bd18:	00012897 	.word	0x00012897
    bd1c:	0001289d 	.word	0x0001289d
    bd20:	000128a9 	.word	0x000128a9
    bd24:	000128b4 	.word	0x000128b4
    bd28:	000128c0 	.word	0x000128c0
    bd2c:	00012ad1 	.word	0x00012ad1

0000bd30 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
    bd30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd34:	4689      	mov	r9, r1
    bd36:	4616      	mov	r6, r2
    bd38:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
    bd3a:	4680      	mov	r8, r0
    bd3c:	2800      	cmp	r0, #0
    bd3e:	f000 809a 	beq.w	be76 <at_parser_max_params_from_str+0x146>
    bd42:	2a00      	cmp	r2, #0
    bd44:	f000 8097 	beq.w	be76 <at_parser_max_params_from_str+0x146>
    bd48:	6853      	ldr	r3, [r2, #4]
    bd4a:	2b00      	cmp	r3, #0
    bd4c:	f000 8093 	beq.w	be76 <at_parser_max_params_from_str+0x146>
	state = IDLE;
    bd50:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
    bd52:	4610      	mov	r0, r2
    bd54:	f005 f86b 	bl	10e2e <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
    bd58:	4642      	mov	r2, r8
    bd5a:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
    bd5c:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
    bd60:	429f      	cmp	r7, r3
    bd62:	bf28      	it	cs
    bd64:	461f      	movcs	r7, r3
	state = IDLE;
    bd66:	4b45      	ldr	r3, [pc, #276]	; (be7c <at_parser_max_params_from_str+0x14c>)
    bd68:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
    bd6a:	4b45      	ldr	r3, [pc, #276]	; (be80 <at_parser_max_params_from_str+0x150>)
    bd6c:	701c      	strb	r4, [r3, #0]
    bd6e:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
    bd70:	7808      	ldrb	r0, [r1, #0]
    bd72:	f005 f819 	bl	10da8 <is_lfcr>
    bd76:	4625      	mov	r5, r4
    bd78:	3201      	adds	r2, #1
    bd7a:	4604      	mov	r4, r0
    bd7c:	2800      	cmp	r0, #0
    bd7e:	d1f6      	bne.n	bd6e <at_parser_max_params_from_str+0x3e>
    bd80:	b105      	cbz	r5, bd84 <at_parser_max_params_from_str+0x54>
    bd82:	9101      	str	r1, [sp, #4]
	int index = 0;
    bd84:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
    bd86:	f8df b0fc 	ldr.w	fp, [pc, #252]	; be84 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
    bd8a:	9b01      	ldr	r3, [sp, #4]
    bd8c:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
    bd8e:	2a00      	cmp	r2, #0
    bd90:	d048      	beq.n	be24 <at_parser_max_params_from_str+0xf4>
    bd92:	42af      	cmp	r7, r5
    bd94:	d946      	bls.n	be24 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
    bd96:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
    bd9a:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
    bd9c:	0712      	lsls	r2, r2, #28
			str++;
    bd9e:	bf48      	it	mi
    bda0:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
    bda2:	a801      	add	r0, sp, #4
			str++;
    bda4:	bf48      	it	mi
    bda6:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
    bda8:	f7ff fee4 	bl	bb74 <at_parse_detect_type>
		if (ret == -1) {
    bdac:	1c43      	adds	r3, r0, #1
    bdae:	d039      	beq.n	be24 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
    bdb0:	3002      	adds	r0, #2
			index = 0;
    bdb2:	bf08      	it	eq
    bdb4:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
    bdb6:	4632      	mov	r2, r6
    bdb8:	4629      	mov	r1, r5
    bdba:	a801      	add	r0, sp, #4
			str = *at_params_str;
    bdbc:	bf08      	it	eq
    bdbe:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
    bdc2:	f7ff fdc9 	bl	b958 <at_parse_process_element>
    bdc6:	3001      	adds	r0, #1
    bdc8:	d02c      	beq.n	be24 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
    bdca:	9a01      	ldr	r2, [sp, #4]
    bdcc:	7810      	ldrb	r0, [r2, #0]
    bdce:	f7ff fd9d 	bl	b90c <is_separator>
    bdd2:	b1b0      	cbz	r0, be02 <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
    bdd4:	7850      	ldrb	r0, [r2, #1]
    bdd6:	f004 ffe7 	bl	10da8 <is_lfcr>
    bdda:	b178      	cbz	r0, bdfc <at_parser_max_params_from_str+0xcc>
				index++;
    bddc:	3501      	adds	r5, #1
				if (index == max_params) {
    bdde:	42bd      	cmp	r5, r7
    bde0:	d03c      	beq.n	be5c <at_parser_max_params_from_str+0x12c>
				if (at_parse_detect_type(&str, index) == -1) {
    bde2:	4629      	mov	r1, r5
    bde4:	a801      	add	r0, sp, #4
    bde6:	f7ff fec5 	bl	bb74 <at_parse_detect_type>
    bdea:	3001      	adds	r0, #1
    bdec:	d01a      	beq.n	be24 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
    bdee:	4632      	mov	r2, r6
    bdf0:	4629      	mov	r1, r5
    bdf2:	a801      	add	r0, sp, #4
    bdf4:	f7ff fdb0 	bl	b958 <at_parse_process_element>
    bdf8:	3001      	adds	r0, #1
    bdfa:	d013      	beq.n	be24 <at_parser_max_params_from_str+0xf4>
			str++;
    bdfc:	9b01      	ldr	r3, [sp, #4]
    bdfe:	3301      	adds	r3, #1
    be00:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
    be02:	9a01      	ldr	r2, [sp, #4]
    be04:	7810      	ldrb	r0, [r2, #0]
    be06:	f004 ffcf 	bl	10da8 <is_lfcr>
    be0a:	b310      	cbz	r0, be52 <at_parser_max_params_from_str+0x122>
    be0c:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
    be0e:	7811      	ldrb	r1, [r2, #0]
    be10:	4692      	mov	sl, r2
    be12:	4608      	mov	r0, r1
    be14:	3201      	adds	r2, #1
    be16:	f004 ffc7 	bl	10da8 <is_lfcr>
    be1a:	2800      	cmp	r0, #0
    be1c:	d1f7      	bne.n	be0e <at_parser_max_params_from_str+0xde>
    be1e:	b971      	cbnz	r1, be3e <at_parser_max_params_from_str+0x10e>
				str += i;
    be20:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
    be24:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
    be26:	bb1c      	cbnz	r4, be70 <at_parser_max_params_from_str+0x140>
    be28:	782b      	ldrb	r3, [r5, #0]
    be2a:	b9cb      	cbnz	r3, be60 <at_parser_max_params_from_str+0x130>
	return 0;
    be2c:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
    be2e:	f1b9 0f00 	cmp.w	r9, #0
    be32:	d001      	beq.n	be38 <at_parser_max_params_from_str+0x108>
		*next_param_str = (char *)at_params_str;
    be34:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
    be38:	b003      	add	sp, #12
    be3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (is_terminated(str[i]) || is_notification(str[i]) ||
    be3e:	4608      	mov	r0, r1
    be40:	f004 ffa6 	bl	10d90 <is_notification>
    be44:	2800      	cmp	r0, #0
    be46:	d1eb      	bne.n	be20 <at_parser_max_params_from_str+0xf0>
			    is_result(str + i)) {
    be48:	4650      	mov	r0, sl
    be4a:	f7ff fd6d 	bl	b928 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
    be4e:	2800      	cmp	r0, #0
    be50:	d1e6      	bne.n	be20 <at_parser_max_params_from_str+0xf0>
		index++;
    be52:	3501      	adds	r5, #1
			oversized = true;
    be54:	42bd      	cmp	r5, r7
    be56:	bf08      	it	eq
    be58:	2401      	moveq	r4, #1
    be5a:	e796      	b.n	bd8a <at_parser_max_params_from_str+0x5a>
					oversized = true;
    be5c:	4604      	mov	r4, r0
    be5e:	e7e1      	b.n	be24 <at_parser_max_params_from_str+0xf4>
	if (!is_terminated(*str) && !is_result(str)) {
    be60:	4628      	mov	r0, r5
    be62:	f7ff fd61 	bl	b928 <is_result>
    be66:	2800      	cmp	r0, #0
    be68:	d1e0      	bne.n	be2c <at_parser_max_params_from_str+0xfc>
		return -EAGAIN;
    be6a:	f06f 000a 	mvn.w	r0, #10
    be6e:	e7de      	b.n	be2e <at_parser_max_params_from_str+0xfe>
		return -E2BIG;
    be70:	f06f 0006 	mvn.w	r0, #6
    be74:	e7db      	b.n	be2e <at_parser_max_params_from_str+0xfe>
		return -EINVAL;
    be76:	f06f 0015 	mvn.w	r0, #21
    be7a:	e7dd      	b.n	be38 <at_parser_max_params_from_str+0x108>
    be7c:	2000d3a6 	.word	0x2000d3a6
    be80:	2000d3a5 	.word	0x2000d3a5
    be84:	00012ad1 	.word	0x00012ad1

0000be88 <at_handler_ncellmeas>:
	k_free(cells);
	k_free(evt.cells_info.neighbor_cells);
}

static void at_handler_ncellmeas(const char *response)
{
    be88:	b570      	push	{r4, r5, r6, lr}
    be8a:	b0a4      	sub	sp, #144	; 0x90
	int err;
	struct lte_lc_evt evt = {0};
    be8c:	2100      	movs	r1, #0
    be8e:	2248      	movs	r2, #72	; 0x48
{
    be90:	4605      	mov	r5, r0
	struct lte_lc_evt evt = {0};
    be92:	4668      	mov	r0, sp
    be94:	f005 ff2b 	bl	11cee <memset>

	__ASSERT_NO_MSG(response != NULL);

	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
    be98:	f000 f9d4 	bl	c244 <event_handler_list_is_empty>
    be9c:	4e27      	ldr	r6, [pc, #156]	; (bf3c <at_handler_ncellmeas+0xb4>)
    be9e:	4601      	mov	r1, r0
    bea0:	b988      	cbnz	r0, bec6 <at_handler_ncellmeas+0x3e>
    bea2:	7833      	ldrb	r3, [r6, #0]
    bea4:	b17b      	cbz	r3, bec6 <at_handler_ncellmeas+0x3e>
		 * lte_lc_neighbor_cell_measurement().
		 */
		goto exit;
	}

	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
    bea6:	4c26      	ldr	r4, [pc, #152]	; (bf40 <at_handler_ncellmeas+0xb8>)
    bea8:	7823      	ldrb	r3, [r4, #0]
    beaa:	2b03      	cmp	r3, #3
    beac:	d927      	bls.n	befe <at_handler_ncellmeas+0x76>
	struct lte_lc_evt evt = {0};
    beae:	2248      	movs	r2, #72	; 0x48
    beb0:	eb0d 0002 	add.w	r0, sp, r2
    beb4:	f005 ff1b 	bl	11cee <memset>
	int max_cell_count = ncellmeas_params.gci_count;
    beb8:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
    beba:	b140      	cbz	r0, bece <at_handler_ncellmeas+0x46>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
    bebc:	2130      	movs	r1, #48	; 0x30
    bebe:	f005 fee1 	bl	11c84 <k_calloc>
		if (cells == NULL) {
    bec2:	4604      	mov	r4, r0
    bec4:	b920      	cbnz	r0, bed0 <at_handler_ncellmeas+0x48>

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
exit:
	ncellmeas_ongoing = false;
    bec6:	2300      	movs	r3, #0
    bec8:	7033      	strb	r3, [r6, #0]
}
    beca:	b024      	add	sp, #144	; 0x90
    becc:	bd70      	pop	{r4, r5, r6, pc}
	struct lte_lc_cell *cells = NULL;
    bece:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
    bed0:	aa14      	add	r2, sp, #80	; 0x50
    bed2:	4629      	mov	r1, r5
    bed4:	481a      	ldr	r0, [pc, #104]	; (bf40 <at_handler_ncellmeas+0xb8>)
	evt.cells_info.gci_cells = cells;
    bed6:	9423      	str	r4, [sp, #140]	; 0x8c
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
    bed8:	f000 fc5c 	bl	c794 <parse_ncellmeas_gci>
	switch (err) {
    bedc:	1dc2      	adds	r2, r0, #7
    bede:	d001      	beq.n	bee4 <at_handler_ncellmeas+0x5c>
    bee0:	2801      	cmp	r0, #1
    bee2:	d805      	bhi.n	bef0 <at_handler_ncellmeas+0x68>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
    bee4:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
    bee6:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
    bee8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
    beec:	f000 f9b2 	bl	c254 <event_handler_list_dispatch>
	k_free(cells);
    bef0:	4620      	mov	r0, r4
    bef2:	f005 febc 	bl	11c6e <k_free>
	k_free(evt.cells_info.neighbor_cells);
    bef6:	9821      	ldr	r0, [sp, #132]	; 0x84
		k_free(neighbor_cells);
    bef8:	f005 feb9 	bl	11c6e <k_free>
    befc:	e7e3      	b.n	bec6 <at_handler_ncellmeas+0x3e>
	int ncell_count = neighborcell_count_get(response);
    befe:	4628      	mov	r0, r5
    bf00:	f005 f9c7 	bl	11292 <neighborcell_count_get>
    bf04:	4604      	mov	r4, r0
	if (ncell_count != 0) {
    bf06:	b128      	cbz	r0, bf14 <at_handler_ncellmeas+0x8c>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
    bf08:	2110      	movs	r1, #16
    bf0a:	f005 febb 	bl	11c84 <k_calloc>
		if (neighbor_cells == NULL) {
    bf0e:	4604      	mov	r4, r0
    bf10:	2800      	cmp	r0, #0
    bf12:	d0d8      	beq.n	bec6 <at_handler_ncellmeas+0x3e>
	err = parse_ncellmeas(response, &evt.cells_info);
    bf14:	4628      	mov	r0, r5
    bf16:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
    bf18:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
    bf1a:	f000 fb13 	bl	c544 <parse_ncellmeas>
	switch (err) {
    bf1e:	1dc3      	adds	r3, r0, #7
    bf20:	d001      	beq.n	bf26 <at_handler_ncellmeas+0x9e>
    bf22:	2801      	cmp	r0, #1
    bf24:	d805      	bhi.n	bf32 <at_handler_ncellmeas+0xaa>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
    bf26:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
    bf28:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
    bf2a:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
    bf2e:	f000 f991 	bl	c254 <event_handler_list_dispatch>
	if (neighbor_cells) {
    bf32:	2c00      	cmp	r4, #0
    bf34:	d0c7      	beq.n	bec6 <at_handler_ncellmeas+0x3e>
		k_free(neighbor_cells);
    bf36:	4620      	mov	r0, r4
    bf38:	e7de      	b.n	bef8 <at_handler_ncellmeas+0x70>
    bf3a:	bf00      	nop
    bf3c:	2000d449 	.word	0x2000d449
    bf40:	2000d44a 	.word	0x2000d44a

0000bf44 <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
    bf44:	b510      	push	{r4, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
    bf46:	480e      	ldr	r0, [pc, #56]	; (bf80 <enable_notifications+0x3c>)
{
    bf48:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
    bf4a:	f002 f981 	bl	e250 <nrf_modem_at_printf>
	if (err) {
    bf4e:	4604      	mov	r4, r0
    bf50:	b990      	cbnz	r0, bf78 <enable_notifications+0x34>
			LOG_WRN("Modem sleep notifications require nRF9160 modem >= v1.3.0");
		}
	}

	/* +CSCON notifications */
	err = nrf_modem_at_printf(cscon);
    bf52:	480c      	ldr	r0, [pc, #48]	; (bf84 <enable_notifications+0x40>)
    bf54:	f002 f97c 	bl	e250 <nrf_modem_at_printf>
	if (err) {
    bf58:	b158      	cbz	r0, bf72 <enable_notifications+0x2e>
		 * not returned, while informative log messages are printed.
		 */
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");

		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
    bf5a:	2132      	movs	r1, #50	; 0x32
    bf5c:	4a0a      	ldr	r2, [pc, #40]	; (bf88 <enable_notifications+0x44>)
    bf5e:	a801      	add	r0, sp, #4
    bf60:	f002 f9c2 	bl	e2e8 <nrf_modem_at_cmd>
		if (err == 0) {
    bf64:	b928      	cbnz	r0, bf72 <enable_notifications+0x2e>
			char *end = strstr(buf, "\r\nOK");
    bf66:	4909      	ldr	r1, [pc, #36]	; (bf8c <enable_notifications+0x48>)
    bf68:	a801      	add	r0, sp, #4
    bf6a:	f005 ff0e 	bl	11d8a <strstr>

			if (end) {
    bf6e:	b100      	cbz	r0, bf72 <enable_notifications+0x2e>
				*end = '\0';
    bf70:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
    bf72:	4620      	mov	r0, r4
    bf74:	b00e      	add	sp, #56	; 0x38
    bf76:	bd10      	pop	{r4, pc}
		return -EFAULT;
    bf78:	f06f 040d 	mvn.w	r4, #13
    bf7c:	e7f9      	b.n	bf72 <enable_notifications+0x2e>
    bf7e:	bf00      	nop
    bf80:	000128eb 	.word	0x000128eb
    bf84:	0001298f 	.word	0x0001298f
    bf88:	000128f6 	.word	0x000128f6
    bf8c:	000128fe 	.word	0x000128fe

0000bf90 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
    bf90:	2300      	movs	r3, #0
{
    bf92:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf94:	b08d      	sub	sp, #52	; 0x34
    bf96:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
    bf98:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
    bf9a:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
    bf9e:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
    bfa2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
    bfa6:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
    bfaa:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
    bfae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
    bfb2:	2800      	cmp	r0, #0
    bfb4:	d04a      	beq.n	c04c <lte_lc_psm_get+0xbc>
    bfb6:	2900      	cmp	r1, #0
    bfb8:	d048      	beq.n	c04c <lte_lc_psm_get+0xbc>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
    bfba:	4c27      	ldr	r4, [pc, #156]	; (c058 <lte_lc_psm_get+0xc8>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
    bfbc:	21a0      	movs	r1, #160	; 0xa0
    bfbe:	4620      	mov	r0, r4
    bfc0:	4a26      	ldr	r2, [pc, #152]	; (c05c <lte_lc_psm_get+0xcc>)
	response[0] = '\0';
    bfc2:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
    bfc4:	f002 f990 	bl	e2e8 <nrf_modem_at_cmd>
	if (err) {
    bfc8:	2800      	cmp	r0, #0
    bfca:	d142      	bne.n	c052 <lte_lc_psm_get+0xc2>
		LOG_ERR("AT command failed, error: %d", err);
		return -EFAULT;
	}

	comma_ptr = strchr(response, ch);
    bfcc:	4620      	mov	r0, r4
    bfce:	212c      	movs	r1, #44	; 0x2c
    bfd0:	f005 fe95 	bl	11cfe <strchr>
	if (!comma_ptr) {
    bfd4:	4604      	mov	r4, r0
    bfd6:	2800      	cmp	r0, #0
    bfd8:	d136      	bne.n	c048 <lte_lc_psm_get+0xb8>
		/* Not an AT error, thus must be that just a <reg_status> received:
		 * optional part is included in a response only when <reg_status> is 1 or 5.
		 */
		LOG_DBG("Not registered: cannot get current PSM configuration");
		return -EBADMSG;
    bfda:	f06f 004c 	mvn.w	r0, #76	; 0x4c
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
    bfde:	b00d      	add	sp, #52	; 0x34
    bfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (comma_ptr) {
    bfe2:	2c00      	cmp	r4, #0
    bfe4:	d0f9      	beq.n	bfda <lte_lc_psm_get+0x4a>
			comma_ptr = strchr(comma_ptr + 1, ch);
    bfe6:	1c60      	adds	r0, r4, #1
    bfe8:	212c      	movs	r1, #44	; 0x2c
    bfea:	f005 fe88 	bl	11cfe <strchr>
	for (int i = 0; i < 12; i++) {
    bfee:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
    bff0:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
    bff2:	d1f6      	bne.n	bfe2 <lte_lc_psm_get+0x52>
	if (comma_ptr) {
    bff4:	2800      	cmp	r0, #0
    bff6:	d0f0      	beq.n	bfda <lte_lc_psm_get+0x4a>
		strncpy(active_time_str, comma_ptr + 2, 8);
    bff8:	1c81      	adds	r1, r0, #2
    bffa:	2208      	movs	r2, #8
    bffc:	a803      	add	r0, sp, #12
    bffe:	f005 fea5 	bl	11d4c <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
    c002:	1c60      	adds	r0, r4, #1
    c004:	212c      	movs	r1, #44	; 0x2c
    c006:	f005 fe7a 	bl	11cfe <strchr>
	if (comma_ptr) {
    c00a:	4604      	mov	r4, r0
    c00c:	2800      	cmp	r0, #0
    c00e:	d0e4      	beq.n	bfda <lte_lc_psm_get+0x4a>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
    c010:	1c81      	adds	r1, r0, #2
    c012:	2208      	movs	r2, #8
    c014:	a806      	add	r0, sp, #24
    c016:	f005 fe99 	bl	11d4c <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
    c01a:	212c      	movs	r1, #44	; 0x2c
    c01c:	1c60      	adds	r0, r4, #1
    c01e:	f005 fe6e 	bl	11cfe <strchr>
	if (comma_ptr) {
    c022:	b120      	cbz	r0, c02e <lte_lc_psm_get+0x9e>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
    c024:	1c81      	adds	r1, r0, #2
    c026:	2208      	movs	r2, #8
    c028:	a809      	add	r0, sp, #36	; 0x24
    c02a:	f005 fe8f 	bl	11d4c <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
    c02e:	ab01      	add	r3, sp, #4
    c030:	aa09      	add	r2, sp, #36	; 0x24
    c032:	a906      	add	r1, sp, #24
    c034:	a803      	add	r0, sp, #12
    c036:	f000 f931 	bl	c29c <parse_psm>
	if (err) {
    c03a:	2800      	cmp	r0, #0
    c03c:	d1cf      	bne.n	bfde <lte_lc_psm_get+0x4e>
	*tau = psm_cfg.tau;
    c03e:	9b01      	ldr	r3, [sp, #4]
    c040:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
    c042:	9b02      	ldr	r3, [sp, #8]
    c044:	602b      	str	r3, [r5, #0]
	return 0;
    c046:	e7ca      	b.n	bfde <lte_lc_psm_get+0x4e>
    c048:	270c      	movs	r7, #12
    c04a:	e7cc      	b.n	bfe6 <lte_lc_psm_get+0x56>
		return -EINVAL;
    c04c:	f06f 0015 	mvn.w	r0, #21
    c050:	e7c5      	b.n	bfde <lte_lc_psm_get+0x4e>
		return -EFAULT;
    c052:	f06f 000d 	mvn.w	r0, #13
    c056:	e7c2      	b.n	bfde <lte_lc_psm_get+0x4e>
    c058:	2000d3a7 	.word	0x2000d3a7
    c05c:	00012903 	.word	0x00012903

0000c060 <at_handler_cereg>:
	struct lte_lc_evt evt = {0};
    c060:	2248      	movs	r2, #72	; 0x48
{
    c062:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
    c064:	2400      	movs	r4, #0
{
    c066:	4605      	mov	r5, r0
    c068:	b0a5      	sub	sp, #148	; 0x94
	struct lte_lc_evt evt = {0};
    c06a:	2100      	movs	r1, #0
    c06c:	eb0d 0002 	add.w	r0, sp, r2
    c070:	f005 fe3d 	bl	11cee <memset>
	struct lte_lc_cell cell = {0};
    c074:	2230      	movs	r2, #48	; 0x30
    c076:	4621      	mov	r1, r4
    c078:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
    c07a:	f88d 400e 	strb.w	r4, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
    c07e:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
    c080:	f005 fe35 	bl	11cee <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
    c084:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
    c088:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
    c08a:	2101      	movs	r1, #1
    c08c:	9300      	str	r3, [sp, #0]
    c08e:	4628      	mov	r0, r5
    c090:	ab06      	add	r3, sp, #24
    c092:	f10d 020e 	add.w	r2, sp, #14
	struct lte_lc_psm_cfg psm_cfg = {0};
    c096:	9404      	str	r4, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
    c098:	f000 f97e 	bl	c398 <parse_cereg>
	if (err) {
    c09c:	2800      	cmp	r0, #0
    c09e:	d171      	bne.n	c184 <at_handler_cereg+0x124>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    c0a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c0a4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    c0a8:	2b01      	cmp	r3, #1
    c0aa:	d105      	bne.n	c0b8 <at_handler_cereg+0x58>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
    c0ac:	9b08      	ldr	r3, [sp, #32]
    c0ae:	3301      	adds	r3, #1
    c0b0:	d06a      	beq.n	c188 <at_handler_cereg+0x128>
	z_impl_k_sem_give(sem);
    c0b2:	4837      	ldr	r0, [pc, #220]	; (c190 <at_handler_cereg+0x130>)
    c0b4:	f002 fe84 	bl	edc0 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
    c0b8:	f000 f8c4 	bl	c244 <event_handler_list_is_empty>
    c0bc:	2800      	cmp	r0, #0
    c0be:	d161      	bne.n	c184 <at_handler_cereg+0x124>
	if (reg_status != prev_reg_status) {
    c0c0:	4a34      	ldr	r2, [pc, #208]	; (c194 <at_handler_cereg+0x134>)
    c0c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c0c6:	7811      	ldrb	r1, [r2, #0]
    c0c8:	4299      	cmp	r1, r3
    c0ca:	d007      	beq.n	c0dc <at_handler_cereg+0x7c>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
    c0cc:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
    c0d0:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
    c0d2:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
    c0d4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
    c0d8:	f000 f8bc 	bl	c254 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
    c0dc:	4b2e      	ldr	r3, [pc, #184]	; (c198 <at_handler_cereg+0x138>)
    c0de:	9908      	ldr	r1, [sp, #32]
    c0e0:	689a      	ldr	r2, [r3, #8]
    c0e2:	4291      	cmp	r1, r2
    c0e4:	d103      	bne.n	c0ee <at_handler_cereg+0x8e>
    c0e6:	68db      	ldr	r3, [r3, #12]
    c0e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c0ea:	429a      	cmp	r2, r3
    c0ec:	d019      	beq.n	c122 <at_handler_cereg+0xc2>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
    c0ee:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    c0f0:	4d29      	ldr	r5, [pc, #164]	; (c198 <at_handler_cereg+0x138>)
    c0f2:	ac06      	add	r4, sp, #24
		evt.type = LTE_LC_EVT_CELL_UPDATE;
    c0f4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    c0f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c0fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c0fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c0fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c100:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c104:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
    c108:	ae14      	add	r6, sp, #80	; 0x50
    c10a:	ad06      	add	r5, sp, #24
    c10c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c10e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    c110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c112:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    c114:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c118:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
    c11c:	a812      	add	r0, sp, #72	; 0x48
    c11e:	f000 f899 	bl	c254 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
    c122:	4a1e      	ldr	r2, [pc, #120]	; (c19c <at_handler_cereg+0x13c>)
    c124:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c128:	7811      	ldrb	r1, [r2, #0]
    c12a:	4299      	cmp	r1, r3
    c12c:	d008      	beq.n	c140 <at_handler_cereg+0xe0>
		prev_lte_mode = lte_mode;
    c12e:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
    c130:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
    c132:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
    c134:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
    c138:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
    c13c:	f000 f88a 	bl	c254 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
    c140:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c144:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    c148:	2b01      	cmp	r3, #1
    c14a:	d11b      	bne.n	c184 <at_handler_cereg+0x124>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
    c14c:	4638      	mov	r0, r7
    c14e:	a905      	add	r1, sp, #20
    c150:	f7ff ff1e 	bl	bf90 <lte_lc_psm_get>
	if (err) {
    c154:	b9b0      	cbnz	r0, c184 <at_handler_cereg+0x124>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
    c156:	4b12      	ldr	r3, [pc, #72]	; (c1a0 <at_handler_cereg+0x140>)
    c158:	9904      	ldr	r1, [sp, #16]
    c15a:	681a      	ldr	r2, [r3, #0]
    c15c:	4291      	cmp	r1, r2
    c15e:	461a      	mov	r2, r3
    c160:	d103      	bne.n	c16a <at_handler_cereg+0x10a>
    c162:	685b      	ldr	r3, [r3, #4]
    c164:	9905      	ldr	r1, [sp, #20]
    c166:	4299      	cmp	r1, r3
    c168:	d00c      	beq.n	c184 <at_handler_cereg+0x124>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
    c16a:	e897 0003 	ldmia.w	r7, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
    c16e:	2301      	movs	r3, #1
    c170:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
    c174:	ab14      	add	r3, sp, #80	; 0x50
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
    c176:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
    c17a:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
    c17e:	a812      	add	r0, sp, #72	; 0x48
    c180:	f000 f868 	bl	c254 <event_handler_list_dispatch>
}
    c184:	b025      	add	sp, #148	; 0x94
    c186:	bdf0      	pop	{r4, r5, r6, r7, pc}
			reg_status = LTE_LC_NW_REG_UNKNOWN;
    c188:	2304      	movs	r3, #4
    c18a:	f88d 300e 	strb.w	r3, [sp, #14]
    c18e:	e793      	b.n	c0b8 <at_handler_cereg+0x58>
    c190:	2000cb58 	.word	0x2000cb58
    c194:	2000d448 	.word	0x2000d448
    c198:	2000c7a8 	.word	0x2000c7a8
    c19c:	2000d447 	.word	0x2000d447
    c1a0:	2000cb50 	.word	0x2000cb50

0000c1a4 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
    c1a4:	2804      	cmp	r0, #4
{
    c1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1a8:	4605      	mov	r5, r0
	switch (mode) {
    c1aa:	d806      	bhi.n	c1ba <lte_lc_func_mode_set+0x16>
    c1ac:	2804      	cmp	r0, #4
    c1ae:	d810      	bhi.n	c1d2 <lte_lc_func_mode_set+0x2e>
    c1b0:	e8df f000 	tbb	[pc, r0]
    c1b4:	0f191219 	.word	0x0f191219
    c1b8:	19          	.byte	0x19
    c1b9:	00          	.byte	0x00
    c1ba:	f1a0 0314 	sub.w	r3, r0, #20
    c1be:	b2db      	uxtb	r3, r3
    c1c0:	2b18      	cmp	r3, #24
    c1c2:	d806      	bhi.n	c1d2 <lte_lc_func_mode_set+0x2e>
    c1c4:	2201      	movs	r2, #1
    c1c6:	4910      	ldr	r1, [pc, #64]	; (c208 <lte_lc_func_mode_set+0x64>)
    c1c8:	409a      	lsls	r2, r3
    c1ca:	420a      	tst	r2, r1
    c1cc:	d10b      	bne.n	c1e6 <lte_lc_func_mode_set+0x42>
    c1ce:	2b01      	cmp	r3, #1
    c1d0:	d002      	beq.n	c1d8 <lte_lc_func_mode_set+0x34>
    c1d2:	f06f 0415 	mvn.w	r4, #21
    c1d6:	e004      	b.n	c1e2 <lte_lc_func_mode_set+0x3e>
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
    c1d8:	f7ff feb4 	bl	bf44 <enable_notifications>
		if (err) {
    c1dc:	b118      	cbz	r0, c1e6 <lte_lc_func_mode_set+0x42>
			LOG_ERR("Failed to enable notifications, error: %d", err);
			return -EFAULT;
    c1de:	f06f 040d 	mvn.w	r4, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
    c1e2:	4620      	mov	r0, r4
    c1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
    c1e6:	4629      	mov	r1, r5
    c1e8:	4808      	ldr	r0, [pc, #32]	; (c20c <lte_lc_func_mode_set+0x68>)
    c1ea:	f002 f831 	bl	e250 <nrf_modem_at_printf>
	if (err) {
    c1ee:	4604      	mov	r4, r0
    c1f0:	2800      	cmp	r0, #0
    c1f2:	d1f4      	bne.n	c1de <lte_lc_func_mode_set+0x3a>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
    c1f4:	4e06      	ldr	r6, [pc, #24]	; (c210 <lte_lc_func_mode_set+0x6c>)
    c1f6:	4f07      	ldr	r7, [pc, #28]	; (c214 <lte_lc_func_mode_set+0x70>)
    c1f8:	42be      	cmp	r6, r7
    c1fa:	d2f2      	bcs.n	c1e2 <lte_lc_func_mode_set+0x3e>
		e->callback(mode, e->context);
    c1fc:	e9d6 3100 	ldrd	r3, r1, [r6]
    c200:	4628      	mov	r0, r5
    c202:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
    c204:	3608      	adds	r6, #8
    c206:	e7f7      	b.n	c1f8 <lte_lc_func_mode_set+0x54>
    c208:	01300c01 	.word	0x01300c01
    c20c:	00012910 	.word	0x00012910
    c210:	00012c04 	.word	0x00012c04
    c214:	00012c04 	.word	0x00012c04

0000c218 <lte_lc_deinit>:
{
    c218:	b508      	push	{r3, lr}
	if (is_initialized) {
    c21a:	4b06      	ldr	r3, [pc, #24]	; (c234 <lte_lc_deinit+0x1c>)
    c21c:	781a      	ldrb	r2, [r3, #0]
    c21e:	b122      	cbz	r2, c22a <lte_lc_deinit+0x12>
		is_initialized = false;
    c220:	2000      	movs	r0, #0
    c222:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
    c224:	f7ff ffbe 	bl	c1a4 <lte_lc_func_mode_set>
    c228:	b908      	cbnz	r0, c22e <lte_lc_deinit+0x16>
    c22a:	2000      	movs	r0, #0
}
    c22c:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
    c22e:	f06f 000d 	mvn.w	r0, #13
    c232:	e7fb      	b.n	c22c <lte_lc_deinit+0x14>
    c234:	2000d44c 	.word	0x2000d44c

0000c238 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    c238:	4801      	ldr	r0, [pc, #4]	; (c240 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    c23a:	f002 bd51 	b.w	ece0 <z_impl_k_mutex_unlock>
    c23e:	bf00      	nop
    c240:	2000c74c 	.word	0x2000c74c

0000c244 <event_handler_list_is_empty>:
	return list->head;
    c244:	4b02      	ldr	r3, [pc, #8]	; (c250 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
    c246:	6818      	ldr	r0, [r3, #0]
}
    c248:	fab0 f080 	clz	r0, r0
    c24c:	0940      	lsrs	r0, r0, #5
    c24e:	4770      	bx	lr
    c250:	2000cb68 	.word	0x2000cb68

0000c254 <event_handler_list_dispatch>:
{
    c254:	b538      	push	{r3, r4, r5, lr}
	return list->head;
    c256:	4c0f      	ldr	r4, [pc, #60]	; (c294 <event_handler_list_dispatch+0x40>)
    c258:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
    c25a:	6823      	ldr	r3, [r4, #0]
    c25c:	b1c3      	cbz	r3, c290 <event_handler_list_dispatch+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    c25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c266:	480c      	ldr	r0, [pc, #48]	; (c298 <event_handler_list_dispatch+0x44>)
    c268:	f002 fcc0 	bl	ebec <z_impl_k_mutex_lock>
    c26c:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    c26e:	b10b      	cbz	r3, c274 <event_handler_list_dispatch+0x20>
	return node->next;
    c270:	681c      	ldr	r4, [r3, #0]
    c272:	b91b      	cbnz	r3, c27c <event_handler_list_dispatch+0x28>
}
    c274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
    c278:	f7ff bfde 	b.w	c238 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
    c27c:	4628      	mov	r0, r5
    c27e:	685b      	ldr	r3, [r3, #4]
    c280:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
    c282:	b11c      	cbz	r4, c28c <event_handler_list_dispatch+0x38>
    c284:	6822      	ldr	r2, [r4, #0]
    c286:	4623      	mov	r3, r4
    c288:	4614      	mov	r4, r2
    c28a:	e7f2      	b.n	c272 <event_handler_list_dispatch+0x1e>
    c28c:	4622      	mov	r2, r4
    c28e:	e7fa      	b.n	c286 <event_handler_list_dispatch+0x32>
}
    c290:	bd38      	pop	{r3, r4, r5, pc}
    c292:	bf00      	nop
    c294:	2000cb68 	.word	0x2000cb68
    c298:	2000c74c 	.word	0x2000c74c

0000c29c <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
    c29c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
    c2a0:	f04f 0800 	mov.w	r8, #0
{
    c2a4:	4607      	mov	r7, r0
    c2a6:	460e      	mov	r6, r1
    c2a8:	4614      	mov	r4, r2
    c2aa:	461d      	mov	r5, r3
	char unit_str[4] = {0};
    c2ac:	f8cd 8004 	str.w	r8, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
    c2b0:	f7fc fe9c 	bl	8fec <strlen>
    c2b4:	2808      	cmp	r0, #8
    c2b6:	d004      	beq.n	c2c2 <parse_psm+0x26>
		return -EINVAL;
    c2b8:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
    c2bc:	b003      	add	sp, #12
    c2be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
    c2c2:	4630      	mov	r0, r6
    c2c4:	f7fc fe92 	bl	8fec <strlen>
    c2c8:	2808      	cmp	r0, #8
    c2ca:	d1f5      	bne.n	c2b8 <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
    c2cc:	8832      	ldrh	r2, [r6, #0]
    c2ce:	78b3      	ldrb	r3, [r6, #2]
    c2d0:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
    c2d4:	4641      	mov	r1, r8
    c2d6:	2202      	movs	r2, #2
    c2d8:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
    c2da:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
    c2de:	f003 fe33 	bl	ff48 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
    c2e2:	2807      	cmp	r0, #7
    c2e4:	d8e8      	bhi.n	c2b8 <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
    c2e6:	4b29      	ldr	r3, [pc, #164]	; (c38c <parse_psm+0xf0>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
    c2e8:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
    c2ea:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
    c2ee:	4641      	mov	r1, r8
    c2f0:	1cf0      	adds	r0, r6, #3
    c2f2:	f003 fe29 	bl	ff48 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
    c2f6:	f1b9 0f00 	cmp.w	r9, #0
    c2fa:	d121      	bne.n	c340 <parse_psm+0xa4>
    c2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c300:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
    c302:	b314      	cbz	r4, c34a <parse_psm+0xae>
    c304:	4620      	mov	r0, r4
    c306:	f7fc fe71 	bl	8fec <strlen>
    c30a:	2808      	cmp	r0, #8
    c30c:	d11d      	bne.n	c34a <parse_psm+0xae>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
    c30e:	8822      	ldrh	r2, [r4, #0]
    c310:	78a3      	ldrb	r3, [r4, #2]
    c312:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
    c316:	2100      	movs	r1, #0
    c318:	2202      	movs	r2, #2
    c31a:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
    c31c:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
    c320:	f003 fe12 	bl	ff48 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
    c324:	2807      	cmp	r0, #7
    c326:	d8c7      	bhi.n	c2b8 <parse_psm+0x1c>
		timer_unit = t3412_lookup[lut_idx];
    c328:	4b19      	ldr	r3, [pc, #100]	; (c390 <parse_psm+0xf4>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
    c32a:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
    c32c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
    c330:	2100      	movs	r1, #0
    c332:	1ce0      	adds	r0, r4, #3
    c334:	f003 fe08 	bl	ff48 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
    c338:	b30e      	cbz	r6, c37e <parse_psm+0xe2>
    c33a:	4346      	muls	r6, r0
    c33c:	602e      	str	r6, [r5, #0]
    c33e:	e004      	b.n	c34a <parse_psm+0xae>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
    c340:	fb09 f000 	mul.w	r0, r9, r0
    c344:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
    c346:	3001      	adds	r0, #1
    c348:	d0db      	beq.n	c302 <parse_psm+0x66>
	memcpy(unit_str, active_time_str, unit_str_len);
    c34a:	883a      	ldrh	r2, [r7, #0]
    c34c:	78bb      	ldrb	r3, [r7, #2]
    c34e:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
    c352:	2100      	movs	r1, #0
    c354:	2202      	movs	r2, #2
    c356:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
    c358:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
    c35c:	f003 fdf4 	bl	ff48 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
    c360:	2807      	cmp	r0, #7
    c362:	d8a9      	bhi.n	c2b8 <parse_psm+0x1c>
	timer_unit = t3324_lookup[lut_idx];
    c364:	4b0b      	ldr	r3, [pc, #44]	; (c394 <parse_psm+0xf8>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
    c366:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
    c368:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
    c36c:	2100      	movs	r1, #0
    c36e:	1cf8      	adds	r0, r7, #3
    c370:	f003 fdea 	bl	ff48 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
    c374:	b134      	cbz	r4, c384 <parse_psm+0xe8>
    c376:	4360      	muls	r0, r4
    c378:	6068      	str	r0, [r5, #4]
	return 0;
    c37a:	2000      	movs	r0, #0
    c37c:	e79e      	b.n	c2bc <parse_psm+0x20>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
    c37e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    c382:	e7db      	b.n	c33c <parse_psm+0xa0>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
    c384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c388:	e7f6      	b.n	c378 <parse_psm+0xdc>
    c38a:	bf00      	nop
    c38c:	00012544 	.word	0x00012544
    c390:	00012524 	.word	0x00012524
    c394:	00012524 	.word	0x00012524

0000c398 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
    c398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c39c:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
    c39e:	2300      	movs	r3, #0
{
    c3a0:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
    c3a2:	9303      	str	r3, [sp, #12]
    c3a4:	f8ad 3010 	strh.w	r3, [sp, #16]
    c3a8:	f88d 3012 	strb.w	r3, [sp, #18]
{
    c3ac:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
    c3ae:	2309      	movs	r3, #9
    c3b0:	2207      	movs	r2, #7
{
    c3b2:	4681      	mov	r9, r0
    c3b4:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    c3b6:	a805      	add	r0, sp, #20
    c3b8:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
    c3ba:	e9cd 2300 	strd	r2, r3, [sp]
{
    c3be:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    c3c2:	f004 fd21 	bl	10e08 <at_params_list_init>
	if (err) {
    c3c6:	4604      	mov	r4, r0
    c3c8:	bb38      	cbnz	r0, c41a <parse_cereg+0x82>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEREG response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    c3ca:	4601      	mov	r1, r0
    c3cc:	aa05      	add	r2, sp, #20
    c3ce:	4648      	mov	r0, r9
    c3d0:	f004 fd01 	bl	10dd6 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    c3d4:	4604      	mov	r4, r0
    c3d6:	b9e8      	cbnz	r0, c414 <parse_cereg+0x7c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with +CEREG */
	err = at_params_string_get(&resp_list,
    c3d8:	4601      	mov	r1, r0
    c3da:	466b      	mov	r3, sp
    c3dc:	aa03      	add	r2, sp, #12
    c3de:	a805      	add	r0, sp, #20
    c3e0:	f004 fe1a 	bl	11018 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
    c3e4:	4604      	mov	r4, r0
    c3e6:	b9a8      	cbnz	r0, c414 <parse_cereg+0x7c>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
    c3e8:	4a3c      	ldr	r2, [pc, #240]	; (c4dc <parse_cereg+0x144>)
    c3ea:	9900      	ldr	r1, [sp, #0]
    c3ec:	a803      	add	r0, sp, #12
    c3ee:	f004 fecd 	bl	1118c <response_is_valid>
    c3f2:	b178      	cbz	r0, c414 <parse_cereg+0x7c>
	err = at_params_int_get(list, reg_status_index, &reg_status);
    c3f4:	aa07      	add	r2, sp, #28
    c3f6:	f1c7 0102 	rsb	r1, r7, #2
    c3fa:	a805      	add	r0, sp, #20
    c3fc:	f004 fde0 	bl	10fc0 <at_params_int_get>
	if (err) {
    c400:	2800      	cmp	r0, #0
    c402:	d158      	bne.n	c4b6 <parse_cereg+0x11e>
	switch (reg_status) {
    c404:	9b07      	ldr	r3, [sp, #28]
    c406:	2b08      	cmp	r3, #8
    c408:	d021      	beq.n	c44e <parse_cereg+0xb6>
    c40a:	dc0a      	bgt.n	c422 <parse_cereg+0x8a>
    c40c:	2b05      	cmp	r3, #5
    c40e:	d91e      	bls.n	c44e <parse_cereg+0xb6>
		return -EINVAL;
    c410:	f06f 0415 	mvn.w	r4, #21
			LOG_DBG("LTE mode: %d", *lte_mode);
		}
	}

clean_exit:
	at_params_list_free(&resp_list);
    c414:	a805      	add	r0, sp, #20
    c416:	f004 fd21 	bl	10e5c <at_params_list_free>

	return err;
}
    c41a:	4620      	mov	r0, r4
    c41c:	b00b      	add	sp, #44	; 0x2c
    c41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (reg_status) {
    c422:	2b5a      	cmp	r3, #90	; 0x5a
    c424:	d1f4      	bne.n	c410 <parse_cereg+0x78>
	if (reg_status) {
    c426:	b106      	cbz	r6, c42a <parse_cereg+0x92>
		*reg_status = status;
    c428:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
    c42a:	2d00      	cmp	r5, #0
    c42c:	d14a      	bne.n	c4c4 <parse_cereg+0x12c>
	if (lte_mode) {
    c42e:	f1b8 0f00 	cmp.w	r8, #0
    c432:	d0ef      	beq.n	c414 <parse_cereg+0x7c>
		err = at_params_int_get(&resp_list,
    c434:	aa02      	add	r2, sp, #8
    c436:	f1c7 0105 	rsb	r1, r7, #5
    c43a:	a805      	add	r0, sp, #20
    c43c:	f004 fdc0 	bl	10fc0 <at_params_int_get>
		if (err) {
    c440:	2800      	cmp	r0, #0
    c442:	d144      	bne.n	c4ce <parse_cereg+0x136>
			*lte_mode = mode;
    c444:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
    c448:	f888 3000 	strb.w	r3, [r8]
    c44c:	e7e2      	b.n	c414 <parse_cereg+0x7c>
	if (reg_status) {
    c44e:	2e00      	cmp	r6, #0
    c450:	d12f      	bne.n	c4b2 <parse_cereg+0x11a>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
    c452:	2d00      	cmp	r5, #0
    c454:	d0eb      	beq.n	c42e <parse_cereg+0x96>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
    c456:	a805      	add	r0, sp, #20
    c458:	f004 fdfe 	bl	11058 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
    c45c:	2803      	cmp	r0, #3
    c45e:	d931      	bls.n	c4c4 <parse_cereg+0x12c>
		err = at_params_string_get(
    c460:	f1c7 0103 	rsb	r1, r7, #3
    c464:	ab01      	add	r3, sp, #4
    c466:	aa07      	add	r2, sp, #28
    c468:	a805      	add	r0, sp, #20
    c46a:	f004 fdd5 	bl	11018 <at_params_string_get>
		if (err) {
    c46e:	4601      	mov	r1, r0
    c470:	bb88      	cbnz	r0, c4d6 <parse_cereg+0x13e>
		str_buf[len] = '\0';
    c472:	9b01      	ldr	r3, [sp, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
    c474:	2210      	movs	r2, #16
		str_buf[len] = '\0';
    c476:	3328      	adds	r3, #40	; 0x28
    c478:	446b      	add	r3, sp
    c47a:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    c47e:	a807      	add	r0, sp, #28
    c480:	f003 fd62 	bl	ff48 <strtoul>
		len = sizeof(str_buf) - 1;
    c484:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
    c486:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
    c488:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
    c48a:	f1c7 0104 	rsb	r1, r7, #4
    c48e:	ab01      	add	r3, sp, #4
    c490:	aa07      	add	r2, sp, #28
    c492:	a805      	add	r0, sp, #20
    c494:	f004 fdc0 	bl	11018 <at_params_string_get>
		if (err) {
    c498:	4601      	mov	r1, r0
    c49a:	b9e0      	cbnz	r0, c4d6 <parse_cereg+0x13e>
		str_buf[len] = '\0';
    c49c:	9b01      	ldr	r3, [sp, #4]
		cell->id = strtoul(str_buf, NULL, 16);
    c49e:	2210      	movs	r2, #16
		str_buf[len] = '\0';
    c4a0:	3328      	adds	r3, #40	; 0x28
    c4a2:	446b      	add	r3, sp
    c4a4:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    c4a8:	a807      	add	r0, sp, #28
    c4aa:	f003 fd4d 	bl	ff48 <strtoul>
    c4ae:	60a8      	str	r0, [r5, #8]
    c4b0:	e7bd      	b.n	c42e <parse_cereg+0x96>
		*reg_status = status;
    c4b2:	7033      	strb	r3, [r6, #0]
    c4b4:	e7cd      	b.n	c452 <parse_cereg+0xba>
	if (status < 0) {
    c4b6:	db0c      	blt.n	c4d2 <parse_cereg+0x13a>
	if (reg_status) {
    c4b8:	b106      	cbz	r6, c4bc <parse_cereg+0x124>
		*reg_status = status;
    c4ba:	7030      	strb	r0, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
    c4bc:	2d00      	cmp	r5, #0
    c4be:	d0b6      	beq.n	c42e <parse_cereg+0x96>
    c4c0:	285a      	cmp	r0, #90	; 0x5a
    c4c2:	d1c8      	bne.n	c456 <parse_cereg+0xbe>
		cell->tac = UINT32_MAX;
    c4c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c4c8:	e9c5 3302 	strd	r3, r3, [r5, #8]
    c4cc:	e7af      	b.n	c42e <parse_cereg+0x96>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
    c4ce:	2300      	movs	r3, #0
    c4d0:	e7ba      	b.n	c448 <parse_cereg+0xb0>
    c4d2:	4604      	mov	r4, r0
    c4d4:	e79e      	b.n	c414 <parse_cereg+0x7c>
    c4d6:	460c      	mov	r4, r1
    c4d8:	e79c      	b.n	c414 <parse_cereg+0x7c>
    c4da:	bf00      	nop
    c4dc:	00012951 	.word	0x00012951

0000c4e0 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
    c4e0:	2300      	movs	r3, #0
{
    c4e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c4e4:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
    c4e6:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
    c4e8:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
    c4ec:	b321      	cbz	r1, c538 <parse_xt3412+0x58>
    c4ee:	b318      	cbz	r0, c538 <parse_xt3412+0x58>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
    c4f0:	2104      	movs	r1, #4
    c4f2:	4668      	mov	r0, sp
    c4f4:	f004 fc88 	bl	10e08 <at_params_list_init>
	if (err) {
    c4f8:	4604      	mov	r4, r0
    c4fa:	b9d0      	cbnz	r0, c532 <parse_xt3412+0x52>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse XT3412 response and populate AT parameter list */
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
    c4fc:	4601      	mov	r1, r0
    c4fe:	466a      	mov	r2, sp
    c500:	4630      	mov	r0, r6
    c502:	f004 fc68 	bl	10dd6 <at_parser_params_from_str>
	if (err) {
    c506:	4604      	mov	r4, r0
    c508:	b980      	cbnz	r0, c52c <parse_xt3412+0x4c>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
		goto clean_exit;
	}

	/* Get the remaining time of T3412 from the response */
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
    c50a:	462a      	mov	r2, r5
    c50c:	2102      	movs	r1, #2
    c50e:	4668      	mov	r0, sp
    c510:	f004 fd6e 	bl	10ff0 <at_params_int64_get>
	if (err) {
    c514:	4604      	mov	r4, r0
    c516:	b948      	cbnz	r0, c52c <parse_xt3412+0x4c>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
		goto clean_exit;
	}

	if ((*time > T3412_MAX) || *time < 0) {
    c518:	e9d5 3200 	ldrd	r3, r2, [r5]
    c51c:	4908      	ldr	r1, [pc, #32]	; (c540 <parse_xt3412+0x60>)
    c51e:	4299      	cmp	r1, r3
    c520:	f04f 0308 	mov.w	r3, #8
    c524:	4193      	sbcs	r3, r2
		LOG_WRN("Parsed time parameter not within valid range");
		err = -EINVAL;
    c526:	bf38      	it	cc
    c528:	f06f 0415 	mvncc.w	r4, #21
	}

clean_exit:
	at_params_list_free(&resp_list);
    c52c:	4668      	mov	r0, sp
    c52e:	f004 fc95 	bl	10e5c <at_params_list_free>
	return err;
}
    c532:	4620      	mov	r0, r4
    c534:	b002      	add	sp, #8
    c536:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c538:	f06f 0415 	mvn.w	r4, #21
    c53c:	e7f9      	b.n	c532 <parse_xt3412+0x52>
    c53e:	bf00      	nop
    c540:	5099e000 	.word	0x5099e000

0000c544 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
    c544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
    c548:	230b      	movs	r3, #11
{
    c54a:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
    c54c:	2100      	movs	r1, #0
{
    c54e:	4606      	mov	r6, r0
    c550:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
    c552:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
    c556:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
    c558:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
    c55c:	1e42      	subs	r2, r0, #1
		if (*str == c) {
    c55e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    c562:	2b2c      	cmp	r3, #44	; 0x2c
    c564:	d101      	bne.n	c56a <parse_ncellmeas+0x26>
			count++;
    c566:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
    c568:	e7f9      	b.n	c55e <parse_ncellmeas+0x1a>
    c56a:	2b00      	cmp	r3, #0
    c56c:	d1f7      	bne.n	c55e <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
    c56e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	err = at_params_list_init(&resp_list, param_count);
    c576:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c578:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
    c57a:	a807      	add	r0, sp, #28
    c57c:	f004 fc44 	bl	10e08 <at_params_list_init>
	if (err) {
    c580:	4604      	mov	r4, r0
    c582:	2800      	cmp	r0, #0
    c584:	f040 80c6 	bne.w	c714 <parse_ncellmeas+0x1d0>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_params_from_str(at_response,
    c588:	4601      	mov	r1, r0
    c58a:	aa07      	add	r2, sp, #28
    c58c:	4630      	mov	r0, r6
    c58e:	f004 fc22 	bl	10dd6 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err && err != -E2BIG) {
    c592:	4604      	mov	r4, r0
    c594:	2800      	cmp	r0, #0
    c596:	f000 80a4 	beq.w	c6e2 <parse_ncellmeas+0x19e>
    c59a:	1dc3      	adds	r3, r0, #7
    c59c:	f040 80b7 	bne.w	c70e <parse_ncellmeas+0x1ca>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
		goto clean_exit;
	} else if (err == -E2BIG) {
		incomplete = true;
    c5a0:	2701      	movs	r7, #1
	}

	err = at_params_string_get(&resp_list,
    c5a2:	2100      	movs	r1, #0
    c5a4:	ab04      	add	r3, sp, #16
    c5a6:	aa09      	add	r2, sp, #36	; 0x24
    c5a8:	a807      	add	r0, sp, #28
    c5aa:	f004 fd35 	bl	11018 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
    c5ae:	4604      	mov	r4, r0
    c5b0:	2800      	cmp	r0, #0
    c5b2:	f040 80ac 	bne.w	c70e <parse_ncellmeas+0x1ca>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
    c5b6:	4a76      	ldr	r2, [pc, #472]	; (c790 <parse_ncellmeas+0x24c>)
    c5b8:	9904      	ldr	r1, [sp, #16]
    c5ba:	a809      	add	r0, sp, #36	; 0x24
    c5bc:	f004 fde6 	bl	1118c <response_is_valid>
    c5c0:	2800      	cmp	r0, #0
    c5c2:	f000 80a4 	beq.w	c70e <parse_ncellmeas+0x1ca>
		LOG_DBG("Not a valid NCELLMEAS response");
		goto clean_exit;
	}

	/* Status code. */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
    c5c6:	2101      	movs	r1, #1
    c5c8:	aa01      	add	r2, sp, #4
    c5ca:	a807      	add	r0, sp, #28
    c5cc:	f004 fcf8 	bl	10fc0 <at_params_int_get>
	if (err) {
    c5d0:	2800      	cmp	r0, #0
    c5d2:	f040 8084 	bne.w	c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
    c5d6:	9b01      	ldr	r3, [sp, #4]
    c5d8:	2b00      	cmp	r3, #0
    c5da:	f040 80d6 	bne.w	c78a <parse_ncellmeas+0x246>
		err = 1;
		goto clean_exit;
	}

	/* Current cell ID. */
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
    c5de:	2102      	movs	r1, #2
    c5e0:	aa02      	add	r2, sp, #8
    c5e2:	a807      	add	r0, sp, #28
    c5e4:	f004 fe0f 	bl	11206 <string_param_to_int.constprop.0>
	if (err) {
    c5e8:	2800      	cmp	r0, #0
    c5ea:	d178      	bne.n	c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
    c5ec:	9b02      	ldr	r3, [sp, #8]
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
	}
	cells->current_cell.id = tmp;

	/* PLMN */
	len = sizeof(tmp_str);
    c5ee:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
    c5f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c5f6:	bfa4      	itt	ge
    c5f8:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    c5fc:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
    c5fe:	9b02      	ldr	r3, [sp, #8]

	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
    c600:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
    c602:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
    c604:	aa05      	add	r2, sp, #20
    c606:	ab03      	add	r3, sp, #12
    c608:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
    c60a:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
    c60e:	f004 fd03 	bl	11018 <at_params_string_get>
				   tmp_str, &len);
	if (err) {
    c612:	2800      	cmp	r0, #0
    c614:	d163      	bne.n	c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	tmp_str[len] = '\0';
    c616:	9b03      	ldr	r3, [sp, #12]

	/* Read MNC and store as integer. The MNC starts as the fourth character
	 * in the string, following three characters long MCC.
	 */
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
    c618:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
    c61a:	3330      	adds	r3, #48	; 0x30
    c61c:	446b      	add	r3, sp
    c61e:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
    c622:	1d2a      	adds	r2, r5, #4
    c624:	f10d 0017 	add.w	r0, sp, #23
    c628:	f004 fdc7 	bl	111ba <string_to_int>
	if (err) {
    c62c:	2800      	cmp	r0, #0
    c62e:	d156      	bne.n	c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* Null-terminated MCC, read and store it. */
	tmp_str[3] = '\0';
    c630:	f88d 0017 	strb.w	r0, [sp, #23]

	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
    c634:	462a      	mov	r2, r5
    c636:	210a      	movs	r1, #10
    c638:	a805      	add	r0, sp, #20
    c63a:	f004 fdbe 	bl	111ba <string_to_int>
	if (err) {
    c63e:	2800      	cmp	r0, #0
    c640:	d14d      	bne.n	c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* Tracking area code. */
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
    c642:	2104      	movs	r1, #4
    c644:	aa02      	add	r2, sp, #8
    c646:	a807      	add	r0, sp, #28
    c648:	f004 fddd 	bl	11206 <string_param_to_int.constprop.0>
	if (err) {
    c64c:	2800      	cmp	r0, #0
    c64e:	d146      	bne.n	c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	cells->current_cell.tac = tmp;
    c650:	9b02      	ldr	r3, [sp, #8]

	/* Timing advance */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
    c652:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
    c654:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
    c656:	aa02      	add	r2, sp, #8
    c658:	a807      	add	r0, sp, #28
    c65a:	f004 fcb1 	bl	10fc0 <at_params_int_get>
				&tmp);
	if (err) {
    c65e:	2800      	cmp	r0, #0
    c660:	d13d      	bne.n	c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	cells->current_cell.timing_advance = tmp;
    c662:	9b02      	ldr	r3, [sp, #8]

	/* EARFCN */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
    c664:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
    c666:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
    c668:	f105 0210 	add.w	r2, r5, #16
    c66c:	a807      	add	r0, sp, #28
    c66e:	f004 fca7 	bl	10fc0 <at_params_int_get>
				&cells->current_cell.earfcn);
	if (err) {
    c672:	2800      	cmp	r0, #0
    c674:	d133      	bne.n	c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* Physical cell ID. */
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
    c676:	4641      	mov	r1, r8
    c678:	f105 0228 	add.w	r2, r5, #40	; 0x28
    c67c:	a807      	add	r0, sp, #28
    c67e:	f004 fc6b 	bl	10f58 <at_params_short_get>
				&cells->current_cell.phys_cell_id);
	if (err) {
    c682:	bb60      	cbnz	r0, c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* RSRP */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
    c684:	2108      	movs	r1, #8
    c686:	aa02      	add	r2, sp, #8
    c688:	a807      	add	r0, sp, #28
    c68a:	f004 fc99 	bl	10fc0 <at_params_int_get>
	if (err) {
    c68e:	bb30      	cbnz	r0, c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	cells->current_cell.rsrp = tmp;
    c690:	9b02      	ldr	r3, [sp, #8]

	/* RSRQ */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
    c692:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
    c694:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
    c696:	aa02      	add	r2, sp, #8
    c698:	a807      	add	r0, sp, #28
    c69a:	f004 fc91 	bl	10fc0 <at_params_int_get>
	if (err) {
    c69e:	b9f0      	cbnz	r0, c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	cells->current_cell.rsrq = tmp;
    c6a0:	9b02      	ldr	r3, [sp, #8]

	/* Measurement time. */
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
    c6a2:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
    c6a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
    c6a6:	f105 0220 	add.w	r2, r5, #32
    c6aa:	a807      	add	r0, sp, #28
    c6ac:	f004 fca0 	bl	10ff0 <at_params_int64_get>
				  &cells->current_cell.measurement_time);
	if (err) {
    c6b0:	b9a8      	cbnz	r0, c6de <parse_ncellmeas+0x19a>
		goto clean_exit;
	}

	/* Neighbor cell count. */
	cells->ncells_count = neighborcell_count_get(at_response);
    c6b2:	4630      	mov	r0, r6
    c6b4:	f004 fded 	bl	11292 <neighborcell_count_get>
    c6b8:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30

	/* Starting from modem firmware v1.3.1, timing advance measurement time
	 * information is added as the last parameter in the response.
	 */
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
    c6bc:	b2c0      	uxtb	r0, r0
    c6be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
    c6c2:	f100 060b 	add.w	r6, r0, #11

	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
    c6c6:	a807      	add	r0, sp, #28
    c6c8:	f004 fcc6 	bl	11058 <at_params_valid_count_get>
    c6cc:	4286      	cmp	r6, r0
    c6ce:	d20a      	bcs.n	c6e6 <parse_ncellmeas+0x1a2>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
    c6d0:	4631      	mov	r1, r6
    c6d2:	f105 0218 	add.w	r2, r5, #24
    c6d6:	a807      	add	r0, sp, #28
    c6d8:	f004 fc8a 	bl	10ff0 <at_params_int64_get>
					  &cells->current_cell.timing_advance_meas_time);
		if (err) {
    c6dc:	b138      	cbz	r0, c6ee <parse_ncellmeas+0x1aa>
		}

		cells->neighbor_cells[i].rsrq = tmp;

		/* Time difference. */
		err = at_params_int_get(&resp_list,
    c6de:	4604      	mov	r4, r0
    c6e0:	e015      	b.n	c70e <parse_ncellmeas+0x1ca>
	bool incomplete = false;
    c6e2:	4607      	mov	r7, r0
    c6e4:	e75d      	b.n	c5a2 <parse_ncellmeas+0x5e>
		cells->current_cell.timing_advance_meas_time = 0;
    c6e6:	2200      	movs	r2, #0
    c6e8:	2300      	movs	r3, #0
    c6ea:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
    c6ee:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    c6f2:	b163      	cbz	r3, c70e <parse_ncellmeas+0x1ca>
    c6f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    c6f6:	b153      	cbz	r3, c70e <parse_ncellmeas+0x1ca>
    c6f8:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
    c6fa:	f04f 0800 	mov.w	r8, #0
    c6fe:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    c702:	4598      	cmp	r8, r3
    c704:	d30a      	bcc.n	c71c <parse_ncellmeas+0x1d8>
			goto clean_exit;
		}
	}

	if (incomplete) {
		err = -E2BIG;
    c706:	2f00      	cmp	r7, #0
    c708:	bf18      	it	ne
    c70a:	f06f 0406 	mvnne.w	r4, #6
	}

clean_exit:
	at_params_list_free(&resp_list);
    c70e:	a807      	add	r0, sp, #28
    c710:	f004 fba4 	bl	10e5c <at_params_list_free>

	return err;
}
    c714:	4620      	mov	r0, r4
    c716:	b00d      	add	sp, #52	; 0x34
    c718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					&cells->neighbor_cells[i].earfcn);
    c71c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
    c71e:	1f31      	subs	r1, r6, #4
    c720:	eb02 1208 	add.w	r2, r2, r8, lsl #4
    c724:	a807      	add	r0, sp, #28
    c726:	ea4f 1908 	mov.w	r9, r8, lsl #4
    c72a:	f004 fc49 	bl	10fc0 <at_params_int_get>
		if (err) {
    c72e:	2800      	cmp	r0, #0
    c730:	d1d5      	bne.n	c6de <parse_ncellmeas+0x19a>
					  &cells->neighbor_cells[i].phys_cell_id);
    c732:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
    c734:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
    c736:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
    c738:	3208      	adds	r2, #8
    c73a:	a807      	add	r0, sp, #28
    c73c:	f004 fc0c 	bl	10f58 <at_params_short_get>
		if (err) {
    c740:	2800      	cmp	r0, #0
    c742:	d1cc      	bne.n	c6de <parse_ncellmeas+0x19a>
		err = at_params_int_get(&resp_list,
    c744:	aa02      	add	r2, sp, #8
    c746:	1eb1      	subs	r1, r6, #2
    c748:	a807      	add	r0, sp, #28
    c74a:	f004 fc39 	bl	10fc0 <at_params_int_get>
		if (err) {
    c74e:	2800      	cmp	r0, #0
    c750:	d1c5      	bne.n	c6de <parse_ncellmeas+0x19a>
		cells->neighbor_cells[i].rsrp = tmp;
    c752:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    c754:	9a02      	ldr	r2, [sp, #8]
    c756:	444b      	add	r3, r9
    c758:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
    c75a:	1e71      	subs	r1, r6, #1
    c75c:	aa02      	add	r2, sp, #8
    c75e:	a807      	add	r0, sp, #28
    c760:	f004 fc2e 	bl	10fc0 <at_params_int_get>
		if (err) {
    c764:	2800      	cmp	r0, #0
    c766:	d1ba      	bne.n	c6de <parse_ncellmeas+0x19a>
		cells->neighbor_cells[i].rsrq = tmp;
    c768:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    c76a:	9a02      	ldr	r2, [sp, #8]
    c76c:	444b      	add	r3, r9
    c76e:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
    c770:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
    c772:	4631      	mov	r1, r6
					&cells->neighbor_cells[i].time_diff);
    c774:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
    c776:	3204      	adds	r2, #4
    c778:	a807      	add	r0, sp, #28
    c77a:	f004 fc21 	bl	10fc0 <at_params_int_get>
		if (err) {
    c77e:	3605      	adds	r6, #5
    c780:	2800      	cmp	r0, #0
    c782:	d1ac      	bne.n	c6de <parse_ncellmeas+0x19a>
	for (size_t i = 0; i < cells->ncells_count; i++) {
    c784:	f108 0801 	add.w	r8, r8, #1
    c788:	e7b9      	b.n	c6fe <parse_ncellmeas+0x1ba>
		err = 1;
    c78a:	2401      	movs	r4, #1
    c78c:	e7bf      	b.n	c70e <parse_ncellmeas+0x1ca>
    c78e:	bf00      	nop
    c790:	0001292f 	.word	0x0001292f

0000c794 <parse_ncellmeas_gci>:

int parse_ncellmeas_gci(struct lte_lc_ncellmeas_params *params,
	const char *at_response, struct lte_lc_cells_info *cells)
{
    c794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
    c798:	230b      	movs	r3, #11
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
    c79a:	2400      	movs	r4, #0
{
    c79c:	460e      	mov	r6, r1
    c79e:	b09f      	sub	sp, #124	; 0x7c
    c7a0:	4617      	mov	r7, r2
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
    c7a2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
{
    c7a6:	9003      	str	r0, [sp, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
    c7a8:	f8cd 4043 	str.w	r4, [sp, #67]	; 0x43
	size_t response_prefix_len = sizeof(response_prefix);
    c7ac:	930a      	str	r3, [sp, #40]	; 0x28
static uint32_t get_char_frequency(const char *str, char c)
    c7ae:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
    c7b0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    c7b4:	2b2c      	cmp	r3, #44	; 0x2c
    c7b6:	d101      	bne.n	c7bc <parse_ncellmeas_gci+0x28>
			count++;
    c7b8:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
    c7ba:	e7f9      	b.n	c7b0 <parse_ncellmeas_gci+0x1c>
    c7bc:	2b00      	cmp	r3, #0
    c7be:	d1f7      	bne.n	c7b0 <parse_ncellmeas_gci+0x1c>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c7c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c7c4:	f04f 0c30 	mov.w	ip, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
    c7c8:	1ce1      	adds	r1, r4, #3
	cells->gci_cells_count = 0;
    c7ca:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	cells->ncells_count = 0;
    c7ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c7d2:	60ba      	str	r2, [r7, #8]

	for (i = 0; i < params->gci_count; i++) {
    c7d4:	9803      	ldr	r0, [sp, #12]
    c7d6:	7840      	ldrb	r0, [r0, #1]
    c7d8:	4298      	cmp	r0, r3
    c7da:	d846      	bhi.n	c86a <parse_ncellmeas_gci+0xd6>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
    c7dc:	a80d      	add	r0, sp, #52	; 0x34
    c7de:	f004 fb13 	bl	10e08 <at_params_list_init>
	if (err) {
    c7e2:	4605      	mov	r5, r0
    c7e4:	2800      	cmp	r0, #0
    c7e6:	f040 8171 	bne.w	cacc <parse_ncellmeas_gci+0x338>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
		goto clean_exit;
	}

	err = at_parser_params_from_str(at_response, NULL, &resp_list);
    c7ea:	4601      	mov	r1, r0
    c7ec:	aa0d      	add	r2, sp, #52	; 0x34
    c7ee:	4630      	mov	r0, r6
    c7f0:	f004 faf1 	bl	10dd6 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
    c7f4:	4605      	mov	r5, r0
    c7f6:	2800      	cmp	r0, #0
    c7f8:	d041      	beq.n	c87e <parse_ncellmeas_gci+0xea>
    c7fa:	1dc3      	adds	r3, r0, #7
    c7fc:	f040 8166 	bne.w	cacc <parse_ncellmeas_gci+0x338>
	} else if (err == -E2BIG) {
		/* Returns -E2BIG if the buffers set by CONFIG_LTE_NEIGHBOR_CELLS_MAX
		 * are too small for the modem response. The associated data is still valid,
		 * but not complete.
		 */
		incomplete = true;
    c800:	f04f 0901 	mov.w	r9, #1
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
			param_count, err, at_response);
	}

	err = at_params_string_get(&resp_list,
    c804:	2100      	movs	r1, #0
    c806:	ab0a      	add	r3, sp, #40	; 0x28
    c808:	aa0f      	add	r2, sp, #60	; 0x3c
    c80a:	a80d      	add	r0, sp, #52	; 0x34
    c80c:	f004 fc04 	bl	11018 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
    c810:	4605      	mov	r5, r0
    c812:	2800      	cmp	r0, #0
    c814:	f040 815a 	bne.w	cacc <parse_ncellmeas_gci+0x338>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
    c818:	4ab2      	ldr	r2, [pc, #712]	; (cae4 <parse_ncellmeas_gci+0x350>)
    c81a:	990a      	ldr	r1, [sp, #40]	; 0x28
    c81c:	a80f      	add	r0, sp, #60	; 0x3c
    c81e:	f004 fcb5 	bl	1118c <response_is_valid>
    c822:	9002      	str	r0, [sp, #8]
    c824:	2800      	cmp	r0, #0
    c826:	f000 8151 	beq.w	cacc <parse_ncellmeas_gci+0x338>
		goto clean_exit;
	}

	/* Status code. */
	curr_index = AT_NCELLMEAS_STATUS_INDEX;
	err = at_params_int_get(&resp_list, curr_index, &status);
    c82a:	2101      	movs	r1, #1
    c82c:	aa07      	add	r2, sp, #28
    c82e:	a80d      	add	r0, sp, #52	; 0x34
    c830:	f004 fbc6 	bl	10fc0 <at_params_int_get>
	if (err) {
    c834:	2800      	cmp	r0, #0
    c836:	f040 8150 	bne.w	cada <parse_ncellmeas_gci+0x346>
		LOG_DBG("Cannot parse NCELLMEAS status");
		goto clean_exit;
	}

	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
    c83a:	9b07      	ldr	r3, [sp, #28]
    c83c:	2b01      	cmp	r3, #1
    c83e:	f000 814e 	beq.w	cade <parse_ncellmeas_gci+0x34a>
    c842:	46ab      	mov	fp, r5
    c844:	2601      	movs	r6, #1
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
	}

	/* Go through the cells. */
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
    c846:	f1a4 030a 	sub.w	r3, r4, #10
    c84a:	9501      	str	r5, [sp, #4]
    c84c:	9305      	str	r3, [sp, #20]
    c84e:	9b05      	ldr	r3, [sp, #20]
    c850:	42b3      	cmp	r3, r6
    c852:	d904      	bls.n	c85e <parse_ncellmeas_gci+0xca>
			i < params->gci_count; i++) {
    c854:	9b03      	ldr	r3, [sp, #12]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
    c856:	9a01      	ldr	r2, [sp, #4]
			i < params->gci_count; i++) {
    c858:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
    c85a:	4293      	cmp	r3, r2
    c85c:	d811      	bhi.n	c882 <parse_ncellmeas_gci+0xee>
			k++;
		}
	}

	if (incomplete) {
		err = -E2BIG;
    c85e:	f1b9 0f00 	cmp.w	r9, #0
    c862:	bf18      	it	ne
    c864:	f06f 0506 	mvnne.w	r5, #6
    c868:	e130      	b.n	cacc <parse_ncellmeas_gci+0x338>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c86a:	fb0c f503 	mul.w	r5, ip, r3
    c86e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
    c870:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c872:	4428      	add	r0, r5
    c874:	6082      	str	r2, [r0, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
    c876:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c878:	4428      	add	r0, r5
    c87a:	8282      	strh	r2, [r0, #20]
	for (i = 0; i < params->gci_count; i++) {
    c87c:	e7aa      	b.n	c7d4 <parse_ncellmeas_gci+0x40>
	bool incomplete = false;
    c87e:	4681      	mov	r9, r0
    c880:	e7c0      	b.n	c804 <parse_ncellmeas_gci+0x70>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
    c882:	aa08      	add	r2, sp, #32
    c884:	1c71      	adds	r1, r6, #1
    c886:	a80d      	add	r0, sp, #52	; 0x34
    c888:	f004 fcbd 	bl	11206 <string_param_to_int.constprop.0>
		if (err) {
    c88c:	4604      	mov	r4, r0
    c88e:	2800      	cmp	r0, #0
    c890:	f040 811b 	bne.w	caca <parse_ncellmeas_gci+0x336>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
    c894:	9b08      	ldr	r3, [sp, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
    c896:	aa0b      	add	r2, sp, #44	; 0x2c
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
    c898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
    c89c:	bfa4      	itt	ge
    c89e:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    c8a2:	9308      	strge	r3, [sp, #32]
		parsed_cell.id = tmp_int;
    c8a4:	9b08      	ldr	r3, [sp, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
    c8a6:	1cb1      	adds	r1, r6, #2
		parsed_cell.id = tmp_int;
    c8a8:	9314      	str	r3, [sp, #80]	; 0x50
		len = sizeof(tmp_str);
    c8aa:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
    c8ac:	a80d      	add	r0, sp, #52	; 0x34
		len = sizeof(tmp_str);
    c8ae:	9309      	str	r3, [sp, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
    c8b0:	ab09      	add	r3, sp, #36	; 0x24
    c8b2:	f004 fbb1 	bl	11018 <at_params_string_get>
		if (err) {
    c8b6:	4604      	mov	r4, r0
    c8b8:	2800      	cmp	r0, #0
    c8ba:	f040 8106 	bne.w	caca <parse_ncellmeas_gci+0x336>
		tmp_str[len] = '\0';
    c8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
    c8c0:	210a      	movs	r1, #10
		tmp_str[len] = '\0';
    c8c2:	3378      	adds	r3, #120	; 0x78
    c8c4:	446b      	add	r3, sp
    c8c6:	f803 0c4c 	strb.w	r0, [r3, #-76]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
    c8ca:	aa13      	add	r2, sp, #76	; 0x4c
    c8cc:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    c8d0:	f004 fc73 	bl	111ba <string_to_int>
		if (err) {
    c8d4:	4604      	mov	r4, r0
    c8d6:	2800      	cmp	r0, #0
    c8d8:	f040 80f7 	bne.w	caca <parse_ncellmeas_gci+0x336>
		tmp_str[3] = '\0';
    c8dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
    c8e0:	210a      	movs	r1, #10
    c8e2:	aa12      	add	r2, sp, #72	; 0x48
    c8e4:	a80b      	add	r0, sp, #44	; 0x2c
    c8e6:	f004 fc68 	bl	111ba <string_to_int>
		if (err) {
    c8ea:	4604      	mov	r4, r0
    c8ec:	2800      	cmp	r0, #0
    c8ee:	f040 80ec 	bne.w	caca <parse_ncellmeas_gci+0x336>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
    c8f2:	aa08      	add	r2, sp, #32
    c8f4:	1cf1      	adds	r1, r6, #3
    c8f6:	a80d      	add	r0, sp, #52	; 0x34
    c8f8:	f004 fc85 	bl	11206 <string_param_to_int.constprop.0>
		if (err) {
    c8fc:	4604      	mov	r4, r0
    c8fe:	2800      	cmp	r0, #0
    c900:	f040 80e3 	bne.w	caca <parse_ncellmeas_gci+0x336>
		parsed_cell.tac = tmp_int;
    c904:	9b08      	ldr	r3, [sp, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
    c906:	aa08      	add	r2, sp, #32
    c908:	1d31      	adds	r1, r6, #4
    c90a:	a80d      	add	r0, sp, #52	; 0x34
		parsed_cell.tac = tmp_int;
    c90c:	9315      	str	r3, [sp, #84]	; 0x54
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
    c90e:	f004 fb57 	bl	10fc0 <at_params_int_get>
		if (err) {
    c912:	4604      	mov	r4, r0
    c914:	2800      	cmp	r0, #0
    c916:	f040 80d8 	bne.w	caca <parse_ncellmeas_gci+0x336>
		parsed_cell.timing_advance = tmp_int;
    c91a:	9b08      	ldr	r3, [sp, #32]
		err = at_params_int64_get(&resp_list, curr_index,
    c91c:	aa18      	add	r2, sp, #96	; 0x60
    c91e:	1d71      	adds	r1, r6, #5
    c920:	a80d      	add	r0, sp, #52	; 0x34
		parsed_cell.timing_advance = tmp_int;
    c922:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		err = at_params_int64_get(&resp_list, curr_index,
    c926:	f004 fb63 	bl	10ff0 <at_params_int64_get>
		if (err) {
    c92a:	4604      	mov	r4, r0
    c92c:	2800      	cmp	r0, #0
    c92e:	f040 80cc 	bne.w	caca <parse_ncellmeas_gci+0x336>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
    c932:	aa16      	add	r2, sp, #88	; 0x58
    c934:	1db1      	adds	r1, r6, #6
    c936:	a80d      	add	r0, sp, #52	; 0x34
    c938:	f004 fb42 	bl	10fc0 <at_params_int_get>
		if (err) {
    c93c:	4604      	mov	r4, r0
    c93e:	2800      	cmp	r0, #0
    c940:	f040 80c3 	bne.w	caca <parse_ncellmeas_gci+0x336>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
    c944:	aa1c      	add	r2, sp, #112	; 0x70
    c946:	1df1      	adds	r1, r6, #7
    c948:	a80d      	add	r0, sp, #52	; 0x34
    c94a:	f004 fb05 	bl	10f58 <at_params_short_get>
		if (err) {
    c94e:	4604      	mov	r4, r0
    c950:	2800      	cmp	r0, #0
    c952:	f040 80ba 	bne.w	caca <parse_ncellmeas_gci+0x336>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
    c956:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    c95a:	f106 0108 	add.w	r1, r6, #8
    c95e:	a80d      	add	r0, sp, #52	; 0x34
    c960:	f004 fafa 	bl	10f58 <at_params_short_get>
		if (err) {
    c964:	4604      	mov	r4, r0
    c966:	2800      	cmp	r0, #0
    c968:	f040 80af 	bne.w	caca <parse_ncellmeas_gci+0x336>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
    c96c:	aa1d      	add	r2, sp, #116	; 0x74
    c96e:	f106 0109 	add.w	r1, r6, #9
    c972:	a80d      	add	r0, sp, #52	; 0x34
    c974:	f004 faf0 	bl	10f58 <at_params_short_get>
		if (err) {
    c978:	4604      	mov	r4, r0
    c97a:	2800      	cmp	r0, #0
    c97c:	f040 80a5 	bne.w	caca <parse_ncellmeas_gci+0x336>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
    c980:	aa1a      	add	r2, sp, #104	; 0x68
    c982:	f106 010a 	add.w	r1, r6, #10
    c986:	a80d      	add	r0, sp, #52	; 0x34
    c988:	f004 fb32 	bl	10ff0 <at_params_int64_get>
		if (err) {
    c98c:	4604      	mov	r4, r0
    c98e:	2800      	cmp	r0, #0
    c990:	f040 809b 	bne.w	caca <parse_ncellmeas_gci+0x336>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
    c994:	f10d 021a 	add.w	r2, sp, #26
    c998:	f106 010b 	add.w	r1, r6, #11
    c99c:	a80d      	add	r0, sp, #52	; 0x34
    c99e:	f004 fadb 	bl	10f58 <at_params_short_get>
		if (err) {
    c9a2:	4604      	mov	r4, r0
    c9a4:	2800      	cmp	r0, #0
    c9a6:	f040 8090 	bne.w	caca <parse_ncellmeas_gci+0x336>
		curr_index++;
    c9aa:	360c      	adds	r6, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
    c9ac:	4631      	mov	r1, r6
    c9ae:	f10d 021a 	add.w	r2, sp, #26
    c9b2:	a80d      	add	r0, sp, #52	; 0x34
		is_serving_cell = tmp_short;
    c9b4:	f9bd 801a 	ldrsh.w	r8, [sp, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
    c9b8:	f004 face 	bl	10f58 <at_params_short_get>
		if (err) {
    c9bc:	4604      	mov	r4, r0
    c9be:	2800      	cmp	r0, #0
    c9c0:	f040 8083 	bne.w	caca <parse_ncellmeas_gci+0x336>
		if (is_serving_cell) {
    c9c4:	f1b8 0f00 	cmp.w	r8, #0
    c9c8:	d068      	beq.n	ca9c <parse_ncellmeas_gci+0x308>
			cells->current_cell = parsed_cell;
    c9ca:	46be      	mov	lr, r7
    c9cc:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    c9d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    c9d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    c9d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    c9dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    c9e0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
    c9e4:	f89d 801a 	ldrb.w	r8, [sp, #26]
			cells->current_cell = parsed_cell;
    c9e8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
    c9ec:	f1b8 0f00 	cmp.w	r8, #0
    c9f0:	d010      	beq.n	ca14 <parse_ncellmeas_gci+0x280>
					to_be_parsed_ncell_count = parsed_ncells_count;
    c9f2:	f1b8 0f0a 	cmp.w	r8, #10
    c9f6:	bf94      	ite	ls
    c9f8:	4644      	movls	r4, r8
    c9fa:	240a      	movhi	r4, #10
    c9fc:	9b02      	ldr	r3, [sp, #8]
				ncells = k_calloc(
    c9fe:	f04f 0110 	mov.w	r1, #16
    ca02:	4620      	mov	r0, r4
					to_be_parsed_ncell_count = parsed_ncells_count;
    ca04:	bf88      	it	hi
    ca06:	4699      	movhi	r9, r3
				ncells = k_calloc(
    ca08:	f005 f93c 	bl	11c84 <k_calloc>
				if (ncells == NULL) {
    ca0c:	b140      	cbz	r0, ca20 <parse_ncellmeas_gci+0x28c>
				cells->neighbor_cells = ncells;
    ca0e:	6378      	str	r0, [r7, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
    ca10:	f887 4030 	strb.w	r4, [r7, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
    ca14:	f04f 0800 	mov.w	r8, #0
    ca18:	9404      	str	r4, [sp, #16]
    ca1a:	9b04      	ldr	r3, [sp, #16]
    ca1c:	4543      	cmp	r3, r8
    ca1e:	d103      	bne.n	ca28 <parse_ncellmeas_gci+0x294>
			i < params->gci_count; i++) {
    ca20:	9b01      	ldr	r3, [sp, #4]
    ca22:	3301      	adds	r3, #1
    ca24:	9301      	str	r3, [sp, #4]
    ca26:	e712      	b.n	c84e <parse_ncellmeas_gci+0xba>
							&cells->neighbor_cells[j].earfcn);
    ca28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
				err = at_params_int_get(&resp_list,
    ca2a:	1c71      	adds	r1, r6, #1
    ca2c:	eb02 1208 	add.w	r2, r2, r8, lsl #4
    ca30:	a80d      	add	r0, sp, #52	; 0x34
    ca32:	f004 fac5 	bl	10fc0 <at_params_int_get>
				if (err) {
    ca36:	ea4f 1a08 	mov.w	sl, r8, lsl #4
    ca3a:	4604      	mov	r4, r0
    ca3c:	2800      	cmp	r0, #0
    ca3e:	d144      	bne.n	caca <parse_ncellmeas_gci+0x336>
							  &cells->neighbor_cells[j].phys_cell_id);
    ca40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
				err = at_params_short_get(&resp_list,
    ca42:	1cb1      	adds	r1, r6, #2
							  &cells->neighbor_cells[j].phys_cell_id);
    ca44:	4452      	add	r2, sl
				err = at_params_short_get(&resp_list,
    ca46:	3208      	adds	r2, #8
    ca48:	a80d      	add	r0, sp, #52	; 0x34
    ca4a:	f004 fa85 	bl	10f58 <at_params_short_get>
				if (err) {
    ca4e:	4604      	mov	r4, r0
    ca50:	2800      	cmp	r0, #0
    ca52:	d13a      	bne.n	caca <parse_ncellmeas_gci+0x336>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
    ca54:	aa08      	add	r2, sp, #32
    ca56:	1cf1      	adds	r1, r6, #3
    ca58:	a80d      	add	r0, sp, #52	; 0x34
    ca5a:	f004 fab1 	bl	10fc0 <at_params_int_get>
				if (err) {
    ca5e:	4604      	mov	r4, r0
    ca60:	2800      	cmp	r0, #0
    ca62:	d132      	bne.n	caca <parse_ncellmeas_gci+0x336>
				cells->neighbor_cells[j].rsrp = tmp_int;
    ca64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca66:	9a08      	ldr	r2, [sp, #32]
    ca68:	4453      	add	r3, sl
    ca6a:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
    ca6c:	1d31      	adds	r1, r6, #4
    ca6e:	aa08      	add	r2, sp, #32
    ca70:	a80d      	add	r0, sp, #52	; 0x34
    ca72:	f004 faa5 	bl	10fc0 <at_params_int_get>
				if (err) {
    ca76:	4604      	mov	r4, r0
    ca78:	bb38      	cbnz	r0, caca <parse_ncellmeas_gci+0x336>
				cells->neighbor_cells[j].rsrq = tmp_int;
    ca7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca7c:	9a08      	ldr	r2, [sp, #32]
    ca7e:	4453      	add	r3, sl
    ca80:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
    ca82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
				curr_index++;
    ca84:	3605      	adds	r6, #5
							&cells->neighbor_cells[j].time_diff);
    ca86:	4452      	add	r2, sl
				err = at_params_int_get(&resp_list,
    ca88:	4631      	mov	r1, r6
    ca8a:	3204      	adds	r2, #4
    ca8c:	a80d      	add	r0, sp, #52	; 0x34
    ca8e:	f004 fa97 	bl	10fc0 <at_params_int_get>
				if (err) {
    ca92:	4604      	mov	r4, r0
    ca94:	b9c8      	cbnz	r0, caca <parse_ncellmeas_gci+0x336>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
    ca96:	f108 0801 	add.w	r8, r8, #1
    ca9a:	e7be      	b.n	ca1a <parse_ncellmeas_gci+0x286>
			cells->gci_cells[k] = parsed_cell;
    ca9c:	2230      	movs	r2, #48	; 0x30
    ca9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    caa0:	ac12      	add	r4, sp, #72	; 0x48
    caa2:	fb02 3c0b 	mla	ip, r2, fp, r3
    caa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    caa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    caac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    caae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    cab2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    cab6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
    caba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
			k++;
    cabe:	f10b 0b01 	add.w	fp, fp, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
    cac2:	3301      	adds	r3, #1
    cac4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			k++;
    cac8:	e7aa      	b.n	ca20 <parse_ncellmeas_gci+0x28c>
			goto clean_exit;
    caca:	4625      	mov	r5, r4
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
	}

clean_exit:
	at_params_list_free(&resp_list);
    cacc:	a80d      	add	r0, sp, #52	; 0x34
    cace:	f004 f9c5 	bl	10e5c <at_params_list_free>

	return err;
}
    cad2:	4628      	mov	r0, r5
    cad4:	b01f      	add	sp, #124	; 0x7c
    cad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cada:	4605      	mov	r5, r0
    cadc:	e7f6      	b.n	cacc <parse_ncellmeas_gci+0x338>
		err = 1;
    cade:	461d      	mov	r5, r3
    cae0:	e7f4      	b.n	cacc <parse_ncellmeas_gci+0x338>
    cae2:	bf00      	nop
    cae4:	0001292f 	.word	0x0001292f

0000cae8 <parse_mdmev>:
	at_params_list_free(&resp_list);
	return err;
}

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
    cae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    caea:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
    caec:	4604      	mov	r4, r0
    caee:	b1b0      	cbz	r0, cb1e <parse_mdmev+0x36>
    caf0:	b1a9      	cbz	r1, cb1e <parse_mdmev+0x36>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
    caf2:	2108      	movs	r1, #8
    caf4:	4a0d      	ldr	r2, [pc, #52]	; (cb2c <parse_mdmev+0x44>)
    caf6:	f004 fb49 	bl	1118c <response_is_valid>
    cafa:	b198      	cbz	r0, cb24 <parse_mdmev+0x3c>
		return -EIO;
	}

	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;

	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
    cafc:	2500      	movs	r5, #0
    cafe:	4f0c      	ldr	r7, [pc, #48]	; (cb30 <parse_mdmev+0x48>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
    cb00:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
    cb02:	4621      	mov	r1, r4
    cb04:	f857 0b04 	ldr.w	r0, [r7], #4
    cb08:	f7fc fa66 	bl	8fd8 <strcmp>
    cb0c:	b908      	cbnz	r0, cb12 <parse_mdmev+0x2a>
			LOG_DBG("Occurrence found: %s", event_types[i]);
			*modem_evt = i;
    cb0e:	7035      	strb	r5, [r6, #0]
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
    cb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
    cb12:	3501      	adds	r5, #1
    cb14:	2d05      	cmp	r5, #5
    cb16:	d1f4      	bne.n	cb02 <parse_mdmev+0x1a>
	return -ENODATA;
    cb18:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    cb1c:	e7f8      	b.n	cb10 <parse_mdmev+0x28>
		return -EINVAL;
    cb1e:	f06f 0015 	mvn.w	r0, #21
    cb22:	e7f5      	b.n	cb10 <parse_mdmev+0x28>
		return -EIO;
    cb24:	f06f 0004 	mvn.w	r0, #4
    cb28:	e7f2      	b.n	cb10 <parse_mdmev+0x28>
    cb2a:	bf00      	nop
    cb2c:	0001299a 	.word	0x0001299a
    cb30:	00012510 	.word	0x00012510

0000cb34 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
    cb34:	b508      	push	{r3, lr}
	int err;

	if (ret != 0) {
    cb36:	b988      	cbnz	r0, cb5c <on_modem_lib_init+0x28>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
    cb38:	4809      	ldr	r0, [pc, #36]	; (cb60 <on_modem_lib_init+0x2c>)
    cb3a:	f7fc fa57 	bl	8fec <strlen>
    cb3e:	b118      	cbz	r0, cb48 <on_modem_lib_init+0x14>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
    cb40:	4907      	ldr	r1, [pc, #28]	; (cb60 <on_modem_lib_init+0x2c>)
    cb42:	4808      	ldr	r0, [pc, #32]	; (cb64 <on_modem_lib_init+0x30>)
    cb44:	f001 fb84 	bl	e250 <nrf_modem_at_printf>
		if (err) {
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
    cb48:	4807      	ldr	r0, [pc, #28]	; (cb68 <on_modem_lib_init+0x34>)
    cb4a:	f7fc fa4f 	bl	8fec <strlen>
    cb4e:	b128      	cbz	r0, cb5c <on_modem_lib_init+0x28>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (err) {
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
		}
	}
}
    cb50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
    cb54:	4904      	ldr	r1, [pc, #16]	; (cb68 <on_modem_lib_init+0x34>)
    cb56:	4803      	ldr	r0, [pc, #12]	; (cb64 <on_modem_lib_init+0x30>)
    cb58:	f001 bb7a 	b.w	e250 <nrf_modem_at_printf>
}
    cb5c:	bd08      	pop	{r3, pc}
    cb5e:	bf00      	nop
    cb60:	00012a10 	.word	0x00012a10
    cb64:	00012a2f 	.word	0x00012a2f
    cb68:	00012a32 	.word	0x00012a32

0000cb6c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    cb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb70:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    cb72:	4b15      	ldr	r3, [pc, #84]	; (cbc8 <tfm_ns_interface_dispatch+0x5c>)
    cb74:	4604      	mov	r4, r0
    cb76:	f893 8000 	ldrb.w	r8, [r3]
    cb7a:	460d      	mov	r5, r1
    cb7c:	4616      	mov	r6, r2
    cb7e:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
    cb80:	f1b8 0f00 	cmp.w	r8, #0
    cb84:	d115      	bne.n	cbb2 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    cb86:	4668      	mov	r0, sp
    cb88:	f003 ff22 	bl	109d0 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    cb8c:	463a      	mov	r2, r7
    cb8e:	4631      	mov	r1, r6
    cb90:	4628      	mov	r0, r5
    cb92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    cb94:	47a0      	blx	r4
    cb96:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    cb98:	4668      	mov	r0, sp
    cb9a:	f003 ff1a 	bl	109d2 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    cb9e:	f1b8 0f00 	cmp.w	r8, #0
    cba2:	d002      	beq.n	cbaa <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    cba4:	4809      	ldr	r0, [pc, #36]	; (cbcc <tfm_ns_interface_dispatch+0x60>)
    cba6:	f002 f89b 	bl	ece0 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    cbaa:	4620      	mov	r0, r4
    cbac:	b022      	add	sp, #136	; 0x88
    cbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    cbb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cbba:	4804      	ldr	r0, [pc, #16]	; (cbcc <tfm_ns_interface_dispatch+0x60>)
    cbbc:	f002 f816 	bl	ebec <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    cbc0:	2800      	cmp	r0, #0
    cbc2:	d0e0      	beq.n	cb86 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    cbc4:	241f      	movs	r4, #31
    cbc6:	e7f0      	b.n	cbaa <tfm_ns_interface_dispatch+0x3e>
    cbc8:	2000d45a 	.word	0x2000d45a
    cbcc:	2000c760 	.word	0x2000c760

0000cbd0 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    cbd0:	b530      	push	{r4, r5, lr}
    cbd2:	b095      	sub	sp, #84	; 0x54
    cbd4:	4605      	mov	r5, r0
    cbd6:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
    cbd8:	2230      	movs	r2, #48	; 0x30
    cbda:	2100      	movs	r1, #0
    cbdc:	a808      	add	r0, sp, #32
    cbde:	f005 f886 	bl	11cee <memset>
    cbe2:	233f      	movs	r3, #63	; 0x3f
    cbe4:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
    cbe6:	ab07      	add	r3, sp, #28
    cbe8:	9303      	str	r3, [sp, #12]
    cbea:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    cbec:	9406      	str	r4, [sp, #24]
    cbee:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    cbf2:	b154      	cbz	r4, cc0a <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
    cbf4:	2301      	movs	r3, #1
    cbf6:	aa05      	add	r2, sp, #20
    cbf8:	9200      	str	r2, [sp, #0]
    cbfa:	2100      	movs	r1, #0
    cbfc:	4804      	ldr	r0, [pc, #16]	; (cc10 <psa_generate_random+0x40>)
    cbfe:	9301      	str	r3, [sp, #4]
    cc00:	aa03      	add	r2, sp, #12
    cc02:	f000 f807 	bl	cc14 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
    cc06:	b015      	add	sp, #84	; 0x54
    cc08:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
    cc0a:	4620      	mov	r0, r4
    cc0c:	e7fb      	b.n	cc06 <psa_generate_random+0x36>
    cc0e:	bf00      	nop
    cc10:	40000100 	.word	0x40000100

0000cc14 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    cc14:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
    cc16:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
    cc1a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
    cc1e:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
    cc20:	d20d      	bcs.n	cc3e <psa_call+0x2a>
        (type < INT16_MIN) ||
    cc22:	ea43 0504 	orr.w	r5, r3, r4
    cc26:	2dff      	cmp	r5, #255	; 0xff
    cc28:	d809      	bhi.n	cc3e <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    cc2a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    cc2e:	4613      	mov	r3, r2
    cc30:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    cc34:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    cc36:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
    cc38:	4803      	ldr	r0, [pc, #12]	; (cc48 <psa_call+0x34>)
    cc3a:	f7ff bf97 	b.w	cb6c <tfm_ns_interface_dispatch>
}
    cc3e:	f06f 0080 	mvn.w	r0, #128	; 0x80
    cc42:	bc30      	pop	{r4, r5}
    cc44:	4770      	bx	lr
    cc46:	bf00      	nop
    cc48:	00007c21 	.word	0x00007c21

0000cc4c <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
    cc4c:	4b01      	ldr	r3, [pc, #4]	; (cc54 <SystemInit+0x8>)
    cc4e:	4a02      	ldr	r2, [pc, #8]	; (cc58 <SystemInit+0xc>)
    cc50:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
    cc52:	4770      	bx	lr
    cc54:	2000c5b8 	.word	0x2000c5b8
    cc58:	03d09000 	.word	0x03d09000

0000cc5c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    cc5c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    cc5e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    cc60:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    cc62:	fab2 f382 	clz	r3, r2
    cc66:	f1c3 031f 	rsb	r3, r3, #31
    cc6a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    cc6c:	fa05 f403 	lsl.w	r4, r5, r3
    cc70:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    cc74:	e8d0 6fef 	ldaex	r6, [r0]
    cc78:	4296      	cmp	r6, r2
    cc7a:	d104      	bne.n	cc86 <nrfx_flag32_alloc+0x2a>
    cc7c:	e8c0 4fec 	stlex	ip, r4, [r0]
    cc80:	f1bc 0f00 	cmp.w	ip, #0
    cc84:	d1f6      	bne.n	cc74 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    cc86:	d1eb      	bne.n	cc60 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    cc88:	4801      	ldr	r0, [pc, #4]	; (cc90 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    cc8a:	700b      	strb	r3, [r1, #0]
}
    cc8c:	bd70      	pop	{r4, r5, r6, pc}
    cc8e:	bf00      	nop
    cc90:	0bad0000 	.word	0x0bad0000

0000cc94 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    cc94:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    cc96:	6803      	ldr	r3, [r0, #0]
    cc98:	40cb      	lsrs	r3, r1
    cc9a:	07db      	lsls	r3, r3, #31
    cc9c:	d410      	bmi.n	ccc0 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    cc9e:	2301      	movs	r3, #1
    cca0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    cca2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    cca4:	ea43 0102 	orr.w	r1, r3, r2
    cca8:	e8d0 4fef 	ldaex	r4, [r0]
    ccac:	4294      	cmp	r4, r2
    ccae:	d104      	bne.n	ccba <nrfx_flag32_free+0x26>
    ccb0:	e8c0 1fec 	stlex	ip, r1, [r0]
    ccb4:	f1bc 0f00 	cmp.w	ip, #0
    ccb8:	d1f6      	bne.n	cca8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ccba:	d1f2      	bne.n	cca2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    ccbc:	4801      	ldr	r0, [pc, #4]	; (ccc4 <nrfx_flag32_free+0x30>)
}
    ccbe:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ccc0:	4801      	ldr	r0, [pc, #4]	; (ccc8 <nrfx_flag32_free+0x34>)
    ccc2:	e7fc      	b.n	ccbe <nrfx_flag32_free+0x2a>
    ccc4:	0bad0000 	.word	0x0bad0000
    ccc8:	0bad0004 	.word	0x0bad0004

0000cccc <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    cccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    ccce:	4604      	mov	r4, r0
    ccd0:	b118      	cbz	r0, ccda <clock_stop+0xe>
    ccd2:	2801      	cmp	r0, #1
    ccd4:	d01e      	beq.n	cd14 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    ccd6:	b003      	add	sp, #12
    ccd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    ccda:	2202      	movs	r2, #2
    ccdc:	4b27      	ldr	r3, [pc, #156]	; (cd7c <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    ccde:	4607      	mov	r7, r0
    cce0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cce4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    cce8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ccec:	2201      	movs	r2, #1
    ccee:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    ccf0:	2301      	movs	r3, #1
    ccf2:	f242 7510 	movw	r5, #10000	; 0x2710
    ccf6:	4e21      	ldr	r6, [pc, #132]	; (cd7c <clock_stop+0xb0>)
    ccf8:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    ccfc:	b1b4      	cbz	r4, cd2c <clock_stop+0x60>
    ccfe:	2c01      	cmp	r4, #1
    cd00:	d1e9      	bne.n	ccd6 <clock_stop+0xa>
            if (p_clk_src != NULL)
    cd02:	b387      	cbz	r7, cd66 <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    cd04:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    cd08:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    cd0c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    cd0e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    cd12:	e013      	b.n	cd3c <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cd14:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    cd16:	4b19      	ldr	r3, [pc, #100]	; (cd7c <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    cd18:	f10d 0707 	add.w	r7, sp, #7
    cd1c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cd20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cd24:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cd28:	6058      	str	r0, [r3, #4]
    cd2a:	e7e1      	b.n	ccf0 <clock_stop+0x24>
            if (p_clk_src != NULL)
    cd2c:	b18f      	cbz	r7, cd52 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cd2e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    cd32:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    cd36:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cd38:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    cd3c:	03da      	lsls	r2, r3, #15
    cd3e:	d5ca      	bpl.n	ccd6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    cd40:	f89d 0007 	ldrb.w	r0, [sp, #7]
    cd44:	2801      	cmp	r0, #1
    cd46:	d1c6      	bne.n	ccd6 <clock_stop+0xa>
    cd48:	f004 fafd 	bl	11346 <nrfx_busy_wait>
    cd4c:	3d01      	subs	r5, #1
    cd4e:	d1d5      	bne.n	ccfc <clock_stop+0x30>
    cd50:	e7c1      	b.n	ccd6 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cd52:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    cd56:	03d9      	lsls	r1, r3, #15
    cd58:	d5bd      	bpl.n	ccd6 <clock_stop+0xa>
    cd5a:	2001      	movs	r0, #1
    cd5c:	f004 faf3 	bl	11346 <nrfx_busy_wait>
    cd60:	3d01      	subs	r5, #1
    cd62:	d1f6      	bne.n	cd52 <clock_stop+0x86>
    cd64:	e7b7      	b.n	ccd6 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    cd66:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    cd6a:	03db      	lsls	r3, r3, #15
    cd6c:	d5b3      	bpl.n	ccd6 <clock_stop+0xa>
    cd6e:	2001      	movs	r0, #1
    cd70:	f004 fae9 	bl	11346 <nrfx_busy_wait>
    cd74:	3d01      	subs	r5, #1
    cd76:	d1f6      	bne.n	cd66 <clock_stop+0x9a>
    cd78:	e7ad      	b.n	ccd6 <clock_stop+0xa>
    cd7a:	bf00      	nop
    cd7c:	40005000 	.word	0x40005000

0000cd80 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    cd80:	4b04      	ldr	r3, [pc, #16]	; (cd94 <nrfx_clock_init+0x14>)
    cd82:	791a      	ldrb	r2, [r3, #4]
    cd84:	b922      	cbnz	r2, cd90 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    cd86:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    cd88:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    cd8a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    cd8c:	4802      	ldr	r0, [pc, #8]	; (cd98 <nrfx_clock_init+0x18>)
    cd8e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    cd90:	4802      	ldr	r0, [pc, #8]	; (cd9c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    cd92:	4770      	bx	lr
    cd94:	2000cb70 	.word	0x2000cb70
    cd98:	0bad0000 	.word	0x0bad0000
    cd9c:	0bad000c 	.word	0x0bad000c

0000cda0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    cda0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    cda2:	2005      	movs	r0, #5
    cda4:	f7fd f86c 	bl	9e80 <arch_irq_is_enabled>
    cda8:	b910      	cbnz	r0, cdb0 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    cdaa:	2005      	movs	r0, #5
    cdac:	f7fd f85a 	bl	9e64 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    cdb0:	2201      	movs	r2, #1
    cdb2:	4b02      	ldr	r3, [pc, #8]	; (cdbc <nrfx_clock_enable+0x1c>)
    cdb4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    cdb8:	bd08      	pop	{r3, pc}
    cdba:	bf00      	nop
    cdbc:	40005000 	.word	0x40005000

0000cdc0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    cdc0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    cdc2:	b110      	cbz	r0, cdca <nrfx_clock_start+0xa>
    cdc4:	2801      	cmp	r0, #1
    cdc6:	d02e      	beq.n	ce26 <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    cdc8:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cdca:	4a1c      	ldr	r2, [pc, #112]	; (ce3c <nrfx_clock_start+0x7c>)
    cdcc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cdd0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    cdd4:	03c9      	lsls	r1, r1, #15
    cdd6:	d40e      	bmi.n	cdf6 <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    cdd8:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    cddc:	07db      	lsls	r3, r3, #31
    cdde:	d513      	bpl.n	ce08 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    cde0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    cde4:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cde8:	3b01      	subs	r3, #1
    cdea:	2b01      	cmp	r3, #1
    cdec:	d809      	bhi.n	ce02 <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
    cdee:	2302      	movs	r3, #2
    cdf0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    cdf4:	e7e8      	b.n	cdc8 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cdf6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cdfa:	2b02      	cmp	r3, #2
    cdfc:	d005      	beq.n	ce0a <nrfx_clock_start+0x4a>
    cdfe:	2b01      	cmp	r3, #1
    ce00:	d002      	beq.n	ce08 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ce02:	2000      	movs	r0, #0
    ce04:	f7ff ff62 	bl	cccc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    ce08:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    ce0a:	4a0c      	ldr	r2, [pc, #48]	; (ce3c <nrfx_clock_start+0x7c>)
    ce0c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ce10:	2300      	movs	r3, #0
    ce12:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    ce16:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    ce1a:	2302      	movs	r3, #2
    ce1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ce20:	2301      	movs	r3, #1
    ce22:	6093      	str	r3, [r2, #8]
}
    ce24:	e7d0      	b.n	cdc8 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ce26:	2200      	movs	r2, #0
    ce28:	4b04      	ldr	r3, [pc, #16]	; (ce3c <nrfx_clock_start+0x7c>)
    ce2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ce2e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    ce32:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ce36:	6018      	str	r0, [r3, #0]
}
    ce38:	e7c6      	b.n	cdc8 <nrfx_clock_start+0x8>
    ce3a:	bf00      	nop
    ce3c:	40005000 	.word	0x40005000

0000ce40 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    ce40:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ce42:	4b17      	ldr	r3, [pc, #92]	; (cea0 <nrfx_power_clock_irq_handler+0x60>)
    ce44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    ce48:	b152      	cbz	r2, ce60 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ce4a:	2000      	movs	r0, #0
    ce4c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    ce50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    ce54:	2201      	movs	r2, #1
    ce56:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    ce5a:	4b12      	ldr	r3, [pc, #72]	; (cea4 <nrfx_power_clock_irq_handler+0x64>)
    ce5c:	681b      	ldr	r3, [r3, #0]
    ce5e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ce60:	4b0f      	ldr	r3, [pc, #60]	; (cea0 <nrfx_power_clock_irq_handler+0x60>)
    ce62:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    ce66:	b18a      	cbz	r2, ce8c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ce68:	2200      	movs	r2, #0
    ce6a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ce6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ce72:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ce76:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    ce7a:	f002 0203 	and.w	r2, r2, #3
    ce7e:	2a01      	cmp	r2, #1
    ce80:	f04f 0102 	mov.w	r1, #2
    ce84:	d103      	bne.n	ce8e <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ce86:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ce8a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    ce8c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    ce8e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    ce92:	4b04      	ldr	r3, [pc, #16]	; (cea4 <nrfx_power_clock_irq_handler+0x64>)
    ce94:	2001      	movs	r0, #1
}
    ce96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    ce9a:	681b      	ldr	r3, [r3, #0]
    ce9c:	4718      	bx	r3
    ce9e:	bf00      	nop
    cea0:	40005000 	.word	0x40005000
    cea4:	2000cb70 	.word	0x2000cb70

0000cea8 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    cea8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    ceaa:	4801      	ldr	r0, [pc, #4]	; (ceb0 <nrfx_dppi_channel_alloc+0x8>)
    ceac:	f7ff bed6 	b.w	cc5c <nrfx_flag32_alloc>
    ceb0:	2000c5bc 	.word	0x2000c5bc

0000ceb4 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    ceb4:	4a06      	ldr	r2, [pc, #24]	; (ced0 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    ceb6:	f000 001f 	and.w	r0, r0, #31
    ceba:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    cebe:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    cec2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    cec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    ceca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    cece:	4770      	bx	lr
    ced0:	40842500 	.word	0x40842500

0000ced4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    ced4:	4b03      	ldr	r3, [pc, #12]	; (cee4 <pin_in_use_by_te+0x10>)
    ced6:	3008      	adds	r0, #8
    ced8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cedc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    cee0:	4770      	bx	lr
    cee2:	bf00      	nop
    cee4:	2000c5c0 	.word	0x2000c5c0

0000cee8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    cee8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    ceea:	4c0d      	ldr	r4, [pc, #52]	; (cf20 <call_handler+0x38>)
    ceec:	f100 0308 	add.w	r3, r0, #8
    cef0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    cef4:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cef6:	05da      	lsls	r2, r3, #23
{
    cef8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cefa:	d507      	bpl.n	cf0c <call_handler+0x24>
    cefc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    cf00:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    cf04:	6852      	ldr	r2, [r2, #4]
    cf06:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    cf0a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    cf0c:	68a3      	ldr	r3, [r4, #8]
    cf0e:	b12b      	cbz	r3, cf1c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    cf10:	4631      	mov	r1, r6
    cf12:	4628      	mov	r0, r5
    cf14:	68e2      	ldr	r2, [r4, #12]
    }
}
    cf16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    cf1a:	4718      	bx	r3
}
    cf1c:	bd70      	pop	{r4, r5, r6, pc}
    cf1e:	bf00      	nop
    cf20:	2000c5c0 	.word	0x2000c5c0

0000cf24 <release_handler>:
{
    cf24:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cf26:	4a12      	ldr	r2, [pc, #72]	; (cf70 <release_handler+0x4c>)
    cf28:	3008      	adds	r0, #8
    cf2a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    cf2e:	05d9      	lsls	r1, r3, #23
    cf30:	d51b      	bpl.n	cf6a <release_handler+0x46>
    cf32:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    cf36:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    cf3a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    cf3e:	2000      	movs	r0, #0
    cf40:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    cf44:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    cf48:	f413 7f80 	tst.w	r3, #256	; 0x100
    cf4c:	d003      	beq.n	cf56 <release_handler+0x32>
    cf4e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    cf52:	4299      	cmp	r1, r3
    cf54:	d009      	beq.n	cf6a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    cf56:	3001      	adds	r0, #1
    cf58:	2820      	cmp	r0, #32
    cf5a:	d1f3      	bne.n	cf44 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    cf5c:	2300      	movs	r3, #0
    cf5e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    cf62:	4804      	ldr	r0, [pc, #16]	; (cf74 <release_handler+0x50>)
}
    cf64:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    cf66:	f7ff be95 	b.w	cc94 <nrfx_flag32_free>
}
    cf6a:	bc10      	pop	{r4}
    cf6c:	4770      	bx	lr
    cf6e:	bf00      	nop
    cf70:	2000c5c0 	.word	0x2000c5c0
    cf74:	2000c614 	.word	0x2000c614

0000cf78 <pin_handler_trigger_uninit>:
{
    cf78:	b538      	push	{r3, r4, r5, lr}
    cf7a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    cf7c:	f7ff ffaa 	bl	ced4 <pin_in_use_by_te>
    cf80:	4c0b      	ldr	r4, [pc, #44]	; (cfb0 <pin_handler_trigger_uninit+0x38>)
    cf82:	f102 0508 	add.w	r5, r2, #8
    cf86:	b160      	cbz	r0, cfa2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    cf88:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cf8a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    cf8e:	0b5b      	lsrs	r3, r3, #13
    cf90:	009b      	lsls	r3, r3, #2
    cf92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cf96:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    cf9a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    cf9e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    cfa2:	4610      	mov	r0, r2
    cfa4:	f7ff ffbe 	bl	cf24 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    cfa8:	2300      	movs	r3, #0
    cfaa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    cfae:	bd38      	pop	{r3, r4, r5, pc}
    cfb0:	2000c5c0 	.word	0x2000c5c0

0000cfb4 <nrfx_gpiote_input_configure>:
{
    cfb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cfb8:	4604      	mov	r4, r0
    cfba:	461d      	mov	r5, r3
    if (p_input_config)
    cfbc:	b309      	cbz	r1, d002 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    cfbe:	4f4e      	ldr	r7, [pc, #312]	; (d0f8 <nrfx_gpiote_input_configure+0x144>)
    cfc0:	f100 0808 	add.w	r8, r0, #8
    cfc4:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    cfc8:	07b3      	lsls	r3, r6, #30
    cfca:	d506      	bpl.n	cfda <nrfx_gpiote_input_configure+0x26>
    cfcc:	f7ff ff82 	bl	ced4 <pin_in_use_by_te>
    cfd0:	b118      	cbz	r0, cfda <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    cfd2:	484a      	ldr	r0, [pc, #296]	; (d0fc <nrfx_gpiote_input_configure+0x148>)
}
    cfd4:	b002      	add	sp, #8
    cfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    cfda:	4849      	ldr	r0, [pc, #292]	; (d100 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    cfdc:	f004 031f 	and.w	r3, r4, #31
    cfe0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    cfe4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    cfe8:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    cfea:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    cfee:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    cff2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    cff6:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    cffa:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    cffe:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    d002:	b19a      	cbz	r2, d02c <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d004:	4e3c      	ldr	r6, [pc, #240]	; (d0f8 <nrfx_gpiote_input_configure+0x144>)
    d006:	f104 0708 	add.w	r7, r4, #8
    d00a:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    d00e:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    d010:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    d014:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    d016:	d00c      	beq.n	d032 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    d018:	2800      	cmp	r0, #0
    d01a:	d1da      	bne.n	cfd2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    d01c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    d020:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    d024:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    d028:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    d02c:	bbd5      	cbnz	r5, d0a4 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    d02e:	4835      	ldr	r0, [pc, #212]	; (d104 <nrfx_gpiote_input_configure+0x150>)
    d030:	e7d0      	b.n	cfd4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    d032:	f021 0120 	bic.w	r1, r1, #32
    d036:	04c9      	lsls	r1, r1, #19
    d038:	0cc9      	lsrs	r1, r1, #19
    d03a:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    d03e:	2800      	cmp	r0, #0
    d040:	d0ec      	beq.n	d01c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    d042:	2b03      	cmp	r3, #3
    d044:	d8c5      	bhi.n	cfd2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    d046:	6852      	ldr	r2, [r2, #4]
    d048:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    d04c:	4662      	mov	r2, ip
    d04e:	0092      	lsls	r2, r2, #2
    d050:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d054:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    d058:	b923      	cbnz	r3, d064 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    d05a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    d05e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    d062:	e7db      	b.n	d01c <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d064:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    d068:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    d06c:	f020 0003 	bic.w	r0, r0, #3
    d070:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    d074:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    d078:	f041 0120 	orr.w	r1, r1, #32
    d07c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    d080:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    d084:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d088:	0220      	lsls	r0, r4, #8
    d08a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    d08e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    d092:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    d096:	ea40 000e 	orr.w	r0, r0, lr
    d09a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    d09e:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    d0a2:	e7bb      	b.n	d01c <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    d0a4:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    d0a6:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    d0aa:	f7ff ff3b 	bl	cf24 <release_handler>
    if (!handler)
    d0ae:	2e00      	cmp	r6, #0
    d0b0:	d0bd      	beq.n	d02e <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    d0b2:	4d11      	ldr	r5, [pc, #68]	; (d0f8 <nrfx_gpiote_input_configure+0x144>)
    d0b4:	e9d5 2300 	ldrd	r2, r3, [r5]
    d0b8:	4296      	cmp	r6, r2
    d0ba:	d101      	bne.n	d0c0 <nrfx_gpiote_input_configure+0x10c>
    d0bc:	429f      	cmp	r7, r3
    d0be:	d018      	beq.n	d0f2 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    d0c0:	4811      	ldr	r0, [pc, #68]	; (d108 <nrfx_gpiote_input_configure+0x154>)
    d0c2:	f10d 0107 	add.w	r1, sp, #7
    d0c6:	f7ff fdc9 	bl	cc5c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    d0ca:	4b0e      	ldr	r3, [pc, #56]	; (d104 <nrfx_gpiote_input_configure+0x150>)
    d0cc:	4298      	cmp	r0, r3
    d0ce:	d181      	bne.n	cfd4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    d0d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    d0d4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    d0d8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    d0da:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    d0dc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    d0e0:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    d0e4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    d0e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d0ec:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    d0f0:	e79d      	b.n	d02e <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    d0f2:	2200      	movs	r2, #0
    d0f4:	e7ee      	b.n	d0d4 <nrfx_gpiote_input_configure+0x120>
    d0f6:	bf00      	nop
    d0f8:	2000c5c0 	.word	0x2000c5c0
    d0fc:	0bad0004 	.word	0x0bad0004
    d100:	40842500 	.word	0x40842500
    d104:	0bad0000 	.word	0x0bad0000
    d108:	2000c614 	.word	0x2000c614

0000d10c <nrfx_gpiote_output_configure>:
{
    d10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d10e:	4604      	mov	r4, r0
    if (p_config)
    d110:	b379      	cbz	r1, d172 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d112:	4e3a      	ldr	r6, [pc, #232]	; (d1fc <nrfx_gpiote_output_configure+0xf0>)
    d114:	f100 0708 	add.w	r7, r0, #8
    d118:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    d11c:	07ab      	lsls	r3, r5, #30
    d11e:	d404      	bmi.n	d12a <nrfx_gpiote_output_configure+0x1e>
    d120:	f7ff fed8 	bl	ced4 <pin_in_use_by_te>
    d124:	b108      	cbz	r0, d12a <nrfx_gpiote_output_configure+0x1e>
{
    d126:	4836      	ldr	r0, [pc, #216]	; (d200 <nrfx_gpiote_output_configure+0xf4>)
}
    d128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    d12a:	f015 0f1c 	tst.w	r5, #28
    d12e:	784b      	ldrb	r3, [r1, #1]
    d130:	d122      	bne.n	d178 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    d132:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d136:	f8df c0cc 	ldr.w	ip, [pc, #204]	; d204 <nrfx_gpiote_output_configure+0xf8>
    d13a:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    d13e:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    d142:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    d146:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    d148:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    d14c:	7809      	ldrb	r1, [r1, #0]
    d14e:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    d152:	f02c 0c07 	bic.w	ip, ip, #7
    d156:	ea43 030c 	orr.w	r3, r3, ip
    d15a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    d15e:	4929      	ldr	r1, [pc, #164]	; (d204 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    d160:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    d164:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    d166:	f045 0503 	orr.w	r5, r5, #3
    d16a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    d16e:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    d172:	b922      	cbnz	r2, d17e <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    d174:	4824      	ldr	r0, [pc, #144]	; (d208 <nrfx_gpiote_output_configure+0xfc>)
    d176:	e7d7      	b.n	d128 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    d178:	2b01      	cmp	r3, #1
    d17a:	d1da      	bne.n	d132 <nrfx_gpiote_output_configure+0x26>
    d17c:	e7d3      	b.n	d126 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d17e:	4e1f      	ldr	r6, [pc, #124]	; (d1fc <nrfx_gpiote_output_configure+0xf0>)
    d180:	f104 0708 	add.w	r7, r4, #8
    d184:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    d188:	0783      	lsls	r3, r0, #30
    d18a:	d5cc      	bpl.n	d126 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    d18c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    d190:	2300      	movs	r3, #0
    d192:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    d194:	f020 0020 	bic.w	r0, r0, #32
    d198:	0089      	lsls	r1, r1, #2
    d19a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    d19e:	04c0      	lsls	r0, r0, #19
    d1a0:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
    d1a4:	0cc0      	lsrs	r0, r0, #19
    d1a6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    d1aa:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    d1ae:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    d1b2:	7855      	ldrb	r5, [r2, #1]
    d1b4:	2d00      	cmp	r5, #0
    d1b6:	d0dd      	beq.n	d174 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    d1b8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    d1bc:	7892      	ldrb	r2, [r2, #2]
    d1be:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    d1c2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    d1c6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d1ca:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    d1ce:	0223      	lsls	r3, r4, #8
    d1d0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    d1d4:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d1d6:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    d1da:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    d1de:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d1e0:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    d1e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    d1e6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d1ea:	4313      	orrs	r3, r2
    d1ec:	f040 0020 	orr.w	r0, r0, #32
    d1f0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    d1f4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    d1f8:	e7bc      	b.n	d174 <nrfx_gpiote_output_configure+0x68>
    d1fa:	bf00      	nop
    d1fc:	2000c5c0 	.word	0x2000c5c0
    d200:	0bad0004 	.word	0x0bad0004
    d204:	40842500 	.word	0x40842500
    d208:	0bad0000 	.word	0x0bad0000

0000d20c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    d20c:	4b01      	ldr	r3, [pc, #4]	; (d214 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    d20e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    d212:	4770      	bx	lr
    d214:	2000c5c0 	.word	0x2000c5c0

0000d218 <nrfx_gpiote_channel_get>:
{
    d218:	b508      	push	{r3, lr}
    d21a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    d21c:	f7ff fe5a 	bl	ced4 <pin_in_use_by_te>
    d220:	b138      	cbz	r0, d232 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d222:	4b05      	ldr	r3, [pc, #20]	; (d238 <nrfx_gpiote_channel_get+0x20>)
    d224:	3208      	adds	r2, #8
    d226:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    d22a:	4804      	ldr	r0, [pc, #16]	; (d23c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d22c:	0b5b      	lsrs	r3, r3, #13
    d22e:	700b      	strb	r3, [r1, #0]
}
    d230:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d232:	4803      	ldr	r0, [pc, #12]	; (d240 <nrfx_gpiote_channel_get+0x28>)
    d234:	e7fc      	b.n	d230 <nrfx_gpiote_channel_get+0x18>
    d236:	bf00      	nop
    d238:	2000c5c0 	.word	0x2000c5c0
    d23c:	0bad0000 	.word	0x0bad0000
    d240:	0bad0004 	.word	0x0bad0004

0000d244 <nrfx_gpiote_init>:
{
    d244:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d246:	4c0f      	ldr	r4, [pc, #60]	; (d284 <nrfx_gpiote_init+0x40>)
    d248:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    d24c:	b9bd      	cbnz	r5, d27e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    d24e:	2240      	movs	r2, #64	; 0x40
    d250:	4629      	mov	r1, r5
    d252:	f104 0010 	add.w	r0, r4, #16
    d256:	f004 fd4a 	bl	11cee <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    d25a:	2031      	movs	r0, #49	; 0x31
    d25c:	f7fc fe02 	bl	9e64 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d260:	4b09      	ldr	r3, [pc, #36]	; (d288 <nrfx_gpiote_init+0x44>)
    return err_code;
    d262:	480a      	ldr	r0, [pc, #40]	; (d28c <nrfx_gpiote_init+0x48>)
    d264:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    d268:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    d26c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d270:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d274:	2301      	movs	r3, #1
    d276:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    d27a:	6563      	str	r3, [r4, #84]	; 0x54
}
    d27c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    d27e:	4804      	ldr	r0, [pc, #16]	; (d290 <nrfx_gpiote_init+0x4c>)
    d280:	e7fc      	b.n	d27c <nrfx_gpiote_init+0x38>
    d282:	bf00      	nop
    d284:	2000c5c0 	.word	0x2000c5c0
    d288:	40031000 	.word	0x40031000
    d28c:	0bad0000 	.word	0x0bad0000
    d290:	0bad0005 	.word	0x0bad0005

0000d294 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    d294:	4b03      	ldr	r3, [pc, #12]	; (d2a4 <nrfx_gpiote_is_init+0x10>)
    d296:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    d29a:	3800      	subs	r0, #0
    d29c:	bf18      	it	ne
    d29e:	2001      	movne	r0, #1
    d2a0:	4770      	bx	lr
    d2a2:	bf00      	nop
    d2a4:	2000c5c0 	.word	0x2000c5c0

0000d2a8 <nrfx_gpiote_channel_free>:
{
    d2a8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    d2aa:	4801      	ldr	r0, [pc, #4]	; (d2b0 <nrfx_gpiote_channel_free+0x8>)
    d2ac:	f7ff bcf2 	b.w	cc94 <nrfx_flag32_free>
    d2b0:	2000c610 	.word	0x2000c610

0000d2b4 <nrfx_gpiote_channel_alloc>:
{
    d2b4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    d2b6:	4801      	ldr	r0, [pc, #4]	; (d2bc <nrfx_gpiote_channel_alloc+0x8>)
    d2b8:	f7ff bcd0 	b.w	cc5c <nrfx_flag32_alloc>
    d2bc:	2000c610 	.word	0x2000c610

0000d2c0 <nrfx_gpiote_trigger_enable>:
{
    d2c0:	4602      	mov	r2, r0
    d2c2:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d2c4:	f7ff fe06 	bl	ced4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d2c8:	4b1b      	ldr	r3, [pc, #108]	; (d338 <nrfx_gpiote_trigger_enable+0x78>)
    d2ca:	f102 0408 	add.w	r4, r2, #8
    d2ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d2d2:	b1c8      	cbz	r0, d308 <nrfx_gpiote_trigger_enable+0x48>
    d2d4:	f013 0402 	ands.w	r4, r3, #2
    d2d8:	d116      	bne.n	d308 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
    d2da:	4818      	ldr	r0, [pc, #96]	; (d33c <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d2dc:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    d2de:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d2e0:	5084      	str	r4, [r0, r2]
    d2e2:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    d2e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d2e8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    d2ec:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    d2f0:	f040 0001 	orr.w	r0, r0, #1
    d2f4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    d2f8:	b129      	cbz	r1, d306 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    d2fa:	2201      	movs	r2, #1
    d2fc:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    d300:	4a0f      	ldr	r2, [pc, #60]	; (d340 <nrfx_gpiote_trigger_enable+0x80>)
    d302:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d306:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d308:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    d30c:	2b04      	cmp	r3, #4
    d30e:	d00e      	beq.n	d32e <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    d310:	2b05      	cmp	r3, #5
    d312:	d00e      	beq.n	d332 <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
    d314:	4b0b      	ldr	r3, [pc, #44]	; (d344 <nrfx_gpiote_trigger_enable+0x84>)
    d316:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    d318:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d31c:	40d9      	lsrs	r1, r3
    d31e:	f001 0101 	and.w	r1, r1, #1
    d322:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d324:	4610      	mov	r0, r2
}
    d326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d32a:	f7ff bdc3 	b.w	ceb4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    d32e:	2103      	movs	r1, #3
    d330:	e7f8      	b.n	d324 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    d332:	2102      	movs	r1, #2
    d334:	e7f6      	b.n	d324 <nrfx_gpiote_trigger_enable+0x64>
    d336:	bf00      	nop
    d338:	2000c5c0 	.word	0x2000c5c0
    d33c:	40031100 	.word	0x40031100
    d340:	40031000 	.word	0x40031000
    d344:	40842500 	.word	0x40842500

0000d348 <nrfx_gpiote_trigger_disable>:
{
    d348:	b508      	push	{r3, lr}
    d34a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d34c:	f7ff fdc2 	bl	ced4 <pin_in_use_by_te>
    d350:	b1c0      	cbz	r0, d384 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d352:	4b0f      	ldr	r3, [pc, #60]	; (d390 <nrfx_gpiote_trigger_disable+0x48>)
    d354:	f102 0108 	add.w	r1, r2, #8
    d358:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d35c:	0799      	lsls	r1, r3, #30
    d35e:	d411      	bmi.n	d384 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d360:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d362:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d364:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    d366:	490b      	ldr	r1, [pc, #44]	; (d394 <nrfx_gpiote_trigger_disable+0x4c>)
    d368:	009b      	lsls	r3, r3, #2
    d36a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d36e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d372:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    d376:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d37a:	f022 0203 	bic.w	r2, r2, #3
    d37e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    d382:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d384:	2100      	movs	r1, #0
}
    d386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d38a:	4610      	mov	r0, r2
    d38c:	f7ff bd92 	b.w	ceb4 <nrf_gpio_cfg_sense_set>
    d390:	2000c5c0 	.word	0x2000c5c0
    d394:	40031000 	.word	0x40031000

0000d398 <nrfx_gpiote_pin_uninit>:
{
    d398:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d39a:	4b0c      	ldr	r3, [pc, #48]	; (d3cc <nrfx_gpiote_pin_uninit+0x34>)
    d39c:	f100 0208 	add.w	r2, r0, #8
    d3a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    d3a4:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    d3a6:	07db      	lsls	r3, r3, #31
    d3a8:	d50d      	bpl.n	d3c6 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    d3aa:	f7ff ffcd 	bl	d348 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    d3ae:	4620      	mov	r0, r4
    d3b0:	f7ff fde2 	bl	cf78 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    d3b4:	2202      	movs	r2, #2
    d3b6:	4b06      	ldr	r3, [pc, #24]	; (d3d0 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    d3b8:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    d3bc:	3480      	adds	r4, #128	; 0x80
    d3be:	4805      	ldr	r0, [pc, #20]	; (d3d4 <nrfx_gpiote_pin_uninit+0x3c>)
    d3c0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    d3c4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d3c6:	4804      	ldr	r0, [pc, #16]	; (d3d8 <nrfx_gpiote_pin_uninit+0x40>)
    d3c8:	e7fc      	b.n	d3c4 <nrfx_gpiote_pin_uninit+0x2c>
    d3ca:	bf00      	nop
    d3cc:	2000c5c0 	.word	0x2000c5c0
    d3d0:	40842500 	.word	0x40842500
    d3d4:	0bad0000 	.word	0x0bad0000
    d3d8:	0bad0004 	.word	0x0bad0004

0000d3dc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    d3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    d3e0:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    d3e2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d3e4:	462c      	mov	r4, r5
{
    d3e6:	4b4d      	ldr	r3, [pc, #308]	; (d51c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    d3e8:	484d      	ldr	r0, [pc, #308]	; (d520 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d3ea:	494e      	ldr	r1, [pc, #312]	; (d524 <nrfx_gpiote_irq_handler+0x148>)
{
    d3ec:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d3ee:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    d3f0:	b136      	cbz	r6, d400 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    d3f2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    d3f6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d3f8:	bf1e      	ittt	ne
    d3fa:	601c      	strne	r4, [r3, #0]
    d3fc:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    d3fe:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d400:	3304      	adds	r3, #4
    d402:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    d404:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d408:	d1f1      	bne.n	d3ee <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d40a:	4f45      	ldr	r7, [pc, #276]	; (d520 <nrfx_gpiote_irq_handler+0x144>)
    d40c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    d410:	b193      	cbz	r3, d438 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    d412:	4e45      	ldr	r6, [pc, #276]	; (d528 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    d414:	f10d 090c 	add.w	r9, sp, #12
    d418:	6a33      	ldr	r3, [r6, #32]
    d41a:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    d41c:	6233      	str	r3, [r6, #32]
    d41e:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
    d422:	9803      	ldr	r0, [sp, #12]
    d424:	b970      	cbnz	r0, d444 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d426:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    d42a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    d42e:	6a33      	ldr	r3, [r6, #32]
    d430:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    d432:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    d434:	2b00      	cmp	r3, #0
    d436:	d1f2      	bne.n	d41e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    d438:	2401      	movs	r4, #1
    while (mask)
    d43a:	2d00      	cmp	r5, #0
    d43c:	d156      	bne.n	d4ec <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    d43e:	b005      	add	sp, #20
    d440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    d444:	fa90 fba0 	rbit	fp, r0
    d448:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d44c:	4a37      	ldr	r2, [pc, #220]	; (d52c <nrfx_gpiote_irq_handler+0x150>)
    d44e:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    d452:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    d456:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    d45a:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    d45e:	f819 300c 	ldrb.w	r3, [r9, ip]
    d462:	fa0a f404 	lsl.w	r4, sl, r4
    d466:	ea23 0304 	bic.w	r3, r3, r4
    d46a:	f809 300c 	strb.w	r3, [r9, ip]
    d46e:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d472:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    d476:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    d47a:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d47c:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    d47e:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    d482:	d518      	bpl.n	d4b6 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    d484:	4611      	mov	r1, r2
    d486:	4658      	mov	r0, fp
    d488:	9301      	str	r3, [sp, #4]
    d48a:	f7ff fd2d 	bl	cee8 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d48e:	9b01      	ldr	r3, [sp, #4]
    d490:	b2e4      	uxtb	r4, r4
    d492:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    d496:	f3c3 4301 	ubfx	r3, r3, #16, #2
    d49a:	429c      	cmp	r4, r3
    d49c:	d107      	bne.n	d4ae <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d49e:	2100      	movs	r1, #0
    d4a0:	4658      	mov	r0, fp
    d4a2:	f7ff fd07 	bl	ceb4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    d4a6:	4621      	mov	r1, r4
    d4a8:	4658      	mov	r0, fp
    d4aa:	f7ff fd03 	bl	ceb4 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    d4ae:	fa0a f00b 	lsl.w	r0, sl, fp
    d4b2:	6230      	str	r0, [r6, #32]
}
    d4b4:	e7b5      	b.n	d422 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    d4b6:	2c02      	cmp	r4, #2
    d4b8:	d10c      	bne.n	d4d4 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d4ba:	2103      	movs	r1, #3
    d4bc:	4658      	mov	r0, fp
    d4be:	f7ff fcf9 	bl	ceb4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d4c2:	f008 0305 	and.w	r3, r8, #5
    d4c6:	2b01      	cmp	r3, #1
    d4c8:	d1f1      	bne.n	d4ae <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    d4ca:	4641      	mov	r1, r8
    d4cc:	4658      	mov	r0, fp
    d4ce:	f7ff fd0b 	bl	cee8 <call_handler>
    d4d2:	e7ec      	b.n	d4ae <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d4d4:	2102      	movs	r1, #2
    d4d6:	4658      	mov	r0, fp
    d4d8:	9201      	str	r2, [sp, #4]
    d4da:	f7ff fceb 	bl	ceb4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d4de:	9a01      	ldr	r2, [sp, #4]
    d4e0:	2a03      	cmp	r2, #3
    d4e2:	d0f2      	beq.n	d4ca <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    d4e4:	2c03      	cmp	r4, #3
    d4e6:	d1e2      	bne.n	d4ae <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    d4e8:	428a      	cmp	r2, r1
    d4ea:	e7ed      	b.n	d4c8 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    d4ec:	fa95 f3a5 	rbit	r3, r5
    d4f0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    d4f4:	fa04 f203 	lsl.w	r2, r4, r3
    d4f8:	009b      	lsls	r3, r3, #2
    d4fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d4fe:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d502:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    d506:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    d50a:	f3c0 2004 	ubfx	r0, r0, #8, #5
    d50e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    d512:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    d516:	f7ff fce7 	bl	cee8 <call_handler>
    d51a:	e78e      	b.n	d43a <nrfx_gpiote_irq_handler+0x5e>
    d51c:	40031100 	.word	0x40031100
    d520:	40031000 	.word	0x40031000
    d524:	40031120 	.word	0x40031120
    d528:	40842500 	.word	0x40842500
    d52c:	2000c5c0 	.word	0x2000c5c0

0000d530 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    d530:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d532:	4c08      	ldr	r4, [pc, #32]	; (d554 <nrfx_ipc_init+0x24>)
{
    d534:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d536:	7923      	ldrb	r3, [r4, #4]
{
    d538:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d53a:	b943      	cbnz	r3, d54e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    d53c:	202a      	movs	r0, #42	; 0x2a
    d53e:	f7fc fc91 	bl	9e64 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d542:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    d544:	4804      	ldr	r0, [pc, #16]	; (d558 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d546:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    d548:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    d54a:	60a5      	str	r5, [r4, #8]
}
    d54c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    d54e:	4803      	ldr	r0, [pc, #12]	; (d55c <nrfx_ipc_init+0x2c>)
    d550:	e7fc      	b.n	d54c <nrfx_ipc_init+0x1c>
    d552:	bf00      	nop
    d554:	2000cb78 	.word	0x2000cb78
    d558:	0bad0000 	.word	0x0bad0000
    d55c:	0bad000c 	.word	0x0bad000c

0000d560 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d560:	2300      	movs	r3, #0
{
    d562:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    d564:	4a0d      	ldr	r2, [pc, #52]	; (d59c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    d566:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    d56a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d56e:	3301      	adds	r3, #1
    d570:	2b08      	cmp	r3, #8
    d572:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    d576:	d1f6      	bne.n	d566 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    d578:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    d57a:	4a08      	ldr	r2, [pc, #32]	; (d59c <nrfx_ipc_config_load+0x3c>)
    d57c:	f100 011c 	add.w	r1, r0, #28
    d580:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    d584:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
    d588:	3301      	adds	r3, #1
    d58a:	2b08      	cmp	r3, #8
    d58c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    d590:	d1f6      	bne.n	d580 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    d592:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
    d594:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d598:	bd30      	pop	{r4, r5, pc}
    d59a:	bf00      	nop
    d59c:	4002a000 	.word	0x4002a000

0000d5a0 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
    d5a0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    d5a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->SEND_CNF[index] = channels_mask;
    d5a6:	4a13      	ldr	r2, [pc, #76]	; (d5f4 <nrfx_ipc_uninit+0x54>)
    d5a8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    d5ac:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    d5b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    d5b4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    d5b8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    d5bc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    d5c0:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    d5c4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
    d5c8:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
    d5cc:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
    d5d0:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
    d5d4:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
    d5d8:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
    d5dc:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
    d5e0:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    d5e4:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
    d5e8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    d5ec:	4a02      	ldr	r2, [pc, #8]	; (d5f8 <nrfx_ipc_uninit+0x58>)
    d5ee:	7113      	strb	r3, [r2, #4]
}
    d5f0:	4770      	bx	lr
    d5f2:	bf00      	nop
    d5f4:	4002a000 	.word	0x4002a000
    d5f8:	2000cb78 	.word	0x2000cb78

0000d5fc <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    d5fc:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    d5fe:	4a02      	ldr	r2, [pc, #8]	; (d608 <nrfx_ipc_receive_event_enable+0xc>)
    d600:	4083      	lsls	r3, r0
    d602:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d606:	4770      	bx	lr
    d608:	4002a000 	.word	0x4002a000

0000d60c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    d60c:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    d60e:	4a02      	ldr	r2, [pc, #8]	; (d618 <nrfx_ipc_receive_event_disable+0xc>)
    d610:	4083      	lsls	r3, r0
    d612:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    d616:	4770      	bx	lr
    d618:	4002a000 	.word	0x4002a000

0000d61c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    d61e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d620:	2700      	movs	r7, #0
    return p_reg->INTPEND;
    d622:	4b0b      	ldr	r3, [pc, #44]	; (d650 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
    d624:	4d0b      	ldr	r5, [pc, #44]	; (d654 <nrfx_ipc_irq_handler+0x38>)
    d626:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
    d62a:	b904      	cbnz	r4, d62e <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    d62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
    d62e:	fa94 f0a4 	rbit	r0, r4
    d632:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    d636:	fa06 f300 	lsl.w	r3, r6, r0
    d63a:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d63e:	4b06      	ldr	r3, [pc, #24]	; (d658 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    d640:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d642:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
    d644:	682b      	ldr	r3, [r5, #0]
    d646:	2b00      	cmp	r3, #0
    d648:	d0ef      	beq.n	d62a <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    d64a:	68a9      	ldr	r1, [r5, #8]
    d64c:	4798      	blx	r3
    d64e:	e7ec      	b.n	d62a <nrfx_ipc_irq_handler+0xe>
    d650:	4002a000 	.word	0x4002a000
    d654:	2000cb78 	.word	0x2000cb78
    d658:	4002a100 	.word	0x4002a100

0000d65c <rpc_handle_data_message>:
    d65c:	b570      	push	{r4, r5, r6, lr}
    d65e:	6803      	ldr	r3, [r0, #0]
    d660:	4604      	mov	r4, r0
    d662:	b2db      	uxtb	r3, r3
    d664:	2b04      	cmp	r3, #4
    d666:	d009      	beq.n	d67c <rpc_handle_data_message+0x20>
    d668:	2b03      	cmp	r3, #3
    d66a:	d015      	beq.n	d698 <rpc_handle_data_message+0x3c>
    d66c:	2b06      	cmp	r3, #6
    d66e:	d015      	beq.n	d69c <rpc_handle_data_message+0x40>
    d670:	2b07      	cmp	r3, #7
    d672:	d015      	beq.n	d6a0 <rpc_handle_data_message+0x44>
    d674:	6880      	ldr	r0, [r0, #8]
    d676:	b9a8      	cbnz	r0, d6a4 <rpc_handle_data_message+0x48>
    d678:	2000      	movs	r0, #0
    d67a:	bd70      	pop	{r4, r5, r6, pc}
    d67c:	2300      	movs	r3, #0
    d67e:	4a0b      	ldr	r2, [pc, #44]	; (d6ac <rpc_handle_data_message+0x50>)
    d680:	4620      	mov	r0, r4
    d682:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d686:	685d      	ldr	r5, [r3, #4]
    d688:	f003 feb4 	bl	113f4 <rpc_client_msg_from_rpc_msg_get>
    d68c:	6821      	ldr	r1, [r4, #0]
    d68e:	462b      	mov	r3, r5
    d690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d694:	0c09      	lsrs	r1, r1, #16
    d696:	4718      	bx	r3
    d698:	2301      	movs	r3, #1
    d69a:	e7f0      	b.n	d67e <rpc_handle_data_message+0x22>
    d69c:	2302      	movs	r3, #2
    d69e:	e7ee      	b.n	d67e <rpc_handle_data_message+0x22>
    d6a0:	2303      	movs	r3, #3
    d6a2:	e7ec      	b.n	d67e <rpc_handle_data_message+0x22>
    d6a4:	f000 f816 	bl	d6d4 <rpc_transport_msg_data_rx_free>
    d6a8:	e7e6      	b.n	d678 <rpc_handle_data_message+0x1c>
    d6aa:	bf00      	nop
    d6ac:	00012564 	.word	0x00012564

0000d6b0 <rpc_transport_init>:
    d6b0:	4b01      	ldr	r3, [pc, #4]	; (d6b8 <rpc_transport_init+0x8>)
    d6b2:	699b      	ldr	r3, [r3, #24]
    d6b4:	4718      	bx	r3
    d6b6:	bf00      	nop
    d6b8:	2000c61c 	.word	0x2000c61c

0000d6bc <rpc_transport_msg_alloc>:
    d6bc:	4b01      	ldr	r3, [pc, #4]	; (d6c4 <rpc_transport_msg_alloc+0x8>)
    d6be:	681b      	ldr	r3, [r3, #0]
    d6c0:	4718      	bx	r3
    d6c2:	bf00      	nop
    d6c4:	2000c61c 	.word	0x2000c61c

0000d6c8 <rpc_transport_msg_rx_free>:
    d6c8:	4b01      	ldr	r3, [pc, #4]	; (d6d0 <rpc_transport_msg_rx_free+0x8>)
    d6ca:	68db      	ldr	r3, [r3, #12]
    d6cc:	4718      	bx	r3
    d6ce:	bf00      	nop
    d6d0:	2000c61c 	.word	0x2000c61c

0000d6d4 <rpc_transport_msg_data_rx_free>:
    d6d4:	4b01      	ldr	r3, [pc, #4]	; (d6dc <rpc_transport_msg_data_rx_free+0x8>)
    d6d6:	695b      	ldr	r3, [r3, #20]
    d6d8:	4718      	bx	r3
    d6da:	bf00      	nop
    d6dc:	2000c61c 	.word	0x2000c61c

0000d6e0 <rpc_transport_msg_send>:
    d6e0:	4b01      	ldr	r3, [pc, #4]	; (d6e8 <rpc_transport_msg_send+0x8>)
    d6e2:	689b      	ldr	r3, [r3, #8]
    d6e4:	4718      	bx	r3
    d6e6:	bf00      	nop
    d6e8:	2000c61c 	.word	0x2000c61c

0000d6ec <rpc_transport_ipc_msg_data_tx_size>:
    d6ec:	4b01      	ldr	r3, [pc, #4]	; (d6f4 <rpc_transport_ipc_msg_data_tx_size+0x8>)
    d6ee:	681b      	ldr	r3, [r3, #0]
    d6f0:	68d8      	ldr	r0, [r3, #12]
    d6f2:	4770      	bx	lr
    d6f4:	2000cb84 	.word	0x2000cb84

0000d6f8 <rpc_transport_ipc_msg_rx_free>:
    d6f8:	2300      	movs	r3, #0
    d6fa:	b530      	push	{r4, r5, lr}
    d6fc:	4910      	ldr	r1, [pc, #64]	; (d740 <rpc_transport_ipc_msg_rx_free+0x48>)
    d6fe:	680a      	ldr	r2, [r1, #0]
    d700:	6814      	ldr	r4, [r2, #0]
    d702:	42a3      	cmp	r3, r4
    d704:	d10b      	bne.n	d71e <rpc_transport_ipc_msg_rx_free+0x26>
    d706:	2300      	movs	r3, #0
    d708:	684a      	ldr	r2, [r1, #4]
    d70a:	6811      	ldr	r1, [r2, #0]
    d70c:	428b      	cmp	r3, r1
    d70e:	d015      	beq.n	d73c <rpc_transport_ipc_msg_rx_free+0x44>
    d710:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    d714:	68a4      	ldr	r4, [r4, #8]
    d716:	42a0      	cmp	r0, r4
    d718:	d008      	beq.n	d72c <rpc_transport_ipc_msg_rx_free+0x34>
    d71a:	3301      	adds	r3, #1
    d71c:	e7f6      	b.n	d70c <rpc_transport_ipc_msg_rx_free+0x14>
    d71e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    d722:	68ad      	ldr	r5, [r5, #8]
    d724:	42a8      	cmp	r0, r5
    d726:	d001      	beq.n	d72c <rpc_transport_ipc_msg_rx_free+0x34>
    d728:	3301      	adds	r3, #1
    d72a:	e7ea      	b.n	d702 <rpc_transport_ipc_msg_rx_free+0xa>
    d72c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    d730:	6853      	ldr	r3, [r2, #4]
    d732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d736:	f043 0303 	orr.w	r3, r3, #3
    d73a:	6053      	str	r3, [r2, #4]
    d73c:	bd30      	pop	{r4, r5, pc}
    d73e:	bf00      	nop
    d740:	2000cba4 	.word	0x2000cba4

0000d744 <rpc_transport_ipc_msg_tx_free>:
    d744:	2200      	movs	r2, #0
    d746:	b530      	push	{r4, r5, lr}
    d748:	4b0b      	ldr	r3, [pc, #44]	; (d778 <rpc_transport_ipc_msg_tx_free+0x34>)
    d74a:	6819      	ldr	r1, [r3, #0]
    d74c:	680c      	ldr	r4, [r1, #0]
    d74e:	4294      	cmp	r4, r2
    d750:	d00f      	beq.n	d772 <rpc_transport_ipc_msg_tx_free+0x2e>
    d752:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    d756:	689d      	ldr	r5, [r3, #8]
    d758:	42a8      	cmp	r0, r5
    d75a:	d10b      	bne.n	d774 <rpc_transport_ipc_msg_tx_free+0x30>
    d75c:	f04f 0203 	mov.w	r2, #3
    d760:	3304      	adds	r3, #4
    d762:	e8d3 1fcf 	ldaexb	r1, [r3]
    d766:	2900      	cmp	r1, #0
    d768:	d103      	bne.n	d772 <rpc_transport_ipc_msg_tx_free+0x2e>
    d76a:	e8c3 2fc0 	stlexb	r0, r2, [r3]
    d76e:	2800      	cmp	r0, #0
    d770:	d1f7      	bne.n	d762 <rpc_transport_ipc_msg_tx_free+0x1e>
    d772:	bd30      	pop	{r4, r5, pc}
    d774:	3201      	adds	r2, #1
    d776:	e7ea      	b.n	d74e <rpc_transport_ipc_msg_tx_free+0xa>
    d778:	2000cb9c 	.word	0x2000cb9c

0000d77c <handle_modem_rpc_msg>:
    d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d780:	2500      	movs	r5, #0
    d782:	4606      	mov	r6, r0
    d784:	460f      	mov	r7, r1
    d786:	4628      	mov	r0, r5
    d788:	f8df 8064 	ldr.w	r8, [pc, #100]	; d7f0 <handle_modem_rpc_msg+0x74>
    d78c:	6833      	ldr	r3, [r6, #0]
    d78e:	42ab      	cmp	r3, r5
    d790:	d801      	bhi.n	d796 <handle_modem_rpc_msg+0x1a>
    d792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d796:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
    d79a:	6863      	ldr	r3, [r4, #4]
    d79c:	b2db      	uxtb	r3, r3
    d79e:	2b01      	cmp	r3, #1
    d7a0:	d117      	bne.n	d7d2 <handle_modem_rpc_msg+0x56>
    d7a2:	6862      	ldr	r2, [r4, #4]
    d7a4:	f8b8 3000 	ldrh.w	r3, [r8]
    d7a8:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
    d7ac:	d111      	bne.n	d7d2 <handle_modem_rpc_msg+0x56>
    d7ae:	2f02      	cmp	r7, #2
    d7b0:	68a0      	ldr	r0, [r4, #8]
    d7b2:	d110      	bne.n	d7d6 <handle_modem_rpc_msg+0x5a>
    d7b4:	f7ff ff52 	bl	d65c <rpc_handle_data_message>
    d7b8:	b990      	cbnz	r0, d7e0 <handle_modem_rpc_msg+0x64>
    d7ba:	6863      	ldr	r3, [r4, #4]
    d7bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d7c0:	f043 0303 	orr.w	r3, r3, #3
    d7c4:	6063      	str	r3, [r4, #4]
    d7c6:	2001      	movs	r0, #1
    d7c8:	f8b8 3000 	ldrh.w	r3, [r8]
    d7cc:	3301      	adds	r3, #1
    d7ce:	f8a8 3000 	strh.w	r3, [r8]
    d7d2:	3501      	adds	r5, #1
    d7d4:	e7da      	b.n	d78c <handle_modem_rpc_msg+0x10>
    d7d6:	6801      	ldr	r1, [r0, #0]
    d7d8:	0c09      	lsrs	r1, r1, #16
    d7da:	f003 fdb8 	bl	1134e <rpc_handle_ctrl_message>
    d7de:	e7eb      	b.n	d7b8 <handle_modem_rpc_msg+0x3c>
    d7e0:	2801      	cmp	r0, #1
    d7e2:	d1f0      	bne.n	d7c6 <handle_modem_rpc_msg+0x4a>
    d7e4:	6863      	ldr	r3, [r4, #4]
    d7e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d7ea:	f043 0302 	orr.w	r3, r3, #2
    d7ee:	e7e9      	b.n	d7c4 <handle_modem_rpc_msg+0x48>
    d7f0:	2000cf9c 	.word	0x2000cf9c

0000d7f4 <rpc_message_handler>:
    d7f4:	b538      	push	{r3, r4, r5, lr}
    d7f6:	4d07      	ldr	r5, [pc, #28]	; (d814 <rpc_message_handler+0x20>)
    d7f8:	2101      	movs	r1, #1
    d7fa:	6828      	ldr	r0, [r5, #0]
    d7fc:	f7ff ffbe 	bl	d77c <handle_modem_rpc_msg>
    d800:	2102      	movs	r1, #2
    d802:	4604      	mov	r4, r0
    d804:	6868      	ldr	r0, [r5, #4]
    d806:	f7ff ffb9 	bl	d77c <handle_modem_rpc_msg>
    d80a:	2800      	cmp	r0, #0
    d80c:	d1f4      	bne.n	d7f8 <rpc_message_handler+0x4>
    d80e:	2c00      	cmp	r4, #0
    d810:	d1f2      	bne.n	d7f8 <rpc_message_handler+0x4>
    d812:	bd38      	pop	{r3, r4, r5, pc}
    d814:	2000cba4 	.word	0x2000cba4

0000d818 <ipc_irq_handler>:
    d818:	b570      	push	{r4, r5, r6, lr}
    d81a:	2807      	cmp	r0, #7
    d81c:	d868      	bhi.n	d8f0 <ipc_irq_handler+0xd8>
    d81e:	e8df f000 	tbb	[pc, r0]
    d822:	670b      	.short	0x670b
    d824:	674b674f 	.word	0x674b674f
    d828:	0440      	.short	0x0440
    d82a:	f000 ffa3 	bl	e774 <ipc_trace_handler>
    d82e:	2003      	movs	r0, #3
    d830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d834:	f7fd bf88 	b.w	b748 <nrf_modem_os_event_notify>
    d838:	2003      	movs	r0, #3
    d83a:	4b2e      	ldr	r3, [pc, #184]	; (d8f4 <ipc_irq_handler+0xdc>)
    d83c:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
    d840:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
    d844:	4b2c      	ldr	r3, [pc, #176]	; (d8f8 <ipc_irq_handler+0xe0>)
    d846:	781d      	ldrb	r5, [r3, #0]
    d848:	7018      	strb	r0, [r3, #0]
    d84a:	f000 ff69 	bl	e720 <nrf_modem_state_set>
    d84e:	4b2b      	ldr	r3, [pc, #172]	; (d8fc <ipc_irq_handler+0xe4>)
    d850:	b2ed      	uxtb	r5, r5
    d852:	6818      	ldr	r0, [r3, #0]
    d854:	f003 fa79 	bl	10d4a <nrf_modem_os_sem_give>
    d858:	2d01      	cmp	r5, #1
    d85a:	d11c      	bne.n	d896 <ipc_irq_handler+0x7e>
    d85c:	4b28      	ldr	r3, [pc, #160]	; (d900 <ipc_irq_handler+0xe8>)
    d85e:	429c      	cmp	r4, r3
    d860:	d010      	beq.n	d884 <ipc_irq_handler+0x6c>
    d862:	d809      	bhi.n	d878 <ipc_irq_handler+0x60>
    d864:	3b02      	subs	r3, #2
    d866:	429c      	cmp	r4, r3
    d868:	d00f      	beq.n	d88a <ipc_irq_handler+0x72>
    d86a:	3301      	adds	r3, #1
    d86c:	429c      	cmp	r4, r3
    d86e:	d00f      	beq.n	d890 <ipc_irq_handler+0x78>
    d870:	4b24      	ldr	r3, [pc, #144]	; (d904 <ipc_irq_handler+0xec>)
    d872:	601c      	str	r4, [r3, #0]
    d874:	2000      	movs	r0, #0
    d876:	e7db      	b.n	d830 <ipc_irq_handler+0x18>
    d878:	4b23      	ldr	r3, [pc, #140]	; (d908 <ipc_irq_handler+0xf0>)
    d87a:	429c      	cmp	r4, r3
    d87c:	d1f8      	bne.n	d870 <ipc_irq_handler+0x58>
    d87e:	f06f 040c 	mvn.w	r4, #12
    d882:	e7f5      	b.n	d870 <ipc_irq_handler+0x58>
    d884:	f06f 040b 	mvn.w	r4, #11
    d888:	e7f2      	b.n	d870 <ipc_irq_handler+0x58>
    d88a:	f06f 0415 	mvn.w	r4, #21
    d88e:	e7ef      	b.n	d870 <ipc_irq_handler+0x58>
    d890:	f06f 0485 	mvn.w	r4, #133	; 0x85
    d894:	e7ec      	b.n	d870 <ipc_irq_handler+0x58>
    d896:	4631      	mov	r1, r6
    d898:	f3c4 000b 	ubfx	r0, r4, #0, #12
    d89c:	f000 ff34 	bl	e708 <nrf_modem_fault_handler_internal>
    d8a0:	e7e8      	b.n	d874 <ipc_irq_handler+0x5c>
    d8a2:	2202      	movs	r2, #2
    d8a4:	4b14      	ldr	r3, [pc, #80]	; (d8f8 <ipc_irq_handler+0xe0>)
    d8a6:	2000      	movs	r0, #0
    d8a8:	701a      	strb	r2, [r3, #0]
    d8aa:	f000 ff39 	bl	e720 <nrf_modem_state_set>
    d8ae:	4b13      	ldr	r3, [pc, #76]	; (d8fc <ipc_irq_handler+0xe4>)
    d8b0:	6818      	ldr	r0, [r3, #0]
    d8b2:	f003 fa4a 	bl	10d4a <nrf_modem_os_sem_give>
    d8b6:	e7dd      	b.n	d874 <ipc_irq_handler+0x5c>
    d8b8:	f7ff ff9c 	bl	d7f4 <rpc_message_handler>
    d8bc:	2002      	movs	r0, #2
    d8be:	e7b7      	b.n	d830 <ipc_irq_handler+0x18>
    d8c0:	4b0d      	ldr	r3, [pc, #52]	; (d8f8 <ipc_irq_handler+0xe0>)
    d8c2:	781a      	ldrb	r2, [r3, #0]
    d8c4:	2a01      	cmp	r2, #1
    d8c6:	b2d0      	uxtb	r0, r2
    d8c8:	d10e      	bne.n	d8e8 <ipc_irq_handler+0xd0>
    d8ca:	4a10      	ldr	r2, [pc, #64]	; (d90c <ipc_irq_handler+0xf4>)
    d8cc:	6811      	ldr	r1, [r2, #0]
    d8ce:	4a10      	ldr	r2, [pc, #64]	; (d910 <ipc_irq_handler+0xf8>)
    d8d0:	688c      	ldr	r4, [r1, #8]
    d8d2:	6054      	str	r4, [r2, #4]
    d8d4:	6849      	ldr	r1, [r1, #4]
    d8d6:	6011      	str	r1, [r2, #0]
    d8d8:	2200      	movs	r2, #0
    d8da:	701a      	strb	r2, [r3, #0]
    d8dc:	f000 ff20 	bl	e720 <nrf_modem_state_set>
    d8e0:	4b06      	ldr	r3, [pc, #24]	; (d8fc <ipc_irq_handler+0xe4>)
    d8e2:	6818      	ldr	r0, [r3, #0]
    d8e4:	f003 fa31 	bl	10d4a <nrf_modem_os_sem_give>
    d8e8:	f7ff ff84 	bl	d7f4 <rpc_message_handler>
    d8ec:	2001      	movs	r0, #1
    d8ee:	e79f      	b.n	d830 <ipc_irq_handler+0x18>
    d8f0:	bd70      	pop	{r4, r5, r6, pc}
    d8f2:	bf00      	nop
    d8f4:	4002a000 	.word	0x4002a000
    d8f8:	2000d44e 	.word	0x2000d44e
    d8fc:	2000cb8c 	.word	0x2000cb8c
    d900:	00010022 	.word	0x00010022
    d904:	2000cba0 	.word	0x2000cba0
    d908:	00013032 	.word	0x00013032
    d90c:	2000cb88 	.word	0x2000cb88
    d910:	2000cba4 	.word	0x2000cba4

0000d914 <rpc_transport_ipc_data_msg_send>:
    d914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d916:	4b16      	ldr	r3, [pc, #88]	; (d970 <rpc_transport_ipc_data_msg_send+0x5c>)
    d918:	6842      	ldr	r2, [r0, #4]
    d91a:	681b      	ldr	r3, [r3, #0]
    d91c:	4c15      	ldr	r4, [pc, #84]	; (d974 <rpc_transport_ipc_data_msg_send+0x60>)
    d91e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    d922:	f042 0202 	orr.w	r2, r2, #2
    d926:	1ac3      	subs	r3, r0, r3
    d928:	6042      	str	r2, [r0, #4]
    d92a:	6821      	ldr	r1, [r4, #0]
    d92c:	4a12      	ldr	r2, [pc, #72]	; (d978 <rpc_transport_ipc_data_msg_send+0x64>)
    d92e:	f3c3 1389 	ubfx	r3, r3, #6, #10
    d932:	e8d2 5fdf 	ldaexh	r5, [r2]
    d936:	1c6e      	adds	r6, r5, #1
    d938:	e8c2 6fd7 	stlexh	r7, r6, [r2]
    d93c:	2f00      	cmp	r7, #0
    d93e:	d1f8      	bne.n	d932 <rpc_transport_ipc_data_msg_send+0x1e>
    d940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    d944:	684a      	ldr	r2, [r1, #4]
    d946:	b292      	uxth	r2, r2
    d948:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d94c:	604a      	str	r2, [r1, #4]
    d94e:	6822      	ldr	r2, [r4, #0]
    d950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d954:	6098      	str	r0, [r3, #8]
    d956:	685a      	ldr	r2, [r3, #4]
    d958:	2003      	movs	r0, #3
    d95a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    d95e:	f042 0201 	orr.w	r2, r2, #1
    d962:	605a      	str	r2, [r3, #4]
    d964:	f003 f9e7 	bl	10d36 <nrf_modem_os_busywait>
    d968:	2201      	movs	r2, #1
    d96a:	4b04      	ldr	r3, [pc, #16]	; (d97c <rpc_transport_ipc_data_msg_send+0x68>)
    d96c:	60da      	str	r2, [r3, #12]
    d96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d970:	2000cb94 	.word	0x2000cb94
    d974:	2000cb9c 	.word	0x2000cb9c
    d978:	2000cf9e 	.word	0x2000cf9e
    d97c:	4002a000 	.word	0x4002a000

0000d980 <rpc_transport_ipc_ctrl_msg_alloc>:
    d980:	230a      	movs	r3, #10
    d982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d984:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    d988:	4e0c      	ldr	r6, [pc, #48]	; (d9bc <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
    d98a:	4f0d      	ldr	r7, [pc, #52]	; (d9c0 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
    d98c:	9301      	str	r3, [sp, #4]
    d98e:	6831      	ldr	r1, [r6, #0]
    d990:	6838      	ldr	r0, [r7, #0]
    d992:	f003 fd0e 	bl	113b2 <rpc_transport_ipc_msg_alloc>
    d996:	4604      	mov	r4, r0
    d998:	b940      	cbnz	r0, d9ac <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
    d99a:	f003 f9d4 	bl	10d46 <nrf_modem_os_is_in_isr>
    d99e:	b940      	cbnz	r0, d9b2 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
    d9a0:	2001      	movs	r0, #1
    d9a2:	a901      	add	r1, sp, #4
    d9a4:	f7fd fdf4 	bl	b590 <nrf_modem_os_timedwait>
    d9a8:	306e      	adds	r0, #110	; 0x6e
    d9aa:	d1f0      	bne.n	d98e <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    d9ac:	4620      	mov	r0, r4
    d9ae:	b003      	add	sp, #12
    d9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9b2:	9801      	ldr	r0, [sp, #4]
    d9b4:	4368      	muls	r0, r5
    d9b6:	f003 f9be 	bl	10d36 <nrf_modem_os_busywait>
    d9ba:	e7e8      	b.n	d98e <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    d9bc:	2000cb90 	.word	0x2000cb90
    d9c0:	2000cb98 	.word	0x2000cb98

0000d9c4 <rpc_transport_ipc_data_msg_alloc>:
    d9c4:	4b05      	ldr	r3, [pc, #20]	; (d9dc <rpc_transport_ipc_data_msg_alloc+0x18>)
    d9c6:	781b      	ldrb	r3, [r3, #0]
    d9c8:	b92b      	cbnz	r3, d9d6 <rpc_transport_ipc_data_msg_alloc+0x12>
    d9ca:	4b05      	ldr	r3, [pc, #20]	; (d9e0 <rpc_transport_ipc_data_msg_alloc+0x1c>)
    d9cc:	6819      	ldr	r1, [r3, #0]
    d9ce:	4b05      	ldr	r3, [pc, #20]	; (d9e4 <rpc_transport_ipc_data_msg_alloc+0x20>)
    d9d0:	6818      	ldr	r0, [r3, #0]
    d9d2:	f003 bcee 	b.w	113b2 <rpc_transport_ipc_msg_alloc>
    d9d6:	2000      	movs	r0, #0
    d9d8:	4770      	bx	lr
    d9da:	bf00      	nop
    d9dc:	2000d44d 	.word	0x2000d44d
    d9e0:	2000cb94 	.word	0x2000cb94
    d9e4:	2000cb9c 	.word	0x2000cb9c

0000d9e8 <rpc_transport_ipc_init>:
    d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9ec:	b095      	sub	sp, #84	; 0x54
    d9ee:	2238      	movs	r2, #56	; 0x38
    d9f0:	2100      	movs	r1, #0
    d9f2:	4606      	mov	r6, r0
    d9f4:	a803      	add	r0, sp, #12
    d9f6:	f004 f97a 	bl	11cee <memset>
    d9fa:	2302      	movs	r3, #2
    d9fc:	9304      	str	r3, [sp, #16]
    d9fe:	2308      	movs	r3, #8
    da00:	9306      	str	r3, [sp, #24]
    da02:	2320      	movs	r3, #32
    da04:	9308      	str	r3, [sp, #32]
    da06:	2304      	movs	r3, #4
    da08:	930d      	str	r3, [sp, #52]	; 0x34
    da0a:	2310      	movs	r3, #16
    da0c:	2540      	movs	r5, #64	; 0x40
    da0e:	930f      	str	r3, [sp, #60]	; 0x3c
    da10:	2380      	movs	r3, #128	; 0x80
    da12:	2201      	movs	r2, #1
    da14:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
    da18:	23d5      	movs	r3, #213	; 0xd5
    da1a:	2100      	movs	r1, #0
    da1c:	4855      	ldr	r0, [pc, #340]	; (db74 <rpc_transport_ipc_init+0x18c>)
    da1e:	920b      	str	r2, [sp, #44]	; 0x2c
    da20:	9313      	str	r3, [sp, #76]	; 0x4c
    da22:	f7fd fe77 	bl	b714 <nrf_modem_os_sem_init>
    da26:	4605      	mov	r5, r0
    da28:	2800      	cmp	r0, #0
    da2a:	f040 809f 	bne.w	db6c <rpc_transport_ipc_init+0x184>
    da2e:	4602      	mov	r2, r0
    da30:	4951      	ldr	r1, [pc, #324]	; (db78 <rpc_transport_ipc_init+0x190>)
    da32:	7930      	ldrb	r0, [r6, #4]
    da34:	f7ff fd7c 	bl	d530 <nrfx_ipc_init>
    da38:	a803      	add	r0, sp, #12
    da3a:	f7ff fd91 	bl	d560 <nrfx_ipc_config_load>
    da3e:	6834      	ldr	r4, [r6, #0]
    da40:	6862      	ldr	r2, [r4, #4]
    da42:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
    da46:	f040 8089 	bne.w	db5c <rpc_transport_ipc_init+0x174>
    da4a:	6961      	ldr	r1, [r4, #20]
    da4c:	68e3      	ldr	r3, [r4, #12]
    da4e:	440b      	add	r3, r1
    da50:	69e1      	ldr	r1, [r4, #28]
    da52:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
    da56:	440b      	add	r3, r1
    da58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    da5c:	d87e      	bhi.n	db5c <rpc_transport_ipc_init+0x174>
    da5e:	6820      	ldr	r0, [r4, #0]
    da60:	4629      	mov	r1, r5
    da62:	f004 f944 	bl	11cee <memset>
    da66:	6833      	ldr	r3, [r6, #0]
    da68:	681c      	ldr	r4, [r3, #0]
    da6a:	f8d3 901c 	ldr.w	r9, [r3, #28]
    da6e:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    da72:	9201      	str	r2, [sp, #4]
    da74:	f104 0760 	add.w	r7, r4, #96	; 0x60
    da78:	4a40      	ldr	r2, [pc, #256]	; (db7c <rpc_transport_ipc_init+0x194>)
    da7a:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
    da7e:	f104 0b20 	add.w	fp, r4, #32
    da82:	f1b9 0f00 	cmp.w	r9, #0
    da86:	d15c      	bne.n	db42 <rpc_transport_ipc_init+0x15a>
    da88:	f8c2 b000 	str.w	fp, [r2]
    da8c:	2500      	movs	r5, #0
    da8e:	f04f 0a01 	mov.w	sl, #1
    da92:	7025      	strb	r5, [r4, #0]
    da94:	7065      	strb	r5, [r4, #1]
    da96:	f884 a002 	strb.w	sl, [r4, #2]
    da9a:	70e5      	strb	r5, [r4, #3]
    da9c:	6833      	ldr	r3, [r6, #0]
    da9e:	4640      	mov	r0, r8
    daa0:	691b      	ldr	r3, [r3, #16]
    daa2:	6063      	str	r3, [r4, #4]
    daa4:	6833      	ldr	r3, [r6, #0]
    daa6:	695b      	ldr	r3, [r3, #20]
    daa8:	f8c4 b014 	str.w	fp, [r4, #20]
    daac:	60a3      	str	r3, [r4, #8]
    daae:	4b34      	ldr	r3, [pc, #208]	; (db80 <rpc_transport_ipc_init+0x198>)
    dab0:	f8c4 9018 	str.w	r9, [r4, #24]
    dab4:	f8c3 8000 	str.w	r8, [r3]
    dab8:	4b32      	ldr	r3, [pc, #200]	; (db84 <rpc_transport_ipc_init+0x19c>)
    daba:	60e7      	str	r7, [r4, #12]
    dabc:	601f      	str	r7, [r3, #0]
    dabe:	2308      	movs	r3, #8
    dac0:	f8c4 8010 	str.w	r8, [r4, #16]
    dac4:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    dac8:	f888 5001 	strb.w	r5, [r8, #1]
    dacc:	f888 5002 	strb.w	r5, [r8, #2]
    dad0:	f888 5003 	strb.w	r5, [r8, #3]
    dad4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    dad8:	707d      	strb	r5, [r7, #1]
    dada:	70bd      	strb	r5, [r7, #2]
    dadc:	70fd      	strb	r5, [r7, #3]
    dade:	f003 fc50 	bl	11382 <rpc_list_preambles_init>
    dae2:	4638      	mov	r0, r7
    dae4:	f003 fc4d 	bl	11382 <rpc_list_preambles_init>
    dae8:	4b27      	ldr	r3, [pc, #156]	; (db88 <rpc_transport_ipc_init+0x1a0>)
    daea:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    daee:	601a      	str	r2, [r3, #0]
    daf0:	4b26      	ldr	r3, [pc, #152]	; (db8c <rpc_transport_ipc_init+0x1a4>)
    daf2:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
    daf6:	601a      	str	r2, [r3, #0]
    daf8:	6831      	ldr	r1, [r6, #0]
    dafa:	4b25      	ldr	r3, [pc, #148]	; (db90 <rpc_transport_ipc_init+0x1a8>)
    dafc:	6019      	str	r1, [r3, #0]
    dafe:	4b25      	ldr	r3, [pc, #148]	; (db94 <rpc_transport_ipc_init+0x1ac>)
    db00:	4925      	ldr	r1, [pc, #148]	; (db98 <rpc_transport_ipc_init+0x1b0>)
    db02:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    db06:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    db0a:	4b24      	ldr	r3, [pc, #144]	; (db9c <rpc_transport_ipc_init+0x1b4>)
    db0c:	4c24      	ldr	r4, [pc, #144]	; (dba0 <rpc_transport_ipc_init+0x1b8>)
    db0e:	801d      	strh	r5, [r3, #0]
    db10:	4b24      	ldr	r3, [pc, #144]	; (dba4 <rpc_transport_ipc_init+0x1bc>)
    db12:	6025      	str	r5, [r4, #0]
    db14:	801d      	strh	r5, [r3, #0]
    db16:	4b24      	ldr	r3, [pc, #144]	; (dba8 <rpc_transport_ipc_init+0x1c0>)
    db18:	f883 a000 	strb.w	sl, [r3]
    db1c:	4b23      	ldr	r3, [pc, #140]	; (dbac <rpc_transport_ipc_init+0x1c4>)
    db1e:	9502      	str	r5, [sp, #8]
    db20:	611d      	str	r5, [r3, #16]
    db22:	691b      	ldr	r3, [r3, #16]
    db24:	9302      	str	r3, [sp, #8]
    db26:	9b02      	ldr	r3, [sp, #8]
    db28:	4b12      	ldr	r3, [pc, #72]	; (db74 <rpc_transport_ipc_init+0x18c>)
    db2a:	6818      	ldr	r0, [r3, #0]
    db2c:	f003 f90f 	bl	10d4e <nrf_modem_os_sem_take>
    db30:	b9c8      	cbnz	r0, db66 <rpc_transport_ipc_init+0x17e>
    db32:	6824      	ldr	r4, [r4, #0]
    db34:	b9a4      	cbnz	r4, db60 <rpc_transport_ipc_init+0x178>
    db36:	4b1e      	ldr	r3, [pc, #120]	; (dbb0 <rpc_transport_ipc_init+0x1c8>)
    db38:	701c      	strb	r4, [r3, #0]
    db3a:	4620      	mov	r0, r4
    db3c:	b015      	add	sp, #84	; 0x54
    db3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db42:	699b      	ldr	r3, [r3, #24]
    db44:	f104 0940 	add.w	r9, r4, #64	; 0x40
    db48:	6463      	str	r3, [r4, #68]	; 0x44
    db4a:	6833      	ldr	r3, [r6, #0]
    db4c:	4648      	mov	r0, r9
    db4e:	69db      	ldr	r3, [r3, #28]
    db50:	f8c2 b000 	str.w	fp, [r2]
    db54:	6423      	str	r3, [r4, #64]	; 0x40
    db56:	f000 fdf1 	bl	e73c <ipc_trace_init>
    db5a:	e797      	b.n	da8c <rpc_transport_ipc_init+0xa4>
    db5c:	f06f 0415 	mvn.w	r4, #21
    db60:	f7ff fd1e 	bl	d5a0 <nrfx_ipc_uninit>
    db64:	e7e9      	b.n	db3a <rpc_transport_ipc_init+0x152>
    db66:	f06f 0473 	mvn.w	r4, #115	; 0x73
    db6a:	e7f9      	b.n	db60 <rpc_transport_ipc_init+0x178>
    db6c:	f06f 042d 	mvn.w	r4, #45	; 0x2d
    db70:	e7e3      	b.n	db3a <rpc_transport_ipc_init+0x152>
    db72:	bf00      	nop
    db74:	2000cb8c 	.word	0x2000cb8c
    db78:	0000d819 	.word	0x0000d819
    db7c:	2000cb88 	.word	0x2000cb88
    db80:	2000cb9c 	.word	0x2000cb9c
    db84:	2000cb98 	.word	0x2000cb98
    db88:	2000cb94 	.word	0x2000cb94
    db8c:	2000cb90 	.word	0x2000cb90
    db90:	2000cb84 	.word	0x2000cb84
    db94:	4002a000 	.word	0x4002a000
    db98:	000249f0 	.word	0x000249f0
    db9c:	2000cf9e 	.word	0x2000cf9e
    dba0:	2000cba0 	.word	0x2000cba0
    dba4:	2000cf9c 	.word	0x2000cf9c
    dba8:	2000d44e 	.word	0x2000d44e
    dbac:	40005600 	.word	0x40005600
    dbb0:	2000d44d 	.word	0x2000d44d

0000dbb4 <rpc_transport_ipc_ctrl_msg_send>:
    dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbb6:	4b16      	ldr	r3, [pc, #88]	; (dc10 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
    dbb8:	6842      	ldr	r2, [r0, #4]
    dbba:	681b      	ldr	r3, [r3, #0]
    dbbc:	4c15      	ldr	r4, [pc, #84]	; (dc14 <rpc_transport_ipc_ctrl_msg_send+0x60>)
    dbbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    dbc2:	f042 0201 	orr.w	r2, r2, #1
    dbc6:	1ac3      	subs	r3, r0, r3
    dbc8:	6042      	str	r2, [r0, #4]
    dbca:	6821      	ldr	r1, [r4, #0]
    dbcc:	4a12      	ldr	r2, [pc, #72]	; (dc18 <rpc_transport_ipc_ctrl_msg_send+0x64>)
    dbce:	f3c3 1389 	ubfx	r3, r3, #6, #10
    dbd2:	e8d2 5fdf 	ldaexh	r5, [r2]
    dbd6:	1c6e      	adds	r6, r5, #1
    dbd8:	e8c2 6fd7 	stlexh	r7, r6, [r2]
    dbdc:	2f00      	cmp	r7, #0
    dbde:	d1f8      	bne.n	dbd2 <rpc_transport_ipc_ctrl_msg_send+0x1e>
    dbe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    dbe4:	684a      	ldr	r2, [r1, #4]
    dbe6:	b292      	uxth	r2, r2
    dbe8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    dbec:	604a      	str	r2, [r1, #4]
    dbee:	6822      	ldr	r2, [r4, #0]
    dbf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    dbf4:	6098      	str	r0, [r3, #8]
    dbf6:	685a      	ldr	r2, [r3, #4]
    dbf8:	2003      	movs	r0, #3
    dbfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    dbfe:	f042 0201 	orr.w	r2, r2, #1
    dc02:	605a      	str	r2, [r3, #4]
    dc04:	f003 f897 	bl	10d36 <nrf_modem_os_busywait>
    dc08:	2201      	movs	r2, #1
    dc0a:	4b04      	ldr	r3, [pc, #16]	; (dc1c <rpc_transport_ipc_ctrl_msg_send+0x68>)
    dc0c:	605a      	str	r2, [r3, #4]
    dc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc10:	2000cb90 	.word	0x2000cb90
    dc14:	2000cb98 	.word	0x2000cb98
    dc18:	2000cf9e 	.word	0x2000cf9e
    dc1c:	4002a000 	.word	0x4002a000

0000dc20 <rpc_transport_ipc_request_shutdown>:
    dc20:	b510      	push	{r4, lr}
    dc22:	f7ff fead 	bl	d980 <rpc_transport_ipc_ctrl_msg_alloc>
    dc26:	2401      	movs	r4, #1
    dc28:	2200      	movs	r2, #0
    dc2a:	2103      	movs	r1, #3
    dc2c:	7004      	strb	r4, [r0, #0]
    dc2e:	7081      	strb	r1, [r0, #2]
    dc30:	7042      	strb	r2, [r0, #1]
    dc32:	70c2      	strb	r2, [r0, #3]
    dc34:	f7ff ffbe 	bl	dbb4 <rpc_transport_ipc_ctrl_msg_send>
    dc38:	4b05      	ldr	r3, [pc, #20]	; (dc50 <rpc_transport_ipc_request_shutdown+0x30>)
    dc3a:	701c      	strb	r4, [r3, #0]
    dc3c:	f003 fbb4 	bl	113a8 <rpc_transport_ipc_data_rx_suspend>
    dc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc44:	4b03      	ldr	r3, [pc, #12]	; (dc54 <rpc_transport_ipc_request_shutdown+0x34>)
    dc46:	f247 5130 	movw	r1, #30000	; 0x7530
    dc4a:	6818      	ldr	r0, [r3, #0]
    dc4c:	f003 b87f 	b.w	10d4e <nrf_modem_os_sem_take>
    dc50:	2000d44d 	.word	0x2000d44d
    dc54:	2000cb8c 	.word	0x2000cb8c

0000dc58 <rpc_transport_ipc_msg_data_rx_free>:
    dc58:	b510      	push	{r4, lr}
    dc5a:	4b0a      	ldr	r3, [pc, #40]	; (dc84 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
    dc5c:	4604      	mov	r4, r0
    dc5e:	781b      	ldrb	r3, [r3, #0]
    dc60:	2b03      	cmp	r3, #3
    dc62:	d00e      	beq.n	dc82 <rpc_transport_ipc_msg_data_rx_free+0x2a>
    dc64:	f7ff fe8c 	bl	d980 <rpc_transport_ipc_ctrl_msg_alloc>
    dc68:	b158      	cbz	r0, dc82 <rpc_transport_ipc_msg_data_rx_free+0x2a>
    dc6a:	2101      	movs	r1, #1
    dc6c:	2200      	movs	r2, #0
    dc6e:	7001      	strb	r1, [r0, #0]
    dc70:	2102      	movs	r1, #2
    dc72:	6084      	str	r4, [r0, #8]
    dc74:	7042      	strb	r2, [r0, #1]
    dc76:	7081      	strb	r1, [r0, #2]
    dc78:	70c2      	strb	r2, [r0, #3]
    dc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc7e:	f7ff bf99 	b.w	dbb4 <rpc_transport_ipc_ctrl_msg_send>
    dc82:	bd10      	pop	{r4, pc}
    dc84:	2000d44e 	.word	0x2000d44e

0000dc88 <sock_init>:
    dc88:	f44f 7250 	mov.w	r2, #832	; 0x340
    dc8c:	2100      	movs	r1, #0
    dc8e:	b508      	push	{r3, lr}
    dc90:	4808      	ldr	r0, [pc, #32]	; (dcb4 <sock_init+0x2c>)
    dc92:	f004 f82c 	bl	11cee <memset>
    dc96:	2300      	movs	r3, #0
    dc98:	4619      	mov	r1, r3
    dc9a:	4a07      	ldr	r2, [pc, #28]	; (dcb8 <sock_init+0x30>)
    dc9c:	4807      	ldr	r0, [pc, #28]	; (dcbc <sock_init+0x34>)
    dc9e:	7013      	strb	r3, [r2, #0]
    dca0:	4a04      	ldr	r2, [pc, #16]	; (dcb4 <sock_init+0x2c>)
    dca2:	3301      	adds	r3, #1
    dca4:	2b08      	cmp	r3, #8
    dca6:	e9c2 0100 	strd	r0, r1, [r2]
    dcaa:	6091      	str	r1, [r2, #8]
    dcac:	f102 0268 	add.w	r2, r2, #104	; 0x68
    dcb0:	d1f7      	bne.n	dca2 <sock_init+0x1a>
    dcb2:	bd08      	pop	{r3, pc}
    dcb4:	2000cbac 	.word	0x2000cbac
    dcb8:	2000d44f 	.word	0x2000d44f
    dcbc:	1badf11e 	.word	0x1badf11e

0000dcc0 <sock_find>:
    dcc0:	b530      	push	{r4, r5, lr}
    dcc2:	4602      	mov	r2, r0
    dcc4:	2300      	movs	r3, #0
    dcc6:	2568      	movs	r5, #104	; 0x68
    dcc8:	4905      	ldr	r1, [pc, #20]	; (dce0 <sock_find+0x20>)
    dcca:	fb05 f403 	mul.w	r4, r5, r3
    dcce:	1860      	adds	r0, r4, r1
    dcd0:	590c      	ldr	r4, [r1, r4]
    dcd2:	4294      	cmp	r4, r2
    dcd4:	d003      	beq.n	dcde <sock_find+0x1e>
    dcd6:	3301      	adds	r3, #1
    dcd8:	2b08      	cmp	r3, #8
    dcda:	d1f6      	bne.n	dcca <sock_find+0xa>
    dcdc:	2000      	movs	r0, #0
    dcde:	bd30      	pop	{r4, r5, pc}
    dce0:	2000cbac 	.word	0x2000cbac

0000dce4 <sock_flow_control_set>:
    dce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dce8:	1e02      	subs	r2, r0, #0
    dcea:	4c10      	ldr	r4, [pc, #64]	; (dd2c <sock_flow_control_set+0x48>)
    dcec:	bf18      	it	ne
    dcee:	2201      	movne	r2, #1
    dcf0:	4606      	mov	r6, r0
    dcf2:	2500      	movs	r5, #0
    dcf4:	46a0      	mov	r8, r4
    dcf6:	f04f 0968 	mov.w	r9, #104	; 0x68
    dcfa:	4b0d      	ldr	r3, [pc, #52]	; (dd30 <sock_flow_control_set+0x4c>)
    dcfc:	4f0d      	ldr	r7, [pc, #52]	; (dd34 <sock_flow_control_set+0x50>)
    dcfe:	701a      	strb	r2, [r3, #0]
    dd00:	6823      	ldr	r3, [r4, #0]
    dd02:	42bb      	cmp	r3, r7
    dd04:	d00a      	beq.n	dd1c <sock_flow_control_set+0x38>
    dd06:	fb09 8305 	mla	r3, r9, r5, r8
    dd0a:	7f1a      	ldrb	r2, [r3, #28]
    dd0c:	f366 1286 	bfi	r2, r6, #6, #1
    dd10:	771a      	strb	r2, [r3, #28]
    dd12:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dd14:	b113      	cbz	r3, dd1c <sock_flow_control_set+0x38>
    dd16:	4620      	mov	r0, r4
    dd18:	f003 fbd9 	bl	114ce <sock_pollcb>
    dd1c:	3501      	adds	r5, #1
    dd1e:	2d08      	cmp	r5, #8
    dd20:	f104 0468 	add.w	r4, r4, #104	; 0x68
    dd24:	d1ec      	bne.n	dd00 <sock_flow_control_set+0x1c>
    dd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd2a:	bf00      	nop
    dd2c:	2000cbac 	.word	0x2000cbac
    dd30:	2000d44f 	.word	0x2000d44f
    dd34:	1badf11e 	.word	0x1badf11e

0000dd38 <on_getaddrinfo_res>:
    dd38:	2301      	movs	r3, #1
    dd3a:	4a03      	ldr	r2, [pc, #12]	; (dd48 <on_getaddrinfo_res+0x10>)
    dd3c:	7013      	strb	r3, [r2, #0]
    dd3e:	4a03      	ldr	r2, [pc, #12]	; (dd4c <on_getaddrinfo_res+0x14>)
    dd40:	6010      	str	r0, [r2, #0]
    dd42:	4618      	mov	r0, r3
    dd44:	4770      	bx	lr
    dd46:	bf00      	nop
    dd48:	2000d450 	.word	0x2000d450
    dd4c:	2000ceec 	.word	0x2000ceec

0000dd50 <addrinfo_init>:
    dd50:	2201      	movs	r2, #1
    dd52:	b508      	push	{r3, lr}
    dd54:	4611      	mov	r1, r2
    dd56:	4804      	ldr	r0, [pc, #16]	; (dd68 <addrinfo_init+0x18>)
    dd58:	f7fd fcdc 	bl	b714 <nrf_modem_os_sem_init>
    dd5c:	2800      	cmp	r0, #0
    dd5e:	bf18      	it	ne
    dd60:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    dd64:	bd08      	pop	{r3, pc}
    dd66:	bf00      	nop
    dd68:	2000cef0 	.word	0x2000cef0

0000dd6c <rpc_ip_event_handler>:
    dd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd6e:	f248 030f 	movw	r3, #32783	; 0x800f
    dd72:	4299      	cmp	r1, r3
    dd74:	4606      	mov	r6, r0
    dd76:	460d      	mov	r5, r1
    dd78:	d03b      	beq.n	ddf2 <rpc_ip_event_handler+0x86>
    dd7a:	d822      	bhi.n	ddc2 <rpc_ip_event_handler+0x56>
    dd7c:	f248 030d 	movw	r3, #32781	; 0x800d
    dd80:	4299      	cmp	r1, r3
    dd82:	d02f      	beq.n	dde4 <rpc_ip_event_handler+0x78>
    dd84:	f248 030e 	movw	r3, #32782	; 0x800e
    dd88:	4299      	cmp	r1, r3
    dd8a:	d02f      	beq.n	ddec <rpc_ip_event_handler+0x80>
    dd8c:	6900      	ldr	r0, [r0, #16]
    dd8e:	f7ff ff97 	bl	dcc0 <sock_find>
    dd92:	4604      	mov	r4, r0
    dd94:	b308      	cbz	r0, ddda <rpc_ip_event_handler+0x6e>
    dd96:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    dd9a:	d91e      	bls.n	ddda <rpc_ip_event_handler+0x6e>
    dd9c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    dda0:	3d01      	subs	r5, #1
    dda2:	2d0b      	cmp	r5, #11
    dda4:	d819      	bhi.n	ddda <rpc_ip_event_handler+0x6e>
    dda6:	e8df f015 	tbh	[pc, r5, lsl #1]
    ddaa:	0090      	.short	0x0090
    ddac:	009400b3 	.word	0x009400b3
    ddb0:	00940094 	.word	0x00940094
    ddb4:	00ee00ee 	.word	0x00ee00ee
    ddb8:	00990094 	.word	0x00990094
    ddbc:	00180018 	.word	0x00180018
    ddc0:	00d2      	.short	0x00d2
    ddc2:	f249 0304 	movw	r3, #36868	; 0x9004
    ddc6:	4299      	cmp	r1, r3
    ddc8:	d016      	beq.n	ddf8 <rpc_ip_event_handler+0x8c>
    ddca:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
    ddce:	d924      	bls.n	de1a <rpc_ip_event_handler+0xae>
    ddd0:	68c0      	ldr	r0, [r0, #12]
    ddd2:	f7ff ff75 	bl	dcc0 <sock_find>
    ddd6:	4604      	mov	r4, r0
    ddd8:	bb70      	cbnz	r0, de38 <rpc_ip_event_handler+0xcc>
    ddda:	6830      	ldr	r0, [r6, #0]
    dddc:	b1b0      	cbz	r0, de0c <rpc_ip_event_handler+0xa0>
    ddde:	f003 fb31 	bl	11444 <rpc_client_msg_data_rx_free>
    dde2:	e013      	b.n	de0c <rpc_ip_event_handler+0xa0>
    dde4:	f7ff ffa8 	bl	dd38 <on_getaddrinfo_res>
    dde8:	b2c0      	uxtb	r0, r0
    ddea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddec:	f003 fbf7 	bl	115de <on_getifaddrs_res>
    ddf0:	e7fa      	b.n	dde8 <rpc_ip_event_handler+0x7c>
    ddf2:	f003 fbf2 	bl	115da <on_conf_dnssrv_res>
    ddf6:	e7f7      	b.n	dde8 <rpc_ip_event_handler+0x7c>
    ddf8:	6903      	ldr	r3, [r0, #16]
    ddfa:	2b03      	cmp	r3, #3
    ddfc:	d806      	bhi.n	de0c <rpc_ip_event_handler+0xa0>
    ddfe:	e8df f003 	tbb	[pc, r3]
    de02:	0a02      	.short	0x0a02
    de04:	0702      	.short	0x0702
    de06:	2000      	movs	r0, #0
    de08:	f7ff ff6c 	bl	dce4 <sock_flow_control_set>
    de0c:	2000      	movs	r0, #0
    de0e:	e7ec      	b.n	ddea <rpc_ip_event_handler+0x7e>
    de10:	2201      	movs	r2, #1
    de12:	4b65      	ldr	r3, [pc, #404]	; (dfa8 <rpc_ip_event_handler+0x23c>)
    de14:	701a      	strb	r2, [r3, #0]
    de16:	2001      	movs	r0, #1
    de18:	e7f6      	b.n	de08 <rpc_ip_event_handler+0x9c>
    de1a:	6900      	ldr	r0, [r0, #16]
    de1c:	f7ff ff50 	bl	dcc0 <sock_find>
    de20:	4604      	mov	r4, r0
    de22:	2800      	cmp	r0, #0
    de24:	d0d9      	beq.n	ddda <rpc_ip_event_handler+0x6e>
    de26:	f248 0381 	movw	r3, #32897	; 0x8081
    de2a:	429d      	cmp	r5, r3
    de2c:	d1d5      	bne.n	ddda <rpc_ip_event_handler+0x6e>
    de2e:	4601      	mov	r1, r0
    de30:	4630      	mov	r0, r6
    de32:	f000 f8d1 	bl	dfd8 <on_tls_attach_res>
    de36:	e04f      	b.n	ded8 <rpc_ip_event_handler+0x16c>
    de38:	f249 0302 	movw	r3, #36866	; 0x9002
    de3c:	429d      	cmp	r5, r3
    de3e:	f000 809e 	beq.w	df7e <rpc_ip_event_handler+0x212>
    de42:	d835      	bhi.n	deb0 <rpc_ip_event_handler+0x144>
    de44:	f003 fb92 	bl	1156c <sock_has_stream_error>
    de48:	4607      	mov	r7, r0
    de4a:	b9e0      	cbnz	r0, de86 <rpc_ip_event_handler+0x11a>
    de4c:	2010      	movs	r0, #16
    de4e:	f7fd fc97 	bl	b780 <nrf_modem_os_alloc>
    de52:	4605      	mov	r5, r0
    de54:	b1b8      	cbz	r0, de86 <rpc_ip_event_handler+0x11a>
    de56:	4639      	mov	r1, r7
    de58:	2210      	movs	r2, #16
    de5a:	f003 ff48 	bl	11cee <memset>
    de5e:	6833      	ldr	r3, [r6, #0]
    de60:	606b      	str	r3, [r5, #4]
    de62:	6873      	ldr	r3, [r6, #4]
    de64:	812b      	strh	r3, [r5, #8]
    de66:	8a71      	ldrh	r1, [r6, #18]
    de68:	2900      	cmp	r1, #0
    de6a:	f000 8097 	beq.w	df9c <rpc_ip_event_handler+0x230>
    de6e:	8a32      	ldrh	r2, [r6, #16]
    de70:	f106 0014 	add.w	r0, r6, #20
    de74:	f003 faf2 	bl	1145c <sockaddr_init>
    de78:	60e8      	str	r0, [r5, #12]
    de7a:	2800      	cmp	r0, #0
    de7c:	f040 808e 	bne.w	df9c <rpc_ip_event_handler+0x230>
    de80:	4628      	mov	r0, r5
    de82:	f7fd fc85 	bl	b790 <nrf_modem_os_free>
    de86:	6830      	ldr	r0, [r6, #0]
    de88:	f003 fadc 	bl	11444 <rpc_client_msg_data_rx_free>
    de8c:	4620      	mov	r0, r4
    de8e:	f003 fb40 	bl	11512 <sock_is_stream>
    de92:	b148      	cbz	r0, dea8 <rpc_ip_event_handler+0x13c>
    de94:	4620      	mov	r0, r4
    de96:	f003 fb69 	bl	1156c <sock_has_stream_error>
    de9a:	b928      	cbnz	r0, dea8 <rpc_ip_event_handler+0x13c>
    de9c:	230c      	movs	r3, #12
    de9e:	61a3      	str	r3, [r4, #24]
    dea0:	7f23      	ldrb	r3, [r4, #28]
    dea2:	f063 037e 	orn	r3, r3, #126	; 0x7e
    dea6:	7723      	strb	r3, [r4, #28]
    dea8:	4620      	mov	r0, r4
    deaa:	f003 fb37 	bl	1151c <sock_is_datagram>
    deae:	e025      	b.n	defc <rpc_ip_event_handler+0x190>
    deb0:	f249 0303 	movw	r3, #36867	; 0x9003
    deb4:	429d      	cmp	r5, r3
    deb6:	d018      	beq.n	deea <rpc_ip_event_handler+0x17e>
    deb8:	f249 0382 	movw	r3, #36994	; 0x9082
    debc:	429d      	cmp	r5, r3
    debe:	d18c      	bne.n	ddda <rpc_ip_event_handler+0x6e>
    dec0:	4601      	mov	r1, r0
    dec2:	4630      	mov	r0, r6
    dec4:	f000 f89c 	bl	e000 <on_tls_handshake_ntf>
    dec8:	e006      	b.n	ded8 <rpc_ip_event_handler+0x16c>
    deca:	6973      	ldr	r3, [r6, #20]
    decc:	b90b      	cbnz	r3, ded2 <rpc_ip_event_handler+0x166>
    dece:	69b3      	ldr	r3, [r6, #24]
    ded0:	6003      	str	r3, [r0, #0]
    ded2:	4630      	mov	r0, r6
    ded4:	f003 fbd0 	bl	11678 <res_forward>
    ded8:	4605      	mov	r5, r0
    deda:	e010      	b.n	defe <rpc_ip_event_handler+0x192>
    dedc:	7f03      	ldrb	r3, [r0, #28]
    dede:	f023 0303 	bic.w	r3, r3, #3
    dee2:	f043 0303 	orr.w	r3, r3, #3
    dee6:	7703      	strb	r3, [r0, #28]
    dee8:	e7f3      	b.n	ded2 <rpc_ip_event_handler+0x166>
    deea:	7f03      	ldrb	r3, [r0, #28]
    deec:	f043 0301 	orr.w	r3, r3, #1
    def0:	7703      	strb	r3, [r0, #28]
    def2:	6930      	ldr	r0, [r6, #16]
    def4:	2869      	cmp	r0, #105	; 0x69
    def6:	d112      	bne.n	df1e <rpc_ip_event_handler+0x1b2>
    def8:	2368      	movs	r3, #104	; 0x68
    defa:	61a3      	str	r3, [r4, #24]
    defc:	2500      	movs	r5, #0
    defe:	4620      	mov	r0, r4
    df00:	f003 fb3e 	bl	11580 <sock_has_pollcb>
    df04:	b110      	cbz	r0, df0c <rpc_ip_event_handler+0x1a0>
    df06:	4620      	mov	r0, r4
    df08:	f003 fae1 	bl	114ce <sock_pollcb>
    df0c:	b2e8      	uxtb	r0, r5
    df0e:	e76c      	b.n	ddea <rpc_ip_event_handler+0x7e>
    df10:	7f03      	ldrb	r3, [r0, #28]
    df12:	68f5      	ldr	r5, [r6, #12]
    df14:	f36f 0382 	bfc	r3, #2, #1
    df18:	7703      	strb	r3, [r0, #28]
    df1a:	6970      	ldr	r0, [r6, #20]
    df1c:	b118      	cbz	r0, df26 <rpc_ip_event_handler+0x1ba>
    df1e:	f000 f8ff 	bl	e120 <rpc_error_to_nrf_errno>
    df22:	61a0      	str	r0, [r4, #24]
    df24:	e7ea      	b.n	defc <rpc_ip_event_handler+0x190>
    df26:	4620      	mov	r0, r4
    df28:	f003 fafd 	bl	11526 <sock_proto_is_secure>
    df2c:	b918      	cbnz	r0, df36 <rpc_ip_event_handler+0x1ca>
    df2e:	7f23      	ldrb	r3, [r4, #28]
    df30:	f043 0308 	orr.w	r3, r3, #8
    df34:	7723      	strb	r3, [r4, #28]
    df36:	4620      	mov	r0, r4
    df38:	f003 faf5 	bl	11526 <sock_proto_is_secure>
    df3c:	2800      	cmp	r0, #0
    df3e:	d0cb      	beq.n	ded8 <rpc_ip_event_handler+0x16c>
    df40:	2d00      	cmp	r5, #0
    df42:	d0dc      	beq.n	defe <rpc_ip_event_handler+0x192>
    df44:	2100      	movs	r1, #0
    df46:	4620      	mov	r0, r4
    df48:	f000 f874 	bl	e034 <tls_attach>
    df4c:	e7d6      	b.n	defc <rpc_ip_event_handler+0x190>
    df4e:	7f43      	ldrb	r3, [r0, #29]
    df50:	3b01      	subs	r3, #1
    df52:	7743      	strb	r3, [r0, #29]
    df54:	6973      	ldr	r3, [r6, #20]
    df56:	2b00      	cmp	r3, #0
    df58:	d1bb      	bne.n	ded2 <rpc_ip_event_handler+0x166>
    df5a:	4630      	mov	r0, r6
    df5c:	f003 fb8a 	bl	11674 <res_cookie_get>
    df60:	69b2      	ldr	r2, [r6, #24]
    df62:	6843      	ldr	r3, [r0, #4]
    df64:	601a      	str	r2, [r3, #0]
    df66:	6842      	ldr	r2, [r0, #4]
    df68:	7f13      	ldrb	r3, [r2, #28]
    df6a:	f043 0308 	orr.w	r3, r3, #8
    df6e:	7713      	strb	r3, [r2, #28]
    df70:	6843      	ldr	r3, [r0, #4]
    df72:	6922      	ldr	r2, [r4, #16]
    df74:	611a      	str	r2, [r3, #16]
    df76:	6843      	ldr	r3, [r0, #4]
    df78:	6962      	ldr	r2, [r4, #20]
    df7a:	615a      	str	r2, [r3, #20]
    df7c:	e7a9      	b.n	ded2 <rpc_ip_event_handler+0x166>
    df7e:	7f43      	ldrb	r3, [r0, #29]
    df80:	3301      	adds	r3, #1
    df82:	7743      	strb	r3, [r0, #29]
    df84:	e7ba      	b.n	defc <rpc_ip_event_handler+0x190>
    df86:	4630      	mov	r0, r6
    df88:	f003 fb74 	bl	11674 <res_cookie_get>
    df8c:	6973      	ldr	r3, [r6, #20]
    df8e:	b913      	cbnz	r3, df96 <rpc_ip_event_handler+0x22a>
    df90:	69b3      	ldr	r3, [r6, #24]
    df92:	6043      	str	r3, [r0, #4]
    df94:	e79d      	b.n	ded2 <rpc_ip_event_handler+0x166>
    df96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df9a:	e7fa      	b.n	df92 <rpc_ip_event_handler+0x226>
    df9c:	4629      	mov	r1, r5
    df9e:	4620      	mov	r0, r4
    dfa0:	f003 faad 	bl	114fe <sock_pkt_append>
    dfa4:	e7aa      	b.n	defc <rpc_ip_event_handler+0x190>
    dfa6:	bf00      	nop
    dfa8:	2000d451 	.word	0x2000d451

0000dfac <rpc_ip_init>:
    dfac:	b508      	push	{r3, lr}
    dfae:	f7ff fe6b 	bl	dc88 <sock_init>
    dfb2:	f7ff fecd 	bl	dd50 <addrinfo_init>
    dfb6:	2200      	movs	r2, #0
    dfb8:	4b05      	ldr	r3, [pc, #20]	; (dfd0 <rpc_ip_init+0x24>)
    dfba:	4806      	ldr	r0, [pc, #24]	; (dfd4 <rpc_ip_init+0x28>)
    dfbc:	701a      	strb	r2, [r3, #0]
    dfbe:	2201      	movs	r2, #1
    dfc0:	4611      	mov	r1, r2
    dfc2:	f7fd fba7 	bl	b714 <nrf_modem_os_sem_init>
    dfc6:	2800      	cmp	r0, #0
    dfc8:	bf18      	it	ne
    dfca:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    dfce:	bd08      	pop	{r3, pc}
    dfd0:	2000d451 	.word	0x2000d451
    dfd4:	2000cef4 	.word	0x2000cef4

0000dfd8 <on_tls_attach_res>:
    dfd8:	b510      	push	{r4, lr}
    dfda:	6943      	ldr	r3, [r0, #20]
    dfdc:	460c      	mov	r4, r1
    dfde:	b15b      	cbz	r3, dff8 <on_tls_attach_res+0x20>
    dfe0:	7f0b      	ldrb	r3, [r1, #28]
    dfe2:	f36f 1304 	bfc	r3, #4, #1
    dfe6:	770b      	strb	r3, [r1, #28]
    dfe8:	6940      	ldr	r0, [r0, #20]
    dfea:	f000 f899 	bl	e120 <rpc_error_to_nrf_errno>
    dfee:	4b03      	ldr	r3, [pc, #12]	; (dffc <on_tls_attach_res+0x24>)
    dff0:	61a0      	str	r0, [r4, #24]
    dff2:	6818      	ldr	r0, [r3, #0]
    dff4:	f002 fea9 	bl	10d4a <nrf_modem_os_sem_give>
    dff8:	2000      	movs	r0, #0
    dffa:	bd10      	pop	{r4, pc}
    dffc:	2000cef4 	.word	0x2000cef4

0000e000 <on_tls_handshake_ntf>:
    e000:	b510      	push	{r4, lr}
    e002:	7f0b      	ldrb	r3, [r1, #28]
    e004:	460c      	mov	r4, r1
    e006:	f36f 1304 	bfc	r3, #4, #1
    e00a:	770b      	strb	r3, [r1, #28]
    e00c:	6900      	ldr	r0, [r0, #16]
    e00e:	b958      	cbnz	r0, e028 <on_tls_handshake_ntf+0x28>
    e010:	b2db      	uxtb	r3, r3
    e012:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    e016:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    e01a:	770b      	strb	r3, [r1, #28]
    e01c:	4b04      	ldr	r3, [pc, #16]	; (e030 <on_tls_handshake_ntf+0x30>)
    e01e:	6818      	ldr	r0, [r3, #0]
    e020:	f002 fe93 	bl	10d4a <nrf_modem_os_sem_give>
    e024:	2000      	movs	r0, #0
    e026:	bd10      	pop	{r4, pc}
    e028:	f000 f87a 	bl	e120 <rpc_error_to_nrf_errno>
    e02c:	61a0      	str	r0, [r4, #24]
    e02e:	e7f5      	b.n	e01c <on_tls_handshake_ntf+0x1c>
    e030:	2000cef4 	.word	0x2000cef4

0000e034 <tls_attach>:
    e034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e038:	f8df 80e0 	ldr.w	r8, [pc, #224]	; e11c <tls_attach+0xe8>
    e03c:	4605      	mov	r5, r0
    e03e:	f8d8 0000 	ldr.w	r0, [r8]
    e042:	9101      	str	r1, [sp, #4]
    e044:	f002 fe83 	bl	10d4e <nrf_modem_os_sem_take>
    e048:	4607      	mov	r7, r0
    e04a:	b150      	cbz	r0, e062 <tls_attach+0x2e>
    e04c:	9b01      	ldr	r3, [sp, #4]
    e04e:	2b00      	cmp	r3, #0
    e050:	d162      	bne.n	e118 <tls_attach+0xe4>
    e052:	2310      	movs	r3, #16
    e054:	61ab      	str	r3, [r5, #24]
    e056:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e05a:	4638      	mov	r0, r7
    e05c:	b002      	add	sp, #8
    e05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e062:	6c28      	ldr	r0, [r5, #64]	; 0x40
    e064:	b1a8      	cbz	r0, e092 <tls_attach+0x5e>
    e066:	f7fa ffc1 	bl	8fec <strlen>
    e06a:	1c46      	adds	r6, r0, #1
    e06c:	4630      	mov	r0, r6
    e06e:	f003 f9c3 	bl	113f8 <rpc_client_msg_alloc>
    e072:	4604      	mov	r4, r0
    e074:	b978      	cbnz	r0, e096 <tls_attach+0x62>
    e076:	4628      	mov	r0, r5
    e078:	f003 fa65 	bl	11546 <sock_is_nonblock>
    e07c:	b108      	cbz	r0, e082 <tls_attach+0x4e>
    e07e:	2369      	movs	r3, #105	; 0x69
    e080:	61ab      	str	r3, [r5, #24]
    e082:	f8d8 0000 	ldr.w	r0, [r8]
    e086:	f002 fe60 	bl	10d4a <nrf_modem_os_sem_give>
    e08a:	2069      	movs	r0, #105	; 0x69
    e08c:	f002 fe55 	bl	10d3a <nrf_modem_os_errno_set>
    e090:	e7e1      	b.n	e056 <tls_attach+0x22>
    e092:	463e      	mov	r6, r7
    e094:	e7ea      	b.n	e06c <tls_attach+0x38>
    e096:	682b      	ldr	r3, [r5, #0]
    e098:	2204      	movs	r2, #4
    e09a:	6103      	str	r3, [r0, #16]
    e09c:	2300      	movs	r3, #0
    e09e:	7202      	strb	r2, [r0, #8]
    e0a0:	7243      	strb	r3, [r0, #9]
    e0a2:	7283      	strb	r3, [r0, #10]
    e0a4:	72c3      	strb	r3, [r0, #11]
    e0a6:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
    e0aa:	f105 0144 	add.w	r1, r5, #68	; 0x44
    e0ae:	3201      	adds	r2, #1
    e0b0:	0092      	lsls	r2, r2, #2
    e0b2:	6082      	str	r2, [r0, #8]
    e0b4:	3014      	adds	r0, #20
    e0b6:	f003 fe0d 	bl	11cd4 <memcpy>
    e0ba:	b1e6      	cbz	r6, e0f6 <tls_attach+0xc2>
    e0bc:	4632      	mov	r2, r6
    e0be:	6c29      	ldr	r1, [r5, #64]	; 0x40
    e0c0:	6820      	ldr	r0, [r4, #0]
    e0c2:	f003 fe43 	bl	11d4c <strncpy>
    e0c6:	6066      	str	r6, [r4, #4]
    e0c8:	7f2b      	ldrb	r3, [r5, #28]
    e0ca:	2004      	movs	r0, #4
    e0cc:	f043 0310 	orr.w	r3, r3, #16
    e0d0:	4622      	mov	r2, r4
    e0d2:	f247 0181 	movw	r1, #28801	; 0x7081
    e0d6:	772b      	strb	r3, [r5, #28]
    e0d8:	f003 f9aa 	bl	11430 <rpc_client_msg_send>
    e0dc:	4628      	mov	r0, r5
    e0de:	f003 fa32 	bl	11546 <sock_is_nonblock>
    e0e2:	2800      	cmp	r0, #0
    e0e4:	d1b9      	bne.n	e05a <tls_attach+0x26>
    e0e6:	4628      	mov	r0, r5
    e0e8:	f003 fa29 	bl	1153e <sock_is_attaching>
    e0ec:	b940      	cbnz	r0, e100 <tls_attach+0xcc>
    e0ee:	69a8      	ldr	r0, [r5, #24]
    e0f0:	2800      	cmp	r0, #0
    e0f2:	d0b2      	beq.n	e05a <tls_attach+0x26>
    e0f4:	e7ca      	b.n	e08c <tls_attach+0x58>
    e0f6:	7026      	strb	r6, [r4, #0]
    e0f8:	7066      	strb	r6, [r4, #1]
    e0fa:	70a6      	strb	r6, [r4, #2]
    e0fc:	70e6      	strb	r6, [r4, #3]
    e0fe:	e7e2      	b.n	e0c6 <tls_attach+0x92>
    e100:	2002      	movs	r0, #2
    e102:	a901      	add	r1, sp, #4
    e104:	f7fd fa44 	bl	b590 <nrf_modem_os_timedwait>
    e108:	f110 0f0b 	cmn.w	r0, #11
    e10c:	d004      	beq.n	e118 <tls_attach+0xe4>
    e10e:	2800      	cmp	r0, #0
    e110:	d0e9      	beq.n	e0e6 <tls_attach+0xb2>
    e112:	f003 fdcb 	bl	11cac <abs>
    e116:	e7b9      	b.n	e08c <tls_attach+0x58>
    e118:	2074      	movs	r0, #116	; 0x74
    e11a:	e7b7      	b.n	e08c <tls_attach+0x58>
    e11c:	2000cef4 	.word	0x2000cef4

0000e120 <rpc_error_to_nrf_errno>:
    e120:	286c      	cmp	r0, #108	; 0x6c
    e122:	bf9a      	itte	ls
    e124:	4b02      	ldrls	r3, [pc, #8]	; (e130 <rpc_error_to_nrf_errno+0x10>)
    e126:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    e12a:	4802      	ldrhi	r0, [pc, #8]	; (e134 <rpc_error_to_nrf_errno+0x14>)
    e12c:	4770      	bx	lr
    e12e:	bf00      	nop
    e130:	00012584 	.word	0x00012584
    e134:	baadbaad 	.word	0xbaadbaad

0000e138 <at_cmd_send>:
    e138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e13c:	4605      	mov	r5, r0
    e13e:	2000      	movs	r0, #0
    e140:	4617      	mov	r7, r2
    e142:	4688      	mov	r8, r1
    e144:	461e      	mov	r6, r3
    e146:	f003 f957 	bl	113f8 <rpc_client_msg_alloc>
    e14a:	4602      	mov	r2, r0
    e14c:	b940      	cbnz	r0, e160 <at_cmd_send+0x28>
    e14e:	b115      	cbz	r5, e156 <at_cmd_send+0x1e>
    e150:	4628      	mov	r0, r5
    e152:	f003 f97b 	bl	1144c <rpc_client_msg_data_tx_free>
    e156:	f06f 000b 	mvn.w	r0, #11
    e15a:	b002      	add	sp, #8
    e15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e160:	f06f 0358 	mvn.w	r3, #88	; 0x58
    e164:	2400      	movs	r4, #0
    e166:	7303      	strb	r3, [r0, #12]
    e168:	2304      	movs	r3, #4
    e16a:	6005      	str	r5, [r0, #0]
    e16c:	4d0e      	ldr	r5, [pc, #56]	; (e1a8 <at_cmd_send+0x70>)
    e16e:	7203      	strb	r3, [r0, #8]
    e170:	7344      	strb	r4, [r0, #13]
    e172:	7384      	strb	r4, [r0, #14]
    e174:	73c4      	strb	r4, [r0, #15]
    e176:	7244      	strb	r4, [r0, #9]
    e178:	7284      	strb	r4, [r0, #10]
    e17a:	72c4      	strb	r4, [r0, #11]
    e17c:	f8c0 8004 	str.w	r8, [r0, #4]
    e180:	4639      	mov	r1, r7
    e182:	2003      	movs	r0, #3
    e184:	702c      	strb	r4, [r5, #0]
    e186:	f003 f953 	bl	11430 <rpc_client_msg_send>
    e18a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e18e:	9301      	str	r3, [sp, #4]
    e190:	782b      	ldrb	r3, [r5, #0]
    e192:	42b3      	cmp	r3, r6
    e194:	d101      	bne.n	e19a <at_cmd_send+0x62>
    e196:	2000      	movs	r0, #0
    e198:	e7df      	b.n	e15a <at_cmd_send+0x22>
    e19a:	2002      	movs	r0, #2
    e19c:	a901      	add	r1, sp, #4
    e19e:	f7fd f9f7 	bl	b590 <nrf_modem_os_timedwait>
    e1a2:	2800      	cmp	r0, #0
    e1a4:	d0f4      	beq.n	e190 <at_cmd_send+0x58>
    e1a6:	e7d8      	b.n	e15a <at_cmd_send+0x22>
    e1a8:	2000d452 	.word	0x2000d452

0000e1ac <at_response_match>:
    e1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1ae:	4605      	mov	r5, r0
    e1b0:	2400      	movs	r4, #0
    e1b2:	4f0f      	ldr	r7, [pc, #60]	; (e1f0 <at_response_match+0x44>)
    e1b4:	f857 6b04 	ldr.w	r6, [r7], #4
    e1b8:	4628      	mov	r0, r5
    e1ba:	4631      	mov	r1, r6
    e1bc:	f003 fde5 	bl	11d8a <strstr>
    e1c0:	b928      	cbnz	r0, e1ce <at_response_match+0x22>
    e1c2:	3401      	adds	r4, #1
    e1c4:	2c04      	cmp	r4, #4
    e1c6:	d1f5      	bne.n	e1b4 <at_response_match+0x8>
    e1c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e1cc:	e00d      	b.n	e1ea <at_response_match+0x3e>
    e1ce:	b16c      	cbz	r4, e1ec <at_response_match+0x40>
    e1d0:	1ea3      	subs	r3, r4, #2
    e1d2:	2b01      	cmp	r3, #1
    e1d4:	d8f8      	bhi.n	e1c8 <at_response_match+0x1c>
    e1d6:	4630      	mov	r0, r6
    e1d8:	f7fa ff08 	bl	8fec <strlen>
    e1dc:	220a      	movs	r2, #10
    e1de:	2100      	movs	r1, #0
    e1e0:	4428      	add	r0, r5
    e1e2:	f001 fd97 	bl	fd14 <strtol>
    e1e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    e1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1ec:	4620      	mov	r0, r4
    e1ee:	e7fc      	b.n	e1ea <at_response_match+0x3e>
    e1f0:	00012738 	.word	0x00012738

0000e1f4 <at_vsprintf>:
    e1f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e1f8:	2500      	movs	r5, #0
    e1fa:	4681      	mov	r9, r0
    e1fc:	460f      	mov	r7, r1
    e1fe:	4810      	ldr	r0, [pc, #64]	; (e240 <at_vsprintf+0x4c>)
    e200:	4629      	mov	r1, r5
    e202:	4690      	mov	r8, r2
    e204:	461e      	mov	r6, r3
    e206:	9301      	str	r3, [sp, #4]
    e208:	f001 fea8 	bl	ff5c <vsniprintf>
    e20c:	1e04      	subs	r4, r0, #0
    e20e:	db11      	blt.n	e234 <at_vsprintf+0x40>
    e210:	3401      	adds	r4, #1
    e212:	4620      	mov	r0, r4
    e214:	f003 f918 	bl	11448 <rpc_client_msg_data_tx_alloc>
    e218:	f8c9 0000 	str.w	r0, [r9]
    e21c:	b168      	cbz	r0, e23a <at_vsprintf+0x46>
    e21e:	4633      	mov	r3, r6
    e220:	4642      	mov	r2, r8
    e222:	4621      	mov	r1, r4
    e224:	9601      	str	r6, [sp, #4]
    e226:	f001 fe99 	bl	ff5c <vsniprintf>
    e22a:	4628      	mov	r0, r5
    e22c:	603c      	str	r4, [r7, #0]
    e22e:	b003      	add	sp, #12
    e230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e234:	f06f 0015 	mvn.w	r0, #21
    e238:	e7f9      	b.n	e22e <at_vsprintf+0x3a>
    e23a:	f06f 000b 	mvn.w	r0, #11
    e23e:	e7f6      	b.n	e22e <at_vsprintf+0x3a>
    e240:	000123d0 	.word	0x000123d0

0000e244 <nrf_modem_at_notif_handler_set>:
    e244:	4b01      	ldr	r3, [pc, #4]	; (e24c <nrf_modem_at_notif_handler_set+0x8>)
    e246:	6018      	str	r0, [r3, #0]
    e248:	2000      	movs	r0, #0
    e24a:	4770      	bx	lr
    e24c:	2000cf04 	.word	0x2000cf04

0000e250 <nrf_modem_at_printf>:
    e250:	b40f      	push	{r0, r1, r2, r3}
    e252:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e254:	9c08      	ldr	r4, [sp, #32]
    e256:	f000 fa69 	bl	e72c <nrf_modem_state_is_initialized>
    e25a:	2800      	cmp	r0, #0
    e25c:	d039      	beq.n	e2d2 <nrf_modem_at_printf+0x82>
    e25e:	2c00      	cmp	r4, #0
    e260:	d03a      	beq.n	e2d8 <nrf_modem_at_printf+0x88>
    e262:	4622      	mov	r2, r4
    e264:	ab09      	add	r3, sp, #36	; 0x24
    e266:	a903      	add	r1, sp, #12
    e268:	a802      	add	r0, sp, #8
    e26a:	9301      	str	r3, [sp, #4]
    e26c:	f7ff ffc2 	bl	e1f4 <at_vsprintf>
    e270:	4604      	mov	r4, r0
    e272:	b960      	cbnz	r0, e28e <nrf_modem_at_printf+0x3e>
    e274:	4e1a      	ldr	r6, [pc, #104]	; (e2e0 <nrf_modem_at_printf+0x90>)
    e276:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e27a:	6830      	ldr	r0, [r6, #0]
    e27c:	f002 fd67 	bl	10d4e <nrf_modem_os_sem_take>
    e280:	4603      	mov	r3, r0
    e282:	9802      	ldr	r0, [sp, #8]
    e284:	b14b      	cbz	r3, e29a <nrf_modem_at_printf+0x4a>
    e286:	f003 f8e1 	bl	1144c <rpc_client_msg_data_tx_free>
    e28a:	f06f 040a 	mvn.w	r4, #10
    e28e:	4620      	mov	r0, r4
    e290:	b004      	add	sp, #16
    e292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e296:	b004      	add	sp, #16
    e298:	4770      	bx	lr
    e29a:	2302      	movs	r3, #2
    e29c:	2201      	movs	r2, #1
    e29e:	9903      	ldr	r1, [sp, #12]
    e2a0:	f7ff ff4a 	bl	e138 <at_cmd_send>
    e2a4:	4604      	mov	r4, r0
    e2a6:	b118      	cbz	r0, e2b0 <nrf_modem_at_printf+0x60>
    e2a8:	6830      	ldr	r0, [r6, #0]
    e2aa:	f002 fd4e 	bl	10d4a <nrf_modem_os_sem_give>
    e2ae:	e7ee      	b.n	e28e <nrf_modem_at_printf+0x3e>
    e2b0:	4d0c      	ldr	r5, [pc, #48]	; (e2e4 <nrf_modem_at_printf+0x94>)
    e2b2:	682b      	ldr	r3, [r5, #0]
    e2b4:	6818      	ldr	r0, [r3, #0]
    e2b6:	f7ff ff79 	bl	e1ac <at_response_match>
    e2ba:	4604      	mov	r4, r0
    e2bc:	6830      	ldr	r0, [r6, #0]
    e2be:	f002 fd44 	bl	10d4a <nrf_modem_os_sem_give>
    e2c2:	682b      	ldr	r3, [r5, #0]
    e2c4:	6818      	ldr	r0, [r3, #0]
    e2c6:	f003 f8bd 	bl	11444 <rpc_client_msg_data_rx_free>
    e2ca:	6828      	ldr	r0, [r5, #0]
    e2cc:	f003 f8b7 	bl	1143e <rpc_client_msg_rx_free>
    e2d0:	e7dd      	b.n	e28e <nrf_modem_at_printf+0x3e>
    e2d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    e2d6:	e7da      	b.n	e28e <nrf_modem_at_printf+0x3e>
    e2d8:	f06f 040d 	mvn.w	r4, #13
    e2dc:	e7d7      	b.n	e28e <nrf_modem_at_printf+0x3e>
    e2de:	bf00      	nop
    e2e0:	2000cf0c 	.word	0x2000cf0c
    e2e4:	2000cf08 	.word	0x2000cf08

0000e2e8 <nrf_modem_at_cmd>:
    e2e8:	b40c      	push	{r2, r3}
    e2ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2ee:	b085      	sub	sp, #20
    e2f0:	4606      	mov	r6, r0
    e2f2:	460d      	mov	r5, r1
    e2f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e2f6:	f000 fa19 	bl	e72c <nrf_modem_state_is_initialized>
    e2fa:	2800      	cmp	r0, #0
    e2fc:	f000 8081 	beq.w	e402 <nrf_modem_at_cmd+0x11a>
    e300:	2e00      	cmp	r6, #0
    e302:	f000 8081 	beq.w	e408 <nrf_modem_at_cmd+0x120>
    e306:	2c00      	cmp	r4, #0
    e308:	d07e      	beq.n	e408 <nrf_modem_at_cmd+0x120>
    e30a:	2d00      	cmp	r5, #0
    e30c:	d07f      	beq.n	e40e <nrf_modem_at_cmd+0x126>
    e30e:	4622      	mov	r2, r4
    e310:	ab0f      	add	r3, sp, #60	; 0x3c
    e312:	a903      	add	r1, sp, #12
    e314:	a802      	add	r0, sp, #8
    e316:	9301      	str	r3, [sp, #4]
    e318:	f7ff ff6c 	bl	e1f4 <at_vsprintf>
    e31c:	4604      	mov	r4, r0
    e31e:	2800      	cmp	r0, #0
    e320:	d13c      	bne.n	e39c <nrf_modem_at_cmd+0xb4>
    e322:	f8df 80f0 	ldr.w	r8, [pc, #240]	; e414 <nrf_modem_at_cmd+0x12c>
    e326:	9f02      	ldr	r7, [sp, #8]
    e328:	f8d8 3000 	ldr.w	r3, [r8]
    e32c:	b1c3      	cbz	r3, e360 <nrf_modem_at_cmd+0x78>
    e32e:	f04f 0b0c 	mov.w	fp, #12
    e332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; e418 <nrf_modem_at_cmd+0x130>
    e336:	f8da 3000 	ldr.w	r3, [sl]
    e33a:	429c      	cmp	r4, r3
    e33c:	d210      	bcs.n	e360 <nrf_modem_at_cmd+0x78>
    e33e:	fb0b f904 	mul.w	r9, fp, r4
    e342:	f8d8 3000 	ldr.w	r3, [r8]
    e346:	4638      	mov	r0, r7
    e348:	f853 1009 	ldr.w	r1, [r3, r9]
    e34c:	f003 fd1d 	bl	11d8a <strstr>
    e350:	b1a8      	cbz	r0, e37e <nrf_modem_at_cmd+0x96>
    e352:	f8d8 3000 	ldr.w	r3, [r8]
    e356:	444b      	add	r3, r9
    e358:	7a1a      	ldrb	r2, [r3, #8]
    e35a:	b982      	cbnz	r2, e37e <nrf_modem_at_cmd+0x96>
    e35c:	685b      	ldr	r3, [r3, #4]
    e35e:	b983      	cbnz	r3, e382 <nrf_modem_at_cmd+0x9a>
    e360:	f8df 80b8 	ldr.w	r8, [pc, #184]	; e41c <nrf_modem_at_cmd+0x134>
    e364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e368:	f8d8 0000 	ldr.w	r0, [r8]
    e36c:	f002 fcef 	bl	10d4e <nrf_modem_os_sem_take>
    e370:	b1d0      	cbz	r0, e3a8 <nrf_modem_at_cmd+0xc0>
    e372:	4638      	mov	r0, r7
    e374:	f003 f86a 	bl	1144c <rpc_client_msg_data_tx_free>
    e378:	f06f 040a 	mvn.w	r4, #10
    e37c:	e00e      	b.n	e39c <nrf_modem_at_cmd+0xb4>
    e37e:	3401      	adds	r4, #1
    e380:	e7d9      	b.n	e336 <nrf_modem_at_cmd+0x4e>
    e382:	463a      	mov	r2, r7
    e384:	4629      	mov	r1, r5
    e386:	4630      	mov	r0, r6
    e388:	4798      	blx	r3
    e38a:	4604      	mov	r4, r0
    e38c:	b918      	cbnz	r0, e396 <nrf_modem_at_cmd+0xae>
    e38e:	4630      	mov	r0, r6
    e390:	f7ff ff0c 	bl	e1ac <at_response_match>
    e394:	4604      	mov	r4, r0
    e396:	4638      	mov	r0, r7
    e398:	f003 f858 	bl	1144c <rpc_client_msg_data_tx_free>
    e39c:	4620      	mov	r0, r4
    e39e:	b005      	add	sp, #20
    e3a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3a4:	b002      	add	sp, #8
    e3a6:	4770      	bx	lr
    e3a8:	2302      	movs	r3, #2
    e3aa:	2201      	movs	r2, #1
    e3ac:	4638      	mov	r0, r7
    e3ae:	9903      	ldr	r1, [sp, #12]
    e3b0:	f7ff fec2 	bl	e138 <at_cmd_send>
    e3b4:	4604      	mov	r4, r0
    e3b6:	b120      	cbz	r0, e3c2 <nrf_modem_at_cmd+0xda>
    e3b8:	f8d8 0000 	ldr.w	r0, [r8]
    e3bc:	f002 fcc5 	bl	10d4a <nrf_modem_os_sem_give>
    e3c0:	e7ec      	b.n	e39c <nrf_modem_at_cmd+0xb4>
    e3c2:	4f17      	ldr	r7, [pc, #92]	; (e420 <nrf_modem_at_cmd+0x138>)
    e3c4:	4630      	mov	r0, r6
    e3c6:	683c      	ldr	r4, [r7, #0]
    e3c8:	6862      	ldr	r2, [r4, #4]
    e3ca:	6821      	ldr	r1, [r4, #0]
    e3cc:	42aa      	cmp	r2, r5
    e3ce:	bf28      	it	cs
    e3d0:	462a      	movcs	r2, r5
    e3d2:	f003 fc7f 	bl	11cd4 <memcpy>
    e3d6:	6863      	ldr	r3, [r4, #4]
    e3d8:	42ab      	cmp	r3, r5
    e3da:	d80f      	bhi.n	e3fc <nrf_modem_at_cmd+0x114>
    e3dc:	6820      	ldr	r0, [r4, #0]
    e3de:	f7ff fee5 	bl	e1ac <at_response_match>
    e3e2:	4604      	mov	r4, r0
    e3e4:	f8d8 0000 	ldr.w	r0, [r8]
    e3e8:	f002 fcaf 	bl	10d4a <nrf_modem_os_sem_give>
    e3ec:	683b      	ldr	r3, [r7, #0]
    e3ee:	6818      	ldr	r0, [r3, #0]
    e3f0:	f003 f828 	bl	11444 <rpc_client_msg_data_rx_free>
    e3f4:	6838      	ldr	r0, [r7, #0]
    e3f6:	f003 f822 	bl	1143e <rpc_client_msg_rx_free>
    e3fa:	e7cf      	b.n	e39c <nrf_modem_at_cmd+0xb4>
    e3fc:	f06f 0406 	mvn.w	r4, #6
    e400:	e7f0      	b.n	e3e4 <nrf_modem_at_cmd+0xfc>
    e402:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    e406:	e7c9      	b.n	e39c <nrf_modem_at_cmd+0xb4>
    e408:	f06f 040d 	mvn.w	r4, #13
    e40c:	e7c6      	b.n	e39c <nrf_modem_at_cmd+0xb4>
    e40e:	f06f 0415 	mvn.w	r4, #21
    e412:	e7c3      	b.n	e39c <nrf_modem_at_cmd+0xb4>
    e414:	2000cefc 	.word	0x2000cefc
    e418:	2000cef8 	.word	0x2000cef8
    e41c:	2000cf0c 	.word	0x2000cf0c
    e420:	2000cf08 	.word	0x2000cf08

0000e424 <rpc_at_event_handler>:
    e424:	b538      	push	{r3, r4, r5, lr}
    e426:	68c3      	ldr	r3, [r0, #12]
    e428:	4604      	mov	r4, r0
    e42a:	2ba7      	cmp	r3, #167	; 0xa7
    e42c:	d003      	beq.n	e436 <rpc_at_event_handler+0x12>
    e42e:	6820      	ldr	r0, [r4, #0]
    e430:	f003 f808 	bl	11444 <rpc_client_msg_data_rx_free>
    e434:	e008      	b.n	e448 <rpc_at_event_handler+0x24>
    e436:	2903      	cmp	r1, #3
    e438:	d008      	beq.n	e44c <rpc_at_event_handler+0x28>
    e43a:	2904      	cmp	r1, #4
    e43c:	d021      	beq.n	e482 <rpc_at_event_handler+0x5e>
    e43e:	2902      	cmp	r1, #2
    e440:	bf02      	ittt	eq
    e442:	2201      	moveq	r2, #1
    e444:	4b12      	ldreq	r3, [pc, #72]	; (e490 <rpc_at_event_handler+0x6c>)
    e446:	701a      	strbeq	r2, [r3, #0]
    e448:	2000      	movs	r0, #0
    e44a:	bd38      	pop	{r3, r4, r5, pc}
    e44c:	4d11      	ldr	r5, [pc, #68]	; (e494 <rpc_at_event_handler+0x70>)
    e44e:	682b      	ldr	r3, [r5, #0]
    e450:	b13b      	cbz	r3, e462 <rpc_at_event_handler+0x3e>
    e452:	6800      	ldr	r0, [r0, #0]
    e454:	4798      	blx	r3
    e456:	2300      	movs	r3, #0
    e458:	6820      	ldr	r0, [r4, #0]
    e45a:	602b      	str	r3, [r5, #0]
    e45c:	f002 fff2 	bl	11444 <rpc_client_msg_data_rx_free>
    e460:	e006      	b.n	e470 <rpc_at_event_handler+0x4c>
    e462:	4b0b      	ldr	r3, [pc, #44]	; (e490 <rpc_at_event_handler+0x6c>)
    e464:	781a      	ldrb	r2, [r3, #0]
    e466:	2a02      	cmp	r2, #2
    e468:	d105      	bne.n	e476 <rpc_at_event_handler+0x52>
    e46a:	6800      	ldr	r0, [r0, #0]
    e46c:	2800      	cmp	r0, #0
    e46e:	d1f5      	bne.n	e45c <rpc_at_event_handler+0x38>
    e470:	2000      	movs	r0, #0
    e472:	b2c0      	uxtb	r0, r0
    e474:	e7e9      	b.n	e44a <rpc_at_event_handler+0x26>
    e476:	4a08      	ldr	r2, [pc, #32]	; (e498 <rpc_at_event_handler+0x74>)
    e478:	6010      	str	r0, [r2, #0]
    e47a:	2202      	movs	r2, #2
    e47c:	2001      	movs	r0, #1
    e47e:	701a      	strb	r2, [r3, #0]
    e480:	e7f7      	b.n	e472 <rpc_at_event_handler+0x4e>
    e482:	4b06      	ldr	r3, [pc, #24]	; (e49c <rpc_at_event_handler+0x78>)
    e484:	681b      	ldr	r3, [r3, #0]
    e486:	2b00      	cmp	r3, #0
    e488:	d0d1      	beq.n	e42e <rpc_at_event_handler+0xa>
    e48a:	6800      	ldr	r0, [r0, #0]
    e48c:	4798      	blx	r3
    e48e:	e7ce      	b.n	e42e <rpc_at_event_handler+0xa>
    e490:	2000d452 	.word	0x2000d452
    e494:	2000cf00 	.word	0x2000cf00
    e498:	2000cf08 	.word	0x2000cf08
    e49c:	2000cf04 	.word	0x2000cf04

0000e4a0 <rpc_at_init>:
    e4a0:	2201      	movs	r2, #1
    e4a2:	b510      	push	{r4, lr}
    e4a4:	4611      	mov	r1, r2
    e4a6:	4807      	ldr	r0, [pc, #28]	; (e4c4 <rpc_at_init+0x24>)
    e4a8:	f7fd f934 	bl	b714 <nrf_modem_os_sem_init>
    e4ac:	4601      	mov	r1, r0
    e4ae:	b928      	cbnz	r0, e4bc <rpc_at_init+0x1c>
    e4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4b4:	2301      	movs	r3, #1
    e4b6:	2205      	movs	r2, #5
    e4b8:	f7ff be3e 	b.w	e138 <at_cmd_send>
    e4bc:	f06f 002d 	mvn.w	r0, #45	; 0x2d
    e4c0:	bd10      	pop	{r4, pc}
    e4c2:	bf00      	nop
    e4c4:	2000cf0c 	.word	0x2000cf0c

0000e4c8 <rpc_gnss_event_handler>:
    e4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4ca:	6804      	ldr	r4, [r0, #0]
    e4cc:	4606      	mov	r6, r0
    e4ce:	b13c      	cbz	r4, e4e0 <rpc_gnss_event_handler+0x18>
    e4d0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    e4d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e4d8:	d104      	bne.n	e4e4 <rpc_gnss_event_handler+0x1c>
    e4da:	4b41      	ldr	r3, [pc, #260]	; (e5e0 <rpc_gnss_event_handler+0x118>)
    e4dc:	e9c3 1400 	strd	r1, r4, [r3]
    e4e0:	2000      	movs	r0, #0
    e4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4e4:	4d3f      	ldr	r5, [pc, #252]	; (e5e4 <rpc_gnss_event_handler+0x11c>)
    e4e6:	682b      	ldr	r3, [r5, #0]
    e4e8:	2b00      	cmp	r3, #0
    e4ea:	d06f      	beq.n	e5cc <rpc_gnss_event_handler+0x104>
    e4ec:	f244 0204 	movw	r2, #16388	; 0x4004
    e4f0:	4291      	cmp	r1, r2
    e4f2:	d80b      	bhi.n	e50c <rpc_gnss_event_handler+0x44>
    e4f4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    e4f8:	d968      	bls.n	e5cc <rpc_gnss_event_handler+0x104>
    e4fa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
    e4fe:	3902      	subs	r1, #2
    e500:	2902      	cmp	r1, #2
    e502:	d82a      	bhi.n	e55a <rpc_gnss_event_handler+0x92>
    e504:	e8df f001 	tbb	[pc, r1]
    e508:	5047      	.short	0x5047
    e50a:	59          	.byte	0x59
    e50b:	00          	.byte	0x00
    e50c:	f244 1301 	movw	r3, #16641	; 0x4101
    e510:	4299      	cmp	r1, r3
    e512:	d02e      	beq.n	e572 <rpc_gnss_event_handler+0xaa>
    e514:	f244 2301 	movw	r3, #16897	; 0x4201
    e518:	4299      	cmp	r1, r3
    e51a:	d157      	bne.n	e5cc <rpc_gnss_event_handler+0x104>
    e51c:	4e32      	ldr	r6, [pc, #200]	; (e5e8 <rpc_gnss_event_handler+0x120>)
    e51e:	6830      	ldr	r0, [r6, #0]
    e520:	b108      	cbz	r0, e526 <rpc_gnss_event_handler+0x5e>
    e522:	f002 ff8f 	bl	11444 <rpc_client_msg_data_rx_free>
    e526:	2202      	movs	r2, #2
    e528:	4b30      	ldr	r3, [pc, #192]	; (e5ec <rpc_gnss_event_handler+0x124>)
    e52a:	6034      	str	r4, [r6, #0]
    e52c:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
    e530:	701a      	strb	r2, [r3, #0]
    e532:	4e2f      	ldr	r6, [pc, #188]	; (e5f0 <rpc_gnss_event_handler+0x128>)
    e534:	f014 0708 	ands.w	r7, r4, #8
    e538:	682b      	ldr	r3, [r5, #0]
    e53a:	7832      	ldrb	r2, [r6, #0]
    e53c:	d025      	beq.n	e58a <rpc_gnss_event_handler+0xc2>
    e53e:	b91a      	cbnz	r2, e548 <rpc_gnss_event_handler+0x80>
    e540:	2005      	movs	r0, #5
    e542:	4798      	blx	r3
    e544:	2301      	movs	r3, #1
    e546:	7033      	strb	r3, [r6, #0]
    e548:	07e3      	lsls	r3, r4, #31
    e54a:	d502      	bpl.n	e552 <rpc_gnss_event_handler+0x8a>
    e54c:	2002      	movs	r0, #2
    e54e:	682b      	ldr	r3, [r5, #0]
    e550:	4798      	blx	r3
    e552:	2001      	movs	r0, #1
    e554:	682b      	ldr	r3, [r5, #0]
    e556:	4798      	blx	r3
    e558:	e7c2      	b.n	e4e0 <rpc_gnss_event_handler+0x18>
    e55a:	4e23      	ldr	r6, [pc, #140]	; (e5e8 <rpc_gnss_event_handler+0x120>)
    e55c:	6830      	ldr	r0, [r6, #0]
    e55e:	b108      	cbz	r0, e564 <rpc_gnss_event_handler+0x9c>
    e560:	f002 ff70 	bl	11444 <rpc_client_msg_data_rx_free>
    e564:	2200      	movs	r2, #0
    e566:	4b21      	ldr	r3, [pc, #132]	; (e5ec <rpc_gnss_event_handler+0x124>)
    e568:	6034      	str	r4, [r6, #0]
    e56a:	701a      	strb	r2, [r3, #0]
    e56c:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
    e570:	e7df      	b.n	e532 <rpc_gnss_event_handler+0x6a>
    e572:	4e1d      	ldr	r6, [pc, #116]	; (e5e8 <rpc_gnss_event_handler+0x120>)
    e574:	6830      	ldr	r0, [r6, #0]
    e576:	b108      	cbz	r0, e57c <rpc_gnss_event_handler+0xb4>
    e578:	f002 ff64 	bl	11444 <rpc_client_msg_data_rx_free>
    e57c:	2201      	movs	r2, #1
    e57e:	4b1b      	ldr	r3, [pc, #108]	; (e5ec <rpc_gnss_event_handler+0x124>)
    e580:	6034      	str	r4, [r6, #0]
    e582:	701a      	strb	r2, [r3, #0]
    e584:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
    e588:	e7d3      	b.n	e532 <rpc_gnss_event_handler+0x6a>
    e58a:	2a00      	cmp	r2, #0
    e58c:	d0dc      	beq.n	e548 <rpc_gnss_event_handler+0x80>
    e58e:	2006      	movs	r0, #6
    e590:	4798      	blx	r3
    e592:	7037      	strb	r7, [r6, #0]
    e594:	e7d8      	b.n	e548 <rpc_gnss_event_handler+0x80>
    e596:	4e17      	ldr	r6, [pc, #92]	; (e5f4 <rpc_gnss_event_handler+0x12c>)
    e598:	6830      	ldr	r0, [r6, #0]
    e59a:	b108      	cbz	r0, e5a0 <rpc_gnss_event_handler+0xd8>
    e59c:	f002 ff52 	bl	11444 <rpc_client_msg_data_rx_free>
    e5a0:	2003      	movs	r0, #3
    e5a2:	682b      	ldr	r3, [r5, #0]
    e5a4:	6034      	str	r4, [r6, #0]
    e5a6:	e7d6      	b.n	e556 <rpc_gnss_event_handler+0x8e>
    e5a8:	4e13      	ldr	r6, [pc, #76]	; (e5f8 <rpc_gnss_event_handler+0x130>)
    e5aa:	6830      	ldr	r0, [r6, #0]
    e5ac:	b108      	cbz	r0, e5b2 <rpc_gnss_event_handler+0xea>
    e5ae:	f002 ff49 	bl	11444 <rpc_client_msg_data_rx_free>
    e5b2:	2004      	movs	r0, #4
    e5b4:	682b      	ldr	r3, [r5, #0]
    e5b6:	6034      	str	r4, [r6, #0]
    e5b8:	e7cd      	b.n	e556 <rpc_gnss_event_handler+0x8e>
    e5ba:	7822      	ldrb	r2, [r4, #0]
    e5bc:	2a03      	cmp	r2, #3
    e5be:	d805      	bhi.n	e5cc <rpc_gnss_event_handler+0x104>
    e5c0:	e8df f002 	tbb	[pc, r2]
    e5c4:	0c0a0802 	.word	0x0c0a0802
    e5c8:	2007      	movs	r0, #7
    e5ca:	4798      	blx	r3
    e5cc:	6830      	ldr	r0, [r6, #0]
    e5ce:	f002 ff39 	bl	11444 <rpc_client_msg_data_rx_free>
    e5d2:	e785      	b.n	e4e0 <rpc_gnss_event_handler+0x18>
    e5d4:	2008      	movs	r0, #8
    e5d6:	e7f8      	b.n	e5ca <rpc_gnss_event_handler+0x102>
    e5d8:	2009      	movs	r0, #9
    e5da:	e7f6      	b.n	e5ca <rpc_gnss_event_handler+0x102>
    e5dc:	200a      	movs	r0, #10
    e5de:	e7f4      	b.n	e5ca <rpc_gnss_event_handler+0x102>
    e5e0:	2000cf20 	.word	0x2000cf20
    e5e4:	2000cf10 	.word	0x2000cf10
    e5e8:	2000cf1c 	.word	0x2000cf1c
    e5ec:	2000d453 	.word	0x2000d453
    e5f0:	2000d454 	.word	0x2000d454
    e5f4:	2000cf18 	.word	0x2000cf18
    e5f8:	2000cf14 	.word	0x2000cf14

0000e5fc <rpc_gnss_init>:
    e5fc:	b508      	push	{r3, lr}
    e5fe:	2300      	movs	r3, #0
    e600:	4a09      	ldr	r2, [pc, #36]	; (e628 <rpc_gnss_init+0x2c>)
    e602:	480a      	ldr	r0, [pc, #40]	; (e62c <rpc_gnss_init+0x30>)
    e604:	7013      	strb	r3, [r2, #0]
    e606:	4a0a      	ldr	r2, [pc, #40]	; (e630 <rpc_gnss_init+0x34>)
    e608:	7013      	strb	r3, [r2, #0]
    e60a:	4a0a      	ldr	r2, [pc, #40]	; (e634 <rpc_gnss_init+0x38>)
    e60c:	7013      	strb	r3, [r2, #0]
    e60e:	4a0a      	ldr	r2, [pc, #40]	; (e638 <rpc_gnss_init+0x3c>)
    e610:	7013      	strb	r3, [r2, #0]
    e612:	4a0a      	ldr	r2, [pc, #40]	; (e63c <rpc_gnss_init+0x40>)
    e614:	6013      	str	r3, [r2, #0]
    e616:	2201      	movs	r2, #1
    e618:	4611      	mov	r1, r2
    e61a:	f7fd f87b 	bl	b714 <nrf_modem_os_sem_init>
    e61e:	2800      	cmp	r0, #0
    e620:	bf18      	it	ne
    e622:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
    e626:	bd08      	pop	{r3, pc}
    e628:	2000d454 	.word	0x2000d454
    e62c:	2000cf28 	.word	0x2000cf28
    e630:	2000d456 	.word	0x2000d456
    e634:	2000d455 	.word	0x2000d455
    e638:	2000d453 	.word	0x2000d453
    e63c:	2000cf10 	.word	0x2000cf10

0000e640 <modem_off>:
    e640:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e642:	2501      	movs	r5, #1
    e644:	4c07      	ldr	r4, [pc, #28]	; (e664 <modem_off+0x24>)
    e646:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    e64a:	6165      	str	r5, [r4, #20]
    e64c:	f002 fb73 	bl	10d36 <nrf_modem_os_busywait>
    e650:	2300      	movs	r3, #0
    e652:	6163      	str	r3, [r4, #20]
    e654:	9301      	str	r3, [sp, #4]
    e656:	6125      	str	r5, [r4, #16]
    e658:	6923      	ldr	r3, [r4, #16]
    e65a:	9301      	str	r3, [sp, #4]
    e65c:	9b01      	ldr	r3, [sp, #4]
    e65e:	b003      	add	sp, #12
    e660:	bd30      	pop	{r4, r5, pc}
    e662:	bf00      	nop
    e664:	40005600 	.word	0x40005600

0000e668 <atomic_set.constprop.0.isra.0>:
    e668:	4b03      	ldr	r3, [pc, #12]	; (e678 <atomic_set.constprop.0.isra.0+0x10>)
    e66a:	e8d3 2fef 	ldaex	r2, [r3]
    e66e:	e8c3 0fe1 	stlex	r1, r0, [r3]
    e672:	2900      	cmp	r1, #0
    e674:	d1f9      	bne.n	e66a <atomic_set.constprop.0.isra.0+0x2>
    e676:	4770      	bx	lr
    e678:	2000cf2c 	.word	0x2000cf2c

0000e67c <nrf_modem_init>:
    e67c:	b513      	push	{r0, r1, r4, lr}
    e67e:	4604      	mov	r4, r0
    e680:	b380      	cbz	r0, e6e4 <nrf_modem_init+0x68>
    e682:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e684:	b38b      	cbz	r3, e6ea <nrf_modem_init+0x6e>
    e686:	2201      	movs	r2, #1
    e688:	4b1b      	ldr	r3, [pc, #108]	; (e6f8 <nrf_modem_init+0x7c>)
    e68a:	e8d3 1fef 	ldaex	r1, [r3]
    e68e:	2900      	cmp	r1, #0
    e690:	d103      	bne.n	e69a <nrf_modem_init+0x1e>
    e692:	e8c3 2fe0 	stlex	r0, r2, [r3]
    e696:	2800      	cmp	r0, #0
    e698:	d1f7      	bne.n	e68a <nrf_modem_init+0xe>
    e69a:	d129      	bne.n	e6f0 <nrf_modem_init+0x74>
    e69c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e69e:	f000 f82d 	bl	e6fc <nrf_modem_fault_handler_set>
    e6a2:	f7fd f889 	bl	b7b8 <nrf_modem_os_init>
    e6a6:	6a23      	ldr	r3, [r4, #32]
    e6a8:	4668      	mov	r0, sp
    e6aa:	9400      	str	r4, [sp, #0]
    e6ac:	f88d 3004 	strb.w	r3, [sp, #4]
    e6b0:	f002 fe65 	bl	1137e <rpc_init>
    e6b4:	4604      	mov	r4, r0
    e6b6:	b958      	cbnz	r0, e6d0 <nrf_modem_init+0x54>
    e6b8:	f7ff fef2 	bl	e4a0 <rpc_at_init>
    e6bc:	4604      	mov	r4, r0
    e6be:	b938      	cbnz	r0, e6d0 <nrf_modem_init+0x54>
    e6c0:	f7ff fc74 	bl	dfac <rpc_ip_init>
    e6c4:	4604      	mov	r4, r0
    e6c6:	b918      	cbnz	r0, e6d0 <nrf_modem_init+0x54>
    e6c8:	f7ff ff98 	bl	e5fc <rpc_gnss_init>
    e6cc:	4604      	mov	r4, r0
    e6ce:	b138      	cbz	r0, e6e0 <nrf_modem_init+0x64>
    e6d0:	f7ff ffb6 	bl	e640 <modem_off>
    e6d4:	2000      	movs	r0, #0
    e6d6:	f7ff ffc7 	bl	e668 <atomic_set.constprop.0.isra.0>
    e6da:	4620      	mov	r0, r4
    e6dc:	b002      	add	sp, #8
    e6de:	bd10      	pop	{r4, pc}
    e6e0:	2002      	movs	r0, #2
    e6e2:	e7f8      	b.n	e6d6 <nrf_modem_init+0x5a>
    e6e4:	f06f 040d 	mvn.w	r4, #13
    e6e8:	e7f7      	b.n	e6da <nrf_modem_init+0x5e>
    e6ea:	f06f 0415 	mvn.w	r4, #21
    e6ee:	e7f4      	b.n	e6da <nrf_modem_init+0x5e>
    e6f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    e6f4:	e7f1      	b.n	e6da <nrf_modem_init+0x5e>
    e6f6:	bf00      	nop
    e6f8:	2000cf2c 	.word	0x2000cf2c

0000e6fc <nrf_modem_fault_handler_set>:
    e6fc:	4b01      	ldr	r3, [pc, #4]	; (e704 <nrf_modem_fault_handler_set+0x8>)
    e6fe:	6018      	str	r0, [r3, #0]
    e700:	4770      	bx	lr
    e702:	bf00      	nop
    e704:	2000cf30 	.word	0x2000cf30

0000e708 <nrf_modem_fault_handler_internal>:
    e708:	b507      	push	{r0, r1, r2, lr}
    e70a:	4b04      	ldr	r3, [pc, #16]	; (e71c <nrf_modem_fault_handler_internal+0x14>)
    e70c:	e9cd 0100 	strd	r0, r1, [sp]
    e710:	681b      	ldr	r3, [r3, #0]
    e712:	4668      	mov	r0, sp
    e714:	4798      	blx	r3
    e716:	b003      	add	sp, #12
    e718:	f85d fb04 	ldr.w	pc, [sp], #4
    e71c:	2000cf30 	.word	0x2000cf30

0000e720 <nrf_modem_state_set>:
    e720:	4b01      	ldr	r3, [pc, #4]	; (e728 <nrf_modem_state_set+0x8>)
    e722:	7018      	strb	r0, [r3, #0]
    e724:	4770      	bx	lr
    e726:	bf00      	nop
    e728:	2000d457 	.word	0x2000d457

0000e72c <nrf_modem_state_is_initialized>:
    e72c:	4b02      	ldr	r3, [pc, #8]	; (e738 <nrf_modem_state_is_initialized+0xc>)
    e72e:	7818      	ldrb	r0, [r3, #0]
    e730:	1e43      	subs	r3, r0, #1
    e732:	4258      	negs	r0, r3
    e734:	4158      	adcs	r0, r3
    e736:	4770      	bx	lr
    e738:	2000d457 	.word	0x2000d457

0000e73c <ipc_trace_init>:
    e73c:	2100      	movs	r1, #0
    e73e:	4b07      	ldr	r3, [pc, #28]	; (e75c <ipc_trace_init+0x20>)
    e740:	2201      	movs	r2, #1
    e742:	7019      	strb	r1, [r3, #0]
    e744:	4b06      	ldr	r3, [pc, #24]	; (e760 <ipc_trace_init+0x24>)
    e746:	7019      	strb	r1, [r3, #0]
    e748:	4b06      	ldr	r3, [pc, #24]	; (e764 <ipc_trace_init+0x28>)
    e74a:	6019      	str	r1, [r3, #0]
    e74c:	4b06      	ldr	r3, [pc, #24]	; (e768 <ipc_trace_init+0x2c>)
    e74e:	6019      	str	r1, [r3, #0]
    e750:	4b06      	ldr	r3, [pc, #24]	; (e76c <ipc_trace_init+0x30>)
    e752:	6018      	str	r0, [r3, #0]
    e754:	4806      	ldr	r0, [pc, #24]	; (e770 <ipc_trace_init+0x34>)
    e756:	f7fc bfdd 	b.w	b714 <nrf_modem_os_sem_init>
    e75a:	bf00      	nop
    e75c:	2000d458 	.word	0x2000d458
    e760:	2000d459 	.word	0x2000d459
    e764:	2000cf38 	.word	0x2000cf38
    e768:	2000cf3c 	.word	0x2000cf3c
    e76c:	2000cf4c 	.word	0x2000cf4c
    e770:	2000cf34 	.word	0x2000cf34

0000e774 <ipc_trace_handler>:
    e774:	b470      	push	{r4, r5, r6}
    e776:	4b2d      	ldr	r3, [pc, #180]	; (e82c <ipc_trace_handler+0xb8>)
    e778:	681b      	ldr	r3, [r3, #0]
    e77a:	6919      	ldr	r1, [r3, #16]
    e77c:	6958      	ldr	r0, [r3, #20]
    e77e:	7c1a      	ldrb	r2, [r3, #16]
    e780:	2200      	movs	r2, #0
    e782:	741a      	strb	r2, [r3, #16]
    e784:	7c5c      	ldrb	r4, [r3, #17]
    e786:	745a      	strb	r2, [r3, #17]
    e788:	7c9c      	ldrb	r4, [r3, #18]
    e78a:	749a      	strb	r2, [r3, #18]
    e78c:	7cdc      	ldrb	r4, [r3, #19]
    e78e:	74da      	strb	r2, [r3, #19]
    e790:	7d1c      	ldrb	r4, [r3, #20]
    e792:	751a      	strb	r2, [r3, #20]
    e794:	7d5c      	ldrb	r4, [r3, #21]
    e796:	755a      	strb	r2, [r3, #21]
    e798:	7d9c      	ldrb	r4, [r3, #22]
    e79a:	2903      	cmp	r1, #3
    e79c:	759a      	strb	r2, [r3, #22]
    e79e:	7ddc      	ldrb	r4, [r3, #23]
    e7a0:	75da      	strb	r2, [r3, #23]
    e7a2:	d029      	beq.n	e7f8 <ipc_trace_handler+0x84>
    e7a4:	2904      	cmp	r1, #4
    e7a6:	d033      	beq.n	e810 <ipc_trace_handler+0x9c>
    e7a8:	2901      	cmp	r1, #1
    e7aa:	d12f      	bne.n	e80c <ipc_trace_handler+0x98>
    e7ac:	6885      	ldr	r5, [r0, #8]
    e7ae:	4e20      	ldr	r6, [pc, #128]	; (e830 <ipc_trace_handler+0xbc>)
    e7b0:	4295      	cmp	r5, r2
    e7b2:	d110      	bne.n	e7d6 <ipc_trace_handler+0x62>
    e7b4:	2101      	movs	r1, #1
    e7b6:	7a1a      	ldrb	r2, [r3, #8]
    e7b8:	2200      	movs	r2, #0
    e7ba:	7219      	strb	r1, [r3, #8]
    e7bc:	7a59      	ldrb	r1, [r3, #9]
    e7be:	725a      	strb	r2, [r3, #9]
    e7c0:	7a99      	ldrb	r1, [r3, #10]
    e7c2:	729a      	strb	r2, [r3, #10]
    e7c4:	7ada      	ldrb	r2, [r3, #11]
    e7c6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    e7ca:	72da      	strb	r2, [r3, #11]
    e7cc:	4b19      	ldr	r3, [pc, #100]	; (e834 <ipc_trace_handler+0xc0>)
    e7ce:	bc70      	pop	{r4, r5, r6}
    e7d0:	6818      	ldr	r0, [r3, #0]
    e7d2:	f002 baba 	b.w	10d4a <nrf_modem_os_sem_give>
    e7d6:	1c91      	adds	r1, r2, #2
    e7d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    e7dc:	684c      	ldr	r4, [r1, #4]
    e7de:	7821      	ldrb	r1, [r4, #0]
    e7e0:	2962      	cmp	r1, #98	; 0x62
    e7e2:	d007      	beq.n	e7f4 <ipc_trace_handler+0x80>
    e7e4:	3963      	subs	r1, #99	; 0x63
    e7e6:	bf18      	it	ne
    e7e8:	2101      	movne	r1, #1
    e7ea:	0049      	lsls	r1, r1, #1
    e7ec:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
    e7f0:	3201      	adds	r2, #1
    e7f2:	e7dd      	b.n	e7b0 <ipc_trace_handler+0x3c>
    e7f4:	2101      	movs	r1, #1
    e7f6:	e7f9      	b.n	e7ec <ipc_trace_handler+0x78>
    e7f8:	7a18      	ldrb	r0, [r3, #8]
    e7fa:	7219      	strb	r1, [r3, #8]
    e7fc:	7a59      	ldrb	r1, [r3, #9]
    e7fe:	725a      	strb	r2, [r3, #9]
    e800:	7a99      	ldrb	r1, [r3, #10]
    e802:	729a      	strb	r2, [r3, #10]
    e804:	7ada      	ldrb	r2, [r3, #11]
    e806:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    e80a:	72da      	strb	r2, [r3, #11]
    e80c:	bc70      	pop	{r4, r5, r6}
    e80e:	4770      	bx	lr
    e810:	7a18      	ldrb	r0, [r3, #8]
    e812:	7219      	strb	r1, [r3, #8]
    e814:	7a59      	ldrb	r1, [r3, #9]
    e816:	725a      	strb	r2, [r3, #9]
    e818:	7a99      	ldrb	r1, [r3, #10]
    e81a:	729a      	strb	r2, [r3, #10]
    e81c:	7ada      	ldrb	r2, [r3, #11]
    e81e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    e822:	72da      	strb	r2, [r3, #11]
    e824:	2201      	movs	r2, #1
    e826:	4b04      	ldr	r3, [pc, #16]	; (e838 <ipc_trace_handler+0xc4>)
    e828:	701a      	strb	r2, [r3, #0]
    e82a:	e7ef      	b.n	e80c <ipc_trace_handler+0x98>
    e82c:	2000cf4c 	.word	0x2000cf4c
    e830:	2000cf40 	.word	0x2000cf40
    e834:	2000cf34 	.word	0x2000cf34
    e838:	2000d459 	.word	0x2000d459

0000e83c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    e83c:	4b01      	ldr	r3, [pc, #4]	; (e844 <z_impl_z_errno+0x8>)
    e83e:	6898      	ldr	r0, [r3, #8]
}
    e840:	3060      	adds	r0, #96	; 0x60
    e842:	4770      	bx	lr
    e844:	2000cf50 	.word	0x2000cf50

0000e848 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e848:	4b0f      	ldr	r3, [pc, #60]	; (e888 <z_sys_init_run_level+0x40>)
{
    e84a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e84c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    e850:	3001      	adds	r0, #1
    e852:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    e856:	42a6      	cmp	r6, r4
    e858:	d800      	bhi.n	e85c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    e85a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    e85c:	e9d4 3500 	ldrd	r3, r5, [r4]
    e860:	4628      	mov	r0, r5
    e862:	4798      	blx	r3
		if (dev != NULL) {
    e864:	b16d      	cbz	r5, e882 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    e866:	b138      	cbz	r0, e878 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    e868:	2800      	cmp	r0, #0
    e86a:	bfb8      	it	lt
    e86c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    e86e:	28ff      	cmp	r0, #255	; 0xff
    e870:	bfa8      	it	ge
    e872:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    e874:	68eb      	ldr	r3, [r5, #12]
    e876:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    e878:	68ea      	ldr	r2, [r5, #12]
    e87a:	7853      	ldrb	r3, [r2, #1]
    e87c:	f043 0301 	orr.w	r3, r3, #1
    e880:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e882:	3408      	adds	r4, #8
    e884:	e7e7      	b.n	e856 <z_sys_init_run_level+0xe>
    e886:	bf00      	nop
    e888:	0001274c 	.word	0x0001274c

0000e88c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    e88c:	2201      	movs	r2, #1
{
    e88e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    e890:	4b09      	ldr	r3, [pc, #36]	; (e8b8 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    e892:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    e894:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    e896:	f7ff ffd7 	bl	e848 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    e89a:	f001 f8e9 	bl	fa70 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    e89e:	2004      	movs	r0, #4
    e8a0:	f7ff ffd2 	bl	e848 <z_sys_init_run_level>

	z_init_static_threads();
    e8a4:	f000 f92a 	bl	eafc <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    e8a8:	f003 f9fd 	bl	11ca6 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    e8ac:	4a03      	ldr	r2, [pc, #12]	; (e8bc <bg_thread_main+0x30>)
    e8ae:	7b13      	ldrb	r3, [r2, #12]
    e8b0:	f023 0301 	bic.w	r3, r3, #1
    e8b4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    e8b6:	bd08      	pop	{r3, pc}
    e8b8:	2000d45a 	.word	0x2000d45a
    e8bc:	2000c858 	.word	0x2000c858

0000e8c0 <z_bss_zero>:
{
    e8c0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    e8c2:	4803      	ldr	r0, [pc, #12]	; (e8d0 <z_bss_zero+0x10>)
    e8c4:	4a03      	ldr	r2, [pc, #12]	; (e8d4 <z_bss_zero+0x14>)
    e8c6:	2100      	movs	r1, #0
    e8c8:	1a12      	subs	r2, r2, r0
    e8ca:	f002 ff0d 	bl	116e8 <z_early_memset>
}
    e8ce:	bd08      	pop	{r3, pc}
    e8d0:	2000c788 	.word	0x2000c788
    e8d4:	2000d45c 	.word	0x2000d45c

0000e8d8 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    e8d8:	2300      	movs	r3, #0
    e8da:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    e8dc:	b570      	push	{r4, r5, r6, lr}
    e8de:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    e8e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e8e4:	220f      	movs	r2, #15
    e8e6:	9301      	str	r3, [sp, #4]
    e8e8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    e8ec:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    e8ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    e8f2:	4d0e      	ldr	r5, [pc, #56]	; (e92c <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    e8f4:	4e0e      	ldr	r6, [pc, #56]	; (e930 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    e8f6:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    e8fa:	490e      	ldr	r1, [pc, #56]	; (e934 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    e8fc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    e900:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    e902:	fb02 1100 	mla	r1, r2, r0, r1
    e906:	4b0c      	ldr	r3, [pc, #48]	; (e938 <z_init_cpu+0x60>)
    e908:	4630      	mov	r0, r6
    e90a:	9500      	str	r5, [sp, #0]
    e90c:	f000 f89a 	bl	ea44 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e910:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    e912:	752c      	strb	r4, [r5, #20]
    e914:	f023 0304 	bic.w	r3, r3, #4
    e918:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    e91a:	4b08      	ldr	r3, [pc, #32]	; (e93c <z_init_cpu+0x64>)
    e91c:	3401      	adds	r4, #1
    e91e:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    e922:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    e924:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    e926:	b006      	add	sp, #24
    e928:	bd70      	pop	{r4, r5, r6, pc}
    e92a:	bf00      	nop
    e92c:	2000cf50 	.word	0x2000cf50
    e930:	2000c7d8 	.word	0x2000c7d8
    e934:	2000dd60 	.word	0x2000dd60
    e938:	0000ebb5 	.word	0x0000ebb5
    e93c:	2000d560 	.word	0x2000d560

0000e940 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    e940:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    e942:	2000      	movs	r0, #0
{
    e944:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    e946:	f7ff ff7f 	bl	e848 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    e94a:	4b2e      	ldr	r3, [pc, #184]	; (ea04 <z_cstart+0xc4>)
	uint32_t msp =
    e94c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    e950:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    e954:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e958:	2400      	movs	r4, #0
    e95a:	23e0      	movs	r3, #224	; 0xe0
    e95c:	4d2a      	ldr	r5, [pc, #168]	; (ea08 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    e95e:	4e2b      	ldr	r6, [pc, #172]	; (ea0c <z_cstart+0xcc>)
    e960:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    e964:	77ec      	strb	r4, [r5, #31]
    e966:	762c      	strb	r4, [r5, #24]
    e968:	766c      	strb	r4, [r5, #25]
    e96a:	76ac      	strb	r4, [r5, #26]
    e96c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    e970:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e972:	4f27      	ldr	r7, [pc, #156]	; (ea10 <z_cstart+0xd0>)
    e974:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    e978:	626b      	str	r3, [r5, #36]	; 0x24
    e97a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    e97e:	f7fb fc6f 	bl	a260 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    e982:	f7fb fa4f 	bl	9e24 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    e986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e98a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    e98c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    e98e:	f7fb fe71 	bl	a674 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    e992:	f7fb fd17 	bl	a3c4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    e996:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    e99a:	ad06      	add	r5, sp, #24
    e99c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    e99e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    e9a2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    e9a6:	f001 f845 	bl	fa34 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    e9aa:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    e9ac:	f002 fe75 	bl	1169a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    e9b0:	2001      	movs	r0, #1
    e9b2:	f7ff ff49 	bl	e848 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    e9b6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    e9b8:	4d16      	ldr	r5, [pc, #88]	; (ea14 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    e9ba:	f7ff ff45 	bl	e848 <z_sys_init_run_level>
	z_sched_init();
    e9be:	f000 fdb5 	bl	f52c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e9c2:	4b15      	ldr	r3, [pc, #84]	; (ea18 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    e9c4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e9c6:	9305      	str	r3, [sp, #20]
    e9c8:	2301      	movs	r3, #1
    e9ca:	4914      	ldr	r1, [pc, #80]	; (ea1c <z_cstart+0xdc>)
    e9cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e9d0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    e9d4:	4628      	mov	r0, r5
    e9d6:	463b      	mov	r3, r7
    e9d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e9dc:	9400      	str	r4, [sp, #0]
    e9de:	f000 f831 	bl	ea44 <z_setup_new_thread>
    e9e2:	4606      	mov	r6, r0
    e9e4:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    e9e6:	4628      	mov	r0, r5
    e9e8:	f022 0204 	bic.w	r2, r2, #4
    e9ec:	736a      	strb	r2, [r5, #13]
    e9ee:	f003 f834 	bl	11a5a <z_ready_thread>
	z_init_cpu(0);
    e9f2:	4620      	mov	r0, r4
    e9f4:	f7ff ff70 	bl	e8d8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    e9f8:	463a      	mov	r2, r7
    e9fa:	4631      	mov	r1, r6
    e9fc:	4628      	mov	r0, r5
    e9fe:	f7fb fafb 	bl	9ff8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    ea02:	bf00      	nop
    ea04:	2000d560 	.word	0x2000d560
    ea08:	e000ed00 	.word	0xe000ed00
    ea0c:	2000cf50 	.word	0x2000cf50
    ea10:	0000e88d 	.word	0x0000e88d
    ea14:	2000c858 	.word	0x2000c858
    ea18:	00012a91 	.word	0x00012a91
    ea1c:	2000dea0 	.word	0x2000dea0

0000ea20 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    ea20:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ea22:	4c06      	ldr	r4, [pc, #24]	; (ea3c <statics_init+0x1c>)
    ea24:	4d06      	ldr	r5, [pc, #24]	; (ea40 <statics_init+0x20>)
    ea26:	42ac      	cmp	r4, r5
    ea28:	d301      	bcc.n	ea2e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    ea2a:	2000      	movs	r0, #0
    ea2c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ea2e:	4620      	mov	r0, r4
    ea30:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    ea34:	f002 fe5c 	bl	116f0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ea38:	3414      	adds	r4, #20
    ea3a:	e7f4      	b.n	ea26 <statics_init+0x6>
    ea3c:	2000c710 	.word	0x2000c710
    ea40:	2000c738 	.word	0x2000c738

0000ea44 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    ea44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    ea48:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    ea4a:	f100 0558 	add.w	r5, r0, #88	; 0x58
    ea4e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    ea50:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    ea52:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    ea56:	2500      	movs	r5, #0
{
    ea58:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    ea5a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    ea5c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    ea5e:	e9c0 5506 	strd	r5, r5, [r0, #24]
    ea62:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    ea64:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    ea66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    ea68:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    ea6c:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    ea70:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    ea72:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    ea74:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    ea76:	9202      	str	r2, [sp, #8]
    ea78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    ea7a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    ea7e:	9201      	str	r2, [sp, #4]
    ea80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ea82:	9200      	str	r2, [sp, #0]
    ea84:	4642      	mov	r2, r8
    ea86:	f7fb fa99 	bl	9fbc <arch_new_thread>
	if (!_current) {
    ea8a:	4b05      	ldr	r3, [pc, #20]	; (eaa0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    ea8c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    ea8e:	689b      	ldr	r3, [r3, #8]
    ea90:	b103      	cbz	r3, ea94 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    ea92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    ea94:	4640      	mov	r0, r8
    ea96:	6723      	str	r3, [r4, #112]	; 0x70
    ea98:	b004      	add	sp, #16
    ea9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea9e:	bf00      	nop
    eaa0:	2000cf50 	.word	0x2000cf50

0000eaa4 <z_impl_k_thread_create>:
{
    eaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    eaa6:	2500      	movs	r5, #0
{
    eaa8:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    eaaa:	9505      	str	r5, [sp, #20]
    eaac:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    eaae:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    eab2:	9504      	str	r5, [sp, #16]
    eab4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    eab6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    eab8:	9503      	str	r5, [sp, #12]
    eaba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    eabc:	9502      	str	r5, [sp, #8]
    eabe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    eac0:	9501      	str	r5, [sp, #4]
    eac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    eac4:	9500      	str	r5, [sp, #0]
    eac6:	f7ff ffbd 	bl	ea44 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    eaca:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    eace:	bf08      	it	eq
    ead0:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    ead4:	d005      	beq.n	eae2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    ead6:	ea56 0307 	orrs.w	r3, r6, r7
    eada:	d105      	bne.n	eae8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    eadc:	4620      	mov	r0, r4
    eade:	f000 fca5 	bl	f42c <z_sched_start>
}
    eae2:	4620      	mov	r0, r4
    eae4:	b007      	add	sp, #28
    eae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    eae8:	463a      	mov	r2, r7
    eaea:	4633      	mov	r3, r6
    eaec:	4902      	ldr	r1, [pc, #8]	; (eaf8 <z_impl_k_thread_create+0x54>)
    eaee:	f104 0018 	add.w	r0, r4, #24
    eaf2:	f000 fea3 	bl	f83c <z_add_timeout>
    eaf6:	e7f4      	b.n	eae2 <z_impl_k_thread_create+0x3e>
    eaf8:	000119c7 	.word	0x000119c7

0000eafc <z_init_static_threads>:
{
    eafc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eb00:	4c29      	ldr	r4, [pc, #164]	; (eba8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    eb02:	4d2a      	ldr	r5, [pc, #168]	; (ebac <z_init_static_threads+0xb0>)
{
    eb04:	b087      	sub	sp, #28
    eb06:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    eb08:	42ae      	cmp	r6, r5
    eb0a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    eb0e:	d30f      	bcc.n	eb30 <z_init_static_threads+0x34>
	k_sched_lock();
    eb10:	f000 fcdc 	bl	f4cc <k_sched_lock>
    eb14:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    eb18:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    eb1c:	4c22      	ldr	r4, [pc, #136]	; (eba8 <z_init_static_threads+0xac>)
    eb1e:	f8df 9090 	ldr.w	r9, [pc, #144]	; ebb0 <z_init_static_threads+0xb4>
    eb22:	42ac      	cmp	r4, r5
    eb24:	d320      	bcc.n	eb68 <z_init_static_threads+0x6c>
}
    eb26:	b007      	add	sp, #28
    eb28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    eb2c:	f000 bce2 	b.w	f4f4 <k_sched_unlock>
		z_setup_new_thread(
    eb30:	f854 3c04 	ldr.w	r3, [r4, #-4]
    eb34:	9305      	str	r3, [sp, #20]
    eb36:	f854 3c10 	ldr.w	r3, [r4, #-16]
    eb3a:	9304      	str	r3, [sp, #16]
    eb3c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    eb40:	9303      	str	r3, [sp, #12]
    eb42:	f854 3c18 	ldr.w	r3, [r4, #-24]
    eb46:	9302      	str	r3, [sp, #8]
    eb48:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    eb4c:	9301      	str	r3, [sp, #4]
    eb4e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    eb52:	9300      	str	r3, [sp, #0]
    eb54:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    eb58:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    eb5c:	f7ff ff72 	bl	ea44 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    eb60:	f854 3c30 	ldr.w	r3, [r4, #-48]
    eb64:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    eb66:	e7ce      	b.n	eb06 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    eb68:	6a63      	ldr	r3, [r4, #36]	; 0x24
    eb6a:	1c5a      	adds	r2, r3, #1
    eb6c:	d00d      	beq.n	eb8a <z_init_static_threads+0x8e>
    eb6e:	2100      	movs	r1, #0
    eb70:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    eb72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    eb76:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    eb7a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    eb7e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    eb82:	d104      	bne.n	eb8e <z_init_static_threads+0x92>
	z_sched_start(thread);
    eb84:	4640      	mov	r0, r8
    eb86:	f000 fc51 	bl	f42c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    eb8a:	3430      	adds	r4, #48	; 0x30
    eb8c:	e7c9      	b.n	eb22 <z_init_static_threads+0x26>
    eb8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eb92:	2300      	movs	r3, #0
    eb94:	f7fa f8b8 	bl	8d08 <__aeabi_uldivmod>
    eb98:	4602      	mov	r2, r0
    eb9a:	460b      	mov	r3, r1
    eb9c:	f108 0018 	add.w	r0, r8, #24
    eba0:	4649      	mov	r1, r9
    eba2:	f000 fe4b 	bl	f83c <z_add_timeout>
    eba6:	e7f0      	b.n	eb8a <z_init_static_threads+0x8e>
    eba8:	00012330 	.word	0x00012330
    ebac:	00012330 	.word	0x00012330
    ebb0:	000119c7 	.word	0x000119c7

0000ebb4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ebb4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    ebb6:	4c0b      	ldr	r4, [pc, #44]	; (ebe4 <idle+0x30>)
    ebb8:	4d0b      	ldr	r5, [pc, #44]	; (ebe8 <idle+0x34>)
	__asm__ volatile(
    ebba:	f04f 0220 	mov.w	r2, #32
    ebbe:	f3ef 8311 	mrs	r3, BASEPRI
    ebc2:	f382 8812 	msr	BASEPRI_MAX, r2
    ebc6:	f3bf 8f6f 	isb	sy
    ebca:	f002 ffe5 	bl	11b98 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ebce:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    ebd0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ebd2:	b913      	cbnz	r3, ebda <idle+0x26>
	arch_cpu_idle();
    ebd4:	f7fb f92c 	bl	9e30 <arch_cpu_idle>
}
    ebd8:	e7ef      	b.n	ebba <idle+0x6>
    ebda:	f7fb f85b 	bl	9c94 <pm_system_suspend>
    ebde:	2800      	cmp	r0, #0
    ebe0:	d1eb      	bne.n	ebba <idle+0x6>
    ebe2:	e7f7      	b.n	ebd4 <idle+0x20>
    ebe4:	2000cf50 	.word	0x2000cf50
    ebe8:	2000d45a 	.word	0x2000d45a

0000ebec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ebec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ebf0:	4604      	mov	r4, r0
    ebf2:	4617      	mov	r7, r2
    ebf4:	461e      	mov	r6, r3
    ebf6:	f04f 0320 	mov.w	r3, #32
    ebfa:	f3ef 8811 	mrs	r8, BASEPRI
    ebfe:	f383 8812 	msr	BASEPRI_MAX, r3
    ec02:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ec06:	68c3      	ldr	r3, [r0, #12]
    ec08:	4a33      	ldr	r2, [pc, #204]	; (ecd8 <z_impl_k_mutex_lock+0xec>)
    ec0a:	b17b      	cbz	r3, ec2c <z_impl_k_mutex_lock+0x40>
    ec0c:	6880      	ldr	r0, [r0, #8]
    ec0e:	6891      	ldr	r1, [r2, #8]
    ec10:	4288      	cmp	r0, r1
    ec12:	d019      	beq.n	ec48 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    ec14:	ea57 0306 	orrs.w	r3, r7, r6
    ec18:	d118      	bne.n	ec4c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    ec1a:	f388 8811 	msr	BASEPRI, r8
    ec1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    ec22:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    ec26:	b002      	add	sp, #8
    ec28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    ec2c:	6891      	ldr	r1, [r2, #8]
    ec2e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    ec32:	3301      	adds	r3, #1
    ec34:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    ec36:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ec38:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    ec3a:	60a3      	str	r3, [r4, #8]
    ec3c:	f388 8811 	msr	BASEPRI, r8
    ec40:	f3bf 8f6f 	isb	sy
		return 0;
    ec44:	2000      	movs	r0, #0
    ec46:	e7ee      	b.n	ec26 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    ec48:	6921      	ldr	r1, [r4, #16]
    ec4a:	e7f2      	b.n	ec32 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ec4c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    ec50:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ec54:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    ec58:	4299      	cmp	r1, r3
    ec5a:	bfa8      	it	ge
    ec5c:	4619      	movge	r1, r3
    ec5e:	4291      	cmp	r1, r2
    ec60:	bfb8      	it	lt
    ec62:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ec64:	428b      	cmp	r3, r1
    ec66:	dd2e      	ble.n	ecc6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    ec68:	f002 fdd0 	bl	1180c <adjust_owner_prio.isra.0>
    ec6c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ec6e:	4622      	mov	r2, r4
    ec70:	4641      	mov	r1, r8
    ec72:	e9cd 7600 	strd	r7, r6, [sp]
    ec76:	4819      	ldr	r0, [pc, #100]	; (ecdc <z_impl_k_mutex_lock+0xf0>)
    ec78:	f000 fb62 	bl	f340 <z_pend_curr>
	if (got_mutex == 0) {
    ec7c:	2800      	cmp	r0, #0
    ec7e:	d0e1      	beq.n	ec44 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    ec80:	f04f 0320 	mov.w	r3, #32
    ec84:	f3ef 8611 	mrs	r6, BASEPRI
    ec88:	f383 8812 	msr	BASEPRI_MAX, r3
    ec8c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    ec90:	68a0      	ldr	r0, [r4, #8]
    ec92:	b1d0      	cbz	r0, ecca <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ec94:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ec96:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ec98:	429c      	cmp	r4, r3
    ec9a:	d00a      	beq.n	ecb2 <z_impl_k_mutex_lock+0xc6>
    ec9c:	b14b      	cbz	r3, ecb2 <z_impl_k_mutex_lock+0xc6>
    ec9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    eca2:	4299      	cmp	r1, r3
    eca4:	bfa8      	it	ge
    eca6:	4619      	movge	r1, r3
    eca8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    ecac:	4299      	cmp	r1, r3
    ecae:	bfb8      	it	lt
    ecb0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    ecb2:	f002 fdab 	bl	1180c <adjust_owner_prio.isra.0>
    ecb6:	b140      	cbz	r0, ecca <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    ecb8:	4631      	mov	r1, r6
    ecba:	4808      	ldr	r0, [pc, #32]	; (ecdc <z_impl_k_mutex_lock+0xf0>)
    ecbc:	f000 fba4 	bl	f408 <z_reschedule>
	return -EAGAIN;
    ecc0:	f06f 000a 	mvn.w	r0, #10
    ecc4:	e7af      	b.n	ec26 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    ecc6:	2500      	movs	r5, #0
    ecc8:	e7d1      	b.n	ec6e <z_impl_k_mutex_lock+0x82>
	if (resched) {
    ecca:	2d00      	cmp	r5, #0
    eccc:	d1f4      	bne.n	ecb8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    ecce:	f386 8811 	msr	BASEPRI, r6
    ecd2:	f3bf 8f6f 	isb	sy
    ecd6:	e7f3      	b.n	ecc0 <z_impl_k_mutex_lock+0xd4>
    ecd8:	2000cf50 	.word	0x2000cf50
    ecdc:	2000d45b 	.word	0x2000d45b

0000ece0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    ece0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    ece2:	6883      	ldr	r3, [r0, #8]
{
    ece4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    ece6:	b36b      	cbz	r3, ed44 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    ece8:	4a19      	ldr	r2, [pc, #100]	; (ed50 <z_impl_k_mutex_unlock+0x70>)
    ecea:	6892      	ldr	r2, [r2, #8]
    ecec:	4293      	cmp	r3, r2
    ecee:	d12c      	bne.n	ed4a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    ecf0:	68c3      	ldr	r3, [r0, #12]
    ecf2:	2b01      	cmp	r3, #1
    ecf4:	d903      	bls.n	ecfe <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    ecf6:	3b01      	subs	r3, #1
    ecf8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    ecfa:	2000      	movs	r0, #0
}
    ecfc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    ecfe:	f04f 0320 	mov.w	r3, #32
    ed02:	f3ef 8511 	mrs	r5, BASEPRI
    ed06:	f383 8812 	msr	BASEPRI_MAX, r3
    ed0a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ed0e:	6901      	ldr	r1, [r0, #16]
    ed10:	6880      	ldr	r0, [r0, #8]
    ed12:	f002 fd7b 	bl	1180c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ed16:	4620      	mov	r0, r4
    ed18:	f002 feaf 	bl	11a7a <z_unpend_first_thread>
	mutex->owner = new_owner;
    ed1c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ed1e:	b158      	cbz	r0, ed38 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    ed20:	f990 200e 	ldrsb.w	r2, [r0, #14]
    ed24:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ed26:	2200      	movs	r2, #0
    ed28:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    ed2a:	f002 fe96 	bl	11a5a <z_ready_thread>
		z_reschedule(&lock, key);
    ed2e:	4629      	mov	r1, r5
    ed30:	4808      	ldr	r0, [pc, #32]	; (ed54 <z_impl_k_mutex_unlock+0x74>)
    ed32:	f000 fb69 	bl	f408 <z_reschedule>
    ed36:	e7e0      	b.n	ecfa <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    ed38:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    ed3a:	f385 8811 	msr	BASEPRI, r5
    ed3e:	f3bf 8f6f 	isb	sy
    ed42:	e7da      	b.n	ecfa <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    ed44:	f06f 0015 	mvn.w	r0, #21
    ed48:	e7d8      	b.n	ecfc <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    ed4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ed4e:	e7d5      	b.n	ecfc <z_impl_k_mutex_unlock+0x1c>
    ed50:	2000cf50 	.word	0x2000cf50
    ed54:	2000d45b 	.word	0x2000d45b

0000ed58 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    ed58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ed5a:	4611      	mov	r1, r2
	__asm__ volatile(
    ed5c:	f04f 0220 	mov.w	r2, #32
    ed60:	f3ef 8511 	mrs	r5, BASEPRI
    ed64:	f382 8812 	msr	BASEPRI_MAX, r2
    ed68:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    ed6c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    ed6e:	b19c      	cbz	r4, ed98 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ed70:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ed72:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ed74:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ed78:	4294      	cmp	r4, r2
	list->head = node;
    ed7a:	6003      	str	r3, [r0, #0]
	list->tail = node;
    ed7c:	bf08      	it	eq
    ed7e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    ed80:	2101      	movs	r1, #1
    ed82:	4620      	mov	r0, r4
    ed84:	f002 fdb3 	bl	118ee <z_queue_node_peek>
    ed88:	4604      	mov	r4, r0
	__asm__ volatile(
    ed8a:	f385 8811 	msr	BASEPRI, r5
    ed8e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    ed92:	4620      	mov	r0, r4
    ed94:	b003      	add	sp, #12
    ed96:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ed98:	ea51 0203 	orrs.w	r2, r1, r3
    ed9c:	d0f5      	beq.n	ed8a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    ed9e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    eda2:	e9cd 1300 	strd	r1, r3, [sp]
    eda6:	4610      	mov	r0, r2
    eda8:	4629      	mov	r1, r5
    edaa:	f000 fac9 	bl	f340 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    edae:	2800      	cmp	r0, #0
    edb0:	d1ef      	bne.n	ed92 <z_impl_k_queue_get+0x3a>
    edb2:	4b02      	ldr	r3, [pc, #8]	; (edbc <z_impl_k_queue_get+0x64>)
    edb4:	689b      	ldr	r3, [r3, #8]
    edb6:	695c      	ldr	r4, [r3, #20]
    edb8:	e7eb      	b.n	ed92 <z_impl_k_queue_get+0x3a>
    edba:	bf00      	nop
    edbc:	2000cf50 	.word	0x2000cf50

0000edc0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    edc0:	b538      	push	{r3, r4, r5, lr}
    edc2:	4604      	mov	r4, r0
	__asm__ volatile(
    edc4:	f04f 0320 	mov.w	r3, #32
    edc8:	f3ef 8511 	mrs	r5, BASEPRI
    edcc:	f383 8812 	msr	BASEPRI_MAX, r3
    edd0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    edd4:	f002 fe51 	bl	11a7a <z_unpend_first_thread>

	if (thread != NULL) {
    edd8:	b148      	cbz	r0, edee <z_impl_k_sem_give+0x2e>
    edda:	2200      	movs	r2, #0
    eddc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    edde:	f002 fe3c 	bl	11a5a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    ede2:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    ede4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    ede8:	4804      	ldr	r0, [pc, #16]	; (edfc <z_impl_k_sem_give+0x3c>)
    edea:	f000 bb0d 	b.w	f408 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    edee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    edf2:	429a      	cmp	r2, r3
    edf4:	bf18      	it	ne
    edf6:	3301      	addne	r3, #1
    edf8:	60a3      	str	r3, [r4, #8]
}
    edfa:	e7f2      	b.n	ede2 <z_impl_k_sem_give+0x22>
    edfc:	2000d45b 	.word	0x2000d45b

0000ee00 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    ee00:	b513      	push	{r0, r1, r4, lr}
    ee02:	f04f 0420 	mov.w	r4, #32
    ee06:	f3ef 8111 	mrs	r1, BASEPRI
    ee0a:	f384 8812 	msr	BASEPRI_MAX, r4
    ee0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    ee12:	6884      	ldr	r4, [r0, #8]
    ee14:	b144      	cbz	r4, ee28 <z_impl_k_sem_take+0x28>
		sem->count--;
    ee16:	3c01      	subs	r4, #1
    ee18:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    ee1a:	f381 8811 	msr	BASEPRI, r1
    ee1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    ee22:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    ee24:	b002      	add	sp, #8
    ee26:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ee28:	ea52 0403 	orrs.w	r4, r2, r3
    ee2c:	d106      	bne.n	ee3c <z_impl_k_sem_take+0x3c>
    ee2e:	f381 8811 	msr	BASEPRI, r1
    ee32:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    ee36:	f06f 000f 	mvn.w	r0, #15
    ee3a:	e7f3      	b.n	ee24 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ee3c:	e9cd 2300 	strd	r2, r3, [sp]
    ee40:	4602      	mov	r2, r0
    ee42:	4802      	ldr	r0, [pc, #8]	; (ee4c <z_impl_k_sem_take+0x4c>)
    ee44:	f000 fa7c 	bl	f340 <z_pend_curr>
	return ret;
    ee48:	e7ec      	b.n	ee24 <z_impl_k_sem_take+0x24>
    ee4a:	bf00      	nop
    ee4c:	2000d45b 	.word	0x2000d45b

0000ee50 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee54:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    ee56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ee5a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return list->head;
    ee5e:	4e48      	ldr	r6, [pc, #288]	; (ef80 <work_queue_main+0x130>)
{
    ee60:	b085      	sub	sp, #20
	__asm__ volatile(
    ee62:	f04f 0320 	mov.w	r3, #32
    ee66:	f3ef 8711 	mrs	r7, BASEPRI
    ee6a:	f383 8812 	msr	BASEPRI_MAX, r3
    ee6e:	f3bf 8f6f 	isb	sy
    ee72:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
    ee76:	b98d      	cbnz	r5, ee9c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    ee78:	2102      	movs	r1, #2
    ee7a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    ee7e:	f002 fd59 	bl	11934 <flag_test_and_clear>
    ee82:	2800      	cmp	r0, #0
    ee84:	d143      	bne.n	ef0e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    ee86:	2300      	movs	r3, #0
    ee88:	4639      	mov	r1, r7
    ee8a:	e9cd 8900 	strd	r8, r9, [sp]
    ee8e:	9302      	str	r3, [sp, #8]
    ee90:	f104 0288 	add.w	r2, r4, #136	; 0x88
    ee94:	483b      	ldr	r0, [pc, #236]	; (ef84 <work_queue_main+0x134>)
    ee96:	f000 fc57 	bl	f748 <z_sched_wait>
			continue;
    ee9a:	e7e2      	b.n	ee62 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ee9c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    eea0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    eea2:	4295      	cmp	r5, r2
	list->head = node;
    eea4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = node;
    eea8:	bf08      	it	eq
    eeaa:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    eeae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    eeb2:	f043 0302 	orr.w	r3, r3, #2
    eeb6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    eeba:	68eb      	ldr	r3, [r5, #12]
    eebc:	f023 0304 	bic.w	r3, r3, #4
    eec0:	f043 0301 	orr.w	r3, r3, #1
    eec4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    eec6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    eec8:	f387 8811 	msr	BASEPRI, r7
    eecc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    eed0:	4628      	mov	r0, r5
    eed2:	4798      	blx	r3
	__asm__ volatile(
    eed4:	f04f 0320 	mov.w	r3, #32
    eed8:	f3ef 8b11 	mrs	fp, BASEPRI
    eedc:	f383 8812 	msr	BASEPRI_MAX, r3
    eee0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    eee4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    eee6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    eee8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    eeec:	d419      	bmi.n	ef22 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    eeee:	60ea      	str	r2, [r5, #12]
    eef0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    eef4:	f023 0302 	bic.w	r3, r3, #2
    eef8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    eefc:	f38b 8811 	msr	BASEPRI, fp
    ef00:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    ef04:	05db      	lsls	r3, r3, #23
    ef06:	d4ac      	bmi.n	ee62 <work_queue_main+0x12>
	z_impl_k_yield();
    ef08:	f000 fb1c 	bl	f544 <z_impl_k_yield>
}
    ef0c:	e7a9      	b.n	ee62 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    ef0e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    ef12:	2200      	movs	r2, #0
    ef14:	2101      	movs	r1, #1
    ef16:	4628      	mov	r0, r5
    ef18:	f002 fe05 	bl	11b26 <z_sched_wake>
    ef1c:	2800      	cmp	r0, #0
    ef1e:	d1f8      	bne.n	ef12 <work_queue_main+0xc2>
    ef20:	e7b1      	b.n	ee86 <work_queue_main+0x36>
	return list->head;
    ef22:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    ef24:	f023 0303 	bic.w	r3, r3, #3
    ef28:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ef2a:	2800      	cmp	r0, #0
    ef2c:	d0e0      	beq.n	eef0 <work_queue_main+0xa0>
	return node->next;
    ef2e:	2700      	movs	r7, #0
	parent->next = child;
    ef30:	463b      	mov	r3, r7
	return node->next;
    ef32:	f8d0 a000 	ldr.w	sl, [r0]
    ef36:	2800      	cmp	r0, #0
    ef38:	d0da      	beq.n	eef0 <work_queue_main+0xa0>
		if (wc->work == work) {
    ef3a:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    ef3c:	4601      	mov	r1, r0
		if (wc->work == work) {
    ef3e:	4295      	cmp	r5, r2
    ef40:	d10c      	bne.n	ef5c <work_queue_main+0x10c>
    ef42:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    ef44:	b99f      	cbnz	r7, ef6e <work_queue_main+0x11e>
    ef46:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    ef48:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    ef4a:	4282      	cmp	r2, r0
    ef4c:	d100      	bne.n	ef50 <work_queue_main+0x100>
	list->tail = node;
    ef4e:	6071      	str	r1, [r6, #4]
	parent->next = child;
    ef50:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    ef54:	f7ff ff34 	bl	edc0 <z_impl_k_sem_give>
}
    ef58:	4639      	mov	r1, r7
    ef5a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ef5c:	f1ba 0f00 	cmp.w	sl, #0
    ef60:	d00b      	beq.n	ef7a <work_queue_main+0x12a>
	return node->next;
    ef62:	f8da 2000 	ldr.w	r2, [sl]
    ef66:	4650      	mov	r0, sl
    ef68:	460f      	mov	r7, r1
    ef6a:	4692      	mov	sl, r2
    ef6c:	e7e3      	b.n	ef36 <work_queue_main+0xe6>
	parent->next = child;
    ef6e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    ef70:	6872      	ldr	r2, [r6, #4]
    ef72:	4282      	cmp	r2, r0
	list->tail = node;
    ef74:	bf08      	it	eq
    ef76:	6077      	streq	r7, [r6, #4]
}
    ef78:	e7ea      	b.n	ef50 <work_queue_main+0x100>
    ef7a:	4652      	mov	r2, sl
    ef7c:	e7f3      	b.n	ef66 <work_queue_main+0x116>
    ef7e:	bf00      	nop
    ef80:	2000cf78 	.word	0x2000cf78
    ef84:	2000d45b 	.word	0x2000d45b

0000ef88 <submit_to_queue_locked>:
{
    ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    ef8a:	68c3      	ldr	r3, [r0, #12]
{
    ef8c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ef8e:	079a      	lsls	r2, r3, #30
{
    ef90:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ef92:	f3c3 0640 	ubfx	r6, r3, #1, #1
    ef96:	d42c      	bmi.n	eff2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    ef98:	075b      	lsls	r3, r3, #29
    ef9a:	d41a      	bmi.n	efd2 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    ef9c:	680b      	ldr	r3, [r1, #0]
    ef9e:	b90b      	cbnz	r3, efa4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    efa0:	6883      	ldr	r3, [r0, #8]
    efa2:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    efa4:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    efa6:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    efa8:	bf42      	ittt	mi
    efaa:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
    efac:	2602      	movmi	r6, #2
			*queuep = work->queue;
    efae:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    efb0:	683d      	ldr	r5, [r7, #0]
		ret = 1;
    efb2:	bf58      	it	pl
    efb4:	2601      	movpl	r6, #1
	if (queue == NULL) {
    efb6:	2d00      	cmp	r5, #0
    efb8:	d03a      	beq.n	f030 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    efba:	4b1f      	ldr	r3, [pc, #124]	; (f038 <submit_to_queue_locked+0xb0>)
    efbc:	689b      	ldr	r3, [r3, #8]
    efbe:	42ab      	cmp	r3, r5
    efc0:	d00a      	beq.n	efd8 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    efc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    efc6:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    efc8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    efcc:	d414      	bmi.n	eff8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    efce:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    efd2:	2300      	movs	r3, #0
    efd4:	603b      	str	r3, [r7, #0]
	return ret;
    efd6:	e025      	b.n	f024 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    efd8:	f002 fc06 	bl	117e8 <k_is_in_isr>
    efdc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    efe0:	2800      	cmp	r0, #0
    efe2:	d1f0      	bne.n	efc6 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    efe4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    efe6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    efea:	d5f0      	bpl.n	efce <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    efec:	b152      	cbz	r2, f004 <submit_to_queue_locked+0x7c>
    efee:	075b      	lsls	r3, r3, #29
    eff0:	d408      	bmi.n	f004 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    eff2:	f06f 060f 	mvn.w	r6, #15
    eff6:	e7ec      	b.n	efd2 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    eff8:	2a00      	cmp	r2, #0
    effa:	d1fa      	bne.n	eff2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    effc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    f000:	2b00      	cmp	r3, #0
    f002:	d1f6      	bne.n	eff2 <submit_to_queue_locked+0x6a>
	parent->next = child;
    f004:	2300      	movs	r3, #0
    f006:	6023      	str	r3, [r4, #0]
	return list->tail;
    f008:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    f00c:	b963      	cbnz	r3, f028 <submit_to_queue_locked+0xa0>
	list->head = node;
    f00e:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    f012:	4628      	mov	r0, r5
    f014:	f002 fc99 	bl	1194a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    f018:	68e3      	ldr	r3, [r4, #12]
    f01a:	f043 0304 	orr.w	r3, r3, #4
    f01e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    f020:	683b      	ldr	r3, [r7, #0]
    f022:	60a3      	str	r3, [r4, #8]
}
    f024:	4630      	mov	r0, r6
    f026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    f028:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f02a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    f02e:	e7f0      	b.n	f012 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    f030:	f06f 0615 	mvn.w	r6, #21
    f034:	e7cd      	b.n	efd2 <submit_to_queue_locked+0x4a>
    f036:	bf00      	nop
    f038:	2000cf50 	.word	0x2000cf50

0000f03c <k_work_submit>:
{
    f03c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    f03e:	4801      	ldr	r0, [pc, #4]	; (f044 <k_work_submit+0x8>)
    f040:	f002 bc9e 	b.w	11980 <k_work_submit_to_queue>
    f044:	2000c8e0 	.word	0x2000c8e0

0000f048 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    f048:	b5f0      	push	{r4, r5, r6, r7, lr}
    f04a:	4604      	mov	r4, r0
	list->head = NULL;
    f04c:	2000      	movs	r0, #0
    f04e:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
    f050:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    f054:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    f056:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    f05a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    f05e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    f062:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    f066:	b31d      	cbz	r5, f0b0 <k_work_queue_start+0x68>
    f068:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    f06a:	2800      	cmp	r0, #0
    f06c:	f240 1001 	movw	r0, #257	; 0x101
    f070:	bf08      	it	eq
    f072:	2001      	moveq	r0, #1
	*flagp = flags;
    f074:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f078:	2000      	movs	r0, #0
    f07a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    f07e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f082:	e9cd 3003 	strd	r3, r0, [sp, #12]
    f086:	e9cd 0001 	strd	r0, r0, [sp, #4]
    f08a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    f08e:	4620      	mov	r0, r4
    f090:	4b08      	ldr	r3, [pc, #32]	; (f0b4 <k_work_queue_start+0x6c>)
    f092:	9400      	str	r4, [sp, #0]
    f094:	f7ff fd06 	bl	eaa4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    f098:	b125      	cbz	r5, f0a4 <k_work_queue_start+0x5c>
    f09a:	6829      	ldr	r1, [r5, #0]
    f09c:	b111      	cbz	r1, f0a4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    f09e:	4620      	mov	r0, r4
    f0a0:	f002 fba8 	bl	117f4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    f0a4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    f0a6:	b009      	add	sp, #36	; 0x24
    f0a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f0ac:	f002 bba5 	b.w	117fa <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    f0b0:	2001      	movs	r0, #1
    f0b2:	e7df      	b.n	f074 <k_work_queue_start+0x2c>
    f0b4:	0000ee51 	.word	0x0000ee51

0000f0b8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    f0b8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    f0ba:	4d07      	ldr	r5, [pc, #28]	; (f0d8 <z_reset_time_slice+0x20>)
    f0bc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    f0be:	b154      	cbz	r4, f0d6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    f0c0:	f7fc f960 	bl	b384 <sys_clock_elapsed>
    f0c4:	4b05      	ldr	r3, [pc, #20]	; (f0dc <z_reset_time_slice+0x24>)
    f0c6:	4404      	add	r4, r0
    f0c8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    f0ca:	6828      	ldr	r0, [r5, #0]
    f0cc:	2100      	movs	r1, #0
	}
}
    f0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    f0d2:	f002 bd71 	b.w	11bb8 <z_set_timeout_expiry>
}
    f0d6:	bd38      	pop	{r3, r4, r5, pc}
    f0d8:	2000cf88 	.word	0x2000cf88
    f0dc:	2000cf50 	.word	0x2000cf50

0000f0e0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    f0e0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    f0e2:	4d0d      	ldr	r5, [pc, #52]	; (f118 <update_cache+0x38>)
    f0e4:	462b      	mov	r3, r5
    f0e6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f0ea:	429c      	cmp	r4, r3
    f0ec:	d000      	beq.n	f0f0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f0ee:	b904      	cbnz	r4, f0f2 <update_cache+0x12>
    f0f0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    f0f2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    f0f4:	b938      	cbnz	r0, f106 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    f0f6:	7b5a      	ldrb	r2, [r3, #13]
    f0f8:	06d2      	lsls	r2, r2, #27
    f0fa:	d104      	bne.n	f106 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    f0fc:	69a2      	ldr	r2, [r4, #24]
    f0fe:	b912      	cbnz	r2, f106 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    f100:	89da      	ldrh	r2, [r3, #14]
    f102:	2a7f      	cmp	r2, #127	; 0x7f
    f104:	d805      	bhi.n	f112 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    f106:	429c      	cmp	r4, r3
    f108:	d002      	beq.n	f110 <update_cache+0x30>
			z_reset_time_slice(thread);
    f10a:	4620      	mov	r0, r4
    f10c:	f7ff ffd4 	bl	f0b8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    f110:	4623      	mov	r3, r4
    f112:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    f114:	bd38      	pop	{r3, r4, r5, pc}
    f116:	bf00      	nop
    f118:	2000cf50 	.word	0x2000cf50

0000f11c <move_thread_to_end_of_prio_q>:
{
    f11c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    f11e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    f122:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    f124:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    f126:	7b43      	ldrb	r3, [r0, #13]
    f128:	da04      	bge.n	f134 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f12e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    f130:	f002 fc37 	bl	119a2 <sys_dlist_remove>
	return list->head == list;
    f134:	4a15      	ldr	r2, [pc, #84]	; (f18c <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    f136:	7b4b      	ldrb	r3, [r1, #13]
    f138:	4610      	mov	r0, r2
    f13a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f13e:	734b      	strb	r3, [r1, #13]
    f140:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f144:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f146:	4283      	cmp	r3, r0
    f148:	bf08      	it	eq
    f14a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f14c:	b923      	cbnz	r3, f158 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    f14e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    f152:	6021      	str	r1, [r4, #0]
	list->tail = node;
    f154:	6251      	str	r1, [r2, #36]	; 0x24
}
    f156:	e00c      	b.n	f172 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    f158:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    f15c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    f160:	42b5      	cmp	r5, r6
    f162:	d00e      	beq.n	f182 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f164:	42ae      	cmp	r6, r5
    f166:	dd0c      	ble.n	f182 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    f168:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    f16a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    f16e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    f170:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    f172:	6890      	ldr	r0, [r2, #8]
}
    f174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    f178:	1a43      	subs	r3, r0, r1
    f17a:	4258      	negs	r0, r3
    f17c:	4158      	adcs	r0, r3
    f17e:	f7ff bfaf 	b.w	f0e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    f182:	429c      	cmp	r4, r3
    f184:	d0e3      	beq.n	f14e <move_thread_to_end_of_prio_q+0x32>
    f186:	681b      	ldr	r3, [r3, #0]
    f188:	e7e0      	b.n	f14c <move_thread_to_end_of_prio_q+0x30>
    f18a:	bf00      	nop
    f18c:	2000cf50 	.word	0x2000cf50

0000f190 <ready_thread>:
{
    f190:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    f192:	f990 300d 	ldrsb.w	r3, [r0, #13]
    f196:	7b42      	ldrb	r2, [r0, #13]
    f198:	2b00      	cmp	r3, #0
    f19a:	db29      	blt.n	f1f0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f19c:	06d3      	lsls	r3, r2, #27
    f19e:	d127      	bne.n	f1f0 <ready_thread+0x60>
	return node->next != NULL;
    f1a0:	6983      	ldr	r3, [r0, #24]
    f1a2:	bb2b      	cbnz	r3, f1f0 <ready_thread+0x60>
	return list->head == list;
    f1a4:	4913      	ldr	r1, [pc, #76]	; (f1f4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    f1a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    f1aa:	7342      	strb	r2, [r0, #13]
    f1ac:	460a      	mov	r2, r1
    f1ae:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f1b2:	4294      	cmp	r4, r2
    f1b4:	bf18      	it	ne
    f1b6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    f1b8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f1ba:	b923      	cbnz	r3, f1c6 <ready_thread+0x36>
	node->prev = tail;
    f1bc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    f1c0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    f1c2:	6248      	str	r0, [r1, #36]	; 0x24
}
    f1c4:	e00c      	b.n	f1e0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    f1c6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    f1ca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    f1ce:	42b5      	cmp	r5, r6
    f1d0:	d00a      	beq.n	f1e8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f1d2:	42ae      	cmp	r6, r5
    f1d4:	dd08      	ble.n	f1e8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    f1d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f1d8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    f1dc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    f1de:	6058      	str	r0, [r3, #4]
		update_cache(0);
    f1e0:	2000      	movs	r0, #0
}
    f1e2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    f1e4:	f7ff bf7c 	b.w	f0e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    f1e8:	42a3      	cmp	r3, r4
    f1ea:	d0e7      	beq.n	f1bc <ready_thread+0x2c>
    f1ec:	681b      	ldr	r3, [r3, #0]
    f1ee:	e7e4      	b.n	f1ba <ready_thread+0x2a>
}
    f1f0:	bc70      	pop	{r4, r5, r6}
    f1f2:	4770      	bx	lr
    f1f4:	2000cf50 	.word	0x2000cf50

0000f1f8 <unready_thread>:
{
    f1f8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    f1fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    f1fe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    f200:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    f202:	7b43      	ldrb	r3, [r0, #13]
    f204:	da04      	bge.n	f210 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f20a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f20c:	f002 fbc9 	bl	119a2 <sys_dlist_remove>
	update_cache(thread == _current);
    f210:	4b04      	ldr	r3, [pc, #16]	; (f224 <unready_thread+0x2c>)
    f212:	6898      	ldr	r0, [r3, #8]
    f214:	1a43      	subs	r3, r0, r1
    f216:	4258      	negs	r0, r3
    f218:	4158      	adcs	r0, r3
}
    f21a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    f21e:	f7ff bf5f 	b.w	f0e0 <update_cache>
    f222:	bf00      	nop
    f224:	2000cf50 	.word	0x2000cf50

0000f228 <pend_locked>:
{
    f228:	b570      	push	{r4, r5, r6, lr}
    f22a:	4615      	mov	r5, r2
    f22c:	461c      	mov	r4, r3
    f22e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    f230:	f002 fbeb 	bl	11a0a <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f234:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    f238:	bf08      	it	eq
    f23a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    f23e:	d008      	beq.n	f252 <pend_locked+0x2a>
    f240:	462a      	mov	r2, r5
    f242:	4623      	mov	r3, r4
    f244:	f106 0018 	add.w	r0, r6, #24
    f248:	4902      	ldr	r1, [pc, #8]	; (f254 <pend_locked+0x2c>)
}
    f24a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f24e:	f000 baf5 	b.w	f83c <z_add_timeout>
    f252:	bd70      	pop	{r4, r5, r6, pc}
    f254:	000119c7 	.word	0x000119c7

0000f258 <k_sched_time_slice_set>:
{
    f258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f25a:	4604      	mov	r4, r0
    f25c:	460d      	mov	r5, r1
	__asm__ volatile(
    f25e:	f04f 0320 	mov.w	r3, #32
    f262:	f3ef 8711 	mrs	r7, BASEPRI
    f266:	f383 8812 	msr	BASEPRI_MAX, r3
    f26a:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    f26e:	2600      	movs	r6, #0
    f270:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    f274:	f240 30e7 	movw	r0, #999	; 0x3e7
    f278:	4631      	mov	r1, r6
    f27a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f27e:	2300      	movs	r3, #0
    f280:	fbe4 010c 	umlal	r0, r1, r4, ip
    f284:	f7f9 fd40 	bl	8d08 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    f288:	42b4      	cmp	r4, r6
    f28a:	dd02      	ble.n	f292 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    f28c:	2802      	cmp	r0, #2
    f28e:	bfb8      	it	lt
    f290:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    f292:	4a07      	ldr	r2, [pc, #28]	; (f2b0 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    f294:	4b07      	ldr	r3, [pc, #28]	; (f2b4 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    f296:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    f298:	4a07      	ldr	r2, [pc, #28]	; (f2b8 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    f29a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    f29c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    f29e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    f2a0:	f7ff ff0a 	bl	f0b8 <z_reset_time_slice>
	__asm__ volatile(
    f2a4:	f387 8811 	msr	BASEPRI, r7
    f2a8:	f3bf 8f6f 	isb	sy
}
    f2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f2ae:	bf00      	nop
    f2b0:	2000cf88 	.word	0x2000cf88
    f2b4:	2000cf50 	.word	0x2000cf50
    f2b8:	2000cf84 	.word	0x2000cf84

0000f2bc <z_time_slice>:
{
    f2bc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f2be:	f04f 0320 	mov.w	r3, #32
    f2c2:	f3ef 8511 	mrs	r5, BASEPRI
    f2c6:	f383 8812 	msr	BASEPRI_MAX, r3
    f2ca:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    f2ce:	4b17      	ldr	r3, [pc, #92]	; (f32c <z_time_slice+0x70>)
    f2d0:	4a17      	ldr	r2, [pc, #92]	; (f330 <z_time_slice+0x74>)
    f2d2:	689c      	ldr	r4, [r3, #8]
    f2d4:	6811      	ldr	r1, [r2, #0]
    f2d6:	428c      	cmp	r4, r1
    f2d8:	d107      	bne.n	f2ea <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    f2da:	4620      	mov	r0, r4
    f2dc:	f7ff feec 	bl	f0b8 <z_reset_time_slice>
	__asm__ volatile(
    f2e0:	f385 8811 	msr	BASEPRI, r5
    f2e4:	f3bf 8f6f 	isb	sy
}
    f2e8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    f2ea:	2100      	movs	r1, #0
    f2ec:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    f2ee:	4a11      	ldr	r2, [pc, #68]	; (f334 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    f2f0:	6812      	ldr	r2, [r2, #0]
    f2f2:	b1c2      	cbz	r2, f326 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    f2f4:	89e2      	ldrh	r2, [r4, #14]
    f2f6:	2a7f      	cmp	r2, #127	; 0x7f
    f2f8:	d815      	bhi.n	f326 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    f2fa:	7b62      	ldrb	r2, [r4, #13]
    f2fc:	06d2      	lsls	r2, r2, #27
    f2fe:	d112      	bne.n	f326 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    f300:	4a0d      	ldr	r2, [pc, #52]	; (f338 <z_time_slice+0x7c>)
    f302:	f994 100e 	ldrsb.w	r1, [r4, #14]
    f306:	6812      	ldr	r2, [r2, #0]
    f308:	4291      	cmp	r1, r2
    f30a:	db0c      	blt.n	f326 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    f30c:	4a0b      	ldr	r2, [pc, #44]	; (f33c <z_time_slice+0x80>)
    f30e:	4294      	cmp	r4, r2
    f310:	d009      	beq.n	f326 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    f312:	691a      	ldr	r2, [r3, #16]
    f314:	4282      	cmp	r2, r0
    f316:	dc03      	bgt.n	f320 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    f318:	4620      	mov	r0, r4
    f31a:	f7ff feff 	bl	f11c <move_thread_to_end_of_prio_q>
    f31e:	e7dc      	b.n	f2da <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    f320:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    f322:	611a      	str	r2, [r3, #16]
    f324:	e7dc      	b.n	f2e0 <z_time_slice+0x24>
    f326:	2200      	movs	r2, #0
    f328:	e7fb      	b.n	f322 <z_time_slice+0x66>
    f32a:	bf00      	nop
    f32c:	2000cf50 	.word	0x2000cf50
    f330:	2000cf80 	.word	0x2000cf80
    f334:	2000cf88 	.word	0x2000cf88
    f338:	2000cf84 	.word	0x2000cf84
    f33c:	2000c7d8 	.word	0x2000c7d8

0000f340 <z_pend_curr>:
{
    f340:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    f342:	480c      	ldr	r0, [pc, #48]	; (f374 <z_pend_curr+0x34>)
    f344:	4d0c      	ldr	r5, [pc, #48]	; (f378 <z_pend_curr+0x38>)
    f346:	6886      	ldr	r6, [r0, #8]
{
    f348:	460c      	mov	r4, r1
	pending_current = _current;
    f34a:	602e      	str	r6, [r5, #0]
{
    f34c:	4611      	mov	r1, r2
    f34e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    f352:	f04f 0620 	mov.w	r6, #32
    f356:	f3ef 8511 	mrs	r5, BASEPRI
    f35a:	f386 8812 	msr	BASEPRI_MAX, r6
    f35e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    f362:	6880      	ldr	r0, [r0, #8]
    f364:	f7ff ff60 	bl	f228 <pend_locked>
	ret = arch_swap(key);
    f368:	4620      	mov	r0, r4
}
    f36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f36e:	f7fa bdcb 	b.w	9f08 <arch_swap>
    f372:	bf00      	nop
    f374:	2000cf50 	.word	0x2000cf50
    f378:	2000cf80 	.word	0x2000cf80

0000f37c <z_set_prio>:
{
    f37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f37e:	4604      	mov	r4, r0
    f380:	f04f 0320 	mov.w	r3, #32
    f384:	f3ef 8611 	mrs	r6, BASEPRI
    f388:	f383 8812 	msr	BASEPRI_MAX, r3
    f38c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    f390:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    f392:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f394:	06da      	lsls	r2, r3, #27
    f396:	d119      	bne.n	f3cc <z_set_prio+0x50>
	return node->next != NULL;
    f398:	6985      	ldr	r5, [r0, #24]
    f39a:	b9bd      	cbnz	r5, f3cc <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f39c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f3a0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f3a2:	f002 fafe 	bl	119a2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    f3a6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    f3a8:	4a16      	ldr	r2, [pc, #88]	; (f404 <z_set_prio+0x88>)
    f3aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f3ae:	7343      	strb	r3, [r0, #13]
    f3b0:	4613      	mov	r3, r2
				thread->base.prio = prio;
    f3b2:	7381      	strb	r1, [r0, #14]
    f3b4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f3b8:	4298      	cmp	r0, r3
    f3ba:	bf18      	it	ne
    f3bc:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    f3be:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f3c0:	b95d      	cbnz	r5, f3da <z_set_prio+0x5e>
	node->prev = tail;
    f3c2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    f3c6:	6004      	str	r4, [r0, #0]
	list->tail = node;
    f3c8:	6254      	str	r4, [r2, #36]	; 0x24
}
    f3ca:	e011      	b.n	f3f0 <z_set_prio+0x74>
    f3cc:	2000      	movs	r0, #0
			thread->base.prio = prio;
    f3ce:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    f3d0:	f386 8811 	msr	BASEPRI, r6
    f3d4:	f3bf 8f6f 	isb	sy
}
    f3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    f3da:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    f3de:	42b9      	cmp	r1, r7
    f3e0:	d00b      	beq.n	f3fa <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f3e2:	428f      	cmp	r7, r1
    f3e4:	dd09      	ble.n	f3fa <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    f3e6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    f3e8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    f3ec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    f3ee:	606c      	str	r4, [r5, #4]
			update_cache(1);
    f3f0:	2001      	movs	r0, #1
    f3f2:	f7ff fe75 	bl	f0e0 <update_cache>
    f3f6:	2001      	movs	r0, #1
    f3f8:	e7ea      	b.n	f3d0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    f3fa:	42a8      	cmp	r0, r5
    f3fc:	d0e1      	beq.n	f3c2 <z_set_prio+0x46>
    f3fe:	682d      	ldr	r5, [r5, #0]
    f400:	e7de      	b.n	f3c0 <z_set_prio+0x44>
    f402:	bf00      	nop
    f404:	2000cf50 	.word	0x2000cf50

0000f408 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f408:	b949      	cbnz	r1, f41e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f40a:	f3ef 8005 	mrs	r0, IPSR
    f40e:	b930      	cbnz	r0, f41e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    f410:	4b05      	ldr	r3, [pc, #20]	; (f428 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    f412:	69da      	ldr	r2, [r3, #28]
    f414:	689b      	ldr	r3, [r3, #8]
    f416:	429a      	cmp	r2, r3
    f418:	d001      	beq.n	f41e <z_reschedule+0x16>
    f41a:	f7fa bd75 	b.w	9f08 <arch_swap>
    f41e:	f381 8811 	msr	BASEPRI, r1
    f422:	f3bf 8f6f 	isb	sy
}
    f426:	4770      	bx	lr
    f428:	2000cf50 	.word	0x2000cf50

0000f42c <z_sched_start>:
{
    f42c:	b510      	push	{r4, lr}
	__asm__ volatile(
    f42e:	f04f 0220 	mov.w	r2, #32
    f432:	f3ef 8411 	mrs	r4, BASEPRI
    f436:	f382 8812 	msr	BASEPRI_MAX, r2
    f43a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    f43e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    f440:	0751      	lsls	r1, r2, #29
    f442:	d404      	bmi.n	f44e <z_sched_start+0x22>
	__asm__ volatile(
    f444:	f384 8811 	msr	BASEPRI, r4
    f448:	f3bf 8f6f 	isb	sy
}
    f44c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f44e:	f022 0204 	bic.w	r2, r2, #4
    f452:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    f454:	f7ff fe9c 	bl	f190 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    f458:	4621      	mov	r1, r4
}
    f45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    f45e:	4801      	ldr	r0, [pc, #4]	; (f464 <z_sched_start+0x38>)
    f460:	f7ff bfd2 	b.w	f408 <z_reschedule>
    f464:	2000d45b 	.word	0x2000d45b

0000f468 <z_impl_k_thread_suspend>:
{
    f468:	b570      	push	{r4, r5, r6, lr}
    f46a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    f46c:	3018      	adds	r0, #24
    f46e:	f002 fb7d 	bl	11b6c <z_abort_timeout>
	__asm__ volatile(
    f472:	f04f 0320 	mov.w	r3, #32
    f476:	f3ef 8611 	mrs	r6, BASEPRI
    f47a:	f383 8812 	msr	BASEPRI_MAX, r3
    f47e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    f482:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    f486:	7b63      	ldrb	r3, [r4, #13]
    f488:	2a00      	cmp	r2, #0
    f48a:	da05      	bge.n	f498 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    f490:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f492:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f494:	f002 fa85 	bl	119a2 <sys_dlist_remove>
		update_cache(thread == _current);
    f498:	4d0b      	ldr	r5, [pc, #44]	; (f4c8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f49a:	7b63      	ldrb	r3, [r4, #13]
    f49c:	68a8      	ldr	r0, [r5, #8]
    f49e:	f043 0310 	orr.w	r3, r3, #16
    f4a2:	7363      	strb	r3, [r4, #13]
    f4a4:	1b03      	subs	r3, r0, r4
    f4a6:	4258      	negs	r0, r3
    f4a8:	4158      	adcs	r0, r3
    f4aa:	f7ff fe19 	bl	f0e0 <update_cache>
	__asm__ volatile(
    f4ae:	f386 8811 	msr	BASEPRI, r6
    f4b2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    f4b6:	68ab      	ldr	r3, [r5, #8]
    f4b8:	42a3      	cmp	r3, r4
    f4ba:	d103      	bne.n	f4c4 <z_impl_k_thread_suspend+0x5c>
}
    f4bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    f4c0:	f002 bb17 	b.w	11af2 <z_reschedule_unlocked>
}
    f4c4:	bd70      	pop	{r4, r5, r6, pc}
    f4c6:	bf00      	nop
    f4c8:	2000cf50 	.word	0x2000cf50

0000f4cc <k_sched_lock>:
	__asm__ volatile(
    f4cc:	f04f 0320 	mov.w	r3, #32
    f4d0:	f3ef 8111 	mrs	r1, BASEPRI
    f4d4:	f383 8812 	msr	BASEPRI_MAX, r3
    f4d8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    f4dc:	4b04      	ldr	r3, [pc, #16]	; (f4f0 <k_sched_lock+0x24>)
    f4de:	689a      	ldr	r2, [r3, #8]
    f4e0:	7bd3      	ldrb	r3, [r2, #15]
    f4e2:	3b01      	subs	r3, #1
    f4e4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    f4e6:	f381 8811 	msr	BASEPRI, r1
    f4ea:	f3bf 8f6f 	isb	sy
}
    f4ee:	4770      	bx	lr
    f4f0:	2000cf50 	.word	0x2000cf50

0000f4f4 <k_sched_unlock>:
{
    f4f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    f4f6:	f04f 0320 	mov.w	r3, #32
    f4fa:	f3ef 8411 	mrs	r4, BASEPRI
    f4fe:	f383 8812 	msr	BASEPRI_MAX, r3
    f502:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    f506:	4b08      	ldr	r3, [pc, #32]	; (f528 <k_sched_unlock+0x34>)
		update_cache(0);
    f508:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    f50a:	689a      	ldr	r2, [r3, #8]
    f50c:	7bd3      	ldrb	r3, [r2, #15]
    f50e:	3301      	adds	r3, #1
    f510:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    f512:	f7ff fde5 	bl	f0e0 <update_cache>
	__asm__ volatile(
    f516:	f384 8811 	msr	BASEPRI, r4
    f51a:	f3bf 8f6f 	isb	sy
}
    f51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    f522:	f002 bae6 	b.w	11af2 <z_reschedule_unlocked>
    f526:	bf00      	nop
    f528:	2000cf50 	.word	0x2000cf50

0000f52c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    f52c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    f52e:	4b04      	ldr	r3, [pc, #16]	; (f540 <z_sched_init+0x14>)
    f530:	4608      	mov	r0, r1
    f532:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    f536:	e9c3 2208 	strd	r2, r2, [r3, #32]
    f53a:	f7ff be8d 	b.w	f258 <k_sched_time_slice_set>
    f53e:	bf00      	nop
    f540:	2000cf50 	.word	0x2000cf50

0000f544 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    f544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    f546:	f04f 0320 	mov.w	r3, #32
    f54a:	f3ef 8511 	mrs	r5, BASEPRI
    f54e:	f383 8812 	msr	BASEPRI_MAX, r3
    f552:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    f556:	4919      	ldr	r1, [pc, #100]	; (f5bc <z_impl_k_yield+0x78>)
    f558:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f55a:	7b43      	ldrb	r3, [r0, #13]
    f55c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f560:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f562:	f002 fa1e 	bl	119a2 <sys_dlist_remove>
	return list->head == list;
    f566:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    f568:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    f56a:	7b5a      	ldrb	r2, [r3, #13]
    f56c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    f570:	735a      	strb	r2, [r3, #13]
    f572:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    f576:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f578:	4282      	cmp	r2, r0
    f57a:	bf08      	it	eq
    f57c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f57e:	b922      	cbnz	r2, f58a <z_impl_k_yield+0x46>
	node->prev = tail;
    f580:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    f584:	6023      	str	r3, [r4, #0]
	list->tail = node;
    f586:	624b      	str	r3, [r1, #36]	; 0x24
}
    f588:	e00c      	b.n	f5a4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    f58a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    f58e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    f592:	42be      	cmp	r6, r7
    f594:	d00e      	beq.n	f5b4 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f596:	42b7      	cmp	r7, r6
    f598:	dd0c      	ble.n	f5b4 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    f59a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    f59c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    f5a0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    f5a2:	6053      	str	r3, [r2, #4]
	update_cache(1);
    f5a4:	2001      	movs	r0, #1
    f5a6:	f7ff fd9b 	bl	f0e0 <update_cache>
    f5aa:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    f5ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f5b0:	f7fa bcaa 	b.w	9f08 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    f5b4:	42a2      	cmp	r2, r4
    f5b6:	d0e3      	beq.n	f580 <z_impl_k_yield+0x3c>
    f5b8:	6812      	ldr	r2, [r2, #0]
    f5ba:	e7e0      	b.n	f57e <z_impl_k_yield+0x3a>
    f5bc:	2000cf50 	.word	0x2000cf50

0000f5c0 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    f5c0:	ea50 0301 	orrs.w	r3, r0, r1
{
    f5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5c8:	4605      	mov	r5, r0
    f5ca:	460e      	mov	r6, r1
	if (ticks == 0) {
    f5cc:	d103      	bne.n	f5d6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    f5ce:	f7ff ffb9 	bl	f544 <z_impl_k_yield>
		k_yield();
		return 0;
    f5d2:	2000      	movs	r0, #0
    f5d4:	e02c      	b.n	f630 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    f5d6:	1c83      	adds	r3, r0, #2
    f5d8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    f5dc:	db2a      	blt.n	f634 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    f5de:	f002 fb07 	bl	11bf0 <sys_clock_tick_get_32>
    f5e2:	182c      	adds	r4, r5, r0
    f5e4:	f04f 0320 	mov.w	r3, #32
    f5e8:	f3ef 8811 	mrs	r8, BASEPRI
    f5ec:	f383 8812 	msr	BASEPRI_MAX, r3
    f5f0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    f5f4:	4f11      	ldr	r7, [pc, #68]	; (f63c <z_tick_sleep+0x7c>)
    f5f6:	4b12      	ldr	r3, [pc, #72]	; (f640 <z_tick_sleep+0x80>)
    f5f8:	68b8      	ldr	r0, [r7, #8]
    f5fa:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    f5fc:	f7ff fdfc 	bl	f1f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    f600:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f602:	4910      	ldr	r1, [pc, #64]	; (f644 <z_tick_sleep+0x84>)
    f604:	462a      	mov	r2, r5
    f606:	4633      	mov	r3, r6
    f608:	3018      	adds	r0, #24
    f60a:	f000 f917 	bl	f83c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    f60e:	68ba      	ldr	r2, [r7, #8]
    f610:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f612:	7b53      	ldrb	r3, [r2, #13]
    f614:	f043 0310 	orr.w	r3, r3, #16
    f618:	7353      	strb	r3, [r2, #13]
    f61a:	f7fa fc75 	bl	9f08 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    f61e:	f002 fae7 	bl	11bf0 <sys_clock_tick_get_32>
    f622:	1a20      	subs	r0, r4, r0
    f624:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    f628:	2801      	cmp	r0, #1
    f62a:	f173 0300 	sbcs.w	r3, r3, #0
    f62e:	dbd0      	blt.n	f5d2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    f630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    f634:	f06f 0401 	mvn.w	r4, #1
    f638:	1a24      	subs	r4, r4, r0
    f63a:	e7d3      	b.n	f5e4 <z_tick_sleep+0x24>
    f63c:	2000cf50 	.word	0x2000cf50
    f640:	2000cf80 	.word	0x2000cf80
    f644:	000119c7 	.word	0x000119c7

0000f648 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f648:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    f64c:	bf08      	it	eq
    f64e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    f652:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f654:	d106      	bne.n	f664 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    f656:	4b08      	ldr	r3, [pc, #32]	; (f678 <z_impl_k_sleep+0x30>)
    f658:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    f65a:	f7ff ff05 	bl	f468 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    f65e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    f662:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    f664:	f7ff ffac 	bl	f5c0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    f668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f66c:	fb80 0303 	smull	r0, r3, r0, r3
    f670:	0bc0      	lsrs	r0, r0, #15
    f672:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    f676:	e7f4      	b.n	f662 <z_impl_k_sleep+0x1a>
    f678:	2000cf50 	.word	0x2000cf50

0000f67c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    f67c:	4b01      	ldr	r3, [pc, #4]	; (f684 <z_impl_z_current_get+0x8>)
    f67e:	6898      	ldr	r0, [r3, #8]
    f680:	4770      	bx	lr
    f682:	bf00      	nop
    f684:	2000cf50 	.word	0x2000cf50

0000f688 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    f688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f68c:	4604      	mov	r4, r0
    f68e:	f04f 0320 	mov.w	r3, #32
    f692:	f3ef 8611 	mrs	r6, BASEPRI
    f696:	f383 8812 	msr	BASEPRI_MAX, r3
    f69a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    f69e:	7b03      	ldrb	r3, [r0, #12]
    f6a0:	07d9      	lsls	r1, r3, #31
    f6a2:	d50b      	bpl.n	f6bc <z_thread_abort+0x34>
	__asm__ volatile(
    f6a4:	f386 8811 	msr	BASEPRI, r6
    f6a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    f6ac:	4040      	eors	r0, r0
    f6ae:	f380 8811 	msr	BASEPRI, r0
    f6b2:	f04f 0004 	mov.w	r0, #4
    f6b6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    f6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    f6bc:	7b43      	ldrb	r3, [r0, #13]
    f6be:	071a      	lsls	r2, r3, #28
    f6c0:	d504      	bpl.n	f6cc <z_thread_abort+0x44>
    f6c2:	f386 8811 	msr	BASEPRI, r6
    f6c6:	f3bf 8f6f 	isb	sy
    f6ca:	e7f5      	b.n	f6b8 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    f6cc:	f023 0220 	bic.w	r2, r3, #32
    f6d0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    f6d4:	09d2      	lsrs	r2, r2, #7
    f6d6:	d120      	bne.n	f71a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    f6d8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    f6da:	68a3      	ldr	r3, [r4, #8]
    f6dc:	b113      	cbz	r3, f6e4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    f6de:	4620      	mov	r0, r4
    f6e0:	f002 f967 	bl	119b2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    f6e4:	f104 0018 	add.w	r0, r4, #24
    f6e8:	f002 fa40 	bl	11b6c <z_abort_timeout>
    f6ec:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    f6f0:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    f6f4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f6f6:	42bd      	cmp	r5, r7
    f6f8:	d000      	beq.n	f6fc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f6fa:	b9b5      	cbnz	r5, f72a <z_thread_abort+0xa2>
		update_cache(1);
    f6fc:	2001      	movs	r0, #1
    f6fe:	f7ff fcef 	bl	f0e0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    f702:	4b10      	ldr	r3, [pc, #64]	; (f744 <z_thread_abort+0xbc>)
    f704:	689b      	ldr	r3, [r3, #8]
    f706:	42a3      	cmp	r3, r4
    f708:	d1db      	bne.n	f6c2 <z_thread_abort+0x3a>
    f70a:	f3ef 8305 	mrs	r3, IPSR
    f70e:	2b00      	cmp	r3, #0
    f710:	d1d7      	bne.n	f6c2 <z_thread_abort+0x3a>
    f712:	4630      	mov	r0, r6
    f714:	f7fa fbf8 	bl	9f08 <arch_swap>
	return ret;
    f718:	e7d3      	b.n	f6c2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f71a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    f71e:	f043 0308 	orr.w	r3, r3, #8
    f722:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f724:	f002 f93d 	bl	119a2 <sys_dlist_remove>
}
    f728:	e7d7      	b.n	f6da <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    f72a:	4628      	mov	r0, r5
    f72c:	f002 f941 	bl	119b2 <unpend_thread_no_timeout>
    f730:	f105 0018 	add.w	r0, r5, #24
    f734:	f002 fa1a 	bl	11b6c <z_abort_timeout>
		ready_thread(thread);
    f738:	4628      	mov	r0, r5
    f73a:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    f73e:	f7ff fd27 	bl	f190 <ready_thread>
    f742:	e7d7      	b.n	f6f4 <z_thread_abort+0x6c>
    f744:	2000cf50 	.word	0x2000cf50

0000f748 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    f748:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    f74a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    f74e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    f750:	e9cd 6700 	strd	r6, r7, [sp]
    f754:	f7ff fdf4 	bl	f340 <z_pend_curr>

	if (data != NULL) {
    f758:	b11c      	cbz	r4, f762 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    f75a:	4b03      	ldr	r3, [pc, #12]	; (f768 <z_sched_wait+0x20>)
    f75c:	689b      	ldr	r3, [r3, #8]
    f75e:	695b      	ldr	r3, [r3, #20]
    f760:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    f762:	b002      	add	sp, #8
    f764:	bdd0      	pop	{r4, r6, r7, pc}
    f766:	bf00      	nop
    f768:	2000cf50 	.word	0x2000cf50

0000f76c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    f76c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    f76e:	4806      	ldr	r0, [pc, #24]	; (f788 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    f770:	4a06      	ldr	r2, [pc, #24]	; (f78c <z_data_copy+0x20>)
    f772:	4907      	ldr	r1, [pc, #28]	; (f790 <z_data_copy+0x24>)
    f774:	1a12      	subs	r2, r2, r0
    f776:	f001 ffb9 	bl	116ec <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    f77a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    f77e:	4a05      	ldr	r2, [pc, #20]	; (f794 <z_data_copy+0x28>)
    f780:	4905      	ldr	r1, [pc, #20]	; (f798 <z_data_copy+0x2c>)
    f782:	4806      	ldr	r0, [pc, #24]	; (f79c <z_data_copy+0x30>)
    f784:	f001 bfb2 	b.w	116ec <z_early_memcpy>
    f788:	2000c580 	.word	0x2000c580
    f78c:	2000c784 	.word	0x2000c784
    f790:	00012c34 	.word	0x00012c34
    f794:	00000000 	.word	0x00000000
    f798:	00012c1c 	.word	0x00012c1c
    f79c:	2000c580 	.word	0x2000c580

0000f7a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    f7a0:	4b03      	ldr	r3, [pc, #12]	; (f7b0 <elapsed+0x10>)
    f7a2:	681b      	ldr	r3, [r3, #0]
    f7a4:	b90b      	cbnz	r3, f7aa <elapsed+0xa>
    f7a6:	f7fb bded 	b.w	b384 <sys_clock_elapsed>
}
    f7aa:	2000      	movs	r0, #0
    f7ac:	4770      	bx	lr
    f7ae:	bf00      	nop
    f7b0:	2000cf8c 	.word	0x2000cf8c

0000f7b4 <next_timeout>:

static int32_t next_timeout(void)
{
    f7b4:	b510      	push	{r4, lr}
	return list->head == list;
    f7b6:	4b11      	ldr	r3, [pc, #68]	; (f7fc <next_timeout+0x48>)
    f7b8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f7ba:	429c      	cmp	r4, r3
    f7bc:	d10a      	bne.n	f7d4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    f7be:	f7ff ffef 	bl	f7a0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    f7c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    f7c6:	4b0e      	ldr	r3, [pc, #56]	; (f800 <next_timeout+0x4c>)
    f7c8:	691b      	ldr	r3, [r3, #16]
    f7ca:	b113      	cbz	r3, f7d2 <next_timeout+0x1e>
    f7cc:	4298      	cmp	r0, r3
    f7ce:	bfa8      	it	ge
    f7d0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    f7d2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    f7d4:	f7ff ffe4 	bl	f7a0 <elapsed>
	if ((to == NULL) ||
    f7d8:	2c00      	cmp	r4, #0
    f7da:	d0f2      	beq.n	f7c2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    f7dc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    f7e0:	1a1b      	subs	r3, r3, r0
    f7e2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    f7e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f7ea:	f172 0100 	sbcs.w	r1, r2, #0
    f7ee:	dae8      	bge.n	f7c2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    f7f0:	2a00      	cmp	r2, #0
    f7f2:	bfac      	ite	ge
    f7f4:	4618      	movge	r0, r3
    f7f6:	2000      	movlt	r0, #0
    f7f8:	e7e5      	b.n	f7c6 <next_timeout+0x12>
    f7fa:	bf00      	nop
    f7fc:	2000c648 	.word	0x2000c648
    f800:	2000cf50 	.word	0x2000cf50

0000f804 <remove_timeout>:
{
    f804:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f806:	b170      	cbz	r0, f826 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    f808:	4b0b      	ldr	r3, [pc, #44]	; (f838 <remove_timeout+0x34>)
    f80a:	685b      	ldr	r3, [r3, #4]
    f80c:	4298      	cmp	r0, r3
    f80e:	d00a      	beq.n	f826 <remove_timeout+0x22>
    f810:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    f812:	b143      	cbz	r3, f826 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    f814:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    f818:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    f81c:	1912      	adds	r2, r2, r4
    f81e:	eb41 0105 	adc.w	r1, r1, r5
    f822:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    f826:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    f82a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f82c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f82e:	2300      	movs	r3, #0
	node->prev = NULL;
    f830:	e9c0 3300 	strd	r3, r3, [r0]
}
    f834:	bd30      	pop	{r4, r5, pc}
    f836:	bf00      	nop
    f838:	2000c648 	.word	0x2000c648

0000f83c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f83c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f840:	bf08      	it	eq
    f842:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    f846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f848:	4604      	mov	r4, r0
    f84a:	461d      	mov	r5, r3
    f84c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f84e:	d061      	beq.n	f914 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    f850:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    f852:	f04f 0320 	mov.w	r3, #32
    f856:	f3ef 8711 	mrs	r7, BASEPRI
    f85a:	f383 8812 	msr	BASEPRI_MAX, r3
    f85e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    f862:	3201      	adds	r2, #1
    f864:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    f868:	da24      	bge.n	f8b4 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    f86a:	f06f 0301 	mvn.w	r3, #1
    f86e:	492f      	ldr	r1, [pc, #188]	; (f92c <z_add_timeout+0xf0>)
    f870:	e9d1 2000 	ldrd	r2, r0, [r1]
    f874:	1a9b      	subs	r3, r3, r2
    f876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f87a:	eb62 0000 	sbc.w	r0, r2, r0
    f87e:	1b9e      	subs	r6, r3, r6
    f880:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    f884:	2e01      	cmp	r6, #1
    f886:	f170 0300 	sbcs.w	r3, r0, #0
    f88a:	da01      	bge.n	f890 <z_add_timeout+0x54>
    f88c:	2601      	movs	r6, #1
    f88e:	2000      	movs	r0, #0
    f890:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    f894:	4e26      	ldr	r6, [pc, #152]	; (f930 <z_add_timeout+0xf4>)
    f896:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    f89a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f89c:	45b4      	cmp	ip, r6
    f89e:	bf08      	it	eq
    f8a0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    f8a4:	f1bc 0f00 	cmp.w	ip, #0
    f8a8:	d10d      	bne.n	f8c6 <z_add_timeout+0x8a>
	node->prev = tail;
    f8aa:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    f8ae:	602c      	str	r4, [r5, #0]
	list->tail = node;
    f8b0:	6074      	str	r4, [r6, #4]
}
    f8b2:	e01c      	b.n	f8ee <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    f8b4:	f7ff ff74 	bl	f7a0 <elapsed>
    f8b8:	3601      	adds	r6, #1
    f8ba:	f145 0500 	adc.w	r5, r5, #0
    f8be:	1836      	adds	r6, r6, r0
    f8c0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    f8c4:	e7e4      	b.n	f890 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    f8c6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    f8ca:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    f8ce:	4293      	cmp	r3, r2
    f8d0:	eb71 0e00 	sbcs.w	lr, r1, r0
    f8d4:	da1f      	bge.n	f916 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    f8d6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    f8d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
    f8dc:	eb60 0001 	sbc.w	r0, r0, r1
    f8e0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    f8e4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    f8e8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    f8ea:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    f8ee:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f8f0:	42b3      	cmp	r3, r6
    f8f2:	d00b      	beq.n	f90c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    f8f4:	429c      	cmp	r4, r3
    f8f6:	d109      	bne.n	f90c <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    f8f8:	f7ff ff5c 	bl	f7b4 <next_timeout>

			if (next_time == 0 ||
    f8fc:	b118      	cbz	r0, f906 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    f8fe:	4b0d      	ldr	r3, [pc, #52]	; (f934 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    f900:	691b      	ldr	r3, [r3, #16]
    f902:	4283      	cmp	r3, r0
    f904:	d002      	beq.n	f90c <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    f906:	2100      	movs	r1, #0
    f908:	f7fb fd0a 	bl	b320 <sys_clock_set_timeout>
	__asm__ volatile(
    f90c:	f387 8811 	msr	BASEPRI, r7
    f910:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    f914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    f916:	1a9b      	subs	r3, r3, r2
    f918:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    f91c:	45ac      	cmp	ip, r5
    f91e:	e9c4 3104 	strd	r3, r1, [r4, #16]
    f922:	d0c2      	beq.n	f8aa <z_add_timeout+0x6e>
    f924:	f8dc c000 	ldr.w	ip, [ip]
    f928:	e7bc      	b.n	f8a4 <z_add_timeout+0x68>
    f92a:	bf00      	nop
    f92c:	2000c8d8 	.word	0x2000c8d8
    f930:	2000c648 	.word	0x2000c648
    f934:	2000cf50 	.word	0x2000cf50

0000f938 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    f938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f93c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    f93e:	f7ff fcbd 	bl	f2bc <z_time_slice>
	__asm__ volatile(
    f942:	f04f 0320 	mov.w	r3, #32
    f946:	f3ef 8611 	mrs	r6, BASEPRI
    f94a:	f383 8812 	msr	BASEPRI_MAX, r3
    f94e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    f952:	4f24      	ldr	r7, [pc, #144]	; (f9e4 <sys_clock_announce+0xac>)
	return list->head == list;
    f954:	f8df 8090 	ldr.w	r8, [pc, #144]	; f9e8 <sys_clock_announce+0xb0>
    f958:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    f95c:	4a23      	ldr	r2, [pc, #140]	; (f9ec <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f95e:	4540      	cmp	r0, r8
	announce_remaining = ticks;
    f960:	603c      	str	r4, [r7, #0]
	return list->head == list;
    f962:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
    f966:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f96a:	d00b      	beq.n	f984 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    f96c:	b150      	cbz	r0, f984 <sys_clock_announce+0x4c>
    f96e:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    f972:	42ac      	cmp	r4, r5
    f974:	eb71 090c 	sbcs.w	r9, r1, ip
    f978:	da17      	bge.n	f9aa <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    f97a:	1b2d      	subs	r5, r5, r4
    f97c:	eb6c 0c01 	sbc.w	ip, ip, r1
    f980:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    f984:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
    f986:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    f98a:	eb4e 0101 	adc.w	r1, lr, r1
    f98e:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    f992:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    f994:	f7ff ff0e 	bl	f7b4 <next_timeout>
    f998:	4621      	mov	r1, r4
    f99a:	f7fb fcc1 	bl	b320 <sys_clock_set_timeout>
	__asm__ volatile(
    f99e:	f386 8811 	msr	BASEPRI, r6
    f9a2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    f9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    f9aa:	18eb      	adds	r3, r5, r3
    f9ac:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    f9b0:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    f9b4:	2200      	movs	r2, #0
    f9b6:	2300      	movs	r3, #0
    f9b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    f9bc:	f7ff ff22 	bl	f804 <remove_timeout>
    f9c0:	f386 8811 	msr	BASEPRI, r6
    f9c4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    f9c8:	6883      	ldr	r3, [r0, #8]
    f9ca:	4798      	blx	r3
	__asm__ volatile(
    f9cc:	f04f 0320 	mov.w	r3, #32
    f9d0:	f3ef 8611 	mrs	r6, BASEPRI
    f9d4:	f383 8812 	msr	BASEPRI_MAX, r3
    f9d8:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    f9dc:	683c      	ldr	r4, [r7, #0]
    f9de:	1b64      	subs	r4, r4, r5
    f9e0:	e7ba      	b.n	f958 <sys_clock_announce+0x20>
    f9e2:	bf00      	nop
    f9e4:	2000cf8c 	.word	0x2000cf8c
    f9e8:	2000c648 	.word	0x2000c648
    f9ec:	2000c8d8 	.word	0x2000c8d8

0000f9f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    f9f0:	b510      	push	{r4, lr}
    f9f2:	f04f 0320 	mov.w	r3, #32
    f9f6:	f3ef 8411 	mrs	r4, BASEPRI
    f9fa:	f383 8812 	msr	BASEPRI_MAX, r3
    f9fe:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    fa02:	f7ff fecd 	bl	f7a0 <elapsed>
    fa06:	4603      	mov	r3, r0
    fa08:	4a05      	ldr	r2, [pc, #20]	; (fa20 <sys_clock_tick_get+0x30>)
    fa0a:	e9d2 0100 	ldrd	r0, r1, [r2]
    fa0e:	1818      	adds	r0, r3, r0
    fa10:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    fa14:	f384 8811 	msr	BASEPRI, r4
    fa18:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    fa1c:	bd10      	pop	{r4, pc}
    fa1e:	bf00      	nop
    fa20:	2000c8d8 	.word	0x2000c8d8

0000fa24 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    fa24:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    fa26:	4601      	mov	r1, r0
    fa28:	4801      	ldr	r0, [pc, #4]	; (fa30 <k_aligned_alloc+0xc>)
    fa2a:	f002 b90d 	b.w	11c48 <z_heap_aligned_alloc>
    fa2e:	bf00      	nop
    fa30:	2000c710 	.word	0x2000c710

0000fa34 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    fa34:	4b01      	ldr	r3, [pc, #4]	; (fa3c <k_thread_system_pool_assign+0x8>)
    fa36:	6703      	str	r3, [r0, #112]	; 0x70
}
    fa38:	4770      	bx	lr
    fa3a:	bf00      	nop
    fa3c:	2000c710 	.word	0x2000c710

0000fa40 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    fa40:	b538      	push	{r3, r4, r5, lr}
    fa42:	4604      	mov	r4, r0
    fa44:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    fa46:	f001 fecf 	bl	117e8 <k_is_in_isr>
    fa4a:	b920      	cbnz	r0, fa56 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    fa4c:	4b06      	ldr	r3, [pc, #24]	; (fa68 <z_thread_aligned_alloc+0x28>)
    fa4e:	689b      	ldr	r3, [r3, #8]
    fa50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    fa52:	b90b      	cbnz	r3, fa58 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
    fa54:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
    fa56:	4b05      	ldr	r3, [pc, #20]	; (fa6c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
    fa58:	462a      	mov	r2, r5
    fa5a:	4621      	mov	r1, r4
    fa5c:	4618      	mov	r0, r3
}
    fa5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
    fa62:	f002 b8f1 	b.w	11c48 <z_heap_aligned_alloc>
    fa66:	bf00      	nop
    fa68:	2000cf50 	.word	0x2000cf50
    fa6c:	2000c710 	.word	0x2000c710

0000fa70 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    fa70:	4801      	ldr	r0, [pc, #4]	; (fa78 <boot_banner+0x8>)
    fa72:	f000 bcb9 	b.w	103e8 <printk>
    fa76:	bf00      	nop
    fa78:	00012a99 	.word	0x00012a99

0000fa7c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    fa7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    fa7e:	2400      	movs	r4, #0
    fa80:	4b08      	ldr	r3, [pc, #32]	; (faa4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    fa82:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    fa86:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    fa88:	ab02      	add	r3, sp, #8
    fa8a:	9300      	str	r3, [sp, #0]
    fa8c:	4906      	ldr	r1, [pc, #24]	; (faa8 <k_sys_work_q_init+0x2c>)
    fa8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fa92:	4806      	ldr	r0, [pc, #24]	; (faac <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    fa94:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    fa98:	f7ff fad6 	bl	f048 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    fa9c:	4620      	mov	r0, r4
    fa9e:	b004      	add	sp, #16
    faa0:	bd10      	pop	{r4, pc}
    faa2:	bf00      	nop
    faa4:	00012ac7 	.word	0x00012ac7
    faa8:	2000e4a0 	.word	0x2000e4a0
    faac:	2000c8e0 	.word	0x2000c8e0

0000fab0 <_free_r>:
    fab0:	b538      	push	{r3, r4, r5, lr}
    fab2:	4605      	mov	r5, r0
    fab4:	2900      	cmp	r1, #0
    fab6:	d041      	beq.n	fb3c <_free_r+0x8c>
    fab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    fabc:	1f0c      	subs	r4, r1, #4
    fabe:	2b00      	cmp	r3, #0
    fac0:	bfb8      	it	lt
    fac2:	18e4      	addlt	r4, r4, r3
    fac4:	f000 fa58 	bl	ff78 <__malloc_lock>
    fac8:	4a1d      	ldr	r2, [pc, #116]	; (fb40 <_free_r+0x90>)
    faca:	6813      	ldr	r3, [r2, #0]
    facc:	b933      	cbnz	r3, fadc <_free_r+0x2c>
    face:	6063      	str	r3, [r4, #4]
    fad0:	6014      	str	r4, [r2, #0]
    fad2:	4628      	mov	r0, r5
    fad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fad8:	f000 ba54 	b.w	ff84 <__malloc_unlock>
    fadc:	42a3      	cmp	r3, r4
    fade:	d908      	bls.n	faf2 <_free_r+0x42>
    fae0:	6820      	ldr	r0, [r4, #0]
    fae2:	1821      	adds	r1, r4, r0
    fae4:	428b      	cmp	r3, r1
    fae6:	bf01      	itttt	eq
    fae8:	6819      	ldreq	r1, [r3, #0]
    faea:	685b      	ldreq	r3, [r3, #4]
    faec:	1809      	addeq	r1, r1, r0
    faee:	6021      	streq	r1, [r4, #0]
    faf0:	e7ed      	b.n	face <_free_r+0x1e>
    faf2:	461a      	mov	r2, r3
    faf4:	685b      	ldr	r3, [r3, #4]
    faf6:	b10b      	cbz	r3, fafc <_free_r+0x4c>
    faf8:	42a3      	cmp	r3, r4
    fafa:	d9fa      	bls.n	faf2 <_free_r+0x42>
    fafc:	6811      	ldr	r1, [r2, #0]
    fafe:	1850      	adds	r0, r2, r1
    fb00:	42a0      	cmp	r0, r4
    fb02:	d10b      	bne.n	fb1c <_free_r+0x6c>
    fb04:	6820      	ldr	r0, [r4, #0]
    fb06:	4401      	add	r1, r0
    fb08:	1850      	adds	r0, r2, r1
    fb0a:	6011      	str	r1, [r2, #0]
    fb0c:	4283      	cmp	r3, r0
    fb0e:	d1e0      	bne.n	fad2 <_free_r+0x22>
    fb10:	6818      	ldr	r0, [r3, #0]
    fb12:	685b      	ldr	r3, [r3, #4]
    fb14:	4408      	add	r0, r1
    fb16:	6053      	str	r3, [r2, #4]
    fb18:	6010      	str	r0, [r2, #0]
    fb1a:	e7da      	b.n	fad2 <_free_r+0x22>
    fb1c:	d902      	bls.n	fb24 <_free_r+0x74>
    fb1e:	230c      	movs	r3, #12
    fb20:	602b      	str	r3, [r5, #0]
    fb22:	e7d6      	b.n	fad2 <_free_r+0x22>
    fb24:	6820      	ldr	r0, [r4, #0]
    fb26:	1821      	adds	r1, r4, r0
    fb28:	428b      	cmp	r3, r1
    fb2a:	bf02      	ittt	eq
    fb2c:	6819      	ldreq	r1, [r3, #0]
    fb2e:	685b      	ldreq	r3, [r3, #4]
    fb30:	1809      	addeq	r1, r1, r0
    fb32:	6063      	str	r3, [r4, #4]
    fb34:	bf08      	it	eq
    fb36:	6021      	streq	r1, [r4, #0]
    fb38:	6054      	str	r4, [r2, #4]
    fb3a:	e7ca      	b.n	fad2 <_free_r+0x22>
    fb3c:	bd38      	pop	{r3, r4, r5, pc}
    fb3e:	bf00      	nop
    fb40:	2000cf94 	.word	0x2000cf94

0000fb44 <_malloc_r>:
    fb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb46:	1ccd      	adds	r5, r1, #3
    fb48:	4606      	mov	r6, r0
    fb4a:	f025 0503 	bic.w	r5, r5, #3
    fb4e:	3508      	adds	r5, #8
    fb50:	2d0c      	cmp	r5, #12
    fb52:	bf38      	it	cc
    fb54:	250c      	movcc	r5, #12
    fb56:	2d00      	cmp	r5, #0
    fb58:	db01      	blt.n	fb5e <_malloc_r+0x1a>
    fb5a:	42a9      	cmp	r1, r5
    fb5c:	d903      	bls.n	fb66 <_malloc_r+0x22>
    fb5e:	230c      	movs	r3, #12
    fb60:	6033      	str	r3, [r6, #0]
    fb62:	2000      	movs	r0, #0
    fb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb66:	f000 fa07 	bl	ff78 <__malloc_lock>
    fb6a:	4921      	ldr	r1, [pc, #132]	; (fbf0 <_malloc_r+0xac>)
    fb6c:	680a      	ldr	r2, [r1, #0]
    fb6e:	4614      	mov	r4, r2
    fb70:	b99c      	cbnz	r4, fb9a <_malloc_r+0x56>
    fb72:	4f20      	ldr	r7, [pc, #128]	; (fbf4 <_malloc_r+0xb0>)
    fb74:	683b      	ldr	r3, [r7, #0]
    fb76:	b923      	cbnz	r3, fb82 <_malloc_r+0x3e>
    fb78:	4621      	mov	r1, r4
    fb7a:	4630      	mov	r0, r6
    fb7c:	f000 f83c 	bl	fbf8 <_sbrk_r>
    fb80:	6038      	str	r0, [r7, #0]
    fb82:	4629      	mov	r1, r5
    fb84:	4630      	mov	r0, r6
    fb86:	f000 f837 	bl	fbf8 <_sbrk_r>
    fb8a:	1c43      	adds	r3, r0, #1
    fb8c:	d123      	bne.n	fbd6 <_malloc_r+0x92>
    fb8e:	230c      	movs	r3, #12
    fb90:	4630      	mov	r0, r6
    fb92:	6033      	str	r3, [r6, #0]
    fb94:	f000 f9f6 	bl	ff84 <__malloc_unlock>
    fb98:	e7e3      	b.n	fb62 <_malloc_r+0x1e>
    fb9a:	6823      	ldr	r3, [r4, #0]
    fb9c:	1b5b      	subs	r3, r3, r5
    fb9e:	d417      	bmi.n	fbd0 <_malloc_r+0x8c>
    fba0:	2b0b      	cmp	r3, #11
    fba2:	d903      	bls.n	fbac <_malloc_r+0x68>
    fba4:	6023      	str	r3, [r4, #0]
    fba6:	441c      	add	r4, r3
    fba8:	6025      	str	r5, [r4, #0]
    fbaa:	e004      	b.n	fbb6 <_malloc_r+0x72>
    fbac:	6863      	ldr	r3, [r4, #4]
    fbae:	42a2      	cmp	r2, r4
    fbb0:	bf0c      	ite	eq
    fbb2:	600b      	streq	r3, [r1, #0]
    fbb4:	6053      	strne	r3, [r2, #4]
    fbb6:	4630      	mov	r0, r6
    fbb8:	f000 f9e4 	bl	ff84 <__malloc_unlock>
    fbbc:	f104 000b 	add.w	r0, r4, #11
    fbc0:	1d23      	adds	r3, r4, #4
    fbc2:	f020 0007 	bic.w	r0, r0, #7
    fbc6:	1ac2      	subs	r2, r0, r3
    fbc8:	bf1c      	itt	ne
    fbca:	1a1b      	subne	r3, r3, r0
    fbcc:	50a3      	strne	r3, [r4, r2]
    fbce:	e7c9      	b.n	fb64 <_malloc_r+0x20>
    fbd0:	4622      	mov	r2, r4
    fbd2:	6864      	ldr	r4, [r4, #4]
    fbd4:	e7cc      	b.n	fb70 <_malloc_r+0x2c>
    fbd6:	1cc4      	adds	r4, r0, #3
    fbd8:	f024 0403 	bic.w	r4, r4, #3
    fbdc:	42a0      	cmp	r0, r4
    fbde:	d0e3      	beq.n	fba8 <_malloc_r+0x64>
    fbe0:	1a21      	subs	r1, r4, r0
    fbe2:	4630      	mov	r0, r6
    fbe4:	f000 f808 	bl	fbf8 <_sbrk_r>
    fbe8:	3001      	adds	r0, #1
    fbea:	d1dd      	bne.n	fba8 <_malloc_r+0x64>
    fbec:	e7cf      	b.n	fb8e <_malloc_r+0x4a>
    fbee:	bf00      	nop
    fbf0:	2000cf94 	.word	0x2000cf94
    fbf4:	2000cf90 	.word	0x2000cf90

0000fbf8 <_sbrk_r>:
    fbf8:	b538      	push	{r3, r4, r5, lr}
    fbfa:	2300      	movs	r3, #0
    fbfc:	4d05      	ldr	r5, [pc, #20]	; (fc14 <_sbrk_r+0x1c>)
    fbfe:	4604      	mov	r4, r0
    fc00:	4608      	mov	r0, r1
    fc02:	602b      	str	r3, [r5, #0]
    fc04:	f7fa fd62 	bl	a6cc <_sbrk>
    fc08:	1c43      	adds	r3, r0, #1
    fc0a:	d102      	bne.n	fc12 <_sbrk_r+0x1a>
    fc0c:	682b      	ldr	r3, [r5, #0]
    fc0e:	b103      	cbz	r3, fc12 <_sbrk_r+0x1a>
    fc10:	6023      	str	r3, [r4, #0]
    fc12:	bd38      	pop	{r3, r4, r5, pc}
    fc14:	2000cf98 	.word	0x2000cf98

0000fc18 <_strtol_l.constprop.0>:
    fc18:	2b24      	cmp	r3, #36	; 0x24
    fc1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fc1e:	4686      	mov	lr, r0
    fc20:	4690      	mov	r8, r2
    fc22:	d801      	bhi.n	fc28 <_strtol_l.constprop.0+0x10>
    fc24:	2b01      	cmp	r3, #1
    fc26:	d106      	bne.n	fc36 <_strtol_l.constprop.0+0x1e>
    fc28:	f000 ff07 	bl	10a3a <__errno>
    fc2c:	2316      	movs	r3, #22
    fc2e:	6003      	str	r3, [r0, #0]
    fc30:	2000      	movs	r0, #0
    fc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc36:	460d      	mov	r5, r1
    fc38:	4835      	ldr	r0, [pc, #212]	; (fd10 <_strtol_l.constprop.0+0xf8>)
    fc3a:	462a      	mov	r2, r5
    fc3c:	f815 4b01 	ldrb.w	r4, [r5], #1
    fc40:	5d06      	ldrb	r6, [r0, r4]
    fc42:	f016 0608 	ands.w	r6, r6, #8
    fc46:	d1f8      	bne.n	fc3a <_strtol_l.constprop.0+0x22>
    fc48:	2c2d      	cmp	r4, #45	; 0x2d
    fc4a:	d124      	bne.n	fc96 <_strtol_l.constprop.0+0x7e>
    fc4c:	782c      	ldrb	r4, [r5, #0]
    fc4e:	2601      	movs	r6, #1
    fc50:	1c95      	adds	r5, r2, #2
    fc52:	bb2b      	cbnz	r3, fca0 <_strtol_l.constprop.0+0x88>
    fc54:	2c30      	cmp	r4, #48	; 0x30
    fc56:	d030      	beq.n	fcba <_strtol_l.constprop.0+0xa2>
    fc58:	230a      	movs	r3, #10
    fc5a:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
    fc5e:	2200      	movs	r2, #0
    fc60:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    fc64:	4610      	mov	r0, r2
    fc66:	fbbc f9f3 	udiv	r9, ip, r3
    fc6a:	fb03 ca19 	mls	sl, r3, r9, ip
    fc6e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
    fc72:	2f09      	cmp	r7, #9
    fc74:	d828      	bhi.n	fcc8 <_strtol_l.constprop.0+0xb0>
    fc76:	463c      	mov	r4, r7
    fc78:	42a3      	cmp	r3, r4
    fc7a:	dd34      	ble.n	fce6 <_strtol_l.constprop.0+0xce>
    fc7c:	1c57      	adds	r7, r2, #1
    fc7e:	d007      	beq.n	fc90 <_strtol_l.constprop.0+0x78>
    fc80:	4581      	cmp	r9, r0
    fc82:	d32d      	bcc.n	fce0 <_strtol_l.constprop.0+0xc8>
    fc84:	d101      	bne.n	fc8a <_strtol_l.constprop.0+0x72>
    fc86:	45a2      	cmp	sl, r4
    fc88:	db2a      	blt.n	fce0 <_strtol_l.constprop.0+0xc8>
    fc8a:	fb00 4003 	mla	r0, r0, r3, r4
    fc8e:	2201      	movs	r2, #1
    fc90:	f815 4b01 	ldrb.w	r4, [r5], #1
    fc94:	e7eb      	b.n	fc6e <_strtol_l.constprop.0+0x56>
    fc96:	2c2b      	cmp	r4, #43	; 0x2b
    fc98:	bf04      	itt	eq
    fc9a:	782c      	ldrbeq	r4, [r5, #0]
    fc9c:	1c95      	addeq	r5, r2, #2
    fc9e:	e7d8      	b.n	fc52 <_strtol_l.constprop.0+0x3a>
    fca0:	2b10      	cmp	r3, #16
    fca2:	d1da      	bne.n	fc5a <_strtol_l.constprop.0+0x42>
    fca4:	2c30      	cmp	r4, #48	; 0x30
    fca6:	d1d8      	bne.n	fc5a <_strtol_l.constprop.0+0x42>
    fca8:	782a      	ldrb	r2, [r5, #0]
    fcaa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    fcae:	2a58      	cmp	r2, #88	; 0x58
    fcb0:	d1d3      	bne.n	fc5a <_strtol_l.constprop.0+0x42>
    fcb2:	786c      	ldrb	r4, [r5, #1]
    fcb4:	2310      	movs	r3, #16
    fcb6:	3502      	adds	r5, #2
    fcb8:	e7cf      	b.n	fc5a <_strtol_l.constprop.0+0x42>
    fcba:	782b      	ldrb	r3, [r5, #0]
    fcbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    fcc0:	2b58      	cmp	r3, #88	; 0x58
    fcc2:	d0f6      	beq.n	fcb2 <_strtol_l.constprop.0+0x9a>
    fcc4:	2308      	movs	r3, #8
    fcc6:	e7c8      	b.n	fc5a <_strtol_l.constprop.0+0x42>
    fcc8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
    fccc:	2f19      	cmp	r7, #25
    fcce:	d801      	bhi.n	fcd4 <_strtol_l.constprop.0+0xbc>
    fcd0:	3c37      	subs	r4, #55	; 0x37
    fcd2:	e7d1      	b.n	fc78 <_strtol_l.constprop.0+0x60>
    fcd4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
    fcd8:	2f19      	cmp	r7, #25
    fcda:	d804      	bhi.n	fce6 <_strtol_l.constprop.0+0xce>
    fcdc:	3c57      	subs	r4, #87	; 0x57
    fcde:	e7cb      	b.n	fc78 <_strtol_l.constprop.0+0x60>
    fce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fce4:	e7d4      	b.n	fc90 <_strtol_l.constprop.0+0x78>
    fce6:	1c53      	adds	r3, r2, #1
    fce8:	d108      	bne.n	fcfc <_strtol_l.constprop.0+0xe4>
    fcea:	2322      	movs	r3, #34	; 0x22
    fcec:	4660      	mov	r0, ip
    fcee:	f8ce 3000 	str.w	r3, [lr]
    fcf2:	f1b8 0f00 	cmp.w	r8, #0
    fcf6:	d09c      	beq.n	fc32 <_strtol_l.constprop.0+0x1a>
    fcf8:	1e69      	subs	r1, r5, #1
    fcfa:	e006      	b.n	fd0a <_strtol_l.constprop.0+0xf2>
    fcfc:	b106      	cbz	r6, fd00 <_strtol_l.constprop.0+0xe8>
    fcfe:	4240      	negs	r0, r0
    fd00:	f1b8 0f00 	cmp.w	r8, #0
    fd04:	d095      	beq.n	fc32 <_strtol_l.constprop.0+0x1a>
    fd06:	2a00      	cmp	r2, #0
    fd08:	d1f6      	bne.n	fcf8 <_strtol_l.constprop.0+0xe0>
    fd0a:	f8c8 1000 	str.w	r1, [r8]
    fd0e:	e790      	b.n	fc32 <_strtol_l.constprop.0+0x1a>
    fd10:	00012ad1 	.word	0x00012ad1

0000fd14 <strtol>:
    fd14:	4613      	mov	r3, r2
    fd16:	460a      	mov	r2, r1
    fd18:	4601      	mov	r1, r0
    fd1a:	4802      	ldr	r0, [pc, #8]	; (fd24 <strtol+0x10>)
    fd1c:	6800      	ldr	r0, [r0, #0]
    fd1e:	f7ff bf7b 	b.w	fc18 <_strtol_l.constprop.0>
    fd22:	bf00      	nop
    fd24:	2000c650 	.word	0x2000c650

0000fd28 <_strtoll_l.constprop.0>:
    fd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd2c:	4690      	mov	r8, r2
    fd2e:	b085      	sub	sp, #20
    fd30:	4689      	mov	r9, r1
    fd32:	461e      	mov	r6, r3
    fd34:	460d      	mov	r5, r1
    fd36:	4a45      	ldr	r2, [pc, #276]	; (fe4c <_strtoll_l.constprop.0+0x124>)
    fd38:	9002      	str	r0, [sp, #8]
    fd3a:	462b      	mov	r3, r5
    fd3c:	f815 4b01 	ldrb.w	r4, [r5], #1
    fd40:	5d17      	ldrb	r7, [r2, r4]
    fd42:	f017 0708 	ands.w	r7, r7, #8
    fd46:	d1f8      	bne.n	fd3a <_strtoll_l.constprop.0+0x12>
    fd48:	2c2d      	cmp	r4, #45	; 0x2d
    fd4a:	d141      	bne.n	fdd0 <_strtoll_l.constprop.0+0xa8>
    fd4c:	782c      	ldrb	r4, [r5, #0]
    fd4e:	2701      	movs	r7, #1
    fd50:	1c9d      	adds	r5, r3, #2
    fd52:	2e00      	cmp	r6, #0
    fd54:	d141      	bne.n	fdda <_strtoll_l.constprop.0+0xb2>
    fd56:	2c30      	cmp	r4, #48	; 0x30
    fd58:	d04c      	beq.n	fdf4 <_strtoll_l.constprop.0+0xcc>
    fd5a:	260a      	movs	r6, #10
    fd5c:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
    fd60:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
    fd64:	17f3      	asrs	r3, r6, #31
    fd66:	4632      	mov	r2, r6
    fd68:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    fd6c:	4658      	mov	r0, fp
    fd6e:	9303      	str	r3, [sp, #12]
    fd70:	4651      	mov	r1, sl
    fd72:	f7f8 ffc9 	bl	8d08 <__aeabi_uldivmod>
    fd76:	9201      	str	r2, [sp, #4]
    fd78:	2200      	movs	r2, #0
    fd7a:	468e      	mov	lr, r1
    fd7c:	4684      	mov	ip, r0
    fd7e:	4611      	mov	r1, r2
    fd80:	4610      	mov	r0, r2
    fd82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    fd86:	2b09      	cmp	r3, #9
    fd88:	d905      	bls.n	fd96 <_strtoll_l.constprop.0+0x6e>
    fd8a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    fd8e:	2b19      	cmp	r3, #25
    fd90:	d837      	bhi.n	fe02 <_strtoll_l.constprop.0+0xda>
    fd92:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
    fd96:	429e      	cmp	r6, r3
    fd98:	dd3d      	ble.n	fe16 <_strtoll_l.constprop.0+0xee>
    fd9a:	1c54      	adds	r4, r2, #1
    fd9c:	d015      	beq.n	fdca <_strtoll_l.constprop.0+0xa2>
    fd9e:	4584      	cmp	ip, r0
    fda0:	eb7e 0201 	sbcs.w	r2, lr, r1
    fda4:	d334      	bcc.n	fe10 <_strtoll_l.constprop.0+0xe8>
    fda6:	458e      	cmp	lr, r1
    fda8:	bf08      	it	eq
    fdaa:	4584      	cmpeq	ip, r0
    fdac:	d102      	bne.n	fdb4 <_strtoll_l.constprop.0+0x8c>
    fdae:	9a01      	ldr	r2, [sp, #4]
    fdb0:	429a      	cmp	r2, r3
    fdb2:	db2d      	blt.n	fe10 <_strtoll_l.constprop.0+0xe8>
    fdb4:	9a03      	ldr	r2, [sp, #12]
    fdb6:	4371      	muls	r1, r6
    fdb8:	fb00 1102 	mla	r1, r0, r2, r1
    fdbc:	fba6 0200 	umull	r0, r2, r6, r0
    fdc0:	440a      	add	r2, r1
    fdc2:	1818      	adds	r0, r3, r0
    fdc4:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
    fdc8:	2201      	movs	r2, #1
    fdca:	f815 4b01 	ldrb.w	r4, [r5], #1
    fdce:	e7d8      	b.n	fd82 <_strtoll_l.constprop.0+0x5a>
    fdd0:	2c2b      	cmp	r4, #43	; 0x2b
    fdd2:	bf04      	itt	eq
    fdd4:	782c      	ldrbeq	r4, [r5, #0]
    fdd6:	1c9d      	addeq	r5, r3, #2
    fdd8:	e7bb      	b.n	fd52 <_strtoll_l.constprop.0+0x2a>
    fdda:	2e10      	cmp	r6, #16
    fddc:	d1be      	bne.n	fd5c <_strtoll_l.constprop.0+0x34>
    fdde:	2c30      	cmp	r4, #48	; 0x30
    fde0:	d1bc      	bne.n	fd5c <_strtoll_l.constprop.0+0x34>
    fde2:	782b      	ldrb	r3, [r5, #0]
    fde4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    fde8:	2b58      	cmp	r3, #88	; 0x58
    fdea:	d1b7      	bne.n	fd5c <_strtoll_l.constprop.0+0x34>
    fdec:	786c      	ldrb	r4, [r5, #1]
    fdee:	2610      	movs	r6, #16
    fdf0:	3502      	adds	r5, #2
    fdf2:	e7b3      	b.n	fd5c <_strtoll_l.constprop.0+0x34>
    fdf4:	782b      	ldrb	r3, [r5, #0]
    fdf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    fdfa:	2b58      	cmp	r3, #88	; 0x58
    fdfc:	d0f6      	beq.n	fdec <_strtoll_l.constprop.0+0xc4>
    fdfe:	2608      	movs	r6, #8
    fe00:	e7ac      	b.n	fd5c <_strtoll_l.constprop.0+0x34>
    fe02:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    fe06:	2b19      	cmp	r3, #25
    fe08:	d805      	bhi.n	fe16 <_strtoll_l.constprop.0+0xee>
    fe0a:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
    fe0e:	e7c2      	b.n	fd96 <_strtoll_l.constprop.0+0x6e>
    fe10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fe14:	e7d9      	b.n	fdca <_strtoll_l.constprop.0+0xa2>
    fe16:	1c53      	adds	r3, r2, #1
    fe18:	d10a      	bne.n	fe30 <_strtoll_l.constprop.0+0x108>
    fe1a:	2322      	movs	r3, #34	; 0x22
    fe1c:	9a02      	ldr	r2, [sp, #8]
    fe1e:	4658      	mov	r0, fp
    fe20:	4651      	mov	r1, sl
    fe22:	6013      	str	r3, [r2, #0]
    fe24:	f1b8 0f00 	cmp.w	r8, #0
    fe28:	d10a      	bne.n	fe40 <_strtoll_l.constprop.0+0x118>
    fe2a:	b005      	add	sp, #20
    fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe30:	b117      	cbz	r7, fe38 <_strtoll_l.constprop.0+0x110>
    fe32:	4240      	negs	r0, r0
    fe34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fe38:	f1b8 0f00 	cmp.w	r8, #0
    fe3c:	d0f5      	beq.n	fe2a <_strtoll_l.constprop.0+0x102>
    fe3e:	b10a      	cbz	r2, fe44 <_strtoll_l.constprop.0+0x11c>
    fe40:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
    fe44:	f8c8 9000 	str.w	r9, [r8]
    fe48:	e7ef      	b.n	fe2a <_strtoll_l.constprop.0+0x102>
    fe4a:	bf00      	nop
    fe4c:	00012ad1 	.word	0x00012ad1

0000fe50 <strtoll>:
    fe50:	4613      	mov	r3, r2
    fe52:	460a      	mov	r2, r1
    fe54:	4601      	mov	r1, r0
    fe56:	4802      	ldr	r0, [pc, #8]	; (fe60 <strtoll+0x10>)
    fe58:	6800      	ldr	r0, [r0, #0]
    fe5a:	f7ff bf65 	b.w	fd28 <_strtoll_l.constprop.0>
    fe5e:	bf00      	nop
    fe60:	2000c650 	.word	0x2000c650

0000fe64 <_strtoul_l.constprop.0>:
    fe64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fe68:	4686      	mov	lr, r0
    fe6a:	460d      	mov	r5, r1
    fe6c:	4e35      	ldr	r6, [pc, #212]	; (ff44 <_strtoul_l.constprop.0+0xe0>)
    fe6e:	4628      	mov	r0, r5
    fe70:	f815 4b01 	ldrb.w	r4, [r5], #1
    fe74:	5d37      	ldrb	r7, [r6, r4]
    fe76:	f017 0708 	ands.w	r7, r7, #8
    fe7a:	d1f8      	bne.n	fe6e <_strtoul_l.constprop.0+0xa>
    fe7c:	2c2d      	cmp	r4, #45	; 0x2d
    fe7e:	d126      	bne.n	fece <_strtoul_l.constprop.0+0x6a>
    fe80:	782c      	ldrb	r4, [r5, #0]
    fe82:	2701      	movs	r7, #1
    fe84:	1c85      	adds	r5, r0, #2
    fe86:	bb3b      	cbnz	r3, fed8 <_strtoul_l.constprop.0+0x74>
    fe88:	2c30      	cmp	r4, #48	; 0x30
    fe8a:	d032      	beq.n	fef2 <_strtoul_l.constprop.0+0x8e>
    fe8c:	230a      	movs	r3, #10
    fe8e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    fe92:	2600      	movs	r6, #0
    fe94:	fbb8 f8f3 	udiv	r8, r8, r3
    fe98:	fb03 f908 	mul.w	r9, r3, r8
    fe9c:	4630      	mov	r0, r6
    fe9e:	ea6f 0909 	mvn.w	r9, r9
    fea2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
    fea6:	f1bc 0f09 	cmp.w	ip, #9
    feaa:	d829      	bhi.n	ff00 <_strtoul_l.constprop.0+0x9c>
    feac:	4664      	mov	r4, ip
    feae:	42a3      	cmp	r3, r4
    feb0:	dd37      	ble.n	ff22 <_strtoul_l.constprop.0+0xbe>
    feb2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    feb6:	d007      	beq.n	fec8 <_strtoul_l.constprop.0+0x64>
    feb8:	4580      	cmp	r8, r0
    feba:	d32f      	bcc.n	ff1c <_strtoul_l.constprop.0+0xb8>
    febc:	d101      	bne.n	fec2 <_strtoul_l.constprop.0+0x5e>
    febe:	45a1      	cmp	r9, r4
    fec0:	db2c      	blt.n	ff1c <_strtoul_l.constprop.0+0xb8>
    fec2:	fb00 4003 	mla	r0, r0, r3, r4
    fec6:	2601      	movs	r6, #1
    fec8:	f815 4b01 	ldrb.w	r4, [r5], #1
    fecc:	e7e9      	b.n	fea2 <_strtoul_l.constprop.0+0x3e>
    fece:	2c2b      	cmp	r4, #43	; 0x2b
    fed0:	bf04      	itt	eq
    fed2:	782c      	ldrbeq	r4, [r5, #0]
    fed4:	1c85      	addeq	r5, r0, #2
    fed6:	e7d6      	b.n	fe86 <_strtoul_l.constprop.0+0x22>
    fed8:	2b10      	cmp	r3, #16
    feda:	d1d8      	bne.n	fe8e <_strtoul_l.constprop.0+0x2a>
    fedc:	2c30      	cmp	r4, #48	; 0x30
    fede:	d1d6      	bne.n	fe8e <_strtoul_l.constprop.0+0x2a>
    fee0:	7828      	ldrb	r0, [r5, #0]
    fee2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    fee6:	2858      	cmp	r0, #88	; 0x58
    fee8:	d1d1      	bne.n	fe8e <_strtoul_l.constprop.0+0x2a>
    feea:	786c      	ldrb	r4, [r5, #1]
    feec:	2310      	movs	r3, #16
    feee:	3502      	adds	r5, #2
    fef0:	e7cd      	b.n	fe8e <_strtoul_l.constprop.0+0x2a>
    fef2:	782b      	ldrb	r3, [r5, #0]
    fef4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    fef8:	2b58      	cmp	r3, #88	; 0x58
    fefa:	d0f6      	beq.n	feea <_strtoul_l.constprop.0+0x86>
    fefc:	2308      	movs	r3, #8
    fefe:	e7c6      	b.n	fe8e <_strtoul_l.constprop.0+0x2a>
    ff00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
    ff04:	f1bc 0f19 	cmp.w	ip, #25
    ff08:	d801      	bhi.n	ff0e <_strtoul_l.constprop.0+0xaa>
    ff0a:	3c37      	subs	r4, #55	; 0x37
    ff0c:	e7cf      	b.n	feae <_strtoul_l.constprop.0+0x4a>
    ff0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
    ff12:	f1bc 0f19 	cmp.w	ip, #25
    ff16:	d804      	bhi.n	ff22 <_strtoul_l.constprop.0+0xbe>
    ff18:	3c57      	subs	r4, #87	; 0x57
    ff1a:	e7c8      	b.n	feae <_strtoul_l.constprop.0+0x4a>
    ff1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    ff20:	e7d2      	b.n	fec8 <_strtoul_l.constprop.0+0x64>
    ff22:	1c73      	adds	r3, r6, #1
    ff24:	d106      	bne.n	ff34 <_strtoul_l.constprop.0+0xd0>
    ff26:	2322      	movs	r3, #34	; 0x22
    ff28:	4630      	mov	r0, r6
    ff2a:	f8ce 3000 	str.w	r3, [lr]
    ff2e:	b932      	cbnz	r2, ff3e <_strtoul_l.constprop.0+0xda>
    ff30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ff34:	b107      	cbz	r7, ff38 <_strtoul_l.constprop.0+0xd4>
    ff36:	4240      	negs	r0, r0
    ff38:	2a00      	cmp	r2, #0
    ff3a:	d0f9      	beq.n	ff30 <_strtoul_l.constprop.0+0xcc>
    ff3c:	b106      	cbz	r6, ff40 <_strtoul_l.constprop.0+0xdc>
    ff3e:	1e69      	subs	r1, r5, #1
    ff40:	6011      	str	r1, [r2, #0]
    ff42:	e7f5      	b.n	ff30 <_strtoul_l.constprop.0+0xcc>
    ff44:	00012ad1 	.word	0x00012ad1

0000ff48 <strtoul>:
    ff48:	4613      	mov	r3, r2
    ff4a:	460a      	mov	r2, r1
    ff4c:	4601      	mov	r1, r0
    ff4e:	4802      	ldr	r0, [pc, #8]	; (ff58 <strtoul+0x10>)
    ff50:	6800      	ldr	r0, [r0, #0]
    ff52:	f7ff bf87 	b.w	fe64 <_strtoul_l.constprop.0>
    ff56:	bf00      	nop
    ff58:	2000c650 	.word	0x2000c650

0000ff5c <vsniprintf>:
    ff5c:	b507      	push	{r0, r1, r2, lr}
    ff5e:	9300      	str	r3, [sp, #0]
    ff60:	4613      	mov	r3, r2
    ff62:	460a      	mov	r2, r1
    ff64:	4601      	mov	r1, r0
    ff66:	4803      	ldr	r0, [pc, #12]	; (ff74 <vsniprintf+0x18>)
    ff68:	6800      	ldr	r0, [r0, #0]
    ff6a:	f001 ff24 	bl	11db6 <_vsniprintf_r>
    ff6e:	b003      	add	sp, #12
    ff70:	f85d fb04 	ldr.w	pc, [sp], #4
    ff74:	2000c650 	.word	0x2000c650

0000ff78 <__malloc_lock>:
    ff78:	4801      	ldr	r0, [pc, #4]	; (ff80 <__malloc_lock+0x8>)
    ff7a:	f000 bd56 	b.w	10a2a <__retarget_lock_acquire_recursive>
    ff7e:	bf00      	nop
    ff80:	2000c738 	.word	0x2000c738

0000ff84 <__malloc_unlock>:
    ff84:	4801      	ldr	r0, [pc, #4]	; (ff8c <__malloc_unlock+0x8>)
    ff86:	f000 bd56 	b.w	10a36 <__retarget_lock_release_recursive>
    ff8a:	bf00      	nop
    ff8c:	2000c738 	.word	0x2000c738

0000ff90 <_svfiprintf_r>:
    ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff94:	4698      	mov	r8, r3
    ff96:	898b      	ldrh	r3, [r1, #12]
    ff98:	b09d      	sub	sp, #116	; 0x74
    ff9a:	4607      	mov	r7, r0
    ff9c:	061b      	lsls	r3, r3, #24
    ff9e:	460d      	mov	r5, r1
    ffa0:	4614      	mov	r4, r2
    ffa2:	d510      	bpl.n	ffc6 <_svfiprintf_r+0x36>
    ffa4:	690b      	ldr	r3, [r1, #16]
    ffa6:	b973      	cbnz	r3, ffc6 <_svfiprintf_r+0x36>
    ffa8:	2140      	movs	r1, #64	; 0x40
    ffaa:	f7ff fdcb 	bl	fb44 <_malloc_r>
    ffae:	6028      	str	r0, [r5, #0]
    ffb0:	6128      	str	r0, [r5, #16]
    ffb2:	b930      	cbnz	r0, ffc2 <_svfiprintf_r+0x32>
    ffb4:	230c      	movs	r3, #12
    ffb6:	603b      	str	r3, [r7, #0]
    ffb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffbc:	b01d      	add	sp, #116	; 0x74
    ffbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffc2:	2340      	movs	r3, #64	; 0x40
    ffc4:	616b      	str	r3, [r5, #20]
    ffc6:	2300      	movs	r3, #0
    ffc8:	f8cd 800c 	str.w	r8, [sp, #12]
    ffcc:	f04f 0901 	mov.w	r9, #1
    ffd0:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 10174 <_svfiprintf_r+0x1e4>
    ffd4:	9309      	str	r3, [sp, #36]	; 0x24
    ffd6:	2320      	movs	r3, #32
    ffd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    ffdc:	2330      	movs	r3, #48	; 0x30
    ffde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    ffe2:	4623      	mov	r3, r4
    ffe4:	469a      	mov	sl, r3
    ffe6:	f813 2b01 	ldrb.w	r2, [r3], #1
    ffea:	b10a      	cbz	r2, fff0 <_svfiprintf_r+0x60>
    ffec:	2a25      	cmp	r2, #37	; 0x25
    ffee:	d1f9      	bne.n	ffe4 <_svfiprintf_r+0x54>
    fff0:	ebba 0b04 	subs.w	fp, sl, r4
    fff4:	d00b      	beq.n	1000e <_svfiprintf_r+0x7e>
    fff6:	465b      	mov	r3, fp
    fff8:	4622      	mov	r2, r4
    fffa:	4629      	mov	r1, r5
    fffc:	4638      	mov	r0, r7
    fffe:	f001 ff05 	bl	11e0c <__ssputs_r>
   10002:	3001      	adds	r0, #1
   10004:	f000 80a7 	beq.w	10156 <_svfiprintf_r+0x1c6>
   10008:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1000a:	445a      	add	r2, fp
   1000c:	9209      	str	r2, [sp, #36]	; 0x24
   1000e:	f89a 3000 	ldrb.w	r3, [sl]
   10012:	2b00      	cmp	r3, #0
   10014:	f000 809f 	beq.w	10156 <_svfiprintf_r+0x1c6>
   10018:	2300      	movs	r3, #0
   1001a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1001e:	f10a 0a01 	add.w	sl, sl, #1
   10022:	9304      	str	r3, [sp, #16]
   10024:	9307      	str	r3, [sp, #28]
   10026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1002a:	931a      	str	r3, [sp, #104]	; 0x68
   1002c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   10030:	4654      	mov	r4, sl
   10032:	2205      	movs	r2, #5
   10034:	484f      	ldr	r0, [pc, #316]	; (10174 <_svfiprintf_r+0x1e4>)
   10036:	f814 1b01 	ldrb.w	r1, [r4], #1
   1003a:	f001 ffb4 	bl	11fa6 <memchr>
   1003e:	9a04      	ldr	r2, [sp, #16]
   10040:	b9d8      	cbnz	r0, 1007a <_svfiprintf_r+0xea>
   10042:	06d0      	lsls	r0, r2, #27
   10044:	bf44      	itt	mi
   10046:	2320      	movmi	r3, #32
   10048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1004c:	0711      	lsls	r1, r2, #28
   1004e:	bf44      	itt	mi
   10050:	232b      	movmi	r3, #43	; 0x2b
   10052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10056:	f89a 3000 	ldrb.w	r3, [sl]
   1005a:	2b2a      	cmp	r3, #42	; 0x2a
   1005c:	d015      	beq.n	1008a <_svfiprintf_r+0xfa>
   1005e:	9a07      	ldr	r2, [sp, #28]
   10060:	4654      	mov	r4, sl
   10062:	2000      	movs	r0, #0
   10064:	f04f 0c0a 	mov.w	ip, #10
   10068:	4621      	mov	r1, r4
   1006a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1006e:	3b30      	subs	r3, #48	; 0x30
   10070:	2b09      	cmp	r3, #9
   10072:	d94b      	bls.n	1010c <_svfiprintf_r+0x17c>
   10074:	b1b0      	cbz	r0, 100a4 <_svfiprintf_r+0x114>
   10076:	9207      	str	r2, [sp, #28]
   10078:	e014      	b.n	100a4 <_svfiprintf_r+0x114>
   1007a:	eba0 0308 	sub.w	r3, r0, r8
   1007e:	46a2      	mov	sl, r4
   10080:	fa09 f303 	lsl.w	r3, r9, r3
   10084:	4313      	orrs	r3, r2
   10086:	9304      	str	r3, [sp, #16]
   10088:	e7d2      	b.n	10030 <_svfiprintf_r+0xa0>
   1008a:	9b03      	ldr	r3, [sp, #12]
   1008c:	1d19      	adds	r1, r3, #4
   1008e:	681b      	ldr	r3, [r3, #0]
   10090:	2b00      	cmp	r3, #0
   10092:	9103      	str	r1, [sp, #12]
   10094:	bfbb      	ittet	lt
   10096:	425b      	neglt	r3, r3
   10098:	f042 0202 	orrlt.w	r2, r2, #2
   1009c:	9307      	strge	r3, [sp, #28]
   1009e:	9307      	strlt	r3, [sp, #28]
   100a0:	bfb8      	it	lt
   100a2:	9204      	strlt	r2, [sp, #16]
   100a4:	7823      	ldrb	r3, [r4, #0]
   100a6:	2b2e      	cmp	r3, #46	; 0x2e
   100a8:	d10a      	bne.n	100c0 <_svfiprintf_r+0x130>
   100aa:	7863      	ldrb	r3, [r4, #1]
   100ac:	2b2a      	cmp	r3, #42	; 0x2a
   100ae:	d132      	bne.n	10116 <_svfiprintf_r+0x186>
   100b0:	9b03      	ldr	r3, [sp, #12]
   100b2:	3402      	adds	r4, #2
   100b4:	1d1a      	adds	r2, r3, #4
   100b6:	681b      	ldr	r3, [r3, #0]
   100b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   100bc:	9203      	str	r2, [sp, #12]
   100be:	9305      	str	r3, [sp, #20]
   100c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 10178 <_svfiprintf_r+0x1e8>
   100c4:	2203      	movs	r2, #3
   100c6:	7821      	ldrb	r1, [r4, #0]
   100c8:	4650      	mov	r0, sl
   100ca:	f001 ff6c 	bl	11fa6 <memchr>
   100ce:	b138      	cbz	r0, 100e0 <_svfiprintf_r+0x150>
   100d0:	eba0 000a 	sub.w	r0, r0, sl
   100d4:	2240      	movs	r2, #64	; 0x40
   100d6:	9b04      	ldr	r3, [sp, #16]
   100d8:	3401      	adds	r4, #1
   100da:	4082      	lsls	r2, r0
   100dc:	4313      	orrs	r3, r2
   100de:	9304      	str	r3, [sp, #16]
   100e0:	f814 1b01 	ldrb.w	r1, [r4], #1
   100e4:	2206      	movs	r2, #6
   100e6:	4825      	ldr	r0, [pc, #148]	; (1017c <_svfiprintf_r+0x1ec>)
   100e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   100ec:	f001 ff5b 	bl	11fa6 <memchr>
   100f0:	2800      	cmp	r0, #0
   100f2:	d036      	beq.n	10162 <_svfiprintf_r+0x1d2>
   100f4:	4b22      	ldr	r3, [pc, #136]	; (10180 <_svfiprintf_r+0x1f0>)
   100f6:	bb1b      	cbnz	r3, 10140 <_svfiprintf_r+0x1b0>
   100f8:	9b03      	ldr	r3, [sp, #12]
   100fa:	3307      	adds	r3, #7
   100fc:	f023 0307 	bic.w	r3, r3, #7
   10100:	3308      	adds	r3, #8
   10102:	9303      	str	r3, [sp, #12]
   10104:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10106:	4433      	add	r3, r6
   10108:	9309      	str	r3, [sp, #36]	; 0x24
   1010a:	e76a      	b.n	ffe2 <_svfiprintf_r+0x52>
   1010c:	fb0c 3202 	mla	r2, ip, r2, r3
   10110:	460c      	mov	r4, r1
   10112:	2001      	movs	r0, #1
   10114:	e7a8      	b.n	10068 <_svfiprintf_r+0xd8>
   10116:	2300      	movs	r3, #0
   10118:	3401      	adds	r4, #1
   1011a:	f04f 0c0a 	mov.w	ip, #10
   1011e:	4619      	mov	r1, r3
   10120:	9305      	str	r3, [sp, #20]
   10122:	4620      	mov	r0, r4
   10124:	f810 2b01 	ldrb.w	r2, [r0], #1
   10128:	3a30      	subs	r2, #48	; 0x30
   1012a:	2a09      	cmp	r2, #9
   1012c:	d903      	bls.n	10136 <_svfiprintf_r+0x1a6>
   1012e:	2b00      	cmp	r3, #0
   10130:	d0c6      	beq.n	100c0 <_svfiprintf_r+0x130>
   10132:	9105      	str	r1, [sp, #20]
   10134:	e7c4      	b.n	100c0 <_svfiprintf_r+0x130>
   10136:	fb0c 2101 	mla	r1, ip, r1, r2
   1013a:	4604      	mov	r4, r0
   1013c:	2301      	movs	r3, #1
   1013e:	e7f0      	b.n	10122 <_svfiprintf_r+0x192>
   10140:	ab03      	add	r3, sp, #12
   10142:	462a      	mov	r2, r5
   10144:	a904      	add	r1, sp, #16
   10146:	4638      	mov	r0, r7
   10148:	9300      	str	r3, [sp, #0]
   1014a:	4b0e      	ldr	r3, [pc, #56]	; (10184 <_svfiprintf_r+0x1f4>)
   1014c:	f3af 8000 	nop.w
   10150:	1c42      	adds	r2, r0, #1
   10152:	4606      	mov	r6, r0
   10154:	d1d6      	bne.n	10104 <_svfiprintf_r+0x174>
   10156:	89ab      	ldrh	r3, [r5, #12]
   10158:	065b      	lsls	r3, r3, #25
   1015a:	f53f af2d 	bmi.w	ffb8 <_svfiprintf_r+0x28>
   1015e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10160:	e72c      	b.n	ffbc <_svfiprintf_r+0x2c>
   10162:	ab03      	add	r3, sp, #12
   10164:	462a      	mov	r2, r5
   10166:	a904      	add	r1, sp, #16
   10168:	4638      	mov	r0, r7
   1016a:	9300      	str	r3, [sp, #0]
   1016c:	4b05      	ldr	r3, [pc, #20]	; (10184 <_svfiprintf_r+0x1f4>)
   1016e:	f000 f80b 	bl	10188 <_printf_i>
   10172:	e7ed      	b.n	10150 <_svfiprintf_r+0x1c0>
   10174:	00012bd1 	.word	0x00012bd1
   10178:	00012bd7 	.word	0x00012bd7
   1017c:	00012bdb 	.word	0x00012bdb
   10180:	00000000 	.word	0x00000000
   10184:	00011e0d 	.word	0x00011e0d

00010188 <_printf_i>:
   10188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1018c:	7e0f      	ldrb	r7, [r1, #24]
   1018e:	4691      	mov	r9, r2
   10190:	4680      	mov	r8, r0
   10192:	460c      	mov	r4, r1
   10194:	2f78      	cmp	r7, #120	; 0x78
   10196:	469a      	mov	sl, r3
   10198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1019a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   1019e:	d807      	bhi.n	101b0 <_printf_i+0x28>
   101a0:	2f62      	cmp	r7, #98	; 0x62
   101a2:	d80a      	bhi.n	101ba <_printf_i+0x32>
   101a4:	2f00      	cmp	r7, #0
   101a6:	f000 80e0 	beq.w	1036a <_printf_i+0x1e2>
   101aa:	2f58      	cmp	r7, #88	; 0x58
   101ac:	f000 80bb 	beq.w	10326 <_printf_i+0x19e>
   101b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   101b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   101b8:	e03a      	b.n	10230 <_printf_i+0xa8>
   101ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   101be:	2b15      	cmp	r3, #21
   101c0:	d8f6      	bhi.n	101b0 <_printf_i+0x28>
   101c2:	a101      	add	r1, pc, #4	; (adr r1, 101c8 <_printf_i+0x40>)
   101c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   101c8:	00010221 	.word	0x00010221
   101cc:	00010235 	.word	0x00010235
   101d0:	000101b1 	.word	0x000101b1
   101d4:	000101b1 	.word	0x000101b1
   101d8:	000101b1 	.word	0x000101b1
   101dc:	000101b1 	.word	0x000101b1
   101e0:	00010235 	.word	0x00010235
   101e4:	000101b1 	.word	0x000101b1
   101e8:	000101b1 	.word	0x000101b1
   101ec:	000101b1 	.word	0x000101b1
   101f0:	000101b1 	.word	0x000101b1
   101f4:	00010351 	.word	0x00010351
   101f8:	000102c5 	.word	0x000102c5
   101fc:	00010307 	.word	0x00010307
   10200:	000101b1 	.word	0x000101b1
   10204:	000101b1 	.word	0x000101b1
   10208:	00010373 	.word	0x00010373
   1020c:	000101b1 	.word	0x000101b1
   10210:	000102c5 	.word	0x000102c5
   10214:	000101b1 	.word	0x000101b1
   10218:	000101b1 	.word	0x000101b1
   1021c:	0001030f 	.word	0x0001030f
   10220:	682b      	ldr	r3, [r5, #0]
   10222:	f104 0642 	add.w	r6, r4, #66	; 0x42
   10226:	1d1a      	adds	r2, r3, #4
   10228:	681b      	ldr	r3, [r3, #0]
   1022a:	602a      	str	r2, [r5, #0]
   1022c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   10230:	2301      	movs	r3, #1
   10232:	e0ab      	b.n	1038c <_printf_i+0x204>
   10234:	6823      	ldr	r3, [r4, #0]
   10236:	6829      	ldr	r1, [r5, #0]
   10238:	061f      	lsls	r7, r3, #24
   1023a:	f101 0004 	add.w	r0, r1, #4
   1023e:	6028      	str	r0, [r5, #0]
   10240:	d501      	bpl.n	10246 <_printf_i+0xbe>
   10242:	680d      	ldr	r5, [r1, #0]
   10244:	e003      	b.n	1024e <_printf_i+0xc6>
   10246:	065e      	lsls	r6, r3, #25
   10248:	d5fb      	bpl.n	10242 <_printf_i+0xba>
   1024a:	f9b1 5000 	ldrsh.w	r5, [r1]
   1024e:	2d00      	cmp	r5, #0
   10250:	6861      	ldr	r1, [r4, #4]
   10252:	da7a      	bge.n	1034a <_printf_i+0x1c2>
   10254:	202d      	movs	r0, #45	; 0x2d
   10256:	2900      	cmp	r1, #0
   10258:	60a1      	str	r1, [r4, #8]
   1025a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   1025e:	da2d      	bge.n	102bc <_printf_i+0x134>
   10260:	426d      	negs	r5, r5
   10262:	485e      	ldr	r0, [pc, #376]	; (103dc <_printf_i+0x254>)
   10264:	230a      	movs	r3, #10
   10266:	4616      	mov	r6, r2
   10268:	fbb5 f1f3 	udiv	r1, r5, r3
   1026c:	fb03 5711 	mls	r7, r3, r1, r5
   10270:	5dc7      	ldrb	r7, [r0, r7]
   10272:	f806 7d01 	strb.w	r7, [r6, #-1]!
   10276:	462f      	mov	r7, r5
   10278:	460d      	mov	r5, r1
   1027a:	42bb      	cmp	r3, r7
   1027c:	d9f4      	bls.n	10268 <_printf_i+0xe0>
   1027e:	2b08      	cmp	r3, #8
   10280:	d10b      	bne.n	1029a <_printf_i+0x112>
   10282:	6823      	ldr	r3, [r4, #0]
   10284:	07df      	lsls	r7, r3, #31
   10286:	d508      	bpl.n	1029a <_printf_i+0x112>
   10288:	6923      	ldr	r3, [r4, #16]
   1028a:	6861      	ldr	r1, [r4, #4]
   1028c:	4299      	cmp	r1, r3
   1028e:	bfde      	ittt	le
   10290:	2330      	movle	r3, #48	; 0x30
   10292:	f806 3c01 	strble.w	r3, [r6, #-1]
   10296:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   1029a:	1b92      	subs	r2, r2, r6
   1029c:	6122      	str	r2, [r4, #16]
   1029e:	464b      	mov	r3, r9
   102a0:	aa03      	add	r2, sp, #12
   102a2:	4621      	mov	r1, r4
   102a4:	4640      	mov	r0, r8
   102a6:	f8cd a000 	str.w	sl, [sp]
   102aa:	f001 fe0a 	bl	11ec2 <_printf_common>
   102ae:	3001      	adds	r0, #1
   102b0:	d171      	bne.n	10396 <_printf_i+0x20e>
   102b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   102b6:	b004      	add	sp, #16
   102b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   102bc:	f023 0304 	bic.w	r3, r3, #4
   102c0:	6023      	str	r3, [r4, #0]
   102c2:	e7cd      	b.n	10260 <_printf_i+0xd8>
   102c4:	682b      	ldr	r3, [r5, #0]
   102c6:	6820      	ldr	r0, [r4, #0]
   102c8:	1d19      	adds	r1, r3, #4
   102ca:	6029      	str	r1, [r5, #0]
   102cc:	0605      	lsls	r5, r0, #24
   102ce:	d501      	bpl.n	102d4 <_printf_i+0x14c>
   102d0:	681d      	ldr	r5, [r3, #0]
   102d2:	e002      	b.n	102da <_printf_i+0x152>
   102d4:	0641      	lsls	r1, r0, #25
   102d6:	d5fb      	bpl.n	102d0 <_printf_i+0x148>
   102d8:	881d      	ldrh	r5, [r3, #0]
   102da:	2f6f      	cmp	r7, #111	; 0x6f
   102dc:	483f      	ldr	r0, [pc, #252]	; (103dc <_printf_i+0x254>)
   102de:	bf14      	ite	ne
   102e0:	230a      	movne	r3, #10
   102e2:	2308      	moveq	r3, #8
   102e4:	2100      	movs	r1, #0
   102e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   102ea:	6866      	ldr	r6, [r4, #4]
   102ec:	2e00      	cmp	r6, #0
   102ee:	60a6      	str	r6, [r4, #8]
   102f0:	dbb9      	blt.n	10266 <_printf_i+0xde>
   102f2:	6821      	ldr	r1, [r4, #0]
   102f4:	f021 0104 	bic.w	r1, r1, #4
   102f8:	6021      	str	r1, [r4, #0]
   102fa:	2d00      	cmp	r5, #0
   102fc:	d1b3      	bne.n	10266 <_printf_i+0xde>
   102fe:	2e00      	cmp	r6, #0
   10300:	d1b1      	bne.n	10266 <_printf_i+0xde>
   10302:	4616      	mov	r6, r2
   10304:	e7bb      	b.n	1027e <_printf_i+0xf6>
   10306:	6823      	ldr	r3, [r4, #0]
   10308:	f043 0320 	orr.w	r3, r3, #32
   1030c:	6023      	str	r3, [r4, #0]
   1030e:	2778      	movs	r7, #120	; 0x78
   10310:	4833      	ldr	r0, [pc, #204]	; (103e0 <_printf_i+0x258>)
   10312:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   10316:	6829      	ldr	r1, [r5, #0]
   10318:	6823      	ldr	r3, [r4, #0]
   1031a:	1d0e      	adds	r6, r1, #4
   1031c:	602e      	str	r6, [r5, #0]
   1031e:	061e      	lsls	r6, r3, #24
   10320:	d503      	bpl.n	1032a <_printf_i+0x1a2>
   10322:	680d      	ldr	r5, [r1, #0]
   10324:	e004      	b.n	10330 <_printf_i+0x1a8>
   10326:	482d      	ldr	r0, [pc, #180]	; (103dc <_printf_i+0x254>)
   10328:	e7f3      	b.n	10312 <_printf_i+0x18a>
   1032a:	065d      	lsls	r5, r3, #25
   1032c:	d5f9      	bpl.n	10322 <_printf_i+0x19a>
   1032e:	880d      	ldrh	r5, [r1, #0]
   10330:	07d9      	lsls	r1, r3, #31
   10332:	bf44      	itt	mi
   10334:	f043 0320 	orrmi.w	r3, r3, #32
   10338:	6023      	strmi	r3, [r4, #0]
   1033a:	b10d      	cbz	r5, 10340 <_printf_i+0x1b8>
   1033c:	2310      	movs	r3, #16
   1033e:	e7d1      	b.n	102e4 <_printf_i+0x15c>
   10340:	6823      	ldr	r3, [r4, #0]
   10342:	f023 0320 	bic.w	r3, r3, #32
   10346:	6023      	str	r3, [r4, #0]
   10348:	e7f8      	b.n	1033c <_printf_i+0x1b4>
   1034a:	4824      	ldr	r0, [pc, #144]	; (103dc <_printf_i+0x254>)
   1034c:	230a      	movs	r3, #10
   1034e:	e7cc      	b.n	102ea <_printf_i+0x162>
   10350:	682b      	ldr	r3, [r5, #0]
   10352:	6826      	ldr	r6, [r4, #0]
   10354:	1d18      	adds	r0, r3, #4
   10356:	6961      	ldr	r1, [r4, #20]
   10358:	6028      	str	r0, [r5, #0]
   1035a:	0635      	lsls	r5, r6, #24
   1035c:	681b      	ldr	r3, [r3, #0]
   1035e:	d501      	bpl.n	10364 <_printf_i+0x1dc>
   10360:	6019      	str	r1, [r3, #0]
   10362:	e002      	b.n	1036a <_printf_i+0x1e2>
   10364:	0670      	lsls	r0, r6, #25
   10366:	d5fb      	bpl.n	10360 <_printf_i+0x1d8>
   10368:	8019      	strh	r1, [r3, #0]
   1036a:	2300      	movs	r3, #0
   1036c:	4616      	mov	r6, r2
   1036e:	6123      	str	r3, [r4, #16]
   10370:	e795      	b.n	1029e <_printf_i+0x116>
   10372:	682b      	ldr	r3, [r5, #0]
   10374:	2100      	movs	r1, #0
   10376:	1d1a      	adds	r2, r3, #4
   10378:	602a      	str	r2, [r5, #0]
   1037a:	681e      	ldr	r6, [r3, #0]
   1037c:	6862      	ldr	r2, [r4, #4]
   1037e:	4630      	mov	r0, r6
   10380:	f001 fe11 	bl	11fa6 <memchr>
   10384:	b108      	cbz	r0, 1038a <_printf_i+0x202>
   10386:	1b80      	subs	r0, r0, r6
   10388:	6060      	str	r0, [r4, #4]
   1038a:	6863      	ldr	r3, [r4, #4]
   1038c:	6123      	str	r3, [r4, #16]
   1038e:	2300      	movs	r3, #0
   10390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10394:	e783      	b.n	1029e <_printf_i+0x116>
   10396:	6923      	ldr	r3, [r4, #16]
   10398:	4632      	mov	r2, r6
   1039a:	4649      	mov	r1, r9
   1039c:	4640      	mov	r0, r8
   1039e:	47d0      	blx	sl
   103a0:	3001      	adds	r0, #1
   103a2:	d086      	beq.n	102b2 <_printf_i+0x12a>
   103a4:	6823      	ldr	r3, [r4, #0]
   103a6:	079b      	lsls	r3, r3, #30
   103a8:	d414      	bmi.n	103d4 <_printf_i+0x24c>
   103aa:	68e0      	ldr	r0, [r4, #12]
   103ac:	9b03      	ldr	r3, [sp, #12]
   103ae:	4298      	cmp	r0, r3
   103b0:	bfb8      	it	lt
   103b2:	4618      	movlt	r0, r3
   103b4:	e77f      	b.n	102b6 <_printf_i+0x12e>
   103b6:	2301      	movs	r3, #1
   103b8:	4632      	mov	r2, r6
   103ba:	4649      	mov	r1, r9
   103bc:	4640      	mov	r0, r8
   103be:	47d0      	blx	sl
   103c0:	3001      	adds	r0, #1
   103c2:	f43f af76 	beq.w	102b2 <_printf_i+0x12a>
   103c6:	3501      	adds	r5, #1
   103c8:	68e3      	ldr	r3, [r4, #12]
   103ca:	9903      	ldr	r1, [sp, #12]
   103cc:	1a5b      	subs	r3, r3, r1
   103ce:	42ab      	cmp	r3, r5
   103d0:	dcf1      	bgt.n	103b6 <_printf_i+0x22e>
   103d2:	e7ea      	b.n	103aa <_printf_i+0x222>
   103d4:	2500      	movs	r5, #0
   103d6:	f104 0619 	add.w	r6, r4, #25
   103da:	e7f5      	b.n	103c8 <_printf_i+0x240>
   103dc:	00012be2 	.word	0x00012be2
   103e0:	00012bf3 	.word	0x00012bf3

000103e4 <arch_printk_char_out>:
}
   103e4:	2000      	movs	r0, #0
   103e6:	4770      	bx	lr

000103e8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   103e8:	b40f      	push	{r0, r1, r2, r3}
   103ea:	b507      	push	{r0, r1, r2, lr}
   103ec:	a904      	add	r1, sp, #16
   103ee:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   103f2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   103f4:	f7f8 fea6 	bl	9144 <vprintk>

	va_end(ap);
}
   103f8:	b003      	add	sp, #12
   103fa:	f85d eb04 	ldr.w	lr, [sp], #4
   103fe:	b004      	add	sp, #16
   10400:	4770      	bx	lr

00010402 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   10402:	4604      	mov	r4, r0
   10404:	b508      	push	{r3, lr}
   10406:	4608      	mov	r0, r1
   10408:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1040a:	461a      	mov	r2, r3
   1040c:	47a0      	blx	r4
	return z_impl_z_current_get();
   1040e:	f7ff f935 	bl	f67c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   10412:	f7f9 ffc1 	bl	a398 <z_impl_k_thread_abort>

00010416 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   10416:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1041a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1041c:	0840      	lsrs	r0, r0, #1
   1041e:	4770      	bx	lr

00010420 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   10420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10422:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   10424:	f7ff fff7 	bl	10416 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   10428:	fab0 f080 	clz	r0, r0
   1042c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   10430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   10434:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   10438:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   1043a:	1d17      	adds	r7, r2, #4
{
   1043c:	460c      	mov	r4, r1
   1043e:	3206      	adds	r2, #6
   10440:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   10442:	b956      	cbnz	r6, 1045a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   10444:	2101      	movs	r1, #1
   10446:	fa01 f000 	lsl.w	r0, r1, r0
   1044a:	68d9      	ldr	r1, [r3, #12]
   1044c:	4301      	orrs	r1, r0
   1044e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   10450:	f8cc 4010 	str.w	r4, [ip, #16]
   10454:	53dd      	strh	r5, [r3, r7]
   10456:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   10458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1045a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1045c:	3104      	adds	r1, #4
   1045e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   10460:	53d8      	strh	r0, [r3, r7]
   10462:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   10466:	529e      	strh	r6, [r3, r2]
   10468:	80c5      	strh	r5, [r0, #6]
   1046a:	525d      	strh	r5, [r3, r1]
   1046c:	e7f4      	b.n	10458 <free_list_add+0x38>

0001046e <free_list_remove_bidx>:
{
   1046e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   10470:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   10474:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   10476:	4299      	cmp	r1, r3
   10478:	f102 0104 	add.w	r1, r2, #4
   1047c:	d10a      	bne.n	10494 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1047e:	2301      	movs	r3, #1
   10480:	fa03 f202 	lsl.w	r2, r3, r2
   10484:	68c3      	ldr	r3, [r0, #12]
   10486:	ea23 0302 	bic.w	r3, r3, r2
   1048a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1048c:	2300      	movs	r3, #0
   1048e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   10492:	bd10      	pop	{r4, pc}
   10494:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   10496:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1049a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1049e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   104a2:	80cb      	strh	r3, [r1, #6]
   104a4:	8082      	strh	r2, [r0, #4]
}
   104a6:	e7f4      	b.n	10492 <free_list_remove_bidx+0x24>

000104a8 <free_list_remove>:
{
   104a8:	b508      	push	{r3, lr}
   104aa:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   104ac:	f7ff ffb3 	bl	10416 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   104b0:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   104b4:	4618      	mov	r0, r3
}
   104b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   104ba:	f1c2 021f 	rsb	r2, r2, #31
   104be:	f7ff bfd6 	b.w	1046e <free_list_remove_bidx>

000104c2 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   104c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   104c6:	fab1 f581 	clz	r5, r1
   104ca:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   104ce:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   104d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   104d6:	4603      	mov	r3, r0
   104d8:	460e      	mov	r6, r1
	if (b->next) {
   104da:	b1c2      	cbz	r2, 1050e <alloc_chunk+0x4c>
   104dc:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   104de:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   104e2:	4618      	mov	r0, r3
   104e4:	4621      	mov	r1, r4
   104e6:	f7ff ff96 	bl	10416 <chunk_size>
   104ea:	42b0      	cmp	r0, r6
   104ec:	d306      	bcc.n	104fc <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   104ee:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   104f0:	4618      	mov	r0, r3
   104f2:	f7ff ffbc 	bl	1046e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   104f6:	4620      	mov	r0, r4
   104f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   104fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   10500:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   10502:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   10504:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   10508:	d001      	beq.n	1050e <alloc_chunk+0x4c>
   1050a:	4282      	cmp	r2, r0
   1050c:	d1e7      	bne.n	104de <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1050e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10512:	f1c5 0220 	rsb	r2, r5, #32
   10516:	4094      	lsls	r4, r2
   10518:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1051a:	4014      	ands	r4, r2
   1051c:	d0eb      	beq.n	104f6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1051e:	fa94 f2a4 	rbit	r2, r4
   10522:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   10526:	1d11      	adds	r1, r2, #4
   10528:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1052c:	4621      	mov	r1, r4
   1052e:	e7df      	b.n	104f0 <alloc_chunk+0x2e>

00010530 <merge_chunks>:
{
   10530:	b538      	push	{r3, r4, r5, lr}
   10532:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   10534:	f7ff ff6f 	bl	10416 <chunk_size>
{
   10538:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1053a:	4604      	mov	r4, r0
   1053c:	4611      	mov	r1, r2
   1053e:	4618      	mov	r0, r3
   10540:	f7ff ff69 	bl	10416 <chunk_size>
   10544:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10546:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   10548:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1054c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1054e:	4618      	mov	r0, r3
   10550:	f7ff ff61 	bl	10416 <chunk_size>
	void *cmem = &buf[c];
   10554:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   10556:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1055a:	bd38      	pop	{r3, r4, r5, pc}

0001055c <split_chunks>:
{
   1055c:	b538      	push	{r3, r4, r5, lr}
   1055e:	460c      	mov	r4, r1
   10560:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   10562:	f7ff ff58 	bl	10416 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   10566:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   10568:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1056a:	4405      	add	r5, r0
   1056c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10570:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   10572:	8060      	strh	r0, [r4, #2]
   10574:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10578:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1057a:	8044      	strh	r4, [r0, #2]
   1057c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   10580:	4618      	mov	r0, r3
   10582:	4611      	mov	r1, r2
   10584:	f7ff ff47 	bl	10416 <chunk_size>
	void *cmem = &buf[c];
   10588:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1058a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1058e:	bd38      	pop	{r3, r4, r5, pc}

00010590 <free_chunk>:
{
   10590:	b538      	push	{r3, r4, r5, lr}
   10592:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   10594:	f7ff ff3f 	bl	10416 <chunk_size>
   10598:	460c      	mov	r4, r1
   1059a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1059c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   105a0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   105a2:	07da      	lsls	r2, r3, #31
   105a4:	d40a      	bmi.n	105bc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   105a6:	4628      	mov	r0, r5
   105a8:	f7ff ff7e 	bl	104a8 <free_list_remove>
	return c + chunk_size(h, c);
   105ac:	4621      	mov	r1, r4
   105ae:	4628      	mov	r0, r5
   105b0:	f7ff ff31 	bl	10416 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   105b4:	1822      	adds	r2, r4, r0
   105b6:	4628      	mov	r0, r5
   105b8:	f7ff ffba 	bl	10530 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   105bc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   105c0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   105c2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   105c6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   105c8:	07db      	lsls	r3, r3, #31
   105ca:	d40c      	bmi.n	105e6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   105cc:	4628      	mov	r0, r5
   105ce:	f7ff ff6b 	bl	104a8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   105d2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   105d6:	4622      	mov	r2, r4
   105d8:	1a61      	subs	r1, r4, r1
   105da:	4628      	mov	r0, r5
   105dc:	f7ff ffa8 	bl	10530 <merge_chunks>
   105e0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   105e4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   105e6:	4621      	mov	r1, r4
   105e8:	4628      	mov	r0, r5
}
   105ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   105ee:	f7ff bf17 	b.w	10420 <free_list_add>

000105f2 <sys_heap_free>:
	if (mem == NULL) {
   105f2:	b161      	cbz	r1, 1060e <sys_heap_free+0x1c>
   105f4:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   105f6:	3904      	subs	r1, #4
   105f8:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   105fa:	f021 0307 	bic.w	r3, r1, #7
   105fe:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10600:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   10602:	08c9      	lsrs	r1, r1, #3
   10604:	f022 0201 	bic.w	r2, r2, #1
   10608:	805a      	strh	r2, [r3, #2]
   1060a:	f7ff bfc1 	b.w	10590 <free_chunk>
}
   1060e:	4770      	bx	lr

00010610 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   10610:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   10612:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   10614:	b909      	cbnz	r1, 1061a <sys_heap_alloc+0xa>
		return NULL;
   10616:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   10618:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1061a:	68ab      	ldr	r3, [r5, #8]
   1061c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   10620:	d9f9      	bls.n	10616 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10622:	310b      	adds	r1, #11
   10624:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   10626:	4621      	mov	r1, r4
   10628:	4628      	mov	r0, r5
   1062a:	f7ff ff4a 	bl	104c2 <alloc_chunk>
	if (c == 0U) {
   1062e:	4606      	mov	r6, r0
   10630:	2800      	cmp	r0, #0
   10632:	d0f0      	beq.n	10616 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   10634:	4601      	mov	r1, r0
   10636:	4628      	mov	r0, r5
   10638:	f7ff feed 	bl	10416 <chunk_size>
   1063c:	42a0      	cmp	r0, r4
   1063e:	d907      	bls.n	10650 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   10640:	4628      	mov	r0, r5
   10642:	1932      	adds	r2, r6, r4
   10644:	f7ff ff8a 	bl	1055c <split_chunks>
		free_list_add(h, c + chunk_sz);
   10648:	4611      	mov	r1, r2
   1064a:	4628      	mov	r0, r5
   1064c:	f7ff fee8 	bl	10420 <free_list_add>
	void *cmem = &buf[c];
   10650:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   10654:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10656:	8853      	ldrh	r3, [r2, #2]
   10658:	3004      	adds	r0, #4
   1065a:	f043 0301 	orr.w	r3, r3, #1
   1065e:	8053      	strh	r3, [r2, #2]
	return mem;
   10660:	e7da      	b.n	10618 <sys_heap_alloc+0x8>

00010662 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10662:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10666:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1066a:	ea19 0901 	ands.w	r9, r9, r1
{
   1066e:	460f      	mov	r7, r1
   10670:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   10672:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   10674:	d00c      	beq.n	10690 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   10676:	424b      	negs	r3, r1
   10678:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1067a:	2b04      	cmp	r3, #4
   1067c:	461a      	mov	r2, r3
   1067e:	464f      	mov	r7, r9
   10680:	bf28      	it	cs
   10682:	2204      	movcs	r2, #4
	rew = align & -align;
   10684:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   10686:	b964      	cbnz	r4, 106a2 <sys_heap_aligned_alloc+0x40>
		return NULL;
   10688:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1068a:	4628      	mov	r0, r5
   1068c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   10690:	2904      	cmp	r1, #4
   10692:	d804      	bhi.n	1069e <sys_heap_aligned_alloc+0x3c>
}
   10694:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   10698:	4611      	mov	r1, r2
   1069a:	f7ff bfb9 	b.w	10610 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1069e:	2204      	movs	r2, #4
   106a0:	e7f1      	b.n	10686 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   106a2:	68b3      	ldr	r3, [r6, #8]
   106a4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   106a8:	d9ee      	bls.n	10688 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   106aa:	f104 010b 	add.w	r1, r4, #11
   106ae:	4439      	add	r1, r7
   106b0:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   106b2:	4630      	mov	r0, r6
   106b4:	08c9      	lsrs	r1, r1, #3
   106b6:	f7ff ff04 	bl	104c2 <alloc_chunk>
	if (c0 == 0) {
   106ba:	4680      	mov	r8, r0
   106bc:	2800      	cmp	r0, #0
   106be:	d0e3      	beq.n	10688 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   106c0:	f109 0504 	add.w	r5, r9, #4
   106c4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   106c8:	1e7b      	subs	r3, r7, #1
   106ca:	4435      	add	r5, r6
   106cc:	441d      	add	r5, r3
   106ce:	427f      	negs	r7, r7
   106d0:	403d      	ands	r5, r7
   106d2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   106d6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   106d8:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   106da:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   106dc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   106de:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   106e2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   106e4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   106e8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   106ec:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   106f0:	d208      	bcs.n	10704 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   106f2:	4601      	mov	r1, r0
   106f4:	463a      	mov	r2, r7
   106f6:	4630      	mov	r0, r6
   106f8:	f7ff ff30 	bl	1055c <split_chunks>
		free_list_add(h, c0);
   106fc:	4641      	mov	r1, r8
   106fe:	4630      	mov	r0, r6
   10700:	f7ff fe8e 	bl	10420 <free_list_add>
	return c + chunk_size(h, c);
   10704:	4639      	mov	r1, r7
   10706:	4630      	mov	r0, r6
   10708:	f7ff fe85 	bl	10416 <chunk_size>
   1070c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1070e:	4284      	cmp	r4, r0
   10710:	d207      	bcs.n	10722 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   10712:	4630      	mov	r0, r6
   10714:	4622      	mov	r2, r4
   10716:	f7ff ff21 	bl	1055c <split_chunks>
		free_list_add(h, c_end);
   1071a:	4621      	mov	r1, r4
   1071c:	4630      	mov	r0, r6
   1071e:	f7ff fe7f 	bl	10420 <free_list_add>
	void *cmem = &buf[c];
   10722:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10726:	8873      	ldrh	r3, [r6, #2]
   10728:	f043 0301 	orr.w	r3, r3, #1
   1072c:	8073      	strh	r3, [r6, #2]
   1072e:	e7ac      	b.n	1068a <sys_heap_aligned_alloc+0x28>

00010730 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   10730:	b4f0      	push	{r4, r5, r6, r7}
   10732:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   10734:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10736:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10738:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1073a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1073e:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10742:	1a0e      	subs	r6, r1, r0
   10744:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   10746:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1074a:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1074c:	2700      	movs	r7, #0
   1074e:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10750:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   10754:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   10756:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10758:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   1075a:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1075e:	f1c2 0220 	rsb	r2, r2, #32
   10762:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   10764:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   10768:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1076c:	4294      	cmp	r4, r2
   1076e:	d1fb      	bne.n	10768 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10770:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10772:	f042 0201 	orr.w	r2, r2, #1
   10776:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10778:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1077a:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1077c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   10780:	8007      	strh	r7, [r0, #0]
   10782:	8065      	strh	r5, [r4, #2]
   10784:	1984      	adds	r4, r0, r6
   10786:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1078a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1078e:	8067      	strh	r7, [r4, #2]
   10790:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10792:	885a      	ldrh	r2, [r3, #2]
   10794:	f042 0201 	orr.w	r2, r2, #1
   10798:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1079a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1079c:	f7ff be40 	b.w	10420 <free_list_add>

000107a0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107a0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   107a2:	f013 0307 	ands.w	r3, r3, #7
   107a6:	d105      	bne.n	107b4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   107a8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   107aa:	2b00      	cmp	r3, #0
   107ac:	bf0c      	ite	eq
   107ae:	2000      	moveq	r0, #0
   107b0:	2003      	movne	r0, #3
   107b2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   107b4:	2b02      	cmp	r3, #2
   107b6:	d105      	bne.n	107c4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   107b8:	8b40      	ldrh	r0, [r0, #26]
   107ba:	fab0 f080 	clz	r0, r0
   107be:	0940      	lsrs	r0, r0, #5
   107c0:	0080      	lsls	r0, r0, #2
   107c2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   107c4:	2b01      	cmp	r3, #1
   107c6:	d105      	bne.n	107d4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   107c8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   107ca:	2b00      	cmp	r3, #0
   107cc:	bf0c      	ite	eq
   107ce:	2000      	moveq	r0, #0
   107d0:	2005      	movne	r0, #5
   107d2:	4770      	bx	lr
	int evt = EVT_NOP;
   107d4:	2000      	movs	r0, #0
}
   107d6:	4770      	bx	lr

000107d8 <validate_args>:
{
   107d8:	b510      	push	{r4, lr}
   107da:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   107dc:	b100      	cbz	r0, 107e0 <validate_args+0x8>
   107de:	b911      	cbnz	r1, 107e6 <validate_args+0xe>
		return -EINVAL;
   107e0:	f06f 0015 	mvn.w	r0, #21
}
   107e4:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   107e6:	1d08      	adds	r0, r1, #4
   107e8:	f000 f895 	bl	10916 <sys_notify_validate>
	if ((rv == 0)
   107ec:	2800      	cmp	r0, #0
   107ee:	d1f9      	bne.n	107e4 <validate_args+0xc>
	    && ((cli->notify.flags
   107f0:	68a3      	ldr	r3, [r4, #8]
   107f2:	2b03      	cmp	r3, #3
   107f4:	d9f6      	bls.n	107e4 <validate_args+0xc>
   107f6:	e7f3      	b.n	107e0 <validate_args+0x8>

000107f8 <notify_one>:
{
   107f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107fc:	460d      	mov	r5, r1
   107fe:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10800:	4619      	mov	r1, r3
   10802:	1d28      	adds	r0, r5, #4
{
   10804:	4690      	mov	r8, r2
   10806:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10808:	f000 f896 	bl	10938 <sys_notify_finalize>
	if (cb) {
   1080c:	4604      	mov	r4, r0
   1080e:	b138      	cbz	r0, 10820 <notify_one+0x28>
		cb(mgr, cli, state, res);
   10810:	4633      	mov	r3, r6
   10812:	4642      	mov	r2, r8
   10814:	4629      	mov	r1, r5
   10816:	4638      	mov	r0, r7
   10818:	46a4      	mov	ip, r4
}
   1081a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1081e:	4760      	bx	ip
}
   10820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010824 <transition_complete>:
{
   10824:	b410      	push	{r4}
	__asm__ volatile(
   10826:	f04f 0420 	mov.w	r4, #32
   1082a:	f3ef 8211 	mrs	r2, BASEPRI
   1082e:	f384 8812 	msr	BASEPRI_MAX, r4
   10832:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   10836:	6141      	str	r1, [r0, #20]
}
   10838:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1083a:	2101      	movs	r1, #1
   1083c:	f7f8 bc90 	b.w	9160 <process_event>

00010840 <onoff_manager_init>:
{
   10840:	b538      	push	{r3, r4, r5, lr}
   10842:	460c      	mov	r4, r1
	if ((mgr == NULL)
   10844:	4605      	mov	r5, r0
   10846:	b158      	cbz	r0, 10860 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   10848:	b151      	cbz	r1, 10860 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1084a:	680b      	ldr	r3, [r1, #0]
   1084c:	b143      	cbz	r3, 10860 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1084e:	684b      	ldr	r3, [r1, #4]
   10850:	b133      	cbz	r3, 10860 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   10852:	221c      	movs	r2, #28
   10854:	2100      	movs	r1, #0
   10856:	f001 fa4a 	bl	11cee <memset>
	return 0;
   1085a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1085c:	612c      	str	r4, [r5, #16]
}
   1085e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10860:	f06f 0015 	mvn.w	r0, #21
   10864:	e7fb      	b.n	1085e <onoff_manager_init+0x1e>

00010866 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10866:	b570      	push	{r4, r5, r6, lr}
   10868:	4605      	mov	r5, r0
   1086a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1086c:	f7ff ffb4 	bl	107d8 <validate_args>

	if (rv < 0) {
   10870:	1e04      	subs	r4, r0, #0
   10872:	db15      	blt.n	108a0 <onoff_request+0x3a>
   10874:	f04f 0320 	mov.w	r3, #32
   10878:	f3ef 8211 	mrs	r2, BASEPRI
   1087c:	f383 8812 	msr	BASEPRI_MAX, r3
   10880:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10884:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10888:	8b6b      	ldrh	r3, [r5, #26]
   1088a:	8b2c      	ldrh	r4, [r5, #24]
   1088c:	428b      	cmp	r3, r1
   1088e:	f004 0407 	and.w	r4, r4, #7
   10892:	d107      	bne.n	108a4 <onoff_request+0x3e>
	__asm__ volatile(
   10894:	f382 8811 	msr	BASEPRI, r2
   10898:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1089c:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   108a0:	4620      	mov	r0, r4
   108a2:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   108a4:	2c02      	cmp	r4, #2
   108a6:	d10c      	bne.n	108c2 <onoff_request+0x5c>
		mgr->refs += 1U;
   108a8:	3301      	adds	r3, #1
   108aa:	836b      	strh	r3, [r5, #26]
   108ac:	f382 8811 	msr	BASEPRI, r2
   108b0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   108b4:	2300      	movs	r3, #0
   108b6:	4622      	mov	r2, r4
   108b8:	4631      	mov	r1, r6
   108ba:	4628      	mov	r0, r5
   108bc:	f7ff ff9c 	bl	107f8 <notify_one>
   108c0:	e7ee      	b.n	108a0 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   108c2:	2c06      	cmp	r4, #6
   108c4:	d814      	bhi.n	108f0 <onoff_request+0x8a>
   108c6:	e8df f004 	tbb	[pc, r4]
   108ca:	1304      	.short	0x1304
   108cc:	1a041313 	.word	0x1a041313
   108d0:	04          	.byte	0x04
   108d1:	00          	.byte	0x00
	parent->next = child;
   108d2:	2300      	movs	r3, #0
   108d4:	6033      	str	r3, [r6, #0]
	return list->tail;
   108d6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   108d8:	b93b      	cbnz	r3, 108ea <onoff_request+0x84>
	list->head = node;
   108da:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   108de:	b9ac      	cbnz	r4, 1090c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   108e0:	2102      	movs	r1, #2
   108e2:	4628      	mov	r0, r5
   108e4:	f7f8 fc3c 	bl	9160 <process_event>
   108e8:	e7da      	b.n	108a0 <onoff_request+0x3a>
	parent->next = child;
   108ea:	601e      	str	r6, [r3, #0]
	list->tail = node;
   108ec:	606e      	str	r6, [r5, #4]
}
   108ee:	e7f6      	b.n	108de <onoff_request+0x78>
   108f0:	f382 8811 	msr	BASEPRI, r2
   108f4:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   108f8:	f06f 0404 	mvn.w	r4, #4
   108fc:	e7d0      	b.n	108a0 <onoff_request+0x3a>
   108fe:	f382 8811 	msr	BASEPRI, r2
   10902:	f3bf 8f6f 	isb	sy
   10906:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1090a:	e7c9      	b.n	108a0 <onoff_request+0x3a>
   1090c:	f382 8811 	msr	BASEPRI, r2
   10910:	f3bf 8f6f 	isb	sy
		if (notify) {
   10914:	e7c4      	b.n	108a0 <onoff_request+0x3a>

00010916 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   10916:	4603      	mov	r3, r0
   10918:	b158      	cbz	r0, 10932 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1091a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1091c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   10920:	2a01      	cmp	r2, #1
   10922:	d003      	beq.n	1092c <sys_notify_validate+0x16>
   10924:	2a03      	cmp	r2, #3
   10926:	d104      	bne.n	10932 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   10928:	6802      	ldr	r2, [r0, #0]
   1092a:	b112      	cbz	r2, 10932 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1092c:	2000      	movs	r0, #0
   1092e:	6098      	str	r0, [r3, #8]
   10930:	4770      	bx	lr
   10932:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   10936:	4770      	bx	lr

00010938 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10938:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1093a:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   1093c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   10940:	2a03      	cmp	r2, #3
   10942:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
   10946:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
   10948:	bf14      	ite	ne
   1094a:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1094c:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1094e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   10950:	4770      	bx	lr

00010952 <outs>:
{
   10952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10956:	4607      	mov	r7, r0
   10958:	4688      	mov	r8, r1
   1095a:	4615      	mov	r5, r2
   1095c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1095e:	4614      	mov	r4, r2
   10960:	42b4      	cmp	r4, r6
   10962:	d305      	bcc.n	10970 <outs+0x1e>
   10964:	b10e      	cbz	r6, 1096a <outs+0x18>
	return (int)count;
   10966:	1b60      	subs	r0, r4, r5
   10968:	e008      	b.n	1097c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1096a:	7823      	ldrb	r3, [r4, #0]
   1096c:	2b00      	cmp	r3, #0
   1096e:	d0fa      	beq.n	10966 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   10970:	4641      	mov	r1, r8
   10972:	f814 0b01 	ldrb.w	r0, [r4], #1
   10976:	47b8      	blx	r7
		if (rc < 0) {
   10978:	2800      	cmp	r0, #0
   1097a:	daf1      	bge.n	10960 <outs+0xe>
}
   1097c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010980 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   10980:	4770      	bx	lr

00010982 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   10982:	2806      	cmp	r0, #6
   10984:	d108      	bne.n	10998 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   10986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1098a:	2201      	movs	r2, #1
   1098c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   10990:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   10994:	bf20      	wfe
    while (true)
   10996:	e7fd      	b.n	10994 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   10998:	4770      	bx	lr

0001099a <pm_state_exit_post_ops>:
   1099a:	2300      	movs	r3, #0
   1099c:	f383 8811 	msr	BASEPRI, r3
   109a0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   109a4:	4770      	bx	lr

000109a6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   109a6:	f000 be84 	b.w	116b2 <z_fatal_error>

000109aa <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   109aa:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   109ac:	6800      	ldr	r0, [r0, #0]
   109ae:	f000 be80 	b.w	116b2 <z_fatal_error>

000109b2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   109b2:	2100      	movs	r1, #0
   109b4:	2001      	movs	r0, #1
   109b6:	f7ff bff6 	b.w	109a6 <z_arm_fatal_error>

000109ba <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   109ba:	b508      	push	{r3, lr}
	handler();
   109bc:	f7f9 fa84 	bl	9ec8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   109c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   109c4:	f7f9 bb4c 	b.w	a060 <z_arm_exc_exit>

000109c8 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   109c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
   109ca:	f383 880b 	msr	PSPLIM, r3
}
   109ce:	4770      	bx	lr

000109d0 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   109d0:	4770      	bx	lr

000109d2 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   109d2:	4770      	bx	lr

000109d4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   109d4:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   109d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   109dc:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   109de:	bf08      	it	eq
   109e0:	f06f 0015 	mvneq.w	r0, #21
   109e4:	4770      	bx	lr

000109e6 <mpu_configure_region>:
{
   109e6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   109e8:	890a      	ldrh	r2, [r1, #8]
   109ea:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
   109ec:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   109ee:	684d      	ldr	r5, [r1, #4]
   109f0:	f002 021f 	and.w	r2, r2, #31
   109f4:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   109f8:	9300      	str	r3, [sp, #0]
   109fa:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   109fe:	f023 031f 	bic.w	r3, r3, #31
   10a02:	1e6a      	subs	r2, r5, #1
   10a04:	4413      	add	r3, r2
   10a06:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   10a0a:	280f      	cmp	r0, #15
   10a0c:	9303      	str	r3, [sp, #12]
   10a0e:	d804      	bhi.n	10a1a <mpu_configure_region+0x34>
	region_init(index, region_conf);
   10a10:	4669      	mov	r1, sp
   10a12:	f7f9 fcf3 	bl	a3fc <region_init>
}
   10a16:	b004      	add	sp, #16
   10a18:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   10a1a:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
   10a1e:	e7fa      	b.n	10a16 <mpu_configure_region+0x30>

00010a20 <malloc_prepare>:
}
   10a20:	2000      	movs	r0, #0
   10a22:	4770      	bx	lr

00010a24 <_stdout_hook_default>:
}
   10a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a28:	4770      	bx	lr

00010a2a <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   10a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10a32:	f7fe b8db 	b.w	ebec <z_impl_k_mutex_lock>

00010a36 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   10a36:	f7fe b953 	b.w	ece0 <z_impl_k_mutex_unlock>

00010a3a <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   10a3a:	f7fd beff 	b.w	e83c <z_impl_z_errno>

00010a3e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   10a3e:	220c      	movs	r2, #12
   10a40:	6903      	ldr	r3, [r0, #16]
   10a42:	b2c9      	uxtb	r1, r1
   10a44:	fb01 3302 	mla	r3, r1, r2, r3
   10a48:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   10a4a:	f000 0007 	and.w	r0, r0, #7
   10a4e:	4770      	bx	lr

00010a50 <set_on_state>:
	__asm__ volatile(
   10a50:	f04f 0320 	mov.w	r3, #32
   10a54:	f3ef 8211 	mrs	r2, BASEPRI
   10a58:	f383 8812 	msr	BASEPRI_MAX, r3
   10a5c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   10a60:	6803      	ldr	r3, [r0, #0]
   10a62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10a66:	f043 0302 	orr.w	r3, r3, #2
   10a6a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   10a6c:	f382 8811 	msr	BASEPRI, r2
   10a70:	f3bf 8f6f 	isb	sy
}
   10a74:	4770      	bx	lr

00010a76 <stop>:
{
   10a76:	b570      	push	{r4, r5, r6, lr}
   10a78:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   10a7a:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   10a7c:	f04f 0420 	mov.w	r4, #32
   10a80:	f3ef 8511 	mrs	r5, BASEPRI
   10a84:	f384 8812 	msr	BASEPRI_MAX, r4
   10a88:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   10a8c:	260c      	movs	r6, #12
   10a8e:	fb06 3401 	mla	r4, r6, r1, r3
   10a92:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   10a94:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   10a98:	d008      	beq.n	10aac <stop+0x36>
   10a9a:	42a2      	cmp	r2, r4
   10a9c:	d006      	beq.n	10aac <stop+0x36>
	__asm__ volatile(
   10a9e:	f385 8811 	msr	BASEPRI, r5
   10aa2:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   10aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10aaa:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   10aac:	2201      	movs	r2, #1
   10aae:	fb06 3301 	mla	r3, r6, r1, r3
   10ab2:	641a      	str	r2, [r3, #64]	; 0x40
   10ab4:	f385 8811 	msr	BASEPRI, r5
   10ab8:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   10abc:	6843      	ldr	r3, [r0, #4]
   10abe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10ac2:	685b      	ldr	r3, [r3, #4]
   10ac4:	4798      	blx	r3
	return 0;
   10ac6:	2000      	movs	r0, #0
   10ac8:	e7ef      	b.n	10aaa <stop+0x34>

00010aca <api_stop>:
	return stop(dev, subsys, CTX_API);
   10aca:	2280      	movs	r2, #128	; 0x80
   10acc:	f7ff bfd3 	b.w	10a76 <stop>

00010ad0 <async_start>:
{
   10ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ad2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   10ad4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   10ad6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   10ad8:	f04f 0520 	mov.w	r5, #32
   10adc:	f3ef 8611 	mrs	r6, BASEPRI
   10ae0:	f385 8812 	msr	BASEPRI_MAX, r5
   10ae4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   10ae8:	250c      	movs	r5, #12
   10aea:	fb05 4401 	mla	r4, r5, r1, r4
   10aee:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   10af0:	f005 0c07 	and.w	ip, r5, #7
   10af4:	f1bc 0f01 	cmp.w	ip, #1
   10af8:	d10c      	bne.n	10b14 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   10afa:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   10afc:	f386 8811 	msr	BASEPRI, r6
   10b00:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   10b04:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   10b08:	6843      	ldr	r3, [r0, #4]
   10b0a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   10b0e:	4798      	blx	r3
	return 0;
   10b10:	2000      	movs	r0, #0
}
   10b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   10b14:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   10b18:	42af      	cmp	r7, r5
   10b1a:	f386 8811 	msr	BASEPRI, r6
   10b1e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   10b22:	bf0c      	ite	eq
   10b24:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   10b28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10b2c:	e7f1      	b.n	10b12 <async_start+0x42>

00010b2e <api_start>:
{
   10b2e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   10b30:	2480      	movs	r4, #128	; 0x80
   10b32:	9400      	str	r4, [sp, #0]
   10b34:	f7ff ffcc 	bl	10ad0 <async_start>
}
   10b38:	b002      	add	sp, #8
   10b3a:	bd10      	pop	{r4, pc}

00010b3c <onoff_started_callback>:
{
   10b3c:	b410      	push	{r4}
	notify(mgr, 0);
   10b3e:	241c      	movs	r4, #28
	return &data->mgr[type];
   10b40:	6900      	ldr	r0, [r0, #16]
   10b42:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   10b44:	fb03 0004 	mla	r0, r3, r4, r0
   10b48:	2100      	movs	r1, #0
}
   10b4a:	bc10      	pop	{r4}
	notify(mgr, 0);
   10b4c:	4710      	bx	r2

00010b4e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   10b4e:	2000      	movs	r0, #0
   10b50:	f7fc b936 	b.w	cdc0 <nrfx_clock_start>

00010b54 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   10b54:	2000      	movs	r0, #0
   10b56:	f000 bbf8 	b.w	1134a <nrfx_clock_stop>

00010b5a <blocking_start_callback>:
{
   10b5a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   10b5c:	f7fe b930 	b.w	edc0 <z_impl_k_sem_give>

00010b60 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b60:	6843      	ldr	r3, [r0, #4]
}
   10b62:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b64:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   10b66:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   10b68:	600b      	str	r3, [r1, #0]
}
   10b6a:	4770      	bx	lr

00010b6c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b6c:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   10b6e:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b72:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   10b74:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   10b78:	6098      	str	r0, [r3, #8]
}
   10b7a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   10b7c:	60d9      	str	r1, [r3, #12]
   10b7e:	4770      	bx	lr

00010b80 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b80:	6843      	ldr	r3, [r0, #4]
}
   10b82:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b84:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   10b86:	6099      	str	r1, [r3, #8]
}
   10b88:	4770      	bx	lr

00010b8a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b8a:	6843      	ldr	r3, [r0, #4]
}
   10b8c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b8e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   10b90:	60d9      	str	r1, [r3, #12]
}
   10b92:	4770      	bx	lr

00010b94 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b94:	6843      	ldr	r3, [r0, #4]
   10b96:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   10b98:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   10b9a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   10b9e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   10ba0:	6090      	str	r0, [r2, #8]
}
   10ba2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   10ba4:	60d3      	str	r3, [r2, #12]
   10ba6:	4770      	bx	lr

00010ba8 <gpio_nrfx_manage_callback>:
{
   10ba8:	b510      	push	{r4, lr}
	return port->data;
   10baa:	6903      	ldr	r3, [r0, #16]
	return list->head;
   10bac:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   10bae:	b1f8      	cbz	r0, 10bf0 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10bb0:	4288      	cmp	r0, r1
   10bb2:	d119      	bne.n	10be8 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   10bb4:	689c      	ldr	r4, [r3, #8]
	return node->next;
   10bb6:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   10bb8:	42a1      	cmp	r1, r4
	list->head = node;
   10bba:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   10bbc:	d100      	bne.n	10bc0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   10bbe:	6098      	str	r0, [r3, #8]
	parent->next = child;
   10bc0:	2000      	movs	r0, #0
   10bc2:	6008      	str	r0, [r1, #0]
	if (set) {
   10bc4:	b12a      	cbz	r2, 10bd2 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   10bc6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   10bc8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   10bca:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   10bcc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   10bce:	b902      	cbnz	r2, 10bd2 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   10bd0:	6099      	str	r1, [r3, #8]
	return 0;
   10bd2:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   10bd4:	e010      	b.n	10bf8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10bd6:	4281      	cmp	r1, r0
   10bd8:	d106      	bne.n	10be8 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   10bda:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   10bdc:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   10bde:	6898      	ldr	r0, [r3, #8]
   10be0:	4281      	cmp	r1, r0
   10be2:	d1ed      	bne.n	10bc0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   10be4:	609c      	str	r4, [r3, #8]
}
   10be6:	e7eb      	b.n	10bc0 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   10be8:	4604      	mov	r4, r0
   10bea:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10bec:	2800      	cmp	r0, #0
   10bee:	d1f2      	bne.n	10bd6 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   10bf0:	2a00      	cmp	r2, #0
   10bf2:	d1e8      	bne.n	10bc6 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   10bf4:	f06f 0015 	mvn.w	r0, #21
}
   10bf8:	bd10      	pop	{r4, pc}

00010bfa <uarte_nrfx_config_get>:
{
   10bfa:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   10bfc:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   10bfe:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   10c02:	e883 0003 	stmia.w	r3, {r0, r1}
}
   10c06:	2000      	movs	r0, #0
   10c08:	4770      	bx	lr

00010c0a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   10c0a:	6843      	ldr	r3, [r0, #4]
   10c0c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   10c0e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   10c12:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   10c16:	4770      	bx	lr

00010c18 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   10c18:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   10c1a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   10c1c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10c1e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   10c22:	b150      	cbz	r0, 10c3a <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10c24:	2000      	movs	r0, #0
	*c = *data->rx_data;
   10c26:	6952      	ldr	r2, [r2, #20]
   10c28:	7812      	ldrb	r2, [r2, #0]
   10c2a:	700a      	strb	r2, [r1, #0]
   10c2c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   10c30:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10c34:	2201      	movs	r2, #1
   10c36:	601a      	str	r2, [r3, #0]
	return 0;
   10c38:	4770      	bx	lr
		return -1;
   10c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10c3e:	4770      	bx	lr

00010c40 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   10c40:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   10c42:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10c44:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   10c48:	b940      	cbnz	r0, 10c5c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   10c4a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   10c4c:	079b      	lsls	r3, r3, #30
   10c4e:	d406      	bmi.n	10c5e <is_tx_ready.isra.0+0x1e>
   10c50:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   10c54:	3800      	subs	r0, #0
   10c56:	bf18      	it	ne
   10c58:	2001      	movne	r0, #1
   10c5a:	4770      	bx	lr
   10c5c:	2001      	movs	r0, #1
}
   10c5e:	4770      	bx	lr

00010c60 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   10c60:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   10c62:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   10c64:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   10c68:	05c9      	lsls	r1, r1, #23
   10c6a:	d518      	bpl.n	10c9e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10c6c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   10c70:	b1a9      	cbz	r1, 10c9e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   10c72:	f04f 0020 	mov.w	r0, #32
   10c76:	f3ef 8111 	mrs	r1, BASEPRI
   10c7a:	f380 8812 	msr	BASEPRI_MAX, r0
   10c7e:	f3bf 8f6f 	isb	sy
   10c82:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   10c86:	b130      	cbz	r0, 10c96 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10c88:	2000      	movs	r0, #0
   10c8a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   10c8e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10c92:	2001      	movs	r0, #1
   10c94:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   10c96:	f381 8811 	msr	BASEPRI, r1
   10c9a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   10c9e:	6852      	ldr	r2, [r2, #4]
   10ca0:	06d2      	lsls	r2, r2, #27
   10ca2:	d515      	bpl.n	10cd0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   10ca4:	f04f 0120 	mov.w	r1, #32
   10ca8:	f3ef 8211 	mrs	r2, BASEPRI
   10cac:	f381 8812 	msr	BASEPRI_MAX, r1
   10cb0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10cb4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   10cb8:	b111      	cbz	r1, 10cc0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   10cba:	2100      	movs	r1, #0
   10cbc:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   10cc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   10cc4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   10cc8:	f382 8811 	msr	BASEPRI, r2
   10ccc:	f3bf 8f6f 	isb	sy
}
   10cd0:	4770      	bx	lr

00010cd2 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   10cd2:	4608      	mov	r0, r1
   10cd4:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   10cd6:	4611      	mov	r1, r2
   10cd8:	f7fb ff7a 	bl	cbd0 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   10cdc:	2800      	cmp	r0, #0
	}

	return 0;
}
   10cde:	bf18      	it	ne
   10ce0:	f06f 0004 	mvnne.w	r0, #4
   10ce4:	bd08      	pop	{r3, pc}

00010ce6 <entropy_psa_crypto_rng_init>:
{
   10ce6:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   10ce8:	f000 fb2a 	bl	11340 <psa_crypto_init>
		return -EIO;
   10cec:	2800      	cmp	r0, #0
}
   10cee:	bf18      	it	ne
   10cf0:	f06f 0004 	mvnne.w	r0, #4
   10cf4:	bd08      	pop	{r3, pc}

00010cf6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   10cf6:	4770      	bx	lr

00010cf8 <event_clear>:
   10cf8:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   10cfa:	f100 0350 	add.w	r3, r0, #80	; 0x50
   10cfe:	009b      	lsls	r3, r3, #2
   10d00:	b29b      	uxth	r3, r3
   10d02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10d06:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   10d0a:	601a      	str	r2, [r3, #0]
   10d0c:	681b      	ldr	r3, [r3, #0]
}
   10d0e:	4770      	bx	lr

00010d10 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   10d10:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   10d12:	6843      	ldr	r3, [r0, #4]
   10d14:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   10d16:	7a05      	ldrb	r5, [r0, #8]
   10d18:	6844      	ldr	r4, [r0, #4]
   10d1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   10d1e:	42a3      	cmp	r3, r4
   10d20:	d302      	bcc.n	10d28 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   10d22:	f06f 0001 	mvn.w	r0, #1
}
   10d26:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   10d28:	795c      	ldrb	r4, [r3, #5]
   10d2a:	428c      	cmp	r4, r1
   10d2c:	d001      	beq.n	10d32 <pinctrl_lookup_state+0x22>
		(*state)++;
   10d2e:	3308      	adds	r3, #8
   10d30:	e7f0      	b.n	10d14 <pinctrl_lookup_state+0x4>
			return 0;
   10d32:	2000      	movs	r0, #0
   10d34:	e7f7      	b.n	10d26 <pinctrl_lookup_state+0x16>

00010d36 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   10d36:	f000 bf61 	b.w	11bfc <z_impl_k_busy_wait>

00010d3a <nrf_modem_os_errno_set>:
{
   10d3a:	b510      	push	{r4, lr}
   10d3c:	4604      	mov	r4, r0
	errno = err_code;
   10d3e:	f7ff fe7c 	bl	10a3a <__errno>
   10d42:	6004      	str	r4, [r0, #0]
}
   10d44:	bd10      	pop	{r4, pc}

00010d46 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   10d46:	f000 bd4f 	b.w	117e8 <k_is_in_isr>

00010d4a <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   10d4a:	f7fe b839 	b.w	edc0 <z_impl_k_sem_give>

00010d4e <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   10d4e:	1c4b      	adds	r3, r1, #1
{
   10d50:	b570      	push	{r4, r5, r6, lr}
   10d52:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   10d54:	d017      	beq.n	10d86 <nrf_modem_os_sem_take+0x38>
   10d56:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   10d5a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10d5e:	f240 30e7 	movw	r0, #999	; 0x3e7
   10d62:	2100      	movs	r1, #0
   10d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10d68:	2300      	movs	r3, #0
   10d6a:	fbc4 0106 	smlal	r0, r1, r4, r6
   10d6e:	f7f7 ffcb 	bl	8d08 <__aeabi_uldivmod>
   10d72:	4602      	mov	r2, r0
   10d74:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   10d76:	4628      	mov	r0, r5
   10d78:	f7fe f842 	bl	ee00 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   10d7c:	2800      	cmp	r0, #0
}
   10d7e:	bf18      	it	ne
   10d80:	f06f 000a 	mvnne.w	r0, #10
   10d84:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   10d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10d8a:	4613      	mov	r3, r2
   10d8c:	e7f3      	b.n	10d76 <nrf_modem_os_sem_take+0x28>

00010d8e <nrf_modem_fault_handler>:

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
}
   10d8e:	4770      	bx	lr

00010d90 <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   10d90:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   10d94:	b2db      	uxtb	r3, r3
   10d96:	2b08      	cmp	r3, #8
   10d98:	bf9d      	ittte	ls
   10d9a:	f240 1005 	movwls	r0, #261	; 0x105
   10d9e:	40d8      	lsrls	r0, r3
   10da0:	f000 0001 	andls.w	r0, r0, #1
{
   10da4:	2000      	movhi	r0, #0
}
   10da6:	4770      	bx	lr

00010da8 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   10da8:	280d      	cmp	r0, #13
   10daa:	d004      	beq.n	10db6 <is_lfcr+0xe>
   10dac:	f1a0 030a 	sub.w	r3, r0, #10
   10db0:	4258      	negs	r0, r3
   10db2:	4158      	adcs	r0, r3
   10db4:	4770      	bx	lr
		return true;
   10db6:	2001      	movs	r0, #1
}
   10db8:	4770      	bx	lr

00010dba <skip_command_prefix>:
{
   10dba:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   10dbc:	6801      	ldr	r1, [r0, #0]
{
   10dbe:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   10dc0:	1c8b      	adds	r3, r1, #2
   10dc2:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   10dc4:	788c      	ldrb	r4, [r1, #2]
   10dc6:	4620      	mov	r0, r4
   10dc8:	f7ff ffee 	bl	10da8 <is_lfcr>
   10dcc:	b910      	cbnz	r0, 10dd4 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   10dce:	b10c      	cbz	r4, 10dd4 <skip_command_prefix+0x1a>
	(*cmd)++;
   10dd0:	3103      	adds	r1, #3
   10dd2:	6011      	str	r1, [r2, #0]
}
   10dd4:	bd10      	pop	{r4, pc}

00010dd6 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   10dd6:	6813      	ldr	r3, [r2, #0]
   10dd8:	f7fa bfaa 	b.w	bd30 <at_parser_max_params_from_str>

00010ddc <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   10ddc:	6803      	ldr	r3, [r0, #0]
   10dde:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   10de0:	bf86      	itte	hi
   10de2:	6840      	ldrhi	r0, [r0, #4]
   10de4:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   10de8:	2000      	movls	r0, #0
}
   10dea:	4770      	bx	lr

00010dec <at_param_clear>:
{
   10dec:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   10dee:	7803      	ldrb	r3, [r0, #0]
{
   10df0:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   10df2:	3b02      	subs	r3, #2
   10df4:	2b01      	cmp	r3, #1
   10df6:	d802      	bhi.n	10dfe <at_param_clear+0x12>
		k_free(param->value.str_val);
   10df8:	6880      	ldr	r0, [r0, #8]
   10dfa:	f000 ff38 	bl	11c6e <k_free>
	param->value.int_val = 0;
   10dfe:	2200      	movs	r2, #0
   10e00:	2300      	movs	r3, #0
   10e02:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   10e06:	bd10      	pop	{r4, pc}

00010e08 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   10e08:	b538      	push	{r3, r4, r5, lr}
   10e0a:	460d      	mov	r5, r1
	if (list == NULL) {
   10e0c:	4604      	mov	r4, r0
   10e0e:	b140      	cbz	r0, 10e22 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   10e10:	2110      	movs	r1, #16
   10e12:	4628      	mov	r0, r5
   10e14:	f000 ff36 	bl	11c84 <k_calloc>
   10e18:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   10e1a:	b128      	cbz	r0, 10e28 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   10e1c:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   10e1e:	6025      	str	r5, [r4, #0]
}
   10e20:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10e22:	f06f 0015 	mvn.w	r0, #21
   10e26:	e7fb      	b.n	10e20 <at_params_list_init+0x18>
		return -ENOMEM;
   10e28:	f06f 000b 	mvn.w	r0, #11
   10e2c:	e7f8      	b.n	10e20 <at_params_list_init+0x18>

00010e2e <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   10e2e:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   10e30:	4604      	mov	r4, r0
   10e32:	b128      	cbz	r0, 10e40 <at_params_list_clear+0x12>
   10e34:	6843      	ldr	r3, [r0, #4]
   10e36:	b11b      	cbz	r3, 10e40 <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   10e38:	2500      	movs	r5, #0
   10e3a:	6823      	ldr	r3, [r4, #0]
   10e3c:	429d      	cmp	r5, r3
   10e3e:	d300      	bcc.n	10e42 <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   10e40:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   10e42:	6866      	ldr	r6, [r4, #4]
   10e44:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   10e48:	4630      	mov	r0, r6
   10e4a:	f7ff ffcf 	bl	10dec <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   10e4e:	2210      	movs	r2, #16
   10e50:	2100      	movs	r1, #0
   10e52:	4630      	mov	r0, r6
   10e54:	f000 ff4b 	bl	11cee <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   10e58:	3501      	adds	r5, #1
   10e5a:	e7ee      	b.n	10e3a <at_params_list_clear+0xc>

00010e5c <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   10e5c:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   10e5e:	4604      	mov	r4, r0
   10e60:	b148      	cbz	r0, 10e76 <at_params_list_free+0x1a>
   10e62:	6843      	ldr	r3, [r0, #4]
   10e64:	b13b      	cbz	r3, 10e76 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   10e66:	2500      	movs	r5, #0
	at_params_list_clear(list);
   10e68:	f7ff ffe1 	bl	10e2e <at_params_list_clear>
	k_free(list->params);
   10e6c:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   10e6e:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   10e70:	f000 fefd 	bl	11c6e <k_free>
	list->params = NULL;
   10e74:	6065      	str	r5, [r4, #4]
}
   10e76:	bd38      	pop	{r3, r4, r5, pc}

00010e78 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   10e78:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   10e7a:	b178      	cbz	r0, 10e9c <at_params_empty_put+0x24>
   10e7c:	6843      	ldr	r3, [r0, #4]
   10e7e:	b16b      	cbz	r3, 10e9c <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   10e80:	f7ff ffac 	bl	10ddc <at_params_get>

	if (param == NULL) {
   10e84:	4604      	mov	r4, r0
   10e86:	b148      	cbz	r0, 10e9c <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   10e88:	f7ff ffb0 	bl	10dec <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   10e8c:	2304      	movs	r3, #4
	param->value.int_val = 0;
   10e8e:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   10e90:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   10e92:	2300      	movs	r3, #0

	return 0;
   10e94:	2000      	movs	r0, #0
	param->value.int_val = 0;
   10e96:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   10e9a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   10e9c:	f06f 0015 	mvn.w	r0, #21
   10ea0:	e7fb      	b.n	10e9a <at_params_empty_put+0x22>

00010ea2 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   10ea2:	b570      	push	{r4, r5, r6, lr}
   10ea4:	4616      	mov	r6, r2
   10ea6:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   10ea8:	b168      	cbz	r0, 10ec6 <at_params_int_put+0x24>
   10eaa:	6843      	ldr	r3, [r0, #4]
   10eac:	b15b      	cbz	r3, 10ec6 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   10eae:	f7ff ff95 	bl	10ddc <at_params_get>

	if (param == NULL) {
   10eb2:	4604      	mov	r4, r0
   10eb4:	b138      	cbz	r0, 10ec6 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   10eb6:	f7ff ff99 	bl	10dec <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   10eba:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   10ebc:	2000      	movs	r0, #0
	param->value.int_val = value;
   10ebe:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   10ec2:	7023      	strb	r3, [r4, #0]
}
   10ec4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   10ec6:	f06f 0015 	mvn.w	r0, #21
   10eca:	e7fb      	b.n	10ec4 <at_params_int_put+0x22>

00010ecc <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   10ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ece:	4617      	mov	r7, r2
   10ed0:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   10ed2:	b1c0      	cbz	r0, 10f06 <at_params_string_put+0x3a>
   10ed4:	6843      	ldr	r3, [r0, #4]
   10ed6:	b1b3      	cbz	r3, 10f06 <at_params_string_put+0x3a>
   10ed8:	b1aa      	cbz	r2, 10f06 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   10eda:	f7ff ff7f 	bl	10ddc <at_params_get>

	if (param == NULL) {
   10ede:	4604      	mov	r4, r0
   10ee0:	b188      	cbz	r0, 10f06 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   10ee2:	1c68      	adds	r0, r5, #1
   10ee4:	f000 feca 	bl	11c7c <k_malloc>

	if (param_value == NULL) {
   10ee8:	4606      	mov	r6, r0
   10eea:	b178      	cbz	r0, 10f0c <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10eec:	462a      	mov	r2, r5
   10eee:	4639      	mov	r1, r7
   10ef0:	f000 fef0 	bl	11cd4 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   10ef4:	4620      	mov	r0, r4
   10ef6:	f7ff ff79 	bl	10dec <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   10efa:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   10efc:	2000      	movs	r0, #0
	param->size = str_len;
   10efe:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   10f00:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   10f02:	60a6      	str	r6, [r4, #8]
}
   10f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10f06:	f06f 0015 	mvn.w	r0, #21
   10f0a:	e7fb      	b.n	10f04 <at_params_string_put+0x38>
		return -ENOMEM;
   10f0c:	f06f 000b 	mvn.w	r0, #11
   10f10:	e7f8      	b.n	10f04 <at_params_string_put+0x38>

00010f12 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   10f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f14:	4617      	mov	r7, r2
   10f16:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   10f18:	b1c0      	cbz	r0, 10f4c <at_params_array_put+0x3a>
   10f1a:	6843      	ldr	r3, [r0, #4]
   10f1c:	b1b3      	cbz	r3, 10f4c <at_params_array_put+0x3a>
   10f1e:	b1aa      	cbz	r2, 10f4c <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   10f20:	f7ff ff5c 	bl	10ddc <at_params_get>

	if (param == NULL) {
   10f24:	4604      	mov	r4, r0
   10f26:	b188      	cbz	r0, 10f4c <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   10f28:	4628      	mov	r0, r5
   10f2a:	f000 fea7 	bl	11c7c <k_malloc>

	if (param_value == NULL) {
   10f2e:	4606      	mov	r6, r0
   10f30:	b178      	cbz	r0, 10f52 <at_params_array_put+0x40>
   10f32:	462a      	mov	r2, r5
   10f34:	4639      	mov	r1, r7
   10f36:	f000 fecd 	bl	11cd4 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   10f3a:	4620      	mov	r0, r4
   10f3c:	f7ff ff56 	bl	10dec <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   10f40:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   10f42:	2000      	movs	r0, #0
	param->size = array_len;
   10f44:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   10f46:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   10f48:	60a6      	str	r6, [r4, #8]
}
   10f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10f4c:	f06f 0015 	mvn.w	r0, #21
   10f50:	e7fb      	b.n	10f4a <at_params_array_put+0x38>
		return -ENOMEM;
   10f52:	f06f 000b 	mvn.w	r0, #11
   10f56:	e7f8      	b.n	10f4a <at_params_array_put+0x38>

00010f58 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   10f58:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   10f5a:	b1b0      	cbz	r0, 10f8a <at_params_short_get+0x32>
   10f5c:	6843      	ldr	r3, [r0, #4]
   10f5e:	b1a3      	cbz	r3, 10f8a <at_params_short_get+0x32>
   10f60:	b19a      	cbz	r2, 10f8a <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   10f62:	f7ff ff3b 	bl	10ddc <at_params_get>

	if (param == NULL) {
   10f66:	b180      	cbz	r0, 10f8a <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   10f68:	7803      	ldrb	r3, [r0, #0]
   10f6a:	2b01      	cmp	r3, #1
   10f6c:	d10d      	bne.n	10f8a <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   10f6e:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   10f72:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   10f76:	f141 0100 	adc.w	r1, r1, #0
   10f7a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   10f7e:	f171 0100 	sbcs.w	r1, r1, #0
   10f82:	d202      	bcs.n	10f8a <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   10f84:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   10f86:	8013      	strh	r3, [r2, #0]
}
   10f88:	bd08      	pop	{r3, pc}
		return -EINVAL;
   10f8a:	f06f 0015 	mvn.w	r0, #21
   10f8e:	e7fb      	b.n	10f88 <at_params_short_get+0x30>

00010f90 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   10f90:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   10f92:	b190      	cbz	r0, 10fba <at_params_unsigned_short_get+0x2a>
   10f94:	6843      	ldr	r3, [r0, #4]
   10f96:	b183      	cbz	r3, 10fba <at_params_unsigned_short_get+0x2a>
   10f98:	b17a      	cbz	r2, 10fba <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   10f9a:	f7ff ff1f 	bl	10ddc <at_params_get>

	if (param == NULL) {
   10f9e:	b160      	cbz	r0, 10fba <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   10fa0:	7803      	ldrb	r3, [r0, #0]
   10fa2:	2b01      	cmp	r3, #1
   10fa4:	d109      	bne.n	10fba <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   10fa6:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   10faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10fae:	f171 0100 	sbcs.w	r1, r1, #0
   10fb2:	d202      	bcs.n	10fba <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   10fb4:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   10fb6:	8013      	strh	r3, [r2, #0]
}
   10fb8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   10fba:	f06f 0015 	mvn.w	r0, #21
   10fbe:	e7fb      	b.n	10fb8 <at_params_unsigned_short_get+0x28>

00010fc0 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   10fc0:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   10fc2:	b190      	cbz	r0, 10fea <at_params_int_get+0x2a>
   10fc4:	6843      	ldr	r3, [r0, #4]
   10fc6:	b183      	cbz	r3, 10fea <at_params_int_get+0x2a>
   10fc8:	b17a      	cbz	r2, 10fea <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   10fca:	f7ff ff07 	bl	10ddc <at_params_get>

	if (param == NULL) {
   10fce:	b160      	cbz	r0, 10fea <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   10fd0:	7803      	ldrb	r3, [r0, #0]
   10fd2:	2b01      	cmp	r3, #1
   10fd4:	d109      	bne.n	10fea <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   10fd6:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   10fda:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   10fde:	f141 0100 	adc.w	r1, r1, #0
   10fe2:	b911      	cbnz	r1, 10fea <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   10fe4:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   10fe6:	6013      	str	r3, [r2, #0]
}
   10fe8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   10fea:	f06f 0015 	mvn.w	r0, #21
   10fee:	e7fb      	b.n	10fe8 <at_params_int_get+0x28>

00010ff0 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   10ff0:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   10ff2:	b170      	cbz	r0, 11012 <at_params_int64_get+0x22>
   10ff4:	6843      	ldr	r3, [r0, #4]
   10ff6:	b163      	cbz	r3, 11012 <at_params_int64_get+0x22>
   10ff8:	b15a      	cbz	r2, 11012 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   10ffa:	f7ff feef 	bl	10ddc <at_params_get>

	if (param == NULL) {
   10ffe:	b140      	cbz	r0, 11012 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   11000:	7803      	ldrb	r3, [r0, #0]
   11002:	2b01      	cmp	r3, #1
   11004:	d105      	bne.n	11012 <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   11006:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1100a:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   1100e:	2000      	movs	r0, #0
}
   11010:	bd08      	pop	{r3, pc}
		return -EINVAL;
   11012:	f06f 0015 	mvn.w	r0, #21
   11016:	e7fb      	b.n	11010 <at_params_int64_get+0x20>

00011018 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   11018:	b570      	push	{r4, r5, r6, lr}
   1101a:	4615      	mov	r5, r2
   1101c:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   1101e:	b1a8      	cbz	r0, 1104c <at_params_string_get+0x34>
   11020:	6843      	ldr	r3, [r0, #4]
   11022:	b19b      	cbz	r3, 1104c <at_params_string_get+0x34>
   11024:	b192      	cbz	r2, 1104c <at_params_string_get+0x34>
   11026:	b18c      	cbz	r4, 1104c <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   11028:	f7ff fed8 	bl	10ddc <at_params_get>

	if (param == NULL) {
   1102c:	b170      	cbz	r0, 1104c <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1102e:	7803      	ldrb	r3, [r0, #0]
   11030:	2b02      	cmp	r3, #2
   11032:	d10b      	bne.n	1104c <at_params_string_get+0x34>
		return param->size;
   11034:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   11036:	6823      	ldr	r3, [r4, #0]
   11038:	42b3      	cmp	r3, r6
   1103a:	d30a      	bcc.n	11052 <at_params_string_get+0x3a>
   1103c:	6881      	ldr	r1, [r0, #8]
   1103e:	4632      	mov	r2, r6
   11040:	4628      	mov	r0, r5
   11042:	f000 fe47 	bl	11cd4 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   11046:	2000      	movs	r0, #0
	*len = param_len;
   11048:	6026      	str	r6, [r4, #0]
}
   1104a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1104c:	f06f 0015 	mvn.w	r0, #21
   11050:	e7fb      	b.n	1104a <at_params_string_get+0x32>
		return -ENOMEM;
   11052:	f06f 000b 	mvn.w	r0, #11
   11056:	e7f8      	b.n	1104a <at_params_string_get+0x32>

00011058 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   11058:	4602      	mov	r2, r0
{
   1105a:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   1105c:	b170      	cbz	r0, 1107c <at_params_valid_count_get+0x24>
   1105e:	6840      	ldr	r0, [r0, #4]
   11060:	b160      	cbz	r0, 1107c <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   11062:	6811      	ldr	r1, [r2, #0]
   11064:	b119      	cbz	r1, 1106e <at_params_valid_count_get+0x16>
   11066:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   11068:	b108      	cbz	r0, 1106e <at_params_valid_count_get+0x16>
   1106a:	7803      	ldrb	r3, [r0, #0]
   1106c:	b90b      	cbnz	r3, 11072 <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   1106e:	4608      	mov	r0, r1
   11070:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   11072:	4610      	mov	r0, r2
		valid_i += 1;
   11074:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   11076:	f7ff feb1 	bl	10ddc <at_params_get>
   1107a:	e7f5      	b.n	11068 <at_params_valid_count_get+0x10>
		return -EINVAL;
   1107c:	f06f 0115 	mvn.w	r1, #21
   11080:	e7f5      	b.n	1106e <at_params_valid_count_get+0x16>

00011082 <at_handler_cscon>:
{
   11082:	b510      	push	{r4, lr}
   11084:	4604      	mov	r4, r0
   11086:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   11088:	2248      	movs	r2, #72	; 0x48
   1108a:	2100      	movs	r1, #0
   1108c:	4668      	mov	r0, sp
   1108e:	f000 fe2e 	bl	11cee <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   11092:	2201      	movs	r2, #1
   11094:	4620      	mov	r0, r4
   11096:	a902      	add	r1, sp, #8
   11098:	f000 f8cf 	bl	1123a <parse_rrc_mode>
	if (err) {
   1109c:	b928      	cbnz	r0, 110aa <at_handler_cscon+0x28>
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1109e:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   110a0:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   110a2:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   110a6:	f7fb f8d5 	bl	c254 <event_handler_list_dispatch>
}
   110aa:	b012      	add	sp, #72	; 0x48
   110ac:	bd10      	pop	{r4, pc}

000110ae <at_handler_cedrxp>:
{
   110ae:	b510      	push	{r4, lr}
   110b0:	4604      	mov	r4, r0
   110b2:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   110b4:	2100      	movs	r1, #0
   110b6:	2248      	movs	r2, #72	; 0x48
   110b8:	4668      	mov	r0, sp
   110ba:	f000 fe18 	bl	11cee <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   110be:	4620      	mov	r0, r4
   110c0:	a902      	add	r1, sp, #8
   110c2:	f7f7 ff9d 	bl	9000 <parse_edrx>
	if (err) {
   110c6:	b928      	cbnz	r0, 110d4 <at_handler_cedrxp+0x26>
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   110c8:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   110ca:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   110cc:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   110d0:	f7fb f8c0 	bl	c254 <event_handler_list_dispatch>
}
   110d4:	b012      	add	sp, #72	; 0x48
   110d6:	bd10      	pop	{r4, pc}

000110d8 <at_handler_xt3412>:
{
   110d8:	b510      	push	{r4, lr}
   110da:	4604      	mov	r4, r0
   110dc:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   110de:	2100      	movs	r1, #0
   110e0:	2248      	movs	r2, #72	; 0x48
   110e2:	4668      	mov	r0, sp
   110e4:	f000 fe03 	bl	11cee <memset>
	err = parse_xt3412(response, &evt.time);
   110e8:	4620      	mov	r0, r4
   110ea:	a902      	add	r1, sp, #8
   110ec:	f7fb f9f8 	bl	c4e0 <parse_xt3412>
	if (err) {
   110f0:	b960      	cbnz	r0, 1110c <at_handler_xt3412+0x34>
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   110f2:	9b02      	ldr	r3, [sp, #8]
   110f4:	9a03      	ldr	r2, [sp, #12]
   110f6:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   110fa:	3b08      	subs	r3, #8
   110fc:	4313      	orrs	r3, r2
   110fe:	d105      	bne.n	1110c <at_handler_xt3412+0x34>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   11100:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   11102:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   11104:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   11108:	f7fb f8a4 	bl	c254 <event_handler_list_dispatch>
}
   1110c:	b012      	add	sp, #72	; 0x48
   1110e:	bd10      	pop	{r4, pc}

00011110 <at_handler_xmodemsleep>:
{
   11110:	b510      	push	{r4, lr}
   11112:	4604      	mov	r4, r0
   11114:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   11116:	2100      	movs	r1, #0
   11118:	2248      	movs	r2, #72	; 0x48
   1111a:	4668      	mov	r0, sp
   1111c:	f000 fde7 	bl	11cee <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   11120:	4620      	mov	r0, r4
   11122:	a902      	add	r1, sp, #8
   11124:	f000 f8c7 	bl	112b6 <parse_xmodemsleep>
	if (err) {
   11128:	b9a8      	cbnz	r0, 11156 <at_handler_xmodemsleep+0x46>
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1112a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1112e:	1e5a      	subs	r2, r3, #1
   11130:	2a01      	cmp	r2, #1
   11132:	d901      	bls.n	11138 <at_handler_xmodemsleep+0x28>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   11134:	2b04      	cmp	r3, #4
   11136:	d10e      	bne.n	11156 <at_handler_xmodemsleep+0x46>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   11138:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   1113c:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   11140:	3b08      	subs	r3, #8
   11142:	430b      	orrs	r3, r1
   11144:	d009      	beq.n	1115a <at_handler_xmodemsleep+0x4a>
	} else if (evt.modem_sleep.time == 0) {
   11146:	430a      	orrs	r2, r1
   11148:	d009      	beq.n	1115e <at_handler_xmodemsleep+0x4e>
   1114a:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   1114c:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1114e:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   11152:	f7fb f87f 	bl	c254 <event_handler_list_dispatch>
}
   11156:	b012      	add	sp, #72	; 0x48
   11158:	bd10      	pop	{r4, pc}
   1115a:	2308      	movs	r3, #8
   1115c:	e7f6      	b.n	1114c <at_handler_xmodemsleep+0x3c>
   1115e:	2309      	movs	r3, #9
   11160:	e7f4      	b.n	1114c <at_handler_xmodemsleep+0x3c>

00011162 <at_handler_mdmev>:
{
   11162:	b510      	push	{r4, lr}
   11164:	4604      	mov	r4, r0
   11166:	b092      	sub	sp, #72	; 0x48
	struct lte_lc_evt evt = {0};
   11168:	2100      	movs	r1, #0
   1116a:	2248      	movs	r2, #72	; 0x48
   1116c:	4668      	mov	r0, sp
   1116e:	f000 fdbe 	bl	11cee <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   11172:	4620      	mov	r0, r4
   11174:	a902      	add	r1, sp, #8
   11176:	f7fb fcb7 	bl	cae8 <parse_mdmev>
	if (err) {
   1117a:	b928      	cbnz	r0, 11188 <at_handler_mdmev+0x26>
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1117c:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1117e:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   11180:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   11184:	f7fb f866 	bl	c254 <event_handler_list_dispatch>
}
   11188:	b012      	add	sp, #72	; 0x48
   1118a:	bd10      	pop	{r4, pc}

0001118c <response_is_valid>:
{
   1118c:	b570      	push	{r4, r5, r6, lr}
   1118e:	460e      	mov	r6, r1
   11190:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   11192:	4605      	mov	r5, r0
   11194:	b908      	cbnz	r0, 1119a <response_is_valid+0xe>
		return false;
   11196:	2000      	movs	r0, #0
}
   11198:	bd70      	pop	{r4, r5, r6, pc}
	if ((response == NULL) || (check == NULL)) {
   1119a:	2a00      	cmp	r2, #0
   1119c:	d0fb      	beq.n	11196 <response_is_valid+0xa>
	if ((response_len < strlen(check)) ||
   1119e:	4610      	mov	r0, r2
   111a0:	f7f7 ff24 	bl	8fec <strlen>
   111a4:	4286      	cmp	r6, r0
   111a6:	d3f6      	bcc.n	11196 <response_is_valid+0xa>
	    (memcmp(response, check, response_len) != 0)) {
   111a8:	4632      	mov	r2, r6
   111aa:	4621      	mov	r1, r4
   111ac:	4628      	mov	r0, r5
   111ae:	f000 fd81 	bl	11cb4 <memcmp>
	if ((response_len < strlen(check)) ||
   111b2:	fab0 f080 	clz	r0, r0
   111b6:	0940      	lsrs	r0, r0, #5
   111b8:	e7ee      	b.n	11198 <response_is_valid+0xc>

000111ba <string_to_int>:
{
   111ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   111bc:	460c      	mov	r4, r1
   111be:	4605      	mov	r5, r0
   111c0:	4616      	mov	r6, r2
	errno = 0;
   111c2:	f7ff fc3a 	bl	10a3a <__errno>
   111c6:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   111c8:	4622      	mov	r2, r4
	errno = 0;
   111ca:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   111cc:	a901      	add	r1, sp, #4
   111ce:	4628      	mov	r0, r5
   111d0:	f7fe fda0 	bl	fd14 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   111d4:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   111d6:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   111d8:	42ab      	cmp	r3, r5
   111da:	d103      	bne.n	111e4 <string_to_int+0x2a>
		return -ENODATA;
   111dc:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   111e0:	b002      	add	sp, #8
   111e2:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   111e4:	781b      	ldrb	r3, [r3, #0]
   111e6:	2b00      	cmp	r3, #0
   111e8:	d1f8      	bne.n	111dc <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   111ea:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   111ee:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   111f0:	3303      	adds	r3, #3
   111f2:	d802      	bhi.n	111fa <string_to_int+0x40>
	return 0;
   111f4:	2000      	movs	r0, #0
	*output = temp;
   111f6:	6034      	str	r4, [r6, #0]
	return 0;
   111f8:	e7f2      	b.n	111e0 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   111fa:	f7ff fc1e 	bl	10a3a <__errno>
   111fe:	6803      	ldr	r3, [r0, #0]
   11200:	2b22      	cmp	r3, #34	; 0x22
   11202:	d1f7      	bne.n	111f4 <string_to_int+0x3a>
   11204:	e7ea      	b.n	111dc <string_to_int+0x22>

00011206 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   11206:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   11208:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   1120a:	b087      	sub	sp, #28
   1120c:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   1120e:	ab01      	add	r3, sp, #4
   11210:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   11212:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   11214:	f7ff ff00 	bl	11018 <at_params_string_get>
	if (err) {
   11218:	b968      	cbnz	r0, 11236 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   1121a:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   1121c:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   1121e:	3318      	adds	r3, #24
   11220:	446b      	add	r3, sp
   11222:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   11226:	4629      	mov	r1, r5
   11228:	a802      	add	r0, sp, #8
   1122a:	f7ff ffc6 	bl	111ba <string_to_int>
		return -ENODATA;
   1122e:	2800      	cmp	r0, #0
   11230:	bf18      	it	ne
   11232:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   11236:	b007      	add	sp, #28
   11238:	bd30      	pop	{r4, r5, pc}

0001123a <parse_rrc_mode>:
	struct at_param_list resp_list = {0};
   1123a:	2300      	movs	r3, #0
{
   1123c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1123e:	b085      	sub	sp, #20
   11240:	4607      	mov	r7, r0
   11242:	460d      	mov	r5, r1
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   11244:	a802      	add	r0, sp, #8
   11246:	2104      	movs	r1, #4
{
   11248:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   1124a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1124e:	f7ff fddb 	bl	10e08 <at_params_list_init>
	if (err) {
   11252:	4604      	mov	r4, r0
   11254:	b9a8      	cbnz	r0, 11282 <parse_rrc_mode+0x48>
	err = at_parser_params_from_str(at_response,
   11256:	4601      	mov	r1, r0
   11258:	aa02      	add	r2, sp, #8
   1125a:	4638      	mov	r0, r7
   1125c:	f7ff fdbb 	bl	10dd6 <at_parser_params_from_str>
	if (err) {
   11260:	4604      	mov	r4, r0
   11262:	b958      	cbnz	r0, 1127c <parse_rrc_mode+0x42>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   11264:	4631      	mov	r1, r6
   11266:	aa01      	add	r2, sp, #4
   11268:	a802      	add	r0, sp, #8
   1126a:	f7ff fea9 	bl	10fc0 <at_params_int_get>
	if (err) {
   1126e:	4604      	mov	r4, r0
   11270:	b920      	cbnz	r0, 1127c <parse_rrc_mode+0x42>
	if (temp_mode == 0) {
   11272:	9b01      	ldr	r3, [sp, #4]
   11274:	b143      	cbz	r3, 11288 <parse_rrc_mode+0x4e>
	} else if (temp_mode == 1) {
   11276:	2b01      	cmp	r3, #1
   11278:	d108      	bne.n	1128c <parse_rrc_mode+0x52>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1127a:	702b      	strb	r3, [r5, #0]
	at_params_list_free(&resp_list);
   1127c:	a802      	add	r0, sp, #8
   1127e:	f7ff fded 	bl	10e5c <at_params_list_free>
}
   11282:	4620      	mov	r0, r4
   11284:	b005      	add	sp, #20
   11286:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11288:	4603      	mov	r3, r0
   1128a:	e7f6      	b.n	1127a <parse_rrc_mode+0x40>
		err = -EINVAL;
   1128c:	f06f 0415 	mvn.w	r4, #21
   11290:	e7f4      	b.n	1127c <parse_rrc_mode+0x42>

00011292 <neighborcell_count_get>:
	if (at_response == NULL) {
   11292:	b178      	cbz	r0, 112b4 <neighborcell_count_get+0x22>
	uint32_t count = 0;
   11294:	2300      	movs	r3, #0
   11296:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   11298:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   1129c:	282c      	cmp	r0, #44	; 0x2c
   1129e:	d101      	bne.n	112a4 <neighborcell_count_get+0x12>
			count++;
   112a0:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   112a2:	e7f9      	b.n	11298 <neighborcell_count_get+0x6>
   112a4:	2800      	cmp	r0, #0
   112a6:	d1f7      	bne.n	11298 <neighborcell_count_get+0x6>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   112a8:	2b0a      	cmp	r3, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   112aa:	bf82      	ittt	hi
   112ac:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   112ae:	3b09      	subhi	r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   112b0:	fbb3 f0f0 	udivhi	r0, r3, r0
}
   112b4:	4770      	bx	lr

000112b6 <parse_xmodemsleep>:
{
   112b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct at_param_list resp_list = {0};
   112b8:	2300      	movs	r3, #0
{
   112ba:	4606      	mov	r6, r0
	if (modem_sleep == NULL || at_response == NULL) {
   112bc:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   112be:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   112c2:	b389      	cbz	r1, 11328 <parse_xmodemsleep+0x72>
   112c4:	b380      	cbz	r0, 11328 <parse_xmodemsleep+0x72>
	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   112c6:	2104      	movs	r1, #4
   112c8:	a802      	add	r0, sp, #8
   112ca:	f7ff fd9d 	bl	10e08 <at_params_list_init>
	if (err) {
   112ce:	4604      	mov	r4, r0
   112d0:	b9f8      	cbnz	r0, 11312 <parse_xmodemsleep+0x5c>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   112d2:	4601      	mov	r1, r0
   112d4:	aa02      	add	r2, sp, #8
   112d6:	4630      	mov	r0, r6
   112d8:	f7ff fd7d 	bl	10dd6 <at_parser_params_from_str>
	if (err) {
   112dc:	4604      	mov	r4, r0
   112de:	b9a8      	cbnz	r0, 1130c <parse_xmodemsleep+0x56>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   112e0:	2101      	movs	r1, #1
   112e2:	f10d 0206 	add.w	r2, sp, #6
   112e6:	a802      	add	r0, sp, #8
   112e8:	f7ff fe52 	bl	10f90 <at_params_unsigned_short_get>
	if (err) {
   112ec:	4604      	mov	r4, r0
   112ee:	b968      	cbnz	r0, 1130c <parse_xmodemsleep+0x56>
	modem_sleep->type = type;
   112f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   112f4:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   112f6:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   112f8:	f7ff feae 	bl	11058 <at_params_valid_count_get>
   112fc:	2802      	cmp	r0, #2
   112fe:	d80b      	bhi.n	11318 <parse_xmodemsleep+0x62>
		modem_sleep->time = -1;
   11300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11308:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   1130c:	a802      	add	r0, sp, #8
   1130e:	f7ff fda5 	bl	10e5c <at_params_list_free>
}
   11312:	4620      	mov	r0, r4
   11314:	b004      	add	sp, #16
   11316:	bd70      	pop	{r4, r5, r6, pc}
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   11318:	2102      	movs	r1, #2
   1131a:	f105 0208 	add.w	r2, r5, #8
   1131e:	a802      	add	r0, sp, #8
   11320:	f7ff fe66 	bl	10ff0 <at_params_int64_get>
   11324:	4604      	mov	r4, r0
clean_exit:
   11326:	e7f1      	b.n	1130c <parse_xmodemsleep+0x56>
		return -EINVAL;
   11328:	f06f 0415 	mvn.w	r4, #21
   1132c:	e7f1      	b.n	11312 <parse_xmodemsleep+0x5c>

0001132e <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   1132e:	4770      	bx	lr

00011330 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   11330:	f7fa bf72 	b.w	c218 <lte_lc_deinit>

00011334 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   11334:	2000      	movs	r0, #0
{
   11336:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
   11338:	f7f8 ffe4 	bl	a304 <sys_arch_reboot>

0001133c <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   1133c:	2000      	movs	r0, #0
   1133e:	4770      	bx	lr

00011340 <psa_crypto_init>:
}
   11340:	2000      	movs	r0, #0
   11342:	4770      	bx	lr

00011344 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   11344:	4700      	bx	r0

00011346 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   11346:	f000 bc59 	b.w	11bfc <z_impl_k_busy_wait>

0001134a <nrfx_clock_stop>:
    clock_stop(domain);
   1134a:	f7fb bcbf 	b.w	cccc <clock_stop>

0001134e <rpc_handle_ctrl_message>:
   1134e:	2902      	cmp	r1, #2
   11350:	b510      	push	{r4, lr}
   11352:	4604      	mov	r4, r0
   11354:	d005      	beq.n	11362 <rpc_handle_ctrl_message+0x14>
   11356:	2904      	cmp	r1, #4
   11358:	d001      	beq.n	1135e <rpc_handle_ctrl_message+0x10>
   1135a:	2901      	cmp	r1, #1
   1135c:	d107      	bne.n	1136e <rpc_handle_ctrl_message+0x20>
   1135e:	2000      	movs	r0, #0
   11360:	bd10      	pop	{r4, pc}
   11362:	6880      	ldr	r0, [r0, #8]
   11364:	2800      	cmp	r0, #0
   11366:	d0fa      	beq.n	1135e <rpc_handle_ctrl_message+0x10>
   11368:	f7fa fa20 	bl	b7ac <nrf_modem_os_shm_tx_free>
   1136c:	e7f7      	b.n	1135e <rpc_handle_ctrl_message+0x10>
   1136e:	6880      	ldr	r0, [r0, #8]
   11370:	b108      	cbz	r0, 11376 <rpc_handle_ctrl_message+0x28>
   11372:	f7fa fa1b 	bl	b7ac <nrf_modem_os_shm_tx_free>
   11376:	4620      	mov	r0, r4
   11378:	f7fc f9a6 	bl	d6c8 <rpc_transport_msg_rx_free>
   1137c:	e7ef      	b.n	1135e <rpc_handle_ctrl_message+0x10>

0001137e <rpc_init>:
   1137e:	f7fc b997 	b.w	d6b0 <rpc_transport_init>

00011382 <rpc_list_preambles_init>:
   11382:	2200      	movs	r2, #0
   11384:	b510      	push	{r4, lr}
   11386:	6804      	ldr	r4, [r0, #0]
   11388:	4294      	cmp	r4, r2
   1138a:	d100      	bne.n	1138e <rpc_list_preambles_init+0xc>
   1138c:	bd10      	pop	{r4, pc}
   1138e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   11392:	684b      	ldr	r3, [r1, #4]
   11394:	3201      	adds	r2, #1
   11396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1139a:	f043 0303 	orr.w	r3, r3, #3
   1139e:	604b      	str	r3, [r1, #4]
   113a0:	e7f2      	b.n	11388 <rpc_list_preambles_init+0x6>

000113a2 <rpc_transport_ipc_data_rx_resume>:
   113a2:	2004      	movs	r0, #4
   113a4:	f7fc b92a 	b.w	d5fc <nrfx_ipc_receive_event_enable>

000113a8 <rpc_transport_ipc_data_rx_suspend>:
   113a8:	2004      	movs	r0, #4
   113aa:	f7fc b92f 	b.w	d60c <nrfx_ipc_receive_event_disable>

000113ae <rpc_transport_ipc_shutdown>:
   113ae:	f7fc b8f7 	b.w	d5a0 <nrfx_ipc_uninit>

000113b2 <rpc_transport_ipc_msg_alloc>:
   113b2:	b538      	push	{r3, r4, r5, lr}
   113b4:	2300      	movs	r3, #0
   113b6:	1d02      	adds	r2, r0, #4
   113b8:	6804      	ldr	r4, [r0, #0]
   113ba:	429c      	cmp	r4, r3
   113bc:	d801      	bhi.n	113c2 <rpc_transport_ipc_msg_alloc+0x10>
   113be:	2300      	movs	r3, #0
   113c0:	e016      	b.n	113f0 <rpc_transport_ipc_msg_alloc+0x3e>
   113c2:	f04f 0400 	mov.w	r4, #0
   113c6:	e8d2 5fcf 	ldaexb	r5, [r2]
   113ca:	2d03      	cmp	r5, #3
   113cc:	d104      	bne.n	113d8 <rpc_transport_ipc_msg_alloc+0x26>
   113ce:	e8c2 4fcc 	stlexb	ip, r4, [r2]
   113d2:	f1bc 0f00 	cmp.w	ip, #0
   113d6:	d1f6      	bne.n	113c6 <rpc_transport_ipc_msg_alloc+0x14>
   113d8:	d002      	beq.n	113e0 <rpc_transport_ipc_msg_alloc+0x2e>
   113da:	3208      	adds	r2, #8
   113dc:	3301      	adds	r3, #1
   113de:	e7eb      	b.n	113b8 <rpc_transport_ipc_msg_alloc+0x6>
   113e0:	eb01 1383 	add.w	r3, r1, r3, lsl #6
   113e4:	4618      	mov	r0, r3
   113e6:	2240      	movs	r2, #64	; 0x40
   113e8:	2100      	movs	r1, #0
   113ea:	f000 fc80 	bl	11cee <memset>
   113ee:	4603      	mov	r3, r0
   113f0:	4618      	mov	r0, r3
   113f2:	bd38      	pop	{r3, r4, r5, pc}

000113f4 <rpc_client_msg_from_rpc_msg_get>:
   113f4:	3008      	adds	r0, #8
   113f6:	4770      	bx	lr

000113f8 <rpc_client_msg_alloc>:
   113f8:	b538      	push	{r3, r4, r5, lr}
   113fa:	4605      	mov	r5, r0
   113fc:	b920      	cbnz	r0, 11408 <rpc_client_msg_alloc+0x10>
   113fe:	f7fc f95d 	bl	d6bc <rpc_transport_msg_alloc>
   11402:	b980      	cbnz	r0, 11426 <rpc_client_msg_alloc+0x2e>
   11404:	2000      	movs	r0, #0
   11406:	bd38      	pop	{r3, r4, r5, pc}
   11408:	f7fa f9c8 	bl	b79c <nrf_modem_os_shm_tx_alloc>
   1140c:	4604      	mov	r4, r0
   1140e:	2800      	cmp	r0, #0
   11410:	d0f8      	beq.n	11404 <rpc_client_msg_alloc+0xc>
   11412:	f7fc f953 	bl	d6bc <rpc_transport_msg_alloc>
   11416:	b938      	cbnz	r0, 11428 <rpc_client_msg_alloc+0x30>
   11418:	4620      	mov	r0, r4
   1141a:	f7fa f9c7 	bl	b7ac <nrf_modem_os_shm_tx_free>
   1141e:	2001      	movs	r0, #1
   11420:	f7fa f992 	bl	b748 <nrf_modem_os_event_notify>
   11424:	e7ee      	b.n	11404 <rpc_client_msg_alloc+0xc>
   11426:	462c      	mov	r4, r5
   11428:	60c5      	str	r5, [r0, #12]
   1142a:	f840 4f08 	str.w	r4, [r0, #8]!
   1142e:	e7ea      	b.n	11406 <rpc_client_msg_alloc+0xe>

00011430 <rpc_client_msg_send>:
   11430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   11434:	4610      	mov	r0, r2
   11436:	f840 1d08 	str.w	r1, [r0, #-8]!
   1143a:	f7fc b951 	b.w	d6e0 <rpc_transport_msg_send>

0001143e <rpc_client_msg_rx_free>:
   1143e:	3808      	subs	r0, #8
   11440:	f7fc b942 	b.w	d6c8 <rpc_transport_msg_rx_free>

00011444 <rpc_client_msg_data_rx_free>:
   11444:	f7fc b946 	b.w	d6d4 <rpc_transport_msg_data_rx_free>

00011448 <rpc_client_msg_data_tx_alloc>:
   11448:	f7fa b9a8 	b.w	b79c <nrf_modem_os_shm_tx_alloc>

0001144c <rpc_client_msg_data_tx_free>:
   1144c:	b508      	push	{r3, lr}
   1144e:	f7fa f9ad 	bl	b7ac <nrf_modem_os_shm_tx_free>
   11452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11456:	2001      	movs	r0, #1
   11458:	f7fa b976 	b.w	b748 <nrf_modem_os_event_notify>

0001145c <sockaddr_init>:
   1145c:	2904      	cmp	r1, #4
   1145e:	b570      	push	{r4, r5, r6, lr}
   11460:	4605      	mov	r5, r0
   11462:	4616      	mov	r6, r2
   11464:	d003      	beq.n	1146e <sockaddr_init+0x12>
   11466:	2910      	cmp	r1, #16
   11468:	d015      	beq.n	11496 <sockaddr_init+0x3a>
   1146a:	2400      	movs	r4, #0
   1146c:	e011      	b.n	11492 <sockaddr_init+0x36>
   1146e:	2010      	movs	r0, #16
   11470:	f7fa f986 	bl	b780 <nrf_modem_os_alloc>
   11474:	4604      	mov	r4, r0
   11476:	2800      	cmp	r0, #0
   11478:	d0f7      	beq.n	1146a <sockaddr_init+0xe>
   1147a:	220f      	movs	r2, #15
   1147c:	2100      	movs	r1, #0
   1147e:	3001      	adds	r0, #1
   11480:	f000 fc35 	bl	11cee <memset>
   11484:	2310      	movs	r3, #16
   11486:	7023      	strb	r3, [r4, #0]
   11488:	2301      	movs	r3, #1
   1148a:	8126      	strh	r6, [r4, #8]
   1148c:	6063      	str	r3, [r4, #4]
   1148e:	682b      	ldr	r3, [r5, #0]
   11490:	60e3      	str	r3, [r4, #12]
   11492:	4620      	mov	r0, r4
   11494:	bd70      	pop	{r4, r5, r6, pc}
   11496:	2024      	movs	r0, #36	; 0x24
   11498:	f7fa f972 	bl	b780 <nrf_modem_os_alloc>
   1149c:	4604      	mov	r4, r0
   1149e:	2800      	cmp	r0, #0
   114a0:	d0e3      	beq.n	1146a <sockaddr_init+0xe>
   114a2:	2223      	movs	r2, #35	; 0x23
   114a4:	2100      	movs	r1, #0
   114a6:	3001      	adds	r0, #1
   114a8:	f000 fc21 	bl	11cee <memset>
   114ac:	2324      	movs	r3, #36	; 0x24
   114ae:	7023      	strb	r3, [r4, #0]
   114b0:	2302      	movs	r3, #2
   114b2:	4628      	mov	r0, r5
   114b4:	6063      	str	r3, [r4, #4]
   114b6:	8126      	strh	r6, [r4, #8]
   114b8:	f104 0310 	add.w	r3, r4, #16
   114bc:	f105 0210 	add.w	r2, r5, #16
   114c0:	f850 1b04 	ldr.w	r1, [r0], #4
   114c4:	4290      	cmp	r0, r2
   114c6:	f843 1b04 	str.w	r1, [r3], #4
   114ca:	d1f9      	bne.n	114c0 <sockaddr_init+0x64>
   114cc:	e7e1      	b.n	11492 <sockaddr_init+0x36>

000114ce <sock_pollcb>:
   114ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   114d0:	2500      	movs	r5, #0
   114d2:	6803      	ldr	r3, [r0, #0]
   114d4:	4604      	mov	r4, r0
   114d6:	9300      	str	r3, [sp, #0]
   114d8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   114da:	4668      	mov	r0, sp
   114dc:	f8ad 5006 	strh.w	r5, [sp, #6]
   114e0:	f8ad 3004 	strh.w	r3, [sp, #4]
   114e4:	f000 f87d 	bl	115e2 <nrf_poll_one>
   114e8:	b138      	cbz	r0, 114fa <sock_pollcb+0x2c>
   114ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
   114ec:	4668      	mov	r0, sp
   114ee:	4798      	blx	r3
   114f0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   114f4:	b10b      	cbz	r3, 114fa <sock_pollcb+0x2c>
   114f6:	6365      	str	r5, [r4, #52]	; 0x34
   114f8:	63a5      	str	r5, [r4, #56]	; 0x38
   114fa:	b003      	add	sp, #12
   114fc:	bd30      	pop	{r4, r5, pc}

000114fe <sock_pkt_append>:
   114fe:	2300      	movs	r3, #0
   11500:	600b      	str	r3, [r1, #0]
   11502:	6883      	ldr	r3, [r0, #8]
   11504:	b913      	cbnz	r3, 1150c <sock_pkt_append+0xe>
   11506:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1150a:	4770      	bx	lr
   1150c:	6019      	str	r1, [r3, #0]
   1150e:	6081      	str	r1, [r0, #8]
   11510:	4770      	bx	lr

00011512 <sock_is_stream>:
   11512:	6900      	ldr	r0, [r0, #16]
   11514:	1e43      	subs	r3, r0, #1
   11516:	4258      	negs	r0, r3
   11518:	4158      	adcs	r0, r3
   1151a:	4770      	bx	lr

0001151c <sock_is_datagram>:
   1151c:	6900      	ldr	r0, [r0, #16]
   1151e:	1e83      	subs	r3, r0, #2
   11520:	4258      	negs	r0, r3
   11522:	4158      	adcs	r0, r3
   11524:	4770      	bx	lr

00011526 <sock_proto_is_secure>:
   11526:	6940      	ldr	r0, [r0, #20]
   11528:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1152c:	d005      	beq.n	1153a <sock_proto_is_secure+0x14>
   1152e:	f240 1311 	movw	r3, #273	; 0x111
   11532:	1ac3      	subs	r3, r0, r3
   11534:	4258      	negs	r0, r3
   11536:	4158      	adcs	r0, r3
   11538:	4770      	bx	lr
   1153a:	2001      	movs	r0, #1
   1153c:	4770      	bx	lr

0001153e <sock_is_attaching>:
   1153e:	7f00      	ldrb	r0, [r0, #28]
   11540:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11544:	4770      	bx	lr

00011546 <sock_is_nonblock>:
   11546:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   11548:	f000 0001 	and.w	r0, r0, #1
   1154c:	4770      	bx	lr

0001154e <sock_is_local_closed>:
   1154e:	7f00      	ldrb	r0, [r0, #28]
   11550:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11554:	4770      	bx	lr

00011556 <sock_is_eof>:
   11556:	6903      	ldr	r3, [r0, #16]
   11558:	2b01      	cmp	r3, #1
   1155a:	d105      	bne.n	11568 <sock_is_eof+0x12>
   1155c:	6980      	ldr	r0, [r0, #24]
   1155e:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   11562:	4258      	negs	r0, r3
   11564:	4158      	adcs	r0, r3
   11566:	4770      	bx	lr
   11568:	2000      	movs	r0, #0
   1156a:	4770      	bx	lr

0001156c <sock_has_stream_error>:
   1156c:	7f00      	ldrb	r0, [r0, #28]
   1156e:	09c0      	lsrs	r0, r0, #7
   11570:	4770      	bx	lr

00011572 <sock_has_error>:
   11572:	6983      	ldr	r3, [r0, #24]
   11574:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   11578:	bf14      	ite	ne
   1157a:	2001      	movne	r0, #1
   1157c:	2000      	moveq	r0, #0
   1157e:	4770      	bx	lr

00011580 <sock_has_pollcb>:
   11580:	6b40      	ldr	r0, [r0, #52]	; 0x34
   11582:	3800      	subs	r0, #0
   11584:	bf18      	it	ne
   11586:	2001      	movne	r0, #1
   11588:	4770      	bx	lr

0001158a <sock_can_read>:
   1158a:	6840      	ldr	r0, [r0, #4]
   1158c:	3800      	subs	r0, #0
   1158e:	bf18      	it	ne
   11590:	2001      	movne	r0, #1
   11592:	4770      	bx	lr

00011594 <sock_can_accept>:
   11594:	7f40      	ldrb	r0, [r0, #29]
   11596:	3800      	subs	r0, #0
   11598:	bf18      	it	ne
   1159a:	2001      	movne	r0, #1
   1159c:	4770      	bx	lr

0001159e <sock_can_send>:
   1159e:	b510      	push	{r4, lr}
   115a0:	4602      	mov	r2, r0
   115a2:	6904      	ldr	r4, [r0, #16]
   115a4:	f7ff ffbf 	bl	11526 <sock_proto_is_secure>
   115a8:	2c01      	cmp	r4, #1
   115aa:	4601      	mov	r1, r0
   115ac:	7f13      	ldrb	r3, [r2, #28]
   115ae:	d103      	bne.n	115b8 <sock_can_send+0x1a>
   115b0:	071c      	lsls	r4, r3, #28
   115b2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   115b6:	d50b      	bpl.n	115d0 <sock_can_send+0x32>
   115b8:	b931      	cbnz	r1, 115c8 <sock_can_send+0x2a>
   115ba:	07d9      	lsls	r1, r3, #31
   115bc:	d40b      	bmi.n	115d6 <sock_can_send+0x38>
   115be:	f3c3 1380 	ubfx	r3, r3, #6, #1
   115c2:	f1c3 0001 	rsb	r0, r3, #1
   115c6:	e003      	b.n	115d0 <sock_can_send+0x32>
   115c8:	069a      	lsls	r2, r3, #26
   115ca:	f3c3 1040 	ubfx	r0, r3, #5, #1
   115ce:	d4f4      	bmi.n	115ba <sock_can_send+0x1c>
   115d0:	f000 0001 	and.w	r0, r0, #1
   115d4:	bd10      	pop	{r4, pc}
   115d6:	2000      	movs	r0, #0
   115d8:	e7fa      	b.n	115d0 <sock_can_send+0x32>

000115da <on_conf_dnssrv_res>:
   115da:	f000 b84d 	b.w	11678 <res_forward>

000115de <on_getifaddrs_res>:
   115de:	f000 b84b 	b.w	11678 <res_forward>

000115e2 <nrf_poll_one>:
   115e2:	b538      	push	{r3, r4, r5, lr}
   115e4:	4604      	mov	r4, r0
   115e6:	6800      	ldr	r0, [r0, #0]
   115e8:	f7fc fb6a 	bl	dcc0 <sock_find>
   115ec:	4605      	mov	r5, r0
   115ee:	b928      	cbnz	r0, 115fc <nrf_poll_one+0x1a>
   115f0:	2001      	movs	r0, #1
   115f2:	88e3      	ldrh	r3, [r4, #6]
   115f4:	f043 0320 	orr.w	r3, r3, #32
   115f8:	80e3      	strh	r3, [r4, #6]
   115fa:	bd38      	pop	{r3, r4, r5, pc}
   115fc:	f7ff ffa7 	bl	1154e <sock_is_local_closed>
   11600:	2800      	cmp	r0, #0
   11602:	d1f5      	bne.n	115f0 <nrf_poll_one+0xe>
   11604:	4628      	mov	r0, r5
   11606:	f7ff ffb4 	bl	11572 <sock_has_error>
   1160a:	b1f8      	cbz	r0, 1164c <nrf_poll_one+0x6a>
   1160c:	88e3      	ldrh	r3, [r4, #6]
   1160e:	f043 0308 	orr.w	r3, r3, #8
   11612:	80e3      	strh	r3, [r4, #6]
   11614:	88a3      	ldrh	r3, [r4, #4]
   11616:	07da      	lsls	r2, r3, #31
   11618:	d507      	bpl.n	1162a <nrf_poll_one+0x48>
   1161a:	4628      	mov	r0, r5
   1161c:	f7ff ffb5 	bl	1158a <sock_can_read>
   11620:	b1e8      	cbz	r0, 1165e <nrf_poll_one+0x7c>
   11622:	88e3      	ldrh	r3, [r4, #6]
   11624:	f043 0301 	orr.w	r3, r3, #1
   11628:	80e3      	strh	r3, [r4, #6]
   1162a:	88a3      	ldrh	r3, [r4, #4]
   1162c:	075b      	lsls	r3, r3, #29
   1162e:	d507      	bpl.n	11640 <nrf_poll_one+0x5e>
   11630:	4628      	mov	r0, r5
   11632:	f7ff ffb4 	bl	1159e <sock_can_send>
   11636:	b118      	cbz	r0, 11640 <nrf_poll_one+0x5e>
   11638:	88e3      	ldrh	r3, [r4, #6]
   1163a:	f043 0304 	orr.w	r3, r3, #4
   1163e:	80e3      	strh	r3, [r4, #6]
   11640:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   11644:	3800      	subs	r0, #0
   11646:	bf18      	it	ne
   11648:	2001      	movne	r0, #1
   1164a:	e7d6      	b.n	115fa <nrf_poll_one+0x18>
   1164c:	4628      	mov	r0, r5
   1164e:	f7ff ff82 	bl	11556 <sock_is_eof>
   11652:	2800      	cmp	r0, #0
   11654:	d0de      	beq.n	11614 <nrf_poll_one+0x32>
   11656:	88e3      	ldrh	r3, [r4, #6]
   11658:	f043 0310 	orr.w	r3, r3, #16
   1165c:	e7d9      	b.n	11612 <nrf_poll_one+0x30>
   1165e:	4628      	mov	r0, r5
   11660:	f7ff ff98 	bl	11594 <sock_can_accept>
   11664:	2800      	cmp	r0, #0
   11666:	d1dc      	bne.n	11622 <nrf_poll_one+0x40>
   11668:	4628      	mov	r0, r5
   1166a:	f7ff ff74 	bl	11556 <sock_is_eof>
   1166e:	2800      	cmp	r0, #0
   11670:	d1d7      	bne.n	11622 <nrf_poll_one+0x40>
   11672:	e7da      	b.n	1162a <nrf_poll_one+0x48>

00011674 <res_cookie_get>:
   11674:	68c0      	ldr	r0, [r0, #12]
   11676:	4770      	bx	lr

00011678 <res_forward>:
   11678:	68c3      	ldr	r3, [r0, #12]
   1167a:	6018      	str	r0, [r3, #0]
   1167c:	2001      	movs	r0, #1
   1167e:	4770      	bx	lr

00011680 <rpc_dfu_event_handler>:
   11680:	b510      	push	{r4, lr}
   11682:	4604      	mov	r4, r0
   11684:	6800      	ldr	r0, [r0, #0]
   11686:	b108      	cbz	r0, 1168c <rpc_dfu_event_handler+0xc>
   11688:	f7ff fedc 	bl	11444 <rpc_client_msg_data_rx_free>
   1168c:	68e0      	ldr	r0, [r4, #12]
   1168e:	b108      	cbz	r0, 11694 <rpc_dfu_event_handler+0x14>
   11690:	6004      	str	r4, [r0, #0]
   11692:	2001      	movs	r0, #1
   11694:	bd10      	pop	{r4, pc}

00011696 <nrf_modem_is_initialized>:
   11696:	f7fd b849 	b.w	e72c <nrf_modem_state_is_initialized>

0001169a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1169a:	4770      	bx	lr

0001169c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1169c:	b140      	cbz	r0, 116b0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1169e:	68c3      	ldr	r3, [r0, #12]
   116a0:	7858      	ldrb	r0, [r3, #1]
   116a2:	f010 0001 	ands.w	r0, r0, #1
   116a6:	bf1e      	ittt	ne
   116a8:	7818      	ldrbne	r0, [r3, #0]
   116aa:	fab0 f080 	clzne	r0, r0
   116ae:	0940      	lsrne	r0, r0, #5
}
   116b0:	4770      	bx	lr

000116b2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   116b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116b4:	4605      	mov	r5, r0
   116b6:	460e      	mov	r6, r1
	__asm__ volatile(
   116b8:	f04f 0320 	mov.w	r3, #32
   116bc:	f3ef 8711 	mrs	r7, BASEPRI
   116c0:	f383 8812 	msr	BASEPRI_MAX, r3
   116c4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   116c8:	f7fd ffd8 	bl	f67c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   116cc:	4631      	mov	r1, r6
   116ce:	4604      	mov	r4, r0
   116d0:	4628      	mov	r0, r5
   116d2:	f7ff fe2f 	bl	11334 <k_sys_fatal_error_handler>
	__asm__ volatile(
   116d6:	f387 8811 	msr	BASEPRI, r7
   116da:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   116de:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   116e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   116e4:	f7f8 be58 	b.w	a398 <z_impl_k_thread_abort>

000116e8 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   116e8:	f000 bb01 	b.w	11cee <memset>

000116ec <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   116ec:	f000 baf2 	b.w	11cd4 <memcpy>

000116f0 <k_heap_init>:
{
   116f0:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   116f2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   116f6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   116fa:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   116fc:	f7ff b818 	b.w	10730 <sys_heap_init>

00011700 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   11700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11704:	b085      	sub	sp, #20
   11706:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1170a:	4607      	mov	r7, r0
   1170c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1170e:	4650      	mov	r0, sl
   11710:	4621      	mov	r1, r4
{
   11712:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   11714:	f000 fa76 	bl	11c04 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   11718:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1171c:	bf08      	it	eq
   1171e:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   11722:	4605      	mov	r5, r0
   11724:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   11726:	bf04      	itt	eq
   11728:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   1172c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   11730:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   11734:	f04f 0320 	mov.w	r3, #32
   11738:	f3ef 8411 	mrs	r4, BASEPRI
   1173c:	f383 8812 	msr	BASEPRI_MAX, r3
   11740:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   11744:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   11748:	464a      	mov	r2, r9
   1174a:	4641      	mov	r1, r8
   1174c:	4638      	mov	r0, r7
   1174e:	f7fe ff88 	bl	10662 <sys_heap_aligned_alloc>
   11752:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   11754:	f7fe f94c 	bl	f9f0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   11758:	9b03      	ldr	r3, [sp, #12]
   1175a:	b13b      	cbz	r3, 1176c <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   1175c:	f384 8811 	msr	BASEPRI, r4
   11760:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   11764:	4618      	mov	r0, r3
   11766:	b005      	add	sp, #20
   11768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1176c:	1a28      	subs	r0, r5, r0
   1176e:	eb66 0101 	sbc.w	r1, r6, r1
   11772:	2801      	cmp	r0, #1
   11774:	f171 0200 	sbcs.w	r2, r1, #0
   11778:	dbf0      	blt.n	1175c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1177a:	e9cd 0100 	strd	r0, r1, [sp]
   1177e:	465a      	mov	r2, fp
   11780:	4621      	mov	r1, r4
   11782:	4650      	mov	r0, sl
   11784:	f7fd fddc 	bl	f340 <z_pend_curr>
	__asm__ volatile(
   11788:	f04f 0320 	mov.w	r3, #32
   1178c:	f3ef 8411 	mrs	r4, BASEPRI
   11790:	f383 8812 	msr	BASEPRI_MAX, r3
   11794:	f3bf 8f6f 	isb	sy
	return k;
   11798:	e7d6      	b.n	11748 <k_heap_aligned_alloc+0x48>

0001179a <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   1179a:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   1179c:	e9cd 2300 	strd	r2, r3, [sp]
   117a0:	460a      	mov	r2, r1
   117a2:	2104      	movs	r1, #4
   117a4:	f7ff ffac 	bl	11700 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   117a8:	b003      	add	sp, #12
   117aa:	f85d fb04 	ldr.w	pc, [sp], #4

000117ae <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   117ae:	b538      	push	{r3, r4, r5, lr}
   117b0:	4604      	mov	r4, r0
   117b2:	f04f 0320 	mov.w	r3, #32
   117b6:	f3ef 8511 	mrs	r5, BASEPRI
   117ba:	f383 8812 	msr	BASEPRI_MAX, r3
   117be:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   117c2:	f7fe ff16 	bl	105f2 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   117c6:	f104 000c 	add.w	r0, r4, #12
   117ca:	f000 f99c 	bl	11b06 <z_unpend_all>
   117ce:	b130      	cbz	r0, 117de <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   117d0:	4629      	mov	r1, r5
   117d2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   117d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   117da:	f7fd be15 	b.w	f408 <z_reschedule>
	__asm__ volatile(
   117de:	f385 8811 	msr	BASEPRI, r5
   117e2:	f3bf 8f6f 	isb	sy
}
   117e6:	bd38      	pop	{r3, r4, r5, pc}

000117e8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   117e8:	f3ef 8005 	mrs	r0, IPSR
}
   117ec:	3800      	subs	r0, #0
   117ee:	bf18      	it	ne
   117f0:	2001      	movne	r0, #1
   117f2:	4770      	bx	lr

000117f4 <z_impl_k_thread_name_set>:
}
   117f4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   117f8:	4770      	bx	lr

000117fa <z_impl_k_thread_start>:
	z_sched_start(thread);
   117fa:	f7fd be17 	b.w	f42c <z_sched_start>

000117fe <z_pm_save_idle_exit>:
{
   117fe:	b508      	push	{r3, lr}
	pm_system_resume();
   11800:	f7f8 fa10 	bl	9c24 <pm_system_resume>
}
   11804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   11808:	f7ff ba75 	b.w	10cf6 <sys_clock_idle_exit>

0001180c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1180c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   11810:	428b      	cmp	r3, r1
   11812:	d001      	beq.n	11818 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   11814:	f7fd bdb2 	b.w	f37c <z_set_prio>
}
   11818:	2000      	movs	r0, #0
   1181a:	4770      	bx	lr

0001181c <z_impl_k_mutex_init>:
{
   1181c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1181e:	2000      	movs	r0, #0
   11820:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   11824:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   11828:	4770      	bx	lr

0001182a <queue_insert>:
{
   1182a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1182e:	4699      	mov	r9, r3
   11830:	4604      	mov	r4, r0
   11832:	460d      	mov	r5, r1
   11834:	4690      	mov	r8, r2
   11836:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1183a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1183e:	f04f 0220 	mov.w	r2, #32
   11842:	f3ef 8711 	mrs	r7, BASEPRI
   11846:	f382 8812 	msr	BASEPRI_MAX, r2
   1184a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1184e:	b103      	cbz	r3, 11852 <queue_insert+0x28>
	return list->tail;
   11850:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   11852:	4630      	mov	r0, r6
   11854:	f000 f911 	bl	11a7a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   11858:	b158      	cbz	r0, 11872 <queue_insert+0x48>
   1185a:	2300      	movs	r3, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1185c:	f8c0 8014 	str.w	r8, [r0, #20]
   11860:	6783      	str	r3, [r0, #120]	; 0x78
	z_ready_thread(thread);
   11862:	f000 f8fa 	bl	11a5a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   11866:	4630      	mov	r0, r6
   11868:	4639      	mov	r1, r7
   1186a:	f7fd fdcd 	bl	f408 <z_reschedule>
		return 0;
   1186e:	2000      	movs	r0, #0
   11870:	e00c      	b.n	1188c <queue_insert+0x62>
	if (alloc) {
   11872:	f1b9 0f00 	cmp.w	r9, #0
   11876:	d01c      	beq.n	118b2 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   11878:	2108      	movs	r1, #8
   1187a:	f7fe f8e1 	bl	fa40 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1187e:	b938      	cbnz	r0, 11890 <queue_insert+0x66>
	__asm__ volatile(
   11880:	f387 8811 	msr	BASEPRI, r7
   11884:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   11888:	f06f 000b 	mvn.w	r0, #11
}
   1188c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   11890:	2201      	movs	r2, #1
		anode->data = data;
   11892:	f8c0 8004 	str.w	r8, [r0, #4]
   11896:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11898:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1189a:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1189e:	b965      	cbnz	r5, 118ba <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   118a0:	6822      	ldr	r2, [r4, #0]
   118a2:	430a      	orrs	r2, r1
   118a4:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   118a6:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   118a8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   118aa:	2a00      	cmp	r2, #0
   118ac:	d1db      	bne.n	11866 <queue_insert+0x3c>
	list->tail = node;
   118ae:	6060      	str	r0, [r4, #4]
}
   118b0:	e7d9      	b.n	11866 <queue_insert+0x3c>
}
   118b2:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   118b4:	f8c8 9000 	str.w	r9, [r8]
}
   118b8:	e7ee      	b.n	11898 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   118ba:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   118bc:	2a03      	cmp	r2, #3
   118be:	d80b      	bhi.n	118d8 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
   118c0:	6001      	str	r1, [r0, #0]
	return list->tail;
   118c2:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   118c4:	b911      	cbnz	r1, 118cc <queue_insert+0xa2>
	list->head = node;
   118c6:	e9c4 0000 	strd	r0, r0, [r4]
}
   118ca:	e7cc      	b.n	11866 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   118cc:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   118ce:	f002 0203 	and.w	r2, r2, #3
   118d2:	4302      	orrs	r2, r0
   118d4:	600a      	str	r2, [r1, #0]
   118d6:	e7ea      	b.n	118ae <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   118d8:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   118dc:	430a      	orrs	r2, r1
   118de:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   118e0:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   118e2:	f002 0203 	and.w	r2, r2, #3
   118e6:	ea40 0302 	orr.w	r3, r0, r2
   118ea:	602b      	str	r3, [r5, #0]
}
   118ec:	e7bb      	b.n	11866 <queue_insert+0x3c>

000118ee <z_queue_node_peek>:
{
   118ee:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   118f0:	4604      	mov	r4, r0
   118f2:	b130      	cbz	r0, 11902 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   118f4:	6802      	ldr	r2, [r0, #0]
   118f6:	0793      	lsls	r3, r2, #30
   118f8:	d003      	beq.n	11902 <z_queue_node_peek+0x14>
		ret = anode->data;
   118fa:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   118fc:	b109      	cbz	r1, 11902 <z_queue_node_peek+0x14>
			k_free(anode);
   118fe:	f000 f9b6 	bl	11c6e <k_free>
}
   11902:	4620      	mov	r0, r4
   11904:	bd10      	pop	{r4, pc}

00011906 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   11906:	2301      	movs	r3, #1
{
   11908:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1190a:	9300      	str	r3, [sp, #0]
   1190c:	2300      	movs	r3, #0
{
   1190e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   11910:	4619      	mov	r1, r3
   11912:	f7ff ff8a 	bl	1182a <queue_insert>
}
   11916:	b003      	add	sp, #12
   11918:	f85d fb04 	ldr.w	pc, [sp], #4

0001191c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1191c:	b13a      	cbz	r2, 1192e <z_impl_k_sem_init+0x12>
   1191e:	428a      	cmp	r2, r1
   11920:	d305      	bcc.n	1192e <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   11922:	e9c0 1202 	strd	r1, r2, [r0, #8]
   11926:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   1192a:	2000      	movs	r0, #0
   1192c:	4770      	bx	lr
		return -EINVAL;
   1192e:	f06f 0015 	mvn.w	r0, #21
}
   11932:	4770      	bx	lr

00011934 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   11934:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   11936:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   11938:	408b      	lsls	r3, r1
   1193a:	ea22 0303 	bic.w	r3, r2, r3
   1193e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   11940:	fa22 f001 	lsr.w	r0, r2, r1
}
   11944:	f000 0001 	and.w	r0, r0, #1
   11948:	4770      	bx	lr

0001194a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1194a:	b120      	cbz	r0, 11956 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1194c:	2200      	movs	r2, #0
   1194e:	3088      	adds	r0, #136	; 0x88
   11950:	4611      	mov	r1, r2
   11952:	f000 b8e8 	b.w	11b26 <z_sched_wake>
}
   11956:	4770      	bx	lr

00011958 <z_work_submit_to_queue>:
{
   11958:	b513      	push	{r0, r1, r4, lr}
   1195a:	9001      	str	r0, [sp, #4]
   1195c:	4608      	mov	r0, r1
	__asm__ volatile(
   1195e:	f04f 0320 	mov.w	r3, #32
   11962:	f3ef 8411 	mrs	r4, BASEPRI
   11966:	f383 8812 	msr	BASEPRI_MAX, r3
   1196a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1196e:	a901      	add	r1, sp, #4
   11970:	f7fd fb0a 	bl	ef88 <submit_to_queue_locked>
	__asm__ volatile(
   11974:	f384 8811 	msr	BASEPRI, r4
   11978:	f3bf 8f6f 	isb	sy
}
   1197c:	b002      	add	sp, #8
   1197e:	bd10      	pop	{r4, pc}

00011980 <k_work_submit_to_queue>:
{
   11980:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   11982:	f7ff ffe9 	bl	11958 <z_work_submit_to_queue>
	if (ret > 0) {
   11986:	1e04      	subs	r4, r0, #0
   11988:	dd09      	ble.n	1199e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1198a:	f04f 0320 	mov.w	r3, #32
   1198e:	f3ef 8011 	mrs	r0, BASEPRI
   11992:	f383 8812 	msr	BASEPRI_MAX, r3
   11996:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1199a:	f000 f89e 	bl	11ada <z_reschedule_irqlock>
}
   1199e:	4620      	mov	r0, r4
   119a0:	bd10      	pop	{r4, pc}

000119a2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   119a2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   119a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   119a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   119aa:	2300      	movs	r3, #0
	node->prev = NULL;
   119ac:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   119b0:	4770      	bx	lr

000119b2 <unpend_thread_no_timeout>:
{
   119b2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   119b4:	f7ff fff5 	bl	119a2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   119b8:	7b43      	ldrb	r3, [r0, #13]
   119ba:	f023 0302 	bic.w	r3, r3, #2
   119be:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   119c0:	2300      	movs	r3, #0
   119c2:	6083      	str	r3, [r0, #8]
}
   119c4:	bd08      	pop	{r3, pc}

000119c6 <z_thread_timeout>:
{
   119c6:	4601      	mov	r1, r0
   119c8:	b510      	push	{r4, lr}
   119ca:	f04f 0320 	mov.w	r3, #32
   119ce:	f3ef 8411 	mrs	r4, BASEPRI
   119d2:	f383 8812 	msr	BASEPRI_MAX, r3
   119d6:	f3bf 8f6f 	isb	sy
		if (!killed) {
   119da:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   119de:	f013 0f28 	tst.w	r3, #40	; 0x28
   119e2:	d10d      	bne.n	11a00 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   119e4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   119e8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   119ea:	b10b      	cbz	r3, 119f0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   119ec:	f7ff ffe1 	bl	119b2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   119f0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   119f4:	f023 0314 	bic.w	r3, r3, #20
   119f8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   119fc:	f7fd fbc8 	bl	f190 <ready_thread>
	__asm__ volatile(
   11a00:	f384 8811 	msr	BASEPRI, r4
   11a04:	f3bf 8f6f 	isb	sy
}
   11a08:	bd10      	pop	{r4, pc}

00011a0a <add_to_waitq_locked>:
{
   11a0a:	b538      	push	{r3, r4, r5, lr}
   11a0c:	4604      	mov	r4, r0
   11a0e:	460d      	mov	r5, r1
	unready_thread(thread);
   11a10:	f7fd fbf2 	bl	f1f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   11a14:	7b63      	ldrb	r3, [r4, #13]
   11a16:	f043 0302 	orr.w	r3, r3, #2
   11a1a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   11a1c:	b1e5      	cbz	r5, 11a58 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   11a1e:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   11a20:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a22:	429d      	cmp	r5, r3
   11a24:	d109      	bne.n	11a3a <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   11a26:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   11a28:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   11a2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11a2e:	606c      	str	r4, [r5, #4]
}
   11a30:	e012      	b.n	11a58 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   11a32:	686a      	ldr	r2, [r5, #4]
   11a34:	4293      	cmp	r3, r2
   11a36:	d0f6      	beq.n	11a26 <add_to_waitq_locked+0x1c>
   11a38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11a3a:	2b00      	cmp	r3, #0
   11a3c:	d0f3      	beq.n	11a26 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   11a3e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11a42:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   11a46:	428a      	cmp	r2, r1
   11a48:	d0f3      	beq.n	11a32 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11a4a:	4291      	cmp	r1, r2
   11a4c:	ddf1      	ble.n	11a32 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   11a4e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11a50:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11a54:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11a56:	605c      	str	r4, [r3, #4]
}
   11a58:	bd38      	pop	{r3, r4, r5, pc}

00011a5a <z_ready_thread>:
{
   11a5a:	b510      	push	{r4, lr}
	__asm__ volatile(
   11a5c:	f04f 0320 	mov.w	r3, #32
   11a60:	f3ef 8411 	mrs	r4, BASEPRI
   11a64:	f383 8812 	msr	BASEPRI_MAX, r3
   11a68:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   11a6c:	f7fd fb90 	bl	f190 <ready_thread>
	__asm__ volatile(
   11a70:	f384 8811 	msr	BASEPRI, r4
   11a74:	f3bf 8f6f 	isb	sy
}
   11a78:	bd10      	pop	{r4, pc}

00011a7a <z_unpend_first_thread>:
{
   11a7a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11a7c:	f04f 0320 	mov.w	r3, #32
   11a80:	f3ef 8511 	mrs	r5, BASEPRI
   11a84:	f383 8812 	msr	BASEPRI_MAX, r3
   11a88:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11a8c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a8e:	42a0      	cmp	r0, r4
   11a90:	d00d      	beq.n	11aae <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   11a92:	b134      	cbz	r4, 11aa2 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   11a94:	4620      	mov	r0, r4
   11a96:	f7ff ff8c 	bl	119b2 <unpend_thread_no_timeout>
   11a9a:	f104 0018 	add.w	r0, r4, #24
   11a9e:	f000 f865 	bl	11b6c <z_abort_timeout>
	__asm__ volatile(
   11aa2:	f385 8811 	msr	BASEPRI, r5
   11aa6:	f3bf 8f6f 	isb	sy
}
   11aaa:	4620      	mov	r0, r4
   11aac:	bd38      	pop	{r3, r4, r5, pc}
   11aae:	2400      	movs	r4, #0
   11ab0:	e7f7      	b.n	11aa2 <z_unpend_first_thread+0x28>

00011ab2 <z_unpend_thread>:
{
   11ab2:	b510      	push	{r4, lr}
	__asm__ volatile(
   11ab4:	f04f 0320 	mov.w	r3, #32
   11ab8:	f3ef 8411 	mrs	r4, BASEPRI
   11abc:	f383 8812 	msr	BASEPRI_MAX, r3
   11ac0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   11ac4:	f7ff ff75 	bl	119b2 <unpend_thread_no_timeout>
	__asm__ volatile(
   11ac8:	f384 8811 	msr	BASEPRI, r4
   11acc:	f3bf 8f6f 	isb	sy
}
   11ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ad4:	3018      	adds	r0, #24
   11ad6:	f000 b849 	b.w	11b6c <z_abort_timeout>

00011ada <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11ada:	4603      	mov	r3, r0
   11adc:	b920      	cbnz	r0, 11ae8 <z_reschedule_irqlock+0xe>
   11ade:	f3ef 8205 	mrs	r2, IPSR
   11ae2:	b90a      	cbnz	r2, 11ae8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   11ae4:	f7f8 ba10 	b.w	9f08 <arch_swap>
   11ae8:	f383 8811 	msr	BASEPRI, r3
   11aec:	f3bf 8f6f 	isb	sy
}
   11af0:	4770      	bx	lr

00011af2 <z_reschedule_unlocked>:
	__asm__ volatile(
   11af2:	f04f 0320 	mov.w	r3, #32
   11af6:	f3ef 8011 	mrs	r0, BASEPRI
   11afa:	f383 8812 	msr	BASEPRI_MAX, r3
   11afe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   11b02:	f7ff bfea 	b.w	11ada <z_reschedule_irqlock>

00011b06 <z_unpend_all>:
{
   11b06:	b538      	push	{r3, r4, r5, lr}
   11b08:	4605      	mov	r5, r0
	int need_sched = 0;
   11b0a:	2000      	movs	r0, #0
	return list->head == list;
   11b0c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b0e:	42a5      	cmp	r5, r4
   11b10:	d000      	beq.n	11b14 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11b12:	b904      	cbnz	r4, 11b16 <z_unpend_all+0x10>
}
   11b14:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   11b16:	4620      	mov	r0, r4
   11b18:	f7ff ffcb 	bl	11ab2 <z_unpend_thread>
		z_ready_thread(thread);
   11b1c:	4620      	mov	r0, r4
   11b1e:	f7ff ff9c 	bl	11a5a <z_ready_thread>
		need_sched = 1;
   11b22:	2001      	movs	r0, #1
   11b24:	e7f2      	b.n	11b0c <z_unpend_all+0x6>

00011b26 <z_sched_wake>:
{
   11b26:	b538      	push	{r3, r4, r5, lr}
   11b28:	f04f 0320 	mov.w	r3, #32
   11b2c:	f3ef 8511 	mrs	r5, BASEPRI
   11b30:	f383 8812 	msr	BASEPRI_MAX, r3
   11b34:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11b38:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b3a:	42a0      	cmp	r0, r4
   11b3c:	d012      	beq.n	11b64 <z_sched_wake+0x3e>
		if (thread != NULL) {
   11b3e:	b19c      	cbz	r4, 11b68 <z_sched_wake+0x42>
   11b40:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
   11b42:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   11b44:	4620      	mov	r0, r4
   11b46:	f7ff ff34 	bl	119b2 <unpend_thread_no_timeout>
   11b4a:	f104 0018 	add.w	r0, r4, #24
   11b4e:	f000 f80d 	bl	11b6c <z_abort_timeout>
			ready_thread(thread);
   11b52:	4620      	mov	r0, r4
   11b54:	f7fd fb1c 	bl	f190 <ready_thread>
			ret = true;
   11b58:	2001      	movs	r0, #1
	__asm__ volatile(
   11b5a:	f385 8811 	msr	BASEPRI, r5
   11b5e:	f3bf 8f6f 	isb	sy
}
   11b62:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   11b64:	2000      	movs	r0, #0
   11b66:	e7f8      	b.n	11b5a <z_sched_wake+0x34>
   11b68:	4620      	mov	r0, r4
   11b6a:	e7f6      	b.n	11b5a <z_sched_wake+0x34>

00011b6c <z_abort_timeout>:
{
   11b6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   11b6e:	f04f 0220 	mov.w	r2, #32
   11b72:	f3ef 8411 	mrs	r4, BASEPRI
   11b76:	f382 8812 	msr	BASEPRI_MAX, r2
   11b7a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   11b7e:	6803      	ldr	r3, [r0, #0]
   11b80:	b13b      	cbz	r3, 11b92 <z_abort_timeout+0x26>
			remove_timeout(to);
   11b82:	f7fd fe3f 	bl	f804 <remove_timeout>
			ret = 0;
   11b86:	2000      	movs	r0, #0
	__asm__ volatile(
   11b88:	f384 8811 	msr	BASEPRI, r4
   11b8c:	f3bf 8f6f 	isb	sy
}
   11b90:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   11b92:	f06f 0015 	mvn.w	r0, #21
   11b96:	e7f7      	b.n	11b88 <z_abort_timeout+0x1c>

00011b98 <z_get_next_timeout_expiry>:
{
   11b98:	b510      	push	{r4, lr}
	__asm__ volatile(
   11b9a:	f04f 0320 	mov.w	r3, #32
   11b9e:	f3ef 8411 	mrs	r4, BASEPRI
   11ba2:	f383 8812 	msr	BASEPRI_MAX, r3
   11ba6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   11baa:	f7fd fe03 	bl	f7b4 <next_timeout>
	__asm__ volatile(
   11bae:	f384 8811 	msr	BASEPRI, r4
   11bb2:	f3bf 8f6f 	isb	sy
}
   11bb6:	bd10      	pop	{r4, pc}

00011bb8 <z_set_timeout_expiry>:
{
   11bb8:	b570      	push	{r4, r5, r6, lr}
   11bba:	4604      	mov	r4, r0
   11bbc:	460d      	mov	r5, r1
	__asm__ volatile(
   11bbe:	f04f 0320 	mov.w	r3, #32
   11bc2:	f3ef 8611 	mrs	r6, BASEPRI
   11bc6:	f383 8812 	msr	BASEPRI_MAX, r3
   11bca:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   11bce:	f7fd fdf1 	bl	f7b4 <next_timeout>
			      || (ticks <= next_to);
   11bd2:	2801      	cmp	r0, #1
   11bd4:	dd07      	ble.n	11be6 <z_set_timeout_expiry+0x2e>
   11bd6:	42a0      	cmp	r0, r4
   11bd8:	db05      	blt.n	11be6 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   11bda:	42a0      	cmp	r0, r4
   11bdc:	4629      	mov	r1, r5
   11bde:	bfa8      	it	ge
   11be0:	4620      	movge	r0, r4
   11be2:	f7f9 fb9d 	bl	b320 <sys_clock_set_timeout>
	__asm__ volatile(
   11be6:	f386 8811 	msr	BASEPRI, r6
   11bea:	f3bf 8f6f 	isb	sy
}
   11bee:	bd70      	pop	{r4, r5, r6, pc}

00011bf0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   11bf0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   11bf2:	f7fd fefd 	bl	f9f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   11bf6:	bd08      	pop	{r3, pc}

00011bf8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   11bf8:	f7fd befa 	b.w	f9f0 <sys_clock_tick_get>

00011bfc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   11bfc:	b108      	cbz	r0, 11c02 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   11bfe:	f7f7 bfd7 	b.w	9bb0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   11c02:	4770      	bx	lr

00011c04 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11c04:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11c08:	bf08      	it	eq
   11c0a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   11c0e:	b538      	push	{r3, r4, r5, lr}
   11c10:	460c      	mov	r4, r1
   11c12:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11c14:	d014      	beq.n	11c40 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11c16:	4308      	orrs	r0, r1
   11c18:	d103      	bne.n	11c22 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   11c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   11c1e:	f7fd bee7 	b.w	f9f0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   11c22:	f06f 0001 	mvn.w	r0, #1
   11c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c2a:	1b40      	subs	r0, r0, r5
   11c2c:	eb63 0101 	sbc.w	r1, r3, r1
   11c30:	2900      	cmp	r1, #0
   11c32:	da04      	bge.n	11c3e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   11c34:	f7fd fedc 	bl	f9f0 <sys_clock_tick_get>
   11c38:	1940      	adds	r0, r0, r5
   11c3a:	eb41 0104 	adc.w	r1, r1, r4
}
   11c3e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   11c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11c44:	4601      	mov	r1, r0
   11c46:	e7fa      	b.n	11c3e <sys_clock_timeout_end_calc+0x3a>

00011c48 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   11c48:	3204      	adds	r2, #4
{
   11c4a:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   11c4c:	4604      	mov	r4, r0
   11c4e:	d208      	bcs.n	11c62 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   11c50:	2600      	movs	r6, #0
   11c52:	2700      	movs	r7, #0
   11c54:	f041 0104 	orr.w	r1, r1, #4
   11c58:	e9cd 6700 	strd	r6, r7, [sp]
   11c5c:	f7ff fd50 	bl	11700 <k_heap_aligned_alloc>
	if (mem == NULL) {
   11c60:	b910      	cbnz	r0, 11c68 <z_heap_aligned_alloc+0x20>
		return NULL;
   11c62:	2000      	movs	r0, #0
}
   11c64:	b002      	add	sp, #8
   11c66:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   11c68:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   11c6c:	e7fa      	b.n	11c64 <z_heap_aligned_alloc+0x1c>

00011c6e <k_free>:
	if (ptr != NULL) {
   11c6e:	b120      	cbz	r0, 11c7a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   11c70:	1f01      	subs	r1, r0, #4
   11c72:	f850 0c04 	ldr.w	r0, [r0, #-4]
   11c76:	f7ff bd9a 	b.w	117ae <k_heap_free>
}
   11c7a:	4770      	bx	lr

00011c7c <k_malloc>:
{
   11c7c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   11c7e:	2004      	movs	r0, #4
   11c80:	f7fd bed0 	b.w	fa24 <k_aligned_alloc>

00011c84 <k_calloc>:
{
   11c84:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   11c86:	fba0 5401 	umull	r5, r4, r0, r1
   11c8a:	b924      	cbnz	r4, 11c96 <k_calloc+0x12>
	ret = k_malloc(bounds);
   11c8c:	4628      	mov	r0, r5
   11c8e:	f7ff fff5 	bl	11c7c <k_malloc>
	if (ret != NULL) {
   11c92:	4606      	mov	r6, r0
   11c94:	b910      	cbnz	r0, 11c9c <k_calloc+0x18>
		return NULL;
   11c96:	2600      	movs	r6, #0
}
   11c98:	4630      	mov	r0, r6
   11c9a:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   11c9c:	462a      	mov	r2, r5
   11c9e:	4621      	mov	r1, r4
   11ca0:	f000 f825 	bl	11cee <memset>
   11ca4:	e7f8      	b.n	11c98 <k_calloc+0x14>

00011ca6 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   11ca6:	bf00      	nop
	arch_nop();

#ifdef CONFIG_CPP_MAIN
	return 0;
#endif
}
   11ca8:	4770      	bx	lr

00011caa <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   11caa:	4770      	bx	lr

00011cac <abs>:
   11cac:	2800      	cmp	r0, #0
   11cae:	bfb8      	it	lt
   11cb0:	4240      	neglt	r0, r0
   11cb2:	4770      	bx	lr

00011cb4 <memcmp>:
   11cb4:	3901      	subs	r1, #1
   11cb6:	4402      	add	r2, r0
   11cb8:	b510      	push	{r4, lr}
   11cba:	4290      	cmp	r0, r2
   11cbc:	d101      	bne.n	11cc2 <memcmp+0xe>
   11cbe:	2000      	movs	r0, #0
   11cc0:	e005      	b.n	11cce <memcmp+0x1a>
   11cc2:	7803      	ldrb	r3, [r0, #0]
   11cc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11cc8:	42a3      	cmp	r3, r4
   11cca:	d001      	beq.n	11cd0 <memcmp+0x1c>
   11ccc:	1b18      	subs	r0, r3, r4
   11cce:	bd10      	pop	{r4, pc}
   11cd0:	3001      	adds	r0, #1
   11cd2:	e7f2      	b.n	11cba <memcmp+0x6>

00011cd4 <memcpy>:
   11cd4:	440a      	add	r2, r1
   11cd6:	1e43      	subs	r3, r0, #1
   11cd8:	4291      	cmp	r1, r2
   11cda:	d100      	bne.n	11cde <memcpy+0xa>
   11cdc:	4770      	bx	lr
   11cde:	b510      	push	{r4, lr}
   11ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
   11ce4:	4291      	cmp	r1, r2
   11ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
   11cea:	d1f9      	bne.n	11ce0 <memcpy+0xc>
   11cec:	bd10      	pop	{r4, pc}

00011cee <memset>:
   11cee:	4402      	add	r2, r0
   11cf0:	4603      	mov	r3, r0
   11cf2:	4293      	cmp	r3, r2
   11cf4:	d100      	bne.n	11cf8 <memset+0xa>
   11cf6:	4770      	bx	lr
   11cf8:	f803 1b01 	strb.w	r1, [r3], #1
   11cfc:	e7f9      	b.n	11cf2 <memset+0x4>

00011cfe <strchr>:
   11cfe:	b2c9      	uxtb	r1, r1
   11d00:	4603      	mov	r3, r0
   11d02:	4618      	mov	r0, r3
   11d04:	f813 2b01 	ldrb.w	r2, [r3], #1
   11d08:	b112      	cbz	r2, 11d10 <strchr+0x12>
   11d0a:	428a      	cmp	r2, r1
   11d0c:	d1f9      	bne.n	11d02 <strchr+0x4>
   11d0e:	4770      	bx	lr
   11d10:	2900      	cmp	r1, #0
   11d12:	bf18      	it	ne
   11d14:	2000      	movne	r0, #0
   11d16:	4770      	bx	lr

00011d18 <strcpy>:
   11d18:	4603      	mov	r3, r0
   11d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   11d1e:	f803 2b01 	strb.w	r2, [r3], #1
   11d22:	2a00      	cmp	r2, #0
   11d24:	d1f9      	bne.n	11d1a <strcpy+0x2>
   11d26:	4770      	bx	lr

00011d28 <strncmp>:
   11d28:	b510      	push	{r4, lr}
   11d2a:	b16a      	cbz	r2, 11d48 <strncmp+0x20>
   11d2c:	3901      	subs	r1, #1
   11d2e:	1884      	adds	r4, r0, r2
   11d30:	f810 2b01 	ldrb.w	r2, [r0], #1
   11d34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   11d38:	429a      	cmp	r2, r3
   11d3a:	d103      	bne.n	11d44 <strncmp+0x1c>
   11d3c:	42a0      	cmp	r0, r4
   11d3e:	d001      	beq.n	11d44 <strncmp+0x1c>
   11d40:	2a00      	cmp	r2, #0
   11d42:	d1f5      	bne.n	11d30 <strncmp+0x8>
   11d44:	1ad0      	subs	r0, r2, r3
   11d46:	bd10      	pop	{r4, pc}
   11d48:	4610      	mov	r0, r2
   11d4a:	e7fc      	b.n	11d46 <strncmp+0x1e>

00011d4c <strncpy>:
   11d4c:	3901      	subs	r1, #1
   11d4e:	4603      	mov	r3, r0
   11d50:	b510      	push	{r4, lr}
   11d52:	b132      	cbz	r2, 11d62 <strncpy+0x16>
   11d54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11d58:	3a01      	subs	r2, #1
   11d5a:	f803 4b01 	strb.w	r4, [r3], #1
   11d5e:	2c00      	cmp	r4, #0
   11d60:	d1f7      	bne.n	11d52 <strncpy+0x6>
   11d62:	441a      	add	r2, r3
   11d64:	2100      	movs	r1, #0
   11d66:	4293      	cmp	r3, r2
   11d68:	d100      	bne.n	11d6c <strncpy+0x20>
   11d6a:	bd10      	pop	{r4, pc}
   11d6c:	f803 1b01 	strb.w	r1, [r3], #1
   11d70:	e7f9      	b.n	11d66 <strncpy+0x1a>

00011d72 <strnlen>:
   11d72:	4602      	mov	r2, r0
   11d74:	4401      	add	r1, r0
   11d76:	b510      	push	{r4, lr}
   11d78:	428a      	cmp	r2, r1
   11d7a:	4613      	mov	r3, r2
   11d7c:	d003      	beq.n	11d86 <strnlen+0x14>
   11d7e:	781c      	ldrb	r4, [r3, #0]
   11d80:	3201      	adds	r2, #1
   11d82:	2c00      	cmp	r4, #0
   11d84:	d1f8      	bne.n	11d78 <strnlen+0x6>
   11d86:	1a18      	subs	r0, r3, r0
   11d88:	bd10      	pop	{r4, pc}

00011d8a <strstr>:
   11d8a:	780a      	ldrb	r2, [r1, #0]
   11d8c:	b570      	push	{r4, r5, r6, lr}
   11d8e:	b96a      	cbnz	r2, 11dac <strstr+0x22>
   11d90:	bd70      	pop	{r4, r5, r6, pc}
   11d92:	429a      	cmp	r2, r3
   11d94:	d109      	bne.n	11daa <strstr+0x20>
   11d96:	460c      	mov	r4, r1
   11d98:	4605      	mov	r5, r0
   11d9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   11d9e:	2b00      	cmp	r3, #0
   11da0:	d0f6      	beq.n	11d90 <strstr+0x6>
   11da2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   11da6:	429e      	cmp	r6, r3
   11da8:	d0f7      	beq.n	11d9a <strstr+0x10>
   11daa:	3001      	adds	r0, #1
   11dac:	7803      	ldrb	r3, [r0, #0]
   11dae:	2b00      	cmp	r3, #0
   11db0:	d1ef      	bne.n	11d92 <strstr+0x8>
   11db2:	4618      	mov	r0, r3
   11db4:	e7ec      	b.n	11d90 <strstr+0x6>

00011db6 <_vsniprintf_r>:
   11db6:	b530      	push	{r4, r5, lr}
   11db8:	4614      	mov	r4, r2
   11dba:	b09b      	sub	sp, #108	; 0x6c
   11dbc:	4605      	mov	r5, r0
   11dbe:	461a      	mov	r2, r3
   11dc0:	2c00      	cmp	r4, #0
   11dc2:	da05      	bge.n	11dd0 <_vsniprintf_r+0x1a>
   11dc4:	238b      	movs	r3, #139	; 0x8b
   11dc6:	6003      	str	r3, [r0, #0]
   11dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11dcc:	b01b      	add	sp, #108	; 0x6c
   11dce:	bd30      	pop	{r4, r5, pc}
   11dd0:	f44f 7302 	mov.w	r3, #520	; 0x208
   11dd4:	9100      	str	r1, [sp, #0]
   11dd6:	9104      	str	r1, [sp, #16]
   11dd8:	4669      	mov	r1, sp
   11dda:	f8ad 300c 	strh.w	r3, [sp, #12]
   11dde:	bf14      	ite	ne
   11de0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   11de4:	4623      	moveq	r3, r4
   11de6:	9302      	str	r3, [sp, #8]
   11de8:	9305      	str	r3, [sp, #20]
   11dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11dee:	f8ad 300e 	strh.w	r3, [sp, #14]
   11df2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   11df4:	f7fe f8cc 	bl	ff90 <_svfiprintf_r>
   11df8:	1c43      	adds	r3, r0, #1
   11dfa:	bfbc      	itt	lt
   11dfc:	238b      	movlt	r3, #139	; 0x8b
   11dfe:	602b      	strlt	r3, [r5, #0]
   11e00:	2c00      	cmp	r4, #0
   11e02:	d0e3      	beq.n	11dcc <_vsniprintf_r+0x16>
   11e04:	9b00      	ldr	r3, [sp, #0]
   11e06:	2200      	movs	r2, #0
   11e08:	701a      	strb	r2, [r3, #0]
   11e0a:	e7df      	b.n	11dcc <_vsniprintf_r+0x16>

00011e0c <__ssputs_r>:
   11e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e10:	461f      	mov	r7, r3
   11e12:	688e      	ldr	r6, [r1, #8]
   11e14:	4682      	mov	sl, r0
   11e16:	460c      	mov	r4, r1
   11e18:	42be      	cmp	r6, r7
   11e1a:	4690      	mov	r8, r2
   11e1c:	680b      	ldr	r3, [r1, #0]
   11e1e:	d82d      	bhi.n	11e7c <__ssputs_r+0x70>
   11e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   11e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
   11e28:	d026      	beq.n	11e78 <__ssputs_r+0x6c>
   11e2a:	6965      	ldr	r5, [r4, #20]
   11e2c:	6909      	ldr	r1, [r1, #16]
   11e2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   11e32:	eba3 0901 	sub.w	r9, r3, r1
   11e36:	1c7b      	adds	r3, r7, #1
   11e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   11e3c:	444b      	add	r3, r9
   11e3e:	106d      	asrs	r5, r5, #1
   11e40:	429d      	cmp	r5, r3
   11e42:	bf38      	it	cc
   11e44:	461d      	movcc	r5, r3
   11e46:	0553      	lsls	r3, r2, #21
   11e48:	d527      	bpl.n	11e9a <__ssputs_r+0x8e>
   11e4a:	4629      	mov	r1, r5
   11e4c:	f7fd fe7a 	bl	fb44 <_malloc_r>
   11e50:	4606      	mov	r6, r0
   11e52:	b360      	cbz	r0, 11eae <__ssputs_r+0xa2>
   11e54:	464a      	mov	r2, r9
   11e56:	6921      	ldr	r1, [r4, #16]
   11e58:	f7ff ff3c 	bl	11cd4 <memcpy>
   11e5c:	89a3      	ldrh	r3, [r4, #12]
   11e5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   11e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11e66:	81a3      	strh	r3, [r4, #12]
   11e68:	6126      	str	r6, [r4, #16]
   11e6a:	444e      	add	r6, r9
   11e6c:	6165      	str	r5, [r4, #20]
   11e6e:	eba5 0509 	sub.w	r5, r5, r9
   11e72:	6026      	str	r6, [r4, #0]
   11e74:	463e      	mov	r6, r7
   11e76:	60a5      	str	r5, [r4, #8]
   11e78:	42be      	cmp	r6, r7
   11e7a:	d900      	bls.n	11e7e <__ssputs_r+0x72>
   11e7c:	463e      	mov	r6, r7
   11e7e:	4632      	mov	r2, r6
   11e80:	4641      	mov	r1, r8
   11e82:	6820      	ldr	r0, [r4, #0]
   11e84:	f000 f89d 	bl	11fc2 <memmove>
   11e88:	68a3      	ldr	r3, [r4, #8]
   11e8a:	2000      	movs	r0, #0
   11e8c:	1b9b      	subs	r3, r3, r6
   11e8e:	60a3      	str	r3, [r4, #8]
   11e90:	6823      	ldr	r3, [r4, #0]
   11e92:	4433      	add	r3, r6
   11e94:	6023      	str	r3, [r4, #0]
   11e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11e9a:	462a      	mov	r2, r5
   11e9c:	f000 f8ab 	bl	11ff6 <_realloc_r>
   11ea0:	4606      	mov	r6, r0
   11ea2:	2800      	cmp	r0, #0
   11ea4:	d1e0      	bne.n	11e68 <__ssputs_r+0x5c>
   11ea6:	6921      	ldr	r1, [r4, #16]
   11ea8:	4650      	mov	r0, sl
   11eaa:	f7fd fe01 	bl	fab0 <_free_r>
   11eae:	230c      	movs	r3, #12
   11eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11eb4:	f8ca 3000 	str.w	r3, [sl]
   11eb8:	89a3      	ldrh	r3, [r4, #12]
   11eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11ebe:	81a3      	strh	r3, [r4, #12]
   11ec0:	e7e9      	b.n	11e96 <__ssputs_r+0x8a>

00011ec2 <_printf_common>:
   11ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ec6:	4616      	mov	r6, r2
   11ec8:	4698      	mov	r8, r3
   11eca:	688a      	ldr	r2, [r1, #8]
   11ecc:	4607      	mov	r7, r0
   11ece:	690b      	ldr	r3, [r1, #16]
   11ed0:	460c      	mov	r4, r1
   11ed2:	f8dd 9020 	ldr.w	r9, [sp, #32]
   11ed6:	4293      	cmp	r3, r2
   11ed8:	bfb8      	it	lt
   11eda:	4613      	movlt	r3, r2
   11edc:	6033      	str	r3, [r6, #0]
   11ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   11ee2:	b10a      	cbz	r2, 11ee8 <_printf_common+0x26>
   11ee4:	3301      	adds	r3, #1
   11ee6:	6033      	str	r3, [r6, #0]
   11ee8:	6823      	ldr	r3, [r4, #0]
   11eea:	0699      	lsls	r1, r3, #26
   11eec:	bf42      	ittt	mi
   11eee:	6833      	ldrmi	r3, [r6, #0]
   11ef0:	3302      	addmi	r3, #2
   11ef2:	6033      	strmi	r3, [r6, #0]
   11ef4:	6825      	ldr	r5, [r4, #0]
   11ef6:	f015 0506 	ands.w	r5, r5, #6
   11efa:	d106      	bne.n	11f0a <_printf_common+0x48>
   11efc:	f104 0a19 	add.w	sl, r4, #25
   11f00:	68e3      	ldr	r3, [r4, #12]
   11f02:	6832      	ldr	r2, [r6, #0]
   11f04:	1a9b      	subs	r3, r3, r2
   11f06:	42ab      	cmp	r3, r5
   11f08:	dc2b      	bgt.n	11f62 <_printf_common+0xa0>
   11f0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   11f0e:	6822      	ldr	r2, [r4, #0]
   11f10:	3b00      	subs	r3, #0
   11f12:	bf18      	it	ne
   11f14:	2301      	movne	r3, #1
   11f16:	0692      	lsls	r2, r2, #26
   11f18:	d430      	bmi.n	11f7c <_printf_common+0xba>
   11f1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   11f1e:	4641      	mov	r1, r8
   11f20:	4638      	mov	r0, r7
   11f22:	47c8      	blx	r9
   11f24:	3001      	adds	r0, #1
   11f26:	d023      	beq.n	11f70 <_printf_common+0xae>
   11f28:	6823      	ldr	r3, [r4, #0]
   11f2a:	341a      	adds	r4, #26
   11f2c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   11f30:	f003 0306 	and.w	r3, r3, #6
   11f34:	2b04      	cmp	r3, #4
   11f36:	bf0a      	itet	eq
   11f38:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   11f3c:	2500      	movne	r5, #0
   11f3e:	6833      	ldreq	r3, [r6, #0]
   11f40:	f04f 0600 	mov.w	r6, #0
   11f44:	bf08      	it	eq
   11f46:	1aed      	subeq	r5, r5, r3
   11f48:	f854 3c12 	ldr.w	r3, [r4, #-18]
   11f4c:	bf08      	it	eq
   11f4e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   11f52:	4293      	cmp	r3, r2
   11f54:	bfc4      	itt	gt
   11f56:	1a9b      	subgt	r3, r3, r2
   11f58:	18ed      	addgt	r5, r5, r3
   11f5a:	42b5      	cmp	r5, r6
   11f5c:	d11a      	bne.n	11f94 <_printf_common+0xd2>
   11f5e:	2000      	movs	r0, #0
   11f60:	e008      	b.n	11f74 <_printf_common+0xb2>
   11f62:	2301      	movs	r3, #1
   11f64:	4652      	mov	r2, sl
   11f66:	4641      	mov	r1, r8
   11f68:	4638      	mov	r0, r7
   11f6a:	47c8      	blx	r9
   11f6c:	3001      	adds	r0, #1
   11f6e:	d103      	bne.n	11f78 <_printf_common+0xb6>
   11f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f78:	3501      	adds	r5, #1
   11f7a:	e7c1      	b.n	11f00 <_printf_common+0x3e>
   11f7c:	18e1      	adds	r1, r4, r3
   11f7e:	1c5a      	adds	r2, r3, #1
   11f80:	2030      	movs	r0, #48	; 0x30
   11f82:	3302      	adds	r3, #2
   11f84:	4422      	add	r2, r4
   11f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   11f8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   11f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   11f92:	e7c2      	b.n	11f1a <_printf_common+0x58>
   11f94:	2301      	movs	r3, #1
   11f96:	4622      	mov	r2, r4
   11f98:	4641      	mov	r1, r8
   11f9a:	4638      	mov	r0, r7
   11f9c:	47c8      	blx	r9
   11f9e:	3001      	adds	r0, #1
   11fa0:	d0e6      	beq.n	11f70 <_printf_common+0xae>
   11fa2:	3601      	adds	r6, #1
   11fa4:	e7d9      	b.n	11f5a <_printf_common+0x98>

00011fa6 <memchr>:
   11fa6:	b2c9      	uxtb	r1, r1
   11fa8:	4603      	mov	r3, r0
   11faa:	4402      	add	r2, r0
   11fac:	b510      	push	{r4, lr}
   11fae:	4293      	cmp	r3, r2
   11fb0:	4618      	mov	r0, r3
   11fb2:	d101      	bne.n	11fb8 <memchr+0x12>
   11fb4:	2000      	movs	r0, #0
   11fb6:	e003      	b.n	11fc0 <memchr+0x1a>
   11fb8:	7804      	ldrb	r4, [r0, #0]
   11fba:	3301      	adds	r3, #1
   11fbc:	428c      	cmp	r4, r1
   11fbe:	d1f6      	bne.n	11fae <memchr+0x8>
   11fc0:	bd10      	pop	{r4, pc}

00011fc2 <memmove>:
   11fc2:	4288      	cmp	r0, r1
   11fc4:	b510      	push	{r4, lr}
   11fc6:	eb01 0402 	add.w	r4, r1, r2
   11fca:	d902      	bls.n	11fd2 <memmove+0x10>
   11fcc:	4284      	cmp	r4, r0
   11fce:	4623      	mov	r3, r4
   11fd0:	d807      	bhi.n	11fe2 <memmove+0x20>
   11fd2:	1e43      	subs	r3, r0, #1
   11fd4:	42a1      	cmp	r1, r4
   11fd6:	d008      	beq.n	11fea <memmove+0x28>
   11fd8:	f811 2b01 	ldrb.w	r2, [r1], #1
   11fdc:	f803 2f01 	strb.w	r2, [r3, #1]!
   11fe0:	e7f8      	b.n	11fd4 <memmove+0x12>
   11fe2:	4402      	add	r2, r0
   11fe4:	4601      	mov	r1, r0
   11fe6:	428a      	cmp	r2, r1
   11fe8:	d100      	bne.n	11fec <memmove+0x2a>
   11fea:	bd10      	pop	{r4, pc}
   11fec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   11ff0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   11ff4:	e7f7      	b.n	11fe6 <memmove+0x24>

00011ff6 <_realloc_r>:
   11ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ff8:	4607      	mov	r7, r0
   11ffa:	4615      	mov	r5, r2
   11ffc:	460c      	mov	r4, r1
   11ffe:	b921      	cbnz	r1, 1200a <_realloc_r+0x14>
   12000:	4611      	mov	r1, r2
   12002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12006:	f7fd bd9d 	b.w	fb44 <_malloc_r>
   1200a:	b922      	cbnz	r2, 12016 <_realloc_r+0x20>
   1200c:	f7fd fd50 	bl	fab0 <_free_r>
   12010:	2400      	movs	r4, #0
   12012:	4620      	mov	r0, r4
   12014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12016:	f000 f813 	bl	12040 <_malloc_usable_size_r>
   1201a:	42a8      	cmp	r0, r5
   1201c:	d2f9      	bcs.n	12012 <_realloc_r+0x1c>
   1201e:	4629      	mov	r1, r5
   12020:	4638      	mov	r0, r7
   12022:	f7fd fd8f 	bl	fb44 <_malloc_r>
   12026:	4606      	mov	r6, r0
   12028:	2800      	cmp	r0, #0
   1202a:	d0f1      	beq.n	12010 <_realloc_r+0x1a>
   1202c:	4621      	mov	r1, r4
   1202e:	462a      	mov	r2, r5
   12030:	f7ff fe50 	bl	11cd4 <memcpy>
   12034:	4621      	mov	r1, r4
   12036:	4638      	mov	r0, r7
   12038:	4634      	mov	r4, r6
   1203a:	f7fd fd39 	bl	fab0 <_free_r>
   1203e:	e7e8      	b.n	12012 <_realloc_r+0x1c>

00012040 <_malloc_usable_size_r>:
   12040:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12044:	1f18      	subs	r0, r3, #4
   12046:	2b00      	cmp	r3, #0
   12048:	bfbc      	itt	lt
   1204a:	580b      	ldrlt	r3, [r1, r0]
   1204c:	18c0      	addlt	r0, r0, r3
   1204e:	4770      	bx	lr
